From 93092401c91de2a5bfe927d6266654a7e3abb48c Mon Sep 17 00:00:00 2001
From: Benxi Liu <bxliu@linux.alibaba.com>
Date: Fri, 1 Feb 2019 15:33:17 +0800
Subject: [PATCH] Fix BZ 22786: integer addition overflow may cause stack
 buffer overflow when realpath() input length is close to SSIZE_MAX.

2018-05-09  Paul Pluzhnikov  <ppluzhnikov@google.com>

[BZ #22786]
* stdlib/canonicalize.c (__realpath): Fix overflow in path length
computation.

(cherry picked from commit 5460617d1567657621107d895ee2dd83bc1f88f2)

The patch comes from:
https://sourceware.org/git/gitweb.cgi?p=glibc.git;h=5460617d1567657621107d895ee2dd83bc1f88f2

The related new test is not added to this patch.

CVE: CVE-2018-11236
Upstream-Status: Backport

Signed-off-by: Benxi Liu <bxliu@linux.alibaba.com>
---
 ChangeLog             | 6 ++++++
 NEWS                  | 2 ++
 stdlib/canonicalize.c | 2 +-
 3 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 8bbf4dd..edfa2c1 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,9 @@
+2018-05-09  Paul Pluzhnikov  <ppluzhnikov@google.com>
+
+	[BZ #22786]
+	* stdlib/canonicalize.c (__realpath): Fix overflow in path length
+	computation.
+
 2018-03-23  Andrew Senkevich  <andrew.senkevich@intel.com>
 	    Max Horn  <max@quendi.de>
 
diff --git a/NEWS b/NEWS
index 0ead6f2..689d214 100644
--- a/NEWS
+++ b/NEWS
@@ -358,6 +358,8 @@ The following bugs are resolved with this release:
   [22679] getcwd(3) can succeed without returning an absolute path
     (CVE-2018-1000001)
   [22774] malloc: Integer overflow in malloc (CVE-2018-6551)
+  [22786] libc: Stack buffer overflow in realpath() if input size is close
+    to SSIZE_MAX (CVE-2018-11236)
 
 Version 2.23
 
diff --git a/stdlib/canonicalize.c b/stdlib/canonicalize.c
index 58bb8de..59a7b94 100644
--- a/stdlib/canonicalize.c
+++ b/stdlib/canonicalize.c
@@ -181,7 +181,7 @@ __realpath (const char *name, char *resolved)
 		extra_buf = __alloca (path_max);
 
 	      len = strlen (end);
-	      if ((long int) (n + len) >= path_max)
+	      if (path_max - n <= len)
 		{
 		  __set_errno (ENAMETOOLONG);
 		  goto error;
-- 
2.7.4

