From 830c8f648ef97c99b178880eb10f61d233d8e404 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Thu, 9 Aug 2018 17:50:44 +0800
Subject: [PATCH 2/5] Sync BSP kernel's rockchip-cpuinfo

Base on:
97fd046dc230 media: rockchip: isp1: adjust isp clk by pixel rate of sensor

Change-Id: Iac2a9033dca3dacad11253207edadb24fffec6ad
Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 drivers/soc/rockchip/Kconfig            |  10 +++
 drivers/soc/rockchip/Makefile           |   1 +
 drivers/soc/rockchip/rockchip-cpuinfo.c | 147 ++++++++++++++++++++++++++++++++
 include/linux/rockchip/cpu.h            | 107 +++++++++++++++++++++++
 4 files changed, 265 insertions(+)
 create mode 100644 drivers/soc/rockchip/rockchip-cpuinfo.c
 create mode 100644 include/linux/rockchip/cpu.h

diff --git a/drivers/soc/rockchip/Kconfig b/drivers/soc/rockchip/Kconfig
index 5d7d06856e65..24ba6a75ad1e 100644
--- a/drivers/soc/rockchip/Kconfig
+++ b/drivers/soc/rockchip/Kconfig
@@ -5,6 +5,16 @@ source "drivers/soc/rockchip/Kconfig.cpu"
 #
 # Rockchip Soc drivers
 #
+config ROCKCHIP_CPUINFO
+	bool "Rockchip cpuinfo support"
+	depends on (ROCKCHIP_EFUSE || ROCKCHIP_OTP) && (ARM64 || ARM)
+	default y
+	help
+	  Say y here to enable Rockchip cpuinfo support.
+	  Set system_serial_low/high from eFuse ID.
+	  Serial can read from /proc/cpuinfo.
+
+	  If unsure, say N.
 
 config ROCKCHIP_GRF
 	bool
diff --git a/drivers/soc/rockchip/Makefile b/drivers/soc/rockchip/Makefile
index c9c5087d05a1..282f428466e0 100644
--- a/drivers/soc/rockchip/Makefile
+++ b/drivers/soc/rockchip/Makefile
@@ -1,6 +1,7 @@
 #
 # Rockchip Soc drivers
 #
+obj-$(CONFIG_ROCKCHIP_CPUINFO)	+= rockchip-cpuinfo.o
 obj-$(CONFIG_ROCKCHIP_GRF) += grf.o
 obj-$(CONFIG_ROCKCHIP_PM_DOMAINS) += pm_domains.o
 obj-$(CONFIG_RK_FLASH)	+= flash_vendor_storage.o
diff --git a/drivers/soc/rockchip/rockchip-cpuinfo.c b/drivers/soc/rockchip/rockchip-cpuinfo.c
new file mode 100644
index 000000000000..a9ded8e8a263
--- /dev/null
+++ b/drivers/soc/rockchip/rockchip-cpuinfo.c
@@ -0,0 +1,147 @@
+/*
+ * Copyright (C) 2017 Rockchip Electronics Co. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/crc32.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/nvmem-consumer.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <asm/system_info.h>
+#include <linux/rockchip/cpu.h>
+
+unsigned long rockchip_soc_id;
+EXPORT_SYMBOL(rockchip_soc_id);
+
+static int rockchip_cpuinfo_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct nvmem_cell *cell;
+	unsigned char *efuse_buf, buf[16];
+	size_t len;
+	int i;
+
+	cell = nvmem_cell_get(dev, "cpu-version");
+	if (!IS_ERR(cell)) {
+		efuse_buf = nvmem_cell_read(cell, &len);
+		nvmem_cell_put(cell);
+
+		if (len == 1)
+			rockchip_set_cpu_version(efuse_buf[0]);
+		kfree(efuse_buf);
+	}
+
+	cell = nvmem_cell_get(dev, "id");
+	if (IS_ERR(cell)) {
+		dev_err(dev, "failed to get id cell: %ld\n", PTR_ERR(cell));
+		if (PTR_ERR(cell) == -EPROBE_DEFER)
+			return PTR_ERR(cell);
+		return PTR_ERR(cell);
+	}
+	efuse_buf = nvmem_cell_read(cell, &len);
+	nvmem_cell_put(cell);
+
+	if (len != 16) {
+		kfree(efuse_buf);
+		dev_err(dev, "invalid id len: %zu\n", len);
+		return -EINVAL;
+	}
+
+	for (i = 0; i < 8; i++) {
+		buf[i] = efuse_buf[1 + (i << 1)];
+		buf[i + 8] = efuse_buf[i << 1];
+	}
+
+	kfree(efuse_buf);
+
+	system_serial_low = crc32(0, buf, 8);
+	system_serial_high = crc32(system_serial_low, buf + 8, 8);
+
+	dev_info(dev, "Serial\t\t: %08x%08x\n",
+		 system_serial_high, system_serial_low);
+
+	return 0;
+}
+
+static const struct of_device_id rockchip_cpuinfo_of_match[] = {
+	{ .compatible = "rockchip,cpuinfo", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, rockchip_cpuinfo_of_match);
+
+static struct platform_driver rockchip_cpuinfo_driver = {
+	.probe = rockchip_cpuinfo_probe,
+	.driver = {
+		.name = "rockchip-cpuinfo",
+		.of_match_table = rockchip_cpuinfo_of_match,
+	},
+};
+
+#ifdef CONFIG_ARM
+static void rk3288_init(void)
+{
+	void __iomem *base;
+
+	rockchip_soc_id = ROCKCHIP_SOC_RK3288;
+#define RK3288_HDMI_PHYS	0xFF980000
+	base = ioremap(RK3288_HDMI_PHYS, SZ_4K);
+	if (base) {
+		/* RK3288W HDMI Revision ID is 0x1A */
+		if (readl_relaxed(base + 4) == 0x1A)
+			rockchip_soc_id = ROCKCHIP_SOC_RK3288W;
+		iounmap(base);
+	}
+}
+
+static void rk3126_init(void)
+{
+	void __iomem *base;
+
+	rockchip_soc_id = ROCKCHIP_SOC_RK3126;
+#define RK312X_GRF_PHYS		0x20008000
+#define RK312X_GRF_SOC_CON1	0x00000144
+#define RK312X_GRF_CHIP_TAG	0x00000300
+	base = ioremap(RK312X_GRF_PHYS, SZ_4K);
+	if (base) {
+		if (readl_relaxed(base + RK312X_GRF_CHIP_TAG) == 0x3136) {
+			if (readl_relaxed(base + RK312X_GRF_SOC_CON1) & 0x1)
+				rockchip_soc_id = ROCKCHIP_SOC_RK3126C;
+			else
+				rockchip_soc_id = ROCKCHIP_SOC_RK3126B;
+		}
+		iounmap(base);
+	}
+}
+
+static int __init rockchip_soc_id_init(void)
+{
+	if (cpu_is_rk3288()) {
+		rk3288_init();
+	} else if (cpu_is_rk312x()) {
+		if (of_machine_is_compatible("rockchip,rk3128"))
+			rockchip_soc_id = ROCKCHIP_SOC_RK3128;
+		else
+			rk3126_init();
+	}
+
+	return 0;
+}
+pure_initcall(rockchip_soc_id_init);
+#endif
+
+static int __init rockchip_cpuinfo_init(void)
+{
+	return platform_driver_register(&rockchip_cpuinfo_driver);
+}
+subsys_initcall_sync(rockchip_cpuinfo_init);
diff --git a/include/linux/rockchip/cpu.h b/include/linux/rockchip/cpu.h
new file mode 100644
index 000000000000..7eb082722227
--- /dev/null
+++ b/include/linux/rockchip/cpu.h
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2017 Rockchip Electronics Co. Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
+ * more details.
+ */
+
+#ifndef __LINUX_ROCKCHIP_CPU_H
+#define __LINUX_ROCKCHIP_CPU_H
+
+#include <linux/of.h>
+
+#ifdef CONFIG_ROCKCHIP_CPUINFO
+
+extern unsigned long rockchip_soc_id;
+
+#define ROCKCHIP_CPU_VERION_MASK	0x0000f000
+#define ROCKCHIP_CPU_VERION_SHIFT	12
+
+static inline unsigned long rockchip_get_cpu_version(void)
+{
+	return (rockchip_soc_id & ROCKCHIP_CPU_VERION_MASK)
+		>> ROCKCHIP_CPU_VERION_SHIFT;
+}
+
+static inline void rockchip_set_cpu_version(unsigned long ver)
+{
+	rockchip_soc_id &= ~ROCKCHIP_CPU_VERION_MASK;
+	rockchip_soc_id |=
+		(ver << ROCKCHIP_CPU_VERION_SHIFT) & ROCKCHIP_CPU_VERION_MASK;
+}
+
+#else
+
+#define rockchip_soc_id 0
+
+static inline unsigned long rockchip_get_cpu_version(void)
+{
+	return 0;
+}
+
+static inline void rockchip_set_cpu_version(unsigned long ver)
+{
+}
+
+#endif
+
+#define ROCKCHIP_CPU_MASK       0xffff0000
+#define ROCKCHIP_CPU_RK312X     0x31260000
+#define ROCKCHIP_CPU_RK3288     0x32880000
+
+#ifdef CONFIG_CPU_RK312X
+static inline bool cpu_is_rk312x(void)
+{
+	if (rockchip_soc_id)
+		return (rockchip_soc_id & ROCKCHIP_CPU_MASK) == ROCKCHIP_CPU_RK312X;
+	return of_machine_is_compatible("rockchip,rk3126") ||
+	       of_machine_is_compatible("rockchip,rk3126b") ||
+	       of_machine_is_compatible("rockchip,rk3126c") ||
+	       of_machine_is_compatible("rockchip,rk3128");
+}
+#else
+static inline bool cpu_is_rk312x(void) { return false; }
+#endif
+
+#ifdef CONFIG_CPU_RK3288
+static inline bool cpu_is_rk3288(void)
+{
+	if (rockchip_soc_id)
+		return (rockchip_soc_id & ROCKCHIP_CPU_MASK) == ROCKCHIP_CPU_RK3288;
+	return of_machine_is_compatible("rockchip,rk3288") ||
+	       of_machine_is_compatible("rockchip,rk3288w");
+}
+#else
+static inline bool cpu_is_rk3288(void) { return false; }
+#endif
+
+#define ROCKCHIP_SOC_MASK	(ROCKCHIP_CPU_MASK | 0xff)
+#define ROCKCHIP_SOC_RK3126     (ROCKCHIP_CPU_RK312X | 0x00)
+#define ROCKCHIP_SOC_RK3126B    (ROCKCHIP_CPU_RK312X | 0x10)
+#define ROCKCHIP_SOC_RK3126C    (ROCKCHIP_CPU_RK312X | 0x20)
+#define ROCKCHIP_SOC_RK3128     (ROCKCHIP_CPU_RK312X | 0x01)
+#define ROCKCHIP_SOC_RK3288     (ROCKCHIP_CPU_RK3288 | 0x00)
+#define ROCKCHIP_SOC_RK3288W    (ROCKCHIP_CPU_RK3288 | 0x01)
+
+#define ROCKCHIP_SOC(id, ID) \
+static inline bool soc_is_##id(void) \
+{ \
+	if (rockchip_soc_id) \
+		return ((rockchip_soc_id & ROCKCHIP_SOC_MASK) == ROCKCHIP_SOC_ ##ID); \
+	return of_machine_is_compatible("rockchip,"#id); \
+}
+
+ROCKCHIP_SOC(rk3126, RK3126)
+ROCKCHIP_SOC(rk3126b, RK3126B)
+ROCKCHIP_SOC(rk3126c, RK3126C)
+ROCKCHIP_SOC(rk3128, RK3128)
+ROCKCHIP_SOC(rk3288, RK3288)
+ROCKCHIP_SOC(rk3288w, RK3288W)
+
+#endif
-- 
2.11.0

