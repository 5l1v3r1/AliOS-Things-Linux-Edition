From d08592505b64e3356c3eebefdfcf4ab360784278 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Wed, 10 Oct 2018 14:26:43 +0800
Subject: [PATCH] Sync BSP kernel's rkflash

Base on:
97fd046dc230 media: rockchip: isp1: adjust isp clk by pixel rate of sensor

Contains:
f4c0eb91410a drivers: rkflash: fix error in SPI NOR Flash mtd support code
be4367b020f7 drivers: rkflash: add new spi nand flash support
559c3e624030 drivers: rkflash: support NANDC ver 9
f53151f421d1 drivers: rkflash: fix firmware-lost-error in power lost case
057b63a64f4c drivers: rkflash: add rkflash proc info
f0f004d82630 drivers: rkflash: adjusting the vendor interface provided to the kernel
b20b2fd58921 drivers: rkflash: support setting sfc clk by dts
a5cf9c0db512 drivers: rkflash: support kernel IDBlock update
125b3c4345bb drivers: rkflash: add new spi flash
3cf664dd5738 drivers: rkflash: make printk macro configurable
a4b255f98710 drivers: rkflash: add 25Q64JVSSIQ and 25Q64FWSSIG nor devices

Change-Id: I68a313d8f504e40e805f6736305a07a92d42c664
Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 arch/arm64/boot/dts/rockchip/rk3308.dtsi |     2 +
 drivers/rkflash/nand_boot.c              |     5 +
 drivers/rkflash/nandc.c                  |   420 +-
 drivers/rkflash/nandc.h                  |   123 +
 drivers/rkflash/rk_sftl.h                |    18 +-
 drivers/rkflash/rk_sftl_arm_v7.S         | 15627 ++++++++++++++--------------
 drivers/rkflash/rk_sftl_arm_v7_thumb.S   | 14681 ++++++++++++++-------------
 drivers/rkflash/rk_sftl_arm_v8.S         | 15734 +++++++++++++++--------------
 drivers/rkflash/rkflash_api.h            |     3 +
 drivers/rkflash/rkflash_blk.c            |    53 +-
 drivers/rkflash/rkflash_blk.h            |     2 +
 drivers/rkflash/rkflash_debug.h          |     4 +-
 drivers/rkflash/rksfc_base.c             |     9 +-
 drivers/rkflash/sfc_nand.c               |   110 +-
 drivers/rkflash/sfc_nand.h               |     3 +
 drivers/rkflash/sfc_nand_boot.c          |     5 +
 drivers/rkflash/sfc_nor.c                |    10 +
 drivers/rkflash/sfc_nor_boot.c           |     5 +
 drivers/rkflash/sfc_nor_mtd.c            |     2 +-
 19 files changed, 24536 insertions(+), 22280 deletions(-)

diff --git a/arch/arm64/boot/dts/rockchip/rk3308.dtsi b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
index 3f33525ead9c..3c7b162d52ad 100644
--- a/arch/arm64/boot/dts/rockchip/rk3308.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
@@ -1026,6 +1026,8 @@
 		interrupts = <GIC_SPI 82 IRQ_TYPE_LEVEL_HIGH>;
 		clocks = <&cru SCLK_SFC>, <&cru HCLK_SFC>;
 		clock-names = "clk_sfc", "hclk_sfc";
+		assigned-clocks = <&cru SCLK_SFC>;
+		assigned-clock-rates = <100000000>;
 		status = "disabled";
 	};
 
diff --git a/drivers/rkflash/nand_boot.c b/drivers/rkflash/nand_boot.c
index 864c2bdbaf2f..6c9ea7279eee 100644
--- a/drivers/rkflash/nand_boot.c
+++ b/drivers/rkflash/nand_boot.c
@@ -52,6 +52,11 @@ int sftl_flash_vendor_write(u32 sec, u32 n_sec, void *p_data)
 	return sftl_vendor_write(sec, n_sec, p_data);
 }
 
+int sftl_flash_gc(void)
+{
+	return sftl_gc();
+}
+
 void sftl_flash_deinit(void)
 {
 	u8 chip_sel = 0;
diff --git a/drivers/rkflash/nandc.c b/drivers/rkflash/nandc.c
index 622db477c0cb..ce7fecaac8c1 100644
--- a/drivers/rkflash/nandc.c
+++ b/drivers/rkflash/nandc.c
@@ -15,6 +15,7 @@
 #define	    NANDC_MASTER_EN
 
 void __iomem *nandc_base;
+static u8 g_nandc_ver;
 
 static u32 g_nandc_ecc_bits;
 #ifdef NANDC_MASTER_EN
@@ -29,9 +30,21 @@ void nandc_init(void __iomem *nandc_addr)
 	nandc_base = nandc_addr;
 
 	ctl_reg.d32 = 0;
-	ctl_reg.V6.wp = 1;
-	nandc_writel(ctl_reg.d32, NANDC_FMCTL);
-	nandc_writel(0, NANDC_RANDMZ_CFG);
+	g_nandc_ver = 6;
+	if (nandc_readl(NANDC_V9_NANDC_VER) == RK3326_NANDC_VER)
+		g_nandc_ver = 9;
+	if (g_nandc_ver == 9) {
+		ctl_reg.V9.wp = 1;
+		ctl_reg.V9.sif_read_delay = 2;
+		nandc_writel(ctl_reg.d32, NANDC_V9_FMCTL);
+		nandc_writel(0, NANDC_V9_RANDMZ_CFG);
+		nandc_writel(0x1041, NANDC_V9_FMWAIT);
+	} else {
+		ctl_reg.V6.wp = 1;
+		nandc_writel(ctl_reg.d32, NANDC_FMCTL);
+		nandc_writel(0, NANDC_RANDMZ_CFG);
+		nandc_writel(0x1061, NANDC_FMWAIT);
+	}
 	nandc_time_cfg(40);
 
 #ifdef NANDC_MASTER_EN
@@ -95,153 +108,284 @@ void nandc_randmz_sel(u8 chip_sel, u32 randmz_seed)
 
 void nandc_time_cfg(u32 ns)
 {
-	if (ns < 36)
-		nandc_writel(0x1061, NANDC_FMWAIT);
-	else if (ns >= 100)
-		nandc_writel(0x2082, NANDC_FMWAIT);
-	else
-		nandc_writel(0x1081, NANDC_FMWAIT);
+	if (g_nandc_ver == 9) {
+		if (ns < 36)
+			nandc_writel(0x1041, NANDC_V9_FMWAIT);
+		else if (ns >= 100)
+			nandc_writel(0x2082, NANDC_V9_FMWAIT);
+		else
+			nandc_writel(0x1061, NANDC_V9_FMWAIT);
+	} else {
+		if (ns < 36)
+			nandc_writel(0x1061, NANDC_FMWAIT);
+		else if (ns >= 100)
+			nandc_writel(0x2082, NANDC_FMWAIT);
+		else
+			nandc_writel(0x1081, NANDC_FMWAIT);
+	}
 }
 
 void nandc_bch_sel(u8 bits)
 {
 	union BCH_CTL_T tmp;
 	union FL_CTL_T fl_reg;
+	u8 bch_config;
 
 	fl_reg.d32 = 0;
 	fl_reg.V6.rst = 1;
-	nandc_writel(fl_reg.d32, NANDC_FLCTL);
 	g_nandc_ecc_bits = bits;
-	tmp.d32 = 0;
-	tmp.V6.addr = 0x10;
-	tmp.V6.bch_mode1 = 0;
-	if (bits == 16) {
-		tmp.V6.bch_mode = 0;
-	} else if (bits == 24) {
-		tmp.V6.bch_mode = 1;
+	if (g_nandc_ver == 9) {
+		nandc_writel(fl_reg.d32, NANDC_V9_FLCTL);
+		if (bits == 70)
+			bch_config = 0;
+		else if (bits == 60)
+			bch_config = 3;
+		else if (bits == 40)
+			bch_config = 2;
+		else
+			bch_config = 1;
+		tmp.d32 = 0;
+		tmp.V9.bchmode = bch_config;
+		tmp.V9.bchrst = 1;
+		nandc_writel(tmp.d32, NANDC_V9_BCHCTL);
 	} else {
-		tmp.V6.bch_mode1 = 1;
-		tmp.V6.bch_mode = 1;
-		if (bits == 40)
+		nandc_writel(fl_reg.d32, NANDC_FLCTL);
+		tmp.d32 = 0;
+		tmp.V6.addr = 0x10;
+		tmp.V6.bch_mode1 = 0;
+		if (bits == 16) {
 			tmp.V6.bch_mode = 0;
+		} else if (bits == 24) {
+			tmp.V6.bch_mode = 1;
+		} else {
+			tmp.V6.bch_mode1 = 1;
+			tmp.V6.bch_mode = 1;
+			if (bits == 40)
+				tmp.V6.bch_mode = 0;
+		}
+		tmp.V6.rst = 1;
+		nandc_writel(tmp.d32, NANDC_BCHCTL);
 	}
-	tmp.V6.rst = 1;
-	nandc_writel(tmp.d32, NANDC_BCHCTL);
 }
 
-static void nandc_xfer_start(u8 chip_sel,
-			     u8 dir,
-			     u8 sector_count,
-			     u8 st_buf,
-			     u32 *p_data,
-			     u32 *p_spare)
+/*
+ *Nandc xfer data transmission
+ *1. set bch register except nandc version equals 9
+ *2. set internal transfer control register
+ *3. set bus transfer
+ *	a. target memory data address
+ *	b. ahb setting
+ *4. configure register orderly and start transmission
+ */
+static void nandc_xfer_start(u8 dir, u8 n_sec, u32 *data, u32 *spare)
 {
 	union BCH_CTL_T bch_reg;
 	union FL_CTL_T fl_reg;
-	u8 bus_mode = (p_spare || p_data);
 	u32 i;
 	union MTRANS_CFG_T master_reg;
-	u16 *p_spare_tmp = (u16 *)p_spare;
+	u16 *p_spare_tmp = (u16 *)spare;
 
 	fl_reg.d32 = 0;
-	bch_reg.d32 = nandc_readl(NANDC_BCHCTL);
-	bch_reg.V6.addr = 0x10;
-	bch_reg.V6.power_down = 0;
-	bch_reg.V6.region = chip_sel;
-
-	fl_reg.V6.rdn = dir;
-	fl_reg.V6.dma = 1;
-	fl_reg.V6.tr_count = 1;
-	fl_reg.V6.async_tog_mix = 1;
-	fl_reg.V6.cor_en = 1;
-	fl_reg.V6.st_addr = st_buf / 2;
-
-	master_reg.d32 = nandc_readl(NANDC_MTRANS_CFG);
-	master_reg.V6.bus_mode = 0;
-	#ifdef NANDC_MASTER_EN
-	if (bus_mode != 0 && dir != 0) {
-		u32 spare_sz = 64;
-
-		for (i = 0; i < sector_count / 2; i++) {
-			if (p_spare) {
-				master.spare_buf[i * spare_sz / 4] =
-				(p_spare_tmp[0]) | ((u32)p_spare_tmp[1] << 16);
-				p_spare_tmp += 2;
-			} else{
-				master.spare_buf[i * spare_sz / 4] =
-				0xffffffff;
+	if (g_nandc_ver == 9) {
+		fl_reg.V9.flash_rdn = dir;
+		fl_reg.V9.bypass = 1;
+		fl_reg.V9.tr_count = 1;
+		fl_reg.V9.async_tog_mix = 1;
+		fl_reg.V9.cor_able = 1;
+		fl_reg.V9.st_addr = 0;
+		fl_reg.V9.page_num = (n_sec + 1) / 2;
+		/* dma start transfer data do care flash rdy */
+		fl_reg.V9.flash_st_mod = 1;
+
+		if (dir != 0) {
+			for (i = 0; i < n_sec / 2; i++) {
+				if (spare) {
+					master.spare_buf[i] =
+						(p_spare_tmp[0]) |
+						((u32)p_spare_tmp[1] << 16);
+					p_spare_tmp += 2;
+				} else {
+					master.spare_buf[i] = 0xffffffff;
+				}
 			}
+		} else {
+			master.spare_buf[0] = 1;
 		}
-	}
-	fl_reg.V6.page_num = (sector_count + 1) / 2;
-	master.page_vir = (u32 *)((p_data == (u32 *)NULL) ?
-				  master.page_buf :
-				  (u32 *)p_data);
-	master.spare_vir = (u32 *)master.spare_buf;
-	master.page_phy =
-	(u32)rknandc_dma_map_single((unsigned long)master.page_vir,
+		master.page_vir = (u32 *)((data == (u32 *)NULL) ?
+					  master.page_buf :
+					  (u32 *)data);
+		master.spare_vir = (u32 *)master.spare_buf;
+		master.page_phy =
+		(u32)rknandc_dma_map_single((unsigned long)master.page_vir,
 				    fl_reg.V6.page_num * 1024,
 				    dir);
-	master.spare_phy =
-	(u32)rknandc_dma_map_single((unsigned long)master.spare_vir,
+		master.spare_phy =
+		(u32)rknandc_dma_map_single((unsigned long)master.spare_vir,
 				    fl_reg.V6.page_num * 64,
 				    dir);
-	master.mapped = 1;
-	nandc_writel(master.page_phy, NANDC_MTRANS_SADDR0);
-	nandc_writel(master.spare_phy, NANDC_MTRANS_SADDR1);
-	master_reg.d32 = 0;
-	master_reg.V6.incr_num = 16;
-	master_reg.V6.burst = 7;
-	if ((((unsigned long)p_data) & 0x03) == 0)
+		master.mapped = 1;
+		nandc_writel(master.page_phy, NANDC_V9_MTRANS_SADDR0);
+		nandc_writel(master.spare_phy, NANDC_V9_MTRANS_SADDR1);
+
+		master_reg.d32 =  nandc_readl(NANDC_V9_MTRANS_CFG);
+		master_reg.V9.incr_num = 16;
+		master_reg.V9.burst = 7;
+		master_reg.V9.hsize = 2;
+		master_reg.V9.bus_mode = 1;
+		master_reg.V9.ahb_wr = !dir;
+		master_reg.V9.ahb_wr_st = 1;
+		master_reg.V9.redundance_size = 0;
+
+		nandc_writel(master_reg.d32, NANDC_V9_MTRANS_CFG);
+		nandc_writel(fl_reg.d32, NANDC_V9_FLCTL);
+		fl_reg.V9.flash_st = 1;
+		nandc_writel(fl_reg.d32, NANDC_V9_FLCTL);
+	} else {
+		bch_reg.d32 = nandc_readl(NANDC_BCHCTL);
+		bch_reg.V6.addr = 0x10;
+		bch_reg.V6.power_down = 0;
+		bch_reg.V6.region = 0;
+
+		fl_reg.V6.rdn = dir;
+		fl_reg.V6.dma = 1;
+		fl_reg.V6.tr_count = 1;
+		fl_reg.V6.async_tog_mix = 1;
+		fl_reg.V6.cor_en = 1;
+		fl_reg.V6.st_addr = 0;
+
+		master_reg.d32 = nandc_readl(NANDC_MTRANS_CFG);
+		master_reg.V6.bus_mode = 0;
+		if (dir != 0) {
+			u32 spare_sz = 64;
+
+			for (i = 0; i < n_sec / 2; i++) {
+				if (spare) {
+					master.spare_buf[i * spare_sz / 4] =
+					(p_spare_tmp[0]) |
+					((u32)p_spare_tmp[1] << 16);
+					p_spare_tmp += 2;
+				} else {
+					master.spare_buf[i * spare_sz / 4] =
+					0xffffffff;
+				}
+			}
+		}
+		fl_reg.V6.page_num = (n_sec + 1) / 2;
+		master.page_vir = (u32 *)((data == (u32 *)NULL) ?
+					  master.page_buf :
+					  (u32 *)data);
+		master.spare_vir = (u32 *)master.spare_buf;
+		master.page_phy =
+			(u32)rknandc_dma_map_single((unsigned long)master.page_vir,
+						    fl_reg.V6.page_num * 1024,
+						    dir);
+		master.spare_phy =
+			(u32)rknandc_dma_map_single((unsigned long)master.spare_vir,
+						    fl_reg.V6.page_num * 64,
+						    dir);
+		master.mapped = 1;
+		nandc_writel(master.page_phy, NANDC_MTRANS_SADDR0);
+		nandc_writel(master.spare_phy, NANDC_MTRANS_SADDR1);
+		master_reg.d32 = 0;
+		master_reg.V6.incr_num = 16;
+		master_reg.V6.burst = 7;
 		master_reg.V6.hsize = 2;
-	master_reg.V6.bus_mode = 1;
-	master_reg.V6.ahb_wr = !dir;
-	master_reg.V6.ahb_wr_st = 1;
-	#endif
-
-	nandc_writel(master_reg.d32, NANDC_MTRANS_CFG);
-	nandc_writel(bch_reg.d32, NANDC_BCHCTL);
-	nandc_writel(fl_reg.d32, NANDC_FLCTL);
-	fl_reg.V6.start = 1;
-	nandc_writel(fl_reg.d32, NANDC_FLCTL);
+		master_reg.V6.bus_mode = 1;
+		master_reg.V6.ahb_wr = !dir;
+		master_reg.V6.ahb_wr_st = 1;
+
+		nandc_writel(master_reg.d32, NANDC_MTRANS_CFG);
+		nandc_writel(bch_reg.d32, NANDC_BCHCTL);
+		nandc_writel(fl_reg.d32, NANDC_FLCTL);
+		fl_reg.V6.start = 1;
+		nandc_writel(fl_reg.d32, NANDC_FLCTL);
+	}
 }
 
-static void nandc_xfer_comp(u8 chip_sel)
+/*
+ * Wait for the end of data transmission
+ */
+static void nandc_xfer_done(void)
 {
 	union FL_CTL_T fl_reg;
 	union MTRANS_CFG_T master_reg;
 
-	master_reg.d32 = nandc_readl(NANDC_MTRANS_CFG);
-	if (master_reg.V6.bus_mode != 0) {
+	if (g_nandc_ver == 9) {
 		union MTRANS_STAT_T stat_reg;
 
+		master_reg.d32 = nandc_readl(NANDC_V9_MTRANS_CFG);
+		if (master_reg.V9.ahb_wr != 0) {
+			do {
+				fl_reg.d32 = nandc_readl(NANDC_V9_FLCTL);
+				stat_reg.d32 = nandc_readl(NANDC_V9_MTRANS_STAT);
+			} while (stat_reg.V9.mtrans_cnt < fl_reg.V9.page_num ||
+				 fl_reg.V9.tr_rdy == 0);
+			if (master.mapped) {
+				rknandc_dma_unmap_single((u64)master.page_phy,
+					fl_reg.V6.page_num * 1024,
+					0);
+				rknandc_dma_unmap_single((u64)master.spare_phy,
+					fl_reg.V6.page_num * 64,
+					0);
+			}
+		} else {
+			do {
+				fl_reg.d32 = nandc_readl(NANDC_V9_FLCTL);
+			} while (fl_reg.V9.tr_rdy == 0);
+			if (master.mapped) {
+				rknandc_dma_unmap_single((u64)master.page_phy,
+					fl_reg.V6.page_num * 1024,
+					1);
+				rknandc_dma_unmap_single((u64)master.spare_phy,
+					fl_reg.V6.page_num * 64,
+					1);
+			}
+		}
+	} else {
+		master_reg.d32 = nandc_readl(NANDC_MTRANS_CFG);
+		if (master_reg.V6.bus_mode != 0) {
+			union MTRANS_STAT_T stat_reg;
+
 		if (master_reg.V6.ahb_wr != 0) {
 			do {
 				fl_reg.d32 = nandc_readl(NANDC_FLCTL);
 				stat_reg.d32 = nandc_readl(NANDC_MTRANS_STAT);
-			} while (stat_reg.V6.mtrans_cnt < fl_reg.V6.page_num);
+			} while (stat_reg.V6.mtrans_cnt < fl_reg.V6.page_num ||
+				 fl_reg.V6.tr_rdy == 0);
 
 			if (master.mapped) {
-				rknandc_dma_unmap_single((u64)master.page_phy,
-						fl_reg.V6.page_num * 1024,
-						0);
-				rknandc_dma_unmap_single((u64)master.spare_phy,
-						fl_reg.V6.page_num * 64,
-						0);
+				rknandc_dma_unmap_single(
+					(unsigned long)(master.page_phy),
+					fl_reg.V6.page_num * 1024,
+					0);
+				rknandc_dma_unmap_single(
+					(unsigned long)(master.spare_phy),
+					fl_reg.V6.page_num * 64,
+					0);
 			}
 		} else {
 			do {
 				fl_reg.d32 = nandc_readl(NANDC_FLCTL);
 			} while (fl_reg.V6.tr_rdy == 0);
+			if (master.mapped) {
+				rknandc_dma_unmap_single(
+					(unsigned long)(master.page_phy),
+					fl_reg.V6.page_num * 1024, 1);
+				rknandc_dma_unmap_single(
+					(unsigned long)(master.spare_phy),
+					fl_reg.V6.page_num * 64, 1);
+			}
+		}
+		master.mapped = 0;
+		} else {
+			do {
+				fl_reg.d32 = nandc_readl(NANDC_FLCTL);
+			} while ((fl_reg.V6.tr_rdy == 0));
 		}
-	} else {
-		do {
-			fl_reg.d32 = nandc_readl(NANDC_FLCTL);
-		} while ((fl_reg.V6.tr_rdy == 0));
 	}
 }
 
-u32 nandc_xfer_data(u8 chip_sel, u8 dir, u8 sector_count,
+u32 nandc_xfer_data(u8 chip_sel, u8 dir, u8 n_sec,
 		    u32 *p_data, u32 *p_spare)
 {
 	u32 status = NAND_STS_OK;
@@ -253,39 +397,63 @@ u32 nandc_xfer_data(u8 chip_sel, u8 dir, u8 sector_count,
 		p_spare = (u32 *)spare;
 		memset(spare, 0xFF, sizeof(spare));
 	}
-	nandc_xfer_start(chip_sel, dir, sector_count, 0, p_data, p_spare);
-	nandc_xfer_comp(chip_sel);
+	nandc_xfer_start(dir, n_sec, p_data, p_spare);
+	nandc_xfer_done();
 	if (dir == NANDC_READ) {
-		if (p_spare) {
-			u32 spare_sz = 64;
-			u32 temp_data;
-			u8 *p_spare_temp = (u8 *)p_spare;
-
-			for (i = 0; i < sector_count / 2; i++) {
-				temp_data = master.spare_buf[i * spare_sz / 4];
-				*p_spare_temp++ = (u8)temp_data;
-				*p_spare_temp++ = (u8)(temp_data >> 8);
-				*p_spare_temp++ = (u8)(temp_data >> 16);
-				*p_spare_temp++ = (u8)(temp_data >> 24);
+		if (g_nandc_ver == 9) {
+			for (i = 0; i < n_sec / 4; i++) {
+				bch_st_reg.d32 = nandc_readl(NANDC_V9_BCHST(i));
+				if (n_sec > 2) {
+					if (bch_st_reg.V9.fail0 || bch_st_reg.V9.fail1) {
+						status = NAND_STS_ECC_ERR;
+					} else {
+						u32 tmp = max((u32)bch_st_reg.V9.err_bits0,
+							      (u32)bch_st_reg.V9.err_bits1);
+						status = max(tmp, status);
+					}
+				} else {
+					if (bch_st_reg.V9.fail0)
+						status = NAND_STS_ECC_ERR;
+					else
+						status = bch_st_reg.V9.err_bits0;
+				}
 			}
-		}
-		for (i = 0; i < sector_count / 4 ; i++) {
-			bch_st_reg.d32 = nandc_readl(NANDC_BCHST(i));
-			if (bch_st_reg.V6.fail0 || bch_st_reg.V6.fail1) {
-				status = NAND_STS_ECC_ERR;
-			} else {
-				u32 tmp = 0;
-
-				tmp =
-				max(bch_st_reg.V6.err_bits0 |
-				    ((u32)bch_st_reg.V6.err_bits0_5 << 5),
-				    bch_st_reg.V6.err_bits1 |
-				    ((u32)bch_st_reg.V6.err_bits1_5 << 5));
-				status = max(tmp, status);
+			if (p_spare) {
+				for (i = 0; i < n_sec / 2; i++)
+					p_spare[i] = master.spare_buf[i];
+			}
+		} else {
+			for (i = 0; i < n_sec / 4 ; i++) {
+				bch_st_reg.d32 = nandc_readl(NANDC_BCHST(i));
+				if (bch_st_reg.V6.fail0 || bch_st_reg.V6.fail1) {
+					status = NAND_STS_ECC_ERR;
+				} else {
+					u32 tmp = 0;
+
+					tmp =
+					max(bch_st_reg.V6.err_bits0 |
+					    ((u32)bch_st_reg.V6.err_bits0_5 << 5),
+					    bch_st_reg.V6.err_bits1 |
+					    ((u32)bch_st_reg.V6.err_bits1_5 << 5));
+					status = max(tmp, status);
+				}
+			}
+			if (p_spare) {
+				u32 spare_sz = 64;
+				u32 temp_data;
+				u8 *p_spare_temp = (u8 *)p_spare;
+
+				for (i = 0; i < n_sec / 2; i++) {
+					temp_data = master.spare_buf[i * spare_sz / 4];
+					*p_spare_temp++ = (u8)temp_data;
+					*p_spare_temp++ = (u8)(temp_data >> 8);
+					*p_spare_temp++ = (u8)(temp_data >> 16);
+					*p_spare_temp++ = (u8)(temp_data >> 24);
+				}
 			}
+			nandc_writel(0, NANDC_MTRANS_CFG);
 		}
 	}
-	nandc_writel(0, NANDC_MTRANS_CFG);
 	return status;
 }
 
diff --git a/drivers/rkflash/nandc.h b/drivers/rkflash/nandc.h
index 07f04bc6f5c7..8031c79b679b 100644
--- a/drivers/rkflash/nandc.h
+++ b/drivers/rkflash/nandc.h
@@ -12,6 +12,7 @@
 
 #define NANDC_READ	0
 #define NANDC_WRITE	1
+#define RK3326_NANDC_VER	0x56393030
 
 /* INT ID */
 enum NANDC_IRQ_NUM_T {
@@ -22,6 +23,13 @@ enum NANDC_IRQ_NUM_T {
 	NC_IRQ_LLP
 };
 
+enum ENUM_NANDC_BCH_CFG {
+	NC_BCH_70 = 0,
+	NC_BCH_24,
+	NC_BCH_40,
+	NC_BCH_60,
+};
+
 union FM_CTL_T {
 	u32 d32;
 	struct {
@@ -40,6 +48,21 @@ union FM_CTL_T {
 		unsigned read_delay : 3;	/* bits[24:26] */
 		unsigned reserved27_31 : 5;	/* bits[27:31] */
 	} V6;
+	struct	{
+		unsigned cs : 8;
+		unsigned wp : 1;
+		unsigned frdy : 1;
+		unsigned fifo_empth_flash : 1;
+		unsigned reserved11_12 : 2;
+		unsigned tm : 1;
+		unsigned syn_clken : 1;
+		unsigned syn_mode : 1;
+		unsigned flash_abort_en : 1;
+		unsigned flash_abort_clear : 1;
+		unsigned sif_read_delay : 3;
+		unsigned io_mux : 3;
+		unsigned reserved24_31 : 8;
+	} V9;
 };
 
 union FM_WAIT_T {
@@ -54,6 +77,17 @@ union FM_WAIT_T {
 		unsigned fmw_dly_en : 1;
 		unsigned reserved31_31 : 1;
 	} V6;
+	struct {
+		unsigned rwcs : 5;
+		unsigned rwpw : 6;
+		unsigned hard_rdy : 1;
+		unsigned csrw : 6;
+		unsigned wait_frdy_dly : 5;
+		unsigned reserved23_23 : 1;
+		unsigned fmw_dly : 6;
+		unsigned fmw_dly_en : 1;
+		unsigned reserved31_31 : 1;
+	} V9;
 };
 
 union FL_CTL_T {
@@ -80,6 +114,29 @@ union FL_CTL_T {
 		unsigned async_tog_mix : 1;
 		unsigned reserved30_31 : 2;
 	} V6;
+	struct {
+		unsigned flash_rst : 1;
+		unsigned flash_rdn : 1;
+		unsigned flash_st : 1;
+		unsigned bypass : 1;
+		unsigned st_addr : 1;
+		unsigned tr_count : 2;
+		unsigned flash_st_mod : 1;
+		unsigned not_tran_data : 1;
+		unsigned tran_seed : 1;
+		unsigned cor_able : 1;
+		unsigned lba_en : 1;
+		unsigned lba_spare_sel : 1;
+		unsigned reserved13_18 : 6;
+		unsigned bchst_trans : 1;
+		unsigned tr_rdy : 1;
+		unsigned page_size : 1;
+		unsigned page_num : 6;
+		unsigned low_power : 1;
+		unsigned async_tog_mix : 1;
+		unsigned bypass_fifo_mode : 1;
+		unsigned reserved31_31 : 1;
+	} V9;
 };
 
 union BCH_CTL_T {
@@ -98,6 +155,17 @@ union BCH_CTL_T {
 		unsigned thres : 8;
 		unsigned reserved27_31 : 5;
 	} V6;
+	struct {
+		unsigned bchrst : 1;
+		unsigned wcnt_clear : 1;
+		unsigned reserved2 : 1;
+		unsigned bchepd : 1;
+		unsigned reserved4_15 : 12;
+		unsigned bchpage : 1;
+		unsigned bchthre : 8;
+		unsigned bchmode : 3;
+		unsigned reserved28_31 : 4;
+	} V9;
 };
 
 union BCH_ST_T {
@@ -121,6 +189,21 @@ union BCH_ST_T {
 		unsigned err_bits_low1_5 : 1;
 		unsigned reserved31_31 : 1;
 	} V6;
+	struct {
+		unsigned errf0 : 1;
+		unsigned done0 : 1;
+		unsigned fail0 : 1;
+		unsigned err_bits0 : 7;
+		unsigned all_f_flag0 : 1;
+		unsigned reserved11_15 : 5;
+		unsigned errf1 : 1;
+		unsigned done1 : 1;
+		unsigned fail1 : 1;
+		unsigned err_bits1 : 7;
+		unsigned all_f_flag1 : 1;
+		unsigned reserved27_30 : 4;
+		unsigned bch_ready_flag: 1;
+	} V9;
 };
 
 union MTRANS_CFG_T {
@@ -136,6 +219,18 @@ union MTRANS_CFG_T {
 		unsigned ahb_rst : 1;
 		unsigned reserved16_31 : 16;
 	} V6;
+	struct {
+		unsigned ahb_wr_st : 1;
+		unsigned ahb_wr : 1;
+		unsigned bus_mode : 1;
+		unsigned hsize : 3;
+		unsigned burst : 3;
+		unsigned incr_num : 5;
+		unsigned fl_pwd : 1;
+		unsigned ahb_rst : 1;
+		unsigned redundance_size : 11;
+		unsigned reserved27_31 : 5;
+	} V9;
 };
 
 union MTRANS_STAT_T {
@@ -145,6 +240,11 @@ union MTRANS_STAT_T {
 		unsigned mtrans_cnt : 5;
 		unsigned reserved21_31 : 11;
 	} V6;
+	struct {
+		unsigned bus_err : 16;
+		unsigned mtrans_cnt : 6;
+		unsigned reserved22_31 : 10;
+	} V9;
 };
 
 /* NANDC Registers */
@@ -180,6 +280,29 @@ union MTRANS_STAT_T {
 #define NANDC_CHIP_ADDR(id)	(0x800 + (id) * 0x100 + 0x4)
 #define NANDC_CHIP_CMD(id)	(0x800 + (id) * 0x100 + 0x8)
 
+#define NANDC_V9_FMCTL		0x0
+#define NANDC_V9_FMWAIT		0x4
+#define NANDC_V9_FLCTL		0x10
+#define NANDC_V9_BCHCTL		0x20
+#define NANDC_V9_MTRANS_CFG	0x30
+#define NANDC_V9_MTRANS_SADDR0	0x34
+#define NANDC_V9_MTRANS_SADDR1	0x38
+#define NANDC_V9_MTRANS_STAT	0x40
+#define NANDC_V9_MTRANS_STAT2	0x44
+#define NANDC_V9_NANDC_VER	0x80
+
+#define NANDC_V9_INTEN		0x120
+#define NANDC_V9_INTCLR		0x124
+#define NANDC_V9_INTST		0x128
+#define NANDC_V9_SPARE0		0x200
+#define NANDC_V9_SPARE1		0x204
+#define NANDC_V9_RANDMZ_CFG	0x208
+#define NANDC_V9_BCHST(i)	(0x150 + (i) * 4)
+
+#define NANDC_V9_CHIP_DATA(id)	(0x800 + (id) * 0x100)
+#define NANDC_V9_CHIP_ADDR(id)	(0x800 + (id) * 0x100 + 0x4)
+#define NANDC_V9_CHIP_CMD(id)	(0x800 + (id) * 0x100 + 0x8)
+
 struct MASTER_INFO_T {
 	u32  *page_buf;		/* [DATA_LEN]; */
 	u32  *spare_buf;	/* [DATA_LEN / (1024/128)]; */
diff --git a/drivers/rkflash/rk_sftl.h b/drivers/rkflash/rk_sftl.h
index a5d8f9661eba..f474236a7cfc 100644
--- a/drivers/rkflash/rk_sftl.h
+++ b/drivers/rkflash/rk_sftl.h
@@ -14,8 +14,17 @@ u32 sftl_get_density(void);
 s32 sftl_gc(void);
 int sftl_vendor_read(u32 index, u32 count, u8 *buf);
 int sftl_vendor_write(u32 index, u32 count, u8 *buf);
-int rk_sftl_vendor_read(u32 index, u32 count, u8 *buf);
-int rk_sftl_vendor_write(u32 index, u32 count, u8 *buf);
+
+/*
+ * rknand_proc_ftlread() Read FTL info which's about 2KB size
+ *
+ * @size: buf size(>= 2KB)
+ * @buf: buf for caching ftl info
+ * @return real size of caching ftl info
+ */
+int rknand_proc_ftlread(int size, char *buf);
+int rk_sftl_vendor_read(u32 id, u8 *buf, u32 size);
+int rk_sftl_vendor_write(u32 id, u8 *buf, u32 size);
 int rk_sftl_vendor_register(void);
 int rk_sftl_vendor_storage_init(void);
 int rk_sftl_vendor_dev_ops_register(int (*read)(u32 sec,
@@ -30,4 +39,9 @@ void *ftl_memset(void *s, int c, unsigned int n);
 void *ftl_memcpy(void *pv_to,
 		 const void *pv_from,
 		 unsigned int size);
+
+/*
+ * Function that needs to be defined
+ */
+void  __printf(1, 2)  sftl_printk(char *fmt, ...);
 #endif
diff --git a/drivers/rkflash/rk_sftl_arm_v7.S b/drivers/rkflash/rk_sftl_arm_v7.S
index 9332ff8827c2..bda328556148 100644
--- a/drivers/rkflash/rk_sftl_arm_v7.S
+++ b/drivers/rkflash/rk_sftl_arm_v7.S
@@ -2,7 +2,7 @@
 
 /*
  * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-07-19
+ * date: 2018-09-30
  */
 	.file	"rk_sftl.c"
 	.global	__udivsi3
@@ -318,6 +318,21 @@ IsBlkInVendorPart:
 	.word	.LANCHOR0
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
 	.align	2
+	.global	FtlCacheWriteBack
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	mov	r0, #0
+	ldmfd	sp, {fp, sp, pc}
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	2
 	.global	sftl_get_density
 	.syntax unified
 	.arm
@@ -329,12 +344,12 @@ sftl_get_density:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L36
+	ldr	r3, .L37
 	ldr	r0, [r3, #140]
 	ldmfd	sp, {fp, sp, pc}
-.L37:
+.L38:
 	.align	2
-.L36:
+.L37:
 	.word	.LANCHOR0
 	.size	sftl_get_density, .-sftl_get_density
 	.global	__umodsi3
@@ -352,7 +367,7 @@ FtlBbmMapBadBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	uxth	r5, r0
-	ldr	r4, .L39
+	ldr	r4, .L40
 	mov	r0, r5
 	ldrh	r7, [r4, #98]
 	mov	r1, r7
@@ -373,16 +388,16 @@ FtlBbmMapBadBlock:
 	mov	r2, r6
 	str	r1, [sp]
 	mov	r1, r5
-	ldr	r0, .L39+4
-	bl	printk
+	ldr	r0, .L40+4
+	bl	sftl_printk
 	ldrh	r3, [r4, #158]
 	mov	r0, #0
 	add	r3, r3, #1
 	strh	r3, [r4, #158]	@ movhi
 	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L40:
+.L41:
 	.align	2
-.L39:
+.L40:
 	.word	.LANCHOR0
 	.word	.LC0
 	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
@@ -398,7 +413,7 @@ FtlBbmIsBadBlock:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L42
+	ldr	r5, .L43
 	uxth	r6, r0
 	ldrh	r7, [r5, #98]
 	mov	r0, r6
@@ -417,9 +432,9 @@ FtlBbmIsBadBlock:
 	lsr	r0, r0, r4
 	and	r0, r0, #1
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L43:
+.L44:
 	.align	2
-.L42:
+.L43:
 	.word	.LANCHOR0
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
 	.align	2
@@ -448,7 +463,7 @@ FtlBbtMemInit:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r0, .L46
+	ldr	r0, .L47
 	mvn	r3, #0
 	mov	r2, #16
 	mov	r1, #255
@@ -458,9 +473,9 @@ FtlBbtMemInit:
 	add	r0, r0, #164
 	bl	memset
 	ldmfd	sp, {fp, sp, pc}
-.L47:
+.L48:
 	.align	2
-.L46:
+.L47:
 	.word	.LANCHOR0
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
 	.align	2
@@ -475,28 +490,28 @@ FtlBbtCalcTotleCnt:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L55
+	ldr	r3, .L56
 	mov	r5, #0
 	mov	r4, r5
 	ldrh	r2, [r3, #98]
 	ldrh	r6, [r3, #54]
 	mul	r6, r6, r2
-.L49:
+.L50:
 	uxth	r0, r5
 	cmp	r0, r6
-	blt	.L51
+	blt	.L52
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L51:
+.L52:
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	add	r5, r5, #1
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	b	.L49
-.L56:
+	b	.L50
+.L57:
 	.align	2
-.L55:
+.L56:
 	.word	.LANCHOR0
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
 	.align	2
@@ -511,7 +526,7 @@ V2P_block:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L58
+	ldr	r4, .L59
 	uxth	r7, r0
 	uxth	r5, r1
 	ldrh	r6, [r4, #56]
@@ -528,9 +543,9 @@ V2P_block:
 	add	r0, r4, r0
 	uxth	r0, r0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L59:
+.L60:
 	.align	2
-.L58:
+.L59:
 	.word	.LANCHOR0
 	.size	V2P_block, .-V2P_block
 	.align	2
@@ -545,7 +560,7 @@ P2V_plane:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L61
+	ldr	r3, .L62
 	uxth	r5, r0
 	ldrh	r6, [r3, #56]
 	mov	r0, r5
@@ -558,9 +573,9 @@ P2V_plane:
 	add	r0, r4, r0
 	uxth	r0, r0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L62:
+.L63:
 	.align	2
-.L61:
+.L62:
 	.word	.LANCHOR0
 	.size	P2V_plane, .-P2V_plane
 	.align	2
@@ -575,7 +590,7 @@ P2V_block_in_plane:
 	mov	ip, sp
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L64
+	ldr	r4, .L65
 	uxth	r0, r0
 	ldrh	r1, [r4, #98]
 	bl	__umodsi3
@@ -584,9 +599,9 @@ P2V_block_in_plane:
 	bl	__udivsi3
 	uxth	r0, r0
 	ldmfd	sp, {r4, fp, sp, pc}
-.L65:
+.L66:
 	.align	2
-.L64:
+.L65:
 	.word	.LANCHOR0
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
 	.align	2
@@ -602,13 +617,13 @@ ftl_cmp_data_ver:
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
 	cmp	r0, r1
-	bls	.L67
+	bls	.L68
 	sub	r0, r0, r1
 	cmp	r0, #-2147483648
 	movhi	r0, #0
 	movls	r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L67:
+.L68:
 	sub	r0, r1, r0
 	cmp	r0, #-2147483648
 	movls	r0, #0
@@ -627,7 +642,7 @@ FtlFreeSysBlkQueueInit:
 	mov	ip, sp
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L70
+	ldr	r3, .L71
 	mov	r4, #0
 	mov	r1, #2048
 	strh	r0, [r3, #212]	@ movhi
@@ -638,9 +653,9 @@ FtlFreeSysBlkQueueInit:
 	bl	__memzero
 	mov	r0, r4
 	ldmfd	sp, {r4, fp, sp, pc}
-.L71:
+.L72:
 	.align	2
-.L70:
+.L71:
 	.word	.LANCHOR0
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
 	.align	2
@@ -655,14 +670,14 @@ FtlFreeSysBlkQueueEmpty:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L73
+	ldr	r3, .L74
 	ldrh	r0, [r3, #218]
 	clz	r0, r0
 	lsr	r0, r0, #5
 	ldmfd	sp, {fp, sp, pc}
-.L74:
+.L75:
 	.align	2
-.L73:
+.L74:
 	.word	.LANCHOR0
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
 	.align	2
@@ -677,15 +692,15 @@ FtlFreeSysBlkQueueFull:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L76
+	ldr	r3, .L77
 	ldrh	r0, [r3, #218]
 	sub	r0, r0, #1024
 	clz	r0, r0
 	lsr	r0, r0, #5
 	ldmfd	sp, {fp, sp, pc}
-.L77:
+.L78:
 	.align	2
-.L76:
+.L77:
 	.word	.LANCHOR0
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
 	.align	2
@@ -700,27 +715,27 @@ FtlFreeSysBLkSort:
 	mov	ip, sp
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L87
+	ldr	r3, .L88
 	ldrh	r2, [r3, #218]
 	cmp	r2, #0
 	ldmfdeq	sp, {r4, fp, sp, pc}
-	ldr	r2, .L87+4
+	ldr	r2, .L88+4
 	mov	r4, #0
 	ldrh	r1, [r3, #214]
 	mov	lr, r4
 	ldrh	ip, [r2, #28]
 	ldrh	r2, [r3, #216]
 	and	ip, ip, #31
-.L80:
+.L81:
 	uxth	r0, r4
 	add	r4, r4, #1
 	cmp	ip, r0
-	bgt	.L81
+	bgt	.L82
 	cmp	lr, #0
 	strhne	r1, [r3, #214]	@ movhi
 	strhne	r2, [r3, #216]	@ movhi
 	ldmfd	sp, {r4, fp, sp, pc}
-.L81:
+.L82:
 	add	r0, r3, r1, lsl #1
 	add	r1, r1, #1
 	ubfx	r1, r1, #0, #10
@@ -730,10 +745,10 @@ FtlFreeSysBLkSort:
 	mov	lr, #1
 	add	r2, r2, lr
 	ubfx	r2, r2, #0, #10
-	b	.L80
-.L88:
+	b	.L81
+.L89:
 	.align	2
-.L87:
+.L88:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2268
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
@@ -749,34 +764,34 @@ IsInFreeQueue:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L95
+	ldr	r3, .L96
 	uxth	r0, r0
 	ldrh	ip, [r3, #218]
 	cmp	ip, #1024
 	ldrhne	lr, [r3, #214]
 	movne	r1, #0
-	bne	.L91
-.L93:
+	bne	.L92
+.L94:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L92:
+.L93:
 	add	r2, r1, lr
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
 	ldrh	r2, [r2, #220]
 	cmp	r2, r0
-	beq	.L94
+	beq	.L95
 	add	r1, r1, #1
-.L91:
+.L92:
 	cmp	r1, ip
-	bcc	.L92
-	b	.L93
-.L94:
+	bcc	.L93
+	b	.L94
+.L95:
 	mov	r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L96:
+.L97:
 	.align	2
-.L95:
+.L96:
 	.word	.LANCHOR0
 	.size	IsInFreeQueue, .-IsInFreeQueue
 	.align	2
@@ -793,11 +808,11 @@ insert_data_list:
 	sub	fp, ip, #4
 	sub	sp, sp, #12
 	uxth	r0, r0
-	ldr	r1, .L113
+	ldr	r1, .L114
 	ldrh	r3, [r1, #40]
 	mov	lr, r1
 	cmp	r3, r0
-	bls	.L99
+	bls	.L100
 	ldr	r6, [r1, #2316]
 	lsl	r5, r0, #3
 	mvn	ip, #0
@@ -806,11 +821,11 @@ insert_data_list:
 	strh	ip, [r6, r5]	@ movhi
 	ldr	r3, [r1, #2320]
 	cmp	r3, #0
-	bne	.L100
-.L112:
+	bne	.L101
+.L113:
 	str	r2, [r1, #2320]
-	b	.L99
-.L100:
+	b	.L100
+.L101:
 	ldr	r7, [r1, #2324]
 	lsl	r4, r0, #1
 	ldrh	r1, [r2, #4]
@@ -828,7 +843,7 @@ insert_data_list:
 	add	lr, r8, r4
 	str	lr, [fp, #-52]
 	mov	lr, #0
-.L108:
+.L109:
 	ldr	r4, [fp, #-48]
 	add	lr, lr, #1
 	uxth	lr, lr
@@ -838,7 +853,7 @@ insert_data_list:
 	cmp	r0, r1
 	orreq	r4, r4, #1
 	cmp	r4, #0
-	bne	.L99
+	bne	.L100
 	lsl	r9, r1, #1
 	ldrh	r4, [r7, r9]
 	mov	ip, r4
@@ -848,51 +863,51 @@ insert_data_list:
 	ldr	ip, [fp, #-44]
 	mvneq	r4, #0
 	cmp	ip, r4
-	bne	.L104
+	bne	.L105
 	ldr	ip, [fp, #-52]
 	ldrh	r9, [r8, r9]
 	ldrh	r4, [ip]
 	cmp	r9, r4
-	bcc	.L106
-.L105:
+	bcc	.L107
+.L106:
 	strh	r1, [r6, r5]	@ movhi
 	ldrh	r1, [r3, #2]
 	strh	r1, [r2, #2]	@ movhi
-	ldr	r1, .L113
+	ldr	r1, .L114
 	ldr	ip, [r1, #2320]
 	cmp	r3, ip
-	bne	.L109
+	bne	.L110
 	strh	r0, [r3, #2]	@ movhi
-	b	.L112
-.L104:
-	bcc	.L105
-.L106:
+	b	.L113
+.L105:
+	bcc	.L106
+.L107:
 	ldrh	r4, [r3]
 	movw	ip, #65535
 	cmp	r4, ip
-	bne	.L107
+	bne	.L108
 	strh	r1, [r2, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	ldr	r3, .L113
+	ldr	r3, .L114
 	str	r2, [r3, #2332]
-.L99:
+.L100:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L107:
+.L108:
 	add	r3, r10, r4, lsl #3
 	mov	r1, r4
-	b	.L108
-.L109:
+	b	.L109
+.L110:
 	ldrh	r2, [r3, #2]
 	ldr	r1, [r1, #2316]
 	lsl	r2, r2, #3
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-	b	.L99
-.L114:
+	b	.L100
+.L115:
 	.align	2
-.L113:
+.L114:
 	.word	.LANCHOR0
 	.size	insert_data_list, .-insert_data_list
 	.align	2
@@ -909,7 +924,7 @@ INSERT_DATA_LIST:
 	sub	fp, ip, #4
 	uxth	r0, r0
 	bl	insert_data_list
-	ldr	r2, .L117
+	ldr	r2, .L118
 	add	r1, r2, #2336
 	ldrh	r2, [r2, #40]
 	ldrh	r3, [r1]
@@ -918,14 +933,14 @@ INSERT_DATA_LIST:
 	cmp	r2, r3
 	strh	r3, [r1]	@ movhi
 	ldmfdcs	sp, {fp, sp, pc}
-	mov	r2, #221
-	ldr	r1, .L117+4
-	ldr	r0, .L117+8
-	bl	printk
+	mov	r2, #214
+	ldr	r1, .L118+4
+	ldr	r0, .L118+8
+	bl	sftl_printk
 	ldmfd	sp, {fp, sp, pc}
-.L118:
+.L119:
 	.align	2
-.L117:
+.L118:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC1
@@ -945,8 +960,8 @@ insert_free_list:
 	uxth	r0, r0
 	movw	lr, #65535
 	cmp	r0, lr
-	beq	.L120
-	ldr	r2, .L126
+	beq	.L121
+	ldr	r2, .L127
 	lsl	r5, r0, #3
 	mvn	r3, #0
 	ldr	r6, [r2, #2316]
@@ -957,7 +972,7 @@ insert_free_list:
 	ldr	r3, [r2, #2340]
 	cmp	r3, #0
 	streq	ip, [r2, #2340]
-	beq	.L120
+	beq	.L121
 	ldr	r8, [r2, #2328]
 	lsl	r2, r0, #1
 	ldr	r7, [r1, #2316]
@@ -965,24 +980,24 @@ insert_free_list:
 	ldrh	r9, [r8, r2]
 	sub	r2, r3, r7
 	ubfx	r2, r2, #3, #16
-.L124:
+.L125:
 	lsl	lr, r2, #1
 	ldrh	lr, [r8, lr]
 	cmp	lr, r9
-	bcs	.L122
+	bcs	.L123
 	ldrh	lr, [r3]
 	cmp	lr, r4
-	bne	.L123
+	bne	.L124
 	strh	r2, [ip, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-.L120:
+.L121:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L123:
+.L124:
 	add	r3, r7, lr, lsl #3
 	mov	r2, lr
-	b	.L124
-.L122:
+	b	.L125
+.L123:
 	ldrh	lr, [r3, #2]
 	strh	lr, [ip, #2]	@ movhi
 	strh	r2, [r6, r5]	@ movhi
@@ -995,10 +1010,10 @@ insert_free_list:
 	lslne	r2, r2, #3
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L120
-.L127:
+	b	.L121
+.L128:
 	.align	2
-.L126:
+.L127:
 	.word	.LANCHOR0
 	.size	insert_free_list, .-insert_free_list
 	.align	2
@@ -1015,7 +1030,7 @@ INSERT_FREE_LIST:
 	sub	fp, ip, #4
 	uxth	r0, r0
 	bl	insert_free_list
-	ldr	r2, .L130
+	ldr	r2, .L131
 	movw	r1, #2344
 	ldrh	r3, [r2, r1]
 	add	r3, r3, #1
@@ -1024,14 +1039,14 @@ INSERT_FREE_LIST:
 	ldrh	r2, [r2, #40]
 	cmp	r2, r3
 	ldmfdcs	sp, {fp, sp, pc}
-	mov	r2, #214
-	ldr	r1, .L130+4
-	ldr	r0, .L130+8
-	bl	printk
+	mov	r2, #207
+	ldr	r1, .L131+4
+	ldr	r0, .L131+8
+	bl	sftl_printk
 	ldmfd	sp, {fp, sp, pc}
-.L131:
+.L132:
 	.align	2
-.L130:
+.L131:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+17
 	.word	.LC1
@@ -1048,7 +1063,7 @@ List_remove_node:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L139
+	ldr	r4, .L140
 	uxth	r1, r1
 	movw	r3, #65535
 	mov	r8, r0
@@ -1057,20 +1072,20 @@ List_remove_node:
 	add	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	bne	.L133
+	bne	.L134
 	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L133
-	movw	r2, #379
-	ldr	r1, .L139+4
-	ldr	r0, .L139+8
-	bl	printk
-.L133:
+	beq	.L134
+	mov	r2, #372
+	ldr	r1, .L140+4
+	ldr	r0, .L140+8
+	bl	sftl_printk
+.L134:
 	ldr	r3, [r8]
 	ldrh	r2, [r7, r6]
 	cmp	r5, r3
 	movw	r3, #65535
-	bne	.L134
+	bne	.L135
 	cmp	r2, r3
 	ldrne	r3, [r4, #2316]
 	moveq	r3, #0
@@ -1079,25 +1094,25 @@ List_remove_node:
 	mvnne	r3, #0
 	strne	r2, [r8]
 	strhne	r3, [r2, #2]	@ movhi
-.L136:
+.L137:
 	mvn	r3, #0
 	mov	r0, #0
 	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L134:
+.L135:
 	cmp	r2, r3
 	ldrh	r3, [r5, #2]
-	bne	.L137
+	bne	.L138
 	cmp	r3, r2
 	ldrne	r2, [r4, #2316]
 	lslne	r3, r3, #3
 	mvnne	r1, #0
-	beq	.L136
-.L138:
+	beq	.L137
+.L139:
 	strh	r1, [r2, r3]	@ movhi
-	b	.L136
-.L137:
+	b	.L137
+.L138:
 	ldr	r1, [r4, #2316]
 	add	r2, r1, r2, lsl #3
 	strh	r3, [r2, #2]	@ movhi
@@ -1105,10 +1120,10 @@ List_remove_node:
 	ldrh	r1, [r7, r6]
 	ldr	r2, [r4, #2316]
 	lsl	r3, r3, #3
-	b	.L138
-.L140:
+	b	.L139
+.L141:
 	.align	2
-.L139:
+.L140:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+34
 	.word	.LC1
@@ -1129,32 +1144,32 @@ List_pop_index_node:
 	uxth	r1, r1
 	cmp	r3, #0
 	movweq	r4, #65535
-	beq	.L141
-	ldr	r2, .L148
+	beq	.L142
+	ldr	r2, .L149
 	movw	ip, #65535
 	ldr	r4, [r2, #2316]
-.L143:
+.L144:
 	cmp	r1, #0
-	bne	.L144
-.L146:
+	bne	.L145
+.L147:
 	sub	r3, r3, r4
 	ubfx	r4, r3, #3, #16
 	mov	r1, r4
 	bl	List_remove_node
-.L141:
+.L142:
 	mov	r0, r4
 	ldmfd	sp, {r4, fp, sp, pc}
-.L144:
+.L145:
 	ldrh	r2, [r3]
 	cmp	r2, ip
-	beq	.L146
+	beq	.L147
 	sub	r1, r1, #1
 	add	r3, r4, r2, lsl #3
 	uxth	r1, r1
-	b	.L143
-.L149:
+	b	.L144
+.L150:
 	.align	2
-.L148:
+.L149:
 	.word	.LANCHOR0
 	.size	List_pop_index_node, .-List_pop_index_node
 	.align	2
@@ -1185,33 +1200,33 @@ List_get_gc_head_node:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r1, .L157
+	ldr	r1, .L158
 	uxth	r2, r0
 	ldr	r3, [r1, #2320]
 	cmp	r3, #0
 	ldrne	r1, [r1, #2316]
 	movwne	r0, #65535
-	bne	.L153
+	bne	.L154
 	movw	r0, #65535
 	ldmfd	sp, {fp, sp, pc}
-.L155:
+.L156:
 	sub	r2, r2, #1
 	add	r3, r1, r3, lsl #3
 	uxth	r2, r2
-.L153:
+.L154:
 	cmp	r2, #0
-	beq	.L154
+	beq	.L155
 	ldrh	r3, [r3]
 	cmp	r3, r0
-	bne	.L155
+	bne	.L156
 	ldmfd	sp, {fp, sp, pc}
-.L154:
+.L155:
 	sub	r3, r3, r1
 	ubfx	r0, r3, #3, #16
 	ldmfd	sp, {fp, sp, pc}
-.L158:
+.L159:
 	.align	2
-.L157:
+.L158:
 	.word	.LANCHOR0
 	.size	List_get_gc_head_node, .-List_get_gc_head_node
 	.align	2
@@ -1226,25 +1241,25 @@ List_update_data_list:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L172
+	ldr	r4, .L173
 	movw	r3, #2348
 	uxth	r5, r0
 	ldrh	r3, [r4, r3]
 	cmp	r3, r5
-	beq	.L161
+	beq	.L162
 	movw	r3, #2396
 	ldrh	r3, [r4, r3]
 	cmp	r3, r5
-	beq	.L161
+	beq	.L162
 	movw	r3, #2444
 	ldrh	r3, [r4, r3]
 	cmp	r3, r5
-	beq	.L161
+	beq	.L162
 	ldr	r8, [r4, #2316]
 	ldr	r3, [r4, #2320]
 	add	r7, r8, r5, lsl #3
 	cmp	r7, r3
-	beq	.L161
+	beq	.L162
 	ldr	r2, [r4, #2324]
 	lsl	r3, r5, #1
 	ldrh	r6, [r7, #4]
@@ -1254,15 +1269,15 @@ List_update_data_list:
 	mulne	r6, r6, r3
 	ldr	r3, [r8, r5, lsl #3]
 	cmn	r3, #1
-	bne	.L164
-	movw	r2, #470
-	ldr	r1, .L172+4
-	ldr	r0, .L172+8
-	bl	printk
-.L164:
+	bne	.L165
+	movw	r2, #463
+	ldr	r1, .L173+4
+	ldr	r0, .L173+8
+	bl	sftl_printk
+.L165:
 	ldr	r3, [r8, r5, lsl #3]
 	cmn	r3, #1
-	beq	.L161
+	beq	.L162
 	ldrh	r2, [r7, #2]
 	ldr	r1, [r4, #2324]
 	lsl	r2, r2, #3
@@ -1275,30 +1290,30 @@ List_update_data_list:
 	mulne	r3, r3, r0
 	mvneq	r3, #0
 	cmp	r6, r3
-	bcs	.L161
-	ldr	r4, .L172+12
+	bcs	.L162
+	ldr	r4, .L173+12
 	mov	r1, r5
-	ldr	r0, .L172+16
+	ldr	r0, .L173+16
 	bl	List_remove_node
 	ldrh	r3, [r4]
 	cmp	r3, #0
-	bne	.L166
-	movw	r2, #481
-	ldr	r1, .L172+4
-	ldr	r0, .L172+8
-	bl	printk
-.L166:
+	bne	.L167
+	movw	r2, #474
+	ldr	r1, .L173+4
+	ldr	r0, .L173+8
+	bl	sftl_printk
+.L167:
 	ldrh	r3, [r4]
 	mov	r0, r5
 	sub	r3, r3, #1
 	strh	r3, [r4]	@ movhi
 	bl	INSERT_DATA_LIST
-.L161:
+.L162:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L173:
+.L174:
 	.align	2
-.L172:
+.L173:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+51
 	.word	.LC1
@@ -1317,52 +1332,52 @@ select_l2p_ram_region:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L184
+	ldr	r3, .L185
 	mov	r1, #0
 	mov	r0, #12
 	movw	ip, #65535
 	ldrh	r2, [r3, #138]
 	ldr	r3, [r3, #2492]
-.L175:
+.L176:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcc	.L177
+	bcc	.L178
 	mov	r4, r2
 	mov	r1, #0
 	mov	r0, #-2147483648
 	mov	r5, #12
-.L178:
+.L179:
 	uxth	lr, r1
 	cmp	lr, r2
-	bcc	.L180
+	bcc	.L181
 	cmp	r4, r2
-	bcc	.L176
-	ldr	r1, .L184+4
+	bcc	.L177
+	ldr	r1, .L185+4
 	mov	r4, r2
 	mvn	r0, #0
 	ldrh	r5, [r1]
 	mov	r1, #0
-.L181:
+.L182:
 	uxth	ip, r1
 	cmp	ip, r2
-	bcc	.L183
+	bcc	.L184
 	cmp	r4, r2
-	bcc	.L176
-	mov	r2, #784
-	ldr	r1, .L184+8
-	ldr	r0, .L184+12
-	bl	printk
-	b	.L176
-.L177:
+	bcc	.L177
+	movw	r2, #787
+	ldr	r1, .L185+8
+	ldr	r0, .L185+12
+	bl	sftl_printk
+	b	.L177
+.L178:
 	add	r1, r1, #1
 	mla	lr, r0, r1, r3
 	ldrh	lr, [lr, #-12]
 	cmp	lr, ip
-	bne	.L175
-.L176:
+	bne	.L176
+.L177:
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L180:
+.L181:
 	mla	ip, r5, r1, r3
 	add	r1, r1, #1
 	ldr	ip, [ip, #4]
@@ -1374,22 +1389,22 @@ select_l2p_ram_region:
 	cmp	r6, #0
 	movne	r0, ip
 	movne	r4, lr
-	b	.L178
-.L183:
+	b	.L179
+.L184:
 	ldr	lr, [r3, #4]
 	cmp	r0, lr
-	bls	.L182
+	bls	.L183
 	ldrh	r6, [r3]
 	cmp	r6, r5
 	movne	r0, lr
 	movne	r4, ip
-.L182:
+.L183:
 	add	r1, r1, #1
 	add	r3, r3, #12
-	b	.L181
-.L185:
+	b	.L182
+.L186:
 	.align	2
-.L184:
+.L185:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2496
 	.word	.LANCHOR1+73
@@ -1407,17 +1422,17 @@ FtlUpdateVaildLpn:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	ip, .L192
+	ldr	ip, .L193
 	movw	r1, #2498
 	ldrh	r2, [ip, r1]
 	mov	r3, ip
 	cmp	r2, #4
 	cmpls	r0, #0
-	bne	.L187
+	bne	.L188
 	add	r2, r2, #1
 	strh	r2, [ip, r1]	@ movhi
 	ldmfd	sp, {fp, sp, pc}
-.L187:
+.L188:
 	mov	r2, #0
 	movw	lr, #65535
 	strh	r2, [ip, r1]	@ movhi
@@ -1425,20 +1440,20 @@ FtlUpdateVaildLpn:
 	ldrh	r1, [ip, #40]
 	ldr	r2, [ip, #2324]
 	add	r1, r2, r1, lsl #1
-.L188:
+.L189:
 	cmp	r2, r1
-	bne	.L190
+	bne	.L191
 	ldmfd	sp, {fp, sp, pc}
-.L190:
+.L191:
 	ldrh	ip, [r2], #2
 	cmp	ip, lr
 	ldrne	r0, [r3, #2500]
 	addne	r0, r0, ip
 	strne	r0, [r3, #2500]
-	b	.L188
-.L193:
+	b	.L189
+.L194:
 	.align	2
-.L192:
+.L193:
 	.word	.LANCHOR0
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
@@ -1455,11 +1470,11 @@ ftl_set_blk_mode:
 	sub	fp, ip, #4
 	cmp	r1, #0
 	uxth	r0, r0
-	beq	.L195
+	beq	.L196
 	bl	ftl_set_blk_mode.part.6
 	ldmfd	sp, {fp, sp, pc}
-.L195:
-	ldr	r3, .L197
+.L196:
+	ldr	r3, .L198
 	lsr	r1, r0, #5
 	mov	ip, #1
 	and	r0, r0, #31
@@ -1468,9 +1483,9 @@ ftl_set_blk_mode:
 	bic	r0, r3, ip, lsl r0
 	str	r0, [r2, r1, lsl #2]
 	ldmfd	sp, {fp, sp, pc}
-.L198:
+.L199:
 	.align	2
-.L197:
+.L198:
 	.word	.LANCHOR0
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
 	.align	2
@@ -1485,7 +1500,7 @@ ftl_get_blk_mode:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L200
+	ldr	r3, .L201
 	uxth	r0, r0
 	ldr	r3, [r3, #24]
 	lsr	r2, r0, #5
@@ -1494,9 +1509,9 @@ ftl_get_blk_mode:
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L201:
+.L202:
 	.align	2
-.L200:
+.L201:
 	.word	.LANCHOR0
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
 	.align	2
@@ -1515,14 +1530,14 @@ ftl_sb_update_avl_pages:
 	uxth	r2, r2
 	uxth	r5, r1
 	strh	r3, [r0, #4]	@ movhi
-	ldr	r3, .L209
+	ldr	r3, .L210
 	add	ip, r0, r2, lsl #1
 	movw	r1, #65535
 	add	ip, ip, #14
 	ldrh	lr, [r3, #32]
-.L203:
+.L204:
 	cmp	r2, lr
-	bcc	.L205
+	bcc	.L206
 	ldrh	r1, [r3, #102]
 	add	ip, r0, #16
 	mov	r3, #0
@@ -1530,12 +1545,12 @@ ftl_sb_update_avl_pages:
 	sub	r1, r1, #1
 	sub	r1, r1, r5
 	uxth	r1, r1
-.L206:
+.L207:
 	uxth	r2, r3
 	cmp	lr, r2
-	bhi	.L208
+	bhi	.L209
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L205:
+.L206:
 	ldrh	r4, [ip, #2]!
 	add	r2, r2, #1
 	uxth	r2, r2
@@ -1543,18 +1558,18 @@ ftl_sb_update_avl_pages:
 	ldrhne	r4, [r0, #4]
 	addne	r4, r4, #1
 	strhne	r4, [r0, #4]	@ movhi
-	b	.L203
-.L208:
+	b	.L204
+.L209:
 	ldrh	r2, [ip], #2
 	add	r3, r3, #1
 	cmp	r2, r4
 	ldrhne	r2, [r0, #4]
 	addne	r2, r1, r2
 	strhne	r2, [r0, #4]	@ movhi
-	b	.L206
-.L210:
+	b	.L207
+.L211:
 	.align	2
-.L209:
+.L210:
 	.word	.LANCHOR0
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
@@ -1580,14 +1595,14 @@ FtlSlcSuperblockCheck:
 	mov	lr, #0
 	add	r2, r0, r2, lsl #1
 	ldrh	r1, [r2, #16]
-	ldr	r2, .L217
+	ldr	r2, .L218
 	ldrh	ip, [r2, #32]
 	mov	r2, r3
-.L214:
+.L215:
 	cmp	r1, r2
-	beq	.L216
+	beq	.L217
 	ldmfd	sp, {fp, sp, pc}
-.L216:
+.L217:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -1600,10 +1615,10 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	add	r3, r0, r3, lsl #1
 	ldrh	r1, [r3, #16]
-	b	.L214
-.L218:
+	b	.L215
+.L219:
 	.align	2
-.L217:
+.L218:
 	.word	.LANCHOR0
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
@@ -1620,36 +1635,35 @@ make_superblock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r4, r0
-	ldr	r6, .L224
+	ldr	r6, .L225
 	ldrh	r2, [r0]
 	ldrh	r3, [r6, #40]
 	cmp	r2, r3
-	bcc	.L220
-	movw	r2, #2097
-	ldr	r1, .L224+4
-	ldr	r0, .L224+8
-	bl	printk
-.L220:
+	bcc	.L221
+	movw	r2, #2110
+	ldr	r1, .L225+4
+	ldr	r0, .L225+8
+	bl	sftl_printk
+.L221:
 	ldrh	r9, [r6, #32]
 	add	r7, r4, #16
-	ldr	r10, .L224+12
+	ldr	r10, .L225+12
 	mvn	r8, #0
 	mov	r5, #0
 	strh	r5, [r4, #4]	@ movhi
 	strb	r5, [r4, #7]
-.L221:
+.L222:
 	uxth	r3, r5
 	cmp	r9, r3
-	bhi	.L223
+	bhi	.L224
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	mov	r0, #0
 	ldrh	r2, [r6, #102]
+	strb	r0, [r4, #9]
 	smulbb	r3, r3, r2
 	strh	r3, [r4, #4]	@ movhi
-	mov	r3, #1
-	strb	r3, [r4, #9]
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L223:
+.L224:
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	add	r7, r7, #2
 	ldrh	r1, [r4]
@@ -1664,10 +1678,10 @@ make_superblock:
 	ldrbeq	r3, [r4, #7]	@ zero_extendqisi2
 	addeq	r3, r3, #1
 	strbeq	r3, [r4, #7]
-	b	.L221
-.L225:
+	b	.L222
+.L226:
 	.align	2
-.L224:
+.L225:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+95
 	.word	.LC1
@@ -1685,7 +1699,7 @@ update_multiplier_value:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L232
+	ldr	r3, .L233
 	mov	r5, #0
 	uxth	r6, r0
 	mov	r4, r5
@@ -1693,23 +1707,23 @@ update_multiplier_value:
 	mov	r7, r3
 	ldrh	r9, [r3, #102]
 	add	r10, r3, #60
-.L227:
+.L228:
 	uxth	r3, r5
 	cmp	r8, r3
-	bhi	.L229
+	bhi	.L230
 	cmp	r4, #0
 	moveq	r0, r4
-	beq	.L230
+	beq	.L231
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__divsi3
-.L230:
+.L231:
 	ldr	r1, [r7, #2316]
 	add	r1, r1, r6, lsl #3
 	strh	r0, [r1, #4]	@ movhi
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L229:
+.L230:
 	mov	r1, r6
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -1718,10 +1732,10 @@ update_multiplier_value:
 	add	r5, r5, #1
 	addeq	r4, r4, r9
 	uxtheq	r4, r4
-	b	.L227
-.L233:
+	b	.L228
+.L234:
 	.align	2
-.L232:
+.L233:
 	.word	.LANCHOR0
 	.size	update_multiplier_value, .-update_multiplier_value
 	.align	2
@@ -1736,7 +1750,7 @@ GetFreeBlockMinEraseCount:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L237
+	ldr	r3, .L238
 	ldr	r0, [r3, #2340]
 	cmp	r0, #0
 	ldrne	r2, [r3, #2316]
@@ -1746,9 +1760,9 @@ GetFreeBlockMinEraseCount:
 	lslne	r0, r0, #1
 	ldrhne	r0, [r3, r0]
 	ldmfd	sp, {fp, sp, pc}
-.L238:
+.L239:
 	.align	2
-.L237:
+.L238:
 	.word	.LANCHOR0
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
 	.align	2
@@ -1763,7 +1777,7 @@ GetFreeBlockMaxEraseCount:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L247
+	ldr	r2, .L248
 	uxth	r4, r0
 	ldr	r0, [r2, #2340]
 	cmp	r0, #0
@@ -1779,26 +1793,26 @@ GetFreeBlockMaxEraseCount:
 	uxthgt	r4, r3
 	sub	r3, r0, ip
 	ubfx	r3, r3, #3, #16
-.L242:
+.L243:
 	uxth	r0, r1
 	cmp	r4, r0
-	bls	.L244
+	bls	.L245
 	lsl	r0, r3, #3
 	add	r1, r1, #1
 	ldrh	lr, [ip, r0]
 	cmp	lr, r5
-	bne	.L246
-.L244:
+	bne	.L247
+.L245:
 	ldr	r2, [r2, #2328]
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L246:
+.L247:
 	mov	r3, lr
-	b	.L242
-.L248:
+	b	.L243
+.L249:
 	.align	2
-.L247:
+.L248:
 	.word	.LANCHOR0
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
 	.align	2
@@ -1813,459 +1827,526 @@ FtlPrintInfo2buf:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #12
-	mov	r7, r0
-	ldr	r6, .L261
-	add	r5, r7, #12
-	ldr	r1, .L261+4
-	movw	r9, #2344
+	sub	sp, sp, #16
+	mov	r6, r0
+	ldr	r5, .L262
+	add	r4, r6, #12
+	ldr	r1, .L262+4
+	movw	r8, #2344
 	bl	strcpy
-	ldr	r2, [r6, #116]
-	mov	r0, r5
-	ldr	r1, .L261+8
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r1, .L261+12
-	mov	r0, r5
-	add	r5, r5, #10
+	ldr	r3, [r5, #116]
+	mov	r1, #64
+	ldr	r2, .L262+8
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r1, .L262+12
+	mov	r0, r4
+	add	r4, r4, #10
 	bl	strcpy
-	ldr	r2, [r6, #2504]
-	mov	r0, r5
-	ldr	r1, .L261+16
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2500]
-	ldr	r1, .L261+20
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2508]
-	ldr	r1, .L261+24
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2512]
-	ldr	r1, .L261+28
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2516]
-	ldr	r1, .L261+32
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2520]
-	ldr	r1, .L261+36
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2524]
-	ldr	r1, .L261+40
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2528]
-	ldr	r1, .L261+44
-	mov	r0, r5
-	bl	sprintf
-	ldr	r2, [r6, #2532]
-	add	r5, r5, r0
-	ldr	r1, .L261+48
-	mov	r0, r5
-	ldr	r4, .L261+52
-	ldr	r8, .L261+56
-	lsr	r2, r2, #11
-	bl	sprintf
-	ldr	r2, [r6, #2536]
-	add	r5, r5, r0
-	ldr	r1, .L261+60
-	mov	r0, r5
-	lsr	r2, r2, #11
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2540]
-	ldr	r1, .L261+64
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2544]
-	ldr	r1, .L261+68
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #158]
-	ldr	r1, .L261+72
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, r9]
-	ldr	r1, .L261+76
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2548]
-	ldr	r1, .L261+80
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2552]
-	ldr	r1, .L261+84
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2556]
-	ldr	r1, .L261+88
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2560]
-	ldr	r1, .L261+92
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2564]
-	ldr	r1, .L261+96
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2568]
-	ldr	r1, .L261+100
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r4, #30]
-	ldr	r1, .L261+104
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r4, #28]
-	ldr	r1, .L261+108
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #140]
-	ldr	r1, .L261+112
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #132]
-	ldr	r1, .L261+116
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #28]
-	ldr	r1, .L261+120
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #218]
-	ldr	r1, .L261+124
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #40]
-	ldr	r1, .L261+128
-	mov	r0, r5
-	bl	sprintf
-	movw	r3, #2572
-	add	r5, r5, r0
-	ldrh	r2, [r6, r3]
-	mov	r0, r5
-	ldr	r1, .L261+132
-	movw	r4, #2348
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #44]
-	ldr	r1, .L261+136
-	mov	r0, r5
-	bl	sprintf
-	add	r3, r6, #2576
-	add	r5, r5, r0
-	ldrh	r2, [r3]
-	mov	r0, r5
-	ldr	r1, .L261+140
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #152]
-	ldr	r1, .L261+144
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r8, #2]
-	ldr	r1, .L261+148
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2354]	@ zero_extendqisi2
-	ldr	r1, .L261+152
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, r4]
-	ldr	r1, .L261+156
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2356]	@ zero_extendqisi2
-	ldr	r1, .L261+160
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r8, #4]
-	ldr	r1, .L261+164
-	mov	r0, r5
-	bl	sprintf
-	ldrh	r3, [r6, r4]
-	add	r5, r5, r0
-	ldr	r2, [r6, #2324]
-	mov	r0, r5
-	ldr	r1, .L261+168
-	movw	r4, #2396
-	lsl	r3, r3, #1
-	ldrh	r2, [r2, r3]
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r8, #50]
-	ldr	r1, .L261+172
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2402]	@ zero_extendqisi2
-	ldr	r1, .L261+176
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, r4]
-	ldr	r1, .L261+180
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2404]	@ zero_extendqisi2
-	ldr	r1, .L261+184
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r8, #52]
-	ldr	r1, .L261+188
-	mov	r0, r5
-	bl	sprintf
-	ldrh	r3, [r6, r4]
-	add	r5, r5, r0
-	ldr	r2, [r6, #2324]
-	mov	r0, r5
-	ldr	r1, .L261+192
-	add	r4, r8, #96
+	ldr	r3, [r5, #2504]
+	mov	r1, #64
+	ldr	r2, .L262+16
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2500]
+	ldr	r2, .L262+20
+	mov	r1, #64
+	mov	r0, r4
+	ldr	r7, .L262+24
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2508]
+	ldr	r2, .L262+28
+	mov	r1, #64
+	mov	r0, r4
+	ldr	r9, .L262+32
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2512]
+	ldr	r2, .L262+36
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2516]
+	ldr	r2, .L262+40
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2520]
+	ldr	r2, .L262+44
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2524]
+	ldr	r2, .L262+48
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2528]
+	ldr	r2, .L262+52
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldr	r3, [r5, #2532]
+	add	r4, r4, r0
+	ldr	r2, .L262+56
+	mov	r1, #64
+	mov	r0, r4
+	lsr	r3, r3, #11
+	bl	snprintf
+	ldr	r3, [r5, #2536]
+	add	r4, r4, r0
+	ldr	r2, .L262+60
+	mov	r1, #64
+	mov	r0, r4
+	lsr	r3, r3, #11
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2540]
+	ldr	r2, .L262+64
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2544]
+	ldr	r2, .L262+68
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #158]
+	ldr	r2, .L262+72
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, r8]
+	ldr	r2, .L262+76
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2548]
+	ldr	r2, .L262+80
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2552]
+	ldr	r2, .L262+84
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2556]
+	ldr	r2, .L262+88
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2560]
+	ldr	r2, .L262+92
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2564]
+	ldr	r2, .L262+96
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2568]
+	ldr	r2, .L262+100
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r7, #30]
+	ldr	r2, .L262+104
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r7, #28]
+	ldr	r2, .L262+108
+	mov	r1, #64
+	mov	r0, r4
+	movw	r7, #2348
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #140]
+	ldr	r2, .L262+112
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #132]
+	ldr	r2, .L262+116
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #28]
+	ldr	r2, .L262+120
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #218]
+	ldr	r2, .L262+124
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #40]
+	ldr	r2, .L262+128
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	movw	r3, #2572
+	add	r4, r4, r0
+	ldrh	r3, [r5, r3]
+	mov	r1, #64
+	ldr	r2, .L262+132
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #44]
+	ldr	r2, .L262+136
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r3, r5, #2576
+	add	r4, r4, r0
+	ldrh	r3, [r3]
+	mov	r1, #64
+	ldr	r2, .L262+140
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #152]
+	ldr	r2, .L262+144
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #2]
+	ldr	r2, .L262+148
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2354]	@ zero_extendqisi2
+	ldr	r2, .L262+152
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, r7]
+	ldr	r2, .L262+156
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2356]	@ zero_extendqisi2
+	ldr	r2, .L262+160
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #4]
+	ldr	r2, .L262+164
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldrh	r3, [r5, r7]
+	add	r4, r4, r0
+	ldr	r2, [r5, #2324]
+	mov	r1, #64
+	mov	r0, r4
+	movw	r7, #2396
 	lsl	r3, r3, #1
-	ldrh	r2, [r2, r3]
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r8, #98]
-	ldr	r1, .L261+196
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2450]	@ zero_extendqisi2
-	ldr	r1, .L261+200
-	mov	r0, r5
-	bl	sprintf
+	ldrh	r3, [r2, r3]
+	ldr	r2, .L262+168
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #50]
+	ldr	r2, .L262+172
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2402]	@ zero_extendqisi2
+	ldr	r2, .L262+176
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, r7]
+	ldr	r2, .L262+180
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2404]	@ zero_extendqisi2
+	ldr	r2, .L262+184
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #52]
+	ldr	r2, .L262+188
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldrh	r3, [r5, r7]
+	add	r4, r4, r0
+	ldr	r2, [r5, #2324]
+	mov	r1, #64
+	mov	r0, r4
+	movw	r7, #2588
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
+	ldr	r2, .L262+192
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #98]
+	ldr	r2, .L262+196
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2450]	@ zero_extendqisi2
+	ldr	r2, .L262+200
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
 	movw	r3, #2444
-	add	r5, r5, r0
-	ldrh	r2, [r6, r3]
-	mov	r0, r5
-	ldr	r1, .L261+204
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2452]	@ zero_extendqisi2
-	ldr	r1, .L261+208
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r8, #100]
-	ldr	r1, .L261+212
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r4, #146]
-	ldr	r1, .L261+216
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2594]	@ zero_extendqisi2
-	ldr	r1, .L261+220
-	mov	r0, r5
-	bl	sprintf
-	movw	r8, #2588
-	add	r5, r5, r0
-	ldrh	r2, [r6, r8]
-	mov	r0, r5
-	ldr	r1, .L261+224
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2596]	@ zero_extendqisi2
-	ldr	r1, .L261+228
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r4, #148]
-	ldr	r1, .L261+232
-	mov	r0, r5
-	bl	sprintf
-	ldr	r3, [r6, #2712]
-	add	r5, r5, r0
-	ldr	r2, [r6, #2716]
-	mov	r0, r5
-	ldr	r1, .L261+236
+	add	r4, r4, r0
+	ldrh	r3, [r5, r3]
+	mov	r1, #64
+	ldr	r2, .L262+204
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2452]	@ zero_extendqisi2
+	ldr	r2, .L262+208
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #100]
+	ldr	r2, .L262+212
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #242]
+	ldr	r2, .L262+216
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2594]	@ zero_extendqisi2
+	ldr	r2, .L262+220
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, r7]
+	ldr	r2, .L262+224
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2596]	@ zero_extendqisi2
+	ldr	r2, .L262+228
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r9, #244]
+	ldr	r2, .L262+232
+	mov	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldr	r3, [r5, #2712]
+	add	r4, r4, r0
+	ldr	r2, .L262+236
+	mov	r1, #64
+	mov	r0, r4
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #2720]
 	str	r3, [sp]
-	ldr	r3, [r6, #2720]
-	bl	sprintf
-	add	r4, r5, r0
-	ldr	r2, [r6, #2708]
-	ldr	r1, .L261+240
+	ldr	r3, [r5, #2716]
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2708]
+	ldr	r2, .L262+240
+	mov	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldr	r2, [r6, #2732]
-	ldr	r1, .L261+244
+	ldr	r3, [r5, #2732]
+	ldr	r2, .L262+244
+	mov	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	movw	r3, #3148
 	add	r4, r4, r0
-	ldrh	r2, [r6, r3]
+	ldrh	r3, [r5, r3]
+	mov	r1, #64
+	ldr	r2, .L262+248
 	mov	r0, r4
-	ldr	r1, .L261+248
-	bl	sprintf
+	bl	snprintf
 	movw	r3, #3150
 	add	r4, r4, r0
-	ldrh	r2, [r6, r3]
+	ldrh	r3, [r5, r3]
+	mov	r1, #64
+	ldr	r2, .L262+252
 	mov	r0, r4
-	ldr	r1, .L261+252
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldr	r2, [r6, #3152]
-	ldr	r1, .L261+256
+	ldr	r3, [r5, #3152]
+	ldr	r2, .L262+256
+	mov	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	movw	r3, #3156
 	add	r4, r4, r0
-	ldrh	r2, [r6, r3]
+	ldrh	r3, [r5, r3]
+	mov	r1, #64
+	ldr	r2, .L262+260
 	mov	r0, r4
-	ldr	r1, .L261+260
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r1, .L261+264
-	mov	r2, r0
+	ldr	r2, .L262+264
+	mov	r3, r0
+	mov	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r0, [r6, r9]
+	ldrh	r0, [r5, r8]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r1, .L261+268
-	mov	r2, r0
+	ldr	r2, .L262+268
+	mov	r3, r0
+	mov	r1, #64
 	mov	r0, r4
-	bl	sprintf
-	ldr	r3, .L261+272
+	bl	snprintf
+	ldr	r3, .L262+272
 	add	r4, r4, r0
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L250
-.L255:
-	sub	r0, r4, r7
+	beq	.L251
+.L256:
+	sub	r0, r4, r6
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L250:
-	ldrh	r3, [r6, r8]
+.L251:
+	ldrh	r3, [r5, r7]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L252
-	ldr	r2, [r6, #2324]
+	beq	.L253
+	ldr	r2, [r5, #2324]
 	lsl	r3, r3, #1
 	mov	r0, r4
-	ldr	r1, .L261+276
-	ldrh	r2, [r2, r3]
-	bl	sprintf
+	mov	r1, #64
+	ldrh	r3, [r2, r3]
+	ldr	r2, .L262+276
+	bl	snprintf
 	add	r4, r4, r0
-.L252:
+.L253:
 	mov	r0, #0
-	ldr	r9, .L261+280
+	ldr	r9, .L262+280
 	bl	List_get_gc_head_node
-	uxth	r3, r0
-	mov	r5, #0
+	uxth	r0, r0
+	mov	r7, #0
 	movw	r10, #65535
-.L254:
-	cmp	r3, r10
-	beq	.L253
-	ldr	r2, [r6, #2328]
-	lsl	r1, r3, #1
-	lsl	r8, r3, #3
+.L255:
+	cmp	r0, r10
+	beq	.L254
+	ldr	r3, [r5, #2328]
+	lsl	r2, r0, #1
+	lsl	r8, r0, #3
+	mov	r1, #64
+	ldrh	r3, [r3, r2]
+	str	r3, [sp, #12]
+	ldr	r3, [r5, #2316]
+	add	r3, r3, r8
+	ldrh	r3, [r3, #4]
+	str	r3, [sp, #8]
+	ldr	r3, [r5, #2324]
+	ldrh	r3, [r3, r2]
+	mov	r2, r9
+	stm	sp, {r0, r3}
+	mov	r3, r7
 	mov	r0, r4
-	ldrh	r2, [r2, r1]
-	str	r2, [sp, #8]
-	ldr	r2, [r6, #2316]
-	add	r2, r2, r8
-	ldrh	r2, [r2, #4]
-	str	r2, [sp, #4]
-	ldr	r2, [r6, #2324]
-	ldrh	r2, [r2, r1]
-	mov	r1, r9
-	str	r2, [sp]
-	mov	r2, r5
-	bl	sprintf
-	add	r5, r5, #1
-	ldr	r3, [r6, #2316]
-	cmp	r5, #16
+	add	r7, r7, #1
+	bl	snprintf
+	ldr	r3, [r5, #2316]
+	cmp	r7, #16
 	add	r4, r4, r0
-	ldrh	r3, [r3, r8]
-	bne	.L254
-.L253:
-	ldr	r3, [r6, #2340]
-	mov	r5, #0
-	ldr	r2, [r6, #2316]
+	ldrh	r0, [r3, r8]
+	bne	.L255
+.L254:
+	ldr	r3, [r5, #2340]
+	mov	r7, #0
+	ldr	r2, [r5, #2316]
 	movw	r9, #65535
-	ldr	r10, .L261+284
+	ldr	r10, .L262+284
 	sub	r3, r3, r2
 	ubfx	r3, r3, #3, #16
-.L256:
+.L257:
 	cmp	r3, r9
-	beq	.L255
-	ldr	r1, [r6, #2328]
+	beq	.L256
+	ldr	r1, [r5, #2328]
 	lsl	r2, r3, #1
 	lsl	r8, r3, #3
 	mov	r0, r4
 	ldrh	r2, [r1, r2]
-	mov	r1, r10
-	str	r2, [sp, #4]
-	ldr	r2, [r6, #2316]
+	mov	r1, #64
+	str	r2, [sp, #8]
+	ldr	r2, [r5, #2316]
 	add	r2, r2, r8
 	ldrh	r2, [r2, #4]
-	str	r2, [sp]
-	mov	r2, r5
-	add	r5, r5, #1
-	bl	sprintf
-	cmp	r5, #4
+	str	r3, [sp]
+	mov	r3, r7
+	add	r7, r7, #1
+	str	r2, [sp, #4]
+	mov	r2, r10
+	bl	snprintf
+	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L255
-	ldr	r3, [r6, #2316]
+	beq	.L256
+	ldr	r3, [r5, #2316]
 	ldrh	r3, [r3, r8]
-	b	.L256
-.L262:
+	b	.L257
+.L263:
 	.align	2
-.L261:
+.L262:
 	.word	.LANCHOR0
 	.word	.LC2
 	.word	.LC3
 	.word	.LC4
 	.word	.LC5
 	.word	.LC6
+	.word	.LANCHOR0+2268
 	.word	.LC7
+	.word	.LANCHOR0+2348
 	.word	.LC8
 	.word	.LC9
 	.word	.LC10
 	.word	.LC11
 	.word	.LC12
 	.word	.LC13
-	.word	.LANCHOR0+2268
-	.word	.LANCHOR0+2348
 	.word	.LC14
 	.word	.LC15
 	.word	.LC16
@@ -2336,19 +2417,26 @@ rknand_proc_ftlread:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L264
-	mov	r5, r0
-	ldr	r1, .L264+4
-	bl	sprintf
+	cmp	r0, #2048
+	mov	r5, r1
+	blt	.L266
+	ldr	r3, .L267
+	mov	r1, #64
+	ldr	r2, .L267+4
+	mov	r0, r5
+	bl	snprintf
 	add	r4, r5, r0
 	mov	r0, r4
 	bl	FtlPrintInfo2buf
 	add	r0, r4, r0
 	sub	r0, r0, r5
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L265:
+.L266:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L268:
 	.align	2
-.L264:
+.L267:
 	.word	.LC70
 	.word	.LC71
 	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
@@ -2365,19 +2453,19 @@ GetSwlReplaceBlock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #16
-	ldr	r4, .L290
+	ldr	r4, .L293
 	ldr	r2, [r4, #2556]
 	ldr	r3, [r4, #2568]
 	cmp	r2, r3
-	bcs	.L267
+	bcs	.L270
 	ldr	r2, [r4, #2328]
 	mov	r3, #0
 	ldrh	r1, [r4, #40]
 	str	r3, [r4, #2548]
 	sub	r2, r2, #2
-.L268:
+.L271:
 	cmp	r3, r1
-	bcc	.L269
+	bcc	.L272
 	ldr	r5, [r4, #2548]
 	mov	r0, r5
 	bl	__udivsi3
@@ -2387,48 +2475,48 @@ GetSwlReplaceBlock:
 	sub	r0, r5, r0
 	bl	__udivsi3
 	str	r0, [r4, #2548]
-.L270:
+.L273:
 	ldr	r6, [r4, #2568]
 	ldr	r7, [r4, #2556]
 	add	r3, r6, #256
 	cmp	r3, r7
-	bls	.L275
+	bls	.L278
 	ldr	r2, [r4, #2564]
 	add	r3, r6, #768
 	cmp	r3, r2
-	bls	.L275
-.L277:
+	bls	.L278
+.L280:
 	movw	r5, #65535
-.L276:
+.L279:
 	mov	r0, r5
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L269:
+.L272:
 	ldrh	r0, [r2, #2]!
 	add	r3, r3, #1
 	ldr	ip, [r4, #2548]
 	add	r0, r0, ip
 	str	r0, [r4, #2548]
-	b	.L268
-.L267:
+	b	.L271
+.L270:
 	ldr	r3, [r4, #2564]
 	cmp	r2, r3
 	addhi	r3, r3, #1
 	strhi	r3, [r4, #2564]
 	movhi	r3, #0
-	bls	.L270
-.L272:
+	bls	.L273
+.L275:
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	bcs	.L270
+	bcs	.L273
 	ldr	r0, [r4, #2328]
 	lsl	r1, r3, #1
 	add	r3, r3, #1
 	ldrh	r2, [r0, r1]
 	add	r2, r2, #1
 	strh	r2, [r0, r1]	@ movhi
-	b	.L272
-.L275:
+	b	.L275
+.L278:
 	movw	r3, #2344
 	ldrh	r0, [r4, r3]
 	add	r0, r0, r0, lsl #1
@@ -2437,87 +2525,87 @@ GetSwlReplaceBlock:
 	add	r3, r6, #64
 	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L277
+	bcc	.L280
 	ldr	r3, [r4, #2320]
 	cmp	r3, #0
-	beq	.L277
+	beq	.L280
 	ldrh	r10, [r4, #40]
 	movw	r1, #65535
 	ldr	lr, [r4, #2316]
 	mov	r0, #0
 	ldr	r8, [r4, #2328]
 	mov	r2, r1
-.L278:
+.L281:
 	ldrh	ip, [r3]
 	movw	r5, #65535
 	cmp	ip, r5
-	bne	.L281
+	bne	.L284
 	mov	r5, r2
-.L280:
+.L283:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L277
+	beq	.L280
 	lsl	r3, r5, #1
 	ldrh	r10, [r8, r3]
 	cmp	r6, r10
-	bcs	.L282
+	bcs	.L285
 	str	r3, [fp, #-44]
 	bl	GetFreeBlockMinEraseCount
 	ldr	r3, [fp, #-44]
 	cmp	r6, r0
 	strcc	r1, [r4, #2568]
-.L282:
+.L285:
 	cmp	r7, r10
-	bls	.L277
+	bls	.L280
 	add	r2, r10, #128
 	cmp	r9, r2
-	ble	.L277
+	ble	.L280
 	add	r2, r10, #256
 	cmp	r7, r2
-	bhi	.L283
+	bhi	.L286
 	ldr	r2, [r4, #2564]
 	add	r10, r10, #768
 	cmp	r10, r2
-	bcs	.L277
-.L283:
+	bcs	.L280
+.L286:
 	str	r9, [sp, #8]
 	mov	r1, r5
 	ldrh	r2, [r8, r3]
-	ldr	r0, .L290+4
+	ldr	r0, .L293+4
 	str	r2, [sp, #4]
 	ldr	r2, [r4, #2324]
 	ldrh	r3, [r2, r3]
 	mov	r2, r7
 	str	r3, [sp]
 	ldr	r3, [r4, #2564]
-	bl	printk
+	bl	sftl_printk
 	mov	r3, #1
 	str	r3, [r4, #3160]
-	b	.L276
-.L281:
+	b	.L279
+.L284:
 	add	r0, r0, #1
 	uxth	r0, r0
 	cmp	r0, r10
-	bhi	.L277
+	bhi	.L280
 	ldrh	r5, [r3, #4]
 	cmp	r5, #0
-	beq	.L279
+	beq	.L282
 	sub	r3, r3, lr
 	asr	r3, r3, #3
 	uxth	r5, r3
 	lsl	r3, r5, #1
 	ldrh	r3, [r8, r3]
 	cmp	r6, r3
-	bcs	.L280
+	bcs	.L283
 	cmp	r1, r3
 	movhi	r1, r3
 	movhi	r2, r5
-.L279:
+.L282:
 	add	r3, lr, ip, lsl #3
-	b	.L278
-.L291:
+	b	.L281
+.L294:
 	.align	2
-.L290:
+.L293:
 	.word	.LANCHOR0
 	.word	.LC72
 	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
@@ -2536,19 +2624,19 @@ free_data_superblock:
 	uxth	r0, r0
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L293
-	ldr	r3, .L294
+	beq	.L296
+	ldr	r3, .L297
 	mov	r1, #0
 	ldr	r2, [r3, #2324]
 	lsl	r3, r0, #1
 	strh	r1, [r2, r3]	@ movhi
 	bl	INSERT_FREE_LIST
-.L293:
+.L296:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L295:
+.L298:
 	.align	2
-.L294:
+.L297:
 	.word	.LANCHOR0
 	.size	free_data_superblock, .-free_data_superblock
 	.align	2
@@ -2567,30 +2655,30 @@ get_new_active_ppa:
 	movw	r3, #65535
 	mov	r4, r0
 	cmp	r2, r3
-	bne	.L297
-	movw	r2, #2707
-	ldr	r1, .L310
-	ldr	r0, .L310+4
-	bl	printk
-.L297:
-	ldr	r5, .L310+8
+	bne	.L300
+	movw	r2, #2740
+	ldr	r1, .L313
+	ldr	r0, .L313+4
+	bl	sftl_printk
+.L300:
+	ldr	r5, .L313+8
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #102]
 	cmp	r2, r3
-	bne	.L298
-	movw	r2, #2708
-	ldr	r1, .L310
-	ldr	r0, .L310+4
-	bl	printk
-.L298:
+	bne	.L301
+	movw	r2, #2741
+	ldr	r1, .L313
+	ldr	r0, .L313+4
+	bl	sftl_printk
+.L301:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L299
-	movw	r2, #2709
-	ldr	r1, .L310
-	ldr	r0, .L310+4
-	bl	printk
-.L299:
+	bne	.L302
+	movw	r2, #2742
+	ldr	r1, .L313
+	ldr	r0, .L313+4
+	bl	sftl_printk
+.L302:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	mov	r3, #0
 	ldrh	r1, [r5, #32]
@@ -2599,10 +2687,10 @@ get_new_active_ppa:
 	add	r2, r4, r2, lsl #1
 	ldrh	r0, [r2, #16]
 	mov	r2, r3
-.L300:
+.L303:
 	cmp	r0, ip
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	beq	.L302
+	beq	.L305
 	ldrh	r2, [r4, #4]
 	ldrh	r6, [r4, #2]
 	sub	r2, r2, #1
@@ -2610,7 +2698,7 @@ get_new_active_ppa:
 	orr	r6, r6, r0, lsl #10
 	movw	r0, #65535
 	strh	r2, [r4, #4]	@ movhi
-.L304:
+.L307:
 	add	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r1, r3
@@ -2621,7 +2709,7 @@ get_new_active_ppa:
 	add	ip, r4, r3, lsl #1
 	ldrh	ip, [ip, #16]
 	cmp	ip, r0
-	beq	.L304
+	beq	.L307
 	strb	r3, [r4, #6]
 	cmp	r2, #0
 	ldrh	r3, [r4, #2]
@@ -2631,15 +2719,15 @@ get_new_active_ppa:
 	lsr	r3, r3, #5
 	moveq	r3, #0
 	cmp	r3, #0
-	beq	.L296
-	movw	r2, #2730
-	ldr	r1, .L310
-	ldr	r0, .L310+4
-	bl	printk
-.L296:
+	beq	.L299
+	movw	r2, #2763
+	ldr	r1, .L313
+	ldr	r0, .L313+4
+	bl	sftl_printk
+.L299:
 	mov	r0, r6
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L302:
+.L305:
 	add	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, r1
@@ -2651,10 +2739,10 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, lsl #1
 	ldrh	r0, [r3, #16]
-	b	.L300
-.L311:
+	b	.L303
+.L314:
 	.align	2
-.L310:
+.L313:
 	.word	.LANCHOR1+111
 	.word	.LC1
 	.word	.LANCHOR0
@@ -2671,26 +2759,26 @@ FtlGcBufInit:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L317
+	ldr	r3, .L320
 	mov	lr, #12
 	mov	r4, #1
 	mov	r5, #20
 	mov	r2, #0
 	str	r2, [r3, #3164]
-.L313:
+.L316:
 	ldrh	r1, [r3, #32]
 	uxth	r0, r2
 	add	ip, r2, #1
 	cmp	r0, r1
-	bcc	.L314
+	bcc	.L317
 	mov	ip, #12
 	mov	lr, #0
-.L315:
+.L318:
 	ldr	r2, [r3, #3184]
 	cmp	r1, r2
-	bcc	.L316
+	bcc	.L319
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L314:
+.L317:
 	uxth	r2, r2
 	ldr	r6, [r3, #3168]
 	mul	r0, lr, r2
@@ -2723,8 +2811,8 @@ FtlGcBufInit:
 	ldr	r1, [r6, #4]
 	str	r1, [r2, #12]
 	mov	r2, ip
-	b	.L313
-.L316:
+	b	.L316
+.L319:
 	mul	r4, ip, r1
 	ldr	r5, [r3, #3168]
 	add	r2, r5, r4
@@ -2751,10 +2839,10 @@ FtlGcBufInit:
 	bic	r2, r2, #3
 	add	r2, r4, r2
 	str	r2, [r0, #4]
-	b	.L315
-.L318:
+	b	.L318
+.L321:
 	.align	2
-.L317:
+.L320:
 	.word	.LANCHOR0
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
@@ -2769,37 +2857,37 @@ FtlGcBufFree:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L326
+	ldr	r3, .L329
 	mov	lr, #0
 	mov	r5, #20
 	mov	r7, #12
 	mov	r8, lr
 	ldr	r6, [r3, #3184]
 	ldr	r4, [r3, #3168]
-.L320:
+.L323:
 	uxth	r3, lr
 	cmp	r1, r3
 	ldmfdls	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
 	mla	ip, r5, r3, r0
 	mov	r2, #0
-.L321:
+.L324:
 	uxth	r3, r2
 	cmp	r6, r3
-	bls	.L322
+	bls	.L325
 	mul	r3, r7, r3
 	add	r2, r2, #1
 	ldr	r10, [r4, r3]
 	add	r9, r4, r3
 	ldr	r3, [ip, #8]
 	cmp	r10, r3
-	bne	.L321
+	bne	.L324
 	str	r8, [r9, #8]
-.L322:
+.L325:
 	add	lr, lr, #1
-	b	.L320
-.L327:
+	b	.L323
+.L330:
 	.align	2
-.L326:
+.L329:
 	.word	.LANCHOR0
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -2814,41 +2902,41 @@ FtlGcBufAlloc:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L335
+	ldr	r3, .L338
 	mov	ip, #0
 	mov	r6, #12
 	mov	r7, #1
 	mov	r8, #20
 	ldr	r4, [r3, #3184]
 	ldr	r5, [r3, #3168]
-.L329:
+.L332:
 	uxth	r2, ip
 	cmp	r1, r2
-	bhi	.L333
+	bhi	.L336
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L333:
+.L336:
 	mov	lr, #0
-.L330:
+.L333:
 	uxth	r3, lr
 	cmp	r4, r3
-	bls	.L331
+	bls	.L334
 	mla	r3, r6, r3, r5
 	add	lr, lr, #1
 	ldr	r9, [r3, #8]
 	cmp	r9, #0
-	bne	.L330
+	bne	.L333
 	mla	r2, r8, r2, r0
 	ldr	lr, [r3]
 	str	r7, [r3, #8]
 	str	lr, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L331:
+.L334:
 	add	ip, ip, #1
-	b	.L329
-.L336:
+	b	.L332
+.L339:
 	.align	2
-.L335:
+.L338:
 	.word	.LANCHOR0
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
@@ -2863,26 +2951,26 @@ IsBlkInGcList:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L342
+	ldr	r2, .L345
 	movw	r1, #3192
 	uxth	r0, r0
 	ldr	r3, [r2, #3188]
 	ldrh	r2, [r2, r1]
 	add	r2, r3, r2, lsl #1
-.L338:
+.L341:
 	cmp	r3, r2
-	bne	.L340
+	bne	.L343
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L340:
+.L343:
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L338
+	bne	.L341
 	mov	r0, #1
 	ldmfd	sp, {fp, sp, pc}
-.L343:
+.L346:
 	.align	2
-.L342:
+.L345:
 	.word	.LANCHOR0
 	.size	IsBlkInGcList, .-IsBlkInGcList
 	.align	2
@@ -2902,31 +2990,31 @@ FtlGcUpdatePage:
 	mov	r5, r1
 	mov	r6, r2
 	bl	P2V_block_in_plane
-	ldr	ip, .L348
+	ldr	ip, .L351
 	movw	r3, #3192
 	ldr	r2, [ip, #3188]
 	ldrh	lr, [ip, r3]
 	mov	r3, #0
 	sub	r1, r2, #2
-.L345:
+.L348:
 	uxth	r7, r3
 	cmp	r7, lr
-	bcc	.L347
-	bne	.L346
+	bcc	.L350
+	bne	.L349
 	lsl	r3, r7, #1
 	strh	r0, [r2, r3]	@ movhi
 	movw	r2, #3192
 	ldrh	r3, [ip, r2]
 	add	r3, r3, #1
 	strh	r3, [ip, r2]	@ movhi
-	b	.L346
-.L347:
+	b	.L349
+.L350:
 	ldrh	r7, [r1, #2]!
 	add	r3, r3, #1
 	cmp	r7, r0
-	bne	.L345
-.L346:
-	ldr	r0, .L348+4
+	bne	.L348
+.L349:
+	ldr	r0, .L351+4
 	mov	r3, #12
 	ldrh	r2, [r0]
 	mul	r3, r3, r2
@@ -2938,9 +3026,9 @@ FtlGcUpdatePage:
 	add	r3, r3, #1
 	strh	r3, [r0]	@ movhi
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L349:
+.L352:
 	.align	2
-.L348:
+.L351:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3200
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -2957,30 +3045,30 @@ FtlGcRefreshBlock:
 	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	uxth	r4, r0
-	ldr	r0, .L353
+	ldr	r0, .L356
 	mov	r1, r4
-	bl	printk
-	ldr	r3, .L353+4
+	bl	sftl_printk
+	ldr	r3, .L356+4
 	movw	ip, #3202
 	ldrh	lr, [r3, ip]
 	cmp	r4, lr
-	beq	.L351
+	beq	.L354
 	movw	r2, #3204
 	ldrh	r0, [r3, r2]
 	cmp	r4, r0
-	beq	.L351
+	beq	.L354
 	movw	r1, #65535
 	cmp	lr, r1
 	strheq	r4, [r3, ip]	@ movhi
-	beq	.L351
+	beq	.L354
 	cmp	r0, r1
 	strheq	r4, [r3, r2]	@ movhi
-.L351:
+.L354:
 	mov	r0, #0
 	ldmfd	sp, {r4, fp, sp, pc}
-.L354:
+.L357:
 	.align	2
-.L353:
+.L356:
 	.word	.LC73
 	.word	.LANCHOR0
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
@@ -2996,7 +3084,7 @@ FtlGcMarkBadPhyBlk:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L359
+	ldr	r4, .L362
 	uxth	r5, r0
 	movw	r6, #3206
 	mov	r0, r5
@@ -3004,37 +3092,37 @@ FtlGcMarkBadPhyBlk:
 	mov	r2, r5
 	mov	r7, r0
 	ldrh	r1, [r4, r6]
-	ldr	r0, .L359+4
-	bl	printk
+	ldr	r0, .L362+4
+	bl	sftl_printk
 	mov	r0, r7
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, r6]
 	mov	r2, #0
-	ldr	r0, .L359+8
-.L356:
+	ldr	r0, .L362+8
+.L359:
 	uxth	r1, r2
 	cmp	r3, r1
-	bhi	.L358
+	bhi	.L361
 	cmp	r3, #15
 	movwls	r2, #3206
 	addls	r1, r3, #1
 	strhls	r1, [r4, r2]	@ movhi
 	lslls	r3, r3, #1
-	ldrls	r2, .L359+8
+	ldrls	r2, .L362+8
 	strhls	r5, [r2, r3]	@ movhi
-	b	.L357
-.L358:
+	b	.L360
+.L361:
 	add	r2, r2, #1
 	add	r1, r0, r2, lsl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L356
-.L357:
+	bne	.L359
+.L360:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L360:
+.L363:
 	.align	2
-.L359:
+.L362:
 	.word	.LANCHOR0
 	.word	.LC74
 	.word	.LANCHOR0+3208
@@ -3051,16 +3139,16 @@ FtlGcReFreshBadBlk:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L367
+	ldr	r4, .L370
 	movw	r3, #3206
 	ldrh	r2, [r4, r3]
 	cmp	r2, #0
-	beq	.L362
+	beq	.L365
 	movw	r3, #3202
 	ldrh	r1, [r4, r3]
 	movw	r3, #65535
 	cmp	r1, r3
-	bne	.L362
+	bne	.L365
 	movw	r3, #3242
 	movw	r5, #3242
 	ldrh	r1, [r4, r3]
@@ -3068,7 +3156,7 @@ FtlGcReFreshBadBlk:
 	movcs	r2, #0
 	strhcs	r2, [r4, r3]	@ movhi
 	ldrh	r3, [r4, r5]
-	ldr	r2, .L367+4
+	ldr	r2, .L370+4
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	bl	P2V_block_in_plane
@@ -3076,12 +3164,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, r5]
 	add	r3, r3, #1
 	strh	r3, [r4, r5]	@ movhi
-.L362:
+.L365:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L368:
+.L371:
 	.align	2
-.L367:
+.L370:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3208
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
@@ -3097,12 +3185,12 @@ ftl_malloc:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r1, .L370
+	ldr	r1, .L373
 	bl	__kmalloc
 	ldmfd	sp, {fp, sp, pc}
-.L371:
+.L374:
 	.align	2
-.L370:
+.L373:
 	.word	37748929
 	.size	ftl_malloc, .-ftl_malloc
 	.align	2
@@ -3130,1040 +3218,428 @@ rknand_print_hex:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #16
-	mul	r3, r2, r3
-	mov	ip, #0
-	str	r2, [sp]
-	str	ip, [sp, #12]
-	mov	r2, #2
-	stmib	sp, {r1, r3}
-	mov	r1, r0
-	mov	r3, #16
-	ldr	r0, .L374
-	bl	print_hex_dump
-	sub	sp, fp, #12
-	ldmfd	sp, {fp, sp, pc}
-.L375:
+	mov	r6, #0
+	mov	r10, r0
+	mov	r7, r1
+	mov	r8, r2
+	mov	r9, r3
+	mov	r5, r6
+	mov	r4, r6
+.L377:
+	cmp	r4, r9
+	bcc	.L383
+	ldr	r0, .L385
+	bl	sftl_printk
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L383:
+	cmp	r5, #0
+	bne	.L378
+	mov	r3, r6
+	mov	r2, r7
+	mov	r1, r10
+	ldr	r0, .L385+4
+	bl	sftl_printk
+.L378:
+	cmp	r8, #4
+	ldreq	r1, [r7, r4, lsl #2]
+	ldreq	r0, .L385+8
+	beq	.L384
+	cmp	r8, #2
+	lsleq	r3, r4, #1
+	ldreq	r0, .L385+12
+	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
+	ldrheq	r1, [r7, r3]
+	ldrne	r0, .L385+16
+.L384:
+	add	r5, r5, #1
+	bl	sftl_printk
+	cmp	r5, #15
+	bls	.L382
+	mov	r5, #0
+	ldr	r0, .L385
+	bl	sftl_printk
+.L382:
+	add	r4, r4, #1
+	add	r6, r6, r8
+	b	.L377
+.L386:
 	.align	2
-.L374:
+.L385:
+	.word	.LC79
 	.word	.LC75
+	.word	.LC76
+	.word	.LC77
+	.word	.LC78
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
-	.global	FlashReadPages
+	.global	FlashEraseBlocks
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashReadPages, %function
-FlashReadPages:
-	@ args = 0, pretend = 0, frame = 8
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
+	@ args = 0, pretend = 0, frame = 12
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #8
-	mov	r6, #0
-	ldr	r5, .L394
-	mov	r7, r1
-	ldr	r9, .L394+4
+	sub	sp, sp, #12
+	mov	r7, #0
+	ldr	r6, .L403
+	mov	r8, r2
 	mov	r4, r0
-	ldr	r10, .L394+8
-	ldrh	r8, [r5, #12]
-.L377:
-	cmp	r6, r7
-	bne	.L384
-	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L384:
-	ldr	r3, [r4, #8]
-	cmp	r3, #0
-	beq	.L378
-	ldr	r3, [r4, #12]
-	cmp	r3, #0
-	bne	.L379
-.L378:
-	mov	r2, #76
-	mov	r1, r9
-	mov	r0, r10
-	bl	printk
-.L379:
+	mov	r5, r0
+	ldrh	r9, [r6, #12]
+	lsl	r10, r9, #3
+.L388:
+	cmp	r7, r8
+	beq	.L392
 	sub	r2, fp, #48
 	sub	r1, fp, #44
-	mov	r0, r4
+	mov	r0, r5
 	bl	l2p_addr_tran
-	ldr	r3, [r4, #12]
-	ldr	ip, [r5, #3256]
-	ldr	r2, [r4, #8]
+	ldr	ip, [fp, #-48]
+	cmp	ip, #0
+	bne	.L389
+	ldr	r3, [fp, #-44]
+	cmp	r10, r3
+	bls	.L389
+	ldr	r5, .L403+4
+	ldr	r6, .L403+8
+	b	.L402
+.L391:
+	mvn	r3, #0
+	ldr	r2, [fp, #-44]
+	str	r3, [r4, #-20]
+	mov	r1, r5
+	mov	r0, r6
+	str	ip, [fp, #-52]
+	bl	sftl_printk
+	mov	r3, #16
+	mov	r2, #4
+	ldr	r1, [r4, #-12]
+	ldr	r0, .L403+12
+	bl	rknand_print_hex
+	mov	r3, #4
+	ldr	r1, [r4, #-8]
+	mov	r2, r3
+	ldr	r0, .L403+16
+	bl	rknand_print_hex
+	ldr	ip, [fp, #-52]
+	add	ip, ip, #1
+.L402:
+	cmp	ip, r8
+	add	r4, r4, #20
+	bne	.L391
+	bl	dump_stack
+.L392:
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L389:
+	ldr	r3, [r6, #3248]
+	uxtb	r0, ip
 	ldr	r1, [fp, #-44]
-	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
-	blx	ip
-	str	r0, [r4]
-	ldrh	r3, [r5, #14]
+	blx	r3
+	cmp	r0, #0
+	mvnne	r3, #0
+	streq	r0, [r5]
+	strne	r3, [r5]
+	ldrh	r3, [r6, #14]
 	cmp	r3, #4
-	bne	.L381
-	ldr	r3, [r4, #12]
-	ldr	r2, [r4, #8]
+	bne	.L396
 	ldr	r1, [fp, #-44]
-	ldr	ip, [r5, #3256]
-	add	r3, r3, #8
-	add	r2, r2, #2048
+	ldr	r3, [r6, #3248]
 	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
-	add	r1, r8, r1
-	blx	ip
-	cmn	r0, #1
-	beq	.L382
-	ldr	r3, [r4, #12]
-	ldr	r2, [r3, #12]
-	cmn	r2, #1
-	bne	.L381
-	ldr	r2, [r3, #8]
-	cmn	r2, #1
-	bne	.L381
-	ldr	r3, [r3]
-	cmn	r3, #1
-	beq	.L381
-.L382:
-	mvn	r3, #0
-	str	r3, [r4]
-.L381:
-	add	r6, r6, #1
-	add	r4, r4, #20
-	b	.L377
-.L395:
+	add	r1, r9, r1
+	blx	r3
+	cmp	r0, #0
+	mvnne	r3, #0
+	strne	r3, [r5]
+.L396:
+	add	r7, r7, #1
+	add	r5, r5, #20
+	b	.L388
+.L404:
 	.align	2
-.L394:
+.L403:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+130
-	.word	.LC1
-	.size	FlashReadPages, .-FlashReadPages
+	.word	.LC80
+	.word	.LC81
+	.word	.LC82
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
-	.global	FtlLoadFactoryBbt
+	.global	FtlFreeSysBlkQueueIn
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLoadFactoryBbt, %function
-FtlLoadFactoryBbt:
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L406
-	mov	r6, #0
-	mvn	r9, #0
-	ldr	r10, .L406+4
-	ldr	r3, [r4, #3280]
-	add	r7, r4, #162
-	ldr	r8, [r4, #3284]
-	str	r3, [r4, #3268]
-	str	r8, [r4, #3272]
-.L397:
-	ldrh	r3, [r4, #54]
-	cmp	r6, r3
-	bcc	.L402
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L402:
-	ldrh	r5, [r4, #98]
-	strh	r9, [r7, #2]!	@ movhi
-.L399:
-	ldrh	r3, [r4, #98]
-	sub	r5, r5, #1
-	uxth	r5, r5
-	sub	r2, r3, #16
-	cmp	r5, r2
-	ble	.L400
-	mla	r3, r6, r3, r5
+	uxth	r5, r0
+	movw	r2, #65533
+	uxth	r1, r1
+	sub	r3, r5, #1
+	uxth	r3, r3
+	cmp	r3, r2
+	ldmfdhi	sp, {r4, r5, r6, fp, sp, pc}
+	ldr	r4, .L414
+	ldrh	r3, [r4, #218]
+	cmp	r3, #1024
+	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
+	cmp	r1, #0
+	beq	.L407
+	mov	r0, r5
+	bl	P2V_block_in_plane
+	mov	r6, r0
+	ldr	r0, [r4, #3260]
+	lsl	r3, r5, #10
 	mov	r2, #1
 	mov	r1, r2
-	mov	r0, r10
-	lsl	r3, r3, #10
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	cmn	r3, #1
-	beq	.L399
-	ldrh	r2, [r8]
-	movw	r3, #61664
-	cmp	r2, r3
-	bne	.L399
-	strh	r5, [r7]	@ movhi
-.L400:
-	add	r6, r6, #1
-	b	.L397
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r2, [r4, #2328]
+	lsl	r0, r6, #1
+	ldrh	r3, [r2, r0]
+	add	r3, r3, #1
+	strh	r3, [r2, r0]	@ movhi
+	ldr	r3, [r4, #2560]
+	add	r3, r3, #1
+	str	r3, [r4, #2560]
 .L407:
+	ldrh	r3, [r4, #218]
+	add	r3, r3, #1
+	strh	r3, [r4, #218]	@ movhi
+	ldrh	r3, [r4, #216]
+	add	r2, r4, r3, lsl #1
+	add	r3, r3, #1
+	ubfx	r3, r3, #0, #10
+	strh	r5, [r2, #220]	@ movhi
+	strh	r3, [r4, #216]	@ movhi
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L415:
 	.align	2
-.L406:
+.L414:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
 	.align	2
-	.global	FtlGetLastWrittenPage
+	.global	FtlFreeSysBlkQueueOut
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGetLastWrittenPage, %function
-FtlGetLastWrittenPage:
-	@ args = 0, pretend = 0, frame = 84
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #84
-	cmp	r1, #1
-	ldr	r3, .L416
-	lsl	r6, r0, #10
-	mov	r2, r1
-	mov	r7, r1
-	sub	r0, fp, #116
-	ldrheq	r4, [r3, #104]
-	mov	r1, #1
-	ldrhne	r4, [r3, #102]
-	ldr	r3, .L416+4
-	sub	r4, r4, #1
-	sxth	r5, r4
-	str	r3, [fp, #-108]
-	sub	r3, fp, #96
-	str	r3, [fp, #-104]
-	orr	r3, r5, r6
-	str	r3, [fp, #-112]
-	bl	FlashReadPages
-	ldr	r3, [fp, #-96]
-	cmn	r3, #1
-	moveq	r8, #0
-	beq	.L412
-.L411:
-	mov	r0, r5
-	sub	sp, fp, #32
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L415:
-	add	r4, r8, r5
-	mov	r2, r7
-	add	r4, r4, r4, lsr #31
-	mov	r1, #1
-	sub	r0, fp, #116
-	asr	r4, r4, #1
-	sxth	r3, r4
-	orr	r3, r3, r6
-	str	r3, [fp, #-112]
-	bl	FlashReadPages
-	ldr	r3, [fp, #-96]
-	cmn	r3, #1
-	bne	.L413
-	ldr	r3, [fp, #-92]
-	cmn	r3, #1
-	subeq	r4, r4, #1
-	sxtheq	r5, r4
-	beq	.L412
-.L413:
-	add	r4, r4, #1
-	sxth	r8, r4
-.L412:
-	cmp	r8, r5
-	ble	.L415
-	b	.L411
+	ldr	r4, .L421
+	ldrh	r2, [r4, #218]
+	cmp	r2, #0
+	movweq	r5, #65535
+	beq	.L417
+	ldrh	r3, [r4, #214]
+	sub	r2, r2, #1
+	ldr	r0, [r4, #3260]
+	strh	r2, [r4, #218]	@ movhi
+	mov	r2, #1
+	add	r1, r4, r3, lsl #1
+	add	r3, r3, #1
+	ubfx	r3, r3, #0, #10
+	ldrh	r5, [r1, #220]
+	mov	r1, r2
+	strh	r3, [r4, #214]	@ movhi
+	lsl	r3, r5, #10
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r3, [r4, #2560]
+	add	r3, r3, #1
+	str	r3, [r4, #2560]
 .L417:
+	sub	r3, r5, #1
+	movw	r2, #65533
+	uxth	r3, r3
+	cmp	r3, r2
+	bls	.L418
+	ldrh	r2, [r4, #218]
+	mov	r1, r5
+	ldr	r0, .L421+4
+	bl	sftl_printk
+.L419:
+	b	.L419
+.L418:
+	mov	r0, r5
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L422:
 	.align	2
-.L416:
+.L421:
 	.word	.LANCHOR0
-	.word	ftl_temp_buf
-	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.word	.LC83
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	2
-	.global	FlashProgPages
+	.global	ftl_map_blk_alloc_new_blk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashProgPages, %function
-FlashProgPages:
-	@ args = 0, pretend = 0, frame = 32
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #32
-	mov	r9, r3
-	ldr	r6, .L448
-	mov	r10, r1
-	mov	r8, r2
+	ldrh	r1, [r0, #10]
 	mov	r4, r0
-	mov	r5, r0
-	mov	r7, #0
-	ldrh	r3, [r6, #12]
-	str	r3, [fp, #-72]
-.L419:
-	cmp	r7, r10
-	bne	.L427
-	cmp	r9, #0
-	bne	.L434
-.L447:
-	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L427:
-	ldr	r3, [r5, #8]
-	cmp	r3, #0
-	beq	.L420
-	ldr	r3, [r5, #12]
-	cmp	r3, #0
-	bne	.L421
-.L420:
-	mov	r2, #106
-	ldr	r1, .L448+4
-	ldr	r0, .L448+8
-	bl	printk
-.L421:
-	sub	r2, fp, #68
-	sub	r1, fp, #64
-	mov	r0, r5
-	bl	l2p_addr_tran
-	ldr	r3, [r5, #12]
-	ldr	ip, [r6, #3252]
-	ldr	r2, [r5, #8]
-	ldr	r1, [fp, #-64]
-	ldrb	r0, [fp, #-68]	@ zero_extendqisi2
-	blx	ip
-	cmp	r0, #0
-	mvnne	r3, #0
-	streq	r0, [r5]
-	strne	r3, [r5]
-	ldrh	r3, [r6, #14]
-	cmp	r3, #4
-	bne	.L425
-	ldr	r0, [fp, #-72]
-	ldr	r3, [r5, #12]
-	ldr	r2, [r5, #8]
-	ldr	r1, [fp, #-64]
-	add	r3, r3, #8
-	ldr	ip, [r6, #3252]
-	add	r2, r2, #2048
-	add	r1, r0, r1
-	ldrb	r0, [fp, #-68]	@ zero_extendqisi2
-	blx	ip
-	cmp	r0, #0
-	mvnne	r3, #0
-	strne	r3, [r5]
-.L425:
-	add	r7, r7, #1
-	add	r5, r5, #20
-	b	.L419
-.L432:
 	mov	r3, #0
-	mov	r2, r8
-	str	r3, [r9]
-	mov	r1, #1
-	str	r3, [r6, #3288]
-	sub	r0, fp, #60
-	ldr	r3, [r4, #4]
-	str	r9, [fp, #-52]
-	str	r10, [fp, #-48]
-	str	r3, [fp, #-56]
-	bl	FlashReadPages
-	ldr	r3, [fp, #-60]
-	cmn	r3, #1
-	bne	.L429
-	ldr	r1, [r4, #4]
-	ldr	r0, .L448+12
-	str	r3, [fp, #-72]
-	bl	printk
-	ldr	r3, [fp, #-72]
-	str	r3, [r4]
+	ldr	r2, [r0, #12]
+.L424:
+	uxth	r5, r3
+	cmp	r5, r1
+	bcs	.L427
+	mov	r7, r2
+	add	r3, r3, #1
+	ldrh	r6, [r7]
+	add	r2, r2, #2
+	cmp	r6, #0
+	bne	.L424
+	bl	FtlFreeSysBlkQueueOut
+	sub	r3, r0, #1
+	movw	r2, #65533
+	uxth	r3, r3
+	mov	r1, r0
+	strh	r0, [r7]	@ movhi
+	cmp	r3, r2
+	bls	.L425
+	ldr	r3, .L431
+	ldr	r0, .L431+4
+	ldrh	r2, [r3, #218]
+	bl	sftl_printk
+.L426:
+	b	.L426
+.L425:
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	strh	r5, [r4]	@ movhi
+	add	r3, r3, #1
+	str	r3, [r4, #28]
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+.L427:
+	ldrh	r3, [r4, #10]
+	cmp	r3, r5
+	bhi	.L429
+	movw	r2, #578
+	ldr	r1, .L431+8
+	ldr	r0, .L431+12
+	bl	sftl_printk
 .L429:
-	ldr	r3, [r4, #12]
-	cmp	r3, #0
-	beq	.L430
-	ldr	r2, [r3]
-	ldr	r3, [r6, #3288]
-	cmp	r2, r3
-	beq	.L430
-	ldr	r1, [r4, #4]
-	ldr	r0, .L448+16
-	bl	printk
-	mvn	r3, #0
-	str	r3, [r4]
-.L430:
-	ldr	r3, [r4, #8]
-	cmp	r3, #0
-	beq	.L431
-	ldr	r2, [r3]
-	ldr	r3, [r9]
-	cmp	r2, r3
-	beq	.L431
-	ldr	r1, [r4, #4]
-	ldr	r0, .L448+20
-	bl	printk
-	mvn	r3, #0
-	str	r3, [r4]
-.L431:
-	add	r5, r5, #1
-	add	r4, r4, #20
-.L428:
-	cmp	r7, r5
-	bne	.L432
-	b	.L447
-.L434:
-	mov	r5, #0
-	ldr	r9, .L448+24
-	ldr	r10, .L448+28
-	b	.L428
-.L449:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L432:
 	.align	2
-.L448:
+.L431:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+145
+	.word	.LC84
+	.word	.LANCHOR1+147
 	.word	.LC1
-	.word	.LC76
-	.word	.LC77
-	.word	.LC78
-	.word	check_buf
-	.word	.LANCHOR0+3288
-	.size	FlashProgPages, .-FlashProgPages
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
-	.global	FlashEraseBlocks
+	.global	FlashGetBadBlockList
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FlashEraseBlocks, %function
-FlashEraseBlocks:
-	@ args = 0, pretend = 0, frame = 8
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #8
-	mov	r6, #0
-	ldr	r5, .L461
-	mov	r7, r2
+	ldr	r5, .L440
 	mov	r4, r0
-	ldrh	r8, [r5, #12]
-.L451:
-	cmp	r6, r7
-	bne	.L457
-	mov	r0, #0
-	sub	sp, fp, #32
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L457:
-	sub	r2, fp, #40
-	sub	r1, fp, #36
-	mov	r0, r4
-	bl	l2p_addr_tran
-	ldr	r3, [r5, #3248]
-	ldr	r1, [fp, #-36]
-	ldrb	r0, [fp, #-40]	@ zero_extendqisi2
-	blx	r3
-	cmp	r0, #0
-	mvnne	r3, #0
-	streq	r0, [r4]
-	strne	r3, [r4]
+	mov	r6, r1
+	mov	r2, #256
+	mov	r1, #255
+	bl	memset
+	ldr	r3, [r5, #3244]
+	mov	r1, r6
+	mov	r0, r4
+	blx	r3
+	uxth	r0, r0
+	cmp	r0, #50
+	bls	.L434
+	mov	r2, #256
+	mov	r1, #255
+	mov	r0, r4
+	bl	memset
+	mov	r0, #0
+.L434:
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L455
-	ldr	r1, [fp, #-36]
-	ldr	r3, [r5, #3248]
-	ldrb	r0, [fp, #-40]	@ zero_extendqisi2
-	add	r1, r8, r1
-	blx	r3
-	cmp	r0, #0
-	mvnne	r3, #0
-	strne	r3, [r4]
-.L455:
-	add	r6, r6, #1
-	add	r4, r4, #20
-	b	.L451
-.L462:
-	.align	2
-.L461:
-	.word	.LANCHOR0
-	.size	FlashEraseBlocks, .-FlashEraseBlocks
-	.align	2
-	.global	FtlFreeSysBlkQueueIn
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlFreeSysBlkQueueIn, %function
-FtlFreeSysBlkQueueIn:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	uxth	r5, r0
-	movw	r2, #65533
-	uxth	r1, r1
-	sub	r3, r5, #1
-	uxth	r3, r3
-	cmp	r3, r2
-	ldmfdhi	sp, {r4, r5, r6, fp, sp, pc}
-	ldr	r4, .L472
-	ldrh	r3, [r4, #218]
-	cmp	r3, #1024
-	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-	cmp	r1, #0
-	beq	.L465
-	mov	r0, r5
-	bl	P2V_block_in_plane
-	mov	r6, r0
-	ldr	r0, [r4, #3800]
-	lsl	r3, r5, #10
-	mov	r2, #1
-	mov	r1, r2
-	str	r3, [r0, #4]
-	bl	FlashEraseBlocks
-	ldr	r2, [r4, #2328]
-	lsl	r0, r6, #1
-	ldrh	r3, [r2, r0]
-	add	r3, r3, #1
-	strh	r3, [r2, r0]	@ movhi
-	ldr	r3, [r4, #2560]
-	add	r3, r3, #1
-	str	r3, [r4, #2560]
-.L465:
-	ldrh	r3, [r4, #218]
-	add	r3, r3, #1
-	strh	r3, [r4, #218]	@ movhi
-	ldrh	r3, [r4, #216]
-	add	r2, r4, r3, lsl #1
-	add	r3, r3, #1
-	ubfx	r3, r3, #0, #10
-	strh	r5, [r2, #220]	@ movhi
-	strh	r3, [r4, #216]	@ movhi
+	moveq	r3, r4
+	addeq	r1, r3, r0, lsl #1
+	beq	.L436
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L437:
+	ldrh	r2, [r3]
+	lsr	r2, r2, #1
+	strh	r2, [r3], #2	@ movhi
+.L436:
+	cmp	r3, r1
+	bne	.L437
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L473:
+.L441:
 	.align	2
-.L472:
+.L440:
 	.word	.LANCHOR0
-	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
 	.align	2
-	.global	FtlLowFormatEraseBlock
+	.global	ftl_memset
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlLowFormatEraseBlock, %function
-FtlLowFormatEraseBlock:
-	@ args = 0, pretend = 0, frame = 24
+	.type	ftl_memset, %function
+ftl_memset:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #24
-	uxth	r3, r0
-	mov	r10, #0
-	uxtb	r6, r1
-	str	r3, [fp, #-48]
-	mov	r5, r10
-	ldr	r3, .L516
-	mov	r4, r10
-	ldr	r2, [fp, #-48]
-	mov	r9, #20
-	mov	r8, r3
-	str	r2, [r3, #3804]
-.L475:
-	ldrh	r1, [r8, #32]
-	uxth	r2, r10
-	cmp	r1, r2
-	bhi	.L479
-	cmp	r5, #0
-	beq	.L474
-	mov	r7, #0
-	mov	r9, #20
-	mov	r2, r5
-	mov	r1, #0
-	ldr	r0, [r8, #3800]
-	bl	FlashEraseBlocks
-.L482:
-	uxth	r2, r7
-	cmp	r5, r2
-	bhi	.L484
-.L485:
-	cmp	r6, #0
-	ldrhne	r3, [r8, #104]
-	moveq	r3, #6
-	ldr	r8, .L516
-	streq	r3, [fp, #-60]
-	moveq	r3, #1
-	strne	r3, [fp, #-52]
-	lsrne	r3, r3, #2
-	mov	r10, r8
-	streq	r3, [fp, #-52]
-	strne	r3, [fp, #-60]
-	movne	r3, #1
-	strne	r3, [fp, #-56]
-	mov	r3, #0
-	streq	r6, [fp, #-56]
-	str	r3, [fp, #-44]
-.L494:
-	mov	r7, #0
-	mov	r5, r7
-.L486:
-	ldrh	r1, [r8, #32]
-	uxth	r3, r7
-	cmp	r1, r3
-	bhi	.L489
-	cmp	r5, #0
-	beq	.L474
-	ldr	r2, [fp, #-56]
-	mov	r3, #1
-	mov	r1, r5
-	ldr	r0, [r8, #3800]
-	bl	FlashProgPages
-	mov	r9, #0
-	mov	r2, #20
-.L491:
-	uxth	r3, r9
-	cmp	r5, r3
-	bhi	.L493
-	ldr	r3, [fp, #-44]
-	ldr	r2, [fp, #-60]
-	add	r7, r3, r2
-	uxth	r3, r7
-	str	r3, [fp, #-44]
-	ldr	r2, [fp, #-44]
-	ldr	r3, [fp, #-52]
-	cmp	r3, r2
-	bhi	.L494
-	mov	r7, #0
-	mov	r9, #20
-.L495:
-	uxth	r3, r7
-	cmp	r5, r3
-	bhi	.L497
-	ldr	r3, [fp, #-48]
-	adds	r6, r6, #0
-	movne	r6, #1
-	cmp	r3, #63
-	movhi	r8, r6
-	orrls	r8, r6, #1
-	cmp	r8, #0
-	beq	.L474
-	mov	r2, r5
-	ldr	r1, [fp, #-56]
-	ldr	r0, [r10, #3800]
-	bl	FlashEraseBlocks
-.L474:
-	mov	r0, r4
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L479:
-	uxth	r2, r10
-	ldr	r0, [r8, #3800]
-	mov	r3, #0
-	mul	r1, r9, r2
-	add	r2, r8, r2
-	str	r3, [r0, r1]
-	ldr	r1, [fp, #-48]
-	ldrb	r0, [r2, #60]	@ zero_extendqisi2
-	bl	V2P_block
-	cmp	r6, #0
-	mov	r7, r0
-	beq	.L476
-	bl	IsBlkInVendorPart
-	cmp	r0, #0
-	bne	.L477
-.L476:
-	mov	r0, r7
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #0
-	addne	r4, r4, #1
-	uxthne	r4, r4
-	bne	.L477
-	ldr	r1, [r8, #3800]
-	lsl	r7, r7, #10
-	ldr	r2, [r8, #3808]
-	mla	r1, r9, r5, r1
-	str	r2, [r1, #8]
-	ldrh	r2, [r8, #112]
-	str	r7, [r1, #4]
-	mul	r2, r5, r2
-	add	r5, r5, #1
-	uxth	r5, r5
-	add	r0, r2, #3
 	cmp	r2, #0
-	movlt	r2, r0
-	ldr	r0, [r8, #3812]
-	bic	r2, r2, #3
-	add	r2, r0, r2
-	str	r2, [r1, #12]
-.L477:
-	add	r10, r10, #1
-	b	.L475
-.L484:
-	mul	r2, r9, r7
-	ldr	r1, [r8, #3800]
-	add	r0, r1, r2
-	ldr	r2, [r1, r2]
-	cmn	r2, #1
-	bne	.L483
-	ldr	r0, [r0, #4]
-	add	r4, r4, #1
-	uxth	r4, r4
-	ubfx	r0, r0, #10, #16
-	bl	FtlBbmMapBadBlock
-.L483:
-	add	r7, r7, #1
-	b	.L482
-.L489:
-	uxth	r3, r7
-	mov	r2, #20
-	ldr	r0, [r8, #3800]
-	mul	r1, r2, r3
-	mov	r2, #0
-	add	r3, r8, r3
-	str	r2, [r0, r1]
-	ldr	r1, [fp, #-48]
-	ldrb	r0, [r3, #60]	@ zero_extendqisi2
-	bl	V2P_block
-	cmp	r6, #0
-	mov	r9, r0
-	beq	.L487
-	bl	IsBlkInVendorPart
-	cmp	r0, #0
-	bne	.L488
-.L487:
-	mov	r0, r9
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #0
-	bne	.L488
-	ldr	r1, [r8, #3800]
-	mov	r3, #20
-	mla	r1, r3, r5, r1
-	ldr	r3, [fp, #-44]
-	add	r9, r3, r9, lsl #10
-	ldr	r3, [r8, #3816]
-	str	r9, [r1, #4]
-	str	r3, [r1, #8]
-	ldrh	r3, [r8, #112]
-	mul	r3, r5, r3
-	add	r5, r5, #1
-	uxth	r5, r5
-	add	r0, r3, #3
-	cmp	r3, #0
-	movlt	r3, r0
-	ldr	r0, [r8, #3808]
-	bic	r3, r3, #3
-	add	r3, r0, r3
-	str	r3, [r1, #12]
-.L488:
-	add	r7, r7, #1
-	b	.L486
-.L493:
-	mul	r3, r2, r9
-	ldr	r1, [r10, #3800]
-	add	r0, r1, r3
-	ldr	r3, [r1, r3]
-	cmp	r3, #0
-	beq	.L492
-	ldr	r0, [r0, #4]
-	add	r4, r4, #1
-	str	r2, [fp, #-64]
-	uxth	r4, r4
-	ubfx	r0, r0, #10, #16
-	bl	FtlBbmMapBadBlock
-	ldr	r2, [fp, #-64]
-.L492:
-	add	r9, r9, #1
-	b	.L491
-.L497:
-	cmp	r6, #0
-	beq	.L496
-	mul	r3, r9, r7
-	ldr	r2, [r10, #3800]
-	add	r1, r2, r3
-	ldr	r3, [r2, r3]
-	cmp	r3, #0
-	bne	.L496
-	ldr	r0, [r1, #4]
-	mov	r1, #1
-	ubfx	r0, r0, #10, #16
-	bl	FtlFreeSysBlkQueueIn
-.L496:
-	add	r7, r7, #1
-	b	.L495
-.L517:
-	.align	2
-.L516:
-	.word	.LANCHOR0
-	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	mov	r4, r0
+	beq	.L443
+	bl	memset
+.L443:
+	mov	r0, r4
+	ldmfd	sp, {r4, fp, sp, pc}
+	.size	ftl_memset, .-ftl_memset
 	.align	2
-	.global	FtlFreeSysBlkQueueOut
+	.global	FtlMemInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlFreeSysBlkQueueOut, %function
-FtlFreeSysBlkQueueOut:
+	.type	FtlMemInit, %function
+FtlMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L525
-	ldr	r6, .L525+4
-.L519:
-	ldrh	r1, [r4, #218]
-	cmp	r1, #0
-	beq	.L520
-	ldrh	r3, [r4, #214]
-	sub	r1, r1, #1
-	strh	r1, [r4, #218]	@ movhi
-	add	r2, r4, r3, lsl #1
-	add	r3, r3, #1
-	ubfx	r3, r3, #0, #10
-	ldrh	r5, [r2, #220]
-	strh	r3, [r4, #214]	@ movhi
-	mov	r0, r5
-	bl	P2V_block_in_plane
-	mov	r7, r0
-	ldr	r0, [r4, #3800]
-	lsl	r3, r5, #10
-	mov	r2, #1
-	mov	r1, r2
-	str	r3, [r0, #4]
-	bl	FlashEraseBlocks
-	ldr	r2, [r4, #2328]
-	lsl	r0, r7, #1
-	ldrh	r3, [r2, r0]
-	add	r3, r3, #1
-	strh	r3, [r2, r0]	@ movhi
-	movw	r2, #65533
-	ldr	r3, [r4, #2560]
-	add	r3, r3, #1
-	str	r3, [r4, #2560]
-	sub	r3, r5, #1
-	uxth	r3, r3
-	cmp	r3, r2
-	bls	.L524
-	ldrh	r2, [r4, #218]
-	mov	r1, r5
-	mov	r0, r6
-	bl	printk
-	b	.L519
-.L520:
-	ldr	r0, .L525+8
-	bl	printk
-.L523:
-	b	.L523
-.L524:
-	mov	r0, r5
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L526:
-	.align	2
-.L525:
-	.word	.LANCHOR0
-	.word	.LC80
-	.word	.LC79
-	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
-	.align	2
-	.global	ftl_map_blk_alloc_new_blk
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_map_blk_alloc_new_blk, %function
-ftl_map_blk_alloc_new_blk:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldrh	r1, [r0, #10]
-	mov	r4, r0
-	mov	r3, #0
-	ldr	r2, [r0, #12]
-.L528:
-	uxth	r5, r3
-	cmp	r5, r1
-	bcs	.L531
-	mov	r7, r2
-	add	r3, r3, #1
-	ldrh	r6, [r7]
-	add	r2, r2, #2
-	cmp	r6, #0
-	bne	.L528
-	bl	FtlFreeSysBlkQueueOut
-	sub	r3, r0, #1
-	movw	r2, #65533
-	uxth	r3, r3
-	mov	r1, r0
-	strh	r0, [r7]	@ movhi
-	cmp	r3, r2
-	bls	.L529
-	ldr	r3, .L535
-	ldr	r0, .L535+4
-	ldrh	r2, [r3, #218]
-	bl	printk
-.L530:
-	b	.L530
-.L529:
-	ldr	r3, [r4, #28]
-	strh	r6, [r4, #2]	@ movhi
-	strh	r5, [r4]	@ movhi
-	add	r3, r3, #1
-	str	r3, [r4, #28]
-	ldrh	r3, [r4, #8]
-	add	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-.L531:
-	ldrh	r3, [r4, #10]
-	cmp	r3, r5
-	bhi	.L533
-	movw	r2, #581
-	ldr	r1, .L535+8
-	ldr	r0, .L535+12
-	bl	printk
-.L533:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L536:
-	.align	2
-.L535:
-	.word	.LANCHOR0
-	.word	.LC81
-	.word	.LANCHOR1+160
-	.word	.LC1
-	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
-	.align	2
-	.global	FlashTestBlk
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FlashTestBlk, %function
-FlashTestBlk:
-	@ args = 0, pretend = 0, frame = 84
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #84
-	uxth	r4, r0
-	cmp	r4, #11
-	movls	r4, #0
-	bls	.L537
-	ldr	r5, .L540
-	sub	r0, fp, #84
-	mov	r2, #32
-	mov	r1, #165
-	str	r0, [fp, #-92]
-	lsl	r4, r4, #10
-	str	r5, [fp, #-96]
-	bl	memset
-	ldr	r3, .L540+4
-	mov	r2, #1
-	mov	r1, r2
-	sub	r0, fp, #104
-	str	r4, [fp, #-100]
-	str	r3, [r5]
-	str	r3, [r5, #4]
-	bl	FlashEraseBlocks
-	mov	r3, #1
-	sub	r0, fp, #104
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r4, [fp, #-104]
-	mov	r2, #1
-	mov	r1, #0
-	sub	r0, fp, #104
-	adds	r4, r4, #0
-	movne	r4, #1
-	rsb	r4, r4, #0
-	bl	FlashEraseBlocks
-.L537:
-	mov	r0, r4
-	sub	sp, fp, #20
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L541:
-	.align	2
-.L540:
-	.word	ftl_temp_buf
-	.word	1515870810
-	.size	FlashTestBlk, .-FlashTestBlk
-	.align	2
-	.global	FlashGetBadBlockList
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FlashGetBadBlockList, %function
-FlashGetBadBlockList:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r5, .L549
-	mov	r4, r0
-	mov	r6, r1
-	mov	r2, #256
-	mov	r1, #255
-	bl	memset
-	ldr	r3, [r5, #3244]
-	mov	r1, r6
-	mov	r0, r4
-	blx	r3
-	uxth	r0, r0
-	cmp	r0, #50
-	bls	.L543
-	mov	r2, #256
-	mov	r1, #255
-	mov	r0, r4
-	bl	memset
-	mov	r0, #0
-.L543:
-	ldrh	r3, [r5, #14]
-	cmp	r3, #4
-	moveq	r3, r4
-	addeq	r1, r3, r0, lsl #1
-	beq	.L545
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L546:
-	ldrh	r2, [r3]
-	lsr	r2, r2, #1
-	strh	r2, [r3], #2	@ movhi
-.L545:
-	cmp	r3, r1
-	bne	.L546
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L550:
-	.align	2
-.L549:
-	.word	.LANCHOR0
-	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
-	.align	2
-	.global	ftl_memset
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_memset, %function
-ftl_memset:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	cmp	r2, #0
-	mov	r4, r0
-	beq	.L552
-	bl	memset
-.L552:
-	mov	r0, r4
-	ldmfd	sp, {r4, fp, sp, pc}
-	.size	ftl_memset, .-ftl_memset
-	.align	2
-	.global	FtlMemInit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlMemInit, %function
-FtlMemInit:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L657
+	ldr	r4, .L548
 	movw	r3, #65535
 	movw	r2, #3202
 	mov	r5, #0
-	mov	r6, #12
-	str	r3, [r4, #3824]
+	mov	r7, #12
+	str	r3, [r4, #3268]
 	mvn	r3, #0
 	strh	r3, [r4, r2]	@ movhi
 	movw	r2, #3204
@@ -4184,7 +3660,7 @@ FtlMemInit:
 	movw	r3, #3242
 	str	r5, [r4, #2544]
 	strh	r5, [r4, r3]	@ movhi
-	mov	r7, #20
+	mov	r6, #20
 	str	r5, [r4, #2528]
 	str	r5, [r4, #2516]
 	str	r5, [r4, #2512]
@@ -4196,74 +3672,84 @@ FtlMemInit:
 	str	r5, [r4, #2560]
 	str	r5, [r4, #2564]
 	str	r5, [r4, #2568]
-	str	r5, [r4, #3820]
+	str	r5, [r4, #3264]
 	str	r5, [r4, #3160]
-	str	r5, [r4, #3828]
+	str	r5, [r4, #3272]
 	str	r5, [r4, #3152]
-	str	r5, [r4, #3804]
+	str	r5, [r4, #3276]
 	bl	ftl_malloc
 	str	r0, [r4, #3188]
 	ldrh	r0, [r4, #106]
-	mul	r0, r6, r0
+	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
 	str	r0, [r4, #3196]
-	mul	r7, r7, r3
-	lsl	r8, r7, #2
+	mul	r6, r6, r3
+	lsl	r8, r6, #2
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3832]
-	mov	r0, r7
+	str	r0, [r4, #3280]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3836]
+	str	r0, [r4, #3284]
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3840]
-	mov	r0, r7
+	str	r0, [r4, #3288]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3800]
-	mov	r0, r7
+	str	r0, [r4, #3260]
+	mov	r0, r6
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
-	ldrh	r7, [r4, #110]
+	ldrh	r6, [r4, #110]
 	str	r0, [r4, #3180]
 	lsl	r3, r3, #1
-	mov	r0, r7
+	mov	r0, r6
 	add	r3, r3, #1
 	str	r3, [r4, #3184]
 	bl	ftl_malloc
-	str	r0, [r4, #3280]
-	mov	r0, r7
+	str	r0, [r4, #3292]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3844]
-	mov	r0, r7
+	str	r0, [r4, #3296]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3848]
+	str	r0, [r4, #3300]
 	ldr	r0, [r4, #3184]
-	mul	r0, r0, r7
+	mul	r0, r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #3172]
-	mov	r0, r7
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3816]
-	mov	r0, r7
+	str	r0, [r4, #3304]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3808]
+	str	r0, [r4, #3308]
 	ldr	r0, [r4, #3184]
-	mul	r0, r6, r0
+	mul	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r3, [r4, #112]
-	ldrh	r7, [r4, #32]
 	str	r0, [r4, #3168]
-	mul	r7, r7, r3
-	mov	r0, r7
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3284]
-	lsl	r0, r7, #2
-	movw	r7, #3852
+	str	r0, [r4, #3312]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3316]
+	ldrh	r0, [r4, #58]
+	lsl	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r3, [r4, #112]
-	str	r0, [r4, #3812]
+	ldrh	r6, [r4, #32]
+	str	r0, [r4, #3320]
+	mul	r6, r6, r3
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3324]
+	lsl	r0, r6, #2
+	movw	r6, #3332
+	bl	ftl_malloc
+	ldrh	r3, [r4, #112]
+	str	r0, [r4, #3328]
 	ldr	r0, [r4, #3184]
 	mul	r0, r0, r3
 	bl	ftl_malloc
@@ -4271,36 +3757,36 @@ FtlMemInit:
 	ldrh	r0, [r4, #42]
 	lsl	r0, r0, #1
 	uxth	r0, r0
-	strh	r0, [r4, r7]	@ movhi
+	strh	r0, [r4, r6]	@ movhi
 	bl	ftl_malloc
-	str	r0, [r4, #3856]
-	ldrh	r0, [r4, r7]
-	ldr	r3, .L657+4
+	str	r0, [r4, #3336]
+	ldrh	r0, [r4, r6]
+	ldr	r3, .L548+4
 	add	r0, r0, #544
 	add	r0, r0, #3
 	lsr	r0, r0, #9
-	strh	r0, [r4, r7]	@ movhi
+	strh	r0, [r4, r6]	@ movhi
 	and	r0, r3, r0, lsl #9
 	bl	ftl_malloc
-	ldrh	r7, [r4, #42]
-	str	r0, [r4, #3860]
+	ldrh	r6, [r4, #42]
+	str	r0, [r4, #3340]
 	add	r0, r0, #32
 	str	r0, [r4, #2328]
-	lsl	r7, r7, #1
-	mov	r0, r7
+	lsl	r6, r6, #1
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3864]
-	mov	r0, r7
+	str	r0, [r4, #3344]
+	mov	r0, r6
 	bl	ftl_malloc
-	ldr	r7, [r4, #128]
+	ldr	r6, [r4, #128]
 	str	r0, [r4, #2324]
-	lsl	r7, r7, #1
-	mov	r0, r7
+	lsl	r6, r6, #1
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3868]
-	mov	r0, r7
+	str	r0, [r4, #3348]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3872]
+	str	r0, [r4, #3352]
 	ldrh	r0, [r4, #42]
 	lsr	r0, r0, #3
 	add	r0, r0, #4
@@ -4313,37 +3799,37 @@ FtlMemInit:
 	ldrh	r0, [r4, #120]
 	lsl	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #3876]
+	str	r0, [r4, #3356]
 	ldrh	r0, [r4, #120]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3880]
+	str	r0, [r4, #3360]
 	ldrh	r0, [r4, #122]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r2, [r4, #122]
 	mov	r1, r5
-	str	r0, [r4, #3884]
-	movw	r5, #3900
+	str	r0, [r4, #3364]
+	movw	r5, #3380
 	lsl	r2, r2, #2
 	bl	ftl_memset
 	ldrh	r0, [r4, #136]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3888]
+	str	r0, [r4, #3368]
 	ldr	r0, [r4, #128]
 	lsl	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3892]
+	str	r0, [r4, #3372]
 	ldrh	r0, [r4, #138]
-	mul	r0, r6, r0
+	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #138]
 	str	r0, [r4, #2492]
 	ldrh	r0, [r4, #110]
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	str	r0, [r4, #3896]
+	str	r0, [r4, #3376]
 	ldrh	r0, [r4, #42]
 	lsl	r0, r0, #3
 	bl	ftl_malloc
@@ -4363,141 +3849,141 @@ FtlMemInit:
 	str	r0, [r4, #180]
 	lsl	r2, r2, #2
 	mov	r1, r2
-.L557:
+.L448:
 	cmp	r3, lr
-	bcc	.L558
-	ldr	r2, .L657+8
+	bcc	.L449
+	ldr	r2, .L548+8
 	mov	r1, #0
 	add	r3, r2, r3, lsl #2
 	add	r2, r2, #56
 	add	r3, r3, #24
-.L559:
+.L450:
 	cmp	r2, r3
-	bne	.L560
-	ldr	r3, [r4, #3868]
+	bne	.L451
+	ldr	r3, [r4, #3348]
 	cmp	r3, #0
-	bne	.L561
-.L563:
-	ldr	r1, .L657+12
-	ldr	r0, .L657+16
-	bl	printk
+	bne	.L452
+.L454:
+	ldr	r1, .L548+12
+	ldr	r0, .L548+16
+	bl	sftl_printk
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L558:
+.L449:
 	ldr	r0, [r4, #180]
 	add	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [ip, #4]!
-	b	.L557
-.L560:
+	b	.L448
+.L451:
 	str	r1, [r3, #4]!
-	b	.L559
-.L561:
-	ldr	r3, [r4, #3872]
+	b	.L450
+.L452:
+	ldr	r3, [r4, #3352]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3888]
+	beq	.L454
+	ldr	r3, [r4, #3368]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3892]
+	beq	.L454
+	ldr	r3, [r4, #3372]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #2492]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3896]
+	beq	.L454
+	ldr	r3, [r4, #3376]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #2316]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #180]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #2324]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3832]
+	beq	.L454
+	ldr	r3, [r4, #3280]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3840]
+	beq	.L454
+	ldr	r3, [r4, #3288]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3800]
+	beq	.L454
+	ldr	r3, [r4, #3260]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3836]
+	beq	.L454
+	ldr	r3, [r4, #3284]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3280]
+	beq	.L454
+	ldr	r3, [r4, #3292]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3844]
+	beq	.L454
+	ldr	r3, [r4, #3296]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3848]
+	beq	.L454
+	ldr	r3, [r4, #3300]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #3172]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3816]
+	beq	.L454
+	ldr	r3, [r4, #3304]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3808]
+	beq	.L454
+	ldr	r3, [r4, #3308]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #3168]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3284]
+	beq	.L454
+	ldr	r3, [r4, #3324]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3812]
+	beq	.L454
+	ldr	r3, [r4, #3328]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #2328]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, [r4, #3856]
+	beq	.L454
+	ldr	r3, [r4, #3336]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	ldr	r3, [r4, #148]
 	cmp	r3, #0
-	beq	.L563
-	ldr	r3, .L657
-	ldr	r2, [r3, #3876]
+	beq	.L454
+	ldr	r3, .L548
+	ldr	r2, [r3, #3356]
 	cmp	r2, #0
-	beq	.L563
-	ldr	r2, [r3, #3880]
+	beq	.L454
+	ldr	r2, [r3, #3360]
 	cmp	r2, #0
-	beq	.L563
-	ldr	r3, [r3, #3884]
+	beq	.L454
+	ldr	r3, [r3, #3364]
 	cmp	r3, #0
-	beq	.L563
+	beq	.L454
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L658:
+.L549:
 	.align	2
-.L657:
+.L548:
 	.word	.LANCHOR0
 	.word	33553920
 	.word	.LANCHOR0+152
-	.word	.LANCHOR1+186
-	.word	.LC82
+	.word	.LANCHOR1+173
+	.word	.LC85
 	.size	FtlMemInit, .-FtlMemInit
 	.align	2
 	.global	FtlBbt2Bitmap
@@ -4511,33 +3997,33 @@ FtlBbt2Bitmap:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r6, .L665
-	movw	r3, #3900
+	ldr	r6, .L556
+	movw	r3, #3380
 	mov	r4, r0
-	ldr	r8, .L665+4
+	ldr	r8, .L556+4
 	sub	r5, r4, #2
 	ldrh	r2, [r6, r3]
 	add	r4, r4, #1020
-	ldr	r9, .L665+8
+	ldr	r9, .L556+8
 	mov	r7, r1
 	add	r4, r4, #2
 	mov	r1, #0
 	mov	r0, r7
 	lsl	r2, r2, #2
 	bl	ftl_memset
-.L662:
+.L553:
 	ldrh	r3, [r5, #2]
 	movw	r2, #65535
 	cmp	r3, r2
 	ldmfdeq	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
 	ldrh	r2, [r6, #98]
 	cmp	r2, r3
-	bhi	.L661
+	bhi	.L552
 	mov	r2, #74
 	mov	r1, r8
 	mov	r0, r9
-	bl	printk
-.L661:
+	bl	sftl_printk
+.L552:
 	ldrh	r3, [r5, #2]!
 	mov	r0, #1
 	cmp	r4, r5
@@ -4546,1658 +4032,2529 @@ FtlBbt2Bitmap:
 	ldr	r2, [r7, r1, lsl #2]
 	orr	r3, r2, r0, lsl r3
 	str	r3, [r7, r1, lsl #2]
-	bne	.L662
+	bne	.L553
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L666:
+.L557:
 	.align	2
-.L665:
+.L556:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+197
+	.word	.LANCHOR1+184
 	.word	.LC1
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	2
-	.global	load_l2p_region
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	load_l2p_region, %function
-load_l2p_region:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L673
-	uxth	r6, r0
-	uxth	r8, r1
-	ldrh	r3, [r4, #136]
-	cmp	r3, r6
-	bcs	.L668
-	mov	r2, #492
-	ldr	r1, .L673+4
-	ldr	r0, .L673+8
-	bl	printk
-.L668:
-	ldr	r3, [r4, #3888]
-	mov	r5, #12
-	ldr	r7, [r3, r6, lsl #2]
-	cmp	r7, #0
-	bne	.L669
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	ldrh	r2, [r4, #110]
-	mov	r1, #255
-	add	r3, r3, r5
-	ldr	r0, [r3, #8]
-	bl	ftl_memset
-	ldr	r3, [r4, #2492]
-	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r4, #2492]
-	add	r5, r3, r5
-	str	r7, [r5, #4]
-.L670:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L669:
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	mov	r2, #1
-	ldr	r0, .L673+12
-	mov	r1, r2
-	str	r7, [r4, #3264]
-	add	r3, r3, r5
-	ldr	r3, [r3, #8]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	str	r3, [r4, #3272]
-	bl	FlashReadPages
-	ldr	r8, [r4, #3272]
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L671
-	mov	r2, r7
-	mov	r1, r6
-	ldr	r0, .L673+16
-	bl	printk
-	mov	r3, #4
-	ldr	r1, [r4, #3272]
-	mov	r2, r3
-	ldr	r0, .L673+20
-	bl	rknand_print_hex
-	ldrh	r3, [r4, #136]
-	mov	r2, #4
-	ldr	r1, [r4, #3888]
-	ldr	r0, .L673+24
-	bl	rknand_print_hex
-.L671:
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L672
-	movw	r2, #513
-	ldr	r1, .L673+4
-	ldr	r0, .L673+8
-	bl	printk
-.L672:
-	ldr	r3, [r4, #2492]
-	mov	r1, #0
-	add	r2, r3, r5
-	str	r1, [r2, #4]
-	strh	r6, [r3, r5]	@ movhi
-	b	.L670
-.L674:
-	.align	2
-.L673:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+211
-	.word	.LC1
-	.word	.LANCHOR0+3260
-	.word	.LC83
-	.word	.LC84
-	.word	.LC85
-	.size	load_l2p_region, .-load_l2p_region
-	.align	2
 	.global	ftl_free_no_use_map_blk
 	.syntax unified
 	.arm
 	.fpu softvfp
 	.type	ftl_free_no_use_map_blk, %function
 ftl_free_no_use_map_blk:
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 4
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #8
+	sub	sp, sp, #4
 	mov	r1, #0
 	ldrh	r2, [r0, #10]
 	mov	r4, r0
 	ldr	r5, [r0, #20]
-	ldr	r9, [r0, #12]
+	ldr	r7, [r0, #12]
 	ldr	r6, [r0, #24]
 	lsl	r2, r2, #1
 	mov	r0, r5
 	bl	ftl_memset
 	mov	r2, #0
-.L676:
+.L559:
 	ldrh	r1, [r4, #6]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L680
-	ldrh	r2, [r5]
-	mov	r7, #0
-	ldr	ip, .L689
-	mov	r10, r7
-.L681:
-	ldrh	r1, [r4, #10]
-	uxth	r3, r7
-	cmp	r1, r3
-	bhi	.L685
-	mov	r0, r10
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L680:
+	bhi	.L563
+	ldr	r3, .L578
+	mov	r6, #0
+	mov	r8, r6
+	mov	r10, r6
+	ldrh	r2, [r3, #104]
+	ldrh	r3, [r4]
+	lsl	r3, r3, #1
+	strh	r2, [r5, r3]	@ movhi
+	ldrh	r9, [r5]
+.L564:
+	ldrh	r3, [r4, #10]
+	uxth	r1, r6
+	cmp	r3, r1
+	bhi	.L568
+	mov	r0, r8
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L563:
 	uxth	r3, r2
 	mov	r1, #0
 	ldr	r0, [r6, r3, lsl #2]
 	ubfx	r0, r0, #10, #16
-.L677:
+.L560:
 	ldrh	ip, [r4, #10]
 	uxth	r3, r1
 	cmp	ip, r3
 	addls	r2, r2, #1
-	bls	.L676
-.L679:
+	bls	.L559
+.L562:
 	uxth	r3, r1
 	add	r1, r1, #1
 	lsl	r3, r3, #1
-	ldrh	ip, [r9, r3]
-	cmp	ip, r0
-	ldrheq	ip, [r5, r3]
-	addeq	ip, ip, #1
-	strheq	ip, [r5, r3]	@ movhi
-	b	.L677
-.L685:
-	ldrh	r1, [r4]
-	uxth	r6, r7
-	cmp	r1, r3
-	bne	.L682
-	ldrh	r0, [r4, #2]
-	ldrh	r1, [ip, #104]
-	cmp	r0, r1
-	lslcc	r0, r6, #1
-	strhcc	r1, [r5, r0]	@ movhi
-.L682:
-	lsl	r6, r6, #1
-	ldrh	r8, [r5, r6]
-	cmp	r2, r8
-	movhi	r10, r3
-	movhi	r2, r8
-	cmp	r8, #0
-	bne	.L684
-	ldrh	r0, [r9, r6]
+	ldrh	ip, [r7, r3]
+	adds	lr, ip, #0
+	movne	lr, #1
+	cmp	r0, ip
+	movne	lr, #0
+	cmp	lr, #0
+	ldrhne	ip, [r5, r3]
+	addne	ip, ip, #1
+	strhne	ip, [r5, r3]	@ movhi
+	b	.L560
+.L568:
+	uxth	r3, r6
+	lsl	r3, r3, #1
+	ldrh	r2, [r5, r3]
+	cmp	r9, r2
+	bls	.L565
+	ldrh	r0, [r7, r3]
+	add	ip, r7, r3
+	cmp	r0, #0
+	bne	.L566
+.L567:
+	add	r6, r6, #1
+	b	.L564
+.L565:
+	cmp	r2, #0
+	bne	.L567
+	ldrh	r0, [r7, r3]
+	add	ip, r7, r3
 	cmp	r0, #0
-	beq	.L684
+	beq	.L567
+.L569:
 	mov	r1, #1
-	str	ip, [fp, #-48]
-	str	r2, [fp, #-44]
+	str	ip, [fp, #-44]
 	bl	FtlFreeSysBlkQueueIn
-	strh	r8, [r9, r6]	@ movhi
-	ldr	ip, [fp, #-48]
+	ldr	ip, [fp, #-44]
+	strh	r10, [ip]	@ movhi
 	ldrh	r3, [r4, #8]
-	ldr	r2, [fp, #-44]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L684:
-	add	r7, r7, #1
-	b	.L681
-.L690:
+	b	.L567
+.L566:
+	subs	r9, r2, #0
+	mov	r8, r1
+	beq	.L569
+	b	.L567
+.L579:
 	.align	2
-.L689:
+.L578:
 	.word	.LANCHOR0
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
-	.global	Ftl_write_map_blk_to_last_page
+	.global	FtlL2PDataInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	Ftl_write_map_blk_to_last_page, %function
-Ftl_write_map_blk_to_last_page:
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldrh	r3, [r0]
-	movw	r2, #65535
-	mov	r4, r0
-	ldr	r5, [r0, #12]
-	cmp	r3, r2
-	bne	.L692
-	ldrh	r3, [r0, #8]
-	cmp	r3, #0
-	beq	.L693
-	movw	r2, #641
-	ldr	r1, .L701
-	ldr	r0, .L701+4
-	bl	printk
-.L693:
-	ldrh	r3, [r4, #8]
-	add	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	mov	r3, #0
-	strh	r0, [r5]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-	strh	r3, [r4]	@ movhi
-	ldr	r3, [r4, #28]
-	add	r3, r3, #1
-	str	r3, [r4, #28]
-.L694:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L692:
-	lsl	r3, r3, #1
-	ldr	r2, [r0, #28]
-	ldr	r6, [r0, #24]
+	ldr	r4, .L583
+	mov	r1, #0
+	mvn	r5, #0
+	ldr	r2, [r4, #128]
+	ldr	r0, [r4, #3352]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r3, [r4, #110]
 	mov	r1, #255
-	ldrh	r7, [r5, r3]
-	ldrh	r3, [r0, #2]
-	ldr	r5, .L701+8
-	orr	r3, r3, r7, lsl #10
-	str	r3, [r5, #3264]
-	ldr	r3, [r5, #3280]
-	str	r3, [r5, #3268]
-	ldr	r3, [r5, #3284]
-	str	r3, [r5, #3272]
-	str	r2, [r3, #4]
-	ldr	r2, .L701+12
-	strh	r2, [r3, #8]	@ movhi
-	ldrh	r2, [r0, #4]
-	strh	r7, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
-	ldrh	r2, [r5, #104]
-	ldr	r0, [r5, #3280]
-	lsl	r2, r2, #3
+	ldrh	r2, [r4, #138]
+	ldr	r0, [r4, #3376]
+	mul	r2, r2, r3
 	bl	ftl_memset
 	mov	r2, #0
-	mov	r3, r2
-.L695:
-	ldrh	r0, [r4, #6]
+	mov	r3, r4
+	mov	lr, #12
+	mov	r4, r2
+.L581:
+	ldrh	r0, [r3, #138]
 	uxth	r1, r2
+	add	ip, r2, #1
 	cmp	r0, r1
-	bhi	.L697
-	mov	r2, #1
-	mov	r3, #0
-	mov	r1, r2
-	ldr	r0, .L701+16
-	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
-	mov	r0, r4
-	add	r3, r3, #1
-	strh	r3, [r4, #2]	@ movhi
-	bl	ftl_map_blk_gc
-	b	.L694
-.L697:
-	uxth	r1, r2
-	ldr	r0, [r6, r1, lsl #2]
-	cmp	r7, r0, lsr #10
-	bne	.L696
-	ldr	r0, [r5, #3280]
-	add	r3, r3, #1
-	uxth	r3, r3
-	str	r1, [r0, r3, lsl #3]
-	ldr	r0, [r6, r1, lsl #2]
-	ldr	r1, [r5, #3280]
-	add	r1, r1, r3, lsl #3
-	str	r0, [r1, #4]
-.L696:
-	add	r2, r2, #1
-	b	.L695
-.L702:
+	bhi	.L582
+	ldr	r2, .L583+4
+	mvn	r1, #0
+	movw	r0, #3384
+	strh	r1, [r3, r0]	@ movhi
+	strh	r1, [r2, #2]	@ movhi
+	ldr	r1, [r3, #128]
+	strh	r1, [r2, #10]	@ movhi
+	ldr	r1, .L583+8
+	strh	r1, [r2, #4]	@ movhi
+	movw	r1, #3428
+	ldrh	r1, [r3, r1]
+	strh	r1, [r2, #8]	@ movhi
+	ldrh	r1, [r3, #136]
+	strh	r1, [r2, #6]	@ movhi
+	ldr	r2, [r3, #3348]
+	str	r2, [r3, #3396]
+	ldr	r2, [r3, #3372]
+	str	r2, [r3, #3400]
+	ldr	r2, [r3, #3352]
+	str	r2, [r3, #3404]
+	ldr	r2, [r3, #3368]
+	str	r2, [r3, #3408]
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L582:
+	uxth	r2, r2
+	ldr	r1, [r3, #2492]
+	mul	r0, lr, r2
+	add	r6, r1, r0
+	str	r4, [r6, #4]
+	strh	r5, [r1, r0]	@ movhi
+	ldr	r1, [r3, #2492]
+	add	r1, r1, r0
+	ldrh	r0, [r3, #110]
+	mul	r2, r2, r0
+	ldr	r0, [r3, #3376]
+	bic	r2, r2, #3
+	add	r2, r0, r2
+	str	r2, [r1, #8]
+	mov	r2, ip
+	b	.L581
+.L584:
 	.align	2
-.L701:
-	.word	.LANCHOR1+227
-	.word	.LC1
+.L583:
 	.word	.LANCHOR0
-	.word	-1291
-	.word	.LANCHOR0+3260
-	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.word	.LANCHOR0+3384
+	.word	-3902
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
-	.global	FtlMapWritePage
+	.global	FtlVariablesInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
+	push	{r4, r5, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r4, .L586
+	mvn	r3, #0
+	movw	r2, #3430
+	mov	r5, #0
+	strh	r3, [r4, r2]	@ movhi
+	mov	r1, r5
+	ldrh	r2, [r4, #120]
+	ldr	r0, [r4, #148]
+	str	r3, [r4, #3440]
+	str	r5, [r4, #3432]
+	lsl	r2, r2, #1
+	str	r5, [r4, #3436]
+	strh	r5, [r4, #144]	@ movhi
+	bl	ftl_memset
+	ldrh	r2, [r4, #42]
+	mov	r1, r5
+	ldr	r0, [r4, #2328]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r4, #42]
+	mov	r1, r5
+	ldr	r0, [r4, #3336]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	add	r0, r4, #2256
+	mov	r1, #48
+	add	r0, r0, #12
+	bl	__memzero
+	add	r0, r4, #2624
+	mov	r1, #512
+	add	r0, r0, #12
+	bl	__memzero
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	mov	r0, r5
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L587:
+	.align	2
+.L586:
+	.word	.LANCHOR0
+	.size	FtlVariablesInit, .-FtlVariablesInit
+	.align	2
+	.global	SupperBlkListInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r7, .L722
-	mov	r4, r0
-	mov	r8, r1
-	mov	r9, r2
-	mov	r6, #0
-	mov	r5, r7
-.L704:
-	ldr	r3, [r7, #2524]
+	sub	sp, sp, #16
+	mov	r5, #0
+	ldr	r4, .L599
+	mov	r1, #0
+	mov	r8, r5
+	mov	r6, r5
+	ldrh	r2, [r4, #42]
+	ldr	r0, [r4, #2316]
+	lsl	r2, r2, #3
+	bl	ftl_memset
+	add	r3, r4, #2336
+	movw	r2, #2344
+	str	r5, [r4, #2340]
+	str	r5, [r4, #2320]
+	str	r5, [r4, #2332]
+	strh	r5, [r3]	@ movhi
+	strh	r5, [r4, r2]	@ movhi
+	str	r3, [fp, #-48]
+.L589:
+	ldrh	r3, [r4, #40]
+	uxth	r10, r5
+	cmp	r10, r3
+	bcs	.L596
+	ldrh	r3, [r4, #102]
+	mov	r9, r10
+	ldrh	ip, [r4, #32]
+	str	r3, [fp, #-44]
+	mov	r3, #0
+	mov	r7, r3
+	b	.L597
+.L591:
+	ldr	r2, .L599+4
+	mov	r1, r9
+	str	ip, [fp, #-56]
+	str	r3, [fp, #-52]
+	ldrb	r0, [r2, r3]	@ zero_extendqisi2
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	ldr	r3, [fp, #-52]
+	ldreq	r2, [fp, #-44]
+	ldr	ip, [fp, #-56]
 	add	r3, r3, #1
-	str	r3, [r7, #2524]
-	ldrh	r3, [r7, #104]
-	ldrh	r2, [r4, #2]
-	sub	r3, r3, #1
-	cmp	r2, r3
-	bge	.L705
-	ldrh	r2, [r4]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L706
-.L705:
-	mov	r0, r4
-	bl	Ftl_write_map_blk_to_last_page
-.L706:
-	ldrh	r3, [r4]
-	ldr	r2, [r4, #12]
-	lsl	r3, r3, #1
+	addeq	r7, r7, r2
+	uxtheq	r7, r7
+.L597:
+	uxth	r1, r3
+	cmp	ip, r1
+	bhi	.L591
+	cmp	r7, #0
+	beq	.L592
+	mov	r1, r7
+	mov	r0, #32768
+	bl	__divsi3
+	uxth	r7, r0
+.L593:
+	ldr	r3, [r4, #2316]
+	add	r3, r3, r9, lsl #3
+	strh	r7, [r3, #4]	@ movhi
+	ldr	r3, .L599+8
+	ldrh	r1, [r3]
+	cmp	r1, r10
+	beq	.L594
+	ldrh	r1, [r3, #48]
+	cmp	r1, r10
+	beq	.L594
+	ldrh	r3, [r3, #96]
+	cmp	r3, r10
+	beq	.L594
+	ldr	r2, [r4, #2324]
+	lsl	r3, r9, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	bne	.L707
-	movw	r2, #699
-	ldr	r1, .L722+4
-	ldr	r0, .L722+8
-	bl	printk
-.L707:
-	ldrh	r2, [r4]
-	ldrh	r3, [r4, #10]
-	cmp	r2, r3
-	bcc	.L708
-	mov	r2, #700
-	ldr	r1, .L722+4
-	ldr	r0, .L722+8
-	bl	printk
-.L708:
-	ldrh	r3, [r4]
-	mov	r1, #16
-	ldr	r2, [r4, #12]
-	ldr	r0, [r5, #3284]
-	lsl	r3, r3, #1
-	ldrh	r10, [r2, r3]
-	ldrh	r3, [r4, #2]
-	str	r0, [r5, #3272]
-	str	r9, [r5, #3268]
-	orr	r3, r3, r10, lsl #10
-	str	r3, [r5, #3264]
-	bl	__memzero
-	ldr	r3, [r5, #3272]
-	ldr	r2, [r4, #28]
-	ldr	r0, .L722+12
-	strh	r8, [r3, #8]	@ movhi
-	str	r2, [r3, #4]
-	ldrh	r2, [r4, #4]
-	strh	r10, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
-	mov	r3, #1
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
-	add	r3, r3, #1
-	uxth	r3, r3
-	strh	r3, [r4, #2]	@ movhi
-	ldr	r2, [r5, #3260]
-	cmn	r2, #1
-	bne	.L709
-	ldr	r1, [r5, #3264]
+	bne	.L595
+	add	r8, r8, #1
+	mov	r0, r9
+	uxth	r8, r8
+	bl	INSERT_FREE_LIST
+.L594:
+	add	r5, r5, #1
+	b	.L589
+.L592:
+	ldr	r1, [r4, #2324]
+	lsl	r3, r9, #1
+	mvn	r0, #0
+	strh	r0, [r1, r3]	@ movhi
+	b	.L593
+.L595:
 	add	r6, r6, #1
-	ldr	r0, .L722+16
+	mov	r0, r9
 	uxth	r6, r6
-	bl	printk
-	ldrh	r3, [r4, #2]
-	cmp	r3, #2
-	ldrhls	r3, [r5, #104]
-	subls	r3, r3, #1
-	strhls	r3, [r4, #2]	@ movhi
-	cmp	r6, #3
-	bls	.L711
-	mov	r2, r6
-	ldr	r1, [r5, #3264]
-	ldr	r0, .L722+20
-	bl	printk
-.L712:
-	b	.L712
-.L711:
-	ldr	r3, [r4, #32]
-	cmp	r3, #0
-	beq	.L704
-.L721:
-	b	.L721
-.L709:
-	cmp	r3, #1
-	beq	.L704
-	ldr	r2, [r5, #3264]
+	bl	INSERT_DATA_LIST
+	b	.L594
+.L596:
+	ldr	r2, [fp, #-48]
+	strh	r6, [r2]	@ movhi
+	add	r6, r6, r8
+	cmp	r6, r3
+	movw	r2, #2344
+	strh	r8, [r4, r2]	@ movhi
+	ble	.L598
+	movw	r2, #2170
+	ldr	r1, .L599+12
+	ldr	r0, .L599+16
+	bl	sftl_printk
+.L598:
 	mov	r0, #0
-	ldr	r3, [r4, #24]
-	str	r2, [r3, r8, lsl #2]
+	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L723:
+.L600:
 	.align	2
-.L722:
+.L599:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+258
+	.word	.LANCHOR0+60
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR1+198
 	.word	.LC1
-	.word	.LANCHOR0+3260
-	.word	.LC86
-	.word	.LC87
-	.size	FtlMapWritePage, .-FtlMapWritePage
+	.size	SupperBlkListInit, .-SupperBlkListInit
 	.align	2
-	.global	ftl_map_blk_gc
+	.global	FtlGcPageVarInit
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_map_blk_gc, %function
-ftl_map_blk_gc:
-	@ args = 0, pretend = 0, frame = 8
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r4, .L602
+	mov	r3, #0
+	movw	r2, #3192
+	mov	r1, #255
+	strh	r3, [r4, r2]	@ movhi
+	add	r2, r4, #3200
+	strh	r3, [r2]	@ movhi
+	ldrh	r2, [r4, #106]
+	ldr	r0, [r4, #3188]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r3, [r4, #106]
+	mov	r2, #12
+	mov	r1, #255
+	ldr	r0, [r4, #3196]
+	mul	r2, r2, r3
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	ldmfd	sp, {r4, fp, sp, pc}
+.L603:
+	.align	2
+.L602:
+	.word	.LANCHOR0
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	2
+	.global	ftl_memcpy
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	bl	memcpy
+	ldmfd	sp, {fp, sp, pc}
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	2
+	.global	FlashReadPages
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FlashReadPages, %function
+FlashReadPages:
+	@ args = 0, pretend = 0, frame = 12
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #8
+	sub	sp, sp, #12
+	mov	r7, #0
+	ldr	r5, .L632
+	mov	r8, r1
+	ldr	r9, .L632+4
 	mov	r4, r0
-	ldr	r6, [r0, #12]
-	ldr	r9, [r0, #24]
-	bl	ftl_free_no_use_map_blk
-	ldrh	r3, [r4, #10]
-	ldrh	r2, [r4, #8]
-	ldr	r5, .L736
-	sub	r3, r3, #4
-	cmp	r2, r3
-	blt	.L725
-	uxth	r0, r0
-	lsl	r0, r0, #1
-	ldrh	r8, [r6, r0]
-	cmp	r8, #0
-	beq	.L725
-	ldr	r3, [r4, #32]
+	ldr	r10, .L632+8
+	ldrh	r3, [r5, #12]
+	str	r3, [fp, #-52]
+.L606:
+	cmp	r7, r8
+	bne	.L616
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L616:
+	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	bne	.L725
-	mov	r2, #1
-	str	r2, [r4, #32]
-	strh	r3, [r6, r0]	@ movhi
-	ldrh	r3, [r4, #8]
-	ldrh	r2, [r4, #2]
-	sub	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L726
+	beq	.L607
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	bne	.L608
+.L607:
+	mov	r2, #96
+	mov	r1, r9
+	mov	r0, r10
+	bl	sftl_printk
+.L608:
+	sub	r2, fp, #48
+	sub	r1, fp, #44
 	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L726:
-	ldr	r10, .L736+4
+	bl	l2p_addr_tran
+	ldr	r6, [r4, #8]
+	ldr	r3, [r4, #12]
+	ldr	ip, [r5, #3256]
+	tst	r6, #63
+	ldr	r1, [fp, #-44]
+	ldrne	r6, [r5, #3312]
+	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
+	mov	r2, r6
+	blx	ip
+	str	r0, [r4]
+	ldrh	r3, [r5, #14]
+	cmp	r3, #4
+	bne	.L611
+	ldr	r0, [fp, #-52]
+	add	r2, r6, #2048
+	ldr	r3, [r4, #12]
+	ldr	r1, [fp, #-44]
+	ldr	ip, [r5, #3256]
+	add	r3, r3, #8
+	add	r1, r0, r1
+	ldrb	r0, [fp, #-48]	@ zero_extendqisi2
+	blx	ip
+	cmn	r0, #1
+	beq	.L612
+	ldr	r3, [r4, #12]
+	ldr	r2, [r3, #12]
+	cmn	r2, #1
+	bne	.L613
+	ldr	r2, [r3, #8]
+	cmn	r2, #1
+	bne	.L613
+	ldr	r3, [r3]
+	cmn	r3, #1
+	beq	.L613
+.L612:
+	mvn	r3, #0
+	str	r3, [r4]
+.L613:
+	ldr	r3, [r4]
+	sub	r0, r0, #256
+	clz	r0, r0
+	lsr	r0, r0, #5
+	cmn	r3, #1
+	moveq	r0, #0
+	cmp	r0, #0
+	movne	r3, #256
+	strne	r3, [r4]
+.L611:
+	ldr	r3, [r5, #3312]
+	cmp	r6, r3
+	bne	.L615
+	ldr	r0, [r4, #8]
+	cmp	r6, r0
+	beq	.L615
+	ldrh	r2, [r5, #58]
+	mov	r1, r6
+	lsl	r2, r2, #9
+	bl	ftl_memcpy
+.L615:
+	add	r7, r7, #1
+	add	r4, r4, #20
+	b	.L606
+.L633:
+	.align	2
+.L632:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+216
+	.word	.LC1
+	.size	FlashReadPages, .-FlashReadPages
+	.align	2
+	.global	FtlLoadFactoryBbt
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r4, .L644
 	mov	r6, #0
-.L727:
-	ldrh	r2, [r4, #6]
-	uxth	r3, r6
-	cmp	r2, r3
-	bhi	.L731
-	mov	r1, #1
-	mov	r0, r8
-	bl	FtlFreeSysBlkQueueIn
-	mov	r3, #0
-	str	r3, [r4, #32]
-.L725:
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L732
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L732:
+	mvn	r9, #0
+	ldr	r10, .L644+4
+	ldr	r3, [r4, #3292]
+	add	r7, r4, #162
+	ldr	r8, [r4, #3324]
+	str	r3, [r4, #3452]
+	str	r8, [r4, #3456]
+.L635:
+	ldrh	r3, [r4, #54]
+	cmp	r6, r3
+	bcc	.L640
 	mov	r0, #0
-	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L731:
-	uxth	r7, r6
-	ldr	r2, [r9, r7, lsl #2]
-	cmp	r8, r2, lsr #10
-	bne	.L728
-	ldr	ip, [r5, #3284]
-	ldr	r2, [r5, #3844]
-	ldr	r0, .L736+8
-	str	ip, [r5, #3272]
-	str	r2, [r5, #3268]
-	ldr	r2, [r9, r7, lsl #2]
-	str	r3, [fp, #-48]
-	str	ip, [fp, #-44]
-	str	r2, [r5, #3264]
+.L640:
+	ldrh	r5, [r4, #98]
+	strh	r9, [r7, #2]!	@ movhi
+.L637:
+	ldrh	r3, [r4, #98]
+	sub	r5, r5, #1
+	uxth	r5, r5
+	sub	r2, r3, #16
+	cmp	r5, r2
+	ble	.L638
+	mla	r3, r6, r3, r5
 	mov	r2, #1
 	mov	r1, r2
+	mov	r0, r10
+	lsl	r3, r3, #10
+	str	r3, [r4, #3448]
 	bl	FlashReadPages
-	ldr	ip, [fp, #-44]
-	ldr	r3, [fp, #-48]
-	ldrh	r2, [ip, #8]
-	cmp	r2, r3
-	beq	.L729
-	movw	r2, #613
-	mov	r1, r10
-	ldr	r0, .L736+12
-	bl	printk
-.L729:
-	ldr	r3, [r5, #3260]
+	ldr	r3, [r4, #3444]
 	cmn	r3, #1
-	moveq	r3, #0
-	streq	r3, [r9, r7, lsl #2]
-	beq	.L728
-	ldr	r2, [r5, #3268]
-	mov	r1, r7
-	mov	r0, r4
-	bl	FtlMapWritePage
-.L728:
+	beq	.L637
+	ldrh	r2, [r8]
+	movw	r3, #61664
+	cmp	r2, r3
+	bne	.L637
+	strh	r5, [r7]	@ movhi
+.L638:
 	add	r6, r6, #1
-	b	.L727
-.L737:
+	b	.L635
+.L645:
 	.align	2
-.L736:
+.L644:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+274
-	.word	.LANCHOR0+3260
-	.word	.LC1
-	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.word	.LANCHOR0+3444
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
-	.global	flush_l2p_region
+	.global	FtlGetLastWrittenPage
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	flush_l2p_region, %function
-flush_l2p_region:
-	@ args = 0, pretend = 0, frame = 0
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
+	@ args = 0, pretend = 0, frame = 84
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r5, .L739
-	uxth	r0, r0
-	mov	r4, #12
-	mul	r4, r4, r0
-	ldr	r3, [r5, #2492]
-	add	r0, r5, #3904
-	add	r2, r3, r4
-	ldrh	r1, [r3, r4]
-	ldr	r2, [r2, #8]
-	bl	FtlMapWritePage
-	ldr	r0, [r5, #2492]
-	add	r4, r0, r4
-	mov	r0, #0
-	ldr	r3, [r4, #4]
-	bic	r3, r3, #-2147483648
-	str	r3, [r4, #4]
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L740:
+	sub	sp, sp, #84
+	cmp	r1, #1
+	ldr	r3, .L657
+	lsl	r6, r0, #10
+	mov	r2, r1
+	mov	r7, r1
+	sub	r0, fp, #116
+	ldrheq	r5, [r3, #104]
+	mov	r1, #1
+	ldrhne	r5, [r3, #102]
+	ldr	r3, [r3, #3316]
+	sub	r5, r5, #1
+	sxth	r5, r5
+	str	r3, [fp, #-108]
+	sub	r3, fp, #96
+	str	r3, [fp, #-104]
+	orr	r3, r5, r6
+	str	r3, [fp, #-112]
+	bl	FlashReadPages
+	ldr	r3, [fp, #-96]
+	cmn	r3, #1
+	moveq	r8, #0
+	beq	.L650
+.L649:
+	mov	r0, r5
+	sub	sp, fp, #32
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L653:
+	add	r3, r8, r5
+	mov	r2, r7
+	add	r3, r3, r3, lsr #31
+	mov	r1, #1
+	sub	r0, fp, #116
+	asr	r4, r3, #1
+	sxth	r3, r4
+	orr	r3, r3, r6
+	str	r3, [fp, #-112]
+	bl	FlashReadPages
+	ldr	r3, [fp, #-96]
+	cmn	r3, #1
+	bne	.L651
+	ldr	r3, [fp, #-92]
+	cmn	r3, #1
+	bne	.L651
+	ldr	r3, [fp, #-116]
+	cmn	r3, #1
+	subne	r4, r4, #1
+	sxthne	r5, r4
+	bne	.L650
+.L651:
+	add	r4, r4, #1
+	sxth	r8, r4
+.L650:
+	cmp	r8, r5
+	ble	.L653
+	b	.L649
+.L658:
 	.align	2
-.L739:
+.L657:
 	.word	.LANCHOR0
-	.size	flush_l2p_region, .-flush_l2p_region
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	2
-	.global	log2phys
+	.global	FtlScanSysBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	log2phys, %function
-log2phys:
-	@ args = 0, pretend = 0, frame = 4
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #4
-	mvn	r6, #0
-	ldr	r4, .L755
-	mov	r7, r1
-	mov	r10, r2
-	ldrh	r3, [r4, #108]
-	add	r3, r3, #7
-	lsr	r9, r0, r3
-	bic	r6, r0, r6, lsl r3
-	ldr	r3, [r4, #2504]
-	uxth	r8, r9
-	uxth	r6, r6
-	cmp	r0, r3
-	bcc	.L742
-	mov	r2, #808
-	ldr	r1, .L755+4
-	ldr	r0, .L755+8
-	bl	printk
-.L742:
-	ldrh	r1, [r4, #138]
-	mov	r2, #0
-	ldr	r0, [r4, #2492]
-	mov	r3, #12
-.L743:
-	uxth	r5, r2
-	cmp	r5, r1
-	bcc	.L748
-	str	r3, [fp, #-44]
-	bl	select_l2p_ram_region
-	ldr	r3, [fp, #-44]
-	mov	r5, r0
-	ldr	r2, [r4, #2492]
-	mul	r3, r3, r0
-	add	r1, r2, r3
-	ldrh	r2, [r2, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L749
-	ldr	r3, [r1, #4]
-	cmp	r3, #0
-	bge	.L749
-	bl	flush_l2p_region
-.L749:
+	sub	sp, sp, #24
+	mov	r5, #0
+	ldr	r4, .L741
+	movw	r3, #3428
 	mov	r1, r5
-	uxth	r0, r9
-	bl	load_l2p_region
-	b	.L744
-.L748:
-	add	r2, r2, #1
-	mla	ip, r3, r2, r0
-	ldrh	ip, [ip, #-12]
-	cmp	ip, r8
-	bne	.L743
-.L744:
-	cmp	r10, #0
-	mov	r3, #12
-	bne	.L745
-	ldr	r2, [r4, #2492]
-	mla	r3, r3, r5, r2
-	ldr	r3, [r3, #8]
-	ldr	r3, [r3, r6, lsl #2]
-	str	r3, [r7]
-.L746:
-	ldr	r2, [r4, #2492]
-	mov	r3, #12
-	mov	r0, #0
-	mla	r5, r3, r5, r2
-	ldr	r3, [r5, #4]
-	cmn	r3, #1
-	addne	r3, r3, #1
-	strne	r3, [r5, #4]
-	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L745:
-	mul	r3, r3, r5
-	ldr	r2, [r4, #2492]
-	ldr	r1, [r7]
-	add	r2, r2, r3
-	ldr	r2, [r2, #8]
-	str	r1, [r2, r6, lsl #2]
-	ldr	r2, [r4, #2492]
-	add	r3, r2, r3
-	ldr	r2, [r3, #4]
-	orr	r2, r2, #-2147483648
-	str	r2, [r3, #4]
-	ldr	r3, .L755+12
-	strh	r8, [r3]	@ movhi
-	b	.L746
-.L756:
+	ldr	r2, [r4, #128]
+	mov	r6, r4
+	ldr	r0, [r4, #3372]
+	strh	r5, [r4, r3]	@ movhi
+	strh	r5, [r4, #144]	@ movhi
+	lsl	r2, r2, #2
+	bl	ftl_memset
+	ldr	r2, [r4, #128]
+	mov	r1, r5
+	ldr	r0, [r4, #3348]
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r4, #120]
+	mov	r1, r5
+	ldr	r0, [r4, #3360]
+	lsl	r2, r2, #2
+	bl	ftl_memset
+	ldrh	r2, [r4, #120]
+	mov	r1, r5
+	ldr	r0, [r4, #148]
+	mov	r5, r4
+	lsl	r2, r2, #1
+	bl	ftl_memset
+	mvn	r3, #0
+	str	r3, [r4, #2576]
+	str	r3, [r4, #2580]
+	str	r3, [r4, #2584]
+	ldrh	r3, [r4, #40]
+	str	r3, [fp, #-44]
+.L660:
+	ldrh	r3, [r6, #42]
+	ldr	r2, [fp, #-44]
+	cmp	r3, r2
+	bls	.L701
+	ldr	r1, [r6, #3176]
+	mov	r7, #0
+	ldrh	r2, [r6, #32]
+	mov	r10, r7
+	ldr	r8, [r6, #3280]
+	ldr	r3, [r6, #3172]
+	str	r1, [fp, #-48]
+	ldrh	r9, [r6, #112]
+	ldr	ip, .L741+4
+	b	.L702
+.L662:
+	ldrb	r0, [ip, r7]	@ zero_extendqisi2
+	ldr	r1, [fp, #-44]
+	str	r3, [fp, #-64]
+	str	r2, [fp, #-60]
+	str	ip, [fp, #-56]
+	bl	V2P_block
+	str	r0, [fp, #-52]
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	ldr	ip, [fp, #-56]
+	ldr	r2, [fp, #-60]
+	ldr	r3, [fp, #-64]
+	bne	.L661
+	mov	r1, #20
+	mla	r0, r1, r10, r8
+	ldr	r1, [fp, #-52]
+	lsl	r1, r1, #10
+	stmib	r0, {r1, r3}
+	mul	r1, r9, r10
+	add	lr, r1, #3
+	cmp	r1, #0
+	movlt	r1, lr
+	ldr	lr, [fp, #-48]
+	bic	r1, r1, #3
+	add	r1, lr, r1
+	str	r1, [r0, #12]
+	add	r1, r10, #1
+	uxth	r10, r1
+.L661:
+	add	r7, r7, #1
+.L702:
+	uxth	r1, r7
+	cmp	r2, r1
+	bhi	.L662
+	cmp	r10, #0
+	bne	.L663
+.L700:
+	ldr	r3, [fp, #-44]
+	add	r3, r3, #1
+	uxth	r3, r3
+	str	r3, [fp, #-44]
+	b	.L660
+.L663:
+	mov	r2, #1
+	mov	r1, r10
+	mov	r0, r8
+	bl	FlashReadPages
+	mov	r3, #0
+.L740:
+	str	r3, [fp, #-48]
+	ldrh	r3, [fp, #-48]
+	cmp	r10, r3
+	bls	.L700
+	ldr	r3, [fp, #-48]
+	mov	r9, #20
+	mul	r9, r9, r3
+	ldr	r3, [r4, #3280]
+	add	r2, r3, r9
+	ldr	r3, [r3, r9]
+	ldr	r1, [r2, #4]
+	ldr	r7, [r2, #12]
+	cmn	r3, #1
+	lsr	ip, r1, #10
+	uxth	r8, ip
+	bne	.L667
+	mov	r3, #16
+.L669:
+	ldr	r0, [r4, #3280]
+	str	ip, [fp, #-56]
+	str	r3, [fp, #-52]
+	add	r0, r0, r9
+	ldr	r2, [r0, #4]
+	add	r2, r2, #1
+	str	r2, [r0, #4]
+	mov	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldrh	r2, [r7]
+	movw	r3, #65535
+	ldr	ip, [fp, #-56]
+	cmp	r2, r3
+	ldr	r3, [fp, #-52]
+	bne	.L666
+	ldr	r3, [r4, #3280]
+	mvn	r2, #0
+	str	r2, [r3, r9]
+	ldr	r3, [r4, #3280]
+	ldr	r3, [r3, r9]
+	cmp	r3, r2
+	bne	.L667
+.L668:
+	mov	r1, #1
+	b	.L739
+.L666:
+	ldr	r2, [r4, #3280]
+	ldr	r2, [r2, r9]
+	cmn	r2, #1
+	bne	.L667
+	sub	r3, r3, #1
+	uxth	r3, r3
+	cmp	r3, #0
+	bne	.L669
+	b	.L668
+.L667:
+	ldr	r2, [r6, #2540]
+	ldr	r3, [r7, #4]
+	cmn	r2, #1
+	beq	.L670
+	cmp	r2, r3
+	bhi	.L671
+.L670:
+	cmn	r3, #1
+	addne	r2, r3, #1
+	strne	r2, [r5, #2540]
+.L671:
+	ldrh	r2, [r7]
+	movw	r1, #61604
+	cmp	r2, r1
+	beq	.L673
+	bhi	.L674
+	movw	r3, #61574
+	cmp	r2, r3
+	beq	.L675
+.L672:
+	ldr	r3, [fp, #-48]
+	add	r3, r3, #1
+	b	.L740
+.L674:
+	movw	r3, #61634
+	cmp	r2, r3
+	beq	.L676
+	movw	r3, #65535
+	cmp	r2, r3
+	moveq	r1, #0
+	bne	.L672
+.L739:
+	uxth	r0, ip
+	bl	FtlFreeSysBlkQueueIn
+	b	.L672
+.L676:
+	ldr	r9, .L741+8
+	ldr	r3, [r4, #128]
+	ldrh	r2, [r9]
+	cmp	r2, r3
+	bls	.L678
+	movw	r2, #1222
+	ldr	r1, .L741+12
+	ldr	r0, .L741+16
+	bl	sftl_printk
+.L678:
+	ldr	r0, [r4, #128]
+	ldrh	r2, [r9]
+	ldr	ip, [r4, #3372]
+	uxth	r1, r0
+	sub	r3, r1, #1
+	sub	r1, r1, r2
+	sub	r1, r1, #1
+	sxth	r3, r3
+	sxth	r1, r1
+	str	r1, [fp, #-52]
+.L679:
+	ldr	r1, [fp, #-52]
+	cmp	r3, r1
+	bgt	.L685
+	cmp	r3, #0
+	bge	.L717
+	b	.L672
+.L685:
+	lsl	lr, r3, #2
+	ldr	r1, [r7, #4]
+	str	lr, [fp, #-56]
+	ldr	lr, [ip, r3, lsl #2]
+	cmp	r1, lr
+	bls	.L680
+	ldr	r1, [ip]
+	cmp	r1, #0
+	bne	.L681
+	cmp	r0, r2
+	addne	r2, r2, #1
+	strhne	r2, [r9]	@ movhi
+.L681:
+	uxth	ip, r3
+	mov	r1, #0
+.L682:
+	uxth	r0, r1
+	sxth	r2, r1
+	cmp	ip, r0
+	bhi	.L683
+	ldr	r1, [r7, #4]
+	cmp	r3, #0
+	ldr	r2, [r5, #3372]
+	ldr	r0, [fp, #-56]
+	str	r1, [r2, r0]
+	lsl	r2, r3, #1
+	ldr	r1, [r5, #3348]
+	strh	r8, [r1, r2]	@ movhi
+	blt	.L672
+	ldr	r2, .L741+8
+	ldr	r1, [r5, #128]
+	ldrh	r2, [r2]
+	sub	r1, r1, r2
+	sub	r1, r1, #1
+	sxth	r1, r1
+	cmp	r3, r1
+	bgt	.L672
+.L717:
+	add	r2, r2, #1
+	ldr	r1, [r7, #4]
+	strh	r2, [r9]	@ movhi
+	ldr	r2, [r4, #3372]
+	str	r1, [r2, r3, lsl #2]
+	lsl	r3, r3, #1
+	ldr	r2, [r4, #3348]
+.L737:
+	strh	r8, [r2, r3]	@ movhi
+	b	.L672
+.L683:
+	ldr	r0, [r6, #3372]
+	add	r1, r1, #1
+	add	lr, r0, r2, lsl #2
+	ldr	lr, [lr, #4]
+	str	lr, [r0, r2, lsl #2]
+	lsl	r2, r2, #1
+	ldr	r0, [r6, #3348]
+	add	lr, r0, r2
+	ldrh	lr, [lr, #2]
+	strh	lr, [r0, r2]	@ movhi
+	b	.L682
+.L680:
+	sub	r3, r3, #1
+	sxth	r3, r3
+	b	.L679
+.L675:
+	ldrh	r2, [r4, #144]
+	ldrh	r3, [r4, #120]
+	cmp	r2, r3
+	bls	.L688
+	movw	r2, #1263
+	ldr	r1, .L741+12
+	ldr	r0, .L741+16
+	bl	sftl_printk
+.L688:
+	ldrh	r2, [r4, #120]
+	ldrh	r1, [r4, #144]
+	ldr	ip, [r4, #3360]
+	sub	r0, r2, #1
+	sxth	r3, r0
+	sub	r0, r0, r1
+	str	r0, [fp, #-52]
+.L689:
+	ldr	r0, [fp, #-52]
+	cmp	r3, r0
+	ble	.L694
+	ldr	r9, [ip, r3, lsl #2]
+	lsl	lr, r3, #2
+	ldr	r0, [r7, #4]
+	cmp	r0, r9
+	bls	.L690
+	sub	r2, r2, r1
+	ldr	r0, [ip]
+	clz	r2, r2
+	uxth	ip, r3
+	lsr	r2, r2, #5
+	cmp	r0, #0
+	orrne	r2, r2, #1
+	cmp	r2, #0
+	addeq	r1, r1, #1
+	strheq	r1, [r5, #144]	@ movhi
+	mov	r1, #0
+.L692:
+	uxth	r0, r1
+	sxth	r2, r1
+	cmp	ip, r0
+	bhi	.L693
+	ldr	r1, [r7, #4]
+	ldr	r2, [r5, #3360]
+	str	r1, [r2, lr]
+	lsl	r2, r3, #1
+	ldr	r1, [r5, #148]
+	strh	r8, [r1, r2]	@ movhi
+.L694:
+	cmp	r3, #0
+	blt	.L672
+	ldrh	r2, [r5, #120]
+	ldrh	r1, [r5, #144]
+	sub	r2, r2, #1
+	sub	r2, r2, r1
+	sxth	r2, r2
+	cmp	r3, r2
+	bgt	.L672
+	add	r1, r1, #1
+	ldr	r2, [r5, #3360]
+	strh	r1, [r5, #144]	@ movhi
+	ldr	r1, [r7, #4]
+	str	r1, [r2, r3, lsl #2]
+	lsl	r3, r3, #1
+	ldr	r2, [r5, #148]
+	b	.L737
+.L693:
+	ldr	r0, [r6, #3360]
+	add	r1, r1, #1
+	add	r9, r0, r2, lsl #2
+	ldr	r9, [r9, #4]
+	str	r9, [r0, r2, lsl #2]
+	lsl	r2, r2, #1
+	ldr	r0, [r6, #148]
+	add	r9, r0, r2
+	ldrh	r9, [r9, #2]
+	strh	r9, [r0, r2]	@ movhi
+	b	.L692
+.L690:
+	sub	r3, r3, #1
+	sxth	r3, r3
+	b	.L689
+.L673:
+	ldr	r9, .L741+20
+	movw	r2, #65535
+	ldrh	r1, [r9]
+	cmp	r1, r2
+	strheq	r8, [r9]	@ movhi
+	beq	.L738
+	ldrh	r0, [r9, #4]
+	cmp	r0, r2
+	beq	.L697
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+.L697:
+	ldr	r3, [r7, #4]
+	ldr	r2, [r4, #2584]
+	cmp	r2, r3
+	strhcs	r8, [r9, #4]	@ movhi
+	bcs	.L672
+	ldrh	r3, [r9]
+	strh	r8, [r9]	@ movhi
+	strh	r3, [r9, #4]	@ movhi
+	ldr	r3, [r7, #4]
+.L738:
+	str	r3, [r4, #2584]
+	b	.L672
+.L701:
+	ldr	r2, [r6, #3348]
+	ldrh	r3, [r2]
+	cmp	r3, #0
+	beq	.L703
+.L706:
+	ldr	r1, [r4, #148]
+	ldrh	r2, [r1]
+	cmp	r2, #0
+	beq	.L704
+.L705:
+	movw	r3, #3428
+	ldrh	r2, [r4, r3]
+	ldr	r3, [r4, #128]
+	cmp	r2, r3
+	bls	.L736
+	movw	r2, #1388
+	ldr	r1, .L741+12
+	ldr	r0, .L741+16
+	bl	sftl_printk
+.L736:
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L703:
+	movw	r1, #3428
+	ldrh	r1, [r6, r1]
+	cmp	r1, #0
+	ldrne	r1, [r6, #128]
+	beq	.L706
+.L707:
+	sxth	ip, r3
+	cmp	ip, r1
+	bcs	.L706
+	lsl	r0, ip, #1
+	add	r3, r3, #1
+	ldrh	r0, [r2, r0]
+	cmp	r0, #0
+	beq	.L707
+	mov	r3, ip
+	mov	lr, #0
+.L708:
+	ldr	r2, [r5, #128]
+	cmp	r3, r2
+	bcs	.L706
+	ldr	r1, [r5, #3348]
+	lsl	r2, r3, #1
+	sub	r0, r3, ip
+	lsl	r6, r0, #1
+	ldrh	r7, [r1, r2]
+	strh	r7, [r1, r6]	@ movhi
+	ldr	r1, [r5, #3372]
+	ldr	r6, [r1, r3, lsl #2]
+	add	r3, r3, #1
+	sxth	r3, r3
+	str	r6, [r1, r0, lsl #2]
+	ldr	r1, [r5, #3348]
+	strh	lr, [r1, r2]	@ movhi
+	b	.L708
+.L704:
+	ldrh	r3, [r4, #144]
+	cmp	r3, #0
+	ldrhne	r0, [r4, #120]
+	beq	.L705
+.L713:
+	sxth	r3, r2
+	cmp	r3, r0
+	mov	ip, r3
+	bge	.L705
+	lsl	lr, r3, #1
+	add	r2, r2, #1
+	ldrh	lr, [r1, lr]
+	cmp	lr, #0
+	beq	.L713
+	mov	lr, #0
+.L714:
+	ldrh	r2, [r5, #120]
+	cmp	r3, r2
+	bge	.L705
+	ldr	r1, [r5, #148]
+	lsl	r2, r3, #1
+	sub	r0, r3, ip
+	lsl	r6, r0, #1
+	ldrh	r7, [r1, r2]
+	strh	r7, [r1, r6]	@ movhi
+	ldr	r1, [r5, #3360]
+	ldr	r6, [r1, r3, lsl #2]
+	add	r3, r3, #1
+	sxth	r3, r3
+	str	r6, [r1, r0, lsl #2]
+	ldr	r1, [r5, #148]
+	strh	lr, [r1, r2]	@ movhi
+	b	.L714
+.L742:
 	.align	2
-.L755:
+.L741:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+289
+	.word	.LANCHOR0+60
+	.word	.LANCHOR0+3428
+	.word	.LANCHOR1+231
 	.word	.LC1
-	.word	.LANCHOR0+2496
-	.size	log2phys, .-log2phys
+	.word	.LANCHOR0+2576
+	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
-	.global	FtlReUsePrevPpa
+	.global	FtlLoadBbt
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
-	@ args = 0, pretend = 0, frame = 4
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #4
-	mov	r6, r0
-	ldr	r7, .L767
-	ubfx	r0, r1, #10, #16
-	str	r1, [fp, #-32]
-	bl	P2V_block_in_plane
-	ldr	r2, [r7, #2324]
-	lsl	r5, r0, #1
-	ldrh	r3, [r2, r5]
-	cmp	r3, #0
-	bne	.L758
-	ldr	r4, [r7, #2340]
-	cmp	r4, #0
-	beq	.L759
-	movw	r2, #2344
-	movw	lr, #65535
-	ldrh	ip, [r7, r2]
-	ldr	r2, [r7, #2316]
-	sub	r4, r4, r2
-	ubfx	r4, r4, #3, #16
-.L760:
-	uxth	r1, r3
-	cmp	ip, r1
-	bls	.L759
-	cmp	r4, r0
-	bne	.L761
-	mov	r1, r4
-	ldr	r0, .L767+4
-	bl	List_remove_node
-	movw	r3, #2344
-	ldrh	r3, [r7, r3]
-	cmp	r3, #0
-	bne	.L762
-	movw	r2, #1688
-	ldr	r1, .L767+8
-	ldr	r0, .L767+12
-	bl	printk
-.L762:
-	movw	r2, #2344
-	mov	r0, r4
-	ldrh	r3, [r7, r2]
-	sub	r3, r3, #1
-	strh	r3, [r7, r2]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r2, [r7, #2324]
-	ldrh	r3, [r2, r5]
-.L758:
+	ldr	r4, .L775
+	ldr	r7, .L775+4
+	ldr	r3, [r4, #3292]
+	ldr	r6, [r4, #3324]
+	str	r3, [r4, #3452]
+	str	r6, [r4, #3456]
+	bl	FtlBbtMemInit
+	ldrh	r5, [r4, #98]
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L744:
+	ldrh	r3, [r4, #98]
+	sub	r3, r3, #16
+	cmp	r5, r3
+	ble	.L747
+	lsl	r3, r5, #10
+	mov	r2, #1
+	mov	r1, r2
+	mov	r0, r7
+	str	r3, [r4, #3448]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	cmn	r3, #1
+	bne	.L745
+	ldr	r3, [r4, #3448]
+	mov	r2, #1
+	mov	r1, r2
+	mov	r0, r7
 	add	r3, r3, #1
-	strh	r3, [r2, r5]	@ movhi
+	str	r3, [r4, #3448]
+	bl	FlashReadPages
+.L745:
+	ldr	r3, [r4, #3444]
+	cmn	r3, #1
+	beq	.L746
+	ldrh	r2, [r6]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L746
+	ldr	r3, [r6, #4]
+	strh	r5, [r4, #152]	@ movhi
+	str	r3, [r4, #160]
+	ldrh	r3, [r6, #8]
+	strh	r3, [r4, #156]	@ movhi
+.L747:
+	ldrh	r3, [r4, #152]
+	movw	r2, #65535
+	cmp	r3, r2
+	beq	.L761
+	ldrh	r3, [r4, #156]
+	cmp	r3, r2
+	beq	.L751
+	lsl	r3, r3, #10
+	mov	r2, #1
+	mov	r1, r2
+	ldr	r0, .L775+4
+	str	r3, [r4, #3448]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	cmn	r3, #1
+	beq	.L751
+	ldrh	r2, [r6]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L751
+	ldr	r3, [r6, #4]
+	ldr	r2, [r4, #160]
+	cmp	r3, r2
+	ldrhhi	r2, [r4, #156]
+	strhi	r3, [r4, #160]
+	ldrhhi	r3, [r6, #8]
+	strhhi	r2, [r4, #152]	@ movhi
+	strhhi	r3, [r4, #156]	@ movhi
+.L751:
+	ldr	r7, .L775+4
+	mov	r1, #1
+	ldrh	r0, [r4, #152]
+	bl	FtlGetLastWrittenPage
+	sxth	r5, r0
+	add	r0, r0, #1
+	strh	r0, [r4, #154]	@ movhi
+.L753:
+	cmp	r5, #0
+	bge	.L756
+	mov	r2, #253
+	ldr	r1, .L775+8
+	ldr	r0, .L775+12
+	bl	sftl_printk
+.L755:
+	ldrh	r3, [r6, #10]
+	ldrh	r0, [r6, #12]
+	strh	r3, [r4, #158]	@ movhi
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L758
+	ldr	r2, [r4, #28]
+	cmp	r0, r2
+	beq	.L758
+	ldrh	r3, [r4, #42]
+	lsr	r3, r3, #2
+	cmp	r0, r3
+	cmpcc	r2, r3
+	bcs	.L758
+	bl	FtlSysBlkNumInit
+.L758:
+	ldr	r6, .L775+16
+	mov	r5, #0
+	ldr	r7, .L775+20
+.L759:
+	ldrh	r3, [r4, #54]
+	cmp	r5, r3
+	bcc	.L760
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L746:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L744
+.L756:
+	ldrh	r3, [r4, #152]
+	mov	r2, #1
+	mov	r1, r2
+	mov	r0, r7
+	orr	r3, r5, r3, lsl #10
+	str	r3, [r4, #3448]
+	ldr	r3, [r4, #3292]
+	str	r3, [r4, #3452]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	cmn	r3, #1
+	beq	.L754
+	ldrh	r2, [r6]
+	movw	r3, #61649
+	cmp	r2, r3
+	beq	.L755
+.L754:
+	sub	r5, r5, #1
+	sxth	r5, r5
+	b	.L753
+.L760:
+	ldrh	r2, [r7]
+	ldr	r1, [r4, #3452]
+	ldr	r0, [r6, #4]!
+	lsl	r2, r2, #2
+	mla	r1, r5, r2, r1
+	add	r5, r5, #1
+	bl	ftl_memcpy
 	b	.L759
 .L761:
-	lsl	r4, r4, #3
-	add	r3, r3, #1
-	ldrh	r4, [r2, r4]
-	cmp	r4, lr
-	bne	.L760
-.L759:
+	mvn	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L776:
+	.align	2
+.L775:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3444
+	.word	.LANCHOR1+245
+	.word	.LC1
+	.word	.LANCHOR0+176
+	.word	.LANCHOR0+3380
+	.size	FtlLoadBbt, .-FtlLoadBbt
+	.align	2
+	.global	FtlLoadSysInfo
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r4, .L798
+	mov	r1, #0
+	ldr	r3, [r4, #3292]
+	add	r6, r4, #2576
+	ldrh	r2, [r4, #40]
+	ldr	r0, [r4, #2324]
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
+	lsl	r2, r2, #1
+	str	r3, [r4, #3456]
+	bl	ftl_memset
+	ldrh	r0, [r6]
+	movw	r3, #65535
+	cmp	r0, r3
+	bne	.L778
+.L786:
+	mvn	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L778:
+	ldr	r7, .L798+4
+	mov	r1, #1
+	ldr	r8, .L798+8
+	bl	FtlGetLastWrittenPage
+	sxth	r5, r0
+	add	r0, r0, #1
+	strh	r0, [r6, #2]	@ movhi
+.L780:
+	cmp	r5, #0
+	bge	.L783
+	movw	r2, #1448
+	ldr	r1, .L798+12
+	ldr	r0, .L798+16
+	bl	sftl_printk
+.L782:
+	ldrh	r3, [r4, #40]
+	ldrh	r2, [r4, #110]
+	add	r3, r3, #24
+	cmp	r2, r3, lsl #1
+	bcs	.L785
+	movw	r2, #1450
+	ldr	r1, .L798+12
+	ldr	r0, .L798+16
+	bl	sftl_printk
+.L785:
+	ldr	r5, .L798+20
+	mov	r2, #48
+	ldr	r1, [r4, #3452]
+	mov	r0, r5
+	bl	ftl_memcpy
+	ldrh	r2, [r4, #40]
+	ldr	r1, [r4, #3452]
+	ldr	r0, [r4, #2324]
+	lsl	r2, r2, #1
+	add	r1, r1, #48
+	bl	ftl_memcpy
+	ldrh	r1, [r4, #40]
+	ldr	r3, [r4, #3452]
+	ldr	r0, [r4, #24]
+	lsr	r2, r1, #3
+	add	r1, r1, #24
+	lsl	r1, r1, #1
+	add	r2, r2, #4
+	bic	r1, r1, #3
+	add	r1, r3, r1
+	bl	ftl_memcpy
+	ldr	r2, [r4, #2268]
+	ldr	r3, .L798+8
+	cmp	r2, r3
+	bne	.L786
+	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
+	ldrh	r3, [r4, #54]
+	ldrh	r7, [r5, #8]
+	cmp	r2, r3
+	strh	r7, [r6, #6]	@ movhi
+	bne	.L786
+	ldrh	r3, [r4, #102]
+	ldrh	r2, [r4, #58]
+	ldr	r6, [r4, #44]
+	ldrh	r0, [r4, #158]
+	mul	r3, r7, r3
+	str	r7, [r4, #3464]
+	ldrh	r1, [r4, #32]
+	sub	r0, r6, r0
+	sub	r0, r0, r7
+	str	r3, [r4, #2504]
+	mul	r3, r3, r2
+	str	r3, [r4, #140]
+	bl	__udivsi3
+	cmp	r7, r6
+	movw	r3, #2572
+	strh	r0, [r4, r3]	@ movhi
+	bls	.L787
+	mov	r2, #1472
+	ldr	r1, .L798+12
+	ldr	r0, .L798+16
+	bl	sftl_printk
+.L787:
+	ldrh	r0, [r5, #14]
+	movw	r3, #2348
+	ldr	r1, .L798+24
+	mvn	ip, #0
+	strh	r0, [r4, r3]	@ movhi
+	ldrh	r3, [r5, #16]
+	lsr	r2, r3, #6
+	and	r3, r3, #63
+	strb	r3, [r4, #2354]
+	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
+	strh	r2, [r1, #2]	@ movhi
+	movw	r2, #2396
+	strb	r3, [r4, #2356]
+	movw	r3, #2588
+	strh	ip, [r4, r3]	@ movhi
+	mov	r3, #0
+	ldrh	ip, [r5, #18]
+	strh	r3, [r1, #242]	@ movhi
+	strb	r3, [r4, #2594]
+	strh	ip, [r4, r2]	@ movhi
+	ldrh	r2, [r5, #20]
+	strb	r3, [r4, #2596]
+	str	r3, [r4, #2528]
+	str	r3, [r4, #2516]
+	lsr	ip, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #2402]
+	ldrb	r2, [r4, #2280]	@ zero_extendqisi2
+	strh	ip, [r1, #50]	@ movhi
+	ldrh	ip, [r5, #22]
+	strb	r2, [r4, #2404]
+	movw	r2, #2444
+	str	r3, [r4, #2508]
+	strh	ip, [r4, r2]	@ movhi
+	ldrh	r2, [r5, #24]
+	str	r3, [r4, #2524]
+	str	r3, [r4, #2552]
+	lsr	ip, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #2450]
+	ldrb	r2, [r4, #2281]	@ zero_extendqisi2
+	strh	ip, [r1, #98]	@ movhi
+	strb	r2, [r4, #2452]
+	ldr	r2, [r4, #2300]
+	str	r2, [r4, #2548]
+	str	r3, [r4, #2564]
+	ldr	r2, [r4, #2540]
+	str	r3, [r4, #2520]
+	ldr	r3, [r4, #2308]
+	cmp	r3, r2
+	ldr	r2, [r4, #2544]
+	strhi	r3, [r4, #2540]
+	ldr	r3, [r4, #2304]
+	cmp	r3, r2
+	strhi	r3, [r4, #2544]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L790
+	ldr	r0, .L798+24
+	bl	make_superblock
+.L790:
+	movw	r3, #2396
+	ldrh	r2, [r4, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L791
+	ldr	r0, .L798+28
+	bl	make_superblock
+.L791:
+	movw	r3, #2444
+	ldrh	r2, [r4, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L792
+	ldr	r0, .L798+32
+	bl	make_superblock
+.L792:
+	movw	r3, #2588
+	ldrh	r2, [r4, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L793
+	ldr	r0, .L798+36
+	bl	make_superblock
+.L793:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L783:
+	ldrh	r3, [r6]
 	mov	r2, #1
-	sub	r1, fp, #32
-	mov	r0, r6
-	bl	log2phys
-	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L768:
+	mov	r1, r2
+	mov	r0, r7
+	orr	r3, r5, r3, lsl #10
+	str	r3, [r4, #3448]
+	ldr	r3, [r4, #3292]
+	str	r3, [r4, #3452]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	cmn	r3, #1
+	beq	.L781
+	ldr	r3, [r4, #3292]
+	ldr	r3, [r3]
+	cmp	r3, r8
+	bne	.L781
+	ldr	r3, [r4, #3324]
+	ldrh	r2, [r3]
+	movw	r3, #61604
+	cmp	r2, r3
+	beq	.L782
+.L781:
+	sub	r5, r5, #1
+	sxth	r5, r5
+	b	.L780
+.L799:
 	.align	2
-.L767:
+.L798:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2340
-	.word	.LANCHOR1+298
+	.word	.LANCHOR0+3444
+	.word	1179929683
+	.word	.LANCHOR1+256
 	.word	.LC1
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.word	.LANCHOR0+2268
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2396
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+2588
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
-	.global	ftl_scan_all_data
+	.global	FlashProgPages
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
-	@ args = 0, pretend = 0, frame = 4
+	.type	FlashProgPages, %function
+FlashProgPages:
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #24
+	sub	sp, sp, #48
+	mov	r8, #0
+	ldr	r6, .L836
+	mov	r4, r0
+	str	r3, [fp, #-88]
+	mov	r5, r0
+	str	r1, [fp, #-76]
+	ldrh	r3, [r6, #12]
+	mov	r9, r6
+	mov	r10, r6
+	str	r2, [fp, #-84]
+	str	r3, [fp, #-72]
+	lsl	r3, r3, #3
+	str	r3, [fp, #-80]
+.L801:
+	ldr	r3, [fp, #-76]
+	cmp	r8, r3
+	bne	.L814
+	ldr	r3, [fp, #-88]
+	cmp	r3, #0
+	beq	.L807
 	mov	r5, #0
-	ldr	r6, .L777
-	mov	r1, #0
-	ldr	r0, .L777+4
-	bl	printk
-	mov	r4, r6
-.L770:
-	ldr	r3, [r6, #2504]
-	cmp	r5, r3
-	bcc	.L776
-	sub	sp, fp, #28
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L776:
-	mov	r2, #0
-	sub	r1, fp, #32
-	mov	r0, r5
-	bl	log2phys
-	ubfx	r3, r5, #0, #11
+	ldr	r7, .L836+4
+	ldr	r6, .L836
+	b	.L815
+.L814:
+	ldr	r3, [r5, #8]
 	cmp	r3, #0
-	bne	.L771
-	ldr	r2, [fp, #-32]
+	beq	.L802
+	ldr	r3, [r5, #12]
+	cmp	r3, #0
+	bne	.L803
+.L802:
+	mov	r2, #136
+	ldr	r1, .L836+8
+	ldr	r0, .L836+12
+	bl	sftl_printk
+.L803:
+	sub	r2, fp, #68
+	sub	r1, fp, #64
+	mov	r0, r5
+	bl	l2p_addr_tran
+	ldr	r7, [fp, #-68]
+	cmp	r7, #0
+	bne	.L804
+	ldr	r3, [fp, #-64]
+	ldr	r2, [fp, #-80]
+	cmp	r2, r3
+	bls	.L804
+	ldr	r5, .L836+8
+	ldr	r6, .L836+16
+	b	.L835
+.L806:
+	mvn	r3, #0
+	ldr	r2, [r4, #-16]
+	str	r3, [r4, #-20]
 	mov	r1, r5
-	ldr	r0, .L777+8
-	bl	printk
-.L771:
-	ldr	r3, [fp, #-32]
-	cmn	r3, #1
-	beq	.L773
-	str	r3, [r4, #3264]
-	mov	r2, #0
-	ldr	r3, [r4, #3280]
+	mov	r0, r6
+	add	r7, r7, #1
+	bl	sftl_printk
+	mov	r3, #16
+	mov	r2, #4
+	ldr	r1, [r4, #-12]
+	ldr	r0, .L836+20
+	bl	rknand_print_hex
+	mov	r3, #4
+	ldr	r1, [r4, #-8]
+	mov	r2, r3
+	ldr	r0, .L836+24
+	bl	rknand_print_hex
+.L835:
+	ldr	r3, [fp, #-76]
+	add	r4, r4, #20
+	cmp	r7, r3
+	bne	.L806
+	bl	dump_stack
+.L807:
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L804:
+	ldr	r1, [r5, #8]
+	tst	r1, #63
+	moveq	r7, r1
+	beq	.L808
+	ldr	r7, [r10, #3312]
+	cmp	r1, r7
+	beq	.L808
+	ldrh	r2, [r10, #58]
+	mov	r0, r7
+	lsl	r2, r2, #9
+	bl	ftl_memcpy
+.L808:
+	ldr	r3, [r5, #12]
+	mov	r2, r7
+	ldr	ip, [r10, #3252]
+	ldr	r1, [fp, #-64]
+	ldrb	r0, [fp, #-68]	@ zero_extendqisi2
+	blx	ip
+	cmp	r0, #0
+	mvnne	r3, #0
+	streq	r0, [r5]
+	strne	r3, [r5]
+	ldrh	r3, [r6, #14]
+	cmp	r3, #4
+	bne	.L812
+	ldr	r0, [fp, #-72]
+	add	r2, r7, #2048
+	ldr	r3, [r5, #12]
+	ldr	r1, [fp, #-64]
+	ldr	ip, [r6, #3252]
+	add	r3, r3, #8
+	add	r1, r0, r1
+	ldrb	r0, [fp, #-68]	@ zero_extendqisi2
+	blx	ip
+	cmp	r0, #0
+	mvnne	r3, #0
+	strne	r3, [r5]
+.L812:
+	add	r8, r8, #1
+	add	r5, r5, #20
+	b	.L801
+.L819:
+	ldr	r2, [r9, #3312]
+	mov	r3, #0
 	mov	r1, #1
-	ldr	r7, [r4, #3284]
-	ldr	r0, .L777+12
-	str	r3, [r4, #3268]
-	str	r5, [r4, #3276]
-	str	r7, [r4, #3272]
-	str	r2, [r4, #3260]
+	sub	r0, fp, #60
+	str	r3, [r2]
+	ldr	r2, [r9, #3320]
+	str	r3, [r2]
+	ldr	r3, [r4, #4]
+	ldr	r2, [fp, #-84]
+	str	r3, [fp, #-56]
+	ldr	r3, [r9, #3312]
+	str	r3, [fp, #-52]
+	ldr	r3, [r9, #3320]
+	str	r3, [fp, #-48]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	cmn	r3, #1
-	cmpne	r3, #256
-	beq	.L774
-	ldr	r3, [r7, #8]
-	cmp	r5, r3
-	beq	.L773
-.L774:
-	ldr	r2, [r4, #3268]
-	ldr	r3, [r4, #3272]
-	ldr	r0, .L777+16
-	ldr	r1, [r2, #4]
-	str	r1, [sp, #16]
-	mov	r1, r5
-	ldr	r2, [r2]
-	str	r2, [sp, #12]
-	ldr	r2, [r3, #12]
-	str	r2, [sp, #8]
-	ldr	r2, [r3, #8]
-	str	r2, [sp, #4]
-	ldr	r2, [r3, #4]
-	str	r2, [sp]
+	ldr	r10, [fp, #-60]
+	cmn	r10, #1
+	bne	.L816
+	ldr	r1, [r4, #4]
+	mov	r0, r7
+	bl	sftl_printk
+	str	r10, [r4]
+.L816:
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L817
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3320]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L817
+	ldr	r1, [r4, #4]
+	ldr	r0, .L836+28
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L817:
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L818
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3312]
 	ldr	r3, [r3]
-	ldr	r2, [r4, #3264]
-	bl	printk
-.L773:
+	cmp	r2, r3
+	beq	.L818
+	ldr	r1, [r4, #4]
+	ldr	r0, .L836+32
+	bl	sftl_printk
+	mvn	r3, #0
+	str	r3, [r4]
+.L818:
 	add	r5, r5, #1
-	b	.L770
-.L778:
+	add	r4, r4, #20
+.L815:
+	cmp	r8, r5
+	bne	.L819
+	b	.L807
+.L837:
 	.align	2
-.L777:
+.L836:
 	.word	.LANCHOR0
+	.word	.LC86
+	.word	.LANCHOR1+271
+	.word	.LC1
+	.word	.LC80
+	.word	.LC81
+	.word	.LC82
+	.word	.LC87
 	.word	.LC88
-	.word	.LC89
-	.word	.LANCHOR0+3260
-	.word	.LC90
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
-	.align	2
-	.global	FtlReadRefresh
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
-	@ args = 0, pretend = 0, frame = 88
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #88
-	ldr	r3, .L792
-	ldr	r0, [r3, #2716]
-	mov	r4, r3
-	cmp	r0, #0
-	beq	.L780
-	ldr	r1, [r3, #2720]
-	ldr	r2, [r3, #2504]
-	cmp	r1, r2
-	bcs	.L781
-	mov	r5, #2048
-.L786:
-	ldr	r0, [r4, #2720]
-	ldr	r3, [r4, #2504]
-	cmp	r0, r3
-	bcs	.L783
-	mov	r2, #0
-	sub	r1, fp, #108
-	bl	log2phys
-	ldr	r2, [fp, #-108]
-	ldr	r3, [r4, #2720]
-	cmn	r2, #1
-	add	r3, r3, #1
-	str	r3, [r4, #2720]
-	beq	.L784
-	str	r3, [fp, #-88]
-	sub	r0, fp, #20
-	ldr	r3, .L792+4
-	mov	r1, #1
-	str	r2, [fp, #-100]
-	mov	r2, #0
-	str	r2, [r0, #-84]!
-	str	r3, [fp, #-96]
-	sub	r3, fp, #84
-	str	r3, [fp, #-92]
-	bl	FlashReadPages
-	ldr	r3, [fp, #-104]
-	cmp	r3, #256
-	bne	.L783
-	ldr	r0, [fp, #-108]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L783:
-	mvn	r0, #0
-.L779:
-	sub	sp, fp, #20
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L784:
-	subs	r5, r5, #1
-	bne	.L786
-	b	.L783
-.L781:
-	ldr	r2, [r3, #2508]
-	mov	r0, #0
-	str	r0, [r3, #2716]
-	str	r0, [r3, #2720]
-	str	r2, [r3, #2712]
-	b	.L779
-.L780:
-	ldr	r1, [r3, #2508]
-	ldr	r2, [r3, #2712]
-	add	ip, r1, #1048576
-	cmp	r2, ip
-	bhi	.L789
-	ldr	r3, [r3, #2564]
-	mov	ip, #33554432
-	lsr	r3, r3, #10
-	add	r2, r2, ip, asr r3
-	cmp	r1, r2
-	bhi	.L789
-	ldr	r3, .L792+8
-	ldrb	r3, [r3, #28]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L779
-.L789:
-	mov	r3, #1
-	mov	r0, #0
-	str	r3, [r4, #2716]
-	str	r0, [r4, #2720]
-	str	r1, [r4, #2712]
-	b	.L779
-.L793:
-	.align	2
-.L792:
-	.word	.LANCHOR0
-	.word	ftl_temp_buf
-	.word	.LANCHOR0+2268
-	.size	FtlReadRefresh, .-FtlReadRefresh
+	.size	FlashProgPages, .-FlashProgPages
 	.align	2
-	.global	ftl_check_vpc
+	.global	FtlLowFormatEraseBlock
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	ftl_check_vpc, %function
-ftl_check_vpc:
-	@ args = 0, pretend = 0, frame = 4
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	@ args = 0, pretend = 0, frame = 12
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #4
-	mov	r4, #0
-	ldr	r6, .L818
-	ldr	r1, .L818+4
-	ldr	r0, .L818+8
-	mov	r5, r6
-	bl	printk
-	mov	r1, #8192
-	ldr	r0, .L818+12
-	bl	__memzero
-.L795:
-	ldr	r3, [r6, #2504]
-	cmp	r4, r3
-	bcc	.L797
-	ldr	r8, .L818+12
-	mov	r4, #0
-	ldr	r9, .L818+16
-	mov	r6, r4
-.L798:
-	ldrh	r2, [r5, #40]
-	uxth	r3, r4
-	cmp	r2, r3
-	bhi	.L800
-	ldr	r4, [r5, #2340]
-	cmp	r4, #0
-	beq	.L801
-	movw	r3, #2344
-	ldr	r9, .L818+12
-	ldrh	r8, [r5, r3]
-	mov	r7, #0
-	ldr	r3, [r5, #2316]
-	ldr	r10, .L818+20
-	sub	r4, r4, r3
-	ubfx	r4, r4, #3, #16
-.L802:
-	uxth	r3, r7
-	cmp	r8, r3
-	bls	.L801
-	ldr	r2, [r5, #2324]
-	lsl	r3, r4, #1
-	ldrh	r2, [r2, r3]
-	cmp	r2, #0
-	beq	.L803
-	mov	r6, #1
-	ldrh	r3, [r9, r3]
-	mov	r1, r4
-	mov	r0, r10
-	bl	printk
-.L803:
-	ldr	r3, [r5, #2316]
-	lsl	r4, r4, #3
-	add	r7, r7, #1
-	ldrh	r4, [r3, r4]
-	movw	r3, #65535
-	cmp	r4, r3
-	bne	.L802
-.L801:
+	sub	sp, sp, #12
+	mov	r9, #0
+	ldr	ip, .L880
+	uxtb	r6, r1
+	uxth	r7, r0
+	mov	r5, r9
+	mov	r4, r9
+	mov	r10, ip
+	str	r7, [ip, #3276]
+.L839:
+	ldrh	r1, [r10, #32]
+	uxth	r3, r9
+	cmp	r1, r3
+	bhi	.L843
+	cmp	r5, #0
+	beq	.L838
+	mov	r8, #0
+	mov	r9, #20
+	mov	r2, r5
+	mov	r1, #0
+	ldr	r0, [r10, #3260]
+	bl	FlashEraseBlocks
+.L846:
+	uxth	r3, r8
+	cmp	r5, r3
+	bhi	.L848
+.L849:
 	cmp	r6, #0
-	ldmibeq	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-	movw	r2, #2321
-	ldr	r1, .L818+4
-	ldr	r0, .L818+24
-	bl	printk
-	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L797:
+	ldrhne	r3, [r10, #104]
+	moveq	r3, #2
+	streq	r3, [fp, #-52]
+	streq	r6, [fp, #-48]
+	strne	r3, [fp, #-52]
+	movne	r3, #1
+	strne	r3, [fp, #-48]
+	mov	r3, #0
+	str	r3, [fp, #-44]
+.L858:
+	mov	r8, #0
+	mov	r5, r8
+.L850:
+	ldrh	r1, [r10, #32]
+	uxth	r3, r8
+	cmp	r1, r3
+	bhi	.L853
+	cmp	r5, #0
+	beq	.L838
+	mov	r9, #0
+	mov	r3, #1
+	ldr	r2, [fp, #-48]
+	mov	r1, r5
+	ldr	r0, [r10, #3260]
+	bl	FlashProgPages
+.L855:
+	uxth	r3, r9
+	cmp	r5, r3
+	bhi	.L857
+	ldr	r3, [fp, #-44]
+	ldr	r2, [fp, #-52]
+	add	r3, r3, #1
+	str	r3, [fp, #-44]
+	ldrh	r3, [fp, #-44]
+	cmp	r2, r3
+	bhi	.L858
+	mov	r8, #0
+	mov	r9, #20
+.L859:
+	uxth	r3, r8
+	cmp	r5, r3
+	bhi	.L861
+	adds	r6, r6, #0
+	movne	r6, #1
+	cmp	r7, #63
+	movhi	r7, r6
+	orrls	r7, r6, #1
+	cmp	r7, #0
+	beq	.L838
+	mov	r2, r5
+	ldr	r1, [fp, #-48]
+	ldr	r0, [r10, #3260]
+	bl	FlashEraseBlocks
+.L838:
+	mov	r0, r4
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L843:
+	uxth	r3, r9
+	mov	r2, #20
+	ldr	r0, [r10, #3260]
+	mul	r1, r2, r3
 	mov	r2, #0
-	sub	r1, fp, #44
-	mov	r0, r4
-	bl	log2phys
-	ldr	r0, [fp, #-44]
-	cmn	r0, #1
-	beq	.L796
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldr	r2, .L818+12
-	lsl	r0, r0, #1
-	ldrh	r3, [r2, r0]
-	add	r3, r3, #1
-	strh	r3, [r2, r0]	@ movhi
-.L796:
+	add	r3, r10, r3
+	str	r2, [r0, r1]
+	mov	r1, r7
+	ldrb	r0, [r3, #60]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	r6, #0
+	mov	r8, r0
+	beq	.L840
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L841
+.L840:
+	mov	r0, r8
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	addne	r4, r4, #1
+	uxthne	r4, r4
+	bne	.L841
+	ldr	r1, [r10, #3260]
+	mov	r3, #20
+	lsl	r8, r8, #10
+	mla	r1, r3, r5, r1
+	ldr	r3, [r10, #3308]
+	str	r3, [r1, #8]
+	ldrh	r3, [r10, #112]
+	str	r8, [r1, #4]
+	mul	r3, r5, r3
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r0, r3, #3
+	cmp	r3, #0
+	movlt	r3, r0
+	ldr	r0, [r10, #3328]
+	bic	r3, r3, #3
+	add	r3, r0, r3
+	str	r3, [r1, #12]
+.L841:
+	add	r9, r9, #1
+	b	.L839
+.L848:
+	mul	r3, r9, r8
+	ldr	r2, [r10, #3260]
+	add	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cmn	r3, #1
+	bne	.L847
+	ldr	r0, [r1, #4]
 	add	r4, r4, #1
-	b	.L795
-.L800:
-	uxth	r1, r4
-	ldr	r3, [r5, #2324]
-	lsl	r7, r1, #1
-	ldrh	r2, [r3, r7]
-	ldrh	r3, [r8, r7]
-	cmp	r2, r3
-	beq	.L799
+	uxth	r4, r4
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+.L847:
+	add	r8, r8, #1
+	b	.L846
+.L853:
+	uxth	r3, r8
+	mov	r2, #20
+	ldr	r0, [r10, #3260]
+	mul	r1, r2, r3
+	mov	r2, #0
+	add	r3, r10, r3
+	str	r2, [r0, r1]
+	mov	r1, r7
+	ldrb	r0, [r3, #60]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	r6, #0
+	mov	r9, r0
+	beq	.L851
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L852
+.L851:
 	mov	r0, r9
-	bl	printk
-	ldr	r3, [r5, #2324]
-	movw	r2, #65535
-	ldrh	r3, [r3, r7]
-	cmp	r3, r2
-	beq	.L799
-	ldrh	r2, [r8, r7]
-	cmp	r2, r3
-	movhi	r6, #1
-.L799:
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	bne	.L852
+	ldr	r1, [r10, #3260]
+	mov	r3, #20
+	mla	r1, r3, r5, r1
+	ldr	r3, [fp, #-44]
+	add	r9, r3, r9, lsl #10
+	ldr	r3, [r10, #3304]
+	str	r9, [r1, #4]
+	str	r3, [r1, #8]
+	ldrh	r3, [r10, #112]
+	mul	r3, r5, r3
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r0, r3, #3
+	cmp	r3, #0
+	movlt	r3, r0
+	ldr	r0, [r10, #3308]
+	bic	r3, r3, #3
+	add	r3, r0, r3
+	str	r3, [r1, #12]
+.L852:
+	add	r8, r8, #1
+	b	.L850
+.L857:
+	mov	r3, #20
+	ldr	r2, [r10, #3260]
+	mul	r3, r3, r9
+	add	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L856
+	ldr	r0, [r1, #4]
 	add	r4, r4, #1
-	b	.L798
-.L819:
-	.align	2
-.L818:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+314
-	.word	.LC91
-	.word	check_vpc_table
-	.word	.LC92
-	.word	.LC93
-	.word	.LC1
-	.size	ftl_check_vpc, .-ftl_check_vpc
-	.align	2
-	.global	FtlMapBlkWriteDump_data
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlMapBlkWriteDump_data, %function
-FtlMapBlkWriteDump_data:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r3, [r0, #36]
-	mov	r6, r0
+	uxth	r4, r4
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+.L856:
+	add	r9, r9, #1
+	b	.L855
+.L861:
+	cmp	r6, #0
+	beq	.L860
+	mul	r3, r9, r8
+	ldr	r2, [r10, #3260]
+	add	r1, r2, r3
+	ldr	r3, [r2, r3]
 	cmp	r3, #0
-	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-	mov	r3, #0
-	ldrh	r5, [r0, #6]
-	str	r3, [r0, #36]
-	ldr	r3, .L827
-	ldr	r2, [r0, #24]
-	sub	r5, r5, #1
-	uxth	r5, r5
-	ldr	r0, [r3, #3844]
-	mov	r4, r3
-	ldr	r1, [r3, #3284]
-	str	r0, [r3, #3268]
-	str	r1, [r3, #3272]
-	ldr	r2, [r2, r5, lsl #2]
-	cmp	r2, #0
-	str	r2, [r3, #3264]
-	beq	.L822
-	mov	r2, #1
-	ldr	r0, .L827+4
-	mov	r1, r2
-	bl	FlashReadPages
-.L823:
-	ldr	r2, [r4, #3268]
-	mov	r1, r5
-	mov	r0, r6
-	bl	FtlMapWritePage
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L822:
-	ldrh	r2, [r3, #110]
-	mov	r1, #255
-	bl	ftl_memset
-	b	.L823
-.L828:
+	bne	.L860
+	ldr	r0, [r1, #4]
+	mov	r1, #1
+	ubfx	r0, r0, #10, #16
+	bl	FtlFreeSysBlkQueueIn
+.L860:
+	add	r8, r8, #1
+	b	.L859
+.L881:
 	.align	2
-.L827:
+.L880:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
-	.global	FtlScanSysBlk
+	.global	Ftl_write_map_blk_to_last_page
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlScanSysBlk, %function
-FtlScanSysBlk:
-	@ args = 0, pretend = 0, frame = 24
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #24
-	mov	r5, #0
-	ldr	r4, .L910
-	movw	r3, #3944
-	mov	r1, r5
-	ldr	r2, [r4, #128]
-	mov	r6, r4
-	ldr	r0, [r4, #3892]
-	strh	r5, [r4, r3]	@ movhi
-	strh	r5, [r4, #144]	@ movhi
-	lsl	r2, r2, #2
-	bl	ftl_memset
-	ldr	r2, [r4, #128]
-	mov	r1, r5
-	ldr	r0, [r4, #3868]
-	lsl	r2, r2, #1
-	bl	ftl_memset
-	ldrh	r2, [r4, #120]
-	mov	r1, r5
-	ldr	r0, [r4, #3880]
-	lsl	r2, r2, #2
-	bl	ftl_memset
-	ldrh	r2, [r4, #120]
-	mov	r1, r5
-	ldr	r0, [r4, #148]
-	mov	r5, r4
-	lsl	r2, r2, #1
-	bl	ftl_memset
-	mvn	r3, #0
-	str	r3, [r4, #2576]
-	str	r3, [r4, #2580]
-	str	r3, [r4, #2584]
-	ldrh	r3, [r4, #40]
-	str	r3, [fp, #-44]
-.L830:
-	ldrh	r3, [r6, #42]
-	ldr	r2, [fp, #-44]
+	ldrh	r3, [r0]
+	movw	r2, #65535
+	mov	r4, r0
+	ldr	r5, [r0, #12]
 	cmp	r3, r2
-	bls	.L871
-	ldr	r1, [r6, #3176]
-	mov	r7, #0
-	ldrh	r2, [r6, #32]
-	mov	r10, r7
-	ldr	r8, [r6, #3832]
-	ldr	r3, [r6, #3172]
-	str	r1, [fp, #-48]
-	ldrh	r9, [r6, #112]
-	ldr	ip, .L910+4
-	b	.L872
-.L832:
-	ldrb	r0, [ip, r7]	@ zero_extendqisi2
-	ldr	r1, [fp, #-44]
-	str	r3, [fp, #-64]
-	str	r2, [fp, #-60]
-	str	ip, [fp, #-56]
-	bl	V2P_block
-	str	r0, [fp, #-52]
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #0
-	ldr	ip, [fp, #-56]
-	ldr	r2, [fp, #-60]
-	ldr	r3, [fp, #-64]
-	bne	.L831
-	mov	r1, #20
-	mla	r0, r1, r10, r8
-	ldr	r1, [fp, #-52]
-	lsl	r1, r1, #10
-	stmib	r0, {r1, r3}
-	mul	r1, r9, r10
-	add	lr, r1, #3
-	cmp	r1, #0
-	movlt	r1, lr
-	ldr	lr, [fp, #-48]
-	bic	r1, r1, #3
-	add	r1, lr, r1
-	str	r1, [r0, #12]
-	add	r1, r10, #1
-	uxth	r10, r1
-.L831:
-	add	r7, r7, #1
-.L872:
-	uxth	r1, r7
-	cmp	r2, r1
-	bhi	.L832
-	cmp	r10, #0
-	bne	.L833
-.L870:
-	ldr	r3, [fp, #-44]
+	bne	.L883
+	ldrh	r3, [r0, #8]
+	cmp	r3, #0
+	beq	.L884
+	movw	r2, #641
+	ldr	r1, .L892
+	ldr	r0, .L892+4
+	bl	sftl_printk
+.L884:
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	mov	r3, #0
+	strh	r0, [r5]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	strh	r3, [r4]	@ movhi
+	ldr	r3, [r4, #28]
 	add	r3, r3, #1
-	uxth	r3, r3
-	str	r3, [fp, #-44]
-	b	.L830
-.L833:
+	str	r3, [r4, #28]
+.L885:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L883:
+	lsl	r3, r3, #1
+	ldr	r2, [r0, #28]
+	ldr	r6, [r0, #24]
+	mov	r1, #255
+	ldrh	r7, [r5, r3]
+	ldrh	r3, [r0, #2]
+	ldr	r5, .L892+8
+	orr	r3, r3, r7, lsl #10
+	str	r3, [r5, #3448]
+	ldr	r3, [r5, #3292]
+	str	r3, [r5, #3452]
+	ldr	r3, [r5, #3324]
+	str	r3, [r5, #3456]
+	str	r2, [r3, #4]
+	ldr	r2, .L892+12
+	strh	r2, [r3, #8]	@ movhi
+	ldrh	r2, [r0, #4]
+	strh	r7, [r3, #2]	@ movhi
+	strh	r2, [r3]	@ movhi
+	ldrh	r2, [r5, #104]
+	ldr	r0, [r5, #3292]
+	lsl	r2, r2, #3
+	bl	ftl_memset
+	mov	r2, #0
+	mov	r3, r2
+.L886:
+	ldrh	r0, [r4, #6]
+	uxth	r1, r2
+	cmp	r0, r1
+	bhi	.L888
 	mov	r2, #1
-	mov	r1, r10
-	mov	r0, r8
-	bl	FlashReadPages
 	mov	r3, #0
-.L909:
-	str	r3, [fp, #-48]
-	ldrh	r3, [fp, #-48]
-	cmp	r10, r3
-	bls	.L870
-	ldr	r3, [fp, #-48]
-	mov	r9, #20
-	mul	r9, r9, r3
-	ldr	r3, [r4, #3832]
-	add	r2, r3, r9
-	ldr	r3, [r3, r9]
-	ldr	r1, [r2, #4]
-	ldr	r7, [r2, #12]
-	cmn	r3, #1
-	lsr	ip, r1, #10
-	uxth	r8, ip
-	bne	.L837
-	mov	r3, #16
-.L839:
-	ldr	r0, [r4, #3832]
-	str	ip, [fp, #-56]
-	str	r3, [fp, #-52]
-	add	r0, r0, r9
-	ldr	r2, [r0, #4]
-	add	r2, r2, #1
-	str	r2, [r0, #4]
-	mov	r2, #1
 	mov	r1, r2
-	bl	FlashReadPages
-	ldrh	r2, [r7]
-	movw	r3, #65535
-	ldr	ip, [fp, #-56]
-	cmp	r2, r3
-	ldr	r3, [fp, #-52]
-	bne	.L836
-	ldr	r3, [r4, #3832]
-	mvn	r2, #0
-	str	r2, [r3, r9]
-	ldr	r3, [r4, #3832]
-	ldr	r3, [r3, r9]
-	cmp	r3, r2
-	bne	.L837
-.L838:
-	mov	r1, #0
-	uxth	r0, ip
-	bl	FtlFreeSysBlkQueueIn
-	b	.L842
-.L836:
-	ldr	r2, [r4, #3832]
-	ldr	r2, [r2, r9]
-	cmn	r2, #1
-	bne	.L837
-	sub	r3, r3, #1
-	uxth	r3, r3
-	cmp	r3, #0
-	bne	.L839
-	b	.L838
-.L837:
-	ldr	r2, [r6, #2540]
-	ldr	r3, [r7, #4]
-	cmn	r2, #1
-	beq	.L840
-	cmp	r2, r3
-	bhi	.L841
-.L840:
-	cmn	r3, #1
-	addne	r2, r3, #1
-	strne	r2, [r5, #2540]
-.L841:
-	ldrh	r2, [r7]
-	movw	r1, #61604
-	cmp	r2, r1
-	beq	.L843
-	bhi	.L844
-	movw	r3, #61574
-	cmp	r2, r3
-	beq	.L845
-.L842:
-	ldr	r3, [fp, #-48]
+	ldr	r0, .L892+16
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
 	add	r3, r3, #1
-	b	.L909
-.L844:
-	movw	r3, #61634
-	cmp	r2, r3
-	beq	.L846
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L838
-	b	.L842
-.L846:
-	ldr	r9, .L910+8
-	ldr	r3, [r4, #128]
-	ldrh	r2, [r9]
-	cmp	r2, r3
-	bls	.L848
-	movw	r2, #1211
-	ldr	r1, .L910+12
-	ldr	r0, .L910+16
-	bl	printk
-.L848:
-	ldr	r0, [r4, #128]
-	ldrh	r2, [r9]
-	ldr	ip, [r4, #3892]
-	uxth	r1, r0
-	sub	r3, r1, #1
-	sub	r1, r1, r2
-	sub	r1, r1, #1
-	sxth	r3, r3
-	sxth	r1, r1
-	str	r1, [fp, #-52]
-.L849:
-	ldr	r1, [fp, #-52]
-	cmp	r3, r1
-	bgt	.L855
-	cmp	r3, #0
-	bge	.L887
-	b	.L842
-.L855:
-	lsl	lr, r3, #2
-	ldr	r1, [r7, #4]
-	str	lr, [fp, #-56]
-	ldr	lr, [ip, r3, lsl #2]
-	cmp	r1, lr
-	bls	.L850
-	ldr	r1, [ip]
-	cmp	r1, #0
-	bne	.L851
-	cmp	r0, r2
-	addne	r2, r2, #1
-	strhne	r2, [r9]	@ movhi
-.L851:
-	uxth	ip, r3
-	mov	r1, #0
-.L852:
-	uxth	r0, r1
-	sxth	r2, r1
-	cmp	ip, r0
-	bhi	.L853
-	ldr	r1, [r7, #4]
-	cmp	r3, #0
-	ldr	r2, [r5, #3892]
-	ldr	r0, [fp, #-56]
-	str	r1, [r2, r0]
-	lsl	r2, r3, #1
-	ldr	r1, [r5, #3868]
-	strh	r8, [r1, r2]	@ movhi
-	blt	.L842
-	ldr	r2, .L910+8
-	ldr	r1, [r5, #128]
-	ldrh	r2, [r2]
-	sub	r1, r1, r2
-	sub	r1, r1, #1
-	sxth	r1, r1
-	cmp	r3, r1
-	bgt	.L842
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+	b	.L885
+.L888:
+	uxth	r1, r2
+	ldr	r0, [r6, r1, lsl #2]
+	cmp	r7, r0, lsr #10
+	bne	.L887
+	ldr	r0, [r5, #3292]
+	add	r3, r3, #1
+	uxth	r3, r3
+	str	r1, [r0, r3, lsl #3]
+	ldr	r0, [r6, r1, lsl #2]
+	ldr	r1, [r5, #3292]
+	add	r1, r1, r3, lsl #3
+	str	r0, [r1, #4]
 .L887:
 	add	r2, r2, #1
-	ldr	r1, [r7, #4]
-	strh	r2, [r9]	@ movhi
-	ldr	r2, [r4, #3892]
-	str	r1, [r2, r3, lsl #2]
-	lsl	r3, r3, #1
-	ldr	r2, [r4, #3868]
-.L907:
-	strh	r8, [r2, r3]	@ movhi
-	b	.L842
-.L853:
-	ldr	r0, [r6, #3892]
-	add	r1, r1, #1
-	add	lr, r0, r2, lsl #2
-	ldr	lr, [lr, #4]
-	str	lr, [r0, r2, lsl #2]
-	lsl	r2, r2, #1
-	ldr	r0, [r6, #3868]
-	add	lr, r0, r2
-	ldrh	lr, [lr, #2]
-	strh	lr, [r0, r2]	@ movhi
-	b	.L852
-.L850:
-	sub	r3, r3, #1
-	sxth	r3, r3
-	b	.L849
-.L845:
-	ldrh	r2, [r4, #144]
-	ldrh	r3, [r4, #120]
-	cmp	r2, r3
-	bls	.L858
-	movw	r2, #1252
-	ldr	r1, .L910+12
-	ldr	r0, .L910+16
-	bl	printk
-.L858:
-	ldrh	r2, [r4, #120]
-	ldrh	r1, [r4, #144]
-	ldr	ip, [r4, #3880]
-	sub	r0, r2, #1
-	sxth	r3, r0
-	sub	r0, r0, r1
-	str	r0, [fp, #-52]
-.L859:
-	ldr	r0, [fp, #-52]
-	cmp	r3, r0
-	ble	.L864
-	ldr	r9, [ip, r3, lsl #2]
-	lsl	lr, r3, #2
-	ldr	r0, [r7, #4]
-	cmp	r0, r9
-	bls	.L860
-	sub	r2, r2, r1
-	ldr	r0, [ip]
-	clz	r2, r2
-	uxth	ip, r3
-	lsr	r2, r2, #5
-	cmp	r0, #0
-	orrne	r2, r2, #1
-	cmp	r2, #0
-	addeq	r1, r1, #1
-	strheq	r1, [r5, #144]	@ movhi
-	mov	r1, #0
-.L862:
-	uxth	r0, r1
-	sxth	r2, r1
-	cmp	ip, r0
-	bhi	.L863
-	ldr	r1, [r7, #4]
-	ldr	r2, [r5, #3880]
-	str	r1, [r2, lr]
-	lsl	r2, r3, #1
-	ldr	r1, [r5, #148]
-	strh	r8, [r1, r2]	@ movhi
-.L864:
-	cmp	r3, #0
-	blt	.L842
-	ldrh	r2, [r5, #120]
-	ldrh	r1, [r5, #144]
-	sub	r2, r2, #1
-	sub	r2, r2, r1
-	sxth	r2, r2
-	cmp	r3, r2
-	bgt	.L842
-	add	r1, r1, #1
-	ldr	r2, [r5, #3880]
-	strh	r1, [r5, #144]	@ movhi
-	ldr	r1, [r7, #4]
-	str	r1, [r2, r3, lsl #2]
-	lsl	r3, r3, #1
-	ldr	r2, [r5, #148]
-	b	.L907
-.L863:
-	ldr	r0, [r6, #3880]
-	add	r1, r1, #1
-	add	r9, r0, r2, lsl #2
-	ldr	r9, [r9, #4]
-	str	r9, [r0, r2, lsl #2]
-	lsl	r2, r2, #1
-	ldr	r0, [r6, #148]
-	add	r9, r0, r2
-	ldrh	r9, [r9, #2]
-	strh	r9, [r0, r2]	@ movhi
-	b	.L862
-.L860:
+	b	.L886
+.L893:
+	.align	2
+.L892:
+	.word	.LANCHOR1+286
+	.word	.LC1
+	.word	.LANCHOR0
+	.word	-1291
+	.word	.LANCHOR0+3444
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	2
+	.global	FtlMapWritePage
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r7, .L912
+	mov	r4, r0
+	mov	r8, r1
+	mov	r9, r2
+	mov	r6, #0
+	mov	r5, r7
+.L895:
+	ldr	r3, [r7, #2524]
+	add	r3, r3, #1
+	str	r3, [r7, #2524]
+	ldrh	r3, [r7, #104]
+	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
-	sxth	r3, r3
-	b	.L859
-.L843:
-	ldr	r9, .L910+20
-	movw	r2, #65535
-	ldrh	r1, [r9]
-	cmp	r1, r2
-	strheq	r8, [r9]	@ movhi
-	beq	.L908
-	ldrh	r0, [r9, #4]
-	cmp	r0, r2
-	beq	.L867
-	mov	r1, #1
-	bl	FtlFreeSysBlkQueueIn
-.L867:
-	ldr	r3, [r7, #4]
-	ldr	r2, [r4, #2584]
 	cmp	r2, r3
-	strhcs	r8, [r9, #4]	@ movhi
-	bcs	.L842
-	ldrh	r3, [r9]
-	strh	r8, [r9]	@ movhi
-	strh	r3, [r9, #4]	@ movhi
-	ldr	r3, [r7, #4]
-.L908:
-	str	r3, [r4, #2584]
-	b	.L842
-.L871:
-	ldr	r2, [r6, #3868]
-	ldrh	r3, [r2]
+	bge	.L896
+	ldrh	r2, [r4]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L897
+.L896:
+	mov	r0, r4
+	bl	Ftl_write_map_blk_to_last_page
+.L897:
+	ldrh	r3, [r4]
+	ldr	r2, [r4, #12]
+	lsl	r3, r3, #1
+	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L873
-.L876:
-	ldr	r1, [r4, #148]
-	ldrh	r2, [r1]
-	cmp	r2, #0
-	beq	.L874
-.L875:
-	movw	r3, #3944
-	ldrh	r2, [r4, r3]
-	ldr	r3, [r4, #128]
+	bne	.L898
+	movw	r2, #699
+	ldr	r1, .L912+4
+	ldr	r0, .L912+8
+	bl	sftl_printk
+.L898:
+	ldrh	r2, [r4]
+	ldrh	r3, [r4, #10]
 	cmp	r2, r3
-	bls	.L906
-	movw	r2, #1377
-	ldr	r1, .L910+12
-	ldr	r0, .L910+16
-	bl	printk
-.L906:
-	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L873:
-	movw	r1, #3944
-	ldrh	r1, [r6, r1]
-	cmp	r1, #0
-	ldrne	r1, [r6, #128]
-	beq	.L876
-.L877:
-	sxth	ip, r3
-	cmp	ip, r1
-	bcs	.L876
-	lsl	r0, ip, #1
-	add	r3, r3, #1
-	ldrh	r0, [r2, r0]
-	cmp	r0, #0
-	beq	.L877
-	mov	r3, ip
-	mov	lr, #0
-.L878:
-	ldr	r2, [r5, #128]
-	cmp	r3, r2
-	bcs	.L876
-	ldr	r1, [r5, #3868]
-	lsl	r2, r3, #1
-	sub	r0, r3, ip
-	lsl	r6, r0, #1
-	ldrh	r7, [r1, r2]
-	strh	r7, [r1, r6]	@ movhi
-	ldr	r1, [r5, #3892]
-	ldr	r6, [r1, r3, lsl #2]
+	bcc	.L899
+	mov	r2, #700
+	ldr	r1, .L912+4
+	ldr	r0, .L912+8
+	bl	sftl_printk
+.L899:
+	ldrh	r3, [r4]
+	mov	r1, #16
+	ldr	r2, [r4, #12]
+	ldr	r0, [r5, #3324]
+	lsl	r3, r3, #1
+	ldrh	r10, [r2, r3]
+	ldrh	r3, [r4, #2]
+	str	r0, [r5, #3456]
+	str	r9, [r5, #3452]
+	orr	r3, r3, r10, lsl #10
+	str	r3, [r5, #3448]
+	bl	__memzero
+	ldr	r3, [r5, #3456]
+	ldr	r2, [r4, #28]
+	ldr	r0, .L912+12
+	strh	r8, [r3, #8]	@ movhi
+	str	r2, [r3, #4]
+	ldrh	r2, [r4, #4]
+	strh	r10, [r3, #2]	@ movhi
+	strh	r2, [r3]	@ movhi
+	mov	r3, #1
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
 	add	r3, r3, #1
-	sxth	r3, r3
-	str	r6, [r1, r0, lsl #2]
-	ldr	r1, [r5, #3868]
-	strh	lr, [r1, r2]	@ movhi
-	b	.L878
-.L874:
-	ldrh	r3, [r4, #144]
+	uxth	r3, r3
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r2, [r5, #3444]
+	cmn	r2, #1
+	bne	.L900
+	ldr	r1, [r5, #3448]
+	add	r6, r6, #1
+	ldr	r0, .L912+16
+	uxth	r6, r6
+	bl	sftl_printk
+	ldrh	r3, [r4, #2]
+	cmp	r3, #2
+	ldrhls	r3, [r5, #104]
+	subls	r3, r3, #1
+	strhls	r3, [r4, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L902
+	mov	r2, r6
+	ldr	r1, [r5, #3448]
+	ldr	r0, .L912+20
+	bl	sftl_printk
+.L903:
+	b	.L903
+.L902:
+	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	ldrhne	r0, [r4, #120]
-	beq	.L875
-.L883:
-	sxth	r3, r2
-	cmp	r3, r0
-	mov	ip, r3
-	bge	.L875
-	lsl	lr, r3, #1
-	add	r2, r2, #1
-	ldrh	lr, [r1, lr]
-	cmp	lr, #0
-	beq	.L883
-	mov	lr, #0
-.L884:
-	ldrh	r2, [r5, #120]
-	cmp	r3, r2
-	bge	.L875
-	ldr	r1, [r5, #148]
-	lsl	r2, r3, #1
-	sub	r0, r3, ip
-	lsl	r6, r0, #1
-	ldrh	r7, [r1, r2]
-	strh	r7, [r1, r6]	@ movhi
-	ldr	r1, [r5, #3880]
-	ldr	r6, [r1, r3, lsl #2]
-	add	r3, r3, #1
-	sxth	r3, r3
-	str	r6, [r1, r0, lsl #2]
-	ldr	r1, [r5, #148]
-	strh	lr, [r1, r2]	@ movhi
-	b	.L884
+	beq	.L895
 .L911:
+	b	.L911
+.L900:
+	cmp	r3, #1
+	cmpne	r2, #256
+	beq	.L906
+	ldr	r0, [r4, #36]
+	cmp	r0, #0
+	beq	.L907
+.L906:
+	mov	r3, #0
+	str	r3, [r4, #36]
+	b	.L895
+.L907:
+	ldr	r2, [r5, #3448]
+	ldr	r3, [r4, #24]
+	str	r2, [r3, r8, lsl #2]
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L913:
+	.align	2
+.L912:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+317
+	.word	.LC1
+	.word	.LANCHOR0+3444
+	.word	.LC89
+	.word	.LC90
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	2
+	.global	load_l2p_region
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	load_l2p_region, %function
+load_l2p_region:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r4, .L921
+	uxth	r6, r0
+	uxth	r8, r1
+	ldrh	r3, [r4, #136]
+	cmp	r3, r6
+	bcs	.L915
+	movw	r2, #485
+	ldr	r1, .L921+4
+	ldr	r0, .L921+8
+	bl	sftl_printk
+.L915:
+	ldr	r3, [r4, #3368]
+	mov	r5, #12
+	ldr	r7, [r3, r6, lsl #2]
+	cmp	r7, #0
+	bne	.L916
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
+	ldrh	r2, [r4, #110]
+	mov	r1, #255
+	add	r3, r3, r5
+	ldr	r0, [r3, #8]
+	bl	ftl_memset
+	ldr	r3, [r4, #2492]
+	strh	r6, [r3, r5]	@ movhi
+	ldr	r3, [r4, #2492]
+	add	r5, r3, r5
+	str	r7, [r5, #4]
+.L917:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L916:
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
+	mov	r2, #1
+	ldr	r0, .L921+12
+	mov	r1, r2
+	str	r7, [r4, #3448]
+	add	r3, r3, r5
+	ldr	r3, [r3, #8]
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
+	str	r3, [r4, #3456]
+	bl	FlashReadPages
+	ldr	r8, [r4, #3456]
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L918
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L921+16
+	bl	sftl_printk
+	mov	r3, #4
+	ldr	r1, [r4, #3456]
+	mov	r2, r3
+	ldr	r0, .L921+20
+	bl	rknand_print_hex
+	ldrh	r3, [r4, #136]
+	mov	r2, #4
+	ldr	r1, [r4, #3368]
+	ldr	r0, .L921+24
+	bl	rknand_print_hex
+.L919:
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L920
+	mov	r2, #508
+	ldr	r1, .L921+4
+	ldr	r0, .L921+8
+	bl	sftl_printk
+.L920:
+	ldr	r3, [r4, #2492]
+	mov	r1, #0
+	add	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r6, [r3, r5]	@ movhi
+	b	.L917
+.L918:
+	ldr	r3, [r4, #3444]
+	cmp	r3, #256
+	bne	.L919
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L921+28
+	bl	sftl_printk
+	ldr	r3, [r4, #2492]
+	mov	r1, r6
+	ldr	r0, .L921+32
+	add	r3, r3, r5
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+	b	.L919
+.L922:
+	.align	2
+.L921:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+333
+	.word	.LC1
+	.word	.LANCHOR0+3444
+	.word	.LC91
+	.word	.LC92
+	.word	.LC93
+	.word	.LC94
+	.word	.LANCHOR0+3384
+	.size	load_l2p_region, .-load_l2p_region
+	.align	2
+	.global	ftl_map_blk_gc
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #8
+	mov	r4, r0
+	ldr	r6, [r0, #12]
+	ldr	r9, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	r3, [r4, #10]
+	ldrh	r2, [r4, #8]
+	ldr	r5, .L939
+	sub	r3, r3, #5
+	cmp	r2, r3
+	blt	.L924
+	uxth	r0, r0
+	lsl	r0, r0, #1
+	ldrh	r8, [r6, r0]
+	cmp	r8, #0
+	beq	.L924
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	bne	.L924
+	mov	r2, #1
+	str	r2, [r4, #32]
+	strh	r3, [r6, r0]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldrh	r3, [r5, #104]
+	cmp	r2, r3
+	bcc	.L925
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L925:
+	mov	r6, #0
+.L926:
+	ldrh	r3, [r4, #6]
+	uxth	r10, r6
+	cmp	r3, r10
+	bhi	.L933
+	mov	r1, #1
+	mov	r0, r8
+	bl	FtlFreeSysBlkQueueIn
+	mov	r3, #0
+	str	r3, [r4, #32]
+.L924:
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r5, #104]
+	cmp	r2, r3
+	bcc	.L934
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L934:
+	mov	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L933:
+	uxth	r7, r6
+	add	r3, r9, r7, lsl #2
+	str	r3, [fp, #-44]
+	ldr	r3, [r9, r7, lsl #2]
+	cmp	r8, r3, lsr #10
+	bne	.L927
+	ldr	r3, [r5, #3296]
+	ldr	r0, .L939+4
+	str	r3, [r5, #3452]
+	ldr	r3, [r5, #3324]
+	str	r3, [r5, #3456]
+	ldr	r2, [r9, r7, lsl #2]
+	str	r3, [fp, #-48]
+	str	r2, [r5, #3448]
+	mov	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r3, [fp, #-48]
+	ldrh	r2, [r3, #8]
+	cmp	r2, r10
+	beq	.L928
+	movw	r2, #611
+	ldr	r1, .L939+8
+	ldr	r0, .L939+12
+	bl	sftl_printk
+	ldr	r3, [fp, #-48]
+.L928:
+	ldr	r2, [r5, #3444]
+	cmn	r2, #1
+	bne	.L929
+.L931:
+	ldr	r2, [fp, #-44]
+	mov	r3, #0
+	str	r3, [r2]
+.L930:
+	b	.L930
+.L929:
+	ldrh	r2, [r3, #8]
+	cmp	r2, r10
+	bne	.L931
+	ldrh	r2, [r3]
+	ldrh	r3, [r4, #4]
+	cmp	r2, r3
+	bne	.L931
+	ldr	r2, [r5, #3452]
+	mov	r1, r7
+	mov	r0, r4
+	bl	FtlMapWritePage
+.L927:
+	add	r6, r6, #1
+	b	.L926
+.L940:
 	.align	2
-.L910:
+.L939:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+60
-	.word	.LANCHOR0+3944
-	.word	.LANCHOR1+328
+	.word	.LANCHOR0+3444
+	.word	.LANCHOR1+349
 	.word	.LC1
-	.word	.LANCHOR0+2576
-	.size	FtlScanSysBlk, .-FtlScanSysBlk
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
 	.global	FtlMapTblRecovery
 	.syntax unified
@@ -6214,7 +6571,7 @@ FtlMapTblRecovery:
 	mov	r1, #0
 	ldr	r3, [r0, #24]
 	mov	r4, r0
-	ldr	r6, .L939
+	ldr	r6, .L968
 	mov	r7, #0
 	ldr	r8, [r0, #12]
 	str	r3, [fp, #-44]
@@ -6229,27 +6586,27 @@ FtlMapTblRecovery:
 	ldr	r3, [fp, #-48]
 	lsl	r2, r3, #2
 	bl	ftl_memset
-	ldr	r3, [r6, #3280]
+	ldr	r3, [r6, #3292]
 	mvn	r2, #0
-	ldr	r9, [r6, #3284]
+	ldr	r9, [r6, #3324]
 	str	r7, [r4, #32]
-	str	r3, [r6, #3268]
-	str	r9, [r6, #3272]
+	str	r3, [r6, #3452]
+	str	r9, [r6, #3456]
 	strh	r2, [r4]	@ movhi
 	strh	r2, [r4, #2]	@ movhi
 	mov	r2, #1
 	str	r7, [r4, #28]
 	str	r2, [r4, #36]
-.L913:
+.L942:
 	ldr	r3, [fp, #-52]
 	sxth	r2, r7
 	cmp	r2, r3
-	bge	.L930
+	bge	.L959
 	ldr	r3, [fp, #-52]
 	lsl	r0, r2, #1
 	sub	r1, r3, #1
 	cmp	r2, r1
-	bne	.L914
+	bne	.L943
 	add	r10, r8, r0
 	mov	r1, #1
 	ldrh	r0, [r8, r0]
@@ -6260,26 +6617,26 @@ FtlMapTblRecovery:
 	sxth	r1, r0
 	ldr	r2, [fp, #-52]
 	add	r0, r0, #1
-	ldr	ip, .L939+4
+	ldr	ip, .L968+4
 	strh	r7, [r4]	@ movhi
 	add	r7, r1, #1
 	strh	r0, [r4, #2]	@ movhi
 	ldr	r2, [r3, r2, lsl #2]
 	str	r2, [r4, #28]
-.L915:
+.L944:
 	sxth	r2, r8
 	cmp	r2, r7
-	blt	.L917
-.L930:
+	blt	.L946
+.L959:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #104]
 	cmp	r2, r3
-	bne	.L919
+	bne	.L948
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L919:
+.L948:
 	mov	r0, r4
 	bl	ftl_map_blk_gc
 	mov	r0, r4
@@ -6287,102 +6644,102 @@ FtlMapTblRecovery:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L917:
+.L946:
 	ldrh	r1, [r10]
 	mov	r0, ip
 	str	ip, [fp, #-52]
 	orr	r2, r2, r1, lsl #10
-	str	r2, [r6, #3264]
+	str	r2, [r6, #3448]
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-	ldr	r2, [r6, #3260]
+	ldr	r2, [r6, #3444]
 	ldr	ip, [fp, #-52]
 	cmn	r2, #1
-	beq	.L916
+	beq	.L945
 	ldrh	r2, [r9, #8]
 	ldr	r3, [fp, #-48]
 	cmp	r3, r2
-	bls	.L916
+	bls	.L945
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r9]
 	cmp	r0, r1
-	ldreq	r1, [r6, #3264]
+	ldreq	r1, [r6, #3448]
 	ldreq	r3, [fp, #-44]
 	streq	r1, [r3, r2, lsl #2]
-.L916:
+.L945:
 	add	r8, r8, #1
-	b	.L915
-.L914:
-	ldr	r2, [r5, #3280]
+	b	.L944
+.L943:
+	ldr	r2, [r5, #3292]
 	add	r3, r8, r0
 	str	r3, [fp, #-60]
-	str	r2, [r5, #3268]
+	str	r2, [r5, #3452]
 	ldrh	r2, [r5, #104]
 	ldrh	r1, [r8, r0]
-	ldr	r0, .L939+4
+	ldr	r0, .L968+4
 	sub	r2, r2, #1
 	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3264]
+	str	r2, [r5, #3448]
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-	ldr	r2, [r5, #3260]
+	ldr	r2, [r5, #3444]
 	cmn	r2, #1
-	beq	.L932
+	beq	.L961
 	ldrh	r1, [r9]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
-	bne	.L932
+	bne	.L961
 	ldrh	r1, [r9, #8]
 	movw	r2, #64245
 	cmp	r1, r2
-	beq	.L921
-.L932:
+	beq	.L950
+.L961:
 	mov	r10, #0
-.L922:
+.L951:
 	ldrh	r1, [r5, #104]
 	sxth	r2, r10
 	cmp	r2, r1
-	bge	.L928
+	bge	.L957
 	ldr	r3, [fp, #-60]
-	ldr	r0, .L939+4
+	ldr	r0, .L968+4
 	ldrh	r1, [r3]
 	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3264]
+	str	r2, [r5, #3448]
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-	ldr	r2, [r5, #3260]
+	ldr	r2, [r5, #3444]
 	cmn	r2, #1
-	beq	.L926
+	beq	.L955
 	ldrh	r2, [r9, #8]
 	ldr	r3, [fp, #-48]
 	cmp	r3, r2
-	bls	.L926
+	bls	.L955
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r9]
 	cmp	r0, r1
-	ldreq	r1, [r5, #3264]
+	ldreq	r1, [r5, #3448]
 	ldreq	r3, [fp, #-44]
 	streq	r1, [r3, r2, lsl #2]
-.L926:
+.L955:
 	add	r10, r10, #1
-	b	.L922
-.L921:
+	b	.L951
+.L950:
 	mov	r0, #0
 	mov	lr, #4
-.L923:
+.L952:
 	ldrh	r1, [r5, #104]
 	sxth	r2, r0
 	sub	r1, r1, #1
 	cmp	r2, r1
-	blt	.L925
-.L928:
+	blt	.L954
+.L957:
 	add	r7, r7, #1
-	b	.L913
-.L925:
-	ldr	ip, [r5, #3280]
+	b	.L942
+.L954:
+	ldr	ip, [r5, #3292]
 	add	r0, r0, #1
 	ldr	r3, [fp, #-48]
 	ldr	r1, [ip, r2, lsl #3]
@@ -6393,12 +6750,12 @@ FtlMapTblRecovery:
 	movhi	r1, r10
 	ldrhi	r2, [ip, r2]
 	strhi	r2, [r3, r1, lsl #2]
-	b	.L923
-.L940:
+	b	.L952
+.L969:
 	.align	2
-.L939:
+.L968:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
+	.word	.LANCHOR0+3444
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
 	.global	FtlLoadVonderInfo
@@ -6412,555 +6769,949 @@ FtlLoadVonderInfo:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L942
+	ldr	r3, .L971
 	ldrh	r2, [r3, #120]
-	add	r0, r3, #3936
+	add	r0, r3, #3456
 	add	r0, r0, #12
 	strh	r2, [r0, #10]	@ movhi
-	ldr	r2, .L942+4
+	ldr	r2, .L971+4
 	strh	r2, [r0, #4]	@ movhi
 	ldrh	r2, [r3, #144]
 	strh	r2, [r0, #8]	@ movhi
 	ldrh	r2, [r3, #122]
 	strh	r2, [r0, #6]	@ movhi
 	ldr	r2, [r3, #148]
-	str	r2, [r3, #3960]
-	ldr	r2, [r3, #3880]
-	str	r2, [r3, #3964]
-	ldr	r2, [r3, #3876]
-	str	r2, [r3, #3968]
-	ldr	r2, [r3, #3884]
-	str	r2, [r3, #3972]
+	str	r2, [r3, #3480]
+	ldr	r2, [r3, #3360]
+	str	r2, [r3, #3484]
+	ldr	r2, [r3, #3356]
+	str	r2, [r3, #3488]
+	ldr	r2, [r3, #3364]
+	str	r2, [r3, #3492]
 	bl	FtlMapTblRecovery
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L943:
+.L972:
+	.align	2
+.L971:
+	.word	.LANCHOR0
+	.word	-3962
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlLoadMapInfo
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	bl	FtlL2PDataInit
+	ldr	r0, .L974
+	bl	FtlMapTblRecovery
+	mov	r0, #0
+	ldmfd	sp, {fp, sp, pc}
+.L975:
+	.align	2
+.L974:
+	.word	.LANCHOR0+3384
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	flush_l2p_region
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r5, .L977
+	uxth	r0, r0
+	mov	r4, #12
+	mul	r4, r4, r0
+	ldr	r3, [r5, #2492]
+	add	r0, r5, #3376
+	add	r0, r0, #8
+	add	r2, r3, r4
+	ldrh	r1, [r3, r4]
+	ldr	r2, [r2, #8]
+	bl	FtlMapWritePage
+	ldr	r0, [r5, #2492]
+	add	r4, r0, r4
+	mov	r0, #0
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L978:
+	.align	2
+.L977:
+	.word	.LANCHOR0
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	2
+	.global	log2phys
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	log2phys, %function
+log2phys:
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #8
+	mov	r6, r0
+	ldr	r4, .L992
+	mov	r7, r1
+	mov	r10, r2
+	ldr	r3, [r4, #2504]
+	ldrh	r5, [r4, #108]
+	cmp	r0, r3
+	bcc	.L980
+	movw	r2, #811
+	ldr	r1, .L992+4
+	ldr	r0, .L992+8
+	bl	sftl_printk
+.L980:
+	ldr	r3, [r4, #2504]
+	cmp	r6, r3
+	bcs	.L981
+	add	r5, r5, #7
+	ldrh	r0, [r4, #138]
+	lsr	r3, r6, r5
+	ldr	ip, [r4, #2492]
+	mov	r1, #0
+	str	r3, [fp, #-44]
+	mov	r2, #12
+	ldrh	r9, [fp, #-44]
+.L982:
+	uxth	r8, r1
+	cmp	r8, r0
+	bcc	.L987
+	str	r2, [fp, #-48]
+	bl	select_l2p_ram_region
+	ldr	r2, [fp, #-48]
+	mov	r8, r0
+	ldr	r1, [r4, #2492]
+	mul	r2, r2, r0
+	add	ip, r1, r2
+	ldrh	r1, [r1, r2]
+	movw	r2, #65535
+	cmp	r1, r2
+	beq	.L988
+	ldr	r2, [ip, #4]
+	cmp	r2, #0
+	bge	.L988
+	bl	flush_l2p_region
+.L988:
+	mov	r1, r8
+	ldrh	r0, [fp, #-44]
+	bl	load_l2p_region
+	b	.L984
+.L981:
+	cmp	r10, #0
+	mvn	r0, #0
+	streq	r0, [r7]
+.L979:
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L987:
+	add	r1, r1, #1
+	mla	lr, r2, r1, ip
+	ldrh	lr, [lr, #-12]
+	cmp	lr, r9
+	bne	.L982
+.L984:
+	mvn	r2, #0
+	cmp	r10, #0
+	bic	r5, r6, r2, lsl r5
+	mov	r2, #12
+	uxth	r5, r5
+	bne	.L985
+	ldr	r1, [r4, #2492]
+	mla	r2, r2, r8, r1
+	ldr	r2, [r2, #8]
+	ldr	r2, [r2, r5, lsl #2]
+	str	r2, [r7]
+.L986:
+	ldr	r1, [r4, #2492]
+	mov	r2, #12
+	mov	r0, #0
+	mla	r3, r2, r8, r1
+	ldr	r2, [r3, #4]
+	cmn	r2, #1
+	addne	r2, r2, #1
+	strne	r2, [r3, #4]
+	b	.L979
+.L985:
+	mul	r2, r2, r8
+	ldr	r1, [r4, #2492]
+	ldr	r0, [r7]
+	add	r1, r1, r2
+	ldr	r1, [r1, #8]
+	str	r0, [r1, r5, lsl #2]
+	ldr	r1, [r4, #2492]
+	add	r2, r1, r2
+	ldr	r1, [r2, #4]
+	orr	r1, r1, #-2147483648
+	str	r1, [r2, #4]
+	ldr	r2, .L992+12
+	strh	r9, [r2]	@ movhi
+	b	.L986
+.L993:
+	.align	2
+.L992:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+364
+	.word	.LC1
+	.word	.LANCHOR0+2496
+	.size	log2phys, .-log2phys
+	.align	2
+	.global	FtlReUsePrevPpa
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	@ args = 0, pretend = 0, frame = 4
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #4
+	mov	r6, r0
+	ldr	r7, .L1004
+	ubfx	r0, r1, #10, #16
+	str	r1, [fp, #-32]
+	bl	P2V_block_in_plane
+	ldr	r2, [r7, #2324]
+	lsl	r5, r0, #1
+	ldrh	r3, [r2, r5]
+	cmp	r3, #0
+	bne	.L995
+	ldr	r4, [r7, #2340]
+	cmp	r4, #0
+	beq	.L996
+	movw	r2, #2344
+	movw	lr, #65535
+	ldrh	ip, [r7, r2]
+	ldr	r2, [r7, #2316]
+	sub	r4, r4, r2
+	ubfx	r4, r4, #3, #16
+.L997:
+	uxth	r1, r3
+	cmp	ip, r1
+	bls	.L996
+	cmp	r4, r0
+	bne	.L998
+	mov	r1, r4
+	ldr	r0, .L1004+4
+	bl	List_remove_node
+	movw	r3, #2344
+	ldrh	r3, [r7, r3]
+	cmp	r3, #0
+	bne	.L999
+	movw	r2, #1699
+	ldr	r1, .L1004+8
+	ldr	r0, .L1004+12
+	bl	sftl_printk
+.L999:
+	movw	r2, #2344
+	mov	r0, r4
+	ldrh	r3, [r7, r2]
+	sub	r3, r3, #1
+	strh	r3, [r7, r2]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r7, #2324]
+	ldrh	r3, [r2, r5]
+.L995:
+	add	r3, r3, #1
+	strh	r3, [r2, r5]	@ movhi
+	b	.L996
+.L998:
+	lsl	r4, r4, #3
+	add	r3, r3, #1
+	ldrh	r4, [r2, r4]
+	cmp	r4, lr
+	bne	.L997
+.L996:
+	mov	r2, #1
+	sub	r1, fp, #32
+	mov	r0, r6
+	bl	log2phys
+	ldmib	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L1005:
 	.align	2
-.L942:
+.L1004:
 	.word	.LANCHOR0
-	.word	-3962
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.word	.LANCHOR0+2340
+	.word	.LANCHOR1+373
+	.word	.LC1
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
-	.global	FtlL2PDataInit
+	.global	ftl_check_vpc
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlL2PDataInit, %function
-FtlL2PDataInit:
-	@ args = 0, pretend = 0, frame = 0
+	.type	ftl_check_vpc, %function
+ftl_check_vpc:
+	@ args = 0, pretend = 0, frame = 4
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L947
-	mov	r1, #0
-	mvn	r5, #0
-	ldr	r2, [r4, #128]
-	ldr	r0, [r4, #3872]
-	lsl	r2, r2, #1
-	bl	ftl_memset
-	ldrh	r3, [r4, #110]
-	mov	r1, #255
-	ldrh	r2, [r4, #138]
-	ldr	r0, [r4, #3896]
-	mul	r2, r2, r3
-	bl	ftl_memset
+	sub	sp, sp, #4
+	mov	r4, #0
+	ldr	r6, .L1030
+	ldr	r1, .L1030+4
+	ldr	r0, .L1030+8
+	mov	r5, r6
+	bl	sftl_printk
+	mov	r1, #8192
+	ldr	r0, .L1030+12
+	bl	__memzero
+.L1007:
+	ldr	r3, [r6, #2504]
+	cmp	r4, r3
+	bcc	.L1009
+	ldr	r8, .L1030+12
+	mov	r4, #0
+	ldr	r9, .L1030+16
+	mov	r6, r4
+.L1010:
+	ldrh	r2, [r5, #40]
+	uxth	r3, r4
+	cmp	r2, r3
+	bhi	.L1012
+	ldr	r4, [r5, #2340]
+	cmp	r4, #0
+	beq	.L1013
+	movw	r3, #2344
+	ldr	r9, .L1030+12
+	ldrh	r8, [r5, r3]
+	mov	r7, #0
+	ldr	r3, [r5, #2316]
+	ldr	r10, .L1030+20
+	sub	r4, r4, r3
+	ubfx	r4, r4, #3, #16
+.L1014:
+	uxth	r3, r7
+	cmp	r8, r3
+	bls	.L1013
+	ldr	r2, [r5, #2324]
+	lsl	r3, r4, #1
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	beq	.L1015
+	mov	r6, #1
+	ldrh	r3, [r9, r3]
+	mov	r1, r4
+	mov	r0, r10
+	bl	sftl_printk
+.L1015:
+	ldr	r3, [r5, #2316]
+	lsl	r4, r4, #3
+	add	r7, r7, #1
+	ldrh	r4, [r3, r4]
+	movw	r3, #65535
+	cmp	r4, r3
+	bne	.L1014
+.L1013:
+	cmp	r6, #0
+	ldmibeq	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+	movw	r2, #2343
+	ldr	r1, .L1030+4
+	ldr	r0, .L1030+24
+	bl	sftl_printk
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1009:
 	mov	r2, #0
-	mov	r3, r4
-	mov	lr, #12
-	mov	r4, r2
-.L945:
-	ldrh	r0, [r3, #138]
-	uxth	r1, r2
-	add	ip, r2, #1
-	cmp	r0, r1
-	bhi	.L946
-	ldr	r2, .L947+4
-	mvn	r1, #0
-	strh	r1, [r2, #2]	@ movhi
-	strh	r1, [r2]	@ movhi
-	ldr	r1, [r3, #128]
-	strh	r1, [r2, #10]	@ movhi
-	ldr	r1, .L947+8
-	strh	r1, [r2, #4]	@ movhi
-	movw	r1, #3944
-	ldrh	r1, [r3, r1]
-	strh	r1, [r2, #8]	@ movhi
-	ldrh	r1, [r3, #136]
-	strh	r1, [r2, #6]	@ movhi
-	ldr	r2, [r3, #3868]
-	str	r2, [r3, #3916]
-	ldr	r2, [r3, #3892]
-	str	r2, [r3, #3920]
-	ldr	r2, [r3, #3872]
-	str	r2, [r3, #3924]
-	ldr	r2, [r3, #3888]
-	str	r2, [r3, #3928]
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L946:
-	uxth	r2, r2
-	ldr	r1, [r3, #2492]
-	mul	r0, lr, r2
-	add	r6, r1, r0
-	str	r4, [r6, #4]
-	strh	r5, [r1, r0]	@ movhi
-	ldr	r1, [r3, #2492]
-	add	r1, r1, r0
-	ldrh	r0, [r3, #110]
-	mul	r2, r2, r0
-	ldr	r0, [r3, #3896]
-	bic	r2, r2, #3
-	add	r2, r0, r2
-	str	r2, [r1, #8]
-	mov	r2, ip
-	b	.L945
-.L948:
+	sub	r1, fp, #44
+	mov	r0, r4
+	bl	log2phys
+	ldr	r0, [fp, #-44]
+	cmn	r0, #1
+	beq	.L1008
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, .L1030+12
+	lsl	r0, r0, #1
+	ldrh	r3, [r2, r0]
+	add	r3, r3, #1
+	strh	r3, [r2, r0]	@ movhi
+.L1008:
+	add	r4, r4, #1
+	b	.L1007
+.L1012:
+	uxth	r1, r4
+	ldr	r3, [r5, #2324]
+	lsl	r7, r1, #1
+	ldrh	r2, [r3, r7]
+	ldrh	r3, [r8, r7]
+	cmp	r2, r3
+	beq	.L1011
+	mov	r0, r9
+	bl	sftl_printk
+	ldr	r3, [r5, #2324]
+	movw	r2, #65535
+	ldrh	r3, [r3, r7]
+	cmp	r3, r2
+	beq	.L1011
+	ldrh	r2, [r8, r7]
+	cmp	r2, r3
+	movhi	r6, #1
+.L1011:
+	add	r4, r4, #1
+	b	.L1010
+.L1031:
 	.align	2
-.L947:
+.L1030:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3904
-	.word	-3902
-	.size	FtlL2PDataInit, .-FtlL2PDataInit
-	.align	2
-	.global	FtlLoadMapInfo
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlLoadMapInfo, %function
-FtlLoadMapInfo:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{fp, ip, lr, pc}
-	sub	fp, ip, #4
-	bl	FtlL2PDataInit
-	ldr	r0, .L950
-	bl	FtlMapTblRecovery
-	mov	r0, #0
-	ldmfd	sp, {fp, sp, pc}
-.L951:
-	.align	2
-.L950:
-	.word	.LANCHOR0+3904
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.word	.LANCHOR1+389
+	.word	.LC95
+	.word	check_vpc_table
+	.word	.LC96
+	.word	.LC97
+	.word	.LC1
+	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	2
-	.global	FtlVariablesInit
+	.global	ftl_scan_all_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlVariablesInit, %function
-FtlVariablesInit:
-	@ args = 0, pretend = 0, frame = 0
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
+	@ args = 0, pretend = 0, frame = 4
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L953
-	mvn	r3, #0
-	movw	r2, #3992
+	sub	sp, sp, #24
 	mov	r5, #0
-	strh	r3, [r4, r2]	@ movhi
-	mov	r1, r5
-	ldrh	r2, [r4, #120]
-	ldr	r0, [r4, #148]
-	str	r3, [r4, #4004]
-	str	r5, [r4, #3988]
-	lsl	r2, r2, #1
-	str	r5, [r4, #3996]
-	str	r5, [r4, #4000]
-	strh	r5, [r4, #144]	@ movhi
-	bl	ftl_memset
-	ldrh	r2, [r4, #42]
+	ldr	r6, .L1040
+	mov	r1, #0
+	ldr	r0, .L1040+4
+	bl	sftl_printk
+	mov	r4, r6
+.L1033:
+	ldr	r3, [r6, #2504]
+	cmp	r5, r3
+	bcc	.L1039
+	sub	sp, fp, #28
+	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
+.L1039:
+	mov	r2, #0
+	sub	r1, fp, #32
+	mov	r0, r5
+	bl	log2phys
+	ubfx	r3, r5, #0, #11
+	cmp	r3, #0
+	bne	.L1034
+	ldr	r2, [fp, #-32]
 	mov	r1, r5
-	ldr	r0, [r4, #2328]
-	lsl	r2, r2, #1
-	bl	ftl_memset
-	ldrh	r2, [r4, #42]
+	ldr	r0, .L1040+8
+	bl	sftl_printk
+.L1034:
+	ldr	r3, [fp, #-32]
+	cmn	r3, #1
+	beq	.L1036
+	str	r3, [r4, #3448]
+	mov	r2, #0
+	ldr	r3, [r4, #3292]
+	mov	r1, #1
+	ldr	r7, [r4, #3324]
+	ldr	r0, .L1040+12
+	str	r3, [r4, #3452]
+	str	r5, [r4, #3460]
+	str	r7, [r4, #3456]
+	str	r2, [r4, #3444]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	cmn	r3, #1
+	cmpne	r3, #256
+	beq	.L1037
+	ldr	r3, [r7, #8]
+	cmp	r5, r3
+	beq	.L1036
+.L1037:
+	ldr	r2, [r4, #3452]
+	ldr	r3, [r4, #3456]
+	ldr	r0, .L1040+16
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
 	mov	r1, r5
-	ldr	r0, [r4, #3856]
-	lsl	r2, r2, #1
-	bl	ftl_memset
-	add	r0, r4, #2256
-	mov	r1, #48
-	add	r0, r0, #12
-	bl	__memzero
-	add	r0, r4, #2624
-	mov	r1, #512
-	add	r0, r0, #12
-	bl	__memzero
-	bl	FtlGcBufInit
-	bl	FtlL2PDataInit
-	mov	r0, r5
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L954:
+	ldr	r2, [r2]
+	str	r2, [sp, #12]
+	ldr	r2, [r3, #12]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #4]
+	str	r2, [sp]
+	ldr	r3, [r3]
+	ldr	r2, [r4, #3448]
+	bl	sftl_printk
+.L1036:
+	add	r5, r5, #1
+	b	.L1033
+.L1041:
 	.align	2
-.L953:
+.L1040:
 	.word	.LANCHOR0
-	.size	FtlVariablesInit, .-FtlVariablesInit
+	.word	.LC98
+	.word	.LC99
+	.word	.LANCHOR0+3444
+	.word	.LC100
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	2
-	.global	SupperBlkListInit
+	.global	FtlGcScanTempBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	SupperBlkListInit, %function
-SupperBlkListInit:
-	@ args = 0, pretend = 0, frame = 16
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	@ args = 0, pretend = 0, frame = 44
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #16
-	mov	r5, #0
-	ldr	r4, .L966
-	mov	r1, #0
-	mov	r8, r5
-	mov	r7, r5
-	ldrh	r2, [r4, #42]
-	ldr	r0, [r4, #2316]
-	lsl	r2, r2, #3
-	bl	ftl_memset
-	add	r3, r4, #2336
-	movw	r2, #2344
-	str	r5, [r4, #2340]
-	str	r5, [r4, #2320]
-	str	r5, [r4, #2332]
-	strh	r5, [r3]	@ movhi
-	strh	r5, [r4, r2]	@ movhi
-	str	r3, [fp, #-48]
-.L956:
-	ldrh	r3, [r4, #40]
-	uxth	r10, r5
-	cmp	r10, r3
-	bcs	.L962
-	ldrh	r3, [r4, #102]
-	mov	r9, r10
-	ldrh	ip, [r4, #32]
-	str	r3, [fp, #-44]
-	mov	r3, #0
-	mov	r6, r3
-	b	.L963
-.L958:
-	ldr	r2, .L966+4
-	mov	r1, r9
-	str	ip, [fp, #-56]
-	str	r3, [fp, #-52]
-	ldrb	r0, [r2, r3]	@ zero_extendqisi2
-	bl	V2P_block
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #0
-	ldr	r3, [fp, #-52]
-	ldreq	r2, [fp, #-44]
-	ldr	ip, [fp, #-56]
-	add	r3, r3, #1
-	addeq	r6, r6, r2
-	uxtheq	r6, r6
-.L963:
-	uxth	r1, r3
-	cmp	ip, r1
-	bhi	.L958
+	sub	sp, sp, #44
+	mov	r4, r0
+	ldr	r3, .L1072
+	str	r1, [fp, #-68]
+	ldrh	r6, [r3, #4]
+	movw	r3, #65535
+	cmp	r6, r3
+	beq	.L1066
 	cmp	r6, #0
-	moveq	r0, r6
-	beq	.L959
+	bne	.L1043
+.L1044:
+	bl	FtlGcPageVarInit
+	b	.L1045
+.L1066:
+	mov	r6, #0
+.L1043:
+	ldr	r3, .L1072+4
+	ldr	r2, [fp, #-68]
+	ldrh	r3, [r3, #102]
+	cmp	r3, r2
+	beq	.L1044
+.L1045:
+	ldr	r5, .L1072+4
+	mov	r9, #0
+.L1046:
+	ldrh	r2, [r4]
+	mov	r3, #0
+	strb	r3, [r4, #8]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1047
+.L1063:
+	ldrh	r3, [r5, #32]
+	mov	r2, #0
+	ldr	r0, [r5, #3280]
+	add	ip, r4, #16
+	ldrh	r8, [r5, #112]
+	mov	r10, r2
+	str	r3, [fp, #-72]
+	movw	lr, #65535
+	ldr	r3, [r5, #3172]
+	str	r3, [fp, #-76]
+	ldrh	r3, [r5, #110]
+	str	r3, [fp, #-80]
+	ldr	r3, [r5, #3176]
+	str	r3, [fp, #-84]
+.L1048:
+	ldr	r1, [fp, #-72]
+	uxth	r3, r2
+	cmp	r1, r3
+	bhi	.L1050
+	mov	r8, #0
+	mov	r2, #0
+	mov	r1, r10
+	bl	FlashReadPages
+.L1051:
+	uxth	r3, r8
+	cmp	r10, r3
+	bhi	.L1061
+	ldr	r3, [fp, #-68]
+	add	r9, r9, #1
+	add	r6, r6, #1
+	uxth	r6, r6
+	cmp	r3, r9
+	bls	.L1062
+.L1064:
+	ldrh	r3, [r5, #102]
+	cmp	r3, r6
+	bhi	.L1063
+.L1047:
+	ldr	r3, .L1072
+	mvn	r2, #0
+	strh	r6, [r4, #2]	@ movhi
 	mov	r1, r6
-	mov	r0, #32768
-	bl	__divsi3
-.L959:
-	ldr	r3, [r4, #2316]
-	add	r3, r3, r9, lsl #3
-	strh	r0, [r3, #4]	@ movhi
-	ldr	r3, .L966+8
+	mov	r0, r4
+	strh	r2, [r3, #4]	@ movhi
+	mov	r2, #0
+	strb	r2, [r4, #6]
+	bl	ftl_sb_update_avl_pages
+	b	.L1065
+.L1050:
+	ldrh	r3, [ip], #2
+	cmp	r3, lr
+	beq	.L1049
+	mov	r1, #20
+	orr	r3, r6, r3, lsl #10
+	mla	r1, r1, r10, r0
+	str	r3, [r1, #4]
+	ldr	r3, [fp, #-80]
+	mul	r3, r3, r10
+	add	r7, r3, #3
+	cmp	r3, #0
+	movlt	r3, r7
+	ldr	r7, [fp, #-76]
+	bic	r3, r3, #3
+	add	r3, r7, r3
+	str	r3, [r1, #8]
+	mul	r3, r8, r10
+	add	r10, r10, #1
+	uxth	r10, r10
+	add	r7, r3, #3
+	cmp	r3, #0
+	movlt	r3, r7
+	ldr	r7, [fp, #-84]
+	bic	r3, r3, #3
+	add	r3, r7, r3
+	str	r3, [r1, #12]
+.L1049:
+	add	r2, r2, #1
+	b	.L1048
+.L1061:
+	mov	r3, #20
+	ldr	r2, [r5, #3280]
+	mul	ip, r3, r8
+	ldr	r7, [r2, ip]
+	add	r3, r2, ip
+	ldr	r1, [r3, #4]
+	cmp	r7, #0
+	str	r1, [fp, #-72]
+	bne	.L1052
+	ldr	r3, [r3, #12]
+	movw	r2, #65535
 	ldrh	r1, [r3]
-	cmp	r1, r10
-	beq	.L960
-	ldrh	r1, [r3, #48]
-	cmp	r1, r10
-	beq	.L960
-	ldrh	r3, [r3, #96]
-	cmp	r3, r10
-	beq	.L960
-	ldr	r2, [r4, #2324]
-	lsl	r3, r9, #1
-	ldrh	r3, [r2, r3]
+	cmp	r1, r2
+	bne	.L1053
+	ldrh	r3, [r4]
+	ldr	r2, [r5, #2324]
+	lsl	r3, r3, #1
+	strh	r7, [r2, r3]	@ movhi
+.L1071:
+	ldrh	r0, [r4]
+	mov	r6, #0
+	bl	INSERT_FREE_LIST
+	mvn	r3, #0
+	strh	r3, [r4]	@ movhi
+	bl	FtlGcPageVarInit
+	b	.L1046
+.L1053:
+	mov	r2, r7
+	sub	r1, fp, #64
+	ldr	r0, [r3, #8]
+	str	ip, [fp, #-80]
+	str	r3, [fp, #-76]
+	bl	log2phys
+	ldr	r3, [fp, #-76]
+	ldr	r1, [fp, #-64]
+	ldr	ip, [fp, #-80]
+	ldr	r2, [r3, #12]
+	cmp	r2, r1
+	beq	.L1055
+.L1059:
+	ldr	r2, [r3, #8]
+	add	r8, r8, #1
+	ldr	r1, [fp, #-72]
+	ldr	r0, [r3, #12]
+	bl	FtlGcUpdatePage
+	b	.L1051
+.L1055:
+	str	r2, [fp, #-56]
+	mov	r1, #1
+	ldr	r2, [r5, #3308]
+	sub	r0, fp, #60
+	str	ip, [fp, #-80]
+	str	r3, [fp, #-76]
+	str	r2, [fp, #-52]
+	ldr	r2, [r5, #3328]
+	str	r2, [fp, #-48]
+	mov	r2, r7
+	bl	FlashReadPages
+	ldr	r1, [r5, #3280]
+	ldrh	r2, [r5, #58]
+	ldr	ip, [fp, #-80]
+	ldr	r3, [fp, #-76]
+	add	ip, r1, ip
+	ldr	r1, [fp, #-52]
+	lsl	r2, r2, #7
+.L1056:
+	cmp	r7, r2
+	beq	.L1059
+	ldr	r0, [ip, #8]
+	ldr	lr, [r0, r7, lsl #2]
+	ldr	r0, [r1, r7, lsl #2]
+	cmp	lr, r0
+	beq	.L1057
+	ldr	r2, [fp, #-56]
+	ldrh	r1, [r4]
+	ldr	r0, .L1072+8
+	bl	sftl_printk
+.L1052:
+	ldrh	r3, [r4]
+	mov	r1, #0
+	ldr	r2, [r5, #2324]
+	lsl	r3, r3, #1
+	strh	r1, [r2, r3]	@ movhi
+	b	.L1071
+.L1057:
+	add	r7, r7, #1
+	b	.L1056
+.L1062:
+	ldr	r2, .L1072
+	movw	r1, #65535
+	ldrh	r3, [r2, #4]
+	cmp	r3, r1
+	beq	.L1064
+	add	r3, r3, r9
+	strh	r3, [r2, #4]	@ movhi
+	ldrh	r3, [r5, #102]
+	cmp	r3, r6
+	bls	.L1064
+.L1065:
+	mvn	r0, #0
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1073:
+	.align	2
+.L1072:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC101
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	2
+	.global	FtlReadRefresh
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #88
+	ldr	r3, .L1087
+	ldr	r0, [r3, #2716]
+	mov	r4, r3
+	cmp	r0, #0
+	beq	.L1075
+	ldr	r1, [r3, #2720]
+	ldr	r2, [r3, #2504]
+	cmp	r1, r2
+	bcs	.L1076
+	mov	r5, #2048
+.L1081:
+	ldr	r0, [r4, #2720]
+	ldr	r3, [r4, #2504]
+	cmp	r0, r3
+	bcs	.L1078
+	mov	r2, #0
+	sub	r1, fp, #108
+	bl	log2phys
+	ldr	r2, [fp, #-108]
+	ldr	r3, [r4, #2720]
+	cmn	r2, #1
+	add	r3, r3, #1
+	str	r3, [r4, #2720]
+	beq	.L1079
+	str	r3, [fp, #-88]
+	sub	r0, fp, #20
+	ldr	r3, [r4, #3316]
+	mov	r1, #1
+	str	r2, [fp, #-100]
+	mov	r2, #0
+	str	r2, [r0, #-84]!
+	str	r3, [fp, #-96]
+	sub	r3, fp, #84
+	str	r3, [fp, #-92]
+	bl	FlashReadPages
+	ldr	r3, [fp, #-104]
+	cmp	r3, #256
+	bne	.L1078
+	ldr	r0, [fp, #-108]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L1078:
+	mvn	r0, #0
+.L1074:
+	sub	sp, fp, #20
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L1079:
+	subs	r5, r5, #1
+	bne	.L1081
+	b	.L1078
+.L1076:
+	ldr	r2, [r3, #2508]
+	mov	r0, #0
+	str	r0, [r3, #2716]
+	str	r0, [r3, #2720]
+	str	r2, [r3, #2712]
+	b	.L1074
+.L1075:
+	ldr	r1, [r3, #2508]
+	ldr	r2, [r3, #2712]
+	add	ip, r1, #1048576
+	cmp	r2, ip
+	bhi	.L1084
+	ldr	r3, [r3, #2564]
+	mov	ip, #33554432
+	lsr	r3, r3, #10
+	add	r2, r2, ip, asr r3
+	cmp	r1, r2
+	bhi	.L1084
+	ldr	r3, .L1087+4
+	ldrb	r3, [r3, #28]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L961
-	add	r8, r8, #1
-	mov	r0, r9
-	uxth	r8, r8
-	bl	INSERT_FREE_LIST
-.L960:
-	add	r5, r5, #1
-	b	.L956
-.L961:
-	add	r7, r7, #1
-	mov	r0, r9
-	uxth	r7, r7
-	bl	INSERT_DATA_LIST
-	b	.L960
-.L962:
-	ldr	r2, [fp, #-48]
-	strh	r7, [r2]	@ movhi
-	add	r7, r7, r8
-	cmp	r7, r3
-	movw	r2, #2344
-	strh	r8, [r4, r2]	@ movhi
-	ble	.L964
-	movw	r2, #2154
-	ldr	r1, .L966+12
-	ldr	r0, .L966+16
-	bl	printk
-.L964:
+	bne	.L1074
+.L1084:
+	mov	r3, #1
 	mov	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L967:
+	str	r3, [r4, #2716]
+	str	r0, [r4, #2720]
+	str	r1, [r4, #2712]
+	b	.L1074
+.L1088:
 	.align	2
-.L966:
+.L1087:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+60
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR1+342
-	.word	.LC1
-	.size	SupperBlkListInit, .-SupperBlkListInit
+	.word	.LANCHOR0+2268
+	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
-	.global	FtlGcPageVarInit
+	.global	FtlMapBlkWriteDump_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcPageVarInit, %function
-FtlGcPageVarInit:
+	.type	FtlMapBlkWriteDump_data, %function
+FtlMapBlkWriteDump_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, fp, ip, lr, pc}
+	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L969
+	ldr	r3, [r0, #36]
+	mov	r6, r0
+	cmp	r3, #0
+	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
 	mov	r3, #0
-	movw	r2, #3192
-	mov	r1, #255
-	strh	r3, [r4, r2]	@ movhi
-	add	r2, r4, #3200
-	strh	r3, [r2]	@ movhi
-	ldrh	r2, [r4, #106]
-	ldr	r0, [r4, #3188]
-	lsl	r2, r2, #1
-	bl	ftl_memset
-	ldrh	r3, [r4, #106]
-	mov	r2, #12
+	ldrh	r5, [r0, #6]
+	str	r3, [r0, #36]
+	ldr	r3, .L1096
+	ldr	r2, [r0, #24]
+	sub	r5, r5, #1
+	uxth	r5, r5
+	ldr	r0, [r3, #3296]
+	mov	r4, r3
+	ldr	r1, [r3, #3324]
+	str	r0, [r3, #3452]
+	str	r1, [r3, #3456]
+	ldr	r2, [r2, r5, lsl #2]
+	cmp	r2, #0
+	str	r2, [r3, #3448]
+	beq	.L1091
+	mov	r2, #1
+	ldr	r0, .L1096+4
+	mov	r1, r2
+	bl	FlashReadPages
+.L1092:
+	ldr	r2, [r4, #3452]
+	mov	r1, r5
+	mov	r0, r6
+	bl	FtlMapWritePage
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L1091:
+	ldrh	r2, [r3, #110]
 	mov	r1, #255
-	ldr	r0, [r4, #3196]
-	mul	r2, r2, r3
 	bl	ftl_memset
-	bl	FtlGcBufInit
-	ldmfd	sp, {r4, fp, sp, pc}
-.L970:
+	b	.L1092
+.L1097:
 	.align	2
-.L969:
+.L1096:
 	.word	.LANCHOR0
-	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.word	.LANCHOR0+3444
+	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
 	.align	2
-	.global	FtlGcScanTempBlk
+	.global	FlashTestBlk
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlGcScanTempBlk, %function
-FtlGcScanTempBlk:
-	@ args = 0, pretend = 0, frame = 20
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	@ args = 0, pretend = 0, frame = 84
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #20
-	mov	r6, r0
-	ldr	r3, .L994
-	mov	r10, r1
-	ldrh	r4, [r3, #4]
-	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L988
-	cmp	r4, #0
-	bne	.L972
-.L973:
-	bl	FtlGcPageVarInit
-	b	.L974
-.L988:
-	mov	r4, #0
-.L972:
-	ldr	r3, .L994+4
-	ldrh	r3, [r3, #102]
-	cmp	r3, r10
-	beq	.L973
-.L974:
-	ldr	r5, .L994+4
-	mov	r8, #0
-.L982:
-	ldrh	r2, [r6]
-	movw	r3, #65535
-	mov	r0, #0
-	strb	r0, [r6, #8]
-	cmp	r2, r3
-	beq	.L975
-.L985:
-	ldrh	r3, [r5, #32]
-	mov	r2, #0
-	ldr	r0, [r5, #3832]
-	add	ip, r6, #16
-	mov	r7, r2
-	movw	r9, #65535
-	str	r3, [fp, #-44]
-	ldr	r3, [r5, #3172]
-	str	r3, [fp, #-48]
-	ldrh	r3, [r5, #110]
-	str	r3, [fp, #-52]
-	ldr	r3, [r5, #3176]
-	str	r3, [fp, #-56]
-	ldrh	r3, [r5, #112]
-	str	r3, [fp, #-60]
-.L976:
-	ldr	r1, [fp, #-44]
-	uxth	r3, r2
-	cmp	r1, r3
-	bhi	.L978
-	mov	r9, #0
-	mov	r2, #0
-	mov	r1, r7
-	bl	FlashReadPages
-.L979:
-	uxth	r3, r9
-	cmp	r7, r3
-	bhi	.L983
-	add	r8, r8, #1
-	add	r4, r4, #1
-	cmp	r10, r8
-	uxth	r4, r4
-	bls	.L984
-.L986:
-	ldrh	r3, [r5, #102]
-	cmp	r3, r4
-	bhi	.L985
-	mov	r0, #0
-	b	.L975
-.L978:
-	ldrh	r3, [ip], #2
-	cmp	r3, r9
-	beq	.L977
-	mov	r1, #20
-	orr	r3, r4, r3, lsl #10
-	mla	r1, r1, r7, r0
-	str	r3, [r1, #4]
-	ldr	r3, [fp, #-52]
-	mul	r3, r3, r7
-	add	lr, r3, #3
-	cmp	r3, #0
-	movlt	r3, lr
-	ldr	lr, [fp, #-48]
-	bic	r3, r3, #3
-	add	r3, lr, r3
-	str	r3, [r1, #8]
-	ldr	r3, [fp, #-60]
-	mul	r3, r3, r7
-	add	r7, r7, #1
-	uxth	r7, r7
-	add	lr, r3, #3
-	cmp	r3, #0
-	movlt	r3, lr
-	ldr	lr, [fp, #-56]
-	bic	r3, r3, #3
-	add	r3, lr, r3
-	str	r3, [r1, #12]
-.L977:
-	add	r2, r2, #1
-	b	.L976
-.L983:
-	mov	r3, #20
-	ldr	r2, [r5, #3832]
-	mul	r3, r3, r9
-	str	r2, [fp, #-52]
-	add	ip, r2, r3
-	str	r3, [fp, #-56]
-	ldr	r1, [ip, #4]
-	str	ip, [fp, #-48]
-	ubfx	r0, r1, #10, #16
-	str	r1, [fp, #-44]
-	bl	P2V_plane
-	ldr	r2, [fp, #-52]
-	ldr	r3, [fp, #-56]
-	ldr	r3, [r2, r3]
-	cmp	r3, #0
-	bne	.L980
-	ldr	ip, [fp, #-48]
-	movw	r2, #65535
-	add	r9, r9, #1
-	ldr	r1, [fp, #-44]
-	ldr	r3, [ip, #12]
-	ldrh	ip, [r3]
-	cmp	ip, r2
-	bne	.L981
+	sub	sp, sp, #84
+	uxth	r4, r0
+	cmp	r4, #11
+	movls	r4, #0
+	bls	.L1098
+	ldr	r3, .L1101
+	sub	r0, fp, #84
+	mov	r2, #32
+	mov	r1, #165
+	str	r0, [fp, #-92]
+	lsl	r4, r4, #10
+	ldr	r5, [r3, #3316]
+	str	r5, [fp, #-96]
+	bl	memset
+	ldr	r3, .L1101+4
+	mov	r2, #1
+	mov	r1, r2
+	sub	r0, fp, #104
+	str	r3, [r5]	@ unaligned
+	str	r3, [r5, #4]	@ unaligned
+	str	r4, [fp, #-100]
+	bl	FlashEraseBlocks
 	mov	r3, #1
-	str	r3, [r5, #4000]
-.L975:
-	ldr	r3, .L994
-	mvn	r2, #0
-	strb	r0, [r6, #6]
-	mov	r1, r4
-	strh	r4, [r6, #2]	@ movhi
-	strh	r2, [r3, #4]	@ movhi
-	mov	r2, r0
-	mov	r0, r6
-	bl	ftl_sb_update_avl_pages
-	b	.L987
-.L981:
-	ldr	r2, [r3, #8]
-	ldr	r0, [r3, #12]
-	bl	FtlGcUpdatePage
-	b	.L979
-.L980:
-	ldrh	r3, [r6]
-	mov	r4, #0
-	ldr	r2, [r5, #2324]
-	lsl	r3, r3, #1
-	strh	r4, [r2, r3]	@ movhi
-	ldrh	r0, [r6]
-	bl	INSERT_FREE_LIST
-	mvn	r3, #0
-	strh	r3, [r6]	@ movhi
-	bl	FtlGcPageVarInit
-	b	.L982
-.L984:
-	ldr	r2, .L994
-	movw	r1, #65535
-	ldrh	r3, [r2, #4]
-	cmp	r3, r1
-	beq	.L986
-	add	r3, r3, r8
-	strh	r3, [r2, #4]	@ movhi
-	ldrh	r3, [r5, #102]
-	cmp	r3, r4
-	bls	.L986
-.L987:
-	mvn	r0, #0
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L995:
+	sub	r0, fp, #104
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r4, [fp, #-104]
+	mov	r2, #1
+	mov	r1, #0
+	sub	r0, fp, #104
+	adds	r4, r4, #0
+	movne	r4, #1
+	rsb	r4, r4, #0
+	bl	FlashEraseBlocks
+.L1098:
+	mov	r0, r4
+	sub	sp, fp, #20
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L1102:
 	.align	2
-.L994:
-	.word	.LANCHOR2
+.L1101:
 	.word	.LANCHOR0
-	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
-	.align	2
-	.global	ftl_memcpy
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	ftl_memcpy, %function
-ftl_memcpy:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{fp, ip, lr, pc}
-	sub	fp, ip, #4
-	bl	memcpy
-	ldmfd	sp, {fp, sp, pc}
-	.size	ftl_memcpy, .-ftl_memcpy
+	.word	1515870810
+	.size	FlashTestBlk, .-FlashTestBlk
 	.align	2
 	.global	FtlBbmTblFlush
 	.syntax unified
@@ -6971,141 +7722,135 @@ FtlBbmTblFlush:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r5, #0
-	ldr	r4, .L1006
+	ldr	r4, .L1112
 	mov	r1, #0
-	ldr	r7, .L1006+4
-	ldr	r0, [r4, #3280]
+	ldr	r7, .L1112+4
+	ldr	r0, [r4, #3292]
 	add	r6, r4, #176
-	ldr	r3, [r4, #3284]
+	ldr	r3, [r4, #3324]
 	ldrh	r2, [r4, #110]
-	str	r0, [r4, #3268]
-	str	r3, [r4, #3272]
+	str	r0, [r4, #3452]
+	str	r3, [r4, #3456]
 	bl	ftl_memset
-.L998:
+.L1104:
 	ldrh	r3, [r4, #54]
 	cmp	r5, r3
-	blt	.L999
-	ldr	r6, [r4, #3272]
+	blt	.L1105
+	ldr	r5, [r4, #3456]
 	mov	r2, #16
 	mov	r1, #255
-	ldr	r9, .L1006+8
-	ldr	r8, .L1006+12
-	mov	r5, #0
-	mov	r0, r6
-	mov	r7, r5
+	ldr	r8, .L1112+8
+	mov	r6, #0
+	mov	r0, r5
+	mov	r7, r6
 	bl	memset
-	ldr	r3, .L1006+16
-	strh	r3, [r6]	@ movhi
+	ldr	r3, .L1112+12
+	strh	r3, [r5]	@ movhi
 	ldr	r3, [r4, #160]
-	str	r3, [r6, #4]
+	str	r3, [r5, #4]
 	ldrh	r3, [r4, #152]
-	strh	r3, [r6, #2]	@ movhi
+	strh	r3, [r5, #2]	@ movhi
 	ldrh	r3, [r4, #156]
-	strh	r3, [r6, #8]	@ movhi
+	strh	r3, [r5, #8]	@ movhi
 	ldrh	r3, [r4, #158]
-	strh	r3, [r6, #10]	@ movhi
+	strh	r3, [r5, #10]	@ movhi
 	ldr	r3, [r4, #28]
-	strh	r3, [r6, #12]	@ movhi
-.L1000:
-	ldr	r3, [r4, #3280]
-	mov	r10, #0
-	ldrh	r1, [r4, #152]
+	strh	r3, [r5, #12]	@ movhi
+.L1106:
+	ldr	r3, [r4, #3292]
+	mov	r9, #0
 	ldrh	r2, [r4, #154]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	str	r10, [r4, #3260]
-	str	r3, [r4, #3272]
+	ldrh	r1, [r4, #152]
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
+	str	r9, [r4, #3444]
+	str	r3, [r4, #3456]
 	orr	r3, r2, r1, lsl #10
-	ldrh	r0, [r6, #10]
-	str	r3, [r4, #3264]
+	ldrh	r0, [r5, #10]
+	str	r3, [r4, #3448]
 	ldrh	r3, [r4, #156]
 	str	r0, [sp]
-	mov	r0, r9
-	bl	printk
-	mov	r3, #1
 	mov	r0, r8
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
+	bl	sftl_printk
 	ldrh	r3, [r4, #104]
 	ldrh	r2, [r4, #154]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1001
+	blt	.L1107
 	ldr	r3, [r4, #160]
 	ldrh	r2, [r4, #152]
-	ldr	r0, [r4, #3800]
+	ldr	r0, [r4, #3260]
 	add	r3, r3, #1
-	strh	r10, [r4, #154]	@ movhi
+	strh	r9, [r4, #154]	@ movhi
 	str	r3, [r4, #160]
-	str	r3, [r6, #4]
+	str	r3, [r5, #4]
 	ldrh	r3, [r4, #156]
-	strh	r2, [r6, #8]	@ movhi
+	strh	r2, [r5, #8]	@ movhi
 	strh	r2, [r4, #156]	@ movhi
 	mov	r2, #1
 	strh	r3, [r4, #152]	@ movhi
 	mov	r1, r2
 	lsl	r3, r3, #10
-	str	r3, [r4, #3264]
+	str	r3, [r4, #3448]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
+.L1107:
 	mov	r3, #1
-	mov	r0, r8
+	ldr	r0, .L1112+16
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-.L1001:
 	ldrh	r3, [r4, #154]
 	add	r3, r3, #1
 	strh	r3, [r4, #154]	@ movhi
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3444]
 	cmn	r3, #1
-	bne	.L1002
-	add	r5, r5, #1
-	ldr	r1, [r4, #3264]
-	uxth	r5, r5
-	ldr	r0, .L1006+20
-	bl	printk
-	cmp	r5, #3
-	bls	.L1000
-	mov	r2, r5
-	ldr	r1, [r4, #3264]
-	ldr	r0, .L1006+24
-	bl	printk
-.L1004:
-	b	.L1004
-.L999:
+	bne	.L1108
+	add	r6, r6, #1
+	ldr	r1, [r4, #3448]
+	uxth	r6, r6
+	ldr	r0, .L1112+20
+	bl	sftl_printk
+	cmp	r6, #3
+	bls	.L1106
+	mov	r2, r6
+	ldr	r1, [r4, #3448]
+	ldr	r0, .L1112+24
+	bl	sftl_printk
+.L1110:
+	b	.L1110
+.L1105:
 	ldrh	r2, [r7]
-	ldr	r3, [r4, #3268]
+	ldr	r3, [r4, #3452]
 	ldr	r1, [r6, #4]!
 	mul	r0, r2, r5
 	lsl	r2, r2, #2
 	add	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L998
-.L1005:
+	b	.L1104
+.L1111:
 	mov	r7, #1
-	b	.L1000
-.L1002:
+	b	.L1106
+.L1108:
 	cmp	r7, #0
-	beq	.L1005
+	beq	.L1111
 	mov	r0, #0
-	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1007:
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
+.L1113:
 	.align	2
-.L1006:
+.L1112:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3900
-	.word	.LC94
-	.word	.LANCHOR0+3260
+	.word	.LANCHOR0+3380
+	.word	.LC102
 	.word	-3887
-	.word	.LC95
-	.word	.LC96
+	.word	.LANCHOR0+3444
+	.word	.LC103
+	.word	.LC104
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
 	.global	allocate_data_superblock
@@ -7114,292 +7859,291 @@ FtlBbmTblFlush:
 	.fpu softvfp
 	.type	allocate_data_superblock, %function
 allocate_data_superblock:
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 12
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #16
-	mov	r5, r0
-	ldr	r4, .L1043
-	add	r9, r4, #2336
-.L1009:
-	ldr	r7, .L1043+4
-	ldrh	r2, [r9]
-	ldrh	r3, [r7]
-	add	r3, r3, r2
-	ldrh	r2, [r4, #40]
-	cmp	r3, r2
-	ble	.L1010
-	movw	r2, #2585
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1010:
-	ldr	r3, .L1043+16
-	cmp	r5, r3
+	sub	sp, sp, #12
+	mov	r4, r0
+	ldr	r10, .L1150
+.L1115:
+	ldr	r8, .L1150+4
+	ldrh	r1, [r8, #-8]
+	ldrh	r2, [r8]
+	add	r2, r2, r1
+	ldrh	r1, [r10, #40]
+	cmp	r2, r1
+	ble	.L1116
+	movw	r2, #2615
+	ldr	r1, .L1150+8
+	ldr	r0, .L1150+12
+	bl	sftl_printk
+.L1116:
+	ldr	r2, .L1150+16
+	cmp	r4, r2
 	movne	r1, #0
-	bne	.L1011
-	ldrh	r3, [r7]
-	ldr	r1, [r4, #3160]
-	mul	r2, r1, r3
-	lsr	r1, r3, #1
+	bne	.L1117
+	ldrh	r2, [r8]
+	ldr	r1, [r10, #3160]
+	mul	r0, r1, r2
+	lsr	r1, r2, #1
 	add	r1, r1, #1
-	add	r1, r1, r2, lsr #2
+	add	r1, r1, r0, lsr #2
 	uxth	r1, r1
 	cmp	r1, #0
 	subne	r1, r1, #1
 	uxthne	r1, r1
-.L1011:
-	ldr	r0, .L1043+20
+.L1117:
+	ldr	r0, .L1150+20
 	bl	List_pop_index_node
-	ldrh	r3, [r7]
-	mov	r6, r0
-	uxth	r8, r0
-	cmp	r3, #0
-	bne	.L1012
-	movw	r2, #2594
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1012:
-	ldrh	r3, [r7]
-	mov	r0, r5
-	sub	r3, r3, #1
-	strh	r3, [r7]	@ movhi
-	strh	r8, [r5]	@ movhi
+	ldrh	r2, [r8]
+	mov	r7, r0
+	uxth	r9, r0
+	cmp	r2, #0
+	bne	.L1118
+	mov	r2, #2624
+	ldr	r1, .L1150+8
+	ldr	r0, .L1150+12
+	bl	sftl_printk
+.L1118:
+	ldrh	r2, [r8]
+	sub	r2, r2, #1
+	strh	r2, [r8]	@ movhi
+	ldrh	r2, [r10, #40]
+	cmp	r2, r9
+	bls	.L1115
+	uxth	r7, r7
+	ldr	r2, [r10, #2324]
+	lsl	r6, r7, #1
+	ldrh	r5, [r2, r6]
+	cmp	r5, #0
+	bne	.L1115
+	strh	r9, [r4]	@ movhi
+	mov	r0, r4
 	bl	make_superblock
-	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1013
-	uxth	r0, r6
-	ldr	r2, [r4, #2324]
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1120
+	ldr	r2, [r10, #2324]
 	mvn	r1, #0
-	lsl	r3, r0, #1
-	strh	r1, [r2, r3]	@ movhi
+	mov	r0, r7
+	strh	r1, [r2, r6]	@ movhi
 	bl	INSERT_DATA_LIST
-	ldrh	r2, [r9]
-	ldrh	r3, [r7]
-	add	r3, r3, r2
-	ldrh	r2, [r4, #40]
-	cmp	r3, r2
-	ble	.L1009
-	movw	r2, #2605
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-	b	.L1009
-.L1013:
-	ldrh	r2, [r9]
-	ldrh	r3, [r7]
-	add	r3, r3, r2
-	ldrh	r2, [r4, #40]
-	cmp	r3, r2
-	ble	.L1015
-	mov	r2, #2608
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1015:
-	ldr	r0, [r4, #3800]
-	mov	r2, #20
-	ldrh	r1, [r4, #32]
-	mov	r7, #0
-	add	ip, r5, #16
-	mov	lr, r7
-	mov	r3, r0
-	mla	r1, r2, r1, r0
+	ldr	r3, .L1150+24
+	ldrh	r2, [r8]
+	ldrh	r1, [r3]
+	add	r2, r2, r1
+	ldrh	r1, [r10, #40]
+	cmp	r2, r1
+	ble	.L1115
+	movw	r2, #2638
+	ldr	r1, .L1150+8
+	ldr	r0, .L1150+12
+	bl	sftl_printk
+	b	.L1115
+.L1120:
+	ldr	r3, .L1150+24
+	ldrh	r2, [r8]
+	ldrh	r1, [r3]
+	add	r2, r2, r1
+	ldrh	r1, [r10, #40]
+	cmp	r2, r1
+	ble	.L1122
+	movw	r2, #2641
+	ldr	r1, .L1150+8
+	ldr	r0, .L1150+12
+	bl	sftl_printk
+.L1122:
+	ldr	r0, [r10, #3260]
+	mov	r1, #20
+	ldrh	lr, [r10, #32]
+	add	ip, r4, #16
 	str	r1, [fp, #-44]
-.L1016:
-	ldr	r1, [fp, #-44]
-	cmp	r1, r3
-	bne	.L1018
-	cmp	r7, #0
-	bne	.L1019
-	movw	r2, #2619
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1019:
-	ldr	r3, .L1043+24
-	ldrh	r3, [r3]
-	cmp	r3, r8
-	bne	.L1020
-	movw	r2, #2621
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1020:
-	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	uxth	r6, r6
-	cmp	r3, #0
-	bne	.L1021
-	ldr	r1, [r4, #2328]
-	lsl	r2, r6, #1
-	ldrh	r3, [r1, r2]
-	cmp	r3, #0
-	ldrhne	r0, [r4, #92]
-	moveq	r3, #2
-	addne	r3, r3, r0
-	mov	r0, r6
-	strh	r3, [r1, r2]	@ movhi
+	mov	r2, r0
+	mla	r3, r1, lr, r0
+	mov	lr, #0
+.L1123:
+	cmp	r3, r2
+	bne	.L1125
+	cmp	r5, #0
+	bne	.L1126
+	movw	r2, #2652
+	ldr	r1, .L1150+8
+	ldr	r0, .L1150+12
+	bl	sftl_printk
+.L1126:
+	ldr	r2, .L1150+28
+	ldrh	r2, [r2]
+	cmp	r2, r9
+	bne	.L1127
+	movw	r2, #2654
+	ldr	r1, .L1150+8
+	ldr	r0, .L1150+12
+	bl	sftl_printk
+.L1127:
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	ldr	r1, [r10, #2328]
+	cmp	r2, #0
+	ldrh	r2, [r1, r6]
+	bne	.L1128
+	cmp	r2, #0
+	ldrhne	r0, [r10, #92]
+	moveq	r2, #2
+	addne	r2, r2, r0
+	mov	r0, r7
+	strh	r2, [r1, r6]	@ movhi
 	mov	r1, #0
-	ldr	r3, [r4, #2548]
-	add	r3, r3, #1
-	str	r3, [r4, #2548]
+	ldr	r2, [r10, #2548]
+	add	r2, r2, #1
+	str	r2, [r10, #2548]
 	bl	ftl_set_blk_mode
-.L1024:
-	ldr	r3, [r4, #2328]
-	lsl	r10, r6, #1
-	ldr	r2, [r4, #2564]
-	ldr	r0, [r4, #2548]
-	ldrh	r3, [r3, r10]
-	ldrh	r1, [r4, #40]
-	cmp	r3, r2
-	ldrh	r2, [r4, #92]
-	strhi	r3, [r4, #2564]
-	ldr	r3, [r4, #2552]
-	mla	r0, r0, r2, r3
+.L1131:
+	ldr	r2, [r10, #2328]
+	ldr	r1, [r10, #2564]
+	ldr	ip, [r10, #2548]
+	ldrh	r2, [r2, r6]
+	ldrh	r0, [r10, #92]
+	cmp	r2, r1
+	ldrh	r1, [r10, #40]
+	strhi	r2, [r10, #2564]
+	ldr	r2, [r10, #2552]
+	mla	r0, ip, r0, r2
 	bl	__udivsi3
-	ldr	r2, [r4, #3860]
-	ldr	r1, [r4, #3800]
-	str	r0, [r4, #2556]
-	ldr	r3, [r2, #16]
-	ldr	r0, .L1043+28
-	add	r3, r3, #1
-	str	r3, [r2, #16]
-	mov	r2, #20
-	mla	r2, r2, r7, r1
-	add	r3, r1, #4
-	add	r2, r2, #24
-.L1026:
-	add	r3, r3, #20
-	cmp	r2, r3
-	bne	.L1027
-	ldrb	r1, [r5, #8]	@ zero_extendqisi2
-	mov	r2, r7
-	ldr	r0, [r4, #3800]
+	ldr	r1, [r10, #3340]
+	str	r0, [r10, #2556]
+	ldr	r0, [r10, #3260]
+	ldr	r2, [r1, #16]
+	ldr	ip, .L1150+32
+	add	r2, r2, #1
+	str	r2, [r1, #16]
+	mov	r1, #20
+	mla	r1, r1, r5, r0
+	add	r2, r0, #4
+	add	r1, r1, #24
+.L1133:
+	add	r2, r2, #20
+	cmp	r1, r2
+	bne	.L1134
+	ldrb	r1, [r4, #8]	@ zero_extendqisi2
+	mov	r2, r5
+	ldr	r0, [r10, #3260]
+	mov	r8, #0
 	bl	FlashEraseBlocks
-	mov	r3, #0
+	mov	r1, r8
 	mov	ip, #20
-	mov	r1, r3
-.L1028:
-	uxth	r2, r3
-	cmp	r7, r2
-	bhi	.L1030
+.L1135:
+	uxth	r2, r8
+	cmp	r5, r2
+	bhi	.L1137
 	cmp	r1, #0
-	ble	.L1031
-	mov	r0, r6
+	ble	.L1138
+	mov	r0, r7
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1031:
-	ldrb	r2, [r5, #7]	@ zero_extendqisi2
-	cmp	r2, #0
-	bne	.L1032
-	ldr	r3, [r4, #2324]
-	mvn	r2, #0
-	mov	r0, r6
-	strh	r2, [r3, r10]	@ movhi
-	bl	INSERT_DATA_LIST
-	b	.L1009
-.L1018:
-	str	lr, [r3, #8]
-	movw	r10, #65535
-	str	lr, [r3, #12]
-	add	r3, r3, #20
+.L1138:
+	ldrb	r1, [r4, #7]	@ zero_extendqisi2
+	cmp	r1, #0
+	bne	.L1139
+	ldr	r2, [r10, #2324]
+	mvn	r1, #0
+	strh	r1, [r2, r6]	@ movhi
+	b	.L1115
+.L1125:
+	str	lr, [r2, #8]
+	movw	r8, #65535
+	str	lr, [r2, #12]
+	add	r2, r2, #20
 	ldrh	r1, [ip], #2
-	cmp	r1, r10
-	mlane	r10, r2, r7, r0
+	cmp	r1, r8
+	ldrne	r8, [fp, #-44]
 	lslne	r1, r1, #10
-	addne	r7, r7, #1
-	uxthne	r7, r7
-	strne	r1, [r10, #4]
-	b	.L1016
-.L1021:
-	ldr	r1, [r4, #2328]
-	lsl	r3, r6, #1
-	mov	r0, r6
-	ldrh	r2, [r1, r3]
+	mlane	r8, r8, r5, r0
+	addne	r5, r5, #1
+	uxthne	r5, r5
+	strne	r1, [r8, #4]
+	b	.L1123
+.L1128:
 	add	r2, r2, #1
-	strh	r2, [r1, r3]	@ movhi
-	ldr	r3, [r4, #2552]
-	add	r3, r3, #1
-	str	r3, [r4, #2552]
+	mov	r0, r7
+	strh	r2, [r1, r6]	@ movhi
+	ldr	r2, [r10, #2552]
+	add	r2, r2, #1
+	str	r2, [r10, #2552]
 	bl	ftl_set_blk_mode.part.6
-	b	.L1024
-.L1027:
-	ldr	r1, [r3, #-20]
-	and	r1, r1, r0
-	str	r1, [r3, #-20]
-	b	.L1026
-.L1030:
-	mul	r2, ip, r3
-	ldr	lr, [r4, #3800]
+	b	.L1131
+.L1134:
+	ldr	r0, [r2, #-20]
+	and	r0, r0, ip
+	str	r0, [r2, #-20]
+	b	.L1133
+.L1137:
+	mul	r2, ip, r8
+	ldr	lr, [r10, #3260]
 	add	r0, lr, r2
 	ldr	r2, [lr, r2]
 	cmn	r2, #1
-	bne	.L1029
+	bne	.L1136
 	ldr	r0, [r0, #4]
 	add	r1, r1, #1
-	str	ip, [fp, #-56]
-	str	r2, [fp, #-52]
+	str	ip, [fp, #-52]
+	str	r2, [fp, #-48]
 	ubfx	r0, r0, #10, #16
-	str	r3, [fp, #-48]
 	str	r1, [fp, #-44]
 	bl	FtlBbmMapBadBlock
-	ldr	r3, [fp, #-48]
-	ldr	r2, [fp, #-52]
-	ldr	ip, [fp, #-56]
+	ldr	r2, [fp, #-48]
+	add	r0, r4, r8, lsl #1
+	ldr	ip, [fp, #-52]
 	ldr	r1, [fp, #-44]
-	add	r0, r5, r3, lsl #1
 	strh	r2, [r0, #16]	@ movhi
-	ldrb	r2, [r5, #7]	@ zero_extendqisi2
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
 	sub	r2, r2, #1
-	strb	r2, [r5, #7]
-.L1029:
-	add	r3, r3, #1
-	b	.L1028
-.L1032:
-	ldrh	r3, [r4, #102]
-	strh	r8, [r5]	@ movhi
-	smulbb	r3, r3, r2
-	mov	r2, #0
-	strh	r2, [r5, #2]	@ movhi
-	strb	r2, [r5, #6]
-	ldr	r2, [r4, #2540]
-	uxth	r3, r3
-	ldr	r1, [r4, #2324]
-	strh	r3, [r5, #4]	@ movhi
-	str	r2, [r5, #12]
-	add	r2, r2, #1
-	str	r2, [r4, #2540]
-	ldrh	r2, [r5]
-	lsl	r2, r2, #1
-	strh	r3, [r1, r2]	@ movhi
-	ldrh	r3, [r5, #4]
+	strb	r2, [r4, #7]
+.L1136:
+	add	r8, r8, #1
+	b	.L1135
+.L1139:
+	ldrh	r2, [r10, #102]
+	strh	r9, [r4]	@ movhi
+	smulbb	r2, r2, r1
+	mov	r1, #0
+	strh	r1, [r4, #2]	@ movhi
+	strb	r1, [r4, #6]
+	ldr	r1, [r10, #2540]
+	uxth	r2, r2
+	ldr	r0, [r10, #2324]
+	strh	r2, [r4, #4]	@ movhi
+	str	r1, [r4, #12]
+	add	r1, r1, #1
+	str	r1, [r10, #2540]
+	ldrh	r1, [r4]
+	lsl	r3, r1, #1
+	strh	r2, [r0, r3]	@ movhi
+	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1033
-	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	beq	.L1140
+	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1034
-.L1033:
-	movw	r2, #2674
-	ldr	r1, .L1043+8
-	ldr	r0, .L1043+12
-	bl	printk
-.L1034:
+	bne	.L1141
+.L1140:
+	movw	r2, #2707
+	ldr	r1, .L1150+8
+	ldr	r0, .L1150+12
+	bl	sftl_printk
+.L1141:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1044:
+.L1151:
 	.align	2
-.L1043:
+.L1150:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2344
-	.word	.LANCHOR1+360
+	.word	.LANCHOR1+403
 	.word	.LC1
 	.word	.LANCHOR0+2444
 	.word	.LANCHOR0+2340
+	.word	.LANCHOR0+2336
 	.word	.LANCHOR0+2588
 	.word	-1024
 	.size	allocate_data_superblock, .-allocate_data_superblock
@@ -7417,76 +8161,76 @@ FtlGcFreeBadSuperBlk:
 	sub	fp, ip, #4
 	sub	sp, sp, #8
 	uxth	r3, r0
-	ldr	r6, .L1057
+	ldr	r6, .L1164
 	str	r3, [fp, #-44]
 	movw	r3, #3206
 	ldrh	r3, [r6, r3]
 	cmp	r3, #0
 	movne	r7, #0
-	ldrne	r10, .L1057+4
-	bne	.L1047
-.L1046:
+	ldrne	r10, .L1164+4
+	bne	.L1154
+.L1153:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1053:
+.L1160:
 	uxtah	r3, r6, r7
 	ldr	r1, [fp, #-44]
 	mov	r8, #0
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L1048:
+.L1155:
 	ldrh	r3, [r10]
 	uxth	r4, r8
 	cmp	r3, r4
-	bhi	.L1052
+	bhi	.L1159
 	add	r7, r7, #1
-.L1047:
+.L1154:
 	ldrh	r2, [r6, #32]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L1053
+	bhi	.L1160
 	bl	FtlGcReFreshBadBlk
-	b	.L1046
-.L1052:
+	b	.L1153
+.L1159:
 	uxth	r3, r8
-	ldr	r5, .L1057+8
+	ldr	r5, .L1164+8
 	lsl	r2, r3, #1
 	ldrh	r2, [r5, r2]
 	cmp	r2, r9
-	bne	.L1049
+	bne	.L1156
 	mov	r1, r9
-	ldr	r0, .L1057+12
+	ldr	r0, .L1164+12
 	str	r3, [fp, #-48]
-	bl	printk
+	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldr	r3, [fp, #-48]
 	ldrh	r2, [r10]
 	add	r3, r5, r3, lsl #1
-.L1050:
+.L1157:
 	cmp	r4, r2
-	bcc	.L1051
+	bcc	.L1158
 	sub	r2, r2, #1
 	strh	r2, [r10]	@ movhi
-.L1049:
+.L1156:
 	add	r8, r8, #1
-	b	.L1048
-.L1051:
+	b	.L1155
+.L1158:
 	ldrh	r1, [r3, #2]!
 	add	r4, r4, #1
 	uxth	r4, r4
 	strh	r1, [r3, #-2]	@ movhi
-	b	.L1050
-.L1058:
+	b	.L1157
+.L1165:
 	.align	2
-.L1057:
+.L1164:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3206
 	.word	.LANCHOR0+3208
-	.word	.LC97
+	.word	.LC105
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	2
 	.global	update_vpc_list
@@ -7500,20 +8244,20 @@ update_vpc_list:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1069
+	ldr	r3, .L1176
 	uxth	r4, r0
 	ldr	r1, [r3, #2324]
 	lsl	r2, r4, #1
 	mov	r6, r3
 	ldrh	r0, [r1, r2]
 	cmp	r0, #0
-	bne	.L1060
+	bne	.L1167
 	movw	r2, #2588
 	ldrh	r1, [r3, r2]
 	cmp	r1, r4
 	mvneq	r3, #0
 	strheq	r3, [r6, r2]	@ movhi
-	beq	.L1062
+	beq	.L1169
 	movw	r2, #2348
 	ldrh	r2, [r3, r2]
 	cmp	r2, r4
@@ -7526,19 +8270,19 @@ update_vpc_list:
 	ldrh	r3, [r3, r2]
 	cmp	r3, r4
 	ldmfdeq	sp, {r4, r5, r6, fp, sp, pc}
-.L1062:
-	ldr	r5, .L1069+4
+.L1169:
+	ldr	r5, .L1176+4
 	mov	r1, r4
-	ldr	r0, .L1069+8
+	ldr	r0, .L1176+8
 	bl	List_remove_node
 	ldrh	r3, [r5]
 	cmp	r3, #0
-	bne	.L1064
-	movw	r2, #2744
-	ldr	r1, .L1069+12
-	ldr	r0, .L1069+16
-	bl	printk
-.L1064:
+	bne	.L1171
+	movw	r2, #2777
+	ldr	r1, .L1176+12
+	ldr	r0, .L1176+16
+	bl	sftl_printk
+.L1171:
 	ldrh	r3, [r5]
 	mov	r0, r4
 	sub	r3, r3, #1
@@ -7552,26 +8296,26 @@ update_vpc_list:
 	add	r3, r3, r2
 	ldrh	r2, [r6, #40]
 	cmp	r3, r2
-	ble	.L1068
-	movw	r2, #2747
-	ldr	r1, .L1069+12
-	ldr	r0, .L1069+16
-	bl	printk
-.L1068:
+	ble	.L1175
+	movw	r2, #2780
+	ldr	r1, .L1176+12
+	ldr	r0, .L1176+16
+	bl	sftl_printk
+.L1175:
 	mov	r0, #1
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1060:
+.L1167:
 	mov	r0, r4
 	bl	List_update_data_list
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1070:
+.L1177:
 	.align	2
-.L1069:
+.L1176:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2336
 	.word	.LANCHOR0+2320
-	.word	.LANCHOR1+385
+	.word	.LANCHOR1+428
 	.word	.LC1
 	.size	update_vpc_list, .-update_vpc_list
 	.align	2
@@ -7589,44 +8333,44 @@ decrement_vpc_count:
 	uxth	r6, r0
 	movw	r3, #65535
 	cmp	r6, r3
-	ldr	r4, .L1083
-	beq	.L1072
+	ldr	r4, .L1190
+	beq	.L1179
 	ldr	r3, [r4, #2324]
 	lsl	r5, r6, #1
 	ldrh	r2, [r3, r5]
 	cmp	r2, #0
 	subne	r2, r2, #1
 	strhne	r2, [r3, r5]	@ movhi
-	bne	.L1072
+	bne	.L1179
 	mov	r1, r6
-	ldr	r0, .L1083+4
-	bl	printk
+	ldr	r0, .L1190+4
+	bl	sftl_printk
 	ldr	r3, [r4, #2324]
 	ldrh	r5, [r3, r5]
 	cmp	r5, #0
-	beq	.L1074
-.L1081:
+	beq	.L1181
+.L1188:
 	mov	r5, #0
-.L1071:
+.L1178:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1074:
-	movw	r2, #2762
-.L1082:
-	ldr	r1, .L1083+8
-	ldr	r0, .L1083+12
-	bl	printk
-	b	.L1071
-.L1072:
-	movw	r7, #3992
+.L1181:
+	movw	r2, #2795
+.L1189:
+	ldr	r1, .L1190+8
+	ldr	r0, .L1190+12
+	bl	sftl_printk
+	b	.L1178
+.L1179:
+	movw	r7, #3430
 	movw	r3, #65535
 	ldrh	r0, [r4, r7]
 	cmp	r0, r3
 	strheq	r6, [r4, r7]	@ movhi
-	beq	.L1081
-.L1076:
+	beq	.L1188
+.L1183:
 	cmp	r6, r0
-	beq	.L1081
+	beq	.L1188
 	bl	update_vpc_list
 	ldr	r2, [r4, #2316]
 	adds	r5, r0, #0
@@ -7645,168 +8389,18 @@ decrement_vpc_count:
 	lsr	r2, r2, #5
 	moveq	r2, #0
 	cmp	r2, #0
-	beq	.L1071
-	movw	r2, #2778
-	b	.L1082
-.L1084:
+	beq	.L1178
+	movw	r2, #2811
+	b	.L1189
+.L1191:
 	.align	2
-.L1083:
+.L1190:
 	.word	.LANCHOR0
-	.word	.LC98
-	.word	.LANCHOR1+401
+	.word	.LC106
+	.word	.LANCHOR1+444
 	.word	.LC1
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
-	.global	FtlWriteDump_data
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlWriteDump_data, %function
-FtlWriteDump_data:
-	@ args = 0, pretend = 0, frame = 28
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #28
-	ldr	r6, .L1103
-	ldr	r4, .L1103+4
-	ldrh	r2, [r6, #4]
-	cmp	r2, #0
-	beq	.L1086
-	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1086
-	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
-	ldrh	r3, [r4, #102]
-	mul	r3, r3, r1
-	cmp	r2, r3
-	beq	.L1086
-	ldrb	r8, [r4, #2358]	@ zero_extendqisi2
-	cmp	r8, #0
-	bne	.L1085
-	ldr	r7, [r4, #2504]
-	mov	r2, r8
-	sub	r1, fp, #64
-	ldrh	r9, [r4, #32]
-	sub	r7, r7, #1
-	mov	r0, r7
-	bl	log2phys
-	ldr	r3, [fp, #-64]
-	ldr	r5, [r4, #3284]
-	ldr	r0, [r4, #3280]
-	cmn	r3, #1
-	str	r3, [fp, #-56]
-	str	r7, [fp, #-44]
-	str	r0, [fp, #-52]
-	str	r5, [fp, #-48]
-	str	r8, [r5, #4]
-	beq	.L1088
-	mov	r2, r8
-	mov	r1, #1
-	sub	r0, fp, #60
-	bl	FlashReadPages
-.L1089:
-	ldr	ip, .L1103
-	mov	r8, #0
-	ldr	r3, .L1103+8
-	lsl	r9, r9, #2
-	mov	r10, r8
-	strh	r3, [r5]	@ movhi
-.L1090:
-	cmp	r9, r8
-	bne	.L1094
-.L1091:
-	mov	r3, #1
-.L1102:
-	strb	r3, [r4, #2358]
-.L1085:
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1088:
-	ldrh	r2, [r4, #110]
-	mov	r1, #255
-	bl	ftl_memset
-	b	.L1089
-.L1094:
-	ldrh	r3, [r6, #4]
-	cmp	r3, #0
-	beq	.L1091
-	ldr	r3, [fp, #-56]
-	mov	r0, ip
-	str	r7, [r5, #8]
-	add	r8, r8, #1
-	str	ip, [fp, #-68]
-	str	r3, [r5, #12]
-	ldrh	r3, [r6]
-	strh	r3, [r5, #2]	@ movhi
-	bl	get_new_active_ppa
-	ldr	r3, [r4, #2544]
-	mov	r1, #1
-	str	r0, [fp, #-56]
-	sub	r0, fp, #60
-	str	r3, [r5, #4]
-	add	r3, r3, #1
-	cmn	r3, #1
-	moveq	r3, r10
-	str	r3, [r4, #2544]
-	mov	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r6]
-	bl	decrement_vpc_count
-	ldr	ip, [fp, #-68]
-	b	.L1090
-.L1086:
-	mov	r3, #0
-	b	.L1102
-.L1104:
-	.align	2
-.L1103:
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0
-	.word	-3947
-	.size	FtlWriteDump_data, .-FtlWriteDump_data
-	.align	2
-	.global	l2p_flush
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	l2p_flush, %function
-l2p_flush:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r5, .L1109
-	mov	r4, #0
-	mov	r6, #12
-	bl	FtlWriteDump_data
-.L1106:
-	ldrh	r2, [r5, #138]
-	uxth	r3, r4
-	cmp	r2, r3
-	bhi	.L1108
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1108:
-	ldr	r3, [r5, #2492]
-	uxth	r0, r4
-	mla	r3, r6, r0, r3
-	ldr	r3, [r3, #4]
-	cmp	r3, #0
-	bge	.L1107
-	bl	flush_l2p_region
-.L1107:
-	add	r4, r4, #1
-	b	.L1106
-.L1110:
-	.align	2
-.L1109:
-	.word	.LANCHOR0
-	.size	l2p_flush, .-l2p_flush
-	.align	2
 	.global	FtlRecoverySuperblock
 	.syntax unified
 	.arm
@@ -7823,9 +8417,9 @@ FtlRecoverySuperblock:
 	ldrh	r3, [r0]
 	mov	r10, r0
 	cmp	r3, r2
-	beq	.L1232
+	beq	.L1312
 	ldrh	r3, [r0, #2]
-	ldr	r5, .L1239
+	ldr	r5, .L1319
 	str	r3, [fp, #-64]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r1, [fp, #-64]
@@ -7835,30 +8429,30 @@ FtlRecoverySuperblock:
 	mov	r3, #0
 	strheq	r3, [r0, #4]	@ movhi
 	ldrhne	r0, [r0, #16]
-	bne	.L1115
-.L1237:
+	bne	.L1196
+.L1317:
 	strb	r3, [r10, #6]
-.L1232:
+.L1312:
 	mov	r0, #0
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1116:
+.L1197:
 	uxth	r1, r3
 	add	r1, r10, r1, lsl #1
 	ldrh	r0, [r1, #16]
-.L1115:
+.L1196:
 	cmp	r0, r2
 	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1116
+	beq	.L1197
 	mov	r1, #1
 	bl	FtlGetLastWrittenPage
 	cmn	r0, #1
 	mov	r4, r0
-	beq	.L1117
+	beq	.L1198
 	ldrh	r3, [r5, #32]
 	mov	r2, #0
-	ldr	r0, [r5, #3832]
+	ldr	r0, [r5, #3280]
 	movw	r7, #65535
 	ldr	lr, [r5, #3176]
 	mov	r8, #20
@@ -7872,33 +8466,33 @@ FtlRecoverySuperblock:
 	add	r3, r10, #16
 	mov	ip, r3
 	str	r3, [fp, #-76]
-.L1118:
+.L1199:
 	ldr	r1, [fp, #-56]
 	uxth	r3, r2
 	cmp	r1, r3
-	bhi	.L1122
-	ldr	r6, .L1239
+	bhi	.L1203
+	ldr	r6, .L1319
 	mov	r2, #0
 	mov	r1, r5
 	movw	r8, #65535
 	bl	FlashReadPages
 	ldr	r3, [r6, #2544]
 	uxth	r2, r4
-	ldr	r9, [r6, #3832]
+	ldr	r9, [r6, #3280]
 	str	r2, [fp, #-60]
 	sub	r3, r3, #1
 	str	r3, [fp, #-56]
 	mov	r7, r9
 	mov	r3, #0
-.L1123:
+.L1204:
 	uxth	r2, r3
 	cmp	r5, r2
-	bhi	.L1128
+	bhi	.L1209
 	addeq	r3, r4, #1
 	uxtheq	r3, r3
 	streq	r3, [fp, #-60]
-	bne	.L1126
-.L1233:
+	bne	.L1207
+.L1313:
 	ldr	r0, [r9, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
@@ -7918,63 +8512,63 @@ FtlRecoverySuperblock:
 	cmpeq	r1, r0
 	moveq	r2, r1
 	moveq	r1, r3
-	beq	.L1238
+	beq	.L1318
 	movw	r3, #65535
 	cmp	r8, r3
-	bne	.L1132
+	bne	.L1213
 	ldrb	r3, [r10, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1133
-.L1132:
-	ldr	r3, [r6, #4004]
+	bne	.L1214
+.L1213:
+	ldr	r3, [r6, #3440]
 	uxth	r7, r4
 	uxth	r4, r4
 	cmn	r3, #1
 	ldreq	r3, [fp, #-56]
-	streq	r3, [r6, #4004]
+	streq	r3, [r6, #3440]
 	ldr	r3, [fp, #-64]
-	ldr	r6, .L1239
+	ldr	r6, .L1319
 	add	r3, r3, #7
 	cmp	r4, r3
 	subgt	r4, r7, #7
 	ldrle	r4, [fp, #-64]
 	uxthgt	r4, r4
-.L1136:
+.L1217:
 	cmp	r4, r7
-	bhi	.L1143
+	bhi	.L1224
 	mov	r3, #0
 	ldrh	r8, [r6, #32]
-	ldr	r0, [r6, #3832]
+	ldr	r0, [r6, #3280]
 	mov	r5, r3
 	ldr	r1, [fp, #-76]
 	movw	lr, #65535
 	mov	ip, #20
-	b	.L1144
-.L1117:
+	b	.L1225
+.L1198:
 	ldr	r3, [fp, #-64]
 	cmp	r3, #0
-	beq	.L1119
-	movw	r2, #1755
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1119:
+	beq	.L1200
+	movw	r2, #1766
+	ldr	r1, .L1319+4
+	ldr	r0, .L1319+8
+	bl	sftl_printk
+.L1200:
 	ldr	r3, [fp, #-80]
 	cmp	r3, #0
 	cmpne	r6, r3
-	beq	.L1120
-	movw	r2, #1756
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1120:
+	beq	.L1201
+	movw	r2, #1767
+	ldr	r1, .L1319+4
+	ldr	r0, .L1319+8
+	bl	sftl_printk
+.L1201:
 	mov	r3, #0
 	strh	r3, [r10, #2]	@ movhi
-	b	.L1237
-.L1122:
+	b	.L1317
+.L1203:
 	ldrh	r3, [ip], #2
 	cmp	r3, r7
-	beq	.L1121
+	beq	.L1202
 	mla	r1, r8, r5, r0
 	orr	r3, r4, r3, lsl #10
 	str	r3, [r1, #4]
@@ -7996,45 +8590,45 @@ FtlRecoverySuperblock:
 	bic	r3, r3, #3
 	add	r3, lr, r3
 	str	r3, [r1, #12]
-.L1121:
+.L1202:
 	add	r2, r2, #1
-	b	.L1118
-.L1128:
+	b	.L1199
+.L1209:
 	ldr	r2, [r7]
 	cmp	r2, #0
-	bne	.L1124
+	bne	.L1205
 	ldr	ip, [r7, #12]
 	ldr	r2, [ip, #4]
 	cmn	r2, #1
-	beq	.L1125
-	ldr	r1, .L1239
+	beq	.L1206
+	ldr	r1, .L1319
 	mov	r0, r2
 	str	ip, [fp, #-68]
 	ldr	r1, [r1, #2544]
 	bl	ftl_cmp_data_ver
 	ldr	ip, [fp, #-68]
 	cmp	r0, #0
-	ldrne	r1, .L1239
+	ldrne	r1, .L1319
 	addne	r2, r2, #1
 	strne	r2, [r1, #2544]
-.L1125:
+.L1206:
 	ldr	r2, [ip]
 	cmn	r2, #1
-	bne	.L1127
-.L1126:
+	bne	.L1208
+.L1207:
 	uxth	r2, r4
 	uxth	r3, r3
 	str	r2, [fp, #-60]
 	mov	r2, #20
 	mla	r9, r2, r3, r9
-	b	.L1233
-.L1124:
+	b	.L1313
+.L1205:
 	ldr	r8, [fp, #-60]
-.L1127:
+.L1208:
 	add	r3, r3, #1
 	add	r7, r7, #20
-	b	.L1123
-.L1138:
+	b	.L1204
+.L1219:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -8043,92 +8637,90 @@ FtlRecoverySuperblock:
 	orrne	r2, r4, r2, lsl #10
 	uxthne	r5, r5
 	strne	r2, [r9, #4]
-.L1144:
+.L1225:
 	uxth	r2, r3
 	cmp	r8, r2
-	bhi	.L1138
+	bhi	.L1219
 	mov	r1, r5
 	mov	r2, #0
 	bl	FlashReadPages
-	ldr	r3, [r6, #3832]
+	ldr	r3, [r6, #3280]
 	mov	r2, #20
 	movw	r1, #65535
 	mla	r5, r2, r5, r3
-.L1139:
+.L1220:
 	cmp	r5, r3
 	addeq	r4, r4, #1
 	uxtheq	r4, r4
-	beq	.L1136
-.L1142:
+	beq	.L1217
+.L1223:
 	ldr	r2, [r3]
 	cmp	r2, #0
-	bne	.L1133
+	bne	.L1214
 	ldr	r2, [r3, #12]
 	ldrh	r0, [r2]
 	cmp	r0, r1
-	beq	.L1141
+	beq	.L1222
 	ldr	r2, [r2, #4]
 	cmn	r2, #1
-	strne	r2, [r6, #4004]
-.L1141:
+	strne	r2, [r6, #3440]
+.L1222:
 	add	r3, r3, #20
-	b	.L1139
-.L1143:
+	b	.L1220
+.L1224:
 	mvn	r3, #0
-	str	r3, [r6, #4004]
-.L1133:
-	ldr	r1, .L1239
+	str	r3, [r6, #3440]
+.L1214:
+	ldr	r1, .L1319
 	mov	r2, #1
-	movw	r3, #4008
-	ldr	r4, .L1239
-	add	r0, r1, #3904
-	strh	r2, [r1, r3]	@ movhi
-	bl	FtlMapBlkWriteDump_data
 	ldr	r8, [fp, #-64]
-.L1145:
+	movw	r3, #3512
+	mov	r4, r1
+	strh	r2, [r1, r3]	@ movhi
+.L1226:
 	ldrh	ip, [r4, #32]
 	mov	r3, #0
-	ldr	r0, [r4, #3832]
+	ldr	r0, [r4, #3280]
 	mov	r9, r3
 	ldr	r1, [fp, #-76]
 	movw	lr, #65535
 	mov	r5, #20
-.L1146:
+.L1227:
 	uxth	r2, r3
 	cmp	ip, r2
-	bhi	.L1148
+	bhi	.L1229
 	mov	r2, #0
 	mov	r1, r9
 	bl	FlashReadPages
 	mov	r3, #0
-.L1236:
+.L1316:
 	str	r3, [fp, #-72]
 	ldrh	r3, [fp, #-72]
 	cmp	r9, r3
-	bhi	.L1176
+	bhi	.L1256
 	add	r8, r8, #1
 	ldrh	r3, [r4, #102]
 	uxth	r8, r8
 	cmp	r3, r8
-	bne	.L1145
+	bne	.L1226
 	ldrh	r2, [r4, #32]
 	movw	r0, #65535
 	mov	r3, #0
 	strh	r8, [r10, #2]	@ movhi
 	strh	r3, [r10, #4]	@ movhi
-.L1177:
+.L1257:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1232
+	bcs	.L1312
 	ldr	r1, [fp, #-76]
 	ldrh	ip, [r1], #2
 	cmp	ip, r0
 	str	r1, [fp, #-76]
 	add	r1, r3, #1
-	bne	.L1237
+	bne	.L1317
 	mov	r3, r1
-	b	.L1177
-.L1148:
+	b	.L1257
+.L1229:
 	ldrh	r2, [r1], #2
 	add	r3, r3, #1
 	cmp	r2, lr
@@ -8137,11 +8729,11 @@ FtlRecoverySuperblock:
 	addne	r9, r9, #1
 	uxthne	r9, r9
 	strne	r2, [r6, #4]
-	b	.L1146
-.L1176:
+	b	.L1227
+.L1256:
 	ldr	r3, [fp, #-72]
 	mov	r6, #20
-	ldr	r2, [r4, #3832]
+	ldr	r2, [r4, #3280]
 	mul	r6, r6, r3
 	str	r2, [fp, #-84]
 	add	r7, r2, r6
@@ -8151,7 +8743,7 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [fp, #-64]
 	cmp	r8, r3
-	bcc	.L1150
+	bcc	.L1231
 	ldr	r2, [fp, #-80]
 	moveq	r3, #1
 	movne	r3, #0
@@ -8159,34 +8751,26 @@ FtlRecoverySuperblock:
 	movls	r3, #0
 	andhi	r3, r3, #1
 	cmp	r3, #0
-	bne	.L1150
+	bne	.L1231
 	ldr	r3, [fp, #-60]
 	ldr	r2, [fp, #-68]
 	cmp	r8, r3
 	cmpeq	r2, r0
-	beq	.L1151
+	beq	.L1232
 	ldr	r2, [fp, #-84]
 	ldr	r3, [r2, r6]
 	cmn	r3, #1
-	beq	.L1152
+	beq	.L1233
 	ldr	r7, [r7, #12]
 	movw	r3, #61589
 	ldrh	r2, [r7]
 	cmp	r2, r3
-	beq	.L1153
-.L1160:
-	ldrh	r0, [r10]
-.L1235:
-	bl	decrement_vpc_count
-.L1150:
-	ldr	r3, [fp, #-72]
-	add	r3, r3, #1
-	b	.L1236
-.L1153:
+	ldrhne	r0, [r10]
+	bne	.L1314
 	ldr	r3, [r7, #4]
 	cmn	r3, #1
 	str	r3, [fp, #-56]
-	beq	.L1154
+	beq	.L1235
 	mov	r0, r3
 	ldr	r1, [r4, #2544]
 	bl	ftl_cmp_data_ver
@@ -8194,16 +8778,16 @@ FtlRecoverySuperblock:
 	ldrne	r3, [fp, #-56]
 	addne	r3, r3, #1
 	strne	r3, [r4, #2544]
-.L1154:
+.L1235:
 	ldrh	r2, [r7]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1155
-	movw	r2, #1905
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1155:
+	beq	.L1236
+	movw	r2, #1918
+	ldr	r1, .L1319+4
+	ldr	r0, .L1319+8
+	bl	sftl_printk
+.L1236:
 	ldr	r5, [r7, #8]
 	sub	r1, fp, #48
 	ldr	r3, [r7, #12]
@@ -8211,659 +8795,449 @@ FtlRecoverySuperblock:
 	mov	r0, r5
 	str	r3, [fp, #-52]
 	bl	log2phys
-	ldr	r1, [r4, #4004]
+	ldr	r1, [r4, #3440]
 	cmn	r1, #1
-	beq	.L1156
+	beq	.L1237
 	ldr	r0, [fp, #-56]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1156
+	beq	.L1237
 	ldr	r2, [fp, #-52]
 	cmn	r2, #1
-	beq	.L1157
-	ldr	r0, [r4, #3832]
+	beq	.L1238
+	ldr	r0, [r4, #3280]
 	mov	r1, #1
 	add	r0, r0, r6
 	str	r2, [r0, #4]
 	mov	r2, #0
 	ldr	r7, [r0, #12]
 	bl	FlashReadPages
-	ldr	r2, [r4, #3832]
+	ldr	r2, [r4, #3280]
 	ldr	r1, [r2, r6]
 	add	r3, r2, r6
 	cmn	r1, #1
-	bne	.L1158
-.L1159:
+	bne	.L1239
+.L1240:
 	mvn	r3, #0
-	ldrh	r0, [r10]
 	str	r3, [fp, #-52]
-	bl	decrement_vpc_count
-.L1167:
+.L1247:
 	ldr	r6, [fp, #-52]
 	cmn	r6, #1
-	beq	.L1150
-.L1180:
+	beq	.L1231
+.L1260:
 	ubfx	r0, r6, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #40]
 	mov	r5, r0
 	cmp	r3, r0
-	bhi	.L1172
-	movw	r2, #2006
-	ldr	r1, .L1239+4
-	ldr	r0, .L1239+8
-	bl	printk
-.L1172:
-	ldr	r3, .L1239
+	bhi	.L1252
+	movw	r2, #2019
+	ldr	r1, .L1319+4
+	ldr	r0, .L1319+8
+	bl	sftl_printk
+.L1252:
+	ldr	r3, .L1319
 	ldr	r2, [r3, #2324]
 	lsl	r3, r5, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1173
+	beq	.L1253
 	mov	r0, r5
-	b	.L1235
-.L1157:
+.L1314:
+	bl	decrement_vpc_count
+	b	.L1231
+.L1238:
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	bne	.L1160
+	bne	.L1231
 	mov	r2, #1
 	sub	r1, fp, #52
 	mov	r0, r5
 	bl	log2phys
-	b	.L1160
-.L1158:
+.L1231:
+	ldr	r3, [fp, #-72]
+	add	r3, r3, #1
+	b	.L1316
+.L1239:
 	ldr	r1, [r7, #8]
 	cmp	r5, r1
-	bne	.L1159
+	bne	.L1240
 	ldr	r1, [r7, #4]
-	ldr	r0, [r4, #4004]
+	ldr	r0, [r4, #3440]
 	str	r1, [fp, #-84]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1159
+	beq	.L1240
 	ldr	r1, [fp, #-48]
 	ldr	r0, [fp, #-44]
 	cmp	r1, r0
-	bne	.L1162
-.L1165:
+	bne	.L1242
+.L1245:
 	ldr	r1, [fp, #-52]
 	mov	r0, r5
 	bl	FtlReUsePrevPpa
-	b	.L1159
-.L1162:
+	b	.L1240
+.L1242:
 	ldr	r0, [fp, #-52]
 	cmp	r1, r0
-	beq	.L1159
+	beq	.L1240
 	cmn	r1, #1
 	streq	r1, [r2, r6]
-	beq	.L1164
+	beq	.L1244
 	str	r1, [r3, #4]
 	mov	r2, #0
 	mov	r1, #1
 	mov	r0, r3
 	ldr	r7, [r3, #12]
 	bl	FlashReadPages
-.L1164:
-	ldr	r2, [r4, #3832]
+.L1244:
+	ldr	r2, [r4, #3280]
 	ldr	r2, [r2, r6]
 	cmn	r2, #1
-	beq	.L1165
+	beq	.L1245
 	ldr	r3, [r7, #4]
-	ldr	r0, [r4, #4004]
+	ldr	r0, [r4, #3440]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1165
+	beq	.L1245
 	mov	r1, r3
 	ldr	r0, [fp, #-84]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1159
-	b	.L1165
-.L1156:
+	beq	.L1240
+	b	.L1245
+.L1237:
 	ldr	r3, [fp, #-44]
 	ldr	r2, [fp, #-48]
 	cmp	r2, r3
-	beq	.L1167
+	beq	.L1247
 	mov	r2, #1
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r6, [fp, #-48]
 	cmn	r6, #1
-	beq	.L1167
+	beq	.L1247
 	ldr	r3, [fp, #-52]
 	cmp	r6, r3
-	beq	.L1180
+	beq	.L1260
 	ubfx	r0, r6, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, .L1239+12
+	ldr	r3, .L1319+12
 	ldrh	r2, [r3]
 	cmp	r2, r0
-	beq	.L1171
+	beq	.L1251
 	ldrh	r2, [r3, #48]
 	cmp	r2, r0
-	beq	.L1171
+	beq	.L1251
 	ldrh	r3, [r3, #96]
 	cmp	r3, r0
-	bne	.L1167
-.L1171:
-	ldr	r0, [r4, #3832]
+	bne	.L1247
+.L1251:
+	ldr	r0, [r4, #3280]
 	mov	r2, #0
 	mov	r1, #1
 	str	r6, [r0, #4]
 	ldr	r7, [r0, #12]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3832]
+	ldr	r3, [r4, #3280]
 	ldr	r3, [r3]
 	cmn	r3, #1
-	beq	.L1167
+	beq	.L1247
 	ldr	r1, [r7, #4]
 	ldr	r0, [fp, #-56]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1167
+	bne	.L1247
 	mov	r2, #1
 	sub	r1, fp, #48
 	mov	r0, r5
 	bl	log2phys
-	b	.L1167
-.L1173:
+	b	.L1247
+.L1253:
 	mov	r1, r5
-	ldr	r0, .L1239+16
-	bl	printk
-	b	.L1150
-.L1152:
-	ldr	r3, [r4, #4012]
+	ldr	r0, .L1319+16
+	bl	sftl_printk
+	b	.L1231
+.L1233:
+	ldr	r3, [r4, #3516]
 	cmp	r3, #31
 	addls	r2, r4, r3, lsl #2
 	addls	r3, r3, #1
-	strls	r3, [r4, #4012]
-	strls	r5, [r2, #4016]
+	strls	r3, [r4, #3516]
+	strls	r5, [r2, #3520]
 	ldrh	r0, [r10]
 	bl	decrement_vpc_count
-	ldr	r3, [r4, #4004]
+	ldr	r3, [r4, #3440]
 	cmn	r3, #1
 	ldreq	r3, [fp, #-56]
-	beq	.L1234
+	beq	.L1315
 	ldr	r2, [fp, #-56]
 	cmp	r2, r3
-	bcs	.L1150
+	bcs	.L1231
 	mov	r3, r2
-.L1234:
-	str	r3, [r4, #4004]
-	b	.L1150
-.L1151:
+.L1315:
+	str	r3, [r4, #3440]
+	b	.L1231
+.L1232:
 	ldrb	r3, [fp, #-68]	@ zero_extendqisi2
 	ldr	r2, [fp, #-68]
 	ldr	r1, [fp, #-60]
 	strb	r3, [r10, #6]
 	ldrh	r3, [fp, #-60]
 	strh	r3, [r10, #2]	@ movhi
-.L1238:
+.L1318:
 	mov	r0, r10
 	bl	ftl_sb_update_avl_pages
-	b	.L1232
-.L1240:
+	b	.L1312
+.L1320:
 	.align	2
-.L1239:
+.L1319:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+421
+	.word	.LANCHOR1+464
 	.word	.LC1
 	.word	.LANCHOR0+2348
-	.word	.LC99
+	.word	.LC107
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
-	.global	FtlSuperblockPowerLostFix
+	.global	FtlWriteDump_data
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
-	@ args = 0, pretend = 0, frame = 20
+	.type	FtlWriteDump_data, %function
+FtlWriteDump_data:
+	@ args = 0, pretend = 0, frame = 28
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #20
-	mvn	r3, #0
-	str	r3, [fp, #-36]
-	mov	r7, #0
-	ldr	r3, .L1252
-	movw	r1, #61589
-	mov	r4, r0
-	mov	r6, #7
-	ldr	r2, [r3, #3280]
-	mov	r8, r3
-	ldr	r5, [r3, #3284]
-	str	r2, [fp, #-44]
-	mvn	r2, #2
-	str	r5, [fp, #-40]
-	str	r2, [r5, #8]
-	mvn	r2, #1
-	str	r2, [r5, #12]
-	ldrh	r2, [r0]
-	strh	r7, [r5]	@ movhi
-	strh	r2, [r5, #2]	@ movhi
-	ldr	r2, [r3, #3280]
-	str	r1, [r2]
-	ldr	r1, .L1252+4
-	ldr	r2, [r3, #3280]
-	str	r1, [r2, #4]
-.L1242:
-	subs	r6, r6, #1
-	beq	.L1244
-	ldrh	r3, [r4, #4]
+	sub	sp, sp, #28
+	ldr	r6, .L1339
+	ldr	r4, .L1339+4
+	ldrh	r2, [r6, #4]
+	cmp	r2, #0
+	beq	.L1322
+	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1243
-.L1244:
-	ldrh	r3, [r4]
-	ldr	r1, [r8, #2324]
-	ldrh	r0, [r4, #4]
-	lsl	r3, r3, #1
-	ldrh	r2, [r1, r3]
-	sub	r2, r2, r0
-	strh	r2, [r1, r3]	@ movhi
-	ldrh	r3, [r8, #102]
-	strh	r3, [r4, #2]	@ movhi
-	mov	r3, #0
-	strb	r3, [r4, #6]
-	strh	r3, [r4, #4]	@ movhi
-	sub	sp, fp, #32
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1243:
-	mov	r0, r4
-	bl	get_new_active_ppa
-	cmn	r0, #1
-	str	r0, [fp, #-48]
-	beq	.L1244
-	ldr	r3, [r8, #2544]
-	mov	r1, #1
-	sub	r0, fp, #52
-	str	r3, [r5, #4]
-	add	r3, r3, #1
-	cmn	r3, #1
-	moveq	r3, r7
-	str	r3, [r8, #2544]
-	mov	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r4]
-	bl	decrement_vpc_count
-	b	.L1242
-.L1253:
-	.align	2
-.L1252:
-	.word	.LANCHOR0
-	.word	305419896
-	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
-	.align	2
-	.global	FtlLoadBbt
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlLoadBbt, %function
-FtlLoadBbt:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L1286
-	ldr	r7, .L1286+4
-	ldr	r3, [r4, #3280]
-	ldr	r6, [r4, #3284]
-	str	r3, [r4, #3268]
-	str	r6, [r4, #3272]
-	bl	FtlBbtMemInit
-	ldrh	r5, [r4, #98]
-	sub	r5, r5, #1
-	uxth	r5, r5
-.L1255:
-	ldrh	r3, [r4, #98]
-	sub	r3, r3, #16
-	cmp	r5, r3
-	ble	.L1258
-	lsl	r3, r5, #10
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	cmn	r3, #1
-	bne	.L1256
-	ldr	r3, [r4, #3264]
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	add	r3, r3, #1
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-.L1256:
-	ldr	r3, [r4, #3260]
-	cmn	r3, #1
-	beq	.L1257
-	ldrh	r2, [r6]
-	movw	r3, #61649
+	bne	.L1322
+	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
+	ldrh	r3, [r4, #102]
+	mul	r3, r3, r1
 	cmp	r2, r3
-	bne	.L1257
-	ldr	r3, [r6, #4]
-	strh	r5, [r4, #152]	@ movhi
-	str	r3, [r4, #160]
-	ldrh	r3, [r6, #8]
-	strh	r3, [r4, #156]	@ movhi
-.L1258:
-	ldrh	r3, [r4, #152]
-	movw	r2, #65535
-	cmp	r3, r2
-	beq	.L1272
-	ldrh	r3, [r4, #156]
-	cmp	r3, r2
-	beq	.L1262
-	lsl	r3, r3, #10
-	mov	r2, #1
-	mov	r1, r2
-	ldr	r0, .L1286+4
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
+	beq	.L1322
+	ldrb	r8, [r4, #2358]	@ zero_extendqisi2
+	cmp	r8, #0
+	bne	.L1321
+	ldr	r7, [r4, #2504]
+	mov	r2, r8
+	sub	r1, fp, #64
+	ldrh	r9, [r4, #32]
+	sub	r7, r7, #1
+	mov	r0, r7
+	bl	log2phys
+	ldr	r3, [fp, #-64]
+	ldr	r5, [r4, #3324]
+	ldr	r0, [r4, #3292]
 	cmn	r3, #1
-	beq	.L1262
-	ldrh	r2, [r6]
-	movw	r3, #61649
-	cmp	r2, r3
-	bne	.L1262
-	ldr	r3, [r6, #4]
-	ldr	r2, [r4, #160]
-	cmp	r3, r2
-	ldrhhi	r2, [r4, #156]
-	strhi	r3, [r4, #160]
-	ldrhhi	r3, [r6, #8]
-	strhhi	r2, [r4, #152]	@ movhi
-	strhhi	r3, [r4, #156]	@ movhi
-.L1262:
-	ldr	r7, .L1286+4
+	str	r3, [fp, #-56]
+	str	r7, [fp, #-44]
+	str	r0, [fp, #-52]
+	str	r5, [fp, #-48]
+	str	r8, [r5, #4]
+	beq	.L1324
+	mov	r2, r8
 	mov	r1, #1
-	ldrh	r0, [r4, #152]
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
-	add	r0, r0, #1
-	strh	r0, [r4, #154]	@ movhi
-.L1264:
-	cmp	r5, #0
-	bge	.L1267
-	mov	r2, #254
-	ldr	r1, .L1286+8
-	ldr	r0, .L1286+12
-	bl	printk
-.L1266:
-	ldrh	r3, [r6, #10]
-	ldrh	r0, [r6, #12]
-	strh	r3, [r4, #158]	@ movhi
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1269
-	ldr	r2, [r4, #28]
-	cmp	r0, r2
-	beq	.L1269
-	ldrh	r3, [r4, #42]
-	lsr	r3, r3, #2
-	cmp	r0, r3
-	cmpcc	r2, r3
-	bcs	.L1269
-	bl	FtlSysBlkNumInit
-.L1269:
-	ldr	r6, .L1286+16
-	mov	r5, #0
-	ldr	r7, .L1286+20
-.L1270:
-	ldrh	r3, [r4, #54]
-	cmp	r5, r3
-	bcc	.L1271
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1257:
-	sub	r5, r5, #1
-	uxth	r5, r5
-	b	.L1255
-.L1267:
-	ldrh	r3, [r4, #152]
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3264]
-	ldr	r3, [r4, #3280]
-	str	r3, [r4, #3268]
+	sub	r0, fp, #60
 	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
+.L1325:
+	ldr	ip, .L1339
+	mov	r8, #0
+	ldr	r3, .L1339+8
+	lsl	r9, r9, #2
+	mov	r10, r8
+	strh	r3, [r5]	@ movhi
+.L1326:
+	cmp	r9, r8
+	bne	.L1330
+.L1327:
+	mov	r3, #1
+.L1338:
+	strb	r3, [r4, #2358]
+.L1321:
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1324:
+	ldrh	r2, [r4, #110]
+	mov	r1, #255
+	bl	ftl_memset
+	b	.L1325
+.L1330:
+	ldrh	r3, [r6, #4]
+	cmp	r3, #0
+	beq	.L1327
+	ldr	r3, [fp, #-56]
+	mov	r0, ip
+	str	r7, [r5, #8]
+	add	r8, r8, #1
+	str	ip, [fp, #-68]
+	str	r3, [r5, #12]
+	ldrh	r3, [r6]
+	strh	r3, [r5, #2]	@ movhi
+	bl	get_new_active_ppa
+	ldr	r3, [r4, #2544]
+	mov	r1, #1
+	str	r0, [fp, #-56]
+	sub	r0, fp, #60
+	str	r3, [r5, #4]
+	add	r3, r3, #1
 	cmn	r3, #1
-	beq	.L1265
-	ldrh	r2, [r6]
-	movw	r3, #61649
-	cmp	r2, r3
-	beq	.L1266
-.L1265:
-	sub	r5, r5, #1
-	sxth	r5, r5
-	b	.L1264
-.L1271:
-	ldrh	r2, [r7]
-	ldr	r1, [r4, #3268]
-	ldr	r0, [r6, #4]!
-	lsl	r2, r2, #2
-	mla	r1, r5, r2, r1
-	add	r5, r5, #1
-	bl	ftl_memcpy
-	b	.L1270
-.L1272:
-	mvn	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
-.L1287:
+	moveq	r3, r10
+	str	r3, [r4, #2544]
+	mov	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r6]
+	bl	decrement_vpc_count
+	ldr	ip, [fp, #-68]
+	b	.L1326
+.L1322:
+	mov	r3, #0
+	b	.L1338
+.L1340:
 	.align	2
-.L1286:
+.L1339:
+	.word	.LANCHOR0+2348
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.word	.LANCHOR1+443
-	.word	.LC1
-	.word	.LANCHOR0+176
-	.word	.LANCHOR0+3900
-	.size	FtlLoadBbt, .-FtlLoadBbt
+	.word	-3947
+	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	2
-	.global	FtlMakeBbt
+	.global	l2p_flush
 	.syntax unified
 	.arm
 	.fpu softvfp
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
-	@ args = 0, pretend = 0, frame = 4
+	.type	l2p_flush, %function
+l2p_flush:
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #4
-	mov	r7, #0
-	ldr	r8, .L1307
-	bl	FtlBbtMemInit
-	bl	FtlLoadFactoryBbt
-	sub	r5, r8, #180
-	sub	r9, r8, #18
-	mov	r4, r5
-.L1289:
-	ldrh	r3, [r5, #54]
-	cmp	r7, r3
-	bcc	.L1295
-	mov	r0, #0
-.L1296:
-	ldrh	r2, [r4, #114]
-	uxth	r3, r0
-	add	r5, r0, #1
+	ldr	r5, .L1345
+	mov	r4, #0
+	mov	r6, #12
+	bl	FtlWriteDump_data
+.L1342:
+	ldrh	r2, [r5, #138]
+	uxth	r3, r4
 	cmp	r2, r3
-	bhi	.L1297
-	ldrh	r5, [r4, #164]
-	movw	r6, #65535
-	sub	r5, r5, #1
-	uxth	r5, r5
-.L1298:
-	ldrh	r3, [r4, #164]
-	sub	r3, r3, #48
-	cmp	r5, r3
-	ble	.L1302
-	mov	r0, r5
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1299
-	mov	r0, r5
-	bl	FlashTestBlk
-	cmp	r0, #0
-	beq	.L1300
-	mov	r0, r5
-	bl	FtlBbmMapBadBlock
-.L1299:
-	sub	r5, r5, #1
-	uxth	r5, r5
-	b	.L1298
-.L1295:
-	ldrh	r3, [r9, #2]!
-	movw	r2, #65535
-	ldr	r0, [r5, #3280]
-	ldr	r10, [r5, #3284]
-	cmp	r3, r2
-	str	r0, [r5, #3268]
-	str	r10, [r5, #3272]
-	beq	.L1290
-	ldrh	ip, [r5, #98]
-	mov	r2, #1
-	mov	r1, r2
-	ldr	r0, .L1307+4
-	mla	ip, r7, ip, r3
-	lsl	r3, ip, #10
-	str	ip, [fp, #-44]
-	str	r3, [r5, #3264]
-	bl	FlashReadPages
-	ldrh	r2, [r5, #98]
-	ldr	r1, [r5, #3268]
-	ldr	r0, [r8]
-	add	r2, r2, #7
-	asr	r2, r2, #3
-	bl	ftl_memcpy
-	ldr	ip, [fp, #-44]
-.L1291:
-	uxth	r0, ip
-	add	r7, r7, #1
-	add	r8, r8, #4
-	bl	FtlBbmMapBadBlock
-	b	.L1289
-.L1290:
-	mov	r1, r7
-	bl	FlashGetBadBlockList
-	ldr	r1, [r8]
-	ldr	r0, [r5, #3268]
-	bl	FtlBbt2Bitmap
-	ldrh	r6, [r5, #98]
-.L1293:
-	sub	r6, r6, #1
-	uxth	r6, r6
-.L1292:
-	ldrh	r0, [r4, #98]
-	smlabb	r0, r0, r7, r6
-	uxth	r0, r0
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1293
-	mov	r1, #16
-	ldr	r0, [r4, #3284]
-	strh	r6, [r9]	@ movhi
-	bl	__memzero
-	mov	r1, #4096
-	ldr	r0, [r4, #3280]
-	bl	__memzero
-	ldr	r3, .L1307+8
-	strh	r3, [r10]	@ movhi
+	bhi	.L1344
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L1344:
+	ldr	r3, [r5, #2492]
+	uxth	r0, r4
+	mla	r3, r6, r0, r3
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L1343
+	bl	flush_l2p_region
+.L1343:
+	add	r4, r4, #1
+	b	.L1342
+.L1346:
+	.align	2
+.L1345:
+	.word	.LANCHOR0
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	@ args = 0, pretend = 0, frame = 20
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #20
+	mvn	r3, #0
+	str	r3, [fp, #-36]
+	mov	r6, #0
+	ldr	r3, .L1360
+	movw	r1, #61589
+	mov	r4, r0
+	ldr	r2, [r3, #3292]
+	mov	r8, r3
+	ldr	r5, [r3, #3324]
+	str	r2, [fp, #-44]
+	mvn	r2, #2
+	str	r5, [fp, #-40]
+	str	r2, [r5, #8]
+	mvn	r2, #1
+	str	r2, [r5, #12]
+	ldrh	r2, [r0]
+	strh	r6, [r5]	@ movhi
+	strh	r2, [r5, #2]	@ movhi
+	ldr	r2, [r3, #3292]
+	str	r1, [r2]
+	ldr	r1, .L1360+4
+	ldr	r2, [r3, #3292]
+	str	r1, [r2, #4]
+	ldrh	r2, [r0, #4]
+	tst	r2, #1
+	moveq	r7, #6
+	movne	r7, #7
+.L1353:
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L1349
+.L1350:
+	ldrh	r3, [r4]
+	ldr	r1, [r8, #2324]
+	ldrh	r0, [r4, #4]
+	lsl	r3, r3, #1
+	ldrh	r2, [r1, r3]
+	sub	r2, r2, r0
+	strh	r2, [r1, r3]	@ movhi
+	ldrh	r3, [r8, #102]
+	strh	r3, [r4, #2]	@ movhi
 	mov	r3, #0
-	str	r3, [r10, #4]
-	ldrh	r3, [r9]
-	ldrh	ip, [r4, #98]
-	strh	r3, [r10, #2]	@ movhi
-	ldrh	r3, [r9]
-	ldr	r1, [r8]
-	ldr	r0, [r4, #3268]
-	mla	ip, r7, ip, r3
-	lsl	r3, ip, #10
-	str	ip, [fp, #-44]
-	str	r3, [r4, #3264]
-	ldr	r3, .L1307+12
-	ldrh	r2, [r3]
-	lsl	r2, r2, #2
-	bl	ftl_memcpy
-	mov	r2, #1
-	ldr	r0, .L1307+4
-	mov	r1, r2
-	bl	FlashEraseBlocks
-	mov	r3, #1
-	ldr	r0, .L1307+4
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r3, [r4, #3260]
-	ldr	ip, [fp, #-44]
-	cmn	r3, #1
-	bne	.L1291
-	uxth	r0, ip
-	bl	FtlBbmMapBadBlock
-	b	.L1292
-.L1297:
-	uxth	r0, r0
-	bl	FtlBbmMapBadBlock
-	mov	r0, r5
-	b	.L1296
-.L1300:
-	ldrh	r3, [r4, #152]
-	cmp	r3, r6
-	strheq	r5, [r4, #152]	@ movhi
-	beq	.L1299
-.L1301:
-	strh	r5, [r4, #156]	@ movhi
-.L1302:
-	ldrh	r3, [r4, #152]
-	mov	r5, #0
-	ldr	r0, [r4, #3800]
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	sub	sp, fp, #32
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L1349:
+	mov	r0, r4
+	bl	get_new_active_ppa
+	cmn	r0, #1
+	str	r0, [fp, #-48]
+	beq	.L1350
+	ldr	r3, [r8, #2544]
 	mov	r1, #1
-	str	r5, [r4, #160]
-	mov	r2, #2
-	strh	r5, [r4, #154]	@ movhi
-	lsl	r3, r3, #10
-	str	r3, [r0, #4]
-	ldrh	r3, [r4, #156]
-	lsl	r3, r3, #10
-	str	r3, [r0, #24]
-	bl	FlashEraseBlocks
-	ldrh	r0, [r4, #152]
-	bl	FtlBbmMapBadBlock
-	ldrh	r0, [r4, #156]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldr	r3, [r4, #160]
-	ldrh	r2, [r4, #156]
-	strh	r5, [r4, #154]	@ movhi
-	add	r3, r3, #1
-	str	r3, [r4, #160]
-	ldrh	r3, [r4, #152]
-	strh	r2, [r4, #152]	@ movhi
-	strh	r3, [r4, #156]	@ movhi
-	bl	FtlBbmTblFlush
-	mov	r0, r5
-	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1308:
+	sub	r0, fp, #52
+	str	r3, [r5, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, r6
+	str	r3, [r8, #2544]
+	mov	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	subs	r7, r7, #1
+	bne	.L1353
+	b	.L1350
+.L1361:
 	.align	2
-.L1307:
-	.word	.LANCHOR0+180
-	.word	.LANCHOR0+3260
-	.word	-3872
-	.word	.LANCHOR0+3900
-	.size	FtlMakeBbt, .-FtlMakeBbt
+.L1360:
+	.word	.LANCHOR0
+	.word	305419896
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
 	.global	FtlVendorPartWrite
 	.syntax unified
@@ -8878,27 +9252,27 @@ FtlVendorPartWrite:
 	sub	fp, ip, #4
 	sub	sp, sp, #100
 	mov	r7, r0
-	ldr	r4, .L1318
+	ldr	r4, .L1371
 	mov	r5, r1
 	str	r2, [fp, #-128]
 	add	r2, r0, r1
 	ldrh	r3, [r4, #96]
 	cmp	r2, r3
 	mvnhi	r8, #0
-	bhi	.L1309
+	bhi	.L1362
 	ldrh	r6, [r4, #108]
 	mov	r8, #0
 	lsr	r6, r0, r6
 	lsl	r10, r6, #2
-.L1311:
+.L1364:
 	cmp	r5, #0
-	bne	.L1316
-.L1309:
+	bne	.L1369
+.L1362:
 	mov	r0, r8
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1316:
-	ldr	r3, [r4, #3884]
+.L1369:
+	ldr	r3, [r4, #3364]
 	mov	r0, r7
 	ldrh	r2, [r4, #58]
 	ldr	ip, [r3, r10]
@@ -8917,8 +9291,8 @@ FtlVendorPartWrite:
 	cmpne	r9, r2
 	movne	r1, #1
 	moveq	r1, #0
-	beq	.L1313
-	ldr	r2, [r4, #3848]
+	beq	.L1366
+	ldr	r2, [r4, #3300]
 	sub	r0, fp, #124
 	str	ip, [fp, #-120]
 	str	r2, [fp, #-116]
@@ -8927,10 +9301,10 @@ FtlVendorPartWrite:
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-.L1314:
+.L1367:
 	ldr	r3, [fp, #-132]
 	lsl	ip, r9, #9
-	ldr	r0, [r4, #3848]
+	ldr	r0, [r4, #3300]
 	sub	r5, r5, r9
 	mov	r2, ip
 	ldr	r1, [fp, #-128]
@@ -8940,8 +9314,8 @@ FtlVendorPartWrite:
 	add	r0, r0, r3, lsl #9
 	bl	ftl_memcpy
 	mov	r1, r6
-	ldr	r2, [r4, #3848]
-	ldr	r0, .L1318+4
+	ldr	r2, [r4, #3300]
+	ldr	r0, .L1371+4
 	add	r6, r6, #1
 	bl	FtlMapWritePage
 	ldr	r3, [fp, #-128]
@@ -8950,17 +9324,17 @@ FtlVendorPartWrite:
 	mvneq	r8, #0
 	add	r3, r3, ip
 	str	r3, [fp, #-128]
-	b	.L1311
-.L1313:
+	b	.L1364
+.L1366:
 	ldrh	r2, [r4, #110]
-	ldr	r0, [r4, #3848]
+	ldr	r0, [r4, #3300]
 	bl	ftl_memset
-	b	.L1314
-.L1319:
+	b	.L1367
+.L1372:
 	.align	2
-.L1318:
+.L1371:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3948
+	.word	.LANCHOR0+3468
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
 	.global	Ftl_save_ext_data
@@ -8974,12 +9348,12 @@ Ftl_save_ext_data:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1322
-	ldr	r2, .L1322+4
+	ldr	r3, .L1375
+	ldr	r2, .L1375+4
 	ldr	r1, [r3, #2636]
 	cmp	r1, r2
 	ldmfdne	sp, {fp, sp, pc}
-	ldr	r2, .L1322+8
+	ldr	r2, .L1375+8
 	mov	r1, #1
 	mov	r0, #0
 	str	r2, [r3, #2640]
@@ -9007,15 +9381,15 @@ Ftl_save_ext_data:
 	str	r2, [r3, #2680]
 	ldr	r2, [r3, #2568]
 	str	r2, [r3, #2684]
-	ldr	r2, .L1322+12
+	ldr	r2, .L1375+12
 	bl	FtlVendorPartWrite
 	ldmfd	sp, {fp, sp, pc}
-.L1323:
+.L1376:
 	.align	2
-.L1322:
+.L1375:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177348
+	.word	1342177352
 	.word	.LANCHOR0+2636
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -9030,32 +9404,32 @@ FtlEctTblFlush:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L1329
-	ldrh	r3, [r2, #-8]
+	ldr	r2, .L1382
+	ldrh	r3, [r2]
 	cmp	r3, #31
 	addls	r3, r3, #1
 	movhi	r2, #32
-	strhls	r3, [r2, #-8]	@ movhi
+	strhls	r3, [r2]	@ movhi
 	movls	r2, #1
 	cmp	r0, #0
-	ldr	r3, .L1329+4
-	bne	.L1326
-	ldr	r1, [r3, #3860]
+	ldr	r3, .L1382+4
+	bne	.L1379
+	ldr	r1, [r3, #3340]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1327
-.L1326:
-	ldr	r2, [r3, #3860]
+	bcc	.L1380
+.L1379:
+	ldr	r2, [r3, #3340]
 	mov	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1329+8
+	ldr	r1, .L1382+8
 	str	r1, [r2]
-	movw	r1, #3852
+	movw	r1, #3332
 	ldrh	r1, [r3, r1]
-	ldr	r2, [r3, #3860]
+	ldr	r2, [r3, #3340]
 	lsl	r3, r1, #9
 	str	r3, [r2, #12]
 	ldr	r3, [r2, #8]
@@ -9065,13 +9439,13 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1327:
+.L1380:
 	mov	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1330:
+.L1383:
 	.align	2
-.L1329:
-	.word	.LANCHOR3-4032
+.L1382:
+	.word	.LANCHOR0+3648
 	.word	.LANCHOR0
 	.word	1112818501
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
@@ -9082,85 +9456,106 @@ FtlEctTblFlush:
 	.fpu softvfp
 	.type	FtlVendorPartRead, %function
 FtlVendorPartRead:
-	@ args = 0, pretend = 0, frame = 92
+	@ args = 0, pretend = 0, frame = 96
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #92
+	sub	sp, sp, #96
 	mov	r9, r2
-	ldr	r5, .L1340
-	mov	r7, r1
+	ldr	r3, .L1394
+	mov	r6, r1
 	add	r1, r0, r1
-	mov	r10, r0
-	ldrh	r2, [r5, #96]
+	mov	r7, r0
+	ldrh	r2, [r3, #96]
+	mov	r10, r3
 	cmp	r1, r2
 	mvnhi	r8, #0
-	bhi	.L1331
-	ldrh	r6, [r5, #108]
+	bhi	.L1384
+	ldrh	r5, [r3, #108]
 	mov	r8, #0
-	lsr	r6, r0, r6
-	lsl	r6, r6, #2
-.L1333:
-	cmp	r7, #0
-	bne	.L1338
-.L1331:
+	lsr	r5, r0, r5
+	lsl	r3, r5, #2
+	str	r3, [fp, #-128]
+.L1386:
+	cmp	r6, #0
+	bne	.L1392
+.L1384:
 	mov	r0, r8
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1338:
-	ldr	r2, [r5, #3884]
-	mov	r0, r10
-	ldrh	r4, [r5, #58]
-	ldr	ip, [r2, r6]
+.L1392:
+	ldr	r3, [fp, #-128]
+	mov	r0, r7
+	ldr	r2, [r10, #3364]
+	ldrh	r4, [r10, #58]
+	ldr	ip, [r2, r3]
 	mov	r1, r4
-	str	ip, [fp, #-128]
+	str	ip, [fp, #-136]
 	bl	__umodsi3
 	sub	r4, r4, r0
-	ldr	ip, [fp, #-128]
+	ldr	ip, [fp, #-136]
 	uxth	r4, r4
 	str	r0, [fp, #-132]
-	cmp	r7, r4
-	uxthcc	r4, r7
+	cmp	r6, r4
+	uxthcc	r4, r6
 	cmp	ip, #0
 	lsl	r3, r4, #9
-	str	r3, [fp, #-128]
-	beq	.L1335
-	ldr	r2, [r5, #3848]
-	sub	r3, fp, #104
+	str	r3, [fp, #-136]
+	beq	.L1388
+	ldr	r2, [r10, #3300]
 	sub	r0, fp, #124
-	str	r3, [fp, #-112]
 	str	ip, [fp, #-120]
+	str	ip, [fp, #-136]
 	str	r2, [fp, #-116]
+	sub	r2, fp, #104
+	str	r2, [fp, #-112]
 	mov	r2, #1
 	mov	r1, r2
 	bl	FlashReadPages
-	ldr	r1, [r5, #3848]
-	mov	r0, r9
-	ldr	r3, [fp, #-132]
 	ldr	r2, [fp, #-124]
-	add	r1, r1, r3, lsl #9
+	ldr	ip, [fp, #-136]
 	cmn	r2, #1
-	lsl	r2, r4, #9
+	ldr	r2, [r10, #3444]
 	mvneq	r8, #0
+	cmp	r2, #256
+	bne	.L1390
+	mov	r2, ip
+	mov	r1, r5
+	ldr	r0, .L1394+4
+	bl	sftl_printk
+	ldr	r2, [r10, #3300]
+	mov	r1, r5
+	ldr	r0, .L1394+8
+	bl	FtlMapWritePage
+.L1390:
+	ldr	r1, [r10, #3300]
+	lsl	r2, r4, #9
+	ldr	r3, [fp, #-132]
+	mov	r0, r9
+	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1337:
+.L1391:
 	ldr	r3, [fp, #-128]
-	sub	r7, r7, r4
-	add	r10, r10, r4
-	add	r6, r6, #4
-	add	r9, r9, r3
-	b	.L1333
-.L1335:
+	add	r5, r5, #1
+	sub	r6, r6, r4
+	add	r7, r7, r4
+	add	r9, r9, r4, lsl #9
+	add	r3, r3, #4
+	str	r3, [fp, #-128]
+	b	.L1386
+.L1388:
 	lsl	r2, r4, #9
 	mov	r1, ip
 	mov	r0, r9
 	bl	ftl_memset
-	b	.L1337
-.L1341:
+	b	.L1391
+.L1395:
 	.align	2
-.L1340:
+.L1394:
 	.word	.LANCHOR0
+	.word	.LC108
+	.word	.LANCHOR0+3468
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
 	.global	FtlLoadEctTbl
@@ -9174,34 +9569,34 @@ FtlLoadEctTbl:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1344
-	movw	r5, #3852
+	ldr	r4, .L1398
+	movw	r5, #3332
 	mov	r0, #64
-	ldr	r2, [r4, #3860]
+	ldr	r2, [r4, #3340]
 	ldrh	r1, [r4, r5]
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #3860]
+	ldr	r3, [r4, #3340]
 	ldr	r2, [r3]
-	ldr	r3, .L1344+4
+	ldr	r3, .L1398+4
 	cmp	r2, r3
-	beq	.L1343
-	ldr	r1, .L1344+8
-	ldr	r0, .L1344+12
-	bl	printk
+	beq	.L1397
+	ldr	r1, .L1398+8
+	ldr	r0, .L1398+12
+	bl	sftl_printk
 	ldrh	r2, [r4, r5]
 	mov	r1, #0
-	ldr	r0, [r4, #3860]
+	ldr	r0, [r4, #3340]
 	lsl	r2, r2, #9
 	bl	ftl_memset
-.L1343:
+.L1397:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1345:
+.L1399:
 	.align	2
-.L1344:
+.L1398:
 	.word	.LANCHOR0
 	.word	1112818501
-	.word	.LC100
+	.word	.LC109
 	.word	.LC71
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
 	.align	2
@@ -9216,23 +9611,23 @@ Ftl_load_ext_data:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1349
+	ldr	r4, .L1403
 	mov	r1, #1
 	mov	r0, #0
-	ldr	r2, .L1349+4
+	ldr	r2, .L1403+4
 	bl	FtlVendorPartRead
-	ldr	r5, .L1349+8
+	ldr	r5, .L1403+8
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	beq	.L1347
+	beq	.L1401
 	mov	r1, #512
-	ldr	r0, .L1349+4
+	ldr	r0, .L1403+4
 	bl	__memzero
 	str	r5, [r4, #2636]
-.L1347:
+.L1401:
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	bne	.L1348
+	bne	.L1402
 	ldr	r3, [r4, #2724]
 	str	r3, [r4, #2532]
 	ldr	r3, [r4, #2728]
@@ -9257,7 +9652,7 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2564]
 	ldr	r3, [r4, #2684]
 	str	r3, [r4, #2568]
-.L1348:
+.L1402:
 	ldrh	r2, [r4, #92]
 	ldr	r3, [r4, #2552]
 	ldr	r0, [r4, #2548]
@@ -9266,9 +9661,9 @@ Ftl_load_ext_data:
 	bl	__udivsi3
 	str	r0, [r4, #2556]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1350:
+.L1404:
 	.align	2
-.L1349:
+.L1403:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2636
 	.word	1179929683
@@ -9285,31 +9680,31 @@ FtlVpcTblFlush:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1363
-	mov	r6, #0
+	ldr	r4, .L1414
+	mov	r5, #0
 	mov	r1, #255
-	ldr	r10, .L1363+4
-	ldr	r3, [r4, #3280]
-	add	r5, r4, #2576
-	ldr	r7, [r4, #3284]
-	sub	r8, r5, #308
-	add	r9, r5, #684
-	str	r3, [r4, #3268]
-	ldrh	r3, [r5]
-	str	r7, [r4, #3272]
-	str	r6, [r7, #12]
+	ldr	r10, .L1414+4
+	ldr	r3, [r4, #3292]
+	add	r6, r4, #2576
+	ldr	r7, [r4, #3324]
+	sub	r8, r6, #308
+	add	r9, r6, #868
+	str	r3, [r4, #3452]
+	ldrh	r3, [r6]
+	str	r7, [r4, #3456]
+	str	r5, [r7, #12]
 	strh	r3, [r7, #2]	@ movhi
-	ldr	r3, .L1363+8
+	ldr	r3, .L1414+8
 	strh	r3, [r7]	@ movhi
 	ldr	r3, [r4, #2584]
-	str	r6, [r7, #8]
-	ldrh	r2, [r5, #-226]
+	str	r5, [r7, #8]
+	ldrh	r2, [r6, #-226]
 	str	r3, [r7, #4]
-	ldr	r3, .L1363+12
+	ldr	r3, .L1414+12
 	str	r3, [r4, #2268]
-	ldr	r3, .L1363+16
+	ldr	r3, .L1414+16
 	str	r3, [r4, #2272]
-	ldrh	r3, [r5, #6]
+	ldrh	r3, [r6, #6]
 	strh	r3, [r8, #8]	@ movhi
 	ldrh	r3, [r4, #54]
 	strb	r3, [r4, #2278]
@@ -9318,7 +9713,7 @@ FtlVpcTblFlush:
 	strh	r3, [r8, #14]	@ movhi
 	ldrb	r3, [r4, #2354]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
-	ldrh	r2, [r5, #-178]
+	ldrh	r2, [r6, #-178]
 	strh	r3, [r8, #16]	@ movhi
 	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
 	strb	r3, [r4, #2279]
@@ -9333,9 +9728,9 @@ FtlVpcTblFlush:
 	movw	r3, #2444
 	ldrh	r3, [r4, r3]
 	strh	r3, [r8, #22]	@ movhi
-	ldrh	r2, [r5, #-130]
+	ldrh	r2, [r6, #-130]
 	ldrb	r3, [r4, #2450]	@ zero_extendqisi2
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3452]
 	orr	r3, r3, r2, lsl #6
 	ldrh	r2, [r4, #110]
 	strh	r3, [r8, #24]	@ movhi
@@ -9350,17 +9745,17 @@ FtlVpcTblFlush:
 	bl	ftl_memset
 	mov	r1, r8
 	mov	r2, #48
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3452]
 	movw	r8, #65535
 	bl	ftl_memcpy
 	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3452]
 	ldr	r1, [r4, #2324]
 	lsl	r2, r2, #1
 	add	r0, r0, #48
 	bl	ftl_memcpy
 	ldrh	r0, [r4, #40]
-	ldr	r3, [r4, #3268]
+	ldr	r3, [r4, #3452]
 	ldr	r1, [r4, #24]
 	lsr	r2, r0, #3
 	add	r0, r0, #24
@@ -9369,101 +9764,230 @@ FtlVpcTblFlush:
 	bic	r0, r0, #3
 	add	r0, r3, r0
 	bl	ftl_memcpy
-	mov	r0, r6
+	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1352:
-	ldr	r3, [r4, #3280]
-	mov	r0, r9
-	ldrh	r2, [r5]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	str	r3, [r4, #3272]
-	ldrh	r3, [r5, #2]
-	orr	r3, r3, r2, lsl #10
-	str	r3, [r4, #3264]
-	mov	r3, #1
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
+.L1406:
+	ldr	r3, [r4, #3292]
+	ldrh	r1, [r6, #2]
+	ldrh	r2, [r6]
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
+	str	r3, [r4, #3456]
+	orr	r3, r1, r2, lsl #10
+	str	r3, [r4, #3448]
 	ldrh	r3, [r4, #104]
-	ldrh	r2, [r5, #2]
 	sub	r3, r3, #1
-	cmp	r2, r3
-	blt	.L1353
-	ldrh	r3, [r5]
-	ldrh	r8, [r5, #4]
-	strh	r3, [r5, #4]	@ movhi
+	cmp	r1, r3
+	blt	.L1407
 	mov	r3, #0
-	strh	r3, [r5, #2]	@ movhi
+	ldrh	r8, [r6, #4]
+	strh	r3, [r6, #2]	@ movhi
+	strh	r2, [r6, #4]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
 	ldr	r3, [r4, #2540]
-	strh	r0, [r5]	@ movhi
+	strh	r0, [r6]	@ movhi
 	add	r2, r3, #1
 	str	r3, [r4, #2584]
 	str	r2, [r4, #2540]
 	lsl	r2, r0, #10
-	str	r2, [r4, #3264]
+	str	r2, [r4, #3448]
 	str	r3, [r7, #4]
-	mov	r3, #1
 	strh	r0, [r7, #2]	@ movhi
+.L1407:
+	mov	r3, #1
+	mov	r0, r9
 	mov	r2, r3
 	mov	r1, r3
-	mov	r0, r9
 	bl	FlashProgPages
-.L1353:
-	ldrh	r3, [r5, #2]
-	ldr	r2, [r4, #3260]
+	ldrh	r3, [r6, #2]
+	ldr	r2, [r4, #3444]
 	add	r3, r3, #1
 	uxth	r3, r3
 	cmn	r2, #1
-	strh	r3, [r5, #2]	@ movhi
-	bne	.L1354
+	strh	r3, [r6, #2]	@ movhi
+	bne	.L1408
 	cmp	r3, #1
-	bne	.L1355
-	movw	r2, #1124
+	bne	.L1409
+	movw	r2, #1135
 	mov	r1, r10
-	ldr	r0, .L1363+20
-	bl	printk
-.L1355:
-	ldrh	r3, [r5, #2]
-	add	r6, r6, #1
-	uxth	r6, r6
+	ldr	r0, .L1414+20
+	bl	sftl_printk
+.L1409:
+	ldrh	r3, [r6, #2]
+	add	r5, r5, #1
+	uxth	r5, r5
 	cmp	r3, #1
 	ldrheq	r3, [r4, #104]
 	subeq	r3, r3, #1
-	strheq	r3, [r5, #2]	@ movhi
-	cmp	r6, #3
-	bls	.L1352
-	mov	r2, r6
-	ldr	r1, [r4, #3264]
-	ldr	r0, .L1363+24
-	bl	printk
-.L1358:
-	b	.L1358
-.L1354:
-	cmp	r3, #1
-	beq	.L1352
+	strheq	r3, [r6, #2]	@ movhi
+	cmp	r5, #3
+	bls	.L1406
+	mov	r2, r5
+	ldr	r1, [r4, #3448]
+	ldr	r0, .L1414+24
+	bl	sftl_printk
+.L1412:
+	b	.L1412
+.L1408:
+	cmp	r2, #256
+	cmpne	r3, #1
+	beq	.L1406
 	movw	r3, #65535
 	cmp	r8, r3
-	beq	.L1359
+	beq	.L1413
 	mov	r1, #1
 	mov	r0, r8
 	bl	FtlFreeSysBlkQueueIn
-.L1359:
+.L1413:
 	mov	r0, #0
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1364:
+.L1415:
 	.align	2
-.L1363:
+.L1414:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+454
+	.word	.LANCHOR1+486
 	.word	-3932
 	.word	1179929683
-	.word	1342177348
+	.word	1342177352
 	.word	.LC1
-	.word	.LC101
+	.word	.LC110
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	2
+	.global	FtlSysFlush
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	bl	l2p_flush
+	mov	r0, #1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+	mov	r0, #0
+	ldmfd	sp, {fp, sp, pc}
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	sftl_deinit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	sftl_deinit, %function
+sftl_deinit:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r3, .L1419
+	ldr	r3, [r3]
+	cmp	r3, #1
+	bne	.L1418
+	bl	FtlSysFlush
+.L1418:
+	mov	r0, #0
+	ldmfd	sp, {fp, sp, pc}
+.L1420:
+	.align	2
+.L1419:
+	.word	.LANCHOR2
+	.size	sftl_deinit, .-sftl_deinit
+	.align	2
+	.global	FtlDiscard
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlDiscard, %function
+FtlDiscard:
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #8
+	add	r2, r0, r1
+	ldr	r4, .L1436
+	mov	r8, r0
+	mov	r6, r1
+	ldr	r3, [r4, #140]
+	cmp	r2, r3
+	mvnhi	r0, #0
+	bhi	.L1421
+	cmp	r1, #31
+	bhi	.L1423
+.L1428:
+	mov	r0, #0
+.L1421:
+	sub	sp, fp, #32
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L1423:
+	ldrh	r5, [r4, #58]
+	mov	r1, r5
+	bl	__udivsi3
+	smulbb	r3, r0, r5
+	mov	r7, r0
+	sub	r8, r8, r3
+	uxth	r8, r8
+	cmp	r8, #0
+	beq	.L1424
+	sub	r5, r5, r8
+	add	r7, r0, #1
+	cmp	r5, r6
+	movcs	r5, r6
+	uxth	r5, r5
+	sub	r6, r6, r5
+.L1424:
+	mvn	r3, #0
+	str	r3, [fp, #-36]
+.L1425:
+	ldrh	r3, [r4, #58]
+	cmp	r6, r3
+	bcs	.L1427
+	ldr	r3, [r4, #3652]
+	cmp	r3, #32
+	bls	.L1428
+	mov	r5, #0
+	str	r5, [r4, #3652]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L1428
+.L1427:
+	mov	r2, #0
+	sub	r1, fp, #40
+	mov	r0, r7
+	bl	log2phys
+	ldr	r3, [fp, #-40]
+	cmn	r3, #1
+	beq	.L1426
+	ldr	r3, [r4, #3652]
+	mov	r2, #1
+	sub	r1, fp, #36
+	mov	r0, r7
+	add	r3, r3, #1
+	str	r3, [r4, #3652]
+	ldr	r3, [r4, #2512]
+	add	r3, r3, #1
+	str	r3, [r4, #2512]
+	bl	log2phys
+	ldr	r0, [fp, #-40]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L1426:
+	ldrh	r3, [r4, #58]
+	add	r7, r7, #1
+	sub	r6, r6, r3
+	b	.L1425
+.L1437:
+	.align	2
+.L1436:
+	.word	.LANCHOR0
+	.size	FtlDiscard, .-FtlDiscard
+	.align	2
 	.global	FtlVpcCheckAndModify
 	.syntax unified
 	.arm
@@ -9477,88 +10001,93 @@ FtlVpcCheckAndModify:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	mov	r5, #0
-	ldr	r4, .L1377
-	ldr	r1, .L1377+4
-	ldr	r0, .L1377+8
-	bl	printk
+	ldr	r4, .L1451
+	ldr	r1, .L1451+4
+	ldr	r0, .L1451+8
+	bl	sftl_printk
 	ldrh	r2, [r4, #42]
 	mov	r1, #0
-	ldr	r0, [r4, #3864]
+	ldr	r0, [r4, #3344]
 	lsl	r2, r2, #1
 	bl	ftl_memset
-.L1366:
+.L1439:
 	ldr	r3, [r4, #2504]
 	cmp	r5, r3
-	bcc	.L1368
-	ldr	r9, .L1377+12
-	mov	r6, #0
-	ldr	r10, .L1377+16
-.L1369:
+	bcc	.L1441
+	ldr	r9, .L1451+12
+	mov	r7, #0
+	ldr	r10, .L1451+16
+.L1442:
 	ldrh	r3, [r4, #40]
-	uxth	r5, r6
-	cmp	r3, r5
-	bhi	.L1373
+	uxth	r6, r7
+	cmp	r3, r6
+	bhi	.L1447
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1368:
+.L1441:
 	mov	r2, #0
 	sub	r1, fp, #44
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [fp, #-44]
 	cmn	r0, #1
-	beq	.L1367
+	beq	.L1440
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r4, #3864]
+	ldr	r2, [r4, #3344]
 	lsl	r0, r0, #1
 	ldrh	r3, [r2, r0]
 	add	r3, r3, #1
 	strh	r3, [r2, r0]	@ movhi
-.L1367:
+.L1440:
 	add	r5, r5, #1
-	b	.L1366
-.L1373:
-	uxth	r8, r6
+	b	.L1439
+.L1447:
+	uxth	r8, r7
 	ldr	r3, [r4, #2324]
 	movw	r1, #65535
-	lsl	r7, r8, #1
-	ldrh	r2, [r3, r7]
-	ldr	r3, [r4, #3864]
-	ldrh	r3, [r3, r7]
+	lsl	r5, r8, #1
+	ldrh	r2, [r3, r5]
+	ldr	r3, [r4, #3344]
+	ldrh	r3, [r3, r5]
 	cmp	r2, r1
 	cmpne	r2, r3
-	beq	.L1371
+	beq	.L1444
 	mov	r1, r8
 	mov	r0, r9
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r10]
-	cmp	r3, r5
-	beq	.L1371
-	ldr	r3, .L1377+20
+	cmp	r3, r6
+	beq	.L1444
+	ldr	r3, .L1451+20
 	ldrh	r2, [r3]
-	cmp	r2, r5
-	beq	.L1371
+	cmp	r2, r6
+	beq	.L1444
 	ldrh	r3, [r3, #-48]
-	cmp	r3, r5
-	beq	.L1371
-	ldr	r3, [r4, #3864]
-	mov	r0, r8
-	ldrh	r2, [r3, r7]
+	cmp	r3, r6
+	beq	.L1444
 	ldr	r3, [r4, #2324]
-	strh	r2, [r3, r7]	@ movhi
+	ldrh	r2, [r3, r5]
+	cmp	r2, #0
+	ldr	r2, [r4, #3344]
+	ldrh	r2, [r2, r5]
+	strh	r2, [r3, r5]	@ movhi
+	bne	.L1446
+.L1444:
+	add	r7, r7, #1
+	b	.L1442
+.L1446:
+	mov	r0, r8
 	bl	update_vpc_list
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-.L1371:
-	add	r6, r6, #1
-	b	.L1369
-.L1378:
+	b	.L1444
+.L1452:
 	.align	2
-.L1377:
+.L1451:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+469
-	.word	.LC91
-	.word	.LC102
+	.word	.LANCHOR1+501
+	.word	.LC95
+	.word	.LC111
 	.word	.LANCHOR0+2348
 	.word	.LANCHOR0+2444
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
@@ -9574,369 +10103,196 @@ allocate_new_data_superblock:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1389
+	ldr	r4, .L1463
 	mov	r6, r0
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #40]
 	cmp	r3, r5
-	bcs	.L1380
-	movw	r2, #2681
-	ldr	r1, .L1389+4
-	ldr	r0, .L1389+8
-	bl	printk
-.L1380:
+	bcs	.L1454
+	movw	r2, #2714
+	ldr	r1, .L1463+4
+	ldr	r0, .L1463+8
+	bl	sftl_printk
+.L1454:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1381
+	beq	.L1455
 	ldr	r2, [r4, #2324]
 	lsl	r3, r5, #1
 	mov	r0, r5
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1382
+	beq	.L1456
 	bl	INSERT_DATA_LIST
-.L1381:
+.L1455:
 	mov	r3, #1
 	strb	r3, [r6, #8]
-	movw	r3, #3992
+	movw	r3, #3430
 	ldrh	r0, [r4, r3]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1383
+	beq	.L1457
 	cmp	r5, r0
-	bne	.L1384
+	bne	.L1458
 	ldr	r2, [r4, #2324]
 	lsl	r3, r0, #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1385
-.L1384:
+	beq	.L1459
+.L1458:
 	bl	update_vpc_list
-.L1385:
+.L1459:
 	mvn	r2, #0
-	movw	r3, #3992
+	movw	r3, #3430
 	strh	r2, [r4, r3]	@ movhi
-.L1383:
+.L1457:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
 	mov	r0, #0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1382:
-	bl	INSERT_FREE_LIST
-	b	.L1381
-.L1390:
-	.align	2
-.L1389:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+490
-	.word	.LC1
-	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
-	.align	2
-	.global	FtlProgPages
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlProgPages, %function
-FtlProgPages:
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #8
-	mov	r7, #0
-	ldr	r6, .L1405
-	mov	r4, r3
-	ldr	r10, .L1405+4
-	mov	r2, #0
-	ldrb	r3, [r3, #9]	@ zero_extendqisi2
-	mov	r5, r0
-	mov	r9, r1
-	bl	FlashProgPages
-.L1392:
-	cmp	r7, r9
-	beq	.L1399
-	mov	r8, #0
-	b	.L1400
-.L1395:
-	ldr	r0, [r5, #4]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldrh	r3, [r4]
-	cmp	r3, r0
-	bne	.L1393
-	ldr	r1, [r6, #2324]
-	lsl	r3, r3, #1
-	ldrh	r0, [r4, #4]
-	ldrh	r2, [r1, r3]
-	sub	r2, r2, r0
-	strh	r2, [r1, r3]	@ movhi
-	ldrh	r3, [r6, #102]
-	strb	r8, [r4, #6]
-	strh	r8, [r4, #4]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-.L1393:
-	ldrh	r3, [r4, #4]
-	cmp	r3, #0
-	bne	.L1394
-	mov	r0, r4
-	bl	allocate_new_data_superblock
-.L1394:
-	ldr	r3, [r6, #2732]
-	add	r3, r3, #1
-	str	r3, [r6, #2732]
-	ldr	r0, [r5, #4]
-	ubfx	r0, r0, #10, #16
-	bl	FtlGcMarkBadPhyBlk
-	mov	r0, r4
-	bl	get_new_active_ppa
-	mov	r2, #0
-	str	r0, [r5, #4]
-	str	r0, [fp, #-44]
-	mov	r1, #1
-	ldrb	r3, [r4, #9]	@ zero_extendqisi2
-	mov	r0, r5
-	bl	FlashProgPages
-.L1400:
-	ldr	r3, [r5]
-	cmn	r3, #1
-	beq	.L1395
-	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r6, #32]
-	cmp	r2, r3
-	bcc	.L1396
-	movw	r2, #933
-	mov	r1, r10
-	ldr	r0, .L1405+8
-	bl	printk
-.L1396:
-	ldr	r3, [r5, #4]
-	sub	r1, fp, #40
-	mov	r2, #1
-	ldr	r0, [r5, #16]
-	str	r3, [r1, #-4]!
-	bl	log2phys
-	ldr	r3, [r5, #12]
-	ldr	r3, [r3, #12]
-	ubfx	r0, r3, #10, #16
-	str	r3, [fp, #-48]
-	bl	P2V_block_in_plane
-	ldr	r3, [fp, #-48]
-	mov	r8, r0
-	cmn	r3, #1
-	beq	.L1397
-	ldr	r2, [r6, #2324]
-	lsl	r3, r0, #1
-	ldrh	r2, [r2, r3]
-	cmp	r2, #0
-	bne	.L1398
-	mov	r1, r0
-	ldr	r0, .L1405+12
-	bl	printk
-.L1398:
-	mov	r0, r8
-	bl	decrement_vpc_count
-.L1397:
-	add	r7, r7, #1
-	add	r5, r5, #20
-	b	.L1392
-.L1399:
-	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r6, #32]
-	cmp	r2, r3
-	bcc	.L1391
-	mov	r2, #948
-	ldr	r1, .L1405+4
-	ldr	r0, .L1405+8
-	bl	printk
-.L1391:
-	sub	sp, fp, #40
-	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1406:
-	.align	2
-.L1405:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+519
-	.word	.LC1
-	.word	.LC103
-	.size	FtlProgPages, .-FtlProgPages
-	.align	2
-	.global	FtlCacheWriteBack
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlCacheWriteBack, %function
-FtlCacheWriteBack:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L1412
-	ldr	r0, [r4, #3988]
-	cmp	r0, #0
-	beq	.L1408
-	ldr	r3, .L1412+4
-	mov	r2, #0
-	mov	r1, #1
-	ldr	r3, [r3, #-4036]
-	bl	FtlProgPages
-	mov	r3, #0
-	str	r3, [r4, #3988]
-.L1408:
-	mov	r0, #0
-	ldmfd	sp, {r4, fp, sp, pc}
-.L1413:
-	.align	2
-.L1412:
-	.word	.LANCHOR0
-	.word	.LANCHOR3
-	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
-	.align	2
-	.global	FtlSysFlush
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlSysFlush, %function
-FtlSysFlush:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{fp, ip, lr, pc}
-	sub	fp, ip, #4
-	bl	FtlCacheWriteBack
-	bl	l2p_flush
-	mov	r0, #1
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-	mov	r0, #0
-	ldmfd	sp, {fp, sp, pc}
-	.size	FtlSysFlush, .-FtlSysFlush
-	.align	2
-	.global	sftl_deinit
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	sftl_deinit, %function
-sftl_deinit:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r3, .L1417
-	ldr	r3, [r3]
-	cmp	r3, #1
-	bne	.L1416
-	bl	FtlSysFlush
-.L1416:
-	mov	r0, #0
-	ldmfd	sp, {fp, sp, pc}
-.L1418:
-	.align	2
-.L1417:
-	.word	.LANCHOR2
-	.size	sftl_deinit, .-sftl_deinit
-	.align	2
-	.global	FtlDiscard
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlDiscard, %function
-FtlDiscard:
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	sub	sp, sp, #8
-	add	r2, r0, r1
-	ldr	r6, .L1434
-	mov	r7, r0
-	mov	r5, r1
-	ldr	r3, [r6, #140]
-	cmp	r2, r3
-	mvnhi	r0, #0
-	bhi	.L1419
-	cmp	r1, #31
-	bhi	.L1421
-.L1426:
-	mov	r0, #0
-.L1419:
-	sub	sp, fp, #32
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1421:
-	bl	FtlCacheWriteBack
-	ldrh	r4, [r6, #58]
-	mov	r0, r7
-	mov	r1, r4
-	bl	__udivsi3
-	smulbb	r3, r0, r4
-	mov	r8, r0
-	sub	r7, r7, r3
-	uxth	r7, r7
-	cmp	r7, #0
-	beq	.L1422
-	sub	r4, r4, r7
-	add	r8, r0, #1
-	cmp	r4, r5
-	movcs	r4, r5
-	uxth	r4, r4
-	sub	r5, r5, r4
-.L1422:
-	ldr	r4, .L1434+4
-	mvn	r3, #0
-	str	r3, [fp, #-36]
-.L1423:
-	ldrh	r3, [r6, #58]
-	cmp	r5, r3
-	bcs	.L1425
-	ldr	r3, .L1434+4
-	ldr	r2, [r3, #-4032]
-	cmp	r2, #32
-	bls	.L1426
-	mov	r4, #0
-	str	r4, [r3, #-4032]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	b	.L1426
-.L1425:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
+.L1456:
+	bl	INSERT_FREE_LIST
+	b	.L1455
+.L1464:
+	.align	2
+.L1463:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+522
+	.word	.LC1
+	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.align	2
+	.global	FtlProgPages
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlProgPages, %function
+FtlProgPages:
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #8
+	mov	r7, #0
+	ldr	r6, .L1479
+	mov	r4, r3
+	ldr	r10, .L1479+4
 	mov	r2, #0
-	sub	r1, fp, #40
-	mov	r0, r8
-	bl	log2phys
-	ldr	r3, [fp, #-40]
+	ldrb	r3, [r3, #9]	@ zero_extendqisi2
+	mov	r5, r0
+	mov	r9, r1
+	bl	FlashProgPages
+.L1466:
+	cmp	r7, r9
+	beq	.L1473
+	mov	r8, #0
+	b	.L1474
+.L1469:
+	ldr	r0, [r5, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r4]
+	cmp	r3, r0
+	bne	.L1467
+	ldr	r1, [r6, #2324]
+	lsl	r3, r3, #1
+	ldrh	r0, [r4, #4]
+	ldrh	r2, [r1, r3]
+	sub	r2, r2, r0
+	strh	r2, [r1, r3]	@ movhi
+	ldrh	r3, [r6, #102]
+	strb	r8, [r4, #6]
+	strh	r8, [r4, #4]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+.L1467:
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L1468
+	mov	r0, r4
+	bl	allocate_new_data_superblock
+.L1468:
+	ldr	r3, [r6, #2732]
+	add	r3, r3, #1
+	str	r3, [r6, #2732]
+	ldr	r0, [r5, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlGcMarkBadPhyBlk
+	mov	r0, r4
+	bl	get_new_active_ppa
+	mov	r2, #0
+	str	r0, [r5, #4]
+	str	r0, [fp, #-44]
+	mov	r1, #1
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	mov	r0, r5
+	bl	FlashProgPages
+.L1474:
+	ldr	r3, [r5]
 	cmn	r3, #1
-	beq	.L1424
-	ldr	r3, [r4, #-4032]
+	beq	.L1469
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	ldrh	r3, [r6, #32]
+	cmp	r2, r3
+	bcc	.L1470
+	movw	r2, #955
+	mov	r1, r10
+	ldr	r0, .L1479+8
+	bl	sftl_printk
+.L1470:
+	ldr	r3, [r5, #4]
+	sub	r1, fp, #40
 	mov	r2, #1
-	sub	r1, fp, #36
-	mov	r0, r8
-	add	r3, r3, #1
-	str	r3, [r4, #-4032]
-	ldr	r3, [r6, #2512]
-	add	r3, r3, #1
-	str	r3, [r6, #2512]
+	ldr	r0, [r5, #16]
+	str	r3, [r1, #-4]!
 	bl	log2phys
-	ldr	r0, [fp, #-40]
-	ubfx	r0, r0, #10, #16
+	ldr	r3, [r5, #12]
+	ldr	r3, [r3, #12]
+	ubfx	r0, r3, #10, #16
+	str	r3, [fp, #-48]
 	bl	P2V_block_in_plane
+	ldr	r3, [fp, #-48]
+	mov	r8, r0
+	cmn	r3, #1
+	beq	.L1471
+	ldr	r2, [r6, #2324]
+	lsl	r3, r0, #1
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	bne	.L1472
+	mov	r1, r0
+	ldr	r0, .L1479+12
+	bl	sftl_printk
+.L1472:
+	mov	r0, r8
 	bl	decrement_vpc_count
-.L1424:
-	ldrh	r3, [r6, #58]
-	add	r8, r8, #1
-	sub	r5, r5, r3
-	b	.L1423
-.L1435:
+.L1471:
+	add	r7, r7, #1
+	add	r5, r5, #20
+	b	.L1466
+.L1473:
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	ldrh	r3, [r6, #32]
+	cmp	r2, r3
+	bcc	.L1465
+	movw	r2, #970
+	ldr	r1, .L1479+4
+	ldr	r0, .L1479+8
+	bl	sftl_printk
+.L1465:
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1480:
 	.align	2
-.L1434:
+.L1479:
 	.word	.LANCHOR0
-	.word	.LANCHOR3
-	.size	FtlDiscard, .-FtlDiscard
+	.word	.LANCHOR1+551
+	.word	.LC1
+	.word	.LC112
+	.size	FtlProgPages, .-FtlProgPages
 	.align	2
 	.global	FtlGcFreeTempBlock
 	.syntax unified
@@ -9951,51 +10307,51 @@ FtlGcFreeTempBlock:
 	sub	fp, ip, #4
 	sub	sp, sp, #4
 	movw	r3, #2444
-	ldr	r4, .L1462
+	ldr	r4, .L1507
 	movw	r2, #65535
 	ldrh	r5, [r4, r3]
 	ldrh	r1, [r4, #102]
 	cmp	r5, r2
-	bne	.L1437
-.L1447:
+	bne	.L1482
+.L1492:
 	mov	r3, #0
-	str	r3, [r4, #4000]
+	str	r3, [r4, #3436]
 	movw	r3, #2444
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1460
-.L1438:
+	bne	.L1505
+.L1483:
 	mov	r0, #0
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1437:
+.L1482:
 	cmp	r0, #0
-	beq	.L1440
-	ldr	r3, .L1462+4
+	beq	.L1485
+	ldr	r3, .L1507+4
 	ldrh	r0, [r3, #4]
 	cmp	r0, r2
-	beq	.L1441
-.L1442:
+	beq	.L1486
+.L1487:
 	mov	r1, #2
-.L1440:
-	ldr	r0, .L1462+8
+.L1485:
+	ldr	r0, .L1507+8
 	bl	FtlGcScanTempBlk
 	cmn	r0, #1
 	str	r0, [fp, #-44]
-	beq	.L1443
+	beq	.L1488
 	ldr	r2, [r4, #2328]
 	lsl	r5, r5, #1
 	ldrh	r3, [r2, r5]
 	cmp	r3, #4
-	bls	.L1444
+	bls	.L1489
 	sub	r3, r3, #5
 	mov	r0, #1
 	strh	r3, [r2, r5]	@ movhi
 	bl	FtlEctTblFlush
-.L1444:
-	ldr	r3, [r4, #4000]
+.L1489:
+	ldr	r3, [r4, #3436]
 	cmp	r3, #0
-	bne	.L1445
+	bne	.L1490
 	ldr	r3, [r4, #2732]
 	ldr	r0, [fp, #-44]
 	add	r3, r3, #1
@@ -10003,48 +10359,47 @@ FtlGcFreeTempBlock:
 	str	r3, [r4, #2732]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1445:
+.L1490:
 	mov	r3, #0
-	str	r3, [r4, #4000]
-.L1456:
+	str	r3, [r4, #3436]
+.L1501:
 	mov	r0, #1
 	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1441:
+.L1486:
 	mov	r2, #0
 	strh	r2, [r3, #4]	@ movhi
 	movw	r3, #2344
 	ldrh	r3, [r4, r3]
 	cmp	r3, #17
-	bhi	.L1442
-	b	.L1440
-.L1443:
-	ldr	r3, .L1462+4
+	bhi	.L1487
+	b	.L1485
+.L1488:
+	ldr	r3, .L1507+4
 	ldrh	r2, [r3, #4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1456
-	b	.L1447
-.L1460:
-	bl	FtlCacheWriteBack
+	bne	.L1501
+	b	.L1492
+.L1505:
 	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
-	ldr	r6, .L1462+12
+	ldr	r6, .L1507+12
 	mul	r3, r3, r1
 	ldrh	r2, [r6]
 	cmp	r2, r3
-	beq	.L1448
+	beq	.L1493
 	mov	r2, #162
-	ldr	r1, .L1462+16
-	ldr	r0, .L1462+20
-	bl	printk
-.L1448:
+	ldr	r1, .L1507+16
+	ldr	r0, .L1507+20
+	bl	sftl_printk
+.L1493:
 	ldrb	r2, [r4, #2451]	@ zero_extendqisi2
 	movw	r3, #2444
 	ldrh	r0, [r4, #102]
 	mov	r5, #0
 	ldrh	r3, [r4, r3]
 	ldr	r1, [r4, #2324]
-	ldr	r10, .L1462+20
+	ldr	r10, .L1507+20
 	smulbb	r2, r2, r0
 	lsl	r3, r3, #1
 	strh	r2, [r1, r3]	@ movhi
@@ -10052,11 +10407,11 @@ FtlGcFreeTempBlock:
 	ldrh	r3, [r6]
 	add	r3, r3, r2
 	str	r3, [r4, #2528]
-.L1449:
+.L1494:
 	ldrh	r2, [r6]
 	uxth	r3, r5
 	cmp	r2, r3
-	bhi	.L1453
+	bhi	.L1498
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	movw	r3, #2444
@@ -10066,9 +10421,9 @@ FtlGcFreeTempBlock:
 	lsl	r2, r0, #1
 	ldrh	r2, [r1, r2]
 	cmp	r2, #0
-	beq	.L1454
+	beq	.L1499
 	bl	INSERT_DATA_LIST
-.L1455:
+.L1500:
 	mvn	r7, #0
 	movw	r3, #3192
 	strh	r7, [r4, r5]	@ movhi
@@ -10077,19 +10432,19 @@ FtlGcFreeTempBlock:
 	strh	r5, [r6]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
+	movw	r3, #2588
+	strh	r7, [r4, r3]	@ movhi
 	movw	r3, #2344
 	ldrh	r2, [r4, r3]
 	movw	r3, #2572
 	ldrh	r3, [r4, r3]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
-	movwgt	r3, #2588
 	movgt	r2, #20
-	strhgt	r7, [r4, r3]	@ movhi
 	movwgt	r3, #3148
 	strhgt	r2, [r4, r3]	@ movhi
-	b	.L1438
-.L1453:
+	b	.L1483
+.L1498:
 	uxth	r3, r5
 	mov	r7, #12
 	ldr	r8, [r4, #3196]
@@ -10098,12 +10453,12 @@ FtlGcFreeTempBlock:
 	add	r9, r8, r7
 	ldr	r1, [r9, #8]
 	cmp	r1, r2
-	bcc	.L1450
+	bcc	.L1495
 	mov	r2, #168
-	ldr	r1, .L1462+16
+	ldr	r1, .L1507+16
 	mov	r0, r10
-	bl	printk
-.L1450:
+	bl	sftl_printk
+.L1495:
 	mov	r2, #0
 	sub	r1, fp, #44
 	ldr	r0, [r9, #8]
@@ -10111,7 +10466,7 @@ FtlGcFreeTempBlock:
 	ldr	r2, [fp, #-44]
 	ldr	r0, [r8, r7]
 	cmp	r0, r2
-	bne	.L1451
+	bne	.L1496
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	mov	r2, #1
@@ -10120,29 +10475,29 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r9, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1461:
+.L1506:
 	bl	decrement_vpc_count
-.L1452:
+.L1497:
 	add	r5, r5, #1
-	b	.L1449
-.L1451:
+	b	.L1494
+.L1496:
 	ldr	r3, [r9, #4]
 	cmp	r2, r3
-	beq	.L1452
-	ldr	r3, .L1462+8
+	beq	.L1497
+	ldr	r3, .L1507+8
 	ldrh	r0, [r3]
-	b	.L1461
-.L1454:
+	b	.L1506
+.L1499:
 	bl	INSERT_FREE_LIST
-	b	.L1455
-.L1463:
+	b	.L1500
+.L1508:
 	.align	2
-.L1462:
+.L1507:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+2444
 	.word	.LANCHOR0+3200
-	.word	.LANCHOR1+532
+	.word	.LANCHOR1+564
 	.word	.LC1
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
@@ -10157,8 +10512,8 @@ FtlGcPageRecovery:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1466
-	ldr	r5, .L1466+4
+	ldr	r4, .L1511
+	ldr	r5, .L1511+4
 	ldrh	r1, [r4, #102]
 	mov	r0, r5
 	bl	FtlGcScanTempBlk
@@ -10166,16 +10521,16 @@ FtlGcPageRecovery:
 	ldrh	r3, [r4, #102]
 	cmp	r2, r3
 	ldmfdcc	sp, {r4, r5, fp, sp, pc}
-	add	r0, r4, #3904
+	add	r0, r5, #940
 	bl	FtlMapBlkWriteDump_data
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
 	mov	r3, #0
-	str	r3, [r4, #4000]
+	str	r3, [r4, #3436]
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1467:
+.L1512:
 	.align	2
-.L1466:
+.L1511:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10191,10 +10546,10 @@ FtlPowerLostRecovery:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1469
+	ldr	r4, .L1514
 	mov	r6, #0
 	add	r5, r4, #2336
-	str	r6, [r4, #4012]
+	str	r6, [r4, #3516]
 	add	r5, r5, #12
 	add	r4, r4, #2384
 	mov	r0, r5
@@ -10211,9 +10566,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r6
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1470:
+.L1515:
 	.align	2
-.L1469:
+.L1514:
 	.word	.LANCHOR0
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
@@ -10228,22 +10583,22 @@ Ftl_gc_temp_data_write_back:
 	mov	ip, sp
 	push	{r4, r5, r6, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1478
+	ldr	r4, .L1523
 	mov	r3, #0
 	mov	r5, #0
 	mov	r6, #20
 	mov	r2, r3
 	ldr	r1, [r4, #3164]
-	ldr	r0, [r4, #3836]
+	ldr	r0, [r4, #3284]
 	bl	FlashProgPages
-.L1472:
+.L1517:
 	ldr	r1, [r4, #3164]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1475
-	ldr	r0, [r4, #3836]
+	bhi	.L1520
+	ldr	r0, [r4, #3284]
 	bl	FtlGcBufFree
-	ldr	r3, .L1478+4
+	ldr	r3, .L1523+4
 	mov	r0, #0
 	str	r0, [r4, #3164]
 	ldrh	r3, [r3, #4]
@@ -10251,15 +10606,15 @@ Ftl_gc_temp_data_write_back:
 	ldmfdne	sp, {r4, r5, r6, fp, sp, pc}
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
-	b	.L1477
-.L1475:
+	b	.L1522
+.L1520:
 	mul	r3, r6, r3
-	ldr	r2, [r4, #3836]
+	ldr	r2, [r4, #3284]
 	add	r5, r5, #1
 	ldr	r0, [r2, r3]
 	add	r1, r2, r3
 	cmn	r0, #1
-	bne	.L1473
+	bne	.L1518
 	movw	r1, #2444
 	ldr	ip, [r4, #2324]
 	ldrh	r2, [r4, r1]
@@ -10270,26 +10625,26 @@ Ftl_gc_temp_data_write_back:
 	strh	r0, [r4, r1]	@ movhi
 	add	r2, r2, #1
 	str	r2, [r4, #2732]
-	ldr	r2, [r4, #3836]
+	ldr	r2, [r4, #3284]
 	add	r3, r2, r3
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1477:
+.L1522:
 	mov	r0, #1
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1473:
+.L1518:
 	ldr	r3, [r1, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L1472
-.L1479:
+	b	.L1517
+.L1524:
 	.align	2
-.L1478:
+.L1523:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2444
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10305,43 +10660,181 @@ Ftl_get_new_temp_ppa:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1483
+	ldr	r4, .L1528
 	movw	r3, #2444
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L1481
-	ldr	r3, .L1483+4
-	ldrh	r3, [r3, #4]
+	cmp	r2, r3
+	beq	.L1526
+	ldr	r3, .L1528+4
+	ldrh	r3, [r3, #4]
+	cmp	r3, #0
+	bne	.L1527
+.L1526:
+	mov	r0, #0
+	mov	r5, #0
+	bl	FtlGcFreeTempBlock
+	ldr	r0, .L1528+4
+	strb	r5, [r4, #2452]
+	bl	allocate_data_superblock
+	movw	r3, #3192
+	strh	r5, [r4, r3]	@ movhi
+	ldr	r3, .L1528+8
+	strh	r5, [r3]	@ movhi
+	bl	l2p_flush
+	mov	r0, r5
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L1527:
+	ldr	r0, .L1528+4
+	bl	get_new_active_ppa
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L1529:
+	.align	2
+.L1528:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+3200
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	2
+	.global	FtlSysBlkInit
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r4, .L1545
+	mov	r2, #0
+	movw	r3, #3512
+	ldrh	r0, [r4, #36]
+	strh	r2, [r4, r3]	@ movhi
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	add	r3, r4, #2576
+	ldrh	r2, [r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1531
+.L1533:
+	mvn	r8, #0
+.L1530:
+	mov	r0, r8
+	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
+.L1531:
+	bl	FtlLoadSysInfo
+	subs	r8, r0, #0
+	bne	.L1533
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	r0, #1
+	bl	FtlUpdateVaildLpn
+	ldrh	r1, [r4, #138]
+	mov	r3, r8
+	ldr	r2, [r4, #2492]
+	mov	r0, #12
+.L1534:
+	cmp	r3, r1
+	bge	.L1539
+	mla	ip, r0, r3, r2
+	ldr	ip, [ip, #4]
+	cmp	ip, #0
+	bge	.L1535
+.L1539:
+	ldr	r5, .L1545+4
+	cmp	r3, r1
+	ldrh	r2, [r5, #28]
+	add	r6, r5, #80
+	add	r2, r2, #1
+	strh	r2, [r5, #28]	@ movhi
+	bge	.L1544
+.L1536:
+	ldr	r7, .L1545+8
+	ldr	r0, .L1545+12
+	bl	FtlSuperblockPowerLostFix
+	mov	r0, r7
+	bl	FtlSuperblockPowerLostFix
+	movw	r3, #2348
+	ldr	r1, [r4, #2324]
+	ldrh	r3, [r4, r3]
+	ldrh	r0, [r6, #4]
+	lsl	r3, r3, #1
+	ldrh	r2, [r1, r3]
+	sub	r2, r2, r0
+	strh	r2, [r1, r3]	@ movhi
+	movw	r2, #2396
+	ldrh	r2, [r4, r2]
+	ldrh	r3, [r4, #102]
+	ldr	r0, [r4, #2324]
+	ldrh	ip, [r7, #4]
+	lsl	r2, r2, #1
+	strh	r3, [r6, #2]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #2354]
+	strh	r3, [r6, #4]	@ movhi
+	ldrh	r1, [r0, r2]
+	sub	r1, r1, ip
+	strh	r1, [r0, r2]	@ movhi
+	strb	r3, [r4, #2402]
+	strh	r3, [r7, #4]	@ movhi
+	ldrh	r3, [r5, #30]
+	ldrh	r2, [r4, #102]
+	add	r3, r3, #1
+	strh	r2, [r7, #2]	@ movhi
+	strh	r3, [r5, #30]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+	b	.L1540
+.L1535:
+	add	r3, r3, #1
+	b	.L1534
+.L1544:
+	movw	r3, #3512
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L1536
+.L1540:
+	bl	FtlVpcCheckAndModify
+	movw	r3, #2348
+	ldrh	r0, [r4, r3]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1530
+	ldrh	r3, [r6, #4]
 	cmp	r3, #0
-	bne	.L1482
-.L1481:
-	bl	FtlCacheWriteBack
-	mov	r0, #0
-	mov	r5, #0
-	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1483+4
-	strb	r5, [r4, #2452]
-	bl	allocate_data_superblock
-	movw	r3, #3192
-	strh	r5, [r4, r3]	@ movhi
-	ldr	r3, .L1483+8
-	strh	r5, [r3]	@ movhi
-	bl	l2p_flush
-	mov	r0, r5
-	bl	FtlEctTblFlush
+	bne	.L1530
+	ldr	r5, .L1545+8
+	ldrh	r3, [r5, #4]
+	cmp	r3, #0
+	bne	.L1530
+	bl	FtlGcRefreshBlock
+	movw	r3, #2396
+	ldrh	r0, [r4, r3]
+	bl	FtlGcRefreshBlock
 	bl	FtlVpcTblFlush
-.L1482:
-	ldr	r0, .L1483+4
-	bl	get_new_active_ppa
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1484:
+	sub	r0, r5, #48
+	bl	allocate_new_data_superblock
+	mov	r0, r5
+	bl	allocate_new_data_superblock
+	b	.L1530
+.L1546:
 	.align	2
-.L1483:
+.L1545:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+3200
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.word	.LANCHOR0+2268
+	.word	.LANCHOR0+2396
+	.word	.LANCHOR0+2348
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	rk_ftl_garbage_collect
 	.syntax unified
@@ -10355,717 +10848,805 @@ rk_ftl_garbage_collect:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	sub	sp, sp, #36
-	mov	r6, r0
-	ldr	r3, .L1598
-	ldr	r0, [r3, #3820]
-	mov	r5, r3
+	ldr	r3, .L1665
+	str	r0, [fp, #-60]
+	ldr	r0, [r3, #3264]
+	mov	r4, r3
 	cmp	r0, #0
 	movne	r0, #0
-	bne	.L1485
+	bne	.L1547
 	add	r2, r3, #2336
 	ldrh	r2, [r2]
 	cmp	r2, #47
-	bls	.L1485
-	ldr	r2, .L1598+4
+	bls	.L1547
+	ldr	r2, .L1665+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1487
-.L1490:
+	bne	.L1549
+.L1552:
 	movw	r3, #3204
 	movw	r0, #65535
-	ldrh	r1, [r5, r3]
+	ldrh	r1, [r4, r3]
 	cmp	r1, r0
-	bne	.L1488
-.L1489:
-	ldr	r3, [r5, #3152]
-	movw	r2, #2588
-	ldrh	r2, [r5, r2]
-	movw	r4, #65535
+	bne	.L1550
+.L1551:
+	bl	FtlReadRefresh
+	ldr	r3, [r4, #3152]
+	movw	r5, #65535
+	ldr	r2, [fp, #-60]
 	add	r3, r3, #1
-	add	r3, r3, r6, lsl #7
-	cmp	r2, r4
-	str	r3, [r5, #3152]
-	bne	.L1491
+	add	r3, r3, r2, lsl #7
+	movw	r2, #2588
+	ldrh	r2, [r4, r2]
+	str	r3, [r4, #3152]
+	cmp	r2, r5
+	bne	.L1553
 	movw	r1, #2444
-	ldrh	r4, [r5, r1]
-	cmp	r4, r2
-	movne	r4, r2
-	bne	.L1491
+	ldrh	r5, [r4, r1]
+	cmp	r5, r2
+	movne	r5, r2
+	bne	.L1553
 	movw	r2, #3202
-	ldrh	r7, [r5, r2]
-	cmp	r7, r4
-	bne	.L1491
-	movw	r10, #2344
-	ldrh	r2, [r5, r10]
+	ldrh	r6, [r4, r2]
+	cmp	r6, r5
+	bne	.L1553
+	movw	r9, #2344
+	ldrh	r2, [r4, r9]
 	cmp	r2, #24
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	movls	r4, r7
-	bls	.L1491
-	ldr	r3, .L1598+8
-	mov	r9, #0
-	str	r9, [r5, #3152]
-	strh	r9, [r3, #-12]	@ movhi
+	movls	r5, r6
+	bls	.L1553
+	mov	r8, #0
+	movw	r3, #3656
+	str	r8, [r4, #3152]
+	strh	r8, [r4, r3]	@ movhi
 	bl	GetSwlReplaceBlock
-	cmp	r0, r7
-	mov	r4, r0
-	movne	r7, r0
-	bne	.L1493
-	movw	r8, #3150
-	ldrh	r2, [r5, r10]
-	ldrh	r3, [r5, r8]
+	cmp	r0, r6
+	mov	r5, r0
+	movne	r6, r0
+	bne	.L1555
+	movw	r7, #3150
+	ldrh	r2, [r4, r9]
+	ldrh	r3, [r4, r7]
 	cmp	r2, r3
-	bcs	.L1494
+	bcs	.L1556
 	mov	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
-	cmp	r3, r4
-	beq	.L1496
+	cmp	r3, r5
+	beq	.L1558
 	mov	r0, r3
-	ldr	r3, [r5, #2324]
+	ldr	r3, [r4, #2324]
 	lsl	r0, r0, #1
 	ldrh	r3, [r3, r0]
 	cmp	r3, #7
-	bhi	.L1497
-	mov	r0, r9
+	bhi	.L1559
+	mov	r0, r8
 	bl	List_get_gc_head_node
-	uxth	r7, r0
+	uxth	r6, r0
 	mov	r3, #128
-	strh	r3, [r5, r8]	@ movhi
-	cmp	r7, r4
-	beq	.L1496
-.L1493:
-	movw	r0, #3148
-	ldr	r3, [r5, #2324]
-	ldrh	r0, [r5, r0]
-	lsl	r1, r7, #1
-	movw	r2, #2344
-	ldrh	r3, [r3, r1]
-	mov	r4, r7
-	ldrh	r2, [r5, r2]
-	str	r0, [sp, #4]
-	ldr	r0, [r5, #2328]
-	ldrh	r1, [r0, r1]
-	ldr	r0, .L1598+12
-	str	r1, [sp]
-	mov	r1, r7
-	bl	printk
-	b	.L1496
-.L1487:
-	movw	r1, #2444
-	ldrh	r3, [r3, r1]
-	cmp	r3, r2
-	beq	.L1490
-	mov	r0, #1
-	bl	FtlGcFreeTempBlock
-	cmp	r0, #0
-	beq	.L1490
-	mov	r0, #1
-	b	.L1485
-.L1488:
-	movw	r2, #3202
-	ldrh	ip, [r5, r2]
-	cmp	ip, r0
-	strheq	r1, [r5, r2]	@ movhi
-	mvneq	r2, #0
-	strheq	r2, [r5, r3]	@ movhi
-	b	.L1489
-.L1497:
-	mov	r3, #64
-.L1590:
-	strh	r3, [r5, r8]	@ movhi
-.L1496:
+	strh	r3, [r4, r7]	@ movhi
+	cmp	r6, r5
+	bne	.L1555
+.L1558:
 	bl	FtlGcReFreshBadBlk
-.L1491:
-	movw	r2, #65535
-	sub	r3, r4, r2
+.L1553:
+	movw	r1, #65535
+	ldr	r2, [fp, #-60]
+	sub	r3, r5, r1
 	clz	r3, r3
 	lsr	r3, r3, #5
-	cmp	r6, #0
-	movne	r6, #0
-	andeq	r6, r3, #1
-	cmp	r6, #0
-	beq	.L1499
+	cmp	r2, #0
+	movne	r2, #0
+	andeq	r2, r3, #1
+	cmp	r2, #0
+	beq	.L1561
 	movw	r3, #2344
-	ldrh	r3, [r5, r3]
+	ldrh	r3, [r4, r3]
 	cmp	r3, #24
 	movhi	r6, #1
-	bhi	.L1500
-	ldrh	r6, [r5, #102]
+	bhi	.L1562
+	ldrh	r6, [r4, #102]
 	cmp	r3, #16
 	lsrhi	r6, r6, #5
-	bhi	.L1500
+	bhi	.L1562
 	cmp	r3, #12
 	lsrhi	r6, r6, #4
-	bhi	.L1500
+	bhi	.L1562
 	cmp	r3, #8
 	lsrhi	r6, r6, #2
-.L1500:
+.L1562:
 	movw	r2, #3148
-	ldrh	r1, [r5, r2]
+	ldrh	r1, [r4, r2]
 	cmp	r1, r3
-	bcs	.L1504
+	bcs	.L1566
 	movw	r3, #2444
 	movw	r1, #65535
-	ldrh	r3, [r5, r3]
+	ldrh	r3, [r4, r3]
 	cmp	r3, r1
-	bne	.L1505
+	bne	.L1567
 	movw	r1, #3202
-	ldrh	r1, [r5, r1]
+	ldrh	r1, [r4, r1]
 	cmp	r1, r3
-	bne	.L1505
-	ldr	r3, .L1598+8
-	ldrh	r0, [r3, #-12]
+	bne	.L1567
+	movw	r3, #3656
+	ldrh	r0, [r4, r3]
 	cmp	r0, #0
-	bne	.L1506
-	ldr	r3, [r5, #2504]
-	ldr	r1, [r5, #2500]
+	bne	.L1568
+	ldr	r3, [r4, #2504]
+	ldr	r1, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1591
-.L1506:
+	bcs	.L1660
+.L1568:
 	movw	r3, #2572
 	movw	r2, #3148
-	ldrh	r3, [r5, r3]
+	ldrh	r3, [r4, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1591:
-	strh	r3, [r5, r2]	@ movhi
+.L1660:
+	strh	r3, [r4, r2]	@ movhi
 	mov	r3, #0
-	str	r3, [r5, #3160]
-.L1485:
+	str	r3, [r4, #3160]
+.L1547:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1494:
+.L1549:
+	movw	r1, #2444
+	ldrh	r3, [r3, r1]
+	cmp	r3, r2
+	beq	.L1552
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	beq	.L1552
+	mov	r0, #1
+	b	.L1547
+.L1550:
+	movw	r2, #3202
+	ldrh	ip, [r4, r2]
+	cmp	ip, r0
+	strheq	r1, [r4, r2]	@ movhi
+	mvneq	r2, #0
+	strheq	r2, [r4, r3]	@ movhi
+	b	.L1551
+.L1559:
+	mov	r3, #64
+.L1659:
+	strh	r3, [r4, r7]	@ movhi
+	b	.L1558
+.L1556:
 	mov	r3, #80
-	b	.L1590
-.L1505:
+	b	.L1659
+.L1555:
+	movw	r0, #3148
+	ldr	r3, [r4, #2324]
+	ldrh	r0, [r4, r0]
+	lsl	r1, r6, #1
+	movw	r2, #2344
+	ldrh	r3, [r3, r1]
+	mov	r5, r6
+	ldrh	r2, [r4, r2]
+	str	r0, [sp, #4]
+	ldr	r0, [r4, #2328]
+	ldrh	r1, [r0, r1]
+	ldr	r0, .L1665+8
+	str	r1, [sp]
+	mov	r1, r6
+	bl	sftl_printk
+	b	.L1558
+.L1567:
 	movw	r3, #2572
 	movw	r2, #3148
-	ldrh	r3, [r5, r3]
+	ldrh	r3, [r4, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-	strh	r3, [r5, r2]	@ movhi
-.L1504:
+	strh	r3, [r4, r2]	@ movhi
+.L1566:
 	movw	r3, #3206
-	movw	r4, #65535
-	ldrh	r3, [r5, r3]
+	movw	r5, #65535
+	ldrh	r3, [r4, r3]
 	cmp	r3, #0
 	addne	r6, r6, #32
 	uxthne	r6, r6
-.L1510:
+.L1572:
 	movw	r3, #2588
-	ldrh	r2, [r5, r3]
+	ldrh	r2, [r4, r3]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1519
-	cmp	r4, r2
-	strhne	r4, [r5, r3]	@ movhi
-	bne	.L1521
+	bne	.L1581
+	cmp	r5, r2
+	strhne	r5, [r4, r3]	@ movhi
+	bne	.L1583
 	movw	r2, #3202
-	ldrh	r3, [r5, r2]
-	cmp	r3, r4
-	beq	.L1521
-	ldr	r1, [r5, #2324]
+	ldrh	r3, [r4, r2]
+	cmp	r3, r5
+	beq	.L1583
+	ldr	r1, [r4, #2324]
 	lsl	r3, r3, #1
 	ldrh	r3, [r1, r3]
 	cmp	r3, #0
 	mvneq	r3, #0
-	strheq	r3, [r5, r2]	@ movhi
+	strheq	r3, [r4, r2]	@ movhi
 	movw	r3, #3202
-	ldrh	r1, [r5, r3]
+	ldrh	r1, [r4, r3]
 	movw	r2, #2588
-	strh	r1, [r5, r2]	@ movhi
+	strh	r1, [r4, r2]	@ movhi
 	mvn	r2, #0
-	strh	r2, [r5, r3]	@ movhi
-.L1521:
+	strh	r2, [r4, r3]	@ movhi
+.L1583:
 	movw	r7, #2588
 	mov	r3, #0
-	ldrh	r0, [r5, r7]
-	strb	r3, [r5, #2596]
+	ldrh	r0, [r4, r7]
+	strb	r3, [r4, #2596]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1519
+	beq	.L1581
 	bl	IsBlkInGcList
 	cmp	r0, #0
-	ldr	r8, .L1598+16
+	ldr	r8, .L1665+12
 	mvnne	r3, #0
-	strhne	r3, [r5, r7]	@ movhi
+	strhne	r3, [r4, r7]	@ movhi
 	movw	r7, #2588
-	ldrh	r2, [r5, r7]
+	ldrh	r2, [r4, r7]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1519
+	beq	.L1581
 	mov	r0, r8
 	bl	make_superblock
-	ldr	r2, .L1598+8
 	mov	r3, #0
+	movw	r2, #3658
+	strh	r3, [r4, r2]	@ movhi
 	strh	r3, [r8, #2]	@ movhi
-	strb	r3, [r5, #2594]
-	strh	r3, [r2, #-10]	@ movhi
-	ldrh	r3, [r5, r7]
-	ldr	r1, [r5, #2324]
+	strb	r3, [r4, #2594]
+	ldrh	r3, [r4, r7]
+	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
-	ldrh	r3, [r1, r3]
-	strh	r3, [r2, #-8]	@ movhi
-.L1519:
+	ldrh	r2, [r2, r3]
+	movw	r3, #3660
+	strh	r2, [r4, r3]	@ movhi
+.L1581:
 	movw	r3, #2588
 	movw	r2, #2348
-	ldrh	r3, [r5, r3]
-	ldrh	r2, [r5, r2]
+	ldrh	r3, [r4, r3]
+	ldrh	r2, [r4, r2]
 	cmp	r2, r3
-	beq	.L1525
+	beq	.L1587
 	movw	r2, #2396
-	ldrh	r2, [r5, r2]
+	ldrh	r2, [r4, r2]
 	cmp	r2, r3
-	ldrne	r7, .L1598
-	movne	r5, r7
-	bne	.L1526
-.L1525:
+	bne	.L1588
+.L1587:
 	mvn	r2, #0
 	movw	r3, #2588
-.L1596:
-	strh	r2, [r5, r3]	@ movhi
-	ldr	r3, .L1598+8
-.L1597:
-	ldrh	r0, [r3, #-12]
-	b	.L1485
-.L1499:
-	movw	r1, #2444
-	ldrh	r7, [r5, r1]
-	cmp	r7, r2
-	bne	.L1568
-	movw	r2, #3202
-	ldrh	r2, [r5, r2]
-	cmp	r2, r7
+	strh	r2, [r4, r3]	@ movhi
+.L1588:
+	ldr	r4, .L1665
+	mov	r9, r4
+.L1617:
+	ldr	r7, .L1665+12
+	movw	r3, #65535
+	ldrh	r2, [r7]
+	cmp	r2, r3
+	bne	.L1589
+	add	r10, r7, #568
+	mov	r3, #0
+	str	r3, [r4, #3160]
+.L1590:
+	ldrh	r8, [r10]
+	mov	r0, r8
+	bl	List_get_gc_head_node
+	ldr	r3, .L1665+12
+	uxth	r2, r0
+	strh	r2, [r3]	@ movhi
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1591
+	mov	r3, #0
+	mov	r0, #8
+	strh	r3, [r10]	@ movhi
+	b	.L1547
+.L1561:
+	movw	r0, #2444
+	ldrh	r6, [r4, r0]
+	cmp	r6, r1
+	bne	.L1631
+	movw	r1, #3202
+	ldrh	r1, [r4, r1]
+	cmp	r1, r6
 	movne	r3, #0
 	andeq	r3, r3, #1
 	cmp	r3, #0
-	beq	.L1568
+	beq	.L1631
 	movw	r3, #2588
-	ldrh	r3, [r5, r3]
-	cmp	r3, r7
-	beq	.L1511
-.L1516:
-	mov	r4, r7
-.L1568:
+	ldrh	r3, [r4, r3]
+	cmp	r3, r6
+	beq	.L1573
+.L1578:
+	mov	r5, r6
+.L1631:
 	mov	r6, #1
-	b	.L1510
-.L1511:
+	b	.L1572
+.L1573:
 	movw	r3, #2344
+	str	r2, [r4, #3160]
 	movw	r2, #3148
-	ldrh	r8, [r5, r3]
-	ldrh	r3, [r5, r2]
-	str	r6, [r5, #3160]
-	ldr	r4, .L1598+8
-	cmp	r3, r8
-	bcs	.L1512
-	ldrh	r3, [r4, #-12]
+	ldrh	r1, [r4, r3]
+	ldrh	r3, [r4, r2]
+	cmp	r1, r3
+	bls	.L1574
+	movw	r3, #3656
+	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L1513
-	ldr	r3, [r5, #2504]
-	ldr	r1, [r5, #2500]
+	bne	.L1575
+	ldr	r3, [r4, #2504]
+	ldr	r1, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	movcs	r3, #18
-	bcs	.L1592
-.L1513:
+	bcs	.L1661
+.L1575:
 	movw	r3, #2572
 	movw	r2, #3148
-	ldrh	r3, [r5, r3]
+	ldrh	r3, [r4, r3]
 	add	r3, r3, r3, lsl #1
 	asr	r3, r3, #2
-.L1592:
-	strh	r3, [r5, r2]	@ movhi
-.L1595:
+.L1661:
+	strh	r3, [r4, r2]	@ movhi
 	bl	FtlReadRefresh
-	ldrh	r0, [r4, #-12]
-	b	.L1485
-.L1512:
-	ldrh	r0, [r4, #-12]
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	ldr	r3, [r4, #2324]
+	lsl	r0, r0, #1
+	ldrh	r3, [r3, r0]
+	cmp	r3, #4
+	bls	.L1574
+.L1664:
+	movw	r3, #3656
+	ldrh	r0, [r4, r3]
+	b	.L1547
+.L1574:
+	movw	r5, #3656
+	ldrh	r0, [r4, r5]
 	cmp	r0, #0
-	bne	.L1516
+	bne	.L1578
 	movw	r3, #2572
-	ldrh	r6, [r5, r3]
-	add	r3, r6, r6, lsl #1
+	movw	r2, #3148
+	ldrh	r7, [r4, r3]
+	add	r3, r7, r7, lsl #1
 	asr	r3, r3, #2
-	strh	r3, [r5, r2]	@ movhi
+	strh	r3, [r4, r2]	@ movhi
 	bl	List_get_gc_head_node
 	uxth	r0, r0
-	ldr	r3, [r5, #2324]
-	ldrh	r1, [r5, #104]
+	ldr	r3, [r4, #2324]
+	ldrh	r1, [r4, #104]
 	lsl	r0, r0, #1
 	ldrh	r2, [r3, r0]
-	ldrh	r3, [r5, #32]
+	ldrh	r3, [r4, #32]
 	mul	r3, r3, r1
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1517
-	sub	r6, r6, #1
-	cmp	r8, r6
-	bge	.L1595
-.L1517:
+	ble	.L1579
+	movw	r3, #2344
+	sub	r7, r7, #1
+	ldrh	r3, [r4, r3]
+	cmp	r3, r7
+	blt	.L1579
+	bl	FtlReadRefresh
+	ldrh	r0, [r4, r5]
+	b	.L1547
+.L1579:
 	cmp	r2, #0
-	bne	.L1516
+	bne	.L1578
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	movw	r3, #2344
-	ldrh	r0, [r5, r3]
+	ldrh	r0, [r4, r3]
 	add	r0, r0, #1
-	b	.L1485
-.L1529:
-	uxth	r2, r0
-	str	r1, [fp, #-52]
-	add	r10, r10, #1
-	mov	r0, r2
-	str	r2, [fp, #-48]
+	b	.L1547
+.L1591:
+	uxth	r3, r0
+	str	r2, [fp, #-52]
+	add	r8, r8, #1
+	mov	r0, r3
+	str	r3, [fp, #-48]
 	bl	IsBlkInGcList
 	cmp	r0, #0
-	ldr	r2, [fp, #-48]
-	ldr	r1, [fp, #-52]
-	strhne	r10, [r9]	@ movhi
-	bne	.L1528
-	ldrh	lr, [r5, #32]
-	uxth	r10, r10
-	ldrh	r3, [r5, #102]
-	lsl	r2, r2, #1
-	ldr	r0, [r5, #2324]
-	strh	r10, [r9]	@ movhi
+	ldr	r3, [fp, #-48]
+	ldr	r2, [fp, #-52]
+	strhne	r8, [r10]	@ movhi
+	bne	.L1590
+	lsl	r0, r3, #1
+	ldrh	lr, [r9, #32]
+	ldrh	r3, [r9, #102]
+	uxth	r8, r8
+	ldr	r1, [r9, #2324]
+	strh	r8, [r10]	@ movhi
 	mul	r3, lr, r3
-	ldrh	ip, [r0, r2]
+	ldrh	ip, [r1, r0]
 	add	lr, r3, r3, lsr #31
 	cmp	ip, lr, asr #1
-	bgt	.L1532
+	bgt	.L1594
 	cmp	ip, #8
-	cmphi	r10, #48
-	bls	.L1533
-	ldr	ip, .L1598+20
+	cmphi	r8, #48
+	bls	.L1595
+	ldr	ip, .L1665+16
 	ldrh	ip, [ip]
 	cmp	ip, #35
-	bhi	.L1533
-.L1532:
-	ldr	lr, .L1598+24
+	bhi	.L1595
+.L1594:
+	ldr	lr, .L1665+20
 	mov	ip, #0
 	strh	ip, [lr]	@ movhi
-.L1533:
-	ldrh	ip, [r0, r2]
+.L1595:
+	ldrh	r1, [r1, r0]
 	movw	r0, #65535
-	cmp	r3, ip
-	cmple	r4, r0
-	moveq	r3, #1
-	movne	r3, #0
-	bne	.L1534
+	cmp	r3, r1
+	cmple	r5, r0
+	bne	.L1596
+	ldr	r3, .L1665+20
+	ldrh	r3, [r3]
+	cmp	r3, #3
+	bhi	.L1596
 	mvn	r2, #0
 	movw	r3, #2588
-	strh	r2, [r5, r3]	@ movhi
-	mov	r2, #0
-	movw	r3, #3156
-	b	.L1596
-.L1534:
-	cmp	ip, #0
-	bne	.L1535
+	strh	r2, [r9, r3]	@ movhi
+	mov	r3, #0
+	ldr	r2, .L1665+20
+	strh	r3, [r2]	@ movhi
+	movw	r3, #3656
+	ldrh	r0, [r9, r3]
+	b	.L1547
+.L1596:
+	cmp	r1, #0
+	bne	.L1597
+	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldr	r3, .L1598+24
-	ldr	r2, .L1598+24
+	ldr	r3, .L1665+20
+	ldr	r2, .L1665+20
 	ldrh	r3, [r3]
 	add	r3, r3, #1
 	strh	r3, [r2]	@ movhi
-	b	.L1528
-.L1535:
-	strb	r3, [r5, #2596]
-	ldr	r3, .L1598+28
+	b	.L1590
+.L1597:
+	mov	r3, #0
+	strb	r3, [r9, #2596]
+	ldr	r3, .L1665+24
 	ldrh	r3, [r3]
-	cmp	r3, r1
-	bne	.L1536
-	movw	r2, #658
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
-	bl	printk
-.L1536:
-	ldr	r3, .L1598+40
-	ldrh	r2, [r8]
+	cmp	r3, r2
+	bne	.L1598
+	mov	r2, #700
+	ldr	r1, .L1665+28
+	ldr	r0, .L1665+32
+	bl	sftl_printk
+.L1598:
+	ldr	r3, .L1665+36
+	ldrh	r2, [r7]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L1537
-	movw	r2, #659
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
-	bl	printk
-.L1537:
-	ldr	r3, .L1598+44
-	ldrh	r2, [r8]
+	bne	.L1599
+	movw	r2, #701
+	ldr	r1, .L1665+28
+	ldr	r0, .L1665+32
+	bl	sftl_printk
+.L1599:
+	ldr	r3, .L1665+40
+	ldrh	r2, [r7]
 	ldrh	r3, [r3]
 	cmp	r2, r3
-	bne	.L1538
-	mov	r2, #660
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
-	bl	printk
-.L1538:
-	ldr	r0, .L1598+16
+	bne	.L1600
+	movw	r2, #702
+	ldr	r1, .L1665+28
+	ldr	r0, .L1665+32
+	bl	sftl_printk
+.L1600:
+	ldr	r0, .L1665+12
 	bl	make_superblock
-	ldrh	r2, [r8]
+	ldrh	r2, [r7]
 	mov	r3, #0
-	ldr	r1, .L1598+48
-	ldr	r0, [r5, #2324]
+	ldr	r1, .L1665+44
+	ldr	r0, [r9, #2324]
 	lsl	r2, r2, #1
 	strh	r3, [r1]	@ movhi
 	ldrh	r2, [r0, r2]
-	strh	r3, [r8, #2]	@ movhi
-	strb	r3, [r5, #2594]
+	strh	r3, [r7, #2]	@ movhi
+	strb	r3, [r9, #2594]
 	strh	r2, [r1, #2]	@ movhi
-.L1527:
-	bl	FtlReadRefresh
+.L1589:
 	mov	r3, #1
-	str	r3, [r5, #3820]
-	ldrh	r3, [r5, #102]
-	str	r3, [fp, #-56]
-	ldrh	r3, [r8, #2]
-	ldr	r1, [fp, #-56]
+	str	r3, [r9, #3264]
+	ldrh	r3, [r9, #102]
+	str	r3, [fp, #-48]
+	ldr	r3, [fp, #-60]
+	cmp	r3, #0
+	beq	.L1601
+	ldr	r2, [fp, #-48]
+	ldrh	r3, [r9, #32]
+	ldr	r1, [r9, #2324]
+	mul	r3, r2, r3
+	ldrh	r2, [r7]
+	lsl	r2, r2, #1
+	ldrh	r2, [r1, r2]
+	sub	r3, r3, r2
+	add	r2, r3, #3
+	cmp	r3, #0
+	movlt	r3, r2
+	add	r6, r6, r3, asr #2
+	uxth	r6, r6
+.L1601:
+	ldrh	r3, [r7, #2]
+	ldr	r1, [fp, #-48]
 	add	r2, r3, r6
 	cmp	r2, r1
 	movgt	r2, r1
 	subgt	r6, r2, r3
 	mov	r3, #0
 	uxthgt	r6, r6
-.L1594:
-	str	r3, [fp, #-52]
-	ldrh	r3, [fp, #-52]
-	ldr	r8, .L1598+16
+.L1663:
+	str	r3, [fp, #-56]
+	ldrh	r3, [fp, #-56]
+	ldr	r7, .L1665+12
 	cmp	r6, r3
-	bls	.L1548
-	ldrh	r9, [r8, #2]
+	bls	.L1611
+	ldrh	ip, [r7, #2]
 	mov	r2, #0
-	ldr	r3, [fp, #-52]
-	movw	r10, #65535
-	ldrh	ip, [r7, #32]
-	ldr	r0, [r7, #3180]
-	add	r9, r9, r3
-	add	r3, r8, #14
-	mov	r8, r2
-	b	.L1549
-.L1542:
+	ldr	r3, [fp, #-56]
+	mov	lr, #20
+	ldrh	r8, [r4, #32]
+	ldr	r0, [r4, #3180]
+	add	ip, ip, r3
+	add	r3, r7, #14
+	mov	r7, r2
+	b	.L1612
+.L1605:
 	ldrh	r1, [r3, #2]!
+	movw	r10, #65535
 	add	r2, r2, #1
 	cmp	r1, r10
-	movne	lr, #20
-	orrne	r1, r9, r1, lsl #10
-	mlane	lr, lr, r8, r0
-	addne	r8, r8, #1
-	uxthne	r8, r8
-	strne	r1, [lr, #4]
-.L1549:
+	mlane	r10, lr, r7, r0
+	addne	r7, r7, #1
+	orrne	r1, ip, r1, lsl #10
+	uxthne	r7, r7
+	strne	r1, [r10, #4]
+.L1612:
 	uxth	r1, r2
-	cmp	ip, r1
-	bhi	.L1542
-	ldrb	r2, [r7, #2596]	@ zero_extendqisi2
-	mov	r1, r8
+	cmp	r8, r1
+	bhi	.L1605
+	ldrb	r2, [r4, #2596]	@ zero_extendqisi2
+	mov	r1, r7
 	bl	FlashReadPages
 	mov	r3, #0
-.L1593:
-	str	r3, [fp, #-48]
-	ldrh	r3, [fp, #-48]
-	cmp	r3, r8
-	ldrcs	r3, [fp, #-52]
-	addcs	r3, r3, #1
-	bcs	.L1594
-.L1547:
-	ldr	r3, [fp, #-48]
-	mov	r9, #20
-	mul	r9, r9, r3
-	ldr	r3, [r7, #3180]
-	add	r2, r3, r9
-	ldr	r3, [r3, r9]
+.L1662:
+	str	r3, [fp, #-52]
+	ldrh	r3, [fp, #-52]
+	cmp	r7, r3
+	ldrls	r3, [fp, #-56]
+	addls	r3, r3, #1
+	bls	.L1663
+.L1610:
+	ldr	r3, [fp, #-52]
+	mov	r8, #20
+	mul	r8, r8, r3
+	ldr	r3, [r4, #3180]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	beq	.L1544
+	beq	.L1607
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1544
+	bne	.L1607
 	ldr	r3, [r10, #8]
 	cmn	r3, #1
-	bne	.L1545
-	mov	r2, #696
-	ldr	r1, .L1598+32
-	ldr	r0, .L1598+36
-	str	r3, [fp, #-60]
-	bl	printk
-	ldr	r3, [fp, #-60]
-.L1545:
+	bne	.L1608
+	mov	r2, #736
+	ldr	r1, .L1665+28
+	ldr	r0, .L1665+32
+	str	r3, [fp, #-64]
+	bl	sftl_printk
+	ldr	r3, [fp, #-64]
+.L1608:
 	mov	r2, #0
-	mov	r0, r3
 	sub	r1, fp, #44
+	mov	r0, r3
 	bl	log2phys
-	ldr	r0, [r5, #3180]
-	ldr	r3, [fp, #-44]
-	add	r0, r0, r9
-	ldr	r2, [r0, #4]
-	cmp	r2, r3
-	bne	.L1544
-	ldr	r3, .L1598+48
-	mov	r1, #20
-	ldr	lr, [r5, #3164]
-	ldr	r0, [r0, #16]
-	ldrh	r2, [r3]
-	str	r1, [fp, #-64]
+	ldr	r3, [r4, #3180]
+	ldr	r2, [fp, #-44]
+	add	r3, r3, r8
+	ldr	r1, [r3, #4]
+	cmp	r1, r2
+	bne	.L1607
+	ldr	r2, .L1665+44
+	ldr	r1, .L1665+44
+	ldr	r0, [r4, #3164]
+	ldrh	r2, [r2]
+	ldr	r3, [r3, #16]
 	add	r2, r2, #1
-	strh	r2, [r3], #10	@ movhi
-	ldr	r2, [r5, #3836]
-	str	r3, [fp, #-68]
-	mla	r2, r1, lr, r2
-	str	r0, [r2, #16]
-	str	r2, [fp, #-60]
+	strh	r2, [r1]	@ movhi
+	mov	r1, #20
+	ldr	r2, [r4, #3284]
+	str	r1, [fp, #-68]
+	mla	r2, r1, r0, r2
+	str	r3, [r2, #16]
+	str	r2, [fp, #-64]
 	bl	Ftl_get_new_temp_ppa
-	ldr	r2, [fp, #-60]
-	ldr	r1, [fp, #-64]
+	ldr	r2, [fp, #-64]
+	ldr	r3, [r4, #3284]
+	ldr	r1, [fp, #-68]
 	str	r0, [r2, #4]
-	ldr	r0, [r5, #3164]
-	ldr	r2, [r5, #3836]
-	mla	r1, r1, r0, r2
-	ldr	r2, [r5, #3180]
-	add	r2, r2, r9
-	ldr	r0, [r2, #8]
-	str	r0, [r1, #8]
-	ldr	r2, [r2, #12]
-	str	r2, [r1, #12]
-	ldr	r2, [fp, #-44]
-	str	r2, [r10, #12]
-	ldr	r2, .L1598+44
-	ldrh	r1, [r2]
-	str	r2, [fp, #-60]
-	strh	r1, [r10, #2]	@ movhi
-	ldr	r1, [r5, #2544]
-	ldr	r0, [r5, #3180]
-	str	r1, [r10, #4]
-	ldr	r1, [r5, #3164]
-	add	r0, r0, r9
-	add	r1, r1, #1
-	str	r1, [r5, #3164]
+	ldr	r2, [r4, #3164]
+	mla	r3, r1, r2, r3
+	ldr	r2, [r4, #3180]
+	add	r2, r2, r8
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #8]
 	mov	r1, #1
+	ldr	r2, [r2, #12]
+	str	r2, [r3, #12]
+	ldr	r3, [fp, #-44]
+	str	r3, [r10, #12]
+	ldr	r3, .L1665+40
+	ldrh	r2, [r3]
+	str	r3, [fp, #-64]
+	strh	r2, [r10, #2]	@ movhi
+	ldr	r2, [r4, #2544]
+	ldr	r0, [r4, #3180]
+	str	r2, [r10, #4]
+	ldr	r2, [r4, #3164]
+	add	r0, r0, r8
+	add	r2, r2, #1
+	str	r2, [r4, #3164]
 	bl	FtlGcBufAlloc
-	ldrb	r0, [r5, #2451]	@ zero_extendqisi2
-	ldr	r1, [r5, #3164]
-	ldr	r3, [fp, #-68]
-	cmp	r0, r1
-	beq	.L1546
-	ldr	r2, [fp, #-60]
-	ldrh	r2, [r2, #4]
-	cmp	r2, #0
-	bne	.L1544
-.L1546:
-	str	r3, [fp, #-60]
+	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
+	ldr	r2, [r4, #3164]
+	cmp	r1, r2
+	beq	.L1609
+	ldr	r3, [fp, #-64]
+	ldrh	r3, [r3, #4]
+	cmp	r3, #0
+	bne	.L1607
+.L1609:
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
-	ldr	r3, [fp, #-60]
-	ldrne	r2, .L1598
-	movne	r1, #0
-	strne	r1, [r2, #3820]
-	bne	.L1597
-.L1544:
-	ldr	r3, [fp, #-48]
+	beq	.L1607
+	ldr	r3, .L1665
+	mov	r2, #0
+	str	r2, [r3, #3264]
+	movw	r2, #3656
+	ldrh	r0, [r3, r2]
+	b	.L1547
+.L1607:
+	ldr	r3, [fp, #-52]
 	add	r3, r3, #1
-	b	.L1593
-.L1548:
-	ldrh	r3, [r8, #2]
+	b	.L1662
+.L1611:
+	ldrh	r3, [r7, #2]
 	add	r6, r6, r3
-	ldr	r3, [fp, #-56]
+	ldr	r3, [fp, #-48]
 	uxth	r6, r6
 	cmp	r3, r6
-	strh	r6, [r8, #2]	@ movhi
-	ldr	r6, .L1598+8
-	bls	.L1550
-	ldrh	r2, [r6, #-10]
-	ldrh	r3, [r6, #-8]
-	cmp	r2, r3
-	bne	.L1551
-.L1550:
-	ldr	r3, [r7, #3164]
+	strh	r6, [r7, #2]	@ movhi
+	bhi	.L1613
+	ldr	r3, [r4, #3164]
 	cmp	r3, #0
-	beq	.L1552
+	beq	.L1614
 	bl	Ftl_gc_temp_data_write_back
 	cmp	r0, #0
 	movne	r3, #0
-	ldrhne	r0, [r6, #-12]
-	strne	r3, [r7, #3820]
-	bne	.L1485
-.L1552:
-	ldrh	r1, [r6, #-10]
+	strne	r3, [r4, #3264]
+	bne	.L1664
+.L1614:
+	ldr	r3, .L1665+44
+	ldrh	r1, [r3]
 	cmp	r1, #0
-	bne	.L1553
-	ldrh	r3, [r8]
-	ldr	r2, [r7, #2324]
+	bne	.L1615
+	ldrh	r3, [r7]
+	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
 	ldrh	r0, [r2, r3]
 	cmp	r0, #0
-	beq	.L1553
+	beq	.L1615
 	strh	r1, [r2, r3]	@ movhi
-	ldrh	r0, [r8]
+	ldrh	r0, [r7]
 	bl	update_vpc_list
-	bl	FtlCacheWriteBack
 	bl	l2p_flush
-	bl	FtlVpcTblFlush
-.L1553:
-	mvn	r3, #0
-	strh	r3, [r8]	@ movhi
-.L1551:
-	ldr	r3, .L1598+52
-	ldrh	r3, [r3]
-	cmp	r3, #2
-	bhi	.L1554
-	ldrh	r6, [r7, #102]
-.L1526:
-	ldr	r8, .L1598+16
-	movw	r3, #65535
-	ldrh	r2, [r8]
-	cmp	r2, r3
-	bne	.L1527
-	add	r9, r8, #568
-	mov	r3, #0
-	str	r3, [r7, #3160]
-.L1528:
-	ldrh	r10, [r9]
-	mov	r0, r10
-	bl	List_get_gc_head_node
-	ldr	r3, .L1598+16
-	uxth	r1, r0
-	strh	r1, [r3]	@ movhi
-	movw	r3, #65535
-	cmp	r1, r3
-	bne	.L1529
+	bl	FtlVpcTblFlush
+.L1615:
+	mvn	r3, #0
+	strh	r3, [r7]	@ movhi
+.L1613:
 	mov	r3, #0
-	mov	r0, #8
-	strh	r3, [r9]	@ movhi
-	b	.L1485
-.L1554:
-	ldrh	r0, [r6, #-12]
-	mov	r2, #0
-	str	r2, [r7, #3820]
-	cmp	r0, r2
+	str	r3, [r4, #3264]
+	ldr	r3, .L1665+48
+	ldrh	r3, [r3]
+	cmp	r3, #2
+	ldrhls	r6, [r4, #102]
+	bls	.L1617
+.L1616:
+	movw	r2, #3656
+	ldrh	r0, [r4, r2]
+	cmp	r0, #0
 	addeq	r0, r3, #1
-	b	.L1485
-.L1599:
+	b	.L1547
+.L1666:
 	.align	2
-.L1598:
+.L1665:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR3-4016
-	.word	.LC104
+	.word	.LC113
 	.word	.LANCHOR0+2588
 	.word	.LANCHOR0+3192
 	.word	.LANCHOR0+3156
 	.word	.LANCHOR0+2348
-	.word	.LANCHOR1+551
+	.word	.LANCHOR1+583
 	.word	.LC1
 	.word	.LANCHOR0+2396
 	.word	.LANCHOR0+2444
-	.word	.LANCHOR3-4026
+	.word	.LANCHOR0+3658
 	.word	.LANCHOR0+2344
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
+	.global	sftl_init
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	sftl_init, %function
+sftl_init:
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	ldr	r4, .L1673
+	mvn	r3, #0
+	ldr	r5, .L1673+4
+	ldr	r1, .L1673+8
+	ldr	r0, .L1673+12
+	str	r3, [r5]
+	bl	sftl_printk
+	mov	r0, r4
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	r0, [r4, #36]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	bne	.L1671
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	bne	.L1671
+	mov	r3, #1
+	str	r3, [r5]
+	movw	r3, #2344
+	ldrh	r3, [r4, r3]
+	cmp	r3, #15
+	bhi	.L1671
+	movw	r4, #8129
+.L1670:
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L1670
+.L1671:
+	mov	r0, #0
+	ldmfd	sp, {r4, r5, fp, sp, pc}
+.L1674:
+	.align	2
+.L1673:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC70
+	.word	.LC71
+	.size	sftl_init, .-sftl_init
+	.align	2
 	.global	sftl_gc
 	.syntax unified
 	.arm
@@ -11097,36 +11678,35 @@ FtlRead:
 	sub	sp, sp, #52
 	uxtb	r0, r0
 	mov	r6, r1
-	str	r2, [fp, #-68]
+	str	r2, [fp, #-52]
 	cmp	r0, #16
 	mov	r9, r3
-	bne	.L1602
+	bne	.L1677
 	mov	r2, r3
-	ldr	r1, [fp, #-68]
+	ldr	r1, [fp, #-52]
 	add	r0, r6, #256
 	bl	FtlVendorPartRead
 	str	r0, [fp, #-48]
-.L1601:
+.L1676:
 	ldr	r0, [fp, #-48]
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1602:
-	ldr	r3, [fp, #-68]
-	ldr	r10, .L1635
+.L1677:
+	ldr	r3, [fp, #-52]
+	ldr	r10, .L1711
 	add	r3, r1, r3
-	str	r3, [fp, #-56]
-	ldr	r2, [fp, #-56]
+	str	r3, [fp, #-60]
+	ldr	r2, [fp, #-60]
 	ldr	r3, [r10, #140]
 	cmp	r2, r3
 	mvnhi	r3, #0
 	strhi	r3, [fp, #-48]
-	bhi	.L1601
-	ldr	r3, .L1635+4
+	bhi	.L1676
+	ldr	r3, .L1711+4
 	ldr	r7, [r3]
 	cmn	r7, #1
 	streq	r7, [fp, #-48]
-	beq	.L1601
-	bl	FtlCacheWriteBack
+	beq	.L1676
 	ldrh	r4, [r10, #58]
 	mov	r0, r6
 	mov	r8, #0
@@ -11134,43 +11714,47 @@ FtlRead:
 	mov	r5, r8
 	mov	r1, r4
 	bl	__udivsi3
-	ldr	r3, [fp, #-56]
+	ldr	r3, [fp, #-60]
 	mov	r1, r4
-	str	r0, [fp, #-60]
+	str	r0, [fp, #-64]
 	sub	r0, r3, #1
 	bl	__udivsi3
-	ldr	r3, [fp, #-60]
-	ldr	r4, [fp, #-60]
-	str	r0, [fp, #-64]
+	ldr	r3, [fp, #-64]
+	ldr	r2, [fp, #-52]
+	ldr	r4, [fp, #-64]
 	rsb	r3, r3, #1
-	str	r8, [fp, #-76]
+	str	r0, [fp, #-68]
 	add	r3, r3, r0
+	str	r8, [fp, #-76]
+	str	r3, [fp, #-56]
+	ldr	r3, [r10, #2536]
 	str	r8, [fp, #-72]
-	str	r3, [fp, #-52]
-	ldr	r2, [fp, #-52]
-	ldr	r3, [r10, #2508]
 	str	r8, [fp, #-48]
 	add	r3, r3, r2
+	ldr	r2, [fp, #-56]
+	str	r3, [r10, #2536]
+	ldr	r3, [r10, #2508]
+	add	r3, r3, r2
 	str	r3, [r10, #2508]
-.L1604:
-	ldr	r3, [fp, #-52]
+.L1679:
+	ldr	r3, [fp, #-56]
 	cmp	r3, #0
-	bne	.L1620
-	ldr	r3, .L1635
+	bne	.L1696
+	ldr	r3, .L1711
 	movw	r2, #3206
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	bne	.L1621
+	bne	.L1697
 	movw	r2, #2344
 	ldrh	r3, [r3, r2]
 	cmp	r3, #31
-	bhi	.L1601
-.L1621:
+	bhi	.L1676
+.L1697:
 	mov	r1, #1
 	mov	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1601
-.L1620:
+	b	.L1676
+.L1696:
 	sub	r1, fp, #44
 	mov	r2, #0
 	mov	r0, r4
@@ -11178,22 +11762,22 @@ FtlRead:
 	ldr	r1, [fp, #-44]
 	cmn	r1, #1
 	moveq	r10, #0
-	beq	.L1606
-	ldr	r2, [r7, #3832]
+	beq	.L1681
+	ldr	r2, [r7, #3280]
 	mov	r0, #20
-	ldr	r3, [fp, #-60]
+	ldr	r3, [fp, #-64]
 	ldrh	r10, [r7, #58]
 	mla	r2, r0, r5, r2
 	cmp	r4, r3
 	str	r1, [r2, #4]
-	bne	.L1610
-	ldr	r1, [r7, #3816]
+	bne	.L1685
+	ldr	r1, [r7, #3304]
 	mov	r0, r6
 	str	r2, [fp, #-80]
 	str	r1, [r2, #8]
 	mov	r1, r10
 	bl	__umodsi3
-	ldr	r3, [fp, #-68]
+	ldr	r3, [fp, #-52]
 	sub	r1, r10, r0
 	ldr	r2, [fp, #-80]
 	str	r0, [fp, #-72]
@@ -11202,51 +11786,51 @@ FtlRead:
 	cmp	r3, r10
 	str	r3, [fp, #-76]
 	streq	r9, [r2, #8]
-.L1611:
+.L1686:
 	ldrh	r1, [r7, #112]
-	ldr	r0, [r7, #3812]
+	ldr	r0, [r7, #3328]
 	str	r4, [r2, #16]
 	mul	r1, r5, r1
 	add	r5, r5, #1
 	bic	r1, r1, #3
 	add	r1, r0, r1
 	str	r1, [r2, #12]
-	b	.L1609
-.L1608:
+	b	.L1684
+.L1683:
 	mla	r0, r0, r4, r10
-	ldr	r2, [fp, #-56]
+	ldr	r2, [fp, #-60]
 	cmp	r2, r0
 	movhi	r2, #1
 	movls	r2, #0
 	cmp	r6, r0
 	movhi	r2, #0
 	cmp	r2, #0
-	beq	.L1607
+	beq	.L1682
 	sub	r0, r0, r6
 	mov	r1, #512
 	add	r0, r9, r0, lsl #9
 	bl	__memzero
-.L1607:
+.L1682:
 	add	r10, r10, #1
-.L1606:
+.L1681:
 	ldrh	r0, [r7, #58]
 	cmp	r10, r0
-	bcc	.L1608
-.L1609:
-	ldr	r3, [fp, #-52]
+	bcc	.L1683
+.L1684:
+	ldr	r3, [fp, #-56]
 	add	r4, r4, #1
 	subs	r3, r3, #1
-	str	r3, [fp, #-52]
-	beq	.L1613
+	str	r3, [fp, #-56]
+	beq	.L1688
 	ldrh	r2, [r7, #32]
 	cmp	r5, r2, lsl #2
-	bne	.L1604
-.L1613:
+	bne	.L1679
+.L1688:
 	cmp	r5, #0
-	beq	.L1604
+	beq	.L1679
 	mov	r2, #0
 	mov	r1, r5
-	ldr	r0, [r7, #3832]
+	ldr	r0, [r7, #3280]
 	mov	r10, #0
 	bl	FlashReadPages
 	lsl	r3, r8, #9
@@ -11257,55 +11841,62 @@ FtlRead:
 	ldr	r3, [fp, #-76]
 	lsl	r3, r3, #9
 	str	r3, [fp, #-84]
-.L1619:
-	mov	r3, #20
-	ldr	r2, [r7, #3832]
-	mul	ip, r3, r10
-	ldr	r3, [fp, #-60]
+.L1695:
+	mov	ip, #20
+	ldr	r2, [r7, #3280]
+	mul	ip, ip, r10
+	ldr	r3, [fp, #-64]
 	add	r2, r2, ip
 	ldr	r1, [r2, #16]
 	cmp	r3, r1
-	bne	.L1615
+	bne	.L1690
 	ldr	r1, [r2, #8]
-	ldr	r2, [r7, #3816]
+	ldr	r2, [r7, #3304]
 	cmp	r1, r2
-	bne	.L1616
+	bne	.L1691
 	ldr	r3, [fp, #-80]
 	mov	r0, r9
 	ldr	r2, [fp, #-84]
 	str	ip, [fp, #-92]
 	add	r1, r1, r3
-.L1634:
+.L1710:
 	bl	ftl_memcpy
 	ldr	ip, [fp, #-92]
-.L1616:
-	ldr	r2, [r7, #3832]
-	ldr	r0, [r2, ip]
-	add	lr, r2, ip
-	cmn	r0, #1
-	ldreq	r1, [r7, #2708]
-	streq	r0, [fp, #-48]
-	addeq	r1, r1, #1
-	streq	r1, [r7, #2708]
-	ldr	r2, [r2, ip]
-	cmp	r2, #256
-	bne	.L1618
-	ldr	r0, [lr, #4]
+.L1691:
+	ldr	r1, [r7, #3280]
+	add	r2, r1, ip
+	ldr	r0, [r2, #12]
+	ldr	lr, [r2, #16]
+	ldr	r0, [r0, #8]
+	cmp	lr, r0
+	ldrne	r0, [r7, #2708]
+	addne	r0, r0, #1
+	strne	r0, [r7, #2708]
+	ldr	lr, [r1, ip]
+	cmn	lr, #1
+	ldreq	r0, [r7, #2708]
+	streq	lr, [fp, #-48]
+	addeq	r0, r0, #1
+	streq	r0, [r7, #2708]
+	ldr	r1, [r1, ip]
+	cmp	r1, #256
+	bne	.L1694
+	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1618:
+.L1694:
 	add	r10, r10, #1
 	cmp	r5, r10
-	bne	.L1619
+	bne	.L1695
 	mov	r5, #0
-	b	.L1604
-.L1610:
-	ldr	r3, [fp, #-64]
+	b	.L1679
+.L1685:
+	ldr	r3, [fp, #-68]
 	cmp	r4, r3
-	bne	.L1612
-	ldr	r1, [r7, #3808]
-	ldr	r3, [fp, #-56]
+	bne	.L1687
+	ldr	r1, [r7, #3308]
+	ldr	r3, [fp, #-60]
 	str	r1, [r2, #8]
 	mul	r1, r10, r4
 	sub	r8, r3, r1
@@ -11313,31 +11904,31 @@ FtlRead:
 	subeq	r1, r1, r6
 	addeq	r1, r9, r1, lsl #9
 	streq	r1, [r2, #8]
-	b	.L1611
-.L1612:
+	b	.L1686
+.L1687:
 	mul	r10, r4, r10
 	sub	r10, r10, r6
 	add	r10, r9, r10, lsl #9
 	str	r10, [r2, #8]
-	b	.L1611
-.L1615:
-	ldr	r3, [fp, #-64]
+	b	.L1686
+.L1690:
+	ldr	r3, [fp, #-68]
 	cmp	r3, r1
-	bne	.L1616
+	bne	.L1691
 	ldr	r1, [r2, #8]
-	ldr	r2, [r7, #3808]
+	ldr	r2, [r7, #3308]
 	cmp	r1, r2
-	bne	.L1616
+	bne	.L1691
 	ldrh	r0, [r7, #58]
 	str	ip, [fp, #-92]
 	ldr	r2, [fp, #-88]
 	mul	r0, r3, r0
 	sub	r0, r0, r6
 	add	r0, r9, r0, lsl #9
-	b	.L1634
-.L1636:
+	b	.L1710
+.L1712:
 	.align	2
-.L1635:
+.L1711:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.size	FtlRead, .-FtlRead
@@ -11386,119 +11977,124 @@ sftl_vendor_read:
 	.fpu softvfp
 	.type	FtlWrite, %function
 FtlWrite:
-	@ args = 0, pretend = 0, frame = 64
+	@ args = 0, pretend = 0, frame = 68
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	sub	sp, sp, #64
+	sub	sp, sp, #68
 	uxtb	r0, r0
-	mov	r8, r1
-	str	r2, [fp, #-76]
+	mov	r9, r1
+	str	r2, [fp, #-80]
 	cmp	r0, #16
-	str	r3, [fp, #-80]
-	bne	.L1640
+	str	r3, [fp, #-84]
+	bne	.L1716
 	mov	r2, r3
-	ldr	r1, [fp, #-76]
-	add	r0, r8, #256
+	ldr	r1, [fp, #-80]
+	add	r0, r9, #256
 	bl	FtlVendorPartWrite
-.L1639:
+.L1715:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1640:
-	ldr	r3, [fp, #-76]
-	ldr	r9, .L1704
+.L1716:
+	ldr	r3, [fp, #-80]
+	ldr	r4, .L1767
 	add	r6, r1, r3
-	ldr	r3, [r9, #140]
+	ldr	r3, [r4, #140]
 	cmp	r6, r3
 	mvnhi	r0, #0
-	bhi	.L1639
-	ldr	r5, .L1704+4
+	bhi	.L1715
+	ldr	r5, .L1767+4
 	ldr	r0, [r5]
 	cmn	r0, #1
-	beq	.L1639
-	ldr	r3, .L1704+8
-	mov	r2, #2048
-	ldrh	r4, [r9, #58]
-	mov	r0, r8
-	str	r2, [r3, #-4020]
-	mov	r1, r4
+	beq	.L1715
+	ldrh	r7, [r4, #58]
+	mov	r3, #2048
+	str	r3, [r4, #3664]
+	mov	r0, r9
+	mov	r1, r7
 	bl	__udivsi3
-	mov	r1, r4
-	str	r0, [fp, #-68]
+	mov	r1, r7
+	str	r0, [fp, #-76]
 	sub	r0, r6, #1
 	bl	__udivsi3
-	ldr	r2, [fp, #-68]
-	ldr	r10, [r9, #3988]
-	str	r0, [fp, #-88]
-	sub	r6, r0, r2
-	add	r3, r6, #1
-	add	r2, r6, #1
+	ldr	r2, [fp, #-76]
+	str	r0, [fp, #-92]
+	sub	r3, r0, r2
+	ldr	r2, [fp, #-80]
+	str	r3, [fp, #-96]
+	add	r3, r3, #1
 	str	r3, [fp, #-72]
-	cmp	r10, #0
-	ldr	r3, [r9, #2516]
+	ldr	r3, [r4, #2532]
 	add	r3, r3, r2
-	str	r3, [r9, #2516]
-	beq	.L1642
-	ldr	r3, [r10, #16]
-	ldr	r2, [fp, #-68]
-	cmp	r2, r3
-	beq	.L1643
-	bl	FtlCacheWriteBack
-.L1642:
+	ldr	r2, [fp, #-72]
+	str	r3, [r4, #2532]
+	ldr	r3, [r4, #2516]
+	add	r3, r3, r2
+	str	r3, [r4, #2516]
 	ldr	r3, [r5, #8]
-	ldr	r4, .L1704+12
+	ldr	r4, .L1767+8
 	cmp	r3, #0
-	beq	.L1645
+	beq	.L1718
 	ldrh	r3, [r4, #4]
 	add	r0, r4, #48
 	cmp	r3, #0
 	moveq	r4, r0
-.L1645:
-	ldr	r5, [fp, #-68]
-	ldr	r7, .L1704
-.L1646:
+.L1718:
+	ldr	r5, [fp, #-76]
+	ldr	r10, .L1767
+.L1719:
 	ldr	r3, [fp, #-72]
 	cmp	r3, #0
-	beq	.L1680
+	bne	.L1747
+	mov	r0, r3
+	ldr	r1, [fp, #-96]
+	bl	rk_ftl_garbage_collect
+	movw	r3, #2344
+	ldrh	r3, [r10, r3]
+	cmp	r3, #5
+	bls	.L1748
+.L1750:
+	mov	r0, #0
+	b	.L1715
+.L1747:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r7, #32]
+	ldrh	r3, [r10, #32]
 	cmp	r2, r3
-	bcc	.L1647
-	mov	r2, #1012
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1647:
-	ldrh	r9, [r4, #4]
-	cmp	r9, #0
-	bne	.L1648
-	bl	FtlCacheWriteBack
-	ldr	r3, .L1704+12
-	ldr	r6, .L1704+4
+	bcc	.L1720
+	movw	r2, #1011
+	ldr	r1, .L1767+12
+	ldr	r0, .L1767+16
+	bl	sftl_printk
+.L1720:
+	ldrh	r2, [r4, #4]
+	cmp	r2, #0
+	bne	.L1721
+	ldr	r3, .L1767+8
+	ldr	r6, .L1767+4
 	cmp	r4, r3
-	bne	.L1649
+	bne	.L1722
 	add	r0, r4, #48
-	ldrh	r9, [r0, #4]
-	cmp	r9, #0
-	bne	.L1650
+	ldrh	r7, [r0, #4]
+	cmp	r7, #0
+	bne	.L1723
 	bl	allocate_new_data_superblock
-	str	r9, [r6, #8]
-.L1650:
-	ldr	r0, .L1704+12
+	str	r7, [r6, #8]
+.L1723:
+	ldr	r0, .L1767+8
 	bl	allocate_new_data_superblock
-	ldr	r4, .L1704+12
+	ldr	r4, .L1767+8
 	ldr	r3, [r6, #8]
 	add	r0, r4, #48
 	cmp	r3, #0
 	movne	r4, r0
-.L1651:
+.L1724:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1648
+	bne	.L1721
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1648:
+.L1721:
 	ldrh	r3, [r4, #4]
 	ldr	r2, [fp, #-72]
 	cmp	r3, r2
@@ -11508,234 +12104,140 @@ FtlWrite:
 	cmp	r3, r2
 	movcs	r3, r2
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	str	r3, [fp, #-104]
-	ldrh	r3, [r7, #32]
+	str	r3, [fp, #-108]
+	ldrh	r3, [r10, #32]
 	cmp	r2, r3
-	bcc	.L1652
-	movw	r2, #1045
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1652:
-	mov	r9, #0
-.L1653:
-	ldr	r3, [fp, #-104]
-	cmp	r9, r3
-	bne	.L1674
-.L1654:
-	ldr	r3, [r7, #3988]
-	cmp	r3, #0
-	beq	.L1675
-	ldr	r3, [fp, #-72]
-	subs	r9, r9, #1
-	sub	r3, r3, #1
-	str	r3, [fp, #-72]
-	bne	.L1675
-.L1680:
-	ldr	r3, [fp, #-88]
-	mov	r0, #0
-	ldr	r2, [fp, #-68]
-	sub	r1, r3, r2
-	bl	rk_ftl_garbage_collect
-	ldr	r2, .L1704
-	movw	r3, #2344
-	ldrh	r3, [r2, r3]
-	cmp	r3, #15
-	bhi	.L1677
-	ldr	r4, .L1704+24
-	ldr	r5, .L1704+28
-.L1700:
-	ldrh	r3, [r4]
-	movw	r2, #65535
+	bcc	.L1725
+	movw	r2, #1044
+	ldr	r1, .L1767+12
+	ldr	r0, .L1767+16
+	bl	sftl_printk
+.L1725:
+	mov	r3, #0
+.L1766:
+	str	r3, [fp, #-68]
+	ldr	r3, [fp, #-68]
+	ldr	r2, [fp, #-108]
 	cmp	r3, r2
-	bne	.L1681
-	ldrh	r2, [r5]
-	cmp	r2, r3
-	bne	.L1681
-	mov	r0, #0
-	bl	List_get_gc_head_node
-	uxth	r0, r0
-	bl	FtlGcRefreshBlock
-.L1681:
-	ldr	r3, .L1704+32
-	mov	r1, #1
-	mov	r2, #128
-	mov	r0, r1
-	strh	r2, [r3]	@ movhi
-	strh	r2, [r3, #-2]	@ movhi
-	bl	rk_ftl_garbage_collect
-	mov	r1, #1
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	ldr	r3, .L1704+36
-	ldrh	r3, [r3]
-	cmp	r3, #8
-	bls	.L1700
-	b	.L1677
-.L1643:
-	ldr	r3, [r9, #2520]
-	mov	r1, r4
-	mov	r0, r8
-	add	r3, r3, #1
-	str	r3, [r9, #2520]
-	bl	__umodsi3
-	ldr	r3, [fp, #-76]
-	sub	r4, r4, r0
-	ldr	r1, [fp, #-80]
-	cmp	r3, r4
-	movcc	r4, r3
-	ldr	r3, [r10, #8]
-	lsl	r9, r4, #9
-	mov	r2, r9
-	add	r0, r3, r0, lsl #9
-	bl	ftl_memcpy
-	cmp	r6, #0
-	bne	.L1644
-.L1677:
-	mov	r0, #0
-	b	.L1639
-.L1644:
-	ldr	r3, [fp, #-76]
-	add	r8, r8, r4
-	sub	r3, r3, r4
-	str	r3, [fp, #-76]
-	ldr	r3, [fp, #-80]
-	add	r3, r3, r9
-	str	r3, [fp, #-80]
+	bne	.L1745
+.L1727:
+	mov	r3, r4
+	mov	r2, #0
+	ldr	r1, [fp, #-68]
+	ldr	r0, [r10, #3288]
+	bl	FtlProgPages
 	ldr	r3, [fp, #-68]
-	add	r3, r3, #1
-	str	r3, [fp, #-68]
-	bl	FtlCacheWriteBack
-	str	r6, [fp, #-72]
-	b	.L1642
-.L1649:
+	ldr	r2, [fp, #-72]
+	cmp	r3, r2
+	bls	.L1746
+	movw	r2, #1121
+	ldr	r1, .L1767+12
+	ldr	r0, .L1767+16
+	bl	sftl_printk
+.L1746:
+	ldr	r3, [fp, #-72]
+	ldr	r2, [fp, #-68]
+	sub	r3, r3, r2
+	str	r3, [fp, #-72]
+	b	.L1719
+.L1722:
+	str	r2, [r6, #8]
 	ldrh	r2, [r3, #4]
-	str	r9, [r6, #8]
 	cmp	r2, #0
 	movne	r4, r3
-	bne	.L1648
+	bne	.L1721
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-	b	.L1651
-.L1674:
+	b	.L1724
+.L1745:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1654
+	beq	.L1727
 	mov	r2, #0
 	sub	r1, fp, #64
 	mov	r0, r5
-	mov	r6, #20
+	mov	r7, #20
 	bl	log2phys
 	mov	r0, r4
-	mul	r6, r6, r9
 	bl	get_new_active_ppa
-	ldrh	r2, [r7, #112]
-	ldr	r3, [r7, #3840]
-	mul	r1, r2, r9
-	add	r3, r3, r6
-	str	r0, [r3, #4]
-	str	r5, [r3, #16]
+	ldrh	r2, [r10, #112]
+	ldr	r1, [fp, #-68]
+	ldr	r3, [fp, #-68]
+	mul	r1, r2, r1
+	mul	r7, r7, r3
+	ldr	r3, [r10, #3288]
 	bic	r1, r1, #3
-	str	r1, [fp, #-96]
-	ldr	r0, [fp, #-96]
-	ldr	r1, [r7, #3812]
-	add	r10, r1, r0
 	str	r1, [fp, #-100]
-	str	r10, [r3, #12]
+	add	r3, r3, r7
+	ldr	r1, [r10, #3328]
+	str	r0, [r3, #4]
+	ldr	r0, [fp, #-100]
+	str	r1, [fp, #-104]
+	str	r5, [r3, #16]
+	add	r8, r1, r0
 	mov	r1, #0
-	mov	r0, r10
+	str	r8, [r3, #12]
+	mov	r0, r8
 	bl	ftl_memset
-	ldr	r3, [fp, #-68]
-	ldr	r2, [fp, #-88]
+	ldr	r3, [fp, #-76]
+	ldr	r2, [fp, #-92]
+	ldrh	r6, [r10, #58]
 	cmp	r5, r2
 	cmpne	r5, r3
-	ldrh	r3, [r7, #58]
-	bne	.L1655
-	ldr	r2, [fp, #-68]
-	cmp	r5, r2
-	bne	.L1656
-	mov	r1, r3
-	mov	r0, r8
-	str	r3, [fp, #-84]
+	bne	.L1728
+	cmp	r5, r3
+	bne	.L1729
+	mov	r1, r6
+	mov	r0, r9
 	bl	__umodsi3
-	ldr	r3, [fp, #-84]
-	ldr	r2, [fp, #-76]
-	str	r0, [fp, #-92]
-	sub	r3, r3, r0
-	cmp	r3, r2
-	movcs	r3, r2
-	str	r3, [fp, #-84]
-.L1657:
-	ldrh	r3, [r7, #58]
-	ldr	r2, [fp, #-84]
-	cmp	r2, r3
-	ldr	r3, [fp, #-68]
-	bne	.L1658
+	ldr	r3, [fp, #-80]
+	sub	r6, r6, r0
+	str	r0, [fp, #-88]
+	cmp	r6, r3
+	movcs	r6, r3
+.L1730:
+	ldrh	r3, [r10, #58]
+	cmp	r6, r3
+	ldr	r3, [fp, #-76]
+	bne	.L1731
 	cmp	r5, r3
-	ldr	r3, [r7, #3840]
-	add	r6, r3, r6
-	ldreq	r3, [fp, #-80]
-	beq	.L1702
+	ldr	r3, [r10, #3288]
+	add	r7, r3, r7
+	ldreq	r3, [fp, #-84]
+	streq	r3, [r7, #8]
+	beq	.L1733
+.L1763:
+	mul	r6, r5, r6
 	ldr	r3, [fp, #-84]
-	mul	r2, r3, r5
+	sub	r6, r6, r9
+	add	r6, r3, r6, lsl #9
+	str	r6, [r7, #8]
+	b	.L1733
+.L1729:
 	ldr	r3, [fp, #-80]
-	sub	r2, r2, r8
-	add	r2, r3, r2, lsl #9
-	str	r2, [r6, #8]
-.L1660:
-	ldrb	r2, [r4, #6]	@ zero_extendqisi2
-	ldrh	r3, [r7, #32]
-	cmp	r2, r3
-	bcc	.L1671
-	movw	r2, #1119
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1671:
-	ldr	r3, .L1704+40
-	add	r9, r9, #1
-	ldr	r2, [fp, #-100]
-	ldr	r1, [fp, #-96]
-	strh	r3, [r2, r1]	@ movhi
-	ldr	r3, [r7, #2544]
-	str	r5, [r10, #8]
-	add	r5, r5, #1
-	str	r3, [r10, #4]
-	add	r3, r3, #1
-	cmn	r3, #1
-	moveq	r3, #0
-	str	r3, [r7, #2544]
-	ldr	r3, [fp, #-64]
-	str	r3, [r10, #12]
-	ldrh	r3, [r4]
-	strh	r3, [r10, #2]	@ movhi
-	b	.L1653
-.L1656:
-	ldr	r2, [fp, #-76]
-	smulbb	r3, r3, r5
-	add	r2, r8, r2
-	sub	r2, r2, r3
-	uxth	r3, r2
-	str	r3, [fp, #-84]
+	add	r2, r9, r3
+	smulbb	r3, r6, r5
+	sub	r6, r2, r3
 	mov	r3, #0
-	str	r3, [fp, #-92]
-	b	.L1657
-.L1658:
+	uxth	r6, r6
+	str	r3, [fp, #-88]
+	b	.L1730
+.L1731:
 	cmp	r5, r3
-	ldr	r3, [r7, #3840]
-	ldreq	r2, [r7, #3816]
-	ldrne	r2, [r7, #3808]
-	add	r3, r3, r6
+	ldr	r3, [r10, #3288]
+	ldreq	r2, [r10, #3304]
+	ldrne	r2, [r10, #3308]
+	add	r3, r3, r7
 	str	r2, [r3, #8]
 	ldr	r3, [fp, #-64]
 	cmn	r3, #1
-	beq	.L1663
+	beq	.L1736
 	str	r3, [fp, #-56]
 	mov	r1, #1
-	ldr	r3, [r7, #3840]
+	ldr	r3, [r10, #3288]
 	sub	r0, fp, #60
 	str	r5, [fp, #-44]
-	add	r3, r3, r6
+	add	r3, r3, r7
 	ldr	r2, [r3, #8]
 	ldr	r3, [r3, #12]
 	str	r2, [fp, #-52]
@@ -11744,134 +12246,472 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [fp, #-60]
 	cmn	r3, #1
-	ldreq	r3, [r7, #2708]
+	ldreq	r3, [r10, #2708]
 	addeq	r3, r3, #1
-	streq	r3, [r7, #2708]
-	beq	.L1667
-	ldr	r3, [r10, #8]
+	streq	r3, [r10, #2708]
+	beq	.L1740
+	ldr	r3, [r8, #8]
 	cmp	r5, r3
-	beq	.L1666
-	ldr	r3, [r7, #2708]
+	beq	.L1739
+	ldr	r3, [r10, #2708]
 	mov	r2, r5
-	ldr	r0, .L1704+44
+	ldr	r0, .L1767+20
 	add	r3, r3, #1
-	str	r3, [r7, #2708]
-	ldr	r1, [r10, #8]
-	bl	printk
-.L1666:
-	ldr	r3, [r10, #8]
+	str	r3, [r10, #2708]
+	ldr	r1, [r8, #8]
+	bl	sftl_printk
+.L1739:
+	ldr	r3, [r8, #8]
 	cmp	r5, r3
-	beq	.L1667
-	movw	r2, #1098
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1667:
-	ldr	r3, [fp, #-68]
+	beq	.L1740
+	movw	r2, #1097
+	ldr	r1, .L1767+12
+	ldr	r0, .L1767+16
+	bl	sftl_printk
+.L1740:
+	ldr	r3, [fp, #-76]
+	lsl	r2, r6, #9
 	cmp	r5, r3
-	ldr	r3, [fp, #-84]
-	lsl	r2, r3, #9
-	bne	.L1668
-	ldr	r3, [r7, #3840]
-	ldr	r1, [fp, #-80]
-	add	r3, r3, r6
-	ldr	r0, [r3, #8]
-	ldr	r3, [fp, #-92]
+	bne	.L1741
+	ldr	r3, [r10, #3288]
+	ldr	r1, [fp, #-84]
+	add	r7, r3, r7
+	ldr	r3, [fp, #-88]
+	ldr	r0, [r7, #8]
 	add	r0, r0, r3, lsl #9
+.L1764:
 	bl	ftl_memcpy
-	ldr	r3, [fp, #-88]
-	cmp	r5, r3
-	bne	.L1660
-.L1669:
-	ldrh	r3, [r4, #4]
-	cmp	r3, #0
-	ldrne	r3, [r7, #3840]
-	addne	r6, r3, r6
-	ldrne	r3, .L1704+8
-	strne	r6, [r7, #3988]
-	strne	r4, [r3, #-4036]
-	b	.L1660
-.L1663:
-	ldr	r3, [r7, #3840]
+.L1733:
+	ldrb	r2, [r4, #6]	@ zero_extendqisi2
+	ldrh	r3, [r10, #32]
+	cmp	r2, r3
+	bcc	.L1742
+	movw	r2, #1112
+	ldr	r1, .L1767+12
+	ldr	r0, .L1767+16
+	bl	sftl_printk
+.L1742:
+	ldr	r3, .L1767+24
+	ldr	r2, [fp, #-104]
+	ldr	r1, [fp, #-100]
+	strh	r3, [r2, r1]	@ movhi
+	ldr	r3, [r10, #2544]
+	str	r5, [r8, #8]
+	add	r5, r5, #1
+	str	r3, [r8, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	moveq	r3, #0
+	str	r3, [r10, #2544]
+	ldr	r3, [fp, #-64]
+	str	r3, [r8, #12]
+	ldrh	r3, [r4]
+	strh	r3, [r8, #2]	@ movhi
+	ldr	r3, [fp, #-68]
+	add	r3, r3, #1
+	b	.L1766
+.L1736:
+	ldr	r3, [r10, #3288]
 	mov	r1, #0
-	ldrh	r2, [r7, #110]
-	add	r3, r3, r6
+	ldrh	r2, [r10, #110]
+	add	r3, r3, r7
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1667
-.L1668:
-	ldrh	r1, [r7, #58]
-	ldr	r0, [fp, #-80]
-	ldr	r3, [r7, #3840]
+	b	.L1740
+.L1741:
+	ldrh	r1, [r10, #58]
+	ldr	r3, [r10, #3288]
 	mul	r1, r5, r1
-	add	r3, r3, r6
-	sub	r1, r1, r8
-	add	r1, r0, r1, lsl #9
-	ldr	r0, [r3, #8]
+	add	r7, r3, r7
+	ldr	r3, [fp, #-84]
+	ldr	r0, [r7, #8]
+	sub	r1, r1, r9
+	add	r1, r3, r1, lsl #9
+	b	.L1764
+.L1728:
+	ldr	r3, [r10, #3288]
+	add	r7, r3, r7
+	b	.L1763
+.L1748:
+	ldr	r5, .L1767+28
+	mov	r4, #256
+	ldr	r6, .L1767+32
+.L1751:
+	ldrh	r3, [r5]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L1749
+	ldrh	r2, [r6]
+	cmp	r2, r3
+	bne	.L1749
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	bl	FtlGcRefreshBlock
+.L1749:
+	ldr	r3, .L1767+36
+	mov	r1, #1
+	mov	r2, #128
+	mov	r0, r1
+	strh	r2, [r3]	@ movhi
+	strh	r2, [r3, #-2]	@ movhi
+	bl	rk_ftl_garbage_collect
+	mov	r1, #1
+	mov	r0, #0
+	bl	rk_ftl_garbage_collect
+	ldr	r3, .L1767+40
+	ldrh	r3, [r3]
+	cmp	r3, #2
+	bhi	.L1750
+	subs	r4, r4, #1
+	bne	.L1751
+	b	.L1750
+.L1768:
+	.align	2
+.L1767:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR1+606
+	.word	.LC1
+	.word	.LC114
+	.word	-3947
+	.word	.LANCHOR0+2588
+	.word	.LANCHOR0+3202
+	.word	.LANCHOR0+3150
+	.word	.LANCHOR0+2344
+	.size	FtlWrite, .-FtlWrite
+	.global	__modsi3
+	.align	2
+	.global	sftl_write
+	.syntax unified
+	.arm
+	.fpu softvfp
+	.type	sftl_write, %function
+sftl_write:
+	@ args = 0, pretend = 0, frame = 124
+	@ frame_needed = 1, uses_anonymous_args = 0
+	mov	ip, sp
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
+	sub	fp, ip, #4
+	sub	sp, sp, #128
+	add	r5, r0, r1
+	sub	r6, r5, #1
+	mov	r3, r1
+	cmp	r6, #63
+	mov	r9, r0
+	movhi	r3, #0
+	movls	r3, #1
+	cmp	r0, #576
+	orrhi	r3, r3, #1
+	str	r1, [fp, #-120]
+	cmp	r3, #0
+	str	r2, [fp, #-140]
+	ldr	r4, .L1805
+	beq	.L1770
+	ldr	r3, [r4, #3668]
+	cmp	r3, #0
+	beq	.L1771
+	ldr	r10, [r4, #3672]
+	ldr	r3, .L1805+4
+	ldr	r2, [r10]
+	cmp	r2, r3
+	beq	.L1772
+.L1789:
+	ldr	r4, .L1805
+	mov	r3, #0
+	ldr	r0, [r4, #3672]
+	str	r3, [r4, #3668]
+	bl	kfree
+	ldr	r0, [r4, #3676]
+	bl	kfree
+.L1771:
+	ldr	r3, [fp, #-140]
+	mov	r1, r9
+	ldr	r2, [fp, #-120]
+	mov	r0, #0
+	bl	FtlWrite
+	sub	sp, fp, #40
+	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1772:
+	ldrh	r5, [r4, #14]
+	add	r0, r10, #262144
+	ldrh	r4, [r4, #10]
+	mov	r3, #0
+	movw	r2, #65535
+.L1776:
+	ldr	r1, [r0, #-4]
+	cmp	r1, #0
+	bne	.L1773
+	ldr	r1, [r10, r3, lsl #2]
+	add	r3, r3, #1
+	cmp	r3, #4096
+	sub	r2, r2, #1
+	movhi	r3, #0
+	cmp	r2, #4096
+	str	r1, [r0, #-4]!
+	bne	.L1776
+	mov	r3, #512
+	str	r3, [fp, #-108]
+	b	.L1775
+.L1773:
+	add	r3, r2, #127
+	ldr	r0, .L1805+8
+	lsr	r3, r3, #7
+	str	r3, [fp, #-108]
+	bl	sftl_printk
+.L1775:
+	uxtb	r5, r5
+	smulbb	r5, r5, r4
+	ldr	r4, .L1805
+	uxth	r3, r5
+	mov	r5, #0
+	str	r3, [fp, #-112]
+	sub	r0, r3, #1
+	mov	r1, r3
+	ldr	r3, [fp, #-108]
+	add	r0, r0, r3
+	bl	__udivsi3
+	ldr	r2, [fp, #-112]
+	str	r0, [fp, #-116]
+	str	r0, [fp, #-136]
+	str	r5, [fp, #-128]
+	mul	r3, r0, r2
+	str	r3, [fp, #-124]
+	ldr	r3, [fp, #-108]
+	lsl	r3, r3, #7
+	str	r3, [fp, #-152]
+	b	.L1788
+.L1796:
+	str	r3, [fp, #-136]
+.L1788:
+	mov	r1, #512
+	ldr	r0, [r4, #3676]
+	bl	__memzero
+	ldrh	r8, [r4, #14]
+	mov	r0, r5
+	ldrh	r6, [r4, #10]
+	mov	r1, r8
+	uxtb	r7, r8
+	uxth	r3, r7
+	str	r3, [fp, #-132]
+	ldrh	r3, [fp, #-132]
+	smulbb	r6, r6, r3
+	bl	__udivsi3
+	ldr	r3, [r4, #3248]
+	mov	r1, r0
+	mov	r0, #0
+	uxth	r6, r6
+	blx	r3
+	ldr	r3, [fp, #-124]
+	cmp	r3, r6
+	bls	.L1777
+	mov	r1, r8
+	add	r0, r6, r5
+	bl	__udivsi3
+	ldr	r3, [r4, #3248]
+	mov	r1, r0
+	mov	r0, #0
+	blx	r3
+.L1777:
+	mov	r1, r6
+	mov	r0, r5
+	bl	__umodsi3
+	mov	r6, #0
+	mov	r8, r0
+	sub	r3, r5, r0
+	str	r3, [fp, #-144]
+.L1778:
+	ldr	r3, [fp, #-124]
+	cmp	r3, r6
+	bhi	.L1779
+	ldrb	r7, [r4, #14]	@ zero_extendqisi2
+	mov	r0, r5
+	ldr	r3, [r4, #3676]
+	mov	r6, #0
+	ldrh	r1, [r4, #10]
+	str	r3, [fp, #-148]
+	uxth	r3, r7
+	str	r3, [fp, #-144]
+	ldrh	r3, [fp, #-144]
+	smulbb	r1, r1, r3
+	uxth	r1, r1
+	bl	__umodsi3
+	mov	r1, r7
+	sub	r3, r5, r0
+	str	r0, [fp, #-132]
+	ldrh	r0, [fp, #-132]
+	str	r3, [fp, #-156]
+	bl	__modsi3
+	uxth	r3, r0
+.L1780:
+	ldr	r2, [fp, #-108]
+	cmp	r6, r2
+	bcs	.L1784
+	ldr	r2, [fp, #-144]
+	mov	r1, r7
+	str	r3, [fp, #-164]
+	sub	r8, r2, r3
+	ldr	r3, [fp, #-148]
+	uxth	r8, r8
+	add	r2, r3, r6, lsl #9
+	ldr	r3, [fp, #-132]
+	str	r2, [fp, #-160]
+	add	r0, r3, r6
+	bl	__udivsi3
+	ldr	r2, [fp, #-156]
+	uxth	r0, r0
+	ldr	r3, [fp, #-164]
+	mov	r1, r7
+	add	r3, r3, r2
+	mla	r0, r7, r0, r3
+	bl	__udivsi3
+	ldr	ip, [r4, #3256]
+	mov	r1, r0
+	sub	r3, fp, #104
+	ldr	r2, [fp, #-160]
+	mov	r0, #0
+	blx	ip
+	cmn	r0, #1
+	bne	.L1781
+.L1784:
+	ldr	r0, [r4, #3676]
+	mov	r3, r10
+	mov	r6, #0
+.L1782:
+	mov	r8, r3
+	ldr	r1, [r0, r6, lsl #2]
+	ldr	r2, [r8]
+	lsl	r7, r6, #2
+	add	r3, r3, #4
+	cmp	r1, r2
+	beq	.L1785
+	mov	r1, #512
+	bl	__memzero
+	ldr	r2, [r4, #3676]
+	mov	r1, r5
+	str	r6, [sp]
+	ldr	r0, .L1805+12
+	ldr	r3, [r8]
+	ldr	r2, [r2, r7]
+	bl	sftl_printk
+	ldr	r3, [r4, #3248]
+	mov	r1, r5
+	mov	r0, #0
+	blx	r3
+	ldr	r3, [fp, #-116]
+	cmp	r3, #1
+	bls	.L1795
+	ldr	r2, [fp, #-112]
+	mov	r0, #0
+	ldr	r3, [r4, #3248]
+	add	r1, r2, r5
+	blx	r3
+.L1795:
+	ldr	r2, [fp, #-136]
+	ldr	r3, [fp, #-116]
+	add	r3, r3, r2
+	ldr	r2, [fp, #-124]
+	add	r5, r5, r2
+	ldr	r2, [fp, #-136]
+	cmp	r2, #15
+	bls	.L1796
+	b	.L1789
+.L1779:
+	mov	r1, r7
+	add	r0, r8, r6
+	bl	__udivsi3
+	uxth	ip, r0
+	add	r2, r10, r6, lsl #9
+	ldr	r0, [fp, #-144]
+	mul	r3, r7, ip
+	mov	r1, r7
+	str	ip, [fp, #-156]
+	str	r2, [fp, #-148]
+	str	r3, [fp, #-104]
+	movw	r3, #61424
+	str	r3, [fp, #-100]
+	bl	__udivsi3
+	ldr	ip, [fp, #-156]
+	sub	r3, fp, #104
+	ldr	r2, [fp, #-148]
+	add	r1, r0, ip
+	mov	r0, #0
+	ldr	ip, [r4, #3252]
+	blx	ip
+	ldr	r3, [fp, #-132]
+	add	r6, r3, r6
+	uxth	r6, r6
+	b	.L1778
+.L1781:
+	add	r6, r8, r6
+	mov	r3, #0
+	uxth	r6, r6
+	b	.L1780
+.L1785:
+	ldr	r2, [fp, #-152]
+	add	r6, r6, #1
+	cmp	r6, r2
+	bne	.L1782
+	ldr	r3, [fp, #-128]
+	add	r3, r3, #1
+	cmp	r3, #5
+	str	r3, [fp, #-128]
+	bls	.L1795
+	b	.L1789
+.L1770:
+	cmp	r0, #64
+	bne	.L1790
+	mov	r0, #262144
+	bl	ftl_malloc
+	str	r0, [r4, #3672]
+	mov	r0, #262144
+	bl	ftl_malloc
+	ldr	r3, [r4, #3672]
+	str	r0, [r4, #3676]
+	cmp	r0, #0
+	cmpne	r3, #0
+	beq	.L1791
+	mov	r2, #1
+	mov	r1, #262144
+	mov	r0, r3
+	str	r2, [r4, #3668]
+	bl	__memzero
+.L1790:
+	cmp	r9, #63
+	ldr	r0, [r4, #3672]
+	ldrls	r3, [fp, #-120]
+	rsbls	r1, r9, #64
+	ldrhi	r3, .L1805+16
+	ldrhi	r2, [fp, #-120]
+	subls	r2, r3, r1
+	ldrls	r3, [fp, #-140]
+	addhi	r3, r9, r3
+	ldrhi	r1, [fp, #-140]
+	addhi	r0, r0, r3, lsl #9
+	addls	r1, r3, r1, lsl #9
+	cmp	r6, #576
+	subhi	r2, r2, r5
+	subhi	r2, r2, #444
+	subhi	r2, r2, #3
+	lsl	r2, r2, #9
 	bl	ftl_memcpy
-	b	.L1669
-.L1655:
-	ldr	r2, [r7, #3840]
-	mul	r3, r5, r3
-	add	r6, r2, r6
-	ldr	r2, [fp, #-80]
-	sub	r3, r3, r8
-	add	r3, r2, r3, lsl #9
-.L1702:
-	str	r3, [r6, #8]
-	b	.L1660
-.L1675:
-	mov	r3, r4
-	mov	r2, #0
-	mov	r1, r9
-	ldr	r0, [r7, #3840]
-	bl	FtlProgPages
-	ldr	r3, [fp, #-72]
-	cmp	r3, r9
-	bcs	.L1678
-	movw	r2, #1134
-	ldr	r1, .L1704+16
-	ldr	r0, .L1704+20
-	bl	printk
-.L1678:
-	ldr	r3, [fp, #-72]
-	sub	r3, r3, r9
-	str	r3, [fp, #-72]
-	b	.L1646
-.L1705:
+	b	.L1771
+.L1791:
+	ldr	r1, .L1805+20
+	ldr	r0, .L1805+24
+	bl	sftl_printk
+	b	.L1790
+.L1806:
 	.align	2
-.L1704:
+.L1805:
 	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LANCHOR3
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR1+574
-	.word	.LC1
-	.word	.LANCHOR0+2588
-	.word	.LANCHOR0+3202
-	.word	.LANCHOR0+3150
-	.word	.LANCHOR0+2344
-	.word	-3947
-	.word	.LC105
-	.size	FtlWrite, .-FtlWrite
-	.align	2
-	.global	sftl_write
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	sftl_write, %function
-sftl_write:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{fp, ip, lr, pc}
-	sub	fp, ip, #4
-	mov	r3, r2
-	mov	r2, r1
-	mov	r1, r0
-	mov	r0, #0
-	bl	FtlWrite
-	ldmfd	sp, {fp, sp, pc}
+	.word	-52655045
+	.word	.LC115
+	.word	.LC116
+	.word	8388544
+	.word	.LANCHOR1+615
+	.word	.LC117
 	.size	sftl_write, .-sftl_write
 	.align	2
 	.global	sftl_vendor_write
@@ -11893,390 +12733,198 @@ sftl_vendor_write:
 	ldmfd	sp, {fp, sp, pc}
 	.size	sftl_vendor_write, .-sftl_vendor_write
 	.align	2
-	.global	FtlLoadSysInfo
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	FtlLoadSysInfo, %function
-FtlLoadSysInfo:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L1729
-	mov	r1, #0
-	ldr	r3, [r4, #3280]
-	add	r6, r4, #2576
-	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #2324]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	lsl	r2, r2, #1
-	str	r3, [r4, #3272]
-	bl	ftl_memset
-	ldrh	r0, [r6]
-	movw	r3, #65535
-	cmp	r0, r3
-	bne	.L1709
-.L1717:
-	mvn	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1709:
-	ldr	r7, .L1729+4
-	mov	r1, #1
-	ldr	r8, .L1729+8
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
-	add	r0, r0, #1
-	strh	r0, [r6, #2]	@ movhi
-.L1711:
-	cmp	r5, #0
-	bge	.L1714
-	movw	r2, #1437
-	ldr	r1, .L1729+12
-	ldr	r0, .L1729+16
-	bl	printk
-.L1713:
-	ldrh	r3, [r4, #40]
-	ldrh	r2, [r4, #110]
-	add	r3, r3, #24
-	cmp	r2, r3, lsl #1
-	bcs	.L1716
-	movw	r2, #1439
-	ldr	r1, .L1729+12
-	ldr	r0, .L1729+16
-	bl	printk
-.L1716:
-	ldr	r5, .L1729+20
-	mov	r2, #48
-	ldr	r1, [r4, #3268]
-	mov	r0, r5
-	bl	ftl_memcpy
-	ldrh	r2, [r4, #40]
-	ldr	r1, [r4, #3268]
-	ldr	r0, [r4, #2324]
-	lsl	r2, r2, #1
-	add	r1, r1, #48
-	bl	ftl_memcpy
-	ldrh	r1, [r4, #40]
-	ldr	r3, [r4, #3268]
-	ldr	r0, [r4, #24]
-	lsr	r2, r1, #3
-	add	r1, r1, #24
-	lsl	r1, r1, #1
-	add	r2, r2, #4
-	bic	r1, r1, #3
-	add	r1, r3, r1
-	bl	ftl_memcpy
-	ldr	r2, [r4, #2268]
-	ldr	r3, .L1729+8
-	cmp	r2, r3
-	bne	.L1717
-	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
-	ldrh	r3, [r4, #54]
-	ldrh	r7, [r5, #8]
-	cmp	r2, r3
-	strh	r7, [r6, #6]	@ movhi
-	bne	.L1717
-	ldr	r3, .L1729+24
-	ldrh	r2, [r4, #58]
-	ldr	r6, [r4, #44]
-	str	r7, [r3, #-4016]
-	ldrh	r3, [r4, #102]
-	ldrh	r0, [r4, #158]
-	ldrh	r1, [r4, #32]
-	mul	r3, r7, r3
-	sub	r0, r6, r0
-	sub	r0, r0, r7
-	str	r3, [r4, #2504]
-	mul	r3, r3, r2
-	str	r3, [r4, #140]
-	bl	__udivsi3
-	cmp	r7, r6
-	movw	r3, #2572
-	strh	r0, [r4, r3]	@ movhi
-	bls	.L1718
-	movw	r2, #1461
-	ldr	r1, .L1729+12
-	ldr	r0, .L1729+16
-	bl	printk
-.L1718:
-	ldrh	r0, [r5, #14]
-	movw	r3, #2348
-	ldr	r1, .L1729+28
-	mvn	ip, #0
-	strh	r0, [r4, r3]	@ movhi
-	ldrh	r3, [r5, #16]
-	lsr	r2, r3, #6
-	and	r3, r3, #63
-	strb	r3, [r4, #2354]
-	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
-	strh	r2, [r1, #2]	@ movhi
-	movw	r2, #2396
-	strb	r3, [r4, #2356]
-	movw	r3, #2588
-	strh	ip, [r4, r3]	@ movhi
-	mov	r3, #0
-	ldrh	ip, [r5, #18]
-	strh	r3, [r1, #242]	@ movhi
-	strb	r3, [r4, #2594]
-	strh	ip, [r4, r2]	@ movhi
-	ldrh	r2, [r5, #20]
-	strb	r3, [r4, #2596]
-	str	r3, [r4, #2528]
-	str	r3, [r4, #2516]
-	lsr	ip, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2402]
-	ldrb	r2, [r4, #2280]	@ zero_extendqisi2
-	strh	ip, [r1, #50]	@ movhi
-	ldrh	ip, [r5, #22]
-	strb	r2, [r4, #2404]
-	movw	r2, #2444
-	str	r3, [r4, #2508]
-	strh	ip, [r4, r2]	@ movhi
-	ldrh	r2, [r5, #24]
-	str	r3, [r4, #2524]
-	str	r3, [r4, #2552]
-	lsr	ip, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2450]
-	ldrb	r2, [r4, #2281]	@ zero_extendqisi2
-	strh	ip, [r1, #98]	@ movhi
-	strb	r2, [r4, #2452]
-	ldr	r2, [r4, #2300]
-	str	r2, [r4, #2548]
-	str	r3, [r4, #2564]
-	ldr	r2, [r4, #2540]
-	str	r3, [r4, #2520]
-	ldr	r3, [r4, #2308]
-	cmp	r3, r2
-	ldr	r2, [r4, #2544]
-	strhi	r3, [r4, #2540]
-	ldr	r3, [r4, #2304]
-	cmp	r3, r2
-	strhi	r3, [r4, #2544]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1721
-	ldr	r0, .L1729+28
-	bl	make_superblock
-.L1721:
-	movw	r3, #2396
-	ldrh	r2, [r4, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L1722
-	ldr	r0, .L1729+32
-	bl	make_superblock
-.L1722:
-	movw	r3, #2444
-	ldrh	r2, [r4, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L1723
-	ldr	r0, .L1729+36
-	bl	make_superblock
-.L1723:
-	movw	r3, #2588
-	ldrh	r2, [r4, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L1724
-	ldr	r0, .L1729+40
-	bl	make_superblock
-.L1724:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1714:
-	ldrh	r3, [r6]
-	mov	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3264]
-	ldr	r3, [r4, #3280]
-	str	r3, [r4, #3268]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	cmn	r3, #1
-	beq	.L1712
-	ldr	r3, [r4, #3280]
-	ldr	r3, [r3]
-	cmp	r3, r8
-	bne	.L1712
-	ldr	r3, [r4, #3284]
-	ldrh	r2, [r3]
-	movw	r3, #61604
-	cmp	r2, r3
-	beq	.L1713
-.L1712:
-	sub	r5, r5, #1
-	sxth	r5, r5
-	b	.L1711
-.L1730:
-	.align	2
-.L1729:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.word	1179929683
-	.word	.LANCHOR1+583
-	.word	.LC1
-	.word	.LANCHOR0+2268
-	.word	.LANCHOR3
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+2588
-	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
-	.align	2
-	.global	FtlSysBlkInit
+	.global	FtlMakeBbt
 	.syntax unified
 	.arm
-	.fpu softvfp
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
-	@ args = 0, pretend = 0, frame = 0
+	.fpu softvfp
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	@ args = 0, pretend = 0, frame = 4
 	@ frame_needed = 1, uses_anonymous_args = 0
 	mov	ip, sp
-	push	{r4, r5, r6, r7, r8, fp, ip, lr, pc}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1747
-	mov	r2, #0
-	movw	r3, #4008
-	ldrh	r0, [r4, #36]
-	strh	r2, [r4, r3]	@ movhi
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlScanSysBlk
-	add	r3, r4, #2576
-	ldrh	r2, [r3]
-	movw	r3, #65535
+	sub	sp, sp, #4
+	mov	r7, #0
+	ldr	r8, .L1827
+	bl	FtlBbtMemInit
+	bl	FtlLoadFactoryBbt
+	sub	r5, r8, #180
+	sub	r9, r8, #18
+	mov	r4, r5
+.L1809:
+	ldrh	r3, [r5, #54]
+	cmp	r7, r3
+	bcc	.L1815
+	mov	r0, #0
+.L1816:
+	ldrh	r2, [r4, #114]
+	uxth	r3, r0
+	add	r5, r0, #1
 	cmp	r2, r3
-	bne	.L1732
-.L1734:
-	mvn	r8, #0
-.L1731:
-	mov	r0, r8
-	ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
-.L1732:
-	bl	FtlLoadSysInfo
-	subs	r8, r0, #0
-	bne	.L1734
-	bl	FtlLoadMapInfo
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	mov	r0, #1
-	bl	FtlUpdateVaildLpn
-	ldrh	r1, [r4, #138]
-	mov	r3, r8
-	ldr	r2, [r4, #2492]
-	mov	r0, #12
-.L1735:
-	cmp	r3, r1
-	bge	.L1740
-	mla	ip, r0, r3, r2
-	ldr	ip, [ip, #4]
-	cmp	ip, #0
-	bge	.L1736
-.L1740:
-	ldr	r5, .L1747+4
-	cmp	r3, r1
-	ldrh	r2, [r5, #28]
-	add	r7, r5, #80
-	add	r2, r2, #1
-	strh	r2, [r5, #28]	@ movhi
-	bge	.L1746
-.L1737:
-	ldr	r6, .L1747+8
-	ldr	r0, .L1747+12
-	bl	FtlSuperblockPowerLostFix
-	mov	r0, r6
-	bl	FtlSuperblockPowerLostFix
-	movw	r3, #2348
-	ldr	r1, [r4, #2324]
-	ldrh	r3, [r4, r3]
-	ldrh	r0, [r7, #4]
-	lsl	r3, r3, #1
-	ldrh	r2, [r1, r3]
-	sub	r2, r2, r0
-	strh	r2, [r1, r3]	@ movhi
-	movw	r2, #2396
-	ldrh	r2, [r4, r2]
-	ldrh	r3, [r4, #102]
-	ldr	r0, [r4, #2324]
-	ldrh	ip, [r6, #4]
-	lsl	r2, r2, #1
-	strh	r3, [r7, #2]	@ movhi
+	bhi	.L1817
+	ldrh	r5, [r4, #164]
+	movw	r6, #65535
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L1818:
+	ldrh	r3, [r4, #164]
+	sub	r3, r3, #48
+	cmp	r5, r3
+	ble	.L1822
+	mov	r0, r5
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1819
+	mov	r0, r5
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L1820
+	mov	r0, r5
+	bl	FtlBbmMapBadBlock
+.L1819:
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L1818
+.L1815:
+	ldrh	r3, [r9, #2]!
+	movw	r2, #65535
+	ldr	r0, [r5, #3292]
+	ldr	r10, [r5, #3324]
+	cmp	r3, r2
+	str	r0, [r5, #3452]
+	str	r10, [r5, #3456]
+	beq	.L1810
+	ldrh	ip, [r5, #98]
+	mov	r2, #1
+	mov	r1, r2
+	ldr	r0, .L1827+4
+	mla	ip, r7, ip, r3
+	lsl	r3, ip, #10
+	str	ip, [fp, #-44]
+	str	r3, [r5, #3448]
+	bl	FlashReadPages
+	ldrh	r2, [r5, #98]
+	ldr	r1, [r5, #3452]
+	ldr	r0, [r8]
+	add	r2, r2, #7
+	asr	r2, r2, #3
+	bl	ftl_memcpy
+	ldr	ip, [fp, #-44]
+.L1811:
+	uxth	r0, ip
+	add	r7, r7, #1
+	add	r8, r8, #4
+	bl	FtlBbmMapBadBlock
+	b	.L1809
+.L1810:
+	mov	r1, r7
+	bl	FlashGetBadBlockList
+	ldr	r1, [r8]
+	ldr	r0, [r5, #3452]
+	bl	FtlBbt2Bitmap
+	ldrh	r6, [r5, #98]
+.L1813:
+	sub	r6, r6, #1
+	uxth	r6, r6
+.L1812:
+	ldrh	r0, [r4, #98]
+	smlabb	r0, r0, r7, r6
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1813
+	mov	r1, #16
+	ldr	r0, [r4, #3324]
+	strh	r6, [r9]	@ movhi
+	bl	__memzero
+	mov	r1, #4096
+	ldr	r0, [r4, #3292]
+	bl	__memzero
+	ldr	r3, .L1827+8
+	strh	r3, [r10]	@ movhi
 	mov	r3, #0
-	strb	r3, [r4, #2354]
-	strh	r3, [r7, #4]	@ movhi
-	ldrh	r1, [r0, r2]
-	sub	r1, r1, ip
-	strh	r1, [r0, r2]	@ movhi
-	ldrh	r2, [r4, #102]
-	ldr	r0, .L1747+16
-	strb	r3, [r4, #2402]
-	strh	r2, [r6, #2]	@ movhi
-	strh	r3, [r6, #4]	@ movhi
-	bl	FtlMapBlkWriteDump_data
-	add	r0, r6, #1552
-	bl	FtlMapBlkWriteDump_data
-	ldrh	r3, [r5, #30]
-	add	r3, r3, #1
-	strh	r3, [r5, #30]	@ movhi
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	bl	FtlVpcTblFlush
-	b	.L1741
-.L1736:
+	str	r3, [r10, #4]
+	ldrh	r3, [r9]
+	ldrh	ip, [r4, #98]
+	strh	r3, [r10, #2]	@ movhi
+	ldrh	r3, [r9]
+	ldr	r1, [r8]
+	ldr	r0, [r4, #3452]
+	mla	ip, r7, ip, r3
+	lsl	r3, ip, #10
+	str	ip, [fp, #-44]
+	str	r3, [r4, #3448]
+	ldr	r3, .L1827+12
+	ldrh	r2, [r3]
+	lsl	r2, r2, #2
+	bl	ftl_memcpy
+	mov	r2, #1
+	ldr	r0, .L1827+4
+	mov	r1, r2
+	bl	FlashEraseBlocks
+	mov	r3, #1
+	ldr	r0, .L1827+4
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r3, [r4, #3444]
+	ldr	ip, [fp, #-44]
+	cmn	r3, #1
+	bne	.L1811
+	uxth	r0, ip
+	bl	FtlBbmMapBadBlock
+	b	.L1812
+.L1817:
+	uxth	r0, r0
+	bl	FtlBbmMapBadBlock
+	mov	r0, r5
+	b	.L1816
+.L1820:
+	ldrh	r3, [r4, #152]
+	cmp	r3, r6
+	strheq	r5, [r4, #152]	@ movhi
+	beq	.L1819
+.L1821:
+	strh	r5, [r4, #156]	@ movhi
+.L1822:
+	ldrh	r3, [r4, #152]
+	mov	r5, #0
+	ldr	r0, [r4, #3260]
+	mov	r1, #1
+	str	r5, [r4, #160]
+	mov	r2, #2
+	strh	r5, [r4, #154]	@ movhi
+	lsl	r3, r3, #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r4, #156]
+	lsl	r3, r3, #10
+	str	r3, [r0, #24]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4, #152]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, #156]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r4, #160]
+	ldrh	r2, [r4, #156]
+	strh	r5, [r4, #154]	@ movhi
 	add	r3, r3, #1
-	b	.L1735
-.L1746:
-	movw	r3, #4008
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	bne	.L1737
-.L1741:
-	movw	r3, #2348
-	ldrh	r0, [r4, r3]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1742
-	ldrh	r3, [r7, #4]
-	cmp	r3, #0
-	bne	.L1742
-	ldr	r6, .L1747+8
-	ldrh	r3, [r6, #4]
-	cmp	r3, #0
-	bne	.L1742
-	bl	FtlGcRefreshBlock
-	movw	r3, #2396
-	ldrh	r0, [r4, r3]
-	bl	FtlGcRefreshBlock
-	sub	r0, r6, #48
-	bl	allocate_new_data_superblock
-	mov	r0, r6
-	bl	allocate_new_data_superblock
-.L1742:
-	ldrh	r3, [r5, #28]
-	tst	r3, #31
-	bne	.L1731
-	bl	FtlVpcCheckAndModify
-	b	.L1731
-.L1748:
+	str	r3, [r4, #160]
+	ldrh	r3, [r4, #152]
+	strh	r2, [r4, #152]	@ movhi
+	strh	r3, [r4, #156]	@ movhi
+	bl	FtlBbmTblFlush
+	mov	r0, r5
+	ldmib	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
+.L1828:
 	.align	2
-.L1747:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2268
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+3904
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
+.L1827:
+	.word	.LANCHOR0+180
+	.word	.LANCHOR0+3444
+	.word	-3872
+	.word	.LANCHOR0+3380
+	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	2
 	.global	ftl_low_format
 	.syntax unified
@@ -12289,7 +12937,7 @@ ftl_low_format:
 	mov	ip, sp
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r4, .L1773
+	ldr	r4, .L1853
 	mov	r3, #0
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
@@ -12297,41 +12945,41 @@ ftl_low_format:
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	beq	.L1750
+	beq	.L1830
 	bl	FtlMakeBbt
-.L1750:
-	ldr	r0, .L1773+4
+.L1830:
+	ldr	r0, .L1853+4
 	mov	r2, #0
-.L1751:
+.L1831:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	add	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1752
+	blt	.L1832
 	ldrh	r6, [r4, #40]
 	mov	r5, #0
-.L1753:
+.L1833:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1754
+	bhi	.L1834
 	ldrh	r1, [r4, #32]
 	sub	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1755
-.L1759:
+	bge	.L1835
+.L1839:
 	mov	r0, #0
 	mov	r6, r0
-.L1756:
+.L1836:
 	ldrh	r2, [r4, #40]
 	uxth	r3, r0
 	add	r5, r0, #1
 	cmp	r2, r3
-	bhi	.L1760
+	bhi	.L1840
 	ldrh	r3, [r4, #42]
 	movw	r9, #2572
 	ldrh	r5, [r4, #32]
 	ldr	r10, [r4, #44]
-	str	r3, [r4, #3804]
+	str	r3, [r4, #3276]
 	mov	r1, r5
 	mov	r0, r10
 	bl	__udivsi3
@@ -12343,7 +12991,7 @@ ftl_low_format:
 	mov	r3, #24
 	mul	r3, r3, r5
 	cmp	r6, r3
-	ble	.L1761
+	ble	.L1841
 	mov	r1, r5
 	sub	r0, r10, r6
 	bl	__udivsi3
@@ -12351,10 +12999,10 @@ ftl_low_format:
 	lsr	r0, r0, #5
 	add	r0, r0, #24
 	strh	r0, [r4, r9]	@ movhi
-.L1761:
+.L1841:
 	ldrh	r3, [r4, #94]
 	cmp	r3, #0
-	beq	.L1763
+	beq	.L1843
 	movw	r2, #2572
 	ldrh	r1, [r4, r2]
 	add	r1, r1, r3, lsr #1
@@ -12365,16 +13013,15 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r7, r3
 	strhlt	r3, [r4, r2]	@ movhi
-.L1763:
+.L1843:
 	movw	r3, #2572
-	ldr	r6, .L1773+8
+	mvn	r6, #0
 	ldrh	r2, [r4, r3]
-	mvn	r7, #0
 	ldr	r3, [r4, #2504]
 	sub	r3, r3, r2
 	mul	r5, r5, r3
 	ldrh	r3, [r4, #102]
-	str	r5, [r6, #-4016]
+	str	r5, [r4, #3464]
 	mul	r5, r5, r3
 	ldrh	r3, [r4, #58]
 	str	r5, [r4, #2504]
@@ -12384,19 +13031,19 @@ ftl_low_format:
 	ldrh	r2, [r4, #42]
 	mov	r1, #0
 	ldr	r0, [r4, #2324]
-	ldr	r5, .L1773+12
+	ldr	r5, .L1853+8
 	lsl	r2, r2, #1
 	sub	r5, r5, #240
 	bl	ftl_memset
 	movw	r2, #2588
 	mov	r3, #0
-	strh	r7, [r4, r2]	@ movhi
+	strh	r6, [r4, r2]	@ movhi
 	movw	r2, #2348
 	strh	r3, [r4, r2]	@ movhi
 	mov	r1, #255
 	ldrh	r2, [r4, #40]
 	strh	r3, [r5, #242]	@ movhi
-	mov	r8, r5
+	mov	r7, r5
 	str	r3, [r4, #2500]
 	strb	r3, [r4, #2594]
 	strb	r3, [r4, #2596]
@@ -12407,29 +13054,29 @@ ftl_low_format:
 	ldr	r0, [r4, #24]
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1765:
-	mov	r0, r8
+.L1845:
+	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1766
+	bne	.L1846
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
-	strh	r7, [r2, r3]	@ movhi
+	strh	r6, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1765
-.L1752:
-	ldr	ip, [r4, #3816]
+	b	.L1845
+.L1832:
+	ldr	ip, [r4, #3304]
 	mvn	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [ip, r3, lsl #2]
-	ldr	r1, [r4, #3808]
+	ldr	r1, [r4, #3308]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1751
-.L1754:
+	b	.L1831
+.L1834:
 	mov	r0, r6
 	mov	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -12437,8 +13084,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1753
-.L1755:
+	b	.L1833
+.L1835:
 	mov	r0, r5
 	bl	__udivsi3
 	ldr	r3, [r4, #132]
@@ -12448,61 +13095,61 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1757:
+.L1837:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1759
+	bls	.L1839
 	mov	r0, r5
 	mov	r1, #1
 	add	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1757
-.L1760:
+	b	.L1837
+.L1840:
 	mov	r1, #0
 	uxth	r0, r0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	mov	r0, r5
 	uxth	r6, r6
-	b	.L1756
-.L1766:
+	b	.L1836
+.L1846:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
-	mvn	r7, #0
+	mvn	r6, #0
 	str	r2, [r4, #2360]
 	add	r2, r2, #1
 	str	r2, [r4, #2540]
 	ldr	r2, [r4, #2324]
 	strh	r1, [r2, r3]	@ movhi
 	mov	r3, #0
-	ldr	r2, .L1773+16
+	ldr	r2, .L1853+12
 	movw	r1, #2396
 	strb	r3, [r4, #2402]
 	strh	r3, [r2, #2]	@ movhi
-	mov	r8, r2
+	mov	r7, r2
 	ldrh	r3, [r5]
 	mov	r5, r2
 	add	r3, r3, #1
 	strh	r3, [r4, r1]	@ movhi
 	mov	r3, #1
 	strb	r3, [r4, #2404]
-.L1767:
-	mov	r0, r8
+.L1847:
+	mov	r0, r7
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrh	r3, [r5]
-	bne	.L1768
+	bne	.L1848
 	ldr	r2, [r4, #2324]
 	lsl	r3, r3, #1
-	strh	r7, [r2, r3]	@ movhi
+	strh	r6, [r2, r3]	@ movhi
 	ldrh	r3, [r5]
 	add	r3, r3, #1
 	strh	r3, [r5]	@ movhi
-	b	.L1767
-.L1768:
+	b	.L1847
+.L1848:
 	ldr	r2, [r4, #2540]
 	lsl	r3, r3, #1
 	ldrh	r1, [r5, #4]
@@ -12515,10 +13162,10 @@ ftl_low_format:
 	movw	r3, #2444
 	strh	r5, [r4, r3]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L1773+20
+	ldr	r3, .L1853+16
 	mov	r2, #0
 	strh	r2, [r3, #2]	@ movhi
-	ldr	r2, [r6, #-4016]
+	ldr	r2, [r4, #3464]
 	strh	r5, [r3, #4]	@ movhi
 	strh	r0, [r3]	@ movhi
 	strh	r2, [r3, #6]	@ movhi
@@ -12530,77 +13177,21 @@ ftl_low_format:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
 	mov	r0, #0
-	ldreq	r3, .L1773+24
+	ldreq	r3, .L1853+20
 	moveq	r2, #1
 	streq	r2, [r3]
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1774:
+.L1854:
 	.align	2
-.L1773:
+.L1853:
 	.word	.LANCHOR0
 	.word	168778952
-	.word	.LANCHOR3
 	.word	.LANCHOR0+2588
 	.word	.LANCHOR0+2396
 	.word	.LANCHOR0+2576
 	.word	.LANCHOR2
 	.size	ftl_low_format, .-ftl_low_format
 	.align	2
-	.global	sftl_init
-	.syntax unified
-	.arm
-	.fpu softvfp
-	.type	sftl_init, %function
-sftl_init:
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 1, uses_anonymous_args = 0
-	mov	ip, sp
-	push	{r4, r5, fp, ip, lr, pc}
-	sub	fp, ip, #4
-	ldr	r4, .L1781
-	mvn	r3, #0
-	ldr	r5, .L1781+4
-	ldr	r1, .L1781+8
-	ldr	r0, .L1781+12
-	str	r3, [r5]
-	bl	printk
-	mov	r0, r4
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	r0, [r4, #36]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cmp	r0, #0
-	bne	.L1779
-	bl	FtlSysBlkInit
-	cmp	r0, #0
-	bne	.L1779
-	mov	r3, #1
-	str	r3, [r5]
-	movw	r3, #2344
-	ldrh	r3, [r4, r3]
-	cmp	r3, #15
-	bhi	.L1779
-	movw	r4, #8129
-.L1778:
-	mov	r1, #1
-	mov	r0, #0
-	bl	rk_ftl_garbage_collect
-	subs	r4, r4, #1
-	bne	.L1778
-.L1779:
-	mov	r0, #0
-	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1782:
-	.align	2
-.L1781:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LC70
-	.word	.LC71
-	.size	sftl_init, .-sftl_init
-	.align	2
 	.global	ftl_memcmp
 	.syntax unified
 	.arm
@@ -12627,18 +13218,18 @@ rk_sftl_vendor_dev_ops_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r2, .L1787
-	ldr	r3, [r2, #-4012]
+	ldr	r2, .L1859
+	ldr	r3, [r2, #3680]
 	cmp	r3, #0
-	streq	r0, [r2, #-4012]
+	streq	r0, [r2, #3680]
 	moveq	r0, r3
-	streq	r1, [r2, #-4008]
+	streq	r1, [r2, #3684]
 	mvnne	r0, #0
 	ldmfd	sp, {fp, sp, pc}
-.L1788:
+.L1860:
 	.align	2
-.L1787:
-	.word	.LANCHOR3
+.L1859:
+	.word	.LANCHOR0
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
 	.align	2
 	.global	rk_sftl_vendor_storage_init
@@ -12653,35 +13244,28 @@ rk_sftl_vendor_storage_init:
 	push	{r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 	sub	fp, ip, #4
 	mov	r0, #65536
-	ldr	r4, .L1798
+	ldr	r4, .L1870
 	bl	ftl_malloc
 	cmp	r0, #0
-	str	r0, [r4, #-4004]
+	str	r0, [r4, #3688]
 	mvneq	r9, #11
-	beq	.L1789
-	ldr	r8, .L1798+4
+	beq	.L1861
+	ldr	r8, .L1870+4
 	mov	r6, #0
 	mov	r5, r6
 	mov	r7, r6
-.L1793:
-	ldr	r3, [r4, #-4012]
+.L1865:
+	ldr	r3, [r4, #3680]
 	mov	r1, #128
-	ldr	r2, [r4, #-4004]
+	ldr	r2, [r4, #3688]
 	lsl	r0, r7, #7
 	blx	r3
 	subs	r9, r0, #0
-	bne	.L1791
-	ldr	r1, [r4, #-4004]
-	ldr	r0, .L1798+8
-	add	r2, r1, #61440
-	ldr	r3, [r1, #4]
-	ldr	r2, [r2, #4092]
-	ldr	r1, [r1]
-	bl	printk
-	ldr	r2, [r4, #-4004]
+	bne	.L1863
+	ldr	r2, [r4, #3688]
 	ldr	r3, [r2]
 	cmp	r3, r8
-	bne	.L1792
+	bne	.L1864
 	add	r1, r2, #61440
 	ldr	r3, [r2, #4]
 	ldr	r1, [r1, #4092]
@@ -12693,47 +13277,46 @@ rk_sftl_vendor_storage_init:
 	cmp	r1, #0
 	movne	r6, r7
 	movne	r5, r3
-.L1792:
+.L1864:
 	add	r7, r7, #1
 	cmp	r7, #2
-	bne	.L1793
+	bne	.L1865
 	cmp	r5, #0
-	beq	.L1794
-	ldr	r3, [r4, #-4012]
+	beq	.L1866
+	ldr	r3, [r4, #3680]
 	mov	r1, #128
 	lsl	r0, r6, #7
 	blx	r3
 	subs	r9, r0, #0
-	beq	.L1789
-.L1791:
-	ldr	r0, [r4, #-4004]
+	beq	.L1861
+.L1863:
+	ldr	r0, [r4, #3688]
 	mvn	r9, #0
 	bl	kfree
 	mov	r3, #0
-	str	r3, [r4, #-4004]
-	b	.L1789
-.L1794:
+	str	r3, [r4, #3688]
+	b	.L1861
+.L1866:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
-	ldr	r3, [r4, #-4004]
+	ldr	r3, [r4, #3688]
 	mov	r2, #1
 	add	r1, r3, #61440
 	str	r2, [r3, #4]
 	str	r8, [r3]
 	str	r2, [r1, #4092]
-	ldr	r2, .L1798+12
+	ldr	r2, .L1870+8
 	strh	r5, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1789:
+.L1861:
 	mov	r0, r9
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
-.L1799:
+.L1871:
 	.align	2
-.L1798:
-	.word	.LANCHOR3
+.L1870:
+	.word	.LANCHOR0
 	.word	1380668996
-	.word	.LC106
 	.word	-1032
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
@@ -12748,26 +13331,26 @@ rk_sftl_vendor_read:
 	mov	ip, sp
 	push	{r4, r5, fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r3, .L1806
+	ldr	r3, .L1878
 	mov	r4, r0
 	mov	r0, r1
-	ldr	ip, [r3, #-4004]
+	ldr	ip, [r3, #3688]
 	cmp	ip, #0
 	ldrhne	lr, [ip, #10]
 	movne	r3, #0
-	bne	.L1802
-.L1805:
+	bne	.L1874
+.L1877:
 	mvn	r0, #0
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1803:
+.L1875:
 	add	r3, r3, #1
-.L1802:
+.L1874:
 	cmp	r3, lr
-	bcs	.L1805
+	bcs	.L1877
 	add	r1, ip, r3, lsl #3
 	ldrh	r5, [r1, #16]
 	cmp	r5, r4
-	bne	.L1803
+	bne	.L1875
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -12778,10 +13361,10 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	ldmfd	sp, {r4, r5, fp, sp, pc}
-.L1807:
+.L1879:
 	.align	2
-.L1806:
-	.word	.LANCHOR3
+.L1878:
+	.word	.LANCHOR0
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -12797,23 +13380,23 @@ rk_sftl_vendor_write:
 	sub	fp, ip, #4
 	sub	sp, sp, #24
 	mov	ip, r1
-	ldr	r8, .L1827
+	ldr	r8, .L1899
 	mov	r9, r2
-	ldr	r4, [r8, #-4004]
+	ldr	r4, [r8, #3688]
 	cmp	r4, #0
-	beq	.L1823
+	beq	.L1895
 	ldrh	r2, [r4, #10]
 	add	r7, r9, #63
 	ldrh	r3, [r4, #8]
 	bic	r7, r7, #63
 	mov	r5, #0
 	str	r3, [fp, #-44]
-.L1810:
+.L1882:
 	cmp	r5, r2
-	bcc	.L1818
+	bcc	.L1890
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1823
+	bhi	.L1895
 	add	r3, r4, r2, lsl #3
 	uxth	r7, r7
 	strh	r0, [r3, #16]	@ movhi
@@ -12844,32 +13427,32 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, [r8, #-4008]
-	b	.L1826
-.L1818:
+	ldr	r3, [r8, #3684]
+	b	.L1898
+.L1890:
 	add	r6, r4, r5, lsl #3
 	ldrh	r3, [r6, #16]
 	cmp	r3, r0
 	str	r3, [fp, #-48]
-	bne	.L1811
+	bne	.L1883
 	ldrh	r1, [r6, #20]
 	add	r3, r4, #1024
 	add	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r9, r1
 	str	r1, [fp, #-52]
-	bls	.L1812
+	bls	.L1884
 	ldrh	r1, [r4, #14]
 	cmp	r7, r1
-	bhi	.L1823
+	bhi	.L1895
 	ldrh	r8, [r6, #18]
 	sub	r2, r2, #1
 	str	r2, [fp, #-56]
-.L1813:
+.L1885:
 	ldr	r2, [fp, #-56]
 	add	r6, r6, #8
 	cmp	r5, r2
-	bcc	.L1814
+	bcc	.L1886
 	ldrh	r2, [fp, #-48]
 	add	r5, r4, r5, lsl #3
 	uxth	r8, r8
@@ -12888,7 +13471,7 @@ rk_sftl_vendor_write:
 	strh	r8, [r4, #12]	@ movhi
 	add	r7, r7, r3
 	strh	r7, [r4, #14]	@ movhi
-.L1815:
+.L1887:
 	ldr	r3, [r4, #4]
 	add	r2, r4, #61440
 	add	r3, r3, #1
@@ -12900,19 +13483,19 @@ rk_sftl_vendor_write:
 	cmp	r3, #1
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1827
-	ldr	r3, [r3, #-4008]
-.L1826:
+	ldr	r3, .L1899
+	ldr	r3, [r3, #3684]
+.L1898:
 	ldr	r0, [fp, #-44]
 	mov	r2, r4
 	mov	r1, #128
 	lsl	r0, r0, #7
 	blx	r3
 	mov	r0, #0
-.L1808:
+.L1880:
 	sub	sp, fp, #40
 	ldmfd	sp, {r4, r5, r6, r7, r8, r9, r10, fp, sp, pc}
-.L1814:
+.L1886:
 	ldrh	r10, [r6, #20]
 	add	r0, r3, r8
 	ldrh	r2, [r6, #16]
@@ -12931,8 +13514,8 @@ rk_sftl_vendor_write:
 	bl	memcpy
 	ldr	ip, [fp, #-64]
 	ldr	r3, [fp, #-60]
-	b	.L1813
-.L1812:
+	b	.L1885
+.L1884:
 	add	r5, r4, r5, lsl #3
 	mov	r2, r9
 	mov	r1, ip
@@ -12940,17 +13523,17 @@ rk_sftl_vendor_write:
 	add	r0, r3, r0
 	bl	memcpy
 	strh	r9, [r6, #20]	@ movhi
-	b	.L1815
-.L1811:
+	b	.L1887
+.L1883:
 	add	r5, r5, #1
-	b	.L1810
-.L1823:
+	b	.L1882
+.L1895:
 	mvn	r0, #0
-	b	.L1808
-.L1828:
+	b	.L1880
+.L1900:
 	.align	2
-.L1827:
-	.word	.LANCHOR3
+.L1899:
+	.word	.LANCHOR0
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
@@ -12970,18 +13553,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	subs	r4, r0, #0
 	mvneq	r5, #0
-	beq	.L1829
-	ldr	r3, .L1854
+	beq	.L1901
+	ldr	r3, .L1926
 	cmp	r6, r3
-	beq	.L1832
+	beq	.L1904
 	add	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1833
-.L1849:
+	beq	.L1905
+.L1921:
 	mvn	r5, #13
-	b	.L1831
-.L1832:
-	ldr	r6, .L1854+4
+	b	.L1903
+.L1904:
+	ldr	r6, .L1926+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -12992,31 +13575,31 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1839
+	bne	.L1911
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1849
+	bne	.L1921
 	ldr	r2, [r4]
-	ldr	r3, .L1854+8
+	ldr	r3, .L1926+8
 	cmp	r2, r3
-	beq	.L1837
-.L1838:
+	beq	.L1909
+.L1910:
 	mvn	r5, #0
-.L1831:
+.L1903:
 	mov	r0, r4
 	bl	kfree
-.L1829:
+.L1901:
 	mov	r0, r5
 	ldmfd	sp, {r4, r5, r6, fp, sp, pc}
-.L1837:
+.L1909:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	cmn	r0, #1
-	beq	.L1838
+	beq	.L1910
 	mov	r3, sp
 	uxth	r2, r0
 	and	r6, r6, r3
@@ -13030,15 +13613,15 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1849
+	bne	.L1921
 	mov	r0, r5
 	mov	r1, r4
 	bl	arm_copy_to_user
 	subs	r5, r0, #0
-	beq	.L1831
-	b	.L1849
-.L1833:
-	ldr	r6, .L1854+4
+	beq	.L1903
+	b	.L1921
+.L1905:
+	ldr	r6, .L1926+4
 	mov	r3, sp
 	and	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13049,20 +13632,20 @@ rk_sftl_vendor_storage_ioctl:
 	.arm
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1839
+	bne	.L1911
 	mov	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1849
+	bne	.L1921
 	ldr	r2, [r4]
-	ldr	r3, .L1854+8
+	ldr	r3, .L1926+8
 	cmp	r2, r3
-	bne	.L1838
+	bne	.L1910
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1838
+	bhi	.L1910
 	mov	r3, sp
 	add	r2, r2, #8
 	and	r6, r6, r3
@@ -13076,26 +13659,26 @@ rk_sftl_vendor_storage_ioctl:
 	cmp	r3, #0
 	movne	r1, r2
 	movne	r0, r4
-	bne	.L1853
+	bne	.L1925
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1849
+	bne	.L1921
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
 	mov	r5, r0
-	b	.L1831
-.L1839:
+	b	.L1903
+.L1911:
 	mov	r1, #8
-.L1853:
+.L1925:
 	bl	__memzero
-	b	.L1849
-.L1855:
+	b	.L1921
+.L1927:
 	.align	2
-.L1854:
+.L1926:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13112,15 +13695,14 @@ rk_sftl_vendor_register:
 	mov	ip, sp
 	push	{fp, ip, lr, pc}
 	sub	fp, ip, #4
-	ldr	r0, .L1857
+	ldr	r0, .L1929
 	bl	misc_register
 	ldmfd	sp, {fp, sp, pc}
-.L1858:
+.L1930:
 	.align	2
-.L1857:
+.L1929:
 	.word	.LANCHOR2+12
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
-	.global	ftl_temp_buf
 	.global	g_nand_ops
 	.global	g_nand_phy_info
 	.global	gc_ink_free_return_value
@@ -13135,6 +13717,9 @@ rk_sftl_vendor_register:
 	.global	g_recovery_ppa_tbl
 	.global	g_recovery_page_min_ver
 	.global	g_recovery_page_num
+	.global	sftl_nand_check_spare_buf
+	.global	sftl_temp_buf
+	.global	sftl_nand_check_buf
 	.global	g_cur_erase_blk
 	.global	g_gc_skip_write_count
 	.global	g_gc_head_data_block_count
@@ -13218,7 +13803,6 @@ rk_sftl_vendor_register:
 	.global	p_sys_data_buf_1
 	.global	p_sys_data_buf
 	.global	p_plane_order_table
-	.global	g_req_cache
 	.global	req_gc_dst
 	.global	req_gc
 	.global	req_erase
@@ -13271,143 +13855,151 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.3927, %object
-	.size	__func__.3927, 17
-__func__.3927:
+	.type	__func__.4011, %object
+	.size	__func__.4011, 17
+__func__.4011:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.3922, %object
-	.size	__func__.3922, 17
-__func__.3922:
+	.type	__func__.4006, %object
+	.size	__func__.4006, 17
+__func__.4006:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.3958, %object
-	.size	__func__.3958, 17
-__func__.3958:
+	.type	__func__.4042, %object
+	.size	__func__.4042, 17
+__func__.4042:
 	.ascii	"List_remove_node\000"
-	.type	__func__.3990, %object
-	.size	__func__.3990, 22
-__func__.3990:
+	.type	__func__.4074, %object
+	.size	__func__.4074, 22
+__func__.4074:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.4096, %object
-	.size	__func__.4096, 22
-__func__.4096:
+	.type	__func__.4181, %object
+	.size	__func__.4181, 22
+__func__.4181:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.4419, %object
-	.size	__func__.4419, 16
-__func__.4419:
+	.type	__func__.4504, %object
+	.size	__func__.4504, 16
+__func__.4504:
 	.ascii	"make_superblock\000"
-	.type	__func__.4594, %object
-	.size	__func__.4594, 19
-__func__.4594:
+	.type	__func__.4679, %object
+	.size	__func__.4679, 19
+__func__.4679:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.14923, %object
-	.size	__func__.14923, 15
-__func__.14923:
-	.ascii	"FlashReadPages\000"
-	.type	__func__.14940, %object
-	.size	__func__.14940, 15
-__func__.14940:
-	.ascii	"FlashProgPages\000"
-	.type	__func__.4032, %object
-	.size	__func__.4032, 26
-__func__.4032:
+	.type	__func__.15073, %object
+	.size	__func__.15073, 17
+__func__.15073:
+	.ascii	"FlashEraseBlocks\000"
+	.type	__func__.4116, %object
+	.size	__func__.4116, 26
+__func__.4116:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.3536, %object
-	.size	__func__.3536, 11
-__func__.3536:
+	.type	__func__.3543, %object
+	.size	__func__.3543, 11
+__func__.3543:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.3762, %object
-	.size	__func__.3762, 14
-__func__.3762:
+	.type	__func__.3848, %object
+	.size	__func__.3848, 14
+__func__.3848:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.3999, %object
-	.size	__func__.3999, 16
-__func__.3999:
-	.ascii	"load_l2p_region\000"
-	.type	__func__.4057, %object
-	.size	__func__.4057, 31
-__func__.4057:
+	.type	__func__.4525, %object
+	.size	__func__.4525, 18
+__func__.4525:
+	.ascii	"SupperBlkListInit\000"
+	.type	__func__.15032, %object
+	.size	__func__.15032, 15
+__func__.15032:
+	.ascii	"FlashReadPages\000"
+	.type	__func__.4293, %object
+	.size	__func__.4293, 14
+__func__.4293:
+	.ascii	"FtlScanSysBlk\000"
+	.type	__func__.3891, %object
+	.size	__func__.3891, 11
+__func__.3891:
+	.ascii	"FtlLoadBbt\000"
+	.type	__func__.4350, %object
+	.size	__func__.4350, 15
+__func__.4350:
+	.ascii	"FtlLoadSysInfo\000"
+	.type	__func__.15050, %object
+	.size	__func__.15050, 15
+__func__.15050:
+	.ascii	"FlashProgPages\000"
+	.type	__func__.4142, %object
+	.size	__func__.4142, 31
+__func__.4142:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.4071, %object
-	.size	__func__.4071, 16
-__func__.4071:
+	.type	__func__.4156, %object
+	.size	__func__.4156, 16
+__func__.4156:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.4043, %object
-	.size	__func__.4043, 15
-__func__.4043:
+	.type	__func__.4083, %object
+	.size	__func__.4083, 16
+__func__.4083:
+	.ascii	"load_l2p_region\000"
+	.type	__func__.4127, %object
+	.size	__func__.4127, 15
+__func__.4127:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.4113, %object
-	.size	__func__.4113, 9
-__func__.4113:
+	.type	__func__.4198, %object
+	.size	__func__.4198, 9
+__func__.4198:
 	.ascii	"log2phys\000"
-	.type	__func__.4328, %object
-	.size	__func__.4328, 16
-__func__.4328:
+	.type	__func__.4413, %object
+	.size	__func__.4413, 16
+__func__.4413:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.4481, %object
-	.size	__func__.4481, 14
-__func__.4481:
-	.ascii	"ftl_check_vpc\000"
-	.type	__func__.4208, %object
-	.size	__func__.4208, 14
-__func__.4208:
-	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.4440, %object
-	.size	__func__.4440, 18
-__func__.4440:
-	.ascii	"SupperBlkListInit\000"
 	.type	__func__.4566, %object
-	.size	__func__.4566, 25
+	.size	__func__.4566, 14
 __func__.4566:
+	.ascii	"ftl_check_vpc\000"
+	.type	__func__.4651, %object
+	.size	__func__.4651, 25
+__func__.4651:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.4607, %object
-	.size	__func__.4607, 16
-__func__.4607:
+	.type	__func__.4692, %object
+	.size	__func__.4692, 16
+__func__.4692:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.4614, %object
-	.size	__func__.4614, 20
-__func__.4614:
+	.type	__func__.4699, %object
+	.size	__func__.4699, 20
+__func__.4699:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.4362, %object
-	.size	__func__.4362, 22
-__func__.4362:
+	.type	__func__.4447, %object
+	.size	__func__.4447, 22
+__func__.4447:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.3805, %object
-	.size	__func__.3805, 11
-__func__.3805:
-	.ascii	"FtlLoadBbt\000"
-	.type	__func__.4186, %object
-	.size	__func__.4186, 15
-__func__.4186:
+	.type	__func__.4271, %object
+	.size	__func__.4271, 15
+__func__.4271:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.4465, %object
-	.size	__func__.4465, 21
-__func__.4465:
+	.type	__func__.4550, %object
+	.size	__func__.4550, 21
+__func__.4550:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.4587, %object
-	.size	__func__.4587, 29
-__func__.4587:
+	.type	__func__.4672, %object
+	.size	__func__.4672, 29
+__func__.4672:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.3660, %object
-	.size	__func__.3660, 13
-__func__.3660:
+	.type	__func__.3667, %object
+	.size	__func__.3667, 13
+__func__.3667:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.4684, %object
-	.size	__func__.4684, 19
-__func__.4684:
+	.type	__func__.4769, %object
+	.size	__func__.4769, 19
+__func__.4769:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.4790, %object
-	.size	__func__.4790, 23
-__func__.4790:
+	.type	__func__.4880, %object
+	.size	__func__.4880, 23
+__func__.4880:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.3688, %object
-	.size	__func__.3688, 9
-__func__.3688:
+	.type	__func__.3695, %object
+	.size	__func__.3695, 9
+__func__.3695:
 	.ascii	"FtlWrite\000"
-	.type	__func__.4265, %object
-	.size	__func__.4265, 15
-__func__.4265:
-	.ascii	"FtlLoadSysInfo\000"
-	.space	2
+	.type	__func__.3807, %object
+	.size	__func__.3807, 14
+__func__.3807:
+	.ascii	"FtlWriteToIDB\000"
+	.space	3
 	.type	rk_sftl_vendor_storage_fops, %object
 	.size	rk_sftl_vendor_storage_fops, 108
 rk_sftl_vendor_storage_fops:
@@ -13435,13 +14027,12 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC107
+	.word	.LC118
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
 	.align	2
 	.set	.LANCHOR0,. + 0
-	.set	.LANCHOR3,. + 8184
 	.type	g_nand_phy_info, %object
 	.size	g_nand_phy_info, 24
 g_nand_phy_info:
@@ -13838,42 +14429,10 @@ g_gc_bad_block_gc_index:
 	.size	g_nand_ops, 16
 g_nand_ops:
 	.space	16
-	.type	req_sys, %object
-	.size	req_sys, 20
-req_sys:
-	.space	20
-	.type	p_sys_data_buf, %object
-	.size	p_sys_data_buf, 4
-p_sys_data_buf:
-	.space	4
-	.type	p_sys_spare_buf, %object
-	.size	p_sys_spare_buf, 4
-p_sys_spare_buf:
-	.space	4
-	.type	check_spare_buf, %object
-	.size	check_spare_buf, 512
-check_spare_buf:
-	.space	512
 	.type	req_erase, %object
 	.size	req_erase, 4
 req_erase:
 	.space	4
-	.type	g_cur_erase_blk, %object
-	.size	g_cur_erase_blk, 4
-g_cur_erase_blk:
-	.space	4
-	.type	p_io_data_buf_1, %object
-	.size	p_io_data_buf_1, 4
-p_io_data_buf_1:
-	.space	4
-	.type	p_io_spare_buf, %object
-	.size	p_io_spare_buf, 4
-p_io_spare_buf:
-	.space	4
-	.type	p_io_data_buf_0, %object
-	.size	p_io_data_buf_0, 4
-p_io_data_buf_0:
-	.space	4
 	.type	g_in_gc_progress, %object
 	.size	g_in_gc_progress, 4
 g_in_gc_progress:
@@ -13886,6 +14445,10 @@ g_gc_head_data_block:
 	.size	g_gc_head_data_block_count, 4
 g_gc_head_data_block_count:
 	.space	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.space	4
 	.type	req_read, %object
 	.size	req_read, 4
 req_read:
@@ -13898,6 +14461,10 @@ req_gc_dst:
 	.size	req_prgm, 4
 req_prgm:
 	.space	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 4
+p_sys_data_buf:
+	.space	4
 	.type	p_sys_data_buf_1, %object
 	.size	p_sys_data_buf_1, 4
 p_sys_data_buf_1:
@@ -13906,6 +14473,34 @@ p_sys_data_buf_1:
 	.size	p_vendor_data_buf, 4
 p_vendor_data_buf:
 	.space	4
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 4
+p_io_data_buf_0:
+	.space	4
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 4
+p_io_data_buf_1:
+	.space	4
+	.type	sftl_nand_check_buf, %object
+	.size	sftl_nand_check_buf, 4
+sftl_nand_check_buf:
+	.space	4
+	.type	sftl_temp_buf, %object
+	.size	sftl_temp_buf, 4
+sftl_temp_buf:
+	.space	4
+	.type	sftl_nand_check_spare_buf, %object
+	.size	sftl_nand_check_spare_buf, 4
+sftl_nand_check_spare_buf:
+	.space	4
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 4
+p_sys_spare_buf:
+	.space	4
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 4
+p_io_spare_buf:
+	.space	4
 	.type	g_ect_tbl_info_size, %object
 	.size	g_ect_tbl_info_size, 2
 g_ect_tbl_info_size:
@@ -13961,27 +14556,17 @@ c_ftl_nand_bbm_buf_size:
 	.space	2
 	.space	2
 	.type	gL2pMapInfo, %object
-	.size	gL2pMapInfo, 40
+	.size	gL2pMapInfo, 44
 gL2pMapInfo:
-	.space	40
+	.space	44
 	.type	g_totle_map_block, %object
 	.size	g_totle_map_block, 2
 g_totle_map_block:
 	.space	2
-	.space	2
-	.type	gVendorBlkInfo, %object
-	.size	gVendorBlkInfo, 40
-gVendorBlkInfo:
-	.space	40
-	.type	g_req_cache, %object
-	.size	g_req_cache, 4
-g_req_cache:
-	.space	4
 	.type	g_tmp_data_superblock_id, %object
 	.size	g_tmp_data_superblock_id, 2
 g_tmp_data_superblock_id:
 	.space	2
-	.space	2
 	.type	g_totle_swl_count, %object
 	.size	g_totle_swl_count, 4
 g_totle_swl_count:
@@ -13994,6 +14579,18 @@ ftl_gc_temp_power_lost_recovery_flag:
 	.size	g_recovery_page_min_ver, 4
 g_recovery_page_min_ver:
 	.space	4
+	.type	req_sys, %object
+	.size	req_sys, 20
+req_sys:
+	.space	20
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.space	4
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
 	.type	g_power_lost_recovery_flag, %object
 	.size	g_power_lost_recovery_flag, 2
 g_power_lost_recovery_flag:
@@ -14012,10 +14609,6 @@ g_recovery_ppa_tbl:
 g_ect_tbl_power_up_flush:
 	.space	2
 	.space	2
-	.type	gp_last_act_superblock, %object
-	.size	gp_last_act_superblock, 4
-gp_last_act_superblock:
-	.space	4
 	.type	gc_discard_updated, %object
 	.size	gc_discard_updated, 4
 gc_discard_updated:
@@ -14037,9 +14630,17 @@ g_gc_cur_blk_max_valid_pages:
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
 	.space	4
-	.type	g_MaxLbn, %object
-	.size	g_MaxLbn, 4
-g_MaxLbn:
+	.type	idb_need_write_back, %object
+	.size	idb_need_write_back, 4
+idb_need_write_back:
+	.space	4
+	.type	idb_buf, %object
+	.size	idb_buf, 4
+idb_buf:
+	.space	4
+	.type	gp_flash_check_buf, %object
+	.size	gp_flash_check_buf, 4
+gp_flash_check_buf:
 	.space	4
 	.type	_flash_read, %object
 	.size	_flash_read, 4
@@ -14053,18 +14654,14 @@ _flash_write:
 	.size	g_vendor, 4
 g_vendor:
 	.space	4
-	.type	ftl_temp_buf, %object
-	.size	ftl_temp_buf, 4096
-ftl_temp_buf:
-	.space	4096
-	.type	check_buf, %object
-	.size	check_buf, 4096
-check_buf:
-	.space	4096
 	.type	check_vpc_table, %object
 	.size	check_vpc_table, 16384
 check_vpc_table:
 	.space	16384
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 4
+gp_last_act_superblock:
+	.space	4
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
 	.ascii	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\012"
@@ -14208,7 +14805,7 @@ check_vpc_table:
 .LC69:
 	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
 .LC70:
-	.ascii	"SFTL version: 5.0.44 20180713\000"
+	.ascii	"SFTL version: 5.0.48 20180930\000"
 .LC71:
 	.ascii	"%s\012\000"
 .LC72:
@@ -14219,70 +14816,92 @@ check_vpc_table:
 .LC74:
 	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
 .LC75:
-	.ascii	"\0014\000"
+	.ascii	"%s %p + 0x%x:\000"
 .LC76:
-	.ascii	"prog read error: = %x\012\000"
+	.ascii	"0x%08x,\000"
 .LC77:
-	.ascii	"prog read s error: = %x %x %x\012\000"
+	.ascii	"0x%04x,\000"
 .LC78:
-	.ascii	"prog read d error: = %x %x %x\012\000"
+	.ascii	"0x%02x,\000"
 .LC79:
-	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+	.ascii	"\012\000"
 .LC80:
-	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
-	.ascii	"\000"
+	.ascii	"%s: addr: %x is in id block!!!!!!!!!!\012\000"
 .LC81:
-	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
+	.ascii	"not free: w: d:\000"
 .LC82:
-	.ascii	"%s error allocating memory. return -1\012\000"
+	.ascii	"not free: w: s:\000"
 .LC83:
-	.ascii	"region_id = %x phyAddr = %x\012\000"
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
+	.ascii	"\000"
 .LC84:
-	.ascii	"spare:\000"
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
 .LC85:
-	.ascii	"map_ppn:\000"
+	.ascii	"%s error allocating memory. return -1\012\000"
 .LC86:
-	.ascii	"FtlMapWritePage error = %x \012\000"
+	.ascii	"prog read error: = %x\012\000"
 .LC87:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"prog read s error: = %x %x %x\012\000"
 .LC88:
-	.ascii	"ftl_scan_all_data = %x\012\000"
+	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC89:
-	.ascii	"scan lpa = %x ppa= %x\012\000"
+	.ascii	"FtlMapWritePage error = %x \012\000"
 .LC90:
-	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
-	.ascii	"\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC91:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC92:
-	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
+	.ascii	"spare:\000"
 .LC93:
-	.ascii	"free blk vpc error %x = %x  %x\012\000"
+	.ascii	"map_ppn:\000"
 .LC94:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC95:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"...%s enter...\012\000"
 .LC96:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC97:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC98:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"ftl_scan_all_data = %x\012\000"
 .LC99:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"scan lpa = %x ppa= %x\012\000"
 .LC100:
-	.ascii	"no ect\000"
+	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC101:
-	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
 .LC102:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC103:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC104:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC105:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC106:
-	.ascii	"\0013vendor storage %x,%x,%x\012\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC107:
-	.ascii	"vendor_storage\000"
\ No newline at end of file
+	.ascii	"spuer block %x vpn is 0\012 \000"
+.LC108:
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+.LC109:
+	.ascii	"no ect\000"
+.LC110:
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+.LC111:
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+.LC112:
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+.LC113:
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+.LC114:
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+.LC115:
+	.ascii	"write_idblock fix data %x %x %x\012\000"
+.LC116:
+	.ascii	"write_idblock fail! %x %x %x %x\012\000"
+.LC117:
+	.ascii	"%s idb buffer alloc fail\012\000"
+.LC118:
+	.ascii	"vendor_storage\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v7_thumb.S b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
index 0ea7136a78fc..95aa4302e257 100644
--- a/drivers/rkflash/rk_sftl_arm_v7_thumb.S
+++ b/drivers/rkflash/rk_sftl_arm_v7_thumb.S
@@ -2,7 +2,7 @@
 
 /*
  * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-07-19
+ * date: 2018-09-30
  */
 	.arch armv7-a
 	.eabi_attribute 20, 1
@@ -339,6 +339,22 @@ IsBlkInVendorPart:
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
 	.align	1
+	.global	FtlCacheWriteBack
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r0, #0
+	bx	lr
+	.fnend
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	1
 	.global	sftl_get_density
 	.syntax unified
 	.thumb
@@ -350,12 +366,12 @@ sftl_get_density:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L37
+	ldr	r3, .L38
 	ldr	r0, [r3, #140]
 	bx	lr
-.L38:
+.L39:
 	.align	2
-.L37:
+.L38:
 	.word	.LANCHOR0
 	.fnend
 	.size	sftl_get_density, .-sftl_get_density
@@ -375,7 +391,7 @@ FtlBbmMapBadBlock:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r5, r0
-	ldr	r4, .L40
+	ldr	r4, .L41
 	ldrh	r7, [r4, #98]
 	mov	r1, r7
 	bl	__aeabi_uidiv
@@ -396,8 +412,8 @@ FtlBbmMapBadBlock:
 	mov	r2, r6
 	str	r0, [sp]
 	mov	r1, r5
-	ldr	r0, .L40+4
-	bl	printk
+	ldr	r0, .L41+4
+	bl	sftl_printk
 	ldrh	r3, [r4, #158]
 	movs	r0, #0
 	adds	r3, r3, #1
@@ -405,9 +421,9 @@ FtlBbmMapBadBlock:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L41:
+.L42:
 	.align	2
-.L40:
+.L41:
 	.word	.LANCHOR0
 	.word	.LC0
 	.fnend
@@ -426,7 +442,7 @@ FtlBbmIsBadBlock:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r5, .L43
+	ldr	r5, .L44
 	ldrh	r6, [r5, #98]
 	mov	r1, r6
 	bl	__aeabi_uidivmod
@@ -443,9 +459,9 @@ FtlBbmIsBadBlock:
 	lsrs	r0, r0, r4
 	and	r0, r0, #1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L44:
+.L45:
 	.align	2
-.L43:
+.L44:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -476,7 +492,7 @@ FtlBbtMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L47
+	ldr	r0, .L48
 	movw	r3, #65535
 	movs	r2, #16
 	movs	r1, #255
@@ -485,9 +501,9 @@ FtlBbtMemInit:
 	strh	r3, [r0, #158]	@ movhi
 	adds	r0, r0, #164
 	b	memset
-.L48:
+.L49:
 	.align	2
-.L47:
+.L48:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
@@ -502,7 +518,7 @@ FtlBbtCalcTotleCnt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L56
+	ldr	r3, .L57
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
@@ -510,23 +526,23 @@ FtlBbtCalcTotleCnt:
 	ldrh	r2, [r3, #98]
 	ldrh	r6, [r3, #54]
 	muls	r6, r2, r6
-.L50:
+.L51:
 	uxth	r0, r5
 	cmp	r0, r6
-	blt	.L52
+	blt	.L53
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L52:
+.L53:
 	bl	FtlBbmIsBadBlock
-	cbz	r0, .L51
+	cbz	r0, .L52
 	adds	r4, r4, #1
 	uxth	r4, r4
-.L51:
+.L52:
 	adds	r5, r5, #1
-	b	.L50
-.L57:
+	b	.L51
+.L58:
 	.align	2
-.L56:
+.L57:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -544,7 +560,7 @@ V2P_block:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r5, r1
-	ldr	r4, .L59
+	ldr	r4, .L60
 	mov	r7, r0
 	ldrh	r6, [r4, #56]
 	mov	r1, r6
@@ -559,9 +575,9 @@ V2P_block:
 	add	r0, r0, r4
 	uxth	r0, r0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L60:
+.L61:
 	.align	2
-.L59:
+.L60:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -576,7 +592,7 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L62
+	ldr	r3, .L63
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
@@ -590,9 +606,9 @@ P2V_plane:
 	add	r1, r1, r4
 	uxth	r0, r1
 	pop	{r4, r5, r6, pc}
-.L63:
+.L64:
 	.align	2
-.L62:
+.L63:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -609,7 +625,7 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L65
+	ldr	r4, .L66
 	ldrh	r1, [r4, #98]
 	bl	__aeabi_uidivmod
 	uxth	r0, r1
@@ -617,9 +633,9 @@ P2V_block_in_plane:
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	pop	{r4, pc}
-.L66:
+.L67:
 	.align	2
-.L65:
+.L66:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
@@ -636,14 +652,14 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L68
+	bls	.L69
 	subs	r0, r0, r1
 	cmp	r0, #-2147483648
 	ite	hi
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L68:
+.L69:
 	subs	r0, r1, r0
 	cmp	r0, #-2147483648
 	ite	ls
@@ -663,7 +679,7 @@ FtlFreeSysBlkQueueInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L71
+	ldr	r3, .L72
 	mov	r1, #2048
 	push	{r4, lr}
 	.save {r4, lr}
@@ -676,9 +692,9 @@ FtlFreeSysBlkQueueInit:
 	bl	__memzero
 	mov	r0, r4
 	pop	{r4, pc}
-.L72:
+.L73:
 	.align	2
-.L71:
+.L72:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
@@ -694,14 +710,14 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L74
+	ldr	r3, .L75
 	ldrh	r0, [r3, #218]
 	clz	r0, r0
 	lsrs	r0, r0, #5
 	bx	lr
-.L75:
+.L76:
 	.align	2
-.L74:
+.L75:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -717,15 +733,15 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L77
+	ldr	r3, .L78
 	ldrh	r0, [r3, #218]
 	sub	r3, r0, #1024
 	rsbs	r0, r3, #0
 	adcs	r0, r0, r3
 	bx	lr
-.L78:
+.L79:
 	.align	2
-.L77:
+.L78:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -740,28 +756,28 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L88
+	ldr	r3, .L89
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldrh	r2, [r3, #218]
-	cbz	r2, .L79
+	cbz	r2, .L80
 	ldrh	r5, [r3, #2296]
 	movs	r0, #0
 	ldrh	r1, [r3, #214]
 	mov	r6, r0
 	ldrh	r2, [r3, #216]
 	and	r5, r5, #31
-.L81:
+.L82:
 	uxth	r4, r0
 	adds	r0, r0, #1
 	cmp	r5, r4
-	bgt	.L82
-	cbz	r6, .L79
+	bgt	.L83
+	cbz	r6, .L80
 	strh	r1, [r3, #214]	@ movhi
 	strh	r2, [r3, #216]	@ movhi
-.L79:
+.L80:
 	pop	{r4, r5, r6, pc}
-.L82:
+.L83:
 	add	r4, r3, r1, lsl #1
 	adds	r1, r1, #1
 	ubfx	r1, r1, #0, #10
@@ -771,10 +787,10 @@ FtlFreeSysBLkSort:
 	movs	r6, #1
 	add	r2, r2, r6
 	ubfx	r2, r2, #0, #10
-	b	.L81
-.L89:
+	b	.L82
+.L90:
 	.align	2
-.L88:
+.L89:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
@@ -789,35 +805,35 @@ IsInFreeQueue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L96
+	ldr	r3, .L97
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	ldrh	r4, [r3, #218]
 	cmp	r4, #1024
-	beq	.L94
+	beq	.L95
 	ldrh	r5, [r3, #214]
 	movs	r1, #0
-.L92:
+.L93:
 	cmp	r1, r4
-	bcc	.L93
-.L94:
+	bcc	.L94
+.L95:
 	movs	r0, #0
 	pop	{r4, r5, pc}
-.L93:
+.L94:
 	adds	r2, r1, r5
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
 	ldrh	r2, [r2, #220]
 	cmp	r2, r0
-	beq	.L95
+	beq	.L96
 	adds	r1, r1, #1
-	b	.L92
-.L95:
+	b	.L93
+.L96:
 	movs	r0, #1
 	pop	{r4, r5, pc}
-.L97:
+.L98:
 	.align	2
-.L96:
+.L97:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -835,11 +851,11 @@ insert_data_list:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r2, .L113
+	ldr	r2, .L114
 	ldrh	r3, [r2, #40]
 	mov	r5, r2
 	cmp	r3, r0
-	bls	.L100
+	bls	.L101
 	movs	r4, #6
 	ldr	ip, [r2, #2316]
 	muls	r4, r0, r4
@@ -848,27 +864,27 @@ insert_data_list:
 	strh	r3, [r1, #2]	@ movhi
 	strh	r3, [ip, r4]	@ movhi
 	ldr	r3, [r2, #2320]
-	cbnz	r3, .L101
+	cbnz	r3, .L102
 	str	r1, [r2, #2320]
-.L100:
+.L101:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L101:
+.L102:
 	ldrh	r6, [r1, #4]
 	lsl	r10, r0, #1
 	ldr	r8, [r2, #2324]
 	ldrh	r2, [r8, r0, lsl #1]
 	cmp	r6, #0
-	beq	.L111
+	beq	.L112
 	muls	r6, r2, r6
-.L102:
+.L103:
 	ldr	lr, [r5, #2316]
 	ldrh	r7, [r5, #40]
 	sub	r2, r3, lr
 	asr	r9, r2, #1
-	ldr	r2, .L113+4
+	ldr	r2, .L114+4
 	str	r7, [sp]
 	mul	r2, r2, r9
 	ldr	r9, [r5, #2328]
@@ -876,30 +892,30 @@ insert_data_list:
 	uxth	r2, r2
 	str	r5, [sp, #4]
 	movs	r5, #0
-.L109:
+.L110:
 	adds	r5, r5, #1
 	ldr	r7, [sp]
 	uxth	r5, r5
 	cmp	r5, r7
-	bhi	.L100
+	bhi	.L101
 	cmp	r0, r2
-	beq	.L100
+	beq	.L101
 	ldrh	r7, [r3, #4]
 	lsl	r10, r2, #1
 	ldrh	fp, [r8, r2, lsl #1]
-	cbz	r7, .L112
+	cbz	r7, .L113
 	mul	r7, r7, fp
-.L104:
+.L105:
 	cmp	r6, r7
-	bne	.L105
+	bne	.L106
 	ldr	r7, [sp, #4]
 	ldrh	r10, [r9, r10]
 	ldrh	r7, [r7]
 	cmp	r10, r7
-	bcc	.L107
-.L106:
+	bcc	.L108
+.L107:
 	strh	r2, [ip, r4]	@ movhi
-	ldr	r4, .L113
+	ldr	r4, .L114
 	ldrh	r2, [r3, #2]
 	strh	r2, [r1, #2]	@ movhi
 	ldr	r2, [r4, #2320]
@@ -914,33 +930,33 @@ insert_data_list:
 	mulne	r2, r2, r5
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L100
-.L111:
-	mov	r6, #-1
-	b	.L102
+	b	.L101
 .L112:
+	mov	r6, #-1
+	b	.L103
+.L113:
 	mov	r7, #-1
-	b	.L104
-.L105:
-	bcc	.L106
-.L107:
+	b	.L105
+.L106:
+	bcc	.L107
+.L108:
 	ldrh	r7, [r3]
 	movw	r10, #65535
 	cmp	r7, r10
-	bne	.L108
+	bne	.L109
 	strh	r2, [r1, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	ldr	r3, .L113
+	ldr	r3, .L114
 	str	r1, [r3, #2332]
-	b	.L100
-.L108:
+	b	.L101
+.L109:
 	movs	r3, #6
 	mov	r2, r7
 	mla	r3, r3, r7, lr
-	b	.L109
-.L114:
+	b	.L110
+.L115:
 	.align	2
-.L113:
+.L114:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -959,24 +975,24 @@ INSERT_DATA_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L117
+	ldr	r2, .L118
 	ldrh	r3, [r2, #2336]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r2, #2336]	@ movhi
 	ldrh	r2, [r2, #40]
 	cmp	r2, r3
-	bcs	.L115
-	movs	r2, #221
-	ldr	r1, .L117+4
-	ldr	r0, .L117+8
+	bcs	.L116
+	movs	r2, #214
+	ldr	r1, .L118+4
+	ldr	r0, .L118+8
 	pop	{r3, lr}
-	b	printk
-.L115:
+	b	sftl_printk
+.L116:
 	pop	{r3, pc}
-.L118:
+.L119:
 	.align	2
-.L117:
+.L118:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LC1
@@ -997,8 +1013,8 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r4, #65535
 	cmp	r0, r4
-	beq	.L120
-	ldr	r2, .L126
+	beq	.L121
+	ldr	r2, .L127
 	movs	r1, #6
 	mul	r7, r1, r0
 	ldr	ip, [r2, #2316]
@@ -1007,36 +1023,36 @@ insert_free_list:
 	strh	r4, [r6, #2]	@ movhi
 	strh	r4, [ip, r7]	@ movhi
 	ldr	r3, [r2, #2340]
-	cbnz	r3, .L121
+	cbnz	r3, .L122
 	str	r6, [r2, #2340]
-.L120:
+.L121:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L121:
+.L122:
 	ldr	lr, [r2, #2316]
 	ldr	r8, [r2, #2328]
 	sub	r2, r3, lr
 	asr	r10, r2, #1
-	ldr	r2, .L126+4
+	ldr	r2, .L127+4
 	ldrh	r9, [r8, r0, lsl #1]
 	mul	r2, r2, r10
 	mov	r10, r4
 	uxth	r2, r2
-.L124:
+.L125:
 	ldrh	r4, [r8, r2, lsl #1]
 	cmp	r4, r9
-	bcs	.L122
+	bcs	.L123
 	ldrh	r4, [r3]
 	cmp	r4, r10
-	bne	.L123
+	bne	.L124
 	strh	r2, [r6, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	b	.L120
-.L123:
+	b	.L121
+.L124:
 	mla	r3, r1, r4, lr
 	mov	r2, r4
-	b	.L124
-.L122:
+	b	.L125
+.L123:
 	ldrh	r1, [r3, #2]
 	strh	r1, [r6, #2]	@ movhi
 	strh	r2, [ip, r7]	@ movhi
@@ -1052,10 +1068,10 @@ insert_free_list:
 	mulne	r2, r2, r4
 	strhne	r0, [r1, r2]	@ movhi
 	strhne	r0, [r3, #2]	@ movhi
-	b	.L120
-.L127:
+	b	.L121
+.L128:
 	.align	2
-.L126:
+.L127:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1074,24 +1090,24 @@ INSERT_FREE_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L130
+	ldr	r2, .L131
 	ldrh	r3, [r2, #2344]
 	adds	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r2, #2344]	@ movhi
 	ldrh	r2, [r2, #40]
 	cmp	r2, r3
-	bcs	.L128
-	movs	r2, #214
-	ldr	r1, .L130+4
-	ldr	r0, .L130+8
+	bcs	.L129
+	movs	r2, #207
+	ldr	r1, .L131+4
+	ldr	r0, .L131+8
 	pop	{r3, lr}
-	b	printk
-.L128:
+	b	sftl_printk
+.L129:
 	pop	{r3, pc}
-.L131:
+.L132:
 	.align	2
-.L130:
+.L131:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+17
 	.word	.LC1
@@ -1111,7 +1127,7 @@ List_remove_node:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r6, #6
-	ldr	r4, .L138
+	ldr	r4, .L139
 	muls	r6, r1, r6
 	movw	r3, #65535
 	mov	r8, r0
@@ -1119,20 +1135,20 @@ List_remove_node:
 	adds	r5, r7, r6
 	ldrh	r2, [r5, #2]
 	cmp	r2, r3
-	bne	.L133
+	bne	.L134
 	ldr	r3, [r0]
 	cmp	r5, r3
-	beq	.L133
-	movw	r2, #379
-	ldr	r1, .L138+4
-	ldr	r0, .L138+8
-	bl	printk
-.L133:
+	beq	.L134
+	mov	r2, #372
+	ldr	r1, .L139+4
+	ldr	r0, .L139+8
+	bl	sftl_printk
+.L134:
 	ldr	r3, [r8]
 	movw	r1, #65535
 	cmp	r5, r3
 	ldrh	r3, [r7, r6]
-	bne	.L134
+	bne	.L135
 	cmp	r3, r1
 	ittee	ne
 	ldrne	r0, [r4, #2316]
@@ -1143,24 +1159,24 @@ List_remove_node:
 	mlane	r3, r2, r3, r0
 	strne	r3, [r8]
 	strhne	r1, [r3, #2]	@ movhi
-.L136:
+.L137:
 	movw	r3, #65535
 	movs	r0, #0
 	strh	r3, [r7, r6]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L134:
+.L135:
 	cmp	r3, r1
 	ldrh	r1, [r5, #2]
-	bne	.L137
+	bne	.L138
 	cmp	r1, r3
-	beq	.L136
+	beq	.L137
 	movs	r2, #6
 	ldr	r0, [r4, #2316]
 	muls	r1, r2, r1
 	strh	r3, [r0, r1]	@ movhi
-	b	.L136
-.L137:
+	b	.L137
+.L138:
 	ldr	r0, [r4, #2316]
 	movs	r2, #6
 	mla	r3, r2, r3, r0
@@ -1170,10 +1186,10 @@ List_remove_node:
 	ldr	r3, [r4, #2316]
 	muls	r2, r0, r2
 	strh	r1, [r3, r2]	@ movhi
-	b	.L136
-.L139:
+	b	.L137
+.L140:
 	.align	2
-.L138:
+.L139:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+34
 	.word	.LC1
@@ -1193,15 +1209,15 @@ List_pop_index_node:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldr	r3, [r0]
-	cbz	r3, .L146
-	ldr	r2, .L147
+	cbz	r3, .L147
+	ldr	r2, .L148
 	movw	r5, #65535
 	movs	r6, #6
 	ldr	r2, [r2, #2316]
-.L142:
-	cbnz	r1, .L143
-.L145:
-	ldr	r4, .L147+4
+.L143:
+	cbnz	r1, .L144
+.L146:
+	ldr	r4, .L148+4
 	subs	r3, r3, r2
 	asrs	r3, r3, #1
 	muls	r4, r3, r4
@@ -1209,20 +1225,20 @@ List_pop_index_node:
 	bl	List_remove_node
 	uxth	r0, r4
 	pop	{r4, r5, r6, pc}
-.L143:
+.L144:
 	ldrh	r4, [r3]
 	cmp	r4, r5
-	beq	.L145
+	beq	.L146
 	subs	r1, r1, #1
 	mla	r3, r6, r4, r2
 	uxth	r1, r1
-	b	.L142
-.L146:
+	b	.L143
+.L147:
 	movw	r0, #65535
 	pop	{r4, r5, r6, pc}
-.L148:
+.L149:
 	.align	2
-.L147:
+.L148:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1254,37 +1270,37 @@ List_get_gc_head_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L156
+	ldr	r2, .L157
 	push	{r4, lr}
 	.save {r4, lr}
 	ldr	r3, [r2, #2320]
-	cbz	r3, .L155
+	cbz	r3, .L156
 	ldr	r1, [r2, #2316]
 	movs	r4, #6
 	movw	r2, #65535
-.L152:
-	cbz	r0, .L153
+.L153:
+	cbz	r0, .L154
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	bne	.L154
-.L155:
+	bne	.L155
+.L156:
 	movw	r0, #65535
 	pop	{r4, pc}
-.L154:
+.L155:
 	subs	r0, r0, #1
 	mla	r3, r4, r3, r1
 	uxth	r0, r0
-	b	.L152
-.L153:
-	ldr	r0, .L156+4
+	b	.L153
+.L154:
+	ldr	r0, .L157+4
 	subs	r3, r3, r1
 	asrs	r3, r3, #1
 	muls	r3, r0, r3
 	uxth	r0, r3
 	pop	{r4, pc}
-.L157:
+.L158:
 	.align	2
-.L156:
+.L157:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1303,53 +1319,53 @@ List_update_data_list:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r5, r0
-	ldr	r4, .L169
+	ldr	r4, .L170
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r0
-	beq	.L160
+	beq	.L161
 	ldrh	r3, [r4, #2396]
 	cmp	r3, r0
-	beq	.L160
+	beq	.L161
 	ldrh	r3, [r4, #2444]
 	cmp	r3, r0
-	beq	.L160
+	beq	.L161
 	movs	r7, #6
 	ldr	r9, [r4, #2316]
 	muls	r7, r0, r7
 	ldr	r3, [r4, #2320]
 	add	r8, r9, r7
 	cmp	r8, r3
-	beq	.L160
+	beq	.L161
 	ldrh	r6, [r8, #4]
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r6, #0
-	beq	.L167
+	beq	.L168
 	muls	r6, r3, r6
-.L162:
+.L163:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L163
+	bne	.L164
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	bne	.L163
-	mov	r2, #470
-	ldr	r1, .L169+4
-	ldr	r0, .L169+8
-	bl	printk
-.L163:
+	bne	.L164
+	movw	r2, #463
+	ldr	r1, .L170+4
+	ldr	r0, .L170+8
+	bl	sftl_printk
+.L164:
 	ldrh	r3, [r8, #2]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L164
+	bne	.L165
 	ldrh	r2, [r9, r7]
 	cmp	r2, r3
-	beq	.L160
-.L164:
+	beq	.L161
+.L165:
 	movs	r2, #6
 	muls	r2, r3, r2
-	ldr	r3, .L169+12
+	ldr	r3, .L170+12
 	asrs	r1, r2, #1
 	muls	r3, r1, r3
 	ldr	r1, [r4, #2324]
@@ -1357,38 +1373,38 @@ List_update_data_list:
 	ldr	r1, [r4, #2316]
 	add	r2, r2, r1
 	ldrh	r3, [r2, #4]
-	cbz	r3, .L168
+	cbz	r3, .L169
 	muls	r3, r0, r3
-.L165:
+.L166:
 	cmp	r6, r3
-	bcs	.L160
+	bcs	.L161
 	mov	r1, r5
-	ldr	r0, .L169+16
+	ldr	r0, .L170+16
 	bl	List_remove_node
 	ldrh	r3, [r4, #2336]
-	cbnz	r3, .L166
-	movw	r2, #481
-	ldr	r1, .L169+4
-	ldr	r0, .L169+8
-	bl	printk
-.L166:
+	cbnz	r3, .L167
+	mov	r2, #474
+	ldr	r1, .L170+4
+	ldr	r0, .L170+8
+	bl	sftl_printk
+.L167:
 	ldrh	r3, [r4, #2336]
 	mov	r0, r5
 	subs	r3, r3, #1
 	strh	r3, [r4, #2336]	@ movhi
 	bl	INSERT_DATA_LIST
-.L160:
+.L161:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L167:
-	mov	r6, #-1
-	b	.L162
 .L168:
+	mov	r6, #-1
+	b	.L163
+.L169:
 	mov	r3, #-1
-	b	.L165
-.L170:
+	b	.L166
+.L171:
 	.align	2
-.L169:
+.L170:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+51
 	.word	.LC1
@@ -1410,77 +1426,77 @@ select_l2p_ram_region:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r5, .L181
+	ldr	r5, .L182
 	movs	r0, #12
 	movw	r6, #65535
 	ldrh	r2, [r5, #138]
 	ldr	r3, [r5, #2492]
-.L172:
+.L173:
 	uxth	r4, r1
 	cmp	r4, r2
-	bcc	.L174
+	bcc	.L175
 	mov	r4, r2
 	movs	r1, #0
 	mov	r7, #-2147483648
 	mov	ip, #12
-.L175:
+.L176:
 	uxth	r6, r1
 	cmp	r6, r2
-	bcc	.L177
+	bcc	.L178
 	cmp	r4, r2
-	bcc	.L173
+	bcc	.L174
 	ldrh	r7, [r5, #2496]
 	mov	r4, r2
 	movs	r1, #0
 	mov	r0, #-1
-.L178:
+.L179:
 	uxth	r5, r1
 	cmp	r5, r2
-	bcc	.L180
+	bcc	.L181
 	cmp	r4, r2
-	bcc	.L173
-	mov	r2, #784
-	ldr	r1, .L181+4
-	ldr	r0, .L181+8
-	bl	printk
-	b	.L173
-.L174:
+	bcc	.L174
+	movw	r2, #787
+	ldr	r1, .L182+4
+	ldr	r0, .L182+8
+	bl	sftl_printk
+	b	.L174
+.L175:
 	adds	r1, r1, #1
 	mla	r7, r0, r1, r3
 	ldrh	r7, [r7, #-12]
 	cmp	r7, r6
-	bne	.L172
-.L173:
+	bne	.L173
+.L174:
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L177:
+.L178:
 	mla	r0, ip, r1, r3
 	ldr	r0, [r0, #4]
 	cmp	r0, #0
-	blt	.L176
+	blt	.L177
 	cmp	r7, r0
 	itt	hi
 	movhi	r7, r0
 	movhi	r4, r6
-.L176:
+.L177:
 	adds	r1, r1, #1
-	b	.L175
-.L180:
+	b	.L176
+.L181:
 	ldr	r6, [r3, #4]
 	cmp	r0, r6
-	bls	.L179
+	bls	.L180
 	ldrh	ip, [r3]
 	cmp	ip, r7
 	itt	ne
 	movne	r0, r6
 	movne	r4, r5
-.L179:
+.L180:
 	adds	r1, r1, #1
 	adds	r3, r3, #12
-	b	.L178
-.L182:
+	b	.L179
+.L183:
 	.align	2
-.L181:
+.L182:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+73
 	.word	.LC1
@@ -1497,18 +1513,18 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L189
+	ldr	r1, .L190
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r3, r1
 	ldrh	r2, [r1, #2498]
 	cmp	r2, #4
-	bhi	.L184
-	cbnz	r0, .L184
+	bhi	.L185
+	cbnz	r0, .L185
 	adds	r2, r2, #1
 	strh	r2, [r1, #2498]	@ movhi
 	pop	{r4, r5, pc}
-.L184:
+.L185:
 	movs	r2, #0
 	ldrh	r1, [r3, #40]
 	strh	r2, [r3, #2498]	@ movhi
@@ -1516,21 +1532,21 @@ FtlUpdateVaildLpn:
 	str	r2, [r3, #2500]
 	ldr	r2, [r3, #2324]
 	add	r1, r2, r1, lsl #1
-.L185:
+.L186:
 	cmp	r2, r1
-	bne	.L187
+	bne	.L188
 	pop	{r4, r5, pc}
-.L187:
+.L188:
 	ldrh	r4, [r2], #2
 	cmp	r4, r5
 	ittt	ne
 	ldrne	r0, [r3, #2500]
 	addne	r0, r0, r4
 	strne	r0, [r3, #2500]
-	b	.L185
-.L190:
+	b	.L186
+.L191:
 	.align	2
-.L189:
+.L190:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
@@ -1547,10 +1563,10 @@ ftl_set_blk_mode:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	mov	r3, r0
-	cbz	r1, .L192
+	cbz	r1, .L193
 	b	ftl_set_blk_mode.part.6
-.L192:
-	ldr	r2, .L193
+.L193:
+	ldr	r2, .L194
 	lsrs	r0, r0, #5
 	and	r3, r3, #31
 	ldr	r1, [r2, #24]
@@ -1560,9 +1576,9 @@ ftl_set_blk_mode:
 	bic	r2, r2, r3
 	str	r2, [r1, r0, lsl #2]
 	bx	lr
-.L194:
+.L195:
 	.align	2
-.L193:
+.L194:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -1578,7 +1594,7 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L196
+	ldr	r3, .L197
 	lsrs	r2, r0, #5
 	and	r0, r0, #31
 	ldr	r3, [r3, #24]
@@ -1586,9 +1602,9 @@ ftl_get_blk_mode:
 	lsr	r0, r3, r0
 	and	r0, r0, #1
 	bx	lr
-.L197:
+.L198:
 	.align	2
-.L196:
+.L197:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -1609,12 +1625,12 @@ ftl_sb_update_avl_pages:
 	strh	r3, [r0, #4]	@ movhi
 	add	r4, r0, r2, lsl #1
 	movw	r7, #65535
-	ldr	r3, .L205
+	ldr	r3, .L206
 	adds	r4, r4, #14
 	ldrh	r5, [r3, #32]
-.L199:
+.L200:
 	cmp	r2, r5
-	bcc	.L201
+	bcc	.L202
 	ldrh	r3, [r3, #102]
 	add	r4, r0, #16
 	movw	r6, #65535
@@ -1622,12 +1638,12 @@ ftl_sb_update_avl_pages:
 	subs	r1, r3, r1
 	movs	r3, #0
 	uxth	r1, r1
-.L202:
+.L203:
 	uxth	r2, r3
 	cmp	r5, r2
-	bhi	.L204
+	bhi	.L205
 	pop	{r4, r5, r6, r7, pc}
-.L201:
+.L202:
 	ldrh	r6, [r4, #2]!
 	adds	r2, r2, #1
 	uxth	r2, r2
@@ -1636,8 +1652,8 @@ ftl_sb_update_avl_pages:
 	ldrhne	r6, [r0, #4]
 	addne	r6, r6, #1
 	strhne	r6, [r0, #4]	@ movhi
-	b	.L199
-.L204:
+	b	.L200
+.L205:
 	ldrh	r2, [r4], #2
 	adds	r3, r3, #1
 	cmp	r2, r6
@@ -1645,10 +1661,10 @@ ftl_sb_update_avl_pages:
 	ldrhne	r2, [r0, #4]
 	addne	r2, r2, r1
 	strhne	r2, [r0, #4]	@ movhi
-	b	.L202
-.L206:
+	b	.L203
+.L207:
 	.align	2
-.L205:
+.L206:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -1666,24 +1682,24 @@ FtlSlcSuperblockCheck:
 	ldrh	r3, [r0, #4]
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	cbz	r3, .L207
+	cbz	r3, .L208
 	ldrh	r2, [r0]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L207
+	beq	.L208
 	ldrb	r2, [r0, #6]	@ zero_extendqisi2
 	movs	r5, #0
 	adds	r2, r2, #8
 	ldrh	r1, [r0, r2, lsl #1]
-	ldr	r2, .L213
+	ldr	r2, .L214
 	ldrh	r4, [r2, #32]
 	mov	r2, r3
-.L210:
+.L211:
 	cmp	r1, r2
-	beq	.L212
-.L207:
+	beq	.L213
+.L208:
 	pop	{r4, r5, pc}
-.L212:
+.L213:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	uxtb	r3, r3
@@ -1697,10 +1713,10 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r1, [r0, r3, lsl #1]
-	b	.L210
-.L214:
+	b	.L211
+.L215:
 	.align	2
-.L213:
+.L214:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
@@ -1718,54 +1734,53 @@ make_superblock:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r4, r0
-	ldr	r6, .L220
+	ldr	r6, .L221
 	ldrh	r2, [r0]
 	ldrh	r3, [r6, #40]
 	cmp	r2, r3
-	bcc	.L216
-	movw	r2, #2097
-	ldr	r1, .L220+4
-	ldr	r0, .L220+8
-	bl	printk
-.L216:
+	bcc	.L217
+	movw	r2, #2110
+	ldr	r1, .L221+4
+	ldr	r0, .L221+8
+	bl	sftl_printk
+.L217:
 	ldrh	r9, [r6, #32]
 	add	r7, r4, #16
-	ldr	r10, .L220+12
+	ldr	r10, .L221+12
 	movw	r8, #65535
 	movs	r5, #0
 	strh	r5, [r4, #4]	@ movhi
 	strb	r5, [r4, #7]
-.L217:
+.L218:
 	uxth	r3, r5
 	cmp	r9, r3
-	bhi	.L219
+	bhi	.L220
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	movs	r0, #0
 	ldrh	r2, [r6, #102]
+	strb	r0, [r4, #9]
 	smulbb	r3, r3, r2
 	strh	r3, [r4, #4]	@ movhi
-	movs	r3, #1
-	strb	r3, [r4, #9]
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L219:
+.L220:
 	ldrh	r1, [r4]
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	strh	r8, [r7]	@ movhi
 	mov	fp, r0
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L218
+	cbnz	r0, .L219
 	strh	fp, [r7]	@ movhi
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	strb	r3, [r4, #7]
-.L218:
+.L219:
 	adds	r5, r5, #1
 	adds	r7, r7, #2
-	b	.L217
-.L221:
+	b	.L218
+.L222:
 	.align	2
-.L220:
+.L221:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+95
 	.word	.LC1
@@ -1786,44 +1801,44 @@ update_multiplier_value:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r6, .L228
+	ldr	r6, .L229
 	mov	r7, r0
 	mov	r4, r5
 	ldrh	r8, [r6, #32]
 	add	r10, r6, #60
 	ldrh	r9, [r6, #102]
-.L223:
+.L224:
 	uxth	r3, r5
 	cmp	r8, r3
-	bhi	.L225
-	cbz	r4, .L227
+	bhi	.L226
+	cbz	r4, .L228
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
-.L226:
+.L227:
 	ldr	r1, [r6, #2316]
 	movs	r3, #6
 	mla	r1, r3, r7, r1
 	strh	r0, [r1, #4]	@ movhi
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L225:
+.L226:
 	mov	r1, r7
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L224
+	cbnz	r0, .L225
 	add	r4, r4, r9
 	uxth	r4, r4
-.L224:
+.L225:
 	adds	r5, r5, #1
-	b	.L223
-.L227:
+	b	.L224
+.L228:
 	mov	r0, r4
-	b	.L226
-.L229:
+	b	.L227
+.L230:
 	.align	2
-.L228:
+.L229:
 	.word	.LANCHOR0
 	.fnend
 	.size	update_multiplier_value, .-update_multiplier_value
@@ -1839,22 +1854,22 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L233
+	ldr	r2, .L234
 	ldr	r0, [r2, #2340]
-	cbz	r0, .L231
+	cbz	r0, .L232
 	ldr	r3, [r2, #2316]
 	subs	r0, r0, r3
-	ldr	r3, .L233+4
+	ldr	r3, .L234+4
 	asrs	r0, r0, #1
 	muls	r0, r3, r0
 	ldr	r3, [r2, #2328]
 	uxth	r0, r0
 	ldrh	r0, [r3, r0, lsl #1]
-.L231:
+.L232:
 	bx	lr
-.L234:
+.L235:
 	.align	2
-.L233:
+.L234:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1870,11 +1885,11 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L243
+	ldr	r1, .L244
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	ldr	r3, [r1, #2340]
-	cbz	r3, .L241
+	cbz	r3, .L242
 	ldrh	r2, [r1, #2344]
 	movs	r6, #6
 	ldr	r4, [r1, #2316]
@@ -1886,32 +1901,32 @@ GetFreeBlockMaxEraseCount:
 	cmp	r0, r2
 	it	gt
 	uxthgt	r0, r2
-	ldr	r2, .L243+4
+	ldr	r2, .L244+4
 	muls	r3, r2, r3
 	movs	r2, #0
 	uxth	r3, r3
-.L238:
+.L239:
 	uxth	r5, r2
 	cmp	r0, r5
-	bls	.L240
+	bls	.L241
 	mul	r5, r6, r3
 	adds	r2, r2, #1
 	ldrh	r5, [r4, r5]
 	cmp	r5, r7
-	bne	.L242
-.L240:
+	bne	.L243
+.L241:
 	ldr	r2, [r1, #2328]
 	ldrh	r0, [r2, r3, lsl #1]
 	pop	{r4, r5, r6, r7, pc}
-.L242:
+.L243:
 	mov	r3, r5
-	b	.L238
-.L241:
+	b	.L239
+.L242:
 	mov	r0, r3
 	pop	{r4, r5, r6, r7, pc}
-.L244:
+.L245:
 	.align	2
-.L243:
+.L244:
 	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
@@ -1929,326 +1944,346 @@ FtlPrintInfo2buf:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r7, r0
-	ldr	r6, .L257
-	add	r5, r7, #12
+	mov	r6, r0
+	ldr	r5, .L258
+	add	r4, r6, #12
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r1, .L257+4
+	ldr	r1, .L258+4
 	bl	strcpy
-	ldr	r2, [r6, #116]
-	mov	r0, r5
-	ldr	r1, .L257+8
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r1, .L257+12
-	mov	r0, r5
-	adds	r5, r5, #10
+	ldr	r3, [r5, #116]
+	movs	r1, #64
+	ldr	r2, .L258+8
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r1, .L258+12
+	mov	r0, r4
+	adds	r4, r4, #10
 	bl	strcpy
-	ldr	r2, [r6, #2504]
-	mov	r0, r5
-	ldr	r1, .L257+16
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2500]
-	ldr	r1, .L257+20
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2508]
-	ldr	r1, .L257+24
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2512]
-	ldr	r1, .L257+28
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2516]
-	ldr	r1, .L257+32
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2520]
-	ldr	r1, .L257+36
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2524]
-	ldr	r1, .L257+40
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2528]
-	ldr	r1, .L257+44
-	mov	r0, r5
-	bl	sprintf
-	ldr	r2, [r6, #2532]
-	add	r5, r5, r0
-	ldr	r1, .L257+48
-	mov	r0, r5
-	lsrs	r2, r2, #11
-	bl	sprintf
-	ldr	r2, [r6, #2536]
-	add	r5, r5, r0
-	ldr	r1, .L257+52
-	mov	r0, r5
-	lsrs	r2, r2, #11
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2540]
-	ldr	r1, .L257+56
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2544]
-	ldr	r1, .L257+60
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #158]
-	ldr	r1, .L257+64
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2344]
-	ldr	r1, .L257+68
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2548]
-	ldr	r1, .L257+72
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2552]
-	ldr	r1, .L257+76
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2556]
-	ldr	r1, .L257+80
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2560]
-	ldr	r1, .L257+84
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2564]
-	ldr	r1, .L257+88
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #2568]
-	ldr	r1, .L257+92
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2298]
-	ldr	r1, .L257+96
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2296]
-	ldr	r1, .L257+100
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #140]
-	ldr	r1, .L257+104
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #132]
-	ldr	r1, .L257+108
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #28]
-	ldr	r1, .L257+112
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #218]
-	ldr	r1, .L257+116
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #40]
-	ldr	r1, .L257+120
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2572]
-	ldr	r1, .L257+124
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldr	r2, [r6, #44]
-	ldr	r1, .L257+128
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2576]
-	ldr	r1, .L257+132
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #152]
-	ldr	r1, .L257+136
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2350]
-	ldr	r1, .L257+140
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2354]	@ zero_extendqisi2
-	ldr	r1, .L257+144
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2348]
-	ldr	r1, .L257+148
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2356]	@ zero_extendqisi2
-	ldr	r1, .L257+152
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2352]
-	ldr	r1, .L257+156
-	mov	r0, r5
-	bl	sprintf
-	ldr	r3, [r6, #2324]
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2348]
-	mov	r0, r5
-	ldr	r1, .L257+160
-	ldrh	r2, [r3, r2, lsl #1]
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2398]
-	ldr	r1, .L257+164
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2402]	@ zero_extendqisi2
-	ldr	r1, .L257+168
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2396]
-	ldr	r1, .L257+172
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2404]	@ zero_extendqisi2
-	ldr	r1, .L257+176
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2400]
-	ldr	r1, .L257+180
-	mov	r0, r5
-	bl	sprintf
-	ldr	r3, [r6, #2324]
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2396]
-	mov	r0, r5
-	ldr	r1, .L257+184
-	ldrh	r2, [r3, r2, lsl #1]
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2446]
-	ldr	r1, .L257+188
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2450]	@ zero_extendqisi2
-	ldr	r1, .L257+192
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2444]
-	ldr	r1, .L257+196
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2452]	@ zero_extendqisi2
-	ldr	r1, .L257+200
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2448]
-	ldr	r1, .L257+204
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2590]
-	ldr	r1, .L257+208
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2594]	@ zero_extendqisi2
-	ldr	r1, .L257+212
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2588]
-	ldr	r1, .L257+216
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrb	r2, [r6, #2596]	@ zero_extendqisi2
-	ldr	r1, .L257+220
-	mov	r0, r5
-	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r2, [r6, #2592]
-	ldr	r1, .L257+224
-	mov	r0, r5
-	bl	sprintf
-	ldr	r3, [r6, #2712]
-	add	r5, r5, r0
-	ldr	r2, [r6, #2716]
-	mov	r0, r5
-	ldr	r1, .L257+228
-	str	r3, [sp]
-	ldr	r3, [r6, #2720]
-	bl	sprintf
-	adds	r4, r5, r0
-	ldr	r2, [r6, #2708]
-	ldr	r1, .L257+232
+	ldr	r3, [r5, #2504]
+	movs	r1, #64
+	ldr	r2, .L258+16
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldr	r2, [r6, #2732]
-	ldr	r1, .L257+236
+	ldr	r3, [r5, #2500]
+	ldr	r2, .L258+20
+	movs	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r2, [r6, #3148]
-	ldr	r1, .L257+240
+	ldr	r3, [r5, #2508]
+	ldr	r2, .L258+24
+	movs	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r2, [r6, #3150]
-	ldr	r1, .L257+244
+	ldr	r3, [r5, #2512]
+	ldr	r2, .L258+28
+	movs	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldr	r2, [r6, #3152]
-	b	.L258
-.L259:
+	ldr	r3, [r5, #2516]
+	ldr	r2, .L258+32
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2520]
+	ldr	r2, .L258+36
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2524]
+	ldr	r2, .L258+40
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2528]
+	ldr	r2, .L258+44
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldr	r3, [r5, #2532]
+	add	r4, r4, r0
+	ldr	r2, .L258+48
+	movs	r1, #64
+	mov	r0, r4
+	lsrs	r3, r3, #11
+	bl	snprintf
+	ldr	r3, [r5, #2536]
+	add	r4, r4, r0
+	ldr	r2, .L258+52
+	movs	r1, #64
+	mov	r0, r4
+	lsrs	r3, r3, #11
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2540]
+	ldr	r2, .L258+56
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2544]
+	ldr	r2, .L258+60
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #158]
+	ldr	r2, .L258+64
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2344]
+	ldr	r2, .L258+68
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2548]
+	ldr	r2, .L258+72
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2552]
+	ldr	r2, .L258+76
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2556]
+	ldr	r2, .L258+80
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2560]
+	ldr	r2, .L258+84
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2564]
+	ldr	r2, .L258+88
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2568]
+	ldr	r2, .L258+92
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2298]
+	ldr	r2, .L258+96
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2296]
+	ldr	r2, .L258+100
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #140]
+	ldr	r2, .L258+104
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #132]
+	ldr	r2, .L258+108
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #28]
+	ldr	r2, .L258+112
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #218]
+	ldr	r2, .L258+116
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #40]
+	ldr	r2, .L258+120
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2572]
+	ldr	r2, .L258+124
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #44]
+	ldr	r2, .L258+128
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2576]
+	ldr	r2, .L258+132
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #152]
+	ldr	r2, .L258+136
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2350]
+	ldr	r2, .L258+140
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2354]	@ zero_extendqisi2
+	ldr	r2, .L258+144
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2348]
+	ldr	r2, .L258+148
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2356]	@ zero_extendqisi2
+	ldr	r2, .L258+152
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2352]
+	ldr	r2, .L258+156
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldrh	r2, [r5, #2348]
+	add	r4, r4, r0
+	ldr	r3, [r5, #2324]
+	movs	r1, #64
+	mov	r0, r4
+	ldrh	r3, [r3, r2, lsl #1]
+	ldr	r2, .L258+160
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2398]
+	ldr	r2, .L258+164
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2402]	@ zero_extendqisi2
+	ldr	r2, .L258+168
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2396]
+	ldr	r2, .L258+172
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2404]	@ zero_extendqisi2
+	ldr	r2, .L258+176
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2400]
+	ldr	r2, .L258+180
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldrh	r2, [r5, #2396]
+	add	r4, r4, r0
+	ldr	r3, [r5, #2324]
+	movs	r1, #64
+	mov	r0, r4
+	ldrh	r3, [r3, r2, lsl #1]
+	ldr	r2, .L258+184
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2446]
+	ldr	r2, .L258+188
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2450]	@ zero_extendqisi2
+	ldr	r2, .L258+192
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2444]
+	ldr	r2, .L258+196
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2452]	@ zero_extendqisi2
+	ldr	r2, .L258+200
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2448]
+	ldr	r2, .L258+204
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2590]
+	ldr	r2, .L258+208
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2594]	@ zero_extendqisi2
+	ldr	r2, .L258+212
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2588]
+	ldr	r2, .L258+216
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrb	r3, [r5, #2596]	@ zero_extendqisi2
+	ldr	r2, .L258+220
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #2592]
+	b	.L259
+.L260:
 	.align	2
-.L257:
+.L258:
 	.word	.LANCHOR0
 	.word	.LC2
 	.word	.LC3
@@ -2305,124 +2340,172 @@ FtlPrintInfo2buf:
 	.word	.LC54
 	.word	.LC55
 	.word	.LC56
-	.word	.LC57
-	.word	.LC58
-	.word	.LC59
-	.word	.LC60
-	.word	.LC61
-	.word	.LC62
-.L258:
-	ldr	r1, .L260
+.L259:
+	ldr	r2, .L261
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	ldr	r3, [r5, #2712]
+	add	r4, r4, r0
+	ldr	r2, .L261+4
+	movs	r1, #64
+	mov	r0, r4
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #2720]
+	str	r3, [sp]
+	ldr	r3, [r5, #2716]
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2708]
+	ldr	r2, .L261+8
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #2732]
+	ldr	r2, .L261+12
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #3148]
+	ldr	r2, .L261+16
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldrh	r3, [r5, #3150]
+	ldr	r2, .L261+20
+	movs	r1, #64
+	mov	r0, r4
+	bl	snprintf
+	add	r4, r4, r0
+	ldr	r3, [r5, #3152]
+	ldr	r2, .L261+24
+	movs	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r2, [r6, #3156]
-	ldr	r1, .L260+4
+	ldrh	r3, [r5, #3156]
+	ldr	r2, .L261+28
+	movs	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r1, .L260+8
-	mov	r2, r0
+	ldr	r2, .L261+32
+	mov	r3, r0
+	movs	r1, #64
 	mov	r0, r4
-	bl	sprintf
+	bl	snprintf
 	add	r4, r4, r0
-	ldrh	r0, [r6, #2344]
+	ldrh	r0, [r5, #2344]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r1, .L260+12
-	mov	r2, r0
+	ldr	r2, .L261+36
+	mov	r3, r0
+	movs	r1, #64
 	mov	r0, r4
-	bl	sprintf
-	ldr	r3, .L260+16
+	bl	snprintf
+	ldr	r3, .L261+40
 	add	r4, r4, r0
 	ldr	r3, [r3]
 	cmp	r3, #1
-	beq	.L246
-.L251:
-	subs	r0, r4, r7
+	beq	.L247
+.L252:
+	subs	r0, r4, r6
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L246:
-	ldrh	r3, [r6, #2588]
+.L247:
+	ldrh	r3, [r5, #2588]
 	movw	r2, #65535
 	cmp	r3, r2
-	beq	.L248
-	ldr	r2, [r6, #2324]
+	beq	.L249
+	ldr	r2, [r5, #2324]
 	mov	r0, r4
-	ldr	r1, .L260+20
-	ldrh	r2, [r2, r3, lsl #1]
-	bl	sprintf
+	movs	r1, #64
+	ldrh	r3, [r2, r3, lsl #1]
+	ldr	r2, .L261+44
+	bl	snprintf
 	add	r4, r4, r0
-.L248:
+.L249:
 	movs	r0, #0
-	ldr	r9, .L260+28
+	ldr	r9, .L261+52
 	bl	List_get_gc_head_node
-	uxth	r3, r0
-	movs	r5, #0
+	uxth	r0, r0
+	movs	r7, #0
 	movw	fp, #65535
 	mov	r10, #6
-.L250:
-	cmp	r3, fp
-	beq	.L249
-	ldr	r2, [r6, #2328]
-	mul	r8, r10, r3
+.L251:
+	cmp	r0, fp
+	beq	.L250
+	ldr	r3, [r5, #2328]
+	mul	r8, r10, r0
+	mov	r2, r9
+	movs	r1, #64
+	ldrh	r3, [r3, r0, lsl #1]
+	str	r3, [sp, #12]
+	ldr	r3, [r5, #2316]
+	add	r3, r3, r8
+	ldrh	r3, [r3, #4]
+	str	r3, [sp, #8]
+	ldr	r3, [r5, #2324]
+	ldrh	r3, [r3, r0, lsl #1]
+	stm	sp, {r0, r3}
+	mov	r3, r7
 	mov	r0, r4
-	mov	r1, r9
-	ldrh	r2, [r2, r3, lsl #1]
-	str	r2, [sp, #8]
-	ldr	r2, [r6, #2316]
-	add	r2, r2, r8
-	ldrh	r2, [r2, #4]
-	str	r2, [sp, #4]
-	ldr	r2, [r6, #2324]
-	ldrh	r2, [r2, r3, lsl #1]
-	str	r2, [sp]
-	mov	r2, r5
-	bl	sprintf
-	adds	r5, r5, #1
-	ldr	r3, [r6, #2316]
-	cmp	r5, #16
+	adds	r7, r7, #1
+	bl	snprintf
+	ldr	r3, [r5, #2316]
+	cmp	r7, #16
 	add	r4, r4, r0
-	ldrh	r3, [r3, r8]
-	bne	.L250
-.L249:
-	ldr	r2, [r6, #2316]
-	movs	r5, #0
-	ldr	r3, [r6, #2340]
+	ldrh	r0, [r3, r8]
+	bne	.L251
+.L250:
+	ldr	r2, [r5, #2316]
+	movs	r7, #0
+	ldr	r3, [r5, #2340]
 	movw	r9, #65535
-	ldr	fp, .L260+32
+	ldr	fp, .L261+56
 	mov	r10, #6
 	subs	r3, r3, r2
 	asrs	r2, r3, #1
-	ldr	r3, .L260+24
+	ldr	r3, .L261+48
 	muls	r3, r2, r3
 	uxth	r3, r3
-.L252:
+.L253:
 	cmp	r3, r9
-	beq	.L251
-	ldr	r2, [r6, #2328]
+	beq	.L252
+	ldr	r2, [r5, #2328]
 	mul	r8, r10, r3
 	mov	r0, r4
-	mov	r1, fp
+	movs	r1, #64
 	ldrh	r2, [r2, r3, lsl #1]
-	str	r2, [sp, #4]
-	ldr	r2, [r6, #2316]
+	str	r2, [sp, #8]
+	ldr	r2, [r5, #2316]
 	add	r2, r2, r8
 	ldrh	r2, [r2, #4]
-	str	r2, [sp]
-	mov	r2, r5
-	adds	r5, r5, #1
-	bl	sprintf
-	cmp	r5, #4
+	str	r3, [sp]
+	mov	r3, r7
+	adds	r7, r7, #1
+	str	r2, [sp, #4]
+	mov	r2, fp
+	bl	snprintf
+	cmp	r7, #4
 	add	r4, r4, r0
-	beq	.L251
-	ldr	r3, [r6, #2316]
+	beq	.L252
+	ldr	r3, [r5, #2316]
 	ldrh	r3, [r3, r8]
-	b	.L252
-.L261:
+	b	.L253
+.L262:
 	.align	2
-.L260:
+.L261:
+	.word	.LC57
+	.word	.LC58
+	.word	.LC59
+	.word	.LC60
+	.word	.LC61
+	.word	.LC62
 	.word	.LC63
 	.word	.LC64
 	.word	.LC65
@@ -2445,21 +2528,28 @@ rknand_proc_ftlread:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r0, #2048
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	mov	r5, r0
-	ldr	r2, .L263
-	ldr	r1, .L263+4
-	bl	sprintf
+	mov	r5, r1
+	blt	.L265
+	ldr	r3, .L266
+	movs	r1, #64
+	ldr	r2, .L266+4
+	mov	r0, r5
+	bl	snprintf
 	adds	r4, r5, r0
 	mov	r0, r4
 	bl	FtlPrintInfo2buf
 	add	r0, r0, r4
 	subs	r0, r0, r5
 	pop	{r3, r4, r5, pc}
-.L264:
+.L265:
+	movs	r0, #0
+	pop	{r3, r4, r5, pc}
+.L267:
 	.align	2
-.L263:
+.L266:
 	.word	.LC70
 	.word	.LC71
 	.fnend
@@ -2479,18 +2569,18 @@ GetSwlReplaceBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L289
+	ldr	r4, .L292
 	ldr	r2, [r4, #2556]
 	ldr	r3, [r4, #2568]
 	cmp	r2, r3
-	bcs	.L266
+	bcs	.L269
 	ldrh	r1, [r4, #40]
 	movs	r3, #0
 	ldr	r0, [r4, #2328]
 	str	r3, [r4, #2548]
-.L267:
+.L270:
 	cmp	r3, r1
-	bcc	.L268
+	bcc	.L271
 	ldr	r5, [r4, #2548]
 	mov	r0, r5
 	bl	__aeabi_uidiv
@@ -2500,48 +2590,48 @@ GetSwlReplaceBlock:
 	subs	r0, r5, r0
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2548]
-.L269:
+.L272:
 	ldr	r6, [r4, #2568]
 	ldr	r7, [r4, #2556]
 	add	r3, r6, #256
 	cmp	r3, r7
-	bls	.L274
+	bls	.L277
 	ldr	r2, [r4, #2564]
 	add	r3, r6, #768
 	cmp	r3, r2
-	bls	.L274
-.L276:
+	bls	.L277
+.L279:
 	movw	r5, #65535
-.L275:
+.L278:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L268:
+.L271:
 	ldrh	r2, [r0, r3, lsl #1]
 	adds	r3, r3, #1
 	ldr	r5, [r4, #2548]
 	add	r2, r2, r5
 	str	r2, [r4, #2548]
-	b	.L267
-.L266:
+	b	.L270
+.L269:
 	ldr	r3, [r4, #2564]
 	cmp	r2, r3
-	bls	.L269
+	bls	.L272
 	adds	r3, r3, #1
 	str	r3, [r4, #2564]
 	movs	r3, #0
-.L271:
+.L274:
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	bcs	.L269
+	bcs	.L272
 	ldr	r1, [r4, #2328]
 	ldrh	r2, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	strh	r2, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
-	b	.L271
-.L274:
+	b	.L274
+.L277:
 	ldrh	r0, [r4, #2344]
 	add	r0, r0, r0, lsl #1
 	ubfx	r0, r0, #2, #16
@@ -2549,10 +2639,10 @@ GetSwlReplaceBlock:
 	add	r3, r6, #64
 	mov	r9, r0
 	cmp	r0, r3
-	bcc	.L276
+	bcc	.L279
 	ldr	r3, [r4, #2320]
 	cmp	r3, #0
-	beq	.L276
+	beq	.L279
 	ldrh	r2, [r4, #40]
 	movw	r1, #65535
 	ldr	lr, [r4, #2316]
@@ -2562,77 +2652,77 @@ GetSwlReplaceBlock:
 	str	r2, [sp, #20]
 	mov	fp, #6
 	mov	r2, r1
-.L277:
+.L280:
 	ldrh	ip, [r3]
 	cmp	ip, r10
-	bne	.L280
+	bne	.L283
 	mov	r5, r2
-.L279:
+.L282:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L276
+	beq	.L279
 	ldrh	r10, [r8, r5, lsl #1]
 	lsl	fp, r5, #1
 	cmp	r6, r10
-	bcs	.L281
+	bcs	.L284
 	bl	GetFreeBlockMinEraseCount
 	cmp	r6, r0
 	it	cc
 	strcc	r1, [r4, #2568]
-.L281:
+.L284:
 	cmp	r7, r10
-	bls	.L276
+	bls	.L279
 	add	r3, r10, #128
 	cmp	r9, r3
-	ble	.L276
+	ble	.L279
 	add	r3, r10, #256
 	cmp	r7, r3
-	bhi	.L282
+	bhi	.L285
 	ldr	r3, [r4, #2564]
 	add	r10, r10, #768
 	cmp	r10, r3
-	bcs	.L276
-.L282:
+	bcs	.L279
+.L285:
 	str	r9, [sp, #8]
 	mov	r2, r7
 	ldrh	r3, [r8, fp]
 	mov	r1, r5
-	ldr	r0, .L289+4
+	ldr	r0, .L292+4
 	str	r3, [sp, #4]
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, fp]
 	str	r3, [sp]
 	ldr	r3, [r4, #2564]
-	bl	printk
+	bl	sftl_printk
 	movs	r3, #1
 	str	r3, [r4, #3160]
-	b	.L275
-.L280:
+	b	.L278
+.L283:
 	adds	r0, r0, #1
 	ldr	r5, [sp, #20]
 	uxth	r0, r0
 	cmp	r0, r5
-	bhi	.L276
+	bhi	.L279
 	ldrh	r5, [r3, #4]
-	cbz	r5, .L278
-	ldr	r5, .L289+8
+	cbz	r5, .L281
+	ldr	r5, .L292+8
 	sub	r3, r3, lr
 	asrs	r3, r3, #1
 	muls	r3, r5, r3
 	uxth	r5, r3
 	ldrh	r3, [r8, r5, lsl #1]
 	cmp	r6, r3
-	bcs	.L279
+	bcs	.L282
 	cmp	r1, r3
 	itt	hi
 	movhi	r1, r3
 	movhi	r2, r5
-.L278:
+.L281:
 	mla	r3, fp, ip, lr
-	b	.L277
-.L290:
+	b	.L280
+.L293:
 	.align	2
-.L289:
+.L292:
 	.word	.LANCHOR0
 	.word	.LC72
 	.word	-1431655765
@@ -2653,18 +2743,18 @@ free_data_superblock:
 	push	{r3, lr}
 	.save {r3, lr}
 	cmp	r0, r2
-	beq	.L292
-	ldr	r2, .L293
+	beq	.L295
+	ldr	r2, .L296
 	movs	r1, #0
 	ldr	r2, [r2, #2324]
 	strh	r1, [r2, r0, lsl #1]	@ movhi
 	bl	INSERT_FREE_LIST
-.L292:
+.L295:
 	movs	r0, #0
 	pop	{r3, pc}
-.L294:
+.L297:
 	.align	2
-.L293:
+.L296:
 	.word	.LANCHOR0
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -2685,29 +2775,29 @@ get_new_active_ppa:
 	ldrh	r2, [r0]
 	mov	r4, r0
 	cmp	r2, r3
-	bne	.L296
-	movw	r2, #2707
-	ldr	r1, .L309
-	ldr	r0, .L309+4
-	bl	printk
-.L296:
-	ldr	r5, .L309+8
+	bne	.L299
+	movw	r2, #2740
+	ldr	r1, .L312
+	ldr	r0, .L312+4
+	bl	sftl_printk
+.L299:
+	ldr	r5, .L312+8
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r5, #102]
 	cmp	r2, r3
-	bne	.L297
-	movw	r2, #2708
-	ldr	r1, .L309
-	ldr	r0, .L309+4
-	bl	printk
-.L297:
+	bne	.L300
+	movw	r2, #2741
+	ldr	r1, .L312
+	ldr	r0, .L312+4
+	bl	sftl_printk
+.L300:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L298
-	movw	r2, #2709
-	ldr	r1, .L309
-	ldr	r0, .L309+4
-	bl	printk
-.L298:
+	cbnz	r3, .L301
+	movw	r2, #2742
+	ldr	r1, .L312
+	ldr	r0, .L312+4
+	bl	sftl_printk
+.L301:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	movs	r3, #0
 	ldrh	r1, [r5, #32]
@@ -2716,10 +2806,10 @@ get_new_active_ppa:
 	adds	r2, r2, #8
 	ldrh	r0, [r4, r2, lsl #1]
 	mov	r2, r3
-.L299:
+.L302:
 	cmp	r0, r6
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	beq	.L301
+	beq	.L304
 	ldrh	r2, [r4, #4]
 	ldrh	r6, [r4, #2]
 	subs	r2, r2, #1
@@ -2727,7 +2817,7 @@ get_new_active_ppa:
 	orr	r6, r6, r0, lsl #10
 	movw	r0, #65535
 	strh	r2, [r4, #4]	@ movhi
-.L303:
+.L306:
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r1, r3
@@ -2739,21 +2829,21 @@ get_new_active_ppa:
 	add	r7, r3, #8
 	ldrh	r7, [r4, r7, lsl #1]
 	cmp	r7, r0
-	beq	.L303
+	beq	.L306
 	strb	r3, [r4, #6]
 	ldrh	r1, [r4, #2]
 	ldrh	r3, [r5, #102]
 	cmp	r1, r3
-	bne	.L295
-	cbz	r2, .L295
-	movw	r2, #2730
-	ldr	r1, .L309
-	ldr	r0, .L309+4
-	bl	printk
-.L295:
+	bne	.L298
+	cbz	r2, .L298
+	movw	r2, #2763
+	ldr	r1, .L312
+	ldr	r0, .L312+4
+	bl	sftl_printk
+.L298:
 	mov	r0, r6
 	pop	{r3, r4, r5, r6, r7, pc}
-.L301:
+.L304:
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, r1
@@ -2766,10 +2856,10 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r0, [r4, r3, lsl #1]
-	b	.L299
-.L310:
+	b	.L302
+.L313:
 	.align	2
-.L309:
+.L312:
 	.word	.LANCHOR1+111
 	.word	.LC1
 	.word	.LANCHOR0
@@ -2786,7 +2876,7 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L320
+	ldr	r3, .L323
 	mov	ip, #20
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -2795,21 +2885,21 @@ FtlGcBufInit:
 	movs	r2, #0
 	mov	r7, r3
 	str	r2, [r3, #3164]
-.L312:
+.L315:
 	ldrh	r1, [r3, #32]
 	uxth	r0, r2
 	adds	r4, r2, #1
 	cmp	r0, r1
-	bcc	.L315
-	ldr	r7, .L320
+	bcc	.L318
+	ldr	r7, .L323
 	mov	ip, #12
 	movs	r6, #0
-.L316:
+.L319:
 	ldr	r2, [r3, #3184]
 	cmp	r1, r2
-	bcc	.L319
+	bcc	.L322
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L315:
+.L318:
 	uxth	r2, r2
 	ldr	r8, [r3, #3168]
 	mul	lr, r9, r2
@@ -2840,8 +2930,8 @@ FtlGcBufInit:
 	ldr	r1, [r8, #4]
 	str	r1, [r2, #12]
 	mov	r2, r4
-	b	.L312
-.L319:
+	b	.L315
+.L322:
 	mul	r0, ip, r1
 	ldr	r4, [r3, #3168]
 	ldr	r5, [r3, #3172]
@@ -2866,10 +2956,10 @@ FtlGcBufInit:
 	add	r2, r2, r4
 	uxth	r1, r1
 	str	r2, [r0, #4]
-	b	.L316
-.L321:
+	b	.L319
+.L324:
 	.align	2
-.L320:
+.L323:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufInit, .-FtlGcBufInit
@@ -2884,7 +2974,7 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L329
+	ldr	r3, .L332
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
@@ -2893,32 +2983,32 @@ FtlGcBufFree:
 	mov	r8, r5
 	ldr	ip, [r3, #3184]
 	ldr	r6, [r3, #3168]
-.L323:
+.L326:
 	uxth	r3, r5
 	cmp	r1, r3
-	bls	.L322
+	bls	.L325
 	mla	r4, r10, r3, r0
 	movs	r2, #0
-.L324:
+.L327:
 	uxth	r3, r2
 	cmp	ip, r3
-	bls	.L325
+	bls	.L328
 	mul	r3, lr, r3
 	ldr	r7, [r4, #8]
 	adds	r2, r2, #1
 	add	r9, r6, r3
 	ldr	r3, [r6, r3]
 	cmp	r3, r7
-	bne	.L324
+	bne	.L327
 	str	r8, [r9, #8]
-.L325:
+.L328:
 	adds	r5, r5, #1
-	b	.L323
-.L322:
+	b	.L326
+.L325:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L330:
+.L333:
 	.align	2
-.L329:
+.L332:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -2933,7 +3023,7 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L338
+	ldr	r3, .L341
 	mov	ip, #12
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
@@ -2942,34 +3032,34 @@ FtlGcBufAlloc:
 	mov	r8, #20
 	ldr	r5, [r3, #3184]
 	ldr	r6, [r3, #3168]
-.L332:
+.L335:
 	uxth	r2, r4
 	cmp	r1, r2
-	bhi	.L336
+	bhi	.L339
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L336:
+.L339:
 	mov	r9, #0
-.L333:
+.L336:
 	uxth	r3, r9
 	cmp	r5, r3
-	bls	.L334
+	bls	.L337
 	mla	r3, ip, r3, r6
 	add	r9, r9, #1
 	ldr	r7, [r3, #8]
 	cmp	r7, #0
-	bne	.L333
+	bne	.L336
 	mla	r2, r8, r2, r0
 	ldr	r7, [r3]
 	str	lr, [r3, #8]
 	str	r7, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L334:
+.L337:
 	adds	r4, r4, #1
-	b	.L332
-.L339:
+	b	.L335
+.L342:
 	.align	2
-.L338:
+.L341:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -2985,24 +3075,24 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L345
+	ldr	r2, .L348
 	ldr	r3, [r2, #3188]
 	ldrh	r2, [r2, #3192]
 	add	r2, r3, r2, lsl #1
-.L341:
+.L344:
 	cmp	r3, r2
-	bne	.L343
+	bne	.L346
 	movs	r0, #0
 	bx	lr
-.L343:
+.L346:
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L341
+	bne	.L344
 	movs	r0, #1
 	bx	lr
-.L346:
+.L349:
 	.align	2
-.L345:
+.L348:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -3025,26 +3115,26 @@ FtlGcUpdatePage:
 	mov	r7, r2
 	movs	r4, #0
 	bl	P2V_block_in_plane
-	ldr	r3, .L351
+	ldr	r3, .L354
 	ldrh	r1, [r3, #3192]
 	ldr	r2, [r3, #3188]
-.L348:
+.L351:
 	uxth	ip, r4
 	cmp	ip, r1
-	bcc	.L350
-	bne	.L349
+	bcc	.L353
+	bne	.L352
 	strh	r0, [r2, ip, lsl #1]	@ movhi
 	ldrh	r0, [r3, #3192]
 	adds	r0, r0, #1
 	strh	r0, [r3, #3192]	@ movhi
-	b	.L349
-.L350:
+	b	.L352
+.L353:
 	adds	r4, r4, #1
 	add	ip, r2, r4, lsl #1
 	ldrh	ip, [ip, #-2]
 	cmp	ip, r0
-	bne	.L348
-.L349:
+	bne	.L351
+.L352:
 	ldrh	r2, [r3, #3200]
 	movs	r0, #12
 	muls	r0, r2, r0
@@ -3057,9 +3147,9 @@ FtlGcUpdatePage:
 	adds	r2, r2, #1
 	strh	r2, [r3, #3200]	@ movhi
 	pop	{r3, r4, r5, r6, r7, pc}
-.L352:
+.L355:
 	.align	2
-.L351:
+.L354:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -3078,30 +3168,30 @@ FtlGcRefreshBlock:
 	.save {r4, lr}
 	mov	r1, r0
 	mov	r4, r0
-	ldr	r0, .L356
-	bl	printk
-	ldr	r3, .L356+4
+	ldr	r0, .L359
+	bl	sftl_printk
+	ldr	r3, .L359+4
 	ldrh	r0, [r3, #3202]
 	cmp	r4, r0
-	beq	.L354
+	beq	.L357
 	ldrh	r1, [r3, #3204]
 	cmp	r4, r1
-	beq	.L354
+	beq	.L357
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L355
+	bne	.L358
 	strh	r4, [r3, #3202]	@ movhi
-.L354:
+.L357:
 	movs	r0, #0
 	pop	{r4, pc}
-.L355:
+.L358:
 	cmp	r1, r2
 	it	eq
 	strheq	r4, [r3, #3204]	@ movhi
-	b	.L354
-.L357:
+	b	.L357
+.L360:
 	.align	2
-.L356:
+.L359:
 	.word	.LC73
 	.word	.LANCHOR0
 	.fnend
@@ -3120,41 +3210,41 @@ FtlGcMarkBadPhyBlk:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
-	ldr	r4, .L362
+	ldr	r4, .L365
 	bl	P2V_block_in_plane
 	mov	r2, r5
 	mov	r6, r0
 	ldrh	r1, [r4, #3206]
-	ldr	r0, .L362+4
-	bl	printk
+	ldr	r0, .L365+4
+	bl	sftl_printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r4, #3206]
 	movs	r2, #0
 	addw	r0, r4, #3208
-.L359:
+.L362:
 	uxth	r1, r2
 	cmp	r3, r1
-	bhi	.L361
+	bhi	.L364
 	cmp	r3, #15
 	itttt	ls
 	addls	r2, r3, #1
 	strhls	r2, [r4, #3206]	@ movhi
 	addls	r4, r4, r3, lsl #1
 	strhls	r5, [r4, #3208]	@ movhi
-	b	.L360
-.L361:
+	b	.L363
+.L364:
 	adds	r2, r2, #1
 	add	r1, r0, r2, lsl #1
 	ldrh	r1, [r1, #-2]
 	cmp	r1, r5
-	bne	.L359
-.L360:
+	bne	.L362
+.L363:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L363:
+.L366:
 	.align	2
-.L362:
+.L365:
 	.word	.LANCHOR0
 	.word	.LC74
 	.fnend
@@ -3172,13 +3262,13 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L370
+	ldr	r4, .L373
 	ldrh	r3, [r4, #3206]
-	cbz	r3, .L365
+	cbz	r3, .L368
 	ldrh	r1, [r4, #3202]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L365
+	bne	.L368
 	ldrh	r2, [r4, #3242]
 	cmp	r2, r3
 	itt	cs
@@ -3192,12 +3282,12 @@ FtlGcReFreshBadBlk:
 	ldrh	r3, [r4, #3242]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3242]	@ movhi
-.L365:
+.L368:
 	movs	r0, #0
 	pop	{r4, pc}
-.L371:
+.L374:
 	.align	2
-.L370:
+.L373:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
@@ -3213,11 +3303,11 @@ ftl_malloc:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r1, .L373
+	ldr	r1, .L376
 	b	__kmalloc
-.L374:
+.L377:
 	.align	2
-.L373:
+.L376:
 	.word	37748929
 	.fnend
 	.size	ftl_malloc, .-ftl_malloc
@@ -3247,469 +3337,165 @@ rknand_print_hex:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r3, r4, lr}
-	.save {r4, lr}
-	.pad #16
-	muls	r3, r2, r3
-	movs	r4, #0
-	str	r1, [sp, #4]
-	mov	r1, r0
-	str	r4, [sp, #12]
-	str	r3, [sp, #8]
-	movs	r3, #16
-	str	r2, [sp]
-	movs	r2, #2
-	ldr	r0, .L377
-	bl	print_hex_dump
-	add	sp, sp, #16
-	@ sp needed
-	pop	{r4, pc}
-.L378:
-	.align	2
-.L377:
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r6, #0
+	ldr	fp, .L388+16
+	mov	r10, r0
+	mov	r7, r1
+	mov	r8, r2
+	mov	r9, r3
+	mov	r5, r6
+	mov	r4, r6
+.L380:
+	cmp	r4, r9
+	bcc	.L386
+	ldr	r0, .L388
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	b	sftl_printk
+.L386:
+	cbnz	r5, .L381
+	mov	r3, r6
+	mov	r2, r7
+	mov	r1, r10
+	ldr	r0, .L388+4
+	bl	sftl_printk
+.L381:
+	cmp	r8, #4
+	bne	.L382
+	ldr	r1, [r7, r4, lsl #2]
+	ldr	r0, .L388+8
+.L387:
+	adds	r5, r5, #1
+	bl	sftl_printk
+	cmp	r5, #15
+	bls	.L385
+	movs	r5, #0
+	ldr	r0, .L388
+	bl	sftl_printk
+.L385:
+	adds	r4, r4, #1
+	add	r6, r6, r8
+	b	.L380
+.L382:
+	cmp	r8, #2
+	ittee	eq
+	ldrheq	r1, [r7, r4, lsl #1]
+	moveq	r0, fp
+	ldrbne	r1, [r7, r4]	@ zero_extendqisi2
+	ldrne	r0, .L388+12
+	b	.L387
+.L389:
+	.align	2
+.L388:
+	.word	.LC79
 	.word	.LC75
+	.word	.LC76
+	.word	.LC78
+	.word	.LC77
 	.fnend
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	1
-	.global	FlashReadPages
+	.global	FlashEraseBlocks
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FlashReadPages, %function
-FlashReadPages:
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
-	mov	r8, r1
-	ldr	r5, .L397
+	mov	r8, r2
+	ldr	r5, .L406
 	mov	r4, r0
-	movs	r6, #0
-	ldr	r10, .L397+4
+	mov	fp, r0
+	movs	r7, #0
+	mov	r10, #-1
+	.pad #20
+	sub	sp, sp, #20
 	ldrh	r9, [r5, #12]
-	ldr	fp, .L397+8
-.L380:
+	lsl	r3, r9, #3
+	str	r3, [sp, #4]
+.L391:
+	cmp	r7, r8
+	beq	.L395
+	add	r2, sp, #8
+	add	r1, sp, #12
+	mov	r0, fp
+	bl	l2p_addr_tran
+	ldr	r6, [sp, #8]
+	cbnz	r6, .L392
+	ldr	r2, [sp, #12]
+	ldr	r3, [sp, #4]
+	cmp	r3, r2
+	bls	.L392
+	ldr	r5, .L406+4
+	ldr	r7, .L406+8
+	ldr	r9, .L406+16
+	b	.L405
+.L394:
+	mov	r3, #-1
+	ldr	r2, [sp, #12]
+	str	r3, [r4, #-20]
+	mov	r1, r5
+	mov	r0, r7
+	adds	r6, r6, #1
+	bl	sftl_printk
+	movs	r3, #16
+	movs	r2, #4
+	ldr	r1, [r4, #-12]
+	mov	r0, r9
+	bl	rknand_print_hex
+	movs	r3, #4
+	ldr	r1, [r4, #-8]
+	mov	r2, r3
+	ldr	r0, .L406+12
+	bl	rknand_print_hex
+.L405:
 	cmp	r6, r8
-	bne	.L387
+	add	r4, r4, #20
+	bne	.L394
+	bl	dump_stack
+.L395:
 	movs	r0, #0
-	add	sp, sp, #12
+	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L387:
-	ldr	r3, [r4, #8]
-	cbz	r3, .L381
-	ldr	r3, [r4, #12]
-	cbnz	r3, .L382
-.L381:
-	movs	r2, #76
-	mov	r1, r10
-	mov	r0, fp
-	bl	printk
-.L382:
-	mov	r2, sp
-	add	r1, sp, #4
-	mov	r0, r4
-	bl	l2p_addr_tran
-	ldr	r3, [r4, #12]
-	ldr	r2, [r4, #8]
-	ldr	r1, [sp, #4]
-	ldrb	r0, [sp]	@ zero_extendqisi2
-	ldr	r7, [r5, #3256]
-	blx	r7
-	str	r0, [r4]
-	ldrh	r3, [r5, #14]
-	cmp	r3, #4
-	bne	.L384
-	ldr	r3, [r4, #12]
-	ldr	r2, [r4, #8]
-	ldr	r1, [sp, #4]
-	adds	r3, r3, #8
-	ldrb	r0, [sp]	@ zero_extendqisi2
-	add	r2, r2, #2048
-	ldr	r7, [r5, #3256]
+.L392:
+	ldr	r2, [r5, #3248]
+	uxtb	r0, r6
+	ldr	r1, [sp, #12]
+	blx	r2
+	cmp	r0, #0
+	mov	r2, r0
+	it	ne
+	movne	r2, r10
+	str	r2, [fp]
+	ldrh	r2, [r5, #14]
+	cmp	r2, #4
+	bne	.L399
+	ldr	r1, [sp, #12]
+	ldr	r2, [r5, #3248]
+	ldrb	r0, [sp, #8]	@ zero_extendqisi2
 	add	r1, r1, r9
-	blx	r7
-	adds	r0, r0, #1
-	beq	.L385
-	ldr	r3, [r4, #12]
-	ldr	r2, [r3, #12]
-	adds	r2, r2, #1
-	bne	.L384
-	ldr	r2, [r3, #8]
-	adds	r2, r2, #1
-	bne	.L384
-	ldr	r3, [r3]
-	adds	r3, r3, #1
-	beq	.L384
-.L385:
-	mov	r3, #-1
-	str	r3, [r4]
-.L384:
-	adds	r6, r6, #1
-	adds	r4, r4, #20
-	b	.L380
-.L398:
+	blx	r2
+	cbz	r0, .L399
+	str	r10, [fp]
+.L399:
+	adds	r7, r7, #1
+	add	fp, fp, #20
+	b	.L391
+.L407:
 	.align	2
-.L397:
+.L406:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+130
-	.word	.LC1
-	.fnend
-	.size	FlashReadPages, .-FlashReadPages
-	.align	1
-	.global	FtlLoadFactoryBbt
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlLoadFactoryBbt, %function
-FtlLoadFactoryBbt:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movs	r6, #0
-	ldr	r4, .L409
-	movw	r10, #61664
-	ldr	r3, [r4, #3280]
-	add	r7, r4, #162
-	ldr	r8, [r4, #3284]
-	addw	r9, r4, #3260
-	str	r3, [r4, #3268]
-	str	r8, [r4, #3272]
-.L400:
-	ldrh	r3, [r4, #54]
-	cmp	r6, r3
-	bcc	.L405
-	movs	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L405:
-	ldrh	r5, [r4, #98]
-	movw	r3, #65535
-	strh	r3, [r7, #2]!	@ movhi
-.L402:
-	ldrh	r3, [r4, #98]
-	subs	r5, r5, #1
-	uxth	r5, r5
-	sub	r2, r3, #16
-	cmp	r5, r2
-	ble	.L403
-	mla	r3, r6, r3, r5
-	movs	r2, #1
-	mov	r1, r2
-	mov	r0, r9
-	lsls	r3, r3, #10
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	adds	r3, r3, #1
-	beq	.L402
-	ldrh	r3, [r8]
-	cmp	r3, r10
-	bne	.L402
-	strh	r5, [r7]	@ movhi
-.L403:
-	adds	r6, r6, #1
-	b	.L400
-.L410:
-	.align	2
-.L409:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
-	.align	1
-	.global	FtlGetLastWrittenPage
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlGetLastWrittenPage, %function
-FtlGetLastWrittenPage:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 88
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L419
-	cmp	r1, #1
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	lsl	r7, r0, #10
-	.pad #88
-	sub	sp, sp, #88
-	mov	r2, r1
-	mov	r6, r1
-	it	eq
-	ldrheq	r4, [r3, #104]
-	mov	r1, #1
-	it	ne
-	ldrhne	r4, [r3, #102]
-	add	r0, sp, #4
-	ldr	r3, .L419+4
-	subs	r4, r4, #1
-	sxth	r5, r4
-	str	r3, [sp, #12]
-	add	r3, sp, #24
-	str	r3, [sp, #16]
-	orr	r3, r5, r7
-	str	r3, [sp, #8]
-	bl	FlashReadPages
-	ldr	r3, [sp, #24]
-	adds	r3, r3, #1
-	bne	.L414
-	mov	r8, #0
-.L415:
-	cmp	r8, r5
-	ble	.L418
-.L414:
-	mov	r0, r5
-	add	sp, sp, #88
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L418:
-	add	r4, r8, r5
-	mov	r2, r6
-	add	r4, r4, r4, lsr #31
-	movs	r1, #1
-	add	r0, sp, #4
-	asrs	r4, r4, #1
-	sxth	r3, r4
-	orrs	r3, r3, r7
-	str	r3, [sp, #8]
-	bl	FlashReadPages
-	ldr	r3, [sp, #24]
-	adds	r3, r3, #1
-	bne	.L416
-	ldr	r3, [sp, #28]
-	adds	r3, r3, #1
-	bne	.L416
-	subs	r4, r4, #1
-	sxth	r5, r4
-	b	.L415
-.L416:
-	adds	r4, r4, #1
-	sxth	r8, r4
-	b	.L415
-.L420:
-	.align	2
-.L419:
-	.word	.LANCHOR0
-	.word	ftl_temp_buf
-	.fnend
-	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
-	.align	1
-	.global	FlashProgPages
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FlashProgPages, %function
-FlashProgPages:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 40
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	fp, r1
-	ldr	r6, .L451
-	mov	r9, r2
-	mov	r4, r0
-	mov	r5, r0
-	mov	r8, #0
-	.pad #44
-	sub	sp, sp, #44
-	ldrh	r10, [r6, #12]
-	str	r3, [sp, #4]
-.L422:
-	cmp	r8, fp
-	bne	.L430
-	ldr	r3, [sp, #4]
-	cmp	r3, #0
-	bne	.L437
-.L450:
-	movs	r0, #0
-	add	sp, sp, #44
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L430:
-	ldr	r3, [r5, #8]
-	cbz	r3, .L423
-	ldr	r3, [r5, #12]
-	cbnz	r3, .L424
-.L423:
-	movs	r2, #106
-	ldr	r1, .L451+4
-	ldr	r0, .L451+8
-	bl	printk
-.L424:
-	add	r2, sp, #12
-	add	r1, sp, #16
-	mov	r0, r5
-	bl	l2p_addr_tran
-	ldr	r3, [r5, #12]
-	ldr	r2, [r5, #8]
-	ldr	r1, [sp, #16]
-	ldrb	r0, [sp, #12]	@ zero_extendqisi2
-	ldr	r7, [r6, #3252]
-	blx	r7
-	cbnz	r0, .L425
-	str	r0, [r5]
-.L426:
-	ldrh	r3, [r6, #14]
-	cmp	r3, #4
-	bne	.L428
-	ldr	r3, [r5, #12]
-	ldr	r2, [r5, #8]
-	ldr	r1, [sp, #16]
-	adds	r3, r3, #8
-	ldrb	r0, [sp, #12]	@ zero_extendqisi2
-	add	r2, r2, #2048
-	ldr	r7, [r6, #3252]
-	add	r1, r1, r10
-	blx	r7
-	cbz	r0, .L428
-	mov	r3, #-1
-	str	r3, [r5]
-.L428:
-	add	r8, r8, #1
-	adds	r5, r5, #20
-	b	.L422
-.L425:
-	mov	r3, #-1
-	str	r3, [r5]
-	b	.L426
-.L435:
-	movs	r3, #0
-	mov	r2, r9
-	str	r3, [r7]
-	movs	r1, #1
-	str	r3, [r6, #3288]
-	add	r0, sp, #20
-	ldr	r3, [r4, #4]
-	str	r7, [sp, #28]
-	str	r10, [sp, #32]
-	str	r3, [sp, #24]
-	bl	FlashReadPages
-	ldr	r3, [sp, #20]
-	adds	r2, r3, #1
-	bne	.L432
-	ldr	r1, [r4, #4]
-	mov	r0, fp
-	str	r3, [sp, #4]
-	bl	printk
-	ldr	r3, [sp, #4]
-	str	r3, [r4]
-.L432:
-	ldr	r3, [r4, #12]
-	cbz	r3, .L433
-	ldr	r2, [r3]
-	ldr	r3, [r6, #3288]
-	cmp	r2, r3
-	beq	.L433
-	ldr	r1, [r4, #4]
-	ldr	r0, .L451+12
-	bl	printk
-	mov	r3, #-1
-	str	r3, [r4]
-.L433:
-	ldr	r3, [r4, #8]
-	cbz	r3, .L434
-	ldr	r2, [r3]
-	ldr	r3, [r7]
-	cmp	r2, r3
-	beq	.L434
-	ldr	r1, [r4, #4]
-	ldr	r0, .L451+16
-	bl	printk
-	mov	r3, #-1
-	str	r3, [r4]
-.L434:
-	adds	r5, r5, #1
-	adds	r4, r4, #20
-.L431:
-	cmp	r8, r5
-	bne	.L435
-	b	.L450
-.L437:
-	movs	r5, #0
-	ldr	r7, .L451+20
-	ldr	r10, .L451+24
-	ldr	fp, .L451+28
-	b	.L431
-.L452:
-	.align	2
-.L451:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+145
-	.word	.LC1
-	.word	.LC77
-	.word	.LC78
-	.word	check_buf
-	.word	.LANCHOR0+3288
-	.word	.LC76
-	.fnend
-	.size	FlashProgPages, .-FlashProgPages
-	.align	1
-	.global	FlashEraseBlocks
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FlashEraseBlocks, %function
-FlashEraseBlocks:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
-	.save {r4, r5, r6, r7, r8, r9, lr}
-	.pad #12
-	mov	r7, r2
-	ldr	r4, .L464
-	mov	r5, r0
-	movs	r6, #0
-	mov	r9, #-1
-	ldrh	r8, [r4, #12]
-.L454:
-	cmp	r6, r7
-	bne	.L460
-	movs	r0, #0
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L460:
-	mov	r2, sp
-	add	r1, sp, #4
-	mov	r0, r5
-	bl	l2p_addr_tran
-	ldr	r3, [r4, #3248]
-	ldr	r1, [sp, #4]
-	ldrb	r0, [sp]	@ zero_extendqisi2
-	blx	r3
-	cmp	r0, #0
-	mov	r3, r0
-	it	ne
-	movne	r3, r9
-	str	r3, [r5]
-	ldrh	r3, [r4, #14]
-	cmp	r3, #4
-	bne	.L458
-	ldr	r1, [sp, #4]
-	ldr	r3, [r4, #3248]
-	ldrb	r0, [sp]	@ zero_extendqisi2
-	add	r1, r1, r8
-	blx	r3
-	cbz	r0, .L458
-	str	r9, [r5]
-.L458:
-	adds	r6, r6, #1
-	adds	r5, r5, #20
-	b	.L454
-.L465:
-	.align	2
-.L464:
-	.word	.LANCHOR0
+	.word	.LC80
+	.word	.LC82
+	.word	.LC81
 	.fnend
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	1
@@ -3730,15 +3516,15 @@ FtlFreeSysBlkQueueIn:
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
 	cmp	r3, r2
-	bhi	.L466
-	ldr	r4, .L475
+	bhi	.L408
+	ldr	r4, .L417
 	ldrh	r3, [r4, #218]
 	cmp	r3, #1024
-	beq	.L466
-	cbz	r1, .L468
+	beq	.L408
+	cbz	r1, .L410
 	bl	P2V_block_in_plane
 	mov	r6, r0
-	ldr	r0, [r4, #3800]
+	ldr	r0, [r4, #3260]
 	lsls	r3, r5, #10
 	movs	r2, #1
 	mov	r1, r2
@@ -3751,7 +3537,7 @@ FtlFreeSysBlkQueueIn:
 	ldr	r3, [r4, #2560]
 	adds	r3, r3, #1
 	str	r3, [r4, #2560]
-.L468:
+.L410:
 	ldrh	r3, [r4, #218]
 	adds	r3, r3, #1
 	strh	r3, [r4, #218]	@ movhi
@@ -3761,247 +3547,15 @@ FtlFreeSysBlkQueueIn:
 	ubfx	r3, r3, #0, #10
 	strh	r5, [r2, #220]	@ movhi
 	strh	r3, [r4, #216]	@ movhi
-.L466:
+.L408:
 	pop	{r4, r5, r6, pc}
-.L476:
+.L418:
 	.align	2
-.L475:
+.L417:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
 	.align	1
-	.global	FtlLowFormatEraseBlock
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlLowFormatEraseBlock, %function
-FtlLowFormatEraseBlock:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 16
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r10, #0
-	ldr	r4, .L522
-	mov	r7, r1
-	mov	r6, r10
-	mov	r5, r10
-	mov	r9, #20
-	.pad #20
-	sub	sp, sp, #20
-	mov	fp, r4
-	str	r0, [sp]
-	str	r0, [r4, #3804]
-.L478:
-	ldrh	r1, [r4, #32]
-	uxth	r3, r10
-	cmp	r1, r3
-	bhi	.L483
-	cmp	r6, #0
-	beq	.L477
-	mov	r8, #0
-	mov	r9, #20
-	mov	r2, r6
-	movs	r1, #0
-	ldr	r0, [r4, #3800]
-	bl	FlashEraseBlocks
-.L486:
-	uxth	r3, r8
-	cmp	r6, r3
-	bhi	.L488
-	cmp	r7, #0
-	beq	.L505
-	ldrh	r3, [r4, #104]
-	mov	r10, #1
-	str	r3, [sp, #4]
-	lsrs	r3, r3, #2
-	str	r3, [sp, #8]
-.L489:
-	mov	r8, #0
-	mov	fp, #20
-.L499:
-	mov	r9, #0
-	mov	r6, r9
-.L490:
-	ldrh	r1, [r4, #32]
-	uxth	r3, r9
-	cmp	r1, r3
-	bhi	.L494
-	cbz	r6, .L477
-	mov	r9, #0
-	movs	r3, #1
-	mov	r2, r10
-	mov	r1, r6
-	ldr	r0, [r4, #3800]
-	bl	FlashProgPages
-.L496:
-	uxth	r3, r9
-	cmp	r6, r3
-	bhi	.L498
-	ldr	r3, [sp, #8]
-	add	r8, r8, r3
-	ldr	r3, [sp, #4]
-	uxth	r8, r8
-	cmp	r3, r8
-	bhi	.L499
-	mov	r8, #0
-	mov	r9, #20
-.L500:
-	uxth	r3, r8
-	cmp	r6, r3
-	bhi	.L502
-	ldr	r3, [sp]
-	cmp	r3, #63
-	bls	.L503
-	cbz	r7, .L477
-.L503:
-	mov	r2, r6
-	mov	r1, r10
-	ldr	r0, [r4, #3800]
-	bl	FlashEraseBlocks
-.L477:
-	mov	r0, r5
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L483:
-	uxth	r3, r10
-	ldr	r0, [r4, #3800]
-	movs	r2, #0
-	mul	r1, r9, r3
-	add	r3, r3, r4
-	str	r2, [r0, r1]
-	ldr	r1, [sp]
-	ldrb	r0, [r3, #60]	@ zero_extendqisi2
-	bl	V2P_block
-	mov	r8, r0
-	cbz	r7, .L479
-	bl	IsBlkInVendorPart
-	cbnz	r0, .L480
-.L479:
-	mov	r0, r8
-	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L481
-	ldr	r1, [r4, #3800]
-	lsl	r3, r8, #10
-	ldr	r0, [fp, #3812]
-	mla	r1, r9, r6, r1
-	str	r3, [r1, #4]
-	ldr	r3, [r4, #3808]
-	str	r3, [r1, #8]
-	ldrh	r3, [r4, #112]
-	muls	r3, r6, r3
-	add	r6, r6, #1
-	it	mi
-	addmi	r3, r3, #3
-	uxth	r6, r6
-	bic	r3, r3, #3
-	add	r3, r3, r0
-	str	r3, [r1, #12]
-.L480:
-	add	r10, r10, #1
-	b	.L478
-.L481:
-	adds	r5, r5, #1
-	uxth	r5, r5
-	b	.L480
-.L488:
-	mul	r3, r9, r8
-	ldr	r2, [r4, #3800]
-	adds	r1, r2, r3
-	ldr	r3, [r2, r3]
-	adds	r3, r3, #1
-	bne	.L487
-	ldr	r0, [r1, #4]
-	adds	r5, r5, #1
-	uxth	r5, r5
-	ubfx	r0, r0, #10, #16
-	bl	FtlBbmMapBadBlock
-.L487:
-	add	r8, r8, #1
-	b	.L486
-.L505:
-	movs	r3, #6
-	mov	r10, r7
-	str	r3, [sp, #8]
-	movs	r3, #1
-	str	r3, [sp, #4]
-	b	.L489
-.L494:
-	uxth	r3, r9
-	ldr	r0, [r4, #3800]
-	movs	r2, #0
-	mul	r1, fp, r3
-	add	r3, r3, r4
-	str	r2, [r0, r1]
-	ldr	r1, [sp]
-	ldrb	r0, [r3, #60]	@ zero_extendqisi2
-	bl	V2P_block
-	str	r0, [sp, #12]
-	cbz	r7, .L491
-	bl	IsBlkInVendorPart
-	cbnz	r0, .L492
-.L491:
-	ldr	r0, [sp, #12]
-	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L492
-	ldr	r1, [r4, #3800]
-	ldr	r3, [sp, #12]
-	ldr	r2, .L522
-	mla	r1, fp, r6, r1
-	ldr	r0, [r2, #3808]
-	add	r3, r8, r3, lsl #10
-	str	r3, [r1, #4]
-	ldr	r3, [r4, #3816]
-	str	r3, [r1, #8]
-	ldrh	r3, [r4, #112]
-	muls	r3, r6, r3
-	add	r6, r6, #1
-	it	mi
-	addmi	r3, r3, #3
-	uxth	r6, r6
-	bic	r3, r3, #3
-	add	r3, r3, r0
-	str	r3, [r1, #12]
-.L492:
-	add	r9, r9, #1
-	b	.L490
-.L498:
-	mul	r3, fp, r9
-	ldr	r2, [r4, #3800]
-	adds	r1, r2, r3
-	ldr	r3, [r2, r3]
-	cbz	r3, .L497
-	ldr	r0, [r1, #4]
-	adds	r5, r5, #1
-	uxth	r5, r5
-	ubfx	r0, r0, #10, #16
-	bl	FtlBbmMapBadBlock
-.L497:
-	add	r9, r9, #1
-	b	.L496
-.L502:
-	cbz	r7, .L501
-	mul	r3, r9, r8
-	ldr	r2, [r4, #3800]
-	adds	r1, r2, r3
-	ldr	r3, [r2, r3]
-	cbnz	r3, .L501
-	ldr	r0, [r1, #4]
-	movs	r1, #1
-	ubfx	r0, r0, #10, #16
-	bl	FtlFreeSysBlkQueueIn
-.L501:
-	add	r8, r8, #1
-	b	.L500
-.L523:
-	.align	2
-.L522:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
-	.align	1
 	.global	FtlFreeSysBlkQueueOut
 	.syntax unified
 	.thumb
@@ -4012,61 +3566,51 @@ FtlFreeSysBlkQueueOut:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
-	ldr	r4, .L531
-	ldr	r6, .L531+4
-.L525:
-	ldrh	r1, [r4, #218]
-	cbz	r1, .L526
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r4, .L424
+	ldrh	r2, [r4, #218]
+	cbz	r2, .L423
 	ldrh	r3, [r4, #214]
-	subs	r1, r1, #1
-	strh	r1, [r4, #218]	@ movhi
-	add	r2, r4, r3, lsl #1
+	subs	r2, r2, #1
+	ldr	r0, [r4, #3260]
+	strh	r2, [r4, #218]	@ movhi
+	movs	r2, #1
+	add	r1, r4, r3, lsl #1
 	adds	r3, r3, #1
 	ubfx	r3, r3, #0, #10
-	ldrh	r5, [r2, #220]
+	ldrh	r5, [r1, #220]
+	mov	r1, r2
 	strh	r3, [r4, #214]	@ movhi
-	mov	r0, r5
-	bl	P2V_block_in_plane
-	mov	r7, r0
-	ldr	r0, [r4, #3800]
 	lsls	r3, r5, #10
-	movs	r2, #1
-	mov	r1, r2
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-	ldr	r2, [r4, #2328]
-	ldrh	r3, [r2, r7, lsl #1]
-	adds	r3, r3, #1
-	strh	r3, [r2, r7, lsl #1]	@ movhi
-	movw	r2, #65533
 	ldr	r3, [r4, #2560]
 	adds	r3, r3, #1
 	str	r3, [r4, #2560]
+.L420:
 	subs	r3, r5, #1
+	movw	r2, #65533
 	uxth	r3, r3
 	cmp	r3, r2
-	bls	.L530
+	bls	.L421
 	ldrh	r2, [r4, #218]
 	mov	r1, r5
-	mov	r0, r6
-	bl	printk
-	b	.L525
-.L526:
-	ldr	r0, .L531+8
-	bl	printk
-.L529:
-	b	.L529
-.L530:
+	ldr	r0, .L424+4
+	bl	sftl_printk
+.L422:
+	b	.L422
+.L423:
+	movw	r5, #65535
+	b	.L420
+.L421:
 	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, pc}
-.L532:
+	pop	{r3, r4, r5, pc}
+.L425:
 	.align	2
-.L531:
+.L424:
 	.word	.LANCHOR0
-	.word	.LC80
-	.word	.LC79
+	.word	.LC83
 	.fnend
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	1
@@ -4086,16 +3630,16 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r1, [r0, #10]
 	movs	r3, #0
 	ldr	r2, [r0, #12]
-.L534:
+.L427:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L537
+	bcs	.L430
 	mov	r7, r2
 	adds	r3, r3, #1
 	ldrh	r6, [r7]
 	adds	r2, r2, #2
 	cmp	r6, #0
-	bne	.L534
+	bne	.L427
 	bl	FtlFreeSysBlkQueueOut
 	subs	r3, r0, #1
 	movw	r2, #65533
@@ -4103,14 +3647,14 @@ ftl_map_blk_alloc_new_blk:
 	mov	r1, r0
 	strh	r0, [r7]	@ movhi
 	cmp	r3, r2
-	bls	.L535
-	ldr	r3, .L541
-	ldr	r0, .L541+4
+	bls	.L428
+	ldr	r3, .L434
+	ldr	r0, .L434+4
 	ldrh	r2, [r3, #218]
-	bl	printk
-.L536:
-	b	.L536
-.L535:
+	bl	sftl_printk
+.L429:
+	b	.L429
+.L428:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	strh	r5, [r4]	@ movhi
@@ -4119,89 +3663,27 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L537:
+.L430:
 	ldrh	r3, [r4, #10]
 	cmp	r3, r5
-	bhi	.L539
-	movw	r2, #581
-	ldr	r1, .L541+8
-	ldr	r0, .L541+12
-	bl	printk
-.L539:
+	bhi	.L432
+	movw	r2, #578
+	ldr	r1, .L434+8
+	ldr	r0, .L434+12
+	bl	sftl_printk
+.L432:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L542:
+.L435:
 	.align	2
-.L541:
+.L434:
 	.word	.LANCHOR0
-	.word	.LC81
-	.word	.LANCHOR1+160
+	.word	.LC84
+	.word	.LANCHOR1+147
 	.word	.LC1
 	.fnend
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	1
-	.global	FlashTestBlk
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FlashTestBlk, %function
-FlashTestBlk:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 88
-	@ frame_needed = 0, uses_anonymous_args = 0
-	cmp	r0, #11
-	push	{r4, r5, lr}
-	.save {r4, r5, lr}
-	mov	r4, r0
-	.pad #92
-	sub	sp, sp, #92
-	bls	.L545
-	ldr	r5, .L546
-	add	r0, sp, #24
-	movs	r2, #32
-	movs	r1, #165
-	lsls	r4, r4, #10
-	str	r0, [sp, #16]
-	str	r5, [sp, #12]
-	bl	memset
-	movs	r2, #1
-	mov	r3, #1515870810
-	mov	r1, r2
-	add	r0, sp, #4
-	str	r3, [r5]
-	str	r3, [r5, #4]
-	str	r4, [sp, #8]
-	bl	FlashEraseBlocks
-	movs	r3, #1
-	add	r0, sp, #4
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r4, [sp, #4]
-	movs	r2, #1
-	movs	r1, #0
-	add	r0, sp, #4
-	adds	r4, r4, #0
-	it	ne
-	movne	r4, #1
-	negs	r4, r4
-	bl	FlashEraseBlocks
-.L543:
-	mov	r0, r4
-	add	sp, sp, #92
-	@ sp needed
-	pop	{r4, r5, pc}
-.L545:
-	movs	r4, #0
-	b	.L543
-.L547:
-	.align	2
-.L546:
-	.word	ftl_temp_buf
-	.fnend
-	.size	FlashTestBlk, .-FlashTestBlk
-	.align	1
 	.global	FlashGetBadBlockList
 	.syntax unified
 	.thumb
@@ -4215,7 +3697,7 @@ FlashGetBadBlockList:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r2, #256
-	ldr	r5, .L555
+	ldr	r5, .L443
 	mov	r4, r0
 	mov	r6, r1
 	movs	r1, #255
@@ -4226,31 +3708,31 @@ FlashGetBadBlockList:
 	blx	r3
 	uxth	r0, r0
 	cmp	r0, #50
-	bls	.L549
+	bls	.L437
 	mov	r2, #256
 	movs	r1, #255
 	mov	r0, r4
 	bl	memset
 	movs	r0, #0
-.L549:
+.L437:
 	ldrh	r3, [r5, #14]
 	cmp	r3, #4
-	bne	.L554
+	bne	.L442
 	add	r1, r4, r0, lsl #1
 	mov	r3, r4
-.L551:
+.L439:
 	cmp	r3, r1
-	bne	.L552
-.L554:
+	bne	.L440
+.L442:
 	pop	{r4, r5, r6, pc}
-.L552:
+.L440:
 	ldrh	r2, [r3]
 	lsrs	r2, r2, #1
 	strh	r2, [r3], #2	@ movhi
-	b	.L551
-.L556:
+	b	.L439
+.L444:
 	.align	2
-.L555:
+.L443:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
@@ -4268,9 +3750,9 @@ ftl_memset:
 	push	{r4, lr}
 	.save {r4, lr}
 	mov	r4, r0
-	cbz	r2, .L558
+	cbz	r2, .L446
 	bl	memset
-.L558:
+.L446:
 	mov	r0, r4
 	pop	{r4, pc}
 	.fnend
@@ -4289,12 +3771,12 @@ FtlMemInit:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movw	r3, #65535
-	ldr	r4, .L663
+	ldr	r4, .L551
 	movs	r5, #0
-	movs	r6, #12
-	movs	r7, #20
+	movs	r7, #12
+	movs	r6, #20
 	ldrh	r0, [r4, #106]
-	str	r3, [r4, #3824]
+	str	r3, [r4, #3268]
 	strh	r3, [r4, #3202]	@ movhi
 	strh	r3, [r4, #3204]	@ movhi
 	movs	r3, #32
@@ -4315,76 +3797,86 @@ FtlMemInit:
 	str	r5, [r4, #2560]
 	str	r5, [r4, #2564]
 	str	r5, [r4, #2568]
-	str	r5, [r4, #3820]
+	str	r5, [r4, #3264]
 	str	r5, [r4, #3160]
-	str	r5, [r4, #3828]
+	str	r5, [r4, #3272]
 	str	r5, [r4, #3152]
-	str	r5, [r4, #3804]
+	str	r5, [r4, #3276]
 	strh	r5, [r4, #3156]	@ movhi
 	strh	r5, [r4, #3206]	@ movhi
 	strh	r5, [r4, #3242]	@ movhi
 	bl	ftl_malloc
 	str	r0, [r4, #3188]
 	ldrh	r0, [r4, #106]
-	muls	r0, r6, r0
+	muls	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
 	str	r0, [r4, #3196]
-	muls	r7, r3, r7
-	lsl	r8, r7, #2
+	muls	r6, r3, r6
+	lsl	r8, r6, #2
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3832]
-	mov	r0, r7
+	str	r0, [r4, #3280]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3836]
+	str	r0, [r4, #3284]
 	mov	r0, r8
 	bl	ftl_malloc
-	str	r0, [r4, #3840]
-	mov	r0, r7
+	str	r0, [r4, #3288]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3800]
-	mov	r0, r7
+	str	r0, [r4, #3260]
+	mov	r0, r6
 	bl	ftl_malloc
 	ldrh	r3, [r4, #32]
-	ldrh	r7, [r4, #110]
+	ldrh	r6, [r4, #110]
 	str	r0, [r4, #3180]
 	lsls	r3, r3, #1
-	mov	r0, r7
+	mov	r0, r6
 	adds	r3, r3, #1
 	str	r3, [r4, #3184]
 	bl	ftl_malloc
-	str	r0, [r4, #3280]
-	mov	r0, r7
+	str	r0, [r4, #3292]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3844]
-	mov	r0, r7
+	str	r0, [r4, #3296]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3848]
+	str	r0, [r4, #3300]
 	ldr	r0, [r4, #3184]
-	muls	r0, r7, r0
+	muls	r0, r6, r0
 	bl	ftl_malloc
 	str	r0, [r4, #3172]
-	mov	r0, r7
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3816]
-	mov	r0, r7
+	str	r0, [r4, #3304]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3808]
+	str	r0, [r4, #3308]
 	ldr	r0, [r4, #3184]
-	muls	r0, r6, r0
+	muls	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r3, [r4, #112]
-	ldrh	r7, [r4, #32]
 	str	r0, [r4, #3168]
-	muls	r7, r3, r7
-	mov	r0, r7
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3284]
-	lsls	r0, r7, #2
+	str	r0, [r4, #3312]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3316]
+	ldrh	r0, [r4, #58]
+	lsls	r0, r0, #2
+	bl	ftl_malloc
+	ldrh	r3, [r4, #112]
+	ldrh	r6, [r4, #32]
+	str	r0, [r4, #3320]
+	muls	r6, r3, r6
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #3324]
+	lsls	r0, r6, #2
 	bl	ftl_malloc
 	ldrh	r3, [r4, #112]
-	str	r0, [r4, #3812]
+	str	r0, [r4, #3328]
 	ldr	r0, [r4, #3184]
 	muls	r0, r3, r0
 	bl	ftl_malloc
@@ -4392,35 +3884,35 @@ FtlMemInit:
 	ldrh	r0, [r4, #42]
 	lsls	r0, r0, #1
 	uxth	r0, r0
-	strh	r0, [r4, #3852]	@ movhi
+	strh	r0, [r4, #3332]	@ movhi
 	bl	ftl_malloc
-	ldrh	r3, [r4, #3852]
-	str	r0, [r4, #3856]
-	ldr	r0, .L663+4
+	ldrh	r3, [r4, #3332]
+	str	r0, [r4, #3336]
+	ldr	r0, .L551+4
 	addw	r3, r3, #547
 	lsrs	r3, r3, #9
 	and	r0, r0, r3, lsl #9
-	strh	r3, [r4, #3852]	@ movhi
+	strh	r3, [r4, #3332]	@ movhi
 	bl	ftl_malloc
-	ldrh	r7, [r4, #42]
-	str	r0, [r4, #3860]
+	ldrh	r6, [r4, #42]
+	str	r0, [r4, #3340]
 	adds	r0, r0, #32
 	str	r0, [r4, #2328]
-	lsls	r7, r7, #1
-	mov	r0, r7
+	lsls	r6, r6, #1
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3864]
-	mov	r0, r7
+	str	r0, [r4, #3344]
+	mov	r0, r6
 	bl	ftl_malloc
-	ldr	r7, [r4, #128]
+	ldr	r6, [r4, #128]
 	str	r0, [r4, #2324]
-	lsls	r7, r7, #1
-	mov	r0, r7
+	lsls	r6, r6, #1
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3868]
-	mov	r0, r7
+	str	r0, [r4, #3348]
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #3872]
+	str	r0, [r4, #3352]
 	ldrh	r0, [r4, #42]
 	lsrs	r0, r0, #3
 	adds	r0, r0, #4
@@ -4433,30 +3925,30 @@ FtlMemInit:
 	ldrh	r0, [r4, #120]
 	lsls	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #3876]
+	str	r0, [r4, #3356]
 	ldrh	r0, [r4, #120]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3880]
+	str	r0, [r4, #3360]
 	ldrh	r0, [r4, #122]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
 	ldrh	r2, [r4, #122]
 	mov	r1, r5
-	str	r0, [r4, #3884]
+	str	r0, [r4, #3364]
 	add	r5, r4, #180
 	lsls	r2, r2, #2
 	bl	ftl_memset
 	ldrh	r0, [r4, #136]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3888]
+	str	r0, [r4, #3368]
 	ldr	r0, [r4, #128]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #3892]
+	str	r0, [r4, #3372]
 	ldrh	r0, [r4, #138]
-	muls	r0, r6, r0
+	muls	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #138]
 	str	r0, [r4, #2492]
@@ -4464,7 +3956,7 @@ FtlMemInit:
 	muls	r0, r3, r0
 	bl	ftl_malloc
 	ldrh	r3, [r4, #42]
-	str	r0, [r4, #3896]
+	str	r0, [r4, #3376]
 	movs	r0, #6
 	muls	r0, r3, r0
 	bl	ftl_malloc
@@ -4473,153 +3965,153 @@ FtlMemInit:
 	ldrh	r3, [r4, #54]
 	adds	r0, r0, #31
 	asrs	r0, r0, #5
-	strh	r0, [r4, #3900]	@ movhi
+	strh	r0, [r4, #3380]	@ movhi
 	muls	r0, r3, r0
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	ldrh	r2, [r4, #3900]
+	ldrh	r2, [r4, #3380]
 	movs	r3, #1
 	ldrh	r6, [r4, #54]
 	str	r0, [r4, #180]
 	lsls	r2, r2, #2
 	mov	r1, r2
-.L563:
+.L451:
 	cmp	r3, r6
-	bcc	.L564
-	ldr	r2, .L663+8
+	bcc	.L452
+	ldr	r2, .L551+8
 	movs	r1, #0
 	add	r3, r2, r3, lsl #2
 	adds	r2, r2, #56
 	adds	r3, r3, #24
-.L565:
+.L453:
 	cmp	r2, r3
-	bne	.L566
-	ldr	r3, [r4, #3868]
-	cbnz	r3, .L567
-.L569:
-	ldr	r1, .L663+12
-	ldr	r0, .L663+16
-	bl	printk
+	bne	.L454
+	ldr	r3, [r4, #3348]
+	cbnz	r3, .L455
+.L457:
+	ldr	r1, .L551+12
+	ldr	r0, .L551+16
+	bl	sftl_printk
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L564:
+.L452:
 	ldr	r0, [r4, #180]
 	adds	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [r5, #4]!
-	b	.L563
-.L566:
+	b	.L451
+.L454:
 	str	r1, [r3, #4]!
-	b	.L565
-.L664:
+	b	.L453
+.L552:
 	.align	2
-.L663:
+.L551:
 	.word	.LANCHOR0
 	.word	33553920
 	.word	.LANCHOR0+152
-	.word	.LANCHOR1+186
-	.word	.LC82
-.L567:
-	ldr	r3, [r4, #3872]
+	.word	.LANCHOR1+173
+	.word	.LC85
+.L455:
+	ldr	r3, [r4, #3352]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3888]
+	beq	.L457
+	ldr	r3, [r4, #3368]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3892]
+	beq	.L457
+	ldr	r3, [r4, #3372]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #2492]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3896]
+	beq	.L457
+	ldr	r3, [r4, #3376]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #2316]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #180]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #2324]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #3188]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #3196]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3832]
+	beq	.L457
+	ldr	r3, [r4, #3280]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3840]
+	beq	.L457
+	ldr	r3, [r4, #3288]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3800]
+	beq	.L457
+	ldr	r3, [r4, #3260]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #3180]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3836]
+	beq	.L457
+	ldr	r3, [r4, #3284]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3280]
+	beq	.L457
+	ldr	r3, [r4, #3292]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3844]
+	beq	.L457
+	ldr	r3, [r4, #3296]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3848]
+	beq	.L457
+	ldr	r3, [r4, #3300]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #3172]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3816]
+	beq	.L457
+	ldr	r3, [r4, #3304]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3808]
+	beq	.L457
+	ldr	r3, [r4, #3308]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #3168]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3284]
+	beq	.L457
+	ldr	r3, [r4, #3324]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3812]
+	beq	.L457
+	ldr	r3, [r4, #3328]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #3176]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #2328]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, [r4, #3856]
+	beq	.L457
+	ldr	r3, [r4, #3336]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	ldr	r3, [r4, #148]
 	cmp	r3, #0
-	beq	.L569
-	ldr	r3, .L665
-	ldr	r2, [r3, #3876]
+	beq	.L457
+	ldr	r3, .L553
+	ldr	r2, [r3, #3356]
 	cmp	r2, #0
-	beq	.L569
-	ldr	r2, [r3, #3880]
+	beq	.L457
+	ldr	r2, [r3, #3360]
 	cmp	r2, #0
-	beq	.L569
-	ldr	r3, [r3, #3884]
+	beq	.L457
+	ldr	r3, [r3, #3364]
 	cmp	r3, #0
-	beq	.L569
+	beq	.L457
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L666:
+.L554:
 	.align	2
-.L665:
+.L553:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMemInit, .-FtlMemInit
@@ -4637,30 +4129,30 @@ FtlBbt2Bitmap:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r5, r0
-	ldr	r6, .L673
+	ldr	r6, .L561
 	mov	r7, r1
 	subs	r4, r5, #2
 	movw	r8, #65535
-	ldr	r9, .L673+4
+	ldr	r9, .L561+4
 	addw	r5, r5, #1022
-	ldrh	r2, [r6, #3900]
+	ldrh	r2, [r6, #3380]
 	movs	r1, #0
-	ldr	r10, .L673+8
+	ldr	r10, .L561+8
 	mov	r0, r7
 	lsls	r2, r2, #2
 	bl	ftl_memset
-.L670:
+.L558:
 	ldrh	r3, [r4, #2]
 	cmp	r3, r8
-	beq	.L667
+	beq	.L555
 	ldrh	r2, [r6, #98]
 	cmp	r2, r3
-	bhi	.L669
+	bhi	.L557
 	movs	r2, #74
 	mov	r1, r9
 	mov	r0, r10
-	bl	printk
-.L669:
+	bl	sftl_printk
+.L557:
 	ldrh	r3, [r4, #2]!
 	movs	r2, #1
 	cmp	r5, r4
@@ -4670,119 +4162,18 @@ FtlBbt2Bitmap:
 	ldr	r2, [r7, r1, lsl #2]
 	orr	r2, r2, r3
 	str	r2, [r7, r1, lsl #2]
-	bne	.L670
-.L667:
+	bne	.L558
+.L555:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L674:
+.L562:
 	.align	2
-.L673:
+.L561:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+197
+	.word	.LANCHOR1+184
 	.word	.LC1
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
 	.align	1
-	.global	load_l2p_region
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	load_l2p_region, %function
-load_l2p_region:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	mov	r6, r0
-	ldr	r4, .L681
-	mov	r8, r1
-	ldrh	r3, [r4, #136]
-	cmp	r3, r0
-	bcs	.L676
-	mov	r2, #492
-	ldr	r1, .L681+4
-	ldr	r0, .L681+8
-	bl	printk
-.L676:
-	ldr	r3, [r4, #3888]
-	movs	r5, #12
-	ldr	r7, [r3, r6, lsl #2]
-	cbnz	r7, .L677
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	ldrh	r2, [r4, #110]
-	movs	r1, #255
-	add	r3, r3, r5
-	ldr	r0, [r3, #8]
-	bl	ftl_memset
-	ldr	r3, [r4, #2492]
-	strh	r6, [r3, r5]	@ movhi
-	ldr	r3, [r4, #2492]
-	add	r5, r5, r3
-	str	r7, [r5, #4]
-.L678:
-	movs	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L677:
-	mul	r5, r5, r8
-	ldr	r3, [r4, #2492]
-	movs	r2, #1
-	ldr	r0, .L681+12
-	mov	r1, r2
-	str	r7, [r4, #3264]
-	add	r3, r3, r5
-	ldr	r3, [r3, #8]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	str	r3, [r4, #3272]
-	bl	FlashReadPages
-	ldr	r8, [r4, #3272]
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L679
-	mov	r2, r7
-	mov	r1, r6
-	ldr	r0, .L681+16
-	bl	printk
-	movs	r3, #4
-	ldr	r1, [r4, #3272]
-	mov	r2, r3
-	ldr	r0, .L681+20
-	bl	rknand_print_hex
-	ldrh	r3, [r4, #136]
-	movs	r2, #4
-	ldr	r1, [r4, #3888]
-	ldr	r0, .L681+24
-	bl	rknand_print_hex
-.L679:
-	ldrh	r3, [r8, #8]
-	cmp	r3, r6
-	beq	.L680
-	movw	r2, #513
-	ldr	r1, .L681+4
-	ldr	r0, .L681+8
-	bl	printk
-.L680:
-	ldr	r3, [r4, #2492]
-	movs	r1, #0
-	adds	r2, r3, r5
-	str	r1, [r2, #4]
-	strh	r6, [r3, r5]	@ movhi
-	b	.L678
-.L682:
-	.align	2
-.L681:
-	.word	.LANCHOR0
-	.word	.LANCHOR1+211
-	.word	.LC1
-	.word	.LANCHOR0+3260
-	.word	.LC83
-	.word	.LC84
-	.word	.LC85
-	.fnend
-	.size	load_l2p_region, .-load_l2p_region
-	.align	1
 	.global	ftl_free_no_use_map_blk
 	.syntax unified
 	.thumb
@@ -4791,1090 +4182,699 @@ load_l2p_region:
 	.type	ftl_free_no_use_map_blk, %function
 ftl_free_no_use_map_blk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
-	mov	r4, r0
-	ldrh	r2, [r0, #10]
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r1, #0
+	ldrh	r2, [r0, #10]
+	mov	r4, r0
 	ldr	r5, [r0, #20]
-	ldr	r9, [r0, #12]
+	ldr	r7, [r0, #12]
 	ldr	r6, [r0, #24]
 	lsls	r2, r2, #1
 	mov	r0, r5
 	bl	ftl_memset
 	movs	r3, #0
-.L684:
+.L564:
 	ldrh	r1, [r4, #6]
 	uxth	r2, r3
 	cmp	r1, r2
-	bhi	.L688
-	ldrh	fp, [r5]
+	bhi	.L568
+	ldr	r3, .L583
 	movs	r6, #0
-	ldr	r2, .L697
-	mov	r10, r6
-.L689:
-	ldrh	r1, [r4, #10]
-	uxth	r3, r6
-	cmp	r1, r3
-	bhi	.L693
-	mov	r0, r10
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L688:
+	mov	r9, r6
+	mov	fp, r6
+	ldrh	r2, [r3, #104]
+	ldrh	r3, [r4]
+	strh	r2, [r5, r3, lsl #1]	@ movhi
+	ldrh	r10, [r5]
+.L569:
+	ldrh	r3, [r4, #10]
+	uxth	r1, r6
+	cmp	r3, r1
+	bhi	.L573
+	mov	r0, r9
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L568:
 	uxth	r2, r3
 	ldr	r1, [r6, r2, lsl #2]
 	movs	r2, #0
 	ubfx	r1, r1, #10, #16
-.L685:
-	ldrh	r7, [r4, #10]
+.L565:
+	ldrh	ip, [r4, #10]
 	uxth	r0, r2
-	cmp	r7, r0
-	bhi	.L687
+	cmp	ip, r0
+	bhi	.L567
 	adds	r3, r3, #1
-	b	.L684
-.L687:
+	b	.L564
+.L567:
 	uxth	r0, r2
+	ldrh	ip, [r7, r0, lsl #1]
+	cmp	ip, r1
+	bne	.L566
+	cbz	r1, .L566
+	ldrh	ip, [r5, r0, lsl #1]
+	add	ip, ip, #1
+	strh	ip, [r5, r0, lsl #1]	@ movhi
+.L566:
 	adds	r2, r2, #1
-	ldrh	r7, [r9, r0, lsl #1]
-	cmp	r7, r1
-	ittt	eq
-	ldrheq	r7, [r5, r0, lsl #1]
-	addeq	r7, r7, #1
-	strheq	r7, [r5, r0, lsl #1]	@ movhi
-	b	.L685
-.L693:
-	ldrh	r1, [r4]
-	uxth	r7, r6
-	cmp	r1, r3
-	bne	.L690
-	ldrh	r1, [r2, #104]
-	ldrh	r0, [r4, #2]
-	cmp	r0, r1
-	it	cc
-	strhcc	r1, [r5, r7, lsl #1]	@ movhi
-.L690:
-	ldrh	r8, [r5, r7, lsl #1]
-	cmp	fp, r8
-	itt	hi
-	movhi	r10, r3
-	movhi	fp, r8
-	cmp	r8, #0
-	bne	.L692
-	ldrh	r0, [r9, r7, lsl #1]
-	cbz	r0, .L692
+	b	.L565
+.L573:
+	uxth	r2, r6
+	ldrh	r3, [r5, r2, lsl #1]
+	lsl	r8, r2, #1
+	cmp	r10, r3
+	bls	.L570
+	ldrh	r0, [r7, r2, lsl #1]
+	add	r8, r8, r7
+	cbnz	r0, .L571
+.L572:
+	adds	r6, r6, #1
+	b	.L569
+.L570:
+	cmp	r3, #0
+	bne	.L572
+	ldrh	r0, [r7, r2, lsl #1]
+	add	r8, r8, r7
+	cmp	r0, #0
+	beq	.L572
+.L574:
 	movs	r1, #1
-	str	r2, [sp, #4]
 	bl	FtlFreeSysBlkQueueIn
-	strh	r8, [r9, r7, lsl #1]	@ movhi
-	ldr	r2, [sp, #4]
+	strh	fp, [r8]	@ movhi
 	ldrh	r3, [r4, #8]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L692:
-	adds	r6, r6, #1
-	b	.L689
-.L698:
+	b	.L572
+.L571:
+	mov	r9, r1
+	mov	r10, r3
+	cmp	r3, #0
+	beq	.L574
+	b	.L572
+.L584:
 	.align	2
-.L697:
+.L583:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	1
-	.global	Ftl_write_map_blk_to_last_page
+	.global	FtlL2PDataInit
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	Ftl_write_map_blk_to_last_page, %function
-Ftl_write_map_blk_to_last_page:
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	movw	r2, #65535
-	ldrh	r3, [r0]
-	mov	r4, r0
-	ldr	r5, [r0, #12]
-	cmp	r3, r2
-	bne	.L700
-	ldrh	r3, [r0, #8]
-	cbz	r3, .L701
-	movw	r2, #641
-	ldr	r1, .L709
-	ldr	r0, .L709+4
-	bl	printk
-.L701:
-	ldrh	r3, [r4, #8]
-	adds	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	movs	r3, #0
-	strh	r0, [r5]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-	strh	r3, [r4]	@ movhi
-	ldr	r3, [r4, #28]
-	adds	r3, r3, #1
-	str	r3, [r4, #28]
-.L702:
-	movs	r0, #0
-	pop	{r3, r4, r5, r6, r7, pc}
-.L700:
-	ldrh	r6, [r5, r3, lsl #1]
+	movs	r1, #0
+	ldr	r4, .L588
+	movs	r6, #12
+	ldr	r2, [r4, #128]
+	ldr	r0, [r4, #3352]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r3, [r4, #110]
 	movs	r1, #255
-	ldrh	r3, [r0, #2]
-	ldr	r5, .L709+8
-	ldr	r2, [r0, #28]
-	ldr	r7, [r0, #24]
-	orr	r3, r3, r6, lsl #10
-	str	r3, [r5, #3264]
-	ldr	r3, [r5, #3280]
-	str	r3, [r5, #3268]
-	ldr	r3, [r5, #3284]
-	str	r3, [r5, #3272]
-	str	r2, [r3, #4]
-	movw	r2, #64245
-	strh	r2, [r3, #8]	@ movhi
-	ldrh	r2, [r0, #4]
-	strh	r6, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
-	ldrh	r2, [r5, #104]
-	ldr	r0, [r5, #3280]
-	lsls	r2, r2, #3
+	ldrh	r2, [r4, #138]
+	ldr	r0, [r4, #3376]
+	muls	r2, r3, r2
 	bl	ftl_memset
 	movs	r2, #0
-	mov	r3, r2
-.L703:
-	ldrh	r0, [r4, #6]
-	uxth	r1, r2
-	cmp	r0, r1
-	bhi	.L705
-	movs	r2, #1
-	movs	r3, #0
-	mov	r1, r2
-	ldr	r0, .L709+12
-	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
-	mov	r0, r4
-	adds	r3, r3, #1
-	strh	r3, [r4, #2]	@ movhi
-	bl	ftl_map_blk_gc
-	b	.L702
-.L705:
-	uxth	r1, r2
-	ldr	r0, [r7, r1, lsl #2]
-	cmp	r6, r0, lsr #10
-	bne	.L704
-	ldr	r0, [r5, #3280]
-	adds	r3, r3, #1
-	uxth	r3, r3
-	str	r1, [r0, r3, lsl #3]
-	ldr	r0, [r7, r1, lsl #2]
-	ldr	r1, [r5, #3280]
-	add	r1, r1, r3, lsl #3
-	str	r0, [r1, #4]
-.L704:
-	adds	r2, r2, #1
-	b	.L703
-.L710:
+	mov	r3, r4
+	movw	r1, #65535
+	mov	r7, r2
+.L586:
+	ldrh	r4, [r3, #138]
+	uxth	r0, r2
+	adds	r5, r2, #1
+	cmp	r4, r0
+	bhi	.L587
+	ldr	r2, [r3, #128]
+	strh	r1, [r3, #3386]	@ movhi
+	strh	r1, [r3, #3384]	@ movhi
+	strh	r2, [r3, #3394]	@ movhi
+	movw	r2, #61634
+	strh	r2, [r3, #3388]	@ movhi
+	ldrh	r2, [r3, #3428]
+	strh	r2, [r3, #3392]	@ movhi
+	ldrh	r2, [r3, #136]
+	strh	r2, [r3, #3390]	@ movhi
+	ldr	r2, [r3, #3348]
+	str	r2, [r3, #3396]
+	ldr	r2, [r3, #3372]
+	str	r2, [r3, #3400]
+	ldr	r2, [r3, #3352]
+	str	r2, [r3, #3404]
+	ldr	r2, [r3, #3368]
+	str	r2, [r3, #3408]
+	pop	{r3, r4, r5, r6, r7, pc}
+.L587:
+	uxth	r2, r2
+	ldr	r0, [r3, #2492]
+	mul	r4, r6, r2
+	add	ip, r0, r4
+	str	r7, [ip, #4]
+	strh	r1, [r0, r4]	@ movhi
+	ldr	r0, [r3, #2492]
+	add	r0, r0, r4
+	ldrh	r4, [r3, #110]
+	muls	r2, r4, r2
+	ldr	r4, [r3, #3376]
+	bic	r2, r2, #3
+	add	r2, r2, r4
+	str	r2, [r0, #8]
+	mov	r2, r5
+	b	.L586
+.L589:
 	.align	2
-.L709:
-	.word	.LANCHOR1+227
-	.word	.LC1
+.L588:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
 	.fnend
-	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	1
-	.global	FtlMapWritePage
+	.global	FtlVariablesInit
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r4, r0
-	ldr	r7, .L730
-	mov	r8, r1
-	mov	r10, r2
-	movs	r6, #0
-	ldr	r9, .L730+20
-	mov	r5, r7
-.L712:
-	ldr	r3, [r7, #2524]
-	adds	r3, r3, #1
-	str	r3, [r7, #2524]
-	ldrh	r3, [r7, #104]
-	ldrh	r2, [r4, #2]
-	subs	r3, r3, #1
-	cmp	r2, r3
-	bge	.L713
-	ldrh	r2, [r4]
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r5, #0
+	ldr	r4, .L591
 	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L714
-.L713:
-	mov	r0, r4
-	bl	Ftl_write_map_blk_to_last_page
-.L714:
-	ldrh	r2, [r4]
-	ldr	r3, [r4, #12]
-	ldrh	r3, [r3, r2, lsl #1]
-	cbnz	r3, .L715
-	movw	r2, #699
-	mov	r1, r9
-	ldr	r0, .L730+4
-	bl	printk
-.L715:
-	ldrh	r2, [r4]
-	ldrh	r3, [r4, #10]
-	cmp	r2, r3
-	bcc	.L716
-	mov	r2, #700
-	mov	r1, r9
-	ldr	r0, .L730+4
-	bl	printk
-.L716:
-	ldrh	r2, [r4]
-	movs	r1, #16
-	ldr	r3, [r4, #12]
-	ldr	r0, [r5, #3284]
-	ldrh	fp, [r3, r2, lsl #1]
-	ldrh	r3, [r4, #2]
-	str	r0, [r5, #3272]
-	str	r10, [r5, #3268]
-	orr	r3, r3, fp, lsl #10
-	str	r3, [r5, #3264]
+	mov	r1, r5
+	ldrh	r2, [r4, #120]
+	strh	r3, [r4, #3430]	@ movhi
+	mov	r3, #-1
+	ldr	r0, [r4, #148]
+	str	r3, [r4, #3440]
+	lsls	r2, r2, #1
+	str	r5, [r4, #3432]
+	str	r5, [r4, #3436]
+	strh	r5, [r4, #144]	@ movhi
+	bl	ftl_memset
+	ldrh	r2, [r4, #42]
+	mov	r1, r5
+	ldr	r0, [r4, #2328]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r4, #42]
+	mov	r1, r5
+	ldr	r0, [r4, #3336]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	addw	r0, r4, #2268
+	movs	r1, #48
 	bl	__memzero
-	ldr	r3, [r5, #3272]
-	ldr	r2, [r4, #28]
-	ldr	r0, .L730+8
-	strh	r8, [r3, #8]	@ movhi
-	str	r2, [r3, #4]
-	ldrh	r2, [r4, #4]
-	strh	fp, [r3, #2]	@ movhi
-	strh	r2, [r3]	@ movhi
-	movs	r3, #1
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldrh	r3, [r4, #2]
-	adds	r3, r3, #1
-	uxth	r3, r3
-	strh	r3, [r4, #2]	@ movhi
-	ldr	r2, [r5, #3260]
-	adds	r2, r2, #1
-	bne	.L717
-	ldr	r1, [r5, #3264]
-	adds	r6, r6, #1
-	ldr	r0, .L730+12
-	uxth	r6, r6
-	bl	printk
-	ldrh	r3, [r4, #2]
-	cmp	r3, #2
-	ittt	ls
-	ldrhls	r3, [r5, #104]
-	addls	r3, r3, #-1
-	strhls	r3, [r4, #2]	@ movhi
-	cmp	r6, #3
-	bls	.L719
-	mov	r2, r6
-	ldr	r1, [r5, #3264]
-	ldr	r0, .L730+16
-	bl	printk
-.L720:
-	b	.L720
-.L719:
-	ldr	r3, [r4, #32]
-	cmp	r3, #0
-	beq	.L712
-.L729:
-	b	.L729
-.L717:
-	cmp	r3, #1
-	beq	.L712
-	ldr	r2, [r5, #3264]
-	movs	r0, #0
-	ldr	r3, [r4, #24]
-	str	r2, [r3, r8, lsl #2]
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L731:
+	addw	r0, r4, #2636
+	mov	r1, #512
+	bl	__memzero
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	mov	r0, r5
+	pop	{r3, r4, r5, pc}
+.L592:
 	.align	2
-.L730:
+.L591:
 	.word	.LANCHOR0
-	.word	.LC1
-	.word	.LANCHOR0+3260
-	.word	.LC86
-	.word	.LC87
-	.word	.LANCHOR1+258
 	.fnend
-	.size	FtlMapWritePage, .-FtlMapWritePage
+	.size	FtlVariablesInit, .-FtlVariablesInit
 	.align	1
-	.global	ftl_map_blk_gc
+	.global	SupperBlkListInit
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	ftl_map_blk_gc, %function
-ftl_map_blk_gc:
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
-	mov	r4, r0
-	ldr	r6, [r0, #12]
-	ldr	r9, [r0, #24]
-	bl	ftl_free_no_use_map_blk
-	ldrh	r3, [r4, #10]
-	ldrh	r2, [r4, #8]
-	ldr	r5, .L744
-	subs	r3, r3, #4
-	cmp	r2, r3
-	blt	.L733
-	uxth	r0, r0
-	ldrh	r8, [r6, r0, lsl #1]
-	cmp	r8, #0
-	beq	.L733
-	ldr	r3, [r4, #32]
-	cbnz	r3, .L733
-	movs	r2, #1
-	str	r2, [r4, #32]
-	strh	r3, [r6, r0, lsl #1]	@ movhi
-	ldrh	r3, [r4, #8]
-	ldrh	r2, [r4, #2]
-	subs	r3, r3, #1
-	strh	r3, [r4, #8]	@ movhi
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L734
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L734:
-	ldr	fp, .L744+12
-	movs	r6, #0
-.L735:
-	ldrh	r3, [r4, #6]
-	uxth	r10, r6
-	cmp	r3, r10
-	bhi	.L739
-	movs	r1, #1
-	mov	r0, r8
-	bl	FtlFreeSysBlkQueueIn
+	movs	r5, #0
+	ldr	r4, .L604
+	movs	r2, #6
+	mov	r9, r5
+	mov	r6, r5
+	movw	fp, #65535
+	.pad #20
+	sub	sp, sp, #20
+	ldrh	r3, [r4, #42]
+	add	r10, r4, #60
+	movs	r1, #0
+	ldr	r0, [r4, #2316]
+	muls	r2, r3, r2
+	bl	ftl_memset
+	str	r5, [r4, #2340]
+	str	r5, [r4, #2320]
+	str	r5, [r4, #2332]
+	strh	r5, [r4, #2336]	@ movhi
+	strh	r5, [r4, #2344]	@ movhi
+.L594:
+	ldrh	r3, [r4, #40]
+	uxth	r8, r5
+	cmp	r8, r3
+	bcs	.L601
+	ldrh	r3, [r4, #102]
+	ldrh	r2, [r4, #32]
+	str	r3, [sp, #4]
 	movs	r3, #0
-	str	r3, [r4, #32]
-.L733:
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bcc	.L740
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L740:
-	movs	r0, #0
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L739:
-	uxth	r7, r6
-	ldr	r3, [r9, r7, lsl #2]
-	cmp	r8, r3, lsr #10
-	bne	.L736
-	ldr	r3, [r5, #3844]
-	ldr	r0, .L744+4
-	str	r3, [r5, #3268]
-	ldr	r3, [r5, #3284]
-	str	r3, [r5, #3272]
-	ldr	r2, [r9, r7, lsl #2]
+	mov	r7, r3
+	b	.L602
+.L596:
+	ldrb	r0, [r10, r3]	@ zero_extendqisi2
+	mov	r1, r8
+	str	r2, [sp, #12]
+	str	r3, [sp, #8]
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #12]
+	cbnz	r0, .L595
+	ldr	r1, [sp, #4]
+	add	r7, r7, r1
+	uxth	r7, r7
+.L595:
+	adds	r3, r3, #1
+.L602:
+	uxth	r1, r3
+	cmp	r2, r1
+	bhi	.L596
+	uxth	r3, r5
+	cbz	r7, .L597
+	mov	r1, r7
 	str	r3, [sp, #4]
-	str	r2, [r5, #3264]
-	movs	r2, #1
-	mov	r1, r2
-	bl	FlashReadPages
+	mov	r0, #32768
+	bl	__aeabi_idiv
 	ldr	r3, [sp, #4]
-	ldrh	r3, [r3, #8]
-	cmp	r3, r10
-	beq	.L737
-	movw	r2, #613
-	ldr	r1, .L744+8
-	mov	r0, fp
-	bl	printk
-.L737:
-	ldr	r3, [r5, #3260]
-	adds	r3, r3, #1
-	bne	.L738
-	movs	r3, #0
-	str	r3, [r9, r7, lsl #2]
-.L736:
+	uxth	r7, r0
+.L598:
+	ldr	r1, [r4, #2316]
+	movs	r2, #6
+	mla	r2, r2, r3, r1
+	strh	r7, [r2, #4]	@ movhi
+	ldrh	r2, [r4, #2348]
+	cmp	r2, r8
+	beq	.L599
+	ldrh	r2, [r4, #2396]
+	cmp	r2, r8
+	beq	.L599
+	ldrh	r2, [r4, #2444]
+	cmp	r2, r8
+	beq	.L599
+	ldr	r2, [r4, #2324]
+	ldrh	r3, [r2, r3, lsl #1]
+	cbnz	r3, .L600
+	add	r9, r9, #1
+	mov	r0, r8
+	uxth	r9, r9
+	bl	INSERT_FREE_LIST
+.L599:
+	adds	r5, r5, #1
+	b	.L594
+.L597:
+	ldr	r2, [r4, #2324]
+	strh	fp, [r2, r3, lsl #1]	@ movhi
+	b	.L598
+.L600:
 	adds	r6, r6, #1
-	b	.L735
-.L738:
-	ldr	r2, [r5, #3268]
-	mov	r1, r7
-	mov	r0, r4
-	bl	FtlMapWritePage
-	b	.L736
-.L745:
+	mov	r0, r8
+	uxth	r6, r6
+	bl	INSERT_DATA_LIST
+	b	.L599
+.L601:
+	strh	r6, [r4, #2336]	@ movhi
+	add	r6, r6, r9
+	cmp	r6, r3
+	strh	r9, [r4, #2344]	@ movhi
+	ble	.L603
+	movw	r2, #2170
+	ldr	r1, .L604+4
+	ldr	r0, .L604+8
+	bl	sftl_printk
+.L603:
+	movs	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L605:
 	.align	2
-.L744:
+.L604:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.word	.LANCHOR1+274
+	.word	.LANCHOR1+198
 	.word	.LC1
 	.fnend
-	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.size	SupperBlkListInit, .-SupperBlkListInit
 	.align	1
-	.global	flush_l2p_region
+	.global	FtlGcPageVarInit
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	flush_l2p_region, %function
-flush_l2p_region:
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	movs	r4, #12
-	ldr	r5, .L747
-	muls	r4, r0, r4
-	ldr	r3, [r5, #2492]
-	add	r0, r5, #3904
-	adds	r2, r3, r4
-	ldrh	r1, [r3, r4]
-	ldr	r2, [r2, #8]
-	bl	FtlMapWritePage
-	ldr	r3, [r5, #2492]
-	movs	r0, #0
-	add	r4, r4, r3
-	ldr	r3, [r4, #4]
-	bic	r3, r3, #-2147483648
-	str	r3, [r4, #4]
-	pop	{r3, r4, r5, pc}
-.L748:
+	push	{r4, lr}
+	.save {r4, lr}
+	movs	r3, #0
+	ldr	r4, .L607
+	movs	r1, #255
+	ldrh	r2, [r4, #106]
+	ldr	r0, [r4, #3188]
+	strh	r3, [r4, #3192]	@ movhi
+	strh	r3, [r4, #3200]	@ movhi
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r3, [r4, #106]
+	movs	r2, #12
+	ldr	r0, [r4, #3196]
+	movs	r1, #255
+	muls	r2, r3, r2
+	bl	ftl_memset
+	pop	{r4, lr}
+	b	FtlGcBufInit
+.L608:
 	.align	2
-.L747:
+.L607:
 	.word	.LANCHOR0
 	.fnend
-	.size	flush_l2p_region, .-flush_l2p_region
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
 	.align	1
-	.global	log2phys
+	.global	ftl_memcpy
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	log2phys, %function
-log2phys:
+	.type	ftl_memcpy, %function
+ftl_memcpy:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	mov	r7, r1
-	ldr	r4, .L763
-	mov	r9, r2
-	ldrh	r5, [r4, #108]
-	adds	r3, r5, #7
-	movs	r5, #1
-	lsr	r8, r0, r3
-	lsls	r5, r5, r3
-	ldr	r3, [r4, #2504]
-	subs	r5, r5, #1
-	uxth	r8, r8
-	ands	r5, r5, r0
-	cmp	r0, r3
-	uxth	r5, r5
-	bcc	.L750
-	mov	r2, #808
-	ldr	r1, .L763+4
-	ldr	r0, .L763+8
-	bl	printk
-.L750:
-	ldrh	r2, [r4, #138]
-	movs	r3, #0
-	ldr	r1, [r4, #2492]
-	mov	r10, #12
-.L751:
-	uxth	r6, r3
-	cmp	r6, r2
-	bcc	.L756
-	bl	select_l2p_ram_region
-	mul	r10, r10, r0
-	ldr	r3, [r4, #2492]
-	mov	r6, r0
-	ldrh	r1, [r3, r10]
-	add	r2, r3, r10
-	movw	r3, #65535
-	cmp	r1, r3
-	beq	.L757
-	ldr	r3, [r2, #4]
-	cmp	r3, #0
-	bge	.L757
-	bl	flush_l2p_region
-.L757:
-	mov	r1, r6
-	mov	r0, r8
-	bl	load_l2p_region
-	b	.L752
-.L756:
+	@ link register save eliminated.
+	b	memcpy
+	.fnend
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	1
+	.global	FlashReadPages
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FlashReadPages, %function
+FlashReadPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r1
+	ldr	r5, .L637
+	mov	r4, r0
+	mov	r8, #0
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r10, .L637+4
+	ldr	fp, .L637+8
+	ldrh	r3, [r5, #12]
+	str	r3, [sp, #4]
+.L611:
+	cmp	r8, r9
+	bne	.L621
+	movs	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L621:
+	ldr	r3, [r4, #8]
+	cbz	r3, .L612
+	ldr	r3, [r4, #12]
+	cbnz	r3, .L613
+.L612:
+	movs	r2, #96
+	mov	r1, r10
+	mov	r0, fp
+	bl	sftl_printk
+.L613:
+	add	r2, sp, #8
+	add	r1, sp, #12
+	mov	r0, r4
+	bl	l2p_addr_tran
+	ldr	r6, [r4, #8]
+	ldr	r3, [r4, #12]
+	ldr	r1, [sp, #12]
+	lsls	r2, r6, #26
+	ldrb	r0, [sp, #8]	@ zero_extendqisi2
+	it	ne
+	ldrne	r6, [r5, #3312]
+	ldr	r7, [r5, #3256]
+	mov	r2, r6
+	blx	r7
+	str	r0, [r4]
+	ldrh	r3, [r5, #14]
+	cmp	r3, #4
+	bne	.L616
+	ldr	r0, [sp, #4]
+	add	r2, r6, #2048
+	ldr	r3, [r4, #12]
+	ldr	r1, [sp, #12]
+	ldr	r7, [r5, #3256]
+	adds	r3, r3, #8
+	add	r1, r1, r0
+	ldrb	r0, [sp, #8]	@ zero_extendqisi2
+	blx	r7
+	adds	r3, r0, #1
+	beq	.L617
+	ldr	r3, [r4, #12]
+	ldr	r2, [r3, #12]
+	adds	r2, r2, #1
+	bne	.L618
+	ldr	r2, [r3, #8]
+	adds	r2, r2, #1
+	bne	.L618
+	ldr	r3, [r3]
 	adds	r3, r3, #1
-	mla	r0, r10, r3, r1
-	ldrh	r0, [r0, #-12]
-	cmp	r0, r8
-	bne	.L751
-.L752:
-	movs	r3, #12
-	cmp	r9, #0
-	bne	.L753
-	ldr	r2, [r4, #2492]
-	mla	r3, r3, r6, r2
-	ldr	r3, [r3, #8]
-	ldr	r3, [r3, r5, lsl #2]
-	str	r3, [r7]
-.L754:
-	ldr	r2, [r4, #2492]
-	movs	r3, #12
-	mla	r6, r3, r6, r2
-	ldr	r3, [r6, #4]
-	adds	r2, r3, #1
-	beq	.L760
+	beq	.L618
+.L617:
+	mov	r3, #-1
+	str	r3, [r4]
+.L618:
+	ldr	r3, [r4]
 	adds	r3, r3, #1
-	str	r3, [r6, #4]
-.L760:
-	movs	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L753:
-	muls	r3, r6, r3
-	ldr	r2, [r4, #2492]
-	ldr	r1, [r7]
-	add	r2, r2, r3
-	ldr	r2, [r2, #8]
-	str	r1, [r2, r5, lsl #2]
-	ldr	r2, [r4, #2492]
-	strh	r8, [r4, #2496]	@ movhi
-	add	r3, r3, r2
-	ldr	r2, [r3, #4]
-	orr	r2, r2, #-2147483648
-	str	r2, [r3, #4]
-	b	.L754
-.L764:
+	beq	.L616
+	cmp	r0, #256
+	it	eq
+	streq	r0, [r4]
+.L616:
+	ldr	r3, [r5, #3312]
+	cmp	r6, r3
+	bne	.L620
+	ldr	r0, [r4, #8]
+	cmp	r6, r0
+	beq	.L620
+	ldrh	r2, [r5, #58]
+	mov	r1, r6
+	lsls	r2, r2, #9
+	bl	ftl_memcpy
+.L620:
+	add	r8, r8, #1
+	adds	r4, r4, #20
+	b	.L611
+.L638:
 	.align	2
-.L763:
+.L637:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+289
+	.word	.LANCHOR1+216
 	.word	.LC1
 	.fnend
-	.size	log2phys, .-log2phys
+	.size	FlashReadPages, .-FlashReadPages
 	.align	1
-	.global	FtlReUsePrevPpa
+	.global	FtlLoadFactoryBbt
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, lr}
-	.save {r4, r5, r6, r7, lr}
-	.pad #12
-	mov	r6, r0
-	ldr	r5, .L775
-	ubfx	r0, r1, #10, #16
-	str	r1, [sp, #4]
-	bl	P2V_block_in_plane
-	ldr	r2, [r5, #2324]
-	mov	r7, r0
-	ldrh	r3, [r2, r0, lsl #1]
-	cbnz	r3, .L766
-	ldr	r4, [r5, #2340]
-	cbz	r4, .L767
-	ldr	r1, [r5, #2316]
-	mov	ip, #6
-	ldr	r2, .L775+4
-	movw	lr, #65535
-	ldrh	r0, [r5, #2344]
-	subs	r4, r4, r1
-	asrs	r4, r4, #1
-	muls	r4, r2, r4
-	uxth	r4, r4
-.L768:
-	uxth	r2, r3
-	cmp	r0, r2
-	bls	.L767
-	cmp	r4, r7
-	bne	.L769
-	mov	r1, r4
-	ldr	r0, .L775+8
-	bl	List_remove_node
-	ldrh	r3, [r5, #2344]
-	cbnz	r3, .L770
-	mov	r2, #1688
-	ldr	r1, .L775+12
-	ldr	r0, .L775+16
-	bl	printk
-.L770:
-	ldrh	r3, [r5, #2344]
-	mov	r0, r4
-	subs	r3, r3, #1
-	strh	r3, [r5, #2344]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r2, [r5, #2324]
-	ldrh	r3, [r2, r7, lsl #1]
-.L766:
-	adds	r3, r3, #1
-	strh	r3, [r2, r7, lsl #1]	@ movhi
-	b	.L767
-.L769:
-	mul	r4, ip, r4
-	adds	r3, r3, #1
-	ldrh	r4, [r1, r4]
-	cmp	r4, lr
-	bne	.L768
-.L767:
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movs	r6, #0
+	ldr	r4, .L649
+	movw	r10, #61664
+	ldr	r3, [r4, #3292]
+	add	r7, r4, #162
+	ldr	r8, [r4, #3324]
+	addw	r9, r4, #3444
+	str	r3, [r4, #3452]
+	str	r8, [r4, #3456]
+.L640:
+	ldrh	r3, [r4, #54]
+	cmp	r6, r3
+	bcc	.L645
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L645:
+	ldrh	r5, [r4, #98]
+	movw	r3, #65535
+	strh	r3, [r7, #2]!	@ movhi
+.L642:
+	ldrh	r3, [r4, #98]
+	subs	r5, r5, #1
+	uxth	r5, r5
+	sub	r2, r3, #16
+	cmp	r5, r2
+	ble	.L643
+	mla	r3, r6, r3, r5
 	movs	r2, #1
-	add	r1, sp, #4
-	mov	r0, r6
-	bl	log2phys
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, pc}
-.L776:
-	.align	2
-.L775:
-	.word	.LANCHOR0
-	.word	-1431655765
-	.word	.LANCHOR0+2340
-	.word	.LANCHOR1+298
-	.word	.LC1
-	.fnend
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
-	.align	1
-	.global	ftl_scan_all_data
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movs	r5, #0
-	ldr	r6, .L791
-	.pad #32
-	sub	sp, sp, #32
-	movs	r1, #0
-	ldr	r8, .L791+16
-	mov	r4, r6
-	ldr	r0, .L791+4
-	bl	printk
-.L778:
-	ldr	r3, [r6, #2504]
-	cmp	r5, r3
-	bcc	.L784
-	add	sp, sp, #32
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L784:
-	movs	r2, #0
-	add	r1, sp, #28
-	mov	r0, r5
-	bl	log2phys
-	ubfx	r3, r5, #0, #11
-	cbnz	r3, .L779
-	ldr	r2, [sp, #28]
-	mov	r1, r5
-	mov	r0, r8
-	bl	printk
-.L779:
-	ldr	r3, [sp, #28]
-	adds	r2, r3, #1
-	beq	.L781
-	str	r3, [r4, #3264]
-	movs	r2, #0
-	ldr	r3, [r4, #3280]
-	movs	r1, #1
-	ldr	r7, [r4, #3284]
-	ldr	r0, .L791+8
-	str	r3, [r4, #3268]
-	str	r5, [r4, #3276]
-	str	r7, [r4, #3272]
-	str	r2, [r4, #3260]
+	mov	r1, r2
+	mov	r0, r9
+	lsls	r3, r3, #10
+	str	r3, [r4, #3448]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	cmp	r3, #256
-	beq	.L782
+	ldr	r3, [r4, #3444]
 	adds	r3, r3, #1
-	beq	.L782
-	ldr	r3, [r7, #8]
-	cmp	r5, r3
-	beq	.L781
-.L782:
-	ldr	r2, [r4, #3268]
-	ldr	r3, [r4, #3272]
-	ldr	r0, .L791+12
-	ldr	r1, [r2, #4]
-	str	r1, [sp, #16]
-	mov	r1, r5
-	ldr	r2, [r2]
-	str	r2, [sp, #12]
-	ldr	r2, [r3, #12]
-	str	r2, [sp, #8]
-	ldr	r2, [r3, #8]
-	str	r2, [sp, #4]
-	ldr	r2, [r3, #4]
-	str	r2, [sp]
-	ldr	r3, [r3]
-	ldr	r2, [r4, #3264]
-	bl	printk
-.L781:
-	adds	r5, r5, #1
-	b	.L778
-.L792:
+	beq	.L642
+	ldrh	r3, [r8]
+	cmp	r3, r10
+	bne	.L642
+	strh	r5, [r7]	@ movhi
+.L643:
+	adds	r6, r6, #1
+	b	.L640
+.L650:
 	.align	2
-.L791:
+.L649:
 	.word	.LANCHOR0
-	.word	.LC88
-	.word	.LANCHOR0+3260
-	.word	.LC90
-	.word	.LC89
 	.fnend
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	1
-	.global	FtlReadRefresh
+	.global	FtlGetLastWrittenPage
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L806
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
+	ldr	r3, .L662
+	cmp	r1, #1
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	lsl	r6, r0, #10
 	.pad #88
 	sub	sp, sp, #88
-	mov	r4, r3
-	ldr	r0, [r3, #2716]
-	cmp	r0, #0
-	beq	.L794
-	ldr	r1, [r3, #2720]
-	ldr	r2, [r3, #2504]
-	cmp	r1, r2
-	bcs	.L795
-	mov	r5, #2048
-.L800:
-	ldr	r0, [r4, #2720]
-	ldr	r3, [r4, #2504]
-	cmp	r0, r3
-	bcs	.L797
-	movs	r2, #0
-	mov	r1, sp
-	bl	log2phys
-	ldr	r2, [sp]
-	ldr	r3, [r4, #2720]
-	adds	r1, r2, #1
-	add	r3, r3, #1
-	str	r3, [r4, #2720]
-	beq	.L798
-	str	r3, [sp, #20]
-	add	r0, sp, #88
-	ldr	r3, .L806+4
-	movs	r1, #1
-	str	r2, [sp, #8]
-	movs	r2, #0
-	str	r2, [r0, #-84]!
+	mov	r2, r1
+	mov	r7, r1
+	it	eq
+	ldrheq	r5, [r3, #104]
+	mov	r1, #1
+	it	ne
+	ldrhne	r5, [r3, #102]
+	add	r0, sp, #4
+	ldr	r3, [r3, #3316]
+	subs	r5, r5, #1
+	sxth	r5, r5
 	str	r3, [sp, #12]
 	add	r3, sp, #24
 	str	r3, [sp, #16]
+	orr	r3, r5, r6
+	str	r3, [sp, #8]
 	bl	FlashReadPages
-	ldr	r3, [sp, #4]
-	cmp	r3, #256
-	bne	.L797
-	ldr	r0, [sp]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L797:
-	mov	r0, #-1
-.L793:
+	ldr	r3, [sp, #24]
+	adds	r3, r3, #1
+	bne	.L654
+	mov	r8, #0
+.L655:
+	cmp	r8, r5
+	ble	.L658
+.L654:
+	mov	r0, r5
 	add	sp, sp, #88
 	@ sp needed
-	pop	{r4, r5, r6, pc}
-.L798:
-	subs	r5, r5, #1
-	bne	.L800
-	b	.L797
-.L795:
-	ldr	r2, [r3, #2508]
-	movs	r0, #0
-	str	r0, [r3, #2716]
-	str	r0, [r3, #2720]
-	str	r2, [r3, #2712]
-	b	.L793
-.L794:
-	ldr	r1, [r3, #2508]
-	ldr	r6, [r3, #2712]
-	add	r2, r1, #1048576
-	cmp	r6, r2
-	bhi	.L803
-	ldr	r2, [r3, #2564]
-	lsrs	r5, r2, #10
-	mov	r2, #33554432
-	asrs	r2, r2, r5
-	add	r2, r2, r6
-	cmp	r1, r2
-	bhi	.L803
-	ldrb	r3, [r3, #2296]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L793
-.L803:
-	movs	r3, #1
-	movs	r0, #0
-	str	r3, [r4, #2716]
-	str	r0, [r4, #2720]
-	str	r1, [r4, #2712]
-	b	.L793
-.L807:
+	pop	{r4, r5, r6, r7, r8, pc}
+.L658:
+	add	r3, r8, r5
+	mov	r2, r7
+	add	r3, r3, r3, lsr #31
+	movs	r1, #1
+	add	r0, sp, #4
+	asrs	r4, r3, #1
+	sxth	r3, r4
+	orrs	r3, r3, r6
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #24]
+	adds	r3, r3, #1
+	bne	.L656
+	ldr	r3, [sp, #28]
+	adds	r3, r3, #1
+	bne	.L656
+	ldr	r3, [sp, #4]
+	adds	r3, r3, #1
+	beq	.L656
+	subs	r4, r4, #1
+	sxth	r5, r4
+	b	.L655
+.L656:
+	adds	r4, r4, #1
+	sxth	r8, r4
+	b	.L655
+.L663:
 	.align	2
-.L806:
+.L662:
 	.word	.LANCHOR0
-	.word	ftl_temp_buf
 	.fnend
-	.size	FtlReadRefresh, .-FtlReadRefresh
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	1
-	.global	ftl_check_vpc
+	.global	FtlScanSysBlk
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	ftl_check_vpc, %function
-ftl_check_vpc:
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
-	movs	r4, #0
-	ldr	r6, .L832
-	ldr	r7, .L832+4
-	ldr	r1, .L832+8
-	mov	r5, r6
-	ldr	r0, .L832+12
-	bl	printk
-	mov	r1, #8192
-	ldr	r0, .L832+4
-	bl	__memzero
-.L809:
-	ldr	r3, [r6, #2504]
-	cmp	r4, r3
-	bcc	.L811
-	ldr	r8, .L832+4
-	movs	r4, #0
-	ldr	r10, .L832+24
-	mov	r7, r4
-	movw	r9, #65535
-.L812:
-	ldrh	r2, [r5, #40]
-	uxth	r3, r4
-	cmp	r2, r3
-	bhi	.L814
-	ldr	r4, [r5, #2340]
-	cbz	r4, .L815
-	ldr	r3, [r5, #2316]
-	movs	r6, #0
-	ldrh	r8, [r5, #2344]
-	mov	fp, #6
-	ldr	r9, .L832+4
-	subs	r4, r4, r3
-	ldr	r3, .L832+16
-	asrs	r4, r4, #1
-	ldr	r10, .L832+28
-	muls	r4, r3, r4
-	uxth	r4, r4
-.L816:
-	uxth	r3, r6
-	cmp	r8, r3
-	bls	.L815
-	ldr	r3, [r5, #2324]
-	ldrh	r2, [r3, r4, lsl #1]
-	cbz	r2, .L817
-	movs	r7, #1
-	ldrh	r3, [r9, r4, lsl #1]
-	mov	r1, r4
-	mov	r0, r10
-	bl	printk
-.L817:
-	mul	r4, fp, r4
-	ldr	r3, [r5, #2316]
-	adds	r6, r6, #1
-	ldrh	r4, [r3, r4]
-	movw	r3, #65535
-	cmp	r4, r3
-	bne	.L816
-.L815:
-	cbz	r7, .L808
-	movw	r2, #2321
-	ldr	r1, .L832+8
-	ldr	r0, .L832+20
-	bl	printk
-.L808:
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L811:
-	movs	r2, #0
-	add	r1, sp, #4
-	mov	r0, r4
-	bl	log2phys
-	ldr	r0, [sp, #4]
-	adds	r3, r0, #1
-	beq	.L810
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldrh	r3, [r7, r0, lsl #1]
-	adds	r3, r3, #1
-	strh	r3, [r7, r0, lsl #1]	@ movhi
-.L810:
-	adds	r4, r4, #1
-	b	.L809
-.L814:
-	ldr	r3, [r5, #2324]
-	uxth	r6, r4
-	ldrh	r2, [r3, r6, lsl #1]
-	ldrh	r3, [r8, r6, lsl #1]
-	cmp	r2, r3
-	beq	.L813
-	mov	r1, r6
-	mov	r0, r10
-	bl	printk
-	ldr	r3, [r5, #2324]
-	ldrh	r3, [r3, r6, lsl #1]
-	cmp	r3, r9
-	beq	.L813
-	ldrh	r2, [r8, r6, lsl #1]
-	cmp	r2, r3
-	it	hi
-	movhi	r7, #1
-.L813:
-	adds	r4, r4, #1
-	b	.L812
-.L833:
-	.align	2
-.L832:
-	.word	.LANCHOR0
-	.word	check_vpc_table
-	.word	.LANCHOR1+314
-	.word	.LC91
-	.word	-1431655765
-	.word	.LC1
-	.word	.LC92
-	.word	.LC93
-	.fnend
-	.size	ftl_check_vpc, .-ftl_check_vpc
-	.align	1
-	.global	FtlMapBlkWriteDump_data
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlMapBlkWriteDump_data, %function
-FtlMapBlkWriteDump_data:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r6, r0
-	ldr	r3, [r0, #36]
-	cbz	r3, .L834
-	ldrh	r5, [r0, #6]
-	movs	r3, #0
-	ldr	r4, .L838
-	ldr	r2, [r0, #24]
-	str	r3, [r0, #36]
-	subs	r5, r5, #1
-	ldr	r0, [r4, #3844]
-	uxth	r5, r5
-	ldr	r1, [r4, #3284]
-	str	r0, [r4, #3268]
-	str	r1, [r4, #3272]
-	ldr	r2, [r2, r5, lsl #2]
-	str	r2, [r4, #3264]
-	cbz	r2, .L836
-	movs	r2, #1
-	addw	r0, r4, #3260
-	mov	r1, r2
-	bl	FlashReadPages
-.L837:
-	ldr	r2, [r4, #3268]
-	mov	r1, r5
-	mov	r0, r6
-	pop	{r4, r5, r6, lr}
-	b	FtlMapWritePage
-.L836:
-	ldrh	r2, [r4, #110]
-	movs	r1, #255
-	bl	ftl_memset
-	b	.L837
-.L834:
-	pop	{r4, r5, r6, pc}
-.L839:
-	.align	2
-.L838:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
-	.align	1
-	.global	FtlScanSysBlk
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlScanSysBlk, %function
-FtlScanSysBlk:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 16
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r5, #0
-	ldr	r4, .L921
+	ldr	r4, .L746
 	mov	r1, r5
 	.pad #20
 	sub	sp, sp, #20
 	ldr	r2, [r4, #128]
-	ldr	r0, [r4, #3892]
-	strh	r5, [r4, #3944]	@ movhi
+	ldr	r0, [r4, #3372]
+	strh	r5, [r4, #3428]	@ movhi
 	strh	r5, [r4, #144]	@ movhi
 	lsls	r2, r2, #2
 	bl	ftl_memset
 	ldr	r2, [r4, #128]
 	mov	r1, r5
-	ldr	r0, [r4, #3868]
+	ldr	r0, [r4, #3348]
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r2, [r4, #120]
 	mov	r1, r5
-	ldr	r0, [r4, #3880]
+	ldr	r0, [r4, #3360]
 	lsls	r2, r2, #2
 	bl	ftl_memset
 	ldrh	r2, [r4, #120]
@@ -5887,23 +4887,23 @@ FtlScanSysBlk:
 	str	r3, [r4, #2576]
 	str	r3, [r4, #2580]
 	str	r3, [r4, #2584]
-.L841:
+.L665:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r8
-	bls	.L883
+	bls	.L707
 	movs	r5, #0
 	ldrh	fp, [r4, #32]
-	ldr	r9, [r4, #3832]
+	ldr	r9, [r4, #3280]
 	mov	r7, r5
 	ldr	r3, [r4, #3172]
 	mov	r10, #20
 	ldr	r2, [r4, #3176]
 	ldrh	r6, [r4, #112]
-	b	.L884
-.L844:
+	b	.L708
+.L668:
 	str	r3, [sp, #8]
 	mov	r1, r8
-	ldr	r3, .L921+4
+	ldr	r3, .L746+4
 	str	r2, [sp, #12]
 	ldrb	r0, [r3, r5]	@ zero_extendqisi2
 	bl	V2P_block
@@ -5911,7 +4911,7 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L842
+	cbnz	r0, .L666
 	ldr	r1, [sp, #4]
 	mla	r0, r10, r7, r9
 	lsls	r1, r1, #10
@@ -5926,41 +4926,41 @@ FtlScanSysBlk:
 	bic	r1, r1, #3
 	add	r1, r1, r2
 	str	r1, [r0, #12]
-.L842:
+.L666:
 	adds	r5, r5, #1
-.L884:
+.L708:
 	uxth	r1, r5
 	cmp	fp, r1
-	bhi	.L844
-	cbnz	r7, .L845
-.L882:
+	bhi	.L668
+	cbnz	r7, .L669
+.L706:
 	add	r8, r8, #1
 	uxth	r8, r8
-	b	.L841
-.L845:
+	b	.L665
+.L669:
 	mov	r0, r9
 	mov	r9, #0
 	movs	r2, #1
 	mov	r1, r7
 	bl	FlashReadPages
-.L846:
+.L670:
 	uxth	r3, r9
 	cmp	r7, r3
-	bls	.L882
+	bls	.L706
 	movs	r3, #20
 	mul	r10, r3, r9
-	ldr	r3, [r4, #3832]
+	ldr	r3, [r4, #3280]
 	add	r2, r3, r10
 	ldr	r3, [r3, r10]
 	ldr	r5, [r2, #4]
 	ldr	r6, [r2, #12]
 	adds	r3, r3, #1
 	ubfx	r5, r5, #10, #16
-	bne	.L849
+	bne	.L673
 	mov	fp, #16
 	movw	r3, #65535
-.L851:
-	ldr	r0, [r4, #3832]
+.L675:
+	ldr	r0, [r4, #3280]
 	str	r3, [sp, #4]
 	add	r0, r0, r10
 	ldr	r2, [r0, #4]
@@ -5972,215 +4972,217 @@ FtlScanSysBlk:
 	ldrh	r2, [r6]
 	ldr	r3, [sp, #4]
 	cmp	r2, r3
-	bne	.L848
-	ldr	r3, [r4, #3832]
+	bne	.L672
+	ldr	r3, [r4, #3280]
 	mov	r2, #-1
 	str	r2, [r3, r10]
-	ldr	r3, [r4, #3832]
+	ldr	r3, [r4, #3280]
 	ldr	r3, [r3, r10]
 	cmp	r3, r2
-	bne	.L849
-.L850:
-	movs	r1, #0
-	mov	r0, r5
-	bl	FtlFreeSysBlkQueueIn
-	b	.L854
-.L848:
-	ldr	r2, [r4, #3832]
+	bne	.L673
+.L674:
+	movs	r1, #1
+	b	.L745
+.L672:
+	ldr	r2, [r4, #3280]
 	ldr	r2, [r2, r10]
 	adds	r2, r2, #1
-	bne	.L849
+	bne	.L673
 	add	fp, fp, #-1
 	uxth	fp, fp
 	cmp	fp, #0
-	bne	.L851
-	b	.L850
-.L849:
+	bne	.L675
+	b	.L674
+.L673:
 	ldr	r2, [r4, #2540]
 	ldr	r3, [r6, #4]
 	adds	r1, r2, #1
-	beq	.L852
+	beq	.L676
 	cmp	r2, r3
-	bhi	.L853
-.L852:
+	bhi	.L677
+.L676:
 	adds	r2, r3, #1
 	itt	ne
 	addne	r2, r3, #1
 	strne	r2, [r4, #2540]
-.L853:
+.L677:
 	ldrh	r2, [r6]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L855
-	bhi	.L856
+	beq	.L679
+	bhi	.L680
 	movw	r3, #61574
 	cmp	r2, r3
-	beq	.L857
-.L854:
+	beq	.L681
+.L678:
 	add	r9, r9, #1
-	b	.L846
-.L856:
+	b	.L670
+.L680:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L858
+	beq	.L682
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L850
-	b	.L854
-.L858:
-	ldrh	r2, [r4, #3944]
+	bne	.L678
+	movs	r1, #0
+.L745:
+	mov	r0, r5
+	bl	FtlFreeSysBlkQueueIn
+	b	.L678
+.L682:
+	ldrh	r2, [r4, #3428]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
-	bls	.L860
-	movw	r2, #1211
-	ldr	r1, .L921+8
-	ldr	r0, .L921+12
-	bl	printk
-.L860:
+	bls	.L684
+	movw	r2, #1222
+	ldr	r1, .L746+8
+	ldr	r0, .L746+12
+	bl	sftl_printk
+.L684:
 	ldr	r1, [r4, #128]
-	ldrh	r0, [r4, #3944]
-	ldr	r10, [r4, #3892]
+	ldrh	r0, [r4, #3428]
+	ldr	r10, [r4, #3372]
 	uxth	ip, r1
 	add	r3, ip, #-1
 	sub	ip, ip, r0
 	add	ip, ip, #-1
 	sxth	r3, r3
 	sxth	ip, ip
-.L861:
+.L685:
 	cmp	r3, ip
-	bgt	.L867
+	bgt	.L691
 	cmp	r3, #0
-	bge	.L899
-	b	.L854
-.L867:
+	bge	.L723
+	b	.L678
+.L691:
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	mov	lr, r2
 	ldr	r2, [r10, r3, lsl #2]
 	cmp	lr, r2
-	bls	.L862
+	bls	.L686
 	ldr	r2, [r10]
-	cbnz	r2, .L863
+	cbnz	r2, .L687
 	cmp	r1, r0
 	itt	ne
 	addne	r0, r0, #1
-	strhne	r0, [r4, #3944]	@ movhi
-.L863:
+	strhne	r0, [r4, #3428]	@ movhi
+.L687:
 	uxth	ip, r3
 	movs	r2, #0
-.L864:
+.L688:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L865
-	ldr	r2, [r4, #3892]
+	bhi	.L689
+	ldr	r2, [r4, #3372]
 	cmp	r3, #0
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
-	ldr	r2, [r4, #3868]
+	ldr	r2, [r4, #3348]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	blt	.L854
-	ldrh	r0, [r4, #3944]
+	blt	.L678
+	ldrh	r0, [r4, #3428]
 	ldr	r2, [r4, #128]
 	subs	r2, r2, r0
 	subs	r2, r2, #1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L854
-.L899:
-	ldr	r2, [r4, #3892]
+	bgt	.L678
+.L723:
+	ldr	r2, [r4, #3372]
 	adds	r0, r0, #1
 	ldr	r1, [r6, #4]
-	strh	r0, [r4, #3944]	@ movhi
+	strh	r0, [r4, #3428]	@ movhi
 	str	r1, [r2, r3, lsl #2]
-	ldr	r2, [r4, #3868]
-.L919:
+	ldr	r2, [r4, #3348]
+.L743:
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-	b	.L854
-.L865:
-	ldr	r0, [r4, #3892]
+	b	.L678
+.L689:
+	ldr	r0, [r4, #3372]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
 	ldr	lr, [lr, #4]
 	str	lr, [r0, r1, lsl #2]
-	ldr	r0, [r4, #3868]
+	ldr	r0, [r4, #3348]
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L864
-.L862:
+	b	.L688
+.L686:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L861
-.L922:
+	b	.L685
+.L747:
 	.align	2
-.L921:
+.L746:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+60
-	.word	.LANCHOR1+328
+	.word	.LANCHOR1+231
 	.word	.LC1
-.L857:
+.L681:
 	ldrh	r2, [r4, #144]
 	ldrh	r3, [r4, #120]
 	cmp	r2, r3
-	bls	.L870
-	movw	r2, #1252
-	ldr	r1, .L923
-	ldr	r0, .L923+4
-	bl	printk
-.L870:
+	bls	.L694
+	movw	r2, #1263
+	ldr	r1, .L748
+	ldr	r0, .L748+4
+	bl	sftl_printk
+.L694:
 	ldrh	lr, [r4, #120]
 	ldrh	r0, [r4, #144]
-	ldr	r10, [r4, #3880]
+	ldr	r10, [r4, #3360]
 	add	ip, lr, #-1
 	sxth	r3, ip
 	sub	ip, ip, r0
-.L871:
+.L695:
 	cmp	r3, ip
-	ble	.L876
+	ble	.L700
 	ldr	r2, [r6, #4]
 	lsl	fp, r3, #2
 	ldr	r1, [r10, r3, lsl #2]
 	cmp	r2, r1
-	bls	.L872
+	bls	.L696
 	ldr	r2, [r10]
-	cbnz	r2, .L873
+	cbnz	r2, .L697
 	cmp	lr, r0
 	itt	ne
 	addne	r0, r0, #1
 	strhne	r0, [r4, #144]	@ movhi
-.L873:
+.L697:
 	uxth	ip, r3
 	movs	r2, #0
-.L874:
+.L698:
 	uxth	r0, r2
 	sxth	r1, r2
 	cmp	ip, r0
-	bhi	.L875
-	ldr	r2, [r4, #3880]
+	bhi	.L699
+	ldr	r2, [r4, #3360]
 	ldr	r1, [r6, #4]
 	str	r1, [r2, fp]
 	ldr	r2, [r4, #148]
 	strh	r5, [r2, r3, lsl #1]	@ movhi
-.L876:
+.L700:
 	cmp	r3, #0
-	blt	.L854
+	blt	.L678
 	ldrh	r2, [r4, #120]
 	ldrh	r1, [r4, #144]
 	subs	r2, r2, #1
 	subs	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L854
+	bgt	.L678
 	adds	r1, r1, #1
-	ldr	r2, [r4, #3880]
+	ldr	r2, [r4, #3360]
 	strh	r1, [r4, #144]	@ movhi
 	ldr	r1, [r6, #4]
 	str	r1, [r2, r3, lsl #2]
 	ldr	r2, [r4, #148]
-	b	.L919
-.L875:
-	ldr	r0, [r4, #3880]
+	b	.L743
+.L699:
+	ldr	r0, [r4, #3360]
 	adds	r2, r2, #1
 	add	lr, r0, r1, lsl #2
 	ldr	lr, [lr, #4]
@@ -6189,454 +5191,1699 @@ FtlScanSysBlk:
 	add	lr, r0, r1, lsl #1
 	ldrh	lr, [lr, #2]
 	strh	lr, [r0, r1, lsl #1]	@ movhi
-	b	.L874
-.L872:
+	b	.L698
+.L696:
 	subs	r3, r3, #1
 	sxth	r3, r3
-	b	.L871
-.L855:
+	b	.L695
+.L679:
 	ldrh	r1, [r4, #2576]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L878
+	bne	.L702
 	strh	r5, [r4, #2576]	@ movhi
-.L920:
+.L744:
 	str	r3, [r4, #2584]
-	b	.L854
-.L878:
+	b	.L678
+.L702:
 	ldrh	r0, [r4, #2580]
 	cmp	r0, r2
-	beq	.L879
+	beq	.L703
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L879:
+.L703:
 	ldr	r2, [r4, #2584]
 	ldr	r3, [r6, #4]
 	cmp	r2, r3
-	bcs	.L880
+	bcs	.L704
 	ldrh	r3, [r4, #2576]
 	strh	r5, [r4, #2576]	@ movhi
 	strh	r3, [r4, #2580]	@ movhi
 	ldr	r3, [r6, #4]
-	b	.L920
-.L880:
+	b	.L744
+.L704:
 	strh	r5, [r4, #2580]	@ movhi
-	b	.L854
-.L883:
-	ldr	r1, [r4, #3868]
+	b	.L678
+.L707:
+	ldr	r1, [r4, #3348]
 	ldrh	r3, [r1]
-	cbz	r3, .L885
-.L888:
+	cbz	r3, .L709
+.L712:
 	ldr	r1, [r4, #148]
 	ldrh	r2, [r1]
 	cmp	r2, #0
-	beq	.L886
-.L887:
-	ldrh	r2, [r4, #3944]
+	beq	.L710
+.L711:
+	ldrh	r2, [r4, #3428]
 	ldr	r3, [r4, #128]
 	cmp	r2, r3
-	bls	.L918
-	movw	r2, #1377
-	ldr	r1, .L923
-	ldr	r0, .L923+4
-	bl	printk
-.L918:
+	bls	.L742
+	movw	r2, #1388
+	ldr	r1, .L748
+	ldr	r0, .L748+4
+	bl	sftl_printk
+.L742:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L885:
-	ldrh	r2, [r4, #3944]
+.L709:
+	ldrh	r2, [r4, #3428]
 	cmp	r2, #0
-	beq	.L888
+	beq	.L712
 	ldr	r0, [r4, #128]
-.L889:
+.L713:
 	sxth	r2, r3
 	cmp	r2, r0
-	bcs	.L888
+	bcs	.L712
 	ldrh	r5, [r1, r2, lsl #1]
 	adds	r3, r3, #1
 	cmp	r5, #0
-	beq	.L889
+	beq	.L713
 	mov	r3, r2
 	movs	r5, #0
-.L890:
+.L714:
 	ldr	r1, [r4, #128]
 	cmp	r3, r1
-	bcs	.L888
-	ldr	r1, [r4, #3868]
+	bcs	.L712
+	ldr	r1, [r4, #3348]
 	subs	r0, r3, r2
 	ldrh	r6, [r1, r3, lsl #1]
 	strh	r6, [r1, r0, lsl #1]	@ movhi
-	ldr	r1, [r4, #3892]
+	ldr	r1, [r4, #3372]
 	ldr	r6, [r1, r3, lsl #2]
 	str	r6, [r1, r0, lsl #2]
-	ldr	r1, [r4, #3868]
+	ldr	r1, [r4, #3348]
 	strh	r5, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L890
-.L886:
+	b	.L714
+.L710:
 	ldrh	r3, [r4, #144]
 	cmp	r3, #0
-	beq	.L887
+	beq	.L711
 	ldrh	r0, [r4, #120]
-.L895:
+.L719:
 	sxth	r3, r2
 	cmp	r3, r0
 	mov	r5, r3
-	bge	.L887
+	bge	.L711
 	ldrh	r6, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	cmp	r6, #0
-	beq	.L895
+	beq	.L719
 	movs	r0, #0
-.L896:
+.L720:
 	ldrh	r2, [r4, #120]
 	cmp	r3, r2
-	bge	.L887
+	bge	.L711
 	ldr	r2, [r4, #148]
 	subs	r1, r3, r5
 	ldrh	r6, [r2, r3, lsl #1]
 	strh	r6, [r2, r1, lsl #1]	@ movhi
-	ldr	r2, [r4, #3880]
+	ldr	r2, [r4, #3360]
 	ldr	r6, [r2, r3, lsl #2]
 	str	r6, [r2, r1, lsl #2]
 	ldr	r2, [r4, #148]
 	strh	r0, [r2, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
 	sxth	r3, r3
-	b	.L896
-.L924:
+	b	.L720
+.L749:
 	.align	2
-.L923:
-	.word	.LANCHOR1+328
+.L748:
+	.word	.LANCHOR1+231
 	.word	.LC1
 	.fnend
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	1
-	.global	FtlMapTblRecovery
+	.global	FtlLoadBbt
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #28
-	sub	sp, sp, #28
-	ldr	r3, [r0, #24]
-	mov	r4, r0
-	movs	r1, #0
-	ldrh	r10, [r0, #6]
-	str	r3, [sp, #4]
-	ldr	r3, [r0, #16]
-	ldr	r5, .L952
-	ldr	r9, [r0, #12]
-	lsl	r2, r10, #2
-	str	r3, [sp, #12]
-	ldrh	r3, [r0, #8]
-	ldr	r0, [sp, #4]
-	str	r3, [sp, #8]
-	bl	ftl_memset
-	ldr	r3, [r5, #3280]
-	movs	r2, #1
-	ldr	r6, [r5, #3284]
-	str	r2, [r4, #36]
-	str	r3, [r5, #3268]
-	movw	r3, #65535
-	str	r6, [r5, #3272]
-	strh	r3, [r4]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-	movs	r3, #0
-	str	r3, [r4, #32]
-	mov	r8, r3
-	str	r3, [r4, #28]
-	ldr	r3, [sp, #8]
-	add	fp, r3, #-1
-	mov	r3, r5
-.L926:
-	ldr	r1, [sp, #8]
-	sxth	r2, r8
-	cmp	r2, r1
-	bge	.L943
-	cmp	r2, fp
-	lsl	r7, r2, #1
-	bne	.L927
-	ldrh	r0, [r9, fp, lsl #1]
-	movs	r1, #1
-	bl	FtlGetLastWrittenPage
-	ldr	r3, [sp, #12]
-	add	r7, r7, r9
-	strh	r8, [r4]	@ movhi
-	sxth	r9, r0
-	ldr	r8, .L952+4
-	adds	r0, r0, #1
-	strh	r0, [r4, #2]	@ movhi
-	add	r9, r9, #1
-	ldr	r3, [r3, fp, lsl #2]
-	mov	fp, #0
-	str	r3, [r4, #28]
-.L928:
-	sxth	r2, fp
-	cmp	r2, r9
-	blt	.L930
-.L943:
-	mov	r0, r4
-	bl	ftl_free_no_use_map_blk
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r5, #104]
-	cmp	r2, r3
-	bne	.L932
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
-.L932:
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	movs	r0, #0
-	add	sp, sp, #28
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L930:
-	ldrh	r1, [r7]
-	mov	r0, r8
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3264]
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movw	r8, #61649
+	ldr	r4, .L779
+	ldr	r3, [r4, #3292]
+	addw	r7, r4, #3444
+	ldr	r6, [r4, #3324]
+	str	r3, [r4, #3452]
+	str	r6, [r4, #3456]
+	bl	FtlBbtMemInit
+	ldrh	r5, [r4, #98]
+	subs	r5, r5, #1
+	uxth	r5, r5
+.L751:
+	ldrh	r3, [r4, #98]
+	subs	r3, r3, #16
+	cmp	r5, r3
+	ble	.L754
+	lsls	r3, r5, #10
 	movs	r2, #1
 	mov	r1, r2
+	mov	r0, r7
+	str	r3, [r4, #3448]
 	bl	FlashReadPages
-	ldr	r2, [r5, #3260]
-	adds	r2, r2, #1
-	beq	.L929
-	ldrh	r2, [r6, #8]
-	cmp	r10, r2
-	bls	.L929
-	ldrh	r1, [r4, #4]
-	ldrh	r0, [r6]
-	cmp	r0, r1
-	ittt	eq
-	ldreq	r1, [r5, #3264]
-	ldreq	r3, [sp, #4]
-	streq	r1, [r3, r2, lsl #2]
-.L929:
-	add	fp, fp, #1
-	b	.L928
-.L927:
-	ldr	r1, [r5, #3280]
-	str	r3, [sp, #20]
-	add	r3, r9, r7
-	ldr	r0, .L952+4
-	str	r1, [r5, #3268]
-	ldrh	r1, [r9, r2, lsl #1]
-	ldrh	r2, [r5, #104]
-	str	r3, [sp, #16]
-	subs	r2, r2, #1
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r5, #3264]
+	ldr	r3, [r4, #3444]
+	adds	r3, r3, #1
+	bne	.L752
+	ldr	r3, [r4, #3448]
 	movs	r2, #1
 	mov	r1, r2
+	mov	r0, r7
+	adds	r3, r3, #1
+	str	r3, [r4, #3448]
 	bl	FlashReadPages
-	ldr	r2, [r5, #3260]
-	ldr	r3, [sp, #20]
-	adds	r2, r2, #1
-	beq	.L945
-	ldrh	r1, [r6]
-	ldrh	r2, [r4, #4]
-	cmp	r1, r2
-	bne	.L945
-	ldrh	r1, [r6, #8]
-	movw	r2, #64245
-	cmp	r1, r2
-	beq	.L934
-.L945:
-	movs	r7, #0
-.L935:
-	ldrh	r1, [r3, #104]
-	sxth	r2, r7
-	cmp	r2, r1
-	bge	.L941
-	ldr	r1, [sp, #16]
-	ldr	r0, .L952+4
-	str	r3, [sp, #20]
-	ldrh	r1, [r1]
-	orr	r2, r2, r1, lsl #10
-	str	r2, [r3, #3264]
+.L752:
+	ldr	r3, [r4, #3444]
+	adds	r3, r3, #1
+	beq	.L753
+	ldrh	r3, [r6]
+	cmp	r3, r8
+	bne	.L753
+	ldr	r3, [r6, #4]
+	strh	r5, [r4, #152]	@ movhi
+	str	r3, [r4, #160]
+	ldrh	r3, [r6, #8]
+	strh	r3, [r4, #156]	@ movhi
+.L754:
+	ldrh	r3, [r4, #152]
+	movw	r2, #65535
+	cmp	r3, r2
+	beq	.L768
+	ldrh	r3, [r4, #156]
+	cmp	r3, r2
+	beq	.L758
+	lsls	r3, r3, #10
 	movs	r2, #1
 	mov	r1, r2
+	ldr	r0, .L779+4
+	str	r3, [r4, #3448]
 	bl	FlashReadPages
-	ldr	r3, [sp, #20]
-	ldr	r2, [r3, #3260]
-	adds	r2, r2, #1
-	beq	.L939
-	ldrh	r2, [r6, #8]
-	cmp	r10, r2
-	bls	.L939
-	ldrh	r0, [r6]
-	ldrh	r1, [r4, #4]
-	cmp	r0, r1
-	ittt	eq
-	ldreq	r1, [r3, #3264]
-	ldreq	r0, [sp, #4]
-	streq	r1, [r0, r2, lsl #2]
-.L939:
-	adds	r7, r7, #1
-	b	.L935
-.L934:
-	movs	r0, #0
-	mov	ip, #4
-.L936:
-	ldrh	r1, [r5, #104]
-	sxth	r2, r0
-	subs	r1, r1, #1
-	cmp	r2, r1
-	blt	.L938
-.L941:
-	add	r8, r8, #1
-	b	.L926
-.L938:
-	ldr	r7, [r5, #3280]
-	ldr	r1, [r7, r2, lsl #3]
-	uxth	lr, r1
-	cmp	r10, lr
-	bls	.L937
-	add	r2, ip, r2, lsl #3
-	ldr	r2, [r7, r2]
-	ldr	r7, [sp, #4]
-	str	r2, [r7, lr, lsl #2]
-.L937:
+	ldr	r3, [r4, #3444]
+	adds	r3, r3, #1
+	beq	.L758
+	ldrh	r2, [r6]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L758
+	ldr	r3, [r6, #4]
+	ldr	r2, [r4, #160]
+	cmp	r3, r2
+	bls	.L758
+	ldrh	r2, [r4, #156]
+	str	r3, [r4, #160]
+	ldrh	r3, [r6, #8]
+	strh	r2, [r4, #152]	@ movhi
+	strh	r3, [r4, #156]	@ movhi
+.L758:
+	ldr	r7, .L779+4
+	movs	r1, #1
+	ldrh	r0, [r4, #152]
+	movw	r8, #61649
+	bl	FtlGetLastWrittenPage
+	sxth	r5, r0
 	adds	r0, r0, #1
-	b	.L936
-.L953:
-	.align	2
-.L952:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.fnend
-	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
-	.align	1
-	.global	FtlLoadVonderInfo
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlLoadVonderInfo, %function
-FtlLoadVonderInfo:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r0, .L955
-	push	{r3, lr}
-	.save {r3, lr}
-	ldrh	r3, [r0, #120]
-	strh	r3, [r0, #3958]	@ movhi
-	movw	r3, #61574
-	strh	r3, [r0, #3952]	@ movhi
-	ldrh	r3, [r0, #144]
-	strh	r3, [r0, #3956]	@ movhi
-	ldrh	r3, [r0, #122]
-	strh	r3, [r0, #3954]	@ movhi
-	ldr	r3, [r0, #148]
-	addw	r0, r0, #3948
-	str	r3, [r0, #12]
-	ldr	r3, [r0, #-68]
-	str	r3, [r0, #16]
-	ldr	r3, [r0, #-72]
-	str	r3, [r0, #20]
-	ldr	r3, [r0, #-64]
-	str	r3, [r0, #24]
-	bl	FtlMapTblRecovery
+	strh	r0, [r4, #154]	@ movhi
+.L760:
+	cmp	r5, #0
+	bge	.L763
+	movs	r2, #253
+	ldr	r1, .L779+8
+	ldr	r0, .L779+12
+	bl	sftl_printk
+.L762:
+	ldrh	r3, [r6, #10]
+	ldrh	r0, [r6, #12]
+	strh	r3, [r4, #158]	@ movhi
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L765
+	ldr	r2, [r4, #28]
+	cmp	r0, r2
+	beq	.L765
+	ldrh	r3, [r4, #42]
+	lsrs	r3, r3, #2
+	cmp	r2, r3
+	bcs	.L765
+	cmp	r0, r3
+	bcs	.L765
+	bl	FtlSysBlkNumInit
+.L765:
+	ldr	r6, .L779+16
+	movs	r5, #0
+.L766:
+	ldrh	r3, [r4, #54]
+	cmp	r5, r3
+	bcc	.L767
 	movs	r0, #0
-	pop	{r3, pc}
-.L956:
+	pop	{r4, r5, r6, r7, r8, pc}
+.L753:
+	subs	r5, r5, #1
+	uxth	r5, r5
+	b	.L751
+.L763:
+	ldrh	r3, [r4, #152]
+	movs	r2, #1
+	mov	r1, r2
+	mov	r0, r7
+	orr	r3, r5, r3, lsl #10
+	str	r3, [r4, #3448]
+	ldr	r3, [r4, #3292]
+	str	r3, [r4, #3452]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	adds	r3, r3, #1
+	beq	.L761
+	ldrh	r3, [r6]
+	cmp	r3, r8
+	beq	.L762
+.L761:
+	subs	r5, r5, #1
+	sxth	r5, r5
+	b	.L760
+.L767:
+	ldrh	r2, [r4, #3380]
+	ldr	r1, [r4, #3452]
+	ldr	r0, [r6, #4]!
+	lsls	r2, r2, #2
+	mla	r1, r5, r2, r1
+	adds	r5, r5, #1
+	bl	ftl_memcpy
+	b	.L766
+.L768:
+	mov	r0, #-1
+	pop	{r4, r5, r6, r7, r8, pc}
+.L780:
 	.align	2
-.L955:
+.L779:
 	.word	.LANCHOR0
+	.word	.LANCHOR0+3444
+	.word	.LANCHOR1+245
+	.word	.LC1
+	.word	.LANCHOR0+176
 	.fnend
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	1
-	.global	FtlL2PDataInit
+	.global	FtlLoadSysInfo
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlL2PDataInit, %function
-FtlL2PDataInit:
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r4, .L960
-	movs	r6, #12
-	ldr	r2, [r4, #128]
-	ldr	r0, [r4, #3872]
+	ldr	r4, .L802
+	ldr	r3, [r4, #3292]
+	ldrh	r2, [r4, #40]
+	ldr	r0, [r4, #2324]
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
 	lsls	r2, r2, #1
+	str	r3, [r4, #3456]
 	bl	ftl_memset
-	ldrh	r3, [r4, #110]
-	movs	r1, #255
-	ldrh	r2, [r4, #138]
-	ldr	r0, [r4, #3896]
-	muls	r2, r3, r2
+	ldrh	r0, [r4, #2576]
+	movw	r3, #65535
+	cmp	r0, r3
+	bne	.L782
+.L790:
+	mov	r0, #-1
+	pop	{r3, r4, r5, r6, r7, pc}
+.L782:
+	ldr	r7, .L802+4
+	movs	r1, #1
+	addw	r6, r4, #3444
+	bl	FtlGetLastWrittenPage
+	sxth	r5, r0
+	adds	r0, r0, #1
+	strh	r0, [r4, #2578]	@ movhi
+.L784:
+	cmp	r5, #0
+	bge	.L787
+	mov	r2, #1448
+	ldr	r1, .L802+8
+	ldr	r0, .L802+12
+	bl	sftl_printk
+.L786:
+	ldrh	r3, [r4, #40]
+	ldrh	r2, [r4, #110]
+	adds	r3, r3, #24
+	cmp	r2, r3, lsl #1
+	bcs	.L789
+	movw	r2, #1450
+	ldr	r1, .L802+8
+	ldr	r0, .L802+12
+	bl	sftl_printk
+.L789:
+	movs	r2, #48
+	ldr	r1, [r4, #3452]
+	ldr	r0, .L802+16
+	bl	ftl_memcpy
+	ldrh	r2, [r4, #40]
+	ldr	r1, [r4, #3452]
+	ldr	r0, [r4, #2324]
+	lsls	r2, r2, #1
+	adds	r1, r1, #48
+	bl	ftl_memcpy
+	ldrh	r1, [r4, #40]
+	ldr	r3, [r4, #3452]
+	ldr	r0, [r4, #24]
+	lsrs	r2, r1, #3
+	adds	r1, r1, #24
+	lsls	r1, r1, #1
+	adds	r2, r2, #4
+	bic	r1, r1, #3
+	add	r1, r1, r3
+	bl	ftl_memcpy
+	ldr	r2, [r4, #2268]
+	ldr	r3, .L802+4
+	cmp	r2, r3
+	bne	.L790
+	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
+	ldrh	r3, [r4, #54]
+	ldrh	r5, [r4, #2276]
+	cmp	r2, r3
+	strh	r5, [r4, #2582]	@ movhi
+	bne	.L790
+	ldrh	r3, [r4, #102]
+	ldrh	r2, [r4, #58]
+	ldr	r6, [r4, #44]
+	ldrh	r0, [r4, #158]
+	muls	r3, r5, r3
+	str	r5, [r4, #3464]
+	ldrh	r1, [r4, #32]
+	subs	r0, r6, r0
+	subs	r0, r0, r5
+	str	r3, [r4, #2504]
+	muls	r3, r2, r3
+	str	r3, [r4, #140]
+	bl	__aeabi_uidiv
+	cmp	r5, r6
+	strh	r0, [r4, #2572]	@ movhi
+	bls	.L791
+	mov	r2, #1472
+	ldr	r1, .L802+8
+	ldr	r0, .L802+12
+	bl	sftl_printk
+.L791:
+	ldrh	r3, [r4, #2284]
+	ldrh	r1, [r4, #2282]
+	lsrs	r2, r3, #6
+	and	r3, r3, #63
+	strb	r3, [r4, #2354]
+	strh	r2, [r4, #2350]	@ movhi
+	ldrh	r2, [r4, #2286]
+	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
+	strh	r1, [r4, #2348]	@ movhi
+	strh	r2, [r4, #2396]	@ movhi
+	ldrh	r2, [r4, #2288]
+	strb	r3, [r4, #2356]
+	movw	r3, #65535
+	strh	r3, [r4, #2588]	@ movhi
+	movs	r3, #0
+	strh	r3, [r4, #2590]	@ movhi
+	lsrs	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #2402]
+	ldrb	r2, [r4, #2280]	@ zero_extendqisi2
+	strh	r0, [r4, #2398]	@ movhi
+	strb	r3, [r4, #2594]
+	strb	r2, [r4, #2404]
+	ldrh	r2, [r4, #2290]
+	strb	r3, [r4, #2596]
+	str	r3, [r4, #2528]
+	strh	r2, [r4, #2444]	@ movhi
+	ldrh	r2, [r4, #2292]
+	str	r3, [r4, #2516]
+	str	r3, [r4, #2508]
+	str	r3, [r4, #2524]
+	lsrs	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #2450]
+	ldrb	r2, [r4, #2281]	@ zero_extendqisi2
+	str	r3, [r4, #2552]
+	strh	r0, [r4, #2446]	@ movhi
+	strb	r2, [r4, #2452]
+	ldr	r2, [r4, #2300]
+	str	r2, [r4, #2548]
+	str	r3, [r4, #2564]
+	ldr	r2, [r4, #2540]
+	str	r3, [r4, #2520]
+	ldr	r3, [r4, #2308]
+	cmp	r3, r2
+	ldr	r2, [r4, #2544]
+	it	hi
+	strhi	r3, [r4, #2540]
+	ldr	r3, [r4, #2304]
+	cmp	r3, r2
+	it	hi
+	strhi	r3, [r4, #2544]
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L794
+	ldr	r0, .L802+20
+	bl	make_superblock
+.L794:
+	ldrh	r2, [r4, #2396]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L795
+	ldr	r0, .L802+24
+	bl	make_superblock
+.L795:
+	ldrh	r2, [r4, #2444]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L796
+	ldr	r0, .L802+28
+	bl	make_superblock
+.L796:
+	ldrh	r2, [r4, #2588]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L797
+	ldr	r0, .L802+32
+	bl	make_superblock
+.L797:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, pc}
+.L787:
+	ldrh	r3, [r4, #2576]
+	movs	r2, #1
+	mov	r1, r2
+	mov	r0, r6
+	orr	r3, r5, r3, lsl #10
+	str	r3, [r4, #3448]
+	ldr	r3, [r4, #3292]
+	str	r3, [r4, #3452]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	adds	r3, r3, #1
+	beq	.L785
+	ldr	r3, [r4, #3292]
+	ldr	r3, [r3]
+	cmp	r3, r7
+	bne	.L785
+	ldr	r3, [r4, #3324]
+	ldrh	r2, [r3]
+	movw	r3, #61604
+	cmp	r2, r3
+	beq	.L786
+.L785:
+	subs	r5, r5, #1
+	sxth	r5, r5
+	b	.L784
+.L803:
+	.align	2
+.L802:
+	.word	.LANCHOR0
+	.word	1179929683
+	.word	.LANCHOR1+256
+	.word	.LC1
+	.word	.LANCHOR0+2268
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2396
+	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+2588
+	.fnend
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	1
+	.global	FlashProgPages
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FlashProgPages, %function
+FlashProgPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r6, .L840
+	mov	fp, r1
+	mov	r4, r0
+	mov	r5, r0
+	str	r3, [sp, #12]
+	mov	r10, #0
+	ldrh	r3, [r6, #12]
+	mov	r8, r6
+	str	r2, [sp, #8]
+	str	r3, [sp]
+	lsls	r3, r3, #3
+	str	r3, [sp, #4]
+.L805:
+	cmp	r10, fp
+	bne	.L818
+	ldr	r3, [sp, #12]
+	cmp	r3, #0
+	beq	.L811
+	movs	r5, #0
+	ldr	r7, .L840+4
+	ldr	r8, .L840+24
+	ldr	r9, .L840+28
+	b	.L819
+.L818:
+	ldr	r3, [r5, #8]
+	cbz	r3, .L806
+	ldr	r3, [r5, #12]
+	cbnz	r3, .L807
+.L806:
+	movs	r2, #136
+	ldr	r1, .L840+8
+	ldr	r0, .L840+12
+	bl	sftl_printk
+.L807:
+	add	r2, sp, #20
+	add	r1, sp, #24
+	mov	r0, r5
+	bl	l2p_addr_tran
+	ldr	r7, [sp, #20]
+	cbnz	r7, .L808
+	ldr	r3, [sp, #24]
+	ldr	r2, [sp, #4]
+	cmp	r2, r3
+	bls	.L808
+	ldr	r5, .L840+8
+	ldr	r6, .L840+16
+	ldr	r8, .L840+32
+	b	.L839
+.L810:
+	mov	r3, #-1
+	ldr	r2, [r4, #-16]
+	str	r3, [r4, #-20]
+	mov	r1, r5
+	mov	r0, r6
+	adds	r7, r7, #1
+	bl	sftl_printk
+	movs	r3, #16
+	movs	r2, #4
+	ldr	r1, [r4, #-12]
+	mov	r0, r8
+	bl	rknand_print_hex
+	movs	r3, #4
+	ldr	r1, [r4, #-8]
+	mov	r2, r3
+	ldr	r0, .L840+20
+	bl	rknand_print_hex
+.L839:
+	cmp	r7, fp
+	add	r4, r4, #20
+	bne	.L810
+	bl	dump_stack
+.L811:
+	movs	r0, #0
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L808:
+	ldr	r1, [r5, #8]
+	lsls	r3, r1, #26
+	beq	.L825
+	ldr	r9, [r8, #3312]
+	cmp	r1, r9
+	beq	.L812
+	ldrh	r2, [r8, #58]
+	mov	r0, r9
+	lsls	r2, r2, #9
+	bl	ftl_memcpy
+.L812:
+	ldr	r3, [r5, #12]
+	mov	r2, r9
+	ldr	r1, [sp, #24]
+	ldrb	r0, [sp, #20]	@ zero_extendqisi2
+	ldr	r7, [r8, #3252]
+	blx	r7
+	cbnz	r0, .L813
+	str	r0, [r5]
+.L814:
+	ldrh	r3, [r8, #14]
+	cmp	r3, #4
+	bne	.L816
+	ldr	r0, [sp]
+	add	r2, r9, #2048
+	ldr	r3, [r5, #12]
+	ldr	r1, [sp, #24]
+	ldr	r7, [r8, #3252]
+	adds	r3, r3, #8
+	add	r1, r1, r0
+	ldrb	r0, [sp, #20]	@ zero_extendqisi2
+	blx	r7
+	cbz	r0, .L816
+	mov	r3, #-1
+	str	r3, [r5]
+.L816:
+	add	r10, r10, #1
+	adds	r5, r5, #20
+	b	.L805
+.L825:
+	mov	r9, r1
+	b	.L812
+.L813:
+	mov	r3, #-1
+	str	r3, [r5]
+	b	.L814
+.L823:
+	ldr	r2, [r6, #3312]
+	movs	r3, #0
+	movs	r1, #1
+	add	r0, sp, #28
+	str	r3, [r2]
+	ldr	r2, [r6, #3320]
+	str	r3, [r2]
+	ldr	r3, [r4, #4]
+	ldr	r2, [sp, #8]
+	str	r3, [sp, #32]
+	ldr	r3, [r6, #3312]
+	str	r3, [sp, #36]
+	ldr	r3, [r6, #3320]
+	str	r3, [sp, #40]
+	bl	FlashReadPages
+	ldr	fp, [sp, #28]
+	cmp	fp, #-1
+	bne	.L820
+	ldr	r1, [r4, #4]
+	mov	r0, r7
+	bl	sftl_printk
+	str	fp, [r4]
+.L820:
+	ldr	r3, [r4, #12]
+	cbz	r3, .L821
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3320]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L821
+	ldr	r1, [r4, #4]
+	mov	r0, r8
+	bl	sftl_printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L821:
+	ldr	r3, [r4, #8]
+	cbz	r3, .L822
+	ldr	r2, [r3]
+	ldr	r3, [r6, #3312]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L822
+	ldr	r1, [r4, #4]
+	mov	r0, r9
+	bl	sftl_printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L822:
+	adds	r5, r5, #1
+	adds	r4, r4, #20
+.L819:
+	cmp	r10, r5
+	bne	.L823
+	b	.L811
+.L841:
+	.align	2
+.L840:
+	.word	.LANCHOR0
+	.word	.LC86
+	.word	.LANCHOR1+271
+	.word	.LC1
+	.word	.LC80
+	.word	.LC82
+	.word	.LC87
+	.word	.LC88
+	.word	.LC81
+	.fnend
+	.size	FlashProgPages, .-FlashProgPages
+	.align	1
+	.global	FtlLowFormatEraseBlock
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r10, #0
+	ldr	r4, .L887
+	mov	r7, r1
+	mov	r6, r10
+	mov	r5, r10
+	mov	r9, #20
+	.pad #20
+	sub	sp, sp, #20
+	mov	fp, r4
+	str	r0, [sp, #4]
+	str	r0, [r4, #3276]
+.L843:
+	ldrh	r1, [r4, #32]
+	uxth	r3, r10
+	cmp	r1, r3
+	bhi	.L848
+	cmp	r6, #0
+	beq	.L842
+	mov	r8, #0
+	mov	r9, #20
+	mov	r2, r6
+	movs	r1, #0
+	ldr	r0, [r4, #3260]
+	bl	FlashEraseBlocks
+.L851:
+	uxth	r3, r8
+	cmp	r6, r3
+	bhi	.L853
+	cmp	r7, #0
+	beq	.L870
+	ldrh	r3, [r4, #104]
+	mov	r10, #1
+	str	r3, [sp, #8]
+.L854:
+	mov	r8, #0
+	mov	fp, #20
+.L864:
+	mov	r9, #0
+	mov	r6, r9
+.L855:
+	ldrh	r1, [r4, #32]
+	uxth	r3, r9
+	cmp	r1, r3
+	bhi	.L859
+	cbz	r6, .L842
+	mov	r9, #0
+	movs	r3, #1
+	mov	r2, r10
+	mov	r1, r6
+	ldr	r0, [r4, #3260]
+	bl	FlashProgPages
+.L861:
+	uxth	r3, r9
+	cmp	r6, r3
+	bhi	.L863
+	add	r8, r8, #1
+	ldr	r2, [sp, #8]
+	uxth	r3, r8
+	cmp	r2, r3
+	bhi	.L864
+	mov	r8, #0
+	mov	r9, #20
+.L865:
+	uxth	r3, r8
+	cmp	r6, r3
+	bhi	.L867
+	ldr	r3, [sp, #4]
+	cmp	r3, #63
+	bls	.L868
+	cbz	r7, .L842
+.L868:
+	mov	r2, r6
+	mov	r1, r10
+	ldr	r0, [r4, #3260]
+	bl	FlashEraseBlocks
+.L842:
+	mov	r0, r5
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L848:
+	uxth	r3, r10
+	ldr	r0, [r4, #3260]
+	movs	r2, #0
+	mul	r1, r9, r3
+	add	r3, r3, r4
+	str	r2, [r0, r1]
+	ldr	r1, [sp, #4]
+	ldrb	r0, [r3, #60]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	r8, r0
+	cbz	r7, .L844
+	bl	IsBlkInVendorPart
+	cbnz	r0, .L845
+.L844:
+	mov	r0, r8
+	bl	FtlBbmIsBadBlock
+	cbnz	r0, .L846
+	ldr	r1, [r4, #3260]
+	lsl	r3, r8, #10
+	ldr	r0, [fp, #3328]
+	mla	r1, r9, r6, r1
+	str	r3, [r1, #4]
+	ldr	r3, [r4, #3308]
+	str	r3, [r1, #8]
+	ldrh	r3, [r4, #112]
+	muls	r3, r6, r3
+	add	r6, r6, #1
+	it	mi
+	addmi	r3, r3, #3
+	uxth	r6, r6
+	bic	r3, r3, #3
+	add	r3, r3, r0
+	str	r3, [r1, #12]
+.L845:
+	add	r10, r10, #1
+	b	.L843
+.L846:
+	adds	r5, r5, #1
+	uxth	r5, r5
+	b	.L845
+.L853:
+	mul	r3, r9, r8
+	ldr	r2, [r4, #3260]
+	adds	r1, r2, r3
+	ldr	r3, [r2, r3]
+	adds	r3, r3, #1
+	bne	.L852
+	ldr	r0, [r1, #4]
+	adds	r5, r5, #1
+	uxth	r5, r5
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+.L852:
+	add	r8, r8, #1
+	b	.L851
+.L870:
+	movs	r3, #2
+	mov	r10, r7
+	str	r3, [sp, #8]
+	b	.L854
+.L859:
+	uxth	r3, r9
+	ldr	r0, [r4, #3260]
+	movs	r2, #0
+	mul	r1, fp, r3
+	add	r3, r3, r4
+	str	r2, [r0, r1]
+	ldr	r1, [sp, #4]
+	ldrb	r0, [r3, #60]	@ zero_extendqisi2
+	bl	V2P_block
+	str	r0, [sp, #12]
+	cbz	r7, .L856
+	bl	IsBlkInVendorPart
+	cbnz	r0, .L857
+.L856:
+	ldr	r0, [sp, #12]
+	bl	FtlBbmIsBadBlock
+	cbnz	r0, .L857
+	ldr	r1, [r4, #3260]
+	ldr	r3, [sp, #12]
+	ldr	r2, .L887
+	mla	r1, fp, r6, r1
+	ldr	r0, [r2, #3308]
+	add	r3, r8, r3, lsl #10
+	str	r3, [r1, #4]
+	ldr	r3, [r4, #3304]
+	str	r3, [r1, #8]
+	ldrh	r3, [r4, #112]
+	muls	r3, r6, r3
+	add	r6, r6, #1
+	it	mi
+	addmi	r3, r3, #3
+	uxth	r6, r6
+	bic	r3, r3, #3
+	add	r3, r3, r0
+	str	r3, [r1, #12]
+.L857:
+	add	r9, r9, #1
+	b	.L855
+.L863:
+	mul	r3, fp, r9
+	ldr	r2, [r4, #3260]
+	adds	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cbz	r3, .L862
+	ldr	r0, [r1, #4]
+	adds	r5, r5, #1
+	uxth	r5, r5
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+.L862:
+	add	r9, r9, #1
+	b	.L861
+.L867:
+	cbz	r7, .L866
+	mul	r3, r9, r8
+	ldr	r2, [r4, #3260]
+	adds	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cbnz	r3, .L866
+	ldr	r0, [r1, #4]
+	movs	r1, #1
+	ubfx	r0, r0, #10, #16
+	bl	FtlFreeSysBlkQueueIn
+.L866:
+	add	r8, r8, #1
+	b	.L865
+.L888:
+	.align	2
+.L887:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	.align	1
+	.global	Ftl_write_map_blk_to_last_page
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	movw	r2, #65535
+	ldrh	r3, [r0]
+	mov	r4, r0
+	ldr	r5, [r0, #12]
+	cmp	r3, r2
+	bne	.L890
+	ldrh	r3, [r0, #8]
+	cbz	r3, .L891
+	movw	r2, #641
+	ldr	r1, .L899
+	ldr	r0, .L899+4
+	bl	sftl_printk
+.L891:
+	ldrh	r3, [r4, #8]
+	adds	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	movs	r3, #0
+	strh	r0, [r5]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	strh	r3, [r4]	@ movhi
+	ldr	r3, [r4, #28]
+	adds	r3, r3, #1
+	str	r3, [r4, #28]
+.L892:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, pc}
+.L890:
+	ldrh	r6, [r5, r3, lsl #1]
+	movs	r1, #255
+	ldrh	r3, [r0, #2]
+	ldr	r5, .L899+8
+	ldr	r2, [r0, #28]
+	ldr	r7, [r0, #24]
+	orr	r3, r3, r6, lsl #10
+	str	r3, [r5, #3448]
+	ldr	r3, [r5, #3292]
+	str	r3, [r5, #3452]
+	ldr	r3, [r5, #3324]
+	str	r3, [r5, #3456]
+	str	r2, [r3, #4]
+	movw	r2, #64245
+	strh	r2, [r3, #8]	@ movhi
+	ldrh	r2, [r0, #4]
+	strh	r6, [r3, #2]	@ movhi
+	strh	r2, [r3]	@ movhi
+	ldrh	r2, [r5, #104]
+	ldr	r0, [r5, #3292]
+	lsls	r2, r2, #3
+	bl	ftl_memset
+	movs	r2, #0
+	mov	r3, r2
+.L893:
+	ldrh	r0, [r4, #6]
+	uxth	r1, r2
+	cmp	r0, r1
+	bhi	.L895
+	movs	r2, #1
+	movs	r3, #0
+	mov	r1, r2
+	ldr	r0, .L899+12
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
+	adds	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+	b	.L892
+.L895:
+	uxth	r1, r2
+	ldr	r0, [r7, r1, lsl #2]
+	cmp	r6, r0, lsr #10
+	bne	.L894
+	ldr	r0, [r5, #3292]
+	adds	r3, r3, #1
+	uxth	r3, r3
+	str	r1, [r0, r3, lsl #3]
+	ldr	r0, [r7, r1, lsl #2]
+	ldr	r1, [r5, #3292]
+	add	r1, r1, r3, lsl #3
+	str	r0, [r1, #4]
+.L894:
+	adds	r2, r2, #1
+	b	.L893
+.L900:
+	.align	2
+.L899:
+	.word	.LANCHOR1+286
+	.word	.LC1
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3444
+	.fnend
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	1
+	.global	FtlMapWritePage
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	ldr	r7, .L925
+	mov	r8, r1
+	mov	r10, r2
+	movs	r6, #0
+	ldr	r9, .L925+20
+	mov	r5, r7
+.L902:
+	ldr	r3, [r7, #2524]
+	adds	r3, r3, #1
+	str	r3, [r7, #2524]
+	ldrh	r3, [r7, #104]
+	ldrh	r2, [r4, #2]
+	subs	r3, r3, #1
+	cmp	r2, r3
+	bge	.L903
+	ldrh	r2, [r4]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L904
+.L903:
+	mov	r0, r4
+	bl	Ftl_write_map_blk_to_last_page
+.L904:
+	ldrh	r2, [r4]
+	ldr	r3, [r4, #12]
+	ldrh	r3, [r3, r2, lsl #1]
+	cbnz	r3, .L905
+	movw	r2, #699
+	mov	r1, r9
+	ldr	r0, .L925+4
+	bl	sftl_printk
+.L905:
+	ldrh	r2, [r4]
+	ldrh	r3, [r4, #10]
+	cmp	r2, r3
+	bcc	.L906
+	mov	r2, #700
+	mov	r1, r9
+	ldr	r0, .L925+4
+	bl	sftl_printk
+.L906:
+	ldrh	r2, [r4]
+	movs	r1, #16
+	ldr	r3, [r4, #12]
+	ldr	r0, [r5, #3324]
+	ldrh	fp, [r3, r2, lsl #1]
+	ldrh	r3, [r4, #2]
+	str	r0, [r5, #3456]
+	str	r10, [r5, #3452]
+	orr	r3, r3, fp, lsl #10
+	str	r3, [r5, #3448]
+	bl	__memzero
+	ldr	r3, [r5, #3456]
+	ldr	r2, [r4, #28]
+	ldr	r0, .L925+8
+	strh	r8, [r3, #8]	@ movhi
+	str	r2, [r3, #4]
+	ldrh	r2, [r4, #4]
+	strh	fp, [r3, #2]	@ movhi
+	strh	r2, [r3]	@ movhi
+	movs	r3, #1
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	adds	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r2, [r5, #3444]
+	adds	r1, r2, #1
+	bne	.L907
+	ldr	r1, [r5, #3448]
+	adds	r6, r6, #1
+	ldr	r0, .L925+12
+	uxth	r6, r6
+	bl	sftl_printk
+	ldrh	r3, [r4, #2]
+	cmp	r3, #2
+	ittt	ls
+	ldrhls	r3, [r5, #104]
+	addls	r3, r3, #-1
+	strhls	r3, [r4, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L909
+	mov	r2, r6
+	ldr	r1, [r5, #3448]
+	ldr	r0, .L925+16
+	bl	sftl_printk
+.L910:
+	b	.L910
+.L909:
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	beq	.L902
+.L924:
+	b	.L924
+.L907:
+	cmp	r3, #1
+	beq	.L913
+	cmp	r2, #256
+	beq	.L913
+	ldr	r0, [r4, #36]
+	cbz	r0, .L914
+.L913:
+	movs	r3, #0
+	str	r3, [r4, #36]
+	b	.L902
+.L914:
+	ldr	r2, [r5, #3448]
+	ldr	r3, [r4, #24]
+	str	r2, [r3, r8, lsl #2]
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L926:
+	.align	2
+.L925:
+	.word	.LANCHOR0
+	.word	.LC1
+	.word	.LANCHOR0+3444
+	.word	.LC89
+	.word	.LC90
+	.word	.LANCHOR1+317
+	.fnend
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	1
+	.global	load_l2p_region
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	load_l2p_region, %function
+load_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r6, r0
+	ldr	r4, .L934
+	mov	r8, r1
+	ldrh	r3, [r4, #136]
+	cmp	r3, r0
+	bcs	.L928
+	movw	r2, #485
+	ldr	r1, .L934+4
+	ldr	r0, .L934+8
+	bl	sftl_printk
+.L928:
+	ldr	r3, [r4, #3368]
+	movs	r5, #12
+	ldr	r7, [r3, r6, lsl #2]
+	cbnz	r7, .L929
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
+	ldrh	r2, [r4, #110]
+	movs	r1, #255
+	add	r3, r3, r5
+	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	movs	r2, #0
-	mov	r3, r4
-	movw	r1, #65535
-	mov	r7, r2
-.L958:
-	ldrh	r4, [r3, #138]
-	uxth	r0, r2
-	adds	r5, r2, #1
-	cmp	r4, r0
-	bhi	.L959
-	ldr	r2, [r3, #128]
-	strh	r1, [r3, #3906]	@ movhi
-	strh	r1, [r3, #3904]	@ movhi
-	strh	r2, [r3, #3914]	@ movhi
-	movw	r2, #61634
-	strh	r2, [r3, #3908]	@ movhi
-	ldrh	r2, [r3, #3944]
-	strh	r2, [r3, #3912]	@ movhi
-	ldrh	r2, [r3, #136]
-	strh	r2, [r3, #3910]	@ movhi
-	ldr	r2, [r3, #3868]
-	str	r2, [r3, #3916]
-	ldr	r2, [r3, #3892]
-	str	r2, [r3, #3920]
-	ldr	r2, [r3, #3872]
-	str	r2, [r3, #3924]
-	ldr	r2, [r3, #3888]
-	str	r2, [r3, #3928]
-	pop	{r3, r4, r5, r6, r7, pc}
-.L959:
-	uxth	r2, r2
-	ldr	r0, [r3, #2492]
-	mul	r4, r6, r2
-	add	ip, r0, r4
-	str	r7, [ip, #4]
-	strh	r1, [r0, r4]	@ movhi
-	ldr	r0, [r3, #2492]
-	add	r0, r0, r4
-	ldrh	r4, [r3, #110]
-	muls	r2, r4, r2
-	ldr	r4, [r3, #3896]
-	bic	r2, r2, #3
-	add	r2, r2, r4
-	str	r2, [r0, #8]
-	mov	r2, r5
-	b	.L958
+	ldr	r3, [r4, #2492]
+	strh	r6, [r3, r5]	@ movhi
+	ldr	r3, [r4, #2492]
+	add	r5, r5, r3
+	str	r7, [r5, #4]
+.L930:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L929:
+	mul	r5, r5, r8
+	ldr	r3, [r4, #2492]
+	movs	r2, #1
+	ldr	r0, .L934+12
+	mov	r1, r2
+	str	r7, [r4, #3448]
+	add	r3, r3, r5
+	ldr	r3, [r3, #8]
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
+	str	r3, [r4, #3456]
+	bl	FlashReadPages
+	ldr	r8, [r4, #3456]
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L931
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L934+16
+	bl	sftl_printk
+	movs	r3, #4
+	ldr	r1, [r4, #3456]
+	mov	r2, r3
+	ldr	r0, .L934+20
+	bl	rknand_print_hex
+	ldrh	r3, [r4, #136]
+	movs	r2, #4
+	ldr	r1, [r4, #3368]
+	ldr	r0, .L934+24
+	bl	rknand_print_hex
+.L932:
+	ldrh	r3, [r8, #8]
+	cmp	r3, r6
+	beq	.L933
+	mov	r2, #508
+	ldr	r1, .L934+4
+	ldr	r0, .L934+8
+	bl	sftl_printk
+.L933:
+	ldr	r3, [r4, #2492]
+	movs	r1, #0
+	adds	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r6, [r3, r5]	@ movhi
+	b	.L930
+.L931:
+	ldr	r3, [r4, #3444]
+	cmp	r3, #256
+	bne	.L932
+	mov	r2, r7
+	mov	r1, r6
+	ldr	r0, .L934+28
+	bl	sftl_printk
+	ldr	r3, [r4, #2492]
+	mov	r1, r6
+	ldr	r0, .L934+32
+	add	r3, r3, r5
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+	b	.L932
+.L935:
+	.align	2
+.L934:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+333
+	.word	.LC1
+	.word	.LANCHOR0+3444
+	.word	.LC91
+	.word	.LC92
+	.word	.LC93
+	.word	.LC94
+	.word	.LANCHOR0+3384
+	.fnend
+	.size	load_l2p_region, .-load_l2p_region
+	.align	1
+	.global	ftl_map_blk_gc
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r0
+	ldr	r6, [r0, #12]
+	ldr	r10, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	r3, [r4, #10]
+	ldrh	r2, [r4, #8]
+	ldr	r5, .L952
+	subs	r3, r3, #5
+	cmp	r2, r3
+	blt	.L937
+	uxth	r0, r0
+	ldrh	r9, [r6, r0, lsl #1]
+	cmp	r9, #0
+	beq	.L937
+	ldr	r3, [r4, #32]
+	cbnz	r3, .L937
+	movs	r2, #1
+	str	r2, [r4, #32]
+	strh	r3, [r6, r0, lsl #1]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
+	subs	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldrh	r3, [r5, #104]
+	cmp	r2, r3
+	bcc	.L938
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L938:
+	movs	r6, #0
+.L939:
+	ldrh	r2, [r4, #6]
+	uxth	fp, r6
+	cmp	r2, fp
+	bhi	.L946
+	movs	r1, #1
+	mov	r0, r9
+	bl	FtlFreeSysBlkQueueIn
+	movs	r3, #0
+	str	r3, [r4, #32]
+.L937:
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r5, #104]
+	cmp	r2, r3
+	bcc	.L947
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L947:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L946:
+	uxth	r7, r6
+	ldr	r2, [r10, r7, lsl #2]
+	add	r3, r10, r7, lsl #2
+	str	r3, [sp, #4]
+	cmp	r9, r2, lsr #10
+	bne	.L940
+	ldr	r2, [r5, #3296]
+	ldr	r8, [r5, #3324]
+	ldr	r0, .L952+4
+	str	r2, [r5, #3452]
+	str	r8, [r5, #3456]
+	ldr	r2, [r10, r7, lsl #2]
+	str	r2, [r5, #3448]
+	movs	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldrh	r2, [r8, #8]
+	cmp	r2, fp
+	beq	.L941
+	movw	r2, #611
+	ldr	r1, .L952+8
+	ldr	r0, .L952+12
+	bl	sftl_printk
+.L941:
+	ldr	r2, [r5, #3444]
+	adds	r2, r2, #1
+	bne	.L942
+.L944:
+	ldr	r2, [sp, #4]
+	movs	r3, #0
+	str	r3, [r2]
+.L943:
+	b	.L943
+.L942:
+	ldrh	r2, [r8, #8]
+	cmp	r2, fp
+	bne	.L944
+	ldrh	r2, [r8]
+	ldrh	r3, [r4, #4]
+	cmp	r2, r3
+	bne	.L944
+	ldr	r2, [r5, #3452]
+	mov	r1, r7
+	mov	r0, r4
+	bl	FtlMapWritePage
+.L940:
+	adds	r6, r6, #1
+	b	.L939
+.L953:
+	.align	2
+.L952:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3444
+	.word	.LANCHOR1+349
+	.word	.LC1
+	.fnend
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	1
+	.global	FtlMapTblRecovery
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r3, [r0, #24]
+	mov	r4, r0
+	movs	r1, #0
+	ldrh	r10, [r0, #6]
+	str	r3, [sp, #4]
+	ldr	r3, [r0, #16]
+	ldr	r5, .L981
+	ldr	r9, [r0, #12]
+	lsl	r2, r10, #2
+	str	r3, [sp, #12]
+	ldrh	r3, [r0, #8]
+	ldr	r0, [sp, #4]
+	str	r3, [sp, #8]
+	bl	ftl_memset
+	ldr	r3, [r5, #3292]
+	movs	r2, #1
+	ldr	r6, [r5, #3324]
+	str	r2, [r4, #36]
+	str	r3, [r5, #3452]
+	movw	r3, #65535
+	str	r6, [r5, #3456]
+	strh	r3, [r4]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	movs	r3, #0
+	str	r3, [r4, #32]
+	mov	r8, r3
+	str	r3, [r4, #28]
+	ldr	r3, [sp, #8]
+	add	fp, r3, #-1
+	mov	r3, r5
+.L955:
+	ldr	r1, [sp, #8]
+	sxth	r2, r8
+	cmp	r2, r1
+	bge	.L972
+	cmp	r2, fp
+	lsl	r7, r2, #1
+	bne	.L956
+	ldrh	r0, [r9, fp, lsl #1]
+	movs	r1, #1
+	bl	FtlGetLastWrittenPage
+	ldr	r3, [sp, #12]
+	add	r7, r7, r9
+	strh	r8, [r4]	@ movhi
+	sxth	r9, r0
+	ldr	r8, .L981+4
+	adds	r0, r0, #1
+	strh	r0, [r4, #2]	@ movhi
+	add	r9, r9, #1
+	ldr	r3, [r3, fp, lsl #2]
+	mov	fp, #0
+	str	r3, [r4, #28]
+.L957:
+	sxth	r2, fp
+	cmp	r2, r9
+	blt	.L959
+.L972:
+	mov	r0, r4
+	bl	ftl_free_no_use_map_blk
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r5, #104]
+	cmp	r2, r3
+	bne	.L961
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
 .L961:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	movs	r0, #0
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L959:
+	ldrh	r1, [r7]
+	mov	r0, r8
+	orr	r2, r2, r1, lsl #10
+	str	r2, [r5, #3448]
+	movs	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r5, #3444]
+	adds	r2, r2, #1
+	beq	.L958
+	ldrh	r2, [r6, #8]
+	cmp	r10, r2
+	bls	.L958
+	ldrh	r1, [r4, #4]
+	ldrh	r0, [r6]
+	cmp	r0, r1
+	ittt	eq
+	ldreq	r1, [r5, #3448]
+	ldreq	r3, [sp, #4]
+	streq	r1, [r3, r2, lsl #2]
+.L958:
+	add	fp, fp, #1
+	b	.L957
+.L956:
+	ldr	r1, [r5, #3292]
+	str	r3, [sp, #20]
+	add	r3, r9, r7
+	ldr	r0, .L981+4
+	str	r1, [r5, #3452]
+	ldrh	r1, [r9, r2, lsl #1]
+	ldrh	r2, [r5, #104]
+	str	r3, [sp, #16]
+	subs	r2, r2, #1
+	orr	r2, r2, r1, lsl #10
+	str	r2, [r5, #3448]
+	movs	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r2, [r5, #3444]
+	ldr	r3, [sp, #20]
+	adds	r2, r2, #1
+	beq	.L974
+	ldrh	r1, [r6]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	bne	.L974
+	ldrh	r1, [r6, #8]
+	movw	r2, #64245
+	cmp	r1, r2
+	beq	.L963
+.L974:
+	movs	r7, #0
+.L964:
+	ldrh	r1, [r3, #104]
+	sxth	r2, r7
+	cmp	r2, r1
+	bge	.L970
+	ldr	r1, [sp, #16]
+	ldr	r0, .L981+4
+	str	r3, [sp, #20]
+	ldrh	r1, [r1]
+	orr	r2, r2, r1, lsl #10
+	str	r2, [r3, #3448]
+	movs	r2, #1
+	mov	r1, r2
+	bl	FlashReadPages
+	ldr	r3, [sp, #20]
+	ldr	r2, [r3, #3444]
+	adds	r2, r2, #1
+	beq	.L968
+	ldrh	r2, [r6, #8]
+	cmp	r10, r2
+	bls	.L968
+	ldrh	r0, [r6]
+	ldrh	r1, [r4, #4]
+	cmp	r0, r1
+	ittt	eq
+	ldreq	r1, [r3, #3448]
+	ldreq	r0, [sp, #4]
+	streq	r1, [r0, r2, lsl #2]
+.L968:
+	adds	r7, r7, #1
+	b	.L964
+.L963:
+	movs	r0, #0
+	mov	ip, #4
+.L965:
+	ldrh	r1, [r5, #104]
+	sxth	r2, r0
+	subs	r1, r1, #1
+	cmp	r2, r1
+	blt	.L967
+.L970:
+	add	r8, r8, #1
+	b	.L955
+.L967:
+	ldr	r7, [r5, #3292]
+	ldr	r1, [r7, r2, lsl #3]
+	uxth	lr, r1
+	cmp	r10, lr
+	bls	.L966
+	add	r2, ip, r2, lsl #3
+	ldr	r2, [r7, r2]
+	ldr	r7, [sp, #4]
+	str	r2, [r7, lr, lsl #2]
+.L966:
+	adds	r0, r0, #1
+	b	.L965
+.L982:
 	.align	2
-.L960:
+.L981:
 	.word	.LANCHOR0
+	.word	.LANCHOR0+3444
 	.fnend
-	.size	FtlL2PDataInit, .-FtlL2PDataInit
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	1
+	.global	FtlLoadVonderInfo
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r0, .L984
+	push	{r3, lr}
+	.save {r3, lr}
+	ldrh	r3, [r0, #120]
+	strh	r3, [r0, #3478]	@ movhi
+	movw	r3, #61574
+	strh	r3, [r0, #3472]	@ movhi
+	ldrh	r3, [r0, #144]
+	strh	r3, [r0, #3476]	@ movhi
+	ldrh	r3, [r0, #122]
+	strh	r3, [r0, #3474]	@ movhi
+	ldr	r3, [r0, #148]
+	addw	r0, r0, #3468
+	str	r3, [r0, #12]
+	ldr	r3, [r0, #-108]
+	str	r3, [r0, #16]
+	ldr	r3, [r0, #-112]
+	str	r3, [r0, #20]
+	ldr	r3, [r0, #-104]
+	str	r3, [r0, #24]
+	bl	FtlMapTblRecovery
+	movs	r0, #0
+	pop	{r3, pc}
+.L985:
+	.align	2
+.L984:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
 	.align	1
 	.global	FtlLoadMapInfo
 	.syntax unified
@@ -6651,223 +6898,478 @@ FtlLoadMapInfo:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L963
+	ldr	r0, .L987
 	bl	FtlMapTblRecovery
 	movs	r0, #0
-	pop	{r3, pc}
-.L964:
+	pop	{r3, pc}
+.L988:
+	.align	2
+.L987:
+	.word	.LANCHOR0+3384
+	.fnend
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	1
+	.global	flush_l2p_region
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r4, #12
+	ldr	r5, .L990
+	muls	r4, r0, r4
+	ldr	r3, [r5, #2492]
+	addw	r0, r5, #3384
+	adds	r2, r3, r4
+	ldrh	r1, [r3, r4]
+	ldr	r2, [r2, #8]
+	bl	FtlMapWritePage
+	ldr	r3, [r5, #2492]
+	movs	r0, #0
+	add	r4, r4, r3
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	pop	{r3, r4, r5, pc}
+.L991:
+	.align	2
+.L990:
+	.word	.LANCHOR0
+	.fnend
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	1
+	.global	log2phys
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	log2phys, %function
+log2phys:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r0
+	ldr	r4, .L1005
+	mov	r5, r1
+	mov	r7, r2
+	ldr	r3, [r4, #2504]
+	ldrh	r10, [r4, #108]
+	cmp	r0, r3
+	bcc	.L993
+	movw	r2, #811
+	ldr	r1, .L1005+4
+	ldr	r0, .L1005+8
+	bl	sftl_printk
+.L993:
+	ldr	r3, [r4, #2504]
+	cmp	r9, r3
+	bcs	.L994
+	add	r10, r10, #7
+	ldrh	r2, [r4, #138]
+	lsr	r6, r9, r10
+	ldr	r1, [r4, #2492]
+	movs	r3, #0
+	uxth	r6, r6
+	mov	fp, #12
+.L995:
+	uxth	r8, r3
+	cmp	r8, r2
+	bcc	.L1000
+	bl	select_l2p_ram_region
+	mul	fp, fp, r0
+	ldr	r3, [r4, #2492]
+	mov	r8, r0
+	ldrh	r1, [r3, fp]
+	add	r2, r3, fp
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1001
+	ldr	r3, [r2, #4]
+	cmp	r3, #0
+	bge	.L1001
+	bl	flush_l2p_region
+.L1001:
+	mov	r1, r8
+	mov	r0, r6
+	bl	load_l2p_region
+	b	.L997
+.L994:
+	mov	r0, #-1
+	cbnz	r7, .L992
+	str	r0, [r5]
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1000:
+	adds	r3, r3, #1
+	mla	r0, fp, r3, r1
+	ldrh	r0, [r0, #-12]
+	cmp	r0, r6
+	bne	.L995
+.L997:
+	movs	r0, #1
+	movs	r3, #12
+	lsl	r0, r0, r10
+	subs	r0, r0, #1
+	and	r0, r0, r9
+	uxth	r0, r0
+	cbnz	r7, .L998
+	ldr	r2, [r4, #2492]
+	mla	r3, r3, r8, r2
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, r0, lsl #2]
+	str	r3, [r5]
+.L999:
+	ldr	r2, [r4, #2492]
+	movs	r3, #12
+	mla	r8, r3, r8, r2
+	ldr	r3, [r8, #4]
+	adds	r2, r3, #1
+	beq	.L1003
+	adds	r3, r3, #1
+	str	r3, [r8, #4]
+.L1003:
+	movs	r0, #0
+.L992:
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L998:
+	mul	r3, r3, r8
+	ldr	r2, [r4, #2492]
+	ldr	r1, [r5]
+	add	r2, r2, r3
+	ldr	r2, [r2, #8]
+	str	r1, [r2, r0, lsl #2]
+	ldr	r2, [r4, #2492]
+	strh	r6, [r4, #2496]	@ movhi
+	add	r3, r3, r2
+	ldr	r2, [r3, #4]
+	orr	r2, r2, #-2147483648
+	str	r2, [r3, #4]
+	b	.L999
+.L1006:
 	.align	2
-.L963:
-	.word	.LANCHOR0+3904
+.L1005:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+364
+	.word	.LC1
 	.fnend
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.size	log2phys, .-log2phys
 	.align	1
-	.global	FtlVariablesInit
+	.global	FtlReUsePrevPpa
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlVariablesInit, %function
-FtlVariablesInit:
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	movs	r5, #0
-	ldr	r4, .L966
-	movw	r3, #65535
-	mov	r1, r5
-	ldrh	r2, [r4, #120]
-	strh	r3, [r4, #3992]	@ movhi
-	mov	r3, #-1
-	ldr	r0, [r4, #148]
-	str	r3, [r4, #4004]
-	lsls	r2, r2, #1
-	str	r5, [r4, #3988]
-	str	r5, [r4, #3996]
-	str	r5, [r4, #4000]
-	strh	r5, [r4, #144]	@ movhi
-	bl	ftl_memset
-	ldrh	r2, [r4, #42]
-	mov	r1, r5
-	ldr	r0, [r4, #2328]
-	lsls	r2, r2, #1
-	bl	ftl_memset
-	ldrh	r2, [r4, #42]
-	mov	r1, r5
-	ldr	r0, [r4, #3856]
-	lsls	r2, r2, #1
-	bl	ftl_memset
-	addw	r0, r4, #2268
-	movs	r1, #48
-	bl	__memzero
-	addw	r0, r4, #2636
-	mov	r1, #512
-	bl	__memzero
-	bl	FtlGcBufInit
-	bl	FtlL2PDataInit
-	mov	r0, r5
-	pop	{r3, r4, r5, pc}
-.L967:
+	push	{r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r6, r0
+	ldr	r5, .L1017
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r2, [r5, #2324]
+	mov	r7, r0
+	ldrh	r3, [r2, r0, lsl #1]
+	cbnz	r3, .L1008
+	ldr	r4, [r5, #2340]
+	cbz	r4, .L1009
+	ldr	r1, [r5, #2316]
+	mov	ip, #6
+	ldr	r2, .L1017+4
+	movw	lr, #65535
+	ldrh	r0, [r5, #2344]
+	subs	r4, r4, r1
+	asrs	r4, r4, #1
+	muls	r4, r2, r4
+	uxth	r4, r4
+.L1010:
+	uxth	r2, r3
+	cmp	r0, r2
+	bls	.L1009
+	cmp	r4, r7
+	bne	.L1011
+	mov	r1, r4
+	ldr	r0, .L1017+8
+	bl	List_remove_node
+	ldrh	r3, [r5, #2344]
+	cbnz	r3, .L1012
+	movw	r2, #1699
+	ldr	r1, .L1017+12
+	ldr	r0, .L1017+16
+	bl	sftl_printk
+.L1012:
+	ldrh	r3, [r5, #2344]
+	mov	r0, r4
+	subs	r3, r3, #1
+	strh	r3, [r5, #2344]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r5, #2324]
+	ldrh	r3, [r2, r7, lsl #1]
+.L1008:
+	adds	r3, r3, #1
+	strh	r3, [r2, r7, lsl #1]	@ movhi
+	b	.L1009
+.L1011:
+	mul	r4, ip, r4
+	adds	r3, r3, #1
+	ldrh	r4, [r1, r4]
+	cmp	r4, lr
+	bne	.L1010
+.L1009:
+	movs	r2, #1
+	add	r1, sp, #4
+	mov	r0, r6
+	bl	log2phys
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, pc}
+.L1018:
 	.align	2
-.L966:
+.L1017:
 	.word	.LANCHOR0
+	.word	-1431655765
+	.word	.LANCHOR0+2340
+	.word	.LANCHOR1+373
+	.word	.LC1
 	.fnend
-	.size	FtlVariablesInit, .-FtlVariablesInit
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	1
-	.global	SupperBlkListInit
+	.global	ftl_check_vpc
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	SupperBlkListInit, %function
-SupperBlkListInit:
+	.type	ftl_check_vpc, %function
+ftl_check_vpc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
+	movs	r4, #0
+	ldr	r6, .L1043
+	ldr	r7, .L1043+4
+	ldr	r1, .L1043+8
+	mov	r5, r6
+	ldr	r0, .L1043+12
+	bl	sftl_printk
+	mov	r1, #8192
+	ldr	r0, .L1043+4
+	bl	__memzero
+.L1020:
+	ldr	r3, [r6, #2504]
+	cmp	r4, r3
+	bcc	.L1022
+	ldr	r8, .L1043+4
+	movs	r4, #0
+	ldr	r10, .L1043+24
+	mov	r7, r4
+	movw	r9, #65535
+.L1023:
+	ldrh	r2, [r5, #40]
+	uxth	r3, r4
+	cmp	r2, r3
+	bhi	.L1025
+	ldr	r4, [r5, #2340]
+	cbz	r4, .L1026
+	ldr	r3, [r5, #2316]
 	movs	r6, #0
-	ldr	r4, .L979
-	movs	r2, #6
-	mov	r9, r6
-	mov	r7, r6
-	movs	r1, #0
-	ldrh	r3, [r4, #42]
-	add	fp, r4, #60
-	ldr	r0, [r4, #2316]
-	muls	r2, r3, r2
-	bl	ftl_memset
-	str	r6, [r4, #2340]
-	str	r6, [r4, #2320]
-	str	r6, [r4, #2332]
-	strh	r6, [r4, #2336]	@ movhi
-	strh	r6, [r4, #2344]	@ movhi
-.L969:
-	ldrh	r3, [r4, #40]
-	uxth	r8, r6
+	ldrh	r8, [r5, #2344]
+	mov	fp, #6
+	ldr	r9, .L1043+4
+	subs	r4, r4, r3
+	ldr	r3, .L1043+16
+	asrs	r4, r4, #1
+	ldr	r10, .L1043+28
+	muls	r4, r3, r4
+	uxth	r4, r4
+.L1027:
+	uxth	r3, r6
 	cmp	r8, r3
-	bcs	.L975
-	mov	r10, #0
-	ldrh	r2, [r4, #32]
-	ldrh	r3, [r4, #102]
-	mov	r5, r10
-	b	.L976
-.L971:
-	mov	r1, r8
-	ldrb	r0, [fp, r10]	@ zero_extendqisi2
-	stm	sp, {r2, r3}
-	bl	V2P_block
-	bl	FtlBbmIsBadBlock
-	ldm	sp, {r2, r3}
-	cbnz	r0, .L970
-	add	r5, r5, r3
-	uxth	r5, r5
-.L970:
-	add	r10, r10, #1
-.L976:
-	uxth	r1, r10
-	cmp	r2, r1
-	bhi	.L971
-	cbz	r5, .L978
-	mov	r1, r5
-	mov	r0, #32768
-	bl	__aeabi_idiv
-.L972:
-	ldr	r2, [r4, #2316]
-	uxth	r1, r6
-	movs	r3, #6
-	mla	r3, r3, r1, r2
-	strh	r0, [r3, #4]	@ movhi
-	ldrh	r3, [r4, #2348]
-	cmp	r3, r8
-	beq	.L973
-	ldrh	r3, [r4, #2396]
-	cmp	r3, r8
-	beq	.L973
-	ldrh	r3, [r4, #2444]
-	cmp	r3, r8
-	beq	.L973
-	ldr	r3, [r4, #2324]
-	ldrh	r3, [r3, r1, lsl #1]
-	cbnz	r3, .L974
-	add	r9, r9, #1
-	mov	r0, r8
-	uxth	r9, r9
-	bl	INSERT_FREE_LIST
-.L973:
+	bls	.L1026
+	ldr	r3, [r5, #2324]
+	ldrh	r2, [r3, r4, lsl #1]
+	cbz	r2, .L1028
+	movs	r7, #1
+	ldrh	r3, [r9, r4, lsl #1]
+	mov	r1, r4
+	mov	r0, r10
+	bl	sftl_printk
+.L1028:
+	mul	r4, fp, r4
+	ldr	r3, [r5, #2316]
 	adds	r6, r6, #1
-	b	.L969
-.L978:
-	mov	r0, r5
-	b	.L972
-.L974:
-	adds	r7, r7, #1
-	mov	r0, r8
-	uxth	r7, r7
-	bl	INSERT_DATA_LIST
-	b	.L973
-.L975:
-	strh	r7, [r4, #2336]	@ movhi
-	add	r7, r7, r9
-	cmp	r7, r3
-	strh	r9, [r4, #2344]	@ movhi
-	ble	.L977
-	movw	r2, #2154
-	ldr	r1, .L979+4
-	ldr	r0, .L979+8
-	bl	printk
-.L977:
-	movs	r0, #0
+	ldrh	r4, [r3, r4]
+	movw	r3, #65535
+	cmp	r4, r3
+	bne	.L1027
+.L1026:
+	cbz	r7, .L1019
+	movw	r2, #2343
+	ldr	r1, .L1043+8
+	ldr	r0, .L1043+20
+	bl	sftl_printk
+.L1019:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L980:
+.L1022:
+	movs	r2, #0
+	add	r1, sp, #4
+	mov	r0, r4
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	adds	r3, r0, #1
+	beq	.L1021
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r7, r0, lsl #1]
+	adds	r3, r3, #1
+	strh	r3, [r7, r0, lsl #1]	@ movhi
+.L1021:
+	adds	r4, r4, #1
+	b	.L1020
+.L1025:
+	ldr	r3, [r5, #2324]
+	uxth	r6, r4
+	ldrh	r2, [r3, r6, lsl #1]
+	ldrh	r3, [r8, r6, lsl #1]
+	cmp	r2, r3
+	beq	.L1024
+	mov	r1, r6
+	mov	r0, r10
+	bl	sftl_printk
+	ldr	r3, [r5, #2324]
+	ldrh	r3, [r3, r6, lsl #1]
+	cmp	r3, r9
+	beq	.L1024
+	ldrh	r2, [r8, r6, lsl #1]
+	cmp	r2, r3
+	it	hi
+	movhi	r7, #1
+.L1024:
+	adds	r4, r4, #1
+	b	.L1023
+.L1044:
 	.align	2
-.L979:
+.L1043:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+342
+	.word	check_vpc_table
+	.word	.LANCHOR1+389
+	.word	.LC95
+	.word	-1431655765
 	.word	.LC1
+	.word	.LC96
+	.word	.LC97
 	.fnend
-	.size	SupperBlkListInit, .-SupperBlkListInit
+	.size	ftl_check_vpc, .-ftl_check_vpc
 	.align	1
-	.global	FtlGcPageVarInit
+	.global	ftl_scan_all_data
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlGcPageVarInit, %function
-FtlGcPageVarInit:
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	movs	r3, #0
-	ldr	r4, .L982
-	movs	r1, #255
-	ldrh	r2, [r4, #106]
-	ldr	r0, [r4, #3188]
-	strh	r3, [r4, #3192]	@ movhi
-	strh	r3, [r4, #3200]	@ movhi
-	lsls	r2, r2, #1
-	bl	ftl_memset
-	ldrh	r3, [r4, #106]
-	movs	r2, #12
-	ldr	r0, [r4, #3196]
-	movs	r1, #255
-	muls	r2, r3, r2
-	bl	ftl_memset
-	pop	{r4, lr}
-	b	FtlGcBufInit
-.L983:
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movs	r5, #0
+	ldr	r6, .L1059
+	.pad #32
+	sub	sp, sp, #32
+	movs	r1, #0
+	ldr	r8, .L1059+16
+	mov	r4, r6
+	ldr	r0, .L1059+4
+	bl	sftl_printk
+.L1046:
+	ldr	r3, [r6, #2504]
+	cmp	r5, r3
+	bcc	.L1052
+	add	sp, sp, #32
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1052:
+	movs	r2, #0
+	add	r1, sp, #28
+	mov	r0, r5
+	bl	log2phys
+	ubfx	r3, r5, #0, #11
+	cbnz	r3, .L1047
+	ldr	r2, [sp, #28]
+	mov	r1, r5
+	mov	r0, r8
+	bl	sftl_printk
+.L1047:
+	ldr	r3, [sp, #28]
+	adds	r2, r3, #1
+	beq	.L1049
+	str	r3, [r4, #3448]
+	movs	r2, #0
+	ldr	r3, [r4, #3292]
+	movs	r1, #1
+	ldr	r7, [r4, #3324]
+	ldr	r0, .L1059+8
+	str	r3, [r4, #3452]
+	str	r5, [r4, #3460]
+	str	r7, [r4, #3456]
+	str	r2, [r4, #3444]
+	bl	FlashReadPages
+	ldr	r3, [r4, #3444]
+	cmp	r3, #256
+	beq	.L1050
+	adds	r3, r3, #1
+	beq	.L1050
+	ldr	r3, [r7, #8]
+	cmp	r5, r3
+	beq	.L1049
+.L1050:
+	ldr	r2, [r4, #3452]
+	ldr	r3, [r4, #3456]
+	ldr	r0, .L1059+12
+	ldr	r1, [r2, #4]
+	str	r1, [sp, #16]
+	mov	r1, r5
+	ldr	r2, [r2]
+	str	r2, [sp, #12]
+	ldr	r2, [r3, #12]
+	str	r2, [sp, #8]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #4]
+	str	r2, [sp]
+	ldr	r3, [r3]
+	ldr	r2, [r4, #3448]
+	bl	sftl_printk
+.L1049:
+	adds	r5, r5, #1
+	b	.L1046
+.L1060:
 	.align	2
-.L982:
+.L1059:
 	.word	.LANCHOR0
+	.word	.LC98
+	.word	.LANCHOR0+3444
+	.word	.LC100
+	.word	.LC99
 	.fnend
-	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	1
 	.global	FtlGcScanTempBlk
 	.syntax unified
@@ -6877,196 +7379,445 @@ FtlGcPageVarInit:
 	.type	FtlGcScanTempBlk, %function
 FtlGcScanTempBlk:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1009
+	ldr	r3, .L1093
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #28
-	sub	sp, sp, #28
-	mov	r7, r0
-	str	r1, [sp, #8]
-	ldrh	r4, [r3, #4]
+	.pad #52
+	sub	sp, sp, #52
+	mov	r4, r0
+	str	r1, [sp, #12]
+	ldrh	r6, [r3, #4]
 	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L1003
-	cbnz	r4, .L985
-.L986:
+	cmp	r6, r3
+	beq	.L1087
+	cbnz	r6, .L1062
+.L1063:
 	bl	FtlGcPageVarInit
-	b	.L987
-.L1003:
-	movs	r4, #0
-.L985:
-	ldr	r3, .L1009+4
-	ldr	r2, [sp, #8]
+	b	.L1064
+.L1087:
+	movs	r6, #0
+.L1062:
+	ldr	r3, .L1093+4
+	ldr	r2, [sp, #12]
 	ldrh	r3, [r3, #102]
 	cmp	r3, r2
-	beq	.L986
-.L987:
-	mov	fp, #0
-	movw	r8, #65535
-.L997:
-	ldrh	r3, [r7]
-	movs	r0, #0
-	strb	r0, [r7, #8]
-	cmp	r3, r8
-	beq	.L988
-	ldr	r5, .L1009+4
-.L1000:
-	ldr	r3, [r5, #3832]
+	beq	.L1063
+.L1064:
+	movw	r9, #65535
+	movs	r3, #0
+	str	r3, [sp, #4]
+.L1065:
+	movs	r3, #0
+	strb	r3, [r4, #8]
+	ldrh	r3, [r4]
+	cmp	r3, r9
+	beq	.L1066
+	ldr	r5, .L1093+4
+.L1084:
+	ldr	r3, [r5, #3280]
 	movs	r2, #0
 	ldrh	ip, [r5, #32]
-	add	lr, r7, #16
-	ldr	r10, [r5, #3176]
-	mov	r6, r2
-	str	r3, [sp, #4]
-	mov	r9, #20
+	add	lr, r4, #16
+	ldrh	fp, [r5, #110]
+	mov	r7, r2
+	str	r3, [sp, #8]
+	mov	r8, #20
 	ldr	r3, [r5, #3172]
-	str	r3, [sp, #12]
-	ldrh	r3, [r5, #110]
+	ldr	r10, [r5, #3176]
 	str	r3, [sp, #16]
 	ldrh	r3, [r5, #112]
 	str	r3, [sp, #20]
-.L989:
+.L1067:
 	uxth	r3, r2
 	cmp	ip, r3
-	bhi	.L993
-	mov	r9, #0
+	bhi	.L1071
+	mov	fp, #0
 	movs	r2, #0
-	mov	r1, r6
-	ldr	r0, [sp, #4]
+	mov	r1, r7
+	ldr	r0, [sp, #8]
 	bl	FlashReadPages
-.L994:
-	uxth	r3, r9
-	cmp	r6, r3
-	bhi	.L998
-	ldr	r3, [sp, #8]
-	add	fp, fp, #1
-	adds	r4, r4, #1
-	uxth	r4, r4
-	cmp	r3, fp
-	bls	.L999
-.L1001:
+.L1072:
+	uxth	r3, fp
+	cmp	r7, r3
+	bhi	.L1082
+	ldr	r3, [sp, #4]
+	adds	r6, r6, #1
+	uxth	r6, r6
+	adds	r3, r3, #1
+	str	r3, [sp, #4]
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #12]
+	cmp	r3, r2
+	bls	.L1083
+.L1085:
 	ldrh	r3, [r5, #102]
-	cmp	r3, r4
-	bhi	.L1000
-	movs	r0, #0
-	b	.L988
-.L993:
+	cmp	r3, r6
+	bhi	.L1084
+.L1066:
+	ldr	r3, .L1093
+	movw	r2, #65535
+	strh	r6, [r4, #2]	@ movhi
+	mov	r1, r6
+	mov	r0, r4
+	strh	r2, [r3, #4]	@ movhi
+	movs	r2, #0
+	strb	r2, [r4, #6]
+	bl	ftl_sb_update_avl_pages
+	b	.L1086
+.L1071:
 	ldrh	r3, [lr], #2
-	cmp	r3, r8
-	beq	.L990
-	ldr	r1, [sp, #4]
-	orr	r3, r4, r3, lsl #10
-	mla	r1, r9, r6, r1
+	cmp	r3, r9
+	beq	.L1068
+	ldr	r1, [sp, #8]
+	orr	r3, r6, r3, lsl #10
+	mla	r1, r8, r7, r1
 	str	r3, [r1, #4]
-	ldr	r3, [sp, #16]
-	muls	r3, r6, r3
+	mov	r3, fp
+	muls	r3, r7, r3
 	it	mi
 	addmi	r3, r3, #3
 	bic	r3, r3, #3
 	mov	r0, r3
-	ldr	r3, [sp, #12]
+	ldr	r3, [sp, #16]
 	add	r0, r0, r3
 	ldr	r3, [sp, #20]
-	muls	r3, r6, r3
-	add	r6, r6, #1
+	muls	r3, r7, r3
+	add	r7, r7, #1
 	it	mi
 	addmi	r3, r3, #3
-	uxth	r6, r6
+	uxth	r7, r7
 	bic	r3, r3, #3
 	str	r0, [r1, #8]
 	add	r3, r3, r10
 	str	r3, [r1, #12]
-.L990:
+.L1068:
 	adds	r2, r2, #1
-	b	.L989
-.L998:
+	b	.L1067
+.L1082:
 	movs	r3, #20
-	ldr	r2, [r5, #3832]
-	mul	r10, r3, r9
-	str	r2, [sp, #16]
-	add	r3, r2, r10
-	ldr	r1, [r3, #4]
-	str	r3, [sp, #12]
-	ubfx	r0, r1, #10, #16
-	str	r1, [sp, #4]
-	bl	P2V_plane
-	ldr	r2, [sp, #16]
-	ldr	r2, [r2, r10]
-	cbnz	r2, .L995
-	ldr	r3, [sp, #12]
-	add	r9, r9, #1
-	ldr	r1, [sp, #4]
-	ldr	r3, [r3, #12]
-	ldrh	r2, [r3]
-	cmp	r2, r8
-	bne	.L996
-	movs	r3, #1
-	str	r3, [r5, #4000]
-.L988:
-	ldr	r3, .L1009
-	movw	r2, #65535
-	strb	r0, [r7, #6]
-	mov	r1, r4
-	strh	r4, [r7, #2]	@ movhi
-	strh	r2, [r3, #4]	@ movhi
-	mov	r2, r0
-	mov	r0, r7
-	bl	ftl_sb_update_avl_pages
-	b	.L1002
-.L996:
-	ldr	r2, [r3, #8]
-	ldr	r0, [r3, #12]
+	ldr	r1, [r5, #3280]
+	mul	r3, r3, fp
+	adds	r2, r1, r3
+	ldr	r8, [r1, r3]
+	ldr	r0, [r2, #4]
+	str	r0, [sp, #8]
+	cmp	r8, #0
+	bne	.L1073
+	ldr	r10, [r2, #12]
+	ldrh	r2, [r10]
+	cmp	r2, r9
+	bne	.L1074
+	ldrh	r2, [r4]
+	ldr	r3, [r5, #2324]
+	strh	r8, [r3, r2, lsl #1]	@ movhi
+.L1092:
+	ldrh	r0, [r4]
+	movs	r6, #0
+	bl	INSERT_FREE_LIST
+	strh	r9, [r4]	@ movhi
+	bl	FtlGcPageVarInit
+	b	.L1065
+.L1074:
+	mov	r2, r8
+	add	r1, sp, #24
+	ldr	r0, [r10, #8]
+	str	r3, [sp, #16]
+	bl	log2phys
+	ldr	r2, [r10, #12]
+	ldr	r1, [sp, #24]
+	ldr	r3, [sp, #16]
+	cmp	r2, r1
+	beq	.L1076
+.L1080:
+	ldr	r2, [r10, #8]
+	add	fp, fp, #1
+	ldr	r1, [sp, #8]
+	ldr	r0, [r10, #12]
 	bl	FtlGcUpdatePage
-	b	.L994
-.L995:
-	ldrh	r2, [r7]
-	movs	r4, #0
+	b	.L1072
+.L1076:
+	str	r2, [sp, #32]
+	movs	r1, #1
+	ldr	r2, [r5, #3308]
+	add	r0, sp, #28
+	str	r3, [sp, #16]
+	str	r2, [sp, #36]
+	ldr	r2, [r5, #3328]
+	str	r2, [sp, #40]
+	mov	r2, r8
+	bl	FlashReadPages
+	ldrh	r2, [r5, #58]
+	ldr	r1, [r5, #3280]
+	ldr	r3, [sp, #16]
+	ldr	r0, [sp, #36]
+	lsls	r2, r2, #7
+	add	ip, r3, r1
+.L1077:
+	cmp	r8, r2
+	beq	.L1080
+	ldr	r1, [ip, #8]
+	ldr	r3, [r0, r8, lsl #2]
+	ldr	r1, [r1, r8, lsl #2]
+	cmp	r1, r3
+	beq	.L1078
+	ldr	r2, [sp, #32]
+	ldrh	r1, [r4]
+	ldr	r0, .L1093+8
+	bl	sftl_printk
+.L1073:
+	ldrh	r2, [r4]
+	movs	r1, #0
 	ldr	r3, [r5, #2324]
-	strh	r4, [r3, r2, lsl #1]	@ movhi
-	ldrh	r0, [r7]
-	bl	INSERT_FREE_LIST
-	strh	r8, [r7]	@ movhi
-	bl	FtlGcPageVarInit
-	b	.L997
-.L999:
-	ldr	r2, .L1009
+	strh	r1, [r3, r2, lsl #1]	@ movhi
+	b	.L1092
+.L1078:
+	add	r8, r8, #1
+	b	.L1077
+.L1083:
+	ldr	r2, .L1093
 	ldrh	r3, [r2, #4]
-	cmp	r3, r8
-	beq	.L1001
-	add	r3, r3, fp
+	cmp	r3, r9
+	beq	.L1085
+	ldr	r1, [sp, #4]
+	add	r3, r3, r1
 	strh	r3, [r2, #4]	@ movhi
 	ldrh	r3, [r5, #102]
-	cmp	r3, r4
-	bls	.L1001
-.L1002:
+	cmp	r3, r6
+	bls	.L1085
+.L1086:
 	mov	r0, #-1
-	add	sp, sp, #28
+	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1010:
+.L1094:
 	.align	2
-.L1009:
+.L1093:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
+	.word	.LC101
 	.fnend
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	1
-	.global	ftl_memcpy
+	.global	FtlReadRefresh
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	ftl_memcpy, %function
-ftl_memcpy:
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1108
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #88
+	sub	sp, sp, #88
+	mov	r4, r3
+	ldr	r0, [r3, #2716]
+	cmp	r0, #0
+	beq	.L1096
+	ldr	r1, [r3, #2720]
+	ldr	r2, [r3, #2504]
+	cmp	r1, r2
+	bcs	.L1097
+	mov	r5, #2048
+.L1102:
+	ldr	r0, [r4, #2720]
+	ldr	r3, [r4, #2504]
+	cmp	r0, r3
+	bcs	.L1099
+	movs	r2, #0
+	mov	r1, sp
+	bl	log2phys
+	ldr	r2, [sp]
+	ldr	r3, [r4, #2720]
+	adds	r1, r2, #1
+	add	r3, r3, #1
+	str	r3, [r4, #2720]
+	beq	.L1100
+	str	r3, [sp, #20]
+	add	r0, sp, #88
+	ldr	r3, [r4, #3316]
+	movs	r1, #1
+	str	r2, [sp, #8]
+	movs	r2, #0
+	str	r2, [r0, #-84]!
+	str	r3, [sp, #12]
+	add	r3, sp, #24
+	str	r3, [sp, #16]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	cmp	r3, #256
+	bne	.L1099
+	ldr	r0, [sp]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L1099:
+	mov	r0, #-1
+.L1095:
+	add	sp, sp, #88
+	@ sp needed
+	pop	{r4, r5, r6, pc}
+.L1100:
+	subs	r5, r5, #1
+	bne	.L1102
+	b	.L1099
+.L1097:
+	ldr	r2, [r3, #2508]
+	movs	r0, #0
+	str	r0, [r3, #2716]
+	str	r0, [r3, #2720]
+	str	r2, [r3, #2712]
+	b	.L1095
+.L1096:
+	ldr	r1, [r3, #2508]
+	ldr	r6, [r3, #2712]
+	add	r2, r1, #1048576
+	cmp	r6, r2
+	bhi	.L1105
+	ldr	r2, [r3, #2564]
+	lsrs	r5, r2, #10
+	mov	r2, #33554432
+	asrs	r2, r2, r5
+	add	r2, r2, r6
+	cmp	r1, r2
+	bhi	.L1105
+	ldrb	r3, [r3, #2296]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1095
+.L1105:
+	movs	r3, #1
+	movs	r0, #0
+	str	r3, [r4, #2716]
+	str	r0, [r4, #2720]
+	str	r1, [r4, #2712]
+	b	.L1095
+.L1109:
+	.align	2
+.L1108:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	1
+	.global	FtlMapBlkWriteDump_data
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlMapBlkWriteDump_data, %function
+FtlMapBlkWriteDump_data:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	memcpy
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldr	r3, [r0, #36]
+	cbz	r3, .L1110
+	ldrh	r5, [r0, #6]
+	movs	r3, #0
+	ldr	r4, .L1114
+	ldr	r2, [r0, #24]
+	str	r3, [r0, #36]
+	subs	r5, r5, #1
+	ldr	r0, [r4, #3296]
+	uxth	r5, r5
+	ldr	r1, [r4, #3324]
+	str	r0, [r4, #3452]
+	str	r1, [r4, #3456]
+	ldr	r2, [r2, r5, lsl #2]
+	str	r2, [r4, #3448]
+	cbz	r2, .L1112
+	movs	r2, #1
+	addw	r0, r4, #3444
+	mov	r1, r2
+	bl	FlashReadPages
+.L1113:
+	ldr	r2, [r4, #3452]
+	mov	r1, r5
+	mov	r0, r6
+	pop	{r4, r5, r6, lr}
+	b	FtlMapWritePage
+.L1112:
+	ldrh	r2, [r4, #110]
+	movs	r1, #255
+	bl	ftl_memset
+	b	.L1113
+.L1110:
+	pop	{r4, r5, r6, pc}
+.L1115:
+	.align	2
+.L1114:
+	.word	.LANCHOR0
 	.fnend
-	.size	ftl_memcpy, .-ftl_memcpy
+	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	.align	1
+	.global	FlashTestBlk
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r0, #11
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r4, r0
+	.pad #92
+	sub	sp, sp, #92
+	bls	.L1118
+	ldr	r3, .L1119
+	add	r0, sp, #24
+	movs	r2, #32
+	movs	r1, #165
+	lsls	r4, r4, #10
+	str	r0, [sp, #16]
+	ldr	r5, [r3, #3316]
+	str	r5, [sp, #12]
+	bl	memset
+	mov	r3, #1515870810
+	movs	r2, #1
+	str	r3, [r5]	@ unaligned
+	mov	r1, r2
+	str	r3, [r5, #4]	@ unaligned
+	add	r0, sp, #4
+	str	r4, [sp, #8]
+	bl	FlashEraseBlocks
+	movs	r3, #1
+	add	r0, sp, #4
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r4, [sp, #4]
+	movs	r2, #1
+	movs	r1, #0
+	add	r0, sp, #4
+	adds	r4, r4, #0
+	it	ne
+	movne	r4, #1
+	negs	r4, r4
+	bl	FlashEraseBlocks
+.L1116:
+	mov	r0, r4
+	add	sp, sp, #92
+	@ sp needed
+	pop	{r4, r5, pc}
+.L1118:
+	movs	r4, #0
+	b	.L1116
+.L1120:
+	.align	2
+.L1119:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashTestBlk, .-FlashTestBlk
 	.align	1
 	.global	FtlBbmTblFlush
 	.syntax unified
@@ -7078,34 +7829,33 @@ FtlBbmTblFlush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #12
+	push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #8
 	movs	r5, #0
-	ldr	r4, .L1021
+	ldr	r4, .L1130
 	movs	r1, #0
-	ldr	r0, [r4, #3280]
+	ldr	r0, [r4, #3292]
 	add	r6, r4, #176
-	ldr	r3, [r4, #3284]
+	ldr	r3, [r4, #3324]
 	ldrh	r2, [r4, #110]
-	str	r0, [r4, #3268]
-	str	r3, [r4, #3272]
+	str	r0, [r4, #3452]
+	str	r3, [r4, #3456]
 	bl	ftl_memset
-.L1013:
+.L1122:
 	ldrh	r3, [r4, #54]
 	cmp	r5, r3
-	blt	.L1014
-	ldr	r6, [r4, #3272]
+	blt	.L1123
+	ldr	r6, [r4, #3456]
 	movs	r2, #16
 	movs	r1, #255
-	ldr	r9, .L1021+12
-	ldr	r8, .L1021+4
+	ldr	r8, .L1130+12
+	ldr	r9, .L1130+16
 	movs	r5, #0
 	mov	r0, r6
-	ldr	r10, .L1021+16
+	mov	r7, r5
 	bl	memset
 	movw	r3, #61649
-	mov	r7, r5
 	strh	r3, [r6]	@ movhi
 	ldr	r3, [r4, #160]
 	str	r3, [r6, #4]
@@ -7117,37 +7867,32 @@ FtlBbmTblFlush:
 	strh	r3, [r6, #10]	@ movhi
 	ldr	r3, [r4, #28]
 	strh	r3, [r6, #12]	@ movhi
-.L1015:
-	ldr	r3, [r4, #3280]
-	mov	fp, #0
-	ldrh	r1, [r4, #152]
+.L1124:
+	ldr	r3, [r4, #3292]
+	mov	r10, #0
 	ldrh	r2, [r4, #154]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	str	fp, [r4, #3260]
-	str	r3, [r4, #3272]
+	ldrh	r1, [r4, #152]
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
+	str	r10, [r4, #3444]
+	str	r3, [r4, #3456]
 	orr	r3, r2, r1, lsl #10
 	ldrh	r0, [r6, #10]
-	str	r3, [r4, #3264]
+	str	r3, [r4, #3448]
 	ldrh	r3, [r4, #156]
 	str	r0, [sp]
-	mov	r0, r9
-	bl	printk
-	movs	r3, #1
-	ldr	r0, .L1021+4
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
+	mov	r0, r8
+	bl	sftl_printk
 	ldrh	r3, [r4, #104]
 	ldrh	r2, [r4, #154]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1016
+	blt	.L1125
 	ldr	r3, [r4, #160]
 	ldrh	r2, [r4, #152]
-	ldr	r0, [r4, #3800]
+	ldr	r0, [r4, #3260]
 	adds	r3, r3, #1
-	strh	fp, [r4, #154]	@ movhi
+	strh	r10, [r4, #154]	@ movhi
 	str	r3, [r4, #160]
 	str	r3, [r6, #4]
 	ldrh	r3, [r4, #156]
@@ -7157,62 +7902,62 @@ FtlBbmTblFlush:
 	strh	r3, [r4, #152]	@ movhi
 	mov	r1, r2
 	lsls	r3, r3, #10
-	str	r3, [r4, #3264]
+	str	r3, [r4, #3448]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
+.L1125:
 	movs	r3, #1
-	mov	r0, r8
+	mov	r0, r9
 	mov	r2, r3
 	mov	r1, r3
 	bl	FlashProgPages
-.L1016:
 	ldrh	r3, [r4, #154]
 	adds	r3, r3, #1
 	strh	r3, [r4, #154]	@ movhi
-	ldr	r3, [r4, #3260]
+	ldr	r3, [r4, #3444]
 	adds	r3, r3, #1
-	bne	.L1017
+	bne	.L1126
 	adds	r5, r5, #1
-	ldr	r1, [r4, #3264]
+	ldr	r1, [r4, #3448]
 	uxth	r5, r5
-	mov	r0, r10
-	bl	printk
+	ldr	r0, .L1130+4
+	bl	sftl_printk
 	cmp	r5, #3
-	bls	.L1015
+	bls	.L1124
 	mov	r2, r5
-	ldr	r1, [r4, #3264]
-	ldr	r0, .L1021+8
-	bl	printk
-.L1019:
-	b	.L1019
-.L1014:
-	ldrh	r2, [r4, #3900]
-	ldr	r3, [r4, #3268]
+	ldr	r1, [r4, #3448]
+	ldr	r0, .L1130+8
+	bl	sftl_printk
+.L1128:
+	b	.L1128
+.L1123:
+	ldrh	r2, [r4, #3380]
+	ldr	r3, [r4, #3452]
 	ldr	r1, [r6, #4]!
 	mul	r0, r2, r5
 	lsls	r2, r2, #2
 	adds	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L1013
-.L1020:
+	b	.L1122
+.L1129:
 	movs	r7, #1
-	b	.L1015
-.L1017:
+	b	.L1124
+.L1126:
 	cmp	r7, #0
-	beq	.L1020
+	beq	.L1129
 	movs	r0, #0
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1022:
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1131:
 	.align	2
-.L1021:
+.L1130:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.word	.LC96
-	.word	.LC94
-	.word	.LC95
+	.word	.LC103
+	.word	.LC104
+	.word	.LC102
+	.word	.LANCHOR0+3444
 	.fnend
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	1
@@ -7229,28 +7974,28 @@ allocate_data_superblock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
-	ldr	r4, .L1058
+	ldr	r4, .L1168
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r9, .L1058+20
-.L1024:
-	ldr	r3, .L1058
-	ldr	r2, .L1058
+	ldr	r9, .L1168+20
+.L1133:
+	ldr	r3, .L1168
+	ldr	r2, .L1168
 	ldrh	r3, [r3, #2344]
 	ldrh	r2, [r2, #2336]
 	add	r3, r3, r2
-	ldr	r2, .L1058
+	ldr	r2, .L1168
 	ldrh	r2, [r2, #40]
 	cmp	r3, r2
-	ble	.L1025
-	movw	r2, #2585
+	ble	.L1134
+	movw	r2, #2615
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1025:
-	ldr	r3, .L1058+8
+	ldr	r0, .L1168+4
+	bl	sftl_printk
+.L1134:
+	ldr	r3, .L1168+8
 	cmp	r5, r3
-	bne	.L1050
+	bne	.L1160
 	ldrh	r3, [r4, #2344]
 	ldr	r1, [r4, #3160]
 	mul	r2, r1, r3
@@ -7258,31 +8003,38 @@ allocate_data_superblock:
 	adds	r1, r1, #1
 	add	r1, r1, r2, lsr #2
 	uxth	r1, r1
-	cbz	r1, .L1026
+	cbz	r1, .L1135
 	subs	r1, r1, #1
 	uxth	r1, r1
-.L1026:
-	ldr	r0, .L1058+12
+.L1135:
+	ldr	r0, .L1168+12
 	bl	List_pop_index_node
 	ldrh	r3, [r4, #2344]
 	mov	r6, r0
 	uxth	r8, r0
-	cbnz	r3, .L1027
-	movw	r2, #2594
+	cbnz	r3, .L1136
+	mov	r2, #2624
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1027:
+	ldr	r0, .L1168+4
+	bl	sftl_printk
+.L1136:
 	ldrh	r3, [r4, #2344]
-	mov	r0, r5
 	subs	r3, r3, #1
 	strh	r3, [r4, #2344]	@ movhi
+	ldrh	r3, [r4, #40]
+	cmp	r3, r8
+	bls	.L1133
+	ldr	r3, [r4, #2324]
+	uxth	r6, r6
+	ldrh	r7, [r3, r6, lsl #1]
+	cmp	r7, #0
+	bne	.L1133
 	strh	r8, [r5]	@ movhi
+	mov	r0, r5
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L1028
+	cbnz	r3, .L1138
 	ldr	r3, [r4, #2324]
-	uxth	r6, r6
 	movw	r2, #65535
 	mov	r0, r8
 	strh	r2, [r3, r6, lsl #1]	@ movhi
@@ -7292,66 +8044,64 @@ allocate_data_superblock:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1024
-	movw	r2, #2605
+	ble	.L1133
+	movw	r2, #2638
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-	b	.L1024
-.L1050:
+	ldr	r0, .L1168+4
+	bl	sftl_printk
+	b	.L1133
+.L1160:
 	movs	r1, #0
-	b	.L1026
-.L1028:
+	b	.L1135
+.L1138:
 	ldrh	r2, [r4, #2336]
 	ldrh	r3, [r4, #2344]
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1030
-	mov	r2, #2608
+	ble	.L1140
+	movw	r2, #2641
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1030:
-	ldr	r1, [r4, #3800]
+	ldr	r0, .L1168+4
+	bl	sftl_printk
+.L1140:
+	ldr	r1, [r4, #3260]
 	mov	r10, #20
 	ldrh	r2, [r4, #32]
 	add	fp, r5, #16
-	movs	r7, #0
 	mov	r0, fp
+	mov	ip, #0
 	mov	r3, r1
-	mov	ip, r7
 	mla	r2, r10, r2, r1
 	str	r2, [sp, #4]
-.L1031:
+.L1141:
 	ldr	r2, [sp, #4]
 	cmp	r2, r3
-	bne	.L1033
-	cbnz	r7, .L1034
-	movw	r2, #2619
+	bne	.L1143
+	cbnz	r7, .L1144
+	movw	r2, #2652
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1034:
+	ldr	r0, .L1168+4
+	bl	sftl_printk
+.L1144:
 	ldrh	r3, [r4, #2588]
 	cmp	r3, r8
-	bne	.L1035
-	movw	r2, #2621
+	bne	.L1145
+	movw	r2, #2654
 	mov	r1, r9
-	ldr	r0, .L1058+4
-	bl	printk
-.L1035:
+	ldr	r0, .L1168+4
+	bl	sftl_printk
+.L1145:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	uxth	r6, r6
 	ldr	r2, [r4, #2328]
 	cmp	r3, #0
-	bne	.L1036
+	bne	.L1146
 	ldrh	r3, [r2, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1037
+	beq	.L1147
 	ldrh	r1, [r4, #92]
 	add	r3, r3, r1
-.L1057:
+.L1167:
 	strh	r3, [r2, r6, lsl #1]	@ movhi
 	movs	r1, #0
 	ldr	r3, [r4, #2548]
@@ -7359,7 +8109,7 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2548]
 	bl	ftl_set_blk_mode
-.L1039:
+.L1149:
 	ldr	r3, [r4, #2328]
 	ldr	r2, [r4, #2564]
 	ldrh	r0, [r4, #92]
@@ -7372,66 +8122,64 @@ allocate_data_superblock:
 	ldr	r3, [r4, #2552]
 	mla	r0, r2, r0, r3
 	bl	__aeabi_uidiv
-	ldr	r2, [r4, #3860]
-	ldr	r1, [r4, #3800]
+	ldr	r2, [r4, #3340]
+	ldr	r1, [r4, #3260]
 	str	r0, [r4, #2556]
 	ldr	r3, [r2, #16]
-	ldr	r0, .L1058+16
+	ldr	r0, .L1168+16
 	adds	r3, r3, #1
 	str	r3, [r2, #16]
 	movs	r2, #20
 	mla	r2, r2, r7, r1
 	adds	r3, r1, #4
 	adds	r2, r2, #24
-.L1041:
+.L1151:
 	adds	r3, r3, #20
 	cmp	r2, r3
-	bne	.L1042
+	bne	.L1152
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
 	mov	r2, r7
-	ldr	r0, [r4, #3800]
+	ldr	r0, [r4, #3260]
 	mov	r10, #0
 	bl	FlashEraseBlocks
 	mov	r3, r10
 	movs	r1, #20
-.L1043:
+.L1153:
 	uxth	r2, r10
 	cmp	r7, r2
-	bhi	.L1045
+	bhi	.L1155
 	cmp	r3, #0
-	ble	.L1046
+	ble	.L1156
 	mov	r0, r8
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1046:
+.L1156:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1047
+	bne	.L1157
 	ldr	r3, [r4, #2324]
 	movw	r2, #65535
-	mov	r0, r8
 	strh	r2, [r3, r6, lsl #1]	@ movhi
-	bl	INSERT_DATA_LIST
-	b	.L1024
-.L1033:
+	b	.L1133
+.L1143:
 	str	ip, [r3, #8]
 	movw	lr, #65535
 	str	ip, [r3, #12]
 	ldrh	r2, [r0], #2
 	cmp	r2, lr
-	beq	.L1032
+	beq	.L1142
 	mla	lr, r10, r7, r1
 	adds	r7, r7, #1
 	lsls	r2, r2, #10
 	uxth	r7, r7
 	str	r2, [lr, #4]
-.L1032:
+.L1142:
 	adds	r3, r3, #20
-	b	.L1031
-.L1037:
+	b	.L1141
+.L1147:
 	movs	r3, #2
-	b	.L1057
-.L1036:
+	b	.L1167
+.L1146:
 	ldrh	r3, [r2, r6, lsl #1]
 	mov	r0, r8
 	adds	r3, r3, #1
@@ -7440,19 +8188,19 @@ allocate_data_superblock:
 	adds	r3, r3, #1
 	str	r3, [r4, #2552]
 	bl	ftl_set_blk_mode.part.6
-	b	.L1039
-.L1042:
+	b	.L1149
+.L1152:
 	ldr	r1, [r3, #-20]
 	ands	r1, r1, r0
 	str	r1, [r3, #-20]
-	b	.L1041
-.L1045:
+	b	.L1151
+.L1155:
 	mul	r2, r1, r10
-	ldr	r0, [r4, #3800]
+	ldr	r0, [r4, #3260]
 	add	ip, r0, r2
 	ldr	r2, [r0, r2]
 	adds	r0, r2, #1
-	bne	.L1044
+	bne	.L1154
 	ldr	r0, [ip, #4]
 	adds	r3, r3, #1
 	str	r1, [sp, #12]
@@ -7467,11 +8215,11 @@ allocate_data_superblock:
 	ldrb	r2, [r5, #7]	@ zero_extendqisi2
 	subs	r2, r2, #1
 	strb	r2, [r5, #7]
-.L1044:
+.L1154:
 	add	r10, r10, #1
 	add	fp, fp, #2
-	b	.L1043
-.L1047:
+	b	.L1153
+.L1157:
 	ldrh	r3, [r4, #102]
 	strh	r8, [r5]	@ movhi
 	smulbb	r3, r3, r2
@@ -7488,28 +8236,28 @@ allocate_data_superblock:
 	ldrh	r1, [r5]
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldrh	r3, [r5, #4]
-	cbz	r3, .L1048
+	cbz	r3, .L1158
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L1049
-.L1048:
-	movw	r2, #2674
-	ldr	r1, .L1058+20
-	ldr	r0, .L1058+4
-	bl	printk
-.L1049:
+	cbnz	r3, .L1159
+.L1158:
+	movw	r2, #2707
+	ldr	r1, .L1168+20
+	ldr	r0, .L1168+4
+	bl	sftl_printk
+.L1159:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1059:
+.L1169:
 	.align	2
-.L1058:
+.L1168:
 	.word	.LANCHOR0
 	.word	.LC1
 	.word	.LANCHOR0+2444
 	.word	.LANCHOR0+2340
 	.word	-1024
-	.word	.LANCHOR1+360
+	.word	.LANCHOR1+403
 	.fnend
 	.size	allocate_data_superblock, .-allocate_data_superblock
 	.align	1
@@ -7526,67 +8274,67 @@ FtlGcFreeBadSuperBlk:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r4, .L1072
+	ldr	r4, .L1182
 	ldrh	r3, [r4, #3206]
-	cbz	r3, .L1061
+	cbz	r3, .L1171
 	movs	r7, #0
 	addw	r10, r4, #3208
-.L1062:
+.L1172:
 	ldrh	r2, [r4, #32]
 	uxth	r3, r7
 	cmp	r2, r3
-	bhi	.L1068
+	bhi	.L1178
 	bl	FtlGcReFreshBadBlk
-.L1061:
+.L1171:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1068:
+.L1178:
 	uxtah	r3, r4, r7
 	mov	r1, r8
 	mov	fp, #0
 	ldrb	r0, [r3, #60]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r9, r0
-.L1063:
+.L1173:
 	ldrh	r3, [r4, #3206]
 	uxth	r5, fp
 	cmp	r3, r5
-	bhi	.L1067
+	bhi	.L1177
 	adds	r7, r7, #1
-	b	.L1062
-.L1067:
+	b	.L1172
+.L1177:
 	uxth	r6, fp
 	add	r3, r4, r6, lsl #1
 	ldrh	r3, [r3, #3208]
 	cmp	r3, r9
-	bne	.L1064
+	bne	.L1174
 	mov	r1, r9
-	ldr	r0, .L1072+4
-	bl	printk
+	ldr	r0, .L1182+4
+	bl	sftl_printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	ldrh	r1, [r4, #3206]
 	add	r3, r10, r6, lsl #1
-.L1065:
+.L1175:
 	cmp	r5, r1
-	bcc	.L1066
+	bcc	.L1176
 	subs	r1, r1, #1
 	strh	r1, [r4, #3206]	@ movhi
-.L1064:
+.L1174:
 	add	fp, fp, #1
-	b	.L1063
-.L1066:
+	b	.L1173
+.L1176:
 	ldrh	r0, [r3, #2]!
 	adds	r5, r5, #1
 	uxth	r5, r5
 	strh	r0, [r3, #-2]	@ movhi
-	b	.L1065
-.L1073:
+	b	.L1175
+.L1183:
 	.align	2
-.L1072:
+.L1182:
 	.word	.LANCHOR0
-	.word	.LC97
+	.word	.LC105
 	.fnend
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	1
@@ -7600,7 +8348,7 @@ update_vpc_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L1084
+	ldr	r2, .L1194
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
@@ -7608,23 +8356,23 @@ update_vpc_list:
 	ldr	r3, [r2, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	bne	.L1075
+	bne	.L1185
 	ldrh	r1, [r2, #2588]
 	cmp	r1, r0
-	bne	.L1076
+	bne	.L1186
 	movw	r3, #65535
 	strh	r3, [r2, #2588]	@ movhi
-.L1077:
+.L1187:
 	mov	r1, r5
-	ldr	r0, .L1084+4
+	ldr	r0, .L1194+4
 	bl	List_remove_node
 	ldrh	r3, [r4, #2336]
-	cbnz	r3, .L1079
-	movw	r2, #2744
-	ldr	r1, .L1084+8
-	ldr	r0, .L1084+12
-	bl	printk
-.L1079:
+	cbnz	r3, .L1189
+	movw	r2, #2777
+	ldr	r1, .L1194+8
+	ldr	r0, .L1194+12
+	bl	sftl_printk
+.L1189:
 	ldrh	r3, [r4, #2336]
 	mov	r0, r5
 	subs	r3, r3, #1
@@ -7637,37 +8385,37 @@ update_vpc_list:
 	add	r3, r3, r2
 	ldrh	r2, [r4, #40]
 	cmp	r3, r2
-	ble	.L1083
-	movw	r2, #2747
-	ldr	r1, .L1084+8
-	ldr	r0, .L1084+12
-	bl	printk
-.L1083:
+	ble	.L1193
+	movw	r2, #2780
+	ldr	r1, .L1194+8
+	ldr	r0, .L1194+12
+	bl	sftl_printk
+.L1193:
 	movs	r3, #1
-	b	.L1074
-.L1076:
+	b	.L1184
+.L1186:
 	ldrh	r1, [r2, #2348]
 	cmp	r1, r0
-	beq	.L1074
+	beq	.L1184
 	ldrh	r1, [r2, #2396]
 	cmp	r1, r0
-	beq	.L1074
+	beq	.L1184
 	ldrh	r2, [r2, #2444]
 	cmp	r2, r0
-	bne	.L1077
-.L1074:
+	bne	.L1187
+.L1184:
 	mov	r0, r3
 	pop	{r3, r4, r5, pc}
-.L1075:
+.L1185:
 	bl	List_update_data_list
 	movs	r3, #0
-	b	.L1074
-.L1085:
+	b	.L1184
+.L1195:
 	.align	2
-.L1084:
+.L1194:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2320
-	.word	.LANCHOR1+385
+	.word	.LANCHOR1+428
 	.word	.LC1
 	.fnend
 	.size	update_vpc_list, .-update_vpc_list
@@ -7687,224 +8435,72 @@ decrement_vpc_count:
 	.save {r4, r5, r6, lr}
 	cmp	r0, r3
 	mov	r4, r0
-	ldr	r5, .L1095
-	beq	.L1087
+	ldr	r5, .L1205
+	beq	.L1197
 	ldr	r3, [r5, #2324]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1088
+	cbnz	r2, .L1198
 	mov	r1, r0
-	ldr	r0, .L1095+4
-	bl	printk
+	ldr	r0, .L1205+4
+	bl	sftl_printk
 	ldr	r3, [r5, #2324]
 	ldrh	r6, [r3, r4, lsl #1]
-	cbz	r6, .L1089
-.L1093:
+	cbz	r6, .L1199
+.L1203:
 	movs	r6, #0
-.L1086:
-	mov	r0, r6
-	pop	{r4, r5, r6, pc}
-.L1089:
-	movw	r2, #2762
-.L1094:
-	ldr	r1, .L1095+8
-	ldr	r0, .L1095+12
-	bl	printk
-	b	.L1086
-.L1088:
-	subs	r2, r2, #1
-	strh	r2, [r3, r0, lsl #1]	@ movhi
-.L1087:
-	ldrh	r0, [r5, #3992]
-	movw	r3, #65535
-	cmp	r0, r3
-	bne	.L1091
-	strh	r4, [r5, #3992]	@ movhi
-	b	.L1093
-.L1091:
-	cmp	r4, r0
-	beq	.L1093
-	bl	update_vpc_list
-	ldr	r2, [r5, #2316]
-	adds	r6, r0, #0
-	ldr	r3, [r5, #2320]
-	it	ne
-	movne	r6, #1
-	strh	r4, [r5, #3992]	@ movhi
-	subs	r3, r3, r2
-	asrs	r2, r3, #1
-	ldr	r3, .L1095+16
-	muls	r3, r2, r3
-	ldr	r2, [r5, #2324]
-	uxth	r1, r3
-	ldrh	r2, [r2, r1, lsl #1]
-	cmp	r2, #0
-	bne	.L1086
-	cmp	r4, r1
-	beq	.L1086
-	movw	r2, #2778
-	b	.L1094
-.L1096:
-	.align	2
-.L1095:
-	.word	.LANCHOR0
-	.word	.LC98
-	.word	.LANCHOR1+401
-	.word	.LC1
-	.word	-1431655765
-	.fnend
-	.size	decrement_vpc_count, .-decrement_vpc_count
-	.align	1
-	.global	FtlWriteDump_data
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlWriteDump_data, %function
-FtlWriteDump_data:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 24
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	.pad #24
-	sub	sp, sp, #24
-	ldr	r4, .L1115
-	ldrh	r2, [r4, #2352]
-	cmp	r2, #0
-	beq	.L1098
-	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1098
-	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
-	ldrh	r3, [r4, #102]
-	muls	r3, r1, r3
-	cmp	r2, r3
-	beq	.L1098
-	ldrb	r7, [r4, #2358]	@ zero_extendqisi2
-	cbnz	r7, .L1097
-	ldr	r6, [r4, #2504]
-	mov	r2, r7
-	mov	r1, sp
-	ldrh	r8, [r4, #32]
-	subs	r6, r6, #1
-	mov	r0, r6
-	bl	log2phys
-	ldr	r3, [sp]
-	ldr	r5, [r4, #3284]
-	ldr	r0, [r4, #3280]
-	str	r3, [sp, #8]
-	adds	r3, r3, #1
-	str	r6, [sp, #20]
-	str	r0, [sp, #12]
-	str	r5, [sp, #16]
-	str	r7, [r5, #4]
-	beq	.L1100
-	mov	r2, r7
-	movs	r1, #1
-	add	r0, sp, #4
-	bl	FlashReadPages
-.L1101:
-	ldr	r9, .L1115+4
-	movs	r7, #0
-	lsl	r8, r8, #2
-	mov	r10, r7
-	movw	r3, #61589
-	strh	r3, [r5]	@ movhi
-.L1102:
-	cmp	r8, r7
-	bne	.L1106
-.L1103:
-	movs	r3, #1
-.L1114:
-	strb	r3, [r4, #2358]
-.L1097:
-	add	sp, sp, #24
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1100:
-	ldrh	r2, [r4, #110]
-	movs	r1, #255
-	bl	ftl_memset
-	b	.L1101
-.L1106:
-	ldrh	r3, [r4, #2352]
-	cmp	r3, #0
-	beq	.L1103
-	ldr	r3, [sp, #8]
-	mov	r0, r9
-	str	r6, [r5, #8]
-	adds	r7, r7, #1
-	str	r3, [r5, #12]
-	ldrh	r3, [r4, #2348]
-	strh	r3, [r5, #2]	@ movhi
-	bl	get_new_active_ppa
-	ldr	r3, [r4, #2544]
-	movs	r1, #1
-	str	r0, [sp, #8]
-	add	r0, sp, #4
-	str	r3, [r5, #4]
-	adds	r3, r3, #1
-	adds	r2, r3, #1
-	it	eq
-	moveq	r3, r10
-	str	r3, [r4, #2544]
-	movs	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r4, #2348]
-	bl	decrement_vpc_count
-	b	.L1102
-.L1098:
-	movs	r3, #0
-	b	.L1114
-.L1116:
-	.align	2
-.L1115:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2348
-	.fnend
-	.size	FtlWriteDump_data, .-FtlWriteDump_data
-	.align	1
-	.global	l2p_flush
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	l2p_flush, %function
-l2p_flush:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movs	r4, #0
-	ldr	r5, .L1121
-	movs	r6, #12
-	bl	FtlWriteDump_data
-.L1118:
-	ldrh	r3, [r5, #138]
-	uxth	r0, r4
-	cmp	r3, r0
-	bhi	.L1120
-	movs	r0, #0
-	pop	{r4, r5, r6, pc}
-.L1120:
-	ldr	r2, [r5, #2492]
-	uxth	r3, r4
-	mla	r3, r6, r3, r2
-	ldr	r3, [r3, #4]
-	cmp	r3, #0
-	bge	.L1119
-	bl	flush_l2p_region
-.L1119:
-	adds	r4, r4, #1
-	b	.L1118
-.L1122:
+.L1196:
+	mov	r0, r6
+	pop	{r4, r5, r6, pc}
+.L1199:
+	movw	r2, #2795
+.L1204:
+	ldr	r1, .L1205+8
+	ldr	r0, .L1205+12
+	bl	sftl_printk
+	b	.L1196
+.L1198:
+	subs	r2, r2, #1
+	strh	r2, [r3, r0, lsl #1]	@ movhi
+.L1197:
+	ldrh	r0, [r5, #3430]
+	movw	r3, #65535
+	cmp	r0, r3
+	bne	.L1201
+	strh	r4, [r5, #3430]	@ movhi
+	b	.L1203
+.L1201:
+	cmp	r4, r0
+	beq	.L1203
+	bl	update_vpc_list
+	ldr	r2, [r5, #2316]
+	adds	r6, r0, #0
+	ldr	r3, [r5, #2320]
+	it	ne
+	movne	r6, #1
+	strh	r4, [r5, #3430]	@ movhi
+	subs	r3, r3, r2
+	asrs	r2, r3, #1
+	ldr	r3, .L1205+16
+	muls	r3, r2, r3
+	ldr	r2, [r5, #2324]
+	uxth	r1, r3
+	ldrh	r2, [r2, r1, lsl #1]
+	cmp	r2, #0
+	bne	.L1196
+	cmp	r4, r1
+	beq	.L1196
+	movw	r2, #2811
+	b	.L1204
+.L1206:
 	.align	2
-.L1121:
+.L1205:
 	.word	.LANCHOR0
+	.word	.LC106
+	.word	.LANCHOR1+444
+	.word	.LC1
+	.word	-1431655765
 	.fnend
-	.size	l2p_flush, .-l2p_flush
+	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	1
 	.global	FtlRecoverySuperblock
 	.syntax unified
@@ -7924,146 +8520,146 @@ FtlRecoverySuperblock:
 	sub	sp, sp, #52
 	mov	fp, r0
 	cmp	r3, r2
-	beq	.L1248
+	beq	.L1331
 	ldrh	r3, [r0, #2]
-	ldr	r4, .L1255
-	str	r3, [sp, #8]
+	ldr	r4, .L1338
+	str	r3, [sp, #4]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
-	ldr	r1, [sp, #8]
-	str	r3, [sp, #24]
+	ldr	r1, [sp, #4]
+	str	r3, [sp, #20]
 	ldrh	r3, [r4, #102]
 	cmp	r3, r1
 	mov	r3, #0
-	bne	.L1126
+	bne	.L1210
 	strh	r3, [r0, #4]	@ movhi
-.L1253:
+.L1336:
 	strb	r3, [fp, #6]
-.L1248:
+.L1331:
 	movs	r0, #0
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1126:
+.L1210:
 	ldrh	r0, [r0, #16]
-.L1127:
+.L1211:
 	cmp	r0, r2
-	uxth	r5, r3
+	uxth	r6, r3
 	add	r3, r3, #1
-	beq	.L1128
+	beq	.L1212
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
 	adds	r7, r0, #1
-	mov	r6, r0
-	beq	.L1129
+	mov	r5, r0
+	beq	.L1213
 	ldr	r3, [r4, #3172]
 	movs	r2, #0
 	ldrh	lr, [r4, #32]
 	movw	r9, #65535
-	ldr	r0, [r4, #3832]
+	ldr	r0, [r4, #3280]
 	mov	r10, #20
-	str	r3, [sp, #4]
+	str	r3, [sp]
 	ldrh	r3, [r4, #110]
 	ldr	r8, [r4, #3176]
 	ldrh	r7, [r4, #112]
 	mov	r4, r2
-	str	r3, [sp, #12]
+	str	r3, [sp, #8]
 	add	r3, fp, #16
 	mov	ip, r3
-	str	r3, [sp, #20]
-.L1130:
+	str	r3, [sp, #16]
+.L1214:
 	uxth	r3, r2
 	cmp	lr, r3
-	bhi	.L1136
-	ldr	r5, .L1255
+	bhi	.L1220
+	ldr	r6, .L1338
 	movs	r2, #0
 	mov	r1, r4
 	movw	r9, #65535
 	bl	FlashReadPages
-	ldr	r3, [r5, #2544]
-	uxth	r2, r6
-	ldr	r8, [r5, #3832]
-	str	r2, [sp, #12]
+	ldr	r3, [r6, #2544]
+	uxth	r2, r5
+	ldr	r8, [r6, #3280]
+	str	r2, [sp, #8]
 	subs	r3, r3, #1
-	str	r3, [sp, #4]
+	str	r3, [sp]
 	mov	r7, r8
 	movs	r3, #0
-.L1137:
+.L1221:
 	uxth	r2, r3
 	cmp	r4, r2
-	bhi	.L1142
-	bne	.L1140
-	adds	r3, r6, #1
+	bhi	.L1226
+	bne	.L1224
+	adds	r3, r5, #1
 	uxth	r3, r3
-	str	r3, [sp, #16]
-.L1249:
+	str	r3, [sp, #12]
+.L1332:
 	ldr	r0, [r8, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
-	ldrh	r3, [r5, #102]
-	ldr	r2, [sp, #16]
-	str	r0, [sp, #12]
+	ldrh	r3, [r6, #102]
+	ldr	r2, [sp, #12]
+	str	r0, [sp, #8]
 	cmp	r3, r2
-	bne	.L1144
-	ldrh	r3, [sp, #16]
+	bne	.L1228
+	ldrh	r3, [sp, #12]
 	strh	r3, [fp, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [fp, #6]
 	strh	r3, [fp, #4]	@ movhi
-.L1144:
-	ldr	r3, [sp, #16]
-	ldr	r2, [sp, #8]
-	cmp	r3, r2
-	bne	.L1145
+.L1228:
 	ldr	r3, [sp, #12]
-	ldr	r2, [sp, #24]
+	ldr	r2, [sp, #4]
 	cmp	r3, r2
-	bne	.L1145
-	ldr	r1, [sp, #16]
+	bne	.L1229
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #20]
+	cmp	r3, r2
+	bne	.L1229
+	ldr	r1, [sp, #12]
 	mov	r2, r3
-.L1254:
+.L1337:
 	mov	r0, fp
 	bl	ftl_sb_update_avl_pages
-	b	.L1248
-.L1128:
+	b	.L1331
+.L1212:
 	uxth	r1, r3
 	adds	r1, r1, #8
 	ldrh	r0, [fp, r1, lsl #1]
-	b	.L1127
-.L1129:
-	ldr	r3, [sp, #8]
-	cbz	r3, .L1131
-	movw	r2, #1755
-	ldr	r1, .L1255+4
-	ldr	r0, .L1255+8
-	bl	printk
-.L1131:
-	ldr	r3, [sp, #24]
-	cbz	r3, .L1132
-	cmp	r5, r3
-	beq	.L1132
-	movw	r2, #1756
-	ldr	r1, .L1255+4
-	ldr	r0, .L1255+8
-	bl	printk
-.L1132:
+	b	.L1211
+.L1213:
+	ldr	r3, [sp, #4]
+	cbz	r3, .L1215
+	movw	r2, #1766
+	ldr	r1, .L1338+4
+	ldr	r0, .L1338+8
+	bl	sftl_printk
+.L1215:
+	ldr	r3, [sp, #20]
+	cbz	r3, .L1216
+	cmp	r6, r3
+	beq	.L1216
+	movw	r2, #1767
+	ldr	r1, .L1338+4
+	ldr	r0, .L1338+8
+	bl	sftl_printk
+.L1216:
 	movs	r3, #0
 	strh	r3, [fp, #2]	@ movhi
-	b	.L1253
-.L1136:
+	b	.L1336
+.L1220:
 	ldrh	r3, [ip], #2
 	cmp	r3, r9
-	beq	.L1133
+	beq	.L1217
 	mla	r1, r10, r4, r0
-	orr	r3, r6, r3, lsl #10
+	orr	r3, r5, r3, lsl #10
 	str	r3, [r1, #4]
-	ldr	r3, [sp, #12]
+	ldr	r3, [sp, #8]
 	muls	r3, r4, r3
 	it	mi
 	addmi	r3, r3, #3
 	bic	r3, r3, #3
-	mov	r5, r3
-	ldr	r3, [sp, #4]
-	add	r5, r5, r3
+	mov	r6, r3
+	ldr	r3, [sp]
+	add	r6, r6, r3
 	mov	r3, r7
 	muls	r3, r4, r3
 	add	r4, r4, #1
@@ -8071,252 +8667,248 @@ FtlRecoverySuperblock:
 	addmi	r3, r3, #3
 	uxth	r4, r4
 	bic	r3, r3, #3
-	str	r5, [r1, #8]
+	str	r6, [r1, #8]
 	add	r3, r3, r8
 	str	r3, [r1, #12]
-.L1133:
+.L1217:
 	adds	r2, r2, #1
-	b	.L1130
-.L1142:
+	b	.L1214
+.L1226:
 	ldr	r2, [r7]
-	cbnz	r2, .L1138
+	cbnz	r2, .L1222
 	ldr	r10, [r7, #12]
 	ldr	r2, [r10, #4]
 	adds	r0, r2, #1
-	beq	.L1139
-	ldr	r1, [r5, #2544]
+	beq	.L1223
+	ldr	r1, [r6, #2544]
 	mov	r0, r2
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1139
+	cbz	r0, .L1223
 	adds	r2, r2, #1
-	str	r2, [r5, #2544]
-.L1139:
+	str	r2, [r6, #2544]
+.L1223:
 	ldr	r2, [r10]
 	adds	r2, r2, #1
-	bne	.L1141
-.L1140:
-	uxth	r2, r6
+	bne	.L1225
+.L1224:
+	uxth	r2, r5
 	uxth	r3, r3
-	str	r2, [sp, #16]
+	str	r2, [sp, #12]
 	movs	r2, #20
 	mla	r8, r2, r3, r8
-	b	.L1249
-.L1138:
-	ldr	r9, [sp, #12]
-.L1141:
+	b	.L1332
+.L1222:
+	ldr	r9, [sp, #8]
+.L1225:
 	adds	r3, r3, #1
 	adds	r7, r7, #20
-	b	.L1137
-.L1145:
+	b	.L1221
+.L1229:
 	movw	r3, #65535
 	cmp	r9, r3
-	bne	.L1146
+	bne	.L1230
 	ldrb	r3, [fp, #8]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1147
-.L1146:
-	ldr	r3, [r5, #4004]
-	uxth	r8, r6
-	uxth	r6, r6
-	ldr	r7, .L1255
-	movw	r9, #65535
+	bne	.L1231
+.L1230:
+	ldr	r3, [r6, #3440]
+	uxth	r7, r5
+	uxth	r5, r5
+	movw	r8, #65535
 	adds	r3, r3, #1
 	itt	eq
-	ldreq	r3, [sp, #4]
-	streq	r3, [r5, #4004]
-	ldr	r3, [sp, #8]
+	ldreq	r3, [sp]
+	streq	r3, [r6, #3440]
+	ldr	r3, [sp, #4]
+	ldr	r6, .L1338
 	adds	r3, r3, #7
-	cmp	r6, r3
+	cmp	r5, r3
 	itet	gt
-	subgt	r4, r8, #7
-	ldrle	r4, [sp, #8]
+	subgt	r4, r7, #7
+	ldrle	r4, [sp, #4]
 	uxthgt	r4, r4
-.L1150:
-	cmp	r4, r8
-	bhi	.L1157
+.L1234:
+	cmp	r4, r7
+	bhi	.L1241
 	movs	r3, #0
-	ldrh	lr, [r7, #32]
-	ldr	r0, [r7, #3832]
-	mov	r6, r3
-	ldr	r1, [sp, #20]
+	ldrh	lr, [r6, #32]
+	ldr	r0, [r6, #3280]
+	mov	r5, r3
+	ldr	r1, [sp, #16]
 	mov	ip, #20
-	b	.L1158
-.L1152:
+	b	.L1242
+.L1236:
 	ldrh	r2, [r1], #2
-	cmp	r2, r9
-	beq	.L1151
-	mla	r10, ip, r6, r0
-	adds	r6, r6, #1
+	cmp	r2, r8
+	beq	.L1235
+	mla	r9, ip, r5, r0
+	adds	r5, r5, #1
 	orr	r2, r4, r2, lsl #10
-	uxth	r6, r6
-	str	r2, [r10, #4]
-.L1151:
+	uxth	r5, r5
+	str	r2, [r9, #4]
+.L1235:
 	adds	r3, r3, #1
-.L1158:
+.L1242:
 	uxth	r2, r3
 	cmp	r2, lr
-	bcc	.L1152
+	bcc	.L1236
 	movs	r2, #0
-	mov	r1, r6
+	mov	r1, r5
 	bl	FlashReadPages
-	ldr	r3, [r7, #3832]
+	ldr	r3, [r6, #3280]
 	movs	r2, #20
-	mla	r6, r2, r6, r3
-.L1153:
-	cmp	r6, r3
-	bne	.L1156
+	mla	r5, r2, r5, r3
+.L1237:
+	cmp	r5, r3
+	bne	.L1240
 	adds	r4, r4, #1
 	uxth	r4, r4
-	b	.L1150
-.L1156:
+	b	.L1234
+.L1240:
 	ldr	r2, [r3]
-	cbnz	r2, .L1147
+	cbnz	r2, .L1231
 	ldr	r2, [r3, #12]
 	ldrh	r1, [r2]
-	cmp	r1, r9
-	beq	.L1155
+	cmp	r1, r8
+	beq	.L1239
 	ldr	r2, [r2, #4]
 	adds	r1, r2, #1
 	it	ne
-	strne	r2, [r7, #4004]
-.L1155:
+	strne	r2, [r6, #3440]
+.L1239:
 	adds	r3, r3, #20
-	b	.L1153
-.L1157:
+	b	.L1237
+.L1241:
 	mov	r3, #-1
-	str	r3, [r7, #4004]
-.L1147:
+	str	r3, [r6, #3440]
+.L1231:
+	ldr	r10, .L1338
 	movs	r3, #1
-	ldr	r0, .L1255+12
-	strh	r3, [r5, #4008]	@ movhi
-	ldr	r4, .L1255
-	bl	FtlMapBlkWriteDump_data
-	ldr	r5, [sp, #8]
-.L1159:
+	ldr	r5, [sp, #4]
+	mov	r4, r10
+	strh	r3, [r10, #3512]	@ movhi
+.L1243:
 	ldrh	r6, [r4, #32]
 	movs	r3, #0
-	ldr	r0, [r4, #3832]
-	mov	r10, r3
-	ldr	r1, [sp, #20]
+	ldr	r0, [r4, #3280]
+	mov	r9, r3
+	ldr	r1, [sp, #16]
 	movw	r7, #65535
 	mov	ip, #20
-.L1160:
+.L1244:
 	uxth	r2, r3
 	cmp	r6, r2
-	bhi	.L1162
+	bhi	.L1246
 	movs	r2, #0
-	mov	r1, r10
+	mov	r1, r9
 	bl	FlashReadPages
 	movs	r3, #0
-.L1252:
-	str	r3, [sp, #28]
-	ldrh	r3, [sp, #28]
-	cmp	r10, r3
-	bhi	.L1192
+.L1335:
+	str	r3, [sp, #24]
+	ldrh	r3, [sp, #24]
+	cmp	r9, r3
+	bhi	.L1275
 	adds	r5, r5, #1
 	ldrh	r3, [r4, #102]
 	uxth	r5, r5
 	cmp	r3, r5
-	bne	.L1159
+	bne	.L1243
 	ldrh	r2, [r4, #32]
 	movw	r0, #65535
 	movs	r3, #0
 	strh	r5, [fp, #2]	@ movhi
 	strh	r3, [fp, #4]	@ movhi
-.L1193:
+.L1276:
 	uxth	r1, r3
 	cmp	r1, r2
-	bcs	.L1248
-	ldr	r1, [sp, #20]
+	bcs	.L1331
+	ldr	r1, [sp, #16]
 	ldrh	r4, [r1], #2
 	cmp	r4, r0
-	str	r1, [sp, #20]
+	str	r1, [sp, #16]
 	add	r1, r3, #1
-	bne	.L1253
+	bne	.L1336
 	mov	r3, r1
-	b	.L1193
-.L1162:
+	b	.L1276
+.L1246:
 	ldrh	r2, [r1], #2
 	cmp	r2, r7
-	beq	.L1161
-	mla	lr, ip, r10, r0
-	add	r10, r10, #1
+	beq	.L1245
+	mla	lr, ip, r9, r0
 	orr	r2, r5, r2, lsl #10
-	uxth	r10, r10
 	str	r2, [lr, #4]
-.L1161:
+	add	r2, r9, #1
+	uxth	r9, r2
+.L1245:
 	adds	r3, r3, #1
-	b	.L1160
-.L1256:
+	b	.L1244
+.L1339:
 	.align	2
-.L1255:
+.L1338:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+421
+	.word	.LANCHOR1+464
 	.word	.LC1
-	.word	.LANCHOR0+3904
-.L1192:
-	ldr	r3, [sp, #28]
+.L1275:
+	ldr	r3, [sp, #24]
 	movs	r7, #20
-	ldr	r9, [r4, #3832]
 	muls	r7, r3, r7
-	add	r8, r9, r7
+	ldr	r3, [r4, #3280]
+	str	r3, [sp, #28]
+	add	r8, r3, r7
 	ldr	r6, [r8, #4]
 	ubfx	r0, r6, #10, #16
 	str	r6, [sp, #44]
 	bl	P2V_plane
-	ldr	r3, [sp, #8]
-	cmp	r5, r3
-	bcc	.L1164
-	bne	.L1165
-	ldr	r3, [sp, #24]
-	cmp	r3, r0
-	bhi	.L1164
-.L1165:
-	ldr	r3, [sp, #16]
+	ldr	r3, [sp, #4]
 	cmp	r5, r3
-	bne	.L1166
-	ldr	r3, [sp, #12]
-	cmp	r3, r0
-	beq	.L1167
-.L1166:
-	ldr	r3, [r9, r7]
+	bcc	.L1248
+	ldr	r3, [sp, #28]
+	bne	.L1249
+	ldr	r2, [sp, #20]
+	cmp	r2, r0
+	bhi	.L1248
+.L1249:
+	ldr	r2, [sp, #12]
+	cmp	r5, r2
+	bne	.L1250
+	ldr	r2, [sp, #8]
+	cmp	r2, r0
+	beq	.L1251
+.L1250:
+	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1168
+	beq	.L1252
 	ldr	r8, [r8, #12]
 	movw	r3, #61589
 	ldrh	r2, [r8]
 	cmp	r2, r3
-	beq	.L1169
-.L1176:
+	beq	.L1253
 	ldrh	r0, [fp]
-.L1251:
+.L1333:
 	bl	decrement_vpc_count
-.L1164:
-	ldr	r3, [sp, #28]
-	adds	r3, r3, #1
-	b	.L1252
-.L1169:
+	b	.L1248
+.L1253:
 	ldr	r3, [r8, #4]
 	adds	r6, r3, #1
-	str	r3, [sp, #4]
-	beq	.L1170
+	str	r3, [sp]
+	beq	.L1254
 	ldr	r1, [r4, #2544]
 	mov	r0, r3
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L1170
-	ldr	r3, [sp, #4]
+	cbz	r0, .L1254
+	ldr	r3, [sp]
 	adds	r3, r3, #1
 	str	r3, [r4, #2544]
-.L1170:
+.L1254:
 	ldrh	r2, [r8]
 	movw	r3, #61589
 	cmp	r2, r3
-	beq	.L1171
-	movw	r2, #1905
-	ldr	r1, .L1257
-	ldr	r0, .L1257+4
-	bl	printk
-.L1171:
+	beq	.L1255
+	movw	r2, #1918
+	ldr	r1, .L1340
+	ldr	r0, .L1340+4
+	bl	sftl_printk
+.L1255:
 	ldr	r6, [r8, #8]
 	add	r1, sp, #40
 	ldr	r3, [r8, #12]
@@ -8324,657 +8916,453 @@ FtlRecoverySuperblock:
 	mov	r0, r6
 	str	r3, [sp, #36]
 	bl	log2phys
-	ldr	r1, [r4, #4004]
+	ldr	r1, [r4, #3440]
 	adds	r0, r1, #1
-	beq	.L1172
-	ldr	r0, [sp, #4]
+	beq	.L1256
+	ldr	r0, [sp]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1172
+	beq	.L1256
 	ldr	r3, [sp, #36]
 	adds	r2, r3, #1
-	beq	.L1173
-	ldr	r0, [r4, #3832]
+	beq	.L1257
+	ldr	r0, [r4, #3280]
 	movs	r2, #0
 	movs	r1, #1
 	add	r0, r0, r7
 	str	r3, [r0, #4]
 	ldr	r8, [r0, #12]
 	bl	FlashReadPages
-	ldr	r2, [r4, #3832]
+	ldr	r2, [r4, #3280]
 	ldr	r1, [r2, r7]
 	adds	r3, r2, r7
 	adds	r1, r1, #1
-	bne	.L1174
-.L1175:
+	bne	.L1258
+.L1259:
 	mov	r3, #-1
-	ldrh	r0, [fp]
 	str	r3, [sp, #36]
-	bl	decrement_vpc_count
-.L1183:
+.L1266:
 	ldr	r0, [sp, #36]
 	adds	r1, r0, #1
-	beq	.L1164
-.L1196:
+	beq	.L1248
+.L1279:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #40]
 	mov	r6, r0
 	cmp	r3, r0
-	bhi	.L1188
-	movw	r2, #2006
-	ldr	r1, .L1257
-	ldr	r0, .L1257+4
-	bl	printk
-.L1188:
-	ldr	r3, [r4, #2324]
+	bhi	.L1271
+	movw	r2, #2019
+	ldr	r1, .L1340
+	ldr	r0, .L1340+4
+	bl	sftl_printk
+.L1271:
+	ldr	r3, [r10, #2324]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, #0
-	beq	.L1189
+	beq	.L1272
 	mov	r0, r6
-	b	.L1251
-.L1173:
+	b	.L1333
+.L1257:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	bne	.L1176
+	bne	.L1248
 	movs	r2, #1
 	add	r1, sp, #36
 	mov	r0, r6
 	bl	log2phys
-	b	.L1176
-.L1174:
+.L1248:
+	ldr	r3, [sp, #24]
+	adds	r3, r3, #1
+	b	.L1335
+.L1258:
 	ldr	r1, [r8, #8]
 	cmp	r6, r1
-	bne	.L1175
-	ldr	r9, [r8, #4]
-	ldr	r0, [r4, #4004]
-	mov	r1, r9
+	bne	.L1259
+	ldr	r1, [r8, #4]
+	ldr	r0, [r4, #3440]
+	str	r1, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1175
+	beq	.L1259
 	ldr	r1, [sp, #40]
 	ldr	r0, [sp, #44]
 	cmp	r1, r0
-	bne	.L1178
-.L1181:
+	bne	.L1261
+.L1264:
 	ldr	r1, [sp, #36]
 	mov	r0, r6
 	bl	FtlReUsePrevPpa
-	b	.L1175
-.L1178:
+	b	.L1259
+.L1261:
 	ldr	r0, [sp, #36]
 	cmp	r1, r0
-	beq	.L1175
+	beq	.L1259
 	adds	r0, r1, #1
-	beq	.L1179
+	beq	.L1262
 	str	r1, [r3, #4]
 	movs	r2, #0
 	movs	r1, #1
 	mov	r0, r3
 	ldr	r8, [r3, #12]
 	bl	FlashReadPages
-.L1180:
-	ldr	r3, [r4, #3832]
+.L1263:
+	ldr	r3, [r4, #3280]
 	ldr	r3, [r3, r7]
 	adds	r3, r3, #1
-	beq	.L1181
+	beq	.L1264
 	ldr	r3, [r8, #4]
-	ldr	r0, [r4, #4004]
+	ldr	r0, [r4, #3440]
 	mov	r1, r3
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1181
+	beq	.L1264
 	mov	r1, r3
-	mov	r0, r9
+	ldr	r0, [sp, #28]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L1175
-	b	.L1181
-.L1179:
+	beq	.L1259
+	b	.L1264
+.L1262:
 	str	r1, [r2, r7]
-	b	.L1180
-.L1172:
+	b	.L1263
+.L1256:
 	ldr	r3, [sp, #44]
 	ldr	r2, [sp, #40]
 	cmp	r2, r3
-	beq	.L1183
+	beq	.L1266
 	movs	r2, #1
 	add	r1, sp, #44
 	mov	r0, r6
 	bl	log2phys
 	ldr	r8, [sp, #40]
 	cmp	r8, #-1
-	beq	.L1183
+	beq	.L1266
 	ldr	r3, [sp, #36]
 	cmp	r8, r3
-	beq	.L1186
+	beq	.L1269
 	ubfx	r0, r8, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4, #2348]
 	cmp	r3, r0
-	beq	.L1187
+	beq	.L1270
 	ldrh	r3, [r4, #2396]
 	cmp	r3, r0
-	beq	.L1187
+	beq	.L1270
 	ldrh	r3, [r4, #2444]
 	cmp	r3, r0
-	bne	.L1183
-.L1187:
-	ldr	r0, [r4, #3832]
+	bne	.L1266
+.L1270:
+	ldr	r0, [r10, #3280]
 	movs	r2, #0
 	movs	r1, #1
 	str	r8, [r0, #4]
 	ldr	r7, [r0, #12]
 	bl	FlashReadPages
-	ldr	r3, [r4, #3832]
+	ldr	r3, [r10, #3280]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L1183
+	beq	.L1266
 	ldr	r1, [r7, #4]
-	ldr	r0, [sp, #4]
+	ldr	r0, [sp]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	bne	.L1183
+	bne	.L1266
 	movs	r2, #1
 	add	r1, sp, #40
 	mov	r0, r6
 	bl	log2phys
-	b	.L1183
-.L1189:
+	b	.L1266
+.L1272:
 	mov	r1, r6
-	ldr	r0, .L1257+8
-	bl	printk
-	b	.L1164
-.L1168:
-	ldr	r3, [r4, #4012]
+	ldr	r0, .L1340+8
+	bl	sftl_printk
+	b	.L1248
+.L1252:
+	ldr	r3, [r4, #3516]
 	cmp	r3, #31
 	itttt	ls
 	addls	r2, r4, r3, lsl #2
 	addls	r3, r3, #1
-	strls	r3, [r4, #4012]
-	strls	r6, [r2, #4016]
+	strls	r3, [r4, #3516]
+	strls	r6, [r2, #3520]
 	ldrh	r0, [fp]
 	bl	decrement_vpc_count
-	ldr	r3, [r4, #4004]
+	ldr	r3, [r4, #3440]
 	adds	r2, r3, #1
-	bne	.L1191
-	ldr	r3, [sp, #4]
-.L1250:
-	str	r3, [r4, #4004]
-	b	.L1164
-.L1191:
-	ldr	r2, [sp, #4]
+	bne	.L1274
+	ldr	r3, [sp]
+.L1334:
+	str	r3, [r4, #3440]
+	b	.L1248
+.L1274:
+	ldr	r2, [sp]
 	cmp	r2, r3
-	bcs	.L1164
+	bcs	.L1248
 	mov	r3, r2
-	b	.L1250
-.L1167:
-	ldrb	r3, [sp, #12]	@ zero_extendqisi2
+	b	.L1334
+.L1251:
+	ldrb	r3, [sp, #8]	@ zero_extendqisi2
 	mov	r1, r5
 	strh	r5, [fp, #2]	@ movhi
-	ldr	r2, [sp, #12]
+	ldr	r2, [sp, #8]
 	strb	r3, [fp, #6]
-	b	.L1254
-.L1186:
+	b	.L1337
+.L1269:
 	mov	r0, r8
-	b	.L1196
-.L1258:
+	b	.L1279
+.L1341:
 	.align	2
-.L1257:
-	.word	.LANCHOR1+421
+.L1340:
+	.word	.LANCHOR1+464
 	.word	.LC1
-	.word	.LC99
+	.word	.LC107
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	1
-	.global	FtlSuperblockPowerLostFix
+	.global	FtlWriteDump_data
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
+	.type	FtlWriteDump_data, %function
+FtlWriteDump_data:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #24
 	sub	sp, sp, #24
-	ldr	r4, .L1270
-	mov	r3, #-1
-	mov	r8, #0
-	movw	r1, #61589
-	str	r3, [sp, #20]
-	mov	r5, r0
-	ldr	r2, [r4, #3280]
-	movs	r7, #7
-	ldr	r6, [r4, #3284]
-	str	r2, [sp, #12]
-	mvn	r2, #2
-	str	r6, [sp, #16]
-	str	r2, [r6, #8]
-	mvn	r2, #1
-	str	r2, [r6, #12]
-	ldrh	r2, [r0]
-	strh	r8, [r6]	@ movhi
-	strh	r2, [r6, #2]	@ movhi
-	ldr	r2, [r4, #3280]
-	str	r1, [r2]
-	add	r1, r1, #304087040
-	ldr	r2, [r4, #3280]
-	add	r1, r1, #1269760
-	addw	r1, r1, #1507
-	str	r1, [r2, #4]
-.L1260:
-	subs	r7, r7, #1
-	beq	.L1262
-	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1261
-.L1262:
-	ldr	r2, [r4, #2324]
-	ldrh	r1, [r5]
-	ldrh	r0, [r5, #4]
-	ldrh	r3, [r2, r1, lsl #1]
-	subs	r3, r3, r0
-	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldr	r4, .L1360
+	ldrh	r2, [r4, #2352]
+	cmp	r2, #0
+	beq	.L1343
+	ldrb	r3, [r4, #2356]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1343
+	ldrb	r1, [r4, #2355]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
-	strh	r3, [r5, #2]	@ movhi
-	movs	r3, #0
-	strb	r3, [r5, #6]
-	strh	r3, [r5, #4]	@ movhi
+	muls	r3, r1, r3
+	cmp	r2, r3
+	beq	.L1343
+	ldrb	r7, [r4, #2358]	@ zero_extendqisi2
+	cbnz	r7, .L1342
+	ldr	r6, [r4, #2504]
+	mov	r2, r7
+	mov	r1, sp
+	ldrh	r8, [r4, #32]
+	subs	r6, r6, #1
+	mov	r0, r6
+	bl	log2phys
+	ldr	r3, [sp]
+	ldr	r5, [r4, #3324]
+	ldr	r0, [r4, #3292]
+	str	r3, [sp, #8]
+	adds	r3, r3, #1
+	str	r6, [sp, #20]
+	str	r0, [sp, #12]
+	str	r5, [sp, #16]
+	str	r7, [r5, #4]
+	beq	.L1345
+	mov	r2, r7
+	movs	r1, #1
+	add	r0, sp, #4
+	bl	FlashReadPages
+.L1346:
+	ldr	r9, .L1360+4
+	movs	r7, #0
+	lsl	r8, r8, #2
+	mov	r10, r7
+	movw	r3, #61589
+	strh	r3, [r5]	@ movhi
+.L1347:
+	cmp	r8, r7
+	bne	.L1351
+.L1348:
+	movs	r3, #1
+.L1359:
+	strb	r3, [r4, #2358]
+.L1342:
 	add	sp, sp, #24
 	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1261:
-	mov	r0, r5
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1345:
+	ldrh	r2, [r4, #110]
+	movs	r1, #255
+	bl	ftl_memset
+	b	.L1346
+.L1351:
+	ldrh	r3, [r4, #2352]
+	cmp	r3, #0
+	beq	.L1348
+	ldr	r3, [sp, #8]
+	mov	r0, r9
+	str	r6, [r5, #8]
+	adds	r7, r7, #1
+	str	r3, [r5, #12]
+	ldrh	r3, [r4, #2348]
+	strh	r3, [r5, #2]	@ movhi
 	bl	get_new_active_ppa
-	str	r0, [sp, #8]
-	adds	r0, r0, #1
-	beq	.L1262
 	ldr	r3, [r4, #2544]
 	movs	r1, #1
+	str	r0, [sp, #8]
 	add	r0, sp, #4
-	str	r3, [r6, #4]
+	str	r3, [r5, #4]
 	adds	r3, r3, #1
 	adds	r2, r3, #1
 	it	eq
-	moveq	r3, r8
+	moveq	r3, r10
 	str	r3, [r4, #2544]
 	movs	r3, #0
-	mov	r2, r3
-	bl	FlashProgPages
-	ldrh	r0, [r5]
-	bl	decrement_vpc_count
-	b	.L1260
-.L1271:
-	.align	2
-.L1270:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
-	.align	1
-	.global	FtlLoadBbt
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlLoadBbt, %function
-FtlLoadBbt:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movw	r8, #61649
-	ldr	r4, .L1301
-	ldr	r3, [r4, #3280]
-	addw	r7, r4, #3260
-	ldr	r6, [r4, #3284]
-	str	r3, [r4, #3268]
-	str	r6, [r4, #3272]
-	bl	FtlBbtMemInit
-	ldrh	r5, [r4, #98]
-	subs	r5, r5, #1
-	uxth	r5, r5
-.L1273:
-	ldrh	r3, [r4, #98]
-	subs	r3, r3, #16
-	cmp	r5, r3
-	ble	.L1276
-	lsls	r3, r5, #10
-	movs	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	adds	r3, r3, #1
-	bne	.L1274
-	ldr	r3, [r4, #3264]
-	movs	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	adds	r3, r3, #1
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-.L1274:
-	ldr	r3, [r4, #3260]
-	adds	r3, r3, #1
-	beq	.L1275
-	ldrh	r3, [r6]
-	cmp	r3, r8
-	bne	.L1275
-	ldr	r3, [r6, #4]
-	strh	r5, [r4, #152]	@ movhi
-	str	r3, [r4, #160]
-	ldrh	r3, [r6, #8]
-	strh	r3, [r4, #156]	@ movhi
-.L1276:
-	ldrh	r3, [r4, #152]
-	movw	r2, #65535
-	cmp	r3, r2
-	beq	.L1290
-	ldrh	r3, [r4, #156]
-	cmp	r3, r2
-	beq	.L1280
-	lsls	r3, r3, #10
-	movs	r2, #1
-	mov	r1, r2
-	ldr	r0, .L1301+4
-	str	r3, [r4, #3264]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	adds	r3, r3, #1
-	beq	.L1280
-	ldrh	r2, [r6]
-	movw	r3, #61649
-	cmp	r2, r3
-	bne	.L1280
-	ldr	r3, [r6, #4]
-	ldr	r2, [r4, #160]
-	cmp	r3, r2
-	bls	.L1280
-	ldrh	r2, [r4, #156]
-	str	r3, [r4, #160]
-	ldrh	r3, [r6, #8]
-	strh	r2, [r4, #152]	@ movhi
-	strh	r3, [r4, #156]	@ movhi
-.L1280:
-	ldr	r7, .L1301+4
-	movs	r1, #1
-	ldrh	r0, [r4, #152]
-	movw	r8, #61649
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
-	adds	r0, r0, #1
-	strh	r0, [r4, #154]	@ movhi
-.L1282:
-	cmp	r5, #0
-	bge	.L1285
-	movs	r2, #254
-	ldr	r1, .L1301+8
-	ldr	r0, .L1301+12
-	bl	printk
-.L1284:
-	ldrh	r3, [r6, #10]
-	ldrh	r0, [r6, #12]
-	strh	r3, [r4, #158]	@ movhi
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1287
-	ldr	r2, [r4, #28]
-	cmp	r0, r2
-	beq	.L1287
-	ldrh	r3, [r4, #42]
-	lsrs	r3, r3, #2
-	cmp	r2, r3
-	bcs	.L1287
-	cmp	r0, r3
-	bcs	.L1287
-	bl	FtlSysBlkNumInit
-.L1287:
-	ldr	r6, .L1301+16
-	movs	r5, #0
-.L1288:
-	ldrh	r3, [r4, #54]
-	cmp	r5, r3
-	bcc	.L1289
-	movs	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1275:
-	subs	r5, r5, #1
-	uxth	r5, r5
-	b	.L1273
-.L1285:
-	ldrh	r3, [r4, #152]
-	movs	r2, #1
-	mov	r1, r2
-	mov	r0, r7
-	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3264]
-	ldr	r3, [r4, #3280]
-	str	r3, [r4, #3268]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
-	adds	r3, r3, #1
-	beq	.L1283
-	ldrh	r3, [r6]
-	cmp	r3, r8
-	beq	.L1284
-.L1283:
-	subs	r5, r5, #1
-	sxth	r5, r5
-	b	.L1282
-.L1289:
-	ldrh	r2, [r4, #3900]
-	ldr	r1, [r4, #3268]
-	ldr	r0, [r6, #4]!
-	lsls	r2, r2, #2
-	mla	r1, r5, r2, r1
-	adds	r5, r5, #1
-	bl	ftl_memcpy
-	b	.L1288
-.L1290:
-	mov	r0, #-1
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1302:
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4, #2348]
+	bl	decrement_vpc_count
+	b	.L1347
+.L1343:
+	movs	r3, #0
+	b	.L1359
+.L1361:
 	.align	2
-.L1301:
+.L1360:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3260
-	.word	.LANCHOR1+443
-	.word	.LC1
-	.word	.LANCHOR0+176
+	.word	.LANCHOR0+2348
 	.fnend
-	.size	FtlLoadBbt, .-FtlLoadBbt
+	.size	FtlWriteDump_data, .-FtlWriteDump_data
 	.align	1
-	.global	FtlMakeBbt
+	.global	l2p_flush
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
+	.type	l2p_flush, %function
+l2p_flush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r8, #0
-	ldr	r9, .L1322+4
-	bl	FtlBbtMemInit
-	sub	r5, r9, #180
-	sub	r10, r9, #18
-	mov	r4, r5
-	bl	FtlLoadFactoryBbt
-.L1304:
-	ldrh	r3, [r5, #54]
-	cmp	r8, r3
-	bcc	.L1310
-	movs	r5, #0
-.L1311:
-	ldrh	r3, [r4, #114]
-	uxth	r0, r5
-	adds	r5, r5, #1
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r4, #0
+	ldr	r5, .L1366
+	movs	r6, #12
+	bl	FtlWriteDump_data
+.L1363:
+	ldrh	r3, [r5, #138]
+	uxth	r0, r4
 	cmp	r3, r0
-	bhi	.L1312
-	ldrh	r5, [r4, #164]
-	movw	r6, #65535
-	subs	r5, r5, #1
-	uxth	r5, r5
-.L1313:
-	ldrh	r3, [r4, #164]
-	subs	r3, r3, #48
-	cmp	r5, r3
-	ble	.L1317
-	mov	r0, r5
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1314
-	mov	r0, r5
-	bl	FlashTestBlk
-	cmp	r0, #0
-	beq	.L1315
-	mov	r0, r5
-	bl	FtlBbmMapBadBlock
-.L1314:
-	subs	r5, r5, #1
-	uxth	r5, r5
-	b	.L1313
-.L1310:
-	ldrh	r3, [r10, #2]!
-	movw	r2, #65535
-	ldr	r0, [r5, #3280]
-	ldr	fp, [r5, #3284]
-	cmp	r3, r2
-	str	r0, [r5, #3268]
-	str	fp, [r5, #3272]
-	beq	.L1305
-	ldrh	r7, [r5, #98]
-	movs	r2, #1
-	mov	r1, r2
-	ldr	r0, .L1322
-	mla	r7, r8, r7, r3
-	lsls	r3, r7, #10
-	str	r3, [r5, #3264]
-	bl	FlashReadPages
-	ldrh	r2, [r5, #98]
-	ldr	r1, [r5, #3268]
-	ldr	r0, [r9]
-	adds	r2, r2, #7
-	asrs	r2, r2, #3
-	bl	ftl_memcpy
-.L1306:
-	uxth	r0, r7
-	add	r8, r8, #1
-	add	r9, r9, #4
-	bl	FtlBbmMapBadBlock
-	b	.L1304
-.L1305:
-	mov	r1, r8
-	bl	FlashGetBadBlockList
-	ldr	r1, [r9]
-	ldr	r0, [r5, #3268]
-	bl	FtlBbt2Bitmap
-	ldrh	r6, [r5, #98]
-.L1308:
-	subs	r6, r6, #1
-	uxth	r6, r6
-.L1307:
-	ldrh	r0, [r4, #98]
-	smlabb	r0, r0, r8, r6
-	uxth	r0, r0
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L1308
-	movs	r1, #16
-	ldr	r0, [r4, #3284]
-	strh	r6, [r10]	@ movhi
-	bl	__memzero
-	mov	r1, #4096
-	ldr	r0, [r4, #3280]
-	bl	__memzero
-	movw	r3, #61664
-	strh	r3, [fp]	@ movhi
+	bhi	.L1365
+	movs	r0, #0
+	pop	{r4, r5, r6, pc}
+.L1365:
+	ldr	r2, [r5, #2492]
+	uxth	r3, r4
+	mla	r3, r6, r3, r2
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L1364
+	bl	flush_l2p_region
+.L1364:
+	adds	r4, r4, #1
+	b	.L1363
+.L1367:
+	.align	2
+.L1366:
+	.word	.LANCHOR0
+	.fnend
+	.size	l2p_flush, .-l2p_flush
+	.align	1
+	.global	FtlSuperblockPowerLostFix
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #24
+	sub	sp, sp, #24
+	ldr	r5, .L1381
+	mov	r3, #-1
+	movs	r7, #0
+	movw	r1, #61589
+	str	r3, [sp, #20]
+	mov	r4, r0
+	ldr	r2, [r5, #3292]
+	ldr	r6, [r5, #3324]
+	str	r2, [sp, #12]
+	mvn	r2, #2
+	str	r6, [sp, #16]
+	str	r2, [r6, #8]
+	mvn	r2, #1
+	str	r2, [r6, #12]
+	ldrh	r2, [r0]
+	strh	r7, [r6]	@ movhi
+	strh	r2, [r6, #2]	@ movhi
+	ldr	r2, [r5, #3292]
+	str	r1, [r2]
+	add	r1, r1, #304087040
+	ldr	r2, [r5, #3292]
+	add	r1, r1, #1269760
+	addw	r1, r1, #1507
+	str	r1, [r2, #4]
+	ldrh	r2, [r0, #4]
+	tst	r2, #1
+	ite	eq
+	moveq	r8, #6
+	movne	r8, #7
+.L1374:
+	ldrh	r3, [r4, #4]
+	cbnz	r3, .L1370
+.L1371:
+	ldr	r2, [r5, #2324]
+	ldrh	r1, [r4]
+	ldrh	r0, [r4, #4]
+	ldrh	r3, [r2, r1, lsl #1]
+	subs	r3, r3, r0
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldrh	r3, [r5, #102]
+	strh	r3, [r4, #2]	@ movhi
 	movs	r3, #0
-	str	r3, [fp, #4]
-	ldrh	r3, [r10]
-	ldrh	r7, [r4, #98]
-	ldrh	r2, [r4, #3900]
-	strh	r3, [fp, #2]	@ movhi
-	ldrh	r3, [r10]
-	ldr	r1, [r9]
-	lsls	r2, r2, #2
-	ldr	r0, [r4, #3268]
-	mla	r7, r8, r7, r3
-	lsls	r3, r7, #10
-	str	r3, [r4, #3264]
-	bl	ftl_memcpy
-	movs	r2, #1
-	ldr	r0, .L1322
-	mov	r1, r2
-	bl	FlashEraseBlocks
-	movs	r3, #1
-	ldr	r0, .L1322
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
-	ldr	r3, [r4, #3260]
-	adds	r3, r3, #1
-	bne	.L1306
-	uxth	r0, r7
-	bl	FtlBbmMapBadBlock
-	b	.L1307
-.L1312:
-	bl	FtlBbmMapBadBlock
-	b	.L1311
-.L1315:
-	ldrh	r3, [r4, #152]
-	cmp	r3, r6
-	bne	.L1316
-	strh	r5, [r4, #152]	@ movhi
-	b	.L1314
-.L1316:
-	strh	r5, [r4, #156]	@ movhi
-.L1317:
-	ldrh	r3, [r4, #152]
-	movs	r5, #0
-	ldr	r0, [r4, #3800]
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	add	sp, sp, #24
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1370:
+	mov	r0, r4
+	bl	get_new_active_ppa
+	str	r0, [sp, #8]
+	adds	r0, r0, #1
+	beq	.L1371
+	ldr	r3, [r5, #2544]
 	movs	r1, #1
-	str	r5, [r4, #160]
-	movs	r2, #2
-	strh	r5, [r4, #154]	@ movhi
-	lsls	r3, r3, #10
-	str	r3, [r0, #4]
-	ldrh	r3, [r4, #156]
-	lsls	r3, r3, #10
-	str	r3, [r0, #24]
-	bl	FlashEraseBlocks
-	ldrh	r0, [r4, #152]
-	bl	FtlBbmMapBadBlock
-	ldrh	r0, [r4, #156]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldr	r3, [r4, #160]
-	ldrh	r2, [r4, #156]
-	strh	r5, [r4, #154]	@ movhi
+	add	r0, sp, #4
+	str	r3, [r6, #4]
 	adds	r3, r3, #1
-	str	r3, [r4, #160]
-	ldrh	r3, [r4, #152]
-	strh	r2, [r4, #152]	@ movhi
-	strh	r3, [r4, #156]	@ movhi
-	bl	FtlBbmTblFlush
-	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1323:
+	adds	r2, r3, #1
+	it	eq
+	moveq	r3, r7
+	str	r3, [r5, #2544]
+	movs	r3, #0
+	mov	r2, r3
+	bl	FlashProgPages
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	subs	r8, r8, #1
+	bne	.L1374
+	b	.L1371
+.L1382:
 	.align	2
-.L1322:
-	.word	.LANCHOR0+3260
-	.word	.LANCHOR0+180
+.L1381:
+	.word	.LANCHOR0
 	.fnend
-	.size	FtlMakeBbt, .-FtlMakeBbt
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	1
 	.global	FtlVendorPartWrite
 	.syntax unified
@@ -8989,7 +9377,7 @@ FtlVendorPartWrite:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r4, .L1336
+	ldr	r4, .L1395
 	adds	r2, r0, r1
 	.pad #108
 	sub	sp, sp, #108
@@ -8997,20 +9385,20 @@ FtlVendorPartWrite:
 	mov	r6, r1
 	ldrh	r3, [r4, #96]
 	cmp	r2, r3
-	bhi	.L1332
+	bhi	.L1391
 	ldrh	r7, [r4, #108]
 	mov	r9, #0
 	lsr	r7, r0, r7
 	lsl	fp, r7, #2
-.L1326:
-	cbnz	r6, .L1331
-.L1324:
+.L1385:
+	cbnz	r6, .L1390
+.L1383:
 	mov	r0, r9
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1331:
-	ldr	r3, [r4, #3884]
+.L1390:
+	ldr	r3, [r4, #3364]
 	mov	r0, r8
 	ldr	r2, [r3, fp]
 	ldrh	r3, [r4, #58]
@@ -9026,10 +9414,10 @@ FtlVendorPartWrite:
 	cmp	r6, r5
 	it	cc
 	uxthcc	r5, r6
-	cbz	r2, .L1328
+	cbz	r2, .L1387
 	cmp	r5, r3
-	beq	.L1328
-	ldr	r3, [r4, #3848]
+	beq	.L1387
+	ldr	r3, [r4, #3300]
 	add	r0, sp, #20
 	str	r2, [sp, #24]
 	movs	r2, #1
@@ -9038,9 +9426,9 @@ FtlVendorPartWrite:
 	add	r3, sp, #40
 	str	r3, [sp, #32]
 	bl	FlashReadPages
-.L1329:
+.L1388:
 	lsls	r3, r5, #9
-	ldr	r0, [r4, #3848]
+	ldr	r0, [r4, #3300]
 	mov	r1, r10
 	mov	r2, r3
 	str	r3, [sp, #8]
@@ -9051,8 +9439,8 @@ FtlVendorPartWrite:
 	add	r0, r0, r3, lsl #9
 	bl	ftl_memcpy
 	mov	r1, r7
-	ldr	r2, [r4, #3848]
-	ldr	r0, .L1336+4
+	ldr	r2, [r4, #3300]
+	ldr	r0, .L1395+4
 	adds	r7, r7, #1
 	bl	FtlMapWritePage
 	ldr	r3, [sp, #8]
@@ -9060,21 +9448,21 @@ FtlVendorPartWrite:
 	it	eq
 	moveq	r9, #-1
 	add	r10, r10, r3
-	b	.L1326
-.L1328:
+	b	.L1385
+.L1387:
 	ldrh	r2, [r4, #110]
 	movs	r1, #0
-	ldr	r0, [r4, #3848]
+	ldr	r0, [r4, #3300]
 	bl	ftl_memset
-	b	.L1329
-.L1332:
+	b	.L1388
+.L1391:
 	mov	r9, #-1
-	b	.L1324
-.L1337:
+	b	.L1383
+.L1396:
 	.align	2
-.L1336:
+.L1395:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3948
+	.word	.LANCHOR0+3468
 	.fnend
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	1
@@ -9089,12 +9477,12 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1340
-	ldr	r3, .L1340+4
+	ldr	r2, .L1399
+	ldr	r3, .L1399+4
 	ldr	r1, [r2, #2636]
 	cmp	r1, r3
-	bne	.L1338
-	ldr	r3, .L1340+8
+	bne	.L1397
+	ldr	r3, .L1399+8
 	addw	r2, r2, #2636
 	movs	r1, #1
 	movs	r0, #0
@@ -9124,14 +9512,14 @@ Ftl_save_ext_data:
 	ldr	r3, [r2, #-68]
 	str	r3, [r2, #48]
 	b	FtlVendorPartWrite
-.L1338:
+.L1397:
 	bx	lr
-.L1341:
+.L1400:
 	.align	2
-.L1340:
+.L1399:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177348
+	.word	1342177352
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	1
@@ -9145,33 +9533,32 @@ FtlEctTblFlush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L1347
 	push	{r3, lr}
 	.save {r3, lr}
-	ldrh	r3, [r2, #-200]
-	cmp	r3, #31
+	ldr	r3, .L1406
+	ldrh	r2, [r3, #3648]
+	cmp	r2, #31
 	itett	ls
-	addls	r3, r3, #1
+	addls	r2, r2, #1
 	movhi	r2, #32
-	strhls	r3, [r2, #-200]	@ movhi
+	strhls	r2, [r3, #3648]	@ movhi
 	movls	r2, #1
-	ldr	r3, .L1347+4
-	cbnz	r0, .L1344
-	ldr	r1, [r3, #3860]
+	cbnz	r0, .L1403
+	ldr	r1, [r3, #3340]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1345
-.L1344:
-	ldr	r2, [r3, #3860]
+	bcc	.L1404
+.L1403:
+	ldr	r2, [r3, #3340]
 	movs	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1347+8
+	ldr	r1, .L1406+4
 	str	r1, [r2]
-	ldrh	r1, [r3, #3852]
-	ldr	r2, [r3, #3860]
+	ldrh	r1, [r3, #3332]
+	ldr	r2, [r3, #3340]
 	lsls	r3, r1, #9
 	str	r3, [r2, #12]
 	ldr	r3, [r2, #8]
@@ -9181,13 +9568,12 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1345:
+.L1404:
 	movs	r0, #0
 	pop	{r3, pc}
-.L1348:
+.L1407:
 	.align	2
-.L1347:
-	.word	.LANCHOR3
+.L1406:
 	.word	.LANCHOR0
 	.word	1112818501
 	.fnend
@@ -9217,86 +9603,105 @@ sftl_vendor_write:
 	.type	FtlVendorPartRead, %function
 FtlVendorPartRead:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 96
+	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r10, r2
-	ldr	r5, .L1359
+	ldr	r4, .L1419
 	adds	r2, r0, r1
-	.pad #100
-	sub	sp, sp, #100
+	.pad #108
+	sub	sp, sp, #108
 	mov	r8, r0
 	mov	r7, r1
-	ldrh	r3, [r5, #96]
+	ldrh	r3, [r4, #96]
 	cmp	r2, r3
-	bhi	.L1358
-	ldrh	r6, [r5, #108]
+	bhi	.L1418
+	ldrh	r6, [r4, #108]
 	mov	r9, #0
 	lsr	r6, r0, r6
-	lsls	r6, r6, #2
-.L1352:
-	cbnz	r7, .L1357
-.L1350:
+	lsl	fp, r6, #2
+.L1411:
+	cbnz	r7, .L1417
+.L1409:
 	mov	r0, r9
-	add	sp, sp, #100
+	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1357:
-	ldr	r3, [r5, #3884]
+.L1417:
+	ldr	r3, [r4, #3364]
 	mov	r0, r8
-	ldrh	r4, [r5, #58]
-	ldr	r3, [r3, r6]
-	mov	r1, r4
-	str	r3, [sp, #4]
+	ldrh	r5, [r4, #58]
+	ldr	r3, [r3, fp]
+	mov	r1, r5
+	str	r3, [sp, #8]
 	bl	__aeabi_uidivmod
-	subs	r4, r4, r1
-	ldr	r3, [sp, #4]
-	uxth	r4, r4
-	str	r1, [sp]
-	cmp	r7, r4
+	subs	r5, r5, r1
+	ldr	r3, [sp, #8]
+	uxth	r5, r5
+	str	r1, [sp, #4]
+	cmp	r7, r5
 	it	cc
-	uxthcc	r4, r7
-	lsl	fp, r4, #9
-	cbz	r3, .L1354
-	str	r3, [sp, #16]
+	uxthcc	r5, r7
+	lsls	r2, r5, #9
+	str	r2, [sp, #8]
+	cbz	r3, .L1413
+	ldr	r2, [r4, #3300]
+	add	r0, sp, #20
+	str	r3, [sp, #24]
+	str	r3, [sp, #12]
+	str	r2, [sp, #28]
+	add	r2, sp, #40
+	str	r2, [sp, #32]
 	movs	r2, #1
-	ldr	r3, [r5, #3848]
 	mov	r1, r2
-	add	r0, sp, #12
-	str	r3, [sp, #20]
-	add	r3, sp, #32
-	str	r3, [sp, #24]
 	bl	FlashReadPages
+	ldr	r2, [sp, #20]
 	ldr	r3, [sp, #12]
-	mov	r2, fp
-	ldr	r1, [r5, #3848]
-	mov	r0, r10
-	adds	r3, r3, #1
-	ldr	r3, [sp]
+	adds	r2, r2, #1
+	ldr	r2, [r4, #3444]
 	it	eq
 	moveq	r9, #-1
+	cmp	r2, #256
+	bne	.L1415
+	mov	r2, r3
+	mov	r1, r6
+	ldr	r0, .L1419+4
+	bl	sftl_printk
+	ldr	r2, [r4, #3300]
+	mov	r1, r6
+	ldr	r0, .L1419+8
+	bl	FtlMapWritePage
+.L1415:
+	ldr	r1, [r4, #3300]
+	lsls	r2, r5, #9
+	ldr	r3, [sp, #4]
+	mov	r0, r10
 	add	r1, r1, r3, lsl #9
 	bl	ftl_memcpy
-.L1356:
-	subs	r7, r7, r4
-	add	r8, r8, r4
-	add	r10, r10, fp
-	adds	r6, r6, #4
-	b	.L1352
-.L1354:
-	mov	r2, fp
+.L1416:
+	ldr	r3, [sp, #8]
+	adds	r6, r6, #1
+	subs	r7, r7, r5
+	add	r8, r8, r5
+	add	fp, fp, #4
+	add	r10, r10, r3
+	b	.L1411
+.L1413:
+	lsls	r2, r5, #9
 	mov	r1, r3
 	mov	r0, r10
 	bl	ftl_memset
-	b	.L1356
-.L1358:
+	b	.L1416
+.L1418:
 	mov	r9, #-1
-	b	.L1350
-.L1360:
+	b	.L1409
+.L1420:
 	.align	2
-.L1359:
+.L1419:
 	.word	.LANCHOR0
+	.word	.LC108
+	.word	.LANCHOR0+3468
 	.fnend
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	1
@@ -9313,32 +9718,32 @@ FtlLoadEctTbl:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r0, #64
-	ldr	r4, .L1363
-	ldr	r2, [r4, #3860]
-	ldrh	r1, [r4, #3852]
+	ldr	r4, .L1423
+	ldr	r2, [r4, #3340]
+	ldrh	r1, [r4, #3332]
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #3860]
+	ldr	r3, [r4, #3340]
 	ldr	r2, [r3]
-	ldr	r3, .L1363+4
+	ldr	r3, .L1423+4
 	cmp	r2, r3
-	beq	.L1362
-	ldr	r1, .L1363+8
-	ldr	r0, .L1363+12
-	bl	printk
-	ldrh	r2, [r4, #3852]
+	beq	.L1422
+	ldr	r1, .L1423+8
+	ldr	r0, .L1423+12
+	bl	sftl_printk
+	ldrh	r2, [r4, #3332]
 	movs	r1, #0
-	ldr	r0, [r4, #3860]
+	ldr	r0, [r4, #3340]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L1362:
+.L1422:
 	movs	r0, #0
 	pop	{r4, pc}
-.L1364:
+.L1424:
 	.align	2
-.L1363:
+.L1423:
 	.word	.LANCHOR0
 	.word	1112818501
-	.word	.LC100
+	.word	.LC109
 	.word	.LC71
 	.fnend
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
@@ -9356,22 +9761,22 @@ Ftl_load_ext_data:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r1, #1
-	ldr	r4, .L1368
+	ldr	r4, .L1428
 	movs	r0, #0
-	ldr	r5, .L1368+4
+	ldr	r5, .L1428+4
 	addw	r2, r4, #2636
 	bl	FtlVendorPartRead
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	beq	.L1366
+	beq	.L1426
 	mov	r1, #512
 	addw	r0, r4, #2636
 	bl	__memzero
 	str	r5, [r4, #2636]
-.L1366:
+.L1426:
 	ldr	r3, [r4, #2636]
 	cmp	r3, r5
-	bne	.L1367
+	bne	.L1427
 	ldr	r3, [r4, #2724]
 	str	r3, [r4, #2532]
 	ldr	r3, [r4, #2728]
@@ -9396,7 +9801,7 @@ Ftl_load_ext_data:
 	str	r3, [r4, #2564]
 	ldr	r3, [r4, #2684]
 	str	r3, [r4, #2568]
-.L1367:
+.L1427:
 	ldrh	r2, [r4, #92]
 	ldr	r3, [r4, #2552]
 	ldr	r0, [r4, #2548]
@@ -9405,9 +9810,9 @@ Ftl_load_ext_data:
 	bl	__aeabi_uidiv
 	str	r0, [r4, #2556]
 	pop	{r3, r4, r5, pc}
-.L1369:
+.L1429:
 	.align	2
-.L1368:
+.L1428:
 	.word	.LANCHOR0
 	.word	1179929683
 	.fnend
@@ -9442,17 +9847,17 @@ FtlVpcTblFlush:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	r4, .L1383
+	ldr	r4, .L1446
 	movs	r1, #255
 	movw	r7, #65535
-	ldr	r9, .L1383+16
-	ldr	r3, [r4, #3280]
-	addw	r8, r4, #3260
-	ldr	r6, [r4, #3284]
-	ldr	r10, .L1383+20
-	str	r3, [r4, #3268]
+	ldr	r9, .L1446+16
+	ldr	r3, [r4, #3292]
+	addw	r8, r4, #3444
+	ldr	r6, [r4, #3324]
+	ldr	r10, .L1446+20
+	str	r3, [r4, #3452]
 	ldrh	r3, [r4, #2576]
-	str	r6, [r4, #3272]
+	str	r6, [r4, #3456]
 	str	r5, [r6, #12]
 	strh	r3, [r6, #2]	@ movhi
 	movw	r3, #61604
@@ -9461,9 +9866,9 @@ FtlVpcTblFlush:
 	str	r5, [r6, #8]
 	ldrh	r2, [r4, #2350]
 	str	r3, [r6, #4]
-	ldr	r3, .L1383+4
+	ldr	r3, .L1446+4
 	str	r3, [r4, #2268]
-	ldr	r3, .L1383+8
+	ldr	r3, .L1446+8
 	str	r3, [r4, #2272]
 	ldrh	r3, [r4, #2582]
 	strh	r3, [r4, #2276]	@ movhi
@@ -9486,7 +9891,7 @@ FtlVpcTblFlush:
 	strb	r3, [r4, #2280]
 	ldrh	r3, [r4, #2444]
 	ldrh	r2, [r4, #2446]
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3452]
 	strh	r3, [r4, #2290]	@ movhi
 	ldrb	r3, [r4, #2450]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
@@ -9503,16 +9908,16 @@ FtlVpcTblFlush:
 	bl	ftl_memset
 	movs	r2, #48
 	addw	r1, r4, #2268
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3452]
 	bl	ftl_memcpy
 	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #3268]
+	ldr	r0, [r4, #3452]
 	ldr	r1, [r4, #2324]
 	lsls	r2, r2, #1
 	adds	r0, r0, #48
 	bl	ftl_memcpy
 	ldrh	r0, [r4, #40]
-	ldr	r3, [r4, #3268]
+	ldr	r3, [r4, #3452]
 	ldr	r1, [r4, #24]
 	lsrs	r2, r0, #3
 	adds	r0, r0, #24
@@ -9523,30 +9928,23 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	r0, r5
 	bl	FtlUpdateVaildLpn
-.L1372:
-	ldr	r3, [r4, #3280]
-	mov	r0, r8
+.L1432:
+	ldr	r3, [r4, #3292]
+	ldrh	r1, [r4, #2578]
 	ldrh	r2, [r4, #2576]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	str	r3, [r4, #3272]
-	ldrh	r3, [r4, #2578]
-	orr	r3, r3, r2, lsl #10
-	str	r3, [r4, #3264]
-	movs	r3, #1
-	mov	r2, r3
-	mov	r1, r3
-	bl	FlashProgPages
+	str	r3, [r4, #3452]
+	ldr	r3, [r4, #3324]
+	str	r3, [r4, #3456]
+	orr	r3, r1, r2, lsl #10
+	str	r3, [r4, #3448]
 	ldrh	r3, [r4, #104]
-	ldrh	r2, [r4, #2578]
 	subs	r3, r3, #1
-	cmp	r2, r3
-	blt	.L1373
-	ldrh	r3, [r4, #2576]
-	ldrh	r7, [r4, #2580]
-	strh	r3, [r4, #2580]	@ movhi
+	cmp	r1, r3
+	blt	.L1433
 	movs	r3, #0
+	ldrh	r7, [r4, #2580]
 	strh	r3, [r4, #2578]	@ movhi
+	strh	r2, [r4, #2580]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
 	ldr	r3, [r4, #2540]
 	strh	r0, [r4, #2576]	@ movhi
@@ -9554,29 +9952,29 @@ FtlVpcTblFlush:
 	str	r3, [r4, #2584]
 	str	r2, [r4, #2540]
 	lsls	r2, r0, #10
-	str	r2, [r4, #3264]
+	str	r2, [r4, #3448]
 	str	r3, [r6, #4]
-	movs	r3, #1
 	strh	r0, [r6, #2]	@ movhi
+.L1433:
+	movs	r3, #1
+	mov	r0, r8
 	mov	r2, r3
 	mov	r1, r3
-	mov	r0, r8
 	bl	FlashProgPages
-.L1373:
 	ldrh	r3, [r4, #2578]
-	ldr	r2, [r4, #3260]
+	ldr	r2, [r4, #3444]
 	adds	r3, r3, #1
 	uxth	r3, r3
-	adds	r2, r2, #1
+	adds	r1, r2, #1
 	strh	r3, [r4, #2578]	@ movhi
-	bne	.L1374
+	bne	.L1434
 	cmp	r3, #1
-	bne	.L1375
-	movw	r2, #1124
+	bne	.L1435
+	movw	r2, #1135
 	mov	r1, r9
 	mov	r0, r10
-	bl	printk
-.L1375:
+	bl	sftl_printk
+.L1435:
 	ldrh	r3, [r4, #2578]
 	adds	r5, r5, #1
 	uxth	r5, r5
@@ -9586,37 +9984,183 @@ FtlVpcTblFlush:
 	addeq	r3, r3, #-1
 	strheq	r3, [r4, #2578]	@ movhi
 	cmp	r5, #3
-	bls	.L1372
+	bls	.L1432
 	mov	r2, r5
-	ldr	r1, [r4, #3264]
-	ldr	r0, .L1383+12
-	bl	printk
-.L1378:
-	b	.L1378
-.L1374:
+	ldr	r1, [r4, #3448]
+	ldr	r0, .L1446+12
+	bl	sftl_printk
+.L1438:
+	b	.L1438
+.L1434:
 	cmp	r3, #1
-	beq	.L1372
+	beq	.L1432
+	cmp	r2, #256
+	beq	.L1432
 	movw	r3, #65535
 	cmp	r7, r3
-	beq	.L1379
+	beq	.L1439
 	movs	r1, #1
 	mov	r0, r7
 	bl	FtlFreeSysBlkQueueIn
-.L1379:
+.L1439:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1384:
+.L1447:
 	.align	2
-.L1383:
+.L1446:
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177348
-	.word	.LC101
-	.word	.LANCHOR1+454
+	.word	1342177352
+	.word	.LC110
+	.word	.LANCHOR1+486
 	.word	.LC1
 	.fnend
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	1
+	.global	FtlSysFlush
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	bl	l2p_flush
+	movs	r0, #1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+	movs	r0, #0
+	pop	{r3, pc}
+	.fnend
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	1
+	.global	sftl_deinit
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	sftl_deinit, %function
+sftl_deinit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L1451
+	ldr	r3, [r3]
+	cmp	r3, #1
+	bne	.L1450
+	bl	FtlSysFlush
+.L1450:
+	movs	r0, #0
+	pop	{r3, pc}
+.L1452:
+	.align	2
+.L1451:
+	.word	.LANCHOR2
+	.fnend
+	.size	sftl_deinit, .-sftl_deinit
+	.align	1
+	.global	FtlDiscard
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlDiscard, %function
+FtlDiscard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	adds	r2, r0, r1
+	ldr	r4, .L1468
+	mov	r8, r0
+	mov	r6, r1
+	ldr	r3, [r4, #140]
+	cmp	r2, r3
+	bhi	.L1461
+	cmp	r1, #31
+	bhi	.L1455
+.L1460:
+	movs	r0, #0
+.L1453:
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1455:
+	ldrh	r5, [r4, #58]
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	smulbb	r3, r0, r5
+	mov	r7, r0
+	sub	r8, r8, r3
+	uxth	r3, r8
+	cbz	r3, .L1456
+	subs	r5, r5, r3
+	adds	r7, r7, #1
+	cmp	r5, r6
+	it	cs
+	movcs	r5, r6
+	uxth	r5, r5
+	subs	r6, r6, r5
+.L1456:
+	mov	r3, #-1
+	str	r3, [sp, #4]
+.L1457:
+	ldrh	r3, [r4, #58]
+	cmp	r6, r3
+	bcs	.L1459
+	ldr	r3, [r4, #3652]
+	cmp	r3, #32
+	bls	.L1460
+	movs	r5, #0
+	str	r5, [r4, #3652]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L1460
+.L1459:
+	movs	r2, #0
+	mov	r1, sp
+	mov	r0, r7
+	bl	log2phys
+	ldr	r3, [sp]
+	adds	r3, r3, #1
+	beq	.L1458
+	ldr	r3, [r4, #3652]
+	movs	r2, #1
+	add	r1, sp, #4
+	mov	r0, r7
+	adds	r3, r3, #1
+	str	r3, [r4, #3652]
+	ldr	r3, [r4, #2512]
+	adds	r3, r3, #1
+	str	r3, [r4, #2512]
+	bl	log2phys
+	ldr	r0, [sp]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L1458:
+	ldrh	r3, [r4, #58]
+	adds	r7, r7, #1
+	subs	r6, r6, r3
+	b	.L1457
+.L1461:
+	mov	r0, #-1
+	b	.L1453
+.L1469:
+	.align	2
+.L1468:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlDiscard, .-FtlDiscard
+	.align	1
 	.global	FtlVpcCheckAndModify
 	.syntax unified
 	.thumb
@@ -9631,87 +10175,94 @@ FtlVpcCheckAndModify:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	movs	r5, #0
-	ldr	r4, .L1397
-	ldr	r1, .L1397+4
-	ldr	r0, .L1397+8
-	bl	printk
+	ldr	r4, .L1483
+	ldr	r1, .L1483+4
+	ldr	r0, .L1483+8
+	bl	sftl_printk
 	ldrh	r2, [r4, #42]
 	movs	r1, #0
-	ldr	r0, [r4, #3864]
+	ldr	r0, [r4, #3344]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L1386:
+.L1471:
 	ldr	r3, [r4, #2504]
 	cmp	r5, r3
-	bcc	.L1388
-	ldr	r9, .L1397+12
+	bcc	.L1473
+	ldr	r9, .L1483+12
 	movs	r7, #0
 	movw	r8, #65535
-.L1389:
+.L1474:
 	ldrh	r3, [r4, #40]
-	uxth	r5, r7
-	cmp	r3, r5
-	bhi	.L1393
+	uxth	r6, r7
+	cmp	r3, r6
+	bhi	.L1479
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L1388:
+.L1473:
 	movs	r2, #0
 	add	r1, sp, #4
 	mov	r0, r5
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	adds	r3, r0, #1
-	beq	.L1387
+	beq	.L1472
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r4, #3864]
+	ldr	r2, [r4, #3344]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L1387:
+.L1472:
 	adds	r5, r5, #1
-	b	.L1386
-.L1393:
+	b	.L1471
+.L1479:
 	ldr	r3, [r4, #2324]
-	uxth	r6, r7
-	ldrh	r2, [r3, r6, lsl #1]
-	ldr	r3, [r4, #3864]
-	ldrh	r3, [r3, r6, lsl #1]
+	uxth	r5, r7
+	ldrh	r2, [r3, r5, lsl #1]
+	ldr	r3, [r4, #3344]
+	ldrh	r3, [r3, r5, lsl #1]
 	cmp	r2, r3
-	beq	.L1391
+	beq	.L1476
 	cmp	r2, r8
-	beq	.L1391
-	mov	r1, r6
+	beq	.L1476
+	mov	r1, r5
 	mov	r0, r9
-	bl	printk
+	bl	sftl_printk
 	ldrh	r3, [r4, #2348]
-	cmp	r3, r5
-	beq	.L1391
+	cmp	r3, r6
+	beq	.L1476
 	ldrh	r3, [r4, #2444]
-	cmp	r3, r5
-	beq	.L1391
+	cmp	r3, r6
+	beq	.L1476
 	ldrh	r3, [r4, #2396]
-	cmp	r3, r5
-	beq	.L1391
-	ldr	r3, [r4, #3864]
-	mov	r0, r5
-	ldrh	r2, [r3, r6, lsl #1]
+	cmp	r3, r6
+	beq	.L1476
 	ldr	r3, [r4, #2324]
-	strh	r2, [r3, r6, lsl #1]	@ movhi
-	bl	update_vpc_list
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-.L1391:
+	ldrh	r2, [r3, r5, lsl #1]
+	cbnz	r2, .L1478
+	ldr	r2, [r4, #3344]
+	ldrh	r2, [r2, r5, lsl #1]
+	strh	r2, [r3, r5, lsl #1]	@ movhi
+.L1476:
 	adds	r7, r7, #1
-	b	.L1389
-.L1398:
+	b	.L1474
+.L1478:
+	ldr	r2, [r4, #3344]
+	mov	r0, r6
+	ldrh	r2, [r2, r5, lsl #1]
+	strh	r2, [r3, r5, lsl #1]	@ movhi
+	bl	update_vpc_list
+	b	.L1476
+.L1484:
 	.align	2
-.L1397:
+.L1483:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+469
-	.word	.LC91
-	.word	.LC102
+	.word	.LANCHOR1+501
+	.word	.LC95
+	.word	.LC111
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	1
@@ -9728,42 +10279,42 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L1409
+	ldr	r4, .L1495
 	ldrh	r5, [r0]
 	ldrh	r3, [r4, #40]
 	cmp	r3, r5
-	bcs	.L1400
-	movw	r2, #2681
-	ldr	r1, .L1409+4
-	ldr	r0, .L1409+8
-	bl	printk
-.L1400:
+	bcs	.L1486
+	movw	r2, #2714
+	ldr	r1, .L1495+4
+	ldr	r0, .L1495+8
+	bl	sftl_printk
+.L1486:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L1401
+	beq	.L1487
 	ldr	r3, [r4, #2324]
 	mov	r0, r5
 	ldrh	r3, [r3, r5, lsl #1]
-	cbz	r3, .L1402
+	cbz	r3, .L1488
 	bl	INSERT_DATA_LIST
-.L1401:
-	ldrh	r0, [r4, #3992]
+.L1487:
+	ldrh	r0, [r4, #3430]
 	movs	r3, #1
 	strb	r3, [r6, #8]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1403
+	beq	.L1489
 	cmp	r5, r0
-	bne	.L1404
+	bne	.L1490
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L1405
-.L1404:
+	cbz	r3, .L1491
+.L1490:
 	bl	update_vpc_list
-.L1405:
+.L1491:
 	movw	r3, #65535
-	strh	r3, [r4, #3992]	@ movhi
-.L1403:
+	strh	r3, [r4, #3430]	@ movhi
+.L1489:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
@@ -9772,14 +10323,14 @@ allocate_new_data_superblock:
 	bl	FtlVpcTblFlush
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L1402:
+.L1488:
 	bl	INSERT_FREE_LIST
-	b	.L1401
-.L1410:
+	b	.L1487
+.L1496:
 	.align	2
-.L1409:
+.L1495:
 	.word	.LANCHOR0
-	.word	.LANCHOR1+490
+	.word	.LANCHOR1+522
 	.word	.LC1
 	.fnend
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
@@ -9797,29 +10348,29 @@ FtlProgPages:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r7, #0
-	ldr	r6, .L1425
+	ldr	r6, .L1511
 	.pad #20
 	sub	sp, sp, #20
 	mov	r4, r3
 	movs	r2, #0
-	ldr	r10, .L1425+8
+	ldr	r10, .L1511+8
 	mov	r5, r0
-	ldr	fp, .L1425+12
+	ldr	fp, .L1511+12
 	mov	r9, r1
 	ldrb	r3, [r3, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-.L1412:
+.L1498:
 	cmp	r7, r9
-	beq	.L1419
+	beq	.L1505
 	mov	r8, #0
-	b	.L1420
-.L1415:
+	b	.L1506
+.L1501:
 	ldr	r0, [r5, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r4]
 	cmp	r3, r0
-	bne	.L1413
+	bne	.L1499
 	ldr	r1, [r6, #2324]
 	ldrh	r0, [r4, #4]
 	ldrh	r2, [r1, r3, lsl #1]
@@ -9829,12 +10380,12 @@ FtlProgPages:
 	strb	r8, [r4, #6]
 	strh	r8, [r4, #4]	@ movhi
 	strh	r3, [r4, #2]	@ movhi
-.L1413:
+.L1499:
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L1414
+	cbnz	r3, .L1500
 	mov	r0, r4
 	bl	allocate_new_data_superblock
-.L1414:
+.L1500:
 	ldr	r3, [r6, #2732]
 	adds	r3, r3, #1
 	str	r3, [r6, #2732]
@@ -9850,19 +10401,19 @@ FtlProgPages:
 	ldrb	r3, [r4, #9]	@ zero_extendqisi2
 	mov	r0, r5
 	bl	FlashProgPages
-.L1420:
+.L1506:
 	ldr	r3, [r5]
 	adds	r3, r3, #1
-	beq	.L1415
+	beq	.L1501
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1416
-	movw	r2, #933
+	bcc	.L1502
+	movw	r2, #955
 	mov	r1, r10
 	mov	r0, fp
-	bl	printk
-.L1416:
+	bl	sftl_printk
+.L1502:
 	ldr	r3, [r5, #4]
 	add	r1, sp, #16
 	movs	r2, #1
@@ -9877,226 +10428,43 @@ FtlProgPages:
 	ldr	r3, [sp, #4]
 	mov	r8, r0
 	adds	r3, r3, #1
-	beq	.L1417
+	beq	.L1503
 	ldr	r3, [r6, #2324]
 	ldrh	r2, [r3, r0, lsl #1]
-	cbnz	r2, .L1418
+	cbnz	r2, .L1504
 	mov	r1, r0
-	ldr	r0, .L1425+4
-	bl	printk
-.L1418:
+	ldr	r0, .L1511+4
+	bl	sftl_printk
+.L1504:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L1417:
+.L1503:
 	adds	r7, r7, #1
 	adds	r5, r5, #20
-	b	.L1412
-.L1419:
+	b	.L1498
+.L1505:
 	ldrb	r2, [r4, #6]	@ zero_extendqisi2
 	ldrh	r3, [r6, #32]
 	cmp	r2, r3
-	bcc	.L1411
-	mov	r2, #948
-	ldr	r1, .L1425+8
-	ldr	r0, .L1425+12
-	bl	printk
-.L1411:
+	bcc	.L1497
+	movw	r2, #970
+	ldr	r1, .L1511+8
+	ldr	r0, .L1511+12
+	bl	sftl_printk
+.L1497:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1426:
+.L1512:
 	.align	2
-.L1425:
+.L1511:
 	.word	.LANCHOR0
-	.word	.LC103
-	.word	.LANCHOR1+519
+	.word	.LC112
+	.word	.LANCHOR1+551
 	.word	.LC1
 	.fnend
 	.size	FtlProgPages, .-FtlProgPages
 	.align	1
-	.global	FtlCacheWriteBack
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlCacheWriteBack, %function
-FtlCacheWriteBack:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
-	ldr	r4, .L1432
-	ldr	r0, [r4, #3988]
-	cbz	r0, .L1428
-	ldr	r3, .L1432+4
-	movs	r2, #0
-	movs	r1, #1
-	ldr	r3, [r3, #-196]
-	bl	FtlProgPages
-	movs	r3, #0
-	str	r3, [r4, #3988]
-.L1428:
-	movs	r0, #0
-	pop	{r4, pc}
-.L1433:
-	.align	2
-.L1432:
-	.word	.LANCHOR0
-	.word	.LANCHOR3
-	.fnend
-	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
-	.align	1
-	.global	FtlSysFlush
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlSysFlush, %function
-FtlSysFlush:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, lr}
-	.save {r3, lr}
-	bl	FtlCacheWriteBack
-	bl	l2p_flush
-	movs	r0, #1
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-	movs	r0, #0
-	pop	{r3, pc}
-	.fnend
-	.size	FtlSysFlush, .-FtlSysFlush
-	.align	1
-	.global	sftl_deinit
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	sftl_deinit, %function
-sftl_deinit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, lr}
-	.save {r3, lr}
-	ldr	r3, .L1437
-	ldr	r3, [r3]
-	cmp	r3, #1
-	bne	.L1436
-	bl	FtlSysFlush
-.L1436:
-	movs	r0, #0
-	pop	{r3, pc}
-.L1438:
-	.align	2
-.L1437:
-	.word	.LANCHOR2
-	.fnend
-	.size	sftl_deinit, .-sftl_deinit
-	.align	1
-	.global	FtlDiscard
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlDiscard, %function
-FtlDiscard:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	.pad #8
-	adds	r2, r0, r1
-	ldr	r6, .L1454
-	mov	r7, r0
-	mov	r5, r1
-	ldr	r3, [r6, #140]
-	cmp	r2, r3
-	bhi	.L1447
-	cmp	r1, #31
-	bhi	.L1441
-.L1446:
-	movs	r0, #0
-.L1439:
-	add	sp, sp, #8
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, pc}
-.L1441:
-	bl	FtlCacheWriteBack
-	ldrh	r4, [r6, #58]
-	mov	r0, r7
-	mov	r1, r4
-	bl	__aeabi_uidiv
-	smulbb	r3, r0, r4
-	mov	r8, r0
-	subs	r7, r7, r3
-	uxth	r7, r7
-	cbz	r7, .L1442
-	subs	r4, r4, r7
-	add	r8, r0, #1
-	cmp	r4, r5
-	it	cs
-	movcs	r4, r5
-	uxth	r4, r4
-	subs	r5, r5, r4
-.L1442:
-	ldr	r4, .L1454+4
-	mov	r3, #-1
-	str	r3, [sp, #4]
-.L1443:
-	ldrh	r3, [r6, #58]
-	cmp	r5, r3
-	bcs	.L1445
-	ldr	r3, .L1454+4
-	ldr	r2, [r3, #-192]
-	cmp	r2, #32
-	bls	.L1446
-	movs	r4, #0
-	str	r4, [r3, #-192]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	b	.L1446
-.L1445:
-	movs	r2, #0
-	mov	r1, sp
-	mov	r0, r8
-	bl	log2phys
-	ldr	r3, [sp]
-	adds	r3, r3, #1
-	beq	.L1444
-	ldr	r3, [r4, #-192]
-	movs	r2, #1
-	add	r1, sp, #4
-	mov	r0, r8
-	adds	r3, r3, #1
-	str	r3, [r4, #-192]
-	ldr	r3, [r6, #2512]
-	adds	r3, r3, #1
-	str	r3, [r6, #2512]
-	bl	log2phys
-	ldr	r0, [sp]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	decrement_vpc_count
-.L1444:
-	ldrh	r3, [r6, #58]
-	add	r8, r8, #1
-	subs	r5, r5, r3
-	b	.L1443
-.L1447:
-	mov	r0, #-1
-	b	.L1439
-.L1455:
-	.align	2
-.L1454:
-	.word	.LANCHOR0
-	.word	.LANCHOR3
-	.fnend
-	.size	FtlDiscard, .-FtlDiscard
-	.align	1
 	.global	FtlGcFreeTempBlock
 	.syntax unified
 	.thumb
@@ -10111,49 +10479,49 @@ FtlGcFreeTempBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	movw	r2, #65535
-	ldr	r4, .L1482
+	ldr	r4, .L1539
 	ldrh	r5, [r4, #2444]
 	ldrh	r1, [r4, #102]
 	cmp	r5, r2
-	bne	.L1457
-.L1467:
+	bne	.L1514
+.L1524:
 	ldrh	r2, [r4, #2444]
 	movs	r3, #0
-	str	r3, [r4, #4000]
+	str	r3, [r4, #3436]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1480
-.L1458:
+	bne	.L1537
+.L1515:
 	movs	r0, #0
-.L1456:
+.L1513:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1457:
-	cbz	r0, .L1460
-	ldr	r3, .L1482+4
+.L1514:
+	cbz	r0, .L1517
+	ldr	r3, .L1539+4
 	ldrh	r0, [r3, #4]
 	cmp	r0, r2
-	beq	.L1461
-.L1462:
+	beq	.L1518
+.L1519:
 	movs	r1, #2
-.L1460:
-	ldr	r0, .L1482+8
+.L1517:
+	ldr	r0, .L1539+8
 	bl	FtlGcScanTempBlk
 	str	r0, [sp, #4]
 	adds	r0, r0, #1
-	beq	.L1463
+	beq	.L1520
 	ldr	r2, [r4, #2328]
 	ldrh	r3, [r2, r5, lsl #1]
 	cmp	r3, #4
-	bls	.L1464
+	bls	.L1521
 	subs	r3, r3, #5
 	movs	r0, #1
 	strh	r3, [r2, r5, lsl #1]	@ movhi
 	bl	FtlEctTblFlush
-.L1464:
-	ldr	r3, [r4, #4000]
-	cbnz	r3, .L1465
+.L1521:
+	ldr	r3, [r4, #3436]
+	cbnz	r3, .L1522
 	ldr	r3, [r4, #2732]
 	ldr	r0, [sp, #4]
 	adds	r3, r3, #1
@@ -10161,69 +10529,68 @@ FtlGcFreeTempBlock:
 	str	r3, [r4, #2732]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1465:
+.L1522:
 	movs	r3, #0
-	str	r3, [r4, #4000]
-.L1476:
+	str	r3, [r4, #3436]
+.L1533:
 	movs	r0, #1
-	b	.L1456
-.L1461:
+	b	.L1513
+.L1518:
 	movs	r2, #0
 	strh	r2, [r3, #4]	@ movhi
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #17
-	bhi	.L1462
-	b	.L1460
-.L1463:
-	ldr	r3, .L1482+4
+	bhi	.L1519
+	b	.L1517
+.L1520:
+	ldr	r3, .L1539+4
 	ldrh	r2, [r3, #4]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1476
-	b	.L1467
-.L1480:
-	bl	FtlCacheWriteBack
+	bne	.L1533
+	b	.L1524
+.L1537:
 	ldrb	r1, [r4, #2451]	@ zero_extendqisi2
 	ldrh	r3, [r4, #102]
 	ldrh	r2, [r4, #3200]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L1468
+	beq	.L1525
 	movs	r2, #162
-	ldr	r1, .L1482+12
-	ldr	r0, .L1482+16
-	bl	printk
-.L1468:
+	ldr	r1, .L1539+12
+	ldr	r0, .L1539+16
+	bl	sftl_printk
+.L1525:
 	ldrb	r3, [r4, #2451]	@ zero_extendqisi2
 	movs	r6, #0
 	ldrh	r0, [r4, #102]
 	mov	r9, #12
 	ldr	r2, [r4, #2324]
 	ldrh	r1, [r4, #2444]
-	ldr	r10, .L1482+12
+	ldr	r10, .L1539+12
 	smulbb	r3, r3, r0
-	ldr	fp, .L1482+16
+	ldr	fp, .L1539+16
 	strh	r3, [r2, r1, lsl #1]	@ movhi
 	ldr	r2, [r4, #2528]
 	ldrh	r3, [r4, #3200]
 	add	r3, r3, r2
 	str	r3, [r4, #2528]
-.L1469:
+.L1526:
 	ldrh	r2, [r4, #3200]
 	uxth	r3, r6
 	cmp	r2, r3
-	bhi	.L1473
+	bhi	.L1530
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #2444]
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #0
-	beq	.L1474
+	beq	.L1531
 	bl	INSERT_DATA_LIST
-.L1475:
-	movs	r5, #0
+.L1532:
 	movw	r6, #65535
+	movs	r5, #0
 	strh	r6, [r4, #2444]	@ movhi
 	strh	r5, [r4, #3200]	@ movhi
 	strh	r5, [r4, #3192]	@ movhi
@@ -10231,14 +10598,14 @@ FtlGcFreeTempBlock:
 	bl	FtlVpcTblFlush
 	ldrh	r3, [r4, #2572]
 	ldrh	r2, [r4, #2344]
+	strh	r6, [r4, #2588]	@ movhi
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, asr #2
-	ble	.L1458
+	ble	.L1515
 	movs	r3, #20
-	strh	r6, [r4, #2588]	@ movhi
 	strh	r3, [r4, #3148]	@ movhi
-	b	.L1458
-.L1473:
+	b	.L1515
+.L1530:
 	uxth	r7, r6
 	ldr	r8, [r4, #3196]
 	ldr	r3, [r4, #2504]
@@ -10246,12 +10613,12 @@ FtlGcFreeTempBlock:
 	add	r5, r8, r7
 	ldr	r2, [r5, #8]
 	cmp	r2, r3
-	bcc	.L1470
+	bcc	.L1527
 	movs	r2, #168
 	mov	r1, r10
 	mov	r0, fp
-	bl	printk
-.L1470:
+	bl	sftl_printk
+.L1527:
 	movs	r2, #0
 	add	r1, sp, #4
 	ldr	r0, [r5, #8]
@@ -10259,7 +10626,7 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r8, r7]
 	ldr	r3, [sp, #4]
 	cmp	r0, r3
-	bne	.L1471
+	bne	.L1528
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	movs	r2, #1
@@ -10268,27 +10635,27 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r5, #8]
 	bl	log2phys
 	mov	r0, r7
-.L1481:
+.L1538:
 	bl	decrement_vpc_count
-.L1472:
+.L1529:
 	adds	r6, r6, #1
-	b	.L1469
-.L1471:
+	b	.L1526
+.L1528:
 	ldr	r2, [r5, #4]
 	cmp	r3, r2
-	beq	.L1472
+	beq	.L1529
 	ldrh	r0, [r4, #2444]
-	b	.L1481
-.L1474:
+	b	.L1538
+.L1531:
 	bl	INSERT_FREE_LIST
-	b	.L1475
-.L1483:
+	b	.L1532
+.L1540:
 	.align	2
-.L1482:
+.L1539:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR0+2444
-	.word	.LANCHOR1+532
+	.word	.LANCHOR1+564
 	.word	.LC1
 	.fnend
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
@@ -10305,25 +10672,25 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L1486
+	ldr	r4, .L1543
 	ldrh	r1, [r4, #102]
 	addw	r0, r4, #2444
 	bl	FtlGcScanTempBlk
 	ldrh	r2, [r4, #2446]
 	ldrh	r3, [r4, #102]
 	cmp	r2, r3
-	bcc	.L1484
-	add	r0, r4, #3904
+	bcc	.L1541
+	addw	r0, r4, #3384
 	bl	FtlMapBlkWriteDump_data
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
-	str	r3, [r4, #4000]
-.L1484:
+	str	r3, [r4, #3436]
+.L1541:
 	pop	{r4, pc}
-.L1487:
+.L1544:
 	.align	2
-.L1486:
+.L1543:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
@@ -10341,9 +10708,9 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L1489
+	ldr	r4, .L1546
 	addw	r6, r4, #2348
-	str	r5, [r4, #4012]
+	str	r5, [r4, #3516]
 	mov	r0, r6
 	addw	r4, r4, #2396
 	bl	FtlRecoverySuperblock
@@ -10358,9 +10725,9 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1490:
+.L1547:
 	.align	2
-.L1489:
+.L1546:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
@@ -10378,35 +10745,35 @@ Ftl_gc_temp_data_write_back:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r3, #0
-	ldr	r4, .L1498
+	ldr	r4, .L1555
 	movs	r5, #0
 	movs	r6, #20
 	mov	r2, r3
 	ldr	r1, [r4, #3164]
-	ldr	r0, [r4, #3836]
+	ldr	r0, [r4, #3284]
 	bl	FlashProgPages
-.L1492:
+.L1549:
 	ldr	r1, [r4, #3164]
 	uxth	r3, r5
 	cmp	r1, r3
-	bhi	.L1495
-	ldr	r0, [r4, #3836]
+	bhi	.L1552
+	ldr	r0, [r4, #3284]
 	bl	FtlGcBufFree
 	ldrh	r3, [r4, #2448]
 	movs	r0, #0
 	str	r0, [r4, #3164]
-	cbnz	r3, .L1491
+	cbnz	r3, .L1548
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
-	b	.L1497
-.L1495:
+	b	.L1554
+.L1552:
 	muls	r3, r6, r3
-	ldr	r2, [r4, #3836]
+	ldr	r2, [r4, #3284]
 	adds	r5, r5, #1
 	adds	r1, r2, r3
 	ldr	r2, [r2, r3]
 	adds	r0, r2, #1
-	bne	.L1493
+	bne	.L1550
 	ldrh	r0, [r4, #2444]
 	movs	r5, #0
 	ldr	r1, [r4, #2324]
@@ -10415,27 +10782,27 @@ Ftl_gc_temp_data_write_back:
 	ldr	r2, [r4, #2732]
 	adds	r2, r2, #1
 	str	r2, [r4, #2732]
-	ldr	r2, [r4, #3836]
+	ldr	r2, [r4, #3284]
 	add	r3, r3, r2
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1497:
+.L1554:
 	movs	r0, #1
-.L1491:
+.L1548:
 	pop	{r4, r5, r6, pc}
-.L1493:
+.L1550:
 	ldr	r3, [r1, #12]
 	ldr	r1, [r1, #4]
 	ldr	r2, [r3, #8]
 	ldr	r0, [r3, #12]
 	bl	FtlGcUpdatePage
-	b	.L1492
-.L1499:
+	b	.L1549
+.L1556:
 	.align	2
-.L1498:
+.L1555:
 	.word	.LANCHOR0
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
@@ -10453,37 +10820,164 @@ Ftl_get_new_temp_ppa:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movw	r3, #65535
-	ldr	r4, .L1503
+	ldr	r4, .L1560
 	ldrh	r2, [r4, #2444]
 	cmp	r2, r3
-	beq	.L1501
+	beq	.L1558
 	ldrh	r3, [r4, #2448]
-	cbnz	r3, .L1502
-.L1501:
-	bl	FtlCacheWriteBack
+	cbnz	r3, .L1559
+.L1558:
 	movs	r0, #0
 	movs	r5, #0
 	bl	FtlGcFreeTempBlock
-	ldr	r0, .L1503+4
+	ldr	r0, .L1560+4
 	strb	r5, [r4, #2452]
 	bl	allocate_data_superblock
 	strh	r5, [r4, #3192]	@ movhi
 	strh	r5, [r4, #3200]	@ movhi
 	bl	l2p_flush
 	mov	r0, r5
-	bl	FtlEctTblFlush
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L1559:
+	ldr	r0, .L1560+4
+	pop	{r3, r4, r5, lr}
+	b	get_new_active_ppa
+.L1561:
+	.align	2
+.L1560:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2444
+	.fnend
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	1
+	.global	FtlSysBlkInit
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r3, #0
+	ldr	r4, .L1577
+	ldrh	r0, [r4, #36]
+	strh	r3, [r4, #3512]	@ movhi
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	r2, [r4, #2576]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1563
+.L1565:
+	mov	r5, #-1
+.L1562:
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L1563:
+	bl	FtlLoadSysInfo
+	mov	r5, r0
+	cmp	r0, #0
+	bne	.L1565
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	movs	r0, #1
+	bl	FtlUpdateVaildLpn
+	ldrh	r1, [r4, #138]
+	mov	r3, r5
+	ldr	r2, [r4, #2492]
+	movs	r0, #12
+.L1566:
+	cmp	r3, r1
+	bge	.L1571
+	mla	r6, r0, r3, r2
+	ldr	r6, [r6, #4]
+	cmp	r6, #0
+	bge	.L1567
+.L1571:
+	ldrh	r2, [r4, #2296]
+	cmp	r3, r1
+	add	r2, r2, #1
+	strh	r2, [r4, #2296]	@ movhi
+	bge	.L1576
+.L1568:
+	ldr	r0, .L1577+4
+	bl	FtlSuperblockPowerLostFix
+	ldr	r0, .L1577+8
+	bl	FtlSuperblockPowerLostFix
+	ldrh	r1, [r4, #2348]
+	ldr	r2, [r4, #2324]
+	ldrh	r0, [r4, #2352]
+	ldrh	r3, [r2, r1, lsl #1]
+	subs	r3, r3, r0
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldrh	r3, [r4, #102]
+	ldr	r1, [r4, #2324]
+	ldrh	r0, [r4, #2396]
+	strh	r3, [r4, #2350]	@ movhi
+	movs	r3, #0
+	strb	r3, [r4, #2354]
+	strh	r3, [r4, #2352]	@ movhi
+	ldrh	r6, [r4, #2400]
+	ldrh	r2, [r1, r0, lsl #1]
+	subs	r2, r2, r6
+	strh	r2, [r1, r0, lsl #1]	@ movhi
+	strb	r3, [r4, #2402]
+	strh	r3, [r4, #2400]	@ movhi
+	ldrh	r3, [r4, #2298]
+	ldrh	r2, [r4, #102]
+	adds	r3, r3, #1
+	strh	r2, [r4, #2398]	@ movhi
+	strh	r3, [r4, #2298]	@ movhi
+	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1502:
-	ldr	r0, .L1503+4
-	pop	{r3, r4, r5, lr}
-	b	get_new_active_ppa
-.L1504:
+	bl	FtlVpcTblFlush
+	b	.L1572
+.L1567:
+	adds	r3, r3, #1
+	b	.L1566
+.L1576:
+	ldrh	r3, [r4, #3512]
+	cmp	r3, #0
+	bne	.L1568
+.L1572:
+	bl	FtlVpcCheckAndModify
+	ldrh	r0, [r4, #2348]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1562
+	ldrh	r3, [r4, #2352]
+	cmp	r3, #0
+	bne	.L1562
+	ldrh	r3, [r4, #2400]
+	cmp	r3, #0
+	bne	.L1562
+	bl	FtlGcRefreshBlock
+	ldrh	r0, [r4, #2396]
+	bl	FtlGcRefreshBlock
+	bl	FtlVpcTblFlush
+	ldr	r0, .L1577+4
+	bl	allocate_new_data_superblock
+	ldr	r0, .L1577+8
+	bl	allocate_new_data_superblock
+	b	.L1562
+.L1578:
 	.align	2
-.L1503:
+.L1577:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2444
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2396
 	.fnend
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	1
 	.global	rk_ftl_garbage_collect
 	.syntax unified
@@ -10493,294 +10987,303 @@ Ftl_get_new_temp_ppa:
 	.type	rk_ftl_garbage_collect, %function
 rk_ftl_garbage_collect:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1624
+	ldr	r3, .L1701
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	r7, r0
-	.pad #36
-	sub	sp, sp, #36
+	mov	r9, r0
+	.pad #44
+	sub	sp, sp, #44
 	mov	r4, r3
-	ldr	r0, [r3, #3820]
+	ldr	r0, [r3, #3264]
 	cmp	r0, #0
-	bne	.L1580
+	bne	.L1656
 	ldrh	r2, [r3, #2336]
 	cmp	r2, #47
-	bls	.L1505
-	ldr	r2, .L1624+4
+	bls	.L1579
+	ldr	r2, .L1701+4
 	ldrh	r1, [r2, #4]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1507
-.L1510:
+	bne	.L1581
+.L1584:
 	ldrh	r2, [r4, #3204]
 	movw	r1, #65535
 	cmp	r2, r1
-	bne	.L1508
-.L1509:
+	bne	.L1582
+.L1583:
+	bl	FtlReadRefresh
 	ldr	r3, [r4, #3152]
-	movw	r5, #65535
+	movw	r6, #65535
 	ldrh	r1, [r4, #2588]
 	adds	r3, r3, #1
-	add	r3, r3, r7, lsl #7
-	cmp	r1, r5
+	add	r3, r3, r9, lsl #7
+	cmp	r1, r6
 	str	r3, [r4, #3152]
-	bne	.L1511
+	bne	.L1585
 	ldrh	r2, [r4, #2444]
 	cmp	r2, r1
-	bne	.L1512
-	ldrh	r8, [r4, #3202]
-	cmp	r8, r2
-	bne	.L1513
+	bne	.L1586
+	ldrh	r7, [r4, #3202]
+	cmp	r7, r2
+	bne	.L1587
 	ldrh	r2, [r4, #2344]
 	cmp	r2, #24
 	ite	cc
 	movcc	r2, #5120
 	movcs	r2, #1024
 	cmp	r3, r2
-	bls	.L1513
-	ldr	r3, .L1624+8
-	movs	r6, #0
-	str	r6, [r4, #3152]
-	strh	r6, [r3, #-188]	@ movhi
+	bls	.L1587
+	movs	r5, #0
+	str	r5, [r4, #3152]
+	strh	r5, [r4, #3656]	@ movhi
 	bl	GetSwlReplaceBlock
-	cmp	r0, r8
-	mov	r5, r0
-	bne	.L1584
+	cmp	r0, r7
+	mov	r6, r0
+	bne	.L1660
 	ldrh	r2, [r4, #2344]
 	ldrh	r3, [r4, #3150]
 	cmp	r2, r3
-	bcs	.L1516
+	bcs	.L1590
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
-	cmp	r3, r5
-	beq	.L1518
+	cmp	r3, r6
+	beq	.L1592
 	mov	r0, r3
 	ldr	r3, [r4, #2324]
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, #7
-	bhi	.L1519
-	mov	r0, r6
+	bhi	.L1593
+	mov	r0, r5
 	bl	List_get_gc_head_node
-	uxth	r6, r0
+	uxth	r5, r0
 	movs	r3, #128
 	strh	r3, [r4, #3150]	@ movhi
-	cmp	r6, r5
-	beq	.L1518
-.L1515:
-	ldr	r3, [r4, #2324]
-	mov	r5, r6
-	ldrh	r1, [r4, #3148]
-	ldrh	r2, [r4, #2344]
-	ldrh	r3, [r3, r6, lsl #1]
-	str	r1, [sp, #4]
-	ldr	r1, [r4, #2328]
-	ldr	r0, .L1624+12
-	ldrh	r1, [r1, r6, lsl #1]
-	str	r1, [sp]
-	mov	r1, r6
-	bl	printk
-	b	.L1518
-.L1507:
-	ldrh	r3, [r3, #2444]
-	cmp	r3, r2
-	beq	.L1510
-	movs	r0, #1
-	bl	FtlGcFreeTempBlock
-	cmp	r0, #0
-	beq	.L1510
-	movs	r0, #1
-	b	.L1505
-.L1508:
-	ldrh	r3, [r4, #3202]
-	cmp	r3, r1
-	itt	eq
-	strheq	r2, [r4, #3202]	@ movhi
-	strheq	r3, [r4, #3204]	@ movhi
-	b	.L1509
-.L1519:
-	movs	r3, #64
-.L1617:
-	strh	r3, [r4, #3150]	@ movhi
-.L1518:
+	cmp	r5, r6
+	bne	.L1589
+.L1592:
 	bl	FtlGcReFreshBadBlk
-	cmp	r7, #0
-	bne	.L1521
+	cmp	r9, #0
+	bne	.L1595
 	movw	r3, #65535
-	cmp	r5, r3
-	bne	.L1521
-.L1578:
+	cmp	r6, r3
+	bne	.L1595
+.L1654:
 	ldrh	r3, [r4, #2344]
 	cmp	r3, #24
-	bhi	.L1585
+	bhi	.L1661
 	cmp	r3, #16
-	ldrh	r6, [r4, #102]
-	bls	.L1523
-	lsrs	r6, r6, #5
-.L1522:
+	ldrh	r5, [r4, #102]
+	bls	.L1597
+	lsrs	r5, r5, #5
+.L1596:
 	ldrh	r2, [r4, #3148]
 	cmp	r2, r3
-	bcs	.L1526
+	bcs	.L1600
 	ldrh	r3, [r4, #2444]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1527
+	bne	.L1601
 	ldrh	r2, [r4, #3202]
 	cmp	r2, r3
-	bne	.L1527
-	ldr	r3, .L1624+8
-	ldrh	r0, [r3, #-188]
-	cbnz	r0, .L1528
+	bne	.L1601
+	ldrh	r0, [r4, #3656]
+	cbnz	r0, .L1602
 	ldr	r3, [r4, #2504]
 	ldr	r2, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1529
-.L1528:
+	bcs	.L1603
+.L1602:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1618:
+.L1697:
 	strh	r3, [r4, #3148]	@ movhi
 	movs	r3, #0
 	str	r3, [r4, #3160]
-.L1505:
-	add	sp, sp, #36
+.L1579:
+	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1516:
+.L1581:
+	ldrh	r3, [r3, #2444]
+	cmp	r3, r2
+	beq	.L1584
+	movs	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	beq	.L1584
+	movs	r0, #1
+	b	.L1579
+.L1582:
+	ldrh	r3, [r4, #3202]
+	cmp	r3, r1
+	itt	eq
+	strheq	r2, [r4, #3202]	@ movhi
+	strheq	r3, [r4, #3204]	@ movhi
+	b	.L1583
+.L1593:
+	movs	r3, #64
+.L1696:
+	strh	r3, [r4, #3150]	@ movhi
+	b	.L1592
+.L1590:
 	movs	r3, #80
-	b	.L1617
-.L1584:
-	mov	r6, r0
-	b	.L1515
-.L1523:
+	b	.L1696
+.L1660:
+	mov	r5, r0
+.L1589:
+	ldr	r3, [r4, #2324]
+	mov	r6, r5
+	ldrh	r1, [r4, #3148]
+	ldrh	r2, [r4, #2344]
+	ldrh	r3, [r3, r5, lsl #1]
+	str	r1, [sp, #4]
+	ldr	r1, [r4, #2328]
+	ldr	r0, .L1701+8
+	ldrh	r1, [r1, r5, lsl #1]
+	str	r1, [sp]
+	mov	r1, r5
+	bl	sftl_printk
+	b	.L1592
+.L1597:
 	cmp	r3, #12
-	bls	.L1524
-	lsrs	r6, r6, #4
-	b	.L1522
-.L1524:
+	bls	.L1598
+	lsrs	r5, r5, #4
+	b	.L1596
+.L1598:
 	cmp	r3, #8
-	bls	.L1522
-	lsrs	r6, r6, #2
-	b	.L1522
-.L1585:
-	movs	r6, #1
-	b	.L1522
-.L1529:
+	bls	.L1596
+	lsrs	r5, r5, #2
+	b	.L1596
+.L1661:
+	movs	r5, #1
+	b	.L1596
+.L1603:
 	movs	r3, #18
-	b	.L1618
-.L1527:
+	b	.L1697
+.L1601:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r4, #3148]	@ movhi
-.L1526:
+.L1600:
 	ldrh	r3, [r4, #3206]
-	cbz	r3, .L1586
-	adds	r6, r6, #32
-	uxth	r6, r6
-.L1586:
-	movw	r5, #65535
-.L1532:
+	cbz	r3, .L1662
+	adds	r5, r5, #32
+	uxth	r5, r5
+.L1662:
+	movw	r6, #65535
+.L1606:
 	ldrh	r3, [r4, #2588]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1541
-	cmp	r5, r3
-	beq	.L1542
-	strh	r5, [r4, #2588]	@ movhi
-.L1543:
+	bne	.L1615
+	cmp	r6, r3
+	beq	.L1616
+	strh	r6, [r4, #2588]	@ movhi
+.L1617:
 	ldrh	r0, [r4, #2588]
 	movw	r7, #65535
 	movs	r3, #0
 	strb	r3, [r4, #2596]
 	cmp	r0, r7
-	beq	.L1541
+	beq	.L1615
 	bl	IsBlkInGcList
-	cbz	r0, .L1546
+	cbz	r0, .L1620
 	strh	r7, [r4, #2588]	@ movhi
-.L1546:
+.L1620:
 	ldrh	r2, [r4, #2588]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1541
-	ldr	r0, .L1624+16
+	beq	.L1615
+	ldr	r0, .L1701+12
 	bl	make_superblock
-	ldr	r2, .L1624+8
 	movs	r3, #0
+	ldrh	r2, [r4, #2588]
 	strh	r3, [r4, #2590]	@ movhi
 	strb	r3, [r4, #2594]
-	strh	r3, [r2, #-186]	@ movhi
-	ldrh	r1, [r4, #2588]
+	strh	r3, [r4, #3658]	@ movhi
 	ldr	r3, [r4, #2324]
-	ldrh	r3, [r3, r1, lsl #1]
-	strh	r3, [r2, #-184]	@ movhi
-.L1541:
+	ldrh	r3, [r3, r2, lsl #1]
+	strh	r3, [r4, #3660]	@ movhi
+.L1615:
 	ldrh	r3, [r4, #2588]
 	ldrh	r2, [r4, #2348]
 	cmp	r2, r3
-	beq	.L1547
+	beq	.L1621
 	ldrh	r2, [r4, #2396]
 	cmp	r2, r3
-	beq	.L1547
-	ldr	r7, .L1624+8
-.L1548:
-	ldrh	r9, [r4, #2588]
+	bne	.L1622
+.L1621:
 	movw	r3, #65535
-	cmp	r9, r3
-	bne	.L1549
+	strh	r3, [r4, #2588]	@ movhi
+.L1622:
+	ldr	r7, .L1701
+	mov	r4, r7
+.L1652:
+	ldrh	r10, [r7, #2588]
+	movw	r3, #65535
+	cmp	r10, r3
+	bne	.L1623
 	movs	r3, #0
-	mov	r10, r3
-	str	r3, [r4, #3160]
-.L1550:
+	mov	fp, r3
+	str	r3, [r7, #3160]
+.L1624:
 	ldrh	r8, [r4, #3156]
 	mov	r0, r8
 	bl	List_get_gc_head_node
-	uxth	fp, r0
-	cmp	fp, r9
-	strh	fp, [r4, #2588]	@ movhi
-	bne	.L1551
+	uxth	r2, r0
+	cmp	r2, r10
+	strh	r2, [r4, #2588]	@ movhi
+	bne	.L1625
 	movs	r3, #0
 	movs	r0, #8
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1505
-.L1533:
+	b	.L1579
+.L1607:
 	movs	r3, #0
-	ldrh	r7, [r4, #2344]
+	ldrh	r2, [r4, #2344]
 	str	r3, [r4, #3160]
 	ldrh	r3, [r4, #3148]
-	ldr	r5, .L1624+8
-	cmp	r3, r7
-	bcs	.L1534
-	ldrh	r3, [r5, #-188]
-	cbnz	r3, .L1535
+	cmp	r2, r3
+	bls	.L1608
+	ldrh	r3, [r4, #3656]
+	cbnz	r3, .L1609
 	ldr	r3, [r4, #2504]
 	ldr	r2, [r4, #2500]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L1536
-.L1535:
+	bcs	.L1610
+.L1609:
 	ldrh	r3, [r4, #2572]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-.L1619:
+.L1698:
 	strh	r3, [r4, #3148]	@ movhi
-.L1621:
 	bl	FtlReadRefresh
-	ldrh	r0, [r5, #-188]
-	b	.L1505
-.L1536:
+	movs	r0, #0
+	bl	List_get_gc_head_node
+	ldr	r3, [r4, #2324]
+	uxth	r0, r0
+	ldrh	r3, [r3, r0, lsl #1]
+	cmp	r3, #4
+	bls	.L1608
+.L1700:
+	ldrh	r0, [r4, #3656]
+	b	.L1579
+.L1610:
 	movs	r3, #18
-	b	.L1619
-.L1534:
-	ldrh	r0, [r5, #-188]
+	b	.L1698
+.L1608:
+	ldrh	r0, [r4, #3656]
 	cmp	r0, #0
-	bne	.L1538
-	ldrh	r6, [r4, #2572]
-	add	r3, r6, r6, lsl #1
+	bne	.L1612
+	ldrh	r5, [r4, #2572]
+	add	r3, r5, r5, lsl #1
 	asrs	r3, r3, #2
 	strh	r3, [r4, #3148]	@ movhi
 	bl	List_get_gc_head_node
@@ -10792,251 +11295,271 @@ rk_ftl_garbage_collect:
 	muls	r3, r1, r3
 	add	r3, r3, r3, lsr #31
 	cmp	r2, r3, asr #1
-	ble	.L1539
-	subs	r6, r6, #1
-	cmp	r7, r6
-	bge	.L1621
-.L1539:
+	ble	.L1613
+	ldrh	r3, [r4, #2344]
+	subs	r5, r5, #1
+	cmp	r3, r5
+	blt	.L1613
+	bl	FtlReadRefresh
+	b	.L1700
+.L1613:
 	cmp	r2, #0
-	bne	.L1538
+	bne	.L1612
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r0, [r4, #2344]
 	adds	r0, r0, #1
-	b	.L1505
-.L1542:
+	b	.L1579
+.L1702:
+	.align	2
+.L1701:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC113
+	.word	.LANCHOR0+2588
+.L1616:
 	ldrh	r3, [r4, #3202]
-	cmp	r3, r5
-	beq	.L1543
+	cmp	r3, r6
+	beq	.L1617
 	ldr	r2, [r4, #2324]
 	ldrh	r3, [r2, r3, lsl #1]
-	cbnz	r3, .L1544
-	strh	r5, [r4, #3202]	@ movhi
-.L1544:
+	cbnz	r3, .L1618
+	strh	r6, [r4, #3202]	@ movhi
+.L1618:
 	ldrh	r3, [r4, #3202]
 	strh	r3, [r4, #2588]	@ movhi
 	movw	r3, #65535
 	strh	r3, [r4, #3202]	@ movhi
-	b	.L1543
+	b	.L1617
 .L1625:
-	.align	2
-.L1624:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LANCHOR3
-	.word	.LC104
-	.word	.LANCHOR0+2588
-.L1547:
-	movw	r3, #65535
-	strh	r3, [r4, #2588]	@ movhi
-.L1622:
-	ldr	r3, .L1626
-	ldrh	r0, [r3, #-188]
-	b	.L1505
-.L1551:
-	str	r0, [sp, #8]
-	mov	r0, fp
-	bl	IsBlkInGcList
+	str	r0, [sp, #16]
+	mov	r0, r2
+	str	r2, [sp, #12]
 	add	r8, r8, #1
-	ldr	r3, [sp, #8]
-	cbz	r0, .L1552
+	bl	IsBlkInGcList
+	ldr	r2, [sp, #12]
+	ldr	r3, [sp, #16]
+	cbz	r0, .L1626
 	strh	r8, [r4, #3156]	@ movhi
-	b	.L1550
-.L1552:
-	uxth	r0, r3
-	ldrh	ip, [r4, #32]
-	ldrh	r3, [r4, #102]
+	b	.L1624
+.L1626:
+	ldrh	lr, [r4, #32]
 	uxth	r8, r8
-	ldr	r2, [r4, #2324]
+	ldrh	r1, [r4, #102]
+	uxth	r3, r3
+	ldr	r0, [r4, #2324]
 	strh	r8, [r4, #3156]	@ movhi
-	mul	r3, ip, r3
-	ldrh	r1, [r2, r0, lsl #1]
-	add	ip, r3, r3, lsr #31
-	cmp	r1, ip, asr #1
-	bgt	.L1554
+	mul	r1, lr, r1
+	ldrh	ip, [r0, r3, lsl #1]
+	add	lr, r1, r1, lsr #31
+	cmp	ip, lr, asr #1
+	bgt	.L1628
 	cmp	r8, #48
-	bls	.L1555
-	cmp	r1, #8
-	bls	.L1555
-	ldrh	r1, [r4, #3192]
-	cmp	r1, #35
-	bhi	.L1555
-.L1554:
-	strh	r10, [r4, #3156]	@ movhi
-.L1555:
-	ldrh	r2, [r2, r0, lsl #1]
-	cmp	r3, r2
-	bgt	.L1556
-	cmp	r5, r9
-	bne	.L1556
+	bls	.L1629
+	cmp	ip, #8
+	bls	.L1629
+	ldrh	ip, [r4, #3192]
+	cmp	ip, #35
+	bhi	.L1629
+.L1628:
+	strh	fp, [r4, #3156]	@ movhi
+.L1629:
+	ldrh	r3, [r0, r3, lsl #1]
+	cmp	r1, r3
+	bgt	.L1630
+	cmp	r6, r10
+	bne	.L1630
+	ldrh	r1, [r4, #3156]
+	cmp	r1, #3
+	bhi	.L1630
 	movs	r3, #0
-	strh	r5, [r4, #2588]	@ movhi
+	strh	r6, [r4, #2588]	@ movhi
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1622
-.L1556:
-	cbnz	r2, .L1557
+	b	.L1700
+.L1630:
+	cbnz	r3, .L1631
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrh	r3, [r4, #3156]
 	adds	r3, r3, #1
 	strh	r3, [r4, #3156]	@ movhi
-	b	.L1550
-.L1557:
+	b	.L1624
+.L1631:
 	movs	r3, #0
 	strb	r3, [r4, #2596]
 	ldrh	r3, [r4, #2348]
-	cmp	r3, fp
-	bne	.L1558
-	movw	r2, #658
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
-	bl	printk
-.L1558:
+	cmp	r3, r2
+	bne	.L1632
+	mov	r2, #700
+	ldr	r1, .L1703
+	ldr	r0, .L1703+4
+	bl	sftl_printk
+.L1632:
 	ldrh	r2, [r4, #2588]
 	ldrh	r3, [r4, #2396]
 	cmp	r2, r3
-	bne	.L1559
-	movw	r2, #659
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
-	bl	printk
-.L1559:
+	bne	.L1633
+	movw	r2, #701
+	ldr	r1, .L1703
+	ldr	r0, .L1703+4
+	bl	sftl_printk
+.L1633:
 	ldrh	r2, [r4, #2588]
 	ldrh	r3, [r4, #2444]
 	cmp	r2, r3
-	bne	.L1560
-	mov	r2, #660
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
-	bl	printk
-.L1560:
-	ldr	r0, .L1626+12
+	bne	.L1634
+	movw	r2, #702
+	ldr	r1, .L1703
+	ldr	r0, .L1703+4
+	bl	sftl_printk
+.L1634:
+	ldr	r0, .L1703+8
 	bl	make_superblock
 	ldrh	r1, [r4, #2588]
 	movs	r3, #0
 	ldr	r2, [r4, #2324]
-	strh	r3, [r7, #-186]	@ movhi
+	strh	r3, [r4, #3658]	@ movhi
 	ldrh	r2, [r2, r1, lsl #1]
 	strh	r3, [r4, #2590]	@ movhi
 	strb	r3, [r4, #2594]
-	strh	r2, [r7, #-184]	@ movhi
-.L1549:
-	bl	FtlReadRefresh
+	strh	r2, [r4, #3660]	@ movhi
+.L1623:
 	movs	r3, #1
-	str	r3, [r4, #3820]
+	str	r3, [r4, #3264]
 	ldrh	r3, [r4, #102]
-	str	r3, [sp, #12]
+	str	r3, [sp, #16]
+	cmp	r9, #0
+	beq	.L1635
+	ldr	r2, [sp, #16]
+	ldrh	r3, [r4, #32]
+	ldrh	r1, [r4, #2588]
+	muls	r3, r2, r3
+	ldr	r2, [r4, #2324]
+	ldrh	r2, [r2, r1, lsl #1]
+	subs	r3, r3, r2
+	it	mi
+	addmi	r3, r3, #3
+	add	r5, r5, r3, asr #2
+	uxth	r5, r5
+.L1635:
 	ldrh	r3, [r4, #2590]
-	ldr	r1, [sp, #12]
-	adds	r2, r3, r6
+	ldr	r1, [sp, #16]
+	adds	r2, r3, r5
 	cmp	r2, r1
 	itt	gt
 	movgt	r2, r1
-	subgt	r6, r2, r3
+	subgt	r5, r2, r3
 	mov	r3, #0
 	it	gt
-	uxthgt	r6, r6
-.L1620:
-	str	r3, [sp, #8]
-	ldrh	r3, [sp, #8]
-	cmp	r6, r3
-	bls	.L1570
-	ldr	r3, [sp, #8]
+	uxthgt	r5, r5
+.L1699:
+	str	r3, [sp, #20]
+	ldrh	r3, [sp, #20]
+	cmp	r5, r3
+	bls	.L1646
+	ldr	r3, [sp, #20]
 	movw	r10, #65535
-	ldrh	r1, [r4, #2590]
+	ldrh	r8, [r7, #2590]
 	mov	fp, #20
-	ldrh	lr, [r4, #32]
-	ldr	r0, [r4, #3180]
-	add	r1, r1, r3
+	ldrh	ip, [r7, #32]
+	ldr	r0, [r7, #3180]
+	add	r8, r8, r3
+	ldr	r3, .L1703+12
+	str	r3, [sp, #24]
 	movs	r3, #0
-	ldr	ip, .L1626+16
-	mov	r8, r3
-	b	.L1571
-.L1564:
-	ldrh	r2, [ip, #2]!
+	str	r3, [sp, #12]
+	b	.L1647
+.L1640:
+	ldr	r1, [sp, #24]
+	ldrh	r2, [r1, #2]!
 	cmp	r2, r10
-	beq	.L1563
-	mla	r9, fp, r8, r0
-	add	r8, r8, #1
-	orr	r2, r1, r2, lsl #10
-	uxth	r8, r8
-	str	r2, [r9, #4]
-.L1563:
+	str	r1, [sp, #24]
+	beq	.L1639
+	ldr	r1, [sp, #12]
+	orr	r2, r8, r2, lsl #10
+	mla	lr, fp, r1, r0
+	str	r2, [lr, #4]
+	mov	r2, r1
+	adds	r2, r2, #1
+	uxth	r2, r2
+	str	r2, [sp, #12]
+.L1639:
 	adds	r3, r3, #1
-.L1571:
+.L1647:
 	uxth	r2, r3
-	cmp	lr, r2
-	bhi	.L1564
+	cmp	ip, r2
+	bhi	.L1640
 	mov	fp, #0
-	ldrb	r2, [r4, #2596]	@ zero_extendqisi2
-	mov	r1, r8
+	ldrb	r2, [r7, #2596]	@ zero_extendqisi2
+	ldr	r1, [sp, #12]
 	bl	FlashReadPages
-.L1565:
+.L1641:
+	ldr	r2, [sp, #12]
 	uxth	r3, fp
-	cmp	r8, r3
-	bhi	.L1569
-	ldr	r3, [sp, #8]
+	cmp	r2, r3
+	bhi	.L1645
+	ldr	r3, [sp, #20]
 	adds	r3, r3, #1
-	b	.L1620
-.L1569:
-	mov	r9, #20
-	ldr	r3, [r4, #3180]
-	mul	r9, r9, fp
-	add	r2, r3, r9
-	ldr	r3, [r3, r9]
+	b	.L1699
+.L1645:
+	mov	r8, #20
+	ldr	r3, [r7, #3180]
+	mul	r8, r8, fp
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
 	adds	r3, r3, #1
-	beq	.L1566
+	beq	.L1642
 	ldr	r10, [r2, #12]
 	movw	r3, #61589
 	ldrh	r2, [r10]
 	cmp	r2, r3
-	bne	.L1566
+	bne	.L1642
 	ldr	r3, [r10, #8]
 	adds	r2, r3, #1
-	bne	.L1567
-	mov	r2, #696
-	ldr	r1, .L1626+4
-	ldr	r0, .L1626+8
-	str	r3, [sp, #16]
-	bl	printk
-	ldr	r3, [sp, #16]
-.L1567:
+	bne	.L1643
+	mov	r2, #736
+	ldr	r1, .L1703
+	ldr	r0, .L1703+4
+	str	r3, [sp, #24]
+	bl	sftl_printk
+	ldr	r3, [sp, #24]
+.L1643:
 	movs	r2, #0
 	mov	r0, r3
-	add	r1, sp, #28
+	add	r1, sp, #36
 	bl	log2phys
 	ldr	r0, [r4, #3180]
-	ldr	r3, [sp, #28]
-	add	r0, r0, r9
+	ldr	r3, [sp, #36]
+	add	r0, r0, r8
 	ldr	r2, [r0, #4]
 	cmp	r2, r3
-	bne	.L1566
-	ldrh	r3, [r7, #-186]
+	bne	.L1642
+	ldrh	r3, [r4, #3658]
 	movs	r2, #20
 	ldr	r1, [r4, #3164]
-	str	r2, [sp, #20]
+	str	r2, [sp, #28]
 	adds	r3, r3, #1
-	strh	r3, [r7, #-186]	@ movhi
-	ldr	r3, [r4, #3836]
+	strh	r3, [r4, #3658]	@ movhi
+	ldr	r3, [r4, #3284]
 	mla	r3, r2, r1, r3
 	ldr	r1, [r0, #16]
 	str	r1, [r3, #16]
-	str	r3, [sp, #16]
+	str	r3, [sp, #24]
 	bl	Ftl_get_new_temp_ppa
-	ldr	r3, [sp, #16]
-	ldr	r1, [r4, #3836]
-	ldr	r2, [sp, #20]
+	ldr	r3, [sp, #24]
+	ldr	r1, [r4, #3284]
+	ldr	r2, [sp, #28]
 	str	r0, [r3, #4]
 	ldr	r3, [r4, #3164]
 	mla	r3, r2, r3, r1
 	ldr	r2, [r4, #3180]
-	add	r2, r2, r9
+	add	r2, r2, r8
 	ldr	r1, [r2, #8]
 	str	r1, [r3, #8]
 	movs	r1, #1
 	ldr	r2, [r2, #12]
 	str	r2, [r3, #12]
-	ldr	r3, [sp, #28]
+	ldr	r3, [sp, #36]
 	str	r3, [r10, #12]
 	ldrh	r3, [r4, #2444]
 	strh	r3, [r10, #2]	@ movhi
@@ -11044,120 +11567,171 @@ rk_ftl_garbage_collect:
 	ldr	r0, [r4, #3180]
 	str	r3, [r10, #4]
 	ldr	r3, [r4, #3164]
-	add	r0, r0, r9
+	add	r0, r0, r8
 	adds	r3, r3, #1
 	str	r3, [r4, #3164]
 	bl	FtlGcBufAlloc
 	ldrb	r2, [r4, #2451]	@ zero_extendqisi2
 	ldr	r3, [r4, #3164]
 	cmp	r2, r3
-	beq	.L1568
+	beq	.L1644
 	ldrh	r3, [r4, #2448]
-	cbnz	r3, .L1566
-.L1568:
+	cbnz	r3, .L1642
+.L1644:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L1566
-.L1623:
-	movs	r3, #0
-	ldrh	r0, [r7, #-188]
-	str	r3, [r4, #3820]
-	b	.L1505
-.L1566:
+	cbz	r0, .L1642
+	ldr	r3, .L1703+16
+	movs	r2, #0
+	str	r2, [r3, #3264]
+	ldrh	r0, [r3, #3656]
+	b	.L1579
+.L1642:
 	add	fp, fp, #1
-	b	.L1565
-.L1570:
-	ldrh	r3, [r4, #2590]
-	add	r6, r6, r3
-	ldr	r3, [sp, #12]
-	uxth	r6, r6
-	cmp	r3, r6
-	strh	r6, [r4, #2590]	@ movhi
-	bls	.L1572
-	ldrh	r2, [r7, #-186]
-	ldrh	r3, [r7, #-184]
-	cmp	r2, r3
-	bne	.L1573
-.L1572:
-	ldr	r3, [r4, #3164]
-	cbz	r3, .L1574
+	b	.L1641
+.L1646:
+	ldrh	r3, [r7, #2590]
+	add	r5, r5, r3
+	ldr	r3, [sp, #16]
+	uxth	r5, r5
+	cmp	r3, r5
+	strh	r5, [r7, #2590]	@ movhi
+	bhi	.L1648
+	ldr	r3, [r7, #3164]
+	cbz	r3, .L1649
 	bl	Ftl_gc_temp_data_write_back
-	cmp	r0, #0
-	bne	.L1623
-.L1574:
-	ldrh	r1, [r7, #-186]
-	cbnz	r1, .L1575
-	ldrh	r2, [r4, #2588]
-	ldr	r3, [r4, #2324]
+	cbz	r0, .L1649
+	movs	r3, #0
+	ldrh	r0, [r7, #3656]
+	str	r3, [r7, #3264]
+	b	.L1579
+.L1649:
+	ldrh	r1, [r7, #3658]
+	cbnz	r1, .L1650
+	ldrh	r2, [r7, #2588]
+	ldr	r3, [r7, #2324]
 	ldrh	r0, [r3, r2, lsl #1]
-	cbz	r0, .L1575
+	cbz	r0, .L1650
 	strh	r1, [r3, r2, lsl #1]	@ movhi
-	ldrh	r0, [r4, #2588]
+	ldrh	r0, [r7, #2588]
 	bl	update_vpc_list
-	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1575:
+.L1650:
 	movw	r3, #65535
-	strh	r3, [r4, #2588]	@ movhi
-.L1573:
-	ldrh	r3, [r4, #2344]
+	strh	r3, [r7, #2588]	@ movhi
+.L1648:
+	movs	r3, #0
+	str	r3, [r7, #3264]
+	ldrh	r3, [r7, #2344]
 	cmp	r3, #2
-	bhi	.L1576
-	ldrh	r6, [r4, #102]
-	b	.L1548
-.L1576:
-	ldrh	r0, [r7, #-188]
-	movs	r2, #0
-	str	r2, [r4, #3820]
+	bhi	.L1651
+	ldrh	r5, [r7, #102]
+	b	.L1652
+.L1651:
+	ldrh	r0, [r7, #3656]
 	cmp	r0, #0
-	bne	.L1505
+	bne	.L1579
 	adds	r0, r3, #1
-	b	.L1505
-.L1580:
+	b	.L1579
+.L1656:
 	movs	r0, #0
-	b	.L1505
-.L1627:
-	.align	2
-.L1626:
-	.word	.LANCHOR3
-	.word	.LANCHOR1+551
-	.word	.LC1
-	.word	.LANCHOR0+2588
-	.word	.LANCHOR0+2602
-.L1511:
-	cmp	r7, #0
-	beq	.L1578
-.L1521:
+	b	.L1579
+.L1585:
+	cmp	r9, #0
+	beq	.L1654
+.L1595:
 	ldrh	r2, [r4, #2444]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1589
-.L1579:
+	bne	.L1665
+.L1655:
 	ldrh	r3, [r4, #3202]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1589
-	cmp	r5, r3
-	bne	.L1589
+	bne	.L1665
+	cmp	r6, r3
+	bne	.L1665
 	ldrh	r3, [r4, #2588]
-	cmp	r3, r5
-	beq	.L1533
-.L1538:
-	movw	r5, #65535
-.L1589:
-	movs	r6, #1
-	b	.L1532
-.L1513:
-	cmp	r7, #0
-	beq	.L1578
-	movw	r5, #65535
-	b	.L1579
-.L1512:
-	cmp	r7, #0
-	bne	.L1538
-	b	.L1578
+	cmp	r3, r6
+	beq	.L1607
+.L1612:
+	movw	r6, #65535
+.L1665:
+	movs	r5, #1
+	b	.L1606
+.L1587:
+	cmp	r9, #0
+	beq	.L1654
+	movw	r6, #65535
+	b	.L1655
+.L1586:
+	cmp	r9, #0
+	bne	.L1612
+	b	.L1654
+.L1704:
+	.align	2
+.L1703:
+	.word	.LANCHOR1+583
+	.word	.LC1
+	.word	.LANCHOR0+2588
+	.word	.LANCHOR0+2602
+	.word	.LANCHOR0
+	.fnend
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	1
+	.global	sftl_init
+	.syntax unified
+	.thumb
+	.thumb_func
+	.fpu softvfp
+	.type	sftl_init, %function
+sftl_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r3, #-1
+	ldr	r4, .L1711
+	ldr	r5, .L1711+4
+	ldr	r1, .L1711+8
+	ldr	r0, .L1711+12
+	str	r3, [r5]
+	bl	sftl_printk
+	mov	r0, r4
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	r0, [r4, #36]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbnz	r0, .L1709
+	bl	FtlSysBlkInit
+	cbnz	r0, .L1709
+	movs	r3, #1
+	str	r3, [r5]
+	ldrh	r3, [r4, #2344]
+	cmp	r3, #15
+	bhi	.L1709
+	movw	r4, #8129
+.L1708:
+	movs	r1, #1
+	movs	r0, #0
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L1708
+.L1709:
+	movs	r0, #0
+	pop	{r3, r4, r5, pc}
+.L1712:
+	.align	2
+.L1711:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC70
+	.word	.LC71
 	.fnend
-	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.size	sftl_init, .-sftl_init
 	.align	1
 	.global	sftl_gc
 	.syntax unified
@@ -11193,32 +11767,31 @@ FtlRead:
 	sub	sp, sp, #60
 	mov	r7, r1
 	mov	r10, r3
-	str	r2, [sp, #28]
-	bne	.L1630
+	str	r2, [sp, #20]
+	bne	.L1715
 	mov	r2, r3
-	ldr	r1, [sp, #28]
+	ldr	r1, [sp, #20]
 	add	r0, r7, #256
 	bl	FtlVendorPartRead
 	mov	r8, r0
-.L1629:
+.L1714:
 	mov	r0, r8
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1630:
-	ldr	r3, [sp, #28]
-	ldr	r4, .L1661
+.L1715:
+	ldr	r3, [sp, #20]
+	ldr	r4, .L1747
 	adds	r3, r1, r3
 	str	r3, [sp, #8]
 	ldr	r2, [sp, #8]
 	ldr	r3, [r4, #140]
 	cmp	r2, r3
-	bhi	.L1650
-	ldr	r3, .L1661+4
+	bhi	.L1736
+	ldr	r3, .L1747+4
 	ldr	r3, [r3]
 	adds	r5, r3, #1
-	beq	.L1651
-	bl	FtlCacheWriteBack
+	beq	.L1737
 	ldrh	r5, [r4, #58]
 	mov	r0, r7
 	mov	r9, #0
@@ -11232,191 +11805,203 @@ FtlRead:
 	subs	r0, r3, #1
 	bl	__aeabi_uidiv
 	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #20]
 	ldr	r5, [sp, #12]
-	str	r0, [sp, #16]
 	rsb	r3, r3, #1
-	str	r9, [sp, #24]
+	str	r0, [sp, #16]
 	add	r3, r3, r0
-	str	r9, [sp, #20]
+	str	r9, [sp, #28]
 	str	r3, [sp, #4]
+	ldr	r3, [r4, #2536]
+	str	r9, [sp, #24]
+	add	r3, r3, r2
 	ldr	r2, [sp, #4]
+	str	r3, [r4, #2536]
 	ldr	r3, [r4, #2508]
 	add	r3, r3, r2
 	str	r3, [r4, #2508]
-.L1632:
+.L1717:
 	ldr	r3, [sp, #4]
-	cbnz	r3, .L1648
-	ldr	r3, .L1661
+	cbnz	r3, .L1734
+	ldr	r3, .L1747
 	ldrh	r2, [r3, #3206]
-	cbnz	r2, .L1649
+	cbnz	r2, .L1735
 	ldrh	r3, [r3, #2344]
 	cmp	r3, #31
-	bhi	.L1629
-.L1649:
+	bhi	.L1714
+.L1735:
 	movs	r1, #1
 	movs	r0, #0
 	bl	rk_ftl_garbage_collect
-	b	.L1629
-.L1648:
+	b	.L1714
+.L1734:
 	movs	r2, #0
 	add	r1, sp, #52
 	mov	r0, r5
 	bl	log2phys
 	ldr	r2, [sp, #52]
 	adds	r0, r2, #1
-	bne	.L1633
+	bne	.L1718
 	mov	fp, #0
-.L1634:
+.L1719:
 	ldrh	r0, [r4, #58]
 	cmp	fp, r0
-	bcc	.L1636
-.L1637:
+	bcc	.L1721
+.L1722:
 	ldr	r3, [sp, #4]
 	adds	r5, r5, #1
 	subs	r3, r3, #1
 	str	r3, [sp, #4]
-	beq	.L1641
+	beq	.L1726
 	ldrh	r3, [r4, #32]
 	cmp	r6, r3, lsl #2
-	bne	.L1632
-.L1641:
+	bne	.L1717
+.L1726:
 	cmp	r6, #0
-	beq	.L1632
+	beq	.L1717
 	movs	r2, #0
 	mov	r1, r6
-	ldr	r0, [r4, #3832]
+	ldr	r0, [r4, #3280]
 	mov	fp, #0
 	bl	FlashReadPages
 	lsl	r3, r9, #9
 	str	r3, [sp, #40]
-	ldr	r3, [sp, #20]
+	ldr	r3, [sp, #24]
 	lsls	r3, r3, #9
 	str	r3, [sp, #32]
-	ldr	r3, [sp, #24]
+	ldr	r3, [sp, #28]
 	lsls	r3, r3, #9
 	str	r3, [sp, #36]
-.L1647:
+.L1733:
 	movs	r3, #20
-	ldr	r2, [r4, #3832]
+	ldr	r2, [r4, #3280]
 	mul	r3, r3, fp
 	ldr	r0, [sp, #12]
 	add	r2, r2, r3
 	ldr	r1, [r2, #16]
 	cmp	r0, r1
-	bne	.L1643
+	bne	.L1728
 	ldr	r1, [r2, #8]
-	ldr	r2, [r4, #3816]
+	ldr	r2, [r4, #3304]
 	cmp	r1, r2
-	bne	.L1644
+	bne	.L1729
 	str	r3, [sp, #44]
 	mov	r0, r10
 	ldr	r3, [sp, #32]
 	ldr	r2, [sp, #36]
 	add	r1, r1, r3
-.L1660:
+.L1746:
 	bl	ftl_memcpy
 	ldr	r3, [sp, #44]
-.L1644:
-	ldr	r2, [r4, #3832]
-	ldr	r0, [r2, r3]
-	add	ip, r2, r3
+.L1729:
+	ldr	ip, [r4, #3280]
+	add	r2, ip, r3
+	ldr	r0, [r2, #12]
+	ldr	r1, [r2, #16]
+	ldr	r0, [r0, #8]
+	cmp	r1, r0
+	ittt	ne
+	ldrne	r1, [r4, #2708]
+	addne	r1, r1, #1
+	strne	r1, [r4, #2708]
+	ldr	r0, [ip, r3]
 	adds	r1, r0, #1
 	itttt	eq
 	ldreq	r1, [r4, #2708]
 	moveq	r8, r0
 	addeq	r1, r1, #1
 	streq	r1, [r4, #2708]
-	ldr	r3, [r2, r3]
+	ldr	r3, [ip, r3]
 	cmp	r3, #256
-	bne	.L1646
-	ldr	r0, [ip, #4]
+	bne	.L1732
+	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1646:
+.L1732:
 	add	fp, fp, #1
 	cmp	r6, fp
-	bne	.L1647
+	bne	.L1733
 	movs	r6, #0
-	b	.L1632
-.L1636:
+	b	.L1717
+.L1721:
 	mla	r0, r0, r5, fp
 	cmp	r7, r0
-	bhi	.L1635
+	bhi	.L1720
 	ldr	r3, [sp, #8]
 	cmp	r3, r0
-	bls	.L1635
+	bls	.L1720
 	subs	r0, r0, r7
 	mov	r1, #512
 	add	r0, r10, r0, lsl #9
 	bl	__memzero
-.L1635:
+.L1720:
 	add	fp, fp, #1
-	b	.L1634
-.L1633:
-	ldr	r3, [r4, #3832]
+	b	.L1719
+.L1718:
+	ldr	r3, [r4, #3280]
 	movs	r1, #20
 	ldrh	fp, [r4, #58]
 	mla	r3, r1, r6, r3
 	str	r2, [r3, #4]
 	ldr	r2, [sp, #12]
 	cmp	r5, r2
-	bne	.L1638
-	ldr	r2, [r4, #3816]
+	bne	.L1723
+	ldr	r2, [r4, #3304]
 	mov	r1, fp
 	mov	r0, r7
 	str	r3, [sp, #32]
 	str	r2, [r3, #8]
 	bl	__aeabi_uidivmod
 	sub	r2, fp, r1
-	str	r1, [sp, #20]
-	ldr	r1, [sp, #28]
+	str	r1, [sp, #24]
+	ldr	r1, [sp, #20]
 	mov	r3, r2
 	cmp	r2, r1
 	it	cs
 	movcs	r3, r1
 	cmp	r3, fp
-	str	r3, [sp, #24]
+	str	r3, [sp, #28]
 	ldr	r3, [sp, #32]
-	bne	.L1639
+	bne	.L1724
 	str	r10, [r3, #8]
-.L1639:
+.L1724:
 	ldrh	r2, [r4, #112]
-	ldr	r1, [r4, #3812]
+	ldr	r1, [r4, #3328]
 	str	r5, [r3, #16]
 	muls	r2, r6, r2
 	adds	r6, r6, #1
 	bic	r2, r2, #3
 	add	r2, r2, r1
 	str	r2, [r3, #12]
-	b	.L1637
-.L1638:
+	b	.L1722
+.L1723:
 	ldr	r2, [sp, #16]
 	cmp	r5, r2
-	bne	.L1640
-	ldr	r2, [r4, #3808]
+	bne	.L1725
+	ldr	r2, [r4, #3308]
 	ldr	r1, [sp, #8]
 	str	r2, [r3, #8]
 	mul	r2, fp, r5
 	sub	r9, r1, r2
 	cmp	fp, r9
-	bne	.L1639
-.L1659:
+	bne	.L1724
+.L1745:
 	subs	r2, r2, r7
 	add	r2, r10, r2, lsl #9
 	str	r2, [r3, #8]
-	b	.L1639
-.L1640:
+	b	.L1724
+.L1725:
 	mul	r2, r5, fp
-	b	.L1659
-.L1643:
+	b	.L1745
+.L1728:
 	ldr	r0, [sp, #16]
 	cmp	r0, r1
-	bne	.L1644
+	bne	.L1729
 	ldr	r1, [r2, #8]
-	ldr	r2, [r4, #3808]
+	ldr	r2, [r4, #3308]
 	cmp	r1, r2
-	bne	.L1644
+	bne	.L1729
 	str	r3, [sp, #44]
 	ldrh	r0, [r4, #58]
 	ldr	r3, [sp, #16]
@@ -11424,16 +12009,16 @@ FtlRead:
 	muls	r0, r3, r0
 	subs	r0, r0, r7
 	add	r0, r10, r0, lsl #9
-	b	.L1660
-.L1650:
+	b	.L1746
+.L1736:
 	mov	r8, #-1
-	b	.L1629
-.L1651:
+	b	.L1714
+.L1737:
 	mov	r8, r3
-	b	.L1629
-.L1662:
+	b	.L1714
+.L1748:
 	.align	2
-.L1661:
+.L1747:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -11473,117 +12058,123 @@ FtlWrite:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #68
 	sub	sp, sp, #68
-	mov	r8, r1
+	mov	r10, r1
 	str	r2, [sp, #12]
-	str	r3, [sp, #4]
-	bne	.L1665
+	str	r3, [sp, #8]
+	bne	.L1751
 	mov	r2, r3
 	ldr	r1, [sp, #12]
-	add	r0, r8, #256
+	add	r0, r10, #256
 	bl	FtlVendorPartWrite
-.L1664:
+.L1750:
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1665:
+.L1751:
 	ldr	r3, [sp, #12]
-	ldr	r4, .L1731
-	adds	r7, r1, r3
-	ldr	r3, [r4, #140]
-	cmp	r7, r3
-	bhi	.L1707
-	ldr	r6, .L1731+4
-	ldr	r0, [r6]
-	adds	r5, r0, #1
-	beq	.L1664
-	ldr	r3, .L1731+8
-	mov	r2, #2048
-	ldrh	r5, [r4, #58]
-	mov	r0, r8
-	str	r2, [r3, #-180]
-	mov	r1, r5
+	ldr	r5, .L1802
+	adds	r6, r1, r3
+	ldr	r3, [r5, #140]
+	cmp	r6, r3
+	bhi	.L1788
+	ldr	r4, .L1802+4
+	ldr	r0, [r4]
+	adds	r7, r0, #1
+	beq	.L1750
+	ldrh	r7, [r5, #58]
+	mov	r3, #2048
+	str	r3, [r5, #3664]
+	mov	r0, r10
+	mov	r1, r7
 	bl	__aeabi_uidiv
-	mov	r1, r5
-	mov	r10, r0
-	subs	r0, r7, #1
+	mov	r1, r7
+	str	r0, [sp, #4]
+	subs	r0, r6, #1
 	bl	__aeabi_uidiv
-	sub	r7, r0, r10
-	ldr	fp, [r4, #3988]
-	adds	r3, r7, #1
-	adds	r2, r7, #1
-	str	r3, [sp, #8]
-	ldr	r3, [r4, #2516]
+	ldr	r2, [sp, #4]
 	str	r0, [sp, #20]
+	subs	r3, r0, r2
+	ldr	r2, [sp, #12]
+	str	r3, [sp, #24]
+	adds	r3, r3, #1
+	str	r3, [sp]
+	ldr	r3, [r5, #2532]
 	add	r3, r3, r2
-	str	r3, [r4, #2516]
-	cmp	fp, #0
-	beq	.L1667
-	ldr	r3, [fp, #16]
-	cmp	r10, r3
-	beq	.L1668
-	bl	FtlCacheWriteBack
-.L1667:
-	ldr	r3, [r6, #8]
-	cmp	r3, #0
-	beq	.L1709
-	ldr	r5, .L1731+12
-	ldrh	r2, [r4, #2352]
-	add	r3, r5, #48
+	ldr	r2, [sp]
+	str	r3, [r5, #2532]
+	ldr	r3, [r5, #2516]
+	add	r3, r3, r2
+	str	r3, [r5, #2516]
+	ldr	r3, [r4, #8]
+	cbz	r3, .L1790
+	ldrh	r2, [r5, #2352]
+	addw	r3, r5, #2348
+	addw	r5, r5, #2396
 	cmp	r2, #0
-	it	eq
-	moveq	r5, r3
-.L1670:
-	ldr	r4, .L1731
-	mov	r6, r10
-.L1671:
-	ldr	r3, [sp, #8]
-	cmp	r3, #0
-	beq	.L1705
+	it	ne
+	movne	r5, r3
+.L1753:
+	ldr	r7, [sp, #4]
+	ldr	r4, .L1802
+.L1754:
+	ldr	r3, [sp]
+	cbnz	r3, .L1783
+	mov	r0, r3
+	ldr	r1, [sp, #24]
+	bl	rk_ftl_garbage_collect
+	ldrh	r3, [r4, #2344]
+	cmp	r3, #5
+	bls	.L1784
+.L1786:
+	movs	r0, #0
+	b	.L1750
+.L1790:
+	addw	r5, r5, #2348
+	b	.L1753
+.L1783:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #32]
 	cmp	r2, r3
-	bcc	.L1672
-	mov	r2, #1012
-	ldr	r1, .L1731+16
-	ldr	r0, .L1731+20
-	bl	printk
-.L1672:
-	ldrh	r9, [r5, #4]
-	cmp	r9, #0
-	bne	.L1673
-	bl	FtlCacheWriteBack
-	ldr	r3, .L1731+12
-	ldr	r7, .L1731+4
+	bcc	.L1755
+	movw	r2, #1011
+	ldr	r1, .L1802+8
+	ldr	r0, .L1802+12
+	bl	sftl_printk
+.L1755:
+	ldrh	r2, [r5, #4]
+	cbnz	r2, .L1756
+	ldr	r3, .L1802+16
+	ldr	r6, .L1802+4
 	cmp	r5, r3
-	bne	.L1674
-	ldrh	r9, [r4, #2400]
-	cmp	r9, #0
-	bne	.L1675
+	bne	.L1757
+	ldrh	r8, [r4, #2400]
+	cmp	r8, #0
+	bne	.L1758
 	add	r0, r5, #48
 	bl	allocate_new_data_superblock
-	str	r9, [r7, #8]
-.L1675:
-	ldr	r5, .L1731+12
-	ldr	r0, .L1731+12
+	str	r8, [r6, #8]
+.L1758:
+	ldr	r5, .L1802+16
+	ldr	r0, .L1802+16
 	bl	allocate_new_data_superblock
-	ldr	r2, [r7, #8]
+	ldr	r2, [r6, #8]
 	add	r3, r5, #48
 	cmp	r2, #0
 	it	ne
 	movne	r5, r3
-.L1676:
+.L1759:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L1673
+	cbnz	r3, .L1756
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L1673:
-	ldrb	r2, [r5, #7]	@ zero_extendqisi2
-	ldrh	r3, [r5, #4]
-	ldr	r1, [sp, #8]
-	lsls	r2, r2, #2
-	cmp	r3, r1
+.L1756:
+	ldrh	r2, [r5, #4]
+	ldr	r3, [sp]
+	cmp	r2, r3
 	it	cs
-	movcs	r3, r1
+	movcs	r2, r3
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	lsls	r3, r3, #2
 	cmp	r2, r3
 	it	cs
 	movcs	r2, r3
@@ -11591,241 +12182,162 @@ FtlWrite:
 	str	r2, [sp, #36]
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	cmp	r2, r3
-	bcc	.L1677
-	movw	r2, #1045
-	ldr	r1, .L1731+16
-	ldr	r0, .L1731+20
-	bl	printk
-.L1677:
-	mov	r9, #0
-.L1678:
+	bcc	.L1760
+	movw	r2, #1044
+	ldr	r1, .L1802+8
+	ldr	r0, .L1802+12
+	bl	sftl_printk
+.L1760:
+	mov	fp, #0
+.L1761:
 	ldr	r3, [sp, #36]
-	cmp	r9, r3
-	bne	.L1699
-.L1679:
-	ldr	r3, [r4, #3988]
-	cmp	r3, #0
-	beq	.L1700
-	ldr	r3, [sp, #8]
-	subs	r9, r9, #1
-	add	r3, r3, #-1
-	str	r3, [sp, #8]
-	bne	.L1700
-.L1705:
-	ldr	r3, [sp, #20]
-	movs	r0, #0
-	ldr	r4, .L1731
-	sub	r1, r3, r10
-	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r4, #2344]
-	cmp	r3, #15
-	bhi	.L1702
-	movw	r5, #65535
-.L1726:
-	ldrh	r3, [r4, #2588]
-	cmp	r3, r5
-	bne	.L1706
-	ldrh	r3, [r4, #3202]
-	cmp	r3, r5
-	bne	.L1706
-	movs	r0, #0
-	bl	List_get_gc_head_node
-	uxth	r0, r0
-	bl	FtlGcRefreshBlock
-.L1706:
-	movs	r1, #1
-	movs	r3, #128
-	mov	r0, r1
-	strh	r3, [r4, #3150]	@ movhi
-	strh	r3, [r4, #3148]	@ movhi
-	bl	rk_ftl_garbage_collect
-	movs	r1, #1
-	movs	r0, #0
-	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r4, #2344]
-	cmp	r3, #8
-	bls	.L1726
-	b	.L1702
-.L1668:
-	ldr	r3, [r4, #2520]
-	mov	r1, r5
-	mov	r0, r8
-	adds	r3, r3, #1
-	str	r3, [r4, #2520]
-	bl	__aeabi_uidivmod
-	ldr	r2, [sp, #12]
-	subs	r5, r5, r1
-	ldr	r0, [fp, #8]
-	mov	r3, r1
-	ldr	r1, [sp, #4]
-	cmp	r5, r2
-	it	cs
-	movcs	r5, r2
-	lsl	r9, r5, #9
-	add	r0, r0, r3, lsl #9
-	mov	r2, r9
-	bl	ftl_memcpy
-	cbnz	r7, .L1669
-.L1702:
-	movs	r0, #0
-	b	.L1664
-.L1669:
-	ldr	r3, [sp, #12]
-	add	r8, r8, r5
-	add	r10, r10, #1
-	subs	r3, r3, r5
-	str	r3, [sp, #12]
-	ldr	r3, [sp, #4]
-	add	r3, r3, r9
-	str	r3, [sp, #4]
-	bl	FtlCacheWriteBack
-	str	r7, [sp, #8]
-	b	.L1667
-.L1709:
-	ldr	r5, .L1731+12
-	b	.L1670
-.L1674:
+	cmp	fp, r3
+	bne	.L1781
+.L1762:
+	mov	r3, r5
+	movs	r2, #0
+	mov	r1, fp
+	ldr	r0, [r4, #3288]
+	bl	FtlProgPages
+	ldr	r3, [sp]
+	cmp	fp, r3
+	bls	.L1782
+	movw	r2, #1121
+	ldr	r1, .L1802+8
+	ldr	r0, .L1802+12
+	bl	sftl_printk
+.L1782:
+	ldr	r3, [sp]
+	sub	r3, r3, fp
+	str	r3, [sp]
+	b	.L1754
+.L1757:
+	str	r2, [r6, #8]
 	ldrh	r2, [r4, #2352]
-	str	r9, [r7, #8]
-	cbnz	r2, .L1712
+	cbnz	r2, .L1793
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-	b	.L1676
-.L1712:
+	b	.L1759
+.L1793:
 	mov	r5, r3
-	b	.L1673
-.L1699:
+	b	.L1756
+.L1781:
 	ldrh	r3, [r5, #4]
 	cmp	r3, #0
-	beq	.L1679
+	beq	.L1762
 	movs	r2, #0
 	add	r1, sp, #40
-	mov	r0, r6
-	movs	r7, #20
+	mov	r0, r7
+	mov	r8, #20
 	bl	log2phys
 	mov	r0, r5
-	mul	r7, r7, r9
+	mul	r8, r8, fp
 	bl	get_new_active_ppa
 	ldrh	r2, [r4, #112]
-	ldr	r3, [r4, #3840]
-	mul	r1, r2, r9
-	add	r3, r3, r7
+	ldr	r3, [r4, #3288]
+	mul	r1, r2, fp
+	add	r3, r3, r8
 	str	r0, [r3, #4]
-	str	r6, [r3, #16]
+	str	r7, [r3, #16]
 	bic	r1, r1, #3
 	str	r1, [sp, #28]
 	ldr	r0, [sp, #28]
-	ldr	r1, [r4, #3812]
-	add	fp, r1, r0
+	ldr	r1, [r4, #3328]
+	add	r9, r1, r0
 	str	r1, [sp, #32]
-	str	fp, [r3, #12]
+	str	r9, [r3, #12]
 	movs	r1, #0
-	mov	r0, fp
+	mov	r0, r9
 	bl	ftl_memset
-	cmp	r6, r10
-	beq	.L1680
+	ldr	r3, [sp, #4]
+	cmp	r7, r3
+	beq	.L1763
 	ldr	r3, [sp, #20]
-	cmp	r6, r3
-	bne	.L1725
-	ldr	r3, [sp, #12]
-	add	r2, r8, r3
-	ldrh	r3, [r4, #58]
-	smulbb	r3, r3, r6
-	subs	r2, r2, r3
-	uxth	r3, r2
-	str	r3, [sp, #16]
-	movs	r3, #0
-	str	r3, [sp, #24]
-	b	.L1683
-.L1680:
-	ldrh	r2, [r4, #58]
-	mov	r0, r8
-	mov	r1, r2
-	str	r2, [sp, #16]
+	cmp	r7, r3
+	bne	.L1798
+	ldrh	r2, [r4, #58]
+	ldr	r3, [sp, #12]
+	smulbb	r2, r2, r7
+	add	r6, r10, r3
+	movs	r3, #0
+	str	r3, [sp, #16]
+	subs	r6, r6, r2
+	uxth	r6, r6
+	b	.L1766
+.L1763:
+	ldrh	r6, [r4, #58]
+	mov	r0, r10
+	mov	r1, r6
 	bl	__aeabi_uidivmod
-	ldr	r2, [sp, #16]
-	str	r1, [sp, #24]
-	subs	r2, r2, r1
-	ldr	r1, [sp, #12]
-	mov	r3, r2
-	cmp	r2, r1
+	ldr	r3, [sp, #12]
+	subs	r6, r6, r1
+	str	r1, [sp, #16]
+	cmp	r6, r3
 	it	cs
-	movcs	r3, r1
-	str	r3, [sp, #16]
-.L1683:
+	movcs	r6, r3
+.L1766:
 	ldrh	r3, [r4, #58]
-	ldr	r2, [sp, #16]
-	cmp	r2, r3
-	ldr	r3, [r4, #3840]
-	bne	.L1684
-	cmp	r6, r10
-	add	r7, r7, r3
-	bne	.L1685
-	ldr	r3, [sp, #4]
-.L1729:
-	str	r3, [r7, #8]
-	b	.L1686
-.L1685:
-	ldr	r2, [sp, #16]
+	cmp	r6, r3
 	ldr	r3, [sp, #4]
-	muls	r2, r6, r2
-	sub	r2, r2, r8
-	add	r2, r3, r2, lsl #9
-	str	r2, [r7, #8]
-.L1686:
+	bne	.L1767
+	cmp	r7, r3
+	ldr	r3, [r4, #3288]
+	itte	ne
+	mulne	r6, r6, r7
+	ldrne	r2, [sp, #8]
+	ldreq	r2, [sp, #8]
+	add	r3, r3, r8
+	itett	ne
+	subne	r6, r6, r10
+	streq	r2, [r3, #8]
+	addne	r6, r2, r6, lsl #9
+	strne	r6, [r3, #8]
+.L1769:
 	ldrb	r2, [r5, #6]	@ zero_extendqisi2
 	ldrh	r3, [r4, #32]
 	cmp	r2, r3
-	bcc	.L1696
-	movw	r2, #1119
-	ldr	r1, .L1731+16
-	ldr	r0, .L1731+20
-	bl	printk
-.L1696:
+	bcc	.L1778
+	mov	r2, #1112
+	ldr	r1, .L1802+8
+	ldr	r0, .L1802+12
+	bl	sftl_printk
+.L1778:
 	ldr	r2, [sp, #32]
 	movw	r3, #61589
 	ldr	r1, [sp, #28]
-	add	r9, r9, #1
+	add	fp, fp, #1
 	strh	r3, [r2, r1]	@ movhi
 	ldr	r3, [r4, #2544]
-	str	r6, [fp, #8]
-	adds	r6, r6, #1
-	str	r3, [fp, #4]
+	str	r7, [r9, #8]
+	adds	r7, r7, #1
+	str	r3, [r9, #4]
 	adds	r3, r3, #1
 	adds	r2, r3, #1
 	it	eq
 	moveq	r3, #0
 	str	r3, [r4, #2544]
 	ldr	r3, [sp, #40]
-	str	r3, [fp, #12]
+	str	r3, [r9, #12]
 	ldrh	r3, [r5]
-	strh	r3, [fp, #2]	@ movhi
-	b	.L1678
-.L1732:
-	.align	2
-.L1731:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LANCHOR3
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR1+574
-	.word	.LC1
-.L1684:
-	cmp	r6, r10
-	add	r3, r3, r7
+	strh	r3, [r9, #2]	@ movhi
+	b	.L1761
+.L1767:
+	cmp	r7, r3
+	ldr	r3, [r4, #3288]
 	ite	eq
-	ldreq	r2, [r4, #3816]
-	ldrne	r2, [r4, #3808]
+	ldreq	r2, [r4, #3304]
+	ldrne	r2, [r4, #3308]
+	add	r3, r3, r8
 	str	r2, [r3, #8]
 	ldr	r3, [sp, #40]
 	adds	r1, r3, #1
-	beq	.L1689
+	beq	.L1772
 	str	r3, [sp, #48]
 	movs	r1, #1
-	ldr	r3, [r4, #3840]
+	ldr	r3, [r4, #3288]
 	add	r0, sp, #44
-	str	r6, [sp, #60]
-	add	r3, r3, r7
+	str	r7, [sp, #60]
+	add	r3, r3, r8
 	ldr	r2, [r3, #8]
 	ldr	r3, [r3, #12]
 	str	r2, [sp, #52]
@@ -11834,112 +12346,122 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #44]
 	adds	r3, r3, #1
-	bne	.L1690
+	bne	.L1773
 	ldr	r3, [r4, #2708]
 	adds	r3, r3, #1
 	str	r3, [r4, #2708]
-.L1693:
-	ldr	r3, [sp, #16]
-	cmp	r6, r10
-	lsl	r2, r3, #9
-	bne	.L1694
-	ldr	r3, [r4, #3840]
-	ldr	r1, [sp, #4]
-	add	r3, r3, r7
+.L1776:
+	ldr	r3, [sp, #4]
+	lsls	r2, r6, #9
+	cmp	r7, r3
+	bne	.L1777
+	ldr	r3, [r4, #3288]
+	ldr	r1, [sp, #8]
+	add	r3, r3, r8
 	ldr	r0, [r3, #8]
-	ldr	r3, [sp, #24]
+	ldr	r3, [sp, #16]
 	add	r0, r0, r3, lsl #9
-.L1728:
+.L1800:
 	bl	ftl_memcpy
-	ldr	r3, [sp, #20]
-	cmp	r6, r3
-	bne	.L1686
-	ldrh	r3, [r5, #4]
-	cmp	r3, #0
-	beq	.L1686
-	ldr	r3, [r4, #3840]
-	add	r7, r7, r3
-	ldr	r3, .L1733
-	str	r7, [r4, #3988]
-	str	r5, [r3, #-196]
-	b	.L1686
-.L1690:
-	ldr	r3, [fp, #8]
-	cmp	r6, r3
-	beq	.L1692
+	b	.L1769
+.L1803:
+	.align	2
+.L1802:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR1+606
+	.word	.LC1
+	.word	.LANCHOR0+2348
+.L1773:
+	ldr	r3, [r9, #8]
+	cmp	r7, r3
+	beq	.L1775
 	ldr	r3, [r4, #2708]
-	mov	r2, r6
-	ldr	r0, .L1733+4
+	mov	r2, r7
+	ldr	r0, .L1804
 	adds	r3, r3, #1
 	str	r3, [r4, #2708]
-	ldr	r1, [fp, #8]
-	bl	printk
-.L1692:
-	ldr	r3, [fp, #8]
-	cmp	r6, r3
-	beq	.L1693
-	movw	r2, #1098
-	ldr	r1, .L1733+8
-	ldr	r0, .L1733+12
-	bl	printk
-	b	.L1693
-.L1689:
-	ldr	r3, [r4, #3840]
+	ldr	r1, [r9, #8]
+	bl	sftl_printk
+.L1775:
+	ldr	r3, [r9, #8]
+	cmp	r7, r3
+	beq	.L1776
+	movw	r2, #1097
+	ldr	r1, .L1804+4
+	ldr	r0, .L1804+8
+	bl	sftl_printk
+	b	.L1776
+.L1772:
+	ldr	r3, [r4, #3288]
 	movs	r1, #0
 	ldrh	r2, [r4, #110]
-	add	r3, r3, r7
+	add	r3, r3, r8
 	ldr	r0, [r3, #8]
 	bl	ftl_memset
-	b	.L1693
-.L1694:
+	b	.L1776
+.L1777:
 	ldrh	r1, [r4, #58]
-	ldr	r0, [sp, #4]
-	ldr	r3, [r4, #3840]
-	muls	r1, r6, r1
-	add	r3, r3, r7
-	sub	r1, r1, r8
+	ldr	r0, [sp, #8]
+	ldr	r3, [r4, #3288]
+	muls	r1, r7, r1
+	add	r3, r3, r8
+	sub	r1, r1, r10
 	add	r1, r0, r1, lsl #9
 	ldr	r0, [r3, #8]
-	b	.L1728
-.L1725:
-	ldr	r3, [r4, #3840]
-	ldr	r2, [sp, #4]
-	add	r7, r7, r3
+	b	.L1800
+.L1798:
+	ldr	r3, [r4, #3288]
+	ldr	r2, [sp, #8]
+	add	r8, r8, r3
 	ldrh	r3, [r4, #58]
-	muls	r3, r6, r3
-	sub	r3, r3, r8
+	muls	r3, r7, r3
+	sub	r3, r3, r10
 	add	r3, r2, r3, lsl #9
-	b	.L1729
-.L1700:
-	mov	r3, r5
-	movs	r2, #0
-	mov	r1, r9
-	ldr	r0, [r4, #3840]
-	bl	FtlProgPages
-	ldr	r3, [sp, #8]
-	cmp	r3, r9
-	bcs	.L1703
-	movw	r2, #1134
-	ldr	r1, .L1733+8
-	ldr	r0, .L1733+12
-	bl	printk
-.L1703:
-	ldr	r3, [sp, #8]
-	sub	r3, r3, r9
-	str	r3, [sp, #8]
-	b	.L1671
-.L1707:
+	str	r3, [r8, #8]
+	b	.L1769
+.L1784:
+	mov	r5, #256
+	movw	r6, #65535
+.L1787:
+	ldrh	r3, [r4, #2588]
+	cmp	r3, r6
+	bne	.L1785
+	ldrh	r3, [r4, #3202]
+	cmp	r3, r6
+	bne	.L1785
+	movs	r0, #0
+	bl	List_get_gc_head_node
+	uxth	r0, r0
+	bl	FtlGcRefreshBlock
+.L1785:
+	movs	r1, #1
+	movs	r3, #128
+	mov	r0, r1
+	strh	r3, [r4, #3150]	@ movhi
+	strh	r3, [r4, #3148]	@ movhi
+	bl	rk_ftl_garbage_collect
+	movs	r1, #1
+	movs	r0, #0
+	bl	rk_ftl_garbage_collect
+	ldrh	r3, [r4, #2344]
+	cmp	r3, #2
+	bhi	.L1786
+	subs	r5, r5, #1
+	bne	.L1787
+	b	.L1786
+.L1788:
 	mov	r0, #-1
-	b	.L1664
-.L1734:
+	b	.L1750
+.L1805:
 	.align	2
-.L1733:
-	.word	.LANCHOR3
-	.word	.LC105
-	.word	.LANCHOR1+574
+.L1804:
+	.word	.LC114
+	.word	.LANCHOR1+606
 	.word	.LC1
 	.fnend
 	.size	FtlWrite, .-FtlWrite
+	.global	__aeabi_idivmod
 	.align	1
 	.global	sftl_write
 	.syntax unified
@@ -11949,381 +12471,515 @@ FtlWrite:
 	.type	sftl_write, %function
 sftl_write:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 120
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	mov	r3, r2
-	mov	r2, r1
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	adds	r5, r0, r1
+	subs	r6, r5, #1
+	.pad #132
+	sub	sp, sp, #132
+	cmp	r6, #63
+	mov	fp, r0
+	str	r1, [sp, #20]
+	str	r2, [sp, #40]
+	ldr	r4, .L1849
+	bls	.L1807
+	cmp	r0, #576
+	bls	.L1808
+.L1807:
+	ldr	r3, [r4, #3668]
+	cbz	r3, .L1809
+	ldr	r10, [r4, #3672]
+	ldr	r3, .L1849+4
+	ldr	r2, [r10]
+	cmp	r2, r3
+	beq	.L1810
+.L1827:
+	ldr	r4, .L1849
+	movs	r3, #0
+	ldr	r0, [r4, #3672]
+	str	r3, [r4, #3668]
+	bl	kfree
+	ldr	r0, [r4, #3676]
+	bl	kfree
+.L1809:
+	ldr	r3, [sp, #40]
+	mov	r1, fp
+	ldr	r2, [sp, #20]
+	movs	r0, #0
+	bl	FtlWrite
+	add	sp, sp, #132
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1810:
+	ldrh	r5, [r4, #14]
+	add	r0, r10, #262144
+	ldrh	r4, [r4, #10]
+	movs	r3, #0
+	movw	r2, #65535
+.L1814:
+	ldr	r1, [r0, #-4]
+	cbnz	r1, .L1811
+	ldr	r1, [r10, r3, lsl #2]
+	adds	r3, r3, #1
+	cmp	r3, #4096
+	add	r2, r2, #-1
+	it	hi
+	movhi	r3, #0
+	cmp	r2, #4096
+	str	r1, [r0, #-4]!
+	bne	.L1814
+	mov	r3, #512
+	str	r3, [sp, #8]
+	b	.L1813
+.L1811:
+	add	r3, r2, #127
+	ldr	r0, .L1849+8
+	lsrs	r3, r3, #7
+	str	r3, [sp, #8]
+	bl	sftl_printk
+.L1813:
+	uxtb	r5, r5
+	smulbb	r5, r5, r4
+	ldr	r4, .L1849
+	uxth	r3, r5
+	movs	r5, #0
+	str	r3, [sp, #12]
+	subs	r0, r3, #1
+	mov	r1, r3
+	ldr	r3, [sp, #8]
+	add	r0, r0, r3
+	bl	__aeabi_uidiv
+	ldr	r2, [sp, #12]
+	mov	r3, r0
+	str	r0, [sp, #16]
+	str	r0, [sp, #36]
+	str	r5, [sp, #28]
+	muls	r3, r2, r3
+	str	r3, [sp, #24]
+	ldr	r3, [sp, #8]
+	lsls	r3, r3, #7
+	str	r3, [sp, #52]
+	b	.L1826
+.L1834:
+	str	r3, [sp, #36]
+.L1826:
+	mov	r1, #512
+	ldr	r0, [r4, #3676]
+	bl	__memzero
+	ldrh	r7, [r4, #14]
+	mov	r0, r5
+	ldrh	r6, [r4, #10]
+	mov	r1, r7
+	uxtb	r8, r7
+	uxth	r3, r8
+	str	r3, [sp, #32]
+	ldrh	r3, [sp, #32]
+	smulbb	r6, r6, r3
+	bl	__aeabi_uidiv
+	ldr	r3, [r4, #3248]
 	mov	r1, r0
 	movs	r0, #0
-	b	FtlWrite
-	.fnend
-	.size	sftl_write, .-sftl_write
-	.align	1
-	.global	FtlLoadSysInfo
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	FtlLoadSysInfo, %function
-FtlLoadSysInfo:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
-	movs	r1, #0
-	ldr	r4, .L1757
-	ldr	r3, [r4, #3280]
-	ldrh	r2, [r4, #40]
-	ldr	r0, [r4, #2324]
-	str	r3, [r4, #3268]
-	ldr	r3, [r4, #3284]
-	lsls	r2, r2, #1
-	str	r3, [r4, #3272]
-	bl	ftl_memset
-	ldrh	r0, [r4, #2576]
-	movw	r3, #65535
-	cmp	r0, r3
-	bne	.L1737
-.L1745:
-	mov	r0, #-1
-	pop	{r3, r4, r5, r6, r7, pc}
-.L1737:
-	ldr	r7, .L1757+4
-	movs	r1, #1
-	addw	r6, r4, #3260
-	bl	FtlGetLastWrittenPage
-	sxth	r5, r0
+	uxth	r6, r6
+	blx	r3
+	ldr	r3, [sp, #24]
+	cmp	r3, r6
+	bls	.L1815
+	mov	r1, r7
+	adds	r0, r6, r5
+	bl	__aeabi_uidiv
+	ldr	r3, [r4, #3248]
+	mov	r1, r0
+	movs	r0, #0
+	blx	r3
+.L1815:
+	mov	r1, r6
+	mov	r0, r5
+	bl	__aeabi_uidivmod
+	movs	r6, #0
+	mov	r9, r1
+	subs	r3, r5, r1
+	str	r3, [sp, #44]
+.L1816:
+	ldr	r3, [sp, #24]
+	cmp	r3, r6
+	bhi	.L1817
+	ldrb	r8, [r4, #14]	@ zero_extendqisi2
+	mov	r0, r5
+	ldr	r3, [r4, #3676]
+	movs	r6, #0
+	ldrh	r1, [r4, #10]
+	str	r3, [sp, #48]
+	uxth	r3, r8
+	str	r3, [sp, #44]
+	ldrh	r3, [sp, #44]
+	smulbb	r1, r1, r3
+	uxth	r1, r1
+	bl	__aeabi_uidivmod
+	str	r1, [sp, #32]
+	subs	r3, r5, r1
+	ldrh	r0, [sp, #32]
+	mov	r1, r8
+	str	r3, [sp, #56]
+	bl	__aeabi_idivmod
+	uxth	r7, r1
+.L1818:
+	ldr	r3, [sp, #8]
+	cmp	r6, r3
+	bcs	.L1822
+	ldr	r3, [sp, #44]
+	mov	r1, r8
+	sub	r9, r3, r7
+	ldr	r3, [sp, #48]
+	uxth	r9, r9
+	add	r2, r3, r6, lsl #9
+	ldr	r3, [sp, #32]
+	str	r2, [sp, #60]
+	adds	r0, r3, r6
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #56]
+	uxth	r0, r0
+	mov	r1, r8
+	add	r7, r7, r3
+	mla	r0, r8, r0, r7
+	bl	__aeabi_uidiv
+	ldr	r7, [r4, #3256]
+	mov	r1, r0
+	add	r3, sp, #64
+	ldr	r2, [sp, #60]
+	movs	r0, #0
+	blx	r7
 	adds	r0, r0, #1
-	strh	r0, [r4, #2578]	@ movhi
-.L1739:
-	cmp	r5, #0
-	bge	.L1742
-	movw	r2, #1437
-	ldr	r1, .L1757+8
-	ldr	r0, .L1757+12
-	bl	printk
-.L1741:
-	ldrh	r3, [r4, #40]
-	ldrh	r2, [r4, #110]
-	adds	r3, r3, #24
-	cmp	r2, r3, lsl #1
-	bcs	.L1744
-	movw	r2, #1439
-	ldr	r1, .L1757+8
-	ldr	r0, .L1757+12
-	bl	printk
-.L1744:
-	movs	r2, #48
-	ldr	r1, [r4, #3268]
-	ldr	r0, .L1757+16
-	bl	ftl_memcpy
-	ldrh	r2, [r4, #40]
-	ldr	r1, [r4, #3268]
-	ldr	r0, [r4, #2324]
-	lsls	r2, r2, #1
-	adds	r1, r1, #48
-	bl	ftl_memcpy
-	ldrh	r1, [r4, #40]
-	ldr	r3, [r4, #3268]
-	ldr	r0, [r4, #24]
-	lsrs	r2, r1, #3
-	adds	r1, r1, #24
-	lsls	r1, r1, #1
-	adds	r2, r2, #4
-	bic	r1, r1, #3
-	add	r1, r1, r3
-	bl	ftl_memcpy
-	ldr	r2, [r4, #2268]
-	ldr	r3, .L1757+4
-	cmp	r2, r3
-	bne	.L1745
-	ldrb	r2, [r4, #2278]	@ zero_extendqisi2
-	ldrh	r3, [r4, #54]
-	ldrh	r5, [r4, #2276]
+	bne	.L1819
+.L1822:
+	ldr	r0, [r4, #3676]
+	mov	r1, r10
+	movs	r6, #0
+.L1820:
+	mov	r8, r1
+	ldr	r2, [r0, r6, lsl #2]
+	ldr	r3, [r8]
+	lsls	r7, r6, #2
+	adds	r1, r1, #4
 	cmp	r2, r3
-	strh	r5, [r4, #2582]	@ movhi
-	bne	.L1745
-	ldr	r3, .L1757+20
-	ldrh	r2, [r4, #58]
-	ldr	r6, [r4, #44]
-	str	r5, [r3, #-176]
-	ldrh	r3, [r4, #102]
-	ldrh	r0, [r4, #158]
-	ldrh	r1, [r4, #32]
-	muls	r3, r5, r3
-	subs	r0, r6, r0
-	subs	r0, r0, r5
-	str	r3, [r4, #2504]
-	muls	r3, r2, r3
-	str	r3, [r4, #140]
+	beq	.L1823
+	mov	r1, #512
+	bl	__memzero
+	ldr	r2, [r4, #3676]
+	mov	r1, r5
+	str	r6, [sp]
+	ldr	r0, .L1849+12
+	ldr	r3, [r8]
+	ldr	r2, [r2, r7]
+	bl	sftl_printk
+	ldr	r3, [r4, #3248]
+	mov	r1, r5
+	movs	r0, #0
+	blx	r3
+	ldr	r3, [sp, #16]
+	cmp	r3, #1
+	bls	.L1833
+	ldr	r2, [sp, #12]
+	movs	r0, #0
+	ldr	r3, [r4, #3248]
+	adds	r1, r2, r5
+	blx	r3
+.L1833:
+	ldr	r2, [sp, #36]
+	ldr	r3, [sp, #16]
+	add	r3, r3, r2
+	ldr	r2, [sp, #24]
+	add	r5, r5, r2
+	ldr	r2, [sp, #36]
+	cmp	r2, #15
+	bls	.L1834
+	b	.L1827
+.L1817:
+	mov	r1, r8
+	add	r0, r9, r6
 	bl	__aeabi_uidiv
-	cmp	r5, r6
-	strh	r0, [r4, #2572]	@ movhi
-	bls	.L1746
-	movw	r2, #1461
-	ldr	r1, .L1757+8
-	ldr	r0, .L1757+12
-	bl	printk
-.L1746:
-	ldrh	r3, [r4, #2284]
-	ldrh	r1, [r4, #2282]
-	lsrs	r2, r3, #6
-	and	r3, r3, #63
-	strb	r3, [r4, #2354]
-	strh	r2, [r4, #2350]	@ movhi
-	ldrh	r2, [r4, #2286]
-	ldrb	r3, [r4, #2279]	@ zero_extendqisi2
-	strh	r1, [r4, #2348]	@ movhi
-	strh	r2, [r4, #2396]	@ movhi
-	ldrh	r2, [r4, #2288]
-	strb	r3, [r4, #2356]
-	movw	r3, #65535
-	strh	r3, [r4, #2588]	@ movhi
-	movs	r3, #0
-	strh	r3, [r4, #2590]	@ movhi
-	lsrs	r0, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2402]
-	ldrb	r2, [r4, #2280]	@ zero_extendqisi2
-	strh	r0, [r4, #2398]	@ movhi
-	strb	r3, [r4, #2594]
-	strb	r2, [r4, #2404]
-	ldrh	r2, [r4, #2290]
-	strb	r3, [r4, #2596]
-	str	r3, [r4, #2528]
-	strh	r2, [r4, #2444]	@ movhi
-	ldrh	r2, [r4, #2292]
-	str	r3, [r4, #2516]
-	str	r3, [r4, #2508]
-	str	r3, [r4, #2524]
-	lsrs	r0, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #2450]
-	ldrb	r2, [r4, #2281]	@ zero_extendqisi2
-	str	r3, [r4, #2552]
-	strh	r0, [r4, #2446]	@ movhi
-	strb	r2, [r4, #2452]
-	ldr	r2, [r4, #2300]
-	str	r2, [r4, #2548]
-	str	r3, [r4, #2564]
-	ldr	r2, [r4, #2540]
-	str	r3, [r4, #2520]
-	ldr	r3, [r4, #2308]
-	cmp	r3, r2
-	ldr	r2, [r4, #2544]
-	it	hi
-	strhi	r3, [r4, #2540]
-	ldr	r3, [r4, #2304]
-	cmp	r3, r2
-	it	hi
-	strhi	r3, [r4, #2544]
-	movw	r3, #65535
-	cmp	r1, r3
-	beq	.L1749
-	ldr	r0, .L1757+24
-	bl	make_superblock
-.L1749:
-	ldrh	r2, [r4, #2396]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L1750
-	ldr	r0, .L1757+28
-	bl	make_superblock
-.L1750:
-	ldrh	r2, [r4, #2444]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L1751
-	ldr	r0, .L1757+32
-	bl	make_superblock
-.L1751:
-	ldrh	r2, [r4, #2588]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L1752
-	ldr	r0, .L1757+36
-	bl	make_superblock
-.L1752:
+	uxth	r7, r0
+	add	r2, r10, r6, lsl #9
+	ldr	r0, [sp, #44]
+	mul	r3, r8, r7
+	mov	r1, r8
+	str	r2, [sp, #48]
+	str	r3, [sp, #64]
+	movw	r3, #61424
+	str	r3, [sp, #68]
+	bl	__aeabi_uidiv
+	adds	r1, r0, r7
+	add	r3, sp, #64
+	ldr	r2, [sp, #48]
 	movs	r0, #0
-	pop	{r3, r4, r5, r6, r7, pc}
-.L1742:
-	ldrh	r3, [r4, #2576]
-	movs	r2, #1
-	mov	r1, r2
-	mov	r0, r6
-	orr	r3, r5, r3, lsl #10
-	str	r3, [r4, #3264]
-	ldr	r3, [r4, #3280]
-	str	r3, [r4, #3268]
-	bl	FlashReadPages
-	ldr	r3, [r4, #3260]
+	ldr	r7, [r4, #3252]
+	blx	r7
+	ldr	r3, [sp, #32]
+	add	r6, r6, r3
+	uxth	r6, r6
+	b	.L1816
+.L1819:
+	add	r6, r6, r9
+	movs	r7, #0
+	uxth	r6, r6
+	b	.L1818
+.L1823:
+	ldr	r3, [sp, #52]
+	adds	r6, r6, #1
+	cmp	r6, r3
+	bne	.L1820
+	ldr	r3, [sp, #28]
 	adds	r3, r3, #1
-	beq	.L1740
-	ldr	r3, [r4, #3280]
-	ldr	r3, [r3]
-	cmp	r3, r7
-	bne	.L1740
-	ldr	r3, [r4, #3284]
-	ldrh	r2, [r3]
-	movw	r3, #61604
-	cmp	r2, r3
-	beq	.L1741
-.L1740:
-	subs	r5, r5, #1
-	sxth	r5, r5
-	b	.L1739
-.L1758:
+	cmp	r3, #5
+	str	r3, [sp, #28]
+	bls	.L1833
+	b	.L1827
+.L1808:
+	cmp	r0, #64
+	bne	.L1828
+	mov	r0, #262144
+	bl	ftl_malloc
+	str	r0, [r4, #3672]
+	mov	r0, #262144
+	bl	ftl_malloc
+	ldr	r3, [r4, #3672]
+	str	r0, [r4, #3676]
+	cbz	r3, .L1829
+	cbz	r0, .L1829
+	movs	r2, #1
+	mov	r1, #262144
+	mov	r0, r3
+	str	r2, [r4, #3668]
+	bl	__memzero
+.L1828:
+	cmp	fp, #63
+	ldr	r0, [r4, #3672]
+	bhi	.L1830
+	ldr	r3, [sp, #20]
+	rsb	r1, fp, #64
+	subs	r2, r3, r1
+	ldr	r3, [sp, #40]
+	add	r1, r3, r1, lsl #9
+.L1831:
+	cmp	r6, #576
+	ittt	hi
+	subhi	r2, r2, r5
+	mvnhi	r3, #446
+	addhi	r2, r2, r3
+	lsls	r2, r2, #9
+	bl	ftl_memcpy
+	b	.L1809
+.L1829:
+	ldr	r1, .L1849+16
+	ldr	r0, .L1849+20
+	bl	sftl_printk
+	b	.L1828
+.L1830:
+	ldr	r3, .L1849+24
+	ldr	r1, [sp, #40]
+	ldr	r2, [sp, #20]
+	add	r3, r3, fp
+	add	r0, r0, r3, lsl #9
+	b	.L1831
+.L1850:
 	.align	2
-.L1757:
+.L1849:
 	.word	.LANCHOR0
-	.word	1179929683
-	.word	.LANCHOR1+583
-	.word	.LC1
-	.word	.LANCHOR0+2268
-	.word	.LANCHOR3
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+2444
-	.word	.LANCHOR0+2588
+	.word	-52655045
+	.word	.LC115
+	.word	.LC116
+	.word	.LANCHOR1+615
+	.word	.LC117
+	.word	8388544
 	.fnend
-	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.size	sftl_write, .-sftl_write
 	.align	1
-	.global	FtlSysBlkInit
+	.global	FtlMakeBbt
 	.syntax unified
 	.thumb
 	.thumb_func
 	.fpu softvfp
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	movs	r3, #0
-	ldr	r4, .L1775
-	ldrh	r0, [r4, #36]
-	strh	r3, [r4, #4008]	@ movhi
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlScanSysBlk
-	ldrh	r2, [r4, #2576]
-	movw	r3, #65535
-	cmp	r2, r3
-	bne	.L1760
-.L1762:
-	mov	r5, #-1
-.L1759:
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, #0
+	ldr	r9, .L1870+4
+	bl	FtlBbtMemInit
+	sub	r5, r9, #180
+	sub	r10, r9, #18
+	mov	r4, r5
+	bl	FtlLoadFactoryBbt
+.L1852:
+	ldrh	r3, [r5, #54]
+	cmp	r8, r3
+	bcc	.L1858
+	movs	r5, #0
+.L1859:
+	ldrh	r3, [r4, #114]
+	uxth	r0, r5
+	adds	r5, r5, #1
+	cmp	r3, r0
+	bhi	.L1860
+	ldrh	r5, [r4, #164]
+	movw	r6, #65535
+	subs	r5, r5, #1
+	uxth	r5, r5
+.L1861:
+	ldrh	r3, [r4, #164]
+	subs	r3, r3, #48
+	cmp	r5, r3
+	ble	.L1865
+	mov	r0, r5
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1862
 	mov	r0, r5
-	pop	{r4, r5, r6, pc}
-.L1760:
-	bl	FtlLoadSysInfo
-	mov	r5, r0
+	bl	FlashTestBlk
 	cmp	r0, #0
-	bne	.L1762
-	bl	FtlLoadMapInfo
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	movs	r0, #1
-	bl	FtlUpdateVaildLpn
-	ldrh	r1, [r4, #138]
-	mov	r3, r5
-	ldr	r2, [r4, #2492]
-	movs	r0, #12
-.L1763:
-	cmp	r3, r1
-	bge	.L1768
-	mla	r6, r0, r3, r2
-	ldr	r6, [r6, #4]
-	cmp	r6, #0
-	bge	.L1764
-.L1768:
-	ldrh	r2, [r4, #2296]
-	cmp	r3, r1
-	add	r2, r2, #1
-	strh	r2, [r4, #2296]	@ movhi
-	bge	.L1774
-.L1765:
-	ldr	r0, .L1775+4
-	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L1775+8
-	bl	FtlSuperblockPowerLostFix
-	ldrh	r1, [r4, #2348]
-	ldr	r2, [r4, #2324]
-	ldrh	r0, [r4, #2352]
-	ldrh	r3, [r2, r1, lsl #1]
-	subs	r3, r3, r0
-	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldrh	r3, [r4, #102]
-	ldr	r1, [r4, #2324]
-	ldrh	r0, [r4, #2396]
-	strh	r3, [r4, #2350]	@ movhi
+	beq	.L1863
+	mov	r0, r5
+	bl	FtlBbmMapBadBlock
+.L1862:
+	subs	r5, r5, #1
+	uxth	r5, r5
+	b	.L1861
+.L1858:
+	ldrh	r3, [r10, #2]!
+	movw	r2, #65535
+	ldr	r0, [r5, #3292]
+	ldr	fp, [r5, #3324]
+	cmp	r3, r2
+	str	r0, [r5, #3452]
+	str	fp, [r5, #3456]
+	beq	.L1853
+	ldrh	r7, [r5, #98]
+	movs	r2, #1
+	mov	r1, r2
+	ldr	r0, .L1870
+	mla	r7, r8, r7, r3
+	lsls	r3, r7, #10
+	str	r3, [r5, #3448]
+	bl	FlashReadPages
+	ldrh	r2, [r5, #98]
+	ldr	r1, [r5, #3452]
+	ldr	r0, [r9]
+	adds	r2, r2, #7
+	asrs	r2, r2, #3
+	bl	ftl_memcpy
+.L1854:
+	uxth	r0, r7
+	add	r8, r8, #1
+	add	r9, r9, #4
+	bl	FtlBbmMapBadBlock
+	b	.L1852
+.L1853:
+	mov	r1, r8
+	bl	FlashGetBadBlockList
+	ldr	r1, [r9]
+	ldr	r0, [r5, #3452]
+	bl	FtlBbt2Bitmap
+	ldrh	r6, [r5, #98]
+.L1856:
+	subs	r6, r6, #1
+	uxth	r6, r6
+.L1855:
+	ldrh	r0, [r4, #98]
+	smlabb	r0, r0, r8, r6
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1856
+	movs	r1, #16
+	ldr	r0, [r4, #3324]
+	strh	r6, [r10]	@ movhi
+	bl	__memzero
+	mov	r1, #4096
+	ldr	r0, [r4, #3292]
+	bl	__memzero
+	movw	r3, #61664
+	strh	r3, [fp]	@ movhi
 	movs	r3, #0
-	strb	r3, [r4, #2354]
-	strh	r3, [r4, #2352]	@ movhi
-	ldrh	r6, [r4, #2400]
-	ldrh	r2, [r1, r0, lsl #1]
-	subs	r2, r2, r6
-	strh	r2, [r1, r0, lsl #1]	@ movhi
-	ldrh	r2, [r4, #102]
-	ldr	r0, .L1775+12
-	strb	r3, [r4, #2402]
-	strh	r2, [r4, #2398]	@ movhi
-	strh	r3, [r4, #2400]	@ movhi
-	bl	FtlMapBlkWriteDump_data
-	ldr	r0, .L1775+16
-	bl	FtlMapBlkWriteDump_data
-	ldrh	r3, [r4, #2298]
+	str	r3, [fp, #4]
+	ldrh	r3, [r10]
+	ldrh	r7, [r4, #98]
+	ldrh	r2, [r4, #3380]
+	strh	r3, [fp, #2]	@ movhi
+	ldrh	r3, [r10]
+	ldr	r1, [r9]
+	lsls	r2, r2, #2
+	ldr	r0, [r4, #3452]
+	mla	r7, r8, r7, r3
+	lsls	r3, r7, #10
+	str	r3, [r4, #3448]
+	bl	ftl_memcpy
+	movs	r2, #1
+	ldr	r0, .L1870
+	mov	r1, r2
+	bl	FlashEraseBlocks
+	movs	r3, #1
+	ldr	r0, .L1870
+	mov	r2, r3
+	mov	r1, r3
+	bl	FlashProgPages
+	ldr	r3, [r4, #3444]
 	adds	r3, r3, #1
-	strh	r3, [r4, #2298]	@ movhi
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	bl	FtlVpcTblFlush
-	b	.L1769
-.L1764:
+	bne	.L1854
+	uxth	r0, r7
+	bl	FtlBbmMapBadBlock
+	b	.L1855
+.L1860:
+	bl	FtlBbmMapBadBlock
+	b	.L1859
+.L1863:
+	ldrh	r3, [r4, #152]
+	cmp	r3, r6
+	bne	.L1864
+	strh	r5, [r4, #152]	@ movhi
+	b	.L1862
+.L1864:
+	strh	r5, [r4, #156]	@ movhi
+.L1865:
+	ldrh	r3, [r4, #152]
+	movs	r5, #0
+	ldr	r0, [r4, #3260]
+	movs	r1, #1
+	str	r5, [r4, #160]
+	movs	r2, #2
+	strh	r5, [r4, #154]	@ movhi
+	lsls	r3, r3, #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r4, #156]
+	lsls	r3, r3, #10
+	str	r3, [r0, #24]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4, #152]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, #156]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r4, #160]
+	ldrh	r2, [r4, #156]
+	strh	r5, [r4, #154]	@ movhi
 	adds	r3, r3, #1
-	b	.L1763
-.L1774:
-	ldrh	r3, [r4, #4008]
-	cmp	r3, #0
-	bne	.L1765
-.L1769:
-	ldrh	r0, [r4, #2348]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1770
-	ldrh	r3, [r4, #2352]
-	cbnz	r3, .L1770
-	ldrh	r3, [r4, #2400]
-	cbnz	r3, .L1770
-	bl	FtlGcRefreshBlock
-	ldrh	r0, [r4, #2396]
-	bl	FtlGcRefreshBlock
-	ldr	r0, .L1775+4
-	bl	allocate_new_data_superblock
-	ldr	r0, .L1775+8
-	bl	allocate_new_data_superblock
-.L1770:
-	ldrh	r3, [r4, #2296]
-	lsls	r3, r3, #27
-	bne	.L1759
-	bl	FtlVpcCheckAndModify
-	b	.L1759
-.L1776:
+	str	r3, [r4, #160]
+	ldrh	r3, [r4, #152]
+	strh	r2, [r4, #152]	@ movhi
+	strh	r3, [r4, #156]	@ movhi
+	bl	FtlBbmTblFlush
+	mov	r0, r5
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1871:
 	.align	2
-.L1775:
-	.word	.LANCHOR0
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR0+3904
-	.word	.LANCHOR0+3948
+.L1870:
+	.word	.LANCHOR0+3444
+	.word	.LANCHOR0+180
 	.fnend
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	1
 	.global	ftl_low_format
 	.syntax unified
@@ -12338,46 +12994,46 @@ ftl_low_format:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r3, #0
-	ldr	r4, .L1801
+	ldr	r4, .L1896
 	ldrh	r0, [r4, #36]
 	str	r3, [r4, #2540]
 	str	r3, [r4, #2544]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L1778
+	cbz	r0, .L1873
 	bl	FtlMakeBbt
-.L1778:
-	ldr	r0, .L1801+4
+.L1873:
+	ldr	r0, .L1896+4
 	movs	r2, #0
-.L1779:
+.L1874:
 	ldrh	r1, [r4, #58]
 	uxth	r3, r2
 	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	blt	.L1780
+	blt	.L1875
 	ldrh	r6, [r4, #40]
 	movs	r5, #0
-.L1781:
+.L1876:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r6
-	bhi	.L1782
+	bhi	.L1877
 	ldrh	r1, [r4, #32]
 	subs	r3, r5, #3
 	cmp	r3, r1, lsl #1
-	bge	.L1783
-.L1787:
+	bge	.L1878
+.L1882:
 	movs	r5, #0
 	mov	r6, r5
-.L1784:
+.L1879:
 	ldrh	r3, [r4, #40]
 	uxth	r0, r5
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bhi	.L1788
+	bhi	.L1883
 	ldrh	r3, [r4, #42]
 	ldrh	r5, [r4, #32]
 	ldr	r9, [r4, #44]
-	str	r3, [r4, #3804]
+	str	r3, [r4, #3276]
 	mov	r1, r5
 	mov	r0, r9
 	bl	__aeabi_uidiv
@@ -12389,7 +13045,7 @@ ftl_low_format:
 	movs	r3, #24
 	muls	r3, r5, r3
 	cmp	r6, r3
-	ble	.L1789
+	ble	.L1884
 	mov	r1, r5
 	sub	r0, r9, r6
 	bl	__aeabi_uidiv
@@ -12397,9 +13053,9 @@ ftl_low_format:
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
 	strh	r0, [r4, #2572]	@ movhi
-.L1789:
+.L1884:
 	ldrh	r3, [r4, #94]
-	cbz	r3, .L1791
+	cbz	r3, .L1886
 	ldrh	r2, [r4, #2572]
 	add	r2, r2, r3, lsr #1
 	strh	r2, [r4, #2572]	@ movhi
@@ -12410,26 +13066,24 @@ ftl_low_format:
 	strlt	r8, [r4, #2504]
 	addlt	r3, r3, r7
 	strhlt	r3, [r4, #2572]	@ movhi
-.L1791:
+.L1886:
 	ldrh	r2, [r4, #2572]
-	movw	r6, #65535
 	ldr	r3, [r4, #2504]
-	ldr	r7, .L1801+8
+	ldr	r6, .L1896+8
 	subs	r3, r3, r2
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #102]
-	str	r5, [r7, #-176]
+	str	r5, [r4, #3464]
 	muls	r5, r3, r5
 	ldrh	r3, [r4, #58]
 	str	r5, [r4, #2504]
 	muls	r5, r3, r5
 	str	r5, [r4, #140]
-	mov	r5, r7
+	movw	r5, #65535
 	bl	FtlBbmTblFlush
 	ldrh	r2, [r4, #42]
 	movs	r1, #0
 	ldr	r0, [r4, #2324]
-	ldr	r7, .L1801+12
 	lsls	r2, r2, #1
 	bl	ftl_memset
 	ldrh	r2, [r4, #40]
@@ -12445,31 +13099,31 @@ ftl_low_format:
 	strh	r3, [r4, #2348]	@ movhi
 	movs	r3, #1
 	ldr	r0, [r4, #24]
-	strh	r6, [r4, #2588]	@ movhi
+	strh	r5, [r4, #2588]	@ movhi
 	strb	r3, [r4, #2356]
 	bl	ftl_memset
-.L1793:
-	mov	r0, r7
+.L1888:
+	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #2355]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2348]
 	cmp	r3, #0
-	bne	.L1794
+	bne	.L1889
 	ldr	r3, [r4, #2324]
-	strh	r6, [r3, r2, lsl #1]	@ movhi
+	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2348]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2348]	@ movhi
-	b	.L1793
-.L1780:
-	ldr	r5, [r4, #3816]
+	b	.L1888
+.L1875:
+	ldr	r5, [r4, #3304]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r5, r3, lsl #2]
-	ldr	r1, [r4, #3808]
+	ldr	r1, [r4, #3308]
 	str	r0, [r1, r3, lsl #2]
-	b	.L1779
-.L1782:
+	b	.L1874
+.L1877:
 	mov	r0, r6
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -12477,8 +13131,8 @@ ftl_low_format:
 	add	r5, r5, r0
 	uxth	r5, r5
 	uxth	r6, r6
-	b	.L1781
-.L1783:
+	b	.L1876
+.L1878:
 	mov	r0, r5
 	bl	__aeabi_uidiv
 	ldr	r3, [r4, #132]
@@ -12488,27 +13142,27 @@ ftl_low_format:
 	ldrh	r0, [r4, #36]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	r5, [r4, #40]
-.L1785:
+.L1880:
 	ldrh	r3, [r4, #42]
 	cmp	r3, r5
-	bls	.L1787
+	bls	.L1882
 	mov	r0, r5
 	movs	r1, #1
 	adds	r5, r5, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r5, r5
-	b	.L1785
-.L1788:
+	b	.L1880
+.L1883:
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r6, r6, r0
 	uxth	r6, r6
-	b	.L1784
-.L1794:
+	b	.L1879
+.L1889:
 	ldr	r3, [r4, #2540]
-	movw	r6, #65535
+	movw	r5, #65535
 	ldrh	r1, [r4, #2352]
-	ldr	r7, .L1801+16
+	ldr	r6, .L1896+12
 	str	r3, [r4, #2360]
 	adds	r3, r3, #1
 	str	r3, [r4, #2540]
@@ -12522,113 +13176,58 @@ ftl_low_format:
 	strh	r3, [r4, #2396]	@ movhi
 	movs	r3, #1
 	strb	r3, [r4, #2404]
-.L1795:
-	mov	r0, r7
+.L1890:
+	mov	r0, r6
 	bl	make_superblock
 	ldrb	r3, [r4, #2403]	@ zero_extendqisi2
 	ldrh	r2, [r4, #2396]
-	cbnz	r3, .L1796
+	cbnz	r3, .L1891
 	ldr	r3, [r4, #2324]
-	strh	r6, [r3, r2, lsl #1]	@ movhi
+	strh	r5, [r3, r2, lsl #1]	@ movhi
 	ldrh	r3, [r4, #2396]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2396]	@ movhi
-	b	.L1795
-.L1796:
+	b	.L1890
+.L1891:
 	ldr	r3, [r4, #2540]
-	movw	r6, #65535
+	movw	r5, #65535
 	ldrh	r1, [r4, #2400]
 	str	r3, [r4, #2408]
 	adds	r3, r3, #1
 	str	r3, [r4, #2540]
 	ldr	r3, [r4, #2324]
-	strh	r1, [r3, r2, lsl #1]	@ movhi
-	strh	r6, [r4, #2444]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	movs	r3, #0
-	strh	r0, [r4, #2576]	@ movhi
-	strh	r3, [r4, #2578]	@ movhi
-	ldr	r3, [r5, #-176]
-	strh	r6, [r4, #2580]	@ movhi
-	strh	r3, [r4, #2582]	@ movhi
-	ldr	r3, [r4, #2540]
-	str	r3, [r4, #2584]
-	adds	r3, r3, #1
-	str	r3, [r4, #2540]
-	bl	FtlVpcTblFlush
-	bl	FtlSysBlkInit
-	cbnz	r0, .L1797
-	ldr	r3, .L1801+20
-	movs	r2, #1
-	str	r2, [r3]
-.L1797:
-	movs	r0, #0
-	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1802:
-	.align	2
-.L1801:
-	.word	.LANCHOR0
-	.word	168778952
-	.word	.LANCHOR3
-	.word	.LANCHOR0+2348
-	.word	.LANCHOR0+2396
-	.word	.LANCHOR2
-	.fnend
-	.size	ftl_low_format, .-ftl_low_format
-	.align	1
-	.global	sftl_init
-	.syntax unified
-	.thumb
-	.thumb_func
-	.fpu softvfp
-	.type	sftl_init, %function
-sftl_init:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	mov	r3, #-1
-	ldr	r4, .L1809
-	ldr	r5, .L1809+4
-	ldr	r1, .L1809+8
-	ldr	r0, .L1809+12
-	str	r3, [r5]
-	bl	printk
-	mov	r0, r4
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	r0, [r4, #36]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cbnz	r0, .L1807
+	strh	r1, [r3, r2, lsl #1]	@ movhi
+	strh	r5, [r4, #2444]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	movs	r3, #0
+	strh	r0, [r4, #2576]	@ movhi
+	strh	r3, [r4, #2578]	@ movhi
+	ldr	r3, [r4, #3464]
+	strh	r5, [r4, #2580]	@ movhi
+	strh	r3, [r4, #2582]	@ movhi
+	ldr	r3, [r4, #2540]
+	str	r3, [r4, #2584]
+	adds	r3, r3, #1
+	str	r3, [r4, #2540]
+	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L1807
-	movs	r3, #1
-	str	r3, [r5]
-	ldrh	r3, [r4, #2344]
-	cmp	r3, #15
-	bhi	.L1807
-	movw	r4, #8129
-.L1806:
-	movs	r1, #1
-	movs	r0, #0
-	bl	rk_ftl_garbage_collect
-	subs	r4, r4, #1
-	bne	.L1806
-.L1807:
+	cbnz	r0, .L1892
+	ldr	r3, .L1896+16
+	movs	r2, #1
+	str	r2, [r3]
+.L1892:
 	movs	r0, #0
-	pop	{r3, r4, r5, pc}
-.L1810:
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L1897:
 	.align	2
-.L1809:
+.L1896:
 	.word	.LANCHOR0
+	.word	168778952
+	.word	.LANCHOR0+2348
+	.word	.LANCHOR0+2396
 	.word	.LANCHOR2
-	.word	.LC70
-	.word	.LC71
 	.fnend
-	.size	sftl_init, .-sftl_init
+	.size	ftl_low_format, .-ftl_low_format
 	.align	1
 	.global	ftl_memcmp
 	.syntax unified
@@ -12656,20 +13255,20 @@ rk_sftl_vendor_dev_ops_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1815
-	ldr	r3, [r2, #-172]
-	cbnz	r3, .L1814
-	str	r0, [r2, #-172]
+	ldr	r2, .L1902
+	ldr	r3, [r2, #3680]
+	cbnz	r3, .L1901
+	str	r0, [r2, #3680]
 	mov	r0, r3
-	str	r1, [r2, #-168]
+	str	r1, [r2, #3684]
 	bx	lr
-.L1814:
+.L1901:
 	mov	r0, #-1
 	bx	lr
-.L1816:
+.L1903:
 	.align	2
-.L1815:
-	.word	.LANCHOR3
+.L1902:
+	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
 	.align	1
@@ -12683,88 +13282,80 @@ rk_sftl_vendor_storage_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r0, #65536
-	ldr	r4, .L1825
+	ldr	r4, .L1912
 	bl	ftl_malloc
-	str	r0, [r4, #-164]
+	str	r0, [r4, #3688]
 	cmp	r0, #0
-	beq	.L1823
-	ldr	fp, .L1825+4
-	mov	r8, #0
-	ldr	r9, .L1825+8
-	mov	r7, r8
-	mov	r6, r8
-.L1821:
-	ldr	r3, [r4, #-172]
+	beq	.L1910
+	ldr	r8, .L1912+4
+	mov	r9, #0
+	mov	r7, r9
+	mov	r6, r9
+.L1908:
+	ldr	r3, [r4, #3680]
 	movs	r1, #128
-	ldr	r2, [r4, #-164]
+	ldr	r2, [r4, #3688]
 	lsls	r0, r6, #7
 	blx	r3
 	mov	r5, r0
-	cbnz	r0, .L1819
-	ldr	r1, [r4, #-164]
-	movw	r10, #65532
-	mov	r0, fp
-	ldr	r3, [r1, #4]
-	ldr	r2, [r1, r10]
-	ldr	r1, [r1]
-	bl	printk
-	ldr	r2, [r4, #-164]
+	cbnz	r0, .L1906
+	ldr	r2, [r4, #3688]
 	ldr	r3, [r2]
-	cmp	r3, r9
-	bne	.L1820
-	ldr	r3, [r2, r10]
-	ldr	r1, [r2, #4]
-	cmp	r3, r1
-	bne	.L1820
-	cmp	r3, r7
+	cmp	r3, r8
+	bne	.L1907
+	movw	r3, #65532
+	ldr	r1, [r2, r3]
+	ldr	r3, [r2, #4]
+	cmp	r1, r3
+	bne	.L1907
+	cmp	r1, r7
 	itt	hi
-	movhi	r8, r6
-	movhi	r7, r3
-.L1820:
+	movhi	r9, r6
+	movhi	r7, r1
+.L1907:
 	adds	r6, r6, #1
 	cmp	r6, #2
-	bne	.L1821
-	cbz	r7, .L1822
-	ldr	r3, [r4, #-172]
+	bne	.L1908
+	cbz	r7, .L1909
+	ldr	r3, [r4, #3680]
 	movs	r1, #128
-	lsl	r0, r8, #7
+	lsl	r0, r9, #7
 	blx	r3
 	mov	r5, r0
-	cbz	r0, .L1817
-.L1819:
-	ldr	r0, [r4, #-164]
+	cbz	r0, .L1904
+.L1906:
+	ldr	r0, [r4, #3688]
 	mov	r5, #-1
 	bl	kfree
 	movs	r3, #0
-	str	r3, [r4, #-164]
-	b	.L1817
-.L1822:
+	str	r3, [r4, #3688]
+	b	.L1904
+.L1909:
 	mov	r1, #65536
 	mov	r0, r2
 	bl	__memzero
-	ldr	r3, [r4, #-164]
+	ldr	r3, [r4, #3688]
 	movs	r2, #1
 	movw	r1, #65532
 	str	r2, [r3, #4]
-	str	r9, [r3]
+	str	r8, [r3]
 	str	r2, [r3, r1]
 	movw	r2, #64504
 	strh	r7, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L1817:
+.L1904:
 	mov	r0, r5
-	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1823:
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L1910:
 	mvn	r5, #11
-	b	.L1817
-.L1826:
+	b	.L1904
+.L1913:
 	.align	2
-.L1825:
-	.word	.LANCHOR3
-	.word	.LC106
+.L1912:
+	.word	.LANCHOR0
 	.word	1380668996
 	.fnend
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
@@ -12782,23 +13373,23 @@ rk_sftl_vendor_read:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r3, .L1833
+	ldr	r3, .L1920
 	mov	r0, r1
-	ldr	r5, [r3, #-164]
-	cbz	r5, .L1832
+	ldr	r5, [r3, #3688]
+	cbz	r5, .L1919
 	ldrh	r6, [r5, #10]
 	movs	r3, #0
-.L1829:
+.L1916:
 	cmp	r3, r6
-	bcc	.L1831
-.L1832:
+	bcc	.L1918
+.L1919:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1831:
+.L1918:
 	add	r1, r5, r3, lsl #3
 	ldrh	r4, [r1, #16]
 	cmp	r4, r7
-	bne	.L1830
+	bne	.L1917
 	ldrh	r4, [r1, #20]
 	ldrh	r1, [r1, #18]
 	cmp	r4, r2
@@ -12810,13 +13401,13 @@ rk_sftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1830:
+.L1917:
 	adds	r3, r3, #1
-	b	.L1829
-.L1834:
+	b	.L1916
+.L1921:
 	.align	2
-.L1833:
-	.word	.LANCHOR3
+.L1920:
+	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	1
@@ -12833,26 +13424,26 @@ rk_sftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r2
-	ldr	r2, .L1854
+	ldr	r2, .L1941
 	.pad #28
 	sub	sp, sp, #28
 	mov	r3, r1
-	ldr	r4, [r2, #-164]
+	ldr	r4, [r2, #3688]
 	mov	r9, r2
 	cmp	r4, #0
-	beq	.L1850
+	beq	.L1937
 	ldrh	r2, [r4, #10]
 	add	r6, r8, #63
 	ldrh	r1, [r4, #8]
 	bic	r6, r6, #63
 	movs	r7, #0
 	str	r1, [sp, #4]
-.L1837:
+.L1924:
 	cmp	r7, r2
-	bcc	.L1845
+	bcc	.L1932
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1850
+	bhi	.L1937
 	add	r2, r4, r2, lsl #3
 	uxth	r6, r6
 	strh	r0, [r2, #16]	@ movhi
@@ -12884,32 +13475,32 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, [r9, #-168]
-	b	.L1853
-.L1845:
+	ldr	r3, [r9, #3684]
+	b	.L1940
+.L1932:
 	add	r5, r4, r7, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, r0
 	str	r1, [sp, #8]
-	bne	.L1838
+	bne	.L1925
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	cmp	r8, r1
 	str	r1, [sp, #12]
-	bls	.L1839
+	bls	.L1926
 	ldrh	r1, [r4, #14]
 	cmp	r6, r1
-	bhi	.L1850
+	bhi	.L1937
 	ldrh	r10, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #16]
-.L1840:
+.L1927:
 	ldr	r2, [sp, #16]
 	adds	r5, r5, #8
 	cmp	r7, r2
-	bcc	.L1841
+	bcc	.L1928
 	ldrh	r2, [sp, #8]
 	add	r7, r4, r7, lsl #3
 	uxth	r5, r10
@@ -12928,7 +13519,7 @@ rk_sftl_vendor_write:
 	strh	r5, [r4, #12]	@ movhi
 	add	r6, r6, r3
 	strh	r6, [r4, #14]	@ movhi
-.L1842:
+.L1929:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	adds	r3, r3, #1
@@ -12941,20 +13532,20 @@ rk_sftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r3, .L1854
-	ldr	r3, [r3, #-168]
-.L1853:
+	ldr	r3, .L1941
+	ldr	r3, [r3, #3684]
+.L1940:
 	ldr	r0, [sp, #4]
 	mov	r2, r4
 	movs	r1, #128
 	lsls	r0, r0, #7
 	blx	r3
 	movs	r0, #0
-.L1835:
+.L1922:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1841:
+.L1928:
 	ldrh	r9, [r5, #20]
 	add	r0, fp, r10
 	ldrh	r2, [r5, #16]
@@ -12971,25 +13562,25 @@ rk_sftl_vendor_write:
 	add	r10, r10, r9
 	bl	memcpy
 	ldr	r3, [sp, #20]
-	b	.L1840
-.L1839:
+	b	.L1927
+.L1926:
 	ldrh	r0, [r5, #18]
 	mov	r2, r8
 	mov	r1, r3
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r8, [r5, #20]	@ movhi
-	b	.L1842
-.L1838:
+	b	.L1929
+.L1925:
 	adds	r7, r7, #1
-	b	.L1837
-.L1850:
+	b	.L1924
+.L1937:
 	mov	r0, #-1
-	b	.L1835
-.L1855:
+	b	.L1922
+.L1942:
 	.align	2
-.L1854:
-	.word	.LANCHOR3
+.L1941:
+	.word	.LANCHOR0
 	.fnend
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	1
@@ -13011,18 +13602,18 @@ rk_sftl_vendor_storage_ioctl:
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L1870
-	ldr	r3, .L1882
+	beq	.L1957
+	ldr	r3, .L1969
 	cmp	r6, r3
-	beq	.L1859
+	beq	.L1946
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L1860
-.L1881:
+	beq	.L1947
+.L1968:
 	mvn	r5, #13
-	b	.L1858
-.L1859:
-	ldr	r6, .L1882+4
+	b	.L1945
+.L1946:
+	ldr	r6, .L1969+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13033,31 +13624,31 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1866
+	bne	.L1953
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1881
+	bne	.L1968
 	ldr	r2, [r4]
-	ldr	r3, .L1882+8
+	ldr	r3, .L1969+8
 	cmp	r2, r3
-	beq	.L1864
-.L1865:
+	beq	.L1951
+.L1952:
 	mov	r5, #-1
-.L1858:
+.L1945:
 	mov	r0, r4
 	bl	kfree
-.L1856:
+.L1943:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1864:
+.L1951:
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_read
 	adds	r3, r0, #1
-	beq	.L1865
+	beq	.L1952
 	mov	r3, sp
 	uxth	r2, r0
 	ands	r6, r6, r3
@@ -13071,17 +13662,17 @@ rk_sftl_vendor_storage_ioctl:
 	.thumb
 	.syntax unified
 	cmp	r3, #0
-	bne	.L1881
+	bne	.L1968
 	mov	r1, r4
 	mov	r0, r5
 	bl	arm_copy_to_user
 	cmp	r0, #0
-	bne	.L1881
-.L1872:
+	bne	.L1968
+.L1959:
 	mov	r5, r0
-	b	.L1858
-.L1860:
-	ldr	r6, .L1882+4
+	b	.L1945
+.L1947:
+	ldr	r6, .L1969+4
 	mov	r3, sp
 	ands	r3, r3, r6
 	ldr	r3, [r3, #72]
@@ -13091,20 +13682,20 @@ rk_sftl_vendor_storage_ioctl:
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1866
+	cbnz	r3, .L1953
 	movs	r2, #8
 	mov	r1, r5
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1881
+	bne	.L1968
 	ldr	r2, [r4]
-	ldr	r3, .L1882+8
+	ldr	r3, .L1969+8
 	cmp	r2, r3
-	bne	.L1865
+	bne	.L1952
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L1865
+	bhi	.L1952
 	mov	r3, sp
 	adds	r2, r2, #8
 	ands	r6, r6, r3
@@ -13115,32 +13706,32 @@ rk_sftl_vendor_storage_ioctl:
 @ 0 "" 2
 	.thumb
 	.syntax unified
-	cbnz	r3, .L1868
+	cbnz	r3, .L1955
 	mov	r1, r5
 	mov	r0, r4
 	bl	arm_copy_from_user
 	cmp	r0, #0
-	bne	.L1881
+	bne	.L1968
 	ldrh	r2, [r4, #6]
 	add	r1, r4, #8
 	ldrh	r0, [r4, #4]
 	bl	rk_sftl_vendor_write
-	b	.L1872
-.L1866:
+	b	.L1959
+.L1953:
 	movs	r1, #8
-.L1880:
+.L1967:
 	bl	__memzero
-	b	.L1881
-.L1868:
+	b	.L1968
+.L1955:
 	mov	r1, r2
 	mov	r0, r4
-	b	.L1880
-.L1870:
+	b	.L1967
+.L1957:
 	mov	r5, #-1
-	b	.L1856
-.L1883:
+	b	.L1943
+.L1970:
 	.align	2
-.L1882:
+.L1969:
 	.word	1074034177
 	.word	-8192
 	.word	1448232273
@@ -13158,15 +13749,14 @@ rk_sftl_vendor_register:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L1885
+	ldr	r0, .L1972
 	b	misc_register
-.L1886:
+.L1973:
 	.align	2
-.L1885:
+.L1972:
 	.word	.LANCHOR2+12
 	.fnend
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
-	.global	ftl_temp_buf
 	.global	g_nand_ops
 	.global	g_nand_phy_info
 	.global	gc_ink_free_return_value
@@ -13181,6 +13771,9 @@ rk_sftl_vendor_register:
 	.global	g_recovery_ppa_tbl
 	.global	g_recovery_page_min_ver
 	.global	g_recovery_page_num
+	.global	sftl_nand_check_spare_buf
+	.global	sftl_temp_buf
+	.global	sftl_nand_check_buf
 	.global	g_cur_erase_blk
 	.global	g_gc_skip_write_count
 	.global	g_gc_head_data_block_count
@@ -13264,7 +13857,6 @@ rk_sftl_vendor_register:
 	.global	p_sys_data_buf_1
 	.global	p_sys_data_buf
 	.global	p_plane_order_table
-	.global	g_req_cache
 	.global	req_gc_dst
 	.global	req_gc
 	.global	req_erase
@@ -13317,143 +13909,151 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	2
 	.set	.LANCHOR1,. + 0
-	.type	__func__.6666, %object
-	.size	__func__.6666, 17
-__func__.6666:
+	.type	__func__.6750, %object
+	.size	__func__.6750, 17
+__func__.6750:
 	.ascii	"INSERT_DATA_LIST\000"
-	.type	__func__.6661, %object
-	.size	__func__.6661, 17
-__func__.6661:
+	.type	__func__.6745, %object
+	.size	__func__.6745, 17
+__func__.6745:
 	.ascii	"INSERT_FREE_LIST\000"
-	.type	__func__.6697, %object
-	.size	__func__.6697, 17
-__func__.6697:
+	.type	__func__.6781, %object
+	.size	__func__.6781, 17
+__func__.6781:
 	.ascii	"List_remove_node\000"
-	.type	__func__.6729, %object
-	.size	__func__.6729, 22
-__func__.6729:
+	.type	__func__.6813, %object
+	.size	__func__.6813, 22
+__func__.6813:
 	.ascii	"List_update_data_list\000"
-	.type	__func__.6835, %object
-	.size	__func__.6835, 22
-__func__.6835:
+	.type	__func__.6920, %object
+	.size	__func__.6920, 22
+__func__.6920:
 	.ascii	"select_l2p_ram_region\000"
-	.type	__func__.7158, %object
-	.size	__func__.7158, 16
-__func__.7158:
+	.type	__func__.7243, %object
+	.size	__func__.7243, 16
+__func__.7243:
 	.ascii	"make_superblock\000"
-	.type	__func__.7333, %object
-	.size	__func__.7333, 19
-__func__.7333:
+	.type	__func__.7418, %object
+	.size	__func__.7418, 19
+__func__.7418:
 	.ascii	"get_new_active_ppa\000"
-	.type	__func__.17662, %object
-	.size	__func__.17662, 15
-__func__.17662:
-	.ascii	"FlashReadPages\000"
-	.type	__func__.17679, %object
-	.size	__func__.17679, 15
-__func__.17679:
-	.ascii	"FlashProgPages\000"
-	.type	__func__.6771, %object
-	.size	__func__.6771, 26
-__func__.6771:
+	.type	__func__.17812, %object
+	.size	__func__.17812, 17
+__func__.17812:
+	.ascii	"FlashEraseBlocks\000"
+	.type	__func__.6855, %object
+	.size	__func__.6855, 26
+__func__.6855:
 	.ascii	"ftl_map_blk_alloc_new_blk\000"
-	.type	__func__.6275, %object
-	.size	__func__.6275, 11
-__func__.6275:
+	.type	__func__.6282, %object
+	.size	__func__.6282, 11
+__func__.6282:
 	.ascii	"FtlMemInit\000"
-	.type	__func__.6501, %object
-	.size	__func__.6501, 14
-__func__.6501:
+	.type	__func__.6587, %object
+	.size	__func__.6587, 14
+__func__.6587:
 	.ascii	"FtlBbt2Bitmap\000"
-	.type	__func__.6738, %object
-	.size	__func__.6738, 16
-__func__.6738:
-	.ascii	"load_l2p_region\000"
-	.type	__func__.6796, %object
-	.size	__func__.6796, 31
-__func__.6796:
+	.type	__func__.7264, %object
+	.size	__func__.7264, 18
+__func__.7264:
+	.ascii	"SupperBlkListInit\000"
+	.type	__func__.17771, %object
+	.size	__func__.17771, 15
+__func__.17771:
+	.ascii	"FlashReadPages\000"
+	.type	__func__.7032, %object
+	.size	__func__.7032, 14
+__func__.7032:
+	.ascii	"FtlScanSysBlk\000"
+	.type	__func__.6630, %object
+	.size	__func__.6630, 11
+__func__.6630:
+	.ascii	"FtlLoadBbt\000"
+	.type	__func__.7089, %object
+	.size	__func__.7089, 15
+__func__.7089:
+	.ascii	"FtlLoadSysInfo\000"
+	.type	__func__.17789, %object
+	.size	__func__.17789, 15
+__func__.17789:
+	.ascii	"FlashProgPages\000"
+	.type	__func__.6881, %object
+	.size	__func__.6881, 31
+__func__.6881:
 	.ascii	"Ftl_write_map_blk_to_last_page\000"
-	.type	__func__.6810, %object
-	.size	__func__.6810, 16
-__func__.6810:
+	.type	__func__.6895, %object
+	.size	__func__.6895, 16
+__func__.6895:
 	.ascii	"FtlMapWritePage\000"
-	.type	__func__.6782, %object
-	.size	__func__.6782, 15
-__func__.6782:
+	.type	__func__.6822, %object
+	.size	__func__.6822, 16
+__func__.6822:
+	.ascii	"load_l2p_region\000"
+	.type	__func__.6866, %object
+	.size	__func__.6866, 15
+__func__.6866:
 	.ascii	"ftl_map_blk_gc\000"
-	.type	__func__.6852, %object
-	.size	__func__.6852, 9
-__func__.6852:
+	.type	__func__.6937, %object
+	.size	__func__.6937, 9
+__func__.6937:
 	.ascii	"log2phys\000"
-	.type	__func__.7067, %object
-	.size	__func__.7067, 16
-__func__.7067:
+	.type	__func__.7152, %object
+	.size	__func__.7152, 16
+__func__.7152:
 	.ascii	"FtlReUsePrevPpa\000"
-	.type	__func__.7220, %object
-	.size	__func__.7220, 14
-__func__.7220:
-	.ascii	"ftl_check_vpc\000"
-	.type	__func__.6947, %object
-	.size	__func__.6947, 14
-__func__.6947:
-	.ascii	"FtlScanSysBlk\000"
-	.type	__func__.7179, %object
-	.size	__func__.7179, 18
-__func__.7179:
-	.ascii	"SupperBlkListInit\000"
 	.type	__func__.7305, %object
-	.size	__func__.7305, 25
+	.size	__func__.7305, 14
 __func__.7305:
+	.ascii	"ftl_check_vpc\000"
+	.type	__func__.7390, %object
+	.size	__func__.7390, 25
+__func__.7390:
 	.ascii	"allocate_data_superblock\000"
-	.type	__func__.7346, %object
-	.size	__func__.7346, 16
-__func__.7346:
+	.type	__func__.7431, %object
+	.size	__func__.7431, 16
+__func__.7431:
 	.ascii	"update_vpc_list\000"
-	.type	__func__.7353, %object
-	.size	__func__.7353, 20
-__func__.7353:
+	.type	__func__.7438, %object
+	.size	__func__.7438, 20
+__func__.7438:
 	.ascii	"decrement_vpc_count\000"
-	.type	__func__.7101, %object
-	.size	__func__.7101, 22
-__func__.7101:
+	.type	__func__.7186, %object
+	.size	__func__.7186, 22
+__func__.7186:
 	.ascii	"FtlRecoverySuperblock\000"
-	.type	__func__.6544, %object
-	.size	__func__.6544, 11
-__func__.6544:
-	.ascii	"FtlLoadBbt\000"
-	.type	__func__.6925, %object
-	.size	__func__.6925, 15
-__func__.6925:
+	.type	__func__.7010, %object
+	.size	__func__.7010, 15
+__func__.7010:
 	.ascii	"FtlVpcTblFlush\000"
-	.type	__func__.7204, %object
-	.size	__func__.7204, 21
-__func__.7204:
+	.type	__func__.7289, %object
+	.size	__func__.7289, 21
+__func__.7289:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.7326, %object
-	.size	__func__.7326, 29
-__func__.7326:
+	.type	__func__.7411, %object
+	.size	__func__.7411, 29
+__func__.7411:
 	.ascii	"allocate_new_data_superblock\000"
-	.type	__func__.6399, %object
-	.size	__func__.6399, 13
-__func__.6399:
+	.type	__func__.6406, %object
+	.size	__func__.6406, 13
+__func__.6406:
 	.ascii	"FtlProgPages\000"
-	.type	__func__.7423, %object
-	.size	__func__.7423, 19
-__func__.7423:
+	.type	__func__.7508, %object
+	.size	__func__.7508, 19
+__func__.7508:
 	.ascii	"FtlGcFreeTempBlock\000"
-	.type	__func__.7529, %object
-	.size	__func__.7529, 23
-__func__.7529:
+	.type	__func__.7619, %object
+	.size	__func__.7619, 23
+__func__.7619:
 	.ascii	"rk_ftl_garbage_collect\000"
-	.type	__func__.6427, %object
-	.size	__func__.6427, 9
-__func__.6427:
+	.type	__func__.6434, %object
+	.size	__func__.6434, 9
+__func__.6434:
 	.ascii	"FtlWrite\000"
-	.type	__func__.7004, %object
-	.size	__func__.7004, 15
-__func__.7004:
-	.ascii	"FtlLoadSysInfo\000"
-	.space	2
+	.type	__func__.6546, %object
+	.size	__func__.6546, 14
+__func__.6546:
+	.ascii	"FtlWriteToIDB\000"
+	.space	3
 	.type	rk_sftl_vendor_storage_fops, %object
 	.size	rk_sftl_vendor_storage_fops, 108
 rk_sftl_vendor_storage_fops:
@@ -13481,13 +14081,12 @@ power_up_flag:
 	.size	rkflash_vender_storage_dev, 40
 rkflash_vender_storage_dev:
 	.word	255
-	.word	.LC107
+	.word	.LC118
 	.word	rk_sftl_vendor_storage_fops
 	.space	28
 	.bss
 	.align	2
 	.set	.LANCHOR0,. + 0
-	.set	.LANCHOR3,. + 4344
 	.type	g_nand_phy_info, %object
 	.size	g_nand_phy_info, 24
 g_nand_phy_info:
@@ -13884,42 +14483,10 @@ g_gc_bad_block_gc_index:
 	.size	g_nand_ops, 16
 g_nand_ops:
 	.space	16
-	.type	req_sys, %object
-	.size	req_sys, 20
-req_sys:
-	.space	20
-	.type	p_sys_data_buf, %object
-	.size	p_sys_data_buf, 4
-p_sys_data_buf:
-	.space	4
-	.type	p_sys_spare_buf, %object
-	.size	p_sys_spare_buf, 4
-p_sys_spare_buf:
-	.space	4
-	.type	check_spare_buf, %object
-	.size	check_spare_buf, 512
-check_spare_buf:
-	.space	512
 	.type	req_erase, %object
 	.size	req_erase, 4
 req_erase:
 	.space	4
-	.type	g_cur_erase_blk, %object
-	.size	g_cur_erase_blk, 4
-g_cur_erase_blk:
-	.space	4
-	.type	p_io_data_buf_1, %object
-	.size	p_io_data_buf_1, 4
-p_io_data_buf_1:
-	.space	4
-	.type	p_io_spare_buf, %object
-	.size	p_io_spare_buf, 4
-p_io_spare_buf:
-	.space	4
-	.type	p_io_data_buf_0, %object
-	.size	p_io_data_buf_0, 4
-p_io_data_buf_0:
-	.space	4
 	.type	g_in_gc_progress, %object
 	.size	g_in_gc_progress, 4
 g_in_gc_progress:
@@ -13932,6 +14499,10 @@ g_gc_head_data_block:
 	.size	g_gc_head_data_block_count, 4
 g_gc_head_data_block_count:
 	.space	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.space	4
 	.type	req_read, %object
 	.size	req_read, 4
 req_read:
@@ -13944,6 +14515,10 @@ req_gc_dst:
 	.size	req_prgm, 4
 req_prgm:
 	.space	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 4
+p_sys_data_buf:
+	.space	4
 	.type	p_sys_data_buf_1, %object
 	.size	p_sys_data_buf_1, 4
 p_sys_data_buf_1:
@@ -13952,6 +14527,34 @@ p_sys_data_buf_1:
 	.size	p_vendor_data_buf, 4
 p_vendor_data_buf:
 	.space	4
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 4
+p_io_data_buf_0:
+	.space	4
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 4
+p_io_data_buf_1:
+	.space	4
+	.type	sftl_nand_check_buf, %object
+	.size	sftl_nand_check_buf, 4
+sftl_nand_check_buf:
+	.space	4
+	.type	sftl_temp_buf, %object
+	.size	sftl_temp_buf, 4
+sftl_temp_buf:
+	.space	4
+	.type	sftl_nand_check_spare_buf, %object
+	.size	sftl_nand_check_spare_buf, 4
+sftl_nand_check_spare_buf:
+	.space	4
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 4
+p_sys_spare_buf:
+	.space	4
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 4
+p_io_spare_buf:
+	.space	4
 	.type	g_ect_tbl_info_size, %object
 	.size	g_ect_tbl_info_size, 2
 g_ect_tbl_info_size:
@@ -14007,27 +14610,17 @@ c_ftl_nand_bbm_buf_size:
 	.space	2
 	.space	2
 	.type	gL2pMapInfo, %object
-	.size	gL2pMapInfo, 40
+	.size	gL2pMapInfo, 44
 gL2pMapInfo:
-	.space	40
+	.space	44
 	.type	g_totle_map_block, %object
 	.size	g_totle_map_block, 2
 g_totle_map_block:
 	.space	2
-	.space	2
-	.type	gVendorBlkInfo, %object
-	.size	gVendorBlkInfo, 40
-gVendorBlkInfo:
-	.space	40
-	.type	g_req_cache, %object
-	.size	g_req_cache, 4
-g_req_cache:
-	.space	4
 	.type	g_tmp_data_superblock_id, %object
 	.size	g_tmp_data_superblock_id, 2
 g_tmp_data_superblock_id:
 	.space	2
-	.space	2
 	.type	g_totle_swl_count, %object
 	.size	g_totle_swl_count, 4
 g_totle_swl_count:
@@ -14040,6 +14633,18 @@ ftl_gc_temp_power_lost_recovery_flag:
 	.size	g_recovery_page_min_ver, 4
 g_recovery_page_min_ver:
 	.space	4
+	.type	req_sys, %object
+	.size	req_sys, 20
+req_sys:
+	.space	20
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.space	4
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
 	.type	g_power_lost_recovery_flag, %object
 	.size	g_power_lost_recovery_flag, 2
 g_power_lost_recovery_flag:
@@ -14058,10 +14663,6 @@ g_recovery_ppa_tbl:
 g_ect_tbl_power_up_flush:
 	.space	2
 	.space	2
-	.type	gp_last_act_superblock, %object
-	.size	gp_last_act_superblock, 4
-gp_last_act_superblock:
-	.space	4
 	.type	gc_discard_updated, %object
 	.size	gc_discard_updated, 4
 gc_discard_updated:
@@ -14083,9 +14684,17 @@ g_gc_cur_blk_max_valid_pages:
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
 	.space	4
-	.type	g_MaxLbn, %object
-	.size	g_MaxLbn, 4
-g_MaxLbn:
+	.type	idb_need_write_back, %object
+	.size	idb_need_write_back, 4
+idb_need_write_back:
+	.space	4
+	.type	idb_buf, %object
+	.size	idb_buf, 4
+idb_buf:
+	.space	4
+	.type	gp_flash_check_buf, %object
+	.size	gp_flash_check_buf, 4
+gp_flash_check_buf:
 	.space	4
 	.type	_flash_read, %object
 	.size	_flash_read, 4
@@ -14099,18 +14708,14 @@ _flash_write:
 	.size	g_vendor, 4
 g_vendor:
 	.space	4
-	.type	ftl_temp_buf, %object
-	.size	ftl_temp_buf, 4096
-ftl_temp_buf:
-	.space	4096
-	.type	check_buf, %object
-	.size	check_buf, 4096
-check_buf:
-	.space	4096
 	.type	check_vpc_table, %object
 	.size	check_vpc_table, 16384
 check_vpc_table:
 	.space	16384
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 4
+gp_last_act_superblock:
+	.space	4
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
 	.ascii	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\012"
@@ -14254,7 +14859,7 @@ check_vpc_table:
 .LC69:
 	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
 .LC70:
-	.ascii	"SFTL version: 5.0.44 20180713\000"
+	.ascii	"SFTL version: 5.0.48 20180930\000"
 .LC71:
 	.ascii	"%s\012\000"
 .LC72:
@@ -14265,70 +14870,92 @@ check_vpc_table:
 .LC74:
 	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
 .LC75:
-	.ascii	"\0014\000"
+	.ascii	"%s %p + 0x%x:\000"
 .LC76:
-	.ascii	"prog read error: = %x\012\000"
+	.ascii	"0x%08x,\000"
 .LC77:
-	.ascii	"prog read s error: = %x %x %x\012\000"
+	.ascii	"0x%04x,\000"
 .LC78:
-	.ascii	"prog read d error: = %x %x %x\012\000"
+	.ascii	"0x%02x,\000"
 .LC79:
-	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+	.ascii	"\012\000"
 .LC80:
-	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
-	.ascii	"\000"
+	.ascii	"%s: addr: %x is in id block!!!!!!!!!!\012\000"
 .LC81:
-	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
+	.ascii	"not free: w: d:\000"
 .LC82:
-	.ascii	"%s error allocating memory. return -1\012\000"
+	.ascii	"not free: w: s:\000"
 .LC83:
-	.ascii	"region_id = %x phyAddr = %x\012\000"
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
+	.ascii	"\000"
 .LC84:
-	.ascii	"spare:\000"
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
 .LC85:
-	.ascii	"map_ppn:\000"
+	.ascii	"%s error allocating memory. return -1\012\000"
 .LC86:
-	.ascii	"FtlMapWritePage error = %x \012\000"
+	.ascii	"prog read error: = %x\012\000"
 .LC87:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"prog read s error: = %x %x %x\012\000"
 .LC88:
-	.ascii	"ftl_scan_all_data = %x\012\000"
+	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC89:
-	.ascii	"scan lpa = %x ppa= %x\012\000"
+	.ascii	"FtlMapWritePage error = %x \012\000"
 .LC90:
-	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
-	.ascii	"\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC91:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC92:
-	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
+	.ascii	"spare:\000"
 .LC93:
-	.ascii	"free blk vpc error %x = %x  %x\012\000"
+	.ascii	"map_ppn:\000"
 .LC94:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC95:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"...%s enter...\012\000"
 .LC96:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC97:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC98:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"ftl_scan_all_data = %x\012\000"
 .LC99:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"scan lpa = %x ppa= %x\012\000"
 .LC100:
-	.ascii	"no ect\000"
+	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC101:
-	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+	.ascii	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \012\000"
 .LC102:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC103:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC104:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC105:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC106:
-	.ascii	"\0013vendor storage %x,%x,%x\012\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC107:
-	.ascii	"vendor_storage\000"
\ No newline at end of file
+	.ascii	"spuer block %x vpn is 0\012 \000"
+.LC108:
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+.LC109:
+	.ascii	"no ect\000"
+.LC110:
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+.LC111:
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+.LC112:
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+.LC113:
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+.LC114:
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+.LC115:
+	.ascii	"write_idblock fix data %x %x %x\012\000"
+.LC116:
+	.ascii	"write_idblock fail! %x %x %x %x\012\000"
+.LC117:
+	.ascii	"%s idb buffer alloc fail\012\000"
+.LC118:
+	.ascii	"vendor_storage\000"
diff --git a/drivers/rkflash/rk_sftl_arm_v8.S b/drivers/rkflash/rk_sftl_arm_v8.S
index add074698025..d56521ae0232 100644
--- a/drivers/rkflash/rk_sftl_arm_v8.S
+++ b/drivers/rkflash/rk_sftl_arm_v8.S
@@ -2,7 +2,7 @@
 
 /*
  * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
- * date: 2018-07-19
+ * date: 2018-09-30
  */
 	.arch armv8-a
 	.file	"rk_sftl.c"
@@ -271,6 +271,13 @@ IsBlkInVendorPart:
 	ret
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
 	.align	2
+	.global	FtlCacheWriteBack
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	mov	w0, 0
+	ret
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	2
 	.global	sftl_get_density
 	.type	sftl_get_density, %function
 sftl_get_density:
@@ -305,7 +312,7 @@ FtlBbmMapBadBlock:
 	str	w4, [x0, x5]
 	adrp	x0, .LC0
 	add	x0, x0, :lo12:.LC0
-	bl	printk
+	bl	sftl_printk
 	ldrh	w0, [x19, 6]
 	add	w0, w0, 1
 	strh	w0, [x19, 6]
@@ -351,23 +358,23 @@ FtlBbtCalcTotleCnt:
 	ldrh	w0, [x0, 58]
 	mul	w6, w6, w0
 	cmp	w4, w6
-	blt	.L42
+	blt	.L43
 	mov	w0, w5
 	ret
-.L42:
+.L43:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-.L35:
+.L36:
 	mov	w0, w4
 	bl	FtlBbmIsBadBlock
-	cbz	w0, .L34
+	cbz	w0, .L35
 	add	w5, w5, 1
 	and	w5, w5, 65535
-.L34:
+.L35:
 	add	w4, w4, 1
 	and	w4, w4, 65535
 	cmp	w4, w6
-	blt	.L35
+	blt	.L36
 	mov	w0, w5
 	ldp	x29, x30, [sp], 16
 	ret
@@ -424,12 +431,12 @@ P2V_block_in_plane:
 ftl_cmp_data_ver:
 	cmp	w0, w1
 	mov	w2, -2147483648
-	bls	.L47
+	bls	.L48
 	sub	w1, w0, w1
 	cmp	w1, w2
 	cset	w0, ls
 	ret
-.L47:
+.L48:
 	sub	w1, w1, w0
 	cmp	w1, w2
 	cset	w0, hi
@@ -463,23 +470,23 @@ FtlFreeSysBLkSort:
 	add	x2, x0, :lo12:.LANCHOR0
 	add	x1, x2, 256
 	ldrh	w3, [x1, 6]
-	cbz	w3, .L51
+	cbz	w3, .L52
 	ldrh	w5, [x2, 2340]
 	mov	w6, 0
 	ldrh	w3, [x1, 2]
 	mov	w4, 0
 	ldrh	w2, [x1, 4]
 	and	w5, w5, 31
-.L53:
+.L54:
 	cmp	w5, w4
-	bgt	.L54
-	cbz	w6, .L51
+	bgt	.L55
+	cbz	w6, .L52
 	add	x0, x0, :lo12:.LANCHOR0
 	strh	w3, [x0, 258]
 	strh	w2, [x0, 260]
-.L51:
+.L52:
 	ret
-.L54:
+.L55:
 	add	x6, x1, x3, sxtw 1
 	add	w4, w4, 1
 	add	w3, w3, 1
@@ -491,7 +498,7 @@ FtlFreeSysBLkSort:
 	mov	w6, 1
 	add	w2, w2, w6
 	and	w2, w2, 1023
-	b	.L53
+	b	.L54
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
 	.align	2
 	.global	IsInFreeQueue
@@ -503,25 +510,25 @@ IsInFreeQueue:
 	and	w0, w0, 65535
 	ldrh	w4, [x1, 6]
 	cmp	w4, 1024
-	beq	.L64
+	beq	.L65
 	ldrh	w5, [x1, 2]
 	mov	w3, 0
-.L62:
+.L63:
 	cmp	w3, w4
-	bcc	.L63
-.L64:
+	bcc	.L64
+.L65:
 	mov	w0, 0
 	ret
-.L63:
+.L64:
 	add	w2, w3, w5
 	ubfiz	x2, x2, 1, 10
 	add	x2, x1, x2
 	ldrh	w2, [x2, 8]
 	cmp	w2, w0
-	beq	.L65
+	beq	.L66
 	add	w3, w3, 1
-	b	.L62
-.L65:
+	b	.L63
+.L66:
 	mov	w0, 1
 	ret
 	.size	IsInFreeQueue, .-IsInFreeQueue
@@ -534,7 +541,7 @@ insert_data_list:
 	and	w0, w0, 65535
 	ldrh	w1, [x3, 44]
 	cmp	w1, w0
-	bls	.L82
+	bls	.L83
 	mov	w7, 6
 	ldr	x12, [x3, 2360]
 	mov	w1, -1
@@ -543,12 +550,12 @@ insert_data_list:
 	strh	w1, [x5, 2]
 	strh	w1, [x12, x11]
 	ldr	x1, [x3, 2368]
-	cbnz	x1, .L69
+	cbnz	x1, .L70
 	str	x5, [x3, 2368]
-.L82:
+.L83:
 	mov	w0, 0
 	ret
-.L69:
+.L70:
 	stp	x29, x30, [sp, -16]!
 	ubfiz	x8, x0, 1, 16
 	mov	x4, x2
@@ -573,13 +580,13 @@ insert_data_list:
 	add	x9, x15, x8
 	mov	w8, w7
 	and	w2, w2, 65535
-.L77:
+.L78:
 	add	w3, w3, 1
 	and	w3, w3, 65535
 	cmp	w3, w18
-	bhi	.L68
+	bhi	.L69
 	cmp	w0, w2
-	beq	.L68
+	beq	.L69
 	ubfiz	x16, x2, 1, 16
 	ldrh	w17, [x1, 4]
 	cmp	w17, 0
@@ -587,48 +594,48 @@ insert_data_list:
 	mul	w7, w7, w17
 	csel	w7, w7, w10, ne
 	cmp	w6, w7
-	bne	.L73
+	bne	.L74
 	ldrh	w16, [x15, x16]
 	ldrh	w7, [x9]
 	cmp	w16, w7
-	bcc	.L75
-.L74:
+	bcc	.L76
+.L75:
 	strh	w2, [x12, x11]
 	ldrh	w2, [x1, 2]
 	strh	w2, [x5, 2]
 	add	x2, x4, :lo12:.LANCHOR0
 	ldr	x3, [x2, 2368]
 	cmp	x1, x3
-	bne	.L78
+	bne	.L79
 	strh	w0, [x1, 2]
 	str	x5, [x2, 2368]
-	b	.L68
-.L73:
-	bcc	.L74
-.L75:
+	b	.L69
+.L74:
+	bcc	.L75
+.L76:
 	ldrh	w7, [x1]
 	cmp	w7, w30
-	bne	.L76
+	bne	.L77
 	strh	w2, [x5, 2]
 	add	x2, x4, :lo12:.LANCHOR0
 	strh	w0, [x1]
 	str	x5, [x2, 2392]
-.L68:
+.L69:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L76:
+.L77:
 	umaddl	x1, w7, w8, x13
 	mov	w2, w7
-	b	.L77
-.L78:
+	b	.L78
+.L79:
 	ldrh	w3, [x1, 2]
 	mov	w4, 6
 	ldr	x2, [x2, 2360]
 	umull	x3, w3, w4
 	strh	w0, [x2, x3]
 	strh	w0, [x1, 2]
-	b	.L68
+	b	.L69
 	.size	insert_data_list, .-insert_data_list
 	.align	2
 	.global	INSERT_DATA_LIST
@@ -645,14 +652,14 @@ INSERT_DATA_LIST:
 	strh	w0, [x1, 2400]
 	ldrh	w1, [x1, 44]
 	cmp	w1, w0
-	bcs	.L84
+	bcs	.L85
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 221
+	mov	w2, 214
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L84:
+	bl	sftl_printk
+.L85:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
@@ -663,7 +670,7 @@ insert_free_list:
 	and	w0, w0, 65535
 	mov	w7, 65535
 	cmp	w0, w7
-	beq	.L88
+	beq	.L89
 	adrp	x2, .LANCHOR0
 	add	x5, x2, :lo12:.LANCHOR0
 	mov	w6, 6
@@ -675,12 +682,12 @@ insert_free_list:
 	strh	w1, [x4, 2]
 	strh	w1, [x9, x8]
 	ldr	x1, [x5, 2408]
-	cbnz	x1, .L89
+	cbnz	x1, .L90
 	str	x4, [x5, 2408]
-.L88:
+.L89:
 	mov	w0, 0
 	ret
-.L89:
+.L90:
 	ldr	x11, [x5, 2384]
 	ubfiz	x2, x0, 1, 16
 	ldr	x10, [x5, 2360]
@@ -691,40 +698,40 @@ insert_free_list:
 	asr	x2, x2, 1
 	mul	x2, x2, x5
 	and	w2, w2, 65535
-.L92:
+.L93:
 	ubfiz	x5, x2, 1, 16
 	ldrh	w5, [x11, x5]
 	cmp	w5, w12
-	bcs	.L90
+	bcs	.L91
 	ldrh	w5, [x1]
 	cmp	w5, w7
-	bne	.L91
+	bne	.L92
 	strh	w2, [x4, 2]
 	strh	w0, [x1]
-	b	.L88
-.L91:
+	b	.L89
+.L92:
 	umaddl	x1, w5, w6, x10
 	mov	w2, w5
-	b	.L92
-.L90:
+	b	.L93
+.L91:
 	ldrh	w5, [x1, 2]
 	strh	w5, [x4, 2]
 	strh	w2, [x9, x8]
 	add	x2, x3, :lo12:.LANCHOR0
 	ldr	x3, [x2, 2408]
 	cmp	x1, x3
-	bne	.L93
+	bne	.L94
 	strh	w0, [x1, 2]
 	str	x4, [x2, 2408]
-	b	.L88
-.L93:
+	b	.L89
+.L94:
 	ldrh	w3, [x1, 2]
 	mov	w4, 6
 	ldr	x2, [x2, 2360]
 	umull	x3, w3, w4
 	strh	w0, [x2, x3]
 	strh	w0, [x1, 2]
-	b	.L88
+	b	.L89
 	.size	insert_free_list, .-insert_free_list
 	.align	2
 	.global	INSERT_FREE_LIST
@@ -741,15 +748,15 @@ INSERT_FREE_LIST:
 	strh	w0, [x1, 2416]
 	ldrh	w1, [x1, 44]
 	cmp	w1, w0
-	bcs	.L94
+	bcs	.L95
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 214
+	mov	w2, 207
 	add	x1, x1, 24
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L94:
+	bl	sftl_printk
+.L95:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
@@ -773,27 +780,27 @@ List_remove_node:
 	add	x20, x22, x21
 	ldrh	w1, [x20, 2]
 	cmp	w1, w0
-	bne	.L98
+	bne	.L99
 	ldr	x0, [x23]
 	cmp	x20, x0
-	beq	.L98
+	beq	.L99
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 379
+	mov	w2, 372
 	add	x1, x1, 48
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L98:
+	bl	sftl_printk
+.L99:
 	ldr	x0, [x23]
 	mov	w1, 65535
 	cmp	x20, x0
 	ldrh	w0, [x22, x21]
-	bne	.L99
-	cmp	w0, w1
 	bne	.L100
+	cmp	w0, w1
+	bne	.L101
 	str	xzr, [x23]
-.L101:
+.L102:
 	mov	w0, -1
 	strh	w0, [x22, x21]
 	strh	w0, [x20, 2]
@@ -803,7 +810,7 @@ List_remove_node:
 	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
-.L100:
+.L101:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 6
 	ldr	x1, [x19, 2360]
@@ -811,21 +818,21 @@ List_remove_node:
 	mov	w1, -1
 	str	x0, [x23]
 	strh	w1, [x0, 2]
-	b	.L101
-.L99:
+	b	.L102
+.L100:
 	cmp	w0, w1
 	ldrh	w1, [x20, 2]
-	bne	.L102
+	bne	.L103
 	cmp	w1, w0
-	beq	.L101
+	beq	.L102
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 6
 	mov	w2, -1
 	umull	x1, w1, w0
 	ldr	x0, [x19, 2360]
 	strh	w2, [x0, x1]
-	b	.L101
-.L102:
+	b	.L102
+.L103:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 6
 	ldr	x3, [x19, 2360]
@@ -836,14 +843,14 @@ List_remove_node:
 	ldrh	w3, [x22, x21]
 	umull	x0, w0, w2
 	strh	w3, [x1, x0]
-	b	.L101
+	b	.L102
 	.size	List_remove_node, .-List_remove_node
 	.align	2
 	.global	List_pop_index_node
 	.type	List_pop_index_node, %function
 List_pop_index_node:
 	ldr	x2, [x0]
-	cbz	x2, .L110
+	cbz	x2, .L111
 	stp	x29, x30, [sp, -32]!
 	adrp	x3, .LANCHOR0+2360
 	and	w1, w1, 65535
@@ -852,9 +859,9 @@ List_pop_index_node:
 	str	x19, [sp, 16]
 	mov	w5, 6
 	ldr	x19, [x3, #:lo12:.LANCHOR0+2360]
-.L106:
-	cbnz	w1, .L107
-.L109:
+.L107:
+	cbnz	w1, .L108
+.L110:
 	sub	x19, x2, x19
 	mov	x2, -6148914691236517206
 	asr	x19, x19, 1
@@ -867,15 +874,15 @@ List_pop_index_node:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L107:
+.L108:
 	ldrh	w3, [x2]
 	cmp	w3, w4
-	beq	.L109
+	beq	.L110
 	sub	w1, w1, #1
 	umaddl	x2, w3, w5, x19
 	and	w1, w1, 65535
-	b	.L106
-.L110:
+	b	.L107
+.L111:
 	mov	w0, 65535
 	ret
 	.size	List_pop_index_node, .-List_pop_index_node
@@ -898,25 +905,25 @@ List_get_gc_head_node:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 2368]
-	cbz	x1, .L122
+	cbz	x1, .L123
 	ldr	x3, [x0, 2360]
 	mov	w4, 6
 	mov	w0, 65535
-.L119:
-	cbz	w2, .L120
+.L120:
+	cbz	w2, .L121
 	ldrh	w1, [x1]
 	cmp	w1, w0
-	bne	.L121
+	bne	.L122
 	ret
-.L121:
+.L122:
 	sub	w2, w2, #1
 	umaddl	x1, w1, w4, x3
 	and	w2, w2, 65535
-	b	.L119
-.L122:
+	b	.L120
+.L123:
 	mov	w0, 65535
 	ret
-.L120:
+.L121:
 	sub	x0, x1, x3
 	mov	x1, -6148914691236517206
 	asr	x0, x0, 1
@@ -939,20 +946,20 @@ List_update_data_list:
 	stp	x23, x24, [sp, 48]
 	ldrh	w1, [x0, 2424]
 	cmp	w1, w20
-	beq	.L125
+	beq	.L126
 	ldrh	w1, [x0, 2472]
 	cmp	w1, w20
-	beq	.L125
+	beq	.L126
 	ldrh	w1, [x0, 2520]
 	cmp	w1, w20
-	beq	.L125
+	beq	.L126
 	mov	w22, 6
 	ldr	x24, [x0, 2360]
 	ldr	x1, [x0, 2368]
 	umull	x22, w20, w22
 	add	x23, x24, x22
 	cmp	x23, x1
-	beq	.L125
+	beq	.L126
 	ldr	x2, [x0, 2376]
 	ubfiz	x1, x20, 1, 16
 	ldrh	w0, [x23, 4]
@@ -963,26 +970,26 @@ List_update_data_list:
 	ldrh	w0, [x23, 2]
 	csinv	w21, w21, wzr, ne
 	cmp	w0, w1
-	bne	.L128
+	bne	.L129
 	ldrh	w1, [x24, x22]
 	cmp	w1, w0
-	bne	.L128
+	bne	.L129
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 470
+	mov	w2, 463
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L128:
+	bl	sftl_printk
+.L129:
 	ldrh	w0, [x23, 2]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L129
+	bne	.L130
 	ldrh	w1, [x24, x22]
 	cmp	w1, w0
-	beq	.L125
-.L129:
+	beq	.L126
+.L130:
 	mov	w1, 6
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	x2, -6148914691236517206
@@ -999,27 +1006,27 @@ List_update_data_list:
 	mul	w0, w1, w2
 	csinv	w0, w0, wzr, ne
 	cmp	w21, w0
-	bcs	.L125
+	bcs	.L126
 	mov	w1, w20
 	add	x0, x22, 2368
 	bl	List_remove_node
 	ldrh	w0, [x22, 2400]
-	cbnz	w0, .L131
+	cbnz	w0, .L132
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 481
+	mov	w2, 474
 	add	x1, x1, 72
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L131:
+	bl	sftl_printk
+.L132:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x19, 2400]
 	sub	w0, w0, #1
 	strh	w0, [x19, 2400]
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L125:
+.L126:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -1040,73 +1047,73 @@ select_l2p_ram_region:
 	mov	w4, 65535
 	ldrh	w2, [x0, 142]
 	ldr	x0, [x0, 2568]
-.L136:
+.L137:
 	and	w19, w3, 65535
 	cmp	w19, w2
-	bcc	.L138
+	bcc	.L139
 	add	x4, x0, 4
 	mov	w19, w2
 	mov	w6, -2147483648
 	mov	w3, 0
-.L139:
+.L140:
 	cmp	w3, w2
-	bne	.L141
+	bne	.L142
 	cmp	w19, w2
-	bcc	.L137
+	bcc	.L138
 	add	x1, x1, :lo12:.LANCHOR0
 	mov	w19, w2
 	mov	w3, -1
 	ldrh	w4, [x1, 2576]
 	mov	w1, 0
-.L142:
+.L143:
 	cmp	w1, w2
-	bne	.L144
+	bne	.L145
 	cmp	w19, w1
-	bcc	.L137
+	bcc	.L138
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 784
+	mov	w2, 787
 	add	x1, x1, 96
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L137
-.L138:
+	bl	sftl_printk
+	b	.L138
+.L139:
 	add	x3, x3, 1
 	add	x5, x0, x3, lsl 4
 	ldrh	w5, [x5, -16]
 	cmp	w5, w4
-	bne	.L136
-.L137:
+	bne	.L137
+.L138:
 	mov	w0, w19
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L141:
+.L142:
 	ldr	w5, [x4]
-	tbnz	w5, #31, .L140
+	tbnz	w5, #31, .L141
 	cmp	w6, w5
-	bls	.L140
+	bls	.L141
 	mov	w6, w5
 	mov	w19, w3
-.L140:
+.L141:
 	add	w3, w3, 1
 	add	x4, x4, 16
 	and	w3, w3, 65535
-	b	.L139
-.L144:
+	b	.L140
+.L145:
 	ldr	w6, [x0, 4]
 	cmp	w3, w6
-	bls	.L143
+	bls	.L144
 	ldrh	w5, [x0]
 	cmp	w5, w4
 	csel	w3, w3, w6, eq
 	csel	w19, w19, w1, eq
-.L143:
+.L144:
 	add	w1, w1, 1
 	add	x0, x0, 16
 	and	w1, w1, 65535
-	b	.L142
+	b	.L143
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
 	.global	FtlUpdateVaildLpn
@@ -1116,12 +1123,12 @@ FtlUpdateVaildLpn:
 	add	x3, x1, :lo12:.LANCHOR0
 	ldrh	w2, [x3, 2578]
 	cmp	w2, 4
-	bhi	.L147
-	cbnz	w0, .L147
+	bhi	.L148
+	cbnz	w0, .L148
 	add	w2, w2, 1
 	strh	w2, [x3, 2578]
 	ret
-.L147:
+.L148:
 	add	x0, x1, :lo12:.LANCHOR0
 	mov	w6, 65535
 	mov	x1, 0
@@ -1129,33 +1136,33 @@ FtlUpdateVaildLpn:
 	ldr	x5, [x0, 2376]
 	strh	wzr, [x0, 2578]
 	str	wzr, [x0, 2580]
-.L148:
+.L149:
 	cmp	w4, w1, uxth
-	bhi	.L150
+	bhi	.L151
 	ret
-.L150:
+.L151:
 	ldrh	w3, [x5, x1, lsl 1]
 	cmp	w3, w6
-	beq	.L149
+	beq	.L150
 	ldr	w2, [x0, 2580]
 	add	w2, w2, w3
 	str	w2, [x0, 2580]
-.L149:
+.L150:
 	add	x1, x1, 1
-	b	.L148
+	b	.L149
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
 	.global	ftl_set_blk_mode
 	.type	ftl_set_blk_mode, %function
 ftl_set_blk_mode:
 	and	w0, w0, 65535
-	cbz	w1, .L153
+	cbz	w1, .L154
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	bl	ftl_set_blk_mode.part.7
 	ldp	x29, x30, [sp], 16
 	ret
-.L153:
+.L154:
 	adrp	x1, .LANCHOR0+24
 	ubfx	x2, x0, 5, 11
 	lsl	x2, x2, 2
@@ -1191,9 +1198,9 @@ ftl_sb_update_avl_pages:
 	strh	wzr, [x0, 4]
 	ldrh	w3, [x1, 36]
 	mov	w1, 65535
-.L161:
+.L162:
 	cmp	w3, w2, uxth
-	bhi	.L163
+	bhi	.L164
 	add	x4, x4, :lo12:.LANCHOR0
 	ubfiz	x3, x3, 1, 16
 	add	x3, x3, 16
@@ -1204,69 +1211,69 @@ ftl_sb_update_avl_pages:
 	sub	w1, w1, #1
 	and	w1, w1, 65535
 	sub	w1, w1, w6
-.L164:
+.L165:
 	cmp	x2, x3
-	bne	.L166
+	bne	.L167
 	ret
-.L163:
+.L164:
 	add	x5, x0, x2, sxtw 1
 	ldrh	w5, [x5, 16]
 	cmp	w5, w1
-	beq	.L162
+	beq	.L163
 	ldrh	w5, [x0, 4]
 	add	w5, w5, 1
 	strh	w5, [x0, 4]
-.L162:
+.L163:
 	add	w2, w2, 1
-	b	.L161
-.L166:
+	b	.L162
+.L167:
 	ldrh	w4, [x2]
 	cmp	w4, w5
-	beq	.L165
+	beq	.L166
 	ldrh	w4, [x0, 4]
 	add	w4, w1, w4
 	strh	w4, [x0, 4]
-.L165:
+.L166:
 	add	x2, x2, 2
-	b	.L164
+	b	.L165
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
 	.global	FtlSlcSuperblockCheck
 	.type	FtlSlcSuperblockCheck, %function
 FtlSlcSuperblockCheck:
 	ldrh	w1, [x0, 4]
-	cbz	w1, .L167
+	cbz	w1, .L168
 	ldrh	w2, [x0]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L167
+	beq	.L168
 	ldrb	w2, [x0, 6]
 	add	x2, x2, 8
 	ldrh	w3, [x0, x2, lsl 1]
 	adrp	x2, .LANCHOR0+36
 	ldrh	w4, [x2, #:lo12:.LANCHOR0+36]
 	mov	w2, w1
-.L170:
+.L171:
 	cmp	w3, w2
-	beq	.L172
-.L167:
+	beq	.L173
+.L168:
 	ret
-.L172:
+.L173:
 	ldrb	w1, [x0, 6]
 	add	w1, w1, 1
 	and	w1, w1, 255
 	strb	w1, [x0, 6]
 	cmp	w1, w4
-	bne	.L171
+	bne	.L172
 	ldrh	w1, [x0, 2]
 	strb	wzr, [x0, 6]
 	add	w1, w1, 1
 	strh	w1, [x0, 2]
-.L171:
+.L172:
 	ldrb	w1, [x0, 6]
 	add	x1, x1, 8
 	ldrh	w3, [x0, x1, lsl 1]
-	b	.L170
+	b	.L171
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
 	.global	make_superblock
@@ -1281,15 +1288,15 @@ make_superblock:
 	ldrh	w1, [x19]
 	ldrh	w0, [x0, 44]
 	cmp	w1, w0
-	bcc	.L174
+	bcc	.L175
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2097
+	mov	w2, 2110
 	add	x1, x1, 120
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L174:
+	bl	sftl_printk
+.L175:
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x6, x19, 16
 	add	x7, x0, 64
@@ -1298,36 +1305,35 @@ make_superblock:
 	mov	x5, 0
 	ldrh	w8, [x0, 36]
 	mov	w9, -1
-.L175:
+.L176:
 	cmp	w8, w5, uxth
-	bhi	.L177
+	bhi	.L178
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrb	w0, [x19, 7]
+	strb	wzr, [x19, 9]
 	ldrh	w1, [x20, 106]
 	mul	w0, w0, w1
 	strh	w0, [x19, 4]
-	mov	w0, 1
-	strb	w0, [x19, 9]
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L177:
+.L178:
 	ldrh	w1, [x19]
 	ldrb	w0, [x7, x5]
 	bl	V2P_block
 	mov	w4, w0
 	strh	w9, [x6]
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L176
+	cbnz	w0, .L177
 	strh	w4, [x6]
 	ldrb	w0, [x19, 7]
 	add	w0, w0, 1
 	strb	w0, [x19, 7]
-.L176:
+.L177:
 	add	x5, x5, 1
 	add	x6, x6, 2
-	b	.L175
+	b	.L176
 	.size	make_superblock, .-make_superblock
 	.align	2
 	.global	update_multiplier_value
@@ -1343,11 +1349,11 @@ update_multiplier_value:
 	ldrh	w10, [x1, 36]
 	ldrh	w11, [x1, 106]
 	cmp	w10, w9, uxth
-	bhi	.L191
-	cbz	w6, .L189
+	bhi	.L192
+	cbz	w6, .L190
 	mov	w0, 32768
 	sdiv	w6, w0, w6
-.L190:
+.L191:
 	add	x0, x5, :lo12:.LANCHOR0
 	mov	w1, 6
 	ldr	x0, [x0, 2360]
@@ -1355,31 +1361,31 @@ update_multiplier_value:
 	mov	w0, 0
 	strh	w6, [x8, 4]
 	ret
-.L184:
+.L185:
 	mov	w6, 0
-	b	.L183
-.L189:
+	b	.L184
+.L190:
 	mov	w6, 0
-	b	.L190
-.L191:
+	b	.L191
+.L192:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-.L182:
+.L183:
 	ldrb	w0, [x7, x9]
 	mov	w1, w8
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L181
+	cbnz	w0, .L182
 	add	w6, w6, w11
 	and	w6, w6, 65535
-.L181:
+.L182:
 	add	x9, x9, 1
 	cmp	w10, w9, uxth
-	bhi	.L182
-	cbz	w6, .L184
+	bhi	.L183
+	cbz	w6, .L185
 	mov	w0, 32768
 	sdiv	w6, w0, w6
-.L183:
+.L184:
 	add	x0, x5, :lo12:.LANCHOR0
 	mov	w1, 6
 	ldr	x0, [x0, 2360]
@@ -1396,7 +1402,7 @@ GetFreeBlockMinEraseCount:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	ldr	x0, [x1, 2408]
-	cbz	x0, .L194
+	cbz	x0, .L195
 	ldr	x2, [x1, 2360]
 	ldr	x1, [x1, 2384]
 	sub	x0, x0, x2
@@ -1407,7 +1413,7 @@ GetFreeBlockMinEraseCount:
 	and	x0, x0, 65535
 	ldrh	w0, [x1, x0, lsl 1]
 	ret
-.L194:
+.L195:
 	mov	w0, 0
 	ret
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
@@ -1419,7 +1425,7 @@ GetFreeBlockMaxEraseCount:
 	add	x4, x2, :lo12:.LANCHOR0
 	and	w0, w0, 65535
 	ldr	x1, [x4, 2408]
-	cbz	x1, .L202
+	cbz	x1, .L203
 	ldrh	w3, [x4, 2416]
 	mov	w5, 7
 	ldr	x4, [x4, 2360]
@@ -1436,25 +1442,25 @@ GetFreeBlockMaxEraseCount:
 	mul	x1, x1, x3
 	mov	w3, 0
 	and	w1, w1, 65535
-.L198:
+.L199:
 	cmp	w0, w3
-	beq	.L201
+	beq	.L202
 	umull	x5, w1, w6
 	ldrh	w5, [x4, x5]
 	cmp	w5, w7
-	bne	.L199
-.L201:
+	bne	.L200
+.L202:
 	add	x2, x2, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
 	ldr	x0, [x2, 2384]
 	ldrh	w0, [x0, x1]
 	ret
-.L199:
+.L200:
 	add	w3, w3, 1
 	mov	w1, w5
 	and	w3, w3, 65535
-	b	.L198
-.L202:
+	b	.L199
+.L203:
 	mov	w0, 0
 	ret
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
@@ -1476,405 +1482,468 @@ FtlPrintInfo2buf:
 	add	x20, x0, 12
 	str	x27, [sp, 80]
 	bl	strcpy
-	ldr	w2, [x21, 120]
+	ldr	w3, [x21, 120]
+	adrp	x2, .LC3
+	add	x2, x2, :lo12:.LC3
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC3
-	add	x1, x1, :lo12:.LC3
-	bl	sprintf
+	bl	snprintf
 	add	x20, x20, x0, sxtw
 	mov	x0, x20
 	adrp	x1, .LC4
 	add	x1, x1, :lo12:.LC4
 	bl	strcpy
-	ldr	w2, [x21, 2584]
+	ldr	w3, [x21, 2584]
 	add	x20, x20, 10
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC5
-	add	x1, x1, :lo12:.LC5
-	bl	sprintf
+	adrp	x2, .LC5
+	add	x2, x2, :lo12:.LC5
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2580]
+	ldr	w3, [x21, 2580]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC6
-	add	x1, x1, :lo12:.LC6
-	bl	sprintf
+	adrp	x2, .LC6
+	add	x2, x2, :lo12:.LC6
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2588]
+	ldr	w3, [x21, 2588]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC7
-	add	x1, x1, :lo12:.LC7
-	bl	sprintf
+	adrp	x2, .LC7
+	add	x2, x2, :lo12:.LC7
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2592]
+	ldr	w3, [x21, 2592]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC8
-	add	x1, x1, :lo12:.LC8
-	bl	sprintf
+	adrp	x2, .LC8
+	add	x2, x2, :lo12:.LC8
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2596]
+	ldr	w3, [x21, 2596]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC9
-	add	x1, x1, :lo12:.LC9
-	bl	sprintf
+	adrp	x2, .LC9
+	add	x2, x2, :lo12:.LC9
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2600]
+	ldr	w3, [x21, 2600]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC10
-	add	x1, x1, :lo12:.LC10
-	bl	sprintf
+	adrp	x2, .LC10
+	add	x2, x2, :lo12:.LC10
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2604]
+	ldr	w3, [x21, 2604]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC11
-	add	x1, x1, :lo12:.LC11
-	bl	sprintf
+	adrp	x2, .LC11
+	add	x2, x2, :lo12:.LC11
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2608]
+	ldr	w3, [x21, 2608]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC12
-	add	x1, x1, :lo12:.LC12
-	bl	sprintf
+	adrp	x2, .LC12
+	add	x2, x2, :lo12:.LC12
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2612]
+	ldr	w3, [x21, 2612]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC13
-	add	x1, x1, :lo12:.LC13
-	lsr	w2, w2, 11
-	bl	sprintf
-	ldr	w2, [x21, 2616]
+	adrp	x2, .LC13
+	add	x2, x2, :lo12:.LC13
+	lsr	w3, w3, 11
+	bl	snprintf
+	ldr	w3, [x21, 2616]
 	add	x20, x20, x0, sxtw
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC14
-	add	x1, x1, :lo12:.LC14
-	lsr	w2, w2, 11
-	bl	sprintf
-	ldr	w2, [x21, 2620]
+	adrp	x2, .LC14
+	add	x2, x2, :lo12:.LC14
+	lsr	w3, w3, 11
+	bl	snprintf
+	ldr	w3, [x21, 2620]
 	add	x20, x20, x0, sxtw
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC15
-	add	x1, x1, :lo12:.LC15
-	bl	sprintf
+	adrp	x2, .LC15
+	add	x2, x2, :lo12:.LC15
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2624]
+	ldr	w3, [x21, 2624]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC16
-	add	x1, x1, :lo12:.LC16
-	bl	sprintf
+	adrp	x2, .LC16
+	add	x2, x2, :lo12:.LC16
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 166]
+	ldrh	w3, [x21, 166]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC17
-	add	x1, x1, :lo12:.LC17
-	bl	sprintf
+	adrp	x2, .LC17
+	add	x2, x2, :lo12:.LC17
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2416]
+	ldrh	w3, [x21, 2416]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC18
-	add	x1, x1, :lo12:.LC18
-	bl	sprintf
+	adrp	x2, .LC18
+	add	x2, x2, :lo12:.LC18
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2628]
+	ldr	w3, [x21, 2628]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC19
-	add	x1, x1, :lo12:.LC19
-	bl	sprintf
+	adrp	x2, .LC19
+	add	x2, x2, :lo12:.LC19
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2632]
+	ldr	w3, [x21, 2632]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC20
-	add	x1, x1, :lo12:.LC20
-	bl	sprintf
+	adrp	x2, .LC20
+	add	x2, x2, :lo12:.LC20
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2636]
+	ldr	w3, [x21, 2636]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC21
-	add	x1, x1, :lo12:.LC21
-	bl	sprintf
+	adrp	x2, .LC21
+	add	x2, x2, :lo12:.LC21
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2640]
+	ldr	w3, [x21, 2640]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC22
-	add	x1, x1, :lo12:.LC22
-	bl	sprintf
+	adrp	x2, .LC22
+	add	x2, x2, :lo12:.LC22
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2644]
+	ldr	w3, [x21, 2644]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC23
-	add	x1, x1, :lo12:.LC23
-	bl	sprintf
+	adrp	x2, .LC23
+	add	x2, x2, :lo12:.LC23
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 2648]
+	ldr	w3, [x21, 2648]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC24
-	add	x1, x1, :lo12:.LC24
-	bl	sprintf
+	adrp	x2, .LC24
+	add	x2, x2, :lo12:.LC24
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2342]
+	ldrh	w3, [x21, 2342]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC25
-	add	x1, x1, :lo12:.LC25
-	bl	sprintf
+	adrp	x2, .LC25
+	add	x2, x2, :lo12:.LC25
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2340]
+	ldrh	w3, [x21, 2340]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC26
-	add	x1, x1, :lo12:.LC26
-	bl	sprintf
+	adrp	x2, .LC26
+	add	x2, x2, :lo12:.LC26
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 144]
+	ldr	w3, [x21, 144]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC27
-	add	x1, x1, :lo12:.LC27
-	bl	sprintf
+	adrp	x2, .LC27
+	add	x2, x2, :lo12:.LC27
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 136]
+	ldr	w3, [x21, 136]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC28
-	add	x1, x1, :lo12:.LC28
-	bl	sprintf
+	adrp	x2, .LC28
+	add	x2, x2, :lo12:.LC28
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 32]
+	ldr	w3, [x21, 32]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC29
-	add	x1, x1, :lo12:.LC29
-	bl	sprintf
+	adrp	x2, .LC29
+	add	x2, x2, :lo12:.LC29
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 262]
+	ldrh	w3, [x21, 262]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC30
-	add	x1, x1, :lo12:.LC30
-	bl	sprintf
+	adrp	x2, .LC30
+	add	x2, x2, :lo12:.LC30
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 44]
+	ldrh	w3, [x21, 44]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC31
-	add	x1, x1, :lo12:.LC31
-	bl	sprintf
+	adrp	x2, .LC31
+	add	x2, x2, :lo12:.LC31
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2652]
+	ldrh	w3, [x21, 2652]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC32
-	add	x1, x1, :lo12:.LC32
-	bl	sprintf
+	adrp	x2, .LC32
+	add	x2, x2, :lo12:.LC32
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w2, [x21, 48]
+	ldr	w3, [x21, 48]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC33
-	add	x1, x1, :lo12:.LC33
-	bl	sprintf
+	adrp	x2, .LC33
+	add	x2, x2, :lo12:.LC33
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2656]
+	ldrh	w3, [x21, 2656]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC34
-	add	x1, x1, :lo12:.LC34
-	bl	sprintf
+	adrp	x2, .LC34
+	add	x2, x2, :lo12:.LC34
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 160]
+	ldrh	w3, [x21, 160]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC35
-	add	x1, x1, :lo12:.LC35
-	bl	sprintf
+	adrp	x2, .LC35
+	add	x2, x2, :lo12:.LC35
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2426]
+	ldrh	w3, [x21, 2426]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC36
-	add	x1, x1, :lo12:.LC36
-	bl	sprintf
+	adrp	x2, .LC36
+	add	x2, x2, :lo12:.LC36
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2430]
+	ldrb	w3, [x21, 2430]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC37
-	add	x1, x1, :lo12:.LC37
-	bl	sprintf
+	adrp	x2, .LC37
+	add	x2, x2, :lo12:.LC37
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2424]
+	ldrh	w3, [x21, 2424]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC38
-	add	x1, x1, :lo12:.LC38
-	bl	sprintf
+	adrp	x2, .LC38
+	add	x2, x2, :lo12:.LC38
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2432]
+	ldrb	w3, [x21, 2432]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC39
-	add	x1, x1, :lo12:.LC39
-	bl	sprintf
+	adrp	x2, .LC39
+	add	x2, x2, :lo12:.LC39
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2428]
+	ldrh	w3, [x21, 2428]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC40
-	add	x1, x1, :lo12:.LC40
-	bl	sprintf
+	adrp	x2, .LC40
+	add	x2, x2, :lo12:.LC40
+	bl	snprintf
 	add	x20, x20, x0, sxtw
 	ldrh	w1, [x21, 2424]
+	adrp	x2, .LC41
 	ldr	x0, [x21, 2376]
-	ldrh	w2, [x0, x1, lsl 1]
+	add	x2, x2, :lo12:.LC41
+	ldrh	w3, [x0, x1, lsl 1]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC41
-	add	x1, x1, :lo12:.LC41
-	bl	sprintf
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2474]
+	ldrh	w3, [x21, 2474]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC42
-	add	x1, x1, :lo12:.LC42
-	bl	sprintf
+	adrp	x2, .LC42
+	add	x2, x2, :lo12:.LC42
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2478]
+	ldrb	w3, [x21, 2478]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC43
-	add	x1, x1, :lo12:.LC43
-	bl	sprintf
+	adrp	x2, .LC43
+	add	x2, x2, :lo12:.LC43
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2472]
+	ldrh	w3, [x21, 2472]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC44
-	add	x1, x1, :lo12:.LC44
-	bl	sprintf
+	adrp	x2, .LC44
+	add	x2, x2, :lo12:.LC44
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2480]
+	ldrb	w3, [x21, 2480]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC45
-	add	x1, x1, :lo12:.LC45
-	bl	sprintf
+	adrp	x2, .LC45
+	add	x2, x2, :lo12:.LC45
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2476]
+	ldrh	w3, [x21, 2476]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC46
-	add	x1, x1, :lo12:.LC46
-	bl	sprintf
+	adrp	x2, .LC46
+	add	x2, x2, :lo12:.LC46
+	bl	snprintf
 	add	x20, x20, x0, sxtw
 	ldrh	w1, [x21, 2472]
+	adrp	x2, .LC47
 	ldr	x0, [x21, 2376]
-	ldrh	w2, [x0, x1, lsl 1]
+	add	x2, x2, :lo12:.LC47
+	ldrh	w3, [x0, x1, lsl 1]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC47
-	add	x1, x1, :lo12:.LC47
-	bl	sprintf
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2522]
+	ldrh	w3, [x21, 2522]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC48
-	add	x1, x1, :lo12:.LC48
-	bl	sprintf
+	adrp	x2, .LC48
+	add	x2, x2, :lo12:.LC48
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2526]
+	ldrb	w3, [x21, 2526]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC49
-	add	x1, x1, :lo12:.LC49
-	bl	sprintf
+	adrp	x2, .LC49
+	add	x2, x2, :lo12:.LC49
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2520]
+	ldrh	w3, [x21, 2520]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC50
-	add	x1, x1, :lo12:.LC50
-	bl	sprintf
+	adrp	x2, .LC50
+	add	x2, x2, :lo12:.LC50
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2528]
+	ldrb	w3, [x21, 2528]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC51
-	add	x1, x1, :lo12:.LC51
-	bl	sprintf
+	adrp	x2, .LC51
+	add	x2, x2, :lo12:.LC51
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2524]
+	ldrh	w3, [x21, 2524]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC52
-	add	x1, x1, :lo12:.LC52
-	bl	sprintf
+	adrp	x2, .LC52
+	add	x2, x2, :lo12:.LC52
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2674]
+	ldrh	w3, [x21, 2674]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC53
-	add	x1, x1, :lo12:.LC53
-	bl	sprintf
+	adrp	x2, .LC53
+	add	x2, x2, :lo12:.LC53
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2678]
+	ldrb	w3, [x21, 2678]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC54
-	add	x1, x1, :lo12:.LC54
-	bl	sprintf
+	adrp	x2, .LC54
+	add	x2, x2, :lo12:.LC54
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2672]
+	ldrh	w3, [x21, 2672]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC55
-	add	x1, x1, :lo12:.LC55
-	bl	sprintf
+	adrp	x2, .LC55
+	add	x2, x2, :lo12:.LC55
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrb	w2, [x21, 2680]
+	ldrb	w3, [x21, 2680]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC56
-	add	x1, x1, :lo12:.LC56
-	bl	sprintf
+	adrp	x2, .LC56
+	add	x2, x2, :lo12:.LC56
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldrh	w2, [x21, 2676]
+	ldrh	w3, [x21, 2676]
+	mov	x1, 64
 	mov	x0, x20
-	adrp	x1, .LC57
-	add	x1, x1, :lo12:.LC57
-	bl	sprintf
+	adrp	x2, .LC57
+	add	x2, x2, :lo12:.LC57
+	bl	snprintf
 	add	x20, x20, x0, sxtw
-	ldr	w4, [x21, 2796]
-	adrp	x1, .LC58
-	ldr	w3, [x21, 2804]
-	add	x1, x1, :lo12:.LC58
-	ldr	w2, [x21, 2800]
+	ldr	w5, [x21, 2796]
+	mov	x1, 64
+	ldr	w4, [x21, 2804]
+	adrp	x2, .LC58
+	ldr	w3, [x21, 2800]
+	add	x2, x2, :lo12:.LC58
 	mov	x0, x20
-	bl	sprintf
+	bl	snprintf
 	add	x19, x20, x0, sxtw
-	ldr	w2, [x21, 2792]
+	ldr	w3, [x21, 2792]
+	mov	x1, 64
 	mov	x0, x19
-	adrp	x1, .LC59
-	add	x1, x1, :lo12:.LC59
-	bl	sprintf
+	adrp	x2, .LC59
+	add	x2, x2, :lo12:.LC59
+	bl	snprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x21, 2816]
+	ldr	w3, [x21, 2816]
+	mov	x1, 64
 	mov	x0, x19
-	adrp	x1, .LC60
-	add	x1, x1, :lo12:.LC60
-	bl	sprintf
+	adrp	x2, .LC60
+	add	x2, x2, :lo12:.LC60
+	bl	snprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21, 3232]
+	ldrh	w3, [x21, 3232]
+	mov	x1, 64
 	mov	x0, x19
-	adrp	x1, .LC61
-	add	x1, x1, :lo12:.LC61
-	bl	sprintf
+	adrp	x2, .LC61
+	add	x2, x2, :lo12:.LC61
+	bl	snprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21, 3234]
+	ldrh	w3, [x21, 3234]
+	mov	x1, 64
 	mov	x0, x19
-	adrp	x1, .LC62
-	add	x1, x1, :lo12:.LC62
-	bl	sprintf
+	adrp	x2, .LC62
+	add	x2, x2, :lo12:.LC62
+	bl	snprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x21, 3236]
+	ldr	w3, [x21, 3236]
+	mov	x1, 64
 	mov	x0, x19
-	adrp	x1, .LC63
-	add	x1, x1, :lo12:.LC63
-	bl	sprintf
+	adrp	x2, .LC63
+	add	x2, x2, :lo12:.LC63
+	bl	snprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21, 3240]
-	adrp	x1, .LC64
-	add	x1, x1, :lo12:.LC64
+	ldrh	w3, [x21, 3240]
+	adrp	x2, .LC64
+	add	x2, x2, :lo12:.LC64
+	mov	x1, 64
 	mov	x0, x19
-	bl	sprintf
+	bl	snprintf
 	add	x19, x19, x0, sxtw
 	bl	GetFreeBlockMinEraseCount
-	and	w2, w0, 65535
-	adrp	x1, .LC65
+	and	w3, w0, 65535
+	mov	x1, 64
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC65
-	bl	sprintf
+	adrp	x2, .LC65
+	add	x2, x2, :lo12:.LC65
+	bl	snprintf
 	add	x19, x19, x0, sxtw
 	ldrh	w0, [x21, 2416]
 	bl	GetFreeBlockMaxEraseCount
-	and	w2, w0, 65535
-	adrp	x1, .LC66
+	and	w3, w0, 65535
+	adrp	x2, .LC66
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC66
-	bl	sprintf
+	add	x2, x2, :lo12:.LC66
+	mov	x1, 64
+	bl	snprintf
 	add	x19, x19, x0, sxtw
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0, #:lo12:.LANCHOR2]
 	cmp	w0, 1
-	beq	.L204
-.L209:
+	beq	.L205
+.L210:
 	sub	w0, w19, w22
 	ldr	x27, [sp, 80]
 	ldp	x19, x20, [sp, 16]
@@ -1883,52 +1952,54 @@ FtlPrintInfo2buf:
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L204:
+.L205:
 	ldrh	w0, [x21, 2672]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L206
+	beq	.L207
 	ldr	x1, [x21, 2376]
 	ubfiz	x0, x0, 1, 16
-	ldrh	w2, [x1, x0]
+	adrp	x2, .LC67
+	add	x2, x2, :lo12:.LC67
+	ldrh	w3, [x1, x0]
 	mov	x0, x19
-	adrp	x1, .LC67
-	add	x1, x1, :lo12:.LC67
-	bl	sprintf
+	mov	x1, 64
+	bl	snprintf
 	add	x19, x19, x0, sxtw
-.L206:
+.L207:
 	mov	w0, 0
 	adrp	x24, .LC68
 	bl	List_get_gc_head_node
 	add	x21, x23, :lo12:.LANCHOR0
-	and	w3, w0, 65535
+	and	w4, w0, 65535
 	add	x24, x24, :lo12:.LC68
 	mov	w20, 0
 	mov	w27, 65535
 	mov	w26, 6
-.L208:
-	cmp	w3, w27
-	beq	.L207
-	umull	x25, w3, w26
+.L209:
+	cmp	w4, w27
+	beq	.L208
+	umull	x25, w4, w26
 	ldr	x0, [x21, 2360]
 	ldr	x2, [x21, 2376]
-	ubfiz	x1, x3, 1, 16
-	ldr	x4, [x21, 2384]
+	ubfiz	x1, x4, 1, 16
+	ldr	x3, [x21, 2384]
 	add	x0, x0, x25
-	ldrh	w5, [x0, 4]
+	ldrh	w5, [x2, x1]
+	mov	x2, x24
+	ldrh	w7, [x3, x1]
+	mov	w3, w20
+	ldrh	w6, [x0, 4]
+	mov	x1, 64
 	mov	x0, x19
-	ldrh	w6, [x4, x1]
-	ldrh	w4, [x2, x1]
-	mov	w2, w20
-	mov	x1, x24
 	add	w20, w20, 1
-	bl	sprintf
+	bl	snprintf
 	add	x19, x19, x0, sxtw
 	ldr	x0, [x21, 2360]
 	cmp	w20, 16
-	ldrh	w3, [x0, x25]
-	bne	.L208
-.L207:
+	ldrh	w4, [x0, x25]
+	bne	.L209
+.L208:
 	add	x23, x23, :lo12:.LANCHOR0
 	adrp	x21, .LC69
 	add	x21, x21, :lo12:.LC69
@@ -1936,48 +2007,53 @@ FtlPrintInfo2buf:
 	mov	w25, 65535
 	mov	w26, 6
 	ldr	x0, [x23, 2360]
-	ldr	x3, [x23, 2408]
-	sub	x3, x3, x0
+	ldr	x4, [x23, 2408]
+	sub	x4, x4, x0
 	mov	x0, -6148914691236517206
-	asr	x3, x3, 1
+	asr	x4, x4, 1
 	movk	x0, 0xaaab, lsl 0
-	mul	x3, x3, x0
-	and	w3, w3, 65535
-.L210:
-	cmp	w3, w25
-	beq	.L209
-	umull	x24, w3, w26
+	mul	x4, x4, x0
+	and	w4, w4, 65535
+.L211:
+	cmp	w4, w25
+	beq	.L210
+	umull	x24, w4, w26
 	ldr	x0, [x23, 2360]
 	ldr	x2, [x23, 2384]
-	ubfiz	x1, x3, 1, 16
+	ubfiz	x1, x4, 1, 16
 	add	x0, x0, x24
-	ldrh	w5, [x2, x1]
-	mov	w2, w20
-	ldrh	w4, [x0, 4]
-	mov	x1, x21
-	mov	x0, x19
+	mov	w3, w20
 	add	w20, w20, 1
-	bl	sprintf
+	ldrh	w6, [x2, x1]
+	mov	x2, x21
+	ldrh	w5, [x0, 4]
+	mov	x1, 64
+	mov	x0, x19
+	bl	snprintf
 	add	x19, x19, x0, sxtw
 	cmp	w20, 4
-	beq	.L209
+	beq	.L210
 	ldr	x0, [x23, 2360]
-	ldrh	w3, [x0, x24]
-	b	.L210
+	ldrh	w4, [x0, x24]
+	b	.L211
 	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
 	.align	2
 	.global	rknand_proc_ftlread
 	.type	rknand_proc_ftlread, %function
 rknand_proc_ftlread:
+	cmp	w0, 2047
+	ble	.L219
 	stp	x29, x30, [sp, -32]!
-	adrp	x2, .LC70
-	adrp	x1, .LC71
-	add	x2, x2, :lo12:.LC70
+	adrp	x3, .LC70
+	adrp	x2, .LC71
+	add	x3, x3, :lo12:.LC70
 	add	x29, sp, 0
-	add	x1, x1, :lo12:.LC71
+	add	x2, x2, :lo12:.LC71
 	stp	x19, x20, [sp, 16]
-	mov	x20, x0
-	bl	sprintf
+	mov	x20, x1
+	mov	x1, 64
+	mov	x0, x20
+	bl	snprintf
 	add	x19, x20, x0, sxtw
 	mov	x0, x19
 	bl	FtlPrintInfo2buf
@@ -1986,6 +2062,9 @@ rknand_proc_ftlread:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
+.L219:
+	mov	w0, 0
+	ret
 	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
 	.align	2
 	.global	GetSwlReplaceBlock
@@ -1999,14 +2078,14 @@ GetSwlReplaceBlock:
 	ldr	w2, [x0, 2636]
 	ldr	w1, [x0, 2648]
 	cmp	w2, w1
-	bcs	.L219
+	bcs	.L225
 	ldrh	w2, [x0, 44]
 	mov	x1, 0
 	ldr	x4, [x0, 2384]
 	str	wzr, [x0, 2628]
-.L220:
+.L226:
 	cmp	w2, w1
-	bhi	.L221
+	bhi	.L227
 	add	x1, x8, :lo12:.LANCHOR0
 	ldr	w0, [x1, 2628]
 	udiv	w2, w0, w2
@@ -2016,50 +2095,50 @@ GetSwlReplaceBlock:
 	ldrh	w2, [x1, 96]
 	udiv	w0, w0, w2
 	str	w0, [x1, 2628]
-.L222:
+.L228:
 	add	x1, x8, :lo12:.LANCHOR0
 	ldr	w9, [x1, 2648]
 	ldr	w11, [x1, 2636]
 	add	w0, w9, 256
 	cmp	w0, w11
-	bls	.L227
+	bls	.L233
 	ldr	w1, [x1, 2644]
 	add	w0, w9, 768
 	cmp	w0, w1
-	bls	.L227
-.L229:
+	bls	.L233
+.L235:
 	mov	w20, 65535
-.L228:
+.L234:
 	mov	w0, w20
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L221:
+.L227:
 	ldrh	w3, [x4, x1, lsl 1]
 	add	x1, x1, 1
 	ldr	w5, [x0, 2628]
 	add	w3, w3, w5
 	str	w3, [x0, 2628]
-	b	.L220
-.L219:
+	b	.L226
+.L225:
 	ldr	w1, [x0, 2644]
 	cmp	w2, w1
-	bls	.L222
+	bls	.L228
 	add	w1, w1, 1
 	str	w1, [x0, 2644]
 	mov	w1, 0
-.L224:
+.L230:
 	ldrh	w2, [x0, 44]
 	cmp	w1, w2
-	bcs	.L222
+	bcs	.L228
 	ldr	x4, [x0, 2384]
 	ubfiz	x3, x1, 1, 32
 	add	w1, w1, 1
 	ldrh	w2, [x4, x3]
 	add	w2, w2, 1
 	strh	w2, [x4, x3]
-	b	.L224
-.L227:
+	b	.L230
+.L233:
 	add	x10, x8, :lo12:.LANCHOR0
 	ldrh	w0, [x10, 2416]
 	add	w0, w0, w0, lsl 1
@@ -2068,9 +2147,9 @@ GetSwlReplaceBlock:
 	and	w6, w0, 65535
 	add	w0, w9, 64
 	cmp	w6, w0
-	bcc	.L229
+	bcc	.L235
 	ldr	x0, [x10, 2368]
-	cbz	x0, .L229
+	cbz	x0, .L235
 	mov	w4, 65535
 	ldrh	w12, [x10, 44]
 	mov	x13, -6148914691236517206
@@ -2081,39 +2160,39 @@ GetSwlReplaceBlock:
 	mov	w1, 0
 	movk	x13, 0xaaab, lsl 0
 	mov	w14, 6
-.L230:
+.L236:
 	ldrh	w3, [x0]
 	cmp	w3, w10
-	bne	.L233
+	bne	.L239
 	mov	w20, w2
-.L232:
+.L238:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L229
+	beq	.L235
 	ubfiz	x7, x20, 1, 32
 	ldrh	w3, [x5, x7]
 	cmp	w9, w3
-	bcs	.L234
+	bcs	.L240
 	bl	GetFreeBlockMinEraseCount
 	cmp	w9, w0, uxth
-	bcs	.L234
+	bcs	.L240
 	add	x0, x8, :lo12:.LANCHOR0
 	str	w4, [x0, 2648]
-.L234:
+.L240:
 	cmp	w11, w3
-	bls	.L229
+	bls	.L235
 	add	w0, w3, 128
 	cmp	w6, w0
-	ble	.L229
+	ble	.L235
 	add	w0, w3, 256
 	cmp	w11, w0
-	bhi	.L235
+	bhi	.L241
 	add	x0, x8, :lo12:.LANCHOR0
 	add	w3, w3, 768
 	ldr	w0, [x0, 2644]
 	cmp	w3, w0
-	bcs	.L229
-.L235:
+	bcs	.L235
+.L241:
 	add	x19, x8, :lo12:.LANCHOR0
 	ldrh	w5, [x5, x7]
 	mov	w2, w11
@@ -2123,17 +2202,17 @@ GetSwlReplaceBlock:
 	ldrh	w4, [x0, x7]
 	adrp	x0, .LC72
 	add	x0, x0, :lo12:.LC72
-	bl	printk
+	bl	sftl_printk
 	mov	w0, 1
 	str	w0, [x19, 3244]
-	b	.L228
-.L233:
+	b	.L234
+.L239:
 	add	w1, w1, 1
 	and	w1, w1, 65535
 	cmp	w1, w12
-	bhi	.L229
+	bhi	.L235
 	ldrh	w15, [x0, 4]
-	cbz	w15, .L231
+	cbz	w15, .L237
 	sub	x0, x0, x7
 	asr	x0, x0, 1
 	mul	x0, x0, x13
@@ -2141,14 +2220,14 @@ GetSwlReplaceBlock:
 	and	x0, x0, 65535
 	ldrh	w0, [x5, x0, lsl 1]
 	cmp	w9, w0
-	bcs	.L232
+	bcs	.L238
 	cmp	w4, w0
-	bls	.L231
+	bls	.L237
 	mov	w4, w0
 	mov	w2, w20
-.L231:
+.L237:
 	umaddl	x0, w3, w14, x7
-	b	.L230
+	b	.L236
 	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
 	.align	2
 	.global	free_data_superblock
@@ -2157,7 +2236,7 @@ free_data_superblock:
 	and	w0, w0, 65535
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L246
+	beq	.L252
 	stp	x29, x30, [sp, -16]!
 	adrp	x2, .LANCHOR0+2376
 	ubfiz	x1, x0, 1, 16
@@ -2168,7 +2247,7 @@ free_data_superblock:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L246:
+.L252:
 	mov	w0, 0
 	ret
 	.size	free_data_superblock, .-free_data_superblock
@@ -2184,39 +2263,39 @@ get_new_active_ppa:
 	ldrh	w1, [x0]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L250
+	bne	.L256
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2707
+	mov	w2, 2740
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L250:
+	bl	sftl_printk
+.L256:
 	adrp	x20, .LANCHOR0
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x19, 2]
 	ldrh	w0, [x0, 106]
 	cmp	w1, w0
-	bne	.L251
+	bne	.L257
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2708
+	mov	w2, 2741
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L251:
+	bl	sftl_printk
+.L257:
 	ldrh	w0, [x19, 4]
-	cbnz	w0, .L252
+	cbnz	w0, .L258
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2709
+	mov	w2, 2742
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L252:
+	bl	sftl_printk
+.L258:
 	ldrb	w0, [x19, 6]
 	add	x1, x20, :lo12:.LANCHOR0
 	strb	wzr, [x19, 10]
@@ -2224,9 +2303,9 @@ get_new_active_ppa:
 	ldrh	w2, [x1, 36]
 	mov	w1, 65535
 	ldrh	w0, [x19, x0, lsl 1]
-.L253:
+.L259:
 	cmp	w0, w1
-	beq	.L255
+	beq	.L261
 	ldrh	w21, [x19, 2]
 	mov	w3, 65535
 	ldrh	w1, [x19, 4]
@@ -2235,56 +2314,56 @@ get_new_active_ppa:
 	sub	w1, w1, #1
 	and	w1, w1, 65535
 	strh	w1, [x19, 4]
-.L257:
+.L263:
 	add	w0, w0, 1
 	and	w0, w0, 255
 	cmp	w2, w0
-	bne	.L256
+	bne	.L262
 	ldrh	w0, [x19, 2]
 	add	w0, w0, 1
 	strh	w0, [x19, 2]
 	mov	w0, 0
-.L256:
+.L262:
 	add	x4, x19, x0, sxtw 1
 	ldrh	w4, [x4, 16]
 	cmp	w4, w3
-	beq	.L257
+	beq	.L263
 	add	x20, x20, :lo12:.LANCHOR0
 	strb	w0, [x19, 6]
 	ldrh	w2, [x19, 2]
 	ldrh	w0, [x20, 106]
 	cmp	w2, w0
-	bne	.L249
-	cbz	w1, .L249
+	bne	.L255
+	cbz	w1, .L255
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2730
+	mov	w2, 2763
 	add	x1, x1, 136
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L249:
+	bl	sftl_printk
+.L255:
 	mov	w0, w21
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L255:
+.L261:
 	ldrb	w0, [x19, 6]
 	add	w0, w0, 1
 	and	w0, w0, 255
 	strb	w0, [x19, 6]
 	cmp	w0, w2
-	bne	.L254
+	bne	.L260
 	ldrh	w0, [x19, 2]
 	strb	wzr, [x19, 6]
 	add	w0, w0, 1
 	strh	w0, [x19, 2]
-.L254:
+.L260:
 	ldrb	w0, [x19, 6]
 	add	x0, x0, 8
 	ldrh	w0, [x19, x0, lsl 1]
-	b	.L253
+	b	.L259
 	.size	get_new_active_ppa, .-get_new_active_ppa
 	.align	2
 	.global	FtlGcBufInit
@@ -2297,19 +2376,19 @@ FtlGcBufInit:
 	mov	w9, 1
 	mov	w5, 4
 	str	wzr, [x1, 3248]
-.L265:
+.L271:
 	ldrh	w2, [x1, 36]
 	cmp	w3, w2
-	bcc	.L266
+	bcc	.L272
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w6, 24
 	mov	w5, 4
-.L267:
+.L273:
 	ldr	w1, [x0, 3288]
 	cmp	w2, w1
-	bcc	.L268
+	bcc	.L274
 	ret
-.L266:
+.L272:
 	umull	x4, w3, w8
 	ldr	x6, [x1, 3256]
 	ldr	x7, [x1, 3264]
@@ -2337,8 +2416,8 @@ FtlGcBufInit:
 	str	x4, [x2, 8]
 	ldr	x4, [x6, 8]
 	str	x4, [x2, 16]
-	b	.L265
-.L268:
+	b	.L271
+.L274:
 	umull	x4, w2, w6
 	ldr	x3, [x0, 3256]
 	ldr	x7, [x0, 3264]
@@ -2359,7 +2438,7 @@ FtlGcBufInit:
 	sdiv	w1, w1, w5
 	add	x1, x4, x1, sxtw 2
 	str	x1, [x3, 8]
-	b	.L267
+	b	.L273
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
 	.global	FtlGcBufFree
@@ -2371,31 +2450,31 @@ FtlGcBufFree:
 	mov	w8, 24
 	ldr	w7, [x2, 3288]
 	ldr	x5, [x2, 3256]
-.L270:
+.L276:
 	cmp	w3, w1
-	bcs	.L269
+	bcs	.L275
 	ubfiz	x4, x3, 5, 16
 	mov	w2, 0
 	add	x4, x0, x4
-	b	.L275
-.L271:
+	b	.L281
+.L277:
 	add	w2, w2, 1
 	and	w2, w2, 65535
-.L275:
+.L281:
 	cmp	w2, w7
-	bcs	.L272
+	bcs	.L278
 	umull	x6, w2, w8
 	add	x9, x5, x6
 	ldr	x10, [x5, x6]
 	ldr	x6, [x4, 8]
 	cmp	x10, x6
-	bne	.L271
+	bne	.L277
 	str	wzr, [x9, 16]
-.L272:
+.L278:
 	add	w3, w3, 1
 	and	w3, w3, 65535
-	b	.L270
-.L269:
+	b	.L276
+.L275:
 	ret
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -2409,20 +2488,20 @@ FtlGcBufAlloc:
 	mov	w8, 1
 	ldr	w5, [x2, 3288]
 	ldr	x6, [x2, 3256]
-.L277:
+.L283:
 	cmp	w3, w1
-	bcs	.L276
+	bcs	.L282
 	mov	w2, 0
-	b	.L282
-.L278:
+	b	.L288
+.L284:
 	add	w2, w2, 1
 	and	w2, w2, 65535
-.L282:
+.L288:
 	cmp	w2, w5
-	bcs	.L279
+	bcs	.L285
 	umaddl	x4, w2, w7, x6
 	ldr	w9, [x4, 16]
-	cbnz	w9, .L278
+	cbnz	w9, .L284
 	ubfiz	x2, x3, 5, 16
 	ldr	x9, [x4]
 	add	x2, x0, x2
@@ -2430,11 +2509,11 @@ FtlGcBufAlloc:
 	str	x9, [x2, 8]
 	ldr	x4, [x4, 8]
 	str	x4, [x2, 16]
-.L279:
+.L285:
 	add	w3, w3, 1
 	and	w3, w3, 65535
-	b	.L277
-.L276:
+	b	.L283
+.L282:
 	ret
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
@@ -2447,17 +2526,17 @@ IsBlkInGcList:
 	ldrh	w2, [x1, 3292]
 	ldr	x3, [x1, 3296]
 	mov	x1, 0
-.L284:
+.L290:
 	cmp	w2, w1, uxth
-	bhi	.L286
+	bhi	.L292
 	mov	w0, 0
 	ret
-.L286:
+.L292:
 	add	x1, x1, 1
 	add	x4, x3, x1, lsl 1
 	ldrh	w4, [x4, -2]
 	cmp	w4, w0
-	bne	.L284
+	bne	.L290
 	mov	w0, 1
 	ret
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -2478,25 +2557,25 @@ FtlGcUpdatePage:
 	ldrh	w1, [x4, 3292]
 	ldr	x6, [x4, 3296]
 	mov	x4, 0
-.L289:
+.L295:
 	and	w2, w4, 65535
 	cmp	w2, w1
-	bcc	.L291
-	bne	.L290
+	bcc	.L297
+	bne	.L296
 	and	x4, x4, 65535
 	strh	w0, [x6, x4, lsl 1]
 	add	x4, x3, :lo12:.LANCHOR0
 	ldrh	w0, [x4, 3292]
 	add	w0, w0, 1
 	strh	w0, [x4, 3292]
-	b	.L290
-.L291:
+	b	.L296
+.L297:
 	add	x4, x4, 1
 	add	x2, x6, x4, lsl 1
 	ldrh	w2, [x2, -2]
 	cmp	w2, w9
-	bne	.L289
-.L290:
+	bne	.L295
+.L296:
 	add	x0, x3, :lo12:.LANCHOR0
 	mov	w1, 12
 	ldrh	w3, [x0, 3304]
@@ -2525,29 +2604,29 @@ FtlGcRefreshBlock:
 	mov	w1, w19
 	adrp	x0, .LC73
 	add	x0, x0, :lo12:.LC73
-	bl	printk
+	bl	sftl_printk
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w3, [x0, 3320]
 	cmp	w19, w3
-	beq	.L294
+	beq	.L300
 	ldrh	w2, [x0, 3322]
 	cmp	w19, w2
-	beq	.L294
+	beq	.L300
 	mov	w1, 65535
 	cmp	w3, w1
-	bne	.L295
+	bne	.L301
 	strh	w19, [x0, 3320]
-.L294:
+.L300:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L295:
+.L301:
 	cmp	w2, w1
-	bne	.L294
+	bne	.L300
 	strh	w19, [x0, 3322]
-	b	.L294
+	b	.L300
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
 	.align	2
 	.global	FtlGcMarkBadPhyBlk
@@ -2568,29 +2647,29 @@ FtlGcMarkBadPhyBlk:
 	mov	w22, w0
 	adrp	x0, .LC74
 	add	x0, x0, :lo12:.LC74
-	bl	printk
+	bl	sftl_printk
 	mov	w0, w22
 	bl	FtlGcRefreshBlock
 	ldrh	w0, [x20, -4]
 	mov	x1, 0
-.L298:
+.L304:
 	cmp	w0, w1, uxth
-	bhi	.L300
+	bhi	.L306
 	cmp	w0, 15
-	bhi	.L299
+	bhi	.L305
 	add	x19, x19, :lo12:.LANCHOR0
 	add	w1, w0, 1
 	add	x19, x19, 3328
 	strh	w1, [x19, -4]
 	strh	w21, [x19, w0, sxtw 1]
-	b	.L299
-.L300:
+	b	.L305
+.L306:
 	add	x1, x1, 1
 	add	x2, x20, x1, lsl 1
 	ldrh	w2, [x2, -2]
 	cmp	w2, w21
-	bne	.L298
-.L299:
+	bne	.L304
+.L305:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -2607,16 +2686,16 @@ FtlGcReFreshBadBlk:
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3324]
-	cbz	w1, .L303
+	cbz	w1, .L309
 	ldrh	w3, [x0, 3320]
 	mov	w2, 65535
 	cmp	w3, w2
-	bne	.L303
+	bne	.L309
 	ldrh	w2, [x0, 3362]
 	cmp	w2, w1
-	bcc	.L304
+	bcc	.L310
 	strh	wzr, [x0, 3362]
-.L304:
+.L310:
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x0, x19, 3328
 	ldrh	w1, [x19, 3362]
@@ -2626,7 +2705,7 @@ FtlGcReFreshBadBlk:
 	ldrh	w0, [x19, 3362]
 	add	w0, w0, 1
 	strh	w0, [x19, 3362]
-.L303:
+.L309:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -2659,858 +2738,368 @@ ftl_free:
 	.global	rknand_print_hex
 	.type	rknand_print_hex, %function
 rknand_print_hex:
-	stp	x29, x30, [sp, -16]!
-	mul	w3, w3, w2
-	mov	x5, x1
-	mov	w4, w2
-	add	x29, sp, 0
-	mov	x1, x0
-	sxtw	x6, w3
-	mov	w7, 0
-	mov	w3, 16
-	mov	w2, 2
-	adrp	x0, .LC75
-	add	x0, x0, :lo12:.LC75
-	bl	print_hex_dump
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	rknand_print_hex, .-rknand_print_hex
-	.align	2
-	.global	FlashReadPages
-	.type	FlashReadPages, %function
-FlashReadPages:
 	stp	x29, x30, [sp, -96]!
-	ubfiz	x1, x1, 5, 32
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	adrp	x22, .LANCHOR0
-	add	x2, x22, :lo12:.LANCHOR0
-	stp	x19, x20, [sp, 16]
+	mov	x21, x1
 	stp	x23, x24, [sp, 48]
-	adrp	x20, .LANCHOR1
+	adrp	x24, .LC75
 	stp	x25, x26, [sp, 64]
-	add	x20, x20, :lo12:.LANCHOR1
-	adrp	x21, .LC1
-	mov	x19, x0
-	ldrh	w25, [x2, 12]
-	add	x23, x0, x1
-	add	x20, x20, 160
-	add	x21, x21, :lo12:.LC1
-.L316:
-	cmp	x19, x23
-	bne	.L323
-	ldp	x19, x20, [sp, 16]
-	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
+	mov	w23, w2
+	stp	x27, x28, [sp, 80]
+	adrp	x25, .LC78
+	mov	x27, x0
+	mov	w26, w3
+	add	x24, x24, :lo12:.LC75
+	add	x25, x25, :lo12:.LC78
+	stp	x19, x20, [sp, 16]
+	mov	w22, 0
+	mov	x19, 0
+	mov	w20, 0
+	adrp	x28, .LC77
+.L320:
+	cmp	w26, w19
+	bhi	.L326
+	adrp	x0, .LC79
+	add	x0, x0, :lo12:.LC79
+	bl	sftl_printk
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 96
 	ret
-.L323:
-	ldr	x0, [x19, 8]
-	cbz	x0, .L317
-	ldr	x0, [x19, 16]
-	cbnz	x0, .L318
-.L317:
-	mov	w2, 76
-	mov	x1, x20
-	mov	x0, x21
-	bl	printk
-.L318:
-	ldr	w0, [x19, 4]
-	add	x26, x22, :lo12:.LANCHOR0
-	add	x2, x29, 88
-	add	x1, x29, 92
-	bl	l2p_addr_tran.isra.0
-	ldrb	w0, [x29, 88]
-	ldr	w1, [x29, 92]
-	ldp	x2, x3, [x19, 8]
-	ldr	x4, [x26, 3392]
-	blr	x4
-	str	w0, [x19]
-	ldrh	w0, [x26, 14]
-	cmp	w0, 4
-	bne	.L320
-	ldrb	w0, [x29, 88]
-	ldr	x4, [x26, 3392]
-	ldp	x2, x3, [x19, 8]
-	ldr	w1, [x29, 92]
-	add	x3, x3, 8
-	add	x2, x2, 2048
-	add	w1, w25, w1
-	blr	x4
-	cmn	w0, #1
-	beq	.L321
-	ldr	x0, [x19, 16]
-	ldr	w1, [x0, 12]
-	cmn	w1, #1
-	bne	.L320
-	ldr	w1, [x0, 8]
-	cmn	w1, #1
-	bne	.L320
-	ldr	w0, [x0]
-	cmn	w0, #1
-	beq	.L320
+.L326:
+	cbnz	w20, .L321
+	mov	w3, w22
+	mov	x2, x21
+	mov	x1, x27
+	mov	x0, x24
+	bl	sftl_printk
 .L321:
-	mov	w0, -1
-	str	w0, [x19]
-.L320:
-	add	x19, x19, 32
-	b	.L316
-	.size	FlashReadPages, .-FlashReadPages
+	cmp	w23, 4
+	bne	.L322
+	ldr	w1, [x21, x19, lsl 2]
+	adrp	x0, .LC76
+	add	x0, x0, :lo12:.LC76
+.L328:
+	bl	sftl_printk
+	add	w20, w20, 1
+	cmp	w20, 15
+	bls	.L325
+	mov	w20, 0
+	adrp	x0, .LC79
+	add	x0, x0, :lo12:.LC79
+	bl	sftl_printk
+.L325:
+	add	x19, x19, 1
+	add	w22, w22, w23
+	b	.L320
+.L322:
+	cmp	w23, 2
+	bne	.L324
+	ldrh	w1, [x21, x19, lsl 1]
+	add	x0, x28, :lo12:.LC77
+	b	.L328
+.L324:
+	ldrb	w1, [x21, x19]
+	mov	x0, x25
+	b	.L328
+	.size	rknand_print_hex, .-rknand_print_hex
 	.align	2
-	.global	FtlLoadFactoryBbt
-	.type	FtlLoadFactoryBbt, %function
-FtlLoadFactoryBbt:
-	stp	x29, x30, [sp, -80]!
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
+	.global	FlashEraseBlocks
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	add	x22, x0, 172
 	stp	x25, x26, [sp, 64]
-	mov	w21, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
+	ubfiz	x22, x2, 5, 32
 	stp	x23, x24, [sp, 48]
-	add	x23, x0, 3400
-	mov	x25, x23
-	mov	w26, 61664
-	ldr	x1, [x0, 3432]
-	ldr	x24, [x0, 3440]
-	stp	x1, x24, [x23, 8]
-.L335:
-	ldrh	w0, [x19, 58]
-	cmp	w21, w0
-	bcc	.L340
-	mov	w0, 0
+	add	x23, x22, 4
+	mov	x20, x0
+	add	x21, x0, 4
+	ldrh	w24, [x19, 12]
+	add	x23, x0, x23
+	mov	w25, -1
+	lsl	w26, w24, 3
+.L330:
+	cmp	x21, x23
+	beq	.L334
+	ldr	w0, [x21]
+	add	x2, x29, 88
+	add	x1, x29, 92
+	bl	l2p_addr_tran.isra.0
+	ldr	w0, [x29, 88]
+	cbnz	w0, .L331
+	ldr	w1, [x29, 92]
+	cmp	w26, w1
+	bls	.L331
+	mov	x19, x20
+	add	x22, x20, x22
+	adrp	x20, .LANCHOR1
+	add	x20, x20, :lo12:.LANCHOR1
+	adrp	x21, .LC80
+	add	x20, x20, 160
+	add	x21, x21, :lo12:.LC80
+.L332:
+	cmp	x19, x22
+	bne	.L333
+	bl	dump_stack
+.L334:
 	ldp	x19, x20, [sp, 16]
+	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 80
+	ldp	x29, x30, [sp], 96
 	ret
-.L340:
-	ldrh	w20, [x19, 102]
+.L333:
+	ldr	w2, [x29, 92]
 	mov	w0, -1
-	strh	w0, [x22]
-.L337:
-	ldrh	w0, [x19, 102]
-	sub	w20, w20, #1
-	and	w20, w20, 65535
-	sub	w1, w0, #16
-	cmp	w20, w1
-	ble	.L338
-	madd	w0, w0, w21, w20
-	mov	w2, 1
-	mov	w1, w2
-	lsl	w0, w0, 10
-	str	w0, [x25, 4]
-	mov	x0, x23
-	bl	FlashReadPages
-	ldr	w0, [x25]
-	cmn	w0, #1
-	beq	.L337
-	ldrh	w0, [x24]
-	cmp	w0, w26
-	bne	.L337
-	strh	w20, [x22]
+	str	w0, [x19]
+	mov	x1, x20
+	mov	x0, x21
+	add	x19, x19, 32
+	bl	sftl_printk
+	ldr	x1, [x19, -24]
+	mov	w3, 16
+	mov	w2, 4
+	adrp	x0, .LC81
+	add	x0, x0, :lo12:.LC81
+	bl	rknand_print_hex
+	ldr	x1, [x19, -16]
+	mov	w3, 4
+	adrp	x0, .LC82
+	mov	w2, w3
+	add	x0, x0, :lo12:.LC82
+	bl	rknand_print_hex
+	b	.L332
+.L331:
+	ldr	w1, [x29, 92]
+	ldr	x2, [x19, 3376]
+	blr	x2
+	cmp	w0, 0
+	csel	w0, w25, wzr, ne
+	str	w0, [x21, -4]
+	ldrh	w0, [x19, 14]
+	cmp	w0, 4
+	bne	.L338
+	ldrb	w0, [x29, 88]
+	ldr	x2, [x19, 3376]
+	ldr	w1, [x29, 92]
+	add	w1, w24, w1
+	blr	x2
+	cbz	w0, .L338
+	str	w25, [x21, -4]
 .L338:
-	add	w21, w21, 1
-	add	x22, x22, 2
-	b	.L335
-	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	add	x21, x21, 32
+	b	.L330
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
 	.align	2
-	.global	FtlGetLastWrittenPage
-	.type	FtlGetLastWrittenPage, %function
-FtlGetLastWrittenPage:
-	stp	x29, x30, [sp, -160]!
-	cmp	w1, 1
+	.global	FtlFreeSysBlkQueueIn
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
+	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
-	stp	x23, x24, [sp, 48]
-	mov	w23, w1
-	stp	x19, x20, [sp, 16]
-	adrp	x1, .LANCHOR0
 	stp	x21, x22, [sp, 32]
-	add	x1, x1, :lo12:.LANCHOR0
-	bne	.L346
-	ldrh	w19, [x1, 108]
+	and	w21, w0, 65535
+	stp	x19, x20, [sp, 16]
+	sub	w2, w21, #1
+	mov	w0, 65533
+	cmp	w0, w2, uxth
+	bcc	.L345
+	adrp	x0, .LANCHOR0
+	add	x20, x0, :lo12:.LANCHOR0
+	mov	x19, x0
+	ldrh	w2, [x20, 262]
+	cmp	w2, 1024
+	beq	.L345
+	and	w1, w1, 65535
+	cbz	w1, .L347
+	mov	w0, w21
+	bl	P2V_block_in_plane
+	and	w22, w0, 65535
+	ldr	x0, [x20, 3400]
+	lsl	w1, w21, 10
+	mov	w2, 1
+	str	w1, [x0, 4]
+	mov	w1, w2
+	ldr	x0, [x20, 3400]
+	bl	FlashEraseBlocks
+	ldr	x2, [x20, 2384]
+	ubfiz	x0, x22, 1, 16
+	ldrh	w1, [x2, x0]
+	add	w1, w1, 1
+	strh	w1, [x2, x0]
+	ldr	w0, [x20, 2640]
+	add	w0, w0, 1
+	str	w0, [x20, 2640]
 .L347:
-	sub	w19, w19, #1
-	adrp	x1, ftl_temp_buf
-	sxth	w19, w19
-	add	x1, x1, :lo12:ftl_temp_buf
-	lsl	w21, w0, 10
-	str	x1, [x29, 72]
-	orr	w0, w19, w21
-	add	x1, x29, 96
-	str	w0, [x29, 68]
-	mov	w2, w23
-	str	x1, [x29, 80]
-	add	x0, x29, 64
-	mov	w1, 1
-	bl	FlashReadPages
-	ldr	w0, [x29, 96]
-	cmn	w0, #1
-	bne	.L348
-	mov	w22, 0
-	mov	w24, 2
-.L349:
-	cmp	w22, w19
-	ble	.L352
-.L348:
-	mov	w0, w19
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 256
+	ldrh	w1, [x0, 6]
+	add	w1, w1, 1
+	strh	w1, [x0, 6]
+	ldrh	w1, [x0, 4]
+	add	x2, x0, x1, sxtw 1
+	add	w1, w1, 1
+	and	w1, w1, 1023
+	strh	w1, [x0, 4]
+	strh	w21, [x2, 8]
+.L345:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 160
+	ldp	x29, x30, [sp], 48
 	ret
-.L346:
-	ldrh	w19, [x1, 106]
-	b	.L347
-.L352:
-	add	w20, w22, w19
-	mov	w2, w23
-	mov	w1, 1
-	sdiv	w20, w20, w24
-	sxth	w0, w20
-	orr	w0, w0, w21
-	str	w0, [x29, 68]
-	add	x0, x29, 64
-	bl	FlashReadPages
-	ldr	w0, [x29, 96]
-	cmn	w0, #1
-	bne	.L350
-	ldr	w0, [x29, 100]
-	cmn	w0, #1
-	bne	.L350
-	sub	w19, w20, #1
-	sxth	w19, w19
-	b	.L349
-.L350:
-	add	w20, w20, 1
-	sxth	w22, w20
-	b	.L349
-	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
 	.align	2
-	.global	FlashProgPages
-	.type	FlashProgPages, %function
-FlashProgPages:
-	stp	x29, x30, [sp, -144]!
-	ubfiz	x1, x1, 5, 32
+	.global	FtlFreeSysBlkQueueOut
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LANCHOR0
 	add	x29, sp, 0
-	stp	x21, x22, [sp, 32]
-	adrp	x21, .LANCHOR0
-	stp	x25, x26, [sp, 64]
-	mov	w25, w2
-	add	x2, x21, :lo12:.LANCHOR0
+	str	x21, [sp, 32]
+	add	x21, x0, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
-	stp	x23, x24, [sp, 48]
-	adrp	x22, .LANCHOR1
-	str	x27, [sp, 80]
-	add	x22, x22, :lo12:.LANCHOR1
-	adrp	x23, .LC1
-	mov	w26, w3
-	ldrh	w27, [x2, 12]
-	mov	x20, x0
-	add	x24, x0, x1
 	mov	x19, x0
-	add	x22, x22, 176
-	add	x23, x23, :lo12:.LC1
-.L355:
-	cmp	x19, x24
-	bne	.L363
-	cbnz	w26, .L364
-.L382:
-	ldp	x19, x20, [sp, 16]
-	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldr	x27, [sp, 80]
-	ldp	x29, x30, [sp], 144
-	ret
-.L363:
-	ldr	x0, [x19, 8]
-	cbz	x0, .L356
-	ldr	x0, [x19, 16]
-	cbnz	x0, .L357
+	ldrh	w2, [x21, 262]
+	cbz	w2, .L359
+	ldrh	w0, [x21, 258]
+	add	x1, x21, 256
+	sub	w2, w2, #1
+	strh	w2, [x21, 262]
+	mov	w2, 1
+	add	x3, x1, x0, sxtw 1
+	add	w0, w0, 1
+	and	w0, w0, 1023
+	strh	w0, [x21, 258]
+	ldr	x0, [x21, 3400]
+	ldrh	w20, [x3, 8]
+	lsl	w1, w20, 10
+	str	w1, [x0, 4]
+	mov	w1, w2
+	ldr	x0, [x21, 3400]
+	bl	FlashEraseBlocks
+	ldr	w0, [x21, 2640]
+	add	w0, w0, 1
+	str	w0, [x21, 2640]
 .L356:
-	mov	w2, 106
-	mov	x1, x22
-	mov	x0, x23
-	bl	printk
-.L357:
-	ldr	w0, [x19, 4]
-	add	x2, x29, 104
-	add	x1, x29, 108
-	bl	l2p_addr_tran.isra.0
-	add	x0, x21, :lo12:.LANCHOR0
-	ldr	w1, [x29, 108]
-	ldp	x2, x3, [x19, 8]
-	ldr	x4, [x0, 3384]
-	ldrb	w0, [x29, 104]
-	blr	x4
-	cbnz	w0, .L358
-	str	wzr, [x19]
-.L359:
-	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 14]
-	cmp	w1, 4
-	bne	.L361
-	ldr	x4, [x0, 3384]
-	ldrb	w0, [x29, 104]
-	ldp	x2, x3, [x19, 8]
-	ldr	w1, [x29, 108]
-	add	x3, x3, 8
-	add	x2, x2, 2048
-	add	w1, w27, w1
-	blr	x4
-	cbz	w0, .L361
-	mov	w0, -1
-	str	w0, [x19]
-.L361:
-	add	x19, x19, 32
-	b	.L355
+	sub	w0, w20, #1
+	mov	w1, 65533
+	cmp	w1, w0, uxth
+	bcs	.L357
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, w20
+	ldrh	w2, [x0, 262]
+	adrp	x0, .LC83
+	add	x0, x0, :lo12:.LC83
+	bl	sftl_printk
 .L358:
-	mov	w0, -1
-	str	w0, [x19]
-	b	.L359
-.L368:
-	str	wzr, [x21]
-	mov	w2, w25
-	str	wzr, [x23]
-	mov	w1, 1
-	stp	x23, x21, [x29, 120]
-	ldr	w0, [x20, 4]
-	str	w0, [x29, 116]
-	add	x0, x29, 112
-	bl	FlashReadPages
-	ldr	w24, [x29, 112]
-	cmn	w24, #1
-	bne	.L365
-	ldr	w1, [x20, 4]
-	adrp	x0, .LC76
-	add	x0, x0, :lo12:.LC76
-	bl	printk
-	str	w24, [x20]
-.L365:
-	ldr	x0, [x20, 16]
-	cbz	x0, .L366
-	ldr	w2, [x0]
-	ldr	w3, [x21]
-	cmp	w2, w3
-	beq	.L366
-	ldr	w1, [x20, 4]
-	adrp	x0, .LC77
-	add	x0, x0, :lo12:.LC77
-	bl	printk
-	mov	w0, -1
-	str	w0, [x20]
-.L366:
-	ldr	x0, [x20, 8]
-	cbz	x0, .L367
-	ldr	w3, [x22, #:lo12:check_buf]
-	ldr	w2, [x0]
-	cmp	w2, w3
-	beq	.L367
-	ldr	w1, [x20, 4]
-	adrp	x0, .LC78
-	add	x0, x0, :lo12:.LC78
-	bl	printk
-	mov	w0, -1
-	str	w0, [x20]
-.L367:
-	add	x20, x20, 32
-.L383:
-	cmp	x20, x19
-	bne	.L368
-	b	.L382
-.L364:
-	add	x21, x21, :lo12:.LANCHOR0
-	adrp	x22, check_buf
-	add	x21, x21, 3448
-	add	x23, x22, :lo12:check_buf
-	b	.L383
-	.size	FlashProgPages, .-FlashProgPages
-	.align	2
-	.global	FlashEraseBlocks
-	.type	FlashEraseBlocks, %function
-FlashEraseBlocks:
-	stp	x29, x30, [sp, -80]!
-	ubfiz	x2, x2, 5, 32
-	add	x2, x2, 4
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	str	x23, [sp, 48]
-	stp	x21, x22, [sp, 32]
-	add	x20, x0, 4
-	add	x22, x0, x2
-	mov	w21, -1
-	ldrh	w23, [x19, 12]
-.L386:
-	cmp	x20, x22
-	bne	.L392
+	b	.L358
+.L359:
+	mov	w20, 65535
+	b	.L356
+.L357:
+	mov	w0, w20
+	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
-	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldr	x23, [sp, 48]
-	ldp	x29, x30, [sp], 80
+	ldp	x29, x30, [sp], 48
 	ret
-.L392:
-	ldr	w0, [x20]
-	add	x2, x29, 72
-	add	x1, x29, 76
-	bl	l2p_addr_tran.isra.0
-	ldrb	w0, [x29, 72]
-	ldr	w1, [x29, 76]
-	ldr	x2, [x19, 3376]
-	blr	x2
-	cmp	w0, 0
-	csel	w0, w21, wzr, ne
-	str	w0, [x20, -4]
-	ldrh	w0, [x19, 14]
-	cmp	w0, 4
-	bne	.L390
-	ldrb	w0, [x29, 72]
-	ldr	x2, [x19, 3376]
-	ldr	w1, [x29, 76]
-	add	w1, w23, w1
-	blr	x2
-	cbz	w0, .L390
-	str	w21, [x20, -4]
-.L390:
-	add	x20, x20, 32
-	b	.L386
-	.size	FlashEraseBlocks, .-FlashEraseBlocks
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	2
-	.global	FtlFreeSysBlkQueueIn
-	.type	FtlFreeSysBlkQueueIn, %function
-FtlFreeSysBlkQueueIn:
+	.global	ftl_map_blk_alloc_new_blk
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
 	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp, 32]
-	and	w21, w0, 65535
 	stp	x19, x20, [sp, 16]
-	sub	w2, w21, #1
+	mov	x19, x0
+	str	x21, [sp, 32]
+	mov	w20, 0
+	ldrh	w1, [x0, 10]
+	ldr	x0, [x0, 16]
+.L362:
+	cmp	w20, w1
+	beq	.L366
+	mov	x21, x0
+	ldrh	w2, [x0], 2
+	cbnz	w2, .L363
+	bl	FtlFreeSysBlkQueueOut
+	and	w1, w0, 65535
+	strh	w0, [x21]
+	sub	w2, w1, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcc	.L397
-	adrp	x0, .LANCHOR0
-	add	x20, x0, :lo12:.LANCHOR0
-	mov	x19, x0
-	ldrh	w2, [x20, 262]
-	cmp	w2, 1024
-	beq	.L397
-	and	w1, w1, 65535
-	cbz	w1, .L399
-	mov	w0, w21
-	bl	P2V_block_in_plane
-	and	w22, w0, 65535
-	ldr	x0, [x20, 3960]
-	lsl	w1, w21, 10
-	mov	w2, 1
-	str	w1, [x0, 4]
-	mov	w1, w2
-	ldr	x0, [x20, 3960]
-	bl	FlashEraseBlocks
-	ldr	x2, [x20, 2384]
-	ubfiz	x0, x22, 1, 16
-	ldrh	w1, [x2, x0]
-	add	w1, w1, 1
-	strh	w1, [x2, x0]
-	ldr	w0, [x20, 2640]
+	bcs	.L364
+	adrp	x0, .LANCHOR0+262
+	ldrh	w2, [x0, #:lo12:.LANCHOR0+262]
+	adrp	x0, .LC84
+	add	x0, x0, :lo12:.LC84
+	bl	sftl_printk
+.L365:
+	b	.L365
+.L364:
+	ldr	w0, [x19, 48]
+	strh	wzr, [x19, 2]
 	add	w0, w0, 1
-	str	w0, [x20, 2640]
-.L399:
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 256
-	ldrh	w1, [x0, 6]
-	add	w1, w1, 1
-	strh	w1, [x0, 6]
-	ldrh	w1, [x0, 4]
-	add	x2, x0, x1, sxtw 1
-	add	w1, w1, 1
-	and	w1, w1, 1023
-	strh	w1, [x0, 4]
-	strh	w21, [x2, 8]
-.L397:
+	str	w0, [x19, 48]
+	ldrh	w0, [x19, 8]
+	strh	w20, [x19]
+	add	w0, w0, 1
+	strh	w0, [x19, 8]
+.L366:
+	ldrh	w0, [x19, 10]
+	cmp	w0, w20
+	bhi	.L368
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 578
+	add	x1, x1, 184
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L368:
+	mov	w0, 0
+	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+.L363:
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	b	.L362
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	2
-	.global	FtlLowFormatEraseBlock
-	.type	FtlLowFormatEraseBlock, %function
-FtlLowFormatEraseBlock:
-	stp	x29, x30, [sp, -128]!
-	mov	w10, 0
-	mov	w9, 4
+	.global	ftl_memset
+	.type	ftl_memset, %function
+ftl_memset:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memset
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memset, .-ftl_memset
+	.align	2
+	.global	FtlMemInit
+	.type	FtlMemInit, %function
+FtlMemInit:
+	stp	x29, x30, [sp, -48]!
+	mov	w0, 65535
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
-	add	x5, x20, :lo12:.LANCHOR0
-	stp	x23, x24, [sp, 48]
-	stp	x21, x22, [sp, 32]
-	and	w23, w1, 255
-	stp	x25, x26, [sp, 64]
-	add	x8, x5, 64
-	stp	x27, x28, [sp, 80]
-	and	w24, w0, 65535
-	mov	w21, 0
-	mov	w19, 0
-	str	w24, [x5, 3968]
-.L408:
-	ldrh	w0, [x5, 36]
-	cmp	w0, w10
-	bhi	.L412
-	cbz	w21, .L407
-	ldr	x0, [x5, 3960]
-	mov	w2, w21
-	mov	w1, 0
-	ubfiz	x21, x21, 5, 16
-	mov	x22, 0
-	add	x25, x20, :lo12:.LANCHOR0
-	bl	FlashEraseBlocks
-.L416:
-	ldr	x0, [x25, 3960]
-	add	x1, x0, x22
-	ldr	w0, [x0, x22]
-	cmn	w0, #1
-	bne	.L415
-	ldr	w0, [x1, 4]
-	add	w19, w19, 1
-	and	w19, w19, 65535
-	lsr	w0, w0, 10
-	bl	FtlBbmMapBadBlock
-.L415:
-	add	x22, x22, 32
-	cmp	x22, x21
-	bne	.L416
-	cbz	w23, .L429
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	w25, 1
-	ldrh	w26, [x0, 108]
-	lsr	w0, w26, 2
-	str	w0, [x29, 124]
-.L417:
-	add	x27, x20, :lo12:.LANCHOR0
-	mov	w22, 0
-	add	x0, x27, 64
-	str	x0, [x29, 112]
-.L425:
-	mov	w5, 0
-	mov	w21, 0
-.L418:
-	ldrh	w0, [x27, 36]
-	cmp	w0, w5
-	bhi	.L421
-	cbz	w21, .L407
-	ldr	x0, [x27, 3960]
-	mov	w1, w21
-	mov	w3, 1
-	mov	w2, w25
-	mov	x28, 0
-	bl	FlashProgPages
-	ubfiz	x1, x21, 5, 16
-.L424:
-	ldr	x0, [x27, 3960]
-	add	x3, x0, x28
-	ldr	w0, [x0, x28]
-	cbz	w0, .L423
-	ldr	w0, [x3, 4]
-	add	w19, w19, 1
-	str	x1, [x29, 104]
-	and	w19, w19, 65535
-	lsr	w0, w0, 10
-	bl	FtlBbmMapBadBlock
-	ldr	x1, [x29, 104]
-.L423:
-	add	x28, x28, 32
-	cmp	x1, x28
-	bne	.L424
-	ldr	w0, [x29, 124]
-	add	w22, w22, w0
-	and	w22, w22, 65535
-	cmp	w26, w22
-	bhi	.L425
-	add	x26, x20, :lo12:.LANCHOR0
-	mov	x22, 0
-.L427:
-	cbz	w23, .L426
-	ldr	x0, [x26, 3960]
-	add	x1, x0, x22
-	ldr	w0, [x0, x22]
-	cbnz	w0, .L426
-	ldr	w0, [x1, 4]
-	mov	w1, 1
-	lsr	w0, w0, 10
-	bl	FtlFreeSysBlkQueueIn
-.L426:
-	add	x22, x22, 32
-	cmp	x22, x28
-	bne	.L427
-	cmp	w24, 63
-	ccmp	w23, 0, 0, hi
-	beq	.L407
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	w2, w21
-	mov	w1, w25
-	ldr	x0, [x20, 3960]
-	bl	FlashEraseBlocks
-.L407:
-	mov	w0, w19
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 128
-	ret
-.L412:
-	ldr	x1, [x5, 3960]
-	ubfiz	x0, x10, 5, 16
-	str	wzr, [x1, x0]
-	mov	w1, w24
-	ldrb	w0, [x8, w10, sxtw]
-	bl	V2P_block
-	and	w6, w0, 65535
-	mov	w7, w6
-	cbz	w23, .L409
-	bl	IsBlkInVendorPart
-	cbnz	w0, .L410
-.L409:
-	mov	w0, w7
-	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L411
-	ldr	x0, [x5, 3960]
-	ubfiz	x2, x21, 5, 16
-	lsl	w6, w6, 10
-	add	x0, x0, x2
-	str	w6, [x0, 4]
-	ldr	x1, [x5, 3960]
-	ldr	x0, [x5, 3976]
-	add	x1, x1, x2
-	ldr	x2, [x5, 3984]
-	str	x0, [x1, 8]
-	ldrh	w0, [x5, 116]
-	mul	w0, w0, w21
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	sdiv	w0, w0, w9
-	add	x0, x2, x0, sxtw 2
-	str	x0, [x1, 16]
-.L410:
-	add	w10, w10, 1
-	and	w10, w10, 65535
-	b	.L408
-.L411:
-	add	w19, w19, 1
-	and	w19, w19, 65535
-	b	.L410
-.L429:
-	mov	w0, 6
-	mov	w25, 0
-	mov	w26, 1
-	str	w0, [x29, 124]
-	b	.L417
-.L421:
-	ldr	x1, [x27, 3960]
-	ubfiz	x0, x5, 5, 16
-	str	wzr, [x1, x0]
-	mov	w1, w24
-	ldr	x0, [x29, 112]
-	ldrb	w0, [x0, w5, sxtw]
-	bl	V2P_block
-	and	w6, w0, 65535
-	mov	w7, w6
-	cbz	w23, .L419
-	bl	IsBlkInVendorPart
-	cbnz	w0, .L420
-.L419:
-	mov	w0, w7
-	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L420
-	ldr	x0, [x27, 3960]
-	ubfiz	x2, x21, 5, 16
-	add	w6, w22, w6, lsl 10
-	add	x0, x0, x2
-	str	w6, [x0, 4]
-	ldr	x1, [x27, 3960]
-	ldr	x0, [x27, 3992]
-	add	x1, x1, x2
-	mov	w2, 4
-	str	x0, [x1, 8]
-	ldrh	w0, [x27, 116]
-	mul	w0, w0, w21
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	sdiv	w0, w0, w2
-	ldr	x2, [x27, 3976]
-	add	x0, x2, x0, sxtw 2
-	str	x0, [x1, 16]
-.L420:
-	add	w5, w5, 1
-	and	w5, w5, 65535
-	b	.L418
-	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
-	.align	2
-	.global	FtlFreeSysBlkQueueOut
-	.type	FtlFreeSysBlkQueueOut, %function
-FtlFreeSysBlkQueueOut:
-	stp	x29, x30, [sp, -64]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	str	x23, [sp, 48]
-	add	x20, x19, 256
-	adrp	x23, .LC80
-	add	x23, x23, :lo12:.LC80
-	stp	x21, x22, [sp, 32]
-.L451:
-	ldrh	w1, [x20, 6]
-	cbz	w1, .L452
-	ldrh	w0, [x20, 2]
-	sub	w1, w1, #1
-	strh	w1, [x20, 6]
-	add	x2, x20, x0, sxtw 1
-	add	w0, w0, 1
-	and	w0, w0, 1023
-	strh	w0, [x20, 2]
-	ldrh	w21, [x2, 8]
-	mov	w0, w21
-	bl	P2V_block_in_plane
-	and	w22, w0, 65535
-	ldr	x0, [x19, 3960]
-	lsl	w1, w21, 10
-	mov	w2, 1
-	str	w1, [x0, 4]
-	mov	w1, w2
-	ldr	x0, [x19, 3960]
-	bl	FlashEraseBlocks
-	ldr	x2, [x19, 2384]
-	ubfiz	x0, x22, 1, 16
-	ldrh	w1, [x2, x0]
-	add	w1, w1, 1
-	strh	w1, [x2, x0]
-	sub	w1, w21, #1
-	ldr	w0, [x19, 2640]
-	add	w0, w0, 1
-	str	w0, [x19, 2640]
-	mov	w0, 65533
-	cmp	w0, w1, uxth
-	bcs	.L456
-	ldrh	w2, [x20, 6]
-	mov	w1, w21
-	mov	x0, x23
-	bl	printk
-	b	.L451
-.L452:
-	adrp	x0, .LC79
-	mov	w1, 0
-	add	x0, x0, :lo12:.LC79
-	bl	printk
-.L455:
-	b	.L455
-.L456:
-	mov	w0, w21
-	ldr	x23, [sp, 48]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
-	.align	2
-	.global	ftl_map_blk_alloc_new_blk
-	.type	ftl_map_blk_alloc_new_blk, %function
-ftl_map_blk_alloc_new_blk:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	str	x21, [sp, 32]
-	mov	w20, 0
-	ldrh	w1, [x0, 10]
-	ldr	x0, [x0, 16]
-.L459:
-	cmp	w20, w1
-	beq	.L463
-	mov	x21, x0
-	ldrh	w2, [x0], 2
-	cbnz	w2, .L460
-	bl	FtlFreeSysBlkQueueOut
-	and	w1, w0, 65535
-	strh	w0, [x21]
-	sub	w2, w1, #1
-	mov	w0, 65533
-	cmp	w0, w2, uxth
-	bcs	.L461
-	adrp	x0, .LANCHOR0+262
-	ldrh	w2, [x0, #:lo12:.LANCHOR0+262]
-	adrp	x0, .LC81
-	add	x0, x0, :lo12:.LC81
-	bl	printk
-.L462:
-	b	.L462
-.L461:
-	ldr	w0, [x19, 48]
-	strh	wzr, [x19, 2]
-	add	w0, w0, 1
-	str	w0, [x19, 48]
-	ldrh	w0, [x19, 8]
-	strh	w20, [x19]
-	add	w0, w0, 1
-	strh	w0, [x19, 8]
-.L463:
-	ldrh	w0, [x19, 10]
-	cmp	w0, w20
-	bhi	.L465
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 581
-	add	x1, x1, 192
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L465:
-	mov	w0, 0
-	ldr	x21, [sp, 32]
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 48
-	ret
-.L460:
-	add	w20, w20, 1
-	and	w20, w20, 65535
-	b	.L459
-	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
-	.align	2
-	.global	ftl_memset
-	.type	ftl_memset, %function
-ftl_memset:
-	stp	x29, x30, [sp, -16]!
-	uxtw	x2, w2
-	add	x29, sp, 0
-	bl	memset
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	ftl_memset, .-ftl_memset
-	.align	2
-	.global	FtlMemInit
-	.type	FtlMemInit, %function
-FtlMemInit:
-	stp	x29, x30, [sp, -48]!
-	mov	w0, 65535
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	add	x19, x20, :lo12:.LANCHOR0
+	add	x19, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	add	x1, x19, 2560
 	add	x2, x19, 2560
+	add	x3, x19, 3328
 	strh	wzr, [x19, 3240]
 	strh	wzr, [x19, 3324]
 	stp	wzr, wzr, [x1, 28]
@@ -3519,22 +3108,20 @@ FtlMemInit:
 	str	wzr, [x19, 2608]
 	stp	wzr, wzr, [x2, 60]
 	stp	wzr, wzr, [x2, 68]
-	str	w0, [x19, 4004]
+	str	wzr, [x19, 2640]
+	str	wzr, [x19, 2644]
+	str	wzr, [x19, 2648]
+	str	wzr, [x19, 3236]
+	str	wzr, [x19, 3244]
+	stp	wzr, w0, [x3, 80]
 	mov	w0, -1
+	stp	wzr, wzr, [x3, 88]
 	strh	w0, [x19, 3320]
 	strh	w0, [x19, 3322]
 	mov	w0, 32
-	str	wzr, [x19, 2640]
 	strh	w0, [x19, 3232]
 	mov	w0, 128
-	str	wzr, [x19, 2644]
 	strh	w0, [x19, 3234]
-	str	wzr, [x19, 2648]
-	str	wzr, [x19, 3236]
-	str	wzr, [x19, 3244]
-	str	wzr, [x19, 3968]
-	str	wzr, [x19, 4000]
-	str	wzr, [x19, 4008]
 	strh	wzr, [x19, 3362]
 	ldrh	w0, [x19, 110]
 	lsl	w0, w0, 1
@@ -3550,16 +3137,16 @@ FtlMemInit:
 	lsl	w21, w21, 7
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 4016]
+	str	x0, [x19, 3424]
 	mov	w0, w22
 	bl	ftl_malloc
-	str	x0, [x19, 4024]
+	str	x0, [x19, 3432]
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 4032]
+	str	x0, [x19, 3440]
 	mov	w0, w22
 	bl	ftl_malloc
-	str	x0, [x19, 3960]
+	str	x0, [x19, 3400]
 	mov	w0, w22
 	bl	ftl_malloc
 	str	x0, [x19, 3280]
@@ -3570,37 +3157,47 @@ FtlMemInit:
 	str	w0, [x19, 3288]
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 3432]
+	str	x0, [x19, 3448]
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 4040]
+	str	x0, [x19, 3456]
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 4048]
+	str	x0, [x19, 3464]
 	ldr	w0, [x19, 3288]
 	mul	w0, w21, w0
 	bl	ftl_malloc
 	str	x0, [x19, 3264]
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 3992]
+	str	x0, [x19, 3472]
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 3976]
+	str	x0, [x19, 3480]
 	ldr	w1, [x19, 3288]
 	mov	w0, 24
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	ldrh	w21, [x19, 116]
 	str	x0, [x19, 3256]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19, 3488]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19, 3496]
+	ldrh	w0, [x19, 62]
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	ldrh	w21, [x19, 116]
+	str	x0, [x19, 3504]
 	ldrh	w0, [x19, 36]
 	mul	w21, w21, w0
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 3440]
+	str	x0, [x19, 3512]
 	lsl	w0, w21, 2
 	bl	ftl_malloc
-	str	x0, [x19, 3984]
+	str	x0, [x19, 3520]
 	ldrh	w1, [x19, 116]
 	ldr	w0, [x19, 3288]
 	mul	w0, w1, w0
@@ -3608,24 +3205,24 @@ FtlMemInit:
 	str	x0, [x19, 3272]
 	ldrh	w0, [x19, 46]
 	ubfiz	w0, w0, 1, 15
-	strh	w0, [x19, 4056]
+	strh	w0, [x19, 3528]
 	and	w0, w0, 65534
 	bl	ftl_malloc
-	str	x0, [x19, 4064]
-	ldrh	w0, [x19, 4056]
+	str	x0, [x19, 3536]
+	ldrh	w0, [x19, 3528]
 	add	x0, x0, 547
 	lsr	x0, x0, 9
-	strh	w0, [x19, 4056]
+	strh	w0, [x19, 3528]
 	lsl	w0, w0, 9
 	bl	ftl_malloc
 	ldrh	w21, [x19, 46]
-	str	x0, [x19, 4072]
+	str	x0, [x19, 3544]
 	add	x0, x0, 32
 	str	x0, [x19, 2384]
 	lsl	w21, w21, 1
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 4080]
+	str	x0, [x19, 3552]
 	mov	w0, w21
 	bl	ftl_malloc
 	ldr	w21, [x19, 132]
@@ -3633,12 +3230,10 @@ FtlMemInit:
 	lsl	w21, w21, 1
 	mov	w0, w21
 	bl	ftl_malloc
-	str	x0, [x19, 4088]
+	str	x0, [x19, 3560]
 	mov	w0, w21
-	adrp	x21, .LANCHOR3
-	add	x22, x21, :lo12:.LANCHOR3
 	bl	ftl_malloc
-	str	x0, [x22, -256]
+	str	x0, [x19, 3568]
 	ldrh	w0, [x19, 46]
 	lsr	w0, w0, 3
 	add	w0, w0, 4
@@ -3651,27 +3246,27 @@ FtlMemInit:
 	ldrh	w0, [x19, 124]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
-	str	x0, [x22, -248]
+	str	x0, [x19, 3576]
 	ldrh	w0, [x19, 124]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x22, -240]
+	str	x0, [x19, 3584]
 	ldrh	w0, [x19, 126]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
 	ldrh	w2, [x19, 126]
 	mov	w1, 0
-	str	x0, [x22, -232]
+	str	x0, [x19, 3592]
 	lsl	w2, w2, 2
 	bl	ftl_memset
 	ldrh	w0, [x19, 140]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x22, -224]
+	str	x0, [x19, 3600]
 	ldr	w0, [x19, 132]
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x22, -216]
+	str	x0, [x19, 3608]
 	ldrh	w0, [x19, 142]
 	lsl	w0, w0, 4
 	bl	ftl_malloc
@@ -3680,7 +3275,7 @@ FtlMemInit:
 	ldrh	w0, [x19, 114]
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x22, -208]
+	str	x0, [x19, 3616]
 	ldrh	w1, [x19, 46]
 	mov	w0, 6
 	mul	w0, w1, w0
@@ -3690,128 +3285,127 @@ FtlMemInit:
 	ldrh	w1, [x19, 58]
 	add	w0, w0, 31
 	asr	w0, w0, 5
-	strh	w0, [x22, -200]
+	strh	w0, [x19, 3624]
 	mul	w0, w1, w0
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	ldrh	w4, [x22, -200]
+	ldrh	w4, [x19, 3624]
 	add	x5, x19, 200
 	ldrh	w6, [x19, 58]
 	mov	x1, 1
 	str	x0, [x19, 192]
 	mov	w2, w4
 	mov	x0, x20
-.L470:
+.L373:
 	cmp	w1, w6
-	bcc	.L471
+	bcc	.L374
 	mov	w2, 8
 	add	x4, x0, :lo12:.LANCHOR0
 	sub	w2, w2, w1
 	add	x4, x4, 160
 	add	x2, x2, 1
 	mov	x3, 0
-.L472:
+.L375:
 	add	x3, x3, 1
 	cmp	x3, x2
-	bne	.L473
-	add	x2, x0, :lo12:.LANCHOR0
-	ldr	x1, [x2, 4088]
-	cbnz	x1, .L474
-.L476:
+	bne	.L376
+	add	x1, x0, :lo12:.LANCHOR0
+	ldr	x2, [x1, 3560]
+	cbnz	x2, .L377
+.L379:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x1, x1, 224
-	adrp	x0, .LC82
-	add	x0, x0, :lo12:.LC82
-	bl	printk
+	add	x1, x1, 216
+	adrp	x0, .LC85
+	add	x0, x0, :lo12:.LC85
+	bl	sftl_printk
 	mov	w0, -1
-.L469:
+.L372:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L471:
+.L374:
 	ldr	x3, [x19, 192]
 	add	w1, w1, 1
 	add	x3, x3, x2, uxtw 2
 	add	w2, w2, w4
 	str	x3, [x5], 8
-	b	.L470
-.L473:
+	b	.L373
+.L376:
 	add	x5, x1, x3
 	add	x5, x4, x5, lsl 3
 	str	xzr, [x5, 24]
-	b	.L472
-.L474:
-	add	x1, x21, :lo12:.LANCHOR3
-	ldr	x3, [x1, -256]
-	cbz	x3, .L476
-	ldr	x3, [x1, -224]
-	cbz	x3, .L476
-	ldr	x3, [x1, -216]
-	cbz	x3, .L476
-	ldr	x3, [x2, 2568]
-	cbz	x3, .L476
-	ldr	x1, [x1, -208]
-	cbz	x1, .L476
-	ldr	x1, [x2, 2360]
-	cbz	x1, .L476
-	ldr	x1, [x2, 192]
-	cbz	x1, .L476
-	ldr	x1, [x2, 2376]
-	cbz	x1, .L476
+	b	.L375
+.L377:
+	ldr	x2, [x1, 3568]
+	cbz	x2, .L379
+	ldr	x2, [x1, 3600]
+	cbz	x2, .L379
+	ldr	x2, [x1, 3608]
+	cbz	x2, .L379
+	ldr	x2, [x1, 2568]
+	cbz	x2, .L379
+	ldr	x2, [x1, 3616]
+	cbz	x2, .L379
+	ldr	x2, [x1, 2360]
+	cbz	x2, .L379
+	ldr	x2, [x1, 192]
+	cbz	x2, .L379
+	ldr	x1, [x1, 2376]
+	cbz	x1, .L379
 	add	x1, x0, :lo12:.LANCHOR0
 	ldr	x2, [x1, 3296]
-	cbz	x2, .L476
+	cbz	x2, .L379
 	ldr	x2, [x1, 3312]
-	cbz	x2, .L476
-	ldr	x2, [x1, 4016]
-	cbz	x2, .L476
-	ldr	x2, [x1, 4032]
-	cbz	x2, .L476
-	ldr	x2, [x1, 3960]
-	cbz	x2, .L476
+	cbz	x2, .L379
+	ldr	x2, [x1, 3424]
+	cbz	x2, .L379
+	ldr	x2, [x1, 3440]
+	cbz	x2, .L379
+	ldr	x2, [x1, 3400]
+	cbz	x2, .L379
 	ldr	x2, [x1, 3280]
-	cbz	x2, .L476
-	ldr	x2, [x1, 4024]
-	cbz	x2, .L476
+	cbz	x2, .L379
 	ldr	x2, [x1, 3432]
-	cbz	x2, .L476
-	ldr	x2, [x1, 4040]
-	cbz	x2, .L476
-	ldr	x1, [x1, 4048]
-	cbz	x1, .L476
+	cbz	x2, .L379
+	ldr	x2, [x1, 3448]
+	cbz	x2, .L379
+	ldr	x2, [x1, 3456]
+	cbz	x2, .L379
+	ldr	x1, [x1, 3464]
+	cbz	x1, .L379
 	add	x0, x0, :lo12:.LANCHOR0
 	ldr	x1, [x0, 3264]
-	cbz	x1, .L476
-	ldr	x1, [x0, 3992]
-	cbz	x1, .L476
-	ldr	x1, [x0, 3976]
-	cbz	x1, .L476
+	cbz	x1, .L379
+	ldr	x1, [x0, 3472]
+	cbz	x1, .L379
+	ldr	x1, [x0, 3480]
+	cbz	x1, .L379
 	ldr	x1, [x0, 3256]
-	cbz	x1, .L476
-	ldr	x1, [x0, 3440]
-	cbz	x1, .L476
-	ldr	x1, [x0, 3984]
-	cbz	x1, .L476
+	cbz	x1, .L379
+	ldr	x1, [x0, 3512]
+	cbz	x1, .L379
+	ldr	x1, [x0, 3520]
+	cbz	x1, .L379
 	ldr	x1, [x0, 3272]
-	cbz	x1, .L476
+	cbz	x1, .L379
 	ldr	x1, [x0, 2384]
-	cbz	x1, .L476
-	ldr	x1, [x0, 4064]
-	cbz	x1, .L476
+	cbz	x1, .L379
+	ldr	x1, [x0, 3536]
+	cbz	x1, .L379
 	ldr	x0, [x0, 152]
-	cbz	x0, .L476
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	ldr	x1, [x0, -248]
-	cbz	x1, .L476
-	ldr	x1, [x0, -240]
-	cbz	x1, .L476
-	ldr	x0, [x0, -232]
-	cbz	x0, .L476
+	cbz	x0, .L379
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	x1, [x0, 3576]
+	cbz	x1, .L379
+	ldr	x1, [x0, 3584]
+	cbz	x1, .L379
+	ldr	x0, [x0, 3592]
+	cbz	x0, .L379
 	mov	w0, 0
-	b	.L469
+	b	.L372
 	.size	FtlMemInit, .-FtlMemInit
 	.align	2
 	.global	FtlBbt2Bitmap
@@ -3820,51 +3414,52 @@ FtlBbt2Bitmap:
 	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	mov	x22, x0
-	adrp	x0, .LANCHOR3-200
+	adrp	x21, .LANCHOR0
+	stp	x23, x24, [sp, 48]
+	mov	x23, x0
+	add	x0, x21, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR1
 	add	x20, x20, :lo12:.LANCHOR1
-	ldrh	w2, [x0, #:lo12:.LANCHOR3-200]
-	add	x20, x20, 240
-	str	x23, [sp, 48]
-	adrp	x23, .LANCHOR0
-	add	x23, x23, :lo12:.LANCHOR0
+	adrp	x24, .LC1
+	add	x20, x20, 232
+	ldrh	w2, [x0, 3624]
+	add	x24, x24, :lo12:.LC1
 	mov	x19, 0
-	mov	x21, x1
-	lsl	w2, w2, 2
+	mov	x22, x1
+	mov	x0, x22
 	mov	w1, 0
-	mov	x0, x21
+	lsl	w2, w2, 2
 	bl	ftl_memset
-.L574:
-	ldrh	w0, [x22, x19]
+.L477:
+	ldrh	w0, [x23, x19]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L571
-	ldrh	w1, [x23, 102]
+	beq	.L474
+	add	x1, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x1, 102]
 	cmp	w1, w0
-	bhi	.L573
-	adrp	x0, .LC1
+	bhi	.L476
 	mov	w2, 74
 	mov	x1, x20
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L573:
-	ldrh	w2, [x22, x19]
+	mov	x0, x24
+	bl	sftl_printk
+.L476:
+	ldrh	w2, [x23, x19]
 	mov	w1, 1
 	add	x19, x19, 2
 	cmp	x19, 1024
 	ubfx	x0, x2, 5, 11
 	lsl	w2, w1, w2
 	lsl	x0, x0, 2
-	ldr	w1, [x21, x0]
+	ldr	w1, [x22, x0]
 	orr	w1, w1, w2
-	str	w1, [x21, x0]
-	bne	.L574
-.L571:
+	str	w1, [x22, x0]
+	bne	.L477
+.L474:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
-	ldr	x23, [sp, 48]
+	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 64
 	ret
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
@@ -3907,995 +3502,665 @@ FtlFreeSysBlkQueueInit:
 	ret
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
 	.align	2
-	.global	load_l2p_region
-	.type	load_l2p_region, %function
-load_l2p_region:
+	.global	ftl_free_no_use_map_blk
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
 	stp	x29, x30, [sp, -80]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	and	w20, w0, 65535
-	and	x19, x1, 65535
-	adrp	x0, .LANCHOR0
-	add	x1, x0, :lo12:.LANCHOR0
-	stp	x23, x24, [sp, 48]
-	stp	x21, x22, [sp, 32]
-	mov	x24, x0
-	stp	x25, x26, [sp, 64]
-	ldrh	w1, [x1, 140]
-	cmp	w1, w20
-	bcs	.L583
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 492
-	add	x1, x1, 256
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L583:
-	adrp	x22, .LANCHOR3
-	add	x22, x22, :lo12:.LANCHOR3
-	ubfiz	x0, x20, 2, 16
-	ldr	x1, [x22, -224]
-	ldr	w25, [x1, x0]
-	cbnz	w25, .L584
-	add	x24, x24, :lo12:.LANCHOR0
-	lsl	x19, x19, 4
-	mov	w1, 255
-	ldr	x0, [x24, 2568]
-	ldrh	w2, [x24, 114]
-	add	x0, x0, x19
-	ldr	x0, [x0, 8]
-	bl	ftl_memset
-	ldr	x0, [x24, 2568]
-	strh	w20, [x0, x19]
-	ldr	x0, [x24, 2568]
-	add	x19, x0, x19
-	str	wzr, [x19, 4]
-.L585:
-	mov	w0, 0
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 80
-	ret
-.L584:
-	add	x23, x24, :lo12:.LANCHOR0
-	lsl	x19, x19, 4
-	add	x21, x23, 3400
-	mov	w2, 1
-	mov	w1, w2
-	ldr	x0, [x23, 2568]
-	str	w25, [x23, 3404]
-	add	x0, x0, x19
-	ldr	x0, [x0, 8]
-	str	x0, [x23, 3408]
-	ldr	x0, [x23, 3440]
-	str	x0, [x23, 3416]
-	mov	x0, x21
-	bl	FlashReadPages
-	ldr	x26, [x23, 3416]
-	ldrh	w0, [x26, 8]
-	cmp	w0, w20
-	beq	.L586
-	mov	w2, w25
-	mov	w1, w20
-	adrp	x0, .LC83
-	add	x0, x0, :lo12:.LC83
-	bl	printk
-	ldr	x1, [x23, 3416]
-	mov	w3, 4
-	adrp	x0, .LC84
-	mov	w2, w3
-	add	x0, x0, :lo12:.LC84
-	bl	rknand_print_hex
-	ldrh	w3, [x23, 140]
-	adrp	x0, .LC85
-	ldr	x1, [x22, -224]
-	mov	w2, 4
-	add	x0, x0, :lo12:.LC85
-	bl	rknand_print_hex
-.L586:
-	ldrh	w0, [x26, 8]
-	cmp	w0, w20
-	beq	.L587
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 513
-	add	x1, x1, 256
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L587:
-	add	x0, x24, :lo12:.LANCHOR0
-	ldr	x1, [x0, 2568]
-	add	x1, x1, x19
-	str	wzr, [x1, 4]
-	ldr	x0, [x0, 2568]
-	strh	w20, [x0, x19]
-	b	.L585
-	.size	load_l2p_region, .-load_l2p_region
-	.align	2
-	.global	ftl_free_no_use_map_blk
-	.type	ftl_free_no_use_map_blk, %function
-ftl_free_no_use_map_blk:
-	stp	x29, x30, [sp, -80]!
-	mov	w1, 0
+	mov	w1, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	mov	x19, x0
 	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	stp	x25, x26, [sp, 64]
+	str	x25, [sp, 64]
 	ldrh	w2, [x0, 10]
 	ldp	x21, x20, [x0, 32]
-	ldr	x23, [x0, 16]
+	ldr	x22, [x0, 16]
 	lsl	w2, w2, 1
 	mov	x0, x21
 	bl	ftl_memset
 	mov	w0, 0
-.L590:
+.L486:
 	ldrh	w1, [x19, 6]
 	cmp	w1, w0
-	bhi	.L594
-	ldrh	w26, [x21]
-	adrp	x24, .LANCHOR0
-	add	x24, x24, :lo12:.LANCHOR0
-	mov	w25, 0
+	bhi	.L490
+	adrp	x0, .LANCHOR0+108
+	mov	w23, 0
 	mov	w20, 0
-.L595:
+	ldrh	w1, [x0, #:lo12:.LANCHOR0+108]
+	ldrh	w0, [x19]
+	strh	w1, [x21, x0, lsl 1]
+	ldrh	w24, [x21]
+.L491:
 	ldrh	w0, [x19, 10]
 	cmp	w0, w20
-	bhi	.L599
-	mov	w0, w25
+	bhi	.L495
+	mov	w0, w23
+	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 80
 	ret
-.L594:
+.L490:
 	ubfiz	x1, x0, 2, 16
 	ldr	w2, [x20, x1]
 	mov	w1, 0
 	ubfx	x2, x2, 10, 16
-.L591:
+.L487:
 	ldrh	w3, [x19, 10]
 	cmp	w3, w1
-	bhi	.L593
+	bhi	.L489
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	b	.L590
-.L593:
+	b	.L486
+.L489:
 	ubfiz	x3, x1, 1, 16
-	ldrh	w4, [x23, x3]
+	ldrh	w4, [x22, x3]
 	cmp	w4, w2
-	bne	.L592
+	bne	.L488
+	cbz	w2, .L488
 	ldrh	w4, [x21, x3]
 	add	w4, w4, 1
 	strh	w4, [x21, x3]
-.L592:
+.L488:
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L591
-.L599:
-	ldrh	w0, [x19]
-	uxtw	x22, w20
-	cmp	w0, w20
-	bne	.L596
-	ldrh	w0, [x24, 108]
-	ldrh	w1, [x19, 2]
-	cmp	w1, w0
-	bcs	.L596
-	strh	w0, [x21, x22, lsl 1]
-.L596:
-	lsl	x22, x22, 1
-	ldrh	w0, [x21, x22]
-	cmp	w26, w0
-	bls	.L597
-	mov	w25, w20
-	mov	w26, w0
-.L597:
-	cbnz	w0, .L598
-	ldrh	w0, [x23, x22]
-	cbz	w0, .L598
+	b	.L487
+.L495:
+	ubfiz	x0, x20, 1, 16
+	ldrh	w1, [x21, x0]
+	cmp	w24, w1
+	bls	.L492
+	add	x25, x22, x0
+	ldrh	w0, [x22, x0]
+	cbnz	w0, .L493
+.L494:
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	b	.L491
+.L492:
+	cbnz	w1, .L494
+	add	x25, x22, x0
+	ldrh	w0, [x22, x0]
+	cbz	w0, .L494
+.L496:
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-	strh	wzr, [x23, x22]
+	strh	wzr, [x25]
 	ldrh	w0, [x19, 8]
 	sub	w0, w0, #1
 	strh	w0, [x19, 8]
-.L598:
-	add	w20, w20, 1
-	and	w20, w20, 65535
-	b	.L595
+	b	.L494
+.L497:
+	mov	w24, 0
+	b	.L496
+.L493:
+	mov	w23, w20
+	cbz	w1, .L497
+	mov	w24, w1
+	b	.L494
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
 	.align	2
-	.global	Ftl_write_map_blk_to_last_page
-	.type	Ftl_write_map_blk_to_last_page, %function
-Ftl_write_map_blk_to_last_page:
-	stp	x29, x30, [sp, -64]!
-	mov	w1, 65535
+	.global	FtlL2PDataInit
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LANCHOR0
+	mov	w1, 0
 	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	stp	x21, x22, [sp, 32]
-	str	x23, [sp, 48]
-	ldr	x20, [x0, 16]
-	ldrh	w0, [x0]
-	cmp	w0, w1
-	bne	.L605
-	ldrh	w0, [x19, 8]
-	cbz	w0, .L606
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 641
-	add	x1, x1, 272
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L606:
-	ldrh	w0, [x19, 8]
-	add	w0, w0, 1
-	strh	w0, [x19, 8]
-	bl	FtlFreeSysBlkQueueOut
-	strh	w0, [x20]
-	strh	wzr, [x19, 2]
-	ldr	w0, [x19, 48]
-	strh	wzr, [x19]
-	add	w0, w0, 1
-	str	w0, [x19, 48]
-.L607:
-	mov	w0, 0
-	ldr	x23, [sp, 48]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-.L605:
-	ubfiz	x0, x0, 1, 16
-	adrp	x21, .LANCHOR0
-	ldr	w1, [x19, 48]
-	ldr	x23, [x19, 40]
-	ldrh	w22, [x20, x0]
-	add	x20, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x19, 2]
-	orr	w0, w0, w22, lsl 10
-	str	w0, [x20, 3404]
-	ldr	x0, [x20, 3432]
-	str	x0, [x20, 3408]
-	ldr	x0, [x20, 3440]
-	str	x0, [x20, 3416]
-	str	w1, [x0, 4]
-	mov	w1, -1291
-	strh	w1, [x0, 8]
-	ldrh	w1, [x19, 4]
-	strh	w1, [x0]
-	strh	w22, [x0, 2]
+	str	x19, [sp, 16]
+	add	x19, x0, :lo12:.LANCHOR0
+	ldr	x0, [x19, 3568]
+	ldr	w2, [x19, 132]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w0, [x19, 142]
 	mov	w1, 255
-	ldrh	w2, [x20, 108]
-	ldr	x0, [x20, 3432]
-	lsl	w2, w2, 3
+	ldrh	w2, [x19, 114]
+	mul	w2, w2, w0
+	ldr	x0, [x19, 3616]
 	bl	ftl_memset
-	mov	w0, 0
+	mov	x0, x19
 	mov	w1, 0
-.L608:
-	ldrh	w2, [x19, 6]
+	mov	w5, -1
+.L507:
+	ldrh	w2, [x0, 142]
 	cmp	w2, w1
-	bhi	.L610
-	add	x0, x21, :lo12:.LANCHOR0
-	mov	w2, 1
-	mov	w3, 0
-	mov	w1, w2
-	add	x0, x0, 3400
-	bl	FlashProgPages
-	ldrh	w0, [x19, 2]
-	add	w0, w0, 1
-	strh	w0, [x19, 2]
-	mov	x0, x19
-	bl	ftl_map_blk_gc
-	b	.L607
-.L610:
-	ubfiz	x2, x1, 2, 16
-	ldr	w3, [x23, x2]
-	cmp	w22, w3, lsr 10
-	bne	.L609
-	add	w0, w0, 1
-	ldr	x4, [x20, 3432]
-	and	w0, w0, 65535
-	ubfiz	x3, x0, 3, 16
-	str	w1, [x4, x3]
-	ldr	w4, [x23, x2]
-	ldr	x2, [x20, 3432]
-	add	x2, x2, x3
-	str	w4, [x2, 4]
-.L609:
+	bhi	.L508
+	mov	w2, -1
+	strh	w2, [x0, 3634]
+	strh	w2, [x0, 3632]
+	add	x1, x0, 3632
+	ldr	w2, [x0, 132]
+	strh	w2, [x0, 3642]
+	mov	w2, -3902
+	strh	w2, [x0, 3636]
+	ldrh	w2, [x0, 3696]
+	strh	w2, [x0, 3640]
+	ldrh	w2, [x0, 140]
+	strh	w2, [x0, 3638]
+	ldr	x2, [x0, 3560]
+	str	x2, [x0, 3648]
+	ldr	x2, [x0, 3608]
+	str	x2, [x0, 3656]
+	ldr	x2, [x0, 3568]
+	str	x2, [x0, 3664]
+	ldr	x0, [x0, 3600]
+	str	x0, [x1, 40]
+	ldr	x19, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	ret
+.L508:
+	ldr	x3, [x0, 2568]
+	ubfiz	x2, x1, 4, 16
+	add	x3, x3, x2
+	str	wzr, [x3, 4]
+	ldr	x3, [x0, 2568]
+	strh	w5, [x3, x2]
+	ldr	x3, [x0, 2568]
+	ldr	x4, [x0, 3616]
+	add	x3, x3, x2
+	ldrh	w2, [x0, 114]
+	mul	w2, w2, w1
 	add	w1, w1, 1
 	and	w1, w1, 65535
-	b	.L608
-	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	sxtw	x2, w2
+	and	x2, x2, -4
+	add	x2, x4, x2
+	str	x2, [x3, 8]
+	b	.L507
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
-	.global	FtlMapWritePage
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
-	stp	x29, x30, [sp, -96]!
+	.global	FtlVariablesInit
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
+	stp	x29, x30, [sp, -32]!
+	mov	w0, -1
+	mov	w1, 0
 	add	x29, sp, 0
-	stp	x23, x24, [sp, 48]
-	adrp	x23, .LANCHOR0
-	add	x24, x23, :lo12:.LANCHOR0
-	stp	x19, x20, [sp, 16]
-	stp	x21, x22, [sp, 32]
-	mov	x19, x0
-	stp	x25, x26, [sp, 64]
-	adrp	x22, .LANCHOR1
-	stp	x27, x28, [sp, 80]
-	mov	w26, w1
-	mov	x27, x2
-	mov	x25, x23
-	add	x22, x22, :lo12:.LANCHOR1
-	add	x20, x24, 3400
-	mov	w21, 0
-.L616:
-	add	x0, x23, :lo12:.LANCHOR0
-	ldr	w1, [x0, 2604]
-	add	w1, w1, 1
-	str	w1, [x0, 2604]
-	ldrh	w0, [x0, 108]
-	ldrh	w1, [x19, 2]
-	sub	w0, w0, #1
-	cmp	w1, w0
-	bge	.L617
-	ldrh	w1, [x19]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L618
-.L617:
-	mov	x0, x19
-	bl	Ftl_write_map_blk_to_last_page
-.L618:
-	ldrh	w1, [x19]
-	ldr	x0, [x19, 16]
-	ldrh	w0, [x0, x1, lsl 1]
-	cbnz	w0, .L619
-	adrp	x0, .LC1
-	mov	w2, 699
-	add	x1, x22, 304
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L619:
-	ldrh	w1, [x19]
-	ldrh	w0, [x19, 10]
-	cmp	w1, w0
-	bcc	.L620
-	adrp	x0, .LC1
-	mov	w2, 700
-	add	x1, x22, 304
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L620:
-	ldrh	w1, [x19]
-	mov	w2, 16
-	ldr	x0, [x19, 16]
-	ldrh	w28, [x0, x1, lsl 1]
+	str	x19, [sp, 16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	strh	w0, [x19, 3698]
+	mov	w0, -1
+	str	w0, [x19, 3708]
+	ldr	x0, [x19, 152]
+	ldrh	w2, [x19, 124]
+	strh	wzr, [x19, 148]
+	str	wzr, [x19, 3700]
+	lsl	w2, w2, 1
+	str	wzr, [x19, 3704]
+	bl	ftl_memset
+	ldr	x0, [x19, 2384]
 	mov	w1, 0
-	ldrh	w0, [x19, 2]
-	str	x27, [x20, 8]
-	orr	w0, w0, w28, lsl 10
-	str	w0, [x20, 4]
-	ldr	x0, [x24, 3440]
-	str	x0, [x20, 16]
+	ldrh	w2, [x19, 46]
+	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldr	x0, [x20, 16]
-	mov	w3, 1
-	ldr	w1, [x19, 48]
-	mov	w2, w3
-	strh	w26, [x0, 8]
-	str	w1, [x0, 4]
-	ldrh	w1, [x19, 4]
-	strh	w1, [x0]
-	mov	w1, w3
-	strh	w28, [x0, 2]
-	mov	x0, x20
-	bl	FlashProgPages
-	ldrh	w0, [x19, 2]
-	add	w0, w0, 1
-	and	w0, w0, 65535
-	strh	w0, [x19, 2]
-	ldr	w1, [x20]
-	cmn	w1, #1
-	bne	.L621
-	ldr	w1, [x20, 4]
-	adrp	x0, .LC86
-	add	x0, x0, :lo12:.LC86
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	bl	printk
-	ldrh	w0, [x19, 2]
-	cmp	w0, 2
-	bhi	.L622
-	ldrh	w0, [x24, 108]
-	sub	w0, w0, #1
-	strh	w0, [x19, 2]
-.L622:
-	cmp	w21, 3
-	bls	.L623
-	add	x25, x25, :lo12:.LANCHOR0
-	adrp	x0, .LC87
-	mov	w2, w21
-	add	x0, x0, :lo12:.LC87
-	ldr	w1, [x25, 3404]
-	bl	printk
-.L624:
-	b	.L624
-.L623:
-	ldr	w0, [x19, 52]
-	cbz	w0, .L616
-.L633:
-	b	.L633
-.L621:
-	cmp	w0, 1
-	beq	.L616
-	ldr	x0, [x19, 40]
-	ldr	w1, [x20, 4]
-	str	w1, [x0, w26, uxtw 2]
+	ldr	x0, [x19, 3536]
+	mov	w1, 0
+	ldrh	w2, [x19, 46]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	mov	w2, 48
+	mov	w1, 0
+	add	x0, x19, 2312
+	bl	ftl_memset
+	mov	w2, 512
+	mov	w1, 0
+	add	x0, x19, 2720
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	ldr	x19, [sp, 16]
 	mov	w0, 0
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 32
 	ret
-	.size	FtlMapWritePage, .-FtlMapWritePage
+	.size	FtlVariablesInit, .-FtlVariablesInit
 	.align	2
-	.global	ftl_map_blk_gc
-	.type	ftl_map_blk_gc, %function
-ftl_map_blk_gc:
-	stp	x29, x30, [sp, -96]!
+	.global	SupperBlkListInit
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	stp	x29, x30, [sp, -64]!
+	mov	w0, 6
+	mov	w1, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	mov	x19, x0
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	str	x23, [sp, 48]
+	add	x23, x19, 64
 	stp	x21, x22, [sp, 32]
-	adrp	x22, .LANCHOR0
-	stp	x23, x24, [sp, 48]
-	stp	x25, x26, [sp, 64]
-	stp	x27, x28, [sp, 80]
-	ldr	x20, [x0, 16]
-	ldr	x25, [x0, 40]
-	bl	ftl_free_no_use_map_blk
-	ldrh	w1, [x19, 10]
-	ldrh	w2, [x19, 8]
-	sub	w1, w1, #4
-	cmp	w2, w1
-	blt	.L636
-	ubfiz	x0, x0, 1, 16
-	ldrh	w24, [x20, x0]
-	cbz	w24, .L636
-	ldr	w1, [x19, 52]
-	cbnz	w1, .L636
-	mov	w1, 1
-	str	w1, [x19, 52]
-	strh	wzr, [x20, x0]
-	ldrh	w0, [x19, 8]
-	ldrh	w1, [x19, 2]
-	sub	w0, w0, #1
-	strh	w0, [x19, 8]
-	add	x0, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 108]
-	cmp	w1, w0
-	bcc	.L637
-	mov	x0, x19
-	bl	ftl_map_blk_alloc_new_blk
-.L637:
-	add	x26, x22, :lo12:.LANCHOR0
-	adrp	x23, .LANCHOR1
-	add	x23, x23, :lo12:.LANCHOR1
-	add	x21, x26, 3400
-	add	x23, x23, 320
 	mov	w20, 0
-.L638:
-	ldrh	w0, [x19, 6]
+	mov	w22, 0
+	ldrh	w2, [x19, 46]
+	mov	w21, 0
+	mul	w2, w2, w0
+	ldr	x0, [x19, 2360]
+	bl	ftl_memset
+	strh	wzr, [x19, 2400]
+	strh	wzr, [x19, 2416]
+	str	xzr, [x19, 2368]
+	str	xzr, [x19, 2392]
+	str	xzr, [x19, 2408]
+.L513:
+	ldrh	w0, [x19, 44]
+	cmp	w20, w0
+	bcs	.L520
+	ldrh	w8, [x19, 36]
+	mov	x6, 0
+	ldrh	w7, [x19, 106]
+	mov	w5, 0
+	b	.L521
+.L515:
+	ldrb	w0, [x23, x6]
+	mov	w1, w20
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L514
+	add	w5, w5, w7
+	and	w5, w5, 65535
+.L514:
+	add	x6, x6, 1
+.L521:
+	cmp	w8, w6, uxth
+	bhi	.L515
+	cbz	w5, .L516
+	mov	w0, 32768
+	sdiv	w5, w0, w5
+.L517:
+	ldr	x1, [x19, 2360]
+	mov	w0, 6
+	umaddl	x0, w20, w0, x1
+	strh	w5, [x0, 4]
+	ldrh	w0, [x19, 2424]
 	cmp	w0, w20
-	bhi	.L642
-	mov	w1, 1
-	mov	w0, w24
-	bl	FtlFreeSysBlkQueueIn
-	str	wzr, [x19, 52]
-.L636:
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrh	w1, [x19, 2]
-	ldrh	w0, [x22, 108]
-	cmp	w1, w0
-	bcc	.L643
-	mov	x0, x19
-	bl	ftl_map_blk_alloc_new_blk
-.L643:
+	beq	.L518
+	ldrh	w0, [x19, 2472]
+	cmp	w0, w20
+	beq	.L518
+	ldrh	w0, [x19, 2520]
+	cmp	w0, w20
+	beq	.L518
+	ldr	x1, [x19, 2376]
+	ubfiz	x0, x20, 1, 16
+	ldrh	w0, [x1, x0]
+	cbnz	w0, .L519
+	add	w22, w22, 1
+	mov	w0, w20
+	and	w22, w22, 65535
+	bl	INSERT_FREE_LIST
+.L518:
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	b	.L513
+.L516:
+	ldr	x1, [x19, 2376]
+	ubfiz	x0, x20, 1, 16
+	mov	w2, -1
+	strh	w2, [x1, x0]
+	b	.L517
+.L519:
+	add	w21, w21, 1
+	mov	w0, w20
+	and	w21, w21, 65535
+	bl	INSERT_DATA_LIST
+	b	.L518
+.L520:
+	strh	w21, [x19, 2400]
+	add	w21, w21, w22
+	strh	w22, [x19, 2416]
+	cmp	w21, w0
+	ble	.L522
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2170
+	add	x1, x1, 248
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L522:
 	mov	w0, 0
+	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 64
 	ret
-.L642:
-	ubfiz	x27, x20, 2, 16
-	ldr	w0, [x25, x27]
-	cmp	w24, w0, lsr 10
-	bne	.L639
-	ldr	x28, [x26, 3440]
-	mov	w2, 1
-	ldr	x0, [x26, 4040]
-	mov	w1, w2
-	stp	x0, x28, [x21, 8]
-	ldr	w0, [x25, x27]
-	str	w0, [x21, 4]
-	mov	x0, x21
-	bl	FlashReadPages
-	ldrh	w0, [x28, 8]
-	cmp	w0, w20
-	beq	.L640
-	adrp	x0, .LC1
-	mov	w2, 613
-	mov	x1, x23
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L640:
-	ldr	w0, [x21]
-	cmn	w0, #1
-	bne	.L641
-	str	wzr, [x25, x27]
-.L639:
-	add	w20, w20, 1
-	and	w20, w20, 65535
-	b	.L638
-.L641:
-	ldr	x2, [x21, 8]
-	mov	w1, w20
-	mov	x0, x19
-	bl	FtlMapWritePage
-	b	.L639
-	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.size	SupperBlkListInit, .-SupperBlkListInit
 	.align	2
-	.global	flush_l2p_region
-	.type	flush_l2p_region, %function
-flush_l2p_region:
+	.global	FtlGcPageVarInit
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
 	stp	x29, x30, [sp, -32]!
+	mov	w1, 255
 	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
+	str	x19, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	ubfiz	x20, x0, 4, 16
-	ldr	x0, [x19, 2568]
-	add	x1, x0, x20
-	ldr	x2, [x1, 8]
-	ldrh	w1, [x0, x20]
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	sub	x0, x0, #192
-	bl	FtlMapWritePage
-	ldr	x0, [x19, 2568]
-	add	x0, x0, x20
-	ldr	w1, [x0, 4]
-	and	w1, w1, 2147483647
-	str	w1, [x0, 4]
-	mov	w0, 0
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	flush_l2p_region, .-flush_l2p_region
-	.align	2
-	.global	log2phys
-	.type	log2phys, %function
-log2phys:
-	stp	x29, x30, [sp, -80]!
+	ldr	x0, [x19, 3296]
+	ldrh	w2, [x19, 110]
+	strh	wzr, [x19, 3292]
+	strh	wzr, [x19, 3304]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w2, [x19, 110]
+	mov	w0, 12
+	mov	w1, 255
+	mul	w2, w2, w0
+	ldr	x0, [x19, 3312]
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	ldr	x19, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	2
+	.global	FlashGetBadBlockList
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	stp	x29, x30, [sp, -48]!
+	mov	w2, 256
 	add	x29, sp, 0
-	stp	x23, x24, [sp, 48]
-	mov	w23, w2
-	adrp	x24, .LANCHOR0
-	add	x2, x24, :lo12:.LANCHOR0
-	stp	x21, x22, [sp, 32]
-	mov	x22, x1
 	stp	x19, x20, [sp, 16]
-	str	x25, [sp, 64]
-	ldrh	w19, [x2, 112]
-	add	w1, w19, 7
-	mov	x19, 1
-	lsr	w21, w0, w1
-	and	w21, w21, 65535
-	lsl	x19, x19, x1
-	ldr	w1, [x2, 2584]
-	sub	w19, w19, #1
-	and	w19, w19, w0
-	cmp	w0, w1
-	and	x19, x19, 65535
-	bcc	.L651
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 808
-	add	x1, x1, 336
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L651:
-	add	x0, x24, :lo12:.LANCHOR0
-	ldrh	w1, [x0, 142]
-	ldr	x2, [x0, 2568]
-	mov	x0, 0
-.L652:
-	and	x20, x0, 65535
-	cmp	w20, w1
-	bcc	.L657
-	bl	select_l2p_ram_region
-	and	x20, x0, 65535
-	add	x2, x24, :lo12:.LANCHOR0
-	ubfiz	x1, x20, 4, 16
-	mov	w25, w0
-	ldr	x2, [x2, 2568]
-	add	x3, x2, x1
-	ldrh	w2, [x2, x1]
-	mov	w1, 65535
-	cmp	w2, w1
-	beq	.L658
-	ldr	w1, [x3, 4]
-	tbz	w1, #31, .L658
-	bl	flush_l2p_region
-.L658:
-	mov	w1, w25
-	mov	w0, w21
-	bl	load_l2p_region
-	b	.L653
-.L657:
-	add	x0, x0, 1
-	add	x3, x2, x0, lsl 4
-	ldrh	w3, [x3, -16]
-	cmp	w3, w21
-	bne	.L652
-.L653:
-	cbnz	w23, .L654
-	add	x0, x24, :lo12:.LANCHOR0
-	ldr	x0, [x0, 2568]
-	add	x0, x0, x20, lsl 4
-	ldr	x0, [x0, 8]
-	ldr	w0, [x0, x19, lsl 2]
-	str	w0, [x22]
-.L655:
-	add	x24, x24, :lo12:.LANCHOR0
-	ldr	x0, [x24, 2568]
-	add	x20, x0, x20, lsl 4
-	ldr	w0, [x20, 4]
-	cmn	w0, #1
-	beq	.L660
-	add	w0, w0, 1
-	str	w0, [x20, 4]
-.L660:
+	mov	x20, x0
+	str	x21, [sp, 32]
+	mov	w21, w1
+	mov	w1, 255
+	bl	ftl_memset
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, w21
+	ldr	x2, [x0, 3368]
+	mov	x0, x20
+	blr	x2
+	and	w0, w0, 65535
+	cmp	w0, 50
+	bls	.L527
+	mov	w2, 256
+	mov	w1, 255
+	mov	x0, x20
+	bl	ftl_memset
 	mov	w0, 0
-	ldr	x25, [sp, 64]
+.L527:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x19, 14]
+	cmp	w1, 4
+	bne	.L531
+	mov	x1, 0
+.L529:
+	cmp	w0, w1, uxth
+	bhi	.L530
+.L531:
+	ldp	x19, x20, [sp, 16]
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 48
+	ret
+.L530:
+	ldrh	w2, [x20, x1, lsl 1]
+	lsr	w2, w2, 1
+	strh	w2, [x20, x1, lsl 1]
+	add	x1, x1, 1
+	b	.L529
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
+	.global	ftl_memcpy
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memcpy
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	2
+	.global	FlashReadPages
+	.type	FlashReadPages, %function
+FlashReadPages:
+	stp	x29, x30, [sp, -112]!
+	ubfiz	x1, x1, 5, 32
+	add	x29, sp, 0
+	stp	x21, x22, [sp, 32]
+	adrp	x21, .LANCHOR0
+	add	x2, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp, 48]
+	stp	x19, x20, [sp, 16]
+	adrp	x22, .LANCHOR1
+	stp	x25, x26, [sp, 64]
+	add	x22, x22, :lo12:.LANCHOR1
+	str	x27, [sp, 80]
+	adrp	x23, .LC1
+	mov	x19, x0
+	add	x24, x0, x1
+	ldrh	w25, [x2, 12]
+	add	x22, x22, 272
+	add	x23, x23, :lo12:.LC1
+.L536:
+	cmp	x24, x19
+	bne	.L546
 	ldp	x19, x20, [sp, 16]
+	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 80
+	ldp	x25, x26, [sp, 64]
+	ldr	x27, [sp, 80]
+	ldp	x29, x30, [sp], 112
 	ret
-.L654:
-	add	x2, x24, :lo12:.LANCHOR0
-	lsl	x0, x20, 4
-	mov	x1, x0
-	ldr	w4, [x22]
-	ldr	x3, [x2, 2568]
-	add	x0, x3, x0
-	ldr	x0, [x0, 8]
-	str	w4, [x0, x19, lsl 2]
-	strh	w21, [x2, 2576]
-	ldr	x0, [x2, 2568]
-	add	x0, x0, x1
-	ldr	w1, [x0, 4]
-	orr	w1, w1, -2147483648
-	str	w1, [x0, 4]
-	b	.L655
-	.size	log2phys, .-log2phys
+.L546:
+	ldr	x0, [x19, 8]
+	cbz	x0, .L537
+	ldr	x0, [x19, 16]
+	cbnz	x0, .L538
+.L537:
+	mov	w2, 96
+	mov	x1, x22
+	mov	x0, x23
+	bl	sftl_printk
+.L538:
+	ldr	w0, [x19, 4]
+	add	x2, x29, 104
+	add	x1, x29, 108
+	bl	l2p_addr_tran.isra.0
+	ldr	x20, [x19, 8]
+	tst	x20, 63
+	beq	.L539
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x20, [x0, 3488]
+.L539:
+	add	x27, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x29, 104]
+	ldr	w1, [x29, 108]
+	mov	x2, x20
+	ldr	x3, [x19, 16]
+	ldr	x4, [x27, 3392]
+	blr	x4
+	str	w0, [x19]
+	ldrh	w0, [x27, 14]
+	cmp	w0, 4
+	bne	.L541
+	ldrb	w0, [x29, 104]
+	add	x2, x20, 2048
+	ldr	x4, [x27, 3392]
+	ldr	w1, [x29, 108]
+	ldr	x3, [x19, 16]
+	add	w1, w25, w1
+	add	x3, x3, 8
+	blr	x4
+	cmn	w0, #1
+	beq	.L542
+	ldr	x2, [x19, 16]
+	ldr	w1, [x2, 12]
+	cmn	w1, #1
+	bne	.L543
+	ldr	w1, [x2, 8]
+	cmn	w1, #1
+	bne	.L543
+	ldr	w1, [x2]
+	cmn	w1, #1
+	beq	.L543
+.L542:
+	mov	w1, -1
+	str	w1, [x19]
+.L543:
+	ldr	w1, [x19]
+	cmn	w1, #1
+	beq	.L541
+	cmp	w0, 256
+	bne	.L541
+	str	w0, [x19]
+.L541:
+	add	x1, x21, :lo12:.LANCHOR0
+	ldr	x0, [x1, 3488]
+	cmp	x20, x0
+	bne	.L545
+	ldr	x0, [x19, 8]
+	cmp	x20, x0
+	beq	.L545
+	ldrh	w2, [x1, 62]
+	mov	x1, x20
+	lsl	w2, w2, 9
+	bl	ftl_memcpy
+.L545:
+	add	x19, x19, 32
+	b	.L536
+	.size	FlashReadPages, .-FlashReadPages
 	.align	2
-	.global	FtlReUsePrevPpa
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
+	.global	FtlLoadFactoryBbt
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
 	stp	x29, x30, [sp, -80]!
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	mov	w21, w0
+	add	x22, x0, 172
+	stp	x25, x26, [sp, 64]
+	mov	w21, 0
 	stp	x19, x20, [sp, 16]
-	lsr	w0, w1, 10
-	str	w1, [x29, 76]
-	adrp	x22, .LANCHOR0
-	str	x23, [sp, 48]
-	bl	P2V_block_in_plane
-	add	x2, x22, :lo12:.LANCHOR0
-	and	w0, w0, 65535
-	ubfiz	x20, x0, 1, 16
-	ldr	x3, [x2, 2376]
-	ldrh	w1, [x3, x20]
-	cbnz	w1, .L666
-	ldr	x19, [x2, 2408]
-	cbz	x19, .L667
-	ldrh	w3, [x2, 2416]
-	mov	x4, -6148914691236517206
-	ldr	x2, [x2, 2360]
-	movk	x4, 0xaaab, lsl 0
-	mov	w5, 65535
-	sub	x19, x19, x2
-	asr	x19, x19, 1
-	mul	x19, x19, x4
-	mov	w4, 6
-	and	w19, w19, 65535
-.L668:
-	cmp	w1, w3
-	beq	.L667
-	cmp	w19, w0
-	bne	.L669
-	add	x23, x22, :lo12:.LANCHOR0
-	mov	w1, w19
-	add	x0, x23, 2408
-	bl	List_remove_node
-	ldrh	w0, [x23, 2416]
-	cbnz	w0, .L670
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1688
-	add	x1, x1, 352
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L670:
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrh	w0, [x22, 2416]
-	sub	w0, w0, #1
-	strh	w0, [x22, 2416]
-	mov	w0, w19
-	bl	INSERT_DATA_LIST
-	ldr	x1, [x22, 2376]
-	ldrh	w0, [x1, x20]
-	add	w0, w0, 1
-	strh	w0, [x1, x20]
-.L667:
-	add	x1, x29, 76
-	mov	w2, 1
-	mov	w0, w21
-	bl	log2phys
+	mov	x19, x0
+	stp	x23, x24, [sp, 48]
+	add	x23, x0, 3712
+	mov	x25, x23
+	mov	w26, 61664
+	ldr	x1, [x0, 3448]
+	ldr	x24, [x0, 3512]
+	stp	x1, x24, [x23, 8]
+.L564:
+	ldrh	w0, [x19, 58]
+	cmp	w21, w0
+	bcc	.L569
+	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
-	ldr	x23, [sp, 48]
-	ldp	x29, x30, [sp], 80
-	ret
-.L669:
-	umull	x19, w19, w4
-	ldrh	w19, [x2, x19]
-	cmp	w19, w5
-	beq	.L667
-	add	w1, w1, 1
-	and	w1, w1, 65535
-	b	.L668
-.L666:
-	add	w1, w1, 1
-	strh	w1, [x3, x20]
-	b	.L667
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
-	.align	2
-	.global	ftl_scan_all_data
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
-	sub	sp, sp, #96
-	adrp	x0, .LC88
-	mov	w1, 0
-	add	x0, x0, :lo12:.LC88
-	stp	x29, x30, [sp, 16]
-	add	x29, sp, 16
-	stp	x21, x22, [sp, 48]
-	adrp	x22, .LANCHOR0
-	add	x21, x22, :lo12:.LANCHOR0
-	stp	x19, x20, [sp, 32]
-	str	x23, [sp, 64]
-	mov	w20, 0
-	add	x19, x21, 3400
-	bl	printk
-.L677:
-	add	x0, x22, :lo12:.LANCHOR0
-	ldr	w0, [x0, 2584]
-	cmp	w20, w0
-	bcc	.L683
-	ldp	x19, x20, [sp, 32]
-	ldp	x21, x22, [sp, 48]
-	ldp	x29, x30, [sp, 16]
-	ldr	x23, [sp, 64]
-	add	sp, sp, 96
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x29, x30, [sp], 80
 	ret
-.L683:
-	mov	w2, 0
-	add	x1, x29, 76
-	mov	w0, w20
-	bl	log2phys
-	tst	x20, 2047
-	bne	.L678
-	ldr	w2, [x29, 76]
-	adrp	x0, .LC89
-	mov	w1, w20
-	add	x0, x0, :lo12:.LC89
-	bl	printk
-.L678:
-	ldr	w0, [x29, 76]
-	cmn	w0, #1
-	beq	.L680
-	ldr	x23, [x21, 3440]
-	mov	w2, 0
-	stp	wzr, w0, [x19]
-	mov	w1, 1
-	ldr	x0, [x21, 3432]
-	str	x0, [x19, 8]
-	mov	x0, x19
-	str	x23, [x19, 16]
-	str	w20, [x19, 24]
+.L569:
+	ldrh	w20, [x19, 102]
+	mov	w0, -1
+	strh	w0, [x22]
+.L566:
+	ldrh	w0, [x19, 102]
+	sub	w20, w20, #1
+	and	w20, w20, 65535
+	sub	w1, w0, #16
+	cmp	w20, w1
+	ble	.L567
+	madd	w0, w0, w21, w20
+	mov	w2, 1
+	mov	w1, w2
+	lsl	w0, w0, 10
+	str	w0, [x25, 4]
+	mov	x0, x23
 	bl	FlashReadPages
-	ldr	w0, [x19]
-	cmp	w0, 256
-	ccmn	w0, #1, 4, ne
-	beq	.L681
-	ldr	w0, [x23, 8]
-	cmp	w20, w0
-	beq	.L680
-.L681:
-	ldp	x1, x0, [x19, 8]
-	ldr	w2, [x1, 4]
-	str	w2, [sp]
-	ldp	w3, w4, [x0]
-	ldp	w5, w6, [x0, 8]
-	adrp	x0, .LC90
-	ldr	w7, [x1]
-	add	x0, x0, :lo12:.LC90
-	ldr	w2, [x19, 4]
-	mov	w1, w20
-	bl	printk
-.L680:
-	add	w20, w20, 1
-	b	.L677
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	ldr	w0, [x25]
+	cmn	w0, #1
+	beq	.L566
+	ldrh	w0, [x24]
+	cmp	w0, w26
+	bne	.L566
+	strh	w20, [x22]
+.L567:
+	add	w21, w21, 1
+	add	x22, x22, 2
+	b	.L564
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
-	.global	FtlReadRefresh
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
-	adrp	x0, .LANCHOR0
-	add	x1, x0, :lo12:.LANCHOR0
-	add	x2, x1, 2720
-	ldr	w3, [x2, 80]
-	cbz	w3, .L686
-	ldr	w0, [x1, 2584]
-	ldr	w3, [x2, 84]
-	cmp	w3, w0
-	bcs	.L687
+	.global	FtlGetLastWrittenPage
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
 	stp	x29, x30, [sp, -160]!
+	cmp	w1, 1
 	add	x29, sp, 0
+	stp	x23, x24, [sp, 48]
+	mov	w23, w1
 	stp	x19, x20, [sp, 16]
-	mov	x19, x1
-	mov	w20, 2048
-	str	x21, [sp, 32]
-.L692:
-	ldr	w1, [x19, 2584]
-	ldr	w0, [x19, 2804]
-	cmp	w0, w1
-	bcs	.L689
-	add	x1, x29, 60
-	mov	w2, 0
-	bl	log2phys
-	ldr	w0, [x19, 2804]
-	ldr	w1, [x29, 60]
-	add	w0, w0, 1
-	str	w0, [x19, 2804]
-	cmn	w1, #1
-	beq	.L690
-	str	w0, [x29, 88]
-	adrp	x0, ftl_temp_buf
-	add	x0, x0, :lo12:ftl_temp_buf
-	str	x0, [x29, 72]
-	add	x0, x29, 96
-	str	x0, [x29, 80]
-	add	x0, x29, 160
-	str	w1, [x29, 68]
-	mov	w2, 0
+	adrp	x1, .LANCHOR0
+	stp	x21, x22, [sp, 32]
+	add	x2, x1, :lo12:.LANCHOR0
+	bne	.L575
+	ldrh	w19, [x2, 108]
+.L576:
+	add	x1, x1, :lo12:.LANCHOR0
+	sub	w19, w19, #1
+	sxth	w19, w19
+	lsl	w21, w0, 10
+	orr	w0, w19, w21
+	mov	w2, w23
+	ldr	x1, [x1, 3496]
+	str	x1, [x29, 72]
+	add	x1, x29, 96
+	str	w0, [x29, 68]
+	add	x0, x29, 64
+	str	x1, [x29, 80]
 	mov	w1, 1
-	str	wzr, [x0, -96]!
 	bl	FlashReadPages
-	ldr	w0, [x29, 64]
-	cmp	w0, 256
-	bne	.L689
-	ldr	w0, [x29, 60]
-	lsr	w0, w0, 10
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L689:
+	ldr	w0, [x29, 96]
+	cmn	w0, #1
+	bne	.L577
+	mov	w22, 0
+	mov	w24, 2
+.L578:
+	cmp	w22, w19
+	ble	.L581
+.L577:
+	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
-	mov	w0, -1
-	ldr	x21, [sp, 32]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
 	ldp	x29, x30, [sp], 160
 	ret
-.L690:
-	subs	w20, w20, #1
-	bne	.L692
-	b	.L689
-.L687:
-	ldr	w0, [x1, 2588]
-	stp	w0, wzr, [x2, 76]
-	str	wzr, [x2, 84]
-.L696:
-	mov	w0, 0
-	ret
-.L686:
-	ldr	w3, [x1, 2588]
-	ldr	w5, [x2, 76]
-	add	w2, w3, 1048576
-	cmp	w5, w2
-	bhi	.L695
-	ldr	w2, [x1, 2644]
-	lsr	w4, w2, 10
-	mov	w2, 33554432
-	asr	w2, w2, w4
-	add	w2, w2, w5
-	cmp	w3, w2
-	bhi	.L695
-	ldrb	w1, [x1, 2340]
-	cbnz	w1, .L696
-.L695:
-	add	x0, x0, :lo12:.LANCHOR0
+.L575:
+	ldrh	w19, [x2, 106]
+	b	.L576
+.L581:
+	add	w20, w22, w19
+	mov	w2, w23
 	mov	w1, 1
-	str	w3, [x0, 2796]
-	str	w1, [x0, 2800]
-	str	wzr, [x0, 2804]
-	b	.L696
-	.size	FtlReadRefresh, .-FtlReadRefresh
-	.align	2
-	.global	FtlMapBlkWriteDump_data
-	.type	FtlMapBlkWriteDump_data, %function
-FtlMapBlkWriteDump_data:
-	ldr	w1, [x0, 56]
-	cbz	w1, .L710
-	stp	x29, x30, [sp, -48]!
-	adrp	x1, .LANCHOR0
-	add	x2, x1, :lo12:.LANCHOR0
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	str	x21, [sp, 32]
-	add	x0, x2, 3400
-	mov	x21, x1
-	ldrh	w20, [x19, 6]
-	ldr	x4, [x2, 3440]
-	sub	w20, w20, #1
-	ldr	x3, [x2, 4040]
-	and	w20, w20, 65535
-	ldr	x5, [x19, 40]
-	stp	x3, x4, [x0, 8]
-	ubfiz	x4, x20, 2, 16
-	str	wzr, [x19, 56]
-	ldr	w4, [x5, x4]
-	str	w4, [x0, 4]
-	cbz	w4, .L704
-	mov	w2, 1
-	mov	w1, w2
+	sdiv	w20, w20, w24
+	sxth	w0, w20
+	orr	w0, w0, w21
+	str	w0, [x29, 68]
+	add	x0, x29, 64
 	bl	FlashReadPages
-.L705:
-	add	x1, x21, :lo12:.LANCHOR0
-	mov	x0, x19
-	ldr	x2, [x1, 3408]
-	mov	w1, w20
-	bl	FtlMapWritePage
-	ldr	x21, [sp, 32]
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 48
-	ret
-.L704:
-	ldrh	w2, [x2, 114]
-	mov	w1, 255
-	mov	x0, x3
-	bl	ftl_memset
-	b	.L705
-.L710:
-	ret
-	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	ldr	w0, [x29, 96]
+	cmn	w0, #1
+	bne	.L579
+	ldr	w0, [x29, 100]
+	cmn	w0, #1
+	bne	.L579
+	ldr	w0, [x29, 64]
+	cmn	w0, #1
+	beq	.L579
+	sub	w19, w20, #1
+	sxth	w19, w19
+	b	.L578
+.L579:
+	add	w20, w20, 1
+	sxth	w22, w20
+	b	.L578
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
 	.align	2
 	.global	FtlScanSysBlk
 	.type	FtlScanSysBlk, %function
@@ -4904,29 +4169,27 @@ FtlScanSysBlk:
 	mov	w1, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR3
 	stp	x21, x22, [sp, 32]
-	add	x21, x20, :lo12:.LANCHOR3
+	adrp	x21, .LANCHOR0
+	add	x19, x21, :lo12:.LANCHOR0
 	stp	x23, x24, [sp, 48]
-	adrp	x22, .LANCHOR0
 	stp	x25, x26, [sp, 64]
-	add	x19, x22, :lo12:.LANCHOR0
-	stp	x27, x28, [sp, 80]
 	adrp	x25, .LANCHOR1
-	strh	wzr, [x21, -128]
+	stp	x27, x28, [sp, 80]
 	add	x25, x25, :lo12:.LANCHOR1
-	ldr	x0, [x21, -216]
-	add	x25, x25, 368
+	ldr	x0, [x19, 3608]
+	add	x25, x25, 288
 	ldr	w2, [x19, 132]
+	strh	wzr, [x19, 3696]
 	strh	wzr, [x19, 148]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldr	x0, [x19, 4088]
+	ldr	x0, [x19, 3560]
 	mov	w1, 0
 	ldr	w2, [x19, 132]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldr	x0, [x21, -240]
+	ldr	x0, [x19, 3584]
 	mov	w1, 0
 	ldrh	w2, [x19, 124]
 	lsl	w2, w2, 2
@@ -4941,361 +4204,352 @@ FtlScanSysBlk:
 	add	x0, x19, 2656
 	bl	ftl_memset
 	ldrh	w24, [x19, 44]
-.L714:
+.L587:
 	ldrh	w0, [x19, 46]
 	cmp	w0, w24
-	bls	.L754
+	bls	.L627
 	ldrh	w9, [x19, 36]
 	mov	x5, 0
 	ldrh	w8, [x19, 116]
-	mov	w21, 0
+	mov	w20, 0
 	add	x7, x19, 64
 	mov	w6, 4
-	b	.L755
-.L716:
+	b	.L628
+.L589:
 	ldrb	w0, [x7, x5]
 	mov	w1, w24
 	bl	V2P_block
 	and	w4, w0, 65535
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L715
-	ldr	x0, [x19, 4016]
-	ubfiz	x2, x21, 5, 16
+	cbnz	w0, .L588
+	ldr	x0, [x19, 3424]
+	ubfiz	x2, x20, 5, 16
 	lsl	w4, w4, 10
 	add	x0, x0, x2
 	str	w4, [x0, 4]
-	ldr	x1, [x19, 4016]
+	ldr	x1, [x19, 3424]
 	ldr	x0, [x19, 3264]
 	add	x1, x1, x2
 	ldr	x2, [x19, 3272]
 	str	x0, [x1, 8]
-	mul	w0, w21, w8
-	add	w21, w21, 1
-	and	w21, w21, 65535
+	mul	w0, w20, w8
+	add	w20, w20, 1
+	and	w20, w20, 65535
 	sdiv	w0, w0, w6
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1, 16]
-.L715:
+.L588:
 	add	x5, x5, 1
-.L755:
+.L628:
 	cmp	w9, w5, uxth
-	bhi	.L716
-	cbnz	w21, .L717
-.L753:
+	bhi	.L589
+	cbnz	w20, .L590
+.L626:
 	add	w24, w24, 1
 	and	w24, w24, 65535
-	b	.L714
-.L717:
-	ldr	x0, [x19, 4016]
-	mov	w1, w21
+	b	.L587
+.L590:
+	ldr	x0, [x19, 3424]
+	mov	w1, w20
 	mov	w2, 1
-	ubfiz	x21, x21, 5, 16
+	ubfiz	x20, x20, 5, 16
 	mov	x23, 0
-	add	x28, x19, 2656
+	add	x27, x19, 2656
 	bl	FlashReadPages
-.L752:
-	ldr	x0, [x19, 4016]
+.L625:
+	ldr	x0, [x19, 3424]
 	add	x1, x0, x23
 	ldr	w0, [x0, x23]
-	ldr	w26, [x1, 4]
+	ldr	w22, [x1, 4]
 	cmn	w0, #1
-	ldr	x27, [x1, 16]
-	ubfx	x26, x26, 10, 16
-	bne	.L720
-	mov	w3, 16
-	mov	w4, 65535
-.L722:
-	ldr	x0, [x19, 4016]
+	ldr	x26, [x1, 16]
+	ubfx	x22, x22, 10, 16
+	bne	.L593
+	mov	w28, 16
+	mov	w3, 65535
+.L595:
+	ldr	x0, [x19, 3424]
 	mov	w2, 1
-	stp	w4, w3, [x29, 104]
+	str	w3, [x29, 108]
 	add	x0, x0, x23
 	ldr	w1, [x0, 4]
 	add	w1, w1, 1
 	str	w1, [x0, 4]
 	mov	w1, w2
-	ldr	x0, [x19, 4016]
+	ldr	x0, [x19, 3424]
 	add	x0, x0, x23
 	bl	FlashReadPages
-	ldp	w4, w3, [x29, 104]
-	ldrh	w0, [x27]
-	cmp	w0, w4
-	ldr	x0, [x19, 4016]
-	bne	.L719
+	ldrh	w0, [x26]
+	ldr	w3, [x29, 108]
+	cmp	w0, w3
+	ldr	x0, [x19, 3424]
+	bne	.L592
 	mov	w1, -1
 	str	w1, [x0, x23]
-	ldr	x0, [x19, 4016]
+	ldr	x0, [x19, 3424]
 	ldr	w0, [x0, x23]
 	cmp	w0, w1
-	bne	.L720
-.L721:
-	mov	w1, 0
-	mov	w0, w26
-	bl	FtlFreeSysBlkQueueIn
-	b	.L725
-.L719:
+	bne	.L593
+.L594:
+	mov	w1, 1
+	b	.L665
+.L592:
 	ldr	w0, [x0, x23]
 	cmn	w0, #1
-	bne	.L720
-	sub	w3, w3, #1
-	ands	w3, w3, 65535
-	bne	.L722
-	b	.L721
-.L720:
+	bne	.L593
+	sub	w28, w28, #1
+	ands	w28, w28, 65535
+	bne	.L595
+	b	.L594
+.L593:
 	ldr	w1, [x19, 2620]
-	ldr	w0, [x27, 4]
+	ldr	w0, [x26, 4]
 	cmn	w1, #1
-	beq	.L723
+	beq	.L596
 	cmp	w1, w0
-	bhi	.L724
-.L723:
+	bhi	.L597
+.L596:
 	cmn	w0, #1
-	beq	.L724
+	beq	.L597
 	add	w1, w0, 1
 	str	w1, [x19, 2620]
-.L724:
-	ldrh	w1, [x27]
+.L597:
+	ldrh	w1, [x26]
 	mov	w2, 61604
 	cmp	w1, w2
-	beq	.L726
-	bhi	.L727
+	beq	.L599
+	bhi	.L600
 	mov	w0, 61574
 	cmp	w1, w0
-	beq	.L728
-.L725:
+	beq	.L601
+.L598:
 	add	x23, x23, 32
-	cmp	x21, x23
-	bne	.L752
-	b	.L753
-.L727:
+	cmp	x20, x23
+	bne	.L625
+	b	.L626
+.L600:
 	mov	w0, 61634
 	cmp	w1, w0
-	beq	.L729
+	beq	.L602
 	mov	w0, 65535
 	cmp	w1, w0
-	beq	.L721
-	b	.L725
-.L729:
-	add	x0, x20, :lo12:.LANCHOR3
-	ldrh	w1, [x0, -128]
+	bne	.L598
+	mov	w1, 0
+.L665:
+	mov	w0, w22
+	bl	FtlFreeSysBlkQueueIn
+	b	.L598
+.L602:
+	ldrh	w1, [x19, 3696]
 	ldr	w0, [x19, 132]
 	cmp	w1, w0
-	bls	.L731
+	bls	.L604
 	adrp	x0, .LC1
-	mov	w2, 1211
+	mov	w2, 1222
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L731:
-	add	x4, x20, :lo12:.LANCHOR3
+	bl	sftl_printk
+.L604:
 	ldr	w3, [x19, 132]
+	ldrh	w1, [x19, 3696]
 	and	w2, w3, 65535
-	ldrh	w1, [x4, -128]
+	ldr	x4, [x19, 3608]
 	sub	w0, w2, #1
-	ldr	x4, [x4, -216]
-	sxth	x0, w0
 	sub	w2, w2, w1
 	sub	w2, w2, #1
+	sxth	x0, w0
 	sxth	w2, w2
-.L732:
+.L605:
 	cmp	w0, w2
-	bgt	.L738
-	tbz	w0, #31, .L772
-	b	.L725
-.L738:
+	bgt	.L611
+	tbz	w0, #31, .L645
+	b	.L598
+.L611:
 	sxtw	x5, w0
-	ldr	w8, [x27, 4]
+	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L733
+	bls	.L606
 	ldr	w2, [x4]
-	cbnz	w2, .L734
+	cbnz	w2, .L607
 	cmp	w3, w1
-	beq	.L734
-	add	x2, x20, :lo12:.LANCHOR3
+	beq	.L607
 	add	w1, w1, 1
-	strh	w1, [x2, -128]
-.L734:
-	add	x7, x20, :lo12:.LANCHOR3
+	strh	w1, [x19, 3696]
+.L607:
 	mov	w1, 0
-.L735:
+.L608:
 	cmp	w1, w0
-	bne	.L736
-	add	x1, x20, :lo12:.LANCHOR3
-	ldr	w3, [x27, 4]
-	ldr	x2, [x1, -216]
-	str	w3, [x2, x6]
-	ldr	x2, [x19, 4088]
-	strh	w26, [x2, x5, lsl 1]
-	tbnz	w0, #31, .L725
-	ldrh	w1, [x1, -128]
+	bne	.L609
+	ldr	x1, [x19, 3608]
+	ldr	w2, [x26, 4]
+	str	w2, [x1, x6]
+	ldr	x1, [x19, 3560]
+	strh	w22, [x1, x5, lsl 1]
+	tbnz	w0, #31, .L598
+	ldrh	w1, [x19, 3696]
 	ldr	w2, [x19, 132]
 	sub	w2, w2, w1
 	sub	w2, w2, #1
 	cmp	w0, w2, sxth
-	bgt	.L725
-.L772:
-	add	x2, x20, :lo12:.LANCHOR3
+	bgt	.L598
+.L645:
 	add	w1, w1, 1
-	ldr	w3, [x27, 4]
-	strh	w1, [x2, -128]
-	ldr	x1, [x2, -216]
-	str	w3, [x1, x0, lsl 2]
-	ldr	x1, [x19, 4088]
-.L790:
-	strh	w26, [x1, x0, lsl 1]
-	b	.L725
-.L736:
-	ldr	x4, [x7, -216]
+	strh	w1, [x19, 3696]
+	ldr	x1, [x19, 3608]
+	ldr	w2, [x26, 4]
+	str	w2, [x1, x0, lsl 2]
+	ldr	x1, [x19, 3560]
+.L663:
+	strh	w22, [x1, x0, lsl 1]
+	b	.L598
+.L609:
+	ldr	x4, [x19, 3608]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
 	lsl	x2, x2, 1
-	add	x8, x4, x3
+	add	x7, x4, x3
 	add	w1, w1, 1
 	sxth	w1, w1
-	ldr	w8, [x8, 4]
-	str	w8, [x4, x3]
-	ldr	x3, [x19, 4088]
+	ldr	w7, [x7, 4]
+	str	w7, [x4, x3]
+	ldr	x3, [x19, 3560]
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L735
-.L733:
+	b	.L608
+.L606:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L732
-.L728:
+	b	.L605
+.L601:
 	ldrh	w1, [x19, 148]
 	ldrh	w0, [x19, 124]
 	cmp	w1, w0
-	bls	.L741
+	bls	.L614
 	adrp	x0, .LC1
-	mov	w2, 1252
+	mov	w2, 1263
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L741:
-	add	x4, x20, :lo12:.LANCHOR3
+	bl	sftl_printk
+.L614:
 	ldrh	w3, [x19, 124]
 	ldrh	w1, [x19, 148]
 	sub	w2, w3, #1
-	ldr	x4, [x4, -240]
+	ldr	x4, [x19, 3584]
 	sxth	x0, w2
 	sub	w2, w2, w1
-.L742:
+.L615:
 	cmp	w0, w2
-	ble	.L747
+	ble	.L620
 	sxtw	x5, w0
-	ldr	w8, [x27, 4]
+	ldr	w8, [x26, 4]
 	lsl	x6, x5, 2
 	ldr	w7, [x4, x6]
 	cmp	w8, w7
-	bls	.L743
+	bls	.L616
 	ldr	w2, [x4]
-	cbnz	w2, .L744
+	cbnz	w2, .L617
 	cmp	w3, w1
-	beq	.L744
+	beq	.L617
 	add	w1, w1, 1
 	strh	w1, [x19, 148]
-.L744:
-	add	x7, x20, :lo12:.LANCHOR3
+.L617:
 	mov	w1, 0
-.L745:
+.L618:
 	cmp	w1, w0
-	bne	.L746
-	add	x1, x20, :lo12:.LANCHOR3
-	ldr	w2, [x27, 4]
-	ldr	x1, [x1, -240]
+	bne	.L619
+	ldr	x1, [x19, 3584]
+	ldr	w2, [x26, 4]
 	str	w2, [x1, x6]
 	ldr	x1, [x19, 152]
-	strh	w26, [x1, x5, lsl 1]
-.L747:
-	tbnz	w0, #31, .L725
+	strh	w22, [x1, x5, lsl 1]
+.L620:
+	tbnz	w0, #31, .L598
 	ldrh	w1, [x19, 124]
 	ldrh	w2, [x19, 148]
 	sub	w1, w1, #1
 	sub	w1, w1, w2
 	cmp	w0, w1, sxth
-	bgt	.L725
-	add	x1, x20, :lo12:.LANCHOR3
+	bgt	.L598
+	ldr	x1, [x19, 3584]
 	add	w2, w2, 1
 	strh	w2, [x19, 148]
-	ldr	w2, [x27, 4]
-	ldr	x1, [x1, -240]
+	ldr	w2, [x26, 4]
 	str	w2, [x1, x0, lsl 2]
 	ldr	x1, [x19, 152]
-	b	.L790
-.L746:
-	ldr	x4, [x7, -240]
+	b	.L663
+.L619:
+	ldr	x4, [x19, 3584]
 	sxtw	x2, w1
 	lsl	x3, x2, 2
 	lsl	x2, x2, 1
-	add	x8, x4, x3
+	add	x7, x4, x3
 	add	w1, w1, 1
 	sxth	w1, w1
-	ldr	w8, [x8, 4]
-	str	w8, [x4, x3]
+	ldr	w7, [x7, 4]
+	str	w7, [x4, x3]
 	ldr	x3, [x19, 152]
 	add	x4, x3, x2
 	ldrh	w4, [x4, 2]
 	strh	w4, [x3, x2]
-	b	.L745
-.L743:
+	b	.L618
+.L616:
 	sub	w0, w0, #1
 	sxth	x0, w0
-	b	.L742
-.L726:
-	ldrh	w2, [x28]
+	b	.L615
+.L599:
+	ldrh	w2, [x27]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L749
-	strh	w26, [x28]
-.L791:
-	str	w0, [x28, 8]
-	b	.L725
-.L749:
-	ldrh	w0, [x28, 4]
+	bne	.L622
+	strh	w22, [x27]
+.L664:
+	str	w0, [x27, 8]
+	b	.L598
+.L622:
+	ldrh	w0, [x27, 4]
 	cmp	w0, w1
-	beq	.L750
+	beq	.L623
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L750:
-	ldr	w0, [x27, 4]
-	ldr	w1, [x28, 8]
+.L623:
+	ldr	w0, [x26, 4]
+	ldr	w1, [x27, 8]
 	cmp	w1, w0
-	bcs	.L751
-	ldrh	w0, [x28]
-	strh	w0, [x28, 4]
-	strh	w26, [x28]
-	ldr	w0, [x27, 4]
-	b	.L791
-.L751:
-	strh	w26, [x28, 4]
-	b	.L725
-.L754:
-	ldr	x1, [x19, 4088]
+	bcs	.L624
+	ldrh	w0, [x27]
+	strh	w0, [x27, 4]
+	strh	w22, [x27]
+	ldr	w0, [x26, 4]
+	b	.L664
+.L624:
+	strh	w22, [x27, 4]
+	b	.L598
+.L627:
+	ldr	x1, [x19, 3560]
 	ldrh	w0, [x1]
-	cbz	w0, .L756
-.L759:
-	add	x0, x22, :lo12:.LANCHOR0
+	cbz	w0, .L629
+.L632:
+	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x1, [x0, 152]
 	ldrh	w2, [x1]
-	cbz	w2, .L757
-.L758:
-	add	x20, x20, :lo12:.LANCHOR3
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrh	w1, [x20, -128]
-	ldr	w0, [x22, 132]
+	cbz	w2, .L630
+.L631:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x21, 3696]
+	ldr	w0, [x21, 132]
 	cmp	w1, w0
-	bls	.L788
+	bls	.L661
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 1377
-	add	x1, x1, 368
+	mov	w2, 1388
+	add	x1, x1, 288
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L788:
+	bl	sftl_printk
+.L661:
 	ldp	x19, x20, [sp, 16]
 	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
@@ -5304,2963 +4558,4034 @@ FtlScanSysBlk:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L756:
-	add	x0, x20, :lo12:.LANCHOR3
-	ldrh	w0, [x0, -128]
-	cbz	w0, .L759
+.L629:
+	ldrh	w0, [x19, 3696]
+	cbz	w0, .L632
 	ldr	w2, [x19, 132]
 	mov	w0, 0
-.L760:
+.L633:
 	cmp	w0, w2
-	bcs	.L759
+	bcs	.L632
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L761
+	cbz	w3, .L634
 	mov	w1, w0
-	add	x3, x22, :lo12:.LANCHOR0
-	add	x7, x20, :lo12:.LANCHOR3
-.L762:
-	ldr	w2, [x3, 132]
-	cmp	w1, w2
-	bcs	.L759
-	ldr	x5, [x3, 4088]
+	add	x2, x21, :lo12:.LANCHOR0
+.L635:
+	ldr	w3, [x2, 132]
+	cmp	w1, w3
+	bcs	.L632
+	ldr	x5, [x2, 3560]
 	sxtw	x6, w1
 	lsl	x4, x6, 1
-	sub	w2, w1, w0
-	sxtw	x2, w2
+	sub	w3, w1, w0
+	sxtw	x3, w3
 	add	w1, w1, 1
 	sxth	w1, w1
-	ldrh	w8, [x5, x4]
-	strh	w8, [x5, x2, lsl 1]
-	ldr	x5, [x7, -216]
+	ldrh	w7, [x5, x4]
+	strh	w7, [x5, x3, lsl 1]
+	ldr	x5, [x2, 3608]
 	ldr	w6, [x5, x6, lsl 2]
-	str	w6, [x5, x2, lsl 2]
-	ldr	x2, [x3, 4088]
-	strh	wzr, [x2, x4]
-	b	.L762
-.L761:
+	str	w6, [x5, x3, lsl 2]
+	ldr	x3, [x2, 3560]
+	strh	wzr, [x3, x4]
+	b	.L635
+.L634:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L760
-.L757:
+	b	.L633
+.L630:
 	ldrh	w2, [x0, 148]
-	cbz	w2, .L758
+	cbz	w2, .L631
 	ldrh	w2, [x0, 124]
 	mov	w0, 0
-.L767:
+.L640:
 	mov	w6, w0
 	cmp	w0, w2
-	bge	.L758
+	bge	.L631
 	ldrh	w3, [x1, w0, sxtw 1]
-	cbz	w3, .L768
-	add	x2, x22, :lo12:.LANCHOR0
-	add	x7, x20, :lo12:.LANCHOR3
-.L769:
-	ldrh	w1, [x2, 124]
-	cmp	w0, w1
-	bge	.L758
-	ldr	x4, [x2, 152]
+	cbz	w3, .L641
+	add	x1, x21, :lo12:.LANCHOR0
+.L642:
+	ldrh	w2, [x1, 124]
+	cmp	w0, w2
+	bge	.L631
+	ldr	x4, [x1, 152]
 	sxtw	x5, w0
 	lsl	x3, x5, 1
-	sub	w1, w0, w6
-	sxtw	x1, w1
+	sub	w2, w0, w6
+	sxtw	x2, w2
 	add	w0, w0, 1
 	sxth	w0, w0
-	ldrh	w8, [x4, x3]
-	strh	w8, [x4, x1, lsl 1]
-	ldr	x4, [x7, -240]
+	ldrh	w7, [x4, x3]
+	strh	w7, [x4, x2, lsl 1]
+	ldr	x4, [x1, 3584]
 	ldr	w5, [x4, x5, lsl 2]
-	str	w5, [x4, x1, lsl 2]
-	ldr	x1, [x2, 152]
-	strh	wzr, [x1, x3]
-	b	.L769
-.L768:
+	str	w5, [x4, x2, lsl 2]
+	ldr	x2, [x1, 152]
+	strh	wzr, [x2, x3]
+	b	.L642
+.L641:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L767
+	b	.L640
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
-	.global	FtlMapTblRecovery
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
-	stp	x29, x30, [sp, -128]!
-	mov	w1, 0
+	.global	FtlLoadBbt
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
+	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	stp	x21, x22, [sp, 32]
-	adrp	x21, .LANCHOR0
-	stp	x25, x26, [sp, 64]
-	stp	x27, x28, [sp, 80]
-	mov	w27, 0
+	adrp	x19, .LANCHOR0
 	stp	x23, x24, [sp, 48]
-	ldrh	w24, [x0, 6]
-	ldr	x0, [x0, 40]
-	str	x0, [x29, 120]
-	ldrh	w0, [x19, 8]
-	lsl	w2, w24, 2
-	str	w0, [x29, 116]
-	ldr	x0, [x29, 120]
-	ldp	x23, x26, [x19, 16]
-	bl	ftl_memset
-	stp	wzr, wzr, [x19, 48]
-	add	x3, x21, :lo12:.LANCHOR0
-	add	x20, x3, 3400
-	mov	x25, x3
-	ldr	x0, [x3, 3432]
-	ldr	x22, [x3, 3440]
-	stp	x0, x22, [x20, 8]
-	mov	w0, -1
-	strh	w0, [x19]
-	strh	w0, [x19, 2]
-	mov	w0, 1
-	str	w0, [x19, 56]
-	ldr	w0, [x29, 116]
-	sub	w0, w0, #1
-	str	w0, [x29, 112]
-.L793:
-	ldr	w0, [x29, 116]
-	cmp	w27, w0
-	bge	.L810
-	ldr	w0, [x29, 112]
-	sxtw	x28, w27
-	cmp	w27, w0
-	bne	.L794
-	lsl	x0, x28, 1
-	mov	w1, 1
-	add	x20, x23, x0
-	add	x25, x21, :lo12:.LANCHOR0
-	add	x25, x25, 3400
-	ldrh	w0, [x23, x0]
-	mov	w23, 0
-	bl	FtlGetLastWrittenPage
-	strh	w27, [x19]
-	sxth	w1, w0
-	add	w0, w0, 1
-	strh	w0, [x19, 2]
-	ldr	w0, [x26, x28, lsl 2]
-	add	w26, w1, 1
-	str	w0, [x19, 48]
-.L795:
-	cmp	w23, w26
-	blt	.L797
-.L810:
-	add	x21, x21, :lo12:.LANCHOR0
-	mov	x0, x19
-	bl	ftl_free_no_use_map_blk
-	ldrh	w1, [x19, 2]
-	ldrh	w0, [x21, 108]
-	cmp	w1, w0
-	bne	.L799
-	mov	x0, x19
-	bl	ftl_map_blk_alloc_new_blk
-.L799:
-	mov	x0, x19
-	bl	ftl_map_blk_gc
-	mov	x0, x19
-	bl	ftl_map_blk_gc
-	mov	w0, 0
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 128
-	ret
-.L797:
-	ldrh	w0, [x20]
+	add	x23, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	add	x21, x23, 3712
+	mov	w24, 61649
+	ldr	x0, [x23, 3448]
+	ldr	x22, [x23, 3512]
+	stp	x0, x22, [x21, 8]
+	bl	FtlBbtMemInit
+	ldrh	w20, [x23, 102]
+	sub	w20, w20, #1
+	and	w20, w20, 65535
+.L667:
+	ldrh	w0, [x23, 102]
+	sub	w0, w0, #16
+	cmp	w20, w0
+	ble	.L670
+	lsl	w0, w20, 10
 	mov	w2, 1
+	str	w0, [x21, 4]
 	mov	w1, w2
-	orr	w0, w23, w0, lsl 10
-	str	w0, [x25, 4]
-	mov	x0, x25
+	mov	x0, x21
 	bl	FlashReadPages
-	ldr	w0, [x25]
+	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L796
-	ldrh	w0, [x22, 8]
-	cmp	w24, w0
-	bls	.L796
-	ldrh	w2, [x22]
-	ldrh	w1, [x19, 4]
-	cmp	w2, w1
-	bne	.L796
-	ldr	x2, [x29, 120]
-	ubfiz	x0, x0, 2, 16
-	ldr	w1, [x25, 4]
-	str	w1, [x2, x0]
-.L796:
-	add	w23, w23, 1
-	sxth	w23, w23
-	b	.L795
-.L794:
-	ldr	x0, [x25, 3432]
+	bne	.L668
+	ldr	w0, [x21, 4]
 	mov	w2, 1
-	str	x0, [x20, 8]
-	lsl	x0, x28, 1
-	ldrh	w1, [x25, 108]
-	add	x28, x23, x0
-	ldrh	w0, [x23, x0]
-	sub	w1, w1, #1
-	orr	w0, w1, w0, lsl 10
 	mov	w1, w2
-	str	w0, [x20, 4]
-	mov	x0, x20
+	add	w0, w0, 1
+	str	w0, [x21, 4]
+	mov	x0, x21
 	bl	FlashReadPages
-	ldr	w0, [x20]
+.L668:
+	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L812
-	ldrh	w1, [x22]
-	ldrh	w0, [x19, 4]
-	cmp	w1, w0
-	bne	.L812
+	beq	.L669
+	ldrh	w0, [x22]
+	cmp	w0, w24
+	bne	.L669
+	ldr	w1, [x22, 4]
+	str	w1, [x23, 168]
+	strh	w20, [x23, 160]
 	ldrh	w1, [x22, 8]
-	mov	w0, 64245
+	strh	w1, [x23, 164]
+.L670:
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	w0, 65535
+	ldrh	w1, [x21, 160]
 	cmp	w1, w0
-	beq	.L801
-.L812:
-	mov	w5, 0
-.L802:
-	ldrh	w0, [x25, 108]
-	cmp	w5, w0
-	bge	.L808
-	ldrh	w0, [x28]
+	beq	.L684
+	ldrh	w1, [x21, 164]
+	cmp	w1, w0
+	beq	.L674
+	add	x0, x21, 3712
+	lsl	w1, w1, 10
 	mov	w2, 1
-	str	w5, [x29, 108]
+	str	w1, [x0, 4]
 	mov	w1, w2
-	orr	w0, w5, w0, lsl 10
-	str	w0, [x20, 4]
-	mov	x0, x20
 	bl	FlashReadPages
-	ldr	w0, [x20]
-	ldr	w5, [x29, 108]
+	ldr	w0, [x21, 3712]
 	cmn	w0, #1
-	beq	.L806
+	beq	.L674
+	ldrh	w1, [x22]
+	mov	w0, 61649
+	cmp	w1, w0
+	bne	.L674
+	ldr	w1, [x21, 168]
+	ldr	w0, [x22, 4]
+	cmp	w0, w1
+	bls	.L674
+	str	w0, [x21, 168]
+	ldrh	w1, [x21, 164]
 	ldrh	w0, [x22, 8]
-	cmp	w24, w0
-	bls	.L806
-	ldrh	w2, [x22]
-	ldrh	w1, [x19, 4]
+	strh	w1, [x21, 160]
+	strh	w0, [x21, 164]
+.L674:
+	add	x20, x19, :lo12:.LANCHOR0
+	mov	w1, 1
+	add	x23, x20, 3712
+	mov	w24, 61649
+	ldrh	w0, [x20, 160]
+	bl	FtlGetLastWrittenPage
+	sxth	w21, w0
+	add	w0, w0, 1
+	strh	w0, [x20, 162]
+.L676:
+	tbz	w21, #31, .L679
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 253
+	add	x1, x1, 304
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L678:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x22, 10]
+	mov	w2, 65535
+	strh	w0, [x1, 166]
+	ldrh	w0, [x22, 12]
+	cmp	w0, w2
+	beq	.L681
+	ldr	w2, [x1, 32]
+	cmp	w0, w2
+	beq	.L681
+	ldrh	w1, [x1, 46]
+	lsr	w1, w1, 2
 	cmp	w2, w1
-	bne	.L806
-	ldr	x2, [x29, 120]
-	ubfiz	x0, x0, 2, 16
-	ldr	w1, [x20, 4]
-	str	w1, [x2, x0]
-.L806:
-	add	w5, w5, 1
-	sxth	w5, w5
-	b	.L802
-.L801:
-	mov	w0, 0
-.L803:
-	ldrh	w1, [x25, 108]
-	sub	w1, w1, #1
+	bcs	.L681
 	cmp	w0, w1
-	blt	.L805
-.L808:
-	add	w4, w27, 1
-	sxth	w27, w4
-	b	.L793
-.L805:
-	ldr	x2, [x25, 3432]
-	sbfiz	x5, x0, 3, 32
-	ldrh	w1, [x2, x5]
-	cmp	w24, w1
-	bls	.L804
-	add	x2, x2, x5
-	ldr	x3, [x29, 120]
-	ubfiz	x1, x1, 2, 16
-	ldr	w2, [x2, 4]
-	str	w2, [x3, x1]
-.L804:
-	add	w0, w0, 1
-	sxth	w0, w0
-	b	.L803
-	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
-	.align	2
-	.global	FtlLoadVonderInfo
-	.type	FtlLoadVonderInfo, %function
-FtlLoadVonderInfo:
-	adrp	x1, .LANCHOR0
-	add	x1, x1, :lo12:.LANCHOR0
-	stp	x29, x30, [sp, -16]!
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	add	x29, sp, 0
-	ldrh	w2, [x1, 124]
-	sub	x0, x0, #120
-	strh	w2, [x0, 10]
-	mov	w2, -3962
-	strh	w2, [x0, 4]
-	ldrh	w2, [x1, 148]
-	strh	w2, [x0, 8]
-	ldrh	w2, [x1, 126]
-	ldr	x1, [x1, 152]
-	str	x1, [x0, 16]
-	ldr	x1, [x0, -120]
-	str	x1, [x0, 24]
-	ldr	x1, [x0, -128]
-	str	x1, [x0, 32]
-	ldr	x1, [x0, -112]
-	strh	w2, [x0, 6]
-	str	x1, [x0, 40]
-	bl	FtlMapTblRecovery
+	bcs	.L681
+	bl	FtlSysBlkNumInit
+.L681:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w20, 0
+	add	x21, x19, 192
+.L682:
+	ldrh	w0, [x19, 58]
+	cmp	w20, w0
+	bcc	.L683
 	mov	w0, 0
-	ldp	x29, x30, [sp], 16
+.L666:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x29, x30, [sp], 64
 	ret
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+.L669:
+	sub	w20, w20, #1
+	and	w20, w20, 65535
+	b	.L667
+.L679:
+	ldrh	w0, [x20, 160]
+	mov	w2, 1
+	mov	w1, w2
+	orr	w0, w21, w0, lsl 10
+	str	w0, [x23, 4]
+	ldr	x0, [x20, 3448]
+	str	x0, [x23, 8]
+	mov	x0, x23
+	bl	FlashReadPages
+	ldr	w0, [x23]
+	cmn	w0, #1
+	beq	.L677
+	ldrh	w0, [x22]
+	cmp	w0, w24
+	beq	.L678
+.L677:
+	sub	w21, w21, #1
+	sxth	w21, w21
+	b	.L676
+.L683:
+	ldrh	w2, [x19, 3624]
+	ldr	x0, [x19, 3720]
+	mul	w1, w2, w20
+	lsl	w2, w2, 2
+	add	w20, w20, 1
+	add	x1, x0, x1, lsl 2
+	ldr	x0, [x21], 8
+	bl	ftl_memcpy
+	b	.L682
+.L684:
+	mov	w0, -1
+	b	.L666
+	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
-	.global	FtlL2PDataInit
-	.type	FtlL2PDataInit, %function
-FtlL2PDataInit:
-	stp	x29, x30, [sp, -48]!
-	adrp	x1, .LANCHOR0
+	.global	FtlLoadSysInfo
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR3
-	str	x21, [sp, 32]
-	add	x21, x19, :lo12:.LANCHOR3
-	add	x20, x1, :lo12:.LANCHOR0
-	mov	w1, 0
-	ldr	x0, [x21, -256]
-	ldr	w2, [x20, 132]
+	adrp	x20, .LANCHOR0
+	add	x19, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	add	x21, x19, 3712
+	stp	x23, x24, [sp, 48]
+	ldr	x0, [x19, 3448]
+	str	x0, [x21, 8]
+	ldr	x0, [x19, 3512]
+	str	x0, [x21, 16]
+	ldr	x0, [x19, 2376]
+	ldrh	w2, [x19, 44]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-	ldrh	w0, [x20, 142]
-	mov	w1, 255
-	ldrh	w2, [x20, 114]
-	mul	w2, w2, w0
-	ldr	x0, [x21, -208]
-	bl	ftl_memset
-	mov	x1, x20
-	mov	w0, 0
-	mov	w5, -1
-.L823:
-	ldrh	w2, [x1, 142]
-	cmp	w2, w0
-	bhi	.L824
-	add	x0, x19, :lo12:.LANCHOR3
-	mov	w2, -1
-	strh	w2, [x0, -190]
-	strh	w2, [x0, -192]
-	ldr	w2, [x1, 132]
-	strh	w2, [x0, -182]
-	mov	w2, -3902
-	strh	w2, [x0, -188]
-	ldrh	w2, [x0, -128]
-	strh	w2, [x0, -184]
-	ldrh	w2, [x1, 140]
-	ldr	x1, [x1, 4088]
-	str	x1, [x0, -176]
-	ldr	x1, [x0, -216]
-	str	x1, [x0, -168]
-	ldr	x1, [x0, -256]
-	str	x1, [x0, -160]
-	ldr	x1, [x0, -224]
-	strh	w2, [x0, -186]
-	str	x1, [x0, -152]
+	ldrh	w0, [x19, 2656]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L697
+.L705:
+	mov	w0, -1
+.L696:
 	ldp	x19, x20, [sp, 16]
-	ldr	x21, [sp, 32]
-	ldp	x29, x30, [sp], 48
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x29, x30, [sp], 64
 	ret
-.L824:
-	ldr	x3, [x1, 2568]
-	ubfiz	x2, x0, 4, 16
-	add	x3, x3, x2
-	str	wzr, [x3, 4]
-	ldr	x3, [x1, 2568]
-	strh	w5, [x3, x2]
-	ldr	x3, [x1, 2568]
-	ldr	x4, [x21, -208]
-	add	x3, x3, x2
-	ldrh	w2, [x1, 114]
-	mul	w2, w2, w0
+.L697:
+	add	x23, x19, 2656
+	mov	w1, 1
+	bl	FtlGetLastWrittenPage
+	sxth	w22, w0
 	add	w0, w0, 1
-	and	w0, w0, 65535
-	sxtw	x2, w2
-	and	x2, x2, -4
-	add	x2, x4, x2
-	str	x2, [x3, 8]
-	b	.L823
-	.size	FtlL2PDataInit, .-FtlL2PDataInit
-	.align	2
-	.global	FtlLoadMapInfo
-	.type	FtlLoadMapInfo, %function
-FtlLoadMapInfo:
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	FtlL2PDataInit
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	sub	x0, x0, #192
-	bl	FtlMapTblRecovery
-	mov	w0, 0
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
-	.align	2
-	.global	FtlVariablesInit
-	.type	FtlVariablesInit, %function
-FtlVariablesInit:
-	stp	x29, x30, [sp, -32]!
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	mov	w1, -1
-	add	x29, sp, 0
-	str	x19, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	strh	w1, [x0, -48]
-	str	xzr, [x0, -56]
-	mov	w1, -1
-	stp	wzr, wzr, [x0, -44]
-	str	w1, [x0, -36]
-	mov	w1, 0
-	ldr	x0, [x19, 152]
-	ldrh	w2, [x19, 124]
-	strh	wzr, [x19, 148]
-	lsl	w2, w2, 1
-	bl	ftl_memset
-	ldr	x0, [x19, 2384]
-	mov	w1, 0
-	ldrh	w2, [x19, 46]
-	lsl	w2, w2, 1
-	bl	ftl_memset
-	ldr	x0, [x19, 4064]
-	mov	w1, 0
-	ldrh	w2, [x19, 46]
-	lsl	w2, w2, 1
-	bl	ftl_memset
+	mov	w24, 61604
+	strh	w0, [x23, 2]
+	mov	w23, 19539
+	movk	w23, 0x4654, lsl 16
+.L699:
+	tbz	w22, #31, .L702
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 1448
+	add	x1, x1, 320
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L701:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x1, 44]
+	ldrh	w1, [x1, 114]
+	add	x0, x0, 24
+	cmp	x1, x0, lsl 1
+	bcs	.L704
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 1450
+	add	x1, x1, 320
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L704:
+	add	x19, x20, :lo12:.LANCHOR0
 	mov	w2, 48
-	mov	w1, 0
-	add	x0, x19, 2312
-	bl	ftl_memset
-	mov	w2, 512
-	mov	w1, 0
-	add	x0, x19, 2720
-	bl	ftl_memset
-	bl	FtlGcBufInit
-	bl	FtlL2PDataInit
-	ldr	x19, [sp, 16]
-	mov	w0, 0
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	FtlVariablesInit, .-FtlVariablesInit
-	.align	2
-	.global	SupperBlkListInit
-	.type	SupperBlkListInit, %function
-SupperBlkListInit:
-	stp	x29, x30, [sp, -64]!
-	mov	w0, 6
-	mov	w1, 0
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	str	x23, [sp, 48]
-	add	x23, x19, 64
-	stp	x21, x22, [sp, 32]
-	mov	w20, 0
-	mov	w22, 0
-	ldrh	w2, [x19, 46]
-	mov	w21, 0
-	mul	w2, w2, w0
-	ldr	x0, [x19, 2360]
-	bl	ftl_memset
-	strh	wzr, [x19, 2400]
-	strh	wzr, [x19, 2416]
-	str	xzr, [x19, 2368]
-	str	xzr, [x19, 2392]
-	str	xzr, [x19, 2408]
-.L831:
-	ldrh	w0, [x19, 44]
-	cmp	w20, w0
-	bcs	.L837
-	ldrh	w8, [x19, 36]
-	mov	x6, 0
-	ldrh	w7, [x19, 106]
-	mov	w5, 0
-	b	.L838
-.L833:
-	ldrb	w0, [x23, x6]
-	mov	w1, w20
-	bl	V2P_block
-	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L832
-	add	w5, w5, w7
-	and	w5, w5, 65535
-.L832:
-	add	x6, x6, 1
-.L838:
-	cmp	w8, w6, uxth
-	bhi	.L833
-	cbz	w5, .L840
-	mov	w0, 32768
-	sdiv	w5, w0, w5
-.L834:
-	ldr	x1, [x19, 2360]
-	mov	w0, 6
-	umaddl	x0, w20, w0, x1
-	strh	w5, [x0, 4]
-	ldrh	w0, [x19, 2424]
-	cmp	w0, w20
-	beq	.L835
-	ldrh	w0, [x19, 2472]
-	cmp	w0, w20
-	beq	.L835
-	ldrh	w0, [x19, 2520]
-	cmp	w0, w20
-	beq	.L835
-	ldr	x1, [x19, 2376]
-	ubfiz	x0, x20, 1, 16
-	ldrh	w0, [x1, x0]
-	cbnz	w0, .L836
-	add	w22, w22, 1
-	mov	w0, w20
-	and	w22, w22, 65535
-	bl	INSERT_FREE_LIST
-.L835:
-	add	w20, w20, 1
-	and	w20, w20, 65535
-	b	.L831
-.L840:
-	mov	w5, 0
-	b	.L834
-.L836:
-	add	w21, w21, 1
-	mov	w0, w20
-	and	w21, w21, 65535
-	bl	INSERT_DATA_LIST
-	b	.L835
-.L837:
-	strh	w21, [x19, 2400]
-	add	w21, w21, w22
-	strh	w22, [x19, 2416]
-	cmp	w21, w0
-	ble	.L839
+	add	x21, x19, 2312
+	mov	x0, x21
+	ldr	x1, [x19, 3720]
+	bl	ftl_memcpy
+	ldr	x0, [x19, 2376]
+	ldrh	w2, [x19, 44]
+	ldr	x1, [x19, 3720]
+	lsl	w2, w2, 1
+	add	x1, x1, 48
+	bl	ftl_memcpy
+	ldrh	w1, [x19, 44]
+	ldr	x0, [x19, 3720]
+	lsr	w2, w1, 3
+	ubfiz	x1, x1, 1, 16
+	add	x1, x1, 48
+	add	w2, w2, 4
+	and	x1, x1, -4
+	add	x1, x0, x1
+	ldr	x0, [x19, 24]
+	bl	ftl_memcpy
+	ldr	w1, [x19, 2312]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	bne	.L705
+	ldrh	w1, [x19, 2320]
+	ldrb	w2, [x19, 2322]
+	ldrh	w0, [x19, 58]
+	strh	w1, [x19, 2662]
+	cmp	w2, w0
+	bne	.L705
+	ldrh	w0, [x19, 106]
+	ldrh	w2, [x19, 62]
+	ldrh	w3, [x19, 36]
+	str	w1, [x19, 3744]
+	mul	w0, w0, w1
+	str	w0, [x19, 2584]
+	mul	w0, w2, w0
+	ldr	w2, [x19, 48]
+	str	w0, [x19, 144]
+	ldrh	w0, [x19, 166]
+	cmp	w1, w2
+	sub	w0, w2, w0
+	sub	w0, w0, w1
+	udiv	w0, w0, w3
+	strh	w0, [x19, 2652]
+	bls	.L706
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2154
-	add	x1, x1, 384
+	mov	w2, 1472
+	add	x1, x1, 320
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L839:
+	bl	sftl_printk
+.L706:
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w3, -1
+	ldrh	w2, [x0, 2328]
+	ldrh	w4, [x0, 2326]
+	strh	w4, [x0, 2424]
+	lsr	w5, w2, 6
+	and	w2, w2, 63
+	strb	w2, [x0, 2430]
+	ldrb	w2, [x0, 2323]
+	strb	w2, [x0, 2432]
+	ldrh	w2, [x0, 2330]
+	strh	w2, [x0, 2472]
+	ldrh	w2, [x0, 2332]
+	strh	w5, [x0, 2426]
+	strh	w3, [x0, 2672]
+	lsr	w5, w2, 6
+	and	w2, w2, 63
+	strb	w2, [x0, 2478]
+	ldrb	w2, [x0, 2324]
+	strb	w2, [x0, 2480]
+	ldrh	w2, [x0, 2334]
+	strh	w2, [x0, 2520]
+	ldrh	w2, [x0, 2336]
+	strh	w5, [x0, 2474]
+	strh	wzr, [x0, 2674]
+	lsr	w5, w2, 6
+	and	w2, w2, 63
+	strb	w2, [x0, 2526]
+	ldrb	w2, [x0, 2325]
+	strb	w2, [x0, 2528]
+	ldr	w2, [x0, 2344]
+	str	w2, [x0, 2628]
+	strb	wzr, [x0, 2678]
+	strb	wzr, [x0, 2680]
+	strh	w5, [x0, 2522]
+	str	wzr, [x0, 2588]
+	str	wzr, [x0, 2596]
+	str	wzr, [x0, 2604]
+	str	wzr, [x0, 2608]
+	str	wzr, [x0, 2632]
+	str	wzr, [x0, 2644]
+	ldr	w1, [x0, 2352]
+	ldr	w2, [x0, 2620]
+	str	wzr, [x0, 2600]
+	cmp	w1, w2
+	bls	.L707
+	str	w1, [x0, 2620]
+.L707:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w1, [x0, 2348]
+	ldr	w2, [x0, 2624]
+	cmp	w1, w2
+	bls	.L708
+	str	w1, [x0, 2624]
+.L708:
+	mov	w0, 65535
+	cmp	w4, w0
+	beq	.L709
+	add	x0, x20, :lo12:.LANCHOR0
+	add	x0, x0, 2424
+	bl	make_superblock
+.L709:
+	add	x1, x20, :lo12:.LANCHOR0
+	add	x0, x1, 2472
+	ldrh	w2, [x1, 2472]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L710
+	bl	make_superblock
+.L710:
+	add	x1, x20, :lo12:.LANCHOR0
+	add	x0, x1, 2520
+	ldrh	w2, [x1, 2520]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L711
+	bl	make_superblock
+.L711:
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w1, 65535
+	add	x0, x20, 2672
+	ldrh	w2, [x20, 2672]
+	cmp	w2, w1
+	beq	.L712
+	bl	make_superblock
+.L712:
 	mov	w0, 0
-	ldr	x23, [sp, 48]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-	.size	SupperBlkListInit, .-SupperBlkListInit
+	b	.L696
+.L702:
+	ldrh	w0, [x19, 2656]
+	mov	w2, 1
+	mov	w1, w2
+	orr	w0, w22, w0, lsl 10
+	str	w0, [x21, 4]
+	ldr	x0, [x19, 3448]
+	str	x0, [x21, 8]
+	mov	x0, x21
+	bl	FlashReadPages
+	ldr	w0, [x21]
+	cmn	w0, #1
+	beq	.L700
+	ldr	x0, [x19, 3448]
+	ldr	w0, [x0]
+	cmp	w0, w23
+	bne	.L700
+	ldr	x0, [x19, 3512]
+	ldrh	w0, [x0]
+	cmp	w0, w24
+	beq	.L701
+.L700:
+	sub	w22, w22, #1
+	sxth	w22, w22
+	b	.L699
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
-	.global	ftl_check_vpc
-	.type	ftl_check_vpc, %function
-ftl_check_vpc:
-	stp	x29, x30, [sp, -128]!
-	adrp	x0, .LC91
-	add	x0, x0, :lo12:.LC91
+	.global	FlashProgPages
+	.type	FlashProgPages, %function
+FlashProgPages:
+	stp	x29, x30, [sp, -160]!
+	ubfiz	x1, x1, 5, 32
 	add	x29, sp, 0
+	stp	x21, x22, [sp, 32]
+	adrp	x21, .LANCHOR0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
+	add	x22, x0, x1
+	str	w2, [x29, 108]
+	add	x2, x21, :lo12:.LANCHOR0
 	stp	x23, x24, [sp, 48]
-	add	x24, x20, :lo12:.LANCHOR0
-	stp	x21, x22, [sp, 32]
-	mov	w23, 0
-	adrp	x21, .LANCHOR1
-	add	x1, x21, :lo12:.LANCHOR1
-	add	x1, x1, 408
-	stp	x25, x26, [sp, 64]
+	adrp	x23, .LANCHOR1
 	stp	x27, x28, [sp, 80]
-	adrp	x22, check_vpc_table
-	bl	printk
-	add	x19, x22, :lo12:check_vpc_table
-	mov	w2, 8192
-	mov	w1, 0
-	mov	x0, x19
-	bl	ftl_memset
-.L843:
-	ldr	w0, [x24, 2584]
-	cmp	w23, w0
-	bcc	.L845
-	adrp	x25, .LC92
-	add	x23, x20, :lo12:.LANCHOR0
-	add	x26, x22, :lo12:check_vpc_table
-	add	x25, x25, :lo12:.LC92
-	mov	w24, 0
-	mov	w19, 0
-	mov	w4, 65535
-.L846:
-	ldrh	w0, [x23, 44]
-	cmp	w0, w19
-	bhi	.L848
-	ldr	x19, [x23, 2408]
-	cbz	x19, .L849
-	ldr	x0, [x23, 2360]
-	adrp	x25, .LC93
-	add	x20, x20, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:check_vpc_table
-	sub	x19, x19, x0
-	mov	x0, -6148914691236517206
-	asr	x19, x19, 1
-	movk	x0, 0xaaab, lsl 0
-	add	x25, x25, :lo12:.LC93
-	ldrh	w26, [x23, 2416]
-	mov	w27, 6
-	mov	w23, 0
-	mul	x19, x19, x0
-	and	w19, w19, 65535
-.L850:
-	cmp	w23, w26
-	bne	.L852
-.L849:
-	cbz	w24, .L842
-	add	x1, x21, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2321
-	add	x1, x1, 408
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L842:
+	add	x23, x23, :lo12:.LANCHOR1
+	stp	x25, x26, [sp, 64]
+	adrp	x24, .LC1
+	mov	w27, w3
+	mov	x19, x0
+	ldrh	w25, [x2, 12]
+	mov	x20, x0
+	add	x23, x23, 336
+	add	x24, x24, :lo12:.LC1
+	lsl	w28, w25, 3
+.L719:
+	cmp	x20, x22
+	bne	.L732
+	cbz	w27, .L725
+	adrp	x20, .LC86
+	adrp	x23, .LC87
+	add	x20, x20, :lo12:.LC86
+	add	x23, x23, :lo12:.LC87
+	b	.L753
+.L732:
+	ldr	x0, [x20, 8]
+	cbz	x0, .L720
+	ldr	x0, [x20, 16]
+	cbnz	x0, .L721
+.L720:
+	mov	w2, 136
+	mov	x1, x23
+	mov	x0, x24
+	bl	sftl_printk
+.L721:
+	ldr	w0, [x20, 4]
+	add	x2, x29, 120
+	add	x1, x29, 124
+	bl	l2p_addr_tran.isra.0
+	ldr	w0, [x29, 120]
+	cbnz	w0, .L722
+	ldr	w0, [x29, 124]
+	cmp	w28, w0
+	bls	.L722
+	adrp	x20, .LANCHOR1
+	add	x20, x20, :lo12:.LANCHOR1
+	adrp	x21, .LC80
+	add	x20, x20, 336
+	add	x21, x21, :lo12:.LC80
+	b	.L752
+.L724:
+	ldr	w2, [x19, 4]
+	mov	w0, -1
+	str	w0, [x19]
+	mov	x1, x20
+	mov	x0, x21
+	add	x19, x19, 32
+	bl	sftl_printk
+	ldr	x1, [x19, -24]
+	mov	w3, 16
+	mov	w2, 4
+	adrp	x0, .LC81
+	add	x0, x0, :lo12:.LC81
+	bl	rknand_print_hex
+	ldr	x1, [x19, -16]
+	mov	w3, 4
+	adrp	x0, .LC82
+	mov	w2, w3
+	add	x0, x0, :lo12:.LC82
+	bl	rknand_print_hex
+.L752:
+	cmp	x19, x22
+	bne	.L724
+	bl	dump_stack
+.L725:
 	ldp	x19, x20, [sp, 16]
+	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 128
+	ldp	x29, x30, [sp], 160
 	ret
-.L845:
-	mov	w2, 0
-	add	x1, x29, 124
-	mov	w0, w23
-	bl	log2phys
-	ldr	w0, [x29, 124]
-	cmn	w0, #1
-	beq	.L844
-	lsr	w0, w0, 10
-	bl	P2V_block_in_plane
-	and	x0, x0, 65535
-	ldrh	w1, [x19, x0, lsl 1]
-	add	w1, w1, 1
-	strh	w1, [x19, x0, lsl 1]
-.L844:
-	add	w23, w23, 1
-	b	.L843
-.L848:
-	ldr	x0, [x23, 2376]
-	ubfiz	x28, x19, 1, 16
-	sxtw	x27, w19
-	ldrh	w2, [x0, x28]
-	ldrh	w3, [x26, x27, lsl 1]
+.L722:
+	ldr	x1, [x20, 8]
+	tst	x1, 63
+	beq	.L739
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x26, [x0, 3488]
+	cmp	x1, x26
+	beq	.L726
+	ldrh	w2, [x0, 62]
+	mov	x0, x26
+	lsl	w2, w2, 9
+	bl	ftl_memcpy
+.L726:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w1, [x29, 124]
+	ldr	x3, [x20, 16]
+	mov	x2, x26
+	ldr	x5, [x0, 3384]
+	ldrb	w0, [x29, 120]
+	blr	x5
+	cbnz	w0, .L727
+	str	wzr, [x20]
+.L728:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x0, 14]
+	cmp	w1, 4
+	bne	.L730
+	ldr	x5, [x0, 3384]
+	add	x2, x26, 2048
+	ldrb	w0, [x29, 120]
+	ldr	w1, [x29, 124]
+	ldr	x3, [x20, 16]
+	add	w1, w25, w1
+	add	x3, x3, 8
+	blr	x5
+	cbz	w0, .L730
+	mov	w0, -1
+	str	w0, [x20]
+.L730:
+	add	x20, x20, 32
+	b	.L719
+.L739:
+	mov	x26, x1
+	b	.L726
+.L727:
+	mov	w0, -1
+	str	w0, [x20]
+	b	.L728
+.L737:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w2, [x29, 108]
+	ldr	x1, [x0, 3488]
+	str	wzr, [x1]
+	ldr	x1, [x0, 3504]
+	str	wzr, [x1]
+	ldr	w1, [x19, 4]
+	str	w1, [x29, 132]
+	ldr	x1, [x0, 3488]
+	ldr	x0, [x0, 3504]
+	stp	x1, x0, [x29, 136]
+	mov	w1, 1
+	add	x0, x29, 128
+	bl	FlashReadPages
+	ldr	w24, [x29, 128]
+	cmn	w24, #1
+	bne	.L734
+	ldr	w1, [x19, 4]
+	mov	x0, x20
+	bl	sftl_printk
+	str	w24, [x19]
+.L734:
+	ldr	x0, [x19, 16]
+	cbz	x0, .L735
+	ldr	w2, [x0]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x0, [x0, 3504]
+	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L847
-	str	w4, [x29, 108]
-	mov	w1, w19
-	mov	x0, x25
-	bl	printk
-	ldr	x0, [x23, 2376]
-	ldr	w4, [x29, 108]
-	ldrh	w0, [x0, x28]
-	cmp	w0, w4
-	beq	.L847
-	ldrh	w1, [x26, x27, lsl 1]
-	cmp	w1, w0
-	csinc	w24, w24, wzr, ls
-.L847:
-	add	w19, w19, 1
-	and	w19, w19, 65535
-	b	.L846
-.L852:
-	ldr	x1, [x20, 2376]
-	ubfiz	x0, x19, 1, 16
-	ldrh	w2, [x1, x0]
-	cbz	w2, .L851
-	ldrh	w3, [x22, w19, sxtw 1]
-	mov	w24, 1
-	mov	w1, w19
-	mov	x0, x25
-	bl	printk
-.L851:
-	ldr	x0, [x20, 2360]
-	umull	x19, w19, w27
-	ldrh	w19, [x0, x19]
-	mov	w0, 65535
-	cmp	w19, w0
-	beq	.L849
-	add	w23, w23, 1
-	and	w23, w23, 65535
-	b	.L850
-	.size	ftl_check_vpc, .-ftl_check_vpc
-	.align	2
-	.global	FtlGcPageVarInit
-	.type	FtlGcPageVarInit, %function
-FtlGcPageVarInit:
-	stp	x29, x30, [sp, -32]!
-	mov	w1, 255
-	add	x29, sp, 0
-	str	x19, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x0, [x19, 3296]
-	ldrh	w2, [x19, 110]
-	strh	wzr, [x19, 3292]
-	strh	wzr, [x19, 3304]
-	lsl	w2, w2, 1
-	bl	ftl_memset
-	ldrh	w2, [x19, 110]
-	mov	w0, 12
-	mov	w1, 255
-	mul	w2, w2, w0
-	ldr	x0, [x19, 3312]
-	bl	ftl_memset
-	bl	FtlGcBufInit
-	ldr	x19, [sp, 16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	beq	.L735
+	ldr	w1, [x19, 4]
+	mov	x0, x23
+	bl	sftl_printk
+	mov	w0, -1
+	str	w0, [x19]
+.L735:
+	ldr	x0, [x19, 8]
+	cbz	x0, .L736
+	ldr	w2, [x0]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x0, [x0, 3488]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L736
+	ldr	w1, [x19, 4]
+	adrp	x0, .LC88
+	add	x0, x0, :lo12:.LC88
+	bl	sftl_printk
+	mov	w0, -1
+	str	w0, [x19]
+.L736:
+	add	x19, x19, 32
+.L753:
+	cmp	x19, x22
+	bne	.L737
+	b	.L725
+	.size	FlashProgPages, .-FlashProgPages
 	.align	2
-	.global	FtlGcScanTempBlk
-	.type	FtlGcScanTempBlk, %function
-FtlGcScanTempBlk:
-	stp	x29, x30, [sp, -80]!
+	.global	FtlLowFormatEraseBlock
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	stp	x29, x30, [sp, -112]!
+	mov	w10, 0
+	mov	w9, 4
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
-	mov	x21, x0
+	adrp	x21, .LANCHOR0
+	add	x5, x21, :lo12:.LANCHOR0
+	stp	x19, x20, [sp, 16]
 	stp	x23, x24, [sp, 48]
-	adrp	x23, .LANCHOR2
-	add	x0, x23, :lo12:.LANCHOR2
+	and	w22, w1, 255
 	stp	x25, x26, [sp, 64]
-	stp	x19, x20, [sp, 16]
-	mov	w25, w1
-	ldrh	w19, [x0, 4]
-	mov	w0, 65535
-	cmp	w19, w0
-	beq	.L886
-	cbnz	w19, .L870
-.L871:
-	bl	FtlGcPageVarInit
-	b	.L872
-.L886:
-	mov	w19, 0
-.L870:
-	adrp	x0, .LANCHOR0+106
-	ldrh	w0, [x0, #:lo12:.LANCHOR0+106]
-	cmp	w0, w25
-	beq	.L871
-.L872:
-	adrp	x26, .LANCHOR0
-	add	x22, x26, :lo12:.LANCHOR0
-	mov	w24, 0
-.L880:
-	ldrh	w1, [x21]
-	mov	w0, 65535
-	strb	wzr, [x21, 8]
-	cmp	w1, w0
-	beq	.L887
-.L883:
-	add	x0, x26, :lo12:.LANCHOR0
-	add	x2, x21, 16
+	add	x8, x5, 64
+	stp	x27, x28, [sp, 80]
+	and	w23, w0, 65535
 	mov	w20, 0
-	mov	w9, 65535
-	mov	w5, 4
-	ldrh	w7, [x0, 114]
-	ldrh	w8, [x0, 116]
-	ldrh	w0, [x0, 36]
-	add	x0, x0, 8
-	add	x0, x21, x0, lsl 1
-.L874:
-	cmp	x0, x2
-	bne	.L876
-	ldr	x0, [x22, 4016]
-	mov	w1, w20
-	mov	w2, 0
+	mov	w19, 0
+	str	w23, [x5, 3420]
+.L756:
+	ldrh	w0, [x5, 36]
+	cmp	w0, w10
+	bhi	.L760
+	cbz	w20, .L755
+	ldr	x0, [x5, 3400]
+	mov	w2, w20
+	mov	w1, 0
 	ubfiz	x20, x20, 5, 16
-	bl	FlashReadPages
-	mov	x10, 0
-	mov	w11, 65535
-.L877:
-	cmp	x10, x20
-	bne	.L881
+	mov	x24, 0
+	add	x25, x21, :lo12:.LANCHOR0
+	bl	FlashEraseBlocks
+.L764:
+	ldr	x0, [x25, 3400]
+	add	x1, x0, x24
+	ldr	w0, [x0, x24]
+	cmn	w0, #1
+	bne	.L763
+	ldr	w0, [x1, 4]
 	add	w19, w19, 1
-	add	w24, w24, 1
 	and	w19, w19, 65535
-	cmp	w25, w24
-	bls	.L882
-.L884:
-	ldrh	w0, [x22, 106]
-	cmp	w0, w19
-	bhi	.L883
-.L887:
-	mov	w2, 0
-	b	.L873
-.L876:
-	ldrh	w1, [x2]
-	cmp	w1, w9
-	beq	.L875
-	ldr	x4, [x22, 4016]
-	ubfiz	x6, x20, 5, 16
-	orr	w1, w19, w1, lsl 10
-	add	x4, x4, x6
-	str	w1, [x4, 4]
-	mul	w1, w20, w7
-	ldr	x3, [x22, 4016]
-	ldr	x4, [x22, 3264]
-	sdiv	w1, w1, w5
-	add	x3, x3, x6
-	add	x1, x4, x1, sxtw 2
-	str	x1, [x3, 8]
-	mul	w1, w20, w8
-	ldr	x4, [x22, 3272]
-	add	w20, w20, 1
-	and	w20, w20, 65535
-	sdiv	w1, w1, w5
-	add	x1, x4, x1, sxtw 2
-	str	x1, [x3, 16]
-.L875:
-	add	x2, x2, 2
-	b	.L874
-.L881:
-	ldr	x6, [x22, 4016]
-	add	x5, x6, x10
-	ldr	w4, [x5, 4]
-	lsr	w0, w4, 10
-	bl	P2V_plane
-	and	w2, w0, 65535
-	ldr	w0, [x6, x10]
-	cbnz	w0, .L878
-	ldr	x0, [x5, 16]
-	add	x10, x10, 32
-	ldrh	w1, [x0]
-	cmp	w1, w11
-	bne	.L879
-	adrp	x0, .LANCHOR3-40
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+.L763:
+	add	x24, x24, 32
+	cmp	x24, x20
+	bne	.L764
+	cbz	w22, .L777
+	add	x0, x21, :lo12:.LANCHOR0
+	mov	w25, 1
+	ldrh	w26, [x0, 108]
+.L765:
+	add	x28, x21, :lo12:.LANCHOR0
+	mov	w24, 0
+	add	x0, x28, 64
+	str	x0, [x29, 104]
+.L773:
+	mov	w5, 0
+	mov	w20, 0
+.L766:
+	ldrh	w0, [x28, 36]
+	cmp	w0, w5
+	bhi	.L769
+	cbz	w20, .L755
+	ldr	x0, [x28, 3400]
+	mov	w1, w20
+	mov	w3, 1
+	mov	w2, w25
+	mov	x27, 0
+	bl	FlashProgPages
+	ubfiz	x1, x20, 5, 16
+.L772:
+	ldr	x0, [x28, 3400]
+	add	x3, x0, x27
+	ldr	w0, [x0, x27]
+	cbz	w0, .L771
+	ldr	w0, [x3, 4]
+	add	w19, w19, 1
+	str	x1, [x29, 96]
+	and	w19, w19, 65535
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	ldr	x1, [x29, 96]
+.L771:
+	add	x27, x27, 32
+	cmp	x1, x27
+	bne	.L772
+	add	w24, w24, 1
+	cmp	w26, w24, uxth
+	bhi	.L773
+	add	x26, x21, :lo12:.LANCHOR0
+	mov	x24, 0
+.L775:
+	cbz	w22, .L774
+	ldr	x0, [x26, 3400]
+	add	x1, x0, x24
+	ldr	w0, [x0, x24]
+	cbnz	w0, .L774
+	ldr	w0, [x1, 4]
 	mov	w1, 1
-	str	w1, [x0, #:lo12:.LANCHOR3-40]
-.L873:
-	add	x23, x23, :lo12:.LANCHOR2
-	strh	w19, [x21, 2]
-	strb	w2, [x21, 6]
-	mov	w0, -1
-	mov	w1, w19
-	strh	w0, [x23, 4]
-	mov	x0, x21
-	bl	ftl_sb_update_avl_pages
-	b	.L885
-.L879:
-	ldp	w2, w0, [x0, 8]
-	mov	w1, w4
-	bl	FtlGcUpdatePage
-	b	.L877
-.L878:
-	ldr	x0, [x22, 2376]
-	mov	w19, 0
-	ldrh	w1, [x21]
-	strh	wzr, [x0, x1, lsl 1]
-	ldrh	w0, [x21]
-	bl	INSERT_FREE_LIST
-	mov	w0, -1
-	strh	w0, [x21]
-	bl	FtlGcPageVarInit
-	b	.L880
-.L882:
-	add	x1, x23, :lo12:.LANCHOR2
-	mov	w2, 65535
-	ldrh	w0, [x1, 4]
-	cmp	w0, w2
-	beq	.L884
-	add	w0, w0, w24
-	strh	w0, [x1, 4]
-	ldrh	w0, [x22, 106]
-	cmp	w0, w19
-	bls	.L884
-.L885:
-	mov	w0, -1
+	lsr	w0, w0, 10
+	bl	FtlFreeSysBlkQueueIn
+.L774:
+	add	x24, x24, 32
+	cmp	x24, x27
+	bne	.L775
+	cmp	w23, 63
+	ccmp	w22, 0, 0, hi
+	beq	.L755
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w2, w20
+	mov	w1, w25
+	ldr	x0, [x21, 3400]
+	bl	FlashEraseBlocks
+.L755:
+	mov	w0, w19
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 80
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 112
 	ret
-	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+.L760:
+	ldr	x1, [x5, 3400]
+	ubfiz	x0, x10, 5, 16
+	str	wzr, [x1, x0]
+	mov	w1, w23
+	ldrb	w0, [x8, w10, sxtw]
+	bl	V2P_block
+	and	w6, w0, 65535
+	mov	w7, w6
+	cbz	w22, .L757
+	bl	IsBlkInVendorPart
+	cbnz	w0, .L758
+.L757:
+	mov	w0, w7
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L759
+	ldr	x0, [x5, 3400]
+	ubfiz	x2, x20, 5, 16
+	lsl	w6, w6, 10
+	add	x0, x0, x2
+	str	w6, [x0, 4]
+	ldr	x1, [x5, 3400]
+	ldr	x0, [x5, 3480]
+	add	x1, x1, x2
+	ldr	x2, [x5, 3520]
+	str	x0, [x1, 8]
+	ldrh	w0, [x5, 116]
+	mul	w0, w0, w20
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	sdiv	w0, w0, w9
+	add	x0, x2, x0, sxtw 2
+	str	x0, [x1, 16]
+.L758:
+	add	w10, w10, 1
+	and	w10, w10, 65535
+	b	.L756
+.L759:
+	add	w19, w19, 1
+	and	w19, w19, 65535
+	b	.L758
+.L777:
+	mov	w25, 0
+	mov	w26, 2
+	b	.L765
+.L769:
+	ldr	x1, [x28, 3400]
+	ubfiz	x0, x5, 5, 16
+	str	wzr, [x1, x0]
+	mov	w1, w23
+	ldr	x0, [x29, 104]
+	ldrb	w0, [x0, w5, sxtw]
+	bl	V2P_block
+	and	w6, w0, 65535
+	mov	w7, w6
+	cbz	w22, .L767
+	bl	IsBlkInVendorPart
+	cbnz	w0, .L768
+.L767:
+	mov	w0, w7
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L768
+	ldr	x0, [x28, 3400]
+	ubfiz	x2, x20, 5, 16
+	add	w6, w24, w6, lsl 10
+	add	x0, x0, x2
+	str	w6, [x0, 4]
+	ldr	x1, [x28, 3400]
+	ldr	x0, [x28, 3472]
+	add	x1, x1, x2
+	mov	w2, 4
+	str	x0, [x1, 8]
+	ldrh	w0, [x28, 116]
+	mul	w0, w0, w20
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	sdiv	w0, w0, w2
+	ldr	x2, [x28, 3480]
+	add	x0, x2, x0, sxtw 2
+	str	x0, [x1, 16]
+.L768:
+	add	w5, w5, 1
+	and	w5, w5, 65535
+	b	.L766
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
-	.global	FlashTestBlk
-	.type	FlashTestBlk, %function
-FlashTestBlk:
-	stp	x29, x30, [sp, -128]!
+	.global	Ftl_write_map_blk_to_last_page
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, 65535
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	and	w19, w0, 65535
-	cmp	w19, 11
-	bls	.L895
-	add	x0, x29, 64
-	mov	w2, 32
-	mov	w1, 165
-	adrp	x20, ftl_temp_buf
-	add	x20, x20, :lo12:ftl_temp_buf
-	stp	x20, x0, [x29, 40]
-	bl	ftl_memset
-	lsl	w19, w19, 10
-	mov	w2, 8
-	mov	w1, 90
-	mov	x0, x20
-	bl	ftl_memset
-	mov	w2, 1
-	str	w19, [x29, 36]
-	mov	w1, w2
-	add	x0, x29, 32
-	bl	FlashEraseBlocks
-	mov	w3, 1
-	add	x0, x29, 32
-	mov	w2, w3
-	mov	w1, w3
-	bl	FlashProgPages
-	ldr	w0, [x29, 32]
-	mov	w2, 1
-	mov	w1, 0
-	cmp	w0, 0
-	add	x0, x29, 32
-	csetm	w19, ne
-	bl	FlashEraseBlocks
-.L893:
-	mov	w0, w19
+	mov	x19, x0
+	stp	x21, x22, [sp, 32]
+	str	x23, [sp, 48]
+	ldr	x20, [x0, 16]
+	ldrh	w0, [x0]
+	cmp	w0, w1
+	bne	.L799
+	ldrh	w0, [x19, 8]
+	cbz	w0, .L800
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 641
+	add	x1, x1, 352
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L800:
+	ldrh	w0, [x19, 8]
+	add	w0, w0, 1
+	strh	w0, [x19, 8]
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x20]
+	strh	wzr, [x19, 2]
+	ldr	w0, [x19, 48]
+	strh	wzr, [x19]
+	add	w0, w0, 1
+	str	w0, [x19, 48]
+.L801:
+	mov	w0, 0
+	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 128
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 64
 	ret
-.L895:
-	mov	w19, 0
-	b	.L893
-	.size	FlashTestBlk, .-FlashTestBlk
-	.align	2
-	.global	FlashGetBadBlockList
-	.type	FlashGetBadBlockList, %function
-FlashGetBadBlockList:
-	stp	x29, x30, [sp, -48]!
-	mov	w2, 256
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x20, x0
-	str	x21, [sp, 32]
-	mov	w21, w1
+.L799:
+	ubfiz	x0, x0, 1, 16
+	adrp	x21, .LANCHOR0
+	ldr	w1, [x19, 48]
+	ldr	x23, [x19, 40]
+	ldrh	w22, [x20, x0]
+	add	x20, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x19, 2]
+	orr	w0, w0, w22, lsl 10
+	str	w0, [x20, 3716]
+	ldr	x0, [x20, 3448]
+	str	x0, [x20, 3720]
+	ldr	x0, [x20, 3512]
+	str	x0, [x20, 3728]
+	str	w1, [x0, 4]
+	mov	w1, -1291
+	strh	w1, [x0, 8]
+	ldrh	w1, [x19, 4]
+	strh	w1, [x0]
+	strh	w22, [x0, 2]
 	mov	w1, 255
-	bl	ftl_memset
-	adrp	x19, .LANCHOR0
-	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, w21
-	ldr	x2, [x0, 3368]
-	mov	x0, x20
-	blr	x2
-	and	w0, w0, 65535
-	cmp	w0, 50
-	bls	.L898
-	mov	w2, 256
-	mov	w1, 255
-	mov	x0, x20
+	ldrh	w2, [x20, 108]
+	ldr	x0, [x20, 3448]
+	lsl	w2, w2, 3
 	bl	ftl_memset
 	mov	w0, 0
-.L898:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x19, 14]
-	cmp	w1, 4
-	bne	.L902
-	mov	x1, 0
-.L900:
-	cmp	w0, w1, uxth
-	bhi	.L901
-.L902:
-	ldp	x19, x20, [sp, 16]
-	ldr	x21, [sp, 32]
-	ldp	x29, x30, [sp], 48
-	ret
-.L901:
-	ldrh	w2, [x20, x1, lsl 1]
-	lsr	w2, w2, 1
-	strh	w2, [x20, x1, lsl 1]
-	add	x1, x1, 1
-	b	.L900
-	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
-	.align	2
-	.global	ftl_memcpy
-	.type	ftl_memcpy, %function
-ftl_memcpy:
-	stp	x29, x30, [sp, -16]!
-	uxtw	x2, w2
-	add	x29, sp, 0
-	bl	memcpy
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	ftl_memcpy, .-ftl_memcpy
-	.align	2
-	.global	FtlBbmTblFlush
-	.type	FtlBbmTblFlush, %function
-FtlBbmTblFlush:
-	stp	x29, x30, [sp, -80]!
 	mov	w1, 0
+.L802:
+	ldrh	w2, [x19, 6]
+	cmp	w2, w1
+	bhi	.L804
+	add	x0, x21, :lo12:.LANCHOR0
+	mov	w2, 1
+	mov	w3, 0
+	mov	w1, w2
+	add	x0, x0, 3712
+	bl	FlashProgPages
+	ldrh	w0, [x19, 2]
+	add	w0, w0, 1
+	strh	w0, [x19, 2]
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	b	.L801
+.L804:
+	ubfiz	x2, x1, 2, 16
+	ldr	w3, [x23, x2]
+	cmp	w22, w3, lsr 10
+	bne	.L803
+	add	w0, w0, 1
+	ldr	x4, [x20, 3448]
+	and	w0, w0, 65535
+	ubfiz	x3, x0, 3, 16
+	str	w1, [x4, x3]
+	ldr	w4, [x23, x2]
+	ldr	x2, [x20, 3448]
+	add	x2, x2, x3
+	str	w4, [x2, 4]
+.L803:
+	add	w1, w1, 1
+	and	w1, w1, 65535
+	b	.L802
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	2
+	.global	FtlMapWritePage
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
+	stp	x23, x24, [sp, 48]
+	adrp	x23, .LANCHOR0
+	add	x24, x23, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
-	str	x25, [sp, 64]
-	adrp	x25, .LANCHOR0
-	add	x19, x25, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	stp	x23, x24, [sp, 48]
-	adrp	x22, .LANCHOR3
-	mov	w21, 0
-	add	x22, x22, :lo12:.LANCHOR3
-	ldr	x2, [x19, 3440]
-	add	x23, x19, 192
-	ldr	x0, [x19, 3432]
-	str	x2, [x19, 3416]
-	ldrh	w2, [x19, 114]
-	str	x0, [x19, 3408]
-	bl	ftl_memset
-.L907:
-	ldrh	w0, [x19, 58]
-	add	x20, x19, 3400
-	cmp	w21, w0
-	blt	.L908
-	ldr	x24, [x20, 16]
-	mov	w1, 255
-	mov	w2, 16
-	adrp	x22, .LC94
-	mov	x0, x24
-	bl	ftl_memset
-	mov	w0, -3887
-	add	x1, x19, 160
-	strh	w0, [x24]
-	add	x25, x25, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:.LC94
+	mov	x19, x0
+	stp	x25, x26, [sp, 64]
+	adrp	x22, .LANCHOR1
+	stp	x27, x28, [sp, 80]
+	mov	w26, w1
+	mov	x27, x2
+	mov	x25, x23
+	add	x22, x22, :lo12:.LANCHOR1
+	add	x20, x24, 3712
 	mov	w21, 0
-	ldr	w0, [x19, 168]
-	mov	w23, 0
-	str	w0, [x24, 4]
-	ldrh	w0, [x19, 160]
-	strh	w0, [x24, 2]
-	ldrh	w0, [x19, 164]
-	strh	w0, [x24, 8]
-	ldrh	w0, [x19, 166]
-	strh	w0, [x24, 10]
-	ldr	w0, [x19, 32]
-	mov	x19, x1
-	strh	w0, [x24, 12]
-.L909:
-	ldr	x0, [x25, 3432]
-	str	x0, [x20, 8]
-	ldr	x0, [x25, 3440]
-	str	x0, [x20, 16]
-	ldrh	w1, [x19]
-	ldrh	w2, [x19, 2]
-	ldrh	w3, [x19, 4]
-	ldrh	w4, [x24, 10]
-	orr	w0, w2, w1, lsl 10
-	str	wzr, [x20]
-	str	w0, [x20, 4]
-	mov	x0, x22
-	bl	printk
-	mov	w3, 1
-	mov	x0, x20
-	mov	w1, w3
-	mov	w2, w3
-	bl	FlashProgPages
-	ldrh	w0, [x25, 108]
+.L810:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	w1, [x0, 2604]
+	add	w1, w1, 1
+	str	w1, [x0, 2604]
+	ldrh	w0, [x0, 108]
 	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L910
-	ldr	w0, [x19, 8]
-	mov	w2, 1
+	bge	.L811
 	ldrh	w1, [x19]
-	add	w0, w0, 1
-	str	w0, [x19, 8]
-	str	w0, [x24, 4]
-	strh	w1, [x24, 8]
-	ldrh	w0, [x19, 4]
-	strh	w1, [x19, 4]
-	ldr	x1, [x25, 3960]
-	strh	w0, [x19]
-	lsl	w0, w0, 10
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L812
+.L811:
+	mov	x0, x19
+	bl	Ftl_write_map_blk_to_last_page
+.L812:
+	ldrh	w1, [x19]
+	ldr	x0, [x19, 16]
+	ldrh	w0, [x0, x1, lsl 1]
+	cbnz	w0, .L813
+	adrp	x0, .LC1
+	mov	w2, 699
+	add	x1, x22, 384
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L813:
+	ldrh	w1, [x19]
+	ldrh	w0, [x19, 10]
+	cmp	w1, w0
+	bcc	.L814
+	adrp	x0, .LC1
+	mov	w2, 700
+	add	x1, x22, 384
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L814:
+	ldrh	w1, [x19]
+	mov	w2, 16
+	ldr	x0, [x19, 16]
+	ldrh	w28, [x0, x1, lsl 1]
+	mov	w1, 0
+	ldrh	w0, [x19, 2]
+	str	x27, [x20, 8]
+	orr	w0, w0, w28, lsl 10
 	str	w0, [x20, 4]
-	strh	wzr, [x19, 2]
-	str	w0, [x1, 4]
-	mov	w1, w2
-	ldr	x0, [x25, 3960]
-	bl	FlashEraseBlocks
+	ldr	x0, [x24, 3512]
+	str	x0, [x20, 16]
+	bl	ftl_memset
+	ldr	x0, [x20, 16]
 	mov	w3, 1
-	mov	x0, x20
+	ldr	w1, [x19, 48]
 	mov	w2, w3
+	strh	w26, [x0, 8]
+	str	w1, [x0, 4]
+	ldrh	w1, [x19, 4]
+	strh	w1, [x0]
 	mov	w1, w3
+	strh	w28, [x0, 2]
+	mov	x0, x20
 	bl	FlashProgPages
-.L910:
 	ldrh	w0, [x19, 2]
 	add	w0, w0, 1
+	and	w0, w0, 65535
 	strh	w0, [x19, 2]
-	ldr	w0, [x20]
-	cmn	w0, #1
-	bne	.L911
+	ldr	w1, [x20]
+	cmn	w1, #1
+	bne	.L815
 	ldr	w1, [x20, 4]
+	adrp	x0, .LC89
+	add	x0, x0, :lo12:.LC89
 	add	w21, w21, 1
-	adrp	x0, .LC95
 	and	w21, w21, 65535
-	add	x0, x0, :lo12:.LC95
-	bl	printk
+	bl	sftl_printk
+	ldrh	w0, [x19, 2]
+	cmp	w0, 2
+	bhi	.L816
+	ldrh	w0, [x24, 108]
+	sub	w0, w0, #1
+	strh	w0, [x19, 2]
+.L816:
 	cmp	w21, 3
-	bls	.L909
-	ldr	w1, [x20, 4]
-	adrp	x0, .LC96
+	bls	.L817
+	add	x25, x25, :lo12:.LANCHOR0
+	adrp	x0, .LC90
 	mov	w2, w21
-	add	x0, x0, :lo12:.LC96
-	bl	printk
-.L913:
-	b	.L913
-.L908:
-	ldrh	w2, [x22, -200]
-	ldr	x1, [x23], 8
-	ldr	x0, [x20, 8]
-	mul	w3, w21, w2
-	lsl	w2, w2, 2
-	add	w21, w21, 1
-	add	x0, x0, x3, sxtw 2
-	bl	ftl_memcpy
-	b	.L907
-.L914:
-	mov	w23, 1
-	b	.L909
-.L911:
-	cbz	w23, .L914
+	add	x0, x0, :lo12:.LC90
+	ldr	w1, [x25, 3716]
+	bl	sftl_printk
+.L818:
+	b	.L818
+.L817:
+	ldr	w0, [x19, 52]
+	cbz	w0, .L810
+.L832:
+	b	.L832
+.L815:
+	cmp	w0, 1
+	beq	.L821
+	cmp	w1, 256
+	beq	.L821
+	ldr	w0, [x19, 56]
+	cbz	w0, .L822
+.L821:
+	str	wzr, [x19, 56]
+	b	.L810
+.L822:
+	ldr	x0, [x19, 40]
+	ldr	w1, [x20, 4]
+	str	w1, [x0, w26, uxtw 2]
 	mov	w0, 0
-	ldr	x25, [sp, 64]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 80
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 96
 	ret
-	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
-	.global	allocate_data_superblock
-	.type	allocate_data_superblock, %function
-allocate_data_superblock:
-	stp	x29, x30, [sp, -112]!
+	.global	load_l2p_region
+	.type	load_l2p_region, %function
+load_l2p_region:
+	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp, 32]
+	and	w22, w0, 65535
 	adrp	x21, .LANCHOR0
-	add	x22, x21, :lo12:.LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
+	and	x19, x1, 65535
 	stp	x23, x24, [sp, 48]
-	mov	x20, x0
-	mov	x19, x22
-	add	x23, x22, 2520
-	stp	x25, x26, [sp, 64]
-	stp	x27, x28, [sp, 80]
-.L917:
-	ldrh	w1, [x22, 2400]
-	ldrh	w0, [x22, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x22, 44]
-	cmp	w0, w1
-	ble	.L918
+	str	x25, [sp, 64]
+	ldrh	w0, [x0, 140]
+	cmp	w0, w22
+	bcs	.L835
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2585
-	add	x1, x1, 424
+	mov	w2, 485
+	add	x1, x1, 400
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L918:
-	cmp	x20, x23
-	bne	.L943
-	ldrh	w0, [x19, 2416]
-	ldr	w1, [x19, 3244]
-	mul	w1, w0, w1
-	lsr	w0, w0, 1
-	add	w0, w0, 1
-	add	w1, w0, w1, lsr 2
-	ands	w1, w1, 65535
-	beq	.L919
-	sub	w1, w1, #1
-	and	w1, w1, 65535
-.L919:
-	add	x0, x19, 2408
-	bl	List_pop_index_node
-	and	w24, w0, 65535
-	ldrh	w0, [x19, 2416]
-	cbnz	w0, .L920
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2594
-	add	x1, x1, 424
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L920:
-	ldrh	w0, [x19, 2416]
-	sub	w0, w0, #1
-	strh	w0, [x19, 2416]
-	strh	w24, [x20]
-	mov	x0, x20
-	bl	make_superblock
-	ldrb	w0, [x20, 7]
-	cbnz	w0, .L921
-	ldr	x1, [x19, 2376]
-	ubfiz	x0, x24, 1, 16
-	mov	w2, -1
-	strh	w2, [x1, x0]
-	mov	w0, w24
-	bl	INSERT_DATA_LIST
-	ldrh	w1, [x19, 2400]
-	ldrh	w0, [x19, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x19, 44]
-	cmp	w0, w1
-	ble	.L917
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2605
-	add	x1, x1, 424
-	adrp	x0, .LC1
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L917
-.L943:
-	mov	w1, 0
-	b	.L919
-.L921:
-	ldrh	w1, [x19, 2400]
-	ldrh	w0, [x19, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x19, 44]
-	cmp	w0, w1
-	ble	.L923
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2608
-	add	x1, x1, 424
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L923:
-	add	x27, x20, 16
-	ldrh	w4, [x19, 36]
-	mov	x3, x27
-	mov	x0, 0
-	mov	w25, 0
-	mov	w5, 65535
-.L924:
-	cmp	w4, w0, uxth
-	bhi	.L926
-	cbnz	w25, .L927
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2619
-	add	x1, x1, 424
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L927:
-	ldrh	w0, [x19, 2672]
-	cmp	w0, w24
-	bne	.L928
+	bl	sftl_printk
+.L835:
+	add	x20, x21, :lo12:.LANCHOR0
+	ubfiz	x0, x22, 2, 16
+	ldr	x1, [x20, 3600]
+	ldr	w24, [x1, x0]
+	cbnz	w24, .L836
+	ldr	x0, [x20, 2568]
+	lsl	x19, x19, 4
+	ldrh	w2, [x20, 114]
+	mov	w1, 255
+	add	x0, x0, x19
+	ldr	x0, [x0, 8]
+	bl	ftl_memset
+	ldr	x0, [x20, 2568]
+	strh	w22, [x0, x19]
+	ldr	x0, [x20, 2568]
+	add	x19, x0, x19
+	str	wzr, [x19, 4]
+.L837:
+	mov	w0, 0
+	ldr	x25, [sp, 64]
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x29, x30, [sp], 80
+	ret
+.L836:
+	ldr	x0, [x20, 2568]
+	lsl	x19, x19, 4
+	add	x23, x20, 3712
+	mov	w2, 1
+	add	x0, x0, x19
+	mov	w1, w2
+	str	w24, [x20, 3716]
+	ldr	x0, [x0, 8]
+	str	x0, [x20, 3720]
+	ldr	x0, [x20, 3512]
+	str	x0, [x20, 3728]
+	mov	x0, x23
+	bl	FlashReadPages
+	ldr	x25, [x20, 3728]
+	ldrh	w0, [x25, 8]
+	cmp	w0, w22
+	beq	.L838
+	mov	w2, w24
+	mov	w1, w22
+	adrp	x0, .LC91
+	add	x0, x0, :lo12:.LC91
+	bl	sftl_printk
+	ldr	x1, [x20, 3728]
+	mov	w3, 4
+	adrp	x0, .LC92
+	mov	w2, w3
+	add	x0, x0, :lo12:.LC92
+	bl	rknand_print_hex
+	ldrh	w3, [x20, 140]
+	adrp	x0, .LC93
+	ldr	x1, [x20, 3600]
+	mov	w2, 4
+	add	x0, x0, :lo12:.LC93
+	bl	rknand_print_hex
+.L839:
+	ldrh	w0, [x25, 8]
+	cmp	w0, w22
+	beq	.L840
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2621
-	add	x1, x1, 424
+	mov	w2, 508
+	add	x1, x1, 400
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L928:
-	ldrb	w0, [x20, 8]
-	uxtw	x26, w24
-	cbnz	w0, .L929
-	ldr	x2, [x19, 2384]
-	lsl	x1, x26, 1
-	ldrh	w0, [x2, x1]
-	cbz	w0, .L930
-	ldrh	w3, [x19, 96]
-	add	w0, w0, w3
-.L951:
-	strh	w0, [x2, x1]
-	mov	w1, 0
-	ldr	w0, [x19, 2628]
-	add	w0, w0, 1
-	str	w0, [x19, 2628]
-	mov	w0, w24
-	bl	ftl_set_blk_mode
-.L932:
-	ldr	x0, [x19, 2384]
-	lsl	x26, x26, 1
-	ldr	w1, [x19, 2644]
-	ldrh	w0, [x0, x26]
-	cmp	w0, w1
-	bls	.L933
-	str	w0, [x19, 2644]
-.L933:
-	ldr	w1, [x19, 2632]
-	ubfiz	x3, x25, 5, 16
-	ldrh	w0, [x19, 96]
-	ldr	w2, [x19, 2628]
-	madd	w0, w0, w2, w1
-	ldrh	w1, [x19, 44]
-	udiv	w0, w0, w1
-	ldr	x1, [x19, 4072]
-	str	w0, [x19, 2636]
-	ldr	w0, [x1, 16]
-	add	w0, w0, 1
-	str	w0, [x1, 16]
-	mov	x0, 0
-.L934:
-	cmp	x3, x0
-	bne	.L935
-	ldrb	w1, [x20, 8]
-	mov	w2, w25
-	ldr	x0, [x19, 3960]
-	mov	x28, 0
-	bl	FlashEraseBlocks
-	mov	w1, 0
-.L936:
-	cmp	w25, w28, uxth
-	bhi	.L938
-	cmp	w1, 0
-	ble	.L939
-	mov	w0, w24
-	bl	update_multiplier_value
-	bl	FtlBbmTblFlush
-.L939:
-	ldrb	w0, [x20, 7]
-	cbnz	w0, .L940
-	ldr	x0, [x19, 2376]
-	mov	w1, -1
-	strh	w1, [x0, x26]
-	mov	w0, w24
-	bl	INSERT_DATA_LIST
-	b	.L917
-.L926:
-	ldr	x1, [x19, 3960]
-	add	x2, x1, x0, lsl 5
-	stp	xzr, xzr, [x2, 8]
-	ldrh	w2, [x3]
-	cmp	w2, w5
-	beq	.L925
-	ubfiz	x6, x25, 5, 16
-	add	w25, w25, 1
-	add	x1, x1, x6
-	and	w25, w25, 65535
-	lsl	w2, w2, 10
-	str	w2, [x1, 4]
-.L925:
-	add	x0, x0, 1
-	add	x3, x3, 2
-	b	.L924
-.L930:
-	mov	w0, 2
-	b	.L951
-.L929:
-	ldr	x2, [x19, 2384]
-	lsl	x0, x26, 1
-	ldrh	w1, [x2, x0]
-	add	w1, w1, 1
-	strh	w1, [x2, x0]
-	ldr	w0, [x19, 2632]
-	add	w0, w0, 1
-	str	w0, [x19, 2632]
-	mov	w0, w24
-	bl	ftl_set_blk_mode.part.7
-	b	.L932
-.L935:
-	ldr	x1, [x19, 3960]
-	add	x1, x1, x0
-	add	x0, x0, 32
-	ldr	w2, [x1, 4]
-	and	w2, w2, -1024
-	str	w2, [x1, 4]
-	b	.L934
-.L938:
-	ldr	x2, [x19, 3960]
-	lsl	x0, x28, 5
-	add	x3, x2, x0
-	ldr	w2, [x2, x0]
-	cmn	w2, #1
-	bne	.L937
-	add	w1, w1, 1
-	ldr	w0, [x3, 4]
-	stp	w2, w1, [x29, 104]
-	lsr	w0, w0, 10
-	bl	FtlBbmMapBadBlock
-	ldp	w2, w1, [x29, 104]
-	strh	w2, [x27]
-	ldrb	w0, [x20, 7]
-	sub	w0, w0, #1
-	strb	w0, [x20, 7]
-.L937:
-	add	x28, x28, 1
-	add	x27, x27, 2
-	b	.L936
-.L940:
+	bl	sftl_printk
+.L840:
 	add	x21, x21, :lo12:.LANCHOR0
-	strh	wzr, [x20, 2]
-	strb	wzr, [x20, 6]
-	ldrh	w1, [x21, 106]
-	strh	w24, [x20]
-	mul	w0, w0, w1
-	ldr	w1, [x21, 2620]
-	str	w1, [x20, 12]
-	and	w0, w0, 65535
-	add	w1, w1, 1
-	strh	w0, [x20, 4]
-	str	w1, [x21, 2620]
-	ldr	x1, [x21, 2376]
-	ldrh	w2, [x20]
-	strh	w0, [x1, x2, lsl 1]
-	ldrh	w0, [x20, 4]
-	cbz	w0, .L941
-	ldrb	w0, [x20, 7]
-	cbnz	w0, .L942
-.L941:
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2674
-	add	x1, x1, 424
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L942:
-	ldp	x19, x20, [sp, 16]
-	mov	w0, 0
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 112
-	ret
-	.size	allocate_data_superblock, .-allocate_data_superblock
+	ldr	x0, [x21, 2568]
+	add	x0, x0, x19
+	str	wzr, [x0, 4]
+	ldr	x0, [x21, 2568]
+	strh	w22, [x0, x19]
+	b	.L837
+.L838:
+	ldr	w0, [x20, 3712]
+	cmp	w0, 256
+	bne	.L839
+	mov	w2, w24
+	mov	w1, w22
+	adrp	x0, .LC94
+	add	x0, x0, :lo12:.LC94
+	bl	sftl_printk
+	ldr	x0, [x20, 2568]
+	mov	w1, w22
+	add	x0, x0, x19
+	ldr	x2, [x0, 8]
+	add	x0, x20, 3632
+	bl	FtlMapWritePage
+	b	.L839
+	.size	load_l2p_region, .-load_l2p_region
 	.align	2
-	.global	FtlGcFreeBadSuperBlk
-	.type	FtlGcFreeBadSuperBlk, %function
-FtlGcFreeBadSuperBlk:
+	.global	ftl_map_blk_gc
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
 	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
+	mov	x19, x0
 	stp	x21, x22, [sp, 32]
-	and	w22, w0, 65535
+	adrp	x22, .LANCHOR0
 	stp	x23, x24, [sp, 48]
 	stp	x25, x26, [sp, 64]
-	ldrh	w0, [x19, 3324]
-	str	x27, [sp, 80]
-	cbz	w0, .L953
-	add	x23, x19, 64
-	add	x24, x19, 3328
-	mov	w21, 0
-.L954:
-	ldrh	w0, [x19, 36]
-	cmp	w0, w21
-	bhi	.L960
-	bl	FtlGcReFreshBadBlk
-.L953:
-	mov	w0, 0
-	ldr	x27, [sp, 80]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 96
-	ret
-.L960:
-	ldrb	w0, [x23, w21, sxtw]
-	mov	w1, w22
-	adrp	x26, .LC97
-	add	x26, x26, :lo12:.LC97
-	mov	w20, 0
-	bl	V2P_block
-	and	w25, w0, 65535
-.L955:
-	ldrh	w0, [x19, 3324]
-	cmp	w0, w20
-	bhi	.L959
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	b	.L954
-.L959:
-	ldrh	w0, [x24, w20, sxtw 1]
-	add	w27, w20, 1
-	cmp	w0, w25
-	bne	.L956
-	mov	w1, w25
-	mov	x0, x26
-	bl	printk
-	mov	w0, w25
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldrh	w0, [x19, 3324]
-	mov	w1, w27
-.L957:
-	cmp	w20, w0
-	bcc	.L958
-	sub	w0, w0, #1
-	strh	w0, [x19, 3324]
-.L956:
-	and	w20, w27, 65535
-	b	.L955
-.L958:
-	sub	w2, w1, #1
-	ldrh	w3, [x24, w1, sxtw 1]
-	add	w20, w20, 1
-	add	w1, w1, 1
-	and	w20, w20, 65535
-	strh	w3, [x24, w2, sxtw 1]
-	b	.L957
-	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
-	.align	2
-	.global	update_vpc_list
-	.type	update_vpc_list, %function
-update_vpc_list:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	and	w19, w0, 65535
-	adrp	x20, .LANCHOR0
-	add	x0, x20, :lo12:.LANCHOR0
-	str	x21, [sp, 32]
-	ubfiz	x1, x19, 1, 16
-	ldr	x2, [x0, 2376]
-	ldrh	w1, [x2, x1]
-	cbnz	w1, .L966
-	ldrh	w1, [x0, 2672]
-	cmp	w1, w19
-	bne	.L967
-	mov	w1, -1
-	strh	w1, [x0, 2672]
-.L968:
-	add	x21, x20, :lo12:.LANCHOR0
-	mov	w1, w19
-	add	x0, x21, 2368
-	bl	List_remove_node
-	ldrh	w0, [x21, 2400]
-	cbnz	w0, .L970
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2744
-	add	x1, x1, 456
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L970:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x20, 2400]
+	stp	x27, x28, [sp, 80]
+	ldr	x20, [x0, 16]
+	ldr	x25, [x0, 40]
+	bl	ftl_free_no_use_map_blk
+	ldrh	w1, [x19, 10]
+	ldrh	w2, [x19, 8]
+	sub	w1, w1, #5
+	cmp	w2, w1
+	blt	.L843
+	ubfiz	x0, x0, 1, 16
+	ldrh	w26, [x20, x0]
+	cbz	w26, .L843
+	ldr	w1, [x19, 52]
+	cbnz	w1, .L843
+	mov	w1, 1
+	str	w1, [x19, 52]
+	strh	wzr, [x20, x0]
+	ldrh	w0, [x19, 8]
+	ldrh	w1, [x19, 2]
 	sub	w0, w0, #1
-	strh	w0, [x20, 2400]
-	mov	w0, w19
-	bl	free_data_superblock
-	mov	w0, w19
-	bl	FtlGcFreeBadSuperBlk
-	ldrh	w1, [x20, 2400]
-	mov	w19, 1
-	ldrh	w0, [x20, 2416]
-	add	w0, w0, w1
-	ldrh	w1, [x20, 44]
-	cmp	w0, w1
-	ble	.L965
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 2747
-	add	x1, x1, 456
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L965:
-	mov	w0, w19
-	ldr	x21, [sp, 32]
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 48
-	ret
-.L967:
-	ldrh	w1, [x0, 2424]
-	cmp	w1, w19
-	beq	.L973
-	ldrh	w1, [x0, 2472]
-	cmp	w1, w19
-	beq	.L973
-	ldrh	w0, [x0, 2520]
-	cmp	w0, w19
-	bne	.L968
-.L973:
-	mov	w19, 0
-	b	.L965
-.L966:
-	mov	w0, w19
-	bl	List_update_data_list
-	b	.L973
-	.size	update_vpc_list, .-update_vpc_list
-	.align	2
-	.global	decrement_vpc_count
-	.type	decrement_vpc_count, %function
-decrement_vpc_count:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	and	w19, w0, 65535
-	str	x21, [sp, 32]
-	mov	w0, 65535
-	cmp	w19, w0
-	beq	.L977
-	adrp	x20, .LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR0
-	ubfiz	x21, x19, 1, 16
-	ldr	x1, [x20, 2376]
-	ldrh	w0, [x1, x21]
-	cbnz	w0, .L978
-	mov	w2, 0
-	mov	w1, w19
-	adrp	x0, .LC98
-	add	x0, x0, :lo12:.LC98
-	bl	printk
-	ldr	x0, [x20, 2376]
-	ldrh	w0, [x0, x21]
-	cbz	w0, .L979
-.L984:
-	mov	w21, 0
-.L976:
-	mov	w0, w21
-	ldr	x21, [sp, 32]
+	strh	w0, [x19, 8]
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x0, 108]
+	cmp	w1, w0
+	bcc	.L844
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L844:
+	add	x27, x22, :lo12:.LANCHOR0
+	adrp	x23, .LANCHOR1
+	add	x23, x23, :lo12:.LANCHOR1
+	add	x21, x27, 3712
+	add	x23, x23, 416
+	mov	w20, 0
+.L845:
+	ldrh	w0, [x19, 6]
+	cmp	w0, w20
+	bhi	.L852
+	mov	w1, 1
+	mov	w0, w26
+	bl	FtlFreeSysBlkQueueIn
+	str	wzr, [x19, 52]
+.L843:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w1, [x19, 2]
+	ldrh	w0, [x22, 108]
+	cmp	w1, w0
+	bcc	.L853
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L853:
+	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 48
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 96
 	ret
-.L979:
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2762
-	add	x1, x1, 472
-	adrp	x0, .LC1
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L984
-.L978:
-	sub	w0, w0, #1
-	strh	w0, [x1, x21]
-.L977:
-	adrp	x20, .LANCHOR3
-	add	x20, x20, :lo12:.LANCHOR3
-	mov	w1, 65535
-	ldrh	w0, [x20, -48]
-	cmp	w0, w1
-	bne	.L981
-	strh	w19, [x20, -48]
-	b	.L984
-.L981:
-	cmp	w19, w0
-	beq	.L984
-	bl	update_vpc_list
-	cmp	w0, 0
-	adrp	x1, .LANCHOR0
-	add	x1, x1, :lo12:.LANCHOR0
-	strh	w19, [x20, -48]
-	cset	w21, ne
-	ldr	x2, [x1, 2360]
-	ldr	x0, [x1, 2368]
-	ldr	x1, [x1, 2376]
-	sub	x0, x0, x2
-	mov	x2, -6148914691236517206
-	asr	x0, x0, 1
-	movk	x2, 0xaaab, lsl 0
-	mul	x0, x0, x2
-	and	x2, x0, 65535
-	ldrh	w1, [x1, x2, lsl 1]
-	cbnz	w1, .L976
-	cmp	w19, w0, uxth
-	beq	.L976
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 2778
-	add	x1, x1, 472
+.L852:
+	ubfiz	x0, x20, 2, 16
+	add	x28, x25, x0
+	ldr	w1, [x25, x0]
+	cmp	w26, w1, lsr 10
+	bne	.L846
+	ldr	x1, [x27, 3456]
+	mov	w2, 1
+	ldr	x24, [x27, 3512]
+	stp	x1, x24, [x21, 8]
+	mov	w1, w2
+	ldr	w0, [x25, x0]
+	str	w0, [x21, 4]
+	mov	x0, x21
+	bl	FlashReadPages
+	ldrh	w0, [x24, 8]
+	cmp	w0, w20
+	beq	.L847
 	adrp	x0, .LC1
+	mov	w2, 611
+	mov	x1, x23
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L976
-	.size	decrement_vpc_count, .-decrement_vpc_count
+	bl	sftl_printk
+.L847:
+	ldr	w0, [x21]
+	cmn	w0, #1
+	bne	.L848
+.L850:
+	str	wzr, [x28]
+.L849:
+	b	.L849
+.L848:
+	ldrh	w0, [x24, 8]
+	cmp	w0, w20
+	bne	.L850
+	ldrh	w1, [x24]
+	ldrh	w0, [x19, 4]
+	cmp	w1, w0
+	bne	.L850
+	ldr	x2, [x21, 8]
+	mov	w1, w20
+	mov	x0, x19
+	bl	FtlMapWritePage
+.L846:
+	add	w20, w20, 1
+	and	w20, w20, 65535
+	b	.L845
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
-	.global	FtlWriteDump_data
-	.type	FtlWriteDump_data, %function
-FtlWriteDump_data:
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
 	stp	x29, x30, [sp, -128]!
+	mov	w1, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	add	x20, x19, :lo12:.LANCHOR0
+	mov	x19, x0
 	stp	x21, x22, [sp, 32]
+	adrp	x21, .LANCHOR0
+	stp	x25, x26, [sp, 64]
+	stp	x27, x28, [sp, 80]
+	mov	w27, 0
 	stp	x23, x24, [sp, 48]
-	str	x25, [sp, 64]
-	ldrh	w2, [x20, 2428]
-	cbz	w2, .L986
-	ldrb	w1, [x20, 2432]
-	cbnz	w1, .L986
-	ldrb	w1, [x20, 2431]
-	ldrh	w3, [x20, 106]
-	mul	w1, w1, w3
-	cmp	w2, w1
-	beq	.L986
-	ldrb	w0, [x20, 2434]
-	cbnz	w0, .L985
-	ldr	w22, [x20, 2584]
-	add	x1, x29, 92
-	ldrh	w24, [x20, 36]
-	mov	w2, 0
-	sub	w22, w22, #1
-	mov	w0, w22
-	bl	log2phys
-	ldr	x21, [x20, 3440]
-	ldr	w0, [x29, 92]
-	ldr	x1, [x20, 3432]
-	str	w0, [x29, 100]
-	cmn	w0, #1
-	stp	x1, x21, [x29, 104]
-	str	w22, [x29, 120]
-	str	wzr, [x21, 4]
-	beq	.L988
-	mov	w2, 0
+	ldrh	w24, [x0, 6]
+	ldr	x0, [x0, 40]
+	str	x0, [x29, 120]
+	ldrh	w0, [x19, 8]
+	lsl	w2, w24, 2
+	str	w0, [x29, 116]
+	ldr	x0, [x29, 120]
+	ldp	x23, x26, [x19, 16]
+	bl	ftl_memset
+	stp	wzr, wzr, [x19, 48]
+	add	x3, x21, :lo12:.LANCHOR0
+	add	x20, x3, 3712
+	mov	x25, x3
+	ldr	x0, [x3, 3448]
+	ldr	x22, [x3, 3512]
+	stp	x0, x22, [x20, 8]
+	mov	w0, -1
+	strh	w0, [x19]
+	strh	w0, [x19, 2]
+	mov	w0, 1
+	str	w0, [x19, 56]
+	ldr	w0, [x29, 116]
+	sub	w0, w0, #1
+	str	w0, [x29, 112]
+.L860:
+	ldr	w0, [x29, 116]
+	cmp	w27, w0
+	bge	.L877
+	ldr	w0, [x29, 112]
+	sxtw	x28, w27
+	cmp	w27, w0
+	bne	.L861
+	lsl	x0, x28, 1
 	mov	w1, 1
-	add	x0, x29, 96
-	bl	FlashReadPages
-.L989:
-	add	x25, x19, :lo12:.LANCHOR0
-	lsl	w24, w24, 2
-	add	x20, x25, 2424
-	mov	w0, -3947
+	add	x20, x23, x0
+	add	x25, x21, :lo12:.LANCHOR0
+	add	x25, x25, 3712
+	ldrh	w0, [x23, x0]
 	mov	w23, 0
-	strh	w0, [x21]
-.L990:
-	cmp	w24, w23
-	bne	.L994
-.L991:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, 1
-	strb	w0, [x19, 2434]
-.L985:
+	bl	FtlGetLastWrittenPage
+	strh	w27, [x19]
+	sxth	w1, w0
+	add	w0, w0, 1
+	strh	w0, [x19, 2]
+	ldr	w0, [x26, x28, lsl 2]
+	add	w26, w1, 1
+	str	w0, [x19, 48]
+.L862:
+	cmp	w23, w26
+	blt	.L864
+.L877:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	x0, x19
+	bl	ftl_free_no_use_map_blk
+	ldrh	w1, [x19, 2]
+	ldrh	w0, [x21, 108]
+	cmp	w1, w0
+	bne	.L866
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L866:
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldr	x25, [sp, 64]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L988:
-	ldrh	w2, [x20, 114]
-	mov	w1, 255
-	ldr	x0, [x20, 3432]
-	bl	ftl_memset
-	b	.L989
-.L994:
-	ldrh	w0, [x20, 4]
-	cbz	w0, .L991
-	ldr	w0, [x29, 100]
-	add	w23, w23, 1
-	stp	w22, w0, [x21, 8]
+.L864:
 	ldrh	w0, [x20]
-	strh	w0, [x21, 2]
+	mov	w2, 1
+	mov	w1, w2
+	orr	w0, w23, w0, lsl 10
+	str	w0, [x25, 4]
+	mov	x0, x25
+	bl	FlashReadPages
+	ldr	w0, [x25]
+	cmn	w0, #1
+	beq	.L863
+	ldrh	w0, [x22, 8]
+	cmp	w24, w0
+	bls	.L863
+	ldrh	w2, [x22]
+	ldrh	w1, [x19, 4]
+	cmp	w2, w1
+	bne	.L863
+	ldr	x2, [x29, 120]
+	ubfiz	x0, x0, 2, 16
+	ldr	w1, [x25, 4]
+	str	w1, [x2, x0]
+.L863:
+	add	w23, w23, 1
+	sxth	w23, w23
+	b	.L862
+.L861:
+	ldr	x0, [x25, 3448]
+	mov	w2, 1
+	str	x0, [x20, 8]
+	lsl	x0, x28, 1
+	ldrh	w1, [x25, 108]
+	add	x28, x23, x0
+	ldrh	w0, [x23, x0]
+	sub	w1, w1, #1
+	orr	w0, w1, w0, lsl 10
+	mov	w1, w2
+	str	w0, [x20, 4]
 	mov	x0, x20
-	bl	get_new_active_ppa
-	str	w0, [x29, 100]
-	ldr	w0, [x25, 2624]
-	mov	w3, 0
-	str	w0, [x21, 4]
-	mov	w2, 0
-	add	w0, w0, 1
-	mov	w1, 1
+	bl	FlashReadPages
+	ldr	w0, [x20]
 	cmn	w0, #1
-	csel	w0, w0, wzr, ne
-	str	w0, [x25, 2624]
-	add	x0, x29, 96
-	bl	FlashProgPages
-	ldrh	w0, [x20]
-	bl	decrement_vpc_count
-	b	.L990
-.L986:
-	add	x19, x19, :lo12:.LANCHOR0
-	strb	wzr, [x19, 2434]
-	b	.L985
-	.size	FtlWriteDump_data, .-FtlWriteDump_data
+	beq	.L879
+	ldrh	w1, [x22]
+	ldrh	w0, [x19, 4]
+	cmp	w1, w0
+	bne	.L879
+	ldrh	w1, [x22, 8]
+	mov	w0, 64245
+	cmp	w1, w0
+	beq	.L868
+.L879:
+	mov	w5, 0
+.L869:
+	ldrh	w0, [x25, 108]
+	cmp	w5, w0
+	bge	.L875
+	ldrh	w0, [x28]
+	mov	w2, 1
+	str	w5, [x29, 108]
+	mov	w1, w2
+	orr	w0, w5, w0, lsl 10
+	str	w0, [x20, 4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	w0, [x20]
+	ldr	w5, [x29, 108]
+	cmn	w0, #1
+	beq	.L873
+	ldrh	w0, [x22, 8]
+	cmp	w24, w0
+	bls	.L873
+	ldrh	w2, [x22]
+	ldrh	w1, [x19, 4]
+	cmp	w2, w1
+	bne	.L873
+	ldr	x2, [x29, 120]
+	ubfiz	x0, x0, 2, 16
+	ldr	w1, [x20, 4]
+	str	w1, [x2, x0]
+.L873:
+	add	w5, w5, 1
+	sxth	w5, w5
+	b	.L869
+.L868:
+	mov	w0, 0
+.L870:
+	ldrh	w1, [x25, 108]
+	sub	w1, w1, #1
+	cmp	w0, w1
+	blt	.L872
+.L875:
+	add	w4, w27, 1
+	sxth	w27, w4
+	b	.L860
+.L872:
+	ldr	x2, [x25, 3448]
+	sbfiz	x5, x0, 3, 32
+	ldrh	w1, [x2, x5]
+	cmp	w24, w1
+	bls	.L871
+	add	x2, x2, x5
+	ldr	x3, [x29, 120]
+	ubfiz	x1, x1, 2, 16
+	ldr	w2, [x2, 4]
+	str	w2, [x3, x1]
+.L871:
+	add	w0, w0, 1
+	sxth	w0, w0
+	b	.L870
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
-	.global	l2p_flush
-	.type	l2p_flush, %function
-l2p_flush:
+	.global	FtlLoadVonderInfo
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x0, x1, 3752
+	add	x29, sp, 0
+	ldrh	w2, [x1, 124]
+	strh	w2, [x0, 10]
+	mov	w2, -3962
+	strh	w2, [x0, 4]
+	ldrh	w2, [x1, 148]
+	strh	w2, [x0, 8]
+	ldrh	w2, [x1, 126]
+	strh	w2, [x0, 6]
+	ldr	x2, [x1, 152]
+	str	x2, [x0, 16]
+	ldr	x2, [x1, 3584]
+	str	x2, [x0, 24]
+	ldr	x2, [x1, 3576]
+	ldr	x1, [x1, 3592]
+	stp	x2, x1, [x0, 32]
+	bl	FtlMapTblRecovery
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlLoadMapInfo
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlL2PDataInit
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 3632
+	bl	FtlMapTblRecovery
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	flush_l2p_region
+	.type	flush_l2p_region, %function
+flush_l2p_region:
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	w19, 0
-	bl	FtlWriteDump_data
-.L1004:
-	ldrh	w0, [x20, 142]
-	cmp	w0, w19
-	bhi	.L1006
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	ubfiz	x20, x0, 4, 16
+	ldr	x0, [x19, 2568]
+	add	x1, x0, x20
+	ldr	x2, [x1, 8]
+	ldrh	w1, [x0, x20]
+	add	x0, x19, 3632
+	bl	FtlMapWritePage
+	ldr	x0, [x19, 2568]
+	add	x0, x0, x20
+	ldr	w1, [x0, 4]
+	and	w1, w1, 2147483647
+	str	w1, [x0, 4]
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1006:
-	ldr	x1, [x20, 2568]
-	ubfiz	x0, x19, 4, 16
-	add	x0, x1, x0
-	ldr	w0, [x0, 4]
-	tbz	w0, #31, .L1005
-	mov	w0, w19
-	bl	flush_l2p_region
-.L1005:
-	add	w19, w19, 1
-	and	w19, w19, 65535
-	b	.L1004
-	.size	l2p_flush, .-l2p_flush
+	.size	flush_l2p_region, .-flush_l2p_region
 	.align	2
-	.global	FtlRecoverySuperblock
-	.type	FtlRecoverySuperblock, %function
-FtlRecoverySuperblock:
-	stp	x29, x30, [sp, -176]!
-	mov	w1, 65535
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
+	.global	log2phys
+	.type	log2phys, %function
+log2phys:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x20, .LANCHOR0
+	stp	x25, x26, [sp, 64]
+	mov	w25, w0
+	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
 	stp	x23, x24, [sp, 48]
-	stp	x25, x26, [sp, 64]
-	stp	x27, x28, [sp, 80]
-	ldrh	w0, [x0]
-	cmp	w0, w1
-	beq	.L1126
-	ldrb	w0, [x19, 6]
-	adrp	x20, .LANCHOR0
-	str	w0, [x29, 156]
+	mov	x22, x1
+	mov	w23, w2
+	ldrh	w24, [x0, 112]
+	ldr	w0, [x0, 2584]
+	cmp	w25, w0
+	bcc	.L894
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 811
+	add	x1, x1, 432
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L894:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w27, [x19, 2]
-	ldrh	w0, [x0, 106]
-	cmp	w0, w27
-	bne	.L1011
-	strh	wzr, [x19, 4]
-.L1132:
-	strb	wzr, [x19, 6]
-.L1126:
+	ldr	w1, [x0, 2584]
+	cmp	w25, w1
+	bcs	.L895
+	add	w24, w24, 7
+	ldrh	w1, [x0, 142]
+	ldr	x2, [x0, 2568]
+	mov	x0, 0
+	lsr	w21, w25, w24
+	and	w21, w21, 65535
+.L896:
+	and	x19, x0, 65535
+	cmp	w19, w1
+	bcc	.L901
+	bl	select_l2p_ram_region
+	and	x19, x0, 65535
+	add	x2, x20, :lo12:.LANCHOR0
+	ubfiz	x1, x19, 4, 16
+	mov	w26, w0
+	ldr	x2, [x2, 2568]
+	add	x3, x2, x1
+	ldrh	w2, [x2, x1]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L902
+	ldr	w1, [x3, 4]
+	tbz	w1, #31, .L902
+	bl	flush_l2p_region
+.L902:
+	mov	w1, w26
+	mov	w0, w21
+	bl	load_l2p_region
+	b	.L898
+.L895:
+	mov	w0, -1
+	cbnz	w23, .L893
+	str	w0, [x22]
+.L893:
 	ldp	x19, x20, [sp, 16]
-	mov	w0, 0
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 176
+	ldp	x29, x30, [sp], 80
 	ret
-.L1011:
-	ldrh	w0, [x19, 16]
-	mov	w21, 0
-.L1012:
-	cmp	w0, w1
-	beq	.L1013
-	mov	w1, 1
-	bl	FtlGetLastWrittenPage
-	mov	w24, w0
+.L901:
+	add	x0, x0, 1
+	add	x3, x2, x0, lsl 4
+	ldrh	w3, [x3, -16]
+	cmp	w3, w21
+	bne	.L896
+.L898:
+	mov	x0, 1
+	lsl	x0, x0, x24
+	sub	w0, w0, #1
+	and	w0, w0, w25
+	and	x0, x0, 65535
+	cbnz	w23, .L899
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	x1, [x1, 2568]
+	add	x1, x1, x19, lsl 4
+	ldr	x1, [x1, 8]
+	ldr	w0, [x1, x0, lsl 2]
+	str	w0, [x22]
+.L900:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x0, [x20, 2568]
+	add	x19, x0, x19, lsl 4
+	ldr	w0, [x19, 4]
 	cmn	w0, #1
-	beq	.L1014
-	add	x0, x20, :lo12:.LANCHOR0
-	add	x1, x19, 16
-	str	x1, [x29, 144]
-	add	x5, x19, 16
-	mov	w21, 0
-	mov	w10, 65535
-	ldrh	w1, [x0, 36]
-	mov	w6, 4
-	ldrh	w8, [x0, 114]
-	add	x1, x1, 8
-	ldrh	w9, [x0, 116]
-	add	x1, x19, x1, lsl 1
-.L1015:
-	cmp	x5, x1
-	bne	.L1019
-	add	x23, x20, :lo12:.LANCHOR0
-	mov	w2, 0
-	mov	w1, w21
-	ldr	x0, [x23, 4016]
-	bl	FlashReadPages
-	ldr	w22, [x23, 2624]
-	ldr	x4, [x23, 4016]
-	and	w9, w24, 65535
-	sub	w22, w22, #1
-	mov	w7, 65535
-	mov	x6, x4
-	mov	w3, 0
-.L1020:
-	cmp	w21, w3
-	bne	.L1025
-	add	w23, w24, 1
-	ldr	w0, [x4, 4]
-	and	w23, w23, 65535
-.L1128:
-	lsr	w0, w0, 10
-	bl	P2V_plane
-	and	w28, w0, 65535
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0, 106]
-	cmp	w0, w23
-	bne	.L1027
-	strh	w23, [x19, 2]
-	strb	wzr, [x19, 6]
-	strh	wzr, [x19, 4]
-.L1027:
-	ldr	w0, [x29, 156]
-	cmp	w23, w27
-	ccmp	w28, w0, 0, eq
-	bne	.L1028
-.L1133:
-	mov	w2, w28
-	mov	w1, w23
-	mov	x0, x19
-	bl	ftl_sb_update_avl_pages
-	b	.L1126
-.L1013:
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	add	x0, x19, x21, sxtw 1
-	ldrh	w0, [x0, 16]
-	b	.L1012
-.L1014:
-	cbz	w27, .L1016
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1755
-	add	x1, x1, 496
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1016:
-	ldr	w0, [x29, 156]
-	cmp	w0, 0
-	ccmp	w21, w0, 4, ne
-	beq	.L1017
+	beq	.L904
+	add	w0, w0, 1
+	str	w0, [x19, 4]
+.L904:
+	mov	w0, 0
+	b	.L893
+.L899:
+	add	x2, x20, :lo12:.LANCHOR0
+	lsl	x1, x19, 4
+	ldr	w4, [x22]
+	ldr	x3, [x2, 2568]
+	add	x3, x3, x1
+	ldr	x3, [x3, 8]
+	str	w4, [x3, x0, lsl 2]
+	strh	w21, [x2, 2576]
+	ldr	x0, [x2, 2568]
+	add	x0, x0, x1
+	ldr	w1, [x0, 4]
+	orr	w1, w1, -2147483648
+	str	w1, [x0, 4]
+	b	.L900
+	.size	log2phys, .-log2phys
+	.align	2
+	.global	FtlReUsePrevPpa
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp, 32]
+	mov	w21, w0
+	stp	x19, x20, [sp, 16]
+	lsr	w0, w1, 10
+	str	w1, [x29, 76]
+	adrp	x22, .LANCHOR0
+	str	x23, [sp, 48]
+	bl	P2V_block_in_plane
+	add	x2, x22, :lo12:.LANCHOR0
+	and	w0, w0, 65535
+	ubfiz	x20, x0, 1, 16
+	ldr	x3, [x2, 2376]
+	ldrh	w1, [x3, x20]
+	cbnz	w1, .L908
+	ldr	x19, [x2, 2408]
+	cbz	x19, .L909
+	ldrh	w3, [x2, 2416]
+	mov	x4, -6148914691236517206
+	ldr	x2, [x2, 2360]
+	movk	x4, 0xaaab, lsl 0
+	mov	w5, 65535
+	sub	x19, x19, x2
+	asr	x19, x19, 1
+	mul	x19, x19, x4
+	mov	w4, 6
+	and	w19, w19, 65535
+.L910:
+	cmp	w1, w3
+	beq	.L909
+	cmp	w19, w0
+	bne	.L911
+	add	x23, x22, :lo12:.LANCHOR0
+	mov	w1, w19
+	add	x0, x23, 2408
+	bl	List_remove_node
+	ldrh	w0, [x23, 2416]
+	cbnz	w0, .L912
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 1756
-	add	x1, x1, 496
+	mov	w2, 1699
+	add	x1, x1, 448
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1017:
-	strh	wzr, [x19, 2]
-	b	.L1132
-.L1019:
-	ldrh	w2, [x5]
-	cmp	w2, w10
-	beq	.L1018
-	ldr	x4, [x0, 4016]
-	ubfiz	x7, x21, 5, 16
-	orr	w2, w24, w2, lsl 10
-	add	x4, x4, x7
-	str	w2, [x4, 4]
-	mul	w2, w21, w8
-	ldr	x3, [x0, 4016]
-	ldr	x4, [x0, 3264]
-	sdiv	w2, w2, w6
-	add	x3, x3, x7
-	add	x2, x4, x2, sxtw 2
-	str	x2, [x3, 8]
-	mul	w2, w21, w9
-	ldr	x4, [x0, 3272]
-	add	w21, w21, 1
-	and	w21, w21, 65535
-	sdiv	w2, w2, w6
-	add	x2, x4, x2, sxtw 2
-	str	x2, [x3, 16]
-.L1018:
-	add	x5, x5, 2
-	b	.L1015
-.L1025:
-	ldr	w0, [x6]
-	cbnz	w0, .L1021
-	ldr	x8, [x6, 16]
-	ldr	w5, [x8, 4]
-	cmn	w5, #1
-	beq	.L1022
-	ldr	w1, [x23, 2624]
-	mov	w0, w5
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1022
-	add	w5, w5, 1
-	str	w5, [x23, 2624]
-.L1022:
-	ldr	w0, [x8]
-	cmn	w0, #1
-	bne	.L1024
-	ubfiz	x3, x3, 5, 16
-	and	w23, w24, 65535
-	add	x3, x4, x3
-	ldr	w0, [x3, 4]
-	b	.L1128
-.L1021:
-	mov	w7, w9
-.L1024:
-	add	w3, w3, 1
-	add	x6, x6, 32
-	and	w3, w3, 65535
-	b	.L1020
-.L1028:
-	mov	w0, 65535
-	adrp	x21, .LANCHOR3
-	cmp	w7, w0
-	bne	.L1029
-	ldrb	w0, [x19, 8]
-	cbnz	w0, .L1030
-.L1029:
-	add	x0, x21, :lo12:.LANCHOR3
-	and	w3, w24, 65535
-	ldr	w1, [x0, -36]
-	cmn	w1, #1
-	bne	.L1031
-	str	w22, [x0, -36]
-.L1031:
-	add	w0, w27, 7
-	cmp	w0, w24, uxth
-	bge	.L1079
-	sub	w25, w3, #7
-	and	w25, w25, 65535
-.L1032:
-	add	x26, x20, :lo12:.LANCHOR0
-	mov	w4, 65535
-.L1033:
-	cmp	w25, w3
-	bhi	.L1040
-	ldrh	w0, [x26, 36]
-	mov	w24, 0
-	ldr	x1, [x29, 144]
-	add	x0, x0, 8
-	add	x0, x19, x0, lsl 1
-	b	.L1041
-.L1079:
-	mov	w25, w27
-	b	.L1032
-.L1035:
-	ldrh	w2, [x1]
-	cmp	w2, w4
-	beq	.L1034
-	ldr	x5, [x26, 4016]
-	ubfiz	x6, x24, 5, 16
-	add	w24, w24, 1
-	orr	w2, w25, w2, lsl 10
-	add	x5, x5, x6
-	and	w24, w24, 65535
-	str	w2, [x5, 4]
-.L1034:
-	add	x1, x1, 2
-.L1041:
-	cmp	x0, x1
-	bne	.L1035
-	ldr	x0, [x26, 4016]
-	mov	w1, w24
-	mov	w2, 0
-	str	w4, [x29, 128]
-	str	w3, [x29, 136]
-	ubfiz	x24, x24, 5, 16
-	add	x24, x24, 16
-	bl	FlashReadPages
-	ldr	x1, [x26, 4016]
-	add	x2, x21, :lo12:.LANCHOR3
-	ldr	w4, [x29, 128]
-	ldr	w3, [x29, 136]
-	add	x0, x1, 16
-	add	x24, x1, x24
-.L1036:
-	cmp	x24, x0
-	bne	.L1039
-	add	w25, w25, 1
-	and	w25, w25, 65535
-	b	.L1033
-.L1039:
-	ldr	w1, [x0, -16]
-	cbnz	w1, .L1030
-	ldr	x1, [x0]
-	ldrh	w5, [x1]
-	cmp	w5, w4
-	beq	.L1038
-	ldr	w1, [x1, 4]
-	cmn	w1, #1
-	beq	.L1038
-	str	w1, [x2, -36]
-.L1038:
-	add	x0, x0, 32
-	b	.L1036
-.L1040:
-	add	x0, x21, :lo12:.LANCHOR3
-	mov	w1, -1
-	str	w1, [x0, -36]
-.L1030:
-	add	x21, x21, :lo12:.LANCHOR3
-	mov	w0, 1
-	mov	w25, w27
-	add	x20, x20, :lo12:.LANCHOR0
-	strh	w0, [x21, -32]
-	sub	x0, x21, #192
-	bl	FtlMapBlkWriteDump_data
-	sub	x0, x21, #24
-	str	x0, [x29, 112]
-.L1042:
-	ldrh	w0, [x20, 36]
+	bl	sftl_printk
+.L912:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x22, 2416]
+	sub	w0, w0, #1
+	strh	w0, [x22, 2416]
+	mov	w0, w19
+	bl	INSERT_DATA_LIST
+	ldr	x1, [x22, 2376]
+	ldrh	w0, [x1, x20]
+	add	w0, w0, 1
+	strh	w0, [x1, x20]
+.L909:
+	add	x1, x29, 76
+	mov	w2, 1
+	mov	w0, w21
+	bl	log2phys
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldr	x23, [sp, 48]
+	ldp	x29, x30, [sp], 80
+	ret
+.L911:
+	umull	x19, w19, w4
+	ldrh	w19, [x2, x19]
+	cmp	w19, w5
+	beq	.L909
+	add	w1, w1, 1
+	and	w1, w1, 65535
+	b	.L910
+.L908:
+	add	w1, w1, 1
+	strh	w1, [x3, x20]
+	b	.L909
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	2
+	.global	ftl_check_vpc
+	.type	ftl_check_vpc, %function
+ftl_check_vpc:
+	stp	x29, x30, [sp, -128]!
+	adrp	x0, .LC95
+	add	x0, x0, :lo12:.LC95
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x20, .LANCHOR0
+	stp	x23, x24, [sp, 48]
+	add	x24, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	mov	w23, 0
+	adrp	x21, .LANCHOR1
+	add	x1, x21, :lo12:.LANCHOR1
+	add	x1, x1, 464
+	stp	x25, x26, [sp, 64]
+	stp	x27, x28, [sp, 80]
+	adrp	x22, check_vpc_table
+	bl	sftl_printk
+	add	x19, x22, :lo12:check_vpc_table
+	mov	w2, 8192
+	mov	w1, 0
+	mov	x0, x19
+	bl	ftl_memset
+.L919:
+	ldr	w0, [x24, 2584]
+	cmp	w23, w0
+	bcc	.L921
+	adrp	x25, .LC96
+	add	x23, x20, :lo12:.LANCHOR0
+	add	x26, x22, :lo12:check_vpc_table
+	add	x25, x25, :lo12:.LC96
 	mov	w24, 0
-	ldr	x1, [x29, 144]
+	mov	w19, 0
 	mov	w4, 65535
-	add	x0, x0, 8
-	add	x0, x19, x0, lsl 1
-.L1043:
-	cmp	x0, x1
-	bne	.L1045
-	ldr	x0, [x20, 4016]
-	mov	w1, w24
-	mov	w2, 0
-	bl	FlashReadPages
-	ubfiz	x0, x24, 5, 16
-	str	x0, [x29, 120]
-	adrp	x0, .LANCHOR1
-	add	x0, x0, :lo12:.LANCHOR1
-	add	x0, x0, 496
-	mov	x24, 0
-	str	x0, [x29, 128]
-.L1046:
-	ldr	x0, [x29, 120]
-	cmp	x0, x24
-	bne	.L1073
-	add	w25, w25, 1
-	ldrh	w0, [x20, 106]
-	and	w25, w25, 65535
-	cmp	w0, w25
-	bne	.L1042
-	ldrh	w1, [x20, 36]
-	mov	w0, 0
-	strh	w25, [x19, 2]
-	mov	w2, 65535
-	strh	wzr, [x19, 4]
-.L1074:
-	cmp	w0, w1
-	beq	.L1126
-	ldr	x4, [x29, 144]
-	ldrh	w3, [x4], 2
-	str	x4, [x29, 144]
-	cmp	w3, w2
-	beq	.L1075
-	strb	w0, [x19, 6]
-	b	.L1126
-.L1045:
-	ldrh	w2, [x1]
-	cmp	w2, w4
-	beq	.L1044
-	ldr	x3, [x20, 4016]
-	ubfiz	x5, x24, 5, 16
-	add	w24, w24, 1
-	orr	w2, w25, w2, lsl 10
-	add	x3, x3, x5
-	and	w24, w24, 65535
-	str	w2, [x3, 4]
-.L1044:
-	add	x1, x1, 2
-	b	.L1043
-.L1073:
-	ldr	x4, [x20, 4016]
-	add	x4, x4, x24
-	ldr	w5, [x4, 4]
-	str	w5, [x29, 172]
-	lsr	w0, w5, 10
-	bl	P2V_plane
-	and	w0, w0, 65535
-	cmp	w25, w27
-	bcc	.L1047
-	ldr	w1, [x29, 156]
-	ccmp	w1, w0, 0, eq
-	bhi	.L1047
-	cmp	w25, w23
-	ccmp	w28, w0, 0, eq
-	beq	.L1048
-	ldr	w0, [x4]
-	cmn	w0, #1
-	beq	.L1049
-	ldr	x3, [x4, 16]
-	mov	w0, 61589
-	ldrh	w1, [x3]
-	cmp	w1, w0
-	beq	.L1050
-.L1057:
-	ldrh	w0, [x19]
-.L1131:
-	bl	decrement_vpc_count
-.L1047:
-	add	x24, x24, 32
-	b	.L1046
-.L1050:
-	ldr	w22, [x3, 4]
-	cmn	w22, #1
-	beq	.L1051
-	ldr	w1, [x20, 2624]
-	mov	w0, w22
-	str	x3, [x29, 136]
-	bl	ftl_cmp_data_ver
-	ldr	x3, [x29, 136]
-	cbz	w0, .L1051
-	add	w0, w22, 1
-	str	w0, [x20, 2624]
-.L1051:
-	ldrh	w1, [x3]
-	mov	w0, 61589
-	cmp	w1, w0
-	beq	.L1052
-	ldr	x1, [x29, 128]
-	mov	w2, 1905
-	str	x3, [x29, 136]
+.L922:
+	ldrh	w0, [x23, 44]
+	cmp	w0, w19
+	bhi	.L924
+	ldr	x19, [x23, 2408]
+	cbz	x19, .L925
+	ldr	x0, [x23, 2360]
+	adrp	x25, .LC97
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:check_vpc_table
+	sub	x19, x19, x0
+	mov	x0, -6148914691236517206
+	asr	x19, x19, 1
+	movk	x0, 0xaaab, lsl 0
+	add	x25, x25, :lo12:.LC97
+	ldrh	w26, [x23, 2416]
+	mov	w27, 6
+	mov	w23, 0
+	mul	x19, x19, x0
+	and	w19, w19, 65535
+.L926:
+	cmp	w23, w26
+	bne	.L928
+.L925:
+	cbz	w24, .L918
+	add	x1, x21, :lo12:.LANCHOR1
 	adrp	x0, .LC1
+	mov	w2, 2343
+	add	x1, x1, 464
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	ldr	x3, [x29, 136]
-.L1052:
-	ldp	w26, w0, [x3, 8]
-	add	x1, x29, 168
-	str	w0, [x29, 164]
+	bl	sftl_printk
+.L918:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 128
+	ret
+.L921:
 	mov	w2, 0
-	mov	w0, w26
+	add	x1, x29, 124
+	mov	w0, w23
 	bl	log2phys
-	ldr	w1, [x21, -36]
-	cmn	w1, #1
-	beq	.L1053
-	mov	w0, w22
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1053
-	ldr	w1, [x29, 164]
-	cmn	w1, #1
-	beq	.L1054
-	ldr	x0, [x20, 4016]
-	mov	w2, 0
-	add	x0, x0, x24
-	ldr	x4, [x0, 16]
-	str	w1, [x0, 4]
-	mov	w1, 1
-	str	x4, [x29, 136]
-	ldr	x0, [x20, 4016]
-	add	x0, x0, x24
-	bl	FlashReadPages
-	ldr	x0, [x20, 4016]
-	ldr	x4, [x29, 136]
-	add	x3, x0, x24
-	ldr	w0, [x0, x24]
+	ldr	w0, [x29, 124]
 	cmn	w0, #1
-	bne	.L1055
-.L1056:
-	mov	w0, -1
-	str	w0, [x29, 164]
-	ldrh	w0, [x19]
-	bl	decrement_vpc_count
-.L1064:
-	ldr	w4, [x29, 164]
-	cmn	w4, #1
-	beq	.L1047
-.L1078:
-	lsr	w0, w4, 10
+	beq	.L920
+	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
-	and	w26, w0, 65535
-	ldrh	w0, [x20, 44]
-	mov	w3, w26
-	cmp	w0, w26
-	bhi	.L1069
-	ldr	x1, [x29, 128]
-	mov	w2, 2006
-	adrp	x0, .LC1
-	str	w26, [x29, 136]
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-	ldr	w3, [x29, 136]
-.L1069:
-	ldr	x1, [x20, 2376]
-	ubfiz	x0, x26, 1, 16
-	ldrh	w0, [x1, x0]
-	cbz	w0, .L1070
-	mov	w0, w3
-	b	.L1131
-.L1054:
-	ldp	w1, w0, [x29, 168]
+	and	x0, x0, 65535
+	ldrh	w1, [x19, x0, lsl 1]
+	add	w1, w1, 1
+	strh	w1, [x19, x0, lsl 1]
+.L920:
+	add	w23, w23, 1
+	b	.L919
+.L924:
+	ldr	x0, [x23, 2376]
+	ubfiz	x28, x19, 1, 16
+	sxtw	x27, w19
+	ldrh	w2, [x0, x28]
+	ldrh	w3, [x26, x27, lsl 1]
+	cmp	w2, w3
+	beq	.L923
+	mov	x0, x25
+	str	w4, [x29, 108]
+	mov	w1, w19
+	bl	sftl_printk
+	ldr	x0, [x23, 2376]
+	ldr	w4, [x29, 108]
+	ldrh	w0, [x0, x28]
+	cmp	w0, w4
+	beq	.L923
+	ldrh	w1, [x26, x27, lsl 1]
 	cmp	w1, w0
-	bne	.L1057
-	mov	w2, 1
-	add	x1, x29, 164
-	mov	w0, w26
-	bl	log2phys
-	b	.L1057
-.L1055:
-	ldr	w0, [x4, 8]
-	cmp	w26, w0
-	bne	.L1056
-	ldr	w0, [x4, 4]
-	str	w0, [x29, 136]
-	str	x4, [x29, 104]
-	uxtw	x1, w0
-	ldr	w0, [x21, -36]
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1056
-	ldp	w0, w1, [x29, 168]
-	ldr	x4, [x29, 104]
-	cmp	w0, w1
-	ldr	w1, [x29, 164]
-	bne	.L1059
-.L1129:
-	mov	w0, w26
-	bl	FtlReUsePrevPpa
-	b	.L1056
-.L1059:
-	cmp	w0, w1
-	beq	.L1056
-	cmn	w0, #1
-	beq	.L1060
-	ldr	x4, [x3, 16]
-	mov	w2, 0
-	str	w0, [x3, 4]
-	mov	w1, 1
-	str	x4, [x29, 104]
-	ldr	x0, [x20, 4016]
-	add	x0, x0, x24
-	bl	FlashReadPages
-	ldr	x4, [x29, 104]
-.L1061:
-	adrp	x0, .LANCHOR0+4016
-	ldr	x0, [x0, #:lo12:.LANCHOR0+4016]
-	ldr	w0, [x0, x24]
-	cmn	w0, #1
-	beq	.L1062
-	ldr	w3, [x4, 4]
-	ldr	w0, [x21, -36]
-	mov	w1, w3
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1062
-	ldr	w0, [x29, 136]
-	mov	w1, w3
-	bl	ftl_cmp_data_ver
-	cbz	w0, .L1056
-.L1062:
-	ldr	w1, [x29, 164]
-	b	.L1129
-.L1060:
-	str	w0, [x3]
-	b	.L1061
-.L1053:
-	ldp	w1, w0, [x29, 168]
-	cmp	w1, w0
-	beq	.L1064
-	mov	w2, 1
-	add	x1, x29, 172
-	mov	w0, w26
-	bl	log2phys
-	ldr	w4, [x29, 168]
-	cmn	w4, #1
-	beq	.L1064
-	ldr	w0, [x29, 164]
-	cmp	w4, w0
-	beq	.L1078
-	lsr	w0, w4, 10
-	bl	P2V_block_in_plane
-	ldrh	w1, [x20, 2424]
-	and	w0, w0, 65535
-	cmp	w1, w0
-	beq	.L1068
-	ldrh	w1, [x20, 2472]
-	cmp	w1, w0
-	beq	.L1068
-	ldrh	w1, [x20, 2520]
-	cmp	w1, w0
-	bne	.L1064
-.L1068:
-	ldr	x0, [x20, 4016]
+	csinc	w24, w24, wzr, ls
+.L923:
+	add	w19, w19, 1
+	and	w19, w19, 65535
+	b	.L922
+.L928:
+	ldr	x1, [x20, 2376]
+	ubfiz	x0, x19, 1, 16
+	ldrh	w2, [x1, x0]
+	cbz	w2, .L927
+	ldrh	w3, [x22, w19, sxtw 1]
+	mov	w24, 1
+	mov	w1, w19
+	mov	x0, x25
+	bl	sftl_printk
+.L927:
+	ldr	x0, [x20, 2360]
+	umull	x19, w19, w27
+	ldrh	w19, [x0, x19]
+	mov	w0, 65535
+	cmp	w19, w0
+	beq	.L925
+	add	w23, w23, 1
+	and	w23, w23, 65535
+	b	.L926
+	.size	ftl_check_vpc, .-ftl_check_vpc
+	.align	2
+	.global	ftl_scan_all_data
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
+	sub	sp, sp, #96
+	adrp	x0, .LC98
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC98
+	stp	x29, x30, [sp, 16]
+	add	x29, sp, 16
+	stp	x21, x22, [sp, 48]
+	adrp	x22, .LANCHOR0
+	add	x21, x22, :lo12:.LANCHOR0
+	stp	x19, x20, [sp, 32]
+	str	x23, [sp, 64]
+	mov	w20, 0
+	add	x19, x21, 3712
+	bl	sftl_printk
+.L944:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w0, [x0, 2584]
+	cmp	w20, w0
+	bcc	.L950
+	ldp	x19, x20, [sp, 32]
+	ldp	x21, x22, [sp, 48]
+	ldp	x29, x30, [sp, 16]
+	ldr	x23, [sp, 64]
+	add	sp, sp, 96
+	ret
+.L950:
 	mov	w2, 0
-	mov	w1, 1
-	str	w4, [x0, 4]
-	ldr	x3, [x0, 16]
-	ldr	x0, [x20, 4016]
-	str	x3, [x29, 136]
-	bl	FlashReadPages
-	ldr	x0, [x20, 4016]
-	ldr	w0, [x0]
-	cmn	w0, #1
-	beq	.L1064
-	ldr	x3, [x29, 136]
-	mov	w0, w22
-	ldr	w1, [x3, 4]
-	bl	ftl_cmp_data_ver
-	cbnz	w0, .L1064
-	mov	w2, 1
-	add	x1, x29, 168
-	mov	w0, w26
+	add	x1, x29, 76
+	mov	w0, w20
 	bl	log2phys
-	b	.L1064
-.L1070:
-	mov	w1, w26
+	tst	x20, 2047
+	bne	.L945
+	ldr	w2, [x29, 76]
 	adrp	x0, .LC99
+	mov	w1, w20
 	add	x0, x0, :lo12:.LC99
-	bl	printk
-	b	.L1047
-.L1049:
-	ldr	w0, [x21, -28]
-	cmp	w0, 31
-	bhi	.L1071
-	ldr	x1, [x29, 112]
-	str	w5, [x1, w0, uxtw 2]
-	add	w0, w0, 1
-	str	w0, [x21, -28]
-.L1071:
-	ldrh	w0, [x19]
-	bl	decrement_vpc_count
-	ldr	w0, [x21, -36]
-	cmn	w0, #1
-	bne	.L1072
-.L1130:
-	str	w22, [x21, -36]
-	b	.L1047
-.L1072:
-	cmp	w22, w0
-	bcs	.L1047
-	b	.L1130
-.L1075:
-	add	w0, w0, 1
-	and	w0, w0, 65535
-	b	.L1074
-.L1048:
-	strb	w28, [x19, 6]
-	strh	w23, [x19, 2]
-	b	.L1133
-	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
-	.align	2
-	.global	FtlSuperblockPowerLostFix
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
-	stp	x29, x30, [sp, -96]!
-	adrp	x2, .LANCHOR0
-	mov	w3, 61589
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	mov	x19, x0
-	mov	w0, -1
-	stp	x21, x22, [sp, 32]
-	str	w0, [x29, 88]
-	add	x0, x2, :lo12:.LANCHOR0
-	str	x23, [sp, 48]
-	mov	x20, x0
-	mov	x23, x2
-	mov	w22, 7
-	ldr	x21, [x0, 3440]
-	ldr	x1, [x0, 3432]
-	stp	x1, x21, [x29, 72]
-	mov	w1, -3
-	str	w1, [x21, 8]
-	mov	w1, -2
-	str	w1, [x21, 12]
-	ldrh	w1, [x19]
-	strh	w1, [x21, 2]
-	strh	wzr, [x21]
-	ldr	x1, [x0, 3432]
-	str	w3, [x1]
-	mov	w3, 22136
-	movk	w3, 0x1234, lsl 16
-	ldr	x1, [x0, 3432]
-	str	w3, [x1, 4]
-.L1135:
-	subs	w22, w22, #1
-	beq	.L1137
-	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1136
-.L1137:
-	add	x2, x23, :lo12:.LANCHOR0
-	ldrh	w0, [x19]
-	ldrh	w4, [x19, 4]
-	ldr	x3, [x2, 2376]
-	lsl	x0, x0, 1
-	ldrh	w1, [x3, x0]
-	sub	w1, w1, w4
-	strh	w1, [x3, x0]
-	strb	wzr, [x19, 6]
-	ldrh	w0, [x2, 106]
-	strh	w0, [x19, 2]
-	strh	wzr, [x19, 4]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldr	x23, [sp, 48]
-	ldp	x29, x30, [sp], 96
-	ret
-.L1136:
-	mov	x0, x19
-	bl	get_new_active_ppa
-	str	w0, [x29, 68]
+	bl	sftl_printk
+.L945:
+	ldr	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L1137
-	ldr	w0, [x20, 2624]
-	mov	w3, 0
-	str	w0, [x21, 4]
+	beq	.L947
+	ldr	x23, [x21, 3512]
 	mov	w2, 0
-	add	w0, w0, 1
+	stp	wzr, w0, [x19]
 	mov	w1, 1
-	cmn	w0, #1
-	csel	w0, w0, wzr, ne
-	str	w0, [x20, 2624]
-	add	x0, x29, 64
-	bl	FlashProgPages
-	ldrh	w0, [x19]
-	bl	decrement_vpc_count
-	b	.L1135
-	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	ldr	x0, [x21, 3448]
+	str	x0, [x19, 8]
+	mov	x0, x19
+	str	x23, [x19, 16]
+	str	w20, [x19, 24]
+	bl	FlashReadPages
+	ldr	w0, [x19]
+	cmp	w0, 256
+	ccmn	w0, #1, 4, ne
+	beq	.L948
+	ldr	w0, [x23, 8]
+	cmp	w20, w0
+	beq	.L947
+.L948:
+	ldp	x1, x0, [x19, 8]
+	ldr	w2, [x1, 4]
+	str	w2, [sp]
+	ldp	w3, w4, [x0]
+	ldp	w5, w6, [x0, 8]
+	adrp	x0, .LC100
+	ldr	w7, [x1]
+	add	x0, x0, :lo12:.LC100
+	ldr	w2, [x19, 4]
+	mov	w1, w20
+	bl	sftl_printk
+.L947:
+	add	w20, w20, 1
+	b	.L944
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
 	.align	2
-	.global	FtlLoadBbt
-	.type	FtlLoadBbt, %function
-FtlLoadBbt:
-	stp	x29, x30, [sp, -64]!
+	.global	FtlGcScanTempBlk
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	stp	x29, x30, [sp, -160]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
+	mov	x19, x0
 	stp	x23, x24, [sp, 48]
-	add	x23, x19, :lo12:.LANCHOR0
+	adrp	x23, .LANCHOR2
+	add	x0, x23, :lo12:.LANCHOR2
+	stp	x25, x26, [sp, 64]
 	stp	x21, x22, [sp, 32]
-	add	x21, x23, 3400
-	mov	w24, 61649
-	ldr	x0, [x23, 3432]
-	ldr	x22, [x23, 3440]
-	stp	x0, x22, [x21, 8]
-	bl	FtlBbtMemInit
-	ldrh	w20, [x23, 102]
-	sub	w20, w20, #1
-	and	w20, w20, 65535
-.L1147:
-	ldrh	w0, [x23, 102]
-	sub	w0, w0, #16
-	cmp	w20, w0
-	ble	.L1150
-	lsl	w0, w20, 10
-	mov	w2, 1
-	str	w0, [x21, 4]
-	mov	w1, w2
-	mov	x0, x21
-	bl	FlashReadPages
-	ldr	w0, [x21]
-	cmn	w0, #1
-	bne	.L1148
-	ldr	w0, [x21, 4]
-	mov	w2, 1
-	mov	w1, w2
-	add	w0, w0, 1
-	str	w0, [x21, 4]
-	mov	x0, x21
-	bl	FlashReadPages
-.L1148:
-	ldr	w0, [x21]
-	cmn	w0, #1
-	beq	.L1149
-	ldrh	w0, [x22]
-	cmp	w0, w24
-	bne	.L1149
-	ldr	w1, [x22, 4]
-	str	w1, [x23, 168]
-	strh	w20, [x23, 160]
-	ldrh	w1, [x22, 8]
-	strh	w1, [x23, 164]
-.L1150:
-	add	x21, x19, :lo12:.LANCHOR0
+	mov	w25, w1
+	stp	x27, x28, [sp, 80]
+	ldrh	w21, [x0, 4]
 	mov	w0, 65535
-	ldrh	w1, [x21, 160]
-	cmp	w1, w0
-	beq	.L1164
-	ldrh	w1, [x21, 164]
+	cmp	w21, w0
+	beq	.L975
+	cbnz	w21, .L953
+.L954:
+	bl	FtlGcPageVarInit
+	b	.L955
+.L975:
+	mov	w21, 0
+.L953:
+	adrp	x0, .LANCHOR0+106
+	ldrh	w0, [x0, #:lo12:.LANCHOR0+106]
+	cmp	w0, w25
+	beq	.L954
+.L955:
+	adrp	x26, .LANCHOR0
+	add	x20, x26, :lo12:.LANCHOR0
+	mov	w24, 0
+.L956:
+	ldrh	w1, [x19]
+	mov	w0, 65535
+	strb	wzr, [x19, 8]
 	cmp	w1, w0
-	beq	.L1154
-	add	x0, x21, 3400
-	lsl	w1, w1, 10
-	mov	w2, 1
-	str	w1, [x0, 4]
-	mov	w1, w2
+	beq	.L957
+.L972:
+	add	x0, x26, :lo12:.LANCHOR0
+	add	x2, x19, 16
+	mov	w22, 0
+	mov	w9, 65535
+	mov	w5, 4
+	ldrh	w7, [x0, 114]
+	ldrh	w8, [x0, 116]
+	ldrh	w0, [x0, 36]
+	add	x0, x0, 8
+	add	x0, x19, x0, lsl 1
+.L958:
+	cmp	x0, x2
+	bne	.L960
+	ldr	x0, [x20, 3424]
+	mov	w1, w22
+	mov	w2, 0
+	ubfiz	x22, x22, 5, 16
+	mov	x27, 0
 	bl	FlashReadPages
-	ldr	w0, [x21, 3400]
-	cmn	w0, #1
-	beq	.L1154
-	ldrh	w1, [x22]
-	mov	w0, 61649
-	cmp	w1, w0
-	bne	.L1154
-	ldr	w1, [x21, 168]
-	ldr	w0, [x22, 4]
+.L961:
+	cmp	x27, x22
+	bne	.L970
+	add	w21, w21, 1
+	add	w24, w24, 1
+	and	w21, w21, 65535
+	cmp	w25, w24
+	bls	.L971
+.L973:
+	ldrh	w0, [x20, 106]
+	cmp	w0, w21
+	bhi	.L972
+.L957:
+	add	x23, x23, :lo12:.LANCHOR2
+	strh	w21, [x19, 2]
+	strb	wzr, [x19, 6]
+	mov	w0, -1
+	mov	w2, 0
+	mov	w1, w21
+	strh	w0, [x23, 4]
+	mov	x0, x19
+	bl	ftl_sb_update_avl_pages
+	b	.L974
+.L960:
+	ldrh	w1, [x2]
+	cmp	w1, w9
+	beq	.L959
+	ldr	x4, [x20, 3424]
+	ubfiz	x6, x22, 5, 16
+	orr	w1, w21, w1, lsl 10
+	add	x4, x4, x6
+	str	w1, [x4, 4]
+	mul	w1, w22, w7
+	ldr	x3, [x20, 3424]
+	ldr	x4, [x20, 3264]
+	sdiv	w1, w1, w5
+	add	x3, x3, x6
+	add	x1, x4, x1, sxtw 2
+	str	x1, [x3, 8]
+	mul	w1, w22, w8
+	ldr	x4, [x20, 3272]
+	add	w22, w22, 1
+	and	w22, w22, 65535
+	sdiv	w1, w1, w5
+	add	x1, x4, x1, sxtw 2
+	str	x1, [x3, 16]
+.L959:
+	add	x2, x2, 2
+	b	.L958
+.L970:
+	ldr	x1, [x20, 3424]
+	add	x0, x1, x27
+	ldr	w1, [x1, x27]
+	ldr	w2, [x0, 4]
+	str	w2, [x29, 108]
+	cbnz	w1, .L962
+	ldr	x28, [x0, 16]
+	mov	w1, 65535
+	ldrh	w0, [x28]
 	cmp	w0, w1
-	bls	.L1154
-	str	w0, [x21, 168]
-	ldrh	w1, [x21, 164]
-	ldrh	w0, [x22, 8]
-	strh	w1, [x21, 160]
-	strh	w0, [x21, 164]
-.L1154:
-	add	x20, x19, :lo12:.LANCHOR0
+	bne	.L963
+.L962:
+	ldrh	w1, [x19]
+	mov	w21, 0
+	ldr	x0, [x20, 2376]
+	strh	wzr, [x0, x1, lsl 1]
+	ldrh	w0, [x19]
+	bl	INSERT_FREE_LIST
+	mov	w0, -1
+	strh	w0, [x19]
+	bl	FtlGcPageVarInit
+	b	.L956
+.L963:
+	ldr	w0, [x28, 8]
+	add	x1, x29, 124
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x28, 12]
+	ldr	w1, [x29, 124]
+	cmp	w0, w1
+	beq	.L965
+.L968:
+	ldp	w2, w0, [x28, 8]
+	add	x27, x27, 32
+	ldr	w1, [x29, 108]
+	bl	FtlGcUpdatePage
+	b	.L961
+.L965:
+	str	w0, [x29, 132]
+	mov	w2, 0
+	ldr	x0, [x20, 3480]
 	mov	w1, 1
-	add	x23, x20, 3400
-	mov	w24, 61649
-	ldrh	w0, [x20, 160]
-	bl	FtlGetLastWrittenPage
-	sxth	w21, w0
-	add	w0, w0, 1
-	strh	w0, [x20, 162]
-.L1156:
-	tbz	w21, #31, .L1159
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 254
-	add	x1, x1, 520
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1158:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x22, 10]
+	str	x0, [x29, 136]
+	ldr	x0, [x20, 3520]
+	str	x0, [x29, 144]
+	add	x0, x29, 128
+	bl	FlashReadPages
+	ldrh	w1, [x20, 62]
+	mov	x0, 0
+	ldr	x2, [x20, 3424]
+	ldr	x5, [x29, 136]
+	ubfiz	x1, x1, 9, 16
+	add	x2, x2, x27
+.L966:
+	cmp	x0, x1
+	beq	.L968
+	ldr	x6, [x2, 8]
+	ldr	w7, [x6, x0]
+	add	x0, x0, 4
+	add	x6, x5, x0
+	ldr	w6, [x6, -4]
+	cmp	w7, w6
+	beq	.L966
+	ldrh	w1, [x19]
+	adrp	x0, .LC101
+	ldr	w2, [x29, 132]
+	add	x0, x0, :lo12:.LC101
+	bl	sftl_printk
+	b	.L962
+.L971:
+	add	x1, x23, :lo12:.LANCHOR2
 	mov	w2, 65535
-	strh	w0, [x1, 166]
-	ldrh	w0, [x22, 12]
-	cmp	w0, w2
-	beq	.L1161
-	ldr	w2, [x1, 32]
+	ldrh	w0, [x1, 4]
 	cmp	w0, w2
-	beq	.L1161
-	ldrh	w1, [x1, 46]
-	lsr	w1, w1, 2
-	cmp	w2, w1
-	bcs	.L1161
-	cmp	w0, w1
-	bcs	.L1161
-	bl	FtlSysBlkNumInit
-.L1161:
-	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x21, .LANCHOR3
-	add	x22, x19, 192
-	add	x21, x21, :lo12:.LANCHOR3
-	mov	w20, 0
-.L1162:
-	ldrh	w0, [x19, 58]
-	cmp	w20, w0
-	bcc	.L1163
-	mov	w0, 0
-.L1146:
+	beq	.L973
+	add	w0, w0, w24
+	strh	w0, [x1, 4]
+	ldrh	w0, [x20, 106]
+	cmp	w0, w21
+	bls	.L973
+.L974:
 	ldp	x19, x20, [sp, 16]
+	mov	w0, -1
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 64
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 160
 	ret
-.L1149:
-	sub	w20, w20, #1
-	and	w20, w20, 65535
-	b	.L1147
-.L1159:
-	ldrh	w0, [x20, 160]
-	mov	w2, 1
-	mov	w1, w2
-	orr	w0, w21, w0, lsl 10
-	str	w0, [x23, 4]
-	ldr	x0, [x20, 3432]
-	str	x0, [x23, 8]
-	mov	x0, x23
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	2
+	.global	FtlReadRefresh
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	adrp	x1, .LANCHOR0
+	add	x0, x1, :lo12:.LANCHOR0
+	add	x2, x0, 2720
+	ldr	w3, [x2, 80]
+	cbz	w3, .L983
+	ldr	w1, [x0, 2584]
+	ldr	w3, [x2, 84]
+	cmp	w3, w1
+	bcs	.L984
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x19, x0
+	mov	w20, 2048
+	str	x21, [sp, 32]
+.L989:
+	ldr	w1, [x19, 2584]
+	ldr	w0, [x19, 2804]
+	cmp	w0, w1
+	bcs	.L986
+	add	x1, x29, 60
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x19, 2804]
+	ldr	w1, [x29, 60]
+	add	w0, w0, 1
+	str	w0, [x19, 2804]
+	cmn	w1, #1
+	beq	.L987
+	str	w0, [x29, 88]
+	mov	w2, 0
+	ldr	x0, [x19, 3496]
+	str	x0, [x29, 72]
+	add	x0, x29, 96
+	str	x0, [x29, 80]
+	add	x0, x29, 160
+	str	w1, [x29, 68]
+	mov	w1, 1
+	str	wzr, [x0, -96]!
 	bl	FlashReadPages
-	ldr	w0, [x23]
-	cmn	w0, #1
-	beq	.L1157
-	ldrh	w0, [x22]
-	cmp	w0, w24
-	beq	.L1158
-.L1157:
-	sub	w21, w21, #1
-	sxth	w21, w21
-	b	.L1156
-.L1163:
-	ldrh	w2, [x21, -200]
-	ldr	x0, [x19, 3408]
-	mul	w1, w2, w20
-	lsl	w2, w2, 2
-	add	w20, w20, 1
-	add	x1, x0, x1, lsl 2
-	ldr	x0, [x22], 8
-	bl	ftl_memcpy
-	b	.L1162
-.L1164:
+	ldr	w0, [x29, 64]
+	cmp	w0, 256
+	bne	.L986
+	ldr	w0, [x29, 60]
+	lsr	w0, w0, 10
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L986:
+	ldp	x19, x20, [sp, 16]
 	mov	w0, -1
-	b	.L1146
-	.size	FtlLoadBbt, .-FtlLoadBbt
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 160
+	ret
+.L987:
+	subs	w20, w20, #1
+	bne	.L989
+	b	.L986
+.L984:
+	ldr	w0, [x0, 2588]
+	stp	w0, wzr, [x2, 76]
+	str	wzr, [x2, 84]
+.L993:
+	mov	w0, 0
+	ret
+.L983:
+	ldr	w3, [x0, 2588]
+	ldr	w5, [x2, 76]
+	add	w2, w3, 1048576
+	cmp	w5, w2
+	bhi	.L992
+	ldr	w2, [x0, 2644]
+	lsr	w4, w2, 10
+	mov	w2, 33554432
+	asr	w2, w2, w4
+	add	w2, w2, w5
+	cmp	w3, w2
+	bhi	.L992
+	ldrb	w0, [x0, 2340]
+	cbnz	w0, .L993
+.L992:
+	add	x0, x1, :lo12:.LANCHOR0
+	mov	w1, 1
+	str	w3, [x0, 2796]
+	str	w1, [x0, 2800]
+	str	wzr, [x0, 2804]
+	b	.L993
+	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
-	.global	FtlMakeBbt
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
-	stp	x29, x30, [sp, -96]!
+	.global	FtlMapBlkWriteDump_data
+	.type	FtlMapBlkWriteDump_data, %function
+FtlMapBlkWriteDump_data:
+	ldr	w1, [x0, 56]
+	cbz	w1, .L1007
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	add	x2, x1, :lo12:.LANCHOR0
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x19, .LANCHOR0
-	stp	x25, x26, [sp, 64]
-	stp	x21, x22, [sp, 32]
-	mov	x21, x19
-	stp	x23, x24, [sp, 48]
-	mov	w24, 0
-	stp	x27, x28, [sp, 80]
-	bl	FtlBbtMemInit
-	bl	FtlLoadFactoryBbt
-	adrp	x28, .LANCHOR3
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x28, x28, :lo12:.LANCHOR3
-	add	x26, x0, 192
-	add	x25, x0, 172
 	mov	x19, x0
-	add	x20, x0, 3400
-.L1177:
-	ldrh	w0, [x19, 58]
-	cmp	w24, w0
-	bcc	.L1183
-	add	x20, x21, :lo12:.LANCHOR0
-	mov	w19, 0
-.L1184:
-	ldrh	w0, [x20, 118]
-	cmp	w0, w19
-	bhi	.L1185
-	add	x20, x20, 160
-	ldrh	w19, [x20, 12]
-	mov	w22, 65535
-	sub	w19, w19, #1
-	and	w19, w19, 65535
-.L1186:
-	ldrh	w0, [x20, 12]
-	sub	w0, w0, #48
-	cmp	w19, w0
-	ble	.L1190
-	mov	w0, w19
-	bl	FtlBbmIsBadBlock
-	cmp	w0, 1
-	beq	.L1187
-	mov	w0, w19
-	bl	FlashTestBlk
-	cbz	w0, .L1188
-	mov	w0, w19
-	bl	FtlBbmMapBadBlock
-.L1187:
-	sub	w19, w19, #1
-	and	w19, w19, 65535
-	b	.L1186
-.L1183:
-	ldr	x0, [x19, 3432]
-	mov	w2, 65535
-	ldr	x27, [x19, 3440]
-	ldrh	w1, [x25]
-	stp	x0, x27, [x20, 8]
-	cmp	w1, w2
-	beq	.L1178
-	ldrh	w23, [x19, 102]
+	str	x21, [sp, 32]
+	add	x0, x2, 3712
+	mov	x21, x1
+	ldrh	w20, [x19, 6]
+	ldr	x4, [x2, 3512]
+	sub	w20, w20, #1
+	ldr	x3, [x2, 3456]
+	and	w20, w20, 65535
+	ldr	x5, [x19, 40]
+	stp	x3, x4, [x0, 8]
+	ubfiz	x4, x20, 2, 16
+	str	wzr, [x19, 56]
+	ldr	w4, [x5, x4]
+	str	w4, [x0, 4]
+	cbz	w4, .L1001
 	mov	w2, 1
-	madd	w23, w23, w24, w1
 	mov	w1, w2
-	lsl	w0, w23, 10
-	str	w0, [x20, 4]
-	mov	x0, x20
 	bl	FlashReadPages
-	ldr	x1, [x20, 8]
-	ldr	x0, [x26]
-	ldrh	w2, [x19, 102]
-	add	w2, w2, 7
-	lsr	w2, w2, 3
-	bl	ftl_memcpy
-.L1179:
-	mov	w0, w23
-	add	w24, w24, 1
-	bl	FtlBbmMapBadBlock
-	add	x26, x26, 8
-	add	x25, x25, 2
-	b	.L1177
-.L1178:
-	mov	w1, w24
-	bl	FlashGetBadBlockList
-	ldr	x0, [x20, 8]
-	ldr	x1, [x26]
-	bl	FtlBbt2Bitmap
-	ldrh	w22, [x19, 102]
-.L1181:
-	sub	w22, w22, #1
-	and	w22, w22, 65535
-.L1180:
-	ldrh	w0, [x19, 102]
-	madd	w0, w24, w0, w22
-	bl	FtlBbmIsBadBlock
-	cmp	w0, 1
-	beq	.L1181
-	ldr	x0, [x19, 3440]
-	mov	w2, 16
-	strh	w22, [x25]
-	mov	w1, 0
+.L1002:
+	add	x1, x21, :lo12:.LANCHOR0
+	mov	x0, x19
+	ldr	x2, [x1, 3720]
+	mov	w1, w20
+	bl	FtlMapWritePage
+	ldr	x21, [sp, 32]
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 48
+	ret
+.L1001:
+	ldrh	w2, [x2, 114]
+	mov	w1, 255
+	mov	x0, x3
 	bl	ftl_memset
-	ldr	x0, [x19, 3432]
-	mov	w2, 4096
-	mov	w1, 0
+	b	.L1002
+.L1007:
+	ret
+	.size	FtlMapBlkWriteDump_data, .-FtlMapBlkWriteDump_data
+	.align	2
+	.global	FlashTestBlk
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	and	w19, w0, 65535
+	cmp	w19, 11
+	bls	.L1012
+	adrp	x20, .LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w2, 32
+	mov	w1, 165
+	lsl	w19, w19, 10
+	ldr	x0, [x20, 3496]
+	str	x0, [x29, 40]
+	add	x0, x29, 64
+	str	x0, [x29, 48]
 	bl	ftl_memset
-	str	wzr, [x27, 4]
-	mov	w0, -3872
-	strh	w0, [x27]
-	ldrh	w0, [x25]
-	strh	w0, [x27, 2]
-	ldrh	w23, [x19, 102]
-	ldrh	w0, [x25]
-	ldr	x1, [x26]
-	ldrh	w2, [x28, -200]
-	madd	w23, w23, w24, w0
-	lsl	w2, w2, 2
-	lsl	w0, w23, 10
-	str	w0, [x20, 4]
-	ldr	x0, [x20, 8]
-	bl	ftl_memcpy
+	ldr	x0, [x20, 3496]
+	mov	w2, 8
+	mov	w1, 90
+	bl	ftl_memset
+	str	w19, [x29, 36]
 	mov	w2, 1
-	mov	x0, x20
+	add	x0, x29, 32
 	mov	w1, w2
 	bl	FlashEraseBlocks
 	mov	w3, 1
-	mov	x0, x20
+	add	x0, x29, 32
 	mov	w2, w3
 	mov	w1, w3
 	bl	FlashProgPages
-	ldr	w0, [x20]
-	cmn	w0, #1
-	bne	.L1179
-	mov	w0, w23
-	bl	FtlBbmMapBadBlock
-	b	.L1180
-.L1185:
+	ldr	w0, [x29, 32]
+	mov	w2, 1
+	mov	w1, 0
+	cmp	w0, 0
+	add	x0, x29, 32
+	csetm	w19, ne
+	bl	FlashEraseBlocks
+.L1010:
 	mov	w0, w19
-	add	w19, w19, 1
-	bl	FtlBbmMapBadBlock
-	and	w19, w19, 65535
-	b	.L1184
-.L1188:
-	ldrh	w0, [x20]
-	cmp	w0, w22
-	bne	.L1189
-	strh	w19, [x20]
-	b	.L1187
-.L1189:
-	strh	w19, [x20, 4]
-.L1190:
-	add	x21, x21, :lo12:.LANCHOR0
-	mov	w2, 2
-	ldr	x1, [x21, 3960]
-	ldrh	w0, [x21, 160]
-	str	wzr, [x21, 168]
-	strh	wzr, [x21, 162]
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 128
+	ret
+.L1012:
+	mov	w19, 0
+	b	.L1010
+	.size	FlashTestBlk, .-FlashTestBlk
+	.align	2
+	.global	FtlBbmTblFlush
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
+	stp	x29, x30, [sp, -80]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	w19, 0
+	stp	x25, x26, [sp, 64]
+	adrp	x25, .LANCHOR0
+	add	x20, x25, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	stp	x23, x24, [sp, 48]
+	add	x21, x20, 192
+	ldr	x2, [x20, 3512]
+	ldr	x0, [x20, 3448]
+	str	x2, [x20, 3728]
+	ldrh	w2, [x20, 114]
+	str	x0, [x20, 3720]
+	bl	ftl_memset
+.L1015:
+	ldrh	w0, [x20, 58]
+	add	x1, x20, 3712
+	cmp	w19, w0
+	blt	.L1016
+	ldr	x26, [x1, 16]
+	add	x19, x20, 160
+	mov	w2, 16
+	mov	w1, 255
+	mov	x0, x26
+	bl	ftl_memset
+	mov	w0, -3887
+	adrp	x22, .LC102
+	strh	w0, [x26]
+	add	x25, x25, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LC102
+	mov	w21, 0
+	ldr	w0, [x19, 8]
+	mov	w23, 0
+	str	w0, [x26, 4]
+	adrp	x24, .LC103
+	ldrh	w0, [x20, 160]
+	strh	w0, [x26, 2]
+	ldrh	w0, [x19, 4]
+	strh	w0, [x26, 8]
+	ldrh	w0, [x19, 6]
+	strh	w0, [x26, 10]
+	ldr	w0, [x20, 32]
+	strh	w0, [x26, 12]
+.L1017:
+	ldr	x0, [x25, 3448]
+	str	x0, [x25, 3720]
+	ldr	x0, [x25, 3512]
+	str	x0, [x25, 3728]
+	ldrh	w1, [x19]
+	ldrh	w2, [x19, 2]
+	ldrh	w3, [x19, 4]
+	ldrh	w4, [x26, 10]
+	orr	w0, w2, w1, lsl 10
+	str	wzr, [x25, 3712]
+	str	w0, [x25, 3716]
+	mov	x0, x22
+	bl	sftl_printk
+	ldrh	w0, [x25, 108]
+	ldrh	w1, [x19, 2]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	blt	.L1018
+	ldr	w0, [x19, 8]
+	mov	w2, 1
+	ldrh	w1, [x19]
+	add	w0, w0, 1
+	str	w0, [x19, 8]
+	str	w0, [x26, 4]
+	strh	w1, [x26, 8]
+	ldrh	w0, [x19, 4]
+	strh	w1, [x19, 4]
+	ldr	x1, [x25, 3400]
+	strh	w0, [x19]
 	lsl	w0, w0, 10
+	str	w0, [x25, 3716]
+	strh	wzr, [x19, 2]
 	str	w0, [x1, 4]
-	ldr	x0, [x21, 3960]
-	ldrh	w1, [x21, 164]
-	lsl	w1, w1, 10
-	str	w1, [x0, 36]
-	mov	w1, 1
+	mov	w1, w2
+	ldr	x0, [x25, 3400]
 	bl	FlashEraseBlocks
-	ldrh	w0, [x21, 160]
-	bl	FtlBbmMapBadBlock
-	ldrh	w0, [x21, 164]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	strh	wzr, [x21, 162]
-	ldr	w0, [x21, 168]
-	ldrh	w1, [x21, 164]
+.L1018:
+	add	x20, x25, 3712
+	mov	w3, 1
+	mov	x0, x20
+	mov	w2, w3
+	mov	w1, w3
+	bl	FlashProgPages
+	ldrh	w0, [x19, 2]
 	add	w0, w0, 1
-	str	w0, [x21, 168]
-	ldrh	w0, [x21, 160]
-	strh	w0, [x21, 164]
-	strh	w1, [x21, 160]
-	bl	FtlBbmTblFlush
+	strh	w0, [x19, 2]
+	ldr	w0, [x25, 3712]
+	cmn	w0, #1
+	bne	.L1019
+	ldr	w1, [x25, 3716]
+	add	w21, w21, 1
+	add	x0, x24, :lo12:.LC103
+	and	w21, w21, 65535
+	bl	sftl_printk
+	cmp	w21, 3
+	bls	.L1017
+	ldr	w1, [x25, 3716]
+	adrp	x0, .LC104
+	mov	w2, w21
+	add	x0, x0, :lo12:.LC104
+	bl	sftl_printk
+.L1021:
+	b	.L1021
+.L1016:
+	ldrh	w2, [x20, 3624]
+	ldr	x0, [x1, 8]
+	ldr	x1, [x21], 8
+	mul	w3, w19, w2
+	lsl	w2, w2, 2
+	add	w19, w19, 1
+	add	x0, x0, x3, sxtw 2
+	bl	ftl_memcpy
+	b	.L1015
+.L1022:
+	mov	w23, 1
+	b	.L1017
+.L1019:
+	cbz	w23, .L1022
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
-	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 80
 	ret
-	.size	FtlMakeBbt, .-FtlMakeBbt
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
-	.global	FtlVendorPartWrite
-	.type	FtlVendorPartWrite, %function
-FtlVendorPartWrite:
-	stp	x29, x30, [sp, -208]!
+	.global	allocate_data_superblock
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
-	stp	x27, x28, [sp, 80]
-	mov	w27, w0
 	stp	x21, x22, [sp, 32]
-	adrp	x22, .LANCHOR0
-	stp	x23, x24, [sp, 48]
-	mov	x24, x2
-	add	w2, w0, w1
-	add	x0, x22, :lo12:.LANCHOR0
+	adrp	x21, .LANCHOR0
+	add	x22, x21, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
-	mov	w28, w1
+	stp	x23, x24, [sp, 48]
+	mov	x20, x0
+	mov	x19, x22
+	add	x23, x22, 2520
 	stp	x25, x26, [sp, 64]
-	ldrh	w1, [x0, 100]
-	cmp	w2, w1
-	bhi	.L1204
-	ldrh	w21, [x0, 112]
-	adrp	x26, .LANCHOR3
-	add	x25, x26, :lo12:.LANCHOR3
-	mov	w23, 0
-	sub	x25, x25, #120
-	lsr	w21, w27, w21
-.L1198:
-	cbnz	w28, .L1203
-.L1196:
-	mov	w0, w23
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
+	stp	x27, x28, [sp, 80]
+.L1025:
+	ldrh	w1, [x22, 2400]
+	ldrh	w0, [x22, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x22, 44]
+	cmp	w0, w1
+	ble	.L1026
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2615
+	add	x1, x1, 480
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1026:
+	cmp	x20, x23
+	bne	.L1052
+	ldrh	w0, [x19, 2416]
+	ldr	w1, [x19, 3244]
+	mul	w1, w0, w1
+	lsr	w0, w0, 1
+	add	w0, w0, 1
+	add	w1, w0, w1, lsr 2
+	ands	w1, w1, 65535
+	beq	.L1027
+	sub	w1, w1, #1
+	and	w1, w1, 65535
+.L1027:
+	add	x0, x19, 2408
+	bl	List_pop_index_node
+	and	w25, w0, 65535
+	ldrh	w0, [x19, 2416]
+	cbnz	w0, .L1028
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2624
+	add	x1, x1, 480
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1028:
+	ldrh	w0, [x19, 2416]
+	sub	w0, w0, #1
+	strh	w0, [x19, 2416]
+	ldrh	w0, [x19, 44]
+	cmp	w0, w25
+	bls	.L1025
+	ldr	x0, [x19, 2376]
+	ubfiz	x26, x25, 1, 16
+	ldrh	w24, [x0, x26]
+	cbnz	w24, .L1025
+	strh	w25, [x20]
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20, 7]
+	cbnz	w0, .L1030
+	ldr	x0, [x19, 2376]
+	mov	w1, -1
+	strh	w1, [x0, x26]
+	mov	w0, w25
+	bl	INSERT_DATA_LIST
+	ldrh	w1, [x19, 2400]
+	ldrh	w0, [x19, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x19, 44]
+	cmp	w0, w1
+	ble	.L1025
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 2638
+	add	x1, x1, 480
+	adrp	x0, .LC1
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+	b	.L1025
+.L1052:
+	mov	w1, 0
+	b	.L1027
+.L1030:
+	ldrh	w1, [x19, 2400]
+	ldrh	w0, [x19, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x19, 44]
+	cmp	w0, w1
+	ble	.L1032
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2641
+	add	x1, x1, 480
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1032:
+	add	x27, x20, 16
+	ldrh	w4, [x19, 36]
+	mov	x3, x27
+	mov	x0, 0
+	mov	w5, 65535
+.L1033:
+	cmp	w4, w0, uxth
+	bhi	.L1035
+	cbnz	w24, .L1036
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2652
+	add	x1, x1, 480
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1036:
+	ldrh	w0, [x19, 2672]
+	cmp	w0, w25
+	bne	.L1037
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2654
+	add	x1, x1, 480
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1037:
+	ldrb	w0, [x20, 8]
+	ldr	x1, [x19, 2384]
+	cbnz	w0, .L1038
+	ldrh	w0, [x1, x26]
+	cbz	w0, .L1039
+	ldrh	w2, [x19, 96]
+	add	w0, w0, w2
+.L1060:
+	strh	w0, [x1, x26]
+	mov	w1, 0
+	ldr	w0, [x19, 2628]
+	add	w0, w0, 1
+	str	w0, [x19, 2628]
+	mov	w0, w25
+	bl	ftl_set_blk_mode
+.L1041:
+	ldr	x0, [x19, 2384]
+	ldr	w1, [x19, 2644]
+	ldrh	w0, [x0, x26]
+	cmp	w0, w1
+	bls	.L1042
+	str	w0, [x19, 2644]
+.L1042:
+	ldr	w1, [x19, 2632]
+	ubfiz	x3, x24, 5, 16
+	ldrh	w0, [x19, 96]
+	ldr	w2, [x19, 2628]
+	madd	w0, w0, w2, w1
+	ldrh	w1, [x19, 44]
+	udiv	w0, w0, w1
+	ldr	x1, [x19, 3544]
+	str	w0, [x19, 2636]
+	ldr	w0, [x1, 16]
+	add	w0, w0, 1
+	str	w0, [x1, 16]
+	mov	x0, 0
+.L1043:
+	cmp	x3, x0
+	bne	.L1044
+	ldrb	w1, [x20, 8]
+	mov	w2, w24
+	ldr	x0, [x19, 3400]
+	mov	x28, 0
+	bl	FlashEraseBlocks
+	mov	w1, 0
+.L1045:
+	cmp	w24, w28, uxth
+	bhi	.L1047
+	cmp	w1, 0
+	ble	.L1048
+	mov	w0, w25
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L1048:
+	ldrb	w0, [x20, 7]
+	cbnz	w0, .L1049
+	ldr	x0, [x19, 2376]
+	mov	w1, -1
+	strh	w1, [x0, x26]
+	b	.L1025
+.L1035:
+	ldr	x1, [x19, 3400]
+	add	x2, x1, x0, lsl 5
+	stp	xzr, xzr, [x2, 8]
+	ldrh	w2, [x3]
+	cmp	w2, w5
+	beq	.L1034
+	ubfiz	x6, x24, 5, 16
+	add	w24, w24, 1
+	add	x1, x1, x6
+	and	w24, w24, 65535
+	lsl	w2, w2, 10
+	str	w2, [x1, 4]
+.L1034:
+	add	x0, x0, 1
+	add	x3, x3, 2
+	b	.L1033
+.L1039:
+	mov	w0, 2
+	b	.L1060
+.L1038:
+	ldrh	w0, [x1, x26]
+	add	w0, w0, 1
+	strh	w0, [x1, x26]
+	ldr	w0, [x19, 2632]
+	add	w0, w0, 1
+	str	w0, [x19, 2632]
+	mov	w0, w25
+	bl	ftl_set_blk_mode.part.7
+	b	.L1041
+.L1044:
+	ldr	x1, [x19, 3400]
+	add	x1, x1, x0
+	add	x0, x0, 32
+	ldr	w2, [x1, 4]
+	and	w2, w2, -1024
+	str	w2, [x1, 4]
+	b	.L1043
+.L1047:
+	ldr	x2, [x19, 3400]
+	lsl	x0, x28, 5
+	add	x3, x2, x0
+	ldr	w2, [x2, x0]
+	cmn	w2, #1
+	bne	.L1046
+	add	w1, w1, 1
+	ldr	w0, [x3, 4]
+	stp	w2, w1, [x29, 104]
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	ldp	w2, w1, [x29, 104]
+	strh	w2, [x27]
+	ldrb	w0, [x20, 7]
+	sub	w0, w0, #1
+	strb	w0, [x20, 7]
+.L1046:
+	add	x28, x28, 1
+	add	x27, x27, 2
+	b	.L1045
+.L1049:
+	add	x21, x21, :lo12:.LANCHOR0
+	strh	wzr, [x20, 2]
+	strb	wzr, [x20, 6]
+	ldrh	w1, [x21, 106]
+	strh	w25, [x20]
+	mul	w0, w0, w1
+	ldr	w1, [x21, 2620]
+	str	w1, [x20, 12]
+	and	w0, w0, 65535
+	add	w1, w1, 1
+	strh	w0, [x20, 4]
+	str	w1, [x21, 2620]
+	ldr	x1, [x21, 2376]
+	ldrh	w2, [x20]
+	strh	w0, [x1, x2, lsl 1]
+	ldrh	w0, [x20, 4]
+	cbz	w0, .L1050
+	ldrb	w0, [x20, 7]
+	cbnz	w0, .L1051
+.L1050:
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2707
+	add	x1, x1, 480
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1051:
+	ldp	x19, x20, [sp, 16]
+	mov	w0, 0
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	allocate_data_superblock, .-allocate_data_superblock
+	.align	2
+	.global	FtlGcFreeBadSuperBlk
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	and	w22, w0, 65535
+	stp	x23, x24, [sp, 48]
+	stp	x25, x26, [sp, 64]
+	ldrh	w0, [x19, 3324]
+	str	x27, [sp, 80]
+	cbz	w0, .L1062
+	add	x23, x19, 64
+	add	x24, x19, 3328
+	mov	w21, 0
+.L1063:
+	ldrh	w0, [x19, 36]
+	cmp	w0, w21
+	bhi	.L1069
+	bl	FtlGcReFreshBadBlk
+.L1062:
+	mov	w0, 0
+	ldr	x27, [sp, 80]
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x29, x30, [sp], 96
+	ret
+.L1069:
+	ldrb	w0, [x23, w21, sxtw]
+	mov	w1, w22
+	adrp	x26, .LC105
+	add	x26, x26, :lo12:.LC105
+	mov	w20, 0
+	bl	V2P_block
+	and	w25, w0, 65535
+.L1064:
+	ldrh	w0, [x19, 3324]
+	cmp	w0, w20
+	bhi	.L1068
+	add	w21, w21, 1
+	and	w21, w21, 65535
+	b	.L1063
+.L1068:
+	ldrh	w0, [x24, w20, sxtw 1]
+	add	w27, w20, 1
+	cmp	w0, w25
+	bne	.L1065
+	mov	w1, w25
+	mov	x0, x26
+	bl	sftl_printk
+	mov	w0, w25
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	w0, [x19, 3324]
+	mov	w1, w27
+.L1066:
+	cmp	w20, w0
+	bcc	.L1067
+	sub	w0, w0, #1
+	strh	w0, [x19, 3324]
+.L1065:
+	and	w20, w27, 65535
+	b	.L1064
+.L1067:
+	sub	w2, w1, #1
+	ldrh	w3, [x24, w1, sxtw 1]
+	add	w20, w20, 1
+	add	w1, w1, 1
+	and	w20, w20, 65535
+	strh	w3, [x24, w2, sxtw 1]
+	b	.L1066
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.align	2
+	.global	update_vpc_list
+	.type	update_vpc_list, %function
+update_vpc_list:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	and	w19, w0, 65535
+	adrp	x20, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
+	str	x21, [sp, 32]
+	ubfiz	x1, x19, 1, 16
+	ldr	x2, [x0, 2376]
+	ldrh	w1, [x2, x1]
+	cbnz	w1, .L1075
+	ldrh	w1, [x0, 2672]
+	cmp	w1, w19
+	bne	.L1076
+	mov	w1, -1
+	strh	w1, [x0, 2672]
+.L1077:
+	add	x21, x20, :lo12:.LANCHOR0
+	mov	w1, w19
+	add	x0, x21, 2368
+	bl	List_remove_node
+	ldrh	w0, [x21, 2400]
+	cbnz	w0, .L1079
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2777
+	add	x1, x1, 512
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1079:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x20, 2400]
+	sub	w0, w0, #1
+	strh	w0, [x20, 2400]
+	mov	w0, w19
+	bl	free_data_superblock
+	mov	w0, w19
+	bl	FtlGcFreeBadSuperBlk
+	ldrh	w1, [x20, 2400]
+	ldrh	w0, [x20, 2416]
+	add	w0, w0, w1
+	ldrh	w1, [x20, 44]
+	cmp	w0, w1
+	ble	.L1083
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 2780
+	add	x1, x1, 512
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1083:
+	mov	w0, 1
+	b	.L1074
+.L1076:
+	ldrh	w1, [x0, 2424]
+	cmp	w1, w19
+	beq	.L1082
+	ldrh	w1, [x0, 2472]
+	cmp	w1, w19
+	beq	.L1082
+	ldrh	w0, [x0, 2520]
+	cmp	w0, w19
+	bne	.L1077
+.L1082:
+	mov	w0, 0
+.L1074:
+	ldp	x19, x20, [sp, 16]
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 48
+	ret
+.L1075:
+	mov	w0, w19
+	bl	List_update_data_list
+	b	.L1082
+	.size	update_vpc_list, .-update_vpc_list
+	.align	2
+	.global	decrement_vpc_count
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	and	w20, w0, 65535
+	stp	x21, x22, [sp, 32]
+	mov	w0, 65535
+	adrp	x19, .LANCHOR0
+	cmp	w20, w0
+	beq	.L1086
+	add	x22, x19, :lo12:.LANCHOR0
+	ubfiz	x21, x20, 1, 16
+	ldr	x1, [x22, 2376]
+	ldrh	w0, [x1, x21]
+	cbnz	w0, .L1087
+	mov	w2, 0
+	mov	w1, w20
+	adrp	x0, .LC106
+	add	x0, x0, :lo12:.LC106
+	bl	sftl_printk
+	ldr	x0, [x22, 2376]
+	ldrh	w0, [x0, x21]
+	cbz	w0, .L1088
+.L1093:
+	mov	w21, 0
+.L1085:
+	mov	w0, w21
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 48
+	ret
+.L1088:
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 2795
+	add	x1, x1, 528
+	adrp	x0, .LC1
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+	b	.L1093
+.L1087:
+	sub	w0, w0, #1
+	strh	w0, [x1, x21]
+.L1086:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 65535
+	ldrh	w0, [x19, 3698]
+	cmp	w0, w1
+	bne	.L1090
+	strh	w20, [x19, 3698]
+	b	.L1093
+.L1090:
+	cmp	w20, w0
+	beq	.L1093
+	bl	update_vpc_list
+	cmp	w0, 0
+	ldr	x1, [x19, 2360]
+	cset	w21, ne
+	ldr	x0, [x19, 2368]
+	strh	w20, [x19, 3698]
+	sub	x0, x0, x1
+	mov	x1, -6148914691236517206
+	asr	x0, x0, 1
+	movk	x1, 0xaaab, lsl 0
+	mul	x0, x0, x1
+	ldr	x1, [x19, 2376]
+	and	x2, x0, 65535
+	ldrh	w1, [x1, x2, lsl 1]
+	cbnz	w1, .L1085
+	cmp	w20, w0, uxth
+	beq	.L1085
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 2811
+	add	x1, x1, 528
+	adrp	x0, .LC1
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+	b	.L1085
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	2
+	.global	FtlRecoverySuperblock
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	stp	x29, x30, [sp, -160]!
+	mov	w1, 65535
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x20, x0
+	stp	x21, x22, [sp, 32]
+	stp	x23, x24, [sp, 48]
+	stp	x25, x26, [sp, 64]
+	stp	x27, x28, [sp, 80]
+	ldrh	w0, [x0]
+	cmp	w0, w1
+	beq	.L1211
+	ldrb	w0, [x20, 6]
+	adrp	x19, .LANCHOR0
+	str	w0, [x29, 140]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w26, [x20, 2]
+	ldrh	w0, [x0, 106]
+	cmp	w0, w26
+	bne	.L1097
+	strh	wzr, [x20, 4]
+.L1217:
+	strb	wzr, [x20, 6]
+.L1211:
+	ldp	x19, x20, [sp, 16]
+	mov	w0, 0
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 160
+	ret
+.L1097:
+	ldrh	w0, [x20, 16]
+	mov	w21, 0
+.L1098:
+	cmp	w0, w1
+	beq	.L1099
+	mov	w1, 1
+	bl	FtlGetLastWrittenPage
+	mov	w23, w0
+	cmn	w0, #1
+	beq	.L1100
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x28, x20, 16
+	mov	x5, x28
+	mov	w22, 0
+	mov	w10, 65535
+	mov	w6, 4
+	ldrh	w1, [x0, 36]
+	ldrh	w8, [x0, 114]
+	add	x1, x1, 8
+	ldrh	w9, [x0, 116]
+	add	x1, x20, x1, lsl 1
+.L1101:
+	cmp	x5, x1
+	bne	.L1105
+	add	x24, x19, :lo12:.LANCHOR0
+	mov	w2, 0
+	mov	w1, w22
+	ldr	x0, [x24, 3424]
+	bl	FlashReadPages
+	ldr	w21, [x24, 2624]
+	ldr	x4, [x24, 3424]
+	and	w9, w23, 65535
+	sub	w21, w21, #1
+	mov	w7, 65535
+	mov	x6, x4
+	mov	w3, 0
+.L1106:
+	cmp	w22, w3
+	bne	.L1111
+	add	w22, w23, 1
+	ldr	w0, [x4, 4]
+	and	w22, w22, 65535
+.L1213:
+	lsr	w0, w0, 10
+	bl	P2V_plane
+	and	w27, w0, 65535
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x0, 106]
+	cmp	w0, w22
+	bne	.L1113
+	strh	w22, [x20, 2]
+	strb	wzr, [x20, 6]
+	strh	wzr, [x20, 4]
+.L1113:
+	ldr	w0, [x29, 140]
+	cmp	w22, w26
+	ccmp	w27, w0, 0, eq
+	bne	.L1114
+.L1218:
+	mov	w2, w27
+	mov	w1, w22
+	mov	x0, x20
+	bl	ftl_sb_update_avl_pages
+	b	.L1211
+.L1099:
+	add	w21, w21, 1
+	and	w21, w21, 65535
+	add	x0, x20, x21, sxtw 1
+	ldrh	w0, [x0, 16]
+	b	.L1098
+.L1100:
+	cbz	w26, .L1102
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 1766
+	add	x1, x1, 552
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1102:
+	ldr	w0, [x29, 140]
+	cmp	w0, 0
+	ccmp	w21, w0, 4, ne
+	beq	.L1103
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 1767
+	add	x1, x1, 552
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1103:
+	strh	wzr, [x20, 2]
+	b	.L1217
+.L1105:
+	ldrh	w2, [x5]
+	cmp	w2, w10
+	beq	.L1104
+	ldr	x4, [x0, 3424]
+	ubfiz	x7, x22, 5, 16
+	orr	w2, w23, w2, lsl 10
+	add	x4, x4, x7
+	str	w2, [x4, 4]
+	mul	w2, w22, w8
+	ldr	x3, [x0, 3424]
+	ldr	x4, [x0, 3264]
+	sdiv	w2, w2, w6
+	add	x3, x3, x7
+	add	x2, x4, x2, sxtw 2
+	str	x2, [x3, 8]
+	mul	w2, w22, w9
+	ldr	x4, [x0, 3272]
+	add	w22, w22, 1
+	and	w22, w22, 65535
+	sdiv	w2, w2, w6
+	add	x2, x4, x2, sxtw 2
+	str	x2, [x3, 16]
+.L1104:
+	add	x5, x5, 2
+	b	.L1101
+.L1111:
+	ldr	w0, [x6]
+	cbnz	w0, .L1107
+	ldr	x8, [x6, 16]
+	ldr	w5, [x8, 4]
+	cmn	w5, #1
+	beq	.L1108
+	ldr	w1, [x24, 2624]
+	mov	w0, w5
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1108
+	add	w5, w5, 1
+	str	w5, [x24, 2624]
+.L1108:
+	ldr	w0, [x8]
+	cmn	w0, #1
+	bne	.L1110
+	ubfiz	x3, x3, 5, 16
+	and	w22, w23, 65535
+	add	x3, x4, x3
+	ldr	w0, [x3, 4]
+	b	.L1213
+.L1107:
+	mov	w7, w9
+.L1110:
+	add	w3, w3, 1
+	add	x6, x6, 32
+	and	w3, w3, 65535
+	b	.L1106
+.L1114:
+	mov	w0, 65535
+	cmp	w7, w0
+	bne	.L1115
+	ldrb	w0, [x20, 8]
+	cbnz	w0, .L1116
+.L1115:
+	add	x0, x19, :lo12:.LANCHOR0
+	and	w3, w23, 65535
+	ldr	w1, [x0, 3708]
+	cmn	w1, #1
+	bne	.L1117
+	str	w21, [x0, 3708]
+.L1117:
+	add	w0, w26, 7
+	cmp	w0, w23, uxth
+	bge	.L1164
+	sub	w24, w3, #7
+	and	w24, w24, 65535
+.L1118:
+	add	x25, x19, :lo12:.LANCHOR0
+	mov	w4, 65535
+.L1119:
+	cmp	w24, w3
+	bhi	.L1126
+	ldrh	w0, [x25, 36]
+	mov	x1, x28
+	mov	w23, 0
+	add	x0, x0, 8
+	add	x0, x20, x0, lsl 1
+	b	.L1127
+.L1164:
+	mov	w24, w26
+	b	.L1118
+.L1121:
+	ldrh	w2, [x1]
+	cmp	w2, w4
+	beq	.L1120
+	ldr	x5, [x25, 3424]
+	ubfiz	x6, x23, 5, 16
+	add	w23, w23, 1
+	orr	w2, w24, w2, lsl 10
+	add	x5, x5, x6
+	and	w23, w23, 65535
+	str	w2, [x5, 4]
+.L1120:
+	add	x1, x1, 2
+.L1127:
+	cmp	x0, x1
+	bne	.L1121
+	ldr	x0, [x25, 3424]
+	mov	w1, w23
+	str	w4, [x29, 120]
+	mov	w2, 0
+	str	w3, [x29, 128]
+	ubfiz	x23, x23, 5, 16
+	add	x23, x23, 16
+	bl	FlashReadPages
+	ldr	x1, [x25, 3424]
+	ldr	w4, [x29, 120]
+	ldr	w3, [x29, 128]
+	add	x0, x1, 16
+	add	x23, x1, x23
+.L1122:
+	cmp	x23, x0
+	bne	.L1125
+	add	w24, w24, 1
+	and	w24, w24, 65535
+	b	.L1119
+.L1125:
+	ldr	w1, [x0, -16]
+	cbnz	w1, .L1116
+	ldr	x1, [x0]
+	ldrh	w2, [x1]
+	cmp	w2, w4
+	beq	.L1124
+	ldr	w1, [x1, 4]
+	cmn	w1, #1
+	beq	.L1124
+	str	w1, [x25, 3708]
+.L1124:
+	add	x0, x0, 32
+	b	.L1122
+.L1126:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, -1
+	str	w1, [x0, 3708]
+.L1116:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	mov	w24, w26
+	strh	w0, [x19, 3816]
+	add	x0, x19, 3824
+	str	x0, [x29, 104]
+.L1128:
+	ldrh	w0, [x19, 36]
+	mov	x1, x28
+	mov	w23, 0
+	mov	w4, 65535
+	add	x0, x0, 8
+	add	x0, x20, x0, lsl 1
+.L1129:
+	cmp	x0, x1
+	bne	.L1131
+	ldr	x0, [x19, 3424]
+	mov	w1, w23
+	mov	w2, 0
+	bl	FlashReadPages
+	ubfiz	x0, x23, 5, 16
+	str	x0, [x29, 112]
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	add	x0, x0, 552
+	mov	x23, 0
+	str	x0, [x29, 120]
+.L1132:
+	ldr	x0, [x29, 112]
+	cmp	x0, x23
+	bne	.L1158
+	add	w24, w24, 1
+	ldrh	w0, [x19, 106]
+	and	w24, w24, 65535
+	cmp	w0, w24
+	bne	.L1128
+	ldrh	w1, [x19, 36]
+	mov	w0, 0
+	strh	w24, [x20, 2]
+	mov	w2, 65535
+	strh	wzr, [x20, 4]
+.L1159:
+	cmp	w0, w1
+	beq	.L1211
+	ldrh	w3, [x28], 2
+	cmp	w3, w2
+	beq	.L1160
+	strb	w0, [x20, 6]
+	b	.L1211
+.L1131:
+	ldrh	w2, [x1]
+	cmp	w2, w4
+	beq	.L1130
+	ldr	x3, [x19, 3424]
+	ubfiz	x5, x23, 5, 16
+	add	w23, w23, 1
+	orr	w2, w24, w2, lsl 10
+	add	x3, x3, x5
+	and	w23, w23, 65535
+	str	w2, [x3, 4]
+.L1130:
+	add	x1, x1, 2
+	b	.L1129
+.L1158:
+	ldr	x4, [x19, 3424]
+	add	x4, x4, x23
+	ldr	w5, [x4, 4]
+	str	w5, [x29, 156]
+	lsr	w0, w5, 10
+	bl	P2V_plane
+	and	w0, w0, 65535
+	cmp	w24, w26
+	bcc	.L1133
+	ldr	w1, [x29, 140]
+	ccmp	w1, w0, 0, eq
+	bhi	.L1133
+	cmp	w24, w22
+	ccmp	w27, w0, 0, eq
+	beq	.L1134
+	ldr	w0, [x4]
+	cmn	w0, #1
+	beq	.L1135
+	ldr	x3, [x4, 16]
+	mov	w0, 61589
+	ldrh	w1, [x3]
+	cmp	w1, w0
+	beq	.L1136
+	ldrh	w0, [x20]
+.L1215:
+	bl	decrement_vpc_count
+	b	.L1133
+.L1136:
+	ldr	w21, [x3, 4]
+	cmn	w21, #1
+	beq	.L1137
+	ldr	w1, [x19, 2624]
+	mov	w0, w21
+	str	x3, [x29, 128]
+	bl	ftl_cmp_data_ver
+	ldr	x3, [x29, 128]
+	cbz	w0, .L1137
+	add	w0, w21, 1
+	str	w0, [x19, 2624]
+.L1137:
+	ldrh	w1, [x3]
+	mov	w0, 61589
+	cmp	w1, w0
+	beq	.L1138
+	ldr	x1, [x29, 120]
+	mov	w2, 1918
+	str	x3, [x29, 128]
+	adrp	x0, .LC1
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+	ldr	x3, [x29, 128]
+.L1138:
+	ldp	w25, w0, [x3, 8]
+	add	x1, x29, 152
+	str	w0, [x29, 148]
+	mov	w2, 0
+	mov	w0, w25
+	bl	log2phys
+	ldr	w1, [x19, 3708]
+	cmn	w1, #1
+	beq	.L1139
+	mov	w0, w21
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1139
+	ldr	w1, [x29, 148]
+	cmn	w1, #1
+	beq	.L1140
+	ldr	x0, [x19, 3424]
+	mov	w2, 0
+	add	x0, x0, x23
+	ldr	x4, [x0, 16]
+	str	w1, [x0, 4]
+	mov	w1, 1
+	str	x4, [x29, 128]
+	ldr	x0, [x19, 3424]
+	add	x0, x0, x23
+	bl	FlashReadPages
+	ldr	x0, [x19, 3424]
+	ldr	x4, [x29, 128]
+	add	x3, x0, x23
+	ldr	w0, [x0, x23]
+	cmn	w0, #1
+	bne	.L1141
+.L1142:
+	mov	w0, -1
+	str	w0, [x29, 148]
+.L1149:
+	ldr	w4, [x29, 148]
+	cmn	w4, #1
+	beq	.L1133
+.L1163:
+	lsr	w0, w4, 10
+	bl	P2V_block_in_plane
+	and	w25, w0, 65535
+	ldrh	w0, [x19, 44]
+	mov	w3, w25
+	cmp	w0, w25
+	bhi	.L1154
+	ldr	x1, [x29, 120]
+	mov	w2, 2019
+	adrp	x0, .LC1
+	str	w25, [x29, 128]
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+	ldr	w3, [x29, 128]
+.L1154:
+	ldr	x1, [x19, 2376]
+	ubfiz	x0, x25, 1, 16
+	ldrh	w0, [x1, x0]
+	cbz	w0, .L1155
+	mov	w0, w3
+	b	.L1215
+.L1140:
+	ldp	w1, w0, [x29, 152]
+	cmp	w1, w0
+	bne	.L1133
+	mov	w2, 1
+	add	x1, x29, 148
+	mov	w0, w25
+	bl	log2phys
+.L1133:
+	add	x23, x23, 32
+	b	.L1132
+.L1141:
+	ldr	w0, [x4, 8]
+	cmp	w25, w0
+	bne	.L1142
+	ldr	w0, [x4, 4]
+	str	w0, [x29, 128]
+	str	x4, [x29, 96]
+	uxtw	x1, w0
+	ldr	w0, [x19, 3708]
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1142
+	ldp	w0, w1, [x29, 152]
+	ldr	x4, [x29, 96]
+	cmp	w0, w1
+	ldr	w1, [x29, 148]
+	bne	.L1144
+.L1214:
+	mov	w0, w25
+	bl	FtlReUsePrevPpa
+	b	.L1142
+.L1144:
+	cmp	w0, w1
+	beq	.L1142
+	cmn	w0, #1
+	beq	.L1145
+	ldr	x4, [x3, 16]
+	mov	w2, 0
+	str	w0, [x3, 4]
+	mov	w1, 1
+	str	x4, [x29, 96]
+	ldr	x0, [x19, 3424]
+	add	x0, x0, x23
+	bl	FlashReadPages
+	ldr	x4, [x29, 96]
+.L1146:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	x1, [x0, 3424]
+	ldr	w1, [x1, x23]
+	cmn	w1, #1
+	beq	.L1147
+	ldr	w3, [x4, 4]
+	ldr	w0, [x0, 3708]
+	mov	w1, w3
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1147
+	ldr	w0, [x29, 128]
+	mov	w1, w3
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L1142
+.L1147:
+	ldr	w1, [x29, 148]
+	b	.L1214
+.L1145:
+	str	w0, [x3]
+	b	.L1146
+.L1139:
+	ldp	w1, w0, [x29, 152]
+	cmp	w1, w0
+	beq	.L1149
+	mov	w2, 1
+	add	x1, x29, 156
+	mov	w0, w25
+	bl	log2phys
+	ldr	w4, [x29, 152]
+	cmn	w4, #1
+	beq	.L1149
+	ldr	w0, [x29, 148]
+	cmp	w4, w0
+	beq	.L1163
+	lsr	w0, w4, 10
+	bl	P2V_block_in_plane
+	ldrh	w1, [x19, 2424]
+	and	w0, w0, 65535
+	cmp	w1, w0
+	beq	.L1153
+	ldrh	w1, [x19, 2472]
+	cmp	w1, w0
+	beq	.L1153
+	ldrh	w1, [x19, 2520]
+	cmp	w1, w0
+	bne	.L1149
+.L1153:
+	ldr	x0, [x19, 3424]
+	mov	w2, 0
+	mov	w1, 1
+	str	w4, [x0, 4]
+	ldr	x3, [x0, 16]
+	ldr	x0, [x19, 3424]
+	str	x3, [x29, 128]
+	bl	FlashReadPages
+	ldr	x0, [x19, 3424]
+	ldr	w0, [x0]
+	cmn	w0, #1
+	beq	.L1149
+	ldr	x3, [x29, 128]
+	mov	w0, w21
+	ldr	w1, [x3, 4]
+	bl	ftl_cmp_data_ver
+	cbnz	w0, .L1149
+	mov	w2, 1
+	add	x1, x29, 152
+	mov	w0, w25
+	bl	log2phys
+	b	.L1149
+.L1155:
+	mov	w1, w25
+	adrp	x0, .LC107
+	add	x0, x0, :lo12:.LC107
+	bl	sftl_printk
+	b	.L1133
+.L1135:
+	ldr	w0, [x19, 3820]
+	cmp	w0, 31
+	bhi	.L1156
+	ldr	x1, [x29, 104]
+	str	w5, [x1, w0, uxtw 2]
+	add	w0, w0, 1
+	str	w0, [x19, 3820]
+.L1156:
+	ldrh	w0, [x20]
+	bl	decrement_vpc_count
+	ldr	w0, [x19, 3708]
+	cmn	w0, #1
+	bne	.L1157
+.L1216:
+	str	w21, [x19, 3708]
+	b	.L1133
+.L1157:
+	cmp	w21, w0
+	bcs	.L1133
+	b	.L1216
+.L1160:
+	add	w0, w0, 1
+	and	w0, w0, 65535
+	b	.L1159
+.L1134:
+	strb	w27, [x20, 6]
+	strh	w22, [x20, 2]
+	b	.L1218
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.align	2
+	.global	FtlWriteDump_data
+	.type	FtlWriteDump_data, %function
+FtlWriteDump_data:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	stp	x23, x24, [sp, 48]
+	str	x25, [sp, 64]
+	ldrh	w2, [x20, 2428]
+	cbz	w2, .L1220
+	ldrb	w1, [x20, 2432]
+	cbnz	w1, .L1220
+	ldrb	w1, [x20, 2431]
+	ldrh	w3, [x20, 106]
+	mul	w1, w1, w3
+	cmp	w2, w1
+	beq	.L1220
+	ldrb	w0, [x20, 2434]
+	cbnz	w0, .L1219
+	ldr	w22, [x20, 2584]
+	add	x1, x29, 92
+	ldrh	w24, [x20, 36]
+	mov	w2, 0
+	sub	w22, w22, #1
+	mov	w0, w22
+	bl	log2phys
+	ldr	x21, [x20, 3512]
+	ldr	w0, [x29, 92]
+	ldr	x1, [x20, 3448]
+	str	w0, [x29, 100]
+	cmn	w0, #1
+	stp	x1, x21, [x29, 104]
+	str	w22, [x29, 120]
+	str	wzr, [x21, 4]
+	beq	.L1222
+	mov	w2, 0
+	mov	w1, 1
+	add	x0, x29, 96
+	bl	FlashReadPages
+.L1223:
+	add	x25, x19, :lo12:.LANCHOR0
+	lsl	w24, w24, 2
+	add	x20, x25, 2424
+	mov	w0, -3947
+	mov	w23, 0
+	strh	w0, [x21]
+.L1224:
+	cmp	w24, w23
+	bne	.L1228
+.L1225:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	strb	w0, [x19, 2434]
+.L1219:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldr	x25, [sp, 64]
+	ldp	x29, x30, [sp], 128
+	ret
+.L1222:
+	ldrh	w2, [x20, 114]
+	mov	w1, 255
+	ldr	x0, [x20, 3448]
+	bl	ftl_memset
+	b	.L1223
+.L1228:
+	ldrh	w0, [x20, 4]
+	cbz	w0, .L1225
+	ldr	w0, [x29, 100]
+	add	w23, w23, 1
+	stp	w22, w0, [x21, 8]
+	ldrh	w0, [x20]
+	strh	w0, [x21, 2]
+	mov	x0, x20
+	bl	get_new_active_ppa
+	str	w0, [x29, 100]
+	ldr	w0, [x25, 2624]
+	mov	w3, 0
+	str	w0, [x21, 4]
+	mov	w2, 0
+	add	w0, w0, 1
+	mov	w1, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x25, 2624]
+	add	x0, x29, 96
+	bl	FlashProgPages
+	ldrh	w0, [x20]
+	bl	decrement_vpc_count
+	b	.L1224
+.L1220:
+	add	x19, x19, :lo12:.LANCHOR0
+	strb	wzr, [x19, 2434]
+	b	.L1219
+	.size	FtlWriteDump_data, .-FtlWriteDump_data
+	.align	2
+	.global	l2p_flush
+	.type	l2p_flush, %function
+l2p_flush:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x20, .LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w19, 0
+	bl	FtlWriteDump_data
+.L1238:
+	ldrh	w0, [x20, 142]
+	cmp	w0, w19
+	bhi	.L1240
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	ret
+.L1240:
+	ldr	x1, [x20, 2568]
+	ubfiz	x0, x19, 4, 16
+	add	x0, x1, x0
+	ldr	w0, [x0, 4]
+	tbz	w0, #31, .L1239
+	mov	w0, w19
+	bl	flush_l2p_region
+.L1239:
+	add	w19, w19, 1
+	and	w19, w19, 65535
+	b	.L1238
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	stp	x29, x30, [sp, -96]!
+	mov	w2, 61589
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	x19, x0
+	mov	w0, -1
+	stp	x21, x22, [sp, 32]
+	str	w0, [x29, 88]
+	adrp	x21, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
+	str	x23, [sp, 48]
+	mov	x20, x0
+	ldr	x23, [x0, 3512]
+	ldr	x1, [x0, 3448]
+	stp	x1, x23, [x29, 72]
+	mov	w1, -3
+	str	w1, [x23, 8]
+	mov	w1, -2
+	str	w1, [x23, 12]
+	ldrh	w1, [x19]
+	strh	w1, [x23, 2]
+	strh	wzr, [x23]
+	ldr	x1, [x0, 3448]
+	str	w2, [x1]
+	mov	w2, 22136
+	movk	w2, 0x1234, lsl 16
+	ldr	x1, [x0, 3448]
+	str	w2, [x1, 4]
+	ldrh	w22, [x19, 4]
+	and	w22, w22, 1
+	add	w22, w22, 6
+.L1248:
+	ldrh	w0, [x19, 4]
+	cbnz	w0, .L1244
+.L1245:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x19]
+	ldrh	w3, [x19, 4]
+	ldr	x2, [x21, 2376]
+	lsl	x0, x0, 1
+	ldrh	w1, [x2, x0]
+	sub	w1, w1, w3
+	strh	w1, [x2, x0]
+	strb	wzr, [x19, 6]
+	ldrh	w0, [x21, 106]
+	strh	w0, [x19, 2]
+	strh	wzr, [x19, 4]
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldr	x23, [sp, 48]
+	ldp	x29, x30, [sp], 96
+	ret
+.L1244:
+	mov	x0, x19
+	bl	get_new_active_ppa
+	str	w0, [x29, 68]
+	cmn	w0, #1
+	beq	.L1245
+	ldr	w0, [x20, 2624]
+	mov	w3, 0
+	str	w0, [x23, 4]
+	mov	w2, 0
+	add	w0, w0, 1
+	mov	w1, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x20, 2624]
+	add	x0, x29, 64
+	bl	FlashProgPages
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	subs	w22, w22, #1
+	bne	.L1248
+	b	.L1245
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.align	2
+	.global	FtlVendorPartWrite
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	stp	x29, x30, [sp, -208]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp, 32]
+	stp	x27, x28, [sp, 80]
+	mov	w22, w1
+	mov	w28, w0
+	add	w1, w0, w1
+	stp	x23, x24, [sp, 48]
+	ldrh	w0, [x19, 100]
+	stp	x25, x26, [sp, 64]
+	cmp	w1, w0
+	bhi	.L1264
+	ldrh	w23, [x19, 112]
+	mov	x25, x2
+	add	x26, x29, 144
+	add	x27, x19, 3752
+	mov	w24, 0
+	lsr	w23, w28, w23
+.L1258:
+	cbnz	w22, .L1263
+.L1256:
+	mov	w0, w24
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 208
 	ret
-.L1203:
-	add	x2, x22, :lo12:.LANCHOR0
-	add	x0, x26, :lo12:.LANCHOR3
-	ldrh	w1, [x2, 62]
-	ldr	x0, [x0, -232]
-	udiv	w20, w27, w1
-	ldr	w4, [x0, w21, uxtw 2]
-	and	w0, w28, 65535
-	msub	w20, w20, w1, w27
-	sub	w19, w1, w20
-	and	w19, w19, 65535
-	cmp	w28, w19
-	csel	w19, w0, w19, cc
-	cbz	w4, .L1200
-	cmp	w19, w1
-	beq	.L1200
-	ldr	x0, [x2, 4048]
+.L1263:
+	ldrh	w1, [x19, 62]
+	ldr	x0, [x19, 3592]
+	udiv	w21, w28, w1
+	ldr	w2, [x0, w23, uxtw 2]
+	and	w0, w22, 65535
+	msub	w21, w21, w1, w28
+	sub	w20, w1, w21
+	and	w20, w20, 65535
+	cmp	w22, w20
+	csel	w20, w0, w20, cc
+	cbz	w2, .L1260
+	cmp	w20, w1
+	beq	.L1260
+	ldr	x0, [x19, 3464]
+	str	w2, [x29, 116]
 	mov	w2, 1
-	str	x0, [x29, 120]
-	add	x0, x29, 144
+	stp	x0, x26, [x29, 120]
 	mov	w1, w2
-	str	x0, [x29, 128]
-	str	w4, [x29, 116]
 	add	x0, x29, 112
 	bl	FlashReadPages
-.L1201:
-	add	x5, x22, :lo12:.LANCHOR0
-	lsl	w4, w19, 9
-	lsl	w20, w20, 9
-	mov	w2, w4
-	asr	w20, w20, 2
-	mov	x1, x24
-	ldr	x0, [x5, 4048]
-	sub	w28, w28, w19
-	str	w4, [x29, 108]
-	add	w27, w27, w19
-	str	x5, [x29, 96]
-	add	x0, x0, x20, sxtw 2
+.L1261:
+	lsl	w3, w20, 9
+	ldr	x0, [x19, 3464]
+	lsl	w21, w21, 9
+	mov	w2, w3
+	asr	w21, w21, 2
+	mov	x1, x25
+	str	w3, [x29, 108]
+	add	x0, x0, x21, sxtw 2
 	bl	ftl_memcpy
-	ldr	x5, [x29, 96]
-	mov	w1, w21
-	mov	x0, x25
-	add	w21, w21, 1
-	ldr	x2, [x5, 4048]
+	sub	w22, w22, w20
+	ldr	x2, [x19, 3464]
+	mov	w1, w23
+	mov	x0, x27
+	add	w28, w28, w20
+	add	w23, w23, 1
 	bl	FtlMapWritePage
 	cmn	w0, #1
-	ldr	w4, [x29, 108]
-	csinv	w23, w23, wzr, ne
-	add	x24, x24, x4, sxtw
-	b	.L1198
-.L1200:
-	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w3, [x29, 108]
+	csinv	w24, w24, wzr, ne
+	add	x25, x25, x3, sxtw
+	b	.L1258
+.L1260:
+	ldrh	w2, [x19, 114]
 	mov	w1, 0
-	ldrh	w2, [x0, 114]
-	ldr	x0, [x0, 4048]
+	ldr	x0, [x19, 3464]
 	bl	ftl_memset
-	b	.L1201
-.L1204:
-	mov	w23, -1
-	b	.L1196
+	b	.L1261
+.L1264:
+	mov	w24, -1
+	b	.L1256
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
 	.global	Ftl_save_ext_data
@@ -8272,10 +8597,10 @@ Ftl_save_ext_data:
 	movk	w1, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w1
-	bne	.L1212
+	bne	.L1272
 	stp	x29, x30, [sp, -16]!
 	add	x2, x0, 2720
-	mov	w1, 68
+	mov	w1, 72
 	add	x29, sp, 0
 	movk	w1, 0x5000, lsl 16
 	str	w1, [x2, 4]
@@ -8307,60 +8632,59 @@ Ftl_save_ext_data:
 	bl	FtlVendorPartWrite
 	ldp	x29, x30, [sp], 16
 	ret
-.L1212:
+.L1272:
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
 	.global	FtlEctTblFlush
 	.type	FtlEctTblFlush, %function
 FtlEctTblFlush:
-	adrp	x1, .LANCHOR3
-	add	x1, x1, :lo12:.LANCHOR3
-	ldrh	w2, [x1, 104]
+	adrp	x1, .LANCHOR0
+	add	x3, x1, :lo12:.LANCHOR0
+	ldrh	w2, [x3, 3952]
 	cmp	w2, 31
-	bhi	.L1219
+	bhi	.L1279
 	add	w2, w2, 1
-	strh	w2, [x1, 104]
+	strh	w2, [x3, 3952]
 	mov	w2, 1
-.L1216:
-	adrp	x1, .LANCHOR0
-	cbnz	w0, .L1217
+.L1276:
+	cbnz	w0, .L1277
 	add	x0, x1, :lo12:.LANCHOR0
-	ldr	x0, [x0, 4072]
+	ldr	x0, [x0, 3544]
 	ldr	w3, [x0, 20]
 	ldr	w0, [x0, 16]
 	add	w2, w2, w3
 	cmp	w0, w2
-	bcc	.L1221
-.L1217:
+	bcc	.L1281
+.L1277:
 	add	x0, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x1, [x0, 4072]
+	ldr	x1, [x0, 3544]
 	ldr	w2, [x1, 16]
 	str	w2, [x1, 20]
 	mov	w2, 17221
 	movk	w2, 0x4254, lsl 16
 	str	w2, [x1]
-	ldr	x2, [x0, 4072]
-	ldrh	w1, [x0, 4056]
+	ldr	x2, [x0, 3544]
+	ldrh	w1, [x0, 3528]
 	lsl	w3, w1, 9
 	str	wzr, [x2, 4]
 	str	w3, [x2, 12]
 	ldr	w3, [x2, 8]
 	add	w3, w3, 1
 	str	w3, [x2, 8]
-	ldr	x2, [x0, 4072]
+	ldr	x2, [x0, 3544]
 	mov	w0, 64
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
-.L1219:
+.L1279:
 	mov	w2, 32
-	b	.L1216
-.L1221:
+	b	.L1276
+.L1281:
 	mov	w0, 0
 	ret
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
@@ -8379,85 +8703,99 @@ sftl_vendor_write:
 	.global	FtlVendorPartRead
 	.type	FtlVendorPartRead, %function
 FtlVendorPartRead:
-	stp	x29, x30, [sp, -192]!
+	stp	x29, x30, [sp, -208]!
+	adrp	x3, .LANCHOR0
+	add	x3, x3, :lo12:.LANCHOR0
 	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR0
-	stp	x27, x28, [sp, 80]
 	stp	x21, x22, [sp, 32]
-	mov	w28, w0
-	mov	w27, w1
+	mov	w22, w1
 	stp	x23, x24, [sp, 48]
 	add	w1, w0, w1
+	stp	x19, x20, [sp, 16]
+	mov	w23, w0
 	stp	x25, x26, [sp, 64]
-	ldrh	w0, [x20, 100]
+	stp	x27, x28, [sp, 80]
+	ldrh	w0, [x3, 100]
 	cmp	w1, w0
-	bhi	.L1233
-	ldrh	w3, [x20, 112]
-	adrp	x24, .LANCHOR3
-	mov	x23, x2
-	add	x24, x24, :lo12:.LANCHOR3
-	mov	w22, 0
-	lsr	w25, w28, w3
-.L1227:
-	cbnz	w27, .L1232
-.L1225:
-	mov	w0, w22
+	bhi	.L1294
+	ldrh	w21, [x3, 112]
+	adrp	x26, .LC108
+	mov	x25, x2
+	mov	x28, x3
+	add	x26, x26, :lo12:.LC108
+	mov	w24, 0
+	lsr	w21, w23, w21
+.L1287:
+	cbnz	w22, .L1293
+.L1285:
+	mov	w0, w24
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x27, x28, [sp, 80]
-	ldp	x29, x30, [sp], 192
-	ret
-.L1232:
-	ldrh	w19, [x20, 62]
-	ldr	x0, [x24, -232]
-	udiv	w21, w28, w19
-	ldr	w1, [x0, w25, uxtw 2]
-	and	w0, w27, 65535
-	msub	w21, w21, w19, w28
-	sub	w19, w19, w21
+	ldp	x29, x30, [sp], 208
+	ret
+.L1293:
+	ldrh	w19, [x28, 62]
+	ldr	x0, [x28, 3592]
+	udiv	w20, w23, w19
+	ldr	w4, [x0, w21, uxtw 2]
+	and	w0, w22, 65535
+	msub	w20, w20, w19, w23
+	sub	w19, w19, w20
 	and	w19, w19, 65535
-	cmp	w27, w19
+	cmp	w22, w19
 	csel	w19, w0, w19, cc
-	lsl	w26, w19, 9
-	cbz	w1, .L1229
-	ldr	x0, [x20, 4048]
+	lsl	w27, w19, 9
+	cbz	w4, .L1289
+	ldr	x0, [x28, 3464]
 	mov	w2, 1
-	str	x0, [x29, 104]
-	add	x0, x29, 128
-	str	w1, [x29, 100]
+	str	x0, [x29, 120]
+	add	x0, x29, 144
+	str	w4, [x29, 108]
 	mov	w1, w2
-	str	x0, [x29, 112]
-	add	x0, x29, 96
+	str	w4, [x29, 116]
+	str	x0, [x29, 128]
+	add	x0, x29, 112
 	bl	FlashReadPages
-	lsl	w21, w21, 9
-	ldr	w0, [x29, 96]
-	asr	w21, w21, 2
-	ldr	x1, [x20, 4048]
-	mov	w2, w26
+	ldp	w4, w0, [x29, 108]
 	cmn	w0, #1
-	mov	x0, x23
-	csinv	w22, w22, wzr, ne
-	add	x1, x1, x21, sxtw 2
+	ldr	w0, [x28, 3712]
+	csinv	w24, w24, wzr, ne
+	cmp	w0, 256
+	bne	.L1291
+	mov	w2, w4
+	mov	w1, w21
+	mov	x0, x26
+	bl	sftl_printk
+	ldr	x2, [x28, 3464]
+	mov	w1, w21
+	add	x0, x28, 3752
+	bl	FtlMapWritePage
+.L1291:
+	ldr	x1, [x28, 3464]
+	lsl	w20, w20, 9
+	asr	w20, w20, 2
+	mov	w2, w27
+	mov	x0, x25
+	add	x1, x1, x20, sxtw 2
 	bl	ftl_memcpy
-.L1231:
-	add	w25, w25, 1
-	sub	w27, w27, w19
-	add	w28, w28, w19
-	add	x23, x23, x26, sxtw
-	b	.L1227
-.L1229:
-	mov	w2, w26
+.L1292:
+	add	w21, w21, 1
+	sub	w22, w22, w19
+	add	w23, w23, w19
+	add	x25, x25, x27, sxtw
+	b	.L1287
+.L1289:
+	mov	w2, w27
 	mov	w1, 0
-	mov	x0, x23
+	mov	x0, x25
 	bl	ftl_memset
-	b	.L1231
-.L1233:
-	mov	w22, -1
-	b	.L1225
+	b	.L1292
+.L1294:
+	mov	w24, -1
+	b	.L1285
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
 	.global	FtlLoadEctTbl
@@ -8469,26 +8807,26 @@ FtlLoadEctTbl:
 	str	x19, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x19, 4056]
-	ldr	x2, [x19, 4072]
+	ldrh	w1, [x19, 3528]
+	ldr	x2, [x19, 3544]
 	bl	FtlVendorPartRead
-	ldr	x0, [x19, 4072]
+	ldr	x0, [x19, 3544]
 	ldr	w1, [x0]
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1236
-	adrp	x1, .LC100
+	beq	.L1297
+	adrp	x1, .LC109
 	adrp	x0, .LC71
-	add	x1, x1, :lo12:.LC100
+	add	x1, x1, :lo12:.LC109
 	add	x0, x0, :lo12:.LC71
-	bl	printk
-	ldr	x0, [x19, 4072]
+	bl	sftl_printk
+	ldr	x0, [x19, 3544]
 	mov	w1, 0
-	ldrh	w2, [x19, 4056]
+	ldrh	w2, [x19, 3528]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1236:
+.L1297:
 	mov	w0, 0
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
@@ -8513,19 +8851,19 @@ Ftl_load_ext_data:
 	ldr	w0, [x20, 2720]
 	movk	w21, 0x4654, lsl 16
 	cmp	w0, w21
-	beq	.L1239
+	beq	.L1300
 	mov	w2, 512
 	mov	w1, 0
 	mov	x0, x22
 	bl	ftl_memset
 	str	w21, [x20, 2720]
-.L1239:
+.L1300:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
 	ldr	w3, [x0, 2720]
 	cmp	w3, w2
-	bne	.L1240
+	bne	.L1301
 	ldr	w2, [x0, 2808]
 	str	w2, [x0, 2612]
 	ldr	w2, [x0, 2812]
@@ -8550,7 +8888,7 @@ Ftl_load_ext_data:
 	ldr	w2, [x0, 2764]
 	str	w1, [x0, 2648]
 	str	w2, [x0, 2644]
-.L1240:
+.L1301:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x0, 2632]
 	ldrh	w1, [x0, 96]
@@ -8588,34 +8926,34 @@ FtlVpcTblFlush:
 	stp	x21, x22, [sp, 32]
 	stp	x25, x26, [sp, 64]
 	add	x20, x19, 2312
-	add	x25, x19, 3400
+	add	x25, x19, 2656
 	mov	w22, 0
-	ldr	x21, [x19, 3440]
+	ldr	x21, [x19, 3512]
 	mov	w24, 65535
-	ldr	x0, [x19, 3432]
-	ldrh	w1, [x19, 2656]
-	str	x0, [x19, 3408]
-	str	x21, [x19, 3416]
-	strh	w1, [x21, 2]
-	mov	w1, -3932
-	strh	w1, [x21]
+	ldr	x0, [x19, 3448]
+	str	x0, [x19, 3720]
+	ldrh	w0, [x19, 2656]
+	str	x21, [x19, 3728]
+	strh	w0, [x21, 2]
+	mov	w0, -3932
+	strh	w0, [x21]
 	str	wzr, [x21, 12]
-	ldr	w1, [x19, 2664]
-	stp	w1, wzr, [x21, 4]
-	mov	w1, 19539
-	movk	w1, 0x4654, lsl 16
-	str	w1, [x19, 2312]
-	mov	w1, 68
-	ldrb	w2, [x19, 2430]
-	movk	w1, 0x5000, lsl 16
-	str	w1, [x19, 2316]
+	ldr	w0, [x19, 2664]
+	stp	w0, wzr, [x21, 4]
+	mov	w0, 19539
 	ldrh	w1, [x19, 2424]
+	movk	w0, 0x4654, lsl 16
+	str	w0, [x19, 2312]
+	mov	w0, 72
+	ldrb	w2, [x19, 2430]
 	strh	w1, [x19, 2326]
+	movk	w0, 0x5000, lsl 16
 	ldrh	w1, [x19, 2426]
+	str	w0, [x19, 2316]
 	ldrh	w0, [x19, 2662]
 	strh	w0, [x19, 2320]
-	ldrh	w0, [x19, 58]
 	orr	w1, w2, w1, lsl 6
+	ldrh	w0, [x19, 58]
 	strb	w0, [x19, 2322]
 	strh	w1, [x19, 2328]
 	ldrh	w1, [x19, 2472]
@@ -8642,26 +8980,26 @@ FtlVpcTblFlush:
 	ldr	w0, [x19, 2624]
 	ldrh	w2, [x19, 114]
 	str	w0, [x19, 2348]
-	ldr	x0, [x19, 3408]
+	ldr	x0, [x19, 3720]
 	strh	w1, [x19, 2336]
 	mov	w1, 255
 	bl	ftl_memset
-	ldr	x0, [x19, 3408]
+	ldr	x0, [x19, 3720]
 	mov	x1, x20
 	mov	w2, 48
 	mov	x20, x25
 	adrp	x25, .LANCHOR1
 	add	x25, x25, :lo12:.LANCHOR1
-	add	x25, x25, 536
+	add	x25, x25, 576
 	bl	ftl_memcpy
 	ldr	x1, [x19, 2376]
 	ldrh	w2, [x19, 44]
-	ldr	x0, [x19, 3408]
+	ldr	x0, [x19, 3720]
 	lsl	w2, w2, 1
 	add	x0, x0, 48
 	bl	ftl_memcpy
 	ldrh	w0, [x19, 44]
-	ldr	x3, [x19, 3408]
+	ldr	x3, [x19, 3720]
 	ldr	x1, [x19, 24]
 	lsr	w2, w0, 3
 	ubfiz	x0, x0, 1, 16
@@ -8672,89 +9010,84 @@ FtlVpcTblFlush:
 	bl	ftl_memcpy
 	mov	w0, 0
 	bl	FtlUpdateVaildLpn
-.L1245:
-	ldr	x0, [x19, 3432]
-	mov	w3, 1
-	str	x0, [x20, 8]
-	mov	w2, w3
-	ldr	x0, [x19, 3440]
-	ldrh	w1, [x19, 2658]
-	str	x0, [x20, 16]
-	ldrh	w0, [x19, 2656]
-	orr	w0, w1, w0, lsl 10
-	mov	w1, w3
-	str	w0, [x20, 4]
-	mov	x0, x20
-	bl	FlashProgPages
+.L1306:
+	ldrh	w2, [x20, 2]
+	ldrh	w1, [x20]
+	ldr	x0, [x19, 3448]
+	str	x0, [x19, 3720]
+	ldr	x0, [x19, 3512]
+	str	x0, [x19, 3728]
+	orr	w0, w2, w1, lsl 10
+	str	w0, [x19, 3716]
 	ldrh	w0, [x19, 108]
-	ldrh	w1, [x19, 2658]
 	sub	w0, w0, #1
-	cmp	w1, w0
-	blt	.L1246
-	ldrh	w0, [x19, 2656]
-	ldrh	w24, [x19, 2660]
-	strh	wzr, [x19, 2658]
-	strh	w0, [x19, 2660]
+	cmp	w2, w0
+	blt	.L1307
+	ldrh	w24, [x20, 4]
+	strh	wzr, [x20, 2]
+	strh	w1, [x20, 4]
 	bl	FtlFreeSysBlkQueueOut
-	strh	w0, [x19, 2656]
 	ldr	w1, [x19, 2620]
-	mov	w3, 1
-	str	w1, [x19, 2664]
+	str	w1, [x20, 8]
 	add	w2, w1, 1
 	str	w2, [x19, 2620]
 	ubfiz	w2, w0, 10, 16
-	str	w2, [x20, 4]
+	str	w2, [x19, 3716]
+	strh	w0, [x20]
 	strh	w0, [x21, 2]
-	mov	w2, w3
 	str	w1, [x21, 4]
-	mov	x0, x20
+.L1307:
+	mov	w3, 1
+	add	x0, x19, 3712
 	mov	w1, w3
+	mov	w2, w3
 	bl	FlashProgPages
-.L1246:
-	ldrh	w0, [x19, 2658]
-	ldr	w1, [x20]
+	ldrh	w0, [x20, 2]
+	ldr	w1, [x19, 3712]
 	add	w0, w0, 1
 	and	w0, w0, 65535
-	strh	w0, [x19, 2658]
+	strh	w0, [x20, 2]
 	cmn	w1, #1
-	bne	.L1247
+	bne	.L1308
 	cmp	w0, 1
-	bne	.L1248
+	bne	.L1309
 	adrp	x0, .LC1
-	mov	w2, 1124
+	mov	w2, 1135
 	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1248:
-	ldrh	w0, [x19, 2658]
+	bl	sftl_printk
+.L1309:
+	ldrh	w0, [x20, 2]
 	cmp	w0, 1
-	bne	.L1249
+	bne	.L1310
 	ldrh	w0, [x19, 108]
 	sub	w0, w0, #1
-	strh	w0, [x19, 2658]
-.L1249:
+	strh	w0, [x20, 2]
+.L1310:
 	add	w22, w22, 1
 	and	w22, w22, 65535
 	cmp	w22, 3
-	bls	.L1245
+	bls	.L1306
 	add	x23, x23, :lo12:.LANCHOR0
-	adrp	x0, .LC101
+	adrp	x0, .LC110
 	mov	w2, w22
-	add	x0, x0, :lo12:.LC101
-	ldr	w1, [x23, 3404]
-	bl	printk
-.L1251:
-	b	.L1251
-.L1247:
+	add	x0, x0, :lo12:.LC110
+	ldr	w1, [x23, 3716]
+	bl	sftl_printk
+.L1312:
+	b	.L1312
+.L1308:
 	cmp	w0, 1
-	beq	.L1245
+	beq	.L1306
+	cmp	w1, 256
+	beq	.L1306
 	mov	w0, 65535
 	cmp	w24, w0
-	beq	.L1252
+	beq	.L1313
 	mov	w1, 1
 	mov	w0, w24
 	bl	FtlFreeSysBlkQueueIn
-.L1252:
+.L1313:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -8764,98 +9097,218 @@ FtlVpcTblFlush:
 	ret
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	2
+	.global	FtlSysFlush
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	l2p_flush
+	mov	w0, 1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	sftl_deinit
+	.type	sftl_deinit, %function
+sftl_deinit:
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0, #:lo12:.LANCHOR2]
+	cmp	w0, 1
+	bne	.L1326
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlSysFlush
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+.L1326:
+	mov	w0, 0
+	ret
+	.size	sftl_deinit, .-sftl_deinit
+	.align	2
+	.global	FtlDiscard
+	.type	FtlDiscard, %function
+FtlDiscard:
+	stp	x29, x30, [sp, -64]!
+	add	w3, w0, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	mov	w20, w1
+	adrp	x19, .LANCHOR0
+	add	x1, x19, :lo12:.LANCHOR0
+	str	x21, [sp, 32]
+	ldr	w2, [x1, 144]
+	cmp	w3, w2
+	bhi	.L1337
+	cmp	w20, 31
+	bhi	.L1331
+.L1345:
+	mov	w0, 0
+.L1329:
+	ldp	x19, x20, [sp, 16]
+	ldr	x21, [sp, 32]
+	ldp	x29, x30, [sp], 64
+	ret
+.L1331:
+	ldrh	w1, [x1, 62]
+	udiv	w21, w0, w1
+	msub	w0, w1, w21, w0
+	ands	w0, w0, 65535
+	beq	.L1332
+	sub	w1, w1, w0
+	add	w21, w21, 1
+	cmp	w1, w20
+	csel	w1, w1, w20, ls
+	sub	w20, w20, w1, uxth
+.L1332:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, -1
+	str	w0, [x29, 60]
+.L1333:
+	ldrh	w0, [x19, 62]
+	cmp	w20, w0
+	bcs	.L1335
+	ldr	w0, [x19, 3956]
+	cmp	w0, 32
+	bls	.L1345
+	str	wzr, [x19, 3956]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L1345
+.L1335:
+	mov	w2, 0
+	add	x1, x29, 56
+	mov	w0, w21
+	bl	log2phys
+	ldr	w0, [x29, 56]
+	cmn	w0, #1
+	beq	.L1334
+	ldr	w0, [x19, 3956]
+	mov	w2, 1
+	add	x1, x29, 60
+	add	w0, w0, 1
+	str	w0, [x19, 3956]
+	ldr	w0, [x19, 2592]
+	add	w0, w0, 1
+	str	w0, [x19, 2592]
+	mov	w0, w21
+	bl	log2phys
+	ldr	w0, [x29, 56]
+	lsr	w0, w0, 10
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L1334:
+	ldrh	w0, [x19, 62]
+	add	w21, w21, 1
+	sub	w20, w20, w0
+	b	.L1333
+.L1337:
+	mov	w0, -1
+	b	.L1329
+	.size	FtlDiscard, .-FtlDiscard
+	.align	2
 	.global	FtlVpcCheckAndModify
 	.type	FtlVpcCheckAndModify, %function
 FtlVpcCheckAndModify:
 	stp	x29, x30, [sp, -80]!
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC91
+	adrp	x0, .LC95
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
 	add	x19, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	add	x1, x1, 552
-	add	x0, x0, :lo12:.LC91
+	add	x1, x1, 592
+	add	x0, x0, :lo12:.LC95
 	str	x23, [sp, 48]
-	bl	printk
-	ldr	x0, [x19, 4080]
+	bl	sftl_printk
+	ldr	x0, [x19, 3552]
 	mov	w21, 0
 	ldrh	w2, [x19, 46]
 	mov	w1, 0
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L1258:
+.L1347:
 	ldr	w0, [x19, 2584]
 	cmp	w21, w0
-	bcc	.L1260
-	adrp	x22, .LC102
+	bcc	.L1349
+	adrp	x22, .LC111
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x22, x22, :lo12:.LC102
+	add	x22, x22, :lo12:.LC111
 	mov	w19, 0
 	mov	w23, 65535
-.L1261:
+.L1350:
 	ldrh	w0, [x20, 44]
 	cmp	w0, w19
-	bhi	.L1265
+	bhi	.L1355
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	x23, [sp, 48]
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
-	ldr	x23, [sp, 48]
 	ldp	x29, x30, [sp], 80
 	ret
-.L1260:
+.L1349:
 	mov	w2, 0
 	add	x1, x29, 76
 	mov	w0, w21
 	bl	log2phys
 	ldr	w0, [x29, 76]
 	cmn	w0, #1
-	beq	.L1259
+	beq	.L1348
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
-	ldr	x2, [x19, 4080]
+	ldr	x2, [x19, 3552]
 	ubfiz	x0, x0, 1, 16
 	ldrh	w1, [x2, x0]
 	add	w1, w1, 1
 	strh	w1, [x2, x0]
-.L1259:
+.L1348:
 	add	w21, w21, 1
-	b	.L1258
-.L1265:
+	b	.L1347
+.L1355:
 	ldr	x0, [x20, 2376]
 	ubfiz	x21, x19, 1, 16
 	ldrh	w2, [x0, x21]
-	ldr	x0, [x20, 4080]
+	ldr	x0, [x20, 3552]
 	ldrh	w3, [x0, x21]
 	cmp	w2, w3
-	beq	.L1263
+	beq	.L1352
 	cmp	w2, w23
-	beq	.L1263
-	mov	w1, w19
+	beq	.L1352
 	mov	x0, x22
-	bl	printk
+	mov	w1, w19
+	bl	sftl_printk
 	ldrh	w0, [x20, 2424]
 	cmp	w0, w19
-	beq	.L1263
+	beq	.L1352
 	ldrh	w0, [x20, 2520]
 	cmp	w0, w19
-	beq	.L1263
+	beq	.L1352
 	ldrh	w0, [x20, 2472]
 	cmp	w0, w19
-	beq	.L1263
-	ldr	x0, [x20, 4080]
-	ldrh	w1, [x0, x21]
+	beq	.L1352
 	ldr	x0, [x20, 2376]
+	ldrh	w1, [x0, x21]
+	cbnz	w1, .L1354
+	ldr	x1, [x20, 3552]
+	ldrh	w1, [x1, x21]
 	strh	w1, [x0, x21]
-	mov	w0, w19
-	bl	update_vpc_list
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-.L1263:
+.L1352:
 	add	w19, w19, 1
 	and	w19, w19, 65535
-	b	.L1261
+	b	.L1350
+.L1354:
+	ldr	x1, [x20, 3552]
+	ldrh	w1, [x1, x21]
+	strh	w1, [x0, x21]
+	mov	w0, w19
+	bl	update_vpc_list
+	b	.L1352
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	2
 	.global	allocate_new_data_superblock
@@ -8865,70 +9318,67 @@ allocate_new_data_superblock:
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
-	stp	x21, x22, [sp, 32]
-	mov	x22, x0
-	ldrh	w21, [x0]
+	str	x21, [sp, 32]
+	mov	x21, x0
+	ldrh	w20, [x0]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 44]
-	cmp	w0, w21
-	bcs	.L1271
+	cmp	w0, w20
+	bcs	.L1361
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
-	mov	w2, 2681
-	add	x1, x1, 576
+	mov	w2, 2714
+	add	x1, x1, 616
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1271:
+	bl	sftl_printk
+.L1361:
 	mov	w0, 65535
-	cmp	w21, w0
-	beq	.L1272
+	cmp	w20, w0
+	beq	.L1362
 	add	x1, x19, :lo12:.LANCHOR0
-	ubfiz	x0, x21, 1, 16
+	ubfiz	x0, x20, 1, 16
 	ldr	x1, [x1, 2376]
 	ldrh	w0, [x1, x0]
-	cbz	w0, .L1273
-	mov	w0, w21
+	cbz	w0, .L1363
+	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L1272:
+.L1362:
+	add	x2, x19, :lo12:.LANCHOR0
 	mov	w0, 1
-	adrp	x1, .LANCHOR3
-	strb	w0, [x22, 8]
-	add	x0, x1, :lo12:.LANCHOR3
-	mov	w2, 65535
-	mov	x20, x1
-	ldrh	w0, [x0, -48]
-	cmp	w0, w2
-	beq	.L1274
-	cmp	w21, w0
-	bne	.L1275
-	add	x19, x19, :lo12:.LANCHOR0
+	strb	w0, [x21, 8]
+	mov	w1, 65535
+	ldrh	w0, [x2, 3698]
+	cmp	w0, w1
+	beq	.L1364
+	cmp	w20, w0
+	bne	.L1365
+	ldr	x2, [x2, 2376]
 	ubfiz	x1, x0, 1, 16
-	ldr	x2, [x19, 2376]
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1276
-.L1275:
+	cbz	w1, .L1366
+.L1365:
 	bl	update_vpc_list
-.L1276:
-	add	x1, x20, :lo12:.LANCHOR3
+.L1366:
+	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
-	strh	w0, [x1, -48]
-.L1274:
-	mov	x0, x22
+	strh	w0, [x19, 3698]
+.L1364:
+	mov	x0, x21
 	bl	allocate_data_superblock
 	bl	l2p_flush
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
+	ldr	x21, [sp, 32]
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1273:
-	mov	w0, w21
+.L1363:
+	mov	w0, w20
 	bl	INSERT_FREE_LIST
-	b	.L1272
+	b	.L1362
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	2
 	.global	FtlProgPages
@@ -8953,254 +9403,112 @@ FtlProgPages:
 	add	x25, x25, :lo12:.LANCHOR1
 	add	x20, x0, 4
 	bl	FlashProgPages
-.L1282:
+.L1372:
 	cmp	x20, x24
-	beq	.L1289
+	beq	.L1379
 	sub	x23, x20, #4
-	b	.L1290
-.L1285:
-	ldr	w0, [x20]
-	lsr	w0, w0, 10
-	bl	P2V_block_in_plane
-	ldrh	w1, [x19]
-	cmp	w1, w0, uxth
-	bne	.L1283
-	ldr	x2, [x21, 2376]
-	ubfiz	x1, x1, 1, 16
-	ldrh	w3, [x19, 4]
-	ldrh	w0, [x2, x1]
-	sub	w0, w0, w3
-	strh	w0, [x2, x1]
-	strb	wzr, [x19, 6]
-	ldrh	w0, [x21, 106]
-	strh	w0, [x19, 2]
-	strh	wzr, [x19, 4]
-.L1283:
-	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1284
-	mov	x0, x19
-	bl	allocate_new_data_superblock
-.L1284:
-	ldr	w0, [x21, 2816]
-	add	w0, w0, 1
-	str	w0, [x21, 2816]
+	b	.L1380
+.L1375:
 	ldr	w0, [x20]
 	lsr	w0, w0, 10
-	bl	FtlGcMarkBadPhyBlk
-	mov	x0, x19
-	bl	get_new_active_ppa
-	str	w0, [x20]
-	mov	w2, 0
-	str	w0, [x29, 92]
-	mov	w1, 1
-	ldrb	w3, [x19, 9]
-	mov	x0, x23
-	bl	FlashProgPages
-.L1290:
-	ldr	w0, [x20, -4]
-	cmn	w0, #1
-	beq	.L1285
-	ldrb	w1, [x19, 6]
-	ldrh	w0, [x21, 36]
-	cmp	w1, w0
-	bcc	.L1286
-	adrp	x0, .LC1
-	mov	w2, 933
-	add	x1, x25, 608
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1286:
-	add	x1, x29, 96
-	ldr	w0, [x23, 4]
-	mov	w2, 1
-	str	w0, [x1, -4]!
-	ldr	w0, [x23, 24]
-	bl	log2phys
-	ldr	x0, [x23, 16]
-	ldr	w4, [x0, 12]
-	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
-	and	w1, w0, 65535
-	mov	w23, w1
-	cmn	w4, #1
-	beq	.L1287
-	ldr	x2, [x21, 2376]
-	ubfiz	x0, x1, 1, 16
-	ldrh	w0, [x2, x0]
-	cbnz	w0, .L1288
-	adrp	x0, .LC103
-	mov	w2, 0
-	add	x0, x0, :lo12:.LC103
-	bl	printk
-.L1288:
-	mov	w0, w23
-	bl	decrement_vpc_count
-.L1287:
-	add	x20, x20, 32
-	b	.L1282
-.L1289:
-	add	x22, x22, :lo12:.LANCHOR0
-	ldrb	w1, [x19, 6]
-	ldrh	w0, [x22, 36]
-	cmp	w1, w0
-	bcc	.L1281
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 948
-	add	x1, x1, 608
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1281:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldr	x25, [sp, 64]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	FtlProgPages, .-FtlProgPages
-	.align	2
-	.global	FtlCacheWriteBack
-	.type	FtlCacheWriteBack, %function
-FtlCacheWriteBack:
-	stp	x29, x30, [sp, -32]!
-	add	x29, sp, 0
-	str	x19, [sp, 16]
-	adrp	x19, .LANCHOR3
-	add	x19, x19, :lo12:.LANCHOR3
-	ldr	x0, [x19, -56]
-	cbz	x0, .L1297
-	ldr	x3, [x19, 112]
-	mov	w2, 0
-	mov	w1, 1
-	bl	FtlProgPages
-	str	xzr, [x19, -56]
-.L1297:
-	mov	w0, 0
-	ldr	x19, [sp, 16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
-	.align	2
-	.global	FtlSysFlush
-	.type	FtlSysFlush, %function
-FtlSysFlush:
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	FtlCacheWriteBack
-	bl	l2p_flush
-	mov	w0, 1
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-	mov	w0, 0
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	FtlSysFlush, .-FtlSysFlush
-	.align	2
-	.global	sftl_deinit
-	.type	sftl_deinit, %function
-sftl_deinit:
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0, #:lo12:.LANCHOR2]
-	cmp	w0, 1
-	bne	.L1307
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	FtlSysFlush
-	mov	w0, 0
-	ldp	x29, x30, [sp], 16
-	ret
-.L1307:
-	mov	w0, 0
-	ret
-	.size	sftl_deinit, .-sftl_deinit
-	.align	2
-	.global	FtlDiscard
-	.type	FtlDiscard, %function
-FtlDiscard:
-	stp	x29, x30, [sp, -64]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	stp	x21, x22, [sp, 32]
-	add	x22, x20, :lo12:.LANCHOR0
-	mov	w21, w0
-	mov	w19, w1
-	add	w1, w0, w1
-	ldr	w0, [x22, 144]
-	cmp	w1, w0
-	bhi	.L1318
-	cmp	w19, 31
-	bhi	.L1312
-.L1326:
-	mov	w0, 0
-.L1310:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-.L1312:
-	bl	FtlCacheWriteBack
-	ldrh	w1, [x22, 62]
-	udiv	w22, w21, w1
-	msub	w21, w1, w22, w21
-	ands	w21, w21, 65535
-	beq	.L1313
-	sub	w1, w1, w21
-	add	w22, w22, 1
-	cmp	w1, w19
-	csel	w1, w1, w19, ls
-	sub	w19, w19, w1, uxth
-.L1313:
-	adrp	x21, .LANCHOR3
-	add	x20, x20, :lo12:.LANCHOR0
-	add	x21, x21, :lo12:.LANCHOR3
-	mov	w0, -1
-	str	w0, [x29, 60]
-.L1314:
-	ldrh	w0, [x20, 62]
-	cmp	w19, w0
-	bcs	.L1316
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	ldr	w1, [x0, 120]
-	cmp	w1, 32
-	bls	.L1326
-	str	wzr, [x0, 120]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	b	.L1326
-.L1316:
+	ldrh	w1, [x19]
+	cmp	w1, w0, uxth
+	bne	.L1373
+	ldr	x2, [x21, 2376]
+	ubfiz	x1, x1, 1, 16
+	ldrh	w3, [x19, 4]
+	ldrh	w0, [x2, x1]
+	sub	w0, w0, w3
+	strh	w0, [x2, x1]
+	strb	wzr, [x19, 6]
+	ldrh	w0, [x21, 106]
+	strh	w0, [x19, 2]
+	strh	wzr, [x19, 4]
+.L1373:
+	ldrh	w0, [x19, 4]
+	cbnz	w0, .L1374
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+.L1374:
+	ldr	w0, [x21, 2816]
+	add	w0, w0, 1
+	str	w0, [x21, 2816]
+	ldr	w0, [x20]
+	lsr	w0, w0, 10
+	bl	FtlGcMarkBadPhyBlk
+	mov	x0, x19
+	bl	get_new_active_ppa
+	str	w0, [x20]
 	mov	w2, 0
-	add	x1, x29, 56
-	mov	w0, w22
-	bl	log2phys
-	ldr	w0, [x29, 56]
+	str	w0, [x29, 92]
+	mov	w1, 1
+	ldrb	w3, [x19, 9]
+	mov	x0, x23
+	bl	FlashProgPages
+.L1380:
+	ldr	w0, [x20, -4]
 	cmn	w0, #1
-	beq	.L1315
-	ldr	w0, [x21, 120]
+	beq	.L1375
+	ldrb	w1, [x19, 6]
+	ldrh	w0, [x21, 36]
+	cmp	w1, w0
+	bcc	.L1376
+	adrp	x0, .LC1
+	mov	w2, 955
+	add	x1, x25, 648
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1376:
+	add	x1, x29, 96
+	ldr	w0, [x23, 4]
 	mov	w2, 1
-	add	x1, x29, 60
-	add	w0, w0, 1
-	str	w0, [x21, 120]
-	ldr	w0, [x20, 2592]
-	add	w0, w0, 1
-	str	w0, [x20, 2592]
-	mov	w0, w22
+	str	w0, [x1, -4]!
+	ldr	w0, [x23, 24]
 	bl	log2phys
-	ldr	w0, [x29, 56]
-	lsr	w0, w0, 10
+	ldr	x0, [x23, 16]
+	ldr	w4, [x0, 12]
+	lsr	w0, w4, 10
 	bl	P2V_block_in_plane
+	and	w1, w0, 65535
+	mov	w23, w1
+	cmn	w4, #1
+	beq	.L1377
+	ldr	x2, [x21, 2376]
+	ubfiz	x0, x1, 1, 16
+	ldrh	w0, [x2, x0]
+	cbnz	w0, .L1378
+	adrp	x0, .LC112
+	mov	w2, 0
+	add	x0, x0, :lo12:.LC112
+	bl	sftl_printk
+.L1378:
+	mov	w0, w23
 	bl	decrement_vpc_count
-.L1315:
-	ldrh	w0, [x20, 62]
-	add	w22, w22, 1
-	sub	w19, w19, w0
-	b	.L1314
-.L1318:
-	mov	w0, -1
-	b	.L1310
-	.size	FtlDiscard, .-FtlDiscard
+.L1377:
+	add	x20, x20, 32
+	b	.L1372
+.L1379:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrb	w1, [x19, 6]
+	ldrh	w0, [x22, 36]
+	cmp	w1, w0
+	bcc	.L1371
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x0, .LC1
+	mov	w2, 970
+	add	x1, x1, 648
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1371:
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldr	x25, [sp, 64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlProgPages, .-FtlProgPages
 	.align	2
 	.global	FtlGcFreeTempBlock
 	.type	FtlGcFreeTempBlock, %function
@@ -9217,104 +9525,99 @@ FtlGcFreeTempBlock:
 	ldrh	w20, [x2, 2520]
 	ldrh	w1, [x2, 106]
 	cmp	w20, w3
-	bne	.L1328
-.L1338:
-	add	x20, x19, :lo12:.LANCHOR0
-	adrp	x0, .LANCHOR3-40
-	add	x21, x20, 2520
-	str	wzr, [x0, #:lo12:.LANCHOR3-40]
-	mov	w0, 65535
-	ldrh	w1, [x20, 2520]
-	cmp	w1, w0
-	bne	.L1351
-.L1354:
+	bne	.L1387
+.L1397:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 65535
+	add	x1, x0, 2520
+	ldrh	w3, [x0, 2520]
+	str	wzr, [x0, 3704]
+	cmp	w3, w2
+	bne	.L1410
+.L1413:
 	mov	w0, 0
-.L1327:
+.L1386:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
 	ldp	x29, x30, [sp], 96
 	ret
-.L1328:
-	cbz	w0, .L1331
+.L1387:
+	cbz	w0, .L1390
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w4, [x0, 4]
 	cmp	w4, w3
-	beq	.L1332
-.L1333:
+	beq	.L1391
+.L1392:
 	mov	w1, 2
-.L1331:
+.L1390:
 	add	x21, x19, :lo12:.LANCHOR0
 	add	x0, x21, 2520
 	bl	FtlGcScanTempBlk
 	str	w0, [x29, 92]
 	cmn	w0, #1
-	beq	.L1334
+	beq	.L1393
 	ldr	x1, [x21, 2384]
 	ubfiz	x20, x20, 1, 16
 	ldrh	w0, [x1, x20]
 	cmp	w0, 4
-	bls	.L1335
+	bls	.L1394
 	sub	w0, w0, #5
 	strh	w0, [x1, x20]
 	mov	w0, 1
 	bl	FtlEctTblFlush
-.L1335:
-	adrp	x0, .LANCHOR3
-	add	x1, x0, :lo12:.LANCHOR3
-	mov	x20, x0
-	ldr	w1, [x1, -40]
-	cbnz	w1, .L1336
-	add	x19, x19, :lo12:.LANCHOR0
-	ldr	w0, [x19, 2816]
-	add	w0, w0, 1
-	str	w0, [x19, 2816]
+.L1394:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w1, [x0, 3704]
+	cbnz	w1, .L1395
+	ldr	w1, [x0, 2816]
+	add	w1, w1, 1
+	str	w1, [x0, 2816]
 	ldr	w0, [x29, 92]
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L1336:
-	add	x0, x20, :lo12:.LANCHOR3
-	str	wzr, [x0, -40]
-.L1347:
+.L1395:
+	add	x19, x19, :lo12:.LANCHOR0
+	str	wzr, [x19, 3704]
+.L1406:
 	mov	w0, 1
-	b	.L1327
-.L1332:
+	b	.L1386
+.L1391:
 	strh	wzr, [x0, 4]
 	ldrh	w0, [x2, 2416]
 	cmp	w0, 17
-	bhi	.L1333
-	b	.L1331
-.L1334:
+	bhi	.L1392
+	b	.L1390
+.L1393:
 	adrp	x0, .LANCHOR2+4
 	ldrh	w1, [x0, #:lo12:.LANCHOR2+4]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1347
-	b	.L1338
-.L1351:
-	bl	FtlCacheWriteBack
-	ldrb	w0, [x21, 7]
-	ldrh	w2, [x20, 106]
-	ldrh	w1, [x20, 3304]
-	mul	w0, w0, w2
-	cmp	w1, w0
-	beq	.L1339
+	bne	.L1406
+	b	.L1397
+.L1410:
+	ldrh	w2, [x0, 3304]
+	ldrb	w1, [x1, 7]
+	ldrh	w0, [x0, 106]
+	mul	w0, w1, w0
+	cmp	w2, w0
+	beq	.L1398
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	adrp	x0, .LC1
 	mov	w2, 162
-	add	x1, x1, 624
+	add	x1, x1, 664
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1339:
+	bl	sftl_printk
+.L1398:
 	add	x0, x19, :lo12:.LANCHOR0
 	adrp	x22, .LANCHOR1
 	add	x22, x22, :lo12:.LANCHOR1
 	adrp	x25, .LC1
-	add	x22, x22, 624
+	add	x22, x22, 664
 	add	x25, x25, :lo12:.LC1
 	ldrb	w1, [x0, 2527]
 	mov	w20, 0
@@ -9327,20 +9630,20 @@ FtlGcFreeTempBlock:
 	ldrh	w1, [x0, 3304]
 	add	w1, w1, w2
 	str	w1, [x0, 2608]
-.L1340:
+.L1399:
 	add	x21, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x21, 3304]
 	cmp	w0, w20
-	bhi	.L1344
+	bhi	.L1403
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x21, 2520]
 	ldr	x2, [x21, 2376]
 	ubfiz	x1, x0, 1, 16
 	ldrh	w1, [x2, x1]
-	cbz	w1, .L1345
+	cbz	w1, .L1404
 	bl	INSERT_DATA_LIST
-.L1346:
+.L1405:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w20, -1
 	strh	wzr, [x19, 3304]
@@ -9348,16 +9651,16 @@ FtlGcFreeTempBlock:
 	strh	wzr, [x19, 3292]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
+	strh	w20, [x19, 2672]
 	ldrh	w0, [x19, 2652]
 	ldrh	w1, [x19, 2416]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	ble	.L1354
+	ble	.L1413
 	mov	w0, 20
-	strh	w20, [x19, 2672]
 	strh	w0, [x19, 3232]
-	b	.L1354
-.L1344:
+	b	.L1413
+.L1403:
 	mov	w24, 12
 	ldr	x26, [x21, 3312]
 	ldr	w0, [x21, 2584]
@@ -9365,12 +9668,12 @@ FtlGcFreeTempBlock:
 	add	x23, x26, x24
 	ldr	w1, [x23, 8]
 	cmp	w1, w0
-	bcc	.L1341
+	bcc	.L1400
 	mov	w2, 168
 	mov	x1, x22
 	mov	x0, x25
-	bl	printk
-.L1341:
+	bl	sftl_printk
+.L1400:
 	ldr	w0, [x23, 8]
 	add	x1, x29, 92
 	mov	w2, 0
@@ -9378,7 +9681,7 @@ FtlGcFreeTempBlock:
 	ldr	w0, [x26, x24]
 	ldr	w1, [x29, 92]
 	cmp	w0, w1
-	bne	.L1342
+	bne	.L1401
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	mov	w21, w0
@@ -9387,22 +9690,22 @@ FtlGcFreeTempBlock:
 	add	x1, x23, 4
 	bl	log2phys
 	mov	w0, w21
-.L1353:
+.L1412:
 	bl	decrement_vpc_count
-.L1343:
+.L1402:
 	add	w20, w20, 1
 	and	w20, w20, 65535
-	b	.L1340
-.L1342:
+	b	.L1399
+.L1401:
 	ldr	w0, [x23, 4]
 	cmp	w1, w0
-	beq	.L1343
+	beq	.L1402
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 2520]
-	b	.L1353
-.L1345:
+	b	.L1412
+.L1404:
 	bl	INSERT_FREE_LIST
-	b	.L1346
+	b	.L1405
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
 	.global	FtlGcPageRecovery
@@ -9420,15 +9723,13 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19, 2522]
 	ldrh	w0, [x19, 106]
 	cmp	w1, w0
-	bcc	.L1355
-	adrp	x19, .LANCHOR3
-	add	x19, x19, :lo12:.LANCHOR3
-	sub	x0, x19, #192
+	bcc	.L1414
+	add	x0, x19, 3632
 	bl	FtlMapBlkWriteDump_data
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
-	str	wzr, [x19, -40]
-.L1355:
+	str	wzr, [x19, 3704]
+.L1414:
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -9438,15 +9739,14 @@ FtlGcPageRecovery:
 	.type	FtlPowerLostRecovery, %function
 FtlPowerLostRecovery:
 	stp	x29, x30, [sp, -32]!
-	adrp	x0, .LANCHOR3-28
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	str	wzr, [x0, #:lo12:.LANCHOR3-28]
 	add	x20, x19, 2424
 	add	x19, x19, 2472
 	mov	x0, x20
+	str	wzr, [x19, 1348]
 	bl	FtlRecoverySuperblock
 	mov	x0, x20
 	bl	FtlSlcSuperblockCheck
@@ -9474,28 +9774,28 @@ Ftl_gc_temp_data_write_back:
 	str	x19, [sp, 16]
 	add	x19, x11, :lo12:.LANCHOR0
 	ldr	w1, [x19, 3248]
-	ldr	x0, [x19, 4024]
+	ldr	x0, [x19, 3432]
 	bl	FlashProgPages
 	mov	w10, 0
-.L1361:
+.L1420:
 	ldr	w1, [x19, 3248]
 	cmp	w10, w1
-	bcc	.L1364
-	ldr	x0, [x19, 4024]
+	bcc	.L1423
+	ldr	x0, [x19, 3432]
 	bl	FtlGcBufFree
 	str	wzr, [x19, 3248]
 	ldrh	w0, [x19, 2524]
-	cbnz	w0, .L1365
+	cbnz	w0, .L1424
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
-	b	.L1367
-.L1364:
-	ldr	x0, [x19, 4024]
+	b	.L1426
+.L1423:
+	ldr	x0, [x19, 3432]
 	ubfiz	x1, x10, 5, 16
 	add	x3, x0, x1
 	ldr	w0, [x0, x1]
 	cmn	w0, #1
-	bne	.L1362
+	bne	.L1421
 	ldrh	w3, [x19, 2520]
 	ldr	x2, [x19, 2376]
 	strh	wzr, [x2, x3, lsl 1]
@@ -9503,30 +9803,30 @@ Ftl_gc_temp_data_write_back:
 	ldr	w0, [x19, 2816]
 	add	w0, w0, 1
 	str	w0, [x19, 2816]
-	ldr	x0, [x19, 4024]
+	ldr	x0, [x19, 3432]
 	add	x0, x0, x1
 	ldr	w0, [x0, 4]
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-.L1367:
+.L1426:
 	mov	w0, 1
-.L1360:
+.L1419:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1362:
+.L1421:
 	ldr	x0, [x3, 16]
 	ldr	w1, [x3, 4]
 	ldp	w2, w0, [x0, 8]
 	bl	FtlGcUpdatePage
 	add	w10, w10, 1
 	and	w10, w10, 65535
-	b	.L1361
-.L1365:
+	b	.L1420
+.L1424:
 	mov	w0, 0
-	b	.L1360
+	b	.L1419
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
 	.global	Ftl_get_new_temp_ppa
@@ -9541,11 +9841,10 @@ Ftl_get_new_temp_ppa:
 	ldrh	w2, [x0, 2520]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L1369
+	beq	.L1428
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1370
-.L1369:
-	bl	FtlCacheWriteBack
+	cbnz	w0, .L1429
+.L1428:
 	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
@@ -9558,14 +9857,137 @@ Ftl_get_new_temp_ppa:
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L1370:
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 2520
-	bl	get_new_active_ppa
-	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+.L1429:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 2520
+	bl	get_new_active_ppa
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	2
+	.global	FtlSysBlkInit
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp, 32]
+	add	x21, x20, :lo12:.LANCHOR0
+	str	x23, [sp, 48]
+	ldrh	w0, [x21, 40]
+	strh	wzr, [x21, 3816]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	w1, [x21, 2656]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L1432
+.L1434:
+	mov	w23, -1
+.L1431:
+	mov	w0, w23
+	ldr	x23, [sp, 48]
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 64
+	ret
+.L1432:
+	bl	FtlLoadSysInfo
+	mov	w23, w0
+	cbnz	w0, .L1434
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	w0, 1
+	bl	FtlUpdateVaildLpn
+	ldr	x1, [x21, 2568]
+	mov	w0, 0
+	ldrh	w3, [x21, 142]
+	add	x1, x1, 4
+.L1435:
+	cmp	w0, w3
+	bge	.L1440
+	ldr	w2, [x1], 16
+	tbz	w2, #31, .L1436
+.L1440:
+	add	x2, x20, :lo12:.LANCHOR0
+	cmp	w0, w3
+	ldrh	w1, [x2, 2340]
+	add	w1, w1, 1
+	strh	w1, [x2, 2340]
+	bge	.L1445
+.L1437:
+	add	x19, x20, :lo12:.LANCHOR0
+	add	x22, x19, 2424
+	add	x21, x19, 2472
+	mov	x0, x22
+	bl	FtlSuperblockPowerLostFix
+	mov	x0, x21
+	bl	FtlSuperblockPowerLostFix
+	ldrh	w0, [x19, 2424]
+	ldr	x2, [x19, 2376]
+	ldrh	w3, [x19, 2428]
+	lsl	x0, x0, 1
+	ldrh	w1, [x2, x0]
+	sub	w1, w1, w3
+	strh	w1, [x2, x0]
+	strb	wzr, [x19, 2430]
+	ldrh	w0, [x19, 106]
+	strh	w0, [x19, 2426]
+	ldrh	w0, [x19, 2472]
+	ldr	x2, [x19, 2376]
+	strh	wzr, [x19, 2428]
+	lsl	x0, x0, 1
+	ldrh	w3, [x19, 2476]
+	ldrh	w1, [x2, x0]
+	sub	w1, w1, w3
+	strh	w1, [x2, x0]
+	strb	wzr, [x19, 2478]
+	ldrh	w0, [x19, 106]
+	strh	w0, [x19, 2474]
+	ldrh	w0, [x19, 2342]
+	strh	wzr, [x19, 2476]
+	add	w0, w0, 1
+	strh	w0, [x19, 2342]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+	b	.L1441
+.L1436:
+	add	w0, w0, 1
+	b	.L1435
+.L1445:
+	ldrh	w0, [x2, 3816]
+	cbnz	w0, .L1437
+.L1441:
+	add	x19, x20, :lo12:.LANCHOR0
+	bl	FtlVpcCheckAndModify
+	mov	w1, 65535
+	add	x21, x19, 2424
+	ldrh	w0, [x19, 2424]
+	cmp	w0, w1
+	beq	.L1431
+	ldrh	w1, [x19, 2428]
+	cbnz	w1, .L1431
+	ldrh	w1, [x19, 2476]
+	add	x20, x19, 2472
+	cbnz	w1, .L1431
+	bl	FtlGcRefreshBlock
+	ldrh	w0, [x19, 2472]
+	bl	FtlGcRefreshBlock
+	bl	FtlVpcTblFlush
+	mov	x0, x21
+	bl	allocate_new_data_superblock
+	mov	x0, x20
+	bl	allocate_new_data_superblock
+	b	.L1431
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
 	.global	rk_ftl_garbage_collect
 	.type	rk_ftl_garbage_collect, %function
@@ -9579,155 +10001,118 @@ rk_ftl_garbage_collect:
 	stp	x23, x24, [sp, 48]
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-	ldr	w2, [x1, 4000]
-	cbnz	w2, .L1444
+	ldr	w2, [x1, 3408]
+	cbnz	w2, .L1520
 	ldrh	w2, [x1, 2400]
 	cmp	w2, 47
-	bls	.L1444
+	bls	.L1520
 	mov	w23, w0
 	adrp	x0, .LANCHOR2+4
 	ldrh	w2, [x0, #:lo12:.LANCHOR2+4]
 	mov	w0, 65535
 	cmp	w2, w0
-	bne	.L1374
-.L1377:
+	bne	.L1449
+.L1452:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 3322]
 	cmp	w1, w2
-	bne	.L1375
-.L1376:
-	add	x21, x19, :lo12:.LANCHOR0
-	mov	w20, 65535
-	ldr	w1, [x21, 3236]
-	ldrh	w0, [x21, 2672]
-	add	w1, w1, 1
-	add	w1, w1, w23, lsl 7
-	str	w1, [x21, 3236]
-	cmp	w0, w20
-	bne	.L1378
-	ldrh	w20, [x21, 2520]
-	cmp	w20, w0
-	bne	.L1447
-	ldrh	w22, [x21, 3320]
-	cmp	w22, w20
-	bne	.L1378
-	ldrh	w0, [x21, 2416]
+	bne	.L1450
+.L1451:
+	add	x20, x19, :lo12:.LANCHOR0
+	bl	FtlReadRefresh
+	mov	w21, 65535
+	ldr	w0, [x20, 3236]
+	ldrh	w1, [x20, 2672]
+	add	w0, w0, 1
+	add	w0, w0, w23, lsl 7
+	str	w0, [x20, 3236]
+	cmp	w1, w21
+	bne	.L1453
+	ldrh	w21, [x20, 2520]
+	cmp	w21, w1
+	bne	.L1523
+	ldrh	w22, [x20, 3320]
+	cmp	w22, w21
+	bne	.L1453
+	ldrh	w1, [x20, 2416]
 	mov	w2, 1024
-	cmp	w0, 24
-	mov	w0, 5120
-	csel	w0, w0, w2, cc
-	cmp	w1, w0
-	bls	.L1450
-	adrp	x0, .LANCHOR3+124
-	str	wzr, [x21, 3236]
-	strh	wzr, [x0, #:lo12:.LANCHOR3+124]
+	cmp	w1, 24
+	mov	w1, 5120
+	csel	w1, w1, w2, cc
+	cmp	w0, w1
+	bls	.L1526
+	strh	wzr, [x20, 3960]
+	str	wzr, [x20, 3236]
 	bl	GetSwlReplaceBlock
-	and	w20, w0, 65535
-	cmp	w20, w22
-	bne	.L1451
-	ldrh	w1, [x21, 2416]
-	ldrh	w0, [x21, 3234]
+	and	w21, w0, 65535
+	cmp	w21, w22
+	bne	.L1527
+	ldrh	w1, [x20, 2416]
+	ldrh	w0, [x20, 3234]
 	cmp	w1, w0
-	bcs	.L1381
+	bcs	.L1456
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	and	w0, w0, 65535
-	cmp	w0, w20
-	beq	.L1383
-	ldr	x1, [x21, 2376]
+	cmp	w0, w21
+	beq	.L1458
+	ldr	x1, [x20, 2376]
 	ubfiz	x0, x0, 1, 16
 	ldrh	w0, [x1, x0]
 	cmp	w0, 7
-	bhi	.L1384
+	bhi	.L1459
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	and	w22, w0, 65535
 	mov	w0, 128
-	strh	w0, [x21, 3234]
-	cmp	w22, w20
-	beq	.L1383
-.L1380:
-	add	x0, x19, :lo12:.LANCHOR0
-	ubfiz	x1, x22, 1, 32
-	mov	w20, w22
-	ldr	x2, [x0, 2376]
-	ldr	x3, [x0, 2384]
-	ldrh	w5, [x0, 3232]
-	ldrh	w4, [x3, x1]
-	ldrh	w3, [x2, x1]
-	mov	w1, w22
-	ldrh	w2, [x0, 2416]
-	adrp	x0, .LC104
-	add	x0, x0, :lo12:.LC104
-	bl	printk
-	b	.L1383
-.L1374:
-	ldrh	w1, [x1, 2520]
-	cmp	w1, w0
-	beq	.L1377
-	mov	w0, 1
-	bl	FtlGcFreeTempBlock
-	cbz	w0, .L1377
-	mov	w0, 1
-	b	.L1372
-.L1375:
-	ldrh	w3, [x0, 3320]
-	cmp	w3, w2
-	bne	.L1376
-	strh	w1, [x0, 3320]
-	mov	w1, -1
-	strh	w1, [x0, 3322]
-	b	.L1376
-.L1384:
-	mov	w0, 64
-.L1476:
-	strh	w0, [x21, 3234]
-.L1383:
+	strh	w0, [x20, 3234]
+	cmp	w22, w21
+	bne	.L1455
+.L1458:
 	bl	FtlGcReFreshBadBlk
-.L1378:
+.L1453:
 	cmp	w23, 0
 	mov	w0, 65535
-	ccmp	w20, w0, 0, eq
-	bne	.L1386
 	add	x1, x19, :lo12:.LANCHOR0
+	ccmp	w21, w0, 0, eq
+	bne	.L1461
 	ldrh	w0, [x1, 2416]
 	cmp	w0, 24
-	bhi	.L1452
+	bhi	.L1528
 	cmp	w0, 16
-	ldrh	w21, [x1, 106]
-	bls	.L1388
-	lsr	w21, w21, 5
-.L1387:
+	ldrh	w20, [x1, 106]
+	bls	.L1463
+	lsr	w20, w20, 5
+.L1462:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w2, [x1, 3232]
 	cmp	w2, w0
-	bcs	.L1391
+	bcs	.L1466
 	ldrh	w0, [x1, 2520]
 	mov	w2, 65535
 	cmp	w0, w2
-	bne	.L1392
+	bne	.L1467
 	ldrh	w2, [x1, 3320]
 	cmp	w2, w0
-	bne	.L1392
-	adrp	x0, .LANCHOR3+124
-	ldrh	w0, [x0, #:lo12:.LANCHOR3+124]
-	cbnz	w0, .L1393
+	bne	.L1467
+	ldrh	w0, [x1, 3960]
+	cbnz	w0, .L1468
 	ldr	w2, [x1, 2584]
 	ldr	w3, [x1, 2580]
 	add	w2, w2, w2, lsl 1
 	cmp	w3, w2, lsr 2
-	bcs	.L1394
-.L1393:
+	bcs	.L1469
+.L1468:
 	add	x2, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x2, 2652]
 	add	w1, w1, w1, lsl 1
 	asr	w1, w1, 2
 	strh	w1, [x2, 3232]
-.L1395:
+.L1470:
 	add	x19, x19, :lo12:.LANCHOR0
 	str	wzr, [x19, 3244]
-.L1372:
+.L1447:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -9735,233 +10120,267 @@ rk_ftl_garbage_collect:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1381:
-	mov	w0, 80
-	b	.L1476
-.L1451:
-	mov	w22, w20
-	b	.L1380
-.L1447:
-	mov	w20, w0
-	b	.L1378
+.L1449:
+	ldrh	w1, [x1, 2520]
+	cmp	w1, w0
+	beq	.L1452
+	mov	w0, 1
+	bl	FtlGcFreeTempBlock
+	cbz	w0, .L1452
+	mov	w0, 1
+	b	.L1447
 .L1450:
-	mov	w20, w22
-	b	.L1378
-.L1388:
+	ldrh	w3, [x0, 3320]
+	cmp	w3, w2
+	bne	.L1451
+	strh	w1, [x0, 3320]
+	mov	w1, -1
+	strh	w1, [x0, 3322]
+	b	.L1451
+.L1459:
+	mov	w0, 64
+.L1555:
+	strh	w0, [x20, 3234]
+	b	.L1458
+.L1456:
+	mov	w0, 80
+	b	.L1555
+.L1527:
+	mov	w22, w21
+.L1455:
+	add	x0, x19, :lo12:.LANCHOR0
+	ubfiz	x1, x22, 1, 32
+	mov	w21, w22
+	ldr	x2, [x0, 2376]
+	ldr	x3, [x0, 2384]
+	ldrh	w5, [x0, 3232]
+	ldrh	w4, [x3, x1]
+	ldrh	w3, [x2, x1]
+	mov	w1, w22
+	ldrh	w2, [x0, 2416]
+	adrp	x0, .LC113
+	add	x0, x0, :lo12:.LC113
+	bl	sftl_printk
+	b	.L1458
+.L1523:
+	mov	w21, w1
+	b	.L1453
+.L1526:
+	mov	w21, w22
+	b	.L1453
+.L1463:
 	cmp	w0, 12
-	bls	.L1389
-	lsr	w21, w21, 4
-	b	.L1387
-.L1389:
-	mov	w1, w21
+	bls	.L1464
+	lsr	w20, w20, 4
+	b	.L1462
+.L1464:
+	mov	w1, w20
 	cmp	w0, 9
-	lsr	w21, w21, 2
-	csel	w21, w21, w1, cs
-	b	.L1387
-.L1452:
-	mov	w21, 1
-	b	.L1387
-.L1394:
+	lsr	w20, w20, 2
+	csel	w20, w20, w1, cs
+	b	.L1462
+.L1528:
+	mov	w20, 1
+	b	.L1462
+.L1469:
 	mov	w2, 18
 	strh	w2, [x1, 3232]
-	b	.L1395
-.L1392:
+	b	.L1470
+.L1467:
 	add	x1, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x1, 2652]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1, 3232]
-.L1391:
+.L1466:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x0, 3324]
-	cbz	w0, .L1453
-	add	w21, w21, 32
-	and	w21, w21, 65535
-.L1453:
-	mov	w20, 65535
-.L1397:
+	cbz	w0, .L1529
+	add	w20, w20, 32
+	and	w20, w20, 65535
+.L1529:
+	mov	w21, 65535
+.L1472:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
 	ldrh	w1, [x0, 2672]
 	cmp	w1, w2
-	bne	.L1406
-	cmp	w20, w1
-	beq	.L1407
-	strh	w20, [x0, 2672]
-.L1408:
+	bne	.L1481
+	cmp	w21, w1
+	beq	.L1482
+	strh	w21, [x0, 2672]
+.L1483:
 	add	x5, x19, :lo12:.LANCHOR0
 	mov	w1, 65535
 	ldrh	w0, [x5, 2672]
 	strb	wzr, [x5, 2680]
 	cmp	w0, w1
-	beq	.L1406
+	beq	.L1481
 	bl	IsBlkInGcList
-	cbz	w0, .L1411
+	cbz	w0, .L1486
 	mov	w0, -1
 	strh	w0, [x5, 2672]
-.L1411:
+.L1486:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	add	x23, x22, 2672
+	add	x24, x22, 2672
 	ldrh	w1, [x22, 2672]
 	cmp	w1, w0
-	beq	.L1406
-	mov	x0, x23
+	beq	.L1481
+	mov	x0, x24
 	bl	make_superblock
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	ldrh	w2, [x22, 2672]
-	ldr	x1, [x22, 2376]
+	ldrh	w1, [x22, 2672]
+	ldr	x0, [x22, 2376]
 	strh	wzr, [x22, 2674]
 	strb	wzr, [x22, 2678]
-	strh	wzr, [x0, 126]
-	ldrh	w1, [x1, x2, lsl 1]
-	strh	w1, [x0, 128]
-.L1406:
+	strh	wzr, [x22, 3962]
+	ldrh	w0, [x0, x1, lsl 1]
+	strh	w0, [x22, 3964]
+.L1481:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w2, [x0, 2424]
 	cmp	w2, w1
-	beq	.L1412
+	beq	.L1487
 	ldrh	w0, [x0, 2472]
 	cmp	w0, w1
-	beq	.L1412
-	adrp	x24, .LANCHOR1
-	add	x24, x24, :lo12:.LANCHOR1
-	add	x24, x24, 648
-.L1413:
+	bne	.L1488
+.L1487:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, -1
+	strh	w1, [x0, 2672]
+.L1488:
+	adrp	x25, .LANCHOR1
+	add	x25, x25, :lo12:.LANCHOR1
+	add	x25, x25, 688
+.L1517:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldrh	w23, [x22, 2672]
-	cmp	w23, w0
-	bne	.L1414
-	mov	w25, 2
+	ldrh	w24, [x22, 2672]
+	cmp	w24, w0
+	bne	.L1489
+	mov	w26, 2
 	str	wzr, [x22, 3244]
-.L1415:
+.L1490:
 	ldrh	w5, [x22, 3240]
 	mov	w0, w5
 	bl	List_get_gc_head_node
 	and	w6, w0, 65535
 	strh	w6, [x22, 2672]
-	cmp	w6, w23
-	bne	.L1416
+	cmp	w6, w24
+	bne	.L1491
 	strh	wzr, [x22, 3240]
 	mov	w0, 8
-	b	.L1372
-.L1386:
-	add	x5, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x5, 2520]
-	cmp	w1, w0
-	bne	.L1456
-	ldrh	w0, [x5, 3320]
-	cmp	w0, w1
-	bne	.L1456
-	cmp	w20, w0
-	bne	.L1456
-	ldrh	w0, [x5, 2672]
-	cmp	w0, w20
-	beq	.L1398
-.L1456:
-	mov	w21, 1
-	b	.L1397
-.L1398:
-	ldrh	w7, [x5, 2416]
-	adrp	x21, .LANCHOR3
-	ldrh	w0, [x5, 3232]
-	str	wzr, [x5, 3244]
-	cmp	w0, w7
-	bcs	.L1399
-	add	x0, x21, :lo12:.LANCHOR3
-	ldrh	w0, [x0, 124]
-	cbnz	w0, .L1400
-	ldr	w0, [x5, 2584]
-	ldr	w1, [x5, 2580]
+	b	.L1447
+.L1461:
+	ldrh	w2, [x1, 2520]
+	cmp	w2, w0
+	bne	.L1532
+	ldrh	w0, [x1, 3320]
+	cmp	w0, w2
+	bne	.L1532
+	cmp	w21, w0
+	bne	.L1532
+	ldrh	w0, [x1, 2672]
+	cmp	w0, w21
+	beq	.L1473
+.L1532:
+	mov	w20, 1
+	b	.L1472
+.L1473:
+	ldrh	w2, [x1, 2416]
+	ldrh	w0, [x1, 3232]
+	str	wzr, [x1, 3244]
+	cmp	w2, w0
+	bls	.L1474
+	ldrh	w0, [x1, 3960]
+	cbnz	w0, .L1475
+	ldr	w0, [x1, 2584]
+	ldr	w2, [x1, 2580]
 	add	w0, w0, w0, lsl 1
-	cmp	w1, w0, lsr 2
-	bcs	.L1401
-.L1400:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x19, 2652]
+	cmp	w2, w0, lsr 2
+	bcs	.L1476
+.L1475:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x1, 2652]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
-	strh	w0, [x19, 3232]
-.L1402:
+.L1556:
+	strh	w0, [x1, 3232]
 	bl	FtlReadRefresh
-.L1477:
-	add	x21, x21, :lo12:.LANCHOR3
-	b	.L1478
-.L1401:
+	mov	w0, 0
+	bl	List_get_gc_head_node
+	add	x1, x19, :lo12:.LANCHOR0
+	ubfiz	x0, x0, 1, 16
+	ldr	x2, [x1, 2376]
+	ldrh	w0, [x2, x0]
+	cmp	w0, 4
+	bls	.L1474
+	ldrh	w0, [x1, 3960]
+	b	.L1447
+.L1476:
 	mov	w0, 18
-	strh	w0, [x5, 3232]
-	b	.L1402
-.L1399:
-	add	x21, x21, :lo12:.LANCHOR3
-	ldrh	w0, [x21, 124]
-	cbnz	w0, .L1456
-	ldrh	w6, [x5, 2652]
-	add	w0, w6, w6, lsl 1
+	b	.L1556
+.L1474:
+	add	x20, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x20, 3960]
+	cbnz	w0, .L1532
+	ldrh	w5, [x20, 2652]
+	add	w0, w5, w5, lsl 1
 	asr	w0, w0, 2
-	strh	w0, [x5, 3232]
+	strh	w0, [x20, 3232]
 	mov	w0, 0
 	bl	List_get_gc_head_node
-	ldr	x1, [x5, 2376]
+	ldr	x1, [x20, 2376]
 	ubfiz	x0, x0, 1, 16
-	ldrh	w2, [x5, 36]
+	ldrh	w2, [x20, 36]
 	ldrh	w1, [x1, x0]
-	ldrh	w0, [x5, 108]
+	ldrh	w0, [x20, 108]
 	mul	w0, w0, w2
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L1404
-	sub	w6, w6, #1
-	cmp	w7, w6
-	blt	.L1404
+	ble	.L1479
+	ldrh	w0, [x20, 2416]
+	sub	w5, w5, #1
+	cmp	w0, w5
+	blt	.L1479
 	bl	FtlReadRefresh
-.L1478:
-	ldrh	w0, [x21, 124]
-	b	.L1372
-.L1404:
-	cbnz	w1, .L1456
+	ldrh	w0, [x20, 3960]
+	b	.L1447
+.L1479:
+	cbnz	w1, .L1532
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x19, 2416]
 	add	w0, w0, 1
-	b	.L1372
-.L1407:
+	b	.L1447
+.L1482:
 	ldrh	w1, [x0, 3320]
-	cmp	w1, w20
-	beq	.L1408
+	cmp	w1, w21
+	beq	.L1483
 	ldr	x2, [x0, 2376]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w1, [x2, x1]
-	cbnz	w1, .L1409
+	cbnz	w1, .L1484
 	mov	w1, -1
 	strh	w1, [x0, 3320]
-.L1409:
+.L1484:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3320]
 	strh	w1, [x0, 2672]
 	mov	w1, -1
 	strh	w1, [x0, 3320]
-	b	.L1408
-.L1412:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, -1
-	strh	w0, [x19, 2672]
-.L1479:
-	adrp	x0, .LANCHOR3+124
-	ldrh	w0, [x0, #:lo12:.LANCHOR3+124]
-	b	.L1372
-.L1416:
+	b	.L1483
+.L1491:
 	mov	w0, w6
 	bl	IsBlkInGcList
 	add	w5, w5, 1
-	cbz	w0, .L1417
+	cbz	w0, .L1492
 	strh	w5, [x22, 3240]
-	b	.L1415
-.L1417:
+	b	.L1490
+.L1492:
 	ldrh	w4, [x22, 36]
 	ubfiz	x1, x6, 1, 16
 	ldrh	w0, [x22, 106]
@@ -9970,180 +10389,194 @@ rk_ftl_garbage_collect:
 	strh	w5, [x22, 3240]
 	mul	w0, w0, w4
 	ldrh	w3, [x2, x1]
-	sdiv	w4, w0, w25
+	sdiv	w4, w0, w26
 	cmp	w3, w4
-	bgt	.L1419
+	bgt	.L1494
 	cmp	w5, 48
-	bls	.L1420
+	bls	.L1495
 	cmp	w3, 8
-	bls	.L1420
+	bls	.L1495
 	ldrh	w3, [x22, 3292]
 	cmp	w3, 35
-	bhi	.L1420
-.L1419:
+	bhi	.L1495
+.L1494:
 	strh	wzr, [x22, 3240]
-.L1420:
+.L1495:
 	ldrh	w1, [x2, x1]
 	cmp	w0, w1
-	bgt	.L1421
-	cmp	w20, w23
-	bne	.L1421
-	add	x19, x19, :lo12:.LANCHOR0
+	bgt	.L1496
+	cmp	w21, w24
+	bne	.L1496
+	ldrh	w0, [x22, 3240]
+	cmp	w0, 3
+	bhi	.L1496
 	mov	w0, -1
-	strh	wzr, [x19, 3240]
-	strh	w0, [x19, 2672]
-	b	.L1479
-.L1421:
-	cbnz	w1, .L1422
+	strh	wzr, [x22, 3240]
+	strh	w0, [x22, 2672]
+.L1557:
+	ldrh	w0, [x22, 3960]
+	b	.L1447
+.L1496:
+	cbnz	w1, .L1497
 	mov	w0, -1
 	bl	decrement_vpc_count
 	ldrh	w0, [x22, 3240]
 	add	w0, w0, 1
 	strh	w0, [x22, 3240]
-	b	.L1415
-.L1422:
+	b	.L1490
+.L1497:
 	add	x0, x19, :lo12:.LANCHOR0
 	strb	wzr, [x0, 2680]
 	ldrh	w0, [x0, 2424]
 	cmp	w0, w6
-	bne	.L1423
+	bne	.L1498
 	adrp	x0, .LC1
-	mov	w2, 658
-	mov	x1, x24
+	mov	w2, 700
+	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1423:
+	bl	sftl_printk
+.L1498:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w0, [x0, 2472]
 	cmp	w1, w0
-	bne	.L1424
+	bne	.L1499
 	adrp	x0, .LC1
-	mov	w2, 659
-	mov	x1, x24
+	mov	w2, 701
+	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1424:
+	bl	sftl_printk
+.L1499:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 2672]
 	ldrh	w0, [x0, 2520]
 	cmp	w1, w0
-	bne	.L1425
+	bne	.L1500
 	adrp	x0, .LC1
-	mov	w2, 660
-	mov	x1, x24
+	mov	w2, 702
+	mov	x1, x25
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1425:
-	add	x23, x19, :lo12:.LANCHOR0
-	add	x22, x23, 2672
-	mov	x0, x22
+	bl	sftl_printk
+.L1500:
+	add	x22, x19, :lo12:.LANCHOR0
+	add	x24, x22, 2672
+	mov	x0, x24
 	bl	make_superblock
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	ldrh	w2, [x23, 2672]
-	ldr	x1, [x23, 2376]
-	strh	wzr, [x0, 126]
+	ldrh	w1, [x22, 2672]
+	ldr	x0, [x22, 2376]
+	strh	wzr, [x22, 3962]
+	ldrh	w0, [x0, x1, lsl 1]
+	strh	w0, [x22, 3964]
+	strh	wzr, [x22, 2674]
+	strb	wzr, [x22, 2678]
+.L1489:
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	str	w0, [x1, 3408]
+	ldrh	w26, [x1, 106]
+	cbz	w23, .L1501
+	ldrh	w0, [x1, 36]
+	ldrh	w2, [x1, 2672]
+	ldr	x1, [x1, 2376]
+	mul	w0, w0, w26
 	ldrh	w1, [x1, x2, lsl 1]
-	strh	w1, [x0, 128]
-	strh	wzr, [x23, 2674]
-	strb	wzr, [x23, 2678]
-.L1414:
-	bl	FtlReadRefresh
+	sub	w0, w0, w1
+	mov	w1, 4
+	sdiv	w0, w0, w1
+	add	w20, w20, w0
+	and	w20, w20, 65535
+.L1501:
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, 1
-	ldrh	w26, [x0, 106]
-	str	w1, [x0, 4000]
 	ldrh	w0, [x0, 2674]
-	add	w1, w0, w21
+	add	w1, w0, w20
 	cmp	w1, w26
-	ble	.L1426
-	sub	w21, w26, w0
-	and	w21, w21, 65535
-.L1426:
-	mov	w25, 0
-.L1427:
-	cmp	w21, w25, uxth
-	bls	.L1435
+	ble	.L1502
+	sub	w20, w26, w0
+	and	w20, w20, 65535
+.L1502:
+	mov	w27, 0
+.L1503:
+	cmp	w20, w27, uxth
+	bls	.L1511
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w23, 0
+	mov	w24, 0
 	add	x3, x0, 2688
 	mov	w1, 0
 	mov	w6, 65535
 	ldrh	w4, [x0, 2674]
 	ldrh	w7, [x0, 36]
-	add	w4, w4, w25
-	b	.L1436
-.L1429:
+	add	w4, w4, w27
+	b	.L1512
+.L1505:
 	ldrh	w2, [x3]
 	cmp	w2, w6
-	beq	.L1428
+	beq	.L1504
 	ldr	x5, [x0, 3280]
-	ubfiz	x8, x23, 5, 16
-	add	w23, w23, 1
+	ubfiz	x8, x24, 5, 16
+	add	w24, w24, 1
 	orr	w2, w4, w2, lsl 10
 	add	x5, x5, x8
-	and	w23, w23, 65535
+	and	w24, w24, 65535
 	str	w2, [x5, 4]
-.L1428:
+.L1504:
 	add	w1, w1, 1
 	add	x3, x3, 2
 	and	w1, w1, 65535
-.L1436:
+.L1512:
 	cmp	w1, w7
-	bne	.L1429
+	bne	.L1505
 	add	x22, x19, :lo12:.LANCHOR0
-	mov	w1, w23
-	mov	x27, 0
+	mov	w1, w24
+	mov	x28, 0
 	ldrb	w2, [x22, 2680]
 	ldr	x0, [x22, 3280]
 	bl	FlashReadPages
-	ubfiz	x0, x23, 5, 16
+	ubfiz	x0, x24, 5, 16
 	str	x0, [x29, 104]
-.L1430:
+.L1506:
 	ldr	x0, [x29, 104]
-	cmp	x27, x0
-	bne	.L1434
-	add	w25, w25, 1
-	b	.L1427
-.L1434:
+	cmp	x0, x28
+	bne	.L1510
+	add	w27, w27, 1
+	b	.L1503
+.L1510:
 	ldr	x0, [x22, 3280]
-	add	x1, x0, x27
-	ldr	w0, [x0, x27]
+	add	x1, x0, x28
+	ldr	w0, [x0, x28]
 	cmn	w0, #1
-	beq	.L1431
-	ldr	x23, [x1, 16]
+	beq	.L1507
+	ldr	x24, [x1, 16]
 	mov	w0, 61589
-	ldrh	w1, [x23]
+	ldrh	w1, [x24]
 	cmp	w1, w0
-	bne	.L1431
-	ldr	w28, [x23, 8]
-	cmn	w28, #1
-	bne	.L1432
+	bne	.L1507
+	ldr	w4, [x24, 8]
+	cmn	w4, #1
+	bne	.L1508
+	str	w4, [x29, 96]
+	mov	w2, 736
+	mov	x1, x25
 	adrp	x0, .LC1
-	mov	w2, 696
-	mov	x1, x24
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1432:
+	bl	sftl_printk
+	ldr	w4, [x29, 96]
+.L1508:
 	mov	w2, 0
 	add	x1, x29, 124
-	mov	w0, w28
+	mov	w0, w4
 	bl	log2phys
 	ldr	x0, [x22, 3280]
 	ldr	w1, [x29, 124]
-	add	x0, x0, x27
+	add	x0, x0, x28
 	ldr	w2, [x0, 4]
 	cmp	w2, w1
-	bne	.L1431
-	adrp	x28, .LANCHOR3
-	add	x2, x28, :lo12:.LANCHOR3
-	ldr	w0, [x0, 24]
-	ldrh	w1, [x2, 126]
+	bne	.L1507
+	ldrh	w1, [x22, 3962]
+	ldr	x2, [x22, 3432]
 	add	w1, w1, 1
-	strh	w1, [x2, 126]
-	ldr	x2, [x22, 4024]
+	strh	w1, [x22, 3962]
 	ldr	w1, [x22, 3248]
+	ldr	w0, [x0, 24]
 	add	x1, x2, x1, lsl 5
 	str	x1, [x29, 96]
 	str	w0, [x1, 24]
@@ -10151,105 +10584,138 @@ rk_ftl_garbage_collect:
 	ldr	x1, [x29, 96]
 	str	w0, [x1, 4]
 	ldr	w0, [x22, 3248]
-	ldr	x1, [x22, 4024]
+	ldr	x1, [x22, 3432]
 	add	x0, x1, x0, lsl 5
 	ldr	x1, [x22, 3280]
-	add	x1, x1, x27
+	add	x1, x1, x28
 	ldr	x2, [x1, 8]
 	str	x2, [x0, 8]
 	ldr	x1, [x1, 16]
 	str	x1, [x0, 16]
 	ldr	w0, [x29, 124]
 	mov	w1, 1
-	str	w0, [x23, 12]
+	str	w0, [x24, 12]
 	ldrh	w0, [x22, 2520]
-	strh	w0, [x23, 2]
+	strh	w0, [x24, 2]
 	ldr	w0, [x22, 2624]
-	str	w0, [x23, 4]
+	str	w0, [x24, 4]
 	ldr	w0, [x22, 3248]
 	add	w0, w0, 1
 	str	w0, [x22, 3248]
 	ldr	x0, [x22, 3280]
-	add	x0, x0, x27
+	add	x0, x0, x28
 	bl	FtlGcBufAlloc
 	ldrb	w1, [x22, 2527]
 	ldr	w0, [x22, 3248]
 	cmp	w1, w0
-	beq	.L1433
+	beq	.L1509
 	ldrh	w0, [x22, 2524]
-	cbnz	w0, .L1431
-.L1433:
+	cbnz	w0, .L1507
+.L1509:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1431
+	cbz	w0, .L1507
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x28, x28, :lo12:.LANCHOR3
-	str	wzr, [x19, 4000]
-	ldrh	w0, [x28, 124]
-	b	.L1372
-.L1431:
-	add	x27, x27, 32
-	b	.L1430
-.L1435:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 2674]
-	add	w21, w21, w0
-	and	w21, w21, 65535
-	strh	w21, [x1, 2674]
-	cmp	w26, w21
-	adrp	x21, .LANCHOR3
-	bls	.L1437
-	add	x0, x21, :lo12:.LANCHOR3
-	ldrh	w1, [x0, 126]
-	ldrh	w0, [x0, 128]
-	cmp	w1, w0
-	bne	.L1438
-.L1437:
+	ldrh	w0, [x19, 3960]
+	str	wzr, [x19, 3408]
+	b	.L1447
+.L1507:
+	add	x28, x28, 32
+	b	.L1506
+.L1511:
 	add	x22, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x22, 2674]
+	add	w20, w20, w0
+	and	w20, w20, 65535
+	strh	w20, [x22, 2674]
+	cmp	w26, w20
+	bhi	.L1513
 	ldr	w0, [x22, 3248]
-	cbz	w0, .L1439
+	cbz	w0, .L1514
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L1439
-	str	wzr, [x22, 4000]
-	b	.L1477
-.L1439:
-	add	x0, x21, :lo12:.LANCHOR3
-	ldrh	w0, [x0, 126]
-	cbnz	w0, .L1440
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 2672]
-	ldr	x2, [x1, 2376]
-	lsl	x0, x0, 1
-	ldrh	w3, [x2, x0]
-	cbz	w3, .L1440
-	strh	wzr, [x2, x0]
-	ldrh	w0, [x1, 2672]
+	cbz	w0, .L1514
+	str	wzr, [x22, 3408]
+	b	.L1557
+.L1514:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0, 3962]
+	cbnz	w1, .L1515
+	ldrh	w1, [x0, 2672]
+	ldr	x2, [x0, 2376]
+	lsl	x1, x1, 1
+	ldrh	w3, [x2, x1]
+	cbz	w3, .L1515
+	strh	wzr, [x2, x1]
+	ldrh	w0, [x0, 2672]
 	bl	update_vpc_list
-	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L1440:
+.L1515:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, -1
 	strh	w1, [x0, 2672]
-.L1438:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 2416]
-	cmp	w0, 2
-	bhi	.L1441
-	ldrh	w21, [x1, 106]
-	b	.L1413
-.L1441:
-	add	x21, x21, :lo12:.LANCHOR3
-	str	wzr, [x1, 4000]
-	ldrh	w1, [x21, 124]
-	cmp	w1, 0
-	csinc	w0, w1, w0, ne
-	b	.L1372
-.L1444:
+.L1513:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0, 2416]
+	str	wzr, [x0, 3408]
+	cmp	w1, 2
+	bhi	.L1516
+	ldrh	w20, [x0, 106]
+	b	.L1517
+.L1516:
+	ldrh	w0, [x0, 3960]
+	cmp	w0, 0
+	csinc	w0, w0, w1, ne
+	b	.L1447
+.L1520:
 	mov	w0, 0
-	b	.L1372
+	b	.L1447
 	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
+	.global	sftl_init
+	.type	sftl_init, %function
+sftl_init:
+	stp	x29, x30, [sp, -32]!
+	adrp	x1, .LC70
+	add	x1, x1, :lo12:.LC70
+	mov	w0, -1
+	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	adrp	x20, .LANCHOR2
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	str	w0, [x20, #:lo12:.LANCHOR2]
+	adrp	x0, .LC71
+	add	x0, x0, :lo12:.LC71
+	bl	sftl_printk
+	mov	x0, x19
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x19, 40]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbnz	w0, .L1562
+	bl	FtlSysBlkInit
+	cbnz	w0, .L1562
+	mov	w0, 1
+	str	w0, [x20, #:lo12:.LANCHOR2]
+	ldrh	w0, [x19, 2416]
+	cmp	w0, 15
+	bhi	.L1562
+	mov	w19, 8129
+.L1561:
+	mov	w1, 1
+	mov	w0, 0
+	bl	rk_ftl_garbage_collect
+	subs	w19, w19, #1
+	bne	.L1561
+.L1562:
+	mov	w0, 0
+	ldp	x19, x20, [sp, 16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	sftl_init, .-sftl_init
+	.align	2
 	.global	sftl_gc
 	.type	sftl_gc, %function
 sftl_gc:
@@ -10273,17 +10739,17 @@ FtlRead:
 	mov	w19, w1
 	stp	x23, x24, [sp, 48]
 	mov	x23, x3
-	stp	x27, x28, [sp, 80]
-	mov	w27, w2
-	stp	x21, x22, [sp, 32]
 	stp	x25, x26, [sp, 64]
-	bne	.L1483
+	mov	w25, w2
+	stp	x21, x22, [sp, 32]
+	stp	x27, x28, [sp, 80]
+	bne	.L1568
 	mov	x2, x3
-	mov	w1, w27
+	mov	w1, w25
 	add	w0, w19, 256
 	bl	FtlVendorPartRead
 	mov	w21, w0
-.L1482:
+.L1567:
 	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
@@ -10292,73 +10758,75 @@ FtlRead:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 160
 	ret
-.L1483:
+.L1568:
 	add	w0, w1, w2
 	str	w0, [x29, 128]
 	adrp	x0, .LANCHOR0
-	add	x25, x0, :lo12:.LANCHOR0
+	add	x3, x0, :lo12:.LANCHOR0
 	add	w2, w1, w2
 	str	x0, [x29, 96]
-	ldr	w1, [x25, 144]
+	ldr	w1, [x3, 144]
 	cmp	w2, w1
-	bhi	.L1503
+	bhi	.L1589
 	adrp	x0, .LANCHOR2
 	ldr	w21, [x0, #:lo12:.LANCHOR2]
 	cmn	w21, #1
-	beq	.L1482
-	bl	FtlCacheWriteBack
+	beq	.L1567
+	ldrh	w0, [x3, 62]
+	sub	w24, w2, #1
+	mov	x26, x3
 	mov	w28, 0
-	ldrh	w0, [x25, 62]
-	add	w1, w19, w27
-	sub	w24, w1, #1
 	mov	w21, 0
 	stp	wzr, wzr, [x29, 132]
 	str	wzr, [x29, 140]
-	udiv	w26, w19, w0
+	udiv	w27, w19, w0
 	udiv	w24, w24, w0
-	ldr	w0, [x25, 2588]
-	mov	w20, w26
-	sub	w22, w24, w26
+	ldr	w0, [x3, 2616]
+	add	w0, w0, w25
+	str	w0, [x3, 2616]
+	ldr	w0, [x3, 2588]
+	mov	w20, w27
+	sub	w22, w24, w27
 	add	w22, w22, 1
 	add	w0, w0, w22
-	str	w0, [x25, 2588]
-.L1485:
-	cbnz	w22, .L1501
+	str	w0, [x3, 2588]
+.L1570:
+	cbnz	w22, .L1587
 	ldr	x0, [x29, 96]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 3324]
-	cbnz	w1, .L1502
+	cbnz	w1, .L1588
 	ldrh	w0, [x0, 2416]
 	cmp	w0, 31
-	bhi	.L1482
-.L1502:
+	bhi	.L1567
+.L1588:
 	mov	w1, 1
 	mov	w0, 0
 	bl	rk_ftl_garbage_collect
-	b	.L1482
-.L1501:
+	b	.L1567
+.L1587:
 	add	x1, x29, 156
 	mov	w2, 0
 	mov	w0, w20
 	bl	log2phys
 	ldr	w1, [x29, 156]
 	cmn	w1, #1
-	bne	.L1486
+	bne	.L1571
 	mov	w5, 0
-.L1487:
-	ldrh	w0, [x25, 62]
+.L1572:
+	ldrh	w0, [x26, 62]
 	cmp	w5, w0
-	bcc	.L1489
-.L1490:
+	bcc	.L1574
+.L1575:
 	add	w20, w20, 1
 	subs	w22, w22, #1
-	beq	.L1494
-	ldrh	w0, [x25, 36]
+	beq	.L1579
+	ldrh	w0, [x26, 36]
 	cmp	w28, w0, lsl 2
-	bne	.L1485
-.L1494:
-	cbz	w28, .L1485
-	ldr	x0, [x25, 4016]
+	bne	.L1570
+.L1579:
+	cbz	w28, .L1570
+	ldr	x0, [x26, 3424]
 	mov	w1, w28
 	mov	w2, 0
 	bl	FlashReadPages
@@ -10374,54 +10842,63 @@ FtlRead:
 	ubfiz	x0, x28, 5, 32
 	mov	x28, 0
 	str	x0, [x29, 104]
-.L1500:
-	ldr	x0, [x25, 4016]
+.L1586:
+	ldr	x0, [x26, 3424]
 	add	x0, x0, x28
 	ldr	w1, [x0, 24]
-	cmp	w26, w1
-	bne	.L1496
+	cmp	w27, w1
+	bne	.L1581
 	ldr	x1, [x0, 8]
-	ldr	x0, [x25, 3992]
+	ldr	x0, [x26, 3472]
 	cmp	x1, x0
-	bne	.L1497
+	bne	.L1582
 	ldr	x0, [x29, 120]
 	ldr	w2, [x29, 116]
 	add	x1, x1, x0
 	mov	x0, x23
-.L1513:
+.L1599:
 	bl	ftl_memcpy
-.L1497:
-	ldr	x0, [x25, 4016]
-	add	x1, x0, x28
-	ldr	w2, [x0, x28]
+.L1582:
+	ldr	x0, [x26, 3424]
+	add	x0, x0, x28
+	ldr	x1, [x0, 16]
+	ldr	w2, [x0, 24]
+	ldr	w1, [x1, 8]
+	cmp	w2, w1
+	beq	.L1583
+	ldr	w1, [x26, 2792]
+	add	w1, w1, 1
+	str	w1, [x26, 2792]
+.L1583:
+	ldr	w2, [x0]
 	cmn	w2, #1
-	bne	.L1498
-	ldr	w0, [x25, 2792]
+	bne	.L1584
+	ldr	w1, [x26, 2792]
 	mov	w21, w2
-	add	w0, w0, 1
-	str	w0, [x25, 2792]
-.L1498:
-	ldr	w0, [x1]
-	cmp	w0, 256
-	bne	.L1499
-	ldr	w0, [x1, 4]
+	add	w1, w1, 1
+	str	w1, [x26, 2792]
+.L1584:
+	ldr	w1, [x0]
+	cmp	w1, 256
+	bne	.L1585
+	ldr	w0, [x0, 4]
 	lsr	w0, w0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L1499:
+.L1585:
 	ldr	x0, [x29, 104]
 	add	x28, x28, 32
 	cmp	x0, x28
-	bne	.L1500
+	bne	.L1586
 	mov	w28, 0
-	b	.L1485
-.L1489:
+	b	.L1570
+.L1574:
 	madd	w0, w20, w0, w5
 	cmp	w19, w0
-	bhi	.L1488
+	bhi	.L1573
 	ldr	w1, [x29, 128]
 	cmp	w1, w0
-	bls	.L1488
+	bls	.L1573
 	sub	w0, w0, w19
 	str	w5, [x29, 120]
 	lsl	w0, w0, 9
@@ -10430,48 +10907,48 @@ FtlRead:
 	add	x0, x23, x0
 	bl	ftl_memset
 	ldr	w5, [x29, 120]
-.L1488:
+.L1573:
 	add	w5, w5, 1
-	b	.L1487
-.L1486:
-	ldr	x0, [x25, 4016]
+	b	.L1572
+.L1571:
+	ldr	x0, [x26, 3424]
 	ubfiz	x2, x28, 5, 32
-	cmp	w20, w26
+	cmp	w20, w27
 	add	x0, x0, x2
 	str	w1, [x0, 4]
-	ldrh	w0, [x25, 62]
-	bne	.L1491
-	ldr	x1, [x25, 4016]
-	ldr	x5, [x25, 3992]
+	ldrh	w0, [x26, 62]
+	bne	.L1576
+	ldr	x1, [x26, 3424]
+	ldr	x5, [x26, 3472]
 	add	x1, x1, x2
 	str	x5, [x1, 8]
 	udiv	w5, w19, w0
 	msub	w3, w5, w0, w19
 	str	w3, [x29, 140]
 	sub	w5, w0, w3
-	cmp	w27, w5
-	csel	w3, w27, w5, ls
+	cmp	w25, w5
+	csel	w3, w25, w5, ls
 	str	w3, [x29, 136]
 	cmp	w3, w0
-	bne	.L1492
+	bne	.L1577
 	str	x23, [x1, 8]
-.L1492:
-	ldr	x0, [x25, 4016]
-	ldr	x1, [x25, 3984]
+.L1577:
+	ldr	x0, [x26, 3424]
+	ldr	x1, [x26, 3520]
 	add	x2, x0, x2
-	ldrh	w0, [x25, 116]
+	ldrh	w0, [x26, 116]
 	str	w20, [x2, 24]
 	mul	w0, w0, w28
 	add	w28, w28, 1
 	and	x0, x0, 4294967292
 	add	x0, x1, x0
 	str	x0, [x2, 16]
-	b	.L1490
-.L1491:
+	b	.L1575
+.L1576:
 	cmp	w20, w24
-	bne	.L1493
-	ldr	x5, [x25, 4016]
-	ldr	x1, [x25, 3976]
+	bne	.L1578
+	ldr	x5, [x26, 3424]
+	ldr	x1, [x26, 3480]
 	add	x5, x5, x2
 	ldr	w3, [x29, 128]
 	str	x1, [x5, 8]
@@ -10479,38 +10956,38 @@ FtlRead:
 	sub	w3, w3, w1
 	str	w3, [x29, 132]
 	cmp	w0, w3
-	bne	.L1492
+	bne	.L1577
 	sub	w1, w1, w19
 	lsl	w1, w1, 9
 	add	x1, x23, x1
 	str	x1, [x5, 8]
-	b	.L1492
-.L1493:
-	ldr	x1, [x25, 4016]
+	b	.L1577
+.L1578:
+	ldr	x1, [x26, 3424]
 	mul	w0, w0, w20
 	add	x1, x1, x2
 	sub	w0, w0, w19
 	lsl	w0, w0, 9
 	add	x0, x23, x0
 	str	x0, [x1, 8]
-	b	.L1492
-.L1496:
+	b	.L1577
+.L1581:
 	cmp	w24, w1
-	bne	.L1497
+	bne	.L1582
 	ldr	x1, [x0, 8]
-	ldr	x0, [x25, 3976]
+	ldr	x0, [x26, 3480]
 	cmp	x1, x0
-	bne	.L1497
-	ldrh	w0, [x25, 62]
+	bne	.L1582
+	ldrh	w0, [x26, 62]
 	ldr	w2, [x29, 112]
 	mul	w0, w0, w24
 	sub	w0, w0, w19
 	lsl	w0, w0, 9
 	add	x0, x23, x0
-	b	.L1513
-.L1503:
+	b	.L1599
+.L1589:
 	mov	w21, -1
-	b	.L1482
+	b	.L1567
 	.size	FtlRead, .-FtlRead
 	.align	2
 	.global	sftl_read
@@ -10537,17 +11014,17 @@ FtlWrite:
 	stp	x23, x24, [sp, 48]
 	mov	w23, w1
 	stp	x25, x26, [sp, 64]
-	mov	w26, w2
-	stp	x27, x28, [sp, 80]
-	mov	x27, x3
+	mov	x26, x3
 	stp	x19, x20, [sp, 16]
 	stp	x21, x22, [sp, 32]
-	bne	.L1517
+	stp	x27, x28, [sp, 80]
+	str	w2, [x29, 172]
+	bne	.L1603
+	add	w0, w1, 256
+	ldr	w1, [x29, 172]
 	mov	x2, x3
-	mov	w1, w26
-	add	w0, w23, 256
 	bl	FtlVendorPartWrite
-.L1516:
+.L1602:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -10555,882 +11032,960 @@ FtlWrite:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 224
 	ret
-.L1517:
-	add	w3, w1, w2
-	adrp	x20, .LANCHOR0
-	add	x2, x20, :lo12:.LANCHOR0
-	ldr	w0, [x2, 144]
-	cmp	w3, w0
-	bhi	.L1559
-	adrp	x1, .LANCHOR2
-	str	x1, [x29, 136]
-	ldr	w0, [x1, #:lo12:.LANCHOR2]
+.L1603:
+	ldr	w0, [x29, 172]
+	adrp	x19, .LANCHOR0
+	add	x1, x19, :lo12:.LANCHOR0
+	add	w0, w23, w0
+	str	w0, [x29, 148]
+	ldr	w0, [x1, 144]
+	ldr	w2, [x29, 148]
+	cmp	w2, w0
+	bhi	.L1639
+	adrp	x2, .LANCHOR2
+	str	x2, [x29, 136]
+	add	x3, x2, :lo12:.LANCHOR2
+	ldr	w0, [x2, #:lo12:.LANCHOR2]
 	cmn	w0, #1
-	beq	.L1516
-	ldrh	w1, [x2, 62]
-	adrp	x4, .LANCHOR3
-	sub	w3, w3, #1
-	add	x5, x4, :lo12:.LANCHOR3
+	beq	.L1602
 	mov	w0, 2048
-	str	x4, [x29, 104]
-	udiv	w22, w23, w1
-	str	w0, [x5, 132]
-	udiv	w0, w3, w1
-	ldr	x3, [x5, -56]
-	sub	w24, w0, w22
-	str	w0, [x29, 148]
-	ldr	w0, [x2, 2596]
-	add	w25, w24, 1
-	add	w0, w0, w25
-	str	w0, [x2, 2596]
-	cbz	x3, .L1519
-	ldr	w0, [x3, 24]
-	cmp	w22, w0
-	beq	.L1520
-	bl	FtlCacheWriteBack
-.L1519:
-	ldr	x0, [x29, 136]
-	add	x19, x20, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR2
-	ldr	w0, [x0, 8]
-	cbz	w0, .L1561
-	ldrh	w1, [x19, 2428]
-	add	x0, x19, 2424
-	add	x19, x19, 2472
-	cmp	w1, 0
-	csel	x19, x19, x0, eq
-.L1522:
+	ldr	w2, [x29, 148]
+	str	w0, [x1, 3968]
+	add	x20, x1, 2424
+	ldrh	w0, [x1, 62]
+	sub	w2, w2, #1
+	udiv	w25, w23, w0
+	udiv	w0, w2, w0
+	ldr	w2, [x29, 172]
+	str	w0, [x29, 144]
+	sub	w0, w0, w25
+	add	w24, w0, 1
+	str	w0, [x29, 132]
+	ldr	w0, [x1, 2612]
+	add	w0, w0, w2
+	str	w0, [x1, 2612]
+	ldr	w0, [x1, 2596]
+	add	w0, w0, w24
+	str	w0, [x1, 2596]
+	ldr	w0, [x3, 8]
+	cbz	w0, .L1605
+	ldrh	w0, [x20, 4]
+	add	x1, x1, 2472
+	cmp	w0, 0
+	csel	x20, x1, x20, eq
+.L1605:
 	adrp	x0, .LANCHOR1
-	mov	w21, w22
+	mov	w21, w25
 	add	x0, x0, :lo12:.LANCHOR1
-	add	x0, x0, 672
+	add	x0, x0, 712
 	str	x0, [x29, 160]
-.L1523:
-	cbz	w25, .L1557
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x19, 6]
+.L1606:
+	cbnz	w24, .L1634
+	ldr	w1, [x29, 132]
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 0
+	bl	rk_ftl_garbage_collect
+	ldrh	w0, [x19, 2416]
+	cmp	w0, 5
+	bls	.L1635
+.L1637:
+	mov	w0, 0
+	b	.L1602
+.L1634:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1524
+	bcc	.L1607
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
-	mov	w2, 1012
+	mov	w2, 1011
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1524:
-	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1525
-	bl	FtlCacheWriteBack
-	add	x0, x20, :lo12:.LANCHOR0
+	bl	sftl_printk
+.L1607:
+	ldrh	w0, [x20, 4]
+	cbnz	w0, .L1608
+	add	x0, x19, :lo12:.LANCHOR0
 	add	x1, x0, 2424
-	cmp	x19, x1
-	bne	.L1526
+	cmp	x20, x1
+	bne	.L1609
 	add	x0, x0, 2472
 	ldrh	w1, [x0, 4]
-	cbnz	w1, .L1527
+	cbnz	w1, .L1610
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
-.L1527:
-	add	x19, x20, :lo12:.LANCHOR0
-	add	x24, x19, 2424
-	add	x19, x19, 2472
-	mov	x0, x24
+.L1610:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x22, x20, 2424
+	add	x20, x20, 2472
+	mov	x0, x22
 	bl	allocate_new_data_superblock
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	ldr	w0, [x0, 8]
 	cmp	w0, 0
-	csel	x19, x19, x24, ne
-.L1528:
-	ldrh	w0, [x19, 4]
-	cbnz	w0, .L1525
-	mov	x0, x19
+	csel	x20, x20, x22, ne
+.L1611:
+	ldrh	w0, [x20, 4]
+	cbnz	w0, .L1608
+	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L1525:
-	ldrh	w0, [x19, 4]
-	ldrb	w1, [x19, 7]
-	cmp	w0, w25
-	csel	w0, w0, w25, ls
+.L1608:
+	ldrh	w0, [x20, 4]
+	ldrb	w1, [x20, 7]
+	cmp	w0, w24
+	csel	w0, w0, w24, ls
 	lsl	w1, w1, 2
 	cmp	w0, w1
 	csel	w0, w0, w1, ls
-	str	w0, [x29, 132]
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x19, 6]
+	str	w0, [x29, 128]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1529
+	bcc	.L1612
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
-	mov	w2, 1045
+	mov	w2, 1044
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1529:
-	str	xzr, [x29, 168]
-.L1530:
-	ldr	w1, [x29, 132]
-	ldr	w28, [x29, 168]
-	cmp	w28, w1
-	bcc	.L1551
-	mov	x28, x1
-.L1531:
-	ldr	x0, [x29, 104]
-	add	x0, x0, :lo12:.LANCHOR3
-	ldr	x0, [x0, -56]
-	cbz	x0, .L1552
-	sub	w25, w25, #1
-	subs	w28, w28, #1
-	bne	.L1552
-.L1557:
-	ldr	w0, [x29, 148]
-	add	x20, x20, :lo12:.LANCHOR0
-	sub	w1, w0, w22
-	mov	w0, 0
-	bl	rk_ftl_garbage_collect
-	ldrh	w0, [x20, 2416]
-	cmp	w0, 15
-	bhi	.L1554
-	mov	w21, 65535
-	mov	w19, 128
-.L1577:
-	ldrh	w0, [x20, 2672]
-	cmp	w0, w21
-	bne	.L1558
-	ldrh	w0, [x20, 3320]
-	cmp	w0, w21
-	bne	.L1558
-	mov	w0, 0
-	bl	List_get_gc_head_node
-	bl	FtlGcRefreshBlock
-.L1558:
-	mov	w1, 1
-	strh	w19, [x20, 3234]
-	mov	w0, w1
-	strh	w19, [x20, 3232]
-	bl	rk_ftl_garbage_collect
-	mov	w1, 1
-	mov	w0, 0
-	bl	rk_ftl_garbage_collect
-	ldrh	w0, [x20, 2416]
-	cmp	w0, 8
-	bls	.L1577
-	b	.L1554
-.L1520:
-	ldr	w0, [x2, 2600]
-	ldr	x3, [x3, 8]
-	add	w0, w0, 1
-	str	w0, [x2, 2600]
-	msub	w0, w22, w1, w23
-	sub	w1, w1, w0
-	cmp	w26, w1
-	lsl	w0, w0, 9
-	csel	w19, w26, w1, ls
-	add	x0, x3, x0
-	lsl	w21, w19, 9
-	mov	x1, x27
-	mov	w2, w21
-	bl	ftl_memcpy
-	cbnz	w24, .L1521
-.L1554:
-	mov	w0, 0
-	b	.L1516
-.L1521:
-	sub	w26, w26, w19
-	add	w23, w23, w19
-	add	x27, x27, x21
-	add	w22, w22, 1
-	bl	FtlCacheWriteBack
-	mov	w25, w24
-	b	.L1519
-.L1561:
-	add	x19, x19, 2424
-	b	.L1522
-.L1526:
+	bl	sftl_printk
+.L1612:
+	mov	x28, 0
+.L1613:
+	ldr	w0, [x29, 128]
+	mov	w22, w28
+	cmp	w28, w0
+	bcc	.L1632
+	mov	x22, x0
+.L1614:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	x3, x20
+	mov	w2, 0
+	mov	w1, w22
+	ldr	x0, [x0, 3440]
+	bl	FtlProgPages
+	cmp	w24, w22
+	bcs	.L1633
+	ldr	x1, [x29, 160]
+	adrp	x0, .LC1
+	mov	w2, 1121
+	add	x0, x0, :lo12:.LC1
+	bl	sftl_printk
+.L1633:
+	sub	w24, w24, w22
+	b	.L1606
+.L1609:
 	ldr	x0, [x29, 136]
 	add	x0, x0, :lo12:.LANCHOR2
 	str	wzr, [x0, 8]
 	ldrh	w0, [x1, 4]
-	cbnz	w0, .L1564
-	mov	x0, x19
+	cbnz	w0, .L1644
+	mov	x0, x20
 	bl	allocate_new_data_superblock
-	b	.L1528
-.L1564:
-	mov	x19, x1
-	b	.L1525
-.L1551:
-	ldrh	w0, [x19, 4]
-	cbz	w0, .L1531
+	b	.L1611
+.L1644:
+	mov	x20, x1
+	b	.L1608
+.L1632:
+	ldrh	w0, [x20, 4]
+	cbz	w0, .L1614
 	add	x1, x29, 188
 	mov	w2, 0
 	mov	w0, w21
 	bl	log2phys
-	mov	x0, x19
+	mov	x0, x20
+	lsl	x27, x28, 5
 	bl	get_new_active_ppa
-	add	x3, x20, :lo12:.LANCHOR0
-	ldr	x1, [x29, 168]
-	str	x3, [x29, 152]
-	lsl	x24, x1, 5
-	ldr	x1, [x3, 4032]
-	ldrh	w2, [x3, 116]
-	add	x1, x1, x24
+	add	x4, x19, :lo12:.LANCHOR0
+	str	x4, [x29, 152]
+	ldr	x1, [x4, 3440]
+	ldrh	w2, [x4, 116]
+	add	x1, x1, x27
 	str	w0, [x1, 4]
-	mul	w28, w28, w2
-	ldr	x0, [x3, 4032]
-	and	x1, x28, 4294967292
+	mul	w22, w22, w2
+	ldr	x0, [x4, 3440]
+	and	x1, x22, 4294967292
 	str	x1, [x29, 120]
-	add	x0, x0, x24
-	ldr	x1, [x3, 3984]
+	add	x0, x0, x27
+	ldr	x1, [x4, 3520]
 	ldr	x3, [x29, 120]
 	str	x1, [x29, 112]
-	add	x28, x1, x3
+	add	x22, x1, x3
 	str	w21, [x0, 24]
-	str	x28, [x0, 16]
+	str	x22, [x0, 16]
 	mov	w1, 0
-	mov	x0, x28
+	mov	x0, x22
 	bl	ftl_memset
-	ldr	w0, [x29, 148]
-	cmp	w21, w22
-	ldr	x3, [x29, 152]
+	ldr	w0, [x29, 144]
+	cmp	w21, w25
+	ldr	x4, [x29, 152]
 	ccmp	w21, w0, 4, ne
-	bne	.L1532
-	cmp	w21, w22
-	bne	.L1533
-	ldrh	w2, [x3, 62]
+	bne	.L1615
+	cmp	w21, w25
+	bne	.L1616
+	ldrh	w2, [x4, 62]
 	udiv	w0, w23, w2
 	msub	w0, w0, w2, w23
-	str	w0, [x29, 144]
+	str	w0, [x29, 168]
 	sub	w2, w2, w0
-	cmp	w2, w26
-	csel	w0, w2, w26, ls
+	ldr	w0, [x29, 172]
+	cmp	w2, w0
+	csel	w0, w2, w0, ls
 	str	w0, [x29, 152]
-.L1534:
-	add	x0, x20, :lo12:.LANCHOR0
+.L1617:
+	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x29, 152]
 	ldrh	w1, [x0, 62]
 	cmp	w2, w1
-	bne	.L1535
-	ldr	x0, [x0, 4032]
-	cmp	w21, w22
-	add	x24, x0, x24
-	bne	.L1536
-	str	x27, [x24, 8]
-.L1537:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x19, 6]
+	bne	.L1618
+	ldr	x0, [x0, 3440]
+	cmp	w21, w25
+	add	x3, x0, x27
+	bne	.L1619
+	str	x26, [x3, 8]
+.L1620:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x20, 6]
 	ldrh	w0, [x0, 36]
 	cmp	w1, w0
-	bcc	.L1548
+	bcc	.L1629
 	ldr	x1, [x29, 160]
 	adrp	x0, .LC1
-	mov	w2, 1119
+	mov	w2, 1112
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1548:
+	bl	sftl_printk
+.L1629:
 	ldp	x1, x2, [x29, 112]
 	mov	w0, -3947
+	add	x28, x28, 1
 	strh	w0, [x1, x2]
-	add	x1, x20, :lo12:.LANCHOR0
+	add	x1, x19, :lo12:.LANCHOR0
 	ldr	w0, [x1, 2624]
-	stp	w0, w21, [x28, 4]
+	stp	w0, w21, [x22, 4]
 	add	w21, w21, 1
 	add	w0, w0, 1
 	cmn	w0, #1
 	csel	w0, w0, wzr, ne
 	str	w0, [x1, 2624]
 	ldr	w0, [x29, 188]
-	str	w0, [x28, 12]
-	ldrh	w0, [x19]
-	strh	w0, [x28, 2]
-	ldr	x0, [x29, 168]
-	add	x0, x0, 1
-	str	x0, [x29, 168]
-	b	.L1530
-.L1533:
-	ldrh	w0, [x3, 62]
-	add	w2, w23, w26
-	str	wzr, [x29, 144]
-	msub	w2, w21, w0, w2
+	str	w0, [x22, 12]
+	ldrh	w0, [x20]
+	strh	w0, [x22, 2]
+	b	.L1613
+.L1616:
+	ldr	w0, [x29, 148]
+	ldrh	w2, [x4, 62]
+	str	wzr, [x29, 168]
+	msub	w2, w21, w2, w0
 	and	w0, w2, 65535
 	str	w0, [x29, 152]
-	b	.L1534
-.L1536:
+	b	.L1617
+.L1619:
 	ldr	w0, [x29, 152]
-.L1580:
+.L1651:
 	mul	w0, w0, w21
 	sub	w0, w0, w23
 	lsl	w0, w0, 9
-	add	x0, x27, x0
-	str	x0, [x24, 8]
-	b	.L1537
-.L1535:
-	ldr	x1, [x0, 4032]
-	cmp	w21, w22
-	add	x1, x1, x24
-	bne	.L1538
-	ldr	x0, [x0, 3992]
-.L1579:
+	add	x0, x26, x0
+	str	x0, [x3, 8]
+	b	.L1620
+.L1618:
+	ldr	x1, [x0, 3440]
+	cmp	w21, w25
+	add	x1, x1, x27
+	bne	.L1621
+	ldr	x0, [x0, 3472]
+.L1650:
 	str	x0, [x1, 8]
 	ldr	w0, [x29, 188]
 	cmn	w0, #1
-	beq	.L1540
-	add	x3, x20, :lo12:.LANCHOR0
+	beq	.L1623
+	add	x4, x19, :lo12:.LANCHOR0
 	str	w0, [x29, 196]
 	str	w21, [x29, 216]
 	mov	w2, 0
-	str	x3, [x29, 96]
-	ldr	x0, [x3, 4032]
-	add	x0, x0, x24
+	str	x4, [x29, 104]
+	ldr	x0, [x4, 3440]
+	add	x0, x0, x27
 	ldp	x1, x0, [x0, 8]
 	stp	x1, x0, [x29, 200]
 	mov	w1, 1
 	add	x0, x29, 192
 	bl	FlashReadPages
 	ldr	w0, [x29, 192]
-	ldr	x3, [x29, 96]
+	ldr	x4, [x29, 104]
 	cmn	w0, #1
-	bne	.L1541
-	ldr	w0, [x3, 2792]
+	bne	.L1624
+	ldr	w0, [x4, 2792]
 	add	w0, w0, 1
-	str	w0, [x3, 2792]
-.L1544:
+	str	w0, [x4, 2792]
+.L1627:
 	ldr	w0, [x29, 152]
-	cmp	w21, w22
+	cmp	w21, w25
 	lsl	w2, w0, 9
-	add	x0, x20, :lo12:.LANCHOR0
-	bne	.L1545
-	ldr	x1, [x0, 4032]
-	ldr	w0, [x29, 144]
-	add	x1, x1, x24
+	add	x0, x19, :lo12:.LANCHOR0
+	bne	.L1628
+	ldr	x0, [x0, 3440]
+	mov	x1, x26
+	add	x3, x0, x27
+	ldr	w0, [x29, 168]
+	ldr	x3, [x3, 8]
 	lsl	w0, w0, 9
-	ldr	x3, [x1, 8]
-	mov	x1, x27
 	add	x0, x3, x0
+.L1652:
 	bl	ftl_memcpy
-	ldr	w0, [x29, 148]
-	cmp	w21, w0
-	bne	.L1537
-.L1546:
-	ldrh	w0, [x19, 4]
-	cbz	w0, .L1537
-	ldr	x0, [x29, 104]
-	add	x1, x0, :lo12:.LANCHOR3
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0, 4032]
-	str	x19, [x1, 112]
-	add	x24, x0, x24
-	str	x24, [x1, -56]
-	b	.L1537
-.L1538:
-	ldr	x0, [x0, 3976]
-	b	.L1579
-.L1541:
-	ldr	w0, [x28, 8]
+	b	.L1620
+.L1621:
+	ldr	x0, [x0, 3480]
+	b	.L1650
+.L1624:
+	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1543
-	ldr	w0, [x3, 2792]
+	beq	.L1626
+	ldr	w0, [x4, 2792]
 	mov	w2, w21
 	add	w0, w0, 1
-	str	w0, [x3, 2792]
-	adrp	x0, .LC105
-	add	x0, x0, :lo12:.LC105
-	ldr	w1, [x28, 8]
-	bl	printk
-.L1543:
-	ldr	w0, [x28, 8]
+	str	w0, [x4, 2792]
+	adrp	x0, .LC114
+	add	x0, x0, :lo12:.LC114
+	ldr	w1, [x22, 8]
+	bl	sftl_printk
+.L1626:
+	ldr	w0, [x22, 8]
 	cmp	w21, w0
-	beq	.L1544
+	beq	.L1627
 	ldr	x1, [x29, 160]
-	mov	w2, 1098
+	mov	w2, 1097
 	adrp	x0, .LC1
 	add	x0, x0, :lo12:.LC1
-	bl	printk
-	b	.L1544
-.L1540:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldr	x0, [x1, 4032]
+	bl	sftl_printk
+	b	.L1627
+.L1623:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x0, [x1, 3440]
 	ldrh	w2, [x1, 114]
 	mov	w1, 0
-	add	x0, x0, x24
+	add	x0, x0, x27
 	ldr	x0, [x0, 8]
 	bl	ftl_memset
-	b	.L1544
-.L1545:
+	b	.L1627
+.L1628:
 	ldrh	w1, [x0, 62]
-	ldr	x0, [x0, 4032]
-	add	x0, x0, x24
+	ldr	x0, [x0, 3440]
+	add	x3, x0, x27
 	mul	w1, w1, w21
-	ldr	x0, [x0, 8]
 	sub	w1, w1, w23
+	ldr	x0, [x3, 8]
 	lsl	w1, w1, 9
-	add	x1, x27, x1
-	bl	ftl_memcpy
-	b	.L1546
-.L1532:
-	ldr	x0, [x3, 4032]
-	add	x24, x0, x24
-	ldrh	w0, [x3, 62]
-	b	.L1580
-.L1552:
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	x3, x19
-	mov	w2, 0
-	mov	w1, w28
-	ldr	x0, [x0, 4032]
-	bl	FtlProgPages
-	cmp	w25, w28
-	bcs	.L1555
-	ldr	x1, [x29, 160]
-	adrp	x0, .LC1
-	mov	w2, 1134
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1555:
-	sub	w25, w25, w28
-	b	.L1523
-.L1559:
+	add	x1, x26, x1
+	b	.L1652
+.L1615:
+	ldr	x0, [x4, 3440]
+	add	x3, x0, x27
+	ldrh	w0, [x4, 62]
+	b	.L1651
+.L1635:
+	mov	w20, 256
+	mov	w21, 65535
+	mov	w22, 128
+.L1638:
+	ldrh	w0, [x19, 2672]
+	cmp	w0, w21
+	bne	.L1636
+	ldrh	w0, [x19, 3320]
+	cmp	w0, w21
+	bne	.L1636
+	mov	w0, 0
+	bl	List_get_gc_head_node
+	bl	FtlGcRefreshBlock
+.L1636:
+	mov	w1, 1
+	strh	w22, [x19, 3234]
+	mov	w0, w1
+	strh	w22, [x19, 3232]
+	bl	rk_ftl_garbage_collect
+	mov	w1, 1
+	mov	w0, 0
+	bl	rk_ftl_garbage_collect
+	ldrh	w0, [x19, 2416]
+	cmp	w0, 2
+	bhi	.L1637
+	subs	w20, w20, #1
+	bne	.L1638
+	b	.L1637
+.L1639:
 	mov	w0, -1
-	b	.L1516
+	b	.L1602
 	.size	FtlWrite, .-FtlWrite
 	.align	2
 	.global	sftl_write
 	.type	sftl_write, %function
 sftl_write:
-	stp	x29, x30, [sp, -16]!
-	mov	x3, x2
-	mov	w2, w1
-	mov	w1, w0
+	stp	x29, x30, [sp, -224]!
 	add	x29, sp, 0
+	stp	x19, x20, [sp, 16]
+	add	w19, w0, w1
+	stp	x27, x28, [sp, 80]
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp, 32]
+	sub	w21, w19, #1
+	stp	x23, x24, [sp, 48]
+	mov	w27, w1
+	stp	x25, x26, [sp, 64]
+	mov	w24, w0
+	mov	x28, x2
+	cmp	w21, 63
+	bls	.L1654
+	cmp	w0, 576
+	bls	.L1655
+.L1654:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w1, [x0, 3972]
+	cbz	w1, .L1656
+	ldr	x26, [x0, 3976]
+	mov	w1, 35899
+	movk	w1, 0xfcdc, lsl 16
+	ldr	w2, [x26]
+	cmp	w2, w1
+	beq	.L1657
+.L1674:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x0, [x20, 3976]
+	str	wzr, [x20, 3972]
+	bl	kfree
+	ldr	x0, [x20, 3984]
+	bl	kfree
+.L1656:
+	mov	x3, x28
+	mov	w2, w27
+	mov	w1, w24
 	mov	w0, 0
 	bl	FtlWrite
-	ldp	x29, x30, [sp], 16
+	ldp	x19, x20, [sp, 16]
+	ldp	x21, x22, [sp, 32]
+	ldp	x23, x24, [sp, 48]
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 224
 	ret
+.L1657:
+	ldrh	w19, [x0, 14]
+	mov	w2, 65535
+	ldrh	w22, [x0, 10]
+	mov	x0, 262140
+	mov	w4, 4097
+	add	x3, x26, x0
+	mov	w0, 0
+.L1661:
+	ldr	w1, [x3]
+	cbnz	w1, .L1658
+	ldr	w1, [x26, w0, uxtw 2]
+	add	w0, w0, 1
+	str	w1, [x3], -4
+	cmp	w0, w4
+	sub	w2, w2, #1
+	csel	w0, w0, wzr, cc
+	cmp	w2, 4096
+	bne	.L1661
+	mov	w25, 512
+	b	.L1660
+.L1658:
+	add	w25, w2, 127
+	adrp	x0, .LC115
+	lsr	w25, w25, 7
+	add	x0, x0, :lo12:.LC115
+	mov	w3, w25
+	bl	sftl_printk
+.L1660:
+	and	w19, w19, 255
+	add	x21, x20, :lo12:.LANCHOR0
+	mul	w22, w22, w19
+	mov	w19, 0
+	and	w22, w22, 65535
+	sub	w23, w22, #1
+	add	w23, w23, w25
+	udiv	w23, w23, w22
+	mul	w0, w22, w23
+	str	w23, [x29, 140]
+	stp	wzr, w0, [x29, 152]
+	lsl	w0, w25, 7
+	str	w0, [x29, 136]
+	b	.L1673
+.L1681:
+	str	w0, [x29, 140]
+.L1673:
+	ldr	x0, [x21, 3984]
+	mov	x2, 512
+	mov	w1, 0
+	bl	memset
+	ldrh	w3, [x21, 14]
+	add	x4, x21, 3368
+	ldrh	w2, [x21, 10]
+	and	w0, w3, 255
+	ldr	x5, [x21, 3376]
+	str	x4, [x29, 112]
+	udiv	w1, w19, w3
+	str	w3, [x29, 120]
+	mul	w2, w0, w2
+	str	w0, [x29, 128]
+	str	w0, [x29, 144]
+	mov	w0, 0
+	and	w2, w2, 65535
+	str	w2, [x29, 108]
+	blr	x5
+	ldr	w2, [x29, 108]
+	ldr	w0, [x29, 156]
+	ldr	w3, [x29, 120]
+	cmp	w0, w2
+	ldr	x4, [x29, 112]
+	bls	.L1662
+	add	w1, w2, w19
+	ldr	x4, [x4, 8]
+	str	w2, [x29, 120]
+	mov	w0, 0
+	udiv	w1, w1, w3
+	blr	x4
+	ldr	w2, [x29, 120]
+.L1662:
+	udiv	w5, w19, w2
+	mov	w4, 0
+	mov	w7, 61424
+	msub	w5, w5, w2, w19
+	sub	w6, w19, w5
+.L1663:
+	ldr	w0, [x29, 156]
+	cmp	w0, w4
+	bhi	.L1664
+	ldrh	w5, [x21, 14]
+	mov	w9, 0
+	ldrh	w0, [x21, 10]
+	and	w4, w5, 255
+	ldr	x6, [x21, 3984]
+	mov	w5, w4
+	mul	w0, w4, w0
+	and	w0, w0, 65535
+	udiv	w7, w19, w0
+	msub	w7, w7, w0, w19
+	and	w1, w7, 65535
+	sub	w8, w19, w7
+	sdiv	w0, w1, w4
+	msub	w0, w0, w4, w1
+	and	w0, w0, 65535
+.L1665:
+	cmp	w9, w25
+	bcs	.L1669
+	add	w1, w7, w9
+	sub	w10, w5, w0
+	add	w0, w0, w8
+	ldr	x11, [x21, 3392]
+	and	w10, w10, 65535
+	ubfiz	x2, x9, 9, 16
+	udiv	w1, w1, w4
+	add	x2, x6, x2
+	stp	w5, w10, [x29, 100]
+	add	x3, x29, 160
+	stp	w9, w7, [x29, 108]
+	str	w8, [x29, 120]
+	and	w1, w1, 65535
+	str	x6, [x29, 128]
+	str	w4, [x29, 144]
+	madd	w1, w1, w4, w0
+	mov	w0, 0
+	udiv	w1, w1, w4
+	blr	x11
+	cmn	w0, #1
+	ldp	w5, w10, [x29, 100]
+	ldp	w9, w7, [x29, 108]
+	ldr	w8, [x29, 120]
+	ldr	w4, [x29, 144]
+	ldr	x6, [x29, 128]
+	bne	.L1666
+.L1669:
+	ldr	x0, [x21, 3984]
+	mov	x2, x26
+	mov	w4, 0
+	mov	x1, x0
+.L1667:
+	mov	x5, x1
+	mov	x3, x2
+	add	x1, x1, 4
+	add	x2, x2, 4
+	ldr	w6, [x3]
+	ldr	w7, [x5]
+	cmp	w7, w6
+	beq	.L1670
+	mov	x2, 512
+	mov	w1, 0
+	stp	x3, x5, [x29, 120]
+	str	w4, [x29, 144]
+	bl	memset
+	ldp	x3, x5, [x29, 120]
+	mov	w1, w19
+	ldr	w4, [x29, 144]
+	adrp	x0, .LC116
+	add	x0, x0, :lo12:.LC116
+	ldr	w2, [x5]
+	ldr	w3, [x3]
+	bl	sftl_printk
+	ldr	x3, [x21, 3376]
+	add	x2, x21, 3368
+	mov	w1, w19
+	mov	w0, 0
+	str	x2, [x29, 144]
+	blr	x3
+	cmp	w23, 1
+	bls	.L1680
+	ldr	x2, [x29, 144]
+	add	w1, w22, w19
+	mov	w0, 0
+	ldr	x2, [x2, 8]
+	blr	x2
+.L1680:
+	ldr	w1, [x29, 156]
+	ldr	w0, [x29, 140]
+	add	w19, w19, w1
+	ldr	w1, [x29, 140]
+	add	w0, w23, w0
+	cmp	w1, 15
+	bls	.L1681
+	b	.L1674
+.L1664:
+	ldr	w1, [x29, 144]
+	add	w0, w5, w4
+	ldr	x8, [x21, 3384]
+	ubfiz	x2, x4, 9, 16
+	stp	w5, w7, [x29, 104]
+	add	x3, x29, 160
+	str	w4, [x29, 112]
+	add	x2, x26, x2
+	udiv	w0, w0, w1
+	str	w6, [x29, 120]
+	and	w0, w0, 65535
+	mul	w1, w0, w1
+	stp	w1, w7, [x29, 160]
+	ldr	w1, [x29, 144]
+	udiv	w1, w6, w1
+	add	w1, w1, w0
+	mov	w0, 0
+	blr	x8
+	ldr	w4, [x29, 112]
+	ldr	w0, [x29, 128]
+	ldp	w5, w7, [x29, 104]
+	add	w4, w0, w4
+	ldr	w6, [x29, 120]
+	and	w4, w4, 65535
+	b	.L1663
+.L1666:
+	add	w9, w10, w9
+	mov	w0, 0
+	and	w9, w9, 65535
+	b	.L1665
+.L1670:
+	ldr	w3, [x29, 136]
+	add	w4, w4, 1
+	cmp	w4, w3
+	bne	.L1667
+	ldr	w0, [x29, 152]
+	add	w0, w0, 1
+	str	w0, [x29, 152]
+	cmp	w0, 5
+	bls	.L1680
+	b	.L1674
+.L1655:
+	cmp	w0, 64
+	bne	.L1675
+	add	x22, x20, :lo12:.LANCHOR0
+	mov	w0, 262144
+	bl	ftl_malloc
+	str	x0, [x22, 3976]
+	mov	w0, 262144
+	bl	ftl_malloc
+	mov	x1, x0
+	ldr	x0, [x22, 3976]
+	str	x1, [x22, 3984]
+	cbz	x0, .L1676
+	cbz	x1, .L1676
+	mov	w1, 1
+	mov	w2, 262144
+	str	w1, [x22, 3972]
+	mov	w1, 0
+	bl	ftl_memset
+.L1675:
+	add	x20, x20, :lo12:.LANCHOR0
+	cmp	w24, 63
+	ldr	x0, [x20, 3976]
+	bhi	.L1677
+	mov	w1, 64
+	sub	w1, w1, w24
+	sub	w2, w27, w1
+	ubfiz	x1, x1, 9, 25
+	add	x1, x28, x1
+.L1678:
+	cmp	w21, 576
+	bls	.L1679
+	sub	w2, w2, w19
+	sub	w2, w2, #447
+.L1679:
+	lsl	w2, w2, 9
+	bl	ftl_memcpy
+	b	.L1656
+.L1676:
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x1, x1, 728
+	adrp	x0, .LC117
+	add	x0, x0, :lo12:.LC117
+	bl	sftl_printk
+	b	.L1675
+.L1677:
+	lsl	w1, w24, 7
+	mov	w2, w27
+	sub	w1, w1, #8192
+	add	x0, x0, x1, lsl 2
+	mov	x1, x28
+	b	.L1678
 	.size	sftl_write, .-sftl_write
 	.align	2
-	.global	FtlLoadSysInfo
-	.type	FtlLoadSysInfo, %function
-FtlLoadSysInfo:
-	stp	x29, x30, [sp, -64]!
-	mov	w1, 0
+	.global	FtlMakeBbt
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	add	x19, x20, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR0
+	stp	x25, x26, [sp, 64]
 	stp	x21, x22, [sp, 32]
-	add	x21, x19, 3400
+	mov	x21, x19
 	stp	x23, x24, [sp, 48]
-	ldr	x0, [x19, 3432]
-	str	x0, [x21, 8]
-	ldr	x0, [x19, 3440]
-	str	x0, [x21, 16]
-	ldr	x0, [x19, 2376]
-	ldrh	w2, [x19, 44]
-	lsl	w2, w2, 1
-	bl	ftl_memset
-	ldrh	w0, [x19, 2656]
-	mov	w1, 65535
-	cmp	w0, w1
-	bne	.L1584
-.L1592:
-	mov	w0, -1
-.L1583:
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 64
-	ret
-.L1584:
-	add	x23, x19, 2656
-	mov	w1, 1
-	bl	FtlGetLastWrittenPage
-	sxth	w22, w0
-	add	w0, w0, 1
-	mov	w24, 61604
-	strh	w0, [x23, 2]
-	mov	w23, 19539
-	movk	w23, 0x4654, lsl 16
-.L1586:
-	tbz	w22, #31, .L1589
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1437
-	add	x1, x1, 688
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1588:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x1, 44]
-	ldrh	w1, [x1, 114]
-	add	x0, x0, 24
-	cmp	x1, x0, lsl 1
-	bcs	.L1591
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1439
-	add	x1, x1, 688
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1591:
-	add	x19, x20, :lo12:.LANCHOR0
-	mov	w2, 48
-	add	x21, x19, 2312
-	mov	x0, x21
-	ldr	x1, [x19, 3408]
-	bl	ftl_memcpy
-	ldr	x0, [x19, 2376]
-	ldrh	w2, [x19, 44]
-	ldr	x1, [x19, 3408]
-	lsl	w2, w2, 1
-	add	x1, x1, 48
-	bl	ftl_memcpy
-	ldrh	w1, [x19, 44]
-	ldr	x0, [x19, 3408]
-	lsr	w2, w1, 3
-	ubfiz	x1, x1, 1, 16
-	add	x1, x1, 48
-	add	w2, w2, 4
-	and	x1, x1, -4
-	add	x1, x0, x1
-	ldr	x0, [x19, 24]
-	bl	ftl_memcpy
-	ldr	w1, [x19, 2312]
-	mov	w0, 19539
-	movk	w0, 0x4654, lsl 16
-	cmp	w1, w0
-	bne	.L1592
-	ldrh	w1, [x19, 2320]
-	ldrb	w2, [x19, 2322]
+	mov	w24, 0
+	stp	x27, x28, [sp, 80]
+	bl	FtlBbtMemInit
+	bl	FtlLoadFactoryBbt
+	mov	w28, -3872
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x26, x0, 192
+	add	x25, x0, 172
+	mov	x19, x0
+	add	x20, x0, 3712
+.L1698:
 	ldrh	w0, [x19, 58]
-	strh	w1, [x19, 2662]
-	cmp	w2, w0
-	bne	.L1592
-	adrp	x0, .LANCHOR3+136
-	ldrh	w2, [x19, 62]
-	ldrh	w3, [x19, 36]
-	str	w1, [x0, #:lo12:.LANCHOR3+136]
-	ldrh	w0, [x19, 106]
-	mul	w0, w0, w1
-	str	w0, [x19, 2584]
-	mul	w0, w2, w0
-	ldr	w2, [x19, 48]
-	str	w0, [x19, 144]
-	ldrh	w0, [x19, 166]
-	cmp	w1, w2
-	sub	w0, w2, w0
-	sub	w0, w0, w1
-	udiv	w0, w0, w3
-	strh	w0, [x19, 2652]
-	bls	.L1593
-	adrp	x1, .LANCHOR1
-	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x0, .LC1
-	mov	w2, 1461
-	add	x1, x1, 688
-	add	x0, x0, :lo12:.LC1
-	bl	printk
-.L1593:
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	w3, -1
-	ldrh	w2, [x0, 2328]
-	ldrh	w4, [x0, 2326]
-	strh	w4, [x0, 2424]
-	lsr	w5, w2, 6
-	and	w2, w2, 63
-	strb	w2, [x0, 2430]
-	ldrb	w2, [x0, 2323]
-	strb	w2, [x0, 2432]
-	ldrh	w2, [x0, 2330]
-	strh	w2, [x0, 2472]
-	ldrh	w2, [x0, 2332]
-	strh	w5, [x0, 2426]
-	strh	w3, [x0, 2672]
-	lsr	w5, w2, 6
-	and	w2, w2, 63
-	strb	w2, [x0, 2478]
-	ldrb	w2, [x0, 2324]
-	strb	w2, [x0, 2480]
-	ldrh	w2, [x0, 2334]
-	strh	w2, [x0, 2520]
-	ldrh	w2, [x0, 2336]
-	strh	w5, [x0, 2474]
-	strh	wzr, [x0, 2674]
-	lsr	w5, w2, 6
-	and	w2, w2, 63
-	strb	w2, [x0, 2526]
-	ldrb	w2, [x0, 2325]
-	strb	w2, [x0, 2528]
-	ldr	w2, [x0, 2344]
-	str	w2, [x0, 2628]
-	strb	wzr, [x0, 2678]
-	strb	wzr, [x0, 2680]
-	strh	w5, [x0, 2522]
-	str	wzr, [x0, 2588]
-	str	wzr, [x0, 2596]
-	str	wzr, [x0, 2604]
-	str	wzr, [x0, 2608]
-	str	wzr, [x0, 2632]
-	str	wzr, [x0, 2644]
-	ldr	w1, [x0, 2352]
-	ldr	w2, [x0, 2620]
-	str	wzr, [x0, 2600]
-	cmp	w1, w2
-	bls	.L1594
-	str	w1, [x0, 2620]
-.L1594:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	w1, [x0, 2348]
-	ldr	w2, [x0, 2624]
+	cmp	w24, w0
+	bcc	.L1704
+	add	x20, x21, :lo12:.LANCHOR0
+	mov	w19, 0
+.L1705:
+	ldrh	w0, [x20, 118]
+	cmp	w0, w19
+	bhi	.L1706
+	add	x20, x20, 160
+	ldrh	w19, [x20, 12]
+	mov	w22, 65535
+	sub	w19, w19, #1
+	and	w19, w19, 65535
+.L1707:
+	ldrh	w0, [x20, 12]
+	sub	w0, w0, #48
+	cmp	w19, w0
+	ble	.L1711
+	mov	w0, w19
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L1708
+	mov	w0, w19
+	bl	FlashTestBlk
+	cbz	w0, .L1709
+	mov	w0, w19
+	bl	FtlBbmMapBadBlock
+.L1708:
+	sub	w19, w19, #1
+	and	w19, w19, 65535
+	b	.L1707
+.L1704:
+	ldr	x0, [x19, 3448]
+	mov	w2, 65535
+	ldr	x27, [x19, 3512]
+	ldrh	w1, [x25]
+	stp	x0, x27, [x20, 8]
 	cmp	w1, w2
-	bls	.L1595
-	str	w1, [x0, 2624]
-.L1595:
-	mov	w0, 65535
-	cmp	w4, w0
-	beq	.L1596
-	add	x0, x20, :lo12:.LANCHOR0
-	add	x0, x0, 2424
-	bl	make_superblock
-.L1596:
-	add	x1, x20, :lo12:.LANCHOR0
-	add	x0, x1, 2472
-	ldrh	w2, [x1, 2472]
-	mov	w1, 65535
-	cmp	w2, w1
-	beq	.L1597
-	bl	make_superblock
-.L1597:
-	add	x1, x20, :lo12:.LANCHOR0
-	add	x0, x1, 2520
-	ldrh	w2, [x1, 2520]
-	mov	w1, 65535
-	cmp	w2, w1
-	beq	.L1598
-	bl	make_superblock
-.L1598:
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	w1, 65535
-	add	x0, x20, 2672
-	ldrh	w2, [x20, 2672]
-	cmp	w2, w1
-	beq	.L1599
-	bl	make_superblock
-.L1599:
-	mov	w0, 0
-	b	.L1583
-.L1589:
-	ldrh	w0, [x19, 2656]
+	beq	.L1699
+	ldrh	w23, [x19, 102]
+	mov	w2, 1
+	madd	w23, w23, w24, w1
+	mov	w1, w2
+	lsl	w0, w23, 10
+	str	w0, [x20, 4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	x1, [x20, 8]
+	ldr	x0, [x26]
+	ldrh	w2, [x19, 102]
+	add	w2, w2, 7
+	lsr	w2, w2, 3
+	bl	ftl_memcpy
+.L1700:
+	mov	w0, w23
+	add	w24, w24, 1
+	bl	FtlBbmMapBadBlock
+	add	x26, x26, 8
+	add	x25, x25, 2
+	b	.L1698
+.L1699:
+	mov	w1, w24
+	bl	FlashGetBadBlockList
+	ldr	x0, [x20, 8]
+	ldr	x1, [x26]
+	bl	FtlBbt2Bitmap
+	ldrh	w22, [x19, 102]
+.L1702:
+	sub	w22, w22, #1
+	and	w22, w22, 65535
+.L1701:
+	ldrh	w0, [x19, 102]
+	madd	w0, w24, w0, w22
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L1702
+	ldr	x0, [x19, 3512]
+	mov	w2, 16
+	strh	w22, [x25]
+	mov	w1, 0
+	bl	ftl_memset
+	ldr	x0, [x19, 3448]
+	mov	w2, 4096
+	mov	w1, 0
+	bl	ftl_memset
+	strh	w28, [x27]
+	str	wzr, [x27, 4]
+	ldrh	w23, [x19, 102]
+	ldrh	w0, [x25]
+	strh	w0, [x27, 2]
+	ldrh	w2, [x19, 3624]
+	ldrh	w0, [x25]
+	ldr	x1, [x26]
+	lsl	w2, w2, 2
+	madd	w23, w23, w24, w0
+	lsl	w0, w23, 10
+	str	w0, [x20, 4]
+	ldr	x0, [x20, 8]
+	bl	ftl_memcpy
 	mov	w2, 1
+	mov	x0, x20
 	mov	w1, w2
-	orr	w0, w22, w0, lsl 10
-	str	w0, [x21, 4]
-	ldr	x0, [x19, 3432]
-	str	x0, [x21, 8]
-	mov	x0, x21
-	bl	FlashReadPages
-	ldr	w0, [x21]
+	bl	FlashEraseBlocks
+	mov	w3, 1
+	mov	x0, x20
+	mov	w2, w3
+	mov	w1, w3
+	bl	FlashProgPages
+	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1587
-	ldr	x0, [x19, 3432]
-	ldr	w0, [x0]
-	cmp	w0, w23
-	bne	.L1587
-	ldr	x0, [x19, 3440]
-	ldrh	w0, [x0]
-	cmp	w0, w24
-	beq	.L1588
-.L1587:
-	sub	w22, w22, #1
-	sxth	w22, w22
-	b	.L1586
-	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
-	.align	2
-	.global	FtlSysBlkInit
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
-	stp	x29, x30, [sp, -64]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR0
-	stp	x21, x22, [sp, 32]
-	add	x19, x20, :lo12:.LANCHOR0
-	adrp	x21, .LANCHOR3
-	add	x0, x21, :lo12:.LANCHOR3
-	stp	x23, x24, [sp, 48]
-	strh	wzr, [x0, -32]
-	ldrh	w0, [x19, 40]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlScanSysBlk
-	ldrh	w1, [x19, 2656]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L1606
-.L1608:
-	mov	w24, -1
-.L1605:
-	mov	w0, w24
+	bne	.L1700
+	mov	w0, w23
+	bl	FtlBbmMapBadBlock
+	b	.L1701
+.L1706:
+	mov	w0, w19
+	add	w19, w19, 1
+	bl	FtlBbmMapBadBlock
+	and	w19, w19, 65535
+	b	.L1705
+.L1709:
+	ldrh	w0, [x20]
+	cmp	w0, w22
+	bne	.L1710
+	strh	w19, [x20]
+	b	.L1708
+.L1710:
+	strh	w19, [x20, 4]
+.L1711:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w2, 2
+	ldr	x1, [x21, 3400]
+	ldrh	w0, [x21, 160]
+	str	wzr, [x21, 168]
+	strh	wzr, [x21, 162]
+	lsl	w0, w0, 10
+	str	w0, [x1, 4]
+	ldr	x0, [x21, 3400]
+	ldrh	w1, [x21, 164]
+	lsl	w1, w1, 10
+	str	w1, [x0, 36]
+	mov	w1, 1
+	bl	FlashEraseBlocks
+	ldrh	w0, [x21, 160]
+	bl	FtlBbmMapBadBlock
+	ldrh	w0, [x21, 164]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	strh	wzr, [x21, 162]
+	ldr	w0, [x21, 168]
+	ldrh	w1, [x21, 164]
+	add	w0, w0, 1
+	str	w0, [x21, 168]
+	ldrh	w0, [x21, 160]
+	strh	w0, [x21, 164]
+	strh	w1, [x21, 160]
+	bl	FtlBbmTblFlush
+	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
-	ldp	x29, x30, [sp], 64
+	ldp	x25, x26, [sp, 64]
+	ldp	x27, x28, [sp, 80]
+	ldp	x29, x30, [sp], 96
 	ret
-.L1606:
-	bl	FtlLoadSysInfo
-	mov	w24, w0
-	cbnz	w0, .L1608
-	bl	FtlLoadMapInfo
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	mov	w0, 1
-	bl	FtlUpdateVaildLpn
-	ldr	x1, [x19, 2568]
-	mov	w0, 0
-	ldrh	w3, [x19, 142]
-	add	x1, x1, 4
-.L1609:
-	cmp	w0, w3
-	bge	.L1614
-	ldr	w2, [x1], 16
-	tbz	w2, #31, .L1610
-.L1614:
-	add	x1, x20, :lo12:.LANCHOR0
-	cmp	w0, w3
-	ldrh	w2, [x1, 2340]
-	add	w2, w2, 1
-	strh	w2, [x1, 2340]
-	bge	.L1620
-.L1611:
-	add	x19, x20, :lo12:.LANCHOR0
-	add	x21, x21, :lo12:.LANCHOR3
-	add	x23, x19, 2424
-	add	x22, x19, 2472
-	mov	x0, x23
-	bl	FtlSuperblockPowerLostFix
-	mov	x0, x22
-	bl	FtlSuperblockPowerLostFix
-	ldrh	w0, [x19, 2424]
-	ldr	x2, [x19, 2376]
-	ldrh	w3, [x19, 2428]
-	lsl	x0, x0, 1
-	ldrh	w1, [x2, x0]
-	sub	w1, w1, w3
-	strh	w1, [x2, x0]
-	strb	wzr, [x19, 2430]
-	ldrh	w0, [x19, 106]
-	strh	w0, [x19, 2426]
-	ldrh	w0, [x19, 2472]
-	ldr	x2, [x19, 2376]
-	strh	wzr, [x19, 2428]
-	lsl	x0, x0, 1
-	ldrh	w3, [x19, 2476]
-	ldrh	w1, [x2, x0]
-	sub	w1, w1, w3
-	strh	w1, [x2, x0]
-	strb	wzr, [x19, 2478]
-	ldrh	w0, [x19, 106]
-	strh	w0, [x19, 2474]
-	sub	x0, x21, #192
-	strh	wzr, [x19, 2476]
-	bl	FtlMapBlkWriteDump_data
-	sub	x0, x21, #120
-	bl	FtlMapBlkWriteDump_data
-	ldrh	w0, [x19, 2342]
-	add	w0, w0, 1
-	strh	w0, [x19, 2342]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	bl	FtlVpcTblFlush
-	b	.L1615
-.L1610:
-	add	w0, w0, 1
-	b	.L1609
-.L1620:
-	add	x0, x21, :lo12:.LANCHOR3
-	ldrh	w0, [x0, -32]
-	cbnz	w0, .L1611
-.L1615:
-	add	x19, x20, :lo12:.LANCHOR0
-	mov	w1, 65535
-	add	x22, x19, 2424
-	ldrh	w0, [x19, 2424]
-	cmp	w0, w1
-	beq	.L1616
-	ldrh	w1, [x19, 2428]
-	cbnz	w1, .L1616
-	ldrh	w1, [x19, 2476]
-	add	x21, x19, 2472
-	cbnz	w1, .L1616
-	bl	FtlGcRefreshBlock
-	ldrh	w0, [x19, 2472]
-	bl	FtlGcRefreshBlock
-	mov	x0, x22
-	bl	allocate_new_data_superblock
-	mov	x0, x21
-	bl	allocate_new_data_superblock
-.L1616:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x20, 2340]
-	tst	x0, 31
-	bne	.L1605
-	bl	FtlVpcCheckAndModify
-	b	.L1605
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	2
 	.global	ftl_low_format
 	.type	ftl_low_format, %function
 ftl_low_format:
-	stp	x29, x30, [sp, -64]!
+	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
 	adrp	x20, .LANCHOR0
 	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp, 32]
-	str	x23, [sp, 48]
 	str	wzr, [x0, 2620]
 	str	wzr, [x0, 2624]
 	ldrh	w0, [x0, 40]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	w0, .L1623
+	cbz	w0, .L1718
 	bl	FtlMakeBbt
-.L1623:
+.L1718:
 	mov	w4, 23752
 	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	movk	w4, 0xa0f, lsl 16
-.L1624:
+.L1719:
 	ldrh	w2, [x1, 62]
 	cmp	w0, w2, lsl 7
-	blt	.L1625
+	blt	.L1720
 	ldrh	w21, [x1, 44]
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w19, 0
-.L1626:
+.L1721:
 	ldrh	w0, [x22, 46]
 	cmp	w0, w21
-	bhi	.L1627
+	bhi	.L1722
 	ldrh	w0, [x22, 36]
 	sub	w1, w19, #3
 	cmp	w1, w0, lsl 1
-	bge	.L1628
-.L1632:
+	bge	.L1723
+.L1727:
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	w21, 0
 	mov	w22, 0
-.L1629:
+.L1724:
 	ldrh	w0, [x19, 44]
 	cmp	w0, w22
-	bhi	.L1633
+	bhi	.L1728
 	ldrh	w2, [x19, 36]
 	ldr	w1, [x19, 48]
 	ldrh	w0, [x19, 46]
-	str	w0, [x19, 3968]
+	str	w0, [x19, 3420]
 	udiv	w4, w1, w2
 	ubfx	x3, x4, 5, 16
 	str	w4, [x19, 2584]
@@ -11439,39 +11994,37 @@ ftl_low_format:
 	mov	w0, 24
 	mul	w0, w2, w0
 	cmp	w21, w0
-	ble	.L1634
+	ble	.L1729
 	sub	w1, w1, w21
 	udiv	w1, w1, w2
 	str	w1, [x19, 2584]
 	lsr	w1, w1, 5
 	add	w1, w1, 24
 	strh	w1, [x19, 2652]
-.L1634:
+.L1729:
 	add	x0, x20, :lo12:.LANCHOR0
 	ldrh	w1, [x0, 98]
-	cbz	w1, .L1636
+	cbz	w1, .L1731
 	ldrh	w5, [x0, 2652]
 	add	w5, w5, w1, lsr 1
 	strh	w5, [x0, 2652]
 	mul	w5, w1, w2
 	cmp	w21, w5
-	bge	.L1636
+	bge	.L1731
 	add	w1, w1, 32
 	str	w4, [x0, 2584]
 	add	w1, w3, w1
 	strh	w1, [x0, 2652]
-.L1636:
+.L1731:
 	add	x19, x20, :lo12:.LANCHOR0
-	adrp	x22, .LANCHOR3
+	mov	w22, -1
 	add	x21, x19, 2424
-	mov	w23, -1
 	ldrh	w1, [x19, 2652]
 	ldr	w0, [x19, 2584]
 	sub	w0, w0, w1
-	add	x1, x22, :lo12:.LANCHOR3
-	mul	w0, w0, w2
-	str	w0, [x1, 136]
 	ldrh	w1, [x19, 106]
+	mul	w0, w0, w2
+	str	w0, [x19, 3744]
 	mul	w0, w1, w0
 	ldrh	w1, [x19, 62]
 	str	w0, [x19, 2584]
@@ -11488,7 +12041,7 @@ ftl_low_format:
 	ldr	x0, [x19, 24]
 	mov	w1, 255
 	ldrh	w2, [x19, 44]
-	strh	w23, [x19, 2672]
+	strh	w22, [x19, 2672]
 	strh	wzr, [x19, 2674]
 	strb	wzr, [x19, 2678]
 	lsr	w2, w2, 3
@@ -11498,31 +12051,31 @@ ftl_low_format:
 	strh	wzr, [x19, 2424]
 	str	wzr, [x19, 2580]
 	bl	ftl_memset
-.L1638:
+.L1733:
 	mov	x0, x21
 	bl	make_superblock
 	ldrb	w1, [x21, 7]
 	ldrh	w0, [x21]
-	cbnz	w1, .L1639
+	cbnz	w1, .L1734
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
-	strh	w23, [x1, x0]
+	strh	w22, [x1, x0]
 	ldrh	w0, [x21]
 	add	w0, w0, 1
 	strh	w0, [x21]
-	b	.L1638
-.L1625:
-	ldr	x5, [x1, 3992]
+	b	.L1733
+.L1720:
+	ldr	x5, [x1, 3472]
 	ubfiz	x3, x0, 2, 16
 	mvn	w2, w0
 	orr	w2, w0, w2, lsl 16
 	add	w0, w0, 1
 	and	w0, w0, 65535
 	str	w2, [x5, x3]
-	ldr	x2, [x1, 3976]
+	ldr	x2, [x1, 3480]
 	str	w4, [x2, x3]
-	b	.L1624
-.L1627:
+	b	.L1719
+.L1722:
 	mov	w0, w21
 	mov	w1, 1
 	add	w21, w21, 1
@@ -11530,8 +12083,8 @@ ftl_low_format:
 	add	w19, w19, w0
 	and	w21, w21, 65535
 	and	w19, w19, 65535
-	b	.L1626
-.L1628:
+	b	.L1721
+.L1723:
 	udiv	w0, w19, w0
 	ldr	w19, [x22, 136]
 	add	x21, x20, :lo12:.LANCHOR0
@@ -11540,17 +12093,17 @@ ftl_low_format:
 	ldrh	w0, [x22, 40]
 	bl	FtlFreeSysBlkQueueInit
 	ldrh	w19, [x22, 44]
-.L1630:
+.L1725:
 	ldrh	w0, [x21, 46]
 	cmp	w0, w19
-	bls	.L1632
+	bls	.L1727
 	mov	w0, w19
 	add	w19, w19, 1
 	mov	w1, 1
 	and	w19, w19, 65535
 	bl	FtlLowFormatEraseBlock
-	b	.L1630
-.L1633:
+	b	.L1725
+.L1728:
 	mov	w0, w22
 	mov	w1, 0
 	add	w22, w22, 1
@@ -11558,8 +12111,8 @@ ftl_low_format:
 	add	w21, w21, w0
 	and	w22, w22, 65535
 	and	w21, w21, 65535
-	b	.L1629
-.L1639:
+	b	.L1724
+.L1734:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x21, 12]
@@ -11579,24 +12132,23 @@ ftl_low_format:
 	strb	w1, [x19, 2480]
 	add	x19, x20, :lo12:.LANCHOR0
 	mov	x20, x0
-.L1640:
+.L1735:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w1, [x20, 7]
 	ldrh	w0, [x20]
-	cbnz	w1, .L1641
+	cbnz	w1, .L1736
 	ldr	x1, [x19, 2376]
 	ubfiz	x0, x0, 1, 16
 	strh	w21, [x1, x0]
 	ldrh	w0, [x20]
 	add	w0, w0, 1
 	strh	w0, [x20]
-	b	.L1640
-.L1641:
+	b	.L1735
+.L1736:
 	ldr	w1, [x19, 2620]
 	ubfiz	x0, x0, 1, 16
 	str	w1, [x20, 12]
-	add	x22, x22, :lo12:.LANCHOR3
 	add	w1, w1, 1
 	str	w1, [x19, 2620]
 	ldr	x1, [x19, 2376]
@@ -11606,73 +12158,27 @@ ftl_low_format:
 	strh	w20, [x19, 2520]
 	bl	FtlFreeSysBlkQueueOut
 	strh	w0, [x19, 2656]
-	ldr	w0, [x22, 136]
+	ldr	w0, [x19, 3744]
 	strh	w0, [x19, 2662]
 	ldr	w0, [x19, 2620]
 	str	w0, [x19, 2664]
 	add	w0, w0, 1
-	strh	wzr, [x19, 2658]
-	strh	w20, [x19, 2660]
-	str	w0, [x19, 2620]
-	bl	FtlVpcTblFlush
-	bl	FtlSysBlkInit
-	cbnz	w0, .L1642
-	adrp	x0, .LANCHOR2
-	mov	w1, 1
-	str	w1, [x0, #:lo12:.LANCHOR2]
-.L1642:
-	mov	w0, 0
-	ldr	x23, [sp, 48]
-	ldp	x19, x20, [sp, 16]
-	ldp	x21, x22, [sp, 32]
-	ldp	x29, x30, [sp], 64
-	ret
-	.size	ftl_low_format, .-ftl_low_format
-	.align	2
-	.global	sftl_init
-	.type	sftl_init, %function
-sftl_init:
-	stp	x29, x30, [sp, -32]!
-	adrp	x1, .LC70
-	add	x1, x1, :lo12:.LC70
-	mov	w0, -1
-	add	x29, sp, 0
-	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR2
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	str	w0, [x20, #:lo12:.LANCHOR2]
-	adrp	x0, .LC71
-	add	x0, x0, :lo12:.LC71
-	bl	printk
-	mov	x0, x19
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	w0, [x19, 40]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cbnz	w0, .L1651
+	strh	wzr, [x19, 2658]
+	strh	w20, [x19, 2660]
+	str	w0, [x19, 2620]
+	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	w0, .L1651
-	mov	w0, 1
-	str	w0, [x20, #:lo12:.LANCHOR2]
-	ldrh	w0, [x19, 2416]
-	cmp	w0, 15
-	bhi	.L1651
-	mov	w19, 8129
-.L1650:
+	cbnz	w0, .L1737
+	adrp	x0, .LANCHOR2
 	mov	w1, 1
-	mov	w0, 0
-	bl	rk_ftl_garbage_collect
-	subs	w19, w19, #1
-	bne	.L1650
-.L1651:
+	str	w1, [x0, #:lo12:.LANCHOR2]
+.L1737:
 	mov	w0, 0
 	ldp	x19, x20, [sp, 16]
-	ldp	x29, x30, [sp], 32
+	ldp	x21, x22, [sp, 32]
+	ldp	x29, x30, [sp], 48
 	ret
-	.size	sftl_init, .-sftl_init
+	.size	ftl_low_format, .-ftl_low_format
 	.align	2
 	.global	ftl_memcmp
 	.type	ftl_memcmp, %function
@@ -11688,14 +12194,15 @@ ftl_memcmp:
 	.global	rk_sftl_vendor_dev_ops_register
 	.type	rk_sftl_vendor_dev_ops_register, %function
 rk_sftl_vendor_dev_ops_register:
-	adrp	x2, .LANCHOR3
-	add	x2, x2, :lo12:.LANCHOR3
-	ldr	x3, [x2, 144]
-	cbnz	x3, .L1658
-	stp	x0, x1, [x2, 144]
+	adrp	x2, .LANCHOR0
+	add	x2, x2, :lo12:.LANCHOR0
+	ldr	x3, [x2, 3992]
+	cbnz	x3, .L1746
+	str	x0, [x2, 3992]
 	mov	w0, 0
+	str	x1, [x2, 4000]
 	ret
-.L1658:
+.L1746:
 	mov	w0, -1
 	ret
 	.size	rk_sftl_vendor_dev_ops_register, .-rk_sftl_vendor_dev_ops_register
@@ -11703,75 +12210,65 @@ rk_sftl_vendor_dev_ops_register:
 	.global	rk_sftl_vendor_storage_init
 	.type	rk_sftl_vendor_storage_init, %function
 rk_sftl_vendor_storage_init:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -80]!
 	mov	w0, 65536
 	add	x29, sp, 0
 	stp	x19, x20, [sp, 16]
-	adrp	x20, .LANCHOR3
+	adrp	x20, .LANCHOR0
 	stp	x21, x22, [sp, 32]
-	add	x21, x20, :lo12:.LANCHOR3
+	add	x22, x20, :lo12:.LANCHOR0
 	stp	x23, x24, [sp, 48]
 	stp	x25, x26, [sp, 64]
-	str	x27, [sp, 80]
 	bl	ftl_malloc
-	str	x0, [x21, 160]
-	cbz	x0, .L1665
-	adrp	x25, .LC106
-	mov	w27, 22084
-	add	x25, x25, :lo12:.LC106
-	mov	w26, 0
+	str	x0, [x22, 4008]
+	cbz	x0, .L1753
+	mov	w26, 22084
+	mov	w25, 0
 	mov	w24, 0
 	mov	w23, 0
-	movk	w27, 0x524b, lsl 16
-.L1663:
-	ldr	x3, [x21, 144]
+	movk	w26, 0x524b, lsl 16
+.L1751:
+	ldr	x3, [x22, 3992]
 	mov	w1, 128
-	ldr	x2, [x21, 160]
+	ldr	x2, [x22, 4008]
 	lsl	w0, w23, 7
 	blr	x3
-	mov	w22, w0
-	cbnz	w0, .L1661
-	ldr	x0, [x21, 160]
-	add	x1, x0, 61440
-	ldr	w3, [x0, 4]
-	ldr	w2, [x1, 4092]
-	ldr	w1, [x0]
-	mov	x0, x25
-	bl	printk
-	ldr	x19, [x21, 160]
+	mov	w21, w0
+	cbnz	w0, .L1749
+	ldr	x19, [x22, 4008]
 	ldr	w0, [x19]
-	cmp	w0, w27
-	bne	.L1662
+	cmp	w0, w26
+	bne	.L1750
 	add	x0, x19, 61440
 	ldr	w1, [x19, 4]
 	ldr	w0, [x0, 4092]
 	cmp	w0, w1
-	bne	.L1662
+	bne	.L1750
 	cmp	w0, w24
-	bls	.L1662
-	mov	w26, w23
+	bls	.L1750
+	mov	w25, w23
 	mov	w24, w0
-.L1662:
+.L1750:
 	add	w23, w23, 1
 	cmp	w23, 2
-	bne	.L1663
-	cbz	w24, .L1664
-	add	x0, x20, :lo12:.LANCHOR3
+	bne	.L1751
+	cbz	w24, .L1752
+	add	x0, x20, :lo12:.LANCHOR0
 	mov	x2, x19
 	mov	w1, 128
-	ldr	x3, [x0, 144]
-	lsl	w0, w26, 7
+	ldr	x3, [x0, 3992]
+	lsl	w0, w25, 7
 	blr	x3
-	mov	w22, w0
-	cbz	w0, .L1659
-.L1661:
-	add	x20, x20, :lo12:.LANCHOR3
-	mov	w22, -1
-	ldr	x0, [x20, 160]
+	mov	w21, w0
+	cbz	w0, .L1747
+.L1749:
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w21, -1
+	ldr	x0, [x20, 4008]
 	bl	kfree
-	str	xzr, [x20, 160]
-	b	.L1659
-.L1664:
+	str	xzr, [x20, 4008]
+	b	.L1747
+.L1752:
 	mov	w1, 0
 	mov	x2, 65536
 	mov	x0, x19
@@ -11784,39 +12281,38 @@ rk_sftl_vendor_storage_init:
 	str	w0, [x1, 4092]
 	mov	w0, -1032
 	strh	w0, [x19, 14]
-.L1659:
-	mov	w0, w22
-	ldr	x27, [sp, 80]
+.L1747:
+	mov	w0, w21
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
 	ldp	x25, x26, [sp, 64]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 80
 	ret
-.L1665:
-	mov	w22, -12
-	b	.L1659
+.L1753:
+	mov	w21, -12
+	b	.L1747
 	.size	rk_sftl_vendor_storage_init, .-rk_sftl_vendor_storage_init
 	.align	2
 	.global	rk_sftl_vendor_read
 	.type	rk_sftl_vendor_read, %function
 rk_sftl_vendor_read:
-	adrp	x3, .LANCHOR3+160
-	ldr	x4, [x3, #:lo12:.LANCHOR3+160]
-	cbz	x4, .L1673
+	adrp	x3, .LANCHOR0+4008
+	ldr	x4, [x3, #:lo12:.LANCHOR0+4008]
+	cbz	x4, .L1761
 	ldrh	w6, [x4, 10]
 	add	x5, x4, 16
 	mov	w3, 0
-.L1670:
+.L1758:
 	cmp	w3, w6
-	bcc	.L1672
-.L1673:
+	bcc	.L1760
+.L1761:
 	mov	w0, -1
 	ret
-.L1672:
+.L1760:
 	ldrh	w7, [x5], 8
 	cmp	w7, w0
-	bne	.L1671
+	bne	.L1759
 	stp	x29, x30, [sp, -32]!
 	add	x3, x4, x3, uxtw 3
 	mov	x0, x1
@@ -11834,9 +12330,9 @@ rk_sftl_vendor_read:
 	ldr	x19, [sp, 16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L1671:
+.L1759:
 	add	w3, w3, 1
-	b	.L1670
+	b	.L1758
 	.size	rk_sftl_vendor_read, .-rk_sftl_vendor_read
 	.align	2
 	.global	rk_sftl_vendor_write
@@ -11845,14 +12341,14 @@ rk_sftl_vendor_write:
 	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
 	stp	x23, x24, [sp, 48]
-	adrp	x23, .LANCHOR3
-	add	x3, x23, :lo12:.LANCHOR3
+	adrp	x23, .LANCHOR0
+	add	x3, x23, :lo12:.LANCHOR0
 	stp	x19, x20, [sp, 16]
 	stp	x21, x22, [sp, 32]
 	stp	x25, x26, [sp, 64]
 	stp	x27, x28, [sp, 80]
-	ldr	x19, [x3, 160]
-	cbz	x19, .L1693
+	ldr	x19, [x3, 4008]
+	cbz	x19, .L1781
 	add	w21, w2, 63
 	ldrh	w3, [x19, 10]
 	ldrh	w24, [x19, 8]
@@ -11861,12 +12357,12 @@ rk_sftl_vendor_write:
 	and	w21, w21, -64
 	add	x1, x19, 16
 	mov	w20, 0
-.L1680:
+.L1768:
 	cmp	w20, w3
-	bcc	.L1688
+	bcc	.L1776
 	ldrh	w1, [x19, 14]
 	cmp	w21, w1
-	bhi	.L1693
+	bhi	.L1781
 	add	x3, x19, x3, uxth 3
 	and	w21, w21, 65535
 	uxtw	x2, w28
@@ -11886,11 +12382,11 @@ rk_sftl_vendor_write:
 	ldrh	w0, [x19, 10]
 	add	w0, w0, 1
 	strh	w0, [x19, 10]
-	b	.L1695
-.L1688:
+	b	.L1783
+.L1776:
 	ldrh	w6, [x1], 8
 	cmp	w6, w0
-	bne	.L1681
+	bne	.L1769
 	uxtw	x27, w20
 	add	x5, x19, 1024
 	add	x22, x19, x27, lsl 3
@@ -11898,17 +12394,17 @@ rk_sftl_vendor_write:
 	add	w25, w25, 63
 	and	w25, w25, -64
 	cmp	w28, w25
-	bls	.L1682
+	bls	.L1770
 	ldrh	w0, [x19, 14]
 	cmp	w21, w0
-	bhi	.L1693
+	bhi	.L1781
 	add	x27, x27, 2
 	ldrh	w22, [x22, 18]
 	add	x27, x19, x27, lsl 3
 	sub	w26, w3, #1
-.L1683:
+.L1771:
 	cmp	w20, w26
-	bcc	.L1684
+	bcc	.L1772
 	add	x20, x19, x20, uxtw 3
 	and	w22, w22, 65535
 	add	x0, x5, x22, uxth
@@ -11925,16 +12421,16 @@ rk_sftl_vendor_write:
 	sub	w21, w0, w21
 	add	w25, w21, w25
 	strh	w25, [x19, 14]
-.L1695:
+.L1783:
 	ldr	w0, [x19, 4]
 	add	x1, x19, 61440
-	add	x23, x23, :lo12:.LANCHOR3
+	add	x23, x23, :lo12:.LANCHOR0
 	mov	x2, x19
 	add	w0, w0, 1
 	str	w0, [x19, 4]
 	str	w0, [x1, 4092]
 	mov	w1, 128
-	ldr	x3, [x23, 152]
+	ldr	x3, [x23, 4000]
 	ldrh	w0, [x19, 8]
 	add	w0, w0, 1
 	and	w0, w0, 65535
@@ -11944,7 +12440,7 @@ rk_sftl_vendor_write:
 	lsl	w0, w24, 7
 	blr	x3
 	mov	w0, 0
-.L1678:
+.L1766:
 	ldp	x19, x20, [sp, 16]
 	ldp	x21, x22, [sp, 32]
 	ldp	x23, x24, [sp, 48]
@@ -11952,7 +12448,7 @@ rk_sftl_vendor_write:
 	ldp	x27, x28, [sp, 80]
 	ldp	x29, x30, [sp], 128
 	ret
-.L1684:
+.L1772:
 	add	w20, w20, 1
 	str	x4, [x29, 104]
 	add	x0, x19, x20, uxtw 3
@@ -11976,21 +12472,21 @@ rk_sftl_vendor_write:
 	ldr	x4, [x29, 104]
 	add	w22, w22, w3
 	ldr	x5, [x29, 120]
-	b	.L1683
-.L1682:
+	b	.L1771
+.L1770:
 	ldrh	w0, [x22, 18]
 	uxtw	x2, w28
 	mov	x1, x4
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w28, [x22, 20]
-	b	.L1695
-.L1681:
+	b	.L1783
+.L1769:
 	add	w20, w20, 1
-	b	.L1680
-.L1693:
+	b	.L1768
+.L1781:
 	mov	w0, -1
-	b	.L1678
+	b	.L1766
 	.size	rk_sftl_vendor_write, .-rk_sftl_vendor_write
 	.align	2
 	.global	rk_sftl_vendor_storage_ioctl
@@ -12004,19 +12500,19 @@ rk_sftl_vendor_storage_ioctl:
 	str	x21, [sp, 32]
 	mov	w21, w1
 	bl	ftl_malloc
-	cbz	x0, .L1710
+	cbz	x0, .L1798
 	mov	w1, 30209
 	mov	x19, x0
 	movk	w1, 0x4004, lsl 16
 	cmp	w21, w1
-	beq	.L1699
+	beq	.L1787
 	add	w1, w1, 1
 	cmp	w21, w1
-	beq	.L1700
-.L1720:
+	beq	.L1788
+.L1808:
 	mov	x20, -14
-	b	.L1698
-.L1699:
+	b	.L1786
+.L1787:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12029,34 +12525,34 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1706
+	cbz	x3, .L1794
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1720
+	cbnz	x0, .L1808
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	beq	.L1704
-.L1705:
+	beq	.L1792
+.L1793:
 	mov	x20, -1
-.L1698:
+.L1786:
 	mov	x0, x19
 	bl	kfree
-.L1696:
+.L1784:
 	mov	x0, x20
 	ldr	x21, [sp, 32]
 	ldp	x19, x20, [sp, 16]
 	ldp	x29, x30, [sp], 48
 	ret
-.L1704:
+.L1792:
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_read
 	cmn	w0, #1
-	beq	.L1705
+	beq	.L1793
 	strh	w0, [x19, 6]
 	and	x2, x0, 65535
 	add	x2, x2, 8
@@ -12067,14 +12563,14 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1720
+	cbz	x3, .L1808
 	mov	x0, x20
 	mov	x1, x19
 	mov	x20, 0
 	bl	__arch_copy_to_user
-	cbz	x0, .L1698
-	b	.L1720
-.L1700:
+	cbz	x0, .L1786
+	b	.L1808
+.L1788:
 #APP
 // 21 "./arch/arm64/include/asm/current.h" 1
 	mrs x21, sp_el0
@@ -12087,19 +12583,19 @@ rk_sftl_vendor_storage_ioctl:
 	adds x1, x1, 8; ccmp x1, x2, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1706
+	cbz	x3, .L1794
 	mov	x2, 8
 	mov	x1, x20
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1720
+	cbnz	x0, .L1808
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L1705
+	bne	.L1793
 	ldrh	w2, [x19, 6]
 	cmp	w2, 4087
-	bhi	.L1705
+	bhi	.L1793
 	add	w2, w2, 8
 	mov	x0, x20
 	sxtw	x2, w2
@@ -12109,28 +12605,28 @@ rk_sftl_vendor_storage_ioctl:
 	adds x0, x0, x2; ccmp x0, x1, #2, cc; cset x3, ls
 // 0 "" 2
 #NO_APP
-	cbz	x3, .L1708
+	cbz	x3, .L1796
 	mov	x1, x20
 	mov	x0, x19
 	bl	__arch_copy_from_user
-	cbnz	x0, .L1720
+	cbnz	x0, .L1808
 	ldrh	w2, [x19, 6]
 	add	x1, x19, 8
 	ldrh	w0, [x19, 4]
 	bl	rk_sftl_vendor_write
 	sxtw	x20, w0
-	b	.L1698
-.L1706:
+	b	.L1786
+.L1794:
 	str	xzr, [x19]
-	b	.L1720
-.L1708:
+	b	.L1808
+.L1796:
 	mov	w1, 0
 	mov	x0, x19
 	bl	memset
-	b	.L1720
-.L1710:
+	b	.L1808
+.L1798:
 	mov	x20, -1
-	b	.L1696
+	b	.L1784
 	.size	rk_sftl_vendor_storage_ioctl, .-rk_sftl_vendor_storage_ioctl
 	.align	2
 	.global	rk_sftl_vendor_register
@@ -12145,7 +12641,6 @@ rk_sftl_vendor_register:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	rk_sftl_vendor_register, .-rk_sftl_vendor_register
-	.global	ftl_temp_buf
 	.global	g_nand_ops
 	.global	g_nand_phy_info
 	.global	gc_ink_free_return_value
@@ -12160,6 +12655,9 @@ rk_sftl_vendor_register:
 	.global	g_recovery_ppa_tbl
 	.global	g_recovery_page_min_ver
 	.global	g_recovery_page_num
+	.global	sftl_nand_check_spare_buf
+	.global	sftl_temp_buf
+	.global	sftl_nand_check_buf
 	.global	g_cur_erase_blk
 	.global	g_gc_skip_write_count
 	.global	g_gc_head_data_block_count
@@ -12243,7 +12741,6 @@ rk_sftl_vendor_register:
 	.global	p_sys_data_buf_1
 	.global	p_sys_data_buf
 	.global	p_plane_order_table
-	.global	g_req_cache
 	.global	req_gc_dst
 	.global	req_gc
 	.global	req_erase
@@ -12296,171 +12793,181 @@ rk_sftl_vendor_register:
 	.section	.rodata
 	.align	3
 	.set	.LANCHOR1,. + 0
-	.type	__func__.3767, %object
-	.size	__func__.3767, 17
-__func__.3767:
+	.type	__func__.3845, %object
+	.size	__func__.3845, 17
+__func__.3845:
 	.string	"INSERT_DATA_LIST"
 	.zero	7
-	.type	__func__.3762, %object
-	.size	__func__.3762, 17
-__func__.3762:
+	.type	__func__.3840, %object
+	.size	__func__.3840, 17
+__func__.3840:
 	.string	"INSERT_FREE_LIST"
 	.zero	7
-	.type	__func__.3798, %object
-	.size	__func__.3798, 17
-__func__.3798:
+	.type	__func__.3876, %object
+	.size	__func__.3876, 17
+__func__.3876:
 	.string	"List_remove_node"
 	.zero	7
-	.type	__func__.3830, %object
-	.size	__func__.3830, 22
-__func__.3830:
+	.type	__func__.3908, %object
+	.size	__func__.3908, 22
+__func__.3908:
 	.string	"List_update_data_list"
 	.zero	2
-	.type	__func__.3936, %object
-	.size	__func__.3936, 22
-__func__.3936:
+	.type	__func__.4015, %object
+	.size	__func__.4015, 22
+__func__.4015:
 	.string	"select_l2p_ram_region"
 	.zero	2
-	.type	__func__.4259, %object
-	.size	__func__.4259, 16
-__func__.4259:
+	.type	__func__.4338, %object
+	.size	__func__.4338, 16
+__func__.4338:
 	.string	"make_superblock"
-	.type	__func__.4434, %object
-	.size	__func__.4434, 19
-__func__.4434:
+	.type	__func__.4513, %object
+	.size	__func__.4513, 19
+__func__.4513:
 	.string	"get_new_active_ppa"
 	.zero	5
-	.type	__func__.16008, %object
-	.size	__func__.16008, 15
-__func__.16008:
-	.string	"FlashReadPages"
-	.zero	1
-	.type	__func__.16025, %object
-	.size	__func__.16025, 15
-__func__.16025:
-	.string	"FlashProgPages"
-	.zero	1
-	.type	__func__.3872, %object
-	.size	__func__.3872, 26
-__func__.3872:
+	.type	__func__.16152, %object
+	.size	__func__.16152, 17
+__func__.16152:
+	.string	"FlashEraseBlocks"
+	.zero	7
+	.type	__func__.3950, %object
+	.size	__func__.3950, 26
+__func__.3950:
 	.string	"ftl_map_blk_alloc_new_blk"
 	.zero	6
-	.type	__func__.3376, %object
-	.size	__func__.3376, 11
-__func__.3376:
+	.type	__func__.3383, %object
+	.size	__func__.3383, 11
+__func__.3383:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.3602, %object
-	.size	__func__.3602, 14
-__func__.3602:
+	.type	__func__.3682, %object
+	.size	__func__.3682, 14
+__func__.3682:
 	.string	"FtlBbt2Bitmap"
 	.zero	2
-	.type	__func__.3839, %object
-	.size	__func__.3839, 16
-__func__.3839:
-	.string	"load_l2p_region"
-	.type	__func__.3897, %object
-	.size	__func__.3897, 31
-__func__.3897:
+	.type	__func__.4359, %object
+	.size	__func__.4359, 18
+__func__.4359:
+	.string	"SupperBlkListInit"
+	.zero	6
+	.type	__func__.16111, %object
+	.size	__func__.16111, 15
+__func__.16111:
+	.string	"FlashReadPages"
+	.zero	1
+	.type	__func__.4127, %object
+	.size	__func__.4127, 14
+__func__.4127:
+	.string	"FtlScanSysBlk"
+	.zero	2
+	.type	__func__.3725, %object
+	.size	__func__.3725, 11
+__func__.3725:
+	.string	"FtlLoadBbt"
+	.zero	5
+	.type	__func__.4184, %object
+	.size	__func__.4184, 15
+__func__.4184:
+	.string	"FtlLoadSysInfo"
+	.zero	1
+	.type	__func__.16129, %object
+	.size	__func__.16129, 15
+__func__.16129:
+	.string	"FlashProgPages"
+	.zero	1
+	.type	__func__.3976, %object
+	.size	__func__.3976, 31
+__func__.3976:
 	.string	"Ftl_write_map_blk_to_last_page"
 	.zero	1
-	.type	__func__.3911, %object
-	.size	__func__.3911, 16
-__func__.3911:
+	.type	__func__.3990, %object
+	.size	__func__.3990, 16
+__func__.3990:
 	.string	"FtlMapWritePage"
-	.type	__func__.3883, %object
-	.size	__func__.3883, 15
-__func__.3883:
+	.type	__func__.3917, %object
+	.size	__func__.3917, 16
+__func__.3917:
+	.string	"load_l2p_region"
+	.type	__func__.3961, %object
+	.size	__func__.3961, 15
+__func__.3961:
 	.string	"ftl_map_blk_gc"
 	.zero	1
-	.type	__func__.3953, %object
-	.size	__func__.3953, 9
-__func__.3953:
+	.type	__func__.4032, %object
+	.size	__func__.4032, 9
+__func__.4032:
 	.string	"log2phys"
 	.zero	7
-	.type	__func__.4168, %object
-	.size	__func__.4168, 16
-__func__.4168:
+	.type	__func__.4247, %object
+	.size	__func__.4247, 16
+__func__.4247:
 	.string	"FtlReUsePrevPpa"
-	.type	__func__.4048, %object
-	.size	__func__.4048, 14
-__func__.4048:
-	.string	"FtlScanSysBlk"
-	.zero	2
-	.type	__func__.4280, %object
-	.size	__func__.4280, 18
-__func__.4280:
-	.string	"SupperBlkListInit"
-	.zero	6
-	.type	__func__.4321, %object
-	.size	__func__.4321, 14
-__func__.4321:
+	.type	__func__.4400, %object
+	.size	__func__.4400, 14
+__func__.4400:
 	.string	"ftl_check_vpc"
 	.zero	2
-	.type	__func__.4406, %object
-	.size	__func__.4406, 25
-__func__.4406:
+	.type	__func__.4485, %object
+	.size	__func__.4485, 25
+__func__.4485:
 	.string	"allocate_data_superblock"
 	.zero	7
-	.type	__func__.4447, %object
-	.size	__func__.4447, 16
-__func__.4447:
+	.type	__func__.4526, %object
+	.size	__func__.4526, 16
+__func__.4526:
 	.string	"update_vpc_list"
-	.type	__func__.4454, %object
-	.size	__func__.4454, 20
-__func__.4454:
+	.type	__func__.4533, %object
+	.size	__func__.4533, 20
+__func__.4533:
 	.string	"decrement_vpc_count"
 	.zero	4
-	.type	__func__.4202, %object
-	.size	__func__.4202, 22
-__func__.4202:
+	.type	__func__.4281, %object
+	.size	__func__.4281, 22
+__func__.4281:
 	.string	"FtlRecoverySuperblock"
 	.zero	2
-	.type	__func__.3645, %object
-	.size	__func__.3645, 11
-__func__.3645:
-	.string	"FtlLoadBbt"
-	.zero	5
-	.type	__func__.4026, %object
-	.size	__func__.4026, 15
-__func__.4026:
+	.type	__func__.4105, %object
+	.size	__func__.4105, 15
+__func__.4105:
 	.string	"FtlVpcTblFlush"
 	.zero	1
-	.type	__func__.4305, %object
-	.size	__func__.4305, 21
-__func__.4305:
+	.type	__func__.4384, %object
+	.size	__func__.4384, 21
+__func__.4384:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.4427, %object
-	.size	__func__.4427, 29
-__func__.4427:
+	.type	__func__.4506, %object
+	.size	__func__.4506, 29
+__func__.4506:
 	.string	"allocate_new_data_superblock"
 	.zero	3
-	.type	__func__.3500, %object
-	.size	__func__.3500, 13
-__func__.3500:
+	.type	__func__.3507, %object
+	.size	__func__.3507, 13
+__func__.3507:
 	.string	"FtlProgPages"
 	.zero	3
-	.type	__func__.4524, %object
-	.size	__func__.4524, 19
-__func__.4524:
+	.type	__func__.4603, %object
+	.size	__func__.4603, 19
+__func__.4603:
 	.string	"FtlGcFreeTempBlock"
 	.zero	5
-	.type	__func__.4630, %object
-	.size	__func__.4630, 23
-__func__.4630:
+	.type	__func__.4714, %object
+	.size	__func__.4714, 23
+__func__.4714:
 	.string	"rk_ftl_garbage_collect"
 	.zero	1
-	.type	__func__.3528, %object
-	.size	__func__.3528, 9
-__func__.3528:
+	.type	__func__.3535, %object
+	.size	__func__.3535, 9
+__func__.3535:
 	.string	"FtlWrite"
 	.zero	7
-	.type	__func__.4105, %object
-	.size	__func__.4105, 15
-__func__.4105:
-	.string	"FtlLoadSysInfo"
-	.zero	1
+	.type	__func__.3641, %object
+	.size	__func__.3641, 14
+__func__.3641:
+	.string	"FtlWriteToIDB"
+	.zero	2
 	.type	rk_sftl_vendor_storage_fops, %object
 	.size	rk_sftl_vendor_storage_fops, 216
 rk_sftl_vendor_storage_fops:
@@ -12490,13 +12997,12 @@ power_up_flag:
 rkflash_vender_storage_dev:
 	.word	255
 	.zero	4
-	.xword	.LC107
+	.xword	.LC118
 	.xword	rk_sftl_vendor_storage_fops
 	.zero	56
 	.bss
 	.align	3
 	.set	.LANCHOR0,. + 0
-	.set	.LANCHOR3,. + 4352
 	.type	g_nand_phy_info, %object
 	.size	g_nand_phy_info, 24
 g_nand_phy_info:
@@ -12898,43 +13404,10 @@ g_gc_bad_block_gc_index:
 	.size	g_nand_ops, 32
 g_nand_ops:
 	.zero	32
-	.type	req_sys, %object
-	.size	req_sys, 32
-req_sys:
-	.zero	32
-	.type	p_sys_data_buf, %object
-	.size	p_sys_data_buf, 8
-p_sys_data_buf:
-	.zero	8
-	.type	p_sys_spare_buf, %object
-	.size	p_sys_spare_buf, 8
-p_sys_spare_buf:
-	.zero	8
-	.type	check_spare_buf, %object
-	.size	check_spare_buf, 512
-check_spare_buf:
-	.zero	512
 	.type	req_erase, %object
 	.size	req_erase, 8
 req_erase:
 	.zero	8
-	.type	g_cur_erase_blk, %object
-	.size	g_cur_erase_blk, 4
-g_cur_erase_blk:
-	.zero	4
-	.zero	4
-	.type	p_io_data_buf_1, %object
-	.size	p_io_data_buf_1, 8
-p_io_data_buf_1:
-	.zero	8
-	.type	p_io_spare_buf, %object
-	.size	p_io_spare_buf, 8
-p_io_spare_buf:
-	.zero	8
-	.type	p_io_data_buf_0, %object
-	.size	p_io_data_buf_0, 8
-p_io_data_buf_0:
-	.zero	8
 	.type	g_in_gc_progress, %object
 	.size	g_in_gc_progress, 4
 g_in_gc_progress:
@@ -12947,6 +13420,9 @@ g_gc_head_data_block:
 	.size	g_gc_head_data_block_count, 4
 g_gc_head_data_block_count:
 	.zero	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
 	.zero	4
 	.type	req_read, %object
 	.size	req_read, 8
@@ -12960,6 +13436,10 @@ req_gc_dst:
 	.size	req_prgm, 8
 req_prgm:
 	.zero	8
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 8
+p_sys_data_buf:
+	.zero	8
 	.type	p_sys_data_buf_1, %object
 	.size	p_sys_data_buf_1, 8
 p_sys_data_buf_1:
@@ -12968,6 +13448,34 @@ p_sys_data_buf_1:
 	.size	p_vendor_data_buf, 8
 p_vendor_data_buf:
 	.zero	8
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 8
+p_io_data_buf_0:
+	.zero	8
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 8
+p_io_data_buf_1:
+	.zero	8
+	.type	sftl_nand_check_buf, %object
+	.size	sftl_nand_check_buf, 8
+sftl_nand_check_buf:
+	.zero	8
+	.type	sftl_temp_buf, %object
+	.size	sftl_temp_buf, 8
+sftl_temp_buf:
+	.zero	8
+	.type	sftl_nand_check_spare_buf, %object
+	.size	sftl_nand_check_spare_buf, 8
+sftl_nand_check_spare_buf:
+	.zero	8
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 8
+p_sys_spare_buf:
+	.zero	8
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 8
+p_io_spare_buf:
+	.zero	8
 	.type	g_ect_tbl_info_size, %object
 	.size	g_ect_tbl_info_size, 2
 g_ect_tbl_info_size:
@@ -13030,20 +13538,10 @@ gL2pMapInfo:
 	.size	g_totle_map_block, 2
 g_totle_map_block:
 	.zero	2
-	.zero	6
-	.type	gVendorBlkInfo, %object
-	.size	gVendorBlkInfo, 64
-gVendorBlkInfo:
-	.zero	64
-	.type	g_req_cache, %object
-	.size	g_req_cache, 8
-g_req_cache:
-	.zero	8
 	.type	g_tmp_data_superblock_id, %object
 	.size	g_tmp_data_superblock_id, 2
 g_tmp_data_superblock_id:
 	.zero	2
-	.zero	2
 	.type	g_totle_swl_count, %object
 	.size	g_totle_swl_count, 4
 g_totle_swl_count:
@@ -13056,6 +13554,19 @@ ftl_gc_temp_power_lost_recovery_flag:
 	.size	g_recovery_page_min_ver, 4
 g_recovery_page_min_ver:
 	.zero	4
+	.type	req_sys, %object
+	.size	req_sys, 32
+req_sys:
+	.zero	32
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.zero	4
+	.zero	4
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 64
+gVendorBlkInfo:
+	.zero	64
 	.type	g_power_lost_recovery_flag, %object
 	.size	g_power_lost_recovery_flag, 2
 g_power_lost_recovery_flag:
@@ -13073,11 +13584,7 @@ g_recovery_ppa_tbl:
 	.size	g_ect_tbl_power_up_flush, 2
 g_ect_tbl_power_up_flush:
 	.zero	2
-	.zero	6
-	.type	gp_last_act_superblock, %object
-	.size	gp_last_act_superblock, 8
-gp_last_act_superblock:
-	.zero	8
+	.zero	2
 	.type	gc_discard_updated, %object
 	.size	gc_discard_updated, 4
 gc_discard_updated:
@@ -13099,11 +13606,18 @@ g_gc_cur_blk_max_valid_pages:
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
 	.zero	4
-	.type	g_MaxLbn, %object
-	.size	g_MaxLbn, 4
-g_MaxLbn:
-	.zero	4
+	.type	idb_need_write_back, %object
+	.size	idb_need_write_back, 4
+idb_need_write_back:
 	.zero	4
+	.type	idb_buf, %object
+	.size	idb_buf, 8
+idb_buf:
+	.zero	8
+	.type	gp_flash_check_buf, %object
+	.size	gp_flash_check_buf, 8
+gp_flash_check_buf:
+	.zero	8
 	.type	_flash_read, %object
 	.size	_flash_read, 8
 _flash_read:
@@ -13116,18 +13630,14 @@ _flash_write:
 	.size	g_vendor, 8
 g_vendor:
 	.zero	8
-	.type	ftl_temp_buf, %object
-	.size	ftl_temp_buf, 4096
-ftl_temp_buf:
-	.zero	4096
-	.type	check_buf, %object
-	.size	check_buf, 4096
-check_buf:
-	.zero	4096
 	.type	check_vpc_table, %object
 	.size	check_vpc_table, 16384
 check_vpc_table:
 	.zero	16384
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 8
+gp_last_act_superblock:
+	.zero	8
 	.section	.rodata.str1.1,"aMS",@progbits,1
 .LC0:
 	.string	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\n"
@@ -13270,7 +13780,7 @@ check_vpc_table:
 .LC69:
 	.string	"free %d. [0x%x] 0x%x  0x%x\n"
 .LC70:
-	.string	"SFTL version: 5.0.44 20180713"
+	.string	"SFTL version: 5.0.48 20180930"
 .LC71:
 	.string	"%s\n"
 .LC72:
@@ -13280,68 +13790,90 @@ check_vpc_table:
 .LC74:
 	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
 .LC75:
-	.string	"\0014"
+	.string	"%s %p + 0x%x:"
 .LC76:
-	.string	"prog read error: = %x\n"
+	.string	"0x%08x,"
 .LC77:
-	.string	"prog read s error: = %x %x %x\n"
+	.string	"0x%04x,"
 .LC78:
-	.string	"prog read d error: = %x %x %x\n"
+	.string	"0x%02x,"
 .LC79:
-	.string	"FtlFreeSysBlkQueueOut free count = %d\n"
+	.string	"\n"
 .LC80:
-	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\n"
+	.string	"%s: addr: %x is in id block!!!!!!!!!!\n"
 .LC81:
-	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d\n"
+	.string	"not free: w: d:"
 .LC82:
-	.string	"%s error allocating memory. return -1\n"
+	.string	"not free: w: s:"
 .LC83:
-	.string	"region_id = %x phyAddr = %x\n"
+	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\n"
 .LC84:
-	.string	"spare:"
+	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d\n"
 .LC85:
-	.string	"map_ppn:"
+	.string	"%s error allocating memory. return -1\n"
 .LC86:
-	.string	"FtlMapWritePage error = %x \n"
+	.string	"prog read error: = %x\n"
 .LC87:
-	.string	"FtlMapWritePage error = %x error count = %d\n"
+	.string	"prog read s error: = %x %x %x\n"
 .LC88:
-	.string	"ftl_scan_all_data = %x\n"
+	.string	"prog read d error: = %x %x %x\n"
 .LC89:
-	.string	"scan lpa = %x ppa= %x\n"
+	.string	"FtlMapWritePage error = %x \n"
 .LC90:
-	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
+	.string	"FtlMapWritePage error = %x error count = %d\n"
 .LC91:
-	.string	"...%s enter...\n"
+	.string	"region_id = %x phyAddr = %x\n"
 .LC92:
-	.string	"FtlCheckVpc2 %x = %x  %x\n"
+	.string	"spare:"
 .LC93:
-	.string	"free blk vpc error %x = %x  %x\n"
+	.string	"map_ppn:"
 .LC94:
-	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
+	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
 .LC95:
-	.string	"FtlBbmTblFlush error:%x\n"
+	.string	"...%s enter...\n"
 .LC96:
-	.string	"FtlBbmTblFlush error = %x error count = %d\n"
+	.string	"FtlCheckVpc2 %x = %x  %x\n"
 .LC97:
-	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+	.string	"free blk vpc error %x = %x  %x\n"
 .LC98:
-	.string	"decrement_vpc_count %x = %d\n"
+	.string	"ftl_scan_all_data = %x\n"
 .LC99:
-	.string	"spuer block %x vpn is 0\n "
+	.string	"scan lpa = %x ppa= %x\n"
 .LC100:
-	.string	"no ect"
+	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC101:
-	.string	"FtlVpcTblFlush error = %x error count = %d\n"
+	.string	"FtlGcScanTempBlk Error ID %x %x!!!!!!! \n"
 .LC102:
-	.string	"FtlCheckVpc %x = %x  %x\n"
+	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
 .LC103:
-	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+	.string	"FtlBbmTblFlush error:%x\n"
 .LC104:
-	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+	.string	"FtlBbmTblFlush error = %x error count = %d\n"
 .LC105:
-	.string	"FtlWrite: lpa error:%x %x\n"
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
 .LC106:
-	.string	"\0013vendor storage %x,%x,%x\n"
+	.string	"decrement_vpc_count %x = %d\n"
 .LC107:
-	.string	"vendor_storage"
\ No newline at end of file
+	.string	"spuer block %x vpn is 0\n "
+.LC108:
+	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
+.LC109:
+	.string	"no ect"
+.LC110:
+	.string	"FtlVpcTblFlush error = %x error count = %d\n"
+.LC111:
+	.string	"FtlCheckVpc %x = %x  %x\n"
+.LC112:
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+.LC113:
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+.LC114:
+	.string	"FtlWrite: lpa error:%x %x\n"
+.LC115:
+	.string	"write_idblock fix data %x %x %x\n"
+.LC116:
+	.string	"write_idblock fail! %x %x %x %x\n"
+.LC117:
+	.string	"%s idb buffer alloc fail\n"
+.LC118:
+	.string	"vendor_storage"
diff --git a/drivers/rkflash/rkflash_api.h b/drivers/rkflash/rkflash_api.h
index 35722fc0ab13..f1bdb7b33f1e 100644
--- a/drivers/rkflash/rkflash_api.h
+++ b/drivers/rkflash/rkflash_api.h
@@ -16,6 +16,7 @@ unsigned int sftl_flash_get_capacity(void);
 void sftl_flash_deinit(void);
 int sftl_flash_resume(void __iomem *reg_addr);
 void sftl_flash_clean_irq(void);
+int sftl_flash_gc(void);
 #endif
 
 #ifdef CONFIG_RK_SFC_NOR
@@ -28,6 +29,7 @@ void snor_deinit(void);
 int snor_resume(void __iomem *reg_addr);
 int snor_vendor_read(unsigned int sec, unsigned int n_sec, void *p_data);
 int snor_vendor_write(unsigned int sec, unsigned int n_sec, void *p_data);
+int snor_gc(void);
 #endif
 
 #ifdef CONFIG_RK_SFC_NAND
@@ -40,6 +42,7 @@ unsigned int snand_get_capacity(void);
 void snand_deinit(void);
 int snand_resume(void __iomem *reg_addr);
 void sfc_clean_irq(void);
+int snand_gc(void);
 #endif
 
 #endif
diff --git a/drivers/rkflash/rkflash_blk.c b/drivers/rkflash/rkflash_blk.c
index 0ca556365d3b..17a9d728fba2 100644
--- a/drivers/rkflash/rkflash_blk.c
+++ b/drivers/rkflash/rkflash_blk.c
@@ -33,6 +33,15 @@
 
 #include "../soc/rockchip/flash_vendor_storage.h"
 
+void __printf(1, 2) sftl_printk(char *fmt, ...)
+{
+	va_list ap;
+
+	va_start(ap, fmt);
+	vprintk(fmt, ap);
+	va_end(ap);
+}
+
 static struct flash_boot_ops nandc_nand_ops = {
 #ifdef	CONFIG_RK_NANDC_NAND
 	FLASH_TYPE_NANDC_NAND,
@@ -44,8 +53,9 @@ static struct flash_boot_ops nandc_nand_ops = {
 	sftl_flash_resume,
 	sftl_flash_vendor_read,
 	sftl_flash_vendor_write,
+	sftl_flash_gc,
 #else
-	-1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
+	-1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
 #endif
 };
 
@@ -60,8 +70,9 @@ static struct flash_boot_ops sfc_nor_ops = {
 	snor_resume,
 	snor_vendor_read,
 	snor_vendor_write,
+	snor_gc,
 #else
-	-1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
+	-1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
 #endif
 };
 
@@ -76,8 +87,9 @@ static struct flash_boot_ops sfc_nand_ops = {
 	snand_resume,
 	snand_vendor_read,
 	snand_vendor_write,
+	snand_gc,
 #else
-	-1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
+	-1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
 #endif
 };
 
@@ -140,16 +152,31 @@ int rkflash_vendor_write(u32 sec, u32 n_sec, void *p_data)
 	return ret;
 }
 
+static int rkflash_flash_gc(void)
+{
+	int ret;
+
+	if (g_boot_ops[g_flash_type]->gc) {
+		mutex_lock(&g_flash_ops_mutex);
+		ret = g_boot_ops[g_flash_type]->gc();
+		mutex_unlock(&g_flash_ops_mutex);
+	} else {
+		ret = -EPERM;
+	}
+
+	return ret;
+}
+
 static unsigned int rk_partition_init(struct flash_part *part)
 {
 	int i, part_num = 0;
-	int desity;
+	u32 desity;
 	struct STRUCT_PART_INFO *g_part;  /* size 2KB */
 
 	g_part = kmalloc(sizeof(*g_part), GFP_KERNEL | GFP_DMA);
 	if (!g_part)
 		return 0;
-
+	mutex_lock(&g_flash_ops_mutex);
 	if (g_boot_ops[g_flash_type]->read(0, 4, g_part) == 0) {
 		if (g_part->hdr.ui_fw_tag == RK_PARTITION_TAG) {
 			part_num = g_part->hdr.ui_part_entry_count;
@@ -163,9 +190,14 @@ static unsigned int rk_partition_init(struct flash_part *part)
 				part[i].type = 0;
 				if (part[i].size == UINT_MAX)
 					part[i].size = desity - part[i].offset;
+				if (part[i].offset + part[i].size > desity) {
+					part[i].size = desity - part[i].offset;
+					break;
+				}
 			}
 		}
 	}
+	mutex_unlock(&g_flash_ops_mutex);
 	kfree(g_part);
 
 	memset(&fw_header_p, 0x0, sizeof(fw_header_p));
@@ -179,10 +211,17 @@ static unsigned int rk_partition_init(struct flash_part *part)
 
 static int rkflash_proc_show(struct seq_file *m, void *v)
 {
+	int real_size = 0;
+	char *ftl_buf = kzalloc(4096, GFP_KERNEL);
+
+	real_size = rknand_proc_ftlread(4096, ftl_buf);
+	if (real_size > 0)
+		seq_printf(m, "%s", ftl_buf);
 	seq_printf(m, "Totle Read %ld KB\n", totle_read_data >> 1);
 	seq_printf(m, "Totle Write %ld KB\n", totle_write_data >> 1);
 	seq_printf(m, "totle_write_count %ld\n", totle_write_count);
 	seq_printf(m, "totle_read_count %ld\n", totle_read_count);
+	kfree(ftl_buf);
 	return 0;
 }
 
@@ -309,6 +348,7 @@ static int rkflash_blktrans_thread(void *arg)
 			set_current_state(TASK_INTERRUPTIBLE);
 			spin_unlock_irq(rq->queue_lock);
 			rkflash_req_jiffies = HZ / 10;
+			rkflash_flash_gc();
 			wait_event_timeout(blk_ops->thread_wq,
 					   blk_ops->quit || rknand_req_do,
 					   rkflash_req_jiffies);
@@ -690,7 +730,8 @@ int rkflash_dev_init(void __iomem *reg_addr, enum flash_con_type con_type)
 						rkflash_vendor_write);
 		ret = rk_sftl_vendor_storage_init();
 		if (!ret) {
-			rk_vendor_register(sftl_vendor_read, sftl_vendor_write);
+			rk_vendor_register(rk_sftl_vendor_read,
+					   rk_sftl_vendor_write);
 			rk_sftl_vendor_register();
 			pr_info("rkflashd vendor storage init ok !\n");
 		} else {
diff --git a/drivers/rkflash/rkflash_blk.h b/drivers/rkflash/rkflash_blk.h
index 90de34f7581e..e3dc37efdcc5 100644
--- a/drivers/rkflash/rkflash_blk.h
+++ b/drivers/rkflash/rkflash_blk.h
@@ -25,6 +25,7 @@ enum flash_type {
 
 struct flash_boot_ops {
 	int id;
+
 	int (*init)(void __iomem *reg_addr);
 	int (*read)(u32 sec, u32 n_sec, void *p_data);
 	int (*write)(u32 sec, u32 n_sec, void *p_data);
@@ -33,6 +34,7 @@ struct flash_boot_ops {
 	int (*resume)(void __iomem *reg_addr);
 	int (*vendor_read)(u32 sec, u32 n_sec, void *p_data);
 	int (*vendor_write)(u32 sec, u32 n_sec, void *p_data);
+	int (*gc)(void);
 };
 
 struct flash_part {
diff --git a/drivers/rkflash/rkflash_debug.h b/drivers/rkflash/rkflash_debug.h
index 6f41f530eb7b..850a9e41b67b 100644
--- a/drivers/rkflash/rkflash_debug.h
+++ b/drivers/rkflash/rkflash_debug.h
@@ -37,13 +37,13 @@ extern unsigned int rkflash_debug;
 #define	PRINT_BIT_SFC_E		BIT(1)
 #define PRINT_BIT_SFC_HEX	BIT(2)
 #define	PRINT_BIT_SFC\
-		(PRINT_BIT_SFC_I | PRINT_BIT_SFC_E | PRINT_BIT_SFC_HEX)
+		(PRINT_BIT_SFC_E | PRINT_BIT_SFC_HEX)
 
 #define	PRINT_BIT_NANDC_I	BIT(4)
 #define	PRINT_BIT_NANDC_E	BIT(5)
 #define PRINT_BIT_NANDC_HEX	BIT(5)
 #define	PRINT_BIT_NANDC\
-		(PRINT_BIT_NANDC_I | PRINT_BIT_NANDC_E | PRINT_BIT_NANDC_HEX)
+		(PRINT_BIT_NANDC_E | PRINT_BIT_NANDC_HEX)
 
 #if (PRINT_SWI_SFC_I)
 #define PRINT_SFC_I(...) {if (rkflash_debug & PRINT_BIT_SFC_I)\
diff --git a/drivers/rkflash/rksfc_base.c b/drivers/rkflash/rksfc_base.c
index 68394638e2ad..fba90981a1aa 100644
--- a/drivers/rkflash/rksfc_base.c
+++ b/drivers/rkflash/rksfc_base.c
@@ -21,8 +21,8 @@
 #include "rkflash_api.h"
 #include "rkflash_blk.h"
 
-#define RKSFC_VERSION_AND_DATE  "rksfc_base v1.1 2016-01-08"
-#define	RKSFC_CLK_SET_RATE	(100 * 1000 * 1000)
+#define RKSFC_VERSION_AND_DATE	"rksfc_base v1.1 2016-01-08"
+#define RKSFC_CLK_MAX_RATE	(150 * 1000 * 1000)
 
 struct rksfc_info {
 	void __iomem	*reg_base;
@@ -138,8 +138,11 @@ static int rksfc_probe(struct platform_device *pdev)
 		return -1;
 	}
 	clk_prepare_enable(g_sfc_info.ahb_clk);
-	clk_set_rate(g_sfc_info.clk, RKSFC_CLK_SET_RATE);
 	g_sfc_info.clk_rate = clk_get_rate(g_sfc_info.clk);
+	if (g_sfc_info.clk_rate > RKSFC_CLK_MAX_RATE) {
+		clk_set_rate(g_sfc_info.clk, RKSFC_CLK_MAX_RATE);
+		g_sfc_info.clk_rate = clk_get_rate(g_sfc_info.clk);
+	}
 	clk_prepare_enable(g_sfc_info.clk);
 	dev_info(&pdev->dev,
 		 "%s clk rate = %d\n",
diff --git a/drivers/rkflash/sfc_nand.c b/drivers/rkflash/sfc_nand.c
index 4f231744d272..2a3a95f5fb2f 100644
--- a/drivers/rkflash/sfc_nand.c
+++ b/drivers/rkflash/sfc_nand.c
@@ -22,6 +22,8 @@ static struct nand_info spi_nand_tbl[] = {
 	{0xC212, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 4, 0xB0, 0, 4, 8, &sfc_nand_ecc_status_sp1},
 	/* MX35LF2GE4AB */
 	{0xC222, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 4, 0xB0, 0, 4, 8, &sfc_nand_ecc_status_sp1},
+	/* MX66L1G45G */
+	{0x90AF, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x00, 18, 4, 0xB0, 0, 4, 8, &sfc_nand_ecc_status_sp1},
 	/* GD5F1GQ4UAYIG */
 	{0xC8F1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 8, 0xB0, 0, 4, 8, NULL},
 	/* MT29F1G01ZAC */
@@ -33,13 +35,27 @@ static struct nand_info spi_nand_tbl[] = {
 	/* IS37SML01G1 */
 	{0xC821, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x00, 18, 1, 0xB0, 0XFF, 8, 12, &sfc_nand_ecc_status_sp1},
 	/* W25N01GV */
-	{0xEFAA, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 1, 0xFF, 0XFF, 4, 20, &sfc_nand_ecc_status_sp1},
+	{0xEFAA, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xFF, 0XFF, 4, 20, &sfc_nand_ecc_status_sp1},
 	/* HYF2GQ4UAACAE */
-	{0xC952, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 14, 0xB0, 0, 4, 36, NULL},
+	{0xC952, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 14, 0xB0, 0, 4, 36, NULL},
+	/* HYF2GQ4UAACAE */
+	{0xC952, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 14, 0xB0, 0, 4, 36, NULL},
 	/* HYF2GQ4UDACAE */
-	{0xC922, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 19, 4, 0xB0, 0, 4, 20, NULL},
+	{0xC922, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 4, 0xB0, 0, 4, 20, NULL},
+	/* HYF2GQ4UHCCAE */
+	{0xC95A, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 14, 0xB0, 0, 4, 36, NULL},
 	/* HYF1GQ4UDACAE */
-	{0xC921, 4, 64, 2, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 4, 0xB0, 0, 4, 20, NULL},
+	{0xC921, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 4, 0xB0, 0, 4, 20, NULL},
+	/* F50L1G41LB */
+	{0xC801, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xFF, 0xFF, 20, 36, NULL},
+	/* XT26G02A */
+	{0x0be2, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 19, 1, 0xB0, 0x0, 8, 12, &sfc_nand_ecc_status_sp4},
+	/* XT26G01A */
+	{0x0be1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x4C, 18, 1, 0xB0, 0x0, 8, 12, &sfc_nand_ecc_status_sp4},
+	/* FS35ND01G-S1 */
+	{0xCDB1, 4, 64, 1, 1024, 0x13, 0x10, 0x03, 0x02, 0x6B, 0x32, 0xD8, 0x0C, 18, 4, 0xB0, 0x0, 16, 20, &sfc_nand_ecc_status_sp5},
+	/* FS35ND02G-S2 */
+	{0xCDA2, 4, 64, 1, 2048, 0x13, 0x10, 0x03, 0x02, 0x03, 0x02, 0xD8, 0x00, 19, 4, 0xFF, 0xFF, 16, 20, &sfc_nand_ecc_status_sp5},
 };
 
 static u8 id_byte[8];
@@ -258,6 +274,84 @@ u32 sfc_nand_ecc_status_sp3(void)
 	return ret;
 }
 
+/*
+ * ecc spectial type4:
+ * [0x0000], No bit errors were detected;
+ * [0x0001, 0x0111], Bit errors were detected and corrected. Not
+ *	reach Flipping Bits;
+ * [0x1000], Multiple bit errors were detected and
+ *	not corrected.
+ * [0x1100], Bit error count equals the bit flip
+ *	detectionthreshold
+ * else, reserved
+ */
+u32 sfc_nand_ecc_status_sp4(void)
+{
+	int ret;
+	u32 i;
+	u8 ecc;
+	u8 status;
+	u32 timeout = 1000 * 1000;
+
+	for (i = 0; i < timeout; i++) {
+		ret = sfc_nand_read_feature(0xC0, &status);
+		if (ret != SFC_OK)
+			return SFC_NAND_ECC_ERROR;
+		if (!(status & (1 << 0)))
+			break;
+		sfc_delay(1);
+	}
+
+	ecc = (status >> 2) & 0x0f;
+	if (ecc < 7)
+		ret = SFC_NAND_ECC_OK;
+	else if (ecc == 7 || ecc == 12)
+		ret = SFC_NAND_ECC_REFRESH;
+	else
+		ret = SFC_NAND_ECC_ERROR;
+
+	return ret;
+}
+
+/*
+ * ecc spectial type5:
+ * [0x0], No bit errors were detected;
+ * [0x001, 0x011], Bit errors were detected and corrected. Not
+ *	reach Flipping Bits;
+ * [0x100], Bit error count equals the bit flip
+ *	detectionthreshold
+ * [0x101, 0x110], Reserved;
+ * [0x111], Multiple bit errors were detected and
+ *	not corrected.
+ */
+u32 sfc_nand_ecc_status_sp5(void)
+{
+	int ret;
+	u32 i;
+	u8 ecc;
+	u8 status;
+	u32 timeout = 1000 * 1000;
+
+	for (i = 0; i < timeout; i++) {
+		ret = sfc_nand_read_feature(0xC0, &status);
+		if (ret != SFC_OK)
+			return SFC_NAND_ECC_ERROR;
+		if (!(status & (1 << 0)))
+			break;
+		sfc_delay(1);
+	}
+
+	ecc = (status >> 4) & 0x07;
+	if (ecc < 4)
+		ret = SFC_NAND_ECC_OK;
+	else if (ecc == 4)
+		ret = SFC_NAND_ECC_REFRESH;
+	else
+		ret = SFC_NAND_ECC_ERROR;
+
+	return ret;
+}
+
 static u32 sfc_nand_erase_block(u8 cs, u32 addr)
 {
 	int ret;
@@ -293,8 +387,8 @@ static u32 sfc_nand_prog_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 
 	sfc_nand_write_en();
 	if (sfc_nand_dev.prog_lines == DATA_LINES_X4 &&
-	    p_nand_info->QE_address == 0xFF &&
-	    sfc_get_version() != SFC_VER_3)
+	    p_nand_info->feature & FEA_SOFT_QOP_BIT &&
+	    sfc_get_version() < SFC_VER_3)
 		sfc_nand_rw_preset();
 
 	sfcmd.d32 = 0;
@@ -344,8 +438,8 @@ static u32 sfc_nand_read_page(u8 cs, u32 addr, u32 *p_data, u32 *p_spare)
 		ecc_result = sfc_nand_ecc_status();
 
 	if (sfc_nand_dev.read_lines == DATA_LINES_X4 &&
-	    p_nand_info->QE_address == 0xFF &&
-	    sfc_get_version() != SFC_VER_3)
+	    p_nand_info->feature & FEA_SOFT_QOP_BIT &&
+	    sfc_get_version() < SFC_VER_3)
 		sfc_nand_rw_preset();
 
 	sfcmd.d32 = 0;
diff --git a/drivers/rkflash/sfc_nand.h b/drivers/rkflash/sfc_nand.h
index c4d92a02bd1d..a9119b26c6a2 100644
--- a/drivers/rkflash/sfc_nand.h
+++ b/drivers/rkflash/sfc_nand.h
@@ -22,6 +22,7 @@
 #define FEA_4BIT_PROG           BIT(3)
 #define FEA_4BYTE_ADDR          BIT(4)
 #define FEA_4BYTE_ADDR_MODE	BIT(5)
+#define FEA_SOFT_QOP_BIT	BIT(6)
 
 #define MID_WINBOND             0xEF
 #define MID_GIGADEV             0xC8
@@ -123,5 +124,7 @@ void sfc_nand_deinit(void);
 int sfc_nand_read_id(u8 *buf);
 u32 sfc_nand_ecc_status_sp1(void);
 u32 sfc_nand_ecc_status_sp3(void);
+u32 sfc_nand_ecc_status_sp4(void);
+u32 sfc_nand_ecc_status_sp5(void);
 
 #endif
diff --git a/drivers/rkflash/sfc_nand_boot.c b/drivers/rkflash/sfc_nand_boot.c
index b981ded2299f..1f0ecea4ef90 100644
--- a/drivers/rkflash/sfc_nand_boot.c
+++ b/drivers/rkflash/sfc_nand_boot.c
@@ -48,6 +48,11 @@ int snand_vendor_write(u32 sec, u32 n_sec, void *p_data)
 	return sftl_vendor_write(sec, n_sec, p_data);
 }
 
+int snand_gc(void)
+{
+	return sftl_gc();
+}
+
 void snand_deinit(void)
 {
 	sftl_deinit();
diff --git a/drivers/rkflash/sfc_nor.c b/drivers/rkflash/sfc_nor.c
index cc51cac0bc29..3561ea984b09 100644
--- a/drivers/rkflash/sfc_nor.c
+++ b/drivers/rkflash/sfc_nor.c
@@ -20,14 +20,24 @@ static struct flash_info spi_flash_tbl[] = {
 	{0xc84019, 128, 8, 0x13, 0x12, 0x6C, 0x3E, 0x21, 0xDC, 0x1C, 16, 6, 0},
 	/* GD25Q512MC */
 	{0xc84020, 128, 8, 0x13, 0x12, 0x6C, 0x3E, 0x21, 0xDC, 0x1C, 17, 6, 0},
+	/* 25Q64JVSSIQ */
+	{0xef4017, 128, 8, 0x13, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 14, 9, 0},
 	/* 25Q128FV */
 	{0xef4018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 15, 9, 0},
 	/* 25Q256FV */
 	{0xef4019, 128, 8, 0x13, 0x02, 0x6C, 0x32, 0x20, 0xD8, 0x3C, 16, 9, 0},
+	/* 25Q64FWSSIG */
+	{0xef6017, 128, 8, 0x13, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 14, 9, 0},
 	/* XT25F128A */
 	{0x207018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x00, 15, 0, 0},
 	/* MX25L25635E/F */
 	{0xc22019, 128, 8, 0x03, 0x02, 0x6B, 0x38, 0x20, 0xD8, 0x30, 16, 6, 0},
+	/* XM25QH64A */
+	{0x207017, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 14, 0, 0},
+	/* XM25QH128A */
+	{0x207018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 15, 0, 0},
+	/* EN25QH128A */
+	{0x1c7018, 128, 8, 0x03, 0x02, 0x6B, 0x32, 0x20, 0xD8, 0x0C, 15, 0, 0},
 };
 
 static const u8 sfnor_dev_code[] = {
diff --git a/drivers/rkflash/sfc_nor_boot.c b/drivers/rkflash/sfc_nor_boot.c
index 2bc2da22ad92..519ddc9fb625 100644
--- a/drivers/rkflash/sfc_nor_boot.c
+++ b/drivers/rkflash/sfc_nor_boot.c
@@ -94,6 +94,11 @@ int snor_vendor_write(u32 sec, u32 n_sec, void *p_data)
 	return (u32)ret == n_sec ? 0 : ret;
 }
 
+int snor_gc(void)
+{
+	return 0;
+}
+
 unsigned int snor_capacity(void)
 {
 	return snor_get_capacity(&sfnor_dev);
diff --git a/drivers/rkflash/sfc_nor_mtd.c b/drivers/rkflash/sfc_nor_mtd.c
index aefb2923ae56..32f3f8072e94 100644
--- a/drivers/rkflash/sfc_nor_mtd.c
+++ b/drivers/rkflash/sfc_nor_mtd.c
@@ -188,7 +188,7 @@ int sfc_nor_mtd_init(struct SFNOR_DEV *p_dev)
 		goto free_dma_buf;
 	}
 	part_num = 0;
-	if (snor_read(p_dev, 0, 4, g_part) == 0) {
+	if (snor_read(p_dev, 0, 4, g_part) == 4) {
 		if (g_part->hdr.ui_fw_tag == RK_PARTITION_TAG) {
 			part_num = g_part->hdr.ui_part_entry_count;
 			for (i = 0; i < part_num; i++) {
-- 
2.11.0

