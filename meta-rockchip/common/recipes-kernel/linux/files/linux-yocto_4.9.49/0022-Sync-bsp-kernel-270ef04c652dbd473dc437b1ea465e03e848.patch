From 8bf2186e05a86ff805e6b36b46cca956e6a23ba8 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Sat, 14 Jul 2018 15:12:17 +0800
Subject: [PATCH 22/73] Sync bsp kernel
 270ef04c652dbd473dc437b1ea465e03e848aa5d

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 arch/arm/Makefile                                  |     3 +
 arch/arm/boot/compressed/head.S                    |     4 +-
 arch/arm/mach-rockchip/Kconfig                     |     5 -
 arch/arm/mm/dma-mapping.c                          |     3 +
 .../boot/dts/rockchip/rk3308-evb-dmic-pdm-v11.dts  |    40 +-
 arch/arm64/boot/dts/rockchip/rk3308-evb-v11.dtsi   |    16 +-
 arch/arm64/boot/dts/rockchip/rk3308.dtsi           |    77 +-
 drivers/clk/rockchip/Makefile                      |     3 +-
 drivers/clk/rockchip/clk-half-divider.c            |   222 +
 drivers/clk/rockchip/clk-mmc-phase.c               |     6 +-
 drivers/clk/rockchip/clk-pll.c                     |    41 +-
 drivers/clk/rockchip/clk-rk3308.c                  |     3 +-
 drivers/clk/rockchip/clk.c                         |    19 +-
 drivers/clk/rockchip/clk.h                         |   111 +-
 drivers/dma/pl330.c                                |    23 +
 drivers/iommu/rockchip-iommu.c                     |     9 +
 drivers/mmc/host/dw_mmc.c                          |     1 +
 drivers/rk_nand/rk_ftl_arm_v7.S                    | 23130 ++++++++--------
 drivers/rk_nand/rk_ftl_arm_v7_thumb.S              | 17303 ++++++------
 drivers/rk_nand/rk_ftlv5_arm64.S                   | 12173 +++++----
 drivers/rk_nand/rk_nand_blk.c                      |    32 +-
 drivers/rk_nand/rk_zftl_arm64.S                    | 26775 ++++++++++---------
 drivers/soc/rockchip/Kconfig                       |     2 +
 drivers/soc/rockchip/Kconfig.cpu                   |    65 +
 include/linux/dmaengine.h                          |     2 +
 include/sound/pcm.h                                |    23 +-
 sound/core/pcm_dmaengine.c                         |     9 +
 sound/soc/codecs/rk3308_codec.c                    |  1831 +-
 sound/soc/codecs/rk3308_codec.h                    |    21 +-
 sound/soc/rockchip/Kconfig                         |    74 +-
 sound/soc/rockchip/Makefile                        |    22 +-
 sound/soc/rockchip/rockchip_i2s.c                  |   107 +-
 sound/soc/rockchip/rockchip_i2s.h                  |     3 +
 sound/soc/rockchip/rockchip_i2s_tdm.c              |    14 +-
 sound/soc/rockchip/rockchip_multi_dais.c           |   521 +
 sound/soc/rockchip/rockchip_multi_dais.h           |    33 +
 sound/soc/rockchip/rockchip_multi_dais_pcm.c       |   575 +
 sound/soc/rockchip/rockchip_multicodecs.c          |    24 +-
 sound/soc/rockchip/rockchip_vad.c                  |   853 +
 sound/soc/rockchip/rockchip_vad.h                  |   183 +
 sound/soc/rockchip/vad_preprocess.h                |    29 +
 sound/soc/rockchip/vad_preprocess_arm.S            |   348 +
 sound/soc/rockchip/vad_preprocess_arm64.S          |   273 +
 sound/soc/rockchip/vad_preprocess_thumb.S          |   360 +
 sound/soc/soc-generic-dmaengine-pcm.c              |    20 +
 45 files changed, 46489 insertions(+), 38902 deletions(-)
 create mode 100644 drivers/clk/rockchip/clk-half-divider.c
 create mode 100644 drivers/soc/rockchip/Kconfig.cpu
 create mode 100644 sound/soc/rockchip/rockchip_multi_dais.c
 create mode 100644 sound/soc/rockchip/rockchip_multi_dais.h
 create mode 100644 sound/soc/rockchip/rockchip_multi_dais_pcm.c
 create mode 100644 sound/soc/rockchip/rockchip_vad.c
 create mode 100644 sound/soc/rockchip/rockchip_vad.h
 create mode 100644 sound/soc/rockchip/vad_preprocess.h
 create mode 100644 sound/soc/rockchip/vad_preprocess_arm.S
 create mode 100644 sound/soc/rockchip/vad_preprocess_arm64.S
 create mode 100644 sound/soc/rockchip/vad_preprocess_thumb.S

diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index a9e7318138ad..67dacf13f28b 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -148,6 +148,7 @@ endif
 textofs-$(CONFIG_ARCH_MSM8X60) := 0x00208000
 textofs-$(CONFIG_ARCH_MSM8960) := 0x00208000
 textofs-$(CONFIG_ARCH_AXXIA) := 0x00308000
+textofs-$(CONFIG_CPU_RK3308) := 0x00058000
 
 # Machine directory name.  This list is sorted alphanumerically
 # by CONFIG_* macro name.
@@ -198,7 +199,9 @@ machine-$(CONFIG_ARCH_PICOXCELL)	+= picoxcell
 machine-$(CONFIG_ARCH_PXA)		+= pxa
 machine-$(CONFIG_ARCH_QCOM)		+= qcom
 machine-$(CONFIG_ARCH_REALVIEW)		+= realview
+ifndef CONFIG_ARM_PSCI
 machine-$(CONFIG_ARCH_ROCKCHIP)		+= rockchip
+endif
 machine-$(CONFIG_ARCH_RPC)		+= rpc
 machine-$(CONFIG_ARCH_S3C24XX)		+= s3c24xx
 machine-$(CONFIG_ARCH_S3C64XX)		+= s3c64xx
diff --git a/arch/arm/boot/compressed/head.S b/arch/arm/boot/compressed/head.S
index fc6d541549a2..77c25c64169e 100644
--- a/arch/arm/boot/compressed/head.S
+++ b/arch/arm/boot/compressed/head.S
@@ -688,8 +688,8 @@ __setup_mmu:	sub	r3, r4, #16384		@ Page directory size
  * bits for the RAM area only.
  */
 		mov	r0, r3
-		mov	r9, r0, lsr #18
-		mov	r9, r9, lsl #18		@ start of RAM
+		mov	r9, r0, lsr #20
+		mov	r9, r9, lsl #20		@ start of RAM
 		add	r10, r9, #0x10000000	@ a reasonable RAM size
 		mov	r1, #0x12		@ XN|U + section mapping
 		orr	r1, r1, #3 << 10	@ AP=11
diff --git a/arch/arm/mach-rockchip/Kconfig b/arch/arm/mach-rockchip/Kconfig
index 9ad84cd01ba0..95afd09369d7 100644
--- a/arch/arm/mach-rockchip/Kconfig
+++ b/arch/arm/mach-rockchip/Kconfig
@@ -6,16 +6,11 @@ config ARCH_ROCKCHIP
 	select ARCH_HAS_RESET_CONTROLLER
 	select ARM_AMBA
 	select ARM_GIC
-	select CACHE_L2X0
 	select GPIOLIB
 	select HAVE_ARM_ARCH_TIMER
 	select HAVE_ARM_SCU if SMP
-	select HAVE_ARM_TWD if SMP
-	select DW_APB_TIMER_OF
 	select REGULATOR if PM
 	select ROCKCHIP_TIMER
-	select ARM_GLOBAL_TIMER
-	select CLKSRC_ARM_GLOBAL_TIMER_SCHED_CLOCK
 	help
 	  Support for Rockchip's Cortex-A9 Single-to-Quad-Core-SoCs
 	  containing the RK2928, RK30xx and RK31xx series.
diff --git a/arch/arm/mm/dma-mapping.c b/arch/arm/mm/dma-mapping.c
index ab7710002ba6..f1a7f3913eb2 100644
--- a/arch/arm/mm/dma-mapping.c
+++ b/arch/arm/mm/dma-mapping.c
@@ -411,6 +411,9 @@ static int __init atomic_pool_init(void)
 	struct page *page;
 	void *ptr;
 
+	if (!atomic_pool_size)
+		return 0;
+
 	atomic_pool = gen_pool_create(PAGE_SHIFT, -1);
 	if (!atomic_pool)
 		goto out;
diff --git a/arch/arm64/boot/dts/rockchip/rk3308-evb-dmic-pdm-v11.dts b/arch/arm64/boot/dts/rockchip/rk3308-evb-dmic-pdm-v11.dts
index 0f2416551b41..7932d0a8545d 100644
--- a/arch/arm64/boot/dts/rockchip/rk3308-evb-dmic-pdm-v11.dts
+++ b/arch/arm64/boot/dts/rockchip/rk3308-evb-dmic-pdm-v11.dts
@@ -11,8 +11,17 @@
 	model = "Rockchip RK3308 evb digital-pdm mic v11 board";
 	compatible = "rockchip,rk3308-evb-dmic-pdm-v11", "rockchip,rk3308";
 
-	pdm-mic-array {
+	pdm_i2s_dais: pdm-i2s-dais {
 		status = "okay";
+		compatible = "rockchip,rk3308-multi-dais", "rockchip,multi-dais";
+		dais = <&pdm_8ch>, <&i2s_8ch_2>;
+		capture,channel-mapping = <6 2>;
+		playback,channel-mapping = <0 2>;
+		bitclock-inversion = <1 0>;
+	};
+
+	pdm-mic-array {
+		status = "disabled";
 		compatible = "simple-audio-card";
 		simple-audio-card,name = "rockchip,pdm-mic-array";
 		simple-audio-card,cpu {
@@ -24,26 +33,27 @@
 	};
 
 	vad-sound {
-		status = "disabled";
+		status = "okay";
 		compatible = "rockchip,multicodecs-card";
 		rockchip,card-name = "rockchip,rk3308-vad";
-		rockchip,cpu = <&pdm_8ch>;
-		rockchip,codec = <&dummy_codec>, <&vad>;
+		rockchip,cpu = <&pdm_i2s_dais>;
+		rockchip,codec = <&acodec>, <&vad>;
 	};
 };
 
 &acodec_sound {
-	status = "okay";
+	status = "disabled";
 };
 
 &dummy_codec {
-	status = "okay";
+	status = "disabled";
 	#sound-dai-cells = <0>;
 };
 
 &pdm_8ch {
 	status = "okay";
 	#sound-dai-cells = <0>;
+	rockchip,no-dmaengine;
 	pinctrl-names = "default";
 	pinctrl-0 = <&pdm_m2_clk
 		     &pdm_m2_clkm
@@ -54,9 +64,21 @@
 };
 
 &vad {
-	status = "disabled";
-	rockchip,audio-src = <4>;
-	rockchip,det-channel = <2>;
+	status = "okay";
+	rockchip,audio-src = <&pdm_8ch>;
+	rockchip,det-channel = <0>;
 	rockchip,mode = <1>;
+	rockchip,buffer-time-ms = <200>;
+	#sound-dai-cells = <0>;
+};
+
+&i2s_8ch_2 {
+	status = "okay";
+	rockchip,no-dmaengine;
+	#sound-dai-cells = <0>;
+};
+
+&pdm_i2s_dais {
+	status = "okay";
 	#sound-dai-cells = <0>;
 };
diff --git a/arch/arm64/boot/dts/rockchip/rk3308-evb-v11.dtsi b/arch/arm64/boot/dts/rockchip/rk3308-evb-v11.dtsi
index 6a27918f12b7..34ab63d9242e 100644
--- a/arch/arm64/boot/dts/rockchip/rk3308-evb-v11.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk3308-evb-v11.dtsi
@@ -11,7 +11,7 @@
 	compatible = "rockchip,rk3308-evb-v11", "rockchip,rk3308";
 
 	chosen {
-		bootargs = "earlycon=uart8250,mmio32,0xff0c0000 swiotlb=1 console=ttyS2,1500000n8 root=PARTUUID=614e0000-0000 rootwait";
+		bootargs = "earlyprintk earlycon=uart8250,mmio32,0xff0c0000 swiotlb=1 console=ttyS2,1500000n8 root=PARTUUID=614e0000-0000 rootwait";
 	};
 
 	adc-keys {
@@ -245,8 +245,7 @@
 &acodec {
 	status = "okay";
 
-	#sound-dai-cells = <0>;
-
+	rockchip,loopback-grp = <0>;
 	hp-ctl-gpios = <&gpio0 RK_PA1 GPIO_ACTIVE_HIGH>;
 	spk-ctl-gpios = <&gpio0 RK_PA5 GPIO_ACTIVE_HIGH>;
 };
@@ -255,6 +254,15 @@
 	cpu-supply = <&vdd_core>;
 };
 
+&cpu0_opp_table {
+	opp-1200000000 {
+		status = "okay";
+	};
+	opp-1296000000 {
+		status = "okay";
+	};
+};
+
 &dmc {
 	center-supply = <&vdd_log>;
 	status = "okay";
@@ -641,8 +649,6 @@
 
 &i2s_8ch_2 {
 	status = "okay";
-
-	#sound-dai-cells = <0>;
 };
 
 &nandc {
diff --git a/arch/arm64/boot/dts/rockchip/rk3308.dtsi b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
index ab6dd81f518a..732d5ce06742 100644
--- a/arch/arm64/boot/dts/rockchip/rk3308.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk3308.dtsi
@@ -9,6 +9,7 @@
 #include <dt-bindings/interrupt-controller/arm-gic.h>
 #include <dt-bindings/interrupt-controller/irq.h>
 #include <dt-bindings/pinctrl/rockchip.h>
+#include <dt-bindings/soc/rockchip,boot-mode.h>
 #include <dt-bindings/thermal/thermal.h>
 
 / {
@@ -19,19 +20,19 @@
 	#size-cells = <2>;
 
 	aliases {
+		ethernet0 = &mac;
+		i2c0 = &i2c0;
+		i2c1 = &i2c1;
+		i2c2 = &i2c2;
+		i2c3 = &i2c3;
 		serial0 = &uart0;
 		serial1 = &uart1;
 		serial2 = &uart2;
 		serial3 = &uart3;
 		serial4 = &uart4;
-		i2c0 = &i2c0;
-		i2c1 = &i2c1;
-		i2c2 = &i2c2;
-		i2c3 = &i2c3;
 		spi0 = &spi0;
 		spi1 = &spi1;
 		spi2 = &spi2;
-		ethernet0 = &mac;
 	};
 
 	cpus {
@@ -95,6 +96,9 @@
 		compatible = "operating-points-v2";
 		opp-shared;
 
+		nvmem-cells = <&cpu_leakage>;
+		nvmem-cell-names = "leakage";
+
 		opp-408000000 {
 			opp-hz = /bits/ 64 <408000000>;
 			opp-microvolt = <950000 950000 1340000>;
@@ -120,6 +124,13 @@
 			opp-hz = /bits/ 64 <1200000000>;
 			opp-microvolt = <1200000 1200000 1340000>;
 			clock-latency-ns = <40000>;
+			status = "disabled";
+		};
+		opp-1296000000 {
+			opp-hz = /bits/ 64 <1296000000>;
+			opp-microvolt = <1250000 1250000 1340000>;
+			clock-latency-ns = <40000>;
+			status = "disabled";
 		};
 	};
 
@@ -132,6 +143,12 @@
 		interrupt-affinity = <&cpu0>, <&cpu1>, <&cpu2>, <&cpu3>;
 	};
 
+	cpuinfo {
+		compatible = "rockchip,cpuinfo";
+		nvmem-cells = <&otp_id>;
+		nvmem-cell-names = "id";
+	};
+
 	display_subsystem: display-subsystem {
 		compatible = "rockchip,display-subsystem";
 		ports = <&vop_out>;
@@ -202,15 +219,13 @@
 		reg-names = "ramoops_mem";
 	};
 
-	ramoops {
+	ramoops: ramoops {
 		compatible = "ramoops";
 		record-size = <0x0 0x30000>;
 		console-size = <0x0 0xc0000>;
 		ftrace-size = <0x0 0x00000>;
 		pmsg-size = <0x0 0x00000>;
 		memory-region = <&ramoops_mem>;
-
-		status = "disabled";
 	};
 
 	rgb: rgb {
@@ -278,6 +293,16 @@
 			clocks = <&cru SCLK_PVTM_PMU>;
 			clock-names = "pmu";
 		};
+
+		reboot-mode {
+			compatible = "syscon-reboot-mode";
+			offset = <0x500>;
+			mode-bootloader = <BOOT_BL_DOWNLOAD>;
+			mode-loader = <BOOT_BL_DOWNLOAD>;
+			mode-normal = <BOOT_NORMAL>;
+			mode-recovery = <BOOT_RECOVERY>;
+			mode-fastboot = <BOOT_FASTBOOT>;
+		};
 	};
 
 	core_grf: syscon@ff00c000 {
@@ -606,7 +631,7 @@
 					type = "passive";
 				};
 				soc_crit: soc-crit {
-					temperature = <95000>;
+					temperature = <115000>;
 					hysteresis = <2000>;
 					type = "critical";
 				};
@@ -646,10 +671,33 @@
 		pinctrl-1 = <&tsadc_otp_out>;
 		pinctrl-2 = <&tsadc_otp_gpio>;
 		#thermal-sensor-cells = <1>;
-		rockchip,hw-tshut-temp = <100000>;
+		rockchip,hw-tshut-temp = <120000>;
 		status = "disabled";
 	};
 
+	otp: otp@ff210000 {
+		compatible = "rockchip,rk3308-otp";
+		reg = <0x0 0xff210000 0x0 0x4000>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		clocks = <&cru SCLK_OTP_USR>, <&cru PCLK_OTP_NS>,
+			 <&cru PCLK_OTP_PHY>;
+		clock-names = "clk_otp", "pclk_otp", "pclk_otp_phy";
+		resets = <&cru SRST_OTP_PHY>;
+		reset-names = "otp_phy";
+
+		/* Data cells */
+		otp_id: id@7 {
+			reg = <0x07 0x10>;
+		};
+		cpu_leakage: cpu-leakage@17 {
+			reg = <0x17 0x1>;
+		};
+		logic_leakage: logic-leakage@18 {
+			reg = <0x18 0x1>;
+		};
+	};
+
 	amba {
 		compatible = "arm,amba-bus";
 		#address-cells = <2>;
@@ -960,6 +1008,15 @@
 		status = "disabled";
 	};
 
+	sfc: sfc@ff4c0000 {
+		compatible = "rockchip,sfc";
+		reg = <0x0 0xff4c0000 0x0 0x4000>;
+		interrupts = <GIC_SPI 82 IRQ_TYPE_LEVEL_HIGH>;
+		clocks = <&cru SCLK_SFC>, <&cru HCLK_SFC>;
+		clock-names = "clk_sfc", "hclk_sfc";
+		status = "disabled";
+	};
+
 	mac: ethernet@ff4e0000 {
 		compatible = "rockchip,rk3308-mac";
 		reg = <0x0 0xff4e0000 0x0 0x10000>;
diff --git a/drivers/clk/rockchip/Makefile b/drivers/clk/rockchip/Makefile
index c9501341f1f0..5e4e1e01993a 100644
--- a/drivers/clk/rockchip/Makefile
+++ b/drivers/clk/rockchip/Makefile
@@ -9,6 +9,7 @@ obj-y	+= clk-cpu.o
 obj-y	+= clk-inverter.o
 obj-y	+= clk-mmc-phase.o
 obj-y	+= clk-muxgrf.o
+obj-y   += clk-half-divider.o
 obj-$(CONFIG_RESET_CONTROLLER)	+= softrst.o
 
-obj-y	+= clk-rk3308.o
+obj-$(CONFIG_CPU_RK3308)	+= clk-rk3308.o
diff --git a/drivers/clk/rockchip/clk-half-divider.c b/drivers/clk/rockchip/clk-half-divider.c
new file mode 100644
index 000000000000..df7a386e6aba
--- /dev/null
+++ b/drivers/clk/rockchip/clk-half-divider.c
@@ -0,0 +1,222 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ */
+
+#include <linux/slab.h>
+#include <linux/bitops.h>
+#include <linux/regmap.h>
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include "clk.h"
+
+#define div_mask(width)	((1 << (width)) - 1)
+
+static bool _is_best_half_div(unsigned long rate, unsigned long now,
+			      unsigned long best, unsigned long flags)
+{
+	if (flags & CLK_DIVIDER_ROUND_CLOSEST)
+		return abs(rate - now) <= abs(rate - best);
+
+	return now <= rate && now >= best;
+}
+
+static unsigned long clk_half_divider_recalc_rate(struct clk_hw *hw,
+						  unsigned long parent_rate)
+{
+	struct clk_divider *divider = to_clk_divider(hw);
+	unsigned int val;
+
+	val = clk_readl(divider->reg) >> divider->shift;
+	val &= div_mask(divider->width);
+	val = val * 2 + 3;
+
+	return DIV_ROUND_UP_ULL(((u64)parent_rate * 2), val);
+}
+
+static int clk_half_divider_bestdiv(struct clk_hw *hw, unsigned long rate,
+				    unsigned long *best_parent_rate, u8 width,
+				    unsigned long flags)
+{
+	unsigned int i, bestdiv = 0;
+	unsigned long parent_rate, best = 0, now, maxdiv;
+	bool is_bestdiv = false;
+
+	if (!rate)
+		rate = 1;
+
+	maxdiv = div_mask(width);
+
+	if (!(clk_hw_get_flags(hw) & CLK_SET_RATE_PARENT)) {
+		parent_rate = *best_parent_rate;
+		bestdiv = DIV_ROUND_UP_ULL(((u64)parent_rate * 2), rate);
+		if (bestdiv < 3)
+			bestdiv = 0;
+		else
+			bestdiv = (bestdiv - 3) / 2;
+		bestdiv = bestdiv > maxdiv ? maxdiv : bestdiv;
+		return bestdiv;
+	}
+
+	/*
+	 * The maximum divider we can use without overflowing
+	 * unsigned long in rate * i below
+	 */
+	maxdiv = min(ULONG_MAX / rate, maxdiv);
+
+	for (i = 0; i <= maxdiv; i++) {
+		parent_rate = clk_hw_round_rate(clk_hw_get_parent(hw),
+						((u64)rate * (i * 2 + 3)) / 2);
+		now = DIV_ROUND_UP_ULL(((u64)parent_rate * 2),
+				       (i * 2 + 3));
+
+		if (_is_best_half_div(rate, now, best, flags)) {
+			is_bestdiv = true;
+			bestdiv = i;
+			best = now;
+			*best_parent_rate = parent_rate;
+		}
+	}
+
+	if (!is_bestdiv) {
+		bestdiv = div_mask(width);
+		*best_parent_rate = clk_hw_round_rate(clk_hw_get_parent(hw), 1);
+	}
+
+	return bestdiv;
+}
+
+static long clk_half_divider_round_rate(struct clk_hw *hw, unsigned long rate,
+					unsigned long *prate)
+{
+	struct clk_divider *divider = to_clk_divider(hw);
+	int div;
+
+	div = clk_half_divider_bestdiv(hw, rate, prate,
+				       divider->width,
+				       divider->flags);
+
+	return DIV_ROUND_UP_ULL(((u64)*prate * 2), div * 2 + 3);
+}
+
+static int clk_half_divider_set_rate(struct clk_hw *hw, unsigned long rate,
+				     unsigned long parent_rate)
+{
+	struct clk_divider *divider = to_clk_divider(hw);
+	unsigned int value;
+	unsigned long flags = 0;
+	u32 val;
+
+	value = DIV_ROUND_UP_ULL(((u64)parent_rate * 2), rate);
+	value = (value - 3) / 2;
+	value =  min_t(unsigned int, value, div_mask(divider->width));
+
+	if (divider->lock)
+		spin_lock_irqsave(divider->lock, flags);
+	else
+		__acquire(divider->lock);
+
+	if (divider->flags & CLK_DIVIDER_HIWORD_MASK) {
+		val = div_mask(divider->width) << (divider->shift + 16);
+	} else {
+		val = clk_readl(divider->reg);
+		val &= ~(div_mask(divider->width) << divider->shift);
+	}
+	val |= value << divider->shift;
+	clk_writel(val, divider->reg);
+
+	if (divider->lock)
+		spin_unlock_irqrestore(divider->lock, flags);
+	else
+		__release(divider->lock);
+
+	return 0;
+}
+
+const struct clk_ops clk_half_divider_ops = {
+	.recalc_rate = clk_half_divider_recalc_rate,
+	.round_rate = clk_half_divider_round_rate,
+	.set_rate = clk_half_divider_set_rate,
+};
+EXPORT_SYMBOL_GPL(clk_half_divider_ops);
+
+/**
+ * Register a clock branch.
+ * Most clock branches have a form like
+ *
+ * src1 --|--\
+ *        |M |--[GATE]-[DIV]-
+ * src2 --|--/
+ *
+ * sometimes without one of those components.
+ */
+struct clk *rockchip_clk_register_halfdiv(const char *name,
+					  const char *const *parent_names,
+					  u8 num_parents, void __iomem *base,
+					  int muxdiv_offset, u8 mux_shift,
+					  u8 mux_width, u8 mux_flags,
+					  u8 div_shift, u8 div_width,
+					  u8 div_flags, int gate_offset,
+					  u8 gate_shift, u8 gate_flags,
+					  unsigned long flags,
+					  spinlock_t *lock)
+{
+	struct clk *clk;
+	struct clk_mux *mux = NULL;
+	struct clk_gate *gate = NULL;
+	struct clk_divider *div = NULL;
+	const struct clk_ops *mux_ops = NULL, *div_ops = NULL,
+			     *gate_ops = NULL;
+
+	if (num_parents > 1) {
+		mux = kzalloc(sizeof(*mux), GFP_KERNEL);
+		if (!mux)
+			return ERR_PTR(-ENOMEM);
+
+		mux->reg = base + muxdiv_offset;
+		mux->shift = mux_shift;
+		mux->mask = BIT(mux_width) - 1;
+		mux->flags = mux_flags;
+		mux->lock = lock;
+		mux_ops = (mux_flags & CLK_MUX_READ_ONLY) ? &clk_mux_ro_ops
+							: &clk_mux_ops;
+	}
+
+	if (gate_offset >= 0) {
+		gate = kzalloc(sizeof(*gate), GFP_KERNEL);
+		if (!gate)
+			goto err_gate;
+
+		gate->flags = gate_flags;
+		gate->reg = base + gate_offset;
+		gate->bit_idx = gate_shift;
+		gate->lock = lock;
+		gate_ops = &clk_gate_ops;
+	}
+
+	if (div_width > 0) {
+		div = kzalloc(sizeof(*div), GFP_KERNEL);
+		if (!div)
+			goto err_div;
+
+		div->flags = div_flags;
+		div->reg = base + muxdiv_offset;
+		div->shift = div_shift;
+		div->width = div_width;
+		div->lock = lock;
+		div_ops = &clk_half_divider_ops;
+	}
+
+	clk = clk_register_composite(NULL, name, parent_names, num_parents,
+				     mux ? &mux->hw : NULL, mux_ops,
+				     div ? &div->hw : NULL, div_ops,
+				     gate ? &gate->hw : NULL, gate_ops,
+				     flags);
+
+	return clk;
+err_div:
+	kfree(gate);
+err_gate:
+	kfree(mux);
+	return ERR_PTR(-ENOMEM);
+}
diff --git a/drivers/clk/rockchip/clk-mmc-phase.c b/drivers/clk/rockchip/clk-mmc-phase.c
index 7336446e6d53..6d60cc497493 100644
--- a/drivers/clk/rockchip/clk-mmc-phase.c
+++ b/drivers/clk/rockchip/clk-mmc-phase.c
@@ -101,10 +101,8 @@ static int rockchip_mmc_set_phase(struct clk_hw *hw, int degrees)
 	 * (2) It is assigned to the wrong parent.
 	 *
 	 * This check help debug the case (1), which seems to be the
-	 * most likely problem we often made and explicitly makes people
-	 * harder to debug the unstable mmc tuning stuff. So hope people
-	 * to have a close look at this comment to help check out what was
-	 * happening.
+	 * most likely problem we often face and which makes it difficult
+	 * for people to debug unstable mmc tuning results.
 	 */
 	if (!rate) {
 		pr_err("%s: invalid clk rate\n", __func__);
diff --git a/drivers/clk/rockchip/clk-pll.c b/drivers/clk/rockchip/clk-pll.c
index 9c893c19848c..2714c6a92448 100644
--- a/drivers/clk/rockchip/clk-pll.c
+++ b/drivers/clk/rockchip/clk-pll.c
@@ -21,6 +21,8 @@
 #include <linux/io.h>
 #include <linux/delay.h>
 #include <linux/clk-provider.h>
+#include <linux/device.h>
+#include <linux/list.h>
 #include <linux/regmap.h>
 #include <linux/clk.h>
 #include <linux/gcd.h>
@@ -104,12 +106,12 @@ int rockchip_pll_clk_adaptive_scaling(struct clk *clk, int sel)
 	return 0;
 }
 
-int rockchip_pll_clk_adaptive_rate(struct clk *clk, unsigned long rate)
+int rockchip_pll_clk_rate_to_scale(struct clk *clk, unsigned long rate)
 {
 	const struct rockchip_pll_rate_table *rate_table;
 	struct clk *parent = clk_get_parent(clk);
 	struct rockchip_clk_pll *pll;
-	int i;
+	unsigned int i;
 
 	if (IS_ERR_OR_NULL(parent))
 		return -EINVAL;
@@ -120,13 +122,34 @@ int rockchip_pll_clk_adaptive_rate(struct clk *clk, unsigned long rate)
 
 	rate_table = pll->rate_table;
 	for (i = 0; i < pll->rate_count; i++) {
-		if (rate >= rate_table[i].rate) {
-			pll->sel = i;
-			break;
-		}
+		if (rate >= rate_table[i].rate)
+			return i;
 	}
 
-	return 0;
+	return -EINVAL;
+}
+
+int rockchip_pll_clk_scale_to_rate(struct clk *clk, unsigned int scale)
+{
+	const struct rockchip_pll_rate_table *rate_table;
+	struct clk *parent = clk_get_parent(clk);
+	struct rockchip_clk_pll *pll;
+	unsigned int i;
+
+	if (IS_ERR_OR_NULL(parent))
+		return -EINVAL;
+
+	pll = to_rockchip_clk_pll(__clk_get_hw(parent));
+	if (!pll)
+		return -EINVAL;
+
+	rate_table = pll->rate_table;
+	for (i = 0; i < pll->rate_count; i++) {
+		if (i == scale)
+			return rate_table[i].rate;
+	}
+
+	return -EINVAL;
 }
 
 static struct rockchip_pll_rate_table *rk_pll_rate_table_get(void)
@@ -464,7 +487,7 @@ static unsigned long rockchip_rk3036_pll_recalc_rate(struct clk_hw *hw,
 {
 	struct rockchip_clk_pll *pll = to_rockchip_clk_pll(hw);
 	struct rockchip_pll_rate_table cur;
-	u64 rate64 = prate;
+	u64 rate64 = prate, frac_rate64 = prate;
 
 	if (pll->sel && pll->scaling)
 		return pll->scaling;
@@ -479,7 +502,7 @@ static unsigned long rockchip_rk3036_pll_recalc_rate(struct clk_hw *hw,
 
 	if (cur.dsmpd == 0) {
 		/* fractional mode */
-		u64 frac_rate64 = prate * cur.frac;
+		frac_rate64 *= cur.frac;
 
 		do_div(frac_rate64, cur.refdiv);
 		rate64 += frac_rate64 >> 24;
diff --git a/drivers/clk/rockchip/clk-rk3308.c b/drivers/clk/rockchip/clk-rk3308.c
index f252e1cba645..79f6f98c49ac 100644
--- a/drivers/clk/rockchip/clk-rk3308.c
+++ b/drivers/clk/rockchip/clk-rk3308.c
@@ -195,7 +195,7 @@ static struct rockchip_pll_clock rk3308_pll_clks[] __initdata = {
 		     RK3308_MODE_CON, 0, 0, 0, rk3308_pll_rates),
 	[dpll] = PLL(pll_rk3328, PLL_DPLL, "dpll", mux_pll_p,
 		     0, RK3308_PLL_CON(8),
-		     RK3308_MODE_CON, 2, 1, 0, NULL),
+		     RK3308_MODE_CON, 2, 1, 0, rk3308_pll_rates),
 	[vpll0] = PLL(pll_rk3328, PLL_VPLL0, "vpll0", mux_pll_p,
 		     0, RK3308_PLL_CON(16),
 		     RK3308_MODE_CON, 4, 2, 0, rk3308_pll_rates),
@@ -899,6 +899,7 @@ static const char *const rk3308_critical_clocks[] __initconst = {
 	"pclk_peri",
 	"hclk_audio",
 	"pclk_audio",
+	"sclk_ddrc",
 };
 
 static void __iomem *rk3308_cru_base;
diff --git a/drivers/clk/rockchip/clk.c b/drivers/clk/rockchip/clk.c
index 9ac0d4fc2a91..8734945ec52d 100644
--- a/drivers/clk/rockchip/clk.c
+++ b/drivers/clk/rockchip/clk.c
@@ -45,7 +45,7 @@
 static struct clk *rockchip_clk_register_branch(const char *name,
 		const char *const *parent_names, u8 num_parents, void __iomem *base,
 		int muxdiv_offset, u8 mux_shift, u8 mux_width, u8 mux_flags,
-		u8 div_shift, u8 div_width, u8 div_flags,
+		int div_offset, u8 div_shift, u8 div_width, u8 div_flags,
 		struct clk_div_table *div_table, int gate_offset,
 		u8 gate_shift, u8 gate_flags, unsigned long flags,
 		spinlock_t *lock)
@@ -89,7 +89,10 @@ static struct clk *rockchip_clk_register_branch(const char *name,
 			goto err_div;
 
 		div->flags = div_flags;
-		div->reg = base + muxdiv_offset;
+		if (div_offset)
+			div->reg = base + div_offset;
+		else
+			div->reg = base + muxdiv_offset;
 		div->shift = div_shift;
 		div->width = div_width;
 		div->lock = lock;
@@ -459,6 +462,16 @@ void __init rockchip_clk_register_branches(
 				list->gate_flags, flags, list->child,
 				&ctx->lock);
 			break;
+		case branch_half_divider:
+			clk = rockchip_clk_register_halfdiv(list->name,
+				list->parent_names, list->num_parents,
+				ctx->reg_base, list->muxdiv_offset,
+				list->mux_shift, list->mux_width,
+				list->mux_flags, list->div_shift,
+				list->div_width, list->div_flags,
+				list->gate_offset, list->gate_shift,
+				list->gate_flags, flags, &ctx->lock);
+			break;
 		case branch_gate:
 			flags |= CLK_SET_RATE_PARENT;
 
@@ -473,7 +486,7 @@ void __init rockchip_clk_register_branches(
 				list->parent_names, list->num_parents,
 				ctx->reg_base, list->muxdiv_offset, list->mux_shift,
 				list->mux_width, list->mux_flags,
-				list->div_shift, list->div_width,
+				list->div_offset, list->div_shift, list->div_width,
 				list->div_flags, list->div_table,
 				list->gate_offset, list->gate_shift,
 				list->gate_flags, flags, &ctx->lock);
diff --git a/drivers/clk/rockchip/clk.h b/drivers/clk/rockchip/clk.h
index 779497c5512b..65708e43cf51 100644
--- a/drivers/clk/rockchip/clk.h
+++ b/drivers/clk/rockchip/clk.h
@@ -426,6 +426,7 @@ enum rockchip_clk_branch_type {
 	branch_inverter,
 	branch_factor,
 	branch_ddrc,
+	branch_half_divider,
 };
 
 struct rockchip_clk_branch {
@@ -439,6 +440,7 @@ struct rockchip_clk_branch {
 	u8				mux_shift;
 	u8				mux_width;
 	u8				mux_flags;
+	int				div_offset;
 	u8				div_shift;
 	u8				div_width;
 	u8				div_flags;
@@ -471,6 +473,28 @@ struct rockchip_clk_branch {
 		.gate_flags	= gf,				\
 	}
 
+#define COMPOSITE_DIV_OFFSET(_id, cname, pnames, f, mo, ms, mw,	\
+			     mf, do, ds, dw, df, go, gs, gf)	\
+	{							\
+		.id		= _id,				\
+		.branch_type	= branch_composite,		\
+		.name		= cname,			\
+		.parent_names	= pnames,			\
+		.num_parents	= ARRAY_SIZE(pnames),		\
+		.flags		= f,				\
+		.muxdiv_offset	= mo,				\
+		.mux_shift	= ms,				\
+		.mux_width	= mw,				\
+		.mux_flags	= mf,				\
+		.div_offset	= do,				\
+		.div_shift	= ds,				\
+		.div_width	= dw,				\
+		.div_flags	= df,				\
+		.gate_offset	= go,				\
+		.gate_shift	= gs,				\
+		.gate_flags	= gf,				\
+	}
+
 #define COMPOSITE_NOMUX(_id, cname, pname, f, mo, ds, dw, df,	\
 			go, gs, gf)				\
 	{							\
@@ -760,6 +784,79 @@ struct rockchip_clk_branch {
 		.gate_flags	= gf,				\
 	}
 
+#define COMPOSITE_HALFDIV(_id, cname, pnames, f, mo, ms, mw, mf, ds, dw,\
+			  df, go, gs, gf)				\
+	{							\
+		.id		= _id,				\
+		.branch_type	= branch_half_divider,		\
+		.name		= cname,			\
+		.parent_names	= pnames,			\
+		.num_parents	= ARRAY_SIZE(pnames),		\
+		.flags		= f,				\
+		.muxdiv_offset	= mo,				\
+		.mux_shift	= ms,				\
+		.mux_width	= mw,				\
+		.mux_flags	= mf,				\
+		.div_shift	= ds,				\
+		.div_width	= dw,				\
+		.div_flags	= df,				\
+		.gate_offset	= go,				\
+		.gate_shift	= gs,				\
+		.gate_flags	= gf,				\
+	}
+
+#define COMPOSITE_NOGATE_HALFDIV(_id, cname, pnames, f, mo, ms, mw, mf,	\
+				 ds, dw, df)				\
+	{							\
+		.id		= _id,				\
+		.branch_type	= branch_half_divider,		\
+		.name		= cname,			\
+		.parent_names	= pnames,			\
+		.num_parents	= ARRAY_SIZE(pnames),		\
+		.flags		= f,				\
+		.muxdiv_offset	= mo,				\
+		.mux_shift	= ms,				\
+		.mux_width	= mw,				\
+		.mux_flags	= mf,				\
+		.div_shift	= ds,				\
+		.div_width	= dw,				\
+		.div_flags	= df,				\
+		.gate_offset	= -1,				\
+	}
+
+#define COMPOSITE_NOMUX_HALFDIV(_id, cname, pname, f, mo, ds, dw, df,	\
+				go, gs, gf)				\
+	{							\
+		.id		= _id,				\
+		.branch_type	= branch_half_divider,		\
+		.name		= cname,			\
+		.parent_names	= (const char *[]){ pname },	\
+		.num_parents	= 1,				\
+		.flags		= f,				\
+		.muxdiv_offset	= mo,				\
+		.div_shift	= ds,				\
+		.div_width	= dw,				\
+		.div_flags	= df,				\
+		.gate_offset	= go,				\
+		.gate_shift	= gs,				\
+		.gate_flags	= gf,				\
+	}
+
+#define DIV_HALF(_id, cname, pname, f, o, s, w, df)			\
+	{							\
+		.id		= _id,				\
+		.branch_type	= branch_half_divider,		\
+		.name		= cname,			\
+		.parent_names	= (const char *[]){ pname },	\
+		.num_parents	= 1,				\
+		.flags		= f,				\
+		.muxdiv_offset	= o,				\
+		.div_shift	= s,				\
+		.div_width	= w,				\
+		.div_flags	= df,				\
+		.gate_offset	= -1,				\
+	}
+
 struct rockchip_clk_provider *rockchip_clk_init(struct device_node *np,
 			void __iomem *base, unsigned long nr_clks);
 void rockchip_clk_of_add_provider(struct device_node *np,
@@ -781,12 +878,24 @@ void rockchip_clk_register_armclk(struct rockchip_clk_provider *ctx,
 			int nrates);
 void rockchip_clk_protect_critical(const char *const clocks[], int nclocks);
 int rockchip_pll_clk_adaptive_scaling(struct clk *clk, int sel);
-int rockchip_pll_clk_adaptive_rate(struct clk *clk, unsigned long rate);
+int rockchip_pll_clk_rate_to_scale(struct clk *clk, unsigned long rate);
+int rockchip_pll_clk_scale_to_rate(struct clk *clk, unsigned int scale);
 void rockchip_register_restart_notifier(struct rockchip_clk_provider *ctx,
 					unsigned int reg, void (*cb)(void));
 
 #define ROCKCHIP_SOFTRST_HIWORD_MASK	BIT(0)
 
+struct clk *rockchip_clk_register_halfdiv(const char *name,
+					  const char *const *parent_names,
+					  u8 num_parents, void __iomem *base,
+					  int muxdiv_offset, u8 mux_shift,
+					  u8 mux_width, u8 mux_flags,
+					  u8 div_shift, u8 div_width,
+					  u8 div_flags, int gate_offset,
+					  u8 gate_shift, u8 gate_flags,
+					  unsigned long flags,
+					  spinlock_t *lock);
+
 #ifdef CONFIG_RESET_CONTROLLER
 void rockchip_register_softrst(struct device_node *np,
 			       unsigned int num_regs,
diff --git a/drivers/dma/pl330.c b/drivers/dma/pl330.c
index 9f3dbc8c63d2..263789063a2f 100644
--- a/drivers/dma/pl330.c
+++ b/drivers/dma/pl330.c
@@ -449,6 +449,10 @@ struct dma_pl330_chan {
 	/* for cyclic capability */
 	bool cyclic;
 
+	/* interlace size */
+	unsigned int src_interlace_size;
+	unsigned int dst_interlace_size;
+
 	/* for runtime pm tracking */
 	bool active;
 };
@@ -532,6 +536,10 @@ struct dma_pl330_desc {
 	unsigned peri:5;
 	/* Hook to attach to DMAC's list of reqs with due callback */
 	struct list_head rqd;
+
+	/* interlace size */
+	unsigned int src_interlace_size;
+	unsigned int dst_interlace_size;
 };
 
 struct _xfer_spec {
@@ -1174,6 +1182,10 @@ static inline int _ldst_devtomem(struct pl330_dmac *pl330, unsigned dry_run,
 		if (!(pl330->quirks & PL330_QUIRK_BROKEN_NO_FLUSHP))
 			off += _emit_FLUSHP(dry_run, &buf[off],
 					    pxs->desc->peri);
+		if (pxs->desc->dst_interlace_size) {
+			off += _emit_ADDH(dry_run, &buf[off], DST,
+					  pxs->desc->dst_interlace_size);
+		}
 	}
 
 	return off;
@@ -1199,6 +1211,9 @@ static inline int _ldst_memtodev(struct pl330_dmac *pl330,
 		if (!(pl330->quirks & PL330_QUIRK_BROKEN_NO_FLUSHP))
 			off += _emit_FLUSHP(dry_run, &buf[off],
 					    pxs->desc->peri);
+		if (pxs->desc->src_interlace_size)
+			off += _emit_ADDH(dry_run, &buf[off], SRC,
+					  pxs->desc->src_interlace_size);
 	}
 
 	return off;
@@ -2150,6 +2165,8 @@ static int pl330_config(struct dma_chan *chan,
 			pch->burst_sz = __ffs(slave_config->dst_addr_width);
 		if (slave_config->dst_maxburst)
 			pch->burst_len = slave_config->dst_maxburst;
+		if (slave_config->src_interlace_size)
+			pch->src_interlace_size = slave_config->src_interlace_size;
 	} else if (slave_config->direction == DMA_DEV_TO_MEM) {
 		if (slave_config->src_addr)
 			pch->fifo_addr = slave_config->src_addr;
@@ -2157,6 +2174,8 @@ static int pl330_config(struct dma_chan *chan,
 			pch->burst_sz = __ffs(slave_config->src_addr_width);
 		if (slave_config->src_maxburst)
 			pch->burst_len = slave_config->src_maxburst;
+		if (slave_config->dst_interlace_size)
+			pch->dst_interlace_size = slave_config->dst_interlace_size;
 	}
 
 	return 0;
@@ -2637,6 +2656,8 @@ static struct dma_async_tx_descriptor *pl330_prep_dma_cyclic(
 	pch->cyclic = true;
 	desc->txd.flags = flags;
 
+	desc->src_interlace_size = pch->src_interlace_size;
+	desc->dst_interlace_size = pch->dst_interlace_size;
 	return &desc->txd;
 }
 
@@ -2767,6 +2788,8 @@ pl330_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,
 		desc->rqcfg.brst_len = 1;
 		desc->rqtype = direction;
 		desc->bytes_requested = sg_dma_len(sg);
+		desc->src_interlace_size = pch->src_interlace_size;
+		desc->dst_interlace_size = pch->dst_interlace_size;
 	}
 
 	/* Return the last desc in the chain */
diff --git a/drivers/iommu/rockchip-iommu.c b/drivers/iommu/rockchip-iommu.c
index bf4018ff644f..8faade084316 100644
--- a/drivers/iommu/rockchip-iommu.c
+++ b/drivers/iommu/rockchip-iommu.c
@@ -531,6 +531,15 @@ static void log_iova(struct rk_iommu *iommu, int index, dma_addr_t iova)
 	page_offset = rk_iova_page_offset(iova);
 
 	mmu_dte_addr = rk_iommu_read(base, RK_MMU_DTE_ADDR);
+	/*
+	 * Iommu register may be reset by master's reset before processing
+	 * the iommu interrupt,Then cpu would get NULL pointer to dump the
+	 * iommu page table,add check to avoid this
+	 */
+	if (mmu_dte_addr == 0) {
+		dev_err(iommu->dev, "failed to read mmu_dte_addr, get 0x0\n");
+		return;
+	}
 	mmu_dte_addr_phys = (phys_addr_t)mmu_dte_addr;
 
 	dte_addr_phys = mmu_dte_addr_phys + (4 * dte_index);
diff --git a/drivers/mmc/host/dw_mmc.c b/drivers/mmc/host/dw_mmc.c
index 0ba380a248a9..6525e14903f4 100644
--- a/drivers/mmc/host/dw_mmc.c
+++ b/drivers/mmc/host/dw_mmc.c
@@ -764,6 +764,7 @@ static int dw_mci_edmac_start_dma(struct dw_mci *host,
 	int ret = 0;
 
 	/* Set external dma config: burst size, burst width */
+	memset(&cfg, 0, sizeof(cfg));
 	cfg.dst_addr = host->phy_regs + fifo_offset;
 	cfg.src_addr = cfg.dst_addr;
 	cfg.dst_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
diff --git a/drivers/rk_nand/rk_ftl_arm_v7.S b/drivers/rk_nand/rk_ftl_arm_v7.S
index 7768253519a2..221ec458b70e 100644
--- a/drivers/rk_nand/rk_ftl_arm_v7.S
+++ b/drivers/rk_nand/rk_ftl_arm_v7.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2018-05-04
+ * date: 2018-07-03
  */
 	.arch armv7-a
 	.fpu softvfp
@@ -20,8 +20,8 @@
 	.file	"rk_ftl_arm_v7.S"
 	.text
 	.align	2
-	.type	FlashGetReadRetryDefault.part.25, %function
-FlashGetReadRetryDefault.part.25:
+	.type	FlashGetReadRetryDefault.part.27, %function
+FlashGetReadRetryDefault.part.27:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -75,7 +75,7 @@ FlashGetReadRetryDefault.part.25:
 	.word	.LANCHOR1
 	.word	.LANCHOR1+45
 	.fnend
-	.size	FlashGetReadRetryDefault.part.25, .-FlashGetReadRetryDefault.part.25
+	.size	FlashGetReadRetryDefault.part.27, .-FlashGetReadRetryDefault.part.27
 	.align	2
 	.global	FlashMemCmp8
 	.type	FlashMemCmp8, %function
@@ -1468,6 +1468,42 @@ FlashEraseSLc2KBlocks:
 	.fnend
 	.size	FlashEraseSLc2KBlocks, .-FlashEraseSLc2KBlocks
 	.align	2
+	.global	micron_auto_read_calibration_config
+	.type	micron_auto_read_calibration_config, %function
+micron_auto_read_calibration_config:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r1
+	mov	r4, r0
+	bl	NandcWaitFlashReady
+	ldr	r3, .L206
+	mov	r2, #239
+	mov	r0, #200
+	add	r4, r3, r4, asl #3
+	ldr	r5, [r4, #864]
+	ldrb	r4, [r4, #868]	@ zero_extendqisi2
+	add	r4, r4, #8
+	add	r3, r5, r4, asl #8
+	str	r2, [r3, #8]
+	mov	r2, #150
+	str	r2, [r3, #4]
+	bl	NandcDelayns
+	str	r6, [r5, r4, asl #8]
+	mov	r3, #0
+	str	r3, [r5, r4, asl #8]
+	str	r3, [r5, r4, asl #8]
+	str	r3, [r5, r4, asl #8]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L207:
+	.align	2
+.L206:
+	.word	.LANCHOR0
+	.fnend
+	.size	micron_auto_read_calibration_config, .-micron_auto_read_calibration_config
+	.align	2
 	.global	SandiskSetRRPara
 	.type	SandiskSetRRPara, %function
 SandiskSetRRPara:
@@ -1484,17 +1520,17 @@ SandiskSetRRPara:
 	mov	r0, #200
 	mov	r5, r1
 	bl	NandcDelayns
-	ldr	r1, .L211
+	ldr	r1, .L214
 	add	r3, r5, r5, asl #2
 	mvn	r6, #4
 	add	r0, r1, r3
 	add	r1, r1, #45
 	add	r1, r1, r3
 	mov	r2, #0
-	ldr	ip, .L211+4
+	ldr	ip, .L214+4
 	mul	r5, r6, r5
-	b	.L206
-.L209:
+	b	.L209
+.L212:
 	ldrb	r6, [ip, #3761]	@ zero_extendqisi2
 	add	r2, r2, #1
 	cmp	r6, #67
@@ -1505,16 +1541,16 @@ SandiskSetRRPara:
 	add	r1, r1, #1
 	ldrsb	r6, [r6, #5]
 	str	r6, [r4, #0]
-.L206:
+.L209:
 	ldrb	r6, [ip, #3760]	@ zero_extendqisi2
 	cmp	r2, r6
-	bcc	.L209
+	bcc	.L212
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	NandcWaitFlashReady
-.L212:
+.L215:
 	.align	2
-.L211:
+.L214:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -1526,7 +1562,7 @@ SandiskProgTestBadBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L214
+	ldr	r3, .L217
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	add	r3, r3, r0, asl #3
@@ -1557,9 +1593,9 @@ SandiskProgTestBadBlock:
 	ldr	r0, [r5, r6, asl #8]
 	and	r0, r0, #1
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L215:
+.L218:
 	.align	2
-.L214:
+.L217:
 	.word	.LANCHOR0
 	.fnend
 	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
@@ -1570,13 +1606,13 @@ FlashReadSpare:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L217
+	ldr	r3, .L220
 	mov	ip, #0
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r2
 	ldrb	r2, [r3, #2901]	@ zero_extendqisi2
-	ldr	r3, .L217+4
+	ldr	r3, .L220+4
 	add	r3, r3, r0, asl #3
 	mov	r2, r2, asl #9
 	ldrb	r5, [r3, #868]	@ zero_extendqisi2
@@ -1599,9 +1635,9 @@ FlashReadSpare:
 	ldr	r3, [r4, r5, asl #8]
 	strb	r3, [r6, #0]
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L218:
+.L221:
 	.align	2
-.L217:
+.L220:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -1647,7 +1683,7 @@ FlashReset:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
-	ldr	r3, .L221
+	ldr	r3, .L224
 	add	r3, r3, r0, asl #3
 	ldrb	r5, [r3, #868]	@ zero_extendqisi2
 	ldr	r2, [r3, #864]
@@ -1661,9 +1697,9 @@ FlashReset:
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, lr}
 	b	NandcFlashDeCs
-.L222:
+.L225:
 	.align	2
-.L221:
+.L224:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReset, .-FlashReset
@@ -1678,7 +1714,7 @@ FlashReadIDRaw:
 	mov	r5, r1
 	mov	r4, r0
 	bl	FlashReset
-	ldr	r3, .L225
+	ldr	r3, .L228
 	mov	r0, r4
 	add	r3, r3, r4, asl #3
 	ldrb	r7, [r3, #868]	@ zero_extendqisi2
@@ -1710,10 +1746,10 @@ FlashReadIDRaw:
 	sub	r3, r2, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L223
+	bhi	.L226
 	ldrb	r1, [r5, #2]	@ zero_extendqisi2
 	ldrb	r3, [r5, #1]	@ zero_extendqisi2
-	ldr	r0, .L225+4
+	ldr	r0, .L228+4
 	str	r1, [sp, #0]
 	ldrb	r1, [r5, #3]	@ zero_extendqisi2
 	str	r1, [sp, #4]
@@ -1723,11 +1759,11 @@ FlashReadIDRaw:
 	str	r1, [sp, #12]
 	add	r1, r4, #1
 	bl	printk
-.L223:
-	ldmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
 .L226:
+	ldmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
+.L229:
 	.align	2
-.L225:
+.L228:
 	.word	.LANCHOR0
 	.word	.LC2
 	.fnend
@@ -1742,14 +1778,14 @@ FlashSetInterfaceMode:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r4, #0
-	ldr	sl, .L241
+	ldr	sl, .L244
 	mov	r7, #239
-	ldr	r9, .L241+4
+	ldr	r9, .L244+4
 	mov	r1, r4
 	sub	r8, sl, #864
 	mov	r6, #128
 	mov	r5, #1
-.L237:
+.L240:
 	mov	r2, sl
 	ldrb	lr, [r4, r9]	@ zero_extendqisi2
 	ldr	r3, [r2, r4]!
@@ -1758,60 +1794,60 @@ FlashSetInterfaceMode:
 	ldrb	r2, [r2, #4]	@ zero_extendqisi2
 	add	r2, r2, #8
 	add	ip, r3, r2, asl #8
-	beq	.L228
+	beq	.L231
 	cmp	lr, #173
 	cmpne	lr, #44
-	bne	.L229
-.L228:
+	bne	.L232
+.L231:
 	cmp	r0, #1
 	ldrb	fp, [r8, #3772]	@ zero_extendqisi2
-	bne	.L230
+	bne	.L233
 	tst	fp, #1
-	beq	.L229
+	beq	.L232
 	cmp	lr, #173
 	str	r7, [ip, #8]
 	streq	r0, [ip, #4]
-	beq	.L240
+	beq	.L243
 	cmp	lr, #44
 	streq	r0, [ip, #4]
 	strne	r6, [ip, #4]
 	moveq	ip, #5
 	strne	r0, [r3, r2, asl #8]
-	bne	.L235
-	b	.L239
-.L230:
+	bne	.L238
+	b	.L242
+.L233:
 	tst	fp, #4
-	beq	.L229
+	beq	.L232
 	cmp	lr, #173
 	str	r7, [ip, #8]
 	streq	r5, [ip, #4]
 	moveq	ip, #32
-	beq	.L239
+	beq	.L242
 	cmp	lr, #44
 	strne	r6, [ip, #4]
-	bne	.L240
+	bne	.L243
 	str	r5, [ip, #4]
 	mov	ip, #35
-.L239:
+.L242:
 	str	ip, [r3, r2, asl #8]
-	b	.L235
-.L240:
+	b	.L238
+.L243:
 	str	r1, [r3, r2, asl #8]
-.L235:
+.L238:
 	str	r1, [r3, r2, asl #8]
 	str	r1, [r3, r2, asl #8]
 	str	r1, [r3, r2, asl #8]
-.L229:
+.L232:
 	add	r4, r4, #8
 	cmp	r4, #32
-	bne	.L237
+	bne	.L240
 	mov	r0, #0
 	bl	NandcWaitFlashReady
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L242:
+.L245:
 	.align	2
-.L241:
+.L244:
 	.word	.LANCHOR0+864
 	.word	.LANCHOR0+2980
 	.fnend
@@ -1823,33 +1859,42 @@ ftl_flash_de_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, lr}
-	.save {r4, lr}
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
 	mov	r0, #0
-	ldr	r4, .L245
+	ldr	r4, .L249
 	bl	NandcWaitFlashReady
 	bl	FlashSetReadRetryDefault
-	ldrb	r3, [r4, #3773]	@ zero_extendqisi2
+	ldr	r3, .L249+4
+	ldr	r2, [r4, #3776]
+	cmp	r2, r3
+	bne	.L247
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+.L247:
+	ldrb	r3, [r4, #3780]	@ zero_extendqisi2
+	ldr	r5, .L249
 	cmp	r3, #0
-	beq	.L244
-	ldrb	r3, [r4, #3772]	@ zero_extendqisi2
+	beq	.L248
+	ldrb	r3, [r5, #3772]	@ zero_extendqisi2
 	tst	r3, #1
-	beq	.L244
+	beq	.L248
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
 	mov	r3, #0
-	strb	r3, [r4, #3773]
-.L244:
+	strb	r3, [r5, #3780]
+.L248:
 	ldr	r3, [r4, #864]
 	mov	r0, #0
 	str	r0, [r3, #336]
-	ldmfd	sp!, {r4, pc}
-.L246:
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L250:
 	.align	2
-.L245:
+.L249:
 	.word	.LANCHOR0
+	.word	1446522928
 	.fnend
 	.size	ftl_flash_de_init, .-ftl_flash_de_init
 	.align	2
@@ -1859,7 +1904,7 @@ FlashReadDpCmd:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L251
+	ldr	r3, .L255
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r7, r2
@@ -1874,7 +1919,7 @@ FlashReadDpCmd:
 	ldrb	r2, [r3, #904]	@ zero_extendqisi2
 	add	r6, r1, r6, asl #8
 	str	r2, [r6, #8]
-	bne	.L248
+	bne	.L252
 	mov	r8, #0
 	uxtb	r2, r5
 	str	r8, [r6, #4]
@@ -1890,8 +1935,8 @@ FlashReadDpCmd:
 	str	r8, [r6, #8]
 	str	r8, [r6, #4]
 	str	r8, [r6, #4]
-	b	.L250
-.L248:
+	b	.L254
+.L252:
 	uxtb	r2, r5
 	str	r2, [r6, #4]
 	mov	r2, r5, lsr #8
@@ -1900,7 +1945,7 @@ FlashReadDpCmd:
 	str	r2, [r6, #4]
 	ldrb	r3, [r3, #905]	@ zero_extendqisi2
 	str	r3, [r6, #8]
-.L250:
+.L254:
 	uxtb	r3, r7
 	mov	r0, r4
 	str	r3, [r6, #4]
@@ -1913,9 +1958,9 @@ FlashReadDpCmd:
 	str	r3, [r6, #8]
 	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	b	FlashSetRandomizer
-.L252:
+.L256:
 	.align	2
-.L251:
+.L255:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashReadDpCmd, .-FlashReadDpCmd
@@ -1927,14 +1972,14 @@ NandcRandmzSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L254
+	ldr	r3, .L258
 	add	r3, r3, r0, asl #3
 	ldr	r3, [r3, #864]
 	str	r1, [r3, #336]
 	bx	lr
-.L255:
+.L259:
 	.align	2
-.L254:
+.L258:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcRandmzSel, .-NandcRandmzSel
@@ -1951,36 +1996,36 @@ NandcTimeCfg:
 	mov	r4, r0
 	mov	r0, #0
 	bl	rknand_get_clk_rate
-	ldr	r1, .L266
+	ldr	r1, .L270
 	bl	__aeabi_idiv
-	ldr	r3, .L266+4
+	ldr	r3, .L270+4
 	ldr	r3, [r3, #3012]
 	cmp	r0, #250
 	movwgt	r2, #8354
-	bgt	.L264
+	bgt	.L268
 	cmp	r0, #220
-	bgt	.L265
-.L259:
+	bgt	.L269
+.L263:
 	cmp	r0, #185
 	movwgt	r2, #4226
-	bgt	.L264
+	bgt	.L268
 	cmp	r0, #160
 	movwgt	r2, #4194
-	bgt	.L264
+	bgt	.L268
 	cmp	r4, #35
 	movwls	r2, #4193
-	bls	.L264
+	bls	.L268
 	cmp	r4, #99
 	movwls	r2, #4225
-	bls	.L264
-.L265:
+	bls	.L268
+.L269:
 	movw	r2, #8322
-.L264:
+.L268:
 	str	r2, [r3, #4]
 	ldmfd	sp!, {r4, pc}
-.L267:
+.L271:
 	.align	2
-.L266:
+.L270:
 	.word	1000000
 	.word	.LANCHOR0
 	.fnend
@@ -1995,7 +2040,7 @@ NandcInit:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r2, #0
-	ldr	r4, .L270
+	ldr	r4, .L274
 	mov	r3, #1
 	mov	r5, #0
 	str	r0, [r4, #3012]
@@ -2015,15 +2060,15 @@ NandcInit:
 	bfi	r3, r2, #13, #1
 	ldr	r2, [r0, #352]
 	orr	r3, r3, #256
-	str	r1, [r4, #3776]
+	str	r1, [r4, #3784]
 	movw	r1, #2049
 	ubfx	r2, r2, #16, #4
-	str	r2, [r4, #3780]
+	str	r2, [r4, #3788]
 	ldr	r2, [r0, #352]
 	cmp	r2, r1
-	str	r2, [r4, #3784]
+	str	r2, [r4, #3776]
 	moveq	r2, #8
-	streq	r2, [r4, #3780]
+	streq	r2, [r4, #3788]
 	str	r3, [r0, #0]
 	mov	r0, #40
 	ldr	r3, [r4, #3012]
@@ -2033,19 +2078,19 @@ NandcInit:
 	movw	r2, #8322
 	mov	r0, #36864
 	str	r2, [r3, #344]
-	ldr	r2, .L270+4
+	ldr	r2, .L274+4
 	str	r2, [r3, #304]
 	bl	ftl_malloc
-	str	r5, [r4, #3816]
-	str	r5, [r4, #3824]
-	str	r0, [r4, #3788]
+	str	r5, [r4, #3820]
+	str	r5, [r4, #3828]
 	str	r0, [r4, #3792]
-	add	r0, r0, #32768
 	str	r0, [r4, #3796]
+	add	r0, r0, #32768
+	str	r0, [r4, #3800]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L271:
+.L275:
 	.align	2
-.L270:
+.L274:
 	.word	.LANCHOR0
 	.word	1710593
 	.fnend
@@ -2063,23 +2108,23 @@ FlashTimingCfg:
 	sub	r3, r3, #33
 	cmp	r0, r2
 	cmpne	r3, #1
-	bls	.L273
+	bls	.L277
 	movw	r3, #4226
 	movw	r2, #8322
 	cmp	r0, r3
 	cmpne	r0, r2
-	bne	.L274
-.L273:
-	ldr	r3, .L275
+	bne	.L278
+.L277:
+	ldr	r3, .L279
 	ldr	r3, [r3, #3012]
 	str	r0, [r3, #4]
-.L274:
-	ldr	r3, .L275+4
+.L278:
+	ldr	r3, .L279+4
 	ldrb	r0, [r3, #2913]	@ zero_extendqisi2
 	b	NandcTimeCfg
-.L276:
+.L280:
 	.align	2
-.L275:
+.L279:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.fnend
@@ -2091,7 +2136,7 @@ NandcGetTimeCfg:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L278
+	ldr	ip, .L282
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	ldr	r4, [ip, #3012]
@@ -2110,9 +2155,9 @@ NandcGetTimeCfg:
 	orr	r2, r2, r1, asl #16
 	str	r2, [r3, #0]
 	ldmfd	sp!, {r4, pc}
-.L279:
+.L283:
 	.align	2
-.L278:
+.L282:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
@@ -2124,34 +2169,34 @@ NandcBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L285
+	ldr	r3, .L289
 	mov	r1, #1
 	ldr	r2, [r3, #3012]
-	str	r0, [r3, #3828]
+	str	r0, [r3, #3832]
 	mov	r3, #0
 	str	r1, [r2, #8]
 	mov	r1, #16
 	cmp	r0, r1
 	bfi	r3, r1, #8, #8
 	bfc	r3, #18, #1
-	beq	.L284
-.L281:
+	beq	.L288
+.L285:
 	cmp	r0, #24
 	orreq	r3, r3, #16
-	beq	.L282
+	beq	.L286
 	cmp	r0, #40
 	orr	r3, r3, #262144
 	orr	r3, r3, #16
-	bne	.L282
-.L284:
+	bne	.L286
+.L288:
 	bfc	r3, #4, #1
-.L282:
+.L286:
 	orr	r3, r3, #1
 	str	r3, [r2, #12]
 	bx	lr
-.L286:
+.L290:
 	.align	2
-.L285:
+.L289:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcBchSel, .-NandcBchSel
@@ -2163,12 +2208,12 @@ FlashBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L288
-	strb	r0, [r3, #3832]
+	ldr	r3, .L292
+	strb	r0, [r3, #3836]
 	b	NandcBchSel
-.L289:
+.L293:
 	.align	2
-.L288:
+.L292:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashBchSel, .-FlashBchSel
@@ -2179,14 +2224,14 @@ ftl_flash_resume:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L295
+	ldr	r3, .L299
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r4, #0
 	ldr	r2, [r3, #3012]
 	ldr	r1, [r3, #3016]
 	ldr	r5, [r3, #3032]
-	ldr	r6, .L295+4
+	ldr	r6, .L299+4
 	str	r1, [r2, #0]
 	ldr	r1, [r3, #3020]
 	ldr	r2, [r3, #3012]
@@ -2202,22 +2247,22 @@ ftl_flash_resume:
 	ldr	r3, [r3, #3044]
 	str	r1, [r2, #336]
 	str	r3, [r2, #344]
-.L292:
+.L296:
 	ldrb	r3, [r6, r4, asl #3]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L291
+	bhi	.L295
 	uxtb	r0, r4
 	bl	FlashReset
-.L291:
+.L295:
 	add	r4, r4, #1
 	cmp	r4, #4
-	bne	.L292
-	ldr	r4, .L295
-	ldrb	r3, [r4, #3773]	@ zero_extendqisi2
+	bne	.L296
+	ldr	r4, .L299
+	ldrb	r3, [r4, #3780]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L293
+	beq	.L297
 	mov	r0, #1
 	bl	NandcSetMode
 	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
@@ -2226,15 +2271,15 @@ ftl_flash_resume:
 	bl	NandcSetMode
 	ubfx	r0, r5, #8, #8
 	bl	NandcSetDdrPara
-.L293:
-	ldr	r3, .L295
+.L297:
+	ldr	r3, .L299
 	ldr	r3, [r3, #3624]
 	ldrb	r0, [r3, #20]	@ zero_extendqisi2
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	FlashBchSel
-.L296:
+.L300:
 	.align	2
-.L295:
+.L299:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2980
 	.fnend
@@ -2290,11 +2335,11 @@ NandcIqrWaitFlashReady:
 	and	r3, r3, #2
 	uxtb	r3, r3
 	cmp	r3, #0
-	bne	.L300
+	bne	.L304
 	mov	r0, r4
 	ldmfd	sp!, {r4, lr}
 	b	wait_for_nand_flash_ready
-.L300:
+.L304:
 	ldr	r3, [r4, #368]
 	orr	r3, r3, #2
 	str	r3, [r4, #368]
@@ -2315,18 +2360,18 @@ FlashEraseBlocks:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r5, .L321
+	ldr	r5, .L325
 	mov	r6, r0
 	str	r1, [sp, #12]
 	mov	r7, r2
 	ldrb	r4, [r5, #852]	@ zero_extendqisi2
 	cmp	r4, #0
 	moveq	r9, r5
-	beq	.L302
+	beq	.L306
 	mov	r1, r2
 	bl	FlashEraseSLc2KBlocks
-	b	.L303
-.L311:
+	b	.L307
+.L315:
 	mov	r8, #36
 	rsb	r3, r4, r7
 	mul	r8, r8, r4
@@ -2344,17 +2389,17 @@ FlashEraseBlocks:
 	cmp	r0, r3
 	mvncs	r3, #0
 	strcs	r3, [r6, r8]
-	bcs	.L305
-	ldrb	r3, [r5, #3833]	@ zero_extendqisi2
+	bcs	.L309
+	ldrb	r3, [r5, #3837]	@ zero_extendqisi2
 	cmp	r3, #0
 	add	r3, r9, r0, asl #4
 	ldr	r3, [r3, #3636]
 	moveq	sl, #0
 	cmp	r3, #0
-	beq	.L307
+	beq	.L311
 	uxtb	r0, r0
 	bl	FlashWaitCmdDone
-.L307:
+.L311:
 	ldr	r2, [sp, #20]
 	mov	r1, #0
 	cmp	sl, #0
@@ -2376,15 +2421,15 @@ FlashEraseBlocks:
 	ldr	r3, [sp, #12]
 	mov	r0, r8
 	cmp	r3, #1
-	bne	.L309
+	bne	.L313
 	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L309
+	beq	.L313
 	bl	flash_enter_slc_mode
-	b	.L310
-.L309:
+	b	.L314
+.L313:
 	bl	flash_exit_slc_mode
-.L310:
+.L314:
 	ldr	r3, [sp, #20]
 	mov	r0, r8
 	ldr	r1, [sp, #16]
@@ -2400,59 +2445,59 @@ FlashEraseBlocks:
 	bl	FlashEraseCmd
 	mov	r0, r8
 	bl	NandcFlashDeCs
-.L305:
+.L309:
 	add	r4, r4, #1
-.L302:
+.L306:
 	cmp	r4, r7
-	bcc	.L311
-	ldr	r5, .L321
+	bcc	.L315
+	ldr	r5, .L325
 	mov	r4, #0
-	ldr	r8, .L321+4
+	ldr	r8, .L325+4
 	ldr	r0, [r5, #3012]
 	bl	NandcIqrWaitFlashReady
-	b	.L312
-.L314:
+	b	.L316
+.L318:
 	uxtb	r0, r4
 	bl	FlashWaitCmdDone
 	ldr	r3, [sp, #12]
 	cmp	r3, #1
-	bne	.L313
+	bne	.L317
 	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L313
+	beq	.L317
 	ldrb	r0, [r8, r4, asl #4]	@ zero_extendqisi2
 	bl	flash_exit_slc_mode
-.L313:
+.L317:
 	add	r4, r4, #1
-.L312:
+.L316:
 	ldrb	r2, [r5, #3762]	@ zero_extendqisi2
-	ldr	r3, .L321
+	ldr	r3, .L325
 	cmp	r4, r2
-	bcc	.L314
-	ldr	r0, [r3, #3836]
+	bcc	.L318
+	ldr	r0, [r3, #3840]
 	cmp	r0, #0
-	beq	.L303
+	beq	.L307
 	ldrb	r3, [r3, #2980]	@ zero_extendqisi2
 	cmp	r3, #69
 	moveq	r3, #0
 	moveq	r2, r3
-	bne	.L320
-	b	.L315
-.L316:
+	bne	.L324
+	b	.L319
+.L320:
 	add	r3, r3, #1
 	str	r2, [r6, #-36]
-.L315:
+.L319:
 	cmp	r3, r7
 	add	r6, r6, #36
-	bne	.L316
-.L320:
+	bne	.L320
+.L324:
 	mov	r0, #0
-.L303:
+.L307:
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L322:
+.L326:
 	.align	2
-.L321:
+.L325:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3628
 	.fnend
@@ -2485,7 +2530,7 @@ NandcSendDumpDataStart:
 	ldr	r2, [r0, #16]
 	.pad #8
 	sub	sp, sp, #8
-	ldr	r3, .L325
+	ldr	r3, .L329
 	str	r2, [sp, #4]
 	ldr	r2, [sp, #4]
 	bfc	r2, #2, #1
@@ -2497,9 +2542,9 @@ NandcSendDumpDataStart:
 	str	r3, [r0, #8]
 	add	sp, sp, #8
 	bx	lr
-.L326:
+.L330:
 	.align	2
-.L325:
+.L329:
 	.word	538969130
 	.fnend
 	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
@@ -2513,12 +2558,12 @@ NandcSendDumpDataDone:
 	@ link register save eliminated.
 	.pad #8
 	sub	sp, sp, #8
-.L328:
+.L332:
 	ldr	r3, [r0, #8]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #1048576
-	beq	.L328
+	beq	.L332
 	add	sp, sp, #8
 	bx	lr
 	.fnend
@@ -2533,7 +2578,7 @@ NandcXferStart:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r6, r1
-	ldr	r1, .L343
+	ldr	r1, .L347
 	mov	r8, r2
 	mov	r4, #0
 	.pad #20
@@ -2556,9 +2601,9 @@ NandcXferStart:
 	mov	r3, r3, lsr r2
 	orr	r4, r4, #1024
 	bfi	r4, r3, #4, #1
-	ldr	r3, [r1, #3780]
+	ldr	r3, [r1, #3788]
 	cmp	r3, #3
-	bls	.L331
+	bls	.L335
 	ldr	r3, [r5, #16]
 	cmp	r9, #0
 	cmpeq	ip, #0
@@ -2566,10 +2611,10 @@ NandcXferStart:
 	ldr	r3, [sp, #12]
 	bfc	r3, #2, #1
 	str	r3, [sp, #12]
-	beq	.L332
+	beq	.L336
 	cmp	r6, #0
-	beq	.L333
-	ldr	r3, [r1, #3828]
+	beq	.L337
+	ldr	r3, [r1, #3832]
 	mov	r0, ip
 	cmp	r3, #24
 	movhi	r3, #128
@@ -2579,26 +2624,26 @@ NandcXferStart:
 	str	r3, [sp, #4]
 	mov	r3, #0
 	mov	r2, r3
-	b	.L335
-.L338:
+	b	.L339
+.L342:
 	cmp	ip, #0
 	mov	lr, r3, lsr #2
 	add	r2, r2, #1
 	ldrneh	fp, [r0, #2]
 	mvneq	fp, #0
 	ldrneh	sl, [r0], #4
-	ldreq	sl, [r1, #3796]
+	ldreq	sl, [r1, #3800]
 	orrne	sl, sl, fp, asl #16
-	ldrne	fp, [r1, #3796]
+	ldrne	fp, [r1, #3800]
 	streq	fp, [sl, lr, asl #2]
 	strne	sl, [fp, lr, asl #2]
 	ldr	lr, [sp, #0]
 	add	r3, r3, lr
-.L335:
+.L339:
 	ldr	sl, [sp, #4]
 	cmp	r2, sl
-	bcc	.L338
-.L333:
+	bcc	.L342
+.L337:
 	mov	r0, r5
 	add	r8, r8, #1
 	bl	rk_nandc_xfer_irq_flag_init
@@ -2606,34 +2651,34 @@ NandcXferStart:
 	mov	r8, r8, asr #1
 	cmp	r9, #0
 	bfi	r4, r8, #22, #6
-	ldr	r8, .L343
+	ldr	r8, .L347
 	orr	r3, r3, #1
 	str	r3, [r5, #368]
 	ldr	r3, [r5, #364]
 	ubfx	sl, r4, #22, #5
-	ldreq	r0, [r8, #3792]
+	ldreq	r0, [r8, #3796]
 	movne	r0, r9
 	orr	r3, r3, #1
 	str	r3, [r5, #364]
-	ldr	r3, [r8, #3796]
+	ldr	r3, [r8, #3800]
 	mov	r2, r6
 	mov	r1, sl, asl #10
-	str	r3, [r8, #3804]
-	str	r0, [r8, #3800]
+	str	r3, [r8, #3808]
+	str	r0, [r8, #3804]
 	bl	rknand_dma_map_single
 	mov	r2, r6
 	mov	r1, sl, asl #7
-	str	r0, [r8, #3808]
-	ldr	r0, [r8, #3804]
+	str	r0, [r8, #3812]
+	ldr	r0, [r8, #3808]
 	bl	rknand_dma_map_single
 	mov	r3, #1
-	str	r3, [r8, #3816]
+	str	r3, [r8, #3820]
 	mov	r2, #16
-	ldr	r3, [r8, #3808]
+	ldr	r3, [r8, #3812]
 	tst	r9, #3
-	str	r0, [r8, #3812]
+	str	r0, [r8, #3816]
 	str	r3, [r5, #20]
-	ldr	r3, [r8, #3812]
+	ldr	r3, [r8, #3816]
 	str	r3, [r5, #24]
 	mov	r3, #0
 	str	r3, [sp, #12]
@@ -2658,19 +2703,19 @@ NandcXferStart:
 	ldr	r3, [sp, #12]
 	orr	r3, r3, #1
 	str	r3, [sp, #12]
-.L332:
+.L336:
 	ldr	r3, [sp, #12]
 	str	r3, [r5, #16]
-.L331:
+.L335:
 	str	r7, [r5, #12]
 	str	r4, [r5, #8]
 	orr	r4, r4, #4
 	str	r4, [r5, #8]
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L344:
+.L348:
 	.align	2
-.L343:
+.L347:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcXferStart, .-NandcXferStart
@@ -2689,14 +2734,14 @@ NandcCopy1KB:
 	mov	r4, r0
 	ldr	r6, [sp, #16]
 	add	r2, r2, r5, asl #9
-	bne	.L346
+	bne	.L350
 	cmp	r3, #0
-	beq	.L347
+	beq	.L351
 	mov	r0, r2
 	mov	r1, r3
 	mov	r2, #1024
 	bl	memcpy
-.L347:
+.L351:
 	cmp	r6, #0
 	ldmeqfd	sp!, {r4, r5, r6, pc}
 	ldrb	r3, [r6, #2]	@ zero_extendqisi2
@@ -2714,14 +2759,14 @@ NandcCopy1KB:
 	add	r5, r5, #128
 	str	r3, [r4, r5, asl #2]
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L346:
+.L350:
 	cmp	r3, #0
-	beq	.L349
+	beq	.L353
 	mov	r1, r2
 	mov	r0, r3
 	mov	r2, #1024
 	bl	memcpy
-.L349:
+.L353:
 	cmp	r6, #0
 	ldmeqfd	sp!, {r4, r5, r6, pc}
 	mov	r5, r5, lsr #1
@@ -2750,14 +2795,14 @@ Ftl_log2:
 	@ link register save eliminated.
 	mov	r2, #1
 	mov	r3, #0
-	b	.L351
-.L352:
+	b	.L355
+.L356:
 	add	r3, r3, #1
 	mov	r2, r2, asl #1
 	uxth	r3, r3
-.L351:
+.L355:
 	cmp	r2, r0
-	bls	.L352
+	bls	.L356
 	sub	r3, r3, #1
 	uxth	r0, r3
 	bx	lr
@@ -2782,27 +2827,27 @@ FtlSysBlkNumInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L357
-	movw	r2, #3844
+	ldr	r3, .L361
+	movw	r2, #3848
 	cmp	r0, #23
-	movw	r1, #3854
+	movw	r1, #3858
 	ldrh	r2, [r3, r2]
 	movls	r0, #24
 	ldrh	r1, [r3, r1]
-	str	r0, [r3, #3840]
+	str	r0, [r3, #3844]
 	mul	r2, r2, r0
 	rsb	r0, r0, r1
-	movw	r1, #3852
+	mov	r1, #3856
 	strh	r0, [r3, r1]	@ movhi
 	mov	r0, #0
-	ldr	r1, [r3, #3860]
-	str	r2, [r3, #3848]
+	ldr	r1, [r3, #3864]
+	str	r2, [r3, #3852]
 	rsb	r2, r2, r1
-	str	r2, [r3, #3856]
+	str	r2, [r3, #3860]
 	bx	lr
-.L358:
+.L362:
 	.align	2
-.L357:
+.L361:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
@@ -2815,8 +2860,8 @@ FtlConstantsInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r2, #3864
-	ldr	r3, .L376
+	movw	r2, #3868
+	ldr	r3, .L380
 	mov	r4, r0
 	ldrh	lr, [r0, #8]
 	.pad #20
@@ -2827,22 +2872,22 @@ FtlConstantsInit:
 	add	r2, r2, #2
 	ldrh	r6, [r4, #14]
 	strh	r1, [r3, r2]	@ movhi
-	add	r2, r2, #2
+	mov	r2, #3872
 	strh	r0, [r3, r2]	@ movhi
-	movw	r2, #3854
+	movw	r2, #3858
 	strh	r6, [r3, r2]	@ movhi
 	mov	r3, #0
-	ldr	r2, .L376+4
-.L360:
+	ldr	r2, .L380+4
+.L364:
 	strb	r3, [r3, r2]
 	add	r3, r3, #1
 	cmp	r3, #32
-	bne	.L360
+	bne	.L364
 	ldrh	r2, [r4, #14]
 	ldrh	r3, [r4, #20]
 	cmp	r3, r2, lsr #8
-	bcs	.L361
-	ldr	r2, .L376+4
+	bcs	.L365
+	ldr	r2, .L380+4
 	sub	ip, r1, #1
 	uxtb	r7, r0
 	mov	r3, #0
@@ -2852,22 +2897,22 @@ FtlConstantsInit:
 	mov	r8, r7, asl #1
 	uxtb	r8, r8
 	str	ip, [sp, #12]
-	b	.L362
-.L363:
+	b	.L366
+.L367:
 	strb	ip, [r9, r2]
 	add	fp, ip, r7
 	add	ip, ip, r8
 	add	r5, r5, #1
 	strb	fp, [sl, r2]
 	uxtb	ip, ip
-.L365:
+.L369:
 	cmp	r5, r1
 	add	r2, r2, r0
-	bcc	.L363
+	bcc	.L367
 	add	r3, r3, #1
-.L362:
+.L366:
 	cmp	r3, r0
-	bcs	.L364
+	bcs	.L368
 	ldr	fp, [sp, #8]
 	mov	r2, #0
 	uxtb	ip, r3
@@ -2875,37 +2920,37 @@ FtlConstantsInit:
 	add	r9, fp, r3
 	ldr	fp, [sp, #12]
 	add	sl, fp, r3
-	b	.L365
-.L364:
-	ldr	r3, .L376
-	movw	r2, #3866
+	b	.L369
+.L368:
+	ldr	r3, .L380
+	movw	r2, #3870
 	mov	r1, r1, asl #1
 	mov	r6, r6, lsr #1
 	strh	r1, [r3, r2]	@ movhi
-	movw	r2, #3854
+	movw	r2, #3858
 	strh	r6, [r3, r2]	@ movhi
-.L361:
-	ldr	r3, .L376
-	movw	r2, #3902
+.L365:
+	ldr	r3, .L380
+	movw	r2, #3906
 	cmp	lr, #1
 	mov	r1, #5
 	mov	ip, #0
-	ldr	sl, .L376
+	ldr	sl, .L380
 	ldrb	r8, [r3, #852]	@ zero_extendqisi2
 	strh	r1, [r3, r2]	@ movhi
-	mov	r1, #3904
+	movw	r1, #3908
 	streqh	lr, [r3, r2]	@ movhi
 	cmp	r8, #0
-	movw	r2, #3906
+	movw	r2, #3910
 	strh	ip, [r3, r1]	@ movhi
 	mov	r1, #4352
 	strh	r1, [r3, r2]	@ movhi
-	ldrne	r3, .L376
+	ldrne	r3, .L380
 	movne	r1, #384
 	strneh	r1, [r3, r2]	@ movhi
-	movw	r3, #3866
+	movw	r3, #3870
 	ldrh	r5, [sl, r3]
-	movw	r3, #3844
+	movw	r3, #3848
 	mul	r5, r5, r0
 	uxth	r5, r5
 	strh	r5, [sl, r3]	@ movhi
@@ -2916,9 +2961,9 @@ FtlConstantsInit:
 	uxth	r0, r0
 	strh	r0, [sl, r3]	@ movhi
 	bl	Ftl_log2
-	movw	r3, #3910
+	movw	r3, #3914
 	ldrh	fp, [r4, #18]
-	movw	r2, #3912
+	movw	r2, #3916
 	ldrh	r9, [r4, #20]
 	strh	r0, [sl, r3]	@ movhi
 	mov	r0, r9
@@ -2927,14 +2972,14 @@ FtlConstantsInit:
 	strh	r3, [sl, r2]	@ movhi
 	add	r2, r2, #2
 	strh	fp, [sl, r2]	@ movhi
-	add	r2, r2, #2
+	mov	r2, #3920
 	strh	r1, [sl, r2]	@ movhi
 	add	r2, r2, #2
 	strh	r9, [sl, r2]	@ movhi
 	str	r3, [sp, #4]
 	bl	Ftl_log2
-	mov	r2, #3920
-	movw	r1, #3922
+	movw	r2, #3924
+	movw	r1, #3926
 	cmp	r6, #1024
 	strh	r0, [sl, r2]	@ movhi
 	mov	r2, r9, asl #9
@@ -2944,17 +2989,16 @@ FtlConstantsInit:
 	add	r1, r1, #2
 	mov	r2, r2, lsr #8
 	strh	r2, [sl, r1]	@ movhi
-	movw	r2, #3926
+	movw	r2, #3930
 	ldrh	r1, [r4, #26]
 	mov	r4, sl
 	strh	r1, [sl, r2]	@ movhi
 	uxtbhi	r1, r6
 	mul	r2, r6, r5
-	str	r2, [sl, #3860]
-	movhi	r2, #3904
+	str	r2, [sl, #3864]
+	movw	r2, #3908
 	ldr	r3, [sp, #4]
 	strhih	r1, [sl, r2]	@ movhi
-	mov	r2, #3904
 	ldrh	r2, [sl, r2]
 	mul	r1, fp, r9
 	rsb	r2, r2, r6
@@ -2963,17 +3007,17 @@ FtlConstantsInit:
 	mul	r2, r9, r2
 	mul	r3, r3, r2
 	mov	r3, r3, asr #11
-	str	r3, [sl, #3928]
-	movw	sl, #3906
+	str	r3, [sl, #3932]
+	movw	sl, #3910
 	ldrh	r0, [r4, sl]
 	mov	r0, r0, asl #3
 	bl	__aeabi_idiv
-	movw	r3, #3932
+	mov	r3, #3936
 	uxth	r0, r0
 	strh	r0, [r4, r3]	@ movhi
 	cmp	r0, #4
-	ldr	r4, .L376
-	ldrls	r2, .L376
+	ldr	r4, .L380
+	ldrls	r2, .L380
 	movls	r1, #4
 	strlsh	r1, [r2, r3]	@ movhi
 	cmp	r8, #0
@@ -2981,78 +3025,78 @@ FtlConstantsInit:
 	movne	r3, #640
 	strneh	r3, [r4, sl]	@ movhi
 	ldrh	r2, [r4, sl]
-	movw	r3, #3934
+	movw	r3, #3938
 	mov	r2, r2, asr r7
 	add	r7, r7, #9
 	mov	r6, r6, asr r7
 	add	r2, r2, #2
 	strh	r2, [r4, r3]	@ movhi
-	mov	r3, #3936
+	add	r3, r3, #2
 	uxth	r6, r6
 	strh	r6, [r4, r3]	@ movhi
 	mul	r3, r5, r6
 	add	r6, r6, #8
-	str	r3, [r4, #3940]
-	movw	r3, #3932
+	str	r3, [r4, #3944]
+	mov	r3, #3936
 	ldrh	r0, [r4, r3]
 	bl	__aeabi_uidiv
 	cmp	r5, #1
-	ldreq	r3, .L376
+	ldreq	r3, .L380
 	uxtah	r6, r6, r0
-	str	r6, [r4, #3840]
-	ldr	r4, .L376
+	str	r6, [r4, #3844]
+	ldr	r4, .L380
 	addeq	r6, r6, #4
-	streq	r6, [r3, #3840]
-	ldr	r0, [r4, #3840]
+	streq	r6, [r3, #3844]
+	ldr	r0, [r4, #3844]
 	uxth	r0, r0
 	bl	FtlSysBlkNumInit
-	ldr	r3, [r4, #3840]
-	ldr	r6, [r4, #3856]
+	ldr	r3, [r4, #3844]
+	ldr	r6, [r4, #3860]
 	mov	r0, #2048
-	str	r3, [r4, #3944]
-	movw	r3, #3912
+	str	r3, [r4, #3948]
+	movw	r3, #3916
 	ldrh	r3, [r4, r3]
 	mov	r6, r6, asl #2
 	mul	r6, r3, r6
-	mov	r3, #3920
+	movw	r3, #3924
 	ldrh	r3, [r4, r3]
 	add	r3, r3, #9
 	mov	r6, r6, lsr r3
-	movw	r3, #3948
+	mov	r3, #3952
 	add	r6, r6, #2
 	uxth	r6, r6
 	strh	r6, [r4, r3]	@ movhi
-	movw	r3, #3918
+	movw	r3, #3922
 	ldrh	r5, [r4, r3]
 	mov	r1, r5
 	bl	__aeabi_idiv
-	movw	r3, #3950
+	movw	r3, #3954
 	ldrb	ip, [r4, #928]	@ zero_extendqisi2
-	ldr	r1, [r4, #3940]
+	ldr	r1, [r4, #3944]
 	cmp	ip, #0
 	strh	r0, [r4, r3]	@ movhi
 	mov	r3, #0
-	str	r3, [r4, #3952]
-	movw	r3, #3932
+	str	r3, [r4, #3956]
+	mov	r3, #3936
 	ldrh	r0, [r4, r3]
 	add	r2, r0, #3
 	strh	r2, [r4, r3]	@ movhi
 	add	r2, r1, #3
-	str	r2, [r4, #3940]
+	str	r2, [r4, #3944]
 	addne	r0, r0, #4
 	addne	r1, r1, #5
 	strneh	r0, [r4, r3]	@ movhi
-	strne	r1, [r4, #3940]
-	bne	.L373
-.L372:
+	strne	r1, [r4, #3944]
+	bne	.L377
+.L376:
 	cmp	r2, #7
 	movls	r3, #8
-	strls	r3, [r4, #3940]
-.L373:
-	movw	r3, #3956
+	strls	r3, [r4, #3944]
+.L377:
+	movw	r3, #3960
 	mov	r2, #0
 	strh	r2, [r4, r3]	@ movhi
-	movw	r2, #3852
+	mov	r2, #3856
 	ldrh	r2, [r4, r2]
 	mov	r0, #0
 	mov	r1, r2, lsr #3
@@ -3060,16 +3104,16 @@ FtlConstantsInit:
 	add	r2, r2, #52
 	add	r6, r2, r6, asl #2
 	cmp	r6, r5, asl #9
-	ldrcc	r2, .L376
+	ldrcc	r2, .L380
 	movcc	r1, #1
 	strcch	r1, [r2, r3]	@ movhi
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L377:
+.L381:
 	.align	2
-.L376:
+.L380:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3870
+	.word	.LANCHOR0+3874
 	.fnend
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	2
@@ -3080,36 +3124,36 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L385
-	movw	r2, #3958
+	ldr	r3, .L389
+	movw	r2, #3962
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	beq	.L383
-	movw	r2, #3932
+	beq	.L387
+	mov	r2, #3936
 	ldrh	r1, [r3, r2]
-	ldr	r2, [r3, #3960]
+	ldr	r2, [r3, #3964]
 	mov	r3, #0
-	b	.L380
-.L382:
+	b	.L384
+.L386:
 	ldrh	ip, [r2], #2
 	cmp	ip, r0
-	beq	.L384
+	beq	.L388
 	add	r3, r3, #1
 	uxth	r3, r3
-.L380:
+.L384:
 	cmp	r3, r1
-	bne	.L382
+	bne	.L386
 	mov	r0, #0
 	bx	lr
-.L384:
+.L388:
 	mov	r0, #1
 	bx	lr
-.L383:
+.L387:
 	mov	r0, r2
 	bx	lr
-.L386:
+.L390:
 	.align	2
-.L385:
+.L389:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -3120,36 +3164,36 @@ FtlCacheMetchLpa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L395
+	ldr	r2, .L399
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldr	r3, [r2, #3964]
+	ldr	r3, [r2, #3968]
 	cmp	r3, #0
-	beq	.L392
-	ldr	ip, [r2, #3968]
+	beq	.L396
+	ldr	ip, [r2, #3972]
 	mov	r2, #0
-.L391:
+.L395:
 	ldr	r4, [ip, #16]
 	cmp	r4, r0
-	bcc	.L389
+	bcc	.L393
 	cmp	r4, r1
-	bls	.L393
-.L389:
+	bls	.L397
+.L393:
 	add	r2, r2, #1
 	add	ip, ip, #36
 	cmp	r2, r3
-	bne	.L391
+	bne	.L395
 	mov	r0, #0
 	ldmfd	sp!, {r4, pc}
-.L393:
+.L397:
 	mov	r0, #1
 	ldmfd	sp!, {r4, pc}
-.L392:
+.L396:
 	mov	r0, r3
 	ldmfd	sp!, {r4, pc}
-.L396:
+.L400:
 	.align	2
-.L395:
+.L399:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
@@ -3161,12 +3205,12 @@ FtlGetCap:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L398
-	ldr	r0, [r3, #3952]
+	ldr	r3, .L402
+	ldr	r0, [r3, #3956]
 	bx	lr
-.L399:
+.L403:
 	.align	2
-.L398:
+.L402:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetCap, .-FtlGetCap
@@ -3178,12 +3222,12 @@ ftl_get_density:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L401
-	ldr	r0, [r3, #3952]
+	ldr	r3, .L405
+	ldr	r0, [r3, #3956]
 	bx	lr
-.L402:
+.L406:
 	.align	2
-.L401:
+.L405:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_get_density, .-ftl_get_density
@@ -3195,12 +3239,12 @@ FtlGetLpn:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L404
-	ldr	r0, [r3, #3972]
+	ldr	r3, .L408
+	ldr	r0, [r3, #3976]
 	bx	lr
-.L405:
+.L409:
 	.align	2
-.L404:
+.L408:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLpn, .-FtlGetLpn
@@ -3213,8 +3257,8 @@ FtlBbmMapBadBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
 	.save {r0, r1, r4, r5, r6, lr}
-	movw	r3, #3908
-	ldr	r4, .L407
+	movw	r3, #3912
+	ldr	r4, .L411
 	mov	r5, r0
 	ldrh	r6, [r4, r3]
 	mov	r1, r6
@@ -3223,7 +3267,7 @@ FtlBbmMapBadBlock:
 	mls	r3, r6, r2, r5
 	add	r1, r4, r2, asl #2
 	mov	r6, #1
-	ldr	r0, [r1, #4004]
+	ldr	r0, [r1, #4008]
 	uxth	r3, r3
 	and	r1, r3, #31
 	mov	ip, r3, lsr #5
@@ -3232,17 +3276,17 @@ FtlBbmMapBadBlock:
 	str	r1, [r0, ip, asl #2]
 	str	r1, [sp, #0]
 	mov	r1, r5
-	ldr	r0, .L407+4
+	ldr	r0, .L411+4
 	bl	printk
-	movw	r3, #3982
+	movw	r3, #3986
 	ldrh	r2, [r4, r3]
 	mov	r0, #0
 	add	r2, r2, r6
 	strh	r2, [r4, r3]	@ movhi
 	ldmfd	sp!, {r2, r3, r4, r5, r6, pc}
-.L408:
+.L412:
 	.align	2
-.L407:
+.L411:
 	.word	.LANCHOR0
 	.word	.LC3
 	.fnend
@@ -3257,8 +3301,8 @@ FtlBbmIsBadBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	movw	r3, #3908
-	ldr	r5, .L410
+	movw	r3, #3912
+	ldr	r5, .L414
 	mov	r7, r0
 	ldrh	r6, [r5, r3]
 	mov	r1, r6
@@ -3271,14 +3315,14 @@ FtlBbmIsBadBlock:
 	and	r4, r4, #31
 	uxth	r0, r0
 	add	r5, r5, r0, asl #2
-	ldr	r3, [r5, #4004]
+	ldr	r3, [r5, #4008]
 	ldr	r0, [r3, r2, asl #2]
 	mov	r0, r0, lsr r4
 	and	r0, r0, #1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L411:
+.L415:
 	.align	2
-.L410:
+.L414:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -3304,11 +3348,11 @@ FtlBbtCalcTotleCnt:
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r4, #0
 	mov	r5, r4
-	ldr	r6, .L417
-	movw	r8, #3908
-	movw	r7, #3866
-	b	.L414
-.L416:
+	ldr	r6, .L421
+	movw	r8, #3912
+	movw	r7, #3870
+	b	.L418
+.L420:
 	mov	r0, r5
 	add	r5, r5, #1
 	bl	FtlBbmIsBadBlock
@@ -3316,17 +3360,17 @@ FtlBbtCalcTotleCnt:
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-.L414:
+.L418:
 	ldrh	r3, [r6, r8]
 	ldrh	r2, [r6, r7]
 	mul	r3, r2, r3
 	cmp	r5, r3
-	blt	.L416
+	blt	.L420
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L418:
+.L422:
 	.align	2
-.L417:
+.L421:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -3339,14 +3383,14 @@ V2P_block:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	movw	r3, #3868
-	ldr	r5, .L420
+	mov	r3, #3872
+	ldr	r5, .L424
 	mov	r7, r1
 	mov	r6, r0
 	ldrh	r4, [r5, r3]
 	mov	r1, r4
 	bl	__aeabi_uidiv
-	movw	r3, #3908
+	movw	r3, #3912
 	ldrh	r5, [r5, r3]
 	mov	r1, r4
 	mul	r7, r4, r7
@@ -3356,9 +3400,9 @@ V2P_block:
 	add	r1, r5, r1
 	uxth	r0, r1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L421:
+.L425:
 	.align	2
-.L420:
+.L424:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -3369,8 +3413,8 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L423
-	movw	r2, #3868
+	ldr	r3, .L427
+	mov	r2, #3872
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
@@ -3385,9 +3429,9 @@ P2V_plane:
 	add	r1, r5, r1
 	uxth	r0, r1
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L424:
+.L428:
 	.align	2
-.L423:
+.L427:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -3400,44 +3444,97 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	movw	r3, #3908
-	ldr	r4, .L426
+	movw	r3, #3912
+	ldr	r4, .L430
 	ldrh	r1, [r4, r3]
 	bl	__aeabi_uidivmod
-	movw	r3, #3868
+	mov	r3, #3872
 	uxth	r0, r1
 	ldrh	r1, [r4, r3]
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	ldmfd	sp!, {r4, pc}
-.L427:
+.L431:
 	.align	2
-.L426:
+.L430:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
 	.align	2
-	.global	ftl_cmp_data_ver
-	.type	ftl_cmp_data_ver, %function
-ftl_cmp_data_ver:
+	.type	FtlFreeSysBlkQueueIn.part.5, %function
+FtlFreeSysBlkQueueIn.part.5:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	cmp	r0, r1
-	bls	.L429
-	rsb	r0, r1, r0
-	cmp	r0, #-2147483648
-	movhi	r0, #0
-	movls	r0, #1
-	bx	lr
-.L429:
-	rsb	r0, r0, r1
-	cmp	r0, #-2147483648
-	movls	r0, #0
-	movhi	r0, #1
-	bx	lr
-	.fnend
+	cmp	r1, #0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	beq	.L433
+	ldr	r4, .L434
+	ldr	r3, [r4, #4040]
+	cmp	r3, #0
+	bne	.L433
+	bl	P2V_block_in_plane
+	mov	r1, #1
+	mov	r3, r5, asl #10
+	mov	r2, r1
+	mov	r6, r0
+	ldr	r0, [r4, #4044]
+	mov	r6, r6, asl #1
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r3, [r4, #4048]
+	ldrh	r2, [r3, r6]
+	add	r2, r2, #1
+	strh	r2, [r3, r6]	@ movhi
+	ldr	r3, [r4, #4052]
+	add	r3, r3, #1
+	str	r3, [r4, #4052]
+.L433:
+	ldr	r3, .L434
+	movw	r2, #4062
+	movw	r0, #4056
+	ldrh	r1, [r3, r2]
+	add	r1, r1, #1
+	strh	r1, [r3, r2]	@ movhi
+	movw	r2, #4060
+	ldrh	r1, [r3, r2]
+	add	ip, r1, #4
+	add	r1, r1, #1
+	bic	r1, r1, #64512
+	add	ip, r3, ip, asl #1
+	strh	r5, [ip, r0]	@ movhi
+	strh	r1, [r3, r2]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L435:
+	.align	2
+.L434:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueIn.part.5, .-FtlFreeSysBlkQueueIn.part.5
+	.align	2
+	.global	ftl_cmp_data_ver
+	.type	ftl_cmp_data_ver, %function
+ftl_cmp_data_ver:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r0, r1
+	bls	.L437
+	rsb	r0, r1, r0
+	cmp	r0, #-2147483648
+	movhi	r0, #0
+	movls	r0, #1
+	bx	lr
+.L437:
+	rsb	r0, r0, r1
+	cmp	r0, #-2147483648
+	movls	r0, #0
+	movhi	r0, #1
+	bx	lr
+	.fnend
 	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
 	.align	2
 	.global	FtlFreeSysBlkQueueEmpty
@@ -3447,15 +3544,15 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L432
-	movw	r3, #4042
+	ldr	r2, .L440
+	movw	r3, #4062
 	ldrh	r0, [r2, r3]
 	rsbs	r0, r0, #1
 	movcc	r0, #0
 	bx	lr
-.L433:
+.L441:
 	.align	2
-.L432:
+.L440:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -3467,16 +3564,16 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L435
-	movw	r3, #4042
+	ldr	r2, .L443
+	movw	r3, #4062
 	ldrh	r0, [r2, r3]
 	sub	r2, r0, #1024
 	rsbs	r0, r2, #0
 	adc	r0, r0, r2
 	bx	lr
-.L436:
+.L444:
 	.align	2
-.L435:
+.L443:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -3487,57 +3584,22 @@ FtlFreeSysBlkQueueIn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L440
-	movw	r3, #4042
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r5, r0
+	@ link register save eliminated.
+	sub	r2, r0, #1
+	movw	r3, #65533
+	uxth	r2, r2
+	cmp	r2, r3
+	bxhi	lr
+	ldr	r2, .L447
+	movw	r3, #4062
 	ldrh	r3, [r2, r3]
 	cmp	r3, #1024
-	ldmeqfd	sp!, {r4, r5, r6, pc}
-	cmp	r1, #0
-	beq	.L439
-	ldr	r4, .L440+4
-	ldr	r3, [r4, #-2092]
-	cmp	r3, #0
-	bne	.L439
-	bl	P2V_block_in_plane
-	mov	r1, #1
-	mov	r3, r5, asl #10
-	mov	r2, r1
-	mov	r6, r0
-	ldr	r0, [r4, #-2088]
-	mov	r6, r6, asl #1
-	str	r3, [r0, #4]
-	bl	FlashEraseBlocks
-	ldr	r3, [r4, #-2084]
-	ldrh	r2, [r3, r6]
-	add	r2, r2, #1
-	strh	r2, [r3, r6]	@ movhi
-	ldr	r3, [r4, #-2080]
-	add	r3, r3, #1
-	str	r3, [r4, #-2080]
-.L439:
-	ldr	r3, .L440
-	movw	r2, #4042
-	movw	r0, #4036
-	ldrh	r1, [r3, r2]
-	add	r1, r1, #1
-	strh	r1, [r3, r2]	@ movhi
-	movw	r2, #4040
-	ldrh	r1, [r3, r2]
-	add	ip, r1, #4
-	add	r1, r1, #1
-	bic	r1, r1, #64512
-	add	ip, r3, ip, asl #1
-	strh	r5, [ip, r0]	@ movhi
-	strh	r1, [r3, r2]	@ movhi
-	ldmfd	sp!, {r4, r5, r6, pc}
-.L441:
+	bxeq	lr
+	b	FtlFreeSysBlkQueueIn.part.5
+.L448:
 	.align	2
-.L440:
+.L447:
 	.word	.LANCHOR0
-	.word	.LANCHOR2
 	.fnend
 	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
 	.align	2
@@ -3547,47 +3609,51 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L445
-	mov	r0, #0
-	ldr	r2, .L445+4
-	ldr	r1, .L445+8
+	ldr	r3, .L453
+	ldr	r2, .L453+4
+	ldr	r1, .L453+8
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	ldrh	r4, [r2, r3]
-	movw	r3, #4038
+	movw	r3, #4062
+	ldrh	r3, [r1, r3]
+	and	r4, r4, #31
+	cmp	r3, #0
+	ldmeqfd	sp!, {r4, r5, pc}
+	movw	r3, #4058
+	mov	r0, #0
 	ldrh	r2, [r1, r3]
 	add	r3, r3, #2
-	and	r4, r4, #31
 	ldrh	r3, [r1, r3]
-	b	.L443
-.L444:
+	b	.L451
+.L452:
 	add	ip, r1, r2, asl #1
 	add	r2, r2, #1
-	add	ip, ip, #4032
+	add	ip, ip, #4064
 	add	r0, r0, #1
 	mov	r2, r2, asl #22
-	ldrh	r5, [ip, #12]
+	ldrh	r5, [ip, #0]
 	add	ip, r1, r3, asl #1
 	add	r3, r3, #1
-	add	ip, ip, #4032
+	add	ip, ip, #4064
 	mov	r2, r2, lsr #22
 	uxth	r0, r0
 	mov	r3, r3, asl #22
-	strh	r5, [ip, #12]	@ movhi
+	strh	r5, [ip, #0]	@ movhi
 	mov	r3, r3, lsr #22
-.L443:
+.L451:
 	cmp	r0, r4
-	ldr	ip, .L445+8
-	blt	.L444
-	movw	r1, #4038
+	ldr	ip, .L453+8
+	blt	.L452
+	movw	r1, #4058
 	strh	r2, [ip, r1]	@ movhi
-	movw	r2, #4040
+	movw	r2, #4060
 	strh	r3, [ip, r2]	@ movhi
 	ldmfd	sp!, {r4, r5, pc}
-.L446:
+.L454:
 	.align	2
-.L445:
-	.word	-2048
+.L453:
+	.word	-2044
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -3599,32 +3665,31 @@ remove_from_free_sys_Queue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L453
-	movw	r2, #4042
+	ldr	r3, .L461
+	movw	r2, #4062
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r1, r0
 	ldrh	r0, [r3, r2]
 	cmp	r0, #0
 	ldmeqfd	sp!, {r4, r5, r6, pc}
-	movw	r2, #4038
+	movw	r2, #4058
 	mov	r5, #0
-	ldrh	ip, [r3, r2]
-	b	.L449
-.L451:
-	add	r2, r5, ip
-	ldr	r4, .L453
-	movw	r6, #4036
-	mov	r2, r2, asl #22
-	add	r2, r3, r2, lsr #21
-	add	r2, r2, #4032
-	add	r2, r2, #12
-	ldrh	r2, [r2, #0]
-	cmp	r2, r1
-	bne	.L450
-	ldr	r0, .L453+4
+	ldrh	r2, [r3, r2]
+	b	.L457
+.L459:
+	add	ip, r5, r2
+	ldr	r4, .L461
+	movw	r6, #4056
+	mov	ip, ip, asl #22
+	add	ip, r3, ip, lsr #21
+	add	ip, ip, #4064
+	ldrh	ip, [ip, #0]
+	cmp	ip, r1
+	bne	.L458
+	ldr	r0, .L461+4
 	bl	printk
-	movw	r2, #4038
+	movw	r2, #4058
 	ldrh	r3, [r4, r2]
 	mov	r0, #1
 	add	r1, r3, #4
@@ -3638,21 +3703,21 @@ remove_from_free_sys_Queue:
 	add	r5, r5, #8
 	strh	r1, [r5, r6]	@ movhi
 	strh	r3, [r4, r2]	@ movhi
-	movw	r3, #4042
+	movw	r3, #4062
 	ldrh	r2, [r4, r3]
 	sub	r2, r2, #1
 	strh	r2, [r4, r3]	@ movhi
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L450:
+.L458:
 	add	r5, r5, #1
-.L449:
+.L457:
 	cmp	r5, r0
-	bcc	.L451
+	bcc	.L459
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L454:
+.L462:
 	.align	2
-.L453:
+.L461:
 	.word	.LANCHOR0
 	.word	.LC4
 	.fnend
@@ -3664,76 +3729,76 @@ FtlFreeSysBlkQueueOut:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, lr}
-	movw	r7, #4042
-	ldr	r4, .L462
-	movw	r8, #4038
-.L456:
-	ldrh	r1, [r4, r7]
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	movw	r6, #4062
+	ldr	r4, .L470
+	movw	r7, #4058
+.L464:
+	ldrh	r1, [r4, r6]
 	cmp	r1, #0
-	beq	.L457
-	ldr	r9, .L462+4
+	beq	.L465
+	ldrh	r3, [r4, r7]
 	sub	r1, r1, #1
-	ldrh	r2, [r4, r8]
-	ldr	r6, [r9, #-2092]
-	add	r3, r4, r2, asl #1
-	add	r2, r2, #1
-	add	r3, r3, #4032
-	cmp	r6, #0
-	bic	r2, r2, #64512
-	ldrh	r5, [r3, #12]
-	strh	r1, [r4, r7]	@ movhi
-	strh	r2, [r4, r8]	@ movhi
-	bne	.L458
+	ldr	sl, [r4, #4040]
+	add	r2, r4, r3, asl #1
+	cmp	sl, #0
+	add	r2, r2, #4064
+	add	r3, r3, #1
+	bic	r3, r3, #64512
+	ldrh	r5, [r2, #0]
+	strh	r1, [r4, r6]	@ movhi
+	strh	r3, [r4, r7]	@ movhi
+	bne	.L466
 	mov	r0, r5
 	bl	P2V_block_in_plane
 	mov	r3, r5, asl #10
-	mov	sl, r0
-	ldr	r0, [r9, #-2088]
+	mov	r8, r0
+	ldr	r0, [r4, #4044]
 	str	r3, [r0, #4]
 	ldrb	r3, [r4, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L459
-	mov	r1, r6
+	beq	.L467
+	mov	r1, sl
 	mov	r2, #1
 	bl	FlashEraseBlocks
-.L459:
-	ldr	r6, .L462+4
+.L467:
 	mov	r1, #1
+	ldr	r0, [r4, #4044]
 	mov	r2, r1
-	mov	sl, sl, asl #1
-	ldr	r0, [r6, #-2088]
+	mov	r8, r8, asl #1
 	bl	FlashEraseBlocks
-	ldr	r3, [r6, #-2084]
-	ldrh	r2, [r3, sl]
+	ldr	r3, [r4, #4048]
+	ldrh	r2, [r3, r8]
 	add	r2, r2, #1
-	strh	r2, [r3, sl]	@ movhi
-	ldr	r3, [r6, #-2080]
+	strh	r2, [r3, r8]	@ movhi
+	ldr	r3, [r4, #4052]
 	add	r3, r3, #1
-	str	r3, [r6, #-2080]
-	b	.L458
-.L457:
-	ldr	r0, .L462+8
+	str	r3, [r4, #4052]
+	b	.L466
+.L465:
+	ldr	r0, .L470+4
 	bl	printk
-.L460:
-	b	.L460
-.L458:
-	cmp	r5, #0
-	bne	.L461
+.L468:
+	b	.L468
+.L466:
+	sub	r2, r5, #1
+	movw	r3, #65533
+	uxth	r2, r2
+	cmp	r2, r3
+	bls	.L469
 	mov	r1, r5
-	ldrh	r2, [r4, r7]
-	ldr	r0, .L462+12
+	ldrh	r2, [r4, r6]
+	ldr	r0, .L470+8
 	bl	printk
-	b	.L456
-.L461:
+	b	.L464
+.L469:
 	mov	r0, r5
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L463:
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L471:
 	.align	2
-.L462:
+.L470:
 	.word	.LANCHOR0
-	.word	.LANCHOR2
 	.word	.LC5
 	.word	.LC6
 	.fnend
@@ -3745,57 +3810,57 @@ insert_data_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L479
-	movw	r3, #3852
+	ldr	r2, .L487
+	mov	r3, #3856
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
 	ldrh	r3, [r2, r3]
 	cmp	r3, r0
-	bls	.L465
-	ldr	r1, .L479+4
+	bls	.L473
+	ldr	r1, .L487+4
 	mov	ip, #6
 	mul	ip, ip, r0
 	mvn	r6, #0
-	ldr	r4, [r1, #-2028]
-	mov	r5, r1
+	ldr	r4, [r1, #-2024]
+	mov	r8, r1
 	add	r2, r4, ip
 	strh	r6, [r2, #2]	@ movhi
 	strh	r6, [r4, ip]	@ movhi
-	ldr	r3, [r1, #-2024]
+	ldr	r3, [r1, #-2020]
 	cmp	r3, #0
-	beq	.L478
-.L466:
-	ldr	r7, [r1, #-2020]
-	mov	r8, r0, asl #1
+	beq	.L486
+.L474:
+	ldr	r7, [r1, #-2016]
+	mov	r5, r0, asl #1
 	ldrh	r1, [r2, #4]
-	ldr	r9, .L479
-	ldrh	sl, [r7, r8]
+	ldr	fp, [r8, #-2024]
+	ldrh	sl, [r7, r5]
 	cmp	r1, #0
-	ldr	fp, [r5, #-2084]
+	ldr	r8, .L487+8
 	mulne	r6, r1, sl
-	ldr	r1, [r5, #-2028]
-	ldr	sl, .L479+8
-	mov	r5, #0
-	add	r8, fp, r8
-	str	r8, [sp, #12]
-	str	r1, [sp, #4]
-	rsb	r1, r1, r3
+	rsb	r1, fp, r3
+	mov	sl, #3856
 	mov	r1, r1, asr #1
-	mul	r1, sl, r1
-	movw	sl, #3852
-	ldrh	sl, [r9, sl]
-	str	sl, [sp, #8]
+	mul	r1, r8, r1
+	ldr	r8, .L487
+	ldrh	sl, [r8, sl]
+	ldr	r8, [r8, #4048]
 	uxth	r1, r1
-.L473:
+	add	r5, r8, r5
+	str	r5, [sp, #12]
+	mov	r5, #0
+	str	sl, [sp, #8]
+	str	r8, [sp, #4]
+.L481:
 	add	r5, r5, #1
 	ldr	r8, [sp, #8]
 	uxth	r5, r5
 	cmp	r5, r8
-	bhi	.L465
+	bhi	.L473
 	cmp	r0, r1
-	beq	.L465
+	beq	.L473
 	mov	r9, r1, asl #1
 	ldrh	r8, [r3, #4]
 	ldrh	sl, [r7, r9]
@@ -3803,56 +3868,56 @@ insert_data_list:
 	mvneq	r8, #0
 	mulne	r8, r8, sl
 	cmp	r8, r6
-	bne	.L469
-	ldrh	sl, [fp, r9]
+	bne	.L477
+	ldr	r8, [sp, #4]
+	ldrh	sl, [r8, r9]
 	ldr	r9, [sp, #12]
 	ldrh	r8, [r9, #0]
 	cmp	sl, r8
-	bcc	.L471
-	b	.L470
-.L469:
-	bhi	.L470
-.L471:
+	bcc	.L479
+	b	.L478
+.L477:
+	bhi	.L478
+.L479:
 	ldrh	r8, [r3, #0]
 	movw	sl, #65535
 	cmp	r8, sl
 	streqh	r1, [r2, #2]	@ movhi
 	streqh	r0, [r3, #0]	@ movhi
-	ldreq	r3, .L479+4
-	streq	r2, [r3, #-2016]
-	beq	.L465
-.L472:
-	ldr	r9, [sp, #4]
+	ldreq	r3, .L487+4
+	streq	r2, [r3, #-2012]
+	beq	.L473
+.L480:
 	mov	r1, #6
-	mla	r3, r1, r8, r9
+	mla	r3, r1, r8, fp
 	mov	r1, r8
-	b	.L473
-.L470:
+	b	.L481
+.L478:
 	strh	r1, [r4, ip]	@ movhi
 	ldrh	r1, [r3, #2]
 	strh	r1, [r2, #2]	@ movhi
-	ldr	r1, .L479+4
-	ldr	ip, [r1, #-2024]
+	ldr	r1, .L487+4
+	ldr	ip, [r1, #-2020]
 	cmp	r3, ip
-	bne	.L474
+	bne	.L482
 	strh	r0, [r3, #2]	@ movhi
-.L478:
-	str	r2, [r1, #-2024]
-	b	.L465
-.L474:
+.L486:
+	str	r2, [r1, #-2020]
+	b	.L473
+.L482:
 	ldrh	r2, [r3, #2]
 	mov	ip, #6
-	ldr	r1, [r1, #-2028]
+	ldr	r1, [r1, #-2024]
 	mul	r2, ip, r2
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L465:
+.L473:
 	mov	r0, #0
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L480:
+.L488:
 	.align	2
-.L479:
+.L487:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-1431655765
@@ -3868,17 +3933,17 @@ INSERT_DATA_LIST:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L482
-	ldr	r3, .L482+4
+	ldr	r2, .L490
+	ldr	r3, .L490+4
 	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
 	ldmfd	sp!, {r3, pc}
-.L483:
+.L491:
 	.align	2
-.L482:
+.L490:
 	.word	.LANCHOR2
-	.word	-2012
+	.word	-2008
 	.fnend
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
 	.align	2
@@ -3892,70 +3957,72 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	movw	r6, #65535
 	cmp	r0, r6
-	beq	.L485
-	ldr	r1, .L492
+	beq	.L493
+	ldr	r1, .L500
 	mov	r5, #6
 	mul	ip, r5, r0
 	mvn	r3, #0
-	ldr	r4, [r1, #-2028]
+	ldr	r4, [r1, #-2024]
 	add	r2, r4, ip
 	strh	r3, [r2, #2]	@ movhi
 	strh	r3, [r4, ip]	@ movhi
-	ldr	r3, [r1, #-2008]
+	ldr	r3, [r1, #-2004]
 	cmp	r3, #0
-	beq	.L491
-.L486:
-	ldr	sl, [r1, #-2028]
+	beq	.L499
+.L494:
+	ldr	sl, [r1, #-2024]
 	mov	r8, r0, asl #1
-	ldr	r7, [r1, #-2084]
+	ldr	r9, .L500+4
 	rsb	r1, sl, r3
-	ldr	r9, .L492+4
+	ldr	r7, .L500+8
 	mov	r1, r1, asr #1
-	ldrh	r8, [r7, r8]
+	ldr	r7, [r7, #4048]
 	mul	r1, r9, r1
 	mov	r9, r5
+	ldrh	r8, [r7, r8]
 	uxth	r1, r1
-.L489:
+.L497:
 	mov	r5, r1, asl #1
 	ldrh	r5, [r7, r5]
 	cmp	r5, r8
-	bcs	.L487
+	bcs	.L495
 	ldrh	r5, [r3, #0]
 	cmp	r5, r6
 	streqh	r1, [r2, #2]	@ movhi
 	streqh	r0, [r3, #0]	@ movhi
-	beq	.L485
-.L488:
+	beq	.L493
+.L496:
 	mla	r3, r9, r5, sl
 	mov	r1, r5
-	b	.L489
-.L487:
+	b	.L497
+.L495:
 	ldrh	r5, [r3, #2]
 	strh	r5, [r2, #2]	@ movhi
 	strh	r1, [r4, ip]	@ movhi
-	ldr	r1, .L492
-	ldr	ip, [r1, #-2008]
+	ldr	r1, .L500
+	ldr	ip, [r1, #-2004]
 	cmp	r3, ip
-	bne	.L490
+	bne	.L498
 	strh	r0, [r3, #2]	@ movhi
-.L491:
-	str	r2, [r1, #-2008]
-	b	.L485
-.L490:
+.L499:
+	str	r2, [r1, #-2004]
+	b	.L493
+.L498:
 	ldrh	r2, [r3, #2]
 	mov	ip, #6
-	ldr	r1, [r1, #-2028]
+	ldr	r1, [r1, #-2024]
 	mul	r2, ip, r2
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L485:
+.L493:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L493:
+.L501:
 	.align	2
-.L492:
+.L500:
 	.word	.LANCHOR2
 	.word	-1431655765
+	.word	.LANCHOR0
 	.fnend
 	.size	insert_free_list, .-insert_free_list
 	.align	2
@@ -3968,17 +4035,17 @@ INSERT_FREE_LIST:
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L495
-	ldr	r3, .L495+4
+	ldr	r2, .L503
+	ldr	r3, .L503+4
 	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
 	ldmfd	sp!, {r3, pc}
-.L496:
+.L504:
 	.align	2
-.L495:
+.L503:
 	.word	.LANCHOR2
-	.word	-2004
+	.word	-2000
 	.fnend
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
 	.align	2
@@ -3988,10 +4055,10 @@ List_remove_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L502
+	ldr	ip, .L510
 	mov	r2, #6
 	mul	r1, r2, r1
-	ldr	r3, [ip, #-2028]
+	ldr	r3, [ip, #-2024]
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	add	r5, r3, r1
@@ -3999,7 +4066,7 @@ List_remove_node:
 	movw	r6, #65535
 	cmp	r5, r4
 	ldrh	r4, [r3, r1]
-	bne	.L498
+	bne	.L506
 	cmp	r4, r6
 	mlane	r2, r2, r4, r3
 	moveq	r2, #0
@@ -4007,33 +4074,33 @@ List_remove_node:
 	strne	r2, [r0, #0]
 	mvnne	r0, #0
 	strneh	r0, [r2, #2]	@ movhi
-	b	.L500
-.L498:
+	b	.L508
+.L506:
 	cmp	r4, r6
 	ldrh	r0, [r5, #2]
-	bne	.L501
+	bne	.L509
 	cmp	r0, r4
 	mulne	r2, r2, r0
 	mvnne	r0, #0
 	strneh	r0, [r3, r2]	@ movhi
-	b	.L500
-.L501:
+	b	.L508
+.L509:
 	mla	r4, r2, r4, r3
 	strh	r0, [r4, #2]	@ movhi
 	ldrh	r6, [r5, #2]
 	ldrh	r4, [r3, r1]
-	ldr	r0, [ip, #-2028]
+	ldr	r0, [ip, #-2024]
 	mul	r2, r2, r6
 	strh	r4, [r0, r2]	@ movhi
-.L500:
+.L508:
 	mvn	r2, #0
 	mov	r0, #0
 	strh	r2, [r3, r1]	@ movhi
 	strh	r2, [r5, #2]	@ movhi
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L503:
+.L511:
 	.align	2
-.L502:
+.L510:
 	.word	.LANCHOR2
 	.fnend
 	.size	List_remove_node, .-List_remove_node
@@ -4048,25 +4115,25 @@ List_pop_index_node:
 	.save {r4, lr}
 	ldr	r3, [r0, #0]
 	cmp	r3, #0
-	beq	.L509
-	ldr	r2, .L510
+	beq	.L517
+	ldr	r2, .L518
 	movw	lr, #65535
 	mov	ip, #6
-	ldr	r4, [r2, #-2028]
-	b	.L506
-.L508:
+	ldr	r4, [r2, #-2024]
+	b	.L514
+.L516:
 	mla	r3, ip, r2, r4
 	sub	r1, r1, #1
 	uxth	r1, r1
-.L506:
+.L514:
 	cmp	r1, #0
-	beq	.L507
+	beq	.L515
 	ldrh	r2, [r3, #0]
 	cmp	r2, lr
-	bne	.L508
-.L507:
+	bne	.L516
+.L515:
 	rsb	r4, r4, r3
-	ldr	r3, .L510+4
+	ldr	r3, .L518+4
 	mov	r4, r4, asr #1
 	mul	r4, r3, r4
 	uxth	r4, r4
@@ -4074,12 +4141,12 @@ List_pop_index_node:
 	bl	List_remove_node
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
-.L509:
+.L517:
 	movw	r0, #65535
 	ldmfd	sp!, {r4, pc}
-.L511:
+.L519:
 	.align	2
-.L510:
+.L518:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4092,39 +4159,39 @@ List_get_gc_head_node:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L518
-	ldr	r3, [r2, #-2024]
+	ldr	r2, .L526
+	ldr	r3, [r2, #-2020]
 	cmp	r3, #0
-	beq	.L517
-	ldr	r2, [r2, #-2028]
+	beq	.L525
+	ldr	r2, [r2, #-2024]
 	movw	r1, #65535
 	mov	ip, #6
-	b	.L514
-.L516:
+	b	.L522
+.L524:
 	mla	r3, ip, r3, r2
 	sub	r0, r0, #1
 	uxth	r0, r0
-.L514:
+.L522:
 	cmp	r0, #0
-	beq	.L515
+	beq	.L523
 	ldrh	r3, [r3, #0]
 	cmp	r3, r1
-	bne	.L516
+	bne	.L524
 	mov	r0, r1
 	bx	lr
-.L515:
+.L523:
 	rsb	r3, r2, r3
-	ldr	r0, .L518+4
+	ldr	r0, .L526+4
 	mov	r3, r3, asr #1
 	mul	r0, r0, r3
 	uxth	r0, r0
 	bx	lr
-.L517:
+.L525:
 	movw	r0, #65535
 	bx	lr
-.L519:
+.L527:
 	.align	2
-.L518:
+.L526:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4139,27 +4206,27 @@ List_update_data_list:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
-	ldr	r3, .L527
-	ldr	r2, .L527+4
+	ldr	r3, .L535
+	ldr	r2, .L535+4
 	ldrh	r2, [r3, r2]
 	cmp	r2, r0
-	beq	.L521
-	ldr	r2, .L527+8
+	beq	.L529
+	ldr	r2, .L535+8
 	ldrh	r2, [r3, r2]
 	cmp	r2, r0
-	beq	.L521
-	ldr	r2, .L527+12
+	beq	.L529
+	ldr	r2, .L535+12
 	ldrh	r2, [r3, r2]
 	cmp	r2, r0
-	beq	.L521
+	beq	.L529
 	mov	r5, #6
-	ldr	r2, [r3, #-2028]
+	ldr	r2, [r3, #-2024]
 	mul	r5, r5, r0
-	ldr	r0, [r3, #-2024]
+	ldr	r0, [r3, #-2020]
 	add	r1, r2, r5
 	cmp	r1, r0
-	beq	.L521
-	ldr	ip, [r3, #-2020]
+	beq	.L529
+	ldr	ip, [r3, #-2016]
 	mov	r3, r4, asl #1
 	ldrh	r0, [ip, r3]
 	ldrh	r3, [r1, #4]
@@ -4169,14 +4236,14 @@ List_update_data_list:
 	mvneq	r0, #0
 	movw	r1, #65535
 	cmp	r3, r1
-	bne	.L523
+	bne	.L531
 	ldrh	r1, [r2, r5]
 	cmp	r1, r3
-	beq	.L521
-.L523:
+	beq	.L529
+.L531:
 	mov	r1, #6
 	mla	r3, r1, r3, r2
-	ldr	r1, .L527+16
+	ldr	r1, .L535+16
 	rsb	r2, r2, r3
 	mov	r2, r2, asr #1
 	ldrh	r3, [r3, #4]
@@ -4188,30 +4255,30 @@ List_update_data_list:
 	ldrh	r2, [ip, r2]
 	mulne	r3, r3, r2
 	cmp	r0, r3
-	bcs	.L521
-	ldr	r0, .L527+20
+	bcs	.L529
+	ldr	r0, .L535+20
 	mov	r1, r4
 	bl	List_remove_node
-	ldr	r5, .L527
-	ldr	r3, .L527+24
+	ldr	r5, .L535
+	ldr	r3, .L535+24
 	mov	r0, r4
 	ldrh	r2, [r5, r3]
 	sub	r2, r2, #1
 	strh	r2, [r5, r3]	@ movhi
 	bl	INSERT_DATA_LIST
-.L521:
+.L529:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L528:
+.L536:
 	.align	2
-.L527:
+.L535:
 	.word	.LANCHOR2
-	.word	-2000
-	.word	-1952
-	.word	-1904
+	.word	-1996
+	.word	-1948
+	.word	-1900
 	.word	-1431655765
-	.word	.LANCHOR2-2024
-	.word	-2012
+	.word	.LANCHOR2-2020
+	.word	-2008
 	.fnend
 	.size	List_update_data_list, .-List_update_data_list
 	.align	2
@@ -4227,13 +4294,13 @@ ftl_map_blk_alloc_new_blk:
 	ldrh	r2, [r0, #10]
 	mov	r5, #0
 	ldr	r3, [r0, #12]
-	b	.L530
-.L535:
+	b	.L538
+.L543:
 	mov	r7, r3
 	add	r3, r3, #2
 	ldrh	r6, [r7, #0]
 	cmp	r6, #0
-	bne	.L531
+	bne	.L539
 	bl	FtlFreeSysBlkQueueOut
 	movw	r3, #65533
 	sub	r2, r0, #1
@@ -4241,15 +4308,15 @@ ftl_map_blk_alloc_new_blk:
 	strh	r0, [r7, #0]	@ movhi
 	uxth	r2, r2
 	cmp	r2, r3
-	bls	.L532
-	ldr	r2, .L536
-	movw	r3, #4042
-	ldr	r0, .L536+4
+	bls	.L540
+	ldr	r2, .L544
+	movw	r3, #4062
+	ldr	r0, .L544+4
 	ldrh	r2, [r2, r3]
 	bl	printk
-.L533:
-	b	.L533
-.L532:
+.L541:
+	b	.L541
+.L540:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	add	r3, r3, #1
@@ -4258,19 +4325,19 @@ ftl_map_blk_alloc_new_blk:
 	strh	r5, [r4, #0]	@ movhi
 	add	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	b	.L534
-.L531:
+	b	.L542
+.L539:
 	add	r5, r5, #1
 	uxth	r5, r5
-.L530:
+.L538:
 	cmp	r5, r2
-	bne	.L535
-.L534:
+	bne	.L543
+.L542:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L537:
+.L545:
 	.align	2
-.L536:
+.L544:
 	.word	.LANCHOR0
 	.word	.LC7
 	.fnend
@@ -4282,18 +4349,18 @@ select_l2p_ram_region:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L550
-	movw	r3, #3950
+	ldr	r2, .L558
+	movw	r3, #3954
 	stmfd	sp!, {r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	movw	r1, #65535
 	ldrh	r3, [r2, r3]
-	ldr	r2, .L550+4
-	ldr	ip, [r2, #-1856]
+	ldr	r2, .L558+4
+	ldr	ip, [r2, #-1852]
 	mov	r2, #0
 	mov	r0, r2
-	b	.L539
-.L541:
+	b	.L547
+.L549:
 	add	r2, r2, #12
 	add	r4, ip, r2
 	ldrh	r4, [r4, #-12]
@@ -4301,62 +4368,62 @@ select_l2p_ram_region:
 	ldmeqfd	sp!, {r4, r5, r6, r7, pc}
 	add	r0, r0, #1
 	uxth	r0, r0
-.L539:
+.L547:
 	cmp	r0, r3
-	bne	.L541
+	bne	.L549
 	mov	r1, #0
 	mov	r0, r3
 	mov	r5, #-2147483648
 	mov	r2, r1
-	b	.L542
-.L544:
+	b	.L550
+.L552:
 	add	r4, ip, r1
 	ldr	r4, [r4, #4]
 	cmp	r4, #0
-	blt	.L543
+	blt	.L551
 	cmp	r4, r5
 	movcc	r5, r4
 	movcc	r0, r2
-.L543:
+.L551:
 	add	r2, r2, #1
 	add	r1, r1, #12
 	uxth	r2, r2
-.L542:
+.L550:
 	cmp	r2, r3
-	bne	.L544
+	bne	.L552
 	cmp	r0, r3
 	ldmccfd	sp!, {r4, r5, r6, r7, pc}
-	ldr	r2, .L550+8
+	ldr	r2, .L558+8
 	mov	r0, r3
-	ldr	r1, .L550+4
+	ldr	r1, .L558+4
 	mvn	r4, #0
 	ldrh	r6, [r1, r2]
 	mov	r2, #0
 	mov	r1, r2
-	b	.L545
-.L547:
+	b	.L553
+.L555:
 	add	r5, ip, r2
 	ldr	r5, [r5, #4]
 	cmp	r5, r4
-	bcs	.L546
+	bcs	.L554
 	ldrh	r7, [ip, r2]
 	cmp	r7, r6
 	movne	r4, r5
 	movne	r0, r1
-.L546:
+.L554:
 	add	r1, r1, #1
 	add	r2, r2, #12
 	uxth	r1, r1
-.L545:
+.L553:
 	cmp	r1, r3
-	bne	.L547
+	bne	.L555
 	ldmfd	sp!, {r4, r5, r6, r7, pc}
-.L551:
+.L559:
 	.align	2
-.L550:
+.L558:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1852
+	.word	-1848
 	.fnend
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
@@ -4366,8 +4433,8 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L558
-	ldr	r2, .L558+4
+	ldr	r3, .L566
+	ldr	r2, .L566+4
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	ldrh	r1, [r2, r3]
@@ -4375,36 +4442,36 @@ FtlUpdateVaildLpn:
 	add	ip, r1, #1
 	mov	r1, r3
 	strh	ip, [r2, r3]	@ movhi
-	bhi	.L553
+	bhi	.L561
 	cmp	r0, #0
 	ldmeqfd	sp!, {r4, r5, pc}
-.L553:
-	ldr	r0, .L558+8
+.L561:
+	ldr	r0, .L566+8
 	mov	r3, #0
 	strh	r3, [r2, r1]	@ movhi
-	movw	r1, #3852
-	str	r3, [r2, #-1848]
+	mov	r1, #3856
+	str	r3, [r2, #-1844]
 	movw	ip, #65535
 	ldrh	r4, [r0, r1]
-	ldr	r1, [r2, #-2020]
-	ldr	r2, .L558+4
-	b	.L555
-.L557:
+	ldr	r1, [r2, #-2016]
+	ldr	r2, .L566+4
+	b	.L563
+.L565:
 	ldrh	r0, [r1], #2
 	add	r3, r3, #1
 	cmp	r0, ip
 	uxth	r3, r3
-	ldrne	r5, [r2, #-1848]
+	ldrne	r5, [r2, #-1844]
 	addne	r0, r0, r5
-	strne	r0, [r2, #-1848]
-.L555:
+	strne	r0, [r2, #-1844]
+.L563:
 	cmp	r3, r4
-	bne	.L557
+	bne	.L565
 	ldmfd	sp!, {r4, r5, pc}
-.L559:
+.L567:
 	.align	2
-.L558:
-	.word	-1850
+.L566:
+	.word	-1846
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -4417,21 +4484,21 @@ ftl_set_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L564
+	ldr	r3, .L572
 	mov	r2, r0, lsr #5
 	cmp	r1, #0
 	and	r0, r0, #31
 	uxth	r2, r2
 	mov	ip, #1
-	ldr	r3, [r3, #-1844]
+	ldr	r3, [r3, #-1840]
 	ldr	r1, [r3, r2, asl #2]
 	orrne	r0, r1, ip, asl r0
 	biceq	r0, r1, ip, asl r0
 	str	r0, [r3, r2, asl #2]
 	bx	lr
-.L565:
+.L573:
 	.align	2
-.L564:
+.L572:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -4443,17 +4510,17 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L567
+	ldr	r3, .L575
 	mov	r2, r0, lsr #5
 	and	r0, r0, #31
-	ldr	r3, [r3, #-1844]
+	ldr	r3, [r3, #-1840]
 	ldr	r3, [r3, r2, asl #2]
 	mov	r0, r3, lsr r0
 	and	r0, r0, #1
 	bx	lr
-.L568:
+.L576:
 	.align	2
-.L567:
+.L575:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -4464,16 +4531,16 @@ ftl_sb_update_avl_pages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	ip, .L576
+	ldr	ip, .L584
 	mov	r3, #0
 	strh	r3, [r0, #4]	@ movhi
-	movw	r3, #3844
+	movw	r3, #3848
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldrh	r3, [ip, r3]
 	movw	ip, #65535
-	b	.L570
-.L572:
+	b	.L578
+.L580:
 	add	r4, r0, r2, asl #1
 	add	r2, r2, #1
 	ldrh	r4, [r4, #16]
@@ -4482,18 +4549,18 @@ ftl_sb_update_avl_pages:
 	ldrneh	r4, [r0, #4]
 	addne	r4, r4, #1
 	strneh	r4, [r0, #4]	@ movhi
-.L570:
+.L578:
 	cmp	r2, r3
-	bcc	.L572
-	ldr	ip, .L576
-	movw	r2, #3912
+	bcc	.L580
+	ldr	ip, .L584
+	movw	r2, #3916
 	movw	r4, #65535
 	mvn	r1, r1
 	ldrh	r5, [ip, r2]
 	mov	ip, r0
 	mov	r2, #0
-	b	.L573
-.L575:
+	b	.L581
+.L583:
 	ldrh	r6, [ip, #16]
 	add	r2, r2, #1
 	add	ip, ip, #2
@@ -4503,13 +4570,13 @@ ftl_sb_update_avl_pages:
 	addne	r6, r5, r6
 	addne	r6, r6, r1
 	strneh	r6, [r0, #4]	@ movhi
-.L573:
+.L581:
 	cmp	r2, r3
-	bne	.L575
+	bne	.L583
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L577:
+.L585:
 	.align	2
-.L576:
+.L584:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -4524,18 +4591,18 @@ make_superblock:
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r4, r0
 	mov	r5, #0
-	ldr	r6, .L584
+	ldr	r6, .L592
 	strh	r5, [r0, #4]	@ movhi
-	movw	r8, #3844
+	movw	r8, #3848
 	strb	r5, [r4, #7]
 	mvn	r7, #0
-	b	.L579
-.L581:
+	b	.L587
+.L589:
 	add	r3, r6, r5
 	ldrh	r1, [r4, #0]
 	add	sl, r5, #8
 	add	r5, r5, #1
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldrb	r0, [r3, #3874]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	sl, sl, asl #1
 	uxth	r5, r5
@@ -4547,42 +4614,40 @@ make_superblock:
 	ldreqb	r3, [r4, #7]	@ zero_extendqisi2
 	addeq	r3, r3, #1
 	streqb	r3, [r4, #7]
-.L579:
+.L587:
 	ldrh	r2, [r6, r8]
-	ldr	r3, .L584
+	ldr	r3, .L592
 	cmp	r2, r5
-	bhi	.L581
-	movw	r1, #3912
+	bhi	.L589
+	movw	r1, #3916
 	ldrb	r2, [r4, #7]	@ zero_extendqisi2
 	ldrh	r1, [r3, r1]
-	ldr	r3, [r3, #3836]
 	mul	r2, r1, r2
 	strh	r2, [r4, #4]	@ movhi
 	mov	r2, #0
-	cmp	r3, r2
 	strb	r2, [r4, #9]
-	beq	.L582
-	ldr	r2, .L584+4
-	ldrh	r3, [r4, #0]
-	ldr	r2, [r2, #-2084]
-	mov	r3, r3, asl #1
+	ldr	r2, [r3, #3840]
+	cmp	r2, #0
+	beq	.L590
+	ldrh	r1, [r4, #0]
+	ldr	r2, [r3, #4048]
+	mov	r3, r1, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #59
 	movls	r3, #1
 	strlsb	r3, [r4, #9]
-.L582:
-	ldr	r3, .L584
+.L590:
+	ldr	r3, .L592
 	mov	r0, #0
 	ldrb	r3, [r3, #852]	@ zero_extendqisi2
 	cmp	r3, #0
 	movne	r3, #1
 	strneb	r3, [r4, #9]
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L585:
+.L593:
 	.align	2
-.L584:
+.L592:
 	.word	.LANCHOR0
-	.word	.LANCHOR2
 	.fnend
 	.size	make_superblock, .-make_superblock
 	.align	2
@@ -4597,15 +4662,15 @@ update_multiplier_value:
 	mov	r4, #0
 	mov	r7, r0
 	mov	r5, r4
-	ldr	r6, .L591
-	movw	sl, #3844
-	movw	r8, #3912
-	b	.L587
-.L589:
+	ldr	r6, .L599
+	movw	sl, #3848
+	movw	r8, #3916
+	b	.L595
+.L597:
 	add	r3, r6, r5
 	mov	r1, r7
 	add	r5, r5, #1
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldrb	r0, [r3, #3874]	@ zero_extendqisi2
 	bl	V2P_block
 	uxth	r5, r5
 	bl	FtlBbmIsBadBlock
@@ -4613,27 +4678,27 @@ update_multiplier_value:
 	ldreqh	r3, [r6, r8]
 	addeq	r4, r4, r3
 	uxtheq	r4, r4
-.L587:
+.L595:
 	ldrh	r3, [r6, sl]
 	cmp	r3, r5
-	bhi	.L589
+	bhi	.L597
 	cmp	r4, #0
-	beq	.L590
+	beq	.L598
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r4, r0
-.L590:
-	ldr	r3, .L591+4
+.L598:
+	ldr	r3, .L599+4
 	mov	r2, #6
 	mov	r0, #0
-	ldr	r3, [r3, #-2028]
+	ldr	r3, [r3, #-2024]
 	mla	r7, r2, r7, r3
 	strh	r4, [r7, #4]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L592:
+.L600:
 	.align	2
-.L591:
+.L599:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -4646,24 +4711,26 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L596
-	ldr	r0, [r3, #-2008]
+	ldr	r3, .L604
+	ldr	r0, [r3, #-2004]
 	cmp	r0, #0
 	bxeq	lr
-	ldr	r2, [r3, #-2028]
-	rsb	r0, r2, r0
-	ldr	r2, .L596+4
+	ldr	r3, [r3, #-2024]
+	ldr	r2, .L604+4
+	rsb	r0, r3, r0
+	ldr	r3, .L604+8
 	mov	r0, r0, asr #1
-	mul	r0, r2, r0
-	ldr	r2, [r3, #-2084]
-	uxth	r0, r0
-	mov	r3, r0, asl #1
+	ldr	r2, [r2, #4048]
+	mul	r3, r3, r0
+	uxth	r3, r3
+	mov	r3, r3, asl #1
 	ldrh	r0, [r2, r3]
 	bx	lr
-.L597:
+.L605:
 	.align	2
-.L596:
+.L604:
 	.word	.LANCHOR2
+	.word	.LANCHOR0
 	.word	-1431655765
 	.fnend
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
@@ -4674,13 +4741,13 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L605
+	ldr	r2, .L613
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
-	ldr	r3, [r2, #-2008]
+	ldr	r3, [r2, #-2004]
 	cmp	r3, #0
-	beq	.L604
-	ldr	r1, .L605+4
+	beq	.L612
+	ldr	r1, .L613+4
 	mov	ip, #7
 	mov	r5, #6
 	movw	r4, #65535
@@ -4689,40 +4756,41 @@ GetFreeBlockMaxEraseCount:
 	mov	r1, r1, asr #3
 	cmp	r0, r1
 	uxthgt	r0, r1
-	ldr	r1, [r2, #-2028]
-	ldr	r2, .L605+8
+	ldr	r1, [r2, #-2024]
+	ldr	r2, .L613+8
 	rsb	r3, r1, r3
 	mov	r3, r3, asr #1
 	mul	r3, r2, r3
 	mov	r2, #0
 	uxth	r3, r3
-	b	.L601
-.L603:
+	b	.L609
+.L611:
 	mul	ip, r5, r3
 	ldrh	ip, [r1, ip]
 	cmp	ip, r4
-	beq	.L602
+	beq	.L610
 	add	r2, r2, #1
 	mov	r3, ip
 	uxth	r2, r2
-.L601:
+.L609:
 	cmp	r2, r0
-	bne	.L603
-.L602:
-	ldr	r2, .L605
+	bne	.L611
+.L610:
+	ldr	r2, .L613+12
 	mov	r3, r3, asl #1
-	ldr	r2, [r2, #-2084]
+	ldr	r2, [r2, #4048]
 	ldrh	r0, [r2, r3]
 	ldmfd	sp!, {r4, r5, pc}
-.L604:
+.L612:
 	mov	r0, r3
 	ldmfd	sp!, {r4, r5, pc}
-.L606:
+.L614:
 	.align	2
-.L605:
+.L613:
 	.word	.LANCHOR2
-	.word	-2004
+	.word	-2000
 	.word	-1431655765
+	.word	.LANCHOR0
 	.fnend
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
 	.align	2
@@ -4735,27 +4803,27 @@ FtlPrintInfo2buf:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	sl, r0
-	ldr	r5, .L617
+	ldr	r6, .L625
 	add	r4, sl, #12
 	.pad #32
 	sub	sp, sp, #32
-	ldr	r1, .L617+4
+	ldr	r1, .L625+4
 	bl	strcpy
 	mov	r0, r4
-	ldr	r1, .L617+8
-	ldr	r2, [r5, #3048]
+	ldr	r1, .L625+8
+	ldr	r2, [r6, #3048]
 	bl	sprintf
-	ldr	r1, .L617+12
-	ldr	r2, [r5, #3928]
+	ldr	r1, .L625+12
+	ldr	r2, [r6, #3932]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+16
+	ldr	r3, .L625+16
 	ldr	r3, [r3, #2996]
 	cmp	r3, #1
 	add	r4, r4, r0
-	rsbne	r0, sl, r4
-	bne	.L609
+	bne	.L621
+.L616:
 	add	r0, sp, #16
 	add	r1, sp, #20
 	add	r2, sp, #24
@@ -4764,467 +4832,469 @@ FtlPrintInfo2buf:
 	ldr	r3, [sp, #24]
 	ldr	r2, [sp, #16]
 	mov	r0, r4
-	ldr	r1, .L617+20
+	ldr	r1, .L625+20
 	str	r3, [sp, #0]
 	ldr	r3, [sp, #28]
-	ldr	r8, .L617+24
+	ldr	r5, .L625+24
+	ldr	r7, .L625+28
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #20]
 	bl	sprintf
-	ldr	r1, .L617+28
-	add	r6, r4, r0
-	ldr	r4, .L617+32
-	mov	r0, r6
-	add	r6, r6, #10
+	ldr	r1, .L625+32
+	ldr	r8, .L625+36
+	add	r4, r4, r0
+	mov	r0, r4
+	add	r4, r4, #10
 	bl	strcpy
-	ldr	r2, [r5, #3972]
-	mov	r0, r6
-	ldr	r1, .L617+36
+	ldr	r1, .L625+40
+	mov	r0, r4
+	ldr	r2, [r6, #3976]
 	bl	sprintf
-	ldr	r1, .L617+40
-	ldr	r2, [r4, #-1848]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+44
+	ldr	r2, [r5, #-1844]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+44
-	ldr	r2, [r4, #-1840]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+48
+	ldr	r2, [r5, #-1836]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+48
-	ldr	r2, [r4, #-1836]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+52
+	ldr	r2, [r5, #-1832]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+52
-	ldr	r2, [r4, #-1832]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+56
+	ldr	r2, [r5, #-1828]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+56
-	ldr	r2, [r4, #-1828]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+60
+	ldr	r2, [r5, #-1824]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+60
-	ldr	r2, [r4, #-1824]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+64
+	ldr	r2, [r5, #-1820]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+64
-	ldr	r2, [r4, #-1820]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+68
+	ldr	r2, [r5, #-1816]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r2, [r4, #-1816]
-	ldr	r1, .L617+68
+	ldr	r2, [r5, #-1812]
+	ldr	r1, .L625+72
 	mov	r2, r2, lsr #11
-	add	r6, r6, r0
-	mov	r0, r6
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r2, [r4, #-1812]
-	ldr	r1, .L617+72
+	ldr	r2, [r5, #-1808]
+	ldr	r1, .L625+76
 	mov	r2, r2, lsr #11
-	add	r6, r6, r0
-	mov	r0, r6
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+76
-	ldr	r2, [r4, #-1808]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+80
+	ldr	r2, [r5, #-1804]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+80
-	ldr	r2, [r4, #-1804]
-	add	r6, r6, r0
-	mov	r0, r6
+	ldr	r1, .L625+84
+	ldr	r2, [r5, #-1800]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	add	r6, r6, r0
+	add	r4, r4, r0
 	bl	FtlBbtCalcTotleCnt
-	movw	r2, #3982
-	ldr	r1, .L617+84
-	ldrh	r2, [r5, r2]
+	movw	r2, #3986
+	ldr	r1, .L625+88
+	ldrh	r2, [r6, r2]
 	mov	r3, r0
-	mov	r0, r6
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+88
-	add	r7, r6, r0
-	ldr	r6, .L617+92
-	mov	r0, r7
-	ldrh	r2, [r4, r6]
+	ldr	r1, .L625+92
+	ldrh	r2, [r5, r7]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+96
-	ldr	r2, [r4, #-1800]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+96
+	ldr	r2, [r5, #-1796]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+100
-	ldr	r2, [r4, #-1796]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+100
+	ldr	r2, [r5, #-1792]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+104
-	ldr	r2, [r4, #-1792]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+104
+	ldr	r2, [r5, #-1788]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+108
-	ldr	r2, [r4, #-2080]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+108
+	ldr	r2, [r6, #4052]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+112
-	ldr	r2, [r4, #-1788]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+112
+	ldr	r2, [r5, #-1784]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+116
-	ldr	r2, [r4, #-1784]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+116
+	ldr	r2, [r5, #-1780]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+120
-	ldr	r1, .L617+124
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+120
+	ldr	r1, .L625+124
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+128
-	ldr	r1, .L617+132
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+128
+	ldr	r1, .L625+132
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r2, [r5, #3952]
-	ldr	r1, .L617+136
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+136
+	ldr	r2, [r6, #3956]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r2, [r5, #3944]
-	ldr	r1, .L617+140
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+140
+	ldr	r2, [r6, #3948]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r2, [r5, #3840]
-	ldr	r1, .L617+144
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+144
+	ldr	r2, [r6, #3844]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	movw	r3, #4042
-	ldrh	r2, [r5, r3]
-	ldr	r1, .L617+148
-	add	r7, r7, r0
-	mov	r0, r7
+	movw	r3, #4062
+	ldrh	r2, [r6, r3]
+	ldr	r1, .L625+148
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	mov	r3, #3856
+	ldrh	r2, [r6, r3]
+	ldr	r1, .L625+152
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	movw	r3, #3852
+	ldr	r3, .L625+156
+	ldr	r1, .L625+160
 	ldrh	r2, [r5, r3]
-	ldr	r1, .L617+152
-	add	r7, r7, r0
-	mov	r0, r7
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+156
-	ldr	r1, .L617+160
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+164
+	ldr	r2, [r6, #3860]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r2, [r5, #3856]
-	ldr	r1, .L617+164
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+168
+	ldr	r1, .L625+172
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+168
-	ldr	r1, .L617+172
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	movw	r3, #3980
+	ldrh	r2, [r6, r3]
+	ldr	r1, .L625+176
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	movw	r3, #3976
+	ldr	r3, .L625+180
+	ldr	r1, .L625+184
 	ldrh	r2, [r5, r3]
-	ldr	r1, .L617+176
-	add	r7, r7, r0
-	mov	r0, r7
-	bl	sprintf
-	ldr	r3, .L617+180
-	ldr	r1, .L617+184
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+188
-	ldrb	r2, [r4, #-1994]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+188
+	ldrb	r2, [r5, #-1990]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldrh	r2, [r4, r8]
-	ldr	r1, .L617+192
-	add	r7, r7, r0
-	mov	r0, r7
+	ldrh	r2, [r5, r8]
+	ldr	r1, .L625+192
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+196
-	ldrb	r2, [r4, #-1992]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+196
+	ldrb	r2, [r5, #-1988]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+200
-	ldr	r1, .L617+204
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+200
+	ldr	r1, .L625+204
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldrh	r3, [r4, r8]
-	ldr	r2, [r4, #-2020]
+	ldrh	r3, [r5, r8]
+	ldr	r2, [r5, #-2016]
 	add	r8, r8, #48
-	ldr	r1, .L617+208
+	ldr	r1, .L625+208
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+212
-	ldr	r1, .L617+216
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+212
+	ldr	r1, .L625+216
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+220
-	ldrb	r2, [r4, #-1946]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+220
+	ldrb	r2, [r5, #-1942]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldrh	r2, [r4, r8]
-	ldr	r1, .L617+224
-	add	r7, r7, r0
-	mov	r0, r7
+	ldrh	r2, [r5, r8]
+	ldr	r1, .L625+224
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+228
-	ldrb	r2, [r4, #-1944]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+228
+	ldrb	r2, [r5, #-1940]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+232
-	ldr	r1, .L617+236
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+232
+	ldr	r1, .L625+236
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldrh	r3, [r4, r8]
-	ldr	r2, [r4, #-2020]
+	ldrh	r3, [r5, r8]
+	ldr	r2, [r5, #-2016]
 	add	r8, r8, #188
-	ldr	r1, .L617+240
+	ldr	r1, .L625+240
 	mov	r3, r3, asl #1
 	ldrh	r2, [r2, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+244
-	ldr	r1, .L617+248
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+244
+	ldr	r1, .L625+248
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+252
-	ldrb	r2, [r4, #-1898]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+252
+	ldrb	r2, [r5, #-1894]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+256
-	ldr	r1, .L617+260
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+256
+	ldr	r1, .L625+260
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+264
-	ldrb	r2, [r4, #-1896]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+264
+	ldrb	r2, [r5, #-1892]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+268
-	ldr	r1, .L617+272
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+268
+	ldr	r1, .L625+272
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+276
-	ldr	r1, .L617+280
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+276
+	ldr	r1, .L625+280
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+284
-	ldrb	r2, [r4, #-1758]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+284
+	ldrb	r2, [r5, #-1754]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+288
-	ldrh	r2, [r4, r8]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+288
+	ldrh	r2, [r5, r8]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+292
-	ldrb	r2, [r4, #-1756]	@ zero_extendqisi2
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+292
+	ldrb	r2, [r5, #-1752]	@ zero_extendqisi2
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+296
-	ldr	r1, .L617+300
-	ldrh	r2, [r4, r3]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r3, .L625+296
+	ldr	r1, .L625+300
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, [r4, #-1628]
-	ldr	r3, [r5, #3836]
-	ldr	r2, [r4, #-1716]
+	ldr	r1, [r5, #-1624]
+	ldr	r3, [r6, #3840]
+	ldr	r2, [r5, #-1712]
 	str	r1, [sp, #0]
-	ldr	r1, [r4, #-1636]
+	ldr	r1, [r5, #-1632]
 	orr	r2, r3, r2, asl #8
 	str	r1, [sp, #4]
-	ldr	r1, .L617+304
-	ldr	r3, [r4, #-1632]
-	add	r7, r7, r0
-	mov	r0, r7
+	ldr	r1, .L625+304
+	ldr	r3, [r5, #-1628]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+308
-	ldr	r2, [r4, #-1640]
-	add	r5, r7, r0
-	mov	r0, r5
+	ldr	r1, .L625+308
+	ldr	r2, [r5, #-1636]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+312
-	ldr	r2, [r4, #-1616]
-	add	r5, r5, r0
-	mov	r0, r5
+	ldr	r1, .L625+312
+	ldr	r2, [r5, #-1612]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+316
-	ldr	r1, .L617+320
-	ldrh	r2, [r4, r3]
-	add	r5, r5, r0
-	mov	r0, r5
+	ldr	r3, .L625+316
+	ldr	r1, .L625+320
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+324
-	ldr	r1, .L617+328
-	ldrh	r2, [r4, r3]
-	add	r5, r5, r0
-	mov	r0, r5
+	ldr	r3, .L625+324
+	ldr	r1, .L625+328
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L617+332
-	ldr	r2, [r4, #-1196]
-	add	r5, r5, r0
-	mov	r0, r5
+	ldr	r1, .L625+332
+	ldr	r2, [r5, #-1192]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L617+336
-	ldr	r1, .L617+340
-	ldrh	r2, [r4, r3]
-	add	r5, r5, r0
-	mov	r0, r5
+	ldr	r3, .L625+336
+	ldr	r1, .L625+340
+	ldrh	r2, [r5, r3]
+	add	r4, r4, r0
+	mov	r0, r4
 	bl	sprintf
-	add	r5, r5, r0
+	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r1, .L617+344
+	ldr	r1, .L625+344
 	mov	r2, r0
-	mov	r0, r5
+	mov	r0, r4
 	bl	sprintf
-	add	r5, r5, r0
-	ldrh	r0, [r4, r6]
+	add	r4, r4, r0
+	ldrh	r0, [r5, r7]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r1, .L617+348
+	ldr	r1, .L625+348
 	mov	r2, r0
-	mov	r0, r5
+	mov	r0, r4
 	bl	sprintf
-	ldrh	r3, [r4, r8]
+	ldrh	r3, [r5, r8]
 	movw	r2, #65535
 	cmp	r3, r2
-	add	r5, r5, r0
-	beq	.L610
-	ldr	r2, [r4, #-2020]
+	add	r4, r4, r0
+	beq	.L618
+	ldr	r2, [r5, #-2016]
 	mov	r3, r3, asl #1
-	mov	r0, r5
-	ldr	r1, .L617+352
+	mov	r0, r4
+	ldr	r1, .L625+352
 	ldrh	r2, [r2, r3]
 	bl	sprintf
-	add	r5, r5, r0
-.L610:
+	add	r4, r4, r0
+.L618:
 	mov	r0, #0
-	ldr	r4, .L617+32
+	ldr	r6, .L625+24
 	bl	List_get_gc_head_node
-	mov	r6, #0
-	movw	r8, #65535
-	mov	r9, #6
+	ldr	r8, .L625
+	mov	r5, #0
+	movw	r9, #65535
 	uxth	r3, r0
-.L612:
-	cmp	r3, r8
-	beq	.L611
-	ldr	r1, [r4, #-2020]
+.L620:
+	cmp	r3, r9
+	beq	.L619
+	ldr	r1, [r6, #-2016]
 	mov	r2, r3, asl #1
-	mul	r7, r9, r3
-	mov	r0, r5
+	mov	r7, #6
+	mov	r0, r4
+	mul	r7, r7, r3
 	ldrh	r1, [r1, r2]
 	str	r1, [sp, #0]
-	ldr	r1, [r4, #-2028]
+	ldr	r1, [r6, #-2024]
 	add	r1, r1, r7
 	ldrh	r1, [r1, #4]
 	str	r1, [sp, #4]
-	ldr	r1, [r4, #-2084]
+	ldr	r1, [r8, #4048]
 	ldrh	r2, [r1, r2]
-	ldr	r1, .L617+356
+	ldr	r1, .L625+356
 	str	r2, [sp, #8]
-	mov	r2, r6
+	mov	r2, r5
 	bl	sprintf
-	add	r6, r6, #1
-	ldr	r3, [r4, #-2028]
-	cmp	r6, #16
+	add	r5, r5, #1
+	ldr	r3, [r6, #-2024]
+	cmp	r5, #16
 	ldrh	r3, [r3, r7]
-	add	r5, r5, r0
-	bne	.L612
-.L611:
-	ldr	r6, .L617+32
-	mov	r4, #0
-	movw	r8, #65535
-	mov	r9, #6
-	ldr	r2, [r6, #-2008]
-	ldr	r3, [r6, #-2028]
+	add	r4, r4, r0
+	bne	.L620
+.L619:
+	ldr	r6, .L625+24
+	mov	r5, #0
+	ldr	r8, .L625
+	movw	r9, #65535
+	ldr	r2, [r6, #-2004]
+	ldr	r3, [r6, #-2024]
 	rsb	r3, r3, r2
-	ldr	r2, .L617+360
+	ldr	r2, .L625+360
 	mov	r3, r3, asr #1
 	mul	r3, r2, r3
 	uxth	r3, r3
-.L614:
-	cmp	r3, r8
-	beq	.L613
-	mul	r7, r9, r3
-	ldr	r2, [r6, #-2028]
-	mov	r0, r5
+.L622:
+	cmp	r3, r9
+	beq	.L621
+	mov	r7, #6
+	ldr	r2, [r6, #-2024]
+	mul	r7, r7, r3
+	mov	r0, r4
 	add	r2, r2, r7
 	ldrh	r2, [r2, #4]
 	str	r2, [sp, #0]
 	mov	r2, r3, asl #1
-	ldr	r1, [r6, #-2084]
+	ldr	r1, [r8, #4048]
 	ldrh	r2, [r1, r2]
-	ldr	r1, .L617+364
+	ldr	r1, .L625+364
 	str	r2, [sp, #4]
-	mov	r2, r4
+	mov	r2, r5
 	bl	sprintf
-	add	r4, r4, #1
-	ldr	r3, [r6, #-2028]
-	cmp	r4, #4
+	add	r5, r5, #1
+	ldr	r3, [r6, #-2024]
+	cmp	r5, #4
 	ldrh	r3, [r3, r7]
-	add	r5, r5, r0
-	bne	.L614
-.L613:
-	rsb	r0, sl, r5
-.L609:
+	add	r4, r4, r0
+	bne	.L622
+.L621:
+	rsb	r0, sl, r4
 	add	sp, sp, #32
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L618:
+.L626:
 	.align	2
-.L617:
+.L625:
 	.word	.LANCHOR0
 	.word	.LC8
 	.word	.LC9
 	.word	.LC10
 	.word	.LANCHOR1
 	.word	.LC11
+	.word	.LANCHOR2
 	.word	-2000
 	.word	.LC12
-	.word	.LANCHOR2
+	.word	-1996
 	.word	.LC13
 	.word	.LC14
 	.word	.LC15
@@ -5239,68 +5309,67 @@ FtlPrintInfo2buf:
 	.word	.LC24
 	.word	.LC25
 	.word	.LC26
-	.word	-2004
 	.word	.LC27
 	.word	.LC28
 	.word	.LC29
 	.word	.LC30
 	.word	.LC31
 	.word	.LC32
-	.word	-2046
+	.word	-2042
 	.word	.LC33
-	.word	-2048
+	.word	-2044
 	.word	.LC34
 	.word	.LC35
 	.word	.LC36
 	.word	.LC37
 	.word	.LC38
 	.word	.LC39
-	.word	-1780
+	.word	-1776
 	.word	.LC40
 	.word	.LC41
-	.word	-1776
+	.word	-1772
 	.word	.LC42
 	.word	.LC43
-	.word	-1998
+	.word	-1994
 	.word	.LC44
 	.word	.LC45
 	.word	.LC46
 	.word	.LC47
-	.word	-1996
+	.word	-1992
 	.word	.LC48
 	.word	.LC49
-	.word	-1950
+	.word	-1946
 	.word	.LC50
 	.word	.LC51
 	.word	.LC52
 	.word	.LC53
-	.word	-1948
+	.word	-1944
 	.word	.LC54
 	.word	.LC55
-	.word	-1902
+	.word	-1898
 	.word	.LC56
 	.word	.LC57
-	.word	-1904
+	.word	-1900
 	.word	.LC58
 	.word	.LC59
-	.word	-1900
+	.word	-1896
 	.word	.LC60
-	.word	-1762
+	.word	-1758
 	.word	.LC61
 	.word	.LC62
 	.word	.LC63
 	.word	.LC64
-	.word	-1760
+	.word	-1756
 	.word	.LC65
 	.word	.LC66
 	.word	.LC67
 	.word	.LC68
-	.word	-1200
+	.word	-1196
 	.word	.LC69
-	.word	-1198
+	.word	-1194
 	.word	.LC70
 	.word	.LC71
-	.word	-1192
+	.word	-1188
 	.word	.LC72
 	.word	.LC73
 	.word	.LC74
@@ -5320,8 +5389,8 @@ ftl_proc_ftl_read:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
-	ldr	r1, .L620
-	ldr	r2, .L620+4
+	ldr	r1, .L628
+	ldr	r2, .L628+4
 	bl	sprintf
 	add	r5, r4, r0
 	mov	r0, r5
@@ -5329,9 +5398,9 @@ ftl_proc_ftl_read:
 	add	r0, r5, r0
 	rsb	r0, r4, r0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L621:
+.L629:
 	.align	2
-.L620:
+.L628:
 	.word	.LC78
 	.word	.LC79
 	.fnend
@@ -5343,85 +5412,85 @@ GetSwlReplaceBlock:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L647
+	ldr	r3, .L655
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r1, [r3, #-1792]
-	ldr	r2, [r3, #-1784]
+	ldr	r1, [r3, #-1788]
+	ldr	r2, [r3, #-1780]
 	cmp	r1, r2
-	bcs	.L623
-	ldr	r0, .L647+4
-	movw	r1, #3852
+	bcs	.L631
+	ldr	r0, .L655+4
+	mov	r1, #3856
 	mov	r2, #0
-	str	r2, [r3, #-1800]
+	str	r2, [r3, #-1796]
 	ldrh	r1, [r0, r1]
-	ldr	r0, [r3, #-2084]
-	b	.L624
-.L625:
+	ldr	r0, [r0, #4048]
+	b	.L632
+.L633:
 	ldrh	lr, [r0], #2
 	add	r2, r2, #1
-	ldr	ip, [r3, #-1800]
+	ldr	ip, [r3, #-1796]
 	add	ip, lr, ip
-	str	ip, [r3, #-1800]
-.L624:
+	str	ip, [r3, #-1796]
+.L632:
 	cmp	r2, r1
-	ldr	r4, .L647
-	bcc	.L625
-	ldr	r5, [r4, #-1800]
+	ldr	r4, .L655
+	bcc	.L633
+	ldr	r5, [r4, #-1796]
 	mov	r0, r5
 	bl	__aeabi_uidiv
-	ldr	r2, .L647+4
-	movw	r3, #3902
+	ldr	r2, .L655+4
+	movw	r3, #3906
 	ldrh	r1, [r2, r3]
-	str	r0, [r4, #-1792]
-	ldr	r0, [r4, #-1796]
+	str	r0, [r4, #-1788]
+	ldr	r0, [r4, #-1792]
 	rsb	r0, r0, r5
 	bl	__aeabi_uidiv
-	str	r0, [r4, #-1800]
-	b	.L626
-.L623:
-	ldr	r2, [r3, #-1788]
+	str	r0, [r4, #-1796]
+	b	.L634
+.L631:
+	ldr	r2, [r3, #-1784]
 	cmp	r1, r2
-	bls	.L626
-	add	r2, r2, #1
-	ldr	r4, .L647+4
-	str	r2, [r3, #-1788]
-	movw	ip, #3852
-	mov	r2, #0
-	b	.L627
-.L628:
-	ldr	r0, [r3, #-2084]
-	mov	r1, r2, asl #1
+	bls	.L634
 	add	r2, r2, #1
-	ldrh	r5, [r0, r1]
-	add	r5, r5, #1
-	strh	r5, [r0, r1]	@ movhi
-.L627:
-	ldrh	r1, [r4, ip]
-	cmp	r2, r1
-	bcc	.L628
-.L626:
-	ldr	r3, .L647
-	ldr	r6, [r3, #-1784]
-	ldr	r5, [r3, #-1792]
+	mov	ip, #3856
+	str	r2, [r3, #-1784]
+	mov	r3, #0
+	ldr	r2, .L655+4
+	b	.L635
+.L636:
+	ldr	r0, [r2, #4048]
+	mov	r1, r3, asl #1
+	add	r3, r3, #1
+	ldrh	r4, [r0, r1]
+	add	r4, r4, #1
+	strh	r4, [r0, r1]	@ movhi
+.L635:
+	ldrh	r1, [r2, ip]
+	cmp	r3, r1
+	bcc	.L636
+.L634:
+	ldr	r3, .L655
+	ldr	r6, [r3, #-1780]
+	ldr	r5, [r3, #-1788]
 	add	r2, r6, #256
 	cmp	r2, r5
 	mov	r2, r3
-	bls	.L629
-	ldr	r3, [r3, #-1788]
+	bls	.L637
+	ldr	r3, [r3, #-1784]
 	add	r1, r6, #768
 	cmp	r1, r3
-	bls	.L629
-	ldr	r3, .L647+4
-	ldr	r3, [r3, #3836]
+	bls	.L637
+	ldr	r3, .L655+4
+	ldr	r3, [r3, #3840]
 	cmp	r3, #0
-	beq	.L646
+	beq	.L654
 	cmp	r6, #30
-	bhi	.L646
-.L629:
-	ldr	r3, .L647+8
+	bhi	.L654
+.L637:
+	ldr	r3, .L655+8
 	ldrh	r0, [r2, r3]
 	add	r0, r0, r0, asl #1
 	ubfx	r0, r0, #2, #16
@@ -5429,107 +5498,108 @@ GetSwlReplaceBlock:
 	add	r3, r6, #64
 	cmp	r0, r3
 	mov	r8, r0
-	bcs	.L631
+	bcs	.L639
 	cmp	r6, #30
-	bhi	.L646
-.L631:
-	ldr	r2, .L647
-	ldr	r3, [r2, #-2024]
+	bhi	.L654
+.L639:
+	ldr	r1, .L655
+	ldr	r3, [r1, #-2020]
 	cmp	r3, #0
-	beq	.L646
-	ldr	r0, .L647+4
-	movw	r1, #3852
+	beq	.L654
+	ldr	r2, .L655+4
+	mov	r0, #3856
 	movw	r7, #65535
 	mov	r4, r7
 	mov	fp, r7
-	ldrh	sl, [r0, r1]
-	ldr	r0, [r2, #-2028]
-	ldr	r1, [r2, #-2084]
+	ldrh	sl, [r2, r0]
+	ldr	r0, [r1, #-2024]
+	ldr	r1, [r2, #4048]
 	mov	r2, #0
-	b	.L632
-.L635:
+	b	.L640
+.L643:
 	add	r2, r2, #1
 	uxth	r2, r2
 	cmp	r2, sl
-	bhi	.L646
+	bhi	.L654
 	ldrh	ip, [r3, #4]
 	cmp	ip, #0
-	beq	.L633
+	beq	.L641
 	rsb	r3, r0, r3
-	ldr	ip, .L647+12
+	ldr	ip, .L655+12
 	mov	r3, r3, asr #1
 	mul	r3, ip, r3
 	uxth	r3, r3
 	mov	ip, r3, asl #1
 	ldrh	ip, [r1, ip]
 	cmp	ip, r6
-	bls	.L643
+	bls	.L651
 	cmp	ip, r7
 	movcc	r7, ip
 	movcc	r4, r3
-.L633:
+.L641:
 	mov	ip, #6
 	mla	r3, ip, r9, r0
-.L632:
+.L640:
 	ldrh	r9, [r3, #0]
 	cmp	r9, fp
-	bne	.L635
-	b	.L634
-.L643:
+	bne	.L643
+	b	.L642
+.L651:
 	mov	r4, r3
-.L634:
+.L642:
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L630
+	beq	.L638
 	mov	r9, r4, asl #1
 	ldrh	sl, [r1, r9]
 	cmp	sl, r6
-	bls	.L636
+	bls	.L644
 	bl	GetFreeBlockMinEraseCount
 	cmp	r0, r6
-	ldrhi	r3, .L647
-	strhi	r7, [r3, #-1784]
-.L636:
+	ldrhi	r3, .L655
+	strhi	r7, [r3, #-1780]
+.L644:
 	cmp	sl, r5
-	bcs	.L646
+	bcs	.L654
 	add	r3, sl, #128
 	cmp	r8, r3
-	ble	.L646
+	ble	.L654
 	add	r3, sl, #256
-	ldr	r6, .L647
+	ldr	r6, .L655
 	cmp	r3, r5
-	bcc	.L637
-	ldr	r3, [r6, #-1788]
+	bcc	.L645
+	ldr	r3, [r6, #-1784]
 	add	sl, sl, #768
 	cmp	sl, r3
-	bcs	.L646
-.L637:
-	ldr	r3, [r6, #-2020]
+	bcs	.L654
+.L645:
+	ldr	r3, [r6, #-2016]
 	mov	r1, r4
-	ldr	r0, .L647+16
+	ldr	r0, .L655+16
 	mov	r2, r5
 	ldrh	r3, [r3, r9]
 	str	r3, [sp, #0]
-	ldr	r3, [r6, #-2084]
+	ldr	r3, .L655+4
+	ldr	r3, [r3, #4048]
 	ldrh	r3, [r3, r9]
 	stmib	sp, {r3, r8}
-	ldr	r3, [r6, #-1788]
+	ldr	r3, [r6, #-1784]
 	bl	printk
 	mov	r3, #1
-	str	r3, [r6, #-1188]
-	b	.L630
-.L646:
+	str	r3, [r6, #-1184]
+	b	.L638
+.L654:
 	movw	r4, #65535
-.L630:
+.L638:
 	mov	r0, r4
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L648:
+.L656:
 	.align	2
-.L647:
+.L655:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	-2004
+	.word	-2000
 	.word	-1431655765
 	.word	.LC80
 	.fnend
@@ -5545,19 +5615,19 @@ free_data_superblock:
 	cmp	r0, r2
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	beq	.L650
-	ldr	r2, .L651
+	beq	.L658
+	ldr	r2, .L659
 	mov	r3, r0, asl #1
 	mov	r1, #0
-	ldr	r2, [r2, #-2020]
+	ldr	r2, [r2, #-2016]
 	strh	r1, [r2, r3]	@ movhi
 	bl	INSERT_FREE_LIST
-.L650:
+.L658:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L652:
+.L660:
 	.align	2
-.L651:
+.L659:
 	.word	.LANCHOR2
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -5568,21 +5638,21 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L661
+	ldr	r2, .L669
 	mov	r3, #0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	sl, #3844
-	str	r3, [r2, #-1184]
+	movw	sl, #3848
+	str	r3, [r2, #-1180]
 	mov	r8, #12
-	ldr	r0, .L661+4
+	ldr	r0, .L669+4
 	mov	r7, #1
-	movw	r6, #3922
-	movw	fp, #3924
-	b	.L654
-.L655:
+	movw	r6, #3926
+	movw	fp, #3928
+	b	.L662
+.L663:
 	mul	r1, r8, r3
-	ldr	r4, [r2, #-1180]
+	ldr	r4, [r2, #-1176]
 	add	ip, r4, r1
 	str	r7, [ip, #8]
 	ldrh	ip, [r0, r6]
@@ -5590,22 +5660,22 @@ FtlGcBufInit:
 	add	r5, ip, #3
 	cmp	ip, #0
 	movlt	ip, r5
-	ldr	r5, [r2, #-1176]
+	ldr	r5, [r2, #-1172]
 	bic	ip, ip, #3
 	add	ip, r5, ip
 	str	ip, [r4, r1]
 	ldrh	ip, [r0, fp]
-	ldr	r9, [r2, #-1180]
+	ldr	r9, [r2, #-1176]
 	mul	ip, ip, r3
 	add	r4, r9, r1
 	add	r5, ip, #3
 	cmp	ip, #0
 	movlt	ip, r5
-	ldr	r5, [r2, #-1172]
+	ldr	r5, [r2, #-1168]
 	bic	ip, ip, #3
 	add	ip, r5, ip
 	str	ip, [r4, #4]
-	ldr	ip, [r2, #-1168]
+	ldr	ip, [r2, #-1164]
 	mov	r5, #36
 	ldr	r1, [r9, r1]
 	mla	ip, r5, r3, ip
@@ -5614,14 +5684,14 @@ FtlGcBufInit:
 	str	r1, [ip, #8]
 	ldr	r1, [r4, #4]
 	str	r1, [ip, #12]
-.L654:
+.L662:
 	ldrh	r1, [r0, sl]
 	cmp	r3, r1
-	bcc	.L655
-	b	.L660
-.L657:
+	bcc	.L663
+	b	.L668
+.L665:
 	mul	r2, r8, r1
-	ldr	r4, [r3, #-1180]
+	ldr	r4, [r3, #-1176]
 	add	r0, r4, r2
 	str	r7, [r0, #8]
 	ldrh	r0, [ip, r6]
@@ -5629,11 +5699,11 @@ FtlGcBufInit:
 	add	sl, r0, #3
 	cmp	r0, #0
 	movlt	r0, sl
-	ldr	sl, [r3, #-1176]
+	ldr	sl, [r3, #-1172]
 	bic	r0, r0, #3
 	add	r0, sl, r0
 	str	r0, [r4, r2]
-	ldr	r0, [r3, #-1180]
+	ldr	r0, [r3, #-1176]
 	add	r0, r0, r2
 	ldrh	r2, [ip, r5]
 	mul	r2, r2, r1
@@ -5642,26 +5712,26 @@ FtlGcBufInit:
 	add	r4, r2, #3
 	cmp	r2, #0
 	movlt	r2, r4
-	ldr	r4, [r3, #-1172]
+	ldr	r4, [r3, #-1168]
 	bic	r2, r2, #3
 	add	r2, r4, r2
 	str	r2, [r0, #4]
-	b	.L659
-.L660:
-	ldr	r3, .L661
+	b	.L667
+.L668:
+	ldr	r3, .L669
 	mov	r8, #12
-	ldr	ip, .L661+4
+	ldr	ip, .L669+4
 	mov	r7, #0
-	movw	r6, #3922
-	movw	r5, #3924
-.L659:
-	ldr	r2, [r3, #-1164]
+	movw	r6, #3926
+	movw	r5, #3928
+.L667:
+	ldr	r2, [r3, #-1160]
 	cmp	r1, r2
-	bcc	.L657
+	bcc	.L665
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L662:
+.L670:
 	.align	2
-.L661:
+.L669:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -5673,42 +5743,42 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L670
+	ldr	r3, .L678
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r5, #36
-	ldr	r6, [r3, #-1164]
+	ldr	r6, [r3, #-1160]
 	mov	fp, #12
-	ldr	ip, [r3, #-1180]
+	ldr	ip, [r3, #-1176]
 	mov	r3, #0
 	mov	r4, r3
-	b	.L664
-.L667:
+	b	.L672
+.L675:
 	mul	sl, fp, r2
 	add	r8, ip, sl
 	ldr	r9, [ip, sl]
 	ldr	sl, [r7, #8]
 	cmp	r9, sl
 	streq	r4, [r8, #8]
-	beq	.L666
-.L665:
+	beq	.L674
+.L673:
 	add	r2, r2, #1
 	uxth	r2, r2
-.L669:
+.L677:
 	cmp	r2, r6
-	bcc	.L667
-.L666:
+	bcc	.L675
+.L674:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L664:
+.L672:
 	cmp	r3, r1
 	ldmcsfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 	mla	r7, r5, r3, r0
 	mov	r2, #0
-	b	.L669
-.L671:
+	b	.L677
+.L679:
 	.align	2
-.L670:
+.L678:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -5719,47 +5789,47 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L679
+	ldr	r3, .L687
 	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 	.save {r4, r5, r6, r7, r8, sl, lr}
 	mov	r6, #12
-	ldr	r8, [r3, #-1164]
+	ldr	r8, [r3, #-1160]
 	mov	r5, #1
-	ldr	r7, [r3, #-1180]
+	ldr	r7, [r3, #-1176]
 	mov	r4, #36
 	mov	r3, #0
-	b	.L673
-.L676:
+	b	.L681
+.L684:
 	mla	ip, r6, r2, r7
 	ldr	sl, [ip, #8]
 	cmp	sl, #0
-	bne	.L674
+	bne	.L682
 	mla	r2, r4, r3, r0
 	ldr	sl, [ip, #0]
 	str	r5, [ip, #8]
 	str	sl, [r2, #8]
 	ldr	ip, [ip, #4]
 	str	ip, [r2, #12]
-	b	.L675
-.L674:
+	b	.L683
+.L682:
 	add	r2, r2, #1
 	uxth	r2, r2
-	b	.L677
-.L678:
+	b	.L685
+.L686:
 	mov	r2, #0
-.L677:
+.L685:
 	cmp	r2, r8
-	bcc	.L676
-.L675:
+	bcc	.L684
+.L683:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L673:
+.L681:
 	cmp	r3, r1
-	bcc	.L678
+	bcc	.L686
 	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
-.L680:
+.L688:
 	.align	2
-.L679:
+.L687:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -5771,31 +5841,31 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L686
-	ldr	r2, .L686+4
+	ldr	r3, .L694
+	ldr	r2, .L694+4
 	ldrh	r1, [r3, r2]
-	ldr	r2, [r3, #-1156]
+	ldr	r2, [r3, #-1152]
 	mov	r3, #0
-	b	.L682
-.L684:
+	b	.L690
+.L692:
 	ldrh	ip, [r2], #2
 	cmp	ip, r0
-	beq	.L685
+	beq	.L693
 	add	r3, r3, #1
 	uxth	r3, r3
-.L682:
+.L690:
 	cmp	r3, r1
-	bne	.L684
+	bne	.L692
 	mov	r0, #0
 	bx	lr
-.L685:
+.L693:
 	mov	r0, #1
 	bx	lr
-.L687:
+.L695:
 	.align	2
-.L686:
+.L694:
 	.word	.LANCHOR2
-	.word	-1160
+	.word	-1156
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
 	.align	2
@@ -5812,36 +5882,36 @@ FtlGcUpdatePage:
 	mov	r5, r1
 	mov	r6, r2
 	bl	P2V_block_in_plane
-	ldr	r3, .L692
-	ldr	r2, .L692+4
+	ldr	r3, .L700
+	ldr	r2, .L700+4
 	ldrh	ip, [r3, r2]
-	ldr	r2, [r3, #-1156]
+	ldr	r2, [r3, #-1152]
 	mov	r3, #0
 	mov	r1, r2
-	b	.L689
-.L691:
+	b	.L697
+.L699:
 	ldrh	r7, [r1], #2
 	cmp	r7, r0
-	beq	.L690
+	beq	.L698
 	add	r3, r3, #1
 	uxth	r3, r3
-.L689:
+.L697:
 	cmp	r3, ip
-	bne	.L691
+	bne	.L699
 	mov	r3, r3, asl #1
 	strh	r0, [r2, r3]	@ movhi
-	ldr	r2, .L692
-	ldr	r3, .L692+4
+	ldr	r2, .L700
+	ldr	r3, .L700+4
 	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
-.L690:
-	ldr	r3, .L692
+.L698:
+	ldr	r3, .L700
 	mov	r0, #12
-	ldr	r2, .L692+8
+	ldr	r2, .L700+8
 	ldrh	r1, [r3, r2]
 	mul	r1, r0, r1
-	ldr	r0, [r3, #-1152]
+	ldr	r0, [r3, #-1148]
 	add	ip, r0, r1
 	stmib	ip, {r5, r6}
 	str	r4, [r0, r1]
@@ -5849,12 +5919,12 @@ FtlGcUpdatePage:
 	add	r1, r1, #1
 	strh	r1, [r3, r2]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L693:
+.L701:
 	.align	2
-.L692:
+.L700:
 	.word	.LANCHOR2
-	.word	-1160
-	.word	-1148
+	.word	-1156
+	.word	-1144
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
 	.align	2
@@ -5868,33 +5938,33 @@ FtlGcRefreshOpenBlock:
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
 	mov	r1, r4
-	ldr	r0, .L697
+	ldr	r0, .L705
 	bl	printk
-	ldr	r3, .L697+4
-	ldr	ip, .L697+8
+	ldr	r3, .L705+4
+	ldr	ip, .L705+8
 	ldrh	r5, [r3, ip]
 	cmp	r5, r4
-	beq	.L695
-	ldr	r2, .L697+12
+	beq	.L703
+	ldr	r2, .L705+12
 	ldrh	r0, [r3, r2]
 	cmp	r0, r4
-	beq	.L695
+	beq	.L703
 	movw	r1, #65535
 	cmp	r5, r1
 	streqh	r4, [r3, ip]	@ movhi
-	beq	.L695
+	beq	.L703
 	cmp	r0, r1
 	streqh	r4, [r3, r2]	@ movhi
-.L695:
+.L703:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L698:
+.L706:
 	.align	2
-.L697:
+.L705:
 	.word	.LC81
 	.word	.LANCHOR2
-	.word	-1146
-	.word	-1144
+	.word	-1142
+	.word	-1140
 	.fnend
 	.size	FtlGcRefreshOpenBlock, .-FtlGcRefreshOpenBlock
 	.align	2
@@ -5908,33 +5978,33 @@ FtlGcRefreshBlock:
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
 	mov	r1, r4
-	ldr	r0, .L702
+	ldr	r0, .L710
 	bl	printk
-	ldr	r3, .L702+4
-	ldr	ip, .L702+8
+	ldr	r3, .L710+4
+	ldr	ip, .L710+8
 	ldrh	r5, [r3, ip]
 	cmp	r5, r4
-	beq	.L700
-	ldr	r2, .L702+12
+	beq	.L708
+	ldr	r2, .L710+12
 	ldrh	r0, [r3, r2]
 	cmp	r0, r4
-	beq	.L700
+	beq	.L708
 	movw	r1, #65535
 	cmp	r5, r1
 	streqh	r4, [r3, ip]	@ movhi
-	beq	.L700
+	beq	.L708
 	cmp	r0, r1
 	streqh	r4, [r3, r2]	@ movhi
-.L700:
+.L708:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L703:
+.L711:
 	.align	2
-.L702:
+.L710:
 	.word	.LC81
 	.word	.LANCHOR2
-	.word	-1146
-	.word	-1144
+	.word	-1142
+	.word	-1140
 	.fnend
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
 	.align	2
@@ -5948,60 +6018,59 @@ FtlGcMarkBadPhyBlk:
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r4, r0
 	bl	P2V_block_in_plane
-	ldr	r7, .L709
+	ldr	r7, .L717
 	mov	r2, r4
-	ldr	r6, .L709+4
+	ldr	r6, .L717+4
 	ldrh	r1, [r7, r6]
 	mov	r5, r0
-	ldr	r0, .L709+8
+	ldr	r0, .L717+8
 	bl	printk
 	mov	r0, r5
 	bl	FtlGcRefreshBlock
-	ldr	r3, .L709+12
-	ldr	r3, [r3, #3836]
-	cmp	r3, #0
-	beq	.L705
-	ldr	r3, [r7, #-2084]
+	ldr	r3, .L717+12
+	ldr	r2, [r3, #3840]
+	cmp	r2, #0
+	beq	.L713
+	ldr	r3, [r3, #4048]
 	mov	r5, r5, asl #1
 	ldrh	r2, [r3, r5]
 	cmp	r2, #29
 	subhi	r2, r2, #30
 	strhih	r2, [r3, r5]	@ movhi
-.L705:
+.L713:
 	ldrh	r1, [r7, r6]
 	mov	r3, #0
-	ldr	r2, .L709+16
-	b	.L706
-.L708:
+	ldr	r2, .L717+16
+	b	.L714
+.L716:
 	ldrh	r0, [r2, #2]!
 	cmp	r0, r4
-	beq	.L707
+	beq	.L715
 	add	r3, r3, #1
 	uxth	r3, r3
-.L706:
+.L714:
 	cmp	r3, r1
-	bne	.L708
+	bne	.L716
 	cmp	r3, #15
-	bhi	.L707
-	ldr	r2, .L709
-	ldr	r1, .L709+20
-	add	r0, r2, r3, asl #1
+	bhi	.L715
+	ldr	r2, .L717
+	add	r1, r2, r3, asl #1
 	add	r3, r3, #1
-	strh	r4, [r0, r1]	@ movhi
-	sub	r1, r1, #2
+	sub	r1, r1, #1136
+	strh	r4, [r1, #0]	@ movhi
+	ldr	r1, .L717+4
 	strh	r3, [r2, r1]	@ movhi
-.L707:
+.L715:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L710:
+.L718:
 	.align	2
-.L709:
+.L717:
 	.word	.LANCHOR2
-	.word	-1142
+	.word	-1138
 	.word	.LC82
 	.word	.LANCHOR0
-	.word	.LANCHOR2-1142
-	.word	-1140
+	.word	.LANCHOR2-1138
 	.fnend
 	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
 	.align	2
@@ -6013,42 +6082,41 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r2, .L714
-	ldr	r3, .L714+4
+	ldr	r2, .L722
+	ldr	r3, .L722+4
 	ldrh	r2, [r3, r2]
 	cmp	r2, #0
-	beq	.L712
-	ldr	r1, .L714+8
+	beq	.L720
+	ldr	r1, .L722+8
 	ldrh	r0, [r3, r1]
 	movw	r1, #65535
 	cmp	r0, r1
-	bne	.L712
-	ldr	r4, .L714+12
-	ldr	r5, .L714+4
+	bne	.L720
+	ldr	r4, .L722+12
+	ldr	r5, .L722+4
 	ldrh	r1, [r3, r4]
 	cmp	r1, r2
 	movcs	r2, #0
 	strcsh	r2, [r3, r4]	@ movhi
-	ldrh	r2, [r5, r4]
-	ldr	r3, .L714+16
-	add	r2, r5, r2, asl #1
-	ldrh	r0, [r2, r3]
+	ldrh	r3, [r5, r4]
+	add	r3, r5, r3, asl #1
+	sub	r3, r3, #1136
+	ldrh	r0, [r3, #0]
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
 	ldrh	r3, [r5, r4]
 	add	r3, r3, #1
 	strh	r3, [r5, r4]	@ movhi
-.L712:
+.L720:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L715:
+.L723:
 	.align	2
-.L714:
-	.word	-1142
+.L722:
+	.word	-1138
 	.word	.LANCHOR2
-	.word	-1146
-	.word	-1106
-	.word	-1140
+	.word	-1142
+	.word	-1102
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
 	.align	2
@@ -6062,9 +6130,9 @@ ftl_memset:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r4, r0
-	beq	.L717
+	beq	.L725
 	bl	memset
-.L717:
+.L725:
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
 	.fnend
@@ -6079,12 +6147,12 @@ FtlGcPageVarInit:
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r3, #0
-	ldr	r4, .L719
-	movw	r5, #3916
-	ldr	r2, .L719+4
+	ldr	r4, .L727
+	mov	r5, #3920
+	ldr	r2, .L727+4
 	mov	r1, #255
-	ldr	r6, .L719+8
-	ldr	r0, [r4, #-1156]
+	ldr	r6, .L727+8
+	ldr	r0, [r4, #-1152]
 	strh	r3, [r4, r2]	@ movhi
 	add	r2, r2, #12
 	strh	r3, [r4, r2]	@ movhi
@@ -6093,17 +6161,17 @@ FtlGcPageVarInit:
 	bl	ftl_memset
 	ldrh	r3, [r6, r5]
 	mov	r2, #12
-	ldr	r0, [r4, #-1152]
+	ldr	r0, [r4, #-1148]
 	mov	r1, #255
 	mul	r2, r2, r3
 	bl	ftl_memset
 	ldmfd	sp!, {r4, r5, r6, lr}
 	b	FtlGcBufInit
-.L720:
+.L728:
 	.align	2
-.L719:
+.L727:
 	.word	.LANCHOR2
-	.word	-1160
+	.word	-1156
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
@@ -6116,126 +6184,126 @@ SupperBlkListInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r3, #3854
-	ldr	r7, .L731
+	movw	r3, #3858
+	ldr	r7, .L739
 	mov	r2, #6
-	ldr	r4, .L731+4
+	ldr	r4, .L739+4
 	mov	r1, #0
 	mov	r6, #0
 	ldrh	r3, [r7, r3]
 	mov	sl, r6
-	ldr	r0, [r4, #-2028]
+	ldr	r0, [r4, #-2024]
 	mul	r2, r2, r3
 	bl	ftl_memset
-	ldr	r3, .L731+8
-	str	r6, [r4, #-2008]
-	str	r6, [r4, #-2024]
+	ldr	r3, .L739+8
+	str	r6, [r4, #-2004]
+	str	r6, [r4, #-2020]
 	strh	r6, [r4, r3]	@ movhi
 	add	r3, r3, #8
-	str	r6, [r4, #-2016]
+	str	r6, [r4, #-2012]
 	strh	r6, [r4, r3]	@ movhi
 	add	r3, r3, #900
 	strh	r6, [r4, r3]	@ movhi
 	mov	r4, r6
-	b	.L722
-.L724:
-	add	r1, r7, r1
+	b	.L730
+.L732:
+	add	r2, r7, r2
+	mov	r1, fp
 	add	r9, r9, #1
-	ldrb	r0, [r1, #3870]	@ zero_extendqisi2
-	mov	r1, r3
-	stmia	sp, {r2, r3}
+	ldrb	r0, [r2, #3874]	@ zero_extendqisi2
+	str	r3, [sp, #4]
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	ldmia	sp, {r2, r3}
+	ldr	r3, [sp, #4]
 	uxth	r9, r9
 	cmp	r0, #0
-	ldreqh	r1, [r7, r2]
-	addeq	r5, r5, r1
+	ldreqh	r2, [r7, r3]
+	addeq	r5, r5, r2
 	uxtheq	r5, r5
-	b	.L729
-.L730:
+	b	.L737
+.L738:
 	mov	r5, #0
-	uxth	r3, r4
+	uxth	fp, r4
 	mov	r9, r5
-	movw	fp, #3844
-	movw	r2, #3912
-.L729:
-	ldrh	r0, [r7, fp]
-	sxth	r1, r9
-	cmp	r1, r0
-	blt	.L724
+	movw	r3, #3916
+.L737:
+	movw	r0, #3848
+	sxth	r2, r9
+	ldrh	r1, [r7, r0]
+	cmp	r2, r1
+	blt	.L732
 	cmp	r5, #0
-	ldr	r9, .L731+4
-	beq	.L725
+	ldr	r9, .L739+4
+	beq	.L733
 	sxth	r1, r5
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r5, r0
-	b	.L726
-.L725:
+	b	.L734
+.L733:
 	sxth	r3, r4
-	ldr	r2, [r9, #-2020]
+	ldr	r2, [r9, #-2016]
 	mvn	r1, #0
 	mov	r3, r3, asl #1
 	strh	r1, [r2, r3]	@ movhi
-.L726:
+.L734:
 	sxth	r1, r4
-	ldr	r0, [r9, #-2028]
-	ldr	r3, .L731+4
+	ldr	r0, [r9, #-2024]
+	ldr	r3, .L739+4
 	mov	r2, r1, asl #1
 	add	r1, r2, r1
 	add	r1, r0, r1, asl #1
 	strh	r5, [r1, #4]	@ movhi
-	ldr	r1, .L731+12
+	ldr	r1, .L739+12
 	ldrh	r1, [r9, r1]
 	cmp	r8, r1
-	beq	.L727
-	ldr	r1, .L731+16
+	beq	.L735
+	ldr	r1, .L739+16
 	ldrh	r1, [r3, r1]
 	cmp	r8, r1
-	beq	.L727
-	ldr	r1, .L731+20
+	beq	.L735
+	ldr	r1, .L739+20
 	ldrh	r1, [r3, r1]
 	cmp	r8, r1
-	beq	.L727
-	ldr	r3, [r3, #-2020]
+	beq	.L735
+	ldr	r3, [r3, #-2016]
 	uxth	r0, r4
 	ldrh	r3, [r3, r2]
 	cmp	r3, #0
-	bne	.L728
+	bne	.L736
 	add	r6, r6, #1
 	uxth	r6, r6
 	bl	INSERT_FREE_LIST
-	b	.L727
-.L728:
+	b	.L735
+.L736:
 	add	sl, sl, #1
 	uxth	sl, sl
 	bl	INSERT_DATA_LIST
-.L727:
+.L735:
 	add	r4, r4, #1
 	uxth	r4, r4
-.L722:
-	movw	r2, #3852
+.L730:
+	mov	r3, #3856
 	sxth	r8, r4
-	ldrh	r3, [r7, r2]
+	ldrh	r3, [r7, r3]
 	cmp	r8, r3
-	blt	.L730
-	ldr	r3, .L731+4
+	blt	.L738
+	ldr	r3, .L739+4
 	mov	r0, #0
-	ldr	r2, .L731+8
+	ldr	r2, .L739+8
 	strh	sl, [r3, r2]	@ movhi
 	add	r2, r2, #8
 	strh	r6, [r3, r2]	@ movhi
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L732:
+.L740:
 	.align	2
-.L731:
+.L739:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-2012
-	.word	-2000
-	.word	-1952
-	.word	-1904
+	.word	-2008
+	.word	-1996
+	.word	-1948
+	.word	-1900
 	.fnend
 	.size	SupperBlkListInit, .-SupperBlkListInit
 	.align	2
@@ -6248,33 +6316,33 @@ FtlL2PDataInit:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r1, #0
-	ldr	r4, .L736
-	movw	r6, #3922
-	ldr	r5, .L736+4
-	movw	r7, #3950
+	ldr	r4, .L744
+	movw	r6, #3926
+	ldr	r5, .L744+4
+	movw	r7, #3954
 	mov	r8, #12
-	ldr	r2, [r4, #3940]
-	ldr	r0, [r5, #-1100]
+	ldr	r2, [r4, #3944]
+	ldr	r0, [r5, #-1096]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	ldrh	r3, [r4, r6]
 	ldrh	r2, [r4, r7]
 	mov	r1, #255
-	ldr	r0, [r5, #-1096]
+	ldr	r0, [r5, #-1092]
 	mul	r2, r2, r3
 	bl	ftl_memset
 	mov	r2, #0
 	mov	ip, r2
 	mvn	r0, #0
-	b	.L734
-.L735:
+	b	.L742
+.L743:
 	mul	r3, r8, r2
-	ldr	r1, [r5, #-1856]
+	ldr	r1, [r5, #-1852]
 	add	sl, r1, r3
 	str	ip, [sl, #4]
 	strh	r0, [r1, r3]	@ movhi
-	ldr	r1, [r5, #-1856]
-	ldr	sl, [r5, #-1096]
+	ldr	r1, [r5, #-1852]
+	ldr	sl, [r5, #-1092]
 	add	r3, r1, r3
 	ldrh	r1, [r4, r6]
 	mul	r1, r2, r1
@@ -6283,52 +6351,52 @@ FtlL2PDataInit:
 	bic	r1, r1, #3
 	add	r1, sl, r1
 	str	r1, [r3, #8]
-.L734:
+.L742:
 	ldrh	r3, [r4, r7]
-	ldr	r1, .L736
+	ldr	r1, .L744
 	cmp	r3, r2
-	ldr	r3, .L736+4
-	bhi	.L735
-	ldr	r0, .L736+8
+	ldr	r3, .L744+4
+	bhi	.L743
+	ldr	r0, .L744+8
 	mvn	r2, #0
-	ldr	ip, [r1, #3940]
+	ldr	ip, [r1, #3944]
 	strh	r2, [r3, r0]	@ movhi
-	sub	r0, r0, #2
+	ldr	r0, .L744+12
 	strh	r2, [r3, r0]	@ movhi
 	add	r0, r0, #10
 	strh	ip, [r3, r0]	@ movhi
-	ldr	ip, .L736+12
-	ldr	r0, .L736+16
+	sub	r0, r0, #6
+	ldr	ip, .L744+16
 	strh	ip, [r3, r0]	@ movhi
 	add	r0, r0, #40
 	ldrh	ip, [r3, r0]
 	sub	r0, r0, #36
 	strh	ip, [r3, r0]	@ movhi
-	movw	r0, #3948
+	mov	r0, #3952
 	ldrh	r0, [r1, r0]
-	ldr	r1, .L736+20
+	ldr	r1, .L744+20
 	strh	r0, [r3, r1]	@ movhi
-	ldr	r1, [r3, #-1044]
-	str	r1, [r3, #-1080]
 	ldr	r1, [r3, #-1040]
 	str	r1, [r3, #-1076]
-	ldr	r1, [r3, #-1100]
-	str	r1, [r3, #-1072]
 	ldr	r1, [r3, #-1036]
+	str	r1, [r3, #-1072]
+	ldr	r1, [r3, #-1096]
 	str	r1, [r3, #-1068]
-	ldr	r1, .L736+24
+	ldr	r1, [r3, #-1032]
+	str	r1, [r3, #-1064]
+	ldr	r1, .L744+24
 	strh	r2, [r3, r1]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L737:
+.L745:
 	.align	2
-.L736:
+.L744:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1090
-	.word	-3902
-	.word	-1088
 	.word	-1086
-	.word	-1052
+	.word	-1088
+	.word	-3902
+	.word	-1082
+	.word	-1048
 	.fnend
 	.size	FtlL2PDataInit, .-FtlL2PDataInit
 	.align	2
@@ -6350,13 +6418,13 @@ ftl_free_no_use_map_blk:
 	mov	r0, r5
 	bl	ftl_memset
 	mov	r3, #0
-	b	.L739
-.L743:
+	b	.L747
+.L751:
 	ldr	r0, [r7, r3, asl #2]
 	mov	r2, #0
 	ubfx	r0, r0, #10, #16
-	b	.L740
-.L742:
+	b	.L748
+.L750:
 	mov	r1, r2, asl #1
 	add	r2, r2, #1
 	ldrh	ip, [r6, r1]
@@ -6365,42 +6433,42 @@ ftl_free_no_use_map_blk:
 	ldreqh	ip, [r5, r1]
 	addeq	ip, ip, #1
 	streqh	ip, [r5, r1]	@ movhi
-.L740:
+.L748:
 	ldrh	r1, [r4, #10]
 	cmp	r1, r2
-	bhi	.L742
+	bhi	.L750
 	add	r3, r3, #1
 	uxth	r3, r3
-.L739:
+.L747:
 	ldrh	r2, [r4, #6]
 	cmp	r2, r3
-	bhi	.L743
+	bhi	.L751
 	mov	sl, #0
 	ldrh	fp, [r5, #0]
 	mov	r7, sl
-	ldr	r3, .L749
-	movw	r2, #3914
-	b	.L744
-.L748:
+	ldr	r3, .L757
+	movw	r2, #3918
+	b	.L752
+.L756:
 	ldrh	r1, [r4, #0]
 	cmp	r1, r7
-	bne	.L745
+	bne	.L753
 	ldrh	r0, [r4, #2]
 	ldrh	r1, [r3, r2]
 	cmp	r0, r1
 	movcc	r0, r7, asl #1
 	strcch	r1, [r5, r0]	@ movhi
-.L745:
+.L753:
 	mov	r9, r7, asl #1
 	ldrh	r8, [r5, r9]
 	cmp	fp, r8
 	movhi	sl, r7
 	movhi	fp, r8
 	cmp	r8, #0
-	bne	.L747
+	bne	.L755
 	ldrh	r0, [r6, r9]
 	cmp	r0, #0
-	beq	.L747
+	beq	.L755
 	mov	r1, #1
 	stmia	sp, {r2, r3}
 	bl	FtlFreeSysBlkQueueIn
@@ -6409,18 +6477,18 @@ ftl_free_no_use_map_blk:
 	ldrh	r1, [r4, #8]
 	sub	r1, r1, #1
 	strh	r1, [r4, #8]	@ movhi
-.L747:
+.L755:
 	add	r7, r7, #1
 	uxth	r7, r7
-.L744:
+.L752:
 	ldrh	r1, [r4, #10]
 	cmp	r1, r7
-	bhi	.L748
+	bhi	.L756
 	mov	r0, sl
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L750:
+.L758:
 	.align	2
-.L749:
+.L757:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -6431,8 +6499,8 @@ FtlFreeSysBlkQueueInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L752
-	movw	r2, #4038
+	ldr	r3, .L760
+	movw	r2, #4058
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r4, #0
@@ -6442,18 +6510,17 @@ FtlFreeSysBlkQueueInit:
 	strh	r4, [r3, r2]	@ movhi
 	add	r2, r2, #2
 	strh	r4, [r3, r2]	@ movhi
-	movw	r2, #4036
+	movw	r2, #4056
 	strh	r0, [r3, r2]	@ movhi
+	add	r0, r3, #4064
 	mov	r2, #2048
-	ldr	r0, .L752+4
 	bl	ftl_memset
 	mov	r0, r4
 	ldmfd	sp!, {r4, pc}
-.L753:
+.L761:
 	.align	2
-.L752:
+.L760:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+4044
 	.fnend
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
 	.align	2
@@ -6464,10 +6531,10 @@ FtlBbtMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L755
-	movw	r2, #3976
+	ldr	r3, .L763
+	movw	r2, #3980
 	mvn	r1, #0
-	ldr	r0, .L755+4
+	ldr	r0, .L763+4
 	strh	r1, [r3, r2]	@ movhi
 	add	r2, r2, #6
 	mov	r1, #0
@@ -6475,11 +6542,11 @@ FtlBbtMemInit:
 	mov	r1, #255
 	mov	r2, #16
 	b	ftl_memset
-.L756:
+.L764:
 	.align	2
-.L755:
+.L763:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+3988
+	.word	.LANCHOR0+3992
 	.fnend
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
 	.align	2
@@ -6489,8 +6556,8 @@ FtlBbt2Bitmap:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L761
-	ldr	r2, .L761+4
+	ldr	r3, .L769
+	ldr	r2, .L769+4
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
@@ -6503,7 +6570,7 @@ FtlBbt2Bitmap:
 	mov	r3, #0
 	movw	ip, #65535
 	mov	r0, #1
-.L759:
+.L767:
 	ldrh	r2, [r5, r3]
 	cmp	r2, ip
 	ldmeqfd	sp!, {r4, r5, r6, pc}
@@ -6514,12 +6581,12 @@ FtlBbt2Bitmap:
 	ldr	r6, [r4, r1, asl #2]
 	orr	r2, r6, r0, asl r2
 	str	r2, [r4, r1, asl #2]
-	bne	.L759
+	bne	.L767
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L762:
+.L770:
 	.align	2
-.L761:
-	.word	-1032
+.L769:
+	.word	-1028
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
@@ -6533,54 +6600,55 @@ FtlVariablesInit:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mvn	r3, #0
-	ldr	r5, .L764
+	ldr	r6, .L772
 	mov	r4, #0
-	ldr	r2, .L764+4
+	ldr	r2, .L772+4
 	mov	r1, r4
-	ldr	r6, .L764+8
-	movw	r7, #3854
-	str	r3, [r5, #-1012]
-	strh	r3, [r5, r2]	@ movhi
-	movw	r3, #3958
-	strh	r4, [r6, r3]	@ movhi
-	movw	r3, #3932
-	ldrh	r2, [r6, r3]
-	ldr	r0, [r6, #3960]
-	str	r4, [r5, #-1028]
+	ldr	r5, .L772+8
+	movw	r7, #3858
+	str	r3, [r6, #-1008]
+	strh	r3, [r6, r2]	@ movhi
+	movw	r3, #3962
+	strh	r4, [r5, r3]	@ movhi
+	mov	r3, #3936
+	ldrh	r2, [r5, r3]
+	ldr	r0, [r5, #3964]
+	str	r4, [r6, #-1024]
 	mov	r2, r2, asl #1
-	str	r4, [r5, #-1020]
-	str	r4, [r5, #-1016]
-	str	r4, [r6, #3836]
+	str	r4, [r6, #-1016]
+	str	r4, [r6, #-1012]
+	str	r4, [r5, #3840]
 	bl	ftl_memset
-	ldrh	r2, [r6, r7]
+	ldrh	r2, [r5, r7]
 	mov	r1, r4
-	ldr	r0, [r5, #-2084]
+	ldr	r0, [r5, #4048]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
-	ldrh	r2, [r6, r7]
+	ldrh	r2, [r5, r7]
 	mov	r1, r4
-	ldr	r0, [r5, #-1008]
+	ldr	r0, [r6, #-1004]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
 	mov	r1, r4
 	mov	r2, #48
-	ldr	r0, .L764+12
+	ldr	r0, .L772+12
 	bl	ftl_memset
 	mov	r1, r4
 	mov	r2, #512
-	sub	r0, r5, #1712
+	ldr	r0, .L772+16
 	bl	ftl_memset
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L765:
+.L773:
 	.align	2
-.L764:
+.L772:
 	.word	.LANCHOR2
-	.word	-1024
+	.word	-1020
 	.word	.LANCHOR0
-	.word	.LANCHOR2-2076
+	.word	.LANCHOR2-2072
+	.word	.LANCHOR2-1708
 	.fnend
 	.size	FtlVariablesInit, .-FtlVariablesInit
 	.align	2
@@ -6593,158 +6661,158 @@ FtlMemInit:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r6, #0
-	ldr	r4, .L797
+	ldr	r4, .L805
 	mov	r0, #1024
-	ldr	r3, .L797+4
+	ldr	r3, .L805+4
 	mov	r7, #12
-	ldr	r2, .L797+8
-	movw	sl, #3844
-	ldr	r5, .L797+12
+	ldr	r2, .L805+8
+	movw	sl, #3848
+	ldr	r5, .L805+12
 	mov	r8, #36
 	strh	r6, [r4, r3]	@ movhi
 	movw	r3, #65535
-	str	r3, [r4, #-996]
+	str	r3, [r4, #-992]
 	mvn	r3, #0
 	strh	r3, [r4, r2]	@ movhi
 	add	r2, r2, #2
-	str	r6, [r4, #-1004]
+	str	r6, [r4, #-1000]
 	strh	r3, [r4, r2]	@ movhi
 	mov	r2, #32
-	ldr	r3, .L797+16
-	str	r6, [r4, #-1716]
-	str	r6, [r4, #-1808]
+	ldr	r3, .L805+16
+	str	r6, [r4, #-1712]
+	str	r6, [r4, #-1804]
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #2
 	mov	r2, #128
-	str	r6, [r4, #-1804]
+	str	r6, [r4, #-1800]
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #6
-	str	r6, [r4, #-1820]
+	str	r6, [r4, #-1816]
 	strh	r6, [r4, r3]	@ movhi
 	add	r3, r3, #50
-	str	r6, [r4, #-1832]
+	str	r6, [r4, #-1828]
 	strh	r6, [r4, r3]	@ movhi
 	add	r3, r3, #158
-	str	r6, [r4, #-1836]
+	str	r6, [r4, #-1832]
 	strh	r6, [r4, r3]	@ movhi
 	sub	r3, r3, #122
-	str	r6, [r4, #-1828]
+	str	r6, [r4, #-1824]
 	strh	r6, [r4, r3]	@ movhi
-	movw	r3, #3918
+	movw	r3, #3922
 	ldrh	r1, [r5, r3]
-	str	r6, [r4, #-1824]
-	str	r6, [r4, #-1840]
-	str	r6, [r4, #-1800]
+	str	r6, [r4, #-1820]
+	str	r6, [r4, #-1836]
 	str	r6, [r4, #-1796]
-	str	r6, [r4, #-2080]
-	str	r6, [r4, #-1788]
+	str	r6, [r4, #-1792]
+	str	r6, [r5, #4052]
 	str	r6, [r4, #-1784]
-	str	r6, [r4, #-1000]
-	str	r6, [r4, #-1188]
-	str	r6, [r4, #-992]
-	str	r6, [r4, #-1196]
+	str	r6, [r4, #-1780]
+	str	r6, [r4, #-996]
+	str	r6, [r4, #-1184]
 	str	r6, [r4, #-988]
+	str	r6, [r4, #-1192]
+	str	r6, [r4, #-984]
 	bl	__aeabi_idiv
-	movw	r3, #3844
+	movw	r3, #3848
 	ldrh	r3, [r5, r3]
-	str	r6, [r5, #3964]
-	movw	r6, #3916
+	str	r6, [r5, #3968]
+	mov	r6, #3920
 	mov	r3, r3, asl #2
 	cmp	r0, r3
-	str	r0, [r4, #-980]
+	str	r0, [r4, #-976]
 	ldrh	r0, [r5, r6]
-	strhi	r3, [r4, #-980]
-	ldr	r4, .L797
+	strhi	r3, [r4, #-976]
+	ldr	r4, .L805
 	mov	r0, r0, asl #1
 	bl	ftl_malloc
-	str	r0, [r4, #-1156]
+	str	r0, [r4, #-1152]
 	ldrh	r0, [r5, r6]
 	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r6, [r5, sl]
 	mul	r6, r8, r6
 	mov	r9, r6, asl #3
-	str	r0, [r4, #-1152]
+	str	r0, [r4, #-1148]
 	mov	r0, r9
 	bl	ftl_malloc
-	str	r0, [r4, #-976]
+	str	r0, [r4, #-972]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-972]
+	str	r0, [r4, #-968]
 	mov	r0, r9
 	bl	ftl_malloc
-	str	r0, [r4, #-968]
+	str	r0, [r4, #-964]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-2088]
+	str	r0, [r5, #4044]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-1168]
-	ldr	r0, [r4, #-980]
+	str	r0, [r4, #-1164]
+	ldr	r0, [r4, #-976]
 	mul	r0, r8, r0
 	bl	ftl_malloc
-	movw	r8, #3922
+	movw	r8, #3926
 	ldrh	r3, [r5, sl]
 	ldrh	r6, [r5, r8]
 	mov	r3, r3, asl #1
 	add	r3, r3, #1
-	str	r3, [r4, #-1164]
-	str	r0, [r5, #3968]
-	mov	r0, r6
-	bl	ftl_malloc
-	str	r0, [r4, #-964]
+	str	r3, [r4, #-1160]
+	str	r0, [r5, #3972]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #-960]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #-956]
-	ldr	r0, [r4, #-1164]
-	mul	r0, r0, r6
+	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-1176]
-	ldr	r0, [r4, #-980]
+	str	r0, [r4, #-952]
+	ldr	r0, [r4, #-1160]
 	mul	r0, r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #-952]
-	mov	r0, r6
+	str	r0, [r4, #-1172]
+	ldr	r0, [r4, #-976]
+	mul	r0, r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #-948]
 	mov	r0, r6
 	bl	ftl_malloc
-	movw	r6, #3924
 	str	r0, [r4, #-944]
-	ldr	r0, [r4, #-1164]
+	mov	r0, r6
+	bl	ftl_malloc
+	movw	r6, #3928
+	str	r0, [r4, #-940]
+	ldr	r0, [r4, #-1160]
 	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
 	ldrh	sl, [r5, sl]
 	mul	sl, sl, r3
-	str	r0, [r4, #-1180]
+	str	r0, [r4, #-1176]
 	mov	r0, sl
 	bl	ftl_malloc
-	str	r0, [r4, #-940]
+	str	r0, [r4, #-936]
 	mov	r0, sl, asl #3
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
-	ldr	sl, .L797+20
-	str	r0, [r4, #-936]
-	ldr	r0, [r4, #-1164]
+	ldr	sl, .L805+20
+	str	r0, [r4, #-932]
+	ldr	r0, [r4, #-1160]
 	mul	r0, r0, r3
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
-	movw	r6, #3854
-	str	r0, [r4, #-1172]
-	ldr	r0, [r4, #-980]
+	movw	r6, #3858
+	str	r0, [r4, #-1168]
+	ldr	r0, [r4, #-976]
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	str	r0, [r4, #-932]
+	str	r0, [r4, #-928]
 	ldrh	r0, [r5, r6]
 	mov	r0, r0, asl #1
 	uxth	r0, r0
 	strh	r0, [r4, sl]	@ movhi
 	bl	ftl_malloc
-	str	r0, [r4, #-1008]
+	str	r0, [r4, #-1004]
 	ldrh	r0, [r4, sl]
 	add	r0, r0, #544
 	add	r0, r0, #3
@@ -6754,260 +6822,261 @@ FtlMemInit:
 	bl	ftl_malloc
 	ldrh	sl, [r5, r6]
 	mov	sl, sl, asl #1
-	str	r0, [r4, #-924]
+	str	r0, [r4, #-920]
 	add	r0, r0, #32
-	str	r0, [r4, #-2084]
+	str	r0, [r5, #4048]
 	mov	r0, sl
 	bl	ftl_malloc
-	str	r0, [r4, #-920]
+	str	r0, [r4, #-916]
 	mov	r0, sl
 	bl	ftl_malloc
-	ldr	sl, [r5, #3940]
+	ldr	sl, [r5, #3944]
 	mov	sl, sl, asl #1
-	str	r0, [r4, #-2020]
+	str	r0, [r4, #-2016]
 	mov	r0, sl
 	bl	ftl_malloc
-	str	r0, [r4, #-1044]
+	str	r0, [r4, #-1040]
 	mov	r0, sl
 	bl	ftl_malloc
-	movw	sl, #3932
-	str	r0, [r4, #-1100]
+	mov	sl, #3936
+	str	r0, [r4, #-1096]
 	ldrh	r0, [r5, r6]
 	mov	r0, r0, lsr #3
 	add	r0, r0, #4
 	bl	ftl_malloc
-	str	r0, [r4, #-1844]
+	str	r0, [r4, #-1840]
 	ldrh	r0, [r5, sl]
 	mov	r0, r0, asl #1
 	bl	ftl_malloc
-	str	r0, [r5, #3960]
+	str	r0, [r5, #3964]
 	ldrh	r0, [r5, sl]
 	mov	r0, r0, asl #1
 	bl	ftl_malloc
-	str	r0, [r4, #-916]
+	str	r0, [r4, #-912]
 	ldrh	r0, [r5, sl]
 	add	sl, sl, #2
 	mov	r0, r0, asl #2
 	bl	ftl_malloc
-	str	r0, [r4, #-912]
+	str	r0, [r4, #-908]
 	ldrh	r0, [r5, sl]
 	mov	r0, r0, asl #2
 	bl	ftl_malloc
 	ldrh	r2, [r5, sl]
 	mov	r1, #0
 	mov	r2, r2, asl #2
-	str	r0, [r4, #-908]
+	str	r0, [r4, #-904]
 	bl	ftl_memset
-	movw	r3, #3948
+	mov	r3, #3952
 	ldrh	sl, [r5, r3]
 	mov	sl, sl, asl #2
 	mov	r0, sl
 	bl	ftl_malloc
-	str	r0, [r4, #-1036]
+	str	r0, [r4, #-1032]
 	mov	r0, sl
 	bl	ftl_malloc
-	movw	sl, #3950
-	str	r0, [r4, #-904]
-	ldr	r0, [r5, #3940]
+	movw	sl, #3954
+	str	r0, [r4, #-900]
+	ldr	r0, [r5, #3944]
 	mov	r0, r0, asl #2
 	bl	ftl_malloc
-	str	r0, [r4, #-1040]
+	str	r0, [r4, #-1036]
 	ldrh	r0, [r5, sl]
 	mul	r0, r7, r0
 	bl	ftl_malloc
 	ldrh	r3, [r5, sl]
-	movw	r7, #3866
-	str	r0, [r4, #-1856]
+	movw	r7, #3870
+	str	r0, [r4, #-1852]
 	ldrh	r0, [r5, r8]
 	mul	r0, r0, r3
 	bl	ftl_malloc
 	ldrh	r3, [r5, r6]
-	ldr	r6, .L797+24
-	str	r0, [r4, #-1096]
+	ldr	r6, .L805+24
+	str	r0, [r4, #-1092]
 	mov	r0, #6
 	mul	r0, r0, r3
 	bl	ftl_malloc
-	movw	r3, #3908
+	movw	r3, #3912
 	ldrh	r3, [r5, r3]
 	ldrh	r2, [r5, r7]
 	add	r3, r3, #31
 	mov	r3, r3, lsr #5
 	strh	r3, [r4, r6]	@ movhi
 	mul	r3, r2, r3
-	str	r0, [r4, #-2028]
+	str	r0, [r4, #-2024]
 	mov	r0, r3, asl #2
 	bl	ftl_malloc
 	ldrh	r1, [r4, r6]
 	mov	r3, #1
-	ldr	ip, .L797+12
+	ldr	ip, .L805+12
 	mov	r1, r1, asl #2
 	mov	r2, r1
-	str	r0, [r5, #4004]
+	str	r0, [r5, #4008]
 	ldrh	r5, [r5, r7]
-	ldr	r0, .L797+28
-	b	.L768
-.L769:
-	ldr	r4, [ip, #4004]
+	ldr	r0, .L805+28
+	b	.L776
+.L777:
+	ldr	r4, [ip, #4008]
 	add	r3, r3, #1
 	add	r4, r4, r2
 	add	r2, r2, r1
 	str	r4, [r0, #4]!
-.L768:
+.L776:
 	cmp	r3, r5
-	bcc	.L769
-	ldr	r0, .L797+32
+	bcc	.L777
+	ldr	r0, .L805+32
 	mov	r2, #0
 	mov	r1, r2
 	add	r0, r0, r3, asl #2
-	b	.L770
-.L771:
+	b	.L778
+.L779:
 	add	ip, r0, r2
 	add	r3, r3, #1
 	add	r2, r2, #4
 	str	r1, [ip, #28]
-.L770:
+.L778:
 	cmp	r3, #7
-	bls	.L771
-	ldr	r3, .L797
-	ldr	r2, [r3, #-1044]
+	bls	.L779
+	ldr	r3, .L805
+	ldr	r2, [r3, #-1040]
 	cmp	r2, #0
-	beq	.L796
-.L772:
-	ldr	r2, [r3, #-1100]
+	beq	.L804
+.L780:
+	ldr	r2, [r3, #-1096]
 	cmp	r2, #0
-	beq	.L796
-.L774:
-	ldr	r2, [r3, #-1036]
+	beq	.L804
+.L782:
+	ldr	r2, [r3, #-1032]
 	cmp	r2, #0
-	beq	.L796
-.L775:
-	ldr	r2, [r3, #-1040]
+	beq	.L804
+.L783:
+	ldr	r2, [r3, #-1036]
 	cmp	r2, #0
-	beq	.L796
-.L776:
-	ldr	r2, [r3, #-1856]
+	beq	.L804
+.L784:
+	ldr	r2, [r3, #-1852]
 	cmp	r2, #0
-	beq	.L796
-.L777:
-	ldr	r2, [r3, #-1096]
+	beq	.L804
+.L785:
+	ldr	r2, [r3, #-1092]
 	cmp	r2, #0
-	beq	.L796
-.L778:
-	ldr	r2, [r3, #-2028]
+	beq	.L804
+.L786:
+	ldr	r2, [r3, #-2024]
 	cmp	r2, #0
-	beq	.L796
-.L779:
-	ldr	r2, .L797+12
-	ldr	r2, [r2, #4004]
+	beq	.L804
+.L787:
+	ldr	r2, .L805+12
+	ldr	r2, [r2, #4008]
 	cmp	r2, #0
-	beq	.L796
-.L780:
-	ldr	r3, [r3, #-2020]
+	beq	.L804
+.L788:
+	ldr	r3, [r3, #-2016]
 	cmp	r3, #0
-	beq	.L796
-.L781:
-	ldr	r3, .L797
-	ldr	r2, [r3, #-1156]
-	cmp	r2, #0
-	beq	.L796
+	beq	.L804
+.L789:
+	ldr	r3, .L805
 	ldr	r2, [r3, #-1152]
 	cmp	r2, #0
-	beq	.L796
-.L783:
-	ldr	r2, [r3, #-976]
+	beq	.L804
+	ldr	r2, [r3, #-1148]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r2, [r3, #-968]
+	beq	.L804
+.L791:
+	ldr	r2, [r3, #-972]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r2, [r3, #-2088]
+	beq	.L804
+	ldr	r2, [r3, #-964]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r2, [r3, #-1168]
+	beq	.L804
+	ldr	r2, .L805+12
+	ldr	r2, [r2, #4044]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r2, [r3, #-972]
+	beq	.L804
+	ldr	r2, [r3, #-1164]
 	cmp	r2, #0
-	beq	.L796
-.L785:
-	ldr	r2, [r3, #-964]
+	beq	.L804
+	ldr	r2, [r3, #-968]
 	cmp	r2, #0
-	beq	.L796
+	beq	.L804
+.L793:
 	ldr	r2, [r3, #-960]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r3, [r3, #-956]
-	cmp	r3, #0
-	beq	.L796
-	ldr	r3, .L797
-	ldr	r2, [r3, #-1176]
+	beq	.L804
+	ldr	r2, [r3, #-956]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r2, [r3, #-948]
+	beq	.L804
+	ldr	r3, [r3, #-952]
+	cmp	r3, #0
+	beq	.L804
+	ldr	r3, .L805
+	ldr	r2, [r3, #-1172]
 	cmp	r2, #0
-	beq	.L796
+	beq	.L804
 	ldr	r2, [r3, #-944]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r2, [r3, #-1180]
-	cmp	r2, #0
-	beq	.L796
-.L787:
+	beq	.L804
 	ldr	r2, [r3, #-940]
 	cmp	r2, #0
-	beq	.L796
+	beq	.L804
+	ldr	r2, [r3, #-1176]
+	cmp	r2, #0
+	beq	.L804
+.L795:
 	ldr	r2, [r3, #-936]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r2, [r3, #-1172]
+	beq	.L804
+	ldr	r2, [r3, #-932]
 	cmp	r2, #0
-	beq	.L796
-.L789:
-	ldr	r2, [r3, #-2084]
+	beq	.L804
+	ldr	r2, [r3, #-1168]
 	cmp	r2, #0
-	beq	.L796
-	ldr	r3, [r3, #-1008]
+	beq	.L804
+.L797:
+	ldr	r2, .L805+12
+	ldr	r1, [r2, #4048]
+	cmp	r1, #0
+	beq	.L804
+	ldr	r3, [r3, #-1004]
 	cmp	r3, #0
-	beq	.L796
-.L791:
-	ldr	r3, .L797+12
-	ldr	r3, [r3, #3960]
+	beq	.L804
+.L799:
+	ldr	r3, [r2, #3964]
 	cmp	r3, #0
-	beq	.L796
-.L792:
-	ldr	r3, .L797
-	ldr	r2, [r3, #-916]
-	cmp	r2, #0
-	beq	.L796
-.L793:
+	beq	.L804
+.L800:
+	ldr	r3, .L805
 	ldr	r2, [r3, #-912]
 	cmp	r2, #0
-	beq	.L796
-.L794:
-	ldr	r3, [r3, #-908]
+	beq	.L804
+.L801:
+	ldr	r2, [r3, #-908]
+	cmp	r2, #0
+	beq	.L804
+.L802:
+	ldr	r3, [r3, #-904]
 	cmp	r3, #0
-	bne	.L795
-.L796:
-	ldr	r0, .L797+36
-	ldr	r1, .L797+40
+	bne	.L803
+.L804:
+	ldr	r0, .L805+36
+	ldr	r1, .L805+40
 	bl	printk
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L795:
+.L803:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L798:
+.L806:
 	.align	2
-.L797:
+.L805:
 	.word	.LANCHOR2
-	.word	-1104
-	.word	-1146
+	.word	-1100
+	.word	-1142
 	.word	.LANCHOR0
-	.word	-1200
-	.word	-928
-	.word	-1032
-	.word	.LANCHOR0+4004
-	.word	.LANCHOR0+3976
+	.word	-1196
+	.word	-924
+	.word	-1028
+	.word	.LANCHOR0+4008
+	.word	.LANCHOR0+3980
 	.word	.LC83
 	.word	.LANCHOR3
 	.fnend
@@ -7025,7 +7094,7 @@ ftl_read_flash_info:
 	mov	r2, #11
 	mov	r4, r0
 	bl	ftl_memset
-	ldr	r3, .L802
+	ldr	r3, .L810
 	ldr	r2, [r3, #3624]
 	ldr	r1, [r3, #856]
 	ldrb	r2, [r2, #9]	@ zero_extendqisi2
@@ -7035,9 +7104,9 @@ ftl_read_flash_info:
 	strb	r2, [r4, #4]
 	mov	r2, r2, lsr #8
 	strb	r2, [r4, #5]
-	ldrb	r2, [r3, #3832]	@ zero_extendqisi2
+	ldrb	r2, [r3, #3836]	@ zero_extendqisi2
 	strb	r2, [r4, #7]
-	ldr	r2, [r3, #3952]
+	ldr	r2, [r3, #3956]
 	ubfx	r0, r2, #8, #8
 	strb	r0, [r4, #1]
 	strb	r2, [r4, #0]
@@ -7056,22 +7125,22 @@ ftl_read_flash_info:
 	strb	r1, [r4, #10]
 	strb	r2, [r4, #9]
 	mov	r2, #1
-	ldr	r1, .L802+4
-	b	.L800
-.L801:
+	ldr	r1, .L810+4
+	b	.L808
+.L809:
 	ldrb	r5, [r3, r1]	@ zero_extendqisi2
 	add	r3, r3, #1
 	ldrb	ip, [r4, #10]	@ zero_extendqisi2
 	orr	ip, ip, r2, asl r5
 	strb	ip, [r4, #10]
-.L800:
+.L808:
 	uxtb	ip, r3
 	cmp	ip, r0
-	bcc	.L801
+	bcc	.L809
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L803:
+.L811:
 	.align	2
-.L802:
+.L810:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3764
 	.fnend
@@ -7083,50 +7152,50 @@ FlashDieInfoInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L816
+	ldr	r1, .L824
 	mov	r2, #0
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
-	ldr	r3, .L816+4
-	strb	r2, [r1, #-900]
-	ldr	r1, .L816+8
+	ldr	r3, .L824+4
+	strb	r2, [r1, #-896]
+	ldr	r1, .L824+8
 	strb	r2, [r3, #3762]
 	movw	r2, #2902
 	ldrh	r2, [r1, r2]
 	cmp	r2, #256
 	str	r2, [r3, #856]
 	movhi	r2, #512
-	bhi	.L815
+	bhi	.L823
 	cmp	r2, #128
-	bls	.L806
+	bls	.L814
 	mov	r2, #256
-.L815:
+.L823:
 	str	r2, [r3, #856]
-.L806:
+.L814:
 	mov	r1, #0
 	mov	r2, #8
-	ldr	r0, .L816+12
+	ldr	r0, .L824+12
 	mov	r6, #0
 	bl	ftl_memset
 	mov	r1, #0
 	mov	r2, #32
-	ldr	r0, .L816+16
+	ldr	r0, .L824+16
 	bl	ftl_memset
-	ldr	r0, .L816+20
+	ldr	r0, .L824+20
 	mov	r1, #0
 	mov	r2, #128
 	bl	ftl_memset
-	ldr	r7, .L816+24
-	ldr	r5, .L816+4
+	ldr	r7, .L824+24
+	ldr	r5, .L824+4
 	mov	r8, r7
-.L808:
+.L816:
 	ldr	r4, [r5, #3624]
 	mov	r1, r8
 	add	r0, r4, #1
 	ldrb	r2, [r4, #0]	@ zero_extendqisi2
 	bl	FlashMemCmp8
 	cmp	r0, #0
-	bne	.L807
+	bne	.L815
 	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	add	r2, r5, r3, asl #2
 	str	r0, [r2, #3588]
@@ -7134,28 +7203,28 @@ FlashDieInfoInit:
 	add	r3, r3, #1
 	strb	r3, [r5, #3762]
 	strb	r6, [r2, #3764]
-.L807:
+.L815:
 	add	r6, r6, #1
 	add	r8, r8, #8
 	cmp	r6, #4
-	bne	.L808
-	ldr	r5, .L816+4
-	ldr	r3, .L816
+	bne	.L816
+	ldr	r5, .L824+4
+	ldr	r3, .L824
 	ldrb	r2, [r5, #3762]	@ zero_extendqisi2
-	strb	r2, [r3, #-900]
+	strb	r2, [r3, #-896]
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #2
-	bne	.L809
+	bne	.L817
 	add	sl, r4, #1
 	mov	r6, #0
 	mov	r8, r5
-.L812:
+.L820:
 	mov	r0, sl
 	mov	r1, r7
 	ldrb	r2, [r4, #0]	@ zero_extendqisi2
 	bl	FlashMemCmp8
 	cmp	r0, #0
-	bne	.L810
+	bne	.L818
 	ldrb	r1, [r4, #13]	@ zero_extendqisi2
 	ldr	r0, [r5, #856]
 	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
@@ -7173,25 +7242,25 @@ FlashDieInfoInit:
 	add	r3, r3, #1
 	strb	r3, [r8, #3762]
 	strb	r6, [r2, #3764]
-.L810:
+.L818:
 	add	r6, r6, #1
 	add	r7, r7, #8
 	cmp	r6, #4
-	bne	.L812
-.L809:
-	ldr	r3, .L816+4
+	bne	.L820
+.L817:
+	ldr	r3, .L824+4
 	ldrb	r1, [r4, #13]	@ zero_extendqisi2
-	ldr	r2, .L816
+	ldr	r2, .L824
 	ldrb	r3, [r3, #3762]	@ zero_extendqisi2
 	mul	r1, r1, r3
 	ldrh	r3, [r4, #14]
 	mul	r1, r3, r1
-	ldr	r3, .L816+28
+	ldr	r3, .L824+28
 	strh	r1, [r2, r3]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L817:
+.L825:
 	.align	2
-.L816:
+.L824:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR1
@@ -7199,7 +7268,7 @@ FlashDieInfoInit:
 	.word	.LANCHOR0+3588
 	.word	.LANCHOR0+3628
 	.word	.LANCHOR0+2980
-	.word	-898
+	.word	-894
 	.fnend
 	.size	FlashDieInfoInit, .-FlashDieInfoInit
 	.align	2
@@ -7213,85 +7282,85 @@ BuildFlashLsbPageTable:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r4, r1
-	bne	.L819
-	ldr	r3, .L858
-.L820:
+	bne	.L827
+	ldr	r3, .L866
+.L828:
 	strh	r0, [r3, #2]!	@ movhi
 	add	r0, r0, #1
 	uxth	r0, r0
 	cmp	r0, #256
-	bne	.L820
-	b	.L821
-.L819:
+	bne	.L828
+	b	.L829
+.L827:
 	cmp	r0, #1
-	bne	.L822
-	ldr	r0, .L858+4
+	bne	.L830
+	ldr	r0, .L866+4
 	mov	r2, #0
 	mov	r3, r2
-.L825:
+.L833:
 	uxth	r1, r3
 	cmp	r1, #3
-	bls	.L823
+	bls	.L831
 	tst	r3, #1
 	moveq	r1, #2
 	movne	r1, #3
 	rsb	r1, r1, r2
 	uxth	r1, r1
-.L823:
+.L831:
 	add	r3, r3, #1
 	strh	r1, [r2, r0]	@ movhi
 	cmp	r3, #256
 	add	r2, r2, #2
-	bne	.L825
-	b	.L821
-.L822:
+	bne	.L833
+	b	.L829
+.L830:
 	cmp	r0, #2
-	bne	.L826
+	bne	.L834
 	mov	r3, #0
-	ldr	r0, .L858
+	ldr	r0, .L866
 	movw	r2, #65535
 	mov	r1, r3
-	b	.L857
-.L829:
+	b	.L865
+.L837:
 	cmp	r3, #1
 	movls	r1, r3
 	movhi	r1, r2
-.L857:
+.L865:
 	add	r3, r3, #1
 	add	r2, r2, #2
 	strh	r1, [r0, #2]!	@ movhi
 	uxth	r3, r3
 	uxth	r2, r2
 	cmp	r3, #256
-	bne	.L829
-	b	.L821
-.L826:
+	bne	.L837
+	b	.L829
+.L834:
 	cmp	r0, #3
-	bne	.L830
-	ldr	r0, .L858+4
+	bne	.L838
+	ldr	r0, .L866+4
 	mov	r2, #0
 	mov	r3, r2
-.L833:
+.L841:
 	uxth	r1, r3
 	cmp	r1, #5
-	bls	.L831
+	bls	.L839
 	tst	r3, #1
 	moveq	r1, #4
 	movne	r1, #5
 	rsb	r1, r1, r2
 	uxth	r1, r1
-.L831:
+.L839:
 	add	r3, r3, #1
 	strh	r1, [r2, r0]	@ movhi
 	cmp	r3, #256
 	add	r2, r2, #2
-	bne	.L833
-	b	.L821
-.L830:
+	bne	.L841
+	b	.L829
+.L838:
 	cmp	r0, #4
 	mov	r2, #0
-	bne	.L834
-	ldr	r3, .L858+8
+	bne	.L842
+	ldr	r3, .L866+8
 	movw	r1, #3076
 	strh	r2, [r3, r1]	@ movhi
 	movw	r2, #3078
@@ -7307,7 +7376,7 @@ BuildFlashLsbPageTable:
 	mov	r1, #5
 	strh	r0, [r3, r2]	@ movhi
 	add	r2, r2, #2
-	ldr	r0, .L858+12
+	ldr	r0, .L866+12
 	strh	r1, [r3, r2]	@ movhi
 	mov	r2, #3088
 	mov	r1, #7
@@ -7317,7 +7386,7 @@ BuildFlashLsbPageTable:
 	strh	r1, [r3, r2]	@ movhi
 	mov	r2, #16
 	mov	r3, r1
-.L836:
+.L844:
 	tst	r3, #1
 	add	r3, r3, #1
 	moveq	r1, #6
@@ -7327,78 +7396,78 @@ BuildFlashLsbPageTable:
 	add	r2, r2, #2
 	strh	r1, [r0, #2]!	@ movhi
 	uxth	r2, r2
-	bne	.L836
-	b	.L821
-.L834:
+	bne	.L844
+	b	.L829
+.L842:
 	cmp	r0, #5
-	bne	.L837
-	ldr	r1, .L858
+	bne	.L845
+	ldr	r1, .L866
 	mov	r3, r2
-.L838:
+.L846:
 	strh	r3, [r1, #2]!	@ movhi
 	add	r3, r3, #1
 	uxth	r3, r3
 	cmp	r3, #16
-	bne	.L838
-	ldr	r2, .L858+16
-.L839:
+	bne	.L846
+	ldr	r2, .L866+16
+.L847:
 	strh	r3, [r2, #2]!	@ movhi
 	add	r3, r3, #2
 	uxth	r3, r3
 	cmp	r3, #496
-	bne	.L839
-	b	.L821
-.L837:
+	bne	.L847
+	b	.L829
+.L845:
 	cmp	r0, #6
-	bne	.L821
-	ldr	r0, .L858
+	bne	.L829
+	ldr	r0, .L866
 	mov	r3, r2
-.L842:
+.L850:
 	uxth	r1, r3
 	cmp	r1, #5
-	bls	.L840
+	bls	.L848
 	tst	r3, #1
 	moveq	r1, #10
 	movne	r1, #12
 	rsb	r1, r1, r2
 	uxth	r1, r1
-.L840:
+.L848:
 	add	r3, r3, #1
 	add	r2, r2, #3
 	cmp	r3, #256
 	strh	r1, [r0, #2]!	@ movhi
 	uxth	r2, r2
-	bne	.L842
-.L821:
+	bne	.L850
+.L829:
 	mov	r2, #1024
-	ldr	r0, .L858+20
+	ldr	r0, .L866+20
 	mov	r1, #255
 	uxth	r4, r4
 	bl	ftl_memset
-	ldr	r2, .L858
+	ldr	r2, .L866
 	mov	r3, #0
-	ldr	r0, .L858+24
-	b	.L843
-.L844:
+	ldr	r0, .L866+24
+	b	.L851
+.L852:
 	ldrh	r1, [r2, #2]!
 	add	r3, r3, #1
 	uxth	r3, r3
 	add	ip, r0, r1, asl #1
-	sub	ip, ip, #896
+	sub	ip, ip, #892
 	strh	r1, [ip, #0]	@ movhi
-.L843:
+.L851:
 	cmp	r3, r4
-	bcc	.L844
+	bcc	.L852
 	ldmfd	sp!, {r4, pc}
-.L859:
+.L867:
 	.align	2
-.L858:
+.L866:
 	.word	.LANCHOR0+3074
 	.word	.LANCHOR0+3076
 	.word	.LANCHOR0
 	.word	.LANCHOR0+3090
 	.word	.LANCHOR0+3106
-	.word	.LANCHOR2-896
+	.word	.LANCHOR2-892
 	.word	.LANCHOR2
 	.fnend
 	.size	BuildFlashLsbPageTable, .-BuildFlashLsbPageTable
@@ -7424,15 +7493,15 @@ ftl_memcpy32:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	ip, r3
-	b	.L862
-.L863:
+	b	.L870
+.L871:
 	ldr	r4, [r1, r3]
 	add	ip, ip, #1
 	str	r4, [r0, r3]
 	add	r3, r3, #4
-.L862:
+.L870:
 	cmp	ip, r2
-	bne	.L863
+	bne	.L871
 	ldmfd	sp!, {r4, pc}
 	.fnend
 	.size	ftl_memcpy32, .-ftl_memcpy32
@@ -7458,22 +7527,22 @@ js_hash:
 	mov	r2, #0
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
-	ldr	r0, .L868
-	b	.L866
-.L867:
+	ldr	r0, .L876
+	b	.L874
+.L875:
 	mov	ip, r0, asl #5
 	ldrb	r4, [r3, r2]	@ zero_extendqisi2
 	add	ip, ip, r0, lsr #2
 	add	r2, r2, #1
 	add	ip, ip, r4
 	eor	r0, r0, ip
-.L866:
+.L874:
 	cmp	r2, r1
-	bne	.L867
+	bne	.L875
 	ldmfd	sp!, {r4, pc}
-.L869:
+.L877:
 	.align	2
-.L868:
+.L876:
 	.word	1204201446
 	.fnend
 	.size	js_hash, .-js_hash
@@ -7485,12 +7554,12 @@ timer_get_time:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L871
+	ldr	r3, .L879
 	ldr	r0, [r3, #0]
 	b	jiffies_to_msecs
-.L872:
+.L880:
 	.align	2
-.L871:
+.L879:
 	.word	jiffies
 	.fnend
 	.size	timer_get_time, .-timer_get_time
@@ -7504,19 +7573,19 @@ FlashSramLoadStore:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	cmp	r2, #0
-	ldr	r4, .L876
+	ldr	r4, .L884
 	mov	ip, r0
 	mov	r2, r3
-	ldr	r4, [r4, #128]
+	ldr	r4, [r4, #132]
 	add	r4, r4, #4096
 	add	r1, r4, r1
 	movne	r0, r1
 	movne	r1, ip
 	ldmfd	sp!, {r4, lr}
 	b	memcpy
-.L877:
+.L885:
 	.align	2
-.L876:
+.L884:
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashSramLoadStore, .-FlashSramLoadStore
@@ -7561,12 +7630,12 @@ rk_ftl_get_capacity:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L882
-	ldr	r0, [r3, #3952]
+	ldr	r3, .L890
+	ldr	r0, [r3, #3956]
 	bx	lr
-.L883:
+.L891:
 	.align	2
-.L882:
+.L890:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
@@ -7619,47 +7688,47 @@ rknand_print_hex:
 	mov	r7, r2
 	mov	sl, r3
 	mov	r4, r5
-	b	.L888
-.L894:
+	b	.L896
+.L902:
 	cmp	r5, #0
-	bne	.L889
-	ldr	r0, .L896
+	bne	.L897
+	ldr	r0, .L904
 	mov	r1, r8
 	mov	r2, r6
 	mov	r3, r4
 	bl	printk
-.L889:
+.L897:
 	cmp	r7, #4
-	ldreq	r0, .L896+4
+	ldreq	r0, .L904+4
 	ldreq	r1, [r6, r4, asl #2]
-	beq	.L895
+	beq	.L903
 	cmp	r7, #2
 	moveq	r3, r4, asl #1
-	ldreq	r0, .L896+4
+	ldreq	r0, .L904+4
 	ldreqsh	r1, [r6, r3]
-	ldrne	r0, .L896+4
+	ldrne	r0, .L904+4
 	ldrneb	r1, [r6, r4]	@ zero_extendqisi2
-.L895:
+.L903:
 	add	r5, r5, #1
 	bl	printk
 	cmp	r5, #15
-	bls	.L893
-	ldr	r0, .L896+8
+	bls	.L901
+	ldr	r0, .L904+8
 	mov	r5, #0
-	ldr	r1, .L896+12
+	ldr	r1, .L904+12
 	bl	printk
-.L893:
+.L901:
 	add	r4, r4, #1
-.L888:
+.L896:
 	cmp	r4, sl
-	bne	.L894
-	ldr	r0, .L896+8
-	ldr	r1, .L896+12
+	bne	.L902
+	ldr	r0, .L904+8
+	ldr	r1, .L904+12
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	b	printk
-.L897:
+.L905:
 	.align	2
-.L896:
+.L904:
 	.word	.LC84
 	.word	.LC85
 	.word	.LC78
@@ -7675,15 +7744,15 @@ NandcXferComp:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
 	.save {r0, r1, r4, r5, r6, lr}
-	ldr	r6, .L921
+	ldr	r6, .L929
 	add	r0, r6, r0, asl #3
-	ldr	r3, [r6, #3780]
+	ldr	r3, [r6, #3788]
 	ldr	r4, [r0, #864]
 	cmp	r3, #3
-	bls	.L915
+	bls	.L923
 	ldr	r3, [r4, #16]
 	tst	r3, #4
-	beq	.L915
+	beq	.L923
 	mov	r0, r4
 	bl	wait_for_nandc_xfer_completed
 	ldr	r5, [r4, #16]
@@ -7691,130 +7760,130 @@ NandcXferComp:
 	ands	r5, r5, #2
 	str	r3, [sp, #0]
 	movne	r5, #0
-	bne	.L919
-	b	.L920
-.L905:
-	ldr	r3, [r6, #3780]
+	bne	.L927
+	b	.L928
+.L913:
+	ldr	r3, [r6, #3788]
 	cmp	r3, #5
-	bls	.L902
+	bls	.L910
 	ldr	r3, [r4, #0]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	tst	r3, #8192
-	beq	.L902
+	beq	.L910
 	ldr	r3, [sp, #4]
 	tst	r3, #131072
-	bne	.L903
-.L902:
+	bne	.L911
+.L910:
 	add	r5, r5, #1
 	bic	r3, r5, #-16777216
 	cmp	r3, #0
-	bne	.L919
+	bne	.L927
 	ldr	r2, [r4, #28]
 	mov	r1, r5
 	ldr	r3, [sp, #0]
 	ubfx	r2, r2, #16, #5
-	ldr	r0, .L921+4
+	ldr	r0, .L929+4
 	ubfx	r3, r3, #22, #6
 	bl	printk
-	ldr	r0, .L921+8
+	ldr	r0, .L929+8
 	mov	r1, r4
 	mov	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-.L919:
+.L927:
 	ldr	r2, [r4, #28]
 	ldr	r3, [sp, #0]
 	ubfx	r2, r2, #16, #5
 	ubfx	r3, r3, #22, #6
 	cmp	r2, r3
-	blt	.L905
-.L903:
-	ldr	r4, .L921
-	ldr	r3, [r4, #3816]
+	blt	.L913
+.L911:
+	ldr	r4, .L929
+	ldr	r3, [r4, #3820]
 	cmp	r3, #0
-	beq	.L906
+	beq	.L914
 	ldr	r1, [sp, #0]
 	mov	r2, #0
-	ldr	r0, [r4, #3808]
+	ldr	r0, [r4, #3812]
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #10
 	bl	rknand_dma_unmap_single
 	ldr	r1, [sp, #0]
-	ldr	r0, [r4, #3812]
+	ldr	r0, [r4, #3816]
 	mov	r2, #0
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #7
 	bl	rknand_dma_unmap_single
-	b	.L906
-.L909:
+	b	.L914
+.L917:
 	ldr	r3, [r4, #8]
 	add	r5, r5, #1
 	str	r3, [sp, #0]
 	bic	r3, r5, #-16777216
 	cmp	r3, #0
-	bne	.L920
+	bne	.L928
 	ldr	r2, [sp, #0]
 	mov	r1, r5
 	ldr	r3, [r4, #28]
-	ldr	r0, .L921+12
+	ldr	r0, .L929+12
 	ubfx	r3, r3, #16, #5
 	bl	printk
-	ldr	r0, .L921+8
+	ldr	r0, .L929+8
 	mov	r1, r4
 	mov	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-.L920:
+.L928:
 	ldr	r3, [sp, #0]
 	tst	r3, #1048576
-	beq	.L909
-	ldr	r6, .L921
-	ldr	r3, [r6, #3824]
+	beq	.L917
+	ldr	r6, .L929
+	ldr	r3, [r6, #3828]
 	cmp	r3, #0
-	beq	.L910
+	beq	.L918
 	mov	r0, r4
 	bl	NandcSendDumpDataStart
-.L910:
-	ldr	r3, [r6, #3816]
-	ldr	r5, .L921
+.L918:
+	ldr	r3, [r6, #3820]
+	ldr	r5, .L929
 	cmp	r3, #0
-	beq	.L911
+	beq	.L919
 	ldr	r1, [sp, #0]
 	mov	r2, #1
-	ldr	r0, [r5, #3808]
+	ldr	r0, [r5, #3812]
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #10
 	bl	rknand_dma_unmap_single
 	ldr	r1, [sp, #0]
-	ldr	r0, [r5, #3812]
+	ldr	r0, [r5, #3816]
 	mov	r2, #1
 	ubfx	r1, r1, #22, #5
 	mov	r1, r1, asl #7
 	bl	rknand_dma_unmap_single
-.L911:
-	ldr	r3, .L921
-	ldr	r3, [r3, #3824]
+.L919:
+	ldr	r3, .L929
+	ldr	r3, [r3, #3828]
 	cmp	r3, #0
-	beq	.L906
+	beq	.L914
 	mov	r0, r4
 	bl	NandcSendDumpDataDone
-.L906:
-	ldr	r3, .L921
+.L914:
+	ldr	r3, .L929
 	mov	r2, #0
-	str	r2, [r3, #3816]
-	b	.L898
-.L915:
+	str	r2, [r3, #3820]
+	b	.L906
+.L923:
 	ldr	r3, [r4, #8]
 	str	r3, [sp, #0]
 	ldr	r3, [sp, #0]
 	tst	r3, #1048576
-	beq	.L915
-.L898:
+	beq	.L923
+.L906:
 	ldmfd	sp!, {r2, r3, r4, r5, r6, pc}
-.L922:
+.L930:
 	.align	2
-.L921:
+.L929:
 	.word	.LANCHOR0
 	.word	.LC87
 	.word	.LC88
@@ -7832,7 +7901,7 @@ NandcXferData:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r4, r3
 	mov	r9, r3
-	ldr	r3, .L961
+	ldr	r3, .L969
 	.pad #92
 	sub	sp, sp, #92
 	tst	r4, #63
@@ -7842,15 +7911,15 @@ NandcXferData:
 	mov	sl, r2
 	ldr	r5, [sp, #128]
 	ldr	r6, [r3, #864]
-	bne	.L924
+	bne	.L932
 	cmp	r5, #0
-	bne	.L925
+	bne	.L933
 	add	r0, sp, #24
 	mov	r1, #255
 	mov	r2, #64
 	add	r5, sp, #24
 	bl	ftl_memset
-.L925:
+.L933:
 	mov	r0, r7
 	mov	r1, fp
 	mov	r2, sl
@@ -7861,19 +7930,19 @@ NandcXferData:
 	bl	NandcXferComp
 	cmp	fp, #0
 	movne	r4, #0
-	bne	.L926
-	ldr	r1, .L961
+	bne	.L934
+	ldr	r1, .L969
 	mov	r0, sl, lsr #1
 	mov	r3, fp
 	mov	r2, fp
-	ldr	ip, [r1, #3828]
+	ldr	ip, [r1, #3832]
 	mov	r4, r1
 	cmp	ip, #24
 	movhi	ip, #128
 	movls	ip, #64
-	b	.L928
-.L929:
-	ldr	r1, [r4, #3796]
+	b	.L936
+.L937:
+	ldr	r1, [r4, #3800]
 	mov	r3, r3, lsr #2
 	add	r2, r2, #1
 	ldr	r3, [r1, r3, asl #2]
@@ -7886,29 +7955,29 @@ NandcXferData:
 	strb	r3, [r5, #3]
 	add	r5, r5, #4
 	mov	r3, r7
-.L928:
+.L936:
 	cmp	r2, r0
 	add	r7, r3, ip
-	ldr	r1, .L961
-	bcc	.L929
+	ldr	r1, .L969
+	bcc	.L937
 	mov	r3, #0
-	ldr	r0, [r1, #3828]
+	ldr	r0, [r1, #3832]
 	mov	sl, sl, lsr #2
-	ldr	r1, [r1, #3780]
+	ldr	r1, [r1, #3788]
 	mov	r4, r3
-	b	.L930
-.L936:
+	b	.L938
+.L944:
 	add	r2, r3, #8
 	ldr	r2, [r6, r2, asl #2]
 	str	r2, [sp, #20]
 	ldr	r2, [sp, #20]
 	tst	r2, #4
-	bne	.L951
+	bne	.L959
 	ldr	r2, [sp, #20]
 	ands	r2, r2, #32768
-	bne	.L951
+	bne	.L959
 	cmp	r1, #5
-	bls	.L932
+	bls	.L940
 	ldr	r7, [sp, #20]
 	ldr	ip, [sp, #20]
 	ldr	r5, [sp, #20]
@@ -7927,10 +7996,10 @@ NandcXferData:
 	ubfxls	ip, ip, #16, #5
 	ubfxhi	r2, r2, #27, #1
 	ubfxls	r2, r2, #29, #1
-	b	.L959
-.L932:
+	b	.L967
+.L940:
 	cmp	r1, #3
-	bls	.L934
+	bls	.L942
 	ldr	r7, [sp, #20]
 	ldr	ip, [sp, #20]
 	ldr	r5, [sp, #20]
@@ -7949,31 +8018,31 @@ NandcXferData:
 	ubfxls	ip, ip, #16, #5
 	ubfxhi	r2, r2, #28, #1
 	ubfxls	r2, r2, #30, #1
-.L959:
+.L967:
 	orr	r2, ip, r2, asl #5
-.L934:
+.L942:
 	cmp	r4, r2
 	movcc	r4, r2
-	b	.L931
-.L951:
+	b	.L939
+.L959:
 	mvn	r4, #0
-.L931:
+.L939:
 	add	r3, r3, #1
-.L930:
+.L938:
 	cmp	r3, sl
-	bcs	.L926
+	bcs	.L934
 	cmp	r0, #0
-	bne	.L936
-.L926:
+	bne	.L944
+.L934:
 	mov	r3, #0
 	str	r3, [r6, #16]
-	b	.L937
-.L924:
+	b	.L945
+.L932:
 	cmp	r1, #1
 	mov	r8, #0
-	bne	.L957
-	b	.L938
-.L941:
+	bne	.L965
+	b	.L946
+.L949:
 	cmp	r5, #0
 	and	r4, r8, #3
 	mov	r0, r6
@@ -7997,12 +8066,12 @@ NandcXferData:
 	mov	r0, r7
 	bl	NandcXferComp
 	add	r9, r9, #1024
-.L938:
+.L946:
 	cmp	r8, sl
-	bcc	.L941
+	bcc	.L949
 	mov	r4, #0
-	b	.L937
-.L957:
+	b	.L945
+.L965:
 	mov	r1, r8
 	mov	r2, #2
 	mov	r3, r8
@@ -8014,15 +8083,15 @@ NandcXferData:
 	mov	ip, r8
 	mov	fp, r6
 	mov	r6, r5
-	b	.L960
-.L946:
+	b	.L968
+.L954:
 	mov	r0, r7
 	bl	NandcXferComp
 	ldr	r3, [fp, #32]
 	add	ip, r5, #2
 	cmp	ip, sl
 	str	r3, [sp, #20]
-	bcs	.L943
+	bcs	.L951
 	mov	r3, #0
 	mov	r0, r7
 	str	r3, [sp, #0]
@@ -8033,11 +8102,11 @@ NandcXferData:
 	str	ip, [sp, #8]
 	bl	NandcXferStart
 	ldr	ip, [sp, #8]
-.L943:
+.L951:
 	ldr	r3, [sp, #20]
 	tst	r3, #4
 	mvnne	r4, #0
-	bne	.L944
+	bne	.L952
 	ldr	r2, [sp, #20]
 	ldr	r3, [sp, #20]
 	ubfx	r2, r2, #3, #5
@@ -8045,7 +8114,7 @@ NandcXferData:
 	orr	r3, r2, r3, asl #5
 	cmp	r4, r3
 	movcc	r4, r3
-.L944:
+.L952:
 	cmp	r6, #0
 	and	r2, r8, #3
 	mov	r0, fp
@@ -8060,34 +8129,34 @@ NandcXferData:
 	str	r5, [sp, #0]
 	bl	NandcCopy1KB
 	ldr	ip, [sp, #8]
-.L960:
+.L968:
 	cmp	ip, sl
 	mov	r5, ip
-	bcc	.L946
+	bcc	.L954
 	mov	r6, fp
 	ldr	fp, [sp, #12]
-.L937:
-	ldr	r3, .L961
+.L945:
+	ldr	r3, .L969
 	rsbs	fp, fp, #1
 	movcc	fp, #0
-	ldr	r3, [r3, #3780]
+	ldr	r3, [r3, #3788]
 	cmp	r3, #5
 	movls	fp, #0
 	cmp	fp, #0
-	beq	.L947
+	beq	.L955
 	ldr	r3, [r6, #0]
 	and	r2, r3, #139264
 	cmp	r2, #139264
 	orreq	r3, r3, #131072
 	streq	r3, [r6, #0]
 	mvneq	r4, #0
-.L947:
+.L955:
 	mov	r0, r4
 	add	sp, sp, #92
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L962:
+.L970:
 	.align	2
-.L961:
+.L969:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcXferData, .-NandcXferData
@@ -8101,23 +8170,23 @@ FlashProgPage:
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, lr}
 	mov	r8, r3
-	ldr	r3, .L966
+	ldr	r3, .L974
 	subs	r4, r0, #0
 	mov	r5, r1
 	mov	r6, r2
 	ldrb	r7, [r3, #2901]	@ zero_extendqisi2
-	bne	.L964
-	ldr	r3, .L966+4
+	bne	.L972
+	ldr	r3, .L974+4
 	ldrb	r2, [r3, #853]	@ zero_extendqisi2
 	ldr	r1, [r3, #856]
 	mul	r2, r1, r2
 	cmp	r5, r2
-	bcs	.L964
+	bcs	.L972
 	ldrb	r3, [r3, #852]	@ zero_extendqisi2
 	cmp	r3, #0
 	subeq	r7, r7, #2
 	movne	r7, #4
-.L964:
+.L972:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -8144,9 +8213,9 @@ FlashProgPage:
 	bl	NandcFlashDeCs
 	and	r0, r5, #1
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L967:
+.L975:
 	.align	2
-.L966:
+.L974:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -8161,59 +8230,59 @@ FlashPageProgMsbFFData:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r4, r2
-	ldr	r2, .L975
+	ldr	r2, .L983
 	mov	r7, r1
 	mov	r8, r0
 	ldrb	r1, [r2, #928]	@ zero_extendqisi2
 	ldr	r3, [r2, #3624]
 	cmp	r1, #0
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
-	beq	.L969
-	ldr	r1, [r2, #3784]
-	ldr	r2, .L975+4
+	beq	.L977
+	ldr	r1, [r2, #3776]
+	ldr	r2, .L983+4
 	cmp	r1, r2
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L969:
+.L977:
 	sub	r2, r3, #5
 	uxtb	r2, r2
 	cmp	r3, #68
 	cmpne	r2, #2
-	bls	.L972
+	bls	.L980
 	cmp	r3, #35
 	cmpne	r3, #19
-	beq	.L972
+	beq	.L980
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L973:
+.L981:
 	add	r3, r5, r4, asl #1
-	sub	r3, r3, #896
+	sub	r3, r3, #892
 	ldrh	r3, [r3, #0]
 	cmp	r3, sl
 	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
 	mov	r1, #255
 	mov	r2, #32768
-	ldr	r0, [r5, #132]
+	ldr	r0, [r5, #136]
 	bl	ftl_memset
 	add	r1, r4, r7
 	add	r4, r4, #1
 	mov	r0, r8
-	ldr	r2, [r5, #132]
+	ldr	r2, [r5, #136]
 	mov	r3, #0
 	bl	FlashProgPage
 	uxth	r4, r4
-	b	.L974
-.L972:
-	ldr	r6, .L975
+	b	.L982
+.L980:
+	ldr	r6, .L983
 	movw	sl, #65535
-	ldr	r5, .L975+8
-.L974:
+	ldr	r5, .L983+8
+.L982:
 	ldr	r3, [r6, #3624]
 	ldrh	r3, [r3, #10]
 	cmp	r3, r4
-	bhi	.L973
+	bhi	.L981
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L976:
+.L984:
 	.align	2
-.L975:
+.L983:
 	.word	.LANCHOR0
 	.word	1446522928
 	.word	.LANCHOR2
@@ -8229,19 +8298,19 @@ FlashReadRawPage:
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, lr}
 	mov	r8, r3
-	ldr	r3, .L980
+	ldr	r3, .L988
 	subs	r4, r0, #0
 	mov	r6, r1
 	mov	r5, r2
 	ldrb	r7, [r3, #2901]	@ zero_extendqisi2
-	bne	.L978
-	ldr	r3, .L980+4
+	bne	.L986
+	ldr	r3, .L988+4
 	ldrb	r2, [r3, #853]	@ zero_extendqisi2
 	ldr	r3, [r3, #856]
 	mul	r3, r3, r2
 	cmp	r1, r3
 	movcc	r7, #4
-.L978:
+.L986:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -8262,9 +8331,9 @@ FlashReadRawPage:
 	bl	NandcFlashDeCs
 	mov	r0, r5
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L981:
+.L989:
 	.align	2
-.L980:
+.L988:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -8279,9 +8348,9 @@ HynixReadRetrial:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r7, r3
-	ldr	r3, .L996
+	ldr	r3, .L1004
 	mov	sl, r2
-	ldr	fp, .L996
+	ldr	fp, .L1004
 	mov	r6, r0
 	add	r2, r3, r0
 	str	r1, [sp, #4]
@@ -8295,12 +8364,12 @@ HynixReadRetrial:
 	ldreqb	r4, [r2, #20]	@ zero_extendqisi2
 	bl	NandcWaitFlashReady
 	mov	ip, fp
-	b	.L984
-.L989:
+	b	.L992
+.L997:
 	add	r4, r4, #1
 	ldrb	r1, [fp, #1]	@ zero_extendqisi2
 	mov	r0, r6
-	ldr	r2, .L996+4
+	ldr	r2, .L1004+4
 	uxtb	r4, r4
 	str	ip, [sp, #0]
 	cmp	r4, r9
@@ -8314,28 +8383,28 @@ HynixReadRetrial:
 	bl	FlashReadRawPage
 	ldr	ip, [sp, #0]
 	cmn	r0, #1
-	beq	.L986
-	ldrb	r3, [ip, #3832]	@ zero_extendqisi2
+	beq	.L994
+	ldrb	r3, [ip, #3836]	@ zero_extendqisi2
 	cmn	r5, #1
 	moveq	r5, r0
 	add	r3, r3, r3, asl #1
 	cmp	r0, r3, lsr #2
-	bcc	.L995
+	bcc	.L1003
 	mov	r7, #0
 	mov	sl, r7
-.L986:
+.L994:
 	add	r8, r8, #1
-.L984:
+.L992:
 	cmp	r8, r9
-	bcc	.L989
-	b	.L988
-.L995:
+	bcc	.L997
+	b	.L996
+.L1003:
 	mov	r5, r0
-.L988:
-	ldr	r3, .L996
+.L996:
+	ldr	r3, .L1004
 	add	r6, r3, r6
 	ldr	r2, [r3, #3624]
-	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
 	ldrb	r2, [r2, #19]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	r2, #7
@@ -8350,9 +8419,9 @@ HynixReadRetrial:
 	moveq	r0, r5
 	movne	r0, #256
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L997:
+.L1005:
 	.align	2
-.L996:
+.L1004:
 	.word	.LANCHOR0
 	.word	.LANCHOR0+4
 	.fnend
@@ -8362,113 +8431,150 @@ HynixReadRetrial:
 	.type	MicronReadRetrial, %function
 MicronReadRetrial:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	mov	r9, r0
-	ldr	r4, .L1011
 	mov	sl, r3
-	.pad #28
-	sub	sp, sp, #28
-	ldrb	r0, [r4, #3832]	@ zero_extendqisi2
-	ldrb	r3, [r4, #928]	@ zero_extendqisi2
-	str	r1, [sp, #16]
+	ldr	r3, .L1024
+	mov	r9, r0
+	.pad #36
+	sub	sp, sp, #36
+	ldrb	r0, [r3, #3836]	@ zero_extendqisi2
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	str	r1, [sp, #24]
 	cmp	r3, #0
 	str	r2, [sp, #20]
 	addeq	r0, r0, r0, asl #1
 	ubfxeq	r0, r0, #2, #8
-	beq	.L1010
+	beq	.L1023
 	mov	r1, #3
 	bl	__aeabi_idiv
 	uxtb	r0, r0
-.L1010:
-	add	r4, r4, r9, asl #3
-	str	r0, [sp, #12]
+.L1023:
+.L1008:
+	mov	r2, #0
+	ldr	r3, .L1024
+	mvn	r4, #0
+	mov	r6, r2
+	add	r3, r3, r9, asl #3
+	str	r0, [sp, #16]
+	str	r2, [sp, #12]
+	str	r3, [sp, #28]
+.L1018:
 	mov	r0, r9
-	mov	r8, #0
+	mov	fp, #0
 	bl	NandcWaitFlashReady
-	ldrb	r7, [r4, #868]	@ zero_extendqisi2
-	ldr	r6, [r4, #864]
-	mov	fp, r8
+	ldr	r2, [sp, #28]
+	ldrb	r7, [r2, #868]	@ zero_extendqisi2
+	ldr	r8, [r2, #864]
 	add	r7, r7, #8
-	mvn	r4, #0
-	add	r5, r6, r7, asl #8
-	b	.L1001
-.L1005:
+	add	r5, r8, r7, asl #8
+	b	.L1009
+.L1013:
 	mov	r3, #239
 	mov	r0, #200
 	str	r3, [r5, #8]
 	mov	r3, #137
 	str	r3, [r5, #4]
 	bl	NandcDelayns
-	add	ip, r8, #1
+	add	ip, fp, #1
 	mov	r0, r9
 	str	ip, [r5, #0]
-	ldr	r1, [sp, #16]
+	ldr	r1, [sp, #24]
 	mov	r3, sl
-	str	fp, [r5, #0]
+	str	r6, [r5, #0]
 	ldr	r2, [sp, #20]
-	str	fp, [r5, #0]
-	str	fp, [r5, #0]
+	str	r6, [r5, #0]
+	str	r6, [r5, #0]
 	str	ip, [sp, #8]
 	bl	FlashReadRawPage
 	ldr	ip, [sp, #8]
 	cmn	r0, #1
-	beq	.L1002
+	beq	.L1010
 	cmn	r4, #1
-	ldr	r2, [sp, #12]
+	ldr	r2, [sp, #16]
 	moveq	r4, r0
 	cmp	r0, r2
-	bcc	.L1009
+	bcc	.L1020
 	mov	sl, #0
 	str	sl, [sp, #20]
-.L1002:
-	mov	r8, ip
-.L1001:
-	ldr	r2, .L1011+4
-	ldrb	r3, [r2, #136]	@ zero_extendqisi2
-	cmp	r8, r3
-	bcc	.L1005
-	b	.L1004
+.L1010:
+	mov	fp, ip
 .L1009:
+	ldr	r2, .L1024+4
+	ldrb	r3, [r2, #140]	@ zero_extendqisi2
+	cmp	fp, r3
+	bcc	.L1013
+	b	.L1012
+.L1020:
 	mov	r4, r0
-.L1004:
+	mov	sl, #0
+	str	sl, [sp, #20]
+.L1012:
 	mov	r3, #239
 	mov	r0, #200
 	str	r3, [r5, #8]
 	mov	r3, #137
 	str	r3, [r5, #4]
 	bl	NandcDelayns
-	ldr	r2, [sp, #12]
-	mov	r3, #0
-	str	r3, [r6, r7, asl #8]
+	ldr	r2, [sp, #16]
+	str	r6, [r8, r7, asl #8]
 	cmp	r4, r2
-	str	r3, [r6, r7, asl #8]
-	str	r3, [r6, r7, asl #8]
-	str	r3, [r6, r7, asl #8]
+	str	r6, [r8, r7, asl #8]
+	str	r6, [r8, r7, asl #8]
 	movcc	r3, #0
 	movcs	r3, #1
 	cmn	r4, #1
+	str	r6, [r8, r7, asl #8]
 	moveq	r3, #0
 	cmp	r3, #0
 	movne	r4, #256
 	cmn	r4, #1
+	movne	r5, #0
+	moveq	r5, #1
+	cmn	r4, #1
 	cmpne	r4, #256
-	bne	.L1007
-	ldr	r0, .L1011+8
-	mov	r1, r8
-	ldr	r2, [sp, #16]
-	mov	r3, r8
+	bne	.L1015
+	mov	r3, fp
+	ldr	r0, .L1024+8
+	mov	r1, fp
+	ldr	r2, [sp, #24]
 	str	r4, [sp, #0]
 	bl	printk
-.L1007:
+	ldr	r3, [sp, #12]
+	cmp	r3, #0
+	bne	.L1016
+	ldr	r2, .L1024
+	ldrb	r3, [r2, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r5, #0
+	andne	r5, r5, #1
+	cmp	r5, #0
+	beq	.L1017
+	mov	r0, r9
+	mov	r1, #3
+	bl	micron_auto_read_calibration_config
+	mov	r3, #1
+	str	r3, [sp, #12]
+	b	.L1018
+.L1015:
+	ldr	r2, [sp, #12]
+	cmp	r2, #0
+	beq	.L1017
+.L1016:
+	mov	r0, r9
+	mov	r1, #0
+	bl	micron_auto_read_calibration_config
+	cmn	r4, #1
+	movne	r4, #256
+.L1017:
 	mov	r0, r4
-	add	sp, sp, #28
+	add	sp, sp, #36
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1012:
+.L1025:
 	.align	2
-.L1011:
+.L1024:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC90
@@ -8488,17 +8594,17 @@ SamsungReadRetrial:
 	mov	r6, r3
 	mov	r9, r1
 	bl	NandcWaitFlashReady
-	ldr	ip, .L1022
+	ldr	ip, .L1035
 	mov	r5, #1
 	mvn	r4, #0
-	ldr	fp, .L1022+4
+	ldr	fp, .L1035+4
 	add	r3, ip, r8, asl #3
 	ldrb	sl, [r3, #868]	@ zero_extendqisi2
 	ldr	r2, [r3, #864]
 	add	sl, sl, #8
 	add	sl, r2, sl, asl #8
-	b	.L1014
-.L1018:
+	b	.L1027
+.L1031:
 	mov	r0, sl
 	uxtb	r1, r5
 	str	ip, [sp, #4]
@@ -8510,32 +8616,32 @@ SamsungReadRetrial:
 	bl	FlashReadRawPage
 	ldr	ip, [sp, #4]
 	cmn	r0, #1
-	beq	.L1015
-	ldrb	r3, [ip, #3832]	@ zero_extendqisi2
+	beq	.L1028
+	ldrb	r3, [ip, #3836]	@ zero_extendqisi2
 	cmn	r4, #1
 	moveq	r4, r0
 	add	r3, r3, r3, asl #1
 	cmp	r0, r3, lsr #2
-	bcc	.L1021
+	bcc	.L1034
 	mov	r6, #0
 	mov	r7, r6
-.L1015:
+.L1028:
 	add	r5, r5, #1
-.L1014:
-	ldrb	r3, [fp, #136]	@ zero_extendqisi2
+.L1027:
+	ldrb	r3, [fp, #140]	@ zero_extendqisi2
 	add	r3, r3, #1
 	cmp	r5, r3
-	bcc	.L1018
-	b	.L1017
-.L1021:
+	bcc	.L1031
+	b	.L1030
+.L1034:
 	mov	r4, r0
-.L1017:
+.L1030:
 	mov	r0, sl
 	mov	r1, #0
 	bl	SamsungSetRRPara
-	ldr	r3, .L1022
+	ldr	r3, .L1035
 	adds	r0, r4, #1
-	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
 	movne	r0, #1
 	add	r3, r3, r3, asl #1
 	cmp	r4, r3, lsr #2
@@ -8545,9 +8651,9 @@ SamsungReadRetrial:
 	moveq	r0, r4
 	movne	r0, #256
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1023:
+.L1036:
 	.align	2
-.L1022:
+.L1035:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -8566,7 +8672,7 @@ ToshibaReadRetrial:
 	mov	r9, r2
 	mov	r7, r3
 	bl	NandcWaitFlashReady
-	ldr	r3, .L1045
+	ldr	r3, .L1058
 	add	r2, r3, r8, asl #3
 	ldr	r1, [r2, #864]
 	ldrb	r4, [r2, #868]	@ zero_extendqisi2
@@ -8577,53 +8683,53 @@ ToshibaReadRetrial:
 	uxtb	r2, r2
 	cmp	r2, #1
 	movls	sl, #0
-	bls	.L1025
-	ldrb	sl, [r3, #3773]	@ zero_extendqisi2
+	bls	.L1038
+	ldrb	sl, [r3, #3780]	@ zero_extendqisi2
 	cmp	sl, #0
-	beq	.L1026
+	beq	.L1039
 	mov	r0, #0
 	mov	sl, #1
 	bl	NandcSetDdrMode
-.L1026:
+.L1039:
 	mov	r3, #92
 	str	r3, [r4, #8]
 	mov	r3, #197
 	str	r3, [r4, #8]
-.L1025:
+.L1038:
 	mov	r6, #1
 	mvn	r5, #0
-	ldr	fp, .L1045
-	b	.L1027
-.L1036:
+	ldr	fp, .L1058
+	b	.L1040
+.L1049:
 	ldrb	r3, [fp, #3761]	@ zero_extendqisi2
 	mov	r0, r4
 	uxtb	r1, r6
 	sub	r3, r3, #67
 	uxtb	r3, r3
 	cmp	r3, #1
-	bhi	.L1028
+	bhi	.L1041
 	bl	SandiskSetRRPara
-	b	.L1029
-.L1028:
+	b	.L1042
+.L1041:
 	bl	ToshibaSetRRPara
-.L1029:
-	ldr	r2, .L1045
+.L1042:
+	ldr	r2, .L1058
 	ldrb	r3, [r2, #3761]	@ zero_extendqisi2
 	cmp	r3, #34
-	bne	.L1030
-	ldr	r2, .L1045+4
-	ldrb	r3, [r2, #136]	@ zero_extendqisi2
+	bne	.L1043
+	ldr	r2, .L1058+4
+	ldrb	r3, [r2, #140]	@ zero_extendqisi2
 	sub	r3, r3, #3
 	cmp	r6, r3
 	moveq	r3, #179
 	streq	r3, [r4, #8]
-.L1030:
+.L1043:
 	cmp	sl, #0
 	mov	r3, #38
 	str	r3, [r4, #8]
 	mov	r3, #93
 	str	r3, [r4, #8]
-	beq	.L1031
+	beq	.L1044
 	mov	r0, #4
 	bl	NandcSetDdrMode
 	ldr	r1, [sp, #4]
@@ -8636,53 +8742,53 @@ ToshibaReadRetrial:
 	str	r3, [sp, #0]
 	bl	NandcSetDdrMode
 	ldr	r3, [sp, #0]
-	b	.L1032
-.L1031:
+	b	.L1045
+.L1044:
 	mov	r3, r7
 	mov	r0, r8
 	ldr	r1, [sp, #4]
 	mov	r2, r9
 	bl	FlashReadRawPage
 	mov	r3, r0
-.L1032:
+.L1045:
 	cmn	r3, #1
-	beq	.L1033
-	ldrb	r2, [fp, #3832]	@ zero_extendqisi2
+	beq	.L1046
+	ldrb	r2, [fp, #3836]	@ zero_extendqisi2
 	cmn	r5, #1
 	moveq	r5, r3
 	add	r2, r2, r2, asl #1
 	cmp	r3, r2, lsr #2
-	bcc	.L1044
+	bcc	.L1057
 	mov	r7, #0
 	mov	r9, r7
-.L1033:
+.L1046:
 	add	r6, r6, #1
-.L1027:
-	ldr	r2, .L1045+4
-	ldrb	r3, [r2, #136]	@ zero_extendqisi2
+.L1040:
+	ldr	r2, .L1058+4
+	ldrb	r3, [r2, #140]	@ zero_extendqisi2
 	add	r3, r3, #1
 	cmp	r6, r3
-	bcc	.L1036
-	b	.L1035
-.L1044:
+	bcc	.L1049
+	b	.L1048
+.L1057:
 	mov	r5, r3
-.L1035:
-	ldr	r6, .L1045
+.L1048:
+	ldr	r6, .L1058
 	mov	r0, r4
 	mov	r1, #0
 	ldrb	r3, [r6, #3761]	@ zero_extendqisi2
 	sub	r3, r3, #67
 	uxtb	r3, r3
 	cmp	r3, #1
-	bhi	.L1037
+	bhi	.L1050
 	bl	SandiskSetRRPara
-	b	.L1038
-.L1037:
+	b	.L1051
+.L1050:
 	bl	ToshibaSetRRPara
-.L1038:
+.L1051:
 	mov	r3, #255
 	str	r3, [r4, #8]
-	ldrb	r3, [r6, #3832]	@ zero_extendqisi2
+	ldrb	r3, [r6, #3836]	@ zero_extendqisi2
 	adds	r2, r5, #1
 	mov	r0, r8
 	movne	r2, #1
@@ -8694,15 +8800,15 @@ ToshibaReadRetrial:
 	movne	r5, #256
 	bl	NandcWaitFlashReady
 	cmp	sl, #0
-	beq	.L1040
+	beq	.L1053
 	mov	r0, #4
 	bl	NandcSetDdrMode
-.L1040:
+.L1053:
 	mov	r0, r5
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1046:
+.L1059:
 	.align	2
-.L1045:
+.L1058:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -8717,44 +8823,44 @@ FlashSavePhyInfo:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r6, #0
-	ldr	r5, .L1054
-	ldr	r7, .L1054+4
-	ldr	r8, .L1054+8
-	ldr	r3, [r5, #144]
-	ldrb	r0, [r5, #148]	@ zero_extendqisi2
-	str	r3, [r5, #140]
+	ldr	r5, .L1067
+	ldr	r7, .L1067+4
+	ldr	r8, .L1067+8
+	ldr	r3, [r5, #148]
+	ldrb	r0, [r5, #152]	@ zero_extendqisi2
+	str	r3, [r5, #144]
 	bl	FlashBchSel
 	mov	r1, #0
 	mov	r2, #2048
-	ldr	r0, [r5, #144]
+	ldr	r0, [r5, #148]
 	bl	ftl_memset
-	ldr	r3, [r5, #140]
-	ldr	r1, .L1054+12
+	ldr	r3, [r5, #144]
+	ldr	r1, .L1067+12
 	mov	r2, #32
 	str	r8, [r3, #0]
-	ldr	r4, [r5, #140]
+	ldr	r4, [r5, #144]
 	ldrb	r3, [r7, #3762]	@ zero_extendqisi2
 	add	r0, r4, #16
 	strh	r3, [r4, #12]	@ movhi
 	ldrb	r3, [r7, #853]	@ zero_extendqisi2
 	strh	r3, [r4, #14]	@ movhi
-	ldrb	r3, [r7, #3773]	@ zero_extendqisi2
+	ldrb	r3, [r7, #3780]	@ zero_extendqisi2
 	str	r3, [r4, #1076]
 	bl	memcpy
 	add	r0, r4, #80
-	ldr	r1, .L1054+16
+	ldr	r1, .L1067+16
 	mov	r2, #8
 	bl	memcpy
 	add	r0, r4, #96
-	ldr	r1, .L1054+20
+	ldr	r1, .L1067+20
 	mov	r2, #32
 	bl	memcpy
-	ldr	r0, [r5, #140]
-	ldr	r1, .L1054+24
+	ldr	r0, [r5, #144]
+	ldr	r1, .L1067+24
 	mov	r2, #32
 	add	r0, r0, #160
 	bl	memcpy
-	ldr	r4, [r5, #140]
+	ldr	r4, [r5, #144]
 	add	r1, r7, #896
 	mov	r2, #32
 	add	r0, r4, #192
@@ -8768,13 +8874,13 @@ FlashSavePhyInfo:
 	bl	JSHash
 	movw	r3, #1592
 	str	r3, [r4, #4]
-	ldr	r3, [r5, #132]
-	str	r3, [r5, #140]
+	ldr	r3, [r5, #136]
+	str	r3, [r5, #144]
 	str	r0, [r4, #8]
 	mov	r0, #0
 	bl	flash_enter_slc_mode
 	mov	r4, r6
-.L1050:
+.L1063:
 	ldr	r1, [r7, #856]
 	mov	r0, #0
 	mov	r2, r0
@@ -8782,57 +8888,57 @@ FlashSavePhyInfo:
 	bl	FlashEraseBlock
 	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r5, #144]
+	ldr	r2, [r5, #148]
 	mov	r3, r0
 	mul	r1, r1, r4
 	bl	FlashProgPage
 	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r5, #144]
+	ldr	r2, [r5, #148]
 	mov	r3, r0
 	mul	r1, r1, r4
 	add	r1, r1, #1
 	bl	FlashProgPage
 	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r5, #132]
+	ldr	r2, [r5, #136]
 	mov	r3, r0
 	mul	r1, r1, r4
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	beq	.L1048
-	ldr	sl, [r5, #140]
+	beq	.L1061
+	ldr	sl, [r5, #144]
 	ldr	r3, [sl, #0]
 	cmp	r3, r8
-	bne	.L1048
+	bne	.L1061
 	add	r0, sl, #12
 	movw	r1, #2036
 	bl	JSHash
 	ldr	r3, [sl, #8]
 	cmp	r3, r0
-	bne	.L1048
+	bne	.L1061
 	add	r3, r4, #1
-	str	r3, [r5, #152]
+	str	r3, [r5, #156]
 	ldr	r3, [r7, #856]
 	add	r6, r6, #1
 	cmp	r6, #1
 	mul	r3, r3, r4
-	str	r3, [r5, #156]
-	bhi	.L1049
-.L1048:
+	str	r3, [r5, #160]
+	bhi	.L1062
+.L1061:
 	add	r4, r4, #1
 	cmp	r4, #4
-	bne	.L1050
-.L1049:
+	bne	.L1063
+.L1062:
 	mov	r0, #0
 	bl	flash_exit_slc_mode
 	cmp	r6, #0
 	mvneq	r0, #0
 	movne	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L1055:
+.L1068:
 	.align	2
-.L1054:
+.L1067:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	1312902724
@@ -8855,98 +8961,98 @@ FlashReadIdbDataRaw:
 	sub	sp, sp, #20
 	mov	r2, #4
 	mov	sl, r0
-	ldr	r1, .L1067
+	ldr	r1, .L1080
 	add	r0, sp, #12
 	bl	memcpy
-	ldr	r3, .L1067+4
-	ldrb	r2, [r3, #3832]	@ zero_extendqisi2
+	ldr	r3, .L1080+4
+	ldrb	r2, [r3, #3836]	@ zero_extendqisi2
 	str	r2, [sp, #4]
-	ldr	r2, [r3, #3784]
-	ldr	r3, .L1067+8
+	ldr	r2, [r3, #3776]
+	ldr	r3, .L1080+8
 	cmp	r2, r3
-	bne	.L1057
+	bne	.L1070
 	mov	r0, #0
 	bl	flash_enter_slc_mode
-.L1057:
-	ldr	r7, .L1067+4
+.L1070:
+	ldr	r7, .L1080+4
 	mov	r0, sl
 	mov	r1, #0
 	mov	r2, #2048
 	bl	ftl_memset
 	mvn	r8, #0
 	mov	r4, #2
-	ldr	r9, .L1067+12
+	ldr	r9, .L1080+12
 	mov	fp, r7
-	b	.L1058
-.L1065:
+	b	.L1071
+.L1078:
 	mov	r6, #0
-.L1060:
+.L1073:
 	add	r3, sp, #12
-	ldr	r5, .L1067+12
+	ldr	r5, .L1080+12
 	ldrb	r0, [r3, r6]	@ zero_extendqisi2
 	bl	FlashBchSel
 	ldr	r1, [r7, #856]
 	mov	r0, #0
-	ldr	r2, [r9, #144]
+	ldr	r2, [r9, #148]
 	mov	r3, r0
 	mul	r1, r1, r4
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1059
+	bne	.L1072
 	add	r6, r6, #1
 	cmp	r6, #4
-	bne	.L1060
-	b	.L1061
-.L1059:
-	ldr	r3, [r5, #144]
+	bne	.L1073
+	b	.L1074
+.L1072:
+	ldr	r3, [r5, #148]
 	ldr	r2, [r3, #0]
-	ldr	r3, .L1067+16
+	ldr	r3, .L1080+16
 	cmp	r2, r3
-	bne	.L1061
+	bne	.L1074
 	add	r3, sp, #16
-	ldr	r0, .L1067+20
+	ldr	r0, .L1080+20
 	add	r6, r3, r6
 	ldrb	r1, [r6, #-4]	@ zero_extendqisi2
 	bl	printk
 	mov	r0, sl
-	ldr	r1, [r5, #144]
+	ldr	r1, [r5, #148]
 	mov	r2, #2048
 	bl	memcpy
-	ldr	r3, [r5, #144]
+	ldr	r3, [r5, #148]
 	ldr	r3, [r3, #512]
 	strb	r3, [fp, #853]
-	ldr	r3, [r5, #152]
+	ldr	r3, [r5, #156]
 	cmp	r3, r4
-	bls	.L1064
-	str	r4, [r5, #152]
+	bls	.L1077
+	str	r4, [r5, #156]
 	bl	FlashSavePhyInfo
 	mov	r8, #0
-.L1061:
+.L1074:
 	add	r4, r4, #1
-.L1058:
+.L1071:
 	ldrb	r3, [r7, #853]	@ zero_extendqisi2
 	cmp	r4, r3
-	bcc	.L1065
-	b	.L1062
-.L1064:
+	bcc	.L1078
+	b	.L1075
+.L1077:
 	mov	r8, #0
-.L1062:
+.L1075:
 	ldr	r0, [sp, #4]
 	bl	FlashBchSel
-	ldr	r3, .L1067+4
-	ldr	r2, [r3, #3784]
-	ldr	r3, .L1067+8
+	ldr	r3, .L1080+4
+	ldr	r2, [r3, #3776]
+	ldr	r3, .L1080+8
 	cmp	r2, r3
-	bne	.L1063
+	bne	.L1076
 	mov	r0, #0
 	bl	flash_exit_slc_mode
-.L1063:
+.L1076:
 	mov	r0, r8
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1068:
+.L1081:
 	.align	2
-.L1067:
+.L1080:
 	.word	.LANCHOR3+11
 	.word	.LANCHOR0
 	.word	1446522928
@@ -8965,73 +9071,73 @@ FlashLoadPhyInfo:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r2, #4
-	ldr	r1, .L1080
+	ldr	r1, .L1093
 	add	r0, sp, #4
 	bl	memcpy
-	ldr	r5, .L1080+4
-	ldr	r2, .L1080+8
+	ldr	r5, .L1093+4
+	ldr	r2, .L1093+8
 	movw	r3, #2902
 	mov	r4, #0
 	mov	r8, #4
 	mov	r0, r4
-	str	r4, [r5, #156]
+	str	r4, [r5, #160]
 	ldrh	r9, [r2, r3]
 	mvn	r6, #0
-	ldr	r3, [r5, #144]
-	ldr	fp, .L1080+12
-	str	r3, [r5, #140]
+	ldr	r3, [r5, #148]
+	ldr	fp, .L1093+12
+	str	r3, [r5, #144]
 	bl	flash_enter_slc_mode
-	b	.L1070
-.L1072:
+	b	.L1083
+.L1085:
 	add	r3, sp, #4
 	ldrb	r0, [r3, r7]	@ zero_extendqisi2
 	bl	FlashBchSel
 	mov	r0, #0
 	mov	r1, r4
-	ldr	r2, [r5, #144]
+	ldr	r2, [r5, #148]
 	mov	r3, r0
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1071
+	bne	.L1084
 	mov	r0, #0
 	mov	r1, sl
-	ldr	r2, [r5, #144]
+	ldr	r2, [r5, #148]
 	mov	r3, r0
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	bne	.L1071
+	bne	.L1084
 	add	r7, r7, #1
 	cmp	r7, #4
-	beq	.L1073
-	b	.L1072
-.L1071:
-	ldr	r7, [r5, #140]
+	beq	.L1086
+	b	.L1085
+.L1084:
+	ldr	r7, [r5, #144]
 	ldr	r3, [r7, #0]
 	cmp	r3, fp
-	bne	.L1073
+	bne	.L1086
 	cmp	r6, #0
-	bne	.L1074
-	ldr	r2, .L1080+8
+	bne	.L1087
+	ldr	r2, .L1093+8
 	movw	r3, #2902
 	mov	r0, r4
 	ldrh	r1, [r2, r3]
 	bl	__aeabi_uidiv
-	ldr	r3, .L1080+4
+	ldr	r3, .L1093+4
 	add	r0, r0, #1
-	str	r0, [r3, #152]
+	str	r0, [r3, #156]
 	mov	r0, r6
-	b	.L1079
-.L1074:
+	b	.L1092
+.L1087:
 	add	r0, r7, #12
 	movw	r1, #2036
 	bl	JSHash
 	ldr	r3, [r7, #8]
 	cmp	r3, r0
-	bne	.L1073
-	ldr	r6, .L1080+16
+	bne	.L1086
+	ldr	r6, .L1093+16
 	add	r1, r7, #160
 	mov	r2, #32
-	ldr	r0, .L1080+20
+	ldr	r0, .L1093+20
 	bl	memcpy
 	add	r0, r6, #896
 	add	r1, r7, #192
@@ -9042,38 +9148,38 @@ FlashLoadPhyInfo:
 	mov	r2, #852
 	bl	memcpy
 	ldr	r3, [r7, #1076]
-	ldr	r2, .L1080+8
+	ldr	r2, .L1093+8
 	mov	r0, r4
-	str	r4, [r5, #156]
-	strb	r3, [r6, #3773]
+	str	r4, [r5, #160]
+	strb	r3, [r6, #3780]
 	movw	r3, #2902
 	ldrh	r1, [r2, r3]
 	mov	r6, #0
 	bl	__aeabi_uidiv
 	add	r0, r0, #1
-	str	r0, [r5, #152]
+	str	r0, [r5, #156]
 	cmp	r0, #1
 	moveq	r3, #2
-	streq	r3, [r5, #152]
+	streq	r3, [r5, #156]
 	ldrh	r3, [r7, #14]
-	strb	r3, [r5, #160]
-.L1073:
+	strb	r3, [r5, #164]
+.L1086:
 	subs	r8, r8, #1
 	add	r4, r4, r9
-	beq	.L1077
-.L1070:
+	beq	.L1090
+.L1083:
 	add	sl, r4, #1
 	mov	r7, #0
-	b	.L1072
-.L1077:
+	b	.L1085
+.L1090:
 	mov	r0, r8
-.L1079:
+.L1092:
 	bl	flash_exit_slc_mode
 	mov	r0, r6
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1081:
+.L1094:
 	.align	2
-.L1080:
+.L1093:
 	.word	.LANCHOR3+11
 	.word	.LANCHOR2
 	.word	.LANCHOR1
@@ -9092,14 +9198,14 @@ FlashDdrTunningRead:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	sl, r3
-	ldr	r4, .L1103
+	ldr	r4, .L1116
 	.pad #20
 	sub	sp, sp, #20
 	mov	fp, r0
 	mov	r9, r2
 	str	r1, [sp, #0]
 	ldr	r3, [r4, #3012]
-	ldr	r7, [r4, #3780]
+	ldr	r7, [r4, #3788]
 	ldr	r3, [r3, #304]
 	cmp	r7, #7
 	movhi	r7, #12
@@ -9108,7 +9214,7 @@ FlashDdrTunningRead:
 	ldr	r3, [sp, #56]
 	cmp	r3, #0
 	moveq	r8, #1024
-	beq	.L1084
+	beq	.L1097
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
@@ -9126,37 +9232,37 @@ FlashDdrTunningRead:
 	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
 	bl	NandcSetMode
 	cmn	r8, #1
-	beq	.L1085
-	ldr	r0, .L1103+4
+	beq	.L1098
+	ldr	r0, .L1116+4
 	mov	r2, r8
 	ldr	r1, [sp, #0]
 	bl	printk
 	cmp	r8, #9
-	bhi	.L1086
+	bhi	.L1099
 	add	r4, r4, fp, asl #3
 	ldr	r3, [r4, #864]
 	ldr	r2, [r3, #3840]
 	ldr	r2, [r3, #0]
 	orr	r2, r2, #131072
 	str	r2, [r3, #0]
-.L1086:
-	ldr	r3, .L1103+8
-	ldr	r2, [r3, #164]
+.L1099:
+	ldr	r3, .L1116+8
+	ldr	r2, [r3, #168]
 	add	r2, r2, #1
-	str	r2, [r3, #164]
+	str	r2, [r3, #168]
 	cmp	r2, #2048
 	movcs	sl, #0
-	strcs	sl, [r3, #164]
+	strcs	sl, [r3, #168]
 	movcs	r9, sl
-	bcc	.L1085
-.L1084:
+	bcc	.L1098
+.L1097:
 	mov	r4, #0
 	str	fp, [sp, #4]
 	mov	r5, r4
 	mvn	r6, #0
 	mov	fp, r4
 	str	r4, [sp, #8]
-.L1091:
+.L1104:
 	uxtb	r0, r7
 	bl	NandcSetDdrPara
 	mov	r3, sl
@@ -9166,79 +9272,79 @@ FlashDdrTunningRead:
 	bl	FlashReadRawPage
 	add	r3, r8, #1
 	cmp	r0, r3
-	bhi	.L1087
+	bhi	.L1100
 	cmp	r0, #2
-	bhi	.L1097
+	bhi	.L1110
 	add	r5, r5, #1
 	cmp	r5, #9
-	bls	.L1097
+	bls	.L1110
 	mov	ip, fp
 	rsb	r4, r5, r7
 	ldr	fp, [sp, #4]
 	mov	r8, r0
 	mov	r6, #0
-	b	.L1089
-.L1087:
+	b	.L1102
+.L1100:
 	cmp	fp, r5
-	bcs	.L1098
+	bcs	.L1111
 	cmp	r5, #7
 	rsb	r3, r5, r4
 	str	r3, [sp, #8]
-	bhi	.L1102
+	bhi	.L1115
 	mov	fp, r5
-	b	.L1098
-.L1097:
+	b	.L1111
+.L1110:
 	mov	r6, #0
 	mov	r4, r7
 	mov	r8, r0
 	mov	sl, r6
 	mov	r9, r6
-	b	.L1088
-.L1098:
+	b	.L1101
+.L1111:
 	mov	r5, #0
-.L1088:
+.L1101:
 	add	r7, r7, #2
 	cmp	r7, #69
-	bls	.L1091
+	bls	.L1104
 	mov	ip, fp
 	ldr	fp, [sp, #4]
-.L1089:
-	cmp	ip, r5
-	bcc	.L1092
-	b	.L1090
 .L1102:
+	cmp	ip, r5
+	bcc	.L1105
+	b	.L1103
+.L1115:
 	ldr	fp, [sp, #4]
-.L1090:
+.L1103:
 	ldr	r4, [sp, #8]
-.L1092:
+.L1105:
 	cmp	r4, #0
-	beq	.L1093
-	ldr	r0, .L1103+12
+	beq	.L1106
+	ldr	r0, .L1116+12
 	mov	r1, r4
 	bl	printk
 	uxtb	r0, r4
 	bl	NandcSetDdrPara
-.L1093:
+.L1106:
 	cmn	r6, #1
-	bne	.L1085
-	ldr	r0, .L1103+16
+	bne	.L1098
+	ldr	r0, .L1116+16
 	mov	r1, fp
 	ldr	r2, [sp, #0]
 	bl	printk
 	ldr	r3, [sp, #56]
 	cmp	r3, #0
 	moveq	r8, r6
-	beq	.L1085
+	beq	.L1098
 	ldr	r3, [sp, #12]
 	ubfx	r0, r3, #8, #8
 	bl	NandcSetDdrPara
-.L1085:
+.L1098:
 	mov	r0, r8
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1104:
+.L1117:
 	.align	2
-.L1103:
+.L1116:
 	.word	.LANCHOR0
 	.word	.LC92
 	.word	.LANCHOR2
@@ -9256,7 +9362,7 @@ FlashDdrParaScan:
 	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r0, r1, r4, r5, r6, r7, r8, lr}
 	mov	r7, r0
-	ldr	r5, .L1109
+	ldr	r5, .L1122
 	mov	r4, #0
 	mov	r6, r1
 	ldrb	r0, [r5, #3772]	@ zero_extendqisi2
@@ -9276,30 +9382,30 @@ FlashDdrParaScan:
 	mov	r0, r7
 	bl	FlashReadRawPage
 	cmn	r0, #1
-	beq	.L1106
+	beq	.L1119
 	cmn	r8, #1
-	bne	.L1107
-.L1106:
+	bne	.L1120
+.L1119:
 	ldrb	r3, [r5, #3772]	@ zero_extendqisi2
 	tst	r3, #1
-	beq	.L1107
+	beq	.L1120
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
-	ldr	r3, .L1109
+	ldr	r3, .L1122
 	mov	r2, #0
-	strb	r2, [r3, #3773]
-	b	.L1108
-.L1107:
+	strb	r2, [r3, #3780]
+	b	.L1121
+.L1120:
 	mov	r3, #1
-	strb	r3, [r5, #3773]
-.L1108:
+	strb	r3, [r5, #3780]
+.L1121:
 	mov	r0, #0
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L1110:
+.L1123:
 	.align	2
-.L1109:
+.L1122:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashDdrParaScan, .-FlashDdrParaScan
@@ -9319,11 +9425,11 @@ FlashReadPage:
 	bl	FlashReadRawPage
 	cmn	r0, #1
 	mov	r4, r0
-	bne	.L1112
-	ldr	r7, .L1117
+	bne	.L1125
+	ldr	r7, .L1130
 	ldrb	r9, [r7, #860]	@ zero_extendqisi2
 	cmp	r9, #0
-	beq	.L1113
+	beq	.L1126
 	mov	r3, #0
 	mov	r0, r5
 	strb	r3, [r7, #860]
@@ -9334,12 +9440,12 @@ FlashReadPage:
 	strb	r9, [r7, #860]
 	cmn	r0, #1
 	movne	r4, r0
-	bne	.L1112
-.L1113:
-	ldr	r7, .L1117
-	ldrb	r3, [r7, #3773]	@ zero_extendqisi2
+	bne	.L1125
+.L1126:
+	ldr	r7, .L1130
+	ldrb	r3, [r7, #3780]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1112
+	beq	.L1125
 	ldr	r3, [r7, #3012]
 	mov	r0, r5
 	mov	r1, r6
@@ -9351,22 +9457,22 @@ FlashReadPage:
 	bl	FlashDdrTunningRead
 	cmn	r0, #1
 	mov	r4, r0
-	beq	.L1114
-	ldrb	r3, [r7, #3832]	@ zero_extendqisi2
+	beq	.L1127
+	ldrb	r3, [r7, #3836]	@ zero_extendqisi2
 	cmp	r0, r3, lsr #1
-	bls	.L1112
-.L1114:
+	bls	.L1125
+.L1127:
 	ubfx	r0, r9, #8, #8
 	bl	NandcSetDdrPara
-.L1112:
-	ldr	r7, .L1117+4
-	ldr	ip, [r7, #168]
+.L1125:
+	ldr	r7, .L1130+4
+	ldr	ip, [r7, #172]
 	adds	r3, ip, #0
 	movne	r3, #1
 	cmn	r4, #1
 	movne	r3, #0
 	cmp	r3, #0
-	beq	.L1115
+	beq	.L1128
 	mov	r1, r6
 	mov	r2, r8
 	mov	r3, sl
@@ -9375,18 +9481,18 @@ FlashReadPage:
 	mov	r2, r5
 	mov	r3, r6
 	mov	r4, r0
-	ldr	r0, .L1117+8
+	ldr	r0, .L1130+8
 	mov	r1, r4
 	bl	printk
 	cmn	r4, #1
-	bne	.L1115
-	ldr	r3, .L1117
+	bne	.L1128
+	ldr	r3, .L1130
 	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1115
+	beq	.L1128
 	mov	r0, r5
 	bl	flash_enter_slc_mode
-	ldr	ip, [r7, #168]
+	ldr	ip, [r7, #172]
 	mov	r0, r5
 	mov	r1, r6
 	mov	r2, r8
@@ -9395,12 +9501,12 @@ FlashReadPage:
 	mov	r4, r0
 	mov	r0, r5
 	bl	flash_exit_slc_mode
-.L1115:
+.L1128:
 	mov	r0, r4
 	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
-.L1118:
+.L1131:
 	.align	2
-.L1117:
+.L1130:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC95
@@ -9413,7 +9519,7 @@ FlashReadSlc2KPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1132
+	ldr	r3, .L1145
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r8, r1
@@ -9423,9 +9529,9 @@ FlashReadSlc2KPages:
 	ldrb	sl, [r3, #2901]	@ zero_extendqisi2
 	mov	r4, r0
 	mov	r7, #0
-	ldr	r6, .L1132+4
-	b	.L1120
-.L1129:
+	ldr	r6, .L1145+4
+	b	.L1133
+.L1142:
 	rsb	r3, r7, r8
 	add	r2, sp, #20
 	mov	r0, r4
@@ -9439,7 +9545,7 @@ FlashReadSlc2KPages:
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r4, #0]
-	bcs	.L1122
+	bcs	.L1135
 	add	r3, r6, r3
 	ldrb	r5, [r3, #3764]	@ zero_extendqisi2
 	mov	r0, r5
@@ -9482,7 +9588,7 @@ FlashReadSlc2KPages:
 	ldr	r3, [sp, #12]
 	cmp	r3, r9
 	movcs	r9, r3
-	ldrb	r3, [r6, #3832]	@ zero_extendqisi2
+	ldrb	r3, [r6, #3836]	@ zero_extendqisi2
 	adds	r2, r9, #1
 	add	r3, r3, r3, asl #1
 	movne	r2, #1
@@ -9498,48 +9604,48 @@ FlashReadSlc2KPages:
 	strne	r3, [r4, #0]
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L1127
+	beq	.L1140
 	ldr	r2, [r3, #8]
 	cmn	r2, #1
-	bne	.L1127
+	bne	.L1140
 	ldr	r3, [r3, #0]
 	cmn	r3, #1
 	strne	r2, [r4, #0]
-.L1127:
+.L1140:
 	ldr	r3, [r4, #0]
 	cmn	r3, #1
-	bne	.L1122
+	bne	.L1135
 	ldr	r1, [r4, #4]
-	ldr	r0, .L1132+8
-	ldrb	r2, [r6, #3832]	@ zero_extendqisi2
+	ldr	r0, .L1145+8
+	ldrb	r2, [r6, #3836]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [r4, #8]
 	cmp	r1, #0
-	beq	.L1128
-	ldr	r0, .L1132+12
+	beq	.L1141
+	ldr	r0, .L1145+12
 	mov	r2, #4
 	mov	r3, #8
 	bl	rknand_print_hex
-.L1128:
+.L1141:
 	ldr	r1, [r4, #12]
 	cmp	r1, #0
-	beq	.L1122
+	beq	.L1135
 	mov	r2, #4
-	ldr	r0, .L1132+16
+	ldr	r0, .L1145+16
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1122:
+.L1135:
 	add	r7, r7, #1
 	add	r4, r4, #36
-.L1120:
+.L1133:
 	cmp	r7, r8
-	bne	.L1129
+	bne	.L1142
 	mov	r0, #0
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1133:
+.L1146:
 	.align	2
-.L1132:
+.L1145:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LC96
@@ -9554,7 +9660,7 @@ FlashReadPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1176
+	ldr	r3, .L1189
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #52
@@ -9564,22 +9670,22 @@ FlashReadPages:
 	str	r1, [sp, #28]
 	str	r2, [sp, #32]
 	str	r3, [sp, #24]
-	ldr	r3, .L1176+4
+	ldr	r3, .L1189+4
 	ldrb	r8, [r3, #852]	@ zero_extendqisi2
 	ldrb	ip, [r3, #860]	@ zero_extendqisi2
 	cmp	r8, #0
 	str	ip, [sp, #36]
 	moveq	sl, r8
-	beq	.L1135
+	beq	.L1148
 	bl	FlashReadSlc2KPages
-	b	.L1136
-.L1163:
+	b	.L1149
+.L1176:
 	mov	r3, #36
 	ldr	ip, [sp, #28]
 	mul	r3, r3, sl
 	add	r2, sp, #44
 	ldr	r1, [sp, #32]
-	ldr	fp, .L1176+4
+	ldr	fp, .L1189+4
 	add	r6, r9, r3
 	str	r3, [sp, #16]
 	rsb	r3, sl, ip
@@ -9596,12 +9702,12 @@ FlashReadPages:
 	mvncs	r3, #0
 	mov	r7, r0
 	strcs	r3, [r9, ip]
-	bcs	.L1138
+	bcs	.L1151
 	add	r3, fp, r3
 	ldrb	r4, [r3, #3764]	@ zero_extendqisi2
-	ldr	r3, .L1176+8
+	ldr	r3, .L1189+8
 	mov	r0, r4
-	ldrb	r3, [r3, #172]	@ zero_extendqisi2
+	ldrb	r3, [r3, #176]	@ zero_extendqisi2
 	cmp	r3, #0
 	moveq	r7, #0
 	bl	NandcWaitFlashReady
@@ -9610,21 +9716,21 @@ FlashReadPages:
 	sub	r3, r2, #1
 	uxtb	r3, r3
 	cmp	r3, #6
-	bhi	.L1140
+	bhi	.L1153
 	add	r1, fp, r4
 	cmp	r2, #7
 	add	fp, fp, r4
-	ldr	r2, .L1176+4
+	ldr	r2, .L1189+4
 	ldrb	r3, [r1, #12]	@ zero_extendqisi2
 	ldreqb	r3, [r1, #20]	@ zero_extendqisi2
 	ldrb	r1, [fp, #3756]	@ zero_extendqisi2
 	cmp	r1, r3
-	beq	.L1140
+	beq	.L1153
 	ldrb	r1, [r2, #1]	@ zero_extendqisi2
 	mov	r0, r4
 	add	r2, r2, #4
 	bl	HynixSetRRPara
-.L1140:
+.L1153:
 	mov	r0, r4
 	mov	r5, r5, lsr #31
 	bl	NandcFlashCs
@@ -9634,44 +9740,44 @@ FlashReadPages:
 	orreq	r5, r5, #1
 	str	r5, [sp, #20]
 	cmp	r5, #0
-	beq	.L1142
-	ldr	r3, .L1176+4
+	beq	.L1155
+	ldr	r3, .L1189+4
 	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1142
+	beq	.L1155
 	bl	flash_enter_slc_mode
-	b	.L1143
-.L1142:
+	b	.L1156
+.L1155:
 	bl	flash_exit_slc_mode
-.L1143:
-	ldr	fp, .L1176+4
-.L1175:
+.L1156:
+	ldr	fp, .L1189+4
+.L1188:
 	ldr	r1, [sp, #44]
 	cmn	r1, #1
 	cmpeq	r4, #255
 	moveq	r3, #0
 	movne	r3, #1
 	moveq	r7, r3
-	beq	.L1145
+	beq	.L1158
 	cmp	r7, #0
-	beq	.L1146
+	beq	.L1159
 	ldr	r2, [fp, #856]
 	mov	r0, r4
 	add	r2, r1, r2
 	bl	FlashReadDpCmd
-	b	.L1147
-.L1146:
+	b	.L1160
+.L1159:
 	mov	r0, r4
 	bl	FlashReadCmd
-.L1147:
+.L1160:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	cmp	r7, #0
-	beq	.L1145
+	beq	.L1158
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	bl	FlashReadDpDataOutCmd
-.L1145:
+.L1158:
 	ldr	r3, [r6, #12]
 	mov	r0, r4
 	ldr	r2, [sp, #24]
@@ -9688,12 +9794,12 @@ FlashReadPages:
 	movne	r2, #0
 	movne	r7, #0
 	strneb	r2, [fp, #860]
-	bne	.L1175
-.L1148:
+	bne	.L1188
+.L1161:
 	cmp	r7, #0
 	mov	r5, r0
-	beq	.L1149
-	ldr	r3, .L1176+4
+	beq	.L1162
+	ldr	r3, .L1189+4
 	mov	r0, r4
 	ldr	r1, [r3, #856]
 	ldr	r3, [sp, #44]
@@ -9714,17 +9820,17 @@ FlashReadPages:
 	cmn	r0, #1
 	mov	r8, r0
 	moveq	r7, #0
-.L1149:
+.L1162:
 	mov	r0, r4
-	ldr	fp, .L1176+4
+	ldr	fp, .L1189+4
 	bl	NandcFlashDeCs
 	ldr	ip, [sp, #36]
 	cmn	r5, #1
 	strb	ip, [fp, #860]
-	bne	.L1153
-	ldrb	r3, [fp, #3773]	@ zero_extendqisi2
+	bne	.L1166
+	ldrb	r3, [fp, #3780]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1151
+	beq	.L1164
 	ldr	r3, [fp, #3012]
 	mov	r0, r4
 	ldr	r1, [sp, #44]
@@ -9736,96 +9842,96 @@ FlashReadPages:
 	bl	FlashDdrTunningRead
 	cmn	r0, #1
 	mov	r5, r0
-	beq	.L1152
-	ldrb	r3, [fp, #3832]	@ zero_extendqisi2
+	beq	.L1165
+	ldrb	r3, [fp, #3836]	@ zero_extendqisi2
 	cmp	r0, r3, lsr #1
-	bls	.L1169
-.L1152:
+	bls	.L1182
+.L1165:
 	ubfx	r0, r7, #8, #8
 	bl	NandcSetDdrPara
 	cmn	r5, #1
-	bne	.L1169
-.L1151:
-	ldr	r3, .L1176+8
+	bne	.L1182
+.L1164:
+	ldr	r3, .L1189+8
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	ldr	r2, [r6, #8]
-	ldr	r7, [r3, #168]
+	ldr	r7, [r3, #172]
 	ldr	r3, [r6, #12]
 	cmp	r7, #0
-	beq	.L1154
+	beq	.L1167
 	blx	r7
 	cmn	r0, #1
 	mov	r5, r0
-	bne	.L1171
-	ldr	r2, .L1176+4
+	bne	.L1184
+	ldr	r2, .L1189+4
 	ldr	r3, [r2, #3624]
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #6
-	bhi	.L1156
+	bhi	.L1169
 	ldrb	r1, [r2, #1]	@ zero_extendqisi2
 	mov	r0, r4
 	add	r2, r2, #4
 	mov	r3, #0
 	bl	HynixSetRRPara
-.L1156:
+.L1169:
 	ldr	r1, [sp, #44]
 	mov	r0, r4
 	ldr	r2, [r6, #8]
 	ldr	r3, [r6, #12]
 	bl	FlashReadRawPage
-	ldr	r7, .L1176+4
+	ldr	r7, .L1189+4
 	ldr	r1, [r6, #4]
-	ldrb	r2, [r7, #3832]	@ zero_extendqisi2
+	ldrb	r2, [r7, #3836]	@ zero_extendqisi2
 	mov	r5, r0
-	ldr	r0, .L1176+12
+	ldr	r0, .L1189+12
 	mov	r3, r5
 	bl	printk
 	cmn	r5, #1
-	bne	.L1171
+	bne	.L1184
 	ldrb	r7, [r7, #928]	@ zero_extendqisi2
 	cmp	r7, #0
-	beq	.L1155
+	beq	.L1168
 	ldr	ip, [sp, #20]
 	mov	r0, r4
 	cmp	ip, #0
-	beq	.L1157
+	beq	.L1170
 	bl	flash_enter_slc_mode
-	b	.L1158
-.L1157:
+	b	.L1171
+.L1170:
 	bl	flash_exit_slc_mode
-.L1158:
-	ldr	r3, .L1176+8
+.L1171:
+	ldr	r3, .L1189+8
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	ldr	r2, [r6, #8]
-	ldr	ip, [r3, #168]
+	ldr	ip, [r3, #172]
 	ldr	r3, [r6, #12]
 	blx	ip
 	mov	r5, r0
-	b	.L1171
-.L1154:
+	b	.L1184
+.L1167:
 	bl	FlashReadRawPage
 	mov	r5, r0
-	b	.L1155
-.L1169:
+	b	.L1168
+.L1182:
 	mov	r7, #0
-.L1153:
-	ldr	r3, .L1176+4
-	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+.L1166:
+	ldr	r3, .L1189+4
+	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	r5, r3, lsr #2
-	bls	.L1155
-	ldr	r3, .L1176+8
-	ldr	r3, [r3, #168]
+	bls	.L1168
+	ldr	r3, .L1189+8
+	ldr	r3, [r3, #172]
 	cmp	r3, #0
 	moveq	r5, #256
-	b	.L1155
-.L1171:
+	b	.L1168
+.L1184:
 	mov	r7, #0
-.L1155:
+.L1168:
 	ldr	ip, [sp, #16]
 	cmp	r5, #256
 	cmnne	r5, #1
@@ -9835,32 +9941,32 @@ FlashReadPages:
 	ldr	ip, [sp, #16]
 	ldr	r3, [r9, ip]
 	cmn	r3, #1
-	bne	.L1160
-	ldr	r2, .L1176+4
+	bne	.L1173
+	ldr	r2, .L1189+4
 	ldr	r1, [r6, #4]
-	ldr	r0, .L1176+16
-	ldrb	r2, [r2, #3832]	@ zero_extendqisi2
+	ldr	r0, .L1189+16
+	ldrb	r2, [r2, #3836]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [r6, #12]
 	cmp	r1, #0
-	beq	.L1160
+	beq	.L1173
 	mov	r2, #4
-	ldr	r0, .L1176+20
+	ldr	r0, .L1189+20
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1160:
+.L1173:
 	cmp	r7, #0
-	beq	.L1161
-	ldr	r3, .L1176+4
-	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	beq	.L1174
+	ldr	r3, .L1189+4
+	ldrb	r3, [r3, #3836]	@ zero_extendqisi2
 	add	r3, r3, r3, asl #1
 	cmp	r8, r3, lsr #2
-	bls	.L1162
-	ldr	r3, .L1176+8
-	ldr	r3, [r3, #168]
+	bls	.L1175
+	ldr	r3, .L1189+8
+	ldr	r3, [r3, #172]
 	cmp	r3, #0
 	moveq	r8, #256
-.L1162:
+.L1175:
 	add	r3, sl, #1
 	mov	r2, #36
 	cmp	r8, #256
@@ -9869,30 +9975,30 @@ FlashReadPages:
 	movne	r2, #0
 	str	r8, [r9, r3]
 	strne	r2, [r9, r3]
-.L1161:
+.L1174:
 	ldr	ip, [sp, #20]
 	add	sl, sl, r7
 	cmp	ip, #0
-	beq	.L1138
-	ldr	r3, .L1176+4
+	beq	.L1151
+	ldr	r3, .L1189+4
 	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1138
+	beq	.L1151
 	mov	r0, r4
 	bl	flash_exit_slc_mode
-.L1138:
+.L1151:
 	add	sl, sl, #1
-.L1135:
+.L1148:
 	ldr	ip, [sp, #28]
 	cmp	sl, ip
-	bcc	.L1163
+	bcc	.L1176
 	mov	r0, #0
-.L1136:
+.L1149:
 	add	sp, sp, #52
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1177:
+.L1190:
 	.align	2
-.L1176:
+.L1189:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -9908,7 +10014,7 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L1203
+	ldr	r2, .L1216
 	movw	r3, #3000
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
@@ -9919,51 +10025,51 @@ FtlGcScanTempBlk:
 	mov	r5, r0
 	str	r1, [sp, #20]
 	cmp	r4, r3
-	beq	.L1199
+	beq	.L1212
 	cmp	r4, #0
-	bne	.L1179
-	b	.L1180
-.L1199:
+	bne	.L1192
+	b	.L1193
+.L1212:
 	mov	r4, #0
-.L1179:
-	ldr	r2, .L1203+4
-	movw	r3, #3912
+.L1192:
+	ldr	r2, .L1216+4
+	movw	r3, #3916
 	ldr	fp, [sp, #20]
 	ldrh	r3, [r2, r3]
 	cmp	fp, r3
-	bne	.L1181
-.L1180:
+	bne	.L1194
+.L1193:
 	bl	FtlGcPageVarInit
-.L1181:
+.L1194:
 	mov	r7, #0
 	movw	r8, #65535
 	mov	sl, r7
 	mvn	r3, #0
 	str	r3, [sp, #16]
-.L1194:
+.L1207:
 	ldrh	r3, [r5, #0]
 	strb	sl, [r5, #8]
 	cmp	r3, r8
-	beq	.L1200
-.L1183:
-.L1201:
-	ldr	r3, .L1203+4
-	movw	r2, #3844
+	beq	.L1213
+.L1196:
+.L1214:
+	ldr	r3, .L1216+4
+	movw	r2, #3848
 	ldrh	r9, [r3, r2]
-	ldr	r2, .L1203+8
-	ldr	lr, [r2, #-976]
-	ldr	ip, [r2, #-1172]
-	movw	r2, #3924
+	ldr	r2, .L1216+8
+	ldr	lr, [r2, #-972]
+	ldr	ip, [r2, #-1168]
+	movw	r2, #3928
 	ldrh	r2, [r3, r2]
 	mov	r3, #0
 	mov	r6, r3
 	str	r2, [sp, #12]
 	mov	r2, r5
-	b	.L1184
-.L1186:
+	b	.L1197
+.L1199:
 	ldrh	r0, [r2, #16]
 	cmp	r0, r8
-	beq	.L1185
+	beq	.L1198
 	mov	fp, #36
 	orr	r0, r4, r0, asl #10
 	mla	r1, fp, r6, lr
@@ -9978,25 +10084,25 @@ FtlGcScanTempBlk:
 	bic	r0, r0, #3
 	add	r0, ip, r0
 	str	r0, [r1, #12]
-.L1185:
+.L1198:
 	add	r3, r3, #1
 	add	r2, r2, #2
 	uxth	r3, r3
-.L1184:
+.L1197:
 	cmp	r3, r9
-	bne	.L1186
-	ldr	r9, .L1203+8
+	bne	.L1199
+	ldr	r9, .L1216+8
 	mov	r1, r6
 	mov	r2, #0
-	ldr	r0, [r9, #-976]
+	ldr	r0, [r9, #-972]
 	bl	FlashReadPages
 	mov	r3, #36
 	mul	r3, r3, r6
 	mov	r6, #0
 	str	r3, [sp, #12]
-	b	.L1187
-.L1195:
-	ldr	r1, [r9, #-976]
+	b	.L1200
+.L1208:
+	ldr	r1, [r9, #-972]
 	add	r3, r1, r6
 	ldr	fp, [r3, #4]
 	stmib	sp, {r1, r3}
@@ -10007,58 +10113,57 @@ FtlGcScanTempBlk:
 	ldr	r1, [r1, r6]
 	cmp	r1, #0
 	mov	r2, r0
-	bne	.L1188
+	bne	.L1201
 	ldr	r3, [r3, #12]
 	add	r6, r6, #36
 	ldrh	r1, [r3, #0]
 	cmp	r1, r8
-	ldreq	r3, .L1203+8
+	ldreq	r3, .L1216+8
 	moveq	r1, #1
-	streq	r1, [r3, #-1016]
-	beq	.L1182
-.L1189:
+	streq	r1, [r3, #-1012]
+	beq	.L1195
+.L1202:
 	ldr	r0, [r3, #12]
 	mov	r1, fp
 	ldr	r2, [r3, #8]
 	bl	FtlGcUpdatePage
-	b	.L1187
-.L1188:
+	b	.L1200
+.L1201:
 	mov	r2, fp
-	ldr	r0, .L1203+12
+	ldr	r0, .L1216+12
 	ldrh	r1, [r5, #0]
 	bl	printk
-	ldr	r3, .L1203+4
-	ldr	r2, [r3, #3836]
+	ldr	r3, .L1216+4
+	ldr	r2, [r3, #3840]
 	cmp	r2, #0
-	bne	.L1190
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L1191
-.L1190:
-	ldr	r2, .L1203+8
-	ldrh	r3, [r5, #0]
-	ldr	r2, [r2, #-2084]
-	mov	r3, r3, asl #1
+	bne	.L1203
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1204
+.L1203:
+	ldrh	r1, [r5, #0]
+	ldr	r2, [r3, #4048]
+	mov	r3, r1, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #119
-	bls	.L1192
-.L1191:
-	ldr	r3, .L1203+8
-	ldr	r3, [r3, #-976]
+	bls	.L1205
+.L1204:
+	ldr	r3, .L1216+8
+	ldr	r3, [r3, #-972]
 	ldr	r3, [r3, r6]
 	cmn	r3, #1
-	bne	.L1193
-.L1192:
-	ldr	r3, .L1203+8
-	ldr	r3, [r3, #-976]
+	bne	.L1206
+.L1205:
+	ldr	r3, .L1216+8
+	ldr	r3, [r3, #-972]
 	add	r6, r3, r6
 	ldr	r6, [r6, #4]
 	str	r6, [sp, #16]
-.L1193:
-	ldr	r2, .L1203+8
+.L1206:
+	ldr	r2, .L1216+8
 	mov	r4, #0
 	ldrh	r3, [r5, #0]
-	ldr	r2, [r2, #-2020]
+	ldr	r2, [r2, #-2016]
 	mov	r3, r3, asl #1
 	strh	sl, [r2, r3]	@ movhi
 	ldrh	r0, [r5, #0]
@@ -10066,39 +10171,39 @@ FtlGcScanTempBlk:
 	mvn	r3, #0
 	strh	r3, [r5, #0]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L1194
-.L1187:
+	b	.L1207
+.L1200:
 	ldr	r3, [sp, #12]
 	cmp	r6, r3
-	bne	.L1195
+	bne	.L1208
 	ldr	fp, [sp, #20]
 	add	r7, r7, #1
 	add	r4, r4, #1
 	cmp	r7, fp
 	uxth	r4, r4
-	bcc	.L1196
-	ldr	r2, .L1203
+	bcc	.L1209
+	ldr	r2, .L1216
 	movw	r3, #3000
 	ldrh	r1, [r2, r3]
 	cmp	r1, r8
-	beq	.L1196
+	beq	.L1209
 	add	r1, r1, r7
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r2, .L1203+4
-	add	r3, r3, #912
+	ldr	r2, .L1216+4
+	add	r3, r3, #916
 	ldrh	r3, [r2, r3]
 	cmp	r3, r4
-	bhi	.L1197
-.L1196:
-	ldr	r2, .L1203+4
-	movw	r3, #3912
+	bhi	.L1210
+.L1209:
+	ldr	r2, .L1216+4
+	movw	r3, #3916
 	ldrh	r3, [r2, r3]
 	cmp	r3, r4
-	bhi	.L1201
-.L1200:
+	bhi	.L1214
+.L1213:
 	mov	r2, #0
-.L1182:
-	ldr	r1, .L1203
+.L1195:
+	ldr	r1, .L1216
 	movw	r3, #3000
 	mvn	r0, #0
 	strh	r4, [r5, #2]	@ movhi
@@ -10107,13 +10212,13 @@ FtlGcScanTempBlk:
 	mov	r0, r5
 	mov	r1, r4
 	bl	ftl_sb_update_avl_pages
-.L1197:
+.L1210:
 	ldr	r0, [sp, #16]
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1204:
+.L1217:
 	.align	2
-.L1203:
+.L1216:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
@@ -10121,115 +10226,444 @@ FtlGcScanTempBlk:
 	.fnend
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	2
-	.global	FtlScanSysBlk
-	.type	FtlScanSysBlk, %function
-FtlScanSysBlk:
+	.global	FtlScanAllBlock
+	.type	FtlScanAllBlock, %function
+FtlScanAllBlock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #84
+	sub	sp, sp, #84
+	ldr	r0, .L1228
+	mov	r5, #0
+	ldr	r1, .L1228+4
+	bl	printk
+	ldr	r7, .L1228+8
+	b	.L1219
+.L1227:
+	add	r4, sp, #80
+	mov	r0, r5
+	ldr	r6, .L1228+12
+	mov	r9, #36
+	strh	r5, [r4, #-48]!	@ movhi
+	bl	ftl_get_blk_mode
+	mov	r2, r5, asl #1
+	ldr	ip, [r6, #-2016]
+	mov	r1, r5
+	ldrh	r2, [ip, r2]
+	mov	r3, r0
+	ldr	r0, .L1228+16
+	bl	printk
+	mov	r0, r4
+	bl	make_superblock
+	movw	r3, #3848
+	ldrh	sl, [r7, r3]
+	add	r3, r3, #78
+	add	r0, r4, #14
+	mov	r4, #0
+	ldrh	r3, [r7, r3]
+	ldr	r8, [r6, #-972]
+	ldr	lr, [r6, #-1172]
+	str	r3, [sp, #28]
+	movw	r3, #3928
+	ldrh	ip, [r7, r3]
+	mov	r3, r4
+	ldr	r6, [r6, #-1168]
+	b	.L1220
+.L1222:
+	ldrh	r1, [r0, #2]!
+	movw	r2, #65535
+	cmp	r1, r2
+	beq	.L1221
+	mla	r2, r9, r4, r8
+	ldr	fp, [sp, #28]
+	mov	r1, r1, asl #10
+	str	r1, [r2, #4]
+	mul	r1, fp, r4
+	add	fp, r1, #3
+	cmp	r1, #0
+	movlt	r1, fp
+	bic	r1, r1, #3
+	add	r1, lr, r1
+	str	r1, [r2, #8]
+	mul	r1, ip, r4
+	add	r4, r4, #1
+	uxth	r4, r4
+	add	fp, r1, #3
+	cmp	r1, #0
+	movlt	r1, fp
+	bic	r1, r1, #3
+	add	r1, r6, r1
+	str	r1, [r2, #12]
+.L1221:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L1220:
+	cmp	r3, sl
+	bne	.L1222
+	ldr	sl, .L1228+12
+	mov	r1, r4
+	mov	r2, #0
 	mov	r6, #0
-	ldr	r5, .L1263
-	.pad #28
-	sub	sp, sp, #28
-	ldr	r4, .L1263+4
-	mov	r1, r6
-	ldr	r3, .L1263+8
-	movw	r7, #3932
-	ldr	r2, [r5, #3940]
-	ldr	r0, [r4, #-1040]
-	mov	sl, r4
-	strh	r6, [r4, r3]	@ movhi
-	movw	r3, #3958
-	strh	r6, [r5, r3]	@ movhi
-	mov	r2, r2, asl #2
-	bl	ftl_memset
-	ldr	r2, [r5, #3940]
-	mov	r1, r6
-	ldr	r0, [r4, #-1044]
-	mov	r2, r2, asl #1
-	bl	ftl_memset
-	ldrh	r2, [r5, r7]
-	mov	r1, r6
-	ldr	r0, [r4, #-912]
-	mov	r2, r2, asl #2
-	bl	ftl_memset
-	ldrh	r2, [r5, r7]
-	mov	r1, r6
-	ldr	r0, [r5, #3960]
-	mov	r2, r2, asl #1
-	bl	ftl_memset
-	sub	r0, r4, #1776
-	mov	r1, #255
-	mov	r2, #12
-	bl	ftl_memset
-	movw	r3, #3852
-	ldrh	r3, [r5, r3]
-	str	r3, [sp, #8]
-	b	.L1206
-.L1208:
-	add	r3, r6, r5
-	ldr	r1, [sp, #8]
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
-	bl	V2P_block
-	str	r0, [sp, #0]
-	bl	FtlBbmIsBadBlock
-	ldr	r3, [sp, #0]
-	cmp	r0, #0
-	bne	.L1207
-	ldr	r2, [r4, #-976]
-	mov	r3, r3, asl #10
-	mla	r2, r9, r7, r2
-	str	r3, [r2, #4]
-	ldr	r3, [r4, #-1176]
-	str	r3, [r2, #8]
-	ldrh	r3, [r6, r8]
-	mul	r3, r3, r7
-	add	r7, r7, #1
-	uxth	r7, r7
-	add	r1, r3, #3
-	cmp	r3, #0
-	movlt	r3, r1
-	ldr	r1, [r4, #-1172]
-	bic	r3, r3, #3
-	add	r3, r1, r3
-	str	r3, [r2, #12]
-.L1207:
+	mov	r8, r6
+	ldr	r0, [sl, #-972]
+	bl	FlashReadPages
+	b	.L1223
+.L1224:
+	ldr	r2, [sl, #-972]
+	add	r8, r8, #1
+	ldrh	r1, [sp, #32]
+	add	r3, r2, r6
+	uxth	r8, r8
+	ldr	r0, [r3, #12]
+	ldr	ip, [r3, #8]
+	ldr	lr, [r0, #0]
+	str	lr, [sp, #0]
+	ldr	lr, [r0, #4]
+	str	lr, [sp, #4]
+	ldr	lr, [r0, #8]
+	str	lr, [sp, #8]
+	ldr	r0, [r0, #12]
+	str	r0, [sp, #12]
+	ldr	r0, [ip, #0]
+	str	r0, [sp, #16]
+	ldr	r0, [ip, #4]
+	str	r0, [sp, #20]
+	ldr	r0, .L1228+20
+	ldr	r2, [r2, r6]
+	add	r6, r6, #36
+	ldr	r3, [r3, #4]
+	bl	printk
+.L1223:
+	cmp	r8, r4
+	ldr	r9, .L1228+12
+	bne	.L1224
+	ldr	r0, [r9, #-972]
+	mov	r1, r4
+	mov	r2, #1
+	mov	r6, #0
+	bl	FlashReadPages
+	mov	r8, r6
+	mov	sl, r9
+	b	.L1225
+.L1226:
+	ldr	r2, [sl, #-972]
+	add	r8, r8, #1
+	ldrh	r1, [sp, #32]
+	add	r3, r2, r6
+	uxth	r8, r8
+	ldr	r0, [r3, #12]
+	ldr	ip, [r3, #8]
+	ldr	lr, [r0, #0]
+	str	lr, [sp, #0]
+	ldr	lr, [r0, #4]
+	str	lr, [sp, #4]
+	ldr	lr, [r0, #8]
+	str	lr, [sp, #8]
+	ldr	r0, [r0, #12]
+	str	r0, [sp, #12]
+	ldr	r0, [ip, #0]
+	str	r0, [sp, #16]
+	ldr	r0, [ip, #4]
+	str	r0, [sp, #20]
+	ldr	r0, .L1228+24
+	ldr	r2, [r2, r6]
+	add	r6, r6, #36
+	ldr	r3, [r3, #4]
+	bl	printk
+.L1225:
+	cmp	r8, r4
+	bne	.L1226
 	add	r5, r5, #1
 	uxth	r5, r5
-	b	.L1241
-.L1254:
-	mov	r7, #0
-	movw	fp, #3844
-	mov	r5, r7
-	mov	r9, #36
-	movw	r8, #3924
-.L1241:
-	ldrh	r3, [r6, fp]
+.L1219:
+	movw	r3, #3858
+	ldrh	r3, [r7, r3]
 	cmp	r3, r5
-	bhi	.L1208
+	bhi	.L1227
+	mov	r0, #0
+	add	sp, sp, #84
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1229:
+	.align	2
+.L1228:
+	.word	.LC101
+	.word	.LANCHOR3+15
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC102
+	.word	.LC103
+	.word	.LC104
+	.fnend
+	.size	FtlScanAllBlock, .-FtlScanAllBlock
+	.align	2
+	.global	FtlDumpBlockInfo
+	.type	FtlDumpBlockInfo, %function
+FtlDumpBlockInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	ubfx	r0, r0, #10, #16
+	.pad #84
+	sub	sp, sp, #84
+	mov	r7, r1
+	bl	P2V_block_in_plane
+	ldr	r5, .L1241
+	ldr	r1, .L1241+4
+	movw	r6, #3916
+	ldrh	r9, [r5, r6]
+	mov	r4, r0
+	ldr	r0, .L1241+8
+	bl	printk
+	ldr	r3, .L1241+12
+	mov	r1, r4
+	ldr	r0, .L1241+16
+	ldr	r2, [r3, #-2016]
+	mov	r3, r4, asl #1
+	ldrh	r2, [r2, r3]
+	bl	printk
+	add	r0, sp, #80
+	strh	r4, [r0, #-48]!	@ movhi
+	bl	make_superblock
+	rsbs	r7, r7, #1
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	movcc	r7, #0
+	cmp	r3, #0
+	moveq	r7, #0
 	cmp	r7, #0
-	beq	.L1209
-	ldr	r0, [r4, #-976]
+	beq	.L1231
+	mov	r0, r4
+	bl	ftl_get_blk_mode
+	cmp	r0, #1
+	mov	r7, r0
+	movweq	r3, #3918
+	ldreqh	r9, [r5, r3]
+.L1231:
+	ldrh	r3, [r5, r6]
 	mov	r1, r7
-	mov	r2, #1
-	mov	fp, r7
-	bl	FlashReadPages
-	mov	r8, #0
-	str	r8, [sp, #12]
-.L1240:
-	ldr	r3, [r4, #-976]
-	add	r2, r3, r8
-	ldr	r3, [r3, r8]
-	ldr	r6, [r2, #4]
-	cmn	r3, #1
-	ldr	r5, [r2, #12]
-	ubfx	r6, r6, #10, #16
-	bne	.L1210
+	ldr	r0, .L1241+20
+	mov	r2, r9
+	bl	printk
+	mov	r6, #0
+.L1232:
+	ldr	r3, .L1241
+	movw	r2, #3848
+	movw	r1, #3926
+	mov	r4, #0
+	add	r0, sp, #46
+	ldrh	sl, [r3, r2]
+	ldr	r2, .L1241+12
+	ldrh	lr, [r3, r1]
+	ldr	r8, [r2, #-972]
+	ldr	r5, [r2, #-1172]
+	ldr	ip, [r2, #-1168]
+	movw	r2, #3928
+	ldrh	r2, [r3, r2]
+	mov	r3, r4
+	str	r2, [sp, #28]
+	b	.L1233
+.L1235:
+	ldrh	r1, [r0, #2]!
+	movw	r2, #65535
+	cmp	r1, r2
+	beq	.L1234
+	mov	fp, #36
+	orr	r1, r6, r1, asl #10
+	mla	r2, fp, r4, r8
+	str	r1, [r2, #4]
+	mul	r1, lr, r4
+	add	fp, r1, #3
+	cmp	r1, #0
+	movlt	r1, fp
+	ldr	fp, [sp, #28]
+	bic	r1, r1, #3
+	add	r1, r5, r1
+	str	r1, [r2, #8]
+	mul	r1, fp, r4
+	add	r4, r4, #1
+	uxth	r4, r4
+	add	fp, r1, #3
+	cmp	r1, #0
+	movlt	r1, fp
+	bic	r1, r1, #3
+	add	r1, ip, r1
+	str	r1, [r2, #12]
+.L1234:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L1233:
+	cmp	r3, sl
+	bne	.L1235
+	ldr	r8, .L1241+12
+	mov	r1, r4
+	mov	r2, r7
+	mov	r5, #0
+	mov	sl, r5
+	ldr	r0, [r8, #-972]
+	bl	FlashReadPages
+	b	.L1236
+.L1237:
+	ldr	r2, [r8, #-972]
+	add	sl, sl, #1
+	ldrh	r1, [sp, #32]
+	add	r3, r2, r5
+	uxth	sl, sl
+	ldr	r0, [r3, #12]
+	ldr	ip, [r3, #8]
+	ldr	lr, [r0, #0]
+	str	lr, [sp, #0]
+	ldr	lr, [r0, #4]
+	str	lr, [sp, #4]
+	ldr	lr, [r0, #8]
+	str	lr, [sp, #8]
+	ldr	r0, [r0, #12]
+	str	r0, [sp, #12]
+	ldr	r0, [ip, #0]
+	str	r0, [sp, #16]
+	ldr	r0, [ip, #4]
+	str	r0, [sp, #20]
+	ldr	r0, .L1241+24
+	ldr	r2, [r2, r5]
+	add	r5, r5, #36
+	ldr	r3, [r3, #4]
+	bl	printk
+.L1236:
+	cmp	sl, r4
+	bne	.L1237
+	add	r6, r6, #1
+	uxth	r6, r6
+	cmp	r6, r9
+	bne	.L1232
+.L1238:
+	mov	r0, #0
+	add	sp, sp, #84
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1242:
+	.align	2
+.L1241:
+	.word	.LANCHOR0
+	.word	.LANCHOR3+31
+	.word	.LC101
+	.word	.LANCHOR2
+	.word	.LC105
+	.word	.LC106
+	.word	.LC107
+	.fnend
+	.size	FtlDumpBlockInfo, .-FtlDumpBlockInfo
+	.align	2
+	.global	FtlScanSysBlk
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r6, #0
+	ldr	r5, .L1301
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, .L1301+4
+	mov	r1, r6
+	ldr	r3, .L1301+8
+	mov	r7, #3936
+	ldr	r2, [r5, #3944]
+	ldr	r0, [r4, #-1036]
+	mov	sl, r4
+	strh	r6, [r4, r3]	@ movhi
+	movw	r3, #3962
+	strh	r6, [r5, r3]	@ movhi
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldr	r2, [r5, #3944]
+	mov	r1, r6
+	ldr	r0, [r4, #-1040]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r2, [r5, r7]
+	mov	r1, r6
+	ldr	r0, [r4, #-908]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r2, [r5, r7]
+	mov	r1, r6
+	ldr	r0, [r5, #3964]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldr	r0, .L1301+12
+	mov	r1, #255
+	mov	r2, #12
+	bl	ftl_memset
+	mov	r3, #3856
+	ldrh	r3, [r5, r3]
+	str	r3, [sp, #8]
+	b	.L1244
+.L1246:
+	add	r3, r6, r5
+	ldr	r1, [sp, #8]
+	ldrb	r0, [r3, #3874]	@ zero_extendqisi2
+	bl	V2P_block
+	str	r0, [sp, #0]
+	bl	FtlBbmIsBadBlock
+	ldr	r3, [sp, #0]
+	cmp	r0, #0
+	bne	.L1245
+	ldr	r2, [r4, #-972]
+	mov	r3, r3, asl #10
+	mla	r2, r9, r7, r2
+	str	r3, [r2, #4]
+	ldr	r3, [r4, #-1172]
+	str	r3, [r2, #8]
+	ldrh	r3, [r6, r8]
+	mul	r3, r3, r7
+	add	r7, r7, #1
+	uxth	r7, r7
+	add	r1, r3, #3
+	cmp	r3, #0
+	movlt	r3, r1
+	ldr	r1, [r4, #-1168]
+	bic	r3, r3, #3
+	add	r3, r1, r3
+	str	r3, [r2, #12]
+.L1245:
+	add	r5, r5, #1
+	uxth	r5, r5
+	b	.L1279
+.L1292:
+	mov	r7, #0
+	movw	fp, #3848
+	mov	r5, r7
+	mov	r9, #36
+	movw	r8, #3928
+.L1279:
+	ldrh	r3, [r6, fp]
+	cmp	r3, r5
+	bhi	.L1246
+	cmp	r7, #0
+	beq	.L1247
+	ldr	r0, [r4, #-972]
+	mov	r1, r7
+	mov	r2, #1
+	mov	fp, r7
+	bl	FlashReadPages
+	mov	r8, #0
+	str	r8, [sp, #12]
+.L1278:
+	ldr	r3, [r4, #-972]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
+	ldr	r6, [r2, #4]
+	cmn	r3, #1
+	ldr	r5, [r2, #12]
+	ubfx	r6, r6, #10, #16
+	bne	.L1248
 	mov	r7, #16
-.L1212:
-	ldr	r0, [r4, #-976]
+.L1250:
+	ldr	r0, [r4, #-972]
 	mov	r1, #1
 	mov	r2, r1
 	add	r0, r0, r8
@@ -10240,58 +10674,58 @@ FtlScanSysBlk:
 	ldrh	r3, [r5, #0]
 	movw	r1, #65535
 	cmp	r3, r1
-	ldreq	r3, [sl, #-976]
+	ldreq	r3, [sl, #-972]
 	mvneq	r2, #0
 	streq	r2, [r3, r8]
-	beq	.L1210
-.L1211:
-	ldr	r3, [r4, #-976]
+	beq	.L1248
+.L1249:
+	ldr	r3, [r4, #-972]
 	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	bne	.L1210
+	bne	.L1248
 	sub	r7, r7, #1
 	uxth	r7, r7
 	cmp	r7, #0
-	bne	.L1212
-.L1210:
-	ldr	r3, [r4, #-976]
+	bne	.L1250
+.L1248:
+	ldr	r3, [r4, #-972]
 	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	beq	.L1213
-	ldr	r2, [r4, #-1808]
+	beq	.L1251
+	ldr	r2, [r4, #-1804]
 	ldr	r3, [r5, #4]
 	cmn	r2, #1
-	beq	.L1214
+	beq	.L1252
 	cmp	r2, r3
-	bhi	.L1215
-.L1214:
+	bhi	.L1253
+.L1252:
 	cmn	r3, #1
 	addne	r3, r3, #1
-	strne	r3, [sl, #-1808]
-.L1215:
+	strne	r3, [sl, #-1804]
+.L1253:
 	ldrh	r3, [r5, #0]
 	movw	r2, #61604
 	cmp	r3, r2
-	beq	.L1218
-	bhi	.L1221
+	beq	.L1256
+	bhi	.L1259
 	movw	r2, #61574
 	cmp	r3, r2
-	bne	.L1216
-	b	.L1261
-.L1221:
+	bne	.L1254
+	b	.L1299
+.L1259:
 	movw	r2, #61634
 	cmp	r3, r2
-	beq	.L1219
+	beq	.L1257
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L1216
-	b	.L1262
-.L1219:
-	ldr	r3, .L1263
+	bne	.L1254
+	b	.L1300
+.L1257:
+	ldr	r3, .L1301
 	mov	r9, r6
-	ldr	r1, .L1263+8
-	ldr	ip, [r4, #-1040]
-	ldr	r0, [r3, #3940]
+	ldr	r1, .L1301+8
+	ldr	ip, [r4, #-1036]
+	ldr	r0, [r3, #3944]
 	ldrh	r1, [r4, r1]
 	uxth	r2, r0
 	sub	r3, r2, #1
@@ -10300,29 +10734,29 @@ FtlScanSysBlk:
 	uxth	r3, r3
 	sxth	r2, r2
 	str	r2, [sp, #4]
-	b	.L1222
-.L1228:
+	b	.L1260
+.L1266:
 	mov	r6, r2, asl #2
 	ldr	r7, [r5, #4]
 	str	r6, [sp, #16]
 	ldr	r6, [ip, r2, asl #2]
 	cmp	r7, r6
-	bls	.L1223
+	bls	.L1261
 	ldr	ip, [ip, #0]
 	mov	r6, r9
 	cmp	ip, #0
-	bne	.L1224
+	bne	.L1262
 	cmp	r1, r0
 	addne	r1, r1, #1
-	ldrne	r0, .L1263+8
+	ldrne	r0, .L1301+8
 	strneh	r1, [r4, r0]	@ movhi
-.L1224:
+.L1262:
 	mov	r0, #0
 	sxth	r9, r3
 	str	r3, [sp, #4]
-	b	.L1225
-.L1226:
-	ldr	r7, [r4, #-1040]
+	b	.L1263
+.L1264:
+	ldr	r7, [r4, #-1036]
 	add	ip, r1, #1
 	add	r0, r0, #1
 	ldr	r3, [r7, ip, asl #2]
@@ -10330,90 +10764,90 @@ FtlScanSysBlk:
 	uxth	r0, r0
 	str	r3, [r7, r1, asl #2]
 	mov	r1, r1, asl #1
-	ldr	r7, [r4, #-1044]
+	ldr	r7, [r4, #-1040]
 	ldrh	ip, [r7, ip]
 	strh	ip, [r7, r1]	@ movhi
-.L1225:
+.L1263:
 	sxth	r1, r0
 	cmp	r1, r9
-	bne	.L1226
-	ldr	r1, [sl, #-1040]
+	bne	.L1264
+	ldr	r1, [sl, #-1036]
 	mov	r2, r2, asl #1
 	ldr	r0, [r5, #4]
 	ldr	ip, [sp, #16]
 	ldr	r3, [sp, #4]
 	str	r0, [r1, ip]
-	ldr	r1, [sl, #-1044]
+	ldr	r1, [sl, #-1040]
 	strh	r6, [r1, r2]	@ movhi
-	b	.L1227
-.L1223:
+	b	.L1265
+.L1261:
 	sub	r3, r3, #1
 	uxth	r3, r3
-.L1222:
+.L1260:
 	ldr	r6, [sp, #4]
 	sxth	r2, r3
 	cmp	r2, r6
-	bgt	.L1228
+	bgt	.L1266
 	mov	r6, r9
-.L1227:
+.L1265:
 	sxth	r3, r3
 	cmp	r3, #0
-	blt	.L1216
-	ldr	r2, .L1263+8
-	ldr	r0, .L1263
+	blt	.L1254
+	ldr	r2, .L1301+8
+	ldr	r0, .L1301
 	ldrh	r1, [r4, r2]
-	ldr	r0, [r0, #3940]
+	ldr	r0, [r0, #3944]
 	rsb	r0, r1, r0
 	sub	r0, r0, #1
 	sxth	r0, r0
 	cmp	r3, r0
-	bgt	.L1216
+	bgt	.L1254
 	add	r1, r1, #1
 	strh	r1, [r4, r2]	@ movhi
-	ldr	r2, [r4, #-1040]
+	ldr	r2, [r4, #-1036]
 	ldr	r1, [r5, #4]
 	str	r1, [r2, r3, asl #2]
 	mov	r3, r3, asl #1
-	ldr	r2, [r4, #-1044]
-	b	.L1258
-.L1261:
-	ldr	r1, .L1263
-	movw	r3, #3932
-	movw	ip, #3958
+	ldr	r2, [r4, #-1040]
+	b	.L1296
+.L1299:
+	ldr	r1, .L1301
+	mov	r3, #3936
+	movw	ip, #3962
 	mov	r9, r6
 	ldrh	r0, [r1, r3]
 	ldrh	r1, [r1, ip]
 	sub	r2, r0, #1
-	ldr	ip, [r4, #-912]
+	ldr	ip, [r4, #-908]
 	uxth	r3, r2
 	rsb	r2, r1, r2
 	str	r2, [sp, #4]
-	b	.L1229
-.L1235:
+	b	.L1267
+.L1273:
 	mov	r6, r2, asl #2
 	ldr	r7, [r5, #4]
 	str	r6, [sp, #16]
 	ldr	r6, [ip, r2, asl #2]
 	cmp	r7, r6
-	bls	.L1230
+	bls	.L1268
 	ldr	ip, [ip, #0]
 	mov	r6, r9
 	cmp	ip, #0
-	bne	.L1231
+	bne	.L1269
 	cmp	r1, r0
 	addne	r1, r1, #1
-	ldrne	ip, .L1263
-	movwne	r0, #3958
+	ldrne	ip, .L1301
+	movwne	r0, #3962
 	strneh	r1, [ip, r0]	@ movhi
-.L1231:
+.L1269:
 	sxth	ip, r3
 	mov	r0, #0
 	str	ip, [sp, #20]
-	ldr	r9, .L1263
+	ldr	r9, .L1301
 	str	r3, [sp, #4]
-	b	.L1232
-.L1233:
-	ldr	r7, [r4, #-912]
+	b	.L1270
+.L1271:
+	ldr	r7, [r4, #-908]
 	add	ip, r1, #1
 	add	r0, r0, #1
 	ldr	r3, [r7, ip, asl #2]
@@ -10421,142 +10855,142 @@ FtlScanSysBlk:
 	uxth	r0, r0
 	str	r3, [r7, r1, asl #2]
 	mov	r1, r1, asl #1
-	ldr	r7, [r9, #3960]
+	ldr	r7, [r9, #3964]
 	ldrh	ip, [r7, ip]
 	strh	ip, [r7, r1]	@ movhi
-.L1232:
+.L1270:
 	ldr	ip, [sp, #20]
 	sxth	r1, r0
 	cmp	r1, ip
-	bne	.L1233
-	ldr	r1, [sl, #-912]
+	bne	.L1271
+	ldr	r1, [sl, #-908]
 	mov	r2, r2, asl #1
 	ldr	r0, [r5, #4]
 	ldr	ip, [sp, #16]
 	ldr	r3, [sp, #4]
 	str	r0, [r1, ip]
-	ldr	r1, .L1263
-	ldr	r1, [r1, #3960]
+	ldr	r1, .L1301
+	ldr	r1, [r1, #3964]
 	strh	r6, [r1, r2]	@ movhi
-	b	.L1234
-.L1230:
+	b	.L1272
+.L1268:
 	sub	r3, r3, #1
 	uxth	r3, r3
-.L1229:
+.L1267:
 	ldr	r6, [sp, #4]
 	sxth	r2, r3
 	cmp	r2, r6
-	bgt	.L1235
+	bgt	.L1273
 	mov	r6, r9
-.L1234:
+.L1272:
 	sxth	r3, r3
 	cmp	r3, #0
-	blt	.L1216
-	ldr	r2, .L1263
-	movw	ip, #3932
-	movw	r1, #3958
+	blt	.L1254
+	ldr	r2, .L1301
+	mov	ip, #3936
+	movw	r1, #3962
 	ldrh	ip, [r2, ip]
 	ldrh	r0, [r2, r1]
 	sub	ip, ip, #1
 	rsb	ip, r0, ip
 	sxth	ip, ip
 	cmp	r3, ip
-	bgt	.L1216
+	bgt	.L1254
 	add	r0, r0, #1
 	strh	r0, [r2, r1]	@ movhi
 	ldr	r0, [r5, #4]
-	ldr	r1, [r4, #-912]
+	ldr	r1, [r4, #-908]
 	str	r0, [r1, r3, asl #2]
 	mov	r3, r3, asl #1
-	ldr	r2, [r2, #3960]
-.L1258:
+	ldr	r2, [r2, #3964]
+.L1296:
 	strh	r6, [r2, r3]	@ movhi
-	b	.L1216
-.L1218:
-	ldr	r3, .L1263+12
+	b	.L1254
+.L1256:
+	ldr	r3, .L1301+16
 	movw	ip, #65535
 	ldrh	r2, [r4, r3]
 	cmp	r2, ip
 	streqh	r6, [r4, r3]	@ movhi
-	beq	.L1259
-	ldr	r3, .L1263+16
+	beq	.L1297
+	ldr	r3, .L1301+20
 	movw	r1, #65535
 	ldrh	r0, [r4, r3]
 	cmp	r0, r1
-	beq	.L1237
+	beq	.L1275
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L1237:
+.L1275:
 	ldr	r3, [r5, #4]
-	ldr	r2, [sl, #-1768]
+	ldr	r2, [sl, #-1764]
 	cmp	r2, r3
-	ldr	r3, .L1263+16
+	ldr	r3, .L1301+20
 	strcsh	r6, [r4, r3]	@ movhi
-	bcs	.L1216
-	ldr	r2, .L1263+12
+	bcs	.L1254
+	ldr	r2, .L1301+16
 	ldrh	r1, [r4, r2]
 	strh	r6, [r4, r2]	@ movhi
 	strh	r1, [r4, r3]	@ movhi
-.L1259:
+.L1297:
 	ldr	r3, [r5, #4]
-	str	r3, [r4, #-1768]
-	b	.L1216
-.L1262:
+	str	r3, [r4, #-1764]
+	b	.L1254
+.L1300:
 	mov	r0, r6
-	b	.L1260
-.L1213:
-	ldr	r3, .L1263
+	b	.L1298
+.L1251:
+	ldr	r3, .L1301
 	mov	r0, r6
 	ldrb	r1, [r3, #928]	@ zero_extendqisi2
 	cmp	r1, #0
-	beq	.L1239
-.L1260:
+	beq	.L1277
+.L1298:
 	mov	r1, #0
-.L1239:
+.L1277:
 	bl	FtlFreeSysBlkQueueIn
-.L1216:
+.L1254:
 	ldr	r6, [sp, #12]
 	add	r8, r8, #36
 	add	r3, r6, #1
 	uxth	r3, r3
 	str	r3, [sp, #12]
 	cmp	r3, fp
-	bne	.L1240
-.L1209:
+	bne	.L1278
+.L1247:
 	ldr	ip, [sp, #8]
 	add	r3, ip, #1
 	uxth	r3, r3
 	str	r3, [sp, #8]
-.L1206:
-	ldr	r6, .L1263
-	movw	r3, #3854
+.L1244:
+	ldr	r6, .L1301
+	movw	r3, #3858
 	ldr	ip, [sp, #8]
 	ldrh	r3, [r6, r3]
 	cmp	r3, ip
-	bhi	.L1254
-	ldr	r1, .L1263+4
-	ldr	r2, [r1, #-1044]
+	bhi	.L1292
+	ldr	r1, .L1301+4
+	ldr	r2, [r1, #-1040]
 	ldrh	r3, [r2, #0]
 	cmp	r3, #0
-	bne	.L1242
-	ldr	r0, .L1263+8
+	bne	.L1280
+	ldr	r0, .L1301+8
 	ldrh	r1, [r1, r0]
 	cmp	r1, #0
-	ldrne	r0, [r6, #3940]
-	bne	.L1243
-	b	.L1242
-.L1247:
+	ldrne	r0, [r6, #3944]
+	bne	.L1281
+	b	.L1280
+.L1285:
 	mov	r1, r1, asl #1
 	ldrh	r1, [r2, r1]
 	cmp	r1, #0
-	beq	.L1244
-	ldr	r7, .L1263
+	beq	.L1282
+	ldr	r7, .L1301
 	sxth	r6, r3
-	ldr	r1, .L1263+4
+	ldr	r1, .L1301+4
 	mov	r5, #0
-	b	.L1245
-.L1246:
-	ldr	ip, [r1, #-1044]
+	b	.L1283
+.L1284:
+	ldr	ip, [r1, #-1040]
 	mov	r0, r2, asl #1
 	rsb	r4, r6, r2
 	add	r3, r3, #1
@@ -10564,49 +10998,49 @@ FtlScanSysBlk:
 	mov	r8, r4, asl #1
 	uxth	r3, r3
 	strh	sl, [ip, r8]	@ movhi
-	ldr	ip, [r1, #-1040]
+	ldr	ip, [r1, #-1036]
 	ldr	r2, [ip, r2, asl #2]
 	str	r2, [ip, r4, asl #2]
-	ldr	r2, [r1, #-1044]
+	ldr	r2, [r1, #-1040]
 	strh	r5, [r2, r0]	@ movhi
-.L1245:
-	ldr	r0, [r7, #3940]
+.L1283:
+	ldr	r0, [r7, #3944]
 	sxth	r2, r3
 	cmp	r2, r0
-	bcc	.L1246
-	b	.L1242
-.L1244:
+	bcc	.L1284
+	b	.L1280
+.L1282:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L1243:
+.L1281:
 	sxth	r1, r3
 	cmp	r1, r0
-	bcc	.L1247
-.L1242:
-	ldr	r2, .L1263
-	ldr	r1, [r2, #3960]
+	bcc	.L1285
+.L1280:
+	ldr	r2, .L1301
+	ldr	r1, [r2, #3964]
 	ldrh	r3, [r1, #0]
 	cmp	r3, #0
-	bne	.L1248
-	movw	r0, #3958
+	bne	.L1286
+	movw	r0, #3962
 	ldrh	r0, [r2, r0]
 	cmp	r0, #0
-	movwne	r0, #3932
+	movne	r0, #3936
 	ldrneh	r2, [r2, r0]
-	bne	.L1249
-	b	.L1248
-.L1253:
+	bne	.L1287
+	b	.L1286
+.L1291:
 	mov	ip, r0, asl #1
 	ldrh	ip, [r1, ip]
 	cmp	ip, #0
-	beq	.L1250
-	ldr	r1, .L1263
-	movw	r8, #3932
-	ldr	r7, .L1263+4
+	beq	.L1288
+	ldr	r1, .L1301
+	mov	r8, #3936
+	ldr	r7, .L1301+4
 	mov	r6, #0
-	b	.L1251
-.L1252:
-	ldr	r4, [r1, #3960]
+	b	.L1289
+.L1290:
+	ldr	r4, [r1, #3964]
 	mov	ip, r2, asl #1
 	rsb	r5, r0, r2
 	add	r3, r3, #1
@@ -10614,36 +11048,37 @@ FtlScanSysBlk:
 	mov	sl, r5, asl #1
 	uxth	r3, r3
 	strh	r9, [r4, sl]	@ movhi
-	ldr	r4, [r7, #-912]
+	ldr	r4, [r7, #-908]
 	ldr	r2, [r4, r2, asl #2]
 	str	r2, [r4, r5, asl #2]
-	ldr	r2, [r1, #3960]
+	ldr	r2, [r1, #3964]
 	strh	r6, [r2, ip]	@ movhi
-.L1251:
+.L1289:
 	ldrh	ip, [r1, r8]
 	sxth	r2, r3
 	cmp	r2, ip
-	blt	.L1252
-	b	.L1248
-.L1250:
+	blt	.L1290
+	b	.L1286
+.L1288:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L1249:
+.L1287:
 	sxth	r0, r3
 	cmp	r0, r2
-	blt	.L1253
-.L1248:
+	blt	.L1291
+.L1286:
 	mov	r0, #0
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1264:
+.L1302:
 	.align	2
-.L1263:
+.L1301:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1048
-	.word	-1776
+	.word	-1044
+	.word	.LANCHOR2-1772
 	.word	-1772
+	.word	-1768
 	.fnend
 	.size	FtlScanSysBlk, .-FtlScanSysBlk
 	.align	2
@@ -10654,11 +11089,11 @@ FtlGetLastWrittenPage:
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
 	cmp	r1, #1
-	ldr	r3, .L1276
+	ldr	r3, .L1314
 	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 	.save {r4, r5, r6, r7, r8, sl, lr}
-	movweq	r2, #3914
-	movwne	r2, #3912
+	movweq	r2, #3918
+	movwne	r2, #3916
 	.pad #108
 	sub	sp, sp, #108
 	ldrh	r4, [r3, r2]
@@ -10680,9 +11115,9 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #40]
 	cmn	r3, #1
-	bne	.L1269
-	b	.L1274
-.L1272:
+	bne	.L1307
+	b	.L1312
+.L1310:
 	add	r6, r6, r3
 	mov	r0, r7
 	mov	r1, #1
@@ -10695,30 +11130,30 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #40]
 	cmn	r3, #1
-	bne	.L1270
+	bne	.L1308
 	ldr	r3, [sp, #44]
 	cmn	r3, #1
-	bne	.L1270
+	bne	.L1308
 	ldr	r3, [sp, #4]
 	cmn	r3, #1
 	subne	r4, r6, #1
 	uxthne	r4, r4
-	bne	.L1274
-.L1270:
+	bne	.L1312
+.L1308:
 	add	r6, r6, #1
 	uxth	r8, r6
-.L1274:
+.L1312:
 	sxth	r6, r8
 	sxth	r3, r4
 	cmp	r6, r3
-	ble	.L1272
-.L1269:
+	ble	.L1310
+.L1307:
 	sxth	r0, r4
 	add	sp, sp, #108
 	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
-.L1277:
+.L1315:
 	.align	2
-.L1276:
+.L1314:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
@@ -10732,138 +11167,137 @@ FtlLoadSysInfo:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r5, #0
-	ldr	r4, .L1294
+	ldr	r4, .L1332
 	mov	r1, r5
-	ldr	r2, .L1294+4
-	ldr	r3, [r4, #-940]
-	ldr	r0, [r4, #-2020]
-	str	r5, [r4, #184]
-	str	r3, [r4, #188]
-	movw	r3, #3852
+	ldr	r2, .L1332+4
+	ldr	r7, .L1332+8
+	ldr	r3, [r4, #-936]
+	str	r5, [r4, #188]
+	ldr	r0, [r4, #-2016]
+	str	r3, [r4, #192]
+	mov	r3, #3856
 	ldrh	r2, [r2, r3]
 	mov	r2, r2, asl #1
 	bl	ftl_memset
-	ldr	r3, .L1294+8
-	ldrh	r0, [r4, r3]
+	ldrh	r0, [r4, r7]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L1292
+	beq	.L1330
 	mov	r1, #1
-	ldr	r7, .L1294+12
 	bl	FtlGetLastWrittenPage
-	ldr	r3, .L1294+16
+	ldr	r3, .L1332+12
 	add	r2, r0, #1
 	mov	r6, r0
 	strh	r2, [r4, r3]	@ movhi
-	b	.L1280
-.L1283:
-	ldr	r2, .L1294+8
+	b	.L1318
+.L1321:
+	ldrh	r2, [r4, r7]
 	mov	r1, #1
-	ldr	r0, .L1294+20
-	ldrh	r2, [r4, r2]
+	ldr	r0, .L1332+16
 	orr	r3, r3, r2, asl #10
-	str	r3, [r4, #180]
-	ldr	r3, [r4, #-964]
-	mov	r2, r1
 	str	r3, [r4, #184]
+	ldr	r3, [r4, #-960]
+	mov	r2, r1
+	str	r3, [r4, #188]
 	bl	FlashReadPages
-	ldr	r3, [r4, #176]
+	ldr	r3, [r4, #180]
 	cmn	r3, #1
-	beq	.L1281
-	ldr	r3, [r4, #-964]
-	ldr	r3, [r3, #0]
-	cmp	r3, r7
-	bne	.L1281
-	ldr	r3, [r4, #-940]
+	beq	.L1319
+	ldr	r3, [r4, #-960]
+	ldr	r2, [r3, #0]
+	ldr	r3, .L1332+20
+	cmp	r2, r3
+	bne	.L1319
+	ldr	r3, [r4, #-936]
 	ldrh	r2, [r3, #0]
 	movw	r3, #61604
 	cmp	r2, r3
-	beq	.L1282
-.L1281:
+	beq	.L1320
+.L1319:
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L1280:
+.L1318:
 	add	r3, r5, r6
 	sxth	r3, r3
 	cmp	r3, #0
-	bge	.L1283
-.L1282:
-	ldr	r4, .L1294
+	bge	.L1321
+.L1320:
+	ldr	r4, .L1332
 	mov	r2, #48
-	ldr	r5, .L1294+4
-	movw	r6, #3852
-	ldr	r0, .L1294+24
-	ldr	r7, [r4, #184]
+	ldr	r5, .L1332+4
+	mov	r6, #3856
+	ldr	r0, .L1332+24
+	ldr	r7, [r4, #188]
 	mov	r1, r7
 	bl	memcpy
 	ldrh	r2, [r5, r6]
 	add	r1, r7, #48
-	ldr	r0, [r4, #-2020]
+	ldr	r0, [r4, #-2016]
 	mov	r2, r2, asl #1
 	bl	memcpy
 	ldrh	r1, [r5, r6]
-	ldr	r3, [r4, #184]
-	ldr	r0, [r4, #-1844]
+	ldr	r3, [r4, #188]
+	ldr	r0, [r4, #-1840]
 	mov	r2, r1, lsr #3
 	add	r1, r1, #24
 	add	r2, r2, #4
 	mov	r1, r1, lsr #1
 	add	r1, r3, r1, asl #2
 	bl	memcpy
-	movw	r3, #3956
+	movw	r3, #3960
 	ldrh	r3, [r5, r3]
 	cmp	r3, #0
-	beq	.L1284
+	beq	.L1322
 	ldrh	r3, [r5, r6]
-	movw	r2, #3948
+	mov	r2, #3952
 	ldrh	r2, [r5, r2]
-	ldr	r0, [r4, #-904]
+	ldr	r0, [r4, #-900]
 	mov	r1, r3, lsr #3
 	add	r1, r1, r3, asl #1
-	ldr	r3, [r4, #184]
+	ldr	r3, [r4, #188]
 	add	r1, r1, #52
 	mov	r2, r2, asl #2
 	ubfx	r1, r1, #2, #14
 	add	r1, r3, r1, asl #2
 	bl	memcpy
-.L1284:
-	ldr	r4, .L1294
-	ldr	r3, .L1294+12
-	ldr	r2, [r4, #-2076]
+.L1322:
+	ldr	r4, .L1332
+	ldr	r3, .L1332+20
+	ldr	r2, [r4, #-2072]
 	cmp	r2, r3
-	bne	.L1292
-	ldr	r3, .L1294+28
-	movw	r1, #3866
-	ldrb	r0, [r4, #-2066]	@ zero_extendqisi2
+	bne	.L1330
+	ldr	r3, .L1332+28
+	movw	r1, #3870
+	ldrb	r0, [r4, #-2062]	@ zero_extendqisi2
 	ldrh	r2, [r4, r3]
-	ldr	r3, .L1294+32
+	ldr	r3, .L1332+32
 	strh	r2, [r4, r3]	@ movhi
-	ldr	r3, .L1294+4
+	ldr	r3, .L1332+4
 	ldrh	r1, [r3, r1]
 	cmp	r0, r1
-	bne	.L1292
-	movw	r1, #3912
-	movw	r0, #3918
+	bne	.L1330
+	movw	r1, #3916
+	movw	r0, #3922
 	ldrh	r1, [r3, r1]
 	movw	r5, #65535
 	ldrh	r0, [r3, r0]
-	str	r2, [r4, #212]
+	str	r2, [r4, #216]
 	mul	r1, r2, r1
-	str	r1, [r3, #3972]
+	str	r1, [r3, #3976]
 	mul	r1, r0, r1
-	ldr	r0, [r3, #3856]
-	str	r1, [r3, #3952]
-	movw	r1, #3982
+	ldr	r0, [r3, #3860]
+	str	r1, [r3, #3956]
+	movw	r1, #3986
 	ldrh	r1, [r3, r1]
 	rsb	r0, r1, r0
 	rsb	r0, r2, r0
-	movw	r2, #3844
+	movw	r2, #3848
 	ldrh	r1, [r3, r2]
 	bl	__aeabi_uidiv
-	ldr	r3, .L1294+36
-	ldr	r1, .L1294+40
+	ldr	r3, .L1332+36
+	ldr	r1, .L1332+40
 	strh	r0, [r4, r3]	@ movhi
-	ldr	r3, .L1294+44
+	ldr	r3, .L1332+44
 	ldrh	r2, [r4, r3]
 	add	r3, r3, #62
 	strh	r2, [r4, r3]	@ movhi
@@ -10871,123 +11305,125 @@ FtlLoadSysInfo:
 	ldrh	r3, [r4, r3]
 	mov	r0, r3, lsr #6
 	and	r3, r3, #63
-	strb	r3, [r4, #-1994]
-	ldrb	r3, [r4, #-2065]	@ zero_extendqisi2
+	strb	r3, [r4, #-1990]
+	ldrb	r3, [r4, #-2061]	@ zero_extendqisi2
 	strh	r0, [r4, r1]	@ movhi
 	mvn	r1, #0
-	ldr	r0, .L1294+48
-	strb	r3, [r4, #-1992]
-	ldr	r3, .L1294+52
+	ldr	r0, .L1332+48
+	strb	r3, [r4, #-1988]
+	ldr	r3, .L1332+52
 	strh	r1, [r4, r3]	@ movhi
 	mov	r3, #0
-	ldr	r1, .L1294+56
+	ldr	r1, .L1332+56
 	strh	r3, [r4, r0]	@ movhi
-	strb	r3, [r4, #-1758]
+	strb	r3, [r4, #-1754]
 	ldrh	r0, [r4, r1]
 	add	r1, r1, #106
-	strb	r3, [r4, #-1756]
-	str	r3, [r4, #-1820]
+	strb	r3, [r4, #-1752]
+	str	r3, [r4, #-1816]
 	strh	r0, [r4, r1]	@ movhi
 	sub	r1, r1, #104
-	ldr	r0, .L1294+60
+	ldr	r0, .L1332+60
 	ldrh	r1, [r4, r1]
 	mov	ip, r1, lsr #6
 	and	r1, r1, #63
-	strb	r1, [r4, #-1946]
-	ldrb	r1, [r4, #-2064]	@ zero_extendqisi2
+	strb	r1, [r4, #-1942]
+	ldrb	r1, [r4, #-2060]	@ zero_extendqisi2
 	strh	ip, [r4, r0]	@ movhi
-	strb	r1, [r4, #-1944]
-	ldr	r1, .L1294+64
+	strb	r1, [r4, #-1940]
+	ldr	r1, .L1332+64
 	ldrh	r0, [r4, r1]
 	add	r1, r1, #150
 	strh	r0, [r4, r1]	@ movhi
-	sub	r1, r1, #148
-	ldr	r0, .L1294+68
+	ldr	r1, .L1332+68
+	ldr	r0, .L1332+72
 	ldrh	r1, [r4, r1]
 	mov	ip, r1, lsr #6
 	and	r1, r1, #63
-	strb	r1, [r4, #-1898]
-	ldrb	r1, [r4, #-2063]	@ zero_extendqisi2
+	strb	r1, [r4, #-1894]
+	ldrb	r1, [r4, #-2059]	@ zero_extendqisi2
 	strh	ip, [r4, r0]	@ movhi
-	strb	r1, [r4, #-1896]
-	str	r3, [r4, #-1832]
-	ldr	r1, [r4, #-2044]
-	str	r3, [r4, #-1840]
-	str	r3, [r4, #-1824]
-	str	r3, [r4, #-1796]
-	str	r3, [r4, #-1788]
+	strb	r1, [r4, #-1892]
 	str	r3, [r4, #-1828]
-	ldr	r3, [r4, #-2036]
-	str	r1, [r4, #-1800]
-	ldr	r1, [r4, #-1808]
-	cmp	r3, r1
-	strhi	r3, [r4, #-1808]
-	ldr	r4, .L1294
-	ldr	r3, [r4, #-2040]
+	ldr	r1, [r4, #-2040]
+	str	r3, [r4, #-1836]
+	str	r3, [r4, #-1820]
+	str	r3, [r4, #-1792]
+	str	r3, [r4, #-1784]
+	str	r3, [r4, #-1824]
+	ldr	r3, [r4, #-2032]
+	str	r1, [r4, #-1796]
 	ldr	r1, [r4, #-1804]
 	cmp	r3, r1
 	strhi	r3, [r4, #-1804]
+	ldr	r4, .L1332
+	ldr	r3, [r4, #-2036]
+	ldr	r1, [r4, #-1800]
+	cmp	r3, r1
+	strhi	r3, [r4, #-1800]
 	cmp	r2, r5
-	beq	.L1287
-	ldr	r0, .L1294+72
+	beq	.L1325
+	ldr	r0, .L1332+76
 	bl	make_superblock
-.L1287:
-	ldr	r3, .L1294+76
+.L1325:
+	ldr	r3, .L1332+80
 	ldrh	r3, [r4, r3]
 	cmp	r3, r5
-	beq	.L1288
-	ldr	r0, .L1294+80
+	beq	.L1326
+	ldr	r0, .L1332+84
 	bl	make_superblock
-.L1288:
-	ldr	r4, .L1294
-	movw	r5, #65535
-	ldr	r3, .L1294+84
-	ldrh	r3, [r4, r3]
-	cmp	r3, r5
-	beq	.L1289
-	sub	r0, r4, #1904
+.L1326:
+	ldr	r5, .L1332
+	movw	r4, #65535
+	ldr	r3, .L1332+88
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L1327
+	ldr	r0, .L1332+92
 	bl	make_superblock
-.L1289:
-	ldr	r3, .L1294+52
-	ldrh	r3, [r4, r3]
-	cmp	r3, r5
-	beq	.L1293
-	ldr	r0, .L1294+88
+.L1327:
+	ldr	r3, .L1332+52
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L1331
+	ldr	r0, .L1332+96
 	bl	make_superblock
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1292:
+.L1330:
 	mvn	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1293:
+.L1331:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1295:
+.L1333:
 	.align	2
-.L1294:
+.L1332:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	-1776
-	.word	1179929683
-	.word	-1774
-	.word	.LANCHOR2+176
-	.word	.LANCHOR2-2076
-	.word	-2068
+	.word	-1772
 	.word	-1770
-	.word	-1780
-	.word	-1998
-	.word	-2062
-	.word	-1762
-	.word	-1764
+	.word	.LANCHOR2+180
+	.word	1179929683
+	.word	.LANCHOR2-2072
+	.word	-2064
+	.word	-1766
+	.word	-1776
+	.word	-1994
 	.word	-2058
-	.word	-1950
+	.word	-1758
+	.word	-1760
 	.word	-2054
-	.word	-1902
-	.word	.LANCHOR2-2000
-	.word	-1952
-	.word	.LANCHOR2-1952
-	.word	-1904
-	.word	.LANCHOR2-1764
+	.word	-1946
+	.word	-2050
+	.word	-2048
+	.word	-1898
+	.word	.LANCHOR2-1996
+	.word	-1948
+	.word	.LANCHOR2-1948
+	.word	-1900
+	.word	.LANCHOR2-1900
+	.word	.LANCHOR2-1760
 	.fnend
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
@@ -10999,187 +11435,187 @@ FtlLoadBbt:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	ldr	r6, .L1312
-	ldr	r8, .L1312+4
-	ldr	r3, [r6, #-964]
+	ldr	r6, .L1350
+	ldr	r8, .L1350+4
+	ldr	r3, [r6, #-960]
 	mov	r7, r6
-	ldr	r4, [r6, #-940]
-	str	r3, [r6, #184]
-	str	r4, [r6, #188]
+	ldr	r4, [r6, #-936]
+	str	r3, [r6, #188]
+	str	r4, [r6, #192]
 	bl	FtlBbtMemInit
-	movw	r3, #3908
+	movw	r3, #3912
 	ldrh	r5, [r8, r3]
 	sub	r5, r5, #1
 	uxth	r5, r5
-	b	.L1297
-.L1301:
+	b	.L1335
+.L1339:
 	mov	r1, #1
 	mov	r3, r5, asl #10
-	ldr	r0, .L1312+8
+	ldr	r0, .L1350+8
 	mov	r2, r1
-	str	r3, [r6, #180]
+	str	r3, [r6, #184]
 	bl	FlashReadPages
-	ldr	r3, [r6, #176]
-	cmn	r3, #1
-	bne	.L1298
 	ldr	r3, [r6, #180]
+	cmn	r3, #1
+	bne	.L1336
+	ldr	r3, [r6, #184]
 	mov	r1, #1
-	ldr	r0, .L1312+8
+	ldr	r0, .L1350+8
 	mov	r2, r1
 	add	r3, r3, #1
-	str	r3, [r6, #180]
+	str	r3, [r6, #184]
 	bl	FlashReadPages
-.L1298:
-	ldr	r3, [r7, #176]
+.L1336:
+	ldr	r3, [r7, #180]
 	cmn	r3, #1
-	beq	.L1299
+	beq	.L1337
 	ldrh	r2, [r4, #0]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1299
-	ldr	r3, .L1312+4
-	movw	r2, #3976
+	bne	.L1337
+	ldr	r3, .L1350+4
+	movw	r2, #3980
 	strh	r5, [r3, r2]	@ movhi
 	ldr	r2, [r4, #4]
-	str	r2, [r3, #3984]
-	movw	r2, #3980
+	str	r2, [r3, #3988]
+	mov	r2, #3984
 	ldrh	r1, [r4, #8]
 	strh	r1, [r3, r2]	@ movhi
-	b	.L1300
-.L1299:
+	b	.L1338
+.L1337:
 	sub	r5, r5, #1
 	uxth	r5, r5
-.L1297:
-	movw	r3, #3908
+.L1335:
+	movw	r3, #3912
 	ldrh	r3, [r8, r3]
 	sub	r3, r3, #48
 	cmp	r5, r3
-	bgt	.L1301
-.L1300:
-	ldr	r5, .L1312+4
-	movw	r8, #3976
+	bgt	.L1339
+.L1338:
+	ldr	r5, .L1350+4
+	movw	r8, #3980
 	movw	r3, #65535
 	ldrh	r2, [r5, r8]
 	cmp	r2, r3
-	beq	.L1311
-	movw	r6, #3980
+	beq	.L1349
+	mov	r6, #3984
 	ldrh	r2, [r5, r6]
 	cmp	r2, r3
-	beq	.L1303
-	ldr	r7, .L1312
+	beq	.L1341
+	ldr	r7, .L1350
 	mov	r1, #1
 	mov	r2, r2, asl #10
-	add	r0, r7, #176
-	str	r2, [r7, #180]
+	add	r0, r7, #180
+	str	r2, [r7, #184]
 	mov	r2, r1
 	bl	FlashReadPages
-	ldr	r3, [r7, #176]
+	ldr	r3, [r7, #180]
 	cmn	r3, #1
-	beq	.L1303
+	beq	.L1341
 	ldrh	r2, [r4, #0]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1303
+	bne	.L1341
 	ldr	r3, [r4, #4]
-	ldr	r2, [r5, #3984]
+	ldr	r2, [r5, #3988]
 	cmp	r3, r2
-	strhi	r3, [r5, #3984]
+	strhi	r3, [r5, #3988]
 	ldrhih	r2, [r5, r6]
 	ldrhih	r3, [r4, #8]
 	strhih	r2, [r5, r8]	@ movhi
 	strhih	r3, [r5, r6]	@ movhi
-.L1303:
-	ldr	r8, .L1312+4
-	movw	r3, #3976
+.L1341:
+	ldr	r8, .L1350+4
+	movw	r3, #3980
 	mov	r1, #1
 	mov	r6, #0
-	ldr	r5, .L1312
+	ldr	r5, .L1350
 	ldrh	r0, [r8, r3]
 	bl	FtlGetLastWrittenPage
-	movw	r3, #3978
+	movw	r3, #3982
 	add	r2, r0, #1
 	mov	r7, r0
 	strh	r2, [r8, r3]	@ movhi
-	b	.L1304
-.L1307:
-	movw	r2, #3976
+	b	.L1342
+.L1345:
+	movw	r2, #3980
 	mov	r1, #1
 	ldrh	r2, [r8, r2]
-	ldr	r0, .L1312+8
+	ldr	r0, .L1350+8
 	orr	r3, r3, r2, asl #10
-	str	r3, [r5, #180]
-	ldr	r3, [r5, #-964]
-	mov	r2, r1
 	str	r3, [r5, #184]
+	ldr	r3, [r5, #-960]
+	mov	r2, r1
+	str	r3, [r5, #188]
 	bl	FlashReadPages
-	ldr	r3, [r5, #176]
+	ldr	r3, [r5, #180]
 	cmn	r3, #1
-	beq	.L1305
+	beq	.L1343
 	ldrh	r2, [r4, #0]
 	movw	r3, #61649
 	cmp	r2, r3
-	beq	.L1306
-.L1305:
+	beq	.L1344
+.L1343:
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1304:
+.L1342:
 	add	r3, r6, r7
 	sxth	r3, r3
 	cmp	r3, #0
-	bge	.L1307
-.L1306:
-	ldr	r3, .L1312+4
-	movw	r2, #3982
+	bge	.L1345
+.L1344:
+	ldr	r3, .L1350+4
+	movw	r2, #3986
 	ldrh	r1, [r4, #10]
 	ldrh	r0, [r4, #12]
 	strh	r1, [r3, r2]	@ movhi
 	movw	r2, #65535
 	cmp	r0, r2
-	beq	.L1308
-	ldr	r2, [r3, #3840]
+	beq	.L1346
+	ldr	r2, [r3, #3844]
 	cmp	r0, r2
-	beq	.L1308
-	movw	r1, #3854
+	beq	.L1346
+	movw	r1, #3858
 	ldrh	r3, [r3, r1]
 	mov	r3, r3, lsr #2
 	cmp	r2, r3
-	bcs	.L1308
+	bcs	.L1346
 	cmp	r0, r3
-	bcs	.L1308
+	bcs	.L1346
 	bl	FtlSysBlkNumInit
-.L1308:
-	ldr	r5, .L1312+12
+.L1346:
+	ldr	r6, .L1350+12
 	mov	r4, #0
-	movw	r7, #3866
-	ldr	r6, .L1312
-	sub	r8, r5, #4000
-	b	.L1309
-.L1310:
-	ldr	r3, .L1312+16
-	ldr	r1, [r6, #184]
-	ldr	r0, [r5, #4]!
-	ldrh	r2, [r6, r3]
+	ldr	r8, .L1350+4
+	movw	r7, #3870
+	ldr	r5, .L1350
+	b	.L1347
+.L1348:
+	ldr	r3, .L1350+16
+	ldr	r1, [r5, #188]
+	ldr	r0, [r6, #4]!
+	ldrh	r2, [r5, r3]
 	mov	r2, r2, asl #2
 	mla	r1, r4, r2, r1
 	bl	memcpy
 	add	r4, r4, #1
-.L1309:
+.L1347:
 	ldrh	r3, [r8, r7]
 	cmp	r4, r3
-	bcc	.L1310
+	bcc	.L1348
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1311:
+.L1349:
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1313:
+.L1351:
 	.align	2
-.L1312:
+.L1350:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR2+176
-	.word	.LANCHOR0+4000
-	.word	-1032
+	.word	.LANCHOR2+180
+	.word	.LANCHOR0+4004
+	.word	-1028
 	.fnend
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	2
@@ -11192,63 +11628,63 @@ FtlLoadFactoryBbt:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r5, #0
-	ldr	r3, .L1321
-	movw	fp, #3866
-	ldr	r7, .L1321+4
-	ldr	r6, .L1321+8
-	ldr	r2, [r3, #-964]
-	ldr	r8, [r3, #-940]
-	str	r2, [r3, #184]
-	str	r8, [r3, #188]
-	b	.L1315
-.L1320:
-	movw	r9, #3908
+	ldr	r3, .L1359
+	movw	fp, #3870
+	ldr	r7, .L1359+4
+	ldr	r6, .L1359+8
+	ldr	r2, [r3, #-960]
+	ldr	r8, [r3, #-936]
+	str	r2, [r3, #188]
+	str	r8, [r3, #192]
+	b	.L1353
+.L1358:
+	movw	r9, #3912
 	mvn	r3, #0
 	ldrh	r4, [r6, r9]
 	strh	r3, [r7], #2	@ movhi
 	add	r4, r4, r3
-	ldr	sl, .L1321
+	ldr	sl, .L1359
 	uxth	r4, r4
-	b	.L1316
-.L1319:
+	b	.L1354
+.L1357:
 	mla	r3, r3, r5, r4
 	mov	r1, #1
-	ldr	r0, .L1321+12
+	ldr	r0, .L1359+12
 	mov	r2, r1
 	mov	r3, r3, asl #10
-	str	r3, [sl, #180]
+	str	r3, [sl, #184]
 	bl	FlashReadPages
-	ldr	r3, [sl, #176]
+	ldr	r3, [sl, #180]
 	cmn	r3, #1
-	beq	.L1317
+	beq	.L1355
 	ldrh	r2, [r8, #0]
 	movw	r3, #61664
 	cmp	r2, r3
 	streqh	r4, [r7, #-2]	@ movhi
-	beq	.L1318
-.L1317:
+	beq	.L1356
+.L1355:
 	sub	r4, r4, #1
 	uxth	r4, r4
-.L1316:
+.L1354:
 	ldrh	r3, [r6, r9]
 	sub	r2, r3, #16
 	cmp	r4, r2
-	bgt	.L1319
-.L1318:
+	bgt	.L1357
+.L1356:
 	add	r5, r5, #1
-.L1315:
+.L1353:
 	ldrh	r3, [r6, fp]
 	cmp	r5, r3
-	bcc	.L1320
+	bcc	.L1358
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1322:
+.L1360:
 	.align	2
-.L1321:
+.L1359:
 	.word	.LANCHOR2
-	.word	.LANCHOR0+3988
+	.word	.LANCHOR0+3992
 	.word	.LANCHOR0
-	.word	.LANCHOR2+176
+	.word	.LANCHOR2+180
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	2
@@ -11266,13 +11702,13 @@ FlashProgSlc2KPages:
 	mov	r9, r2
 	str	r3, [sp, #12]
 	mov	r4, r0
-	ldr	r3, .L1342
+	ldr	r3, .L1380
 	mov	r6, r0
 	mov	r8, #0
-	ldr	r7, .L1342+4
+	ldr	r7, .L1380+4
 	ldrb	fp, [r3, #2901]	@ zero_extendqisi2
-	b	.L1324
-.L1331:
+	b	.L1362
+.L1369:
 	rsb	r3, r8, sl
 	add	r2, sp, #20
 	mov	r0, r6
@@ -11286,7 +11722,7 @@ FlashProgSlc2KPages:
 	cmp	r3, r2
 	mvncs	r3, #0
 	strcs	r3, [r6, #0]
-	bcs	.L1326
+	bcs	.L1364
 	add	r3, r7, r3
 	ldrb	r5, [r3, #3764]	@ zero_extendqisi2
 	mov	r0, r5
@@ -11345,27 +11781,27 @@ FlashProgSlc2KPages:
 	mvnne	r3, #0
 	strne	r3, [r6, #0]
 	bl	NandcFlashDeCs
-.L1326:
+.L1364:
 	add	r8, r8, #1
 	add	r6, r6, #36
-.L1324:
+.L1362:
 	cmp	r8, sl
-	bne	.L1331
+	bne	.L1369
 	ldr	r3, [sp, #12]
 	cmp	r3, #0
 	movne	r6, #0
-	ldrne	r5, .L1342+8
-	bne	.L1332
-	b	.L1333
-.L1338:
+	ldrne	r5, .L1380+8
+	bne	.L1370
+	b	.L1371
+.L1376:
 	ldr	r3, [r4, #0]
 	cmn	r3, #1
-	bne	.L1334
+	bne	.L1372
 	ldr	r1, [r4, #4]
-	ldr	r0, .L1342+12
+	ldr	r0, .L1380+12
 	bl	printk
-	b	.L1335
-.L1334:
+	b	.L1373
+.L1372:
 	rsb	r3, r6, sl
 	mov	r1, r9
 	add	r2, sp, #20
@@ -11374,12 +11810,12 @@ FlashProgSlc2KPages:
 	str	r3, [sp, #0]
 	add	r3, sp, #24
 	bl	LogAddr2PhyAddr
-	ldr	r2, [r5, #216]
+	ldr	r2, [r5, #220]
 	mov	r3, #0
 	mov	lr, r4
 	add	ip, sp, #28
 	str	r3, [r2, #0]
-	ldr	r2, [r5, #220]
+	ldr	r2, [r5, #224]
 	str	r3, [r2, #0]
 	ldmia	lr!, {r0, r1, r2, r3}
 	stmia	ip!, {r0, r1, r2, r3}
@@ -11390,66 +11826,66 @@ FlashProgSlc2KPages:
 	mov	r1, #1
 	mov	r2, r9
 	str	r3, [ip, #0]
-	ldr	r3, [r5, #216]
-	str	r3, [sp, #36]
 	ldr	r3, [r5, #220]
+	str	r3, [sp, #36]
+	ldr	r3, [r5, #224]
 	str	r3, [sp, #40]
 	bl	FlashReadPages
 	ldr	r7, [sp, #28]
 	cmn	r7, #1
-	bne	.L1336
-	ldr	r0, .L1342+16
+	bne	.L1374
+	ldr	r0, .L1380+16
 	ldr	r1, [r4, #4]
 	bl	printk
 	str	r7, [r4, #0]
-.L1336:
+.L1374:
 	ldr	r3, [r4, #12]
 	cmp	r3, #0
-	beq	.L1337
+	beq	.L1375
 	ldr	r2, [r3, #0]
-	ldr	r3, [r5, #220]
+	ldr	r3, [r5, #224]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1337
-	ldr	r0, .L1342+20
+	beq	.L1375
+	ldr	r0, .L1380+20
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4, #0]
-.L1337:
+.L1375:
 	ldr	r3, [r4, #8]
 	cmp	r3, #0
-	beq	.L1335
+	beq	.L1373
 	ldr	r2, [r3, #0]
-	ldr	r3, [r5, #216]
+	ldr	r3, [r5, #220]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1335
-	ldr	r0, .L1342+24
+	beq	.L1373
+	ldr	r0, .L1380+24
 	ldr	r1, [r4, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r4, #0]
-.L1335:
+.L1373:
 	add	r6, r6, #1
 	add	r4, r4, #36
-.L1332:
+.L1370:
 	cmp	r6, sl
-	bne	.L1338
-.L1333:
+	bne	.L1376
+.L1371:
 	mov	r0, #0
 	add	sp, sp, #68
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1343:
+.L1381:
 	.align	2
-.L1342:
+.L1380:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC101
-	.word	.LC102
-	.word	.LC103
-	.word	.LC104
+	.word	.LC108
+	.word	.LC109
+	.word	.LC110
+	.word	.LC111
 	.fnend
 	.size	FlashProgSlc2KPages, .-FlashProgSlc2KPages
 	.align	2
@@ -11463,7 +11899,7 @@ FlashProgPages:
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.pad #76
 	sub	sp, sp, #76
-	ldr	r5, .L1372
+	ldr	r5, .L1410
 	mov	r9, r0
 	str	r1, [sp, #8]
 	mov	sl, r2
@@ -11474,13 +11910,13 @@ FlashProgPages:
 	cmp	r6, #0
 	moveq	fp, r5
 	str	ip, [sp, #20]
-	ldr	ip, .L1372+4
+	ldr	ip, .L1410+4
 	ldrb	ip, [ip, #2901]	@ zero_extendqisi2
 	str	ip, [sp, #12]
-	beq	.L1345
+	beq	.L1383
 	bl	FlashProgSlc2KPages
-	b	.L1346
-.L1359:
+	b	.L1384
+.L1397:
 	mov	r4, #36
 	ldr	r2, [sp, #8]
 	mul	r4, r4, r6
@@ -11499,22 +11935,22 @@ FlashProgPages:
 	mvncs	r3, #0
 	strcs	r3, [r9, r4]
 	mov	r8, r0
-	bcs	.L1348
-	ldrb	r1, [r5, #3833]	@ zero_extendqisi2
+	bcs	.L1386
+	ldrb	r1, [r5, #3837]	@ zero_extendqisi2
 	add	r2, fp, r2, asl #4
 	cmp	r1, #0
 	ldr	r2, [r2, #3636]
 	moveq	r8, #0
 	cmp	r2, #0
-	beq	.L1350
+	beq	.L1388
 	cmp	r3, #1
-	bne	.L1351
+	bne	.L1389
 	ldr	r0, [r5, #3012]
 	bl	NandcIqrWaitFlashReady
-.L1351:
+.L1389:
 	ldrb	r0, [sp, #32]	@ zero_extendqisi2
 	bl	FlashWaitCmdDone
-.L1350:
+.L1388:
 	ldr	r2, [sp, #32]
 	mov	r1, #0
 	cmp	r8, #0
@@ -11534,10 +11970,10 @@ FlashProgPages:
 	cmp	r3, #1
 	strb	r4, [r2, #3628]
 	mov	r0, r4
-	bne	.L1353
+	bne	.L1391
 	bl	NandcWaitFlashReady
-	b	.L1354
-.L1353:
+	b	.L1392
+.L1391:
 	bl	NandcFlashCs
 	ldr	r3, [sp, #32]
 	mov	r0, r4
@@ -11549,34 +11985,34 @@ FlashProgPages:
 	bl	FlashWaitReadyEN
 	mov	r0, r4
 	bl	NandcFlashDeCs
-.L1354:
+.L1392:
 	ldr	r2, [sp, #20]
 	sub	r3, r2, #1
 	cmp	r3, #6
-	bhi	.L1355
+	bhi	.L1393
 	add	r3, r5, r4
 	ldrb	r3, [r3, #3756]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1355
+	beq	.L1393
 	mov	r0, r4
 	ldrb	r1, [r5, #1]	@ zero_extendqisi2
-	ldr	r2, .L1372+8
+	ldr	r2, .L1410+8
 	mov	r3, #0
 	bl	HynixSetRRPara
-.L1355:
+.L1393:
 	mov	r0, r4
 	bl	NandcFlashCs
 	cmp	sl, #1
 	mov	r0, r4
-	bne	.L1356
+	bne	.L1394
 	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1356
+	beq	.L1394
 	bl	flash_enter_slc_mode
-	b	.L1357
-.L1356:
+	b	.L1395
+.L1394:
 	bl	flash_exit_slc_mode
-.L1357:
+.L1395:
 	mov	r0, r4
 	ldr	r1, [sp, #28]
 	bl	FlashProgFirstCmd
@@ -11588,7 +12024,7 @@ FlashProgPages:
 	ldr	r3, [r7, #8]
 	bl	NandcXferData
 	cmp	r8, #0
-	beq	.L1358
+	beq	.L1396
 	mov	r0, r4
 	ldr	r1, [sp, #28]
 	bl	FlashProgDpFirstCmd
@@ -11615,58 +12051,58 @@ FlashProgPages:
 	ldr	r2, [sp, #12]
 	ldr	r3, [r3, #8]
 	bl	NandcXferData
-.L1358:
+.L1396:
 	mov	r0, r4
 	ldr	r1, [sp, #28]
 	bl	FlashProgSecondCmd
 	mov	r0, r4
 	bl	NandcFlashDeCs
 	add	r6, r6, r8
-.L1348:
+.L1386:
 	add	r6, r6, #1
-.L1345:
+.L1383:
 	ldr	r3, [sp, #8]
 	cmp	r6, r3
-	bcc	.L1359
-	ldr	r5, .L1372
+	bcc	.L1397
+	ldr	r5, .L1410
 	mov	r4, #0
-	ldr	r6, .L1372+12
+	ldr	r6, .L1410+12
 	ldr	r0, [r5, #3012]
 	bl	NandcIqrWaitFlashReady
-	b	.L1360
-.L1362:
+	b	.L1398
+.L1400:
 	uxtb	r0, r4
 	bl	FlashWaitCmdDone
 	cmp	sl, #1
-	bne	.L1361
+	bne	.L1399
 	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1361
+	beq	.L1399
 	ldrb	r0, [r6, r4, asl #4]	@ zero_extendqisi2
 	bl	flash_exit_slc_mode
-.L1361:
+.L1399:
 	add	r4, r4, #1
-.L1360:
+.L1398:
 	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
 	cmp	r4, r3
-	bcc	.L1362
+	bcc	.L1400
 	ldr	r2, [sp, #16]
 	cmp	r2, #0
 	ldreq	r0, [sp, #16]
-	beq	.L1346
+	beq	.L1384
 	mov	r5, #0
-	ldr	r4, .L1372+16
+	ldr	r4, .L1410+16
 	ldr	r6, [sp, #8]
-	b	.L1363
-.L1368:
+	b	.L1401
+.L1406:
 	ldr	r3, [r9, #0]
 	cmn	r3, #1
-	bne	.L1364
+	bne	.L1402
 	ldr	r1, [r9, #4]
-	ldr	r0, .L1372+20
+	ldr	r0, .L1410+20
 	bl	printk
-	b	.L1365
-.L1364:
+	b	.L1403
+.L1402:
 	rsb	r3, r5, r6
 	mov	r1, sl
 	add	r2, sp, #28
@@ -11675,12 +12111,12 @@ FlashProgPages:
 	str	r3, [sp, #0]
 	add	r3, sp, #32
 	bl	LogAddr2PhyAddr
-	ldr	r2, [r4, #216]
+	ldr	r2, [r4, #220]
 	mov	r3, #0
 	mov	lr, r9
 	add	ip, sp, #36
 	str	r3, [r2, #0]
-	ldr	r2, [r4, #220]
+	ldr	r2, [r4, #224]
 	str	r3, [r2, #0]
 	ldmia	lr!, {r0, r1, r2, r3}
 	stmia	ip!, {r0, r1, r2, r3}
@@ -11691,269 +12127,271 @@ FlashProgPages:
 	mov	r1, #1
 	mov	r2, sl
 	str	r3, [ip, #0]
-	ldr	r3, [r4, #216]
-	str	r3, [sp, #44]
 	ldr	r3, [r4, #220]
+	str	r3, [sp, #44]
+	ldr	r3, [r4, #224]
 	str	r3, [sp, #48]
 	bl	FlashReadPages
 	ldr	r7, [sp, #36]
 	cmn	r7, #1
-	bne	.L1366
-	ldr	r0, .L1372+24
+	bne	.L1404
+	ldr	r0, .L1410+24
 	ldr	r1, [r9, #4]
 	bl	printk
 	str	r7, [r9, #0]
-.L1366:
+.L1404:
 	ldr	r3, [r9, #12]
 	cmp	r3, #0
-	beq	.L1367
+	beq	.L1405
 	ldr	r2, [r3, #0]
-	ldr	r3, [r4, #220]
+	ldr	r3, [r4, #224]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1367
-	ldr	r0, .L1372+28
+	beq	.L1405
+	ldr	r0, .L1410+28
 	ldr	r1, [r9, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r9, #0]
-.L1367:
+.L1405:
 	ldr	r3, [r9, #8]
 	cmp	r3, #0
-	beq	.L1365
+	beq	.L1403
 	ldr	r2, [r3, #0]
-	ldr	r3, [r4, #216]
+	ldr	r3, [r4, #220]
 	ldr	r3, [r3, #0]
 	cmp	r2, r3
-	beq	.L1365
-	ldr	r0, .L1372+32
+	beq	.L1403
+	ldr	r0, .L1410+32
 	ldr	r1, [r9, #4]
 	bl	printk
 	mvn	r3, #0
 	str	r3, [r9, #0]
-.L1365:
+.L1403:
 	add	r5, r5, #1
 	add	r9, r9, #36
-.L1363:
+.L1401:
 	cmp	r5, r6
-	bne	.L1368
+	bne	.L1406
 	mov	r0, #0
-.L1346:
+.L1384:
 	add	sp, sp, #76
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1373:
+.L1411:
 	.align	2
-.L1372:
+.L1410:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LANCHOR0+4
 	.word	.LANCHOR0+3628
 	.word	.LANCHOR2
-	.word	.LC101
-	.word	.LC102
-	.word	.LC103
-	.word	.LC104
+	.word	.LC108
+	.word	.LC109
+	.word	.LC110
+	.word	.LC111
 	.fnend
 	.size	FlashProgPages, .-FlashProgPages
 	.align	2
-	.type	FtlVpcTblFlush.part.13, %function
-FtlVpcTblFlush.part.13:
+	.type	FtlVpcTblFlush.part.14, %function
+FtlVpcTblFlush.part.14:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r1, #255
-	ldr	r4, .L1386
-	movw	r7, #3852
-	ldr	r6, .L1386+4
-	ldr	r3, [r4, #-964]
-	ldr	r5, [r4, #-940]
-	str	r3, [r4, #184]
-	ldr	r3, .L1386+8
-	str	r5, [r4, #188]
+	ldr	r4, .L1424
+	mov	r7, #3856
+	ldr	r6, .L1424+4
+	ldr	r3, [r4, #-960]
+	ldr	r5, [r4, #-936]
+	str	r3, [r4, #188]
+	ldr	r3, .L1424+8
+	str	r5, [r4, #192]
 	ldrh	r3, [r4, r3]
 	strh	r3, [r5, #2]	@ movhi
-	ldr	r3, .L1386+12
+	ldr	r3, .L1424+12
 	strh	r3, [r5, #0]	@ movhi
-	ldr	r3, [r4, #-1768]
+	ldr	r3, [r4, #-1764]
 	str	r3, [r5, #4]
 	mov	r3, #0
 	str	r3, [r5, #8]
 	str	r3, [r5, #12]
-	ldr	r3, .L1386+16
-	str	r3, [r4, #-2076]
-	ldr	r3, .L1386+20
+	ldr	r3, .L1424+16
 	str	r3, [r4, #-2072]
-	ldr	r3, .L1386+24
+	ldr	r3, .L1424+20
+	str	r3, [r4, #-2068]
+	ldr	r3, .L1424+24
 	ldrh	r2, [r4, r3]
-	ldr	r3, .L1386+28
+	ldr	r3, .L1424+28
 	strh	r2, [r4, r3]	@ movhi
-	movw	r3, #3866
+	movw	r3, #3870
 	ldrh	r3, [r6, r3]
-	strb	r3, [r4, #-2066]
-	ldr	r3, .L1386+32
+	strb	r3, [r4, #-2062]
+	ldr	r3, .L1424+32
 	ldrh	r2, [r4, r3]
 	sub	r3, r3, #62
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #64
 	ldrh	r2, [r4, r3]
-	ldrb	r3, [r4, #-1994]	@ zero_extendqisi2
+	ldrb	r3, [r4, #-1990]	@ zero_extendqisi2
 	orr	r2, r3, r2, asl #6
-	ldr	r3, .L1386+36
+	ldr	r3, .L1424+36
 	strh	r2, [r4, r3]	@ movhi
-	ldrb	r3, [r4, #-1992]	@ zero_extendqisi2
-	strb	r3, [r4, #-2065]
-	ldr	r3, .L1386+40
+	ldrb	r3, [r4, #-1988]	@ zero_extendqisi2
+	strb	r3, [r4, #-2061]
+	ldr	r3, .L1424+40
 	ldrh	r2, [r4, r3]
 	sub	r3, r3, #106
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #108
 	ldrh	r2, [r4, r3]
-	ldrb	r3, [r4, #-1946]	@ zero_extendqisi2
+	ldrb	r3, [r4, #-1942]	@ zero_extendqisi2
 	orr	r2, r3, r2, asl #6
-	ldr	r3, .L1386+44
+	ldr	r3, .L1424+44
 	strh	r2, [r4, r3]	@ movhi
-	ldrb	r3, [r4, #-1944]	@ zero_extendqisi2
-	strb	r3, [r4, #-2064]
-	ldr	r3, .L1386+48
+	ldrb	r3, [r4, #-1940]	@ zero_extendqisi2
+	strb	r3, [r4, #-2060]
+	ldr	r3, .L1424+48
 	ldrh	r2, [r4, r3]
 	sub	r3, r3, #150
 	strh	r2, [r4, r3]	@ movhi
 	add	r3, r3, #152
-	ldr	r0, [r4, #184]
+	ldr	r0, [r4, #188]
 	ldrh	r2, [r4, r3]
-	ldrb	r3, [r4, #-1898]	@ zero_extendqisi2
+	ldrb	r3, [r4, #-1894]	@ zero_extendqisi2
 	orr	r2, r3, r2, asl #6
-	ldr	r3, .L1386+52
+	ldr	r3, .L1424+52
 	strh	r2, [r4, r3]	@ movhi
-	ldrb	r3, [r4, #-1896]	@ zero_extendqisi2
-	strb	r3, [r4, #-2063]
+	ldrb	r3, [r4, #-1892]	@ zero_extendqisi2
+	strb	r3, [r4, #-2059]
+	ldr	r3, [r4, #-1796]
+	str	r3, [r4, #-2040]
+	ldr	r3, [r4, #-1804]
+	str	r3, [r4, #-2032]
 	ldr	r3, [r4, #-1800]
-	str	r3, [r4, #-2044]
-	ldr	r3, [r4, #-1808]
 	str	r3, [r4, #-2036]
-	ldr	r3, [r4, #-1804]
-	str	r3, [r4, #-2040]
-	movw	r3, #3922
+	movw	r3, #3926
 	ldrh	r2, [r6, r3]
 	bl	ftl_memset
-	ldr	r1, .L1386+56
+	ldr	r1, .L1424+56
 	mov	r2, #48
-	ldr	r0, [r4, #184]
+	ldr	r0, [r4, #188]
 	bl	memcpy
 	ldrh	r2, [r6, r7]
-	ldr	r0, [r4, #184]
-	ldr	r1, [r4, #-2020]
+	ldr	r0, [r4, #188]
+	ldr	r1, [r4, #-2016]
 	mov	r2, r2, asl #1
 	add	r0, r0, #48
 	bl	memcpy
 	ldrh	r2, [r6, r7]
-	ldr	r3, [r4, #184]
+	ldr	r3, [r4, #188]
 	add	r0, r2, #24
-	ldr	r1, [r4, #-1844]
+	ldr	r1, [r4, #-1840]
 	mov	r2, r2, lsr #3
 	mov	r0, r0, lsr #1
 	add	r2, r2, #4
 	add	r0, r3, r0, asl #2
 	bl	memcpy
-	movw	r3, #3956
+	movw	r3, #3960
 	ldrh	r3, [r6, r3]
 	cmp	r3, #0
-	beq	.L1375
+	beq	.L1413
 	ldrh	r3, [r6, r7]
-	ldr	r1, [r4, #184]
+	ldr	r1, [r4, #188]
 	mov	r0, r3, lsr #3
 	add	r0, r0, r3, asl #1
-	movw	r3, #3948
+	mov	r3, #3952
 	add	r0, r0, #52
 	ldrh	r2, [r6, r3]
 	ubfx	r0, r0, #2, #14
 	mov	r2, r2, asl #2
 	add	r0, r1, r0, asl #2
-	ldr	r1, [r4, #-1036]
+	ldr	r1, [r4, #-1032]
 	bl	memcpy
-.L1375:
+.L1413:
 	mov	r0, #0
-	ldr	r4, .L1386
+	ldr	r4, .L1424
 	bl	FtlUpdateVaildLpn
-	ldr	r6, .L1386+60
-	mov	r7, #0
+	ldr	r8, .L1424+8
+	mov	r6, #0
 	movw	sl, #65535
-.L1385:
-	ldr	r3, [r4, #-964]
+.L1423:
+	ldr	r3, [r4, #-960]
 	mov	r1, #1
-	ldr	r8, .L1386+8
-	ldr	r0, .L1386+64
-	str	r3, [r4, #184]
-	ldr	r3, [r4, #-940]
+	ldr	r7, .L1424+60
 	ldrh	r2, [r4, r8]
 	str	r3, [r4, #188]
-	ldrh	r3, [r4, r6]
+	ldr	r3, [r4, #-936]
+	ldr	r0, .L1424+64
+	str	r3, [r4, #192]
+	ldrh	r3, [r4, r7]
 	orr	r3, r3, r2, asl #10
 	mov	r2, r1
-	str	r3, [r4, #180]
+	str	r3, [r4, #184]
 	mov	r3, r1
 	bl	FlashProgPages
-	ldr	r1, .L1386+4
-	movw	r3, #3914
-	ldrh	r2, [r4, r6]
+	ldr	r1, .L1424+4
+	movw	r3, #3918
+	ldrh	r2, [r4, r7]
 	ldrh	r3, [r1, r3]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1377
-	ldr	r3, .L1386+68
+	blt	.L1415
+	ldr	r3, .L1424+68
 	ldrh	r2, [r4, r8]
 	ldrh	sl, [r4, r3]
 	strh	r2, [r4, r3]	@ movhi
 	mov	r3, #0
-	strh	r3, [r4, r6]	@ movhi
+	strh	r3, [r4, r7]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, [r4, #-1808]
+	ldr	r3, [r4, #-1804]
 	mov	r1, #1
 	add	r2, r3, #1
-	str	r2, [r4, #-1808]
-	str	r3, [r4, #-1768]
+	str	r2, [r4, #-1804]
+	str	r3, [r4, #-1764]
 	mov	r2, r0, asl #10
 	strh	r0, [r4, r8]	@ movhi
-	str	r2, [r4, #180]
+	str	r2, [r4, #184]
 	mov	r2, r1
 	str	r3, [r5, #4]
 	mov	r3, r1
 	strh	r0, [r5, #2]	@ movhi
-	ldr	r0, .L1386+64
+	ldr	r0, .L1424+64
 	bl	FlashProgPages
-.L1377:
-	ldrh	r3, [r4, r6]
-	ldr	r2, [r4, #176]
-	add	r3, r3, #1
-	cmn	r2, #1
+.L1415:
+	ldr	r2, .L1424+60
+	ldr	r1, [r4, #180]
+	ldrh	r3, [r4, r2]
+	cmn	r1, #1
+	add	r3, r3, #1
 	uxth	r3, r3
-	strh	r3, [r4, r6]	@ movhi
-	bne	.L1378
+	strh	r3, [r4, r2]	@ movhi
+	bne	.L1416
 	cmp	r3, #1
-	add	r7, r7, #1
-	ldreq	r2, .L1386+4
-	movweq	r3, #3914
-	uxth	r7, r7
-	ldreqh	r3, [r2, r3]
+	add	r6, r6, #1
+	ldreq	r1, .L1424+4
+	movweq	r3, #3918
+	uxth	r6, r6
+	ldreqh	r3, [r1, r3]
 	subeq	r3, r3, #1
-	streqh	r3, [r4, r6]	@ movhi
-	cmp	r7, #3
-	bls	.L1385
-	ldr	r4, .L1386
-	mov	r2, r7
-	ldr	r0, .L1386+72
-	ldr	r1, [r4, #180]
+	streqh	r3, [r4, r2]	@ movhi
+	cmp	r6, #3
+	bls	.L1423
+	ldr	r3, .L1424
+	mov	r2, r6
+	ldr	r0, .L1424+72
+	ldr	r1, [r3, #184]
 	bl	printk
-	mov	r3, #1
-	str	r3, [r4, #-2092]
+	ldr	r3, .L1424+4
+	mov	r2, #1
+	str	r2, [r3, #4040]
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L1378:
+.L1416:
 	cmp	r3, #1
-	beq	.L1385
-	cmp	r2, #256
-	beq	.L1385
+	beq	.L1423
+	cmp	r1, #256
+	beq	.L1423
 	movw	r3, #65535
 	cmp	sl, r3
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
@@ -11961,30 +12399,30 @@ FtlVpcTblFlush.part.13:
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L1387:
+.L1425:
 	.align	2
-.L1386:
+.L1424:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	-1776
+	.word	-1772
 	.word	-3932
 	.word	1179929683
 	.word	1342177352
-	.word	-1770
-	.word	-2068
-	.word	-2000
-	.word	-2060
-	.word	-1952
+	.word	-1766
+	.word	-2064
+	.word	-1996
 	.word	-2056
-	.word	-1904
+	.word	-1948
 	.word	-2052
-	.word	.LANCHOR2-2076
-	.word	-1774
-	.word	.LANCHOR2+176
-	.word	-1772
-	.word	.LC105
+	.word	-1900
+	.word	-2048
+	.word	.LANCHOR2-2072
+	.word	-1770
+	.word	.LANCHOR2+180
+	.word	-1768
+	.word	.LC112
 	.fnend
-	.size	FtlVpcTblFlush.part.13, .-FtlVpcTblFlush.part.13
+	.size	FtlVpcTblFlush.part.14, .-FtlVpcTblFlush.part.14
 	.align	2
 	.global	FtlVpcTblFlush
 	.type	FtlVpcTblFlush, %function
@@ -11994,18 +12432,18 @@ FtlVpcTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1390
-	ldr	r3, [r3, #-2092]
+	ldr	r3, .L1428
+	ldr	r3, [r3, #4040]
 	cmp	r3, #0
-	bne	.L1389
-	bl	FtlVpcTblFlush.part.13
-.L1389:
+	bne	.L1427
+	bl	FtlVpcTblFlush.part.14
+.L1427:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1391:
+.L1429:
 	.align	2
-.L1390:
-	.word	.LANCHOR2
+.L1428:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.section	.text.unlikely,"ax",%progbits
@@ -12018,154 +12456,155 @@ FtlBbmTblFlush.part.16:
 	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r1, #0
-	ldr	r7, .L1405
-	mov	r6, #0
-	ldr	sl, .L1405+4
-	movw	r9, #3866
-	ldr	r3, [r7, #-940]
-	add	r8, sl, #4000
-	ldr	r0, [r7, #-964]
-	str	r3, [r7, #188]
-	movw	r3, #3922
-	str	r0, [r7, #184]
+	ldr	r7, .L1443
+	mov	r5, #0
+	ldr	sl, .L1443+4
+	movw	r9, #3870
+	ldr	r8, .L1443+8
+	ldr	r3, [r7, #-936]
+	ldr	r0, [r7, #-960]
+	str	r3, [r7, #192]
+	movw	r3, #3926
+	str	r0, [r7, #188]
 	ldrh	r2, [sl, r3]
 	bl	ftl_memset
-	b	.L1393
-.L1394:
-	ldr	r3, .L1405+8
+	b	.L1431
+.L1432:
+	ldr	r3, .L1443+12
 	ldr	r1, [r8, #4]!
 	ldrh	r2, [r7, r3]
-	ldr	r3, [r7, #184]
-	mul	r0, r2, r6
+	ldr	r3, [r7, #188]
+	mul	r0, r2, r5
 	mov	r2, r2, asl #2
-	add	r6, r6, #1
+	add	r5, r5, #1
 	add	r0, r3, r0, asl #2
 	bl	memcpy
-.L1393:
+.L1431:
 	ldrh	r3, [sl, r9]
-	ldr	r4, .L1405+4
-	cmp	r6, r3
-	ldr	r5, .L1405
-	blt	.L1394
-	ldr	r6, [r5, #188]
+	ldr	r4, .L1443+4
+	cmp	r5, r3
+	ldr	r6, .L1443
+	blt	.L1432
+	ldr	r5, [r6, #192]
 	mov	r1, #255
 	mov	r2, #16
 	mov	r7, #0
 	mov	fp, r7
-	mov	r0, r6
+	mov	r0, r5
 	bl	ftl_memset
-	ldr	r3, .L1405+12
-	strh	r3, [r6, #0]	@ movhi
-	ldr	r3, [r4, #3984]
-	str	r3, [r6, #4]
-	movw	r3, #3976
-	ldrh	r3, [r4, r3]
-	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, .L1443+16
+	strh	r3, [r5, #0]	@ movhi
+	ldr	r3, [r4, #3988]
+	str	r3, [r5, #4]
 	movw	r3, #3980
 	ldrh	r3, [r4, r3]
-	strh	r3, [r6, #8]	@ movhi
-	movw	r3, #3982
+	strh	r3, [r5, #2]	@ movhi
+	mov	r3, #3984
 	ldrh	r3, [r4, r3]
-	strh	r3, [r6, #10]	@ movhi
-	ldr	r3, [r4, #3840]
-	strh	r3, [r6, #12]	@ movhi
-	b	.L1403
-.L1400:
+	strh	r3, [r5, #8]	@ movhi
+	movw	r3, #3986
+	ldrh	r3, [r4, r3]
+	strh	r3, [r5, #10]	@ movhi
+	ldr	r3, [r4, #3844]
+	strh	r3, [r5, #12]	@ movhi
+	b	.L1441
+.L1438:
 	mov	fp, #1
-.L1403:
-	ldr	r3, [r5, #-964]
-	movw	r8, #3976
-	ldr	r4, .L1405+4
+.L1441:
+	ldr	r3, [r6, #-960]
+	movw	r8, #3980
+	ldr	r4, .L1443+4
 	mov	r1, #0
-	movw	sl, #3978
-	str	r1, [r5, #176]
-	str	r3, [r5, #184]
-	movw	r9, #3980
-	ldr	r3, [r5, #-940]
+	movw	sl, #3982
+	str	r1, [r6, #180]
+	str	r3, [r6, #188]
+	mov	r9, #3984
+	ldr	r3, [r6, #-936]
 	ldrh	r1, [r4, r8]
 	ldrh	r2, [r4, sl]
-	str	r3, [r5, #188]
-	ldrh	r0, [r6, #10]
+	str	r3, [r6, #192]
+	ldrh	r0, [r5, #10]
 	orr	r3, r2, r1, asl #10
-	str	r3, [r5, #180]
+	str	r3, [r6, #184]
 	ldrh	r3, [r4, r9]
 	str	r0, [sp, #0]
-	ldr	r0, .L1405+16
+	ldr	r0, .L1443+20
 	bl	printk
 	mov	r1, #1
 	mov	r2, r1
 	mov	r3, r1
-	ldr	r0, .L1405+20
+	ldr	r0, .L1443+24
 	bl	FlashProgPages
-	movw	r3, #3914
+	movw	r3, #3918
 	ldrh	r3, [r4, r3]
 	ldrh	r2, [r4, sl]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	blt	.L1396
-	ldr	r3, [r4, #3984]
+	blt	.L1434
+	ldr	r3, [r4, #3988]
 	mov	r1, #0	@ movhi
 	ldrh	r2, [r4, r8]
 	add	r3, r3, #1
-	ldr	r0, [r5, #-2088]
-	str	r3, [r4, #3984]
-	str	r3, [r6, #4]
+	ldr	r0, [r4, #4044]
+	str	r3, [r4, #3988]
+	str	r3, [r5, #4]
 	ldrh	r3, [r4, r9]
 	strh	r1, [r4, sl]	@ movhi
 	mov	r1, #1
-	strh	r2, [r6, #8]	@ movhi
+	strh	r2, [r5, #8]	@ movhi
 	strh	r2, [r4, r9]	@ movhi
 	mov	r2, r1
 	strh	r3, [r4, r8]	@ movhi
 	mov	r3, r3, asl #10
-	str	r3, [r5, #180]
+	str	r3, [r6, #184]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
 	mov	r1, #1
-	ldr	r0, .L1405+20
+	ldr	r0, .L1443+24
 	mov	r2, r1
 	mov	r3, r1
 	bl	FlashProgPages
-.L1396:
-	ldr	r2, .L1405+4
-	movw	r3, #3978
-	ldr	r4, .L1405
-	ldrh	r1, [r2, r3]
-	add	r1, r1, #1
-	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r5, #176]
+.L1434:
+	ldr	r4, .L1443+4
+	movw	r3, #3982
+	ldrh	r2, [r4, r3]
+	add	r2, r2, #1
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r3, [r6, #180]
 	cmn	r3, #1
-	bne	.L1397
+	bne	.L1435
 	add	r7, r7, #1
-	ldr	r0, .L1405+24
-	ldr	r1, [r5, #180]
+	ldr	r0, .L1443+28
+	ldr	r1, [r6, #184]
 	uxth	r7, r7
 	bl	printk
 	cmp	r7, #3
-	bls	.L1403
-	ldr	r0, .L1405+28
+	bls	.L1441
+	ldr	r3, .L1443
 	mov	r2, r7
-	ldr	r1, [r4, #180]
+	ldr	r0, .L1443+32
+	ldr	r1, [r3, #184]
 	bl	printk
 	mov	r3, #1
-	str	r3, [r4, #-2092]
-	b	.L1404
-.L1397:
+	str	r3, [r4, #4040]
+	b	.L1442
+.L1435:
 	cmp	fp, #0
-	beq	.L1400
-.L1404:
+	beq	.L1438
+.L1442:
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1406:
+.L1444:
 	.align	2
-.L1405:
+.L1443:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	-1032
+	.word	.LANCHOR0+4004
+	.word	-1028
 	.word	-3887
-	.word	.LC106
-	.word	.LANCHOR2+176
-	.word	.LC107
-	.word	.LC108
+	.word	.LC113
+	.word	.LANCHOR2+180
+	.word	.LC114
+	.word	.LC115
 	.fnend
 	.size	FtlBbmTblFlush.part.16, .-FtlBbmTblFlush.part.16
 	.text
@@ -12178,18 +12617,18 @@ FtlBbmTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1409
-	ldr	r3, [r3, #-2092]
+	ldr	r3, .L1447
+	ldr	r3, [r3, #4040]
 	cmp	r3, #0
-	bne	.L1408
+	bne	.L1446
 	bl	FtlBbmTblFlush.part.16
-.L1408:
+.L1446:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1410:
+.L1448:
 	.align	2
-.L1409:
-	.word	.LANCHOR2
+.L1447:
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	2
@@ -12202,79 +12641,77 @@ FtlGcFreeBadSuperBlk:
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r9, r0
-	ldr	r4, .L1421
-	ldr	r3, .L1421+4
+	ldr	r4, .L1459
+	ldr	r3, .L1459+4
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
 	movne	r6, #0
 	movne	sl, r4
-	bne	.L1412
-	b	.L1413
-.L1419:
+	bne	.L1450
+	b	.L1451
+.L1457:
 	add	r3, r3, r6
 	mov	r1, r9
 	mov	r5, #0
-	ldr	r7, .L1421+4
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	ldr	r7, .L1459+4
+	ldrb	r0, [r3, #3874]	@ zero_extendqisi2
 	bl	V2P_block
 	mov	r8, r0
-	b	.L1414
-.L1418:
+	b	.L1452
+.L1456:
 	add	r3, r4, r5, asl #1
 	sub	r3, r3, #1136
-	sub	r3, r3, #4
 	ldrh	r3, [r3, #0]
 	cmp	r3, r8
-	bne	.L1415
+	bne	.L1453
 	mov	r1, r8
-	ldr	r0, .L1421+8
+	ldr	r0, .L1459+8
 	bl	printk
 	mov	r0, r8
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldrh	r1, [r4, r7]
+	ldrh	r2, [r4, r7]
 	mov	r3, r5
-	b	.L1416
-.L1417:
-	add	r0, r3, #1
+	b	.L1454
+.L1455:
+	add	r1, r3, #1
 	add	r3, r4, r3, asl #1
 	sub	r3, r3, #1136
-	add	r2, r4, r0, asl #1
-	sub	r2, r2, #1136
-	sub	r2, r2, #4
-	ldrh	r2, [r2, #0]
-	strh	r2, [r3, #-4]	@ movhi
-	uxth	r3, r0
-.L1416:
-	cmp	r3, r1
-	bcc	.L1417
-	sub	r1, r1, #1
-	strh	r1, [sl, r7]	@ movhi
-.L1415:
+	add	r0, r4, r1, asl #1
+	sub	r0, r0, #1136
+	ldrh	r0, [r0, #0]
+	strh	r0, [r3, #0]	@ movhi
+	uxth	r3, r1
+.L1454:
+	cmp	r3, r2
+	bcc	.L1455
+	sub	r2, r2, #1
+	strh	r2, [sl, r7]	@ movhi
+.L1453:
 	add	r5, r5, #1
 	uxth	r5, r5
-.L1414:
+.L1452:
 	ldrh	r3, [r4, r7]
 	cmp	r3, r5
-	bhi	.L1418
+	bhi	.L1456
 	add	r6, r6, #1
 	uxth	r6, r6
-.L1412:
-	ldr	r3, .L1421+12
-	movw	r2, #3844
+.L1450:
+	ldr	r3, .L1459+12
+	movw	r2, #3848
 	ldrh	r2, [r3, r2]
 	cmp	r2, r6
-	bhi	.L1419
+	bhi	.L1457
 	bl	FtlGcReFreshBadBlk
-.L1413:
+.L1451:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L1422:
+.L1460:
 	.align	2
-.L1421:
+.L1459:
 	.word	.LANCHOR2
-	.word	-1142
-	.word	.LC109
+	.word	-1138
+	.word	.LC116
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
@@ -12288,36 +12725,36 @@ update_vpc_list:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r2, r0, asl #1
-	ldr	r3, .L1431
+	ldr	r3, .L1469
 	mov	r4, r0
-	ldr	r1, [r3, #-2020]
+	ldr	r1, [r3, #-2016]
 	ldrh	r2, [r1, r2]
 	cmp	r2, #0
-	bne	.L1424
-	ldr	r1, .L1431+4
+	bne	.L1462
+	ldr	r1, .L1469+4
 	ldrh	r0, [r3, r1]
 	cmp	r0, r4
 	mvneq	r2, #0
 	streqh	r2, [r3, r1]	@ movhi
-	beq	.L1426
-	ldr	r1, .L1431+8
+	beq	.L1464
+	ldr	r1, .L1469+8
 	ldrh	r1, [r3, r1]
 	cmp	r1, r4
-	beq	.L1427
-	ldr	r1, .L1431+12
+	beq	.L1465
+	ldr	r1, .L1469+12
 	ldrh	r1, [r3, r1]
 	cmp	r1, r4
-	beq	.L1427
-	ldr	r1, .L1431+16
+	beq	.L1465
+	ldr	r1, .L1469+16
 	ldrh	r3, [r3, r1]
 	cmp	r3, r4
-	beq	.L1427
-.L1426:
+	beq	.L1465
+.L1464:
 	mov	r1, r4
-	ldr	r0, .L1431+20
+	ldr	r0, .L1469+20
 	bl	List_remove_node
-	ldr	r5, .L1431
-	ldr	r3, .L1431+24
+	ldr	r5, .L1469
+	ldr	r3, .L1469+24
 	mov	r0, r4
 	ldrh	r2, [r5, r3]
 	sub	r2, r2, #1
@@ -12326,23 +12763,23 @@ update_vpc_list:
 	mov	r0, r4
 	bl	FtlGcFreeBadSuperBlk
 	mov	r2, #1
-	b	.L1427
-.L1424:
+	b	.L1465
+.L1462:
 	bl	List_update_data_list
 	mov	r2, #0
-.L1427:
+.L1465:
 	mov	r0, r2
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1432:
+.L1470:
 	.align	2
-.L1431:
+.L1469:
 	.word	.LANCHOR2
-	.word	-1764
-	.word	-2000
-	.word	-1952
-	.word	-1904
-	.word	.LANCHOR2-2024
-	.word	-2012
+	.word	-1760
+	.word	-1996
+	.word	-1948
+	.word	-1900
+	.word	.LANCHOR2-2020
+	.word	-2008
 	.fnend
 	.size	update_vpc_list, .-update_vpc_list
 	.align	2
@@ -12357,46 +12794,46 @@ decrement_vpc_count:
 	movw	r3, #65535
 	cmp	r0, r3
 	mov	r5, r0
-	beq	.L1434
-	ldr	r2, .L1439
+	beq	.L1472
+	ldr	r2, .L1477
 	mov	r3, r0, asl #1
-	ldr	r2, [r2, #-2020]
+	ldr	r2, [r2, #-2016]
 	ldrh	r4, [r2, r3]
 	cmp	r4, #0
 	subne	r4, r4, #1
 	strneh	r4, [r2, r3]	@ movhi
-	bne	.L1434
-	ldr	r0, .L1439+4
+	bne	.L1472
+	ldr	r0, .L1477+4
 	mov	r1, r5
 	mov	r2, r4
 	bl	printk
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1434:
-	ldr	r7, .L1439
+.L1472:
+	ldr	r7, .L1477
 	movw	r3, #65535
-	ldr	r6, .L1439+8
+	ldr	r6, .L1477+8
 	ldrh	r0, [r7, r6]
 	cmp	r0, r3
 	streqh	r5, [r7, r6]	@ movhi
 	moveq	r0, #0
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
 	cmp	r0, r5
-	beq	.L1438
+	beq	.L1476
 	bl	update_vpc_list
 	strh	r5, [r7, r6]	@ movhi
 	adds	r0, r0, #0
 	movne	r0, #1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1438:
+.L1476:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1440:
+.L1478:
 	.align	2
-.L1439:
+.L1477:
 	.word	.LANCHOR2
-	.word	.LC110
-	.word	-1024
+	.word	.LC117
+	.word	-1020
 	.fnend
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	2
@@ -12413,14 +12850,14 @@ get_new_active_ppa:
 	mov	r4, r0
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	movw	r6, #65535
-	ldr	r5, .L1453
-	ldr	r7, .L1453+4
+	ldr	r5, .L1491
+	ldr	r7, .L1491+4
 	add	r3, r0, r3, asl #1
 	ldrh	r3, [r3, #16]
-	b	.L1442
-.L1443:
+	b	.L1480
+.L1481:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	movw	r2, #3844
+	movw	r2, #3848
 	ldrh	r2, [r5, r2]
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -12434,28 +12871,28 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, asl #1
 	ldrh	r3, [r3, #16]
-.L1442:
+.L1480:
 	cmp	r3, r6
-	beq	.L1443
+	beq	.L1481
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	cmp	r2, #1
-	bne	.L1445
+	bne	.L1483
 	ldrb	r2, [r5, #928]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1445
+	bne	.L1483
 	ldrh	r2, [r4, #2]
 	add	r2, r7, r2, asl #1
-	sub	r2, r2, #896
+	sub	r2, r2, #892
 	ldrh	r2, [r2, #0]
 	cmp	r2, r6
-	bne	.L1445
+	bne	.L1483
 	ldrh	r3, [r4, #4]
 	ldrh	r0, [r4, #0]
 	sub	r3, r3, #1
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L1443
-.L1445:
+	b	.L1481
+.L1483:
 	ldrh	r6, [r4, #2]
 	movw	r5, #65535
 	mov	r7, r5
@@ -12463,12 +12900,12 @@ get_new_active_ppa:
 	ldrh	r3, [r4, #4]
 	sub	r3, r3, #1
 	strh	r3, [r4, #4]	@ movhi
-.L1450:
-	ldr	r2, .L1453
-	movw	r3, #3844
+.L1488:
+	ldr	r2, .L1491
+	movw	r3, #3848
 	ldrh	r2, [r2, r3]
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-.L1447:
+.L1485:
 	add	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, r2
@@ -12479,39 +12916,39 @@ get_new_active_ppa:
 	add	r1, r4, r3, asl #1
 	ldrh	r1, [r1, #16]
 	cmp	r1, r5
-	beq	.L1447
+	beq	.L1485
 	strb	r3, [r4, #6]
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L1448
-	ldr	r3, .L1453
+	bne	.L1486
+	ldr	r3, .L1491
 	ldrb	r2, [r3, #928]	@ zero_extendqisi2
 	cmp	r2, #0
 	ldrh	r2, [r4, #2]
-	bne	.L1451
-	ldr	r3, .L1453+4
+	bne	.L1489
+	ldr	r3, .L1491+4
 	add	r2, r3, r2, asl #1
-	sub	r2, r2, #896
+	sub	r2, r2, #892
 	ldrh	r3, [r2, #0]
 	cmp	r3, r7
-	bne	.L1448
+	bne	.L1486
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1448
+	beq	.L1486
 	sub	r3, r3, #1
 	ldrh	r0, [r4, #0]
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L1450
-.L1451:
-	movw	r1, #3914
+	b	.L1488
+.L1489:
+	movw	r1, #3918
 	ldrh	r1, [r3, r1]
 	cmp	r2, r1
-	bcc	.L1448
-	ldr	r1, .L1453+4
+	bcc	.L1486
+	ldr	r1, .L1491+4
 	ldrh	r2, [r4, #0]
 	ldrh	r0, [r4, #4]
-	ldr	r1, [r1, #-2020]
+	ldr	r1, [r1, #-2016]
 	mov	r2, r2, asl #1
 	ldrh	ip, [r1, r2]
 	rsb	r0, r0, ip
@@ -12519,23 +12956,23 @@ get_new_active_ppa:
 	mov	r2, #0
 	strh	r2, [r4, #4]	@ movhi
 	mov	r1, r2	@ movhi
-	movw	r2, #3912
+	movw	r2, #3916
 	ldrh	r3, [r3, r2]
 	strb	r1, [r4, #6]
 	strh	r3, [r4, #2]	@ movhi
-.L1448:
+.L1486:
 	mov	r0, r6
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1454:
+.L1492:
 	.align	2
-.L1453:
+.L1491:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
 	.size	get_new_active_ppa, .-get_new_active_ppa
 	.align	2
-	.type	FtlSlcSuperblockCheck.part.19, %function
-FtlSlcSuperblockCheck.part.19:
+	.type	FtlSlcSuperblockCheck.part.20, %function
+FtlSlcSuperblockCheck.part.20:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -12544,14 +12981,14 @@ FtlSlcSuperblockCheck.part.19:
 	mov	r4, r0
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	movw	r6, #65535
-	ldr	r5, .L1461
-	ldr	r7, .L1461+4
+	ldr	r5, .L1499
+	ldr	r7, .L1499+4
 	add	r3, r0, r3, asl #1
 	ldrh	r3, [r3, #16]
-	b	.L1456
-.L1457:
+	b	.L1494
+.L1495:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	movw	r2, #3844
+	movw	r2, #3848
 	ldrh	r2, [r5, r2]
 	add	r3, r3, #1
 	uxtb	r3, r3
@@ -12565,21 +13002,21 @@ FtlSlcSuperblockCheck.part.19:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	add	r3, r4, r3, asl #1
 	ldrh	r3, [r3, #16]
-.L1456:
+.L1494:
 	cmp	r3, r6
-	beq	.L1457
+	beq	.L1495
 	ldrb	r2, [r4, #8]	@ zero_extendqisi2
 	cmp	r2, #1
-	bne	.L1459
+	bne	.L1497
 	ldrb	r3, [r5, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L1459
+	bne	.L1497
 	ldrh	r3, [r4, #2]
 	add	r3, r7, r3, asl #1
-	sub	r3, r3, #896
+	sub	r3, r3, #892
 	ldrh	r3, [r3, #0]
 	cmp	r3, r6
-	bne	.L1459
+	bne	.L1497
 	ldrh	r3, [r4, #4]
 	ldrh	r0, [r4, #0]
 	sub	r3, r3, #1
@@ -12587,28 +13024,28 @@ FtlSlcSuperblockCheck.part.19:
 	bl	decrement_vpc_count
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	bne	.L1457
+	bne	.L1495
 	ldrh	r2, [r4, #2]
 	strb	r3, [r4, #6]
 	add	r2, r2, #1
 	strh	r2, [r4, #2]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1459:
-	ldr	r3, .L1461
+.L1497:
+	ldr	r3, .L1499
 	ldrb	r1, [r3, #928]	@ zero_extendqisi2
 	cmp	r1, #0
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
 	cmp	r2, #1
 	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
-	movw	r2, #3914
+	movw	r2, #3918
 	ldrh	r1, [r4, #2]
 	ldrh	r2, [r3, r2]
 	cmp	r1, r2
 	ldmccfd	sp!, {r3, r4, r5, r6, r7, pc}
-	ldr	r1, .L1461+4
+	ldr	r1, .L1499+4
 	ldrh	r2, [r4, #0]
 	ldrh	r0, [r4, #4]
-	ldr	r1, [r1, #-2020]
+	ldr	r1, [r1, #-2016]
 	mov	r2, r2, asl #1
 	ldrh	ip, [r1, r2]
 	rsb	r0, r0, ip
@@ -12616,18 +13053,18 @@ FtlSlcSuperblockCheck.part.19:
 	mov	r2, #0
 	strh	r2, [r4, #4]	@ movhi
 	mov	r1, r2	@ movhi
-	movw	r2, #3912
+	movw	r2, #3916
 	ldrh	r3, [r3, r2]
 	strb	r1, [r4, #6]
 	strh	r3, [r4, #2]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1462:
+.L1500:
 	.align	2
-.L1461:
+.L1499:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
-	.size	FtlSlcSuperblockCheck.part.19, .-FtlSlcSuperblockCheck.part.19
+	.size	FtlSlcSuperblockCheck.part.20, .-FtlSlcSuperblockCheck.part.20
 	.align	2
 	.global	FtlSlcSuperblockCheck
 	.type	FtlSlcSuperblockCheck, %function
@@ -12643,311 +13080,316 @@ FtlSlcSuperblockCheck:
 	movw	r3, #65535
 	cmp	r2, r3
 	bxeq	lr
-	b	FtlSlcSuperblockCheck.part.19
+	b	FtlSlcSuperblockCheck.part.20
 	.fnend
 	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
 	.align	2
-	.type	allocate_data_superblock.part.20, %function
-allocate_data_superblock.part.20:
+	.type	allocate_data_superblock.part.21, %function
+allocate_data_superblock.part.21:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.pad #20
-	sub	sp, sp, #20
-	ldr	r4, .L1501
-	mov	r5, r0
-	ldr	r8, .L1501+4
-.L1497:
-	ldr	r3, .L1501+8
-	cmp	r5, r3
-	bne	.L1467
-	ldrh	r2, [r4, r8]
-	ldr	r3, [r4, #-1188]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r5, .L1538
+	mov	r4, r0
+	mov	r8, r5
+.L1535:
+	ldr	r3, .L1538+4
+	cmp	r4, r3
+	bne	.L1505
+	ldr	r3, .L1538+8
+	ldrh	r2, [r5, r3]
+	ldr	r3, [r5, #-1184]
 	mov	r1, r2, lsr #1
 	mul	ip, r3, r2
 	add	r0, r1, #1
 	add	r0, r0, ip, lsr #2
-	ldr	ip, .L1501+12
+	ldr	ip, .L1538+12
 	uxth	r0, r0
-	ldr	ip, [ip, #3836]
+	ldr	ip, [ip, #3840]
 	cmp	ip, #0
-	beq	.L1491
-	ldr	ip, [r4, #-1784]
+	beq	.L1529
+	ldr	ip, [r5, #-1780]
 	cmp	ip, #29
-	bhi	.L1491
+	bhi	.L1529
 	cmp	ip, #2
-	bls	.L1496
+	bls	.L1534
 	tst	r2, #1
-	beq	.L1468
+	beq	.L1506
 	cmp	r3, #0
 	moveq	r1, r3
-	beq	.L1469
-	b	.L1468
-.L1467:
-	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	beq	.L1507
+	b	.L1506
+.L1505:
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L1496
-	ldr	r3, .L1501+12
-	movw	r2, #3864
+	bne	.L1534
+	ldr	r3, .L1538+12
+	movw	r2, #3868
 	ldrh	r2, [r3, r2]
 	cmp	r2, #1
-	beq	.L1496
+	beq	.L1534
 	ldrb	r2, [r3, #928]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L1496
-	ldr	r3, [r3, #3836]
-	ldrh	r2, [r4, r8]
+	bne	.L1534
+	sub	r2, r2, #2000
+	ldr	r3, [r3, #3840]
+	ldrh	r2, [r5, r2]
 	cmp	r3, #0
 	mov	r1, r2, lsr #3
-	beq	.L1468
-	ldr	r3, [r4, #-1784]
+	beq	.L1506
+	ldr	r3, [r5, #-1780]
 	cmp	r3, #1
 	movls	r1, #7
 	mulls	r1, r1, r2
 	movls	r1, r1, lsr #3
-	b	.L1468
-.L1491:
+	b	.L1506
+.L1529:
 	mov	r1, r0
-.L1468:
+.L1506:
 	cmp	r1, #0
 	subne	r1, r1, #1
 	uxthne	r1, r1
-	b	.L1469
-.L1496:
+	b	.L1507
+.L1534:
 	mov	r1, #0
-.L1469:
-	ldrb	r2, [r5, #8]	@ zero_extendqisi2
-	ldr	r0, .L1501+16
+.L1507:
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	ldr	r0, .L1538+16
 	bl	List_pop_index_node
-	ldrh	r3, [r4, r8]
-	sub	r3, r3, #1
-	strh	r3, [r4, r8]	@ movhi
+	ldr	r3, .L1538+8
+	ldrh	r2, [r5, r3]
+	sub	r2, r2, #1
+	strh	r2, [r5, r3]	@ movhi
 	uxth	r7, r0
-	mov	r0, r5
-	strh	r7, [r5, #0]	@ movhi
+	mov	r0, r4
+	strh	r7, [r4, #0]	@ movhi
 	bl	make_superblock
-	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1470
-	ldr	r2, .L1501+12
-	movw	r3, #3844
-	ldr	ip, [r4, #-2088]
+	beq	.L1508
+	ldr	r3, .L1538+12
+	movw	r2, #3848
 	mov	r6, #0
-	mov	sl, r5
-	mov	r1, r5
-	ldrh	r9, [r2, r3]
+	mov	r9, r4
+	mov	r1, r4
 	mov	r0, r6
-	mov	r3, ip
+	ldr	ip, [r3, #4044]
+	ldrh	sl, [r3, r2]
 	mov	r2, r6
-	stmia	sp, {r5, ip}
-	b	.L1471
-.L1470:
-	ldr	r3, [r4, #-2020]
+	mov	r3, ip
+	stmib	sp, {r4, ip}
+	b	.L1509
+.L1508:
+	ldr	r3, [r5, #-2016]
 	mov	r7, r7, asl #1
 	mvn	r2, #0
 	strh	r2, [r3, r7]	@ movhi
-	b	.L1497
-.L1474:
+	b	.L1535
+.L1512:
 	str	r0, [r3, #8]
-	movw	r5, #65535
+	movw	r4, #65535
 	str	r0, [r3, #12]
 	ldrh	lr, [r1, #16]
-	cmp	lr, r5
-	beq	.L1473
-	ldr	r5, [sp, #4]
+	cmp	lr, r4
+	beq	.L1511
+	ldr	r4, [sp, #8]
 	mov	ip, #36
 	mov	lr, lr, asl #10
-	mla	fp, ip, r6, r5
+	mla	fp, ip, r6, r4
 	add	r6, r6, #1
 	uxth	r6, r6
 	str	lr, [fp, #4]
-.L1473:
+.L1511:
 	add	r2, r2, #1
 	add	r3, r3, #36
 	add	r1, r1, #2
 	uxth	r2, r2
-.L1471:
-	cmp	r2, r9
-	bne	.L1474
-	ldr	r3, .L1501+12
-	ldr	r5, [sp, #0]
-	ldr	r3, [r3, #3836]
-	cmp	r3, #0
-	beq	.L1475
-	ldr	r3, .L1501+20
-	cmp	r5, r3
-	bne	.L1475
-	ldr	r2, [r4, #-2084]
+.L1509:
+	cmp	r2, sl
+	bne	.L1512
+	ldr	r3, .L1538+12
+	ldr	r4, [sp, #4]
+	ldr	r2, [r3, #3840]
+	cmp	r2, #0
+	beq	.L1513
+	ldr	r2, .L1538+20
+	cmp	r4, r2
+	bne	.L1513
+	ldr	r2, [r3, #4048]
 	mov	r3, r7, asl #1
 	ldrh	r3, [r2, r3]
 	cmp	r3, #30
 	movhi	r3, #0
-	strhib	r3, [r4, #-1992]
-.L1475:
-	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	ldr	r2, [r4, #-2084]
+	strhib	r3, [r5, #-1988]
+.L1513:
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	ldr	r2, .L1538+12
 	cmp	r3, #0
 	mov	r3, r7, asl #1
-	ldrh	r1, [r2, r3]
-	bne	.L1476
-	cmp	r1, #0
-	ldrne	ip, .L1501+12
-	movwne	r0, #3902
-	moveq	r1, #2
-	ldrneh	r0, [ip, r0]
-	addne	r1, r1, r0
-	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r4, #-1800]
+	bne	.L1514
+	ldr	r1, [r2, #4048]
+	ldrh	r0, [r1, r3]
+	cmp	r0, #0
+	movwne	ip, #3906
+	moveq	r2, #2
+	ldrneh	r2, [r2, ip]
+	streqh	r2, [r1, r3]	@ movhi
+	addne	r0, r0, r2
+	strneh	r0, [r1, r3]	@ movhi
+	ldr	r3, [r5, #-1796]
 	mov	r0, r7
 	mov	r1, #0
 	add	r3, r3, #1
-	str	r3, [r4, #-1800]
-	b	.L1499
-.L1476:
+	str	r3, [r5, #-1796]
+	b	.L1536
+.L1514:
+	ldr	r2, [r2, #4048]
+	mov	r0, r7
+	ldrh	r1, [r2, r3]
 	add	r1, r1, #1
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r4, #-1796]
-	mov	r0, r7
+	ldr	r3, [r5, #-1792]
 	mov	r1, #1
 	add	r3, r3, #1
-	str	r3, [r4, #-1796]
-.L1499:
+	str	r3, [r5, #-1792]
+.L1536:
+	ldr	sl, .L1538+12
 	bl	ftl_set_blk_mode
-	ldr	r3, [r4, #-2084]
-	mov	r9, r7, asl #1
-	ldr	r2, [r4, #-1788]
-	ldr	fp, .L1501
-	ldrh	r3, [r3, r9]
+	mov	fp, r7, asl #1
+	ldr	r2, [r5, #-1784]
+	ldr	r0, [r8, #-1796]
+	ldr	r3, [sl, #4048]
+	ldrh	r3, [r3, fp]
 	cmp	r3, r2
-	movw	r2, #3902
-	strhi	r3, [r4, #-1788]
-	ldr	r3, .L1501+12
-	ldr	r0, [fp, #-1800]
-	ldrh	r1, [r3, r2]
-	ldr	r2, [fp, #-1796]
-	mla	r0, r0, r1, r2
-	movw	r2, #3852
-	ldrh	r1, [r3, r2]
+	strhi	r3, [r5, #-1784]
+	movw	r3, #3906
+	ldrh	r2, [sl, r3]
+	ldr	r3, [r8, #-1792]
+	mla	r0, r0, r2, r3
+	mov	r3, #3856
+	ldrh	r1, [sl, r3]
 	bl	__aeabi_uidiv
-	ldr	r3, [fp, #-924]
+	ldr	r3, [r8, #-920]
 	ldr	r2, [r3, #16]
 	add	r2, r2, #1
 	str	r2, [r3, #16]
-	ldr	r3, [fp, #-2088]
+	ldr	r3, [sl, #4044]
 	mov	r2, #0
-	str	r0, [fp, #-1792]
-	b	.L1481
-.L1482:
+	str	r0, [r8, #-1788]
+	b	.L1519
+.L1520:
 	add	r2, r2, #1
 	ldr	r1, [r3, #-32]
 	uxth	r2, r2
 	bic	r1, r1, #1020
 	bic	r1, r1, #3
 	str	r1, [r3, #-32]
-.L1481:
+.L1519:
 	cmp	r2, r6
 	add	r3, r3, #36
-	bne	.L1482
-	ldr	r3, .L1501+12
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	bne	.L1520
+	ldr	sl, .L1538+12
+	ldrb	r3, [sl, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L1483
-	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	beq	.L1521
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	mov	r2, r6
-	ldr	r0, [r4, #-2088]
+	ldr	r0, [sl, #4044]
 	cmp	r3, #1
 	moveq	r1, #0
 	movne	r1, #1
 	bl	FlashEraseBlocks
-.L1483:
+.L1521:
 	mov	r2, r6
-	ldr	r0, [r4, #-2088]
-	ldrb	r1, [r5, #8]	@ zero_extendqisi2
-	mov	fp, #0
+	ldr	r0, [sl, #4044]
+	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	bl	FlashEraseBlocks
-	mov	r2, #36
-	mul	r2, r2, r6
-	mov	r3, r7
-	mov	ip, r9
-	mov	r6, fp
-	mov	r7, r5
-	mov	r9, r2
-	b	.L1485
-.L1487:
-	ldr	r1, [r4, #-2088]
-	add	r0, r1, fp
-	ldr	r5, [r1, fp]
-	cmn	r5, #1
-	bne	.L1486
+	mov	r1, #36
+	mul	r1, r1, r6
+	mov	r6, #0
+	mov	r3, fp
+	mov	sl, r6
+	mov	fp, r7
+	ldr	r2, .L1538+12
+	mov	r7, r1
+	b	.L1523
+.L1525:
+	ldr	r1, [r2, #4044]
+	add	r0, r1, r6
+	ldr	r1, [r1, r6]
+	cmn	r1, #1
+	bne	.L1524
 	ldr	r0, [r0, #4]
-	add	r6, r6, #1
-	str	r3, [sp, #12]
+	add	sl, sl, #1
+	str	r1, [sp, #20]
 	ubfx	r0, r0, #10, #16
-	str	ip, [sp, #8]
+	str	r2, [sp, #16]
+	str	r3, [sp, #12]
 	bl	FtlBbmMapBadBlock
-	strh	r5, [sl, #16]	@ movhi
-	ldrb	r1, [r7, #7]	@ zero_extendqisi2
+	ldr	r1, [sp, #20]
+	strh	r1, [r9, #16]	@ movhi
+	ldrb	r1, [r4, #7]	@ zero_extendqisi2
 	sub	r1, r1, #1
-	strb	r1, [r7, #7]
-	ldr	ip, [sp, #8]
+	strb	r1, [r4, #7]
 	ldr	r3, [sp, #12]
-.L1486:
-	add	fp, fp, #36
-	add	sl, sl, #2
-.L1485:
-	cmp	fp, r9
-	bne	.L1487
-	cmp	r6, #0
-	mov	r5, r7
-	mov	r9, ip
-	mov	r7, r3
-	beq	.L1488
-	mov	r0, r3
+	ldr	r2, [sp, #16]
+.L1524:
+	add	r6, r6, #36
+	add	r9, r9, #2
+.L1523:
+	cmp	r6, r7
+	bne	.L1525
+	cmp	sl, #0
+	mov	r7, fp
+	mov	fp, r3
+	beq	.L1526
+	mov	r0, r7
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L1488:
-	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+.L1526:
+	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	cmp	r3, #0
-	ldreq	r3, .L1501
+	ldreq	r3, [r5, #-2016]
 	mvneq	r2, #0
-	ldreq	r3, [r3, #-2020]
-	streqh	r2, [r3, r9]	@ movhi
-	beq	.L1497
-.L1489:
-	ldr	r1, .L1501+12
-	movw	r2, #3912
+	streqh	r2, [r3, fp]	@ movhi
+	beq	.L1535
+.L1527:
+	ldr	r1, .L1538+12
+	movw	r2, #3916
 	ldrh	r2, [r1, r2]
-	strh	r7, [r5, #0]	@ movhi
+	strh	r7, [r4, #0]	@ movhi
 	mul	r2, r2, r3
 	mov	r3, #0
-	strh	r3, [r5, #2]	@ movhi
-	strb	r3, [r5, #6]
-	ldr	r3, .L1501
+	strh	r3, [r4, #2]	@ movhi
+	strb	r3, [r4, #6]
+	ldr	r3, .L1538
 	uxth	r2, r2
-	strh	r2, [r5, #4]	@ movhi
-	ldr	r1, [r3, #-1808]
-	str	r1, [r5, #12]
+	strh	r2, [r4, #4]	@ movhi
+	ldr	r1, [r3, #-1804]
+	str	r1, [r4, #12]
 	add	r1, r1, #1
-	str	r1, [r3, #-1808]
-	ldrh	r0, [r5, #0]
-	ldr	r1, [r3, #-2020]
+	str	r1, [r3, #-1804]
+	ldrh	r0, [r4, #0]
+	ldr	r1, [r3, #-2016]
 	mov	r3, r0, asl #1
 	strh	r2, [r1, r3]	@ movhi
-	add	sp, sp, #20
+	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1502:
+.L1539:
 	.align	2
-.L1501:
+.L1538:
 	.word	.LANCHOR2
-	.word	-2004
-	.word	.LANCHOR2-1904
+	.word	.LANCHOR2-1900
+	.word	-2000
 	.word	.LANCHOR0
-	.word	.LANCHOR2-2008
-	.word	.LANCHOR2-2000
+	.word	.LANCHOR2-2004
+	.word	.LANCHOR2-1996
 	.fnend
-	.size	allocate_data_superblock.part.20, .-allocate_data_superblock.part.20
+	.size	allocate_data_superblock.part.21, .-allocate_data_superblock.part.21
 	.align	2
 	.global	allocate_data_superblock
 	.type	allocate_data_superblock, %function
@@ -12957,28 +13399,27 @@ allocate_data_superblock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1505
-	ldr	r3, [r3, #-2092]
+	ldr	r3, .L1542
+	ldr	r3, [r3, #4040]
 	cmp	r3, #0
-	bne	.L1504
-	bl	allocate_data_superblock.part.20
-.L1504:
+	bne	.L1541
+	bl	allocate_data_superblock.part.21
+.L1541:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1506:
+.L1543:
 	.align	2
-.L1505:
-	.word	.LANCHOR2
+.L1542:
+	.word	.LANCHOR0
 	.fnend
 	.size	allocate_data_superblock, .-allocate_data_superblock
 	.align	2
-	.global	FtlSuperblockPowerLostFix
-	.type	FtlSuperblockPowerLostFix, %function
-FtlSuperblockPowerLostFix:
+	.type	FtlSuperblockPowerLostFix.part.19, %function
+FtlSuperblockPowerLostFix.part.19:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1516
+	ldr	r3, .L1553
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r4, r0
@@ -12986,30 +13427,30 @@ FtlSuperblockPowerLostFix:
 	.pad #40
 	sub	sp, sp, #40
 	cmp	r7, #0
-	beq	.L1515
+	beq	.L1552
 	ldrb	r7, [r0, #8]	@ zero_extendqisi2
 	cmp	r7, #1
 	ldreqh	r6, [r0, #4]
-	beq	.L1508
+	beq	.L1545
 	mov	r7, #0
-.L1515:
+.L1552:
 	mov	r6, #12
-.L1508:
+.L1545:
 	mvn	r8, #0
-	ldr	r5, .L1516+4
-	b	.L1509
-.L1512:
+	ldr	r5, .L1553+4
+	b	.L1546
+.L1549:
 	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	beq	.L1510
+	beq	.L1547
 	mov	r0, r4
 	bl	get_new_active_ppa
 	cmn	r0, #1
 	str	r0, [sp, #8]
-	beq	.L1510
-	ldr	r2, [r5, #-940]
+	beq	.L1547
+	ldr	r2, [r5, #-936]
 	add	r0, sp, #4
-	ldr	r3, [r5, #-964]
+	ldr	r3, [r5, #-960]
 	sub	r6, r6, #1
 	str	r8, [sp, #20]
 	str	r2, [sp, #16]
@@ -13020,31 +13461,31 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r2, #2]	@ movhi
 	mov	r3, #0
 	strh	r3, [r2, #0]	@ movhi
-	ldr	r1, [r5, #-1804]
+	ldr	r1, [r5, #-1800]
 	cmn	r1, #2
 	str	r1, [r2, #4]
 	addne	r1, r1, #1
 	moveq	r1, #0
 	mov	r2, r7
-	str	r1, [r5, #-1804]
+	str	r1, [r5, #-1800]
 	mov	r1, #1
 	bl	FlashProgPages
 	ldrh	r0, [r4, #0]
 	bl	decrement_vpc_count
-.L1509:
+.L1546:
 	cmp	r6, #0
-	bne	.L1512
-.L1510:
-	ldr	r2, .L1516+4
+	bne	.L1549
+.L1547:
+	ldr	r2, .L1553+4
 	ldrh	r3, [r4, #0]
 	ldrh	r1, [r4, #4]
-	ldr	r2, [r2, #-2020]
+	ldr	r2, [r2, #-2016]
 	mov	r3, r3, asl #1
 	ldrh	r0, [r2, r3]
 	rsb	r1, r1, r0
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r2, .L1516
-	movw	r3, #3912
+	ldr	r2, .L1553
+	movw	r3, #3916
 	ldrh	r3, [r2, r3]
 	strh	r3, [r4, #2]	@ movhi
 	mov	r3, #0
@@ -13052,12 +13493,31 @@ FtlSuperblockPowerLostFix:
 	strh	r3, [r4, #4]	@ movhi
 	add	sp, sp, #40
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1517:
+.L1554:
 	.align	2
-.L1516:
+.L1553:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
+	.size	FtlSuperblockPowerLostFix.part.19, .-FtlSuperblockPowerLostFix.part.19
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1557
+	ldr	r3, [r3, #4040]
+	cmp	r3, #0
+	bxne	lr
+	b	FtlSuperblockPowerLostFix.part.19
+.L1558:
+	.align	2
+.L1557:
+	.word	.LANCHOR0
+	.fnend
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
 	.global	FtlLowFormatEraseBlock
@@ -13068,295 +13528,290 @@ FtlLowFormatEraseBlock:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	sl, r1
+	ldr	r8, .L1589
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r7, .L1547
-	mov	r8, r1
-	ldr	r9, .L1547+4
-	str	r0, [sp, #12]
-	ldr	r6, [r7, #-2092]
-	ldrb	r0, [r9, #3833]	@ zero_extendqisi2
+	str	r0, [sp, #8]
+	ldr	r6, [r8, #4040]
+	ldrb	r1, [r8, #3837]	@ zero_extendqisi2
 	cmp	r6, #0
-	str	r0, [sp, #16]
+	str	r1, [sp, #16]
 	movne	r4, #0
-	bne	.L1519
-	ldrb	r2, [r9, #928]	@ zero_extendqisi2
+	bne	.L1560
+	ldrb	r2, [r8, #928]	@ zero_extendqisi2
 	mov	r5, r6
-	ldr	r3, [sp, #12]
+	ldr	fp, .L1589+4
 	mov	r4, r6
-	mov	fp, #36
-	str	r2, [sp, #8]
-	str	r3, [r7, #-988]
-	b	.L1520
-.L1524:
-	mul	r3, fp, r6
-	ldr	r2, [r7, #-2088]
-	mov	r0, #0
-	ldr	r1, [sp, #12]
-	str	r0, [r2, r3]
-	add	r3, r9, r6
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	mov	r9, #36
+	str	r2, [sp, #4]
+	str	r0, [fp, #-984]
+	b	.L1561
+.L1565:
+	mul	r3, r9, r6
+	ldr	r2, [r8, #4044]
+	mov	r1, #0
+	str	r1, [r2, r3]
+	add	r3, r8, r6
+	ldr	r1, [sp, #8]
+	ldrb	r0, [r3, #3874]	@ zero_extendqisi2
 	bl	V2P_block
-	cmp	r8, #0
-	mov	sl, r0
-	beq	.L1521
+	cmp	sl, #0
+	mov	r7, r0
+	beq	.L1562
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L1522
-.L1521:
-	mov	r0, sl
+	bne	.L1563
+.L1562:
+	mov	r0, r7
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
 	addne	r4, r4, #1
 	uxthne	r4, r4
-	bne	.L1522
-	movw	r1, #3924
-	ldr	r3, [r7, #-2088]
-	ldrh	r2, [r9, r1]
-	mov	sl, sl, asl #10
-	mla	r3, fp, r5, r3
+	bne	.L1563
+	movw	r1, #3928
+	ldr	r3, [r8, #4044]
+	ldrh	r2, [r8, r1]
+	mov	r7, r7, asl #10
+	mla	r3, r9, r5, r3
 	mul	r2, r2, r5
 	add	r5, r5, #1
 	uxth	r5, r5
 	add	r1, r2, #3
 	cmp	r2, #0
-	str	sl, [r3, #4]
+	str	r7, [r3, #4]
 	movlt	r2, r1
-	ldr	r1, [r7, #-936]
+	ldr	r1, [fp, #-932]
 	bic	r2, r2, #3
 	str	r0, [r3, #8]
 	add	r2, r1, r2
 	str	r2, [r3, #12]
-.L1522:
+.L1563:
 	add	r6, r6, #1
 	uxth	r6, r6
-.L1520:
-	movw	r2, #3844
-	ldr	sl, .L1547+4
-	ldrh	r3, [r9, r2]
+.L1561:
+	movw	r2, #3848
+	ldr	r7, .L1589
+	ldrh	r3, [r8, r2]
 	cmp	r3, r6
-	bhi	.L1524
+	bhi	.L1565
 	cmp	r5, #0
-	beq	.L1519
-	ldr	r3, [sp, #8]
-	mov	r7, #0
-	ldr	r9, .L1547
+	beq	.L1560
+	ldr	r3, [sp, #4]
+	mov	r8, #0
+	ldr	r0, [r7, #4044]
 	mov	r2, r5
 	adds	r6, r3, #0
-	strb	r7, [sl, #3833]
+	strb	r8, [r7, #3837]
+	mov	r9, r8
 	movne	r6, #1
-	ldr	r0, [r9, #-2088]
 	mov	r1, r6
 	bl	FlashEraseBlocks
-	ldr	r0, [sp, #16]
-	strb	r0, [sl, #3833]
-	mov	sl, r7
-.L1527:
-	ldr	r3, [r9, #-2088]
-	add	r2, r3, r7
-	ldr	r3, [r3, r7]
+	ldr	r1, [sp, #16]
+	strb	r1, [r7, #3837]
+.L1568:
+	ldr	r3, [r7, #4044]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
 	cmn	r3, #1
-	bne	.L1526
+	bne	.L1567
 	ldr	r0, [r2, #4]
 	add	r4, r4, #1
 	ubfx	r0, r0, #10, #16
 	uxth	r4, r4
 	bl	FtlBbmMapBadBlock
-.L1526:
-	add	sl, sl, #1
-	add	r7, r7, #36
-	uxth	sl, sl
-	cmp	sl, r5
-	bne	.L1527
-	cmp	r8, #0
-	moveq	r2, #6
-	moveq	sl, #1
-	streq	r2, [sp, #8]
-	beq	.L1528
-	ldr	r3, .L1547+4
-	movw	r2, #3914
-	ldrh	sl, [r3, r2]
+.L1567:
+	add	r9, r9, #1
+	add	r8, r8, #36
+	uxth	r9, r9
+	cmp	r9, r5
+	bne	.L1568
+	cmp	sl, #0
+	beq	.L1582
+	ldr	r3, .L1589
+	movw	r2, #3918
+	ldrh	r2, [r3, r2]
 	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	moveq	r1, sl, lsr #2
-	streq	r1, [sp, #8]
+	str	r2, [sp, #12]
+	moveq	r2, r2, lsr #2
+	streq	r2, [sp, #4]
 	moveq	r6, #1
-	movne	r6, #1
-	strne	r6, [sp, #8]
-.L1528:
-	mov	r7, #0
-.L1536:
+	beq	.L1569
+	b	.L1588
+.L1582:
+	mov	r3, #6
+	mov	r1, #1
+	str	r3, [sp, #4]
+	str	r1, [sp, #12]
+	b	.L1569
+.L1588:
+	mov	r6, #1
+	str	r6, [sp, #4]
+.L1569:
+	ldr	r7, .L1589
+	mov	r8, #0
+.L1577:
 	mov	r9, #0
-	ldr	fp, .L1547
+	ldr	fp, .L1589+4
 	mov	r5, r9
-	b	.L1529
-.L1532:
-	mov	r0, #36
-	ldr	r2, [fp, #-2088]
-	mul	r3, r0, r9
+	b	.L1570
+.L1573:
+	mov	r1, #36
+	ldr	r2, [r7, #4044]
+	mul	r3, r1, r9
 	mov	r1, #0
 	str	r1, [r2, r3]
-	ldr	r2, .L1547+4
-	ldr	r1, [sp, #12]
-	add	r3, r2, r9
-	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	add	r3, r7, r9
+	ldr	r1, [sp, #8]
+	ldrb	r0, [r3, #3874]	@ zero_extendqisi2
 	bl	V2P_block
-	cmp	r8, #0
+	cmp	sl, #0
 	str	r0, [sp, #20]
-	beq	.L1530
+	beq	.L1571
 	bl	IsBlkInVendorPart
 	cmp	r0, #0
-	bne	.L1531
-.L1530:
+	bne	.L1572
+.L1571:
 	ldr	r0, [sp, #20]
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #0
-	bne	.L1531
-	ldr	r3, [fp, #-2088]
-	mov	r0, #36
+	bne	.L1572
+	ldr	r3, [r7, #4044]
+	mov	r2, #36
 	ldr	r1, [sp, #20]
-	mla	r3, r0, r5, r3
-	add	r2, r7, r1, asl #10
-	ldr	r1, .L1547+4
-	add	r0, r0, #3888
+	mla	r3, r2, r5, r3
+	add	r2, r8, r1, asl #10
+	movw	r1, #3928
 	str	r2, [r3, #4]
-	ldr	r2, [fp, #-948]
+	ldr	r2, [fp, #-944]
 	str	r2, [r3, #8]
-	ldrh	r2, [r1, r0]
+	ldrh	r2, [r7, r1]
 	mul	r2, r2, r5
 	add	r5, r5, #1
 	uxth	r5, r5
 	add	r1, r2, #3
 	cmp	r2, #0
 	movlt	r2, r1
-	ldr	r1, [fp, #-944]
+	ldr	r1, [fp, #-940]
 	bic	r2, r2, #3
 	add	r2, r1, r2
 	str	r2, [r3, #12]
-.L1531:
+.L1572:
 	add	r9, r9, #1
 	uxth	r9, r9
-.L1529:
-	ldr	ip, .L1547+4
-	movw	r2, #3844
-	ldrh	r3, [ip, r2]
+.L1570:
+	movw	r2, #3848
+	ldr	ip, .L1589
+	ldrh	r3, [r7, r2]
 	cmp	r3, r9
-	bhi	.L1532
+	bhi	.L1573
 	cmp	r5, #0
-	beq	.L1519
-	ldr	r9, .L1547
+	beq	.L1560
+	ldr	r0, [ip, #4044]
 	mov	r3, #0
 	mov	r1, r5
-	strb	r3, [ip, #3833]
+	strb	r3, [ip, #3837]
 	mov	r2, r6
 	mov	r3, #1
-	ldr	r0, [r9, #-2088]
-	mov	fp, #0
-	str	ip, [sp, #4]
+	str	ip, [sp, #0]
 	bl	FlashProgPages
-	ldr	ip, [sp, #4]
-	mov	r3, fp
-	ldr	r0, [sp, #16]
-	strb	r0, [ip, #3833]
-	mov	ip, r8
-	mov	r8, r6
-	mov	r6, r5
-	mov	r5, fp
-.L1535:
-	ldr	r2, [r9, #-2088]
-	add	r1, r2, fp
-	ldr	r2, [r2, fp]
-	cmp	r2, #0
-	beq	.L1534
-	ldr	r0, [r1, #4]
+	ldr	ip, [sp, #0]
+	mov	r9, #0
+	ldr	r1, [sp, #16]
+	mov	fp, r9
+	strb	r1, [ip, #3837]
+.L1576:
+	ldr	r3, [r7, #4044]
+	add	r2, r3, r9
+	ldr	r3, [r3, r9]
+	cmp	r3, #0
+	beq	.L1575
+	ldr	r0, [r2, #4]
 	add	r4, r4, #1
-	str	ip, [sp, #4]
 	ubfx	r0, r0, #10, #16
 	uxth	r4, r4
 	bl	FtlBbmMapBadBlock
-	ldr	ip, [sp, #4]
-.L1534:
-	add	r5, r5, #1
-	add	fp, fp, #36
-	uxth	r5, r5
-	cmp	r5, r6
-	bne	.L1535
-	ldr	r1, [sp, #8]
-	mov	r5, r6
-	mov	r6, r8
-	mov	r8, ip
-	add	r7, r7, r1
-	uxth	r7, r7
-	cmp	r7, sl
-	bcc	.L1536
-	ldr	r9, .L1547
+.L1575:
+	add	fp, fp, #1
+	add	r9, r9, #36
+	uxth	fp, fp
+	cmp	fp, r5
+	bne	.L1576
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #12]
+	add	r8, r8, r2
+	uxth	r8, r8
+	cmp	r8, r3
+	bcc	.L1577
+	ldr	r9, .L1589
 	mov	r7, #0
-	mov	sl, r7
-.L1538:
-	cmp	r8, #0
-	beq	.L1537
-	ldr	r3, [r9, #-2088]
+	mov	r8, r7
+.L1579:
+	cmp	sl, #0
+	beq	.L1578
+	ldr	r3, [r9, #4044]
 	add	r2, r3, r7
 	ldr	r3, [r3, r7]
 	cmp	r3, #0
-	bne	.L1537
+	bne	.L1578
 	ldr	r0, [r2, #4]
 	mov	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L1537:
-	add	sl, sl, #1
+.L1578:
+	add	r8, r8, #1
 	add	r7, r7, #36
-	uxth	sl, sl
-	cmp	sl, r5
-	bne	.L1538
-	ldr	r2, [sp, #12]
-	cmp	r2, #63
+	uxth	r8, r8
+	cmp	r8, r5
+	bne	.L1579
+	ldr	r1, [sp, #8]
+	cmp	r1, #63
 	movhi	r3, #0
 	movls	r3, #1
-	cmp	r8, #0
-	moveq	r8, r3
-	orrne	r8, r3, #1
-	cmp	r8, #0
-	beq	.L1519
-	ldr	r3, .L1547
+	cmp	sl, #0
+	moveq	sl, r3
+	orrne	sl, r3, #1
+	cmp	sl, #0
+	beq	.L1560
+	ldr	r3, .L1589
 	mov	r1, r6
-	mov	r2, sl
-	ldr	r0, [r3, #-2088]
+	mov	r2, r8
+	ldr	r0, [r3, #4044]
 	bl	FlashEraseBlocks
-.L1519:
+.L1560:
 	mov	r0, r4
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1548:
+.L1590:
 	.align	2
-.L1547:
-	.word	.LANCHOR2
+.L1589:
 	.word	.LANCHOR0
+	.word	.LANCHOR2
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	2
-	.type	FlashTestBlk.part.23, %function
-FlashTestBlk.part.23:
+	.type	FlashTestBlk.part.25, %function
+FlashTestBlk.part.25:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-.L1550:
+.L1592:
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	.pad #108
 	sub	sp, sp, #108
-	ldr	r4, .L1552
+	ldr	r4, .L1594
 	mov	r5, r0
 	mov	r1, #165
 	add	r0, sp, #40
 	mov	r2, #32
 	str	r0, [sp, #16]
-	ldr	r3, [r4, #132]
+	ldr	r3, [r4, #136]
 	mov	r5, r5, asl #10
 	str	r3, [sp, #12]
 	bl	ftl_memset
-	ldr	r0, [r4, #132]
+	ldr	r0, [r4, #136]
 	mov	r1, #90
 	mov	r2, #8
 	bl	ftl_memset
@@ -13380,12 +13835,12 @@ FlashTestBlk.part.23:
 	mov	r0, r4
 	add	sp, sp, #108
 	ldmfd	sp!, {r4, r5, pc}
-.L1553:
+.L1595:
 	.align	2
-.L1552:
+.L1594:
 	.word	.LANCHOR2
 	.fnend
-	.size	FlashTestBlk.part.23, .-FlashTestBlk.part.23
+	.size	FlashTestBlk.part.25, .-FlashTestBlk.part.25
 	.align	2
 	.global	FlashTestBlk
 	.type	FlashTestBlk, %function
@@ -13394,17 +13849,17 @@ FlashTestBlk:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1556
-	ldr	r3, [r3, #152]
+	ldr	r3, .L1598
+	ldr	r3, [r3, #156]
 	cmp	r0, r3
-	bcc	.L1555
-	b	FlashTestBlk.part.23
-.L1555:
+	bcc	.L1597
+	b	FlashTestBlk.part.25
+.L1597:
 	mov	r0, #0
 	bx	lr
-.L1557:
+.L1599:
 	.align	2
-.L1556:
+.L1598:
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -13415,7 +13870,7 @@ FlashMakeFactorBbt:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 72
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1586
+	ldr	r3, .L1628
 	movw	r1, #3062
 	movw	r2, #3060
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
@@ -13426,13 +13881,13 @@ FlashMakeFactorBbt:
 	mov	r5, #0
 	ldrh	fp, [r3, r1]
 	mov	r1, #1
-	ldr	r4, .L1586+4
+	ldr	r4, .L1628+4
 	mul	fp, fp, r2
 	ldr	r2, [r3, #3624]
-	ldr	r0, [r4, #224]
+	ldr	r0, [r4, #228]
 	ldrb	r2, [r2, #24]	@ zero_extendqisi2
 	str	r0, [sp, #28]
-	ldr	r0, .L1586+8
+	ldr	r0, .L1628+8
 	uxth	fp, fp
 	str	r2, [sp, #12]
 	ldr	r2, [r3, #856]
@@ -13444,25 +13899,25 @@ FlashMakeFactorBbt:
 	uxtheq	r3, r3
 	streq	r3, [sp, #8]
 	bl	printk
-	ldr	r0, [r4, #224]
+	ldr	r0, [r4, #228]
 	mov	r2, #4096
 	mov	r1, #0
 	bl	ftl_memset
 	sub	r3, fp, #1
 	mov	r2, fp, lsr #4
-	ldr	r4, .L1586
+	ldr	r4, .L1628
 	uxth	r3, r3
 	str	r2, [sp, #20]
 	str	r3, [sp, #24]
-	b	.L1560
-.L1582:
-	ldr	r3, .L1586+4
+	b	.L1602
+.L1624:
+	ldr	r3, .L1628+4
 	add	r2, r3, r5, asl #1
-	ldrh	r6, [r2, #228]
+	ldrh	r6, [r2, #232]
 	cmp	r6, #0
-	bne	.L1561
+	bne	.L1603
 	movw	r2, #3068
-	ldr	r0, [r3, #144]
+	ldr	r0, [r3, #148]
 	ldrh	r2, [r4, r2]
 	mov	r1, r6
 	mov	r8, r6
@@ -13472,14 +13927,14 @@ FlashMakeFactorBbt:
 	bl	ftl_memset
 	add	r3, r4, r5
 	ldrb	r9, [r3, #3764]	@ zero_extendqisi2
-	b	.L1562
-.L1570:
+	b	.L1604
+.L1612:
 	mvn	r3, #0
 	strb	r3, [sp, #34]
 	strb	r3, [sp, #35]
 	ldr	r3, [sp, #12]
 	tst	r3, #1
-	beq	.L1563
+	beq	.L1605
 	ldr	r3, [sl, #3588]
 	add	r2, sp, #34
 	mov	r0, r9
@@ -13490,7 +13945,7 @@ FlashMakeFactorBbt:
 	ldrb	r2, [r4, #852]	@ zero_extendqisi2
 	ldr	r3, [sp, #4]
 	cmp	r2, #1
-	bne	.L1563
+	bne	.L1605
 	ldr	r1, [r4, #856]
 	add	r2, sp, #35
 	mov	r0, r9
@@ -13500,10 +13955,10 @@ FlashMakeFactorBbt:
 	ldrb	r2, [sp, #35]	@ zero_extendqisi2
 	and	r3, r2, r3
 	strb	r3, [sp, #34]
-.L1563:
+.L1605:
 	ldr	r0, [sp, #12]
 	tst	r0, #2
-	beq	.L1564
+	beq	.L1606
 	ldr	r3, [r4, #3624]
 	mov	r0, r9
 	add	r2, sp, #35
@@ -13513,42 +13968,42 @@ FlashMakeFactorBbt:
 	add	r1, r1, r3
 	add	r1, r1, r6
 	bl	FlashReadSpare
-.L1564:
+.L1606:
 	ldr	r3, [r4, #3624]
 	ldrb	r3, [r3, #7]	@ zero_extendqisi2
 	cmp	r3, #1
 	cmpne	r3, #8
 	ldrb	r3, [sp, #34]	@ zero_extendqisi2
-	bne	.L1565
+	bne	.L1607
 	cmp	r3, #0
-	beq	.L1584
+	beq	.L1626
 	ldrb	r0, [sp, #35]	@ zero_extendqisi2
 	rsbs	r0, r0, #1
 	movcc	r0, #0
-	b	.L1566
-.L1565:
+	b	.L1608
+.L1607:
 	cmp	r3, #255
-	bne	.L1584
+	bne	.L1626
 	ldrb	r0, [sp, #35]	@ zero_extendqisi2
 	subs	r0, r0, #255
 	movne	r0, #1
-	b	.L1566
-.L1584:
+	b	.L1608
+.L1626:
 	mov	r0, #1
-.L1566:
+.L1608:
 	ldr	r2, [sp, #12]
 	tst	r2, #4
-	beq	.L1567
+	beq	.L1609
 	ldr	r1, [sl, #3588]
 	mov	r0, r9
 	add	r1, r6, r1
 	bl	SandiskProgTestBadBlock
-.L1567:
+.L1609:
 	cmp	r0, #0
-	beq	.L1568
+	beq	.L1610
 	mov	r1, r5
 	mov	r2, r8
-	ldr	r0, .L1586+12
+	ldr	r0, .L1628+12
 	add	r7, r7, #1
 	bl	printk
 	ldr	r3, [sp, #16]
@@ -13556,8 +14011,8 @@ FlashMakeFactorBbt:
 	mov	ip, #1
 	uxth	r7, r7
 	mov	r2, r3, lsr #5
-	ldr	r3, .L1586+4
-	ldr	r3, [r3, #144]
+	ldr	r3, .L1628+4
+	ldr	r3, [r3, #148]
 	ldr	r1, [r3, r2, asl #2]
 	orr	r1, r1, ip, asl r0
 	ldr	r0, [sp, #20]
@@ -13565,18 +14020,18 @@ FlashMakeFactorBbt:
 	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
 	mul	r3, r3, r0
 	cmp	r7, r3
-	bgt	.L1569
-.L1568:
+	bgt	.L1611
+.L1610:
 	ldr	r2, [sp, #8]
 	add	r8, r8, #1
 	add	r6, r6, r2
-.L1562:
+.L1604:
 	uxth	r3, r8
 	str	r3, [sp, #16]
 	cmp	r3, fp
-	bcc	.L1570
-.L1569:
-	ldr	r0, .L1586+16
+	bcc	.L1612
+.L1611:
+	ldr	r0, .L1628+16
 	mov	r1, r5
 	mov	r2, r7
 	bl	printk
@@ -13584,31 +14039,31 @@ FlashMakeFactorBbt:
 	ldr	r0, [sp, #20]
 	mul	r3, r3, r0
 	cmp	r7, r3
-	blt	.L1571
+	blt	.L1613
 	movw	r3, #3068
 	mov	r1, #0
 	ldrh	r2, [r4, r3]
-	ldr	r3, .L1586+4
+	ldr	r3, .L1628+4
 	mov	r2, r2, asl #9
-	ldr	r0, [r3, #144]
+	ldr	r0, [r3, #148]
 	bl	ftl_memset
-.L1571:
+.L1613:
 	cmp	r5, #0
-	bne	.L1572
-	ldr	sl, .L1586+4
+	bne	.L1614
+	ldr	sl, .L1628+4
 	mov	r8, r5
 	mov	r7, r5
-	ldrh	r9, [sl, #152]
-	b	.L1573
-.L1575:
+	ldrh	r9, [sl, #156]
+	b	.L1615
+.L1617:
 	mov	r0, r6
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1574
+	beq	.L1616
 	mov	r1, r6
-	ldr	r0, .L1586+20
+	ldr	r0, .L1628+20
 	bl	printk
-	ldr	r3, [sl, #144]
+	ldr	r3, [sl, #148]
 	mov	r2, r6, lsr #5
 	mov	r0, #1
 	add	r7, r7, r0
@@ -13617,86 +14072,86 @@ FlashMakeFactorBbt:
 	uxth	r7, r7
 	orr	r6, r1, r0, asl r6
 	str	r6, [r3, r2, asl #2]
-.L1574:
+.L1616:
 	add	r8, r8, #1
 	uxth	r8, r8
-.L1573:
+.L1615:
 	add	r6, r8, r9
 	ldrb	r3, [r4, #853]	@ zero_extendqisi2
 	uxth	r6, r6
 	cmp	r3, r6
-	bhi	.L1575
+	bhi	.L1617
 	ldr	r6, [sp, #24]
 	sub	r9, fp, #50
-	ldr	sl, .L1586+4
+	ldr	sl, .L1628+4
 	mov	r8, #1
-	b	.L1576
-.L1578:
+	b	.L1618
+.L1620:
 	mov	r0, r6
 	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1577
+	beq	.L1619
 	mov	r1, r6
-	ldr	r0, .L1586+20
+	ldr	r0, .L1628+20
 	bl	printk
-	ldr	r3, [sl, #144]
+	ldr	r3, [sl, #148]
 	mov	r2, r6, lsr #5
 	and	r0, r6, #31
 	ldr	r1, [r3, r2, asl #2]
 	orr	r1, r1, r8, asl r0
 	str	r1, [r3, r2, asl #2]
-.L1577:
+.L1619:
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1576:
+.L1618:
 	cmp	r6, r9
-	bgt	.L1578
-	ldr	r3, .L1586+4
+	bgt	.L1620
+	ldr	r3, .L1628+4
 	ldrb	r1, [r4, #853]	@ zero_extendqisi2
-	ldr	r2, [r3, #152]
+	ldr	r2, [r3, #156]
 	rsb	r2, r2, r1
 	cmp	r7, r2
-	bcc	.L1572
+	bcc	.L1614
 	movw	r2, #3068
-	ldr	r0, [r3, #144]
+	ldr	r0, [r3, #148]
 	ldrh	r2, [r4, r2]
 	mov	r1, #0
 	mov	r2, r2, asl #9
 	bl	ftl_memset
-.L1572:
+.L1614:
 	mul	r8, fp, r5
-	ldr	r7, .L1586+4
+	ldr	r7, .L1628+4
 	ldr	r6, [sp, #24]
 	ldr	r9, [sp, #28]
 	add	sl, r7, r5, asl #1
-.L1579:
-	ldr	r0, .L1586+24
+.L1621:
+	ldr	r0, .L1628+24
 	mov	r1, r5
 	mov	r2, r6
 	bl	printk
-	ldr	r3, [r7, #144]
-	b	.L1580
-.L1581:
+	ldr	r3, [r7, #148]
+	b	.L1622
+.L1623:
 	sub	r6, r6, #1
 	uxth	r6, r6
-.L1580:
+.L1622:
 	mov	r1, r6, lsr #5
 	and	r2, r6, #31
 	ldr	r1, [r3, r1, asl #2]
 	mov	r2, r1, lsr r2
 	ands	r2, r2, #1
-	bne	.L1581
-	ldr	r3, .L1586+28
+	bne	.L1623
+	ldr	r3, .L1628+28
 	mov	r1, #1
-	strh	r6, [sl, #228]	@ movhi
+	strh	r6, [sl, #232]	@ movhi
 	add	r0, sp, #36
 	strh	r6, [r9, #2]	@ movhi
 	strh	r3, [r9, #0]	@ movhi
-	ldr	r3, [r7, #144]
+	ldr	r3, [r7, #148]
 	strh	r2, [r9, #8]	@ movhi
 	mov	r2, r1
 	str	r3, [sp, #44]
-	ldr	r3, [r7, #224]
+	ldr	r3, [r7, #228]
 	str	r3, [sp, #48]
 	add	r3, r6, r8
 	mov	r3, r3, asl #10
@@ -13711,26 +14166,26 @@ FlashMakeFactorBbt:
 	cmp	r3, #0
 	subne	r6, r6, #1
 	uxthne	r6, r6
-	bne	.L1579
-.L1561:
+	bne	.L1621
+.L1603:
 	add	r5, r5, #1
 	uxtb	r5, r5
-.L1560:
+.L1602:
 	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
 	cmp	r3, r5
-	bhi	.L1582
+	bhi	.L1624
 	add	sp, sp, #76
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1587:
+.L1629:
 	.align	2
-.L1586:
+.L1628:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC111
-	.word	.LC112
-	.word	.LC113
-	.word	.LC114
-	.word	.LC115
+	.word	.LC118
+	.word	.LC119
+	.word	.LC120
+	.word	.LC121
+	.word	.LC122
 	.word	-3872
 	.fnend
 	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
@@ -13741,8 +14196,8 @@ ftl_map_blk_gc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
 	mov	r4, r0
 	ldr	r6, [r0, #12]
 	ldr	r5, [r0, #24]
@@ -13751,141 +14206,147 @@ ftl_map_blk_gc:
 	ldrh	r2, [r4, #8]
 	sub	r3, ip, #4
 	cmp	r2, r3
-	bge	.L1589
+	bge	.L1631
 	ldrh	r2, [r4, #40]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1590
-	ldr	r1, .L1602
-	movw	r3, #3914
+	beq	.L1632
+	ldr	r1, .L1645
+	movw	r3, #3918
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r1, r3]
 	cmp	r2, r3
-	bcc	.L1590
-.L1589:
+	bcc	.L1632
+.L1631:
 	ldrh	r1, [r4, #40]
 	movw	r3, #65535
 	uxth	r7, r0
 	cmp	r1, r3
-	beq	.L1591
-	ldr	r0, .L1602
-	movw	r2, #3914
+	beq	.L1633
+	ldr	r0, .L1645
+	movw	r2, #3918
 	ldrh	r3, [r4, #2]
 	ldrh	r2, [r0, r2]
 	cmp	r2, r3
 	movls	r0, r6
 	movls	r2, #0
-	bhi	.L1591
-	b	.L1592
-.L1594:
+	bhi	.L1633
+	b	.L1634
+.L1636:
 	ldrh	lr, [r0], #2
 	cmp	lr, r1
-	beq	.L1601
+	beq	.L1644
 	add	r2, r2, #1
 	uxth	r2, r2
-.L1592:
+.L1634:
 	cmp	r2, ip
-	bne	.L1594
-	b	.L1593
-.L1601:
+	bne	.L1636
+	b	.L1635
+.L1644:
 	mov	r7, r2
-.L1593:
+.L1635:
 	mov	r2, r2, asl #1
-	ldr	r0, .L1602+4
+	ldr	r0, .L1645+4
 	ldrh	r2, [r6, r2]
 	bl	printk
 	mvn	r3, #0
 	strh	r3, [r4, #40]	@ movhi
-.L1591:
+.L1633:
 	mov	r7, r7, asl #1
 	ldrh	r8, [r6, r7]
 	cmp	r8, #0
-	beq	.L1590
+	beq	.L1632
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L1590
+	bne	.L1632
 	mov	r2, #1
-	ldr	r1, .L1602
+	ldr	r1, .L1645
 	str	r2, [r4, #32]
 	strh	r3, [r6, r7]	@ movhi
 	ldrh	r3, [r4, #8]
 	ldrh	r2, [r4, #2]
 	sub	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	movw	r3, #3914
+	movw	r3, #3918
 	ldrh	r3, [r1, r3]
 	cmp	r2, r3
-	bcc	.L1595
+	bcc	.L1637
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1595:
-	mov	r7, #0
-	ldr	r6, .L1602+8
-	mov	fp, r7
-	b	.L1596
-.L1599:
-	ldr	r3, [r5, r7, asl #2]
-	mov	r9, r7, asl #2
+.L1637:
+	mov	r6, #0
+	ldr	r7, .L1645+8
+	b	.L1638
+.L1643:
+	ldr	r3, [r5, r6, asl #2]
+	add	r9, r5, r6, asl #2
 	cmp	r8, r3, lsr #10
-	bne	.L1597
-	ldr	r3, [r6, #-960]
+	bne	.L1639
+	ldr	r3, [r7, #-956]
 	mov	r1, #1
-	ldr	sl, [r6, #-940]
+	ldr	sl, [r7, #-936]
 	mov	r2, r1
-	ldr	r0, .L1602+12
-	str	r3, [r6, #184]
-	str	sl, [r6, #188]
-	ldr	r3, [r5, r7, asl #2]
-	str	r3, [r6, #180]
+	ldr	r0, .L1645+12
+	str	r3, [r7, #188]
+	str	sl, [r7, #192]
+	ldr	r3, [r5, r6, asl #2]
+	str	r3, [r7, #184]
 	bl	FlashReadPages
-	ldr	r3, [r6, #176]
+	ldr	r3, [r7, #180]
 	cmn	r3, #1
-	bne	.L1598
-	str	fp, [r5, r9]
-	ldr	r0, .L1602+16
-	ldr	r1, [r6, #180]
+	beq	.L1640
+	ldrh	r3, [sl, #8]
+	cmp	r3, r6
+	beq	.L1641
+.L1640:
+	mov	r3, #0
+	str	r3, [r9, #0]
+	ldr	r3, .L1645+8
 	ldrh	r2, [sl, #8]
+	ldr	r0, .L1645+16
+	ldr	r1, [r3, #184]
 	bl	printk
-	mov	r3, #1
-	str	r3, [r6, #-2092]
-	b	.L1597
-.L1598:
+	ldr	r3, .L1645
+	mov	r2, #1
+	str	r2, [r3, #4040]
+	b	.L1642
+.L1641:
 	mov	r0, r4
-	mov	r1, r7
-	ldr	r2, [r6, #184]
+	mov	r1, r6
+	ldr	r2, [r7, #188]
 	bl	FtlMapWritePage
-.L1597:
-	add	r7, r7, #1
-	uxth	r7, r7
-.L1596:
+.L1639:
+	add	r6, r6, #1
+	uxth	r6, r6
+.L1638:
 	ldrh	r3, [r4, #6]
-	cmp	r3, r7
-	bhi	.L1599
+	cmp	r3, r6
+	bhi	.L1643
 	mov	r0, r8
 	mov	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	mov	r3, #0
 	str	r3, [r4, #32]
-.L1590:
-	ldr	r1, .L1602
-	movw	r3, #3914
+.L1632:
+	ldr	r1, .L1645
+	movw	r3, #3918
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r1, r3]
 	cmp	r2, r3
-	bcc	.L1600
+	bcc	.L1642
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L1600:
+.L1642:
 	mov	r0, #0
-	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1603:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L1646:
 	.align	2
-.L1602:
+.L1645:
 	.word	.LANCHOR0
-	.word	.LC116
+	.word	.LC123
 	.word	.LANCHOR2
-	.word	.LANCHOR2+176
-	.word	.LC117
+	.word	.LANCHOR2+180
+	.word	.LC124
 	.fnend
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
@@ -13895,78 +14356,78 @@ Ftl_write_map_blk_to_last_page:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1653
 	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r4, r0
-	ldr	r5, .L1610
-	ldr	r7, [r0, #12]
-	ldr	r8, [r0, #24]
-	ldr	r6, [r5, #-2092]
+	ldr	r6, [r3, #4040]
+	ldr	r5, [r0, #12]
 	cmp	r6, #0
-	bne	.L1605
-	ldrh	r3, [r0, #0]
-	movw	r2, #65535
-	cmp	r3, r2
-	bne	.L1606
+	ldr	r8, [r0, #24]
+	bne	.L1648
+	ldrh	r2, [r0, #0]
+	movw	r1, #65535
+	cmp	r2, r1
+	bne	.L1649
 	ldrh	r3, [r0, #8]
 	add	r3, r3, #1
 	strh	r3, [r0, #8]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	strh	r0, [r7, #0]	@ movhi
+	strh	r0, [r5, #0]	@ movhi
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	add	r3, r3, #1
 	strh	r6, [r4, #0]	@ movhi
 	str	r3, [r4, #28]
-	b	.L1605
-.L1606:
-	mov	r3, r3, asl #1
-	ldr	r2, [r0, #28]
+	b	.L1648
+.L1649:
+	mov	r2, r2, asl #1
+	ldr	r1, [r0, #28]
+	ldrh	r7, [r5, r2]
+	ldr	r5, .L1653+4
+	ldrh	r2, [r0, #2]
+	orr	r2, r2, r7, asl #10
+	str	r2, [r5, #184]
+	ldr	r2, [r5, #-960]
+	str	r2, [r5, #188]
+	ldr	r2, [r5, #-936]
+	str	r2, [r5, #192]
+	str	r1, [r2, #4]
+	ldr	r1, .L1653+8
+	strh	r1, [r2, #8]	@ movhi
+	ldrh	r1, [r0, #4]
+	strh	r7, [r2, #2]	@ movhi
+	strh	r1, [r2, #0]	@ movhi
+	movw	r2, #3918
+	ldrh	r2, [r3, r2]
 	mov	r1, #255
-	ldrh	r7, [r7, r3]
-	ldrh	r3, [r0, #2]
-	orr	r3, r3, r7, asl #10
-	str	r3, [r5, #180]
-	ldr	r3, [r5, #-964]
-	str	r3, [r5, #184]
-	ldr	r3, [r5, #-940]
-	str	r3, [r5, #188]
-	str	r2, [r3, #4]
-	ldr	r2, .L1610+4
-	strh	r2, [r3, #8]	@ movhi
-	ldrh	r2, [r0, #4]
-	strh	r7, [r3, #2]	@ movhi
-	strh	r2, [r3, #0]	@ movhi
-	movw	r3, #3914
-	ldr	r2, .L1610+8
-	ldr	r0, [r5, #-964]
-	ldrh	r2, [r2, r3]
+	ldr	r0, [r5, #-960]
 	mov	r2, r2, asl #3
 	bl	ftl_memset
 	mov	r3, r6
-	b	.L1607
-.L1609:
+	b	.L1650
+.L1652:
 	ldr	r2, [r8, r3, asl #2]
 	cmp	r7, r2, lsr #10
-	bne	.L1608
+	bne	.L1651
 	add	r6, r6, #1
-	ldr	r2, [r5, #-964]
+	ldr	r2, [r5, #-960]
 	uxth	r6, r6
 	str	r3, [r2, r6, asl #3]
-	ldr	r2, [r5, #-964]
+	ldr	r2, [r5, #-960]
 	ldr	r1, [r8, r3, asl #2]
 	add	r2, r2, r6, asl #3
 	str	r1, [r2, #4]
-.L1608:
+.L1651:
 	add	r3, r3, #1
 	uxth	r3, r3
-.L1607:
+.L1650:
 	ldrh	r2, [r4, #6]
 	cmp	r2, r3
-	bhi	.L1609
+	bhi	.L1652
 	mov	r1, #1
 	mov	r3, #0
-	ldr	r0, .L1610+12
+	ldr	r0, .L1653+12
 	mov	r2, r1
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
@@ -13974,67 +14435,71 @@ Ftl_write_map_blk_to_last_page:
 	add	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-.L1605:
+.L1648:
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1611:
+.L1654:
 	.align	2
-.L1610:
+.L1653:
+	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-1291
-	.word	.LANCHOR0
-	.word	.LANCHOR2+176
+	.word	.LANCHOR2+180
 	.fnend
 	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	2
-	.type	FtlMapWritePage.part.14, %function
-FtlMapWritePage.part.14:
+	.global	FtlMapWritePage
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r4, r0
-	ldr	r5, .L1625
+	ldr	r8, .L1667
 	mov	sl, r1
-	ldr	r8, .L1625+4
+	ldr	r5, .L1667+4
 	mov	r9, r2
 	mov	r6, #0
-.L1623:
-	ldr	r3, [r5, #-1824]
+	mov	fp, r8
+.L1666:
+	ldr	r3, [r5, #-1820]
 	add	r3, r3, #1
-	str	r3, [r5, #-1824]
-	movw	r3, #3914
+	str	r3, [r5, #-1820]
+	movw	r3, #3918
 	ldrh	r2, [r4, #2]
 	ldrh	r3, [r8, r3]
 	sub	r3, r3, #1
 	cmp	r2, r3
-	bge	.L1614
+	bge	.L1657
 	ldrh	r2, [r4, #0]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1615
-.L1614:
+	bne	.L1658
+.L1657:
 	mov	r0, r4
 	bl	Ftl_write_map_blk_to_last_page
-.L1615:
+.L1658:
+	ldr	r1, [fp, #4040]
+	cmp	r1, #0
+	bne	.L1659
 	ldrh	r3, [r4, #0]
-	mov	r1, #0
 	ldr	r2, [r4, #12]
-	ldr	r0, [r5, #-940]
+	ldr	r0, [r5, #-936]
 	mov	r3, r3, asl #1
 	ldrh	r7, [r2, r3]
 	mov	r2, #16
 	ldrh	r3, [r4, #2]
-	str	r9, [r5, #184]
+	str	r9, [r5, #188]
 	orr	r3, r3, r7, asl #10
-	str	r0, [r5, #188]
-	str	r3, [r5, #180]
+	str	r0, [r5, #192]
+	str	r3, [r5, #184]
 	bl	ftl_memset
-	ldr	r3, [r5, #188]
+	ldr	r3, [r5, #192]
 	mov	r1, #1
 	ldr	r2, [r4, #28]
-	ldr	r0, .L1625+8
+	ldr	r0, .L1667+8
 	strh	sl, [r3, #8]	@ movhi
 	str	r2, [r3, #4]
 	ldrh	r2, [r4, #4]
@@ -14047,73 +14512,53 @@ FtlMapWritePage.part.14:
 	add	r2, r2, #1
 	uxth	r2, r2
 	strh	r2, [r4, #2]	@ movhi
-	ldr	r3, [r5, #176]
+	ldr	r3, [r5, #180]
 	cmn	r3, #1
-	bne	.L1616
-	ldr	r0, .L1625+12
+	bne	.L1660
+	ldr	r0, .L1667+12
 	add	r6, r6, #1
-	ldr	r1, [r5, #180]
+	ldr	r1, [r5, #184]
 	bl	printk
 	ldrh	r3, [r4, #2]
 	uxth	r6, r6
 	cmp	r3, #2
-	movwls	r3, #3914
+	movwls	r3, #3918
 	ldrlsh	r3, [r8, r3]
 	subls	r3, r3, #1
 	strlsh	r3, [r4, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L1623
-	ldr	r4, .L1625
+	bls	.L1666
+	ldr	r3, .L1667+4
 	mov	r2, r6
-	ldr	r0, .L1625+16
-	ldr	r1, [r4, #180]
+	ldr	r0, .L1667+16
+	ldr	r1, [r3, #184]
 	bl	printk
-	mov	r3, #1
-	str	r3, [r4, #-2092]
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L1616:
+	ldr	r3, .L1667
+	mov	r2, #1
+	str	r2, [r3, #4040]
+	b	.L1659
+.L1660:
 	cmp	r3, #0
 	strneh	r7, [r4, #40]	@ movhi
 	cmp	r2, #1
-	beq	.L1623
+	beq	.L1666
 	cmp	r3, #256
-	beq	.L1623
-	ldr	r3, .L1625
-	ldr	r2, [r3, #180]
+	beq	.L1666
+	ldr	r3, .L1667+4
+	ldr	r2, [r3, #184]
 	ldr	r3, [r4, #24]
 	str	r2, [r3, sl, asl #2]
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L1626:
-	.align	2
-.L1625:
-	.word	.LANCHOR2
-	.word	.LANCHOR0
-	.word	.LANCHOR2+176
-	.word	.LC118
-	.word	.LC119
-	.fnend
-	.size	FtlMapWritePage.part.14, .-FtlMapWritePage.part.14
-	.align	2
-	.global	FtlMapWritePage
-	.type	FtlMapWritePage, %function
-FtlMapWritePage:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	ldr	r3, .L1629
-	ldr	r3, [r3, #-2092]
-	cmp	r3, #0
-	bne	.L1628
-	bl	FtlMapWritePage.part.14
-.L1628:
+.L1659:
 	mov	r0, #0
-	ldmfd	sp!, {r3, pc}
-.L1630:
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1668:
 	.align	2
-.L1629:
+.L1667:
+	.word	.LANCHOR0
 	.word	.LANCHOR2
+	.word	.LANCHOR2+180
+	.word	.LC125
+	.word	.LC126
 	.fnend
 	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
@@ -14126,26 +14571,25 @@ flush_l2p_region:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, #12
-	ldr	r5, .L1632
+	ldr	r5, .L1670
 	mul	r4, r4, r0
-	ldr	r0, .L1632+4
-	ldr	r2, [r5, #-1856]
+	sub	r0, r5, #1088
+	ldr	r2, [r5, #-1852]
 	add	r3, r2, r4
 	ldrh	r1, [r2, r4]
 	ldr	r2, [r3, #8]
 	bl	FtlMapWritePage
-	ldr	r3, [r5, #-1856]
+	ldr	r3, [r5, #-1852]
 	mov	r0, #0
 	add	r4, r3, r4
 	ldr	r3, [r4, #4]
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1633:
+.L1671:
 	.align	2
-.L1632:
+.L1670:
 	.word	.LANCHOR2
-	.word	.LANCHOR2-1092
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
 	.align	2
@@ -14155,53 +14599,52 @@ FtlMapBlkWriteDumpData:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	mov	r4, r0
 	ldr	r3, [r0, #36]
-	ldrh	r5, [r0, #6]
+	ldrh	r6, [r0, #6]
 	cmp	r3, #0
 	ldr	r2, [r0, #24]
-	ldmeqfd	sp!, {r3, r4, r5, pc}
+	ldmeqfd	sp!, {r4, r5, r6, pc}
 	mov	r3, #0
 	str	r3, [r0, #36]
-	ldr	r3, .L1638
-	ldr	r1, [r3, #-2092]
+	ldr	r3, .L1676
+	ldr	r1, [r3, #4040]
 	cmp	r1, #0
-	ldmnefd	sp!, {r3, r4, r5, pc}
-	sub	r5, r5, #1
-	ldr	r0, [r3, #-960]
-	ldr	r1, [r3, #-940]
-	uxth	r5, r5
-	str	r0, [r3, #184]
-	str	r1, [r3, #188]
-	ldr	r2, [r2, r5, asl #2]
+	ldmnefd	sp!, {r4, r5, r6, pc}
+	ldr	r5, .L1676+4
+	sub	r6, r6, #1
+	uxth	r6, r6
+	ldr	r0, [r5, #-956]
+	ldr	r1, [r5, #-936]
+	str	r0, [r5, #188]
+	str	r1, [r5, #192]
+	ldr	r2, [r2, r6, asl #2]
 	cmp	r2, #0
-	str	r2, [r3, #180]
-	beq	.L1636
+	str	r2, [r5, #184]
+	beq	.L1674
 	mov	r1, #1
-	add	r0, r3, #176
+	add	r0, r5, #180
 	mov	r2, r1
 	bl	FlashReadPages
-	b	.L1637
-.L1636:
-	ldr	r2, .L1638+4
-	movw	r3, #3922
+	b	.L1675
+.L1674:
+	movw	r2, #3926
 	mov	r1, #255
-	ldrh	r2, [r2, r3]
+	ldrh	r2, [r3, r2]
 	bl	ftl_memset
-.L1637:
-	ldr	r3, .L1638
+.L1675:
 	mov	r0, r4
-	mov	r1, r5
-	ldr	r2, [r3, #184]
-	ldmfd	sp!, {r3, r4, r5, lr}
+	mov	r1, r6
+	ldr	r2, [r5, #188]
+	ldmfd	sp!, {r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L1639:
+.L1677:
 	.align	2
-.L1638:
-	.word	.LANCHOR2
+.L1676:
 	.word	.LANCHOR0
+	.word	.LANCHOR2
 	.fnend
 	.size	FtlMapBlkWriteDumpData, .-FtlMapBlkWriteDumpData
 	.align	2
@@ -14211,14 +14654,14 @@ FtlVendorPartRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1651
+	ldr	r3, .L1689
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r9, r2
-	mov	r2, #3920
+	movw	r2, #3924
 	mov	r5, r1
 	ldrh	r7, [r3, r2]
-	movw	r2, #3906
+	movw	r2, #3910
 	ldrh	r2, [r3, r2]
 	add	r1, r1, r0
 	.pad #52
@@ -14226,20 +14669,20 @@ FtlVendorPartRead:
 	mov	r8, r0
 	cmp	r1, r2
 	mvnhi	fp, #0
-	bhi	.L1641
+	bhi	.L1679
 	mov	r7, r0, lsr r7
 	mov	fp, #0
-	ldr	r6, .L1651+4
+	ldr	r6, .L1689+4
 	mov	r2, r7, asl #2
 	str	r2, [sp, #0]
-	b	.L1642
-.L1648:
-	ldr	r3, [r6, #-908]
+	b	.L1680
+.L1686:
+	ldr	r3, [r6, #-904]
 	mov	r0, r8
 	ldr	r2, [sp, #0]
 	ldr	sl, [r3, r2]
-	movw	r3, #3918
-	ldr	r2, .L1651
+	movw	r3, #3922
+	ldr	r2, .L1689
 	ldrh	r4, [r2, r3]
 	mov	r1, r4
 	bl	__aeabi_uidivmod
@@ -14250,12 +14693,12 @@ FtlVendorPartRead:
 	cmp	r4, r5
 	uxthhi	r4, r5
 	cmp	sl, #0
-	beq	.L1644
-	ldr	r2, .L1651+4
+	beq	.L1682
+	ldr	r2, .L1689+4
 	mov	r1, #1
 	add	r0, sp, #12
 	str	sl, [sp, #16]
-	ldr	r3, [r2, #-956]
+	ldr	r3, [r2, #-952]
 	mov	r2, r1
 	str	r3, [sp, #20]
 	mov	r3, #0
@@ -14264,31 +14707,31 @@ FtlVendorPartRead:
 	ldr	r3, [sp, #12]
 	cmn	r3, #1
 	moveq	fp, r3
-	ldr	r3, [r6, #176]
+	ldr	r3, [r6, #180]
 	cmp	r3, #256
-	bne	.L1646
+	bne	.L1684
 	mov	r1, r7
 	mov	r2, sl
-	ldr	r0, .L1651+8
+	ldr	r0, .L1689+8
 	bl	printk
-	ldr	r0, .L1651+12
+	ldr	r0, .L1689+12
 	mov	r1, r7
-	ldr	r2, [r6, #-956]
+	ldr	r2, [r6, #-952]
 	bl	FtlMapWritePage
-.L1646:
+.L1684:
 	ldr	r3, [sp, #4]
 	mov	r0, r9
-	ldr	r1, [r6, #-956]
+	ldr	r1, [r6, #-952]
 	mov	r2, r4, asl #9
 	add	r1, r1, r3, asl #9
 	bl	memcpy
-	b	.L1647
-.L1644:
+	b	.L1685
+.L1682:
 	mov	r0, r9
 	mov	r1, sl
 	mov	r2, r4, asl #9
 	bl	ftl_memset
-.L1647:
+.L1685:
 	ldr	r3, [sp, #0]
 	add	r7, r7, #1
 	rsb	r5, r4, r5
@@ -14296,20 +14739,20 @@ FtlVendorPartRead:
 	add	r9, r9, r4, asl #9
 	add	r3, r3, #4
 	str	r3, [sp, #0]
-.L1642:
+.L1680:
 	cmp	r5, #0
-	bne	.L1648
-.L1641:
+	bne	.L1686
+.L1679:
 	mov	r0, fp
 	add	sp, sp, #52
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1652:
+.L1690:
 	.align	2
-.L1651:
+.L1689:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC120
-	.word	.LANCHOR2+244
+	.word	.LC127
+	.word	.LANCHOR2+248
 	.fnend
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
 	.align	2
@@ -14322,84 +14765,86 @@ Ftl_load_ext_data:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r0, #0
-	ldr	r4, .L1657
+	ldr	r5, .L1695
 	mov	r1, #1
-	ldr	r5, .L1657+4
-	sub	r2, r4, #1712
+	ldr	r2, .L1695+4
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #-1712]
-	cmp	r3, r5
-	beq	.L1654
-	sub	r0, r4, #1712
+	ldr	r4, .L1695+8
+	ldr	r3, [r5, #-1708]
+	cmp	r3, r4
+	beq	.L1692
+	ldr	r0, .L1695+4
 	mov	r1, #0
 	mov	r2, #512
 	bl	ftl_memset
-	str	r5, [r4, #-1712]
-.L1654:
-	ldr	r2, [r4, #-1712]
-	ldr	r3, .L1657
-	cmp	r2, r5
-	bne	.L1655
-	ldr	r2, [r3, #-1624]
-	str	r2, [r3, #-1816]
+	str	r4, [r5, #-1708]
+.L1692:
+	ldr	r2, [r5, #-1708]
+	ldr	r3, .L1695
+	cmp	r2, r4
+	bne	.L1693
 	ldr	r2, [r3, #-1620]
+	ldr	r1, [r3, #-1676]
 	str	r2, [r3, #-1812]
-	ldr	r2, [r3, #-1704]
-	str	r2, [r3, #-1820]
+	ldr	r2, [r3, #-1616]
+	str	r2, [r3, #-1808]
 	ldr	r2, [r3, #-1700]
-	str	r2, [r3, #-1832]
+	str	r2, [r3, #-1816]
 	ldr	r2, [r3, #-1696]
-	str	r2, [r3, #-1840]
+	str	r2, [r3, #-1828]
 	ldr	r2, [r3, #-1692]
-	str	r2, [r3, #-1824]
-	ldr	r2, [r3, #-1684]
-	str	r2, [r3, #-1796]
-	ldr	r2, [r3, #-1680]
-	str	r2, [r3, #-2080]
-	ldr	r2, [r3, #-1676]
 	str	r2, [r3, #-1836]
+	ldr	r2, [r3, #-1688]
+	str	r2, [r3, #-1820]
+	ldr	r2, [r3, #-1680]
+	str	r2, [r3, #-1792]
+	ldr	r2, .L1695+12
+	str	r1, [r2, #4052]
 	ldr	r2, [r3, #-1672]
-	str	r2, [r3, #-1828]
+	str	r2, [r3, #-1832]
 	ldr	r2, [r3, #-1668]
-	str	r2, [r3, #-1788]
+	str	r2, [r3, #-1824]
 	ldr	r2, [r3, #-1664]
 	str	r2, [r3, #-1784]
-	ldr	r2, [r3, #-1652]
-	str	r2, [r3, #-1716]
-.L1655:
-	ldr	r4, .L1657
+	ldr	r2, [r3, #-1660]
+	str	r2, [r3, #-1780]
+	ldr	r2, [r3, #-1648]
+	str	r2, [r3, #-1712]
+.L1693:
+	ldr	r4, .L1695
 	mov	r3, #0
-	ldr	r5, .L1657+8
-	str	r3, [r4, #-1004]
-	ldr	r2, [r4, #-1644]
-	ldr	r3, .L1657+12
+	ldr	r5, .L1695+12
+	str	r3, [r4, #-1000]
+	ldr	r2, [r4, #-1640]
+	ldr	r3, .L1695+16
 	cmp	r2, r3
-	bne	.L1656
+	bne	.L1694
 	mov	r3, #1
-	ldr	r0, .L1657+16
-	str	r3, [r5, #3836]
-	ldr	r1, .L1657+20
+	ldr	r0, .L1695+20
+	str	r3, [r5, #3840]
+	ldr	r1, .L1695+24
 	bl	printk
-.L1656:
-	movw	r3, #3902
-	ldr	r0, [r4, #-1800]
+.L1694:
+	movw	r3, #3906
+	ldr	r0, [r4, #-1796]
 	ldrh	r2, [r5, r3]
-	ldr	r3, [r4, #-1796]
+	ldr	r3, [r4, #-1792]
 	mla	r0, r0, r2, r3
-	movw	r3, #3852
+	mov	r3, #3856
 	ldrh	r1, [r5, r3]
 	bl	__aeabi_uidiv
-	str	r0, [r4, #-1792]
+	str	r0, [r4, #-1788]
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1658:
+.L1696:
 	.align	2
-.L1657:
+.L1695:
 	.word	.LANCHOR2
+	.word	.LANCHOR2-1708
 	.word	1179929683
 	.word	.LANCHOR0
 	.word	305432421
 	.word	.LC78
-	.word	.LC121
+	.word	.LC128
 	.fnend
 	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
 	.align	2
@@ -14412,34 +14857,34 @@ FtlLoadEctTbl:
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r0, #64
-	ldr	r4, .L1661
-	ldr	r5, .L1661+4
-	ldr	r2, [r4, #-924]
+	ldr	r4, .L1699
+	ldr	r5, .L1699+4
+	ldr	r2, [r4, #-920]
 	ldrh	r1, [r4, r5]
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #-924]
+	ldr	r3, [r4, #-920]
 	ldr	r2, [r3, #0]
-	ldr	r3, .L1661+8
+	ldr	r3, .L1699+8
 	cmp	r2, r3
-	beq	.L1660
-	ldr	r1, .L1661+12
-	ldr	r0, .L1661+16
+	beq	.L1698
+	ldr	r1, .L1699+12
+	ldr	r0, .L1699+16
 	bl	printk
 	ldrh	r2, [r4, r5]
-	ldr	r0, [r4, #-924]
+	ldr	r0, [r4, #-920]
 	mov	r1, #0
 	mov	r2, r2, asl #9
 	bl	ftl_memset
-.L1660:
+.L1698:
 	mov	r0, #0
 	ldmfd	sp!, {r3, r4, r5, pc}
-.L1662:
+.L1700:
 	.align	2
-.L1661:
+.L1699:
 	.word	.LANCHOR2
-	.word	-928
+	.word	-924
 	.word	1112818501
-	.word	.LC122
+	.word	.LC129
 	.word	.LC78
 	.fnend
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
@@ -14450,14 +14895,14 @@ FtlVendorPartWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1673
+	ldr	r3, .L1711
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	r9, r2
-	mov	r2, #3920
+	movw	r2, #3924
 	mov	r4, r1
 	ldrh	r8, [r3, r2]
-	movw	r2, #3906
+	movw	r2, #3910
 	ldrh	r2, [r3, r2]
 	add	r1, r1, r0
 	.pad #60
@@ -14465,26 +14910,26 @@ FtlVendorPartWrite:
 	mov	r6, r0
 	cmp	r1, r2
 	mvnhi	r7, #0
-	bhi	.L1664
+	bhi	.L1702
 	mov	r8, r0, lsr r8
 	mov	r7, #0
-	ldr	sl, .L1673+4
+	ldr	sl, .L1711+4
 	mov	ip, r8, asl #2
 	str	ip, [sp, #8]
-	b	.L1665
-.L1670:
-	ldr	r1, .L1673
-	movw	r2, #3918
+	b	.L1703
+.L1708:
+	ldr	r1, .L1711
+	movw	r2, #3922
 	ldr	ip, [sp, #8]
 	mov	r0, r6
-	ldr	r3, [sl, #-908]
+	ldr	r3, [sl, #-904]
 	ldrh	fp, [r1, r2]
 	ldr	r3, [r3, ip]
 	mov	r1, fp
 	str	r3, [sp, #4]
 	bl	__aeabi_uidivmod
 	ldr	r3, [sp, #4]
-	ldr	r2, .L1673+4
+	ldr	r2, .L1711+4
 	uxth	r1, r1
 	str	r1, [sp, #12]
 	rsb	r5, r1, fp
@@ -14492,30 +14937,30 @@ FtlVendorPartWrite:
 	cmp	r5, r4
 	uxthhi	r5, r4
 	cmp	r3, #0
-	beq	.L1667
+	beq	.L1705
 	cmp	r5, fp
-	beq	.L1667
+	beq	.L1705
 	str	r3, [sp, #24]
 	mov	r1, #1
-	ldr	r3, [r2, #-956]
+	ldr	r3, [r2, #-952]
 	add	r0, sp, #20
 	mov	r2, r1
 	str	r3, [sp, #28]
 	mov	r3, #0
 	str	r3, [sp, #32]
 	bl	FlashReadPages
-	b	.L1668
-.L1667:
-	ldr	ip, .L1673
-	movw	r3, #3922
-	ldr	r0, [r2, #-956]
+	b	.L1706
+.L1705:
+	ldr	ip, .L1711
+	movw	r3, #3926
+	ldr	r0, [r2, #-952]
 	mov	r1, #0
 	ldrh	r2, [ip, r3]
 	bl	ftl_memset
-.L1668:
+.L1706:
 	ldr	r3, [sp, #12]
 	mov	fp, r5, asl #9
-	ldr	r0, [sl, #-956]
+	ldr	r0, [sl, #-952]
 	mov	r1, r9
 	mov	r2, fp
 	rsb	r4, r5, r4
@@ -14523,9 +14968,9 @@ FtlVendorPartWrite:
 	add	r6, r6, r5
 	bl	memcpy
 	mov	r1, r8
-	ldr	r0, .L1673+8
+	ldr	r0, .L1711+8
 	add	r8, r8, #1
-	ldr	r2, [sl, #-956]
+	ldr	r2, [sl, #-952]
 	add	r9, r9, fp
 	bl	FtlMapWritePage
 	ldr	ip, [sp, #8]
@@ -14533,19 +14978,19 @@ FtlVendorPartWrite:
 	str	ip, [sp, #8]
 	cmn	r0, #1
 	moveq	r7, r0
-.L1665:
+.L1703:
 	cmp	r4, #0
-	bne	.L1670
-.L1664:
+	bne	.L1708
+.L1702:
 	mov	r0, r7
 	add	sp, sp, #60
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1674:
+.L1712:
 	.align	2
-.L1673:
+.L1711:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR2+244
+	.word	.LANCHOR2+248
 	.fnend
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	2
@@ -14556,51 +15001,54 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L1677
-	ldr	r3, .L1677+4
-	ldr	r1, [r2, #-1712]
-	cmp	r1, r3
+	ldr	r3, .L1715
+	ldr	r2, .L1715+4
+	ldr	r1, [r3, #-1708]
+	cmp	r1, r2
 	bxne	lr
-	ldr	r3, .L1677+8
+	ldr	r2, .L1715+8
 	mov	r0, #0
 	mov	r1, #1
-	str	r3, [r2, #-1708]
-	ldr	r3, [r2, #-1816]
-	str	r3, [r2, #-1624]
-	ldr	r3, [r2, #-1812]
-	str	r3, [r2, #-1620]
-	ldr	r3, [r2, #-1820]
-	str	r3, [r2, #-1704]
-	ldr	r3, [r2, #-1832]
-	str	r3, [r2, #-1700]
-	ldr	r3, [r2, #-1840]
-	str	r3, [r2, #-1696]
-	ldr	r3, [r2, #-1824]
-	str	r3, [r2, #-1692]
-	ldr	r3, [r2, #-1796]
-	str	r3, [r2, #-1684]
-	ldr	r3, [r2, #-2080]
-	str	r3, [r2, #-1680]
-	ldr	r3, [r2, #-1836]
-	str	r3, [r2, #-1676]
-	ldr	r3, [r2, #-1828]
-	str	r3, [r2, #-1672]
-	ldr	r3, [r2, #-1788]
-	str	r3, [r2, #-1668]
-	ldr	r3, [r2, #-1784]
-	str	r3, [r2, #-1664]
-	ldr	r3, [r2, #-1716]
-	str	r3, [r2, #-1652]
-	ldr	r3, [r2, #-1004]
-	str	r3, [r2, #-1648]
-	sub	r2, r2, #1712
+	str	r2, [r3, #-1704]
+	ldr	r2, [r3, #-1812]
+	str	r2, [r3, #-1620]
+	ldr	r2, [r3, #-1808]
+	str	r2, [r3, #-1616]
+	ldr	r2, [r3, #-1816]
+	str	r2, [r3, #-1700]
+	ldr	r2, [r3, #-1828]
+	str	r2, [r3, #-1696]
+	ldr	r2, [r3, #-1836]
+	str	r2, [r3, #-1692]
+	ldr	r2, [r3, #-1820]
+	str	r2, [r3, #-1688]
+	ldr	r2, [r3, #-1792]
+	str	r2, [r3, #-1680]
+	ldr	r2, .L1715+12
+	ldr	r2, [r2, #4052]
+	str	r2, [r3, #-1676]
+	ldr	r2, [r3, #-1832]
+	str	r2, [r3, #-1672]
+	ldr	r2, [r3, #-1824]
+	str	r2, [r3, #-1668]
+	ldr	r2, [r3, #-1784]
+	str	r2, [r3, #-1664]
+	ldr	r2, [r3, #-1780]
+	str	r2, [r3, #-1660]
+	ldr	r2, [r3, #-1712]
+	str	r2, [r3, #-1648]
+	ldr	r2, [r3, #-1000]
+	str	r2, [r3, #-1644]
+	ldr	r2, .L1715+16
 	b	FtlVendorPartWrite
-.L1678:
+.L1716:
 	.align	2
-.L1677:
+.L1715:
 	.word	.LANCHOR2
 	.word	1179929683
 	.word	1342177352
+	.word	.LANCHOR0
+	.word	.LANCHOR2-1708
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	2
@@ -14612,42 +15060,42 @@ FtlEctTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L1686
-	ldr	r1, .L1686+4
-	ldr	r3, [r3, #3836]
+	ldr	r3, .L1724
+	ldr	r1, .L1724+4
+	ldr	r3, [r3, #3840]
 	cmp	r3, #0
 	moveq	r2, #32
-	beq	.L1680
-	ldr	r2, [r1, #-1784]
+	beq	.L1718
+	ldr	r2, [r1, #-1780]
 	cmp	r2, #29
 	movls	r2, #4
 	movhi	r2, #32
-.L1680:
-	mov	r3, #288
+.L1718:
+	mov	r3, #292
 	ldrh	r1, [r1, r3]
 	cmp	r1, #31
 	addls	r1, r1, #1
-	ldrls	r2, .L1686+4
+	ldrls	r2, .L1724+4
 	strlsh	r1, [r2, r3]	@ movhi
 	movls	r2, #1
 	cmp	r0, #0
-	ldr	r3, .L1686+4
-	bne	.L1682
-	ldr	r1, [r3, #-924]
+	ldr	r3, .L1724+4
+	bne	.L1720
+	ldr	r1, [r3, #-920]
 	ldr	r0, [r1, #20]
 	ldr	r1, [r1, #16]
 	add	r2, r2, r0
 	cmp	r1, r2
-	bcc	.L1683
-.L1682:
-	ldr	r2, [r3, #-924]
+	bcc	.L1721
+.L1720:
+	ldr	r2, [r3, #-920]
 	mov	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L1686+8
+	ldr	r1, .L1724+8
 	str	r1, [r2, #0]
-	ldr	r1, .L1686+12
-	ldr	r2, [r3, #-924]
+	ldr	r1, .L1724+12
+	ldr	r2, [r3, #-920]
 	ldrh	r1, [r3, r1]
 	mov	r3, r1, asl #9
 	str	r3, [r2, #12]
@@ -14658,3204 +15106,2738 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1683:
+.L1721:
 	mov	r0, #0
 	ldmfd	sp!, {r3, pc}
-.L1687:
+.L1725:
 	.align	2
-.L1686:
+.L1724:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	1112818501
-	.word	-928
+	.word	-924
 	.fnend
 	.size	FtlEctTblFlush, .-FtlEctTblFlush
 	.align	2
-	.type	ftl_load_l2p_region, %function
-ftl_load_l2p_region:
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
-	mov	r5, r0
-	ldr	r4, .L1692
-	mov	r7, #12
-	ldr	r3, [r4, #-1036]
-	ldr	r6, [r3, r0, asl #2]
-	cmp	r6, #0
-	bne	.L1689
-	mul	r7, r7, r1
-	ldr	r3, [r4, #-1856]
-	ldr	r2, .L1692+4
-	mov	r1, #255
-	add	r3, r3, r7
-	ldr	r0, [r3, #8]
-	movw	r3, #3922
-	ldrh	r2, [r2, r3]
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r3, [r0, #16]
+	mov	r4, r0
+	ldr	r7, [r0, #24]
+	mov	r1, #0
+	ldrh	r8, [r0, #6]
+	mov	fp, #0
+	str	r3, [sp, #16]
+	ldrh	r3, [r0, #8]
+	mov	sl, r7
+	ldr	r9, [r0, #12]
+	mov	r2, r8, asl #2
+	mov	r0, r7
+	str	r3, [sp, #8]
 	bl	ftl_memset
-	ldr	r3, [r4, #-1856]
-	strh	r5, [r3, r7]	@ movhi
-	ldr	r3, [r4, #-1856]
-	add	r7, r3, r7
-	str	r6, [r7, #4]
-	b	.L1690
-.L1689:
-	mul	r7, r7, r1
-	ldr	r3, [r4, #-1856]
+	ldr	r3, .L1747
+	str	fp, [r4, #32]
+	str	fp, [r4, #28]
+	ldr	r2, [r3, #-960]
+	ldr	r5, [r3, #-936]
+	str	r2, [r3, #188]
+	str	r5, [r3, #192]
+	mvn	r3, #0
+	strh	r3, [r4, #0]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #1
+	str	r3, [r4, #36]
+	ldr	r3, [sp, #8]
+	sub	r3, r3, #1
+	str	r3, [sp, #12]
+	ldr	r3, .L1747+4
+	b	.L1727
+.L1741:
+	ldr	r0, [sp, #12]
+	cmp	r2, r0
+	mov	r2, r2, asl #1
+	bne	.L1728
+	ldrh	r0, [r9, r2]
+	mov	r1, #1
+	add	ip, r9, r2
+	str	ip, [sp, #4]
+	bl	FtlGetLastWrittenPage
+	ldr	r1, [sp, #12]
+	ldr	r2, [sp, #16]
+	mov	r7, sl
+	strh	fp, [r4, #0]	@ movhi
+	mov	sl, #0
+	ldr	ip, [sp, #4]
+	ldr	r6, .L1747
+	mov	fp, ip
+	uxth	r0, r0
+	add	r3, r0, #1
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r3, [r2, r1, asl #2]
+	sxth	r9, r0
+	add	r9, r9, #1
+	str	r3, [r4, #28]
+	b	.L1729
+.L1732:
+	ldrh	r2, [fp, #0]
 	mov	r1, #1
-	add	r0, r4, #176
+	ldr	r0, .L1747+8
+	orr	r3, r3, r2, asl #10
 	mov	r2, r1
-	str	r6, [r4, #180]
-	add	r3, r3, r7
-	ldr	r3, [r3, #8]
-	str	r3, [r4, #184]
-	ldr	r3, [r4, #-940]
-	str	r3, [r4, #188]
+	str	r3, [r6, #184]
 	bl	FlashReadPages
-	ldr	r3, [r4, #176]
-	cmp	r3, #256
-	bne	.L1691
-	mov	r2, r6
-	mov	r1, r5
-	ldr	r0, .L1692+8
-	mov	r6, r6, lsr #10
-	bl	printk
-	ldr	r3, .L1692+12
-	ldr	r0, .L1692+16
-	mov	r1, r5
-	strh	r6, [r4, r3]	@ movhi
-	ldr	r3, [r4, #-1856]
-	add	r3, r3, r7
-	ldr	r2, [r3, #8]
-	bl	FtlMapWritePage
-.L1691:
-	ldr	r3, .L1692
-	mov	r1, #0
-	ldr	r3, [r3, #-1856]
-	add	r2, r3, r7
-	str	r1, [r2, #4]
-	strh	r5, [r3, r7]	@ movhi
-.L1690:
+	ldr	r3, [r6, #180]
+	cmn	r3, #1
+	ldreqh	r3, [fp, #0]
+	streqh	r3, [r4, #40]	@ movhi
+	beq	.L1731
+	ldrh	r3, [r5, #8]
+	cmp	r3, r8
+	bcs	.L1731
+	ldrh	r2, [r4, #4]
+	ldrh	r1, [r5, #0]
+	cmp	r1, r2
+	ldreq	r2, [r6, #184]
+	streq	r2, [r7, r3, asl #2]
+.L1731:
+	add	sl, sl, #1
+	uxth	sl, sl
+.L1729:
+	sxth	r3, sl
+	cmp	r3, r9
+	blt	.L1732
+	b	.L1733
+.L1728:
+	ldr	r6, .L1747
+	movw	r7, #3918
+	add	r0, r9, r2
+	str	r0, [sp, #20]
+	add	r0, r6, #180
+	ldr	r1, [r6, #-960]
+	str	r1, [r6, #188]
+	ldrh	r1, [r9, r2]
+	ldrh	r2, [r3, r7]
+	sub	r2, r2, #1
+	orr	r2, r2, r1, asl #10
+	mov	r1, #1
+	str	r2, [r6, #184]
+	mov	r2, r1
+	str	r3, [sp, #4]
+	bl	FlashReadPages
+	ldr	r2, [r6, #180]
+	ldr	r3, [sp, #4]
+	cmn	r2, #1
+	beq	.L1744
+	ldrh	r1, [r5, #0]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	bne	.L1744
+	ldrh	r1, [r5, #8]
+	movw	r2, #64245
+	cmp	r1, r2
+	bne	.L1744
+	b	.L1745
+.L1737:
+	ldr	r0, [r6, #-960]
+	mov	ip, r1, asl #3
+	add	r2, r2, #1
+	ldr	r1, [r0, r1, asl #3]
+	uxth	r2, r2
+	uxth	r1, r1
+	cmp	r1, r8
+	addcc	r0, r0, ip
+	ldrcc	r0, [r0, #4]
+	strcc	r0, [sl, r1, asl #2]
+	b	.L1735
+.L1745:
+	mov	r2, #0
+.L1735:
+	ldrh	r0, [r3, r7]
+	sxth	r1, r2
+	sub	r0, r0, #1
+	cmp	r1, r0
+	blt	.L1737
+	b	.L1738
+.L1740:
+	ldr	r0, [sp, #20]
+	ldrh	r1, [r0, #0]
+	ldr	r0, .L1747+8
+	orr	r2, r2, r1, asl #10
+	mov	r1, #1
+	str	r2, [r7, #184]
+	mov	r2, r1
+	str	r3, [sp, #4]
+	bl	FlashReadPages
+	ldr	r2, [r7, #180]
+	ldr	r3, [sp, #4]
+	cmn	r2, #1
+	beq	.L1739
+	ldrh	r2, [r5, #8]
+	cmp	r2, r8
+	bcs	.L1739
+	ldrh	r1, [r4, #4]
+	ldrh	r0, [r5, #0]
+	cmp	r0, r1
+	ldreq	r1, [r7, #184]
+	streq	r1, [sl, r2, asl #2]
+.L1739:
+	add	r6, r6, #1
+	uxth	r6, r6
+	b	.L1746
+.L1744:
+	ldr	r7, .L1747
+	mov	r6, #0
+.L1746:
+	movw	r1, #3918
+	sxth	r2, r6
+	ldrh	r1, [r3, r1]
+	cmp	r2, r1
+	blt	.L1740
+.L1738:
+	add	fp, fp, #1
+	uxth	fp, fp
+.L1727:
+	ldr	r1, [sp, #8]
+	sxth	r2, fp
+	cmp	r2, r1
+	blt	.L1741
+.L1733:
+	mov	r0, r4
+	bl	ftl_free_no_use_map_blk
+	ldr	r1, .L1747+4
+	movw	r3, #3918
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r1, r3]
+	cmp	r2, r3
+	bne	.L1742
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1742:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, r4
+	bl	ftl_map_blk_gc
 	mov	r0, #0
-	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1693:
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1748:
 	.align	2
-.L1692:
+.L1747:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC123
-	.word	-1052
-	.word	.LANCHOR2-1092
+	.word	.LANCHOR2+180
 	.fnend
-	.size	ftl_load_l2p_region, .-ftl_load_l2p_region
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	2
-	.global	log2phys
-	.type	log2phys, %function
-log2phys:
+	.global	FtlLoadMapInfo
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
-	.save {r3, r4, r5, r6, r7, r8, sl, lr}
-	mov	r8, r2
-	ldr	r3, .L1703
-	mov	r2, #3920
-	mov	r4, r1
-	ldrh	r7, [r3, r2]
-	mvn	r2, #0
-	add	r7, r7, #7
-	mov	r6, r0, lsr r7
-	bic	r7, r0, r2, asl r7
-	movw	r2, #3950
-	ldrh	r2, [r3, r2]
-	uxth	r6, r6
-	ldr	r3, .L1703+4
-	uxth	r7, r7
-	ldr	sl, [r3, #-1856]
-	mov	r3, #0
-	mov	r5, r3
-	b	.L1695
-.L1701:
-	add	r3, r3, #12
-	add	r1, sl, r3
-	ldrh	r1, [r1, #-12]
-	cmp	r1, r6
-	bne	.L1696
-.L1697:
-	cmp	r8, #0
-	ldr	r3, .L1703+4
-	mov	r2, #12
-	bne	.L1698
-	ldr	r3, [r3, #-1856]
-	mla	r2, r2, r5, r3
-	ldr	r3, [r2, #8]
-	ldr	r3, [r3, r7, asl #2]
-	str	r3, [r4, #0]
-	b	.L1699
-.L1698:
-	mul	r2, r2, r5
-	ldr	r1, [r3, #-1856]
-	ldr	r0, [r4, #0]
-	add	r1, r1, r2
-	ldr	r1, [r1, #8]
-	str	r0, [r1, r7, asl #2]
-	ldr	r1, [r3, #-1856]
-	add	r2, r1, r2
-	ldr	r1, [r2, #4]
-	orr	r1, r1, #-2147483648
-	str	r1, [r2, #4]
-	ldr	r2, .L1703+8
-	strh	r6, [r3, r2]	@ movhi
-.L1699:
-	ldr	r3, .L1703+4
-	mov	r2, #12
-	mov	r0, #0
-	ldr	r3, [r3, #-1856]
-	mla	r5, r2, r5, r3
-	ldr	r3, [r5, #4]
-	cmn	r3, #1
-	addne	r3, r3, #1
-	strne	r3, [r5, #4]
-	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L1696:
-	add	r5, r5, #1
-	uxth	r5, r5
-.L1695:
-	cmp	r5, r2
-	bne	.L1701
-	bl	select_l2p_ram_region
-	mov	r3, #12
-	mul	r3, r3, r0
-	mov	r5, r0
-	add	r2, sl, r3
-	ldrh	r1, [sl, r3]
-	movw	r3, #65535
-	cmp	r1, r3
-	beq	.L1702
-	ldr	r3, [r2, #4]
-	cmp	r3, #0
-	bge	.L1702
-	bl	flush_l2p_region
-.L1702:
-	mov	r0, r6
-	mov	r1, r5
-	bl	ftl_load_l2p_region
-	b	.L1697
-.L1704:
-	.align	2
-.L1703:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	-1852
-	.fnend
-	.size	log2phys, .-log2phys
-	.align	2
-	.global	FtlReUsePrevPpa
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
-	.save {r0, r1, r2, r4, r5, r6, r7, lr}
-	mov	r7, r0
-	ubfx	r0, r1, #10, #16
-	str	r1, [sp, #4]
-	bl	P2V_block_in_plane
-	ldr	r3, .L1711
-	ldr	r1, [r3, #-2020]
-	mov	r5, r0, asl #1
-	ldrh	r2, [r1, r5]
-	cmp	r2, #0
-	addne	r2, r2, #1
-	strneh	r2, [r1, r5]	@ movhi
-	bne	.L1707
-	ldr	r4, [r3, #-2008]
-	cmp	r4, #0
-	beq	.L1707
-	ldr	r1, .L1711+4
-	mov	ip, #6
-	ldrh	lr, [r3, r1]
-	ldr	r3, [r3, #-2028]
-	ldr	r1, .L1711+8
-	rsb	r4, r3, r4
-	mov	r4, r4, asr #1
-	mul	r4, r1, r4
-	movw	r1, #65535
-	uxth	r4, r4
-	b	.L1708
-.L1710:
-	cmp	r4, r0
-	bne	.L1709
-	mov	r1, r4
-	ldr	r0, .L1711+12
-	bl	List_remove_node
-	ldr	r6, .L1711
-	ldr	r3, .L1711+4
-	mov	r0, r4
-	ldrh	r2, [r6, r3]
-	sub	r2, r2, #1
-	strh	r2, [r6, r3]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r3, [r6, #-2020]
-	ldrh	r2, [r3, r5]
-	add	r2, r2, #1
-	strh	r2, [r3, r5]	@ movhi
-	b	.L1707
-.L1709:
-	mul	r4, ip, r4
-	ldrh	r4, [r3, r4]
-	cmp	r4, r1
-	beq	.L1707
-	add	r2, r2, #1
-	uxth	r2, r2
-.L1708:
-	cmp	r2, lr
-	bne	.L1710
-.L1707:
-	mov	r0, r7
-	add	r1, sp, #4
-	mov	r2, #1
-	bl	log2phys
-	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
-.L1712:
-	.align	2
-.L1711:
-	.word	.LANCHOR2
-	.word	-2004
-	.word	-1431655765
-	.word	.LANCHOR2-2008
-	.fnend
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
-	.align	2
-	.type	FtlReadRefresh.part.15, %function
-FtlReadRefresh.part.15:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 40
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	.pad #40
-	sub	sp, sp, #40
-	ldr	r4, .L1721
-	ldr	r6, .L1721+4
-	ldr	r2, [r4, #-1628]
-	ldr	r3, [r6, #3972]
-	cmp	r2, r3
-	bcs	.L1714
-	mov	r5, #2048
-.L1717:
-	ldr	r0, [r4, #-1628]
-	ldr	r3, [r6, #3972]
-	cmp	r0, r3
-	bcs	.L1719
-	mov	r1, sp
-	mov	r2, #0
-	bl	log2phys
-	ldr	r0, [sp, #0]
-	ldr	r3, [r4, #-1628]
-	cmn	r0, #1
-	add	r3, r3, #1
-	str	r3, [r4, #-1628]
-	beq	.L1716
-	str	r0, [sp, #8]
-	add	r0, sp, #40
-	mov	r2, #0
-	mov	r1, #1
-	str	r2, [r0, #-36]!
-	str	r3, [sp, #20]
-	str	r2, [sp, #12]
-	str	r2, [sp, #16]
-	bl	FlashReadPages
-	ldr	r3, [sp, #4]
-	cmp	r3, #256
-	bne	.L1719
-	ldr	r0, [sp, #0]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-	b	.L1719
-.L1716:
-	subs	r5, r5, #1
-	bne	.L1717
-	b	.L1715
-.L1714:
-	ldr	r3, [r4, #-1840]
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	FtlL2PDataInit
+	ldr	r0, .L1750
+	bl	FtlMapTblRecovery
 	mov	r0, #0
-	str	r0, [r4, #-1632]
-	str	r0, [r4, #-1628]
-	str	r3, [r4, #-1636]
-	b	.L1715
-.L1719:
-	mvn	r0, #0
-.L1715:
-	add	sp, sp, #40
-	ldmfd	sp!, {r4, r5, r6, pc}
-.L1722:
+	ldmfd	sp!, {r3, pc}
+.L1751:
 	.align	2
-.L1721:
-	.word	.LANCHOR2
-	.word	.LANCHOR0
+.L1750:
+	.word	.LANCHOR2-1088
 	.fnend
-	.size	FtlReadRefresh.part.15, .-FtlReadRefresh.part.15
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
 	.align	2
-	.global	FtlReadRefresh
-	.type	FtlReadRefresh, %function
-FtlReadRefresh:
+	.global	FtlLoadVonderInfo
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r3, .L1730
-	ldr	r2, [r3, #-1632]
-	cmp	r2, #0
-	beq	.L1724
-	b	FtlReadRefresh.part.15
-.L1724:
-	ldr	r2, .L1730+4
-	ldr	r0, [r3, #-1788]
-	ldr	r1, [r2, #3836]
-	ldrb	r2, [r2, #928]	@ zero_extendqisi2
-	cmp	r2, #0
-	ldr	r2, [r3, #-1840]
-	addeq	r0, r1, r0, lsr #10
-	moveq	r1, #33554432
-	movne	r0, #4194304
-	moveq	r0, r1, asr r0
-	ldr	r1, [r3, #-1636]
-	add	r3, r2, #1048576
-	cmp	r1, r3
-	bhi	.L1726
-	add	r1, r0, r1
-	cmp	r1, r2
-	bcc	.L1726
-	ldr	r3, .L1730
-	ldrb	r3, [r3, #-2048]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1727
-.L1726:
-	ldr	r3, .L1730
-	mov	r1, #1
-	str	r2, [r3, #-1636]
-	str	r1, [r3, #-1632]
-	mov	r1, #0
-	str	r1, [r3, #-1628]
-.L1727:
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	mov	r2, #3936
+	ldr	r3, .L1753
+	ldr	r0, .L1753+4
+	ldrh	r1, [r3, r2]
+	movw	r2, #258
+	strh	r1, [r0, r2]	@ movhi
+	ldr	r2, .L1753+8
+	strh	r2, [r0, #252]	@ movhi
+	movw	r2, #3962
+	ldrh	r1, [r3, r2]
+	mov	r2, #256
+	strh	r1, [r0, r2]	@ movhi
+	movw	r2, #3938
+	ldrh	r2, [r3, r2]
+	ldr	r3, [r3, #3964]
+	strh	r2, [r0, #254]	@ movhi
+	mvn	r2, #0
+	str	r3, [r0, #260]
+	ldr	r3, [r0, #-908]
+	str	r3, [r0, #264]
+	ldr	r3, [r0, #-912]
+	str	r3, [r0, #268]
+	ldr	r3, [r0, #-904]
+	str	r3, [r0, #272]
+	mov	r3, #288
+	strh	r2, [r0, r3]	@ movhi
+	add	r0, r0, #248
+	bl	FtlMapTblRecovery
 	mov	r0, #0
-	bx	lr
-.L1731:
+	ldmfd	sp!, {r3, pc}
+.L1754:
 	.align	2
-.L1730:
-	.word	.LANCHOR2
+.L1753:
 	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-3962
 	.fnend
-	.size	FtlReadRefresh, .-FtlReadRefresh
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
 	.align	2
-	.global	FtlMapTblRecovery
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
+	.global	FlashLoadFactorBbt
+	.type	FlashLoadFactorBbt, %function
+FlashLoadFactorBbt:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 48
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.pad #36
-	sub	sp, sp, #36
-	ldr	r3, [r0, #16]
-	mov	r4, r0
-	ldrh	r8, [r0, #6]
+	movw	r2, #3062
+	ldr	r9, .L1764
+	movw	r3, #3060
+	ldr	r4, .L1764+4
+	.pad #52
+	sub	sp, sp, #52
 	mov	r1, #0
-	ldr	fp, [r0, #24]
-	mov	r9, #0
-	str	r3, [sp, #24]
-	ldrh	r3, [r0, #8]
-	mov	r2, r8, asl #2
-	ldr	r7, [r0, #12]
-	mov	r0, fp
-	str	r3, [sp, #16]
+	mvn	r7, #0
+	ldrh	r3, [r9, r3]
+	add	r0, r4, #232
+	ldrh	r8, [r9, r2]
+	mov	r2, #16
+	mov	r6, #0
+	mul	r8, r8, r3
 	bl	ftl_memset
-	ldr	r3, .L1767
-	mov	sl, r7
-	str	r9, [r4, #32]
-	str	r9, [r4, #28]
-	ldr	r2, [r3, #-964]
-	ldr	r5, [r3, #-940]
-	str	r2, [r3, #184]
-	str	r5, [r3, #188]
-	mvn	r3, #0
-	strh	r3, [r4, #0]	@ movhi
-	strh	r3, [r4, #2]	@ movhi
-	mov	r3, #1
-	str	r3, [r4, #36]
-	ldr	r3, [sp, #16]
-	sub	r3, r3, #1
-	str	r3, [sp, #20]
-	ldr	r3, .L1767+4
-	b	.L1733
-.L1747:
-	ldr	r0, [sp, #20]
-	cmp	r2, r0
-	mov	r2, r2, asl #1
-	bne	.L1734
-	ldrh	r0, [sl, r2]
-	mov	r1, #1
-	add	r3, sl, r2
-	str	r3, [sp, #16]
-	bl	FtlGetLastWrittenPage
-	ldr	r1, [sp, #20]
-	ldr	r2, [sp, #24]
-	mov	r7, sl
-	strh	r9, [r4, #0]	@ movhi
-	mov	sl, #0
-	ldr	r6, .L1767
-	uxth	r0, r0
-	add	r3, r0, #1
-	strh	r3, [r4, #2]	@ movhi
-	ldr	r3, [r2, r1, asl #2]
-	sxth	r9, r0
-	add	r9, r9, #1
-	str	r3, [r4, #28]
-	b	.L1735
-.L1738:
-	ldr	r0, [sp, #16]
-	mov	r1, #1
-	ldrh	r2, [r0, #0]
-	ldr	r0, .L1767+8
-	orr	r3, r3, r2, asl #10
-	mov	r2, r1
-	str	r3, [r6, #180]
-	bl	FlashReadPages
-	ldr	r3, [r6, #176]
-	cmn	r3, #1
-	ldreq	r1, [sp, #16]
-	ldreqh	r3, [r1, #0]
-	streqh	r3, [r4, #40]	@ movhi
-	beq	.L1737
-	ldrh	r3, [r5, #8]
-	cmp	r3, r8
-	bcs	.L1737
-	ldrh	r2, [r4, #4]
-	ldrh	r1, [r5, #0]
-	cmp	r1, r2
-	ldreq	r2, [r6, #180]
-	streq	r2, [fp, r3, asl #2]
-.L1737:
-	add	sl, sl, #1
-	uxth	sl, sl
-.L1735:
-	sxth	r3, sl
-	cmp	r3, r9
-	blt	.L1738
-	b	.L1739
-.L1734:
-	ldr	r6, .L1767
-	movw	r7, #3914
-	add	r0, sl, r2
-	str	r0, [sp, #28]
-	add	r0, r6, #176
-	ldr	r1, [r6, #-964]
-	str	r1, [r6, #184]
-	ldrh	r1, [sl, r2]
-	ldrh	r2, [r3, r7]
-	sub	r2, r2, #1
-	orr	r2, r2, r1, asl #10
+	ldr	r3, [r4, #228]
+	str	r6, [sp, #20]
+	mov	r4, r6
+	str	r3, [sp, #24]
+	uxth	r8, r8
+	add	r3, r8, r7
+	uxth	r3, r3
+	str	r3, [sp, #4]
+	b	.L1756
+.L1762:
+	ldr	r5, [sp, #4]
+	sub	r3, r8, #12
+	mul	fp, r8, r4
+	ldr	sl, .L1764+4
+	b	.L1757
+.L1760:
+	add	r2, fp, r5
 	mov	r1, #1
-	str	r2, [r6, #180]
+	add	r0, sp, #12
+	str	r3, [sp, #0]
+	mov	r2, r2, asl #10
+	str	r2, [sp, #16]
 	mov	r2, r1
-	str	r3, [sp, #12]
 	bl	FlashReadPages
-	ldr	r2, [r6, #176]
-	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #12]
+	ldr	r3, [sp, #0]
 	cmn	r2, #1
-	beq	.L1760
-	ldrh	r1, [r5, #0]
-	ldrh	r2, [r4, #4]
-	cmp	r1, r2
-	bne	.L1760
-	ldrh	r1, [r5, #8]
-	movw	r2, #64245
+	beq	.L1758
+	ldr	r2, [sl, #228]
+	ldrh	r1, [r2, #0]
+	movw	r2, #61664
 	cmp	r1, r2
-	bne	.L1760
-	b	.L1761
-.L1743:
-	ldr	r0, [r6, #-964]
-	mov	ip, r1, asl #3
-	add	r2, r2, #1
-	ldr	r1, [r0, r1, asl #3]
-	uxth	r2, r2
-	uxth	r1, r1
-	cmp	r1, r8
-	addcc	r0, r0, ip
-	ldrcc	r0, [r0, #4]
-	strcc	r0, [fp, r1, asl #2]
-	b	.L1741
-.L1761:
-	mov	r2, #0
-.L1741:
-	ldrh	r0, [r3, r7]
-	sxth	r1, r2
-	sub	r0, r0, #1
-	cmp	r1, r0
-	blt	.L1743
-	b	.L1744
-.L1746:
-	ldr	r0, [sp, #28]
-	ldrh	r1, [r0, #0]
-	ldr	r0, .L1767+8
-	orr	r2, r2, r1, asl #10
-	mov	r1, #1
-	str	r2, [r7, #180]
-	mov	r2, r1
-	str	r3, [sp, #12]
-	bl	FlashReadPages
-	ldr	r2, [r7, #176]
-	ldr	r3, [sp, #12]
-	cmn	r2, #1
-	beq	.L1745
-	ldrh	r2, [r5, #8]
-	cmp	r2, r8
-	bcs	.L1745
-	ldrh	r1, [r4, #4]
-	ldrh	r0, [r5, #0]
-	cmp	r0, r1
-	ldreq	r1, [r7, #180]
-	streq	r1, [fp, r2, asl #2]
-.L1745:
+	bne	.L1758
+	ldr	r0, .L1764+8
+	mov	r1, r4
+	mov	r2, r5
 	add	r6, r6, #1
-	uxth	r6, r6
-	b	.L1763
-.L1760:
-	ldr	r7, .L1767
-	mov	r6, #0
-.L1763:
-	movw	r1, #3914
-	sxth	r2, r6
-	ldrh	r1, [r3, r1]
-	cmp	r2, r1
-	blt	.L1746
-.L1744:
-	add	r9, r9, #1
-	uxth	r9, r9
-.L1733:
-	ldr	r1, [sp, #16]
-	sxth	r2, r9
-	cmp	r2, r1
-	blt	.L1747
-	mov	r7, sl
-.L1739:
-	ldr	r3, .L1767+12
-	cmp	r4, r3
-	bne	.L1748
-	ldr	r9, .L1767+4
-	movw	r3, #3956
-	ldrh	r3, [r9, r3]
-	cmp	r3, #0
-	bne	.L1762
-	b	.L1748
-.L1756:
-	ldr	r3, [r5, #-904]
-	mov	r4, r8, asl #2
-	ldr	r2, [r3, r8, asl #2]
-	sub	r1, r2, #1
-	cmn	r1, #3
-	bhi	.L1750
-	ldr	r1, [r5, #-1036]
-	ldr	r1, [r1, r8, asl #2]
-	cmp	r2, r1
-	beq	.L1750
-	ldr	r2, [r5, #-964]
-	mov	r1, #1
-	ldr	r6, [r5, #-940]
-	ldr	r0, .L1767+8
-	str	r2, [r5, #184]
-	mov	r2, r1
-	str	r6, [r5, #188]
-	ldr	r3, [r3, r4]
-	str	r3, [r5, #180]
-	bl	FlashReadPages
-	ldr	r3, [r5, #176]
-	cmn	r3, #1
-	beq	.L1750
-	ldr	r3, .L1767+16
-	ldrh	r2, [r6, #0]
-	ldrh	r3, [r5, r3]
-	cmp	r2, r3
-	bne	.L1750
-	ldr	r3, [r5, #-1036]
-	ldr	fp, [r6, #4]
-	ldr	r2, [r3, r4]
-	str	r2, [r5, #180]
-	ldr	r3, [r3, r4]
-	cmp	r3, #0
-	streq	r3, [r6, #4]
-	beq	.L1752
-	mov	r1, #1
-	ldr	r0, .L1767+8
-	mov	r2, r1
-	bl	FlashReadPages
-.L1752:
-	ldr	r1, [r6, #4]
-	cmp	fp, r1
-	bls	.L1750
-	ldr	r2, [r5, #-904]
-	ldr	r3, [r5, #-1036]
-	ldr	r0, .L1767+20
-	str	r1, [sp, #0]
-	ldr	r1, [r2, r4]
-	ldr	r2, [r3, r4]
-	mov	r3, fp
 	bl	printk
-	ldr	r3, [r5, #-904]
-	ldr	r2, [r3, r4]
-	ldr	r3, [r5, #-1036]
-	str	r2, [r3, r4]
-	mov	r2, #0
-	ldr	r3, [r5, #-904]
-	ldr	r0, [r3, r4]
-	ldr	r3, .L1767+24
-	ubfx	r0, r0, #10, #16
-	ldrh	r3, [r5, r3]
-	b	.L1753
-.L1754:
-	mov	r1, r1, asl #1
-	ldrh	r1, [r7, r1]
-	cmp	r1, r0
-	beq	.L1750
-	add	r2, r2, #1
-	uxth	r2, r2
-.L1753:
-	sxth	r1, r2
-	cmp	r1, r3
-	blt	.L1754
-	b	.L1765
-.L1766:
-	mov	r3, r3, asl #1
-	strh	r0, [r7, r3]	@ movhi
-	ldr	r3, .L1767+24
-	ldrh	r2, [r5, r3]
-	add	r2, r2, #1
-	strh	r2, [r5, r3]	@ movhi
-	bl	remove_from_free_sys_Queue
-.L1750:
-	add	r8, r8, #1
-	b	.L1749
-.L1762:
-	ldr	r5, .L1767
-	mov	r8, #0
-	mov	sl, r4
-.L1749:
-	movw	r2, #3948
-	ldrh	r3, [r9, r2]
-	cmp	r8, r3
-	bcc	.L1756
-	mov	r4, sl
-.L1748:
-	mov	r0, r4
-	bl	ftl_free_no_use_map_blk
-	ldr	r1, .L1767+4
-	movw	r3, #3914
-	ldrh	r2, [r4, #2]
-	ldrh	r3, [r1, r3]
-	cmp	r2, r3
-	bne	.L1757
-	mov	r0, r4
-	bl	ftl_map_blk_alloc_new_blk
+	ldr	r3, .L1764+4
+	uxth	r6, r6
+	add	r3, r3, r4, asl #1
+	strh	r5, [r3, #232]	@ movhi
+	b	.L1759
+.L1758:
+	sub	r5, r5, #1
+	uxth	r5, r5
 .L1757:
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, r4
-	bl	ftl_map_blk_gc
-	mov	r0, #0
-	add	sp, sp, #36
+	cmp	r5, r3
+	bgt	.L1760
+.L1759:
+	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
+	add	r4, r4, #1
+	cmp	r3, r6
+	uxtb	r4, r4
+	moveq	r7, #0
+.L1756:
+	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
+	cmp	r3, r4
+	bhi	.L1762
+	mov	r0, r7
+	add	sp, sp, #52
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 .L1765:
-	ldr	r2, [r9, #3940]
-	cmp	r3, r2
-	bcs	.L1750
-	b	.L1766
-.L1768:
 	.align	2
-.L1767:
-	.word	.LANCHOR2
+.L1764:
 	.word	.LANCHOR0
-	.word	.LANCHOR2+176
-	.word	.LANCHOR2-1092
-	.word	-1088
-	.word	.LC124
-	.word	-1048
-	.fnend
-	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
-	.align	2
-	.global	FtlLoadMapInfo
-	.type	FtlLoadMapInfo, %function
-FtlLoadMapInfo:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	bl	FtlL2PDataInit
-	ldr	r0, .L1770
-	bl	FtlMapTblRecovery
-	mov	r0, #0
-	ldmfd	sp!, {r3, pc}
-.L1771:
-	.align	2
-.L1770:
-	.word	.LANCHOR2-1092
+	.word	.LANCHOR2
+	.word	.LC130
 	.fnend
-	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
 	.align	2
-	.global	FtlLoadVonderInfo
-	.type	FtlLoadVonderInfo, %function
-FtlLoadVonderInfo:
+	.global	dump_map_info
+	.type	dump_map_info, %function
+dump_map_info:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	movw	r2, #3932
-	ldr	r3, .L1773
-	ldr	r0, .L1773+4
-	ldrh	r2, [r3, r2]
-	strh	r2, [r0, #254]	@ movhi
-	ldr	r2, .L1773+8
-	strh	r2, [r0, #248]	@ movhi
-	movw	r2, #3958
-	ldrh	r2, [r3, r2]
-	strh	r2, [r0, #252]	@ movhi
-	movw	r2, #3934
-	ldrh	r2, [r3, r2]
-	ldr	r3, [r3, #3960]
-	strh	r2, [r0, #250]	@ movhi
-	mvn	r2, #0
-	str	r3, [r0, #256]
-	ldr	r3, [r0, #-912]
-	str	r3, [r0, #260]
-	ldr	r3, [r0, #-916]
-	str	r3, [r0, #264]
-	ldr	r3, [r0, #-908]
-	str	r3, [r0, #268]
-	mov	r3, #284
-	strh	r2, [r0, r3]	@ movhi
-	add	r0, r0, #244
-	bl	FtlMapTblRecovery
-	mov	r0, #0
-	ldmfd	sp!, {r3, pc}
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r3, #3856
+	ldr	r5, .L1779
+	.pad #36
+	sub	sp, sp, #36
+	ldrh	r6, [r5, r3]
+	b	.L1767
+.L1769:
+	add	r3, r5, r7
+	mov	r1, r6
+	ldrb	r0, [r3, #3874]	@ zero_extendqisi2
+	bl	V2P_block
+	str	r0, [sp, #28]
+	bl	FtlBbmIsBadBlock
+	ldr	r3, [sp, #28]
+	cmp	r0, #0
+	bne	.L1768
+	ldr	r2, [r8, #-972]
+	mov	r3, r3, asl #10
+	mla	r2, r9, r4, r2
+	str	r3, [r2, #4]
+	ldr	r3, [r8, #-1172]
+	str	r3, [r2, #8]
+	ldrh	r3, [r5, sl]
+	mul	r3, r3, r4
+	add	r4, r4, #1
+	uxth	r4, r4
+	add	r1, r3, #3
+	cmp	r3, #0
+	movlt	r3, r1
+	ldr	r1, [r8, #-1168]
+	bic	r3, r3, #3
+	add	r3, r1, r3
+	str	r3, [r2, #12]
+.L1768:
+	add	r7, r7, #1
+	uxth	r7, r7
+	b	.L1772
+.L1777:
+	ldr	r8, .L1779+4
+	mov	r4, #0
+	mov	r7, r4
+	movw	fp, #3848
+	mov	r9, #36
+	movw	sl, #3928
+.L1772:
+	ldrh	r3, [r5, fp]
+	cmp	r3, r7
+	bhi	.L1769
+	cmp	r4, #0
+	beq	.L1770
+	ldr	sl, .L1779+4
+	mov	r1, r4
+	mov	r2, #1
+	mov	r7, #0
+	mov	r8, r7
+	ldr	r0, [sl, #-972]
+	bl	FlashReadPages
+.L1771:
+	ldr	r1, [sl, #-972]
+	add	r8, r8, #1
+	add	r1, r1, r7
+	uxth	r8, r8
+	add	r7, r7, #36
+	ldr	r3, [r1, #12]
+	ldr	r2, [r1, #4]
+	ldr	r1, [r1, #8]
+	ldr	r0, [r3, #4]
+	str	r0, [sp, #0]
+	ldr	r0, [r3, #8]
+	str	r0, [sp, #4]
+	ldr	r0, [r3, #12]
+	str	r0, [sp, #8]
+	ldr	r0, [r1, #0]
+	str	r0, [sp, #12]
+	ldr	r1, [r1, #4]
+	ldr	r0, .L1779+8
+	str	r1, [sp, #16]
+	ubfx	r1, r2, #10, #16
+	ldr	r3, [r3, #0]
+	bl	printk
+	cmp	r8, r4
+	bne	.L1771
+.L1770:
+	add	r6, r6, #1
+	uxth	r6, r6
+.L1767:
+	movw	r2, #3858
+	ldrh	r3, [r5, r2]
+	cmp	r3, r6
+	bhi	.L1777
+	mov	r5, #0
+	ldr	r4, .L1779+4
+	ldr	sl, .L1779+12
+	b	.L1773
 .L1774:
-	.align	2
+	ldr	r2, [r4, #-1040]
+	mov	r1, #1
+	ldr	r0, .L1779+16
+	add	r6, r6, #1
+	ldrh	r2, [r2, r7]
+	uxth	r6, r6
+	orr	r3, r3, r2, asl #10
+	mov	r2, r1
+	str	r3, [r4, #184]
+	bl	FlashReadPages
+	ldr	r3, [r4, #192]
+	ldr	r1, [r4, #-1040]
+	ldr	r2, [r4, #188]
+	ldr	r0, [r3, #0]
+	ldrh	r1, [r1, r7]
+	str	r0, [sp, #0]
+	ldr	r0, [r3, #4]
+	str	r0, [sp, #4]
+	ldr	r0, [r3, #8]
+	str	r0, [sp, #8]
+	ldr	r3, [r3, #12]
+	ldr	r0, .L1779+20
+	str	r3, [sp, #12]
+	ldr	r3, [r2, #0]
+	str	r3, [sp, #16]
+	ldr	r3, [r2, #4]
+	str	r3, [sp, #20]
+	ldr	r2, [r4, #180]
+	ldr	r3, [r4, #184]
+	bl	printk
+.L1776:
+	movw	r2, #3918
+	sxth	r3, r6
+	ldrh	r2, [r8, r2]
+	cmp	r3, r2
+	blt	.L1774
+	add	r5, r5, #1
+	uxth	r5, r5
 .L1773:
+	ldrh	r3, [r4, sl]
+	sxth	r7, r5
+	ldr	r6, .L1779+4
+	cmp	r7, r3
+	movlt	r7, r7, asl #1
+	movlt	r6, #0
+	ldrlt	r8, .L1779
+	blt	.L1776
+.L1775:
+	ldr	r4, .L1779
+	mov	r5, #3952
+	ldr	r1, [r6, #-1040]
+	mov	r2, #2
+	ldr	r0, .L1779+24
+	ldr	r3, [r4, #3944]
+	bl	rknand_print_hex
+	ldr	r1, [r6, #-1032]
+	ldrh	r3, [r4, r5]
+	mov	r2, #4
+	ldr	r0, .L1779+28
+	bl	rknand_print_hex
+	ldr	r0, .L1779+32
+	ldr	r1, [r6, #-900]
+	mov	r2, #4
+	ldrh	r3, [r4, r5]
+	add	sp, sp, #36
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	b	rknand_print_hex
+.L1780:
+	.align	2
+.L1779:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-3962
+	.word	.LC131
+	.word	-1044
+	.word	.LANCHOR2+180
+	.word	.LC107
+	.word	.LC132
+	.word	.LC133
+	.word	.LC134
 	.fnend
-	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.size	dump_map_info, .-dump_map_info
 	.align	2
-	.global	FtlRecoverySuperblock
-	.type	FtlRecoverySuperblock, %function
-FtlRecoverySuperblock:
+	.global	FtlDumpSysBlock
+	.type	FtlDumpSysBlock, %function
+FtlDumpSysBlock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 56
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r2, #65535
-	ldrh	r3, [r0, #0]
-	.pad #60
-	sub	sp, sp, #60
-	mov	r4, r0
-	cmp	r3, r2
-	beq	.L1776
-	ldrh	r3, [r0, #2]
-	ldr	r1, .L1865
-	ldrb	fp, [r0, #6]	@ zero_extendqisi2
-	str	r3, [sp, #12]
-	movw	r3, #3912
-	ldrh	r3, [r1, r3]
-	ldr	ip, [sp, #12]
-	str	fp, [sp, #24]
-	cmp	r3, ip
-	mov	r3, #0
-	streqh	r3, [r0, #4]	@ movhi
-	moveq	r2, r3	@ movhi
-	ldrneh	r0, [r0, #16]
-	bne	.L1778
-	b	.L1862
-.L1779:
-	add	r3, r3, #1
-	uxth	r3, r3
-	add	r1, r4, r3, asl #1
-	ldrh	r0, [r1, #16]
-.L1778:
-	cmp	r0, r2
-	beq	.L1779
-	ldrb	r1, [r4, #8]	@ zero_extendqisi2
-	cmp	r1, #1
-	bne	.L1780
-	bl	FtlGetLastWrittenPage
-	cmn	r0, #1
-	mov	r7, r0
-	beq	.L1781
-	ldr	r3, .L1865
-	ldrb	r2, [r3, #928]	@ zero_extendqisi2
-	cmp	r2, #0
-	bne	.L1855
-	add	r3, r3, r0, asl #1
-	movw	r2, #3076
-	ldrh	r8, [r3, r2]
-	b	.L1847
-.L1780:
-	mov	r1, #0
-	bl	FtlGetLastWrittenPage
-	cmn	r0, #1
-	mov	r7, r0
-	beq	.L1781
-.L1855:
-	mov	r8, r7
-.L1847:
-	ldr	r3, .L1865
-	movw	r2, #3844
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r6, r0
+	ldr	r4, .L1785
+	.pad #24
+	sub	sp, sp, #24
+	mov	r7, r0, asl #10
 	mov	r5, #0
-	str	r4, [sp, #32]
-	movw	ip, #65535
-	ldrh	r9, [r3, r2]
-	ldr	r2, .L1865+4
-	ldr	sl, [r2, #-976]
-	ldr	r6, [r2, #-1172]
-	movw	r2, #3924
-	ldrh	lr, [r3, r2]
-	mov	r2, r4
-	mov	r3, r5
-	b	.L1783
-.L1781:
-	mov	r3, #0
-	strh	r3, [r4, #2]	@ movhi
-	mov	r2, r3	@ movhi
-.L1862:
-	strb	r2, [r4, #6]
-	b	.L1776
-.L1785:
-	ldrh	r0, [r2, #16]
-	cmp	r0, ip
-	beq	.L1784
-	mov	fp, #36
-	orr	r0, r8, r0, asl #10
-	mla	r1, fp, r5, sl
-	str	r0, [r1, #4]
-	mov	r0, #0
-	str	r0, [r1, #8]
-	mul	r0, lr, r5
-	add	r5, r5, #1
-	uxth	r5, r5
-	add	fp, r0, #3
-	cmp	r0, #0
-	movlt	r0, fp
-	bic	r0, r0, #3
-	add	r0, r6, r0
-	str	r0, [r1, #12]
+	ldr	r8, .L1785+4
+	ldr	r3, [r4, #-960]
+	str	r3, [r4, #188]
+	ldr	r3, [r4, #-936]
+	str	r3, [r4, #192]
+	b	.L1782
 .L1784:
-	add	r3, r3, #1
-	add	r2, r2, #2
-	uxth	r3, r3
-.L1783:
-	cmp	r3, r9
-	bne	.L1785
-	ldrb	r3, [r4, #8]	@ zero_extendqisi2
-	cmp	r3, #1
-	movne	r3, #0
-	bne	.L1856
-	ldr	r3, .L1865
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	adds	r3, r3, #0
-	movne	r3, #1
-.L1856:
-	ldr	r6, .L1865+4
-	mov	r1, r5
-	str	r3, [sp, #20]
-	mov	sl, #0
-	ldr	r2, [sp, #20]
-	ldr	r0, [r6, #-976]
+	mov	r1, #1
+	ldr	r0, .L1785+8
+	mov	r2, r1
+	orr	r3, r3, r7
+	str	r3, [r4, #184]
 	bl	FlashReadPages
-	ldr	fp, [r6, #-1804]
-	movw	ip, #65535
-	str	ip, [sp, #4]
-	str	fp, [sp, #8]
-	b	.L1787
-.L1792:
-	mov	lr, #36
-	ldr	r1, [r6, #-976]
-	mul	r2, lr, sl
-	add	r3, r1, r2
-	ldr	r2, [r1, r2]
-	cmp	r2, #0
-	bne	.L1788
+	ldr	r3, [r4, #192]
+	mov	r1, r6
+	ldr	r0, .L1785+12
+	ldr	r2, [r3, #0]
+	str	r2, [sp, #0]
+	ldr	r2, [r3, #4]
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #8]
+	str	r2, [sp, #8]
 	ldr	r3, [r3, #12]
-	ldr	fp, [r3, #4]
-	cmn	fp, #1
-	beq	.L1789
-	ldr	r1, [r6, #-1804]
-	mov	r0, fp
-	str	r3, [sp, #0]
-	bl	ftl_cmp_data_ver
-	ldr	r3, [sp, #0]
-	cmp	r0, #0
-	addne	fp, fp, #1
-	strne	fp, [r6, #-1804]
-.L1789:
+	ldr	r2, [r4, #180]
+	str	r3, [sp, #12]
+	ldr	r3, [r4, #188]
 	ldr	r3, [r3, #0]
-	cmn	r3, #1
-	bne	.L1791
-	b	.L1790
-.L1788:
-	ldr	r1, [r3, #4]
-	movw	fp, #290
-	ldr	r0, .L1865+8
+	str	r3, [sp, #16]
+	ldr	r3, [r4, #184]
 	bl	printk
-	ldrh	r3, [r4, #0]
-	uxth	r2, r8
-	str	r2, [sp, #4]
-	strh	r3, [r6, fp]	@ movhi
-.L1791:
-	add	sl, sl, #1
-.L1787:
-	uxth	r9, sl
-	cmp	r9, r5
-	bcc	.L1792
-.L1790:
-	ldr	r3, .L1865+4
-	cmp	r9, r5
-	addeq	r7, r7, #1
-	uxthne	r7, r7
-	movne	r2, #36
-	ldrne	r3, [r3, #-976]
-	uxtheq	r7, r7
-	ldreq	r3, [r3, #-976]
-	mlane	r9, r2, r9, r3
-	ldreq	r0, [r3, #4]
-	ldrne	r0, [r9, #4]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_plane
-	ldrb	r2, [r4, #8]	@ zero_extendqisi2
-	ldr	r3, .L1865
-	cmp	r2, #1
-	str	r0, [sp, #16]
-	bne	.L1795
-	ldrb	r1, [r3, #928]	@ zero_extendqisi2
-	cmp	r1, #0
-	addeq	r7, r3, r7, asl #1
-	movweq	r1, #3076
-	ldreqh	r7, [r7, r1]
-.L1795:
-	movw	r1, #3912
-	ldr	ip, [sp, #12]
-	ldrh	r3, [r3, r1]
-	ldr	fp, [sp, #24]
-	cmp	r3, r7
-	streqh	r7, [r4, #2]	@ movhi
-	moveq	r3, #0
-	streqb	r3, [r4, #6]
-	streqh	r3, [r4, #4]	@ movhi
-	ldr	r3, [sp, #16]
-	cmp	r7, ip
-	cmpeq	r3, fp
-	beq	.L1863
-.L1797:
-	ldr	fp, [sp, #4]
-	movw	r3, #65535
-	ldr	ip, [sp, #8]
-	cmp	fp, r3
-	sub	r6, ip, #1
-	bne	.L1798
-	cmp	r2, #0
-	bne	.L1799
-.L1798:
-	ldr	r2, .L1865+4
-	uxth	r3, r8
-	ldr	ip, [sp, #12]
-	mvn	fp, #0
-	mov	sl, r3
-	mov	r9, fp
-	ldr	r1, [r2, #-1012]
-	ldr	r8, .L1865+4
-	cmn	r1, #1
-	streq	r6, [r2, #-1012]
-	ldr	r2, [r2, #-1012]
-	str	r2, [sp, #4]
-	add	r2, ip, #7
+	ldr	r3, [r4, #192]
+	ldr	r3, [r3, #0]
+	cmn	r3, #1
+	beq	.L1783
+	ldr	r0, .L1785+16
+	mov	r2, #4
+	ldr	r1, [r4, #-960]
+	mov	r3, #768
+	bl	rknand_print_hex
+.L1783:
+	add	r5, r5, #1
+	uxth	r5, r5
+.L1782:
+	movw	r2, #3918
+	sxth	r3, r5
+	ldrh	r2, [r8, r2]
 	cmp	r3, r2
-	subgt	r5, r3, #7
-	mov	r3, r7
-	ldrle	r5, [sp, #12]
-	mov	r7, r6
-	uxthgt	r5, r5
-	b	.L1802
-.L1804:
-	ldrh	r0, [r1, #16]
-	movw	lr, #65535
-	cmp	r0, lr
-	beq	.L1803
-	ldr	ip, [sp, #8]
-	mov	r3, #36
-	orr	r0, r5, r0, asl #10
-	mla	lr, r3, r6, ip
+	blt	.L1784
+	add	sp, sp, #24
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1786:
+	.align	2
+.L1785:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+180
+	.word	.LC135
+	.word	.LC136
+	.fnend
+	.size	FtlDumpSysBlock, .-FtlDumpSysBlock
+	.align	2
+	.global	FlashReadFacBbtData
+	.type	FlashReadFacBbtData, %function
+FlashReadFacBbtData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1797
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r6, r1
+	mov	r9, r2
+	movw	r1, #3062
+	movw	r2, #3060
+	ldrh	r8, [r3, r1]
+	ldrh	r2, [r3, r2]
+	.pad #40
+	sub	sp, sp, #40
+	ldr	r7, .L1797+4
+	mov	r4, r0
+	mul	r8, r8, r2
+	ldr	r3, [r7, #148]
+	str	r3, [sp, #12]
+	ldr	r3, [r7, #228]
+	uxth	r8, r8
+	sub	r5, r8, #1
+	mul	sl, r8, r6
+	str	r3, [sp, #16]
+	uxth	r5, r5
+	sub	r8, r8, #16
+	b	.L1788
+.L1794:
+	mov	r1, #1
+	add	r3, r5, sl
+	add	r0, sp, #4
+	mov	r2, r1
+	mov	r3, r3, asl #10
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	cmn	r3, #1
+	beq	.L1789
+	ldr	r3, [r7, #228]
+	ldrh	r2, [r3, #0]
+	movw	r3, #61664
+	cmp	r2, r3
+	bne	.L1789
+	cmp	r4, #0
+	moveq	r0, r4
+	beq	.L1790
+	cmp	r6, #0
+	ldreq	r3, .L1797+4
+	moveq	r0, #1
+	beq	.L1791
+	b	.L1792
+.L1793:
+	ldr	r2, [r3, #148]
+	ubfx	r1, r6, #5, #16
+	and	lr, r6, #31
 	add	r6, r6, #1
+	ldr	ip, [r2, r1, asl #2]
 	uxth	r6, r6
-	str	r0, [lr, #4]
+	orr	ip, ip, r0, asl lr
+	str	ip, [r2, r1, asl #2]
+.L1791:
+	ldr	r2, [r3, #156]
+	cmp	r6, r2
+	bcc	.L1793
+.L1792:
+	ldr	r3, .L1797+4
+	mov	r2, r9
+	mov	r0, r4
+	ldr	r1, [r3, #148]
+	bl	memcpy
+	mov	r2, #4
+	ldr	r0, .L1797+8
+	mov	r1, r4
+	mov	r3, r2
+	bl	rknand_print_hex
+	mov	r0, #0
+	b	.L1790
+.L1789:
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L1788:
+	cmp	r5, r8
+	bgt	.L1794
+	mvn	r0, #0
+.L1790:
+	add	sp, sp, #40
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L1798:
+	.align	2
+.L1797:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC137
+	.fnend
+	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
+	.align	2
+	.global	FlashGetBadBlockList
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1806
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r0
+	ldr	r3, [r3, #3624]
+	ldr	r6, .L1806+4
+	ldrb	r2, [r3, #13]	@ zero_extendqisi2
+	ldrh	r4, [r3, #14]
+	ldr	r0, [r6, #136]
+	mul	r4, r4, r2
+	uxth	r4, r4
+	add	r2, r4, #7
+	mov	r2, r2, lsr #3
+	bl	FlashReadFacBbtData
+	cmn	r0, #1
+	beq	.L1805
+	mov	r2, #0
+	mov	r0, r4, lsr #4
+	mov	r3, r2
+	sub	r4, r4, #1
+	mov	r1, #1
+	b	.L1801
 .L1803:
+	ldr	ip, [r6, #136]
+	mov	r8, r2, lsr #5
+	and	r7, r2, #31
+	ldr	ip, [ip, r8, asl #2]
+	ands	ip, ip, r1, asl r7
+	movne	ip, r3, asl #1
+	addne	r3, r3, #1
+	uxthne	r3, r3
+	strneh	r2, [r5, ip]	@ movhi
+	cmp	r3, r0
+	bcs	.L1805
 	add	r2, r2, #1
-	add	r1, r1, #2
 	uxth	r2, r2
-.L1815:
-	ldr	lr, [sp, #36]
-	cmp	r2, lr
-	bne	.L1804
-	ldr	r3, [sp, #28]
-	mov	r1, r6
-	ldr	r0, [r8, #-976]
-	ldr	r2, [sp, #20]
-	str	r3, [sp, #0]
-	bl	FlashReadPages
-	ldr	r2, .L1865
-	add	r0, r8, r5, asl #1
-	mov	r1, #0
-	str	r0, [sp, #8]
-	ldr	r3, [sp, #0]
-	ldrb	ip, [r2, #928]	@ zero_extendqisi2
-	ldr	r2, [r8, #-976]
-	str	ip, [sp, #28]
-	b	.L1805
-.L1813:
-	ldr	r0, [r2, #0]
-	cmp	r0, #0
-	bne	.L1806
-	ldr	r0, [r2, #12]
-	movw	ip, #65535
-	ldrh	lr, [r0, #0]
-	cmp	lr, ip
-	beq	.L1807
-	ldr	r0, [r0, #4]
-	cmn	r0, #1
-	beq	.L1807
-	cmn	fp, #1
-	ldr	r9, [r8, #-1012]
-	str	r0, [r8, #-1012]
-	bne	.L1807
-	ldr	lr, [sp, #8]
-	sub	r0, lr, #896
-	ldrh	r0, [r0, #0]
-	cmp	r0, ip
-	bne	.L1808
-	ldr	r0, [sp, #28]
-	cmp	r0, #0
-	beq	.L1807
-.L1808:
-	cmp	r9, r7
-	mvneq	fp, #0
-	movne	fp, r9
-	b	.L1807
+.L1801:
+	cmp	r2, r4
+	blt	.L1803
+	b	.L1800
+.L1805:
+	mov	r3, #0
+.L1800:
+	mov	r3, r3, asl #1
+	mvn	r2, #0
+	mov	r0, #0
+	strh	r2, [r5, r3]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1807:
+	.align	2
 .L1806:
-	mov	r6, r7
-	ldrh	r1, [r4, #0]
-	mov	r7, r3
-	ldr	r3, .L1865+4
-	movw	r2, #290
-	strh	r1, [r3, r2]	@ movhi
-	ldrb	r2, [r4, #8]	@ zero_extendqisi2
-	cmp	r2, #0
-	bne	.L1799
-	add	r5, r3, r5, asl #1
-	movw	r2, #65535
-	sub	r5, r5, #896
-	ldrh	r1, [r5, #0]
-	cmp	r1, r2
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
+	.global	FtlMakeBbt
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	ldr	r6, .L1826
+	ldr	r5, [r6, #4040]
+	cmp	r5, #0
 	bne	.L1809
-	cmn	fp, #1
-	bne	.L1858
-.L1810:
-	ldr	fp, [sp, #4]
-	cmp	fp, r6
-	beq	.L1811
-.L1858:
-	str	fp, [r3, #-1012]
-	b	.L1799
+	ldr	r8, .L1826+4
+	bl	FtlBbtMemInit
+	ldr	r4, .L1826+8
+	bl	FtlLoadFactoryBbt
+	add	sl, r8, #12
+	b	.L1810
+.L1816:
+	ldrh	r3, [sl], #2
+	movw	r2, #65535
+	ldr	r0, [r4, #-960]
+	movw	fp, #3912
+	ldr	r9, [r4, #-936]
+	cmp	r3, r2
+	str	r0, [r4, #188]
+	str	r9, [r4, #192]
+	beq	.L1811
+	ldrh	r7, [r6, fp]
+	mov	r1, #1
+	mov	r2, r1
+	ldr	r0, .L1826+12
+	mla	r7, r7, r5, r3
+	mov	r3, r7, asl #10
+	str	r3, [r4, #184]
+	bl	FlashReadPages
+	ldrh	r2, [r6, fp]
+	ldr	r0, [r8, #28]
+	add	r2, r2, #7
+	ldr	r1, [r4, #188]
+	mov	r2, r2, lsr #3
+	bl	memcpy
+	b	.L1812
 .L1811:
-	ldr	r2, [r3, #-1012]
-	b	.L1864
-.L1809:
-	cmp	r9, r6
-	beq	.L1812
-	cmn	r9, #1
-	strne	r9, [r3, #-1012]
-	b	.L1799
+	mov	r1, r5
+	bl	FlashGetBadBlockList
+	ldr	r0, [r4, #188]
+	ldr	r1, [r8, #28]
+	bl	FtlBbt2Bitmap
+	ldrh	fp, [r6, fp]
+.L1814:
+	sub	fp, fp, #1
+	uxth	fp, fp
+.L1825:
+	movw	r7, #3912
+	ldrh	r0, [r6, r7]
+	mla	r0, r0, r5, fp
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1814
+	mov	r1, #0
+	mov	r2, #16
+	strh	fp, [sl, #-2]	@ movhi
+	ldr	r0, [r4, #-936]
+	bl	ftl_memset
+	ldr	r3, .L1826+16
+	strh	r3, [r9, #0]	@ movhi
+	mov	r3, #0
+	str	r3, [r9, #4]
+	ldrh	r3, [sl, #-2]
+	ldrh	r7, [r6, r7]
+	strh	r3, [r9, #2]	@ movhi
+	ldrh	r3, [sl, #-2]
+	ldr	r1, [r8, #28]
+	ldr	r0, [r4, #188]
+	mla	r7, r7, r5, r3
+	mov	r3, r7, asl #10
+	str	r3, [r4, #184]
+	ldr	r3, .L1826+20
+	ldrh	r2, [r4, r3]
+	mov	r2, r2, asl #2
+	bl	memcpy
+	mov	r1, #1
+	mov	r2, r1
+	ldr	r0, .L1826+12
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	mov	r3, r1
+	ldr	r0, .L1826+12
+	mov	r2, r1
+	bl	FlashProgPages
+	ldr	r3, [r4, #180]
+	cmn	r3, #1
+	bne	.L1812
+	uxth	r0, r7
+	bl	FtlBbmMapBadBlock
+	b	.L1825
 .L1812:
-	ldr	r2, [r3, #-1012]
-	cmp	r2, r6
-	beq	.L1799
-.L1864:
-	sub	r2, r2, #1
-	b	.L1859
-.L1807:
-	add	r1, r1, #1
-	add	r2, r2, #36
-	uxth	r1, r1
-.L1805:
-	cmp	r1, r6
-	bne	.L1813
+	uxth	r0, r7
 	add	r5, r5, #1
-	uxth	r5, r5
-.L1802:
-	cmp	r5, sl
-	bhi	.L1814
-	ldr	r1, .L1865
-	movw	r2, #3844
-	ldr	lr, [r8, #-976]
-	mov	r6, #0
-	str	r3, [sp, #28]
-	ldrh	ip, [r1, r2]
-	mov	r1, r4
-	str	lr, [sp, #8]
-	mov	r2, r6
-	str	ip, [sp, #36]
-	b	.L1815
-.L1814:
-	mov	r6, r7
-	mov	r7, r3
-	ldr	r3, .L1865+4
-	mvn	r2, #0
-.L1859:
-	str	r2, [r3, #-1012]
-.L1799:
-	ldr	r5, .L1865+4
-	mov	r3, #292
-	mov	r2, #1
-	ldr	r0, .L1865+12
-	strh	r2, [r5, r3]	@ movhi
-	bl	FtlMapBlkWriteDumpData
-	ldr	r8, [sp, #12]
-	str	r7, [sp, #8]
-.L1816:
-	ldr	r3, .L1865
-	movw	r2, #3844
-	mov	r7, #0
-	ldr	lr, [r5, #-976]
-	mov	fp, #36
-	ldrh	sl, [r3, r2]
-	mov	r2, r4
-	ldrb	ip, [r3, #928]	@ zero_extendqisi2
-	mov	r3, r7
+	bl	FtlBbmMapBadBlock
+	add	r8, r8, #4
+.L1810:
+	movw	r3, #3870
+	ldrh	r3, [r6, r3]
+	cmp	r5, r3
+	bcc	.L1816
+	mov	r4, #0
+	ldr	r7, .L1826
+	movw	r6, #3930
 	b	.L1817
-.L1820:
-	ldrh	r0, [r2, #16]
-	movw	r1, #65535
-	cmp	r0, r1
-	beq	.L1818
-	mla	r1, fp, r7, lr
-	orr	r0, r8, r0, asl #10
-	str	r0, [r1, #4]
-	ldrb	r9, [r4, #8]	@ zero_extendqisi2
-	cmp	r9, #1
-	bne	.L1819
-	cmp	ip, #0
-	orrne	r0, r0, #-2147483648
-	strne	r0, [r1, #4]
-.L1819:
-	add	r7, r7, #1
-	uxth	r7, r7
 .L1818:
-	add	r3, r3, #1
-	add	r2, r2, #2
-	uxth	r3, r3
+	mov	r0, r4
+	add	r4, r4, #1
+	bl	FtlBbmMapBadBlock
+	uxth	r4, r4
 .L1817:
-	cmp	r3, sl
-	bne	.L1820
-	mov	r1, r7
-	ldr	r0, [r5, #-976]
-	ldr	r2, [sp, #20]
-	bl	FlashReadPages
-	mov	r3, #36
-	mul	r3, r3, r7
-	mov	r7, #0
-	str	r3, [sp, #36]
-	b	.L1821
-.L1842:
-	ldr	r9, [r5, #-976]
-	add	r9, r9, r7
-	ldr	sl, [r9, #4]
-	ubfx	r0, sl, #10, #16
-	str	sl, [sp, #52]
-	bl	P2V_plane
-	ldr	r3, [sp, #12]
-	cmp	r8, r3
-	bcc	.L1822
-	ldr	fp, [sp, #24]
-	mov	ip, r3
-	cmp	r0, fp
-	movcs	r3, #0
-	movcc	r3, #1
-	cmp	r8, ip
-	movne	r3, #0
-	cmp	r3, #0
-	bne	.L1822
-	ldr	r3, [sp, #16]
-	ldr	ip, [sp, #8]
-	cmp	r0, r3
-	cmpeq	r8, ip
-	beq	.L1854
-	ldr	r3, [r9, #0]
-	cmn	r3, #1
-	beq	.L1824
-	ldr	sl, [r9, #12]
-	movw	r3, #61589
-	ldrh	r2, [sl, #0]
-	cmp	r2, r3
-	bne	.L1831
-.L1825:
-	ldr	r6, [sl, #4]
-	cmn	r6, #1
-	beq	.L1826
-	ldr	r1, [r5, #-1804]
-	mov	r0, r6
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	addne	r3, r6, #1
-	strne	r3, [r5, #-1804]
-.L1826:
-	ldr	r9, [sl, #8]
-	add	r1, sp, #48
-	ldr	r3, [sl, #12]
-	mov	r2, #0
-	mov	r0, r9
-	str	r3, [sp, #44]
-	bl	log2phys
-	ldr	r1, [r5, #-1012]
-	cmn	r1, #1
-	beq	.L1827
-	mov	r0, r6
-	bl	ftl_cmp_data_ver
+	ldrh	r3, [r7, r6]
+	ldr	r5, .L1826
+	cmp	r3, r4
+	bhi	.L1818
+	movw	r7, #3992
+	movw	r6, #3980
+	ldrh	r4, [r5, r7]
+	sub	r4, r4, #1
+	uxth	r4, r4
+	b	.L1819
+.L1824:
+	mov	r0, r4
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L1820
+	mov	r0, r4
+	bl	FlashTestBlk
 	cmp	r0, #0
-	beq	.L1827
-	ldr	r3, [sp, #44]
-	cmn	r3, #1
-	beq	.L1828
-	ldr	r0, [r5, #-976]
+	beq	.L1821
+	mov	r0, r4
+	bl	FtlBbmMapBadBlock
+	b	.L1820
+.L1821:
+	ldrh	r2, [r5, r6]
+	movw	r3, #65535
+	cmp	r2, r3
+	streqh	r4, [r5, r6]	@ movhi
+.L1822:
+	ldrne	r2, .L1826
+	movne	r3, #3984
+	strneh	r4, [r2, r3]	@ movhi
+	bne	.L1823
+.L1820:
+	sub	r4, r4, #1
+	uxth	r4, r4
+.L1819:
+	ldrh	r3, [r5, r7]
+	sub	r3, r3, #48
+	cmp	r4, r3
+	bgt	.L1824
+.L1823:
+	ldr	r4, .L1826
+	movw	r6, #3980
+	mov	r5, #3984
+	mov	r7, #0
+	movw	r8, #3982
+	mov	r2, #2
+	ldr	r0, [r4, #4044]
 	mov	r1, #1
-	mov	r2, #0
-	add	r0, r0, r7
-	ldr	fp, [r0, #12]
+	ldrh	r3, [r4, r6]
+	str	r7, [r4, #3988]
+	strh	r7, [r4, r8]	@ movhi
+	mov	r3, r3, asl #10
 	str	r3, [r0, #4]
-	str	fp, [sp, #4]
-	bl	FlashReadPages
-	ldr	r3, [r5, #-976]
-	ldr	ip, [fp, #4]
-	add	fp, r3, r7
-	ldr	r3, [r3, r7]
-	str	ip, [sp, #28]
-	cmn	r3, #1
+	ldrh	r3, [r4, r5]
+	mov	r3, r3, asl #10
+	str	r3, [r0, #40]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4, r6]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, r5]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r4, #3988]
+	ldrh	r2, [r4, r5]
+	add	r3, r3, #1
+	str	r3, [r4, #3988]
+	ldrh	r3, [r4, r6]
+	strh	r7, [r4, r8]	@ movhi
+	strh	r2, [r4, r6]	@ movhi
+	strh	r3, [r4, r5]	@ movhi
+	bl	FtlBbmTblFlush
+.L1809:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1827:
+	.align	2
+.L1826:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3980
+	.word	.LANCHOR2
+	.word	.LANCHOR2+180
+	.word	-3872
+	.word	-1028
+	.fnend
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	2
+	.type	ftl_load_l2p_region, %function
+ftl_load_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r0
+	ldr	r6, .L1833
+	mov	r5, #12
+	ldr	r3, [r6, #-1032]
+	ldr	r7, [r3, r0, asl #2]
+	cmp	r7, #0
 	bne	.L1829
+	mul	r5, r5, r1
+	ldr	r3, [r6, #-1852]
+	ldr	r2, .L1833+4
+	mov	r1, #255
+	add	r3, r3, r5
+	ldr	r0, [r3, #8]
+	movw	r3, #3926
+	ldrh	r2, [r2, r3]
+	bl	ftl_memset
+	ldr	r3, [r6, #-1852]
+	strh	r4, [r3, r5]	@ movhi
+	ldr	r3, [r6, #-1852]
+	add	r5, r3, r5
+	str	r7, [r5, #4]
 	b	.L1830
-.L1828:
-	ldr	r3, [sp, #52]
-	ldr	r2, [sp, #48]
-	cmp	r2, r3
-	bne	.L1831
-	mov	r0, r9
-	add	r1, sp, #44
-	mov	r2, #1
-	bl	log2phys
-.L1831:
-	ldrh	r0, [r4, #0]
-	b	.L1861
 .L1829:
-	ldr	r3, [sp, #4]
-	ldr	sl, [r3, #8]
-	cmp	sl, r9
-	bne	.L1830
-	ldr	r0, [r5, #-1012]
-	ldr	r1, [sp, #28]
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	beq	.L1830
-	ldr	r3, [sp, #48]
-	ldr	r2, [sp, #52]
-	cmp	r3, r2
-	beq	.L1835
-.L1832:
-	ldr	r2, [sp, #44]
-	cmp	r3, r2
-	beq	.L1830
-	cmn	r3, #1
-	streq	r3, [fp, #0]
-	beq	.L1834
-	ldr	ip, [fp, #12]
-	mov	r0, fp
-	str	r3, [fp, #4]
-	mov	r1, #1
-	mov	r2, #0
-	str	ip, [sp, #4]
-	bl	FlashReadPages
-.L1834:
-	ldr	r3, [r5, #-976]
-	ldr	r3, [r3, r7]
-	cmn	r3, #1
-	beq	.L1835
-	ldr	r3, [sp, #4]
-	ldr	r0, [r5, #-1012]
-	ldr	r9, [r3, #4]
-	mov	r1, r9
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	beq	.L1835
-	ldr	r0, [sp, #28]
-	mov	r1, r9
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	beq	.L1830
-.L1835:
-	mov	r0, sl
-	ldr	r1, [sp, #44]
-	bl	FtlReUsePrevPpa
-.L1830:
-	ldrh	r0, [r4, #0]
-	mvn	r3, #0
-	str	r3, [sp, #44]
-	bl	decrement_vpc_count
-	b	.L1837
-.L1827:
-	ldr	r3, [sp, #52]
-	ldr	r2, [sp, #48]
-	cmp	r2, r3
-	beq	.L1837
-	mov	r0, r9
-	add	r1, sp, #52
-	mov	r2, #1
-	bl	log2phys
-	ldr	fp, [sp, #48]
-	cmn	fp, #1
-	beq	.L1837
-	ldr	r3, [sp, #44]
-	cmp	fp, r3
-	beq	.L1837
-	ubfx	r0, fp, #10, #16
-	bl	P2V_block_in_plane
-	ldr	r3, .L1865+16
-	ldrh	r3, [r5, r3]
-	cmp	r3, r0
-	beq	.L1838
-	ldr	r3, .L1865+20
-	ldrh	r3, [r5, r3]
-	cmp	r3, r0
-	beq	.L1838
-	ldr	r3, .L1865+24
-	ldrh	r3, [r5, r3]
-	cmp	r3, r0
-	bne	.L1837
-.L1838:
-	ldr	ip, .L1865+4
+	mul	r5, r5, r1
+	ldr	r3, [r6, #-1852]
 	mov	r1, #1
-	mov	r2, #0
-	ldr	r0, [ip, #-976]
-	str	fp, [r0, #4]
-	ldr	sl, [r0, #12]
+	str	r7, [r6, #184]
+	add	r0, r6, #180
+	mov	r2, r1
+	add	r3, r3, r5
+	ldr	r3, [r3, #8]
+	str	r3, [r6, #188]
+	ldr	r3, [r6, #-936]
+	str	r3, [r6, #192]
 	bl	FlashReadPages
-	ldr	r0, .L1865+4
-	ldr	r1, [sl, #4]
-	ldr	r3, [r0, #-976]
-	ldr	r3, [r3, #0]
-	cmn	r3, #1
-	beq	.L1837
-	mov	r0, r6
-	bl	ftl_cmp_data_ver
-	cmp	r0, #0
-	bne	.L1837
-	mov	r0, r9
-	add	r1, sp, #48
-	mov	r2, #1
-	bl	log2phys
-.L1837:
-	ldr	r0, [sp, #44]
-	cmn	r0, #1
-	beq	.L1822
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldr	r2, [r5, #-2020]
-	mov	r3, r0, asl #1
-	mov	r1, r0
-	ldrh	r3, [r2, r3]
-	cmp	r3, #0
-	beq	.L1839
-.L1861:
-	bl	decrement_vpc_count
-	b	.L1822
-.L1839:
-	ldr	r0, .L1865+28
+	ldr	r3, [r6, #180]
+	ldr	r8, [r6, #192]
+	cmp	r3, #256
+	bne	.L1831
+	mov	r1, r4
+	mov	r2, r7
+	ldr	r0, .L1833+8
 	bl	printk
-	b	.L1822
-.L1824:
-	ldrh	r3, [r4, #0]
-	movw	r1, #290
-	mov	r2, r6
-	ldr	r0, .L1865+32
-	strh	r3, [r5, r1]	@ movhi
-	mov	r1, sl
+	ldr	r3, .L1833+12
+	mov	r2, r7, lsr #10
+	sub	r0, r6, #1088
+	mov	r1, r4
+	strh	r2, [r6, r3]	@ movhi
+	ldr	r3, [r6, #-1852]
+	add	r3, r3, r5
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+.L1831:
+	ldrh	r3, [r8, #8]
+	cmp	r3, r4
+	beq	.L1832
+	mov	r2, r7
+	ldr	r7, .L1833
+	mov	r1, r4
+	ldr	r0, .L1833+16
 	bl	printk
-	ldr	r3, [r5, #296]
-	cmp	r3, #31
-	addls	r2, r5, r3, asl #2
-	addls	r3, r3, #1
-	ldrls	r1, [sp, #52]
-	strls	r3, [r5, #296]
-	strls	r1, [r2, #300]
-	ldrh	r0, [r4, #0]
-	bl	decrement_vpc_count
-	ldr	r3, [r5, #-1012]
-	cmn	r3, #1
-	beq	.L1860
-.L1841:
-	cmp	r3, r6
-	bls	.L1822
-.L1860:
-	str	r6, [r5, #-1012]
-.L1822:
-	add	r7, r7, #36
-.L1821:
-	ldr	r3, [sp, #36]
-	cmp	r7, r3
-	bne	.L1842
-	ldrb	r3, [r4, #8]	@ zero_extendqisi2
-	add	r8, r8, #1
-	cmp	r3, #1
-	uxth	r8, r8
-	bne	.L1843
-	ldr	r3, .L1865
-	ldrb	r2, [r3, #928]	@ zero_extendqisi2
-	cmp	r2, #0
-	beq	.L1843
-	movw	r2, #3914
-	ldr	ip, [sp, #8]
-	ldrh	r3, [r3, r2]
-	cmp	ip, r8
-	cmpeq	r3, r8
-	beq	.L1854
-.L1843:
-	ldr	r3, .L1865
-	movw	r2, #3912
-	ldrh	r2, [r3, r2]
-	cmp	r8, r2
-	bne	.L1816
-	mov	r2, #0
-	movw	r1, #3844
-	strh	r2, [r4, #4]	@ movhi
-	ldrh	r1, [r3, r1]
+	ldr	r6, .L1833+4
+	mov	r2, #4
+	ldr	r0, .L1833+20
 	mov	r3, r2
-	strh	r8, [r4, #2]	@ movhi
-	movw	r2, #65535
-	ldr	r0, [sp, #32]
-	b	.L1844
-.L1846:
-	add	r0, r0, #2
-	ldrh	ip, [r0, #14]
-	cmp	ip, r2
-	strneb	r3, [r4, #6]
-	bne	.L1776
-.L1845:
-	add	r3, r3, #1
-	uxth	r3, r3
-.L1844:
-	cmp	r3, r1
-	bne	.L1846
-	b	.L1776
-.L1854:
-.L1823:
-	ldr	r7, [sp, #8]
-	ldr	r3, [sp, #16]
-	strh	r7, [r4, #2]	@ movhi
-	strb	r3, [r4, #6]
-.L1863:
-	mov	r0, r4
-	mov	r1, r7
-	mov	r2, r3
-	bl	ftl_sb_update_avl_pages
-.L1776:
+	ldr	r1, [r7, #192]
+	bl	rknand_print_hex
+	mov	r3, #3952
+	ldrh	r3, [r6, r3]
+	mov	r2, #4
+	ldr	r0, .L1833+24
+	ldr	r1, [r7, #-1032]
+	bl	rknand_print_hex
+	mov	r3, #1
+	str	r3, [r6, #4040]
+.L1832:
+	ldr	r3, .L1833
+	mov	r1, #0
+	ldr	r3, [r3, #-1852]
+	add	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r4, [r3, r5]	@ movhi
+.L1830:
 	mov	r0, #0
-	add	sp, sp, #60
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L1866:
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1834:
 	.align	2
-.L1865:
-	.word	.LANCHOR0
+.L1833:
 	.word	.LANCHOR2
-	.word	.LC125
-	.word	.LANCHOR2-1092
-	.word	-2000
-	.word	-1952
-	.word	-1904
-	.word	.LC126
-	.word	.LC127
+	.word	.LANCHOR0
+	.word	.LC138
+	.word	-1048
+	.word	.LC139
+	.word	.LC98
+	.word	.LC140
 	.fnend
-	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.size	ftl_load_l2p_region, .-ftl_load_l2p_region
 	.align	2
-	.global	FtlWriteDumpData
-	.type	FtlWriteDumpData, %function
-FtlWriteDumpData:
+	.global	log2phys
+	.type	log2phys, %function
+log2phys:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 40
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	.pad #40
-	sub	sp, sp, #40
-	ldr	r4, .L1876
-	ldr	r3, [r4, #-2092]
-	mov	r2, r4
-	cmp	r3, #0
-	bne	.L1867
-	ldr	r3, .L1876+4
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	beq	.L1869
-	ldrb	r1, [r4, #-1992]	@ zero_extendqisi2
-	cmp	r1, #0
-	bne	.L1869
-	ldr	r5, .L1876+8
-	movw	r0, #3912
-	ldrb	r1, [r4, #-1993]	@ zero_extendqisi2
-	ldrh	r0, [r5, r0]
-	mul	r1, r0, r1
-	cmp	r3, r1
-	beq	.L1869
-	ldrb	r8, [r4, #-1990]	@ zero_extendqisi2
-	movw	r3, #3844
-	ldr	r7, [r5, #3972]
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r8, r2
+	ldr	r3, .L1844
+	movw	r2, #3924
+	mov	r4, r1
+	ldrh	r7, [r3, r2]
+	mvn	r2, #0
+	add	r7, r7, #7
+	mov	r6, r0, lsr r7
+	bic	r7, r0, r2, asl r7
+	movw	r2, #3954
+	ldrh	r2, [r3, r2]
+	uxth	r6, r6
+	ldr	r3, .L1844+4
+	uxth	r7, r7
+	ldr	sl, [r3, #-1852]
+	mov	r3, #0
+	mov	r5, r3
+	b	.L1836
+.L1842:
+	add	r3, r3, #12
+	add	r1, sl, r3
+	ldrh	r1, [r1, #-12]
+	cmp	r1, r6
+	bne	.L1837
+.L1838:
 	cmp	r8, #0
-	ldrh	r6, [r5, r3]
-	bne	.L1867
-	sub	r7, r7, #1
-	mov	r1, sp
-	mov	r2, r8
-	mov	r0, r7
-	bl	log2phys
-	ldr	r3, [sp, #0]
-	ldr	r0, [r4, #-964]
-	ldr	r4, [r4, #-940]
+	ldr	r3, .L1844+4
+	mov	r2, #12
+	bne	.L1839
+	ldr	r3, [r3, #-1852]
+	mla	r2, r2, r5, r3
+	ldr	r3, [r2, #8]
+	ldr	r3, [r3, r7, asl #2]
+	str	r3, [r4, #0]
+	b	.L1840
+.L1839:
+	mul	r2, r2, r5
+	ldr	r1, [r3, #-1852]
+	ldr	r0, [r4, #0]
+	add	r1, r1, r2
+	ldr	r1, [r1, #8]
+	str	r0, [r1, r7, asl #2]
+	ldr	r1, [r3, #-1852]
+	add	r2, r1, r2
+	ldr	r1, [r2, #4]
+	orr	r1, r1, #-2147483648
+	str	r1, [r2, #4]
+	ldr	r2, .L1844+8
+	strh	r6, [r3, r2]	@ movhi
+.L1840:
+	ldr	r3, .L1844+4
+	mov	r2, #12
+	mov	r0, #0
+	ldr	r3, [r3, #-1852]
+	mla	r5, r2, r5, r3
+	ldr	r3, [r5, #4]
 	cmn	r3, #1
-	str	r3, [sp, #8]
-	str	r7, [sp, #20]
-	str	r0, [sp, #12]
-	str	r4, [sp, #16]
-	str	r8, [r4, #4]
-	beq	.L1870
-	add	r0, sp, #4
-	mov	r1, #1
-	mov	r2, r8
-	bl	FlashReadPages
-	b	.L1871
-.L1870:
-	movw	r3, #3922
-	mov	r1, #255
-	ldrh	r2, [r5, r3]
-	bl	ftl_memset
-.L1871:
-	ldr	r3, .L1876+12
-	mov	r6, r6, asl #2
-	ldr	r5, .L1876
-	ldr	r8, .L1876+4
-	strh	r3, [r4, #0]	@ movhi
-	b	.L1872
-.L1875:
-	ldrh	r3, [r5, r8]
+	addne	r3, r3, #1
+	strne	r3, [r5, #4]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L1837:
+	add	r5, r5, #1
+	uxth	r5, r5
+.L1836:
+	cmp	r5, r2
+	bne	.L1842
+	bl	select_l2p_ram_region
+	mov	r3, #12
+	mul	r3, r3, r0
+	mov	r5, r0
+	add	r2, sl, r3
+	ldrh	r1, [sl, r3]
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1843
+	ldr	r3, [r2, #4]
 	cmp	r3, #0
-	beq	.L1873
-	ldr	r3, [sp, #8]
-	sub	r0, r0, #2000
-	str	r7, [r4, #8]
-	sub	r6, r6, #1
-	str	r3, [r4, #12]
-	ldr	r3, .L1876+16
-	ldrh	r3, [r5, r3]
-	strh	r3, [r4, #2]	@ movhi
-	bl	get_new_active_ppa
-	ldr	r3, [r5, #-1804]
+	bge	.L1843
+	bl	flush_l2p_region
+.L1843:
+	mov	r0, r6
+	mov	r1, r5
+	bl	ftl_load_l2p_region
+	b	.L1838
+.L1845:
+	.align	2
+.L1844:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1848
+	.fnend
+	.size	log2phys, .-log2phys
+	.align	2
+	.type	FtlReadRefresh.part.15, %function
+FtlReadRefresh.part.15:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #40
+	sub	sp, sp, #40
+	ldr	r4, .L1854
+	ldr	r6, .L1854+4
+	ldr	r2, [r4, #-1624]
+	ldr	r3, [r6, #3976]
+	cmp	r2, r3
+	bcs	.L1847
+	mov	r5, #2048
+.L1850:
+	ldr	r0, [r4, #-1624]
+	ldr	r3, [r6, #3976]
+	cmp	r0, r3
+	bcs	.L1852
+	mov	r1, sp
 	mov	r2, #0
-	mov	r1, #1
-	str	r0, [sp, #8]
-	add	r0, sp, #4
-	str	r3, [r4, #4]
+	bl	log2phys
+	ldr	r0, [sp, #0]
+	ldr	r3, [r4, #-1624]
+	cmn	r0, #1
 	add	r3, r3, #1
-	cmn	r3, #1
-	str	r3, [r5, #-1804]
-	moveq	r3, #0
-	streq	r3, [r5, #-1804]
-	mov	r3, r2
-	bl	FlashProgPages
-	ldr	r3, .L1876+16
-	ldrh	r0, [r5, r3]
-	bl	decrement_vpc_count
-.L1872:
-	cmp	r6, #0
-	ldr	r0, .L1876
-	bne	.L1875
-.L1873:
-	mov	r3, #1
-	strb	r3, [r0, #-1990]
-	b	.L1867
-.L1869:
-	mov	r3, #0
-	strb	r3, [r2, #-1990]
-.L1867:
+	str	r3, [r4, #-1624]
+	beq	.L1849
+	str	r0, [sp, #8]
+	add	r0, sp, #40
+	mov	r2, #0
+	mov	r1, #1
+	str	r2, [r0, #-36]!
+	str	r3, [sp, #20]
+	str	r2, [sp, #12]
+	str	r2, [sp, #16]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	cmp	r3, #256
+	bne	.L1852
+	ldr	r0, [sp, #0]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	b	.L1852
+.L1849:
+	subs	r5, r5, #1
+	bne	.L1850
+	b	.L1848
+.L1847:
+	ldr	r3, [r4, #-1836]
+	mov	r0, #0
+	str	r0, [r4, #-1628]
+	str	r0, [r4, #-1624]
+	str	r3, [r4, #-1632]
+	b	.L1848
+.L1852:
+	mvn	r0, #0
+.L1848:
 	add	sp, sp, #40
-	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L1877:
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1855:
 	.align	2
-.L1876:
+.L1854:
 	.word	.LANCHOR2
-	.word	-1996
 	.word	.LANCHOR0
-	.word	-3947
-	.word	-2000
 	.fnend
-	.size	FtlWriteDumpData, .-FtlWriteDumpData
+	.size	FtlReadRefresh.part.15, .-FtlReadRefresh.part.15
 	.align	2
-	.global	l2p_flush
-	.type	l2p_flush, %function
-l2p_flush:
+	.global	FtlReadRefresh
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
-	.save {r3, r4, r5, r6, r7, lr}
-	bl	FtlWriteDumpData
-	mov	r4, #0
-	ldr	r7, .L1882
-	movw	r6, #3950
-	ldr	r5, .L1882+4
-	b	.L1879
-.L1881:
-	ldr	r3, [r5, #-1856]
-	mov	r2, #12
-	mla	r3, r2, r4, r3
-	ldr	r3, [r3, #4]
+	@ link register save eliminated.
+	ldr	r3, .L1863
+	ldr	r2, [r3, #-1628]
+	cmp	r2, #0
+	beq	.L1857
+	b	FtlReadRefresh.part.15
+.L1857:
+	ldr	r2, .L1863+4
+	ldr	r0, [r3, #-1784]
+	ldr	r1, [r2, #3840]
+	ldrb	r2, [r2, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldr	r2, [r3, #-1836]
+	addeq	r0, r1, r0, lsr #10
+	moveq	r1, #33554432
+	movne	r0, #4194304
+	moveq	r0, r1, asr r0
+	ldr	r1, [r3, #-1632]
+	add	r3, r2, #1048576
+	cmp	r1, r3
+	bhi	.L1859
+	add	r1, r0, r1
+	cmp	r1, r2
+	bcc	.L1859
+	ldr	r3, .L1863
+	ldrb	r3, [r3, #-2044]	@ zero_extendqisi2
 	cmp	r3, #0
-	bge	.L1880
-	mov	r0, r4
-	bl	flush_l2p_region
-.L1880:
-	add	r4, r4, #1
-	uxth	r4, r4
-.L1879:
-	ldrh	r3, [r7, r6]
-	cmp	r3, r4
-	bhi	.L1881
+	bne	.L1860
+.L1859:
+	ldr	r3, .L1863
+	mov	r1, #1
+	str	r2, [r3, #-1632]
+	str	r1, [r3, #-1628]
+	mov	r1, #0
+	str	r1, [r3, #-1624]
+.L1860:
 	mov	r0, #0
-	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L1883:
+	bx	lr
+.L1864:
 	.align	2
-.L1882:
-	.word	.LANCHOR0
+.L1863:
 	.word	.LANCHOR2
+	.word	.LANCHOR0
 	.fnend
-	.size	l2p_flush, .-l2p_flush
+	.size	FtlReadRefresh, .-FtlReadRefresh
 	.align	2
-	.global	FtlVpcCheckAndModify
-	.type	FtlVpcCheckAndModify, %function
-FtlVpcCheckAndModify:
+	.global	FtlReUsePrevPpa
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
-	.save {r0, r1, r4, r5, r6, r7, r8, lr}
-	mov	r4, #0
-	ldr	r6, .L1891
-	ldr	r1, .L1891+4
-	ldr	r0, .L1891+8
-	bl	printk
-	movw	r3, #3854
-	ldrh	r2, [r6, r3]
-	mov	r1, #0
-	ldr	r5, .L1891+12
-	mov	r2, r2, asl #1
-	ldr	r0, [r5, #-920]
-	bl	ftl_memset
-	b	.L1885
-.L1887:
-	mov	r0, r4
-	add	r1, sp, #4
-	mov	r2, #0
-	bl	log2phys
-	ldr	r0, [sp, #4]
-	cmn	r0, #1
-	beq	.L1886
-	ubfx	r0, r0, #10, #16
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, lr}
+	mov	r7, r0
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
 	bl	P2V_block_in_plane
-	ldr	r3, [r5, #-920]
-	mov	r0, r0, asl #1
-	ldrh	r2, [r3, r0]
-	add	r2, r2, #1
-	strh	r2, [r3, r0]	@ movhi
-.L1886:
-	add	r4, r4, #1
-.L1885:
-	ldr	r3, [r6, #3972]
-	cmp	r4, r3
-	bcc	.L1887
-	mov	r4, #0
-	ldr	r7, .L1891
-	movw	r8, #3852
-	ldr	r5, .L1891+12
-	b	.L1888
-.L1890:
-	ldr	r3, [r5, #-2020]
-	mov	r6, r4, asl #1
-	ldrh	r2, [r3, r6]
-	ldr	r3, [r5, #-920]
-	ldrh	r3, [r3, r6]
-	cmp	r2, r3
-	beq	.L1889
+	ldr	r3, .L1871
+	ldr	r1, [r3, #-2016]
+	mov	r5, r0, asl #1
+	ldrh	r2, [r1, r5]
+	cmp	r2, #0
+	addne	r2, r2, #1
+	strneh	r2, [r1, r5]	@ movhi
+	bne	.L1867
+	ldr	r4, [r3, #-2004]
+	cmp	r4, #0
+	beq	.L1867
+	ldr	r1, .L1871+4
+	mov	ip, #6
+	ldrh	lr, [r3, r1]
+	ldr	r3, [r3, #-2024]
+	ldr	r1, .L1871+8
+	rsb	r4, r3, r4
+	mov	r4, r4, asr #1
+	mul	r4, r1, r4
 	movw	r1, #65535
-	cmp	r2, r1
-	beq	.L1889
-	ldr	r0, .L1891+16
+	uxth	r4, r4
+	b	.L1868
+.L1870:
+	cmp	r4, r0
+	bne	.L1869
 	mov	r1, r4
-	bl	printk
-	ldr	r3, .L1891+20
-	ldrh	r3, [r5, r3]
-	cmp	r3, r4
-	beq	.L1889
-	ldr	r3, .L1891+24
-	ldrh	r3, [r5, r3]
-	cmp	r3, r4
-	beq	.L1889
-	ldr	r3, .L1891+28
-	ldrh	r3, [r5, r3]
-	cmp	r3, r4
-	beq	.L1889
-	ldr	r3, [r5, #-920]
+	ldr	r0, .L1871+12
+	bl	List_remove_node
+	ldr	r6, .L1871
+	ldr	r3, .L1871+4
 	mov	r0, r4
-	ldrh	r2, [r3, r6]
-	ldr	r3, [r5, #-2020]
-	strh	r2, [r3, r6]	@ movhi
-	bl	update_vpc_list
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-.L1889:
-	add	r4, r4, #1
-	uxth	r4, r4
-.L1888:
-	ldrh	r3, [r7, r8]
-	cmp	r3, r4
-	bhi	.L1890
-	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
-.L1892:
+	ldrh	r2, [r6, r3]
+	sub	r2, r2, #1
+	strh	r2, [r6, r3]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r3, [r6, #-2016]
+	ldrh	r2, [r3, r5]
+	add	r2, r2, #1
+	strh	r2, [r3, r5]	@ movhi
+	b	.L1867
+.L1869:
+	mul	r4, ip, r4
+	ldrh	r4, [r3, r4]
+	cmp	r4, r1
+	beq	.L1867
+	add	r2, r2, #1
+	uxth	r2, r2
+.L1868:
+	cmp	r2, lr
+	bne	.L1870
+.L1867:
+	mov	r0, r7
+	add	r1, sp, #4
+	mov	r2, #1
+	bl	log2phys
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
+.L1872:
 	.align	2
-.L1891:
-	.word	.LANCHOR0
-	.word	.LANCHOR3+15
-	.word	.LC128
+.L1871:
 	.word	.LANCHOR2
-	.word	.LC129
 	.word	-2000
-	.word	-1904
-	.word	-1952
+	.word	-1431655765
+	.word	.LANCHOR2-2004
 	.fnend
-	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
 	.align	2
-	.global	allocate_new_data_superblock
-	.type	allocate_new_data_superblock, %function
-allocate_new_data_superblock:
+	.global	Ftlscanalldata
+	.type	Ftlscanalldata, %function
+Ftlscanalldata:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1905
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r4, r0
-	ldr	r2, [r3, #-2092]
-	ldrh	r5, [r0, #0]
-	cmp	r2, #0
-	bne	.L1894
-	movw	r2, #65535
-	cmp	r5, r2
-	beq	.L1895
-	ldr	r2, [r3, #-2020]
-	mov	r3, r5, asl #1
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r1, #0
+	ldr	r4, .L1879
+	.pad #32
+	sub	sp, sp, #32
+	ldr	r0, .L1879+4
+	mov	r5, #0
+	bl	printk
+	ldr	r7, .L1879+8
+	mov	r6, r4
+	b	.L1874
+.L1878:
 	mov	r0, r5
-	ldrh	r3, [r2, r3]
-	cmp	r3, #0
-	beq	.L1896
-	bl	INSERT_DATA_LIST
-	b	.L1895
-.L1896:
-	bl	INSERT_FREE_LIST
-.L1895:
-	mov	r3, #0
-	strb	r3, [r4, #8]
-	ldr	r3, .L1905
-	sub	r2, r3, #1952
-	cmp	r4, r2
-	beq	.L1897
-	ldr	r1, .L1905+4
-	movw	r2, #3864
-	ldrh	r2, [r1, r2]
-	cmp	r2, #1
-	beq	.L1897
-	ldrb	r1, [r1, #928]	@ zero_extendqisi2
-	cmp	r1, #0
-	beq	.L1898
-.L1897:
-	mov	r3, #1
-	strb	r3, [r4, #8]
-	b	.L1899
-.L1898:
-	sub	r1, r3, #2000
-	cmp	r4, r1
-	bne	.L1899
-	cmp	r2, #3
-	beq	.L1900
-	ldr	r2, [r3, #-1716]
-	cmp	r2, #1
-	bne	.L1901
-.L1900:
-	mov	r2, #1
-	strb	r2, [r3, #-1992]
-.L1901:
-	ldr	r2, .L1905+4
-	ldr	r2, [r2, #3836]
-	cmp	r2, #0
-	beq	.L1899
-	ldr	r3, [r3, #-1784]
-	cmp	r3, #29
-	ldrls	r3, .L1905
-	movls	r2, #1
-	strlsb	r2, [r3, #-1992]
-.L1899:
-	ldr	r3, .L1905+8
-	ldr	r6, .L1905
-	ldrh	r0, [r6, r3]
-	movw	r3, #65535
-	cmp	r0, r3
-	beq	.L1902
-	cmp	r5, r0
-	bne	.L1903
-	ldr	r2, [r6, #-2020]
-	mov	r3, r0, asl #1
-	ldrh	r3, [r2, r3]
-	cmp	r3, #0
-	beq	.L1904
-.L1903:
-	bl	update_vpc_list
-.L1904:
-	ldr	r3, .L1905+8
-	mvn	r2, #0
-	strh	r2, [r6, r3]	@ movhi
-.L1902:
-	mov	r0, r4
-	bl	allocate_data_superblock
-	bl	l2p_flush
-	mov	r0, #0
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-.L1894:
-	mov	r0, #0
-	ldmfd	sp!, {r4, r5, r6, pc}
-.L1906:
+	add	r1, sp, #28
+	mov	r2, #0
+	bl	log2phys
+	movs	r3, r5, asl #21
+	bne	.L1875
+	ldr	r0, .L1879+12
+	mov	r1, r5
+	ldr	r2, [sp, #28]
+	bl	printk
+.L1875:
+	ldr	r3, [sp, #28]
+	cmn	r3, #1
+	beq	.L1876
+	str	r3, [r4, #184]
+	mov	r2, #0
+	ldr	r3, [r4, #-960]
+	mov	r1, #1
+	ldr	r8, [r4, #-936]
+	ldr	r0, .L1879+16
+	str	r3, [r4, #188]
+	str	r5, [r4, #196]
+	str	r8, [r4, #192]
+	str	r2, [r4, #180]
+	bl	FlashReadPages
+	ldr	r3, [r4, #180]
+	cmn	r3, #1
+	cmpne	r3, #256
+	beq	.L1877
+	ldr	r3, [r8, #8]
+	cmp	r3, r5
+	beq	.L1876
+.L1877:
+	ldr	r3, [r6, #192]
+	ldr	r2, [r6, #188]
+	ldr	r0, .L1879+20
+	ldr	r1, [r3, #4]
+	str	r1, [sp, #0]
+	ldr	r1, [r3, #8]
+	str	r1, [sp, #4]
+	ldr	r1, [r3, #12]
+	str	r1, [sp, #8]
+	ldr	r1, [r2, #0]
+	str	r1, [sp, #12]
+	mov	r1, r5
+	ldr	r2, [r2, #4]
+	str	r2, [sp, #16]
+	ldr	r2, [r6, #184]
+	ldr	r3, [r3, #0]
+	bl	printk
+.L1876:
+	add	r5, r5, #1
+.L1874:
+	ldr	r3, [r7, #3976]
+	cmp	r5, r3
+	bcc	.L1878
+	add	sp, sp, #32
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1880:
 	.align	2
-.L1905:
+.L1879:
 	.word	.LANCHOR2
+	.word	.LC141
 	.word	.LANCHOR0
-	.word	-1024
+	.word	.LC142
+	.word	.LANCHOR2+180
+	.word	.LC143
 	.fnend
-	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.size	Ftlscanalldata, .-Ftlscanalldata
 	.align	2
-	.type	ftl_do_gc.part.21, %function
-ftl_do_gc.part.21:
+	.global	FtlRecoverySuperblock
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 24
+	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2004
-	movw	ip, #65535
-	ldr	r2, .L2004+4
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.pad #36
-	sub	sp, sp, #36
-	mov	sl, r1
-	str	r0, [sp, #16]
-	ldrh	r0, [r3, r2]
-	cmp	r0, ip
-	beq	.L1908
-	ldr	r1, .L2004+8
-	ldrh	r4, [r3, r1]
-	cmp	r4, ip
-	streqh	r0, [r3, r1]	@ movhi
-	mvneq	r1, #0
-	streqh	r1, [r3, r2]	@ movhi
-.L1908:
-	ldr	r1, [sp, #16]
-	ldr	r2, [r3, #-1196]
-	cmp	r1, #1
-	add	r2, r2, #1
-	add	r2, r2, r1, asl #7
-	str	r2, [r3, #-1196]
-	bne	.L1909
-	ldr	r3, .L2004+12
-	ldr	r1, [r3, #3836]
-	cmp	r1, #0
-	bne	.L1910
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L1909
-.L1910:
-	ldr	r4, .L2004
-	ldr	r3, [r4, #-1784]
-	cmp	r3, #29
-	bhi	.L1909
-	mov	r3, #428
-	ldrh	r3, [r4, r3]
-	add	r2, r2, r3
-	str	r2, [r4, #-1196]
-	bl	FtlGcReFreshBadBlk
-	ldr	r3, .L2004+16
 	movw	r2, #65535
-	ldrh	r3, [r4, r3]
+	ldrh	r3, [r0, #0]
+	.pad #60
+	sub	sp, sp, #60
+	mov	r4, r0
 	cmp	r3, r2
-	bne	.L1909
-	ldr	r2, .L2004+8
-	ldrh	r2, [r4, r2]
-	cmp	r2, r3
-	bne	.L1909
-	ldr	r3, [r4, #-1196]
-	cmp	r3, #1024
-	bhi	.L1911
-	ldr	r3, .L2004+20
-	ldrh	r3, [r4, r3]
-	cmp	r3, #63
-	bhi	.L1909
-.L1911:
-	ldr	r3, .L2004
-	mov	r2, #428
-	ldr	r0, .L2004+20
-	mov	r1, #0
-	strh	r1, [r3, r2]	@ movhi
-	ldrh	ip, [r3, r0]
-	ldr	r0, .L2004+24
-	ldrh	r0, [r3, r0]
-	add	r0, r0, #64
-	cmp	ip, r0
-	bgt	.L1909
-	str	r1, [r3, #-1196]
-	ldr	r1, [r3, #-1784]
-	cmp	r1, #0
-	moveq	r1, #6
-	beq	.L2000
-	cmp	r1, #5
-	bhi	.L1913
-	mov	r1, #18
-.L2000:
-	strh	r1, [r3, r2]	@ movhi
-.L1913:
-	mov	r0, #32
-	movw	r7, #65535
-	bl	List_get_gc_head_node
-	uxth	r2, r0
-	cmp	r2, r7
-	beq	.L1914
-	ldr	r5, .L2004
-	ldr	r6, .L2004+28
-	ldrh	r0, [r5, r6]
-	cmp	r0, #0
-	moveq	r3, #1
-	streqh	r3, [r5, r6]	@ movhi
-	beq	.L1914
-	ldr	r3, .L2004+12
-	movw	ip, #3914
-	movw	lr, #3844
-	ldr	r9, [r5, #-2020]
-	mov	r2, r2, asl #1
-	ldrh	ip, [r3, ip]
-	ldrh	r3, [r3, lr]
-	ldrh	r1, [r9, r2]
-	mul	r3, r3, ip
+	beq	.L1882
+	ldrh	r3, [r0, #2]
+	ldr	r1, .L1971
+	ldrb	fp, [r0, #6]	@ zero_extendqisi2
+	str	r3, [sp, #12]
+	movw	r3, #3916
+	ldrh	r3, [r1, r3]
+	ldr	ip, [sp, #12]
+	str	fp, [sp, #24]
+	cmp	r3, ip
+	mov	r3, #0
+	streqh	r3, [r0, #4]	@ movhi
+	moveq	r2, r3	@ movhi
+	ldrneh	r0, [r0, #16]
+	bne	.L1884
+	b	.L1968
+.L1885:
 	add	r3, r3, #1
-	cmp	r1, r3
-	bgt	.L1914
-	add	fp, r0, #1
-	mov	r8, #0
-	str	r8, [r5, #-1188]
-	uxth	fp, fp
-	strh	fp, [r5, r6]	@ movhi
-	str	r2, [sp, #8]
-	bl	List_get_gc_head_node
-	ldr	r2, [sp, #8]
-	uxth	r4, r0
-	cmp	r4, r7
-	beq	.L1914
-	ldrh	r2, [r9, r2]
-	mov	r7, r4, asl #1
-	ldr	r0, .L2004+32
-	mov	r1, fp
-	ldrh	r3, [r9, r7]
-	str	r2, [sp, #0]
-	mov	r2, r4
-	bl	printk
-	ldrh	r3, [r5, r6]
-	cmp	r3, #40
-	bls	.L1916
-	ldr	r3, [r5, #-2020]
-	ldrh	r3, [r3, r7]
-	cmp	r3, #32
-	strhih	r8, [r5, r6]	@ movhi
-.L1916:
-	ldr	r2, .L2004
-	mov	r3, #428
-	mov	r1, #6
-	strh	r1, [r2, r3]	@ movhi
-	b	.L1918
-.L1914:
-	bl	GetSwlReplaceBlock
-	movw	r3, #65535
-	cmp	r0, r3
-	mov	r4, r0
-	bne	.L1918
-	ldr	r2, .L2004
-	mov	r3, #428
+	uxth	r3, r3
+	add	r1, r4, r3, asl #1
+	ldrh	r0, [r1, #16]
+.L1884:
+	cmp	r0, r2
+	beq	.L1885
+	ldrb	r1, [r4, #8]	@ zero_extendqisi2
+	cmp	r1, #1
+	bne	.L1886
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
+	mov	r7, r0
+	beq	.L1887
+	ldr	r3, .L1971
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1961
+	add	r3, r3, r0, asl #1
+	movw	r2, #3076
+	ldrh	r8, [r3, r2]
+	b	.L1953
+.L1886:
 	mov	r1, #0
-	strh	r1, [r2, r3]	@ movhi
-.L1909:
-	ldr	r5, .L2004
-	movw	r4, #65535
-	ldr	r3, .L2004+16
-	ldrh	r2, [r5, r3]
-	cmp	r2, r4
-	bne	.L1918
-	ldr	r3, .L2004+36
-	ldrh	r3, [r5, r3]
-	cmp	r3, r2
-	movne	r4, r2
-	bne	.L1918
-	ldr	r2, .L2004+8
-	ldrh	r7, [r5, r2]
-	cmp	r7, r3
-	movne	r4, r3
-	bne	.L1918
-	ldr	r8, .L2004+20
-	ldr	r2, [r5, #-1196]
-	ldrh	r3, [r5, r8]
-	cmp	r3, #23
-	movhi	r3, #1024
-	movls	r3, #5120
-	cmp	r2, r3
-	movls	r4, r7
-	bls	.L1918
-	mov	r2, #428
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
+	mov	r7, r0
+	beq	.L1887
+.L1961:
+	mov	r8, r7
+.L1953:
+	ldr	r3, .L1971
+	movw	r2, #3848
+	mov	r5, #0
+	str	r4, [sp, #32]
+	movw	ip, #65535
+	ldrh	r9, [r3, r2]
+	ldr	r2, .L1971+4
+	ldr	sl, [r2, #-972]
+	ldr	r6, [r2, #-1168]
+	movw	r2, #3928
+	ldrh	lr, [r3, r2]
+	mov	r2, r4
+	mov	r3, r5
+	b	.L1889
+.L1887:
 	mov	r3, #0
-	str	r3, [r5, #-1196]
-	mov	r6, r5
-	strh	r3, [r5, r2]	@ movhi
-	bl	GetSwlReplaceBlock
-	cmp	r0, r7
-	mov	r4, r0
-	bne	.L1920
-	ldr	r3, .L2004+24
-	ldrh	r1, [r5, r8]
-	ldrh	r2, [r5, r3]
-	cmp	r1, r2
-	movcs	r2, #80
-	strcsh	r2, [r5, r3]	@ movhi
-	bcs	.L1930
-	mov	r0, #64
-	bl	List_get_gc_head_node
-	uxth	r3, r0
-	cmp	r3, r4
-	beq	.L1930
-	ldr	r2, [r5, #-1004]
-	cmp	r2, #0
-	bne	.L1923
-	ldr	r2, .L2004+12
-	movw	r1, #3864
-	ldrh	r1, [r2, r1]
-	cmp	r1, #3
-	beq	.L1923
-	ldr	r1, [r5, #-1716]
-	cmp	r1, #0
-	bne	.L1923
-	ldr	r1, [r2, #3836]
-	cmp	r1, #0
-	bne	.L1923
-	ldrb	r0, [r2, #928]	@ zero_extendqisi2
+	strh	r3, [r4, #2]	@ movhi
+	mov	r2, r3	@ movhi
+.L1968:
+	strb	r2, [r4, #6]
+	b	.L1882
+.L1891:
+	ldrh	r0, [r2, #16]
+	cmp	r0, ip
+	beq	.L1890
+	mov	fp, #36
+	orr	r0, r8, r0, asl #10
+	mla	r1, fp, r5, sl
+	str	r0, [r1, #4]
+	mov	r0, #0
+	str	r0, [r1, #8]
+	mul	r0, lr, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	fp, r0, #3
 	cmp	r0, #0
-	beq	.L1924
-.L1923:
-	ldr	r1, .L2004
-	mov	r3, r3, asl #1
-	movw	ip, #3844
-	movw	lr, #3864
-	ldr	r2, [r1, #-2020]
-	ldrh	r0, [r2, r3]
-	movw	r2, #3914
-	ldr	r3, .L2004+12
-	ldrh	r2, [r3, r2]
-	ldrh	ip, [r3, ip]
-	ldrh	r3, [r3, lr]
-	mul	ip, ip, r2
-	cmp	r3, #3
-	moveq	r3, r2, lsr #1
+	movlt	r0, fp
+	bic	r0, r0, #3
+	add	r0, r6, r0
+	str	r0, [r1, #12]
+.L1890:
+	add	r3, r3, #1
+	add	r2, r2, #2
+	uxth	r3, r3
+.L1889:
+	cmp	r3, r9
+	bne	.L1891
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cmp	r3, #1
 	movne	r3, #0
-	add	r3, ip, r3
-	cmp	r0, r3
-	bgt	.L1926
-	mov	r0, #0
-	bl	List_get_gc_head_node
-	ldr	r2, .L2004+12
-	ldr	r3, .L2004
-	ldr	r2, [r2, #3972]
-	ldr	r1, [r3, #-1848]
-	add	r2, r2, r2, asl #1
-	cmp	r1, r2, lsr #2
-	ldr	r2, .L2004+24
-	movhi	r1, #128
-	movls	r1, #160
-	strh	r1, [r3, r2]	@ movhi
-	uxth	r4, r0
-	b	.L1928
-.L1926:
-	ldr	r3, .L2004+24
-	mov	r2, #128
-	strh	r2, [r1, r3]	@ movhi
-	b	.L1930
-.L1924:
-	ldr	r2, [r5, #-2020]
-	mov	r3, r3, asl #1
-	ldr	r6, .L2004
-	ldr	r5, .L2004+24
-	ldrh	r3, [r2, r3]
-	cmp	r3, #7
-	movhi	r3, #64
-	strhih	r3, [r6, r5]	@ movhi
-	bhi	.L1930
-	bl	List_get_gc_head_node
-	mov	r3, #128
-	strh	r3, [r6, r5]	@ movhi
-	uxth	r4, r0
-.L1928:
-	movw	r3, #65535
-	cmp	r4, r3
-	beq	.L1930
-.L1920:
-	ldr	r1, .L2004
-	mov	r0, r4, asl #1
-	ldr	r3, .L2004+20
-	ldr	ip, [r1, #-2084]
-	ldrh	r2, [r1, r3]
-	ldr	r3, [r1, #-2020]
-	ldrh	r3, [r3, r0]
-	ldrh	r0, [ip, r0]
-	str	r0, [sp, #0]
-	ldr	r0, .L2004+40
-	ldrh	r1, [r1, r0]
-	ldr	r0, .L2004+44
-	str	r1, [sp, #4]
-	mov	r1, r4
+	bne	.L1962
+	ldr	r3, .L1971
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	adds	r3, r3, #0
+	movne	r3, #1
+.L1962:
+	ldr	r6, .L1971+4
+	mov	r1, r5
+	str	r3, [sp, #20]
+	mov	sl, #0
+	ldr	r2, [sp, #20]
+	ldr	r0, [r6, #-972]
+	bl	FlashReadPages
+	ldr	fp, [r6, #-1800]
+	movw	ip, #65535
+	str	ip, [sp, #4]
+	str	fp, [sp, #8]
+	b	.L1893
+.L1898:
+	mov	lr, #36
+	ldr	r1, [r6, #-972]
+	mul	r2, lr, sl
+	add	r3, r1, r2
+	ldr	r2, [r1, r2]
+	cmp	r2, #0
+	bne	.L1894
+	ldr	r3, [r3, #12]
+	ldr	fp, [r3, #4]
+	cmn	fp, #1
+	beq	.L1895
+	ldr	r1, [r6, #-1800]
+	mov	r0, fp
+	str	r3, [sp, #0]
+	bl	ftl_cmp_data_ver
+	ldr	r3, [sp, #0]
+	cmp	r0, #0
+	addne	fp, fp, #1
+	strne	fp, [r6, #-1800]
+.L1895:
+	ldr	r3, [r3, #0]
+	cmn	r3, #1
+	bne	.L1897
+	b	.L1896
+.L1894:
+	ldr	r1, [r3, #4]
+	movw	fp, #294
+	ldr	r0, .L1971+8
 	bl	printk
-.L1930:
-	bl	FtlGcReFreshBadBlk
-.L1918:
-	movw	r0, #65535
-	rsb	ip, r0, r4
-	rsbs	r1, ip, #0
+	ldrh	r3, [r4, #0]
+	uxth	r2, r8
+	str	r2, [sp, #4]
+	strh	r3, [r6, fp]	@ movhi
+.L1897:
+	add	sl, sl, #1
+.L1893:
+	uxth	r9, sl
+	cmp	r9, r5
+	bcc	.L1898
+.L1896:
+	ldr	r3, .L1971+4
+	cmp	r9, r5
+	addeq	r7, r7, #1
+	uxthne	r7, r7
+	movne	r2, #36
+	ldrne	r3, [r3, #-972]
+	uxtheq	r7, r7
+	ldreq	r3, [r3, #-972]
+	mlane	r9, r2, r9, r3
+	ldreq	r0, [r3, #4]
+	ldrne	r0, [r9, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_plane
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	ldr	r3, .L1971
+	cmp	r2, #1
+	str	r0, [sp, #16]
+	bne	.L1901
+	ldrb	r1, [r3, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	addeq	r7, r3, r7, asl #1
+	movweq	r1, #3076
+	ldreqh	r7, [r7, r1]
+.L1901:
+	movw	r1, #3916
+	ldr	ip, [sp, #12]
+	ldrh	r3, [r3, r1]
+	ldr	fp, [sp, #24]
+	cmp	r3, r7
+	streqh	r7, [r4, #2]	@ movhi
+	moveq	r3, #0
+	streqb	r3, [r4, #6]
+	streqh	r3, [r4, #4]	@ movhi
 	ldr	r3, [sp, #16]
-	adc	r1, r1, ip
-	ldr	r5, .L2004
-	cmp	r3, #0
-	movne	r2, #0
-	andeq	r2, r1, #1
+	cmp	r7, ip
+	cmpeq	r3, fp
+	beq	.L1969
+.L1903:
+	ldr	fp, [sp, #4]
+	movw	r3, #65535
+	ldr	ip, [sp, #8]
+	cmp	fp, r3
+	sub	r6, ip, #1
+	bne	.L1904
 	cmp	r2, #0
-	beq	.L1931
-	ldr	r3, .L2004+20
-	ldrh	r2, [r5, r3]
-	cmp	r2, #24
-	movhi	r6, #1
-	bhi	.L1932
-	ldr	r1, .L2004+12
-	movw	r3, #3912
-	cmp	r2, #16
-	ldrh	r6, [r1, r3]
-	movhi	r6, r6, lsr #5
-	bhi	.L1932
-	cmp	r2, #12
-	movhi	r6, r6, lsr #4
-	bhi	.L1932
-	cmp	r2, #8
-	movhi	r6, r6, lsr #2
-.L1932:
-	ldr	r1, .L2004+40
-	ldr	r3, .L2004
-	ldrh	r0, [r5, r1]
-	cmp	r0, r2
-	bcs	.L1936
-	ldr	r2, .L2004+36
-	movw	r0, #65535
-	ldrh	r2, [r3, r2]
-	cmp	r2, r0
-	bne	.L1937
-	ldr	r0, .L2004+8
-	ldrh	r0, [r3, r0]
-	cmp	r0, r2
-	bne	.L1937
-	mov	r2, #428
-	ldrh	r0, [r3, r2]
+	bne	.L1905
+.L1904:
+	ldr	r2, .L1971+4
+	uxth	r3, r8
+	ldr	ip, [sp, #12]
+	mvn	fp, #0
+	mov	sl, r3
+	mov	r9, fp
+	ldr	r1, [r2, #-1008]
+	ldr	r8, .L1971+4
+	cmn	r1, #1
+	streq	r6, [r2, #-1008]
+	ldr	r2, [r2, #-1008]
+	str	r2, [sp, #4]
+	add	r2, ip, #7
+	cmp	r3, r2
+	subgt	r5, r3, #7
+	mov	r3, r7
+	ldrle	r5, [sp, #12]
+	mov	r7, r6
+	uxthgt	r5, r5
+	b	.L1908
+.L1910:
+	ldrh	r0, [r1, #16]
+	movw	lr, #65535
+	cmp	r0, lr
+	beq	.L1909
+	ldr	ip, [sp, #8]
+	mov	r3, #36
+	orr	r0, r5, r0, asl #10
+	mla	lr, r3, r6, ip
+	add	r6, r6, #1
+	uxth	r6, r6
+	str	r0, [lr, #4]
+.L1909:
+	add	r2, r2, #1
+	add	r1, r1, #2
+	uxth	r2, r2
+.L1921:
+	ldr	lr, [sp, #36]
+	cmp	r2, lr
+	bne	.L1910
+	ldr	r3, [sp, #28]
+	mov	r1, r6
+	ldr	r0, [r8, #-972]
+	ldr	r2, [sp, #20]
+	str	r3, [sp, #0]
+	bl	FlashReadPages
+	ldr	r2, .L1971
+	add	r0, r8, r5, asl #1
+	mov	r1, #0
+	str	r0, [sp, #8]
+	ldr	r3, [sp, #0]
+	ldrb	ip, [r2, #928]	@ zero_extendqisi2
+	ldr	r2, [r8, #-972]
+	str	ip, [sp, #28]
+	b	.L1911
+.L1919:
+	ldr	r0, [r2, #0]
 	cmp	r0, #0
-	bne	.L1938
-	ldr	r2, .L2004+12
-	ldr	ip, [r3, #-1848]
-	ldr	r2, [r2, #3972]
-	add	r2, r2, r2, asl #1
-	cmp	ip, r2, lsr #2
-	movcs	r2, #18
-	bcs	.L2002
-.L1938:
-	ldr	r3, .L2004
-	ldr	r2, .L2004+48
-	ldr	r1, .L2004+40
-	ldrh	r2, [r3, r2]
-	add	r2, r2, r2, asl #1
-	mov	r2, r2, asr #2
-.L2002:
-	strh	r2, [r3, r1]	@ movhi
-	mov	r2, #0
-	ldr	r3, .L2004
-	str	r2, [r3, #-1188]
-	b	.L1941
-.L1937:
-	ldr	r3, .L2004
-	ldr	r2, .L2004+48
-	ldr	r1, .L2004+40
-	ldrh	r2, [r3, r2]
-	add	r2, r2, r2, asl #1
-	mov	r2, r2, asr #2
-	strh	r2, [r3, r1]	@ movhi
-.L1936:
-	ldr	r3, .L2004+12
-	cmp	sl, #2
-	movw	r4, #65535
-	movhi	sl, #0
-	movls	sl, #1
-	ldr	r3, [r3, #3836]
-	cmp	r3, #0
-	moveq	sl, #0
-	cmp	sl, #0
-	addne	r6, r6, #1
-	uxthne	r6, r6
-	b	.L1942
-.L1931:
-	ldr	r3, .L2004+36
-	ldrh	r3, [r5, r3]
-	cmp	r3, r0
-	bne	.L1943
-	ldr	r0, .L2004+8
-	ldrh	r0, [r5, r0]
-	cmp	r0, r3
-	movne	r1, #0
-	andeq	r1, r1, #1
-	cmp	r1, #0
-	beq	.L1943
-	ldr	r1, .L2004+16
-	ldrh	r4, [r5, r1]
-	cmp	r4, r3
-	movne	r4, r3
-	bne	.L1943
-	ldr	r3, .L2004+20
-	mov	r6, #428
-	str	r2, [r5, #-1188]
-	ldrh	r7, [r5, r3]
-	add	r3, r3, #804
-	ldrh	r2, [r5, r3]
-	cmp	r2, r7
-	bcs	.L1944
-	ldrh	r2, [r5, r6]
-	cmp	r2, #0
-	bne	.L1945
-	ldr	r2, .L2004+12
-	ldr	r1, [r5, #-1848]
-	ldr	r2, [r2, #3972]
-	add	r2, r2, r2, asl #1
-	cmp	r1, r2, lsr #2
-	movcs	r2, #18
-	strcsh	r2, [r5, r3]	@ movhi
-	bcs	.L1947
-.L1945:
-	ldr	r3, .L2004
-	ldr	r2, .L2004+48
-	ldr	r1, .L2004+40
-	ldrh	r2, [r3, r2]
-	add	r2, r2, r2, asl #1
-	mov	r2, r2, asr #2
-	strh	r2, [r3, r1]	@ movhi
-.L1947:
-	bl	FtlReadRefresh
-	mov	r3, #428
-	ldr	r2, .L2004
-	b	.L2003
-.L1944:
-	ldrh	r0, [r5, r6]
+	bne	.L1912
+	ldr	r0, [r2, #12]
+	movw	ip, #65535
+	ldrh	lr, [r0, #0]
+	cmp	lr, ip
+	beq	.L1913
+	ldr	r0, [r0, #4]
+	cmn	r0, #1
+	beq	.L1913
+	cmn	fp, #1
+	ldr	r9, [r8, #-1008]
+	str	r0, [r8, #-1008]
+	bne	.L1913
+	ldr	lr, [sp, #8]
+	sub	r0, lr, #892
+	ldrh	r0, [r0, #0]
+	cmp	r0, ip
+	bne	.L1914
+	ldr	r0, [sp, #28]
 	cmp	r0, #0
-	bne	.L1943
-	ldr	r2, .L2004+48
-	ldrh	r4, [r5, r2]
-	add	r2, r4, r4, asl #1
-	mov	r2, r2, asr #2
+	beq	.L1913
+.L1914:
+	cmp	r9, r7
+	mvneq	fp, #0
+	movne	fp, r9
+	b	.L1913
+.L1912:
+	mov	r6, r7
+	ldrh	r1, [r4, #0]
+	mov	r7, r3
+	ldr	r3, .L1971+4
+	movw	r2, #294
+	strh	r1, [r3, r2]	@ movhi
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1905
+	add	r5, r3, r5, asl #1
+	movw	r2, #65535
+	sub	r5, r5, #892
+	ldrh	r1, [r5, #0]
+	cmp	r1, r2
+	bne	.L1915
+	cmn	fp, #1
+	bne	.L1964
+.L1916:
+	ldr	fp, [sp, #4]
+	cmp	fp, r6
+	beq	.L1917
+.L1964:
+	str	fp, [r3, #-1008]
+	b	.L1905
+.L1917:
+	ldr	r2, [r3, #-1008]
+	b	.L1970
+.L1915:
+	cmp	r9, r6
+	beq	.L1918
+	cmn	r9, #1
+	strne	r9, [r3, #-1008]
+	b	.L1905
+.L1918:
+	ldr	r2, [r3, #-1008]
+	cmp	r2, r6
+	beq	.L1905
+.L1970:
+	sub	r2, r2, #1
+	b	.L1965
+.L1913:
+	add	r1, r1, #1
+	add	r2, r2, #36
+	uxth	r1, r1
+.L1911:
+	cmp	r1, r6
+	bne	.L1919
+	add	r5, r5, #1
+	uxth	r5, r5
+.L1908:
+	cmp	r5, sl
+	bhi	.L1920
+	ldr	r1, .L1971
+	movw	r2, #3848
+	ldr	lr, [r8, #-972]
+	mov	r6, #0
+	str	r3, [sp, #28]
+	ldrh	ip, [r1, r2]
+	mov	r1, r4
+	str	lr, [sp, #8]
+	mov	r2, r6
+	str	ip, [sp, #36]
+	b	.L1921
+.L1920:
+	mov	r6, r7
+	mov	r7, r3
+	ldr	r3, .L1971+4
+	mvn	r2, #0
+.L1965:
+	str	r2, [r3, #-1008]
+.L1905:
+	ldr	r5, .L1971+4
+	mov	r3, #296
+	mov	r2, #1
+	sub	r0, r5, #1088
 	strh	r2, [r5, r3]	@ movhi
-	bl	List_get_gc_head_node
-	ldr	r3, [r5, #-2020]
-	ldr	r1, .L2004+12
-	movw	r2, #3914
-	ldrh	r2, [r1, r2]
-	uxth	r0, r0
-	mov	r0, r0, asl #1
-	ldrh	r3, [r3, r0]
-	movw	r0, #3844
-	ldrh	r1, [r1, r0]
-	mul	r2, r1, r2
-	add	r2, r2, r2, lsr #31
-	cmp	r3, r2, asr #1
-	ble	.L1948
-	sub	r4, r4, #1
-	cmp	r7, r4
-	blt	.L1948
-	bl	FtlReadRefresh
-	ldrh	r0, [r5, r6]
-	b	.L1941
+	bl	FtlMapBlkWriteDumpData
+	ldr	r8, [sp, #12]
+	str	r7, [sp, #8]
+.L1922:
+	ldr	r3, .L1971
+	movw	r2, #3848
+	mov	r7, #0
+	ldr	lr, [r5, #-972]
+	mov	fp, #36
+	ldrh	sl, [r3, r2]
+	mov	r2, r4
+	ldrb	ip, [r3, #928]	@ zero_extendqisi2
+	mov	r3, r7
+	b	.L1923
+.L1926:
+	ldrh	r0, [r2, #16]
+	movw	r1, #65535
+	cmp	r0, r1
+	beq	.L1924
+	mla	r1, fp, r7, lr
+	orr	r0, r8, r0, asl #10
+	str	r0, [r1, #4]
+	ldrb	r9, [r4, #8]	@ zero_extendqisi2
+	cmp	r9, #1
+	bne	.L1925
+	cmp	ip, #0
+	orrne	r0, r0, #-2147483648
+	strne	r0, [r1, #4]
+.L1925:
+	add	r7, r7, #1
+	uxth	r7, r7
+.L1924:
+	add	r3, r3, #1
+	add	r2, r2, #2
+	uxth	r3, r3
+.L1923:
+	cmp	r3, sl
+	bne	.L1926
+	mov	r1, r7
+	ldr	r0, [r5, #-972]
+	ldr	r2, [sp, #20]
+	bl	FlashReadPages
+	mov	r3, #36
+	mul	r3, r3, r7
+	mov	r7, #0
+	str	r3, [sp, #36]
+	b	.L1927
 .L1948:
+	ldr	r9, [r5, #-972]
+	add	r9, r9, r7
+	ldr	sl, [r9, #4]
+	ubfx	r0, sl, #10, #16
+	str	sl, [sp, #52]
+	bl	P2V_plane
+	ldr	r3, [sp, #12]
+	cmp	r8, r3
+	bcc	.L1928
+	ldr	fp, [sp, #24]
+	mov	ip, r3
+	cmp	r0, fp
+	movcs	r3, #0
+	movcc	r3, #1
+	cmp	r8, ip
+	movne	r3, #0
 	cmp	r3, #0
-	movwne	r4, #65535
-	bne	.L1943
-	movw	r0, #65535
-	bl	decrement_vpc_count
-	ldr	r3, .L2004+20
-	ldr	r2, .L2004
-	ldrh	r0, [r2, r3]
-	add	r0, r0, #1
-	b	.L1941
-.L1943:
-	ldr	r3, .L2004+12
-	ldr	r6, [r3, #3836]
-	cmp	r6, #0
-	movne	r6, #2
-	moveq	r6, #1
-.L1942:
-	ldr	r3, .L2004
-	movw	r0, #65535
-	ldr	r2, .L2004+16
-	ldrh	r1, [r3, r2]
-	cmp	r1, r0
-	bne	.L1949
-	cmp	r4, r1
-	strneh	r4, [r3, r2]	@ movhi
-	bne	.L1951
-	ldr	r2, .L2004+8
-	ldrh	r1, [r3, r2]
-	cmp	r1, r4
-	beq	.L1951
-	ldr	r0, [r3, #-2020]
-	mov	r1, r1, asl #1
-	ldrh	r1, [r0, r1]
-	cmp	r1, #0
-	mvneq	r1, #0
-	streqh	r1, [r3, r2]	@ movhi
-	ldr	r3, .L2004
-	ldr	r1, .L2004+16
-	ldrh	r0, [r3, r2]
-	strh	r0, [r3, r1]	@ movhi
-	mvn	r1, #0
-	strh	r1, [r3, r2]	@ movhi
-.L1951:
-	ldr	r5, .L2004
-	mov	r3, #0
-	ldr	r7, .L2004+16
-	strb	r3, [r5, #-1756]
-	movw	r3, #65535
-	ldrh	r0, [r5, r7]
+	bne	.L1928
+	ldr	r3, [sp, #16]
+	ldr	ip, [sp, #8]
 	cmp	r0, r3
-	beq	.L1949
-	bl	IsBlkInGcList
+	cmpeq	r8, ip
+	beq	.L1960
+	ldr	r3, [r9, #0]
+	cmn	r3, #1
+	beq	.L1930
+	ldr	sl, [r9, #12]
+	movw	r3, #61589
+	ldrh	r2, [sl, #0]
+	cmp	r2, r3
+	bne	.L1937
+.L1931:
+	ldr	r6, [sl, #4]
+	cmn	r6, #1
+	beq	.L1932
+	ldr	r1, [r5, #-1800]
+	mov	r0, r6
+	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	mvnne	r3, #0
-	strneh	r3, [r5, r7]	@ movhi
-	ldr	r3, .L2004+12
-	ldr	r7, .L2004
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L1954
-	ldr	r3, .L2004+16
-	ldrh	r0, [r7, r3]
-	bl	ftl_get_blk_mode
-	strb	r0, [r7, #-1756]
-.L1954:
-	ldr	r8, .L2004+16
-	movw	r3, #65535
-	ldr	r5, .L2004
-	ldrh	r2, [r7, r8]
+	addne	r3, r6, #1
+	strne	r3, [r5, #-1800]
+.L1932:
+	ldr	r9, [sl, #8]
+	add	r1, sp, #48
+	ldr	r3, [sl, #12]
+	mov	r2, #0
+	mov	r0, r9
+	str	r3, [sp, #44]
+	bl	log2phys
+	ldr	r1, [r5, #-1008]
+	cmn	r1, #1
+	beq	.L1933
+	mov	r0, r6
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1933
+	ldr	r3, [sp, #44]
+	cmn	r3, #1
+	beq	.L1934
+	ldr	r0, [r5, #-972]
+	mov	r1, #1
+	mov	r2, #0
+	add	r0, r0, r7
+	ldr	fp, [r0, #12]
+	str	r3, [r0, #4]
+	str	fp, [sp, #4]
+	bl	FlashReadPages
+	ldr	r3, [r5, #-972]
+	ldr	ip, [fp, #4]
+	add	fp, r3, r7
+	ldr	r3, [r3, r7]
+	str	ip, [sp, #28]
+	cmn	r3, #1
+	bne	.L1935
+	b	.L1936
+.L1934:
+	ldr	r3, [sp, #52]
+	ldr	r2, [sp, #48]
 	cmp	r2, r3
-	beq	.L1949
-	ldr	r0, .L2004+52
-	bl	make_superblock
-	ldr	r1, .L2004+56
-	movw	r2, #430
-	mov	r3, #0
-	strh	r3, [r5, r2]	@ movhi
-	strh	r3, [r5, r1]	@ movhi
-	strb	r3, [r5, #-1758]
-	ldrh	r3, [r5, r8]
-	ldr	r2, [r5, #-2020]
-	mov	r3, r3, asl #1
-	ldrh	r2, [r2, r3]
-	mov	r3, #432
-	strh	r2, [r5, r3]	@ movhi
-.L1949:
-	ldr	r3, .L2004
-	ldr	r0, .L2004+16
-	ldr	r2, .L2004+60
-	ldrh	r1, [r3, r0]
-	ldrh	r2, [r3, r2]
-	cmp	r2, r1
-	mov	r2, r3
-	beq	.L1955
-	ldr	ip, .L2004+64
-	ldrh	r3, [r3, ip]
-	cmp	r3, r1
-	movne	fp, r4
-	bne	.L1999
-.L1956:
-.L1955:
-	mvn	r3, #0
-	strh	r3, [r2, r0]	@ movhi
-	mov	r3, #428
-.L2003:
-	ldrh	r0, [r2, r3]
-	b	.L1941
-.L1999:
-	ldr	r4, .L2004
-	movw	sl, #65535
-	ldr	r9, .L2004+16
-	ldrh	r3, [r4, r9]
-	cmp	r3, sl
-	bne	.L1958
-	ldr	r5, .L2004+28
-	mov	r3, #0
-	str	r3, [r4, #-1188]
-.L1998:
-	ldrh	r8, [r4, r5]
-	mov	r0, r8
-	bl	List_get_gc_head_node
-	movw	r1, #65535
-	uxth	r7, r0
-	strh	r7, [r4, r9]	@ movhi
-	cmp	r7, r1
-	bne	.L1960
-	ldr	r3, .L2004+28
-	mov	r1, #0
-	ldr	r2, .L2004
-	mov	r0, #8
-	strh	r1, [r2, r3]	@ movhi
-	b	.L1941
-.L1960:
-	mov	r0, r7
-	bl	IsBlkInGcList
+	bne	.L1937
+	mov	r0, r9
+	add	r1, sp, #44
+	mov	r2, #1
+	bl	log2phys
+.L1937:
+	ldrh	r0, [r4, #0]
+	b	.L1967
+.L1935:
+	ldr	r3, [sp, #4]
+	ldr	sl, [r3, #8]
+	cmp	sl, r9
+	bne	.L1936
+	ldr	r0, [r5, #-1008]
+	ldr	r1, [sp, #28]
+	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	add	r0, r8, #1
-	strneh	r0, [r4, r5]	@ movhi
-	bne	.L1998
-	ldr	ip, .L2004+12
-	movw	r8, #3912
-	ldr	r2, [r4, #-2020]
-	mov	r3, r7, asl #1
-	uxth	r0, r0
-	strh	r0, [r4, r5]	@ movhi
-	ldrh	sl, [ip, r8]
-	movw	r8, #3844
-	ldrh	ip, [ip, r8]
-	ldrh	r1, [r2, r3]
-	mul	sl, ip, sl
-	add	ip, sl, sl, lsr #31
-	cmp	r1, ip, asr #1
-	bgt	.L1963
-	cmp	r0, #48
-	bls	.L1964
-	cmp	r1, #8
-	bls	.L1964
-	ldr	r1, .L2004+68
-	ldrh	r1, [r4, r1]
-	cmp	r1, #35
-	bhi	.L1964
-.L1963:
-	mov	r1, #0
-	strh	r1, [r4, r5]	@ movhi
-.L1964:
-	ldrh	r3, [r2, r3]
-	movw	r2, #65535
-	cmp	r3, sl
-	cmpge	fp, r2
-	ldr	sl, .L2004
-	movne	r8, #0
-	moveq	r8, #1
-	bne	.L1965
-	ldr	r3, .L2004+16
-	mvn	r2, #0
-	strh	r2, [sl, r3]	@ movhi
-	add	r3, r3, #572
+	beq	.L1936
+	ldr	r3, [sp, #48]
+	ldr	r2, [sp, #52]
+	cmp	r3, r2
+	beq	.L1941
+.L1938:
+	ldr	r2, [sp, #44]
+	cmp	r3, r2
+	beq	.L1936
+	cmn	r3, #1
+	streq	r3, [fp, #0]
+	beq	.L1940
+	ldr	ip, [fp, #12]
+	mov	r0, fp
+	str	r3, [fp, #4]
+	mov	r1, #1
 	mov	r2, #0
-	strh	r2, [sl, r3]	@ movhi
-	mov	r3, #428
-	ldrh	r0, [sl, r3]
-	b	.L1941
-.L1965:
-	cmp	r3, #0
-	bne	.L1966
-	movw	r0, #65535
+	str	ip, [sp, #4]
+	bl	FlashReadPages
+.L1940:
+	ldr	r3, [r5, #-972]
+	ldr	r3, [r3, r7]
+	cmn	r3, #1
+	beq	.L1941
+	ldr	r3, [sp, #4]
+	ldr	r0, [r5, #-1008]
+	ldr	r9, [r3, #4]
+	mov	r1, r9
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1941
+	ldr	r0, [sp, #28]
+	mov	r1, r9
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1936
+.L1941:
+	mov	r0, sl
+	ldr	r1, [sp, #44]
+	bl	FtlReUsePrevPpa
+.L1936:
+	ldrh	r0, [r4, #0]
+	mvn	r3, #0
+	str	r3, [sp, #44]
 	bl	decrement_vpc_count
-	ldrh	r3, [r4, r5]
-	add	r3, r3, #1
-	strh	r3, [r4, r5]	@ movhi
-	b	.L1998
-.L1966:
-	ldr	r3, .L2004+12
-	strb	r8, [sl, #-1756]
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	b	.L1943
+.L1933:
+	ldr	r3, [sp, #52]
+	ldr	r2, [sp, #48]
+	cmp	r2, r3
+	beq	.L1943
+	mov	r0, r9
+	add	r1, sp, #52
+	mov	r2, #1
+	bl	log2phys
+	ldr	fp, [sp, #48]
+	cmn	fp, #1
+	beq	.L1943
+	ldr	r3, [sp, #44]
+	cmp	fp, r3
+	beq	.L1943
+	ubfx	r0, fp, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, .L1971+12
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	beq	.L1944
+	ldr	r3, .L1971+16
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	beq	.L1944
+	ldr	r3, .L1971+20
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	bne	.L1943
+.L1944:
+	ldr	ip, .L1971+4
+	mov	r1, #1
+	mov	r2, #0
+	ldr	r0, [ip, #-972]
+	str	fp, [r0, #4]
+	ldr	sl, [r0, #12]
+	bl	FlashReadPages
+	ldr	r0, .L1971+4
+	ldr	r1, [sl, #4]
+	ldr	r3, [r0, #-972]
+	ldr	r3, [r3, #0]
+	cmn	r3, #1
+	beq	.L1943
+	mov	r0, r6
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	bne	.L1943
+	mov	r0, r9
+	add	r1, sp, #48
+	mov	r2, #1
+	bl	log2phys
+.L1943:
+	ldr	r0, [sp, #44]
+	cmn	r0, #1
+	beq	.L1928
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r5, #-2016]
+	mov	r3, r0, asl #1
+	mov	r1, r0
+	ldrh	r3, [r2, r3]
 	cmp	r3, #0
-	beq	.L1967
-	mov	r0, r7
-	bl	ftl_get_blk_mode
-	strb	r0, [sl, #-1756]
+	beq	.L1945
 .L1967:
-	ldr	r4, .L2004
-	ldr	r0, .L2004+52
-	bl	make_superblock
-	movw	r1, #430
-	mov	r3, #0
-	strh	r3, [r4, r1]	@ movhi
-	ldr	r1, .L2004+16
-	ldr	r0, [r4, #-2020]
-	ldrh	r1, [r4, r1]
-	mov	r1, r1, asl #1
-	ldrh	r0, [r0, r1]
-	mov	r1, #432
-	strb	r3, [r4, #-1758]
-	strh	r0, [r4, r1]	@ movhi
-	ldr	r1, .L2004+56
-	strh	r3, [r4, r1]	@ movhi
-.L1958:
-	ldr	sl, [sp, #16]
-	cmp	sl, #1
-	bne	.L1968
-	bl	FtlReadRefresh
-.L1968:
-	ldr	r3, .L2004
-	mov	r2, #1
-	movw	r1, #3912
-	str	r2, [r3, #-1000]
-	ldr	r2, .L2004+12
-	ldrh	r9, [r2, r1]
-	ldrb	r1, [r2, #928]	@ zero_extendqisi2
-	cmp	r1, #0
-	beq	.L1969
-	ldrb	r1, [r3, #-1756]	@ zero_extendqisi2
-	cmp	r1, #1
-	movweq	r1, #3914
-	ldreqh	r9, [r2, r1]
-.L1969:
-	ldr	r2, .L2004+56
-	mov	r8, #0
-	str	fp, [sp, #20]
-	mov	fp, r9
-	ldr	r4, .L2004
+	bl	decrement_vpc_count
+	b	.L1928
+.L1945:
+	ldr	r0, .L1971+24
+	bl	printk
+	b	.L1928
+.L1930:
+	ldrh	r3, [r4, #0]
+	movw	r1, #294
+	mov	r2, r6
+	ldr	r0, .L1971+28
+	strh	r3, [r5, r1]	@ movhi
+	mov	r1, sl
+	bl	printk
+	ldr	r3, [r5, #300]
+	cmp	r3, #31
+	addls	r2, r5, r3, asl #2
+	addls	r3, r3, #1
+	ldrls	r1, [sp, #52]
+	strls	r3, [r5, #300]
+	strls	r1, [r2, #304]
+	ldrh	r0, [r4, #0]
+	bl	decrement_vpc_count
+	ldr	r3, [r5, #-1008]
+	cmn	r3, #1
+	beq	.L1966
+.L1947:
+	cmp	r3, r6
+	bls	.L1928
+.L1966:
+	str	r6, [r5, #-1008]
+.L1928:
+	add	r7, r7, #36
+.L1927:
+	ldr	r3, [sp, #36]
+	cmp	r7, r3
+	bne	.L1948
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	add	r8, r8, #1
+	cmp	r3, #1
+	uxth	r8, r8
+	bne	.L1949
+	ldr	r3, .L1971
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1949
+	movw	r2, #3918
+	ldr	ip, [sp, #8]
 	ldrh	r3, [r3, r2]
-	add	r2, r3, r6
-	cmp	r2, r9
-	rsbgt	r6, r3, r9
-	uxthgt	r6, r6
-	b	.L1971
-.L1973:
-	ldrh	r1, [r2, #2]!
-	movw	sl, #65535
+	cmp	ip, r8
+	cmpeq	r3, r8
+	beq	.L1960
+.L1949:
+	ldr	r3, .L1971
+	movw	r2, #3916
+	ldrh	r2, [r3, r2]
+	cmp	r8, r2
+	bne	.L1922
+	mov	r2, #0
+	movw	r1, #3848
+	strh	r2, [r4, #4]	@ movhi
+	ldrh	r1, [r3, r1]
+	mov	r3, r2
+	strh	r8, [r4, #2]	@ movhi
+	movw	r2, #65535
+	ldr	r0, [sp, #32]
+	b	.L1950
+.L1952:
+	add	r0, r0, #2
+	ldrh	ip, [r0, #14]
+	cmp	ip, r2
+	strneb	r3, [r4, #6]
+	bne	.L1882
+.L1951:
 	add	r3, r3, #1
-	cmp	r1, sl
 	uxth	r3, r3
-	orrne	r1, ip, r1, asl #10
-	mlane	sl, r0, r7, lr
-	addne	r7, r7, #1
-	uxthne	r7, r7
-	strne	r1, [sl, #4]
-.L1979:
-	cmp	r3, r5
-	bne	.L1973
-	ldr	r0, [r4, #-1168]
-	mov	r1, r7
-	ldrb	r2, [r4, #-1756]	@ zero_extendqisi2
-	mov	r5, #0
-	bl	FlashReadPages
-	mov	r9, r5
-	mov	sl, r6
-	b	.L1974
-.L1977:
-	ldr	r3, [r4, #-1168]
-	add	r2, r3, r5
-	ldr	r3, [r3, r5]
-	ldr	r6, [r2, #12]
-	cmn	r3, #1
-	beq	.L1975
-	ldrh	r3, [r6, #0]
-	movw	r1, #61589
+.L1950:
 	cmp	r3, r1
-	bne	.L1975
-	add	r1, sp, #28
-	mov	r2, #0
-	ldr	r0, [r6, #8]
-	bl	log2phys
-	ldr	r1, [r4, #-1168]
-	ldr	r2, [sp, #28]
-	add	r1, r1, r5
-	bic	r2, r2, #-2147483648
-	ldr	r3, [r1, #4]
-	cmp	r2, r3
-	bne	.L1975
-	movw	r3, #430
-	ldr	r0, [r4, #-1184]
-	ldrh	r2, [r4, r3]
-	ldr	r1, [r1, #16]
-	add	r2, r2, #1
-	strh	r2, [r4, r3]	@ movhi
-	ldr	r2, [r4, #-972]
-	mov	r3, #36
-	mla	r2, r3, r0, r2
-	str	r1, [r2, #16]
-	str	r2, [sp, #8]
-	str	r3, [sp, #12]
-	bl	Ftl_get_new_temp_ppa
-	ldr	r2, [sp, #8]
-	ldr	r1, [r4, #-1184]
-	str	r0, [r2, #4]
-	ldr	r3, [sp, #12]
-	ldr	r2, [r4, #-972]
-	mla	r3, r3, r1, r2
-	ldr	r2, [r4, #-1168]
-	add	r2, r2, r5
-	ldr	r1, [r2, #8]
-	str	r1, [r3, #8]
-	mov	r1, #1
-	ldr	r2, [r2, #12]
-	str	r2, [r3, #12]
-	ldr	r3, [sp, #28]
-	str	r3, [r6, #12]
-	ldr	r3, .L2004+36
-	ldrh	r3, [r4, r3]
-	strh	r3, [r6, #2]	@ movhi
-	ldr	r3, [r4, #-1804]
-	ldr	r0, [r4, #-1168]
-	str	r3, [r6, #4]
-	add	r0, r0, r5
-	ldr	r3, [r4, #-1184]
-	add	r3, r3, #1
-	str	r3, [r4, #-1184]
-	bl	FtlGcBufAlloc
-	ldr	r3, .L2004+12
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L1976
-	ldrb	r3, [r4, #-1897]	@ zero_extendqisi2
-	ldr	r2, [r4, #-1184]
-	cmp	r2, r3
-	beq	.L1976
-	ldr	r3, .L2004+72
-	ldrh	r3, [r4, r3]
-	cmp	r3, #0
-	bne	.L1975
-.L1976:
-	bl	Ftl_gc_temp_data_write_back
-	cmp	r0, #0
-	ldrne	r3, .L2004
-	movne	r2, #0
-	strne	r2, [r3, #-1000]
-	movne	r2, #428
-	bne	.L2003
-.L1975:
-	add	r9, r9, #1
-	add	r5, r5, #36
-	uxth	r9, r9
-.L1974:
-	cmp	r9, r7
-	bne	.L1977
-	add	r8, r8, #1
-	mov	r6, sl
-.L1971:
-	uxth	r3, r8
-	ldr	r7, .L2004
-	cmp	r3, r6
-	ldr	r3, .L2004+56
-	bcs	.L1978
-	ldr	r1, .L2004+12
-	movw	r2, #3844
-	ldrh	ip, [r4, r3]
-	mov	r7, #0
-	ldr	lr, [r4, #-1168]
-	mov	r3, r7
-	ldrh	r5, [r1, r2]
-	add	ip, ip, r8
-	ldr	r2, .L2004+76
-	mov	r0, #36
-	b	.L1979
-.L1978:
-	ldrh	r2, [r7, r3]
-	mov	r9, fp
-	ldr	fp, [sp, #20]
-	add	r6, r6, r2
-	uxth	r6, r6
-	strh	r6, [r7, r3]	@ movhi
-	cmp	r6, r9
-	bcc	.L1980
-	ldr	r3, [r7, #-1184]
-	cmp	r3, #0
-	beq	.L1981
-	bl	Ftl_gc_temp_data_write_back
-	cmp	r0, #0
-	movne	r3, #0
-	strne	r3, [r7, #-1000]
-	movne	r3, #428
-	ldrneh	r0, [r7, r3]
-	bne	.L1941
-.L1981:
-	ldr	r3, .L2004
-	movw	r2, #430
-	ldrh	ip, [r3, r2]
-	cmp	ip, #0
-	bne	.L1982
-	ldr	r2, .L2004+16
-	ldr	r0, [r3, #-2020]
-	ldrh	r1, [r3, r2]
-	mov	r1, r1, asl #1
-	ldrh	r4, [r0, r1]
-	cmp	r4, #0
-	beq	.L1982
-	strh	ip, [r0, r1]	@ movhi
-	ldrh	r0, [r3, r2]
-	bl	update_vpc_list
-	bl	FtlCacheWriteBack
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-.L1982:
-	ldr	r3, .L2004+16
-	mvn	r1, #0
-	ldr	r2, .L2004
-	strh	r1, [r2, r3]	@ movhi
-.L1980:
-	ldr	r3, .L2004
-	ldr	r2, .L2004+20
-	ldrh	r2, [r3, r2]
-	cmp	r2, #2
-	ldrls	r2, .L2004+12
-	movwls	r3, #3912
-	ldrlsh	r6, [r2, r3]
-	bls	.L1999
-.L1983:
-	mov	r1, #0
-	str	r1, [r3, #-1000]
-	mov	r1, #428
-	ldrh	r0, [r3, r1]
-	cmp	r0, #0
-	addeq	r0, r2, #1
-.L1941:
-	add	sp, sp, #36
+	bne	.L1952
+	b	.L1882
+.L1960:
+.L1929:
+	ldr	r7, [sp, #8]
+	ldr	r3, [sp, #16]
+	strh	r7, [r4, #2]	@ movhi
+	strb	r3, [r4, #6]
+.L1969:
+	mov	r0, r4
+	mov	r1, r7
+	mov	r2, r3
+	bl	ftl_sb_update_avl_pages
+.L1882:
+	mov	r0, #0
+	add	sp, sp, #60
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2005:
+.L1972:
 	.align	2
-.L2004:
-	.word	.LANCHOR2
-	.word	-1144
-	.word	-1146
+.L1971:
 	.word	.LANCHOR0
-	.word	-1764
-	.word	-2004
-	.word	-1198
-	.word	-1192
-	.word	.LC130
-	.word	-1904
-	.word	-1200
-	.word	.LC131
-	.word	-1780
-	.word	.LANCHOR2-1764
-	.word	-1762
-	.word	-2000
-	.word	-1952
-	.word	-1160
+	.word	.LANCHOR2
+	.word	.LC144
+	.word	-1996
+	.word	-1948
 	.word	-1900
-	.word	.LANCHOR2-1750
+	.word	.LC145
+	.word	.LC146
 	.fnend
-	.size	ftl_do_gc.part.21, .-ftl_do_gc.part.21
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
 	.align	2
-	.global	ftl_do_gc
-	.type	ftl_do_gc, %function
-ftl_do_gc:
+	.global	FtlWriteDumpData
+	.type	FtlWriteDumpData, %function
+FtlWriteDumpData:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	mov	r4, r0
-	ldr	r3, .L2013
-	mov	r5, r1
-	ldr	r0, [r3, #-2092]
-	cmp	r0, #0
-	movne	r0, #0
-	ldmnefd	sp!, {r3, r4, r5, pc}
-	ldr	r2, [r3, #-1000]
-	cmp	r2, #0
-	ldmnefd	sp!, {r3, r4, r5, pc}
-	ldr	r1, .L2013+4
-	ldrh	r1, [r3, r1]
-	cmp	r1, #47
-	movls	r0, r2
-	ldmlsfd	sp!, {r3, r4, r5, pc}
-	ldr	r1, .L2013+8
-	movw	r2, #3000
-	ldrh	r1, [r1, r2]
-	movw	r2, #65535
-	cmp	r1, r2
-	beq	.L2008
-	ldr	r1, .L2013+12
-	ldrh	r3, [r3, r1]
-	cmp	r3, r2
-	beq	.L2008
-	mov	r0, #1
-	bl	FtlGcFreeTempBlock
-	cmp	r0, #0
-	bne	.L2012
-.L2008:
-	mov	r0, r4
-	mov	r1, r5
-	ldmfd	sp!, {r3, r4, r5, lr}
-	b	ftl_do_gc.part.21
-.L2012:
-	mov	r0, #1
-	ldmfd	sp!, {r3, r4, r5, pc}
-.L2014:
-	.align	2
-.L2013:
-	.word	.LANCHOR2
-	.word	-2012
-	.word	.LANCHOR1
-	.word	-1904
-	.fnend
-	.size	ftl_do_gc, .-ftl_do_gc
-	.align	2
-	.global	FtlCacheWriteBack
-	.type	FtlCacheWriteBack, %function
-FtlCacheWriteBack:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2037
-	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
-	.save {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
-	ldr	r4, [r3, #436]
-	ldr	r3, [r3, #-2092]
+	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
+	.save {r4, r5, r6, r7, r8, sl, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r5, .L1982
+	ldr	r3, [r5, #4040]
 	cmp	r3, #0
-	bne	.L2016
-	ldr	r3, .L2037+4
-	ldr	r1, [r3, #3964]
+	bne	.L1973
+	ldr	r4, .L1982+4
+	ldr	r3, .L1982+8
+	mov	r2, r4
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	beq	.L1975
+	ldrb	r1, [r4, #-1988]	@ zero_extendqisi2
 	cmp	r1, #0
-	beq	.L2016
-	ldrb	r8, [r3, #928]	@ zero_extendqisi2
+	bne	.L1975
+	movw	r0, #3916
+	ldrb	r1, [r4, #-1989]	@ zero_extendqisi2
+	ldrh	r0, [r5, r0]
+	mul	r1, r0, r1
+	cmp	r3, r1
+	beq	.L1975
+	ldrb	r8, [r4, #-1986]	@ zero_extendqisi2
+	movw	r3, #3848
+	ldr	r7, [r5, #3976]
 	cmp	r8, #0
-	beq	.L2017
-	ldrb	r8, [r4, #8]	@ zero_extendqisi2
-	sub	lr, r8, #1
-	rsbs	r8, lr, #0
-	adc	r8, r8, lr
-.L2017:
-	ldr	r0, [r3, #3968]
+	ldrh	r6, [r5, r3]
+	bne	.L1973
+	sub	r7, r7, #1
+	mov	r1, sp
 	mov	r2, r8
-	ldrb	r3, [r4, #9]	@ zero_extendqisi2
-	mov	r5, #0
-	bl	FlashProgPages
-	mov	r7, r5
-	ldr	r6, .L2037+4
-	ldr	r9, .L2037
-	b	.L2018
-.L2023:
-	ldr	r2, [r6, #3968]
-	add	r3, r2, r5
-	ldr	r2, [r2, r5]
-	cmn	r2, #1
-	beq	.L2036
-	ldr	r2, [r3, #4]
-	cmp	r8, #0
-	ldr	r0, [r3, #16]
-	add	r1, sp, #4
-	str	r2, [sp, #4]
-	orrne	r2, r2, #-2147483648
-	strne	r2, [sp, #4]
-	mov	r2, #1
+	mov	r0, r7
 	bl	log2phys
-	ldr	r3, [r6, #3968]
-	add	r3, r3, r5
-	ldr	r3, [r3, #12]
-	ldr	r0, [r3, #12]
-	cmn	r0, #1
-	beq	.L2021
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldr	r2, [r9, #-2020]
-	mov	r3, r0, asl #1
-	mov	sl, r0
-	ldrh	r2, [r2, r3]
-	cmp	r2, #0
-	bne	.L2022
-	ldr	r0, .L2037+8
-	mov	r1, sl
-	bl	printk
-.L2022:
-	mov	r0, sl
-	bl	decrement_vpc_count
-.L2021:
-	add	r7, r7, #1
-	add	r5, r5, #36
-.L2018:
-	ldr	r3, [r6, #3964]
-	cmp	r7, r3
-	bcc	.L2023
-	b	.L2024
-.L2032:
-	ldr	r3, [r6, #3968]
-	mvn	r2, #0
-	movw	sl, #3912
-	str	r2, [r3, r5]
-	b	.L2025
-.L2028:
-	ldr	r0, [r3, #4]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldrh	r3, [r4, #0]
-	cmp	r3, r0
-	bne	.L2026
-	ldr	r2, [r7, #-2020]
-	mov	r3, r3, asl #1
-	ldrh	r1, [r4, #4]
-	ldrh	r0, [r2, r3]
-	rsb	r1, r1, r0
-	strh	r1, [r2, r3]	@ movhi
-	ldrh	r3, [r6, sl]
-	strh	r3, [r4, #2]	@ movhi
-	mov	r3, #0
-	strb	r3, [r4, #6]
-	strh	r3, [r4, #4]	@ movhi
-.L2026:
-	ldrh	r3, [r4, #4]
+	ldr	r3, [sp, #0]
+	ldr	r0, [r4, #-960]
+	ldr	r4, [r4, #-936]
+	cmn	r3, #1
+	str	r3, [sp, #8]
+	str	r7, [sp, #20]
+	str	r0, [sp, #12]
+	str	r4, [sp, #16]
+	str	r8, [r4, #4]
+	beq	.L1976
+	add	r0, sp, #4
+	mov	r1, #1
+	mov	r2, r8
+	bl	FlashReadPages
+	b	.L1977
+.L1976:
+	movw	r3, #3926
+	mov	r1, #255
+	ldrh	r2, [r5, r3]
+	bl	ftl_memset
+.L1977:
+	ldr	r3, .L1982+12
+	mov	r6, r6, asl #2
+	ldr	r5, .L1982+4
+	ldr	sl, .L1982+8
+	strh	r3, [r4, #0]	@ movhi
+	ldr	r8, .L1982+16
+	b	.L1978
+.L1981:
+	ldrh	r3, [r5, sl]
 	cmp	r3, #0
-	bne	.L2027
-	mov	r0, r4
-	bl	allocate_new_data_superblock
-.L2027:
-	ldr	r3, [r7, #-1616]
-	add	r3, r3, #1
-	str	r3, [r7, #-1616]
-	ldr	r3, [r6, #3968]
-	add	r3, r3, r5
-	ldr	r0, [r3, #4]
-	ubfx	r0, r0, #10, #16
-	bl	FtlGcMarkBadPhyBlk
-	mov	r0, r4
+	beq	.L1979
+	ldr	r3, [sp, #8]
+	sub	r6, r6, #1
+	str	r7, [r4, #8]
+	ldr	r0, .L1982+20
+	str	r3, [r4, #12]
+	ldrh	r3, [r5, r8]
+	strh	r3, [r4, #2]	@ movhi
 	bl	get_new_active_ppa
+	ldr	r3, [r5, #-1800]
+	mov	r2, #0
 	mov	r1, #1
-	mov	r2, r8
-	mov	r3, r0
-	str	r0, [sp, #4]
-	ldr	r0, [r6, #3968]
-	add	r0, r0, r5
-	str	r3, [r0, #4]
-	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	str	r0, [sp, #8]
+	add	r0, sp, #4
+	str	r3, [r4, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	str	r3, [r5, #-1800]
+	moveq	r3, #0
+	streq	r3, [r5, #-1800]
+	mov	r3, r2
 	bl	FlashProgPages
-	ldr	r3, [r7, #-2092]
-	cmp	r3, #0
-	bne	.L2016
-.L2025:
-	ldr	r2, [r6, #3968]
-	add	r3, r2, r5
-	ldr	r2, [r2, r5]
-	cmn	r2, #1
-	beq	.L2028
-	ldr	r2, [r3, #4]
-	cmp	r8, #0
-	ldr	r0, [r3, #16]
-	add	r1, sp, #4
-	str	r2, [sp, #4]
-	orrne	r2, r2, #-2147483648
-	strne	r2, [sp, #4]
-	mov	r2, #1
-	bl	log2phys
-	ldr	r3, [r6, #3968]
-	add	r3, r3, r5
-	ldr	r3, [r3, #12]
-	ldr	r0, [r3, #12]
-	cmn	r0, #1
-	beq	.L2030
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	ldr	r2, [r7, #-2020]
-	mov	r3, r0, asl #1
-	mov	sl, r0
-	ldrh	r2, [r2, r3]
-	cmp	r2, #0
-	bne	.L2031
-	ldr	r0, .L2037+8
-	mov	r1, sl
-	bl	printk
-.L2031:
-	mov	r0, sl
+	ldrh	r0, [r5, r8]
 	bl	decrement_vpc_count
-.L2030:
-	add	r9, r9, #1
-	add	r5, r5, #36
-	b	.L2019
-.L2036:
-	ldr	r6, .L2037+4
-	mov	r5, #0
-	ldr	r7, .L2037
-	mov	r9, r5
-.L2019:
-	ldr	r3, [r6, #3964]
-	cmp	r9, r3
-	bcc	.L2032
-	movw	r4, #16386
-	ldr	r6, .L2037
-	ldr	r5, .L2037+12
-	b	.L2033
-.L2034:
-	mov	r0, #1
-	mov	r1, r0
-	bl	ftl_do_gc
-	subs	r4, r4, #1
-	beq	.L2024
-.L2033:
-	ldrh	r3, [r6, r5]
-	cmp	r3, #0
-	bne	.L2034
-.L2024:
-	ldr	r3, .L2037+4
-	mov	r2, #0
-	str	r2, [r3, #3964]
-.L2016:
-	mov	r0, #0
-	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
-.L2038:
+.L1978:
+	cmp	r6, #0
+	bne	.L1981
+.L1979:
+	ldr	r3, .L1982+4
+	mov	r2, #1
+	strb	r2, [r3, #-1986]
+	b	.L1973
+.L1975:
+	mov	r3, #0
+	strb	r3, [r2, #-1986]
+.L1973:
+	add	sp, sp, #44
+	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
+.L1983:
 	.align	2
-.L2037:
-	.word	.LANCHOR2
+.L1982:
 	.word	.LANCHOR0
-	.word	.LC132
-	.word	-1142
+	.word	.LANCHOR2
+	.word	-1992
+	.word	-3947
+	.word	-1996
+	.word	.LANCHOR2-1996
 	.fnend
-	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.size	FtlWriteDumpData, .-FtlWriteDumpData
 	.align	2
-	.global	FtlGcFreeTempBlock
-	.type	FtlGcFreeTempBlock, %function
-FtlGcFreeTempBlock:
+	.global	l2p_flush
+	.type	l2p_flush, %function
+l2p_flush:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
-	.save {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
-	movw	r3, #3912
-	ldr	r2, .L2062
-	ldrh	r1, [r2, r3]
-	ldr	r3, .L2062+4
-	ldr	r2, [r3, #-2092]
-	cmp	r2, #0
-	bne	.L2060
-	ldr	ip, .L2062+8
-	ldrh	r5, [r3, ip]
-	movw	ip, #65535
-	cmp	r5, ip
-	beq	.L2041
-	cmp	r0, #0
-	beq	.L2042
-	ldr	lr, .L2062+12
-	movw	r0, #3000
-	ldrh	r4, [lr, r0]
-	cmp	r4, ip
-	movne	r1, #2
-	bne	.L2042
-	strh	r2, [lr, r0]	@ movhi
-	ldr	r2, .L2062+16
-	ldrh	r3, [r3, r2]
-	cmp	r3, #17
-	movhi	r1, #2
-.L2042:
-	ldr	r4, .L2062+4
-	sub	r0, r4, #1904
-	bl	FtlGcScanTempBlk
-	cmn	r0, #1
-	str	r0, [sp, #4]
-	beq	.L2043
-	ldr	r3, [r4, #-2084]
-	mov	r5, r5, asl #1
-	ldrh	r2, [r3, r5]
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	bl	FtlWriteDumpData
+	mov	r4, #0
+	ldr	r7, .L1988
+	movw	r6, #3954
+	ldr	r5, .L1988+4
+	b	.L1985
+.L1987:
+	ldr	r3, [r5, #-1852]
+	mov	r2, #12
+	mla	r3, r2, r4, r3
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L1986
+	mov	r0, r4
+	bl	flush_l2p_region
+.L1986:
+	add	r4, r4, #1
+	uxth	r4, r4
+.L1985:
+	ldrh	r3, [r7, r6]
+	cmp	r3, r4
+	bhi	.L1987
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1989:
+	.align	2
+.L1988:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	allocate_new_data_superblock
+	.type	allocate_new_data_superblock, %function
+allocate_new_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2002
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	ldr	r3, [r3, #4040]
+	ldrh	r5, [r0, #0]
+	cmp	r3, #0
+	bne	.L1991
+	movw	r3, #65535
+	cmp	r5, r3
+	beq	.L1992
+	ldr	r3, .L2002+4
+	mov	r0, r5
+	ldr	r2, [r3, #-2016]
+	mov	r3, r5, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1993
+	bl	INSERT_DATA_LIST
+	b	.L1992
+.L1993:
+	bl	INSERT_FREE_LIST
+.L1992:
+	mov	r3, #0
+	strb	r3, [r4, #8]
+	ldr	r3, .L2002+8
+	cmp	r4, r3
+	beq	.L1994
+	ldr	r2, .L2002
+	movw	r3, #3868
+	ldrh	r3, [r2, r3]
+	cmp	r3, #1
+	beq	.L1994
+	ldrb	r2, [r2, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1995
+.L1994:
+	mov	r3, #1
+	strb	r3, [r4, #8]
+	b	.L1996
+.L1995:
+	ldr	r2, .L2002+12
+	cmp	r4, r2
+	bne	.L1996
+	cmp	r3, #3
+	ldr	r3, .L2002+4
+	beq	.L1997
+	ldr	r2, [r3, #-1712]
+	cmp	r2, #1
+	bne	.L1998
+.L1997:
+	mov	r2, #1
+	strb	r2, [r3, #-1988]
+.L1998:
+	ldr	r2, .L2002
+	ldr	r2, [r2, #3840]
+	cmp	r2, #0
+	beq	.L1996
+	ldr	r3, [r3, #-1780]
+	cmp	r3, #29
+	ldrls	r3, .L2002+4
+	movls	r2, #1
+	strlsb	r2, [r3, #-1988]
+.L1996:
+	ldr	r3, .L2002+16
+	ldr	r6, .L2002+4
+	ldrh	r0, [r6, r3]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1999
+	cmp	r5, r0
+	bne	.L2000
+	ldr	r2, [r6, #-2016]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L2001
+.L2000:
+	bl	update_vpc_list
+.L2001:
+	ldr	r3, .L2002+16
+	mvn	r2, #0
+	strh	r2, [r6, r3]	@ movhi
+.L1999:
+	mov	r0, r4
+	bl	allocate_data_superblock
+	bl	l2p_flush
+	mov	r0, #0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L1991:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2003:
+	.align	2
+.L2002:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR2-1948
+	.word	.LANCHOR2-1996
+	.word	-1020
+	.fnend
+	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.align	2
+	.global	FtlVpcCheckAndModify
+	.type	FtlVpcCheckAndModify, %function
+FtlVpcCheckAndModify:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, lr}
+	mov	r4, #0
+	ldr	r6, .L2011
+	ldr	r1, .L2011+4
+	ldr	r0, .L2011+8
+	bl	printk
+	movw	r3, #3858
+	ldrh	r2, [r6, r3]
+	mov	r1, #0
+	ldr	r5, .L2011+12
+	mov	r2, r2, asl #1
+	ldr	r0, [r5, #-916]
+	bl	ftl_memset
+	b	.L2005
+.L2007:
+	mov	r0, r4
+	add	r1, sp, #4
+	mov	r2, #0
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	cmn	r0, #1
+	beq	.L2006
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, [r5, #-916]
+	mov	r0, r0, asl #1
+	ldrh	r2, [r3, r0]
+	add	r2, r2, #1
+	strh	r2, [r3, r0]	@ movhi
+.L2006:
+	add	r4, r4, #1
+.L2005:
+	ldr	r3, [r6, #3976]
+	cmp	r4, r3
+	bcc	.L2007
+	mov	r4, #0
+	ldr	r7, .L2011
+	ldr	r5, .L2011+12
+	movw	r8, #65535
+	b	.L2008
+.L2010:
+	ldr	r3, [r5, #-2016]
+	mov	r6, r4, asl #1
+	ldrh	r2, [r3, r6]
+	ldr	r3, [r5, #-916]
+	ldrh	r3, [r3, r6]
+	cmp	r2, r3
+	beq	.L2009
+	cmp	r2, r8
+	beq	.L2009
+	ldr	r0, .L2011+16
+	mov	r1, r4
+	bl	printk
+	ldr	r3, .L2011+20
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L2009
+	ldr	r3, .L2011+24
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L2009
+	ldr	r3, .L2011+28
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L2009
+	ldr	r3, [r5, #-916]
+	mov	r0, r4
+	ldrh	r2, [r3, r6]
+	ldr	r3, [r5, #-2016]
+	strh	r2, [r3, r6]	@ movhi
+	bl	update_vpc_list
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2009:
+	add	r4, r4, #1
+	uxth	r4, r4
+.L2008:
+	mov	r3, #3856
+	ldrh	r3, [r7, r3]
+	cmp	r3, r4
+	bhi	.L2010
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
+.L2012:
+	.align	2
+.L2011:
+	.word	.LANCHOR0
+	.word	.LANCHOR3+48
+	.word	.LC101
+	.word	.LANCHOR2
+	.word	.LC147
+	.word	-1996
+	.word	-1900
+	.word	-1948
+	.fnend
+	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.align	2
+	.global	FtlGcFreeTempBlock
+	.type	FtlGcFreeTempBlock, %function
+FtlGcFreeTempBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2036
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
+	movw	r2, #3916
+	ldrh	r1, [r3, r2]
+	ldr	r2, [r3, #4040]
+	cmp	r2, #0
+	bne	.L2034
+	ldr	ip, .L2036+4
+	ldr	r3, .L2036+8
+	ldrh	r4, [r3, ip]
+	movw	ip, #65535
+	cmp	r4, ip
+	beq	.L2015
+	cmp	r0, #0
+	beq	.L2016
+	ldr	lr, .L2036+12
+	movw	r0, #3000
+	ldrh	r5, [lr, r0]
+	cmp	r5, ip
+	movne	r1, #2
+	bne	.L2016
+	strh	r2, [lr, r0]	@ movhi
+	sub	r2, r2, #2000
+	ldrh	r3, [r3, r2]
+	cmp	r3, #17
+	movhi	r1, #2
+.L2016:
+	ldr	r0, .L2036+16
+	bl	FtlGcScanTempBlk
+	cmn	r0, #1
+	str	r0, [sp, #4]
+	beq	.L2017
+	ldr	r3, .L2036
+	mov	r4, r4, asl #1
+	ldr	r3, [r3, #4048]
+	ldrh	r2, [r3, r4]
 	cmp	r2, #4
-	bls	.L2044
+	bls	.L2018
 	sub	r2, r2, #5
 	mov	r0, #1
-	strh	r2, [r3, r5]	@ movhi
+	strh	r2, [r3, r4]	@ movhi
 	bl	FtlEctTblFlush
-.L2044:
-	ldr	r3, .L2062+4
-	ldr	r2, [r3, #-1016]
+.L2018:
+	ldr	r3, .L2036+8
+	ldr	r2, [r3, #-1012]
 	cmp	r2, #0
-	bne	.L2045
-	ldr	r2, [r3, #-1616]
+	bne	.L2019
+	ldr	r2, [r3, #-1612]
 	ldr	r0, [sp, #4]
 	add	r2, r2, #1
-	str	r2, [r3, #-1616]
+	str	r2, [r3, #-1612]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L2045:
-	ldr	r3, .L2062+4
+.L2019:
+	ldr	r3, .L2036+8
 	mov	r2, #0
-	str	r2, [r3, #-1016]
-	b	.L2058
-.L2043:
-	ldr	r2, .L2062+12
+	str	r2, [r3, #-1012]
+	b	.L2032
+.L2017:
+	ldr	r2, .L2036+12
 	movw	r3, #3000
 	ldrh	r2, [r2, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2058
-.L2041:
-	ldr	r6, .L2062+4
+	bne	.L2032
+.L2015:
+	ldr	r6, .L2036+8
 	movw	r3, #65535
-	ldr	r5, .L2062+8
+	ldr	r5, .L2036+4
 	mov	r4, #0
-	str	r4, [r6, #-1016]
+	str	r4, [r6, #-1012]
 	ldrh	r2, [r6, r5]
 	cmp	r2, r3
 	moveq	r0, r4
-	beq	.L2040
+	beq	.L2014
 	bl	FtlCacheWriteBack
-	ldr	ip, .L2062
-	movw	r0, #3912
-	ldrb	r1, [r6, #-1897]	@ zero_extendqisi2
+	ldr	ip, .L2036
+	movw	r0, #3916
+	ldrb	r1, [r6, #-1893]	@ zero_extendqisi2
 	ldrh	r3, [r6, r5]
 	ldrh	r0, [ip, r0]
-	ldr	r2, [r6, #-2020]
-	ldr	sl, .L2062+20
+	ldr	r2, [r6, #-2016]
+	ldr	sl, .L2036+20
 	mov	r3, r3, asl #1
 	mul	r1, r0, r1
 	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, [r6, #-1820]
+	ldr	r3, [r6, #-1816]
 	ldrh	r2, [r6, sl]
 	add	r3, r2, r3
-	str	r3, [r6, #-1820]
-	b	.L2046
-.L2049:
+	str	r3, [r6, #-1816]
+	b	.L2020
+.L2023:
 	mov	r7, #12
-	ldr	r8, [r6, #-1152]
+	ldr	r8, [r6, #-1148]
 	mul	r7, r7, r4
 	add	r1, sp, #4
 	mov	r2, #0
@@ -17865,7 +17847,7 @@ FtlGcFreeTempBlock:
 	ldr	r0, [sp, #4]
 	ldr	r3, [r8, r7]
 	cmp	r0, r3
-	bne	.L2047
+	bne	.L2021
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	add	r1, r5, #4
@@ -17874,212 +17856,232 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r5, #8]
 	bl	log2phys
 	mov	r0, r7
-	b	.L2061
-.L2047:
+	b	.L2035
+.L2021:
 	ldr	r3, [r5, #4]
 	cmp	r0, r3
-	beq	.L2048
-	ldr	r3, .L2062+8
+	beq	.L2022
+	ldr	r3, .L2036+4
 	ldrh	r0, [r6, r3]
-.L2061:
+.L2035:
 	bl	decrement_vpc_count
-.L2048:
+.L2022:
 	add	r4, r4, #1
 	uxth	r4, r4
-.L2046:
+.L2020:
 	ldrh	r3, [r6, sl]
-	ldr	r5, .L2062+4
+	ldr	r5, .L2036+8
 	cmp	r3, r4
-	bhi	.L2049
+	bhi	.L2023
 	movw	r0, #65535
+	ldr	r4, .L2036+4
 	bl	decrement_vpc_count
-	ldr	r3, .L2062
+	ldr	r3, .L2036
 	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2050
-	ldr	r3, .L2062+8
-	ldr	r0, .L2062+24
-	ldrh	r1, [r5, r3]
+	beq	.L2024
+	ldr	r0, .L2036+24
+	ldrh	r1, [r5, r4]
 	bl	printk
-.L2050:
-	ldr	r3, .L2062+8
-	ldr	r1, [r5, #-2020]
-	ldrh	r0, [r5, r3]
-	mov	r5, r3
-	mov	r2, r0, asl #1
-	ldrh	r2, [r1, r2]
-	cmp	r2, #0
-	beq	.L2051
+.L2024:
+	ldrh	r0, [r5, r4]
+	ldr	r2, [r5, #-2016]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L2025
 	bl	INSERT_DATA_LIST
-	b	.L2052
-.L2051:
+	b	.L2026
+.L2025:
 	bl	INSERT_FREE_LIST
-.L2052:
-	ldr	r4, .L2062+4
-	mvn	r3, #0
-	ldr	r2, .L2062+20
-	strh	r3, [r4, r5]	@ movhi
+.L2026:
+	ldr	r4, .L2036+8
+	mvn	r2, #0
+	ldr	r3, .L2036+4
+	strh	r2, [r4, r3]	@ movhi
 	mov	r3, #0
+	ldr	r2, .L2036+20
 	strh	r3, [r4, r2]	@ movhi
 	sub	r2, r2, #12
 	strh	r3, [r4, r2]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	ldr	r3, .L2062
-	mov	r0, r4
-	ldr	r1, .L2062+16
-	ldr	r2, .L2062+28
-	ldr	r3, [r3, #3836]
+	ldr	r3, .L2036
+	mov	r1, r4
+	ldr	r3, [r3, #3840]
 	cmp	r3, #0
-	beq	.L2053
-	ldr	r3, [r4, #-1784]
+	beq	.L2027
+	ldr	r3, [r4, #-1780]
 	cmp	r3, #29
-	bhi	.L2053
-	ldrh	r3, [r4, r2]
-	ldrh	r2, [r4, r1]
+	bhi	.L2027
+	ldr	r3, .L2036+28
 	mvn	r1, #0
+	ldr	r2, .L2036+32
+	ldrh	r3, [r4, r3]
+	ldrh	r2, [r4, r2]
 	cmp	r2, r3
 	movcc	r3, r3, asl #1
-	ldrcc	r2, .L2062+32
+	ldrcc	r2, .L2036+36
 	strcch	r3, [r4, r2]	@ movhi
-	ldr	r3, .L2062+36
-	ldr	r2, .L2062+4
+	ldr	r3, .L2036+40
+	ldr	r2, .L2036+8
 	strh	r1, [r2, r3]	@ movhi
-	b	.L2060
-.L2053:
-	ldrh	r2, [r0, r2]
-	ldrh	r1, [r0, r1]
-	ldr	r3, .L2062+4
+	b	.L2034
+.L2027:
+	ldr	r2, .L2036+28
+	ldr	r0, .L2036+32
+	ldr	r3, .L2036+8
+	ldrh	r2, [r1, r2]
+	ldrh	r1, [r1, r0]
 	add	r0, r2, r2, asl #1
 	cmp	r1, r0, lsr #2
-	ble	.L2060
-	ldr	r1, .L2062+36
+	ble	.L2034
+	ldr	r1, .L2036+40
 	mvn	r0, #0
 	strh	r0, [r3, r1]	@ movhi
-	ldr	r1, .L2062
+	ldr	r1, .L2036
 	ldrb	r0, [r1, #928]	@ zero_extendqisi2
-	ldr	r1, .L2062+32
+	ldr	r1, .L2036+36
 	cmp	r0, #0
 	subne	r2, r2, #2
 	moveq	r2, #20
 	strneh	r2, [r3, r1]	@ movhi
 	streqh	r2, [r3, r1]	@ movhi
-	beq	.L2040
-	b	.L2060
-.L2058:
+	beq	.L2014
+	b	.L2034
+.L2032:
 	mov	r0, #1
-	b	.L2040
-.L2060:
+	b	.L2014
+.L2034:
 	mov	r0, #0
-.L2040:
+.L2014:
 	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}
-.L2063:
+.L2037:
 	.align	2
-.L2062:
+.L2036:
 	.word	.LANCHOR0
+	.word	-1900
 	.word	.LANCHOR2
-	.word	-1904
 	.word	.LANCHOR1
-	.word	-2004
-	.word	-1148
-	.word	.LC133
-	.word	-1780
-	.word	-1200
-	.word	-1764
+	.word	.LANCHOR2-1900
+	.word	-1144
+	.word	.LC148
+	.word	-1776
+	.word	-2000
+	.word	-1196
+	.word	-1760
 	.fnend
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	2
-	.global	Ftl_gc_temp_data_write_back
-	.type	Ftl_gc_temp_data_write_back, %function
-Ftl_gc_temp_data_write_back:
+	.type	Ftl_gc_temp_data_write_back.part.22, %function
+Ftl_gc_temp_data_write_back.part.22:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	ldr	r3, .L2073
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	cmp	r3, #0
-	ldr	r3, .L2073+4
-	beq	.L2065
-	ldr	r2, [r3, #-1184]
-	tst	r2, #1
-	beq	.L2065
-	ldr	r2, .L2073+8
-	ldrh	r2, [r3, r2]
-	cmp	r2, #0
-	bne	.L2070
-.L2065:
 	mov	r2, #0
-	ldr	r0, [r3, #-972]
-	ldr	r1, [r3, #-1184]
+	ldr	r4, .L2044
 	mov	r3, r2
-	bl	FlashProgPages
-	mov	r4, #0
-	ldr	r5, .L2073+4
+	mov	r5, #0
 	mov	r6, #36
-	b	.L2067
-.L2069:
-	mul	r3, r6, r4
-	ldr	r1, [r5, #-972]
+	ldr	r0, [r4, #-968]
+	ldr	r1, [r4, #-1180]
+	bl	FlashProgPages
+	b	.L2039
+.L2042:
+	mul	r3, r6, r5
+	ldr	r1, [r4, #-968]
 	add	r2, r1, r3
 	ldr	r1, [r1, r3]
 	cmn	r1, #1
-	bne	.L2068
-	ldr	r2, .L2073+12
+	bne	.L2040
+	ldr	r2, .L2044+4
 	mov	lr, #0
-	ldr	ip, [r7, #-2020]
+	ldr	ip, [r7, #-2016]
 	ldrh	r0, [r7, r2]
 	mov	r0, r0, asl #1
 	strh	lr, [ip, r0]	@ movhi
 	strh	r1, [r7, r2]	@ movhi
-	ldr	r2, [r7, #-1616]
+	ldr	r2, [r7, #-1612]
 	add	r2, r2, #1
-	str	r2, [r7, #-1616]
-	ldr	r2, [r7, #-972]
+	str	r2, [r7, #-1612]
+	ldr	r2, [r7, #-968]
 	add	r3, r2, r3
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L2072
-.L2068:
+	mov	r0, #1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2040:
 	ldr	r3, [r2, #12]
-	add	r4, r4, #1
+	add	r5, r5, #1
 	ldr	r1, [r2, #4]
-	uxth	r4, r4
+	uxth	r5, r5
 	ldr	r0, [r3, #12]
 	ldr	r2, [r3, #8]
 	bl	FtlGcUpdatePage
-.L2067:
-	ldr	r1, [r5, #-1184]
-	ldr	r7, .L2073+4
-	cmp	r4, r1
-	bcc	.L2069
-	ldr	r0, [r7, #-972]
+.L2039:
+	ldr	r1, [r4, #-1180]
+	ldr	r7, .L2044
+	cmp	r5, r1
+	bcc	.L2042
+	ldr	r0, [r7, #-968]
 	bl	FtlGcBufFree
-	ldr	r3, .L2073+8
+	ldr	r3, .L2044+8
 	mov	r0, #0
-	str	r0, [r7, #-1184]
+	str	r0, [r7, #-1180]
 	ldrh	r3, [r7, r3]
 	cmp	r3, r0
 	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
 	mov	r0, #1
 	bl	FtlGcFreeTempBlock
-.L2072:
 	mov	r0, #1
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2070:
+.L2045:
+	.align	2
+.L2044:
+	.word	.LANCHOR2
+	.word	-1900
+	.word	-1896
+	.fnend
+	.size	Ftl_gc_temp_data_write_back.part.22, .-Ftl_gc_temp_data_write_back.part.22
+	.align	2
+	.global	Ftl_gc_temp_data_write_back
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L2051
+	ldr	r2, [r3, #4040]
+	cmp	r2, #0
+	bne	.L2047
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2048
+	ldr	r3, .L2051+4
+	ldr	r2, [r3, #-1180]
+	tst	r2, #1
+	beq	.L2048
+	ldr	r2, .L2051+8
+	ldrh	r3, [r3, r2]
+	cmp	r3, #0
+	bne	.L2047
+.L2048:
+	b	Ftl_gc_temp_data_write_back.part.22
+.L2047:
 	mov	r0, #0
-	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2074:
+	bx	lr
+.L2052:
 	.align	2
-.L2073:
+.L2051:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1900
-	.word	-1904
+	.word	-1896
 	.fnend
 	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
@@ -18091,31 +18093,31 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movw	r5, #3912
-	ldr	r6, .L2077
-	ldr	r4, .L2077+4
+	movw	r5, #3916
+	ldr	r6, .L2055
+	ldr	r0, .L2055+4
+	ldr	r4, .L2055+8
 	ldrh	r1, [r6, r5]
-	sub	r0, r4, #1904
 	bl	FtlGcScanTempBlk
-	ldr	r3, .L2077+8
+	ldr	r3, .L2055+12
 	ldrh	r2, [r4, r3]
 	ldrh	r3, [r6, r5]
 	cmp	r2, r3
 	ldmccfd	sp!, {r4, r5, r6, pc}
-	ldr	r0, .L2077+12
+	sub	r0, r4, #1088
 	bl	FtlMapBlkWriteDumpData
 	mov	r0, #0
 	bl	FtlGcFreeTempBlock
 	mov	r3, #0
-	str	r3, [r4, #-1016]
+	str	r3, [r4, #-1012]
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2078:
+.L2056:
 	.align	2
-.L2077:
+.L2055:
 	.word	.LANCHOR0
+	.word	.LANCHOR2-1900
 	.word	.LANCHOR2
-	.word	-1902
-	.word	.LANCHOR2-1092
+	.word	-1898
 	.fnend
 	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
 	.align	2
@@ -18125,30 +18127,31 @@ FtlPowerLostRecovery:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r5, #0
-	ldr	r4, .L2080
-	sub	r6, r4, #2000
-	str	r5, [r4, #296]
-	sub	r4, r4, #1952
-	mov	r0, r6
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, #0
+	ldr	r3, .L2058
+	ldr	r5, .L2058+4
+	str	r4, [r3, #300]
+	mov	r0, r5
 	bl	FtlRecoverySuperblock
-	mov	r0, r6
+	mov	r0, r5
+	add	r5, r5, #48
 	bl	FtlSlcSuperblockCheck
-	mov	r0, r4
+	mov	r0, r5
 	bl	FtlRecoverySuperblock
-	mov	r0, r4
+	mov	r0, r5
 	bl	FtlSlcSuperblockCheck
 	bl	FtlGcPageRecovery
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	mov	r0, r5
-	ldmfd	sp!, {r4, r5, r6, pc}
-.L2081:
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2059:
 	.align	2
-.L2080:
+.L2058:
 	.word	.LANCHOR2
+	.word	.LANCHOR2-1996
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
@@ -18160,26 +18163,26 @@ FtlSysBlkInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	mov	r3, #292
-	ldr	r6, .L2093
+	mov	r3, #296
+	ldr	r6, .L2071
 	mov	r2, #0
-	ldr	r4, .L2093+4
+	ldr	r4, .L2071+4
 	mvn	r5, #0
-	ldr	r0, [r6, #3848]
+	ldr	r0, [r6, #3852]
 	strh	r2, [r4, r3]	@ movhi
-	movw	r3, #290
+	movw	r3, #294
 	strh	r5, [r4, r3]	@ movhi
 	uxth	r0, r0
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlScanSysBlk
-	ldr	r3, .L2093+8
+	ldr	r3, .L2071+8
 	ldrh	r2, [r4, r3]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L2083
+	beq	.L2061
 	bl	FtlLoadSysInfo
 	subs	r7, r0, #0
-	bne	.L2083
+	bne	.L2061
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -18189,57 +18192,57 @@ FtlSysBlkInit:
 	bl	FtlPowerLostRecovery
 	mov	r0, #1
 	bl	FtlUpdateVaildLpn
-	movw	r3, #3950
+	movw	r3, #3954
 	ldrh	r2, [r6, r3]
 	mov	r3, r7
-	ldr	r1, [r4, #-1856]
-	b	.L2084
-.L2086:
+	ldr	r1, [r4, #-1852]
+	b	.L2062
+.L2064:
 	add	r0, r1, r7
 	add	r7, r7, #12
 	ldr	r0, [r0, #4]
 	cmp	r0, #0
-	blt	.L2085
+	blt	.L2063
 	add	r3, r3, #1
-.L2084:
+.L2062:
 	cmp	r3, r2
-	blt	.L2086
-.L2085:
-	ldr	r4, .L2093+4
+	blt	.L2064
+.L2063:
+	ldr	r4, .L2071+4
 	cmp	r3, r2
-	ldr	r1, .L2093+12
+	ldr	r1, .L2071+12
 	ldrh	r0, [r4, r1]
 	add	r0, r0, #1
 	strh	r0, [r4, r1]	@ movhi
-	blt	.L2087
-	mov	r3, #292
+	blt	.L2065
+	mov	r3, #296
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	beq	.L2088
-.L2087:
-	ldr	r0, .L2093+16
+	beq	.L2066
+.L2065:
+	ldr	r0, .L2071+16
 	bl	FtlSuperblockPowerLostFix
-	ldr	r0, .L2093+20
+	ldr	r0, .L2071+20
 	bl	FtlSuperblockPowerLostFix
-	ldr	r3, .L2093+24
-	ldr	r1, [r4, #-2020]
-	ldr	r2, .L2093+28
+	ldr	r3, .L2071+24
+	ldr	r1, [r4, #-2016]
+	ldr	r2, .L2071+28
 	ldrh	r3, [r4, r3]
 	ldrh	r0, [r4, r2]
 	mov	r3, r3, asl #1
 	ldrh	ip, [r1, r3]
 	rsb	r0, r0, ip
 	strh	r0, [r1, r3]	@ movhi
-	ldr	r0, .L2093
-	movw	r1, #3912
-	ldr	r3, .L2093+32
-	ldr	lr, [r4, #-2020]
+	ldr	r0, .L2071
+	movw	r1, #3916
+	ldr	r3, .L2071+32
+	ldr	lr, [r4, #-2016]
 	ldrh	ip, [r0, r1]
 	strh	ip, [r4, r3]	@ movhi
 	mov	r3, #0
 	strh	r3, [r4, r2]	@ movhi
 	add	r2, r2, #44
-	strb	r3, [r4, #-1994]
+	strb	r3, [r4, #-1990]
 	ldrh	ip, [r4, r2]
 	add	r2, r2, #4
 	ldrh	r5, [r4, r2]
@@ -18248,1467 +18251,2674 @@ FtlSysBlkInit:
 	rsb	r5, r5, r6
 	strh	r5, [lr, ip]	@ movhi
 	ldrh	r0, [r0, r1]
-	ldr	r1, .L2093+36
+	ldr	r1, .L2071+36
 	strh	r3, [r4, r2]	@ movhi
-	strb	r3, [r4, #-1946]
+	strb	r3, [r4, #-1942]
 	strh	r0, [r4, r1]	@ movhi
-	ldr	r0, .L2093+40
+	ldr	r0, .L2071+40
 	bl	FtlMapBlkWriteDumpData
-	ldr	r0, .L2093+44
+	ldr	r0, .L2071+44
 	bl	FtlMapBlkWriteDumpData
-	ldr	r3, .L2093+48
+	ldr	r3, .L2071+48
 	ldrh	r2, [r4, r3]
 	add	r2, r2, #1
 	strh	r2, [r4, r3]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L2088:
-	ldr	r4, .L2093+4
+.L2066:
+	ldr	r4, .L2071+4
 	movw	r3, #65535
-	ldr	r5, .L2093+24
+	ldr	r5, .L2071+24
 	ldrh	r2, [r4, r5]
 	cmp	r2, r3
-	beq	.L2089
-	ldr	r3, .L2093+28
+	beq	.L2067
+	ldr	r3, .L2071+28
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L2089
-	ldr	r3, .L2093+52
+	bne	.L2067
+	ldr	r3, .L2071+52
 	ldrh	r3, [r4, r3]
 	cmp	r3, #0
-	bne	.L2089
+	bne	.L2067
 	bl	FtlVpcTblFlush
 	ldrh	r0, [r4, r5]
 	bl	FtlGcRefreshOpenBlock
-	ldr	r3, .L2093+56
+	ldr	r3, .L2071+56
 	ldrh	r0, [r4, r3]
 	bl	FtlGcRefreshOpenBlock
-	add	r0, r4, r5
+	ldr	r0, .L2071+16
 	bl	allocate_new_data_superblock
-	sub	r0, r4, #1952
+	ldr	r0, .L2071+20
 	bl	allocate_new_data_superblock
-	add	r0, r4, #244
+	add	r0, r4, #248
 	bl	FtlMapBlkWriteDumpData
-.L2089:
-	ldr	r3, .L2093+12
-	ldr	r2, .L2093+4
+.L2067:
+	ldr	r3, .L2071+12
+	ldr	r2, .L2071+4
 	ldrh	r5, [r2, r3]
 	ands	r5, r5, #31
 	movne	r5, #0
-	bne	.L2083
+	bne	.L2061
 	bl	FtlVpcCheckAndModify
-.L2083:
+.L2061:
 	mov	r0, r5
 	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
-.L2094:
+.L2072:
 	.align	2
-.L2093:
+.L2071:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	-1776
-	.word	-2048
-	.word	.LANCHOR2-2000
-	.word	.LANCHOR2-1952
-	.word	-2000
+	.word	-1772
+	.word	-2044
+	.word	.LANCHOR2-1996
+	.word	.LANCHOR2-1948
 	.word	-1996
-	.word	-1998
-	.word	-1950
-	.word	.LANCHOR2-1092
-	.word	.LANCHOR2+244
-	.word	-2046
+	.word	-1992
+	.word	-1994
+	.word	-1946
+	.word	.LANCHOR2-1088
+	.word	.LANCHOR2+248
+	.word	-2042
+	.word	-1944
 	.word	-1948
-	.word	-1952
 	.fnend
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
-	.global	Ftl_get_new_temp_ppa
-	.type	Ftl_get_new_temp_ppa, %function
-Ftl_get_new_temp_ppa:
+	.type	FtlLowFormat.part.26, %function
+FtlLowFormat.part.26:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	ldr	r3, .L2098
-	ldr	r5, .L2098+4
-	ldrh	r2, [r5, r3]
-	movw	r3, #65535
-	cmp	r2, r3
-	beq	.L2096
-	ldr	r3, .L2098+8
-	ldrh	r3, [r5, r3]
-	cmp	r3, #0
-	bne	.L2097
-.L2096:
-	bl	FtlCacheWriteBack
-	mov	r0, #0
-	bl	FtlGcFreeTempBlock
-	ldr	r0, .L2098+12
-	mov	r4, #0
-	strb	r4, [r5, #-1896]
-	bl	allocate_data_superblock
-	ldr	r3, .L2098+16
-	strh	r4, [r5, r3]	@ movhi
-	add	r3, r3, #12
-	strh	r4, [r5, r3]	@ movhi
-	bl	l2p_flush
-	mov	r0, r4
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-.L2097:
-	ldr	r0, .L2098+12
-	ldmfd	sp!, {r3, r4, r5, lr}
-	b	get_new_active_ppa
-.L2099:
-	.align	2
-.L2098:
-	.word	-1904
-	.word	.LANCHOR2
-	.word	-1900
-	.word	.LANCHOR2-1904
-	.word	-1160
-	.fnend
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
-	.align	2
-	.global	ftl_discard
-	.type	ftl_discard, %function
-ftl_discard:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
-	.save {r0, r1, r2, r4, r5, r6, r7, lr}
-	add	r2, r1, r0
-	ldr	r5, .L2110
-	mov	r7, r0
-	mov	r4, r1
-	ldr	r3, [r5, #3952]
-	cmp	r2, r3
-	mvnhi	r0, #0
-	bhi	.L2101
-	cmp	r1, #31
-	bls	.L2108
-	ldr	r3, .L2110+4
-	ldr	r3, [r3, #-2092]
-	cmp	r3, #0
-	bne	.L2108
-	bl	FtlCacheWriteBack
-	movw	r3, #3918
-	ldrh	r6, [r5, r3]
-	mov	r0, r7
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	mls	r7, r0, r6, r7
-	mov	r5, r0
-	uxth	r7, r7
-	cmp	r7, #0
-	beq	.L2102
-	rsb	r6, r7, r6
-	add	r5, r0, #1
-	cmp	r6, r4
-	movcs	r6, r4
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r6, #3952
+	ldr	r5, .L2094
+	mov	r1, #0
+	ldr	r4, .L2094+4
+	ldrh	r2, [r5, r6]
+	ldr	r0, [r4, #-900]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r2, [r5, r6]
+	mov	r1, #0
+	ldr	r0, [r4, #-1032]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldr	r0, [r5, #3852]
+	mov	r3, #0
+	str	r3, [r4, #-1804]
+	str	r3, [r4, #-1800]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	beq	.L2074
+	bl	FtlMakeBbt
+.L2074:
+	mov	r3, #0
+	ldr	ip, .L2094
+	movw	r0, #3922
+	ldr	r2, .L2094+4
+	ldr	r1, .L2094+8
+	b	.L2075
+.L2076:
+	ldr	lr, [r2, #-944]
+	mvn	r4, r3
+	orr	r4, r3, r4, asl #16
+	str	r4, [lr, r3, asl #2]
+	ldr	lr, [r2, #-940]
+	str	r1, [lr, r3, asl #2]
+	add	r3, r3, #1
+	uxth	r3, r3
+.L2075:
+	ldrh	lr, [ip, r0]
+	ldr	r8, .L2094
+	cmp	r3, lr, asl #7
+	blt	.L2076
+	mov	r3, #3856
+	mov	r5, #0
+	ldrh	r6, [r8, r3]
+	movw	r7, #3858
+	b	.L2077
+.L2078:
+	mov	r0, r6
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	add	r6, r6, #1
 	uxth	r6, r6
-	rsb	r4, r6, r4
-.L2102:
-	mvn	r3, #0
-	ldr	r7, .L2110
-	str	r3, [sp, #4]
-	movw	r6, #3918
-	b	.L2103
-.L2105:
+	add	r5, r5, r0
+	uxth	r5, r5
+.L2077:
+	ldrh	r3, [r8, r7]
+	ldr	r4, .L2094
+	cmp	r3, r6
+	bhi	.L2078
+	movw	r3, #3848
+	ldrh	r1, [r4, r3]
+	sub	r3, r5, #3
+	cmp	r3, r1, asl #1
+	blt	.L2079
 	mov	r0, r5
-	mov	r1, sp
-	mov	r2, #0
-	bl	log2phys
-	ldr	r3, [sp, #0]
-	cmn	r3, #1
-	beq	.L2104
-	ldr	r3, .L2110+4
-	add	r1, sp, #4
+	movw	r6, #3858
+	bl	__aeabi_uidiv
+	ldr	r3, [r4, #3948]
+	add	r0, r0, r3
+	uxth	r0, r0
+	bl	FtlSysBlkNumInit
+	ldr	r0, [r4, #3852]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	mov	r3, #3856
+	ldrh	r5, [r4, r3]
+	b	.L2080
+.L2081:
 	mov	r0, r5
-	ldr	r2, [r3, #440]
-	add	r2, r2, #1
-	str	r2, [r3, #440]
-	ldr	r2, [r3, #-1836]
-	add	r2, r2, #1
-	str	r2, [r3, #-1836]
-	mov	r2, #1
-	bl	log2phys
-	ldr	r0, [sp, #0]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	decrement_vpc_count
-.L2104:
-	ldrh	r3, [r7, r6]
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
 	add	r5, r5, #1
-	rsb	r4, r3, r4
-.L2103:
-	ldrh	r3, [r7, r6]
-	cmp	r4, r3
-	bcs	.L2105
-	ldr	r3, .L2110+4
+	uxth	r5, r5
+.L2080:
+	ldrh	r3, [r4, r6]
+	cmp	r3, r5
+	bhi	.L2081
+.L2079:
 	mov	r4, #0
-	ldr	r2, [r3, #440]
-	cmp	r2, #32
-	bls	.L2109
-	str	r4, [r3, #440]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	b	.L2109
-.L2108:
-	mov	r0, #0
-	b	.L2101
-.L2109:
-	mov	r0, r4
-.L2101:
-	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
-.L2111:
+	ldr	r8, .L2094
+	mov	r6, r4
+	mov	r7, #3856
+	b	.L2082
+.L2083:
+	mov	r0, r6
+	mov	r1, #0
+	bl	FtlLowFormatEraseBlock
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	r4, r4, r0
+	uxth	r4, r4
+.L2082:
+	ldrh	r3, [r8, r7]
+	ldr	r5, .L2094
+	cmp	r3, r6
+	bhi	.L2083
+	movw	r3, #3858
+	ldr	r8, .L2094+4
+	ldrh	r3, [r5, r3]
+	ldr	fp, [r5, #3860]
+	ldr	r9, .L2094+12
+	str	r3, [r8, #-984]
+	movw	r3, #3848
+	ldrh	r6, [r5, r3]
+	mov	r0, fp
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ubfx	sl, r0, #5, #16
+	mov	r7, r0
+	add	r3, sl, #36
+	strh	r3, [r8, r9]	@ movhi
+	mov	r3, #24
+	str	r0, [r5, #3976]
+	mul	r3, r3, r6
+	cmp	r4, r3
+	ble	.L2084
+	rsb	r0, r4, fp
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	str	r0, [r5, #3976]
+	mov	r0, r0, lsr #5
+	add	r0, r0, #24
+	strh	r0, [r8, r9]	@ movhi
+.L2084:
+	ldr	r3, .L2094
+	ldr	r3, [r3, #3840]
+	cmp	r3, #1
+	bne	.L2085
+	mov	r0, r4
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldr	r8, .L2094+4
+	ldr	r5, .L2094+12
+	ldrh	r9, [r8, r5]
+	uxtah	r0, r9, r0
+	add	r9, r9, r0, lsr #2
+	strh	r9, [r8, r5]	@ movhi
+.L2085:
+	ldr	r3, .L2094
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2086
+	mov	r0, r4
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldr	r8, .L2094+4
+	ldr	r5, .L2094+12
+	ldrh	r9, [r8, r5]
+	uxtah	r0, r9, r0
+	add	r9, r9, r0, lsr #2
+	strh	r9, [r8, r5]	@ movhi
+.L2086:
+	ldr	r0, .L2094
+	movw	r3, #3908
+	ldrh	r3, [r0, r3]
+	cmp	r3, #0
+	beq	.L2087
+	ldr	r1, .L2094+4
+	ldr	r2, .L2094+12
+	ldrh	ip, [r1, r2]
+	add	ip, ip, r3, lsr #1
+	strh	ip, [r1, r2]	@ movhi
+	mul	ip, r6, r3
+	cmp	ip, r4
+	strgt	r7, [r0, #3976]
+	addgt	r3, r3, #32
+	addgt	sl, sl, r3
+	strgth	sl, [r1, r2]	@ movhi
+.L2087:
+	ldr	r4, .L2094+4
+	ldr	r5, .L2094
+	ldr	r3, .L2094+12
+	ldr	r7, .L2094+16
+	ldr	r2, [r5, #3976]
+	ldrh	r3, [r4, r3]
+	rsb	r3, r3, r2
+	mul	r6, r6, r3
+	movw	r3, #3916
+	ldrh	r3, [r5, r3]
+	str	r6, [r4, #216]
+	mul	r6, r3, r6
+	movw	r3, #3922
+	ldrh	r3, [r5, r3]
+	str	r6, [r5, #3976]
+	mul	r6, r3, r6
+	str	r6, [r5, #3956]
+	mvn	r6, #0
+	bl	FtlBbmTblFlush
+	movw	r3, #3858
+	ldrh	r2, [r5, r3]
+	mov	r1, #0
+	ldr	r0, [r4, #-2016]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldr	r1, .L2094+20
+	mov	r3, #0
+	ldr	r2, .L2094+24
+	str	r3, [r4, #-1844]
+	strh	r3, [r4, r1]	@ movhi
+	sub	r1, r1, #236
+	strb	r3, [r4, #-1754]
+	strh	r3, [r4, r1]	@ movhi
+	mov	r1, #255
+	strb	r3, [r4, #-1752]
+	strb	r3, [r4, #-1990]
+	strh	r3, [r4, r7]	@ movhi
+	mov	r3, #1
+	strb	r3, [r4, #-1988]
+	mov	r3, #3856
+	strh	r6, [r4, r2]	@ movhi
+	ldrh	r2, [r5, r3]
+	ldr	r0, [r4, #-1840]
+	mov	r2, r2, lsr #3
+	bl	ftl_memset
+.L2088:
+	ldr	r0, .L2094+28
+	bl	make_superblock
+	ldrb	r3, [r4, #-1989]	@ zero_extendqisi2
+	ldr	r5, .L2094+4
+	cmp	r3, #0
+	ldr	r3, .L2094+16
+	bne	.L2089
+	ldrh	r3, [r4, r7]
+	ldr	r2, [r4, #-2016]
+	mov	r3, r3, asl #1
+	strh	r6, [r2, r3]	@ movhi
+	ldrh	r3, [r4, r7]
+	add	r3, r3, #1
+	strh	r3, [r4, r7]	@ movhi
+	b	.L2088
+.L2089:
+	ldr	r2, [r5, #-1804]
+	mvn	r7, #0
+	ldr	r1, [r5, #-2016]
+	ldr	r6, .L2094+32
+	str	r2, [r5, #-1984]
+	add	r2, r2, #1
+	str	r2, [r5, #-1804]
+	ldr	r2, .L2094+36
+	ldrh	r0, [r5, r2]
+	ldrh	r2, [r5, r3]
+	mov	r2, r2, asl #1
+	strh	r0, [r1, r2]	@ movhi
+	mov	r2, #0
+	ldr	r0, .L2094+40
+	ldrh	r3, [r5, r3]
+	strb	r2, [r5, #-1942]
+	add	r3, r3, #1
+	strh	r2, [r5, r0]	@ movhi
+	strh	r3, [r5, r6]	@ movhi
+	mov	r3, #1
+	strb	r3, [r5, #-1940]
+.L2090:
+	ldr	r0, .L2094+44
+	bl	make_superblock
+	ldrb	r3, [r5, #-1941]	@ zero_extendqisi2
+	ldr	r4, .L2094+4
+	cmp	r3, #0
+	bne	.L2091
+	ldrh	r3, [r5, r6]
+	ldr	r2, [r5, #-2016]
+	mov	r3, r3, asl #1
+	strh	r7, [r2, r3]	@ movhi
+	ldrh	r3, [r5, r6]
+	add	r3, r3, #1
+	strh	r3, [r5, r6]	@ movhi
+	b	.L2090
+.L2091:
+	ldr	r3, [r4, #-1804]
+	mvn	r5, #0
+	ldr	r2, [r4, #-2016]
+	str	r3, [r4, #-1936]
+	add	r3, r3, #1
+	str	r3, [r4, #-1804]
+	ldr	r3, .L2094+48
+	ldrh	r1, [r4, r3]
+	sub	r3, r3, #4
+	ldrh	r3, [r4, r3]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r3, .L2094+52
+	strh	r5, [r4, r3]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	ldr	r3, .L2094+56
+	mov	r2, #0
+	strh	r0, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	ldr	r2, [r4, #216]
+	strh	r5, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r3, [r4, #-1804]
+	str	r3, [r4, #-1764]
+	add	r3, r3, #1
+	str	r3, [r4, #-1804]
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+	ldr	r3, .L2094+60
+	mov	r2, #1
+	str	r2, [r3, #2996]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2095:
 	.align	2
-.L2110:
+.L2094:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
+	.word	168778952
+	.word	-1776
+	.word	-1996
+	.word	-1758
+	.word	-1760
+	.word	.LANCHOR2-1996
+	.word	-1948
+	.word	-1992
+	.word	-1946
+	.word	.LANCHOR2-1948
+	.word	-1944
+	.word	-1900
+	.word	-1772
+	.word	.LANCHOR1
 	.fnend
-	.size	ftl_discard, .-ftl_discard
-	.align	2
-	.global	FtlDiscard
-	.type	FtlDiscard, %function
-FtlDiscard:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	ftl_discard
-	.fnend
-	.size	FtlDiscard, .-FtlDiscard
+	.size	FtlLowFormat.part.26, .-FtlLowFormat.part.26
 	.align	2
-	.global	ftl_cache_flush
-	.type	ftl_cache_flush, %function
-ftl_cache_flush:
+	.global	FtlLowFormat
+	.type	FtlLowFormat, %function
+FtlLowFormat:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	FtlCacheWriteBack
-	.fnend
-	.size	ftl_cache_flush, .-ftl_cache_flush
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2098
+	ldr	r3, [r3, #4040]
+	cmp	r3, #0
+	bne	.L2097
+	bl	FtlLowFormat.part.26
+.L2097:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2099:
 	.align	2
-	.global	rk_ftl_cache_write_back
-	.type	rk_ftl_cache_write_back, %function
-rk_ftl_cache_write_back:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	FtlCacheWriteBack
+.L2098:
+	.word	.LANCHOR0
 	.fnend
-	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.size	FtlLowFormat, .-FtlLowFormat
 	.align	2
-	.global	FtlSysFlush
-	.type	FtlSysFlush, %function
-FtlSysFlush:
+	.global	Ftl_get_new_temp_ppa
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	ldr	r3, .L2117
-	ldr	r3, [r3, #-2092]
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L2103
+	ldr	r5, .L2103+4
+	ldrh	r2, [r5, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2101
+	ldr	r3, .L2103+8
+	ldrh	r3, [r5, r3]
 	cmp	r3, #0
-	bne	.L2116
+	bne	.L2102
+.L2101:
 	bl	FtlCacheWriteBack
+	mov	r0, #0
+	bl	FtlGcFreeTempBlock
+	ldr	r0, .L2103+12
+	mov	r4, #0
+	strb	r4, [r5, #-1892]
+	bl	allocate_data_superblock
+	ldr	r3, .L2103+16
+	strh	r4, [r5, r3]	@ movhi
+	add	r3, r3, #12
+	strh	r4, [r5, r3]	@ movhi
 	bl	l2p_flush
-	mov	r0, #1
+	mov	r0, r4
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2116:
-	mov	r0, #0
-	ldmfd	sp!, {r3, pc}
-.L2118:
+.L2102:
+	ldr	r0, .L2103+12
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	get_new_active_ppa
+.L2104:
 	.align	2
-.L2117:
+.L2103:
+	.word	-1900
 	.word	.LANCHOR2
+	.word	-1896
+	.word	.LANCHOR2-1900
+	.word	-1156
 	.fnend
-	.size	FtlSysFlush, .-FtlSysFlush
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	2
-	.global	FtlDeInit
-	.type	FtlDeInit, %function
-FtlDeInit:
+	.type	ftl_do_gc.part.23, %function
+ftl_do_gc.part.23:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 0
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	ldr	r3, .L2121
-	ldr	r3, [r3, #2996]
-	cmp	r3, #1
-	bne	.L2120
-	bl	FtlSysFlush
-.L2120:
-	mov	r0, #0
-	ldmfd	sp!, {r3, pc}
-.L2122:
-	.align	2
-.L2121:
-	.word	.LANCHOR1
-	.fnend
-	.size	FtlDeInit, .-FtlDeInit
-	.align	2
-	.global	ftl_deinit
-	.type	ftl_deinit, %function
-ftl_deinit:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	bl	ftl_flash_de_init
-	bl	FtlDeInit
-	ldmfd	sp!, {r3, lr}
-	b	ftl_flash_de_init
-	.fnend
-	.size	ftl_deinit, .-ftl_deinit
-	.align	2
-	.global	rk_ftl_de_init
-	.type	rk_ftl_de_init, %function
-rk_ftl_de_init:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
+	ldr	r3, .L2202
+	movw	ip, #65535
+	ldr	r2, .L2202+4
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	mov	sl, r1
+	str	r0, [sp, #16]
+	ldrh	r0, [r3, r2]
+	cmp	r0, ip
+	beq	.L2106
+	ldr	r1, .L2202+8
+	ldrh	r4, [r3, r1]
+	cmp	r4, ip
+	streqh	r0, [r3, r1]	@ movhi
+	mvneq	r1, #0
+	streqh	r1, [r3, r2]	@ movhi
+.L2106:
+	ldr	r1, [sp, #16]
+	ldr	r2, [r3, #-1192]
+	cmp	r1, #1
+	add	r2, r2, #1
+	add	r2, r2, r1, asl #7
+	str	r2, [r3, #-1192]
+	bne	.L2107
+	ldr	r3, .L2202+12
+	ldr	r1, [r3, #3840]
+	cmp	r1, #0
+	bne	.L2108
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2107
+.L2108:
+	ldr	r4, .L2202
+	ldr	r3, [r4, #-1780]
+	cmp	r3, #29
+	bhi	.L2107
+	mov	r3, #432
+	ldrh	r3, [r4, r3]
+	add	r2, r2, r3
+	str	r2, [r4, #-1192]
+	bl	FtlGcReFreshBadBlk
+	ldr	r3, .L2202+16
+	movw	r2, #65535
+	ldrh	r3, [r4, r3]
+	cmp	r3, r2
+	bne	.L2107
+	ldr	r2, .L2202+8
+	ldrh	r2, [r4, r2]
+	cmp	r2, r3
+	bne	.L2107
+	ldr	r3, [r4, #-1192]
+	cmp	r3, #1024
+	bhi	.L2109
+	ldr	r3, .L2202+20
+	ldrh	r3, [r4, r3]
+	cmp	r3, #63
+	bhi	.L2107
+.L2109:
+	ldr	r3, .L2202
+	mov	r2, #432
+	ldr	r0, .L2202+20
 	mov	r1, #0
-	ldr	r0, .L2125
+	strh	r1, [r3, r2]	@ movhi
+	ldrh	ip, [r3, r0]
+	ldr	r0, .L2202+24
+	ldrh	r0, [r3, r0]
+	add	r0, r0, #64
+	cmp	ip, r0
+	bgt	.L2107
+	str	r1, [r3, #-1192]
+	ldr	r1, [r3, #-1780]
+	cmp	r1, #0
+	moveq	r1, #6
+	beq	.L2198
+	cmp	r1, #5
+	bhi	.L2111
+	mov	r1, #18
+.L2198:
+	strh	r1, [r3, r2]	@ movhi
+.L2111:
+	mov	r0, #32
+	movw	r7, #65535
+	bl	List_get_gc_head_node
+	uxth	r2, r0
+	cmp	r2, r7
+	beq	.L2112
+	ldr	r5, .L2202
+	ldr	r6, .L2202+28
+	ldrh	r0, [r5, r6]
+	cmp	r0, #0
+	moveq	r3, #1
+	streqh	r3, [r5, r6]	@ movhi
+	beq	.L2112
+	ldr	r3, .L2202+12
+	movw	ip, #3918
+	movw	lr, #3848
+	ldr	r9, [r5, #-2016]
+	mov	r2, r2, asl #1
+	ldrh	ip, [r3, ip]
+	ldrh	r3, [r3, lr]
+	ldrh	r1, [r9, r2]
+	mul	r3, r3, ip
+	add	r3, r3, #1
+	cmp	r1, r3
+	bgt	.L2112
+	add	fp, r0, #1
+	mov	r8, #0
+	str	r8, [r5, #-1184]
+	uxth	fp, fp
+	strh	fp, [r5, r6]	@ movhi
+	str	r2, [sp, #8]
+	bl	List_get_gc_head_node
+	ldr	r2, [sp, #8]
+	uxth	r4, r0
+	cmp	r4, r7
+	beq	.L2112
+	ldrh	r2, [r9, r2]
+	mov	r7, r4, asl #1
+	ldr	r0, .L2202+32
+	mov	r1, fp
+	ldrh	r3, [r9, r7]
+	str	r2, [sp, #0]
+	mov	r2, r4
 	bl	printk
-	ldmfd	sp!, {r3, lr}
-	b	ftl_deinit
+	ldrh	r3, [r5, r6]
+	cmp	r3, #40
+	bls	.L2114
+	ldr	r3, [r5, #-2016]
+	ldrh	r3, [r3, r7]
+	cmp	r3, #32
+	strhih	r8, [r5, r6]	@ movhi
+.L2114:
+	ldr	r2, .L2202
+	mov	r3, #432
+	mov	r1, #6
+	strh	r1, [r2, r3]	@ movhi
+	b	.L2116
+.L2112:
+	bl	GetSwlReplaceBlock
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r4, r0
+	bne	.L2116
+	ldr	r2, .L2202
+	mov	r3, #432
+	mov	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+.L2107:
+	ldr	r5, .L2202
+	movw	r4, #65535
+	ldr	r3, .L2202+16
+	ldrh	r2, [r5, r3]
+	cmp	r2, r4
+	bne	.L2116
+	sub	r3, r3, #140
+	ldrh	r3, [r5, r3]
+	cmp	r3, r2
+	movne	r4, r2
+	bne	.L2116
+	ldr	r2, .L2202+8
+	ldrh	r7, [r5, r2]
+	cmp	r7, r3
+	movne	r4, r3
+	bne	.L2116
+	ldr	r8, .L2202+20
+	ldr	r2, [r5, #-1192]
+	ldrh	r3, [r5, r8]
+	cmp	r3, #23
+	movhi	r3, #1024
+	movls	r3, #5120
+	cmp	r2, r3
+	movls	r4, r7
+	bls	.L2116
+	mov	r2, #432
+	mov	r3, #0
+	str	r3, [r5, #-1192]
+	mov	r6, r5
+	strh	r3, [r5, r2]	@ movhi
+	bl	GetSwlReplaceBlock
+	cmp	r0, r7
+	mov	r4, r0
+	bne	.L2118
+	ldr	r3, .L2202+24
+	ldrh	r1, [r5, r8]
+	ldrh	r2, [r5, r3]
+	cmp	r1, r2
+	movcs	r2, #80
+	strcsh	r2, [r5, r3]	@ movhi
+	bcs	.L2128
+	mov	r0, #64
+	bl	List_get_gc_head_node
+	uxth	r3, r0
+	cmp	r3, r4
+	beq	.L2128
+	ldr	r2, [r5, #-1000]
+	cmp	r2, #0
+	bne	.L2121
+	ldr	r2, .L2202+12
+	movw	r1, #3868
+	ldrh	r1, [r2, r1]
+	cmp	r1, #3
+	beq	.L2121
+	ldr	r1, [r5, #-1712]
+	cmp	r1, #0
+	bne	.L2121
+	ldr	r1, [r2, #3840]
+	cmp	r1, #0
+	bne	.L2121
+	ldrb	r0, [r2, #928]	@ zero_extendqisi2
+	cmp	r0, #0
+	beq	.L2122
+.L2121:
+	ldr	r1, .L2202
+	mov	r3, r3, asl #1
+	movw	ip, #3848
+	movw	lr, #3868
+	ldr	r2, [r1, #-2016]
+	ldrh	r0, [r2, r3]
+	movw	r2, #3918
+	ldr	r3, .L2202+12
+	ldrh	r2, [r3, r2]
+	ldrh	ip, [r3, ip]
+	ldrh	r3, [r3, lr]
+	mul	ip, ip, r2
+	cmp	r3, #3
+	moveq	r3, r2, lsr #1
+	movne	r3, #0
+	add	r3, ip, r3
+	cmp	r0, r3
+	bgt	.L2124
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	ldr	r2, .L2202+12
+	ldr	r3, .L2202
+	ldr	r2, [r2, #3976]
+	ldr	r1, [r3, #-1844]
+	add	r2, r2, r2, asl #1
+	cmp	r1, r2, lsr #2
+	ldr	r2, .L2202+24
+	movhi	r1, #128
+	movls	r1, #160
+	strh	r1, [r3, r2]	@ movhi
+	uxth	r4, r0
+	b	.L2126
+.L2124:
+	ldr	r3, .L2202+24
+	mov	r2, #128
+	strh	r2, [r1, r3]	@ movhi
+	b	.L2128
+.L2122:
+	ldr	r2, [r5, #-2016]
+	mov	r3, r3, asl #1
+	ldr	r6, .L2202
+	ldr	r5, .L2202+24
+	ldrh	r3, [r2, r3]
+	cmp	r3, #7
+	movhi	r3, #64
+	strhih	r3, [r6, r5]	@ movhi
+	bhi	.L2128
+	bl	List_get_gc_head_node
+	mov	r3, #128
+	strh	r3, [r6, r5]	@ movhi
+	uxth	r4, r0
 .L2126:
-	.align	2
-.L2125:
-	.word	.LC134
-	.fnend
-	.size	rk_ftl_de_init, .-rk_ftl_de_init
-	.align	2
-	.global	rk_ftl_garbage_collect
-	.type	rk_ftl_garbage_collect, %function
-rk_ftl_garbage_collect:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	ftl_do_gc
-	.fnend
-	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
-	.align	2
-	.global	ftl_fix_nand_power_lost_error
-	.type	ftl_fix_nand_power_lost_error, %function
-ftl_fix_nand_power_lost_error:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 48
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2137
-	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
-	.save {r4, r5, r6, r7, r8, sl, lr}
-	.pad #52
-	sub	sp, sp, #52
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	cmp	r3, #0
+	movw	r3, #65535
+	cmp	r4, r3
 	beq	.L2128
-	ldr	r4, .L2137+4
-	movw	r3, #290
-	ldr	r0, .L2137+8
-	movw	r7, #4097
-	ldrh	r6, [r4, r3]
-	ldr	r3, [r4, #-2020]
-	mov	r5, r6, asl #1
-	mov	r1, r6
-	ldrh	r2, [r3, r5]
+.L2118:
+	ldr	r1, .L2202
+	mov	r0, r4, asl #1
+	ldr	r3, .L2202+20
+	ldr	ip, .L2202+12
+	ldrh	r2, [r1, r3]
+	ldr	ip, [ip, #4048]
+	ldr	r3, [r1, #-2016]
+	ldrh	r3, [r3, r0]
+	ldrh	r0, [ip, r0]
+	str	r0, [sp, #0]
+	ldr	r0, .L2202+36
+	ldrh	r1, [r1, r0]
+	ldr	r0, .L2202+40
+	str	r1, [sp, #4]
+	mov	r1, r4
 	bl	printk
-	ldr	r3, .L2137+12
-	ldrh	r0, [r4, r3]
-	bl	FtlGcRefreshOpenBlock
-	ldr	r3, .L2137+16
-	ldrh	r0, [r4, r3]
-	bl	FtlGcRefreshOpenBlock
-	sub	r0, r4, #2000
-	bl	allocate_new_data_superblock
-	sub	r0, r4, #1952
-	bl	allocate_new_data_superblock
-	b	.L2130
-.L2132:
-	mov	r0, #1
-	mov	r1, r0
-	bl	ftl_do_gc
-	ldr	r3, [r4, #-2020]
-	ldrh	r3, [r3, r5]
+.L2128:
+	bl	FtlGcReFreshBadBlk
+.L2116:
+	movw	r0, #65535
+	rsb	ip, r0, r4
+	rsbs	r1, ip, #0
+	ldr	r3, [sp, #16]
+	adc	r1, r1, ip
+	ldr	r5, .L2202
+	cmp	r3, #0
+	movne	r2, #0
+	andeq	r2, r1, #1
+	cmp	r2, #0
+	beq	.L2129
+	ldr	r3, .L2202+20
+	ldrh	r2, [r5, r3]
+	cmp	r2, #24
+	movhi	r6, #1
+	bhi	.L2130
+	ldr	r1, .L2202+12
+	movw	r3, #3916
+	cmp	r2, #16
+	ldrh	r6, [r1, r3]
+	movhi	r6, r6, lsr #5
+	bhi	.L2130
+	cmp	r2, #12
+	movhi	r6, r6, lsr #4
+	bhi	.L2130
+	cmp	r2, #8
+	movhi	r6, r6, lsr #2
+.L2130:
+	ldr	r1, .L2202+36
+	ldr	r3, .L2202
+	ldrh	r0, [r5, r1]
+	cmp	r0, r2
+	mov	r0, r1
+	bcs	.L2134
+	ldr	r2, .L2202+44
+	movw	ip, #65535
+	ldrh	r2, [r3, r2]
+	cmp	r2, ip
+	bne	.L2135
+	ldr	ip, .L2202+8
+	ldrh	ip, [r3, ip]
+	cmp	ip, r2
+	bne	.L2135
+	mov	r2, #432
+	ldrh	r0, [r3, r2]
+	cmp	r0, #0
+	bne	.L2136
+	ldr	r2, .L2202+12
+	ldr	ip, [r3, #-1844]
+	ldr	r2, [r2, #3976]
+	add	r2, r2, r2, asl #1
+	cmp	ip, r2, lsr #2
+	movcs	r2, #18
+	bcs	.L2200
+.L2136:
+	ldr	r3, .L2202
+	ldr	r2, .L2202+48
+	ldr	r1, .L2202+36
+	ldrh	r2, [r3, r2]
+	add	r2, r2, r2, asl #1
+	mov	r2, r2, asr #2
+.L2200:
+	strh	r2, [r3, r1]	@ movhi
+	mov	r2, #0
+	ldr	r3, .L2202
+	str	r2, [r3, #-1184]
+	b	.L2139
+.L2135:
+	ldr	r3, .L2202
+	ldr	r2, .L2202+48
+	ldrh	r2, [r3, r2]
+	add	r2, r2, r2, asl #1
+	mov	r2, r2, asr #2
+	strh	r2, [r3, r0]	@ movhi
+.L2134:
+	ldr	r3, .L2202+12
+	cmp	sl, #2
+	movw	r4, #65535
+	movhi	sl, #0
+	movls	sl, #1
+	ldr	r3, [r3, #3840]
+	cmp	r3, #0
+	moveq	sl, #0
+	cmp	sl, #0
+	addne	r6, r6, #1
+	uxthne	r6, r6
+	b	.L2140
+.L2129:
+	ldr	r3, .L2202+44
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	bne	.L2141
+	ldr	r0, .L2202+8
+	ldrh	r0, [r5, r0]
+	cmp	r0, r3
+	movne	r1, #0
+	andeq	r1, r1, #1
+	cmp	r1, #0
+	beq	.L2141
+	ldr	r1, .L2202+16
+	ldrh	r4, [r5, r1]
+	cmp	r4, r3
+	movne	r4, r3
+	bne	.L2141
+	ldr	r3, .L2202+20
+	mov	r6, #432
+	str	r2, [r5, #-1184]
+	ldrh	r7, [r5, r3]
+	add	r3, r3, #804
+	ldrh	r2, [r5, r3]
+	cmp	r2, r7
+	bcs	.L2142
+	ldrh	r2, [r5, r6]
+	cmp	r2, #0
+	bne	.L2143
+	ldr	r2, .L2202+12
+	ldr	r1, [r5, #-1844]
+	ldr	r2, [r2, #3976]
+	add	r2, r2, r2, asl #1
+	cmp	r1, r2, lsr #2
+	movcs	r2, #18
+	strcsh	r2, [r5, r3]	@ movhi
+	bcs	.L2145
+.L2143:
+	ldr	r3, .L2202
+	ldr	r2, .L2202+48
+	ldr	r1, .L2202+36
+	ldrh	r2, [r3, r2]
+	add	r2, r2, r2, asl #1
+	mov	r2, r2, asr #2
+	strh	r2, [r3, r1]	@ movhi
+.L2145:
+	bl	FtlReadRefresh
+	mov	r3, #432
+	ldr	r2, .L2202
+	b	.L2201
+.L2142:
+	ldrh	r0, [r5, r6]
+	cmp	r0, #0
+	bne	.L2141
+	ldr	r2, .L2202+48
+	ldrh	r4, [r5, r2]
+	add	r2, r4, r4, asl #1
+	mov	r2, r2, asr #2
+	strh	r2, [r5, r3]	@ movhi
+	bl	List_get_gc_head_node
+	ldr	r3, [r5, #-2016]
+	ldr	r1, .L2202+12
+	movw	r2, #3918
+	ldrh	r2, [r1, r2]
+	uxth	r0, r0
+	mov	r0, r0, asl #1
+	ldrh	r3, [r3, r0]
+	movw	r0, #3848
+	ldrh	r1, [r1, r0]
+	mul	r2, r1, r2
+	add	r2, r2, r2, lsr #31
+	cmp	r3, r2, asr #1
+	ble	.L2146
+	sub	r4, r4, #1
+	cmp	r7, r4
+	blt	.L2146
+	bl	FtlReadRefresh
+	ldrh	r0, [r5, r6]
+	b	.L2139
+.L2146:
+	cmp	r3, #0
+	movwne	r4, #65535
+	bne	.L2141
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldr	r3, .L2202+20
+	ldr	r2, .L2202
+	ldrh	r0, [r2, r3]
+	add	r0, r0, #1
+	b	.L2139
+.L2141:
+	ldr	r3, .L2202+12
+	ldr	r6, [r3, #3840]
+	cmp	r6, #0
+	movne	r6, #2
+	moveq	r6, #1
+.L2140:
+	ldr	r3, .L2202
+	movw	r0, #65535
+	ldr	r2, .L2202+16
+	ldrh	r1, [r3, r2]
+	cmp	r1, r0
+	bne	.L2147
+	cmp	r4, r1
+	strneh	r4, [r3, r2]	@ movhi
+	bne	.L2149
+	ldr	r2, .L2202+8
+	ldrh	r1, [r3, r2]
+	cmp	r1, r4
+	beq	.L2149
+	ldr	r0, [r3, #-2016]
+	mov	r1, r1, asl #1
+	ldrh	r1, [r0, r1]
+	cmp	r1, #0
+	mvneq	r1, #0
+	streqh	r1, [r3, r2]	@ movhi
+	ldr	r3, .L2202
+	ldr	r1, .L2202+16
+	ldrh	r0, [r3, r2]
+	strh	r0, [r3, r1]	@ movhi
+	mvn	r1, #0
+	strh	r1, [r3, r2]	@ movhi
+.L2149:
+	ldr	r5, .L2202
+	mov	r3, #0
+	ldr	r7, .L2202+16
+	strb	r3, [r5, #-1752]
+	movw	r3, #65535
+	ldrh	r0, [r5, r7]
+	cmp	r0, r3
+	beq	.L2147
+	bl	IsBlkInGcList
+	cmp	r0, #0
+	mvnne	r3, #0
+	strneh	r3, [r5, r7]	@ movhi
+	ldr	r3, .L2202+12
+	ldr	r7, .L2202
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2152
+	ldr	r3, .L2202+16
+	ldrh	r0, [r7, r3]
+	bl	ftl_get_blk_mode
+	strb	r0, [r7, #-1752]
+.L2152:
+	ldr	r8, .L2202+16
+	movw	r3, #65535
+	ldr	r5, .L2202
+	ldrh	r2, [r7, r8]
+	cmp	r2, r3
+	beq	.L2147
+	add	r0, r5, r8
+	bl	make_superblock
+	ldr	r1, .L2202+52
+	movw	r2, #434
+	mov	r3, #0
+	strh	r3, [r5, r2]	@ movhi
+	strh	r3, [r5, r1]	@ movhi
+	strb	r3, [r5, #-1754]
+	ldrh	r3, [r5, r8]
+	ldr	r2, [r5, #-2016]
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	mov	r3, #436
+	strh	r2, [r5, r3]	@ movhi
+.L2147:
+	ldr	r3, .L2202
+	ldr	r2, .L2202+16
+	ldrh	r1, [r3, r2]
+	sub	r2, r2, #236
+	ldrh	r2, [r3, r2]
+	cmp	r2, r1
+	mov	r2, r3
+	beq	.L2153
+	ldr	r0, .L2202+56
+	ldrh	r3, [r3, r0]
+	cmp	r3, r1
+	movne	fp, r4
+	bne	.L2197
+.L2154:
+.L2153:
+	ldr	r3, .L2202+16
+	mvn	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+	mov	r3, #432
+.L2201:
+	ldrh	r0, [r2, r3]
+	b	.L2139
+.L2197:
+	ldr	r4, .L2202
+	movw	sl, #65535
+	ldr	r3, .L2202+16
+	ldrh	r3, [r4, r3]
+	cmp	r3, sl
+	bne	.L2156
+	ldr	r5, .L2202+28
+	mov	r3, #0
+	str	r3, [r4, #-1184]
+.L2196:
+	ldrh	r8, [r4, r5]
+	mov	r0, r8
+	bl	List_get_gc_head_node
+	ldr	r3, .L2202+16
+	movw	r1, #65535
+	uxth	r7, r0
+	strh	r7, [r4, r3]	@ movhi
+	cmp	r7, r1
+	bne	.L2158
+	ldr	r2, .L2202
+	add	r3, r3, #572
+	mov	r1, #0
+	mov	r0, #8
+	strh	r1, [r2, r3]	@ movhi
+	b	.L2139
+.L2158:
+	mov	r0, r7
+	bl	IsBlkInGcList
+	cmp	r0, #0
+	add	r0, r8, #1
+	strneh	r0, [r4, r5]	@ movhi
+	bne	.L2196
+	ldr	ip, .L2202+12
+	movw	r8, #3916
+	movw	sl, #3848
+	ldr	r2, [r4, #-2016]
+	mov	r3, r7, asl #1
+	uxth	r0, r0
+	ldrh	r8, [ip, r8]
+	ldrh	ip, [ip, sl]
+	strh	r0, [r4, r5]	@ movhi
+	ldrh	r1, [r2, r3]
+	mul	r8, ip, r8
+	add	ip, r8, r8, lsr #31
+	cmp	r1, ip, asr #1
+	bgt	.L2161
+	cmp	r0, #48
+	bls	.L2162
+	cmp	r1, #8
+	bls	.L2162
+	ldr	r1, .L2202+60
+	ldrh	r1, [r4, r1]
+	cmp	r1, #35
+	bhi	.L2162
+.L2161:
+	mov	r1, #0
+	strh	r1, [r4, r5]	@ movhi
+.L2162:
+	ldrh	r3, [r2, r3]
+	movw	r2, #65535
+	ldr	sl, .L2202
+	cmp	r3, r8
+	cmpge	fp, r2
+	movne	r8, #0
+	moveq	r8, #1
+	bne	.L2163
+	ldr	r3, .L2202+16
+	mvn	r2, #0
+	strh	r2, [sl, r3]	@ movhi
+	add	r3, r3, #572
+	mov	r2, #0
+	strh	r2, [sl, r3]	@ movhi
+	mov	r3, #432
+	ldrh	r0, [sl, r3]
+	b	.L2139
+.L2163:
 	cmp	r3, #0
-	beq	.L2131
-.L2130:
-	subs	r7, r7, #1
-	bne	.L2132
-.L2131:
-	ldr	r7, .L2137+4
-	mov	r1, r6
-	ldr	r0, .L2137+8
-	ldr	r3, [r7, #-2020]
-	ldrh	r2, [r3, r5]
-	bl	printk
-	ldr	r3, [r7, #-2020]
-	ldrh	r4, [r3, r5]
-	cmp	r4, #0
-	bne	.L2133
-	add	r8, sp, #48
-	mov	r0, sp
-	strh	r6, [r8, #-48]!	@ movhi
-	add	r8, r8, #14
+	bne	.L2164
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r3, [r4, r5]
+	add	r3, r3, #1
+	strh	r3, [r4, r5]	@ movhi
+	b	.L2196
+.L2164:
+	ldr	r3, .L2202+12
+	strb	r8, [sl, #-1752]
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2165
+	mov	r0, r7
+	bl	ftl_get_blk_mode
+	strb	r0, [sl, #-1752]
+.L2165:
+	ldr	r4, .L2202
+	sub	r0, r4, #1760
 	bl	make_superblock
-	ldr	r2, .L2137
-	movw	r3, #3844
-	ldr	r7, [r7, #-2088]
-	movw	lr, #65535
-	mov	ip, #36
-	ldrh	sl, [r2, r3]
-	mov	r1, r4
-	mov	r3, r4
-	b	.L2134
-.L2136:
-	ldrh	r0, [r8, #2]!
-	cmp	r0, lr
-	beq	.L2135
-	mla	r2, ip, r4, r7
-	add	r4, r4, #1
-	mov	r0, r0, asl #10
-	uxth	r4, r4
-	stmib	r2, {r0, r1}
-	str	r1, [r2, #12]
-.L2135:
+	movw	r1, #434
+	mov	r3, #0
+	strh	r3, [r4, r1]	@ movhi
+	ldr	r1, .L2202+16
+	ldr	r0, [r4, #-2016]
+	ldrh	r1, [r4, r1]
+	mov	r1, r1, asl #1
+	ldrh	r0, [r0, r1]
+	mov	r1, #436
+	strb	r3, [r4, #-1754]
+	strh	r0, [r4, r1]	@ movhi
+	ldr	r1, .L2202+52
+	strh	r3, [r4, r1]	@ movhi
+.L2156:
+	ldr	sl, [sp, #16]
+	cmp	sl, #1
+	bne	.L2166
+	bl	FtlReadRefresh
+.L2166:
+	ldr	r3, .L2202
+	mov	r2, #1
+	movw	r1, #3916
+	str	r2, [r3, #-996]
+	ldr	r2, .L2202+12
+	ldrh	r9, [r2, r1]
+	ldrb	r1, [r2, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L2167
+	ldrb	r1, [r3, #-1752]	@ zero_extendqisi2
+	cmp	r1, #1
+	movweq	r1, #3918
+	ldreqh	r9, [r2, r1]
+.L2167:
+	ldr	r2, .L2202+52
+	mov	r8, #0
+	str	fp, [sp, #20]
+	mov	fp, r9
+	ldr	r4, .L2202
+	ldrh	r3, [r3, r2]
+	add	r2, r3, r6
+	cmp	r2, r9
+	rsbgt	r6, r3, r9
+	uxthgt	r6, r6
+	b	.L2169
+.L2171:
+	ldrh	r1, [r2, #2]!
+	movw	sl, #65535
 	add	r3, r3, #1
+	cmp	r1, sl
 	uxth	r3, r3
-.L2134:
-	cmp	r3, sl
-	bne	.L2136
-	ldr	r7, .L2137+4
-	mov	r1, r6
-	ldr	r0, .L2137+20
-	ldr	r3, [r7, #-2020]
-	ldrh	r2, [r3, r5]
-	bl	printk
-	mov	r1, #0
-	mov	r2, r4
-	ldr	r0, [r7, #-2088]
-	bl	FlashEraseBlocks
-	ldr	r0, [r7, #-2088]
+	orrne	r1, ip, r1, asl #10
+	mlane	sl, r0, r7, lr
+	addne	r7, r7, #1
+	uxthne	r7, r7
+	strne	r1, [sl, #4]
+.L2177:
+	cmp	r3, r5
+	bne	.L2171
+	ldr	r0, [r4, #-1164]
+	mov	r1, r7
+	ldrb	r2, [r4, #-1752]	@ zero_extendqisi2
+	mov	r5, #0
+	bl	FlashReadPages
+	mov	r9, r5
+	mov	sl, r6
+	b	.L2172
+.L2175:
+	ldr	r3, [r4, #-1164]
+	add	r2, r3, r5
+	ldr	r3, [r3, r5]
+	ldr	r6, [r2, #12]
+	cmn	r3, #1
+	beq	.L2173
+	ldrh	r3, [r6, #0]
+	movw	r1, #61589
+	cmp	r3, r1
+	bne	.L2173
+	add	r1, sp, #28
+	mov	r2, #0
+	ldr	r0, [r6, #8]
+	bl	log2phys
+	ldr	r1, [r4, #-1164]
+	ldr	r2, [sp, #28]
+	add	r1, r1, r5
+	bic	r2, r2, #-2147483648
+	ldr	r3, [r1, #4]
+	cmp	r2, r3
+	bne	.L2173
+	movw	r3, #434
+	ldr	r0, [r4, #-1180]
+	ldrh	r2, [r4, r3]
+	ldr	r1, [r1, #16]
+	add	r2, r2, #1
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r2, [r4, #-968]
+	mov	r3, #36
+	mla	r2, r3, r0, r2
+	str	r1, [r2, #16]
+	str	r2, [sp, #8]
+	str	r3, [sp, #12]
+	bl	Ftl_get_new_temp_ppa
+	ldr	r2, [sp, #8]
+	ldr	r1, [r4, #-1180]
+	str	r0, [r2, #4]
+	ldr	r3, [sp, #12]
+	ldr	r2, [r4, #-968]
+	mla	r3, r3, r1, r2
+	ldr	r2, [r4, #-1164]
+	add	r2, r2, r5
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #8]
 	mov	r1, #1
-	mov	r2, r4
-	bl	FlashEraseBlocks
-.L2133:
-	ldr	r2, .L2137+4
-	movw	r3, #290
+	ldr	r2, [r2, #12]
+	str	r2, [r3, #12]
+	ldr	r3, [sp, #28]
+	str	r3, [r6, #12]
+	ldr	r3, .L2202+44
+	ldrh	r3, [r4, r3]
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, [r4, #-1800]
+	ldr	r0, [r4, #-1164]
+	str	r3, [r6, #4]
+	add	r0, r0, r5
+	ldr	r3, [r4, #-1180]
+	add	r3, r3, #1
+	str	r3, [r4, #-1180]
+	bl	FtlGcBufAlloc
+	ldr	r3, .L2202+12
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2174
+	ldrb	r3, [r4, #-1893]	@ zero_extendqisi2
+	ldr	r2, [r4, #-1180]
+	cmp	r2, r3
+	beq	.L2174
+	ldr	r3, .L2202+64
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L2173
+.L2174:
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	ldrne	r3, .L2202
+	movne	r2, #0
+	strne	r2, [r3, #-996]
+	movne	r2, #432
+	bne	.L2201
+.L2173:
+	add	r9, r9, #1
+	add	r5, r5, #36
+	uxth	r9, r9
+.L2172:
+	cmp	r9, r7
+	bne	.L2175
+	add	r8, r8, #1
+	mov	r6, sl
+.L2169:
+	uxth	r3, r8
+	ldr	r7, .L2202
+	cmp	r3, r6
+	ldr	r3, .L2202+52
+	bcs	.L2176
+	ldr	r1, .L2202+12
+	movw	r2, #3848
+	ldrh	ip, [r4, r3]
+	mov	r7, #0
+	ldr	lr, [r4, #-1164]
+	mov	r3, r7
+	ldrh	r5, [r1, r2]
+	add	ip, ip, r8
+	ldr	r2, .L2202+68
+	mov	r0, #36
+	b	.L2177
+.L2176:
+	ldrh	r2, [r7, r3]
+	mov	r9, fp
+	ldr	fp, [sp, #20]
+	add	r6, r6, r2
+	uxth	r6, r6
+	strh	r6, [r7, r3]	@ movhi
+	cmp	r6, r9
+	bcc	.L2178
+	ldr	r3, [r7, #-1180]
+	cmp	r3, #0
+	beq	.L2179
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	movne	r3, #0
+	strne	r3, [r7, #-996]
+	movne	r3, #432
+	ldrneh	r0, [r7, r3]
+	bne	.L2139
+.L2179:
+	ldr	r3, .L2202
+	movw	r2, #434
+	ldrh	ip, [r3, r2]
+	cmp	ip, #0
+	bne	.L2180
+	ldr	r2, .L2202+16
+	ldr	r0, [r3, #-2016]
+	ldrh	r1, [r3, r2]
+	mov	r1, r1, asl #1
+	ldrh	r4, [r0, r1]
+	cmp	r4, #0
+	beq	.L2180
+	strh	ip, [r0, r1]	@ movhi
+	ldrh	r0, [r3, r2]
+	bl	update_vpc_list
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2180:
+	ldr	r3, .L2202+16
 	mvn	r1, #0
+	ldr	r2, .L2202
 	strh	r1, [r2, r3]	@ movhi
-.L2128:
-	add	sp, sp, #52
-	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
-.L2138:
+.L2178:
+	ldr	r3, .L2202
+	ldr	r2, .L2202+20
+	ldrh	r2, [r3, r2]
+	cmp	r2, #2
+	ldrls	r2, .L2202+12
+	movwls	r3, #3916
+	ldrlsh	r6, [r2, r3]
+	bls	.L2197
+.L2181:
+	mov	r1, #0
+	str	r1, [r3, #-996]
+	mov	r1, #432
+	ldrh	r0, [r3, r1]
+	cmp	r0, #0
+	addeq	r0, r2, #1
+.L2139:
+	add	sp, sp, #36
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2203:
 	.align	2
-.L2137:
-	.word	.LANCHOR0
+.L2202:
 	.word	.LANCHOR2
-	.word	.LC135
+	.word	-1140
+	.word	-1142
+	.word	.LANCHOR0
+	.word	-1760
 	.word	-2000
-	.word	-1952
-	.word	.LC136
+	.word	-1194
+	.word	-1188
+	.word	.LC149
+	.word	-1196
+	.word	.LC150
+	.word	-1900
+	.word	-1776
+	.word	-1758
+	.word	-1948
+	.word	-1156
+	.word	-1896
+	.word	.LANCHOR2-1746
 	.fnend
-	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.size	ftl_do_gc.part.23, .-ftl_do_gc.part.23
 	.align	2
-	.global	FtlInit
-	.type	FtlInit, %function
-FtlInit:
+	.global	ftl_do_gc
+	.type	ftl_do_gc, %function
+ftl_do_gc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-.L2140:
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mvn	r3, #0
-	ldr	r4, .L2150
-	ldr	r6, .L2150+4
-	ldr	r5, .L2150+8
-	ldr	r1, .L2150+12
-	str	r3, [r6, #2996]
-	mov	r3, #0
-	ldr	r0, .L2150+16
-	str	r3, [r4, #444]
-	str	r3, [r4, #-2092]
-	bl	printk
-	ldr	r0, .L2150+20
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldr	r0, [r5, #3848]
-	uxth	r0, r0
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cmp	r0, #0
-	ldrne	r0, .L2150+24
-	bne	.L2149
-	bl	FtlSysBlkInit
-	cmp	r0, #0
-	beq	.L2143
-	ldr	r0, .L2150+28
-.L2149:
-	ldr	r1, .L2150+32
-	bl	printk
-	b	.L2142
-.L2143:
-	mov	r1, #1
-	str	r1, [r6, #2996]
-	bl	ftl_do_gc
-	ldr	r3, .L2150+36
-	ldrh	r3, [r4, r3]
-	cmp	r3, #15
-	bhi	.L2144
-	mov	r4, #1024
-.L2145:
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r3, .L2211
+	mov	r5, r1
+	ldr	r0, [r3, #4040]
+	cmp	r0, #0
+	movne	r0, #0
+	ldmnefd	sp!, {r3, r4, r5, pc}
+	ldr	r3, .L2211+4
+	ldr	r2, [r3, #-996]
+	cmp	r2, #0
+	ldmnefd	sp!, {r3, r4, r5, pc}
+	ldr	r1, .L2211+8
+	ldrh	r1, [r3, r1]
+	cmp	r1, #47
+	movls	r0, r2
+	ldmlsfd	sp!, {r3, r4, r5, pc}
+	ldr	r1, .L2211+12
+	movw	r2, #3000
+	ldrh	r1, [r1, r2]
+	movw	r2, #65535
+	cmp	r1, r2
+	beq	.L2206
+	ldr	r1, .L2211+16
+	ldrh	r3, [r3, r1]
+	cmp	r3, r2
+	beq	.L2206
 	mov	r0, #1
-	mov	r1, r0
-	bl	ftl_do_gc
-	subs	r4, r4, #1
-	bne	.L2145
-	b	.L2142
-.L2144:
-	ldrb	r3, [r5, #928]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L2142
-	mov	r4, #128
-.L2146:
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	bne	.L2210
+.L2206:
+	mov	r0, r4
+	mov	r1, r5
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	ftl_do_gc.part.23
+.L2210:
 	mov	r0, #1
-	mov	r1, r0
-	bl	ftl_do_gc
-	subs	r4, r4, #1
-	bne	.L2146
-.L2142:
-	mov	r0, #0
-	ldmfd	sp!, {r4, r5, r6, pc}
-.L2151:
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2212:
 	.align	2
-.L2150:
+.L2211:
+	.word	.LANCHOR0
 	.word	.LANCHOR2
+	.word	-2008
 	.word	.LANCHOR1
-	.word	.LANCHOR0
-	.word	.LC79
-	.word	.LC78
-	.word	.LANCHOR0+3048
-	.word	.LC137
-	.word	.LC138
-	.word	.LANCHOR3+36
-	.word	-2004
+	.word	-1900
 	.fnend
-	.size	FtlInit, .-FtlInit
+	.size	ftl_do_gc, .-ftl_do_gc
 	.align	2
-	.type	ftl_write.part.22, %function
-ftl_write.part.22:
+	.global	FtlCacheWriteBack
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 96
+	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	mov	r3, #2048
-	ldr	r4, .L2197
-	.pad #100
-	sub	sp, sp, #100
-	ldr	r7, .L2197+4
-	mov	r5, r1
-	mov	r8, r0
-	str	r2, [sp, #8]
-	str	r3, [r4, #448]
-	movw	r3, #3918
-	ldrh	r6, [r7, r3]
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	mov	r1, r6
-	str	r0, [sp, #12]
-	sub	r0, r8, #1
-	add	r0, r0, r5
-	bl	__aeabi_uidiv
-	ldr	r3, [sp, #12]
-	ldr	sl, [r7, #3964]
-	cmp	sl, #0
-	rsb	r9, r3, r0
-	str	r0, [sp, #36]
-	add	r3, r9, #1
-	str	r3, [sp, #16]
-	ldr	lr, [sp, #16]
-	ldr	r3, [r4, #-1832]
-	add	r3, lr, r3
-	str	r3, [r4, #-1832]
-	ldr	r3, [r4, #-1816]
-	add	r3, r5, r3
-	str	r3, [r4, #-1816]
-	beq	.L2185
-	ldr	r3, [r7, #3968]
-	sub	sl, sl, #1
-	mov	r2, #36
-	ldr	r0, [sp, #12]
-	mla	sl, r2, sl, r3
-	ldr	r3, [sl, #16]
-	cmp	r0, r3
-	strne	r5, [sp, #28]
-	bne	.L2154
-	ldr	r3, [r4, #-1828]
-	mov	r0, r8
-	mov	r1, r6
-	add	r3, r3, #1
-	str	r3, [r4, #-1828]
-	ldr	r3, [r4, #452]
-	add	r3, r3, #1
-	str	r3, [r4, #452]
-	bl	__aeabi_uidivmod
-	ldr	r0, [sl, #8]
-	rsb	r7, r1, r6
-	add	r0, r0, r1, asl #9
-	cmp	r7, r5
-	movcs	r7, r5
-	ldr	r1, [sp, #8]
-	mov	fp, r7, asl #9
-	mov	r2, fp
-	bl	memcpy
-	cmp	r9, #0
-	bne	.L2155
-	ldr	r3, [r4, #452]
-	cmp	r3, #2
-	ble	.L2156
-.L2155:
-	rsb	r3, r7, r5
-	str	r3, [sp, #28]
-	ldr	r3, [sp, #8]
-	add	r8, r8, r7
-	str	r9, [sp, #16]
-	add	r3, r3, fp
-	str	r3, [sp, #8]
-	ldr	r3, [sp, #12]
-	add	r3, r3, #1
-	str	r3, [sp, #12]
-.L2154:
-	ldr	r3, .L2197
-	mov	r2, #0
-	str	r2, [r3, #452]
-	b	.L2153
-.L2185:
-	str	r5, [sp, #28]
-.L2153:
-	ldr	r0, [sp, #12]
-	ldr	r1, [sp, #36]
-	bl	FtlCacheMetchLpa
-	cmp	r0, #0
-	beq	.L2157
-	bl	FtlCacheWriteBack
-.L2157:
-	ldr	r7, .L2197
-	cmp	r5, r6, asl #1
-	ldr	r4, .L2197+4
-	mov	fp, #0
-	movcc	r3, #0
-	movcs	r3, #1
-	sub	r6, r7, #2000
-	str	r3, [sp, #20]
-	str	r6, [r7, #436]
-	mov	sl, r4
-	ldr	r5, [sp, #12]
-	str	fp, [sp, #40]
-	b	.L2194
-.L2183:
-	ldrh	r3, [r6, #4]
-	cmp	r3, #0
-	bne	.L2159
-	ldr	lr, .L2197+8
-	cmp	r6, lr
-	bne	.L2160
-	ldr	r3, .L2197+12
-	ldrh	r3, [r7, r3]
-	cmp	r3, #0
-	bne	.L2161
-	sub	r0, r9, #1952
-	str	r3, [sp, #0]
-	bl	allocate_new_data_superblock
-	ldr	r3, [sp, #0]
-	ldr	r0, .L2197+16
-	str	r3, [r0, #3004]
-.L2161:
-	ldr	r0, .L2197+8
-	bl	allocate_new_data_superblock
-	ldr	r1, .L2197+16
-	ldr	r3, .L2197+20
-	ldr	r2, [r1, #3004]
+	ldr	r3, .L2236
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	ldr	r4, [r3, #440]
+	ldr	r3, .L2236+4
+	ldr	r2, [r3, #4040]
 	cmp	r2, #0
-	movne	r6, r3
-	b	.L2162
-.L2160:
-	ldr	r2, .L2197+16
-	str	r3, [r2, #3004]
-	ldr	r3, .L2197+24
-	ldrh	r3, [r7, r3]
-	cmp	r3, #0
-	subne	r6, r9, #2000
-	bne	.L2162
-	mov	r0, r6
-	bl	allocate_new_data_superblock
-.L2162:
-	ldrh	r3, [r6, #4]
-	cmp	r3, #0
-	bne	.L2163
-	mov	r0, r6
-	bl	allocate_new_data_superblock
-.L2163:
-	str	r6, [r7, #436]
-.L2159:
-	ldr	r1, [r7, #-980]
-	mov	r9, r6
-	ldr	r2, [r4, #3964]
-	ldrh	r3, [r6, #4]
-	rsb	r2, r2, r1
-	cmp	r3, r2
-	movcc	r2, r3
-	ldr	r3, [sp, #16]
-	cmp	r2, r3
-	movcc	r3, r2
-	str	r3, [sp, #52]
-	mov	r3, #0
-	str	r3, [sp, #24]
-	b	.L2164
-.L2180:
-	ldrh	r3, [r9, #4]
-	cmp	r3, #0
-	beq	.L2165
-	ldr	lr, [sp, #36]
-	ldr	r0, [sp, #20]
-	rsb	r2, lr, r5
-	rsbs	r3, r2, #0
-	adc	r3, r3, r2
-	tst	r3, r0
-	beq	.L2166
-	ldr	r1, [sp, #24]
-	cmp	r1, #0
-	beq	.L2166
-	movw	lr, #3918
-	ldr	r0, [sp, #28]
-	ldrh	r2, [r4, lr]
-	add	r1, r0, r8
-	mls	r1, r2, r5, r1
-	cmp	r1, r2
-	bne	.L2165
-.L2166:
-	add	r1, sp, #56
-	mov	r2, #0
-	mov	r0, r5
-	str	r3, [sp, #0]
-	bl	log2phys
-	mov	r0, r9
-	bl	get_new_active_ppa
-	ldr	r2, [r4, #3964]
-	ldr	r1, [r4, #3968]
-	mov	ip, #36
-	ldr	lr, [r4, #3964]
-	mla	r1, ip, r2, r1
-	movw	r2, #3924
-	ldrh	r2, [r4, r2]
-	str	r5, [r1, #16]
-	str	r0, [r1, #4]
-	mul	r0, lr, r2
-	bic	r0, r0, #3
-	str	r0, [sp, #44]
-	ldr	r0, [r7, #-932]
-	ldr	lr, [sp, #44]
-	str	r0, [sp, #48]
-	add	r6, r0, lr
-	movw	r0, #3922
-	ldr	lr, [r4, #3964]
-	ldrh	r0, [r4, r0]
-	str	r6, [r1, #12]
-	mul	lr, lr, r0
-	ldr	r0, [r7, #-952]
-	str	lr, [sp, #32]
-	bic	lr, lr, #3
-	add	lr, r0, lr
-	mov	r0, r6
-	str	lr, [r1, #8]
-	mov	r1, #0
-	str	ip, [sp, #4]
-	bl	ftl_memset
-	ldr	r0, [sp, #12]
-	ldr	ip, [sp, #4]
-	rsb	r3, r0, r5
-	rsbs	r0, r3, #0
-	adc	r0, r0, r3
-	ldr	r3, [sp, #0]
-	str	r0, [sp, #32]
-	orrs	r0, r0, r3
-	beq	.L2167
-	ldr	r1, [sp, #32]
+	bne	.L2214
+	ldr	r1, [r3, #3968]
 	cmp	r1, #0
-	beq	.L2168
-	movw	r2, #3918
-	mov	r0, r8
-	ldrh	fp, [r4, r2]
-	mov	r1, fp
-	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #28]
-	rsb	fp, r1, fp
-	str	r1, [sp, #40]
-	cmp	fp, r3
-	movcs	fp, r3
-	b	.L2169
-.L2168:
-	cmp	r3, #0
-	beq	.L2169
-	ldr	r3, [sp, #28]
-	movw	lr, #3918
-	add	fp, r3, r8
-	ldrh	r3, [r4, lr]
-	mls	fp, r3, r5, fp
-	ldr	r3, [sp, #32]
-	str	r3, [sp, #40]
-	uxth	fp, fp
-.L2169:
-	movw	lr, #3918
-	ldrh	r3, [r4, lr]
-	cmp	fp, r3
-	bne	.L2170
-	ldr	r3, [sp, #32]
-	ldr	r0, [sl, #3964]
-	cmp	r3, #0
-	ldr	r2, [sl, #3968]
-	muleq	r1, r5, fp
-	ldreq	r3, [sp, #8]
-	ldrne	r1, [sp, #8]
-	rsbeq	r1, r8, r1
-	addeq	r1, r3, r1, asl #9
-	ldr	r3, [sp, #20]
-	cmp	r3, #0
-	mov	r3, #36
-	mla	r3, r3, r0, r2
-	strne	r1, [r3, #8]
-	bne	.L2173
-	ldr	r0, [r3, #8]
-	movw	r3, #3922
-	ldrh	r2, [sl, r3]
-	b	.L2195
-.L2170:
-	ldr	r2, [sp, #56]
-	mov	r3, #36
+	beq	.L2214
+	ldrb	r8, [r3, #928]	@ zero_extendqisi2
+	cmp	r8, #0
+	beq	.L2215
+	ldrb	r8, [r4, #8]	@ zero_extendqisi2
+	sub	lr, r8, #1
+	rsbs	r8, lr, #0
+	adc	r8, r8, lr
+.L2215:
+	ldr	r5, .L2236+4
+	mov	r2, r8
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	mov	r6, #0
+	mov	r7, r6
+	ldr	r9, .L2236
+	ldr	r0, [r5, #3972]
+	bl	FlashProgPages
+	b	.L2216
+.L2221:
+	ldr	r2, [r5, #3972]
+	add	r3, r2, r6
+	ldr	r2, [r2, r6]
 	cmn	r2, #1
-	beq	.L2174
-	ldr	r1, [r4, #3964]
-	add	r0, sp, #60
-	str	r2, [sp, #64]
-	ldr	r2, [r4, #3968]
-	str	r5, [sp, #76]
-	mla	r3, r3, r1, r2
-	mov	r1, #1
-	ldr	r2, [r3, #8]
+	beq	.L2235
+	ldr	r2, [r3, #4]
+	cmp	r8, #0
+	ldr	r0, [r3, #16]
+	add	r1, sp, #4
+	str	r2, [sp, #4]
+	orrne	r2, r2, #-2147483648
+	strne	r2, [sp, #4]
+	mov	r2, #1
+	bl	log2phys
+	ldr	r3, [r5, #3972]
+	add	r3, r3, r6
 	ldr	r3, [r3, #12]
-	str	r2, [sp, #68]
-	mov	r2, #0
-	str	r3, [sp, #72]
-	bl	FlashReadPages
-	ldr	r3, [sp, #60]
-	cmn	r3, #1
-	ldreq	r3, [r7, #-1640]
-	addeq	r3, r3, #1
-	streq	r3, [r7, #-1640]
-	beq	.L2176
-	ldr	r3, [r6, #8]
-	cmp	r3, r5
-	beq	.L2176
-	ldr	r3, [r7, #-1640]
-	mov	r2, r5
-	ldr	r0, .L2197+28
-	add	r3, r3, #1
-	str	r3, [r7, #-1640]
-	ldr	r1, [r6, #8]
+	ldr	r0, [r3, #12]
+	cmn	r0, #1
+	beq	.L2219
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r9, #-2016]
+	mov	r3, r0, asl #1
+	mov	sl, r0
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	bne	.L2220
+	ldr	r0, .L2236+8
+	mov	r1, sl
 	bl	printk
-	b	.L2176
-.L2174:
-	ldr	r1, [r4, #3964]
-	ldr	r2, [r4, #3968]
-	mla	r3, r3, r1, r2
-	mov	r1, #0
-	ldr	r0, [r3, #8]
-	movw	r3, #3922
-	ldrh	r2, [r4, r3]
-	bl	ftl_memset
-.L2176:
-	ldr	r3, [sp, #32]
-	ldr	r1, [r4, #3964]
-	ldr	r2, [r4, #3968]
-	cmp	r3, #0
-	mov	r3, #36
-	mla	r3, r3, r1, r2
-	ldrne	r0, [r3, #8]
-	ldrne	r3, [sp, #40]
-	ldrne	r1, [sp, #8]
-	addne	r0, r0, r3, asl #9
-	bne	.L2196
-.L2177:
-	movw	lr, #3918
-	ldr	r0, [r3, #8]
-	ldrh	r1, [r4, lr]
-	ldr	r3, [sp, #8]
-	mul	r1, r1, r5
-	rsb	r1, r8, r1
-	add	r1, r3, r1, asl #9
-.L2196:
-	mov	r2, fp, asl #9
-	b	.L2195
-.L2167:
-	ldr	r3, [sp, #20]
-	ldr	r2, [r4, #3964]
+.L2220:
+	mov	r0, sl
+	bl	decrement_vpc_count
+.L2219:
+	add	r7, r7, #1
+	add	r6, r6, #36
+.L2216:
+	ldr	r3, [r5, #3968]
+	cmp	r7, r3
+	bcc	.L2221
+	b	.L2222
+.L2231:
+	ldr	r3, [r5, #3972]
+	mvn	r2, #0
+	ldr	r7, .L2236
+	str	r2, [r3, r6]
+	b	.L2223
+.L2227:
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r4, #0]
+	cmp	r3, r0
+	bne	.L2224
+	ldr	r2, [r7, #-2016]
+	mov	r3, r3, asl #1
+	ldrh	r1, [r4, #4]
+	ldrh	r0, [r2, r3]
+	rsb	r1, r1, r0
+	strh	r1, [r2, r3]	@ movhi
+	movw	r3, #3916
+	ldrh	r3, [r5, r3]
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+.L2224:
+	ldrh	r3, [r4, #4]
 	cmp	r3, #0
-	ldr	r3, [r4, #3968]
-	mla	ip, ip, r2, r3
-	beq	.L2178
-	movw	lr, #3918
-	ldr	r0, [sp, #8]
-	ldrh	r3, [r4, lr]
-	mul	r3, r3, r5
-	rsb	r3, r8, r3
-	add	r3, r0, r3, asl #9
-	str	r3, [ip, #8]
-	b	.L2173
-.L2178:
-	movw	r2, #3918
-	ldr	r3, [sp, #8]
-	ldrh	r1, [r4, r2]
-	movw	lr, #3922
-	ldr	r0, [ip, #8]
-	ldrh	r2, [r4, lr]
-	mul	r1, r1, r5
-	rsb	r1, r8, r1
-	add	r1, r3, r1, asl #9
-.L2195:
-	bl	memcpy
-.L2173:
-	ldr	r3, .L2197+32
-	ldr	r1, [sp, #48]
-	ldr	r0, [sp, #44]
-	strh	r3, [r1, r0]	@ movhi
-	ldr	r3, [r7, #-1804]
-	str	r5, [r6, #8]
-	add	r5, r5, #1
-	str	r3, [r6, #4]
+	bne	.L2225
+	mov	r0, r4
+	bl	allocate_new_data_superblock
+.L2225:
+	ldr	r3, [r7, #-1612]
 	add	r3, r3, #1
+	str	r3, [r7, #-1612]
+	ldr	r3, [r5, #3972]
+	add	r3, r3, r6
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlGcMarkBadPhyBlk
+	mov	r0, r4
+	bl	get_new_active_ppa
+	mov	r1, #1
+	mov	r2, r8
+	mov	r3, r0
+	str	r0, [sp, #4]
+	ldr	r0, [r5, #3972]
+	add	r0, r0, r6
+	str	r3, [r0, #4]
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	bl	FlashProgPages
+	ldr	r3, [r5, #3972]
+	ldr	r3, [r3, r6]
 	cmn	r3, #1
-	str	r3, [r7, #-1804]
-	moveq	r3, #0
-	streq	r3, [r7, #-1804]
-	ldr	r3, [sp, #56]
-	str	r3, [r6, #12]
-	ldrh	r3, [r9, #0]
-	strh	r3, [r6, #2]	@ movhi
-	ldr	r3, [r4, #3964]
-	add	r3, r3, #1
-	str	r3, [r4, #3964]
-	ldr	r3, [sp, #24]
-	add	r3, r3, #1
-	str	r3, [sp, #24]
-.L2164:
-	ldr	r3, [sp, #24]
-	ldr	lr, [sp, #52]
-	cmp	r3, lr
-	bne	.L2180
-.L2165:
-	ldr	r3, [sp, #16]
-	mov	r6, r9
-	ldr	lr, [sp, #24]
-	ldr	r2, [r4, #3964]
-	rsb	r3, lr, r3
-	ldr	r0, [sp, #20]
-	str	r3, [sp, #16]
-	ldr	r3, [r7, #-980]
-	cmp	r2, r3
-	orrcs	r0, r0, #1
-	uxtb	r3, r0
+	moveq	r3, #1
+	streq	r3, [r5, #4040]
+	ldr	r3, [r9, #4040]
 	cmp	r3, #0
-	bne	.L2181
-	ldrh	r2, [r9, #4]
+	bne	.L2214
+.L2223:
+	ldr	r2, [r5, #3972]
+	add	r3, r2, r6
+	ldr	r2, [r2, r6]
+	cmn	r2, #1
+	beq	.L2227
+	ldr	r2, [r3, #4]
+	cmp	r8, #0
+	ldr	r0, [r3, #16]
+	add	r1, sp, #4
+	str	r2, [sp, #4]
+	orrne	r2, r2, #-2147483648
+	strne	r2, [sp, #4]
+	mov	r2, #1
+	bl	log2phys
+	ldr	r3, [r5, #3972]
+	add	r3, r3, r6
+	ldr	r3, [r3, #12]
+	ldr	r0, [r3, #12]
+	cmn	r0, #1
+	beq	.L2229
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, .L2236
+	ldr	r2, [r3, #-2016]
+	mov	r3, r0, asl #1
+	mov	r7, r0
+	ldrh	r2, [r2, r3]
 	cmp	r2, #0
-	bne	.L2191
-.L2181:
-	bl	FtlCacheWriteBack
-	ldr	lr, [sp, #16]
-	mov	r3, #0
-	str	r3, [sl, #3964]
-	cmp	lr, #1
-	ldr	r3, [sp, #20]
-	movls	r3, #0
-.L2191:
-	str	r3, [sp, #20]
-.L2194:
-	ldr	r3, [sp, #16]
-	ldr	r9, .L2197
-	cmp	r3, #0
-	bne	.L2183
-	mov	r0, r3
-	ldr	lr, [sp, #12]
-	ldr	r3, [sp, #36]
-	rsb	r1, lr, r3
+	bne	.L2230
+	ldr	r0, .L2236+8
+	mov	r1, r7
+	bl	printk
+.L2230:
+	mov	r0, r7
+	bl	decrement_vpc_count
+.L2229:
+	add	sl, sl, #1
+	add	r6, r6, #36
+	b	.L2217
+.L2235:
+	ldr	r5, .L2236+4
+	mov	r6, #0
+	mov	sl, r6
+	mov	r9, r5
+.L2217:
+	ldr	r3, [r5, #3968]
+	cmp	sl, r3
+	bcc	.L2231
+	movw	r4, #16386
+	ldr	r6, .L2236
+	ldr	r5, .L2236+12
+	b	.L2232
+.L2233:
+	mov	r0, #1
+	mov	r1, r0
 	bl	ftl_do_gc
-	ldr	r3, .L2197+36
-	ldrh	r3, [r9, r3]
-	cmp	r3, #31
-	bhi	.L2156
-	ldr	r2, .L2197+40
-	mov	r3, #128
-	mov	r4, #16
-	strh	r3, [r9, r2]	@ movhi
-	ldr	r2, .L2197+44
-	strh	r3, [r9, r2]	@ movhi
-.L2184:
+	subs	r4, r4, #1
+	beq	.L2222
+.L2232:
+	ldrh	r3, [r6, r5]
+	cmp	r3, #0
+	bne	.L2233
+.L2222:
+	ldr	r3, .L2236+4
+	mov	r2, #0
+	str	r2, [r3, #3968]
+.L2214:
 	mov	r0, #0
-	mov	r1, #1
-	bl	ftl_do_gc
-	ldr	r3, [r9, #-2092]
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
+.L2237:
+	.align	2
+.L2236:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC151
+	.word	-1138
+	.fnend
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	2
+	.global	ftl_cache_flush
+	.type	ftl_cache_flush, %function
+ftl_cache_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	ftl_cache_flush, .-ftl_cache_flush
+	.align	2
+	.global	rk_ftl_cache_write_back
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	2
+	.global	FtlSysFlush
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2242
+	ldr	r3, [r3, #4040]
 	cmp	r3, #0
-	bne	.L2156
-	subs	r4, r4, #1
-	bne	.L2184
-.L2156:
+	bne	.L2241
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	mov	r0, #1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2241:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2243:
+	.align	2
+.L2242:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	FtlDeInit
+	.type	FtlDeInit, %function
+FtlDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2246
+	ldr	r3, [r3, #2996]
+	cmp	r3, #1
+	bne	.L2245
+	bl	FtlSysFlush
+.L2245:
 	mov	r0, #0
-	add	sp, sp, #100
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2198:
+	ldmfd	sp!, {r3, pc}
+.L2247:
 	.align	2
-.L2197:
-	.word	.LANCHOR2
-	.word	.LANCHOR0
-	.word	.LANCHOR2-2000
-	.word	-1948
+.L2246:
 	.word	.LANCHOR1
-	.word	.LANCHOR2-1952
-	.word	-1996
-	.word	.LC139
-	.word	-3947
-	.word	-2004
-	.word	-1198
-	.word	-1200
 	.fnend
-	.size	ftl_write.part.22, .-ftl_write.part.22
+	.size	FtlDeInit, .-FtlDeInit
 	.align	2
-	.global	ftl_write
-	.type	ftl_write, %function
-ftl_write:
+	.global	ftl_deinit
+	.type	ftl_deinit, %function
+ftl_deinit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	mov	ip, r0
-	mov	r0, r1
-	mov	r1, r2
-	mov	r2, r3
-	ldr	r3, .L2204
-	ldr	r3, [r3, #-2092]
-	cmp	r3, #0
-	movne	r0, #0
-	bxne	lr
-	cmp	ip, #16
-	bne	.L2201
-	add	r0, r0, #256
-	b	FtlVendorPartWrite
-.L2201:
-	ldr	r3, .L2204+4
-	add	ip, r1, r0
-	ldr	r3, [r3, #3952]
-	cmp	ip, r3
-	bhi	.L2203
-	b	ftl_write.part.22
-.L2203:
-	mvn	r0, #0
-	bx	lr
-.L2205:
-	.align	2
-.L2204:
-	.word	.LANCHOR2
-	.word	.LANCHOR0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	ftl_flash_de_init
+	bl	FtlDeInit
+	ldmfd	sp!, {r3, lr}
+	b	ftl_flash_de_init
 	.fnend
-	.size	ftl_write, .-ftl_write
+	.size	ftl_deinit, .-ftl_deinit
 	.align	2
-	.global	FtlWrite
-	.type	FtlWrite, %function
-FtlWrite:
+	.global	rk_ftl_de_init
+	.type	rk_ftl_de_init, %function
+rk_ftl_de_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	ftl_write
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	mov	r1, #0
+	ldr	r0, .L2250
+	bl	printk
+	ldmfd	sp!, {r3, lr}
+	b	ftl_deinit
+.L2251:
+	.align	2
+.L2250:
+	.word	.LC152
 	.fnend
-	.size	FtlWrite, .-FtlWrite
+	.size	rk_ftl_de_init, .-rk_ftl_de_init
 	.align	2
-	.global	ftl_sys_write
-	.type	ftl_sys_write, %function
-ftl_sys_write:
+	.global	rk_ftl_garbage_collect
+	.type	rk_ftl_garbage_collect, %function
+rk_ftl_garbage_collect:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	mov	ip, r1
-	mov	r3, r2
-	add	r1, r0, #256
-	mov	r2, ip
-	mov	r0, #16
-	b	ftl_write
+	b	ftl_do_gc
 	.fnend
-	.size	ftl_sys_write, .-ftl_sys_write
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
 	.align	2
-	.global	StorageSysDataStore
-	.type	StorageSysDataStore, %function
-StorageSysDataStore:
+	.global	ftl_fix_nand_power_lost_error
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2262
+	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
+	.save {r4, r5, r6, r7, r8, sl, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2253
+	ldr	r4, .L2262+4
+	movw	r3, #294
+	ldr	r0, .L2262+8
+	movw	r7, #4097
+	ldrh	r6, [r4, r3]
+	ldr	r3, [r4, #-2016]
+	mov	r5, r6, asl #1
+	mov	r1, r6
+	ldrh	r2, [r3, r5]
+	bl	printk
+	ldr	r3, .L2262+12
+	ldrh	r0, [r4, r3]
+	bl	FtlGcRefreshOpenBlock
+	ldr	r3, .L2262+16
+	ldrh	r0, [r4, r3]
+	bl	FtlGcRefreshOpenBlock
+	ldr	r0, .L2262+20
+	bl	allocate_new_data_superblock
+	ldr	r0, .L2262+24
+	bl	allocate_new_data_superblock
+	b	.L2255
+.L2257:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	ldr	r3, [r4, #-2016]
+	ldrh	r3, [r3, r5]
+	cmp	r3, #0
+	beq	.L2256
+.L2255:
+	subs	r7, r7, #1
+	bne	.L2257
+.L2256:
+	ldr	r4, .L2262+4
+	mov	r1, r6
+	ldr	r0, .L2262+8
+	ldr	r3, [r4, #-2016]
+	ldrh	r2, [r3, r5]
+	bl	printk
+	ldr	r3, [r4, #-2016]
+	ldrh	r4, [r3, r5]
+	cmp	r4, #0
+	bne	.L2258
+	add	r7, sp, #48
+	mov	r0, sp
+	strh	r6, [r7, #-48]!	@ movhi
+	add	r7, r7, #14
+	bl	make_superblock
+	ldr	r3, .L2262
+	movw	r2, #3848
+	movw	lr, #65535
+	mov	ip, #36
+	mov	r1, r4
+	ldrh	r8, [r3, r2]
+	ldr	sl, [r3, #4044]
+	mov	r3, r4
+	b	.L2259
+.L2261:
+	ldrh	r0, [r7, #2]!
+	cmp	r0, lr
+	beq	.L2260
+	mla	r2, ip, r4, sl
+	add	r4, r4, #1
+	mov	r0, r0, asl #10
+	uxth	r4, r4
+	stmib	r2, {r0, r1}
+	str	r1, [r2, #12]
+.L2260:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L2259:
+	cmp	r3, r8
+	bne	.L2261
+	ldr	r3, .L2262+4
+	mov	r1, r6
+	ldr	r0, .L2262+28
+	ldr	r3, [r3, #-2016]
+	ldrh	r2, [r3, r5]
+	ldr	r5, .L2262
+	bl	printk
+	mov	r1, #0
+	mov	r2, r4
+	ldr	r0, [r5, #4044]
+	bl	FlashEraseBlocks
+	ldr	r0, [r5, #4044]
+	mov	r1, #1
+	mov	r2, r4
+	bl	FlashEraseBlocks
+.L2258:
+	ldr	r2, .L2262+4
+	movw	r3, #294
+	mvn	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+.L2253:
+	add	sp, sp, #52
+	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
+.L2263:
+	.align	2
+.L2262:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC153
+	.word	-1996
+	.word	-1948
+	.word	.LANCHOR2-1996
+	.word	.LANCHOR2-1948
+	.word	.LC154
+	.fnend
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.align	2
+	.global	FtlInit
+	.type	FtlInit, %function
+FtlInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
+.L2265:
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mvn	r3, #0
+	ldr	r4, .L2275
+	ldr	r6, .L2275+4
+	ldr	r5, .L2275+8
+	ldr	r1, .L2275+12
+	str	r3, [r6, #2996]
+	mov	r3, #0
+	ldr	r0, .L2275+16
+	str	r3, [r4, #4040]
+	str	r3, [r5, #444]
+	bl	printk
+	ldr	r0, .L2275+20
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldr	r0, [r4, #3852]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	ldrne	r0, .L2275+24
+	bne	.L2274
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	beq	.L2268
+	ldr	r0, .L2275+28
+.L2274:
+	ldr	r1, .L2275+32
+	bl	printk
+	b	.L2267
+.L2268:
+	mov	r1, #1
+	str	r1, [r6, #2996]
+	bl	ftl_do_gc
+	ldr	r3, .L2275+36
+	ldrh	r3, [r5, r3]
+	cmp	r3, #15
+	bhi	.L2269
+	mov	r4, #1024
+.L2270:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	subs	r4, r4, #1
+	bne	.L2270
+	b	.L2267
+.L2269:
+	ldrb	r3, [r4, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2267
+	mov	r4, #128
+.L2271:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	subs	r4, r4, #1
+	bne	.L2271
+.L2267:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2276:
+	.align	2
+.L2275:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LC79
+	.word	.LC78
+	.word	.LANCHOR0+3048
+	.word	.LC155
+	.word	.LC156
+	.word	.LANCHOR3+69
+	.word	-2000
+	.fnend
+	.size	FtlInit, .-FtlInit
+	.align	2
+	.global	ftl_discard
+	.type	ftl_discard, %function
+ftl_discard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, lr}
+	add	r2, r1, r0
+	ldr	r5, .L2287
+	mov	r7, r0
 	mov	r4, r1
+	ldr	r3, [r5, #3956]
+	cmp	r2, r3
+	mvnhi	r0, #0
+	bhi	.L2278
+	cmp	r1, #31
+	bls	.L2285
+	ldr	r3, [r5, #4040]
+	cmp	r3, #0
+	bne	.L2285
+	bl	FtlCacheWriteBack
+	movw	r3, #3922
+	ldrh	r6, [r5, r3]
+	mov	r0, r7
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	mls	r7, r0, r6, r7
 	mov	r5, r0
-	bl	rknand_device_lock
-	mov	r2, r4
-	mov	r1, #1
+	uxth	r7, r7
+	cmp	r7, #0
+	beq	.L2279
+	rsb	r6, r7, r6
+	add	r5, r0, #1
+	cmp	r6, r4
+	movcs	r6, r4
+	uxth	r6, r6
+	rsb	r4, r6, r4
+.L2279:
+	mvn	r3, #0
+	ldr	r7, .L2287
+	str	r3, [sp, #4]
+	movw	r6, #3922
+	b	.L2280
+.L2282:
 	mov	r0, r5
-	bl	ftl_sys_write
-	mov	r4, r0
-	bl	rknand_device_unlock
+	mov	r1, sp
+	mov	r2, #0
+	bl	log2phys
+	ldr	r3, [sp, #0]
+	cmn	r3, #1
+	beq	.L2281
+	ldr	r3, .L2287+4
+	add	r1, sp, #4
+	mov	r0, r5
+	ldr	r2, [r3, #448]
+	add	r2, r2, #1
+	str	r2, [r3, #448]
+	ldr	r2, [r3, #-1832]
+	add	r2, r2, #1
+	str	r2, [r3, #-1832]
+	mov	r2, #1
+	bl	log2phys
+	ldr	r0, [sp, #0]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L2281:
+	ldrh	r3, [r7, r6]
+	add	r5, r5, #1
+	rsb	r4, r3, r4
+.L2280:
+	ldrh	r3, [r7, r6]
+	cmp	r4, r3
+	bcs	.L2282
+	ldr	r3, .L2287+4
+	mov	r4, #0
+	ldr	r2, [r3, #448]
+	cmp	r2, #32
+	bls	.L2286
+	str	r4, [r3, #448]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L2286
+.L2285:
+	mov	r0, #0
+	b	.L2278
+.L2286:
 	mov	r0, r4
-	ldmfd	sp!, {r3, r4, r5, pc}
-	.fnend
-	.size	StorageSysDataStore, .-StorageSysDataStore
+.L2278:
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
+.L2288:
 	.align	2
-	.global	ftl_vendor_write
-	.type	ftl_vendor_write, %function
-ftl_vendor_write:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	mov	ip, r1
-	mov	r3, r2
-	stmfd	sp!, {r4, lr}
-	.save {r4, lr}
-	mov	r4, r0
-	mov	r1, r4
-	mov	r0, #16
-	mov	r2, ip
-	ldmfd	sp!, {r4, lr}
-	b	ftl_write
+.L2287:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
 	.fnend
-	.size	ftl_vendor_write, .-ftl_vendor_write
+	.size	ftl_discard, .-ftl_discard
 	.align	2
-	.global	FlashBootVendorWrite
-	.type	FlashBootVendorWrite, %function
-FlashBootVendorWrite:
+	.global	FtlDiscard
+	.type	FtlDiscard, %function
+FtlDiscard:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r6, r0
-	mov	r5, r1
-	mov	r4, r2
-	bl	rknand_device_lock
-	mov	r2, r4
-	mov	r1, r5
-	mov	r0, r6
-	bl	ftl_vendor_write
-	mov	r4, r0
-	bl	rknand_device_unlock
-	mov	r0, r4
-	ldmfd	sp!, {r4, r5, r6, pc}
+	@ link register save eliminated.
+	b	ftl_discard
 	.fnend
-	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
+	.size	FtlDiscard, .-FtlDiscard
 	.align	2
-	.global	ftl_read
-	.type	ftl_read, %function
-ftl_read:
+	.type	ftl_write.part.24, %function
+ftl_write.part.24:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 64
+	@ args = 0, pretend = 0, frame = 96
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	cmp	r0, #16
-	.pad #68
-	sub	sp, sp, #68
-	mov	r4, r1
-	mov	r8, r3
-	str	r2, [sp, #28]
-	bne	.L2212
-	add	r0, r1, #256
-	mov	r1, r2
-	mov	r2, r3
-	bl	FtlVendorPartRead
-	str	r0, [sp, #16]
-	b	.L2213
-.L2212:
-	ldr	r3, [sp, #28]
-	add	r3, r3, r1
-	str	r3, [sp, #20]
-	ldr	r3, .L2242
-	ldr	r1, [sp, #20]
-	ldr	r2, [r3, #3952]
-	cmp	r1, r2
-	mvnhi	r3, #0
-	strhi	r3, [sp, #16]
-	bhi	.L2213
-	movw	r2, #3918
-	mov	r0, r4
-	ldrh	r5, [r3, r2]
-	mov	r1, r5
+	mov	r3, #2048
+	ldr	r4, .L2335
+	.pad #100
+	sub	sp, sp, #100
+	ldr	r8, .L2335+4
+	mov	r5, r1
+	mov	r7, r0
+	mov	r9, r2
+	str	r3, [r4, #452]
+	movw	r3, #3922
+	ldrh	r6, [r8, r3]
+	mov	r1, r6
 	bl	__aeabi_uidiv
-	ldr	r3, [sp, #20]
-	mov	r1, r5
-	str	r0, [sp, #12]
-	sub	r0, r3, #1
+	mov	r1, r6
+	str	r0, [sp, #16]
+	sub	r0, r7, #1
+	add	r0, r0, r5
 	bl	__aeabi_uidiv
-	ldr	r1, [sp, #12]
-	rsb	r3, r1, #1
-	ldr	r1, [sp, #28]
-	add	r3, r3, r0
-	str	r3, [sp, #8]
-	ldr	r3, .L2242+4
-	mov	fp, r0
-	ldr	r0, [sp, #12]
-	ldr	r2, [r3, #-1812]
-	add	r2, r1, r2
-	ldr	r1, [sp, #8]
-	str	r2, [r3, #-1812]
-	ldr	r2, [r3, #-1840]
-	add	r2, r1, r2
-	mov	r1, fp
-	str	r2, [r3, #-1840]
+	ldr	r3, [sp, #16]
+	ldr	sl, [r8, #3968]
+	cmp	sl, #0
+	rsb	fp, r3, r0
+	str	r0, [sp, #36]
+	add	r3, fp, #1
+	str	r3, [sp, #20]
+	ldr	lr, [sp, #20]
+	ldr	r3, [r4, #-1828]
+	add	r3, lr, r3
+	str	r3, [r4, #-1828]
+	ldr	r3, [r4, #-1812]
+	add	r3, r5, r3
+	str	r3, [r4, #-1812]
+	beq	.L2323
+	ldr	r3, [r8, #3972]
+	sub	sl, sl, #1
+	mov	r2, #36
+	ldr	r0, [sp, #16]
+	mla	sl, r2, sl, r3
+	ldr	r3, [sl, #16]
+	cmp	r0, r3
+	strne	r5, [sp, #32]
+	bne	.L2292
+	ldr	r3, [r4, #-1824]
+	mov	r0, r7
+	mov	r1, r6
+	add	r3, r3, #1
+	str	r3, [r4, #-1824]
+	ldr	r3, [r4, #456]
+	add	r3, r3, #1
+	str	r3, [r4, #456]
+	bl	__aeabi_uidivmod
+	ldr	r0, [sl, #8]
+	rsb	r8, r1, r6
+	add	r0, r0, r1, asl #9
+	cmp	r8, r5
+	movcs	r8, r5
+	mov	r1, r9
+	mov	r3, r8, asl #9
+	str	r3, [sp, #4]
+	mov	r2, r3
+	bl	memcpy
+	cmp	fp, #0
+	ldr	r3, [sp, #4]
+	bne	.L2293
+	ldr	r2, [r4, #456]
+	cmp	r2, #2
+	ble	.L2294
+.L2293:
+	add	r9, r9, r3
+	add	r7, r7, r8
+	ldr	r3, [sp, #16]
+	rsb	r1, r8, r5
+	str	fp, [sp, #20]
+	add	r3, r3, #1
+	str	r1, [sp, #32]
+	str	r3, [sp, #16]
+.L2292:
+	ldr	r3, .L2335
+	mov	r2, #0
+	str	r2, [r3, #456]
+	b	.L2291
+.L2323:
+	str	r5, [sp, #32]
+.L2291:
+	ldr	r0, [sp, #16]
+	ldr	r1, [sp, #36]
 	bl	FtlCacheMetchLpa
 	cmp	r0, #0
-	beq	.L2214
+	beq	.L2295
 	bl	FtlCacheWriteBack
-.L2214:
-	mov	r9, #0
-	ldr	r6, [sp, #12]
-	str	r9, [sp, #32]
-	mov	r5, r9
-	str	r9, [sp, #16]
-	ldr	r7, .L2242
-	b	.L2237
-.L2231:
+.L2295:
+	cmp	r5, r6, asl #1
+	ldr	r3, .L2335
+	ldr	r4, .L2335+4
+	mov	fp, #0
+	movcc	r6, #0
+	movcs	r6, #1
+	str	r6, [sp, #24]
+	ldr	r6, .L2335+8
+	ldr	r5, [sp, #16]
+	mov	sl, r4
+	str	fp, [sp, #40]
+	str	r6, [r3, #440]
+	b	.L2332
+.L2321:
+	ldrh	r1, [r6, #4]
+	cmp	r1, #0
+	bne	.L2297
+	ldr	r2, .L2335+8
+	ldr	r3, .L2335+12
+	cmp	r6, r2
+	bne	.L2298
+	ldr	r2, .L2335+16
+	ldrh	r8, [r8, r2]
+	cmp	r8, #0
+	bne	.L2299
+	ldr	r0, .L2335+20
+	str	r3, [sp, #4]
+	bl	allocate_new_data_superblock
+	ldr	r3, [sp, #4]
+	str	r8, [r3, #3004]
+.L2299:
+	ldr	r0, .L2335+8
+	str	r3, [sp, #4]
+	bl	allocate_new_data_superblock
+	ldr	r3, [sp, #4]
+	ldr	r2, [r3, #3004]
+	ldr	r3, .L2335+20
+	cmp	r2, #0
+	movne	r6, r3
+	b	.L2300
+.L2298:
+	str	r1, [r3, #3004]
+	ldr	r3, .L2335+24
+	ldrh	r3, [r8, r3]
+	cmp	r3, #0
+	movne	r6, r2
+	bne	.L2300
+	mov	r0, r6
+	bl	allocate_new_data_superblock
+.L2300:
+	ldrh	r3, [r6, #4]
+	cmp	r3, #0
+	bne	.L2301
+	mov	r0, r6
+	bl	allocate_new_data_superblock
+.L2301:
+	ldr	r3, .L2335
+	str	r6, [r3, #440]
+.L2297:
+	ldr	r2, .L2335
+	mov	r8, r6
+	ldrh	r3, [r6, #4]
+	ldr	r1, [r2, #-976]
+	ldr	r2, [r4, #3968]
+	rsb	r2, r2, r1
+	cmp	r3, r2
+	movcc	r2, r3
+	ldr	r3, [sp, #20]
+	cmp	r2, r3
+	movcc	r3, r2
+	str	r3, [sp, #52]
+	mov	r3, #0
+	str	r3, [sp, #28]
+	b	.L2302
+.L2318:
+	ldrh	r3, [r8, #4]
+	cmp	r3, #0
+	beq	.L2303
+	ldr	r6, [sp, #36]
+	rsb	r2, r6, r5
+	ldr	r6, [sp, #24]
+	rsbs	r3, r2, #0
+	adc	r3, r3, r2
+	tst	r3, r6
+	beq	.L2304
+	ldr	r6, [sp, #28]
+	cmp	r6, #0
+	beq	.L2304
+	movw	lr, #3922
+	ldr	r6, [sp, #32]
+	ldrh	r2, [r4, lr]
+	add	r1, r6, r7
+	mls	r1, r2, r5, r1
+	cmp	r1, r2
+	bne	.L2303
+.L2304:
+	add	r1, sp, #56
 	mov	r2, #0
-	mov	r0, r6
-	add	r1, sp, #60
+	mov	r0, r5
+	str	r3, [sp, #4]
 	bl	log2phys
-	ldr	r2, [sp, #60]
-	cmn	r2, #1
-	bne	.L2238
-	b	.L2241
-.L2219:
-	mla	r0, r0, r6, sl
-	cmp	r0, r4
-	bcc	.L2218
-	ldr	r2, [sp, #20]
-	cmp	r0, r2
-	bcs	.L2218
-	rsb	r0, r4, r0
+	mov	r0, r8
+	bl	get_new_active_ppa
+	ldr	lr, [r4, #3968]
+	ldr	r1, [r4, #3972]
+	movw	r2, #3928
+	mov	ip, #36
+	ldrh	r2, [r4, r2]
+	ldr	r6, .L2335
+	mla	r1, ip, lr, r1
+	mul	lr, lr, r2
+	ldr	r6, [r6, #-928]
+	bic	lr, lr, #3
+	str	r6, [sp, #48]
+	str	lr, [sp, #44]
+	add	r6, r6, lr
+	str	r5, [r1, #16]
+	str	r6, [r1, #12]
+	str	r0, [r1, #4]
+	movw	r0, #3926
+	ldrh	lr, [r4, r0]
+	ldr	r0, [r4, #3968]
+	mul	lr, r0, lr
+	ldr	r0, .L2335
+	bic	lr, lr, #3
+	str	lr, [sp, #12]
+	ldr	lr, [r0, #-948]
+	ldr	r0, [sp, #12]
+	add	lr, lr, r0
+	mov	r0, r6
+	str	lr, [r1, #8]
 	mov	r1, #0
-	mov	r2, #512
-	str	r3, [sp, #4]
-	add	r0, r8, r0, asl #9
+	str	ip, [sp, #8]
 	bl	ftl_memset
+	ldr	r1, [sp, #16]
+	ldr	ip, [sp, #8]
+	rsb	r3, r1, r5
+	rsbs	r1, r3, #0
+	adc	r1, r1, r3
 	ldr	r3, [sp, #4]
-.L2218:
-	add	sl, sl, #1
-	b	.L2216
-.L2241:
-	mov	sl, #0
-	movw	r3, #3918
-.L2216:
-	ldrh	r0, [r7, r3]
-	cmp	sl, r0
-	bcc	.L2219
-	b	.L2220
-.L2238:
-	ldr	r3, .L2242+4
-	mov	sl, #36
-	ldr	r1, [r3, #-976]
-	mla	sl, sl, r5, r1
-	ldr	r1, [sp, #12]
-	cmp	r6, r1
-	str	r2, [sl, #4]
-	movw	r2, #3918
-	bne	.L2221
-	ldr	r3, [r3, #-948]
-	mov	r0, r4
-	str	r3, [sl, #8]
-	ldrh	r3, [r7, r2]
-	mov	r1, r3
-	str	r3, [sp, #4]
+	str	r1, [sp, #12]
+	orrs	r1, r1, r3
+	beq	.L2305
+	ldr	r2, [sp, #12]
+	cmp	r2, #0
+	beq	.L2306
+	movw	r3, #3922
+	mov	r0, r7
+	ldrh	fp, [r4, r3]
+	mov	r1, fp
 	bl	__aeabi_uidivmod
-	ldr	r3, [sp, #4]
-	str	r1, [sp, #36]
-	rsb	r2, r1, r3
-	ldr	r1, [sp, #28]
-	cmp	r2, r1
-	movcc	r1, r2
-	str	r1, [sp, #32]
-	cmp	r1, r3
-	streq	r8, [sl, #8]
-	b	.L2222
-.L2221:
-	cmp	r6, fp
-	ldrneh	r3, [r7, r2]
-	mulne	r3, r3, r6
-	bne	.L2239
-	ldr	r3, [r3, #-944]
-	ldrh	r2, [r7, r2]
-	ldr	r1, [sp, #20]
-	str	r3, [sl, #8]
-	mul	r3, r2, r6
-	rsb	r9, r3, r1
-	cmp	r9, r2
-	bne	.L2222
-.L2239:
-	rsb	r3, r4, r3
-	add	r3, r8, r3, asl #9
-	str	r3, [sl, #8]
-.L2222:
-	movw	r3, #3924
-	ldr	r2, .L2242+4
-	ldrh	r3, [r7, r3]
-	str	r6, [sl, #16]
-	ldr	r2, [r2, #-936]
-	mul	r3, r3, r5
-	add	r5, r5, #1
-	bic	r3, r3, #3
-	add	r3, r2, r3
-	str	r3, [sl, #12]
-.L2220:
-	ldr	r3, [sp, #8]
-	add	r6, r6, #1
-	subs	r3, r3, #1
-	str	r3, [sp, #8]
-	beq	.L2224
-	movw	r3, #3844
-	ldrh	r3, [r7, r3]
-	cmp	r5, r3, asl #3
-	bne	.L2237
-.L2224:
-	cmp	r5, #0
-	beq	.L2237
-	ldr	sl, .L2242+4
-	mov	r1, r5
+	ldr	r3, [sp, #32]
+	rsb	fp, r1, fp
+	str	r1, [sp, #40]
+	cmp	fp, r3
+	movcs	fp, r3
+	b	.L2307
+.L2306:
+	cmp	r3, #0
+	beq	.L2307
+	ldr	r3, [sp, #32]
+	movw	lr, #3922
+	add	fp, r3, r7
+	ldrh	r3, [r4, lr]
+	mls	fp, r3, r5, fp
+	ldr	r3, [sp, #12]
+	str	r3, [sp, #40]
+	uxth	fp, fp
+.L2307:
+	movw	lr, #3922
+	ldrh	r3, [r4, lr]
+	cmp	fp, r3
+	bne	.L2308
+	ldr	r3, [sp, #12]
+	ldr	r0, [sl, #3968]
+	cmp	r3, #0
+	ldr	r2, [sl, #3972]
+	ldr	r3, [sp, #24]
+	muleq	r1, r5, fp
+	movne	r1, r9
+	rsbeq	r1, r7, r1
+	addeq	r1, r9, r1, asl #9
+	cmp	r3, #0
+	mov	r3, #36
+	mla	r3, r3, r0, r2
+	strne	r1, [r3, #8]
+	bne	.L2311
+	ldr	r0, [r3, #8]
+	movw	r3, #3926
+	ldrh	r2, [sl, r3]
+	b	.L2333
+.L2308:
+	ldr	r2, [sp, #56]
+	mov	r3, #36
+	cmn	r2, #1
+	beq	.L2312
+	ldr	r1, [r4, #3968]
+	add	r0, sp, #60
+	str	r2, [sp, #64]
+	ldr	r2, [r4, #3972]
+	str	r5, [sp, #76]
+	mla	r3, r3, r1, r2
+	mov	r1, #1
+	ldr	r2, [r3, #8]
+	ldr	r3, [r3, #12]
+	str	r2, [sp, #68]
 	mov	r2, #0
-	ldr	r0, [sl, #-976]
+	str	r3, [sp, #72]
 	bl	FlashReadPages
-	ldr	r3, [sp, #36]
-	str	r6, [sp, #52]
-	mov	r6, r5
-	mov	r3, r3, asl #9
-	str	r3, [sp, #40]
-	ldr	r3, [sp, #32]
-	mov	r3, r3, asl #9
-	str	r3, [sp, #44]
-	mov	r3, r9, asl #9
-	str	r3, [sp, #48]
-	mov	r3, #0
-	str	r3, [sp, #24]
-.L2230:
+	ldr	r3, [sp, #60]
+	cmn	r3, #1
+	ldr	r3, .L2335
+	ldreq	r2, [r3, #-1636]
+	addeq	r2, r2, #1
+	streq	r2, [r3, #-1636]
+	beq	.L2314
+	ldr	r2, [r6, #8]
+	cmp	r2, r5
+	beq	.L2314
+	ldr	r2, [r3, #-1636]
+	ldr	r0, .L2335+28
+	add	r2, r2, #1
+	str	r2, [r3, #-1636]
+	mov	r2, r5
+	ldr	r1, [r6, #8]
+	bl	printk
+	b	.L2314
+.L2312:
+	ldr	r1, [r4, #3968]
+	ldr	r2, [r4, #3972]
+	mla	r3, r3, r1, r2
+	mov	r1, #0
+	ldr	r0, [r3, #8]
+	movw	r3, #3926
+	ldrh	r2, [r4, r3]
+	bl	ftl_memset
+.L2314:
+	ldr	r3, [sp, #12]
+	ldr	r1, [r4, #3968]
+	cmp	r3, #0
+	ldr	r2, [r4, #3972]
+	mov	r3, #36
+	movweq	lr, #3922
+	mla	r3, r3, r1, r2
+	ldreqh	r1, [r4, lr]
+	movne	r1, r9
+	mov	r2, fp, asl #9
+	muleq	r1, r1, r5
+	ldrne	r0, [r3, #8]
+	ldrne	r3, [sp, #40]
+	rsbeq	r1, r7, r1
+	ldreq	r0, [r3, #8]
+	addne	r0, r0, r3, asl #9
+	addeq	r1, r9, r1, asl #9
+	b	.L2333
+.L2305:
 	ldr	r3, [sp, #24]
-	mov	r5, #36
-	ldr	r1, [sp, #12]
-	mul	r5, r5, r3
-	ldr	r3, [sl, #-976]
-	add	r3, r3, r5
-	ldr	r2, [r3, #16]
-	cmp	r2, r1
-	bne	.L2226
-	ldr	r1, [r3, #8]
-	ldr	r3, [sl, #-948]
-	cmp	r1, r3
-	bne	.L2227
-	ldr	r3, [sp, #40]
-	mov	r0, r8
-	ldr	r2, [sp, #44]
-	add	r1, r1, r3
-	b	.L2240
-.L2226:
-	cmp	r2, fp
-	bne	.L2227
-	ldr	r1, [r3, #8]
-	ldr	r3, [sl, #-944]
-	cmp	r1, r3
-	bne	.L2227
-	movw	r2, #3918
-	ldrh	r0, [r7, r2]
-	ldr	r2, [sp, #48]
-	mul	r0, r0, fp
-	rsb	r0, r4, r0
-	add	r0, r8, r0, asl #9
-.L2240:
+	ldr	r2, [r4, #3968]
+	cmp	r3, #0
+	ldr	r3, [r4, #3972]
+	mla	ip, ip, r2, r3
+	beq	.L2316
+	movw	lr, #3922
+	ldrh	r3, [r4, lr]
+	mul	r3, r3, r5
+	rsb	r3, r7, r3
+	add	r3, r9, r3, asl #9
+	str	r3, [ip, #8]
+	b	.L2311
+.L2316:
+	movw	r0, #3922
+	movw	r3, #3926
+	ldrh	r1, [r4, r0]
+	ldrh	r2, [r4, r3]
+	ldr	r0, [ip, #8]
+	mul	r1, r1, r5
+	rsb	r1, r7, r1
+	add	r1, r9, r1, asl #9
+.L2333:
 	bl	memcpy
-.L2227:
-	ldr	r3, [sl, #-976]
-	add	r0, r3, r5
-	ldr	r2, [r3, r5]
+.L2311:
+	ldr	r3, .L2335+32
+	ldr	r0, [sp, #48]
+	ldr	lr, [sp, #44]
+	strh	r3, [r0, lr]	@ movhi
+	ldr	r3, .L2335
+	str	r5, [r6, #8]
+	add	r5, r5, #1
+	ldr	r2, [r3, #-1800]
+	str	r2, [r6, #4]
+	add	r2, r2, #1
 	cmn	r2, #1
-	streq	r2, [sp, #16]
-	ldreq	r1, [sl, #-1640]
-	addeq	r1, r1, #1
-	streq	r1, [sl, #-1640]
-	ldr	r3, [r3, r5]
-	cmp	r3, #256
-	bne	.L2229
-	ldr	r0, [r0, #4]
-	ubfx	r0, r0, #10, #16
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L2229:
-	ldr	r3, [sp, #24]
+	str	r2, [r3, #-1800]
+	moveq	r2, #0
+	streq	r2, [r3, #-1800]
+	ldr	r3, [sp, #56]
+	str	r3, [r6, #12]
+	ldrh	r3, [r8, #0]
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, [r4, #3968]
 	add	r3, r3, #1
-	str	r3, [sp, #24]
-	cmp	r3, r6
-	bne	.L2230
-	ldr	r6, [sp, #52]
-	mov	r5, #0
-.L2237:
-	ldr	r3, [sp, #8]
+	str	r3, [r4, #3968]
+	ldr	r3, [sp, #28]
+	add	r3, r3, #1
+	str	r3, [sp, #28]
+.L2302:
+	ldr	r6, [sp, #28]
+	ldr	r3, [sp, #52]
+	cmp	r6, r3
+	bne	.L2318
+.L2303:
+	ldr	r3, [sp, #20]
+	mov	r6, r8
+	ldr	lr, [sp, #28]
+	ldr	r2, [r4, #3968]
+	rsb	r3, lr, r3
+	str	r3, [sp, #20]
+	ldr	r3, .L2335
+	ldr	r0, [sp, #24]
+	ldr	r3, [r3, #-976]
+	cmp	r2, r3
+	orrcs	r0, r0, #1
+	uxtb	r3, r0
 	cmp	r3, #0
-	bne	.L2231
-	ldr	r3, .L2242+8
-	ldr	r2, .L2242+4
-	ldrh	r3, [r2, r3]
+	bne	.L2319
+	ldrh	r2, [r8, #4]
+	cmp	r2, #0
+	bne	.L2329
+.L2319:
+	bl	FtlCacheWriteBack
+	ldr	lr, [sp, #20]
+	mov	r3, #0
+	str	r3, [sl, #3968]
+	cmp	lr, #1
+	ldr	r3, [sp, #24]
+	movls	r3, #0
+.L2329:
+	str	r3, [sp, #24]
+.L2332:
+	ldr	r3, [sp, #20]
+	ldr	r8, .L2335
 	cmp	r3, #0
-	beq	.L2213
-	ldr	r0, [sp, #8]
+	bne	.L2321
+	mov	r0, r3
+	ldr	r6, [sp, #36]
+	ldr	r3, [sp, #16]
+	rsb	r1, r3, r6
+	bl	ftl_do_gc
+	ldr	r3, .L2335+36
+	ldrh	r3, [r8, r3]
+	cmp	r3, #31
+	bhi	.L2294
+	ldr	r2, .L2335+40
+	mov	r3, #128
+	ldr	r5, .L2335+4
+	mov	r4, #16
+	strh	r3, [r8, r2]	@ movhi
+	sub	r2, r2, #2
+	strh	r3, [r8, r2]	@ movhi
+.L2322:
+	mov	r0, #0
 	mov	r1, #1
 	bl	ftl_do_gc
-.L2213:
-	ldr	r0, [sp, #16]
-	add	sp, sp, #68
+	ldr	r3, [r5, #4040]
+	cmp	r3, #0
+	bne	.L2294
+	subs	r4, r4, #1
+	bne	.L2322
+.L2294:
+	mov	r0, #0
+	add	sp, sp, #100
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2243:
+.L2336:
 	.align	2
-.L2242:
-	.word	.LANCHOR0
+.L2335:
 	.word	.LANCHOR2
-	.word	-1142
+	.word	.LANCHOR0
+	.word	.LANCHOR2-1996
+	.word	.LANCHOR1
+	.word	-1944
+	.word	.LANCHOR2-1948
+	.word	-1992
+	.word	.LC157
+	.word	-3947
+	.word	-2000
+	.word	-1194
 	.fnend
-	.size	ftl_read, .-ftl_read
+	.size	ftl_write.part.24, .-ftl_write.part.24
 	.align	2
-	.global	FtlRead
-	.type	FtlRead, %function
-FtlRead:
+	.global	ftl_write
+	.type	ftl_write, %function
+ftl_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	ip, r0
+	mov	r0, r1
+	mov	r1, r2
+	mov	r2, r3
+	ldr	r3, .L2342
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r4, [r3, #4040]
+	cmp	r4, #0
+	movne	r0, #0
+	ldmnefd	sp!, {r4, pc}
+	cmp	ip, #16
+	bne	.L2339
+	add	r0, r0, #256
+	ldmfd	sp!, {r4, lr}
+	b	FtlVendorPartWrite
+.L2339:
+	ldr	r3, [r3, #3956]
+	add	ip, r1, r0
+	cmp	ip, r3
+	bhi	.L2341
+	ldmfd	sp!, {r4, lr}
+	b	ftl_write.part.24
+.L2341:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L2343:
+	.align	2
+.L2342:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_write, .-ftl_write
+	.align	2
+	.global	FtlWrite
+	.type	FtlWrite, %function
+FtlWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	b	ftl_read
+	b	ftl_write
 	.fnend
-	.size	FtlRead, .-FtlRead
+	.size	FtlWrite, .-FtlWrite
 	.align	2
-	.global	ftl_sys_read
-	.type	ftl_sys_read, %function
-ftl_sys_read:
+	.global	ftl_sys_write
+	.type	ftl_sys_write, %function
+ftl_sys_write:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -19718,39 +20928,35 @@ ftl_sys_read:
 	add	r1, r0, #256
 	mov	r2, ip
 	mov	r0, #16
-	b	ftl_read
+	b	ftl_write
 	.fnend
-	.size	ftl_sys_read, .-ftl_sys_read
+	.size	ftl_sys_write, .-ftl_sys_write
 	.align	2
-	.global	StorageSysDataLoad
-	.type	StorageSysDataLoad, %function
-StorageSysDataLoad:
+	.global	StorageSysDataStore
+	.type	StorageSysDataStore, %function
+StorageSysDataStore:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	mov	r2, #512
-	mov	r5, r0
 	mov	r4, r1
-	mov	r0, r1
-	mov	r1, #0
-	bl	ftl_memset
+	mov	r5, r0
 	bl	rknand_device_lock
 	mov	r2, r4
 	mov	r1, #1
 	mov	r0, r5
-	bl	ftl_sys_read
+	bl	ftl_sys_write
 	mov	r4, r0
 	bl	rknand_device_unlock
 	mov	r0, r4
 	ldmfd	sp!, {r3, r4, r5, pc}
 	.fnend
-	.size	StorageSysDataLoad, .-StorageSysDataLoad
+	.size	StorageSysDataStore, .-StorageSysDataStore
 	.align	2
-	.global	ftl_vendor_read
-	.type	ftl_vendor_read, %function
-ftl_vendor_read:
+	.global	ftl_vendor_write
+	.type	ftl_vendor_write, %function
+ftl_vendor_write:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -19763,880 +20969,549 @@ ftl_vendor_read:
 	mov	r0, #16
 	mov	r2, ip
 	ldmfd	sp!, {r4, lr}
-	b	ftl_read
-	.fnend
-	.size	ftl_vendor_read, .-ftl_vendor_read
-	.align	2
-	.global	FlashBootVendorRead
-	.type	FlashBootVendorRead, %function
-FlashBootVendorRead:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
-	mov	r6, r0
-	mov	r5, r1
-	mov	r4, r2
-	bl	rknand_device_lock
-	mov	r2, r4
-	mov	r1, r5
-	mov	r0, r6
-	bl	ftl_vendor_read
-	mov	r4, r0
-	bl	rknand_device_unlock
-	mov	r0, r4
-	ldmfd	sp!, {r4, r5, r6, pc}
+	b	ftl_write
 	.fnend
-	.size	FlashBootVendorRead, .-FlashBootVendorRead
+	.size	ftl_vendor_write, .-ftl_vendor_write
 	.align	2
-	.type	rk_ftl_vendor_ops.constprop.26, %function
-rk_ftl_vendor_ops.constprop.26:
+	.global	FlashBootVendorWrite
+	.type	FlashBootVendorWrite, %function
+FlashBootVendorWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	cmp	r2, #0
-	mov	r3, r0
-	mov	r2, r3
-	mov	r0, r1
-	mov	r1, #128
-	beq	.L2250
-	b	FlashBootVendorWrite
-.L2250:
-	b	FlashBootVendorRead
-	.fnend
-	.size	rk_ftl_vendor_ops.constprop.26, .-rk_ftl_vendor_ops.constprop.26
-	.align	2
-	.global	FlashLoadFactorBbt
-	.type	FlashLoadFactorBbt, %function
-FlashLoadFactorBbt:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 48
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r2, #3062
-	ldr	r9, .L2260
-	movw	r3, #3060
-	ldr	r4, .L2260+4
-	.pad #52
-	sub	sp, sp, #52
-	mov	r1, #0
-	mvn	r7, #0
-	ldrh	r3, [r9, r3]
-	add	r0, r4, #228
-	ldrh	r8, [r9, r2]
-	mov	r2, #16
-	mov	r6, #0
-	mul	r8, r8, r3
-	bl	ftl_memset
-	ldr	r3, [r4, #224]
-	str	r6, [sp, #20]
-	mov	r4, r6
-	str	r3, [sp, #24]
-	uxth	r8, r8
-	add	r3, r8, r7
-	uxth	r3, r3
-	str	r3, [sp, #4]
-	b	.L2252
-.L2258:
-	ldr	r5, [sp, #4]
-	sub	r3, r8, #12
-	mul	fp, r8, r4
-	ldr	sl, .L2260+4
-	b	.L2253
-.L2256:
-	add	r2, fp, r5
-	mov	r1, #1
-	add	r0, sp, #12
-	str	r3, [sp, #0]
-	mov	r2, r2, asl #10
-	str	r2, [sp, #16]
-	mov	r2, r1
-	bl	FlashReadPages
-	ldr	r2, [sp, #12]
-	ldr	r3, [sp, #0]
-	cmn	r2, #1
-	beq	.L2254
-	ldr	r2, [sl, #224]
-	ldrh	r1, [r2, #0]
-	movw	r2, #61664
-	cmp	r1, r2
-	bne	.L2254
-	ldr	r0, .L2260+8
-	mov	r1, r4
-	mov	r2, r5
-	add	r6, r6, #1
-	bl	printk
-	ldr	r3, .L2260+4
-	uxth	r6, r6
-	add	r3, r3, r4, asl #1
-	strh	r5, [r3, #228]	@ movhi
-	b	.L2255
-.L2254:
-	sub	r5, r5, #1
-	uxth	r5, r5
-.L2253:
-	cmp	r5, r3
-	bgt	.L2256
-.L2255:
-	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
-	add	r4, r4, #1
-	cmp	r3, r6
-	uxtb	r4, r4
-	moveq	r7, #0
-.L2252:
-	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
-	cmp	r3, r4
-	bhi	.L2258
-	mov	r0, r7
-	add	sp, sp, #52
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2261:
-	.align	2
-.L2260:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LC140
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, r5
+	mov	r0, r6
+	bl	ftl_vendor_write
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
 	.fnend
-	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
+	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
 	.align	2
-	.global	FlashReadFacBbtData
-	.type	FlashReadFacBbtData, %function
-FlashReadFacBbtData:
+	.global	ftl_read
+	.type	ftl_read, %function
+ftl_read:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 40
+	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2272
-	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
-	.save {r4, r5, r6, r7, r8, r9, sl, lr}
-	mov	r6, r1
-	mov	r9, r2
-	movw	r1, #3062
-	movw	r2, #3060
-	ldrh	r8, [r3, r1]
-	ldrh	r2, [r3, r2]
-	.pad #40
-	sub	sp, sp, #40
-	ldr	r7, .L2272+4
-	mov	r4, r0
-	mul	r8, r8, r2
-	ldr	r3, [r7, #144]
-	str	r3, [sp, #12]
-	ldr	r3, [r7, #224]
-	uxth	r8, r8
-	sub	r5, r8, #1
-	mul	sl, r8, r6
-	str	r3, [sp, #16]
-	uxth	r5, r5
-	sub	r8, r8, #16
-	b	.L2263
-.L2269:
-	mov	r1, #1
-	add	r3, r5, sl
-	add	r0, sp, #4
-	mov	r2, r1
-	mov	r3, r3, asl #10
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	cmp	r0, #16
+	.pad #68
+	sub	sp, sp, #68
+	mov	r4, r1
+	mov	r8, r3
+	str	r2, [sp, #28]
+	bne	.L2350
+	add	r0, r1, #256
+	mov	r1, r2
+	mov	r2, r3
+	bl	FtlVendorPartRead
+	str	r0, [sp, #16]
+	b	.L2351
+.L2350:
+	ldr	r3, [sp, #28]
+	add	r3, r3, r1
+	str	r3, [sp, #20]
+	ldr	r3, .L2380
+	ldr	r1, [sp, #20]
+	ldr	r2, [r3, #3956]
+	cmp	r1, r2
+	mvnhi	r3, #0
+	strhi	r3, [sp, #16]
+	bhi	.L2351
+	movw	r2, #3922
+	mov	r0, r4
+	ldrh	r5, [r3, r2]
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #20]
+	mov	r1, r5
+	str	r0, [sp, #12]
+	sub	r0, r3, #1
+	bl	__aeabi_uidiv
+	ldr	r1, [sp, #12]
+	rsb	r3, r1, #1
+	ldr	r1, [sp, #28]
+	add	r3, r3, r0
 	str	r3, [sp, #8]
-	bl	FlashReadPages
+	ldr	r3, .L2380+4
+	mov	fp, r0
+	ldr	r0, [sp, #12]
+	ldr	r2, [r3, #-1808]
+	add	r2, r1, r2
+	ldr	r1, [sp, #8]
+	str	r2, [r3, #-1808]
+	ldr	r2, [r3, #-1836]
+	add	r2, r1, r2
+	mov	r1, fp
+	str	r2, [r3, #-1836]
+	bl	FtlCacheMetchLpa
+	cmp	r0, #0
+	beq	.L2352
+	bl	FtlCacheWriteBack
+.L2352:
+	mov	r9, #0
+	ldr	r6, [sp, #12]
+	str	r9, [sp, #32]
+	mov	r5, r9
+	str	r9, [sp, #16]
+	ldr	r7, .L2380
+	b	.L2375
+.L2369:
+	mov	r2, #0
+	mov	r0, r6
+	add	r1, sp, #60
+	bl	log2phys
+	ldr	r2, [sp, #60]
+	cmn	r2, #1
+	bne	.L2376
+	b	.L2379
+.L2357:
+	mla	r0, r0, r6, sl
+	cmp	r0, r4
+	bcc	.L2356
+	ldr	r2, [sp, #20]
+	cmp	r0, r2
+	bcs	.L2356
+	rsb	r0, r4, r0
+	mov	r1, #0
+	mov	r2, #512
+	str	r3, [sp, #4]
+	add	r0, r8, r0, asl #9
+	bl	ftl_memset
 	ldr	r3, [sp, #4]
-	cmn	r3, #1
-	beq	.L2264
-	ldr	r3, [r7, #224]
-	ldrh	r2, [r3, #0]
-	movw	r3, #61664
-	cmp	r2, r3
-	bne	.L2264
-	cmp	r4, #0
-	moveq	r0, r4
-	beq	.L2265
-	cmp	r6, #0
-	ldreq	r3, .L2272+4
-	moveq	r0, #1
-	beq	.L2266
-	b	.L2267
-.L2268:
-	ldr	r2, [r3, #144]
-	ubfx	r1, r6, #5, #16
-	and	lr, r6, #31
-	add	r6, r6, #1
-	ldr	ip, [r2, r1, asl #2]
-	uxth	r6, r6
-	orr	ip, ip, r0, asl lr
-	str	ip, [r2, r1, asl #2]
-.L2266:
-	ldr	r2, [r3, #152]
-	cmp	r6, r2
-	bcc	.L2268
-.L2267:
-	ldr	r3, .L2272+4
-	mov	r2, r9
+.L2356:
+	add	sl, sl, #1
+	b	.L2354
+.L2379:
+	mov	sl, #0
+	movw	r3, #3922
+.L2354:
+	ldrh	r0, [r7, r3]
+	cmp	sl, r0
+	bcc	.L2357
+	b	.L2358
+.L2376:
+	ldr	r3, .L2380+4
+	mov	sl, #36
+	ldr	r1, [r3, #-972]
+	mla	sl, sl, r5, r1
+	ldr	r1, [sp, #12]
+	cmp	r6, r1
+	str	r2, [sl, #4]
+	movw	r2, #3922
+	bne	.L2359
+	ldr	r3, [r3, #-944]
 	mov	r0, r4
-	ldr	r1, [r3, #144]
+	str	r3, [sl, #8]
+	ldrh	r3, [r7, r2]
+	mov	r1, r3
+	str	r3, [sp, #4]
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #4]
+	str	r1, [sp, #36]
+	rsb	r2, r1, r3
+	ldr	r1, [sp, #28]
+	cmp	r2, r1
+	movcc	r1, r2
+	str	r1, [sp, #32]
+	cmp	r1, r3
+	streq	r8, [sl, #8]
+	b	.L2360
+.L2359:
+	cmp	r6, fp
+	ldrneh	r3, [r7, r2]
+	mulne	r3, r3, r6
+	bne	.L2377
+	ldr	r3, [r3, #-940]
+	ldrh	r2, [r7, r2]
+	ldr	r1, [sp, #20]
+	str	r3, [sl, #8]
+	mul	r3, r2, r6
+	rsb	r9, r3, r1
+	cmp	r9, r2
+	bne	.L2360
+.L2377:
+	rsb	r3, r4, r3
+	add	r3, r8, r3, asl #9
+	str	r3, [sl, #8]
+.L2360:
+	movw	r3, #3928
+	ldr	r2, .L2380+4
+	ldrh	r3, [r7, r3]
+	str	r6, [sl, #16]
+	ldr	r2, [r2, #-932]
+	mul	r3, r3, r5
+	add	r5, r5, #1
+	bic	r3, r3, #3
+	add	r3, r2, r3
+	str	r3, [sl, #12]
+.L2358:
+	ldr	r3, [sp, #8]
+	add	r6, r6, #1
+	subs	r3, r3, #1
+	str	r3, [sp, #8]
+	beq	.L2362
+	movw	r3, #3848
+	ldrh	r3, [r7, r3]
+	cmp	r5, r3, asl #3
+	bne	.L2375
+.L2362:
+	cmp	r5, #0
+	beq	.L2375
+	ldr	sl, .L2380+4
+	mov	r1, r5
+	mov	r2, #0
+	ldr	r0, [sl, #-972]
+	bl	FlashReadPages
+	ldr	r3, [sp, #36]
+	str	r6, [sp, #52]
+	mov	r6, r5
+	mov	r3, r3, asl #9
+	str	r3, [sp, #40]
+	ldr	r3, [sp, #32]
+	mov	r3, r3, asl #9
+	str	r3, [sp, #44]
+	mov	r3, r9, asl #9
+	str	r3, [sp, #48]
+	mov	r3, #0
+	str	r3, [sp, #24]
+.L2368:
+	ldr	r3, [sp, #24]
+	mov	r5, #36
+	ldr	r1, [sp, #12]
+	mul	r5, r5, r3
+	ldr	r3, [sl, #-972]
+	add	r3, r3, r5
+	ldr	r2, [r3, #16]
+	cmp	r2, r1
+	bne	.L2364
+	ldr	r1, [r3, #8]
+	ldr	r3, [sl, #-944]
+	cmp	r1, r3
+	bne	.L2365
+	ldr	r3, [sp, #40]
+	mov	r0, r8
+	ldr	r2, [sp, #44]
+	add	r1, r1, r3
+	b	.L2378
+.L2364:
+	cmp	r2, fp
+	bne	.L2365
+	ldr	r1, [r3, #8]
+	ldr	r3, [sl, #-940]
+	cmp	r1, r3
+	bne	.L2365
+	movw	r2, #3922
+	ldrh	r0, [r7, r2]
+	ldr	r2, [sp, #48]
+	mul	r0, r0, fp
+	rsb	r0, r4, r0
+	add	r0, r8, r0, asl #9
+.L2378:
 	bl	memcpy
-	mov	r2, #4
-	ldr	r0, .L2272+8
-	mov	r1, r4
-	mov	r3, r2
-	bl	rknand_print_hex
-	mov	r0, #0
-	b	.L2265
-.L2264:
-	sub	r5, r5, #1
-	uxth	r5, r5
-.L2263:
-	cmp	r5, r8
-	bgt	.L2269
-	mvn	r0, #0
-.L2265:
-	add	sp, sp, #40
-	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
-.L2273:
+.L2365:
+	ldr	r3, [sl, #-972]
+	add	r0, r3, r5
+	ldr	r2, [r3, r5]
+	cmn	r2, #1
+	streq	r2, [sp, #16]
+	ldreq	r1, [sl, #-1636]
+	addeq	r1, r1, #1
+	streq	r1, [sl, #-1636]
+	ldr	r3, [r3, r5]
+	cmp	r3, #256
+	bne	.L2367
+	ldr	r0, [r0, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L2367:
+	ldr	r3, [sp, #24]
+	add	r3, r3, #1
+	str	r3, [sp, #24]
+	cmp	r3, r6
+	bne	.L2368
+	ldr	r6, [sp, #52]
+	mov	r5, #0
+.L2375:
+	ldr	r3, [sp, #8]
+	cmp	r3, #0
+	bne	.L2369
+	ldr	r3, .L2380+8
+	ldr	r2, .L2380+4
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L2351
+	ldr	r0, [sp, #8]
+	mov	r1, #1
+	bl	ftl_do_gc
+.L2351:
+	ldr	r0, [sp, #16]
+	add	sp, sp, #68
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2381:
 	.align	2
-.L2272:
+.L2380:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC141
+	.word	-1138
 	.fnend
-	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
+	.size	ftl_read, .-ftl_read
 	.align	2
-	.global	FlashGetBadBlockList
-	.type	FlashGetBadBlockList, %function
-FlashGetBadBlockList:
+	.global	FtlRead
+	.type	FtlRead, %function
+FtlRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2281
-	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	mov	r5, r0
-	ldr	r3, [r3, #3624]
-	ldr	r6, .L2281+4
-	ldrb	r2, [r3, #13]	@ zero_extendqisi2
-	ldrh	r4, [r3, #14]
-	ldr	r0, [r6, #132]
-	mul	r4, r4, r2
-	uxth	r4, r4
-	add	r2, r4, #7
-	mov	r2, r2, lsr #3
-	bl	FlashReadFacBbtData
-	cmn	r0, #1
-	beq	.L2280
-	mov	r2, #0
-	mov	r0, r4, lsr #4
-	mov	r3, r2
-	sub	r4, r4, #1
-	mov	r1, #1
-	b	.L2276
-.L2278:
-	ldr	ip, [r6, #132]
-	mov	r8, r2, lsr #5
-	and	r7, r2, #31
-	ldr	ip, [ip, r8, asl #2]
-	ands	ip, ip, r1, asl r7
-	movne	ip, r3, asl #1
-	addne	r3, r3, #1
-	uxthne	r3, r3
-	strneh	r2, [r5, ip]	@ movhi
-	cmp	r3, r0
-	bcs	.L2280
-	add	r2, r2, #1
-	uxth	r2, r2
-.L2276:
-	cmp	r2, r4
-	blt	.L2278
-	b	.L2275
-.L2280:
-	mov	r3, #0
-.L2275:
-	mov	r3, r3, asl #1
-	mvn	r2, #0
-	mov	r0, #0
-	strh	r2, [r5, r3]	@ movhi
-	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L2282:
+	@ link register save eliminated.
+	b	ftl_read
+	.fnend
+	.size	FtlRead, .-FtlRead
 	.align	2
-.L2281:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
+	.global	ftl_sys_read
+	.type	ftl_sys_read, %function
+ftl_sys_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r1
+	mov	r3, r2
+	add	r1, r0, #256
+	mov	r2, ip
+	mov	r0, #16
+	b	ftl_read
 	.fnend
-	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.size	ftl_sys_read, .-ftl_sys_read
 	.align	2
-	.global	FtlMakeBbt
-	.type	FtlMakeBbt, %function
-FtlMakeBbt:
+	.global	StorageSysDataLoad
+	.type	StorageSysDataLoad, %function
+StorageSysDataLoad:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	ldr	r4, .L2301
-	ldr	r5, [r4, #-2092]
-	cmp	r5, #0
-	bne	.L2284
-	ldr	r7, .L2301+4
-	bl	FtlBbtMemInit
-	ldr	r6, .L2301+8
-	bl	FtlLoadFactoryBbt
-	add	sl, r7, #12
-	b	.L2285
-.L2291:
-	ldrh	r3, [sl], #2
-	movw	r2, #65535
-	ldr	r0, [r4, #-964]
-	movw	fp, #3908
-	ldr	r9, [r4, #-940]
-	cmp	r3, r2
-	str	r0, [r4, #184]
-	str	r9, [r4, #188]
-	beq	.L2286
-	ldrh	r8, [r6, fp]
-	mov	r1, #1
-	mov	r2, r1
-	ldr	r0, .L2301+12
-	mla	r8, r8, r5, r3
-	mov	r3, r8, asl #10
-	str	r3, [r4, #180]
-	bl	FlashReadPages
-	ldrh	r2, [r6, fp]
-	ldr	r0, [r7, #28]
-	add	r2, r2, #7
-	ldr	r1, [r4, #184]
-	mov	r2, r2, lsr #3
-	bl	memcpy
-	b	.L2287
-.L2286:
-	mov	r1, r5
-	bl	FlashGetBadBlockList
-	ldr	r0, [r4, #184]
-	ldr	r1, [r7, #28]
-	bl	FtlBbt2Bitmap
-	ldrh	fp, [r6, fp]
-.L2289:
-	sub	fp, fp, #1
-	uxth	fp, fp
-.L2300:
-	movw	r8, #3908
-	ldrh	r0, [r6, r8]
-	mla	r0, r0, r5, fp
-	uxth	r0, r0
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L2289
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, #512
+	mov	r5, r0
+	mov	r4, r1
+	mov	r0, r1
 	mov	r1, #0
-	mov	r2, #16
-	strh	fp, [sl, #-2]	@ movhi
-	ldr	r0, [r4, #-940]
 	bl	ftl_memset
-	ldr	r3, .L2301+16
-	strh	r3, [r9, #0]	@ movhi
-	mov	r3, #0
-	str	r3, [r9, #4]
-	ldrh	r3, [sl, #-2]
-	ldrh	r8, [r6, r8]
-	strh	r3, [r9, #2]	@ movhi
-	ldrh	r3, [sl, #-2]
-	ldr	r1, [r7, #28]
-	ldr	r0, [r4, #184]
-	mla	r8, r8, r5, r3
-	mov	r3, r8, asl #10
-	str	r3, [r4, #180]
-	ldr	r3, .L2301+20
-	ldrh	r2, [r4, r3]
-	mov	r2, r2, asl #2
-	bl	memcpy
-	mov	r1, #1
-	mov	r2, r1
-	ldr	r0, .L2301+12
-	bl	FlashEraseBlocks
+	bl	rknand_device_lock
+	mov	r2, r4
 	mov	r1, #1
-	mov	r3, r1
-	ldr	r0, .L2301+12
-	mov	r2, r1
-	bl	FlashProgPages
-	ldr	r3, [r4, #176]
-	cmn	r3, #1
-	bne	.L2287
-	uxth	r0, r8
-	bl	FtlBbmMapBadBlock
-	b	.L2300
-.L2287:
-	uxth	r0, r8
-	add	r5, r5, #1
-	bl	FtlBbmMapBadBlock
-	add	r7, r7, #4
-.L2285:
-	movw	r3, #3866
-	ldrh	r3, [r6, r3]
-	cmp	r5, r3
-	bcc	.L2291
-	mov	r4, #0
-	ldr	r7, .L2301+8
-	movw	r6, #3926
-	b	.L2292
-.L2293:
-	mov	r0, r4
-	add	r4, r4, #1
-	bl	FtlBbmMapBadBlock
-	uxth	r4, r4
-.L2292:
-	ldrh	r3, [r7, r6]
-	ldr	r5, .L2301+8
-	cmp	r3, r4
-	bhi	.L2293
-	movw	r7, #3988
-	movw	r6, #3976
-	ldrh	r4, [r5, r7]
-	sub	r4, r4, #1
-	uxth	r4, r4
-	b	.L2294
-.L2299:
-	mov	r0, r4
-	bl	FtlBbmIsBadBlock
-	cmp	r0, #1
-	beq	.L2295
-	mov	r0, r4
-	bl	FlashTestBlk
-	cmp	r0, #0
-	beq	.L2296
+	mov	r0, r5
+	bl	ftl_sys_read
+	mov	r4, r0
+	bl	rknand_device_unlock
 	mov	r0, r4
-	bl	FtlBbmMapBadBlock
-	b	.L2295
-.L2296:
-	ldrh	r2, [r5, r6]
-	movw	r3, #65535
-	cmp	r2, r3
-	streqh	r4, [r5, r6]	@ movhi
-.L2297:
-	ldrne	r2, .L2301+8
-	movwne	r3, #3980
-	strneh	r4, [r2, r3]	@ movhi
-	bne	.L2298
-.L2295:
-	sub	r4, r4, #1
-	uxth	r4, r4
-.L2294:
-	ldrh	r3, [r5, r7]
-	sub	r3, r3, #48
-	cmp	r4, r3
-	bgt	.L2299
-.L2298:
-	ldr	r4, .L2301+8
-	movw	r6, #3976
-	ldr	r3, .L2301
-	movw	r5, #3980
-	mov	r7, #0
-	movw	r8, #3978
-	str	r7, [r4, #3984]
-	mov	r2, #2
-	ldr	r0, [r3, #-2088]
-	mov	r1, #1
-	ldrh	r3, [r4, r6]
-	strh	r7, [r4, r8]	@ movhi
-	mov	r3, r3, asl #10
-	str	r3, [r0, #4]
-	ldrh	r3, [r4, r5]
-	mov	r3, r3, asl #10
-	str	r3, [r0, #40]
-	bl	FlashEraseBlocks
-	ldrh	r0, [r4, r6]
-	bl	FtlBbmMapBadBlock
-	ldrh	r0, [r4, r5]
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	ldr	r3, [r4, #3984]
-	ldrh	r2, [r4, r5]
-	add	r3, r3, #1
-	str	r3, [r4, #3984]
-	ldrh	r3, [r4, r6]
-	strh	r7, [r4, r8]	@ movhi
-	strh	r2, [r4, r6]	@ movhi
-	strh	r3, [r4, r5]	@ movhi
-	bl	FtlBbmTblFlush
-.L2284:
-	mov	r0, #0
-	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2302:
+	ldmfd	sp!, {r3, r4, r5, pc}
+	.fnend
+	.size	StorageSysDataLoad, .-StorageSysDataLoad
 	.align	2
-.L2301:
-	.word	.LANCHOR2
-	.word	.LANCHOR0+3976
-	.word	.LANCHOR0
-	.word	.LANCHOR2+176
-	.word	-3872
-	.word	-1032
+	.global	ftl_vendor_read
+	.type	ftl_vendor_read, %function
+ftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	ip, r1
+	mov	r3, r2
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r1, r4
+	mov	r0, #16
+	mov	r2, ip
+	ldmfd	sp!, {r4, lr}
+	b	ftl_read
 	.fnend
-	.size	FtlMakeBbt, .-FtlMakeBbt
+	.size	ftl_vendor_read, .-ftl_vendor_read
 	.align	2
-	.type	FtlLowFormat.part.24, %function
-FtlLowFormat.part.24:
+	.global	FlashBootVendorRead
+	.type	FlashBootVendorRead, %function
+FlashBootVendorRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	movw	r6, #3948
-	ldr	r5, .L2324
-	mov	r1, #0
-	ldr	r4, .L2324+4
-	ldrh	r2, [r5, r6]
-	ldr	r0, [r4, #-904]
-	mov	r2, r2, asl #2
-	bl	ftl_memset
-	ldrh	r2, [r5, r6]
-	mov	r1, #0
-	ldr	r0, [r4, #-1036]
-	mov	r2, r2, asl #2
-	bl	ftl_memset
-	ldr	r0, [r5, #3848]
-	mov	r3, #0
-	str	r3, [r4, #-1808]
-	str	r3, [r4, #-1804]
-	uxth	r0, r0
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cmp	r0, #0
-	beq	.L2304
-	bl	FtlMakeBbt
-.L2304:
-	mov	r3, #0
-	ldr	ip, .L2324
-	movw	r0, #3918
-	ldr	r2, .L2324+4
-	ldr	r1, .L2324+8
-	b	.L2305
-.L2306:
-	ldr	lr, [r2, #-948]
-	mvn	r4, r3
-	orr	r4, r3, r4, asl #16
-	str	r4, [lr, r3, asl #2]
-	ldr	lr, [r2, #-944]
-	str	r1, [lr, r3, asl #2]
-	add	r3, r3, #1
-	uxth	r3, r3
-.L2305:
-	ldrh	lr, [ip, r0]
-	ldr	r8, .L2324
-	cmp	r3, lr, asl #7
-	blt	.L2306
-	movw	r3, #3852
-	mov	r5, #0
-	ldrh	r6, [r8, r3]
-	movw	r7, #3854
-	b	.L2307
-.L2308:
-	mov	r0, r6
-	mov	r1, #1
-	bl	FtlLowFormatEraseBlock
-	add	r6, r6, #1
-	uxth	r6, r6
-	add	r5, r5, r0
-	uxth	r5, r5
-.L2307:
-	ldrh	r3, [r8, r7]
-	ldr	r4, .L2324
-	cmp	r3, r6
-	bhi	.L2308
-	movw	r3, #3844
-	ldrh	r1, [r4, r3]
-	sub	r3, r5, #3
-	cmp	r3, r1, asl #1
-	blt	.L2309
-	mov	r0, r5
-	movw	r6, #3854
-	bl	__aeabi_uidiv
-	ldr	r3, [r4, #3944]
-	add	r0, r0, r3
-	uxth	r0, r0
-	bl	FtlSysBlkNumInit
-	ldr	r0, [r4, #3848]
-	uxth	r0, r0
-	bl	FtlFreeSysBlkQueueInit
-	movw	r3, #3852
-	ldrh	r5, [r4, r3]
-	b	.L2310
-.L2311:
-	mov	r0, r5
-	mov	r1, #1
-	bl	FtlLowFormatEraseBlock
-	add	r5, r5, #1
-	uxth	r5, r5
-.L2310:
-	ldrh	r3, [r4, r6]
-	cmp	r3, r5
-	bhi	.L2311
-.L2309:
-	mov	r4, #0
-	ldr	r8, .L2324
-	mov	r6, r4
-	movw	r7, #3852
-	b	.L2312
-.L2313:
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, r5
 	mov	r0, r6
-	mov	r1, #0
-	bl	FtlLowFormatEraseBlock
-	add	r6, r6, #1
-	uxth	r6, r6
-	add	r4, r4, r0
-	uxth	r4, r4
-.L2312:
-	ldrh	r3, [r8, r7]
-	ldr	r5, .L2324
-	cmp	r3, r6
-	bhi	.L2313
-	movw	r3, #3854
-	ldr	r8, .L2324+4
-	ldrh	r3, [r5, r3]
-	ldr	fp, [r5, #3856]
-	ldr	r9, .L2324+12
-	str	r3, [r8, #-988]
-	movw	r3, #3844
-	ldrh	r6, [r5, r3]
-	mov	r0, fp
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	ubfx	sl, r0, #5, #16
-	mov	r7, r0
-	add	r3, sl, #36
-	strh	r3, [r8, r9]	@ movhi
-	mov	r3, #24
-	str	r0, [r5, #3972]
-	mul	r3, r3, r6
-	cmp	r4, r3
-	ble	.L2314
-	rsb	r0, r4, fp
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	str	r0, [r5, #3972]
-	mov	r0, r0, lsr #5
-	add	r0, r0, #24
-	strh	r0, [r8, r9]	@ movhi
-.L2314:
-	ldr	r3, .L2324
-	ldr	r3, [r3, #3836]
-	cmp	r3, #1
-	bne	.L2315
+	bl	ftl_vendor_read
+	mov	r4, r0
+	bl	rknand_device_unlock
 	mov	r0, r4
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	ldr	r8, .L2324+4
-	ldr	r5, .L2324+12
-	ldrh	r9, [r8, r5]
-	uxtah	r0, r9, r0
-	add	r9, r9, r0, lsr #2
-	strh	r9, [r8, r5]	@ movhi
-.L2315:
-	ldr	r3, .L2324
-	ldrb	r3, [r3, #928]	@ zero_extendqisi2
-	cmp	r3, #0
-	beq	.L2316
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	FlashBootVendorRead, .-FlashBootVendorRead
+	.align	2
+	.type	rk_ftl_vendor_ops.constprop.28, %function
+rk_ftl_vendor_ops.constprop.28:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r2, #0
+	mov	r3, r0
+	mov	r2, r3
+	mov	r0, r1
+	mov	r1, #128
+	beq	.L2388
+	b	FlashBootVendorWrite
+.L2388:
+	b	FlashBootVendorRead
+	.fnend
+	.size	rk_ftl_vendor_ops.constprop.28, .-rk_ftl_vendor_ops.constprop.28
+	.align	2
+	.global	FtlCheckVpc
+	.type	FtlCheckVpc, %function
+FtlCheckVpc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
+	mov	r4, #0
+	ldr	r1, .L2400
+	ldr	r0, .L2400+4
+	bl	printk
+	ldr	r0, .L2400+8
+	mov	r1, #8192
+	ldr	r6, .L2400+12
+	bl	__memzero
+	ldr	r5, .L2400+16
+	b	.L2390
+.L2392:
 	mov	r0, r4
-	mov	r1, r6
-	bl	__aeabi_uidiv
-	ldr	r8, .L2324+4
-	ldr	r5, .L2324+12
-	ldrh	r9, [r8, r5]
-	uxtah	r0, r9, r0
-	add	r9, r9, r0, lsr #2
-	strh	r9, [r8, r5]	@ movhi
-.L2316:
-	ldr	r0, .L2324
-	mov	r3, #3904
-	ldrh	r3, [r0, r3]
-	cmp	r3, #0
-	beq	.L2317
-	ldr	r1, .L2324+4
-	ldr	r2, .L2324+12
-	ldrh	ip, [r1, r2]
-	add	ip, ip, r3, lsr #1
-	strh	ip, [r1, r2]	@ movhi
-	mul	ip, r6, r3
-	cmp	ip, r4
-	strgt	r7, [r0, #3972]
-	addgt	r3, r3, #32
-	addgt	sl, sl, r3
-	strgth	sl, [r1, r2]	@ movhi
-.L2317:
-	ldr	r4, .L2324+4
-	ldr	r5, .L2324
-	ldr	r3, .L2324+12
-	ldr	r2, [r5, #3972]
-	ldrh	r3, [r4, r3]
-	rsb	r3, r3, r2
-	mul	r6, r6, r3
-	movw	r3, #3912
-	ldrh	r3, [r5, r3]
-	str	r6, [r4, #212]
-	mul	r6, r3, r6
-	movw	r3, #3918
-	ldrh	r3, [r5, r3]
-	str	r6, [r5, #3972]
-	mul	r6, r3, r6
-	str	r6, [r5, #3952]
-	bl	FtlBbmTblFlush
-	movw	r3, #3854
-	ldrh	r2, [r5, r3]
-	mov	r1, #0
-	ldr	r0, [r4, #-2020]
-	ldr	r6, .L2324+16
-	mov	r2, r2, asl #1
-	bl	ftl_memset
-	ldr	r2, .L2324+20
-	mvn	r1, #0
-	mov	r3, #0
-	str	r3, [r4, #-1848]
-	strh	r1, [r4, r2]	@ movhi
-	ldr	r1, .L2324+24
-	strb	r3, [r4, #-1758]
-	strb	r3, [r4, #-1756]
-	strh	r3, [r4, r1]	@ movhi
-	sub	r1, r1, #236
-	strb	r3, [r4, #-1994]
-	strh	r3, [r4, r1]	@ movhi
-	mov	r1, #255
-	strh	r3, [r4, r6]	@ movhi
-	mov	r3, #1
-	strb	r3, [r4, #-1992]
-	movw	r3, #3852
-	ldrh	r2, [r5, r3]
-	ldr	r0, [r4, #-1844]
-	mov	r2, r2, lsr #3
-	bl	ftl_memset
-.L2318:
-	ldr	r5, .L2324+4
-	sub	r0, r5, #2000
-	bl	make_superblock
-	ldrb	r3, [r4, #-1993]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L2319
-	ldrh	r3, [r4, r6]
-	mvn	r1, #0
-	ldr	r2, [r4, #-2020]
-	mov	r3, r3, asl #1
-	strh	r1, [r2, r3]	@ movhi
-	ldrh	r3, [r4, r6]
-	add	r3, r3, #1
-	strh	r3, [r4, r6]	@ movhi
-	b	.L2318
-.L2319:
-	ldr	r3, [r5, #-1808]
-	ldr	r1, [r5, #-2020]
-	ldr	r6, .L2324+28
-	str	r3, [r5, #-1988]
-	add	r3, r3, #1
-	str	r3, [r5, #-1808]
-	ldr	r3, .L2324+32
-	ldrh	r0, [r5, r3]
-	ldr	r3, .L2324+16
-	ldrh	r2, [r5, r3]
-	mov	r2, r2, asl #1
-	strh	r0, [r1, r2]	@ movhi
-	mov	r2, #0
-	ldr	r0, .L2324+36
-	ldrh	r3, [r5, r3]
-	strb	r2, [r5, #-1946]
-	add	r3, r3, #1
-	strh	r2, [r5, r0]	@ movhi
-	strh	r3, [r5, r6]	@ movhi
-	mov	r3, #1
-	strb	r3, [r5, #-1944]
-.L2320:
-	ldr	r4, .L2324+4
-	sub	r0, r4, #1952
-	bl	make_superblock
-	ldrb	r3, [r5, #-1945]	@ zero_extendqisi2
-	cmp	r3, #0
-	bne	.L2321
-	ldrh	r3, [r5, r6]
-	mvn	r1, #0
-	ldr	r2, [r5, #-2020]
-	mov	r3, r3, asl #1
-	strh	r1, [r2, r3]	@ movhi
-	ldrh	r3, [r5, r6]
-	add	r3, r3, #1
-	strh	r3, [r5, r6]	@ movhi
-	b	.L2320
-.L2321:
-	ldr	r3, [r4, #-1808]
-	mvn	r5, #0
-	ldr	r2, [r4, #-2020]
-	str	r3, [r4, #-1940]
-	add	r3, r3, #1
-	str	r3, [r4, #-1808]
-	ldr	r3, .L2324+40
-	ldrh	r1, [r4, r3]
-	ldr	r3, .L2324+28
-	ldrh	r3, [r4, r3]
-	mov	r3, r3, asl #1
-	strh	r1, [r2, r3]	@ movhi
-	ldr	r3, .L2324+44
-	strh	r5, [r4, r3]	@ movhi
-	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, .L2324+48
+	add	r1, sp, #4
 	mov	r2, #0
-	strh	r0, [r4, r3]	@ movhi
-	add	r3, r3, #2
-	strh	r2, [r4, r3]	@ movhi
-	add	r3, r3, #2
-	ldr	r2, [r4, #212]
-	strh	r5, [r4, r3]	@ movhi
-	add	r3, r3, #2
-	strh	r2, [r4, r3]	@ movhi
-	ldr	r3, [r4, #-1808]
-	str	r3, [r4, #-1768]
-	add	r3, r3, #1
-	str	r3, [r4, #-1808]
-	bl	FtlVpcTblFlush
-	bl	FtlSysBlkInit
-	cmp	r0, #0
-	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-	ldr	r3, .L2324+52
-	mov	r2, #1
-	str	r2, [r3, #2996]
-	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2325:
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	cmn	r0, #1
+	beq	.L2391
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	add	r0, r5, r0, asl #1
+	add	r0, r0, #460
+	ldrh	r3, [r0, #0]
+	add	r3, r3, #1
+	strh	r3, [r0, #0]	@ movhi
+.L2391:
+	add	r4, r4, #1
+.L2390:
+	ldr	r3, [r6, #3976]
+	ldr	r7, .L2400+12
+	cmp	r4, r3
+	bcc	.L2392
+	ldr	r5, .L2400+16
+	mov	r6, #3856
+	ldr	r0, .L2400+20
+	mov	r2, #2
+	ldrh	r3, [r7, r6]
+	mov	r4, #0
+	ldr	r1, [r5, #-2016]
+	bl	rknand_print_hex
+	ldr	r0, .L2400+24
+	add	r1, r5, #460
+	mov	r2, #2
+	ldrh	r3, [r7, r6]
+	bl	rknand_print_hex
+	b	.L2393
+.L2395:
+	ldr	r2, [r5, #-2016]
+	mov	r3, r4, asl #1
+	ldrh	r2, [r2, r3]
+	add	r3, r5, r3
+	add	r3, r3, #460
+	ldrh	r3, [r3, #0]
+	cmp	r2, r3
+	beq	.L2394
+	ldr	r0, .L2400+28
+	mov	r1, r4
+	bl	printk
+.L2394:
+	add	r4, r4, #1
+	uxth	r4, r4
+.L2393:
+	ldrh	r3, [r7, r6]
+	cmp	r3, r4
+	ldr	r3, .L2400+16
+	bhi	.L2395
+	ldr	r2, [r3, #-2004]
+	cmp	r2, #0
+	beq	.L2389
+	ldr	r4, [r3, #-2024]
+	mov	r6, #0
+	ldr	r1, .L2400+32
+	mov	r5, r3
+	rsb	r2, r4, r2
+	ldr	r4, .L2400+36
+	mov	r8, #6
+	movw	sl, #65535
+	mov	r2, r2, asr #1
+	ldrh	r7, [r3, r1]
+	mul	r4, r4, r2
+	uxth	r4, r4
+	b	.L2397
+.L2399:
+	ldr	r2, [r5, #-2016]
+	mov	r3, r4, asl #1
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	beq	.L2398
+	add	r3, r5, r3
+	ldr	r0, .L2400+40
+	add	r3, r3, #460
+	mov	r1, r4
+	ldrh	r3, [r3, #0]
+	bl	printk
+.L2398:
+	mul	r4, r8, r4
+	ldr	r3, [r5, #-2024]
+	ldrh	r4, [r3, r4]
+	cmp	r4, sl
+	beq	.L2389
+	add	r6, r6, #1
+	uxth	r6, r6
+.L2397:
+	cmp	r6, r7
+	bne	.L2399
+.L2389:
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}
+.L2401:
 	.align	2
-.L2324:
+.L2400:
+	.word	.LANCHOR3+77
+	.word	.LC101
+	.word	.LANCHOR2+460
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	168778952
-	.word	-1780
+	.word	.LC158
+	.word	.LC159
+	.word	.LC160
 	.word	-2000
-	.word	-1764
-	.word	-1762
-	.word	-1952
-	.word	-1996
-	.word	-1950
-	.word	-1948
-	.word	-1904
-	.word	-1776
-	.word	.LANCHOR1
-	.fnend
-	.size	FtlLowFormat.part.24, .-FtlLowFormat.part.24
-	.align	2
-	.global	FtlLowFormat
-	.type	FtlLowFormat, %function
-FtlLowFormat:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, lr}
-	.save {r3, lr}
-	ldr	r3, .L2328
-	ldr	r3, [r3, #-2092]
-	cmp	r3, #0
-	bne	.L2327
-	bl	FtlLowFormat.part.24
-.L2327:
-	mov	r0, #0
-	ldmfd	sp!, {r3, pc}
-.L2329:
-	.align	2
-.L2328:
-	.word	.LANCHOR2
+	.word	-1431655765
+	.word	.LC161
 	.fnend
-	.size	FtlLowFormat, .-FtlLowFormat
+	.size	FtlCheckVpc, .-FtlCheckVpc
 	.align	2
 	.global	HynixGetReadRetryDefault
 	.type	HynixGetReadRetryDefault, %function
@@ -20644,7 +21519,7 @@ HynixGetReadRetryDefault:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 64
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2415
+	ldr	r3, .L2487
 	mvn	r2, #83
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
@@ -20660,16 +21535,16 @@ HynixGetReadRetryDefault:
 	strb	r0, [r3, #5]
 	strb	r1, [r3, #6]
 	strb	r2, [r3, #7]
-	bne	.L2331
+	bne	.L2403
 	mvn	r2, #88
 	strb	r2, [r3, #4]
-	ldr	r3, .L2415+4
+	ldr	r3, .L2487+4
 	mvn	r2, #8
 	strb	r2, [r3, #3025]
-	b	.L2387
-.L2331:
+	b	.L2459
+.L2403:
 	cmp	r4, #3
-	bne	.L2333
+	bne	.L2405
 	mvn	r2, #79
 	strb	r2, [r3, #4]
 	mvn	r2, #78
@@ -20685,10 +21560,10 @@ HynixGetReadRetryDefault:
 	mvn	r2, #73
 	strb	r2, [r3, #10]
 	mvn	r2, #72
-	b	.L2410
-.L2333:
+	b	.L2482
+.L2405:
 	cmp	r4, #4
-	bne	.L2334
+	bne	.L2406
 	mvn	ip, #51
 	strb	r0, [r3, #9]
 	strb	ip, [r3, #4]
@@ -20701,14 +21576,14 @@ HynixGetReadRetryDefault:
 	strb	ip, [r3, #7]
 	mvn	ip, #50
 	strb	ip, [r3, #8]
-.L2410:
+.L2482:
 	mov	r6, #8
 	strb	r2, [r3, #11]
 	mov	r5, r6
-	b	.L2332
-.L2334:
+	b	.L2404
+.L2406:
 	cmp	r4, #5
-	bne	.L2335
+	bne	.L2407
 	mov	r2, #56
 	mov	r6, #8
 	strb	r2, [r3, #4]
@@ -20718,10 +21593,10 @@ HynixGetReadRetryDefault:
 	strb	r2, [r3, #6]
 	mov	r2, #59
 	strb	r2, [r3, #7]
-	b	.L2409
-.L2335:
+	b	.L2481
+.L2407:
 	cmp	r4, #6
-	bne	.L2336
+	bne	.L2408
 	mov	r2, #14
 	mov	r6, #12
 	strb	r2, [r3, #4]
@@ -20731,10 +21606,10 @@ HynixGetReadRetryDefault:
 	strb	r2, [r3, #6]
 	mov	r2, #17
 	strb	r2, [r3, #7]
-	b	.L2409
-.L2336:
+	b	.L2481
+.L2408:
 	cmp	r4, #7
-	bne	.L2387
+	bne	.L2459
 	mvn	r2, #79
 	mov	r6, #12
 	strb	r2, [r3, #4]
@@ -20757,17 +21632,17 @@ HynixGetReadRetryDefault:
 	strb	r2, [r3, #12]
 	mvn	r2, #42
 	strb	r2, [r3, #13]
-	b	.L2332
-.L2387:
+	b	.L2404
+.L2459:
 	mov	r6, #7
-.L2409:
+.L2481:
 	mov	r5, #4
-.L2332:
+.L2404:
 	sub	r3, r4, #1
 	cmp	r3, #1
-	bhi	.L2405
-	b	.L2413
-.L2343:
+	bhi	.L2477
+	b	.L2485
+.L2415:
 	add	r2, fp, r8
 	add	r4, fp, #20
 	mov	r7, #0
@@ -20779,7 +21654,7 @@ HynixGetReadRetryDefault:
 	ldr	r1, [r2, #864]
 	add	sl, sl, #8
 	add	sl, r1, sl, asl #8
-.L2339:
+.L2411:
 	add	r2, fp, r7
 	str	r5, [sl, #8]
 	mov	r0, #80
@@ -20793,26 +21668,26 @@ HynixGetReadRetryDefault:
 	ldr	r3, [sp, #12]
 	uxtb	r2, r7
 	cmp	r2, r6
-	bcc	.L2339
+	bcc	.L2411
 	mov	r2, #0
-	b	.L2340
-.L2341:
+	b	.L2412
+.L2413:
 	ldrb	r7, [r0, r1, asl #2]	@ zero_extendqisi2
 	ldrb	r5, [r4, r2]	@ zero_extendqisi2
 	add	r5, r7, r5
 	strb	r5, [ip, r1, asl #3]
 	add	r1, r1, #1
 	cmp	r1, #7
-	bne	.L2341
+	bne	.L2413
 	add	r2, r2, #1
 	cmp	r2, #4
-	beq	.L2342
-.L2340:
+	beq	.L2414
+.L2412:
 	mov	r1, #1
 	add	ip, r4, r2
 	add	r0, r2, r9
-	b	.L2341
-.L2342:
+	b	.L2413
+.L2414:
 	add	r8, r8, #1
 	mov	r2, #0
 	strb	r2, [r4, #16]
@@ -20823,24 +21698,24 @@ HynixGetReadRetryDefault:
 	strb	r2, [r4, #48]
 	strb	r2, [r4, #41]
 	strb	r2, [r4, #49]
-	b	.L2337
-.L2413:
-	ldr	r9, .L2415+8
+	b	.L2409
+.L2485:
+	ldr	r9, .L2487+8
 	mov	r3, r6
 	mov	r8, #0
 	mov	r6, r5
-.L2337:
-	ldr	fp, .L2415
+.L2409:
+	ldr	fp, .L2487
 	ldrb	r2, [fp, #3762]	@ zero_extendqisi2
 	cmp	r2, r8
-	bhi	.L2343
+	bhi	.L2415
 	mov	r5, r6
 	mov	r6, r3
-	b	.L2344
-.L2405:
+	b	.L2416
+.L2477:
 	sub	r3, r4, #3
 	cmp	r3, #4
-	bhi	.L2344
+	bhi	.L2416
 	mul	r3, r6, r5
 	mov	sl, #0
 	mov	r7, sl
@@ -20849,8 +21724,8 @@ HynixGetReadRetryDefault:
 	mov	r3, r3, asl #4
 	str	r2, [sp, #24]
 	str	r3, [sp, #52]
-	b	.L2345
-.L2386:
+	b	.L2417
+.L2458:
 	add	r3, r1, sl
 	ldrb	r6, [r3, #3764]	@ zero_extendqisi2
 	add	r3, r1, r6, asl #3
@@ -20875,30 +21750,30 @@ HynixGetReadRetryDefault:
 	cmp	r4, #4
 	mov	r3, #54
 	str	r3, [r8, #8]
-	bne	.L2348
+	bne	.L2420
 	mov	r3, #255
 	str	r3, [r8, #4]
 	mov	r3, #64
 	str	r3, [r9, fp, asl #8]
 	mov	r3, #204
-	b	.L2411
-.L2348:
+	b	.L2483
+.L2420:
 	sub	r3, r4, #5
 	cmp	r3, #1
-	ldrls	r3, .L2415
+	ldrls	r3, .L2487
 	ldrlsb	r3, [r3, #4]	@ zero_extendqisi2
 	strls	r3, [r8, #4]
 	movls	r3, #82
-	bls	.L2412
-.L2350:
+	bls	.L2484
+.L2422:
 	mov	r3, #174
 	str	r3, [r8, #4]
 	mov	r3, #176
 	str	r7, [r9, fp, asl #8]
-.L2411:
+.L2483:
 	str	r3, [r8, #4]
 	mov	r3, #77
-.L2412:
+.L2484:
 	cmp	r4, #6
 	str	r3, [r9, fp, asl #8]
 	mov	r0, r6
@@ -20926,88 +21801,88 @@ HynixGetReadRetryDefault:
 	cmp	r3, #1
 	str	r3, [sp, #36]
 	movls	r1, #16
-	bls	.L2354
+	bls	.L2426
 	cmp	r4, #7
 	moveq	r1, #32
 	movne	r1, #2
-.L2354:
-	ldr	r3, .L2415+12
-	ldr	r2, [r3, #144]
+.L2426:
+	ldr	r3, .L2487+12
+	ldr	r2, [r3, #148]
 	mov	r3, #0
-.L2355:
+.L2427:
 	ldr	r0, [r8, #0]
 	strb	r0, [r2, r3]
 	add	r3, r3, #1
 	uxtb	r0, r3
 	cmp	r0, r1
-	bcc	.L2355
+	bcc	.L2427
 	cmp	r4, #7
-	bne	.L2356
+	bne	.L2428
 	mov	r3, #0
-.L2358:
+.L2430:
 	ldrb	r1, [r2, #0]	@ zero_extendqisi2
 	cmp	r1, #12
-	beq	.L2357
+	beq	.L2429
 	ldrb	r1, [r2, #1]	@ zero_extendqisi2
 	cmp	r1, #10
-	beq	.L2357
+	beq	.L2429
 	add	r3, r3, #1
 	add	r2, r2, #4
 	uxtb	r3, r3
 	cmp	r3, #8
-	bne	.L2358
-	b	.L2359
-.L2357:
+	bne	.L2430
+	b	.L2431
+.L2429:
 	cmp	r3, #6
-	bls	.L2360
-.L2359:
-	ldr	r0, .L2415+16
+	bls	.L2432
+.L2431:
+	ldr	r0, .L2487+16
 	mov	r1, #0
 	bl	printk
-.L2361:
-	b	.L2361
-.L2356:
+.L2433:
+	b	.L2433
+.L2428:
 	cmp	r4, #6
-	bne	.L2360
+	bne	.L2432
 	mov	r1, #8
-.L2362:
+.L2434:
 	ldrb	r3, [r2], #1	@ zero_extendqisi2
 	cmp	r3, #12
-	beq	.L2360
+	beq	.L2432
 	ldrb	r3, [r2, #7]	@ zero_extendqisi2
 	cmp	r3, #4
-	beq	.L2360
+	beq	.L2432
 	sub	r1, r1, #1
 	uxtb	r1, r1
 	cmp	r1, #0
-	bne	.L2362
-	b	.L2414
-.L2364:
-	b	.L2364
-.L2360:
-	ldr	r3, .L2415+12
+	bne	.L2434
+	b	.L2486
+.L2436:
+	b	.L2436
+.L2432:
+	ldr	r3, .L2487+12
 	mov	r2, #0
-	ldr	ip, [r3, #144]
+	ldr	ip, [r3, #148]
 	str	ip, [sp, #40]
-.L2365:
+.L2437:
 	ldr	r1, [r8, #0]
 	ldr	lr, [sp, #40]
 	ldr	ip, [sp, #52]
 	strb	r1, [lr, r2]
 	add	r2, r2, #1
 	cmp	r2, ip
-	blt	.L2365
+	blt	.L2437
 	ldr	r2, [sp, #24]
-	ldr	r1, [r3, #144]
+	ldr	r1, [r3, #148]
 	mov	r3, #8
 	mov	ip, r2, asl #2
 	mov	lr, r2, asl #3
 	add	r1, r1, ip
 	str	ip, [sp, #32]
-.L2367:
+.L2439:
 	mov	r2, #0
 	mov	r0, r2
-.L2366:
+.L2438:
 	ldr	ip, [r1, r2]
 	add	r0, r0, #1
 	mvn	ip, ip
@@ -21015,14 +21890,14 @@ HynixGetReadRetryDefault:
 	ldr	ip, [sp, #24]
 	add	r2, r2, #4
 	cmp	r0, ip
-	blt	.L2366
+	blt	.L2438
 	subs	r3, r3, #1
 	add	r1, r1, lr
-	bne	.L2367
+	bne	.L2439
 	str	r3, [sp, #16]
 	str	sl, [sp, #60]
-	b	.L2368
-.L2372:
+	b	.L2440
+.L2444:
 	mov	lr, #1
 	mov	r0, #0
 	mov	ip, lr, asl r2
@@ -21030,7 +21905,7 @@ HynixGetReadRetryDefault:
 	mov	sl, #16
 	str	r3, [sp, #4]
 	str	sl, [sp, #20]
-.L2370:
+.L2442:
 	ldr	r3, [sp, #56]
 	ldr	r3, [r3, r0]
 	and	sl, ip, r3
@@ -21041,13 +21916,13 @@ HynixGetReadRetryDefault:
 	subs	r3, r3, #1
 	add	r0, r0, sl
 	str	r3, [sp, #20]
-	bne	.L2370
+	bne	.L2442
 	cmp	lr, #8
 	add	r2, r2, #1
 	orrhi	r1, r1, ip
 	cmp	r2, #32
 	ldr	r3, [sp, #4]
-	bne	.L2372
+	bne	.L2444
 	ldr	ip, [sp, #16]
 	ldr	r2, [sp, #24]
 	add	ip, ip, #1
@@ -21056,50 +21931,50 @@ HynixGetReadRetryDefault:
 	str	ip, [sp, #16]
 	str	r1, [sl, r3]
 	add	r3, r3, #4
-	bge	.L2373
-.L2368:
-	ldr	sl, .L2415+12
+	bge	.L2445
+.L2440:
+	ldr	sl, .L2487+12
 	mov	r1, #0
 	mov	r2, r1
-	ldr	sl, [sl, #144]
+	ldr	sl, [sl, #148]
 	add	ip, sl, r3
 	str	ip, [sp, #56]
 	str	sl, [sp, #44]
-	b	.L2372
-.L2373:
-	ldr	r3, .L2415+12
+	b	.L2444
+.L2445:
+	ldr	r3, .L2487+12
 	ldr	sl, [sp, #60]
-	ldr	r1, [r3, #144]
+	ldr	r1, [r3, #148]
 	mov	r3, #0
 	mov	r2, r3
-.L2375:
+.L2447:
 	ldr	r0, [r1, r3]
 	add	r3, r3, #4
 	cmp	r0, #0
 	addeq	r2, r2, #1
 	cmp	r3, #32
-	bne	.L2375
+	bne	.L2447
 	cmp	r2, #7
-	ble	.L2376
-	ldr	r0, .L2415+20
+	ble	.L2448
+	ldr	r0, .L2487+20
 	mov	r2, #1
 	mov	r3, #1024
 	bl	rknand_print_hex
-	ldr	r0, .L2415+16
+	ldr	r0, .L2487+16
 	mov	r1, #0
 	bl	printk
-.L2377:
-	b	.L2377
-.L2376:
+.L2449:
+	b	.L2449
+.L2448:
 	cmp	r4, #6
 	moveq	r0, #4
 	streq	r0, [sp, #16]
-	beq	.L2378
+	beq	.L2450
 	cmp	r4, #7
 	moveq	lr, #10
 	movne	lr, #8
 	str	lr, [sp, #16]
-.L2378:
+.L2450:
 	cmp	r5, #0
 	ldr	r0, [sp, #40]
 	subne	r3, r5, #1
@@ -21110,14 +21985,14 @@ HynixGetReadRetryDefault:
 	ldr	r1, [sp, #28]
 	addne	r3, r3, #1
 	strne	r3, [sp, #20]
-	b	.L2381
-.L2382:
+	b	.L2453
+.L2454:
 	ldrb	lr, [ip], #1	@ zero_extendqisi2
 	strb	lr, [r1, r3]
 	add	r3, r3, #1
 	uxtb	lr, r3
 	cmp	lr, r5
-	bcc	.L2382
+	bcc	.L2454
 	ldr	r3, [sp, #20]
 	add	r2, r2, #1
 	ldr	ip, [sp, #16]
@@ -21125,12 +22000,12 @@ HynixGetReadRetryDefault:
 	ldr	r3, [sp, #48]
 	add	r1, r1, ip
 	cmp	r2, r3
-	bge	.L2383
-.L2381:
+	bge	.L2455
+.L2453:
 	mov	ip, r0
 	mov	r3, #0
-	b	.L2382
-.L2383:
+	b	.L2454
+.L2455:
 	mov	r3, #255
 	mov	r0, r6
 	str	r3, [r8, #8]
@@ -21139,10 +22014,10 @@ HynixGetReadRetryDefault:
 	cmp	ip, #1
 	movhi	r3, #56
 	strhi	r3, [r8, #8]
-	bhi	.L2385
+	bhi	.L2457
 	mov	r3, #54
 	str	r3, [r8, #8]
-	ldr	r3, .L2415
+	ldr	r3, .L2487
 	mov	r0, sl
 	mvn	r1, #0
 	ldrb	r3, [r3, #4]	@ zero_extendqisi2
@@ -21151,36 +22026,36 @@ HynixGetReadRetryDefault:
 	str	r7, [r9, fp, asl #8]
 	str	r3, [r8, #8]
 	bl	FlashReadCmd
-.L2385:
+.L2457:
 	mov	r0, r6
 	add	sl, sl, #1
 	bl	NandcWaitFlashReady
 	uxtb	sl, sl
-.L2345:
-	ldr	r1, .L2415
+.L2417:
+	ldr	r1, .L2487
 	ldrb	r3, [r1, #3762]	@ zero_extendqisi2
 	cmp	r3, sl
-	bhi	.L2386
+	bhi	.L2458
 	ldr	r6, [sp, #48]
-.L2344:
-	ldr	r3, .L2415
+.L2416:
+	ldr	r3, .L2487
 	strb	r5, [r3, #1]
 	strb	r6, [r3, #2]
 	add	sp, sp, #68
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2414:
-	ldr	r0, .L2415+16
+.L2486:
+	ldr	r0, .L2487+16
 	bl	printk
-	b	.L2364
-.L2416:
+	b	.L2436
+.L2488:
 	.align	2
-.L2415:
+.L2487:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.word	.LANCHOR1+3008
 	.word	.LANCHOR2
-	.word	.LC142
-	.word	.LC143
+	.word	.LC162
+	.word	.LC163
 	.fnend
 	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
 	.align	2
@@ -21196,15 +22071,15 @@ FlashGetReadRetryDefault:
 	ldmeqfd	sp!, {r3, pc}
 	sub	r2, r3, #1
 	cmp	r2, #6
-	bhi	.L2419
+	bhi	.L2491
 	ldmfd	sp!, {r3, lr}
 	b	HynixGetReadRetryDefault
-.L2419:
+.L2491:
 	cmp	r3, #49
-	bne	.L2420
-	ldr	r0, .L2421
+	bne	.L2492
+	ldr	r0, .L2493
 	mov	r2, #64
-	ldr	r1, .L2421+4
+	ldr	r1, .L2493+4
 	strb	r3, [r0, #0]
 	mov	r3, #4
 	strb	r3, [r0, #1]
@@ -21213,12 +22088,12 @@ FlashGetReadRetryDefault:
 	add	r0, r0, #4
 	bl	memcpy
 	ldmfd	sp!, {r3, pc}
-.L2420:
+.L2492:
 	ldmfd	sp!, {r3, lr}
-	b	FlashGetReadRetryDefault.part.25
-.L2422:
+	b	FlashGetReadRetryDefault.part.27
+.L2494:
 	.align	2
-.L2421:
+.L2493:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+2924
 	.fnend
@@ -21234,191 +22109,191 @@ FlashInit:
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r7, r0
 	mov	r0, #32768
-	ldr	r5, .L2474
+	ldr	r5, .L2546
 	bl	ftl_malloc
-	ldr	r6, .L2474+4
+	ldr	r6, .L2546+4
 	mov	r4, #0
-	str	r0, [r5, #144]
+	str	r0, [r5, #148]
 	mov	r0, #32768
 	bl	ftl_malloc
-	str	r0, [r5, #132]
+	str	r0, [r5, #136]
 	mov	r0, #4096
 	bl	ftl_malloc
-	str	r0, [r5, #224]
+	str	r0, [r5, #228]
 	mov	r0, #32768
 	bl	ftl_malloc
-	str	r0, [r5, #216]
+	str	r0, [r5, #220]
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r3, #50
-	str	r4, [r5, #152]
-	strb	r3, [r5, #160]
+	str	r4, [r5, #156]
+	strb	r3, [r5, #164]
 	strb	r3, [r6, #853]
 	mov	r3, #128
-	str	r4, [r5, #164]
+	str	r4, [r5, #168]
 	str	r3, [r6, #856]
 	mov	r3, #60
-	strb	r4, [r6, #3773]
-	strb	r3, [r5, #148]
+	strb	r4, [r6, #3780]
+	strb	r3, [r5, #152]
 	strb	r4, [r6, #852]
-	str	r0, [r5, #220]
+	str	r0, [r5, #224]
 	mov	r0, r7
 	bl	NandcInit
-	ldr	r5, .L2474+8
+	ldr	r5, .L2546+8
 	mov	r7, #44
-.L2427:
+.L2499:
 	uxtb	r0, r4
 	mov	r1, r5
 	bl	FlashReadIDRaw
 	cmp	r4, #0
-	bne	.L2424
+	bne	.L2496
 	ldrb	r3, [r6, #2980]	@ zero_extendqisi2
 	sub	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L2465
+	bhi	.L2537
 	ldrb	r3, [r6, #2981]	@ zero_extendqisi2
 	cmp	r3, #255
-	beq	.L2466
-.L2424:
+	beq	.L2538
+.L2496:
 	ldrb	r3, [r5, #0]	@ zero_extendqisi2
 	add	r4, r4, #1
 	cmp	r3, #181
 	streqb	r7, [r5, #0]
 	cmp	r4, #4
 	add	r5, r5, #8
-	bne	.L2427
-	ldr	r4, .L2474+4
+	bne	.L2499
+	ldr	r4, .L2546+4
 	ldrb	r3, [r4, #2980]	@ zero_extendqisi2
 	cmp	r3, #173
-	beq	.L2428
-	ldr	r0, [r4, #3776]
+	beq	.L2500
+	ldr	r0, [r4, #3784]
 	bl	NandcSetDdrMode
-.L2428:
-	ldr	r5, .L2474+4
+.L2500:
+	ldr	r5, .L2546+4
 	mov	r1, #0
 	mov	r2, #852
 	mov	r0, r5
 	bl	ftl_memset
-	ldr	r3, .L2474+12
+	ldr	r3, .L2546+12
 	str	r3, [r4, #3624]
 	mov	r3, #0
 	strb	r3, [r4, #860]
 	ldrb	r3, [r4, #2981]	@ zero_extendqisi2
 	cmp	r3, #161
 	cmpne	r3, #241
-	beq	.L2429
+	beq	.L2501
 	cmp	r3, #218
-	beq	.L2429
+	beq	.L2501
 	cmp	r3, #209
-	beq	.L2429
+	beq	.L2501
 	cmp	r3, #220
-	bne	.L2430
+	bne	.L2502
 	ldrb	r2, [r5, #2983]	@ zero_extendqisi2
 	cmp	r2, #149
-	bne	.L2430
-.L2429:
-	ldr	r2, .L2474+4
+	bne	.L2502
+.L2501:
+	ldr	r2, .L2546+4
 	mov	r1, #1
 	mov	r0, #16
-	ldr	ip, .L2474+16
+	ldr	ip, .L2546+16
 	strb	r1, [r2, #852]
-	ldr	r1, .L2474
+	ldr	r1, .L2546
 	strb	r0, [r2, #853]
 	strb	r3, [ip, #3038]
-	strb	r0, [r1, #148]
+	strb	r0, [r1, #152]
 	ldrb	r0, [r2, #2980]	@ zero_extendqisi2
 	cmp	r0, #152
 	strb	r0, [ip, #3037]
-	bne	.L2431
+	bne	.L2503
 	ldrb	r0, [r2, #2984]	@ zero_extendqisi2
 	sxtb	r0, r0
 	cmp	r0, #0
 	movge	r0, #24
-	strgeb	r0, [r1, #148]
-.L2431:
-	ldr	r1, [r2, #3784]
-	ldr	r2, .L2474+20
+	strgeb	r0, [r1, #152]
+.L2503:
+	ldr	r1, [r2, #3776]
+	ldr	r2, .L2546+20
 	cmp	r1, r2
-	ldreq	r2, .L2474
+	ldreq	r2, .L2546
 	moveq	r1, #16
-	streqb	r1, [r2, #148]
+	streqb	r1, [r2, #152]
 	cmp	r3, #218
-	bne	.L2433
-	ldr	r3, .L2474+16
+	bne	.L2505
+	ldr	r3, .L2546+16
 	movw	r2, #3050
 	mov	r1, #2048
 	strh	r1, [r3, r2]	@ movhi
 	mvn	r2, #37
-	b	.L2471
-.L2433:
+	b	.L2543
+.L2505:
 	cmp	r3, #220
-	bne	.L2434
-	ldr	r3, .L2474+16
+	bne	.L2506
+	ldr	r3, .L2546+16
 	movw	r2, #3050
 	mov	r1, #4096
 	strh	r1, [r3, r2]	@ movhi
 	mvn	r2, #35
-.L2471:
+.L2543:
 	strb	r2, [r3, #3038]
-.L2434:
-	ldr	r1, .L2474+24
+.L2506:
+	ldr	r1, .L2546+24
 	mov	r2, #32
-	ldr	r0, .L2474+28
+	ldr	r0, .L2546+28
 	bl	memcpy
-	ldr	r0, .L2474+12
+	ldr	r0, .L2546+12
 	mov	r2, #32
 	add	r1, r0, #144
 	bl	memcpy
-.L2430:
-	ldr	r4, .L2474+4
+.L2502:
+	ldr	r4, .L2546+4
 	ldrb	r3, [r4, #852]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2435
+	bne	.L2507
 	bl	FlashLoadPhyInfoInRam
 	cmp	r0, #0
-	bne	.L2436
+	bne	.L2508
 	ldr	r3, [r4, #3624]
 	ldrh	r0, [r3, #16]
 	ubfx	r0, r0, #8, #3
 	strb	r0, [r4, #3772]
 	tst	r0, #1
-	bne	.L2436
+	bne	.L2508
 	mov	r3, #1
-	strb	r3, [r4, #3773]
+	strb	r3, [r4, #3780]
 	bl	FlashSetInterfaceMode
 	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
 	bl	NandcSetMode
-.L2436:
-	ldr	r4, .L2474+4
+.L2508:
+	ldr	r4, .L2546+4
 	ldr	r3, [r4, #3624]
 	ldrb	r3, [r3, #26]	@ zero_extendqisi2
 	strb	r3, [r4, #928]
 	bl	FlashLoadPhyInfo
 	cmp	r0, #0
-	beq	.L2435
-	ldr	r3, [r4, #3776]
+	beq	.L2507
+	ldr	r3, [r4, #3784]
 	cmp	r3, #0
-	beq	.L2438
+	beq	.L2510
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
-	b	.L2472
-.L2438:
+	b	.L2544
+.L2510:
 	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
 	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
-.L2472:
+.L2544:
 	bl	NandcSetMode
 	bl	FlashLoadPhyInfo
 	cmp	r0, #0
-	beq	.L2435
-	ldr	r4, .L2474+4
+	beq	.L2507
+	ldr	r4, .L2546+4
 	mov	r0, #1
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
-	ldr	r0, .L2474+32
+	ldr	r0, .L2546+32
 	ldr	r3, [r4, #3624]
 	ldrh	r1, [r3, #14]
 	bl	printk
@@ -21429,38 +22304,38 @@ FlashInit:
 	ldr	r3, [r4, #3624]
 	ldrb	r0, [r3, #19]	@ zero_extendqisi2
 	bl	FlashGetReadRetryDefault
-	ldr	r1, .L2474+36
-	ldr	r0, .L2474
+	ldr	r1, .L2546+36
+	ldr	r0, .L2546
 	ldr	r3, [r4, #3624]
 	ldrh	r1, [r0, r1]
 	ldrb	r2, [r3, #9]	@ zero_extendqisi2
 	add	r1, r1, #4080
 	add	r1, r1, #15
 	cmp	r2, r1, lsr #12
-	blt	.L2441
+	blt	.L2513
 	ldrh	r1, [r3, #14]
 	add	r1, r1, #255
 	cmp	r2, r1, lsr #8
-	bge	.L2442
-.L2441:
+	bge	.L2514
+.L2513:
 	ldrh	r2, [r3, #14]
 	bic	r2, r2, #255
 	strh	r2, [r3, #14]	@ movhi
-.L2442:
-	ldr	r3, .L2474+4
+.L2514:
+	ldr	r3, .L2546+4
 	ldrb	r3, [r3, #3772]	@ zero_extendqisi2
 	tst	r3, #6
-	beq	.L2443
+	beq	.L2515
 	bl	FlashSavePhyInfo
-	ldr	r3, .L2474
+	ldr	r3, .L2546
 	mov	r0, #0
-	ldr	r1, [r3, #156]
+	ldr	r1, [r3, #160]
 	bl	FlashDdrParaScan
-.L2443:
+.L2515:
 	bl	FlashSavePhyInfo
-.L2435:
-	ldr	r4, .L2474+4
-	ldr	r5, .L2474
+.L2507:
+	ldr	r4, .L2546+4
+	ldr	r5, .L2546
 	ldr	r3, [r4, #3624]
 	ldrb	r2, [r3, #26]	@ zero_extendqisi2
 	ldrh	r0, [r3, #10]
@@ -21470,14 +22345,14 @@ FlashInit:
 	ubfx	r1, r2, #7, #1
 	strb	r1, [r4, #860]
 	ubfx	r1, r2, #3, #1
-	strb	r1, [r5, #172]
+	strb	r1, [r5, #176]
 	ubfx	r1, r2, #4, #1
 	ubfx	r2, r2, #8, #3
-	strb	r1, [r4, #3833]
+	strb	r1, [r4, #3837]
 	strb	r2, [r4, #3772]
 	mov	r2, #0
 	ldrb	r1, [r3, #12]	@ zero_extendqisi2
-	str	r2, [r5, #168]
+	str	r2, [r5, #172]
 	bl	__aeabi_idiv
 	mov	r1, r0
 	mov	r0, r6
@@ -21486,157 +22361,157 @@ FlashInit:
 	ldr	r3, [r4, #3624]
 	ldrh	r2, [r3, #16]
 	tst	r2, #64
-	beq	.L2444
+	beq	.L2516
 	ldrb	r0, [r3, #19]	@ zero_extendqisi2
 	ldrb	r3, [r4, #1]	@ zero_extendqisi2
 	strb	r0, [r4, #3761]
 	strb	r3, [r4, #3760]
 	ldrb	r3, [r4, #2]	@ zero_extendqisi2
-	strb	r3, [r5, #136]
+	strb	r3, [r5, #140]
 	sub	r3, r0, #1
 	uxtb	r3, r3
 	cmp	r3, #6
-	bhi	.L2445
-	ldr	r3, .L2474+40
-	str	r3, [r5, #168]
+	bhi	.L2517
+	ldr	r3, .L2546+40
+	str	r3, [r5, #172]
 	sub	r3, r0, #5
 	uxtb	r3, r3
 	cmp	r3, #1
 	movls	r3, #1
-	strls	r3, [r4, #3824]
-	bls	.L2447
+	strls	r3, [r4, #3828]
+	bls	.L2519
 	cmp	r0, #7
 	addeq	r4, r4, #28
-	beq	.L2448
-.L2447:
-	ldr	r4, .L2474+44
-.L2448:
+	beq	.L2520
+.L2519:
+	ldr	r4, .L2546+44
+.L2520:
 	mov	r3, #0
 	mov	r2, r3
-.L2450:
+.L2522:
 	ldrsb	r1, [r4, r2]
 	add	r2, r2, #1
 	cmp	r1, #0
 	addeq	r3, r3, #1
 	cmp	r2, #32
-	bne	.L2450
+	bne	.L2522
 	cmp	r3, #27
-	bls	.L2444
+	bls	.L2516
 	bl	FlashGetReadRetryDefault
 	bl	FlashSavePhyInfo
-	b	.L2444
-.L2445:
+	b	.L2516
+.L2517:
 	sub	r3, r0, #17
 	uxtb	r3, r3
 	cmp	r3, #2
-	bhi	.L2451
-	ldr	r3, .L2474+48
+	bhi	.L2523
+	ldr	r3, .L2546+48
 	cmp	r0, #19
-	str	r3, [r5, #168]
+	str	r3, [r5, #172]
 	mov	r3, #7
-	strb	r3, [r5, #136]
+	strb	r3, [r5, #140]
 	moveq	r3, #15
-	streqb	r3, [r5, #136]
-	b	.L2444
-.L2451:
+	streqb	r3, [r5, #140]
+	b	.L2516
+.L2523:
 	cmp	r0, #33
 	cmpne	r0, #65
-	beq	.L2452
+	beq	.L2524
 	cmp	r0, #66
-	bne	.L2453
-.L2452:
-	ldr	r3, .L2474
+	bne	.L2525
+.L2524:
+	ldr	r3, .L2546
 	mov	r1, #4
-	ldr	r2, .L2474+52
-	str	r2, [r3, #168]
-	ldr	r2, .L2474+4
+	ldr	r2, .L2546+52
+	str	r2, [r3, #172]
+	ldr	r2, .L2546+4
 	strb	r1, [r2, #3760]
 	mov	r2, #7
-	strb	r2, [r3, #136]
-	b	.L2444
-.L2453:
+	strb	r2, [r3, #140]
+	b	.L2516
+.L2525:
 	cmp	r0, #67
 	cmpne	r0, #34
-	beq	.L2454
+	beq	.L2526
 	cmp	r0, #35
-	beq	.L2454
+	beq	.L2526
 	cmp	r0, #68
-	bne	.L2455
-.L2454:
-	ldr	r3, .L2474
+	bne	.L2527
+.L2526:
+	ldr	r3, .L2546
 	cmp	r0, #35
 	cmpne	r0, #68
-	ldr	r2, .L2474+52
+	ldr	r2, .L2546+52
 	sub	r0, r0, #67
 	uxtb	r0, r0
-	str	r2, [r3, #168]
+	str	r2, [r3, #172]
 	mov	r2, #7
-	strb	r2, [r3, #136]
+	strb	r2, [r3, #140]
 	moveq	r2, #17
-	streqb	r2, [r3, #136]
+	streqb	r2, [r3, #140]
 	cmp	r0, #1
-	ldr	r3, .L2474+4
+	ldr	r3, .L2546+4
 	movls	r2, #4
 	movhi	r2, #5
 	strb	r2, [r3, #3760]
-	b	.L2444
-.L2455:
+	b	.L2516
+.L2527:
 	cmp	r0, #49
-	ldreq	r3, .L2474+56
-	streq	r3, [r5, #168]
-.L2444:
-	ldr	r2, .L2474+4
-	ldr	r3, .L2474+20
-	ldr	r1, [r2, #3784]
+	ldreq	r3, .L2546+56
+	streq	r3, [r5, #172]
+.L2516:
+	ldr	r2, .L2546+4
+	ldr	r3, .L2546+20
+	ldr	r1, [r2, #3776]
 	cmp	r1, r3
-	bne	.L2458
+	bne	.L2530
 	ldrb	r3, [r2, #928]	@ zero_extendqisi2
 	cmp	r3, #0
 	ldrne	r3, [r2, #3624]
 	movne	r1, #0
 	strneb	r1, [r3, #18]
-.L2458:
+.L2530:
 	ldrb	r2, [r2, #2980]	@ zero_extendqisi2
-	ldr	r3, .L2474+4
+	ldr	r3, .L2546+4
 	cmp	r2, #44
-	bne	.L2459
-	ldrb	r2, [r3, #3773]	@ zero_extendqisi2
+	bne	.L2531
+	ldrb	r2, [r3, #3780]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L2459
-	ldr	r1, [r3, #3784]
-	ldr	r2, .L2474+20
+	beq	.L2531
+	ldr	r1, [r3, #3776]
+	ldr	r2, .L2546+20
 	cmp	r1, r2
-	bne	.L2460
+	bne	.L2532
 	ldrb	r3, [r3, #928]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2459
-.L2460:
-	ldr	r3, .L2474+4
+	bne	.L2531
+.L2532:
+	ldr	r3, .L2546+4
 	mov	r2, #0
 	mov	r0, #1
-	strb	r2, [r3, #3773]
+	strb	r2, [r3, #3780]
 	bl	FlashSetInterfaceMode
 	mov	r0, #1
 	bl	NandcSetMode
-.L2459:
+.L2531:
 	mov	r0, #0
 	bl	flash_enter_slc_mode
-	ldr	r2, .L2474+4
+	ldr	r2, .L2546+4
 	ldrb	r3, [r2, #3772]	@ zero_extendqisi2
 	tst	r3, #6
-	beq	.L2461
-	ldrb	r2, [r2, #3773]	@ zero_extendqisi2
+	beq	.L2533
+	ldrb	r2, [r2, #3780]	@ zero_extendqisi2
 	cmp	r2, #0
-	bne	.L2462
+	bne	.L2534
 	tst	r3, #1
-	bne	.L2461
-.L2462:
-	ldr	r3, .L2474
+	bne	.L2533
+.L2534:
+	ldr	r3, .L2546
 	mov	r0, #0
-	ldr	r1, [r3, #156]
+	ldr	r1, [r3, #160]
 	bl	FlashDdrParaScan
-.L2461:
-	ldr	r4, .L2474+4
+.L2533:
+	ldr	r4, .L2546+4
 	mov	r0, #0
 	bl	flash_exit_slc_mode
 	mov	r8, #16
@@ -21646,7 +22521,7 @@ FlashInit:
 	bl	FlashBchSel
 	add	r0, r4, #932
 	bl	FlashReadIdbDataRaw
-	ldr	r0, .L2474+60
+	ldr	r0, .L2546+60
 	strb	r8, [r4, #853]
 	bl	FlashTimingCfg
 	ldr	r5, [r4, #3624]
@@ -21690,7 +22565,7 @@ FlashInit:
 	ldrb	lr, [r4, #852]	@ zero_extendqisi2
 	strh	r1, [r4, r2]	@ movhi
 	cmp	lr, #1
-	bne	.L2464
+	bne	.L2536
 	mov	r7, r7, lsr #1
 	mov	ip, ip, asl #1
 	mov	r1, r1, asl #1
@@ -21700,21 +22575,21 @@ FlashInit:
 	strh	r7, [r4, r6]	@ movhi
 	strh	ip, [r4, r0]	@ movhi
 	strh	r2, [r4, r3]	@ movhi
-.L2464:
+.L2536:
 	ldrb	r0, [r5, #20]	@ zero_extendqisi2
 	bl	FlashBchSel
 	bl	ftl_flash_suspend
 	mov	r0, #0
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L2465:
+.L2537:
 	mvn	r0, #1
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L2466:
+.L2538:
 	mvn	r0, #1
 	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
-.L2475:
+.L2547:
 	.align	2
-.L2474:
+.L2546:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR0+2980
@@ -21723,8 +22598,8 @@ FlashInit:
 	.word	1446522928
 	.word	.LANCHOR1+2796
 	.word	.LANCHOR0+896
-	.word	.LC144
-	.word	-898
+	.word	.LC164
+	.word	-894
 	.word	HynixReadRetrial
 	.word	.LANCHOR0+20
 	.word	MicronReadRetrial
@@ -21740,46 +22615,48 @@ rk_ftl_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	stmfd	sp!, {r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
 	mov	r0, #2048
 	bl	ftl_malloc
-	ldr	r4, .L2480
+	ldr	r4, .L2552
+	ldr	r6, .L2552+4
 	mov	r5, #0
-	add	r1, r4, #460
-	str	r5, [r4, #128]
-	str	r5, [r4, #460]
-	str	r0, [r4, #456]
-	add	r0, r4, #128
+	mov	r1, r6
+	str	r5, [r1, #472]!
+	str	r0, [r6, #468]
+	mov	r0, r4
+	str	r5, [r0, #132]!
 	bl	rknand_get_reg_addr
-	ldr	r3, [r4, #128]
+	ldr	r3, [r4, #132]
 	cmp	r3, r5
 	mvneq	r4, #0
-	beq	.L2477
+	beq	.L2549
 	bl	rk_nandc_irq_init
-	ldr	r0, [r4, #456]
 	mov	r1, r5
 	mov	r2, r5
 	mov	r3, #2048
+	ldr	r0, [r6, #468]
 	bl	FlashSramLoadStore
 	bl	rknand_flash_cs_init
-	ldr	r0, [r4, #128]
+	ldr	r0, [r4, #132]
 	bl	FlashInit
 	subs	r4, r0, #0
-	bne	.L2478
+	bne	.L2550
 	bl	FtlInit
-.L2478:
-	ldr	r0, .L2480+4
+.L2550:
+	ldr	r0, .L2552+8
 	mov	r1, r4
 	bl	printk
-.L2477:
+.L2549:
 	mov	r0, r4
-	ldmfd	sp!, {r3, r4, r5, pc}
-.L2481:
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2553:
 	.align	2
-.L2480:
+.L2552:
 	.word	.LANCHOR2
-	.word	.LC145
+	.word	.LANCHOR4
+	.word	.LC165
 	.fnend
 	.size	rk_ftl_init, .-rk_ftl_init
 	.align	2
@@ -21789,7 +22666,7 @@ FtlReInitForSDUpdata:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2507
+	ldr	r3, .L2579
 	stmfd	sp!, {r4, r5, lr}
 	.save {r4, r5, lr}
 	.pad #20
@@ -21797,22 +22674,22 @@ FtlReInitForSDUpdata:
 	ldrb	r4, [r3, #928]	@ zero_extendqisi2
 	cmp	r4, #0
 	movne	r0, #0
-	bne	.L2483
-	ldr	r5, .L2507+4
-	ldr	r0, [r5, #128]
+	bne	.L2555
+	ldr	r5, .L2579+4
+	ldr	r0, [r5, #132]
 	bl	FlashInit
 	cmp	r0, #0
 	movne	r0, r4
-	bne	.L2483
+	bne	.L2555
 	bl	FlashLoadFactorBbt
 	cmp	r0, #0
-	beq	.L2484
+	beq	.L2556
 	bl	FlashMakeFactorBbt
-.L2484:
-	ldr	r0, [r5, #132]
+.L2556:
+	ldr	r0, [r5, #136]
 	bl	FlashReadIdbDataRaw
 	cmp	r0, #0
-	beq	.L2485
+	beq	.L2557
 	mov	r1, #0
 	mov	r2, #16
 	mov	r0, sp
@@ -21821,73 +22698,73 @@ FtlReInitForSDUpdata:
 	mov	r3, #0
 	mov	r0, #1
 	mov	r2, r3
-.L2487:
+.L2559:
 	ands	ip, r1, r0, asl r2
 	add	r2, r2, #1
 	addne	r3, r3, #1
 	cmp	r2, #16
-	bne	.L2487
+	bne	.L2559
 	cmp	r3, #6
-	ldrls	r3, .L2507
-	bls	.L2503
+	ldrls	r3, .L2579
+	bls	.L2575
 	mov	r2, #0
 	mov	r0, #1
-.L2488:
+.L2560:
 	ands	ip, r1, r0, asl r2
 	add	r2, r2, #1
 	addne	r3, r3, #1
 	cmp	r2, #24
-	bne	.L2488
+	bne	.L2560
 	cmp	r3, #17
-	ldr	r3, .L2507
+	ldr	r3, .L2579
 	movhi	r2, #36
-.L2503:
+.L2575:
 	strb	r2, [r3, #853]
 	movw	r2, #3074
-	ldr	r3, .L2507
+	ldr	r3, .L2579
 	ldrb	r1, [r3, #853]	@ zero_extendqisi2
 	strh	r1, [r3, r2]	@ movhi
-.L2485:
-	ldr	r1, .L2507+8
+.L2557:
+	ldr	r1, .L2579+8
 	mov	r4, #1
-	ldr	r0, .L2507+12
+	ldr	r0, .L2579+12
 	bl	printk
-	ldr	r0, .L2507+16
+	ldr	r0, .L2579+16
 	bl	FtlConstantsInit
 	bl	FtlVariablesInit
-	ldr	r3, .L2507
-	ldr	r0, [r3, #3848]
+	ldr	r3, .L2579
+	ldr	r0, [r3, #3852]
 	uxth	r0, r0
 	bl	FtlFreeSysBlkQueueInit
-	b	.L2492
-.L2494:
+	b	.L2564
+.L2566:
 	add	r4, r4, #1
-.L2492:
+.L2564:
 	bl	FtlLoadBbt
 	cmp	r0, #0
-	bne	.L2505
-.L2493:
+	bne	.L2577
+.L2565:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	beq	.L2495
-.L2505:
+	beq	.L2567
+.L2577:
 	bl	FtlLowFormat
 	cmp	r4, #3
-	bls	.L2494
-	b	.L2506
-.L2495:
-	ldr	r3, .L2507+20
+	bls	.L2566
+	b	.L2578
+.L2567:
+	ldr	r3, .L2579+20
 	mov	r2, #1
 	str	r2, [r3, #2996]
-	b	.L2483
-.L2506:
+	b	.L2555
+.L2578:
 	mvn	r0, #0
-.L2483:
+.L2555:
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, pc}
-.L2508:
+.L2580:
 	.align	2
-.L2507:
+.L2579:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LC79
@@ -21904,15 +22781,15 @@ flash_boot_enter_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L2511
-	ldr	r2, [r3, #3784]
-	ldr	r3, .L2511+4
+	ldr	r3, .L2583
+	ldr	r2, [r3, #3776]
+	ldr	r3, .L2583+4
 	cmp	r2, r3
 	bxne	lr
 	b	flash_enter_slc_mode
-.L2512:
+.L2584:
 	.align	2
-.L2511:
+.L2583:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -21925,21 +22802,20 @@ flash_boot_exit_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L2515
-	ldr	r2, [r3, #3784]
-	ldr	r3, .L2515+4
+	ldr	r3, .L2587
+	ldr	r2, [r3, #3776]
+	ldr	r3, .L2587+4
 	cmp	r2, r3
 	bxne	lr
 	b	flash_exit_slc_mode
-.L2516:
+.L2588:
 	.align	2
-.L2515:
+.L2587:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
 	.size	flash_boot_exit_slc_mode, .-flash_boot_exit_slc_mode
 	.align	2
-	.global	IdBlockReadData
 	.type	IdBlockReadData, %function
 IdBlockReadData:
 	.fnstart
@@ -21947,162 +22823,171 @@ IdBlockReadData:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r4, r0
+	ldr	r5, .L2593
+	mov	fp, r1
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L2522
-	mov	r6, r0
-	str	r2, [sp, #20]
-	mov	sl, r1
-	ldr	r0, .L2522+4
-	mov	r1, r6
-	ldr	r2, [r4, #3624]
-	ldr	r3, [r4, #856]
-	ldr	r8, .L2522+8
-	ldrb	r5, [r2, #9]	@ zero_extendqisi2
-	mov	r2, sl
-	mul	r5, r5, r3
+	mov	r1, r4
+	mov	sl, r2
+	ldr	r0, .L2593+4
+	ldr	r3, [r5, #3624]
+	mov	r2, fp
+	mov	r9, r5
+	ldrb	r7, [r3, #9]	@ zero_extendqisi2
+	ldrh	r6, [r3, #10]
 	bl	printk
-	ldr	r3, [r4, #3624]
-	mov	r0, r6
-	ldrb	r9, [r3, #9]	@ zero_extendqisi2
-	uxth	r5, r5
-	mov	r1, r5
-	mov	r5, #0
+	mov	r0, r4
+	mul	r6, r6, r7
+	uxth	r6, r6
+	mov	r1, r6
+	mov	r6, #0
 	bl	__aeabi_uidivmod
-	mul	r2, r9, r1
-	rsb	ip, r1, r6
-	mov	r7, r1
-	str	ip, [sp, #12]
+	mov	r8, r1
+	rsb	r1, r1, r4
+	mul	r2, r7, r8
+	str	r1, [sp, #16]
 	ubfx	r2, r2, #2, #2
-	b	.L2518
-.L2520:
-	add	r1, r5, r7
-	rsb	r3, r2, #4
+	b	.L2590
+.L2592:
+	add	r1, r6, r8
+	ldrb	r0, [r5, #928]	@ zero_extendqisi2
 	ubfx	r1, r1, #2, #16
-	ldrb	r0, [r4, #928]	@ zero_extendqisi2
-	uxth	r3, r3
-	str	r3, [sp, #16]
-	add	r3, r4, r1, asl #1
+	rsb	ip, r2, #4
 	cmp	r0, #0
+	add	r3, r5, r1, asl #1
+	uxth	ip, ip
 	add	r3, r3, #3072
 	add	r3, r3, #4
 	ldrh	r3, [r3, #0]
-	beq	.L2519
-	ldr	r0, [r4, #3784]
-	ldr	ip, .L2522+12
-	cmp	r0, ip
+	beq	.L2591
+	ldr	r0, [r5, #3776]
+	ldr	lr, .L2593+8
+	cmp	r0, lr
 	moveq	r3, r1
-.L2519:
-	ldr	ip, [sp, #12]
-	ldrb	r0, [r8, #148]	@ zero_extendqisi2
-	add	r2, r2, ip
-	ldrb	ip, [r4, #3832]	@ zero_extendqisi2
-	ldr	fp, [r8, #132]
-	mla	r2, r9, r3, r2
-	ldr	r3, [r4, #3624]
+.L2591:
+	ldr	r1, [sp, #16]
+	add	r2, r2, r1
+	mla	r2, r7, r3, r2
+	ldr	r3, [r9, #3624]
 	ldrb	r1, [r3, #9]	@ zero_extendqisi2
-	str	ip, [sp, #0]
-	stmib	sp, {r1, r2}
+	ldrb	r3, [r9, #3836]	@ zero_extendqisi2
+	str	r3, [sp, #20]
+	ldr	r3, .L2593+12
+	ldrb	r0, [r3, #152]	@ zero_extendqisi2
+	str	ip, [sp, #4]
+	str	r1, [sp, #8]
+	str	r2, [sp, #12]
 	bl	FlashBchSel
 	mov	r0, #0
 	bl	flash_boot_enter_slc_mode
-	ldr	r2, [sp, #8]
-	ldr	r1, [sp, #4]
+	ldr	r2, [sp, #12]
+	ldr	r1, [sp, #8]
 	mov	r0, r2
 	bl	__aeabi_uidiv
-	mov	r2, fp
+	mov	r2, sl
 	mov	r1, r0
 	mov	r0, #0
 	mov	r3, r0
 	bl	FlashReadPage
 	mov	r0, #0
 	bl	flash_boot_exit_slc_mode
-	ldr	ip, [sp, #0]
-	mov	r0, ip
+	ldr	r0, [sp, #20]
 	bl	FlashBchSel
-	ldr	ip, [sp, #20]
-	mov	r2, #2048
-	ldr	r1, [r8, #132]
-	add	r0, ip, r5, asl #9
-	bl	memcpy
-	ldr	ip, [sp, #16]
+	ldr	ip, [sp, #4]
 	mov	r2, #0
-	add	r5, ip, r5
-	uxth	r5, r5
-.L2518:
-	cmp	r5, sl
-	bcc	.L2520
-	mov	r1, r6
-	mov	r2, sl
+	add	r6, ip, r6
+	add	sl, sl, ip, asl #9
+	uxth	r6, r6
+.L2590:
+	cmp	r6, fp
+	bcc	.L2592
+	mov	r1, r4
+	mov	r2, fp
 	mov	r3, #0
-	ldr	r0, .L2522+16
+	ldr	r0, .L2593+16
 	bl	printk
 	mov	r0, #0
 	add	sp, sp, #28
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2523:
+.L2594:
 	.align	2
-.L2522:
+.L2593:
 	.word	.LANCHOR0
-	.word	.LC146
-	.word	.LANCHOR2
+	.word	.LC166
 	.word	1446522928
-	.word	.LC147
+	.word	.LANCHOR2
+	.word	.LC167
 	.fnend
 	.size	IdBlockReadData, .-IdBlockReadData
+	.section	.text.unlikely
 	.align	2
-	.global	IDBlockWriteData
 	.type	IDBlockWriteData, %function
 IDBlockWriteData:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2603
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r5, r0
+	ldr	r3, [r3, #3624]
+	mov	fp, r1
 	.pad #92
 	sub	sp, sp, #92
-	ldr	r4, .L2531
-	mov	r5, r0
-	str	r2, [sp, #20]
-	mov	r8, r1
-	ldr	r0, .L2531+4
 	mov	r1, r5
-	ldr	r2, [r4, #3624]
-	mov	r7, r5
-	ldr	r3, [r4, #856]
-	ldr	fp, .L2531+8
-	ldrb	r6, [r2, #9]	@ zero_extendqisi2
-	mov	r2, r8
-	mul	r6, r6, r3
+	mov	sl, r2
+	ldr	r0, .L2603+4
+	ldrb	r6, [r3, #9]	@ zero_extendqisi2
+	mov	r2, fp
+	ldrh	r7, [r3, #10]
 	bl	printk
 	mov	r0, #0
 	bl	flash_boot_enter_slc_mode
-	movw	r3, #3068
-	ldrh	r1, [r4, r3]
+	mov	r1, r6
 	mov	r0, r5
 	bl	__aeabi_uidiv
-	uxth	r6, r6
+	mul	r7, r7, r6
+	uxth	r7, r7
 	mov	r1, r0
 	mov	r0, #0
 	mov	r2, r0
 	bl	FlashEraseBlock
+	cmp	fp, r7
+	movls	r8, #1
+	bls	.L2596
+	mov	r0, #0
+	add	r1, r7, r5
+	mov	r2, r0
+	mov	r8, #2
+	bl	FlashEraseBlock
+.L2596:
+	ldr	r4, .L2603
 	mov	r0, #0
 	bl	flash_boot_exit_slc_mode
 	ldr	r3, [r4, #3624]
-	mov	r1, r6
+	mov	r9, r4
+	ldrh	r0, [r3, #10]
+	ldrb	r1, [r3, #12]	@ zero_extendqisi2
+	mov	r0, r0, asl #2
+	mul	r0, r8, r0
+	bl	__aeabi_idiv
+	mov	r1, r7
+	mov	r8, #0
+	str	r0, [sp, #16]
 	mov	r0, r5
-	mov	r6, #0
-	ldrb	sl, [r3, #9]	@ zero_extendqisi2
 	bl	__aeabi_uidivmod
-	mov	r9, r1
+	str	r5, [sp, #20]
+	mov	ip, r1
 	rsb	r1, r1, r5
-	str	r1, [sp, #16]
-	b	.L2525
-.L2529:
-	add	r3, r6, r9
+	mov	r7, ip
+	str	r1, [sp, #12]
+	b	.L2597
+.L2601:
+	add	r3, r8, r7
 	ubfx	r3, r3, #2, #16
 	cmp	r3, #0
-	beq	.L2526
+	beq	.L2598
 	add	r1, r3, #1
 	ldrb	r0, [r4, #928]	@ zero_extendqisi2
 	add	r2, r4, r1, asl #1
@@ -22110,49 +22995,49 @@ IDBlockWriteData:
 	add	r2, r2, #3072
 	add	r2, r2, #4
 	ldrh	r2, [r2, #0]
-	beq	.L2527
-	ldr	r0, [r4, #3784]
-	cmp	r0, fp
-	uxtheq	r2, r1
-.L2527:
-	sub	r2, r2, #1
+	beq	.L2599
+	ldr	r0, [r4, #3776]
+	ldr	ip, .L2603+8
+	cmp	r0, ip
+	moveq	r2, r1
+.L2599:
+	sub	r2, r2, #-1073741823
 	mov	r2, r2, asl #2
 	str	r2, [sp, #24]
-	mov	r2, #0
+.L2598:
+	movw	r2, #61424
 	str	r2, [sp, #28]
-.L2526:
 	add	r2, r4, r3, asl #1
 	add	r2, r2, #3072
 	ldrh	r5, [r2, #4]
 	ldrb	r2, [r4, #928]	@ zero_extendqisi2
 	cmp	r2, #0
-	beq	.L2528
-	ldr	r2, [r4, #3784]
-	cmp	r2, fp
+	beq	.L2600
+	ldr	r2, [r4, #3776]
+	ldr	r1, .L2603+8
+	cmp	r2, r1
 	moveq	r5, r3
-.L2528:
-	ldr	r2, [sp, #16]
-	ldr	r1, [sp, #20]
-	ldrb	ip, [r4, #3832]	@ zero_extendqisi2
-	mla	r3, sl, r5, r2
-	add	r2, r1, r6, asl #9
-	ldr	r1, .L2531+12
-	add	r6, r6, #4
-	uxth	r6, r6
-	ldrb	r0, [r1, #148]	@ zero_extendqisi2
+.L2600:
+	ldr	ip, [sp, #12]
+	add	r8, r8, #4
+	ldr	r2, .L2603+12
+	uxth	r8, r8
+	mla	r3, r6, r5, ip
+	ldrb	ip, [r9, #3836]	@ zero_extendqisi2
+	ldrb	r0, [r2, #152]	@ zero_extendqisi2
 	str	ip, [sp, #4]
-	str	r2, [sp, #8]
-	str	r3, [sp, #12]
+	str	r3, [sp, #8]
 	bl	FlashBchSel
 	mov	r0, #0
 	bl	flash_boot_enter_slc_mode
-	ldr	r3, [sp, #12]
-	ldr	r1, [r4, #3624]
+	ldr	r2, [r9, #3624]
+	ldr	r3, [sp, #8]
+	ldrb	r1, [r2, #9]	@ zero_extendqisi2
 	mov	r0, r3
-	ldrb	r1, [r1, #9]	@ zero_extendqisi2
 	bl	__aeabi_uidiv
-	ldr	r2, [sp, #8]
+	mov	r2, sl
 	add	r3, sp, #24
+	add	sl, sl, #2048
 	mov	r1, r0
 	mov	r0, #0
 	bl	FlashProgPage
@@ -22161,198 +23046,269 @@ IDBlockWriteData:
 	ldr	ip, [sp, #4]
 	mov	r0, ip
 	bl	FlashBchSel
-	ldr	r0, [sp, #16]
-	mov	r1, sl
+	ldr	r0, [sp, #12]
+	mov	r1, r6
 	bl	__aeabi_uidiv
 	add	r2, r5, #1
 	uxth	r2, r2
 	mov	r1, r0
 	mov	r0, #0
 	bl	FlashPageProgMsbFFData
-.L2525:
-	cmp	r6, r8
-	bcc	.L2529
-	mov	r1, r7
-	mov	r2, r8
+.L2597:
+	ldr	ip, [sp, #16]
+	cmp	r8, ip
+	bcc	.L2601
+	ldr	r5, [sp, #20]
+	mov	r2, fp
 	mov	r3, #0
-	ldr	r0, .L2531+16
+	ldr	r0, .L2603+16
+	mov	r1, r5
 	bl	printk
-	mov	r5, r7
 	mov	r0, #0
 	add	sp, sp, #92
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2532:
+.L2604:
 	.align	2
-.L2531:
+.L2603:
 	.word	.LANCHOR0
-	.word	.LC148
+	.word	.LC168
 	.word	1446522928
 	.word	.LANCHOR2
-	.word	.LC149
+	.word	.LC169
 	.fnend
 	.size	IDBlockWriteData, .-IDBlockWriteData
+	.text
 	.align	2
 	.global	write_idblock
 	.type	write_idblock, %function
 write_idblock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 8
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2546
+	ldr	r3, .L2629
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
-	mov	r7, r2
-	ldr	r2, [r3, #856]
-	.pad #20
-	sub	sp, sp, #20
+	mov	r5, r0
 	ldr	r3, [r3, #3624]
-	mov	r6, r0
+	.pad #36
+	sub	sp, sp, #36
 	mov	r0, #256000
-	mov	r4, r1
-	ldrb	r3, [r3, #9]	@ zero_extendqisi2
-	mul	r3, r3, r2
-	uxth	r3, r3
-	str	r3, [sp, #8]
+	mov	r6, r1
+	mov	r7, r2
+	ldrb	r4, [r3, #9]	@ zero_extendqisi2
+	ldrh	sl, [r3, #10]
 	bl	ftl_malloc
-	subs	r5, r0, #0
-	mvneq	r0, #0
-	beq	.L2534
-	add	sl, r6, #508
-	add	sl, sl, #3
-	mov	sl, sl, lsr #9
-	cmp	sl, #255
-	bhi	.L2535
-	add	r0, r4, sl, asl #9
-	mov	r1, r4
-	rsb	r2, sl, #256
-	bl	memcpy
-.L2535:
-	ldr	r8, .L2546
-	mov	r3, #5
-	ldr	r0, .L2546+4
+	subs	r9, r0, #0
+	beq	.L2623
+	add	r5, r5, #508
+	add	r5, r5, #3
+	mov	r5, r5, lsr #9
+	cmp	r5, #8
+	movls	r5, #8
+	bls	.L2607
+	cmp	r5, #500
+	bhi	.L2623
+.L2607:
+	mul	sl, sl, r4
+	uxth	sl, sl
+	sub	r0, sl, #1
+	add	r0, r0, r5
+	mov	r1, sl
+	bl	__aeabi_uidiv
+	mov	r3, #0
+	movw	r2, #63999
+	movw	ip, #4097
+	str	r0, [sp, #20]
+	add	r0, r6, #254976
+	add	r0, r0, #1020
+.L2612:
+	ldr	r1, [r0], #-4
+	cmp	r1, #0
+	bne	.L2608
+	ldr	r1, [r6, r3, asl #2]
+	add	r3, r3, #1
+	cmp	r3, ip
+	sub	r2, r2, #1
+	movcs	r3, #0
+	cmp	r2, #4096
+	str	r1, [r0, #4]
+	bne	.L2612
+	b	.L2611
+.L2608:
+	ldr	r0, .L2629+4
+	bl	printk
+.L2611:
+	ldr	r4, .L2629
 	mov	r1, r7
+	mov	r3, #5
+	ldr	r0, .L2629+8
 	mov	r2, #4
-	add	sl, sl, #128
+	mov	r8, r5
 	bl	rknand_print_hex
-	ldrb	r2, [r8, #853]	@ zero_extendqisi2
-	ldr	r1, [r4, #512]
-	cmp	sl, #256
-	movcs	sl, #256
-	ldr	r0, .L2546+8
-	mov	fp, #0
+	ldrb	r2, [r4, #853]	@ zero_extendqisi2
+	ldr	r1, [r6, #512]
+	ldr	r0, .L2629+12
 	bl	printk
-	ldrb	r3, [r8, #853]	@ zero_extendqisi2
-	ldr	r2, [r4, #512]
-	mov	r1, sl
-	ldr	r0, .L2546+12
-	mov	r9, fp
-	cmp	r2, r3
-	mov	r8, r4
-	mov	r2, r6
-	strhi	r3, [r4, #512]
-	mov	r6, r7
+	ldr	r2, .L2629+16
+	movw	r3, #3074
+	mov	r1, r5
+	ldrh	r3, [r4, r3]
+	ldr	r2, [r2, #156]
+	ldr	r0, .L2629+20
+	str	r2, [sp, #0]
+	mov	r2, r5
 	bl	printk
-	mov	r1, sl, asl #7
-	str	r1, [sp, #12]
-.L2541:
-	ldr	r1, .L2546
-	movw	r2, #3074
-	ldr	r3, [r6], #4
-	ldrh	r2, [r1, r2]
+	ldrb	r3, [r4, #853]	@ zero_extendqisi2
+	ldr	r2, [r6, #512]
+	mov	r4, r7
+	mov	r7, r6
+	mov	r1, r5, asl #7
+	cmp	r2, r3
+	str	r1, [sp, #24]
+	mov	r2, #0
+	strhi	r3, [r6, #512]
+	str	r2, [sp, #16]
+	str	r2, [sp, #12]
+.L2620:
+	ldr	r1, .L2629
+	ldr	r3, [r4], #4
+	ldrb	r2, [r1, #853]	@ zero_extendqisi2
 	cmp	r3, r2
-	bcs	.L2537
-	ldr	r2, .L2546+16
-	ldr	r2, [r2, #152]
+	bcs	.L2614
+	ldr	r1, .L2629+16
+	ldr	r2, [r1, #156]
 	cmp	r3, r2
-	bcc	.L2537
-	mov	r0, r5
+	bcc	.L2614
+	ldr	r2, [sp, #20]
+	ldr	r1, [sp, #12]
+	cmp	r2, #1
+	movls	r2, #0
+	movhi	r2, #1
+	str	r2, [sp, #28]
+	ldr	r2, [sp, #20]
+	cmp	r1, #0
+	cmpne	r2, #1
+	bls	.L2615
+	ldr	r2, [r4, #-8]
+	add	r2, r2, #1
+	cmp	r3, r2
+	beq	.L2614
+.L2615:
+	mov	r0, r9
 	mov	r1, #512
 	bl	__memzero
-	ldr	r2, [sp, #8]
-	ldr	r0, [r6, #-4]
-	mov	r1, sl
-	mul	r0, r0, r2
-	mov	r2, r8
+	ldr	r0, [r4, #-4]
+	mov	r1, r8
+	mov	r2, r7
+	mov	r6, #0
+	mul	r0, r0, sl
 	bl	IDBlockWriteData
-	ldr	r3, [sp, #8]
-	ldr	r0, [r6, #-4]
-	mov	r1, sl
-	mov	r2, r5
-	mul	r0, r0, r3
+	ldr	r0, [r4, #-4]
+	mov	r2, r9
+	mov	r1, r8
+	mul	r0, r0, sl
 	bl	IdBlockReadData
-	mov	r3, #0
-	mov	r7, r3
-.L2540:
-	ldr	r1, [r5, r3]
-	add	r3, r3, #4
-	add	r2, r8, r3
-	ldr	r2, [r2, #-4]
-	cmp	r1, r2
-	beq	.L2538
-	bic	r4, r7, #255
-	stmia	sp, {r1, r2}
+	mov	r2, r9
 	mov	r3, r7
-	mov	r1, r9
-	ldr	r2, [r6, #-4]
-	mov	r4, r4, asl #2
-	ldr	r0, .L2546+20
+.L2619:
+	mov	fp, r2
+	mov	r5, r3
+	ldr	r0, [fp, #0]
+	add	r2, r2, #4
+	ldr	r1, [r5, #0]
+	add	r3, r3, #4
+	cmp	r0, r1
+	beq	.L2616
+	mov	r0, r9
+	mov	r1, #512
+	bl	__memzero
+	ldr	r3, [fp, #0]
+	ldr	r1, [sp, #12]
+	ldr	r0, .L2629+24
+	str	r3, [sp, #0]
+	ldr	r3, [r5, #0]
+	bic	r5, r6, #255
+	mov	r5, r5, asl #2
+	str	r3, [sp, #4]
+	mov	r3, r6
+	ldr	r2, [r4, #-4]
 	bl	printk
-	ldr	r0, .L2546+24
-	add	r1, r8, r4
+	ldr	r0, .L2629+28
+	add	r1, r7, r5
 	mov	r2, #4
 	mov	r3, #256
 	bl	rknand_print_hex
 	mov	r3, #256
+	add	r1, r9, r5
 	mov	r2, #4
-	ldr	r0, .L2546+28
-	add	r1, r5, r4
+	ldr	r0, .L2629+32
 	bl	rknand_print_hex
-	mov	r0, r5
-	mov	r1, #512
-	bl	__memzero
-	ldr	r1, [sp, #8]
-	ldr	r0, [r6, #-4]
-	mov	r2, r5
-	mul	r0, r0, r1
-	mov	r1, #4
-	bl	IDBlockWriteData
-	ldr	r0, .L2546+32
+	mov	r0, #0
+	bl	flash_boot_enter_slc_mode
+	ldr	r1, [r4, #-4]
+	mov	r0, #0
+	mov	r2, r0
+	mul	r1, r1, sl
+	bl	FlashEraseBlock
+	ldr	r3, [sp, #28]
+	cmp	r3, #0
+	beq	.L2617
+	ldr	r1, [r4, #-4]
+	mov	r0, #0
+	mov	r2, r0
+	add	r1, r1, #1
+	mul	r1, sl, r1
+	bl	FlashEraseBlock
+.L2617:
+	mov	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	r1, [r4, #-4]
+	ldr	r0, .L2629+36
 	bl	printk
-	ldr	r2, [sp, #12]
-	cmp	r7, r2
-	bcc	.L2537
-	b	.L2539
-.L2538:
-	ldr	r1, [sp, #12]
-	add	r7, r7, #1
-	cmp	r7, r1
-	bne	.L2540
-.L2539:
-	add	fp, fp, #1
-.L2537:
-	add	r9, r9, #1
-	cmp	r9, #5
-	bne	.L2541
-	mov	r0, r5
+	ldr	r1, [sp, #24]
+	cmp	r6, r1
+	bcc	.L2614
+	b	.L2618
+.L2616:
+	ldr	r1, [sp, #24]
+	add	r6, r6, #1
+	cmp	r6, r1
+	bne	.L2619
+.L2618:
+	ldr	r2, [sp, #16]
+	add	r2, r2, #1
+	str	r2, [sp, #16]
+.L2614:
+	ldr	r3, [sp, #12]
+	add	r3, r3, #1
+	str	r3, [sp, #12]
+	cmp	r3, #5
+	bne	.L2620
+	mov	r0, r9
 	bl	ftl_free
-	cmp	fp, #0
+	ldr	r1, [sp, #16]
+	cmp	r1, #0
 	mvneq	r0, #0
 	movne	r0, #0
-.L2534:
-	add	sp, sp, #20
+	b	.L2606
+.L2623:
+	mvn	r0, #0
+.L2606:
+	add	sp, sp, #36
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2547:
+.L2630:
 	.align	2
-.L2546:
+.L2629:
 	.word	.LANCHOR0
-	.word	.LC150
-	.word	.LC151
-	.word	.LC152
+	.word	.LC170
+	.word	.LC171
+	.word	.LC172
 	.word	.LANCHOR2
-	.word	.LC153
-	.word	.LC154
-	.word	.LC155
-	.word	.LC156
+	.word	.LC173
+	.word	.LC174
+	.word	.LC175
+	.word	.LC176
+	.word	.LC177
 	.fnend
 	.size	write_idblock, .-write_idblock
 	.align	2
@@ -22367,22 +23323,22 @@ CRC_32:
 	stmfd	sp!, {r4, lr}
 	.save {r4, lr}
 	mov	r2, r0
-	ldr	ip, .L2551
-	b	.L2549
-.L2550:
+	ldr	ip, .L2634
+	b	.L2632
+.L2633:
 	ldrb	r4, [r3, r2]	@ zero_extendqisi2
 	add	r2, r2, #1
 	eor	r4, r4, r0, lsr #24
 	add	r4, ip, r4, asl #2
 	ldr	r4, [r4, #3068]
 	eor	r0, r4, r0, asl #8
-.L2549:
+.L2632:
 	cmp	r2, r1
-	bne	.L2550
+	bne	.L2633
 	ldmfd	sp!, {r4, pc}
-.L2552:
+.L2635:
 	.align	2
-.L2551:
+.L2634:
 	.word	.LANCHOR1
 	.fnend
 	.size	CRC_32, .-CRC_32
@@ -22393,7 +23349,7 @@ rknand_sys_storage_ioctl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 528
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2668
+	ldr	r3, .L2752
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	cmp	r1, r3
@@ -22401,102 +23357,102 @@ rknand_sys_storage_ioctl:
 	sub	sp, sp, #528
 	mov	r5, r1
 	mov	r4, r2
-	beq	.L2562
-	bhi	.L2571
-	ldr	r3, .L2668+4
+	beq	.L2645
+	bhi	.L2654
+	ldr	r3, .L2752+4
 	cmp	r1, r3
-	beq	.L2559
-	bhi	.L2572
+	beq	.L2642
+	bhi	.L2655
 	sub	r3, r3, #125
 	cmp	r1, r3
-	beq	.L2556
-	bhi	.L2573
+	beq	.L2639
+	bhi	.L2656
 	sub	r3, r3, #237
 	cmp	r1, r3
-	bne	.L2614
-	b	.L2664
-.L2573:
-	ldr	r3, .L2668+8
+	bne	.L2698
+	b	.L2748
+.L2656:
+	ldr	r3, .L2752+8
 	cmp	r1, r3
-	beq	.L2557
+	beq	.L2640
 	add	r3, r3, #1
 	cmp	r1, r3
-	bne	.L2614
-	b	.L2665
-.L2572:
-	ldr	r3, .L2668+12
+	bne	.L2698
+	b	.L2749
+.L2655:
+	ldr	r3, .L2752+12
 	cmp	r1, r3
-	beq	.L2561
-	bhi	.L2574
-	ldr	r3, .L2668+16
+	beq	.L2644
+	bhi	.L2657
+	ldr	r3, .L2752+16
 	cmp	r1, r3
-	bne	.L2614
-	b	.L2666
-.L2574:
-	ldr	r3, .L2668+20
+	bne	.L2698
+	b	.L2750
+.L2657:
+	ldr	r3, .L2752+20
 	cmp	r1, r3
-	beq	.L2561
+	beq	.L2644
 	add	r3, r3, #10
 	cmp	r1, r3
-	bne	.L2614
-	b	.L2561
-.L2571:
-	ldr	r3, .L2668+24
+	bne	.L2698
+	b	.L2644
+.L2654:
+	ldr	r3, .L2752+24
 	cmp	r1, r3
-	beq	.L2567
-	bhi	.L2575
+	beq	.L2650
+	bhi	.L2658
 	sub	r3, r3, #78
 	cmp	r1, r3
-	beq	.L2564
-	bcc	.L2563
+	beq	.L2647
+	bcc	.L2646
 	add	r3, r3, #21
 	cmp	r1, r3
-	beq	.L2565
+	beq	.L2648
 	add	r3, r3, #56
 	cmp	r1, r3
-	bne	.L2614
-	b	.L2667
-.L2575:
-	ldr	r3, .L2668+28
+	bne	.L2698
+	b	.L2751
+.L2658:
+	ldr	r3, .L2752+28
 	cmp	r1, r3
-	beq	.L2570
-	bhi	.L2576
+	beq	.L2653
+	bhi	.L2659
 	sub	r3, r3, #956
 	sub	r3, r3, #1
 	cmp	r1, r3
-	beq	.L2568
+	beq	.L2651
 	add	r3, r3, #956
 	cmp	r1, r3
-	bne	.L2614
-	b	.L2569
-.L2576:
-	ldr	r3, .L2668+32
+	bne	.L2698
+	b	.L2652
+.L2659:
+	ldr	r3, .L2752+32
 	cmp	r1, r3
-	beq	.L2569
+	beq	.L2652
 	add	r3, r3, #1
 	cmp	r1, r3
-	bne	.L2614
-	b	.L2570
-.L2563:
-	ldr	r0, .L2668+36
+	bne	.L2698
+	b	.L2653
+.L2646:
+	ldr	r0, .L2752+36
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2621
+	beq	.L2705
 	mov	r1, r4
 	mov	r2, #512
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2663
-.L2577:
-	ldr	r0, .L2668+40
+	bne	.L2747
+.L2660:
+	ldr	r0, .L2752+40
 	ldmia	r5, {r1, r2}
 	bl	printk
 	ldr	r3, [r5, #4]
 	cmp	r3, #8
 	str	r3, [sp, #4]
-	bhi	.L2585
+	bhi	.L2669
 	bl	rknand_device_lock
 	ldr	r1, [sp, #4]
 	mov	r2, r5
@@ -22509,134 +23465,137 @@ rknand_sys_storage_ioctl:
 	mov	r2, r2, asl #9
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L2649
-	ldr	r0, .L2668+44
-.L2662:
+	beq	.L2733
+	ldr	r0, .L2752+44
+.L2746:
 	bl	printk
-	b	.L2585
-.L2564:
-	ldr	r0, .L2668+48
+	b	.L2669
+.L2647:
+	ldr	r0, .L2752+48
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2621
+	beq	.L2705
 	mov	r1, r4
 	mov	r2, #4096
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2663
-.L2581:
-	ldr	r4, .L2668+52
-	ldr	r0, .L2668+56
+	bne	.L2747
+.L2664:
+	ldr	r4, .L2752+52
+	ldr	r0, .L2752+56
 	ldmia	r5, {r1, r2}
 	bl	printk
-	ldr	r3, [r4, #464]
+	ldr	r3, [r4, #476]
 	cmp	r3, #0
-	bne	.L2582
+	bne	.L2665
 	mov	r0, #260096
 	bl	ftl_malloc
 	cmp	r0, #0
-	str	r0, [r4, #464]
-	beq	.L2585
-.L2582:
+	str	r0, [r4, #476]
+	beq	.L2669
+.L2666:
+	mov	r1, #260096
+	bl	__memzero
+.L2665:
 	ldr	r2, [r5, #4]
 	movw	r3, #4088
 	cmp	r2, r3
-	bhi	.L2585
+	bhi	.L2669
 	ldr	r3, [r5, #0]
 	cmp	r3, #251904
-	bhi	.L2585
-	ldr	r1, .L2668+52
-	ldr	r0, [r1, #464]
+	bhi	.L2669
+	ldr	r1, .L2752+52
+	ldr	r0, [r1, #476]
 	add	r1, r5, #8
 	add	r0, r0, r3
 	bl	memcpy
-.L2649:
+.L2733:
 	mov	r0, r5
 	bl	ftl_free
-.L2650:
+.L2734:
 	mov	r4, #0
-	b	.L2580
-.L2667:
-	ldr	r0, .L2668+60
+	b	.L2663
+.L2751:
+	ldr	r0, .L2752+60
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2621
+	beq	.L2705
 	mov	r1, r4
 	mov	r2, #28
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	beq	.L2584
-.L2663:
-	ldr	r0, .L2668+64
-	b	.L2662
-.L2584:
+	beq	.L2668
+.L2747:
+	ldr	r0, .L2752+64
+	b	.L2746
+.L2668:
 	ldmia	r5, {r1, r2}
-	ldr	r0, .L2668+68
+	ldr	r0, .L2752+68
 	bl	printk
 	ldr	r1, [r5, #0]
 	cmp	r1, #256000
-	bhi	.L2585
-	ldr	r4, .L2668+52
-	ldr	r0, [r4, #464]
+	bhi	.L2669
+	ldr	r4, .L2752+52
+	ldr	r0, [r4, #476]
 	cmp	r0, #0
-	beq	.L2585
-.L2586:
+	beq	.L2669
+.L2670:
 	bl	CRC_32
 	ldr	r3, [r5, #4]
 	cmp	r3, r0
-	beq	.L2587
+	beq	.L2671
 	mov	r0, r5
 	bl	ftl_free
-	b	.L2627
-.L2587:
+	b	.L2711
+.L2671:
 	bl	rknand_device_lock
-	ldr	r1, [r4, #464]
+	ldr	r1, [r4, #476]
 	add	r2, r5, #8
 	ldr	r0, [r5, #0]
 	bl	write_idblock
 	mov	r6, #0
 	bl	rknand_device_unlock
-	ldr	r0, [r4, #464]
+	ldr	r0, [r4, #476]
 	bl	ftl_free
-	str	r6, [r4, #464]
+	str	r6, [r4, #476]
 	mov	r0, r5
 	mov	r4, r6
 	bl	ftl_free
-	b	.L2580
-.L2585:
+	b	.L2663
+.L2669:
 	mov	r0, r5
-	b	.L2653
-.L2565:
-	ldr	r0, .L2668+72
+	b	.L2737
+.L2648:
+	ldr	r0, .L2752+72
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2621
+	beq	.L2705
 	bl	ftl_read_flash_info
 	mov	r0, r4
 	mov	r1, r5
 	mov	r2, #11
-	b	.L2658
-.L2562:
-	ldr	r0, .L2668+76
+	b	.L2742
+.L2645:
+	ldr	r0, .L2752+76
 	bl	printk
 	bl	nand_blk_add_whole_disk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2621
+	beq	.L2705
 	bl	rknand_device_lock
 	mov	r1, #0
 	mov	r2, #64
 	mov	r0, r5
 	bl	FlashReadFacBbtData
 	bl	rknand_device_unlock
-	ldr	r0, .L2668+80
+	ldr	r0, .L2752+80
 	mov	r1, r5
 	mov	r2, #4
 	mov	r3, #8
@@ -22644,25 +23603,25 @@ rknand_sys_storage_ioctl:
 	mov	r0, r4
 	mov	r1, r5
 	mov	r2, #64
-	b	.L2658
-.L2567:
-	ldr	r0, .L2668+84
+	b	.L2742
+.L2650:
+	ldr	r0, .L2752+84
 	bl	printk
-	ldr	r3, .L2668+52
+	ldr	r3, .L2752+52
 	add	r1, sp, #528
 	mov	r0, r4
 	mov	r2, #4
-	ldr	r3, [r3, #468]
+	ldr	r3, [r3, #480]
 	ldr	r3, [r3, #20]
 	str	r3, [r1, #-524]!
-	b	.L2654
-.L2568:
-	ldr	r0, .L2668+88
+	b	.L2738
+.L2651:
+	ldr	r0, .L2752+88
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	subs	r5, r0, #0
-	beq	.L2621
+	beq	.L2705
 	bl	rknand_device_lock
 	mov	r1, #264
 	mov	r2, #2
@@ -22673,259 +23632,259 @@ rknand_sys_storage_ioctl:
 	mov	r0, r4
 	mov	r1, r5
 	mov	r2, #1024
-.L2658:
+.L2742:
 	bl	rk_copy_to_user
 	subs	r4, r0, #0
 	mov	r0, r5
-	beq	.L2590
-.L2653:
+	beq	.L2674
+.L2737:
 	bl	ftl_free
-	b	.L2644
-.L2590:
+	b	.L2728
+.L2674:
 	bl	ftl_free
-	b	.L2580
-.L2556:
-	ldr	r0, .L2668+92
+	b	.L2663
+.L2639:
+	ldr	r0, .L2752+92
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	subs	r5, r0, #0
-	bne	.L2655
-.L2591:
+	bne	.L2739
+.L2675:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+96
+	ldr	r3, .L2752+96
 	cmp	r2, r3
-	bne	.L2646
+	bne	.L2730
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2646
-	ldr	r6, .L2668+52
+	bhi	.L2730
+	ldr	r6, .L2752+52
 	mov	r2, #512
 	add	r0, sp, #8
-	ldr	r1, [r6, #468]
+	ldr	r1, [r6, #480]
 	bl	memcpy
-	ldr	r2, [r6, #472]
-	ldr	r3, .L2668+100
+	ldr	r2, [r6, #484]
+	ldr	r3, .L2752+100
 	cmp	r2, r3
-	beq	.L2592
+	beq	.L2676
 	add	r0, sp, #72
 	mov	r1, #128
 	str	r5, [sp, #16]
 	str	r5, [sp, #20]
 	bl	__memzero
-.L2592:
+.L2676:
 	add	r0, sp, #264
 	mov	r1, #256
 	mov	r3, #0
 	str	r3, [sp, #24]
 	bl	__memzero
-	b	.L2661
-.L2557:
-	ldr	r0, .L2668+104
+	b	.L2745
+.L2640:
+	ldr	r0, .L2752+104
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2655
-.L2593:
+	bne	.L2739
+.L2677:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+96
+	ldr	r3, .L2752+96
 	cmp	r2, r3
-	bne	.L2646
+	bne	.L2730
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2646
-	ldr	r4, .L2668+52
-	ldr	r3, .L2668+100
-	ldr	r2, [r4, #472]
+	bhi	.L2730
+	ldr	r4, .L2752+52
+	ldr	r3, .L2752+100
+	ldr	r2, [r4, #484]
 	cmp	r2, r3
-	bne	.L2627
+	bne	.L2711
 	ldr	r3, [sp, #20]
 	sub	r2, r3, #1
 	cmp	r2, #127
 	mvnhi	r4, #2
-	bhi	.L2554
-	ldr	r0, [r4, #468]
+	bhi	.L2637
+	ldr	r0, [r4, #480]
 	add	r1, sp, #72
 	str	r3, [r0, #12]
 	add	r0, r0, #64
 	ldr	r2, [sp, #20]
 	bl	memcpy
 	mov	r0, #1
-	ldr	r1, [r4, #468]
-	b	.L2651
-.L2666:
-	ldr	r0, .L2668+108
+	ldr	r1, [r4, #480]
+	b	.L2735
+.L2750:
+	ldr	r0, .L2752+108
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2655
-.L2594:
+	bne	.L2739
+.L2678:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+112
+	ldr	r3, .L2752+112
 	cmp	r2, r3
-	bne	.L2646
+	bne	.L2730
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2646
-	ldr	r5, .L2668+52
-	ldr	r4, [r5, #476]
+	bhi	.L2730
+	ldr	r5, .L2752+52
+	ldr	r4, [r5, #488]
 	cmp	r4, #0
-	beq	.L2554
-	ldr	r3, [r5, #480]
-	ldr	r2, .L2668+116
+	beq	.L2637
+	ldr	r3, [r5, #492]
+	ldr	r2, .L2752+116
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
-	beq	.L2595
+	beq	.L2679
 	str	r2, [r3, #0]
 	mov	r2, #504
-	ldr	r3, [r5, #480]
+	ldr	r3, [r5, #492]
 	str	r2, [r3, #4]
 	mov	r2, #0
 	str	r2, [r3, #8]
 	str	r2, [r3, #12]
-.L2595:
-	ldr	r1, [r5, #480]
+.L2679:
+	ldr	r1, [r5, #492]
 	mov	r4, #0
 	mov	r0, r4
 	str	r4, [r1, #16]
 	bl	StorageSysDataStore
-	ldr	r3, [r5, #468]
-	ldr	r2, .L2668+96
-	ldr	r5, .L2668+52
+	ldr	r3, [r5, #480]
+	ldr	r2, .L2752+96
+	ldr	r5, .L2752+52
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
 	strne	r2, [r3, #0]
-	ldr	r0, [r5, #468]
+	ldr	r0, [r5, #480]
 	mov	r1, #128
-	ldrne	r3, .L2668+52
+	ldrne	r3, .L2752+52
 	movne	r2, #504
-	ldrne	r3, [r3, #468]
+	ldrne	r3, [r3, #480]
 	stmneib	r3, {r2, r4}
 	mov	r4, #0
 	str	r4, [r0, #12]
 	add	r0, r0, #64
 	bl	__memzero
 	mov	r0, #1
-	ldr	r1, [r5, #468]
+	ldr	r1, [r5, #480]
 	bl	StorageSysDataStore
-	str	r4, [r5, #476]
-	str	r4, [r5, #472]
-	b	.L2580
-.L2559:
-	ldr	r0, .L2668+120
+	str	r4, [r5, #488]
+	str	r4, [r5, #484]
+	b	.L2663
+.L2642:
+	ldr	r0, .L2752+120
 	bl	printk
 	mov	r1, r4
 	add	r0, sp, #8
 	mov	r2, #520
 	bl	rk_copy_from_user
 	subs	r4, r0, #0
-	bne	.L2655
-.L2597:
+	bne	.L2739
+.L2681:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+124
+	ldr	r3, .L2752+124
 	cmp	r2, r3
-	bne	.L2646
+	bne	.L2730
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L2646
-	ldr	r5, .L2668+52
-	ldr	r3, [r5, #476]
+	bhi	.L2730
+	ldr	r5, .L2752+52
+	ldr	r3, [r5, #488]
 	cmp	r3, #1
-	beq	.L2554
-	ldr	r3, [r5, #480]
+	beq	.L2637
+	ldr	r3, [r5, #492]
 	mov	r0, #0
-	ldr	r2, .L2668+116
+	ldr	r2, .L2752+116
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
 	strne	r2, [r3, #0]
-	ldr	r1, [r5, #480]
-	ldrne	r3, [r5, #480]
+	ldr	r1, [r5, #492]
+	ldrne	r3, [r5, #492]
 	movne	r2, #504
 	strne	r4, [r3, #12]
 	stmneib	r3, {r2, r4}
 	mov	r3, #1
 	str	r3, [r1, #16]
 	bl	StorageSysDataStore
-	ldr	r3, [r5, #468]
-	ldr	r2, .L2668+96
+	ldr	r3, [r5, #480]
+	ldr	r2, .L2752+96
 	ldr	r1, [r3, #0]
 	cmp	r1, r2
-	beq	.L2599
+	beq	.L2683
 	str	r2, [r3, #0]
 	mov	r1, #504
-	ldr	r3, .L2668+52
+	ldr	r3, .L2752+52
 	mov	r2, #0
-	ldr	r3, [r3, #468]
+	ldr	r3, [r3, #480]
 	stmib	r3, {r1, r2}
-.L2599:
-	ldr	r5, .L2668+52
+.L2683:
+	ldr	r5, .L2752+52
 	mov	r1, #128
 	mov	r4, #0
-	ldr	r0, [r5, #468]
+	ldr	r0, [r5, #480]
 	str	r4, [r0, #12]
 	add	r0, r0, #64
 	bl	__memzero
 	mov	r0, #1
-	ldr	r1, [r5, #468]
+	ldr	r1, [r5, #480]
 	bl	StorageSysDataStore
 	mov	r3, #1
-	str	r3, [r5, #476]
-	b	.L2580
-.L2665:
-	ldr	r0, .L2668+128
+	str	r3, [r5, #488]
+	b	.L2663
+.L2749:
+	ldr	r0, .L2752+128
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2655
-.L2600:
+	bne	.L2739
+.L2684:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+132
+	ldr	r3, .L2752+132
 	cmp	r2, r3
-	bne	.L2646
+	bne	.L2730
 	ldr	r2, [sp, #12]
 	cmp	r2, #512
 	addls	r0, sp, #16
-	ldrls	r1, .L2668+136
-	bls	.L2660
-	b	.L2646
-.L2561:
-	ldr	r3, .L2668+20
+	ldrls	r1, .L2752+136
+	bls	.L2744
+	b	.L2730
+.L2644:
+	ldr	r3, .L2752+20
 	cmp	r5, r3
-	ldreq	r0, .L2668+140
-	beq	.L2647
-	ldr	r3, .L2668+144
+	ldreq	r0, .L2752+140
+	beq	.L2731
+	ldr	r3, .L2752+144
 	cmp	r5, r3
-	ldreq	r0, .L2668+148
-	ldrne	r0, .L2668+152
-.L2647:
+	ldreq	r0, .L2752+148
+	ldrne	r0, .L2752+152
+.L2731:
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2655
-.L2604:
+	bne	.L2739
+.L2688:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+156
+	ldr	r3, .L2752+156
 	cmp	r2, r3
-	bne	.L2644
-	ldr	r3, .L2668+144
-	ldr	r6, .L2668+52
+	bne	.L2728
+	ldr	r3, .L2752+144
+	ldr	r6, .L2752+52
 	cmp	r5, r3
-	bne	.L2605
-	ldr	r3, [r6, #468]
+	bne	.L2689
+	ldr	r3, [r6, #480]
 	mov	r0, r4
 	add	r1, sp, #8
 	mov	r2, #16
@@ -22936,29 +23895,29 @@ rknand_sys_storage_ioctl:
 	cmp	r0, #0
 	moveq	r4, r0
 	mvnne	r4, #13
-	b	.L2554
-.L2605:
-	ldr	r3, [r6, #996]
+	b	.L2637
+.L2689:
+	ldr	r3, [r6, #1008]
 	cmp	r3, #10
-	bhi	.L2644
-	ldr	r3, [r6, #468]
+	bhi	.L2728
+	ldr	r3, [r6, #480]
 	ldr	r1, [sp, #12]
 	ldr	r2, [r3, #24]
 	cmp	r2, r1
-	beq	.L2606
+	beq	.L2690
 	cmp	r2, #0
-	beq	.L2606
-	ldr	r0, .L2668+160
+	beq	.L2690
+	ldr	r0, .L2752+160
 	bl	printk
-	ldr	r3, [r6, #996]
+	ldr	r3, [r6, #1008]
 	add	r3, r3, #1
-	str	r3, [r6, #996]
-	b	.L2644
-.L2606:
-	ldr	r0, .L2668+52
+	str	r3, [r6, #1008]
+	b	.L2728
+.L2690:
+	ldr	r0, .L2752+52
 	mov	r2, #0
-	str	r2, [r0, #996]
-	ldr	r0, .L2668+20
+	str	r2, [r0, #1008]
+	ldr	r0, .L2752+20
 	cmp	r5, r0
 	mov	r0, #1
 	strne	r1, [r3, #24]
@@ -22971,158 +23930,158 @@ rknand_sys_storage_ioctl:
 	cmn	r0, #1
 	mvneq	r4, #1
 	movne	r4, #0
-	b	.L2580
-.L2569:
-	ldr	r0, .L2668+164
+	b	.L2663
+.L2652:
+	ldr	r0, .L2752+164
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2655
-.L2609:
+	bne	.L2739
+.L2693:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+168
+	ldr	r3, .L2752+168
 	cmp	r2, r3
-	bne	.L2646
+	bne	.L2730
 	ldr	r2, [sp, #12]
 	cmp	r2, #504
-	bhi	.L2646
-	ldr	r3, .L2668+172
+	bhi	.L2730
+	ldr	r3, .L2752+172
 	add	r0, sp, #16
 	cmp	r5, r3
-	ldr	r3, .L2668+52
-	ldreq	r1, [r3, #1000]
-	ldrne	r1, [r3, #1004]
+	ldr	r3, .L2752+52
+	ldreq	r1, [r3, #1012]
+	ldrne	r1, [r3, #1016]
 	add	r1, r1, #8
-.L2660:
+.L2744:
 	bl	memcpy
-.L2661:
+.L2745:
 	add	r1, sp, #8
 	mov	r0, r4
 	mov	r2, #520
-.L2654:
+.L2738:
 	bl	rk_copy_to_user
 	subs	r4, r0, #0
-	bne	.L2644
-	b	.L2580
-.L2570:
-	ldr	r0, .L2668+176
+	bne	.L2728
+	b	.L2663
+.L2653:
+	ldr	r0, .L2752+176
 	bl	printk
 	add	r0, sp, #8
 	mov	r1, r4
 	mov	r2, #520
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	beq	.L2612
-.L2655:
-	ldr	r0, .L2668+64
+	beq	.L2696
+.L2739:
+	ldr	r0, .L2752+64
 	bl	printk
-	b	.L2644
-.L2612:
+	b	.L2728
+.L2696:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L2668+168
+	ldr	r3, .L2752+168
 	cmp	r2, r3
-	bne	.L2646
+	bne	.L2730
 	ldr	r2, [sp, #12]
 	cmp	r2, #504
-	bhi	.L2646
-	ldr	r3, .L2668+28
+	bhi	.L2730
+	ldr	r3, .L2752+28
 	add	r2, r2, #8
-	ldr	r4, .L2668+52
+	ldr	r4, .L2752+52
 	cmp	r5, r3
-	bne	.L2613
+	bne	.L2697
 	add	r1, sp, #8
-	ldr	r0, [r4, #1000]
+	ldr	r0, [r4, #1012]
 	bl	memcpy
-	ldr	r1, [r4, #1000]
+	ldr	r1, [r4, #1012]
 	mov	r0, #2
-.L2651:
+.L2735:
 	bl	StorageSysDataStore
 	mov	r4, r0
-	b	.L2580
-.L2613:
+	b	.L2663
+.L2697:
 	add	r1, sp, #8
-	ldr	r0, [r4, #1004]
+	ldr	r0, [r4, #1016]
 	bl	memcpy
 	mov	r0, #3
-	ldr	r1, [r4, #1004]
-	b	.L2651
-.L2664:
+	ldr	r1, [r4, #1016]
+	b	.L2735
+.L2748:
 	bl	rknand_dev_flush
-	b	.L2650
-.L2646:
+	b	.L2734
+.L2730:
 	mvn	r4, #0
-.L2580:
+.L2663:
 	mov	r1, r4
-	ldr	r0, .L2668+180
+	ldr	r0, .L2752+180
 	bl	printk
-	b	.L2554
-.L2614:
+	b	.L2637
+.L2698:
 	mvn	r4, #21
-	b	.L2554
-.L2621:
+	b	.L2637
+.L2705:
 	mvn	r4, #11
-	b	.L2554
-.L2627:
+	b	.L2637
+.L2711:
 	mvn	r4, #1
-	b	.L2554
-.L2644:
+	b	.L2637
+.L2728:
 	mvn	r4, #13
-.L2554:
+.L2637:
 	mov	r0, r4
 	add	sp, sp, #528
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2669:
+.L2753:
 	.align	2
-.L2668:
+.L2752:
 	.word	1074033155
 	.word	1074029694
 	.word	1074029570
 	.word	1074031656
 	.word	1074029695
-	.word	1074031666
-	.word	1074033235
-	.word	1074034193
-	.word	1074034194
-	.word	.LC157
-	.word	.LC159
-	.word	.LC160
-	.word	.LC161
-	.word	.LANCHOR2
-	.word	.LC162
-	.word	.LC163
-	.word	.LC158
-	.word	.LC164
-	.word	.LC165
-	.word	.LC166
-	.word	.LC167
-	.word	.LC168
-	.word	.LC169
-	.word	.LC170
+	.word	1074031666
+	.word	1074033235
+	.word	1074034193
+	.word	1074034194
+	.word	.LC178
+	.word	.LC180
+	.word	.LC181
+	.word	.LC182
+	.word	.LANCHOR4
+	.word	.LC183
+	.word	.LC184
+	.word	.LC179
+	.word	.LC185
+	.word	.LC186
+	.word	.LC187
+	.word	.LC188
+	.word	.LC189
+	.word	.LC190
+	.word	.LC191
 	.word	1263358532
 	.word	-1067903959
-	.word	.LC171
-	.word	.LC172
+	.word	.LC192
+	.word	.LC193
 	.word	1112753220
 	.word	1146313043
-	.word	.LC173
+	.word	.LC194
 	.word	1112755781
-	.word	.LC174
+	.word	.LC195
 	.word	1094995539
-	.word	.LANCHOR2+484
-	.word	.LC175
+	.word	.LANCHOR4+496
+	.word	.LC196
 	.word	1074031676
-	.word	.LC176
-	.word	.LC177
+	.word	.LC197
+	.word	.LC198
 	.word	1280262987
-	.word	.LC178
-	.word	.LC179
+	.word	.LC199
+	.word	.LC200
 	.word	1145980246
 	.word	1074034192
-	.word	.LC180
-	.word	.LC181
+	.word	.LC201
+	.word	.LC202
 	.fnend
 	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
 	.align	2
@@ -23135,55 +24094,55 @@ rk_ftl_storage_sys_init:
 	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r2, #512
-	ldr	r4, .L2673
+	ldr	r4, .L2757
 	mov	r6, #0
-	add	r0, r4, #484
-	ldr	r5, [r4, #456]
-	str	r6, [r4, #464]
+	add	r0, r4, #496
+	ldr	r5, [r4, #468]
+	str	r6, [r4, #476]
 	add	r1, r5, #1536
 	add	r3, r5, #512
-	str	r5, [r4, #480]
-	str	r3, [r4, #468]
+	str	r5, [r4, #492]
+	str	r3, [r4, #480]
 	add	r3, r5, #1024
-	str	r1, [r4, #1004]
-	str	r3, [r4, #1000]
+	str	r1, [r4, #1016]
+	str	r3, [r4, #1012]
 	bl	memcpy
 	ldr	r7, [r5, #508]
 	ldr	r3, [r5, #16]
 	cmp	r7, r6
-	str	r6, [r4, #472]
-	str	r6, [r4, #996]
-	str	r3, [r4, #476]
-	beq	.L2671
+	str	r6, [r4, #484]
+	str	r6, [r4, #1008]
+	str	r3, [r4, #488]
+	beq	.L2755
 	mov	r0, r5
 	mov	r1, #508
 	bl	JSHash
 	cmp	r7, r0
-	beq	.L2671
+	beq	.L2755
 	str	r6, [r5, #16]
-	ldr	r0, .L2673+4
-	str	r6, [r4, #476]
+	ldr	r0, .L2757+4
+	str	r6, [r4, #488]
 	bl	printk
-.L2671:
-	ldr	r3, [r4, #476]
+.L2755:
+	ldr	r3, [r4, #488]
 	mov	r0, #2
-	ldr	r4, .L2673
+	ldr	r4, .L2757
 	cmp	r3, #0
-	ldrne	r2, .L2673+8
-	ldrne	r3, .L2673
-	ldr	r1, [r4, #1000]
-	strne	r2, [r3, #472]
+	ldrne	r2, .L2757+8
+	ldrne	r3, .L2757
+	ldr	r1, [r4, #1012]
+	strne	r2, [r3, #484]
 	bl	StorageSysDataLoad
-	ldr	r1, [r4, #1004]
+	ldr	r1, [r4, #1016]
 	mov	r0, #3
 	bl	StorageSysDataLoad
 	ldmfd	sp!, {r3, r4, r5, r6, r7, lr}
 	b	rknand_sys_storage_init
-.L2674:
+.L2758:
 	.align	2
-.L2673:
-	.word	.LANCHOR2
-	.word	.LC182
+.L2757:
+	.word	.LANCHOR4
+	.word	.LC203
 	.word	-1067903959
 	.fnend
 	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
@@ -23209,86 +24168,84 @@ rk_ftl_vendor_storage_init:
 	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
 	.save {r3, r4, r5, r6, r7, r8, sl, lr}
 	mov	r0, #65536
-	mov	r1, #209
-	mov	r2, #4
-	bl	kmalloc_order_trace
-	ldr	r7, .L2684
+	bl	ftl_malloc
+	ldr	r7, .L2768
 	cmp	r0, #0
-	str	r0, [r7, #1008]
-	beq	.L2682
-	ldr	sl, .L2684+4
+	str	r0, [r7, #1020]
+	beq	.L2766
+	ldr	sl, .L2768+4
 	mov	r6, #0
 	mov	r4, r6
 	mov	r5, r6
 	movw	r8, #65532
-.L2680:
-	ldr	r0, [r7, #1008]
+.L2764:
+	ldr	r0, [r7, #1020]
 	mov	r1, r5, asl #7
 	mov	r2, #0
-	bl	rk_ftl_vendor_ops.constprop.26
+	bl	rk_ftl_vendor_ops.constprop.28
 	cmp	r0, #0
-	bne	.L2678
-	ldr	r3, [r7, #1008]
-	ldr	r0, .L2684+8
+	bne	.L2762
+	ldr	r3, [r7, #1020]
+	ldr	r0, .L2768+8
 	ldr	r1, [r3, #0]
 	ldr	r2, [r3, r8]
 	ldr	r3, [r3, #4]
 	bl	printk
-	ldr	r0, [r7, #1008]
+	ldr	r0, [r7, #1020]
 	ldr	r3, [r0, #0]
 	cmp	r3, sl
-	bne	.L2679
+	bne	.L2763
 	ldr	r3, [r0, r8]
 	ldr	r2, [r0, #4]
 	cmp	r3, r2
-	bne	.L2679
+	bne	.L2763
 	cmp	r4, r3
 	movcc	r6, r5
 	movcc	r4, r3
-.L2679:
+.L2763:
 	add	r5, r5, #1
 	cmp	r5, #2
-	bne	.L2680
+	bne	.L2764
 	cmp	r4, #0
-	beq	.L2681
+	beq	.L2765
 	mov	r1, r6, asl #7
 	mov	r2, #0
-	bl	rk_ftl_vendor_ops.constprop.26
+	bl	rk_ftl_vendor_ops.constprop.28
 	cmp	r0, #0
 	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-	b	.L2678
-.L2681:
+	b	.L2762
+.L2765:
 	mov	r1, #65536
 	bl	__memzero
-	ldr	r3, .L2684
-	ldr	r1, .L2684+4
+	ldr	r3, .L2768
+	ldr	r1, .L2768+4
 	mov	r2, #1
 	mov	r0, r4
-	ldr	r3, [r3, #1008]
+	ldr	r3, [r3, #1020]
 	stmia	r3, {r1, r2}
 	movw	r1, #65532
 	str	r2, [r3, r1]
-	ldr	r2, .L2684+12
+	ldr	r2, .L2768+12
 	strh	r4, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L2678:
-	ldr	r4, .L2684
-	ldr	r0, [r4, #1008]
+.L2762:
+	ldr	r4, .L2768
+	ldr	r0, [r4, #1020]
 	bl	kfree
 	mov	r3, #0
 	mvn	r0, #0
-	str	r3, [r4, #1008]
+	str	r3, [r4, #1020]
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L2682:
+.L2766:
 	mvn	r0, #11
 	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
-.L2685:
+.L2769:
 	.align	2
-.L2684:
-	.word	.LANCHOR2
+.L2768:
+	.word	.LANCHOR4
 	.word	1380668996
-	.word	.LC183
+	.word	.LC204
 	.word	-1032
 	.fnend
 	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
@@ -23301,21 +24258,21 @@ rk_ftl_vendor_read:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	mov	r3, r0
 	mov	r0, r1
-	ldr	r1, .L2693
+	ldr	r1, .L2777
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	ldr	ip, [r1, #1008]
+	ldr	ip, [r1, #1020]
 	cmp	ip, #0
 	ldrneh	r4, [ip, #10]
 	movne	r5, ip
 	movne	r1, #0
-	bne	.L2688
-	b	.L2692
-.L2690:
+	bne	.L2772
+	b	.L2776
+.L2774:
 	ldrh	r6, [r5, #16]
 	add	r5, r5, #8
 	cmp	r6, r3
-	bne	.L2689
+	bne	.L2773
 	add	r1, r1, #2
 	add	r1, ip, r1, asl #3
 	ldrh	r4, [r1, #4]
@@ -23328,20 +24285,20 @@ rk_ftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2689:
+.L2773:
 	add	r1, r1, #1
-.L2688:
+.L2772:
 	cmp	r1, r4
-	bcc	.L2690
+	bcc	.L2774
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2692:
+.L2776:
 	mvn	r0, #0
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2694:
+.L2778:
 	.align	2
-.L2693:
-	.word	.LANCHOR2
+.L2777:
+	.word	.LANCHOR4
 	.fnend
 	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
 	.align	2
@@ -23351,46 +24308,46 @@ rk_ftl_vendor_write:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2712
+	ldr	r3, .L2796
 	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 	mov	sl, r0
-	ldr	r4, [r3, #1008]
+	ldr	r4, [r3, #1020]
 	.pad #20
 	sub	sp, sp, #20
 	mov	r9, r1
 	mov	r5, r2
 	cmp	r4, #0
-	beq	.L2708
+	beq	.L2792
 	add	r8, r2, #63
 	ldrh	r2, [r4, #8]
 	ldrh	r3, [r4, #10]
 	bic	r8, r8, #63
 	mov	r7, #0
 	str	r2, [sp, #8]
-	b	.L2697
-.L2704:
+	b	.L2781
+.L2788:
 	add	r2, r7, #2
 	mov	r2, r2, asl #3
 	add	r6, r4, r2
 	ldrh	r2, [r4, r2]
 	cmp	r2, sl
-	bne	.L2698
+	bne	.L2782
 	ldrh	r2, [r6, #4]
 	add	r2, r2, #63
 	bic	r2, r2, #63
 	str	r2, [sp, #12]
 	cmp	r5, r2
-	bls	.L2699
+	bls	.L2783
 	ldrh	r2, [r4, #14]
 	cmp	r2, r8
-	bcc	.L2708
+	bcc	.L2792
 	sub	r3, r3, #1
 	mov	fp, r8
 	ldrh	r6, [r6, #2]
 	mov	r8, r3
-	b	.L2700
-.L2701:
+	b	.L2784
+.L2785:
 	add	r7, r7, #1
 	mov	r2, r2, asl #3
 	add	r0, r7, #2
@@ -23415,10 +24372,10 @@ rk_ftl_vendor_write:
 	bl	memcpy
 	ldr	r3, [sp, #4]
 	add	r6, r6, r3
-.L2700:
+.L2784:
 	cmp	r7, r8
 	add	r2, r7, #2
-	bcc	.L2701
+	bcc	.L2785
 	mov	r2, r2, asl #3
 	uxth	r6, r6
 	add	r3, r4, r2
@@ -23438,8 +24395,8 @@ rk_ftl_vendor_write:
 	add	r3, r2, r3
 	rsb	r8, r8, r3
 	strh	r8, [r4, #14]	@ movhi
-	b	.L2711
-.L2699:
+	b	.L2795
+.L2783:
 	ldrh	r0, [r6, #2]
 	mov	r1, r9
 	mov	r2, r5
@@ -23447,15 +24404,15 @@ rk_ftl_vendor_write:
 	add	r0, r4, r0
 	bl	memcpy
 	strh	r5, [r6, #4]	@ movhi
-	b	.L2711
-.L2698:
+	b	.L2795
+.L2782:
 	add	r7, r7, #1
-.L2697:
+.L2781:
 	cmp	r7, r3
-	bcc	.L2704
+	bcc	.L2788
 	ldrh	r2, [r4, #14]
 	cmp	r2, r8
-	bcc	.L2708
+	bcc	.L2792
 	add	r3, r3, #2
 	uxth	r8, r8
 	mov	r1, r9
@@ -23479,7 +24436,7 @@ rk_ftl_vendor_write:
 	ldrh	r3, [r4, #10]
 	add	r3, r3, #1
 	strh	r3, [r4, #10]	@ movhi
-.L2711:
+.L2795:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
 	mov	r0, r4
@@ -23496,18 +24453,18 @@ rk_ftl_vendor_write:
 	strhih	r3, [r4, #8]	@ movhi
 	ldr	r3, [sp, #8]
 	mov	r1, r3, asl #7
-	bl	rk_ftl_vendor_ops.constprop.26
+	bl	rk_ftl_vendor_ops.constprop.28
 	mov	r0, #0
-	b	.L2696
-.L2708:
+	b	.L2780
+.L2792:
 	mvn	r0, #0
-.L2696:
+.L2780:
 	add	sp, sp, #20
 	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
-.L2713:
+.L2797:
 	.align	2
-.L2712:
-	.word	.LANCHOR2
+.L2796:
+	.word	.LANCHOR4
 	.fnend
 	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
 	.align	2
@@ -23517,41 +24474,38 @@ rk_ftl_vendor_storage_ioctl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2731
 	stmfd	sp!, {r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
+	mov	r0, #4096
 	mov	r5, r2
 	mov	r6, r1
-	ldr	r0, [r3, #48]
-	mov	r1, #208
-	mov	r2, #4096
-	bl	kmem_cache_alloc_trace
+	bl	ftl_malloc
 	subs	r4, r0, #0
 	mvneq	r5, #0
-	beq	.L2715
-	ldr	r3, .L2731+4
+	beq	.L2799
+	ldr	r3, .L2815
 	cmp	r6, r3
-	beq	.L2717
+	beq	.L2801
 	add	r3, r3, #1
 	cmp	r6, r3
-	bne	.L2728
-	b	.L2730
-.L2717:
+	bne	.L2812
+	b	.L2814
+.L2801:
 	mov	r1, r5
 	mov	r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2728
+	bne	.L2812
 	ldr	r2, [r4, #0]
-	ldr	r3, .L2731+8
+	ldr	r3, .L2815+4
 	cmp	r2, r3
-	bne	.L2727
+	bne	.L2811
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_read
 	cmn	r0, #1
-	beq	.L2723
+	beq	.L2807
 	uxth	r2, r0
 	mov	r1, r4
 	strh	r2, [r4, #6]	@ movhi
@@ -23561,49 +24515,48 @@ rk_ftl_vendor_storage_ioctl:
 	cmp	r0, #0
 	moveq	r5, r0
 	mvnne	r5, #13
-	b	.L2716
-.L2730:
+	b	.L2800
+.L2814:
 	mov	r1, r5
 	mov	r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2728
+	bne	.L2812
 	ldr	r2, [r4, #0]
-	ldr	r3, .L2731+8
+	ldr	r3, .L2815+4
 	cmp	r2, r3
-	bne	.L2727
+	bne	.L2811
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L2727
+	bhi	.L2811
 	mov	r0, r4
 	mov	r1, r5
 	add	r2, r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L2728
+	bne	.L2812
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_write
-.L2723:
+.L2807:
 	mov	r5, r0
-	b	.L2716
-.L2727:
+	b	.L2800
+.L2811:
 	mvn	r5, #0
-	b	.L2716
-.L2728:
+	b	.L2800
+.L2812:
 	mvn	r5, #13
-.L2716:
+.L2800:
 	mov	r0, r4
 	bl	kfree
-.L2715:
+.L2799:
 	mov	r0, r5
 	ldmfd	sp!, {r4, r5, r6, pc}
-.L2732:
+.L2816:
 	.align	2
-.L2731:
-	.word	kmalloc_caches
+.L2815:
 	.word	1074034177
 	.word	1448232273
 	.fnend
@@ -23622,6 +24575,7 @@ rk_ftl_vendor_storage_ioctl:
 	.global	RK29_NANDC1_REG_BASE
 	.global	RK29_NANDC_REG_BASE
 	.global	gc_ink_free_return_value
+	.global	check_valid_page_count_table
 	.global	FtlUpdateVaildLpnCount
 	.global	g_ect_tbl_power_up_flush
 	.global	last_cache_match_count
@@ -23849,23 +24803,35 @@ rk_ftl_vendor_storage_ioctl:
 	.global	read_retry_cur_offset
 	.section	.rodata
 	.set	.LANCHOR3,. + 0
-	.type	__func__.14459, %object
-	.size	__func__.14459, 11
-__func__.14459:
+	.type	__func__.14466, %object
+	.size	__func__.14466, 11
+__func__.14466:
 	.ascii	"FtlMemInit\000"
 .LC0:
 	.byte	60
 	.byte	40
 	.byte	24
 	.byte	16
-	.type	__func__.15408, %object
-	.size	__func__.15408, 21
-__func__.15408:
+	.type	__func__.15268, %object
+	.size	__func__.15268, 16
+__func__.15268:
+	.ascii	"FtlScanAllBlock\000"
+	.type	__func__.15249, %object
+	.size	__func__.15249, 17
+__func__.15249:
+	.ascii	"FtlDumpBlockInfo\000"
+	.type	__func__.15516, %object
+	.size	__func__.15516, 21
+__func__.15516:
 	.ascii	"FtlVpcCheckAndModify\000"
-	.type	__func__.14532, %object
-	.size	__func__.14532, 8
-__func__.14532:
+	.type	__func__.14539, %object
+	.size	__func__.14539, 8
+__func__.14539:
 	.ascii	"FtlInit\000"
+	.type	__func__.15213, %object
+	.size	__func__.15213, 12
+__func__.15213:
+	.ascii	"FtlCheckVpc\000"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC1:
 	.ascii	"FlashEraseBlocks pageAddr error %x\012\000"
@@ -24002,9 +24968,9 @@ __func__.14532:
 .LC66:
 	.ascii	"WR_CHK = 0x%x %x %x %x\012\000"
 .LC67:
-	.ascii	"Read Err Cnt = 0x%x\012\000"
+	.ascii	"Read Err = 0x%x\012\000"
 .LC68:
-	.ascii	"Prog Err Cnt = 0x%x\012\000"
+	.ascii	"Prog Err = 0x%x\012\000"
 .LC69:
 	.ascii	"gc_free_blk_th= 0x%x\012\000"
 .LC70:
@@ -24026,7 +24992,7 @@ __func__.14532:
 .LC78:
 	.ascii	"%s\012\000"
 .LC79:
-	.ascii	"FTL version: 5.0.48 20180504\000"
+	.ascii	"FTL version: 5.0.48 20180703\000"
 .LC80:
 	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
 	.ascii	"\012\000"
@@ -24072,172 +25038,220 @@ __func__.14532:
 .LC100:
 	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
 .LC101:
-	.ascii	"prog error: = %x\012\000"
+	.ascii	"...%s enter...\012\000"
 .LC102:
-	.ascii	"prog read error: = %x\012\000"
+	.ascii	"blk = %x vpc=%x mode = %x\012\000"
 .LC103:
-	.ascii	"prog read s error: = %x %x %x\012\000"
+	.ascii	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
+	.ascii	"%x\012\000"
 .LC104:
-	.ascii	"prog read d error: = %x %x %x\012\000"
+	.ascii	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x "
+	.ascii	"%x\012\000"
 .LC105:
-	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+	.ascii	"superBlkID = %x vpc=%x\012\000"
 .LC106:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"flashmode = %x pagenum = %x %x\012\000"
 .LC107:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC108:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"prog error: = %x\012\000"
 .LC109:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"prog read error: = %x\012\000"
 .LC110:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"prog read s error: = %x %x %x\012\000"
 .LC111:
-	.ascii	"FlashMakeFactorBbt %d\012\000"
+	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC112:
-	.ascii	"bad block:%d %d\012\000"
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
 .LC113:
-	.ascii	"FMFB:%d %d\012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC114:
-	.ascii	"E:bad block:%d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC115:
-	.ascii	"FMFB:Save %d %d\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC116:
-	.ascii	"ftl_map_blk_gc blk info: %x %x %x\012\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC117:
-	.ascii	"page map lost: %x %x\012\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC118:
-	.ascii	"FtlMapWritePage error = %x\012\000"
+	.ascii	"FlashMakeFactorBbt %d\012\000"
 .LC119:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"bad block:%d %d\012\000"
 .LC120:
-	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+	.ascii	"FMFB:%d %d\012\000"
 .LC121:
-	.ascii	"slc mode\000"
+	.ascii	"E:bad block:%d\012\000"
 .LC122:
-	.ascii	"no ect\000"
+	.ascii	"FMFB:Save %d %d\012\000"
 .LC123:
-	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+	.ascii	"ftl_map_blk_gc blk info: %x %x %x\012\000"
 .LC124:
-	.ascii	"page map lost %x %x %x %x\012\000"
+	.ascii	"page map lost: %x %x\012\000"
 .LC125:
-	.ascii	"RSB refresh addr %x\012\000"
+	.ascii	"FtlMapWritePage error = %x\012\000"
 .LC126:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC127:
-	.ascii	"g_recovery_ppa %x ver %x\012 \000"
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
 .LC128:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"slc mode\000"
 .LC129:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+	.ascii	"no ect\000"
 .LC130:
-	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+	.ascii	"FLFB:%d %d\012\000"
 .LC131:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+	.ascii	"phyBlk = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC132:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+	.ascii	"Mblk:\000"
 .LC133:
-	.ascii	"GC des block %x done\012\000"
+	.ascii	"L2P:\000"
 .LC134:
-	.ascii	"rk_ftl_de_init %x\012\000"
+	.ascii	"L2PC:\000"
 .LC135:
-	.ascii	"fix power lost blk = %x vpc=%x\012\000"
+	.ascii	"id = %x,%x addr= %x,spare= %x %x %x %x data = %x\012"
+	.ascii	"\000"
 .LC136:
-	.ascii	"erase power lost blk = %x vpc=%x\012\000"
+	.ascii	":\000"
 .LC137:
-	.ascii	"...%s: no bad block mapping table, format device\012"
-	.ascii	"\000"
+	.ascii	"BBT:\000"
 .LC138:
-	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC139:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+	.ascii	"region_id = %x phyAddr = %x\012\000"
 .LC140:
-	.ascii	"FLFB:%d %d\012\000"
+	.ascii	"map_ppn:\000"
 .LC141:
-	.ascii	"BBT:\000"
+	.ascii	"Ftlscanalldata = %x\012\000"
 .LC142:
-	.ascii	"otp error! %d\000"
+	.ascii	"scan lpa = %x ppa= %x\012\000"
 .LC143:
-	.ascii	"rr\000"
+	.ascii	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\012"
+	.ascii	"\000"
 .LC144:
-	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
+	.ascii	"RSB refresh addr %x\012\000"
 .LC145:
-	.ascii	"FtlInit %x\012\000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC146:
-	.ascii	"IdBlockReadData %x %x\012\000"
+	.ascii	"g_recovery_ppa %x ver %x\012 \000"
 .LC147:
-	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
 .LC148:
-	.ascii	"IDBlockWriteData %x %x\012\000"
+	.ascii	"GC des block %x done\012\000"
 .LC149:
-	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
 .LC150:
-	.ascii	"idblk:\000"
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
 .LC151:
-	.ascii	"idb reverse %x %x\012\000"
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
 .LC152:
-	.ascii	"write_idblock totle_sec %x %x\012\000"
+	.ascii	"rk_ftl_de_init %x\012\000"
 .LC153:
-	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
-	.ascii	"\012\000"
+	.ascii	"fix power lost blk = %x vpc=%x\012\000"
 .LC154:
-	.ascii	"write\000"
+	.ascii	"erase power lost blk = %x vpc=%x\012\000"
 .LC155:
-	.ascii	"read\000"
+	.ascii	"...%s: no bad block mapping table, format device\012"
+	.ascii	"\000"
 .LC156:
-	.ascii	"write_idblock error\012\000"
+	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
 .LC157:
-	.ascii	"READ_SECTOR_IO\012\000"
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
 .LC158:
-	.ascii	"rk_copy_from_user error\012\000"
+	.ascii	"vpc1\000"
 .LC159:
-	.ascii	"READ_SECTOR_IO %x %x\012\000"
+	.ascii	"vpc2\000"
 .LC160:
-	.ascii	"rk_copy_to_user error\012\000"
+	.ascii	"FtlCheckVpc2 %x = %x  %x\012\000"
 .LC161:
-	.ascii	"WRITE_SECTOR_IO\012\000"
+	.ascii	"free blk vpc error %x = %x  %x\012\000"
 .LC162:
-	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"otp error! %d\000"
 .LC163:
-	.ascii	"END_WRITE_SECTOR_IO\012\000"
+	.ascii	"rr\000"
 .LC164:
-	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
 .LC165:
-	.ascii	"GET_FLASH_INFO_IO\012\000"
+	.ascii	"FtlInit %x\012\000"
 .LC166:
-	.ascii	"GET_BAD_BLOCK_IO\012\000"
+	.ascii	"IdBlockReadData %x %x\012\000"
 .LC167:
-	.ascii	"bbt:\000"
+	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
 .LC168:
-	.ascii	"GET_LOCK_FLAG_IO\012\000"
+	.ascii	"IDBlockWriteData %x %x\012\000"
 .LC169:
-	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
 .LC170:
-	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+	.ascii	"write_idblock fix data %x %x\012\000"
 .LC171:
-	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+	.ascii	"idblk:\000"
 .LC172:
-	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+	.ascii	"idb reverse %x %x\012\000"
 .LC173:
-	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+	.ascii	"write_idblock totle_sec %x %x %x %x\012\000"
 .LC174:
-	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
+	.ascii	"\012\000"
 .LC175:
-	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+	.ascii	"write\000"
 .LC176:
-	.ascii	"RKNAND_LOADER_STATUS\012\000"
+	.ascii	"read\000"
 .LC177:
-	.ascii	"RKNAND_LOADER_LOCK\012\000"
+	.ascii	"write_idblock error %d\012\000"
 .LC178:
-	.ascii	"LockKey not match %d\012\000"
+	.ascii	"READ_SECTOR_IO\012\000"
 .LC179:
-	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+	.ascii	"rk_copy_from_user error\012\000"
 .LC180:
-	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+	.ascii	"READ_SECTOR_IO %x %x\012\000"
 .LC181:
-	.ascii	"return ret = %lx\012\000"
+	.ascii	"rk_copy_to_user error\012\000"
 .LC182:
-	.ascii	"secureBootEn check error\012\000"
+	.ascii	"WRITE_SECTOR_IO\012\000"
 .LC183:
+	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+.LC184:
+	.ascii	"END_WRITE_SECTOR_IO\012\000"
+.LC185:
+	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+.LC186:
+	.ascii	"GET_FLASH_INFO_IO\012\000"
+.LC187:
+	.ascii	"GET_BAD_BLOCK_IO\012\000"
+.LC188:
+	.ascii	"bbt:\000"
+.LC189:
+	.ascii	"GET_LOCK_FLAG_IO\012\000"
+.LC190:
+	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+.LC191:
+	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+.LC192:
+	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+.LC193:
+	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+.LC194:
+	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+.LC195:
+	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+.LC196:
+	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+.LC197:
+	.ascii	"RKNAND_LOADER_STATUS\012\000"
+.LC198:
+	.ascii	"RKNAND_LOADER_LOCK\012\000"
+.LC199:
+	.ascii	"LockKey not match %d\012\000"
+.LC200:
+	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+.LC201:
+	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+.LC202:
+	.ascii	"return ret = %lx\012\000"
+.LC203:
+	.ascii	"secureBootEn check error\012\000"
+.LC204:
 	.ascii	"\0013vendor storage %x,%x,%x\012\000"
 	.data
 	.align	2
@@ -26964,6 +27978,7 @@ gTable_Crc32:
 	.align	2
 	.set	.LANCHOR0,. + 0
 	.set	.LANCHOR2,. + 8184
+	.set	.LANCHOR4,. + 16368
 	.type	gReadRetryInfo, %object
 	.size	gReadRetryInfo, 852
 gReadRetryInfo:
@@ -27092,11 +28107,16 @@ DieCsIndex:
 	.size	gFlashInterfaceMode, 1
 gFlashInterfaceMode:
 	.space	1
+	.space	3
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.space	4
 	.type	gFlashToggleModeEn, %object
 	.size	gFlashToggleModeEn, 1
 gFlashToggleModeEn:
 	.space	1
-	.space	2
+	.space	3
 	.type	gBootDdrMode, %object
 	.size	gBootDdrMode, 4
 gBootDdrMode:
@@ -27105,10 +28125,6 @@ gBootDdrMode:
 	.size	gNandcVer, 4
 gNandcVer:
 	.space	4
-	.type	g_nandc_version_data, %object
-	.size	g_nandc_version_data, 4
-g_nandc_version_data:
-	.space	4
 	.type	gMasterTempBuf, %object
 	.size	gMasterTempBuf, 4
 gMasterTempBuf:
@@ -27300,10 +28316,6 @@ g_MaxLpn:
 	.size	gBbtInfo, 60
 gBbtInfo:
 	.space	60
-	.type	gSysFreeQueue, %object
-	.size	gSysFreeQueue, 2056
-gSysFreeQueue:
-	.space	2056
 	.type	g_flash_read_only_en, %object
 	.size	g_flash_read_only_en, 4
 g_flash_read_only_en:
@@ -27320,6 +28332,10 @@ p_erase_count_table:
 	.size	g_totle_sys_slc_erase_count, 4
 g_totle_sys_slc_erase_count:
 	.space	4
+	.type	gSysFreeQueue, %object
+	.size	gSysFreeQueue, 2056
+gSysFreeQueue:
+	.space	2056
 	.type	g_sys_save_data, %object
 	.size	g_sys_save_data, 48
 g_sys_save_data:
@@ -27850,14 +28866,14 @@ g_gc_cur_blk_max_valid_pages:
 	.size	gp_last_act_superblock, 4
 gp_last_act_superblock:
 	.space	4
-	.type	gc_discard_updated, %object
-	.size	gc_discard_updated, 4
-gc_discard_updated:
-	.space	4
 	.type	g_LowFormat, %object
 	.size	g_LowFormat, 4
 g_LowFormat:
 	.space	4
+	.type	gc_discard_updated, %object
+	.size	gc_discard_updated, 4
+gc_discard_updated:
+	.space	4
 	.type	g_ftl_nand_free_count, %object
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
@@ -27866,6 +28882,10 @@ g_ftl_nand_free_count:
 	.size	last_cache_match_count, 4
 last_cache_match_count:
 	.space	4
+	.type	check_valid_page_count_table, %object
+	.size	check_valid_page_count_table, 8192
+check_valid_page_count_table:
+	.space	8192
 	.type	gLoaderBootInfo, %object
 	.size	gLoaderBootInfo, 4
 gLoaderBootInfo:
diff --git a/drivers/rk_nand/rk_ftl_arm_v7_thumb.S b/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
index 77de7f91b411..d5ed56072374 100644
--- a/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
+++ b/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2017-12-13
+ * date: 2018-05-28
  */
 	.syntax unified
 	.arch armv7-a
@@ -21,6 +21,39 @@
 	.eabi_attribute 18, 4
 	.thumb
 	.file	"rk_ftl_arm_v7.S"
+#APP
+	.macro	it, cond
+	.endm
+	.macro	itt, cond
+	.endm
+	.macro	ite, cond
+	.endm
+	.macro	ittt, cond
+	.endm
+	.macro	itte, cond
+	.endm
+	.macro	itet, cond
+	.endm
+	.macro	itee, cond
+	.endm
+	.macro	itttt, cond
+	.endm
+	.macro	ittte, cond
+	.endm
+	.macro	ittet, cond
+	.endm
+	.macro	ittee, cond
+	.endm
+	.macro	itett, cond
+	.endm
+	.macro	itete, cond
+	.endm
+	.macro	iteet, cond
+	.endm
+	.macro	iteee, cond
+	.endm
+
+	.thumb
 	.text
 	.align	1
 	.global	FlashMemCmp8
@@ -824,17 +857,16 @@ FlashDieInfoInit:
 	.fnend
 	.size	FlashDieInfoInit, .-FlashDieInfoInit
 	.align	1
-	.global	FlashSuspend
+	.global	ftl_flash_suspend
 	.thumb
 	.thumb_func
-	.type	FlashSuspend, %function
-FlashSuspend:
+	.type	ftl_flash_suspend, %function
+ftl_flash_suspend:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	ldr	r3, .L137
-	movs	r0, #0
 	ldr	r2, [r3, #1828]
 	ldr	r1, [r2]
 	str	r1, [r3, #1832]
@@ -858,7 +890,7 @@ FlashSuspend:
 .L137:
 	.word	.LANCHOR0
 	.fnend
-	.size	FlashSuspend, .-FlashSuspend
+	.size	ftl_flash_suspend, .-ftl_flash_suspend
 	.global	__aeabi_uidiv
 	.align	1
 	.global	LogAddr2PhyAddr
@@ -896,10 +928,10 @@ LogAddr2PhyAddr:
 	uxtheq	fp, fp
 	mov	r1, r5
 	bl	__aeabi_uidiv
+	ldr	r3, [sp, #4]
 	cmp	r10, #1
 	ubfx	r1, r4, #0, #10
 	uxth	r0, r0
-	ldr	r3, [sp, #4]
 	smulbb	r5, r0, r5
 	sub	r3, r3, r5
 	uxth	r3, r3
@@ -939,11 +971,11 @@ LogAddr2PhyAddr:
 	.fnend
 	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
 	.align	1
-	.global	ReadFlashInfo
+	.global	ftl_read_flash_info
 	.thumb
 	.thumb_func
-	.type	ReadFlashInfo, %function
-ReadFlashInfo:
+	.type	ftl_read_flash_info, %function
+ftl_read_flash_info:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -954,21 +986,15 @@ ReadFlashInfo:
 	bl	__memzero
 	ldr	r3, .L150
 	movs	r5, #1
-	ldr	r1, [r3, #1788]
+	ldr	r2, [r3, #1788]
+	ldrb	r1, [r2, #9]	@ zero_extendqisi2
 	ldr	r2, [r3, #4]
 	addw	r3, r3, #1620
-	ldrb	r0, [r1, #9]	@ zero_extendqisi2
-	smulbb	r2, r0, r2
-	ldrb	r0, [r3, #272]	@ zero_extendqisi2
-	strb	r0, [r4, #7]
-	uxth	r2, r2
+	smulbb	r2, r1, r2
 	strh	r2, [r4, #4]	@ unaligned
-	ldrb	r0, [r1, #13]	@ zero_extendqisi2
-	muls	r2, r0, r2
-	ldrh	r0, [r1, #14]
-	ldrb	r1, [r1, #8]	@ zero_extendqisi2
-	muls	r2, r0, r2
-	muls	r2, r1, r2
+	ldrb	r2, [r3, #272]	@ zero_extendqisi2
+	strb	r2, [r4, #7]
+	ldr	r2, [r3, #276]
 	str	r2, [r4]	@ unaligned
 	ldr	r2, [r3, #168]
 	ldrb	r0, [r3, #-4]	@ zero_extendqisi2
@@ -998,7 +1024,7 @@ ReadFlashInfo:
 .L150:
 	.word	.LANCHOR0
 	.fnend
-	.size	ReadFlashInfo, .-ReadFlashInfo
+	.size	ftl_read_flash_info, .-ftl_read_flash_info
 	.align	1
 	.global	FlashScheduleEnSet
 	.thumb
@@ -1010,8 +1036,8 @@ FlashScheduleEnSet:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	ldr	r3, .L153
-	ldr	r2, [r3, #1896]
-	str	r0, [r3, #1896]
+	ldr	r2, [r3, #1900]
+	str	r0, [r3, #1900]
 	mov	r0, r2
 	bx	lr
 .L154:
@@ -1156,43 +1182,38 @@ NandcSetMode:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	ldr	r5, .L180
-	ldr	r3, [r5, #1828]
-	ldr	r4, [r3]
-	ands	r3, r0, #6
+	@ link register save eliminated.
+	ldr	r3, .L180
+	ands	r1, r0, #6
+	ldr	r2, [r3, #1828]
+	ldr	r3, [r2]
 	beq	.L174
-	orr	r4, r4, #24576
-	lsls	r3, r0, #29
-	bfc	r4, #15, #1
-	mov	r0, #0
-	orr	r4, r4, #196608
+	lsls	r1, r0, #29
+	orr	r3, r3, #24576
+	movw	r1, #16641
+	str	r1, [r2, #344]
+	ldr	r1, .L180+4
+	bfc	r3, #15, #1
+	orr	r3, r3, #196608
 	it	mi
-	orrmi	r4, r4, #32768
-	bl	rknand_get_clk_rate
-	ldr	r3, [r5, #1828]
-	movw	r2, #8322
-	str	r2, [r3, #344]
-	add	r2, r2, #1040384
-	addw	r2, r2, #3969
-	str	r2, [r3, #304]
-	movs	r2, #38
-	str	r2, [r3, #308]
-	movs	r2, #39
-	str	r2, [r3, #308]
+	orrmi	r3, r3, #32768
+	str	r1, [r2, #304]
+	movs	r1, #38
+	str	r1, [r2, #308]
+	movs	r1, #39
+	str	r1, [r2, #308]
 	b	.L176
 .L174:
-	bfi	r4, r3, #13, #1
+	bfi	r3, r1, #13, #1
 .L176:
-	ldr	r3, [r5, #1828]
+	str	r3, [r2]
 	movs	r0, #0
-	str	r4, [r3]
-	pop	{r3, r4, r5, pc}
+	bx	lr
 .L181:
 	.align	2
 .L180:
 	.word	.LANCHOR0
+	.word	1710595
 	.fnend
 	.size	NandcSetMode, .-NandcSetMode
 	.align	1
@@ -1289,8 +1310,8 @@ FlashReadStatus:
 	movs	r0, #80
 	add	r3, r5, r4, lsl #8
 	adds	r4, r4, #8
-	str	r2, [r3, #2056]
 	lsls	r4, r4, #8
+	str	r2, [r3, #2056]
 	bl	NandcDelayns
 	ldr	r0, [r5, r4]
 	pop	{r3, r4, r5, pc}
@@ -1319,7 +1340,7 @@ ToshibaSetRRPara:
 	add	r10, r9, #288
 	mov	r6, r1
 .L195:
-	ldrb	r3, [r7, #1901]	@ zero_extendqisi2
+	ldrb	r3, [r7, #1905]	@ zero_extendqisi2
 	cmp	r4, r3
 	bcs	.L202
 	movs	r3, #85
@@ -1328,7 +1349,7 @@ ToshibaSetRRPara:
 	movs	r0, #200
 	str	r3, [r5, #4]
 	bl	NandcDelayns
-	ldrb	r3, [r7, #1900]	@ zero_extendqisi2
+	ldrb	r3, [r7, #1904]	@ zero_extendqisi2
 	cmp	r3, #34
 	bne	.L196
 	add	r3, r4, r8
@@ -1381,7 +1402,7 @@ SamsungSetRRPara:
 	mov	r7, r3
 	mov	r10, r4
 .L206:
-	ldrb	r3, [r8, #1901]	@ zero_extendqisi2
+	ldrb	r3, [r8, #1905]	@ zero_extendqisi2
 	cmp	r4, r3
 	bcs	.L208
 	str	r9, [r6, #8]
@@ -1420,7 +1441,7 @@ HynixSetRRPara:
 	mov	r9, r2
 	mov	r5, r0
 	mov	r8, r1
-	addw	r4, r6, #1902
+	addw	r4, r6, #1906
 	ldr	r3, [r6, #1788]
 	ldrb	r2, [r3, #19]	@ zero_extendqisi2
 	lsls	r3, r0, #3
@@ -1466,8 +1487,8 @@ HynixSetRRPara:
 	str	r3, [sp, #4]
 	bl	NandcDelayns
 	ldrsb	r2, [r4, #1]!
-	str	r2, [r8, #2048]
 	ldr	r3, [sp, #4]
+	str	r2, [r8, #2048]
 	b	.L215
 .L217:
 	add	fp, fp, r10
@@ -1476,7 +1497,7 @@ HynixSetRRPara:
 	add	r5, r5, r6
 	str	r3, [fp, #2056]
 	bl	NandcFlashDeCs
-	strb	r7, [r5, #2756]
+	strb	r7, [r5, #2760]
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
@@ -1511,8 +1532,8 @@ FlashSetReadRetryDefault:
 	ldrb	r3, [r2, r4, lsl #3]	@ zero_extendqisi2
 	cmp	r3, #173
 	bne	.L222
-	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
-	adds	r2, r2, #114
+	ldrb	r1, [r5, #1907]	@ zero_extendqisi2
+	adds	r2, r2, #118
 	movs	r3, #0
 	bl	HynixSetRRPara
 .L222:
@@ -1575,8 +1596,8 @@ FlashReadStatusEN:
 	movs	r2, #112
 	str	r2, [r3, #2056]
 .L233:
-	movs	r0, #80
 	lsls	r4, r4, #8
+	movs	r0, #80
 	bl	NandcDelayns
 	ldr	r0, [r6, r4]
 	uxtb	r0, r0
@@ -1786,7 +1807,7 @@ FlashSetInterfaceMode:
 	mov	lr, #128
 	mov	ip, #1
 	mov	r8, #35
-	ldrb	r3, [r5, #2760]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2764]	@ zero_extendqisi2
 	mov	r9, #32
 	mov	r10, #5
 	and	r2, r3, #1
@@ -1990,10 +2011,10 @@ SandiskSetRRPara:
 	movs	r2, #0
 	sub	r6, r0, #48
 .L304:
-	ldrb	r3, [r1, #1901]	@ zero_extendqisi2
+	ldrb	r3, [r1, #1905]	@ zero_extendqisi2
 	cmp	r2, r3
 	bcs	.L309
-	ldrb	r3, [r1, #1900]	@ zero_extendqisi2
+	ldrb	r3, [r1, #1904]	@ zero_extendqisi2
 	cmp	r3, #67
 	add	r3, r2, r4
 	ite	eq
@@ -2043,8 +2064,8 @@ FlashEraseSLc2KBlocks:
 	str	r3, [sp]
 	add	r3, sp, #12
 	bl	LogAddr2PhyAddr
-	ldrb	r2, [r8, #1616]	@ zero_extendqisi2
 	ldr	r3, [sp, #12]
+	ldrb	r2, [r8, #1616]	@ zero_extendqisi2
 	cmp	r3, r2
 	bcc	.L314
 	mov	r3, #-1
@@ -2060,20 +2081,20 @@ FlashEraseSLc2KBlocks:
 	mov	r0, r4
 	bl	NandcFlashCs
 	movs	r2, #0
-	mov	r0, r4
 	ldr	r1, [sp, #8]
+	mov	r0, r4
 	bl	FlashEraseCmd
 	mov	r0, r4
 	bl	NandcWaitFlashReady
-	mov	r0, r4
 	ldr	r1, [sp, #8]
+	mov	r0, r4
 	bl	FlashReadStatus
-	movs	r2, #0
 	ldr	r3, [sp, #8]
+	movs	r2, #0
 	sbfx	r0, r0, #0, #1
 	str	r0, [r6, r5]
-	mov	r0, r4
 	ldr	r1, [r8, #4]
+	mov	r0, r4
 	add	r1, r1, r3
 	bl	FlashEraseCmd
 	mov	r0, r4
@@ -2176,42 +2197,51 @@ FlashReadDpCmd:
 	.fnend
 	.size	FlashReadDpCmd, .-FlashReadDpCmd
 	.align	1
-	.global	FlashDeInit
+	.global	ftl_flash_de_init
 	.thumb
 	.thumb_func
-	.type	FlashDeInit, %function
-FlashDeInit:
+	.type	ftl_flash_de_init, %function
+ftl_flash_de_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, lr}
-	.save {r4, lr}
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
 	movs	r0, #0
-	ldr	r4, .L339
+	ldr	r4, .L340
 	bl	NandcWaitFlashReady
 	bl	FlashSetReadRetryDefault
-	ldrb	r3, [r4, #2761]	@ zero_extendqisi2
-	cbz	r3, .L332
-	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+	ldr	r3, .L340+4
+	ldr	r2, [r4, #2768]
+	cmp	r2, r3
+	bne	.L332
+	movs	r0, #0
+	bl	flash_enter_slc_mode
+.L332:
+	ldrb	r3, [r4, #2772]	@ zero_extendqisi2
+	ldr	r5, .L340
+	cbz	r3, .L333
+	ldrb	r3, [r5, #2764]	@ zero_extendqisi2
 	lsls	r3, r3, #31
-	bpl	.L332
+	bpl	.L333
 	movs	r0, #1
 	bl	FlashSetInterfaceMode
 	movs	r0, #1
 	bl	NandcSetMode
 	movs	r3, #0
-	strb	r3, [r4, #2761]
-.L332:
+	strb	r3, [r5, #2772]
+.L333:
 	ldr	r3, [r4, #12]
 	movs	r0, #0
 	str	r0, [r3, #336]
-	pop	{r4, pc}
-.L340:
+	pop	{r3, r4, r5, pc}
+.L341:
 	.align	2
-.L339:
+.L340:
 	.word	.LANCHOR0
+	.word	1446522928
 	.fnend
-	.size	FlashDeInit, .-FlashDeInit
+	.size	ftl_flash_de_init, .-ftl_flash_de_init
 	.align	1
 	.global	NandcRandmzSel
 	.thumb
@@ -2222,14 +2252,14 @@ NandcRandmzSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L342
+	ldr	r3, .L343
 	add	r0, r3, r0, lsl #3
 	ldr	r3, [r0, #12]
 	str	r1, [r3, #336]
 	bx	lr
-.L343:
+.L344:
 	.align	2
-.L342:
+.L343:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcRandmzSel, .-NandcRandmzSel
@@ -2248,45 +2278,45 @@ NandcTimeCfg:
 	mov	r4, r0
 	movs	r0, #0
 	bl	rknand_get_clk_rate
-	ldr	r1, .L354
+	ldr	r1, .L355
 	bl	__aeabi_idiv
-	ldr	r3, .L354+4
+	ldr	r3, .L355+4
 	ldr	r3, [r3, #1828]
 	cmp	r0, #250
-	ble	.L345
+	ble	.L346
 	movw	r2, #8354
-	b	.L352
-.L345:
+	b	.L353
+.L346:
 	cmp	r0, #220
-	bgt	.L353
+	bgt	.L354
 	cmp	r0, #185
-	ble	.L348
+	ble	.L349
 	movw	r2, #4226
-	b	.L352
-.L348:
+	b	.L353
+.L349:
 	cmp	r0, #160
-	ble	.L349
+	ble	.L350
 	movw	r2, #4194
-	b	.L352
-.L349:
+	b	.L353
+.L350:
 	cmp	r4, #35
-	bhi	.L350
+	bhi	.L351
 	movw	r2, #4193
-	b	.L352
-.L350:
+	b	.L353
+.L351:
 	cmp	r4, #99
-	bls	.L351
-.L353:
+	bls	.L352
+.L354:
 	movw	r2, #8322
-	b	.L352
-.L351:
-	movw	r2, #4225
+	b	.L353
 .L352:
+	movw	r2, #4225
+.L353:
 	str	r2, [r3, #4]
 	pop	{r4, pc}
-.L355:
+.L356:
 	.align	2
-.L354:
+.L355:
 	.word	1000000
 	.word	.LANCHOR0
 	.fnend
@@ -2304,25 +2334,25 @@ FlashTimingCfg:
 	sub	r3, r0, #4192
 	subs	r3, r3, #1
 	cmp	r3, #1
-	bls	.L357
+	bls	.L358
 	sub	r3, r0, #4224
 	subs	r3, r3, #1
 	cmp	r3, #1
-	bls	.L357
+	bls	.L358
 	movw	r3, #8322
 	cmp	r0, r3
-	bne	.L358
-.L357:
-	ldr	r3, .L359
+	bne	.L359
+.L358:
+	ldr	r3, .L360
 	ldr	r3, [r3, #1828]
 	str	r0, [r3, #4]
-.L358:
-	ldr	r3, .L359+4
+.L359:
+	ldr	r3, .L360+4
 	ldrb	r0, [r3, #277]	@ zero_extendqisi2
 	b	NandcTimeCfg
-.L360:
+.L361:
 	.align	2
-.L359:
+.L360:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
 	.fnend
@@ -2338,32 +2368,39 @@ NandcInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
+	movs	r1, #0
+	ldr	r3, .L364
+	movs	r2, #1
 	movs	r5, #0
-	ldr	r4, .L362
-	movs	r3, #1
-	str	r0, [r4, #1828]
-	str	r0, [r4, #12]
-	str	r3, [r4, #24]
-	movs	r3, #2
-	str	r0, [r4, #20]
-	str	r3, [r4, #32]
-	movs	r3, #3
-	str	r0, [r4, #28]
-	str	r0, [r4, #36]
-	str	r5, [r4, #16]
-	str	r3, [r4, #40]
-	ldr	r3, [r0]
-	and	r3, r3, #253952
-	ubfx	r2, r3, #13, #1
-	str	r2, [r4, #2764]
-	ldr	r2, [r0, #352]
-	and	r3, r3, #245760
-	orr	r3, r3, #256
-	ubfx	r2, r2, #16, #4
-	str	r2, [r4, #2768]
-	ldr	r2, [r0, #352]
-	str	r2, [r4, #2772]
-	str	r3, [r0]
+	str	r1, [r3, #16]
+	str	r0, [r3, #12]
+	str	r2, [r3, #24]
+	movs	r2, #2
+	str	r0, [r3, #20]
+	str	r2, [r3, #32]
+	movs	r2, #3
+	str	r0, [r3, #28]
+	str	r0, [r3, #36]
+	str	r0, [r3, #1828]
+	str	r2, [r3, #40]
+	ldr	r2, [r0]
+	and	r2, r2, #253952
+	ubfx	r4, r2, #13, #1
+	bfi	r2, r1, #13, #1
+	ldr	r1, [r0, #352]
+	orr	r2, r2, #256
+	str	r4, [r3, #2776]
+	movw	r4, #2049
+	ubfx	r1, r1, #16, #4
+	str	r1, [r3, #2780]
+	ldr	r1, [r0, #352]
+	cmp	r1, r4
+	mov	r4, r3
+	str	r1, [r3, #2768]
+	itt	eq
+	moveq	r3, #8
+	streq	r3, [r4, #2780]
+	str	r2, [r0]
 	movs	r0, #40
 	ldr	r3, [r4, #1828]
 	str	r5, [r3, #336]
@@ -2372,21 +2409,21 @@ NandcInit:
 	movw	r2, #8322
 	mov	r0, #36864
 	str	r2, [r3, #344]
-	ldr	r2, .L362+4
+	ldr	r2, .L364+4
 	str	r2, [r3, #304]
 	bl	ftl_malloc
-	str	r5, [r4, #2804]
 	str	r5, [r4, #2812]
-	str	r0, [r4, #2776]
-	str	r0, [r4, #2780]
-	add	r0, r0, #32768
+	str	r5, [r4, #2820]
 	str	r0, [r4, #2784]
+	str	r0, [r4, #2788]
+	add	r0, r0, #32768
+	str	r0, [r4, #2792]
 	pop	{r3, r4, r5, pc}
-.L363:
+.L365:
 	.align	2
-.L362:
+.L364:
 	.word	.LANCHOR0
-	.word	1579009
+	.word	1710593
 	.fnend
 	.size	NandcInit, .-NandcInit
 	.align	1
@@ -2400,7 +2437,7 @@ NandcGetTimeCfg:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	ldr	r4, .L365
+	ldr	r4, .L367
 	ldr	r5, [r4, #1828]
 	ldr	r5, [r5, #4]
 	str	r5, [r0]
@@ -2417,9 +2454,9 @@ NandcGetTimeCfg:
 	orr	r2, r2, r1, lsl #16
 	str	r2, [r3]
 	pop	{r4, r5, pc}
-.L366:
+.L368:
 	.align	2
-.L365:
+.L367:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
@@ -2433,37 +2470,37 @@ NandcBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L375
+	ldr	r3, .L377
 	movs	r1, #1
 	ldr	r2, [r3, #1828]
-	str	r0, [r3, #2816]
+	str	r0, [r3, #2824]
 	movs	r3, #0
 	str	r1, [r2, #8]
 	movs	r1, #16
 	cmp	r0, r1
 	bfi	r3, r1, #8, #8
 	bfc	r3, #18, #1
-	bne	.L368
-.L371:
+	bne	.L370
+.L373:
 	bfc	r3, #4, #1
-	b	.L369
-.L368:
+	b	.L371
+.L370:
 	cmp	r0, #24
-	bne	.L370
+	bne	.L372
 	orr	r3, r3, #16
-	b	.L369
-.L370:
+	b	.L371
+.L372:
 	cmp	r0, #40
 	orr	r3, r3, #262144
 	orr	r3, r3, #16
-	beq	.L371
-.L369:
+	beq	.L373
+.L371:
 	orr	r3, r3, #1
 	str	r3, [r2, #12]
 	bx	lr
-.L376:
+.L378:
 	.align	2
-.L375:
+.L377:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcBchSel, .-NandcBchSel
@@ -2477,32 +2514,33 @@ FlashBchSel:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L378
+	ldr	r3, .L380
 	strb	r0, [r3, #1892]
 	b	NandcBchSel
-.L379:
+.L381:
 	.align	2
-.L378:
+.L380:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashBchSel, .-FlashBchSel
 	.align	1
-	.global	FlashResume
+	.global	ftl_flash_resume
 	.thumb
 	.thumb_func
-	.type	FlashResume, %function
-FlashResume:
+	.type	ftl_flash_resume, %function
+ftl_flash_resume:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L388
-	push	{r4, r5, r6, lr}
-	.save {r4, r5, r6, lr}
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
 	movs	r5, #0
+	ldr	r3, .L390
+	add	r7, r3, #1792
 	ldr	r2, [r3, #1828]
-	add	r6, r3, #1792
-	ldr	r1, [r3, #1832]
 	mov	r4, r3
+	ldr	r1, [r3, #1832]
+	ldr	r6, [r3, #1848]
 	str	r1, [r2]
 	ldr	r1, [r3, #1836]
 	ldr	r2, [r3, #1828]
@@ -2511,97 +2549,53 @@ FlashResume:
 	str	r1, [r2, #8]
 	ldr	r1, [r3, #1844]
 	str	r1, [r2, #12]
-	ldr	r1, [r3, #1848]
-	str	r1, [r2, #304]
 	ldr	r1, [r3, #1852]
+	str	r6, [r2, #304]
 	str	r1, [r2, #308]
 	ldr	r1, [r3, #1856]
 	str	r1, [r2, #336]
 	ldr	r1, [r3, #1860]
 	str	r1, [r2, #344]
-.L382:
-	ldrb	r3, [r6, r5, lsl #3]	@ zero_extendqisi2
+.L384:
+	ldrb	r3, [r7, r5, lsl #3]	@ zero_extendqisi2
 	subs	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L381
+	bhi	.L383
 	uxtb	r0, r5
 	bl	FlashReset
-.L381:
+.L383:
 	adds	r5, r5, #1
 	cmp	r5, #4
-	bne	.L382
-	ldrb	r3, [r4, #2761]	@ zero_extendqisi2
-	ldr	r5, .L388
-	cbz	r3, .L383
+	bne	.L384
+	ldrb	r3, [r4, #2772]	@ zero_extendqisi2
+	ldr	r5, .L390
+	cbz	r3, .L385
 	movs	r0, #1
 	bl	NandcSetMode
-	ldrb	r0, [r5, #2760]	@ zero_extendqisi2
+	ldrb	r0, [r5, #2764]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r5, #2760]	@ zero_extendqisi2
+	ldrb	r0, [r5, #2764]	@ zero_extendqisi2
 	bl	NandcSetMode
-	ldrb	r0, [r5, #1849]	@ zero_extendqisi2
+	ubfx	r0, r6, #8, #8
 	bl	NandcSetDdrPara
-.L383:
+.L385:
 	ldr	r3, [r4, #1788]
 	ldrb	r0, [r3, #20]	@ zero_extendqisi2
-	bl	FlashBchSel
-	movs	r0, #0
-	pop	{r4, r5, r6, pc}
-.L389:
+	pop	{r3, r4, r5, r6, r7, lr}
+	b	FlashBchSel
+.L391:
 	.align	2
-.L388:
+.L390:
 	.word	.LANCHOR0
 	.fnend
-	.size	FlashResume, .-FlashResume
-	.align	1
-	.global	NandCIrqEnable
-	.thumb
-	.thumb_func
-	.type	NandCIrqEnable, %function
-NandCIrqEnable:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	movs	r3, #1
-	ldr	r2, [r0, #368]
-	lsls	r3, r3, r1
-	orrs	r2, r2, r3
-	str	r2, [r0, #368]
-	ldr	r2, [r0, #364]
-	orrs	r3, r3, r2
-	str	r3, [r0, #364]
-	bx	lr
-	.fnend
-	.size	NandCIrqEnable, .-NandCIrqEnable
-	.align	1
-	.global	NandCIrqDisable
-	.thumb
-	.thumb_func
-	.type	NandCIrqDisable, %function
-NandCIrqDisable:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	movs	r3, #1
-	ldr	r2, [r0, #368]
-	lsls	r3, r3, r1
-	orrs	r2, r2, r3
-	str	r2, [r0, #368]
-	ldr	r2, [r0, #364]
-	bic	r3, r2, r3
-	str	r3, [r0, #364]
-	bx	lr
-	.fnend
-	.size	NandCIrqDisable, .-NandCIrqDisable
+	.size	ftl_flash_resume, .-ftl_flash_resume
 	.align	1
-	.global	rk_nandc_get_irq_status
+	.global	ftl_nandc_get_irq_status
 	.thumb
 	.thumb_func
-	.type	rk_nandc_get_irq_status, %function
-rk_nandc_get_irq_status:
+	.type	ftl_nandc_get_irq_status, %function
+ftl_nandc_get_irq_status:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -2609,7 +2603,7 @@ rk_nandc_get_irq_status:
 	ldr	r0, [r0, #372]
 	bx	lr
 	.fnend
-	.size	rk_nandc_get_irq_status, .-rk_nandc_get_irq_status
+	.size	ftl_nandc_get_irq_status, .-ftl_nandc_get_irq_status
 	.align	1
 	.global	rk_nandc_flash_ready
 	.thumb
@@ -2620,8 +2614,13 @@ rk_nandc_flash_ready:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movs	r1, #1
-	b	NandCIrqDisable
+	ldr	r3, [r0, #368]
+	orr	r3, r3, #2
+	str	r3, [r0, #368]
+	ldr	r3, [r0, #364]
+	bic	r3, r3, #2
+	str	r3, [r0, #364]
+	bx	lr
 	.fnend
 	.size	rk_nandc_flash_ready, .-rk_nandc_flash_ready
 	.align	1
@@ -2637,19 +2636,26 @@ NandcIqrWaitFlashReady:
 	.save {r4, lr}
 	mov	r4, r0
 	bl	rk_nandc_rb_irq_flag_init
-	mov	r0, r4
-	movs	r1, #1
-	bl	NandCIrqEnable
+	ldr	r3, [r4, #368]
+	orr	r3, r3, #2
+	str	r3, [r4, #368]
+	ldr	r3, [r4, #364]
+	orr	r3, r3, #2
+	str	r3, [r4, #364]
 	ldr	r3, [r4]
-	mov	r0, r4
 	lsls	r3, r3, #22
 	bmi	.L395
+	mov	r0, r4
 	pop	{r4, lr}
 	b	wait_for_nand_flash_ready
 .L395:
-	movs	r1, #1
-	pop	{r4, lr}
-	b	NandCIrqDisable
+	ldr	r3, [r4, #368]
+	orr	r3, r3, #2
+	str	r3, [r4, #368]
+	ldr	r3, [r4, #364]
+	bic	r3, r3, #2
+	str	r3, [r4, #364]
+	pop	{r4, pc}
 	.fnend
 	.size	NandcIqrWaitFlashReady, .-NandcIqrWaitFlashReady
 	.align	1
@@ -2664,21 +2670,21 @@ FlashEraseBlocks:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r0
-	ldr	r4, .L425
+	ldr	r4, .L430
 	.pad #28
 	sub	sp, sp, #28
 	mov	r10, r1
 	mov	r8, r2
 	ldrb	r5, [r4]	@ zero_extendqisi2
-	cbz	r5, .L410
+	cbz	r5, .L414
 	mov	r1, r2
 	bl	FlashEraseSLc2KBlocks
 	b	.L398
-.L410:
+.L414:
 	mov	fp, r4
 .L397:
 	cmp	r5, r8
-	bcs	.L423
+	bcs	.L428
 	movs	r3, #36
 	movs	r1, #0
 	add	r2, sp, #16
@@ -2700,7 +2706,7 @@ FlashEraseBlocks:
 	str	r3, [r9, r6]
 	b	.L400
 .L399:
-	ldrb	r3, [fp, #2820]	@ zero_extendqisi2
+	ldrb	r3, [fp, #2828]	@ zero_extendqisi2
 	cmp	r3, #0
 	add	r3, r4, r0, lsl #4
 	it	eq
@@ -2751,24 +2757,25 @@ FlashEraseBlocks:
 	movne	r2, #1
 	bl	FlashWaitReadyEN
 	mov	r0, r6
-	mov	r2, r7
 	ldr	r1, [sp, #16]
+	mov	r2, r7
 	bl	FlashEraseCmd
 	mov	r0, r6
 	bl	NandcFlashDeCs
 .L400:
 	adds	r5, r5, #1
 	b	.L397
-.L423:
+.L428:
 	ldr	r0, [r4, #1828]
 	movs	r5, #0
 	bl	NandcIqrWaitFlashReady
-	ldr	r6, .L425
+	ldr	r6, .L430
 	addw	r7, r6, #1660
 .L407:
-	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
-	cmp	r5, r3
-	bcs	.L424
+	ldrb	r2, [r4, #1616]	@ zero_extendqisi2
+	ldr	r3, .L430
+	cmp	r5, r2
+	bcs	.L429
 	uxtb	r0, r5
 	bl	FlashWaitCmdDone
 	cmp	r10, #1
@@ -2781,15 +2788,33 @@ FlashEraseBlocks:
 .L408:
 	adds	r5, r5, #1
 	b	.L407
-.L424:
+.L429:
+	ldr	r2, [r3, #2832]
+	cbnz	r2, .L410
+.L412:
 	movs	r0, #0
+	b	.L398
+.L410:
+	ldrb	r3, [r3, #1792]	@ zero_extendqisi2
+	cmp	r3, #69
+	bne	.L412
+	movs	r3, #0
+	movs	r2, #36
+	mov	r1, r3
+.L411:
+	cmp	r3, r8
+	beq	.L412
+	mul	r0, r2, r3
+	adds	r3, r3, #1
+	str	r1, [r9, r0]
+	b	.L411
 .L398:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L426:
+.L431:
 	.align	2
-.L425:
+.L430:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashEraseBlocks, .-FlashEraseBlocks
@@ -2803,8 +2828,13 @@ rk_nandc_flash_xfer_completed:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	movs	r1, #0
-	b	NandCIrqDisable
+	ldr	r3, [r0, #368]
+	orr	r3, r3, #1
+	str	r3, [r0, #368]
+	ldr	r3, [r0, #364]
+	bic	r3, r3, #1
+	str	r3, [r0, #364]
+	bx	lr
 	.fnend
 	.size	rk_nandc_flash_xfer_completed, .-rk_nandc_flash_xfer_completed
 	.align	1
@@ -2820,7 +2850,7 @@ NandcSendDumpDataStart:
 	ldr	r2, [r0, #16]
 	.pad #8
 	sub	sp, sp, #8
-	ldr	r3, .L429
+	ldr	r3, .L434
 	str	r2, [sp, #4]
 	ldr	r2, [sp, #4]
 	bic	r2, r2, #4
@@ -2833,9 +2863,9 @@ NandcSendDumpDataStart:
 	add	sp, sp, #8
 	@ sp needed
 	bx	lr
-.L430:
+.L435:
 	.align	2
-.L429:
+.L434:
 	.word	538969130
 	.fnend
 	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
@@ -2851,12 +2881,12 @@ NandcSendDumpDataDone:
 	@ link register save eliminated.
 	.pad #8
 	sub	sp, sp, #8
-.L432:
+.L437:
 	ldr	r3, [r0, #8]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	lsls	r3, r3, #11
-	bpl	.L432
+	bpl	.L437
 	add	sp, sp, #8
 	@ sp needed
 	bx	lr
@@ -2879,15 +2909,15 @@ NandcXferStart:
 	mov	r7, r1
 	ldr	r2, [sp, #60]
 	ldr	fp, [sp, #56]
-	cbnz	r2, .L449
+	cbnz	r2, .L454
 	adds	r2, fp, #0
 	it	ne
 	movne	r2, #1
-	b	.L436
-.L449:
+	b	.L441
+.L454:
 	movs	r2, #1
-.L436:
-	ldr	r5, .L454
+.L441:
+	ldr	r5, .L459
 	movs	r4, #0
 	add	r0, r5, r0, lsl #3
 	ldr	r6, [r0, #12]
@@ -2905,32 +2935,35 @@ NandcXferStart:
 	orr	r4, r4, #536870912
 	orr	r4, r4, #1024
 	bfi	r4, r3, #4, #1
-	ldr	r3, [r5, #2768]
+	ldr	r3, [r5, #2780]
 	cmp	r3, #3
-	bls	.L437
+	bls	.L442
 	ldr	r3, [r6, #16]
 	str	r3, [sp, #12]
 	ldr	r3, [sp, #12]
 	bic	r3, r3, #4
 	str	r3, [sp, #12]
 	cmp	r2, #0
-	beq	.L438
-	cbnz	r7, .L439
-.L447:
-	add	r8, r8, #1
+	beq	.L443
+	cbnz	r7, .L444
+.L452:
 	mov	r0, r6
+	add	r8, r8, #1
 	bl	rk_nandc_xfer_irq_flag_init
-	mov	r0, r6
-	movs	r1, #0
+	ldr	r3, [r6, #368]
 	asr	r8, r8, #1
-	bl	NandCIrqEnable
+	orr	r3, r3, #1
+	str	r3, [r6, #368]
+	ldr	r3, [r6, #364]
 	bfi	r4, r8, #22, #6
+	orr	r3, r3, #1
+	str	r3, [r6, #364]
 	cmp	fp, #0
-	beq	.L440
+	beq	.L445
 	mov	r0, fp
-	b	.L441
-.L439:
-	ldr	r3, [r5, #2816]
+	b	.L446
+.L444:
+	ldr	r3, [r5, #2824]
 	mov	ip, r5
 	ldr	r0, [sp, #60]
 	cmp	r3, #25
@@ -2942,53 +2975,53 @@ NandcXferStart:
 	str	r3, [sp, #4]
 	movs	r3, #0
 	mov	r1, r3
-.L443:
+.L448:
 	ldr	r2, [sp, #4]
 	cmp	r1, r2
-	bcs	.L447
+	bcs	.L452
 	ldr	r2, [sp, #60]
 	lsr	r10, r3, #2
-	cbz	r2, .L444
+	cbz	r2, .L449
 	ldrh	r2, [r0, #2]
 	ldrh	lr, [r0], #4
 	orr	lr, lr, r2, lsl #16
-	ldr	r2, [ip, #2784]
+	ldr	r2, [ip, #2792]
 	str	lr, [r2, r10, lsl #2]
-	b	.L445
-.L444:
-	ldr	r2, [ip, #2784]
+	b	.L450
+.L449:
+	ldr	r2, [ip, #2792]
 	mov	lr, r2
 	mov	r2, #-1
 	str	r2, [lr, r10, lsl #2]
-.L445:
+.L450:
 	ldr	r2, [sp]
 	adds	r1, r1, #1
 	add	r3, r3, r2
-	b	.L443
-.L440:
-	ldr	r0, [r5, #2780]
-.L441:
-	ldr	r3, [r5, #2784]
+	b	.L448
+.L445:
+	ldr	r0, [r5, #2788]
+.L446:
+	ldr	r3, [r5, #2792]
 	ubfx	r8, r4, #22, #5
 	mov	r2, r7
-	str	r0, [r5, #2788]
+	str	r0, [r5, #2796]
 	lsl	r1, r8, #10
-	str	r3, [r5, #2792]
+	str	r3, [r5, #2800]
 	bl	rknand_dma_map_single
 	mov	r2, r7
 	lsl	r1, r8, #7
 	clz	r7, r7
 	lsrs	r7, r7, #5
-	str	r0, [r5, #2796]
-	ldr	r0, [r5, #2792]
+	str	r0, [r5, #2804]
+	ldr	r0, [r5, #2800]
 	bl	rknand_dma_map_single
 	movs	r3, #1
-	str	r3, [r5, #2804]
+	str	r3, [r5, #2812]
 	tst	fp, #3
-	ldr	r3, [r5, #2796]
-	str	r0, [r5, #2800]
+	ldr	r3, [r5, #2804]
+	str	r0, [r5, #2808]
 	str	r3, [r6, #20]
-	ldr	r3, [r5, #2800]
+	ldr	r3, [r5, #2808]
 	str	r3, [r6, #24]
 	mov	r3, #0
 	str	r3, [sp, #12]
@@ -3014,10 +3047,10 @@ NandcXferStart:
 	ldr	r3, [sp, #12]
 	orr	r3, r3, #1
 	str	r3, [sp, #12]
-.L438:
+.L443:
 	ldr	r3, [sp, #12]
 	str	r3, [r6, #16]
-.L437:
+.L442:
 	str	r9, [r6, #12]
 	str	r4, [r6, #8]
 	orr	r4, r4, #4
@@ -3025,9 +3058,9 @@ NandcXferStart:
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L455:
+.L460:
 	.align	2
-.L454:
+.L459:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcXferStart, .-NandcXferStart
@@ -3043,14 +3076,14 @@ Ftl_log2:
 	@ link register save eliminated.
 	movs	r1, #0
 	movs	r2, #1
-.L457:
+.L462:
 	cmp	r2, r0
 	uxth	r3, r1
 	add	r1, r1, #1
-	bhi	.L459
+	bhi	.L464
 	lsls	r2, r2, #1
-	b	.L457
-.L459:
+	b	.L462
+.L464:
 	subs	r0, r3, #1
 	uxth	r0, r0
 	bx	lr
@@ -3079,25 +3112,25 @@ FtlSysBlkNumInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L463
+	ldr	r3, .L468
 	cmp	r0, #23
 	it	ls
 	movls	r0, #24
-	ldrh	r2, [r3, #2828]
-	ldrh	r1, [r3, #2838]
-	str	r0, [r3, #2824]
+	ldrh	r2, [r3, #2840]
+	ldrh	r1, [r3, #2850]
+	str	r0, [r3, #2836]
 	muls	r2, r0, r2
 	subs	r0, r1, r0
-	ldr	r1, [r3, #2844]
-	strh	r0, [r3, #2836]	@ movhi
+	ldr	r1, [r3, #2856]
+	strh	r0, [r3, #2848]	@ movhi
 	movs	r0, #0
-	str	r2, [r3, #2832]
+	str	r2, [r3, #2844]
 	subs	r2, r1, r2
-	str	r2, [r3, #2840]
+	str	r2, [r3, #2852]
 	bx	lr
-.L464:
+.L469:
 	.align	2
-.L463:
+.L468:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
@@ -3116,29 +3149,29 @@ FtlConstantsInit:
 	ldrh	r2, [r5, #14]
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r4, .L494
+	ldr	r4, .L498
 	ldrh	lr, [r0, #8]
 	str	r2, [sp]
-	addw	r1, r4, #2856
+	addw	r1, r4, #2868
 	ldrh	r2, [sp]
 	ldrh	r3, [r0, #10]
 	ldrh	r0, [r0, #12]
-	strh	r2, [r4, #2838]	@ movhi
+	strh	r2, [r4, #2850]	@ movhi
 	movs	r2, #0
-	strh	lr, [r4, #2848]	@ movhi
-	strh	r3, [r4, #2850]	@ movhi
-	strh	r0, [r4, #2852]	@ movhi
-.L466:
+	strh	lr, [r4, #2860]	@ movhi
+	strh	r3, [r4, #2862]	@ movhi
+	strh	r0, [r4, #2864]	@ movhi
+.L471:
 	strb	r2, [r2, r1]
 	adds	r2, r2, #1
 	cmp	r2, #32
-	bne	.L466
+	bne	.L471
 	ldrh	r1, [r5, #14]
 	ldrh	r2, [r5, #20]
 	cmp	r2, r1, lsr #8
-	bcs	.L467
+	bcs	.L472
 	uxtb	r10, r0
-	ldr	r9, .L494+4
+	ldr	r9, .L498+4
 	lsl	r2, r10, #1
 	uxtb	r2, r2
 	str	r2, [sp, #8]
@@ -3146,9 +3179,9 @@ FtlConstantsInit:
 	muls	r2, r0, r2
 	str	r2, [sp, #4]
 	movs	r2, #0
-.L468:
+.L473:
 	cmp	r2, r0
-	bcs	.L470
+	bcs	.L475
 	ldr	r6, [sp, #4]
 	rsb	ip, r0, r2
 	uxtb	r1, r2
@@ -3158,10 +3191,10 @@ FtlConstantsInit:
 	str	r6, [sp, #12]
 	movs	r6, #0
 	mov	r8, r6
-.L471:
+.L476:
 	cmp	r8, r3
 	add	r6, r6, r0
-	bcs	.L493
+	bcs	.L497
 	ldr	r7, [sp, #12]
 	add	fp, r1, r10
 	strb	r1, [ip, r6]
@@ -3170,176 +3203,182 @@ FtlConstantsInit:
 	ldr	r7, [sp, #8]
 	add	r1, r1, r7
 	uxtb	r1, r1
-	b	.L471
-.L493:
+	b	.L476
+.L497:
 	adds	r2, r2, #1
-	b	.L468
-.L470:
+	b	.L473
+.L475:
 	lsls	r3, r3, #1
-	strh	r3, [r4, #2850]	@ movhi
+	strh	r3, [r4, #2862]	@ movhi
 	ldr	r3, [sp]
 	lsrs	r7, r3, #1
-	strh	r7, [r4, #2838]	@ movhi
-.L467:
+	strh	r7, [r4, #2850]	@ movhi
+.L472:
 	cmp	lr, #1
 	mov	r3, #5
-	strh	r3, [r4, #2888]	@ movhi
+	strh	r3, [r4, #2900]	@ movhi
 	mov	r3, #0
-	strh	r3, [r4, #2890]	@ movhi
+	strh	r3, [r4, #2902]	@ movhi
 	it	eq
-	ldreq	r3, .L494
+	ldreq	r3, .L498
 	ldrb	r8, [r4]	@ zero_extendqisi2
 	it	eq
-	strheq	lr, [r3, #2888]	@ movhi
+	strheq	lr, [r3, #2900]	@ movhi
 	mov	r3, #4352
-	strh	r3, [r4, #2892]	@ movhi
+	strh	r3, [r4, #2904]	@ movhi
 	cmp	r8, #0
-	beq	.L473
-	ldr	r3, .L494
+	beq	.L478
+	ldr	r3, .L498
 	mov	r2, #384
-	strh	r2, [r3, #2892]	@ movhi
-.L473:
-	ldrh	r6, [r4, #2838]
-	ldrh	r7, [r4, #2850]
+	strh	r2, [r3, #2904]	@ movhi
+.L478:
+	ldrh	r6, [r4, #2850]
+	ldrh	r7, [r4, #2862]
 	smulbb	r7, r7, r0
 	smulbb	r0, r6, r0
 	uxth	r7, r7
-	strh	r7, [r4, #2828]	@ movhi
+	strh	r7, [r4, #2840]	@ movhi
 	uxth	r0, r0
-	strh	r0, [r4, #2894]	@ movhi
+	strh	r0, [r4, #2906]	@ movhi
 	bl	Ftl_log2
 	ldrh	r9, [r5, #16]
 	ldrh	fp, [r5, #20]
 	ldrh	r1, [r5, #18]
 	smulbb	r3, r7, r9
-	strh	r9, [r4, #2898]	@ movhi
-	strh	r1, [r4, #2900]	@ movhi
-	strh	fp, [r4, #2904]	@ movhi
-	strh	r3, [r4, #2902]	@ movhi
-	strh	r0, [r4, #2896]	@ movhi
-	mov	r0, fp
+	strh	r9, [r4, #2910]	@ movhi
+	strh	r1, [r4, #2912]	@ movhi
 	str	r1, [sp]
+	strh	fp, [r4, #2916]	@ movhi
+	strh	r3, [r4, #2914]	@ movhi
+	strh	r0, [r4, #2908]	@ movhi
+	mov	r0, fp
 	bl	Ftl_log2
 	lsl	r3, fp, #9
 	cmp	r6, #1024
+	ldr	r1, [sp]
 	uxth	r3, r3
-	strh	r3, [r4, #2908]	@ movhi
+	strh	r3, [r4, #2920]	@ movhi
 	it	hi
-	ldrhi	r2, .L494
+	ldrhi	r2, .L498
 	lsr	r3, r3, #8
-	strh	r3, [r4, #2910]	@ movhi
+	strh	r3, [r4, #2922]	@ movhi
 	ldrh	r3, [r5, #26]
-	strh	r3, [r4, #2912]	@ movhi
+	mul	r1, r1, fp
+	strh	r3, [r4, #2924]	@ movhi
 	mul	r3, r6, r7
-	str	r3, [r4, #2844]
+	str	r3, [r4, #2856]
 	itt	hi
 	uxtbhi	r3, r6
-	strhhi	r3, [r2, #2890]	@ movhi
+	strhhi	r3, [r2, #2902]	@ movhi
 	mov	r10, r0
-	ldrh	r5, [r4, #2890]
-	ldr	r1, [sp]
+	ldrh	r5, [r4, #2902]
+	strh	r0, [r4, #2918]	@ movhi
 	subs	r5, r6, r5
-	strh	r0, [r4, #2906]	@ movhi
-	ldrh	r0, [r4, #2892]
+	ldrh	r0, [r4, #2904]
+	ldr	r3, .L498
 	muls	r5, r7, r5
-	ldr	r3, .L494
 	lsls	r0, r0, #3
-	mul	r1, r1, fp
 	str	r3, [sp]
 	mul	r5, fp, r5
 	mul	r5, r9, r5
 	asrs	r5, r5, #11
-	str	r5, [r4, #2916]
+	str	r5, [r4, #2928]
 	bl	__aeabi_idiv
 	ldr	r3, [sp]
 	uxth	r0, r0
 	cmp	r0, #4
-	itet	ls
+	itee	hi
+	strhhi	r0, [r3, #2932]	@ movhi
 	movls	r2, #4
-	strhhi	r0, [r3, #2920]	@ movhi
-	strhls	r2, [r3, #2920]	@ movhi
+	strhls	r2, [r3, #2932]	@ movhi
 	cmp	r8, #0
-	beq	.L477
+	beq	.L482
 	mov	r3, #640
-	strh	r3, [r4, #2892]	@ movhi
-.L477:
-	ldrh	r3, [r4, #2892]
+	strh	r3, [r4, #2904]	@ movhi
+.L482:
+	ldrh	r3, [r4, #2904]
 	lsls	r6, r6, #6
 	mov	r1, r7
-	ldr	r5, .L494
+	ldr	r5, .L498
 	asr	r3, r3, r10
 	add	r10, r10, #9
 	asr	r6, r6, r10
 	adds	r3, r3, #2
-	strh	r3, [r4, #2922]	@ movhi
+	strh	r3, [r4, #2934]	@ movhi
 	uxth	r0, r6
-	strh	r6, [r4, #2924]	@ movhi
+	strh	r6, [r4, #2936]	@ movhi
 	add	r6, r0, #8
 	mul	r3, r7, r0
-	ldrh	r0, [r4, #2920]
-	str	r3, [r4, #2928]
+	ldrh	r0, [r4, #2932]
+	str	r3, [r4, #2940]
 	bl	__aeabi_uidiv
 	cmp	r7, #1
-	ldr	r7, .L494
 	uxtah	r0, r6, r0
+	ldr	r6, .L498
 	it	eq
 	addeq	r0, r0, #4
-	str	r0, [r5, #2824]
-	ldrh	r0, [r4, #2824]
+	str	r0, [r5, #2836]
+	ldrh	r0, [r4, #2836]
 	bl	FtlSysBlkNumInit
-	ldr	r3, [r4, #2824]
-	ldr	r5, [r4, #2840]
+	ldr	r3, [r4, #2836]
+	ldr	r5, [r4, #2852]
 	mov	r0, #2048
-	ldrh	r6, [r4, #2904]
-	str	r3, [r4, #2932]
-	ldrh	r3, [r4, #2898]
+	ldrh	r7, [r4, #2916]
+	str	r3, [r4, #2944]
+	ldrh	r3, [r4, #2910]
 	lsls	r5, r5, #2
-	mov	r1, r6
+	mov	r1, r7
 	muls	r5, r3, r5
-	ldrh	r3, [r4, #2906]
+	ldrh	r3, [r4, #2918]
 	adds	r3, r3, #9
 	lsrs	r5, r5, r3
 	adds	r5, r5, #2
 	uxth	r5, r5
-	strh	r5, [r4, #2936]	@ movhi
+	strh	r5, [r4, #2948]	@ movhi
 	bl	__aeabi_idiv
-	ldrh	r2, [r4, #2920]
+	ldrh	r2, [r4, #2932]
 	movs	r3, #0
-	str	r3, [r4, #2940]
+	str	r3, [r4, #1896]
 	adds	r3, r2, #3
-	strh	r3, [r4, #2920]	@ movhi
-	ldr	r3, [r4, #2928]
+	strh	r3, [r4, #2932]	@ movhi
+	ldr	r3, [r4, #2940]
 	adds	r1, r3, #3
-	str	r1, [r4, #2928]
-	ldrb	r1, [r4, #76]	@ zero_extendqisi2
-	strh	r0, [r4, #2938]	@ movhi
-	cbz	r1, .L480
+	str	r1, [r4, #2940]
+	strh	r0, [r4, #2950]	@ movhi
+	ldrb	r0, [r4, #76]	@ zero_extendqisi2
+	cbz	r0, .L485
 	adds	r2, r2, #4
 	adds	r3, r3, #5
-	strh	r2, [r7, #2920]	@ movhi
-	str	r3, [r7, #2928]
-.L480:
-	ldrh	r2, [r4, #2836]
+	strh	r2, [r6, #2932]	@ movhi
+	b	.L496
+.L485:
+	cmp	r1, #7
+	bhi	.L486
+	movs	r3, #8
+.L496:
+	str	r3, [r6, #2940]
+.L486:
+	ldrh	r2, [r4, #2848]
 	movs	r3, #0
-	strh	r3, [r4, #2944]	@ movhi
+	strh	r3, [r4, #2952]	@ movhi
 	movs	r0, #0
 	lsrs	r3, r2, #3
 	add	r3, r3, r2, lsl #1
 	adds	r3, r3, #52
 	add	r5, r3, r5, lsl #2
-	cmp	r5, r6, lsl #9
+	cmp	r5, r7, lsl #9
 	ittt	cc
 	movcc	r2, #1
-	ldrcc	r3, .L494
-	strhcc	r2, [r3, #2944]	@ movhi
+	ldrcc	r3, .L498
+	strhcc	r2, [r3, #2952]	@ movhi
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L495:
+.L499:
 	.align	2
-.L494:
+.L498:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2856
+	.word	.LANCHOR0+2868
 	.fnend
 	.size	FtlConstantsInit, .-FtlConstantsInit
 	.align	1
@@ -3352,26 +3391,26 @@ IsBlkInVendorPart:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L503
-	ldrh	r3, [r2, #2946]
-	cbz	r3, .L502
-	ldr	r3, [r2, #2948]
-	ldrh	r2, [r2, #2920]
+	ldr	r2, .L507
+	ldrh	r3, [r2, #2954]
+	cbz	r3, .L506
+	ldr	r3, [r2, #2956]
+	ldrh	r2, [r2, #2932]
 	add	r2, r3, r2, lsl #1
-.L498:
+.L502:
 	cmp	r3, r2
-	beq	.L502
+	beq	.L506
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L498
+	bne	.L502
 	movs	r0, #1
 	bx	lr
-.L502:
+.L506:
 	movs	r0, #0
 	bx	lr
-.L504:
+.L508:
 	.align	2
-.L503:
+.L507:
 	.word	.LANCHOR0
 	.fnend
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
@@ -3384,34 +3423,34 @@ FtlCacheMetchLpa:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L513
+	ldr	r2, .L517
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	ldr	r3, [r2, #2952]
-	cbz	r3, .L512
-	ldr	r5, [r2, #2956]
+	ldr	r3, [r2, #2960]
+	cbz	r3, .L516
+	ldr	r5, [r2, #2964]
 	movs	r6, #36
 	movs	r2, #0
-.L508:
+.L512:
 	mla	r4, r6, r2, r5
 	ldr	r4, [r4, #16]
 	cmp	r4, r0
-	bcc	.L507
+	bcc	.L511
 	cmp	r4, r1
-	bls	.L510
-.L507:
+	bls	.L514
+.L511:
 	adds	r2, r2, #1
 	cmp	r2, r3
-	bne	.L508
-.L512:
+	bne	.L512
+.L516:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L510:
+.L514:
 	movs	r0, #1
 	pop	{r4, r5, r6, pc}
-.L514:
+.L518:
 	.align	2
-.L513:
+.L517:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
@@ -3425,34 +3464,34 @@ FtlGetCap:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L516
-	ldr	r0, [r3, #2940]
+	ldr	r3, .L520
+	ldr	r0, [r3, #1896]
 	bx	lr
-.L517:
+.L521:
 	.align	2
-.L516:
+.L520:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetCap, .-FtlGetCap
 	.align	1
-	.global	FtlGetCapacity
+	.global	ftl_get_density
 	.thumb
 	.thumb_func
-	.type	FtlGetCapacity, %function
-FtlGetCapacity:
+	.type	ftl_get_density, %function
+ftl_get_density:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L519
-	ldr	r0, [r3, #2940]
+	ldr	r3, .L523
+	ldr	r0, [r3, #1896]
 	bx	lr
-.L520:
+.L524:
 	.align	2
-.L519:
+.L523:
 	.word	.LANCHOR0
 	.fnend
-	.size	FtlGetCapacity, .-FtlGetCapacity
+	.size	ftl_get_density, .-ftl_get_density
 	.align	1
 	.global	FtlGetLpn
 	.thumb
@@ -3463,57 +3502,15 @@ FtlGetLpn:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L522
-	ldr	r0, [r3, #2960]
+	ldr	r3, .L526
+	ldr	r0, [r3, #2968]
 	bx	lr
-.L523:
+.L527:
 	.align	2
-.L522:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlGetLpn, .-FtlGetLpn
-	.align	1
-	.global	FtlGetCurEraseBlock
-	.thumb
-	.thumb_func
-	.type	FtlGetCurEraseBlock, %function
-FtlGetCurEraseBlock:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r3, .L525
-	ldrh	r2, [r3, #2828]
-	ldr	r0, [r3, #2964]
-	muls	r0, r2, r0
-	bx	lr
 .L526:
-	.align	2
-.L525:
-	.word	.LANCHOR0
-	.fnend
-	.size	FtlGetCurEraseBlock, .-FtlGetCurEraseBlock
-	.align	1
-	.global	FtlGetAllBlockNum
-	.thumb
-	.thumb_func
-	.type	FtlGetAllBlockNum, %function
-FtlGetAllBlockNum:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	ldr	r3, .L528
-	ldrh	r2, [r3, #2838]
-	ldrh	r0, [r3, #2828]
-	muls	r0, r2, r0
-	bx	lr
-.L529:
-	.align	2
-.L528:
 	.word	.LANCHOR0
 	.fnend
-	.size	FtlGetAllBlockNum, .-FtlGetAllBlockNum
+	.size	FtlGetLpn, .-FtlGetLpn
 	.align	1
 	.global	FtlBbmMapBadBlock
 	.thumb
@@ -3527,14 +3524,14 @@ FtlBbmMapBadBlock:
 	.save {r4, r5, r6, r7, lr}
 	.pad #12
 	mov	r6, r0
-	ldr	r5, .L531
-	ldrh	r4, [r5, #2894]
+	ldr	r5, .L529
+	ldrh	r4, [r5, #2906]
 	mov	r1, r4
 	bl	__aeabi_uidiv
 	uxth	r2, r0
 	smulbb	r3, r2, r4
 	add	r1, r5, r2, lsl #2
-	ldr	r4, [r1, #2996]
+	ldr	r4, [r1, #3000]
 	movs	r1, #1
 	subs	r3, r6, r3
 	uxth	r3, r3
@@ -3543,21 +3540,21 @@ FtlBbmMapBadBlock:
 	lsls	r1, r1, r0
 	ldr	r0, [r4, r7, lsl #2]
 	orrs	r1, r1, r0
-	ldr	r0, .L531+4
+	ldr	r0, .L529+4
 	str	r1, [r4, r7, lsl #2]
 	str	r1, [sp]
 	mov	r1, r6
 	bl	printk
-	ldrh	r3, [r5, #2974]
+	ldrh	r3, [r5, #2978]
 	movs	r0, #0
 	adds	r3, r3, #1
-	strh	r3, [r5, #2974]	@ movhi
+	strh	r3, [r5, #2978]	@ movhi
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L532:
+.L530:
 	.align	2
-.L531:
+.L529:
 	.word	.LANCHOR0
 	.word	.LC2
 	.fnend
@@ -3575,8 +3572,8 @@ FtlBbmIsBadBlock:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r7, r0
-	ldr	r5, .L534
-	ldrh	r6, [r5, #2894]
+	ldr	r5, .L532
+	ldrh	r6, [r5, #2906]
 	mov	r1, r6
 	bl	__aeabi_uidivmod
 	mov	r0, r7
@@ -3587,14 +3584,14 @@ FtlBbmIsBadBlock:
 	and	r4, r4, #31
 	uxth	r0, r0
 	add	r5, r5, r0, lsl #2
-	ldr	r3, [r5, #2996]
+	ldr	r3, [r5, #3000]
 	ldr	r0, [r3, r2, lsl #2]
 	lsrs	r0, r0, r4
 	and	r0, r0, #1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L535:
+.L533:
 	.align	2
-.L534:
+.L532:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
@@ -3621,18 +3618,18 @@ FtlBbtMemInit:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r0, .L538
+	ldr	r0, .L536
 	movw	r3, #65535
 	movs	r1, #255
 	movs	r2, #16
-	addw	r0, r0, #2980
+	addw	r0, r0, #2984
 	strh	r3, [r0, #-12]	@ movhi
 	movs	r3, #0
 	strh	r3, [r0, #-6]	@ movhi
 	b	memset
-.L539:
+.L537:
 	.align	2
-.L538:
+.L536:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtMemInit, .-FtlBbtMemInit
@@ -3648,28 +3645,28 @@ FtlBbtCalcTotleCnt:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L548
-	ldrh	r6, [r4, #2894]
-	ldrh	r3, [r4, #2850]
+	ldr	r4, .L546
+	ldrh	r6, [r4, #2906]
+	ldrh	r3, [r4, #2862]
 	mov	r4, r5
 	muls	r6, r3, r6
-.L541:
+.L539:
 	uxth	r0, r5
 	cmp	r0, r6
-	bge	.L547
+	bge	.L545
 	bl	FtlBbmIsBadBlock
-	cbz	r0, .L542
+	cbz	r0, .L540
 	adds	r4, r4, #1
 	uxth	r4, r4
-.L542:
+.L540:
 	adds	r5, r5, #1
-	b	.L541
-.L547:
+	b	.L539
+.L545:
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L549:
+.L547:
 	.align	2
-.L548:
+.L546:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
@@ -3685,22 +3682,22 @@ V2P_block:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r4, r1
-	ldr	r6, .L551
+	ldr	r6, .L549
 	mov	r7, r0
-	ldrh	r5, [r6, #2852]
+	ldrh	r5, [r6, #2864]
 	mov	r1, r5
 	bl	__aeabi_uidivmod
 	mov	r0, r7
 	smlabb	r4, r4, r5, r1
 	mov	r1, r5
 	bl	__aeabi_uidiv
-	ldrh	r3, [r6, #2894]
+	ldrh	r3, [r6, #2906]
 	smlabb	r0, r3, r0, r4
 	uxth	r0, r0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L552:
+.L550:
 	.align	2
-.L551:
+.L549:
 	.word	.LANCHOR0
 	.fnend
 	.size	V2P_block, .-V2P_block
@@ -3713,12 +3710,12 @@ P2V_plane:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L554
+	ldr	r3, .L552
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldrh	r1, [r3, #2894]
-	ldrh	r5, [r3, #2852]
+	ldrh	r1, [r3, #2906]
+	ldrh	r5, [r3, #2864]
 	bl	__aeabi_uidiv
 	mov	r1, r5
 	smulbb	r4, r0, r5
@@ -3727,9 +3724,9 @@ P2V_plane:
 	add	r1, r1, r4
 	uxth	r0, r1
 	pop	{r4, r5, r6, pc}
-.L555:
+.L553:
 	.align	2
-.L554:
+.L552:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_plane, .-P2V_plane
@@ -3744,17 +3741,17 @@ P2V_block_in_plane:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L557
-	ldrh	r1, [r4, #2894]
+	ldr	r4, .L555
+	ldrh	r1, [r4, #2906]
 	bl	__aeabi_uidivmod
 	uxth	r0, r1
-	ldrh	r1, [r4, #2852]
+	ldrh	r1, [r4, #2864]
 	bl	__aeabi_uidiv
 	uxth	r0, r0
 	pop	{r4, pc}
-.L558:
+.L556:
 	.align	2
-.L557:
+.L555:
 	.word	.LANCHOR0
 	.fnend
 	.size	P2V_block_in_plane, .-P2V_block_in_plane
@@ -3769,14 +3766,14 @@ ftl_cmp_data_ver:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	cmp	r0, r1
-	bls	.L560
+	bls	.L558
 	subs	r0, r0, r1
 	cmp	r0, #-2147483648
 	ite	hi
 	movhi	r0, #0
 	movls	r0, #1
 	bx	lr
-.L560:
+.L558:
 	subs	r0, r1, r0
 	cmp	r0, #-2147483648
 	ite	ls
@@ -3794,22 +3791,22 @@ FtlFreeSysBlkQueueInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L563
+	ldr	r3, .L561
 	mov	r1, #2048
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r4, #0
-	strh	r0, [r3, #3028]	@ movhi
-	addw	r0, r3, #3036
-	strh	r4, [r3, #3030]	@ movhi
-	strh	r4, [r3, #3032]	@ movhi
+	strh	r0, [r3, #3032]	@ movhi
+	add	r0, r3, #3040
 	strh	r4, [r3, #3034]	@ movhi
+	strh	r4, [r3, #3036]	@ movhi
+	strh	r4, [r3, #3038]	@ movhi
 	bl	__memzero
 	mov	r0, r4
 	pop	{r4, pc}
-.L564:
+.L562:
 	.align	2
-.L563:
+.L561:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
@@ -3823,14 +3820,14 @@ FtlFreeSysBlkQueueEmpty:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L566
-	ldrh	r0, [r3, #3034]
+	ldr	r3, .L564
+	ldrh	r0, [r3, #3038]
 	clz	r0, r0
 	lsrs	r0, r0, #5
 	bx	lr
-.L567:
+.L565:
 	.align	2
-.L566:
+.L564:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
@@ -3844,15 +3841,15 @@ FtlFreeSysBlkQueueFull:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L569
-	ldrh	r0, [r3, #3034]
+	ldr	r3, .L567
+	ldrh	r0, [r3, #3038]
 	sub	r3, r0, #1024
 	rsbs	r0, r3, #0
 	adcs	r0, r0, r3
 	bx	lr
-.L570:
+.L568:
 	.align	2
-.L569:
+.L567:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
@@ -3868,44 +3865,44 @@ FtlFreeSysBlkQueueIn:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r6, r0
-	ldr	r4, .L580
-	ldrh	r3, [r4, #3034]
+	ldr	r4, .L578
+	ldrh	r3, [r4, #3038]
 	cmp	r3, #1024
-	beq	.L571
-	cbz	r1, .L573
-	ldr	r5, .L580+4
-	ldr	r3, [r5, #740]
-	cbnz	r3, .L573
+	beq	.L569
+	cbz	r1, .L571
+	ldr	r5, .L578+4
+	ldr	r3, [r5, #744]
+	cbnz	r3, .L571
 	bl	P2V_block_in_plane
 	movs	r1, #1
 	lsls	r3, r6, #10
 	mov	r2, r1
 	mov	r7, r0
-	ldr	r0, [r5, #744]
+	ldr	r0, [r5, #748]
 	str	r3, [r0, #4]
 	bl	FlashEraseBlocks
-	ldr	r2, [r5, #748]
+	ldr	r2, [r5, #752]
 	ldrh	r3, [r2, r7, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r7, lsl #1]	@ movhi
-	ldr	r3, [r5, #752]
+	ldr	r3, [r5, #756]
 	adds	r3, r3, #1
-	str	r3, [r5, #752]
-.L573:
-	ldrh	r3, [r4, #3034]
+	str	r3, [r5, #756]
+.L571:
+	ldrh	r3, [r4, #3038]
 	adds	r3, r3, #1
-	strh	r3, [r4, #3034]	@ movhi
-	ldrh	r3, [r4, #3032]
+	strh	r3, [r4, #3038]	@ movhi
+	ldrh	r3, [r4, #3036]
 	add	r2, r4, r3, lsl #1
 	adds	r3, r3, #1
 	ubfx	r3, r3, #0, #10
-	strh	r3, [r4, #3032]	@ movhi
-	strh	r6, [r2, #3036]	@ movhi
-.L571:
+	strh	r3, [r4, #3036]	@ movhi
+	strh	r6, [r2, #3040]	@ movhi
+.L569:
 	pop	{r3, r4, r5, r6, r7, pc}
-.L581:
+.L579:
 	.align	2
-.L580:
+.L578:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -3919,83 +3916,42 @@ FtlFreeSysBLkSort:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	movs	r4, #0
-	ldr	r5, .L594
-	ldr	r6, .L594+4
-.L583:
-	ldrh	r3, [r5, #3034]
-	adds	r7, r4, #1
-	uxth	r4, r4
-	ldr	r0, .L594
-	cmp	r3, r4
-	bls	.L591
-	ldrh	r3, [r5, #3030]
-	add	r3, r3, r4
-	add	r3, r5, r3, lsl #1
-	ldrh	r0, [r3, #3036]
-	bl	P2V_block_in_plane
-	ldr	r2, [r6, #748]
-	ldr	r3, [r6, #756]
-	ldrh	r2, [r2, r0, lsl #1]
-	str	r2, [r3, r4, lsl #2]
-	mov	r4, r7
-	b	.L583
-.L591:
-	ldr	r5, .L594+4
-	movs	r1, #0
-	mov	ip, r5
-.L585:
-	ldrh	r8, [r0, #3034]
-	add	r3, r8, #-1
-	cmp	r1, r3
-	bge	.L592
-	adds	r4, r1, #1
-	ldr	r2, [r5, #756]
-	mov	r3, r1
-	uxth	r4, r4
-	mov	lr, r4
-.L586:
-	cmp	lr, r8
-	bcs	.L593
-	ldr	r6, [r2, lr, lsl #2]
-	ldr	r7, [r2, r3, lsl #2]
-	cmp	r7, r6
-	it	hi
-	movhi	r3, lr
-	add	lr, lr, #1
-	uxth	lr, lr
-	b	.L586
-.L593:
-	cmp	r1, r3
-	beq	.L589
-	ldr	r6, [r2, r1, lsl #2]
-	ldr	r7, [r2, r3, lsl #2]
-	str	r6, [r2, r3, lsl #2]
-	ldr	r2, [ip, #756]
-	str	r7, [r2, r1, lsl #2]
-	ldrh	r2, [r0, #3030]
-	add	r3, r3, r2
-	add	r2, r2, r1
-	adds	r3, r3, #4
-	adds	r2, r2, #4
-	add	r3, r0, r3, lsl #1
-	add	r2, r0, r2, lsl #1
-	ldrh	r7, [r3, #3028]
-	ldrh	r1, [r2, #3028]
-	strh	r1, [r3, #3028]	@ movhi
-	strh	r7, [r2, #3028]	@ movhi
-.L589:
-	mov	r1, r4
-	b	.L585
-.L592:
-	pop	{r4, r5, r6, r7, r8, pc}
-.L595:
+	ldr	r3, .L589
+	movs	r0, #0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldrh	r4, [r3, #788]
+	ldr	r3, .L589+4
+	and	r4, r4, #31
+	ldrh	r1, [r3, #3034]
+	ldrh	r2, [r3, #3036]
+.L581:
+	uxth	r5, r0
+	adds	r0, r0, #1
+	cmp	r5, r4
+	bge	.L588
+	add	r5, r3, r1, lsl #1
+	adds	r1, r1, #1
+	ubfx	r1, r1, #0, #10
+	ldrh	r6, [r5, #3040]
+	add	r5, r3, r2, lsl #1
+	strh	r6, [r5, #3040]	@ movhi
+	movs	r6, #1
+	add	r2, r2, r6
+	ubfx	r2, r2, #0, #10
+	b	.L581
+.L588:
+	cbz	r6, .L580
+	strh	r1, [r3, #3034]	@ movhi
+	strh	r2, [r3, #3036]	@ movhi
+.L580:
+	pop	{r4, r5, r6, pc}
+.L590:
 	.align	2
-.L594:
-	.word	.LANCHOR0
+.L589:
 	.word	.LANCHOR2
+	.word	.LANCHOR0
 	.fnend
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
 	.align	1
@@ -4007,51 +3963,51 @@ remove_from_free_sys_Queue:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L603
+	ldr	r3, .L598
 	mov	r1, r0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	ldrh	r0, [r3, #3034]
-	cbz	r0, .L597
-	ldrh	r6, [r3, #3030]
+	ldrh	r0, [r3, #3038]
+	cbz	r0, .L592
+	ldrh	r6, [r3, #3034]
 	movs	r4, #0
-.L598:
+.L593:
 	cmp	r4, r0
-	bcs	.L602
+	bcs	.L597
 	adds	r2, r4, r6
-	ldr	r5, .L603
+	ldr	r5, .L598
 	ubfx	r2, r2, #0, #10
 	add	r2, r3, r2, lsl #1
-	ldrh	r2, [r2, #3036]
+	ldrh	r2, [r2, #3040]
 	cmp	r2, r1
-	bne	.L599
-	ldr	r0, .L603+4
+	bne	.L594
+	ldr	r0, .L598+4
 	bl	printk
-	ldrh	r3, [r5, #3030]
+	ldrh	r3, [r5, #3034]
 	movs	r0, #1
 	add	r4, r4, r3
 	add	r2, r5, r3, lsl #1
 	ubfx	r4, r4, #0, #10
 	adds	r3, r3, #1
-	ldrh	r2, [r2, #3036]
+	ldrh	r2, [r2, #3040]
 	add	r4, r5, r4, lsl #1
 	ubfx	r3, r3, #0, #10
-	strh	r3, [r5, #3030]	@ movhi
-	ldrh	r3, [r5, #3034]
-	strh	r2, [r4, #3036]	@ movhi
-	subs	r3, r3, #1
 	strh	r3, [r5, #3034]	@ movhi
+	ldrh	r3, [r5, #3038]
+	strh	r2, [r4, #3040]	@ movhi
+	subs	r3, r3, #1
+	strh	r3, [r5, #3038]	@ movhi
 	pop	{r4, r5, r6, pc}
-.L599:
+.L594:
 	adds	r4, r4, #1
-	b	.L598
-.L602:
-	movs	r0, #0
+	b	.L593
 .L597:
+	movs	r0, #0
+.L592:
 	pop	{r4, r5, r6, pc}
-.L604:
+.L599:
 	.align	2
-.L603:
+.L598:
 	.word	.LANCHOR0
 	.word	.LC3
 	.fnend
@@ -4065,57 +4021,72 @@ FtlFreeSysBlkQueueOut:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	ldr	r5, .L612
-	ldrh	r2, [r5, #3034]
-	cbz	r2, .L608
-	ldrh	r3, [r5, #3030]
-	subs	r2, r2, #1
-	ldr	r4, .L612+4
-	strh	r2, [r5, #3034]	@ movhi
-	add	r1, r5, r3, lsl #1
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	ldr	r4, .L610
+	ldr	r6, .L610+4
+	mov	r7, r4
+.L601:
+	ldrh	r1, [r4, #3038]
+	cbz	r1, .L602
+	ldrh	r3, [r4, #3034]
+	subs	r1, r1, #1
+	ldr	r10, [r6, #744]
+	strh	r1, [r4, #3038]	@ movhi
+	add	r2, r4, r3, lsl #1
 	adds	r3, r3, #1
-	ldr	r8, [r4, #740]
 	ubfx	r3, r3, #0, #10
-	ldrh	r6, [r1, #3036]
-	strh	r3, [r5, #3030]	@ movhi
-	cmp	r8, #0
-	bne	.L606
-	mov	r0, r6
+	ldr	r8, .L610+4
+	ldrh	r5, [r2, #3040]
+	strh	r3, [r4, #3034]	@ movhi
+	cmp	r10, #0
+	bne	.L603
+	mov	r0, r5
 	bl	P2V_block_in_plane
-	lsls	r3, r6, #10
-	mov	r7, r0
-	ldr	r0, [r4, #744]
+	lsls	r3, r5, #10
+	mov	r9, r0
+	ldr	r0, [r6, #748]
 	str	r3, [r0, #4]
-	ldrb	r3, [r5, #76]	@ zero_extendqisi2
-	cbz	r3, .L607
-	mov	r1, r8
+	ldrb	r3, [r4, #76]	@ zero_extendqisi2
+	cbz	r3, .L604
+	mov	r1, r10
 	movs	r2, #1
 	bl	FlashEraseBlocks
-.L607:
+.L604:
 	movs	r1, #1
-	ldr	r0, [r4, #744]
+	ldr	r0, [r8, #748]
 	mov	r2, r1
 	bl	FlashEraseBlocks
-	ldr	r2, [r4, #748]
-	ldrh	r3, [r2, r7, lsl #1]
+	ldr	r2, [r8, #752]
+	ldrh	r3, [r2, r9, lsl #1]
 	adds	r3, r3, #1
-	strh	r3, [r2, r7, lsl #1]	@ movhi
-	ldr	r3, [r4, #752]
+	strh	r3, [r2, r9, lsl #1]	@ movhi
+	ldr	r3, [r8, #756]
 	adds	r3, r3, #1
-	str	r3, [r4, #752]
-	b	.L606
-.L608:
-	movw	r6, #65535
+	str	r3, [r8, #756]
+	b	.L603
+.L602:
+	ldr	r0, .L610+8
+	bl	printk
+.L605:
+	b	.L605
+.L603:
+	cbnz	r5, .L606
+	mov	r1, r5
+	ldrh	r2, [r7, #3038]
+	ldr	r0, .L610+12
+	bl	printk
+	b	.L601
 .L606:
-	mov	r0, r6
-	pop	{r4, r5, r6, r7, r8, pc}
-.L613:
+	mov	r0, r5
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L611:
 	.align	2
-.L612:
+.L610:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
+	.word	.LC4
+	.word	.LC5
 	.fnend
 	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
 	.align	1
@@ -4130,113 +4101,113 @@ insert_data_list:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r5, .L630
-	ldrh	r3, [r5, #2836]
+	ldr	r5, .L628
+	ldrh	r3, [r5, #2848]
 	cmp	r3, r0
-	bls	.L616
+	bls	.L614
 	movs	r4, #6
-	ldr	r2, .L630+4
+	ldr	r2, .L628+4
 	movw	r3, #65535
 	muls	r4, r0, r4
-	ldr	lr, [r2, #760]
+	ldr	lr, [r2, #808]
 	mov	r7, r2
 	add	r1, lr, r4
 	strh	r3, [r1, #2]	@ movhi
 	strh	r3, [lr, r4]	@ movhi
-	ldr	r3, [r2, #764]
+	ldr	r3, [r2, #812]
 	cmp	r3, #0
-	beq	.L629
-	ldr	r8, [r2, #768]
+	beq	.L627
+	ldr	r8, [r2, #816]
 	lsl	fp, r0, #1
 	ldrh	r2, [r1, #4]
 	ldrh	r6, [r8, r0, lsl #1]
-	cbz	r2, .L627
+	cbz	r2, .L625
 	muls	r6, r2, r6
-	b	.L618
-.L627:
+	b	.L616
+.L625:
 	mov	r6, #-1
-.L618:
-	ldr	ip, [r7, #760]
-	ldr	r2, .L630+8
+.L616:
+	ldr	ip, [r7, #808]
+	ldr	r2, .L628+8
 	rsb	r9, ip, r3
-	ldrh	r5, [r5, #2836]
+	ldrh	r5, [r5, #2848]
 	asr	r9, r9, #1
 	str	r5, [sp]
 	mul	r2, r2, r9
-	ldr	r9, [r7, #748]
+	ldr	r9, [r7, #752]
 	add	r5, r9, fp
 	str	r5, [sp, #4]
 	movs	r5, #0
 	uxth	r2, r2
-.L625:
+.L623:
 	adds	r5, r5, #1
 	ldr	r7, [sp]
 	uxth	r5, r5
 	cmp	r5, r7
-	bhi	.L616
+	bhi	.L614
 	cmp	r0, r2
-	beq	.L616
+	beq	.L614
 	ldrh	r7, [r3, #4]
 	lsl	r10, r2, #1
 	ldrh	fp, [r8, r2, lsl #1]
-	cbz	r7, .L628
+	cbz	r7, .L626
 	mul	r7, r7, fp
-	b	.L620
-.L628:
+	b	.L618
+.L626:
 	mov	r7, #-1
-.L620:
+.L618:
 	cmp	r7, r6
-	bne	.L621
+	bne	.L619
 	ldr	r7, [sp, #4]
 	ldrh	r10, [r9, r10]
 	ldrh	r7, [r7]
 	cmp	r10, r7
-	bcc	.L623
-	b	.L622
+	bcc	.L621
+	b	.L620
+.L619:
+	bhi	.L620
 .L621:
-	bhi	.L622
-.L623:
 	ldrh	r7, [r3]
 	movw	r10, #65535
 	cmp	r7, r10
-	bne	.L624
+	bne	.L622
 	strh	r2, [r1, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	ldr	r3, .L630+4
-	str	r1, [r3, #772]
-	b	.L616
-.L624:
+	ldr	r3, .L628+4
+	str	r1, [r3, #820]
+	b	.L614
+.L622:
 	movs	r3, #6
 	mov	r2, r7
 	mla	r3, r3, r7, ip
-	b	.L625
-.L622:
+	b	.L623
+.L620:
 	strh	r2, [lr, r4]	@ movhi
 	ldrh	r2, [r3, #2]
 	strh	r2, [r1, #2]	@ movhi
-	ldr	r2, .L630+4
-	ldr	r4, [r2, #764]
+	ldr	r2, .L628+4
+	ldr	r4, [r2, #812]
 	cmp	r3, r4
-	bne	.L626
+	bne	.L624
 	strh	r0, [r3, #2]	@ movhi
-.L629:
-	str	r1, [r2, #764]
-	b	.L616
-.L626:
+.L627:
+	str	r1, [r2, #812]
+	b	.L614
+.L624:
 	ldrh	r4, [r3, #2]
-	ldr	r1, [r2, #760]
+	ldr	r1, [r2, #808]
 	movs	r2, #6
 	muls	r2, r4, r2
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L616:
+.L614:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L631:
+.L629:
 	.align	2
-.L630:
+.L628:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	-1431655765
@@ -4254,14 +4225,14 @@ INSERT_DATA_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_data_list
-	ldr	r2, .L633
-	ldrh	r3, [r2, #776]
+	ldr	r2, .L631
+	ldrh	r3, [r2, #824]
 	adds	r3, r3, #1
-	strh	r3, [r2, #776]	@ movhi
+	strh	r3, [r2, #824]	@ movhi
 	pop	{r3, pc}
-.L634:
+.L632:
 	.align	2
-.L633:
+.L631:
 	.word	.LANCHOR2
 	.fnend
 	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
@@ -4278,64 +4249,64 @@ insert_free_list:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movw	r5, #65535
 	cmp	r0, r5
-	beq	.L636
+	beq	.L634
 	movs	r1, #6
-	ldr	r2, .L643
+	ldr	r2, .L641
 	mul	lr, r1, r0
-	ldr	ip, [r2, #760]
+	ldr	ip, [r2, #808]
 	mov	r7, r2
 	add	r6, ip, lr
 	strh	r5, [r6, #2]	@ movhi
 	strh	r5, [ip, lr]	@ movhi
-	ldr	r3, [r2, #780]
-	cbz	r3, .L642
-	ldr	r8, [r2, #760]
-	ldr	r9, [r2, #748]
+	ldr	r3, [r2, #828]
+	cbz	r3, .L640
+	ldr	r8, [r2, #808]
+	ldr	r9, [r2, #752]
 	rsb	r4, r8, r3
-	ldr	r2, .L643+4
+	ldr	r2, .L641+4
 	asrs	r4, r4, #1
 	ldrh	r10, [r9, r0, lsl #1]
 	muls	r4, r2, r4
 	uxth	r2, r4
-.L640:
+.L638:
 	ldrh	r4, [r9, r2, lsl #1]
 	cmp	r4, r10
-	bcs	.L638
+	bcs	.L636
 	ldrh	r4, [r3]
 	cmp	r4, r5
-	bne	.L639
+	bne	.L637
 	strh	r2, [r6, #2]	@ movhi
 	strh	r0, [r3]	@ movhi
-	b	.L636
-.L639:
+	b	.L634
+.L637:
 	mla	r3, r1, r4, r8
 	mov	r2, r4
-	b	.L640
-.L638:
+	b	.L638
+.L636:
 	ldrh	r1, [r3, #2]
 	strh	r1, [r6, #2]	@ movhi
 	strh	r2, [ip, lr]	@ movhi
-	ldr	r1, [r7, #780]
-	ldr	r2, .L643
+	ldr	r1, [r7, #828]
+	ldr	r2, .L641
 	cmp	r3, r1
-	bne	.L641
+	bne	.L639
 	strh	r0, [r3, #2]	@ movhi
-.L642:
-	str	r6, [r2, #780]
-	b	.L636
-.L641:
+.L640:
+	str	r6, [r2, #828]
+	b	.L634
+.L639:
 	ldrh	r4, [r3, #2]
-	ldr	r1, [r2, #760]
+	ldr	r1, [r2, #808]
 	movs	r2, #6
 	muls	r2, r4, r2
 	strh	r0, [r1, r2]	@ movhi
 	strh	r0, [r3, #2]	@ movhi
-.L636:
+.L634:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L644:
+.L642:
 	.align	2
-.L643:
+.L641:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4352,14 +4323,14 @@ INSERT_FREE_LIST:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	insert_free_list
-	ldr	r2, .L646
-	ldrh	r3, [r2, #784]
+	ldr	r2, .L644
+	ldrh	r3, [r2, #832]
 	adds	r3, r3, #1
-	strh	r3, [r2, #784]	@ movhi
+	strh	r3, [r2, #832]	@ movhi
 	pop	{r3, pc}
-.L647:
+.L645:
 	.align	2
-.L646:
+.L644:
 	.word	.LANCHOR2
 	.fnend
 	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
@@ -4375,15 +4346,15 @@ List_remove_node:
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	movs	r4, #6
-	ldr	r7, .L653
+	ldr	r7, .L651
 	movw	r6, #65535
 	muls	r1, r4, r1
 	ldr	r3, [r0]
-	ldr	r2, [r7, #760]
+	ldr	r2, [r7, #808]
 	adds	r5, r2, r1
 	cmp	r5, r3
 	ldrh	r3, [r2, r1]
-	bne	.L649
+	bne	.L647
 	cmp	r3, r6
 	ittee	eq
 	moveq	r3, #0
@@ -4392,33 +4363,33 @@ List_remove_node:
 	strne	r3, [r0]
 	it	ne
 	strhne	r6, [r3, #2]	@ movhi
-	b	.L651
-.L649:
+	b	.L649
+.L647:
 	cmp	r3, r6
 	ldrh	r0, [r5, #2]
-	bne	.L652
+	bne	.L650
 	cmp	r0, r3
-	beq	.L651
+	beq	.L649
 	muls	r0, r4, r0
 	strh	r3, [r2, r0]	@ movhi
-	b	.L651
-.L652:
+	b	.L649
+.L650:
 	mla	r3, r4, r3, r2
 	strh	r0, [r3, #2]	@ movhi
 	ldrh	r6, [r5, #2]
 	ldrh	r0, [r2, r1]
-	ldr	r3, [r7, #760]
+	ldr	r3, [r7, #808]
 	muls	r4, r6, r4
 	strh	r0, [r3, r4]	@ movhi
-.L651:
+.L649:
 	movw	r3, #65535
 	movs	r0, #0
 	strh	r3, [r2, r1]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
 	pop	{r4, r5, r6, r7, pc}
-.L654:
+.L652:
 	.align	2
-.L653:
+.L651:
 	.word	.LANCHOR2
 	.fnend
 	.size	List_remove_node, .-List_remove_node
@@ -4434,16 +4405,16 @@ List_pop_index_node:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	ldr	r3, [r0]
-	cbz	r3, .L661
-	ldr	r2, .L662
+	cbz	r3, .L659
+	ldr	r2, .L660
 	movs	r6, #6
 	movw	r5, #65535
-	ldr	r4, [r2, #760]
-.L657:
-	cbnz	r1, .L658
-.L660:
+	ldr	r4, [r2, #808]
+.L655:
+	cbnz	r1, .L656
+.L658:
 	subs	r4, r3, r4
-	ldr	r3, .L662+4
+	ldr	r3, .L660+4
 	asrs	r4, r4, #1
 	muls	r4, r3, r4
 	uxth	r4, r4
@@ -4451,20 +4422,20 @@ List_pop_index_node:
 	bl	List_remove_node
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L658:
+.L656:
 	ldrh	r2, [r3]
 	cmp	r2, r5
-	beq	.L660
+	beq	.L658
 	subs	r1, r1, #1
 	mla	r3, r6, r2, r4
 	uxth	r1, r1
-	b	.L657
-.L661:
+	b	.L655
+.L659:
 	movw	r0, #65535
 	pop	{r4, r5, r6, pc}
-.L663:
+.L661:
 	.align	2
-.L662:
+.L660:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4478,36 +4449,36 @@ List_get_gc_head_node:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L671
+	ldr	r2, .L669
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r3, [r2, #764]
-	cbz	r3, .L669
+	ldr	r3, [r2, #812]
+	cbz	r3, .L667
 	movs	r4, #6
-	ldr	r1, [r2, #760]
+	ldr	r1, [r2, #808]
 	movw	r2, #65535
-.L666:
-	cbz	r0, .L667
+.L664:
+	cbz	r0, .L665
 	ldrh	r3, [r3]
 	cmp	r3, r2
-	beq	.L669
+	beq	.L667
 	subs	r0, r0, #1
 	mla	r3, r4, r3, r1
 	uxth	r0, r0
-	b	.L666
-.L669:
+	b	.L664
+.L667:
 	movw	r0, #65535
 	pop	{r4, pc}
-.L667:
+.L665:
 	subs	r3, r3, r1
-	ldr	r0, .L671+4
+	ldr	r0, .L669+4
 	asrs	r3, r3, #1
 	muls	r0, r3, r0
 	uxth	r0, r0
 	pop	{r4, pc}
-.L672:
+.L670:
 	.align	2
-.L671:
+.L669:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -4525,58 +4496,64 @@ List_update_data_list:
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r5, r0
 	ldr	r4, .L678
-	ldrh	r3, [r4, #788]
-	cmp	r3, r0
-	beq	.L674
 	ldrh	r3, [r4, #836]
 	cmp	r3, r0
-	beq	.L674
+	beq	.L672
 	ldrh	r3, [r4, #884]
 	cmp	r3, r0
-	beq	.L674
+	beq	.L672
+	ldrh	r3, [r4, #932]
+	cmp	r3, r0
+	beq	.L672
 	movs	r3, #6
-	ldr	r0, [r4, #760]
-	ldr	r2, [r4, #764]
-	muls	r3, r5, r3
-	adds	r1, r0, r3
-	cmp	r1, r2
-	beq	.L674
-	ldr	r6, [r4, #768]
-	ldrh	r7, [r1, #4]
-	ldrh	r1, [r1, #2]
-	ldrh	r2, [r6, r5, lsl #1]
+	ldr	r1, [r4, #808]
+	ldr	r2, [r4, #812]
+	muls	r3, r0, r3
+	adds	r0, r1, r3
+	cmp	r0, r2
+	beq	.L672
+	ldr	r6, [r4, #816]
+	ldrh	r2, [r0, #4]
+	ldrh	r7, [r6, r5, lsl #1]
+	cbz	r2, .L676
 	muls	r2, r7, r2
-	movw	r7, #65535
-	it	eq
-	moveq	r2, #-1
-	cmp	r1, r7
-	bne	.L676
-	ldrh	r3, [r0, r3]
-	cmp	r3, r1
-	beq	.L674
+	b	.L673
 .L676:
+	mov	r2, #-1
+.L673:
+	ldrh	r0, [r0, #2]
+	movw	r7, #65535
+	cmp	r0, r7
+	bne	.L674
+	ldrh	r3, [r1, r3]
+	cmp	r3, r0
+	beq	.L672
+.L674:
 	movs	r3, #6
-	muls	r1, r3, r1
-	ldr	r3, .L678+4
-	asrs	r7, r1, #1
-	add	r1, r1, r0
-	muls	r3, r7, r3
-	ldrh	r1, [r1, #4]
-	ldrh	r3, [r6, r3, lsl #1]
-	muls	r3, r1, r3
-	it	eq
-	moveq	r3, #-1
+	muls	r3, r0, r3
+	ldr	r0, .L678+4
+	asrs	r7, r3, #1
+	add	r3, r3, r1
+	muls	r0, r7, r0
+	ldrh	r3, [r3, #4]
+	ldrh	r0, [r6, r0, lsl #1]
+	cbz	r3, .L677
+	muls	r3, r0, r3
+	b	.L675
+.L677:
+	mov	r3, #-1
+.L675:
 	cmp	r2, r3
-	bcs	.L674
+	bcs	.L672
 	ldr	r0, .L678+8
 	mov	r1, r5
 	bl	List_remove_node
-	ldrh	r3, [r4, #776]
+	ldrh	r3, [r4, #824]
 	mov	r0, r5
 	subs	r3, r3, #1
-	strh	r3, [r4, #776]	@ movhi
+	strh	r3, [r4, #824]	@ movhi
 	bl	INSERT_DATA_LIST
-.L674:
+.L672:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
 .L679:
@@ -4584,7 +4561,7 @@ List_update_data_list:
 .L678:
 	.word	.LANCHOR2
 	.word	-1431655765
-	.word	.LANCHOR2+764
+	.word	.LANCHOR2+812
 	.fnend
 	.size	List_update_data_list, .-List_update_data_list
 	.align	1
@@ -4605,7 +4582,7 @@ ftl_map_blk_alloc_new_blk:
 .L681:
 	uxth	r5, r3
 	cmp	r5, r1
-	bcs	.L683
+	bcs	.L684
 	mov	r7, r2
 	adds	r3, r3, #1
 	ldrh	r6, [r7]
@@ -4613,8 +4590,20 @@ ftl_map_blk_alloc_new_blk:
 	cmp	r6, #0
 	bne	.L681
 	bl	FtlFreeSysBlkQueueOut
+	movw	r2, #65533
+	subs	r3, r0, #1
+	mov	r1, r0
 	strh	r0, [r7]	@ movhi
-	cbz	r0, .L683
+	uxth	r3, r3
+	cmp	r3, r2
+	bls	.L682
+	ldr	r3, .L687
+	ldr	r0, .L687+4
+	ldrh	r2, [r3, #3038]
+	bl	printk
+.L683:
+	b	.L683
+.L682:
 	ldr	r3, [r4, #28]
 	strh	r6, [r4, #2]	@ movhi
 	adds	r3, r3, #1
@@ -4623,9 +4612,14 @@ ftl_map_blk_alloc_new_blk:
 	strh	r5, [r4]	@ movhi
 	adds	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-.L683:
+.L684:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
+.L688:
+	.align	2
+.L687:
+	.word	.LANCHOR0
+	.word	.LC6
 	.fnend
 	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
 	.align	1
@@ -4640,70 +4634,70 @@ select_l2p_ram_region:
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	movs	r1, #0
-	ldr	r3, .L701
+	ldr	r3, .L703
 	movs	r4, #12
-	ldr	r7, .L701+4
+	ldr	r7, .L703+4
 	movw	r5, #65535
-	ldrh	r2, [r3, #2938]
-	ldr	r3, [r7, #932]
-.L688:
+	ldrh	r2, [r3, #2950]
+	ldr	r3, [r7, #980]
+.L690:
 	uxth	r0, r1
 	cmp	r0, r2
-	bcs	.L699
+	bcs	.L701
 	adds	r1, r1, #1
 	mla	r6, r4, r1, r3
 	ldrh	r6, [r6, #-12]
 	cmp	r6, r5
-	bne	.L688
-	b	.L689
-.L699:
+	bne	.L690
+	b	.L691
+.L701:
 	movs	r1, #0
 	mov	r6, #-2147483648
 	mov	lr, #12
 	mov	r0, r2
-.L691:
+.L693:
 	uxth	r5, r1
 	cmp	r5, r2
-	bcs	.L700
+	bcs	.L702
 	mla	r4, lr, r1, r3
 	ldr	r4, [r4, #4]
 	cmp	r4, #0
-	blt	.L692
+	blt	.L694
 	cmp	r4, r6
 	itt	cc
 	movcc	r6, r4
 	movcc	r0, r5
-.L692:
+.L694:
 	adds	r1, r1, #1
-	b	.L691
-.L700:
+	b	.L693
+.L702:
 	cmp	r0, r2
-	bcc	.L689
-	ldrh	r7, [r7, #936]
+	bcc	.L691
+	ldrh	r7, [r7, #984]
 	movs	r1, #0
 	mov	r4, #-1
 	mov	r0, r2
-.L694:
+.L696:
 	uxth	r5, r1
 	cmp	r5, r2
-	bcs	.L689
+	bcs	.L691
 	ldr	r6, [r3, #4]
 	cmp	r6, r4
-	bcs	.L695
+	bcs	.L697
 	ldrh	lr, [r3]
 	cmp	lr, r7
 	itt	ne
 	movne	r4, r6
 	movne	r0, r5
-.L695:
+.L697:
 	adds	r1, r1, #1
 	adds	r3, r3, #12
-	b	.L694
-.L689:
+	b	.L696
+.L691:
 	pop	{r4, r5, r6, r7, pc}
-.L702:
+.L704:
 	.align	2
-.L701:
+.L703:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -4717,41 +4711,41 @@ FtlUpdateVaildLpn:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L710
+	ldr	r1, .L712
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
-	ldrh	r2, [r1, #938]
+	ldrh	r2, [r1, #986]
 	mov	r3, r1
 	cmp	r2, #4
-	bhi	.L704
-	cbnz	r0, .L704
+	bhi	.L706
+	cbnz	r0, .L706
 	adds	r2, r2, #1
-	strh	r2, [r1, #938]	@ movhi
+	strh	r2, [r1, #986]	@ movhi
 	pop	{r4, r5, pc}
-.L704:
-	ldr	r1, .L710+4
+.L706:
+	ldr	r1, .L712+4
 	movs	r2, #0
-	strh	r2, [r3, #938]	@ movhi
+	strh	r2, [r3, #986]	@ movhi
 	movw	r5, #65535
-	str	r2, [r3, #940]
-	ldrh	r1, [r1, #2836]
-	ldr	r2, [r3, #768]
+	str	r2, [r3, #988]
+	ldrh	r1, [r1, #2848]
+	ldr	r2, [r3, #816]
 	add	r1, r2, r1, lsl #1
-.L705:
+.L707:
 	cmp	r2, r1
-	beq	.L709
+	beq	.L711
 	ldrh	r4, [r2], #2
 	cmp	r4, r5
 	ittt	ne
-	ldrne	r0, [r3, #940]
+	ldrne	r0, [r3, #988]
 	addne	r0, r0, r4
-	strne	r0, [r3, #940]
-	b	.L705
-.L709:
-	pop	{r4, r5, pc}
+	strne	r0, [r3, #988]
+	b	.L707
 .L711:
+	pop	{r4, r5, pc}
+.L713:
 	.align	2
-.L710:
+.L712:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -4767,28 +4761,28 @@ ftl_set_blk_mode:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
 	lsrs	r3, r0, #5
-	ldr	r2, .L715
+	ldr	r2, .L717
 	and	r0, r0, #31
 	uxth	r3, r3
-	cbz	r1, .L713
-	ldr	r1, [r2, #944]
+	cbz	r1, .L715
+	ldr	r1, [r2, #992]
 	movs	r2, #1
 	lsls	r2, r2, r0
 	ldr	r0, [r1, r3, lsl #2]
 	orrs	r2, r2, r0
 	str	r2, [r1, r3, lsl #2]
 	bx	lr
-.L713:
-	ldr	r1, [r2, #944]
+.L715:
+	ldr	r1, [r2, #992]
 	movs	r2, #1
 	lsls	r2, r2, r0
 	ldr	r0, [r1, r3, lsl #2]
 	bic	r0, r0, r2
 	str	r0, [r1, r3, lsl #2]
 	bx	lr
-.L716:
+.L718:
 	.align	2
-.L715:
+.L717:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -4802,17 +4796,17 @@ ftl_get_blk_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L718
+	ldr	r3, .L720
 	lsrs	r1, r0, #5
-	ldr	r2, [r3, #944]
+	ldr	r2, [r3, #992]
 	and	r3, r0, #31
 	ldr	r0, [r2, r1, lsl #2]
 	lsrs	r0, r0, r3
 	and	r0, r0, #1
 	bx	lr
-.L719:
+.L721:
 	.align	2
-.L718:
+.L720:
 	.word	.LANCHOR2
 	.fnend
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
@@ -4827,16 +4821,16 @@ ftl_sb_update_avl_pages:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	movs	r3, #0
 	strh	r3, [r0, #4]	@ movhi
-	ldr	r3, .L729
+	ldr	r3, .L731
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	adds	r4, r2, #7
-	ldrh	r5, [r3, #2828]
+	ldrh	r5, [r3, #2840]
 	movw	r7, #65535
 	add	r4, r0, r4, lsl #1
-.L721:
+.L723:
 	cmp	r2, r5
-	bcs	.L727
+	bcs	.L729
 	ldrh	r6, [r4, #2]!
 	adds	r2, r2, #1
 	cmp	r6, r7
@@ -4845,16 +4839,16 @@ ftl_sb_update_avl_pages:
 	ldrhne	r6, [r0, #4]
 	addne	r6, r6, #1
 	strhne	r6, [r0, #4]	@ movhi
-	b	.L721
-.L727:
-	ldrh	r6, [r3, #2898]
+	b	.L723
+.L729:
+	ldrh	r6, [r3, #2910]
 	add	r4, r0, #14
 	movs	r2, #0
 	movw	r7, #65535
-.L724:
+.L726:
 	uxth	r3, r2
 	cmp	r3, r5
-	bcs	.L728
+	bcs	.L730
 	ldrh	r3, [r4, #2]!
 	adds	r2, r2, #1
 	cmp	r3, r7
@@ -4865,12 +4859,12 @@ ftl_sb_update_avl_pages:
 	subne	r3, r3, r1
 	it	ne
 	strhne	r3, [r0, #4]	@ movhi
-	b	.L724
-.L728:
-	pop	{r4, r5, r6, r7, pc}
+	b	.L726
 .L730:
+	pop	{r4, r5, r6, r7, pc}
+.L732:
 	.align	2
-.L729:
+.L731:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
@@ -4886,62 +4880,62 @@ make_superblock:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r3, #0
-	ldr	r6, .L744
+	ldr	r6, .L746
 	add	r7, r0, #16
 	mov	r4, r0
 	mov	r5, r3
-	addw	r10, r6, #2856
+	addw	r10, r6, #2868
 	movw	r9, #65535
-	ldrh	r8, [r6, #2828]
+	ldrh	r8, [r6, #2840]
 	strh	r3, [r0, #4]	@ movhi
 	strb	r3, [r0, #7]
-.L732:
+.L734:
 	uxth	r3, r5
 	cmp	r3, r8
-	bcs	.L743
+	bcs	.L745
 	ldrb	r0, [r10, r5]	@ zero_extendqisi2
 	ldrh	r1, [r4]
 	bl	V2P_block
 	strh	r9, [r7]	@ movhi
 	mov	fp, r0
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L733
+	cbnz	r0, .L735
 	strh	fp, [r7]	@ movhi
 	ldrb	r3, [r4, #7]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	strb	r3, [r4, #7]
-.L733:
+.L735:
 	adds	r5, r5, #1
 	adds	r7, r7, #2
-	b	.L732
-.L743:
+	b	.L734
+.L745:
 	ldrb	r2, [r4, #7]	@ zero_extendqisi2
-	ldrh	r3, [r6, #2898]
+	ldrh	r3, [r6, #2910]
 	smulbb	r3, r2, r3
 	strh	r3, [r4, #4]	@ movhi
 	movs	r3, #0
 	strb	r3, [r4, #9]
-	ldr	r3, .L744+4
-	ldr	r2, [r3, #948]
-	cbz	r2, .L735
+	ldr	r3, [r6, #2832]
+	cbz	r3, .L737
+	ldr	r3, .L746+4
 	ldrh	r2, [r4]
-	ldr	r3, [r3, #748]
+	ldr	r3, [r3, #752]
 	ldrh	r3, [r3, r2, lsl #1]
 	cmp	r3, #59
 	itt	ls
 	movls	r3, #1
 	strbls	r3, [r4, #9]
-.L735:
+.L737:
 	ldrb	r3, [r6]	@ zero_extendqisi2
-	cbz	r3, .L736
+	cbz	r3, .L738
 	movs	r3, #1
 	strb	r3, [r4, #9]
-.L736:
+.L738:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L745:
+.L747:
 	.align	2
-.L744:
+.L746:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -4958,43 +4952,43 @@ update_multiplier_value:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r5, #0
-	ldr	r3, .L755
+	ldr	r3, .L757
 	mov	r7, r0
 	mov	r4, r5
-	addw	r6, r3, #2856
-	ldrh	r8, [r3, #2828]
-	ldrh	r9, [r3, #2898]
-.L747:
+	addw	r6, r3, #2868
+	ldrh	r8, [r3, #2840]
+	ldrh	r9, [r3, #2910]
+.L749:
 	uxth	r3, r5
 	cmp	r3, r8
-	bcs	.L754
+	bcs	.L756
 	mov	r1, r7
 	ldrb	r0, [r6, r5]	@ zero_extendqisi2
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L748
+	cbnz	r0, .L750
 	add	r4, r4, r9
 	uxth	r4, r4
-.L748:
+.L750:
 	adds	r5, r5, #1
-	b	.L747
-.L754:
-	cbz	r4, .L750
+	b	.L749
+.L756:
+	cbz	r4, .L752
 	mov	r1, r4
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r4, r0
-.L750:
-	ldr	r3, .L755+4
+.L752:
+	ldr	r3, .L757+4
 	movs	r2, #6
 	movs	r0, #0
-	ldr	r3, [r3, #760]
+	ldr	r3, [r3, #808]
 	mla	r7, r2, r7, r3
 	strh	r4, [r7, #4]	@ movhi
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L756:
+.L758:
 	.align	2
-.L755:
+.L757:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -5009,22 +5003,22 @@ GetFreeBlockMinEraseCount:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L760
-	ldr	r0, [r2, #780]
-	cbz	r0, .L758
-	ldr	r3, [r2, #760]
+	ldr	r2, .L762
+	ldr	r0, [r2, #828]
+	cbz	r0, .L760
+	ldr	r3, [r2, #808]
 	subs	r0, r0, r3
-	ldr	r3, .L760+4
+	ldr	r3, .L762+4
 	asrs	r0, r0, #1
 	muls	r0, r3, r0
-	ldr	r3, [r2, #748]
+	ldr	r3, [r2, #752]
 	uxth	r0, r0
 	ldrh	r0, [r3, r0, lsl #1]
-.L758:
+.L760:
 	bx	lr
-.L761:
+.L763:
 	.align	2
-.L760:
+.L762:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -5038,14 +5032,14 @@ GetFreeBlockMaxEraseCount:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r1, .L770
+	ldr	r1, .L772
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
-	ldr	r3, [r1, #780]
-	cbz	r3, .L768
-	ldrh	r2, [r1, #784]
+	ldr	r3, [r1, #828]
+	cbz	r3, .L770
+	ldrh	r2, [r1, #832]
 	movs	r6, #6
-	ldr	r4, [r1, #760]
+	ldr	r4, [r1, #808]
 	movw	r7, #65535
 	rsb	r2, r2, r2, lsl #3
 	subs	r3, r3, r4
@@ -5054,32 +5048,32 @@ GetFreeBlockMaxEraseCount:
 	cmp	r0, r2
 	it	gt
 	uxthgt	r0, r2
-	ldr	r2, .L770+4
+	ldr	r2, .L772+4
 	muls	r3, r2, r3
 	movs	r2, #0
 	uxth	r3, r3
-.L765:
+.L767:
 	uxth	r5, r2
 	cmp	r5, r0
-	bcs	.L767
+	bcs	.L769
 	mul	r5, r6, r3
 	adds	r2, r2, #1
 	ldrh	r5, [r4, r5]
 	cmp	r5, r7
-	bne	.L769
-.L767:
-	ldr	r2, [r1, #748]
+	bne	.L771
+.L769:
+	ldr	r2, [r1, #752]
 	ldrh	r0, [r2, r3, lsl #1]
 	pop	{r4, r5, r6, r7, pc}
-.L769:
+.L771:
 	mov	r3, r5
-	b	.L765
-.L768:
+	b	.L767
+.L770:
 	mov	r0, r3
 	pop	{r4, r5, r6, r7, pc}
-.L771:
+.L773:
 	.align	2
-.L770:
+.L772:
 	.word	.LANCHOR2
 	.word	-1431655765
 	.fnend
@@ -5096,334 +5090,332 @@ FtlPrintInfo2buf:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r6, r0
-	ldr	r8, .L782+240
+	ldr	r8, .L784+240
 	add	r4, r6, #12
-	ldr	r1, .L782
 	.pad #32
 	sub	sp, sp, #32
+	ldr	r1, .L784
 	bl	strcpy
 	mov	r0, r4
-	ldr	r1, .L782+4
+	ldr	r1, .L784+4
 	ldr	r2, [r8, #1864]
 	bl	sprintf
-	ldr	r1, .L782+8
-	ldr	r2, [r8, #2916]
+	ldr	r1, .L784+8
+	ldr	r2, [r8, #2928]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r3, .L782+12
+	ldr	r3, .L784+12
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
 	add	r4, r4, r0
-	bne	.L778
+	bne	.L780
 	add	r0, sp, #16
 	add	r1, sp, #20
 	add	r2, sp, #24
 	add	r3, sp, #28
 	bl	NandcGetTimeCfg
-	mov	r0, r4
-	ldr	r1, .L782+16
-	ldr	r7, .L782+20
 	ldr	r3, [sp, #24]
 	ldr	r2, [sp, #16]
+	mov	r0, r4
+	ldr	r1, .L784+16
 	str	r3, [sp]
 	ldr	r3, [sp, #28]
+	ldr	r7, .L784+20
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #20]
 	bl	sprintf
-	ldr	r1, .L782+24
+	ldr	r1, .L784+24
 	add	r4, r4, r0
 	add	r5, r4, #10
 	mov	r0, r4
 	bl	strcpy
 	mov	r0, r5
-	ldr	r1, .L782+28
-	ldr	r2, [r8, #2960]
+	ldr	r1, .L784+28
+	ldr	r2, [r8, #2968]
 	bl	sprintf
-	ldr	r1, .L782+32
-	ldr	r2, [r7, #940]
+	ldr	r1, .L784+32
+	ldr	r2, [r7, #988]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+36
-	ldr	r2, [r7, #952]
+	ldr	r1, .L784+36
+	ldr	r2, [r7, #996]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+40
-	ldr	r2, [r7, #956]
+	ldr	r1, .L784+40
+	ldr	r2, [r7, #1000]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+44
-	ldr	r2, [r7, #960]
+	ldr	r1, .L784+44
+	ldr	r2, [r7, #1004]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+48
-	ldr	r2, [r7, #964]
+	ldr	r1, .L784+48
+	ldr	r2, [r7, #1008]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+52
-	ldr	r2, [r7, #968]
+	ldr	r1, .L784+52
+	ldr	r2, [r7, #1012]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+56
-	ldr	r2, [r7, #972]
+	ldr	r1, .L784+56
+	ldr	r2, [r7, #1016]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r2, [r7, #976]
-	ldr	r1, .L782+60
+	ldr	r2, [r7, #1020]
+	ldr	r1, .L784+60
 	lsrs	r2, r2, #11
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r2, [r7, #980]
-	ldr	r1, .L782+64
+	ldr	r2, [r7, #1024]
+	ldr	r1, .L784+64
 	lsrs	r2, r2, #11
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+68
-	ldr	r2, [r7, #984]
+	ldr	r1, .L784+68
+	ldr	r2, [r7, #1028]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+72
-	ldr	r2, [r7, #988]
+	ldr	r1, .L784+72
+	ldr	r2, [r7, #1032]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
 	add	r5, r5, r0
 	bl	FtlBbtCalcTotleCnt
-	ldr	r1, .L782+76
-	ldrh	r2, [r8, #2974]
+	ldr	r1, .L784+76
+	ldrh	r2, [r8, #2978]
 	mov	r3, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+80
-	ldrh	r2, [r7, #784]
+	ldr	r1, .L784+80
+	ldrh	r2, [r7, #832]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+84
-	ldr	r2, [r7, #992]
+	ldr	r1, .L784+84
+	ldr	r2, [r7, #1036]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+88
-	ldr	r2, [r7, #996]
+	ldr	r1, .L784+88
+	ldr	r2, [r7, #1040]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+92
-	ldr	r2, [r7, #1000]
+	ldr	r1, .L784+92
+	ldr	r2, [r7, #1044]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+96
-	ldr	r2, [r7, #752]
+	ldr	r1, .L784+96
+	ldr	r2, [r7, #756]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+100
-	ldr	r2, [r7, #1004]
+	ldr	r1, .L784+100
+	ldr	r2, [r7, #1048]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+104
-	ldr	r2, [r7, #1008]
+	ldr	r1, .L784+104
+	ldr	r2, [r7, #1052]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+108
-	ldrh	r2, [r7, #1042]
+	ldr	r1, .L784+108
+	ldrh	r2, [r7, #790]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+112
-	ldrh	r2, [r7, #1040]
+	ldr	r1, .L784+112
+	ldrh	r2, [r7, #788]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+116
-	ldr	r2, [r8, #2940]
+	ldr	r1, .L784+116
+	ldr	r2, [r8, #1896]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+120
-	ldr	r2, [r8, #2932]
+	ldr	r1, .L784+120
+	ldr	r2, [r8, #2944]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+124
-	ldr	r2, [r8, #2824]
+	ldr	r1, .L784+124
+	ldr	r2, [r8, #2836]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+128
-	ldrh	r2, [r8, #3034]
+	ldr	r1, .L784+128
+	ldrh	r2, [r8, #3038]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+132
-	ldrh	r2, [r8, #2836]
+	ldr	r1, .L784+132
+	ldrh	r2, [r8, #2848]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+136
-	ldrh	r2, [r7, #1060]
+	ldr	r1, .L784+136
+	ldrh	r2, [r7, #1056]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+140
-	ldr	r2, [r8, #2840]
+	ldr	r1, .L784+140
+	ldr	r2, [r8, #2852]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+144
-	ldrh	r2, [r7, #1064]
+	ldr	r1, .L784+144
+	ldrh	r2, [r7, #1060]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+148
-	ldrh	r2, [r8, #2968]
+	ldr	r1, .L784+148
+	ldrh	r2, [r8, #2972]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+152
-	ldrh	r2, [r7, #790]
+	ldr	r1, .L784+152
+	ldrh	r2, [r7, #838]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+156
-	ldrb	r2, [r7, #794]	@ zero_extendqisi2
+	ldr	r1, .L784+156
+	ldrb	r2, [r7, #842]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+160
-	ldrh	r2, [r7, #788]
+	ldr	r1, .L784+160
+	ldrh	r2, [r7, #836]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+164
-	ldrb	r2, [r7, #796]	@ zero_extendqisi2
+	ldr	r1, .L784+164
+	ldrb	r2, [r7, #844]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+168
-	ldrh	r2, [r7, #792]
+	ldr	r1, .L784+168
+	ldrh	r2, [r7, #840]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, [r7, #768]
-	ldrh	r2, [r7, #788]
-	ldr	r1, .L782+172
+	ldr	r3, [r7, #816]
+	ldrh	r2, [r7, #836]
+	ldr	r1, .L784+172
 	ldrh	r2, [r3, r2, lsl #1]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+176
-	ldrh	r2, [r7, #838]
+	ldr	r1, .L784+176
+	ldrh	r2, [r7, #886]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+180
-	ldrb	r2, [r7, #842]	@ zero_extendqisi2
+	ldr	r1, .L784+180
+	ldrb	r2, [r7, #890]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+184
-	ldrh	r2, [r7, #836]
+	ldr	r1, .L784+184
+	ldrh	r2, [r7, #884]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+188
-	ldrb	r2, [r7, #844]	@ zero_extendqisi2
+	ldr	r1, .L784+188
+	ldrb	r2, [r7, #892]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+192
-	ldrh	r2, [r7, #840]
+	ldr	r1, .L784+192
+	ldrh	r2, [r7, #888]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r3, [r7, #768]
-	ldrh	r2, [r7, #836]
-	ldr	r1, .L782+196
+	ldr	r3, [r7, #816]
+	ldrh	r2, [r7, #884]
+	ldr	r1, .L784+196
 	ldrh	r2, [r3, r2, lsl #1]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+200
-	ldrh	r2, [r7, #886]
+	ldr	r1, .L784+200
+	ldrh	r2, [r7, #934]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+204
-	ldrb	r2, [r7, #890]	@ zero_extendqisi2
+	ldr	r1, .L784+204
+	ldrb	r2, [r7, #938]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+208
-	ldrh	r2, [r7, #884]
+	ldr	r1, .L784+208
+	ldrh	r2, [r7, #932]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+212
-	ldrb	r2, [r7, #892]	@ zero_extendqisi2
+	ldr	r1, .L784+212
+	ldrb	r2, [r7, #940]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+216
-	ldrh	r2, [r7, #888]
+	ldr	r1, .L784+216
+	ldrh	r2, [r7, #936]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+220
-	ldrh	r2, [r7, #1078]
+	ldr	r1, .L784+220
+	ldrh	r2, [r7, #1074]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+224
-	ldrb	r2, [r7, #1082]	@ zero_extendqisi2
+	ldr	r1, .L784+224
+	ldrb	r2, [r7, #1078]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+228
-	ldrh	r2, [r7, #1076]
+	ldr	r1, .L784+228
+	ldrh	r2, [r7, #1072]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+232
-	ldrb	r2, [r7, #1084]	@ zero_extendqisi2
+	ldr	r1, .L784+232
+	ldrb	r2, [r7, #1080]	@ zero_extendqisi2
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L782+236
-	ldrh	r2, [r7, #1080]
+	ldr	r1, .L784+236
+	ldrh	r2, [r7, #1076]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, [r7, #1212]
-	ldr	r3, [r7, #948]
-	ldr	r2, [r7, #1124]
-	b	.L783
-.L784:
+	ldr	r1, [r7, #1208]
+	ldr	r3, [r8, #2832]
+	ldr	r2, [r7, #1120]
+	str	r1, [sp]
+	b	.L785
+.L786:
 	.align	2
-.L782:
-	.word	.LC4
-	.word	.LC5
-	.word	.LC6
-	.word	.LANCHOR1
+.L784:
 	.word	.LC7
-	.word	.LANCHOR2
 	.word	.LC8
 	.word	.LC9
+	.word	.LANCHOR1
 	.word	.LC10
+	.word	.LANCHOR2
 	.word	.LC11
 	.word	.LC12
 	.word	.LC13
@@ -5475,145 +5467,144 @@ FtlPrintInfo2buf:
 	.word	.LC59
 	.word	.LC60
 	.word	.LC61
+	.word	.LC62
+	.word	.LC63
+	.word	.LC64
 	.word	.LANCHOR0
-.L783:
+.L785:
+	ldr	r1, [r7, #1200]
 	orr	r2, r3, r2, lsl #8
-	str	r1, [sp]
+	str	r1, [sp, #4]
+	ldr	r3, [r7, #1204]
+	ldr	r1, .L787
 	add	r5, r5, r0
-	ldr	r1, [r7, #1204]
 	mov	r0, r5
-	str	r1, [sp, #4]
-	ldr	r3, [r7, #1208]
-	ldr	r1, .L785
 	bl	sprintf
-	ldr	r1, .L785+4
-	ldr	r2, [r7, #1200]
+	ldr	r1, .L787+4
+	ldr	r2, [r7, #1196]
 	add	r5, r5, r0
 	mov	r0, r5
 	bl	sprintf
-	ldr	r1, .L785+8
-	ldr	r2, [r7, #1224]
+	ldr	r1, .L787+8
+	ldr	r2, [r7, #1220]
 	adds	r4, r5, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L785+12
-	ldrh	r2, [r7, #1640]
+	ldr	r1, .L787+12
+	ldrh	r2, [r7, #1636]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L785+16
-	ldrh	r2, [r7, #1642]
+	ldr	r1, .L787+16
+	ldrh	r2, [r7, #1638]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L785+20
-	ldr	r2, [r7, #1644]
+	ldr	r1, .L787+20
+	ldr	r2, [r7, #1640]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
-	ldr	r1, .L785+24
-	ldrh	r2, [r7, #1648]
+	ldr	r1, .L787+24
+	ldrh	r2, [r7, #1644]
 	add	r4, r4, r0
 	mov	r0, r4
 	bl	sprintf
 	add	r4, r4, r0
 	bl	GetFreeBlockMinEraseCount
-	ldr	r1, .L785+28
+	ldr	r1, .L787+28
 	mov	r2, r0
 	mov	r0, r4
 	bl	sprintf
 	add	r4, r4, r0
-	ldrh	r0, [r7, #784]
+	ldrh	r0, [r7, #832]
 	bl	GetFreeBlockMaxEraseCount
-	ldr	r1, .L785+32
+	ldr	r1, .L787+32
 	mov	r2, r0
 	mov	r0, r4
 	bl	sprintf
-	ldrh	r3, [r7, #1076]
+	ldrh	r3, [r7, #1072]
 	movw	r2, #65535
 	cmp	r3, r2
 	add	r4, r4, r0
-	beq	.L775
-	ldr	r2, [r7, #768]
+	beq	.L777
+	ldr	r2, [r7, #816]
 	mov	r0, r4
-	ldr	r1, .L785+36
+	ldr	r1, .L787+36
 	ldrh	r2, [r2, r3, lsl #1]
 	bl	sprintf
 	add	r4, r4, r0
-.L775:
+.L777:
 	movs	r0, #0
 	movs	r5, #0
 	bl	List_get_gc_head_node
 	mov	r9, #6
 	movw	r10, #65535
 	uxth	r3, r0
-.L777:
+.L779:
 	cmp	r3, r10
-	beq	.L776
-	ldr	r2, [r7, #768]
+	beq	.L778
+	ldr	r2, [r7, #816]
 	mov	r0, r4
 	mul	r8, r9, r3
-	ldr	r1, .L785+40
+	ldr	r1, .L787+40
 	ldrh	r2, [r2, r3, lsl #1]
 	str	r2, [sp]
-	ldr	r2, [r7, #760]
+	ldr	r2, [r7, #808]
 	add	r2, r2, r8
 	ldrh	r2, [r2, #4]
 	str	r2, [sp, #4]
-	ldr	r2, [r7, #748]
+	ldr	r2, [r7, #752]
 	ldrh	r2, [r2, r3, lsl #1]
 	str	r2, [sp, #8]
 	mov	r2, r5
 	bl	sprintf
 	adds	r5, r5, #1
-	ldr	r3, [r7, #760]
+	ldr	r3, [r7, #808]
 	cmp	r5, #16
 	ldrh	r3, [r3, r8]
 	add	r4, r4, r0
-	bne	.L777
-.L776:
-	ldr	r2, [r7, #760]
+	bne	.L779
+.L778:
+	ldr	r2, [r7, #808]
 	movs	r5, #0
-	ldr	r3, [r7, #780]
+	ldr	r3, [r7, #828]
 	mov	r9, #6
 	movw	r10, #65535
 	subs	r3, r3, r2
-	ldr	r2, .L785+44
+	ldr	r2, .L787+44
 	asrs	r3, r3, #1
 	muls	r3, r2, r3
 	uxth	r3, r3
-.L779:
+.L781:
 	cmp	r3, r10
-	beq	.L778
+	beq	.L780
 	mul	r8, r9, r3
-	ldr	r2, [r7, #760]
+	ldr	r2, [r7, #808]
 	mov	r0, r4
-	ldr	r1, .L785+48
+	ldr	r1, .L787+48
 	add	r2, r2, r8
 	ldrh	r2, [r2, #4]
 	str	r2, [sp]
-	ldr	r2, [r7, #748]
+	ldr	r2, [r7, #752]
 	ldrh	r2, [r2, r3, lsl #1]
 	str	r2, [sp, #4]
 	mov	r2, r5
 	bl	sprintf
 	adds	r5, r5, #1
-	ldr	r3, [r7, #760]
+	ldr	r3, [r7, #808]
 	cmp	r5, #4
 	ldrh	r3, [r3, r8]
 	add	r4, r4, r0
-	bne	.L779
-.L778:
+	bne	.L781
+.L780:
 	subs	r0, r4, r6
 	add	sp, sp, #32
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L786:
+.L788:
 	.align	2
-.L785:
-	.word	.LC62
-	.word	.LC63
-	.word	.LC64
+.L787:
 	.word	.LC65
 	.word	.LC66
 	.word	.LC67
@@ -5622,24 +5613,27 @@ FtlPrintInfo2buf:
 	.word	.LC70
 	.word	.LC71
 	.word	.LC72
-	.word	-1431655765
 	.word	.LC73
+	.word	.LC74
+	.word	.LC75
+	.word	-1431655765
+	.word	.LC76
 	.fnend
 	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
 	.align	1
-	.global	rknand_proc_ftlread
+	.global	ftl_proc_ftl_read
 	.thumb
 	.thumb_func
-	.type	rknand_proc_ftlread, %function
-rknand_proc_ftlread:
+	.type	ftl_proc_ftl_read, %function
+ftl_proc_ftl_read:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r5, r0
-	ldr	r1, .L788
-	ldr	r2, .L788+4
+	ldr	r1, .L790
+	ldr	r2, .L790+4
 	bl	sprintf
 	adds	r4, r5, r0
 	mov	r0, r4
@@ -5647,13 +5641,13 @@ rknand_proc_ftlread:
 	add	r0, r0, r4
 	subs	r0, r0, r5
 	pop	{r3, r4, r5, pc}
-.L789:
+.L791:
 	.align	2
-.L788:
-	.word	.LC74
-	.word	.LC75
+.L790:
+	.word	.LC77
+	.word	.LC78
 	.fnend
-	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
+	.size	ftl_proc_ftl_read, .-ftl_proc_ftl_read
 	.align	1
 	.global	GetSwlReplaceBlock
 	.thumb
@@ -5667,184 +5661,185 @@ GetSwlReplaceBlock:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldr	r4, .L818
-	ldr	r2, [r4, #1000]
-	ldr	r3, [r4, #1008]
+	ldr	r4, .L820
+	ldr	r2, [r4, #1044]
+	ldr	r3, [r4, #1052]
 	cmp	r2, r3
-	bcs	.L791
-	ldr	r2, .L818+4
+	bcs	.L793
+	ldr	r2, .L820+4
 	movs	r3, #0
-	ldr	r0, [r4, #748]
-	str	r3, [r4, #992]
-	ldrh	r1, [r2, #2836]
+	ldr	r0, [r4, #752]
+	str	r3, [r4, #1036]
+	ldrh	r1, [r2, #2848]
 	mov	r5, r2
-.L792:
+.L794:
 	cmp	r3, r1
-	bcs	.L817
+	bcs	.L819
 	ldrh	r6, [r0, r3, lsl #1]
 	adds	r3, r3, #1
-	ldr	r2, [r4, #992]
+	ldr	r2, [r4, #1036]
 	add	r2, r2, r6
-	str	r2, [r4, #992]
-	b	.L792
-.L817:
-	ldr	r6, [r4, #992]
+	str	r2, [r4, #1036]
+	b	.L794
+.L819:
+	ldr	r6, [r4, #1036]
 	mov	r0, r6
 	bl	__aeabi_uidiv
-	ldrh	r1, [r5, #2888]
-	str	r0, [r4, #1000]
-	ldr	r0, [r4, #996]
+	ldrh	r1, [r5, #2900]
+	str	r0, [r4, #1044]
+	ldr	r0, [r4, #1040]
 	subs	r0, r6, r0
 	bl	__aeabi_uidiv
-	str	r0, [r4, #992]
-	b	.L794
-.L791:
-	ldr	r3, [r4, #1004]
+	str	r0, [r4, #1036]
+	b	.L796
+.L793:
+	ldr	r3, [r4, #1048]
 	cmp	r2, r3
-	bls	.L794
-	ldr	r0, .L818+4
+	bls	.L796
+	ldr	r0, .L820+4
 	adds	r3, r3, #1
-	str	r3, [r4, #1004]
+	str	r3, [r4, #1048]
 	movs	r3, #0
-.L796:
-	ldrh	r2, [r0, #2836]
+.L798:
+	ldrh	r2, [r0, #2848]
 	cmp	r3, r2
-	bcs	.L794
-	ldr	r1, [r4, #748]
+	bcs	.L796
+	ldr	r1, [r4, #752]
 	ldrh	r2, [r1, r3, lsl #1]
 	adds	r2, r2, #1
 	strh	r2, [r1, r3, lsl #1]	@ movhi
 	adds	r3, r3, #1
-	b	.L796
-.L794:
-	ldr	r6, [r4, #1008]
-	ldr	r8, [r4, #1000]
+	b	.L798
+.L796:
+	ldr	r6, [r4, #1052]
+	ldr	r8, [r4, #1044]
 	add	r3, r6, #256
-	ldr	r2, .L818
 	cmp	r3, r8
-	bls	.L799
-	ldr	r1, [r2, #1004]
+	bls	.L801
+	ldr	r2, .L820
 	add	r3, r6, #768
-	cmp	r3, r1
-	bls	.L799
-	ldr	r3, [r2, #948]
-	cbnz	r3, .L800
-.L802:
+	ldr	r2, [r2, #1048]
+	cmp	r3, r2
+	bls	.L801
+	ldr	r3, .L820+4
+	ldr	r3, [r3, #2832]
+	cbnz	r3, .L802
+.L804:
 	movw	r0, #65535
-	b	.L801
-.L800:
+	b	.L803
+.L802:
 	cmp	r6, #30
-	bhi	.L802
-.L799:
-	ldrh	r0, [r4, #784]
+	bhi	.L804
+.L801:
+	ldrh	r0, [r4, #832]
 	add	r0, r0, r0, lsl #1
 	ubfx	r0, r0, #2, #16
 	bl	GetFreeBlockMaxEraseCount
 	add	r3, r6, #64
 	cmp	r0, r3
 	mov	r9, r0
-	bcs	.L803
+	bcs	.L805
 	cmp	r6, #30
-	bhi	.L802
-.L803:
-	ldr	r3, [r4, #764]
-	ldr	r2, .L818
+	bhi	.L804
+.L805:
+	ldr	r3, [r4, #812]
+	ldr	r2, .L820
 	cmp	r3, #0
-	beq	.L802
-	ldr	r1, .L818+4
+	beq	.L804
+	ldr	r1, .L820+4
 	movw	r7, #65535
-	ldr	r0, [r2, #760]
+	ldr	r0, [r2, #808]
 	mov	ip, #6
-	ldr	r10, [r2, #748]
+	ldr	r10, [r2, #752]
 	mov	r5, r7
-	ldrh	r1, [r1, #2836]
+	ldrh	r1, [r1, #2848]
 	mov	lr, r7
 	str	r1, [sp, #20]
 	movs	r1, #0
-.L804:
+.L806:
 	ldrh	r2, [r3]
 	cmp	r2, lr
 	str	r2, [sp, #16]
-	beq	.L806
+	beq	.L808
 	adds	r1, r1, #1
 	ldr	r2, [sp, #20]
 	uxth	r1, r1
 	cmp	r1, r2
-	bhi	.L802
+	bhi	.L804
 	ldrh	fp, [r3, #4]
 	cmp	fp, #0
-	beq	.L805
+	beq	.L807
 	subs	r3, r3, r0
-	ldr	r2, .L818+8
+	ldr	r2, .L820+8
 	asrs	r3, r3, #1
 	muls	r3, r2, r3
 	uxth	r3, r3
 	ldrh	fp, [r10, r3, lsl #1]
 	cmp	fp, r6
-	bls	.L810
+	bls	.L812
 	cmp	fp, r7
 	itt	cc
 	movcc	r7, fp
 	movcc	r5, r3
-.L805:
+.L807:
 	ldr	r3, [sp, #16]
 	mla	r3, ip, r3, r0
-	b	.L804
-.L810:
+	b	.L806
+.L812:
 	mov	r5, r3
-.L806:
+.L808:
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L802
+	beq	.L804
 	ldrh	fp, [r10, r5, lsl #1]
 	lsls	r3, r5, #1
 	cmp	fp, r6
-	bls	.L808
+	bls	.L810
 	str	r3, [sp, #16]
 	bl	GetFreeBlockMinEraseCount
 	ldr	r3, [sp, #16]
 	cmp	r0, r6
 	it	hi
-	strhi	r7, [r4, #1008]
-.L808:
+	strhi	r7, [r4, #1052]
+.L810:
 	cmp	fp, r8
-	bcs	.L802
+	bcs	.L804
 	add	r2, fp, #128
 	cmp	r9, r2
-	ble	.L802
+	ble	.L804
 	add	r2, fp, #256
 	cmp	r2, r8
-	bcc	.L809
-	ldr	r2, [r4, #1004]
+	bcc	.L811
+	ldr	r2, [r4, #1048]
 	add	fp, fp, #768
 	cmp	fp, r2
-	bcs	.L802
-.L809:
-	ldr	r2, [r4, #768]
+	bcs	.L804
+.L811:
+	ldr	r2, [r4, #816]
 	mov	r1, r5
-	ldr	r0, .L818+12
+	ldr	r0, .L820+12
 	ldrh	r2, [r2, r3]
 	str	r2, [sp]
 	mov	r2, r8
 	ldrh	r3, [r10, r3]
 	str	r9, [sp, #8]
 	str	r3, [sp, #4]
-	ldr	r3, [r4, #1004]
+	ldr	r3, [r4, #1048]
 	bl	printk
 	mov	r0, r5
 	movs	r3, #1
-	str	r3, [r4, #1652]
-.L801:
+	str	r3, [r4, #1648]
+.L803:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L819:
+.L821:
 	.align	2
-.L818:
+.L820:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	-1431655765
-	.word	.LC76
+	.word	.LC79
 	.fnend
 	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
 	.align	1
@@ -5860,18 +5855,18 @@ free_data_superblock:
 	cmp	r0, r2
 	push	{r3, lr}
 	.save {r3, lr}
-	beq	.L821
-	ldr	r2, .L822
+	beq	.L823
+	ldr	r2, .L824
 	movs	r1, #0
-	ldr	r2, [r2, #768]
+	ldr	r2, [r2, #816]
 	strh	r1, [r2, r0, lsl #1]	@ movhi
 	bl	INSERT_FREE_LIST
-.L821:
+.L823:
 	movs	r0, #0
 	pop	{r3, pc}
-.L823:
+.L825:
 	.align	2
-.L822:
+.L824:
 	.word	.LANCHOR2
 	.fnend
 	.size	free_data_superblock, .-free_data_superblock
@@ -5884,9 +5879,9 @@ FtlGcBufInit:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L835
+	ldr	r2, .L837
 	mov	ip, #36
-	ldr	r0, .L835+4
+	ldr	r0, .L837+4
 	movs	r3, #0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
@@ -5894,68 +5889,68 @@ FtlGcBufInit:
 	mov	lr, #1
 	mov	r6, r0
 	mov	r4, r2
-	str	r3, [r2, #1656]
-.L825:
-	ldrh	r1, [r0, #2828]
+	str	r3, [r2, #1652]
+.L827:
+	ldrh	r1, [r0, #2840]
 	adds	r5, r3, #1
 	uxth	r3, r3
-	ldr	r8, .L835+4
+	ldr	r8, .L837+4
 	cmp	r3, r1
-	bcs	.L833
+	bcs	.L835
 	mul	r8, r7, r3
-	ldr	r9, [r2, #1660]
+	ldr	r9, [r2, #1656]
 	add	r1, r9, r8
 	str	lr, [r1, #8]
-	ldrh	r1, [r0, #2908]
+	ldrh	r1, [r0, #2920]
 	muls	r1, r3, r1
 	it	mi
 	addmi	r1, r1, #3
 	bic	r10, r1, #3
-	ldr	r1, [r4, #1664]
+	ldr	r1, [r4, #1660]
 	add	r1, r1, r10
 	str	r1, [r9, r8]
-	ldr	r10, [r2, #1660]
-	ldrh	r1, [r6, #2910]
+	ldr	r10, [r2, #1656]
+	ldrh	r1, [r6, #2922]
 	muls	r1, r3, r1
 	it	mi
 	addmi	r1, r1, #3
 	add	r9, r10, r8
 	bic	fp, r1, #3
-	ldr	r1, [r4, #1668]
+	ldr	r1, [r4, #1664]
 	add	r1, r1, fp
 	str	r1, [r9, #4]
-	ldr	r1, [r2, #1672]
+	ldr	r1, [r2, #1668]
 	mla	r3, ip, r3, r1
 	ldr	r1, [r10, r8]
 	str	r1, [r3, #8]
 	ldr	r1, [r9, #4]
 	str	r1, [r3, #12]
 	mov	r3, r5
-	b	.L825
-.L833:
-	ldr	r0, .L835
+	b	.L827
+.L835:
+	ldr	r0, .L837
 	mov	lr, #12
 	movs	r5, #0
-.L829:
-	ldr	r3, [r2, #1676]
+.L831:
+	ldr	r3, [r2, #1672]
 	cmp	r1, r3
-	bcs	.L834
+	bcs	.L836
 	mul	r7, lr, r1
-	ldr	r6, [r0, #1660]
-	ldr	r4, [r0, #1664]
+	ldr	r6, [r0, #1656]
+	ldr	r4, [r0, #1660]
 	adds	r3, r6, r7
 	str	r5, [r3, #8]
-	ldrh	r3, [r8, #2908]
+	ldrh	r3, [r8, #2920]
 	muls	r3, r1, r3
 	it	mi
 	addmi	r3, r3, #3
 	bic	r3, r3, #3
 	add	r3, r3, r4
 	str	r3, [r6, r7]
-	ldr	r3, [r2, #1660]
-	ldr	r6, [r0, #1668]
+	ldr	r3, [r2, #1656]
+	ldr	r6, [r0, #1664]
 	add	r7, r7, r3
-	ldrh	r3, [r8, #2910]
+	ldrh	r3, [r8, #2922]
 	muls	r3, r1, r3
 	add	r1, r1, #1
 	it	mi
@@ -5964,12 +5959,12 @@ FtlGcBufInit:
 	uxth	r1, r1
 	add	r3, r3, r6
 	str	r3, [r7, #4]
-	b	.L829
-.L834:
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+	b	.L831
 .L836:
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L838:
 	.align	2
-.L835:
+.L837:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -5983,41 +5978,41 @@ FtlGcBufFree:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L844
+	ldr	r3, .L846
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	movs	r5, #0
-	ldr	lr, [r3, #1676]
+	ldr	lr, [r3, #1672]
 	mov	r10, #36
-	ldr	r6, [r3, #1660]
+	ldr	r6, [r3, #1656]
 	mov	r8, #12
 	mov	ip, r5
-.L838:
+.L840:
 	uxth	r4, r5
 	cmp	r4, r1
-	bcs	.L837
+	bcs	.L839
 	mla	r4, r10, r4, r0
 	movs	r2, #0
-.L839:
+.L841:
 	uxth	r3, r2
 	cmp	r3, lr
-	bcs	.L840
+	bcs	.L842
 	mul	r3, r8, r3
 	ldr	r7, [r4, #8]
 	adds	r2, r2, #1
 	add	r9, r6, r3
 	ldr	r3, [r6, r3]
 	cmp	r3, r7
-	bne	.L839
+	bne	.L841
 	str	ip, [r9, #8]
-.L840:
+.L842:
 	adds	r5, r5, #1
-	b	.L838
-.L837:
+	b	.L840
+.L839:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L845:
+.L847:
 	.align	2
-.L844:
+.L846:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufFree, .-FtlGcBufFree
@@ -6030,43 +6025,43 @@ FtlGcBufAlloc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L854
+	ldr	r3, .L856
 	mov	ip, #1
 	push	{r4, r5, r6, r7, r8, r9, lr}
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	movs	r4, #0
-	ldr	r5, [r3, #1676]
+	ldr	r5, [r3, #1672]
 	mov	lr, #12
-	ldr	r6, [r3, #1660]
+	ldr	r6, [r3, #1656]
 	mov	r8, #36
-.L847:
+.L849:
 	uxth	r2, r4
 	cmp	r2, r1
-	bcs	.L853
+	bcs	.L855
 	mov	r9, #0
-.L848:
+.L850:
 	uxth	r3, r9
 	cmp	r3, r5
-	bcs	.L849
+	bcs	.L851
 	mla	r3, lr, r3, r6
 	add	r9, r9, #1
 	ldr	r7, [r3, #8]
 	cmp	r7, #0
-	bne	.L848
+	bne	.L850
 	mla	r2, r8, r2, r0
 	ldr	r7, [r3]
 	str	ip, [r3, #8]
 	str	r7, [r2, #8]
 	ldr	r3, [r3, #4]
 	str	r3, [r2, #12]
-.L849:
+.L851:
 	adds	r4, r4, #1
-	b	.L847
-.L853:
-	pop	{r4, r5, r6, r7, r8, r9, pc}
+	b	.L849
 .L855:
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L857:
 	.align	2
-.L854:
+.L856:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
@@ -6080,24 +6075,24 @@ IsBlkInGcList:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L862
-	ldr	r3, [r2, #1680]
-	ldrh	r2, [r2, #1684]
+	ldr	r2, .L864
+	ldr	r3, [r2, #1676]
+	ldrh	r2, [r2, #1680]
 	add	r2, r3, r2, lsl #1
-.L857:
+.L859:
 	cmp	r3, r2
-	beq	.L861
+	beq	.L863
 	ldrh	r1, [r3], #2
 	cmp	r1, r0
-	bne	.L857
+	bne	.L859
 	movs	r0, #1
 	bx	lr
-.L861:
+.L863:
 	movs	r0, #0
 	bx	lr
-.L863:
+.L865:
 	.align	2
-.L862:
+.L864:
 	.word	.LANCHOR2
 	.fnend
 	.size	IsBlkInGcList, .-IsBlkInGcList
@@ -6117,42 +6112,42 @@ FtlGcUpdatePage:
 	mov	r7, r1
 	mov	r8, r2
 	bl	P2V_block_in_plane
-	ldr	r3, .L871
+	ldr	r3, .L873
 	movs	r4, #0
-	ldrh	r1, [r3, #1684]
-	ldr	r2, [r3, #1680]
-.L865:
+	ldrh	r1, [r3, #1680]
+	ldr	r2, [r3, #1676]
+.L867:
 	uxth	r5, r4
 	cmp	r5, r1
-	bcs	.L869
+	bcs	.L871
 	adds	r4, r4, #1
 	add	lr, r2, r4, lsl #1
 	ldrh	lr, [lr, #-2]
 	cmp	lr, r0
-	bne	.L865
-.L869:
-	cmp	r5, r1
 	bne	.L867
+.L871:
+	cmp	r5, r1
+	bne	.L869
 	strh	r0, [r2, r5, lsl #1]	@ movhi
-	ldrh	r0, [r3, #1684]
+	ldrh	r0, [r3, #1680]
 	adds	r0, r0, #1
-	strh	r0, [r3, #1684]	@ movhi
-.L867:
-	ldrh	r2, [r3, #1692]
+	strh	r0, [r3, #1680]	@ movhi
+.L869:
+	ldrh	r2, [r3, #1688]
 	movs	r0, #12
 	muls	r0, r2, r0
-	ldr	r2, [r3, #1688]
+	ldr	r2, [r3, #1684]
 	adds	r1, r2, r0
 	str	r7, [r1, #4]
 	str	r8, [r1, #8]
 	str	r6, [r2, r0]
-	ldrh	r2, [r3, #1692]
+	ldrh	r2, [r3, #1688]
 	adds	r2, r2, #1
-	strh	r2, [r3, #1692]	@ movhi
+	strh	r2, [r3, #1688]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L872:
+.L874:
 	.align	2
-.L871:
+.L873:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
@@ -6169,31 +6164,31 @@ FtlGcRefreshOpenBlock:
 	.save {r4, lr}
 	mov	r4, r0
 	mov	r1, r4
-	ldr	r0, .L876
+	ldr	r0, .L878
 	bl	printk
-	ldr	r3, .L876+4
-	ldrh	r0, [r3, #1694]
+	ldr	r3, .L878+4
+	ldrh	r0, [r3, #1690]
 	cmp	r0, r4
-	beq	.L874
-	ldrh	r1, [r3, #1696]
+	beq	.L876
+	ldrh	r1, [r3, #1692]
 	cmp	r1, r4
-	beq	.L874
+	beq	.L876
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L875
-	strh	r4, [r3, #1694]	@ movhi
-	b	.L874
-.L875:
+	bne	.L877
+	strh	r4, [r3, #1690]	@ movhi
+	b	.L876
+.L877:
 	cmp	r1, r2
 	it	eq
-	strheq	r4, [r3, #1696]	@ movhi
-.L874:
+	strheq	r4, [r3, #1692]	@ movhi
+.L876:
 	movs	r0, #0
 	pop	{r4, pc}
-.L877:
+.L879:
 	.align	2
-.L876:
-	.word	.LC77
+.L878:
+	.word	.LC80
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcRefreshOpenBlock, .-FtlGcRefreshOpenBlock
@@ -6210,31 +6205,31 @@ FtlGcRefreshBlock:
 	.save {r4, lr}
 	mov	r4, r0
 	mov	r1, r4
-	ldr	r0, .L881
+	ldr	r0, .L883
 	bl	printk
-	ldr	r3, .L881+4
-	ldrh	r0, [r3, #1694]
+	ldr	r3, .L883+4
+	ldrh	r0, [r3, #1690]
 	cmp	r0, r4
-	beq	.L879
-	ldrh	r1, [r3, #1696]
+	beq	.L881
+	ldrh	r1, [r3, #1692]
 	cmp	r1, r4
-	beq	.L879
+	beq	.L881
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L880
-	strh	r4, [r3, #1694]	@ movhi
-	b	.L879
-.L880:
+	bne	.L882
+	strh	r4, [r3, #1690]	@ movhi
+	b	.L881
+.L882:
 	cmp	r1, r2
 	it	eq
-	strheq	r4, [r3, #1696]	@ movhi
-.L879:
+	strheq	r4, [r3, #1692]	@ movhi
+.L881:
 	movs	r0, #0
 	pop	{r4, pc}
-.L882:
+.L884:
 	.align	2
-.L881:
-	.word	.LC77
+.L883:
+	.word	.LC80
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
@@ -6251,53 +6246,55 @@ FtlGcMarkBadPhyBlk:
 	.save {r4, r5, r6, lr}
 	mov	r5, r0
 	bl	P2V_block_in_plane
-	ldr	r4, .L892
+	ldr	r4, .L894
 	mov	r2, r5
-	ldrh	r1, [r4, #1698]
+	ldrh	r1, [r4, #1694]
 	mov	r6, r0
-	ldr	r0, .L892+4
+	ldr	r0, .L894+4
 	bl	printk
 	mov	r0, r6
 	bl	FtlGcRefreshBlock
-	ldr	r2, [r4, #948]
+	ldr	r3, .L894+8
+	ldr	r2, [r3, #2832]
 	mov	r3, r4
-	cbz	r2, .L884
-	ldr	r1, [r4, #748]
+	cbz	r2, .L886
+	ldr	r1, [r4, #752]
 	ldrh	r2, [r1, r6, lsl #1]
 	cmp	r2, #29
 	itt	hi
 	subhi	r2, r2, #30
 	strhhi	r2, [r1, r6, lsl #1]	@ movhi
-.L884:
-	ldrh	r2, [r3, #1698]
+.L886:
+	ldrh	r2, [r3, #1694]
 	movs	r1, #0
-	ldr	r4, .L892+8
-.L885:
+	ldr	r4, .L894+12
+.L887:
 	uxth	r0, r1
 	cmp	r0, r2
-	bcs	.L891
+	bcs	.L893
 	adds	r1, r1, #1
 	add	r0, r4, r1, lsl #1
 	ldrh	r0, [r0, #-2]
 	cmp	r0, r5
-	bne	.L885
-	b	.L886
-.L891:
+	bne	.L887
+	b	.L888
+.L893:
 	cmp	r2, #15
 	itttt	ls
 	addls	r1, r2, #1
-	strhls	r1, [r3, #1698]	@ movhi
+	strhls	r1, [r3, #1694]	@ movhi
 	addls	r3, r3, r2, lsl #1
-	strhls	r5, [r3, #1700]	@ movhi
-.L886:
+	strhls	r5, [r3, #1696]	@ movhi
+.L888:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L893:
+.L895:
 	.align	2
-.L892:
+.L894:
 	.word	.LANCHOR2
-	.word	.LC78
-	.word	.LANCHOR2+1700
+	.word	.LC81
+	.word	.LANCHOR0
+	.word	.LANCHOR2+1696
 	.fnend
 	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
 	.align	1
@@ -6311,32 +6308,32 @@ FtlGcReFreshBadBlk:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r4, .L900
-	ldrh	r3, [r4, #1698]
-	cbz	r3, .L895
-	ldrh	r1, [r4, #1694]
+	ldr	r4, .L902
+	ldrh	r3, [r4, #1694]
+	cbz	r3, .L897
+	ldrh	r1, [r4, #1690]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L895
-	ldrh	r2, [r4, #1734]
+	bne	.L897
+	ldrh	r2, [r4, #1730]
 	cmp	r2, r3
 	itt	cs
 	movcs	r3, #0
-	strhcs	r3, [r4, #1734]	@ movhi
-	ldrh	r3, [r4, #1734]
+	strhcs	r3, [r4, #1730]	@ movhi
+	ldrh	r3, [r4, #1730]
 	add	r3, r4, r3, lsl #1
-	ldrh	r0, [r3, #1700]
+	ldrh	r0, [r3, #1696]
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	ldrh	r3, [r4, #1734]
+	ldrh	r3, [r4, #1730]
 	adds	r3, r3, #1
-	strh	r3, [r4, #1734]	@ movhi
-.L895:
+	strh	r3, [r4, #1730]	@ movhi
+.L897:
 	movs	r0, #0
 	pop	{r4, pc}
-.L901:
+.L903:
 	.align	2
-.L900:
+.L902:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
@@ -6352,9 +6349,9 @@ ftl_memset:
 	push	{r4, lr}
 	.save {r4, lr}
 	mov	r4, r0
-	cbz	r2, .L903
+	cbz	r2, .L905
 	bl	memset
-.L903:
+.L905:
 	mov	r0, r4
 	pop	{r4, pc}
 	.fnend
@@ -6371,64 +6368,64 @@ FtlMemInit:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r0, #1024
-	ldr	r4, .L1011
+	ldr	r4, .L1013
 	movs	r6, #0
-	ldr	r5, .L1011+4
+	ldr	r5, .L1013+4
 	movw	r3, #65535
 	movs	r7, #12
 	mov	r8, #36
-	strh	r6, [r4, #1736]	@ movhi
-	ldrh	r1, [r5, #2904]
-	str	r6, [r4, #1740]
-	str	r6, [r4, #1124]
-	str	r6, [r4, #984]
-	str	r6, [r4, #988]
-	str	r6, [r4, #972]
-	str	r6, [r4, #960]
-	str	r6, [r4, #956]
-	str	r6, [r4, #964]
-	str	r6, [r4, #968]
-	str	r6, [r4, #952]
-	str	r6, [r4, #992]
-	str	r6, [r4, #996]
-	str	r6, [r4, #752]
+	strh	r6, [r4, #1732]	@ movhi
+	ldrh	r1, [r5, #2916]
+	str	r6, [r4, #1736]
+	str	r6, [r4, #1120]
+	str	r6, [r4, #1028]
+	str	r6, [r4, #1032]
+	str	r6, [r4, #1016]
 	str	r6, [r4, #1004]
+	str	r6, [r4, #1000]
 	str	r6, [r4, #1008]
-	str	r6, [r4, #1744]
-	str	r6, [r4, #1652]
-	str	r3, [r4, #1748]
+	str	r6, [r4, #1012]
+	str	r6, [r4, #996]
+	str	r6, [r4, #1036]
+	str	r6, [r4, #1040]
+	str	r6, [r4, #756]
+	str	r6, [r4, #1048]
+	str	r6, [r4, #1052]
+	str	r6, [r4, #1740]
+	str	r6, [r4, #1648]
+	str	r3, [r4, #1744]
+	str	r6, [r4, #1748]
+	str	r6, [r4, #1640]
 	str	r6, [r4, #1752]
-	str	r6, [r4, #1644]
-	str	r6, [r5, #2964]
-	strh	r3, [r4, #1694]	@ movhi
-	strh	r3, [r4, #1696]	@ movhi
+	strh	r3, [r4, #1690]	@ movhi
+	strh	r3, [r4, #1692]	@ movhi
 	movs	r3, #32
-	strh	r6, [r4, #1648]	@ movhi
-	strh	r3, [r4, #1640]	@ movhi
+	strh	r6, [r4, #1644]	@ movhi
+	strh	r3, [r4, #1636]	@ movhi
 	movs	r3, #128
-	strh	r6, [r4, #1698]	@ movhi
-	strh	r3, [r4, #1642]	@ movhi
+	strh	r6, [r4, #1694]	@ movhi
+	strh	r3, [r4, #1638]	@ movhi
 	strh	r6, [r4, #1756]	@ movhi
-	strh	r6, [r4, #1734]	@ movhi
+	strh	r6, [r4, #1730]	@ movhi
 	bl	__aeabi_idiv
-	ldrh	r3, [r5, #2828]
-	str	r6, [r5, #2952]
+	ldrh	r3, [r5, #2840]
+	str	r6, [r5, #2960]
 	lsls	r3, r3, #2
 	cmp	r0, r3
 	str	r0, [r4, #1760]
-	ldrh	r0, [r5, #2902]
+	ldrh	r0, [r5, #2914]
 	it	hi
 	strhi	r3, [r4, #1760]
 	lsls	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #1680]
-	ldrh	r0, [r5, #2902]
+	str	r0, [r4, #1676]
+	ldrh	r0, [r5, #2914]
 	muls	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r6, [r5, #2828]
+	ldrh	r6, [r5, #2840]
 	mul	r6, r8, r6
 	lsl	r9, r6, #3
-	str	r0, [r4, #1688]
+	str	r0, [r4, #1684]
 	mov	r0, r9
 	bl	ftl_malloc
 	str	r0, [r4, #1764]
@@ -6440,303 +6437,303 @@ FtlMemInit:
 	str	r0, [r4, #1772]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #744]
+	str	r0, [r4, #748]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #1672]
+	str	r0, [r4, #1668]
 	ldr	r0, [r4, #1760]
 	mul	r0, r8, r0
 	bl	ftl_malloc
-	ldrh	r6, [r5, #2908]
-	ldrh	r3, [r5, #2828]
+	ldrh	r6, [r5, #2920]
+	ldrh	r3, [r5, #2840]
 	lsls	r3, r3, #1
 	adds	r3, r3, #1
-	str	r3, [r4, #1676]
-	str	r0, [r5, #2956]
-	mov	r0, r6
-	bl	ftl_malloc
-	str	r0, [r4, #756]
+	str	r3, [r4, #1672]
+	str	r0, [r5, #2964]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #1776]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #1780]
-	ldr	r0, [r4, #1676]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1784]
+	ldr	r0, [r4, #1672]
 	muls	r0, r6, r0
 	bl	ftl_malloc
-	str	r0, [r4, #1664]
+	str	r0, [r4, #1660]
 	ldr	r0, [r4, #1760]
 	muls	r0, r6, r0
 	bl	ftl_malloc
-	str	r0, [r4, #1784]
-	mov	r0, r6
-	bl	ftl_malloc
 	str	r0, [r4, #1788]
 	mov	r0, r6
 	bl	ftl_malloc
 	str	r0, [r4, #1792]
-	ldr	r0, [r4, #1676]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1796]
+	ldr	r0, [r4, #1672]
 	muls	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r3, [r5, #2828]
-	ldrh	r6, [r5, #2910]
+	ldrh	r3, [r5, #2840]
+	ldrh	r6, [r5, #2922]
 	muls	r6, r3, r6
-	str	r0, [r4, #1660]
+	str	r0, [r4, #1656]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #1796]
+	str	r0, [r4, #1800]
 	lsls	r0, r6, #3
 	bl	ftl_malloc
-	ldrh	r3, [r5, #2910]
-	str	r0, [r4, #1800]
-	ldr	r0, [r4, #1676]
+	ldrh	r3, [r5, #2922]
+	str	r0, [r4, #1804]
+	ldr	r0, [r4, #1672]
 	muls	r0, r3, r0
 	bl	ftl_malloc
-	ldrh	r3, [r5, #2910]
-	str	r0, [r4, #1668]
+	ldrh	r3, [r5, #2922]
+	str	r0, [r4, #1664]
 	ldr	r0, [r4, #1760]
 	muls	r0, r3, r0
 	bl	ftl_malloc
-	str	r0, [r4, #1804]
-	ldrh	r0, [r5, #2838]
+	str	r0, [r4, #1808]
+	ldrh	r0, [r5, #2850]
 	lsls	r0, r0, #1
 	uxth	r0, r0
-	strh	r0, [r4, #1808]	@ movhi
+	strh	r0, [r4, #1812]	@ movhi
 	bl	ftl_malloc
-	str	r0, [r4, #1812]
-	ldrh	r0, [r4, #1808]
+	str	r0, [r4, #1816]
+	ldrh	r0, [r4, #1812]
 	addw	r0, r0, #547
 	lsrs	r0, r0, #9
-	strh	r0, [r4, #1808]	@ movhi
+	strh	r0, [r4, #1812]	@ movhi
 	lsls	r0, r0, #9
 	bl	ftl_malloc
-	ldrh	r6, [r5, #2838]
+	ldrh	r6, [r5, #2850]
 	lsls	r6, r6, #1
-	str	r0, [r4, #1816]
+	str	r0, [r4, #1820]
 	adds	r0, r0, #32
-	str	r0, [r4, #748]
+	str	r0, [r4, #752]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #1820]
+	str	r0, [r4, #1824]
 	mov	r0, r6
 	bl	ftl_malloc
-	ldr	r6, [r5, #2928]
+	ldr	r6, [r5, #2940]
 	lsls	r6, r6, #1
-	str	r0, [r4, #768]
+	str	r0, [r4, #816]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #1824]
+	str	r0, [r4, #1828]
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #1828]
-	ldrh	r0, [r5, #2838]
+	str	r0, [r4, #1832]
+	ldrh	r0, [r5, #2850]
 	lsrs	r0, r0, #3
 	adds	r0, r0, #4
 	bl	ftl_malloc
-	str	r0, [r4, #944]
-	ldrh	r0, [r5, #2920]
+	str	r0, [r4, #992]
+	ldrh	r0, [r5, #2932]
 	lsls	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r5, #2948]
-	ldrh	r0, [r5, #2920]
+	str	r0, [r5, #2956]
+	ldrh	r0, [r5, #2932]
 	lsls	r0, r0, #1
 	bl	ftl_malloc
-	str	r0, [r4, #1832]
-	ldrh	r0, [r5, #2920]
+	str	r0, [r4, #1836]
+	ldrh	r0, [r5, #2932]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #1836]
-	ldrh	r0, [r5, #2922]
+	str	r0, [r4, #1840]
+	ldrh	r0, [r5, #2934]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	ldrh	r2, [r5, #2922]
+	ldrh	r2, [r5, #2934]
 	movs	r1, #0
 	lsls	r2, r2, #2
-	str	r0, [r4, #1840]
+	str	r0, [r4, #1844]
 	bl	ftl_memset
-	ldrh	r6, [r5, #2936]
+	ldrh	r6, [r5, #2948]
 	lsls	r6, r6, #2
 	mov	r0, r6
 	bl	ftl_malloc
-	str	r0, [r4, #1844]
+	str	r0, [r4, #1848]
 	mov	r0, r6
 	bl	ftl_malloc
-	ldr	r6, .L1011+8
-	str	r0, [r4, #1848]
-	ldr	r0, [r5, #2928]
+	ldr	r6, .L1013+8
+	str	r0, [r4, #1852]
+	ldr	r0, [r5, #2940]
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	str	r0, [r4, #1852]
-	ldrh	r0, [r5, #2938]
+	str	r0, [r4, #1856]
+	ldrh	r0, [r5, #2950]
 	muls	r0, r7, r0
 	bl	ftl_malloc
-	ldrh	r3, [r5, #2938]
-	str	r0, [r4, #932]
-	ldrh	r0, [r5, #2908]
+	ldrh	r3, [r5, #2950]
+	str	r0, [r4, #980]
+	ldrh	r0, [r5, #2920]
 	muls	r0, r3, r0
 	bl	ftl_malloc
-	ldrh	r3, [r5, #2838]
-	str	r0, [r4, #1856]
+	ldrh	r3, [r5, #2850]
+	str	r0, [r4, #1860]
 	movs	r0, #6
 	muls	r0, r3, r0
 	bl	ftl_malloc
-	ldrh	r3, [r5, #2894]
+	ldrh	r3, [r5, #2906]
 	adds	r3, r3, #31
 	asrs	r3, r3, #5
-	strh	r3, [r4, #1860]	@ movhi
-	str	r0, [r4, #760]
-	ldrh	r0, [r5, #2850]
+	strh	r3, [r4, #1864]	@ movhi
+	str	r0, [r4, #808]
+	ldrh	r0, [r5, #2862]
 	muls	r0, r3, r0
 	lsls	r0, r0, #2
 	bl	ftl_malloc
-	ldrh	r2, [r4, #1860]
-	ldrh	r7, [r5, #2850]
+	ldrh	r2, [r4, #1864]
+	ldrh	r7, [r5, #2862]
 	movs	r3, #1
 	lsls	r2, r2, #2
 	mov	r1, r2
-	str	r0, [r5, #2996]
-.L909:
+	str	r0, [r5, #3000]
+.L911:
 	cmp	r3, r7
-	bcs	.L1009
-	ldr	r0, [r5, #2996]
+	bcs	.L1011
+	ldr	r0, [r5, #3000]
 	adds	r3, r3, #1
 	add	r0, r0, r1
 	add	r1, r1, r2
 	str	r0, [r6, #4]!
-	b	.L909
-.L1009:
-	ldr	r2, .L1011+12
+	b	.L911
+.L1011:
+	ldr	r2, .L1013+12
 	movs	r1, #0
-.L911:
+.L913:
 	cmp	r3, #8
-	beq	.L1010
+	beq	.L1012
 	add	r0, r2, r3, lsl #2
 	adds	r3, r3, #1
 	str	r1, [r0, #28]
-	b	.L911
-.L1010:
-	ldr	r2, [r4, #1824]
-	ldr	r3, .L1011
-	cbnz	r2, .L913
-.L915:
-	ldr	r1, .L1011+16
-	ldr	r0, .L1011+20
+	b	.L913
+.L1012:
+	ldr	r2, [r4, #1828]
+	ldr	r3, .L1013
+	cbnz	r2, .L915
+.L917:
+	ldr	r1, .L1013+16
+	ldr	r0, .L1013+20
 	bl	printk
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1012:
+.L1014:
 	.align	2
-.L1011:
+.L1013:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR0+2996
-	.word	.LANCHOR0+2968
+	.word	.LANCHOR0+3000
+	.word	.LANCHOR0+2972
 	.word	.LANCHOR3
-	.word	.LC79
-.L913:
-	ldr	r2, [r3, #1828]
+	.word	.LC82
+.L915:
+	ldr	r2, [r3, #1832]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1844]
+	beq	.L917
+	ldr	r2, [r3, #1848]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1852]
+	beq	.L917
+	ldr	r2, [r3, #1856]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #932]
+	beq	.L917
+	ldr	r2, [r3, #980]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1856]
+	beq	.L917
+	ldr	r2, [r3, #1860]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #760]
+	beq	.L917
+	ldr	r2, [r3, #808]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r5, #2996]
+	beq	.L917
+	ldr	r2, [r5, #3000]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r3, [r3, #768]
+	beq	.L917
+	ldr	r3, [r3, #816]
 	cmp	r3, #0
-	beq	.L915
-	ldr	r2, [r4, #1680]
-	ldr	r3, .L1013
+	beq	.L917
+	ldr	r2, [r4, #1676]
+	ldr	r3, .L1015
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1688]
+	beq	.L917
+	ldr	r2, [r3, #1684]
 	cmp	r2, #0
-	beq	.L915
+	beq	.L917
 	ldr	r2, [r3, #1764]
 	cmp	r2, #0
-	beq	.L915
+	beq	.L917
 	ldr	r2, [r3, #1772]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #744]
+	beq	.L917
+	ldr	r2, [r3, #748]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1672]
+	beq	.L917
+	ldr	r2, [r3, #1668]
 	cmp	r2, #0
-	beq	.L915
+	beq	.L917
 	ldr	r2, [r3, #1768]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #756]
-	cmp	r2, #0
-	beq	.L915
+	beq	.L917
 	ldr	r2, [r3, #1776]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r3, [r3, #1780]
-	cmp	r3, #0
-	beq	.L915
-	ldr	r2, [r4, #1664]
-	ldr	r3, .L1013
+	beq	.L917
+	ldr	r2, [r3, #1780]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1788]
+	beq	.L917
+	ldr	r3, [r3, #1784]
+	cmp	r3, #0
+	beq	.L917
+	ldr	r2, [r4, #1660]
+	ldr	r3, .L1015
 	cmp	r2, #0
-	beq	.L915
+	beq	.L917
 	ldr	r2, [r3, #1792]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1660]
-	cmp	r2, #0
-	beq	.L915
+	beq	.L917
 	ldr	r2, [r3, #1796]
 	cmp	r2, #0
-	beq	.L915
+	beq	.L917
+	ldr	r2, [r3, #1656]
+	cmp	r2, #0
+	beq	.L917
 	ldr	r2, [r3, #1800]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #1668]
+	beq	.L917
+	ldr	r2, [r3, #1804]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r2, [r3, #748]
+	beq	.L917
+	ldr	r2, [r3, #1664]
+	cmp	r2, #0
+	beq	.L917
+	ldr	r2, [r3, #752]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r3, [r3, #1812]
+	beq	.L917
+	ldr	r3, [r3, #1816]
 	cmp	r3, #0
-	beq	.L915
-	ldr	r3, .L1013+4
-	ldr	r3, [r3, #2948]
+	beq	.L917
+	ldr	r3, .L1015+4
+	ldr	r3, [r3, #2956]
 	cmp	r3, #0
-	beq	.L915
-	ldr	r3, .L1013
-	ldr	r2, [r3, #1832]
-	cmp	r2, #0
-	beq	.L915
+	beq	.L917
+	ldr	r3, .L1015
 	ldr	r2, [r3, #1836]
 	cmp	r2, #0
-	beq	.L915
-	ldr	r3, [r3, #1840]
+	beq	.L917
+	ldr	r2, [r3, #1840]
+	cmp	r2, #0
+	beq	.L917
+	ldr	r3, [r3, #1844]
 	cmp	r3, #0
-	beq	.L915
+	beq	.L917
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1014:
+.L1016:
 	.align	2
-.L1013:
+.L1015:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -6753,21 +6750,21 @@ FtlBbt2Bitmap:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r4, r0
-	ldr	r3, .L1020
+	ldr	r3, .L1022
 	mov	r0, r1
 	mov	r5, r1
 	movs	r1, #0
 	movs	r6, #1
 	movw	r7, #65535
-	ldrh	r2, [r3, #1860]
+	ldrh	r2, [r3, #1864]
 	lsls	r2, r2, #2
 	bl	ftl_memset
 	subs	r2, r4, #2
 	addw	r4, r4, #1022
-.L1017:
+.L1019:
 	ldrh	r3, [r2, #2]!
 	cmp	r3, r7
-	beq	.L1015
+	beq	.L1017
 	lsrs	r1, r3, #5
 	cmp	r2, r4
 	and	r3, r3, #31
@@ -6775,12 +6772,12 @@ FtlBbt2Bitmap:
 	lsl	r3, r6, r3
 	orr	r3, r3, r0
 	str	r3, [r5, r1, lsl #2]
-	bne	.L1017
-.L1015:
+	bne	.L1019
+.L1017:
 	pop	{r3, r4, r5, r6, r7, pc}
-.L1021:
+.L1023:
 	.align	2
-.L1020:
+.L1022:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
@@ -6806,19 +6803,19 @@ ftl_free_no_use_map_blk:
 	mov	r0, r6
 	bl	ftl_memset
 	movs	r2, #0
-.L1023:
+.L1025:
 	ldrh	r1, [r4, #6]
 	uxth	r3, r2
 	cmp	r1, r3
-	bls	.L1036
+	bls	.L1038
 	ldr	r0, [r5, r3, lsl #2]
 	movs	r1, #0
 	ubfx	r0, r0, #10, #16
-.L1024:
+.L1026:
 	ldrh	r7, [r4, #10]
 	uxth	r3, r1
 	cmp	r7, r3
-	bls	.L1037
+	bls	.L1039
 	ldrh	r7, [r9, r3, lsl #1]
 	adds	r1, r1, #1
 	cmp	r7, r0
@@ -6826,57 +6823,57 @@ ftl_free_no_use_map_blk:
 	ldrheq	r7, [r6, r3, lsl #1]
 	addeq	r7, r7, #1
 	strheq	r7, [r6, r3, lsl #1]	@ movhi
-	b	.L1024
-.L1037:
+	b	.L1026
+.L1039:
 	adds	r2, r2, #1
-	b	.L1023
-.L1036:
+	b	.L1025
+.L1038:
 	movs	r7, #0
 	ldrh	fp, [r6]
-	ldr	r2, .L1039
+	ldr	r2, .L1041
 	mov	r10, r7
-.L1028:
+.L1030:
 	ldrh	r3, [r4, #10]
 	uxth	r5, r7
 	cmp	r3, r5
-	bls	.L1038
+	bls	.L1040
 	ldrh	r3, [r4]
 	cmp	r3, r5
-	bne	.L1029
-	ldrh	r3, [r2, #2900]
+	bne	.L1031
+	ldrh	r3, [r2, #2912]
 	ldrh	r1, [r4, #2]
 	cmp	r1, r3
 	it	cc
 	strhcc	r3, [r6, r5, lsl #1]	@ movhi
-.L1029:
+.L1031:
 	ldrh	r8, [r6, r5, lsl #1]
 	cmp	fp, r8
 	itt	hi
 	movhi	r10, r5
 	movhi	fp, r8
 	cmp	r8, #0
-	bne	.L1031
+	bne	.L1033
 	ldrh	r0, [r9, r5, lsl #1]
-	cbz	r0, .L1031
+	cbz	r0, .L1033
 	movs	r1, #1
 	str	r2, [sp, #4]
 	bl	FtlFreeSysBlkQueueIn
+	ldr	r2, [sp, #4]
 	strh	r8, [r9, r5, lsl #1]	@ movhi
 	ldrh	r3, [r4, #8]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	ldr	r2, [sp, #4]
-.L1031:
+.L1033:
 	adds	r7, r7, #1
-	b	.L1028
-.L1038:
+	b	.L1030
+.L1040:
 	mov	r0, r10
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1040:
+.L1042:
 	.align	2
-.L1039:
+.L1041:
 	.word	.LANCHOR0
 	.fnend
 	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
@@ -6892,72 +6889,72 @@ FtlL2PDataInit:
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	movs	r1, #0
-	ldr	r4, .L1045
+	ldr	r4, .L1047
 	movs	r7, #0
-	ldr	r5, .L1045+4
+	ldr	r5, .L1047+4
 	mov	r6, r7
-	ldr	r2, [r4, #2928]
+	ldr	r2, [r4, #2940]
 	mov	r9, r4
-	ldr	r0, [r5, #1828]
+	ldr	r0, [r5, #1832]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r3, [r4, #2908]
-	ldrh	r2, [r4, #2938]
+	ldrh	r3, [r4, #2920]
+	ldrh	r2, [r4, #2950]
 	movs	r1, #255
-	ldr	r0, [r5, #1856]
+	ldr	r0, [r5, #1860]
 	muls	r2, r3, r2
 	bl	ftl_memset
 	mov	r3, r5
 	movs	r5, #12
 	mov	r2, r4
 	movw	lr, #65535
-.L1042:
-	ldrh	ip, [r2, #2938]
+.L1044:
+	ldrh	ip, [r2, #2950]
 	adds	r0, r7, #1
 	uxth	r7, r7
-	ldr	r1, .L1045
+	ldr	r1, .L1047
 	cmp	ip, r7
-	bls	.L1044
+	bls	.L1046
 	mul	r1, r5, r7
-	ldr	ip, [r3, #932]
+	ldr	ip, [r3, #980]
 	add	r8, ip, r1
 	str	r6, [r8, #4]
 	strh	lr, [ip, r1]	@ movhi
-	ldr	r4, [r3, #932]
+	ldr	r4, [r3, #980]
 	add	ip, r4, r1
-	ldrh	r1, [r9, #2908]
+	ldrh	r1, [r9, #2920]
 	muls	r1, r7, r1
-	ldr	r7, [r3, #1856]
+	ldr	r7, [r3, #1860]
 	bic	r1, r1, #3
 	add	r1, r1, r7
 	mov	r7, r0
 	str	r1, [ip, #8]
-	b	.L1042
-.L1044:
-	ldr	r0, [r1, #2928]
+	b	.L1044
+.L1046:
+	ldr	r0, [r1, #2940]
 	movw	r2, #65535
-	ldrh	r1, [r1, #2936]
-	strh	r2, [r3, #1866]	@ movhi
-	strh	r0, [r3, #1874]	@ movhi
+	ldrh	r1, [r1, #2948]
+	strh	r2, [r3, #1870]	@ movhi
+	strh	r0, [r3, #1878]	@ movhi
 	movw	r0, #61634
-	strh	r1, [r3, #1870]	@ movhi
-	ldr	r1, [r3, #1824]
-	strh	r0, [r3, #1868]	@ movhi
-	ldrh	r0, [r3, #1908]
-	str	r1, [r3, #1876]
-	ldr	r1, [r3, #1852]
-	strh	r2, [r3, #1864]	@ movhi
+	strh	r1, [r3, #1874]	@ movhi
+	ldr	r1, [r3, #1828]
 	strh	r0, [r3, #1872]	@ movhi
+	ldrh	r0, [r3, #1912]
 	str	r1, [r3, #1880]
-	ldr	r1, [r3, #1828]
-	strh	r2, [r3, #1904]	@ movhi
+	ldr	r1, [r3, #1856]
+	strh	r2, [r3, #1868]	@ movhi
+	strh	r0, [r3, #1876]	@ movhi
 	str	r1, [r3, #1884]
-	ldr	r1, [r3, #1844]
+	ldr	r1, [r3, #1832]
+	strh	r2, [r3, #1908]	@ movhi
 	str	r1, [r3, #1888]
+	ldr	r1, [r3, #1848]
+	str	r1, [r3, #1892]
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L1046:
+.L1048:
 	.align	2
-.L1045:
+.L1047:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -6973,46 +6970,46 @@ FtlVariablesInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	movs	r5, #0
-	ldr	r6, .L1048
+	movs	r4, #0
+	ldr	r6, .L1050
 	movw	r3, #65535
-	ldr	r4, .L1048+4
-	mov	r1, r5
-	ldrh	r2, [r6, #2920]
-	ldr	r0, [r6, #2948]
-	strh	r3, [r4, #1916]	@ movhi
+	ldr	r5, .L1050+4
+	mov	r1, r4
+	ldrh	r2, [r6, #2932]
+	ldr	r0, [r6, #2956]
+	strh	r3, [r5, #1920]	@ movhi
 	mov	r3, #-1
 	lsls	r2, r2, #1
-	str	r3, [r4, #1928]
-	str	r5, [r4, #1912]
-	str	r5, [r4, #1920]
-	str	r5, [r4, #1924]
-	str	r5, [r4, #948]
-	strh	r5, [r6, #2946]	@ movhi
+	str	r3, [r5, #1932]
+	str	r4, [r5, #1916]
+	str	r4, [r5, #1924]
+	str	r4, [r5, #1928]
+	str	r4, [r6, #2832]
+	strh	r4, [r6, #2954]	@ movhi
 	bl	ftl_memset
-	ldrh	r2, [r6, #2838]
-	mov	r1, r5
-	ldr	r0, [r4, #748]
+	ldrh	r2, [r6, #2850]
+	mov	r1, r4
+	ldr	r0, [r5, #752]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r6, #2838]
-	mov	r1, r5
-	ldr	r0, [r4, #1812]
+	ldrh	r2, [r6, #2850]
+	mov	r1, r4
+	ldr	r0, [r5, #1816]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	add	r0, r4, #1012
+	add	r0, r5, #760
 	movs	r1, #48
 	bl	__memzero
-	add	r0, r4, #1128
+	addw	r0, r5, #1124
 	mov	r1, #512
 	bl	__memzero
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
-	mov	r0, r5
+	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L1049:
+.L1051:
 	.align	2
-.L1048:
+.L1050:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -7029,110 +7026,110 @@ SupperBlkListInit:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r2, #6
-	ldr	r6, .L1061
+	ldr	r6, .L1063
 	movs	r5, #0
-	ldr	r4, .L1061+4
+	ldr	r4, .L1063+4
 	.pad #20
 	sub	sp, sp, #20
 	movs	r1, #0
 	mov	r9, r5
-	ldrh	r3, [r6, #2838]
+	ldrh	r3, [r6, #2850]
 	mov	r10, r5
-	ldr	r0, [r4, #760]
+	ldr	r0, [r4, #808]
 	mov	r8, r6
 	muls	r2, r3, r2
 	bl	ftl_memset
-	str	r5, [r4, #780]
-	str	r5, [r4, #764]
-	str	r5, [r4, #772]
-	strh	r5, [r4, #776]	@ movhi
-	strh	r5, [r4, #784]	@ movhi
-	strh	r5, [r4, #1736]	@ movhi
-.L1051:
+	str	r5, [r4, #828]
+	str	r5, [r4, #812]
+	str	r5, [r4, #820]
+	strh	r5, [r4, #824]	@ movhi
+	strh	r5, [r4, #832]	@ movhi
+	strh	r5, [r4, #1732]	@ movhi
+.L1053:
 	uxth	fp, r5
-	ldrh	r2, [r8, #2836]
+	ldrh	r2, [r8, #2848]
 	sxth	r7, fp
 	cmp	r7, r2
-	bge	.L1058
-	ldr	r3, .L1061
+	bge	.L1060
+	ldr	r3, .L1063
 	movs	r2, #0
 	mov	r6, r2
-	ldrh	ip, [r3, #2828]
-	ldrh	r3, [r3, #2898]
+	ldrh	ip, [r3, #2840]
+	ldrh	r3, [r3, #2910]
 	str	r3, [sp, #4]
-.L1059:
+.L1061:
 	sxth	r1, r2
 	cmp	r1, ip
-	bge	.L1060
+	bge	.L1062
 	add	r1, r1, r8
 	str	r2, [sp, #12]
 	str	ip, [sp, #8]
-	ldrb	r0, [r1, #2856]	@ zero_extendqisi2
+	ldrb	r0, [r1, #2868]	@ zero_extendqisi2
 	mov	r1, fp
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
 	ldr	ip, [sp, #8]
 	ldr	r2, [sp, #12]
-	cbnz	r0, .L1052
+	cbnz	r0, .L1054
 	ldr	r3, [sp, #4]
 	add	r6, r6, r3
 	uxth	r6, r6
-.L1052:
+.L1054:
 	adds	r2, r2, #1
-	b	.L1059
-.L1060:
-	cbz	r6, .L1054
+	b	.L1061
+.L1062:
+	cbz	r6, .L1056
 	sxth	r1, r6
 	mov	r0, #32768
 	bl	__aeabi_idiv
 	uxth	r6, r0
-	b	.L1055
-.L1054:
-	ldr	r1, [r4, #768]
+	b	.L1057
+.L1056:
+	ldr	r1, [r4, #816]
 	sxth	r2, fp
 	movw	r0, #65535
 	strh	r0, [r1, r2, lsl #1]	@ movhi
-.L1055:
+.L1057:
 	add	r0, r7, r7, lsl #1
-	ldr	r1, [r4, #760]
-	ldr	r2, .L1061+4
+	ldr	r1, [r4, #808]
+	ldr	r2, .L1063+4
 	add	r1, r1, r0, lsl #1
 	strh	r6, [r1, #4]	@ movhi
-	ldrh	r1, [r4, #788]
+	ldrh	r1, [r4, #836]
 	cmp	r7, r1
-	beq	.L1056
-	ldrh	r1, [r2, #836]
-	cmp	r7, r1
-	beq	.L1056
+	beq	.L1058
 	ldrh	r1, [r2, #884]
 	cmp	r7, r1
-	beq	.L1056
-	ldr	r2, [r2, #768]
+	beq	.L1058
+	ldrh	r1, [r2, #932]
+	cmp	r7, r1
+	beq	.L1058
+	ldr	r2, [r2, #816]
 	ldrh	r2, [r2, r7, lsl #1]
-	cbnz	r2, .L1057
+	cbnz	r2, .L1059
 	add	r9, r9, #1
 	mov	r0, fp
 	uxth	r9, r9
 	bl	INSERT_FREE_LIST
-	b	.L1056
-.L1057:
+	b	.L1058
+.L1059:
 	add	r10, r10, #1
 	mov	r0, fp
 	uxth	r10, r10
 	bl	INSERT_DATA_LIST
-.L1056:
-	adds	r5, r5, #1
-	b	.L1051
 .L1058:
+	adds	r5, r5, #1
+	b	.L1053
+.L1060:
 	movs	r0, #0
-	strh	r10, [r4, #776]	@ movhi
-	strh	r9, [r4, #784]	@ movhi
+	strh	r10, [r4, #824]	@ movhi
+	strh	r9, [r4, #832]	@ movhi
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1062:
+.L1064:
 	.align	2
-.L1061:
+.L1063:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -7149,26 +7146,26 @@ FtlGcPageVarInit:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r1, #255
-	ldr	r5, .L1064
+	ldr	r5, .L1066
 	movs	r3, #0
-	ldr	r4, .L1064+4
-	ldrh	r2, [r5, #2902]
-	ldr	r0, [r4, #1680]
-	strh	r3, [r4, #1684]	@ movhi
+	ldr	r4, .L1066+4
+	ldrh	r2, [r5, #2914]
+	ldr	r0, [r4, #1676]
+	strh	r3, [r4, #1680]	@ movhi
 	lsls	r2, r2, #1
-	strh	r3, [r4, #1692]	@ movhi
+	strh	r3, [r4, #1688]	@ movhi
 	bl	ftl_memset
-	ldrh	r3, [r5, #2902]
+	ldrh	r3, [r5, #2914]
 	movs	r2, #12
-	ldr	r0, [r4, #1688]
+	ldr	r0, [r4, #1684]
 	movs	r1, #255
 	muls	r2, r3, r2
 	bl	ftl_memset
 	pop	{r3, r4, r5, lr}
 	b	FtlGcBufInit
-.L1065:
+.L1067:
 	.align	2
-.L1064:
+.L1066:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -7198,14 +7195,14 @@ FlashReadIdbData:
 	push	{r3, lr}
 	.save {r3, lr}
 	mov	r2, #2048
-	ldr	r1, .L1068
+	ldr	r1, .L1070
 	bl	ftl_memcpy
 	movs	r0, #0
 	pop	{r3, pc}
-.L1069:
+.L1071:
 	.align	2
-.L1068:
-	.word	.LANCHOR2+1932
+.L1070:
+	.word	.LANCHOR2+1936
 	.fnend
 	.size	FlashReadIdbData, .-FlashReadIdbData
 	.align	1
@@ -7220,62 +7217,62 @@ FlashLoadPhyInfoInRam:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r4, #0
-	ldr	r6, .L1082
-.L1074:
+	ldr	r6, .L1084
+.L1076:
 	mov	r0, r6
-	ldr	r1, .L1082+4
+	ldr	r1, .L1084+4
 	ldrb	r2, [r6, #-1]	@ zero_extendqisi2
 	bl	FlashMemCmp8
 	mov	r5, r0
-	cbnz	r0, .L1071
-	ldr	r3, .L1082+8
+	cbnz	r0, .L1073
+	ldr	r3, .L1084+8
 	lsls	r4, r4, #5
 	add	r2, r3, #508
 	adds	r6, r2, r4
-	beq	.L1077
+	beq	.L1079
 	add	r4, r4, r3
-	addw	r3, r3, #2812
+	addw	r3, r3, #2876
 	ldrb	r2, [r4, #530]	@ zero_extendqisi2
 	mov	r4, r0
-	b	.L1076
-.L1071:
+	b	.L1078
+.L1073:
 	adds	r4, r4, #1
 	adds	r6, r6, #32
-	cmp	r4, #72
-	bne	.L1074
-	b	.L1077
-.L1081:
+	cmp	r4, #74
+	bne	.L1076
+	b	.L1079
+.L1083:
 	adds	r4, r4, #1
 	cmp	r4, #4
-	beq	.L1075
-.L1076:
+	beq	.L1077
+.L1078:
 	lsls	r1, r4, #5
 	ldrb	r1, [r1, r3]	@ zero_extendqisi2
 	cmp	r1, r2
-	bne	.L1081
-.L1075:
-	ldr	r1, .L1082+12
+	bne	.L1083
+.L1077:
+	ldr	r1, .L1084+12
 	movs	r2, #32
-	ldr	r0, .L1082+16
+	ldr	r0, .L1084+16
 	add	r1, r1, r4, lsl #5
 	bl	ftl_memcpy
 	mov	r1, r6
 	movs	r2, #32
-	ldr	r0, .L1082+20
+	ldr	r0, .L1084+20
 	bl	ftl_memcpy
-	b	.L1072
-.L1077:
+	b	.L1074
+.L1079:
 	mov	r5, #-1
-.L1072:
+.L1074:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L1083:
+.L1085:
 	.align	2
-.L1082:
+.L1084:
 	.word	.LANCHOR1+509
 	.word	.LANCHOR0+1792
 	.word	.LANCHOR1
-	.word	.LANCHOR1+2812
+	.word	.LANCHOR1+2876
 	.word	.LANCHOR0+44
 	.word	.LANCHOR1+256
 	.fnend
@@ -7297,14 +7294,14 @@ NandcCopy1KB:
 	ldr	r6, [sp, #16]
 	add	r5, r0, #512
 	add	r2, r2, r4, lsl #9
-	bne	.L1085
-	cbz	r3, .L1086
+	bne	.L1087
+	cbz	r3, .L1088
 	mov	r0, r2
 	mov	r1, r3
 	mov	r2, #1024
 	bl	ftl_memcpy
-.L1086:
-	cbz	r6, .L1084
+.L1088:
+	cbz	r6, .L1086
 	ldrb	r3, [r6, #2]	@ zero_extendqisi2
 	lsrs	r4, r4, #1
 	ldrb	r2, [r6, #1]	@ zero_extendqisi2
@@ -7318,14 +7315,14 @@ NandcCopy1KB:
 	orr	r3, r3, r2, lsl #24
 	str	r3, [r5, r4, lsl #2]
 	pop	{r4, r5, r6, pc}
-.L1085:
-	cbz	r3, .L1089
+.L1087:
+	cbz	r3, .L1091
 	mov	r1, r2
 	mov	r0, r3
 	mov	r2, #1024
 	bl	ftl_memcpy
-.L1089:
-	cbz	r6, .L1084
+.L1091:
+	cbz	r6, .L1086
 	lsrs	r4, r4, #1
 	add	r4, r4, r4, lsl #1
 	lsls	r4, r4, #2
@@ -7337,15 +7334,38 @@ NandcCopy1KB:
 	lsrs	r3, r3, #24
 	strb	r2, [r6, #2]
 	strb	r3, [r6, #3]
-.L1084:
+.L1086:
 	pop	{r4, r5, r6, pc}
 	.fnend
 	.size	NandcCopy1KB, .-NandcCopy1KB
 	.align	1
-	.global	ftl_memcmp
+	.global	ftl_memcpy32
 	.thumb
 	.thumb_func
-	.type	ftl_memcmp, %function
+	.type	ftl_memcpy32, %function
+ftl_memcpy32:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movs	r3, #0
+	push	{r4, lr}
+	.save {r4, lr}
+.L1103:
+	cmp	r3, r2
+	beq	.L1105
+	ldr	r4, [r1, r3, lsl #2]
+	str	r4, [r0, r3, lsl #2]
+	adds	r3, r3, #1
+	b	.L1103
+.L1105:
+	pop	{r4, pc}
+	.fnend
+	.size	ftl_memcpy32, .-ftl_memcpy32
+	.align	1
+	.global	ftl_memcmp
+	.thumb
+	.thumb_func
+	.type	ftl_memcmp, %function
 ftl_memcmp:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
@@ -7355,6 +7375,56 @@ ftl_memcmp:
 	.fnend
 	.size	ftl_memcmp, .-ftl_memcmp
 	.align	1
+	.global	js_hash
+	.thumb
+	.thumb_func
+	.type	js_hash, %function
+js_hash:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1111
+	add	r1, r1, r0
+	push	{r4, lr}
+	.save {r4, lr}
+.L1108:
+	cmp	r0, r1
+	beq	.L1110
+	lsls	r2, r3, #5
+	ldrb	r4, [r0], #1	@ zero_extendqisi2
+	add	r2, r2, r3, lsr #2
+	add	r2, r2, r4
+	eors	r3, r3, r2
+	b	.L1108
+.L1110:
+	mov	r0, r3
+	pop	{r4, pc}
+.L1112:
+	.align	2
+.L1111:
+	.word	1204201446
+	.fnend
+	.size	js_hash, .-js_hash
+	.align	1
+	.global	timer_get_time
+	.thumb
+	.thumb_func
+	.type	timer_get_time, %function
+timer_get_time:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1114
+	ldr	r0, [r3]
+	b	jiffies_to_msecs
+.L1115:
+	.align	2
+.L1114:
+	.word	jiffies
+	.fnend
+	.size	timer_get_time, .-timer_get_time
+	.align	1
 	.global	FlashSramLoadStore
 	.thumb
 	.thumb_func
@@ -7366,20 +7436,20 @@ FlashSramLoadStore:
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r5, r0
-	ldr	r4, .L1104
-	ldr	r4, [r4, #3980]
+	ldr	r4, .L1119
+	ldr	r4, [r4, #3984]
 	add	r4, r4, #4096
 	add	r1, r1, r4
-	cbz	r2, .L1103
+	cbz	r2, .L1118
 	mov	r0, r1
 	mov	r1, r5
-.L1103:
+.L1118:
 	mov	r2, r3
 	pop	{r4, r5, lr}
 	b	ftl_memcpy
-.L1105:
+.L1120:
 	.align	2
-.L1104:
+.L1119:
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashSramLoadStore, .-FlashSramLoadStore
@@ -7397,19 +7467,6 @@ FlashCs123Init:
 	.fnend
 	.size	FlashCs123Init, .-FlashCs123Init
 	.align	1
-	.global	rk_nand_de_init
-	.thumb
-	.thumb_func
-	.type	rk_nand_de_init, %function
-rk_nand_de_init:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	FlashDeInit
-	.fnend
-	.size	rk_nand_de_init, .-rk_nand_de_init
-	.align	1
 	.global	rk_nand_suspend
 	.thumb
 	.thumb_func
@@ -7419,7 +7476,7 @@ rk_nand_suspend:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	b	FlashSuspend
+	b	ftl_flash_suspend
 	.fnend
 	.size	rk_nand_suspend, .-rk_nand_suspend
 	.align	1
@@ -7432,7 +7489,7 @@ rk_nand_resume:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	b	FlashResume
+	b	ftl_flash_resume
 	.fnend
 	.size	rk_nand_resume, .-rk_nand_resume
 	.align	1
@@ -7445,16 +7502,56 @@ rk_ftl_get_capacity:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L1111
-	ldr	r0, [r3, #2940]
+	ldr	r3, .L1125
+	ldr	r0, [r3, #1896]
 	bx	lr
-.L1112:
+.L1126:
 	.align	2
-.L1111:
+.L1125:
 	.word	.LANCHOR0
 	.fnend
 	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
 	.align	1
+	.global	rk_nandc_get_irq_status
+	.thumb
+	.thumb_func
+	.type	rk_nandc_get_irq_status, %function
+rk_nandc_get_irq_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, [r0, #372]
+	bx	lr
+	.fnend
+	.size	rk_nandc_get_irq_status, .-rk_nandc_get_irq_status
+	.align	1
+	.global	rknand_proc_ftlread
+	.thumb
+	.thumb_func
+	.type	rknand_proc_ftlread, %function
+rknand_proc_ftlread:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_proc_ftl_read
+	.fnend
+	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
+	.align	1
+	.global	ReadFlashInfo
+	.thumb
+	.thumb_func
+	.type	ReadFlashInfo, %function
+ReadFlashInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_read_flash_info
+	.fnend
+	.size	ReadFlashInfo, .-ReadFlashInfo
+	.align	1
 	.global	rknand_print_hex
 	.thumb
 	.thumb_func
@@ -7471,49 +7568,50 @@ rknand_print_hex:
 	mov	r7, r2
 	mov	r8, r3
 	mov	r4, r5
-.L1114:
+.L1131:
 	cmp	r4, r8
-	beq	.L1122
-	cbnz	r5, .L1115
-	ldr	r0, .L1123
+	beq	.L1139
+	cbnz	r5, .L1132
+	ldr	r0, .L1140
 	mov	r1, r9
-	mov	r2, r4
+	mov	r2, r6
+	mov	r3, r4
 	bl	printk
-.L1115:
+.L1132:
 	cmp	r7, #4
-	ldr	r0, .L1123+4
-	bne	.L1116
+	ldr	r0, .L1140+4
+	bne	.L1133
 	ldr	r1, [r6, r4, lsl #2]
-	b	.L1121
-.L1116:
+	b	.L1138
+.L1133:
 	cmp	r7, #2
 	ite	eq
 	ldrsheq	r1, [r6, r4, lsl #1]
 	ldrbne	r1, [r6, r4]	@ zero_extendqisi2
-.L1121:
+.L1138:
 	adds	r5, r5, #1
 	bl	printk
 	cmp	r5, #15
-	bls	.L1119
-	ldr	r0, .L1123+8
+	bls	.L1136
+	ldr	r0, .L1140+8
 	movs	r5, #0
-	ldr	r1, .L1123+12
+	ldr	r1, .L1140+12
 	bl	printk
-.L1119:
+.L1136:
 	adds	r4, r4, #1
-	b	.L1114
-.L1122:
-	ldr	r0, .L1123+8
-	ldr	r1, .L1123+12
+	b	.L1131
+.L1139:
+	ldr	r0, .L1140+8
+	ldr	r1, .L1140+12
 	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
 	b	printk
-.L1124:
+.L1141:
 	.align	2
-.L1123:
-	.word	.LC80
-	.word	.LC81
-	.word	.LC74
-	.word	.LC82
+.L1140:
+	.word	.LC83
+	.word	.LC84
+	.word	.LC77
+	.word	.LC85
 	.fnend
 	.size	rknand_print_hex, .-rknand_print_hex
 	.align	1
@@ -7528,146 +7626,146 @@ HynixGetReadRetryDefault:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	cmp	r0, #2
-	ldr	r5, .L1217
+	ldr	r5, .L1234
 	mov	r3, #172
 	mov	r1, #173
 	mov	r2, #174
 	.pad #44
 	sub	sp, sp, #44
 	mov	r4, r0
-	strb	r3, [r5, #1906]
+	strb	r3, [r5, #1910]
 	mov	r3, #175
-	strb	r0, [r5, #1902]
-	strb	r1, [r5, #1907]
-	strb	r2, [r5, #1908]
-	strb	r3, [r5, #1909]
-	bne	.L1126
+	strb	r0, [r5, #1906]
+	strb	r1, [r5, #1911]
+	strb	r2, [r5, #1912]
+	strb	r3, [r5, #1913]
+	bne	.L1143
 	movs	r3, #167
-	strb	r3, [r5, #1906]
-	ldr	r3, .L1217+4
+	strb	r3, [r5, #1910]
+	ldr	r3, .L1234+4
 	movs	r2, #247
-	strb	r2, [r3, #2957]
-	b	.L1179
-.L1126:
+	strb	r2, [r3, #3021]
+	b	.L1196
+.L1143:
 	cmp	r0, #3
-	bne	.L1128
+	bne	.L1145
 	movs	r3, #176
-	strb	r3, [r5, #1906]
+	strb	r3, [r5, #1910]
 	movs	r3, #177
-	strb	r3, [r5, #1907]
+	strb	r3, [r5, #1911]
 	movs	r3, #178
-	strb	r3, [r5, #1908]
+	strb	r3, [r5, #1912]
 	movs	r3, #179
-	strb	r3, [r5, #1909]
+	strb	r3, [r5, #1913]
 	movs	r3, #180
-	strb	r3, [r5, #1910]
+	strb	r3, [r5, #1914]
 	movs	r3, #181
-	strb	r3, [r5, #1911]
+	strb	r3, [r5, #1915]
 	movs	r3, #182
-	strb	r3, [r5, #1912]
+	strb	r3, [r5, #1916]
 	movs	r3, #183
-	b	.L1212
-.L1128:
+	b	.L1229
+.L1145:
 	cmp	r0, #4
-	bne	.L1129
+	bne	.L1146
 	movs	r0, #204
-	strb	r1, [r5, #1911]
-	strb	r0, [r5, #1906]
+	strb	r1, [r5, #1915]
+	strb	r0, [r5, #1910]
 	movs	r0, #191
-	strb	r2, [r5, #1912]
-	strb	r0, [r5, #1907]
+	strb	r2, [r5, #1916]
+	strb	r0, [r5, #1911]
 	movs	r0, #170
-	strb	r0, [r5, #1908]
+	strb	r0, [r5, #1912]
 	movs	r0, #171
-	strb	r0, [r5, #1909]
+	strb	r0, [r5, #1913]
 	movs	r0, #205
-	strb	r0, [r5, #1910]
-.L1212:
+	strb	r0, [r5, #1914]
+.L1229:
 	mov	fp, #8
-	strb	r3, [r5, #1913]
+	strb	r3, [r5, #1917]
 	mov	r9, fp
-	b	.L1127
-.L1129:
+	b	.L1144
+.L1146:
 	cmp	r0, #5
-	bne	.L1130
+	bne	.L1147
 	movs	r3, #56
 	mov	fp, #8
-	strb	r3, [r5, #1906]
+	strb	r3, [r5, #1910]
 	movs	r3, #57
-	strb	r3, [r5, #1907]
+	strb	r3, [r5, #1911]
 	movs	r3, #58
-	strb	r3, [r5, #1908]
+	strb	r3, [r5, #1912]
 	movs	r3, #59
-	strb	r3, [r5, #1909]
-	b	.L1211
-.L1130:
+	strb	r3, [r5, #1913]
+	b	.L1228
+.L1147:
 	cmp	r0, #6
-	bne	.L1131
+	bne	.L1148
 	movs	r3, #14
 	mov	fp, #12
-	strb	r3, [r5, #1906]
+	strb	r3, [r5, #1910]
 	movs	r3, #15
-	strb	r3, [r5, #1907]
+	strb	r3, [r5, #1911]
 	movs	r3, #16
-	strb	r3, [r5, #1908]
+	strb	r3, [r5, #1912]
 	movs	r3, #17
-	strb	r3, [r5, #1909]
-	b	.L1211
-.L1131:
+	strb	r3, [r5, #1913]
+	b	.L1228
+.L1148:
 	cmp	r0, #7
-	bne	.L1179
+	bne	.L1196
 	movs	r3, #176
 	mov	fp, #12
-	strb	r3, [r5, #1906]
+	strb	r3, [r5, #1910]
 	mov	r9, #10
 	movs	r3, #177
-	strb	r3, [r5, #1907]
+	strb	r3, [r5, #1911]
 	movs	r3, #178
-	strb	r3, [r5, #1908]
+	strb	r3, [r5, #1912]
 	movs	r3, #179
-	strb	r3, [r5, #1909]
+	strb	r3, [r5, #1913]
 	movs	r3, #180
-	strb	r3, [r5, #1910]
+	strb	r3, [r5, #1914]
 	movs	r3, #181
-	strb	r3, [r5, #1911]
+	strb	r3, [r5, #1915]
 	movs	r3, #182
-	strb	r3, [r5, #1912]
+	strb	r3, [r5, #1916]
 	movs	r3, #183
-	strb	r3, [r5, #1913]
+	strb	r3, [r5, #1917]
 	movs	r3, #212
-	strb	r3, [r5, #1914]
+	strb	r3, [r5, #1918]
 	movs	r3, #213
-	strb	r3, [r5, #1915]
-	b	.L1127
-.L1179:
+	strb	r3, [r5, #1919]
+	b	.L1144
+.L1196:
 	mov	fp, #7
-.L1211:
+.L1228:
 	mov	r9, #4
-.L1127:
+.L1144:
 	subs	r3, r4, #1
 	cmp	r3, #1
-	bhi	.L1208
-	ldr	r7, .L1217+8
+	bhi	.L1225
+	ldr	r7, .L1234+8
 	mov	r8, #0
-.L1132:
+.L1149:
 	ldrb	r3, [r5, #1616]	@ zero_extendqisi2
 	uxtb	r6, r8
-	ldr	r2, .L1217
+	ldr	r2, .L1234
 	cmp	r3, r6
-	bls	.L1139
+	bls	.L1156
 	add	r6, r6, r2
 	ldrb	r3, [r6, #1620]	@ zero_extendqisi2
 	add	r4, r2, r3, lsl #6
 	add	r3, r2, r3, lsl #3
-	addw	r4, r4, #1922
-	addw	r2, r2, #1905
+	addw	r4, r4, #1926
+	addw	r2, r2, #1909
 	ldrb	r6, [r3, #16]	@ zero_extendqisi2
 	ldr	r1, [r3, #12]
 	mov	r10, r4
 	mov	r3, r4
 	add	r6, r1, r6, lsl #8
 	addw	ip, r6, #2056
-.L1134:
+.L1151:
 	str	r3, [sp, #8]
 	movs	r3, #55
 	str	r3, [ip]
@@ -7685,23 +7783,23 @@ HynixGetReadRetryDefault:
 	subs	r1, r3, r4
 	uxtb	r1, r1
 	cmp	r1, r9
-	bcc	.L1134
+	bcc	.L1151
 	movs	r2, #0
-.L1135:
+.L1152:
 	movs	r3, #1
 	adds	r0, r7, r2
-.L1136:
+.L1153:
 	ldrb	r6, [r0, r3, lsl #2]	@ zero_extendqisi2
 	ldrb	r1, [r10]	@ zero_extendqisi2
 	add	r1, r1, r6
 	strb	r1, [r10, r3, lsl #3]
 	adds	r3, r3, #1
 	cmp	r3, #7
-	bne	.L1136
+	bne	.L1153
 	adds	r2, r2, #1
 	add	r10, r10, #1
 	cmp	r2, #4
-	bne	.L1135
+	bne	.L1152
 	movs	r3, #0
 	add	r8, r8, #1
 	strb	r3, [r4, #16]
@@ -7711,40 +7809,40 @@ HynixGetReadRetryDefault:
 	strb	r3, [r4, #48]
 	strb	r3, [r4, #41]
 	strb	r3, [r4, #49]
-	b	.L1132
-.L1208:
+	b	.L1149
+.L1225:
 	subs	r3, r4, #3
 	cmp	r3, #4
-	bhi	.L1139
+	bhi	.L1156
 	smulbb	r2, r9, fp
 	lsls	r3, r2, #4
 	str	r3, [sp, #32]
 	and	r3, r2, #252
 	str	r3, [sp]
 	movs	r3, #0
-.L1215:
+.L1232:
 	str	r3, [sp, #12]
 	ldrb	r3, [sp, #12]	@ zero_extendqisi2
 	str	r3, [sp, #8]
-	ldr	r3, .L1217
+	ldr	r3, .L1234
 	ldr	r2, [sp, #8]
 	ldrb	r3, [r3, #1616]	@ zero_extendqisi2
 	cmp	r3, r2
-	bhi	.L1178
-.L1139:
-	ldr	r3, .L1217
-	strb	r9, [r3, #1903]
-	strb	fp, [r3, #1904]
+	bhi	.L1195
+.L1156:
+	ldr	r3, .L1234
+	strb	r9, [r3, #1907]
+	strb	fp, [r3, #1908]
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1178:
+.L1195:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L1217
+	ldr	r3, .L1234
 	add	r3, r3, r2
 	movs	r2, #255
 	ldrb	r8, [r3, #1620]	@ zero_extendqisi2
-	ldr	r3, .L1217
+	ldr	r3, .L1234
 	add	r3, r3, r8, lsl #3
 	mov	r0, r8
 	ldr	r10, [r3, #12]
@@ -7759,8 +7857,8 @@ HynixGetReadRetryDefault:
 	moveq	lr, #160
 	mov	r2, #54
 	itete	eq
-	ldreq	r3, .L1217+12
-	ldrne	r3, .L1217+12
+	ldreq	r3, .L1234+12
+	ldrne	r3, .L1234+12
 	mlaeq	lr, lr, r8, r3
 	addne	lr, r3, r8, lsl #6
 	ite	ne
@@ -7771,36 +7869,36 @@ HynixGetReadRetryDefault:
 	cmp	r4, #4
 	add	r3, r10, r3, lsl #8
 	str	r2, [r3, #2056]
-	bne	.L1143
+	bne	.L1160
 	add	r6, r6, r10
 	movs	r3, #255
 	str	r3, [r6, #2052]
 	movs	r3, #64
 	str	r3, [r6, #2048]
 	movs	r3, #204
-	b	.L1214
-.L1143:
+	b	.L1231
+.L1160:
 	subs	r2, r4, #5
 	cmp	r2, #1
-	bhi	.L1145
-	ldr	r2, .L1217
-	ldrb	r2, [r2, #1906]	@ zero_extendqisi2
+	bhi	.L1162
+	ldr	r2, .L1234
+	ldrb	r2, [r2, #1910]	@ zero_extendqisi2
 	str	r2, [r3, #2052]
 	movs	r2, #82
 	str	r2, [r3, #2048]
-	b	.L1144
-.L1145:
+	b	.L1161
+.L1162:
 	add	r6, r6, r10
 	movs	r3, #174
 	str	r3, [r6, #2052]
 	movs	r3, #0
 	str	r3, [r6, #2048]
 	movs	r3, #176
-.L1214:
+.L1231:
 	str	r3, [r6, #2052]
 	movs	r3, #77
 	str	r3, [r6, #2048]
-.L1144:
+.L1161:
 	ldr	r3, [sp, #4]
 	cmp	r4, #6
 	mov	r2, #48
@@ -7832,123 +7930,123 @@ HynixGetReadRetryDefault:
 	subs	r3, r4, #5
 	cmp	r3, #1
 	str	r3, [sp, #20]
-	bls	.L1181
+	bls	.L1198
 	cmp	r4, #7
 	ite	eq
 	moveq	r0, #32
 	movne	r0, #2
-	b	.L1149
-.L1218:
+	b	.L1166
+.L1235:
 	.align	2
-.L1217:
+.L1234:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
-	.word	.LANCHOR1+2940
-	.word	.LANCHOR0+1902
-.L1181:
+	.word	.LANCHOR1+3004
+	.word	.LANCHOR0+1906
+.L1198:
 	movs	r0, #16
-.L1149:
-	ldr	r3, .L1219
-	ldr	r3, [r3, #3984]
+.L1166:
+	ldr	r3, .L1236
+	ldr	r3, [r3, #3988]
 	mov	r1, r3
-.L1150:
+.L1167:
 	ldr	r2, [r5, #2048]
 	strb	r2, [r1], #1
 	subs	r2, r1, r3
 	uxtb	r2, r2
 	cmp	r2, r0
-	bcc	.L1150
+	bcc	.L1167
 	cmp	r4, #7
-	bne	.L1151
+	bne	.L1168
 	movs	r2, #0
-.L1153:
+.L1170:
 	ldrb	r0, [r3, r2, lsl #2]	@ zero_extendqisi2
 	uxtb	r1, r2
 	cmp	r0, #12
-	beq	.L1152
+	beq	.L1169
 	add	r0, r3, r2, lsl #2
 	ldrb	r0, [r0, #1]	@ zero_extendqisi2
 	cmp	r0, #10
-	beq	.L1152
+	beq	.L1169
 	adds	r2, r2, #1
 	cmp	r2, #8
-	bne	.L1153
-	b	.L1154
-.L1152:
+	bne	.L1170
+	b	.L1171
+.L1169:
 	cmp	r1, #7
-	bne	.L1155
-.L1154:
-	ldr	r0, .L1219+4
+	bne	.L1172
+.L1171:
+	ldr	r0, .L1236+4
 	movs	r1, #0
 	bl	printk
-.L1156:
-	b	.L1156
-.L1151:
+.L1173:
+	b	.L1173
+.L1168:
 	cmp	r4, #6
-	bne	.L1155
+	bne	.L1172
 	subs	r2, r3, #1
 	adds	r3, r3, #7
-.L1157:
+.L1174:
 	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
 	cmp	r1, #12
-	beq	.L1155
+	beq	.L1172
 	ldrb	r1, [r2, #8]	@ zero_extendqisi2
 	cmp	r1, #4
-	beq	.L1155
+	beq	.L1172
 	cmp	r2, r3
-	bne	.L1157
-	ldr	r0, .L1219+4
+	bne	.L1174
+	ldr	r0, .L1236+4
 	movs	r1, #0
 	bl	printk
-.L1159:
-	b	.L1159
-.L1155:
-	ldr	r1, .L1219
+.L1176:
+	b	.L1176
+.L1172:
+	ldr	r1, .L1236
 	ldr	r0, [sp, #32]
-	ldr	r2, [r1, #3984]
+	ldr	r2, [r1, #3988]
 	adds	r0, r2, r0
 	mov	r3, r2
-.L1160:
+.L1177:
 	cmp	r3, r0
-	beq	.L1216
+	beq	.L1233
 	ldr	r6, [r5, #2048]
 	strb	r6, [r3], #1
-	b	.L1160
-.L1216:
+	b	.L1177
+.L1233:
 	ldr	r3, [sp]
-	ldr	r0, [r1, #3984]
+	ldr	r0, [r1, #3988]
 	add	r0, r0, r3
 	movs	r3, #8
-.L1163:
+.L1180:
 	ldr	r1, [sp]
 	adds	r6, r0, r1
-.L1162:
+.L1179:
 	ldr	r1, [r0]
 	mvns	r1, r1
 	str	r1, [r0], #4
 	cmp	r0, r6
-	bne	.L1162
+	bne	.L1179
 	ldr	r1, [sp]
 	subs	r3, r3, #1
 	add	r0, r0, r1
-	bne	.L1163
-.L1164:
-	ldr	r1, .L1219
+	bne	.L1180
+.L1181:
+	ldr	r1, .L1236
 	movs	r0, #0
-	ldr	r1, [r1, #3984]
+	ldr	r1, [r1, #3988]
 	str	r1, [sp, #24]
 	mov	r1, r0
 	ldr	r6, [sp, #24]
 	add	r6, r6, r3
 	str	r6, [sp, #36]
-.L1167:
+.L1184:
 	movs	r6, #1
 	movs	r7, #16
 	str	r7, [sp, #28]
 	lsl	lr, r6, r1
 	movs	r6, #0
 	mov	ip, r6
-.L1165:
+.L1182:
 	ldr	r7, [sp, #36]
 	ldr	r7, [r7, r6]
 	and	r7, lr, r7
@@ -7960,73 +8058,73 @@ HynixGetReadRetryDefault:
 	ldr	r7, [sp, #28]
 	subs	r7, r7, #1
 	str	r7, [sp, #28]
-	bne	.L1165
+	bne	.L1182
 	cmp	ip, #8
 	add	r1, r1, #1
 	it	hi
 	orrhi	r0, r0, lr
 	cmp	r1, #32
-	bne	.L1167
+	bne	.L1184
 	ldr	r1, [sp, #24]
 	str	r0, [r1, r3]
 	adds	r3, r3, #4
 	ldr	r1, [sp]
 	cmp	r3, r1
-	bne	.L1164
-	ldr	r3, .L1219
-	ldr	r1, [r3, #3984]
+	bne	.L1181
+	ldr	r3, .L1236
+	ldr	r1, [r3, #3988]
 	movs	r3, #0
 	subs	r0, r1, #4
 	add	r6, r1, #28
-.L1169:
+.L1186:
 	ldr	r7, [r0, #4]!
 	cmp	r7, #0
 	it	eq
 	addeq	r3, r3, #1
 	cmp	r0, r6
-	bne	.L1169
+	bne	.L1186
 	cmp	r3, #7
-	ble	.L1170
-	ldr	r0, .L1219+8
+	ble	.L1187
+	ldr	r0, .L1236+8
 	movs	r2, #1
 	mov	r3, #1024
 	bl	rknand_print_hex
-	ldr	r0, .L1219+4
+	ldr	r0, .L1236+4
 	movs	r1, #0
 	bl	printk
-.L1171:
-	b	.L1171
-.L1170:
+.L1188:
+	b	.L1188
+.L1187:
 	cmp	r4, #6
-	beq	.L1183
+	beq	.L1200
 	cmp	r4, #7
 	ite	ne
 	movne	ip, #8
 	moveq	ip, #10
-	b	.L1172
-.L1183:
+	b	.L1189
+.L1200:
 	mov	ip, #4
-.L1172:
+.L1189:
 	add	r7, r9, #-1
 	ldr	r1, [sp, #16]
 	movs	r0, #0
 	uxtb	r7, r7
 	adds	r7, r7, #1
-.L1173:
+.L1190:
 	mov	lr, r1
 	mov	r3, r2
-.L1174:
+.L1191:
 	ldrb	r6, [r3], #1	@ zero_extendqisi2
 	strb	r6, [lr], #1
 	subs	r6, r3, r2
 	uxtb	r6, r6
 	cmp	r6, r9
-	bcc	.L1174
+	bcc	.L1191
 	adds	r0, r0, #1
 	add	r2, r2, r7
 	cmp	r0, fp
 	add	r1, r1, ip
-	blt	.L1173
+	blt	.L1190
 	ldr	r3, [sp, #4]
 	mov	r0, r8
 	add	r6, r10, r3, lsl #8
@@ -8035,35 +8133,35 @@ HynixGetReadRetryDefault:
 	bl	NandcWaitFlashReady
 	ldr	r3, [sp, #20]
 	cmp	r3, #1
-	bhi	.L1176
+	bhi	.L1193
 	movs	r3, #54
 	str	r3, [r6, #2056]
-	ldr	r3, .L1219+12
+	ldr	r3, .L1236+12
 	mov	r1, #-1
 	ldr	r0, [sp, #8]
-	ldrb	r3, [r3, #1906]	@ zero_extendqisi2
+	ldrb	r3, [r3, #1910]	@ zero_extendqisi2
 	str	r3, [r5, #2052]
 	movs	r3, #0
 	str	r3, [r5, #2048]
 	movs	r3, #22
 	str	r3, [r6, #2056]
 	bl	FlashReadCmd
-	b	.L1177
-.L1176:
+	b	.L1194
+.L1193:
 	movs	r3, #56
 	str	r3, [r6, #2056]
-.L1177:
+.L1194:
 	mov	r0, r8
 	bl	NandcWaitFlashReady
 	ldr	r3, [sp, #12]
 	adds	r3, r3, #1
-	b	.L1215
-.L1220:
+	b	.L1232
+.L1237:
 	.align	2
-.L1219:
+.L1236:
 	.word	.LANCHOR2
-	.word	.LC83
-	.word	.LC84
+	.word	.LC86
+	.word	.LC87
 	.word	.LANCHOR0
 	.fnend
 	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
@@ -8079,74 +8177,74 @@ FlashGetReadRetryDefault:
 	@ link register save eliminated.
 	mov	r3, r0
 	cmp	r0, #0
-	beq	.L1221
+	beq	.L1238
 	subs	r2, r0, #1
 	cmp	r2, #6
-	bhi	.L1223
+	bhi	.L1240
 	b	HynixGetReadRetryDefault
-.L1223:
+.L1240:
 	cmp	r0, #49
-	bne	.L1224
-	ldr	r0, .L1244
+	bne	.L1241
+	ldr	r0, .L1261
 	movs	r2, #64
-	ldr	r1, .L1244+4
-	addw	r0, r0, #1906
+	ldr	r1, .L1261+4
+	addw	r0, r0, #1910
 	strb	r3, [r0, #-4]
 	movs	r3, #4
 	strb	r3, [r0, #-3]
 	movs	r3, #15
 	strb	r3, [r0, #-2]
-	b	.L1242
-.L1224:
+	b	.L1259
+.L1241:
 	cmp	r0, #33
-	beq	.L1225
+	beq	.L1242
 	sub	r2, r0, #65
 	cmp	r2, #1
-	bhi	.L1226
-.L1225:
-	ldr	r0, .L1244
-	strb	r3, [r0, #1902]
+	bhi	.L1243
+.L1242:
+	ldr	r0, .L1261
+	strb	r3, [r0, #1906]
 	movs	r3, #4
-	b	.L1243
-.L1226:
+	b	.L1260
+.L1243:
 	cmp	r0, #34
-	beq	.L1227
+	beq	.L1244
 	cmp	r0, #67
-	bne	.L1228
-.L1227:
-	ldr	r0, .L1244
-	strb	r3, [r0, #1902]
+	bne	.L1245
+.L1244:
+	ldr	r0, .L1261
+	strb	r3, [r0, #1906]
 	movs	r3, #5
-.L1243:
-	strb	r3, [r0, #1903]
+.L1260:
+	strb	r3, [r0, #1907]
 	movs	r2, #45
 	movs	r3, #7
-	addw	r0, r0, #1906
+	addw	r0, r0, #1910
 	strb	r3, [r0, #-2]
-	ldr	r1, .L1244+8
-	b	.L1242
-.L1228:
+	ldr	r1, .L1261+8
+	b	.L1259
+.L1245:
 	cmp	r0, #35
-	beq	.L1229
+	beq	.L1246
 	cmp	r0, #68
-	bne	.L1221
-.L1229:
-	ldr	r0, .L1244
+	bne	.L1238
+.L1246:
+	ldr	r0, .L1261
 	movs	r2, #95
-	ldr	r1, .L1244+12
-	addw	r0, r0, #1906
+	ldr	r1, .L1261+12
+	addw	r0, r0, #1910
 	strb	r3, [r0, #-4]
 	movs	r3, #5
 	strb	r3, [r0, #-3]
 	movs	r3, #17
 	strb	r3, [r0, #-2]
-.L1242:
+.L1259:
 	b	ftl_memcpy
-.L1221:
+.L1238:
 	bx	lr
-.L1245:
+.L1262:
 	.align	2
-.L1244:
+.L1261:
 	.word	.LANCHOR0
 	.word	.LANCHOR1+440
 	.word	.LANCHOR1+288
@@ -8165,15 +8263,15 @@ NandcXferComp:
 	push	{r0, r1, r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	.pad #8
-	ldr	r5, .L1285
+	ldr	r5, .L1302
 	add	r0, r5, r0, lsl #3
-	ldr	r3, [r5, #2768]
+	ldr	r3, [r5, #2780]
 	ldr	r4, [r0, #12]
 	cmp	r3, #3
-	bls	.L1277
+	bls	.L1294
 	ldr	r3, [r4, #16]
 	lsls	r6, r3, #29
-	bpl	.L1277
+	bpl	.L1294
 	mov	r0, r4
 	bl	wait_for_nandc_xfer_completed
 	ldr	r6, [r4, #16]
@@ -8181,130 +8279,130 @@ NandcXferComp:
 	ubfx	r6, r6, #1, #1
 	str	r3, [sp]
 	cmp	r6, #0
-	beq	.L1259
+	beq	.L1276
 	movs	r6, #0
-.L1249:
+.L1266:
 	ldr	r2, [r4, #28]
 	ldr	r3, [sp]
 	ubfx	r2, r2, #16, #5
 	ubfx	r3, r3, #22, #6
 	cmp	r2, r3
-	bge	.L1257
-	ldr	r3, [r5, #2768]
+	bge	.L1274
+	ldr	r3, [r5, #2780]
 	cmp	r3, #5
-	bhi	.L1250
-.L1253:
+	bhi	.L1267
+.L1270:
 	adds	r6, r6, #1
 	bic	r3, r6, #-16777216
 	cmp	r3, #0
-	bne	.L1249
+	bne	.L1266
 	ldr	r2, [r4, #28]
 	mov	r1, r6
 	ldr	r3, [sp]
 	ubfx	r2, r2, #16, #5
-	ldr	r0, .L1285+4
+	ldr	r0, .L1302+4
 	ubfx	r3, r3, #22, #6
 	bl	printk
-	ldr	r0, .L1285+8
+	ldr	r0, .L1302+8
 	mov	r1, r4
 	movs	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-	b	.L1249
-.L1250:
+	b	.L1266
+.L1267:
 	ldr	r3, [r4]
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #4]
 	lsls	r0, r3, #18
-	bpl	.L1253
+	bpl	.L1270
 	ldr	r3, [sp, #4]
 	lsls	r1, r3, #14
-	bpl	.L1253
-.L1257:
-	ldr	r3, [r5, #2804]
-	ldr	r4, .L1285
+	bpl	.L1270
+.L1274:
+	ldr	r3, [r5, #2812]
+	ldr	r4, .L1302
 	cmp	r3, #0
-	beq	.L1258
+	beq	.L1275
 	ldr	r1, [sp]
 	movs	r2, #0
-	ldr	r0, [r4, #2796]
+	ldr	r0, [r4, #2804]
 	ubfx	r1, r1, #22, #5
 	lsls	r1, r1, #10
 	bl	rknand_dma_unmap_single
-	ldr	r0, [r4, #2800]
-	movs	r2, #0
 	ldr	r1, [sp]
+	ldr	r0, [r4, #2808]
+	movs	r2, #0
 	ubfx	r1, r1, #22, #5
 	lsls	r1, r1, #7
 	bl	rknand_dma_unmap_single
-	b	.L1258
-.L1261:
+	b	.L1275
+.L1278:
 	ldr	r3, [r4, #8]
 	adds	r6, r6, #1
 	str	r3, [sp]
 	bic	r3, r6, #-16777216
-	cbnz	r3, .L1259
+	cbnz	r3, .L1276
 	ldr	r2, [sp]
 	mov	r1, r6
 	ldr	r3, [r4, #28]
-	ldr	r0, .L1285+12
+	ldr	r0, .L1302+12
 	ubfx	r3, r3, #16, #5
 	bl	printk
-	ldr	r0, .L1285+8
+	ldr	r0, .L1302+8
 	mov	r1, r4
 	movs	r2, #4
 	mov	r3, #512
 	bl	rknand_print_hex
-.L1259:
+.L1276:
 	ldr	r3, [sp]
 	lsls	r2, r3, #11
-	bpl	.L1261
-	ldr	r3, [r5, #2812]
-	cbz	r3, .L1262
+	bpl	.L1278
+	ldr	r3, [r5, #2820]
+	cbz	r3, .L1279
 	mov	r0, r4
 	bl	NandcSendDumpDataStart
-.L1262:
-	ldr	r3, [r5, #2804]
-	ldr	r6, .L1285
-	cbz	r3, .L1263
+.L1279:
+	ldr	r3, [r5, #2812]
+	ldr	r6, .L1302
+	cbz	r3, .L1280
 	ldr	r1, [sp]
 	movs	r2, #1
-	ldr	r0, [r6, #2796]
+	ldr	r0, [r6, #2804]
 	ubfx	r1, r1, #22, #5
 	lsls	r1, r1, #10
 	bl	rknand_dma_unmap_single
-	ldr	r0, [r6, #2800]
-	movs	r2, #1
 	ldr	r1, [sp]
+	ldr	r0, [r6, #2808]
+	movs	r2, #1
 	ubfx	r1, r1, #22, #5
 	lsls	r1, r1, #7
 	bl	rknand_dma_unmap_single
-.L1263:
-	ldr	r3, [r5, #2812]
-	cbz	r3, .L1258
+.L1280:
+	ldr	r3, [r5, #2820]
+	cbz	r3, .L1275
 	mov	r0, r4
 	bl	NandcSendDumpDataDone
-.L1258:
+.L1275:
 	movs	r3, #0
-	str	r3, [r5, #2804]
-	b	.L1246
-.L1277:
+	str	r3, [r5, #2812]
+	b	.L1263
+.L1294:
 	ldr	r3, [r4, #8]
 	str	r3, [sp]
 	ldr	r3, [sp]
 	lsls	r3, r3, #11
-	bpl	.L1277
-.L1246:
+	bpl	.L1294
+.L1263:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, pc}
-.L1286:
+.L1303:
 	.align	2
-.L1285:
+.L1302:
 	.word	.LANCHOR0
-	.word	.LC85
-	.word	.LC86
-	.word	.LC87
+	.word	.LC88
+	.word	.LC89
+	.word	.LC90
 	.fnend
 	.size	NandcXferComp, .-NandcXferComp
 	.align	1
@@ -8319,7 +8417,7 @@ NandcXferData:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r3
-	ldr	r5, .L1331
+	ldr	r5, .L1348
 	tst	r9, #63
 	.pad #92
 	sub	sp, sp, #92
@@ -8328,16 +8426,16 @@ NandcXferData:
 	mov	r10, r1
 	mov	r6, r2
 	ldr	r7, [r3, #12]
-	bne	.L1288
+	bne	.L1305
 	ldr	r3, [sp, #128]
-	cbnz	r3, .L1289
+	cbnz	r3, .L1306
 	add	r0, sp, #24
 	movs	r1, #255
 	movs	r2, #64
 	bl	memset
 	add	r3, sp, #24
 	str	r3, [sp, #128]
-.L1289:
+.L1306:
 	ldr	r3, [sp, #128]
 	mov	r0, r8
 	str	r9, [sp]
@@ -8349,8 +8447,8 @@ NandcXferData:
 	mov	r0, r8
 	bl	NandcXferComp
 	cmp	r10, #0
-	bne	.L1315
-	ldr	r3, [r5, #2816]
+	bne	.L1332
+	ldr	r3, [r5, #2824]
 	lsrs	r4, r6, #1
 	mov	r2, r10
 	mov	r1, r10
@@ -8359,12 +8457,12 @@ NandcXferData:
 	ite	cc
 	movcc	lr, #64
 	movcs	lr, #128
-.L1292:
+.L1309:
 	cmp	r1, r4
 	add	r3, r3, #4
 	add	ip, r2, lr
-	bcs	.L1329
-	ldr	r0, [r5, #2784]
+	bcs	.L1346
+	ldr	r0, [r5, #2792]
 	lsrs	r2, r2, #2
 	adds	r1, r1, #1
 	ldr	r2, [r0, r2, lsl #2]
@@ -8376,30 +8474,30 @@ NandcXferData:
 	strb	r0, [r3, #-2]
 	strb	r2, [r3, #-1]
 	mov	r2, ip
-	b	.L1292
-.L1329:
+	b	.L1309
+.L1346:
 	movs	r2, #0
-	ldr	r0, [r5, #2816]
-	ldr	r1, [r5, #2768]
+	ldr	r0, [r5, #2824]
+	ldr	r1, [r5, #2780]
 	lsrs	r6, r6, #2
 	mov	fp, r2
-.L1294:
+.L1311:
 	cmp	r2, r6
-	bcs	.L1290
+	bcs	.L1307
 	cmp	r0, #0
-	beq	.L1290
+	beq	.L1307
 	add	r3, r2, #8
 	ldr	r3, [r7, r3, lsl #2]
 	str	r3, [sp, #20]
 	ldr	r3, [sp, #20]
 	lsls	r4, r3, #29
-	bmi	.L1318
+	bmi	.L1335
 	ldr	r4, [sp, #20]
 	ubfx	r4, r4, #15, #1
 	cmp	r4, #0
-	bne	.L1318
+	bne	.L1335
 	cmp	r1, #5
-	bls	.L1296
+	bls	.L1313
 	ldr	r4, [sp, #20]
 	ldr	r3, [sp, #20]
 	ubfx	r4, r4, #3, #5
@@ -8420,10 +8518,10 @@ NandcXferData:
 	ite	hi
 	ubfxhi	r4, r4, #27, #1
 	ubfxls	r4, r4, #29, #1
-	b	.L1328
-.L1296:
+	b	.L1345
+.L1313:
 	cmp	r1, #3
-	bls	.L1298
+	bls	.L1315
 	ldr	r4, [sp, #20]
 	ldr	r3, [sp, #20]
 	ubfx	r4, r4, #3, #5
@@ -8444,40 +8542,40 @@ NandcXferData:
 	ite	hi
 	ubfxhi	r4, r4, #28, #1
 	ubfxls	r4, r4, #30, #1
-.L1328:
+.L1345:
 	orr	r4, r3, r4, lsl #5
-.L1298:
+.L1315:
 	cmp	fp, r4
 	it	cc
 	movcc	fp, r4
-	b	.L1295
-.L1318:
+	b	.L1312
+.L1335:
 	mov	fp, #-1
-.L1295:
+.L1312:
 	adds	r2, r2, #1
-	b	.L1294
-.L1315:
+	b	.L1311
+.L1332:
 	mov	fp, #0
-.L1290:
+.L1307:
 	movs	r3, #0
 	str	r3, [r7, #16]
-	b	.L1301
-.L1288:
+	b	.L1318
+.L1305:
 	cmp	r1, #1
 	mov	r4, #0
-	bne	.L1327
+	bne	.L1344
 	mov	fp, r4
-.L1302:
+.L1319:
 	cmp	r4, r6
-	bcs	.L1330
+	bcs	.L1347
 	and	ip, r4, #3
 	cmp	r9, #0
-	beq	.L1321
+	beq	.L1338
 	add	r3, r9, r4, lsl #9
-	b	.L1304
-.L1321:
+	b	.L1321
+.L1338:
 	mov	r3, r9
-.L1304:
+.L1321:
 	ldr	r2, [sp, #128]
 	mov	r0, r7
 	ldr	r1, [sp, #128]
@@ -8492,21 +8590,21 @@ NandcXferData:
 	str	r2, [sp]
 	mov	r2, ip
 	bl	NandcCopy1KB
+	ldr	ip, [sp, #8]
 	mov	r0, r8
 	movs	r1, #1
 	movs	r2, #2
-	ldr	ip, [sp, #8]
 	str	fp, [sp]
-	str	fp, [sp, #4]
 	mov	r3, ip
+	str	fp, [sp, #4]
 	bl	NandcXferStart
 	mov	r0, r8
 	bl	NandcXferComp
-	b	.L1302
-.L1330:
+	b	.L1319
+.L1347:
 	mov	fp, #0
-	b	.L1301
-.L1327:
+	b	.L1318
+.L1344:
 	str	r4, [sp]
 	mov	r1, r4
 	str	r4, [sp, #4]
@@ -8515,16 +8613,16 @@ NandcXferData:
 	mov	fp, r4
 	bl	NandcXferStart
 	str	r9, [sp, #8]
-.L1307:
+.L1324:
 	cmp	r4, r6
-	bcs	.L1301
+	bcs	.L1318
 	mov	r0, r8
 	bl	NandcXferComp
 	ldr	r3, [r7, #32]
 	add	ip, r4, #2
 	cmp	ip, r6
 	str	r3, [sp, #20]
-	bcs	.L1308
+	bcs	.L1325
 	movs	r3, #0
 	mov	r0, r8
 	str	r3, [sp]
@@ -8535,10 +8633,10 @@ NandcXferData:
 	str	ip, [sp, #12]
 	bl	NandcXferStart
 	ldr	ip, [sp, #12]
-.L1308:
+.L1325:
 	ldr	r3, [sp, #20]
 	lsls	r3, r3, #29
-	bmi	.L1323
+	bmi	.L1340
 	ldr	r2, [sp, #20]
 	ldr	r3, [sp, #20]
 	ubfx	r2, r2, #3, #5
@@ -8547,10 +8645,10 @@ NandcXferData:
 	cmp	fp, r3
 	it	cc
 	movcc	fp, r3
-	b	.L1309
-.L1323:
+	b	.L1326
+.L1340:
 	mov	fp, #-1
-.L1309:
+.L1326:
 	ldr	r1, [sp, #128]
 	cmp	r9, #0
 	ldr	r3, [sp, #8]
@@ -8574,13 +8672,13 @@ NandcXferData:
 	mov	r4, ip
 	add	r3, r3, #1024
 	str	r3, [sp, #8]
-	b	.L1307
-.L1301:
-	ldr	r3, [r5, #2768]
+	b	.L1324
+.L1318:
+	ldr	r3, [r5, #2780]
 	cmp	r3, #5
-	bls	.L1313
+	bls	.L1330
 	cmp	r10, #0
-	bne	.L1313
+	bne	.L1330
 	ldr	r3, [r7]
 	and	r2, r3, #139264
 	cmp	r2, #139264
@@ -8588,14 +8686,14 @@ NandcXferData:
 	moveq	fp, #-1
 	orreq	r3, r3, #131072
 	streq	r3, [r7]
-.L1313:
+.L1330:
 	mov	r0, fp
 	add	sp, sp, #92
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1332:
+.L1349:
 	.align	2
-.L1331:
+.L1348:
 	.word	.LANCHOR0
 	.fnend
 	.size	NandcXferData, .-NandcXferData
@@ -8612,20 +8710,20 @@ FlashReadRawPage:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	mov	r8, r3
-	ldr	r3, .L1335
+	ldr	r3, .L1352
 	mov	r6, r1
 	mov	r7, r2
 	mov	r4, r0
 	ldrb	r5, [r3, #265]	@ zero_extendqisi2
-	cbnz	r0, .L1334
-	ldr	r2, .L1335+4
+	cbnz	r0, .L1351
+	ldr	r2, .L1352+4
 	ldrb	r3, [r2, #1]	@ zero_extendqisi2
 	ldr	r2, [r2, #4]
 	muls	r2, r3, r2
 	cmp	r1, r2
 	it	cc
 	movcc	r5, #4
-.L1334:
+.L1351:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -8638,8 +8736,8 @@ FlashReadRawPage:
 	mov	r2, r5
 	movs	r1, #0
 	mov	r3, r7
-	mov	r0, r4
 	str	r8, [sp]
+	mov	r0, r4
 	bl	NandcXferData
 	mov	r5, r0
 	mov	r0, r4
@@ -8648,9 +8746,9 @@ FlashReadRawPage:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1336:
+.L1353:
 	.align	2
-.L1335:
+.L1352:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -8667,7 +8765,7 @@ FlashDdrTunningRead:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r7, r3
-	ldr	r4, .L1363
+	ldr	r4, .L1380
 	.pad #20
 	sub	sp, sp, #20
 	mov	r10, r0
@@ -8676,14 +8774,14 @@ FlashDdrTunningRead:
 	ldr	r3, [r4, #1828]
 	ldr	r3, [r3, #304]
 	str	r3, [sp, #8]
-	ldr	r3, [r4, #2768]
+	ldr	r3, [r4, #2780]
 	cmp	r3, #8
 	ldr	r3, [sp, #56]
 	ite	cc
 	movcc	r9, #6
 	movcs	r9, #12
 	cmp	r3, #0
-	beq	.L1351
+	beq	.L1368
 	movs	r0, #1
 	bl	FlashSetInterfaceMode
 	movs	r0, #1
@@ -8691,137 +8789,137 @@ FlashDdrTunningRead:
 	mov	r0, r10
 	bl	FlashReset
 	mov	r3, r7
+	ldr	r1, [sp]
 	mov	r2, fp
 	mov	r0, r10
-	ldr	r1, [sp]
 	bl	FlashReadRawPage
 	mov	r6, r0
-	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	ldrb	r0, [r4, #2764]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	ldrb	r0, [r4, #2764]	@ zero_extendqisi2
 	bl	NandcSetMode
 	adds	r3, r6, #1
-	bne	.L1340
-.L1349:
+	bne	.L1357
+.L1366:
 	mov	r6, #-1
-	b	.L1341
-.L1340:
+	b	.L1358
+.L1357:
 	mov	r2, r6
-	ldr	r0, .L1363+4
+	ldr	r0, .L1380+4
 	ldr	r1, [sp]
 	bl	printk
 	cmp	r6, #9
 	itt	ls
 	addls	r4, r4, r10, lsl #3
 	ldrls	r3, [r4, #12]
-	ldr	r4, .L1363+8
+	ldr	r4, .L1380+8
 	itttt	ls
 	ldrls	r2, [r3, #3840]
 	ldrls	r2, [r3]
 	orrls	r2, r2, #131072
 	strls	r2, [r3]
-	ldr	r3, [r4, #3988]
+	ldr	r3, [r4, #3992]
 	adds	r3, r3, #1
-	str	r3, [r4, #3988]
+	str	r3, [r4, #3992]
 	cmp	r3, #2048
-	bcc	.L1341
+	bcc	.L1358
 	movs	r7, #0
-	str	r7, [r4, #3988]
+	str	r7, [r4, #3992]
 	mov	fp, r7
-	b	.L1339
-.L1351:
+	b	.L1356
+.L1368:
 	mov	r6, #1024
-.L1339:
+.L1356:
 	movs	r4, #0
 	mov	r8, #-1
 	str	r4, [sp, #4]
 	mov	ip, r4
 	mov	r5, r4
-.L1347:
+.L1364:
 	uxtb	r0, r9
 	str	ip, [sp, #12]
 	bl	NandcSetDdrPara
 	mov	r3, r7
 	mov	r0, r10
-	mov	r2, fp
 	ldr	r1, [sp]
+	mov	r2, fp
 	bl	FlashReadRawPage
 	adds	r3, r6, #1
-	cmp	r0, r3
 	ldr	ip, [sp, #12]
-	bhi	.L1343
+	cmp	r0, r3
+	bhi	.L1360
 	cmp	r0, #2
-	bhi	.L1353
+	bhi	.L1370
 	adds	r5, r5, #1
 	cmp	r5, #9
-	bls	.L1353
+	bls	.L1370
 	rsb	r4, r5, r9
 	mov	r6, r0
 	mov	r8, #0
-	b	.L1345
-.L1343:
+	b	.L1362
+.L1360:
 	ldr	r3, [sp, #4]
 	cmp	r3, r5
-	bcs	.L1354
+	bcs	.L1371
 	cmp	r5, #7
 	rsb	ip, r5, r4
-	bhi	.L1355
+	bhi	.L1372
 	str	r5, [sp, #4]
-	b	.L1354
-.L1353:
+	b	.L1371
+.L1370:
 	mov	r8, #0
 	mov	r4, r9
 	mov	r6, r0
 	mov	r7, r8
 	mov	fp, r8
-	b	.L1344
-.L1354:
+	b	.L1361
+.L1371:
 	movs	r5, #0
-.L1344:
+.L1361:
 	add	r9, r9, #2
 	cmp	r9, #69
-	bls	.L1347
-.L1345:
+	bls	.L1364
+.L1362:
 	ldr	r3, [sp, #4]
 	cmp	r3, r5
 	it	cs
 	movcs	r4, ip
-	b	.L1346
-.L1355:
+	b	.L1363
+.L1372:
 	mov	r4, ip
-.L1346:
-	cbz	r4, .L1348
-	ldr	r0, .L1363+12
+.L1363:
+	cbz	r4, .L1365
+	ldr	r0, .L1380+12
 	mov	r1, r4
 	bl	printk
 	uxtb	r0, r4
 	bl	NandcSetDdrPara
-.L1348:
+.L1365:
 	cmp	r8, #0
-	beq	.L1341
-	ldr	r0, .L1363+16
+	beq	.L1358
+	ldr	r0, .L1380+16
 	mov	r1, r10
 	ldr	r2, [sp]
 	bl	printk
 	ldr	r3, [sp, #56]
 	cmp	r3, #0
-	beq	.L1349
+	beq	.L1366
 	ldr	r3, [sp, #8]
 	ubfx	r0, r3, #8, #8
 	bl	NandcSetDdrPara
-.L1341:
+.L1358:
 	mov	r0, r6
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1364:
+.L1381:
 	.align	2
-.L1363:
+.L1380:
 	.word	.LANCHOR0
-	.word	.LC88
+	.word	.LC91
 	.word	.LANCHOR2
-	.word	.LC89
-	.word	.LC90
+	.word	.LC92
+	.word	.LC93
 	.fnend
 	.size	FlashDdrTunningRead, .-FlashDdrTunningRead
 	.align	1
@@ -8843,18 +8941,18 @@ FlashReadPage:
 	bl	FlashReadRawPage
 	adds	r2, r0, #1
 	mov	r4, r0
-	bne	.L1366
-	ldr	r9, .L1385+4
+	bne	.L1383
+	ldr	r9, .L1402+4
 	ldrb	fp, [r9, #8]	@ zero_extendqisi2
 	mov	r10, r9
 	cmp	fp, #0
-	bne	.L1367
-.L1369:
-	ldrb	r3, [r10, #2761]	@ zero_extendqisi2
-	ldr	r9, .L1385+4
-	cbz	r3, .L1366
-	b	.L1384
-.L1367:
+	bne	.L1384
+.L1386:
+	ldrb	r3, [r10, #2772]	@ zero_extendqisi2
+	ldr	r9, .L1402+4
+	cbz	r3, .L1383
+	b	.L1401
+.L1384:
 	movs	r3, #0
 	mov	r0, r5
 	strb	r3, [r9, #8]
@@ -8864,10 +8962,10 @@ FlashReadPage:
 	bl	FlashReadRawPage
 	strb	fp, [r9, #8]
 	adds	r3, r0, #1
-	beq	.L1369
+	beq	.L1386
 	mov	r4, r0
-	b	.L1366
-.L1384:
+	b	.L1383
+.L1401:
 	ldr	r3, [r9, #1828]
 	mov	r1, r6
 	mov	r0, r5
@@ -8879,20 +8977,20 @@ FlashReadPage:
 	bl	FlashDdrTunningRead
 	adds	r1, r0, #1
 	mov	r4, r0
-	beq	.L1370
+	beq	.L1387
 	ldrb	r3, [r9, #1892]	@ zero_extendqisi2
 	cmp	r0, r3, lsr #1
-	bls	.L1366
-.L1370:
+	bls	.L1383
+.L1387:
 	ubfx	r0, r10, #8, #8
 	bl	NandcSetDdrPara
-.L1366:
-	ldr	r9, .L1385+8
-	ldr	ip, [r9, #3992]
+.L1383:
+	ldr	r9, .L1402+8
+	ldr	ip, [r9, #3996]
 	cmp	ip, #0
-	beq	.L1371
+	beq	.L1388
 	adds	r2, r4, #1
-	bne	.L1371
+	bne	.L1388
 	mov	r1, r6
 	mov	r2, r8
 	mov	r3, r7
@@ -8901,17 +8999,17 @@ FlashReadPage:
 	mov	r3, r6
 	mov	r2, r5
 	mov	r4, r0
-	ldr	r0, .L1385
+	ldr	r0, .L1402
 	mov	r1, r4
 	bl	printk
 	adds	r3, r4, #1
-	bne	.L1371
-	ldr	r3, .L1385+4
+	bne	.L1388
+	ldr	r3, .L1402+4
 	ldrb	r3, [r3, #76]	@ zero_extendqisi2
-	cbz	r3, .L1371
+	cbz	r3, .L1388
 	mov	r0, r5
 	bl	flash_enter_slc_mode
-	ldr	r4, [r9, #3992]
+	ldr	r4, [r9, #3996]
 	mov	r0, r5
 	mov	r1, r6
 	mov	r2, r8
@@ -8920,15 +9018,15 @@ FlashReadPage:
 	mov	r4, r0
 	mov	r0, r5
 	bl	flash_exit_slc_mode
-.L1371:
+.L1388:
 	mov	r0, r4
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1386:
+.L1403:
 	.align	2
-.L1385:
-	.word	.LC91
+.L1402:
+	.word	.LC94
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -8945,19 +9043,19 @@ FlashDdrParaScan:
 	push	{r0, r1, r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
+	movs	r5, #0
+	ldr	r4, .L1414
 	mov	r7, r0
-	ldr	r4, .L1397
 	mov	r6, r1
-	movs	r5, #0
-	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	ldrb	r0, [r4, #2764]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	ldrb	r0, [r4, #2764]	@ zero_extendqisi2
 	bl	NandcSetMode
 	mov	r1, r6
 	mov	r2, r5
 	mov	r3, r5
-	mov	r0, r7
 	str	r5, [sp]
+	mov	r0, r7
 	bl	FlashDdrTunningRead
 	mov	r1, r6
 	mov	r2, r5
@@ -8966,32 +9064,32 @@ FlashDdrParaScan:
 	mov	r0, r7
 	bl	FlashReadRawPage
 	adds	r0, r0, #1
-	beq	.L1388
+	beq	.L1405
 	cmp	r8, #-1
-	bne	.L1389
-.L1388:
-	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+	bne	.L1406
+.L1405:
+	ldrb	r3, [r4, #2764]	@ zero_extendqisi2
 	lsls	r3, r3, #31
-	bpl	.L1389
+	bpl	.L1406
 	movs	r0, #1
 	bl	FlashSetInterfaceMode
 	movs	r0, #1
 	bl	NandcSetMode
-	ldr	r3, .L1397
+	ldr	r3, .L1414
 	movs	r2, #0
-	strb	r2, [r3, #2761]
-	b	.L1390
-.L1389:
+	strb	r2, [r3, #2772]
+	b	.L1407
+.L1406:
 	movs	r3, #1
-	strb	r3, [r4, #2761]
-.L1390:
+	strb	r3, [r4, #2772]
+.L1407:
 	movs	r0, #0
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1398:
+.L1415:
 	.align	2
-.L1397:
+.L1414:
 	.word	.LANCHOR0
 	.fnend
 	.size	FlashDdrParaScan, .-FlashDdrParaScan
@@ -9008,119 +9106,119 @@ FlashLoadPhyInfo:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r6, .L1415
+	ldr	r6, .L1432
 	movs	r4, #0
-	ldr	r3, .L1415+4
+	ldr	r3, .L1432+4
 	mov	r9, #4
-	ldr	r5, .L1415+8
+	ldr	r5, .L1432+8
 	mov	r7, #-1
 	mov	r8, r6
 	ldr	r0, [r3]	@ unaligned
 	ldrh	r3, [r6, #266]
 	mov	r6, r5
-	str	r4, [r5, #4000]
+	str	r4, [r5, #4004]
 	str	r0, [sp, #12]	@ unaligned
 	mov	r0, r4
 	str	r3, [sp, #4]
-	ldr	r3, [r5, #3984]
-	str	r3, [r5, #3996]
+	ldr	r3, [r5, #3988]
+	str	r3, [r5, #4000]
 	bl	flash_enter_slc_mode
-.L1400:
+.L1417:
 	add	fp, r4, #1
 	mov	r10, #0
-.L1402:
+.L1419:
 	add	r3, sp, #12
 	ldrb	r0, [r3, r10]	@ zero_extendqisi2
 	bl	FlashBchSel
 	movs	r0, #0
 	mov	r1, r4
-	ldr	r2, [r5, #3984]
+	ldr	r2, [r5, #3988]
 	mov	r3, r0
 	bl	FlashReadRawPage
 	adds	r0, r0, #1
-	bne	.L1401
+	bne	.L1418
 	movs	r0, #0
 	mov	r1, fp
-	ldr	r2, [r6, #3984]
+	ldr	r2, [r6, #3988]
 	mov	r3, r0
 	bl	FlashReadRawPage
 	adds	r0, r0, #1
-	bne	.L1401
+	bne	.L1418
 	add	r10, r10, #1
 	cmp	r10, #4
-	beq	.L1403
-	b	.L1402
-.L1404:
+	beq	.L1420
+	b	.L1419
+.L1421:
 	add	r0, fp, #12
 	movw	r1, #2036
 	bl	JSHash
 	ldr	r3, [fp, #8]
 	cmp	r3, r0
-	bne	.L1410
+	bne	.L1427
 	add	r1, fp, #160
 	movs	r2, #32
-	ldr	r0, .L1415+12
+	ldr	r0, .L1432+12
 	bl	ftl_memcpy
-	ldr	r7, .L1415+16
-	ldr	r1, [r6, #3996]
+	ldr	r7, .L1432+16
+	ldr	r1, [r6, #4000]
 	movs	r2, #32
 	add	r0, r7, #44
 	adds	r1, r1, #192
 	bl	ftl_memcpy
-	ldr	r1, [r6, #3996]
+	ldr	r1, [r6, #4000]
 	mov	r2, #852
-	addw	r0, r7, #1902
+	addw	r0, r7, #1906
 	adds	r1, r1, #224
 	bl	ftl_memcpy
-	ldr	fp, [r6, #3996]
-	str	r4, [r6, #4000]
+	ldr	fp, [r6, #4000]
+	str	r4, [r6, #4004]
 	mov	r0, r4
 	ldrh	r1, [r8, #266]
 	ldr	r3, [fp, #1076]
-	strb	r3, [r7, #2761]
+	strb	r3, [r7, #2772]
 	bl	__aeabi_uidiv
 	adds	r3, r0, #1
-	cbnz	r0, .L1413
+	cbnz	r0, .L1430
 	movs	r3, #2
-.L1413:
-	str	r3, [r6, #4004]
+.L1430:
+	str	r3, [r6, #4008]
 	movs	r7, #0
 	ldrh	r3, [fp, #14]
-	strb	r3, [r5, #4008]
-.L1403:
+	strb	r3, [r5, #4012]
+.L1420:
 	ldr	r3, [sp, #4]
 	subs	r9, r9, #1
 	add	r4, r4, r3
-	bne	.L1400
+	bne	.L1417
 	mov	r0, r9
-.L1414:
+.L1431:
 	bl	flash_exit_slc_mode
 	mov	r0, r7
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1401:
-	ldr	fp, [r5, #3996]
-	ldr	r2, .L1415+20
+.L1418:
+	ldr	fp, [r5, #4000]
+	ldr	r2, .L1432+20
 	ldr	r3, [fp]
 	cmp	r3, r2
-	bne	.L1403
+	bne	.L1420
 	cmp	r7, #0
-	bne	.L1404
+	bne	.L1421
 	mov	r0, r4
 	ldrh	r1, [r8, #266]
 	bl	__aeabi_uidiv
-	ldr	r3, .L1415+8
+	ldr	r3, .L1432+8
 	adds	r0, r0, #1
-	str	r0, [r3, #4004]
+	str	r0, [r3, #4008]
 	mov	r0, r7
-	b	.L1414
-.L1410:
+	b	.L1431
+.L1427:
 	mov	r7, #-1
-	b	.L1403
-.L1416:
+	b	.L1420
+.L1433:
 	.align	2
-.L1415:
+.L1432:
 	.word	.LANCHOR1
 	.word	.LANCHOR3+11
 	.word	.LANCHOR2
@@ -9142,72 +9240,72 @@ ToshibaReadRetrial:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
+	ldr	r4, .L1462
 	mov	r9, r0
-	mov	fp, r3
 	str	r2, [sp, #8]
+	mov	fp, r3
 	str	r1, [sp, #16]
 	bl	NandcWaitFlashReady
-	ldr	r4, .L1445
 	add	r3, r4, r9, lsl #3
 	ldrb	r2, [r3, #16]	@ zero_extendqisi2
 	ldr	r7, [r3, #12]
-	ldrb	r3, [r4, #1900]	@ zero_extendqisi2
+	ldrb	r3, [r4, #1904]	@ zero_extendqisi2
 	add	r6, r2, #8
 	subs	r3, r3, #67
 	add	r6, r7, r6, lsl #8
 	cmp	r3, #1
 	lsl	r3, r2, #8
 	str	r3, [sp, #12]
-	bls	.L1434
-	ldrb	r5, [r4, #2761]	@ zero_extendqisi2
-	cbz	r5, .L1435
+	bls	.L1451
+	ldrb	r5, [r4, #2772]	@ zero_extendqisi2
+	cbz	r5, .L1452
 	movs	r0, #0
 	str	r2, [sp, #20]
 	bl	NandcSetDdrMode
 	movs	r3, #1
 	ldr	r2, [sp, #20]
 	str	r3, [sp, #4]
-	b	.L1419
-.L1435:
+	b	.L1436
+.L1452:
 	str	r5, [sp, #4]
-.L1419:
+.L1436:
 	ldr	r3, [sp, #12]
 	movs	r1, #92
 	adds	r3, r7, r3
 	str	r1, [r3, #2056]
 	movs	r1, #197
 	str	r1, [r3, #2056]
-	b	.L1418
-.L1434:
+	b	.L1435
+.L1451:
 	movs	r3, #0
 	str	r3, [sp, #4]
-.L1418:
+.L1435:
 	mov	r8, #1
 	mov	r10, #-1
 	lsls	r3, r2, #8
 	str	r3, [sp, #20]
-.L1420:
-	ldr	r3, .L1445+4
-	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+.L1437:
+	ldr	r3, .L1462+4
+	ldrb	r3, [r3, #4013]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	cmp	r8, r3
-	bcs	.L1444
-	ldrb	r3, [r4, #1900]	@ zero_extendqisi2
+	bcs	.L1461
+	ldrb	r3, [r4, #1904]	@ zero_extendqisi2
 	mov	r0, r6
 	uxtb	r1, r8
 	subs	r3, r3, #67
 	cmp	r3, #1
-	bhi	.L1421
+	bhi	.L1438
 	bl	SandiskSetRRPara
-	b	.L1422
-.L1421:
+	b	.L1439
+.L1438:
 	bl	ToshibaSetRRPara
-.L1422:
-	ldrb	r3, [r4, #1900]	@ zero_extendqisi2
+.L1439:
+	ldrb	r3, [r4, #1904]	@ zero_extendqisi2
 	cmp	r3, #34
-	bne	.L1423
-	ldr	r3, .L1445+4
-	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+	bne	.L1440
+	ldr	r3, .L1462+4
+	ldrb	r3, [r3, #4013]	@ zero_extendqisi2
 	subs	r3, r3, #3
 	cmp	r8, r3
 	itttt	eq
@@ -9215,7 +9313,7 @@ ToshibaReadRetrial:
 	ldreq	r3, [sp, #20]
 	addeq	r3, r7, r3
 	streq	r2, [r3, #2056]
-.L1423:
+.L1440:
 	ldr	r3, [sp, #12]
 	movs	r2, #38
 	adds	r3, r7, r3
@@ -9223,54 +9321,54 @@ ToshibaReadRetrial:
 	movs	r2, #93
 	str	r2, [r3, #2056]
 	ldr	r3, [sp, #4]
-	cbz	r3, .L1424
+	cbz	r3, .L1441
 	movs	r0, #4
 	bl	NandcSetDdrMode
 	mov	r0, r9
-	mov	r3, fp
 	ldr	r1, [sp, #16]
+	mov	r3, fp
 	ldr	r2, [sp, #8]
 	bl	FlashReadRawPage
 	mov	r5, r0
 	movs	r0, #0
 	bl	NandcSetDdrMode
-	b	.L1425
-.L1424:
+	b	.L1442
+.L1441:
 	mov	r0, r9
 	ldr	r1, [sp, #16]
 	ldr	r2, [sp, #8]
 	mov	r3, fp
 	bl	FlashReadRawPage
 	mov	r5, r0
-.L1425:
+.L1442:
 	adds	r2, r5, #1
-	beq	.L1426
+	beq	.L1443
 	ldrb	r2, [r4, #1892]	@ zero_extendqisi2
 	cmp	r10, #-1
 	it	eq
 	moveq	r10, r5
 	add	r2, r2, r2, lsl #1
 	cmp	r5, r2, asr #2
-	bcc	.L1428
+	bcc	.L1445
 	mov	fp, #0
 	str	fp, [sp, #8]
-.L1426:
+.L1443:
 	add	r8, r8, #1
-	b	.L1420
-.L1444:
+	b	.L1437
+.L1461:
 	mov	r5, r10
-.L1428:
-	ldrb	r2, [r4, #1900]	@ zero_extendqisi2
+.L1445:
+	ldrb	r2, [r4, #1904]	@ zero_extendqisi2
 	mov	r0, r6
 	movs	r1, #0
 	subs	r2, r2, #67
 	cmp	r2, #1
-	bhi	.L1430
+	bhi	.L1447
 	bl	SandiskSetRRPara
-	b	.L1431
-.L1430:
+	b	.L1448
+.L1447:
 	bl	ToshibaSetRRPara
-.L1431:
+.L1448:
 	ldr	r3, [sp, #12]
 	movs	r2, #255
 	add	r7, r7, r3
@@ -9278,25 +9376,25 @@ ToshibaReadRetrial:
 	ldrb	r2, [r4, #1892]	@ zero_extendqisi2
 	add	r2, r2, r2, lsl #1
 	cmp	r5, r2, asr #2
-	bcc	.L1432
+	bcc	.L1449
 	adds	r3, r5, #1
 	it	ne
 	movne	r5, #256
-.L1432:
+.L1449:
 	mov	r0, r9
 	bl	NandcWaitFlashReady
 	ldr	r3, [sp, #4]
-	cbz	r3, .L1433
+	cbz	r3, .L1450
 	movs	r0, #4
 	bl	NandcSetDdrMode
-.L1433:
+.L1450:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1446:
+.L1463:
 	.align	2
-.L1445:
+.L1462:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -9313,7 +9411,7 @@ SamsungReadRetrial:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r5, .L1460
+	ldr	r5, .L1477
 	mov	r9, r2
 	mov	r7, r3
 	mov	fp, r1
@@ -9325,12 +9423,12 @@ SamsungReadRetrial:
 	ldr	r6, [r2, #12]
 	adds	r3, r3, #8
 	add	r6, r6, r3, lsl #8
-.L1448:
-	ldr	r3, .L1460+4
-	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+.L1465:
+	ldr	r3, .L1477+4
+	ldrb	r3, [r3, #4013]	@ zero_extendqisi2
 	adds	r3, r3, #1
 	cmp	r10, r3
-	bcs	.L1451
+	bcs	.L1468
 	mov	r0, r6
 	uxtb	r1, r10
 	bl	SamsungSetRRPara
@@ -9340,38 +9438,38 @@ SamsungReadRetrial:
 	mov	r3, r7
 	bl	FlashReadRawPage
 	adds	r2, r0, #1
-	beq	.L1449
+	beq	.L1466
 	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
 	cmp	r4, #-1
 	it	eq
 	moveq	r4, r0
 	add	r3, r3, r3, lsl #1
 	cmp	r0, r3, asr #2
-	bcc	.L1454
+	bcc	.L1471
 	movs	r7, #0
 	mov	r9, r7
-.L1449:
+.L1466:
 	add	r10, r10, #1
-	b	.L1448
-.L1454:
+	b	.L1465
+.L1471:
 	mov	r4, r0
-.L1451:
+.L1468:
 	mov	r0, r6
 	movs	r1, #0
 	bl	SamsungSetRRPara
 	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
 	add	r3, r3, r3, lsl #1
 	cmp	r4, r3, asr #2
-	bcc	.L1453
+	bcc	.L1470
 	adds	r3, r4, #1
 	it	ne
 	movne	r4, #256
-.L1453:
+.L1470:
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1461:
+.L1478:
 	.align	2
-.L1460:
+.L1477:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -9388,7 +9486,7 @@ MicronReadRetrial:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r3
-	ldr	r3, .L1478
+	ldr	r3, .L1495
 	mov	fp, r2
 	.pad #28
 	sub	sp, sp, #28
@@ -9397,15 +9495,15 @@ MicronReadRetrial:
 	ldrb	r2, [r3, #76]	@ zero_extendqisi2
 	mov	r5, r3
 	ldrb	r4, [r3, #1892]	@ zero_extendqisi2
-	cbnz	r2, .L1463
+	cbnz	r2, .L1480
 	add	r4, r4, r4, lsl #1
 	ubfx	r4, r4, #2, #8
-	b	.L1464
-.L1463:
-	ldr	r2, .L1478+4
+	b	.L1481
+.L1480:
+	ldr	r2, .L1495+4
 	smull	r2, r3, r4, r2
 	uxtb	r4, r3
-.L1464:
+.L1481:
 	mov	r0, r8
 	movs	r7, #0
 	bl	NandcWaitFlashReady
@@ -9413,16 +9511,16 @@ MicronReadRetrial:
 	mov	r5, #-1
 	ldr	r2, [r3, #12]
 	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	str	r2, [sp, #12]
 	str	r3, [sp, #16]
 	mov	r3, r2
-	str	r2, [sp, #12]
 	ldr	r2, [sp, #16]
 	add	r6, r3, r2, lsl #8
-.L1465:
-	ldr	r3, .L1478+8
-	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+.L1482:
+	ldr	r3, .L1495+8
+	ldrb	r3, [r3, #4013]	@ zero_extendqisi2
 	cmp	r7, r3
-	bcs	.L1468
+	bcs	.L1485
 	movs	r3, #239
 	movs	r0, #200
 	str	r3, [r6, #2056]
@@ -9436,28 +9534,28 @@ MicronReadRetrial:
 	mov	r0, r8
 	str	ip, [r6, #2048]
 	mov	r1, r10
-	str	ip, [r6, #2048]
-	str	ip, [r6, #2048]
 	str	r3, [sp, #8]
 	mov	r3, r9
+	str	ip, [r6, #2048]
+	str	ip, [r6, #2048]
 	str	ip, [sp, #20]
 	bl	FlashReadRawPage
 	adds	r2, r0, #1
-	beq	.L1466
+	beq	.L1483
 	cmp	r5, #-1
 	it	eq
 	moveq	r5, r0
 	cmp	r0, r4
-	bcc	.L1472
+	bcc	.L1489
 	ldr	ip, [sp, #20]
 	mov	r9, ip
 	mov	fp, ip
-.L1466:
+.L1483:
 	ldr	r7, [sp, #8]
-	b	.L1465
-.L1472:
+	b	.L1482
+.L1489:
 	mov	r5, r0
-.L1468:
+.L1485:
 	ldr	r2, [sp, #16]
 	movs	r0, #200
 	ldr	r3, [sp, #12]
@@ -9473,9 +9571,9 @@ MicronReadRetrial:
 	str	r3, [r6, #2048]
 	str	r3, [r6, #2048]
 	str	r3, [r6, #2048]
-	bcc	.L1470
+	bcc	.L1487
 	adds	r3, r5, #1
-	ldr	r0, .L1478+12
+	ldr	r0, .L1495+12
 	it	ne
 	movne	r5, #256
 	mov	r1, r7
@@ -9483,18 +9581,18 @@ MicronReadRetrial:
 	mov	r2, r10
 	mov	r3, r7
 	bl	printk
-.L1470:
+.L1487:
 	mov	r0, r5
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1479:
+.L1496:
 	.align	2
-.L1478:
+.L1495:
 	.word	.LANCHOR0
 	.word	1431655766
 	.word	.LANCHOR2
-	.word	.LC92
+	.word	.LC95
 	.fnend
 	.size	MicronReadRetrial, .-MicronReadRetrial
 	.align	1
@@ -9510,29 +9608,29 @@ HynixReadRetrial:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r10, r2
-	ldr	r5, .L1497
+	ldr	r5, .L1514
 	mov	r8, r3
 	mov	r7, r0
 	mov	fp, r1
 	adds	r3, r5, r0
 	mov	r6, #-1
 	ldr	r2, [r5, #1788]
-	ldrb	r4, [r3, #1914]	@ zero_extendqisi2
-	ldrb	r9, [r5, #1904]	@ zero_extendqisi2
+	ldrb	r4, [r3, #1918]	@ zero_extendqisi2
+	ldrb	r9, [r5, #1908]	@ zero_extendqisi2
 	ldrb	r2, [r2, #19]	@ zero_extendqisi2
 	cmp	r2, #7
 	it	eq
-	ldrbeq	r4, [r3, #1922]	@ zero_extendqisi2
+	ldrbeq	r4, [r3, #1926]	@ zero_extendqisi2
 	bl	NandcWaitFlashReady
 	mov	ip, #0
-.L1482:
+.L1499:
 	cmp	ip, r9
-	bcs	.L1486
+	bcs	.L1503
 	adds	r4, r4, #1
 	mov	r0, r7
-	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
+	ldrb	r1, [r5, #1907]	@ zero_extendqisi2
 	uxtb	r4, r4
-	ldr	r2, .L1497+4
+	ldr	r2, .L1514+4
 	cmp	r4, r9
 	it	cs
 	movcs	r4, #0
@@ -9544,48 +9642,48 @@ HynixReadRetrial:
 	mov	r1, fp
 	mov	r3, r8
 	bl	FlashReadRawPage
-	adds	r2, r0, #1
 	ldr	ip, [sp, #4]
-	beq	.L1484
+	adds	r2, r0, #1
+	beq	.L1501
 	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
 	cmp	r6, #-1
 	it	eq
 	moveq	r6, r0
 	add	r3, r3, r3, lsl #1
 	cmp	r0, r3, asr #2
-	bcc	.L1491
+	bcc	.L1508
 	mov	r8, #0
 	mov	r10, r8
-.L1484:
+.L1501:
 	add	ip, ip, #1
-	b	.L1482
-.L1491:
+	b	.L1499
+.L1508:
 	mov	r6, r0
-.L1486:
+.L1503:
 	ldr	r3, [r5, #1788]
 	add	r7, r7, r5
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
 	cmp	r3, #7
 	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
 	ite	eq
-	strbeq	r4, [r7, #1922]
-	strbne	r4, [r7, #1914]
+	strbeq	r4, [r7, #1926]
+	strbne	r4, [r7, #1918]
 	add	r3, r3, r3, lsl #1
 	cmp	r6, r3, asr #2
-	bcc	.L1490
+	bcc	.L1507
 	adds	r3, r6, #1
 	it	ne
 	movne	r6, #256
-.L1490:
+.L1507:
 	mov	r0, r6
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1498:
+.L1515:
 	.align	2
-.L1497:
+.L1514:
 	.word	.LANCHOR0
-	.word	.LANCHOR0+1906
+	.word	.LANCHOR0+1910
 	.fnend
 	.size	HynixReadRetrial, .-HynixReadRetrial
 	.align	1
@@ -9601,25 +9699,25 @@ FlashProgPage:
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #8
 	mov	r8, r3
-	ldr	r3, .L1502
+	ldr	r3, .L1519
 	mov	r5, r1
 	mov	r7, r2
 	mov	r4, r0
 	ldrb	r6, [r3, #265]	@ zero_extendqisi2
-	cbnz	r0, .L1500
-	ldr	r2, .L1502+4
+	cbnz	r0, .L1517
+	ldr	r2, .L1519+4
 	ldrb	r3, [r2, #1]	@ zero_extendqisi2
 	ldr	r1, [r2, #4]
 	muls	r1, r3, r1
 	cmp	r5, r1
-	bcs	.L1500
+	bcs	.L1517
 	ldrb	r3, [r2]	@ zero_extendqisi2
-	cbnz	r3, .L1501
+	cbnz	r3, .L1518
 	subs	r6, r6, #2
-	b	.L1500
-.L1501:
+	b	.L1517
+.L1518:
 	movs	r6, #4
-.L1500:
+.L1517:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
@@ -9629,9 +9727,9 @@ FlashProgPage:
 	bl	FlashProgFirstCmd
 	uxtb	r2, r6
 	mov	r3, r7
+	str	r8, [sp]
 	mov	r0, r4
 	movs	r1, #1
-	str	r8, [sp]
 	bl	NandcXferData
 	mov	r1, r5
 	mov	r0, r4
@@ -9648,9 +9746,9 @@ FlashProgPage:
 	add	sp, sp, #8
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1503:
+.L1520:
 	.align	2
-.L1502:
+.L1519:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.fnend
@@ -9667,70 +9765,70 @@ FlashSavePhyInfo:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r4, .L1513
-	ldr	r5, .L1513+4
-	ldr	r8, .L1513+12
-	ldr	r3, [r4, #3984]
+	ldr	r4, .L1530
+	ldr	r5, .L1530+4
+	ldr	r8, .L1530+12
+	ldr	r3, [r4, #3988]
 	mov	r9, r4
-	ldrb	r0, [r4, #4010]	@ zero_extendqisi2
+	ldrb	r0, [r4, #4014]	@ zero_extendqisi2
 	mov	r10, r5
-	str	r3, [r4, #3996]
+	str	r3, [r4, #4000]
 	bl	FlashBchSel
-	ldr	r0, [r4, #3984]
+	ldr	r0, [r4, #3988]
 	mov	r1, #2048
 	bl	__memzero
-	ldr	r3, [r4, #3996]
+	ldr	r3, [r4, #4000]
 	add	r1, r5, #1792
 	movs	r2, #32
 	str	r8, [r3]
-	ldr	r0, [r4, #3996]
+	ldr	r0, [r4, #4000]
 	ldrb	r3, [r5, #1616]	@ zero_extendqisi2
 	adds	r0, r0, #16
 	strh	r3, [r0, #-4]	@ movhi
 	ldrb	r3, [r5, #1]	@ zero_extendqisi2
 	strh	r3, [r0, #-2]	@ movhi
-	ldrb	r3, [r5, #2761]	@ zero_extendqisi2
+	ldrb	r3, [r5, #2772]	@ zero_extendqisi2
 	str	r3, [r0, #1060]
 	bl	ftl_memcpy
-	ldr	r0, [r4, #3996]
+	ldr	r0, [r4, #4000]
 	addw	r1, r5, #1620
 	movs	r2, #8
 	adds	r0, r0, #80
 	bl	ftl_memcpy
-	ldr	r0, [r4, #3996]
+	ldr	r0, [r4, #4000]
 	addw	r1, r5, #1628
 	movs	r2, #32
 	adds	r0, r0, #96
 	bl	ftl_memcpy
-	ldr	r0, [r4, #3996]
-	ldr	r1, .L1513+8
+	ldr	r0, [r4, #4000]
+	ldr	r1, .L1530+8
 	movs	r2, #32
 	adds	r0, r0, #160
 	bl	ftl_memcpy
-	ldr	r0, [r4, #3996]
+	ldr	r0, [r4, #4000]
 	add	r1, r5, #44
 	movs	r2, #32
 	adds	r0, r0, #192
 	bl	ftl_memcpy
-	ldr	r0, [r4, #3996]
+	ldr	r0, [r4, #4000]
 	mov	r2, #852
-	addw	r1, r5, #1902
+	addw	r1, r5, #1906
 	adds	r0, r0, #224
 	bl	ftl_memcpy
-	ldr	r6, [r4, #3996]
+	ldr	r6, [r4, #4000]
 	movw	r1, #2036
 	add	r0, r6, #12
 	bl	JSHash
 	mov	r3, #1592
 	str	r3, [r6, #4]
-	ldr	r3, [r4, #4012]
-	str	r3, [r4, #3996]
+	ldr	r3, [r4, #4016]
+	str	r3, [r4, #4000]
 	str	r0, [r6, #8]
 	movs	r0, #0
 	bl	flash_enter_slc_mode
 	movs	r6, #0
 	mov	r7, r6
-.L1507:
+.L1524:
 	ldr	r1, [r5, #4]
 	movs	r0, #0
 	mov	r2, r0
@@ -9738,53 +9836,53 @@ FlashSavePhyInfo:
 	bl	FlashEraseBlock
 	ldr	r1, [r5, #4]
 	movs	r0, #0
-	ldr	r2, [r4, #3984]
+	ldr	r2, [r4, #3988]
 	muls	r1, r7, r1
 	mov	r3, r0
 	bl	FlashProgPage
 	ldr	r1, [r5, #4]
 	movs	r0, #0
-	ldr	r2, [r4, #3984]
+	ldr	r2, [r4, #3988]
 	muls	r1, r7, r1
 	mov	r3, r0
 	adds	r1, r1, #1
 	bl	FlashProgPage
 	ldr	r1, [r5, #4]
 	movs	r0, #0
-	ldr	r2, [r4, #4012]
+	ldr	r2, [r4, #4016]
 	muls	r1, r7, r1
 	mov	r3, r0
 	bl	FlashReadRawPage
 	adds	r2, r7, #1
 	adds	r0, r0, #1
-	beq	.L1505
-	ldr	fp, [r9, #3996]
+	beq	.L1522
+	ldr	fp, [r9, #4000]
 	ldr	r3, [fp]
 	cmp	r3, r8
-	bne	.L1505
+	bne	.L1522
 	add	r0, fp, #12
 	movw	r1, #2036
 	str	r2, [sp, #4]
 	bl	JSHash
 	ldr	r3, [fp, #8]
-	cmp	r3, r0
 	ldr	r2, [sp, #4]
-	bne	.L1505
+	cmp	r3, r0
+	bne	.L1522
 	ldr	r3, [r10, #4]
 	cmp	r6, #1
-	str	r2, [r9, #4004]
+	str	r2, [r9, #4008]
 	mul	r3, r3, r7
-	str	r3, [r9, #4000]
-	beq	.L1508
+	str	r3, [r9, #4004]
+	beq	.L1525
 	movs	r6, #1
-.L1505:
+.L1522:
 	cmp	r2, #4
 	mov	r7, r2
-	bne	.L1507
-	b	.L1506
-.L1508:
+	bne	.L1524
+	b	.L1523
+.L1525:
 	movs	r6, #2
-.L1506:
+.L1523:
 	movs	r0, #0
 	bl	flash_exit_slc_mode
 	clz	r0, r6
@@ -9793,9 +9891,9 @@ FlashSavePhyInfo:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1514:
+.L1531:
 	.align	2
-.L1513:
+.L1530:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR1+256
@@ -9814,100 +9912,100 @@ FlashReadIdbDataRaw:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r0
-	ldr	r3, .L1528
+	ldr	r3, .L1545
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r4, .L1528+4
+	ldr	r4, .L1545+4
 	ldr	r0, [r3]	@ unaligned
-	ldr	r2, [r4, #2772]
-	ldr	r3, .L1528+8
+	ldr	r2, [r4, #2768]
+	ldr	r3, .L1545+8
 	str	r0, [sp, #12]	@ unaligned
 	cmp	r2, r3
 	ldrb	r10, [r4, #1892]	@ zero_extendqisi2
 	str	r3, [sp, #4]
-	bne	.L1516
+	bne	.L1533
 	movs	r0, #0
 	bl	flash_enter_slc_mode
-.L1516:
+.L1533:
 	mov	r0, r9
 	mov	r1, #2048
 	bl	__memzero
 	mov	r8, #-1
 	movs	r5, #2
-.L1517:
+.L1534:
 	ldrb	r3, [r4, #1]	@ zero_extendqisi2
 	cmp	r5, r3
-	bcs	.L1521
+	bcs	.L1538
 	movs	r7, #0
-.L1519:
+.L1536:
 	add	r3, sp, #12
-	ldr	r6, .L1528+12
+	ldr	r6, .L1545+12
 	ldrb	fp, [r7, r3]	@ zero_extendqisi2
 	mov	r0, fp
 	bl	FlashBchSel
 	ldr	r1, [r4, #4]
 	movs	r0, #0
-	ldr	r2, [r6, #3984]
+	ldr	r2, [r6, #3988]
 	muls	r1, r5, r1
 	mov	r3, r0
 	bl	FlashReadRawPage
 	adds	r0, r0, #1
-	bne	.L1518
+	bne	.L1535
 	adds	r7, r7, #1
 	cmp	r7, #4
-	bne	.L1519
-	b	.L1520
-.L1518:
-	ldr	r3, [r6, #3984]
-	ldr	r2, .L1528+16
+	bne	.L1536
+	b	.L1537
+.L1535:
+	ldr	r3, [r6, #3988]
+	ldr	r2, .L1545+16
 	ldr	r3, [r3]
 	cmp	r3, r2
-	bne	.L1520
+	bne	.L1537
 	mov	r1, fp
-	ldr	r0, .L1528+20
+	ldr	r0, .L1545+20
 	bl	printk
 	mov	r2, #2048
 	mov	r0, r9
-	ldr	r1, [r6, #3984]
+	ldr	r1, [r6, #3988]
 	bl	ftl_memcpy
-	ldr	r3, [r6, #3984]
-	ldr	r2, .L1528+4
+	ldr	r3, [r6, #3988]
+	ldr	r2, .L1545+4
 	ldr	r3, [r3, #512]
 	strb	r3, [r2, #1]
-	ldr	r3, [r6, #4004]
+	ldr	r3, [r6, #4008]
 	cmp	r3, r5
-	bls	.L1524
-	str	r5, [r6, #4004]
+	bls	.L1541
+	str	r5, [r6, #4008]
 	bl	FlashSavePhyInfo
 	mov	r8, #0
-.L1520:
+.L1537:
 	adds	r5, r5, #1
-	b	.L1517
-.L1524:
+	b	.L1534
+.L1541:
 	mov	r8, #0
-.L1521:
+.L1538:
 	mov	r0, r10
 	bl	FlashBchSel
-	ldr	r3, [r4, #2772]
+	ldr	r3, [r4, #2768]
 	ldr	r2, [sp, #4]
 	cmp	r3, r2
-	bne	.L1526
+	bne	.L1543
 	movs	r0, #0
 	bl	flash_exit_slc_mode
-.L1526:
+.L1543:
 	mov	r0, r8
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1529:
+.L1546:
 	.align	2
-.L1528:
+.L1545:
 	.word	.LANCHOR3+11
 	.word	.LANCHOR0
 	.word	1446522928
 	.word	.LANCHOR2
 	.word	-52655045
-	.word	.LC93
+	.word	.LC96
 	.fnend
 	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
 	.align	1
@@ -9926,39 +10024,39 @@ FlashInit:
 	sub	sp, sp, #28
 	mov	r0, #32768
 	bl	ftl_malloc
-	ldr	r5, .L1626
-	ldr	r4, .L1626+4
+	ldr	r5, .L1645
+	ldr	r4, .L1645+4
 	movs	r7, #0
 	add	r9, r4, #12
 	mov	r10, r4
-	str	r0, [r5, #3984]
+	str	r0, [r5, #3988]
 	mov	r0, #32768
 	bl	ftl_malloc
-	str	r0, [r5, #4012]
+	str	r0, [r5, #4016]
 	mov	r0, #4096
 	bl	ftl_malloc
-	str	r0, [r5, #4016]
+	str	r0, [r5, #4020]
 	mov	r0, #32768
 	bl	ftl_malloc
-	str	r0, [r5, #4020]
+	str	r0, [r5, #4024]
 	mov	r0, #4096
 	bl	ftl_malloc
 	movs	r3, #50
-	str	r7, [r5, #4004]
+	str	r7, [r5, #4008]
 	strb	r3, [r4, #1]
-	strb	r3, [r5, #4008]
+	strb	r3, [r5, #4012]
 	movs	r3, #128
-	strb	r7, [r4, #2761]
+	strb	r7, [r4, #2772]
 	str	r3, [r4, #4]
 	movs	r3, #60
-	str	r7, [r5, #3988]
+	str	r7, [r5, #3992]
 	strb	r7, [r4]
-	strb	r3, [r5, #4010]
-	str	r0, [r5, #4024]
+	strb	r3, [r5, #4014]
+	str	r0, [r5, #4028]
 	mov	r0, r6
 	bl	NandcInit
 	add	r6, r4, #1792
-.L1535:
+.L1552:
 	uxtb	fp, r7
 	mov	r0, fp
 	bl	FlashReset
@@ -9968,9 +10066,9 @@ FlashInit:
 	ldrb	r8, [r3, #4]	@ zero_extendqisi2
 	str	r2, [sp, #20]
 	bl	NandcFlashCs
+	ldr	r2, [sp, #20]
 	movs	r3, #144
 	movs	r0, #200
-	ldr	r2, [sp, #20]
 	add	r8, r2, r8, lsl #8
 	str	r3, [r8, #2056]
 	movs	r3, #0
@@ -9994,10 +10092,10 @@ FlashInit:
 	subs	r3, r2, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L1531
+	bhi	.L1548
 	ldrb	r1, [r6, #2]	@ zero_extendqisi2
 	ldrb	r3, [r6, #1]	@ zero_extendqisi2
-	ldr	r0, .L1626+8
+	ldr	r0, .L1645+8
 	str	r1, [sp]
 	ldrb	r1, [r6, #3]	@ zero_extendqisi2
 	str	r1, [sp, #4]
@@ -10007,17 +10105,17 @@ FlashInit:
 	str	r1, [sp, #12]
 	adds	r1, r7, #1
 	bl	printk
-.L1531:
-	cbnz	r7, .L1532
+.L1548:
+	cbnz	r7, .L1549
 	ldrb	r3, [r4, #1792]	@ zero_extendqisi2
 	subs	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, #253
-	bhi	.L1576
+	bhi	.L1595
 	ldrb	r3, [r10, #1793]	@ zero_extendqisi2
 	cmp	r3, #255
-	beq	.L1576
-.L1532:
+	beq	.L1595
+.L1549:
 	ldrb	r3, [r6]	@ zero_extendqisi2
 	adds	r7, r7, #1
 	adds	r6, r6, #8
@@ -10026,124 +10124,146 @@ FlashInit:
 	moveq	r3, #44
 	strbeq	r3, [r6, #-8]
 	cmp	r7, #4
-	bne	.L1535
+	bne	.L1552
 	ldrb	r3, [r4, #1792]	@ zero_extendqisi2
 	cmp	r3, #173
-	beq	.L1536
-	ldr	r3, .L1626+4
-	ldr	r0, [r3, #2764]
+	beq	.L1553
+	ldr	r3, .L1645+4
+	ldr	r0, [r3, #2776]
 	bl	NandcSetDdrMode
-.L1536:
-	ldr	r0, .L1626+12
+.L1553:
+	ldr	r6, .L1645+4
 	mov	r1, #852
+	addw	r0, r6, #1906
 	bl	__memzero
-	ldr	r3, .L1626+16
+	ldr	r3, .L1645+12
 	str	r3, [r4, #1788]
 	movs	r3, #0
 	strb	r3, [r4, #8]
 	ldrb	r3, [r4, #1793]	@ zero_extendqisi2
 	cmp	r3, #161
-	beq	.L1537
-	cmp	r3, #241
-	beq	.L1537
+	beq	.L1554
 	cmp	r3, #218
-	beq	.L1537
+	beq	.L1554
+	and	r2, r3, #223
+	cmp	r2, #209
+	beq	.L1554
 	cmp	r3, #220
-	bne	.L1538
-.L1537:
+	bne	.L1555
+	ldrb	r2, [r6, #1795]	@ zero_extendqisi2
+	cmp	r2, #149
+	bne	.L1555
+.L1554:
 	ldrb	r1, [r4, #1792]	@ zero_extendqisi2
 	movs	r2, #1
 	strb	r2, [r4]
 	movs	r2, #16
 	strb	r2, [r4, #1]
 	cmp	r1, #152
-	strb	r2, [r5, #4010]
-	ldr	r2, .L1626+20
-	strb	r1, [r2, #2969]
-	strb	r3, [r2, #2970]
-	bne	.L1539
-	ldr	r1, .L1626+4
+	strb	r2, [r5, #4014]
+	ldr	r2, .L1645+16
+	strb	r1, [r2, #3033]
+	strb	r3, [r2, #3034]
+	bne	.L1556
+	ldr	r1, .L1645+4
 	ldrsb	r1, [r1, #1796]
 	cmp	r1, #0
 	ittt	ge
 	movge	r0, #24
-	ldrge	r1, .L1626
-	strbge	r0, [r1, #4010]
-.L1539:
+	ldrge	r1, .L1645
+	strbge	r0, [r1, #4014]
+.L1556:
+	ldr	r1, .L1645+20
+	ldr	r0, [r4, #2768]
+	cmp	r0, r1
+	itt	eq
+	moveq	r1, #16
+	strbeq	r1, [r5, #4014]
 	cmp	r3, #218
-	bne	.L1540
+	bne	.L1558
 	mov	r1, #2048
-	b	.L1622
-.L1540:
+	b	.L1641
+.L1558:
 	cmp	r3, #220
-	bne	.L1541
+	bne	.L1559
 	mov	r1, #4096
-.L1622:
-	strh	r1, [r2, #2982]	@ movhi
-	strb	r3, [r2, #2970]
-.L1541:
-	ldr	r1, .L1626+24
+.L1641:
+	strh	r1, [r2, #3046]	@ movhi
+	strb	r3, [r2, #3034]
+.L1559:
+	ldr	r1, .L1645+24
 	movs	r2, #32
-	ldr	r0, .L1626+28
+	ldr	r0, .L1645+28
 	bl	ftl_memcpy
-	ldr	r0, .L1626+16
+	ldr	r0, .L1645+12
 	movs	r2, #32
-	addw	r1, r0, #2712
+	addw	r1, r0, #2776
 	bl	ftl_memcpy
-.L1538:
+.L1555:
 	ldrb	r3, [r4]	@ zero_extendqisi2
-	ldr	r6, .L1626+4
+	ldr	r6, .L1645+4
 	cmp	r3, #0
-	bne	.L1542
+	bne	.L1560
 	bl	FlashLoadPhyInfoInRam
-	cbnz	r0, .L1544
+	cbnz	r0, .L1562
 	ldr	r3, [r6, #1788]
 	ldrh	r3, [r3, #16]
 	lsrs	r3, r3, #8
 	lsls	r7, r3, #31
 	and	r0, r3, #7
-	strb	r0, [r6, #2760]
-	bmi	.L1544
+	strb	r0, [r6, #2764]
+	bmi	.L1562
 	movs	r3, #1
-	strb	r3, [r6, #2761]
+	strb	r3, [r6, #2772]
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r6, #2760]	@ zero_extendqisi2
+	ldrb	r0, [r6, #2764]	@ zero_extendqisi2
 	bl	NandcSetMode
-.L1544:
+.L1562:
 	ldr	r3, [r4, #1788]
-	ldr	r6, .L1626+4
+	ldr	r6, .L1645+4
 	ldrb	r3, [r3, #26]	@ zero_extendqisi2
 	strb	r3, [r4, #76]
 	bl	FlashLoadPhyInfo
 	cmp	r0, #0
-	beq	.L1542
-	ldr	r3, [r6, #2764]
-	cbz	r3, .L1547
+	beq	.L1560
+	ldr	r3, [r6, #2776]
+	cbz	r3, .L1565
 	movs	r0, #1
 	bl	FlashSetInterfaceMode
 	movs	r0, #1
-	b	.L1623
-.L1547:
-	ldrb	r0, [r6, #2760]	@ zero_extendqisi2
+	b	.L1642
+.L1646:
+	.align	2
+.L1645:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC97
+	.word	.LANCHOR1+256
+	.word	.LANCHOR1
+	.word	1446522928
+	.word	.LANCHOR1+2908
+	.word	.LANCHOR0+44
+.L1565:
+	ldrb	r0, [r6, #2764]	@ zero_extendqisi2
 	bl	FlashSetInterfaceMode
-	ldrb	r0, [r6, #2760]	@ zero_extendqisi2
-.L1623:
+	ldrb	r0, [r6, #2764]	@ zero_extendqisi2
+.L1642:
 	bl	NandcSetMode
 	bl	FlashLoadPhyInfo
 	cmp	r0, #0
-	beq	.L1542
+	beq	.L1560
 	movs	r0, #1
-	ldr	r6, .L1626+4
+	ldr	r6, .L1647
 	bl	FlashSetInterfaceMode
 	movs	r0, #1
 	bl	NandcSetMode
 	ldr	r3, [r4, #1788]
-	ldr	r0, .L1626+32
+	ldr	r0, .L1647+4
 	ldrh	r1, [r3, #14]
 	bl	printk
 	bl	FlashLoadPhyInfoInRam
 	adds	r1, r0, #1
-	beq	.L1533
+	beq	.L1550
 	bl	FlashDieInfoInit
 	ldr	r3, [r6, #1788]
 	ldrb	r0, [r3, #19]	@ zero_extendqisi2
@@ -10153,29 +10273,29 @@ FlashInit:
 	ldrb	r1, [r3, #9]	@ zero_extendqisi2
 	addw	r2, r2, #4095
 	cmp	r1, r2, asr #12
-	blt	.L1549
+	blt	.L1567
 	ldrh	r2, [r3, #14]
 	adds	r2, r2, #255
 	cmp	r1, r2, asr #8
-	bge	.L1550
-.L1549:
+	bge	.L1568
+.L1567:
 	ldrh	r2, [r3, #14]
 	bic	r2, r2, #255
 	strh	r2, [r3, #14]	@ movhi
-.L1550:
-	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+.L1568:
+	ldrb	r3, [r4, #2764]	@ zero_extendqisi2
 	tst	r3, #6
-	beq	.L1551
+	beq	.L1569
 	bl	FlashSavePhyInfo
 	movs	r0, #0
-	ldr	r1, [r5, #4000]
+	ldr	r1, [r5, #4004]
 	bl	FlashDdrParaScan
-.L1551:
+.L1569:
 	bl	FlashSavePhyInfo
-.L1542:
+.L1560:
 	ldr	r2, [r4, #1788]
-	ldr	r6, .L1626+4
-	ldr	r7, .L1626
+	ldr	r6, .L1647
+	ldr	r7, .L1647+8
 	ldrb	r3, [r2, #26]	@ zero_extendqisi2
 	ldrh	r0, [r2, #10]
 	ldrb	r8, [r2, #18]	@ zero_extendqisi2
@@ -10184,14 +10304,14 @@ FlashInit:
 	ubfx	r1, r3, #7, #1
 	strb	r1, [r4, #8]
 	ubfx	r1, r3, #3, #1
-	strb	r1, [r5, #4028]
+	strb	r1, [r5, #4032]
 	ubfx	r1, r3, #4, #1
 	ubfx	r3, r3, #8, #3
-	strb	r1, [r4, #2820]
-	strb	r3, [r4, #2760]
+	strb	r1, [r4, #2828]
+	strb	r3, [r4, #2764]
 	movs	r3, #0
 	ldrb	r1, [r2, #12]	@ zero_extendqisi2
-	str	r3, [r5, #3992]
+	str	r3, [r5, #3996]
 	bl	__aeabi_idiv
 	mov	r1, r0
 	mov	r0, r8
@@ -10200,172 +10320,163 @@ FlashInit:
 	ldr	r3, [r4, #1788]
 	ldrh	r2, [r3, #16]
 	lsls	r2, r2, #25
-	bpl	.L1553
+	bpl	.L1571
 	ldrb	r0, [r3, #19]	@ zero_extendqisi2
-	ldrb	r3, [r6, #1903]	@ zero_extendqisi2
-	strb	r0, [r6, #1900]
-	strb	r3, [r6, #1901]
-	ldrb	r3, [r6, #1904]	@ zero_extendqisi2
-	strb	r3, [r7, #4009]
+	ldrb	r3, [r6, #1907]	@ zero_extendqisi2
+	strb	r0, [r6, #1904]
+	strb	r3, [r6, #1905]
+	ldrb	r3, [r6, #1908]	@ zero_extendqisi2
+	strb	r3, [r7, #4013]
 	subs	r3, r0, #1
 	cmp	r3, #6
-	bhi	.L1554
-	ldr	r3, .L1626+36
-	str	r3, [r7, #3992]
+	bhi	.L1572
+	ldr	r3, .L1647+12
+	str	r3, [r7, #3996]
 	subs	r3, r0, #5
 	cmp	r3, #1
-	bhi	.L1555
+	bhi	.L1573
 	movs	r3, #1
-	str	r3, [r6, #2812]
-	b	.L1556
-.L1555:
+	str	r3, [r6, #2820]
+	b	.L1574
+.L1573:
 	cmp	r0, #7
-	beq	.L1577
-.L1556:
-	ldr	r6, .L1626+40
-	b	.L1557
-.L1627:
-	.align	2
-.L1626:
-	.word	.LANCHOR2
-	.word	.LANCHOR0
-	.word	.LC94
-	.word	.LANCHOR0+1902
-	.word	.LANCHOR1+256
-	.word	.LANCHOR1
-	.word	.LANCHOR1+2844
-	.word	.LANCHOR0+44
-	.word	.LC95
-	.word	HynixReadRetrial
-	.word	.LANCHOR0+1922
-.L1577:
-	addw	r6, r6, #1930
-.L1557:
+	beq	.L1596
+.L1574:
+	ldr	r6, .L1647+16
+	b	.L1575
+.L1596:
+	addw	r6, r6, #1934
+.L1575:
 	subs	r2, r6, #1
 	movs	r3, #0
 	adds	r6, r6, #31
-.L1558:
+.L1576:
 	ldrsb	r1, [r2, #1]!
 	cmp	r1, #0
 	it	eq
 	addeq	r3, r3, #1
 	cmp	r2, r6
-	bne	.L1558
+	bne	.L1576
 	cmp	r3, #27
-	bls	.L1553
+	bls	.L1571
 	bl	FlashGetReadRetryDefault
 	bl	FlashSavePhyInfo
-	b	.L1553
-.L1554:
+	b	.L1571
+.L1572:
 	sub	r3, r0, #17
 	cmp	r3, #2
-	bhi	.L1560
-	ldr	r3, .L1628
+	bhi	.L1578
+	ldr	r3, .L1647+20
 	cmp	r0, #19
-	str	r3, [r7, #3992]
+	str	r3, [r7, #3996]
 	ite	ne
 	movne	r3, #7
 	moveq	r3, #15
-	strb	r3, [r7, #4009]
-	b	.L1553
-.L1560:
+	strb	r3, [r7, #4013]
+	b	.L1571
+.L1578:
 	cmp	r0, #33
-	beq	.L1562
+	beq	.L1580
 	sub	r3, r0, #65
 	cmp	r3, #1
-	bhi	.L1563
-.L1562:
-	ldr	r3, .L1628+4
-	str	r3, [r5, #3992]
+	bhi	.L1581
+.L1580:
+	ldr	r3, .L1647+24
+	str	r3, [r5, #3996]
 	movs	r3, #4
-	strb	r3, [r4, #1901]
+	strb	r3, [r4, #1905]
 	movs	r3, #7
-	strb	r3, [r5, #4009]
-	b	.L1553
-.L1563:
+	strb	r3, [r5, #4013]
+	b	.L1571
+.L1581:
 	sub	r3, r0, #67
 	uxtb	r3, r3
 	cmp	r3, #1
-	bls	.L1564
+	bls	.L1582
 	sub	r2, r0, #34
 	cmp	r2, #1
-	bhi	.L1565
-.L1564:
-	ldr	r2, .L1628+4
+	bhi	.L1583
+.L1582:
+	ldr	r2, .L1647+24
 	cmp	r0, #35
-	str	r2, [r5, #3992]
-	beq	.L1566
+	str	r2, [r5, #3996]
+	beq	.L1584
 	cmp	r0, #68
-	beq	.L1566
-	ldr	r2, .L1628+8
+	beq	.L1584
+	ldr	r2, .L1647+8
 	movs	r1, #7
-	strb	r1, [r2, #4009]
-	b	.L1567
-.L1566:
+	strb	r1, [r2, #4013]
+	b	.L1585
+.L1584:
 	movs	r2, #17
-	strb	r2, [r5, #4009]
-.L1567:
+	strb	r2, [r5, #4013]
+.L1585:
 	cmp	r3, #1
 	ite	ls
 	movls	r3, #4
 	movhi	r3, #5
-	strb	r3, [r4, #1901]
-	b	.L1553
-.L1565:
+	strb	r3, [r4, #1905]
+	b	.L1571
+.L1583:
 	cmp	r0, #49
 	itt	eq
-	ldreq	r3, .L1628+12
-	streq	r3, [r7, #3992]
-.L1553:
-	ldr	r1, [r4, #2772]
-	ldr	r2, .L1628+16
-	ldr	r3, .L1628+20
-	cmp	r1, r2
-	bne	.L1569
-	ldrb	r2, [r3, #76]	@ zero_extendqisi2
-	cbz	r2, .L1569
-	ldr	r3, [r3, #1788]
-	movs	r2, #0
-	strb	r2, [r3, #18]
-.L1569:
-	ldrb	r2, [r4, #1792]	@ zero_extendqisi2
-	ldr	r3, .L1628+20
-	cmp	r2, #44
-	bne	.L1570
-	ldrb	r2, [r3, #2761]	@ zero_extendqisi2
-	cbz	r2, .L1570
+	ldreq	r3, .L1647+28
+	streq	r3, [r7, #3996]
+.L1571:
+	ldr	r1, [r4, #2768]
+	ldr	r3, .L1647+32
+	ldr	r2, .L1647
+	cmp	r1, r3
+	bne	.L1587
+	ldrb	r0, [r2, #76]	@ zero_extendqisi2
+	cbz	r0, .L1587
+	ldr	r2, [r2, #1788]
+	movs	r0, #0
+	strb	r0, [r2, #18]
+.L1587:
+	ldrb	r0, [r4, #1792]	@ zero_extendqisi2
+	ldr	r2, .L1647
+	cmp	r0, #44
+	bne	.L1588
+	ldrb	r0, [r2, #2772]	@ zero_extendqisi2
+	cbz	r0, .L1588
+	cmp	r1, r3
+	bne	.L1589
+	ldrb	r3, [r2, #76]	@ zero_extendqisi2
+	cbnz	r3, .L1588
+.L1589:
 	movs	r0, #1
-	movs	r2, #0
-	strb	r2, [r3, #2761]
+	movs	r3, #0
+	strb	r3, [r4, #2772]
 	bl	FlashSetInterfaceMode
 	movs	r0, #1
 	bl	NandcSetMode
-.L1570:
+.L1588:
 	movs	r0, #0
 	bl	flash_enter_slc_mode
-	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+	ldrb	r3, [r4, #2764]	@ zero_extendqisi2
 	tst	r3, #6
-	beq	.L1571
-	ldr	r2, .L1628+20
-	ldrb	r2, [r2, #2761]	@ zero_extendqisi2
-	cbnz	r2, .L1572
+	beq	.L1590
+	ldr	r2, .L1647
+	ldrb	r2, [r2, #2772]	@ zero_extendqisi2
+	cbnz	r2, .L1591
 	lsls	r3, r3, #31
-	bmi	.L1571
-.L1572:
+	bmi	.L1590
+.L1591:
 	movs	r0, #0
-	ldr	r1, [r5, #4000]
+	ldr	r1, [r5, #4004]
 	bl	FlashDdrParaScan
-.L1571:
+.L1590:
 	movs	r0, #0
 	mov	r8, #16
 	bl	flash_exit_slc_mode
 	ldr	r3, [r4, #1788]
-	ldr	r6, .L1628+20
+	ldr	r6, .L1647
 	ldrb	r0, [r3, #20]	@ zero_extendqisi2
 	bl	FlashBchSel
-	ldr	r0, .L1628+24
+	ldr	r0, .L1647+36
 	bl	FlashReadIdbDataRaw
-	ldr	r0, .L1628+28
+	ldr	r0, .L1647+40
 	strb	r8, [r4, #1]
 	bl	FlashTimingCfg
 	ldr	r5, [r4, #1788]
@@ -10400,7 +10511,7 @@ FlashInit:
 	ldrb	r1, [r4]	@ zero_extendqisi2
 	strh	r3, [r4, #1886]	@ movhi
 	cmp	r1, #1
-	bne	.L1574
+	bne	.L1593
 	lsls	r3, r3, #1
 	lsrs	r7, r7, #1
 	lsls	r2, r2, #1
@@ -10410,28 +10521,31 @@ FlashInit:
 	strh	r7, [r6, #1878]	@ movhi
 	strh	r2, [r6, #1884]	@ movhi
 	strh	r3, [r6, #1890]	@ movhi
-.L1574:
+.L1593:
 	ldrb	r0, [r5, #20]	@ zero_extendqisi2
 	bl	FlashBchSel
-	bl	FlashSuspend
+	bl	ftl_flash_suspend
 	movs	r0, #0
-	b	.L1533
-.L1576:
+	b	.L1550
+.L1595:
 	mvn	r0, #1
-.L1533:
+.L1550:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1629:
+.L1648:
 	.align	2
-.L1628:
+.L1647:
+	.word	.LANCHOR0
+	.word	.LC98
+	.word	.LANCHOR2
+	.word	HynixReadRetrial
+	.word	.LANCHOR0+1926
 	.word	MicronReadRetrial
 	.word	ToshibaReadRetrial
-	.word	.LANCHOR2
 	.word	SamsungReadRetrial
 	.word	1446522928
-	.word	.LANCHOR0
-	.word	.LANCHOR2+1932
+	.word	.LANCHOR2+1936
 	.word	150000
 	.fnend
 	.size	FlashInit, .-FlashInit
@@ -10447,58 +10561,58 @@ FlashPageProgMsbFFData:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r4, r2
-	ldr	r2, .L1645
+	ldr	r2, .L1664
 	mov	r8, r1
 	mov	r7, r0
 	ldr	r3, [r2, #1788]
 	mov	r5, r2
 	ldrb	r1, [r2, #76]	@ zero_extendqisi2
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
-	cbz	r1, .L1631
-	ldr	r1, [r2, #2772]
-	ldr	r2, .L1645+4
+	cbz	r1, .L1650
+	ldr	r1, [r2, #2768]
+	ldr	r2, .L1664+4
 	cmp	r1, r2
-	beq	.L1630
-.L1631:
+	beq	.L1649
+.L1650:
 	subs	r2, r3, #5
 	cmp	r2, #2
-	bls	.L1632
+	bls	.L1651
 	cmp	r3, #68
-	beq	.L1632
+	beq	.L1651
 	cmp	r3, #35
-	beq	.L1632
+	beq	.L1651
 	cmp	r3, #19
-	bne	.L1630
-.L1632:
-	ldr	r9, .L1645
+	bne	.L1649
+.L1651:
+	ldr	r9, .L1664
 	movw	r10, #65535
-	ldr	r6, .L1645+8
-.L1634:
+	ldr	r6, .L1664+8
+.L1653:
 	ldr	r3, [r5, #1788]
 	ldrh	r3, [r3, #10]
 	cmp	r3, r4
-	bls	.L1630
+	bls	.L1649
 	add	r3, r9, r4, lsl #1
 	ldrh	r3, [r3, #592]
 	cmp	r3, r10
-	bne	.L1630
+	bne	.L1649
 	movs	r1, #255
 	mov	r2, #32768
-	ldr	r0, [r6, #4012]
+	ldr	r0, [r6, #4016]
 	bl	memset
 	add	r1, r4, r8
 	adds	r4, r4, #1
 	mov	r0, r7
-	ldr	r2, [r6, #4012]
+	ldr	r2, [r6, #4016]
 	movs	r3, #0
 	bl	FlashProgPage
 	uxth	r4, r4
-	b	.L1634
-.L1630:
+	b	.L1653
+.L1649:
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L1646:
+.L1665:
 	.align	2
-.L1645:
+.L1664:
 	.word	.LANCHOR0
 	.word	1446522928
 	.word	.LANCHOR2
@@ -10513,11 +10627,11 @@ FlashReadSlc2KPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1677
+	ldr	r3, .L1696
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r6, #0
-	ldr	r7, .L1677+4
+	ldr	r7, .L1696+4
 	.pad #28
 	sub	sp, sp, #28
 	ldrb	r9, [r3, #265]	@ zero_extendqisi2
@@ -10525,9 +10639,9 @@ FlashReadSlc2KPages:
 	mov	fp, r0
 	str	r2, [sp, #8]
 	mov	r10, r7
-.L1648:
+.L1667:
 	cmp	r6, r8
-	beq	.L1676
+	beq	.L1695
 	rsb	r3, r6, r8
 	add	r2, sp, #20
 	mov	r0, fp
@@ -10536,22 +10650,22 @@ FlashReadSlc2KPages:
 	str	r3, [sp]
 	add	r3, sp, #16
 	bl	LogAddr2PhyAddr
-	ldrb	r2, [r7, #1616]	@ zero_extendqisi2
 	ldr	r3, [sp, #16]
+	ldrb	r2, [r7, #1616]	@ zero_extendqisi2
 	cmp	r3, r2
-	bcc	.L1649
+	bcc	.L1668
 	mov	r3, #-1
 	str	r3, [fp]
-	b	.L1650
-.L1649:
+	b	.L1669
+.L1668:
 	add	r3, r3, r7
 	ldrb	r4, [r3, #1620]	@ zero_extendqisi2
 	mov	r0, r4
 	bl	NandcWaitFlashReady
 	mov	r0, r4
 	bl	NandcFlashCs
-	mov	r0, r4
 	ldr	r1, [sp, #20]
+	mov	r0, r4
 	bl	FlashReadCmd
 	mov	r0, r4
 	bl	NandcWaitFlashReady
@@ -10562,20 +10676,20 @@ FlashReadSlc2KPages:
 	str	r3, [sp]
 	ldr	r3, [fp, #8]
 	bl	NandcXferData
-	ldr	r1, [r7, #4]
 	ldr	r3, [sp, #20]
+	ldr	r1, [r7, #4]
+	add	r1, r1, r3
 	mov	r5, r0
 	mov	r0, r4
-	add	r1, r1, r3
 	bl	FlashReadCmd
 	ldr	r3, [fp, #8]
-	cbz	r3, .L1651
+	cbz	r3, .L1670
 	add	r3, r3, #2048
-.L1651:
+.L1670:
 	ldr	r2, [fp, #12]
-	cbz	r2, .L1652
+	cbz	r2, .L1671
 	adds	r2, r2, #8
-.L1652:
+.L1671:
 	str	r2, [sp]
 	movs	r1, #0
 	mov	r2, r9
@@ -10591,63 +10705,63 @@ FlashReadSlc2KPages:
 	ldrb	r3, [r10, #1892]	@ zero_extendqisi2
 	add	r3, r3, r3, lsl #1
 	cmp	r5, r3, asr #2
-	bls	.L1653
+	bls	.L1672
 	adds	r0, r5, #1
 	it	ne
 	movne	r5, #256
 	str	r5, [fp]
-	b	.L1655
-.L1653:
+	b	.L1674
+.L1672:
 	movs	r3, #0
 	str	r3, [fp]
-.L1655:
+.L1674:
 	ldr	r3, [fp, #12]
-	cbz	r3, .L1656
+	cbz	r3, .L1675
 	ldr	r2, [r3, #8]
 	adds	r1, r2, #1
-	bne	.L1656
+	bne	.L1675
 	ldr	r3, [r3]
 	adds	r3, r3, #1
 	it	ne
 	strne	r2, [fp]
-.L1656:
+.L1675:
 	ldr	r3, [fp]
 	adds	r2, r3, #1
-	bne	.L1650
+	bne	.L1669
 	ldr	r1, [fp, #4]
-	ldr	r0, .L1677+8
+	ldr	r0, .L1696+8
 	ldrb	r2, [r10, #1892]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [fp, #8]
-	cbz	r1, .L1658
-	ldr	r0, .L1677+12
+	cbz	r1, .L1677
+	ldr	r0, .L1696+12
 	movs	r2, #4
 	movs	r3, #8
 	bl	rknand_print_hex
-.L1658:
+.L1677:
 	ldr	r1, [fp, #12]
-	cbz	r1, .L1650
+	cbz	r1, .L1669
 	movs	r2, #4
-	ldr	r0, .L1677+16
+	ldr	r0, .L1696+16
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1650:
+.L1669:
 	adds	r6, r6, #1
 	add	fp, fp, #36
-	b	.L1648
-.L1676:
+	b	.L1667
+.L1695:
 	movs	r0, #0
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1678:
+.L1697:
 	.align	2
-.L1677:
+.L1696:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
-	.word	.LC96
-	.word	.LC97
-	.word	.LC98
+	.word	.LC99
+	.word	.LC100
+	.word	.LC101
 	.fnend
 	.size	FlashReadSlc2KPages, .-FlashReadSlc2KPages
 	.align	1
@@ -10659,31 +10773,31 @@ FlashReadPages:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1778
+	ldr	r3, .L1797
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #52
 	sub	sp, sp, #52
 	ldrb	r3, [r3, #265]	@ zero_extendqisi2
 	mov	r10, r0
-	ldr	r5, .L1778+4
+	ldr	r5, .L1797+4
 	str	r1, [sp, #28]
 	str	r3, [sp, #24]
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	str	r2, [sp, #16]
 	str	r3, [sp, #32]
 	ldrb	r3, [r5]	@ zero_extendqisi2
-	cbz	r3, .L1722
+	cbz	r3, .L1741
 	bl	FlashReadSlc2KPages
-	b	.L1773
-.L1722:
+	b	.L1792
+.L1741:
 	mov	r8, r3
 	str	r3, [sp, #12]
-.L1680:
+.L1699:
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #28]
 	cmp	r3, r2
-	bcs	.L1775
+	bcs	.L1794
 	ldr	r3, [sp, #12]
 	mov	r9, #36
 	ldr	r2, [sp, #12]
@@ -10699,84 +10813,84 @@ FlashReadPages:
 	str	r3, [sp]
 	add	r3, sp, #40
 	bl	LogAddr2PhyAddr
-	ldrb	r2, [r5, #1616]	@ zero_extendqisi2
 	ldr	r3, [sp, #40]
-	mov	r6, r0
+	ldrb	r2, [r5, #1616]	@ zero_extendqisi2
 	cmp	r3, r2
-	bcc	.L1682
+	mov	r6, r0
+	bcc	.L1701
 	mov	r3, #-1
 	str	r3, [r10, r9]
-	b	.L1683
-.L1682:
+	b	.L1702
+.L1701:
 	add	r3, r3, r5
 	ldrb	r4, [r3, #1620]	@ zero_extendqisi2
-	ldr	r3, .L1778+8
+	ldr	r3, .L1797+8
 	mov	r0, r4
-	ldrb	r3, [r3, #4028]	@ zero_extendqisi2
+	ldrb	r3, [r3, #4032]	@ zero_extendqisi2
 	cmp	r3, #0
 	it	eq
 	moveq	r6, #0
 	bl	NandcWaitFlashReady
-	ldr	r3, .L1778+4
+	ldr	r3, .L1797+4
 	ldr	r3, [r3, #1788]
 	ldrb	r1, [r3, #19]	@ zero_extendqisi2
 	subs	r3, r1, #1
 	cmp	r3, #6
-	bhi	.L1685
+	bhi	.L1704
 	adds	r2, r5, r4
 	cmp	r1, #7
-	ldrb	r3, [r2, #1914]	@ zero_extendqisi2
+	ldrb	r3, [r2, #1918]	@ zero_extendqisi2
 	it	eq
-	ldrbeq	r3, [r2, #1922]	@ zero_extendqisi2
-	ldr	r2, .L1778+4
+	ldrbeq	r3, [r2, #1926]	@ zero_extendqisi2
+	ldr	r2, .L1797+4
 	add	r2, r2, r4
-	ldrb	r2, [r2, #2756]	@ zero_extendqisi2
+	ldrb	r2, [r2, #2760]	@ zero_extendqisi2
 	cmp	r2, r3
-	beq	.L1685
+	beq	.L1704
 	mov	r0, r4
-	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
-	ldr	r2, .L1778+12
+	ldrb	r1, [r5, #1907]	@ zero_extendqisi2
+	ldr	r2, .L1797+12
 	bl	HynixSetRRPara
-.L1685:
+.L1704:
 	mov	r0, r4
 	and	r3, fp, #-2147483648
 	str	r3, [sp, #20]
 	bl	NandcFlashCs
 	ldr	r3, [sp, #16]
 	cmp	r3, #1
-	beq	.L1687
+	beq	.L1706
 	ldr	r3, [sp, #20]
-	cbz	r3, .L1688
-.L1687:
-	ldr	r3, .L1778+4
+	cbz	r3, .L1707
+.L1706:
+	ldr	r3, .L1797+4
 	ldrb	r3, [r3, #76]	@ zero_extendqisi2
-	cbz	r3, .L1688
+	cbz	r3, .L1707
 	mov	r0, r4
 	bl	flash_enter_slc_mode
-.L1690:
+.L1709:
 	mov	fp, #0
-	b	.L1689
-.L1688:
+	b	.L1708
+.L1707:
 	mov	r0, r4
 	bl	flash_exit_slc_mode
-	b	.L1690
-.L1776:
+	b	.L1709
+.L1795:
 	cmp	r4, #255
-	beq	.L1723
-.L1691:
-	cbz	r6, .L1693
+	beq	.L1742
+.L1710:
+	cbz	r6, .L1712
 	ldr	r2, [r5, #4]
 	mov	r0, r4
 	add	r2, r2, r1
 	bl	FlashReadDpCmd
-.L1694:
+.L1713:
 	mov	r0, r4
 	bl	NandcWaitFlashReady
-	cbz	r6, .L1692
+	cbz	r6, .L1711
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	bl	FlashReadDpDataOutCmd
-.L1692:
+.L1711:
 	ldr	r3, [r7, #12]
 	mov	r0, r4
 	movs	r1, #0
@@ -10786,27 +10900,27 @@ FlashReadPages:
 	bl	NandcXferData
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
 	mov	ip, r0
-	cbz	r3, .L1725
+	cbz	r3, .L1744
 	cmp	r0, #-1
-	bne	.L1725
+	bne	.L1744
 	movs	r6, #0
 	strb	fp, [r5, #8]
-.L1689:
+.L1708:
 	ldr	r1, [sp, #44]
 	adds	r0, r1, #1
-	bne	.L1691
-	b	.L1776
-.L1693:
+	bne	.L1710
+	b	.L1795
+.L1712:
 	mov	r0, r4
 	bl	FlashReadCmd
-	b	.L1694
-.L1723:
+	b	.L1713
+.L1742:
 	movs	r6, #0
-	b	.L1692
-.L1725:
+	b	.L1711
+.L1744:
 	mov	fp, ip
-	cbz	r6, .L1696
-	ldr	r3, .L1778+4
+	cbz	r6, .L1715
+	ldr	r3, .L1797+4
 	mov	r0, r4
 	str	ip, [sp, #36]
 	ldr	r1, [r3, #4]
@@ -10822,12 +10936,12 @@ FlashReadPages:
 	ldr	r2, [sp, #24]
 	ldr	r3, [r3, #8]
 	bl	NandcXferData
-	cmp	r0, #-1
 	ldr	ip, [sp, #36]
+	cmp	r0, #-1
+	mov	r8, r0
 	it	eq
 	moveq	r6, #0
-	mov	r8, r0
-.L1696:
+.L1715:
 	mov	r0, r4
 	str	ip, [sp, #36]
 	bl	NandcFlashDeCs
@@ -10835,15 +10949,15 @@ FlashReadPages:
 	ldrb	r3, [sp, #32]	@ zero_extendqisi2
 	cmp	ip, #-1
 	strb	r3, [r5, #8]
-	bne	.L1703
-	ldrb	r3, [r5, #2761]	@ zero_extendqisi2
-	cbnz	r3, .L1698
-.L1702:
-	ldr	r3, .L1778+8
-	ldr	r6, [r3, #3992]
-	cbnz	r6, .L1699
-	b	.L1777
-.L1698:
+	bne	.L1722
+	ldrb	r3, [r5, #2772]	@ zero_extendqisi2
+	cbnz	r3, .L1717
+.L1721:
+	ldr	r3, .L1797+8
+	ldr	r6, [r3, #3996]
+	cbnz	r6, .L1718
+	b	.L1796
+.L1717:
 	ldr	r3, [r5, #1828]
 	mov	r0, r4
 	ldr	r1, [sp, #44]
@@ -10855,17 +10969,17 @@ FlashReadPages:
 	bl	FlashDdrTunningRead
 	cmp	r0, #-1
 	mov	fp, r0
-	beq	.L1701
+	beq	.L1720
 	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
 	cmp	r0, r3, lsr #1
-	bls	.L1727
-.L1701:
+	bls	.L1746
+.L1720:
 	ubfx	r0, r6, #8, #8
 	bl	NandcSetDdrPara
 	cmp	fp, #-1
-	beq	.L1702
-	b	.L1727
-.L1699:
+	beq	.L1721
+	b	.L1746
+.L1718:
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	ldr	r2, [r7, #8]
@@ -10873,18 +10987,18 @@ FlashReadPages:
 	blx	r6
 	cmp	r0, #-1
 	mov	fp, r0
-	bne	.L1704
+	bne	.L1723
 	ldr	r3, [r5, #1788]
 	ldrb	r3, [r3, #19]	@ zero_extendqisi2
 	subs	r3, r3, #1
 	cmp	r3, #6
-	bhi	.L1705
+	bhi	.L1724
 	mov	r0, r4
-	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
-	ldr	r2, .L1778+12
+	ldrb	r1, [r5, #1907]	@ zero_extendqisi2
+	ldr	r2, .L1797+12
 	movs	r3, #0
 	bl	HynixSetRRPara
-.L1705:
+.L1724:
 	ldr	r1, [sp, #44]
 	mov	r0, r4
 	ldr	r2, [r7, #8]
@@ -10893,141 +11007,141 @@ FlashReadPages:
 	ldr	r1, [r7, #4]
 	ldrb	r2, [r5, #1892]	@ zero_extendqisi2
 	mov	fp, r0
-	ldr	r0, .L1778+16
+	ldr	r0, .L1797+16
 	mov	r3, fp
 	bl	printk
 	cmp	fp, #-1
-	bne	.L1704
+	bne	.L1723
 	ldrb	r6, [r5, #76]	@ zero_extendqisi2
-	cbz	r6, .L1706
+	cbz	r6, .L1725
 	ldr	r3, [sp, #16]
 	mov	r0, r4
 	cmp	r3, #1
-	beq	.L1707
+	beq	.L1726
 	ldr	r3, [sp, #20]
-	cbz	r3, .L1708
-.L1707:
+	cbz	r3, .L1727
+.L1726:
 	bl	flash_enter_slc_mode
-	b	.L1709
-.L1708:
+	b	.L1728
+.L1727:
 	bl	flash_exit_slc_mode
-.L1709:
-	ldr	r3, .L1778+8
+.L1728:
+	ldr	r3, .L1797+8
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	ldr	r2, [r7, #8]
-	ldr	r6, [r3, #3992]
+	ldr	r6, [r3, #3996]
 	ldr	r3, [r7, #12]
 	blx	r6
 	movs	r6, #0
 	mov	fp, r0
-	b	.L1710
-.L1777:
+	b	.L1729
+.L1796:
 	mov	r0, r4
 	ldr	r1, [sp, #44]
 	ldr	r2, [r7, #8]
 	ldr	r3, [r7, #12]
 	bl	FlashReadRawPage
 	mov	fp, r0
-	b	.L1710
-.L1727:
+	b	.L1729
+.L1746:
 	movs	r6, #0
-.L1703:
+.L1722:
 	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
 	add	r3, r3, r3, lsl #1
 	cmp	fp, r3, asr #2
-	bls	.L1712
-	ldr	r3, .L1778+8
-	ldr	r3, [r3, #3992]
-	cbz	r3, .L1729
-.L1710:
-	cmp	fp, #-1
-	beq	.L1706
-	b	.L1712
+	bls	.L1731
+	ldr	r3, .L1797+8
+	ldr	r3, [r3, #3996]
+	cbz	r3, .L1748
 .L1729:
+	cmp	fp, #-1
+	beq	.L1725
+	b	.L1731
+.L1748:
 	mov	fp, #256
-.L1706:
+.L1725:
 	str	fp, [r10, r9]
-	b	.L1713
-.L1779:
+	b	.L1732
+.L1798:
 	.align	2
-.L1778:
+.L1797:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR0+1906
-	.word	.LC99
-.L1704:
+	.word	.LANCHOR0+1910
+	.word	.LC102
+.L1723:
 	movs	r6, #0
-.L1712:
+.L1731:
 	cmp	fp, #256
-	beq	.L1706
+	beq	.L1725
 	movs	r3, #0
 	str	r3, [r10, r9]
-.L1713:
+.L1732:
 	ldr	r3, [r10, r9]
 	adds	r2, r3, #1
-	bne	.L1715
+	bne	.L1734
 	ldr	r1, [r7, #4]
-	ldr	r0, .L1780
+	ldr	r0, .L1799
 	ldrb	r2, [r5, #1892]	@ zero_extendqisi2
 	bl	printk
 	ldr	r1, [r7, #12]
-	cbz	r1, .L1715
+	cbz	r1, .L1734
 	movs	r2, #4
-	ldr	r0, .L1780+4
+	ldr	r0, .L1799+4
 	mov	r3, r2
 	bl	rknand_print_hex
-.L1715:
-	cbz	r6, .L1717
+.L1734:
+	cbz	r6, .L1736
 	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
 	add	r3, r3, r3, lsl #1
 	cmp	r8, r3, asr #2
-	bls	.L1718
-	ldr	r3, .L1780+8
-	ldr	r3, [r3, #3992]
+	bls	.L1737
+	ldr	r3, .L1799+8
+	ldr	r3, [r3, #3996]
 	cmp	r3, #0
 	it	eq
 	moveq	r8, #256
-.L1718:
+.L1737:
 	add	r9, r9, #36
 	cmp	r8, #-1
 	str	r8, [r10, r9]
-	beq	.L1717
+	beq	.L1736
 	cmp	r8, #256
 	itt	ne
 	movne	r3, #0
 	strne	r3, [r10, r9]
-.L1717:
+.L1736:
 	ldr	r3, [sp, #12]
 	add	r3, r3, r6
 	str	r3, [sp, #12]
 	ldr	r3, [sp, #16]
 	cmp	r3, #1
-	beq	.L1719
+	beq	.L1738
 	ldr	r3, [sp, #20]
-	cbz	r3, .L1683
-.L1719:
+	cbz	r3, .L1702
+.L1738:
 	ldrb	r3, [r5, #76]	@ zero_extendqisi2
-	cbz	r3, .L1683
+	cbz	r3, .L1702
 	mov	r0, r4
 	bl	flash_exit_slc_mode
-.L1683:
+.L1702:
 	ldr	r3, [sp, #12]
 	adds	r3, r3, #1
 	str	r3, [sp, #12]
-	b	.L1680
-.L1775:
+	b	.L1699
+.L1794:
 	movs	r0, #0
-.L1773:
+.L1792:
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1781:
+.L1800:
 	.align	2
-.L1780:
-	.word	.LC96
-	.word	.LC98
+.L1799:
+	.word	.LC99
+	.word	.LC101
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashReadPages, .-FlashReadPages
@@ -11043,36 +11157,36 @@ FlashLoadFactorBbt:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r1, #16
-	ldr	r7, .L1794
+	ldr	r7, .L1813
 	.pad #52
 	sub	sp, sp, #52
-	ldr	r4, .L1794+4
+	ldr	r4, .L1813+4
 	movs	r5, #0
 	mov	fp, #-1
 	ldrh	r3, [r7, #1878]
-	add	r0, r4, #4032
+	addw	r0, r4, #4036
 	ldrh	r6, [r7, #1876]
 	mov	r10, r5
 	mov	r8, r7
 	mov	r9, r4
 	smulbb	r6, r6, r3
 	bl	__memzero
-	ldr	r3, [r4, #4016]
-	uxth	r6, r6
+	ldr	r3, [r4, #4020]
 	str	r5, [sp, #20]
 	str	r3, [sp, #24]
-.L1783:
+	uxth	r6, r6
+.L1802:
 	ldrb	r3, [r8, #1616]	@ zero_extendqisi2
 	uxtb	r7, r5
 	cmp	r3, r7
-	bls	.L1793
+	bls	.L1812
 	mul	ip, r6, r7
 	subs	r4, r6, #1
 	sub	r3, r6, #12
 	uxth	r4, r4
-.L1784:
+.L1803:
 	cmp	r4, r3
-	ble	.L1786
+	ble	.L1805
 	add	r2, ip, r4
 	movs	r1, #1
 	add	r0, sp, #12
@@ -11086,44 +11200,44 @@ FlashLoadFactorBbt:
 	ldr	ip, [sp]
 	adds	r2, r2, #1
 	ldr	r3, [sp, #4]
-	beq	.L1785
-	ldr	r2, [r9, #4016]
+	beq	.L1804
+	ldr	r2, [r9, #4020]
 	ldrh	r1, [r2]
 	movw	r2, #61664
 	cmp	r1, r2
-	bne	.L1785
+	bne	.L1804
 	mov	r1, r7
-	ldr	r0, .L1794+8
+	ldr	r0, .L1813+8
 	mov	r2, r4
 	add	r10, r10, #1
 	bl	printk
-	ldr	r3, .L1794+4
+	ldr	r3, .L1813+4
 	uxth	r10, r10
 	add	r7, r3, r7, lsl #1
-	strh	r4, [r7, #4032]	@ movhi
-	b	.L1786
-.L1785:
+	strh	r4, [r7, #4036]	@ movhi
+	b	.L1805
+.L1804:
 	subs	r4, r4, #1
 	uxth	r4, r4
-	b	.L1784
-.L1786:
+	b	.L1803
+.L1805:
 	ldrb	r3, [r8, #1616]	@ zero_extendqisi2
 	adds	r5, r5, #1
 	cmp	r3, r10
 	it	eq
 	moveq	fp, #0
-	b	.L1783
-.L1793:
+	b	.L1802
+.L1812:
 	mov	r0, fp
 	add	sp, sp, #52
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1795:
+.L1814:
 	.align	2
-.L1794:
+.L1813:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC100
+	.word	.LC103
 	.fnend
 	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
 	.align	1
@@ -11139,20 +11253,20 @@ FlashProgSlc2KPages:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #68
 	sub	sp, sp, #68
-	ldr	r8, .L1826+20
+	ldr	r8, .L1845+20
 	movs	r7, #0
 	str	r3, [sp, #12]
 	mov	r6, r1
-	ldr	r3, .L1826
+	ldr	r3, .L1845
 	mov	r9, r2
 	mov	r4, r0
 	mov	r10, r0
 	mov	fp, r8
 	ldrb	r3, [r3, #265]	@ zero_extendqisi2
 	str	r3, [sp, #8]
-.L1797:
+.L1816:
 	cmp	r7, r6
-	beq	.L1825
+	beq	.L1844
 	subs	r3, r6, r7
 	add	r2, sp, #20
 	mov	r0, r10
@@ -11161,14 +11275,14 @@ FlashProgSlc2KPages:
 	str	r3, [sp]
 	add	r3, sp, #24
 	bl	LogAddr2PhyAddr
-	ldrb	r2, [r8, #1616]	@ zero_extendqisi2
 	ldr	r3, [sp, #24]
+	ldrb	r2, [r8, #1616]	@ zero_extendqisi2
 	cmp	r3, r2
-	bcc	.L1798
+	bcc	.L1817
 	mov	r3, #-1
 	str	r3, [r10]
-	b	.L1799
-.L1798:
+	b	.L1818
+.L1817:
 	add	r3, r3, r8
 	ldrb	r5, [r3, #1620]	@ zero_extendqisi2
 	mov	r0, r5
@@ -11179,43 +11293,43 @@ FlashProgSlc2KPages:
 	ldr	r1, [sp, #20]
 	bl	FlashProgFirstCmd
 	ldr	r3, [r10, #12]
+	ldr	r2, [sp, #8]
 	movs	r1, #1
 	mov	r0, r5
-	ldr	r2, [sp, #8]
 	str	r3, [sp]
 	ldr	r3, [r10, #8]
 	bl	NandcXferData
-	mov	r0, r5
 	ldr	r1, [sp, #20]
+	mov	r0, r5
 	bl	FlashProgSecondCmd
 	mov	r0, r5
 	bl	NandcWaitFlashReady
-	mov	r0, r5
 	ldr	r1, [sp, #20]
+	mov	r0, r5
 	bl	FlashReadStatus
 	ldr	r3, [sp, #20]
 	sbfx	r0, r0, #0, #1
 	str	r0, [r10]
-	mov	r0, r5
 	ldr	r1, [r8, #4]
+	mov	r0, r5
 	add	r1, r1, r3
 	bl	FlashProgFirstCmd
 	ldr	r3, [r10, #8]
-	cbz	r3, .L1800
+	cbz	r3, .L1819
 	add	r3, r3, #2048
-.L1800:
+.L1819:
 	ldr	r2, [r10, #12]
-	cbz	r2, .L1801
+	cbz	r2, .L1820
 	adds	r2, r2, #8
-.L1801:
+.L1820:
 	str	r2, [sp]
 	movs	r1, #1
 	ldr	r2, [sp, #8]
 	mov	r0, r5
 	bl	NandcXferData
+	ldr	r3, [sp, #20]
 	ldr	r1, [fp, #4]
 	mov	r0, r5
-	ldr	r3, [sp, #20]
 	add	r1, r1, r3
 	bl	FlashProgSecondCmd
 	mov	r0, r5
@@ -11229,28 +11343,28 @@ FlashProgSlc2KPages:
 	movmi	r3, #-1
 	strmi	r3, [r10]
 	bl	NandcFlashDeCs
-.L1799:
+.L1818:
 	adds	r7, r7, #1
 	add	r10, r10, #36
-	b	.L1797
-.L1825:
+	b	.L1816
+.L1844:
 	ldr	r3, [sp, #12]
 	cmp	r3, #0
-	beq	.L1824
-	ldr	r8, .L1826+24
+	beq	.L1843
+	ldr	r8, .L1845+24
 	mov	r10, #0
 	mov	fp, r8
-.L1804:
+.L1823:
 	cmp	r10, r6
-	beq	.L1824
+	beq	.L1843
 	ldr	r3, [r4]
 	adds	r3, r3, #1
-	bne	.L1805
+	bne	.L1824
 	ldr	r1, [r4, #4]
-	ldr	r0, .L1826+4
+	ldr	r0, .L1845+4
 	bl	printk
-	b	.L1806
-.L1805:
+	b	.L1825
+.L1824:
 	rsb	r3, r10, r6
 	mov	r1, r9
 	add	r2, sp, #20
@@ -11260,13 +11374,13 @@ FlashProgSlc2KPages:
 	add	r3, sp, #24
 	mov	r7, r4
 	bl	LogAddr2PhyAddr
-	ldr	r2, [r8, #4020]
+	ldr	r2, [r8, #4024]
 	movs	r3, #0
+	add	r5, sp, #28
 	str	r3, [r2]
-	ldr	r2, [r8, #4024]
+	ldr	r2, [r8, #4028]
 	str	r3, [r2]
 	ldmia	r7!, {r0, r1, r2, r3}
-	add	r5, sp, #28
 	stmia	r5!, {r0, r1, r2, r3}
 	ldmia	r7!, {r0, r1, r2, r3}
 	stmia	r5!, {r0, r1, r2, r3}
@@ -11275,61 +11389,61 @@ FlashProgSlc2KPages:
 	movs	r1, #1
 	mov	r2, r9
 	str	r3, [r5]
-	ldr	r3, [r8, #4020]
-	str	r3, [sp, #36]
 	ldr	r3, [r8, #4024]
+	str	r3, [sp, #36]
+	ldr	r3, [r8, #4028]
 	str	r3, [sp, #40]
 	bl	FlashReadPages
 	ldr	r5, [sp, #28]
 	adds	r3, r5, #1
-	bne	.L1807
-	ldr	r0, .L1826+8
+	bne	.L1826
+	ldr	r0, .L1845+8
 	ldr	r1, [r4, #4]
 	bl	printk
 	str	r5, [r4]
-.L1807:
+.L1826:
 	ldr	r3, [r4, #12]
-	cbz	r3, .L1808
+	cbz	r3, .L1827
 	ldr	r2, [r3]
-	ldr	r3, [fp, #4024]
+	ldr	r3, [fp, #4028]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1808
-	ldr	r0, .L1826+12
+	beq	.L1827
+	ldr	r0, .L1845+12
 	ldr	r1, [r4, #4]
 	bl	printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L1808:
+.L1827:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L1806
+	cbz	r3, .L1825
 	ldr	r2, [r3]
-	ldr	r3, [fp, #4020]
+	ldr	r3, [fp, #4024]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L1806
-	ldr	r0, .L1826+16
+	beq	.L1825
+	ldr	r0, .L1845+16
 	ldr	r1, [r4, #4]
 	bl	printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L1806:
+.L1825:
 	add	r10, r10, #1
 	adds	r4, r4, #36
-	b	.L1804
-.L1824:
+	b	.L1823
+.L1843:
 	movs	r0, #0
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1827:
+.L1846:
 	.align	2
-.L1826:
+.L1845:
 	.word	.LANCHOR1
-	.word	.LC101
-	.word	.LC102
-	.word	.LC103
 	.word	.LC104
+	.word	.LC105
+	.word	.LC106
+	.word	.LC107
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -11346,60 +11460,60 @@ FtlLoadFactoryBbt:
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r6, #0
-	ldr	r5, .L1839
-	ldr	r7, .L1839+4
-	ldr	r3, [r5, #756]
-	subw	r8, r7, #2978
-	ldr	r9, [r5, #1796]
+	ldr	r5, .L1858
+	ldr	r7, .L1858+4
+	ldr	r3, [r5, #1776]
+	subw	r8, r7, #2982
+	ldr	r9, [r5, #1800]
 	mov	r10, r8
-	str	r3, [r5, #4056]
-	str	r9, [r5, #4060]
-.L1829:
-	ldrh	r3, [r8, #2850]
+	str	r3, [r5, #4060]
+	str	r9, [r5, #4064]
+.L1848:
+	ldrh	r3, [r8, #2862]
 	cmp	r6, r3
-	bcs	.L1838
-	ldrh	r4, [r8, #2894]
+	bcs	.L1857
+	ldrh	r4, [r8, #2906]
 	movw	fp, #61664
 	movw	r3, #65535
 	strh	r3, [r7, #2]!	@ movhi
 	subs	r4, r4, #1
 	uxth	r4, r4
-.L1830:
-	ldrh	r3, [r10, #2894]
+.L1849:
+	ldrh	r3, [r10, #2906]
 	sub	r2, r3, #16
 	cmp	r4, r2
-	ble	.L1832
+	ble	.L1851
 	mla	r3, r3, r6, r4
 	movs	r1, #1
-	ldr	r0, .L1839+8
+	ldr	r0, .L1858+8
 	mov	r2, r1
 	lsls	r3, r3, #10
-	str	r3, [r5, #4052]
+	str	r3, [r5, #4056]
 	bl	FlashReadPages
-	ldr	r3, [r5, #4048]
+	ldr	r3, [r5, #4052]
 	adds	r3, r3, #1
-	beq	.L1831
+	beq	.L1850
 	ldrh	r3, [r9]
 	cmp	r3, fp
-	bne	.L1831
+	bne	.L1850
 	strh	r4, [r7]	@ movhi
-	b	.L1832
-.L1831:
+	b	.L1851
+.L1850:
 	subs	r4, r4, #1
 	uxth	r4, r4
-	b	.L1830
-.L1832:
+	b	.L1849
+.L1851:
 	adds	r6, r6, #1
-	b	.L1829
-.L1838:
+	b	.L1848
+.L1857:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1840:
+.L1859:
 	.align	2
-.L1839:
+.L1858:
 	.word	.LANCHOR2
-	.word	.LANCHOR0+2978
-	.word	.LANCHOR2+4048
+	.word	.LANCHOR0+2982
+	.word	.LANCHOR2+4052
 	.fnend
 	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
 	.align	1
@@ -11411,17 +11525,17 @@ FtlGetLastWrittenPage:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L1852
+	ldr	r3, .L1871
 	cmp	r1, #1
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	.pad #104
 	sub	sp, sp, #104
 	it	eq
-	ldrheq	r4, [r3, #2900]
+	ldrheq	r4, [r3, #2912]
 	mov	r8, r1
 	it	ne
-	ldrhne	r4, [r3, #2898]
+	ldrhne	r4, [r3, #2910]
 	lsls	r6, r0, #10
 	add	r3, sp, #40
 	add	r0, sp, #4
@@ -11438,12 +11552,12 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #40]
 	adds	r3, r3, #1
-	bne	.L1844
-.L1845:
+	bne	.L1863
+.L1864:
 	sxth	r3, r7
 	sxth	r4, r5
 	cmp	r3, r4
-	bgt	.L1844
+	bgt	.L1863
 	add	r4, r4, r3
 	add	r0, sp, #4
 	movs	r1, #1
@@ -11456,28 +11570,28 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	r3, [sp, #40]
 	adds	r3, r3, #1
-	bne	.L1846
+	bne	.L1865
 	ldr	r3, [sp, #44]
 	adds	r3, r3, #1
-	bne	.L1846
+	bne	.L1865
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
-	beq	.L1846
+	beq	.L1865
 	subs	r4, r4, #1
 	uxth	r5, r4
-	b	.L1845
-.L1846:
+	b	.L1864
+.L1865:
 	adds	r3, r4, #1
 	uxth	r7, r3
-	b	.L1845
-.L1844:
+	b	.L1864
+.L1863:
 	sxth	r0, r5
 	add	sp, sp, #104
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1853:
+.L1872:
 	.align	2
-.L1852:
+.L1871:
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
@@ -11492,167 +11606,167 @@ FtlLoadBbt:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
-	movs	r3, #0
-	ldr	r4, .L1883
-	ldr	r5, .L1883+4
-	ldr	r7, [r4, #1796]
+	ldr	r4, .L1902
+	ldr	r7, .L1902+4
+	ldr	r3, [r4, #1776]
 	mov	r8, r4
-	str	r3, [r4, #4056]
-	str	r7, [r4, #4060]
+	ldr	r6, [r4, #1800]
+	str	r3, [r4, #4060]
+	str	r6, [r4, #4064]
 	bl	FtlBbtMemInit
-	ldrh	r6, [r5, #2894]
-	subs	r6, r6, #1
-	uxth	r6, r6
-.L1855:
-	ldrh	r3, [r5, #2894]
+	ldrh	r5, [r7, #2906]
+	subs	r5, r5, #1
+	uxth	r5, r5
+.L1874:
+	ldrh	r3, [r7, #2906]
 	subs	r3, r3, #48
-	cmp	r6, r3
-	ble	.L1858
+	cmp	r5, r3
+	ble	.L1877
 	movs	r1, #1
-	ldr	r0, .L1883+8
-	lsls	r3, r6, #10
-	str	r3, [r4, #4052]
+	ldr	r0, .L1902+8
+	lsls	r3, r5, #10
+	str	r3, [r4, #4056]
 	mov	r2, r1
 	bl	FlashReadPages
-	ldr	r3, [r4, #4048]
+	ldr	r3, [r4, #4052]
 	adds	r3, r3, #1
-	bne	.L1856
+	bne	.L1875
 	movs	r1, #1
-	ldr	r3, [r8, #4052]
-	ldr	r0, .L1883+8
+	ldr	r3, [r8, #4056]
+	ldr	r0, .L1902+8
 	mov	r2, r1
 	adds	r3, r3, #1
-	str	r3, [r8, #4052]
+	str	r3, [r8, #4056]
 	bl	FlashReadPages
-.L1856:
-	ldr	r3, [r4, #4048]
+.L1875:
+	ldr	r3, [r4, #4052]
 	adds	r3, r3, #1
-	beq	.L1857
-	ldrh	r2, [r7]
+	beq	.L1876
+	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1857
-	ldr	r3, [r7, #4]
-	strh	r6, [r5, #2968]	@ movhi
-	str	r3, [r5, #2976]
-	ldrh	r3, [r7, #8]
-	strh	r3, [r5, #2972]	@ movhi
-	b	.L1858
-.L1857:
-	subs	r6, r6, #1
-	uxth	r6, r6
-	b	.L1855
-.L1858:
-	ldrh	r3, [r5, #2968]
-	movw	r2, #65535
-	ldr	r6, .L1883+4
+	bne	.L1876
+	ldr	r3, [r6, #4]
+	strh	r5, [r7, #2972]	@ movhi
+	str	r3, [r7, #2980]
+	ldrh	r3, [r6, #8]
+	strh	r3, [r7, #2976]	@ movhi
+	b	.L1877
+.L1876:
+	subs	r5, r5, #1
+	uxth	r5, r5
+	b	.L1874
+.L1877:
+	ldrh	r3, [r7, #2972]
+	movw	r2, #65535
+	ldr	r5, .L1902+4
 	cmp	r3, r2
-	beq	.L1872
-	ldrh	r3, [r6, #2972]
+	beq	.L1891
+	ldrh	r3, [r5, #2976]
 	cmp	r3, r2
-	beq	.L1862
+	beq	.L1881
 	movs	r1, #1
-	ldr	r0, .L1883+8
+	ldr	r0, .L1902+8
 	lsls	r3, r3, #10
-	str	r3, [r4, #4052]
+	str	r3, [r4, #4056]
 	mov	r2, r1
 	bl	FlashReadPages
-	ldr	r3, [r4, #4048]
+	ldr	r3, [r4, #4052]
 	adds	r3, r3, #1
-	beq	.L1862
-	ldrh	r2, [r7]
+	beq	.L1881
+	ldrh	r2, [r6]
 	movw	r3, #61649
 	cmp	r2, r3
-	bne	.L1862
-	ldr	r3, [r7, #4]
-	ldr	r2, [r6, #2976]
+	bne	.L1881
+	ldr	r3, [r6, #4]
+	ldr	r2, [r5, #2980]
 	cmp	r3, r2
 	itttt	hi
-	strhi	r3, [r6, #2976]
-	ldrhhi	r2, [r6, #2972]
-	ldrhhi	r3, [r7, #8]
-	strhhi	r2, [r6, #2968]	@ movhi
+	strhi	r3, [r5, #2980]
+	ldrhhi	r2, [r5, #2976]
+	ldrhhi	r3, [r6, #8]
+	strhhi	r2, [r5, #2972]	@ movhi
 	it	hi
-	strhhi	r3, [r6, #2972]	@ movhi
-.L1862:
-	ldrh	r0, [r5, #2968]
+	strhhi	r3, [r5, #2976]	@ movhi
+.L1881:
+	ldrh	r0, [r7, #2972]
 	movs	r1, #1
 	bl	FtlGetLastWrittenPage
 	movw	r8, #61649
-	uxth	r6, r0
+	uxth	r5, r0
 	adds	r0, r0, #1
-	strh	r0, [r5, #2970]	@ movhi
-.L1864:
-	sxth	r3, r6
+	strh	r0, [r7, #2974]	@ movhi
+.L1883:
+	sxth	r3, r5
 	cmp	r3, #0
-	blt	.L1869
-	ldrh	r2, [r5, #2968]
+	blt	.L1888
+	ldrh	r2, [r7, #2972]
 	movs	r1, #1
-	ldr	r0, .L1883+8
+	ldr	r0, .L1902+8
 	orr	r3, r3, r2, lsl #10
-	str	r3, [r4, #4052]
-	ldr	r3, [r4, #756]
-	mov	r2, r1
 	str	r3, [r4, #4056]
+	ldr	r3, [r4, #1776]
+	mov	r2, r1
+	str	r3, [r4, #4060]
 	bl	FlashReadPages
-	ldr	r3, [r4, #4048]
+	ldr	r3, [r4, #4052]
 	adds	r3, r3, #1
-	beq	.L1865
-	ldrh	r3, [r7]
+	beq	.L1884
+	ldrh	r3, [r6]
 	cmp	r3, r8
-	bne	.L1865
-.L1869:
-	ldrh	r2, [r7, #10]
-	ldrh	r0, [r7, #12]
-	ldr	r3, .L1883+4
-	strh	r2, [r5, #2974]	@ movhi
+	bne	.L1884
+.L1888:
+	ldrh	r2, [r6, #10]
+	ldrh	r0, [r6, #12]
+	ldr	r3, .L1902+4
+	strh	r2, [r7, #2978]	@ movhi
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L1866
-	b	.L1867
-.L1865:
-	subs	r6, r6, #1
-	uxth	r6, r6
-	b	.L1864
-.L1866:
-	ldr	r2, [r3, #2824]
+	bne	.L1885
+	b	.L1886
+.L1884:
+	subs	r5, r5, #1
+	uxth	r5, r5
+	b	.L1883
+.L1885:
+	ldr	r2, [r3, #2836]
 	cmp	r0, r2
-	beq	.L1867
-	ldrh	r3, [r3, #2838]
+	beq	.L1886
+	ldrh	r3, [r3, #2850]
 	lsrs	r3, r3, #2
 	cmp	r2, r3
-	bcs	.L1867
+	bcs	.L1886
 	cmp	r0, r3
-	bcs	.L1867
+	bcs	.L1886
 	bl	FtlSysBlkNumInit
-.L1867:
-	ldr	r7, .L1883+12
-	movs	r6, #0
-.L1870:
-	ldrh	r3, [r5, #2850]
-	cmp	r6, r3
-	bcs	.L1882
-	ldrh	r2, [r4, #1860]
-	ldr	r1, [r4, #4056]
-	ldr	r0, [r7, #4]!
+.L1886:
+	ldr	r6, .L1902+12
+	movs	r5, #0
+.L1889:
+	ldrh	r3, [r7, #2862]
+	cmp	r5, r3
+	bcs	.L1901
+	ldrh	r2, [r4, #1864]
+	ldr	r1, [r4, #4060]
+	ldr	r0, [r6, #4]!
 	lsls	r2, r2, #2
-	mla	r1, r6, r2, r1
+	mla	r1, r5, r2, r1
 	bl	ftl_memcpy
-	adds	r6, r6, #1
-	b	.L1870
-.L1882:
+	adds	r5, r5, #1
+	b	.L1889
+.L1901:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1872:
+.L1891:
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1884:
+.L1903:
 	.align	2
-.L1883:
+.L1902:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR2+4048
-	.word	.LANCHOR0+2992
+	.word	.LANCHOR2+4052
+	.word	.LANCHOR0+2996
 	.fnend
 	.size	FtlLoadBbt, .-FtlLoadBbt
 	.align	1
@@ -11667,64 +11781,64 @@ FtlScanSysBlk:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	movs	r6, #0
-	ldr	r5, .L1970
+	ldr	r5, .L1989
 	.pad #36
 	sub	sp, sp, #36
-	ldr	r4, .L1970+4
+	ldr	r4, .L1989+4
 	mov	r1, r6
-	ldr	r2, [r5, #2928]
-	ldr	r0, [r4, #1852]
+	ldr	r2, [r5, #2940]
+	ldr	r0, [r4, #1856]
 	mov	r9, r4
-	strh	r6, [r5, #2946]	@ movhi
+	strh	r6, [r5, #2954]	@ movhi
 	lsls	r2, r2, #2
-	strh	r6, [r4, #1908]	@ movhi
+	strh	r6, [r4, #1912]	@ movhi
 	bl	ftl_memset
-	ldr	r2, [r5, #2928]
+	ldr	r2, [r5, #2940]
 	mov	r1, r6
-	ldr	r0, [r4, #1824]
+	ldr	r0, [r4, #1828]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r5, #2920]
+	ldrh	r2, [r5, #2932]
 	mov	r1, r6
-	ldr	r0, [r4, #1836]
+	ldr	r0, [r4, #1840]
 	lsls	r2, r2, #2
 	bl	ftl_memset
-	ldrh	r2, [r5, #2920]
-	ldr	r0, [r5, #2948]
+	ldrh	r2, [r5, #2932]
+	ldr	r0, [r5, #2956]
 	mov	r1, r6
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	add	r0, r4, #1064
+	addw	r0, r4, #1060
 	movs	r1, #255
 	movs	r2, #12
 	bl	memset
-	ldrh	r3, [r5, #2836]
+	ldrh	r3, [r5, #2848]
 	str	r5, [sp, #12]
 	mov	r5, r4
 	str	r3, [sp, #4]
-.L1886:
-	ldr	r6, .L1970
+.L1905:
+	ldr	r6, .L1989
 	ldr	r2, [sp, #4]
-	ldrh	r3, [r6, #2838]
+	ldrh	r3, [r6, #2850]
 	mov	r0, r6
 	cmp	r3, r2
-	bls	.L1928
-	ldr	r1, [r4, #1668]
+	bls	.L1947
+	ldr	r1, [r4, #1664]
 	mov	r10, #36
-	ldrh	r8, [r6, #2828]
+	ldrh	r8, [r6, #2840]
 	movs	r7, #0
 	ldr	r2, [r4, #1764]
 	str	r1, [sp, #8]
-	ldr	r3, [r4, #1664]
-	ldrh	r1, [r6, #2910]
+	ldr	r3, [r4, #1660]
+	ldrh	r1, [r6, #2922]
 	str	r7, [sp]
 	str	r1, [sp, #16]
-	addw	r1, r6, #2856
+	addw	r1, r6, #2868
 	str	r1, [sp, #20]
-.L1929:
+.L1948:
 	uxth	r1, r7
 	cmp	r1, r8
-	bcs	.L1965
+	bcs	.L1984
 	str	r3, [sp, #28]
 	ldr	r3, [sp, #20]
 	ldr	r1, [sp, #4]
@@ -11735,7 +11849,7 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	r2, [sp, #24]
 	ldr	r3, [sp, #28]
-	cbnz	r0, .L1887
+	cbnz	r0, .L1906
 	ldr	r1, [sp]
 	ldr	r6, [sp]
 	mla	r0, r10, r1, r2
@@ -11754,25 +11868,25 @@ FtlScanSysBlk:
 	adds	r1, r1, #1
 	uxth	r1, r1
 	str	r1, [sp]
-.L1887:
+.L1906:
 	adds	r7, r7, #1
-	b	.L1929
-.L1965:
+	b	.L1948
+.L1984:
 	ldr	r3, [sp]
 	cmp	r3, #0
-	beq	.L1891
+	beq	.L1910
+	ldr	r8, .L1989
 	mov	r1, r3
 	ldr	r0, [r4, #1764]
 	movs	r2, #1
-	ldr	r8, .L1970
 	bl	FlashReadPages
 	movs	r3, #0
 	str	r3, [sp, #8]
-.L1892:
+.L1911:
 	ldrh	r3, [sp, #8]
 	ldr	r2, [sp]
 	cmp	r3, r2
-	bcs	.L1891
+	bcs	.L1910
 	ldr	r3, [sp, #8]
 	mov	r10, #36
 	mul	r10, r10, r3
@@ -11783,10 +11897,10 @@ FtlScanSysBlk:
 	adds	r3, r3, #1
 	ldr	r7, [r2, #12]
 	ubfx	r6, r6, #10, #16
-	bne	.L1894
+	bne	.L1913
 	mov	fp, #16
 	movw	r3, #65535
-.L1893:
+.L1912:
 	ldr	r0, [r4, #1764]
 	movs	r1, #1
 	str	r3, [sp, #16]
@@ -11799,69 +11913,69 @@ FtlScanSysBlk:
 	ldrh	r2, [r7]
 	ldr	r3, [sp, #16]
 	cmp	r2, r3
-	bne	.L1895
+	bne	.L1914
 	ldr	r3, [r9, #1764]
 	mov	r2, #-1
 	str	r2, [r3, r10]
-	b	.L1894
-.L1895:
+	b	.L1913
+.L1914:
 	ldr	r2, [r5, #1764]
 	ldr	r2, [r2, r10]
 	adds	r2, r2, #1
-	bne	.L1894
+	bne	.L1913
 	add	fp, fp, #-1
 	uxth	fp, fp
 	cmp	fp, #0
-	bne	.L1893
-.L1894:
+	bne	.L1912
+.L1913:
 	ldr	r3, [r5, #1764]
 	ldr	r3, [r3, r10]
 	adds	r3, r3, #1
-	beq	.L1897
-	ldr	r2, [r5, #984]
+	beq	.L1916
+	ldr	r2, [r5, #1028]
 	ldr	r3, [r7, #4]
 	adds	r1, r2, #1
-	beq	.L1898
+	beq	.L1917
 	cmp	r2, r3
-	bhi	.L1899
-.L1898:
+	bhi	.L1918
+.L1917:
 	adds	r2, r3, #1
 	itt	ne
 	addne	r2, r3, #1
-	strne	r2, [r9, #984]
-.L1899:
+	strne	r2, [r9, #1028]
+.L1918:
 	ldrh	r2, [r7]
 	movw	r1, #61604
 	cmp	r2, r1
-	beq	.L1901
-	bhi	.L1902
+	beq	.L1920
+	bhi	.L1921
 	movw	r3, #61574
 	cmp	r2, r3
-	bne	.L1900
+	bne	.L1919
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #12]
-	ldrh	r10, [r3, #2920]
-	ldrh	r0, [r2, #2946]
-	ldr	r2, [r9, #1836]
+	ldrh	r10, [r3, #2932]
+	ldrh	r0, [r2, #2954]
+	ldr	r2, [r9, #1840]
 	add	lr, r10, #-1
 	uxth	r3, lr
 	rsb	lr, r0, lr
 	str	r2, [sp, #16]
-	b	.L1915
-.L1902:
+	b	.L1934
+.L1921:
 	movw	r3, #61634
 	cmp	r2, r3
-	beq	.L1904
+	beq	.L1923
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L1900
+	bne	.L1919
 	mov	r0, r6
-	b	.L1964
-.L1904:
+	b	.L1983
+.L1923:
 	ldr	r3, [sp, #12]
-	ldrh	r0, [r4, #1908]
-	ldr	r2, [r4, #1852]
-	ldr	r1, [r3, #2928]
+	ldrh	r0, [r4, #1912]
+	ldr	r2, [r4, #1856]
+	ldr	r1, [r3, #2940]
 	str	r2, [sp, #16]
 	uxth	lr, r1
 	add	r3, lr, #-1
@@ -11869,279 +11983,279 @@ FtlScanSysBlk:
 	add	lr, lr, #-1
 	uxth	r3, r3
 	sxth	lr, lr
-.L1906:
+.L1925:
 	sxth	ip, r3
 	cmp	ip, lr
-	ble	.L1966
+	ble	.L1985
 	ldr	r2, [r7, #4]
 	lsl	fp, ip, #2
 	mov	r10, r2
 	ldr	r2, [sp, #16]
 	ldr	r2, [r2, ip, lsl #2]
 	cmp	r10, r2
-	bls	.L1907
+	bls	.L1926
 	ldr	r2, [sp, #16]
 	ldr	r2, [r2]
-	cbnz	r2, .L1908
+	cbnz	r2, .L1927
 	cmp	r0, r1
 	itt	ne
 	addne	r0, r0, #1
-	strhne	r0, [r9, #1908]	@ movhi
-.L1908:
+	strhne	r0, [r9, #1912]	@ movhi
+.L1927:
 	movs	r1, #0
 	uxth	lr, r3
-.L1909:
+.L1928:
 	uxth	r2, r1
 	cmp	r2, lr
-	bcs	.L1967
-	ldr	r0, [r5, #1852]
+	bcs	.L1986
+	ldr	r0, [r5, #1856]
 	sxth	r2, r2
 	adds	r1, r1, #1
 	add	r10, r0, r2, lsl #2
 	ldr	r10, [r10, #4]
 	str	r10, [r0, r2, lsl #2]
-	ldr	r0, [r5, #1824]
+	ldr	r0, [r5, #1828]
 	add	r10, r0, r2, lsl #1
 	ldrh	r10, [r10, #2]
 	strh	r10, [r0, r2, lsl #1]	@ movhi
-	b	.L1909
-.L1967:
+	b	.L1928
+.L1986:
 	ldr	r1, [r7, #4]
-	ldr	r2, [r4, #1852]
+	ldr	r2, [r4, #1856]
 	str	r1, [r2, fp]
 	sxth	r1, r3
-	ldr	r2, [r4, #1824]
+	ldr	r2, [r4, #1828]
 	cmp	r1, #0
 	strh	r6, [r2, ip, lsl #1]	@ movhi
-	bge	.L1911
-	b	.L1900
-.L1907:
+	bge	.L1930
+	b	.L1919
+.L1926:
 	subs	r3, r3, #1
 	uxth	r3, r3
-	b	.L1906
-.L1966:
+	b	.L1925
+.L1985:
 	cmp	ip, #0
-	bge	.L1942
-	b	.L1900
-.L1911:
-	ldrh	r0, [r5, #1908]
-	ldr	r2, [r8, #2928]
+	bge	.L1961
+	b	.L1919
+.L1930:
+	ldrh	r0, [r5, #1912]
+	ldr	r2, [r8, #2940]
 	subs	r2, r2, r0
 	subs	r2, r2, #1
 	sxth	r2, r2
 	cmp	r1, r2
-	bgt	.L1900
-.L1942:
-	ldr	r2, [r4, #1852]
+	bgt	.L1919
+.L1961:
+	ldr	r2, [r4, #1856]
 	sxth	r3, r3
 	ldr	r1, [r7, #4]
 	adds	r0, r0, #1
-	strh	r0, [r4, #1908]	@ movhi
+	strh	r0, [r4, #1912]	@ movhi
 	str	r1, [r2, r3, lsl #2]
-	ldr	r2, [r4, #1824]
-	b	.L1962
-.L1921:
+	ldr	r2, [r4, #1828]
+	b	.L1981
+.L1940:
 	ldr	r1, [sp, #16]
 	lsl	fp, ip, #2
 	ldr	r2, [r7, #4]
 	ldr	r1, [r1, ip, lsl #2]
 	cmp	r2, r1
-	bhi	.L1968
+	bhi	.L1987
 	subs	r3, r3, #1
 	uxth	r3, r3
-.L1915:
+.L1934:
 	sxth	ip, r3
 	cmp	ip, lr
-	bgt	.L1921
-	b	.L1920
-.L1971:
+	bgt	.L1940
+	b	.L1939
+.L1990:
 	.align	2
-.L1970:
+.L1989:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-.L1968:
+.L1987:
 	ldr	r2, [sp, #16]
 	ldr	r2, [r2]
-	cbnz	r2, .L1917
+	cbnz	r2, .L1936
 	cmp	r0, r10
 	itt	ne
 	addne	r0, r0, #1
-	strhne	r0, [r8, #2946]	@ movhi
-.L1917:
+	strhne	r0, [r8, #2954]	@ movhi
+.L1936:
 	movs	r1, #0
 	uxth	lr, r3
-.L1918:
+.L1937:
 	uxth	r2, r1
 	cmp	r2, lr
-	bcs	.L1969
-	ldr	r0, [r4, #1836]
+	bcs	.L1988
+	ldr	r0, [r4, #1840]
 	sxth	r2, r2
 	adds	r1, r1, #1
 	add	r10, r0, r2, lsl #2
 	ldr	r10, [r10, #4]
 	str	r10, [r0, r2, lsl #2]
-	ldr	r0, [r8, #2948]
+	ldr	r0, [r8, #2956]
 	add	r10, r0, r2, lsl #1
 	ldrh	r10, [r10, #2]
 	strh	r10, [r0, r2, lsl #1]	@ movhi
-	b	.L1918
-.L1969:
-	ldr	r2, [r5, #1836]
+	b	.L1937
+.L1988:
+	ldr	r2, [r5, #1840]
 	ldr	r1, [r7, #4]
 	str	r1, [r2, fp]
-	ldr	r2, .L1972
-	ldr	r2, [r2, #2948]
+	ldr	r2, .L1991
+	ldr	r2, [r2, #2956]
 	strh	r6, [r2, ip, lsl #1]	@ movhi
-.L1920:
+.L1939:
 	sxth	r3, r3
 	cmp	r3, #0
-	blt	.L1900
-	ldrh	r2, [r8, #2920]
-	ldrh	r1, [r8, #2946]
+	blt	.L1919
+	ldrh	r2, [r8, #2932]
+	ldrh	r1, [r8, #2954]
 	subs	r2, r2, #1
 	subs	r2, r2, r1
 	sxth	r2, r2
 	cmp	r3, r2
-	bgt	.L1900
+	bgt	.L1919
 	adds	r1, r1, #1
-	ldr	r2, [r9, #1836]
-	strh	r1, [r8, #2946]	@ movhi
+	ldr	r2, [r9, #1840]
+	strh	r1, [r8, #2954]	@ movhi
 	ldr	r1, [r7, #4]
 	str	r1, [r2, r3, lsl #2]
-	ldr	r2, [r8, #2948]
-.L1962:
+	ldr	r2, [r8, #2956]
+.L1981:
 	strh	r6, [r2, r3, lsl #1]	@ movhi
-	b	.L1900
-.L1901:
-	ldrh	r1, [r9, #1064]
+	b	.L1919
+.L1920:
+	ldrh	r1, [r9, #1060]
 	movw	r2, #65535
 	cmp	r1, r2
-	bne	.L1922
-	strh	r6, [r5, #1064]	@ movhi
-	b	.L1963
-.L1922:
-	ldrh	r0, [r5, #1068]
+	bne	.L1941
+	strh	r6, [r5, #1060]	@ movhi
+	b	.L1982
+.L1941:
+	ldrh	r0, [r5, #1064]
 	cmp	r0, r2
-	beq	.L1923
+	beq	.L1942
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L1923:
-	ldr	r2, [r9, #1072]
+.L1942:
+	ldr	r2, [r9, #1068]
 	ldr	r3, [r7, #4]
 	cmp	r2, r3
-	bcs	.L1924
-	ldrh	r3, [r5, #1064]
-	strh	r6, [r5, #1064]	@ movhi
-	strh	r3, [r5, #1068]	@ movhi
+	bcs	.L1943
+	ldrh	r3, [r5, #1060]
+	strh	r6, [r5, #1060]	@ movhi
+	strh	r3, [r5, #1064]	@ movhi
 	ldr	r3, [r7, #4]
-.L1963:
-	str	r3, [r5, #1072]
-	b	.L1900
-.L1924:
-	strh	r6, [r5, #1068]	@ movhi
-	b	.L1900
-.L1897:
+.L1982:
+	str	r3, [r5, #1068]
+	b	.L1919
+.L1943:
+	strh	r6, [r5, #1064]	@ movhi
+	b	.L1919
+.L1916:
 	ldrb	r1, [r8, #76]	@ zero_extendqisi2
 	mov	r0, r6
-	cbz	r1, .L1925
-.L1964:
+	cbz	r1, .L1944
+.L1983:
 	movs	r1, #0
-.L1925:
+.L1944:
 	bl	FtlFreeSysBlkQueueIn
-.L1900:
+.L1919:
 	ldr	r3, [sp, #8]
 	adds	r3, r3, #1
 	str	r3, [sp, #8]
-	b	.L1892
-.L1891:
+	b	.L1911
+.L1910:
 	ldr	r6, [sp, #4]
 	adds	r6, r6, #1
 	uxth	r3, r6
 	str	r3, [sp, #4]
-	b	.L1886
-.L1928:
-	ldr	r3, .L1972+4
-	ldr	r5, [r3, #1824]
+	b	.L1905
+.L1947:
+	ldr	r3, .L1991+4
+	ldr	r5, [r3, #1828]
 	ldrh	r2, [r5]
-	cbz	r2, .L1930
-.L1933:
-	ldr	r5, [r0, #2948]
-	ldr	r3, .L1972
+	cbz	r2, .L1949
+.L1952:
+	ldr	r5, [r0, #2956]
+	ldr	r3, .L1991
 	ldrh	r2, [r5]
-	cbz	r2, .L1931
-	b	.L1954
-.L1930:
-	ldrh	r3, [r3, #1908]
+	cbz	r2, .L1950
+	b	.L1973
+.L1949:
+	ldrh	r3, [r3, #1912]
 	cmp	r3, #0
-	beq	.L1933
-	ldr	r6, [r6, #2928]
-.L1934:
+	beq	.L1952
+	ldr	r6, [r6, #2940]
+.L1953:
 	uxth	r3, r2
 	sxth	r1, r3
 	cmp	r1, r6
-	bcs	.L1933
+	bcs	.L1952
 	ldrh	r7, [r5, r1, lsl #1]
 	adds	r2, r2, #1
 	cmp	r7, #0
-	beq	.L1934
+	beq	.L1953
 	mov	lr, #0
-.L1935:
-	ldr	r5, [r0, #2928]
+.L1954:
+	ldr	r5, [r0, #2940]
 	sxth	r2, r3
 	cmp	r2, r5
-	bcs	.L1933
-	ldr	r5, [r4, #1824]
+	bcs	.L1952
+	ldr	r5, [r4, #1828]
 	subs	r6, r2, r1
 	adds	r3, r3, #1
 	ldrh	r7, [r5, r2, lsl #1]
 	uxth	r3, r3
 	strh	r7, [r5, r6, lsl #1]	@ movhi
-	ldr	r5, [r4, #1852]
+	ldr	r5, [r4, #1856]
 	ldr	r7, [r5, r2, lsl #2]
 	str	r7, [r5, r6, lsl #2]
-	ldr	r5, [r4, #1824]
+	ldr	r5, [r4, #1828]
 	strh	lr, [r5, r2, lsl #1]	@ movhi
-	b	.L1935
-.L1931:
-	ldrh	r1, [r3, #2946]
-	cbz	r1, .L1954
-	ldrh	r6, [r3, #2920]
-.L1938:
+	b	.L1954
+.L1950:
+	ldrh	r1, [r3, #2954]
+	cbz	r1, .L1973
+	ldrh	r6, [r3, #2932]
+.L1957:
 	uxth	r3, r2
 	sxth	r1, r3
 	cmp	r1, r6
-	bge	.L1954
+	bge	.L1973
 	ldrh	r7, [r5, r1, lsl #1]
 	adds	r2, r2, #1
 	cmp	r7, #0
-	beq	.L1938
-	ldr	r5, .L1972
+	beq	.L1957
+	ldr	r5, .L1991
 	mov	ip, #0
-.L1939:
-	ldrh	r6, [r0, #2920]
+.L1958:
+	ldrh	r6, [r0, #2932]
 	sxth	r2, r3
 	cmp	r2, r6
-	bge	.L1954
-	ldr	r6, [r5, #2948]
+	bge	.L1973
+	ldr	r6, [r5, #2956]
 	rsb	lr, r1, r2
 	adds	r3, r3, #1
 	ldrh	r7, [r6, r2, lsl #1]
 	uxth	r3, r3
 	strh	r7, [r6, lr, lsl #1]	@ movhi
-	ldr	r6, [r4, #1836]
+	ldr	r6, [r4, #1840]
 	ldr	r7, [r6, r2, lsl #2]
 	str	r7, [r6, lr, lsl #2]
-	ldr	r6, [r5, #2948]
+	ldr	r6, [r5, #2956]
 	strh	ip, [r6, r2, lsl #1]	@ movhi
-	b	.L1939
-.L1954:
+	b	.L1958
+.L1973:
 	movs	r0, #0
 	add	sp, sp, #36
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L1973:
+.L1992:
 	.align	2
-.L1972:
+.L1991:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -12158,215 +12272,215 @@ FtlLoadSysInfo:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	movs	r1, #0
-	ldr	r6, .L1993
-	ldr	r5, .L1993+4
-	ldrh	r2, [r6, #2836]
-	ldr	r3, [r5, #1796]
-	ldr	r0, [r5, #768]
+	ldr	r6, .L2012
+	ldr	r5, .L2012+4
+	ldrh	r2, [r6, #2848]
+	ldr	r3, [r5, #1800]
+	ldr	r0, [r5, #816]
 	lsls	r2, r2, #1
-	str	r1, [r5, #4056]
-	str	r3, [r5, #4060]
+	str	r1, [r5, #4060]
+	str	r3, [r5, #4064]
 	bl	ftl_memset
-	ldrh	r0, [r5, #1064]
+	ldrh	r0, [r5, #1060]
 	movw	r2, #65535
 	cmp	r0, r2
-	bne	.L1975
-.L1983:
+	bne	.L1994
+.L2002:
 	mov	r0, #-1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1975:
+.L1994:
 	movs	r1, #1
-	ldr	r8, .L1993+12
+	ldr	r8, .L2012+12
 	bl	FtlGetLastWrittenPage
 	mov	r7, r5
 	uxth	r4, r0
 	adds	r0, r0, #1
-	strh	r0, [r5, #1066]	@ movhi
-.L1977:
+	strh	r0, [r5, #1062]	@ movhi
+.L1996:
 	sxth	r3, r4
 	cmp	r3, #0
-	blt	.L1982
-	ldrh	r2, [r5, #1064]
+	blt	.L2001
+	ldrh	r2, [r5, #1060]
 	movs	r1, #1
-	ldr	r0, .L1993+8
+	ldr	r0, .L2012+8
 	orr	r3, r3, r2, lsl #10
-	str	r3, [r5, #4052]
-	ldr	r3, [r5, #756]
-	mov	r2, r1
 	str	r3, [r5, #4056]
+	ldr	r3, [r5, #1776]
+	mov	r2, r1
+	str	r3, [r5, #4060]
 	bl	FlashReadPages
-	ldr	r3, [r5, #4048]
+	ldr	r3, [r5, #4052]
 	adds	r3, r3, #1
-	beq	.L1978
-	ldr	r3, [r7, #756]
+	beq	.L1997
+	ldr	r3, [r7, #1776]
 	ldr	r3, [r3]
 	cmp	r3, r8
-	bne	.L1978
-	ldr	r3, [r7, #1796]
+	bne	.L1997
+	ldr	r3, [r7, #1800]
 	ldrh	r2, [r3]
 	movw	r3, #61604
 	cmp	r2, r3
-	bne	.L1978
-.L1982:
-	ldr	r4, .L1993+4
+	bne	.L1997
+.L2001:
+	ldr	r4, .L2012+4
 	movs	r2, #48
-	ldr	r1, [r5, #4056]
-	add	r0, r4, #1012
-	ldr	r7, .L1993
+	ldr	r1, [r5, #4060]
+	add	r0, r4, #760
+	ldr	r7, .L2012
 	bl	ftl_memcpy
-	ldrh	r2, [r6, #2836]
-	ldr	r1, [r5, #4056]
-	ldr	r0, [r5, #768]
+	ldrh	r2, [r6, #2848]
+	ldr	r1, [r5, #4060]
+	ldr	r0, [r5, #816]
 	adds	r1, r1, #48
 	lsls	r2, r2, #1
 	bl	ftl_memcpy
-	ldrh	r2, [r6, #2836]
-	ldr	r3, [r5, #4056]
+	ldrh	r2, [r6, #2848]
+	ldr	r3, [r5, #4060]
 	add	r1, r2, #24
-	ldr	r0, [r5, #944]
+	ldr	r0, [r5, #992]
 	ubfx	r1, r1, #1, #30
 	lsrs	r2, r2, #3
 	adds	r2, r2, #4
 	add	r1, r3, r1, lsl #2
 	bl	ftl_memcpy
-	ldrh	r3, [r6, #2944]
-	cbz	r3, .L1980
-	ldrh	r2, [r7, #2836]
-	ldr	r1, [r4, #4056]
-	ldr	r0, [r4, #1848]
+	ldrh	r3, [r6, #2952]
+	cbz	r3, .L1999
+	ldrh	r2, [r7, #2848]
+	ldr	r1, [r4, #4060]
+	ldr	r0, [r4, #1852]
 	lsrs	r3, r2, #3
 	add	r3, r3, r2, lsl #1
-	ldrh	r2, [r7, #2936]
+	ldrh	r2, [r7, #2948]
 	adds	r3, r3, #52
 	ubfx	r3, r3, #2, #14
 	lsls	r2, r2, #2
 	add	r1, r1, r3, lsl #2
 	bl	ftl_memcpy
-	b	.L1980
-.L1978:
+	b	.L1999
+.L1997:
 	subs	r4, r4, #1
 	uxth	r4, r4
-	b	.L1977
-.L1980:
-	ldr	r2, [r5, #1012]
-	ldr	r3, .L1993+12
-	ldr	r4, .L1993+4
+	b	.L1996
+.L1999:
+	ldr	r2, [r5, #760]
+	ldr	r3, .L2012+12
+	ldr	r4, .L2012+4
 	cmp	r2, r3
-	bne	.L1983
-	ldrb	r0, [r4, #1022]	@ zero_extendqisi2
-	ldrh	r1, [r6, #2850]
-	ldrh	r2, [r4, #1020]
+	bne	.L2002
+	ldrb	r0, [r4, #770]	@ zero_extendqisi2
+	ldrh	r1, [r6, #2862]
+	ldrh	r2, [r4, #768]
 	cmp	r0, r1
-	ldr	r3, .L1993
-	strh	r2, [r4, #1070]	@ movhi
-	bne	.L1983
-	ldrh	r1, [r3, #2898]
-	ldrh	r0, [r3, #2904]
-	str	r2, [r4, #4084]
+	ldr	r3, .L2012
+	strh	r2, [r4, #1066]	@ movhi
+	bne	.L2002
+	ldrh	r1, [r3, #2910]
+	ldrh	r0, [r3, #2916]
+	str	r2, [r4, #4088]
 	muls	r1, r2, r1
-	str	r1, [r3, #2960]
+	str	r1, [r3, #2968]
 	muls	r1, r0, r1
-	ldrh	r0, [r3, #2974]
-	str	r1, [r3, #2940]
-	ldr	r1, [r3, #2840]
+	ldrh	r0, [r3, #2978]
+	str	r1, [r3, #1896]
+	ldr	r1, [r3, #2852]
 	subs	r0, r1, r0
-	ldrh	r1, [r3, #2828]
+	ldrh	r1, [r3, #2840]
 	subs	r0, r0, r2
 	bl	__aeabi_uidiv
-	ldrh	r3, [r4, #1028]
-	ldrh	r1, [r4, #1026]
+	ldrh	r3, [r4, #776]
+	ldrh	r1, [r4, #774]
 	lsrs	r2, r3, #6
-	strh	r2, [r4, #790]	@ movhi
-	ldrh	r2, [r4, #1030]
+	strh	r2, [r4, #838]	@ movhi
+	ldrh	r2, [r4, #778]
 	and	r3, r3, #63
-	strb	r3, [r4, #794]
-	ldrb	r3, [r4, #1023]	@ zero_extendqisi2
-	strh	r2, [r4, #836]	@ movhi
-	ldrh	r2, [r4, #1032]
-	strb	r3, [r4, #796]
+	strb	r3, [r4, #842]
+	ldrb	r3, [r4, #771]	@ zero_extendqisi2
+	strh	r2, [r4, #884]	@ movhi
+	ldrh	r2, [r4, #780]
+	strb	r3, [r4, #844]
 	movw	r3, #65535
-	strh	r1, [r4, #788]	@ movhi
-	strh	r3, [r4, #1076]	@ movhi
+	strh	r1, [r4, #836]	@ movhi
+	strh	r3, [r4, #1072]	@ movhi
 	movs	r3, #0
-	strh	r3, [r4, #1078]	@ movhi
-	strb	r3, [r4, #1082]
-	strb	r3, [r4, #1084]
-	str	r3, [r4, #972]
-	strh	r0, [r4, #1060]	@ movhi
-	lsrs	r0, r2, #6
-	and	r2, r2, #63
-	strb	r2, [r4, #842]
-	ldrb	r2, [r4, #1024]	@ zero_extendqisi2
-	strh	r0, [r4, #838]	@ movhi
-	strb	r2, [r4, #844]
-	ldrh	r2, [r4, #1034]
-	strh	r2, [r4, #884]	@ movhi
-	ldrh	r2, [r4, #1036]
+	strh	r3, [r4, #1074]	@ movhi
+	strb	r3, [r4, #1078]
+	strb	r3, [r4, #1080]
+	str	r3, [r4, #1016]
+	strh	r0, [r4, #1056]	@ movhi
 	lsrs	r0, r2, #6
 	and	r2, r2, #63
 	strb	r2, [r4, #890]
-	ldrb	r2, [r4, #1025]	@ zero_extendqisi2
+	ldrb	r2, [r4, #772]	@ zero_extendqisi2
 	strh	r0, [r4, #886]	@ movhi
 	strb	r2, [r4, #892]
-	str	r3, [r4, #960]
-	ldr	r2, [r4, #1044]
-	str	r3, [r4, #952]
-	str	r3, [r4, #968]
-	str	r3, [r4, #996]
+	ldrh	r2, [r4, #782]
+	strh	r2, [r4, #932]	@ movhi
+	ldrh	r2, [r4, #784]
+	lsrs	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #938]
+	ldrb	r2, [r4, #773]	@ zero_extendqisi2
+	strh	r0, [r4, #934]	@ movhi
+	strb	r2, [r4, #940]
 	str	r3, [r4, #1004]
-	str	r3, [r4, #964]
-	ldr	r3, [r4, #1052]
-	str	r2, [r4, #992]
-	ldr	r2, [r4, #984]
+	ldr	r2, [r4, #792]
+	str	r3, [r4, #996]
+	str	r3, [r4, #1012]
+	str	r3, [r4, #1040]
+	str	r3, [r4, #1048]
+	str	r3, [r4, #1008]
+	ldr	r3, [r4, #800]
+	str	r2, [r4, #1036]
+	ldr	r2, [r4, #1028]
 	cmp	r3, r2
-	ldr	r2, [r5, #988]
+	ldr	r2, [r5, #1032]
 	it	hi
-	strhi	r3, [r4, #984]
-	ldr	r3, [r5, #1048]
+	strhi	r3, [r4, #1028]
+	ldr	r3, [r5, #796]
 	cmp	r3, r2
 	itt	hi
-	ldrhi	r2, .L1993+4
-	strhi	r3, [r2, #988]
+	ldrhi	r2, .L2012+4
+	strhi	r3, [r2, #1032]
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L1986
-	ldr	r0, .L1993+16
+	beq	.L2005
+	ldr	r0, .L2012+16
 	bl	make_superblock
-.L1986:
-	ldrh	r2, [r5, #836]
+.L2005:
+	ldrh	r2, [r5, #884]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1987
-	ldr	r0, .L1993+20
+	beq	.L2006
+	ldr	r0, .L2012+20
 	bl	make_superblock
-.L1987:
-	ldrh	r2, [r5, #884]
+.L2006:
+	ldrh	r2, [r5, #932]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1988
-	ldr	r0, .L1993+24
+	beq	.L2007
+	ldr	r0, .L2012+24
 	bl	make_superblock
-.L1988:
-	ldrh	r2, [r5, #1076]
+.L2007:
+	ldrh	r2, [r5, #1072]
 	movw	r3, #65535
 	cmp	r2, r3
-	beq	.L1989
-	ldr	r0, .L1993+28
+	beq	.L2008
+	ldr	r0, .L2012+28
 	bl	make_superblock
-.L1989:
+.L2008:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L1994:
+.L2013:
 	.align	2
-.L1993:
+.L2012:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR2+4048
+	.word	.LANCHOR2+4052
 	.word	1179929683
-	.word	.LANCHOR2+788
 	.word	.LANCHOR2+836
 	.word	.LANCHOR2+884
-	.word	.LANCHOR2+1076
+	.word	.LANCHOR2+932
+	.word	.LANCHOR2+1072
 	.fnend
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	1
@@ -12378,67 +12492,65 @@ FtlGcScanTempBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2029
+	ldr	r3, .L2048
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #28
 	sub	sp, sp, #28
-	ldrh	r4, [r3, #3000]
+	ldrh	r4, [r3, #3064]
 	movw	r3, #65535
 	mov	r5, r0
 	str	r1, [sp, #12]
 	cmp	r4, r3
-	beq	.L2018
-	cbnz	r4, .L1996
-	b	.L1997
-.L2018:
+	beq	.L2037
+	cbnz	r4, .L2015
+	b	.L2016
+.L2037:
 	movs	r4, #0
-.L1996:
-	ldr	r3, .L2029+4
+.L2015:
+	ldr	r3, .L2048+4
 	ldr	r2, [sp, #12]
-	ldrh	r3, [r3, #2898]
+	ldrh	r3, [r3, #2910]
 	cmp	r2, r3
-	bne	.L1998
-.L1997:
+	bne	.L2017
+.L2016:
 	bl	FtlGcPageVarInit
-.L1998:
-	ldr	r7, .L2029+8
+.L2017:
+	ldr	r7, .L2048+8
 	mov	r10, #0
 	mov	r3, #-1
 	str	r3, [sp, #4]
-	mov	r9, r7
-.L2012:
+.L2031:
 	ldrh	r1, [r5]
 	movw	r3, #65535
 	movs	r2, #0
 	strb	r2, [r5, #8]
 	cmp	r1, r3
-	beq	.L1999
-.L2000:
-.L2015:
-	ldr	r3, .L2029+4
+	beq	.L2018
+.L2019:
+	ldr	r9, .L2048+4
+.L2034:
+	ldr	r3, [r7, #1664]
 	movs	r2, #0
-	ldr	fp, [r7, #1764]
+	ldrh	r8, [r9, #2840]
 	mov	ip, #36
+	ldr	fp, [r7, #1764]
 	mov	r6, r2
-	movw	lr, #65535
-	ldrh	r8, [r3, #2828]
-	ldr	r3, [r7, #1668]
 	str	r3, [sp, #16]
-	ldr	r3, .L2029+4
-	ldrh	r3, [r3, #2910]
+	movw	lr, #65535
+	ldrh	r3, [r9, #2922]
 	str	r3, [sp, #20]
 	add	r3, r5, #14
 	str	r3, [sp, #8]
-.L2001:
+.L2020:
 	uxth	r3, r2
 	cmp	r3, r8
-	bcs	.L2027
+	bcs	.L2046
 	ldr	r1, [sp, #8]
 	ldrh	r3, [r1, #2]!
 	cmp	r3, lr
 	str	r1, [sp, #8]
-	beq	.L2002
+	beq	.L2021
 	mla	r1, ip, r6, fp
 	orr	r3, r4, r3, lsl #10
 	str	r3, [r1, #4]
@@ -12455,22 +12567,22 @@ FtlGcScanTempBlk:
 	ldr	r3, [sp, #16]
 	add	r0, r0, r3
 	str	r0, [r1, #12]
-.L2002:
+.L2021:
 	adds	r2, r2, #1
-	b	.L2001
-.L2027:
+	b	.L2020
+.L2046:
 	ldr	r0, [r7, #1764]
 	mov	r1, r6
 	movs	r2, #0
 	mov	fp, #0
 	bl	FlashReadPages
-.L2005:
+.L2024:
 	uxth	r3, fp
 	cmp	r3, r6
-	bcs	.L2028
+	bcs	.L2047
 	movs	r3, #36
 	mul	r8, r3, fp
-	ldr	r3, .L2029+8
+	ldr	r3, .L2048+8
 	ldr	ip, [r3, #1764]
 	add	r1, ip, r8
 	str	r1, [sp, #16]
@@ -12480,111 +12592,110 @@ FtlGcScanTempBlk:
 	str	r3, [sp, #8]
 	bl	P2V_plane
 	ldr	ip, [sp, #20]
-	mov	r2, r0
 	ldr	r3, [sp, #8]
+	mov	r2, r0
 	ldr	r0, [ip, r8]
-	cbnz	r0, .L2006
+	cbnz	r0, .L2025
 	ldr	r1, [sp, #16]
 	movw	r0, #65535
 	add	fp, fp, #1
 	ldr	lr, [r1, #12]
 	ldrh	r1, [lr]
 	cmp	r1, r0
-	bne	.L2007
-	ldr	r3, .L2029+8
+	bne	.L2026
+	ldr	r3, .L2048+8
 	movs	r1, #1
-	str	r1, [r3, #1924]
-	b	.L1999
-.L2007:
+	str	r1, [r3, #1928]
+	b	.L2018
+.L2026:
 	ldr	r0, [lr, #12]
 	mov	r1, r3
 	ldr	r2, [lr, #8]
 	bl	FtlGcUpdatePage
-	b	.L2005
-.L2006:
+	b	.L2024
+.L2025:
 	mov	r2, r3
-	ldr	r0, .L2029+12
 	ldrh	r1, [r5]
+	ldr	r0, .L2048+12
 	bl	printk
-	ldr	r2, [r9, #948]
+	ldr	r2, .L2048+4
 	ldrh	r3, [r5]
-	cbnz	r2, .L2008
-	ldr	r2, .L2029+4
+	ldr	r1, [r2, #2832]
+	cbnz	r1, .L2027
 	ldrb	r2, [r2, #76]	@ zero_extendqisi2
-	cbz	r2, .L2009
-.L2008:
-	ldr	r2, [r7, #748]
+	cbz	r2, .L2028
+.L2027:
+	ldr	r2, [r7, #752]
 	ldrh	r2, [r2, r3, lsl #1]
 	cmp	r2, #119
-	bls	.L2010
-.L2009:
+	bls	.L2029
+.L2028:
 	ldr	r2, [r7, #1764]
 	ldr	r2, [r2, r8]
 	adds	r2, r2, #1
-	bne	.L2011
-.L2010:
+	bne	.L2030
+.L2029:
 	ldr	r2, [r7, #1764]
 	add	r8, r8, r2
 	ldr	r2, [r8, #4]
 	str	r2, [sp, #4]
-.L2011:
-	ldr	r2, [r9, #768]
+.L2030:
+	ldr	r2, .L2048+8
 	movs	r4, #0
+	ldr	r2, [r2, #816]
 	strh	r4, [r2, r3, lsl #1]	@ movhi
 	ldrh	r0, [r5]
 	bl	INSERT_FREE_LIST
 	movw	r3, #65535
 	strh	r3, [r5]	@ movhi
 	bl	FtlGcPageVarInit
-	b	.L2012
-.L2028:
+	b	.L2031
+.L2047:
 	ldr	r3, [sp, #12]
 	add	r10, r10, #1
 	adds	r4, r4, #1
 	cmp	r10, r3
 	uxth	r4, r4
-	bcs	.L2014
-.L2016:
-	ldr	r3, .L2029+4
-	ldrh	r3, [r3, #2898]
+	bcs	.L2033
+.L2035:
+	ldrh	r3, [r9, #2910]
 	cmp	r3, r4
-	bhi	.L2015
+	bhi	.L2034
 	movs	r2, #0
-	b	.L1999
-.L2014:
-	ldr	r2, .L2029
+	b	.L2018
+.L2033:
+	ldr	r2, .L2048
 	movw	r1, #65535
-	ldrh	r3, [r2, #3000]
+	ldrh	r3, [r2, #3064]
 	cmp	r3, r1
-	beq	.L2016
+	beq	.L2035
 	add	r3, r3, r10
-	strh	r3, [r2, #3000]	@ movhi
-	ldr	r3, .L2029+4
-	ldrh	r3, [r3, #2898]
+	strh	r3, [r2, #3064]	@ movhi
+	ldrh	r3, [r9, #2910]
 	cmp	r3, r4
-	bls	.L2016
-	b	.L2017
-.L1999:
-	ldr	r3, .L2029
+	bls	.L2035
+	b	.L2036
+.L2018:
+	ldr	r3, .L2048
 	movw	r1, #65535
 	strh	r4, [r5, #2]	@ movhi
 	mov	r0, r5
 	strb	r2, [r5, #6]
-	strh	r1, [r3, #3000]	@ movhi
+	strh	r1, [r3, #3064]	@ movhi
 	mov	r1, r4
 	bl	ftl_sb_update_avl_pages
-.L2017:
+.L2036:
 	ldr	r0, [sp, #4]
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2030:
+.L2049:
 	.align	2
-.L2029:
+.L2048:
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC105
+	.word	.LC108
 	.fnend
 	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
 	.align	1
@@ -12600,7 +12711,7 @@ FlashProgPages:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #76
 	sub	sp, sp, #76
-	ldr	r5, .L2086
+	ldr	r5, .L2105
 	mov	r4, r0
 	str	r1, [sp, #8]
 	mov	r9, r2
@@ -12609,13 +12720,13 @@ FlashProgPages:
 	ldrb	r7, [r5]	@ zero_extendqisi2
 	ldrb	r6, [r6, #19]	@ zero_extendqisi2
 	str	r6, [sp, #16]
-	ldr	r6, .L2086+4
+	ldr	r6, .L2105+4
 	ldrb	r6, [r6, #265]	@ zero_extendqisi2
 	str	r6, [sp, #12]
-	cbz	r7, .L2032
+	cbz	r7, .L2051
 	bl	FlashProgSlc2KPages
-	b	.L2033
-.L2046:
+	b	.L2052
+.L2065:
 	movs	r3, #36
 	add	r2, sp, #28
 	mov	r1, r9
@@ -12628,37 +12739,37 @@ FlashProgPages:
 	mov	r0, fp
 	add	r3, sp, #32
 	bl	LogAddr2PhyAddr
-	ldrb	r2, [r5, #1616]	@ zero_extendqisi2
 	ldr	r3, [sp, #32]
-	mov	r10, r0
+	ldrb	r2, [r5, #1616]	@ zero_extendqisi2
 	cmp	r3, r2
-	bcc	.L2034
+	mov	r10, r0
+	bcc	.L2053
 	mov	r3, #-1
 	str	r3, [r4, r8]
-.L2035:
+.L2054:
 	adds	r7, r7, #1
-.L2032:
+.L2051:
 	ldr	r3, [sp, #8]
-	ldr	r6, .L2086
+	ldr	r6, .L2105
 	cmp	r7, r3
-	bcc	.L2046
-	b	.L2084
-.L2034:
+	bcc	.L2065
+	b	.L2103
+.L2053:
 	add	r3, r5, r3, lsl #4
-	ldrb	r1, [r5, #2820]	@ zero_extendqisi2
+	ldrb	r1, [r5, #2828]	@ zero_extendqisi2
 	ldr	r3, [r3, #1668]
 	cmp	r1, #0
 	it	eq
 	moveq	r10, #0
-	cbz	r3, .L2037
+	cbz	r3, .L2056
 	cmp	r2, #1
-	bne	.L2038
+	bne	.L2057
 	ldr	r0, [r5, #1828]
 	bl	NandcIqrWaitFlashReady
-.L2038:
+.L2057:
 	ldrb	r0, [sp, #32]	@ zero_extendqisi2
 	bl	FlashWaitCmdDone
-.L2037:
+.L2056:
 	ldr	r3, [sp, #32]
 	movs	r0, #0
 	add	r2, r5, r3, lsl #4
@@ -12668,11 +12779,11 @@ FlashProgPages:
 	str	fp, [r2, #1668]
 	str	r0, [r2, #1664]
 	cmp	r10, #0
-	beq	.L2039
+	beq	.L2058
 	add	r2, r8, #36
 	add	r2, r2, r4
 	str	r2, [r1, #4]
-.L2039:
+.L2058:
 	adds	r2, r5, r3
 	add	r3, r5, r3, lsl #4
 	ldrb	r6, [r2, #1620]	@ zero_extendqisi2
@@ -12680,13 +12791,13 @@ FlashProgPages:
 	mov	r0, r6
 	ldrb	r3, [r5, #1616]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L2040
+	bne	.L2059
 	bl	NandcWaitFlashReady
-	b	.L2041
-.L2040:
+	b	.L2060
+.L2059:
 	bl	NandcFlashCs
-	mov	r0, r6
 	ldr	r3, [sp, #32]
+	mov	r0, r6
 	ldr	r1, [sp, #28]
 	add	r3, r5, r3, lsl #2
 	ldr	r2, [r3, #1628]
@@ -12696,139 +12807,139 @@ FlashProgPages:
 	bl	FlashWaitReadyEN
 	mov	r0, r6
 	bl	NandcFlashDeCs
-.L2041:
+.L2060:
 	ldr	r3, [sp, #16]
 	subs	r3, r3, #1
 	cmp	r3, #6
-	bhi	.L2042
+	bhi	.L2061
 	adds	r3, r5, r6
-	ldrb	r3, [r3, #2756]	@ zero_extendqisi2
-	cbz	r3, .L2042
+	ldrb	r3, [r3, #2760]	@ zero_extendqisi2
+	cbz	r3, .L2061
 	mov	r0, r6
-	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
-	ldr	r2, .L2086+8
+	ldrb	r1, [r5, #1907]	@ zero_extendqisi2
+	ldr	r2, .L2105+8
 	movs	r3, #0
 	bl	HynixSetRRPara
-.L2042:
+.L2061:
 	mov	r0, r6
 	bl	NandcFlashCs
 	cmp	r9, #1
 	mov	r0, r6
-	bne	.L2043
+	bne	.L2062
 	ldrb	r3, [r5, #76]	@ zero_extendqisi2
-	cbz	r3, .L2043
+	cbz	r3, .L2062
 	bl	flash_enter_slc_mode
-	b	.L2044
-.L2043:
+	b	.L2063
+.L2062:
 	bl	flash_exit_slc_mode
-.L2044:
+.L2063:
 	mov	r0, r6
 	ldr	r1, [sp, #28]
 	bl	FlashProgFirstCmd
 	ldr	r3, [fp, #12]
 	mov	r0, r6
 	movs	r1, #1
-	str	r3, [sp]
 	ldr	r2, [sp, #12]
+	str	r3, [sp]
 	ldr	r3, [fp, #8]
 	bl	NandcXferData
 	cmp	r10, #0
-	beq	.L2045
+	beq	.L2064
 	mov	r0, r6
 	ldr	r1, [sp, #28]
 	bl	FlashProgDpFirstCmd
-	mov	r0, r6
-	add	r8, r8, #36
-	add	r8, r8, r4
 	ldr	r3, [sp, #32]
 	ldr	r1, [sp, #28]
+	mov	r0, r6
+	add	r8, r8, #36
 	add	r3, r5, r3, lsl #2
+	add	r8, r8, r4
 	ldr	r2, [r3, #1628]
 	adds	r2, r2, #0
 	it	ne
 	movne	r2, #1
 	bl	FlashWaitReadyEN
+	ldr	r3, [sp, #28]
 	ldr	r1, [r5, #4]
 	mov	r0, r6
-	ldr	r3, [sp, #28]
 	add	r1, r1, r3
 	bl	FlashProgDpSecondCmd
 	ldr	r3, [r8, #12]
 	mov	r0, r6
 	movs	r1, #1
-	str	r3, [sp]
 	ldr	r2, [sp, #12]
+	str	r3, [sp]
 	ldr	r3, [r8, #8]
 	bl	NandcXferData
-.L2045:
+.L2064:
 	mov	r0, r6
 	ldr	r1, [sp, #28]
 	bl	FlashProgSecondCmd
 	mov	r0, r6
 	bl	NandcFlashDeCs
 	add	r7, r7, r10
-	b	.L2035
-.L2084:
+	b	.L2054
+.L2103:
 	ldr	r0, [r6, #1828]
 	movs	r5, #0
 	bl	NandcIqrWaitFlashReady
 	addw	r8, r6, #1660
 	mov	r7, r6
-.L2047:
+.L2066:
 	ldrb	r3, [r6, #1616]	@ zero_extendqisi2
 	cmp	r5, r3
-	bcs	.L2085
+	bcs	.L2104
 	uxtb	r0, r5
 	bl	FlashWaitCmdDone
 	cmp	r9, #1
-	bne	.L2048
+	bne	.L2067
 	ldrb	r3, [r7, #76]	@ zero_extendqisi2
-	cbz	r3, .L2048
+	cbz	r3, .L2067
 	lsls	r3, r5, #4
 	ldrb	r0, [r8, r3]	@ zero_extendqisi2
 	bl	flash_exit_slc_mode
-.L2048:
+.L2067:
 	adds	r5, r5, #1
-	b	.L2047
-.L2085:
+	b	.L2066
+.L2104:
 	ldr	r3, [sp, #20]
-	cbnz	r3, .L2050
-.L2058:
+	cbnz	r3, .L2069
+.L2077:
 	movs	r0, #0
-	b	.L2033
-.L2050:
-	ldr	r7, .L2086+12
+	b	.L2052
+.L2069:
+	ldr	r7, .L2105+12
 	mov	r8, #0
 	mov	r10, r7
-.L2051:
+.L2070:
 	ldr	r3, [sp, #8]
 	cmp	r8, r3
-	beq	.L2058
+	beq	.L2077
 	ldr	r3, [r4]
 	adds	r3, r3, #1
-	bne	.L2052
+	bne	.L2071
 	ldr	r1, [r4, #4]
-	ldr	r0, .L2086+16
+	ldr	r0, .L2105+16
 	bl	printk
-	b	.L2053
-.L2052:
+	b	.L2072
+.L2071:
 	ldr	r3, [sp, #8]
 	mov	r1, r9
 	add	r2, sp, #28
 	mov	r0, r4
 	rsb	r3, r8, r3
 	mov	r6, r4
+	add	r5, sp, #36
 	uxtb	r3, r3
 	str	r3, [sp]
 	add	r3, sp, #32
 	bl	LogAddr2PhyAddr
-	ldr	r2, [r7, #4020]
+	ldr	r2, [r7, #4024]
 	movs	r3, #0
 	str	r3, [r2]
-	ldr	r2, [r7, #4024]
+	ldr	r2, [r7, #4028]
 	str	r3, [r2]
 	ldmia	r6!, {r0, r1, r2, r3}
-	add	r5, sp, #36
 	stmia	r5!, {r0, r1, r2, r3}
 	ldmia	r6!, {r0, r1, r2, r3}
 	stmia	r5!, {r0, r1, r2, r3}
@@ -12837,63 +12948,63 @@ FlashProgPages:
 	movs	r1, #1
 	mov	r2, r9
 	str	r3, [r5]
-	ldr	r3, [r7, #4020]
-	str	r3, [sp, #44]
 	ldr	r3, [r7, #4024]
+	str	r3, [sp, #44]
+	ldr	r3, [r7, #4028]
 	str	r3, [sp, #48]
 	bl	FlashReadPages
 	ldr	r5, [sp, #36]
 	adds	r3, r5, #1
-	bne	.L2054
-	ldr	r0, .L2086+20
+	bne	.L2073
+	ldr	r0, .L2105+20
 	ldr	r1, [r4, #4]
 	bl	printk
 	str	r5, [r4]
-.L2054:
+.L2073:
 	ldr	r3, [r4, #12]
-	cbz	r3, .L2055
+	cbz	r3, .L2074
 	ldr	r2, [r3]
-	ldr	r3, [r10, #4024]
+	ldr	r3, [r10, #4028]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2055
-	ldr	r0, .L2086+24
+	beq	.L2074
+	ldr	r0, .L2105+24
 	ldr	r1, [r4, #4]
 	bl	printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L2055:
+.L2074:
 	ldr	r3, [r4, #8]
-	cbz	r3, .L2053
+	cbz	r3, .L2072
 	ldr	r2, [r3]
-	ldr	r3, [r10, #4020]
+	ldr	r3, [r10, #4024]
 	ldr	r3, [r3]
 	cmp	r2, r3
-	beq	.L2053
-	ldr	r0, .L2086+28
+	beq	.L2072
+	ldr	r0, .L2105+28
 	ldr	r1, [r4, #4]
 	bl	printk
 	mov	r3, #-1
 	str	r3, [r4]
-.L2053:
+.L2072:
 	add	r8, r8, #1
 	adds	r4, r4, #36
-	b	.L2051
-.L2033:
+	b	.L2070
+.L2052:
 	add	sp, sp, #76
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2087:
+.L2106:
 	.align	2
-.L2086:
+.L2105:
 	.word	.LANCHOR0
 	.word	.LANCHOR1
-	.word	.LANCHOR0+1906
+	.word	.LANCHOR0+1910
 	.word	.LANCHOR2
-	.word	.LC101
-	.word	.LC102
-	.word	.LC103
 	.word	.LC104
+	.word	.LC105
+	.word	.LC106
+	.word	.LC107
 	.fnend
 	.size	FlashProgPages, .-FlashProgPages
 	.align	1
@@ -12905,16 +13016,16 @@ FlashTestBlk:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 104
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2091
+	ldr	r3, .L2110
 	push	{r4, r5, lr}
 	.save {r4, r5, lr}
 	mov	r4, r0
-	ldr	r2, [r3, #4004]
+	ldr	r2, [r3, #4008]
 	.pad #108
 	sub	sp, sp, #108
 	cmp	r0, r2
-	bcc	.L2090
-	ldr	r5, [r3, #4012]
+	bcc	.L2109
+	ldr	r5, [r3, #4016]
 	add	r0, sp, #40
 	movs	r1, #165
 	movs	r2, #32
@@ -12927,35 +13038,35 @@ FlashTestBlk:
 	movs	r2, #8
 	bl	memset
 	movs	r1, #1
-	mov	r2, r1
 	add	r0, sp, #4
 	str	r4, [sp, #8]
+	mov	r2, r1
 	bl	FlashEraseBlocks
 	movs	r1, #1
+	add	r0, sp, #4
 	mov	r2, r1
 	mov	r3, r1
-	add	r0, sp, #4
 	bl	FlashProgPages
-	movs	r1, #0
-	movs	r2, #1
 	ldr	r4, [sp, #4]
 	add	r0, sp, #4
+	movs	r1, #0
 	adds	r4, r4, #0
+	mov	r2, #1
 	it	ne
 	movne	r4, #1
 	negs	r4, r4
 	bl	FlashEraseBlocks
-	b	.L2089
-.L2090:
+	b	.L2108
+.L2109:
 	movs	r4, #0
-.L2089:
+.L2108:
 	mov	r0, r4
 	add	sp, sp, #108
 	@ sp needed
 	pop	{r4, r5, pc}
-.L2092:
+.L2111:
 	.align	2
-.L2091:
+.L2110:
 	.word	.LANCHOR2
 	.fnend
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -12972,11 +13083,11 @@ FlashMakeFactorBbt:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #84
 	sub	sp, sp, #84
-	ldr	r5, .L2151
+	ldr	r5, .L2170
 	movs	r1, #1
-	ldr	r4, .L2151+4
-	ldr	r0, .L2151+8
-	ldr	r3, [r5, #4016]
+	ldr	r4, .L2170+4
+	ldr	r0, .L2170+8
+	ldr	r3, [r5, #4020]
 	ldrh	r8, [r4, #1876]
 	str	r3, [sp, #20]
 	ldrh	r3, [r4, #1878]
@@ -12988,7 +13099,7 @@ FlashMakeFactorBbt:
 	ldrh	r3, [r4, #4]
 	str	r3, [sp, #16]
 	ldrb	r3, [r4]	@ zero_extendqisi2
-	ldr	r4, .L2151+4
+	ldr	r4, .L2170+4
 	cmp	r3, #1
 	itttt	eq
 	ldreq	r3, [sp, #16]
@@ -12996,46 +13107,46 @@ FlashMakeFactorBbt:
 	uxtheq	r3, r3
 	streq	r3, [sp, #16]
 	bl	printk
-	ldr	r0, [r5, #4016]
+	ldr	r0, [r5, #4020]
+	ldr	r5, .L2170
 	mov	r1, #4096
-	ldr	r5, .L2151
 	bl	__memzero
 	lsr	r3, r8, #4
 	str	r3, [sp, #28]
 	movs	r3, #0
 	str	r3, [sp, #8]
-.L2095:
+.L2114:
 	ldrb	r7, [sp, #8]	@ zero_extendqisi2
 	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
 	cmp	r3, r7
-	bls	.L2147
+	bls	.L2166
 	add	r3, r5, r7, lsl #1
-	ldrh	r6, [r3, #4032]
+	ldrh	r6, [r3, #4036]
 	cmp	r6, #0
-	bne	.L2125
+	bne	.L2144
 	ldrh	r2, [r4, #1884]
 	mov	r1, r6
-	ldr	r0, [r5, #3984]
+	ldr	r0, [r5, #3988]
 	mov	r9, r6
 	lsls	r2, r2, #9
 	bl	ftl_memset
 	adds	r3, r4, r7
+	str	r6, [sp, #4]
 	ldrb	r10, [r3, #1620]	@ zero_extendqisi2
 	lsls	r3, r7, #2
 	add	fp, r4, r3
-	str	r6, [sp, #4]
 	str	r3, [sp, #32]
-.L2097:
+.L2116:
 	ldrh	r3, [sp, #4]
 	cmp	r3, r8
 	str	r3, [sp, #12]
-	bcs	.L2107
+	bcs	.L2126
 	movs	r3, #255
 	strb	r3, [sp, #42]
 	strb	r3, [sp, #43]
 	ldr	r3, [sp, #24]
 	lsls	r1, r3, #31
-	bpl	.L2099
+	bpl	.L2118
 	ldr	r3, [fp, #1628]
 	add	r2, sp, #42
 	mov	r0, r10
@@ -13044,9 +13155,9 @@ FlashMakeFactorBbt:
 	mov	r1, r3
 	bl	FlashReadSpare
 	ldrb	r2, [r4]	@ zero_extendqisi2
-	cmp	r2, #1
 	ldr	r3, [sp, #36]
-	bne	.L2099
+	cmp	r2, #1
+	bne	.L2118
 	ldr	r1, [r4, #4]
 	add	r2, sp, #43
 	mov	r0, r10
@@ -13056,10 +13167,10 @@ FlashMakeFactorBbt:
 	ldrb	r2, [sp, #43]	@ zero_extendqisi2
 	ands	r3, r3, r2
 	strb	r3, [sp, #42]
-.L2099:
+.L2118:
 	ldr	r3, [sp, #24]
 	lsls	r2, r3, #30
-	bpl	.L2101
+	bpl	.L2120
 	ldr	r3, [r4, #1788]
 	mov	r0, r10
 	add	r2, sp, #43
@@ -13069,51 +13180,51 @@ FlashMakeFactorBbt:
 	add	r1, r1, r3
 	add	r1, r1, r6
 	bl	FlashReadSpare
-.L2101:
+.L2120:
 	ldr	r3, [r4, #1788]
 	ldrb	r2, [r3, #7]	@ zero_extendqisi2
 	ldrb	r3, [sp, #42]	@ zero_extendqisi2
 	cmp	r2, #1
-	beq	.L2102
+	beq	.L2121
 	cmp	r2, #8
-	bne	.L2103
-.L2102:
-	cbz	r3, .L2124
+	bne	.L2122
+.L2121:
+	cbz	r3, .L2143
 	ldrb	r0, [sp, #43]	@ zero_extendqisi2
 	clz	r0, r0
 	lsrs	r0, r0, #5
-	b	.L2104
-.L2103:
+	b	.L2123
+.L2122:
 	cmp	r3, #255
-	bne	.L2124
+	bne	.L2143
 	ldrb	r0, [sp, #43]	@ zero_extendqisi2
 	subs	r0, r0, #255
 	it	ne
 	movne	r0, #1
-	b	.L2104
-.L2124:
+	b	.L2123
+.L2143:
 	movs	r0, #1
-.L2104:
+.L2123:
 	ldr	r3, [sp, #24]
 	lsls	r3, r3, #29
-	bpl	.L2105
-	ldr	r3, .L2151+4
+	bpl	.L2124
+	ldr	r3, .L2170+4
 	mov	r0, r10
 	ldr	r2, [sp, #32]
 	add	r3, r3, r2
 	ldr	r1, [r3, #1628]
 	add	r1, r1, r6
 	bl	SandiskProgTestBadBlock
-.L2105:
-	cbz	r0, .L2106
+.L2124:
+	cbz	r0, .L2125
 	mov	r1, r7
 	ldr	r2, [sp, #4]
-	ldr	r0, .L2151+12
+	ldr	r0, .L2170+12
 	add	r9, r9, #1
 	bl	printk
-	ldr	r2, [r5, #3984]
-	uxth	r9, r9
 	ldr	r3, [sp, #12]
+	ldr	r2, [r5, #3988]
+	uxth	r9, r9
 	and	r0, r3, #31
 	lsrs	r1, r3, #5
 	movs	r3, #1
@@ -13125,47 +13236,47 @@ FlashMakeFactorBbt:
 	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
 	muls	r3, r2, r3
 	cmp	r9, r3
-	bgt	.L2107
-.L2106:
+	bgt	.L2126
+.L2125:
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
 	str	r3, [sp, #4]
 	ldr	r3, [sp, #16]
 	add	r6, r6, r3
-	b	.L2097
-.L2107:
+	b	.L2116
+.L2126:
 	mov	r2, r9
-	ldr	r0, .L2151+16
+	ldr	r0, .L2170+16
 	mov	r1, r7
 	bl	printk
 	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
 	ldr	r2, [sp, #28]
 	muls	r3, r2, r3
 	cmp	r9, r3
-	blt	.L2109
+	blt	.L2128
 	ldrh	r2, [r4, #1884]
 	movs	r1, #0
-	ldr	r0, [r5, #3984]
+	ldr	r0, [r5, #3988]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L2109:
+.L2128:
 	cmp	r7, #0
-	bne	.L2111
-	ldrh	r10, [r5, #4004]
+	bne	.L2130
+	ldrh	r10, [r5, #4008]
 	mov	r9, #1
 	mov	r6, r7
-.L2112:
-	ldr	r3, .L2151+4
+.L2131:
+	ldr	r3, .L2170+4
 	ldrb	r3, [r3, #1]	@ zero_extendqisi2
 	cmp	r3, r10
-	bls	.L2148
+	bls	.L2167
 	mov	r0, r10
 	bl	FlashTestBlk
-	cbz	r0, .L2113
+	cbz	r0, .L2132
 	mov	r1, r10
-	ldr	r0, .L2151+20
+	ldr	r0, .L2170+20
 	bl	printk
-	ldr	r2, [r5, #3984]
+	ldr	r2, [r5, #3988]
 	lsr	r0, r10, #5
 	adds	r6, r6, #1
 	and	r3, r10, #31
@@ -13174,116 +13285,116 @@ FlashMakeFactorBbt:
 	lsl	r3, r9, r3
 	orrs	r3, r3, r1
 	str	r3, [r2, r0, lsl #2]
-.L2113:
+.L2132:
 	add	r10, r10, #1
 	uxth	r10, r10
-	b	.L2112
-.L2148:
+	b	.L2131
+.L2167:
 	add	fp, r8, #-1
 	sub	r9, r8, #50
 	mov	r10, #1
 	uxth	fp, fp
-.L2115:
+.L2134:
 	cmp	fp, r9
-	ble	.L2149
+	ble	.L2168
 	mov	r0, fp
 	bl	FlashTestBlk
-	cbz	r0, .L2116
+	cbz	r0, .L2135
 	mov	r1, fp
-	ldr	r0, .L2151+20
+	ldr	r0, .L2170+20
 	bl	printk
-	ldr	r2, [r5, #3984]
+	ldr	r2, [r5, #3988]
 	lsr	r0, fp, #5
 	and	r3, fp, #31
 	lsl	r3, r10, r3
 	ldr	r1, [r2, r0, lsl #2]
 	orrs	r3, r3, r1
 	str	r3, [r2, r0, lsl #2]
-.L2116:
+.L2135:
 	add	fp, fp, #-1
 	uxth	fp, fp
-	b	.L2115
-.L2149:
-	ldr	r3, .L2151+4
-	ldr	r2, [r5, #4004]
+	b	.L2134
+.L2168:
+	ldr	r3, .L2170+4
+	ldr	r2, [r5, #4008]
 	ldrb	r3, [r3, #1]	@ zero_extendqisi2
 	subs	r3, r3, r2
 	cmp	r6, r3
-	bcc	.L2111
+	bcc	.L2130
 	ldrh	r2, [r4, #1884]
 	movs	r1, #0
-	ldr	r0, [r5, #3984]
+	ldr	r0, [r5, #3988]
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L2111:
+.L2130:
 	ldrb	r6, [sp, #8]	@ zero_extendqisi2
 	add	r10, r8, #-1
 	add	r9, r5, r7, lsl #1
 	uxth	r10, r10
 	mul	r6, r8, r6
-.L2119:
+.L2138:
 	mov	r1, r7
-	ldr	r0, .L2151+24
+	ldr	r0, .L2170+24
 	mov	r2, r10
 	bl	printk
-	ldr	r1, [r5, #3984]
-.L2120:
+	ldr	r1, [r5, #3988]
+.L2139:
 	lsr	r3, r10, #5
 	and	r2, r10, #31
 	ldr	r3, [r1, r3, lsl #2]
 	lsrs	r3, r3, r2
 	ands	r3, r3, #1
-	beq	.L2150
+	beq	.L2169
 	add	r10, r10, #-1
 	uxth	r10, r10
-	b	.L2120
-.L2150:
+	b	.L2139
+.L2169:
 	ldr	r1, [sp, #20]
 	movw	r2, #61664
-	strh	r10, [r9, #4032]	@ movhi
+	strh	r10, [r9, #4036]	@ movhi
 	add	r0, sp, #44
 	strh	r2, [r1]	@ movhi
 	strh	r10, [r1, #2]	@ movhi
 	strh	r3, [r1, #8]	@ movhi
 	movs	r1, #1
-	ldr	r3, [r5, #3984]
+	ldr	r3, [r5, #3988]
 	mov	r2, r1
 	str	r3, [sp, #52]
-	ldr	r3, [r5, #4016]
+	ldr	r3, [r5, #4020]
 	str	r3, [sp, #56]
 	add	r3, r10, r6
 	lsls	r3, r3, #10
 	str	r3, [sp, #48]
 	bl	FlashEraseBlocks
 	movs	r1, #1
+	add	r0, sp, #44
 	mov	r3, r1
 	mov	r2, r1
-	add	r0, sp, #44
 	bl	FlashProgPages
 	ldr	r3, [sp, #44]
-	cbz	r3, .L2125
+	cbz	r3, .L2144
 	add	r10, r10, #-1
 	uxth	r10, r10
-	b	.L2119
-.L2125:
+	b	.L2138
+.L2144:
 	ldr	r3, [sp, #8]
 	adds	r3, r3, #1
 	str	r3, [sp, #8]
-	b	.L2095
-.L2147:
+	b	.L2114
+.L2166:
 	add	sp, sp, #84
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2152:
+.L2171:
 	.align	2
-.L2151:
+.L2170:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC106
-	.word	.LC107
-	.word	.LC108
 	.word	.LC109
 	.word	.LC110
+	.word	.LC111
+	.word	.LC112
+	.word	.LC113
 	.fnend
 	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
 	.align	1
@@ -13293,256 +13404,272 @@ FlashMakeFactorBbt:
 	.type	FtlLowFormatEraseBlock, %function
 FtlLowFormatEraseBlock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 16
+	@ args = 0, pretend = 0, frame = 24
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #20
-	sub	sp, sp, #20
-	ldr	r4, .L2205
-	str	r0, [sp, #8]
-	str	r1, [sp, #4]
-	ldr	r2, [r4, #740]
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r7, .L2224
+	str	r0, [sp, #4]
+	str	r1, [sp]
+	ldrb	r3, [r7, #2828]	@ zero_extendqisi2
+	str	r3, [sp, #16]
+	ldr	r3, .L2224+4
+	ldr	r2, [r3, #744]
+	mov	fp, r3
 	cmp	r2, #0
-	bne	.L2182
-	ldr	r3, .L2205+4
-	mov	r9, #36
-	mov	r10, r2
+	bne	.L2201
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	mov	r8, #36
+	mov	r9, r2
 	mov	r5, r2
-	mov	r7, r2
-	mov	fp, r4
-	ldrb	r1, [r3, #76]	@ zero_extendqisi2
-	mov	r6, r3
-	str	r0, [r3, #2964]
-	str	r1, [sp, #12]
-.L2155:
-	ldrh	r1, [r6, #2828]
-	uxth	r3, r10
-	cmp	r1, r3
-	bls	.L2200
-	mul	r1, r9, r3
-	ldr	r0, [r4, #744]
-	movs	r2, #0
-	str	r2, [r0, r1]
-	ldr	r2, .L2205+4
-	ldr	r1, [sp, #8]
-	add	r3, r3, r2
-	ldrb	r0, [r3, #2856]	@ zero_extendqisi2
+	mov	r4, r2
+	mov	r10, fp
+	str	r3, [sp, #8]
+	str	r0, [fp, #1752]
+.L2174:
+	ldrh	r0, [r7, #2840]
+	uxth	r1, r9
+	ldr	r3, .L2224
+	cmp	r0, r1
+	bls	.L2219
+	mul	r6, r8, r1
+	ldr	r0, [fp, #748]
+	movs	r3, #0
+	str	r3, [r0, r6]
+	ldr	r3, .L2224
+	add	r1, r1, r3
+	ldrb	r0, [r1, #2868]	@ zero_extendqisi2
+	ldr	r1, [sp, #4]
 	bl	V2P_block
-	ldr	r3, [sp, #4]
-	mov	r8, r0
-	cbz	r3, .L2156
+	ldr	r3, [sp]
+	mov	r6, r0
+	cbz	r3, .L2175
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L2157
-.L2156:
-	mov	r0, r8
+	cbnz	r0, .L2176
+.L2175:
+	mov	r0, r6
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L2158
-	ldr	r1, [r4, #744]
-	lsl	r3, r8, #10
-	mla	r1, r9, r5, r1
-	str	r3, [r1, #4]
-	str	r0, [r1, #8]
-	ldrh	r3, [r6, #2910]
-	muls	r3, r5, r3
-	ldr	r0, [fp, #1800]
+	cbnz	r0, .L2177
+	ldr	r3, [fp, #748]
+	lsls	r6, r6, #10
+	ldrh	r1, [r7, #2922]
+	muls	r1, r5, r1
 	it	mi
-	addmi	r3, r3, #3
+	addmi	r1, r1, #3
+	mla	lr, r8, r5, r3
 	adds	r5, r5, #1
-	bic	r3, r3, #3
-	add	r3, r3, r0
-	str	r3, [r1, #12]
+	bic	r1, r1, #3
 	uxth	r5, r5
-	b	.L2157
-.L2158:
-	adds	r7, r7, #1
-	uxth	r7, r7
-.L2157:
-	add	r10, r10, #1
-	b	.L2155
-.L2200:
-	mov	r8, r7
-	cbnz	r5, .L2161
-	mov	r0, r7
-	b	.L2154
-.L2161:
-	ldr	r3, [sp, #12]
+	str	r0, [lr, #8]
+	ldr	r0, [r10, #1804]
+	str	r6, [lr, #4]
+	add	r1, r1, r0
+	str	r1, [lr, #12]
+	b	.L2176
+.L2177:
+	adds	r4, r4, #1
+	uxth	r4, r4
+.L2176:
+	add	r9, r9, #1
+	b	.L2174
+.L2219:
+	cmp	r5, #0
+	beq	.L2200
+	ldr	r2, [sp, #8]
+	mov	r8, #0
+	ldr	r0, [fp, #748]
+	mov	r9, #36
+	adds	r6, r2, #0
 	mov	r2, r5
-	ldr	r0, [r4, #744]
-	movs	r7, #0
-	adds	r9, r3, #0
-	mov	r10, #36
 	it	ne
-	movne	r9, #1
-	mov	r1, r9
+	movne	r6, #1
+	strb	r8, [r3, #2828]
+	str	r3, [sp, #8]
+	mov	r1, r6
 	bl	FlashEraseBlocks
-.L2162:
-	uxth	r3, r7
-	cmp	r3, r5
-	bcs	.L2201
-	mul	r3, r10, r7
-	ldr	r2, [r4, #744]
-	adds	r0, r2, r3
-	ldr	r3, [r2, r3]
-	adds	r3, r3, #1
-	bne	.L2163
+	ldrb	r2, [sp, #16]	@ zero_extendqisi2
+	ldr	r3, [sp, #8]
+	strb	r2, [r3, #2828]
+.L2181:
+	uxth	r2, r8
+	cmp	r2, r5
+	bcs	.L2220
+	mul	r2, r9, r8
+	ldr	r1, [fp, #748]
+	adds	r0, r1, r2
+	ldr	r2, [r1, r2]
+	adds	r2, r2, #1
+	bne	.L2182
 	ldr	r0, [r0, #4]
-	add	r8, r8, #1
+	adds	r4, r4, #1
 	ubfx	r0, r0, #10, #16
-	uxth	r8, r8
+	uxth	r4, r4
 	bl	FtlBbmMapBadBlock
-.L2163:
-	adds	r7, r7, #1
-	b	.L2162
-.L2201:
-	ldr	r3, [sp, #4]
-	cbnz	r3, .L2165
+.L2182:
+	add	r8, r8, #1
+	b	.L2181
+.L2220:
+	ldr	r3, [sp]
+	cbnz	r3, .L2184
 	movs	r3, #6
-	uxth	r5, r9
+	uxth	r6, r6
 	str	r3, [sp, #12]
-	mov	fp, #1
-	b	.L2166
-.L2165:
-	ldrb	r3, [r6, #76]	@ zero_extendqisi2
-	ldrh	fp, [r6, #2900]
-	cbnz	r3, .L2183
-	lsr	r3, fp, #2
-	movs	r5, #1
+	movs	r3, #1
+	str	r3, [sp, #8]
+	b	.L2185
+.L2184:
+	ldrh	r3, [r7, #2912]
+	str	r3, [sp, #8]
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	cbnz	r3, .L2202
+	ldr	r3, [sp, #8]
+	movs	r6, #1
+	lsrs	r3, r3, #2
 	str	r3, [sp, #12]
-	b	.L2166
-.L2183:
-	movs	r5, #1
-	str	r5, [sp, #12]
-.L2166:
+	b	.L2185
+.L2202:
+	movs	r6, #1
+	str	r6, [sp, #12]
+.L2185:
+	ldr	r8, .L2224+4
 	movs	r7, #0
-.L2176:
-	mov	r9, #0
-	mov	r6, r9
-.L2167:
-	ldr	r3, .L2205+4
-	ldrh	r2, [r3, #2828]
-	uxth	r3, r9
-	cmp	r2, r3
-	bls	.L2202
+	mov	r10, r8
+.L2195:
+	mov	fp, #0
+	mov	r5, fp
+.L2186:
+	ldr	r9, .L2224
+	uxth	r3, fp
+	ldrh	r1, [r9, #2840]
+	cmp	r1, r3
+	bls	.L2221
 	movs	r2, #36
-	ldr	r1, [r4, #744]
-	movs	r0, #0
-	muls	r2, r3, r2
-	str	r0, [r1, r2]
-	ldr	r2, .L2205+4
-	ldr	r1, [sp, #8]
+	ldr	r0, [r8, #748]
+	mul	r1, r2, r3
+	movs	r2, #0
+	str	r2, [r0, r1]
+	ldr	r2, .L2224
+	ldr	r1, [sp, #4]
 	add	r3, r3, r2
-	ldrb	r0, [r3, #2856]	@ zero_extendqisi2
+	ldrb	r0, [r3, #2868]	@ zero_extendqisi2
 	bl	V2P_block
-	ldr	r3, [sp, #4]
-	mov	r10, r0
-	cbz	r3, .L2168
+	ldr	r3, [sp]
+	mov	r9, r0
+	cbz	r3, .L2187
 	bl	IsBlkInVendorPart
-	cbnz	r0, .L2169
-.L2168:
-	mov	r0, r10
+	cbnz	r0, .L2188
+.L2187:
+	mov	r0, r9
 	bl	FtlBbmIsBadBlock
-	cbnz	r0, .L2169
-	ldr	r2, [r4, #744]
+	cbnz	r0, .L2188
+	ldr	r1, [r10, #748]
 	movs	r3, #36
-	ldr	r1, .L2205
-	mla	r2, r3, r6, r2
-	add	r3, r7, r10, lsl #10
-	ldr	r1, [r1, #1792]
-	str	r3, [r2, #4]
-	ldr	r3, [r4, #1788]
-	str	r3, [r2, #8]
-	ldr	r3, .L2205+4
-	ldrh	r3, [r3, #2910]
-	muls	r3, r6, r3
-	add	r6, r6, #1
+	ldr	r0, [r8, #1796]
+	mla	r1, r3, r5, r1
+	add	r3, r7, r9, lsl #10
+	str	r3, [r1, #4]
+	ldr	r3, [r10, #1792]
+	str	r3, [r1, #8]
+	ldr	r3, .L2224
+	ldrh	r3, [r3, #2922]
+	muls	r3, r5, r3
+	add	r5, r5, #1
 	it	mi
 	addmi	r3, r3, #3
 	bic	r3, r3, #3
-	uxth	r6, r6
-	add	r3, r3, r1
-	str	r3, [r2, #12]
-.L2169:
-	add	r9, r9, #1
-	b	.L2167
-.L2202:
-	cmp	r6, #0
-	beq	.L2181
-	ldr	r0, [r4, #744]
-	mov	r1, r6
-	mov	r2, r5
+	uxth	r5, r5
+	add	r3, r3, r0
+	str	r3, [r1, #12]
+.L2188:
+	add	fp, fp, #1
+	b	.L2186
+.L2221:
+	cmp	r5, #0
+	beq	.L2200
+	mov	r2, r6
 	movs	r3, #1
+	ldr	r0, [r8, #748]
+	mov	r1, r5
+	mov	fp, #0
+	strb	fp, [r9, #2828]
 	bl	FlashProgPages
-	mov	r9, #0
-	mov	r10, #36
-.L2173:
-	uxth	r3, r9
-	cmp	r3, r6
-	bcs	.L2203
-	mul	r3, r10, r9
-	ldr	r2, [r4, #744]
-	adds	r0, r2, r3
-	ldr	r3, [r2, r3]
-	cbz	r3, .L2174
+	ldrb	r3, [sp, #16]	@ zero_extendqisi2
+	movs	r2, #36
+	strb	r3, [r9, #2828]
+	ldr	r9, .L2224+4
+.L2192:
+	uxth	r3, fp
+	cmp	r3, r5
+	bcs	.L2222
+	mul	r3, r2, fp
+	ldr	r1, [r10, #748]
+	adds	r0, r1, r3
+	ldr	r3, [r1, r3]
+	cbz	r3, .L2193
 	ldr	r0, [r0, #4]
-	add	r8, r8, #1
+	adds	r4, r4, #1
+	str	r2, [sp, #20]
 	ubfx	r0, r0, #10, #16
-	uxth	r8, r8
+	uxth	r4, r4
 	bl	FtlBbmMapBadBlock
-.L2174:
-	add	r9, r9, #1
-	b	.L2173
-.L2203:
+	ldr	r2, [sp, #20]
+.L2193:
+	add	fp, fp, #1
+	b	.L2192
+.L2222:
 	ldr	r3, [sp, #12]
 	add	r7, r7, r3
+	ldr	r3, [sp, #8]
 	uxth	r7, r7
-	cmp	r7, fp
-	bcc	.L2176
+	cmp	r7, r3
+	bcc	.L2195
 	movs	r7, #0
-	mov	r9, #36
-.L2177:
+	mov	r8, #36
+.L2196:
 	uxth	r3, r7
-	cmp	r3, r6
-	bcs	.L2204
-	ldr	r3, [sp, #4]
-	cbz	r3, .L2178
-	mul	r3, r9, r7
-	ldr	r2, [r4, #744]
+	cmp	r3, r5
+	bcs	.L2223
+	ldr	r3, [sp]
+	cbz	r3, .L2197
+	mul	r3, r8, r7
+	ldr	r2, [r9, #748]
 	adds	r1, r2, r3
 	ldr	r3, [r2, r3]
-	cbnz	r3, .L2178
+	cbnz	r3, .L2197
 	ldr	r0, [r1, #4]
 	movs	r1, #1
 	ubfx	r0, r0, #10, #16
 	bl	FtlFreeSysBlkQueueIn
-.L2178:
+.L2197:
 	adds	r7, r7, #1
-	b	.L2177
-.L2204:
-	ldr	r3, [sp, #8]
-	cmp	r3, #63
-	bls	.L2180
+	b	.L2196
+.L2223:
 	ldr	r3, [sp, #4]
-	cbz	r3, .L2181
-.L2180:
-	ldr	r0, [r4, #744]
-	mov	r1, r5
-	mov	r2, r6
+	cmp	r3, #63
+	bls	.L2199
+	ldr	r3, [sp]
+	cbz	r3, .L2200
+.L2199:
+	ldr	r0, [r9, #748]
+	mov	r1, r6
+	mov	r2, r5
 	bl	FlashEraseBlocks
-.L2181:
-	mov	r0, r8
-	b	.L2154
-.L2182:
+.L2200:
+	mov	r0, r4
+	b	.L2173
+.L2201:
 	movs	r0, #0
-.L2154:
-	add	sp, sp, #20
+.L2173:
+	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2206:
+.L2225:
 	.align	2
-.L2205:
-	.word	.LANCHOR2
+.L2224:
 	.word	.LANCHOR0
+	.word	.LANCHOR2
 	.fnend
 	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
 	.align	1
@@ -13557,144 +13684,144 @@ FtlBbmTblFlush:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r4, .L2219
-	ldr	r5, [r4, #740]
+	ldr	r4, .L2238
+	ldr	r5, [r4, #744]
 	cmp	r5, #0
-	bne	.L2209
-	ldr	r7, .L2219+4
+	bne	.L2228
+	ldr	r7, .L2238+4
 	mov	r1, r5
-	ldr	r0, [r4, #756]
-	ldr	r3, [r4, #1796]
-	add	r8, r7, #2992
-	ldrh	r2, [r7, #2908]
-	str	r0, [r4, #4056]
-	str	r3, [r4, #4060]
+	ldr	r0, [r4, #1776]
+	ldr	r3, [r4, #1800]
+	addw	r8, r7, #2996
+	ldrh	r2, [r7, #2920]
+	str	r0, [r4, #4060]
+	str	r3, [r4, #4064]
 	bl	ftl_memset
-.L2210:
-	ldrh	r3, [r7, #2850]
-	ldr	r6, .L2219+4
+.L2229:
+	ldrh	r3, [r7, #2862]
+	ldr	r6, .L2238+4
 	cmp	r5, r3
-	bge	.L2218
-	ldrh	r2, [r4, #1860]
-	ldr	r3, [r4, #4056]
+	bge	.L2237
+	ldrh	r2, [r4, #1864]
+	ldr	r3, [r4, #4060]
 	ldr	r1, [r8, #4]!
 	mul	r0, r2, r5
 	lsls	r2, r2, #2
 	adds	r5, r5, #1
 	add	r0, r3, r0, lsl #2
 	bl	ftl_memcpy
-	b	.L2210
-.L2218:
-	ldr	r8, [r4, #4060]
+	b	.L2229
+.L2237:
+	ldr	r8, [r4, #4064]
 	movs	r1, #255
 	movs	r2, #16
 	mov	r9, #0
-	ldr	r10, .L2219
+	ldr	r10, .L2238
 	mov	r5, r6
 	mov	r0, r8
 	mov	fp, r9
 	bl	memset
 	movw	r3, #61649
 	strh	r3, [r8]	@ movhi
-	ldr	r3, [r6, #2976]
+	ldr	r3, [r6, #2980]
 	str	r3, [r8, #4]
-	ldrh	r3, [r6, #2968]
-	strh	r3, [r8, #2]	@ movhi
 	ldrh	r3, [r6, #2972]
+	strh	r3, [r8, #2]	@ movhi
+	ldrh	r3, [r6, #2976]
 	strh	r3, [r8, #8]	@ movhi
-	ldrh	r3, [r6, #2974]
+	ldrh	r3, [r6, #2978]
 	strh	r3, [r8, #10]	@ movhi
-	ldr	r3, [r6, #2824]
+	ldr	r3, [r6, #2836]
 	strh	r3, [r8, #12]	@ movhi
-.L2212:
-	ldr	r3, [r4, #756]
+.L2231:
+	ldr	r3, [r4, #1776]
 	movs	r6, #0
-	ldrh	r1, [r7, #2968]
-	ldrh	r2, [r7, #2970]
-	str	r3, [r4, #4056]
-	ldr	r3, [r4, #1796]
-	str	r6, [r4, #4048]
+	ldrh	r1, [r7, #2972]
+	ldrh	r2, [r7, #2974]
 	str	r3, [r4, #4060]
+	ldr	r3, [r4, #1800]
+	str	r6, [r4, #4052]
+	str	r3, [r4, #4064]
 	orr	r3, r2, r1, lsl #10
 	ldrh	r0, [r8, #10]
-	str	r3, [r4, #4052]
-	ldrh	r3, [r7, #2972]
+	str	r3, [r4, #4056]
+	ldrh	r3, [r7, #2976]
 	str	r0, [sp]
-	ldr	r0, .L2219+8
+	ldr	r0, .L2238+8
 	bl	printk
 	movs	r1, #1
-	ldr	r0, .L2219+12
+	ldr	r0, .L2238+12
 	mov	r2, r1
 	mov	r3, r1
 	bl	FlashProgPages
-	ldrh	r3, [r7, #2900]
-	ldrh	r2, [r7, #2970]
+	ldrh	r3, [r7, #2912]
+	ldrh	r2, [r7, #2974]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L2213
-	ldr	r3, [r5, #2976]
+	blt	.L2232
+	ldr	r3, [r5, #2980]
 	movs	r1, #1
-	ldrh	r2, [r5, #2968]
+	ldrh	r2, [r5, #2972]
 	adds	r3, r3, #1
-	ldr	r0, [r10, #744]
-	str	r3, [r5, #2976]
+	ldr	r0, [r10, #748]
+	str	r3, [r5, #2980]
 	str	r3, [r8, #4]
-	ldrh	r3, [r5, #2972]
+	ldrh	r3, [r5, #2976]
 	strh	r2, [r8, #8]	@ movhi
-	strh	r2, [r5, #2972]	@ movhi
+	strh	r2, [r5, #2976]	@ movhi
 	mov	r2, r1
-	strh	r3, [r5, #2968]	@ movhi
+	strh	r3, [r5, #2972]	@ movhi
 	lsls	r3, r3, #10
-	str	r3, [r10, #4052]
+	str	r3, [r10, #4056]
 	str	r3, [r0, #4]
-	strh	r6, [r5, #2970]	@ movhi
+	strh	r6, [r5, #2974]	@ movhi
 	bl	FlashEraseBlocks
 	movs	r1, #1
-	ldr	r0, .L2219+12
+	ldr	r0, .L2238+12
 	mov	r2, r1
 	mov	r3, r1
 	bl	FlashProgPages
-.L2213:
-	ldrh	r3, [r7, #2970]
-	ldr	r6, .L2219
+.L2232:
+	ldrh	r3, [r7, #2974]
+	ldr	r6, .L2238
 	adds	r3, r3, #1
-	strh	r3, [r7, #2970]	@ movhi
-	ldr	r3, [r4, #4048]
+	strh	r3, [r7, #2974]	@ movhi
+	ldr	r3, [r4, #4052]
 	adds	r3, r3, #1
-	bne	.L2214
+	bne	.L2233
 	add	r9, r9, #1
-	ldr	r0, .L2219+16
-	ldr	r1, [r10, #4052]
+	ldr	r0, .L2238+16
+	ldr	r1, [r10, #4056]
 	uxth	r9, r9
 	bl	printk
 	cmp	r9, #3
-	bls	.L2212
-	ldr	r0, .L2219+20
+	bls	.L2231
+	ldr	r0, .L2238+20
 	mov	r2, r9
-	ldr	r1, [r6, #4052]
+	ldr	r1, [r6, #4056]
 	bl	printk
 	movs	r3, #1
-	str	r3, [r6, #740]
-	b	.L2209
-.L2214:
+	str	r3, [r6, #744]
+	b	.L2228
+.L2233:
 	cmp	fp, #0
-	bne	.L2209
+	bne	.L2228
 	mov	fp, #1
-	b	.L2212
-.L2209:
+	b	.L2231
+.L2228:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2220:
+.L2239:
 	.align	2
-.L2219:
+.L2238:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC111
-	.word	.LANCHOR2+4048
-	.word	.LC112
-	.word	.LC113
+	.word	.LC114
+	.word	.LANCHOR2+4052
+	.word	.LC115
+	.word	.LC116
 	.fnend
 	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
 	.align	1
@@ -13709,97 +13836,97 @@ allocate_data_superblock:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
-	ldr	r4, .L2277
+	ldr	r4, .L2296
 	.pad #20
 	sub	sp, sp, #20
-	ldr	r3, [r4, #740]
+	ldr	r3, [r4, #744]
 	cmp	r3, #0
-	bne	.L2222
-	ldr	r10, .L2277+16
-	mov	r7, r4
-.L2223:
-	ldr	r3, .L2277+4
+	bne	.L2241
+	ldr	r10, .L2296+16
+	mov	r8, r4
+.L2242:
+	ldr	r3, .L2296+4
 	ldrb	r2, [r5, #8]	@ zero_extendqisi2
 	cmp	r5, r3
-	bne	.L2224
-	ldrh	lr, [r7, #784]
-	ldr	r6, [r7, #1652]
-	lsr	r1, lr, #1
-	mul	r0, r6, lr
+	bne	.L2243
+	ldrh	r7, [r8, #832]
+	ldr	r6, [r8, #1648]
+	lsrs	r1, r7, #1
+	mul	r0, r6, r7
 	adds	r3, r1, #1
 	add	r3, r3, r0, lsr #2
-	ldr	r0, [r7, #948]
+	ldr	r0, [r10, #2832]
 	uxth	r3, r3
-	cbz	r0, .L2247
-	ldr	r0, [r7, #1008]
+	cbz	r0, .L2266
+	ldr	r0, [r8, #1052]
 	cmp	r0, #29
-	bhi	.L2247
+	bhi	.L2266
 	cmp	r0, #2
-	bls	.L2252
-	tst	lr, #1
-	beq	.L2225
-	cbz	r6, .L2249
-	b	.L2225
-.L2224:
+	bls	.L2271
+	lsls	r3, r7, #31
+	bpl	.L2244
+	cbz	r6, .L2268
+	b	.L2244
+.L2243:
 	cmp	r2, #1
-	bne	.L2252
-	ldrh	r3, [r10, #2848]
+	bne	.L2271
+	ldrh	r3, [r10, #2860]
 	cmp	r3, #1
-	beq	.L2252
+	beq	.L2271
 	ldrb	r3, [r10, #76]	@ zero_extendqisi2
-	cbnz	r3, .L2252
-	ldrh	r0, [r7, #784]
-	ldr	r3, [r7, #948]
+	cbnz	r3, .L2271
+	ldrh	r0, [r8, #832]
+	ldr	r3, [r10, #2832]
 	lsrs	r1, r0, #3
-	cbz	r3, .L2225
-	ldr	r3, [r7, #1008]
+	cbz	r3, .L2244
+	ldr	r3, [r8, #1052]
 	cmp	r3, #1
-	bhi	.L2225
+	bhi	.L2244
 	rsb	r0, r0, r0, lsl #3
 	ubfx	r1, r0, #3, #16
-	b	.L2225
-.L2247:
+	b	.L2244
+.L2266:
 	mov	r1, r3
-.L2225:
-	cbz	r1, .L2226
+.L2244:
+	cbz	r1, .L2245
 	subs	r1, r1, #1
 	uxth	r1, r1
-	b	.L2226
-.L2249:
+	b	.L2245
+.L2268:
 	mov	r1, r6
-	b	.L2226
-.L2252:
+	b	.L2245
+.L2271:
 	movs	r1, #0
-.L2226:
-	ldr	r0, .L2277+8
+.L2245:
+	ldr	r0, .L2296+8
 	bl	List_pop_index_node
-	ldrh	r3, [r4, #784]
+	ldrh	r3, [r4, #832]
 	subs	r3, r3, #1
-	strh	r3, [r4, #784]	@ movhi
+	strh	r3, [r4, #832]	@ movhi
 	uxth	r6, r0
 	mov	r0, r5
 	strh	r6, [r5]	@ movhi
 	bl	make_superblock
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbz	r3, .L2227
-	ldr	r0, [r7, #744]
+	cbz	r3, .L2246
+	ldr	r0, [r8, #748]
 	movs	r2, #36
-	ldrh	ip, [r10, #2828]
-	mov	r8, #0
+	ldrh	r7, [r10, #2840]
 	add	lr, r5, #14
-	ldr	r9, .L2277+16
+	ldr	r9, .L2296+16
 	mov	r3, r0
-	mla	r1, r2, ip, r0
-	mov	ip, r8
+	mla	r1, r2, r7, r0
+	movs	r7, #0
+	mov	ip, r7
 	str	r1, [sp]
-	b	.L2228
-.L2227:
-	ldr	r3, [r7, #768]
-	b	.L2272
-.L2228:
+	b	.L2247
+.L2246:
+	ldr	r3, [r8, #816]
+	b	.L2291
+.L2247:
 	ldr	r1, [sp]
 	cmp	r3, r1
-	beq	.L2274
+	beq	.L2293
 	str	ip, [r3, #8]
 	movw	fp, #65535
 	str	ip, [r3, #12]
@@ -13808,122 +13935,122 @@ allocate_data_superblock:
 	cmp	r1, fp
 	itttt	ne
 	lslne	r1, r1, #10
-	mlane	fp, r2, r8, r0
-	addne	r8, r8, #1
-	uxthne	r8, r8
+	mlane	fp, r2, r7, r0
+	addne	r7, r7, #1
+	uxthne	r7, r7
 	it	ne
 	strne	r1, [fp, #4]
-	b	.L2228
-.L2274:
-	ldr	r3, [r4, #948]
-	cbz	r3, .L2232
-	ldr	r3, .L2277+12
+	b	.L2247
+.L2293:
+	ldr	r3, [r9, #2832]
+	cbz	r3, .L2251
+	ldr	r3, .L2296+12
 	cmp	r5, r3
-	bne	.L2232
-	ldr	r3, [r7, #748]
+	bne	.L2251
+	ldr	r3, [r8, #752]
 	ldrh	r3, [r3, r6, lsl #1]
 	cmp	r3, #30
 	itt	hi
 	movhi	r3, #0
-	strbhi	r3, [r7, #796]
-.L2232:
+	strbhi	r3, [r8, #844]
+.L2251:
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	ldr	r2, [r4, #748]
-	cbnz	r3, .L2233
+	ldr	r2, [r4, #752]
+	cbnz	r3, .L2252
 	ldrh	r1, [r2, r6, lsl #1]
-	cbz	r1, .L2253
-	ldrh	r3, [r9, #2888]
+	cbz	r1, .L2272
+	ldrh	r3, [r9, #2900]
 	add	r3, r3, r1
 	uxth	r3, r3
-	b	.L2234
-.L2253:
+	b	.L2253
+.L2272:
 	movs	r3, #2
-.L2234:
+.L2253:
 	strh	r3, [r2, r6, lsl #1]	@ movhi
 	mov	r0, r6
-	ldr	r3, [r4, #992]
+	ldr	r3, [r4, #1036]
 	movs	r1, #0
 	adds	r3, r3, #1
-	str	r3, [r4, #992]
+	str	r3, [r4, #1036]
 	bl	ftl_set_blk_mode
-	b	.L2235
-.L2233:
+	b	.L2254
+.L2252:
 	ldrh	r3, [r2, r6, lsl #1]
 	lsrs	r0, r6, #5
 	and	r1, r6, #31
 	adds	r3, r3, #1
 	strh	r3, [r2, r6, lsl #1]	@ movhi
-	ldr	r3, [r4, #996]
-	ldr	r2, [r4, #944]
+	ldr	r3, [r4, #1040]
+	ldr	r2, [r4, #992]
 	adds	r3, r3, #1
-	str	r3, [r4, #996]
+	str	r3, [r4, #1040]
 	movs	r3, #1
 	lsls	r3, r3, r1
 	ldr	r1, [r2, r0, lsl #2]
 	orrs	r3, r3, r1
 	str	r3, [r2, r0, lsl #2]
-.L2235:
-	ldr	r3, [r4, #748]
-	ldr	r2, [r4, #1004]
-	ldr	r0, [r4, #992]
+.L2254:
+	ldr	r3, [r4, #752]
+	ldr	r2, [r4, #1048]
+	ldr	r0, [r4, #1036]
 	ldrh	r3, [r3, r6, lsl #1]
-	ldrh	r1, [r9, #2836]
+	ldrh	r1, [r9, #2848]
 	cmp	r3, r2
-	ldrh	r2, [r9, #2888]
+	ldrh	r2, [r9, #2900]
 	it	hi
-	strhi	r3, [r7, #1004]
-	ldr	r3, [r4, #996]
+	strhi	r3, [r8, #1048]
+	ldr	r3, [r4, #1040]
 	mla	r0, r0, r2, r3
 	bl	__aeabi_uidiv
-	ldr	r2, [r4, #1816]
-	ldr	r1, [r4, #744]
+	ldr	r2, [r4, #1820]
+	ldr	r1, [r4, #748]
 	ldr	r3, [r2, #16]
 	adds	r3, r3, #1
 	str	r3, [r2, #16]
 	movs	r3, #36
 	adds	r2, r1, #4
-	mla	r3, r3, r8, r1
+	mla	r3, r3, r7, r1
 	adds	r3, r3, #40
-	str	r0, [r4, #1000]
-.L2237:
+	str	r0, [r4, #1044]
+.L2256:
 	adds	r2, r2, #36
 	cmp	r2, r3
-	beq	.L2275
+	beq	.L2294
 	ldr	r1, [r2, #-36]
 	bic	r1, r1, #1020
 	bic	r1, r1, #3
 	str	r1, [r2, #-36]
-	b	.L2237
-.L2275:
+	b	.L2256
+.L2294:
 	ldrb	r3, [r9, #76]	@ zero_extendqisi2
-	cbz	r3, .L2239
+	cbz	r3, .L2258
 	ldrb	r3, [r5, #8]	@ zero_extendqisi2
-	mov	r2, r8
-	ldr	r0, [r4, #744]
+	mov	r2, r7
+	ldr	r0, [r4, #748]
 	cmp	r3, #1
 	ite	eq
 	moveq	r1, #0
 	movne	r1, #1
 	bl	FlashEraseBlocks
-.L2239:
+.L2258:
 	ldrb	r1, [r5, #8]	@ zero_extendqisi2
-	mov	r2, r8
-	ldr	r0, [r4, #744]
+	mov	r2, r7
+	ldr	r0, [r4, #748]
 	mov	fp, #0
 	bl	FlashEraseBlocks
 	add	r1, r5, #16
 	mov	ip, #36
 	mov	r2, fp
-.L2241:
+.L2260:
 	uxth	r3, fp
-	cmp	r3, r8
-	bcs	.L2276
+	cmp	r3, r7
+	bcs	.L2295
 	mul	r3, ip, fp
-	ldr	lr, [r4, #744]
+	ldr	lr, [r4, #748]
 	add	r0, lr, r3
 	ldr	r3, [lr, r3]
 	cmp	r3, #-1
-	bne	.L2242
+	bne	.L2261
 	ldr	r0, [r0, #4]
 	adds	r2, r2, #1
 	str	ip, [sp, #12]
@@ -13940,51 +14067,51 @@ allocate_data_superblock:
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
 	subs	r3, r3, #1
 	strb	r3, [r5, #7]
-.L2242:
+.L2261:
 	add	fp, fp, #1
 	adds	r1, r1, #2
-	b	.L2241
-.L2276:
-	cbz	r2, .L2244
+	b	.L2260
+.L2295:
+	cbz	r2, .L2263
 	mov	r0, r6
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L2244:
+.L2263:
 	ldrb	r3, [r5, #7]	@ zero_extendqisi2
-	cbnz	r3, .L2245
-	ldr	r3, [r4, #768]
-.L2272:
+	cbnz	r3, .L2264
+	ldr	r3, [r4, #816]
+.L2291:
 	movw	r2, #65535
 	strh	r2, [r3, r6, lsl #1]	@ movhi
-	b	.L2223
-.L2245:
-	ldrh	r2, [r9, #2898]
+	b	.L2242
+.L2264:
+	ldrh	r2, [r9, #2910]
 	strh	r6, [r5]	@ movhi
 	smulbb	r3, r2, r3
 	movs	r2, #0
 	strh	r2, [r5, #2]	@ movhi
 	strb	r2, [r5, #6]
-	ldr	r2, [r4, #984]
+	ldr	r2, [r4, #1028]
 	uxth	r3, r3
 	strh	r3, [r5, #4]	@ movhi
 	str	r2, [r5, #12]
 	adds	r2, r2, #1
-	str	r2, [r4, #984]
-	ldr	r2, [r4, #768]
+	str	r2, [r4, #1028]
+	ldr	r2, [r4, #816]
 	ldrh	r1, [r5]
 	strh	r3, [r2, r1, lsl #1]	@ movhi
-.L2222:
+.L2241:
 	movs	r0, #0
 	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2278:
+.L2297:
 	.align	2
-.L2277:
+.L2296:
 	.word	.LANCHOR2
-	.word	.LANCHOR2+884
-	.word	.LANCHOR2+780
-	.word	.LANCHOR2+788
+	.word	.LANCHOR2+932
+	.word	.LANCHOR2+828
+	.word	.LANCHOR2+836
 	.word	.LANCHOR0
 	.fnend
 	.size	allocate_data_superblock, .-allocate_data_superblock
@@ -14000,77 +14127,77 @@ FtlGcFreeBadSuperBlk:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r5, .L2292
+	ldr	r5, .L2311
 	str	r0, [sp]
-	ldrh	r3, [r5, #1698]
+	ldrh	r3, [r5, #1694]
 	cmp	r3, #0
-	beq	.L2281
-	ldr	r7, .L2292+4
+	beq	.L2300
+	ldr	r7, .L2311+4
 	mov	r10, #0
 	mov	r8, r5
-.L2280:
-	ldrh	r2, [r7, #2828]
+.L2299:
+	ldrh	r2, [r7, #2840]
 	uxth	r3, r10
 	cmp	r2, r3
-	bls	.L2289
+	bls	.L2308
 	add	r3, r3, r7
 	ldr	r1, [sp]
 	mov	fp, #0
-	ldrb	r0, [r3, #2856]	@ zero_extendqisi2
+	ldrb	r0, [r3, #2868]	@ zero_extendqisi2
 	bl	V2P_block
-	ldr	r2, .L2292+8
+	ldr	r2, .L2311+8
 	mov	r9, r0
-.L2282:
-	ldrh	r3, [r5, #1698]
+.L2301:
+	ldrh	r3, [r5, #1694]
 	uxth	r4, fp
 	cmp	r3, r4
-	bls	.L2290
+	bls	.L2309
 	lsls	r6, r4, #1
 	add	r3, r8, r6
-	ldrh	r3, [r3, #1700]
+	ldrh	r3, [r3, #1696]
 	cmp	r3, r9
-	bne	.L2283
+	bne	.L2302
 	mov	r1, r9
-	ldr	r0, .L2292+12
+	ldr	r0, .L2311+12
 	str	r2, [sp, #4]
 	bl	printk
 	mov	r0, r9
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldrh	r1, [r8, #1698]
 	ldr	r2, [sp, #4]
+	ldrh	r1, [r8, #1694]
 	adds	r3, r2, r6
-.L2284:
+.L2303:
 	cmp	r4, r1
-	bcs	.L2291
+	bcs	.L2310
 	ldrh	r0, [r3, #2]
 	adds	r4, r4, #1
 	uxth	r4, r4
 	strh	r0, [r3], #2	@ movhi
-	b	.L2284
-.L2291:
+	b	.L2303
+.L2310:
 	subs	r1, r1, #1
-	strh	r1, [r5, #1698]	@ movhi
-.L2283:
+	strh	r1, [r5, #1694]	@ movhi
+.L2302:
 	add	fp, fp, #1
-	b	.L2282
-.L2290:
+	b	.L2301
+.L2309:
 	add	r10, r10, #1
-	b	.L2280
-.L2289:
+	b	.L2299
+.L2308:
 	bl	FtlGcReFreshBadBlk
-.L2281:
+.L2300:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2293:
+.L2312:
 	.align	2
-.L2292:
+.L2311:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR2+1700
-	.word	.LC114
+	.word	.LANCHOR2+1696
+	.word	.LC117
 	.fnend
 	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
 	.align	1
@@ -14082,53 +14209,53 @@ update_vpc_list:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r2, .L2303
+	ldr	r2, .L2322
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	mov	r4, r0
-	ldr	r3, [r2, #768]
+	ldr	r3, [r2, #816]
 	mov	r5, r2
 	ldrh	r3, [r3, r0, lsl #1]
-	cbnz	r3, .L2295
-	ldrh	r1, [r2, #1076]
+	cbnz	r3, .L2314
+	ldrh	r1, [r2, #1072]
 	cmp	r1, r0
-	bne	.L2296
+	bne	.L2315
 	movw	r3, #65535
-	strh	r3, [r2, #1076]	@ movhi
-	b	.L2297
-.L2296:
-	ldrh	r1, [r2, #788]
-	cmp	r1, r0
-	beq	.L2302
+	strh	r3, [r2, #1072]	@ movhi
+	b	.L2316
+.L2315:
 	ldrh	r1, [r2, #836]
 	cmp	r1, r0
-	beq	.L2302
-	ldrh	r2, [r2, #884]
+	beq	.L2321
+	ldrh	r1, [r2, #884]
+	cmp	r1, r0
+	beq	.L2321
+	ldrh	r2, [r2, #932]
 	cmp	r2, r0
-	beq	.L2302
-.L2297:
+	beq	.L2321
+.L2316:
 	mov	r1, r4
-	ldr	r0, .L2303+4
+	ldr	r0, .L2322+4
 	bl	List_remove_node
-	ldrh	r3, [r5, #776]
+	ldrh	r3, [r5, #824]
 	mov	r0, r4
 	subs	r3, r3, #1
-	strh	r3, [r5, #776]	@ movhi
+	strh	r3, [r5, #824]	@ movhi
 	bl	free_data_superblock
 	mov	r0, r4
 	bl	FtlGcFreeBadSuperBlk
 	movs	r0, #1
 	pop	{r3, r4, r5, pc}
-.L2295:
+.L2314:
 	bl	List_update_data_list
-.L2302:
+.L2321:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L2304:
+.L2323:
 	.align	2
-.L2303:
+.L2322:
 	.word	.LANCHOR2
-	.word	.LANCHOR2+764
+	.word	.LANCHOR2+812
 	.fnend
 	.size	update_vpc_list, .-update_vpc_list
 	.align	1
@@ -14145,45 +14272,45 @@ decrement_vpc_count:
 	movw	r3, #65535
 	cmp	r0, r3
 	mov	r5, r0
-	ldr	r3, .L2311
-	beq	.L2306
-	ldr	r2, [r3, #768]
+	ldr	r3, .L2330
+	beq	.L2325
+	ldr	r2, [r3, #816]
 	ldrh	r4, [r2, r0, lsl #1]
-	cbnz	r4, .L2307
+	cbnz	r4, .L2326
 	mov	r1, r5
 	mov	r2, r4
-	ldr	r0, .L2311+4
+	ldr	r0, .L2330+4
 	bl	printk
 	mov	r0, r4
 	pop	{r3, r4, r5, pc}
-.L2307:
+.L2326:
 	subs	r4, r4, #1
 	strh	r4, [r2, r0, lsl #1]	@ movhi
-.L2306:
-	ldrh	r0, [r3, #1916]
+.L2325:
+	ldrh	r0, [r3, #1920]
 	movw	r3, #65535
-	ldr	r4, .L2311
+	ldr	r4, .L2330
 	cmp	r0, r3
-	bne	.L2309
-	strh	r5, [r4, #1916]	@ movhi
-	b	.L2310
-.L2309:
+	bne	.L2328
+	strh	r5, [r4, #1920]	@ movhi
+	b	.L2329
+.L2328:
 	cmp	r0, r5
-	beq	.L2310
+	beq	.L2329
 	bl	update_vpc_list
-	strh	r5, [r4, #1916]	@ movhi
+	strh	r5, [r4, #1920]	@ movhi
 	adds	r0, r0, #0
 	it	ne
 	movne	r0, #1
 	pop	{r3, r4, r5, pc}
-.L2310:
+.L2329:
 	movs	r0, #0
 	pop	{r3, r4, r5, pc}
-.L2312:
+.L2331:
 	.align	2
-.L2311:
+.L2330:
 	.word	.LANCHOR2
-	.word	.LC115
+	.word	.LC118
 	.fnend
 	.size	decrement_vpc_count, .-decrement_vpc_count
 	.align	1
@@ -14200,22 +14327,22 @@ FtlSlcSuperblockCheck:
 	mov	r4, r0
 	ldrh	r3, [r0, #4]
 	cmp	r3, #0
-	beq	.L2313
+	beq	.L2332
 	ldrh	r3, [r0]
 	movw	r5, #65535
 	cmp	r3, r5
-	beq	.L2313
+	beq	.L2332
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	movs	r7, #0
-	ldr	r6, .L2325
+	ldr	r6, .L2344
 	adds	r3, r3, #8
 	ldrh	r3, [r0, r3, lsl #1]
-.L2317:
+.L2336:
 	cmp	r3, r5
-	bne	.L2324
-.L2319:
+	bne	.L2343
+.L2338:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	ldrh	r2, [r6, #2828]
+	ldrh	r2, [r6, #2840]
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	strb	r3, [r4, #6]
@@ -14228,18 +14355,18 @@ FtlSlcSuperblockCheck:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r3, [r4, r3, lsl #1]
-	b	.L2317
-.L2324:
+	b	.L2336
+.L2343:
 	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	cmp	r1, #1
-	bne	.L2320
+	bne	.L2339
 	ldrb	r3, [r6, #76]	@ zero_extendqisi2
-	cbnz	r3, .L2320
+	cbnz	r3, .L2339
 	ldrh	r3, [r4, #2]
 	add	r3, r6, r3, lsl #1
 	ldrh	r3, [r3, #592]
 	cmp	r3, r5
-	bne	.L2320
+	bne	.L2339
 	ldrh	r3, [r4, #4]
 	ldrh	r0, [r4]
 	subs	r3, r3, #1
@@ -14247,39 +14374,39 @@ FtlSlcSuperblockCheck:
 	bl	decrement_vpc_count
 	ldrh	r2, [r4, #4]
 	cmp	r2, #0
-	bne	.L2319
+	bne	.L2338
 	ldrh	r3, [r4, #2]
 	strb	r2, [r4, #6]
 	adds	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2320:
-	ldr	r2, .L2325
+.L2339:
+	ldr	r2, .L2344
 	ldrb	r3, [r2, #76]	@ zero_extendqisi2
-	cbz	r3, .L2313
+	cbz	r3, .L2332
 	cmp	r1, #1
-	bne	.L2313
+	bne	.L2332
 	ldrh	r1, [r4, #2]
-	ldrh	r3, [r2, #2900]
+	ldrh	r3, [r2, #2912]
 	cmp	r1, r3
-	bcc	.L2313
-	ldr	r3, .L2325+4
+	bcc	.L2332
+	ldr	r3, .L2344+4
 	ldrh	r0, [r4]
 	ldrh	r5, [r4, #4]
-	ldr	r1, [r3, #768]
+	ldr	r1, [r3, #816]
 	ldrh	r3, [r1, r0, lsl #1]
 	subs	r3, r3, r5
 	strh	r3, [r1, r0, lsl #1]	@ movhi
-	ldrh	r2, [r2, #2898]
+	ldrh	r2, [r2, #2910]
 	movs	r3, #0
 	strh	r3, [r4, #4]	@ movhi
 	strb	r3, [r4, #6]
 	strh	r2, [r4, #2]	@ movhi
-.L2313:
+.L2332:
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2326:
+.L2345:
 	.align	2
-.L2325:
+.L2344:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -14301,15 +14428,15 @@ get_new_active_ppa:
 	strb	r6, [r0, #10]
 	movw	r8, #65535
 	adds	r3, r3, #8
-	ldr	r5, .L2344
+	ldr	r5, .L2363
 	ldrh	r2, [r0, r3, lsl #1]
-.L2328:
+.L2347:
 	cmp	r2, r8
-	ldr	r7, .L2344
-	bne	.L2343
-.L2329:
+	ldr	r7, .L2363
+	bne	.L2362
+.L2348:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	ldrh	r2, [r5, #2828]
+	ldrh	r2, [r5, #2840]
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	strb	r3, [r4, #6]
@@ -14322,34 +14449,34 @@ get_new_active_ppa:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
 	adds	r3, r3, #8
 	ldrh	r2, [r4, r3, lsl #1]
-	b	.L2328
-.L2343:
+	b	.L2347
+.L2362:
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	ldrh	r1, [r4, #2]
 	cmp	r3, #1
 	ldrh	r3, [r4, #4]
-	bne	.L2331
+	bne	.L2350
 	ldrb	r0, [r5, #76]	@ zero_extendqisi2
-	cbnz	r0, .L2331
+	cbnz	r0, .L2350
 	add	r0, r5, r1, lsl #1
 	ldrh	r0, [r0, #592]
 	cmp	r0, r8
-	bne	.L2331
+	bne	.L2350
 	subs	r3, r3, #1
 	ldrh	r0, [r4]
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L2329
-.L2331:
+	b	.L2348
+.L2350:
 	movw	r6, #65535
 	orr	r5, r1, r2, lsl #10
 	mov	r8, r6
 	subs	r3, r3, #1
 	strh	r3, [r4, #4]	@ movhi
-.L2332:
+.L2351:
 	ldrb	r3, [r4, #6]	@ zero_extendqisi2
-	ldrh	r1, [r7, #2828]
-.L2334:
+	ldrh	r1, [r7, #2840]
+.L2353:
 	adds	r3, r3, #1
 	uxtb	r3, r3
 	cmp	r3, r1
@@ -14361,52 +14488,52 @@ get_new_active_ppa:
 	add	r2, r3, #8
 	ldrh	r2, [r4, r2, lsl #1]
 	cmp	r2, r6
-	beq	.L2334
+	beq	.L2353
 	strb	r3, [r4, #6]
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L2339
+	bne	.L2358
 	ldrb	r3, [r7, #76]	@ zero_extendqisi2
-	cbnz	r3, .L2336
+	cbnz	r3, .L2355
 	ldrh	r2, [r4, #2]
-	ldr	r3, .L2344
+	ldr	r3, .L2363
 	add	r3, r3, r2, lsl #1
 	ldrh	r3, [r3, #592]
 	cmp	r3, r8
-	bne	.L2336
+	bne	.L2355
 	ldrh	r3, [r4, #4]
-	cbz	r3, .L2336
+	cbz	r3, .L2355
 	subs	r3, r3, #1
 	ldrh	r0, [r4]
 	strh	r3, [r4, #4]	@ movhi
 	bl	decrement_vpc_count
-	b	.L2332
-.L2336:
+	b	.L2351
+.L2355:
 	ldrb	r3, [r7, #76]	@ zero_extendqisi2
-	ldr	r2, .L2344
-	cbz	r3, .L2339
+	ldr	r2, .L2363
+	cbz	r3, .L2358
 	ldrh	r1, [r4, #2]
-	ldrh	r3, [r2, #2900]
+	ldrh	r3, [r2, #2912]
 	cmp	r1, r3
-	bcc	.L2339
-	ldr	r3, .L2344+4
+	bcc	.L2358
+	ldr	r3, .L2363+4
 	ldrh	r0, [r4]
 	ldrh	r6, [r4, #4]
-	ldr	r1, [r3, #768]
+	ldr	r1, [r3, #816]
 	ldrh	r3, [r1, r0, lsl #1]
 	subs	r3, r3, r6
 	strh	r3, [r1, r0, lsl #1]	@ movhi
-	ldrh	r2, [r2, #2898]
+	ldrh	r2, [r2, #2910]
 	movs	r3, #0
 	strh	r3, [r4, #4]	@ movhi
 	strb	r3, [r4, #6]
 	strh	r2, [r4, #2]	@ movhi
-.L2339:
+.L2358:
 	mov	r0, r5
 	pop	{r4, r5, r6, r7, r8, pc}
-.L2345:
+.L2364:
 	.align	2
-.L2344:
+.L2363:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -14422,190 +14549,190 @@ FtlVpcTblFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, lr}
-	ldr	r4, .L2365
-	ldr	r3, [r4, #740]
+	ldr	r4, .L2384
+	ldr	r3, [r4, #744]
 	cmp	r3, #0
-	bne	.L2348
-	ldr	r2, [r4, #756]
+	bne	.L2367
+	ldr	r2, [r4, #1776]
 	movs	r1, #255
-	ldr	r7, [r4, #1796]
-	ldr	r5, .L2365+4
-	str	r2, [r4, #4056]
-	ldrh	r2, [r4, #1064]
-	str	r7, [r4, #4060]
+	ldr	r7, [r4, #1800]
+	ldr	r5, .L2384+4
+	str	r2, [r4, #4060]
+	ldrh	r2, [r4, #1060]
+	str	r7, [r4, #4064]
 	str	r3, [r7, #12]
 	strh	r2, [r7, #2]	@ movhi
 	movw	r2, #61604
 	strh	r2, [r7]	@ movhi
-	ldr	r2, [r4, #1072]
+	ldr	r2, [r4, #1068]
 	str	r3, [r7, #8]
-	ldr	r3, .L2365+8
+	ldr	r3, .L2384+8
 	str	r2, [r7, #4]
-	ldrh	r2, [r4, #790]
-	str	r3, [r4, #1012]
-	ldr	r3, .L2365+12
-	str	r3, [r4, #1016]
-	ldrh	r3, [r4, #1070]
-	strh	r3, [r4, #1020]	@ movhi
-	ldrh	r3, [r5, #2850]
-	strb	r3, [r4, #1022]
-	ldrh	r3, [r4, #788]
-	strh	r3, [r4, #1026]	@ movhi
-	ldrb	r3, [r4, #794]	@ zero_extendqisi2
-	orr	r3, r3, r2, lsl #6
-	strh	r3, [r4, #1028]	@ movhi
-	ldrb	r3, [r4, #796]	@ zero_extendqisi2
 	ldrh	r2, [r4, #838]
-	strb	r3, [r4, #1023]
+	str	r3, [r4, #760]
+	ldr	r3, .L2384+12
+	str	r3, [r4, #764]
+	ldrh	r3, [r4, #1066]
+	strh	r3, [r4, #768]	@ movhi
+	ldrh	r3, [r5, #2862]
+	strb	r3, [r4, #770]
 	ldrh	r3, [r4, #836]
-	strh	r3, [r4, #1030]	@ movhi
+	strh	r3, [r4, #774]	@ movhi
 	ldrb	r3, [r4, #842]	@ zero_extendqisi2
 	orr	r3, r3, r2, lsl #6
-	strh	r3, [r4, #1032]	@ movhi
+	strh	r3, [r4, #776]	@ movhi
 	ldrb	r3, [r4, #844]	@ zero_extendqisi2
-	strb	r3, [r4, #1024]
-	ldrh	r3, [r4, #884]
-	strh	r3, [r4, #1034]	@ movhi
 	ldrh	r2, [r4, #886]
+	strb	r3, [r4, #771]
+	ldrh	r3, [r4, #884]
+	strh	r3, [r4, #778]	@ movhi
 	ldrb	r3, [r4, #890]	@ zero_extendqisi2
-	ldr	r0, [r4, #4056]
 	orr	r3, r3, r2, lsl #6
-	strh	r3, [r4, #1036]	@ movhi
+	strh	r3, [r4, #780]	@ movhi
 	ldrb	r3, [r4, #892]	@ zero_extendqisi2
-	ldrh	r2, [r5, #2908]
-	strb	r3, [r4, #1025]
-	ldr	r3, [r4, #992]
-	str	r3, [r4, #1044]
-	ldr	r3, [r4, #984]
-	str	r3, [r4, #1052]
-	ldr	r3, [r4, #988]
-	str	r3, [r4, #1048]
+	strb	r3, [r4, #772]
+	ldrh	r3, [r4, #932]
+	strh	r3, [r4, #782]	@ movhi
+	ldrh	r2, [r4, #934]
+	ldrb	r3, [r4, #938]	@ zero_extendqisi2
+	ldr	r0, [r4, #4060]
+	orr	r3, r3, r2, lsl #6
+	strh	r3, [r4, #784]	@ movhi
+	ldrb	r3, [r4, #940]	@ zero_extendqisi2
+	ldrh	r2, [r5, #2920]
+	strb	r3, [r4, #773]
+	ldr	r3, [r4, #1036]
+	str	r3, [r4, #792]
+	ldr	r3, [r4, #1028]
+	str	r3, [r4, #800]
+	ldr	r3, [r4, #1032]
+	str	r3, [r4, #796]
 	bl	ftl_memset
-	add	r1, r4, #1012
+	add	r1, r4, #760
 	movs	r2, #48
-	ldr	r0, [r4, #4056]
+	ldr	r0, [r4, #4060]
 	bl	ftl_memcpy
-	ldrh	r2, [r5, #2836]
-	ldr	r0, [r4, #4056]
-	ldr	r1, [r4, #768]
+	ldrh	r2, [r5, #2848]
+	ldr	r0, [r4, #4060]
+	ldr	r1, [r4, #816]
 	lsls	r2, r2, #1
 	adds	r0, r0, #48
 	bl	ftl_memcpy
-	ldrh	r2, [r5, #2836]
-	ldr	r0, [r4, #4056]
+	ldrh	r2, [r5, #2848]
+	ldr	r0, [r4, #4060]
 	add	r3, r2, #24
-	ldr	r1, [r4, #944]
+	ldr	r1, [r4, #992]
 	ubfx	r3, r3, #1, #30
 	lsrs	r2, r2, #3
 	adds	r2, r2, #4
 	add	r0, r0, r3, lsl #2
 	bl	ftl_memcpy
-	ldrh	r3, [r5, #2944]
-	cbz	r3, .L2349
-	ldrh	r2, [r5, #2836]
-	ldr	r0, [r4, #4056]
-	ldr	r1, [r4, #1844]
+	ldrh	r3, [r5, #2952]
+	cbz	r3, .L2368
+	ldrh	r2, [r5, #2848]
+	ldr	r0, [r4, #4060]
+	ldr	r1, [r4, #1848]
 	lsrs	r3, r2, #3
 	add	r3, r3, r2, lsl #1
-	ldrh	r2, [r5, #2936]
+	ldrh	r2, [r5, #2948]
 	adds	r3, r3, #52
 	ubfx	r3, r3, #2, #14
 	lsls	r2, r2, #2
 	add	r0, r0, r3, lsl #2
 	bl	ftl_memcpy
-.L2349:
+.L2368:
 	movs	r0, #0
-	ldr	r6, .L2365
+	ldr	r6, .L2384
 	bl	FtlUpdateVaildLpn
 	mov	r8, #0
 	movw	r9, #65535
-.L2350:
-	ldr	r3, [r4, #756]
+.L2369:
+	ldr	r3, [r4, #1776]
 	movs	r1, #1
-	ldrh	r2, [r4, #1064]
-	ldr	r0, .L2365+16
-	str	r3, [r4, #4056]
-	ldr	r3, [r4, #1796]
+	ldrh	r2, [r4, #1060]
+	ldr	r0, .L2384+16
 	str	r3, [r4, #4060]
-	ldrh	r3, [r4, #1066]
+	ldr	r3, [r4, #1800]
+	str	r3, [r4, #4064]
+	ldrh	r3, [r4, #1062]
 	orr	r3, r3, r2, lsl #10
 	mov	r2, r1
-	str	r3, [r4, #4052]
+	str	r3, [r4, #4056]
 	mov	r3, r1
 	bl	FlashProgPages
-	ldrh	r3, [r5, #2900]
-	ldrh	r2, [r4, #1066]
+	ldrh	r3, [r5, #2912]
+	ldrh	r2, [r4, #1062]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	blt	.L2351
-	ldrh	r3, [r6, #1064]
-	ldrh	r9, [r6, #1068]
-	strh	r3, [r6, #1068]	@ movhi
+	blt	.L2370
+	ldrh	r3, [r6, #1060]
+	ldrh	r9, [r6, #1064]
+	strh	r3, [r6, #1064]	@ movhi
 	movs	r3, #0
-	strh	r3, [r6, #1066]	@ movhi
+	strh	r3, [r6, #1062]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
-	ldr	r3, [r6, #984]
+	ldr	r3, [r6, #1028]
 	movs	r1, #1
 	adds	r2, r3, #1
-	str	r2, [r6, #984]
-	str	r3, [r6, #1072]
+	str	r2, [r6, #1028]
+	str	r3, [r6, #1068]
 	lsls	r2, r0, #10
-	strh	r0, [r6, #1064]	@ movhi
-	str	r2, [r6, #4052]
+	strh	r0, [r6, #1060]	@ movhi
+	str	r2, [r6, #4056]
 	mov	r2, r1
 	str	r3, [r7, #4]
 	mov	r3, r1
 	strh	r0, [r7, #2]	@ movhi
-	ldr	r0, .L2365+16
+	ldr	r0, .L2384+16
 	bl	FlashProgPages
-.L2351:
-	ldrh	r3, [r4, #1066]
-	ldr	r2, [r4, #4048]
+.L2370:
+	ldrh	r3, [r4, #1062]
+	ldr	r2, [r4, #4052]
 	adds	r3, r3, #1
 	adds	r1, r2, #1
 	uxth	r3, r3
-	strh	r3, [r4, #1066]	@ movhi
-	bne	.L2352
+	strh	r3, [r4, #1062]	@ movhi
+	bne	.L2371
 	cmp	r3, #1
 	add	r8, r8, #1
 	it	eq
-	ldrheq	r3, [r5, #2900]
+	ldrheq	r3, [r5, #2912]
 	uxth	r8, r8
 	itt	eq
 	addeq	r3, r3, #-1
-	strheq	r3, [r6, #1066]	@ movhi
+	strheq	r3, [r6, #1062]	@ movhi
 	cmp	r8, #3
-	bls	.L2350
-	ldr	r0, .L2365+20
+	bls	.L2369
+	ldr	r0, .L2384+20
 	mov	r2, r8
-	ldr	r1, [r4, #4052]
+	ldr	r1, [r4, #4056]
 	bl	printk
 	movs	r3, #1
-	str	r3, [r4, #740]
-	b	.L2348
-.L2352:
+	str	r3, [r4, #744]
+	b	.L2367
+.L2371:
 	cmp	r3, #1
-	beq	.L2350
+	beq	.L2369
 	cmp	r2, #256
-	beq	.L2350
+	beq	.L2369
 	movw	r3, #65535
 	cmp	r9, r3
-	beq	.L2348
+	beq	.L2367
 	mov	r0, r9
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
-.L2348:
+.L2367:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
-.L2366:
+.L2385:
 	.align	2
-.L2365:
+.L2384:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	1179929683
-	.word	1342177351
-	.word	.LANCHOR2+4048
-	.word	.LC116
+	.word	1342177352
+	.word	.LANCHOR2+4052
+	.word	.LC119
 	.fnend
 	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
 	.align	1
@@ -14620,37 +14747,37 @@ FtlSuperblockPowerLostFix:
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r4, r0
-	ldr	r7, .L2381
+	ldr	r7, .L2400
 	.pad #40
 	sub	sp, sp, #40
 	ldrb	r3, [r7, #76]	@ zero_extendqisi2
-	cbz	r3, .L2376
+	cbz	r3, .L2395
 	ldrb	r5, [r0, #8]	@ zero_extendqisi2
 	cmp	r5, #1
-	bne	.L2376
+	bne	.L2395
 	ldrh	r6, [r0, #4]
-	b	.L2368
-.L2376:
+	b	.L2387
+.L2395:
 	movs	r5, #0
 	movs	r6, #12
-.L2368:
-	ldr	r10, .L2381+4
+.L2387:
+	ldr	r10, .L2400+4
 	mov	r8, #-1
 	mov	r9, #0
-.L2369:
+.L2388:
 	adds	r6, r6, #-1
-	bcc	.L2371
+	bcc	.L2390
 	ldrh	r3, [r4, #4]
-	cbnz	r3, .L2370
-.L2371:
-	ldr	r3, .L2381+4
+	cbnz	r3, .L2389
+.L2390:
+	ldr	r3, .L2400+4
 	ldrh	r1, [r4]
 	ldrh	r0, [r4, #4]
-	ldr	r2, [r3, #768]
+	ldr	r2, [r3, #816]
 	ldrh	r3, [r2, r1, lsl #1]
 	subs	r3, r3, r0
 	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldrh	r3, [r7, #2898]
+	ldrh	r3, [r7, #2910]
 	strh	r3, [r4, #2]	@ movhi
 	movs	r3, #0
 	strb	r3, [r4, #6]
@@ -14658,16 +14785,16 @@ FtlSuperblockPowerLostFix:
 	add	sp, sp, #40
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2370:
+.L2389:
 	mov	r0, r4
 	bl	get_new_active_ppa
 	str	r0, [sp, #8]
 	adds	r0, r0, #1
-	beq	.L2371
-	ldr	r2, [r10, #1796]
-	movs	r1, #1
-	ldr	r3, [r10, #756]
+	beq	.L2390
+	ldr	r2, [r10, #1800]
 	add	r0, sp, #4
+	ldr	r3, [r10, #1776]
+	movs	r1, #1
 	str	r8, [sp, #20]
 	str	r2, [sp, #16]
 	str	r3, [sp, #12]
@@ -14676,22 +14803,22 @@ FtlSuperblockPowerLostFix:
 	ldrh	r3, [r4]
 	strh	r9, [r2]	@ movhi
 	strh	r3, [r2, #2]	@ movhi
-	ldr	r3, [r10, #988]
+	ldr	r3, [r10, #1032]
 	str	r3, [r2, #4]
 	adds	r3, r3, #1
 	adds	r2, r3, #1
 	mov	r2, r5
 	it	eq
 	moveq	r3, #0
-	str	r3, [r10, #988]
+	str	r3, [r10, #1032]
 	movs	r3, #0
 	bl	FlashProgPages
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
-	b	.L2369
-.L2382:
+	b	.L2388
+.L2401:
 	.align	2
-.L2381:
+.L2400:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -14716,49 +14843,49 @@ ftl_map_blk_gc:
 	sub	r3, ip, #4
 	ldrh	r1, [r4, #40]
 	cmp	r2, r3
-	ldr	r7, .L2404
-	bge	.L2384
+	ldr	r7, .L2423
+	bge	.L2403
 	movw	r3, #65535
 	cmp	r1, r3
-	beq	.L2386
+	beq	.L2405
 	ldrh	r2, [r4, #2]
-	ldrh	r3, [r7, #2900]
+	ldrh	r3, [r7, #2912]
 	cmp	r2, r3
-	bcc	.L2386
-.L2384:
+	bcc	.L2405
+.L2403:
 	movw	r3, #65535
 	cmp	r1, r3
 	uxth	r5, r0
-	beq	.L2388
+	beq	.L2407
 	ldrh	r3, [r4, #2]
-	ldrh	r2, [r7, #2900]
+	ldrh	r2, [r7, #2912]
 	cmp	r2, r3
-	bhi	.L2388
+	bhi	.L2407
 	movs	r2, #0
-.L2389:
+.L2408:
 	uxth	lr, r2
 	cmp	lr, ip
-	bcs	.L2390
+	bcs	.L2409
 	adds	r2, r2, #1
 	add	r0, r6, r2, lsl #1
 	ldrh	r0, [r0, #-2]
 	cmp	r0, r1
-	bne	.L2389
+	bne	.L2408
 	mov	r5, lr
-.L2390:
-	ldr	r0, .L2404+4
+.L2409:
+	ldr	r0, .L2423+4
 	ldrh	r2, [r6, lr, lsl #1]
 	bl	printk
 	movw	r3, #65535
 	strh	r3, [r4, #40]	@ movhi
-.L2388:
+.L2407:
 	ldrh	r9, [r6, r5, lsl #1]
 	lsls	r2, r5, #1
 	cmp	r9, #0
-	beq	.L2386
+	beq	.L2405
 	ldr	r3, [r4, #32]
 	cmp	r3, #0
-	bne	.L2386
+	bne	.L2405
 	movs	r1, #1
 	str	r1, [r4, #32]
 	strh	r3, [r6, r2]	@ movhi
@@ -14766,76 +14893,76 @@ ftl_map_blk_gc:
 	ldrh	r2, [r4, #2]
 	subs	r3, r3, #1
 	strh	r3, [r4, #8]	@ movhi
-	ldrh	r3, [r7, #2900]
+	ldrh	r3, [r7, #2912]
 	cmp	r2, r3
-	bcc	.L2392
+	bcc	.L2411
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L2392:
-	ldr	r5, .L2404+8
+.L2411:
+	ldr	r5, .L2423+8
 	mov	r10, #0
-.L2393:
+.L2412:
 	ldrh	r3, [r4, #6]
 	uxth	r6, r10
 	cmp	r3, r6
-	bls	.L2403
+	bls	.L2422
 	ldr	r3, [r8, r6, lsl #2]
 	cmp	r9, r3, lsr #10
-	bne	.L2394
-	ldr	r3, [r5, #1776]
+	bne	.L2413
+	ldr	r3, [r5, #1780]
 	movs	r1, #1
-	ldr	fp, [r5, #1796]
-	ldr	r0, .L2404+12
+	ldr	fp, [r5, #1800]
+	ldr	r0, .L2423+12
 	mov	r2, r1
-	str	r3, [r5, #4056]
-	str	fp, [r5, #4060]
+	str	r3, [r5, #4060]
+	str	fp, [r5, #4064]
 	ldr	r3, [r8, r6, lsl #2]
-	str	r3, [r5, #4052]
+	str	r3, [r5, #4056]
 	bl	FlashReadPages
-	ldr	r3, [r5, #4048]
+	ldr	r3, [r5, #4052]
 	adds	r3, r3, #1
-	bne	.L2395
+	bne	.L2414
 	movs	r3, #0
-	ldr	r0, .L2404+16
+	ldr	r0, .L2423+16
 	str	r3, [r8, r6, lsl #2]
-	ldr	r1, [r5, #4052]
+	ldr	r1, [r5, #4056]
 	ldrh	r2, [fp, #8]
 	bl	printk
 	movs	r3, #1
-	str	r3, [r5, #740]
-	b	.L2394
-.L2395:
+	str	r3, [r5, #744]
+	b	.L2413
+.L2414:
 	mov	r0, r4
 	mov	r1, r6
-	ldr	r2, [r5, #4056]
+	ldr	r2, [r5, #4060]
 	bl	FtlMapWritePage
-.L2394:
+.L2413:
 	add	r10, r10, #1
-	b	.L2393
-.L2403:
+	b	.L2412
+.L2422:
 	mov	r0, r9
 	movs	r1, #1
 	bl	FtlFreeSysBlkQueueIn
 	movs	r3, #0
 	str	r3, [r4, #32]
-.L2386:
+.L2405:
 	ldrh	r2, [r4, #2]
-	ldrh	r3, [r7, #2900]
+	ldrh	r3, [r7, #2912]
 	cmp	r2, r3
-	bcc	.L2397
+	bcc	.L2416
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-.L2397:
+.L2416:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2405:
+.L2424:
 	.align	2
-.L2404:
+.L2423:
 	.word	.LANCHOR0
-	.word	.LC117
+	.word	.LC120
 	.word	.LANCHOR2
-	.word	.LANCHOR2+4048
-	.word	.LC118
+	.word	.LANCHOR2+4052
+	.word	.LC121
 	.fnend
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	1
@@ -14850,16 +14977,16 @@ Ftl_write_map_blk_to_last_page:
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r4, r0
-	ldr	r5, .L2413
+	ldr	r5, .L2432
 	ldr	r7, [r0, #12]
 	ldr	r8, [r0, #24]
-	ldr	r6, [r5, #740]
+	ldr	r6, [r5, #744]
 	cmp	r6, #0
-	bne	.L2407
+	bne	.L2426
 	ldrh	r3, [r0]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L2408
+	bne	.L2427
 	ldrh	r3, [r0, #8]
 	adds	r3, r3, #1
 	strh	r3, [r0, #8]	@ movhi
@@ -14870,53 +14997,53 @@ Ftl_write_map_blk_to_last_page:
 	adds	r3, r3, #1
 	strh	r6, [r4]	@ movhi
 	str	r3, [r4, #28]
-	b	.L2407
-.L2408:
+	b	.L2426
+.L2427:
 	ldrh	r7, [r7, r3, lsl #1]
 	movs	r1, #255
 	ldrh	r3, [r0, #2]
 	ldr	r2, [r0, #28]
 	orr	r3, r3, r7, lsl #10
-	str	r3, [r5, #4052]
-	ldr	r3, [r5, #756]
 	str	r3, [r5, #4056]
-	ldr	r3, [r5, #1796]
+	ldr	r3, [r5, #1776]
 	str	r3, [r5, #4060]
+	ldr	r3, [r5, #1800]
+	str	r3, [r5, #4064]
 	str	r2, [r3, #4]
 	movw	r2, #64245
 	strh	r2, [r3, #8]	@ movhi
 	ldrh	r2, [r0, #4]
 	strh	r7, [r3, #2]	@ movhi
 	strh	r2, [r3]	@ movhi
-	ldr	r3, .L2413+4
-	ldr	r0, [r5, #756]
-	ldrh	r2, [r3, #2900]
+	ldr	r3, .L2432+4
+	ldr	r0, [r5, #1776]
+	ldrh	r2, [r3, #2912]
 	lsls	r2, r2, #3
 	bl	ftl_memset
 	mov	r3, r6
-.L2409:
+.L2428:
 	ldrh	r1, [r4, #6]
 	uxth	r2, r6
 	cmp	r1, r2
-	bls	.L2412
+	bls	.L2431
 	ldr	r1, [r8, r2, lsl #2]
 	cmp	r7, r1, lsr #10
-	bne	.L2410
+	bne	.L2429
 	adds	r3, r3, #1
-	ldr	r1, [r5, #756]
+	ldr	r1, [r5, #1776]
 	uxth	r3, r3
 	str	r2, [r1, r3, lsl #3]
 	ldr	r1, [r8, r2, lsl #2]
-	ldr	r2, [r5, #756]
+	ldr	r2, [r5, #1776]
 	add	r2, r2, r3, lsl #3
 	str	r1, [r2, #4]
-.L2410:
+.L2429:
 	adds	r6, r6, #1
-	b	.L2409
-.L2412:
+	b	.L2428
+.L2431:
 	movs	r1, #1
 	movs	r3, #0
-	ldr	r0, .L2413+8
+	ldr	r0, .L2432+8
 	mov	r2, r1
 	bl	FlashProgPages
 	ldrh	r3, [r4, #2]
@@ -14924,15 +15051,15 @@ Ftl_write_map_blk_to_last_page:
 	adds	r3, r3, #1
 	strh	r3, [r4, #2]	@ movhi
 	bl	ftl_map_blk_gc
-.L2407:
+.L2426:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L2414:
+.L2433:
 	.align	2
-.L2413:
+.L2432:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR2+4048
+	.word	.LANCHOR2+4052
 	.fnend
 	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
 	.align	1
@@ -14948,48 +15075,48 @@ FtlMapWritePage:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
 	mov	r5, r0
-	ldr	r4, .L2436
+	ldr	r4, .L2455
 	mov	r7, r1
 	str	r2, [sp, #4]
-	ldr	r6, [r4, #740]
+	ldr	r6, [r4, #744]
 	cmp	r6, #0
-	bne	.L2431
-	ldr	r8, .L2436+16
+	bne	.L2450
+	ldr	r8, .L2455+16
 	mov	fp, r4
 	mov	r10, r8
-.L2417:
-	ldr	r3, [r4, #968]
+.L2436:
+	ldr	r3, [r4, #1012]
 	adds	r3, r3, #1
-	str	r3, [r4, #968]
-	ldrh	r3, [r8, #2900]
+	str	r3, [r4, #1012]
+	ldrh	r3, [r8, #2912]
 	ldrh	r2, [r5, #2]
 	subs	r3, r3, #1
 	cmp	r2, r3
-	bge	.L2418
+	bge	.L2437
 	ldrh	r2, [r5]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2419
-.L2418:
+	bne	.L2438
+.L2437:
 	mov	r0, r5
 	bl	Ftl_write_map_blk_to_last_page
-.L2419:
+.L2438:
 	ldrh	r2, [r5]
 	movs	r1, #16
 	ldr	r3, [r5, #12]
-	ldr	r0, [r4, #1796]
+	ldr	r0, [r4, #1800]
 	ldrh	r9, [r3, r2, lsl #1]
 	ldrh	r3, [r5, #2]
-	str	r0, [r4, #4060]
+	str	r0, [r4, #4064]
 	orr	r3, r3, r9, lsl #10
-	str	r3, [r4, #4052]
-	ldr	r3, [sp, #4]
 	str	r3, [r4, #4056]
+	ldr	r3, [sp, #4]
+	str	r3, [r4, #4060]
 	bl	__memzero
-	ldr	r3, [r4, #4060]
+	ldr	r3, [r4, #4064]
 	movs	r1, #1
 	ldr	r2, [r5, #28]
-	ldr	r0, .L2436+4
+	ldr	r0, .L2455+4
 	strh	r7, [r3, #8]	@ movhi
 	str	r2, [r3, #4]
 	ldrh	r2, [r5, #4]
@@ -15002,136 +15129,59 @@ FtlMapWritePage:
 	adds	r3, r3, #1
 	uxth	r3, r3
 	strh	r3, [r5, #2]	@ movhi
-	ldr	r2, [r4, #4048]
+	ldr	r2, [r4, #4052]
 	adds	r1, r2, #1
-	bne	.L2420
-	ldr	r0, .L2436+8
+	bne	.L2439
+	ldr	r0, .L2455+8
 	adds	r6, r6, #1
-	ldr	r1, [fp, #4052]
+	ldr	r1, [fp, #4056]
 	bl	printk
 	ldrh	r3, [r5, #2]
 	uxth	r6, r6
 	cmp	r3, #2
 	ittt	ls
-	ldrhls	r3, [r10, #2900]
+	ldrhls	r3, [r10, #2912]
 	addls	r3, r3, #-1
 	strhls	r3, [r5, #2]	@ movhi
 	cmp	r6, #3
-	bls	.L2417
-	ldr	r0, .L2436+12
+	bls	.L2436
+	ldr	r0, .L2455+12
 	mov	r2, r6
-	ldr	r1, [r4, #4052]
+	ldr	r1, [r4, #4056]
 	bl	printk
 	movs	r3, #1
-	str	r3, [r4, #740]
-	b	.L2431
-.L2420:
-	cbz	r2, .L2423
+	str	r3, [r4, #744]
+	b	.L2450
+.L2439:
+	cbz	r2, .L2442
 	cmp	r3, #1
 	strh	r9, [r5, #40]	@ movhi
-	beq	.L2417
+	beq	.L2436
 	cmp	r2, #256
-	b	.L2435
-.L2423:
+	b	.L2454
+.L2442:
 	cmp	r3, #1
-.L2435:
-	beq	.L2417
-	ldr	r2, [r4, #4052]
+.L2454:
+	beq	.L2436
+	ldr	r2, [r4, #4056]
 	ldr	r3, [r5, #24]
 	str	r2, [r3, r7, lsl #2]
-.L2431:
+.L2450:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2437:
+.L2456:
 	.align	2
-.L2436:
+.L2455:
 	.word	.LANCHOR2
-	.word	.LANCHOR2+4048
-	.word	.LC119
-	.word	.LC120
+	.word	.LANCHOR2+4052
+	.word	.LC122
+	.word	.LC123
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	1
-	.global	load_l2p_region
-	.thumb
-	.thumb_func
-	.type	load_l2p_region, %function
-load_l2p_region:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, lr}
-	.save {r4, r5, r6, r7, r8, lr}
-	mov	r7, r0
-	ldr	r8, .L2442+8
-	ldr	r3, [r8, #1844]
-	mov	r5, r8
-	ldr	r6, [r3, r0, lsl #2]
-	movs	r3, #12
-	cbnz	r6, .L2439
-	mul	r4, r3, r1
-	ldr	r3, [r8, #932]
-	movs	r1, #255
-	add	r3, r3, r4
-	ldr	r0, [r3, #8]
-	ldr	r3, .L2442
-	ldrh	r2, [r3, #2908]
-	bl	ftl_memset
-	ldr	r3, [r8, #932]
-	strh	r7, [r3, r4]	@ movhi
-	ldr	r3, [r8, #932]
-	add	r4, r4, r3
-	str	r6, [r4, #4]
-	b	.L2440
-.L2439:
-	mul	r4, r3, r1
-	ldr	r3, [r8, #932]
-	movs	r1, #1
-	add	r0, r8, #4048
-	str	r6, [r8, #4052]
-	add	r3, r3, r4
-	mov	r2, r1
-	ldr	r3, [r3, #8]
-	str	r3, [r8, #4056]
-	ldr	r3, [r8, #1796]
-	str	r3, [r8, #4060]
-	bl	FlashReadPages
-	ldr	r3, [r8, #4048]
-	cmp	r3, #256
-	bne	.L2441
-	mov	r2, r6
-	mov	r1, r7
-	ldr	r0, .L2442+4
-	lsrs	r6, r6, #10
-	bl	printk
-	ldr	r3, [r8, #932]
-	strh	r6, [r8, #1904]	@ movhi
-	add	r0, r8, #1864
-	add	r3, r3, r4
-	mov	r1, r7
-	ldr	r2, [r3, #8]
-	bl	FtlMapWritePage
-.L2441:
-	ldr	r3, [r5, #932]
-	movs	r1, #0
-	adds	r2, r3, r4
-	str	r1, [r2, #4]
-	strh	r7, [r3, r4]	@ movhi
-.L2440:
-	movs	r0, #0
-	pop	{r4, r5, r6, r7, r8, pc}
-.L2443:
-	.align	2
-.L2442:
-	.word	.LANCHOR0
-	.word	.LC121
-	.word	.LANCHOR2
-	.fnend
-	.size	load_l2p_region, .-load_l2p_region
-	.align	1
 	.global	flush_l2p_region
 	.thumb
 	.thumb_func
@@ -15143,203 +15193,28 @@ flush_l2p_region:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r4, #12
-	ldr	r5, .L2445
+	ldr	r5, .L2458
 	muls	r4, r0, r4
-	add	r0, r5, #1864
-	ldr	r3, [r5, #932]
+	addw	r0, r5, #1868
+	ldr	r3, [r5, #980]
 	adds	r2, r3, r4
 	ldrh	r1, [r3, r4]
 	ldr	r2, [r2, #8]
 	bl	FtlMapWritePage
-	ldr	r3, [r5, #932]
+	ldr	r3, [r5, #980]
 	movs	r0, #0
 	add	r4, r4, r3
 	ldr	r3, [r4, #4]
 	bic	r3, r3, #-2147483648
 	str	r3, [r4, #4]
 	pop	{r3, r4, r5, pc}
-.L2446:
+.L2459:
 	.align	2
-.L2445:
+.L2458:
 	.word	.LANCHOR2
 	.fnend
 	.size	flush_l2p_region, .-flush_l2p_region
 	.align	1
-	.global	log2phys
-	.thumb
-	.thumb_func
-	.type	log2phys, %function
-log2phys:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	movs	r3, #1
-	ldr	r5, .L2461
-	mov	r9, r2
-	mov	r8, r1
-	movs	r1, #12
-	ldrh	r4, [r5, #2906]
-	ldrh	r2, [r5, #2938]
-	adds	r4, r4, #7
-	lsr	r7, r0, r4
-	lsls	r3, r3, r4
-	ldr	r4, .L2461+4
-	subs	r3, r3, #1
-	ands	r0, r0, r3
-	uxth	r7, r7
-	movs	r3, #0
-	ldr	r10, [r4, #932]
-	uxth	r6, r0
-.L2448:
-	uxth	r5, r3
-	cmp	r5, r2
-	bcs	.L2460
-	adds	r3, r3, #1
-	mla	r0, r1, r3, r10
-	ldrh	r0, [r0, #-12]
-	cmp	r0, r7
-	bne	.L2448
-.L2449:
-	movs	r3, #12
-	cmp	r9, #0
-	bne	.L2450
-	ldr	r2, [r4, #932]
-	mla	r3, r3, r5, r2
-	ldr	r3, [r3, #8]
-	ldr	r3, [r3, r6, lsl #2]
-	str	r3, [r8]
-	b	.L2451
-.L2450:
-	muls	r3, r5, r3
-	ldr	r2, [r4, #932]
-	ldr	r1, [r8]
-	add	r2, r2, r3
-	ldr	r2, [r2, #8]
-	str	r1, [r2, r6, lsl #2]
-	ldr	r2, [r4, #932]
-	strh	r7, [r4, #936]	@ movhi
-	add	r3, r3, r2
-	ldr	r2, [r3, #4]
-	orr	r2, r2, #-2147483648
-	str	r2, [r3, #4]
-.L2451:
-	ldr	r2, [r4, #932]
-	movs	r3, #12
-	mla	r5, r3, r5, r2
-	ldr	r3, [r5, #4]
-	adds	r2, r3, #1
-	beq	.L2457
-	adds	r3, r3, #1
-	str	r3, [r5, #4]
-	b	.L2457
-.L2460:
-	bl	select_l2p_ram_region
-	movs	r3, #12
-	muls	r3, r0, r3
-	mov	r5, r0
-	add	r2, r10, r3
-	ldrh	r1, [r10, r3]
-	movw	r3, #65535
-	cmp	r1, r3
-	beq	.L2454
-	ldr	r3, [r2, #4]
-	cmp	r3, #0
-	bge	.L2454
-	bl	flush_l2p_region
-.L2454:
-	mov	r0, r7
-	mov	r1, r5
-	bl	load_l2p_region
-	b	.L2449
-.L2457:
-	movs	r0, #0
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2462:
-	.align	2
-.L2461:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.fnend
-	.size	log2phys, .-log2phys
-	.align	1
-	.global	FtlReUsePrevPpa
-	.thumb
-	.thumb_func
-	.type	FtlReUsePrevPpa, %function
-FtlReUsePrevPpa:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r0, r1, r2, r4, r5, r6, r7, lr}
-	.save {r4, r5, r6, r7, lr}
-	.pad #12
-	mov	r6, r0
-	ubfx	r0, r1, #10, #16
-	str	r1, [sp, #4]
-	bl	P2V_block_in_plane
-	ldr	r5, .L2472
-	ldr	r4, [r5, #768]
-	ldrh	r3, [r4, r0, lsl #1]
-	cbnz	r3, .L2464
-	ldr	r4, [r5, #780]
-	cbz	r4, .L2465
-	ldr	r1, [r5, #760]
-	mov	lr, #6
-	ldr	r2, .L2472+4
-	movw	ip, #65535
-	subs	r4, r4, r1
-	ldrh	r7, [r5, #784]
-	asrs	r4, r4, #1
-	muls	r4, r2, r4
-	uxth	r4, r4
-.L2466:
-	uxth	r2, r3
-	cmp	r2, r7
-	bcs	.L2465
-	cmp	r4, r0
-	bne	.L2467
-	mov	r1, r4
-	ldr	r0, .L2472+8
-	bl	List_remove_node
-	ldrh	r3, [r5, #784]
-	mov	r0, r4
-	subs	r3, r3, #1
-	strh	r3, [r5, #784]	@ movhi
-	bl	INSERT_DATA_LIST
-	ldr	r2, [r5, #768]
-	ldrh	r3, [r2, r4, lsl #1]
-	adds	r3, r3, #1
-	strh	r3, [r2, r4, lsl #1]	@ movhi
-	b	.L2465
-.L2467:
-	mul	r4, lr, r4
-	adds	r3, r3, #1
-	ldrh	r4, [r1, r4]
-	cmp	r4, ip
-	bne	.L2466
-	b	.L2465
-.L2464:
-	adds	r3, r3, #1
-	strh	r3, [r4, r0, lsl #1]	@ movhi
-.L2465:
-	mov	r0, r6
-	add	r1, sp, #4
-	movs	r2, #1
-	bl	log2phys
-	add	sp, sp, #12
-	@ sp needed
-	pop	{r4, r5, r6, r7, pc}
-.L2473:
-	.align	2
-.L2472:
-	.word	.LANCHOR2
-	.word	-1431655765
-	.word	.LANCHOR2+780
-	.fnend
-	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
-	.align	1
 	.global	FtlMapTblRecovery
 	.thumb
 	.thumb_func
@@ -15358,7 +15233,7 @@ FtlMapTblRecovery:
 	movs	r1, #0
 	ldr	r10, [r0, #24]
 	movs	r6, #0
-	ldr	r5, .L2520
+	ldr	r5, .L2508
 	str	r3, [sp, #12]
 	lsl	r2, fp, #2
 	ldrh	r3, [r0, #8]
@@ -15366,122 +15241,122 @@ FtlMapTblRecovery:
 	mov	r0, r10
 	str	r3, [sp, #8]
 	bl	ftl_memset
-	ldr	r3, [r5, #756]
-	ldr	r7, [r5, #1796]
+	ldr	r3, [r5, #1776]
+	ldr	r7, [r5, #1800]
 	str	r6, [r4, #32]
-	str	r3, [r5, #4056]
+	str	r3, [r5, #4060]
 	movw	r3, #65535
-	str	r7, [r5, #4060]
+	str	r7, [r5, #4064]
 	str	r6, [r4, #28]
 	strh	r3, [r4]	@ movhi
 	strh	r3, [r4, #2]	@ movhi
 	movs	r3, #1
 	str	r3, [r4, #36]
-.L2475:
+.L2461:
 	uxth	ip, r6
 	ldr	r3, [sp, #8]
 	sxth	r9, ip
 	cmp	r9, r3
-	bge	.L2492
+	bge	.L2478
 	ldr	r3, [sp, #8]
 	subs	r2, r3, #1
 	cmp	r9, r2
 	lsl	r2, r9, #1
-	bne	.L2476
+	bne	.L2462
 	ldrh	r0, [r8, r9, lsl #1]
 	movs	r1, #1
 	str	ip, [sp, #8]
 	add	r6, r8, r2
 	bl	FtlGetLastWrittenPage
-	adds	r3, r0, #1
 	ldr	ip, [sp, #8]
-	strh	r3, [r4, #2]	@ movhi
-	sxth	r0, r0
-	ldr	r3, [sp, #12]
 	strh	ip, [r4]	@ movhi
 	mov	ip, #0
+	adds	r3, r0, #1
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r3, [sp, #12]
+	sxth	r0, r0
 	ldr	r3, [r3, r9, lsl #2]
 	add	r9, r0, #1
 	str	r3, [r4, #28]
-	ldr	r3, .L2520
-.L2477:
+	ldr	r3, .L2508
+.L2463:
 	sxth	r2, ip
 	cmp	r2, r9
-	bge	.L2492
+	bge	.L2478
 	ldrh	r1, [r6]
-	ldr	r0, .L2520+4
+	ldr	r0, .L2508+4
 	str	r3, [sp, #12]
 	orr	r2, r2, r1, lsl #10
 	movs	r1, #1
-	str	r2, [r5, #4052]
+	str	r2, [r5, #4056]
 	mov	r2, r1
 	str	ip, [sp, #8]
 	bl	FlashReadPages
-	ldr	r2, [r5, #4048]
-	adds	r2, r2, #1
+	ldr	r2, [r5, #4052]
 	ldr	ip, [sp, #8]
+	adds	r2, r2, #1
 	ldr	r3, [sp, #12]
-	beq	.L2478
+	beq	.L2464
 	ldrh	r2, [r7, #8]
 	cmp	r2, fp
-	bcs	.L2479
+	bcs	.L2465
 	ldrh	r0, [r7]
 	ldrh	r1, [r4, #4]
 	cmp	r0, r1
-	bne	.L2479
-	ldr	r1, [r3, #4052]
+	bne	.L2465
+	ldr	r1, [r3, #4056]
 	str	r1, [r10, r2, lsl #2]
-	b	.L2479
-.L2478:
+	b	.L2465
+.L2464:
 	ldrh	r2, [r6]
 	strh	r2, [r4, #40]	@ movhi
-.L2479:
+.L2465:
 	add	ip, ip, #1
-	b	.L2477
-.L2492:
-	ldr	r3, .L2520+8
-	ldr	r10, .L2520+12
+	b	.L2463
+.L2478:
+	ldr	r3, .L2508+8
+	ldr	r10, .L2508+12
 	cmp	r4, r3
-	bne	.L2482
-	b	.L2517
-.L2476:
-	ldr	r1, [r5, #756]
+	bne	.L2468
+	b	.L2505
+.L2462:
+	ldr	r1, [r5, #1776]
 	add	r3, r8, r2
 	str	r3, [sp, #16]
-	ldr	r3, .L2520+12
-	str	r1, [r5, #4056]
+	ldr	r3, .L2508+12
+	str	r1, [r5, #4060]
 	ldrh	r1, [r8, r9, lsl #1]
-	ldrh	r2, [r3, #2900]
-	ldr	r0, .L2520+4
+	ldrh	r2, [r3, #2912]
+	ldr	r0, .L2508+4
 	subs	r2, r2, #1
 	orr	r2, r2, r1, lsl #10
 	movs	r1, #1
-	str	r2, [r5, #4052]
+	str	r2, [r5, #4056]
 	mov	r2, r1
 	bl	FlashReadPages
-	ldr	r2, [r5, #4048]
+	ldr	r2, [r5, #4052]
 	adds	r2, r2, #1
-	beq	.L2506
+	beq	.L2493
 	ldrh	r1, [r7]
 	ldrh	r2, [r4, #4]
 	cmp	r1, r2
-	bne	.L2506
+	bne	.L2493
 	ldrh	r1, [r7, #8]
 	movw	r2, #64245
 	cmp	r1, r2
-	bne	.L2506
+	bne	.L2493
 	movs	r0, #0
 	mov	ip, #8
 	mov	r9, #4
-.L2484:
-	ldr	r3, .L2520+12
+.L2470:
+	ldr	r3, .L2508+12
 	uxth	r2, r0
 	sxth	lr, r2
-	ldrh	r1, [r3, #2900]
+	ldrh	r1, [r3, #2912]
 	subs	r1, r1, #1
 	cmp	lr, r1
-	bge	.L2487
-	ldr	r1, [r5, #756]
+	bge	.L2473
+	ldr	r1, [r5, #1776]
 	adds	r0, r0, #1
 	ldrh	lr, [r1, lr, lsl #3]
 	cmp	lr, fp
@@ -15489,152 +15364,151 @@ FtlMapTblRecovery:
 	smlabbcc	r2, r2, ip, r9
 	ldrcc	r2, [r1, r2]
 	strcc	r2, [r10, lr, lsl #2]
-	b	.L2484
-.L2506:
-	ldr	r3, .L2520
+	b	.L2470
+.L2493:
+	ldr	r3, .L2508
 	mov	r9, #0
-.L2514:
-	ldr	r1, .L2520+12
+.L2502:
+	ldr	r1, .L2508+12
 	sxth	r2, r9
-	ldrh	r1, [r1, #2900]
+	ldrh	r1, [r1, #2912]
 	cmp	r2, r1
-	bge	.L2487
+	bge	.L2473
 	ldr	r1, [sp, #16]
-	ldr	r0, .L2520+4
+	ldr	r0, .L2508+4
 	str	r3, [sp, #20]
 	ldrh	r1, [r1]
 	orr	r2, r2, r1, lsl #10
 	movs	r1, #1
-	str	r2, [r3, #4052]
+	str	r2, [r3, #4056]
 	mov	r2, r1
 	bl	FlashReadPages
 	ldr	r3, [sp, #20]
-	ldr	r2, [r3, #4048]
+	ldr	r2, [r3, #4052]
 	adds	r2, r2, #1
-	beq	.L2488
+	beq	.L2474
 	ldrh	r2, [r7, #8]
 	cmp	r2, fp
-	bcs	.L2488
+	bcs	.L2474
 	ldrh	r1, [r4, #4]
 	ldrh	r0, [r7]
 	cmp	r0, r1
 	itt	eq
-	ldreq	r1, [r3, #4052]
+	ldreq	r1, [r3, #4056]
 	streq	r1, [r10, r2, lsl #2]
-.L2488:
+.L2474:
 	add	r9, r9, #1
-	b	.L2514
-.L2487:
+	b	.L2502
+.L2473:
 	adds	r6, r6, #1
-	b	.L2475
-.L2503:
-	ldr	r2, [r5, #1848]
+	b	.L2461
+.L2490:
+	ldr	r3, [r5, #1852]
 	lsl	r7, r9, #2
-	ldr	r3, [r2, r9, lsl #2]
-	subs	r1, r3, #1
+	ldr	r2, [r3, r9, lsl #2]
+	subs	r1, r2, #1
 	adds	r1, r1, #3
-	bls	.L2518
-.L2497:
+	bls	.L2506
+.L2483:
 	add	r9, r9, #1
-.L2495:
-	ldrh	r3, [r10, #2936]
+.L2481:
+	ldrh	r3, [r10, #2948]
 	cmp	r9, r3
-	bcc	.L2503
-.L2482:
+	bcc	.L2490
+.L2468:
 	mov	r0, r4
 	bl	ftl_free_no_use_map_blk
 	ldrh	r2, [r4, #2]
-	ldrh	r3, [r10, #2900]
+	ldrh	r3, [r10, #2912]
 	cmp	r2, r3
-	bne	.L2494
+	bne	.L2480
 	mov	r0, r4
 	bl	ftl_map_blk_alloc_new_blk
-	b	.L2494
-.L2517:
-	ldrh	r3, [r10, #2944]
+	b	.L2480
+.L2505:
+	ldrh	r3, [r10, #2952]
 	cmp	r3, #0
-	beq	.L2482
+	beq	.L2468
 	mov	r9, #0
-	sub	r6, r4, #1864
-	b	.L2495
-.L2518:
-	ldr	r1, [r6, #1844]
+	subw	r6, r4, #1868
+	b	.L2481
+.L2506:
+	ldr	r1, [r6, #1848]
 	ldr	r1, [r1, r9, lsl #2]
-	cmp	r3, r1
-	beq	.L2497
-	ldr	r3, [r6, #756]
+	cmp	r2, r1
+	beq	.L2483
+	ldr	r2, [r6, #1776]
 	movs	r1, #1
-	ldr	r0, .L2520+4
-	str	r3, [r6, #4056]
-	ldr	r3, [r6, #1796]
-	str	r3, [r6, #4060]
-	ldr	r2, [r2, r7]
-	str	r3, [sp, #8]
-	str	r2, [r6, #4052]
+	ldr	fp, [r6, #1800]
+	ldr	r0, .L2508+4
+	str	r2, [r6, #4060]
 	mov	r2, r1
+	str	fp, [r6, #4064]
+	ldr	r3, [r3, r7]
+	str	r3, [r6, #4056]
 	bl	FlashReadPages
-	ldr	r2, [r6, #4048]
-	adds	r2, r2, #1
-	ldr	r3, [sp, #8]
-	beq	.L2510
-	ldrh	r1, [r3]
-	ldrh	r2, [r6, #1868]
-	cmp	r1, r2
-	bne	.L2510
-	ldr	fp, [r3, #4]
-	b	.L2499
-.L2510:
-	mov	fp, #0
-.L2499:
-	ldr	r2, [r5, #1844]
+	ldr	r3, [r6, #4052]
+	adds	r3, r3, #1
+	beq	.L2483
+	ldrh	r2, [fp]
+	ldrh	r3, [r6, #1872]
+	cmp	r2, r3
+	bne	.L2483
+	ldr	r2, [r6, #1848]
+	ldr	r3, [fp, #4]
+	ldr	r1, [r2, r7]
+	str	r1, [r6, #4056]
+	ldr	r2, [r2, r7]
+	cbnz	r2, .L2485
+	str	r2, [fp, #4]
+	b	.L2486
+.L2485:
 	movs	r1, #1
-	ldr	r0, .L2520+4
+	ldr	r0, .L2508+4
 	str	r3, [sp, #8]
-	ldr	r2, [r2, r7]
-	str	r2, [r5, #4052]
 	mov	r2, r1
 	bl	FlashReadPages
 	ldr	r3, [sp, #8]
-	ldr	r1, [r3, #4]
-	cmp	fp, r1
-	bls	.L2497
-	ldr	r2, [r6, #1848]
-	ldr	r3, [r6, #1844]
-	str	r1, [sp]
-	ldr	r1, [r2, r7]
-	ldr	r0, .L2520+16
-	ldr	r2, [r3, r7]
-	mov	r3, fp
+.L2486:
+	ldr	r0, [fp, #4]
+	cmp	r3, r0
+	bls	.L2483
+	ldr	r1, [r5, #1852]
+	ldr	r2, [r5, #1848]
+	str	r0, [sp]
+	ldr	r1, [r1, r7]
+	ldr	r2, [r2, r7]
+	ldr	r0, .L2508+16
 	bl	printk
-	ldr	r3, [r6, #1848]
+	ldr	r3, [r5, #1852]
 	ldr	r2, [r3, r7]
-	ldr	r3, [r6, #1844]
+	ldr	r3, [r5, #1848]
 	str	r2, [r3, r7]
 	movs	r2, #0
-	ldr	r3, [r6, #1848]
+	ldr	r3, [r5, #1852]
 	ldr	r0, [r3, r7]
-	ldrh	r3, [r6, #1908]
+	ldrh	r3, [r5, #1912]
 	ubfx	r0, r0, #10, #16
-.L2500:
+.L2487:
 	sxth	r1, r2
 	cmp	r1, r3
-	bge	.L2519
+	bge	.L2507
 	ldrh	r1, [r8, r1, lsl #1]
 	adds	r2, r2, #1
 	cmp	r1, r0
-	bne	.L2500
-	b	.L2497
-.L2519:
-	ldr	r2, [r10, #2928]
+	bne	.L2487
+	b	.L2483
+.L2507:
+	ldr	r2, [r10, #2940]
 	cmp	r3, r2
-	bcs	.L2497
+	bcs	.L2483
 	strh	r0, [r8, r3, lsl #1]	@ movhi
-	ldrh	r3, [r5, #1908]
+	ldrh	r3, [r5, #1912]
 	adds	r3, r3, #1
-	strh	r3, [r5, #1908]	@ movhi
+	strh	r3, [r5, #1912]	@ movhi
 	bl	remove_from_free_sys_Queue
-	b	.L2497
-.L2494:
+	b	.L2483
+.L2480:
 	mov	r0, r4
 	bl	ftl_map_blk_gc
 	mov	r0, r4
@@ -15643,14 +15517,14 @@ FtlMapTblRecovery:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2521:
+.L2509:
 	.align	2
-.L2520:
+.L2508:
 	.word	.LANCHOR2
-	.word	.LANCHOR2+4048
-	.word	.LANCHOR2+1864
+	.word	.LANCHOR2+4052
+	.word	.LANCHOR2+1868
 	.word	.LANCHOR0
-	.word	.LC122
+	.word	.LC124
 	.fnend
 	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
 	.align	1
@@ -15664,40 +15538,42 @@ FtlLoadVonderInfo:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	movw	r2, #4098
-	ldr	r3, .L2523
-	ldr	r0, .L2523+4
-	ldrh	r1, [r3, #2920]
+	movw	r2, #4102
+	ldr	r3, .L2511
+	ldr	r0, .L2511+4
+	ldrh	r1, [r3, #2932]
 	strh	r1, [r0, r2]	@ movhi
-	movw	r2, #61574
-	ldrh	r1, [r3, #2946]
-	strh	r2, [r0, #4092]	@ movhi
 	add	r2, r0, #4096
+	movw	r1, #61574
 	strh	r1, [r2]	@ movhi
-	ldrh	r2, [r3, #2922]
-	strh	r2, [r0, #4094]	@ movhi
-	ldr	r2, [r3, #2948]
-	movw	r3, #4100
-	str	r2, [r0, r3]
+	movw	r2, #4100
+	ldrh	r1, [r3, #2954]
+	strh	r1, [r0, r2]	@ movhi
+	movw	r2, #4098
+	ldrh	r1, [r3, #2934]
+	strh	r1, [r0, r2]	@ movhi
+	ldr	r2, [r3, #2956]
 	movw	r3, #4104
-	ldr	r2, [r0, #1836]
 	str	r2, [r0, r3]
 	movw	r3, #4108
-	ldr	r2, [r0, #1832]
+	ldr	r2, [r0, #1840]
 	str	r2, [r0, r3]
 	movw	r3, #4112
-	ldr	r2, [r0, #1840]
+	ldr	r2, [r0, #1836]
+	str	r2, [r0, r3]
+	movw	r3, #4116
+	ldr	r2, [r0, #1844]
 	str	r2, [r0, r3]
-	add	r3, r0, #4128
-	addw	r0, r0, #4088
+	movw	r3, #4132
 	movw	r2, #65535
-	strh	r2, [r3]	@ movhi
+	strh	r2, [r0, r3]	@ movhi
+	addw	r0, r0, #4092
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L2524:
+.L2512:
 	.align	2
-.L2523:
+.L2511:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -15714,17 +15590,246 @@ FtlLoadMapInfo:
 	push	{r3, lr}
 	.save {r3, lr}
 	bl	FtlL2PDataInit
-	ldr	r0, .L2526
+	ldr	r0, .L2514
 	bl	FtlMapTblRecovery
 	movs	r0, #0
 	pop	{r3, pc}
-.L2527:
+.L2515:
 	.align	2
-.L2526:
-	.word	.LANCHOR2+1864
+.L2514:
+	.word	.LANCHOR2+1868
 	.fnend
 	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
 	.align	1
+	.global	log2phys
+	.thumb
+	.thumb_func
+	.type	log2phys, %function
+log2phys:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r8, #1
+	str	r2, [sp]
+	mov	r10, r1
+	ldr	r2, .L2532
+	movs	r3, #0
+	ldr	r1, .L2532+4
+	ldrh	r4, [r2, #2918]
+	str	r2, [sp, #4]
+	mov	fp, r1
+	adds	r4, r4, #7
+	lsl	r5, r8, r4
+	lsr	r6, r0, r4
+	subs	r4, r5, #1
+	ands	r0, r0, r4
+	ldr	r4, [r1, #980]
+	uxth	r6, r6
+	uxth	r7, r0
+	ldrh	r0, [r2, #2950]
+	movs	r2, #12
+.L2517:
+	uxth	r8, r3
+	cmp	r8, r0
+	bcs	.L2531
+	adds	r3, r3, #1
+	mla	r1, r2, r3, r4
+	ldrh	r1, [r1, #-12]
+	cmp	r1, r6
+	bne	.L2517
+.L2518:
+	ldr	r2, [sp]
+	movs	r3, #12
+	cbnz	r2, .L2519
+	ldr	r2, [fp, #980]
+	mla	r3, r3, r8, r2
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, r7, lsl #2]
+	str	r3, [r10]
+	b	.L2520
+.L2519:
+	mul	r3, r3, r8
+	ldr	r2, [fp, #980]
+	ldr	r1, [r10]
+	add	r2, r2, r3
+	ldr	r2, [r2, #8]
+	str	r1, [r2, r7, lsl #2]
+	ldr	r2, [fp, #980]
+	strh	r6, [fp, #984]	@ movhi
+	add	r3, r3, r2
+	ldr	r2, [r3, #4]
+	orr	r2, r2, #-2147483648
+	str	r2, [r3, #4]
+.L2520:
+	ldr	r2, [fp, #980]
+	movs	r3, #12
+	mla	r8, r3, r8, r2
+	ldr	r3, [r8, #4]
+	adds	r2, r3, #1
+	beq	.L2528
+	adds	r3, r3, #1
+	str	r3, [r8, #4]
+	b	.L2528
+.L2531:
+	bl	select_l2p_ram_region
+	movs	r5, #12
+	movw	r2, #65535
+	muls	r5, r0, r5
+	mov	r8, r0
+	adds	r3, r4, r5
+	ldrh	r1, [r4, r5]
+	cmp	r1, r2
+	beq	.L2523
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L2523
+	bl	flush_l2p_region
+.L2523:
+	ldr	r3, [fp, #1848]
+	ldr	r4, .L2532+4
+	ldr	r9, [r3, r6, lsl #2]
+	cmp	r9, #0
+	bne	.L2524
+	ldr	r2, [r4, #980]
+	movs	r1, #255
+	ldr	r3, [sp, #4]
+	add	r2, r2, r5
+	ldr	r0, [r2, #8]
+	ldrh	r2, [r3, #2920]
+	bl	ftl_memset
+	ldr	r2, [r4, #980]
+	strh	r6, [r2, r5]	@ movhi
+	ldr	r2, [r4, #980]
+	add	r5, r5, r2
+	str	r9, [r5, #4]
+	b	.L2518
+.L2524:
+	ldr	r2, [r4, #980]
+	movs	r1, #1
+	addw	r0, r4, #4052
+	str	r9, [r4, #4056]
+	add	r2, r2, r5
+	ldr	r2, [r2, #8]
+	str	r2, [r4, #4060]
+	ldr	r2, [r4, #1800]
+	str	r2, [r4, #4064]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [r4, #4052]
+	cmp	r2, #256
+	bne	.L2525
+	mov	r1, r6
+	mov	r2, r9
+	ldr	r0, .L2532+8
+	bl	printk
+	lsr	r3, r9, #10
+	strh	r3, [r4, #1908]	@ movhi
+	addw	r0, r4, #1868
+	ldr	r3, [r4, #980]
+	mov	r1, r6
+	add	r3, r3, r5
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+.L2525:
+	ldr	r3, [fp, #980]
+	movs	r1, #0
+	adds	r2, r3, r5
+	str	r1, [r2, #4]
+	strh	r6, [r3, r5]	@ movhi
+	b	.L2518
+.L2528:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2533:
+	.align	2
+.L2532:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC125
+	.fnend
+	.size	log2phys, .-log2phys
+	.align	1
+	.global	FtlReUsePrevPpa
+	.thumb
+	.thumb_func
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r6, r0
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r5, .L2543
+	ldr	r4, [r5, #816]
+	ldrh	r3, [r4, r0, lsl #1]
+	cbnz	r3, .L2535
+	ldr	r4, [r5, #828]
+	cbz	r4, .L2536
+	ldr	r1, [r5, #808]
+	mov	lr, #6
+	ldr	r2, .L2543+4
+	movw	ip, #65535
+	subs	r4, r4, r1
+	ldrh	r7, [r5, #832]
+	asrs	r4, r4, #1
+	muls	r4, r2, r4
+	uxth	r4, r4
+.L2537:
+	uxth	r2, r3
+	cmp	r2, r7
+	bcs	.L2536
+	cmp	r4, r0
+	bne	.L2538
+	mov	r1, r4
+	ldr	r0, .L2543+8
+	bl	List_remove_node
+	ldrh	r3, [r5, #832]
+	mov	r0, r4
+	subs	r3, r3, #1
+	strh	r3, [r5, #832]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r5, #816]
+	ldrh	r3, [r2, r4, lsl #1]
+	adds	r3, r3, #1
+	strh	r3, [r2, r4, lsl #1]	@ movhi
+	b	.L2536
+.L2538:
+	mul	r4, lr, r4
+	adds	r3, r3, #1
+	ldrh	r4, [r1, r4]
+	cmp	r4, ip
+	bne	.L2537
+	b	.L2536
+.L2535:
+	adds	r3, r3, #1
+	strh	r3, [r4, r0, lsl #1]	@ movhi
+.L2536:
+	mov	r0, r6
+	add	r1, sp, #4
+	movs	r2, #1
+	bl	log2phys
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, pc}
+.L2544:
+	.align	2
+.L2543:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.word	.LANCHOR2+828
+	.fnend
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	1
 	.global	FtlReadRefresh
 	.thumb
 	.thumb_func
@@ -15733,36 +15838,36 @@ FtlReadRefresh:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2543
+	ldr	r3, .L2560
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	.pad #44
 	sub	sp, sp, #44
-	ldr	r2, [r3, #1208]
+	ldr	r2, [r3, #1204]
 	mov	r4, r3
-	ldr	r5, .L2543+4
+	ldr	r5, .L2560+4
 	cmp	r2, #0
-	beq	.L2529
-	ldr	r1, [r3, #1212]
-	ldr	r2, [r5, #2960]
+	beq	.L2546
+	ldr	r1, [r3, #1208]
+	ldr	r2, [r5, #2968]
 	cmp	r1, r2
-	bcs	.L2530
+	bcs	.L2547
 	mov	r6, #2048
 	mov	r7, r3
-.L2535:
-	ldr	r0, [r4, #1212]
-	ldr	r3, [r5, #2960]
+.L2552:
+	ldr	r0, [r4, #1208]
+	ldr	r3, [r5, #2968]
 	cmp	r0, r3
-	bcs	.L2532
+	bcs	.L2549
 	mov	r1, sp
 	movs	r2, #0
 	bl	log2phys
-	ldr	r3, [r7, #1212]
-	adds	r3, r3, #1
-	str	r3, [r7, #1212]
 	ldr	r2, [sp]
+	ldr	r3, [r7, #1208]
 	adds	r1, r2, #1
-	beq	.L2533
+	add	r3, r3, #1
+	str	r3, [r7, #1208]
+	beq	.L2550
 	add	r0, sp, #40
 	str	r2, [sp, #8]
 	movs	r1, #1
@@ -15774,64 +15879,64 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	r3, [sp, #4]
 	cmp	r3, #256
-	bne	.L2532
+	bne	.L2549
 	ldr	r0, [sp]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L2532
-.L2533:
+	b	.L2549
+.L2550:
 	subs	r6, r6, #1
-	bne	.L2535
-.L2532:
+	bne	.L2552
+.L2549:
 	mov	r0, #-1
-	b	.L2537
-.L2530:
-	ldr	r2, [r3, #952]
+	b	.L2554
+.L2547:
+	ldr	r2, [r3, #996]
 	movs	r0, #0
+	str	r0, [r3, #1204]
 	str	r0, [r3, #1208]
-	str	r0, [r3, #1212]
-	str	r2, [r3, #1204]
-	b	.L2537
-.L2529:
+	str	r2, [r3, #1200]
+	b	.L2554
+.L2546:
 	ldrb	r2, [r5, #76]	@ zero_extendqisi2
-	ldr	r1, [r3, #1004]
-	ldr	r3, [r3, #948]
-	cbnz	r2, .L2540
+	ldr	r1, [r3, #1048]
+	ldr	r3, [r5, #2832]
+	cbnz	r2, .L2557
 	mov	r2, #33554432
 	add	r3, r3, r1, lsr #10
 	asrs	r2, r2, r3
-	b	.L2538
-.L2540:
+	b	.L2555
+.L2557:
 	mov	r2, #4194304
-.L2538:
-	ldr	r1, [r4, #952]
-	ldr	r3, [r4, #1204]
+.L2555:
+	ldr	r1, [r4, #996]
+	ldr	r3, [r4, #1200]
 	add	r0, r1, #1048576
 	cmp	r3, r0
-	bhi	.L2539
+	bhi	.L2556
 	add	r3, r3, r2
 	cmp	r3, r1
-	bcc	.L2539
-	ldr	r3, .L2543
-	ldrb	r3, [r3, #1040]	@ zero_extendqisi2
-	cbnz	r3, .L2541
-.L2539:
+	bcc	.L2556
+	ldr	r3, .L2560
+	ldrb	r3, [r3, #788]	@ zero_extendqisi2
+	cbnz	r3, .L2558
+.L2556:
 	movs	r3, #1
 	movs	r0, #0
-	str	r3, [r4, #1208]
-	str	r0, [r4, #1212]
-	str	r1, [r4, #1204]
-	b	.L2537
-.L2541:
+	str	r3, [r4, #1204]
+	str	r0, [r4, #1208]
+	str	r1, [r4, #1200]
+	b	.L2554
+.L2558:
 	movs	r0, #0
-.L2537:
+.L2554:
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L2544:
+.L2561:
 	.align	2
-.L2543:
+.L2560:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -15845,52 +15950,52 @@ FtlVendorPartWrite:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2558
+	ldr	r3, .L2575
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r5, r0
 	mov	r4, r1
 	add	r0, r0, r1
-	ldrh	r1, [r3, #2892]
+	ldrh	r1, [r3, #2904]
 	.pad #60
 	sub	sp, sp, #60
 	mov	r10, r2
-	ldrh	r2, [r3, #2906]
+	ldrh	r2, [r3, #2918]
 	cmp	r0, r1
 	str	r3, [sp, #4]
-	bhi	.L2553
-	ldr	r7, .L2558+4
+	bhi	.L2570
+	ldr	r7, .L2575+4
 	lsr	r6, r5, r2
 	mov	fp, #0
 	lsls	r3, r6, #2
 	str	r3, [sp]
-.L2547:
+.L2564:
 	cmp	r4, #0
-	beq	.L2557
-	ldr	r3, .L2558+4
+	beq	.L2574
+	ldr	r3, .L2575+4
 	mov	r0, r5
 	ldr	r2, [sp]
-	ldr	r3, [r3, #1840]
+	ldr	r3, [r3, #1844]
 	ldr	ip, [r3, r2]
 	ldr	r3, [sp, #4]
 	str	ip, [sp, #12]
-	ldrh	r2, [r3, #2904]
+	ldrh	r2, [r3, #2916]
 	mov	r1, r2
 	str	r2, [sp, #8]
 	bl	__aeabi_uidivmod
 	ldr	r2, [sp, #8]
-	mov	r8, r1
 	ldr	ip, [sp, #12]
 	subs	r3, r2, r1
+	mov	r8, r1
 	uxth	r9, r3
 	cmp	r9, r4
 	it	hi
 	uxthhi	r9, r4
 	cmp	ip, #0
-	beq	.L2549
+	beq	.L2566
 	cmp	r9, r2
-	beq	.L2549
-	ldr	r2, [r7, #1780]
+	beq	.L2566
+	ldr	r2, [r7, #1784]
 	movs	r1, #1
 	add	r0, sp, #20
 	str	ip, [sp, #24]
@@ -15899,16 +16004,16 @@ FtlVendorPartWrite:
 	str	r2, [sp, #32]
 	mov	r2, r1
 	bl	FlashReadPages
-	b	.L2550
-.L2549:
+	b	.L2567
+.L2566:
 	ldr	r3, [sp, #4]
 	movs	r1, #0
-	ldr	r0, [r7, #1780]
-	ldrh	r2, [r3, #2908]
+	ldr	r0, [r7, #1784]
+	ldrh	r2, [r3, #2920]
 	bl	ftl_memset
-.L2550:
+.L2567:
 	lsl	ip, r9, #9
-	ldr	r0, [r7, #1780]
+	ldr	r0, [r7, #1784]
 	uxth	r8, r8
 	mov	r1, r10
 	mov	r2, ip
@@ -15917,35 +16022,35 @@ FtlVendorPartWrite:
 	rsb	r4, r9, r4
 	bl	ftl_memcpy
 	mov	r1, r6
-	ldr	r0, .L2558+8
+	ldr	r0, .L2575+8
 	adds	r6, r6, #1
-	ldr	r2, [r7, #1780]
+	ldr	r2, [r7, #1784]
 	add	r5, r5, r9
 	bl	FtlMapWritePage
 	ldr	r3, [sp]
-	adds	r0, r0, #1
 	ldr	ip, [sp, #8]
-	it	eq
-	moveq	fp, #-1
 	adds	r3, r3, #4
 	str	r3, [sp]
 	add	r10, r10, ip
-	b	.L2547
-.L2557:
+	adds	r0, r0, #1
+	it	eq
+	moveq	fp, #-1
+	b	.L2564
+.L2574:
 	mov	r0, fp
-	b	.L2546
-.L2553:
+	b	.L2563
+.L2570:
 	mov	r0, #-1
-.L2546:
+.L2563:
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2559:
+.L2576:
 	.align	2
-.L2558:
+.L2575:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR2+4088
+	.word	.LANCHOR2+4092
 	.fnend
 	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
 	.align	1
@@ -15958,53 +16063,53 @@ Ftl_save_ext_data:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r2, .L2562
-	ldr	r3, .L2562+4
-	ldr	r1, [r2, #1128]
+	ldr	r2, .L2579
+	ldr	r3, .L2579+4
+	ldr	r1, [r2, #1124]
 	cmp	r1, r3
-	bne	.L2560
-	ldr	r3, .L2562+8
+	bne	.L2577
+	ldr	r3, .L2579+8
 	movs	r0, #0
 	movs	r1, #1
-	str	r3, [r2, #1132]
-	ldr	r3, [r2, #976]
+	str	r3, [r2, #1128]
+	ldr	r3, [r2, #1020]
+	str	r3, [r2, #1212]
+	ldr	r3, [r2, #1024]
 	str	r3, [r2, #1216]
-	ldr	r3, [r2, #980]
-	str	r3, [r2, #1220]
-	ldr	r3, [r2, #972]
+	ldr	r3, [r2, #1016]
+	str	r3, [r2, #1132]
+	ldr	r3, [r2, #1004]
 	str	r3, [r2, #1136]
-	ldr	r3, [r2, #960]
+	ldr	r3, [r2, #996]
 	str	r3, [r2, #1140]
-	ldr	r3, [r2, #952]
+	ldr	r3, [r2, #1012]
 	str	r3, [r2, #1144]
-	ldr	r3, [r2, #968]
-	str	r3, [r2, #1148]
-	ldr	r3, [r2, #996]
-	str	r3, [r2, #1156]
-	ldr	r3, [r2, #752]
-	add	r2, r2, #1128
+	ldr	r3, [r2, #1040]
+	str	r3, [r2, #1152]
+	ldr	r3, [r2, #756]
+	addw	r2, r2, #1124
 	str	r3, [r2, #32]
-	ldr	r3, [r2, #-172]
+	ldr	r3, [r2, #-124]
 	str	r3, [r2, #36]
-	ldr	r3, [r2, #-164]
+	ldr	r3, [r2, #-116]
 	str	r3, [r2, #40]
-	ldr	r3, [r2, #-124]
+	ldr	r3, [r2, #-76]
 	str	r3, [r2, #44]
-	ldr	r3, [r2, #-120]
+	ldr	r3, [r2, #-72]
 	str	r3, [r2, #48]
 	ldr	r3, [r2, #-4]
 	str	r3, [r2, #60]
 	ldr	r3, [r2, #612]
 	str	r3, [r2, #64]
 	b	FtlVendorPartWrite
-.L2560:
+.L2577:
 	bx	lr
-.L2563:
+.L2580:
 	.align	2
-.L2562:
+.L2579:
 	.word	.LANCHOR2
 	.word	1179929683
-	.word	1342177351
+	.word	1342177352
 	.fnend
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
 	.align	1
@@ -16016,43 +16121,44 @@ FtlEctTblFlush:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2571
+	ldr	r3, .L2588
 	push	{r4, lr}
 	.save {r4, lr}
-	ldr	r2, [r3, #948]
-	cbz	r2, .L2569
-	ldr	r2, [r3, #1008]
+	ldr	r2, [r3, #2832]
+	ldr	r3, .L2588+4
+	cbz	r2, .L2586
+	ldr	r2, [r3, #1052]
 	cmp	r2, #29
 	ite	hi
 	movhi	r1, #32
 	movls	r1, #4
-	b	.L2565
-.L2569:
+	b	.L2582
+.L2586:
 	movs	r1, #32
-.L2565:
-	ldr	r4, .L2571+4
-	ldrh	r2, [r4, #-212]
+.L2582:
+	ldr	r4, .L2588+8
+	ldrh	r2, [r4, #-208]
 	cmp	r2, #31
 	ittt	ls
 	addls	r2, r2, #1
 	movls	r1, #1
-	strhls	r2, [r4, #-212]	@ movhi
-	cbnz	r0, .L2567
-	ldr	r0, [r3, #1816]
+	strhls	r2, [r4, #-208]	@ movhi
+	cbnz	r0, .L2584
+	ldr	r0, [r3, #1820]
 	ldr	r2, [r0, #20]
 	add	r2, r2, r1
 	ldr	r1, [r0, #16]
 	cmp	r1, r2
-	bcc	.L2568
-.L2567:
-	ldr	r2, [r3, #1816]
+	bcc	.L2585
+.L2584:
+	ldr	r2, [r3, #1820]
 	movs	r0, #64
 	ldr	r1, [r2, #16]
 	str	r1, [r2, #20]
-	ldr	r1, .L2571+8
+	ldr	r1, .L2588+12
 	str	r1, [r2]
-	ldr	r2, [r3, #1816]
-	ldrh	r1, [r3, #1808]
+	ldr	r2, [r3, #1820]
+	ldrh	r1, [r3, #1812]
 	lsls	r3, r1, #9
 	str	r3, [r2, #12]
 	ldr	r3, [r2, #8]
@@ -16062,12 +16168,13 @@ FtlEctTblFlush:
 	str	r3, [r2, #4]
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L2568:
+.L2585:
 	movs	r0, #0
 	pop	{r4, pc}
-.L2572:
+.L2589:
 	.align	2
-.L2571:
+.L2588:
+	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR4
 	.word	1112818501
@@ -16082,47 +16189,47 @@ FtlVendorPartRead:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L2584
+	ldr	r3, .L2601
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r7, r0
 	mov	r5, r1
 	add	r0, r0, r1
-	ldrh	r1, [r3, #2892]
+	ldrh	r1, [r3, #2904]
 	.pad #60
 	sub	sp, sp, #60
 	mov	r8, r2
-	ldrh	r2, [r3, #2906]
+	ldrh	r2, [r3, #2918]
 	cmp	r0, r1
 	str	r3, [sp, #8]
-	bhi	.L2582
+	bhi	.L2599
 	lsr	r6, r7, r2
-	ldr	r10, .L2584+12
+	ldr	r10, .L2601+12
 	movs	r3, #0
 	str	r3, [sp]
 	lsl	r9, r6, #2
 	mov	fp, r10
-.L2575:
+.L2592:
 	cmp	r5, #0
-	beq	.L2583
-	ldr	r3, [r10, #1840]
+	beq	.L2600
+	ldr	r3, [r10, #1844]
 	mov	r0, r7
 	ldr	ip, [r3, r9]
 	ldr	r3, [sp, #8]
 	str	ip, [sp, #12]
-	ldrh	r4, [r3, #2904]
+	ldrh	r4, [r3, #2916]
 	mov	r1, r4
 	bl	__aeabi_uidivmod
-	subs	r3, r4, r1
 	ldr	ip, [sp, #12]
+	subs	r3, r4, r1
 	str	r1, [sp, #4]
 	uxth	r4, r3
 	cmp	r4, r5
 	it	hi
 	uxthhi	r4, r5
 	cmp	ip, #0
-	beq	.L2577
-	ldr	r2, [fp, #1780]
+	beq	.L2594
+	ldr	r2, [fp, #1784]
 	movs	r1, #1
 	add	r0, sp, #20
 	str	ip, [sp, #24]
@@ -16135,56 +16242,56 @@ FtlVendorPartRead:
 	ldr	r2, [sp, #20]
 	ldr	r3, [sp]
 	adds	r2, r2, #1
-	ldr	r2, [fp, #4048]
+	ldr	r2, [fp, #4052]
 	it	eq
 	moveq	r3, #-1
 	ldr	ip, [sp, #12]
 	cmp	r2, #256
 	str	r3, [sp]
-	bne	.L2579
+	bne	.L2596
 	mov	r1, r6
 	mov	r2, ip
-	ldr	r0, .L2584+4
+	ldr	r0, .L2601+4
 	bl	printk
-	ldr	r0, .L2584+8
+	ldr	r0, .L2601+8
 	mov	r1, r6
-	ldr	r2, [r10, #1780]
+	ldr	r2, [r10, #1784]
 	bl	FtlMapWritePage
-.L2579:
+.L2596:
 	ldrh	r2, [sp, #4]
 	mov	r0, r8
-	ldr	r1, [fp, #1780]
+	ldr	r1, [fp, #1784]
 	add	r1, r1, r2, lsl #9
 	lsls	r2, r4, #9
 	bl	ftl_memcpy
-	b	.L2580
-.L2577:
+	b	.L2597
+.L2594:
 	mov	r0, r8
 	mov	r1, ip
 	lsls	r2, r4, #9
 	bl	ftl_memset
-.L2580:
+.L2597:
 	adds	r6, r6, #1
 	subs	r5, r5, r4
 	add	r7, r7, r4
 	add	r8, r8, r4, lsl #9
 	add	r9, r9, #4
-	b	.L2575
-.L2583:
+	b	.L2592
+.L2600:
 	ldr	r0, [sp]
-	b	.L2574
-.L2582:
+	b	.L2591
+.L2599:
 	mov	r0, #-1
-.L2574:
+.L2591:
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2585:
+.L2602:
 	.align	2
-.L2584:
+.L2601:
 	.word	.LANCHOR0
-	.word	.LC123
-	.word	.LANCHOR2+4088
+	.word	.LC126
+	.word	.LANCHOR2+4092
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlVendorPartRead, .-FtlVendorPartRead
@@ -16200,33 +16307,33 @@ FtlLoadEctTbl:
 	push	{r4, lr}
 	.save {r4, lr}
 	movs	r0, #64
-	ldr	r4, .L2588
-	ldr	r2, [r4, #1816]
-	ldrh	r1, [r4, #1808]
+	ldr	r4, .L2605
+	ldr	r2, [r4, #1820]
+	ldrh	r1, [r4, #1812]
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #1816]
+	ldr	r3, [r4, #1820]
 	ldr	r2, [r3]
-	ldr	r3, .L2588+4
+	ldr	r3, .L2605+4
 	cmp	r2, r3
-	beq	.L2587
-	ldr	r1, .L2588+8
-	ldr	r0, .L2588+12
+	beq	.L2604
+	ldr	r1, .L2605+8
+	ldr	r0, .L2605+12
 	bl	printk
-	ldrh	r2, [r4, #1808]
-	ldr	r0, [r4, #1816]
+	ldrh	r2, [r4, #1812]
+	ldr	r0, [r4, #1820]
 	movs	r1, #0
 	lsls	r2, r2, #9
 	bl	ftl_memset
-.L2587:
+.L2604:
 	movs	r0, #0
 	pop	{r4, pc}
-.L2589:
+.L2606:
 	.align	2
-.L2588:
+.L2605:
 	.word	.LANCHOR2
 	.word	1112818501
-	.word	.LC124
-	.word	.LC74
+	.word	.LC127
+	.word	.LC77
 	.fnend
 	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
 	.align	1
@@ -16241,94 +16348,146 @@ Ftl_load_ext_data:
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
 	movs	r0, #0
-	ldr	r4, .L2594
+	ldr	r4, .L2611
 	movs	r1, #1
-	ldr	r5, .L2594+4
-	add	r2, r4, #1128
+	ldr	r5, .L2611+4
+	addw	r2, r4, #1124
 	bl	FtlVendorPartRead
-	ldr	r3, [r4, #1128]
+	ldr	r3, [r4, #1124]
 	cmp	r3, r5
-	beq	.L2591
-	add	r0, r4, #1128
+	beq	.L2608
+	addw	r0, r4, #1124
 	mov	r1, #512
 	bl	__memzero
-	str	r5, [r4, #1128]
-.L2591:
-	ldr	r2, [r4, #1128]
-	ldr	r3, .L2594
+	str	r5, [r4, #1124]
+.L2608:
+	ldr	r2, [r4, #1124]
+	ldr	r3, .L2611
 	cmp	r2, r5
-	bne	.L2592
+	bne	.L2609
+	ldr	r2, [r3, #1212]
+	str	r2, [r3, #1020]
 	ldr	r2, [r3, #1216]
-	str	r2, [r3, #976]
-	ldr	r2, [r3, #1220]
-	str	r2, [r3, #980]
+	str	r2, [r3, #1024]
+	ldr	r2, [r3, #1132]
+	str	r2, [r3, #1016]
 	ldr	r2, [r3, #1136]
-	str	r2, [r3, #972]
+	str	r2, [r3, #1004]
 	ldr	r2, [r3, #1140]
-	str	r2, [r3, #960]
+	str	r2, [r3, #996]
 	ldr	r2, [r3, #1144]
-	str	r2, [r3, #952]
-	ldr	r2, [r3, #1148]
-	str	r2, [r3, #968]
+	str	r2, [r3, #1012]
+	ldr	r2, [r3, #1152]
+	str	r2, [r3, #1040]
 	ldr	r2, [r3, #1156]
-	str	r2, [r3, #996]
+	str	r2, [r3, #756]
 	ldr	r2, [r3, #1160]
-	str	r2, [r3, #752]
+	str	r2, [r3, #1000]
 	ldr	r2, [r3, #1164]
-	str	r2, [r3, #956]
+	str	r2, [r3, #1008]
 	ldr	r2, [r3, #1168]
-	str	r2, [r3, #964]
+	str	r2, [r3, #1048]
 	ldr	r2, [r3, #1172]
-	str	r2, [r3, #1004]
-	ldr	r2, [r3, #1176]
-	str	r2, [r3, #1008]
-	ldr	r2, [r3, #1188]
-	str	r2, [r3, #1124]
-.L2592:
+	str	r2, [r3, #1052]
+	ldr	r2, [r3, #1184]
+	str	r2, [r3, #1120]
+.L2609:
 	movs	r3, #0
-	ldr	r2, [r4, #1196]
-	str	r3, [r4, #1740]
-	ldr	r3, .L2594+8
+	ldr	r2, [r4, #1192]
+	str	r3, [r4, #1736]
+	ldr	r3, .L2611+8
+	ldr	r5, .L2611+12
 	cmp	r2, r3
-	bne	.L2593
-	ldr	r3, .L2594
-	movs	r2, #1
-	ldr	r0, .L2594+12
-	ldr	r1, .L2594+16
-	str	r2, [r3, #948]
+	bne	.L2610
+	ldr	r0, .L2611+16
+	movs	r3, #1
+	ldr	r1, .L2611+20
+	str	r3, [r5, #2832]
 	bl	printk
-.L2593:
-	ldr	r3, .L2594+20
-	ldr	r2, [r4, #996]
-	ldr	r0, [r4, #992]
-	ldrh	r1, [r3, #2888]
-	mla	r0, r0, r1, r2
-	ldrh	r1, [r3, #2836]
+.L2610:
+	ldrh	r2, [r5, #2900]
+	ldr	r3, [r4, #1040]
+	ldr	r0, [r4, #1036]
+	ldrh	r1, [r5, #2848]
+	mla	r0, r0, r2, r3
 	bl	__aeabi_uidiv
-	str	r0, [r4, #1000]
+	str	r0, [r4, #1044]
 	pop	{r3, r4, r5, pc}
-.L2595:
+.L2612:
 	.align	2
-.L2594:
+.L2611:
 	.word	.LANCHOR2
 	.word	1179929683
 	.word	305432421
-	.word	.LC74
-	.word	.LC125
 	.word	.LANCHOR0
+	.word	.LC77
+	.word	.LC128
 	.fnend
 	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
 	.align	1
-	.global	StorageSysDataLoad
+	.global	ftl_vendor_read
 	.thumb
 	.thumb_func
-	.type	StorageSysDataLoad, %function
-StorageSysDataLoad:
+	.type	ftl_vendor_read, %function
+ftl_vendor_read:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
+	@ link register save eliminated.
+	add	r0, r0, #256
+	b	FtlVendorPartRead
+	.fnend
+	.size	ftl_vendor_read, .-ftl_vendor_read
+	.align	1
+	.global	FlashBootVendorRead
+	.thumb
+	.thumb_func
+	.type	FlashBootVendorRead, %function
+FlashBootVendorRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, r5
+	mov	r0, r6
+	bl	ftl_vendor_read
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	pop	{r4, r5, r6, pc}
+	.fnend
+	.size	FlashBootVendorRead, .-FlashBootVendorRead
+	.align	1
+	.global	ftl_sys_read
+	.thumb
+	.thumb_func
+	.type	ftl_sys_read, %function
+ftl_sys_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	add	r0, r0, #512
+	b	FtlVendorPartRead
+	.fnend
+	.size	ftl_sys_read, .-ftl_sys_read
+	.align	1
+	.global	StorageSysDataLoad
+	.thumb
+	.thumb_func
+	.type	StorageSysDataLoad, %function
+StorageSysDataLoad:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
 	mov	r5, r0
 	mov	r4, r1
 	mov	r0, r1
@@ -16337,8 +16496,8 @@ StorageSysDataLoad:
 	bl	rknand_device_lock
 	mov	r2, r4
 	movs	r1, #1
-	add	r0, r5, #512
-	bl	FtlVendorPartRead
+	mov	r0, r5
+	bl	ftl_sys_read
 	mov	r4, r0
 	bl	rknand_device_unlock
 	mov	r0, r4
@@ -16360,42 +16519,42 @@ FtlMapBlkWriteDumpData:
 	ldr	r2, [r0, #36]
 	ldrh	r5, [r0, #6]
 	ldr	r3, [r0, #24]
-	cbz	r2, .L2597
-	ldr	r4, .L2603
+	cbz	r2, .L2617
+	ldr	r4, .L2623
 	movs	r2, #0
 	str	r2, [r0, #36]
-	ldr	r2, [r4, #740]
-	cbnz	r2, .L2597
+	ldr	r2, [r4, #744]
+	cbnz	r2, .L2617
 	subs	r5, r5, #1
-	ldr	r0, [r4, #1776]
-	ldr	r2, [r4, #1796]
+	ldr	r0, [r4, #1780]
+	ldr	r2, [r4, #1800]
 	uxth	r5, r5
-	str	r0, [r4, #4056]
-	str	r2, [r4, #4060]
+	str	r0, [r4, #4060]
+	str	r2, [r4, #4064]
 	ldr	r3, [r3, r5, lsl #2]
-	str	r3, [r4, #4052]
-	cbz	r3, .L2601
+	str	r3, [r4, #4056]
+	cbz	r3, .L2621
 	movs	r1, #1
-	add	r0, r4, #4048
+	addw	r0, r4, #4052
 	mov	r2, r1
 	bl	FlashReadPages
-	b	.L2602
-.L2601:
-	ldr	r3, .L2603+4
+	b	.L2622
+.L2621:
+	ldr	r3, .L2623+4
 	movs	r1, #255
-	ldrh	r2, [r3, #2908]
+	ldrh	r2, [r3, #2920]
 	bl	ftl_memset
-.L2602:
+.L2622:
 	mov	r0, r6
 	mov	r1, r5
-	ldr	r2, [r4, #4056]
+	ldr	r2, [r4, #4060]
 	pop	{r4, r5, r6, lr}
 	b	FtlMapWritePage
-.L2597:
+.L2617:
 	pop	{r4, r5, r6, pc}
-.L2604:
+.L2624:
 	.align	2
-.L2603:
+.L2623:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
@@ -16417,60 +16576,60 @@ FtlRecoverySuperblock:
 	sub	sp, sp, #68
 	mov	r4, r0
 	cmp	r3, r7
-	beq	.L2749
+	beq	.L2769
 	ldrh	r3, [r0, #2]
 	movs	r5, #0
-	ldr	r6, .L2765
+	ldr	r6, .L2785
 	str	r3, [sp, #12]
 	ldrb	r3, [r0, #6]	@ zero_extendqisi2
 	ldr	r2, [sp, #12]
 	str	r3, [sp, #28]
-	ldrh	r3, [r6, #2898]
+	ldrh	r3, [r6, #2910]
 	cmp	r3, r2
-	bne	.L2608
+	bne	.L2628
 	strh	r5, [r0, #4]	@ movhi
 	strb	r5, [r0, #6]
-	b	.L2749
-.L2608:
+	b	.L2769
+.L2628:
 	ldrh	r0, [r0, #16]
-.L2609:
+.L2629:
 	cmp	r0, r7
 	add	r5, r5, #1
-	bne	.L2760
+	bne	.L2780
 	uxth	r3, r5
 	adds	r3, r3, #8
 	ldrh	r0, [r4, r3, lsl #1]
-	b	.L2609
-.L2760:
+	b	.L2629
+.L2780:
 	ldrb	r1, [r4, #8]	@ zero_extendqisi2
 	cmp	r1, #1
-	bne	.L2611
+	bne	.L2631
 	bl	FtlGetLastWrittenPage
 	adds	r2, r0, #1
 	mov	r5, r0
-	beq	.L2612
+	beq	.L2632
 	ldrb	r3, [r6, #76]	@ zero_extendqisi2
-	cbnz	r3, .L2751
-	ldr	r3, .L2765
+	cbnz	r3, .L2771
+	ldr	r3, .L2785
 	add	r3, r3, r0, lsl #1
 	ldrh	r7, [r3, #80]
-	b	.L2686
-.L2611:
+	b	.L2706
+.L2631:
 	movs	r1, #0
 	bl	FtlGetLastWrittenPage
 	adds	r3, r0, #1
 	mov	r5, r0
-	beq	.L2612
-.L2751:
+	beq	.L2632
+.L2771:
 	mov	r7, r5
-.L2686:
-	ldr	r3, .L2765+4
+.L2706:
+	ldr	r3, .L2785+4
 	movw	r9, #65535
-	ldrh	ip, [r6, #2828]
+	ldrh	ip, [r6, #2840]
 	mov	r10, #36
-	ldrh	r0, [r6, #2910]
+	ldrh	r0, [r6, #2922]
 	ldr	r2, [r3, #1764]
-	ldr	r8, [r3, #1668]
+	ldr	r8, [r3, #1664]
 	add	r3, r4, #14
 	str	r3, [sp, #20]
 	str	r2, [sp, #4]
@@ -16478,16 +16637,16 @@ FtlRecoverySuperblock:
 	mov	lr, r3
 	mov	r6, r2
 	mov	fp, r2
-	b	.L2614
-.L2612:
+	b	.L2634
+.L2632:
 	movs	r3, #0
 	strh	r3, [r4, #2]	@ movhi
 	strb	r3, [r4, #6]
-	b	.L2749
-.L2617:
+	b	.L2769
+.L2637:
 	ldrh	r3, [lr, #2]!
 	cmp	r3, r9
-	beq	.L2615
+	beq	.L2635
 	ldr	r1, [sp, #4]
 	orr	r3, r7, r3, lsl #10
 	mla	r1, r10, r6, r1
@@ -16502,105 +16661,105 @@ FtlRecoverySuperblock:
 	bic	r3, r3, #3
 	add	r3, r3, r8
 	str	r3, [r1, #12]
-.L2615:
+.L2635:
 	adds	r2, r2, #1
-.L2614:
+.L2634:
 	uxth	r3, r2
 	cmp	r3, ip
-	bcc	.L2617
+	bcc	.L2637
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	cmp	r3, #1
-	bne	.L2688
-	ldr	r3, .L2765
+	bne	.L2708
+	ldr	r3, .L2785
 	ldrb	r1, [r3, #76]	@ zero_extendqisi2
 	adds	r3, r1, #0
 	it	ne
 	movne	r3, #1
-	b	.L2752
-.L2688:
+	b	.L2772
+.L2708:
 	movs	r3, #0
-.L2752:
-	ldr	r8, .L2765+4
+.L2772:
+	ldr	r8, .L2785+4
 	mov	r1, r6
 	str	r3, [sp, #24]
 	mov	fp, #0
 	ldr	r2, [sp, #24]
 	ldr	r0, [r8, #1764]
 	bl	FlashReadPages
-	ldr	r3, [r8, #988]
-	subs	r3, r3, #1
+	ldr	r3, [r8, #1032]
 	str	r8, [sp, #8]
+	subs	r3, r3, #1
 	str	r3, [sp, #4]
 	movw	r3, #65535
 	str	r3, [sp, #16]
-.L2619:
+.L2639:
 	uxth	r9, fp
 	cmp	r9, r6
-	bcs	.L2626
+	bcs	.L2646
 	movs	r1, #36
 	ldr	r0, [r8, #1764]
 	mul	r1, r1, fp
 	add	lr, r0, r1
 	ldr	r1, [r0, r1]
-	cbnz	r1, .L2620
+	cbnz	r1, .L2640
 	ldr	r3, [lr, #12]
 	ldr	r10, [r3, #4]
 	cmp	r10, #-1
-	beq	.L2621
+	beq	.L2641
 	mov	r0, r10
-	ldr	r1, [r8, #988]
+	ldr	r1, [r8, #1032]
 	str	r3, [sp, #32]
 	bl	ftl_cmp_data_ver
 	ldr	r3, [sp, #32]
-	cbz	r0, .L2621
+	cbz	r0, .L2641
 	add	r1, r10, #1
-	str	r1, [r8, #988]
-.L2621:
+	str	r1, [r8, #1032]
+.L2641:
 	ldr	r1, [r3]
 	adds	r1, r1, #1
-	bne	.L2622
-.L2626:
+	bne	.L2642
+.L2646:
 	cmp	r9, r6
-	ldr	r6, .L2765+4
-	bne	.L2750
+	ldr	r6, .L2785+4
+	bne	.L2770
 	ldr	r3, [r6, #1764]
 	adds	r5, r5, #1
 	uxth	r10, r5
 	ldr	r0, [r3, #4]
-	b	.L2753
-.L2620:
+	b	.L2773
+.L2640:
 	ldr	r1, [lr, #4]
-	ldr	r0, .L2765+8
+	ldr	r0, .L2785+8
 	bl	printk
 	uxth	r3, r7
 	ldrh	r1, [r4]
 	str	r3, [sp, #16]
-	ldr	r3, .L2765+12
-	strh	r1, [r3, #-210]	@ movhi
-.L2622:
+	ldr	r3, .L2785+12
+	strh	r1, [r3, #-206]	@ movhi
+.L2642:
 	add	fp, fp, #1
-	b	.L2619
-.L2750:
+	b	.L2639
+.L2770:
 	ldr	r3, [sp, #8]
 	movs	r2, #36
 	uxth	r10, r5
 	ldr	r3, [r3, #1764]
 	mla	r9, r2, r9, r3
 	ldr	r0, [r9, #4]
-.L2753:
+.L2773:
 	ubfx	r0, r0, #10, #16
 	bl	P2V_plane
 	ldrb	r5, [r4, #8]	@ zero_extendqisi2
-	ldr	r2, .L2765
+	ldr	r2, .L2785
 	cmp	r5, #1
 	str	r0, [sp, #8]
-	bne	.L2628
+	bne	.L2648
 	ldrb	r3, [r2, #76]	@ zero_extendqisi2
-	cbnz	r3, .L2628
+	cbnz	r3, .L2648
 	add	r3, r2, r10, lsl #1
 	ldrh	r10, [r3, #80]
-.L2628:
-	ldrh	r3, [r2, #2898]
+.L2648:
+	ldrh	r3, [r2, #2910]
 	cmp	r3, r10
 	itttt	eq
 	strheq	r10, [r4, #2]	@ movhi
@@ -16611,34 +16770,34 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #32]
 	ldr	r3, [sp, #12]
 	cmp	r10, r3
-	bne	.L2630
+	bne	.L2650
 	ldr	r3, [sp, #8]
 	ldr	r2, [sp, #32]
 	cmp	r3, r2
-	bne	.L2630
+	bne	.L2650
 	mov	r0, r4
 	mov	r1, r10
 	mov	r2, r3
-	b	.L2758
-.L2630:
+	b	.L2778
+.L2650:
 	ldr	r2, [sp, #16]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2631
+	bne	.L2651
 	cmp	r5, #0
-	bne	.L2632
-.L2631:
-	ldr	r3, [r6, #1928]
+	bne	.L2652
+.L2651:
+	ldr	r3, [r6, #1932]
 	uxth	fp, r7
 	mov	r9, #-1
-	ldr	r8, .L2765+4
+	ldr	r8, .L2785+4
 	adds	r3, r3, #1
 	mov	r7, r9
 	ittt	eq
-	ldreq	r3, .L2765+4
+	ldreq	r3, .L2785+4
 	ldreq	r2, [sp, #4]
-	streq	r2, [r3, #1928]
-	ldr	r3, [r6, #1928]
+	streq	r2, [r3, #1932]
+	ldr	r3, [r6, #1932]
 	str	r3, [sp, #16]
 	ldr	r3, [sp, #12]
 	adds	r3, r3, #7
@@ -16647,24 +16806,24 @@ FtlRecoverySuperblock:
 	subgt	r5, fp, #7
 	ldrle	r5, [sp, #12]
 	uxthgt	r5, r5
-.L2635:
+.L2655:
 	cmp	r5, fp
-	bhi	.L2648
-	ldr	r3, .L2765
+	bhi	.L2668
+	ldr	r3, .L2785
 	ldr	r1, [sp, #20]
-	ldrh	ip, [r3, #2828]
+	ldrh	ip, [r3, #2840]
 	ldr	r3, [r8, #1764]
 	str	r3, [sp, #28]
 	movs	r3, #0
 	mov	r6, r3
-.L2649:
+.L2669:
 	uxth	r2, r3
 	cmp	r2, ip
-	bcs	.L2761
+	bcs	.L2781
 	ldrh	r2, [r1, #2]!
 	movw	r0, #65535
 	cmp	r2, r0
-	beq	.L2636
+	beq	.L2656
 	ldr	r0, [sp, #28]
 	mov	lr, #36
 	orr	r2, r5, r2, lsl #10
@@ -16672,133 +16831,133 @@ FtlRecoverySuperblock:
 	adds	r6, r6, #1
 	uxth	r6, r6
 	str	r2, [r0, #4]
-.L2636:
+.L2656:
 	adds	r3, r3, #1
-	b	.L2649
-.L2761:
+	b	.L2669
+.L2781:
 	mov	r1, r6
 	ldr	r2, [sp, #24]
 	ldr	r0, [r8, #1764]
 	bl	FlashReadPages
-	ldr	r3, .L2765
+	ldr	r3, .L2785
 	movs	r2, #36
 	movw	r1, #65535
 	ldrb	r0, [r3, #76]	@ zero_extendqisi2
 	ldr	r3, [r8, #1764]
 	mla	r6, r2, r6, r3
-	ldr	r2, .L2765
+	ldr	r2, .L2785
 	add	lr, r2, r5, lsl #1
-.L2638:
+.L2658:
 	cmp	r3, r6
-	beq	.L2762
+	beq	.L2782
 	ldr	r2, [r3]
-	cbnz	r2, .L2639
+	cbnz	r2, .L2659
 	ldr	r2, [r3, #12]
 	ldrh	ip, [r2]
 	cmp	ip, r1
-	beq	.L2640
+	beq	.L2660
 	ldr	r2, [r2, #4]
 	cmp	r2, #-1
-	beq	.L2640
+	beq	.L2660
 	cmp	r9, #-1
-	ldr	r7, [r8, #1928]
-	str	r2, [r8, #1928]
-	bne	.L2640
+	ldr	r7, [r8, #1932]
+	str	r2, [r8, #1932]
+	bne	.L2660
 	ldrh	r2, [lr, #592]
 	cmp	r2, r1
-	bne	.L2641
+	bne	.L2661
 	cmp	r0, #0
-	beq	.L2640
-.L2641:
+	beq	.L2660
+.L2661:
 	ldr	r2, [sp, #4]
 	cmp	r7, r2
 	ite	ne
 	movne	r9, r7
 	moveq	r9, #-1
-	b	.L2640
-.L2766:
+	b	.L2660
+.L2786:
 	.align	2
-.L2765:
+.L2785:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC126
+	.word	.LC129
 	.word	.LANCHOR4
-.L2639:
-	ldr	r3, .L2767
+.L2659:
+	ldr	r3, .L2787
 	ldrh	r2, [r4]
-	strh	r2, [r3, #-210]	@ movhi
+	strh	r2, [r3, #-206]	@ movhi
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
-	cbnz	r3, .L2632
-	ldr	r3, .L2767+4
+	cbnz	r3, .L2652
+	ldr	r3, .L2787+4
 	add	r5, r3, r5, lsl #1
 	movw	r3, #65535
 	ldrh	r2, [r5, #592]
 	cmp	r2, r3
-	ldr	r3, .L2767+8
-	bne	.L2643
+	ldr	r3, .L2787+8
+	bne	.L2663
 	cmp	r9, #-1
-	beq	.L2644
-	str	r9, [r3, #1928]
-	b	.L2632
-.L2644:
+	beq	.L2664
+	str	r9, [r3, #1932]
+	b	.L2652
+.L2664:
 	ldr	r2, [sp, #16]
 	ldr	r1, [sp, #4]
 	cmp	r2, r1
-	bne	.L2754
-	ldr	r2, [r3, #1928]
-	b	.L2759
-.L2643:
+	bne	.L2774
+	ldr	r2, [r3, #1932]
+	b	.L2779
+.L2663:
 	ldr	r2, [sp, #4]
 	cmp	r7, r2
-	beq	.L2646
+	beq	.L2666
 	adds	r2, r7, #1
-	beq	.L2632
-	str	r7, [r3, #1928]
-	b	.L2632
-.L2646:
-	ldr	r2, [r3, #1928]
+	beq	.L2652
+	str	r7, [r3, #1932]
+	b	.L2652
+.L2666:
+	ldr	r2, [r3, #1932]
 	ldr	r1, [sp, #4]
 	cmp	r2, r1
-	beq	.L2632
-.L2759:
+	beq	.L2652
+.L2779:
 	subs	r2, r2, #1
-	b	.L2754
-.L2640:
+	b	.L2774
+.L2660:
 	adds	r3, r3, #36
-	b	.L2638
-.L2762:
+	b	.L2658
+.L2782:
 	adds	r5, r5, #1
 	uxth	r5, r5
-	b	.L2635
-.L2648:
-	ldr	r3, .L2767+8
+	b	.L2655
+.L2668:
+	ldr	r3, .L2787+8
 	mov	r2, #-1
-.L2754:
-	str	r2, [r3, #1928]
-.L2632:
-	ldr	r3, .L2767
+.L2774:
+	str	r2, [r3, #1932]
+.L2652:
+	ldr	r3, .L2787
 	movs	r2, #1
-	ldr	r0, .L2767+12
-	ldr	r5, .L2767+8
-	strh	r2, [r3, #-208]	@ movhi
+	ldr	r0, .L2787+12
+	ldr	r5, .L2787+8
+	strh	r2, [r3, #-204]	@ movhi
 	bl	FtlMapBlkWriteDumpData
 	ldr	fp, [sp, #12]
-.L2650:
-	ldr	r3, .L2767+4
+.L2670:
+	ldr	r3, .L2787+4
 	movw	r9, #65535
 	ldr	r1, [r5, #1764]
 	movs	r6, #0
 	ldr	r7, [sp, #20]
-	ldrh	r8, [r3, #2828]
+	ldrh	r8, [r3, #2840]
 	ldrb	r0, [r3, #76]	@ zero_extendqisi2
 	str	r6, [sp, #16]
-.L2651:
+.L2671:
 	uxth	r3, r6
 	cmp	r3, r8
-	bcs	.L2763
+	bcs	.L2783
 	ldrh	r3, [r7, #2]!
 	cmp	r3, r9
-	beq	.L2652
+	beq	.L2672
 	ldr	r2, [sp, #16]
 	mov	lr, #36
 	orr	r3, fp, r3, lsl #10
@@ -16806,30 +16965,30 @@ FtlRecoverySuperblock:
 	str	r3, [r2, #4]
 	ldrb	lr, [r4, #8]	@ zero_extendqisi2
 	cmp	lr, #1
-	bne	.L2653
-	cbz	r0, .L2653
+	bne	.L2673
+	cbz	r0, .L2673
 	orr	r3, r3, #-2147483648
 	str	r3, [r2, #4]
-.L2653:
+.L2673:
 	ldr	r3, [sp, #16]
 	add	ip, r3, #1
 	uxth	r3, ip
 	str	r3, [sp, #16]
-.L2652:
+.L2672:
 	adds	r6, r6, #1
-	b	.L2651
-.L2763:
+	b	.L2671
+.L2783:
 	ldr	r0, [r5, #1764]
 	ldr	r1, [sp, #16]
 	ldr	r2, [sp, #24]
 	bl	FlashReadPages
 	movs	r3, #0
-.L2757:
+.L2777:
 	str	r3, [sp, #28]
 	ldr	r2, [sp, #16]
 	ldrh	r3, [sp, #28]
 	cmp	r3, r2
-	bcs	.L2764
+	bcs	.L2784
 	ldr	r3, [sp, #28]
 	movs	r6, #36
 	ldr	r9, [r5, #1764]
@@ -16841,38 +17000,38 @@ FtlRecoverySuperblock:
 	bl	P2V_plane
 	ldr	r3, [sp, #12]
 	cmp	fp, r3
-	bcc	.L2656
-	bne	.L2657
+	bcc	.L2676
+	bne	.L2677
 	ldr	r3, [sp, #32]
 	cmp	r0, r3
-	bcc	.L2656
-.L2657:
+	bcc	.L2676
+.L2677:
 	cmp	fp, r10
-	bne	.L2658
+	bne	.L2678
 	ldr	r3, [sp, #8]
 	cmp	r0, r3
-	beq	.L2659
-.L2658:
+	beq	.L2679
+.L2678:
 	ldr	r3, [r9, r6]
 	adds	r3, r3, #1
-	beq	.L2660
+	beq	.L2680
 	ldr	r8, [r8, #12]
 	movw	r3, #61589
 	ldrh	r2, [r8]
 	cmp	r2, r3
-	bne	.L2667
+	bne	.L2687
 	ldr	r3, [r8, #4]
 	adds	r7, r3, #1
 	str	r3, [sp, #4]
-	beq	.L2662
+	beq	.L2682
 	mov	r0, r3
-	ldr	r1, [r5, #988]
+	ldr	r1, [r5, #1032]
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L2662
+	cbz	r0, .L2682
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
-	str	r3, [r5, #988]
-.L2662:
+	str	r3, [r5, #1032]
+.L2682:
 	ldr	r7, [r8, #8]
 	add	r1, sp, #56
 	ldr	r3, [r8, #12]
@@ -16880,22 +17039,22 @@ FtlRecoverySuperblock:
 	mov	r0, r7
 	str	r3, [sp, #52]
 	bl	log2phys
-	ldr	r1, [r5, #1928]
+	ldr	r1, [r5, #1932]
 	adds	r0, r1, #1
-	beq	.L2663
+	beq	.L2683
 	ldr	r0, [sp, #4]
 	bl	ftl_cmp_data_ver
 	cmp	r0, #0
-	beq	.L2663
+	beq	.L2683
 	ldr	r3, [sp, #52]
 	adds	r2, r3, #1
-	beq	.L2664
+	beq	.L2684
 	ldr	r0, [r5, #1764]
 	movs	r2, #0
 	movs	r1, #1
 	add	r0, r0, r6
-	str	r3, [r0, #4]
 	ldr	r9, [r0, #12]
+	str	r3, [r0, #4]
 	bl	FlashReadPages
 	ldr	r2, [r5, #1764]
 	ldr	r3, [r9, #4]
@@ -16903,240 +17062,240 @@ FtlRecoverySuperblock:
 	str	r3, [sp, #36]
 	ldr	r3, [r2, r6]
 	adds	r3, r3, #1
-	bne	.L2665
-	b	.L2666
-.L2664:
+	bne	.L2685
+	b	.L2686
+.L2684:
 	ldr	r3, [sp, #60]
 	ldr	r2, [sp, #56]
 	cmp	r2, r3
-	bne	.L2667
+	bne	.L2687
 	mov	r0, r7
 	add	r1, sp, #52
 	movs	r2, #1
 	bl	log2phys
-.L2667:
+.L2687:
 	ldrh	r0, [r4]
-	b	.L2756
-.L2665:
+	b	.L2776
+.L2685:
 	ldr	r8, [r9, #8]
 	cmp	r8, r7
-	bne	.L2666
-	ldr	r0, [r5, #1928]
+	bne	.L2686
+	ldr	r0, [r5, #1932]
 	ldr	r1, [sp, #36]
 	str	r2, [sp, #44]
 	str	ip, [sp, #40]
 	bl	ftl_cmp_data_ver
 	ldr	ip, [sp, #40]
 	ldr	r2, [sp, #44]
-	cbz	r0, .L2666
+	cbz	r0, .L2686
 	ldr	r3, [sp, #56]
 	ldr	r1, [sp, #60]
 	cmp	r3, r1
-	beq	.L2672
+	beq	.L2692
 	ldr	r1, [sp, #52]
 	cmp	r3, r1
-	beq	.L2666
+	beq	.L2686
 	adds	r0, r3, #1
-	beq	.L2670
+	beq	.L2690
 	str	r3, [ip, #4]
 	mov	r0, ip
 	movs	r1, #1
 	movs	r2, #0
 	ldr	r9, [ip, #12]
 	bl	FlashReadPages
-	b	.L2671
-.L2670:
+	b	.L2691
+.L2690:
 	str	r3, [r2, r6]
-.L2671:
+.L2691:
 	ldr	r3, [r5, #1764]
 	ldr	r3, [r3, r6]
 	adds	r3, r3, #1
-	beq	.L2672
+	beq	.L2692
 	ldr	r6, [r9, #4]
-	ldr	r0, [r5, #1928]
+	ldr	r0, [r5, #1932]
 	mov	r1, r6
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L2672
+	cbz	r0, .L2692
 	ldr	r0, [sp, #36]
 	mov	r1, r6
 	bl	ftl_cmp_data_ver
-	cbz	r0, .L2666
-.L2672:
+	cbz	r0, .L2686
+.L2692:
 	mov	r0, r8
 	ldr	r1, [sp, #52]
 	bl	FtlReUsePrevPpa
-.L2666:
+.L2686:
 	ldrh	r0, [r4]
 	mov	r3, #-1
 	str	r3, [sp, #52]
 	bl	decrement_vpc_count
-	b	.L2674
-.L2768:
+	b	.L2694
+.L2788:
 	.align	2
-.L2767:
+.L2787:
 	.word	.LANCHOR4
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LANCHOR2+1864
-.L2663:
+	.word	.LANCHOR2+1868
+.L2683:
 	ldr	r3, [sp, #60]
 	ldr	r2, [sp, #56]
 	cmp	r2, r3
-	beq	.L2674
+	beq	.L2694
 	mov	r0, r7
 	add	r1, sp, #60
 	movs	r2, #1
 	bl	log2phys
 	ldr	r8, [sp, #56]
 	cmp	r8, #-1
-	beq	.L2674
+	beq	.L2694
 	ldr	r3, [sp, #52]
 	cmp	r8, r3
-	beq	.L2674
+	beq	.L2694
 	ubfx	r0, r8, #10, #16
 	bl	P2V_block_in_plane
-	ldrh	r3, [r5, #788]
-	cmp	r3, r0
-	beq	.L2677
 	ldrh	r3, [r5, #836]
 	cmp	r3, r0
-	beq	.L2677
+	beq	.L2697
 	ldrh	r3, [r5, #884]
 	cmp	r3, r0
-	bne	.L2674
-.L2677:
-	ldr	r3, .L2769
+	beq	.L2697
+	ldrh	r3, [r5, #932]
+	cmp	r3, r0
+	bne	.L2694
+.L2697:
+	ldr	r3, .L2789
 	movs	r1, #1
 	movs	r2, #0
 	ldr	r0, [r3, #1764]
 	str	r8, [r0, #4]
 	ldr	r6, [r0, #12]
 	bl	FlashReadPages
-	ldr	r3, .L2769
+	ldr	r3, .L2789
 	ldr	r1, [r6, #4]
 	ldr	r3, [r3, #1764]
 	ldr	r3, [r3]
 	adds	r3, r3, #1
-	beq	.L2674
+	beq	.L2694
 	ldr	r0, [sp, #4]
 	bl	ftl_cmp_data_ver
-	cbnz	r0, .L2674
+	cbnz	r0, .L2694
 	mov	r0, r7
 	add	r1, sp, #56
 	movs	r2, #1
 	bl	log2phys
-.L2674:
+.L2694:
 	ldr	r0, [sp, #52]
 	adds	r1, r0, #1
-	beq	.L2656
+	beq	.L2676
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, [r5, #768]
+	ldr	r3, [r5, #816]
 	ldrh	r3, [r3, r0, lsl #1]
 	mov	r1, r0
-	cbz	r3, .L2678
-.L2756:
+	cbz	r3, .L2698
+.L2776:
 	bl	decrement_vpc_count
-	b	.L2656
-.L2678:
-	ldr	r0, .L2769+4
+	b	.L2676
+.L2698:
+	ldr	r0, .L2789+4
 	bl	printk
-	b	.L2656
-.L2660:
+	b	.L2676
+.L2680:
 	ldrh	r3, [r4]
 	mov	r1, r7
-	ldr	r2, .L2769+8
-	ldr	r0, .L2769+12
-	strh	r3, [r2, #-210]	@ movhi
+	ldr	r2, .L2789+8
+	ldr	r0, .L2789+12
+	strh	r3, [r2, #-206]	@ movhi
 	ldr	r2, [sp, #4]
 	bl	printk
-	ldr	r3, .L2769+8
-	ldr	r3, [r3, #-204]
+	ldr	r3, .L2789+8
+	ldr	r3, [r3, #-200]
 	cmp	r3, #31
-	bhi	.L2679
-	ldr	r2, .L2769+8
+	bhi	.L2699
+	ldr	r2, .L2789+8
 	ldr	r1, [sp, #60]
 	add	r2, r2, r3, lsl #2
 	adds	r3, r3, #1
-	str	r1, [r2, #-200]
-	ldr	r2, .L2769+8
-	str	r3, [r2, #-204]
-.L2679:
+	str	r1, [r2, #-196]
+	ldr	r2, .L2789+8
+	str	r3, [r2, #-200]
+.L2699:
 	ldrh	r0, [r4]
 	bl	decrement_vpc_count
-	ldr	r3, [r5, #1928]
+	ldr	r3, [r5, #1932]
 	adds	r2, r3, #1
-	bne	.L2680
+	bne	.L2700
 	ldr	r3, [sp, #4]
-	b	.L2755
-.L2680:
+	b	.L2775
+.L2700:
 	ldr	r2, [sp, #4]
 	cmp	r3, r2
-	bls	.L2656
+	bls	.L2676
 	mov	r3, r2
-.L2755:
-	str	r3, [r5, #1928]
-.L2656:
+.L2775:
+	str	r3, [r5, #1932]
+.L2676:
 	ldr	r3, [sp, #28]
 	adds	r3, r3, #1
-	b	.L2757
-.L2764:
+	b	.L2777
+.L2784:
 	ldrb	r3, [r4, #8]	@ zero_extendqisi2
 	add	fp, fp, #1
 	cmp	r3, #1
 	uxth	fp, fp
-	ldr	r3, .L2769+16
-	bne	.L2682
+	ldr	r3, .L2789+16
+	bne	.L2702
 	ldrb	r2, [r3, #76]	@ zero_extendqisi2
-	cbz	r2, .L2682
-	ldrh	r2, [r3, #2900]
+	cbz	r2, .L2702
+	ldrh	r2, [r3, #2912]
 	cmp	r2, fp
-	bne	.L2682
+	bne	.L2702
 	cmp	r10, fp
-	beq	.L2659
-.L2682:
-	ldrh	r3, [r3, #2898]
+	beq	.L2679
+.L2702:
+	ldrh	r3, [r3, #2910]
 	cmp	fp, r3
-	bne	.L2650
-	ldr	r2, .L2769+16
+	bne	.L2670
+	ldr	r2, .L2789+16
 	movw	r0, #65535
 	movs	r3, #0
 	strh	fp, [r4, #2]	@ movhi
 	strh	r3, [r4, #4]	@ movhi
-	ldrh	r1, [r2, #2828]
-.L2683:
+	ldrh	r1, [r2, #2840]
+.L2703:
 	uxth	r2, r3
 	cmp	r2, r1
-	bcs	.L2749
+	bcs	.L2769
 	ldr	r6, [sp, #20]
 	adds	r3, r3, #1
 	ldrh	r5, [r6, #2]!
 	cmp	r5, r0
 	str	r6, [sp, #20]
-	beq	.L2683
+	beq	.L2703
 	strb	r2, [r4, #6]
-	b	.L2749
-.L2659:
+	b	.L2769
+.L2679:
 	ldrb	r3, [sp, #8]	@ zero_extendqisi2
 	mov	r0, r4
 	ldr	r2, [sp, #8]
 	mov	r1, r10
 	strh	r10, [r4, #2]	@ movhi
 	strb	r3, [r4, #6]
-.L2758:
+.L2778:
 	bl	ftl_sb_update_avl_pages
-.L2749:
+.L2769:
 	movs	r0, #0
 	add	sp, sp, #68
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L2770:
+.L2790:
 	.align	2
-.L2769:
+.L2789:
 	.word	.LANCHOR2
-	.word	.LC127
+	.word	.LC130
 	.word	.LANCHOR4
-	.word	.LC128
+	.word	.LC131
 	.word	.LANCHOR0
 	.fnend
 	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
@@ -17153,72 +17312,72 @@ FtlWriteDumpData:
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	.pad #40
 	sub	sp, sp, #40
-	ldr	r4, .L2789
-	ldr	r3, [r4, #740]
+	ldr	r4, .L2809
+	ldr	r3, [r4, #744]
 	cmp	r3, #0
-	bne	.L2771
-	ldrh	r2, [r4, #792]
+	bne	.L2791
+	ldrh	r2, [r4, #840]
 	cmp	r2, #0
-	beq	.L2773
-	ldrb	r3, [r4, #796]	@ zero_extendqisi2
+	beq	.L2793
+	ldrb	r3, [r4, #844]	@ zero_extendqisi2
 	cmp	r3, #0
-	bne	.L2773
-	ldr	r7, .L2789+4
-	ldrb	r1, [r4, #795]	@ zero_extendqisi2
-	ldrh	r3, [r7, #2898]
+	bne	.L2793
+	ldr	r7, .L2809+4
+	ldrb	r1, [r4, #843]	@ zero_extendqisi2
+	ldrh	r3, [r7, #2910]
 	muls	r3, r1, r3
 	cmp	r2, r3
-	beq	.L2773
-	ldrb	r9, [r4, #798]	@ zero_extendqisi2
-	ldr	r6, [r7, #2960]
-	ldrh	r8, [r7, #2828]
+	beq	.L2793
+	ldrb	r9, [r4, #846]	@ zero_extendqisi2
+	ldr	r6, [r7, #2968]
+	ldrh	r8, [r7, #2840]
 	cmp	r9, #0
-	bne	.L2771
+	bne	.L2791
 	subs	r6, r6, #1
 	mov	r1, sp
 	mov	r2, r9
 	mov	r0, r6
 	bl	log2phys
-	ldr	r5, [r4, #1796]
-	ldr	r0, [r4, #756]
 	ldr	r3, [sp]
-	str	r6, [sp, #20]
-	str	r0, [sp, #12]
+	ldr	r5, [r4, #1800]
+	ldr	r0, [r4, #1776]
 	str	r3, [sp, #8]
 	adds	r3, r3, #1
+	str	r6, [sp, #20]
+	str	r0, [sp, #12]
 	str	r5, [sp, #16]
 	str	r9, [r5, #4]
-	beq	.L2775
+	beq	.L2795
+	add	r0, sp, #4
 	movs	r1, #1
 	mov	r2, r9
-	add	r0, sp, #4
 	bl	FlashReadPages
-	b	.L2776
-.L2775:
+	b	.L2796
+.L2795:
 	movs	r1, #255
-	ldrh	r2, [r7, #2908]
+	ldrh	r2, [r7, #2920]
 	bl	ftl_memset
-.L2776:
+.L2796:
 	movs	r7, #0
-	ldr	r10, .L2789
+	ldr	r10, .L2809
 	lsl	r8, r8, #2
 	movw	r3, #61589
 	mov	r9, r7
 	strh	r3, [r5]	@ movhi
-.L2777:
+.L2797:
 	cmp	r7, r8
-	beq	.L2778
-	ldrh	r3, [r4, #792]
-	cbz	r3, .L2778
+	beq	.L2798
+	ldrh	r3, [r4, #840]
+	cbz	r3, .L2798
 	ldr	r3, [sp, #8]
 	adds	r7, r7, #1
 	str	r6, [r5, #8]
-	ldr	r0, .L2789+8
+	ldr	r0, .L2809+8
 	str	r3, [r5, #12]
-	ldrh	r3, [r10, #788]
+	ldrh	r3, [r10, #836]
 	strh	r3, [r5, #2]	@ movhi
 	bl	get_new_active_ppa
-	ldr	r3, [r10, #988]
+	ldr	r3, [r10, #1032]
 	movs	r1, #1
 	str	r0, [sp, #8]
 	add	r0, sp, #4
@@ -17228,29 +17387,29 @@ FtlWriteDumpData:
 	mov	r2, #0
 	it	eq
 	moveq	r3, r9
-	str	r3, [r10, #988]
+	str	r3, [r10, #1032]
 	mov	r3, r2
 	bl	FlashProgPages
-	ldrh	r0, [r4, #788]
+	ldrh	r0, [r4, #836]
 	bl	decrement_vpc_count
-	b	.L2777
-.L2778:
+	b	.L2797
+.L2798:
 	movs	r3, #1
-	b	.L2788
-.L2773:
+	b	.L2808
+.L2793:
 	movs	r3, #0
-.L2788:
-	strb	r3, [r4, #798]
-.L2771:
+.L2808:
+	strb	r3, [r4, #846]
+.L2791:
 	add	sp, sp, #40
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L2790:
+.L2810:
 	.align	2
-.L2789:
+.L2809:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LANCHOR2+788
+	.word	.LANCHOR2+836
 	.fnend
 	.size	FtlWriteDumpData, .-FtlWriteDumpData
 	.align	1
@@ -17266,29 +17425,29 @@ l2p_flush:
 	.save {r3, r4, r5, r6, r7, lr}
 	bl	FtlWriteDumpData
 	movs	r4, #0
-	ldr	r5, .L2796
+	ldr	r5, .L2816
 	movs	r7, #12
-	ldr	r6, .L2796+4
-.L2792:
-	ldrh	r3, [r5, #2938]
+	ldr	r6, .L2816+4
+.L2812:
+	ldrh	r3, [r5, #2950]
 	uxth	r0, r4
 	cmp	r3, r0
-	bls	.L2795
-	ldr	r3, [r6, #932]
+	bls	.L2815
+	ldr	r3, [r6, #980]
 	mla	r3, r7, r0, r3
 	ldr	r3, [r3, #4]
 	cmp	r3, #0
-	bge	.L2793
+	bge	.L2813
 	bl	flush_l2p_region
-.L2793:
+.L2813:
 	adds	r4, r4, #1
-	b	.L2792
-.L2795:
+	b	.L2812
+.L2815:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, pc}
-.L2797:
+.L2817:
 	.align	2
-.L2796:
+.L2816:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -17306,88 +17465,88 @@ FtlVpcCheckAndModify:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	movs	r4, #0
-	ldr	r6, .L2812
-	ldr	r1, .L2812+4
-	ldr	r0, .L2812+8
+	ldr	r6, .L2832
+	ldr	r1, .L2832+4
+	ldr	r0, .L2832+8
 	bl	printk
-	ldr	r5, .L2812+12
-	ldrh	r2, [r6, #2838]
+	ldr	r5, .L2832+12
+	ldrh	r2, [r6, #2850]
 	movs	r1, #0
-	ldr	r0, [r5, #1820]
+	ldr	r0, [r5, #1824]
 	lsls	r2, r2, #1
 	bl	ftl_memset
-.L2799:
-	ldr	r3, [r6, #2960]
+.L2819:
+	ldr	r3, [r6, #2968]
 	cmp	r4, r3
-	bcs	.L2810
+	bcs	.L2830
 	mov	r0, r4
 	add	r1, sp, #4
 	movs	r2, #0
 	bl	log2phys
 	ldr	r0, [sp, #4]
 	adds	r3, r0, #1
-	beq	.L2800
+	beq	.L2820
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r2, [r5, #1820]
+	ldr	r2, [r5, #1824]
 	ldrh	r3, [r2, r0, lsl #1]
 	adds	r3, r3, #1
 	strh	r3, [r2, r0, lsl #1]	@ movhi
-.L2800:
+.L2820:
 	adds	r4, r4, #1
-	b	.L2799
-.L2810:
-	ldr	r7, .L2812+12
+	b	.L2819
+.L2830:
+	ldr	r7, .L2832+12
 	mov	r8, #0
 	movw	r9, #65535
-.L2802:
-	ldrh	r3, [r6, #2836]
+.L2822:
+	ldrh	r3, [r6, #2848]
 	uxth	r4, r8
 	cmp	r3, r4
-	bls	.L2811
-	ldr	r3, [r5, #768]
+	bls	.L2831
+	ldr	r3, [r5, #816]
 	ldrh	r2, [r3, r4, lsl #1]
-	ldr	r3, [r5, #1820]
+	ldr	r3, [r5, #1824]
 	ldrh	r3, [r3, r4, lsl #1]
 	cmp	r2, r3
-	beq	.L2804
+	beq	.L2824
 	cmp	r2, r9
-	beq	.L2804
-	ldr	r0, .L2812+16
+	beq	.L2824
+	ldr	r0, .L2832+16
 	mov	r1, r4
 	bl	printk
-	ldrh	r3, [r7, #788]
+	ldrh	r3, [r7, #836]
 	cmp	r3, r4
-	beq	.L2804
-	ldrh	r3, [r7, #884]
+	beq	.L2824
+	ldrh	r3, [r7, #932]
 	cmp	r3, r4
-	beq	.L2804
-	ldrh	r3, [r7, #836]
+	beq	.L2824
+	ldrh	r3, [r7, #884]
 	cmp	r3, r4
-	beq	.L2804
-	ldr	r3, [r7, #1820]
+	beq	.L2824
+	ldr	r3, [r7, #1824]
 	mov	r0, r4
 	ldrh	r2, [r3, r4, lsl #1]
-	ldr	r3, [r7, #768]
+	ldr	r3, [r7, #816]
 	strh	r2, [r3, r4, lsl #1]	@ movhi
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2804:
+.L2824:
 	add	r8, r8, #1
-	b	.L2802
-.L2811:
+	b	.L2822
+.L2831:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L2813:
+.L2833:
 	.align	2
-.L2812:
+.L2832:
 	.word	.LANCHOR0
 	.word	.LANCHOR3+16
-	.word	.LC129
+	.word	.LC132
 	.word	.LANCHOR2
-	.word	.LC130
+	.word	.LC133
 	.fnend
 	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
 	.align	1
@@ -17402,633 +17561,634 @@ allocate_new_data_superblock:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	mov	r6, r0
-	ldr	r4, .L2840
+	ldr	r4, .L2860
 	ldrh	r5, [r0]
-	ldr	r3, [r4, #740]
+	ldr	r3, [r4, #744]
 	cmp	r3, #0
-	bne	.L2815
+	bne	.L2835
 	movw	r3, #65535
 	cmp	r5, r3
-	beq	.L2816
-	ldr	r3, [r4, #768]
+	beq	.L2836
+	ldr	r3, [r4, #816]
 	mov	r0, r5
 	ldrh	r3, [r3, r5, lsl #1]
-	cbz	r3, .L2817
+	cbz	r3, .L2837
 	bl	INSERT_DATA_LIST
-	b	.L2816
-.L2817:
+	b	.L2836
+.L2837:
 	bl	INSERT_FREE_LIST
-.L2816:
+.L2836:
+	ldr	r2, .L2860
 	movs	r3, #0
 	strb	r3, [r6, #8]
-	ldr	r3, .L2840
-	add	r2, r3, #836
-	cmp	r6, r2
-	beq	.L2818
-	ldr	r1, .L2840+4
-	ldrh	r2, [r1, #2848]
-	cmp	r2, #1
-	beq	.L2818
-	ldrb	r1, [r1, #76]	@ zero_extendqisi2
-	cbz	r1, .L2819
-.L2818:
+	add	r3, r2, #884
+	cmp	r6, r3
+	beq	.L2838
+	ldr	r3, .L2860+4
+	ldrh	r1, [r3, #2860]
+	cmp	r1, #1
+	beq	.L2838
+	ldrb	r0, [r3, #76]	@ zero_extendqisi2
+	cbz	r0, .L2839
+.L2838:
 	movs	r3, #1
 	strb	r3, [r6, #8]
-	b	.L2820
-.L2819:
-	add	r1, r3, #788
-	cmp	r6, r1
-	bne	.L2820
-	cmp	r2, #3
-	beq	.L2822
-	ldr	r3, [r3, #1124]
-	cmp	r3, #1
-	bne	.L2823
-.L2822:
-	movs	r3, #1
-	strb	r3, [r4, #796]
-.L2823:
-	ldr	r2, [r4, #948]
-	ldr	r3, .L2840
-	cbz	r2, .L2820
-	ldr	r2, [r3, #1008]
-	cmp	r2, #29
-	itt	ls
+	b	.L2840
+.L2839:
+	add	r0, r2, #836
+	cmp	r6, r0
+	bne	.L2840
+	cmp	r1, #3
+	beq	.L2842
+	ldr	r2, [r2, #1120]
+	cmp	r2, #1
+	bne	.L2843
+.L2842:
+	movs	r2, #1
+	strb	r2, [r4, #844]
+.L2843:
+	ldr	r3, [r3, #2832]
+	cbz	r3, .L2840
+	ldr	r3, [r4, #1052]
+	cmp	r3, #29
+	ittt	ls
 	movls	r2, #1
-	strbls	r2, [r3, #796]
-.L2820:
-	ldrh	r0, [r4, #1916]
+	ldrls	r3, .L2860
+	strbls	r2, [r3, #844]
+.L2840:
+	ldrh	r0, [r4, #1920]
 	movw	r3, #65535
 	cmp	r0, r3
-	beq	.L2825
+	beq	.L2845
 	cmp	r5, r0
-	bne	.L2826
-	ldr	r3, .L2840
-	ldr	r3, [r3, #768]
+	bne	.L2846
+	ldr	r3, .L2860
+	ldr	r3, [r3, #816]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L2827
-.L2826:
+	cbz	r3, .L2847
+.L2846:
 	bl	update_vpc_list
-.L2827:
+.L2847:
 	movw	r3, #65535
-	strh	r3, [r4, #1916]	@ movhi
-.L2825:
+	strh	r3, [r4, #1920]	@ movhi
+.L2845:
 	mov	r0, r6
 	bl	allocate_data_superblock
 	bl	l2p_flush
 	movs	r0, #0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2815:
+.L2835:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L2841:
+.L2861:
 	.align	2
-.L2840:
+.L2860:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.fnend
 	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
 	.align	1
-	.global	rk_ftl_garbage_collect
+	.global	ftl_do_gc
 	.thumb
 	.thumb_func
-	.type	rk_ftl_garbage_collect, %function
-rk_ftl_garbage_collect:
+	.type	ftl_do_gc, %function
+ftl_do_gc:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 32
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r8, r0
-	ldr	r4, .L3010
+	ldr	r4, .L3030
 	.pad #44
 	sub	sp, sp, #44
 	mov	r6, r1
-	ldr	r0, [r4, #740]
+	ldr	r0, [r4, #744]
 	mov	r7, r4
 	cmp	r0, #0
-	bne	.L2936
-	ldr	r3, [r4, #1744]
+	bne	.L2956
+	ldr	r3, [r4, #1740]
 	cmp	r3, #0
-	bne	.L2994
-	ldrh	r2, [r4, #776]
+	bne	.L3014
+	ldrh	r2, [r4, #824]
 	cmp	r2, #47
-	bls	.L2938
-	ldr	r3, .L3010+4
-	ldrh	r2, [r3, #3000]
+	bls	.L2958
+	ldr	r3, .L3030+4
+	ldrh	r2, [r3, #3064]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2844
-.L2847:
-	ldrh	r1, [r7, #1696]
+	bne	.L2864
+.L2867:
+	ldrh	r1, [r7, #1692]
 	movw	r0, #65535
-	ldr	r3, .L3010
+	ldr	r3, .L3030
 	cmp	r1, r0
-	beq	.L2846
-	ldrh	r2, [r3, #1694]
+	beq	.L2866
+	ldrh	r2, [r3, #1690]
 	cmp	r2, r0
 	itt	eq
-	strheq	r1, [r3, #1694]	@ movhi
-	strheq	r2, [r3, #1696]	@ movhi
-	b	.L2846
-.L2844:
-	ldrh	r2, [r4, #884]
+	strheq	r1, [r3, #1690]	@ movhi
+	strheq	r2, [r3, #1692]	@ movhi
+	b	.L2866
+.L2864:
+	ldrh	r2, [r4, #932]
 	cmp	r2, r3
-	beq	.L2847
+	beq	.L2867
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
 	cmp	r0, #0
-	beq	.L2847
+	beq	.L2867
 	movs	r0, #1
-	b	.L2994
-.L2846:
-	ldr	r4, [r7, #1644]
+	b	.L3014
+.L2866:
+	ldr	r4, [r7, #1640]
 	cmp	r8, #1
 	add	r4, r4, #1
 	add	r4, r4, r8, lsl #7
-	str	r4, [r7, #1644]
-	bne	.L2858
-	ldr	r3, .L3010
-	ldr	r3, [r3, #948]
-	cbnz	r3, .L2849
-	ldr	r3, .L3010+8
+	str	r4, [r7, #1640]
+	bne	.L2878
+	ldr	r3, .L3030+8
+	ldr	r2, [r3, #2832]
+	mov	r10, r3
+	cbnz	r2, .L2869
 	ldrb	r3, [r3, #76]	@ zero_extendqisi2
 	cmp	r3, #0
-	beq	.L2858
-.L2849:
-	ldr	r3, [r7, #1008]
-	ldr	r5, .L3010
+	beq	.L2878
+.L2869:
+	ldr	r3, [r7, #1052]
+	ldr	r5, .L3030
 	cmp	r3, #29
-	bhi	.L2858
-	ldr	r9, .L3010+12
-	ldrh	r3, [r9, #-72]
+	bhi	.L2878
+	ldr	r9, .L3030+12
+	ldrh	r3, [r9, #-68]
 	add	r4, r4, r3
-	str	r4, [r5, #1644]
+	str	r4, [r5, #1640]
 	bl	FtlGcReFreshBadBlk
-	ldrh	r3, [r5, #1076]
+	ldrh	r3, [r5, #1072]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L2858
-	ldrh	r2, [r5, #1694]
+	bne	.L2878
+	ldrh	r2, [r5, #1690]
 	cmp	r2, r3
-	bne	.L2858
-	ldr	r3, [r5, #1644]
+	bne	.L2878
+	ldr	r3, [r5, #1640]
 	cmp	r3, #1024
-	bhi	.L2850
-	ldrh	r3, [r5, #784]
+	bhi	.L2870
+	ldrh	r3, [r5, #832]
 	cmp	r3, #63
-	bhi	.L2858
-.L2850:
-	ldrh	r3, [r7, #1642]
+	bhi	.L2878
+.L2870:
+	ldrh	r3, [r7, #1638]
 	movs	r0, #0
-	ldrh	r4, [r7, #784]
+	ldrh	r4, [r7, #832]
 	adds	r3, r3, #64
-	ldr	r2, .L3010+12
+	ldr	r2, .L3030+12
 	cmp	r4, r3
-	strh	r0, [r9, #-72]	@ movhi
-	ldr	r1, .L3010
-	bgt	.L2858
-	ldr	r3, [r1, #1008]
-	str	r0, [r1, #1644]
-	cbnz	r3, .L2851
+	strh	r0, [r9, #-68]	@ movhi
+	ldr	r1, .L3030
+	bgt	.L2878
+	ldr	r3, [r1, #1052]
+	str	r0, [r1, #1640]
+	cbnz	r3, .L2871
 	movs	r3, #6
-	b	.L2995
-.L2851:
+	b	.L3015
+.L2871:
 	cmp	r3, #5
-	bhi	.L2852
+	bhi	.L2872
 	movs	r3, #18
-.L2995:
-	strh	r3, [r2, #-72]	@ movhi
-.L2852:
+.L3015:
+	strh	r3, [r2, #-68]	@ movhi
+.L2872:
 	movs	r0, #32
 	bl	List_get_gc_head_node
 	movw	ip, #65535
 	uxth	r2, r0
 	cmp	r2, ip
-	beq	.L2857
-	ldrh	r0, [r7, #1648]
-	ldr	r5, .L3010
+	beq	.L2877
+	ldrh	r0, [r7, #1644]
+	ldr	r5, .L3030
 	cmp	r0, #0
-	beq	.L2854
-	ldr	r3, .L3010+8
-	ldr	r10, [r5, #768]
-	ldrh	r4, [r3, #2900]
-	ldrh	r3, [r3, #2828]
-	ldrh	r1, [r10, r2, lsl #1]
+	beq	.L2874
+	ldrh	r4, [r10, #2912]
+	ldrh	r3, [r10, #2840]
+	ldr	fp, [r5, #816]
 	muls	r3, r4, r3
+	ldrh	r1, [fp, r2, lsl #1]
 	adds	r3, r3, #1
 	cmp	r1, r3
-	bgt	.L2857
+	bgt	.L2877
 	adds	r1, r0, #1
 	str	ip, [sp, #20]
 	str	r2, [sp, #16]
-	mov	fp, #0
+	mov	r10, #0
 	uxth	r1, r1
-	str	fp, [r5, #1652]
-	strh	r1, [r5, #1648]	@ movhi
+	str	r10, [r5, #1648]
+	strh	r1, [r5, #1644]	@ movhi
 	str	r1, [sp, #12]
 	bl	List_get_gc_head_node
 	ldr	ip, [sp, #20]
-	uxth	r4, r0
 	ldr	r1, [sp, #12]
-	cmp	r4, ip
 	ldr	r2, [sp, #16]
-	beq	.L2857
-	ldrh	r2, [r10, r2, lsl #1]
-	ldrh	r3, [r10, r4, lsl #1]
-	ldr	r0, .L3010+16
+	uxth	r4, r0
+	cmp	r4, ip
+	beq	.L2877
+	ldrh	r2, [fp, r2, lsl #1]
+	ldrh	r3, [fp, r4, lsl #1]
+	ldr	r0, .L3030+16
 	str	r2, [sp]
 	mov	r2, r4
 	bl	printk
-	ldrh	r3, [r5, #1648]
+	ldrh	r3, [r5, #1644]
 	cmp	r3, #40
-	bls	.L2855
-	ldr	r3, [r5, #768]
+	bls	.L2875
+	ldr	r3, [r5, #816]
 	ldrh	r3, [r3, r4, lsl #1]
 	cmp	r3, #32
 	it	hi
-	strhhi	fp, [r5, #1648]	@ movhi
-.L2855:
+	strhhi	r10, [r5, #1644]	@ movhi
+.L2875:
 	movs	r3, #6
-	strh	r3, [r9, #-72]	@ movhi
-	b	.L2874
-.L2854:
+	strh	r3, [r9, #-68]	@ movhi
+	b	.L2894
+.L2874:
 	movs	r3, #1
-	strh	r3, [r5, #1648]	@ movhi
-.L2857:
+	strh	r3, [r5, #1644]	@ movhi
+.L2877:
 	bl	GetSwlReplaceBlock
 	movw	r3, #65535
 	cmp	r0, r3
 	mov	r4, r0
-	bne	.L2874
+	bne	.L2894
 	movs	r3, #0
-	strh	r3, [r9, #-72]	@ movhi
-.L2858:
-	ldrh	r3, [r7, #1076]
+	strh	r3, [r9, #-68]	@ movhi
+.L2878:
+	ldrh	r3, [r7, #1072]
 	movw	r4, #65535
-	ldr	r5, .L3010
+	ldr	r5, .L3030
 	cmp	r3, r4
-	bne	.L3002
-	ldrh	r4, [r5, #884]
+	bne	.L3022
+	ldrh	r4, [r5, #932]
 	cmp	r4, r3
-	bne	.L2859
-	ldrh	r10, [r5, #1694]
+	bne	.L2879
+	ldrh	r10, [r5, #1690]
 	cmp	r10, r4
-	bne	.L2860
-	ldrh	r3, [r5, #784]
-	ldr	r2, [r5, #1644]
+	bne	.L2880
+	ldrh	r3, [r5, #832]
+	ldr	r2, [r5, #1640]
 	cmp	r3, #24
 	ite	cc
 	movcc	r3, #5120
 	movcs	r3, #1024
 	cmp	r2, r3
-	bls	.L2862
-	ldr	r2, .L3010+12
+	bls	.L2882
+	ldr	r2, .L3030+12
 	movs	r3, #0
-	str	r3, [r7, #1644]
+	str	r3, [r7, #1640]
 	mov	r9, r5
-	strh	r3, [r2, #-72]	@ movhi
+	strh	r3, [r2, #-68]	@ movhi
 	bl	GetSwlReplaceBlock
 	cmp	r0, r10
 	mov	r4, r0
-	bne	.L2863
-	ldrh	r2, [r5, #784]
-	ldrh	r3, [r5, #1642]
+	bne	.L2883
+	ldrh	r2, [r5, #832]
+	ldrh	r3, [r5, #1638]
 	cmp	r2, r3
-	bcs	.L2864
+	bcs	.L2884
 	movs	r0, #64
 	bl	List_get_gc_head_node
 	uxth	r3, r0
 	cmp	r3, r4
-	bne	.L3003
-.L2873:
+	bne	.L3023
+.L2893:
 	bl	FtlGcReFreshBadBlk
 	cmp	r8, #0
-	beq	.L3004
-.L2874:
-	ldrh	r2, [r7, #884]
+	beq	.L3024
+.L2894:
+	ldrh	r2, [r7, #932]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L2885
-.L2934:
-	ldrh	r3, [r7, #1694]
+	bne	.L2905
+.L2954:
+	ldrh	r3, [r7, #1690]
 	movw	r2, #65535
 	cmp	r3, r2
-	bne	.L2885
+	bne	.L2905
 	cmp	r4, r3
-	bne	.L2885
-.L2935:
-	ldrh	r2, [r7, #1076]
+	bne	.L2905
+.L2955:
+	ldrh	r2, [r7, #1072]
 	movw	r3, #65535
-	ldr	r4, .L3010
+	ldr	r4, .L3030
 	cmp	r2, r3
-	beq	.L2886
-.L2890:
+	beq	.L2906
+.L2910:
 	movw	r4, #65535
-	b	.L2885
-.L2886:
+	b	.L2905
+.L2906:
 	movs	r3, #0
-	ldrh	r9, [r4, #784]
-	str	r3, [r4, #1652]
-	ldrh	r3, [r4, #1640]
-	ldr	r5, .L3010+12
+	ldrh	r9, [r4, #832]
+	str	r3, [r4, #1648]
+	ldrh	r3, [r4, #1636]
+	ldr	r5, .L3030+12
 	cmp	r3, r9
-	bcs	.L2887
-	ldrh	r3, [r5, #-72]
-	cbnz	r3, .L2888
-	ldr	r3, .L3010+8
-	ldr	r2, [r4, #940]
-	ldr	r3, [r3, #2960]
+	bcs	.L2907
+	ldrh	r3, [r5, #-68]
+	cbnz	r3, .L2908
+	ldr	r3, .L3030+8
+	ldr	r2, [r4, #988]
+	ldr	r3, [r3, #2968]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L2946
-.L2888:
-	ldrh	r3, [r7, #1060]
+	bcs	.L2966
+.L2908:
+	ldrh	r3, [r7, #1056]
 	add	r3, r3, r3, lsl #1
 	ubfx	r3, r3, #2, #16
-	b	.L2889
-.L2946:
+	b	.L2909
+.L2966:
 	movs	r3, #18
-.L2889:
-	strh	r3, [r7, #1640]	@ movhi
-	b	.L2999
-.L2887:
-	ldrh	r0, [r5, #-72]
+.L2909:
+	strh	r3, [r7, #1636]	@ movhi
+	b	.L3019
+.L2907:
+	ldrh	r0, [r5, #-68]
 	cmp	r0, #0
-	bne	.L2890
-	ldrh	r6, [r4, #1060]
+	bne	.L2910
+	ldrh	r6, [r4, #1056]
 	add	r3, r6, r6, lsl #1
 	asrs	r3, r3, #2
-	strh	r3, [r4, #1640]	@ movhi
+	strh	r3, [r4, #1636]	@ movhi
 	bl	List_get_gc_head_node
-	ldr	r2, .L3010+8
-	ldr	r3, [r4, #768]
-	ldrh	r1, [r2, #2900]
-	ldrh	r4, [r2, #2828]
+	ldr	r2, .L3030+8
+	ldr	r3, [r4, #816]
+	ldrh	r1, [r2, #2912]
+	ldrh	r4, [r2, #2840]
 	muls	r4, r1, r4
 	add	r4, r4, r4, lsr #31
 	uxth	r0, r0
 	ldrh	r3, [r3, r0, lsl #1]
 	cmp	r3, r4, asr #1
-	ble	.L2891
+	ble	.L2911
 	subs	r6, r6, #1
 	cmp	r9, r6
-	blt	.L2891
-.L2999:
+	blt	.L2911
+.L3019:
 	bl	FtlReadRefresh
-	b	.L3000
-.L2891:
+	b	.L3020
+.L2911:
 	cmp	r3, #0
-	bne	.L2890
+	bne	.L2910
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldrh	r0, [r7, #784]
+	ldrh	r0, [r7, #832]
 	adds	r0, r0, #1
-	b	.L2994
-.L2885:
-	ldr	r3, [r7, #948]
+	b	.L3014
+.L2905:
+	ldr	r3, .L3030+8
+	ldr	r3, [r3, #2832]
 	cmp	r3, #0
 	ite	eq
 	moveq	r5, #1
 	movne	r5, #2
-	b	.L2884
-.L3011:
+	b	.L2904
+.L3031:
 	.align	2
-.L3010:
+.L3030:
 	.word	.LANCHOR2
 	.word	.LANCHOR1
 	.word	.LANCHOR0
 	.word	.LANCHOR4
-	.word	.LC131
-.L3004:
+	.word	.LC134
+.L3024:
 	movw	r3, #65535
 	cmp	r4, r3
-	bne	.L2874
-.L2933:
-	ldrh	r4, [r7, #784]
+	bne	.L2894
+.L2953:
+	ldrh	r4, [r7, #832]
 	cmp	r4, #24
-	bhi	.L2942
-	ldr	r3, .L3012
+	bhi	.L2962
+	ldr	r3, .L3032
 	cmp	r4, #16
-	ldrh	r5, [r3, #2898]
-	bls	.L2876
+	ldrh	r5, [r3, #2910]
+	bls	.L2896
 	lsrs	r5, r5, #5
-.L2875:
-	ldrh	r3, [r7, #1640]
-	ldr	r2, .L3012+4
+.L2895:
+	ldrh	r3, [r7, #1636]
+	ldr	r2, .L3032+4
 	cmp	r3, r4
-	bcc	.L3005
-.L2879:
-	ldr	r3, [r7, #948]
+	bcc	.L3025
+.L2899:
+	ldr	r3, .L3032
+	ldr	r3, [r3, #2832]
 	cmp	r3, #0
-	bne	.L3006
-.L2945:
+	bne	.L3026
+.L2965:
 	movw	r4, #65535
-.L2884:
-	ldrh	r2, [r7, #1076]
+.L2904:
+	ldrh	r2, [r7, #1072]
 	movw	r1, #65535
-	ldr	r3, .L3012+4
+	ldr	r3, .L3032+4
 	cmp	r2, r1
-	bne	.L2893
+	bne	.L2913
 	cmp	r4, r2
-	beq	.L2894
-	strh	r4, [r3, #1076]	@ movhi
-	b	.L2895
-.L2894:
-	ldrh	r2, [r3, #1694]
+	beq	.L2914
+	strh	r4, [r3, #1072]	@ movhi
+	b	.L2915
+.L2914:
+	ldrh	r2, [r3, #1690]
 	cmp	r2, r4
-	beq	.L2895
-	ldr	r1, [r3, #768]
+	beq	.L2915
+	ldr	r1, [r3, #816]
 	ldrh	r2, [r1, r2, lsl #1]
-	cbnz	r2, .L2896
-	strh	r4, [r3, #1694]	@ movhi
-.L2896:
-	ldrh	r3, [r7, #1694]
-	strh	r3, [r7, #1076]	@ movhi
+	cbnz	r2, .L2916
+	strh	r4, [r3, #1690]	@ movhi
+.L2916:
+	ldrh	r3, [r7, #1690]
+	strh	r3, [r7, #1072]	@ movhi
 	movw	r3, #65535
-	strh	r3, [r7, #1694]	@ movhi
-.L2895:
-	ldrh	r0, [r7, #1076]
+	strh	r3, [r7, #1690]	@ movhi
+.L2915:
+	ldrh	r0, [r7, #1072]
 	movw	r6, #65535
 	movs	r3, #0
-	strb	r3, [r7, #1084]
+	strb	r3, [r7, #1080]
 	cmp	r0, r6
-	beq	.L2893
+	beq	.L2913
 	bl	IsBlkInGcList
-	cbz	r0, .L2898
-	ldr	r3, .L3012+4
-	strh	r6, [r3, #1076]	@ movhi
-.L2898:
-	ldr	r3, .L3012
+	cbz	r0, .L2918
+	ldr	r3, .L3032+4
+	strh	r6, [r3, #1072]	@ movhi
+.L2918:
+	ldr	r3, .L3032
 	ldrb	r3, [r3, #76]	@ zero_extendqisi2
-	cbz	r3, .L2899
-	ldrh	r0, [r7, #1076]
+	cbz	r3, .L2919
+	ldrh	r0, [r7, #1072]
 	bl	ftl_get_blk_mode
-	strb	r0, [r7, #1084]
-.L2899:
-	ldrh	r2, [r7, #1076]
+	strb	r0, [r7, #1080]
+.L2919:
+	ldrh	r2, [r7, #1072]
 	movw	r3, #65535
-	ldr	r6, .L3012+4
+	ldr	r6, .L3032+4
 	cmp	r2, r3
-	beq	.L2893
-	addw	r0, r6, #1076
+	beq	.L2913
+	add	r0, r6, #1072
 	bl	make_superblock
-	ldr	r2, .L3012+8
+	ldr	r2, .L3032+8
 	movs	r3, #0
-	ldrh	r1, [r6, #1076]
-	strh	r3, [r6, #1078]	@ movhi
-	strb	r3, [r6, #1082]
-	strh	r3, [r2, #-70]	@ movhi
-	ldr	r3, [r6, #768]
+	ldrh	r1, [r6, #1072]
+	strh	r3, [r6, #1074]	@ movhi
+	strb	r3, [r6, #1078]
+	strh	r3, [r2, #-66]	@ movhi
+	ldr	r3, [r6, #816]
 	ldrh	r3, [r3, r1, lsl #1]
-	strh	r3, [r2, #-68]	@ movhi
-.L2893:
-	ldrh	r3, [r7, #1076]
-	ldrh	r2, [r7, #788]
+	strh	r3, [r2, #-64]	@ movhi
+.L2913:
+	ldrh	r3, [r7, #1072]
+	ldrh	r2, [r7, #836]
 	cmp	r2, r3
-	beq	.L2900
-	ldr	r2, .L3012+4
-	ldrh	r2, [r2, #836]
+	beq	.L2920
+	ldr	r2, .L3032+4
+	ldrh	r2, [r2, #884]
 	cmp	r2, r3
-	beq	.L2900
-.L2901:
-	ldr	r7, .L3012
-	b	.L2902
-.L2900:
+	beq	.L2920
+.L2921:
+	ldr	r7, .L3032
+	b	.L2922
+.L2920:
 	movw	r3, #65535
-	strh	r3, [r7, #1076]	@ movhi
-	b	.L3001
-.L2923:
-	ldrh	r3, [r6, #1078]
+	strh	r3, [r7, #1072]	@ movhi
+	b	.L3021
+.L2943:
+	ldrh	r3, [r6, #1074]
 	add	r5, r5, r3
 	ldr	r3, [sp, #12]
 	uxth	r5, r5
-	strh	r5, [r6, #1078]	@ movhi
+	strh	r5, [r6, #1074]	@ movhi
 	cmp	r5, r3
-	bcs	.L3007
-.L2925:
-	ldrh	r3, [r6, #784]
+	bcs	.L3027
+.L2945:
+	ldrh	r3, [r6, #832]
 	cmp	r3, #2
-	bhi	.L2928
-	ldrh	r5, [r7, #2898]
-.L2902:
-	ldr	r6, .L3012+4
+	bhi	.L2948
+	ldrh	r5, [r7, #2910]
+.L2922:
+	ldr	r6, .L3032+4
 	movw	r3, #65535
-	ldrh	r2, [r6, #1076]
+	ldrh	r2, [r6, #1072]
 	mov	fp, r6
 	cmp	r2, r3
-	bne	.L2903
+	bne	.L2923
 	mov	r10, r6
 	movs	r3, #0
-	str	r3, [r6, #1652]
-.L2904:
-	ldrh	r9, [fp, #1648]
+	str	r3, [r6, #1648]
+.L2924:
+	ldrh	r9, [fp, #1644]
 	mov	r0, r9
 	bl	List_get_gc_head_node
 	movw	r2, #65535
 	uxth	r3, r0
-	strh	r3, [fp, #1076]	@ movhi
+	strh	r3, [fp, #1072]	@ movhi
 	cmp	r3, r2
-	bne	.L2905
-	ldr	r3, .L3012+4
+	bne	.L2925
+	ldr	r3, .L3032+4
 	movs	r2, #0
 	movs	r0, #8
-	strh	r2, [r3, #1648]	@ movhi
-	b	.L2994
-.L2905:
+	strh	r2, [r3, #1644]	@ movhi
+	b	.L3014
+.L2925:
 	mov	r0, r3
 	str	r3, [sp, #12]
 	bl	IsBlkInGcList
 	add	r9, r9, #1
 	ldr	r3, [sp, #12]
-	cbz	r0, .L2906
-	strh	r9, [r10, #1648]	@ movhi
-	b	.L2904
-.L2906:
-	ldrh	lr, [r7, #2828]
+	cbz	r0, .L2926
+	strh	r9, [r10, #1644]	@ movhi
+	b	.L2924
+.L2926:
+	ldrh	lr, [r7, #2840]
 	uxth	r9, r9
-	ldrh	r2, [r7, #2898]
-	ldr	r1, [r10, #768]
-	strh	r9, [r10, #1648]	@ movhi
+	ldrh	r2, [r7, #2910]
+	ldr	r1, [r10, #816]
+	strh	r9, [r10, #1644]	@ movhi
 	mul	r2, lr, r2
 	ldrh	r0, [r1, r3, lsl #1]
 	add	lr, r2, r2, lsr #31
 	cmp	r0, lr, asr #1
-	bgt	.L2908
+	bgt	.L2928
 	cmp	r9, #48
-	bls	.L2909
+	bls	.L2929
 	cmp	r0, #8
-	bls	.L2909
-	ldrh	r0, [r10, #1684]
+	bls	.L2929
+	ldrh	r0, [r10, #1680]
 	cmp	r0, #35
-	bhi	.L2909
-.L2908:
+	bhi	.L2929
+.L2928:
 	movs	r0, #0
-	strh	r0, [fp, #1648]	@ movhi
-.L2909:
+	strh	r0, [fp, #1644]	@ movhi
+.L2929:
 	ldrh	r1, [r1, r3, lsl #1]
 	cmp	r1, r2
-	blt	.L2910
+	blt	.L2930
 	movw	r2, #65535
 	cmp	r4, r2
-	bne	.L2910
+	bne	.L2930
 	movs	r3, #0
-	strh	r4, [fp, #1076]	@ movhi
-	strh	r3, [fp, #1648]	@ movhi
-.L3001:
-	ldr	r3, .L3012+8
-	ldrh	r0, [r3, #-72]
-	b	.L2994
-.L2910:
-	cbnz	r1, .L2911
+	strh	r4, [fp, #1072]	@ movhi
+	strh	r3, [fp, #1644]	@ movhi
+.L3021:
+	ldr	r3, .L3032+8
+	ldrh	r0, [r3, #-68]
+	b	.L3014
+.L2930:
+	cbnz	r1, .L2931
 	movw	r0, #65535
 	bl	decrement_vpc_count
-	ldrh	r3, [fp, #1648]
+	ldrh	r3, [fp, #1644]
 	adds	r3, r3, #1
-	strh	r3, [fp, #1648]	@ movhi
-	b	.L2904
-.L2911:
+	strh	r3, [fp, #1644]	@ movhi
+	b	.L2924
+.L2931:
 	movs	r2, #0
-	strb	r2, [r6, #1084]
-	ldr	r2, .L3012
+	strb	r2, [r6, #1080]
+	ldr	r2, .L3032
 	ldrb	r2, [r2, #76]	@ zero_extendqisi2
-	cbz	r2, .L2912
+	cbz	r2, .L2932
 	mov	r0, r3
 	bl	ftl_get_blk_mode
-	ldr	r3, .L3012+4
-	strb	r0, [r3, #1084]
-.L2912:
-	ldr	r0, .L3012+12
+	ldr	r3, .L3032+4
+	strb	r0, [r3, #1080]
+.L2932:
+	ldr	r0, .L3032+12
 	bl	make_superblock
-	ldr	r2, .L3012+8
-	ldrh	r0, [r6, #1076]
+	ldr	r2, .L3032+8
+	ldrh	r0, [r6, #1072]
 	movs	r3, #0
-	ldr	r1, [r6, #768]
-	strh	r3, [r2, #-70]	@ movhi
+	ldr	r1, [r6, #816]
+	strh	r3, [r2, #-66]	@ movhi
 	ldrh	r1, [r1, r0, lsl #1]
-	strh	r3, [r6, #1078]	@ movhi
-	strb	r3, [r6, #1082]
-	strh	r1, [r2, #-68]	@ movhi
-.L2903:
+	strh	r3, [r6, #1074]	@ movhi
+	strb	r3, [r6, #1078]
+	strh	r1, [r2, #-64]	@ movhi
+.L2923:
 	cmp	r8, #1
-	bne	.L2913
+	bne	.L2933
 	bl	FtlReadRefresh
-.L2913:
+.L2933:
 	movs	r3, #1
-	str	r3, [r6, #1744]
-	ldrh	r3, [r7, #2898]
+	str	r3, [r6, #1740]
+	ldrh	r3, [r7, #2910]
 	str	r3, [sp, #12]
 	ldrb	r3, [r7, #76]	@ zero_extendqisi2
-	cbz	r3, .L2914
-	ldr	r3, .L3012+4
-	ldrb	r3, [r3, #1084]	@ zero_extendqisi2
+	cbz	r3, .L2934
+	ldr	r3, .L3032+4
+	ldrb	r3, [r3, #1080]	@ zero_extendqisi2
 	cmp	r3, #1
 	itt	eq
-	ldrheq	r3, [r7, #2900]
+	ldrheq	r3, [r7, #2912]
 	streq	r3, [sp, #12]
-.L2914:
-	ldrh	r3, [r6, #1078]
+.L2934:
+	ldrh	r3, [r6, #1074]
 	ldr	r1, [sp, #12]
 	adds	r2, r3, r5
 	cmp	r2, r1
@@ -18037,29 +18197,29 @@ rk_ftl_garbage_collect:
 	subgt	r3, r2, r3
 	uxthgt	r5, r3
 	movs	r3, #0
-.L2998:
+.L3018:
 	str	r3, [sp, #16]
 	ldrh	r3, [sp, #16]
-	ldr	r6, .L3012+4
+	ldr	r6, .L3032+4
 	cmp	r3, r5
-	bcs	.L2923
-	ldr	r3, [r6, #1672]
-	addw	r1, r6, #1090
+	bcs	.L2943
+	ldr	r3, [r6, #1668]
+	addw	r1, r6, #1086
 	ldr	r2, [sp, #16]
 	movw	lr, #65535
-	ldrh	r10, [r7, #2828]
+	ldrh	r10, [r7, #2840]
 	str	r3, [sp, #20]
-	ldrh	r3, [r6, #1078]
+	ldrh	r3, [r6, #1074]
 	add	ip, r3, r2
 	movs	r3, #0
 	mov	r9, r3
-.L2924:
+.L2944:
 	uxth	r2, r3
 	cmp	r2, r10
-	bcs	.L3008
+	bcs	.L3028
 	ldrh	r2, [r1, #2]!
 	cmp	r2, lr
-	beq	.L2917
+	beq	.L2937
 	ldr	r0, [sp, #20]
 	mov	fp, #36
 	orr	r2, ip, r2, lsl #10
@@ -18067,74 +18227,74 @@ rk_ftl_garbage_collect:
 	add	r9, r9, #1
 	uxth	r9, r9
 	str	r2, [fp, #4]
-.L2917:
+.L2937:
 	adds	r3, r3, #1
-	b	.L2924
-.L3013:
+	b	.L2944
+.L3033:
 	.align	2
-.L3012:
+.L3032:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR4
-	.word	.LANCHOR2+1076
-.L3008:
-	ldr	r0, [r6, #1672]
+	.word	.LANCHOR2+1072
+.L3028:
+	ldr	r0, [r6, #1668]
 	mov	r1, r9
-	ldrb	r2, [r6, #1084]	@ zero_extendqisi2
+	ldrb	r2, [r6, #1080]	@ zero_extendqisi2
 	mov	fp, #0
 	bl	FlashReadPages
-	ldr	r6, .L3014
-.L2919:
+	ldr	r6, .L3034
+.L2939:
 	uxth	r3, fp
 	cmp	r3, r9
-	bcs	.L3009
+	bcs	.L3029
 	mov	ip, #36
-	ldr	r2, [r6, #1672]
+	ldr	r2, [r6, #1668]
 	mul	r10, ip, fp
 	add	r3, r2, r10
 	ldr	r2, [r2, r10]
 	ldr	r3, [r3, #12]
 	adds	r2, r2, #1
-	beq	.L2948
+	beq	.L2968
 	ldrh	r1, [r3]
 	movw	r2, #61589
 	cmp	r1, r2
-	bne	.L2948
+	bne	.L2968
 	add	r1, sp, ip
 	ldr	r0, [r3, #8]
 	movs	r2, #0
 	str	ip, [sp, #24]
 	str	r3, [sp, #20]
 	bl	log2phys
-	ldr	r1, [r6, #1672]
-	add	r1, r1, r10
-	ldr	r0, [r1, #4]
+	ldr	r1, [r6, #1668]
 	ldr	r2, [sp, #36]
+	add	r1, r1, r10
 	ldr	r3, [sp, #20]
 	bic	r2, r2, #-2147483648
 	ldr	ip, [sp, #24]
+	ldr	r0, [r1, #4]
 	cmp	r2, r0
-	bne	.L2948
+	bne	.L2968
 	str	r3, [sp, #28]
-	ldr	r3, .L3014+4
-	ldr	r0, [r6, #1656]
+	ldr	r3, .L3034+4
+	ldr	r0, [r6, #1652]
 	ldr	r1, [r1, #16]
-	ldrh	r2, [r3, #-70]
+	ldrh	r2, [r3, #-66]
 	adds	r2, r2, #1
-	strh	r2, [r3, #-70]	@ movhi
+	strh	r2, [r3, #-66]	@ movhi
 	ldr	r2, [r6, #1768]
 	mla	r2, ip, r0, r2
 	str	r1, [r2, #16]
 	str	r2, [sp, #20]
 	bl	Ftl_get_new_temp_ppa
-	ldr	r1, [r6, #1656]
 	ldr	r2, [sp, #20]
+	ldr	r1, [r6, #1652]
 	ldr	ip, [sp, #24]
 	ldr	r3, [sp, #28]
 	str	r0, [r2, #4]
 	ldr	r2, [r6, #1768]
 	mla	ip, ip, r1, r2
-	ldr	r2, [r6, #1672]
+	ldr	r2, [r6, #1668]
 	add	r2, r2, r10
 	ldr	r1, [r2, #8]
 	str	r1, [ip, #8]
@@ -18143,245 +18303,245 @@ rk_ftl_garbage_collect:
 	str	r2, [ip, #12]
 	ldr	r2, [sp, #36]
 	str	r2, [r3, #12]
-	ldrh	r2, [r6, #884]
+	ldrh	r2, [r6, #932]
 	strh	r2, [r3, #2]	@ movhi
-	ldr	r2, [r6, #988]
-	ldr	r0, [r6, #1672]
+	ldr	r2, [r6, #1032]
+	ldr	r0, [r6, #1668]
 	str	r2, [r3, #4]
 	add	r0, r0, r10
-	ldr	r3, [r6, #1656]
+	ldr	r3, [r6, #1652]
 	adds	r3, r3, #1
-	str	r3, [r6, #1656]
+	str	r3, [r6, #1652]
 	bl	FtlGcBufAlloc
 	ldrb	r3, [r7, #76]	@ zero_extendqisi2
-	cbnz	r3, .L2921
-	ldrb	r3, [r6, #891]	@ zero_extendqisi2
-	ldr	r2, [r6, #1656]
+	cbnz	r3, .L2941
+	ldrb	r3, [r6, #939]	@ zero_extendqisi2
+	ldr	r2, [r6, #1652]
 	cmp	r2, r3
-	beq	.L2921
-	ldrh	r3, [r6, #888]
-	cbnz	r3, .L2948
-.L2921:
+	beq	.L2941
+	ldrh	r3, [r6, #936]
+	cbnz	r3, .L2968
+.L2941:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L2948
-	ldr	r3, .L3014
+	cbz	r0, .L2968
+	ldr	r3, .L3034
 	movs	r2, #0
-	str	r2, [r3, #1744]
-	b	.L3001
-.L2948:
+	str	r2, [r3, #1740]
+	b	.L3021
+.L2968:
 	add	fp, fp, #1
-	b	.L2919
-.L3009:
+	b	.L2939
+.L3029:
 	ldr	r3, [sp, #16]
 	adds	r3, r3, #1
-	b	.L2998
-.L3007:
-	ldr	r3, [r6, #1656]
-	ldr	r5, .L3014+4
-	cbz	r3, .L2926
+	b	.L3018
+.L3027:
+	ldr	r3, [r6, #1652]
+	ldr	r5, .L3034+4
+	cbz	r3, .L2946
 	bl	Ftl_gc_temp_data_write_back
-	cbz	r0, .L2926
+	cbz	r0, .L2946
 	movs	r3, #0
-	str	r3, [r6, #1744]
-.L3000:
-	ldrh	r0, [r5, #-72]
-	b	.L2994
-.L2926:
-	ldrh	r1, [r5, #-70]
-	cbnz	r1, .L2927
-	ldrh	r2, [r6, #1076]
-	ldr	r3, [r6, #768]
+	str	r3, [r6, #1740]
+.L3020:
+	ldrh	r0, [r5, #-68]
+	b	.L3014
+.L2946:
+	ldrh	r1, [r5, #-66]
+	cbnz	r1, .L2947
+	ldrh	r2, [r6, #1072]
+	ldr	r3, [r6, #816]
 	ldrh	r0, [r3, r2, lsl #1]
-	cbz	r0, .L2927
+	cbz	r0, .L2947
 	strh	r1, [r3, r2, lsl #1]	@ movhi
-	ldr	r3, .L3014
-	ldrh	r0, [r3, #1076]
+	ldr	r3, .L3034
+	ldrh	r0, [r3, #1072]
 	bl	update_vpc_list
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2927:
+.L2947:
 	movw	r3, #65535
-	strh	r3, [r6, #1076]	@ movhi
-	b	.L2925
-.L2928:
-	ldr	r2, .L3014
+	strh	r3, [r6, #1072]	@ movhi
+	b	.L2945
+.L2948:
+	ldr	r2, .L3034
 	movs	r1, #0
-	str	r1, [r2, #1744]
-	ldr	r2, .L3014+4
-	ldrh	r0, [r2, #-72]
+	str	r1, [r2, #1740]
+	ldr	r2, .L3034+4
+	ldrh	r0, [r2, #-68]
 	cmp	r0, #0
-	bne	.L2994
+	bne	.L3014
 	adds	r0, r3, #1
-	b	.L2994
-.L2936:
+	b	.L3014
+.L2956:
 	movs	r0, #0
-	b	.L2994
-.L2938:
+	b	.L3014
+.L2958:
 	mov	r0, r3
-	b	.L2994
-.L3003:
-	ldr	r2, [r5, #1740]
-	ldr	r5, .L3014+8
-	cbnz	r2, .L2866
-	ldrh	r2, [r5, #2848]
+	b	.L3014
+.L3023:
+	ldr	r2, [r5, #1736]
+	ldr	r5, .L3034+8
+	cbnz	r2, .L2886
+	ldrh	r2, [r5, #2860]
 	cmp	r2, #3
-	beq	.L2866
-	ldr	r2, [r9, #1124]
-	cbnz	r2, .L2866
-	ldr	r2, [r9, #948]
-	cbnz	r2, .L2866
+	beq	.L2886
+	ldr	r2, [r9, #1120]
+	cbnz	r2, .L2886
+	ldr	r2, [r5, #2832]
+	cbnz	r2, .L2886
 	ldrb	r0, [r5, #76]	@ zero_extendqisi2
-	cbz	r0, .L2867
-.L2866:
-	ldr	r2, [r7, #768]
-	ldrh	r0, [r5, #2848]
+	cbz	r0, .L2887
+.L2886:
+	ldr	r2, [r7, #816]
+	ldrh	r0, [r5, #2860]
 	ldrh	r1, [r2, r3, lsl #1]
 	cmp	r0, #3
-	ldrh	r3, [r5, #2900]
-	ldrh	r2, [r5, #2828]
+	ldrh	r3, [r5, #2912]
+	ldrh	r2, [r5, #2840]
 	mul	r2, r2, r3
 	ite	eq
 	lsreq	r3, r3, #1
 	movne	r3, #0
 	add	r3, r3, r2
 	cmp	r1, r3
-	bgt	.L2869
+	bgt	.L2889
 	movs	r0, #0
 	bl	List_get_gc_head_node
-	ldr	r3, [r5, #2960]
-	ldr	r2, .L3014
-	ldr	r1, [r7, #940]
+	ldr	r3, [r5, #2968]
+	ldr	r2, .L3034
+	ldr	r1, [r7, #988]
 	add	r3, r3, r3, lsl #1
 	cmp	r1, r3, lsr #2
 	ite	hi
 	movhi	r3, #128
 	movls	r3, #160
-	strh	r3, [r2, #1642]	@ movhi
+	strh	r3, [r2, #1638]	@ movhi
 	uxth	r4, r0
-	b	.L2871
-.L2869:
+	b	.L2891
+.L2889:
 	movs	r3, #128
-	b	.L2997
-.L2867:
-	ldr	r2, [r9, #768]
+	b	.L3017
+.L2887:
+	ldr	r2, [r9, #816]
 	ldrh	r3, [r2, r3, lsl #1]
 	cmp	r3, #7
-	bhi	.L2872
+	bhi	.L2892
 	bl	List_get_gc_head_node
 	movs	r3, #128
-	strh	r3, [r7, #1642]	@ movhi
+	strh	r3, [r7, #1638]	@ movhi
 	uxth	r4, r0
-	b	.L2871
-.L2872:
+	b	.L2891
+.L2892:
 	movs	r3, #64
-.L2997:
-	strh	r3, [r7, #1642]	@ movhi
-	b	.L2873
-.L2864:
+.L3017:
+	strh	r3, [r7, #1638]	@ movhi
+	b	.L2893
+.L2884:
 	movs	r3, #80
-	strh	r3, [r5, #1642]	@ movhi
-	b	.L2873
-.L2871:
+	strh	r3, [r5, #1638]	@ movhi
+	b	.L2893
+.L2891:
 	movw	r3, #65535
 	cmp	r4, r3
-	beq	.L2873
-.L2863:
-	ldr	r1, [r7, #748]
-	ldr	r3, [r7, #768]
-	ldrh	r2, [r7, #784]
+	beq	.L2893
+.L2883:
+	ldr	r1, [r7, #752]
+	ldr	r3, [r7, #816]
+	ldrh	r2, [r7, #832]
 	ldrh	r1, [r1, r4, lsl #1]
 	ldrh	r3, [r3, r4, lsl #1]
-	ldr	r0, .L3014+12
+	ldr	r0, .L3034+12
 	str	r1, [sp]
-	ldrh	r1, [r7, #1640]
+	ldrh	r1, [r7, #1636]
 	str	r1, [sp, #4]
 	mov	r1, r4
 	bl	printk
-	b	.L2873
-.L2876:
+	b	.L2893
+.L2896:
 	cmp	r4, #12
-	bls	.L2877
+	bls	.L2897
 	lsrs	r5, r5, #4
-	b	.L2875
-.L2877:
+	b	.L2895
+.L2897:
 	cmp	r4, #8
-	bls	.L2875
+	bls	.L2895
 	lsrs	r5, r5, #2
-	b	.L2875
-.L2942:
+	b	.L2895
+.L2962:
 	movs	r5, #1
-	b	.L2875
-.L3005:
-	ldrh	r3, [r2, #884]
+	b	.L2895
+.L3025:
+	ldrh	r3, [r2, #932]
 	movw	r1, #65535
 	cmp	r3, r1
-	bne	.L2880
-	ldrh	r1, [r2, #1694]
+	bne	.L2900
+	ldrh	r1, [r2, #1690]
 	cmp	r1, r3
-	bne	.L2880
-	ldr	r3, .L3014+4
-	ldrh	r0, [r3, #-72]
-	cbnz	r0, .L2881
-	ldr	r3, .L3014+8
-	ldr	r2, [r2, #940]
-	ldr	r3, [r3, #2960]
+	bne	.L2900
+	ldr	r3, .L3034+4
+	ldrh	r0, [r3, #-68]
+	cbnz	r0, .L2901
+	ldr	r3, .L3034+8
+	ldr	r2, [r2, #988]
+	ldr	r3, [r3, #2968]
 	add	r3, r3, r3, lsl #1
 	cmp	r2, r3, lsr #2
-	bcs	.L2943
-.L2881:
-	ldrh	r3, [r7, #1060]
+	bcs	.L2963
+.L2901:
+	ldrh	r3, [r7, #1056]
 	add	r3, r3, r3, lsl #1
 	ubfx	r3, r3, #2, #16
-	b	.L2882
-.L2943:
+	b	.L2902
+.L2963:
 	movs	r3, #18
-.L2882:
-	strh	r3, [r7, #1640]	@ movhi
+.L2902:
+	strh	r3, [r7, #1636]	@ movhi
 	movs	r3, #0
-	str	r3, [r7, #1652]
-	b	.L2994
-.L2880:
-	ldrh	r3, [r7, #1060]
+	str	r3, [r7, #1648]
+	b	.L3014
+.L2900:
+	ldrh	r3, [r7, #1056]
 	add	r3, r3, r3, lsl #1
 	asrs	r3, r3, #2
-	strh	r3, [r7, #1640]	@ movhi
-	b	.L2879
-.L3006:
+	strh	r3, [r7, #1636]	@ movhi
+	b	.L2899
+.L3026:
 	cmp	r6, #2
-	bhi	.L2945
+	bhi	.L2965
 	adds	r5, r5, #1
 	uxth	r5, r5
-	b	.L2945
-.L3002:
+	b	.L2965
+.L3022:
 	cmp	r8, #0
-	beq	.L2933
-	b	.L2874
-.L2859:
+	beq	.L2953
+	b	.L2894
+.L2879:
 	cmp	r8, #0
-	beq	.L2933
-	b	.L2890
-.L2860:
+	beq	.L2953
+	b	.L2910
+.L2880:
 	cmp	r8, #0
-	beq	.L2933
-	b	.L2934
-.L2862:
+	beq	.L2953
+	b	.L2954
+.L2882:
 	cmp	r8, #0
-	beq	.L2933
-	b	.L2935
-.L2994:
+	beq	.L2953
+	b	.L2955
+.L3014:
 	add	sp, sp, #44
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3015:
+.L3035:
 	.align	2
-.L3014:
+.L3034:
 	.word	.LANCHOR2
 	.word	.LANCHOR4
 	.word	.LANCHOR0
-	.word	.LC132
+	.word	.LC135
 	.fnend
-	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.size	ftl_do_gc, .-ftl_do_gc
 	.align	1
 	.global	FtlCacheWriteBack
 	.thumb
@@ -18394,135 +18554,135 @@ FtlCacheWriteBack:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r3, .L3058
-	ldr	r6, .L3058+4
-	ldr	r5, [r3, #-64]
-	ldr	r3, [r6, #740]
+	ldr	r3, .L3078
+	ldr	r6, .L3078+4
+	ldr	r5, [r3, #-60]
+	ldr	r3, [r6, #744]
 	cmp	r3, #0
-	bne	.L3018
-	ldr	r4, .L3058+8
-	ldr	r1, [r4, #2952]
+	bne	.L3038
+	ldr	r4, .L3078+8
+	ldr	r1, [r4, #2960]
 	cmp	r1, #0
-	beq	.L3018
+	beq	.L3038
 	ldrb	r7, [r4, #76]	@ zero_extendqisi2
-	cbz	r7, .L3020
+	cbz	r7, .L3040
 	ldrb	r7, [r5, #8]	@ zero_extendqisi2
 	subs	r0, r7, #1
 	rsbs	r7, r0, #0
 	adcs	r7, r7, r0
-.L3020:
-	ldr	r0, [r4, #2956]
+.L3040:
+	ldr	r0, [r4, #2964]
 	mov	r2, r7
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	mov	r9, #0
 	bl	FlashProgPages
-	ldr	r10, .L3058+8
+	ldr	r10, .L3078+8
 	mov	fp, #36
-.L3021:
-	ldr	r3, [r4, #2952]
+.L3041:
+	ldr	r3, [r4, #2960]
 	cmp	r9, r3
-	bcs	.L3038
+	bcs	.L3058
 	mul	r8, fp, r9
-	ldr	r3, [r10, #2956]
+	ldr	r3, [r10, #2964]
 	add	r2, r3, r8
 	ldr	r3, [r3, r8]
 	adds	r3, r3, #1
-	beq	.L3041
+	beq	.L3061
 	ldr	r3, [r2, #4]
-	cbz	r7, .L3054
+	cbz	r7, .L3074
 	orr	r3, r3, #-2147483648
-.L3054:
+.L3074:
 	ldr	r0, [r2, #16]
 	add	r1, sp, #4
 	movs	r2, #1
 	str	r3, [sp, #4]
 	bl	log2phys
-	ldr	r3, [r4, #2956]
+	ldr	r3, [r4, #2964]
 	add	r8, r8, r3
 	ldr	r3, [r8, #12]
 	ldr	r0, [r3, #12]
 	adds	r2, r0, #1
-	beq	.L3025
+	beq	.L3045
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, [r6, #768]
+	ldr	r3, [r6, #816]
 	ldrh	r2, [r3, r0, lsl #1]
 	mov	r8, r0
-	cbnz	r2, .L3026
-	ldr	r0, .L3058+12
+	cbnz	r2, .L3046
+	ldr	r0, .L3078+12
 	mov	r1, r8
 	bl	printk
-.L3026:
+.L3046:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L3025:
+.L3045:
 	add	r9, r9, #1
-	b	.L3021
-.L3056:
+	b	.L3041
+.L3076:
 	movw	r5, #16386
-.L3037:
-	ldrh	r3, [r6, #1698]
-	cbz	r3, .L3038
+.L3057:
+	ldrh	r3, [r6, #1694]
+	cbz	r3, .L3058
 	movs	r0, #1
 	mov	r1, r0
-	bl	rk_ftl_garbage_collect
+	bl	ftl_do_gc
 	subs	r5, r5, #1
-	bne	.L3037
-.L3038:
+	bne	.L3057
+.L3058:
 	movs	r3, #0
-	str	r3, [r4, #2952]
-	b	.L3018
-.L3041:
-	ldr	r10, .L3058+8
+	str	r3, [r4, #2960]
+	b	.L3038
+.L3061:
+	ldr	r10, .L3078+8
 	mov	r9, #0
-.L3022:
-	ldr	r3, [r4, #2952]
+.L3042:
+	ldr	r3, [r4, #2960]
 	cmp	r9, r3
-	bcs	.L3056
+	bcs	.L3076
 	mov	r8, #36
-	ldr	r3, [r10, #2956]
+	ldr	r3, [r10, #2964]
 	mov	fp, #0
 	mov	r2, #-1
 	mul	r8, r8, r9
 	str	r2, [r3, r8]
-.L3028:
-	ldr	r3, [r4, #2956]
+.L3048:
+	ldr	r3, [r4, #2964]
 	add	r2, r3, r8
 	ldr	r3, [r3, r8]
 	adds	r3, r3, #1
-	bne	.L3057
+	bne	.L3077
 	ldr	r0, [r2, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	ldrh	r3, [r5]
 	cmp	r3, r0
-	bne	.L3029
-	ldr	r1, [r6, #768]
+	bne	.L3049
+	ldr	r1, [r6, #816]
 	ldrh	r0, [r5, #4]
 	ldrh	r2, [r1, r3, lsl #1]
 	subs	r2, r2, r0
 	strh	r2, [r1, r3, lsl #1]	@ movhi
-	ldrh	r3, [r10, #2898]
+	ldrh	r3, [r10, #2910]
 	strb	fp, [r5, #6]
 	strh	fp, [r5, #4]	@ movhi
 	strh	r3, [r5, #2]	@ movhi
-.L3029:
+.L3049:
 	ldrh	r3, [r5, #4]
-	cbnz	r3, .L3030
+	cbnz	r3, .L3050
 	mov	r0, r5
 	bl	allocate_new_data_superblock
-.L3030:
-	ldr	r3, [r6, #1224]
+.L3050:
+	ldr	r3, [r6, #1220]
 	adds	r3, r3, #1
-	str	r3, [r6, #1224]
-	ldr	r3, [r4, #2956]
+	str	r3, [r6, #1220]
+	ldr	r3, [r4, #2964]
 	add	r3, r3, r8
 	ldr	r0, [r3, #4]
 	ubfx	r0, r0, #10, #16
 	bl	FtlGcMarkBadPhyBlk
 	mov	r0, r5
 	bl	get_new_active_ppa
-	ldr	r3, [r4, #2956]
+	ldr	r3, [r4, #2964]
 	movs	r1, #1
 	mov	r2, r7
 	add	r3, r3, r8
@@ -18531,53 +18691,53 @@ FtlCacheWriteBack:
 	mov	r0, r3
 	ldrb	r3, [r5, #9]	@ zero_extendqisi2
 	bl	FlashProgPages
-	ldr	r3, [r6, #740]
+	ldr	r3, [r6, #744]
 	cmp	r3, #0
-	beq	.L3028
-	b	.L3018
-.L3057:
+	beq	.L3048
+	b	.L3038
+.L3077:
 	ldr	r3, [r2, #4]
-	cbz	r7, .L3055
+	cbz	r7, .L3075
 	orr	r3, r3, #-2147483648
-.L3055:
+.L3075:
 	ldr	r0, [r2, #16]
 	add	r1, sp, #4
 	movs	r2, #1
 	str	r3, [sp, #4]
 	bl	log2phys
-	ldr	r3, [r4, #2956]
+	ldr	r3, [r4, #2964]
 	add	r8, r8, r3
 	ldr	r3, [r8, #12]
 	ldr	r0, [r3, #12]
 	adds	r3, r0, #1
-	beq	.L3034
+	beq	.L3054
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
-	ldr	r3, [r6, #768]
+	ldr	r3, [r6, #816]
 	ldrh	r2, [r3, r0, lsl #1]
 	mov	r8, r0
-	cbnz	r2, .L3035
-	ldr	r0, .L3058+12
+	cbnz	r2, .L3055
+	ldr	r0, .L3078+12
 	mov	r1, r8
 	bl	printk
-.L3035:
+.L3055:
 	mov	r0, r8
 	bl	decrement_vpc_count
-.L3034:
+.L3054:
 	add	r9, r9, #1
-	b	.L3022
-.L3018:
+	b	.L3042
+.L3038:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3059:
+.L3079:
 	.align	2
-.L3058:
+.L3078:
 	.word	.LANCHOR4
 	.word	.LANCHOR2
 	.word	.LANCHOR0
-	.word	.LC133
+	.word	.LC136
 	.fnend
 	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
 	.align	1
@@ -18591,20 +18751,20 @@ FtlSysFlush:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L3062
-	ldr	r3, [r3, #740]
-	cbnz	r3, .L3061
+	ldr	r3, .L3082
+	ldr	r3, [r3, #744]
+	cbnz	r3, .L3081
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	movs	r0, #1
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L3061:
+.L3081:
 	movs	r0, #0
 	pop	{r3, pc}
-.L3063:
+.L3083:
 	.align	2
-.L3062:
+.L3082:
 	.word	.LANCHOR2
 	.fnend
 	.size	FtlSysFlush, .-FtlSysFlush
@@ -18619,21 +18779,38 @@ FtlDeInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	ldr	r3, .L3066
+	ldr	r3, .L3086
 	ldr	r3, [r3, #504]
 	cmp	r3, #1
-	bne	.L3065
+	bne	.L3085
 	bl	FtlSysFlush
-.L3065:
+.L3085:
 	movs	r0, #0
 	pop	{r3, pc}
-.L3067:
+.L3087:
 	.align	2
-.L3066:
+.L3086:
 	.word	.LANCHOR1
 	.fnend
 	.size	FtlDeInit, .-FtlDeInit
 	.align	1
+	.global	ftl_deinit
+	.thumb
+	.thumb_func
+	.type	ftl_deinit, %function
+ftl_deinit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	bl	ftl_flash_de_init
+	bl	FtlDeInit
+	pop	{r3, lr}
+	b	ftl_flash_de_init
+	.fnend
+	.size	ftl_deinit, .-ftl_deinit
+	.align	1
 	.global	rk_ftl_de_init
 	.thumb
 	.thumb_func
@@ -18644,18 +18821,49 @@ rk_ftl_de_init:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, lr}
 	.save {r3, lr}
-	bl	FlashDeInit
-	bl	FtlDeInit
+	movs	r1, #0
+	ldr	r0, .L3090
+	bl	printk
 	pop	{r3, lr}
-	b	FlashDeInit
+	b	ftl_deinit
+.L3091:
+	.align	2
+.L3090:
+	.word	.LC137
 	.fnend
 	.size	rk_ftl_de_init, .-rk_ftl_de_init
 	.align	1
-	.global	FtlDiscard
+	.global	ftl_cache_flush
 	.thumb
 	.thumb_func
-	.type	FtlDiscard, %function
-FtlDiscard:
+	.type	ftl_cache_flush, %function
+ftl_cache_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	ftl_cache_flush, .-ftl_cache_flush
+	.align	1
+	.global	rk_ftl_cache_write_back
+	.thumb
+	.thumb_func
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	1
+	.global	ftl_discard
+	.thumb
+	.thumb_func
+	.type	ftl_discard, %function
+ftl_discard:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 8
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -18663,25 +18871,21 @@ FtlDiscard:
 	.save {r4, r5, r6, r7, r8, r9, lr}
 	.pad #12
 	adds	r2, r0, r1
-	ldr	r7, .L3085
+	ldr	r7, .L3111
 	mov	r6, r0
 	mov	r5, r1
-	ldr	r3, [r7, #2940]
+	ldr	r3, [r7, #1896]
 	cmp	r2, r3
-	bhi	.L3077
+	bhi	.L3101
 	cmp	r1, #31
-	bhi	.L3071
-.L3072:
-	movs	r0, #0
-	b	.L3070
-.L3071:
-	ldr	r3, .L3085+4
-	ldr	r2, [r3, #740]
+	bls	.L3103
+	ldr	r3, .L3111+4
+	ldr	r2, [r3, #744]
 	mov	r8, r3
 	cmp	r2, #0
-	bne	.L3072
+	bne	.L3103
 	bl	FtlCacheWriteBack
-	ldrh	r4, [r7, #2904]
+	ldrh	r4, [r7, #2916]
 	mov	r0, r6
 	mov	r1, r4
 	bl	__aeabi_uidiv
@@ -18689,7 +18893,7 @@ FtlDiscard:
 	mov	r9, r0
 	subs	r6, r6, r3
 	uxth	r6, r6
-	cbz	r6, .L3073
+	cbz	r6, .L3096
 	subs	r4, r4, r6
 	add	r9, r0, #1
 	cmp	r4, r5
@@ -18697,63 +18901,79 @@ FtlDiscard:
 	movcs	r4, r5
 	uxth	r4, r4
 	subs	r5, r5, r4
-.L3073:
-	ldr	r4, .L3085+8
+.L3096:
+	ldr	r4, .L3111+8
 	mov	r3, #-1
 	str	r3, [sp, #4]
-.L3074:
-	ldrh	r3, [r7, #2904]
+.L3097:
+	ldrh	r3, [r7, #2916]
 	cmp	r5, r3
-	bcc	.L3084
+	bcc	.L3110
 	mov	r0, r9
 	mov	r1, sp
 	movs	r2, #0
 	bl	log2phys
 	ldr	r3, [sp]
 	adds	r3, r3, #1
-	beq	.L3075
-	ldr	r3, [r4, #-60]
+	beq	.L3098
+	ldr	r3, [r4, #-56]
 	add	r1, sp, #4
 	movs	r2, #1
 	mov	r0, r9
 	adds	r3, r3, #1
-	str	r3, [r4, #-60]
-	ldr	r3, [r8, #956]
+	str	r3, [r4, #-56]
+	ldr	r3, [r8, #1000]
 	adds	r3, r3, #1
-	str	r3, [r8, #956]
+	str	r3, [r8, #1000]
 	bl	log2phys
 	ldr	r0, [sp]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L3075:
-	ldrh	r3, [r7, #2904]
+.L3098:
+	ldrh	r3, [r7, #2916]
 	add	r9, r9, #1
 	subs	r5, r5, r3
-	b	.L3074
-.L3084:
-	ldr	r3, .L3085+8
-	ldr	r2, [r3, #-60]
+	b	.L3097
+.L3110:
+	ldr	r3, .L3111+8
+	ldr	r2, [r3, #-56]
 	cmp	r2, #32
-	bls	.L3072
-	movs	r4, #0
-	str	r4, [r3, #-60]
+	bls	.L3103
+	movs	r2, #0
+	str	r2, [r3, #-56]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	b	.L3072
-.L3077:
+	b	.L3103
+.L3101:
 	mov	r0, #-1
-.L3070:
+	b	.L3095
+.L3103:
+	movs	r0, #0
+.L3095:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, pc}
-.L3086:
+.L3112:
 	.align	2
-.L3085:
+.L3111:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.word	.LANCHOR4
 	.fnend
+	.size	ftl_discard, .-ftl_discard
+	.align	1
+	.global	FtlDiscard
+	.thumb
+	.thumb_func
+	.type	FtlDiscard, %function
+FtlDiscard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_discard
+	.fnend
 	.size	FtlDiscard, .-FtlDiscard
 	.align	1
 	.global	FtlGcFreeTempBlock
@@ -18767,100 +18987,100 @@ FtlGcFreeTempBlock:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r4, .L3124
-	ldr	r6, .L3124+4
-	ldr	r2, [r4, #740]
-	ldrh	r1, [r6, #2898]
+	ldr	r4, .L3151
+	ldr	r6, .L3151+4
+	ldr	r2, [r4, #744]
+	ldrh	r1, [r6, #2910]
 	cmp	r2, #0
-	bne	.L3122
-	ldrh	r5, [r4, #884]
+	bne	.L3149
+	ldrh	r5, [r4, #932]
 	movw	r7, #65535
 	cmp	r5, r7
-	bne	.L3090
-.L3099:
-	ldrh	r2, [r4, #884]
+	bne	.L3117
+.L3126:
+	ldrh	r2, [r4, #932]
 	movw	r3, #65535
 	movs	r7, #0
-	ldr	r5, .L3124
+	ldr	r5, .L3151
 	cmp	r2, r3
-	str	r7, [r4, #1924]
-	beq	.L3122
+	str	r7, [r4, #1928]
+	beq	.L3149
 	bl	FtlCacheWriteBack
-	ldrb	r0, [r5, #891]	@ zero_extendqisi2
-	ldrh	r3, [r6, #2898]
+	ldrb	r0, [r5, #939]	@ zero_extendqisi2
+	ldrh	r3, [r6, #2910]
 	mov	r10, #12
-	ldr	r2, [r5, #768]
-	ldrh	r1, [r5, #884]
+	ldr	r2, [r5, #816]
+	ldrh	r1, [r5, #932]
 	smulbb	r3, r0, r3
 	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldr	r3, [r5, #972]
-	ldrh	r2, [r5, #1692]
+	ldr	r3, [r5, #1016]
+	ldrh	r2, [r5, #1688]
 	add	r3, r3, r2
-	str	r3, [r5, #972]
-	b	.L3100
-.L3090:
-	cbz	r0, .L3093
-	ldr	r3, .L3124+8
-	ldrh	r0, [r3, #3000]
+	str	r3, [r5, #1016]
+	b	.L3127
+.L3117:
+	cbz	r0, .L3120
+	ldr	r3, .L3151+8
+	ldrh	r0, [r3, #3064]
 	cmp	r0, r7
-	beq	.L3094
-.L3095:
+	beq	.L3121
+.L3122:
 	movs	r1, #2
-	b	.L3093
-.L3094:
-	strh	r2, [r3, #3000]	@ movhi
-	ldrh	r3, [r4, #784]
+	b	.L3120
+.L3121:
+	strh	r2, [r3, #3064]	@ movhi
+	ldrh	r3, [r4, #832]
 	cmp	r3, #17
-	bhi	.L3095
-.L3093:
-	ldr	r7, .L3124
-	add	r0, r7, #884
+	bhi	.L3122
+.L3120:
+	ldr	r7, .L3151
+	add	r0, r7, #932
 	bl	FtlGcScanTempBlk
 	str	r0, [sp, #4]
 	adds	r0, r0, #1
-	beq	.L3096
-	ldr	r2, [r7, #748]
+	beq	.L3123
+	ldr	r2, [r7, #752]
 	ldrh	r3, [r2, r5, lsl #1]
 	cmp	r3, #4
-	bls	.L3097
+	bls	.L3124
 	subs	r3, r3, #5
 	movs	r0, #1
 	strh	r3, [r2, r5, lsl #1]	@ movhi
 	bl	FtlEctTblFlush
-.L3097:
-	ldr	r3, [r4, #1924]
-	ldr	r2, .L3124
-	cbnz	r3, .L3098
+.L3124:
+	ldr	r3, [r4, #1928]
+	ldr	r2, .L3151
+	cbnz	r3, .L3125
 	ldr	r0, [sp, #4]
-	ldr	r3, [r2, #1224]
+	ldr	r3, [r2, #1220]
 	ubfx	r0, r0, #10, #16
 	adds	r3, r3, #1
-	str	r3, [r2, #1224]
+	str	r3, [r2, #1220]
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L3098:
+.L3125:
 	movs	r3, #0
-	str	r3, [r4, #1924]
-	b	.L3110
-.L3096:
-	ldr	r3, .L3124+8
-	ldrh	r2, [r3, #3000]
+	str	r3, [r4, #1928]
+	b	.L3137
+.L3123:
+	ldr	r3, .L3151+8
+	ldrh	r2, [r3, #3064]
 	movw	r3, #65535
 	cmp	r2, r3
-	bne	.L3110
-	b	.L3099
-.L3103:
+	bne	.L3137
+	b	.L3126
+.L3130:
 	mul	r8, r10, r8
-	ldr	fp, [r5, #1688]
+	ldr	fp, [r5, #1684]
 	add	r1, sp, #4
 	movs	r2, #0
 	add	r9, fp, r8
 	ldr	r0, [r9, #8]
 	bl	log2phys
-	ldr	r3, [fp, r8]
 	ldr	r0, [sp, #4]
+	ldr	r3, [fp, r8]
 	cmp	r0, r3
-	bne	.L3101
+	bne	.L3128
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	add	r1, r9, #4
@@ -18869,96 +19089,96 @@ FtlGcFreeTempBlock:
 	ldr	r0, [r9, #8]
 	bl	log2phys
 	mov	r0, r8
-.L3121:
+.L3148:
 	bl	decrement_vpc_count
-.L3102:
+.L3129:
 	adds	r7, r7, #1
-.L3100:
-	ldrh	r3, [r4, #1692]
+.L3127:
+	ldrh	r3, [r4, #1688]
 	uxth	r8, r7
 	cmp	r3, r8
-	bhi	.L3103
-	b	.L3123
-.L3101:
+	bhi	.L3130
+	b	.L3150
+.L3128:
 	ldr	r3, [r9, #4]
 	cmp	r0, r3
-	beq	.L3102
-	ldrh	r0, [r5, #884]
-	b	.L3121
-.L3123:
+	beq	.L3129
+	ldrh	r0, [r5, #932]
+	b	.L3148
+.L3150:
 	movw	r0, #65535
 	bl	decrement_vpc_count
 	ldrb	r3, [r6, #76]	@ zero_extendqisi2
-	cbz	r3, .L3104
-	ldr	r3, .L3124
-	ldr	r0, .L3124+12
-	ldrh	r1, [r3, #884]
+	cbz	r3, .L3131
+	ldr	r3, .L3151
+	ldr	r0, .L3151+12
+	ldrh	r1, [r3, #932]
 	bl	printk
-.L3104:
-	ldrh	r0, [r4, #884]
-	ldr	r3, [r4, #768]
+.L3131:
+	ldrh	r0, [r4, #932]
+	ldr	r3, [r4, #816]
 	ldrh	r3, [r3, r0, lsl #1]
-	cbz	r3, .L3105
+	cbz	r3, .L3132
 	bl	INSERT_DATA_LIST
-	b	.L3106
-.L3105:
+	b	.L3133
+.L3132:
 	bl	INSERT_FREE_LIST
-.L3106:
+.L3133:
 	movw	r3, #65535
-	strh	r3, [r4, #884]	@ movhi
+	strh	r3, [r4, #932]	@ movhi
 	movs	r3, #0
-	strh	r3, [r4, #1692]	@ movhi
-	strh	r3, [r4, #1684]	@ movhi
+	strh	r3, [r4, #1688]	@ movhi
+	strh	r3, [r4, #1680]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-	ldr	r3, [r4, #948]
-	ldr	r5, .L3124
-	cbz	r3, .L3107
-	ldr	r3, [r5, #1008]
+	ldr	r3, [r6, #2832]
+	ldr	r5, .L3151
+	cbz	r3, .L3134
+	ldr	r3, [r5, #1052]
 	cmp	r3, #29
-	bhi	.L3107
-	ldrh	r3, [r5, #1060]
-	ldrh	r2, [r5, #784]
+	bhi	.L3134
+	ldrh	r3, [r5, #1056]
+	ldrh	r2, [r5, #832]
 	cmp	r2, r3
 	itt	cc
 	lslcc	r3, r3, #1
-	strhcc	r3, [r5, #1640]	@ movhi
+	strhcc	r3, [r5, #1636]	@ movhi
 	movw	r3, #65535
-	strh	r3, [r4, #1076]	@ movhi
-	b	.L3122
-.L3107:
-	ldrh	r3, [r4, #1060]
-	ldrh	r1, [r4, #784]
-	ldr	r2, .L3124
+	strh	r3, [r4, #1072]	@ movhi
+	b	.L3149
+.L3134:
+	ldrh	r3, [r4, #1056]
+	ldrh	r1, [r4, #832]
+	ldr	r2, .L3151
 	add	r0, r3, r3, lsl #1
 	cmp	r1, r0, asr #2
-	ble	.L3122
+	ble	.L3149
 	ldrb	r0, [r6, #76]	@ zero_extendqisi2
 	movw	r1, #65535
-	strh	r1, [r2, #1076]	@ movhi
-	cbz	r0, .L3109
+	strh	r1, [r2, #1072]	@ movhi
+	cbz	r0, .L3136
 	subs	r3, r3, #2
-	strh	r3, [r2, #1640]	@ movhi
-.L3122:
+	strh	r3, [r2, #1636]	@ movhi
+.L3149:
 	movs	r0, #0
-	b	.L3089
-.L3109:
+	b	.L3116
+.L3136:
 	movs	r3, #20
-	strh	r3, [r2, #1640]	@ movhi
-	b	.L3089
-.L3110:
+	strh	r3, [r2, #1636]	@ movhi
+	b	.L3116
+.L3137:
 	movs	r0, #1
-.L3089:
+.L3116:
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3125:
+.L3152:
 	.align	2
-.L3124:
+.L3151:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	.LANCHOR1
-	.word	.LC134
+	.word	.LC138
 	.fnend
 	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
 	.align	1
@@ -18970,50 +19190,50 @@ Ftl_gc_temp_data_write_back:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3144
+	ldr	r3, .L3171
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	ldrb	r3, [r3, #76]	@ zero_extendqisi2
-	ldr	r5, .L3144+4
-	cbz	r3, .L3127
-	ldr	r3, [r5, #1656]
+	ldr	r5, .L3171+4
+	cbz	r3, .L3154
+	ldr	r3, [r5, #1652]
 	lsls	r4, r3, #31
-	bpl	.L3127
-	ldrh	r3, [r5, #888]
-	cbz	r3, .L3127
-.L3132:
+	bpl	.L3154
+	ldrh	r3, [r5, #936]
+	cbz	r3, .L3154
+.L3159:
 	movs	r0, #0
 	pop	{r4, r5, r6, r7, r8, pc}
-.L3127:
+.L3154:
 	movs	r2, #0
 	ldr	r0, [r5, #1768]
-	ldr	r1, [r5, #1656]
+	ldr	r1, [r5, #1652]
 	movs	r6, #0
 	mov	r3, r2
-	ldr	r7, .L3144+4
+	ldr	r7, .L3171+4
 	bl	FlashProgPages
 	mov	r8, #36
-.L3129:
-	ldr	r1, [r5, #1656]
+.L3156:
+	ldr	r1, [r5, #1652]
 	uxth	r3, r6
-	ldr	r4, .L3144+4
+	ldr	r4, .L3171+4
 	cmp	r3, r1
-	bcs	.L3143
+	bcs	.L3170
 	mul	r3, r8, r3
 	ldr	r1, [r7, #1768]
 	adds	r6, r6, #1
 	adds	r2, r1, r3
 	ldr	r1, [r1, r3]
 	adds	r0, r1, #1
-	bne	.L3130
-	ldrh	r0, [r4, #884]
+	bne	.L3157
+	ldrh	r0, [r4, #932]
 	movs	r5, #0
-	ldr	r2, [r4, #768]
+	ldr	r2, [r4, #816]
 	strh	r5, [r2, r0, lsl #1]	@ movhi
-	ldr	r2, [r4, #1224]
-	strh	r1, [r4, #884]	@ movhi
+	ldr	r2, [r4, #1220]
+	strh	r1, [r4, #932]	@ movhi
 	adds	r2, r2, #1
-	str	r2, [r4, #1224]
+	str	r2, [r4, #1220]
 	ldr	r2, [r4, #1768]
 	add	r3, r3, r2
 	ldr	r0, [r3, #4]
@@ -19021,30 +19241,30 @@ Ftl_gc_temp_data_write_back:
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
 	bl	FtlGcPageVarInit
-	b	.L3142
-.L3130:
+	b	.L3169
+.L3157:
 	ldr	r3, [r2, #12]
 	ldr	r1, [r2, #4]
 	ldr	r0, [r3, #12]
 	ldr	r2, [r3, #8]
 	bl	FtlGcUpdatePage
-	b	.L3129
-.L3143:
+	b	.L3156
+.L3170:
 	ldr	r0, [r4, #1768]
 	bl	FtlGcBufFree
 	movs	r3, #0
-	str	r3, [r4, #1656]
-	ldrh	r3, [r4, #888]
+	str	r3, [r4, #1652]
+	ldrh	r3, [r4, #936]
 	cmp	r3, #0
-	bne	.L3132
+	bne	.L3159
 	movs	r0, #1
 	bl	FtlGcFreeTempBlock
-.L3142:
+.L3169:
 	movs	r0, #1
 	pop	{r4, r5, r6, r7, r8, pc}
-.L3145:
+.L3172:
 	.align	2
-.L3144:
+.L3171:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -19060,26 +19280,26 @@ FtlGcPageRecovery:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, lr}
 	.save {r3, r4, r5, lr}
-	ldr	r5, .L3148
-	ldr	r4, .L3148+4
-	ldrh	r1, [r5, #2898]
-	add	r0, r4, #884
+	ldr	r5, .L3175
+	ldr	r4, .L3175+4
+	ldrh	r1, [r5, #2910]
+	add	r0, r4, #932
 	bl	FtlGcScanTempBlk
-	ldrh	r2, [r4, #886]
-	ldrh	r3, [r5, #2898]
+	ldrh	r2, [r4, #934]
+	ldrh	r3, [r5, #2910]
 	cmp	r2, r3
-	bcc	.L3146
-	add	r0, r4, #1864
+	bcc	.L3173
+	addw	r0, r4, #1868
 	bl	FtlMapBlkWriteDumpData
 	movs	r0, #0
 	bl	FtlGcFreeTempBlock
 	movs	r3, #0
-	str	r3, [r4, #1924]
-.L3146:
+	str	r3, [r4, #1928]
+.L3173:
 	pop	{r3, r4, r5, pc}
-.L3149:
+.L3176:
 	.align	2
-.L3148:
+.L3175:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -19096,12 +19316,12 @@ FtlPowerLostRecovery:
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	movs	r5, #0
-	ldr	r4, .L3151
-	ldr	r3, .L3151+4
-	add	r6, r4, #788
-	add	r4, r4, #836
+	ldr	r4, .L3178
+	ldr	r3, .L3178+4
+	add	r6, r4, #836
+	add	r4, r4, #884
 	mov	r0, r6
-	str	r5, [r3, #-204]
+	str	r5, [r3, #-200]
 	bl	FtlRecoverySuperblock
 	mov	r0, r6
 	bl	FtlSlcSuperblockCheck
@@ -19114,184 +19334,14 @@ FtlPowerLostRecovery:
 	bl	decrement_vpc_count
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L3152:
+.L3179:
 	.align	2
-.L3151:
+.L3178:
 	.word	.LANCHOR2
 	.word	.LANCHOR4
 	.fnend
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	1
-	.global	Ftl_get_new_temp_ppa
-	.thumb
-	.thumb_func
-	.type	Ftl_get_new_temp_ppa, %function
-Ftl_get_new_temp_ppa:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r3, r4, r5, lr}
-	.save {r3, r4, r5, lr}
-	movw	r3, #65535
-	ldr	r4, .L3156
-	ldrh	r2, [r4, #884]
-	cmp	r2, r3
-	beq	.L3154
-	ldrh	r3, [r4, #888]
-	cbnz	r3, .L3155
-.L3154:
-	bl	FtlCacheWriteBack
-	movs	r0, #0
-	movs	r5, #0
-	bl	FtlGcFreeTempBlock
-	ldr	r0, .L3156+4
-	strb	r5, [r4, #892]
-	bl	allocate_data_superblock
-	strh	r5, [r4, #1684]	@ movhi
-	strh	r5, [r4, #1692]	@ movhi
-	bl	l2p_flush
-	mov	r0, r5
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-.L3155:
-	ldr	r0, .L3156+4
-	pop	{r3, r4, r5, lr}
-	b	get_new_active_ppa
-.L3157:
-	.align	2
-.L3156:
-	.word	.LANCHOR2
-	.word	.LANCHOR2+884
-	.fnend
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
-	.align	1
-	.global	rk_ftl_cache_write_back
-	.thumb
-	.thumb_func
-	.type	rk_ftl_cache_write_back, %function
-rk_ftl_cache_write_back:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 0
-	@ frame_needed = 0, uses_anonymous_args = 0
-	@ link register save eliminated.
-	b	FtlCacheWriteBack
-	.fnend
-	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
-	.align	1
-	.global	ftl_fix_nand_power_lost_error
-	.thumb
-	.thumb_func
-	.type	ftl_fix_nand_power_lost_error, %function
-ftl_fix_nand_power_lost_error:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 48
-	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3174
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
-	.pad #48
-	sub	sp, sp, #48
-	ldrb	r2, [r3, #76]	@ zero_extendqisi2
-	mov	r8, r3
-	cmp	r2, #0
-	beq	.L3159
-	ldr	r4, .L3174+4
-	movw	r7, #4097
-	ldr	r6, .L3174+8
-	ldr	r0, .L3174+12
-	ldr	r3, [r4, #768]
-	ldrh	r5, [r6, #-210]
-	mov	r1, r5
-	ldrh	r2, [r3, r5, lsl #1]
-	bl	printk
-	ldrh	r0, [r4, #788]
-	bl	FtlGcRefreshOpenBlock
-	ldrh	r0, [r4, #836]
-	bl	FtlGcRefreshOpenBlock
-	add	r0, r4, #788
-	bl	allocate_new_data_superblock
-	add	r0, r4, #836
-	bl	allocate_new_data_superblock
-	lsl	r9, r5, #1
-.L3161:
-	subs	r7, r7, #1
-	beq	.L3165
-	movs	r0, #1
-	mov	r1, r0
-	bl	rk_ftl_garbage_collect
-	ldr	r3, [r4, #768]
-	ldrh	r3, [r3, r9]
-	cmp	r3, #0
-	bne	.L3161
-.L3165:
-	ldr	r3, [r4, #768]
-	mov	r1, r5
-	ldr	r0, .L3174+12
-	ldrh	r2, [r3, r5, lsl #1]
-	bl	printk
-	ldr	r3, [r4, #768]
-	ldrh	r7, [r3, r5, lsl #1]
-	cbnz	r7, .L3163
-	add	r0, sp, #48
-	mov	r10, #36
-	movw	r9, #65535
-	strh	r5, [r0, #-48]!	@ movhi
-	bl	make_superblock
-	ldr	r3, .L3174+4
-	ldrh	ip, [r8, #2828]
-	ldr	r8, [r3, #744]
-	mov	r3, r7
-	mov	lr, r3
-	add	r0, sp, #14
-.L3166:
-	uxth	r2, r3
-	cmp	r2, ip
-	bcs	.L3173
-	ldrh	r2, [r0, #2]!
-	cmp	r2, r9
-	beq	.L3167
-	mla	r1, r10, r7, r8
-	adds	r7, r7, #1
-	lsls	r2, r2, #10
-	uxth	r7, r7
-	str	r2, [r1, #4]
-	str	lr, [r1, #8]
-	str	lr, [r1, #12]
-.L3167:
-	adds	r3, r3, #1
-	b	.L3166
-.L3173:
-	ldr	r3, [r4, #768]
-	mov	r1, r5
-	ldr	r0, .L3174+16
-	ldrh	r2, [r3, r5, lsl #1]
-	bl	printk
-	movs	r1, #0
-	mov	r2, r7
-	ldr	r0, [r4, #744]
-	bl	FlashEraseBlocks
-	ldr	r0, [r4, #744]
-	movs	r1, #1
-	mov	r2, r7
-	bl	FlashEraseBlocks
-.L3163:
-	movw	r3, #65535
-	strh	r3, [r6, #-210]	@ movhi
-.L3159:
-	add	sp, sp, #48
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L3175:
-	.align	2
-.L3174:
-	.word	.LANCHOR0
-	.word	.LANCHOR2
-	.word	.LANCHOR4
-	.word	.LC135
-	.word	.LC136
-	.fnend
-	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
-	.align	1
 	.global	FtlSysBlkInit
 	.thumb
 	.thumb_func
@@ -19307,22 +19357,22 @@ FtlSysBlkInit:
 	movw	r6, #65535
 	ldr	r7, .L3196+4
 	ldr	r4, .L3196+8
-	ldrh	r0, [r5, #2832]
-	strh	r3, [r7, #-208]	@ movhi
-	strh	r6, [r7, #-210]	@ movhi
+	ldrh	r0, [r5, #2844]
+	strh	r3, [r7, #-204]	@ movhi
+	strh	r6, [r7, #-206]	@ movhi
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlScanSysBlk
-	ldrh	r3, [r4, #1064]
+	ldrh	r3, [r4, #1060]
 	cmp	r3, r6
-	bne	.L3177
-.L3179:
+	bne	.L3181
+.L3183:
 	mov	r6, #-1
-	b	.L3178
-.L3177:
+	b	.L3182
+.L3181:
 	bl	FtlLoadSysInfo
 	mov	r6, r0
 	cmp	r0, #0
-	bne	.L3179
+	bne	.L3183
 	bl	FtlLoadMapInfo
 	bl	FtlLoadVonderInfo
 	bl	Ftl_load_ext_data
@@ -19332,106 +19382,94 @@ FtlSysBlkInit:
 	bl	FtlPowerLostRecovery
 	movs	r0, #1
 	bl	FtlUpdateVaildLpn
-	ldrh	r1, [r5, #2938]
-	ldr	r2, [r4, #932]
+	ldrh	r1, [r5, #2950]
+	ldr	r2, [r4, #980]
 	movs	r0, #12
 	mov	r3, r6
-.L3180:
+.L3184:
 	cmp	r3, r1
-	bge	.L3185
+	bge	.L3189
 	mla	lr, r0, r3, r2
 	ldr	lr, [lr, #4]
 	cmp	lr, #0
-	bge	.L3181
-.L3185:
-	ldrh	r2, [r4, #1040]
+	bge	.L3185
+.L3189:
+	ldrh	r2, [r4, #788]
 	cmp	r3, r1
 	add	r2, r2, #1
-	strh	r2, [r4, #1040]	@ movhi
+	strh	r2, [r4, #788]	@ movhi
 	bge	.L3195
-	b	.L3182
-.L3181:
+	b	.L3186
+.L3185:
 	adds	r3, r3, #1
-	b	.L3180
+	b	.L3184
 .L3195:
-	ldrh	r3, [r7, #-208]
+	ldrh	r3, [r7, #-204]
 	cmp	r3, #0
-	beq	.L3186
-.L3182:
+	beq	.L3190
+.L3186:
 	ldr	r0, .L3196+12
 	bl	FtlSuperblockPowerLostFix
 	ldr	r0, .L3196+16
 	bl	FtlSuperblockPowerLostFix
-	ldrh	r1, [r4, #788]
-	ldr	r2, [r4, #768]
-	ldrh	r0, [r4, #792]
+	ldrh	r1, [r4, #836]
+	ldr	r2, [r4, #816]
+	ldrh	r0, [r4, #840]
 	ldrh	r3, [r2, r1, lsl #1]
 	subs	r3, r3, r0
 	strh	r3, [r2, r1, lsl #1]	@ movhi
-	ldr	r1, [r4, #768]
-	ldrh	r3, [r5, #2898]
-	ldrh	r0, [r4, #836]
-	ldrh	r7, [r4, #840]
-	strh	r3, [r4, #790]	@ movhi
+	ldr	r1, [r4, #816]
+	ldrh	r3, [r5, #2910]
+	ldrh	r0, [r4, #884]
+	ldrh	r7, [r4, #888]
+	strh	r3, [r4, #838]	@ movhi
 	movs	r3, #0
-	strb	r3, [r4, #794]
-	strh	r3, [r4, #792]	@ movhi
+	strb	r3, [r4, #842]
+	strh	r3, [r4, #840]	@ movhi
 	ldrh	r2, [r1, r0, lsl #1]
 	subs	r2, r2, r7
 	strh	r2, [r1, r0, lsl #1]	@ movhi
-	ldrh	r2, [r5, #2898]
+	ldrh	r2, [r5, #2910]
 	ldr	r0, .L3196+20
-	strb	r3, [r4, #842]
-	strh	r2, [r4, #838]	@ movhi
-	strh	r3, [r4, #840]	@ movhi
+	strb	r3, [r4, #890]
+	strh	r2, [r4, #886]	@ movhi
+	strh	r3, [r4, #888]	@ movhi
 	bl	FtlMapBlkWriteDumpData
 	ldr	r0, .L3196+24
 	bl	FtlMapBlkWriteDumpData
-	ldrh	r3, [r4, #1042]
+	ldrh	r3, [r4, #790]
 	adds	r3, r3, #1
-	strh	r3, [r4, #1042]	@ movhi
+	strh	r3, [r4, #790]	@ movhi
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	bl	FtlVpcTblFlush
-.L3186:
-	ldrh	r2, [r4, #788]
+.L3190:
+	ldrh	r2, [r4, #836]
 	movw	r3, #65535
 	ldr	r5, .L3196+8
 	cmp	r2, r3
-	bne	.L3187
-.L3189:
-	ldrh	r3, [r4, #1040]
-	lsls	r3, r3, #27
-	bne	.L3178
-	bl	FtlVpcCheckAndModify
-	b	.L3178
-.L3187:
-	ldrh	r3, [r5, #792]
-	cmp	r3, #0
-	bne	.L3189
+	beq	.L3191
 	ldrh	r3, [r5, #840]
-	cmp	r3, #0
-	bne	.L3189
+	cbnz	r3, .L3191
+	ldrh	r3, [r5, #888]
+	cbnz	r3, .L3191
 	bl	FtlVpcTblFlush
-	ldrh	r0, [r5, #788]
-	bl	FtlGcRefreshOpenBlock
 	ldrh	r0, [r5, #836]
 	bl	FtlGcRefreshOpenBlock
-	add	r0, r5, #788
-	bl	allocate_new_data_superblock
+	ldrh	r0, [r5, #884]
+	bl	FtlGcRefreshOpenBlock
 	add	r0, r5, #836
 	bl	allocate_new_data_superblock
-	addw	r0, r5, #4088
+	add	r0, r5, #884
+	bl	allocate_new_data_superblock
+	addw	r0, r5, #4092
 	bl	FtlMapBlkWriteDumpData
-	mov	r5, #4096
-.L3190:
-	movs	r0, #1
-	mov	r1, r0
-	bl	rk_ftl_garbage_collect
-	subs	r5, r5, #1
-	bne	.L3190
-	b	.L3189
-.L3178:
+.L3191:
+	ldrh	r3, [r4, #788]
+	lsls	r3, r3, #27
+	bne	.L3182
+	bl	FtlVpcCheckAndModify
+.L3182:
 	mov	r0, r6
 	pop	{r3, r4, r5, r6, r7, pc}
 .L3197:
@@ -19440,13 +19478,56 @@ FtlSysBlkInit:
 	.word	.LANCHOR0
 	.word	.LANCHOR4
 	.word	.LANCHOR2
-	.word	.LANCHOR2+788
 	.word	.LANCHOR2+836
-	.word	.LANCHOR2+1864
-	.word	.LANCHOR2+4088
+	.word	.LANCHOR2+884
+	.word	.LANCHOR2+1868
+	.word	.LANCHOR2+4092
 	.fnend
 	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	1
+	.global	Ftl_get_new_temp_ppa
+	.thumb
+	.thumb_func
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movw	r3, #65535
+	ldr	r4, .L3201
+	ldrh	r2, [r4, #932]
+	cmp	r2, r3
+	beq	.L3199
+	ldrh	r3, [r4, #936]
+	cbnz	r3, .L3200
+.L3199:
+	movs	r5, #0
+	bl	FtlCacheWriteBack
+	movs	r0, #0
+	bl	FtlGcFreeTempBlock
+	ldr	r0, .L3201+4
+	strb	r5, [r4, #940]
+	bl	allocate_data_superblock
+	strh	r5, [r4, #1680]	@ movhi
+	strh	r5, [r4, #1688]	@ movhi
+	bl	l2p_flush
+	mov	r0, r5
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L3200:
+	ldr	r0, .L3201+4
+	pop	{r3, r4, r5, lr}
+	b	get_new_active_ppa
+.L3202:
+	.align	2
+.L3201:
+	.word	.LANCHOR2
+	.word	.LANCHOR2+932
+	.fnend
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	1
 	.global	FtlInit
 	.thumb
 	.thumb_func
@@ -19457,76 +19538,75 @@ FtlInit:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
-	mov	r4, r0
-	ldr	r2, .L3212
 	mov	r3, #-1
-	ldr	r6, .L3212+4
-	ldr	r5, .L3212+8
-	ldr	r1, .L3212+12
-	ldr	r0, .L3212+16
+	ldr	r2, .L3217
+	ldr	r6, .L3217+4
+	ldr	r5, .L3217+8
+	ldr	r4, .L3217+12
+	ldr	r1, .L3217+16
+	ldr	r0, .L3217+20
 	str	r3, [r6, #504]
 	movs	r3, #0
-	str	r3, [r2, #-56]
-	str	r3, [r5, #740]
+	str	r3, [r2, #-52]
+	str	r3, [r5, #744]
 	bl	printk
-	mov	r0, r4
-	ldr	r4, .L3212+20
+	add	r0, r4, #1864
 	bl	FtlConstantsInit
 	bl	FtlMemInit
 	bl	FtlVariablesInit
-	ldrh	r0, [r4, #2832]
+	ldrh	r0, [r4, #2844]
 	bl	FtlFreeSysBlkQueueInit
 	bl	FtlLoadBbt
-	cbz	r0, .L3199
-	ldr	r0, .L3212+24
-	b	.L3211
-.L3199:
+	cbz	r0, .L3204
+	ldr	r0, .L3217+24
+	b	.L3216
+.L3204:
 	bl	FtlSysBlkInit
-	cbz	r0, .L3201
-	ldr	r0, .L3212+28
-.L3211:
-	ldr	r1, .L3212+32
+	cbz	r0, .L3206
+	ldr	r0, .L3217+28
+.L3216:
+	ldr	r1, .L3217+32
 	bl	printk
-	b	.L3200
-.L3201:
+	b	.L3205
+.L3206:
 	movs	r1, #1
 	str	r1, [r6, #504]
-	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r5, #784]
+	bl	ftl_do_gc
+	ldrh	r3, [r5, #832]
 	cmp	r3, #15
-	bhi	.L3202
+	bhi	.L3207
 	mov	r4, #1024
-.L3203:
+.L3208:
 	movs	r0, #1
 	mov	r1, r0
-	bl	rk_ftl_garbage_collect
+	bl	ftl_do_gc
 	subs	r4, r4, #1
-	bne	.L3203
-	b	.L3200
-.L3202:
+	bne	.L3208
+	b	.L3205
+.L3207:
 	ldrb	r3, [r4, #76]	@ zero_extendqisi2
-	cbz	r3, .L3200
+	cbz	r3, .L3205
 	movs	r4, #128
-.L3205:
+.L3210:
 	movs	r0, #1
 	mov	r1, r0
-	bl	rk_ftl_garbage_collect
+	bl	ftl_do_gc
 	subs	r4, r4, #1
-	bne	.L3205
-.L3200:
+	bne	.L3210
+.L3205:
 	movs	r0, #0
 	pop	{r4, r5, r6, pc}
-.L3213:
+.L3218:
 	.align	2
-.L3212:
+.L3217:
 	.word	.LANCHOR4
 	.word	.LANCHOR1
 	.word	.LANCHOR2
-	.word	.LC75
-	.word	.LC74
 	.word	.LANCHOR0
-	.word	.LC137
-	.word	.LC138
+	.word	.LC78
+	.word	.LC77
+	.word	.LC139
+	.word	.LC140
 	.word	.LANCHOR3+40
 	.fnend
 	.size	FtlInit, .-FtlInit
@@ -19543,54 +19623,179 @@ rk_ftl_init:
 	.save {r4, r5, r6, lr}
 	mov	r0, #2048
 	bl	ftl_malloc
-	ldr	r6, .L3218
-	ldr	r4, .L3218+4
+	ldr	r6, .L3223
+	ldr	r4, .L3223+4
 	movs	r5, #0
 	mov	r1, r6
-	str	r5, [r1, #-48]!
-	str	r5, [r4, #3980]
-	str	r0, [r6, #-52]
-	addw	r0, r4, #3980
+	str	r5, [r1, #-44]!
+	str	r5, [r4, #3984]
+	str	r0, [r6, #-48]
+	add	r0, r4, #3984
 	bl	rknand_get_reg_addr
-	ldr	r3, [r4, #3980]
-	cbz	r3, .L3217
+	ldr	r3, [r4, #3984]
+	cbz	r3, .L3222
 	bl	rk_nandc_irq_init
 	mov	r1, r5
 	mov	r2, r5
 	mov	r3, #2048
-	ldr	r0, [r6, #-52]
+	ldr	r0, [r6, #-48]
 	bl	FlashSramLoadStore
 	bl	rknand_flash_cs_init
-	ldr	r0, [r4, #3980]
+	ldr	r0, [r4, #3984]
 	bl	FlashInit
 	mov	r4, r0
-	cbnz	r0, .L3216
-	ldr	r0, .L3218+8
+	cbnz	r0, .L3221
 	bl	FtlInit
-.L3216:
+.L3221:
 	mov	r1, r4
-	ldr	r0, .L3218+12
+	ldr	r0, .L3223+8
 	bl	printk
 	mov	r0, r4
 	pop	{r4, r5, r6, pc}
-.L3217:
+.L3222:
 	mov	r0, #-1
 	pop	{r4, r5, r6, pc}
-.L3219:
+.L3224:
 	.align	2
-.L3218:
+.L3223:
 	.word	.LANCHOR4
 	.word	.LANCHOR2
-	.word	.LANCHOR0+1864
-	.word	.LC139
+	.word	.LC141
 	.fnend
 	.size	rk_ftl_init, .-rk_ftl_init
 	.align	1
-	.global	FtlRead
+	.global	ftl_fix_nand_power_lost_error
 	.thumb
 	.thumb_func
-	.type	FtlRead, %function
-FtlRead:
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3240
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #48
+	sub	sp, sp, #48
+	ldrb	r2, [r3, #76]	@ zero_extendqisi2
+	mov	r8, r3
+	cmp	r2, #0
+	beq	.L3225
+	ldr	r4, .L3240+4
+	movw	r7, #4097
+	ldr	r6, .L3240+8
+	ldr	r0, .L3240+12
+	ldr	r3, [r4, #816]
+	ldrh	r5, [r6, #-206]
+	mov	r1, r5
+	ldrh	r2, [r3, r5, lsl #1]
+	bl	printk
+	ldrh	r0, [r4, #836]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	r0, [r4, #884]
+	bl	FtlGcRefreshOpenBlock
+	add	r0, r4, #836
+	bl	allocate_new_data_superblock
+	add	r0, r4, #884
+	bl	allocate_new_data_superblock
+	lsl	r9, r5, #1
+.L3227:
+	subs	r7, r7, #1
+	beq	.L3231
+	movs	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	ldr	r3, [r4, #816]
+	ldrh	r3, [r3, r9]
+	cmp	r3, #0
+	bne	.L3227
+.L3231:
+	ldr	r3, [r4, #816]
+	mov	r1, r5
+	ldr	r0, .L3240+12
+	ldrh	r2, [r3, r5, lsl #1]
+	bl	printk
+	ldr	r3, [r4, #816]
+	ldrh	r7, [r3, r5, lsl #1]
+	cbnz	r7, .L3229
+	add	r0, sp, #48
+	mov	r10, #36
+	movw	r9, #65535
+	strh	r5, [r0, #-48]!	@ movhi
+	bl	make_superblock
+	ldr	r3, .L3240+4
+	ldrh	ip, [r8, #2840]
+	add	r0, sp, #14
+	ldr	r8, [r3, #748]
+	mov	r3, r7
+	mov	lr, r3
+.L3232:
+	uxth	r2, r3
+	cmp	r2, ip
+	bcs	.L3239
+	ldrh	r2, [r0, #2]!
+	cmp	r2, r9
+	beq	.L3233
+	mla	r1, r10, r7, r8
+	adds	r7, r7, #1
+	lsls	r2, r2, #10
+	uxth	r7, r7
+	str	r2, [r1, #4]
+	str	lr, [r1, #8]
+	str	lr, [r1, #12]
+.L3233:
+	adds	r3, r3, #1
+	b	.L3232
+.L3239:
+	ldr	r3, [r4, #816]
+	mov	r1, r5
+	ldr	r0, .L3240+16
+	ldrh	r2, [r3, r5, lsl #1]
+	bl	printk
+	movs	r1, #0
+	mov	r2, r7
+	ldr	r0, [r4, #748]
+	bl	FlashEraseBlocks
+	ldr	r0, [r4, #748]
+	movs	r1, #1
+	mov	r2, r7
+	bl	FlashEraseBlocks
+.L3229:
+	movw	r3, #65535
+	strh	r3, [r6, #-206]	@ movhi
+.L3225:
+	add	sp, sp, #48
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L3241:
+	.align	2
+.L3240:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LC142
+	.word	.LC143
+	.fnend
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.align	1
+	.global	rk_ftl_garbage_collect
+	.thumb
+	.thumb_func
+	.type	rk_ftl_garbage_collect, %function
+rk_ftl_garbage_collect:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_do_gc
+	.fnend
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	1
+	.global	ftl_read
+	.thumb
+	.thumb_func
+	.type	ftl_read, %function
+ftl_read:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 56
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -19602,98 +19807,98 @@ FtlRead:
 	mov	r6, r1
 	mov	r7, r3
 	str	r2, [sp, #16]
-	bne	.L3221
+	bne	.L3244
 	add	r0, r1, #256
 	mov	r1, r2
 	mov	r2, r3
 	bl	FtlVendorPartRead
-	b	.L3222
-.L3221:
+	b	.L3245
+.L3244:
 	ldr	r3, [sp, #16]
 	adds	r3, r1, r3
 	str	r3, [sp, #12]
-	ldr	r3, .L3261
+	ldr	r3, .L3284
 	ldr	r1, [sp, #12]
-	ldr	r2, [r3, #2940]
+	ldr	r2, [r3, #1896]
 	cmp	r1, r2
-	bhi	.L3242
-	ldrh	r4, [r3, #2904]
+	bhi	.L3265
+	ldrh	r4, [r3, #2916]
 	mov	r0, r6
 	mov	r1, r4
 	bl	__aeabi_uidiv
-	mov	r1, r4
 	ldr	r3, [sp, #12]
+	mov	r1, r4
 	str	r0, [sp, #4]
 	subs	r0, r3, #1
 	bl	__aeabi_uidiv
 	ldr	r3, [sp, #4]
 	ldr	r1, [sp, #16]
 	rsb	r3, r3, #1
-	str	r0, [sp, #8]
 	add	r3, r3, r0
 	str	r3, [sp]
-	ldr	r3, .L3261+4
+	ldr	r3, .L3284+4
+	str	r0, [sp, #8]
 	ldr	r0, [sp, #4]
-	ldr	r2, [r3, #980]
+	ldr	r2, [r3, #1024]
 	add	r2, r2, r1
 	ldr	r1, [sp]
-	str	r2, [r3, #980]
-	ldr	r2, [r3, #952]
+	str	r2, [r3, #1024]
+	ldr	r2, [r3, #996]
 	add	r2, r2, r1
 	ldr	r1, [sp, #8]
-	str	r2, [r3, #952]
+	str	r2, [r3, #996]
 	bl	FtlCacheMetchLpa
-	cbz	r0, .L3223
+	cbz	r0, .L3246
 	bl	FtlCacheWriteBack
-.L3223:
+.L3246:
 	mov	r9, #0
 	ldr	r4, [sp, #4]
-	ldr	r10, .L3261+4
-	ldr	r8, .L3261
+	ldr	r10, .L3284+4
+	ldr	r8, .L3284
 	mov	r5, r9
 	str	r9, [sp, #20]
 	str	r9, [sp, #24]
-.L3224:
+.L3247:
 	ldr	r3, [sp]
 	cmp	r3, #0
-	beq	.L3260
+	beq	.L3283
 	add	r1, sp, #52
 	movs	r2, #0
 	mov	r0, r4
 	bl	log2phys
 	ldr	r2, [sp, #52]
 	adds	r1, r2, #1
-	bne	.L3257
+	bne	.L3280
 	mov	fp, #0
-.L3225:
-	ldrh	r0, [r8, #2904]
+.L3248:
+	ldrh	r0, [r8, #2916]
 	cmp	fp, r0
-	bcs	.L3229
+	bcs	.L3252
 	mla	r0, r0, r4, fp
 	cmp	r0, r6
-	bcc	.L3227
+	bcc	.L3250
 	ldr	r3, [sp, #12]
 	cmp	r0, r3
-	bcs	.L3227
+	bcs	.L3250
 	subs	r0, r0, r6
 	mov	r1, #512
 	add	r0, r7, r0, lsl #9
 	bl	__memzero
-.L3227:
+.L3250:
 	add	fp, fp, #1
-	b	.L3225
-.L3257:
+	b	.L3248
+.L3280:
 	ldr	r1, [r10, #1764]
 	mov	fp, #36
 	ldr	r3, [sp, #4]
 	mla	fp, fp, r5, r1
 	cmp	r4, r3
 	str	r2, [fp, #4]
-	bne	.L3230
-	ldr	r2, [r10, #1788]
+	bne	.L3253
+	ldr	r2, [r10, #1792]
 	mov	r0, r6
 	str	r2, [fp, #8]
-	ldrh	r2, [r8, #2904]
+	ldrh	r2, [r8, #2916]
 	mov	r1, r2
 	str	r2, [sp, #20]
 	bl	__aeabi_uidivmod
@@ -19707,50 +19912,50 @@ FtlRead:
 	movcs	r3, r0
 	cmp	r3, r2
 	str	r3, [sp, #20]
-	bne	.L3231
+	bne	.L3254
 	str	r7, [fp, #8]
-	b	.L3231
-.L3230:
+	b	.L3254
+.L3253:
 	ldr	r3, [sp, #8]
 	cmp	r4, r3
-	bne	.L3232
-	ldr	r2, [r10, #1792]
-	ldrh	r1, [r8, #2904]
+	bne	.L3255
+	ldr	r2, [r10, #1796]
+	ldrh	r1, [r8, #2916]
 	ldr	r3, [sp, #12]
 	str	r2, [fp, #8]
 	mul	r2, r1, r4
 	rsb	r9, r2, r3
 	cmp	r9, r1
-	bne	.L3231
-	b	.L3258
-.L3232:
-	ldrh	r2, [r8, #2904]
+	bne	.L3254
+	b	.L3281
+.L3255:
+	ldrh	r2, [r8, #2916]
 	muls	r2, r4, r2
-.L3258:
+.L3281:
 	subs	r2, r2, r6
 	add	r2, r7, r2, lsl #9
 	str	r2, [fp, #8]
-.L3231:
-	ldrh	r2, [r8, #2910]
-	ldr	r1, [r10, #1800]
+.L3254:
+	ldrh	r2, [r8, #2922]
+	ldr	r1, [r10, #1804]
 	str	r4, [fp, #16]
 	muls	r2, r5, r2
 	adds	r5, r5, #1
 	bic	r2, r2, #3
 	add	r2, r2, r1
 	str	r2, [fp, #12]
-.L3229:
+.L3252:
 	ldr	r3, [sp]
 	adds	r4, r4, #1
 	subs	r3, r3, #1
 	str	r3, [sp]
-	beq	.L3233
-	ldrh	r2, [r8, #2828]
+	beq	.L3256
+	ldrh	r2, [r8, #2840]
 	cmp	r5, r2, lsl #3
-	bne	.L3224
-.L3233:
+	bne	.L3247
+.L3256:
 	cmp	r5, #0
-	beq	.L3224
+	beq	.L3247
 	ldr	r0, [r10, #1764]
 	mov	r1, r5
 	movs	r2, #0
@@ -19764,7 +19969,7 @@ FtlRead:
 	str	r3, [sp, #36]
 	lsl	r3, r9, #9
 	str	r3, [sp, #40]
-.L3239:
+.L3262:
 	movs	r3, #36
 	ldr	r2, [r10, #1764]
 	mul	ip, r3, fp
@@ -19772,86 +19977,99 @@ FtlRead:
 	add	r2, r2, ip
 	ldr	r1, [r2, #16]
 	cmp	r1, r3
-	bne	.L3235
+	bne	.L3258
 	ldr	r1, [r2, #8]
-	ldr	r2, [r10, #1788]
+	ldr	r2, [r10, #1792]
 	cmp	r1, r2
-	bne	.L3236
+	bne	.L3259
 	ldr	r3, [sp, #32]
 	mov	r0, r7
 	str	ip, [sp, #44]
 	add	r1, r1, r3
 	ldr	r2, [sp, #36]
-	b	.L3259
-.L3235:
+	b	.L3282
+.L3258:
 	ldr	r3, [sp, #8]
 	cmp	r1, r3
-	bne	.L3236
+	bne	.L3259
 	ldr	r1, [r2, #8]
-	ldr	r2, [r10, #1792]
+	ldr	r2, [r10, #1796]
 	cmp	r1, r2
-	bne	.L3236
-	ldrh	r0, [r8, #2904]
+	bne	.L3259
+	ldrh	r0, [r8, #2916]
 	ldr	r2, [sp, #40]
 	str	ip, [sp, #44]
 	muls	r0, r3, r0
 	subs	r0, r0, r6
 	add	r0, r7, r0, lsl #9
-.L3259:
+.L3282:
 	bl	ftl_memcpy
 	ldr	ip, [sp, #44]
-.L3236:
+.L3259:
 	ldr	r2, [r10, #1764]
 	add	lr, r2, ip
 	ldr	r0, [r2, ip]
 	adds	r3, r0, #1
 	itttt	eq
 	streq	r0, [sp, #24]
-	ldreq	r1, [r10, #1200]
+	ldreq	r1, [r10, #1196]
 	addeq	r1, r1, #1
-	streq	r1, [r10, #1200]
+	streq	r1, [r10, #1196]
 	ldr	r2, [r2, ip]
 	cmp	r2, #256
-	bne	.L3238
+	bne	.L3261
 	ldr	r0, [lr, #4]
 	ubfx	r0, r0, #10, #16
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-.L3238:
+.L3261:
 	add	fp, fp, #1
 	cmp	fp, r5
-	bne	.L3239
+	bne	.L3262
 	movs	r5, #0
-	b	.L3224
-.L3260:
-	ldr	r3, .L3261+4
-	ldrh	r3, [r3, #1698]
-	cbz	r3, .L3241
+	b	.L3247
+.L3283:
+	ldr	r3, .L3284+4
+	ldrh	r3, [r3, #1694]
+	cbz	r3, .L3264
 	ldr	r0, [sp]
 	movs	r1, #1
-	bl	rk_ftl_garbage_collect
-.L3241:
+	bl	ftl_do_gc
+.L3264:
 	ldr	r0, [sp, #24]
-	b	.L3222
-.L3242:
+	b	.L3245
+.L3265:
 	mov	r0, #-1
-.L3222:
+.L3245:
 	add	sp, sp, #60
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3262:
+.L3285:
 	.align	2
-.L3261:
+.L3284:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
-	.size	FtlRead, .-FtlRead
+	.size	ftl_read, .-ftl_read
 	.align	1
-	.global	FtlWrite
+	.global	FtlRead
 	.thumb
 	.thumb_func
-	.type	FtlWrite, %function
-FtlWrite:
+	.type	FtlRead, %function
+FtlRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_read
+	.fnend
+	.size	FtlRead, .-FtlRead
+	.align	1
+	.global	ftl_write
+	.thumb
+	.thumb_func
+	.type	ftl_write, %function
+ftl_write:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 88
 	@ frame_needed = 0, uses_anonymous_args = 0
@@ -19859,172 +20077,166 @@ FtlWrite:
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #92
 	sub	sp, sp, #92
-	ldr	r5, .L3334
+	ldr	r9, .L3356+12
 	mov	r8, r1
 	str	r3, [sp, #8]
-	mov	fp, r2
-	ldr	r3, [r5, #740]
+	str	r2, [sp, #4]
+	ldr	r3, [r9, #744]
 	cmp	r3, #0
-	bne	.L3305
+	bne	.L3328
 	cmp	r0, #16
-	bne	.L3265
+	bne	.L3289
 	add	r0, r1, #256
 	mov	r1, r2
 	ldr	r2, [sp, #8]
 	bl	FtlVendorPartWrite
-	b	.L3264
-.L3265:
-	ldr	r10, .L3334+8
-	adds	r7, r1, r2
-	ldr	r3, [r10, #2940]
-	cmp	r7, r3
-	bhi	.L3306
-	ldrh	r4, [r10, #2904]
+	b	.L3288
+.L3289:
+	ldr	r7, .L3356
+	ldr	r3, [sp, #4]
+	adds	r6, r1, r3
+	ldr	r3, [r7, #1896]
+	cmp	r6, r3
+	bhi	.L3329
+	ldrh	r4, [r7, #2916]
 	mov	r3, #2048
-	ldr	r6, .L3334+4
+	ldr	r5, .L3356+4
 	mov	r0, r1
 	mov	r1, r4
-	str	r3, [r6, #-44]
+	str	r3, [r5, #-40]
 	bl	__aeabi_uidiv
 	mov	r1, r4
-	str	r0, [sp, #4]
-	subs	r0, r7, #1
+	mov	fp, r0
+	subs	r0, r6, #1
 	bl	__aeabi_uidiv
-	cmp	fp, r4, lsl #1
-	add	r7, r5, #788
-	ldr	r2, [sp, #4]
+	rsb	r6, fp, r0
 	str	r0, [sp, #20]
-	rsb	r9, r2, r0
-	add	r3, r9, #1
+	adds	r3, r6, #1
 	str	r3, [sp, #12]
 	ldr	r2, [sp, #12]
-	ldr	r3, [r5, #960]
+	ldr	r3, [r9, #1004]
+	add	r3, r3, r2
+	ldr	r2, [sp, #4]
+	str	r3, [r9, #1004]
+	ldr	r3, [r9, #1020]
+	cmp	r2, r4, lsl #1
 	add	r3, r3, r2
-	ldr	r2, [r10, #2952]
-	str	r3, [r5, #960]
-	ldr	r3, [r5, #976]
-	add	r3, r3, fp
-	str	r3, [r5, #976]
+	str	r3, [r9, #1020]
+	mov	r3, r2
+	ldr	r2, [r7, #2960]
 	ite	cs
 	movcs	r3, #1
 	movcc	r3, #0
 	str	r3, [sp, #28]
-	add	r3, r5, #836
-	cmp	fp, #8
-	it	ls
-	movls	r7, r3
 	cmp	r2, #0
-	beq	.L3268
+	beq	.L3291
 	movs	r3, #36
-	ldr	r7, [r10, #2956]
+	ldr	r7, [r7, #2964]
 	muls	r3, r2, r3
-	ldr	r2, [sp, #4]
 	subs	r3, r3, #36
 	add	r7, r7, r3
 	ldr	r3, [r7, #16]
-	cmp	r2, r3
-	bne	.L3269
-	ldr	r3, [r5, #964]
+	cmp	fp, r3
+	bne	.L3292
+	ldr	r3, [r9, #1008]
 	mov	r1, r4
 	mov	r0, r8
 	adds	r3, r3, #1
-	str	r3, [r5, #964]
-	ldr	r3, [r6, #-40]
+	str	r3, [r9, #1008]
+	ldr	r3, [r5, #-36]
 	adds	r3, r3, #1
-	str	r3, [r6, #-40]
+	str	r3, [r5, #-36]
 	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #4]
 	ldr	r0, [r7, #8]
 	subs	r4, r4, r1
 	add	r0, r0, r1, lsl #9
-	cmp	r4, fp
+	cmp	r4, r3
 	ldr	r1, [sp, #8]
 	it	cs
-	movcs	r4, fp
-	lsls	r5, r4, #9
-	mov	r2, r5
+	movcs	r4, r3
+	lsl	r9, r4, #9
+	mov	r2, r9
 	bl	ftl_memcpy
-	cmp	r9, #0
-	bne	.L3270
-	ldr	r3, [r6, #-40]
+	cbnz	r6, .L3293
+	ldr	r3, [r5, #-36]
 	cmp	r3, #2
-	ble	.L3305
-.L3270:
-	ldr	r3, [sp, #8]
-	rsb	fp, r4, fp
-	add	r8, r8, r4
-	str	r9, [sp, #12]
-	add	r3, r3, r5
-	str	r3, [sp, #8]
+	ble	.L3328
+.L3293:
 	ldr	r3, [sp, #4]
-	adds	r3, r3, #1
+	add	r8, r8, r4
+	add	fp, fp, #1
+	str	r6, [sp, #12]
+	subs	r3, r3, r4
 	str	r3, [sp, #4]
-.L3269:
-	ldr	r3, .L3334+4
-	movs	r2, #0
-	ldr	r7, [r3, #-64]
-	str	r2, [r3, #-40]
-.L3268:
-	ldr	r0, [sp, #4]
+	ldr	r3, [sp, #8]
+	add	r3, r3, r9
+	str	r3, [sp, #8]
+.L3292:
+	movs	r3, #0
+	str	r3, [r5, #-36]
+.L3291:
+	mov	r0, fp
 	ldr	r1, [sp, #20]
 	bl	FtlCacheMetchLpa
-	cbz	r0, .L3271
+	cbz	r0, .L3294
 	bl	FtlCacheWriteBack
-.L3271:
-	ldr	r4, .L3334+8
-	ldr	r3, .L3334+4
-	ldr	r6, [sp, #4]
+.L3294:
+	ldr	r4, .L3356
+	mov	r6, fp
+	ldr	r7, .L3356+8
 	mov	r10, r4
-	str	r7, [r3, #-64]
-.L3272:
+	str	r7, [r5, #-60]
+.L3295:
 	ldr	r3, [sp, #12]
-	ldr	r5, .L3334
+	ldr	r5, .L3356+12
 	cmp	r3, #0
-	beq	.L3333
+	beq	.L3355
 	ldrh	r3, [r7, #4]
-	cbnz	r3, .L3273
-	add	r2, r5, #788
-	ldr	r9, .L3334+20
+	cbnz	r3, .L3296
+	add	r2, r5, #836
+	ldr	r9, .L3356+24
 	cmp	r7, r2
-	bne	.L3274
-	ldrh	r7, [r5, #840]
-	cbnz	r7, .L3275
-	add	r0, r5, #836
+	bne	.L3297
+	ldrh	r7, [r5, #888]
+	cbnz	r7, .L3298
+	add	r0, r5, #884
 	bl	allocate_new_data_superblock
-	str	r7, [r9, #3004]
-.L3275:
-	ldr	r0, .L3334+12
+	str	r7, [r9, #3068]
+.L3298:
+	ldr	r0, .L3356+8
 	bl	allocate_new_data_superblock
-	ldr	r3, [r9, #3004]
-	cbnz	r3, .L3308
-.L3277:
-	ldr	r7, .L3334+12
-	b	.L3276
-.L3274:
-	str	r3, [r9, #3004]
-	ldrh	r3, [r5, #792]
+	ldr	r3, [r9, #3068]
+	cbnz	r3, .L3330
+.L3300:
+	ldr	r7, .L3356+8
+	b	.L3299
+.L3297:
+	str	r3, [r9, #3068]
+	ldrh	r3, [r5, #840]
 	cmp	r3, #0
-	bne	.L3277
+	bne	.L3300
 	mov	r0, r7
 	bl	allocate_new_data_superblock
-	b	.L3276
-.L3308:
-	ldr	r7, .L3334+16
-.L3276:
+	b	.L3299
+.L3330:
+	ldr	r7, .L3356+16
+.L3299:
 	ldrh	r3, [r7, #4]
-	cbnz	r3, .L3278
+	cbnz	r3, .L3301
 	mov	r0, r7
 	bl	allocate_new_data_superblock
-.L3278:
-	ldr	r3, .L3334+4
-	str	r7, [r3, #-64]
-.L3273:
+.L3301:
+	ldr	r3, .L3356+4
+	str	r7, [r3, #-60]
+.L3296:
 	ldr	r2, [r5, #1760]
-	ldr	r3, [r4, #2952]
+	ldr	r3, [r4, #2960]
 	ldrh	ip, [r7, #4]
 	subs	r3, r2, r3
 	ldr	r2, [sp, #12]
 	cmp	ip, r3
-	ldr	r9, .L3334
+	ldr	r9, .L3356+12
 	it	cs
 	movcs	ip, r3
 	cmp	ip, r2
@@ -20034,27 +20246,28 @@ FtlWrite:
 	str	r3, [sp, #44]
 	movs	r3, #0
 	str	r3, [sp, #24]
-.L3279:
+.L3302:
 	ldr	r3, [sp, #24]
 	ldr	r2, [sp, #44]
 	cmp	r3, r2
-	beq	.L3280
+	beq	.L3303
 	ldrh	r3, [r7, #4]
 	cmp	r3, #0
-	beq	.L3280
+	beq	.L3303
 	ldr	r3, [sp, #28]
-	cbz	r3, .L3281
+	cbz	r3, .L3304
 	ldr	r3, [sp, #20]
 	cmp	r6, r3
-	bne	.L3281
+	bne	.L3304
 	ldr	r3, [sp, #24]
-	cbz	r3, .L3281
-	ldrh	r2, [r4, #2904]
-	add	r3, r8, fp
+	cbz	r3, .L3304
+	ldr	r3, [sp, #4]
+	ldrh	r2, [r4, #2916]
+	add	r3, r8, r3
 	mls	r3, r2, r6, r3
 	cmp	r3, r2
-	bne	.L3280
-.L3281:
+	bne	.L3303
+.L3304:
 	add	r1, sp, #48
 	movs	r2, #0
 	mov	r0, r6
@@ -20062,62 +20275,62 @@ FtlWrite:
 	bl	log2phys
 	mov	r0, r7
 	bl	get_new_active_ppa
-	ldr	r3, [r4, #2952]
-	ldr	r1, [r4, #2956]
-	ldrh	r2, [r4, #2910]
+	ldr	r3, [r4, #2960]
+	ldr	r1, [r4, #2964]
+	ldrh	r2, [r4, #2922]
 	mla	r1, r5, r3, r1
 	mul	ip, r3, r2
 	str	r6, [r1, #16]
 	str	r0, [r1, #4]
 	lsr	r0, ip, #2
 	str	r0, [sp, #36]
-	ldr	r0, [r9, #1804]
+	ldr	r0, [r9, #1808]
 	mov	lr, r0
 	str	r0, [sp, #40]
 	ldr	r0, [sp, #36]
 	add	r0, lr, r0, lsl #2
-	ldrh	lr, [r4, #2908]
+	ldrh	lr, [r4, #2920]
 	str	r0, [sp, #16]
 	str	r0, [r1, #12]
 	mul	r3, r3, lr
-	ldr	r0, [r9, #1784]
+	ldr	r0, [r9, #1788]
 	bic	r3, r3, #3
 	add	r3, r3, r0
 	ldr	r0, [sp, #16]
 	str	r3, [r1, #8]
 	movs	r1, #0
 	bl	ftl_memset
-	ldr	r3, [sp, #4]
-	cmp	r6, r3
-	beq	.L3282
+	cmp	r6, fp
+	beq	.L3305
 	ldr	r3, [sp, #20]
 	cmp	r6, r3
-	bne	.L3330
-	ldrh	r3, [r4, #2904]
-	add	r5, r8, fp
+	bne	.L3352
+	ldr	r3, [sp, #4]
+	add	r5, r8, r3
+	ldrh	r3, [r4, #2916]
 	smulbb	r3, r3, r6
 	subs	r5, r5, r3
 	movs	r3, #0
 	str	r3, [sp, #32]
 	uxth	r5, r5
-	b	.L3285
-.L3282:
-	ldrh	r5, [r4, #2904]
+	b	.L3308
+.L3305:
+	ldrh	r5, [r4, #2916]
 	mov	r0, r8
 	mov	r1, r5
 	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #4]
 	subs	r5, r5, r1
 	str	r1, [sp, #32]
-	cmp	r5, fp
+	cmp	r5, r3
 	it	cs
-	movcs	r5, fp
-.L3285:
-	ldrh	r3, [r4, #2904]
+	movcs	r5, r3
+.L3308:
+	ldrh	r3, [r4, #2916]
 	cmp	r5, r3
-	bne	.L3286
-	ldr	r3, [sp, #4]
+	bne	.L3309
+	cmp	r6, fp
 	mov	lr, #36
-	cmp	r6, r3
 	ittet	ne
 	mulne	r1, r6, r5
 	ldrne	r3, [sp, #8]
@@ -20126,37 +20339,28 @@ FtlWrite:
 	it	ne
 	addne	r1, r3, r1, lsl #9
 	ldr	r3, [sp, #28]
-	cbz	r3, .L3288
-	ldr	r2, [r10, #2952]
-	ldr	r5, [r10, #2956]
+	cbz	r3, .L3311
+	ldr	r2, [r10, #2960]
+	ldr	r5, [r10, #2964]
 	mla	r2, lr, r2, r5
 	str	r1, [r2, #8]
-	b	.L3289
-.L3288:
-	ldr	r0, [r10, #2956]
-	ldr	r3, [r10, #2952]
-	ldrh	r2, [r10, #2908]
+	b	.L3312
+.L3311:
+	ldr	r0, [r10, #2964]
+	ldr	r3, [r10, #2960]
+	ldrh	r2, [r10, #2920]
 	mla	r3, lr, r3, r0
 	ldr	r0, [r3, #8]
-	b	.L3331
-.L3335:
-	.align	2
-.L3334:
-	.word	.LANCHOR2
-	.word	.LANCHOR4
-	.word	.LANCHOR0
-	.word	.LANCHOR2+788
-	.word	.LANCHOR2+836
-	.word	.LANCHOR1
-.L3286:
+	b	.L3353
+.L3309:
 	ldr	r2, [sp, #48]
 	movs	r3, #36
 	adds	r1, r2, #1
-	beq	.L3290
-	ldr	r1, [r4, #2956]
+	beq	.L3313
+	ldr	r1, [r4, #2964]
 	add	r0, sp, #52
 	str	r2, [sp, #56]
-	ldr	r2, [r4, #2952]
+	ldr	r2, [r4, #2960]
 	str	r6, [sp, #68]
 	mla	r3, r3, r2, r1
 	movs	r1, #1
@@ -20168,98 +20372,107 @@ FtlWrite:
 	bl	FlashReadPages
 	ldr	r3, [sp, #52]
 	adds	r3, r3, #1
-	bne	.L3291
-	ldr	r3, [r9, #1200]
+	bne	.L3314
+	ldr	r3, [r9, #1196]
 	adds	r3, r3, #1
-	str	r3, [r9, #1200]
-	b	.L3293
-.L3291:
+	str	r3, [r9, #1196]
+	b	.L3316
+.L3314:
 	ldr	r3, [sp, #16]
 	ldr	r3, [r3, #8]
 	cmp	r3, r6
-	beq	.L3293
-	ldr	r3, [r9, #1200]
+	beq	.L3316
+	ldr	r3, [r9, #1196]
 	mov	r2, r6
-	ldr	r0, .L3336
+	ldr	r0, .L3356+20
 	adds	r3, r3, #1
-	str	r3, [r9, #1200]
+	str	r3, [r9, #1196]
 	ldr	r3, [sp, #16]
 	ldr	r1, [r3, #8]
 	bl	printk
-	b	.L3293
-.L3290:
-	ldr	r1, [r4, #2956]
-	ldr	r2, [r4, #2952]
+	b	.L3316
+.L3357:
+	.align	2
+.L3356:
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LANCHOR2+836
+	.word	.LANCHOR2
+	.word	.LANCHOR2+884
+	.word	.LC144
+	.word	.LANCHOR1
+.L3313:
+	ldr	r1, [r4, #2964]
+	ldr	r2, [r4, #2960]
 	mla	r2, r3, r2, r1
 	movs	r1, #0
 	ldr	r0, [r2, #8]
-	ldrh	r2, [r4, #2908]
+	ldrh	r2, [r4, #2920]
 	bl	ftl_memset
-.L3293:
-	ldr	r3, [sp, #4]
+.L3316:
+	cmp	r6, fp
 	mov	lr, #36
-	lsls	r2, r5, #9
-	cmp	r6, r3
-	bne	.L3294
-	ldr	r1, [r4, #2952]
-	ldr	r5, [r4, #2956]
+	lsl	r2, r5, #9
+	bne	.L3317
+	ldr	r1, [r4, #2960]
+	ldr	r5, [r4, #2964]
 	ldr	r3, [sp, #32]
 	mla	r1, lr, r1, r5
 	ldr	r0, [r1, #8]
 	ldr	r1, [sp, #8]
 	add	r0, r0, r3, lsl #9
-	b	.L3331
-.L3294:
-	ldr	r0, [r4, #2956]
-	ldr	r3, [r4, #2952]
-	ldrh	r1, [r4, #2904]
+	b	.L3353
+.L3317:
+	ldr	r0, [r4, #2964]
+	ldr	r3, [r4, #2960]
+	ldrh	r1, [r4, #2916]
 	mla	r3, lr, r3, r0
 	muls	r1, r6, r1
 	ldr	r0, [r3, #8]
 	rsb	r1, r8, r1
 	ldr	r3, [sp, #8]
 	add	r1, r3, r1, lsl #9
-	b	.L3331
-.L3330:
+	b	.L3353
+.L3352:
 	ldr	r3, [sp, #28]
-	cbz	r3, .L3295
-	ldr	r3, [r4, #2952]
-	ldr	r2, [r4, #2956]
+	cbz	r3, .L3318
+	ldr	r3, [r4, #2960]
+	ldr	r2, [r4, #2964]
 	mla	r5, r5, r3, r2
-	ldrh	r3, [r4, #2904]
+	ldrh	r3, [r4, #2916]
 	ldr	r2, [sp, #8]
 	muls	r3, r6, r3
 	rsb	r3, r8, r3
 	add	r3, r2, r3, lsl #9
 	str	r3, [r5, #8]
-	b	.L3289
-.L3295:
-	ldr	r2, [r4, #2956]
-	ldr	r3, [r4, #2952]
-	ldrh	r1, [r4, #2904]
+	b	.L3312
+.L3318:
+	ldr	r2, [r4, #2964]
+	ldr	r3, [r4, #2960]
+	ldrh	r1, [r4, #2916]
 	mla	r3, r5, r3, r2
-	ldrh	r2, [r4, #2908]
+	ldrh	r2, [r4, #2920]
 	muls	r1, r6, r1
 	ldr	r0, [r3, #8]
 	rsb	r1, r8, r1
 	ldr	r3, [sp, #8]
 	add	r1, r3, r1, lsl #9
-.L3331:
+.L3353:
 	bl	ftl_memcpy
-.L3289:
+.L3312:
 	ldr	r2, [sp, #40]
 	movw	r3, #61589
 	ldr	r1, [sp, #36]
 	strh	r3, [r2, r1, lsl #2]	@ movhi
 	ldr	r2, [sp, #16]
-	ldr	r3, [r9, #988]
+	ldr	r3, [r9, #1032]
 	str	r3, [r2, #4]
 	adds	r3, r3, #1
 	adds	r2, r3, #1
 	ldr	r2, [sp, #16]
 	it	eq
 	moveq	r3, #0
-	str	r3, [r9, #988]
+	str	r3, [r9, #1032]
 	ldr	r3, [sp, #16]
 	str	r6, [r3, #8]
 	adds	r6, r6, #1
@@ -20267,77 +20480,141 @@ FtlWrite:
 	str	r3, [r2, #12]
 	ldrh	r3, [r7]
 	strh	r3, [r2, #2]	@ movhi
-	ldr	r3, [r4, #2952]
+	ldr	r3, [r4, #2960]
 	adds	r3, r3, #1
-	str	r3, [r4, #2952]
+	str	r3, [r4, #2960]
 	ldr	r3, [sp, #24]
 	adds	r3, r3, #1
 	str	r3, [sp, #24]
-	b	.L3279
-.L3280:
+	b	.L3302
+.L3303:
 	ldr	r3, [sp, #12]
 	ldr	r2, [sp, #24]
 	subs	r3, r3, r2
 	str	r3, [sp, #12]
-	ldr	r3, .L3336+4
-	ldr	r2, [r10, #2952]
+	ldr	r3, .L3358
+	ldr	r2, [r10, #2960]
 	ldr	r3, [r3, #1760]
 	cmp	r2, r3
-	bcs	.L3299
+	bcs	.L3322
 	ldr	r3, [sp, #28]
-	cbnz	r3, .L3299
+	cbnz	r3, .L3322
 	ldrh	r3, [r7, #4]
-	cbz	r3, .L3299
-.L3301:
+	cbz	r3, .L3322
+.L3324:
 	movs	r3, #0
 	str	r3, [sp, #28]
-	b	.L3272
-.L3299:
+	b	.L3295
+.L3322:
 	bl	FtlCacheWriteBack
 	movs	r3, #0
-	str	r3, [r10, #2952]
+	str	r3, [r10, #2960]
 	ldr	r3, [sp, #12]
-	cmp	r3, #3
-	bls	.L3301
-	b	.L3272
-.L3333:
+	cmp	r3, #1
+	bhi	.L3295
+	b	.L3324
+.L3355:
 	mov	r0, r3
-	ldr	r2, [sp, #4]
 	ldr	r3, [sp, #20]
-	subs	r1, r3, r2
-	bl	rk_ftl_garbage_collect
-	ldrh	r3, [r5, #784]
+	rsb	r1, fp, r3
+	bl	ftl_do_gc
+	ldrh	r3, [r5, #832]
 	cmp	r3, #31
-	bhi	.L3305
+	bhi	.L3328
 	movs	r4, #16
 	movs	r3, #128
-	strh	r3, [r5, #1642]	@ movhi
-	strh	r3, [r5, #1640]	@ movhi
-.L3304:
+	strh	r3, [r5, #1638]	@ movhi
+	strh	r3, [r5, #1636]	@ movhi
+.L3327:
 	movs	r0, #0
 	movs	r1, #1
-	bl	rk_ftl_garbage_collect
-	ldr	r3, [r5, #740]
-	cbnz	r3, .L3305
+	bl	ftl_do_gc
+	ldr	r3, [r5, #744]
+	cbnz	r3, .L3328
 	subs	r4, r4, #1
-	bne	.L3304
-	b	.L3305
-.L3306:
+	bne	.L3327
+	b	.L3328
+.L3329:
 	mov	r0, #-1
-	b	.L3264
-.L3305:
+	b	.L3288
+.L3328:
 	movs	r0, #0
-.L3264:
+.L3288:
 	add	sp, sp, #92
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3337:
+.L3359:
 	.align	2
-.L3336:
-	.word	.LC140
+.L3358:
 	.word	.LANCHOR2
 	.fnend
-	.size	FtlWrite, .-FtlWrite
+	.size	ftl_write, .-ftl_write
+	.align	1
+	.global	ftl_vendor_write
+	.thumb
+	.thumb_func
+	.type	ftl_vendor_write, %function
+ftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r5, r0
+	mov	r4, r1
+	mov	r3, r2
+	mov	r1, r5
+	mov	r2, r4
+	movs	r0, #16
+	pop	{r4, r5, lr}
+	b	ftl_write
+	.fnend
+	.size	ftl_vendor_write, .-ftl_vendor_write
+	.align	1
+	.global	FlashBootVendorWrite
+	.thumb
+	.thumb_func
+	.type	FlashBootVendorWrite, %function
+FlashBootVendorWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, r5
+	mov	r0, r6
+	bl	ftl_vendor_write
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	pop	{r4, r5, r6, pc}
+	.fnend
+	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
+	.align	1
+	.global	ftl_sys_write
+	.thumb
+	.thumb_func
+	.type	ftl_sys_write, %function
+ftl_sys_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r1
+	mov	r3, r2
+	add	r1, r0, #256
+	mov	r2, r4
+	movs	r0, #16
+	pop	{r4, lr}
+	b	ftl_write
+	.fnend
+	.size	ftl_sys_write, .-ftl_sys_write
 	.align	1
 	.global	StorageSysDataStore
 	.thumb
@@ -20352,11 +20629,10 @@ StorageSysDataStore:
 	mov	r4, r1
 	mov	r5, r0
 	bl	rknand_device_lock
-	mov	r3, r4
-	add	r1, r5, #256
-	movs	r2, #1
-	movs	r0, #16
-	bl	FtlWrite
+	mov	r2, r4
+	movs	r1, #1
+	mov	r0, r5
+	bl	ftl_sys_write
 	mov	r4, r0
 	bl	rknand_device_unlock
 	mov	r0, r4
@@ -20364,6 +20640,19 @@ StorageSysDataStore:
 	.fnend
 	.size	StorageSysDataStore, .-StorageSysDataStore
 	.align	1
+	.global	FtlWrite
+	.thumb
+	.thumb_func
+	.type	FtlWrite, %function
+FtlWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_write
+	.fnend
+	.size	FtlWrite, .-FtlWrite
+	.align	1
 	.global	FlashReadFacBbtData
 	.thumb
 	.thumb_func
@@ -20372,7 +20661,7 @@ FlashReadFacBbtData:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 40
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3353
+	ldr	r3, .L3379
 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, lr}
 	mov	r8, r2
@@ -20383,20 +20672,20 @@ FlashReadFacBbtData:
 	sub	sp, sp, #40
 	mov	r5, r0
 	smulbb	r3, r2, r3
-	ldr	r2, .L3353+4
-	ldr	r1, [r2, #3984]
+	ldr	r2, .L3379+4
+	ldr	r1, [r2, #3988]
 	mov	r9, r2
 	uxth	r3, r3
 	subs	r6, r3, #1
 	str	r1, [sp, #12]
 	mul	r10, r3, r7
-	ldr	r1, [r2, #4016]
+	ldr	r1, [r2, #4020]
 	uxth	r6, r6
 	sub	r4, r3, #16
 	str	r1, [sp, #16]
-.L3340:
+.L3366:
 	cmp	r6, r4
-	ble	.L3352
+	ble	.L3378
 	movs	r1, #1
 	add	r3, r6, r10
 	add	r0, sp, #4
@@ -20406,62 +20695,62 @@ FlashReadFacBbtData:
 	bl	FlashReadPages
 	ldr	r3, [sp, #4]
 	adds	r3, r3, #1
-	beq	.L3341
-	ldr	r3, [r9, #4016]
+	beq	.L3367
+	ldr	r3, [r9, #4020]
 	ldrh	r2, [r3]
 	movw	r3, #61664
 	cmp	r2, r3
-	bne	.L3341
-	cbz	r5, .L3347
-	cbz	r7, .L3348
-.L3345:
-	ldr	r1, [r9, #3984]
+	bne	.L3367
+	cbz	r5, .L3373
+	cbz	r7, .L3374
+.L3371:
+	ldr	r1, [r9, #3988]
 	mov	r2, r8
 	mov	r0, r5
 	bl	ftl_memcpy
 	movs	r2, #4
-	ldr	r0, .L3353+8
+	ldr	r0, .L3379+8
 	mov	r1, r5
 	mov	r3, r2
 	bl	rknand_print_hex
 	movs	r0, #0
-	b	.L3342
-.L3348:
-	ldr	r6, .L3353+4
+	b	.L3368
+.L3374:
+	ldr	r6, .L3379+4
 	mov	lr, #1
-.L3343:
-	ldr	r2, [r9, #4004]
+.L3369:
+	ldr	r2, [r9, #4008]
 	uxth	r3, r7
 	adds	r7, r7, #1
 	cmp	r3, r2
-	bcs	.L3345
-	ldr	r2, [r6, #3984]
+	bcs	.L3371
+	ldr	r2, [r6, #3988]
 	lsrs	r1, r3, #5
 	and	r4, r3, #31
 	lsl	r3, lr, r4
 	ldr	r0, [r2, r1, lsl #2]
 	orrs	r3, r3, r0
 	str	r3, [r2, r1, lsl #2]
-	b	.L3343
-.L3341:
+	b	.L3369
+.L3367:
 	subs	r6, r6, #1
 	uxth	r6, r6
-	b	.L3340
-.L3352:
+	b	.L3366
+.L3378:
 	mov	r0, #-1
-	b	.L3342
-.L3347:
+	b	.L3368
+.L3373:
 	mov	r0, r5
-.L3342:
+.L3368:
 	add	sp, sp, #40
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L3354:
+.L3380:
 	.align	2
-.L3353:
+.L3379:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC141
+	.word	.LC145
 	.fnend
 	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
 	.align	1
@@ -20473,36 +20762,36 @@ FlashGetBadBlockList:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3365
+	ldr	r3, .L3391
 	push	{r4, r5, r6, r7, r8, lr}
 	.save {r4, r5, r6, r7, r8, lr}
 	mov	r5, r0
 	ldr	r3, [r3, #1788]
-	ldr	r6, .L3365+4
+	ldr	r6, .L3391+4
 	ldrb	r4, [r3, #13]	@ zero_extendqisi2
 	ldrh	r3, [r3, #14]
-	ldr	r0, [r6, #4012]
+	ldr	r0, [r6, #4016]
 	smulbb	r4, r4, r3
 	uxth	r4, r4
 	adds	r2, r4, #7
 	asrs	r2, r2, #3
 	bl	FlashReadFacBbtData
 	adds	r0, r0, #1
-	bne	.L3356
-.L3360:
+	bne	.L3382
+.L3386:
 	movs	r3, #0
-	b	.L3357
-.L3356:
+	b	.L3383
+.L3382:
 	movs	r1, #0
 	lsr	lr, r4, #4
 	mov	ip, #1
 	subs	r4, r4, #1
 	mov	r3, r1
-.L3358:
+.L3384:
 	uxth	r2, r1
 	cmp	r2, r4
-	bge	.L3357
-	ldr	r7, [r6, #4012]
+	bge	.L3383
+	ldr	r7, [r6, #4016]
 	lsrs	r0, r2, #5
 	and	r8, r2, #31
 	adds	r1, r1, #1
@@ -20514,16 +20803,16 @@ FlashGetBadBlockList:
 	addne	r0, r3, #1
 	uxthne	r3, r0
 	cmp	r3, lr
-	bcc	.L3358
-	b	.L3360
-.L3357:
+	bcc	.L3384
+	b	.L3386
+.L3383:
 	movw	r2, #65535
 	movs	r0, #0
 	strh	r2, [r5, r3, lsl #1]	@ movhi
 	pop	{r4, r5, r6, r7, r8, pc}
-.L3366:
+.L3392:
 	.align	2
-.L3365:
+.L3391:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
 	.fnend
@@ -20540,65 +20829,65 @@ FtlMakeBbt:
 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.pad #12
-	ldr	r4, .L3389
-	ldr	r5, [r4, #740]
+	ldr	r4, .L3415
+	ldr	r5, [r4, #744]
 	cmp	r5, #0
-	bne	.L3368
+	bne	.L3394
 	bl	FtlBbtMemInit
-	ldr	r7, .L3389+4
+	ldr	r7, .L3415+4
 	bl	FtlLoadFactoryBbt
 	mov	fp, r4
 	sub	r9, r7, #18
-	subw	r8, r7, #2996
-.L3369:
-	ldrh	r3, [r8, #2850]
-	ldr	r6, .L3389+8
+	subw	r8, r7, #3000
+.L3395:
+	ldrh	r3, [r8, #2862]
+	ldr	r6, .L3415+8
 	cmp	r5, r3
-	bcs	.L3387
+	bcs	.L3413
 	ldrh	r3, [r9, #2]!
 	movw	r2, #65535
-	ldr	r0, [r4, #756]
-	ldr	r10, [r4, #1796]
+	ldr	r0, [r4, #1776]
+	ldr	r10, [r4, #1800]
 	cmp	r3, r2
-	str	r0, [r4, #4056]
-	str	r10, [r4, #4060]
-	beq	.L3370
-	ldrh	ip, [r8, #2894]
+	str	r0, [r4, #4060]
+	str	r10, [r4, #4064]
+	beq	.L3396
+	ldrh	ip, [r8, #2906]
 	movs	r1, #1
-	ldr	r0, .L3389+12
+	ldr	r0, .L3415+12
 	mov	r2, r1
 	mla	ip, ip, r5, r3
 	lsl	r3, ip, #10
 	str	ip, [sp, #4]
-	str	r3, [fp, #4052]
+	str	r3, [fp, #4056]
 	bl	FlashReadPages
-	ldrh	r2, [r8, #2894]
+	ldrh	r2, [r8, #2906]
 	ldr	r0, [r7]
 	adds	r2, r2, #7
-	ldr	r1, [fp, #4056]
+	ldr	r1, [fp, #4060]
 	asrs	r2, r2, #3
 	bl	ftl_memcpy
 	ldr	ip, [sp, #4]
-	b	.L3371
-.L3370:
+	b	.L3397
+.L3396:
 	mov	r1, r5
 	bl	FlashGetBadBlockList
-	ldr	r0, [fp, #4056]
+	ldr	r0, [fp, #4060]
 	ldr	r1, [r7]
 	bl	FtlBbt2Bitmap
-	ldrh	r6, [r8, #2894]
-.L3373:
+	ldrh	r6, [r8, #2906]
+.L3399:
 	subs	r6, r6, #1
 	uxth	r6, r6
-.L3372:
-	ldr	r3, .L3389+8
-	ldrh	r0, [r3, #2894]
+.L3398:
+	ldr	r3, .L3415+8
+	ldrh	r0, [r3, #2906]
 	smlabb	r0, r0, r5, r6
 	uxth	r0, r0
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L3373
-	ldr	r0, [r4, #1796]
+	beq	.L3399
+	ldr	r0, [r4, #1800]
 	movs	r1, #16
 	strh	r6, [r9]	@ movhi
 	bl	__memzero
@@ -20607,125 +20896,125 @@ FtlMakeBbt:
 	movs	r3, #0
 	str	r3, [r10, #4]
 	ldrh	r3, [r9]
-	ldrh	ip, [r8, #2894]
-	ldrh	r2, [r4, #1860]
+	ldrh	ip, [r8, #2906]
+	ldrh	r2, [r4, #1864]
 	strh	r3, [r10, #2]	@ movhi
 	ldrh	r3, [r9]
 	ldr	r1, [r7]
 	lsls	r2, r2, #2
-	ldr	r0, [r4, #4056]
+	ldr	r0, [r4, #4060]
 	mla	ip, ip, r5, r3
 	lsl	r3, ip, #10
-	str	r3, [r4, #4052]
 	str	ip, [sp, #4]
+	str	r3, [r4, #4056]
 	bl	ftl_memcpy
 	movs	r1, #1
-	ldr	r0, .L3389+12
+	ldr	r0, .L3415+12
 	mov	r2, r1
 	bl	FlashEraseBlocks
 	movs	r1, #1
-	ldr	r0, .L3389+12
+	ldr	r0, .L3415+12
 	mov	r3, r1
 	mov	r2, r1
 	bl	FlashProgPages
-	ldr	r3, [r4, #4048]
-	adds	r3, r3, #1
+	ldr	r3, [r4, #4052]
 	ldr	ip, [sp, #4]
-	bne	.L3371
+	adds	r3, r3, #1
+	bne	.L3397
 	uxth	r0, ip
 	bl	FtlBbmMapBadBlock
-	b	.L3372
-.L3371:
+	b	.L3398
+.L3397:
 	uxth	r0, ip
 	adds	r5, r5, #1
 	bl	FtlBbmMapBadBlock
 	adds	r7, r7, #4
-	b	.L3369
-.L3387:
+	b	.L3395
+.L3413:
 	movs	r5, #0
-.L3376:
-	ldrh	r3, [r6, #2912]
+.L3402:
+	ldrh	r3, [r6, #2924]
 	uxth	r0, r5
-	ldr	r7, .L3389+8
+	ldr	r7, .L3415+8
 	adds	r5, r5, #1
 	cmp	r3, r0
-	bls	.L3388
+	bls	.L3414
 	bl	FtlBbmMapBadBlock
-	b	.L3376
-.L3388:
-	ldrh	r5, [r7, #2980]
+	b	.L3402
+.L3414:
+	ldrh	r5, [r7, #2984]
 	movw	r8, #65535
 	subs	r5, r5, #1
 	uxth	r5, r5
-.L3378:
-	ldrh	r3, [r6, #2980]
+.L3404:
+	ldrh	r3, [r6, #2984]
 	subs	r3, r3, #48
 	cmp	r5, r3
-	ble	.L3382
+	ble	.L3408
 	mov	r0, r5
 	bl	FtlBbmIsBadBlock
 	cmp	r0, #1
-	beq	.L3379
+	beq	.L3405
 	mov	r0, r5
 	bl	FlashTestBlk
-	cbz	r0, .L3380
+	cbz	r0, .L3406
 	mov	r0, r5
 	bl	FtlBbmMapBadBlock
-	b	.L3379
-.L3380:
-	ldrh	r3, [r7, #2968]
+	b	.L3405
+.L3406:
+	ldrh	r3, [r7, #2972]
 	cmp	r3, r8
-	bne	.L3381
-	strh	r5, [r7, #2968]	@ movhi
-	b	.L3379
-.L3381:
-	ldr	r3, .L3389+8
-	strh	r5, [r3, #2972]	@ movhi
-	b	.L3382
-.L3379:
+	bne	.L3407
+	strh	r5, [r7, #2972]	@ movhi
+	b	.L3405
+.L3407:
+	ldr	r3, .L3415+8
+	strh	r5, [r3, #2976]	@ movhi
+	b	.L3408
+.L3405:
 	subs	r5, r5, #1
 	uxth	r5, r5
-	b	.L3378
-.L3382:
-	ldr	r0, [r4, #744]
+	b	.L3404
+.L3408:
+	ldr	r0, [r4, #748]
 	movs	r5, #0
-	ldrh	r3, [r6, #2968]
+	ldrh	r3, [r6, #2972]
 	movs	r2, #2
-	str	r5, [r6, #2976]
+	str	r5, [r6, #2980]
 	movs	r1, #1
-	strh	r5, [r6, #2970]	@ movhi
+	strh	r5, [r6, #2974]	@ movhi
 	lsls	r3, r3, #10
 	str	r3, [r0, #4]
-	ldrh	r3, [r6, #2972]
+	ldrh	r3, [r6, #2976]
 	lsls	r3, r3, #10
 	str	r3, [r0, #40]
 	bl	FlashEraseBlocks
-	ldrh	r0, [r6, #2968]
-	bl	FtlBbmMapBadBlock
 	ldrh	r0, [r6, #2972]
 	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r6, #2976]
+	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-	ldr	r3, [r6, #2976]
-	ldrh	r2, [r6, #2972]
+	ldr	r3, [r6, #2980]
+	ldrh	r2, [r6, #2976]
 	adds	r3, r3, #1
-	str	r3, [r6, #2976]
-	ldrh	r3, [r6, #2968]
-	strh	r5, [r6, #2970]	@ movhi
-	strh	r2, [r6, #2968]	@ movhi
-	strh	r3, [r6, #2972]	@ movhi
+	str	r3, [r6, #2980]
+	ldrh	r3, [r6, #2972]
+	strh	r5, [r6, #2974]	@ movhi
+	strh	r2, [r6, #2972]	@ movhi
+	strh	r3, [r6, #2976]	@ movhi
 	bl	FtlBbmTblFlush
-.L3368:
+.L3394:
 	movs	r0, #0
 	add	sp, sp, #12
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3390:
+.L3416:
 	.align	2
-.L3389:
+.L3415:
 	.word	.LANCHOR2
-	.word	.LANCHOR0+2996
+	.word	.LANCHOR0+3000
 	.word	.LANCHOR0
-	.word	.LANCHOR2+4048
+	.word	.LANCHOR2+4052
 	.fnend
 	.size	FtlMakeBbt, .-FtlMakeBbt
 	.align	1
@@ -20739,43 +21028,53 @@ FtlLowFormat:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	ldr	r4, .L3425
-	ldr	r3, [r4, #740]
-	cmp	r3, #0
-	bne	.L3393
-	ldr	r5, .L3425+4
-	str	r3, [r4, #984]
-	str	r3, [r4, #988]
-	ldrh	r0, [r5, #2832]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cbz	r0, .L3394
-	bl	FtlMakeBbt
-.L3394:
-	ldr	r0, .L3425+8
-	movs	r2, #0
-.L3395:
-	ldrh	r1, [r5, #2904]
-	uxth	r3, r2
-	adds	r2, r2, #1
+	ldr	r4, .L3451
+	ldr	r6, [r4, #744]
+	cmp	r6, #0
+	bne	.L3419
+	ldr	r5, .L3451+4
+	mov	r1, r6
+	ldr	r0, [r4, #1852]
+	ldrh	r2, [r5, #2948]
+	lsls	r2, r2, #2
+	bl	ftl_memset
+	ldrh	r2, [r5, #2948]
+	mov	r1, r6
+	ldr	r0, [r4, #1848]
+	lsls	r2, r2, #2
+	bl	ftl_memset
+	ldrh	r0, [r5, #2844]
+	str	r6, [r4, #1028]
+	str	r6, [r4, #1032]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	r0, .L3420
+	bl	FtlMakeBbt
+.L3420:
+	ldr	r0, .L3451+8
+	movs	r2, #0
+.L3421:
+	ldrh	r1, [r5, #2916]
+	uxth	r3, r2
+	adds	r2, r2, #1
 	cmp	r3, r1, lsl #7
-	bge	.L3422
-	ldr	r6, [r4, #1788]
+	bge	.L3448
+	ldr	r6, [r4, #1792]
 	mvns	r1, r3
 	orr	r1, r3, r1, lsl #16
 	str	r1, [r6, r3, lsl #2]
-	ldr	r1, [r4, #1792]
+	ldr	r1, [r4, #1796]
 	str	r0, [r1, r3, lsl #2]
-	b	.L3395
-.L3422:
-	ldr	r3, .L3425+4
+	b	.L3421
+.L3448:
+	ldr	r3, .L3451+4
 	movs	r6, #0
-	ldrh	r7, [r3, #2836]
-.L3397:
-	ldrh	r3, [r5, #2838]
-	ldr	r8, .L3425+4
+	ldrh	r7, [r3, #2848]
+.L3423:
+	ldrh	r3, [r5, #2850]
+	ldr	r8, .L3451+4
 	cmp	r3, r7
-	bls	.L3423
+	bls	.L3449
 	mov	r0, r7
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
@@ -20783,223 +21082,222 @@ FtlLowFormat:
 	uxth	r7, r7
 	add	r0, r0, r6
 	uxth	r6, r0
-	b	.L3397
-.L3423:
-	ldrh	r1, [r8, #2828]
+	b	.L3423
+.L3449:
+	ldrh	r1, [r8, #2840]
 	subs	r3, r6, #3
 	cmp	r3, r1, lsl #1
-	bge	.L3399
-.L3403:
+	bge	.L3425
+.L3429:
 	movs	r6, #0
 	mov	r7, r6
-	b	.L3400
-.L3399:
+	b	.L3426
+.L3425:
 	mov	r0, r6
 	bl	__aeabi_uidiv
-	ldr	r3, [r8, #2932]
+	ldr	r3, [r8, #2944]
 	add	r0, r0, r3
 	uxth	r0, r0
 	bl	FtlSysBlkNumInit
-	ldrh	r0, [r8, #2832]
+	ldrh	r0, [r8, #2844]
 	bl	FtlFreeSysBlkQueueInit
-	ldrh	r6, [r8, #2836]
-.L3401:
-	ldrh	r3, [r5, #2838]
+	ldrh	r6, [r8, #2848]
+.L3427:
+	ldrh	r3, [r5, #2850]
 	cmp	r3, r6
-	bls	.L3403
+	bls	.L3429
 	mov	r0, r6
 	adds	r6, r6, #1
 	movs	r1, #1
 	bl	FtlLowFormatEraseBlock
 	uxth	r6, r6
-	b	.L3401
-.L3400:
-	ldrh	r3, [r5, #2836]
+	b	.L3427
+.L3426:
+	ldrh	r3, [r5, #2848]
 	uxth	r0, r6
-	ldr	r10, .L3425+4
+	ldr	r10, .L3451+4
 	adds	r6, r6, #1
 	cmp	r3, r0
-	bls	.L3424
+	bls	.L3450
 	movs	r1, #0
 	bl	FtlLowFormatEraseBlock
 	add	r0, r0, r7
 	uxth	r7, r0
-	b	.L3400
-.L3424:
-	ldrh	r3, [r10, #2838]
-	ldrh	r6, [r10, #2828]
-	ldr	fp, [r10, #2840]
-	str	r3, [r10, #2964]
+	b	.L3426
+.L3450:
+	ldrh	r3, [r10, #2850]
+	ldrh	r6, [r10, #2840]
+	ldr	fp, [r10, #2852]
+	str	r3, [r4, #1752]
 	mov	r1, r6
 	mov	r0, fp
 	bl	__aeabi_uidiv
 	ubfx	r8, r0, #5, #16
 	mov	r9, r0
 	add	r3, r8, #36
-	strh	r3, [r4, #1060]	@ movhi
+	strh	r3, [r4, #1056]	@ movhi
 	movs	r3, #24
-	str	r0, [r10, #2960]
+	str	r0, [r10, #2968]
 	muls	r3, r6, r3
 	cmp	r7, r3
-	ble	.L3405
+	ble	.L3431
 	rsb	r0, r7, fp
 	mov	r1, r6
 	bl	__aeabi_uidiv
-	ldr	r3, .L3425
-	str	r0, [r10, #2960]
+	ldr	r3, .L3451
+	str	r0, [r10, #2968]
 	lsrs	r0, r0, #5
 	adds	r0, r0, #24
-	strh	r0, [r3, #1060]	@ movhi
-.L3405:
-	ldr	r3, [r4, #948]
-	ldr	fp, .L3425
+	strh	r0, [r3, #1056]	@ movhi
+.L3431:
+	ldr	r3, [r5, #2832]
 	cmp	r3, #1
-	bne	.L3406
+	bne	.L3432
 	mov	r0, r7
 	mov	r1, r6
 	bl	__aeabi_uidiv
-	ldrh	r10, [fp, #1060]
+	ldrh	r10, [r4, #1056]
 	uxtah	r0, r10, r0
 	add	r10, r10, r0, asr #2
-	strh	r10, [fp, #1060]	@ movhi
-.L3406:
+	strh	r10, [r4, #1056]	@ movhi
+.L3432:
 	ldrb	r3, [r5, #76]	@ zero_extendqisi2
-	cbz	r3, .L3407
+	cbz	r3, .L3433
 	mov	r0, r7
 	mov	r1, r6
 	bl	__aeabi_uidiv
-	ldrh	r10, [r4, #1060]
+	ldrh	r10, [r4, #1056]
 	uxtah	r0, r10, r0
 	add	r10, r10, r0, asr #2
-	strh	r10, [r4, #1060]	@ movhi
-.L3407:
-	ldrh	r3, [r5, #2890]
-	cbz	r3, .L3409
-	ldrh	r2, [r4, #1060]
+	strh	r10, [r4, #1056]	@ movhi
+.L3433:
+	ldrh	r3, [r5, #2902]
+	cbz	r3, .L3435
+	ldrh	r2, [r4, #1056]
 	add	r2, r2, r3, lsr #1
-	strh	r2, [r4, #1060]	@ movhi
+	strh	r2, [r4, #1056]	@ movhi
 	mul	r2, r6, r3
 	cmp	r2, r7
 	itttt	gt
 	addgt	r3, r3, #32
-	ldrgt	r2, .L3425+4
+	ldrgt	r2, .L3451+4
 	addgt	r3, r3, r8
-	strgt	r9, [r2, #2960]
+	strgt	r9, [r2, #2968]
 	itt	gt
-	ldrgt	r2, .L3425
-	strhgt	r3, [r2, #1060]	@ movhi
-.L3409:
-	ldrh	r2, [r4, #1060]
-	ldr	r3, [r5, #2960]
-	ldr	r7, .L3425
+	ldrgt	r2, .L3451
+	strhgt	r3, [r2, #1056]	@ movhi
+.L3435:
+	ldrh	r2, [r4, #1056]
+	ldr	r3, [r5, #2968]
+	ldr	r7, .L3451
 	subs	r3, r3, r2
 	muls	r6, r3, r6
-	ldrh	r3, [r5, #2898]
-	str	r6, [r4, #4084]
+	ldrh	r3, [r5, #2910]
+	str	r6, [r4, #4088]
 	muls	r6, r3, r6
-	ldrh	r3, [r5, #2904]
-	str	r6, [r5, #2960]
+	ldrh	r3, [r5, #2916]
+	str	r6, [r5, #2968]
 	muls	r6, r3, r6
-	str	r6, [r5, #2940]
+	str	r6, [r5, #1896]
 	bl	FtlBbmTblFlush
-	ldrh	r2, [r5, #2838]
+	ldrh	r2, [r5, #2850]
 	movs	r1, #0
-	ldr	r0, [r4, #768]
+	ldr	r0, [r4, #816]
 	movw	r6, #65535
 	lsls	r2, r2, #1
 	bl	ftl_memset
-	ldrh	r2, [r5, #2836]
-	ldr	r0, [r4, #944]
+	ldrh	r2, [r5, #2848]
+	ldr	r0, [r4, #992]
 	movs	r1, #255
 	movs	r3, #0
-	strh	r6, [r4, #1076]	@ movhi
+	strh	r6, [r4, #1072]	@ movhi
 	lsrs	r2, r2, #3
-	str	r3, [r4, #940]
-	strh	r3, [r4, #1078]	@ movhi
-	strb	r3, [r4, #1082]
-	strb	r3, [r4, #1084]
-	strh	r3, [r4, #790]	@ movhi
-	strb	r3, [r4, #794]
-	strh	r3, [r4, #788]	@ movhi
+	str	r3, [r4, #988]
+	strh	r3, [r4, #1074]	@ movhi
+	strb	r3, [r4, #1078]
+	strb	r3, [r4, #1080]
+	strh	r3, [r4, #838]	@ movhi
+	strb	r3, [r4, #842]
+	strh	r3, [r4, #836]	@ movhi
 	movs	r3, #1
-	strb	r3, [r4, #796]
+	strb	r3, [r4, #844]
 	bl	ftl_memset
-.L3411:
-	ldr	r5, .L3425
-	add	r0, r5, #788
+.L3437:
+	ldr	r5, .L3451
+	add	r0, r5, #836
 	bl	make_superblock
-	ldrb	r3, [r4, #795]	@ zero_extendqisi2
-	ldrh	r2, [r4, #788]
-	cbnz	r3, .L3412
-	ldr	r3, [r7, #768]
+	ldrb	r3, [r4, #843]	@ zero_extendqisi2
+	ldrh	r2, [r4, #836]
+	cbnz	r3, .L3438
+	ldr	r3, [r7, #816]
 	strh	r6, [r3, r2, lsl #1]	@ movhi
-	ldrh	r3, [r7, #788]
+	ldrh	r3, [r7, #836]
 	adds	r3, r3, #1
-	strh	r3, [r7, #788]	@ movhi
-	b	.L3411
-.L3412:
-	ldr	r3, [r5, #984]
+	strh	r3, [r7, #836]	@ movhi
+	b	.L3437
+.L3438:
+	ldr	r3, [r5, #1028]
 	movw	r7, #65535
-	ldrh	r1, [r5, #792]
-	str	r3, [r5, #800]
+	ldrh	r1, [r5, #840]
+	str	r3, [r5, #848]
 	adds	r3, r3, #1
-	str	r3, [r5, #984]
-	ldr	r3, [r5, #768]
+	str	r3, [r5, #1028]
+	ldr	r3, [r5, #816]
 	strh	r1, [r3, r2, lsl #1]	@ movhi
 	movs	r3, #0
-	strh	r3, [r5, #838]	@ movhi
-	strb	r3, [r5, #842]
-	ldrh	r3, [r5, #788]
+	strh	r3, [r5, #886]	@ movhi
+	strb	r3, [r5, #890]
+	ldrh	r3, [r5, #836]
 	adds	r3, r3, #1
-	strh	r3, [r5, #836]	@ movhi
+	strh	r3, [r5, #884]	@ movhi
 	movs	r3, #1
-	strb	r3, [r5, #844]
-.L3413:
-	ldr	r6, .L3425
-	add	r0, r6, #836
+	strb	r3, [r5, #892]
+.L3439:
+	ldr	r6, .L3451
+	add	r0, r6, #884
 	bl	make_superblock
-	ldrb	r3, [r4, #843]	@ zero_extendqisi2
-	ldrh	r2, [r4, #836]
-	cbnz	r3, .L3414
-	ldr	r3, [r5, #768]
+	ldrb	r3, [r4, #891]	@ zero_extendqisi2
+	ldrh	r2, [r4, #884]
+	cbnz	r3, .L3440
+	ldr	r3, [r5, #816]
 	strh	r7, [r3, r2, lsl #1]	@ movhi
-	ldrh	r3, [r5, #836]
+	ldrh	r3, [r5, #884]
 	adds	r3, r3, #1
-	strh	r3, [r5, #836]	@ movhi
-	b	.L3413
-.L3414:
-	ldr	r3, [r6, #984]
+	strh	r3, [r5, #884]	@ movhi
+	b	.L3439
+.L3440:
+	ldr	r3, [r6, #1028]
 	movw	r4, #65535
-	ldrh	r1, [r6, #840]
-	str	r3, [r6, #848]
+	ldrh	r1, [r6, #888]
+	str	r3, [r6, #896]
 	adds	r3, r3, #1
-	str	r3, [r6, #984]
-	ldr	r3, [r6, #768]
+	str	r3, [r6, #1028]
+	ldr	r3, [r6, #816]
 	strh	r1, [r3, r2, lsl #1]	@ movhi
-	strh	r4, [r6, #884]	@ movhi
+	strh	r4, [r6, #932]	@ movhi
 	bl	FtlFreeSysBlkQueueOut
 	movs	r3, #0
+	strh	r3, [r6, #1062]	@ movhi
+	ldr	r3, [r6, #4088]
+	strh	r4, [r6, #1064]	@ movhi
 	strh	r3, [r6, #1066]	@ movhi
-	ldr	r3, [r6, #4084]
-	strh	r4, [r6, #1068]	@ movhi
-	strh	r3, [r6, #1070]	@ movhi
-	ldr	r3, [r6, #984]
-	str	r3, [r6, #1072]
+	ldr	r3, [r6, #1028]
+	str	r3, [r6, #1068]
 	adds	r3, r3, #1
-	str	r3, [r6, #984]
-	strh	r0, [r6, #1064]	@ movhi
+	str	r3, [r6, #1028]
+	strh	r0, [r6, #1060]	@ movhi
 	bl	FtlVpcTblFlush
 	bl	FtlSysBlkInit
-	cbnz	r0, .L3393
-	ldr	r3, .L3425+12
+	cbnz	r0, .L3419
+	ldr	r3, .L3451+12
 	movs	r2, #1
 	str	r2, [r3, #504]
-.L3393:
+.L3419:
 	movs	r0, #0
 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3426:
+.L3452:
 	.align	2
-.L3425:
+.L3451:
 	.word	.LANCHOR2
 	.word	.LANCHOR0
 	.word	168778952
@@ -21018,34 +21316,34 @@ FtlReInitForSDUpdata:
 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
 	.pad #16
-	ldr	r4, .L3456
+	ldr	r4, .L3481
 	ldrb	r3, [r4, #76]	@ zero_extendqisi2
-	cbz	r3, .L3428
-.L3430:
+	cbz	r3, .L3454
+.L3456:
 	movs	r0, #0
-	b	.L3429
-.L3428:
-	ldr	r5, .L3456+4
-	ldr	r0, [r5, #3980]
+	b	.L3455
+.L3454:
+	ldr	r5, .L3481+4
+	ldr	r0, [r5, #3984]
 	bl	FlashInit
 	cmp	r0, #0
-	bne	.L3430
+	bne	.L3456
 	bl	FlashLoadFactorBbt
-	cbz	r0, .L3431
+	cbz	r0, .L3457
 	bl	FlashMakeFactorBbt
-.L3431:
-	ldr	r0, [r5, #4012]
+.L3457:
+	ldr	r0, [r5, #4016]
 	bl	FlashReadIdbDataRaw
-	cbz	r0, .L3432
+	cbz	r0, .L3458
 	movs	r1, #0
 	movs	r2, #16
 	mov	r0, sp
 	movs	r6, #1
 	bl	FlashReadFacBbtData
 	movs	r3, #0
-	mov	r2, r3
 	ldr	r1, [sp]
-.L3433:
+	mov	r2, r3
+.L3459:
 	lsl	r5, r6, r2
 	adds	r0, r3, #1
 	tst	r5, r1
@@ -21053,12 +21351,12 @@ FtlReInitForSDUpdata:
 	it	ne
 	movne	r3, r0
 	cmp	r2, #16
-	bne	.L3433
+	bne	.L3459
 	cmp	r3, #6
-	bls	.L3452
+	bls	.L3477
 	movs	r2, #0
 	movs	r6, #1
-.L3436:
+.L3462:
 	lsl	r5, r6, r2
 	adds	r0, r3, #1
 	tst	r5, r1
@@ -21066,58 +21364,58 @@ FtlReInitForSDUpdata:
 	it	ne
 	movne	r3, r0
 	cmp	r2, #24
-	bne	.L3436
+	bne	.L3462
 	cmp	r3, #17
-	bhi	.L3437
-.L3452:
+	bhi	.L3463
+.L3477:
 	strb	r2, [r4, #1]
-	b	.L3435
-.L3437:
+	b	.L3461
+.L3463:
 	movs	r3, #36
 	strb	r3, [r4, #1]
-.L3435:
+.L3461:
 	ldrb	r3, [r4, #1]	@ zero_extendqisi2
 	strh	r3, [r4, #1890]	@ movhi
-.L3432:
-	ldr	r1, .L3456+8
-	ldr	r0, .L3456+12
+.L3458:
+	ldr	r1, .L3481+8
+	ldr	r0, .L3481+12
 	bl	printk
-	ldr	r0, .L3456+16
+	ldr	r0, .L3481+16
 	bl	FtlConstantsInit
 	bl	FtlVariablesInit
-	ldrh	r0, [r4, #2832]
+	ldrh	r0, [r4, #2844]
 	bl	FtlFreeSysBlkQueueInit
 	movs	r4, #1
-.L3438:
+.L3464:
 	bl	FtlLoadBbt
-	cbz	r0, .L3439
-.L3454:
+	cbz	r0, .L3465
+.L3479:
 	bl	FtlLowFormat
 	cmp	r4, #3
-	bhi	.L3455
+	bhi	.L3480
 	adds	r4, r4, #1
-	b	.L3438
-.L3455:
+	b	.L3464
+.L3480:
 	mov	r0, #-1
-	b	.L3429
-.L3439:
+	b	.L3455
+.L3465:
 	bl	FtlSysBlkInit
 	cmp	r0, #0
-	bne	.L3454
-	ldr	r3, .L3456+20
+	bne	.L3479
+	ldr	r3, .L3481+20
 	movs	r2, #1
 	str	r2, [r3, #504]
-.L3429:
+.L3455:
 	add	sp, sp, #16
 	@ sp needed
 	pop	{r4, r5, r6, pc}
-.L3457:
+.L3482:
 	.align	2
-.L3456:
+.L3481:
 	.word	.LANCHOR0
 	.word	.LANCHOR2
-	.word	.LC75
-	.word	.LC74
+	.word	.LC78
+	.word	.LC77
 	.word	.LANCHOR0+1864
 	.word	.LANCHOR1
 	.fnend
@@ -21132,17 +21430,17 @@ flash_boot_enter_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L3460
-	ldr	r2, [r3, #2772]
-	ldr	r3, .L3460+4
+	ldr	r3, .L3485
+	ldr	r2, [r3, #2768]
+	ldr	r3, .L3485+4
 	cmp	r2, r3
-	bne	.L3458
+	bne	.L3483
 	b	flash_enter_slc_mode
-.L3458:
+.L3483:
 	bx	lr
-.L3461:
+.L3486:
 	.align	2
-.L3460:
+.L3485:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
@@ -21157,438 +21455,493 @@ flash_boot_exit_slc_mode:
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
 	@ link register save eliminated.
-	ldr	r3, .L3464
-	ldr	r2, [r3, #2772]
-	ldr	r3, .L3464+4
+	ldr	r3, .L3489
+	ldr	r2, [r3, #2768]
+	ldr	r3, .L3489+4
 	cmp	r2, r3
-	bne	.L3462
+	bne	.L3487
 	b	flash_exit_slc_mode
-.L3462:
+.L3487:
 	bx	lr
-.L3465:
+.L3490:
 	.align	2
-.L3464:
+.L3489:
 	.word	.LANCHOR0
 	.word	1446522928
 	.fnend
 	.size	flash_boot_exit_slc_mode, .-flash_boot_exit_slc_mode
 	.align	1
-	.global	IdBlockReadData
 	.thumb
 	.thumb_func
 	.type	IdBlockReadData, %function
 IdBlockReadData:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 32
+	@ args = 0, pretend = 0, frame = 16
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #36
-	sub	sp, sp, #36
-	ldr	r4, .L3474
 	mov	r6, r0
-	str	r2, [sp, #12]
-	mov	r7, r1
-	ldr	r0, .L3474+4
+	ldr	r4, .L3499
+	mov	r8, r1
+	.pad #20
+	sub	sp, sp, #20
 	mov	r1, r6
-	ldr	r2, [r4, #1788]
-	mov	fp, r4
-	ldr	r3, [r4, #4]
-	ldrb	r5, [r2, #9]	@ zero_extendqisi2
-	mov	r2, r7
-	smulbb	r5, r5, r3
-	bl	printk
+	mov	fp, r2
+	ldr	r0, .L3499+4
 	ldr	r3, [r4, #1788]
+	mov	r2, r8
+	movs	r7, #0
+	ldrb	r9, [r3, #9]	@ zero_extendqisi2
+	ldrh	r5, [r3, #10]
+	bl	printk
 	mov	r0, r6
-	ldrb	r10, [r3, #9]	@ zero_extendqisi2
+	smulbb	r5, r5, r9
 	uxth	r5, r5
 	mov	r1, r5
-	movs	r5, #0
 	bl	__aeabi_uidivmod
-	mul	ip, r10, r1
-	mov	r8, r1
+	mul	ip, r9, r1
+	mov	r10, r1
 	subs	r3, r6, r1
-	str	r3, [sp, #4]
+	str	r3, [sp]
 	ubfx	ip, ip, #2, #2
-.L3467:
-	cmp	r5, r7
-	bcs	.L3473
-	add	r9, r5, r8
-	rsb	r3, ip, #4
-	ubfx	r9, r9, #2, #16
-	ldrb	r2, [r4, #76]	@ zero_extendqisi2
-	uxth	r3, r3
-	str	r3, [sp, #8]
-	add	r3, r4, r9, lsl #1
+.L3492:
+	cmp	r7, r8
+	bcs	.L3498
+	add	r2, r7, r10
+	ldrb	r1, [r4, #76]	@ zero_extendqisi2
+	ubfx	r2, r2, #2, #16
+	rsb	r5, ip, #4
+	add	r3, r4, r2, lsl #1
+	uxth	r5, r5
 	ldrh	r3, [r3, #80]
-	cbz	r2, .L3468
-	ldr	r2, [r4, #2772]
-	ldr	r1, .L3474+8
-	cmp	r2, r1
+	cbz	r1, .L3493
+	ldr	r1, .L3499
+	ldr	r0, .L3499+8
+	ldr	r1, [r1, #2768]
+	cmp	r1, r0
 	it	eq
-	moveq	r3, r9
-.L3468:
-	ldr	r2, [sp, #4]
-	ldr	r9, .L3474+16
+	moveq	r3, r2
+.L3493:
+	ldr	r2, [sp]
+	add	r7, r7, r5
 	add	r2, ip, r2
-	ldr	r1, [fp, #1788]
-	ldrb	ip, [fp, #1892]	@ zero_extendqisi2
-	mla	r3, r10, r3, r2
-	ldrb	r1, [r1, #9]	@ zero_extendqisi2
-	ldr	r2, [r9, #4012]
-	ldrb	r0, [r9, #4010]	@ zero_extendqisi2
-	str	ip, [sp, #16]
-	str	r2, [sp, #24]
-	str	r3, [sp, #28]
-	str	r1, [sp, #20]
+	ldrb	ip, [r4, #1892]	@ zero_extendqisi2
+	uxth	r7, r7
+	mla	r3, r9, r3, r2
+	ldr	r2, [r4, #1788]
+	str	ip, [sp, #4]
+	ldrb	r1, [r2, #9]	@ zero_extendqisi2
+	str	r3, [sp, #12]
+	ldr	r3, .L3499+12
+	str	r1, [sp, #8]
+	ldrb	r0, [r3, #4014]	@ zero_extendqisi2
 	bl	FlashBchSel
 	movs	r0, #0
 	bl	flash_boot_enter_slc_mode
-	ldr	r3, [sp, #28]
-	ldr	r1, [sp, #20]
+	ldr	r3, [sp, #12]
+	ldr	r1, [sp, #8]
 	mov	r0, r3
 	bl	__aeabi_uidiv
+	mov	r2, fp
+	add	fp, fp, r5, lsl #9
 	mov	r1, r0
 	movs	r0, #0
-	ldr	r2, [sp, #24]
 	mov	r3, r0
 	bl	FlashReadPage
 	movs	r0, #0
 	bl	flash_boot_exit_slc_mode
-	ldr	ip, [sp, #16]
+	ldr	ip, [sp, #4]
 	mov	r0, ip
 	bl	FlashBchSel
-	ldr	r1, [r9, #4012]
-	mov	r2, #2048
-	ldr	r3, [sp, #12]
-	add	r0, r3, r5, lsl #9
-	bl	ftl_memcpy
 	mov	ip, #0
-	ldr	r3, [sp, #8]
-	add	r3, r3, r5
-	uxth	r5, r3
-	b	.L3467
-.L3473:
+	b	.L3492
+.L3498:
 	mov	r1, r6
-	mov	r2, r7
+	mov	r2, r8
 	movs	r3, #0
-	ldr	r0, .L3474+12
+	ldr	r0, .L3499+16
 	bl	printk
 	movs	r0, #0
-	add	sp, sp, #36
+	add	sp, sp, #20
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3475:
+.L3500:
 	.align	2
-.L3474:
+.L3499:
 	.word	.LANCHOR0
-	.word	.LC142
+	.word	.LC146
 	.word	1446522928
-	.word	.LC143
 	.word	.LANCHOR2
+	.word	.LC147
 	.fnend
 	.size	IdBlockReadData, .-IdBlockReadData
 	.align	1
-	.global	IDBlockWriteData
+	.global	write_idblock
 	.thumb
 	.thumb_func
-	.type	IDBlockWriteData, %function
-IDBlockWriteData:
+	.type	write_idblock, %function
+write_idblock:
 	.fnstart
-	@ args = 0, pretend = 0, frame = 88
+	@ args = 0, pretend = 0, frame = 112
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.pad #92
-	sub	sp, sp, #92
-	ldr	r4, .L3492
-	mov	r7, r0
-	str	r2, [sp, #8]
-	mov	r8, r1
-	ldr	r0, .L3492+4
-	mov	r1, r7
-	ldr	r2, [r4, #1788]
-	mov	fp, r4
-	ldr	r3, [r4, #4]
-	ldrb	r5, [r2, #9]	@ zero_extendqisi2
-	mov	r2, r8
-	smulbb	r5, r5, r3
+	mov	r5, r2
+	ldr	r7, .L3542
+	.pad #124
+	sub	sp, sp, #124
+	mov	r4, r0
+	mov	r0, #256000
+	mov	r6, r1
+	ldr	r2, [r7, #1788]
+	ldrb	r10, [r2, #9]	@ zero_extendqisi2
+	ldrh	r8, [r2, #10]
+	bl	ftl_malloc
+	mov	r9, r0
+	cmp	r0, #0
+	beq	.L3524
+	addw	r4, r4, #511
+	lsrs	r4, r4, #9
+	cmp	r4, #8
+	bls	.L3523
+	cmp	r4, #500
+	bhi	.L3524
+	b	.L3503
+.L3523:
+	movs	r4, #8
+.L3503:
+	smulbb	r3, r10, r8
+	mov	r0, r4
+	uxth	r3, r3
+	str	r3, [sp, #8]
+	mov	r1, r3
+	bl	__aeabi_uidiv
+	movs	r3, #0
+	movw	r2, #63999
+	str	r0, [sp, #28]
+	add	r0, r6, #254976
+	add	r0, r0, #1020
+.L3507:
+	ldr	r1, [r0]
+	cbnz	r1, .L3504
+	ldr	r1, [r6, r3, lsl #2]
+	adds	r3, r3, #1
+	cmp	r3, #4096
+	add	r2, r2, #-1
+	it	hi
+	movhi	r3, #0
+	cmp	r2, #4096
+	str	r1, [r0], #-4
+	bne	.L3507
+	b	.L3506
+.L3504:
+	ldr	r0, .L3542+4
+	bl	printk
+.L3506:
+	mov	r1, r5
+	movs	r3, #5
+	ldr	r0, .L3542+8
+	movs	r2, #4
+	bl	rknand_print_hex
+	ldrb	r2, [r7, #1]	@ zero_extendqisi2
+	ldr	r1, [r6, #512]
+	subs	r5, r5, #4
+	ldr	r0, .L3542+12
+	bl	printk
+	ldr	r2, .L3542+16
+	ldrh	r3, [r7, #1890]
+	mov	r1, r4
+	ldr	r0, .L3542+20
+	ldr	r2, [r2, #4008]
+	str	r2, [sp]
+	mov	r2, r4
+	bl	printk
+	ldrb	r3, [r7, #1]	@ zero_extendqisi2
+	ldr	r7, .L3542
+	ldr	r2, [r6, #512]
+	cmp	r2, r3
+	it	hi
+	strhi	r3, [r6, #512]
+	lsls	r3, r4, #7
+	str	r3, [sp, #32]
+	movs	r3, #0
+	str	r3, [sp, #16]
+	str	r3, [sp, #12]
+.L3521:
+	ldr	r2, [r5, #4]
+	ldrb	r3, [r7, #1]	@ zero_extendqisi2
+	cmp	r2, r3
+	bcs	.L3509
+	ldr	r3, .L3542+16
+	ldr	r3, [r3, #4008]
+	cmp	r2, r3
+	bcc	.L3509
+	ldr	r3, [sp, #28]
+	cmp	r3, #1
+	bls	.L3510
+	ldr	r3, [sp, #12]
+	cbz	r3, .L3510
+	ldr	r3, [r5]
+	adds	r3, r3, #1
+	cmp	r2, r3
+	beq	.L3509
+.L3510:
+	mov	r0, r9
+	mov	r1, #512
+	bl	__memzero
+	ldr	r3, [r5, #4]
+	ldr	r2, [sp, #8]
+	ldr	r0, .L3542+24
+	mul	r8, r3, r2
+	ldr	r3, .L3542
+	ldr	r3, [r3, #1788]
+	mov	r1, r8
+	ldrb	r2, [r3, #9]	@ zero_extendqisi2
+	ldrh	r10, [r3, #10]
+	str	r2, [sp, #20]
+	mov	r2, r4
+	ldrh	r3, [sp, #20]
+	smulbb	r10, r10, r3
 	bl	printk
 	movs	r0, #0
 	bl	flash_boot_enter_slc_mode
-	ldrh	r1, [r4, #1884]
-	mov	r0, r7
+	ldr	r1, [sp, #20]
+	mov	r0, r8
 	bl	__aeabi_uidiv
-	uxth	r5, r5
+	uxth	r10, r10
 	mov	r1, r0
 	movs	r0, #0
 	mov	r2, r0
 	bl	FlashEraseBlock
+	cmp	r4, r10
+	bls	.L3525
+	movs	r0, #0
+	add	r1, r8, r10
+	mov	fp, #2
+	mov	r2, r0
+	bl	FlashEraseBlock
+	b	.L3511
+.L3525:
+	mov	fp, #1
+.L3511:
 	movs	r0, #0
 	bl	flash_boot_exit_slc_mode
-	ldr	r3, [r4, #1788]
-	mov	r1, r5
-	mov	r0, r7
-	movs	r5, #0
-	ldrb	r3, [r3, #9]	@ zero_extendqisi2
-	str	r3, [sp]
+	ldr	r3, [r7, #1788]
+	ldrh	r0, [r3, #10]
+	ldrb	r1, [r3, #12]	@ zero_extendqisi2
+	lsls	r0, r0, #2
+	mul	r0, fp, r0
+	bl	__aeabi_idiv
+	mov	r1, r10
+	mov	r10, #0
+	str	r0, [sp, #44]
+	mov	r0, r8
 	bl	__aeabi_uidivmod
-	ldr	ip, .L3492+16
-	rsb	r10, r1, r7
-	mov	r9, r1
-.L3477:
-	cmp	r5, r8
-	bcs	.L3491
-	add	r3, r5, r9
-	ubfx	r3, r3, #2, #16
-	cbz	r3, .L3478
-	adds	r1, r3, #1
-	ldrb	r0, [r4, #76]	@ zero_extendqisi2
-	add	r2, r4, r1, lsl #1
-	ldrh	r2, [r2, #80]
-	cbz	r0, .L3479
-	ldr	r0, [fp, #2772]
-	cmp	r0, ip
+	str	r6, [sp, #24]
+	mov	ip, r1
+	rsb	r3, r1, r8
+	str	r3, [sp, #36]
+.L3512:
+	ldr	r3, [sp, #44]
+	cmp	r10, r3
+	bcs	.L3541
+	add	r2, r10, ip
+	ubfx	r2, r2, #2, #16
+	cbz	r2, .L3513
+	adds	r3, r2, #1
+	add	r1, r7, r3, lsl #1
+	ldrh	fp, [r1, #80]
+	ldrb	r1, [r7, #76]	@ zero_extendqisi2
+	cbz	r1, .L3514
+	ldr	r1, [r7, #2768]
+	ldr	r0, .L3542+28
+	cmp	r1, r0
 	it	eq
-	uxtheq	r2, r1
-.L3479:
-	subs	r2, r2, #1
-	lsls	r2, r2, #2
-	str	r2, [sp, #24]
-	movs	r2, #0
-	str	r2, [sp, #28]
-.L3478:
-	add	r2, r4, r3, lsl #1
-	ldrh	r6, [r2, #80]
-	ldrb	r2, [r4, #76]	@ zero_extendqisi2
-	cbz	r2, .L3480
-	ldr	r2, [fp, #2772]
-	cmp	r2, ip
+	moveq	fp, r3
+.L3514:
+	add	fp, fp, #1073741824
+	add	fp, fp, #-1
+	lsl	r3, fp, #2
+	str	r3, [sp, #56]
+.L3513:
+	movw	r3, #61424
+	str	r3, [sp, #60]
+	add	r3, r7, r2, lsl #1
+	ldrh	fp, [r3, #80]
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	cbz	r3, .L3515
+	ldr	r3, [r7, #2768]
+	ldr	r1, .L3542+28
+	cmp	r3, r1
 	it	eq
-	moveq	r6, r3
-.L3480:
-	ldr	r3, [sp]
-	str	ip, [sp, #20]
-	mla	r1, r3, r6, r10
-	ldr	r3, [sp, #8]
-	add	r2, r3, r5, lsl #9
-	ldrb	r3, [r4, #1892]	@ zero_extendqisi2
-	str	r2, [sp, #12]
-	adds	r5, r5, #4
-	str	r3, [sp, #4]
-	uxth	r5, r5
-	ldr	r3, .L3492+8
-	str	r1, [sp, #16]
-	ldrb	r0, [r3, #4010]	@ zero_extendqisi2
+	moveq	fp, r2
+.L3515:
+	ldr	r3, [sp, #20]
+	add	r10, r10, #4
+	ldr	r2, [sp, #36]
+	str	ip, [sp, #52]
+	uxth	r10, r10
+	mla	r2, r3, fp, r2
+	ldr	r3, .L3542
+	ldrb	r3, [r3, #1892]	@ zero_extendqisi2
+	str	r2, [sp, #48]
+	str	r3, [sp, #40]
+	ldr	r3, .L3542+16
+	ldrb	r0, [r3, #4014]	@ zero_extendqisi2
 	bl	FlashBchSel
 	movs	r0, #0
 	bl	flash_boot_enter_slc_mode
-	ldr	r3, [r4, #1788]
-	ldr	r1, [sp, #16]
-	mov	r0, r1
+	ldr	r3, .L3542
+	ldr	r2, [sp, #48]
+	ldr	r3, [r3, #1788]
+	mov	r0, r2
 	ldrb	r1, [r3, #9]	@ zero_extendqisi2
 	bl	__aeabi_uidiv
+	add	r3, sp, #56
+	ldr	r2, [sp, #24]
 	mov	r1, r0
-	ldr	r2, [sp, #12]
-	add	r3, sp, #24
 	movs	r0, #0
 	bl	FlashProgPage
 	movs	r0, #0
 	bl	flash_boot_exit_slc_mode
-	ldr	r0, [sp, #4]
+	ldr	r0, [sp, #40]
 	bl	FlashBchSel
-	mov	r0, r10
-	ldr	r1, [sp]
+	ldr	r1, [sp, #20]
+	ldr	r0, [sp, #36]
 	bl	__aeabi_uidiv
-	adds	r2, r6, #1
+	add	r2, fp, #1
 	uxth	r2, r2
 	mov	r1, r0
 	movs	r0, #0
 	bl	FlashPageProgMsbFFData
-	ldr	ip, [sp, #20]
-	b	.L3477
-.L3491:
-	mov	r1, r7
-	mov	r2, r8
-	movs	r3, #0
-	ldr	r0, .L3492+12
-	bl	printk
-	movs	r0, #0
-	add	sp, sp, #92
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3493:
+	ldr	r3, [sp, #24]
+	ldr	ip, [sp, #52]
+	add	r3, r3, #2048
+	str	r3, [sp, #24]
+	b	.L3512
+.L3543:
 	.align	2
-.L3492:
+.L3542:
 	.word	.LANCHOR0
-	.word	.LC144
+	.word	.LC148
+	.word	.LC149
+	.word	.LC150
 	.word	.LANCHOR2
-	.word	.LC145
+	.word	.LC151
+	.word	.LC152
 	.word	1446522928
-	.fnend
-	.size	IDBlockWriteData, .-IDBlockWriteData
-	.align	1
-	.global	write_idblock
-	.thumb
-	.thumb_func
-	.type	write_idblock, %function
-write_idblock:
-	.fnstart
-	@ args = 0, pretend = 0, frame = 8
-	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
-	mov	fp, r0
-	ldr	r5, .L3506
-	.pad #20
-	sub	sp, sp, #20
-	mov	r0, #256000
-	mov	r8, r1
-	mov	r9, r2
-	ldr	r3, [r5, #1788]
-	ldr	r6, [r5, #4]
-	ldrb	r10, [r3, #9]	@ zero_extendqisi2
-	bl	ftl_malloc
-	mov	r7, r0
-	cmp	r0, #0
-	beq	.L3503
-	addw	r4, fp, #511
-	lsrs	r4, r4, #9
-	cmp	r4, #255
-	bhi	.L3496
-	add	r0, r8, r4, lsl #9
+.L3541:
 	mov	r1, r8
-	rsb	r2, r4, #256
-	bl	memcpy
-.L3496:
-	adds	r4, r4, #128
-	movs	r3, #5
-	cmp	r4, #256
-	ldr	r0, .L3506+4
-	mov	r1, r9
-	mov	r2, #4
-	it	cs
-	movcs	r4, #256
-	bl	rknand_print_hex
-	ldrb	r2, [r5, #1]	@ zero_extendqisi2
-	ldr	r1, [r8, #512]
-	ldr	r0, .L3506+8
+	mov	r2, r4
+	movs	r3, #0
+	ldr	r0, .L3544
 	bl	printk
-	ldrb	r3, [r5, #1]	@ zero_extendqisi2
-	ldr	r2, [r8, #512]
+	ldr	r0, [r5, #4]
+	ldr	r3, [sp, #8]
 	mov	r1, r4
-	ldr	r0, .L3506+12
-	movs	r5, #0
+	mov	r2, r9
+	mov	r8, #0
+	muls	r0, r3, r0
+	bl	IdBlockReadData
+	mov	r0, r9
+	mov	r1, r6
+.L3520:
+	mov	fp, r0
+	mov	r10, r1
+	ldr	r2, [fp]
+	adds	r0, r0, #4
+	ldr	r3, [r10]
+	adds	r1, r1, #4
 	cmp	r2, r3
-	mov	r2, fp
-	it	hi
-	strhi	r3, [r8, #512]
-	mov	fp, r5
-	bl	printk
-	smulbb	r10, r10, r6
-	mov	r6, r9
-	lsls	r3, r4, #7
-	uxth	r10, r10
-	str	r3, [sp, #8]
-.L3502:
-	ldr	r2, .L3506
-	ldr	r3, [r6]
-	ldrh	r2, [r2, #1890]
-	cmp	r3, r2
-	bcs	.L3498
-	ldr	r2, .L3506+16
-	ldr	r2, [r2, #4004]
-	cmp	r3, r2
-	bcc	.L3498
-	mov	r0, r7
+	beq	.L3517
+	mov	r0, r9
 	mov	r1, #512
 	bl	__memzero
-	ldr	r0, [r6]
-	mov	r1, r4
-	mov	r2, r8
-	mov	r9, #0
-	mul	r0, r0, r10
-	bl	IDBlockWriteData
-	ldr	r0, [r6]
-	mov	r1, r4
-	mov	r2, r7
-	mul	r0, r0, r10
-	bl	IdBlockReadData
-.L3501:
-	ldr	r2, [r7, r9, lsl #2]
-	ldr	r3, [r8, r9, lsl #2]
-	cmp	r2, r3
-	beq	.L3499
-	stmia	sp, {r2, r3}
-	mov	r1, fp
-	ldr	r2, [r6]
-	mov	r3, r9
-	ldr	r0, .L3506+20
+	ldr	r3, [fp]
+	ldr	r1, [sp, #12]
+	ldr	r0, .L3544+4
+	str	r3, [sp]
+	ldr	r3, [r10]
+	bic	r10, r8, #255
+	lsl	r10, r10, #2
+	str	r3, [sp, #4]
+	mov	r3, r8
+	ldr	r2, [r5, #4]
 	bl	printk
-	bic	ip, r9, #255
-	ldr	r0, .L3506+24
+	ldr	r0, .L3544+8
+	add	r1, r6, r10
 	movs	r2, #4
-	lsl	ip, ip, #2
 	mov	r3, #256
-	add	r1, r8, ip
-	str	ip, [sp, #12]
 	bl	rknand_print_hex
-	mov	r3, #256
+	add	r1, r9, r10
 	movs	r2, #4
-	ldr	r0, .L3506+28
-	ldr	ip, [sp, #12]
-	add	r1, r7, ip
+	mov	r3, #256
+	ldr	r0, .L3544+12
 	bl	rknand_print_hex
-	mov	r0, r7
-	mov	r1, #512
-	bl	__memzero
-	ldr	r0, [r6]
-	movs	r1, #4
-	mov	r2, r7
-	mul	r0, r0, r10
-	bl	IDBlockWriteData
-	ldr	r0, .L3506+32
-	bl	printk
+	movs	r0, #0
+	bl	flash_boot_enter_slc_mode
 	ldr	r3, [sp, #8]
-	cmp	r9, r3
-	bcc	.L3498
-	b	.L3500
-.L3499:
+	ldr	r1, [r5, #4]
+	movs	r0, #0
+	mov	r2, r0
+	muls	r1, r3, r1
+	bl	FlashEraseBlock
+	ldr	r3, [sp, #28]
+	cmp	r3, #1
+	bls	.L3518
+	ldr	r1, [r5, #4]
+	movs	r0, #0
 	ldr	r3, [sp, #8]
-	add	r9, r9, #1
-	cmp	r9, r3
-	bne	.L3501
-.L3500:
-	adds	r5, r5, #1
-.L3498:
-	add	fp, fp, #1
-	adds	r6, r6, #4
-	cmp	fp, #5
-	bne	.L3502
-	clz	r5, r5
-	mov	r0, r7
+	mov	r2, r0
+	mla	r1, r1, r3, r3
+	bl	FlashEraseBlock
+.L3518:
+	movs	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	r0, .L3544+16
+	ldr	r1, [r5, #4]
+	bl	printk
+	ldr	r3, [sp, #32]
+	cmp	r8, r3
+	bcc	.L3509
+	b	.L3519
+.L3517:
+	ldr	r3, [sp, #32]
+	add	r8, r8, #1
+	cmp	r8, r3
+	bne	.L3520
+.L3519:
+	ldr	r3, [sp, #16]
+	adds	r3, r3, #1
+	str	r3, [sp, #16]
+.L3509:
+	ldr	r3, [sp, #12]
+	adds	r5, r5, #4
+	adds	r3, r3, #1
+	str	r3, [sp, #12]
+	cmp	r3, #5
+	bne	.L3521
+	mov	r0, r9
 	bl	ftl_free
-	lsrs	r5, r5, #5
-	negs	r0, r5
-	b	.L3495
-.L3503:
-	mov	r0, #-1
-.L3495:
-	add	sp, sp, #20
-	@ sp needed
-	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3507:
-	.align	2
-.L3506:
-	.word	.LANCHOR0
-	.word	.LC146
-	.word	.LC147
-	.word	.LC148
-	.word	.LANCHOR2
-	.word	.LC149
-	.word	.LC150
-	.word	.LC151
-	.word	.LC152
+	ldr	r3, [sp, #16]
+	clz	r0, r3
+	lsrs	r0, r0, #5
+	negs	r0, r0
+	b	.L3502
+.L3524:
+	mov	r0, #-1
+.L3502:
+	add	sp, sp, #124
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3545:
+	.align	2
+.L3544:
+	.word	.LC153
+	.word	.LC154
+	.word	.LC155
+	.word	.LC156
+	.word	.LC157
 	.fnend
 	.size	write_idblock, .-write_idblock
 	.align	1
@@ -21603,23 +21956,23 @@ CRC_32:
 	push	{r4, lr}
 	.save {r4, lr}
 	add	r1, r1, r0
-	ldr	r4, .L3512
+	ldr	r4, .L3550
 	movs	r2, #0
-.L3509:
+.L3547:
 	cmp	r0, r1
-	beq	.L3511
+	beq	.L3549
 	ldrb	r3, [r0], #1	@ zero_extendqisi2
 	eor	r3, r3, r2, lsr #24
 	add	r3, r4, r3, lsl #2
-	ldr	r3, [r3, #3008]
+	ldr	r3, [r3, #3072]
 	eor	r2, r3, r2, lsl #8
-	b	.L3509
-.L3511:
+	b	.L3547
+.L3549:
 	mov	r0, r2
 	pop	{r4, pc}
-.L3513:
+.L3551:
 	.align	2
-.L3512:
+.L3550:
 	.word	.LANCHOR1
 	.fnend
 	.size	CRC_32, .-CRC_32
@@ -21632,7 +21985,7 @@ rknand_sys_storage_ioctl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 528
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3619
+	ldr	r3, .L3660
 	push	{r4, r5, r6, r7, lr}
 	.save {r4, r5, r6, r7, lr}
 	cmp	r1, r3
@@ -21640,259 +21993,255 @@ rknand_sys_storage_ioctl:
 	sub	sp, sp, #532
 	mov	r4, r1
 	mov	r5, r2
-	beq	.L3516
-	bhi	.L3517
+	beq	.L3554
+	bhi	.L3555
 	subw	r3, r3, #3461
 	cmp	r1, r3
-	beq	.L3518
-	bhi	.L3519
+	beq	.L3556
+	bhi	.L3557
 	subs	r3, r3, #125
 	cmp	r1, r3
-	beq	.L3520
-	bhi	.L3521
+	beq	.L3558
+	bhi	.L3559
 	subs	r3, r3, #237
 	cmp	r1, r3
-	bne	.L3577
+	bne	.L3615
 	bl	rknand_dev_flush
-	b	.L3608
-.L3521:
-	ldr	r3, .L3619+4
+	b	.L3648
+.L3559:
+	ldr	r3, .L3660+4
 	cmp	r1, r3
-	beq	.L3523
+	beq	.L3561
 	adds	r3, r3, #1
 	cmp	r1, r3
-	beq	.L3524
-	b	.L3577
-.L3519:
-	ldr	r3, .L3619+8
+	beq	.L3562
+	b	.L3615
+.L3557:
+	ldr	r3, .L3660+8
 	cmp	r1, r3
-	beq	.L3525
-	bhi	.L3526
+	beq	.L3563
+	bhi	.L3564
 	mvn	r1, #1960
 	add	r3, r3, r1
 	cmp	r4, r3
-	beq	.L3527
-	b	.L3577
-.L3526:
-	ldr	r3, .L3619+12
+	beq	.L3565
+	b	.L3615
+.L3564:
+	ldr	r3, .L3660+12
 	cmp	r1, r3
-	beq	.L3525
+	beq	.L3563
 	adds	r3, r3, #10
 	cmp	r1, r3
-	beq	.L3525
-	b	.L3577
-.L3517:
-	ldr	r3, .L3619+16
+	beq	.L3563
+	b	.L3615
+.L3555:
+	ldr	r3, .L3660+16
 	cmp	r1, r3
-	beq	.L3528
-	bhi	.L3529
+	beq	.L3566
+	bhi	.L3567
 	subs	r3, r3, #78
 	cmp	r1, r3
-	beq	.L3530
-	bcc	.L3531
+	beq	.L3568
+	bcc	.L3569
 	adds	r3, r3, #21
 	cmp	r1, r3
-	beq	.L3532
+	beq	.L3570
 	adds	r3, r3, #56
 	cmp	r1, r3
-	beq	.L3533
-	b	.L3577
-.L3529:
-	ldr	r3, .L3619+20
+	beq	.L3571
+	b	.L3615
+.L3567:
+	ldr	r3, .L3660+20
 	cmp	r1, r3
 	mov	r6, r3
-	beq	.L3534
-	bhi	.L3535
+	beq	.L3572
+	bhi	.L3573
 	mvn	r2, #956
 	add	r3, r3, r2
 	cmp	r1, r3
-	beq	.L3536
+	beq	.L3574
 	add	r3, r3, #956
 	cmp	r1, r3
-	beq	.L3537
-	b	.L3577
-.L3535:
-	ldr	r3, .L3619+24
+	beq	.L3575
+	b	.L3615
+.L3573:
+	ldr	r3, .L3660+24
 	cmp	r1, r3
-	beq	.L3537
+	beq	.L3575
 	adds	r3, r3, #1
 	cmp	r1, r3
-	beq	.L3534
-	b	.L3577
-.L3531:
-	ldr	r0, .L3619+28
+	beq	.L3572
+	b	.L3615
+.L3569:
+	ldr	r0, .L3660+28
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r4, r0
-	cbnz	r0, .L3538
-.L3543:
+	cbnz	r0, .L3576
+.L3581:
 	mvn	r0, #11
-	b	.L3515
-.L3538:
+	b	.L3553
+.L3576:
 	mov	r1, r5
 	mov	r2, #512
 	bl	rk_copy_from_user
-	cbnz	r0, .L3614
-	ldr	r0, .L3619+32
+	cbnz	r0, .L3654
+	ldr	r0, .L3660+32
 	ldmia	r4, {r1, r2}
 	bl	printk
 	ldr	r3, [r4, #4]
 	cmp	r3, #8
 	str	r3, [sp, #4]
-	bhi	.L3611
+	bhi	.L3652
 	bl	rknand_device_lock
+	ldr	r1, [sp, #4]
 	mov	r2, r4
 	ldr	r0, [r4]
-	ldr	r1, [sp, #4]
 	bl	IdBlockReadData
 	bl	rknand_device_unlock
+	ldr	r2, [sp, #4]
 	mov	r0, r5
 	mov	r1, r4
-	ldr	r2, [sp, #4]
 	lsls	r2, r2, #9
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L3607
-	ldr	r0, .L3619+36
-.L3610:
+	beq	.L3647
+	ldr	r0, .L3660+36
+.L3650:
 	bl	printk
-.L3611:
+.L3652:
 	mov	r0, r4
-.L3612:
+.L3653:
 	bl	ftl_free
-.L3613:
+.L3651:
 	mvn	r0, #13
-	b	.L3515
-.L3530:
-	ldr	r0, .L3619+40
+	b	.L3553
+.L3568:
+	ldr	r0, .L3660+40
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L3543
+	beq	.L3581
 	mov	r1, r5
 	mov	r2, #4096
 	bl	rk_copy_from_user
-	cbz	r0, .L3544
-.L3614:
-	ldr	r0, .L3619+44
-	b	.L3610
-.L3544:
-	ldr	r5, .L3619+48
-	ldr	r0, .L3619+52
+	cbz	r0, .L3582
+.L3654:
+	ldr	r0, .L3660+44
+	b	.L3650
+.L3582:
+	ldr	r5, .L3660+48
+	ldr	r0, .L3660+52
 	ldmia	r4, {r1, r2}
 	bl	printk
-	ldr	r3, [r5, #-36]
+	ldr	r3, [r5, #-32]
 	mov	r6, r5
-	cbnz	r3, .L3545
+	cbnz	r3, .L3583
 	mov	r0, #260096
 	bl	ftl_malloc
-	str	r0, [r5, #-36]
+	str	r0, [r5, #-32]
 	cmp	r0, #0
-	beq	.L3611
-.L3545:
+	beq	.L3652
+	mov	r1, #260096
+	bl	__memzero
+.L3583:
 	ldr	r2, [r4, #4]
 	movw	r3, #4088
 	cmp	r2, r3
-	bhi	.L3611
+	bhi	.L3652
 	ldr	r3, [r4]
 	cmp	r3, #251904
-	bhi	.L3611
-	ldr	r0, [r6, #-36]
+	bhi	.L3652
+	ldr	r0, [r6, #-32]
 	add	r1, r4, #8
 	add	r0, r0, r3
 	bl	memcpy
-.L3607:
+.L3647:
 	mov	r0, r4
 	bl	ftl_free
-.L3608:
+.L3648:
 	movs	r4, #0
-	b	.L3542
-.L3533:
-	ldr	r0, .L3619+56
+	b	.L3580
+.L3571:
+	ldr	r0, .L3660+56
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r6, r0
 	cmp	r0, #0
-	beq	.L3543
+	beq	.L3581
 	mov	r1, r5
 	movs	r2, #28
 	bl	rk_copy_from_user
-	cbz	r0, .L3547
-	ldr	r0, .L3619+44
+	cbz	r0, .L3586
+	ldr	r0, .L3660+44
 	bl	printk
-	b	.L3548
-.L3547:
+	b	.L3587
+.L3586:
 	ldmia	r6, {r1, r2}
-	ldr	r0, .L3619+60
+	ldr	r0, .L3660+60
 	bl	printk
 	ldr	r1, [r6]
 	cmp	r1, #256000
-	bhi	.L3548
-	ldr	r5, .L3619+48
-	ldr	r0, [r5, #-36]
-	cbz	r0, .L3548
+	bhi	.L3587
+	ldr	r5, .L3660+48
+	ldr	r0, [r5, #-32]
+	cbz	r0, .L3587
 	bl	CRC_32
 	ldr	r3, [r6, #4]
 	cmp	r3, r0
-	beq	.L3550
+	beq	.L3589
 	mov	r0, r6
 	bl	ftl_free
-	b	.L3578
-.L3550:
+	b	.L3616
+.L3589:
 	bl	rknand_device_lock
-	ldr	r1, [r5, #-36]
+	ldr	r1, [r5, #-32]
 	add	r2, r6, #8
 	ldr	r0, [r6]
 	bl	write_idblock
 	movs	r4, #0
 	bl	rknand_device_unlock
-	ldr	r0, [r5, #-36]
+	ldr	r0, [r5, #-32]
 	bl	ftl_free
-	str	r4, [r5, #-36]
+	str	r4, [r5, #-32]
 	mov	r0, r6
-	b	.L3555
-.L3548:
+	b	.L3593
+.L3587:
 	mov	r0, r6
-	b	.L3612
-.L3532:
-	ldr	r0, .L3619+64
+	b	.L3653
+.L3570:
+	ldr	r0, .L3660+64
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r6, r0
 	cmp	r0, #0
-	beq	.L3543
-	bl	ReadFlashInfo
+	beq	.L3581
+	bl	ftl_read_flash_info
 	mov	r0, r5
 	mov	r1, r6
 	movs	r2, #11
-	b	.L3617
-.L3516:
-	ldr	r0, .L3619+68
+	b	.L3658
+.L3554:
+	ldr	r0, .L3660+68
 	bl	printk
-	bl	rknand_device_lock
-	bl	FtlReInitForSDUpdata
-	mov	r4, r0
-	bl	rknand_device_unlock
-	cmp	r4, #0
-	bne	.L3613
 	bl	nand_blk_add_whole_disk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r6, r0
 	cmp	r0, #0
-	beq	.L3543
+	beq	.L3581
 	bl	rknand_device_lock
-	mov	r1, r4
+	movs	r1, #0
 	movs	r2, #64
 	mov	r0, r6
 	bl	FlashReadFacBbtData
 	bl	rknand_device_unlock
-	ldr	r0, .L3619+72
+	ldr	r0, .L3660+72
 	mov	r1, r6
 	movs	r2, #4
 	movs	r3, #8
@@ -21900,26 +22249,30 @@ rknand_sys_storage_ioctl:
 	mov	r0, r5
 	mov	r1, r6
 	movs	r2, #64
-	b	.L3617
-.L3528:
-	ldr	r0, .L3619+76
+	b	.L3658
+.L3566:
+	ldr	r0, .L3660+76
 	bl	printk
-	ldr	r3, .L3619+48
-	mov	r0, r5
+	ldr	r3, .L3660+48
+	add	r1, sp, #4
 	movs	r2, #4
-	ldr	r3, [r3, #-32]
+	mov	r0, r5
+	ldr	r3, [r3, #-28]
 	ldr	r3, [r3, #20]
-	add	r1, sp, #4
 	str	r3, [sp, #4]
-	b	.L3603
-.L3536:
-	ldr	r0, .L3619+80
+.L3642:
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	bne	.L3651
+	b	.L3648
+.L3574:
+	ldr	r0, .L3660+80
 	bl	printk
 	mov	r0, #4096
 	bl	ftl_malloc
 	mov	r6, r0
 	cmp	r0, #0
-	beq	.L3543
+	beq	.L3581
 	bl	rknand_device_lock
 	movs	r1, #2
 	mov	r2, r6
@@ -21929,31 +22282,31 @@ rknand_sys_storage_ioctl:
 	mov	r2, #1024
 	mov	r0, r5
 	mov	r1, r6
-.L3617:
+.L3658:
 	bl	rk_copy_to_user
 	mov	r4, r0
 	mov	r0, r6
 	cmp	r4, #0
-	bne	.L3612
-.L3555:
+	bne	.L3653
+.L3593:
 	bl	ftl_free
-	b	.L3542
-.L3520:
-	ldr	r0, .L3619+84
+	b	.L3580
+.L3558:
+	ldr	r0, .L3660+84
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	mov	r4, r0
-	cbz	r0, .L3556
-.L3561:
-	ldr	r0, .L3619+44
+	cbz	r0, .L3594
+.L3599:
+	ldr	r0, .L3660+44
 	bl	printk
-	b	.L3613
-.L3620:
+	b	.L3651
+.L3661:
 	.align	2
-.L3619:
+.L3660:
 	.word	1074033155
 	.word	1074029570
 	.word	1074031656
@@ -21961,88 +22314,80 @@ rknand_sys_storage_ioctl:
 	.word	1074033235
 	.word	1074034193
 	.word	1074034194
-	.word	.LC153
-	.word	.LC155
-	.word	.LC156
-	.word	.LC157
-	.word	.LC154
-	.word	.LANCHOR4
 	.word	.LC158
-	.word	.LC159
 	.word	.LC160
 	.word	.LC161
 	.word	.LC162
+	.word	.LC159
+	.word	.LANCHOR4
 	.word	.LC163
 	.word	.LC164
 	.word	.LC165
 	.word	.LC166
-.L3556:
+	.word	.LC167
+	.word	.LC168
+	.word	.LC169
+	.word	.LC170
+	.word	.LC171
+.L3594:
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3621
+	ldr	r3, .L3662
 	cmp	r2, r3
-	beq	.L3557
-.L3558:
+	beq	.L3595
+.L3596:
 	mov	r4, #-1
-	b	.L3542
-.L3557:
+	b	.L3580
+.L3595:
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L3558
-	ldr	r6, .L3621+4
+	bhi	.L3596
+	ldr	r6, .L3662+4
 	mov	r2, #512
 	add	r0, sp, #8
-	ldr	r1, [r6, #-32]
+	ldr	r1, [r6, #-28]
 	bl	memcpy
-	ldr	r2, [r6, #-28]
-	ldr	r3, .L3621+8
+	ldr	r2, [r6, #-24]
+	ldr	r3, .L3662+8
 	cmp	r2, r3
-	beq	.L3559
+	beq	.L3597
 	add	r0, sp, #72
 	movs	r1, #128
 	str	r4, [sp, #16]
 	str	r4, [sp, #20]
 	bl	__memzero
-.L3559:
+.L3597:
 	add	r0, sp, #264
 	mov	r1, #256
 	movs	r3, #0
 	str	r3, [sp, #24]
 	bl	__memzero
-.L3604:
-	add	r1, sp, #8
-	mov	r2, #520
-	mov	r0, r5
-.L3603:
-	bl	rk_copy_to_user
-	cmp	r0, #0
-	bne	.L3613
-	b	.L3608
-.L3523:
-	ldr	r0, .L3621+12
+	b	.L3656
+.L3561:
+	ldr	r0, .L3662+12
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3561
+	bne	.L3599
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3621
+	ldr	r3, .L3662
 	cmp	r2, r3
-	bne	.L3558
+	bne	.L3596
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L3558
-	ldr	r2, .L3621+4
-	ldr	r3, .L3621+8
-	ldr	r1, [r2, #-28]
+	bhi	.L3596
+	ldr	r2, .L3662+4
+	ldr	r3, .L3662+8
+	ldr	r1, [r2, #-24]
 	cmp	r1, r3
-	bne	.L3578
+	bne	.L3616
 	ldr	r3, [sp, #20]
 	subs	r1, r3, #1
 	cmp	r1, #127
-	bhi	.L3579
-	ldr	r4, [r2, #-32]
+	bhi	.L3617
+	ldr	r4, [r2, #-28]
 	add	r1, sp, #72
 	add	r0, r4, #64
 	str	r3, [r4, #12]
@@ -22050,62 +22395,62 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	movs	r0, #1
 	mov	r1, r4
-	b	.L3609
-.L3527:
-	ldr	r0, .L3621+16
+	b	.L3649
+.L3565:
+	ldr	r0, .L3662+16
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3561
+	bne	.L3599
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3621+20
+	ldr	r3, .L3662+20
 	cmp	r2, r3
-	bne	.L3558
+	bne	.L3596
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L3558
-	ldr	r5, .L3621+4
-	ldr	r3, [r5, #-24]
-	cbnz	r3, .L3562
-.L3565:
-	movs	r0, #0
-	b	.L3515
-.L3562:
+	bhi	.L3596
+	ldr	r5, .L3662+4
 	ldr	r3, [r5, #-20]
-	ldr	r2, .L3621+24
+	cbnz	r3, .L3600
+.L3603:
+	movs	r0, #0
+	b	.L3553
+.L3600:
+	ldr	r3, [r5, #-16]
+	ldr	r2, .L3662+24
 	ldr	r1, [r3]
 	cmp	r1, r2
-	beq	.L3563
+	beq	.L3601
 	str	r2, [r3]
 	mov	r2, #504
-	ldr	r3, [r5, #-20]
+	ldr	r3, [r5, #-16]
 	str	r2, [r3, #4]
 	movs	r2, #0
 	str	r2, [r3, #8]
 	str	r2, [r3, #12]
-.L3563:
-	ldr	r1, [r5, #-20]
+.L3601:
+	ldr	r1, [r5, #-16]
 	movs	r4, #0
 	mov	r0, r4
 	str	r4, [r1, #16]
 	bl	StorageSysDataStore
-	ldr	r3, [r5, #-32]
-	ldr	r2, .L3621
+	ldr	r3, [r5, #-28]
+	ldr	r2, .L3662
 	ldr	r1, [r3]
 	cmp	r1, r2
 	it	ne
 	strne	r2, [r3]
-	ldr	r0, [r5, #-32]
+	ldr	r0, [r5, #-28]
 	itt	ne
 	movne	r2, #504
-	ldrne	r3, .L3621+4
+	ldrne	r3, .L3662+4
 	mov	r1, #128
 	add	r0, r0, #64
 	itt	ne
-	ldrne	r3, [r3, #-32]
+	ldrne	r3, [r3, #-28]
 	strne	r4, [r3, #8]
 	mov	r4, #0
 	it	ne
@@ -22113,41 +22458,41 @@ rknand_sys_storage_ioctl:
 	str	r4, [r0, #-52]
 	bl	__memzero
 	movs	r0, #1
-	ldr	r1, [r5, #-32]
+	ldr	r1, [r5, #-28]
 	bl	StorageSysDataStore
+	str	r4, [r5, #-20]
 	str	r4, [r5, #-24]
-	str	r4, [r5, #-28]
-	b	.L3542
-.L3518:
-	ldr	r0, .L3621+28
+	b	.L3580
+.L3556:
+	ldr	r0, .L3662+28
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3561
+	bne	.L3599
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3621+32
+	ldr	r3, .L3662+32
 	cmp	r2, r3
-	bne	.L3558
+	bne	.L3596
 	ldr	r3, [sp, #12]
 	cmp	r3, #512
-	bhi	.L3558
-	ldr	r5, .L3621+4
-	ldr	r3, [r5, #-24]
-	cmp	r3, #1
-	beq	.L3565
+	bhi	.L3596
+	ldr	r5, .L3662+4
 	ldr	r3, [r5, #-20]
-	ldr	r2, .L3621+24
+	cmp	r3, #1
+	beq	.L3603
+	ldr	r3, [r5, #-16]
+	ldr	r2, .L3662+24
 	ldr	r1, [r3]
 	cmp	r1, r2
 	it	ne
 	strne	r2, [r3]
-	ldr	r1, [r5, #-20]
+	ldr	r1, [r5, #-16]
 	itttt	ne
 	movne	r2, #504
-	ldrne	r3, [r5, #-20]
+	ldrne	r3, [r5, #-16]
 	strne	r2, [r3, #4]
 	strne	r0, [r3, #8]
 	it	ne
@@ -22156,80 +22501,80 @@ rknand_sys_storage_ioctl:
 	movs	r0, #0
 	str	r3, [r1, #16]
 	bl	StorageSysDataStore
-	ldr	r3, [r5, #-32]
-	ldr	r2, .L3621
+	ldr	r3, [r5, #-28]
+	ldr	r2, .L3662
 	ldr	r1, [r3]
 	cmp	r1, r2
-	beq	.L3567
+	beq	.L3605
 	str	r2, [r3]
 	mov	r2, #504
-	ldr	r3, .L3621+4
-	ldr	r3, [r3, #-32]
+	ldr	r3, .L3662+4
+	ldr	r3, [r3, #-28]
 	str	r2, [r3, #4]
 	movs	r2, #0
 	str	r2, [r3, #8]
-.L3567:
-	ldr	r0, [r5, #-32]
+.L3605:
+	ldr	r0, [r5, #-28]
 	movs	r1, #128
 	movs	r4, #0
 	adds	r0, r0, #64
 	str	r4, [r0, #-52]
 	bl	__memzero
 	movs	r0, #1
-	ldr	r1, [r5, #-32]
+	ldr	r1, [r5, #-28]
 	bl	StorageSysDataStore
 	movs	r3, #1
-	str	r3, [r5, #-24]
-	b	.L3542
-.L3524:
-	ldr	r0, .L3621+36
+	str	r3, [r5, #-20]
+	b	.L3580
+.L3562:
+	ldr	r0, .L3662+36
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3561
+	bne	.L3599
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3621+40
+	ldr	r3, .L3662+40
 	cmp	r2, r3
-	bne	.L3558
+	bne	.L3596
 	ldr	r2, [sp, #12]
 	cmp	r2, #512
-	bhi	.L3558
+	bhi	.L3596
 	add	r0, sp, #16
-	ldr	r1, .L3621+44
-	b	.L3605
-.L3525:
-	ldr	r0, .L3621+48
+	ldr	r1, .L3662+44
+	b	.L3655
+.L3563:
+	ldr	r0, .L3662+48
 	cmp	r4, r0
 	mov	r7, r0
-	bne	.L3568
-	ldr	r0, .L3621+52
-	b	.L3606
-.L3568:
-	ldr	r3, .L3621+56
+	bne	.L3606
+	ldr	r0, .L3662+52
+	b	.L3645
+.L3606:
+	ldr	r3, .L3662+56
 	cmp	r4, r3
 	ite	eq
-	ldreq	r0, .L3621+60
-	ldrne	r0, .L3621+64
-.L3606:
+	ldreq	r0, .L3662+60
+	ldrne	r0, .L3662+64
+.L3645:
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3561
+	bne	.L3599
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3621+68
+	ldr	r3, .L3662+68
 	cmp	r2, r3
-	bne	.L3613
-	ldr	r3, .L3621+56
-	ldr	r6, .L3621+4
+	bne	.L3651
+	ldr	r3, .L3662+56
+	ldr	r6, .L3662+4
 	cmp	r4, r3
-	bne	.L3571
-	ldr	r3, [r6, #-32]
+	bne	.L3609
+	ldr	r3, [r6, #-28]
 	mov	r0, r5
 	add	r1, sp, #8
 	movs	r2, #16
@@ -22238,29 +22583,29 @@ rknand_sys_storage_ioctl:
 	strb	r3, [sp, #16]
 	bl	rk_copy_to_user
 	cmp	r0, #0
-	beq	.L3515
-	b	.L3613
-.L3571:
-	ldr	r3, [r6, #496]
+	beq	.L3553
+	b	.L3651
+.L3609:
+	ldr	r3, [r6, #500]
 	cmp	r3, #10
-	bhi	.L3613
-	ldr	r1, [r6, #-32]
+	bhi	.L3651
+	ldr	r1, [r6, #-28]
 	ldr	r3, [sp, #12]
 	ldr	r2, [r1, #24]
 	cmp	r2, r3
-	beq	.L3572
-	cbz	r2, .L3572
+	beq	.L3610
+	cbz	r2, .L3610
 	mov	r1, r3
-	ldr	r0, .L3621+72
+	ldr	r0, .L3662+72
 	bl	printk
-	ldr	r3, [r6, #496]
+	ldr	r3, [r6, #500]
 	adds	r3, r3, #1
-	str	r3, [r6, #496]
-	b	.L3613
-.L3572:
+	str	r3, [r6, #500]
+	b	.L3651
+.L3610:
 	movs	r2, #0
 	cmp	r4, r7
-	str	r2, [r6, #496]
+	str	r2, [r6, #500]
 	mov	r0, #1
 	itet	eq
 	moveq	r3, r2
@@ -22270,120 +22615,124 @@ rknand_sys_storage_ioctl:
 	str	r2, [r1, #20]
 	bl	StorageSysDataStore
 	adds	r0, r0, #1
-	bne	.L3608
+	bne	.L3648
 	mvn	r4, #1
-	b	.L3542
-.L3622:
+	b	.L3580
+.L3663:
 	.align	2
-.L3621:
+.L3662:
 	.word	1263358532
 	.word	.LANCHOR4
 	.word	-1067903959
-	.word	.LC167
-	.word	.LC168
+	.word	.LC172
+	.word	.LC173
 	.word	1112753220
 	.word	1146313043
-	.word	.LC169
+	.word	.LC174
 	.word	1112755781
-	.word	.LC170
+	.word	.LC175
 	.word	1094995539
-	.word	.LANCHOR4-16
+	.word	.LANCHOR4-12
 	.word	1074031666
-	.word	.LC171
+	.word	.LC176
 	.word	1074031676
-	.word	.LC172
-	.word	.LC173
+	.word	.LC177
+	.word	.LC178
 	.word	1280262987
-	.word	.LC174
-.L3537:
-	ldr	r0, .L3623
+	.word	.LC179
+.L3575:
+	ldr	r0, .L3664
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3561
+	bne	.L3599
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3623+4
+	ldr	r3, .L3664+4
 	cmp	r2, r3
-	bne	.L3558
+	bne	.L3596
 	ldr	r2, [sp, #12]
 	cmp	r2, #504
-	bhi	.L3558
-	ldr	r3, .L3623+8
+	bhi	.L3596
+	ldr	r3, .L3664+8
 	add	r0, sp, #16
 	cmp	r4, r3
-	ldr	r3, .L3623+12
+	ldr	r3, .L3664+12
 	ite	eq
-	ldreq	r1, [r3, #500]
-	ldrne	r1, [r3, #504]
+	ldreq	r1, [r3, #504]
+	ldrne	r1, [r3, #508]
 	adds	r1, r1, #8
-.L3605:
+.L3655:
 	bl	memcpy
-	b	.L3604
-.L3534:
-	ldr	r0, .L3623+16
+.L3656:
+	mov	r0, r5
+	add	r1, sp, #8
+	mov	r2, #520
+	b	.L3642
+.L3572:
+	ldr	r0, .L3664+16
 	bl	printk
+	add	r0, sp, #8
 	mov	r1, r5
 	mov	r2, #520
-	add	r0, sp, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3561
+	bne	.L3599
 	ldr	r2, [sp, #8]
-	ldr	r3, .L3623+4
+	ldr	r3, .L3664+4
 	cmp	r2, r3
-	bne	.L3558
+	bne	.L3596
 	ldr	r2, [sp, #12]
 	cmp	r2, #504
-	bhi	.L3558
+	bhi	.L3596
 	cmp	r4, r6
 	add	r2, r2, #8
-	ldr	r4, .L3623+12
-	bne	.L3576
+	ldr	r4, .L3664+12
+	bne	.L3614
 	add	r1, sp, #8
-	ldr	r0, [r4, #500]
+	ldr	r0, [r4, #504]
 	bl	memcpy
 	movs	r0, #2
-	ldr	r1, [r4, #500]
-	b	.L3609
-.L3576:
+	ldr	r1, [r4, #504]
+	b	.L3649
+.L3614:
 	add	r1, sp, #8
-	ldr	r0, [r4, #504]
+	ldr	r0, [r4, #508]
 	bl	memcpy
-	ldr	r1, [r4, #504]
+	ldr	r1, [r4, #508]
 	movs	r0, #3
-.L3609:
+.L3649:
 	bl	StorageSysDataStore
 	mov	r4, r0
-.L3542:
-	ldr	r0, .L3623+20
+.L3580:
+	ldr	r0, .L3664+20
 	mov	r1, r4
 	bl	printk
 	mov	r0, r4
-	b	.L3515
-.L3577:
+	b	.L3553
+.L3615:
 	mvn	r0, #21
-	b	.L3515
-.L3578:
+	b	.L3553
+.L3616:
 	mvn	r0, #1
-	b	.L3515
-.L3579:
+	b	.L3553
+.L3617:
 	mvn	r0, #2
-.L3515:
+.L3553:
 	add	sp, sp, #532
 	@ sp needed
 	pop	{r4, r5, r6, r7, pc}
-.L3624:
+.L3665:
 	.align	2
-.L3623:
-	.word	.LC175
+.L3664:
+	.word	.LC180
 	.word	1145980246
 	.word	1074034192
 	.word	.LANCHOR4
-	.word	.LC176
-	.word	.LC177
+	.word	.LC181
+	.word	.LC182
 	.fnend
 	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
 	.align	1
@@ -22398,55 +22747,55 @@ rk_ftl_storage_sys_init:
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
 	mov	r2, #512
-	ldr	r4, .L3634
+	ldr	r4, .L3675
 	movs	r5, #0
-	sub	r0, r4, #16
-	ldr	r1, [r4, #-52]
-	str	r5, [r4, #-36]
+	sub	r0, r4, #12
+	ldr	r1, [r4, #-48]
+	str	r5, [r4, #-32]
 	add	r3, r1, #512
-	str	r3, [r4, #-32]
-	str	r1, [r4, #-20]
+	str	r3, [r4, #-28]
+	str	r1, [r4, #-16]
 	add	r3, r1, #1024
 	add	r1, r1, #1536
-	str	r3, [r4, #500]
-	str	r1, [r4, #504]
+	str	r3, [r4, #504]
+	str	r1, [r4, #508]
 	bl	ftl_memcpy
-	ldr	r6, [r4, #-20]
-	str	r5, [r4, #-28]
-	str	r5, [r4, #496]
+	ldr	r6, [r4, #-16]
+	str	r5, [r4, #-24]
+	str	r5, [r4, #500]
 	ldr	r3, [r6, #16]
 	ldr	r7, [r6, #508]
-	str	r3, [r4, #-24]
-	cbz	r7, .L3626
+	str	r3, [r4, #-20]
+	cbz	r7, .L3667
 	mov	r0, r6
 	mov	r1, #508
 	bl	JSHash
 	cmp	r7, r0
-	beq	.L3626
+	beq	.L3667
 	str	r5, [r6, #16]
-	ldr	r0, .L3634+4
-	str	r5, [r4, #-24]
+	ldr	r0, .L3675+4
+	str	r5, [r4, #-20]
 	bl	printk
-.L3626:
-	ldr	r3, [r4, #-24]
-	cbz	r3, .L3627
-	ldr	r2, .L3634+8
-	ldr	r3, .L3634
-	str	r2, [r3, #-28]
-.L3627:
-	ldr	r1, [r4, #500]
+.L3667:
+	ldr	r3, [r4, #-20]
+	cbz	r3, .L3668
+	ldr	r2, .L3675+8
+	ldr	r3, .L3675
+	str	r2, [r3, #-24]
+.L3668:
+	ldr	r1, [r4, #504]
 	movs	r0, #2
 	bl	StorageSysDataLoad
-	ldr	r1, [r4, #504]
+	ldr	r1, [r4, #508]
 	movs	r0, #3
 	bl	StorageSysDataLoad
 	pop	{r3, r4, r5, r6, r7, lr}
 	b	rknand_sys_storage_init
-.L3635:
+.L3676:
 	.align	2
-.L3634:
+.L3675:
 	.word	.LANCHOR4
-	.word	.LC178
+	.word	.LC183
 	.word	-1067903959
 	.fnend
 	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
@@ -22473,77 +22822,66 @@ rk_ftl_vendor_storage_init:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	push	{r4, r5, r6, r7, r8, r9, r10, lr}
-	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
 	mov	r0, #65536
-	ldr	r1, .L3647
-	movs	r2, #4
-	bl	kmalloc_order
-	ldr	r5, .L3647+4
-	str	r0, [r5, #508]
+	bl	ftl_malloc
+	ldr	r5, .L3687
+	str	r0, [r5, #512]
 	cmp	r0, #0
-	beq	.L3643
+	beq	.L3684
 	movs	r7, #0
-	ldr	r9, .L3647+12
-	mov	r10, r5
+	ldr	r8, .L3687+8
+	mov	r9, r5
 	mov	r4, r7
 	mov	r6, r7
-.L3641:
-	ldr	r8, [r5, #508]
-	bl	rknand_device_lock
-	adds	r0, r6, #2
+.L3682:
+	lsls	r0, r6, #7
 	movs	r1, #128
-	mov	r2, r8
-	lsls	r0, r0, #7
-	bl	FtlVendorPartRead
-	mov	r8, r0
-	bl	rknand_device_unlock
-	cmp	r8, #0
-	bne	.L3639
-	ldr	r3, [r10, #508]
-	ldr	r0, .L3647+8
+	ldr	r2, [r5, #512]
+	bl	FlashBootVendorRead
+	cmp	r0, #0
+	bne	.L3680
+	ldr	r3, [r9, #512]
+	ldr	r0, .L3687+4
 	add	r2, r3, #65280
 	adds	r2, r2, #252
 	ldr	r1, [r3]
 	ldr	r3, [r3, #4]
 	ldr	r2, [r2]
 	bl	printk
-	ldr	r8, [r10, #508]
-	ldr	r3, [r8]
-	cmp	r3, r9
-	bne	.L3640
-	add	r3, r8, #65280
-	ldr	r2, [r8, #4]
+	ldr	r2, [r9, #512]
+	ldr	r3, [r2]
+	cmp	r3, r8
+	bne	.L3681
+	add	r3, r2, #65280
+	ldr	r1, [r2, #4]
 	adds	r3, r3, #252
 	ldr	r3, [r3]
-	cmp	r3, r2
-	bne	.L3640
+	cmp	r3, r1
+	bne	.L3681
 	cmp	r4, r3
 	itt	cc
 	movcc	r7, r6
 	movcc	r4, r3
-.L3640:
-	cbnz	r6, .L3646
+.L3681:
+	cbnz	r6, .L3686
 	movs	r6, #1
-	b	.L3641
-.L3646:
-	cbz	r4, .L3642
-	bl	rknand_device_lock
+	b	.L3682
+.L3686:
+	cbz	r4, .L3683
 	lsls	r0, r7, #7
-	add	r0, r0, #256
 	movs	r1, #128
-	mov	r2, r8
-	bl	FtlVendorPartRead
-	mov	r4, r0
-	bl	rknand_device_unlock
-	cbz	r4, .L3645
-	b	.L3639
-.L3642:
-	mov	r0, r8
+	bl	FlashBootVendorRead
+	cbnz	r0, .L3680
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L3683:
+	mov	r0, r2
 	mov	r1, #65536
 	bl	__memzero
-	ldr	r3, [r5, #508]
-	ldr	r2, .L3647+12
+	ldr	r3, [r5, #512]
+	ldr	r2, .L3687+8
+	mov	r0, r4
 	str	r6, [r3, #4]
 	str	r2, [r3]
 	movw	r2, #65532
@@ -22551,25 +22889,22 @@ rk_ftl_vendor_storage_init:
 	movw	r2, #64504
 	strh	r4, [r3, #12]	@ movhi
 	strh	r2, [r3, #14]	@ movhi
-.L3645:
-	mov	r0, r4
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L3639:
-	ldr	r0, [r5, #508]
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L3680:
+	ldr	r0, [r5, #512]
 	bl	kfree
 	movs	r3, #0
 	mov	r0, #-1
-	str	r3, [r5, #508]
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L3643:
+	str	r3, [r5, #512]
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L3684:
 	mvn	r0, #11
-	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
-.L3648:
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L3688:
 	.align	2
-.L3647:
-	.word	37748929
+.L3687:
 	.word	.LANCHOR4
-	.word	.LC179
+	.word	.LC184
 	.word	1380668996
 	.fnend
 	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
@@ -22584,18 +22919,18 @@ rk_ftl_vendor_read:
 	@ frame_needed = 0, uses_anonymous_args = 0
 	push	{r3, r4, r5, r6, r7, lr}
 	.save {r3, r4, r5, r6, r7, lr}
-	ldr	r3, .L3655
-	ldr	r5, [r3, #508]
-	cbz	r5, .L3654
+	ldr	r3, .L3695
+	ldr	r5, [r3, #512]
+	cbz	r5, .L3694
 	ldrh	r7, [r5, #10]
 	movs	r3, #0
-.L3651:
+.L3691:
 	cmp	r3, r7
-	bcs	.L3654
+	bcs	.L3694
 	add	r6, r5, r3, lsl #3
 	ldrh	r4, [r6, #16]
 	cmp	r4, r0
-	bne	.L3652
+	bne	.L3692
 	ldrh	r3, [r6, #20]
 	mov	r0, r1
 	cmp	r2, r3
@@ -22608,15 +22943,15 @@ rk_ftl_vendor_read:
 	bl	memcpy
 	mov	r0, r4
 	pop	{r3, r4, r5, r6, r7, pc}
-.L3652:
+.L3692:
 	adds	r3, r3, #1
-	b	.L3651
-.L3654:
+	b	.L3691
+.L3694:
 	mov	r0, #-1
 	pop	{r3, r4, r5, r6, r7, pc}
-.L3656:
+.L3696:
 	.align	2
-.L3655:
+.L3695:
 	.word	.LANCHOR4
 	.fnend
 	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
@@ -22632,49 +22967,49 @@ rk_ftl_vendor_write:
 	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 	mov	r9, r2
-	ldr	r2, .L3679
+	ldr	r2, .L3719
 	.pad #28
 	sub	sp, sp, #28
 	mov	ip, r0
 	mov	r3, r1
-	ldr	r4, [r2, #508]
+	ldr	r4, [r2, #512]
 	cmp	r4, #0
-	beq	.L3672
-	add	r6, r9, #63
+	beq	.L3712
+	add	r7, r9, #63
 	ldrh	r1, [r4, #8]
 	ldrh	r2, [r4, #10]
-	bic	r6, r6, #63
-	movs	r7, #0
+	bic	r7, r7, #63
+	movs	r6, #0
 	str	r1, [sp, #4]
-.L3659:
-	cmp	r7, r2
-	bcs	.L3677
-	add	r5, r4, r7, lsl #3
+.L3699:
+	cmp	r6, r2
+	bcs	.L3717
+	add	r5, r4, r6, lsl #3
 	ldrh	r1, [r5, #16]
 	cmp	r1, ip
-	bne	.L3660
+	bne	.L3700
 	ldrh	r1, [r5, #20]
 	add	fp, r4, #1024
 	adds	r1, r1, #63
 	bic	r1, r1, #63
 	str	r1, [sp, #8]
 	cmp	r9, r1
-	bls	.L3661
+	bls	.L3701
 	ldrh	r1, [r4, #14]
-	cmp	r1, r6
-	bcc	.L3672
+	cmp	r1, r7
+	bcc	.L3712
 	ldrh	r8, [r5, #18]
 	subs	r2, r2, #1
 	str	r2, [sp, #12]
-.L3662:
+.L3702:
 	ldr	r2, [sp, #12]
 	adds	r5, r5, #8
-	cmp	r7, r2
-	bcs	.L3678
+	cmp	r6, r2
+	bcs	.L3718
 	ldrh	r2, [r5, #16]
 	add	r0, fp, r8
 	ldrh	r1, [r5, #18]
-	adds	r7, r7, #1
+	adds	r6, r6, #1
 	strh	r8, [r5, #10]	@ movhi
 	strh	r2, [r5, #8]	@ movhi
 	add	r1, r1, fp
@@ -22689,49 +23024,49 @@ rk_ftl_vendor_write:
 	bl	memcpy
 	ldr	r3, [sp, #20]
 	ldr	ip, [sp, #16]
-	b	.L3662
-.L3678:
-	add	r7, r4, r7, lsl #3
-	uxth	r5, r8
-	add	r0, fp, r5
+	b	.L3702
+.L3718:
+	add	r6, r4, r6, lsl #3
+	uxth	r8, r8
+	add	r0, fp, r8
 	mov	r1, r3
-	strh	r5, [r7, #18]	@ movhi
+	strh	r8, [r6, #18]	@ movhi
 	mov	r2, r9
-	strh	ip, [r7, #16]	@ movhi
-	uxth	r6, r6
-	strh	r9, [r7, #20]	@ movhi
-	add	r5, r5, r6
+	strh	ip, [r6, #16]	@ movhi
+	uxth	r7, r7
+	strh	r9, [r6, #20]	@ movhi
+	add	r8, r8, r7
 	bl	memcpy
-	ldrh	r2, [r4, #14]
-	strh	r5, [r4, #12]	@ movhi
+	ldrh	r5, [r4, #14]
 	ldr	r3, [sp, #8]
-	add	r3, r3, r2
-	subs	r6, r3, r6
-	strh	r6, [r4, #14]	@ movhi
-	b	.L3676
-.L3661:
+	strh	r8, [r4, #12]	@ movhi
+	add	r3, r3, r5
+	subs	r7, r3, r7
+	strh	r7, [r4, #14]	@ movhi
+	b	.L3716
+.L3701:
 	ldrh	r0, [r5, #18]
 	mov	r1, r3
 	mov	r2, r9
 	add	r0, r0, fp
 	bl	memcpy
 	strh	r9, [r5, #20]	@ movhi
-	b	.L3676
-.L3660:
-	adds	r7, r7, #1
-	b	.L3659
-.L3677:
+	b	.L3716
+.L3700:
+	adds	r6, r6, #1
+	b	.L3699
+.L3717:
 	ldrh	r1, [r4, #14]
-	cmp	r1, r6
-	bcc	.L3672
+	cmp	r1, r7
+	bcc	.L3712
 	add	r2, r4, r2, lsl #3
-	uxth	r6, r6
-	subs	r1, r1, r6
+	uxth	r7, r7
+	subs	r1, r1, r7
 	strh	ip, [r2, #16]	@ movhi
 	ldrh	r0, [r4, #12]
 	strh	r9, [r2, #20]	@ movhi
 	strh	r0, [r2, #18]	@ movhi
-	add	r0, r0, r6
+	add	r0, r0, r7
 	strh	r1, [r4, #14]	@ movhi
 	mov	r1, r3
 	strh	r0, [r4, #12]	@ movhi
@@ -22743,12 +23078,14 @@ rk_ftl_vendor_write:
 	ldrh	r3, [r4, #10]
 	adds	r3, r3, #1
 	strh	r3, [r4, #10]	@ movhi
-.L3676:
+.L3716:
 	ldr	r3, [r4, #4]
 	movw	r2, #65532
+	movs	r1, #128
 	adds	r3, r3, #1
 	str	r3, [r4, #4]
 	str	r3, [r4, r2]
+	mov	r2, r4
 	ldrh	r3, [r4, #8]
 	adds	r3, r3, #1
 	uxth	r3, r3
@@ -22756,25 +23093,20 @@ rk_ftl_vendor_write:
 	it	hi
 	movhi	r3, #0
 	strh	r3, [r4, #8]	@ movhi
-	bl	rknand_device_lock
-	movs	r2, #128
-	movs	r0, #16
 	ldr	r3, [sp, #4]
-	lsls	r1, r3, #7
-	mov	r3, r4
-	bl	FtlWrite
-	bl	rknand_device_unlock
+	lsls	r0, r3, #7
+	bl	FlashBootVendorWrite
 	movs	r0, #0
-	b	.L3658
-.L3672:
+	b	.L3698
+.L3712:
 	mov	r0, #-1
-.L3658:
+.L3698:
 	add	sp, sp, #28
 	@ sp needed
 	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
-.L3680:
+.L3720:
 	.align	2
-.L3679:
+.L3719:
 	.word	.LANCHOR4
 	.fnend
 	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
@@ -22787,44 +23119,42 @@ rk_ftl_vendor_storage_ioctl:
 	.fnstart
 	@ args = 0, pretend = 0, frame = 0
 	@ frame_needed = 0, uses_anonymous_args = 0
-	ldr	r3, .L3697
 	push	{r4, r5, r6, lr}
 	.save {r4, r5, r6, lr}
+	mov	r0, #4096
 	mov	r6, r1
-	ldr	r0, [r3, #48]
 	mov	r5, r2
-	ldr	r1, .L3697+4
-	bl	kmem_cache_alloc
+	bl	ftl_malloc
 	mov	r4, r0
 	cmp	r0, #0
-	beq	.L3690
-	ldr	r3, .L3697+8
+	beq	.L3730
+	ldr	r3, .L3737
 	cmp	r6, r3
-	beq	.L3684
+	beq	.L3724
 	adds	r3, r3, #1
 	cmp	r6, r3
-	beq	.L3685
-	b	.L3696
-.L3684:
+	beq	.L3725
+	b	.L3736
+.L3724:
 	mov	r1, r5
 	movs	r2, #8
 	bl	rk_copy_from_user
 	cmp	r0, #0
-	bne	.L3696
+	bne	.L3736
 	ldr	r2, [r4]
-	ldr	r3, .L3697+12
+	ldr	r3, .L3737+4
 	cmp	r2, r3
-	beq	.L3687
-.L3688:
+	beq	.L3727
+.L3728:
 	mov	r5, #-1
-	b	.L3683
-.L3687:
+	b	.L3723
+.L3727:
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_read
 	adds	r3, r0, #1
-	beq	.L3688
+	beq	.L3728
 	uxth	r2, r0
 	strh	r0, [r4, #6]	@ movhi
 	mov	r1, r4
@@ -22835,47 +23165,45 @@ rk_ftl_vendor_storage_ioctl:
 	ite	eq
 	moveq	r5, #0
 	mvnne	r5, #13
-	b	.L3683
-.L3685:
+	b	.L3723
+.L3725:
 	mov	r1, r5
 	movs	r2, #8
 	bl	rk_copy_from_user
-	cbnz	r0, .L3696
+	cbnz	r0, .L3736
 	ldr	r2, [r4]
-	ldr	r3, .L3697+12
+	ldr	r3, .L3737+4
 	cmp	r2, r3
-	bne	.L3688
+	bne	.L3728
 	ldrh	r2, [r4, #6]
 	movw	r3, #4087
 	cmp	r2, r3
-	bhi	.L3688
+	bhi	.L3728
 	mov	r0, r4
 	mov	r1, r5
 	adds	r2, r2, #8
 	bl	rk_copy_from_user
-	cbnz	r0, .L3696
+	cbnz	r0, .L3736
 	ldrh	r0, [r4, #4]
 	add	r1, r4, #8
 	ldrh	r2, [r4, #6]
 	bl	rk_ftl_vendor_write
 	mov	r5, r0
-	b	.L3683
-.L3696:
+	b	.L3723
+.L3736:
 	mvn	r5, #13
-.L3683:
+.L3723:
 	mov	r0, r4
 	bl	kfree
-	b	.L3682
-.L3690:
+	b	.L3722
+.L3730:
 	mov	r5, #-1
-.L3682:
+.L3722:
 	mov	r0, r5
 	pop	{r4, r5, r6, pc}
-.L3698:
+.L3738:
 	.align	2
-.L3697:
-	.word	kmalloc_caches
-	.word	37748928
+.L3737:
 	.word	1074034177
 	.word	1448232273
 	.fnend
@@ -22910,7 +23238,6 @@ rk_ftl_vendor_storage_ioctl:
 	.global	random_seed
 	.global	gSlcNandParaInfo
 	.global	gNandParaInfo
-	.global	NandFlashParaTbl
 	.global	g_page_map_check_enable
 	.global	g_power_lost_ecc_error_blk
 	.global	g_power_lost_recovery_flag
@@ -23123,9 +23450,9 @@ rk_ftl_vendor_storage_ioctl:
 	.section	.rodata
 	.align	2
 .LANCHOR3 = . + 0
-	.type	__func__.21081, %object
-	.size	__func__.21081, 11
-__func__.21081:
+	.type	__func__.17344, %object
+	.size	__func__.17344, 11
+__func__.17344:
 	.ascii	"FtlMemInit\000"
 .LC0:
 	.byte	60
@@ -23133,14 +23460,14 @@ __func__.21081:
 	.byte	24
 	.byte	16
 	.space	1
-	.type	__func__.22011, %object
-	.size	__func__.22011, 21
-__func__.22011:
+	.type	__func__.18293, %object
+	.size	__func__.18293, 21
+__func__.18293:
 	.ascii	"FtlVpcCheckAndModify\000"
 	.space	3
-	.type	__func__.21152, %object
-	.size	__func__.21152, 8
-__func__.21152:
+	.type	__func__.17417, %object
+	.size	__func__.17417, 8
+__func__.17417:
 	.ascii	"FtlInit\000"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC1:
@@ -23151,360 +23478,371 @@ __func__.21152:
 .LC3:
 	.ascii	"remove_from_free_sys_Queue %x\012\000"
 .LC4:
-	.ascii	"FLASH INFO:\012\000"
+	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
 .LC5:
-	.ascii	"FLASH ID: %x\012\000"
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
+	.ascii	"\000"
 .LC6:
-	.ascii	"Device Capacity: %d MB\012\000"
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
 .LC7:
-	.ascii	"FMWAIT: %x %x %x %x\012\000"
+	.ascii	"FLASH INFO:\012\000"
 .LC8:
-	.ascii	"FTL INFO:\012\000"
+	.ascii	"FLASH ID: %x\012\000"
 .LC9:
-	.ascii	"g_MaxLpn = 0x%x\012\000"
+	.ascii	"Device Capacity: %d MB\012\000"
 .LC10:
-	.ascii	"g_VaildLpn = 0x%x\012\000"
+	.ascii	"FMWAIT: %x %x %x %x\012\000"
 .LC11:
-	.ascii	"read_page_count = 0x%x\012\000"
+	.ascii	"FTL INFO:\012\000"
 .LC12:
-	.ascii	"discard_page_count = 0x%x\012\000"
+	.ascii	"g_MaxLpn = 0x%x\012\000"
 .LC13:
-	.ascii	"write_page_count = 0x%x\012\000"
+	.ascii	"g_VaildLpn = 0x%x\012\000"
 .LC14:
-	.ascii	"cache_write_count = 0x%x\012\000"
+	.ascii	"read_page_count = 0x%x\012\000"
 .LC15:
-	.ascii	"l2p_write_count = 0x%x\012\000"
+	.ascii	"discard_page_count = 0x%x\012\000"
 .LC16:
-	.ascii	"gc_page_count = 0x%x\012\000"
+	.ascii	"write_page_count = 0x%x\012\000"
 .LC17:
-	.ascii	"totle_write = %d MB\012\000"
+	.ascii	"cache_write_count = 0x%x\012\000"
 .LC18:
-	.ascii	"totle_read = %d MB\012\000"
+	.ascii	"l2p_write_count = 0x%x\012\000"
 .LC19:
-	.ascii	"GSV = 0x%x\012\000"
+	.ascii	"gc_page_count = 0x%x\012\000"
 .LC20:
-	.ascii	"GDV = 0x%x\012\000"
+	.ascii	"totle_write = %d MB\012\000"
 .LC21:
-	.ascii	"bad blk num = %d %d\012\000"
+	.ascii	"totle_read = %d MB\012\000"
 .LC22:
-	.ascii	"free_superblocks = 0x%x\012\000"
+	.ascii	"GSV = 0x%x\012\000"
 .LC23:
-	.ascii	"mlc_EC = 0x%x\012\000"
+	.ascii	"GDV = 0x%x\012\000"
 .LC24:
-	.ascii	"slc_EC = 0x%x\012\000"
+	.ascii	"bad blk num = %d %d\012\000"
 .LC25:
-	.ascii	"avg_EC = 0x%x\012\000"
+	.ascii	"free_superblocks = 0x%x\012\000"
 .LC26:
-	.ascii	"sys_EC = 0x%x\012\000"
+	.ascii	"mlc_EC = 0x%x\012\000"
 .LC27:
-	.ascii	"max_EC = 0x%x\012\000"
+	.ascii	"slc_EC = 0x%x\012\000"
 .LC28:
-	.ascii	"min_EC = 0x%x\012\000"
+	.ascii	"avg_EC = 0x%x\012\000"
 .LC29:
-	.ascii	"PLT = 0x%x\012\000"
+	.ascii	"sys_EC = 0x%x\012\000"
 .LC30:
-	.ascii	"POT = 0x%x\012\000"
+	.ascii	"max_EC = 0x%x\012\000"
 .LC31:
-	.ascii	"MaxSector = 0x%x\012\000"
+	.ascii	"min_EC = 0x%x\012\000"
 .LC32:
-	.ascii	"init_sys_blks_pp = 0x%x\012\000"
+	.ascii	"PLT = 0x%x\012\000"
 .LC33:
-	.ascii	"sys_blks_pp = 0x%x\012\000"
+	.ascii	"POT = 0x%x\012\000"
 .LC34:
-	.ascii	"free sysblock = 0x%x\012\000"
+	.ascii	"MaxSector = 0x%x\012\000"
 .LC35:
-	.ascii	"data_blks_pp = 0x%x\012\000"
+	.ascii	"init_sys_blks_pp = 0x%x\012\000"
 .LC36:
-	.ascii	"data_op_blks_pp = 0x%x\012\000"
+	.ascii	"sys_blks_pp = 0x%x\012\000"
 .LC37:
-	.ascii	"max_data_blks = 0x%x\012\000"
+	.ascii	"free sysblock = 0x%x\012\000"
 .LC38:
-	.ascii	"Sys.id = 0x%x\012\000"
+	.ascii	"data_blks_pp = 0x%x\012\000"
 .LC39:
-	.ascii	"Bbt.id = 0x%x\012\000"
+	.ascii	"data_op_blks_pp = 0x%x\012\000"
 .LC40:
-	.ascii	"ACT.page = 0x%x\012\000"
+	.ascii	"max_data_blks = 0x%x\012\000"
 .LC41:
-	.ascii	"ACT.plane = 0x%x\012\000"
+	.ascii	"Sys.id = 0x%x\012\000"
 .LC42:
-	.ascii	"ACT.id = 0x%x\012\000"
+	.ascii	"Bbt.id = 0x%x\012\000"
 .LC43:
-	.ascii	"ACT.mode = 0x%x\012\000"
+	.ascii	"ACT.page = 0x%x\012\000"
 .LC44:
-	.ascii	"ACT.a_pages = 0x%x\012\000"
+	.ascii	"ACT.plane = 0x%x\012\000"
 .LC45:
-	.ascii	"ACT VPC = 0x%x\012\000"
+	.ascii	"ACT.id = 0x%x\012\000"
 .LC46:
-	.ascii	"BUF.page = 0x%x\012\000"
+	.ascii	"ACT.mode = 0x%x\012\000"
 .LC47:
-	.ascii	"BUF.plane = 0x%x\012\000"
+	.ascii	"ACT.a_pages = 0x%x\012\000"
 .LC48:
-	.ascii	"BUF.id = 0x%x\012\000"
+	.ascii	"ACT VPC = 0x%x\012\000"
 .LC49:
-	.ascii	"BUF.mode = 0x%x\012\000"
+	.ascii	"BUF.page = 0x%x\012\000"
 .LC50:
-	.ascii	"BUF.a_pages = 0x%x\012\000"
+	.ascii	"BUF.plane = 0x%x\012\000"
 .LC51:
-	.ascii	"BUF VPC = 0x%x\012\000"
+	.ascii	"BUF.id = 0x%x\012\000"
 .LC52:
-	.ascii	"TMP.page = 0x%x\012\000"
+	.ascii	"BUF.mode = 0x%x\012\000"
 .LC53:
-	.ascii	"TMP.plane = 0x%x\012\000"
+	.ascii	"BUF.a_pages = 0x%x\012\000"
 .LC54:
-	.ascii	"TMP.id = 0x%x\012\000"
+	.ascii	"BUF VPC = 0x%x\012\000"
 .LC55:
-	.ascii	"TMP.mode = 0x%x\012\000"
+	.ascii	"TMP.page = 0x%x\012\000"
 .LC56:
-	.ascii	"TMP.a_pages = 0x%x\012\000"
+	.ascii	"TMP.plane = 0x%x\012\000"
 .LC57:
-	.ascii	"GC.page = 0x%x\012\000"
+	.ascii	"TMP.id = 0x%x\012\000"
 .LC58:
-	.ascii	"GC.plane = 0x%x\012\000"
+	.ascii	"TMP.mode = 0x%x\012\000"
 .LC59:
-	.ascii	"GC.id = 0x%x\012\000"
+	.ascii	"TMP.a_pages = 0x%x\012\000"
 .LC60:
-	.ascii	"GC.mode = 0x%x\012\000"
+	.ascii	"GC.page = 0x%x\012\000"
 .LC61:
-	.ascii	"GC.a_pages = 0x%x\012\000"
+	.ascii	"GC.plane = 0x%x\012\000"
 .LC62:
-	.ascii	"WR_CHK = 0x%x %x %x %x\012\000"
+	.ascii	"GC.id = 0x%x\012\000"
 .LC63:
-	.ascii	"Read Err Cnt = 0x%x\012\000"
+	.ascii	"GC.mode = 0x%x\012\000"
 .LC64:
-	.ascii	"Prog Err Cnt = 0x%x\012\000"
+	.ascii	"GC.a_pages = 0x%x\012\000"
 .LC65:
-	.ascii	"gc_free_blk_th= 0x%x\012\000"
+	.ascii	"WR_CHK = 0x%x %x %x %x\012\000"
 .LC66:
-	.ascii	"gc_merge_free_blk_th= 0x%x\012\000"
+	.ascii	"Read Err Cnt = 0x%x\012\000"
 .LC67:
-	.ascii	"gc_skip_write_count= 0x%x\012\000"
+	.ascii	"Prog Err Cnt = 0x%x\012\000"
 .LC68:
-	.ascii	"gc_blk_index= 0x%x\012\000"
+	.ascii	"gc_free_blk_th= 0x%x\012\000"
 .LC69:
-	.ascii	"free min EC= 0x%x\012\000"
+	.ascii	"gc_merge_free_blk_th= 0x%x\012\000"
 .LC70:
-	.ascii	"free max EC= 0x%x\012\000"
+	.ascii	"gc_skip_write_count= 0x%x\012\000"
 .LC71:
-	.ascii	"GC__SB VPC = 0x%x\012\000"
+	.ascii	"gc_blk_index= 0x%x\012\000"
 .LC72:
-	.ascii	"%d. [0x%x]=0x%x 0x%x  0x%x\012\000"
+	.ascii	"free min EC= 0x%x\012\000"
 .LC73:
-	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
+	.ascii	"free max EC= 0x%x\012\000"
 .LC74:
-	.ascii	"%s\012\000"
+	.ascii	"GC__SB VPC = 0x%x\012\000"
 .LC75:
-	.ascii	"FTL version: 5.0.47 20171213\000"
+	.ascii	"%d. [0x%x]=0x%x 0x%x  0x%x\012\000"
 .LC76:
-	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
-	.ascii	"\012\000"
+	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
 .LC77:
-	.ascii	"FtlGcRefreshBlock  0x%x\012\000"
+	.ascii	"%s\012\000"
 .LC78:
-	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
+	.ascii	"FTL version: 5.0.48 20180528\000"
 .LC79:
-	.ascii	"%s error allocating memory. return -1\012\000"
+	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
+	.ascii	"\012\000"
 .LC80:
-	.ascii	"%s 0x%x:\000"
+	.ascii	"FtlGcRefreshBlock  0x%x\012\000"
 .LC81:
-	.ascii	"%x \000"
+	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
 .LC82:
-	.ascii	"\000"
+	.ascii	"%s error allocating memory. return -1\012\000"
 .LC83:
-	.ascii	"otp error! %d\000"
+	.ascii	"%s %p:0x%x:\000"
 .LC84:
-	.ascii	"rr\000"
+	.ascii	"%x \000"
 .LC85:
-	.ascii	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\012"
 	.ascii	"\000"
 .LC86:
-	.ascii	"nandc:\000"
+	.ascii	"otp error! %d\000"
 .LC87:
-	.ascii	"%d flReg.d32=%x %x\012\000"
+	.ascii	"rr\000"
 .LC88:
-	.ascii	"sdr read ok %x ecc=%d\012\000"
+	.ascii	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\012"
+	.ascii	"\000"
 .LC89:
-	.ascii	"sync para %d\012\000"
+	.ascii	"nandc:\000"
 .LC90:
-	.ascii	"TOG mode Read error %x %x\012\000"
+	.ascii	"%d flReg.d32=%x %x\012\000"
 .LC91:
-	.ascii	"read retry status %x %x %x\012\000"
+	.ascii	"sdr read ok %x ecc=%d\012\000"
 .LC92:
-	.ascii	"micron RR %d row=%x,count %d,status=%d\012\000"
+	.ascii	"sync para %d\012\000"
 .LC93:
-	.ascii	"ECC:%d\012\000"
+	.ascii	"TOG mode Read error %x %x\012\000"
 .LC94:
-	.ascii	"No.%d FLASH ID:%x %x %x %x %x %x\012\000"
+	.ascii	"read retry status %x %x %x\012\000"
 .LC95:
-	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
+	.ascii	"micron RR %d row=%x,count %d,status=%d\012\000"
 .LC96:
-	.ascii	"Read pageadd=%x  ecc=%x err=%x\012\000"
+	.ascii	"ECC:%d\012\000"
 .LC97:
-	.ascii	"data:\000"
+	.ascii	"No.%d FLASH ID:%x %x %x %x %x %x\012\000"
 .LC98:
-	.ascii	"spare:\000"
+	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
 .LC99:
-	.ascii	"ReadRetry pageadd=%x ecc=%x err=%x\012\000"
+	.ascii	"Read pageadd=%x  ecc=%x err=%x\012\000"
 .LC100:
-	.ascii	"FLFB:%d %d\012\000"
+	.ascii	"data:\000"
 .LC101:
-	.ascii	"prog error: = %x\012\000"
+	.ascii	"spare:\000"
 .LC102:
-	.ascii	"prog read error: = %x\012\000"
+	.ascii	"ReadRetry pageadd=%x ecc=%x err=%x\012\000"
 .LC103:
-	.ascii	"prog read s error: = %x %x %x\012\000"
+	.ascii	"FLFB:%d %d\012\000"
 .LC104:
-	.ascii	"prog read d error: = %x %x %x\012\000"
+	.ascii	"prog error: = %x\012\000"
 .LC105:
-	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
+	.ascii	"prog read error: = %x\012\000"
 .LC106:
-	.ascii	"FlashMakeFactorBbt %d\012\000"
+	.ascii	"prog read s error: = %x %x %x\012\000"
 .LC107:
-	.ascii	"bad block:%d %d\012\000"
+	.ascii	"prog read d error: = %x %x %x\012\000"
 .LC108:
-	.ascii	"FMFB:%d %d\012\000"
+	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
 .LC109:
-	.ascii	"E:bad block:%d\012\000"
+	.ascii	"FlashMakeFactorBbt %d\012\000"
 .LC110:
-	.ascii	"FMFB:Save %d %d\012\000"
+	.ascii	"bad block:%d %d\012\000"
 .LC111:
-	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+	.ascii	"FMFB:%d %d\012\000"
 .LC112:
-	.ascii	"FtlBbmTblFlush error:%x\012\000"
+	.ascii	"E:bad block:%d\012\000"
 .LC113:
-	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+	.ascii	"FMFB:Save %d %d\012\000"
 .LC114:
-	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
 .LC115:
-	.ascii	"decrement_vpc_count %x = %d\012\000"
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
 .LC116:
-	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
 .LC117:
-	.ascii	"ftl_map_blk_gc blk info: %x %x %x\012\000"
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
 .LC118:
-	.ascii	"page map lost: %x %x\012\000"
+	.ascii	"decrement_vpc_count %x = %d\012\000"
 .LC119:
-	.ascii	"FtlMapWritePage error = %x\012\000"
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
 .LC120:
-	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+	.ascii	"ftl_map_blk_gc blk info: %x %x %x\012\000"
 .LC121:
-	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+	.ascii	"page map lost: %x %x\012\000"
 .LC122:
-	.ascii	"page map lost %x %x %x %x\012\000"
+	.ascii	"FtlMapWritePage error = %x\012\000"
 .LC123:
-	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
 .LC124:
-	.ascii	"no ect\000"
+	.ascii	"page map lost %x %x %x %x\012\000"
 .LC125:
-	.ascii	"slc mode\000"
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
 .LC126:
-	.ascii	"RSB refresh addr %x\012\000"
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
 .LC127:
-	.ascii	"spuer block %x vpn is 0\012 \000"
+	.ascii	"no ect\000"
 .LC128:
-	.ascii	"g_recovery_ppa %x ver %x\012 \000"
+	.ascii	"slc mode\000"
 .LC129:
-	.ascii	"...%s enter...\012\000"
+	.ascii	"RSB refresh addr %x\012\000"
 .LC130:
-	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+	.ascii	"spuer block %x vpn is 0\012 \000"
 .LC131:
-	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+	.ascii	"g_recovery_ppa %x ver %x\012 \000"
 .LC132:
-	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+	.ascii	"...%s enter...\012\000"
 .LC133:
-	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
 .LC134:
-	.ascii	"GC des block %x done\012\000"
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
 .LC135:
-	.ascii	"fix power lost blk = %x vpc=%x\012\000"
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
 .LC136:
-	.ascii	"erase power lost blk = %x vpc=%x\012\000"
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
 .LC137:
-	.ascii	"...%s: no bad block mapping table, format device\012"
-	.ascii	"\000"
+	.ascii	"rk_ftl_de_init %x\012\000"
 .LC138:
-	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
+	.ascii	"GC des block %x done\012\000"
 .LC139:
-	.ascii	"FtlInit %x\012\000"
+	.ascii	"...%s: no bad block mapping table, format device\012"
+	.ascii	"\000"
 .LC140:
-	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
 .LC141:
-	.ascii	"BBT:\000"
+	.ascii	"FtlInit %x\012\000"
 .LC142:
-	.ascii	"IdBlockReadData %x %x\012\000"
+	.ascii	"fix power lost blk = %x vpc=%x\012\000"
 .LC143:
-	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+	.ascii	"erase power lost blk = %x vpc=%x\012\000"
 .LC144:
-	.ascii	"IDBlockWriteData %x %x\012\000"
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
 .LC145:
-	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+	.ascii	"BBT:\000"
 .LC146:
-	.ascii	"idblk:\000"
+	.ascii	"IdBlockReadData %x %x\012\000"
 .LC147:
-	.ascii	"idb reverse %x %x\012\000"
+	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
 .LC148:
-	.ascii	"write_idblock totle_sec %x %x\012\000"
+	.ascii	"write_idblock fix data %x %x\012\000"
 .LC149:
-	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
-	.ascii	"\012\000"
+	.ascii	"idblk:\000"
 .LC150:
-	.ascii	"write\000"
+	.ascii	"idb reverse %x %x\012\000"
 .LC151:
-	.ascii	"read\000"
+	.ascii	"write_idblock totle_sec %x %x %x %x\012\000"
 .LC152:
-	.ascii	"write_idblock error\012\000"
+	.ascii	"IDBlockWriteData %x %x\012\000"
 .LC153:
-	.ascii	"READ_SECTOR_IO\012\000"
+	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
 .LC154:
-	.ascii	"rk_copy_from_user error\012\000"
+	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
+	.ascii	"\012\000"
 .LC155:
-	.ascii	"READ_SECTOR_IO %x %x\012\000"
+	.ascii	"write\000"
 .LC156:
-	.ascii	"rk_copy_to_user error\012\000"
+	.ascii	"read\000"
 .LC157:
-	.ascii	"WRITE_SECTOR_IO\012\000"
+	.ascii	"write_idblock error %d\012\000"
 .LC158:
-	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"READ_SECTOR_IO\012\000"
 .LC159:
-	.ascii	"END_WRITE_SECTOR_IO\012\000"
+	.ascii	"rk_copy_from_user error\012\000"
 .LC160:
-	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+	.ascii	"READ_SECTOR_IO %x %x\012\000"
 .LC161:
-	.ascii	"GET_FLASH_INFO_IO\012\000"
+	.ascii	"rk_copy_to_user error\012\000"
 .LC162:
-	.ascii	"GET_BAD_BLOCK_IO\012\000"
+	.ascii	"WRITE_SECTOR_IO\012\000"
 .LC163:
-	.ascii	"bbt:\000"
+	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
 .LC164:
-	.ascii	"GET_LOCK_FLAG_IO\012\000"
+	.ascii	"END_WRITE_SECTOR_IO\012\000"
 .LC165:
-	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
 .LC166:
-	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+	.ascii	"GET_FLASH_INFO_IO\012\000"
 .LC167:
-	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+	.ascii	"GET_BAD_BLOCK_IO\012\000"
 .LC168:
-	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+	.ascii	"bbt:\000"
 .LC169:
-	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+	.ascii	"GET_LOCK_FLAG_IO\012\000"
 .LC170:
-	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+	.ascii	"GET_PUBLIC_KEY_IO\012\000"
 .LC171:
-	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+	.ascii	"RKNAND_GET_DRM_KEY\012\000"
 .LC172:
-	.ascii	"RKNAND_LOADER_STATUS\012\000"
+	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
 .LC173:
-	.ascii	"RKNAND_LOADER_LOCK\012\000"
+	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
 .LC174:
-	.ascii	"LockKey not match %d\012\000"
+	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
 .LC175:
-	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
 .LC176:
-	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
 .LC177:
-	.ascii	"return ret = %lx\012\000"
+	.ascii	"RKNAND_LOADER_STATUS\012\000"
 .LC178:
-	.ascii	"secureBootEn check error\012\000"
+	.ascii	"RKNAND_LOADER_LOCK\012\000"
 .LC179:
+	.ascii	"LockKey not match %d\012\000"
+.LC180:
+	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+.LC181:
+	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+.LC182:
+	.ascii	"return ret = %lx\012\000"
+.LC183:
+	.ascii	"secureBootEn check error\012\000"
+.LC184:
 	.ascii	"\0013vendor storage %x,%x,%x\012\000"
 	.data
 	.align	2
@@ -23896,7 +24234,7 @@ SamsungRefValue:
 gFtlInitStatus:
 	.word	-1
 	.type	NandFlashParaTbl, %object
-	.size	NandFlashParaTbl, 2304
+	.size	NandFlashParaTbl, 2368
 NandFlashParaTbl:
 	.byte	6
 	.byte	44
@@ -24394,6 +24732,32 @@ NandFlashParaTbl:
 	.space	4
 	.byte	5
 	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	50
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
 	.byte	100
 	.byte	68
 	.byte	50
@@ -24406,7 +24770,7 @@ NandFlashParaTbl:
 	.byte	2
 	.byte	1
 	.short	1048
-	.short	1503
+	.short	1479
 	.byte	5
 	.byte	19
 	.byte	60
@@ -24757,6 +25121,32 @@ NandFlashParaTbl:
 	.byte	0
 	.space	4
 	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	273
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
 	.byte	-119
 	.byte	100
 	.byte	68
@@ -25498,7 +25888,7 @@ NandFlashParaTbl:
 	.byte	2
 	.byte	2
 	.short	2106
-	.short	1497
+	.short	473
 	.byte	2
 	.byte	68
 	.byte	40
@@ -25524,7 +25914,7 @@ NandFlashParaTbl:
 	.byte	2
 	.byte	2
 	.short	1074
-	.short	1497
+	.short	473
 	.byte	2
 	.byte	68
 	.byte	40
@@ -26300,6 +26690,10 @@ gNandPhyInfo:
 gNandFlashEccBits:
 	.space	1
 	.space	3
+	.type	g_MaxLbaSector, %object
+	.size	g_MaxLbaSector, 4
+g_MaxLbaSector:
+	.space	4
 	.type	FlashWaitBusyScheduleEn, %object
 	.size	FlashWaitBusyScheduleEn, 4
 FlashWaitBusyScheduleEn:
@@ -26325,11 +26719,16 @@ read_retry_cur_offset:
 	.size	gFlashInterfaceMode, 1
 gFlashInterfaceMode:
 	.space	1
+	.space	3
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.space	4
 	.type	gFlashToggleModeEn, %object
 	.size	gFlashToggleModeEn, 1
 gFlashToggleModeEn:
 	.space	1
-	.space	2
+	.space	3
 	.type	gBootDdrMode, %object
 	.size	gBootDdrMode, 4
 gBootDdrMode:
@@ -26338,10 +26737,6 @@ gBootDdrMode:
 	.size	gNandcVer, 4
 gNandcVer:
 	.space	4
-	.type	g_nandc_version_data, %object
-	.size	g_nandc_version_data, 4
-g_nandc_version_data:
-	.space	4
 	.type	gMasterTempBuf, %object
 	.size	gMasterTempBuf, 4
 gMasterTempBuf:
@@ -26363,6 +26758,10 @@ gNandcEccBits:
 gMultiPageProgEn:
 	.space	1
 	.space	3
+	.type	g_inkDie_check_enable, %object
+	.size	g_inkDie_check_enable, 4
+g_inkDie_check_enable:
+	.space	4
 	.type	c_ftl_nand_sys_blks_per_plane, %object
 	.size	c_ftl_nand_sys_blks_per_plane, 4
 c_ftl_nand_sys_blks_per_plane:
@@ -26495,10 +26894,6 @@ c_ftl_nand_map_region_num:
 	.size	c_ftl_nand_l2pmap_ram_region_num, 2
 c_ftl_nand_l2pmap_ram_region_num:
 	.space	2
-	.type	g_MaxLbaSector, %object
-	.size	g_MaxLbaSector, 4
-g_MaxLbaSector:
-	.space	4
 	.type	g_page_map_check_enable, %object
 	.size	g_page_map_check_enable, 2
 g_page_map_check_enable:
@@ -26523,10 +26918,6 @@ req_wr_io:
 	.size	g_MaxLpn, 4
 g_MaxLpn:
 	.space	4
-	.type	g_cur_erase_blk, %object
-	.size	g_cur_erase_blk, 4
-g_cur_erase_blk:
-	.space	4
 	.type	gBbtInfo, %object
 	.size	gBbtInfo, 60
 gBbtInfo:
@@ -26551,10 +26942,10 @@ p_erase_count_table:
 	.size	g_totle_sys_slc_erase_count, 4
 g_totle_sys_slc_erase_count:
 	.space	4
-	.type	p_sys_data_buf, %object
-	.size	p_sys_data_buf, 4
-p_sys_data_buf:
-	.space	4
+	.type	g_sys_save_data, %object
+	.size	g_sys_save_data, 48
+g_sys_save_data:
+	.space	48
 	.type	p_data_block_list_table, %object
 	.size	p_data_block_list_table, 4
 p_data_block_list_table:
@@ -26617,10 +27008,6 @@ g_VaildLpn:
 	.size	p_blk_mode_table, 4
 p_blk_mode_table:
 	.space	4
-	.type	g_inkDie_check_enable, %object
-	.size	g_inkDie_check_enable, 4
-g_inkDie_check_enable:
-	.space	4
 	.type	g_totle_read_page_count, %object
 	.size	g_totle_read_page_count, 4
 g_totle_read_page_count:
@@ -26681,10 +27068,6 @@ g_max_erase_count:
 	.size	g_min_erase_count, 4
 g_min_erase_count:
 	.space	4
-	.type	g_sys_save_data, %object
-	.size	g_sys_save_data, 48
-g_sys_save_data:
-	.space	48
 	.type	c_ftl_nand_data_op_blks_per_plane, %object
 	.size	c_ftl_nand_data_op_blks_per_plane, 2
 c_ftl_nand_data_op_blks_per_plane:
@@ -26809,6 +27192,10 @@ g_gc_head_data_block:
 	.size	g_gc_head_data_block_count, 4
 g_gc_head_data_block_count:
 	.space	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.space	4
 	.type	g_gc_refresh_block_temp_num, %object
 	.size	g_gc_refresh_block_temp_num, 2
 g_gc_refresh_block_temp_num:
@@ -26830,6 +27217,10 @@ req_gc_dst:
 	.size	req_prgm, 4
 req_prgm:
 	.space	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 4
+p_sys_data_buf:
+	.space	4
 	.type	p_sys_data_buf_1, %object
 	.size	p_sys_data_buf_1, 4
 p_sys_data_buf_1:
diff --git a/drivers/rk_nand/rk_ftlv5_arm64.S b/drivers/rk_nand/rk_ftlv5_arm64.S
index 2d3c0a2af3e9..379404130efd 100644
--- a/drivers/rk_nand/rk_ftlv5_arm64.S
+++ b/drivers/rk_nand/rk_ftlv5_arm64.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2018-04-08
+ * date: 2018-07-03
  * function: rk ftl v5 for rockchip soc base on arm v8 to support MLC NAND.
  */
 	.cpu generic+fp+simd
@@ -1857,6 +1857,40 @@ SandiskSetRRPara:
 	ret
 	.size	SandiskSetRRPara, .-SandiskSetRRPara
 	.align	2
+	.global	micron_auto_read_calibration_config
+	.type	micron_auto_read_calibration_config, %function
+micron_auto_read_calibration_config:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxtb	w19, w0
+	mov	w0, w19
+	sbfiz	x19, x19, 4, 32
+	str	x1, [x29,40]
+	bl	NandcWaitFlashReady
+	adrp	x3, .LANCHOR0
+	add	x3, x3, :lo12:.LANCHOR0
+	add	x3, x3, 40
+	add	x0, x3, x19
+	ldr	x19, [x3,x19]
+	ldrb	w2, [x0,8]
+	mov	w0, 239
+	add	x19, x19, x2, lsl 8
+	str	w0, [x19,2056]
+	mov	w0, 150
+	str	w0, [x19,2052]
+	mov	w0, 200
+	bl	NandcDelayns
+	ldr	x1, [x29,40]
+	str	w1, [x19,2048]
+	str	wzr, [x19,2048]
+	str	wzr, [x19,2048]
+	str	wzr, [x19,2048]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	micron_auto_read_calibration_config, .-micron_auto_read_calibration_config
+	.align	2
 	.global	FlashEraseSLc2KBlocks
 	.type	FlashEraseSLc2KBlocks, %function
 FlashEraseSLc2KBlocks:
@@ -1874,9 +1908,9 @@ FlashEraseSLc2KBlocks:
 	mov	w22, 0
 	add	x25, x21, 1720
 	add	x23, x23, :lo12:.LC1
-.L260:
+.L261:
 	cmp	w22, w24
-	beq	.L269
+	beq	.L270
 	add	x2, x29, 88
 	sub	w4, w24, w22
 	mov	x0, x20
@@ -1886,11 +1920,11 @@ FlashEraseSLc2KBlocks:
 	ldr	w2, [x29,92]
 	ldrb	w0, [x21,1676]
 	cmp	w2, w0
-	bcc	.L261
+	bcc	.L262
 	mov	w0, -1
 	str	w0, [x20]
-	b	.L262
-.L261:
+	b	.L263
+.L262:
 	uxtw	x2, w2
 	add	x0, x21, x2
 	ldrb	w19, [x0,1680]
@@ -1923,24 +1957,24 @@ FlashEraseSLc2KBlocks:
 	ldr	w1, [x29,88]
 	mov	w0, w19
 	bl	FlashReadStatus
-	tbz	x0, 0, .L263
+	tbz	x0, 0, .L264
 	mov	w0, -1
 	str	w0, [x20]
-.L263:
+.L264:
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L264
+	bne	.L265
 	ldr	w1, [x29,88]
 	mov	x0, x23
 	bl	printk
-.L264:
+.L265:
 	mov	w0, w19
 	bl	NandcFlashDeCs
-.L262:
+.L263:
 	add	w22, w22, 1
 	add	x20, x20, 56
-	b	.L260
-.L269:
+	b	.L261
+.L270:
 	mov	w0, 0
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -1974,16 +2008,16 @@ HynixGetReadRetryDefault:
 	mov	w0, -81
 	strb	w3, [x1,6]
 	strb	w0, [x1,7]
-	bne	.L271
+	bne	.L272
 	mov	w0, -89
 	strb	w0, [x1,4]
 	adrp	x0, .LANCHOR1+3017
 	mov	w1, -9
 	strb	w1, [x0,#:lo12:.LANCHOR1+3017]
-	b	.L326
-.L271:
+	b	.L327
+.L272:
 	cmp	w26, 3
-	bne	.L273
+	bne	.L274
 	mov	w0, -80
 	strb	w0, [x1,4]
 	mov	w0, -79
@@ -1999,10 +2033,10 @@ HynixGetReadRetryDefault:
 	mov	w0, -74
 	strb	w0, [x1,10]
 	mov	w0, -73
-	b	.L359
-.L273:
+	b	.L360
+.L274:
 	cmp	w26, 4
-	bne	.L274
+	bne	.L275
 	mov	w5, -52
 	strb	w5, [x1,4]
 	mov	w5, -65
@@ -2015,14 +2049,14 @@ HynixGetReadRetryDefault:
 	mov	w5, -51
 	strb	w3, [x1,10]
 	strb	w5, [x1,8]
-.L359:
+.L360:
 	mov	w27, 8
 	strb	w0, [x1,11]
 	mov	w28, w27
-	b	.L272
-.L274:
+	b	.L273
+.L275:
 	cmp	w26, 5
-	bne	.L275
+	bne	.L276
 	mov	w0, 56
 	strb	w0, [x1,4]
 	mov	w0, 57
@@ -2032,10 +2066,10 @@ HynixGetReadRetryDefault:
 	strb	w0, [x1,6]
 	mov	w0, 59
 	strb	w0, [x1,7]
-	b	.L358
-.L275:
+	b	.L359
+.L276:
 	cmp	w26, 6
-	bne	.L276
+	bne	.L277
 	mov	w0, 14
 	strb	w0, [x1,4]
 	mov	w0, 15
@@ -2045,10 +2079,10 @@ HynixGetReadRetryDefault:
 	strb	w0, [x1,6]
 	mov	w0, 17
 	strb	w0, [x1,7]
-	b	.L358
-.L276:
+	b	.L359
+.L277:
 	cmp	w26, 7
-	bne	.L326
+	bne	.L327
 	mov	w0, -80
 	strb	w0, [x1,4]
 	mov	w0, -79
@@ -2071,15 +2105,15 @@ HynixGetReadRetryDefault:
 	mov	w28, 10
 	mov	w0, -43
 	strb	w0, [x1,13]
-	b	.L272
-.L326:
+	b	.L273
+.L327:
 	mov	w27, 7
-.L358:
+.L359:
 	mov	w28, 4
-.L272:
+.L273:
 	sub	w0, w26, #1
 	cmp	w0, 1
-	bhi	.L355
+	bhi	.L356
 	adrp	x22, .LANCHOR1
 	add	x25, x20, :lo12:.LANCHOR0
 	add	x22, x22, :lo12:.LANCHOR1
@@ -2087,10 +2121,10 @@ HynixGetReadRetryDefault:
 	add	x26, x25, 4056
 	add	x3, x25, 40
 	add	x22, x22, 3000
-.L277:
+.L278:
 	ldrb	w0, [x25,1676]
 	cmp	w0, w21
-	bls	.L284
+	bls	.L285
 	add	x0, x25, x21, sxtw
 	ldrb	w0, [x0,1680]
 	mov	x23, 0
@@ -2102,7 +2136,7 @@ HynixGetReadRetryDefault:
 	ldrb	w0, [x1,8]
 	mov	w1, 55
 	add	x24, x24, x0, lsl 8
-.L279:
+.L280:
 	add	x0, x26, x23
 	str	w1, [x24,2056]
 	str	x3, [x29,128]
@@ -2117,12 +2151,12 @@ HynixGetReadRetryDefault:
 	ldr	x1, [x29,136]
 	cmp	w28, w23, uxtb
 	ldr	x3, [x29,128]
-	bhi	.L279
+	bhi	.L280
 	mov	x0, 0
-.L280:
+.L281:
 	add	w2, w0, 8
 	mov	x1, 0
-.L281:
+.L282:
 	add	x5, x1, x0
 	add	x1, x1, 4
 	add	x5, x22, x5
@@ -2132,10 +2166,10 @@ HynixGetReadRetryDefault:
 	add	w5, w6, w5
 	strb	w5, [x19,w2,sxtw]
 	add	w2, w2, 8
-	bne	.L281
+	bne	.L282
 	add	x0, x0, 1
 	cmp	x0, 4
-	bne	.L280
+	bne	.L281
 	add	w21, w21, 1
 	strb	wzr, [x19,16]
 	strb	wzr, [x19,24]
@@ -2145,11 +2179,11 @@ HynixGetReadRetryDefault:
 	strb	wzr, [x19,48]
 	strb	wzr, [x19,41]
 	strb	wzr, [x19,49]
-	b	.L277
-.L355:
+	b	.L278
+.L356:
 	sub	w0, w26, #3
 	cmp	w0, 4
-	bhi	.L284
+	bhi	.L285
 	mul	w25, w28, w27
 	sub	w23, w28, #1
 	mov	w21, 0
@@ -2165,11 +2199,11 @@ HynixGetReadRetryDefault:
 	str	x0, [x29,128]
 	sub	w0, w26, #5
 	str	w0, [x29,136]
-.L285:
+.L286:
 	ldrb	w0, [x25,1676]
 	cmp	w0, w21
-	bhi	.L325
-.L284:
+	bhi	.L326
+.L285:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -2180,7 +2214,7 @@ HynixGetReadRetryDefault:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 144
 	ret
-.L325:
+.L326:
 	add	x0, x25, x21, sxtw
 	ldrb	w1, [x0,1680]
 	str	x1, [x29,112]
@@ -2198,42 +2232,42 @@ HynixGetReadRetryDefault:
 	cmp	w26, 7
 	add	x6, x25, 4056
 	ldr	x1, [x29,112]
-	beq	.L286
+	beq	.L287
 	add	x1, x6, x1, lsl 6
 	add	x6, x1, 20
-	b	.L287
-.L286:
+	b	.L288
+.L287:
 	mov	x0, 160
 	madd	x1, x1, x0, x6
 	add	x6, x1, 28
-.L287:
+.L288:
 	mov	w0, 54
 	cmp	w26, 4
 	str	w0, [x19,2056]
-	bne	.L288
+	bne	.L289
 	mov	w0, 255
 	str	w0, [x19,2052]
 	mov	w0, 64
 	str	w0, [x19,2048]
 	mov	w0, 204
-	b	.L360
-.L288:
+	b	.L361
+.L289:
 	ldr	w0, [x29,136]
 	cmp	w0, 1
-	bhi	.L290
+	bhi	.L291
 	ldrb	w0, [x25,4060]
 	str	w0, [x19,2052]
 	mov	w0, 82
-	b	.L361
-.L290:
+	b	.L362
+.L291:
 	mov	w0, 174
 	str	w0, [x19,2052]
 	str	wzr, [x19,2048]
 	mov	w0, 176
-.L360:
+.L361:
 	str	w0, [x19,2052]
 	mov	w0, 77
-.L361:
+.L362:
 	str	w0, [x19,2048]
 	mov	w0, 22
 	str	w0, [x19,2056]
@@ -2247,13 +2281,13 @@ HynixGetReadRetryDefault:
 	str	wzr, [x19,2056]
 	str	wzr, [x19,2052]
 	str	wzr, [x19,2052]
-	bne	.L291
+	bne	.L292
 	mov	w0, 31
 	str	w0, [x19,2052]
-	b	.L292
-.L291:
-	str	wzr, [x19,2052]
+	b	.L293
 .L292:
+	str	wzr, [x19,2052]
+.L293:
 	mov	w7, 2
 	str	w7, [x19,2052]
 	str	wzr, [x19,2052]
@@ -2267,85 +2301,85 @@ HynixGetReadRetryDefault:
 	mov	w1, 16
 	ldr	x6, [x29,104]
 	cmp	w0, 1
-	bls	.L294
+	bls	.L295
 	ldr	x7, [x29,112]
 	cmp	w26, 7
 	mov	w1, 32
 	csel	w1, w1, w7, eq
-.L294:
+.L295:
 	ldr	x0, [x25]
 	mov	x7, 0
-.L295:
+.L296:
 	ldr	w8, [x19,2048]
 	strb	w8, [x0,x7]
 	add	x7, x7, 1
 	cmp	w1, w7, uxtb
-	bhi	.L295
+	bhi	.L296
 	cmp	w26, 7
-	bne	.L296
+	bne	.L297
 	mov	w1, 0
-.L298:
+.L299:
 	ldrb	w7, [x0]
 	cmp	w7, 12
-	beq	.L297
+	beq	.L298
 	ldrb	w7, [x0,1]
 	cmp	w7, 10
-	beq	.L297
+	beq	.L298
 	add	w1, w1, 1
 	add	x0, x0, 4
 	uxtb	w1, w1
 	cmp	w1, 8
-	bne	.L298
-	b	.L299
-.L297:
+	bne	.L299
+	b	.L300
+.L298:
 	cmp	w1, 7
-	bne	.L300
-.L299:
+	bne	.L301
+.L300:
 	adrp	x0, .LC2
 	mov	w1, 0
 	add	x0, x0, :lo12:.LC2
 	bl	printk
-.L301:
-	b	.L301
-.L296:
+.L302:
+	b	.L302
+.L297:
 	cmp	w26, 6
-	bne	.L300
+	bne	.L301
 	mov	x1, 0
-.L302:
+.L303:
 	ldrb	w7, [x0,x1]
 	cmp	w7, 12
-	beq	.L300
+	beq	.L301
 	add	x7, x0, x1
 	ldrb	w7, [x7,8]
 	cmp	w7, 4
-	beq	.L300
+	beq	.L301
 	add	x1, x1, 1
 	cmp	x1, 8
-	bne	.L302
+	bne	.L303
 	adrp	x0, .LC2
 	mov	w1, 0
 	add	x0, x0, :lo12:.LC2
 	bl	printk
-.L304:
-	b	.L304
-.L300:
+.L305:
+	b	.L305
+.L301:
 	ldr	x9, [x25]
 	mov	x0, 0
-.L305:
+.L306:
 	ldr	w1, [x29,124]
 	cmp	w1, w0
-	ble	.L362
+	ble	.L363
 	ldr	w1, [x19,2048]
 	strb	w1, [x9,x0]
 	add	x0, x0, 1
-	b	.L305
-.L362:
+	b	.L306
+.L363:
 	ldr	x11, [x25]
 	mov	w8, w22
 	mov	w7, 8
-.L308:
+.L309:
 	mov	w0, 0
-.L307:
+.L308:
 	add	w1, w0, w8
 	add	w0, w0, 1
 	sbfiz	x1, x1, 2, 32
@@ -2353,52 +2387,52 @@ HynixGetReadRetryDefault:
 	ldr	w10, [x11,x1]
 	mvn	w10, w10
 	str	w10, [x11,x1]
-	bne	.L307
+	bne	.L308
 	ldr	w0, [x29,120]
 	subs	w7, w7, #1
 	add	w8, w8, w0
-	bne	.L308
+	bne	.L309
 	mov	x7, 0
 	mov	w15, 1
-.L309:
+.L310:
 	mov	w1, 0
 	ldr	x14, [x25]
 	mov	w10, w1
-.L313:
+.L314:
 	lsl	w8, w15, w10
 	mov	w12, w7
 	mov	w0, 16
 	mov	w11, 0
-.L311:
+.L312:
 	ldr	w13, [x14,w12,sxtw 2]
 	add	w12, w12, w22
 	and	w13, w8, w13
 	cmp	w13, w8
 	csinc	w11, w11, w11, ne
 	subs	w0, w0, #1
-	bne	.L311
+	bne	.L312
 	cmp	w11, 9
 	orr	w8, w1, w8
 	add	w10, w10, 1
 	csel	w1, w8, w1, cs
 	cmp	w10, 32
-	bne	.L313
+	bne	.L314
 	str	w1, [x14,x7,lsl 2]
 	add	x7, x7, 1
 	cmp	w22, w7
-	bgt	.L309
+	bgt	.L310
 	mov	x7, 0
 	ldr	x1, [x25]
 	mov	w8, w7
-.L316:
+.L317:
 	ldr	w10, [x1,x7]
 	add	x7, x7, 4
 	cmp	w10, wzr
 	csinc	w8, w8, w8, ne
 	cmp	x7, 32
-	bne	.L316
+	bne	.L317
 	cmp	w8, 7
-	ble	.L317
+	ble	.L318
 	adrp	x0, .LC3
 	mov	w2, 1
 	add	x0, x0, :lo12:.LC3
@@ -2408,39 +2442,39 @@ HynixGetReadRetryDefault:
 	mov	w1, 0
 	add	x0, x0, :lo12:.LC2
 	bl	printk
+.L319:
+	b	.L319
 .L318:
-	b	.L318
-.L317:
 	cmp	w26, 6
 	mov	w7, 4
-	beq	.L319
+	beq	.L320
 	cmp	w26, 7
 	mov	w7, 10
 	mov	w1, 8
 	csel	w7, w1, w7, ne
-.L319:
-	mov	w8, 0
 .L320:
-	mov	x1, 0
+	mov	w8, 0
 .L321:
+	mov	x1, 0
+.L322:
 	add	w10, w0, w1
 	ldrb	w11, [x9,x1]
 	add	x1, x1, 1
 	cmp	w28, w1, uxtb
 	strb	w11, [x6,w10,sxtw]
-	bhi	.L321
+	bhi	.L322
 	add	w8, w8, 1
 	add	x9, x9, x23
 	cmp	w8, w27
 	add	w0, w0, w7
-	blt	.L320
+	blt	.L321
 	mov	w0, 255
 	str	w0, [x19,2056]
 	mov	w0, w24
 	bl	NandcWaitFlashReady
 	ldr	w0, [x29,136]
 	cmp	w0, 1
-	bhi	.L323
+	bhi	.L324
 	mov	w0, 54
 	str	w0, [x19,2056]
 	adrp	x0, .LANCHOR0+4060
@@ -2452,16 +2486,16 @@ HynixGetReadRetryDefault:
 	str	w0, [x19,2056]
 	mov	w0, w21
 	bl	FlashReadCmd
-	b	.L324
-.L323:
+	b	.L325
+.L324:
 	mov	w0, 56
 	str	w0, [x19,2056]
-.L324:
+.L325:
 	mov	w0, w24
 	add	w21, w21, 1
 	bl	NandcWaitFlashReady
 	uxtb	w21, w21
-	b	.L285
+	b	.L286
 	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
 	.align	2
 	.global	FlashGetReadRetryDefault
@@ -2470,15 +2504,15 @@ FlashGetReadRetryDefault:
 	stp	x29, x30, [sp, -16]!
 	mov	w1, w0
 	add	x29, sp, 0
-	cbz	w0, .L363
+	cbz	w0, .L364
 	sub	w2, w0, #1
 	cmp	w2, 6
-	bhi	.L365
+	bhi	.L366
 	bl	HynixGetReadRetryDefault
-	b	.L363
-.L365:
+	b	.L364
+.L366:
 	cmp	w0, 49
-	bne	.L366
+	bne	.L367
 	adrp	x0, .LANCHOR0
 	mov	w2, 64
 	add	x0, x0, :lo12:.LANCHOR0
@@ -2491,30 +2525,30 @@ FlashGetReadRetryDefault:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 2936
-	b	.L381
-.L366:
+	b	.L382
+.L367:
 	sub	w0, w0, #65
 	cmp	w0, 1
-	bls	.L372
+	bls	.L373
 	cmp	w1, 33
-	bne	.L367
-.L372:
+	bne	.L368
+.L373:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	strb	w1, [x0,4056]
 	mov	w1, 4
-	b	.L382
-.L367:
+	b	.L383
+.L368:
 	cmp	w1, 67
-	beq	.L373
+	beq	.L374
 	cmp	w1, 34
-	bne	.L369
-.L373:
+	bne	.L370
+.L374:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	strb	w1, [x0,4056]
 	mov	w1, 5
-.L382:
+.L383:
 	strb	w1, [x0,4057]
 	mov	w1, 7
 	strb	w1, [x0,4058]
@@ -2523,13 +2557,13 @@ FlashGetReadRetryDefault:
 	add	x0, x0, 4060
 	add	x1, x1, 2784
 	mov	w2, 45
-	b	.L381
-.L369:
+	b	.L382
+.L370:
 	cmp	w1, 68
-	beq	.L374
+	beq	.L375
 	cmp	w1, 35
-	bne	.L363
-.L374:
+	bne	.L364
+.L375:
 	adrp	x0, .LANCHOR0
 	mov	w2, 95
 	add	x0, x0, :lo12:.LANCHOR0
@@ -2542,9 +2576,9 @@ FlashGetReadRetryDefault:
 	adrp	x1, .LANCHOR1
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x1, x1, 2832
-.L381:
+.L382:
 	bl	ftl_memcpy
-.L363:
+.L364:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
@@ -2574,7 +2608,7 @@ FlashReadDpCmd:
 	cmp	w0, 1
 	and	w5, w1, 255
 	lsr	w0, w1, 16
-	bne	.L384
+	bne	.L385
 	add	x19, x6, x19, lsl 8
 	ldrb	w2, [x3,8]
 	str	x1, [x29,72]
@@ -2597,8 +2631,8 @@ FlashReadDpCmd:
 	str	w20, [x19,2052]
 	str	w0, [x19,2056]
 	ldr	x1, [x29,72]
-	b	.L385
-.L384:
+	b	.L386
+.L385:
 	add	x19, x6, x19, lsl 8
 	ldrb	w2, [x3,8]
 	str	w2, [x19,2056]
@@ -2612,7 +2646,7 @@ FlashReadDpCmd:
 	str	w22, [x19,2052]
 	str	w20, [x19,2052]
 	str	w0, [x19,2056]
-.L385:
+.L386:
 	mov	w0, w21
 	bl	FlashSetRandomizer
 	ldr	x23, [sp,48]
@@ -2630,19 +2664,28 @@ ftl_flash_de_init:
 	add	x29, sp, 0
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR2
-	add	x19, x19, :lo12:.LANCHOR2
 	bl	NandcWaitFlashReady
 	bl	FlashSetReadRetryDefault
-	ldrb	w0, [x19,565]
-	cbz	w0, .L387
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w1, [x0,568]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L388
+	mov	w0, 0
+	bl	flash_enter_slc_mode
+.L388:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrb	w0, [x19,572]
+	cbz	w0, .L389
 	ldrb	w0, [x19,564]
-	tbz	x0, 0, .L387
+	tbz	x0, 0, .L389
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
 	bl	NandcSetMode
-	strb	wzr, [x19,565]
-.L387:
+	strb	wzr, [x19,572]
+.L389:
 	adrp	x0, .LANCHOR0+40
 	ldr	x0, [x0,#:lo12:.LANCHOR0+40]
 	str	wzr, [x0,336]
@@ -2679,37 +2722,37 @@ NandcTimeCfg:
 	add	x1, x1, :lo12:.LANCHOR0
 	sdiv	w0, w0, w2
 	cmp	w0, 250
-	ble	.L396
+	ble	.L398
 	ldr	x0, [x1,3976]
 	mov	w1, 8354
-	b	.L403
-.L396:
+	b	.L405
+.L398:
 	cmp	w0, 220
-	ble	.L398
+	ble	.L400
 	ldr	x0, [x1,3976]
-	b	.L404
-.L398:
+	b	.L406
+.L400:
 	cmp	w0, 185
-	ble	.L399
+	ble	.L401
 	ldr	x0, [x1,3976]
 	mov	w1, 4226
-	b	.L403
-.L399:
+	b	.L405
+.L401:
 	cmp	w0, 160
 	ldr	x0, [x1,3976]
-	ble	.L400
+	ble	.L402
 	mov	w1, 4194
-	b	.L403
-.L400:
+	b	.L405
+.L402:
 	cmp	w19, 35
 	mov	w1, 4193
-	bls	.L403
+	bls	.L405
 	cmp	w19, 99
 	mov	w1, 4225
-	bls	.L403
-.L404:
+	bls	.L405
+.L406:
 	mov	w1, 8322
-.L403:
+.L405:
 	str	w1, [x0,4]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -2725,15 +2768,15 @@ FlashTimingCfg:
 	and	w1, w1, -33
 	cmp	w1, 1
 	add	x29, sp, 0
-	bls	.L406
+	bls	.L408
 	mov	w1, 8322
 	cmp	w0, w1
-	bne	.L407
-.L406:
+	bne	.L409
+.L408:
 	adrp	x1, .LANCHOR0+3976
 	ldr	x1, [x1,#:lo12:.LANCHOR0+3976]
 	str	w0, [x1,4]
-.L407:
+.L409:
 	adrp	x0, .LANCHOR1+277
 	ldrb	w0, [x0,#:lo12:.LANCHOR1+277]
 	bl	NandcTimeCfg
@@ -2766,19 +2809,19 @@ NandcInit:
 	str	x0, [x2,3976]
 	ldr	w2, [x0]
 	ubfx	x4, x2, 13, 1
-	str	w4, [x3,568]
+	str	w4, [x3,576]
 	ldr	w4, [x0,352]
 	and	w2, w2, 245760
 	orr	w2, w2, 256
 	ubfx	x4, x4, 16, 4
-	str	w4, [x3,572]
+	str	w4, [x3,580]
 	ldr	w4, [x0,352]
-	str	w4, [x3,576]
+	str	w4, [x3,568]
 	cmp	w4, 2049
-	bne	.L409
+	bne	.L411
 	mov	w1, 8
-	str	w1, [x3,572]
-.L409:
+	str	w1, [x3,580]
+.L411:
 	add	x20, x20, :lo12:.LANCHOR0
 	str	w2, [x0]
 	ldr	x0, [x20,3976]
@@ -2840,21 +2883,21 @@ NandcBchSel:
 	adrp	x1, .LANCHOR2+644
 	str	w0, [x1,#:lo12:.LANCHOR2+644]
 	mov	w1, 4096
-	bne	.L412
-.L415:
+	bne	.L414
+.L417:
 	and	w1, w1, -17
-	b	.L413
-.L412:
+	b	.L415
+.L414:
 	cmp	w0, 24
-	bne	.L414
+	bne	.L416
 	orr	w1, w1, 16
-	b	.L413
-.L414:
+	b	.L415
+.L416:
 	cmp	w0, 40
 	orr	w1, w1, 262144
 	orr	w1, w1, 16
-	beq	.L415
-.L413:
+	beq	.L417
+.L415:
 	orr	w1, w1, 1
 	str	w1, [x2,12]
 	ret
@@ -2905,23 +2948,23 @@ ftl_flash_resume:
 	str	w3, [x2,336]
 	ldr	w1, [x1,4012]
 	str	w1, [x2,344]
-.L422:
+.L424:
 	lsl	x0, x19, 3
 	ldrb	w1, [x0,x20]
 	sub	w1, w1, #1
 	uxtb	w1, w1
 	cmp	w1, 253
-	bhi	.L421
+	bhi	.L423
 	mov	w0, w19
 	bl	FlashReset
-.L421:
+.L423:
 	add	x19, x19, 1
 	cmp	x19, 4
-	bne	.L422
+	bne	.L424
 	adrp	x19, .LANCHOR2
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrb	w0, [x19,565]
-	cbz	w0, .L423
+	ldrb	w0, [x19,572]
+	cbz	w0, .L425
 	mov	w0, 1
 	bl	NandcSetMode
 	ldrb	w0, [x19,564]
@@ -2930,7 +2973,7 @@ ftl_flash_resume:
 	bl	NandcSetMode
 	lsr	w0, w21, 8
 	bl	NandcSetDdrPara
-.L423:
+.L425:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	x0, [x0,1912]
 	ldrb	w0, [x0,20]
@@ -2963,18 +3006,18 @@ NandcIqrWaitFlashReady:
 	orr	w0, w0, 2
 	str	w0, [x19,364]
 	ldr	w0, [x19]
-	tbnz	x0, 9, .L430
+	tbnz	x0, 9, .L432
 	mov	x0, x19
 	bl	wait_for_nand_flash_ready
-	b	.L429
-.L430:
+	b	.L431
+.L432:
 	ldr	w0, [x19,368]
 	orr	w0, w0, 2
 	str	w0, [x19,368]
 	ldr	w0, [x19,364]
 	and	w0, w0, -3
 	str	w0, [x19,364]
-.L429:
+.L431:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -2998,17 +3041,17 @@ FlashEraseBlocks:
 	mov	x24, x0
 	ldrb	w2, [x20,24]
 	mov	w19, 0
-	cbz	w2, .L433
+	cbz	w2, .L435
 	mov	w1, w23
 	bl	FlashEraseSLc2KBlocks
-	b	.L434
-.L433:
+	b	.L436
+.L435:
 	mov	w27, 56
 	adrp	x28, .LANCHOR2
 	add	x25, x20, 1720
-.L464:
+.L466:
 	cmp	w19, w23
-	bcs	.L465
+	bcs	.L467
 	umull	x5, w19, w27
 	mov	w1, 0
 	sub	w4, w23, w19
@@ -3023,11 +3066,11 @@ FlashEraseBlocks:
 	ldr	w0, [x29,124]
 	ldr	x5, [x29,96]
 	cmp	w0, w1
-	bcc	.L435
+	bcc	.L437
 	mov	w0, -1
 	str	w0, [x24,x5]
-	b	.L436
-.L435:
+	b	.L438
+.L437:
 	add	x1, x28, :lo12:.LANCHOR2
 	mov	x2, 24
 	ldrb	w1, [x1,648]
@@ -3036,9 +3079,9 @@ FlashEraseBlocks:
 	csel	w22, w22, wzr, ne
 	madd	x1, x1, x2, x25
 	ldr	x1, [x1,8]
-	cbz	x1, .L438
+	cbz	x1, .L440
 	bl	FlashWaitCmdDone
-.L438:
+.L440:
 	ldr	w1, [x29,124]
 	mov	x0, 24
 	ldr	w2, [x29,120]
@@ -3046,12 +3089,12 @@ FlashEraseBlocks:
 	str	x21, [x0,8]
 	str	xzr, [x0,16]
 	str	w2, [x0,4]
-	cbz	w22, .L439
+	cbz	w22, .L441
 	add	w2, w19, 1
 	umull	x2, w2, w27
 	add	x2, x24, x2
 	str	x2, [x0,16]
-.L439:
+.L441:
 	add	x0, x20, x1
 	ldrb	w21, [x0,1680]
 	mov	x0, 24
@@ -3060,16 +3103,16 @@ FlashEraseBlocks:
 	strb	w21, [x25,x1]
 	bl	NandcFlashCs
 	cmp	w26, 1
-	bne	.L440
+	bne	.L442
 	ldrb	w0, [x20,136]
-	cbz	w0, .L440
+	cbz	w0, .L442
 	mov	w0, w21
 	bl	flash_enter_slc_mode
-	b	.L441
-.L440:
+	b	.L443
+.L442:
 	mov	w0, w21
 	bl	flash_exit_slc_mode
-.L441:
+.L443:
 	ldr	w1, [x29,124]
 	add	x0, x20, 1688
 	add	w19, w19, w22
@@ -3085,54 +3128,54 @@ FlashEraseBlocks:
 	bl	FlashEraseCmd
 	mov	w0, w21
 	bl	NandcFlashDeCs
-.L436:
+.L438:
 	add	w19, w19, 1
-	b	.L464
-.L465:
+	b	.L466
+.L467:
 	ldr	x0, [x29,104]
 	mov	x20, 0
 	mov	x21, 24
 	add	x19, x0, :lo12:.LANCHOR0
 	ldr	x0, [x19,3976]
 	bl	NandcIqrWaitFlashReady
-.L443:
+.L445:
 	ldrb	w0, [x19,1676]
 	cmp	w0, w20
-	bls	.L466
+	bls	.L468
 	mov	w0, w20
 	bl	FlashWaitCmdDone
 	cmp	w26, 1
-	bne	.L444
+	bne	.L446
 	ldrb	w0, [x19,136]
-	cbz	w0, .L444
+	cbz	w0, .L446
 	madd	x0, x20, x21, x19
 	ldrb	w0, [x0,1720]
 	bl	flash_exit_slc_mode
-.L444:
+.L446:
 	add	x20, x20, 1
-	b	.L443
-.L466:
+	b	.L445
+.L468:
 	adrp	x0, .LANCHOR2+652
 	ldr	w0, [x0,#:lo12:.LANCHOR2+652]
-	cbnz	w0, .L446
-.L448:
+	cbnz	w0, .L448
+.L450:
 	mov	w0, 0
-	b	.L434
-.L446:
+	b	.L436
+.L448:
 	adrp	x0, IDByte
 	ldrb	w0, [x0,#:lo12:IDByte]
 	cmp	w0, 69
-	bne	.L448
+	bne	.L450
 	mov	x0, 0
 	mov	x1, 56
-.L447:
+.L449:
 	cmp	w23, w0
-	bls	.L448
+	bls	.L450
 	mul	x2, x0, x1
 	add	x0, x0, 1
 	str	wzr, [x24,x2]
-	b	.L447
-.L434:
+	b	.L449
+.L436:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -3170,11 +3213,11 @@ NandcSendDumpDataStart:
 	.type	NandcSendDumpDataDone, %function
 NandcSendDumpDataDone:
 	sub	sp, sp, #16
-.L469:
+.L471:
 	ldr	w1, [x0,8]
 	str	w1, [sp,8]
 	ldr	w1, [sp,8]
-	tbz	x1, 20, .L469
+	tbz	x1, 20, .L471
 	add	sp, sp, 16
 	ret
 	.size	NandcSendDumpDataDone, .-NandcSendDumpDataDone
@@ -3212,10 +3255,10 @@ NandcXferStart:
 	add	x0, x19, :lo12:.LANCHOR2
 	orr	w20, w20, 536870912
 	orr	w20, w20, 1024
-	ldr	w0, [x0,572]
+	ldr	w0, [x0,580]
 	bfi	w20, w3, 4, 1
 	cmp	w0, 3
-	bls	.L473
+	bls	.L475
 	ldr	w0, [x21,16]
 	cmp	x5, xzr
 	str	w0, [x29,88]
@@ -3223,11 +3266,11 @@ NandcXferStart:
 	ldr	w0, [x29,88]
 	and	w0, w0, -5
 	str	w0, [x29,88]
-	cbnz	w7, .L487
-	cbz	x22, .L474
-.L487:
-	cbnz	w25, .L476
-.L484:
+	cbnz	w7, .L489
+	cbz	x22, .L476
+.L489:
+	cbnz	w25, .L478
+.L486:
 	mov	x0, x21
 	add	w23, w23, 1
 	asr	w23, w23, 1
@@ -3240,11 +3283,11 @@ NandcXferStart:
 	orr	w0, w0, 1
 	str	w0, [x21,364]
 	mov	x0, x22
-	cbnz	x22, .L478
+	cbnz	x22, .L480
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x0, [x0,592]
-	b	.L478
-.L476:
+	b	.L480
+.L478:
 	add	x1, x19, :lo12:.LANCHOR2
 	mov	w4, 128
 	mov	w2, 0
@@ -3255,26 +3298,26 @@ NandcXferStart:
 	cmp	w0, 25
 	mov	w0, 64
 	csel	w4, w0, w4, cc
-.L480:
+.L482:
 	cmp	w3, w8
-	bcs	.L484
+	bcs	.L486
 	lsr	w0, w2, 2
 	ubfiz	x0, x0, 2, 30
-	cbz	w7, .L481
+	cbz	w7, .L483
 	ldrh	w6, [x5,2]
 	ldr	x10, [x1,600]
 	ldrh	w11, [x5],4
 	orr	w6, w11, w6, lsl 16
 	str	w6, [x10,x0]
-	b	.L482
-.L481:
+	b	.L484
+.L483:
 	ldr	x6, [x1,600]
 	str	w9, [x6,x0]
-.L482:
+.L484:
 	add	w3, w3, 1
 	add	w2, w2, w4
-	b	.L480
-.L478:
+	b	.L482
+.L480:
 	add	x19, x19, :lo12:.LANCHOR2
 	ubfx	x23, x20, 22, 5
 	mov	w2, w25
@@ -3304,12 +3347,12 @@ NandcXferStart:
 	ldr	w0, [x29,88]
 	orr	w0, w0, 448
 	str	w0, [x29,88]
-	cbnz	x22, .L485
+	cbnz	x22, .L487
 	ldr	w0, [x29,88]
 	mov	w1, 2
 	bfi	w0, w1, 3, 3
 	str	w0, [x29,88]
-.L485:
+.L487:
 	ldr	w0, [x29,88]
 	cmp	w25, wzr
 	cset	w1, eq
@@ -3321,10 +3364,10 @@ NandcXferStart:
 	ldr	w0, [x29,88]
 	orr	w0, w0, 1
 	str	w0, [x29,88]
-.L474:
+.L476:
 	ldr	w0, [x29,88]
 	str	w0, [x21,16]
-.L473:
+.L475:
 	str	w24, [x21,12]
 	str	w20, [x21,8]
 	orr	w20, w20, 4
@@ -3352,38 +3395,38 @@ NandcXferComp:
 	adrp	x20, .LANCHOR2
 	ldr	x19, [x1,x0]
 	add	x0, x20, :lo12:.LANCHOR2
-	ldr	w0, [x0,572]
+	ldr	w0, [x0,580]
 	cmp	w0, 3
-	bls	.L522
+	bls	.L524
 	ldr	w0, [x19,16]
-	tbz	x0, 2, .L522
+	tbz	x0, 2, .L524
 	mov	x0, x19
 	bl	wait_for_nandc_xfer_completed
 	ldr	w21, [x19,16]
 	ldr	w0, [x19,8]
 	ubfx	x21, x21, 1, 1
 	str	w0, [x29,64]
-	cbz	w21, .L493
+	cbz	w21, .L495
 	adrp	x22, .LC4
 	adrp	x23, .LC5
 	mov	w21, 0
 	add	x22, x22, :lo12:.LC4
 	add	x23, x23, :lo12:.LC5
-.L494:
+.L496:
 	ldr	w2, [x19,28]
 	ldr	w1, [x29,64]
 	ubfx	x2, x2, 16, 5
 	ubfx	x1, x1, 22, 6
 	cmp	w2, w1
-	bge	.L502
+	bge	.L504
 	add	x0, x20, :lo12:.LANCHOR2
-	ldr	w0, [x0,572]
+	ldr	w0, [x0,580]
 	cmp	w0, 5
-	bhi	.L495
-.L498:
+	bhi	.L497
+.L500:
 	add	w21, w21, 1
 	and	w0, w21, 16777215
-	cbnz	w0, .L494
+	cbnz	w0, .L496
 	ldr	w2, [x19,28]
 	mov	w1, w21
 	ldr	w3, [x29,64]
@@ -3396,19 +3439,19 @@ NandcXferComp:
 	mov	w2, 4
 	mov	w3, 512
 	bl	rknand_print_hex
-	b	.L494
-.L495:
+	b	.L496
+.L497:
 	ldr	w0, [x19]
 	str	w0, [x29,72]
 	ldr	w0, [x29,72]
-	tbz	x0, 13, .L498
+	tbz	x0, 13, .L500
 	ldr	w0, [x29,72]
-	tbz	x0, 17, .L498
-.L502:
+	tbz	x0, 17, .L500
+.L504:
 	add	x19, x20, :lo12:.LANCHOR2
 	add	x19, x19, 592
 	ldr	w0, [x19,40]
-	cbz	w0, .L503
+	cbz	w0, .L505
 	ldr	w1, [x29,64]
 	mov	w2, 0
 	ldr	w0, [x19,32]
@@ -3421,20 +3464,20 @@ NandcXferComp:
 	ubfx	x1, x1, 22, 5
 	lsl	w1, w1, 7
 	bl	rknand_dma_unmap_single
-	b	.L503
-.L493:
+	b	.L505
+.L495:
 	adrp	x22, .LC6
 	adrp	x23, .LC5
 	add	x22, x22, :lo12:.LC6
 	add	x23, x23, :lo12:.LC5
-.L504:
+.L506:
 	ldr	w0, [x29,64]
-	tbnz	x0, 20, .L530
+	tbnz	x0, 20, .L532
 	ldr	w0, [x19,8]
 	add	w21, w21, 1
 	str	w0, [x29,64]
 	and	w0, w21, 16777215
-	cbnz	w0, .L504
+	cbnz	w0, .L506
 	ldr	w2, [x29,64]
 	mov	w1, w21
 	ldr	w3, [x19,28]
@@ -3446,18 +3489,18 @@ NandcXferComp:
 	mov	w2, 4
 	mov	w3, 512
 	bl	rknand_print_hex
-	b	.L504
-.L530:
+	b	.L506
+.L532:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	w0, [x0,640]
-	cbz	w0, .L507
+	cbz	w0, .L509
 	mov	x0, x19
 	bl	NandcSendDumpDataStart
-.L507:
+.L509:
 	add	x21, x20, :lo12:.LANCHOR2
 	add	x21, x21, 592
 	ldr	w0, [x21,40]
-	cbz	w0, .L508
+	cbz	w0, .L510
 	ldr	w1, [x29,64]
 	mov	w2, 1
 	ldr	w0, [x21,32]
@@ -3470,22 +3513,22 @@ NandcXferComp:
 	ubfx	x1, x1, 22, 5
 	lsl	w1, w1, 7
 	bl	rknand_dma_unmap_single
-.L508:
+.L510:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	w0, [x0,640]
-	cbz	w0, .L503
+	cbz	w0, .L505
 	mov	x0, x19
 	bl	NandcSendDumpDataDone
-.L503:
+.L505:
 	add	x20, x20, :lo12:.LANCHOR2
 	str	wzr, [x20,632]
-	b	.L491
-.L522:
+	b	.L493
+.L524:
 	ldr	w0, [x19,8]
 	str	w0, [x29,64]
 	ldr	w0, [x29,64]
-	tbz	x0, 20, .L522
-.L491:
+	tbz	x0, 20, .L524
+.L493:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -3508,14 +3551,14 @@ NandcCopy1KB:
 	add	x4, x0, 4096
 	add	x21, x0, 512
 	add	x2, x4, x2
-	bne	.L532
-	cbz	x3, .L533
+	bne	.L534
+	cbz	x3, .L535
 	mov	x0, x2
 	mov	x1, x3
 	mov	w2, 1024
 	bl	ftl_memcpy
-.L533:
-	cbz	x20, .L531
+.L535:
+	cbz	x20, .L533
 	mov	w0, 48
 	lsr	w19, w19, 1
 	ldrb	w1, [x20,1]
@@ -3529,15 +3572,15 @@ NandcCopy1KB:
 	ldrb	w1, [x20,3]
 	orr	w0, w0, w1, lsl 24
 	str	w0, [x21,w19,sxtw 2]
-	b	.L531
-.L532:
-	cbz	x3, .L536
+	b	.L533
+.L534:
+	cbz	x3, .L538
 	mov	x1, x2
 	mov	x0, x3
 	mov	w2, 1024
 	bl	ftl_memcpy
-.L536:
-	cbz	x20, .L531
+.L538:
+	cbz	x20, .L533
 	mov	w0, 48
 	lsr	w19, w19, 1
 	mul	w19, w19, w0
@@ -3550,7 +3593,7 @@ NandcCopy1KB:
 	lsr	w0, w0, 24
 	strb	w1, [x20,2]
 	strb	w0, [x20,3]
-.L531:
+.L533:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -3577,14 +3620,14 @@ NandcXferData:
 	uxtb	w23, w2
 	mov	x25, x3
 	mov	x21, x4
-	cbnz	x0, .L548
-	cbnz	x4, .L549
+	cbnz	x0, .L550
+	cbnz	x4, .L551
 	add	x0, x29, 112
 	mov	w1, 255
 	mov	w2, 64
 	add	x21, x29, 112
 	bl	ftl_memset
-.L549:
+.L551:
 	mov	w0, w24
 	mov	w1, w20
 	mov	w2, w23
@@ -3595,7 +3638,7 @@ NandcXferData:
 	bl	NandcXferStart
 	mov	w0, w24
 	bl	NandcXferComp
-	cbnz	w20, .L550
+	cbnz	w20, .L552
 	adrp	x0, .LANCHOR2
 	ubfx	x3, x23, 1, 7
 	add	x2, x0, :lo12:.LANCHOR2
@@ -3606,10 +3649,10 @@ NandcXferData:
 	mov	w1, 64
 	csel	w4, w1, w4, cc
 	mov	w1, w20
-.L552:
+.L554:
 	cmp	x21, x3
 	add	w5, w1, w4
-	beq	.L594
+	beq	.L596
 	ldr	x6, [x2,600]
 	and	x1, x1, 4294967292
 	add	x21, x21, 4
@@ -3622,29 +3665,29 @@ NandcXferData:
 	lsr	w1, w1, 24
 	strb	w1, [x21,-1]
 	mov	w1, w5
-	b	.L552
-.L594:
+	b	.L554
+.L596:
 	add	x0, x0, :lo12:.LANCHOR2
 	lsr	w23, w23, 2
 	ldr	w4, [x0,644]
-	ldr	w5, [x0,572]
+	ldr	w5, [x0,580]
 	mov	w0, 0
 	mov	w22, w0
-.L554:
+.L556:
 	cmp	w0, w23
-	bcs	.L550
-	cbz	w4, .L550
+	bcs	.L552
+	cbz	w4, .L552
 	uxtw	x1, w0
 	add	x1, x1, 8
 	ldr	w1, [x19,x1,lsl 2]
 	str	w1, [x29,104]
 	ldr	w1, [x29,104]
-	tbnz	x1, 2, .L578
+	tbnz	x1, 2, .L580
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 15, 1
-	cbnz	w3, .L578
+	cbnz	w3, .L580
 	cmp	w5, 5
-	bls	.L556
+	bls	.L558
 	ldr	w2, [x29,104]
 	ubfx	x6, x2, 3, 5
 	ldr	w2, [x29,104]
@@ -3657,20 +3700,20 @@ NandcXferData:
 	orr	w1, w3, w1, lsl 5
 	ldr	w3, [x29,104]
 	cmp	w2, w1
-	bls	.L557
+	bls	.L559
 	ldr	w1, [x29,104]
 	ubfx	x3, x3, 3, 5
 	ubfx	x1, x1, 27, 1
 	orr	w3, w3, w1, lsl 5
-	b	.L558
-.L557:
+	b	.L560
+.L559:
 	ubfx	x1, x3, 16, 5
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 29, 1
-	b	.L593
-.L556:
+	b	.L595
+.L558:
 	cmp	w5, 3
-	bls	.L558
+	bls	.L560
 	ldr	w2, [x29,104]
 	ubfx	x6, x2, 3, 5
 	ldr	w2, [x29,104]
@@ -3683,43 +3726,43 @@ NandcXferData:
 	orr	w1, w3, w1, lsl 5
 	ldr	w3, [x29,104]
 	cmp	w2, w1
-	bls	.L559
+	bls	.L561
 	ubfx	x1, x3, 3, 5
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 28, 1
-	b	.L593
-.L559:
+	b	.L595
+.L561:
 	ubfx	x1, x3, 16, 5
 	ldr	w3, [x29,104]
 	ubfx	x3, x3, 30, 1
-.L593:
+.L595:
 	orr	w3, w1, w3, lsl 5
-.L558:
+.L560:
 	cmp	w22, w3
 	csel	w22, w22, w3, cs
-	b	.L555
-.L578:
+	b	.L557
+.L580:
 	mov	w22, -1
-.L555:
+.L557:
 	add	w0, w0, 1
-	b	.L554
-.L550:
+	b	.L556
+.L552:
 	str	wzr, [x19,16]
-	b	.L561
-.L548:
+	b	.L563
+.L550:
 	cmp	w20, 1
-	bne	.L592
+	bne	.L594
 	mov	w22, 0
 	mov	w27, 2
-.L562:
+.L564:
 	cmp	w22, w23
-	bcs	.L595
+	bcs	.L597
 	and	w26, w22, 3
 	mov	x3, x25
-	cbz	x25, .L564
+	cbz	x25, .L566
 	ubfiz	x0, x22, 9, 23
 	add	x3, x25, x0
-.L564:
+.L566:
 	cmp	x21, xzr
 	mov	x0, x19
 	csel	w4, w27, wzr, ne
@@ -3738,11 +3781,11 @@ NandcXferData:
 	bl	NandcXferStart
 	mov	w0, w24
 	bl	NandcXferComp
-	b	.L562
-.L595:
+	b	.L564
+.L597:
 	mov	w22, 0
-	b	.L561
-.L592:
+	b	.L563
+.L594:
 	mov	w1, 0
 	mov	x4, 0
 	mov	w26, 0
@@ -3753,16 +3796,16 @@ NandcXferData:
 	mov	w22, w26
 	mov	w27, 2
 	bl	NandcXferStart
-.L567:
+.L569:
 	cmp	w26, w23
-	bcs	.L561
+	bcs	.L563
 	mov	w0, w24
 	add	w28, w26, 2
 	bl	NandcXferComp
 	ldr	w0, [x19,32]
 	cmp	w28, w23
 	str	w0, [x29,104]
-	bcs	.L568
+	bcs	.L570
 	mov	x4, 0
 	mov	w0, w24
 	mov	w1, 0
@@ -3770,9 +3813,9 @@ NandcXferData:
 	and	w3, w28, 3
 	mov	x5, x4
 	bl	NandcXferStart
-.L568:
+.L570:
 	ldr	w0, [x29,104]
-	tbnz	x0, 2, .L583
+	tbnz	x0, 2, .L585
 	ldr	w0, [x29,104]
 	ubfx	x1, x0, 3, 5
 	ldr	w0, [x29,104]
@@ -3780,16 +3823,16 @@ NandcXferData:
 	orr	w0, w1, w0, lsl 5
 	cmp	w22, w0
 	csel	w22, w22, w0, cs
-	b	.L569
-.L583:
+	b	.L571
+.L585:
 	mov	w22, -1
-.L569:
+.L571:
 	and	w2, w26, 3
 	mov	x3, x25
-	cbz	x25, .L570
+	cbz	x25, .L572
 	ubfiz	x3, x26, 9, 23
 	add	x3, x25, x3
-.L570:
+.L572:
 	cmp	x21, xzr
 	mov	x0, x19
 	csel	w4, w27, wzr, ne
@@ -3798,23 +3841,23 @@ NandcXferData:
 	mov	w26, w28
 	add	x4, x21, x4
 	bl	NandcCopy1KB
-	b	.L567
-.L561:
-	cbnz	w20, .L573
-	adrp	x0, .LANCHOR2+572
-	ldr	w0, [x0,#:lo12:.LANCHOR2+572]
+	b	.L569
+.L563:
+	cbnz	w20, .L575
+	adrp	x0, .LANCHOR2+580
+	ldr	w0, [x0,#:lo12:.LANCHOR2+580]
 	cmp	w0, 5
-	bls	.L573
+	bls	.L575
 	ldr	w0, [x19]
 	mov	w1, 8192
 	movk	w1, 0x2, lsl 16
 	and	w1, w0, w1
 	cmp	w1, 139264
-	bne	.L573
+	bne	.L575
 	orr	w0, w0, 131072
 	mov	w22, -1
 	str	w0, [x19]
-.L573:
+.L575:
 	mov	w0, w22
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -3837,7 +3880,7 @@ FlashReadRawPage:
 	str	x21, [sp,32]
 	mov	x21, x2
 	ldrb	w20, [x0,#:lo12:.LANCHOR1+265]
-	cbnz	w19, .L597
+	cbnz	w19, .L599
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w5, [x0,25]
@@ -3846,7 +3889,7 @@ FlashReadRawPage:
 	cmp	w1, w0
 	mov	w0, 4
 	csel	w20, w20, w0, cs
-.L597:
+.L599:
 	mov	w0, w19
 	str	x4, [x29,48]
 	str	x1, [x29,56]
@@ -3898,11 +3941,11 @@ FlashDdrTunningRead:
 	ldr	w0, [x0,304]
 	mov	w21, 1024
 	str	w0, [x29,124]
-	ldr	w0, [x27,572]
+	ldr	w0, [x27,580]
 	cmp	w0, 8
 	mov	w0, 12
 	csel	w22, w22, w0, cc
-	cbz	w4, .L600
+	cbz	w4, .L602
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
@@ -3920,41 +3963,41 @@ FlashDdrTunningRead:
 	ldrb	w0, [x27,564]
 	bl	NandcSetMode
 	cmn	w21, #1
-	bne	.L601
-.L610:
+	bne	.L603
+.L612:
 	mov	w21, -1
-	b	.L602
-.L601:
+	b	.L604
+.L603:
 	adrp	x0, .LC7
 	mov	w1, w25
 	add	x0, x0, :lo12:.LC7
 	mov	w2, w21
 	bl	printk
 	cmp	w21, 9
-	bhi	.L603
+	bhi	.L605
 	add	x20, x20, x24, sxtw 4
 	ldr	x0, [x20,40]
 	ldr	w1, [x0,3840]
 	ldr	w1, [x0]
 	orr	w1, w1, 131072
 	str	w1, [x0]
-.L603:
+.L605:
 	add	x19, x19, :lo12:.LANCHOR2
 	ldr	w0, [x19,656]
 	add	w0, w0, 1
 	str	w0, [x19,656]
 	cmp	w0, 2047
-	bls	.L602
+	bls	.L604
 	mov	x23, 0
 	str	wzr, [x19,656]
 	mov	x28, x23
-.L600:
+.L602:
 	mov	w19, 0
 	mov	w27, -1
 	mov	w5, w19
 	mov	w6, w19
 	mov	w20, w19
-.L608:
+.L610:
 	mov	w0, w22
 	str	x5, [x29,104]
 	str	x6, [x29,112]
@@ -3968,63 +4011,63 @@ FlashDdrTunningRead:
 	ldr	x6, [x29,112]
 	cmp	w0, w1
 	ldr	x5, [x29,104]
-	bhi	.L604
+	bhi	.L606
 	cmp	w0, 2
-	bhi	.L614
+	bhi	.L616
 	add	w20, w20, 1
 	cmp	w20, 9
-	bls	.L614
+	bls	.L616
 	sub	w19, w22, w20
 	mov	w21, w0
 	mov	w27, 0
-	b	.L606
-.L604:
+	b	.L608
+.L606:
 	cmp	w6, w20
-	bcs	.L615
+	bcs	.L617
 	cmp	w20, 7
 	sub	w5, w19, w20
-	bhi	.L616
+	bhi	.L618
 	mov	w6, w20
-	b	.L615
-.L614:
+	b	.L617
+.L616:
 	mov	x23, 0
 	mov	w19, w22
 	mov	w21, w0
 	mov	w27, 0
 	mov	x28, x23
-	b	.L605
-.L615:
+	b	.L607
+.L617:
 	mov	w20, 0
-.L605:
+.L607:
 	add	w22, w22, 2
 	cmp	w22, 69
-	bls	.L608
-.L606:
+	bls	.L610
+.L608:
 	cmp	w6, w20
 	csel	w19, w19, w5, cc
-	b	.L607
-.L616:
+	b	.L609
+.L618:
 	mov	w19, w5
-.L607:
-	cbz	w19, .L609
+.L609:
+	cbz	w19, .L611
 	adrp	x0, .LC8
 	mov	w1, w19
 	add	x0, x0, :lo12:.LC8
 	bl	printk
 	mov	w0, w19
 	bl	NandcSetDdrPara
-.L609:
-	cbz	w27, .L602
+.L611:
+	cbz	w27, .L604
 	adrp	x0, .LC9
 	mov	w1, w24
 	add	x0, x0, :lo12:.LC9
 	mov	w2, w25
 	bl	printk
-	cbz	w26, .L610
+	cbz	w26, .L612
 	ldr	w0, [x29,124]
 	lsr	w0, w0, 8
 	bl	NandcSetDdrPara
-.L602:
+.L604:
 	mov	w0, w21
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -4054,17 +4097,17 @@ FlashReadPage:
 	cmn	w0, #1
 	mov	w19, w0
 	adrp	x23, .LANCHOR2
-	bne	.L626
+	bne	.L628
 	adrp	x21, .LANCHOR0
 	add	x26, x21, :lo12:.LANCHOR0
 	ldrb	w27, [x26,32]
-	cbnz	w27, .L627
-.L629:
+	cbnz	w27, .L629
+.L631:
 	add	x0, x23, :lo12:.LANCHOR2
-	ldrb	w0, [x0,565]
-	cbz	w0, .L626
-	b	.L647
-.L627:
+	ldrb	w0, [x0,572]
+	cbz	w0, .L628
+	b	.L649
+.L629:
 	mov	w0, w20
 	mov	w1, w22
 	mov	x2, x25
@@ -4073,10 +4116,10 @@ FlashReadPage:
 	bl	FlashReadRawPage
 	strb	w27, [x26,32]
 	cmn	w0, #1
-	beq	.L629
+	beq	.L631
 	mov	w19, w0
-	b	.L626
-.L647:
+	b	.L628
+.L649:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	w1, w22
 	mov	x2, x25
@@ -4088,19 +4131,19 @@ FlashReadPage:
 	bl	FlashDdrTunningRead
 	cmn	w0, #1
 	mov	w19, w0
-	beq	.L630
+	beq	.L632
 	ldrb	w0, [x21,4044]
 	cmp	w19, w0, lsr 1
-	bls	.L626
-.L630:
+	bls	.L628
+.L632:
 	lsr	w0, w26, 8
 	bl	NandcSetDdrPara
-.L626:
+.L628:
 	add	x21, x23, :lo12:.LANCHOR2
 	cmn	w19, #1
 	ldr	x4, [x21,664]
-	bne	.L631
-	cbz	x4, .L631
+	bne	.L633
+	cbz	x4, .L633
 	mov	w1, w22
 	mov	x2, x25
 	mov	x3, x24
@@ -4114,10 +4157,10 @@ FlashReadPage:
 	mov	w3, w22
 	bl	printk
 	cmn	w19, #1
-	bne	.L631
+	bne	.L633
 	adrp	x0, .LANCHOR0+136
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
-	cbz	w0, .L631
+	cbz	w0, .L633
 	mov	w0, w20
 	bl	flash_enter_slc_mode
 	ldr	x4, [x21,664]
@@ -4129,7 +4172,7 @@ FlashReadPage:
 	mov	w19, w0
 	mov	w0, w20
 	bl	flash_exit_slc_mode
-.L631:
+.L633:
 	mov	w0, w19
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -4168,24 +4211,24 @@ FlashDdrParaScan:
 	mov	x3, x2
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	beq	.L652
+	beq	.L654
 	cmn	w22, #1
-	bne	.L649
-.L652:
+	bne	.L651
+.L654:
 	add	x20, x19, :lo12:.LANCHOR2
 	ldrb	w0, [x20,564]
-	tbz	x0, 0, .L649
+	tbz	x0, 0, .L651
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
 	bl	NandcSetMode
-	strb	wzr, [x20,565]
-	b	.L651
-.L649:
+	strb	wzr, [x20,572]
+	b	.L653
+.L651:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, 1
-	strb	w0, [x19,565]
-.L651:
+	strb	w0, [x19,572]
+.L653:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -4226,10 +4269,10 @@ FlashLoadPhyInfo:
 	mov	w24, -1
 	ldrh	w28, [x21,10]
 	bl	flash_enter_slc_mode
-.L660:
+.L662:
 	add	w26, w20, 1
 	mov	x22, 0
-.L662:
+.L664:
 	add	x0, x29, 104
 	ldrb	w0, [x22,x0]
 	bl	FlashBchSel
@@ -4239,32 +4282,32 @@ FlashLoadPhyInfo:
 	mov	x3, 0
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	bne	.L661
+	bne	.L663
 	ldr	x2, [x19,#:lo12:.LANCHOR0]
 	mov	w0, 0
 	mov	w1, w26
 	mov	x3, 0
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	bne	.L661
+	bne	.L663
 	add	x22, x22, 1
 	cmp	x22, 4
-	beq	.L663
-	b	.L662
-.L664:
+	beq	.L665
+	b	.L664
+.L666:
 	mov	w1, 2036
 	add	x0, x26, 12
 	mov	w24, -1
 	bl	JSHash
 	ldr	w1, [x26,8]
 	cmp	w1, w0
-	beq	.L674
-.L663:
+	beq	.L676
+.L665:
 	subs	w27, w27, #1
 	add	w20, w20, w28
-	bne	.L660
+	bne	.L662
 	mov	w0, w27
-.L673:
+.L675:
 	bl	flash_exit_slc_mode
 	mov	w0, w24
 	ldp	x19, x20, [sp,16]
@@ -4274,15 +4317,15 @@ FlashLoadPhyInfo:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L661:
+.L663:
 	add	x22, x25, :lo12:.LANCHOR2
 	mov	w0, 20036
 	movk	w0, 0x4e41, lsl 16
 	ldr	x26, [x22,672]
 	ldr	w1, [x26]
 	cmp	w1, w0
-	bne	.L663
-	cbnz	w24, .L664
+	bne	.L665
+	cbnz	w24, .L666
 	add	x23, x23, :lo12:.LANCHOR1
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w0, [x23,266]
@@ -4290,8 +4333,8 @@ FlashLoadPhyInfo:
 	mov	w0, w24
 	add	w20, w20, 1
 	str	w20, [x19,8]
-	b	.L673
-.L674:
+	b	.L675
+.L676:
 	add	x1, x26, 160
 	mov	w2, 32
 	mov	x0, x21
@@ -4310,22 +4353,22 @@ FlashLoadPhyInfo:
 	str	w20, [x22,680]
 	ldr	x1, [x22,672]
 	ldr	w0, [x1,1076]
-	strb	w0, [x22,565]
+	strb	w0, [x22,572]
 	ldrh	w0, [x21,10]
 	udiv	w0, w20, w0
 	add	w2, w0, 1
-	cbz	w0, .L666
+	cbz	w0, .L668
 	str	w2, [x24,8]
-	b	.L667
-.L666:
+	b	.L669
+.L668:
 	mov	w0, 2
 	str	w0, [x24,8]
-.L667:
+.L669:
 	add	x0, x25, :lo12:.LANCHOR2
 	ldrh	w1, [x1,14]
 	mov	w24, 0
 	strb	w1, [x0,684]
-	b	.L663
+	b	.L665
 	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
 	.align	2
 	.global	ToshibaReadRetrial
@@ -4362,21 +4405,21 @@ ToshibaReadRetrial:
 	sub	w0, w0, #67
 	uxtb	w0, w0
 	cmp	w0, 1
-	bls	.L676
-	adrp	x0, .LANCHOR2+565
-	ldrb	w0, [x0,#:lo12:.LANCHOR2+565]
-	cbz	w0, .L677
+	bls	.L678
+	adrp	x0, .LANCHOR2+572
+	ldrb	w0, [x0,#:lo12:.LANCHOR2+572]
+	cbz	w0, .L679
 	mov	w0, w22
 	mov	w22, 1
 	bl	NandcSetDdrMode
-.L677:
+.L679:
 	ubfiz	x0, x28, 8, 8
 	mov	w2, 92
 	add	x0, x24, x0
 	str	w2, [x0,2056]
 	mov	w2, 197
 	str	w2, [x0,2056]
-.L676:
+.L678:
 	adrp	x0, g_maxRetryCount
 	mov	w21, 1
 	add	x0, x0, :lo12:g_maxRetryCount
@@ -4388,44 +4431,44 @@ ToshibaReadRetrial:
 	str	x0, [x29,104]
 	ubfiz	x0, x28, 8, 8
 	str	x0, [x29,96]
-.L678:
+.L680:
 	adrp	x0, g_maxRetryCount
 	ldrb	w0, [x0,#:lo12:g_maxRetryCount]
 	add	w0, w0, 1
 	cmp	w21, w0
-	bcs	.L703
+	bcs	.L705
 	ldrb	w0, [x20,#:lo12:g_retryMode]
 	mov	w1, w21
 	sub	w0, w0, #67
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x19
-	bhi	.L679
+	bhi	.L681
 	bl	SandiskSetRRPara
-	b	.L680
-.L679:
+	b	.L682
+.L681:
 	bl	ToshibaSetRRPara
-.L680:
+.L682:
 	ldrb	w0, [x20,#:lo12:g_retryMode]
 	cmp	w0, 34
-	bne	.L681
+	bne	.L683
 	ldr	x0, [x29,112]
 	ldrb	w0, [x0]
 	sub	w0, w0, #3
 	cmp	w21, w0
-	bne	.L681
+	bne	.L683
 	ldr	x0, [x29,104]
 	mov	w1, 179
 	add	x0, x24, x0
 	str	w1, [x0,8]
-.L681:
+.L683:
 	ldr	x0, [x29,96]
 	mov	w1, 38
 	add	x0, x24, x0
 	str	w1, [x0,2056]
 	mov	w1, 93
 	str	w1, [x0,2056]
-	cbz	w22, .L682
+	cbz	w22, .L684
 	mov	w0, 4
 	bl	NandcSetDdrMode
 	ldr	w1, [x29,132]
@@ -4436,17 +4479,17 @@ ToshibaReadRetrial:
 	mov	w28, w0
 	mov	w0, 0
 	bl	NandcSetDdrMode
-	b	.L683
-.L682:
+	b	.L685
+.L684:
 	ldr	w1, [x29,132]
 	mov	w0, w23
 	mov	x2, x27
 	mov	x3, x26
 	bl	FlashReadRawPage
 	mov	w28, w0
-.L683:
+.L685:
 	cmn	w28, #1
-	beq	.L684
+	beq	.L686
 	ldr	x0, [x29,120]
 	cmn	w25, #1
 	csel	w25, w25, w28, ne
@@ -4454,27 +4497,27 @@ ToshibaReadRetrial:
 	ldrb	w0, [x0,4044]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L686
+	bcc	.L688
 	mov	x26, 0
 	mov	x27, x26
-.L684:
+.L686:
 	add	w21, w21, 1
-	b	.L678
-.L703:
+	b	.L680
+.L705:
 	mov	w28, w25
-.L686:
+.L688:
 	ldrb	w0, [x20,#:lo12:g_retryMode]
 	mov	w1, 0
 	sub	w0, w0, #67
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x19
-	bhi	.L688
+	bhi	.L690
 	bl	SandiskSetRRPara
-	b	.L689
-.L688:
+	b	.L691
+.L690:
 	bl	ToshibaSetRRPara
-.L689:
+.L691:
 	ldr	x0, [x29,136]
 	add	x0, x0, 8
 	add	x24, x24, x0, lsl 8
@@ -4485,17 +4528,17 @@ ToshibaReadRetrial:
 	ldrb	w0, [x0,4044]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L690
+	bcc	.L692
 	cmn	w28, #1
 	mov	w0, 256
 	csel	w28, w28, w0, eq
-.L690:
+.L692:
 	mov	w0, w23
 	bl	NandcWaitFlashReady
-	cbz	w22, .L691
+	cbz	w22, .L693
 	mov	w0, 4
 	bl	NandcSetDdrMode
-.L691:
+.L693:
 	mov	w0, w28
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -4535,11 +4578,11 @@ SamsungReadRetrial:
 	ldrb	w21, [x2,8]
 	add	x21, x21, 8
 	add	x21, x0, x21, lsl 8
-.L705:
+.L707:
 	ldrb	w0, [x27]
 	add	w0, w0, 1
 	cmp	w26, w0
-	bcs	.L708
+	bcs	.L710
 	mov	x0, x21
 	mov	w1, w26
 	bl	SamsungSetRRPara
@@ -4549,22 +4592,22 @@ SamsungReadRetrial:
 	mov	x3, x23
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	beq	.L706
+	beq	.L708
 	add	x1, x20, :lo12:.LANCHOR0
 	cmn	w19, #1
 	csel	w19, w19, w0, ne
 	ldrb	w1, [x1,4044]
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	bcc	.L711
+	bcc	.L713
 	mov	x23, 0
 	mov	x24, x23
-.L706:
+.L708:
 	add	w26, w26, 1
-	b	.L705
-.L711:
+	b	.L707
+.L713:
 	mov	w19, w0
-.L708:
+.L710:
 	mov	x0, x21
 	mov	w1, 0
 	add	x20, x20, :lo12:.LANCHOR0
@@ -4572,11 +4615,11 @@ SamsungReadRetrial:
 	ldrb	w0, [x20,4044]
 	add	w0, w0, w0, lsl 1
 	cmp	w19, w0, lsr 2
-	bcc	.L710
+	bcc	.L712
 	cmn	w19, #1
 	mov	w0, 256
 	csel	w19, w19, w0, eq
-.L710:
+.L712:
 	mov	w0, w19
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -4590,125 +4633,163 @@ SamsungReadRetrial:
 	.global	MicronReadRetrial
 	.type	MicronReadRetrial, %function
 MicronReadRetrial:
-	stp	x29, x30, [sp, -144]!
-	adrp	x4, .LANCHOR0
+	stp	x29, x30, [sp, -160]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	uxtb	w22, w0
-	add	x0, x4, :lo12:.LANCHOR0
-	stp	x23, x24, [sp,48]
 	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x20, :lo12:.LANCHOR0
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	mov	w24, w1
-	mov	x25, x2
-	ldrb	w20, [x0,4044]
-	mov	x23, x3
+	stp	x23, x24, [sp,48]
+	mov	w28, w1
+	mov	x26, x2
+	ldrb	w19, [x0,4044]
+	mov	x22, x3
 	ldrb	w0, [x0,136]
-	mov	x19, x4
-	cbnz	w0, .L718
-	add	w20, w20, w20, lsl 1
-	ubfx	x20, x20, 2, 8
-	b	.L719
-.L718:
+	cbnz	w0, .L720
+	add	w19, w19, w19, lsl 1
+	ubfx	x19, x19, 2, 8
+	b	.L721
+.L720:
 	mov	w0, 3
-	sdiv	w20, w20, w0
-.L719:
-	mov	w0, w22
-	adrp	x28, g_maxRetryCount
-	mov	w27, 0
-	add	x28, x28, :lo12:g_maxRetryCount
+	sdiv	w19, w19, w0
+.L721:
+	adrp	x0, g_maxRetryCount
+	adrp	x27, .LC11
+	add	x0, x0, :lo12:g_maxRetryCount
+	mov	w25, 0
+	str	x0, [x29,152]
+	add	x0, x27, :lo12:.LC11
+	str	x0, [x29,144]
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x23, x20, 40
+	add	x23, x23, x21, sxtw 4
+.L732:
+	mov	w0, w21
+	mov	w24, 0
+	mov	w27, -1
 	bl	NandcWaitFlashReady
-	add	x4, x19, :lo12:.LANCHOR0
-	sbfiz	x0, x22, 4, 32
-	add	x4, x4, 40
-	mov	w19, -1
-	add	x1, x4, x0
-	mov	w7, 239
-	mov	w8, 137
-	ldr	x4, [x4,x0]
-	ldrb	w21, [x1,8]
-	lsl	x6, x21, 8
-.L720:
-	ldrb	w0, [x28]
-	cmp	w27, w0
-	bcs	.L723
-	add	x26, x4, x6
+	ldrb	w4, [x23,8]
+	mov	w9, 239
+	ldr	x6, [x23]
+	mov	w10, 137
+	lsl	x8, x4, 8
+.L722:
+	ldr	x0, [x29,152]
+	ldrb	w0, [x0]
+	cmp	w24, w0
+	bcs	.L725
+	add	x2, x6, x8
 	mov	w0, 200
-	str	x6, [x29,104]
-	str	x4, [x29,112]
-	str	w7, [x26,2056]
-	str	w8, [x26,2052]
-	str	x7, [x29,120]
-	str	x8, [x29,128]
+	str	x4, [x29,96]
+	str	x8, [x29,104]
+	str	w9, [x2,2056]
+	str	w10, [x2,2052]
+	str	x6, [x29,112]
+	str	x9, [x29,120]
+	str	x10, [x29,128]
+	str	x2, [x29,136]
 	bl	NandcDelayns
-	add	w5, w27, 1
-	str	w5, [x26,2048]
-	str	wzr, [x26,2048]
-	mov	w0, w22
-	str	wzr, [x26,2048]
-	mov	w1, w24
-	str	wzr, [x26,2048]
-	mov	x2, x25
-	mov	x3, x23
-	str	x5, [x29,136]
+	ldr	x2, [x29,136]
+	add	w7, w24, 1
+	mov	w0, w21
+	mov	w1, w28
+	mov	x3, x22
+	str	x7, [x29,136]
+	str	w7, [x2,2048]
+	str	wzr, [x2,2048]
+	str	wzr, [x2,2048]
+	str	wzr, [x2,2048]
+	mov	x2, x26
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	ldr	x5, [x29,136]
-	ldr	x8, [x29,128]
-	ldr	x7, [x29,120]
-	ldr	x4, [x29,112]
-	ldr	x6, [x29,104]
-	beq	.L721
-	cmn	w19, #1
-	csel	w19, w19, w0, ne
-	cmp	w0, w20
-	bcc	.L728
-	mov	x23, 0
-	mov	x25, x23
-.L721:
-	mov	w27, w5
-	b	.L720
-.L728:
-	mov	w19, w0
+	ldr	x7, [x29,136]
+	ldr	x10, [x29,128]
+	ldr	x9, [x29,120]
+	ldr	x6, [x29,112]
+	ldr	x8, [x29,104]
+	ldr	x4, [x29,96]
+	beq	.L723
+	cmn	w27, #1
+	csel	w27, w27, w0, ne
+	cmp	w0, w19
+	bcc	.L734
+	mov	x22, 0
+	mov	x26, x22
 .L723:
-	add	x21, x4, x21, lsl 8
+	mov	w24, w7
+	b	.L722
+.L734:
+	mov	x22, 0
+	mov	w27, w0
+	mov	x26, x22
+.L725:
+	add	x1, x6, x4, lsl 8
 	mov	w0, 239
-	str	w0, [x21,2056]
+	str	x1, [x29,136]
+	str	w0, [x1,2056]
 	mov	w0, 137
-	str	w0, [x21,2052]
+	str	w0, [x1,2052]
 	mov	w0, 200
 	bl	NandcDelayns
-	str	wzr, [x21,2048]
-	str	wzr, [x21,2048]
-	cmp	w19, w20
-	str	wzr, [x21,2048]
-	str	wzr, [x21,2048]
-	bcc	.L725
-	cmn	w19, #1
+	ldr	x1, [x29,136]
+	cmp	w27, w19
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	bcc	.L727
+	cmn	w27, #1
 	mov	w0, 256
-	csel	w19, w19, w0, eq
-.L725:
-	cmn	w19, #1
-	beq	.L729
-	cmp	w19, 256
-	bne	.L726
-.L729:
-	adrp	x0, .LC11
-	mov	w1, w27
-	add	x0, x0, :lo12:.LC11
-	mov	w2, w24
-	mov	w3, w27
-	mov	w4, w19
+	csel	w27, w27, w0, eq
+.L727:
+	cmn	w27, #1
+	cset	w6, eq
+	cbnz	w6, .L736
+	cmp	w27, 256
+	cset	w1, eq
+	cbz	w1, .L728
+.L736:
+	ldr	x0, [x29,144]
+	mov	w1, w24
+	mov	w2, w28
+	mov	w3, w24
+	mov	w4, w27
+	str	x6, [x29,136]
 	bl	printk
-.L726:
-	mov	w0, w19
+	cbnz	w25, .L730
+	ldr	x6, [x29,136]
+	cbz	w6, .L741
+	ldrb	w0, [x20,136]
+	cbz	w0, .L741
+	mov	w0, w21
+	mov	w1, 3
+	mov	w25, 1
+	bl	micron_auto_read_calibration_config
+	b	.L732
+.L730:
+	mov	w0, w21
+	mov	w1, 0
+	bl	micron_auto_read_calibration_config
+	cmn	w27, #1
+	mov	w0, 256
+	csel	w27, w27, w0, eq
+	b	.L741
+.L728:
+	cbz	w25, .L741
+	mov	w0, w21
+	mov	w27, 256
+	bl	micron_auto_read_calibration_config
+.L741:
+	mov	w0, w27
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 144
+	ldp	x29, x30, [sp], 160
 	ret
 	.size	MicronReadRetrial, .-MicronReadRetrial
 	.align	2
@@ -4736,18 +4817,18 @@ HynixReadRetrial:
 	ldrb	w19, [x0,12]
 	ldrb	w1, [x1,19]
 	cmp	w1, 7
-	bne	.L739
+	bne	.L750
 	ldrb	w19, [x0,20]
-.L739:
+.L750:
 	mov	w0, w23
 	mov	w28, 0
 	mov	w20, -1
 	bl	NandcWaitFlashReady
 	add	x4, x21, :lo12:.LANCHOR0
 	add	x5, x4, 4060
-.L740:
+.L751:
 	cmp	w28, w25
-	bcs	.L744
+	bcs	.L755
 	add	w19, w19, 1
 	ldrb	w1, [x4,4057]
 	mov	x2, x5
@@ -4767,42 +4848,42 @@ HynixReadRetrial:
 	cmn	w0, #1
 	ldr	x5, [x29,104]
 	ldr	x4, [x29,96]
-	beq	.L742
+	beq	.L753
 	ldrb	w1, [x4,4044]
 	cmn	w20, #1
 	csel	w20, w20, w0, ne
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	bcc	.L749
+	bcc	.L760
 	mov	x24, 0
 	mov	x26, x24
-.L742:
+.L753:
 	add	w28, w28, 1
-	b	.L740
-.L749:
+	b	.L751
+.L760:
 	mov	w20, w0
-.L744:
+.L755:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	x1, [x0,1912]
 	add	x0, x0, 4056
 	add	x0, x0, x22
 	ldrb	w1, [x1,19]
 	cmp	w1, 7
-	bne	.L746
+	bne	.L757
 	strb	w19, [x0,20]
-	b	.L747
-.L746:
+	b	.L758
+.L757:
 	strb	w19, [x0,12]
-.L747:
+.L758:
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x21,4044]
 	add	w0, w0, w0, lsl 1
 	cmp	w20, w0, lsr 2
-	bcc	.L748
+	bcc	.L759
 	cmn	w20, #1
 	mov	w0, 256
 	csel	w20, w20, w0, eq
-.L748:
+.L759:
 	mov	w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -4826,21 +4907,21 @@ FlashProgPage:
 	mov	w20, w1
 	mov	x22, x2
 	ldrb	w21, [x0,#:lo12:.LANCHOR1+265]
-	cbnz	w19, .L756
+	cbnz	w19, .L767
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w1, [x0,25]
 	ldr	w2, [x0,28]
 	mul	w1, w1, w2
 	cmp	w20, w1
-	bcs	.L756
+	bcs	.L767
 	ldrb	w0, [x0,24]
-	cbnz	w0, .L757
+	cbnz	w0, .L768
 	sub	w21, w21, #2
-	b	.L756
-.L757:
+	b	.L767
+.L768:
 	mov	w21, 4
-.L756:
+.L767:
 	mov	w0, w19
 	str	x4, [x29,56]
 	bl	NandcWaitFlashReady
@@ -4906,7 +4987,7 @@ FlashSavePhyInfo:
 	strh	w1, [x0,-4]
 	ldrb	w1, [x20,25]
 	strh	w1, [x0,-2]
-	ldrb	w1, [x19,565]
+	ldrb	w1, [x19,572]
 	str	w1, [x0,1060]
 	adrp	x1, IDByte
 	add	x1, x1, :lo12:IDByte
@@ -4950,7 +5031,7 @@ FlashSavePhyInfo:
 	mov	w0, 0
 	mov	w19, w21
 	bl	flash_enter_slc_mode
-.L761:
+.L772:
 	add	x20, x22, :lo12:.LANCHOR0
 	mov	w2, 0
 	mov	w0, 0
@@ -4979,34 +5060,34 @@ FlashSavePhyInfo:
 	mul	w1, w19, w1
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	beq	.L759
+	beq	.L770
 	ldr	x25, [x24,672]
 	mov	w0, 20036
 	movk	w0, 0x4e41, lsl 16
 	ldr	w1, [x25]
 	cmp	w1, w0
-	bne	.L759
+	bne	.L770
 	mov	w1, 2036
 	add	x0, x25, 12
 	bl	JSHash
 	ldr	w1, [x25,8]
 	cmp	w1, w0
-	bne	.L759
+	bne	.L770
 	ldr	w0, [x20,28]
 	cmp	w21, 1
 	str	w26, [x20,8]
 	mul	w19, w19, w0
 	str	w19, [x24,680]
-	beq	.L762
+	beq	.L773
 	mov	w21, 1
-.L759:
+.L770:
 	cmp	w26, 4
 	mov	w19, w26
-	bne	.L761
-	b	.L760
-.L762:
+	bne	.L772
+	b	.L771
+.L773:
 	mov	w21, 2
-.L760:
+.L771:
 	mov	w0, 0
 	bl	flash_exit_slc_mode
 	cmp	w21, wzr
@@ -5043,14 +5124,14 @@ FlashReadIdbDataRaw:
 	stp	x25, x26, [sp,64]
 	ldrb	w28, [x0,4044]
 	add	x0, x22, :lo12:.LANCHOR2
-	ldr	w1, [x0,576]
+	ldr	w1, [x0,568]
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w1, w0
-	bne	.L768
+	bne	.L779
 	mov	w0, 0
 	bl	flash_enter_slc_mode
-.L768:
+.L779:
 	adrp	x25, .LC12
 	mov	x0, x27
 	mov	w1, 0
@@ -5059,13 +5140,13 @@ FlashReadIdbDataRaw:
 	mov	w20, 2
 	add	x25, x25, :lo12:.LC12
 	bl	ftl_memset
-.L769:
+.L780:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x0,25]
 	cmp	w20, w0
-	bcs	.L773
+	bcs	.L784
 	mov	x23, 0
-.L771:
+.L782:
 	add	x0, x29, 104
 	add	x19, x21, :lo12:.LANCHOR0
 	ldrb	w26, [x23,x0]
@@ -5078,18 +5159,18 @@ FlashReadIdbDataRaw:
 	mul	w1, w20, w1
 	bl	FlashReadRawPage
 	cmn	w0, #1
-	bne	.L770
+	bne	.L781
 	add	x23, x23, 1
 	cmp	x23, 4
-	bne	.L771
-	b	.L772
-.L770:
+	bne	.L782
+	b	.L783
+.L781:
 	ldr	x0, [x19]
 	ldr	w1, [x0]
 	mov	w0, 35899
 	movk	w0, 0xfcdc, lsl 16
 	cmp	w1, w0
-	bne	.L772
+	bne	.L783
 	mov	w1, w26
 	mov	x0, x25
 	bl	printk
@@ -5102,27 +5183,27 @@ FlashReadIdbDataRaw:
 	strb	w0, [x19,25]
 	ldr	w0, [x19,8]
 	cmp	w0, w20
-	bls	.L776
+	bls	.L787
 	mov	w24, 0
 	str	w20, [x19,8]
 	bl	FlashSavePhyInfo
-.L772:
+.L783:
 	add	w20, w20, 1
-	b	.L769
-.L776:
+	b	.L780
+.L787:
 	mov	w24, 0
-.L773:
+.L784:
 	mov	w0, w28
 	add	x22, x22, :lo12:.LANCHOR2
 	bl	FlashBchSel
-	ldr	w1, [x22,576]
+	ldr	w1, [x22,568]
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w1, w0
-	bne	.L778
+	bne	.L789
 	mov	w0, 0
 	bl	flash_exit_slc_mode
-.L778:
+.L789:
 	mov	w0, w24
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -5177,7 +5258,7 @@ FlashInit:
 	strb	w1, [x24,-15]
 	strb	w1, [x21,684]
 	str	wzr, [x24,-32]
-	strb	wzr, [x21,565]
+	strb	wzr, [x21,572]
 	str	wzr, [x21,656]
 	add	x21, x23, :lo12:IDByte
 	strb	wzr, [x24,-16]
@@ -5185,7 +5266,7 @@ FlashInit:
 	add	x0, x25, :lo12:.LC13
 	mov	x26, x21
 	str	x0, [x29,104]
-.L785:
+.L796:
 	uxtb	w25, w27
 	mov	w0, w25
 	bl	FlashReset
@@ -5220,7 +5301,7 @@ FlashInit:
 	sub	w0, w2, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L781
+	bhi	.L792
 	ldr	x0, [x29,104]
 	add	w1, w27, 1
 	ldrb	w3, [x21,1]
@@ -5229,35 +5310,35 @@ FlashInit:
 	ldrb	w6, [x21,4]
 	ldrb	w7, [x21,5]
 	bl	printk
-.L781:
-	cbnz	w27, .L782
+.L792:
+	cbnz	w27, .L793
 	ldrb	w0, [x26]
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L829
+	bhi	.L840
 	ldrb	w0, [x26,1]
 	cmp	w0, 255
-	beq	.L829
+	beq	.L840
 	bl	FlashCs123Init
-.L782:
+.L793:
 	ldrb	w0, [x21]
 	cmp	w0, 181
-	bne	.L784
+	bne	.L795
 	strb	w28, [x21]
-.L784:
+.L795:
 	add	w27, w27, 1
 	add	x24, x24, 16
 	cmp	w27, 4
 	add	x21, x21, 8
-	bne	.L785
+	bne	.L796
 	ldrb	w0, [x23,#:lo12:IDByte]
 	cmp	w0, 173
-	beq	.L786
+	beq	.L797
 	add	x0, x20, :lo12:.LANCHOR2
-	ldr	w0, [x0,568]
+	ldr	w0, [x0,576]
 	bl	NandcSetDdrMode
-.L786:
+.L797:
 	add	x21, x19, :lo12:.LANCHOR0
 	mov	w1, 0
 	mov	w2, 852
@@ -5275,16 +5356,16 @@ FlashInit:
 	cmp	w0, 161
 	cset	w2, eq
 	orr	w2, w3, w2
-	cbnz	w2, .L787
+	cbnz	w2, .L798
 	and	w2, w0, -33
 	cmp	w2, 209
-	beq	.L787
+	beq	.L798
 	cmp	w0, 220
-	bne	.L788
+	bne	.L799
 	ldrb	w2, [x4,3]
 	cmp	w2, 149
-	bne	.L788
-.L787:
+	bne	.L799
+.L798:
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w4, 1
 	mov	w5, 16
@@ -5298,37 +5379,37 @@ FlashInit:
 	strb	w5, [x2,3033]
 	strb	w0, [x2,3034]
 	cmp	w5, 152
-	bne	.L789
+	bne	.L800
 	ldrsb	w2, [x6,4]
-	tbnz	w2, #31, .L789
+	tbnz	w2, #31, .L800
 	mov	w2, 24
 	strb	w2, [x4,685]
-.L789:
+.L800:
 	add	x2, x20, :lo12:.LANCHOR2
 	mov	w4, 12336
 	movk	w4, 0x5638, lsl 16
-	ldr	w5, [x2,576]
+	ldr	w5, [x2,568]
 	cmp	w5, w4
-	bne	.L790
+	bne	.L801
 	mov	w4, 16
 	strb	w4, [x2,685]
-.L790:
-	cbz	w3, .L791
+.L801:
+	cbz	w3, .L802
 	add	x0, x1, :lo12:.LANCHOR1
 	mov	w2, 2048
 	strh	w2, [x0,3046]
 	mov	w2, -38
-	b	.L860
-.L791:
+	b	.L871
+.L802:
 	cmp	w0, 220
-	bne	.L792
+	bne	.L803
 	add	x0, x1, :lo12:.LANCHOR1
 	mov	w2, 4096
 	strh	w2, [x0,3046]
 	mov	w2, -36
-.L860:
+.L871:
 	strb	w2, [x0,3034]
-.L792:
+.L803:
 	add	x21, x1, :lo12:.LANCHOR1
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x1, x21, 2688
@@ -5339,45 +5420,45 @@ FlashInit:
 	add	x1, x21, 3032
 	mov	w2, 32
 	bl	ftl_memcpy
-.L788:
+.L799:
 	add	x21, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x21,24]
-	cbnz	w0, .L793
+	cbnz	w0, .L804
 	bl	FlashLoadPhyInfoInRam
-	cbnz	w0, .L795
+	cbnz	w0, .L806
 	ldr	x0, [x21,1912]
 	add	x21, x20, :lo12:.LANCHOR2
 	ldrb	w1, [x0,17]
 	and	w0, w1, 7
 	strb	w0, [x21,564]
-	tbnz	x1, 0, .L795
+	tbnz	x1, 0, .L806
 	mov	w1, 1
-	strb	w1, [x21,565]
+	strb	w1, [x21,572]
 	bl	FlashSetInterfaceMode
 	ldrb	w0, [x21,564]
 	bl	NandcSetMode
-.L795:
+.L806:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x1, [x0,1912]
 	ldrb	w1, [x1,26]
 	strb	w1, [x0,136]
 	bl	FlashLoadPhyInfo
-	cbz	w0, .L793
+	cbz	w0, .L804
 	add	x21, x20, :lo12:.LANCHOR2
-	ldr	w0, [x21,568]
-	cbz	w0, .L798
+	ldr	w0, [x21,576]
+	cbz	w0, .L809
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
-	b	.L861
-.L798:
+	b	.L872
+.L809:
 	ldrb	w0, [x21,564]
 	bl	FlashSetInterfaceMode
 	ldrb	w0, [x21,564]
-.L861:
+.L872:
 	bl	NandcSetMode
 	bl	FlashLoadPhyInfo
-	cbz	w0, .L793
+	cbz	w0, .L804
 	mov	w0, 1
 	add	x21, x19, :lo12:.LANCHOR0
 	bl	FlashSetInterfaceMode
@@ -5390,7 +5471,7 @@ FlashInit:
 	bl	printk
 	bl	FlashLoadPhyInfoInRam
 	cmn	w0, #1
-	beq	.L783
+	beq	.L794
 	bl	FlashDieInfoInit
 	ldr	x0, [x21,1912]
 	ldrb	w0, [x0,19]
@@ -5400,27 +5481,27 @@ FlashInit:
 	ldrb	w2, [x0,9]
 	add	w1, w1, 4095
 	cmp	w2, w1, lsr 12
-	blt	.L800
+	blt	.L811
 	ldrh	w1, [x0,14]
 	add	w1, w1, 255
 	cmp	w2, w1, lsr 8
-	bge	.L801
-.L800:
+	bge	.L812
+.L811:
 	ldrh	w1, [x0,14]
 	and	w1, w1, -256
 	strh	w1, [x0,14]
-.L801:
+.L812:
 	add	x21, x20, :lo12:.LANCHOR2
 	ldrb	w0, [x21,564]
 	tst	w0, 6
-	beq	.L802
+	beq	.L813
 	bl	FlashSavePhyInfo
 	ldr	w1, [x21,680]
 	mov	w0, 0
 	bl	FlashDdrParaScan
-.L802:
+.L813:
 	bl	FlashSavePhyInfo
-.L793:
+.L804:
 	add	x21, x19, :lo12:.LANCHOR0
 	add	x22, x20, :lo12:.LANCHOR2
 	ldr	x2, [x21,1912]
@@ -5444,7 +5525,7 @@ FlashInit:
 	bl	FlashDieInfoInit
 	ldr	x0, [x21,1912]
 	ldrh	w1, [x0,16]
-	tbz	x1, 6, .L804
+	tbz	x1, 6, .L815
 	adrp	x1, g_retryMode
 	adrp	x3, g_maxRegNum
 	ldrb	w0, [x0,19]
@@ -5459,64 +5540,64 @@ FlashInit:
 	uxtb	w2, w2
 	cmp	w2, 6
 	mov	x2, x1
-	bhi	.L805
+	bhi	.L816
 	adrp	x1, HynixReadRetrial
 	add	x1, x1, :lo12:HynixReadRetrial
 	str	x1, [x22,664]
 	sub	w1, w0, #5
 	uxtb	w1, w1
 	cmp	w1, 1
-	bhi	.L806
+	bhi	.L817
 	mov	w1, 1
 	str	w1, [x22,640]
-	b	.L807
-.L806:
+	b	.L818
+.L817:
 	cmp	w0, 7
 	add	x21, x21, 4084
-	beq	.L808
-.L807:
+	beq	.L819
+.L818:
 	add	x21, x19, :lo12:.LANCHOR0
 	add	x21, x21, 4076
-.L808:
+.L819:
 	mov	x1, 0
 	mov	w2, w1
-.L810:
+.L821:
 	ldrsb	w3, [x21,x1]
 	add	x1, x1, 1
 	cmp	w3, wzr
 	csinc	w2, w2, w2, ne
 	cmp	x1, 32
-	bne	.L810
+	bne	.L821
 	cmp	w2, 27
-	bls	.L804
+	bls	.L815
 	bl	FlashGetReadRetryDefault
 	bl	FlashSavePhyInfo
-	b	.L804
-.L805:
+	b	.L815
+.L816:
 	sub	w3, w0, #17
 	uxtb	w3, w3
 	cmp	w3, 2
-	bhi	.L812
+	bhi	.L823
 	adrp	x2, MicronReadRetrial
 	cmp	w0, 19
 	add	x2, x2, :lo12:MicronReadRetrial
 	str	x2, [x22,664]
-	beq	.L813
+	beq	.L824
 	mov	w0, 7
-	b	.L863
-.L813:
+	b	.L874
+.L824:
 	mov	w0, 15
-.L863:
+.L874:
 	strb	w0, [x1,#:lo12:g_maxRetryCount]
-	b	.L804
-.L812:
+	b	.L815
+.L823:
 	sub	w1, w0, #65
 	uxtb	w1, w1
 	cmp	w1, 1
-	bls	.L831
+	bls	.L842
 	cmp	w0, 33
-	bne	.L814
-.L831:
+	bne	.L825
+.L842:
 	add	x0, x20, :lo12:.LANCHOR2
 	adrp	x1, ToshibaReadRetrial
 	add	x1, x1, :lo12:ToshibaReadRetrial
@@ -5525,8 +5606,8 @@ FlashInit:
 	strb	w0, [x5,#:lo12:g_maxRegNum]
 	mov	w0, 7
 	strb	w0, [x2,#:lo12:g_maxRetryCount]
-	b	.L804
-.L814:
+	b	.L815
+.L825:
 	sub	w1, w0, #67
 	uxtb	w1, w1
 	cmp	w1, 1
@@ -5534,84 +5615,84 @@ FlashInit:
 	cset	w4, ls
 	uxtb	w1, w1
 	cmp	w1, 1
-	bls	.L832
-	cbz	w4, .L816
-.L832:
+	bls	.L843
+	cbz	w4, .L827
+.L843:
 	add	x1, x20, :lo12:.LANCHOR2
 	adrp	x3, ToshibaReadRetrial
 	add	x3, x3, :lo12:ToshibaReadRetrial
 	cmp	w0, 35
 	str	x3, [x1,664]
-	beq	.L818
+	beq	.L829
 	cmp	w0, 68
-	beq	.L818
+	beq	.L829
 	mov	w0, 7
-	b	.L862
-.L818:
+	b	.L873
+.L829:
 	mov	w0, 17
-.L862:
+.L873:
 	strb	w0, [x2,#:lo12:g_maxRetryCount]
 	mov	w0, 4
-	cbnz	w4, .L864
+	cbnz	w4, .L875
 	mov	w0, 5
-.L864:
+.L875:
 	strb	w0, [x5,#:lo12:g_maxRegNum]
-	b	.L804
-.L816:
+	b	.L815
+.L827:
 	cmp	w0, 49
-	bne	.L804
+	bne	.L815
 	adrp	x0, SamsungReadRetrial
 	add	x0, x0, :lo12:SamsungReadRetrial
 	str	x0, [x22,664]
-.L804:
+.L815:
 	add	x0, x20, :lo12:.LANCHOR2
-	ldr	w1, [x0,576]
+	ldr	w1, [x0,568]
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w1, w0
-	bne	.L821
+	bne	.L832
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w2, [x0,136]
-	cbz	w2, .L821
+	cbz	w2, .L832
 	ldr	x0, [x0,1912]
 	strb	wzr, [x0,18]
-.L821:
+.L832:
 	ldrb	w0, [x23,#:lo12:IDByte]
 	cmp	w0, 44
-	bne	.L822
+	bne	.L833
 	add	x0, x20, :lo12:.LANCHOR2
-	ldrb	w0, [x0,565]
-	cbz	w0, .L822
+	ldrb	w0, [x0,572]
+	cbz	w0, .L833
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w1, w0
-	bne	.L823
+	bne	.L834
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbnz	w0, .L822
-.L823:
+	cbnz	w0, .L833
+.L834:
 	add	x0, x20, :lo12:.LANCHOR2
-	strb	wzr, [x0,565]
+	strb	wzr, [x0,572]
 	mov	w0, 1
 	bl	FlashSetInterfaceMode
 	mov	w0, 1
 	bl	NandcSetMode
-.L822:
+.L833:
 	mov	w0, 0
 	bl	flash_enter_slc_mode
 	add	x1, x20, :lo12:.LANCHOR2
 	ldrb	w0, [x1,564]
 	tst	w0, 6
-	beq	.L824
-	ldrb	w1, [x1,565]
-	cbnz	w1, .L825
-	tbnz	x0, 0, .L824
-.L825:
+	beq	.L835
+	ldrb	w1, [x1,572]
+	cbnz	w1, .L836
+	tbnz	x0, 0, .L835
+.L836:
 	add	x20, x20, :lo12:.LANCHOR2
 	mov	w0, 0
 	ldr	w1, [x20,680]
 	bl	FlashDdrParaScan
-.L824:
+.L835:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	mov	w20, 16
@@ -5658,7 +5739,7 @@ FlashInit:
 	ldrb	w5, [x19,24]
 	strh	w2, [x19,4038]
 	cmp	w5, 1
-	bne	.L827
+	bne	.L838
 	lsl	w2, w2, 1
 	lsr	w4, w4, 1
 	lsl	w3, w3, 1
@@ -5668,15 +5749,15 @@ FlashInit:
 	strh	w4, [x19,4030]
 	strh	w3, [x19,4036]
 	strh	w2, [x19,4042]
-.L827:
+.L838:
 	ldrb	w0, [x1,20]
 	bl	FlashBchSel
 	bl	ftl_flash_suspend
 	mov	w0, 0
-	b	.L783
-.L829:
+	b	.L794
+.L840:
 	mov	w0, -2
-.L783:
+.L794:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -5702,38 +5783,38 @@ FlashPageProgMsbFFData:
 	ldr	x2, [x0,1912]
 	ldrb	w0, [x0,136]
 	ldrb	w3, [x2,19]
-	cbz	w0, .L866
-	adrp	x0, .LANCHOR2+576
-	ldr	w2, [x0,#:lo12:.LANCHOR2+576]
+	cbz	w0, .L877
+	adrp	x0, .LANCHOR2+568
+	ldr	w2, [x0,#:lo12:.LANCHOR2+568]
 	mov	w0, 12336
 	movk	w0, 0x5638, lsl 16
 	cmp	w2, w0
-	beq	.L865
-.L866:
+	beq	.L876
+.L877:
 	sub	w0, w3, #5
 	uxtb	w0, w0
 	cmp	w0, 2
-	bls	.L867
+	bls	.L878
 	cmp	w3, 68
-	beq	.L867
+	beq	.L878
 	sub	w3, w3, #19
 	and	w3, w3, -17
 	uxtb	w3, w3
-	cbnz	w3, .L865
-.L867:
+	cbnz	w3, .L876
+.L878:
 	add	x20, x20, :lo12:.LANCHOR0
 	mov	w21, w1
 	add	x24, x20, 652
 	mov	w25, 65535
 	adrp	x26, .LANCHOR2
-.L869:
+.L880:
 	ldr	x0, [x20,1912]
 	ldrh	w0, [x0,10]
 	cmp	w0, w19
-	bls	.L865
+	bls	.L876
 	ldrh	w0, [x24,w19,sxtw 1]
 	cmp	w0, w25
-	bne	.L865
+	bne	.L876
 	add	x23, x26, :lo12:.LANCHOR2
 	mov	w1, 255
 	mov	w2, 32768
@@ -5746,8 +5827,8 @@ FlashPageProgMsbFFData:
 	add	w19, w19, 1
 	bl	FlashProgPage
 	uxth	w19, w19
-	b	.L869
-.L865:
+	b	.L880
+.L876:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -5778,9 +5859,9 @@ FlashReadSlc2KPages:
 	add	x21, x21, :lo12:.LANCHOR0
 	add	x23, x23, :lo12:.LC15
 	add	x24, x24, :lo12:.LC17
-.L875:
+.L886:
 	cmp	w22, w25
-	beq	.L909
+	beq	.L920
 	mov	w1, w27
 	sub	w4, w25, w22
 	mov	x0, x19
@@ -5791,11 +5872,11 @@ FlashReadSlc2KPages:
 	adrp	x5, .LANCHOR0
 	ldrb	w1, [x21,1676]
 	cmp	w0, w1
-	bcc	.L876
+	bcc	.L887
 	mov	w0, -1
 	str	w0, [x19]
-	b	.L877
-.L876:
+	b	.L888
+.L887:
 	add	x0, x21, x0, uxtw
 	ldrb	w28, [x0,1680]
 	str	x5, [x29,96]
@@ -5844,58 +5925,58 @@ FlashReadSlc2KPages:
 	ldrb	w0, [x0,4044]
 	add	w0, w0, w0, lsl 1
 	cmp	w3, w0, lsr 2
-	bls	.L880
+	bls	.L891
 	cmn	w3, #1
 	mov	w0, 256
 	csel	w3, w3, w0, eq
-.L880:
+.L891:
 	cmp	w3, 256
-	beq	.L891
+	beq	.L902
 	cmn	w3, #1
-	bne	.L881
-.L891:
+	bne	.L892
+.L902:
 	str	w3, [x19]
-	b	.L883
-.L881:
+	b	.L894
+.L892:
 	str	wzr, [x19]
-.L883:
+.L894:
 	ldr	x0, [x19,16]
-	cbz	x0, .L884
+	cbz	x0, .L895
 	ldr	w1, [x0,8]
 	cmn	w1, #1
-	bne	.L884
+	bne	.L895
 	ldr	w0, [x0]
 	cmn	w0, #1
-	beq	.L884
+	beq	.L895
 	str	w1, [x19]
-.L884:
+.L895:
 	ldr	w3, [x19]
 	cmn	w3, #1
-	bne	.L877
+	bne	.L888
 	add	x5, x5, :lo12:.LANCHOR0
 	ldr	w1, [x19,4]
 	mov	x0, x23
 	ldrb	w2, [x5,4044]
 	bl	printk
 	ldr	x1, [x19,8]
-	cbz	x1, .L886
+	cbz	x1, .L897
 	adrp	x0, .LC16
 	mov	w2, 4
 	add	x0, x0, :lo12:.LC16
 	mov	w3, 8
 	bl	rknand_print_hex
-.L886:
+.L897:
 	ldr	x1, [x19,16]
-	cbz	x1, .L877
+	cbz	x1, .L888
 	mov	w2, 4
 	mov	x0, x24
 	mov	w3, w2
 	bl	rknand_print_hex
-.L877:
+.L888:
 	add	w22, w22, 1
 	add	x19, x19, 56
-	b	.L875
-.L909:
+	b	.L886
+.L920:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -5927,10 +6008,10 @@ FlashReadPages:
 	ldrb	w23, [x3,24]
 	str	w2, [x29,140]
 	str	w4, [x29,136]
-	cbz	w23, .L950
+	cbz	w23, .L961
 	bl	FlashReadSlc2KPages
-	b	.L999
-.L950:
+	b	.L1010
+.L961:
 	adrp	x0, .LC15
 	mov	w25, w23
 	add	x0, x0, :lo12:.LC15
@@ -5941,10 +6022,10 @@ FlashReadPages:
 	adrp	x0, .LC18
 	add	x0, x0, :lo12:.LC18
 	str	x0, [x29,112]
-.L911:
+.L922:
 	ldr	w0, [x29,144]
 	cmp	w25, w0
-	bcs	.L1001
+	bcs	.L1012
 	mov	w27, 56
 	ldr	w0, [x29,144]
 	ldr	w1, [x29,140]
@@ -5961,11 +6042,11 @@ FlashReadPages:
 	ldr	w0, [x29,168]
 	ldrb	w2, [x1,1676]
 	cmp	w0, w2
-	bcc	.L913
+	bcc	.L924
 	mov	w0, -1
 	str	w0, [x26,x27]
-	b	.L914
-.L913:
+	b	.L925
+.L924:
 	add	x0, x1, x0, uxtw
 	adrp	x24, .LANCHOR2
 	ldrb	w19, [x0,1680]
@@ -5982,26 +6063,26 @@ FlashReadPages:
 	sub	w0, w2, #1
 	uxtb	w0, w0
 	cmp	w0, 6
-	bhi	.L916
+	bhi	.L927
 	add	x1, x1, 4056
 	sxtw	x0, w19
 	add	x1, x1, x0
 	cmp	w2, 7
 	ldrb	w3, [x1,12]
-	bne	.L917
+	bne	.L928
 	ldrb	w3, [x1,20]
-.L917:
+.L928:
 	add	x1, x24, :lo12:.LANCHOR2
 	add	x0, x1, x0
 	ldrb	w0, [x0,560]
 	cmp	w0, w3
-	beq	.L916
+	beq	.L927
 	add	x2, x22, :lo12:.LANCHOR0
 	mov	w0, w19
 	add	x2, x2, 4060
 	ldrb	w1, [x2,-3]
 	bl	HynixSetRRPara
-.L916:
+.L927:
 	mov	w0, w19
 	bl	NandcFlashCs
 	ldr	w0, [x29,140]
@@ -6009,38 +6090,38 @@ FlashReadPages:
 	cset	w0, eq
 	orr	w0, w0, w28, lsr 31
 	str	w0, [x29,152]
-	cbz	w0, .L918
+	cbz	w0, .L929
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L918
+	cbz	w0, .L929
 	mov	w0, w19
 	bl	flash_enter_slc_mode
-	b	.L919
-.L918:
+	b	.L930
+.L929:
 	mov	w0, w19
 	bl	flash_exit_slc_mode
-.L919:
+.L930:
 	cmp	w19, 255
 	ldr	w1, [x29,172]
-	bne	.L957
+	bne	.L968
 	cmn	w1, #1
 	cset	w0, ne
-	cbz	w0, .L951
-.L957:
-	cbz	w20, .L923
+	cbz	w0, .L962
+.L968:
+	cbz	w20, .L934
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w2, [x0,28]
 	mov	w0, w19
 	add	w2, w1, w2
 	bl	FlashReadDpCmd
-	b	.L924
-.L923:
+	b	.L935
+.L934:
 	mov	w0, w19
 	bl	FlashReadCmd
-	b	.L924
-.L951:
+	b	.L935
+.L962:
 	mov	w20, w0
-.L921:
+.L932:
 	ldrb	w2, [x29,148]
 	mov	w0, w19
 	ldr	x3, [x21,8]
@@ -6049,15 +6130,15 @@ FlashReadPages:
 	bl	NandcXferData
 	cmn	w0, #1
 	mov	w28, w0
-	bne	.L925
+	bne	.L936
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w1, [x0,32]
-	cbz	w1, .L925
+	cbz	w1, .L936
 	strb	wzr, [x0,32]
 	mov	w20, 0
-	b	.L919
-.L925:
-	cbz	w20, .L926
+	b	.L930
+.L936:
+	cbz	w20, .L937
 	add	x0, x22, :lo12:.LANCHOR0
 	ldr	w1, [x29,172]
 	ldr	w2, [x0,28]
@@ -6077,23 +6158,23 @@ FlashReadPages:
 	cmn	w0, #1
 	mov	w23, w0
 	csel	w20, w20, wzr, ne
-.L926:
+.L937:
 	mov	w0, w19
 	bl	NandcFlashDeCs
 	add	x6, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x29,136]
 	cmn	w28, #1
 	strb	w0, [x6,32]
-	bne	.L933
+	bne	.L944
 	add	x0, x24, :lo12:.LANCHOR2
-	ldrb	w0, [x0,565]
-	cbnz	w0, .L928
-.L932:
+	ldrb	w0, [x0,572]
+	cbnz	w0, .L939
+.L943:
 	add	x0, x24, :lo12:.LANCHOR2
 	ldr	x20, [x0,664]
-	cbnz	x20, .L929
-	b	.L1002
-.L928:
+	cbnz	x20, .L940
+	b	.L1013
+.L939:
 	ldr	x0, [x6,3976]
 	mov	w4, 1
 	ldr	w1, [x29,172]
@@ -6105,18 +6186,18 @@ FlashReadPages:
 	bl	FlashDdrTunningRead
 	cmn	w0, #1
 	mov	w28, w0
-	beq	.L931
+	beq	.L942
 	ldr	x6, [x29,104]
 	ldrb	w0, [x6,4044]
 	cmp	w28, w0, lsr 1
-	bls	.L953
-.L931:
+	bls	.L964
+.L942:
 	lsr	w0, w20, 8
 	bl	NandcSetDdrPara
 	cmn	w28, #1
-	beq	.L932
-	b	.L953
-.L929:
+	beq	.L943
+	b	.L964
+.L940:
 	ldr	w1, [x29,172]
 	mov	w0, w19
 	ldr	x2, [x21,8]
@@ -6125,20 +6206,20 @@ FlashReadPages:
 	cmn	w0, #1
 	mov	w28, w0
 	mov	w20, 0
-	bne	.L934
+	bne	.L945
 	add	x2, x22, :lo12:.LANCHOR0
 	ldr	x0, [x2,1912]
 	ldrb	w0, [x0,19]
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 6
-	bhi	.L935
+	bhi	.L946
 	ldrb	w1, [x2,4057]
 	mov	w0, w19
 	add	x2, x2, 4060
 	mov	w3, w20
 	bl	HynixSetRRPara
-.L935:
+.L946:
 	ldr	w1, [x29,172]
 	mov	w0, w19
 	ldr	x2, [x21,8]
@@ -6155,18 +6236,18 @@ FlashReadPages:
 	bl	printk
 	cmn	w28, #1
 	ldr	x4, [x29,104]
-	bne	.L934
+	bne	.L945
 	ldrb	w0, [x4,136]
-	cbz	w0, .L934
+	cbz	w0, .L945
 	ldr	w0, [x29,152]
-	cbz	w0, .L936
+	cbz	w0, .L947
 	mov	w0, w19
 	bl	flash_enter_slc_mode
-	b	.L937
-.L936:
+	b	.L948
+.L947:
 	mov	w0, w19
 	bl	flash_exit_slc_mode
-.L937:
+.L948:
 	add	x0, x24, :lo12:.LANCHOR2
 	ldr	w1, [x29,172]
 	ldr	x2, [x21,8]
@@ -6176,102 +6257,102 @@ FlashReadPages:
 	mov	w0, w19
 	blr	x4
 	mov	w28, w0
-	b	.L934
-.L1002:
+	b	.L945
+.L1013:
 	ldr	w1, [x29,172]
 	mov	w0, w19
 	ldr	x2, [x21,8]
 	ldr	x3, [x21,16]
 	bl	FlashReadRawPage
 	mov	w28, w0
-	b	.L934
-.L953:
+	b	.L945
+.L964:
 	mov	w20, 0
-.L933:
+.L944:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bls	.L934
+	bls	.L945
 	add	x0, x24, :lo12:.LANCHOR2
 	ldr	x0, [x0,664]
 	cmp	x0, xzr
 	mov	w0, 256
 	csel	w28, w28, w0, ne
-.L934:
+.L945:
 	cmp	w28, 256
-	beq	.L958
+	beq	.L969
 	cmn	w28, #1
-	bne	.L938
-.L958:
+	bne	.L949
+.L969:
 	str	w28, [x26,x27]
-	b	.L940
-.L938:
+	b	.L951
+.L949:
 	str	wzr, [x26,x27]
-.L940:
+.L951:
 	ldr	w3, [x26,x27]
 	cmn	w3, #1
-	bne	.L942
+	bne	.L953
 	add	x2, x22, :lo12:.LANCHOR0
 	ldr	w1, [x21,4]
 	ldr	x0, [x29,128]
 	ldrb	w2, [x2,4044]
 	bl	printk
 	ldr	x1, [x21,16]
-	cbz	x1, .L942
+	cbz	x1, .L953
 	mov	w2, 4
 	ldr	x0, [x29,120]
 	mov	w3, w2
 	bl	rknand_print_hex
-.L942:
-	cbz	w20, .L944
+.L953:
+	cbz	w20, .L955
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,4044]
 	add	w0, w0, w0, lsl 1
 	cmp	w23, w0, lsr 2
-	bls	.L945
+	bls	.L956
 	add	x24, x24, :lo12:.LANCHOR2
 	ldr	x0, [x24,664]
 	cmp	x0, xzr
 	mov	w0, 256
 	csel	w23, w23, w0, ne
-.L945:
+.L956:
 	add	w0, w25, 1
 	mov	w1, 56
 	cmp	w23, 256
 	umull	x0, w0, w1
-	beq	.L959
+	beq	.L970
 	cmn	w23, #1
-	bne	.L946
-.L959:
+	bne	.L957
+.L970:
 	str	w23, [x26,x0]
-	b	.L944
-.L946:
+	b	.L955
+.L957:
 	str	wzr, [x26,x0]
-.L944:
+.L955:
 	ldr	w0, [x29,152]
 	add	w25, w25, w20
-	cbz	w0, .L914
+	cbz	w0, .L925
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L914
+	cbz	w0, .L925
 	mov	w0, w19
 	bl	flash_exit_slc_mode
-.L914:
+.L925:
 	add	w25, w25, 1
-	b	.L911
-.L1001:
+	b	.L922
+.L1012:
 	mov	w0, 0
-	b	.L999
-.L924:
+	b	.L1010
+.L935:
 	mov	w0, w19
 	bl	NandcWaitFlashReady
-	cbz	w20, .L921
+	cbz	w20, .L932
 	ldr	w1, [x29,172]
 	mov	w0, w19
 	bl	FlashReadDpDataOutCmd
-	b	.L921
-.L999:
+	b	.L932
+.L1010:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -6315,18 +6396,18 @@ FlashLoadFactorBbt:
 	str	xzr, [x29,144]
 	uxth	w25, w25
 	str	w0, [x29,124]
-.L1004:
+.L1015:
 	add	x1, x22, :lo12:.LANCHOR0
 	ldrb	w1, [x1,1676]
 	cmp	w1, w19
-	bls	.L1014
+	bls	.L1025
 	mul	w3, w19, w21
 	mov	w20, w25
 	mov	w4, 61664
-.L1005:
+.L1016:
 	ldr	w0, [x29,124]
 	cmp	w20, w0
-	ble	.L1007
+	ble	.L1018
 	add	w1, w3, w20
 	add	x0, x29, 136
 	lsl	w1, w1, 10
@@ -6340,12 +6421,12 @@ FlashLoadFactorBbt:
 	ldr	x3, [x29,112]
 	cmn	w0, #1
 	ldr	x4, [x29,104]
-	beq	.L1006
+	beq	.L1017
 	add	x24, x23, :lo12:.LANCHOR2
 	ldr	x0, [x24,696]
 	ldrh	w0, [x0]
 	cmp	w0, w4
-	bne	.L1006
+	bne	.L1017
 	add	x24, x24, 728
 	mov	x0, x26
 	mov	w1, w19
@@ -6354,20 +6435,20 @@ FlashLoadFactorBbt:
 	bl	printk
 	strh	w20, [x24,w19,sxtw 1]
 	uxth	w28, w28
-	b	.L1007
-.L1006:
+	b	.L1018
+.L1017:
 	sub	w20, w20, #1
 	uxth	w20, w20
-	b	.L1005
-.L1007:
+	b	.L1016
+.L1018:
 	add	x1, x22, :lo12:.LANCHOR0
 	add	w19, w19, 1
 	uxtb	w19, w19
 	ldrb	w1, [x1,1676]
 	cmp	w1, w28
 	csel	w27, w27, wzr, ne
-	b	.L1004
-.L1014:
+	b	.L1015
+.L1025:
 	mov	w0, w27
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -6408,9 +6489,9 @@ FlashReadFacBbtData:
 	sub	w19, w3, #16
 	mul	w24, w23, w3
 	uxth	w20, w20
-.L1016:
+.L1027:
 	cmp	w20, w19
-	ble	.L1024
+	ble	.L1035
 	add	w0, w20, w24
 	mov	w1, 1
 	lsl	w0, w0, 10
@@ -6420,26 +6501,26 @@ FlashReadFacBbtData:
 	bl	FlashReadPages
 	ldr	w0, [x29,88]
 	cmn	w0, #1
-	beq	.L1017
+	beq	.L1028
 	add	x0, x21, :lo12:.LANCHOR2
 	ldr	x0, [x0,696]
 	ldrh	w0, [x0]
 	cmp	w0, w26
-	bne	.L1017
+	bne	.L1028
 	mov	w0, w22
-	cbz	x22, .L1018
+	cbz	x22, .L1029
 	mov	x0, x22
 	mov	w1, w23
 	mov	w2, w25
 	bl	FlashReadFacBbtData.part.6
-	b	.L1018
-.L1017:
+	b	.L1029
+.L1028:
 	sub	w20, w20, #1
 	uxth	w20, w20
-	b	.L1016
-.L1024:
+	b	.L1027
+.L1035:
 	mov	w0, -1
-.L1018:
+.L1029:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -6469,37 +6550,37 @@ FlashGetBadBlockList:
 	lsr	w2, w2, 3
 	bl	FlashReadFacBbtData
 	cmn	w0, #1
-	bne	.L1026
-.L1030:
+	bne	.L1037
+.L1041:
 	mov	w1, 0
-	b	.L1027
-.L1026:
+	b	.L1038
+.L1037:
 	mov	w2, 0
 	lsr	w0, w19, 4
 	mov	w1, w2
 	sub	w19, w19, #1
 	mov	w5, 1
-.L1028:
+.L1039:
 	cmp	w2, w19
-	bge	.L1027
+	bge	.L1038
 	add	x3, x20, :lo12:.LANCHOR2
 	ubfx	x4, x2, 5, 11
 	ldr	x6, [x3,688]
 	lsl	w3, w5, w2
 	ldr	w4, [x6,x4,lsl 2]
 	tst	w3, w4
-	beq	.L1029
+	beq	.L1040
 	add	w3, w1, 1
 	ubfiz	x1, x1, 1, 16
 	strh	w2, [x21,x1]
 	uxth	w1, w3
-.L1029:
+.L1040:
 	cmp	w1, w0
-	bcs	.L1030
+	bcs	.L1041
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L1028
-.L1027:
+	b	.L1039
+.L1038:
 	ubfiz	x1, x1, 1, 16
 	mov	w0, -1
 	ldp	x19, x20, [sp,16]
@@ -6531,9 +6612,9 @@ FlashProgSlc2KPages:
 	mov	w25, 0
 	add	x22, x22, :lo12:.LANCHOR0
 	mov	w28, -1
-.L1036:
+.L1047:
 	cmp	w25, w23
-	beq	.L1065
+	beq	.L1076
 	mov	w1, w24
 	sub	w4, w23, w25
 	mov	x0, x21
@@ -6543,10 +6624,10 @@ FlashProgSlc2KPages:
 	ldr	w0, [x29,100]
 	ldrb	w1, [x22,1676]
 	cmp	w0, w1
-	bcc	.L1037
+	bcc	.L1048
 	str	w28, [x21]
-	b	.L1038
-.L1037:
+	b	.L1049
+.L1048:
 	add	x0, x22, x0, uxtw
 	ldrb	w20, [x0,1680]
 	mov	w0, w20
@@ -6601,36 +6682,36 @@ FlashProgSlc2KPages:
 	ldr	w1, [x29,96]
 	mov	w0, w20
 	bl	FlashReadStatus
-	tbz	x0, 0, .L1041
+	tbz	x0, 0, .L1052
 	str	w28, [x21]
-.L1041:
+.L1052:
 	mov	w0, w20
 	bl	NandcFlashDeCs
-.L1038:
+.L1049:
 	add	w25, w25, 1
 	add	x21, x21, 56
-	b	.L1036
-.L1065:
+	b	.L1047
+.L1076:
 	mov	w21, 0
-	cbz	w27, .L1063
+	cbz	w27, .L1074
 	adrp	x25, .LC23
 	adrp	x26, .LC22
 	adrp	x27, .LC21
 	add	x25, x25, :lo12:.LC23
 	add	x26, x26, :lo12:.LC22
 	add	x27, x27, :lo12:.LC21
-.L1064:
+.L1075:
 	cmp	w21, w23
-	beq	.L1063
+	beq	.L1074
 	ldr	w0, [x19]
 	cmn	w0, #1
-	bne	.L1044
+	bne	.L1055
 	adrp	x0, .LC20
 	ldr	w1, [x19,4]
 	add	x0, x0, :lo12:.LC20
 	bl	printk
-	b	.L1045
-.L1044:
+	b	.L1056
+.L1055:
 	adrp	x20, .LANCHOR2
 	sub	w4, w23, w21
 	add	x22, x20, :lo12:.LANCHOR2
@@ -6657,44 +6738,44 @@ FlashProgSlc2KPages:
 	bl	FlashReadPages
 	ldr	w22, [x29,104]
 	cmn	w22, #1
-	bne	.L1046
+	bne	.L1057
 	ldr	w1, [x19,4]
 	mov	x0, x27
 	bl	printk
 	str	w22, [x19]
-.L1046:
+.L1057:
 	ldr	x0, [x19,16]
-	cbz	x0, .L1047
+	cbz	x0, .L1058
 	ldr	w2, [x0]
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	x0, [x0,712]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1047
+	beq	.L1058
 	ldr	w1, [x19,4]
 	mov	x0, x26
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1047:
+.L1058:
 	ldr	x0, [x19,8]
-	cbz	x0, .L1045
+	cbz	x0, .L1056
 	add	x20, x20, :lo12:.LANCHOR2
 	ldr	w2, [x0]
 	ldr	x0, [x20,704]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1045
+	beq	.L1056
 	ldr	w1, [x19,4]
 	mov	x0, x25
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1045:
+.L1056:
 	add	w21, w21, 1
 	add	x19, x19, 56
-	b	.L1064
-.L1063:
+	b	.L1075
+.L1074:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -6727,18 +6808,18 @@ FlashProgPages:
 	ldrb	w4, [x4,24]
 	ldrb	w27, [x6,#:lo12:.LANCHOR1+265]
 	ldrb	w5, [x5,19]
-	cbz	w4, .L1067
+	cbz	w4, .L1078
 	bl	FlashProgSlc2KPages
-	b	.L1068
-.L1067:
+	b	.L1079
+.L1078:
 	sub	w0, w5, #1
 	adrp	x28, .LANCHOR2
 	str	w0, [x29,120]
 	add	x0, x28, :lo12:.LANCHOR2
 	str	x0, [x29,112]
-.L1119:
+.L1130:
 	cmp	w22, w25
-	bcs	.L1120
+	bcs	.L1131
 	mov	w20, 56
 	mov	w1, w23
 	add	x2, x29, 128
@@ -6753,11 +6834,11 @@ FlashProgPages:
 	ldr	w0, [x29,132]
 	ldrb	w2, [x1,1676]
 	cmp	w0, w2
-	bcc	.L1069
+	bcc	.L1080
 	mov	w0, -1
 	str	w0, [x19,x20]
-	b	.L1070
-.L1069:
+	b	.L1081
+.L1080:
 	add	x3, x28, :lo12:.LANCHOR2
 	uxtw	x0, w0
 	ldrb	w3, [x3,648]
@@ -6766,15 +6847,15 @@ FlashProgPages:
 	csel	w24, w24, wzr, ne
 	madd	x0, x0, x3, x1
 	ldr	x0, [x0,1728]
-	cbz	x0, .L1072
+	cbz	x0, .L1083
 	cmp	w2, 1
-	bne	.L1073
+	bne	.L1084
 	ldr	x0, [x1,3976]
 	bl	NandcIqrWaitFlashReady
-.L1073:
+.L1084:
 	ldrb	w0, [x29,132]
 	bl	FlashWaitCmdDone
-.L1072:
+.L1083:
 	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29,132]
 	mov	x1, 24
@@ -6784,13 +6865,13 @@ FlashProgPages:
 	str	x26, [x0,8]
 	str	xzr, [x0,16]
 	str	w1, [x0,4]
-	cbz	w24, .L1074
+	cbz	w24, .L1085
 	add	w1, w22, 1
 	mov	w3, 56
 	umull	x1, w1, w3
 	add	x1, x19, x1
 	str	x1, [x0,16]
-.L1074:
+.L1085:
 	add	x1, x21, :lo12:.LANCHOR0
 	add	x0, x1, x2
 	ldrb	w20, [x0,1680]
@@ -6799,11 +6880,11 @@ FlashProgPages:
 	ldrb	w0, [x1,1676]
 	strb	w20, [x2,1720]
 	cmp	w0, 1
-	bne	.L1075
+	bne	.L1086
 	mov	w0, w20
 	bl	NandcWaitFlashReady
-	b	.L1076
-.L1075:
+	b	.L1087
+.L1086:
 	mov	w0, w20
 	str	x1, [x29,104]
 	bl	NandcFlashCs
@@ -6818,35 +6899,35 @@ FlashProgPages:
 	bl	FlashWaitReadyEN
 	mov	w0, w20
 	bl	NandcFlashDeCs
-.L1076:
+.L1087:
 	ldr	w0, [x29,120]
 	cmp	w0, 6
-	bhi	.L1077
+	bhi	.L1088
 	ldr	x0, [x29,112]
 	add	x0, x0, x20, sxtw
 	ldrb	w0, [x0,560]
-	cbz	w0, .L1077
+	cbz	w0, .L1088
 	add	x2, x21, :lo12:.LANCHOR0
 	mov	w0, w20
 	add	x2, x2, 4060
 	mov	w3, 0
 	ldrb	w1, [x2,-3]
 	bl	HynixSetRRPara
-.L1077:
+.L1088:
 	mov	w0, w20
 	bl	NandcFlashCs
 	cmp	w23, 1
-	bne	.L1078
+	bne	.L1089
 	add	x0, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L1078
+	cbz	w0, .L1089
 	mov	w0, w20
 	bl	flash_enter_slc_mode
-	b	.L1079
-.L1078:
+	b	.L1090
+.L1089:
 	mov	w0, w20
 	bl	flash_exit_slc_mode
-.L1079:
+.L1090:
 	ldr	w1, [x29,128]
 	mov	w0, w20
 	bl	FlashProgFirstCmd
@@ -6856,7 +6937,7 @@ FlashProgPages:
 	mov	w1, 1
 	mov	w2, w27
 	bl	NandcXferData
-	cbz	w24, .L1080
+	cbz	w24, .L1091
 	ldr	w1, [x29,128]
 	mov	w0, w20
 	add	x26, x21, :lo12:.LANCHOR0
@@ -6884,45 +6965,45 @@ FlashProgPages:
 	ldr	x3, [x4,8]
 	ldr	x4, [x4,16]
 	bl	NandcXferData
-.L1080:
+.L1091:
 	ldr	w1, [x29,128]
 	mov	w0, w20
 	add	w22, w22, w24
 	bl	FlashProgSecondCmd
 	mov	w0, w20
 	bl	NandcFlashDeCs
-.L1070:
+.L1081:
 	add	w22, w22, 1
-	b	.L1119
-.L1120:
+	b	.L1130
+.L1131:
 	add	x21, x21, :lo12:.LANCHOR0
 	mov	x20, 0
 	mov	x22, 24
 	ldr	x0, [x21,3976]
 	bl	NandcIqrWaitFlashReady
-.L1082:
+.L1093:
 	ldrb	w0, [x21,1676]
 	cmp	w0, w20
-	bls	.L1121
+	bls	.L1132
 	mov	w0, w20
 	bl	FlashWaitCmdDone
 	cmp	w23, 1
-	bne	.L1083
+	bne	.L1094
 	ldrb	w0, [x21,136]
-	cbz	w0, .L1083
+	cbz	w0, .L1094
 	madd	x0, x20, x22, x21
 	ldrb	w0, [x0,1720]
 	bl	flash_exit_slc_mode
-.L1083:
+.L1094:
 	add	x20, x20, 1
-	b	.L1082
-.L1121:
+	b	.L1093
+.L1132:
 	ldr	w0, [x29,124]
-	cbnz	w0, .L1085
-.L1093:
+	cbnz	w0, .L1096
+.L1104:
 	mov	w0, 0
-	b	.L1068
-.L1085:
+	b	.L1079
+.L1096:
 	adrp	x24, .LC23
 	adrp	x26, .LC22
 	adrp	x27, .LC21
@@ -6930,18 +7011,18 @@ FlashProgPages:
 	add	x24, x24, :lo12:.LC23
 	add	x26, x26, :lo12:.LC22
 	add	x27, x27, :lo12:.LC21
-.L1086:
+.L1097:
 	cmp	w21, w25
-	beq	.L1093
+	beq	.L1104
 	ldr	w0, [x19]
 	cmn	w0, #1
-	bne	.L1087
+	bne	.L1098
 	adrp	x0, .LC20
 	ldr	w1, [x19,4]
 	add	x0, x0, :lo12:.LC20
 	bl	printk
-	b	.L1088
-.L1087:
+	b	.L1099
+.L1098:
 	adrp	x20, .LANCHOR2
 	sub	w4, w25, w21
 	add	x22, x20, :lo12:.LANCHOR2
@@ -6968,44 +7049,44 @@ FlashProgPages:
 	bl	FlashReadPages
 	ldr	w22, [x29,136]
 	cmn	w22, #1
-	bne	.L1089
+	bne	.L1100
 	ldr	w1, [x19,4]
 	mov	x0, x27
 	bl	printk
 	str	w22, [x19]
-.L1089:
+.L1100:
 	ldr	x0, [x19,16]
-	cbz	x0, .L1090
+	cbz	x0, .L1101
 	ldr	w2, [x0]
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	x0, [x0,712]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1090
+	beq	.L1101
 	ldr	w1, [x19,4]
 	mov	x0, x26
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1090:
+.L1101:
 	ldr	x0, [x19,8]
-	cbz	x0, .L1088
+	cbz	x0, .L1099
 	add	x20, x20, :lo12:.LANCHOR2
 	ldr	w2, [x0]
 	ldr	x0, [x20,704]
 	ldr	w3, [x0]
 	cmp	w2, w3
-	beq	.L1088
+	beq	.L1099
 	ldr	w1, [x19,4]
 	mov	x0, x24
 	bl	printk
 	mov	w0, -1
 	str	w0, [x19]
-.L1088:
+.L1099:
 	add	w21, w21, 1
 	add	x19, x19, 56
-	b	.L1086
-.L1068:
+	b	.L1097
+.L1079:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -7068,10 +7149,10 @@ FlashTestBlk:
 	ldr	w2, [x0,#:lo12:.LANCHOR0+8]
 	mov	w0, 0
 	cmp	w1, w2
-	bcc	.L1124
+	bcc	.L1135
 	mov	w0, w1
 	bl	FlashTestBlk.part.7
-.L1124:
+.L1135:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	FlashTestBlk, .-FlashTestBlk
@@ -7128,17 +7209,17 @@ FlashMakeFactorBbt:
 	sub	w0, w22, #1
 	uxth	w0, w0
 	str	w0, [x29,132]
-.L1128:
+.L1139:
 	add	x23, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x23,1676]
 	cmp	w0, w20
-	bls	.L1179
+	bls	.L1190
 	ldr	x0, [x29,136]
 	sxtw	x24, w20
 	add	x0, x0, :lo12:.LANCHOR2
 	add	x0, x0, 728
 	ldrh	w21, [x0,w20,sxtw 1]
-	cbnz	w21, .L1158
+	cbnz	w21, .L1169
 	ldrh	w2, [x23,4036]
 	mov	w1, w21
 	ldr	x0, [x19,#:lo12:.LANCHOR0]
@@ -7152,15 +7233,15 @@ FlashMakeFactorBbt:
 	and	w0, w0, 4
 	uxtb	w0, w0
 	str	w0, [x29,128]
-.L1130:
+.L1141:
 	uxth	w28, w26
 	cmp	w28, w22
-	bcs	.L1140
+	bcs	.L1151
 	mov	w0, -1
 	strb	w0, [x29,166]
 	strb	w0, [x29,167]
 	ldr	w0, [x29,124]
-	cbz	w0, .L1132
+	cbz	w0, .L1143
 	add	x4, x19, :lo12:.LANCHOR0
 	add	x2, x29, 166
 	add	x0, x4, 1688
@@ -7175,7 +7256,7 @@ FlashMakeFactorBbt:
 	ldr	x3, [x29,112]
 	ldrb	w0, [x4,24]
 	cmp	w0, 1
-	bne	.L1132
+	bne	.L1143
 	ldr	w1, [x4,28]
 	mov	w0, w27
 	add	x2, x29, 167
@@ -7185,9 +7266,9 @@ FlashMakeFactorBbt:
 	ldrb	w1, [x29,167]
 	and	w0, w1, w0
 	strb	w0, [x29,166]
-.L1132:
+.L1143:
 	ldr	w0, [x29,120]
-	cbz	w0, .L1134
+	cbz	w0, .L1145
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x2, x29, 167
 	add	x0, x0, 1688
@@ -7199,40 +7280,40 @@ FlashMakeFactorBbt:
 	mov	w0, w27
 	add	w1, w1, w21
 	bl	FlashReadSpare
-.L1134:
+.L1145:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x29,166]
 	ldr	x0, [x0,1912]
 	ldrb	w0, [x0,7]
 	cmp	w0, 8
-	beq	.L1159
+	beq	.L1170
 	cmp	w0, 1
-	bne	.L1135
-.L1159:
+	bne	.L1146
+.L1170:
 	mov	w0, 1
-	cbz	w1, .L1137
+	cbz	w1, .L1148
 	ldrb	w0, [x29,167]
 	cmp	w0, wzr
 	cset	w0, eq
-	b	.L1137
-.L1135:
+	b	.L1148
+.L1146:
 	cmp	w1, 255
 	mov	w0, 1
-	bne	.L1137
+	bne	.L1148
 	ldrb	w0, [x29,167]
 	cmp	w0, 255
 	cset	w0, ne
-.L1137:
+.L1148:
 	ldr	w1, [x29,128]
-	cbz	w1, .L1138
+	cbz	w1, .L1149
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x0, x0, 1688
 	ldr	w1, [x0,x24,lsl 2]
 	mov	w0, w27
 	add	w1, w21, w1
 	bl	SandiskProgTestBadBlock
-.L1138:
-	cbz	w0, .L1139
+.L1149:
+	cbz	w0, .L1150
 	adrp	x0, .LC25
 	mov	w1, w20
 	mov	w2, w26
@@ -7253,12 +7334,12 @@ FlashMakeFactorBbt:
 	ldrb	w0, [x2,1676]
 	mul	w0, w1, w0
 	cmp	w23, w0
-	bgt	.L1140
-.L1139:
+	bgt	.L1151
+.L1150:
 	add	w26, w26, 1
 	add	w21, w21, w25
-	b	.L1130
-.L1140:
+	b	.L1141
+.L1151:
 	adrp	x0, .LC26
 	mov	w1, w20
 	mov	w2, w23
@@ -7269,28 +7350,28 @@ FlashMakeFactorBbt:
 	ldrb	w0, [x1,1676]
 	mul	w0, w2, w0
 	cmp	w23, w0
-	blt	.L1142
+	blt	.L1153
 	ldrh	w2, [x1,4036]
 	mov	w1, 0
 	ldr	x0, [x19,#:lo12:.LANCHOR0]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1142:
-	cbnz	w20, .L1144
+.L1153:
+	cbnz	w20, .L1155
 	add	x0, x19, :lo12:.LANCHOR0
 	adrp	x26, .LC27
 	mov	w21, w20
 	add	x26, x26, :lo12:.LC27
 	mov	w23, 1
 	ldrh	w27, [x0,8]
-.L1145:
+.L1156:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w0, [x0,25]
 	cmp	w0, w27
-	bls	.L1180
+	bls	.L1191
 	mov	w0, w27
 	bl	FlashTestBlk
-	cbz	w0, .L1146
+	cbz	w0, .L1157
 	mov	w1, w27
 	mov	x0, x26
 	add	w21, w21, 1
@@ -7303,22 +7384,22 @@ FlashMakeFactorBbt:
 	ldr	w3, [x2,x1]
 	orr	w0, w3, w0
 	str	w0, [x2,x1]
-.L1146:
+.L1157:
 	add	w27, w27, 1
 	uxth	w27, w27
-	b	.L1145
-.L1180:
+	b	.L1156
+.L1191:
 	adrp	x26, .LC27
 	ldr	w28, [x29,132]
 	sub	w27, w22, #50
 	add	x26, x26, :lo12:.LC27
 	mov	w23, 1
-.L1148:
+.L1159:
 	cmp	w28, w27
-	ble	.L1181
+	ble	.L1192
 	mov	w0, w28
 	bl	FlashTestBlk
-	cbz	w0, .L1149
+	cbz	w0, .L1160
 	mov	w1, w28
 	mov	x0, x26
 	bl	printk
@@ -7329,23 +7410,23 @@ FlashMakeFactorBbt:
 	ldr	w3, [x2,x1]
 	orr	w0, w3, w0
 	str	w0, [x2,x1]
-.L1149:
+.L1160:
 	sub	w28, w28, #1
 	uxth	w28, w28
-	b	.L1148
-.L1181:
+	b	.L1159
+.L1192:
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x0,25]
 	ldr	w2, [x0,8]
 	sub	w1, w1, w2
 	cmp	w21, w1
-	bcc	.L1144
+	bcc	.L1155
 	ldrh	w2, [x0,4036]
 	mov	w1, 0
 	ldr	x0, [x19,#:lo12:.LANCHOR0]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1144:
+.L1155:
 	ldr	x0, [x29,136]
 	adrp	x23, .LC28
 	ldr	w27, [x29,132]
@@ -7353,22 +7434,22 @@ FlashMakeFactorBbt:
 	mul	w26, w20, w22
 	add	x28, x0, :lo12:.LANCHOR2
 	mov	w21, -3872
-.L1152:
+.L1163:
 	mov	w2, w27
 	mov	x0, x23
 	mov	w1, w20
 	bl	printk
 	ldr	x2, [x19,#:lo12:.LANCHOR0]
-.L1153:
+.L1164:
 	ubfx	x0, x27, 5, 11
 	ldr	w0, [x2,x0,lsl 2]
 	lsr	w0, w0, w27
 	and	w1, w0, 1
-	tbz	x0, 0, .L1182
+	tbz	x0, 0, .L1193
 	sub	w27, w27, #1
 	uxth	w27, w27
-	b	.L1153
-.L1182:
+	b	.L1164
+.L1193:
 	add	x0, x28, 728
 	strh	w27, [x0,x24,lsl 1]
 	ldr	x0, [x29,152]
@@ -7392,15 +7473,15 @@ FlashMakeFactorBbt:
 	mov	w3, w1
 	bl	FlashProgPages
 	ldr	w0, [x29,168]
-	cbz	w0, .L1158
+	cbz	w0, .L1169
 	sub	w27, w27, #1
 	uxth	w27, w27
-	b	.L1152
-.L1158:
+	b	.L1163
+.L1169:
 	add	w20, w20, 1
 	uxtb	w20, w20
-	b	.L1128
-.L1179:
+	b	.L1139
+.L1190:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -7415,14 +7496,14 @@ FlashMakeFactorBbt:
 Ftl_log2:
 	mov	w2, 1
 	mov	w1, 0
-.L1184:
+.L1195:
 	cmp	w2, w0
-	bhi	.L1186
+	bhi	.L1197
 	add	w1, w1, 1
 	lsl	w2, w2, 1
 	uxth	w1, w1
-	b	.L1184
-.L1186:
+	b	.L1195
+.L1197:
 	sub	w0, w1, #1
 	ret
 	.size	Ftl_log2, .-Ftl_log2
@@ -7478,30 +7559,30 @@ FtlConstantsInit:
 	strh	w2, [x0,770]
 	strh	w1, [x0,772]
 	strh	w4, [x0,758]
-.L1191:
+.L1202:
 	add	x5, x0, 776
 	strb	w3, [x3,x5]
 	add	x3, x3, 1
 	cmp	x3, 32
-	bne	.L1191
+	bne	.L1202
 	ldrh	w3, [x24,20]
 	ldrb	w0, [x24,15]
 	cmp	w3, w0
-	bcs	.L1192
+	bcs	.L1203
 	uxtb	w8, w1
 	mov	w3, 0
 	mul	w11, w1, w2
 	ubfiz	w10, w8, 1, 7
 	add	x12, x19, :lo12:.LANCHOR2
-.L1193:
+.L1204:
 	cmp	w3, w1
-	bcs	.L1195
+	bcs	.L1206
 	uxtb	w0, w3
 	mov	w5, w3
 	mov	w7, 0
-.L1196:
+.L1207:
 	cmp	w7, w2
-	bcs	.L1218
+	bcs	.L1229
 	add	x9, x12, 776
 	add	w13, w5, w11
 	add	w14, w0, w8
@@ -7511,35 +7592,35 @@ FtlConstantsInit:
 	strb	w14, [x9,x13]
 	add	w5, w5, w1
 	uxtb	w0, w0
-	b	.L1196
-.L1218:
+	b	.L1207
+.L1229:
 	add	w3, w3, 1
-	b	.L1193
-.L1195:
+	b	.L1204
+.L1206:
 	add	x0, x19, :lo12:.LANCHOR2
 	lsl	w2, w2, 1
 	lsr	w4, w4, 1
 	strh	w2, [x0,770]
 	strh	w4, [x0,758]
-.L1192:
+.L1203:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 5
 	cmp	w6, 1
 	strh	w2, [x0,808]
 	strh	wzr, [x0,810]
-	bne	.L1197
+	bne	.L1208
 	strh	w6, [x0,808]
-.L1197:
+.L1208:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 4352
 	adrp	x22, .LANCHOR0
 	strh	w2, [x0,812]
 	add	x2, x22, :lo12:.LANCHOR0
 	ldrb	w27, [x2,24]
-	cbz	w27, .L1198
+	cbz	w27, .L1209
 	mov	w2, 384
 	strh	w2, [x0,812]
-.L1198:
+.L1209:
 	add	x21, x19, :lo12:.LANCHOR2
 	ldrh	w20, [x21,758]
 	ldrh	w23, [x21,770]
@@ -7573,10 +7654,10 @@ FtlConstantsInit:
 	mul	w0, w23, w20
 	strh	w2, [x21,830]
 	str	w0, [x21,764]
-	bls	.L1199
+	bls	.L1210
 	and	w0, w20, 255
 	strh	w0, [x21,810]
-.L1199:
+.L1210:
 	add	x2, x19, :lo12:.LANCHOR2
 	mul	w0, w25, w28
 	ldrh	w1, [x2,810]
@@ -7591,15 +7672,15 @@ FtlConstantsInit:
 	sdiv	w0, w1, w0
 	uxth	w0, w0
 	cmp	w0, 4
-	bhi	.L1215
+	bhi	.L1226
 	mov	w0, 4
-.L1215:
+.L1226:
 	strh	w0, [x2,840]
-	cbz	w27, .L1202
+	cbz	w27, .L1213
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 640
 	strh	w1, [x0,812]
-.L1202:
+.L1213:
 	add	x1, x19, :lo12:.LANCHOR2
 	lsl	w20, w20, 6
 	cmp	w23, 1
@@ -7617,9 +7698,9 @@ FtlConstantsInit:
 	ldrh	w0, [x1,840]
 	udiv	w0, w0, w23
 	add	w20, w20, w0
-	bne	.L1216
+	bne	.L1227
 	add	w20, w20, 4
-.L1216:
+.L1227:
 	str	w20, [x1,744]
 	add	x20, x19, :lo12:.LANCHOR2
 	add	x22, x22, :lo12:.LANCHOR0
@@ -7649,18 +7730,18 @@ FtlConstantsInit:
 	ldr	w1, [x20,848]
 	add	w4, w1, 3
 	str	w4, [x20,848]
-	cbz	w5, .L1205
+	cbz	w5, .L1216
 	add	w2, w2, 4
 	add	w1, w1, 5
 	strh	w2, [x20,840]
-	b	.L1217
-.L1205:
+	b	.L1228
+.L1216:
 	cmp	w4, 7
-	bhi	.L1206
+	bhi	.L1217
 	mov	w1, 8
-.L1217:
+.L1228:
 	str	w1, [x20,848]
-.L1206:
+.L1217:
 	add	x19, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x19,756]
 	strh	wzr, [x19,860]
@@ -7669,10 +7750,10 @@ FtlConstantsInit:
 	add	w1, w1, 52
 	add	w0, w1, w0, lsl 2
 	cmp	w0, w3, lsl 9
-	bcs	.L1207
+	bcs	.L1218
 	mov	w0, 1
 	strh	w0, [x19,860]
-.L1207:
+.L1218:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -7734,9 +7815,9 @@ FtlMemInit:
 	strh	wzr, [x0,962]
 	str	w2, [x0,964]
 	cmp	w2, w1
-	bls	.L1220
+	bls	.L1231
 	str	w1, [x0,964]
-.L1220:
+.L1231:
 	add	x19, x20, :lo12:.LANCHOR2
 	mov	w22, 56
 	ldrh	w0, [x19,822]
@@ -7920,106 +8001,106 @@ FtlMemInit:
 	ldrh	w5, [x19,770]
 	mov	w0, 1
 	mov	w2, w4
-.L1221:
+.L1232:
 	cmp	w0, w5
 	add	x1, x1, 8
-	bcs	.L1321
+	bcs	.L1332
 	ldr	x3, [x19,1328]
 	add	w0, w0, 1
 	add	x3, x3, x2, uxtw 2
 	add	w2, w2, w4
 	str	x3, [x1,32]
-	b	.L1221
-.L1321:
+	b	.L1232
+.L1332:
 	add	x1, x20, :lo12:.LANCHOR2
-.L1223:
+.L1234:
 	cmp	w0, 8
-	beq	.L1322
+	beq	.L1333
 	add	x2, x1, x0, uxtw 3
 	add	w0, w0, 1
 	str	xzr, [x2,1328]
-	b	.L1223
-.L1322:
+	b	.L1234
+.L1333:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	x1, [x0,1192]
-	cbnz	x1, .L1225
-.L1227:
+	cbnz	x1, .L1236
+.L1238:
 	adrp	x0, .LC29
 	adrp	x1, .LANCHOR3
 	add	x0, x0, :lo12:.LC29
 	add	x1, x1, :lo12:.LANCHOR3
 	bl	printk
 	mov	w0, -1
-	b	.L1226
-.L1225:
+	b	.L1237
+.L1236:
 	ldr	x1, [x0,1200]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1240]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1256]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1264]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1272]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1280]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1328]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x0, [x0,1184]
-	cbz	x0, .L1227
+	cbz	x0, .L1238
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	x1, [x0,976]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,984]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,992]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1008]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1016]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1024]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1000]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1048]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1056]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x0, [x0,1064]
-	cbz	x0, .L1227
+	cbz	x0, .L1238
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	x1, [x0,1072]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1088]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1096]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1104]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1112]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1120]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1128]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1168]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1152]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x0, [x0,1208]
-	cbz	x0, .L1227
+	cbz	x0, .L1238
 	adrp	x0, .LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR2
 	ldr	x1, [x0,1216]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x1, [x0,1224]
-	cbz	x1, .L1227
+	cbz	x1, .L1238
 	ldr	x0, [x0,1232]
-	cbz	x0, .L1227
+	cbz	x0, .L1238
 	mov	w0, 0
-.L1226:
+.L1237:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -8035,23 +8116,23 @@ IsBlkInVendorPart:
 	add	x1, x1, :lo12:.LANCHOR2
 	mov	w0, 0
 	ldrh	w2, [x1,1392]
-	cbz	w2, .L1324
+	cbz	w2, .L1335
 	ldrh	w2, [x1,840]
 	ldr	x3, [x1,1208]
 	mov	x1, 0
-.L1325:
+.L1336:
 	cmp	w2, w1, uxth
-	bls	.L1330
+	bls	.L1341
 	add	x1, x1, 1
 	add	x0, x3, x1, lsl 1
 	ldrh	w0, [x0,-2]
 	cmp	w0, w4
-	bne	.L1325
+	bne	.L1336
 	mov	w0, 1
-	b	.L1324
-.L1330:
+	b	.L1335
+.L1341:
 	mov	w0, 0
-.L1324:
+.L1335:
 	ret
 	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
 	.align	2
@@ -8063,25 +8144,25 @@ FtlCacheMetchLpa:
 	add	x2, x2, :lo12:.LANCHOR2
 	mov	w0, 0
 	ldr	w3, [x2,968]
-	cbz	w3, .L1332
+	cbz	w3, .L1343
 	ldr	x5, [x2,1032]
 	mov	x0, 56
 	mov	x2, 0
-.L1333:
+.L1344:
 	cmp	w3, w2
-	bls	.L1342
+	bls	.L1353
 	madd	x4, x2, x0, x5
 	add	x2, x2, 1
 	ldr	w4, [x4,24]
 	cmp	w4, w6
-	bcc	.L1333
+	bcc	.L1344
 	cmp	w4, w1
-	bhi	.L1333
+	bhi	.L1344
 	mov	w0, 1
-	b	.L1332
-.L1342:
+	b	.L1343
+.L1353:
 	mov	w0, 0
-.L1332:
+.L1343:
 	ret
 	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
 	.align	2
@@ -8186,10 +8267,10 @@ FtlBbt2Bitmap:
 	mov	x3, 0
 	mov	w0, 65535
 	mov	w5, 1
-.L1351:
+.L1362:
 	ldrh	w2, [x20,x3]
 	cmp	w2, w0
-	beq	.L1349
+	beq	.L1360
 	ubfx	x4, x2, 5, 11
 	add	x3, x3, 2
 	lsl	x4, x4, 2
@@ -8198,8 +8279,8 @@ FtlBbt2Bitmap:
 	ldr	w1, [x19,x4]
 	orr	w2, w1, w2
 	str	w2, [x19,x4]
-	bne	.L1351
-.L1349:
+	bne	.L1362
+.L1360:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -8217,7 +8298,7 @@ FtlBbmTblFlush:
 	stp	x23, x24, [sp,48]
 	ldr	w1, [x19,1400]
 	stp	x25, x26, [sp,64]
-	cbnz	w1, .L1356
+	cbnz	w1, .L1367
 	ldr	x0, [x19,1048]
 	mov	x22, 0
 	ldr	x3, [x19,1112]
@@ -8226,13 +8307,13 @@ FtlBbmTblFlush:
 	str	x0, [x19,1416]
 	str	x3, [x19,1424]
 	bl	ftl_memset
-.L1357:
+.L1368:
 	ldrh	w1, [x19,770]
 	mov	w0, w22
 	add	x20, x19, 1408
 	add	x22, x22, 1
 	cmp	w0, w1
-	bge	.L1365
+	bge	.L1376
 	add	x1, x21, x22, lsl 3
 	ldrh	w2, [x19,1288]
 	ldr	x3, [x20,8]
@@ -8241,8 +8322,8 @@ FtlBbmTblFlush:
 	add	x0, x3, x0, sxtw 2
 	lsl	w2, w2, 2
 	bl	ftl_memcpy
-	b	.L1357
-.L1365:
+	b	.L1368
+.L1376:
 	ldr	x25, [x20,16]
 	mov	w1, 255
 	mov	w2, 16
@@ -8266,7 +8347,7 @@ FtlBbmTblFlush:
 	strh	w0, [x25,10]
 	ldr	w0, [x19,744]
 	strh	w0, [x25,12]
-.L1359:
+.L1370:
 	ldr	x0, [x19,1048]
 	str	x0, [x20,8]
 	ldrh	w1, [x19,1296]
@@ -8289,7 +8370,7 @@ FtlBbmTblFlush:
 	ldrh	w0, [x19,1298]
 	sub	w1, w1, #1
 	cmp	w0, w1
-	blt	.L1360
+	blt	.L1371
 	ldr	w1, [x19,1304]
 	ldrh	w0, [x19,1296]
 	add	w1, w1, 1
@@ -8313,20 +8394,20 @@ FtlBbmTblFlush:
 	mov	w2, w1
 	mov	w3, w1
 	bl	FlashProgPages
-.L1360:
+.L1371:
 	ldrh	w1, [x19,1298]
 	ldr	w0, [x20]
 	add	w1, w1, 1
 	strh	w1, [x19,1298]
 	cmn	w0, #1
-	bne	.L1361
+	bne	.L1372
 	ldr	w1, [x20,4]
 	mov	x0, x24
 	add	w26, w26, 1
 	bl	printk
 	uxth	w26, w26
 	cmp	w26, 3
-	bls	.L1359
+	bls	.L1370
 	adrp	x0, .LC33
 	ldr	w1, [x20,4]
 	add	x0, x0, :lo12:.LC33
@@ -8334,12 +8415,12 @@ FtlBbmTblFlush:
 	bl	printk
 	mov	w0, 1
 	str	w0, [x19,1400]
-	b	.L1356
-.L1361:
-	cbnz	w23, .L1356
+	b	.L1367
+.L1372:
+	cbnz	w23, .L1367
 	mov	w23, 1
-	b	.L1359
-.L1356:
+	b	.L1370
+.L1367:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -8370,19 +8451,19 @@ FtlLoadFactoryBbt:
 	mov	w25, -1
 	str	x24, [x21,16]
 	mov	w26, 61664
-.L1367:
+.L1378:
 	ldrh	w0, [x19,770]
 	cmp	w22, w0
-	bcs	.L1376
+	bcs	.L1387
 	ldrh	w20, [x19,814]
 	strh	w25, [x23,12]
-.L1369:
+.L1380:
 	sub	w20, w20, #1
 	ldrh	w0, [x19,814]
 	uxth	w20, w20
 	sub	w1, w0, #16
 	cmp	w20, w1
-	ble	.L1370
+	ble	.L1381
 	madd	w0, w22, w0, w20
 	mov	w1, 1
 	lsl	w0, w0, 10
@@ -8392,16 +8473,16 @@ FtlLoadFactoryBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L1369
+	beq	.L1380
 	ldrh	w0, [x24]
 	cmp	w0, w26
-	bne	.L1369
+	bne	.L1380
 	strh	w20, [x23,12]
-.L1370:
+.L1381:
 	add	w22, w22, 1
 	add	x23, x23, 2
-	b	.L1367
-.L1376:
+	b	.L1378
+.L1387:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -8443,19 +8524,19 @@ FtlBbtCalcTotleCnt:
 	ldrh	w1, [x0,814]
 	ldrh	w21, [x0,770]
 	mul	w21, w1, w21
-.L1379:
+.L1390:
 	cmp	w20, w21
-	bge	.L1385
+	bge	.L1396
 	mov	w0, w20
 	bl	FtlBbmIsBadBlock
-	cbz	w0, .L1380
+	cbz	w0, .L1391
 	add	w19, w19, 1
 	uxth	w19, w19
-.L1380:
+.L1391:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L1379
-.L1385:
+	b	.L1390
+.L1396:
 	mov	w0, w19
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -8477,7 +8558,7 @@ FtlMakeBbt:
 	stp	x27, x28, [sp,80]
 	mov	x21, x19
 	ldr	w22, [x20,1400]
-	cbnz	w22, .L1387
+	cbnz	w22, .L1398
 	add	x24, x20, 1296
 	mov	x19, x20
 	mov	x25, x24
@@ -8485,10 +8566,10 @@ FtlMakeBbt:
 	mov	w28, -3872
 	bl	FtlBbtMemInit
 	bl	FtlLoadFactoryBbt
-.L1388:
+.L1399:
 	ldrh	w0, [x19,770]
 	cmp	w22, w0
-	bcs	.L1406
+	bcs	.L1417
 	ldrh	w4, [x25,12]
 	mov	w1, 65535
 	ldr	x0, [x19,1048]
@@ -8496,7 +8577,7 @@ FtlMakeBbt:
 	cmp	w4, w1
 	str	x0, [x20,8]
 	str	x26, [x20,16]
-	beq	.L1389
+	beq	.L1400
 	ldrh	w0, [x19,814]
 	mov	w1, 1
 	mov	w2, w1
@@ -8511,23 +8592,23 @@ FtlMakeBbt:
 	ldr	x1, [x20,8]
 	lsr	w2, w2, 3
 	bl	ftl_memcpy
-	b	.L1390
-.L1389:
+	b	.L1401
+.L1400:
 	mov	w1, w22
 	bl	FlashGetBadBlockList
 	ldr	x0, [x20,8]
 	ldr	x1, [x24,32]
 	bl	FtlBbt2Bitmap
 	ldrh	w23, [x19,814]
-.L1392:
+.L1403:
 	sub	w23, w23, #1
 	uxth	w23, w23
-.L1391:
+.L1402:
 	ldrh	w0, [x19,814]
 	madd	w0, w22, w0, w23
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L1392
+	beq	.L1403
 	ldr	x0, [x19,1112]
 	mov	w1, 0
 	mov	w2, 16
@@ -8558,64 +8639,64 @@ FtlMakeBbt:
 	bl	FlashProgPages
 	ldr	w0, [x20]
 	cmn	w0, #1
-	bne	.L1390
+	bne	.L1401
 	mov	w0, w27
 	bl	FtlBbmMapBadBlock
-	b	.L1391
-.L1390:
+	b	.L1402
+.L1401:
 	mov	w0, w27
 	add	w22, w22, 1
 	add	x24, x24, 8
 	add	x25, x25, 2
 	bl	FtlBbmMapBadBlock
-	b	.L1388
-.L1406:
+	b	.L1399
+.L1417:
 	mov	w19, 0
-.L1395:
+.L1406:
 	add	x20, x21, :lo12:.LANCHOR2
 	ldrh	w0, [x20,832]
 	cmp	w0, w19
-	bls	.L1407
+	bls	.L1418
 	mov	w0, w19
 	add	w19, w19, 1
 	bl	FtlBbmMapBadBlock
 	uxth	w19, w19
-	b	.L1395
-.L1407:
+	b	.L1406
+.L1418:
 	ldrh	w19, [x20,1308]
 	mov	w23, 65535
 	sub	w19, w19, #1
 	uxth	w19, w19
-.L1397:
+.L1408:
 	add	x22, x20, 1296
 	ldrh	w0, [x22,12]
 	sub	w0, w0, #48
 	cmp	w19, w0
-	ble	.L1401
+	ble	.L1412
 	mov	w0, w19
 	bl	FtlBbmIsBadBlock
 	cmp	w0, 1
-	beq	.L1398
+	beq	.L1409
 	mov	w0, w19
 	bl	FlashTestBlk
-	cbz	w0, .L1399
+	cbz	w0, .L1410
 	mov	w0, w19
 	bl	FtlBbmMapBadBlock
-	b	.L1398
-.L1399:
+	b	.L1409
+.L1410:
 	ldrh	w0, [x20,1296]
 	cmp	w0, w23
-	bne	.L1400
+	bne	.L1411
 	strh	w19, [x20,1296]
-	b	.L1398
-.L1400:
+	b	.L1409
+.L1411:
 	strh	w19, [x22,4]
-	b	.L1401
-.L1398:
+	b	.L1412
+.L1409:
 	sub	w19, w19, #1
 	uxth	w19, w19
-	b	.L1397
-.L1401:
+	b	.L1408
+.L1412:
 	add	x19, x21, :lo12:.LANCHOR2
 	mov	w2, 2
 	ldr	x1, [x19,1016]
@@ -8644,7 +8725,7 @@ FtlMakeBbt:
 	strh	w0, [x19,1300]
 	strh	w1, [x19,1296]
 	bl	FtlBbmTblFlush
-.L1387:
+.L1398:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -8706,16 +8787,16 @@ P2V_block_in_plane:
 ftl_cmp_data_ver:
 	cmp	w0, w1
 	mov	w2, -2147483648
-	bls	.L1412
+	bls	.L1423
 	sub	w1, w0, w1
 	cmp	w1, w2
 	cset	w0, ls
-	b	.L1413
-.L1412:
+	b	.L1424
+.L1423:
 	sub	w1, w1, w0
 	cmp	w1, w2
 	cset	w0, hi
-.L1413:
+.L1424:
 	ret
 	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
 	.align	2
@@ -8732,12 +8813,12 @@ FtlGetLastWrittenPage:
 	str	x25, [sp,64]
 	mov	w23, w1
 	add	x3, x3, :lo12:.LANCHOR2
-	bne	.L1415
+	bne	.L1426
 	ldrh	w19, [x3,820]
-	b	.L1416
-.L1415:
+	b	.L1427
+.L1426:
 	ldrh	w19, [x3,818]
-.L1416:
+.L1427:
 	sub	w19, w19, #1
 	lsl	w21, w0, 10
 	mov	w1, 1
@@ -8752,12 +8833,12 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x29,144]
 	cmn	w0, #1
-	bne	.L1417
+	bne	.L1428
 	mov	w22, 0
 	mov	w25, 2
-.L1418:
+.L1429:
 	cmp	w22, w19
-	bgt	.L1417
+	bgt	.L1428
 	add	w3, w22, w19
 	mov	w1, 1
 	mov	w2, w23
@@ -8769,21 +8850,21 @@ FtlGetLastWrittenPage:
 	bl	FlashReadPages
 	ldr	w0, [x24]
 	cmn	w0, #1
-	bne	.L1419
+	bne	.L1430
 	ldr	w0, [x24,4]
 	cmn	w0, #1
-	bne	.L1419
+	bne	.L1430
 	ldr	w0, [x29,88]
 	cmn	w0, #1
-	beq	.L1419
+	beq	.L1430
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L1418
-.L1419:
+	b	.L1429
+.L1430:
 	add	w20, w20, 1
 	sxth	w22, w20
-	b	.L1418
-.L1417:
+	b	.L1429
+.L1428:
 	mov	w0, w19
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -8813,11 +8894,11 @@ FtlLoadBbt:
 	ldrh	w20, [x23,814]
 	sub	w20, w20, #1
 	uxth	w20, w20
-.L1426:
+.L1437:
 	ldrh	w0, [x23,814]
 	sub	w0, w0, #48
 	cmp	w20, w0
-	ble	.L1429
+	ble	.L1440
 	lsl	w0, w20, 10
 	mov	w1, 1
 	str	w0, [x21,4]
@@ -8826,7 +8907,7 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	bne	.L1427
+	bne	.L1438
 	ldr	w0, [x21,4]
 	mov	w1, 1
 	mov	w2, w1
@@ -8834,33 +8915,33 @@ FtlLoadBbt:
 	str	w0, [x21,4]
 	mov	x0, x21
 	bl	FlashReadPages
-.L1427:
+.L1438:
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L1428
+	beq	.L1439
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	bne	.L1428
+	bne	.L1439
 	ldr	w1, [x22,4]
 	str	w1, [x23,1304]
 	strh	w20, [x23,1296]
 	ldrh	w1, [x22,8]
 	strh	w1, [x23,1300]
-	b	.L1429
-.L1428:
+	b	.L1440
+.L1439:
 	sub	w20, w20, #1
 	uxth	w20, w20
-	b	.L1426
-.L1429:
+	b	.L1437
+.L1440:
 	add	x21, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
 	mov	w0, -1
 	ldrh	w1, [x21,1296]
 	cmp	w1, w2
-	beq	.L1431
+	beq	.L1442
 	ldrh	w1, [x21,1300]
 	cmp	w1, w2
-	beq	.L1433
+	beq	.L1444
 	add	x0, x21, 1408
 	lsl	w1, w1, 10
 	str	w1, [x0,4]
@@ -8869,21 +8950,21 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x21,1408]
 	cmn	w0, #1
-	beq	.L1433
+	beq	.L1444
 	ldrh	w1, [x22]
 	mov	w0, 61649
 	cmp	w1, w0
-	bne	.L1433
+	bne	.L1444
 	ldr	w0, [x22,4]
 	ldr	w1, [x21,1304]
 	cmp	w0, w1
-	bls	.L1433
+	bls	.L1444
 	str	w0, [x21,1304]
 	ldrh	w1, [x21,1300]
 	ldrh	w0, [x22,8]
 	strh	w1, [x21,1296]
 	strh	w0, [x21,1300]
-.L1433:
+.L1444:
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w1, 1
 	add	x23, x20, 1408
@@ -8893,8 +8974,8 @@ FtlLoadBbt:
 	sxth	w21, w0
 	add	w0, w0, 1
 	strh	w0, [x20,1298]
-.L1435:
-	tbnz	w21, #31, .L1440
+.L1446:
+	tbnz	w21, #31, .L1451
 	ldrh	w0, [x20,1296]
 	mov	w1, 1
 	mov	w2, w1
@@ -8906,44 +8987,44 @@ FtlLoadBbt:
 	bl	FlashReadPages
 	ldr	w0, [x23]
 	cmn	w0, #1
-	beq	.L1436
+	beq	.L1447
 	ldrh	w0, [x22]
 	cmp	w0, w24
-	bne	.L1436
-.L1440:
+	bne	.L1447
+.L1451:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x22,10]
 	mov	w2, 65535
 	strh	w0, [x1,1302]
 	ldrh	w0, [x22,12]
 	cmp	w0, w2
-	bne	.L1437
-	b	.L1438
-.L1436:
+	bne	.L1448
+	b	.L1449
+.L1447:
 	sub	w21, w21, #1
 	sxth	w21, w21
-	b	.L1435
-.L1437:
+	b	.L1446
+.L1448:
 	ldr	w2, [x1,744]
 	cmp	w0, w2
-	beq	.L1438
+	beq	.L1449
 	ldrh	w1, [x1,758]
 	lsr	w1, w1, 2
 	cmp	w0, w1
-	bcs	.L1438
+	bcs	.L1449
 	cmp	w2, w1
-	bcs	.L1438
+	bcs	.L1449
 	bl	FtlSysBlkNumInit
-.L1438:
+.L1449:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	x20, 0
 	add	x21, x19, 1296
-.L1441:
+.L1452:
 	ldrh	w0, [x19,770]
 	mov	w1, w20
 	add	x20, x20, 1
 	cmp	w1, w0
-	bcs	.L1459
+	bcs	.L1470
 	ldrh	w2, [x19,1288]
 	add	x0, x21, x20, lsl 3
 	ldr	x3, [x19,1416]
@@ -8952,10 +9033,10 @@ FtlLoadBbt:
 	lsl	w2, w2, 2
 	add	x1, x3, x1, lsl 2
 	bl	ftl_memcpy
-	b	.L1441
-.L1459:
+	b	.L1452
+.L1470:
 	mov	w0, 0
-.L1431:
+.L1442:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -9007,39 +9088,43 @@ FtlFreeSysBlkQueueFull:
 	.type	FtlFreeSysBlkQueueIn, %function
 FtlFreeSysBlkQueueIn:
 	stp	x29, x30, [sp, -48]!
-	adrp	x2, .LANCHOR2
 	uxth	w1, w1
 	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
 	stp	x19, x20, [sp,16]
+	uxth	w21, w0
+	mov	w0, 65533
+	sub	w2, w21, #1
+	cmp	w0, w2, uxth
+	bcc	.L1474
+	adrp	x2, .LANCHOR2
 	add	x20, x2, :lo12:.LANCHOR2
 	mov	x19, x2
-	stp	x21, x22, [sp,32]
-	uxth	w22, w0
 	ldrh	w0, [x20,1470]
 	cmp	w0, 1024
-	beq	.L1463
-	cbz	w1, .L1465
+	beq	.L1474
+	cbz	w1, .L1476
 	ldr	w0, [x20,1400]
-	cbnz	w0, .L1465
-	mov	w0, w22
+	cbnz	w0, .L1476
+	mov	w0, w21
 	bl	P2V_block_in_plane
-	uxth	w21, w0
+	uxth	w22, w0
 	ldr	x0, [x20,1016]
-	lsl	w1, w22, 10
+	lsl	w1, w21, 10
 	str	w1, [x0,4]
 	mov	w1, 1
 	mov	w2, w1
 	ldr	x0, [x20,1016]
 	bl	FlashEraseBlocks
-	ubfiz	x1, x21, 1, 16
+	ubfiz	x0, x22, 1, 16
 	ldr	x2, [x20,1168]
-	ldrh	w0, [x2,x1]
-	add	w0, w0, 1
-	strh	w0, [x2,x1]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
 	ldr	w0, [x20,912]
 	add	w0, w0, 1
 	str	w0, [x20,912]
-.L1465:
+.L1476:
 	add	x1, x19, :lo12:.LANCHOR2
 	add	x1, x1, 1464
 	ldrh	w0, [x1,6]
@@ -9049,9 +9134,9 @@ FtlFreeSysBlkQueueIn:
 	add	x0, x1, x2, sxtw 1
 	add	w2, w2, 1
 	and	w2, w2, 1023
-	strh	w22, [x0,8]
+	strh	w21, [x0,8]
 	strh	w2, [x1,4]
-.L1463:
+.L1474:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -9076,7 +9161,7 @@ FtlLowFormatEraseBlock:
 	ldr	w2, [x3,1400]
 	str	w0, [x29,120]
 	mov	w0, 0
-	cbnz	w2, .L1473
+	cbnz	w2, .L1484
 	adrp	x28, .LANCHOR0
 	str	w25, [x3,944]
 	add	x0, x28, :lo12:.LANCHOR0
@@ -9087,10 +9172,10 @@ FtlLowFormatEraseBlock:
 	mov	w23, 56
 	ldrb	w0, [x0,136]
 	str	w0, [x29,124]
-.L1474:
+.L1485:
 	ldrh	w0, [x26,748]
 	cmp	w0, w27
-	bls	.L1518
+	bls	.L1529
 	umull	x0, w27, w23
 	ldr	x1, [x26,1016]
 	str	wzr, [x1,x0]
@@ -9100,15 +9185,15 @@ FtlLowFormatEraseBlock:
 	bl	V2P_block
 	uxth	w22, w0
 	mov	w1, w22
-	cbz	w24, .L1475
+	cbz	w24, .L1486
 	str	x1, [x29,112]
 	bl	IsBlkInVendorPart
 	ldr	x1, [x29,112]
-	cbnz	w0, .L1476
-.L1475:
+	cbnz	w0, .L1487
+.L1486:
 	mov	w0, w1
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L1477
+	cbnz	w0, .L1488
 	umull	x0, w20, w23
 	ldr	x1, [x26,1016]
 	lsl	w22, w22, 10
@@ -9126,16 +9211,16 @@ FtlLowFormatEraseBlock:
 	uxth	w20, w20
 	add	x0, x4, x0, sxtw 2
 	str	x0, [x1,16]
-	b	.L1476
-.L1477:
+	b	.L1487
+.L1488:
 	add	w19, w19, 1
 	uxth	w19, w19
-.L1476:
+.L1487:
 	add	w2, w27, 1
 	uxth	w27, w2
-	b	.L1474
-.L1518:
-	cbz	w20, .L1497
+	b	.L1485
+.L1529:
+	cbz	w20, .L1508
 	ldr	w0, [x29,124]
 	mov	w2, w20
 	strb	wzr, [x26,648]
@@ -9148,55 +9233,55 @@ FtlLowFormatEraseBlock:
 	ldrb	w0, [x29,120]
 	strb	w0, [x26,648]
 	mov	x26, 56
-.L1480:
+.L1491:
 	cmp	w20, w23, uxth
-	bls	.L1519
+	bls	.L1530
 	add	x1, x21, :lo12:.LANCHOR2
 	mul	x0, x23, x26
 	ldr	x1, [x1,1016]
 	add	x2, x1, x0
 	ldr	w0, [x1,x0]
 	cmn	w0, #1
-	bne	.L1481
+	bne	.L1492
 	ldr	w0, [x2,4]
 	add	w19, w19, 1
 	lsr	w0, w0, 10
 	uxth	w19, w19
 	bl	FtlBbmMapBadBlock
-.L1481:
+.L1492:
 	add	x23, x23, 1
-	b	.L1480
-.L1519:
-	cbnz	w24, .L1483
+	b	.L1491
+.L1530:
+	cbnz	w24, .L1494
 	mov	w0, 1
 	uxth	w22, w22
 	mov	w27, 6
 	str	w0, [x29,124]
-	b	.L1484
-.L1483:
+	b	.L1495
+.L1494:
 	add	x0, x21, :lo12:.LANCHOR2
 	add	x28, x28, :lo12:.LANCHOR0
 	ldrh	w0, [x0,820]
 	str	w0, [x29,124]
 	ldrb	w0, [x28,136]
-	cbnz	w0, .L1500
+	cbnz	w0, .L1511
 	ldr	w0, [x29,124]
 	mov	w22, 1
 	lsr	w27, w0, 2
-	b	.L1484
-.L1500:
+	b	.L1495
+.L1511:
 	mov	w22, 1
 	mov	w27, w22
-.L1484:
+.L1495:
 	mov	w23, 0
 	add	x28, x21, :lo12:.LANCHOR2
-.L1493:
+.L1504:
 	mov	w26, 0
 	mov	w20, w26
-.L1485:
+.L1496:
 	ldrh	w0, [x28,748]
 	cmp	w0, w26
-	bls	.L1520
+	bls	.L1531
 	mov	w0, 56
 	ldr	x1, [x28,1016]
 	umull	x0, w26, w0
@@ -9208,15 +9293,15 @@ FtlLowFormatEraseBlock:
 	uxth	w2, w0
 	str	w2, [x29,112]
 	mov	w1, w2
-	cbz	w24, .L1486
+	cbz	w24, .L1497
 	str	x1, [x29,104]
 	bl	IsBlkInVendorPart
 	ldr	x1, [x29,104]
-	cbnz	w0, .L1487
-.L1486:
+	cbnz	w0, .L1498
+.L1497:
 	mov	w0, w1
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L1487
+	cbnz	w0, .L1498
 	mov	w0, 56
 	ldr	x1, [x28,1016]
 	ldr	w2, [x29,112]
@@ -9237,12 +9322,12 @@ FtlLowFormatEraseBlock:
 	ldr	x2, [x28,1096]
 	add	x0, x2, x0, sxtw 2
 	str	x0, [x1,16]
-.L1487:
+.L1498:
 	add	w3, w26, 1
 	uxth	w26, w3
-	b	.L1485
-.L1520:
-	cbz	w20, .L1497
+	b	.L1496
+.L1531:
+	cbz	w20, .L1508
 	ldr	x0, [x28,1016]
 	mov	w1, w20
 	mov	w2, w22
@@ -9252,15 +9337,15 @@ FtlLowFormatEraseBlock:
 	ldrb	w0, [x29,120]
 	mov	x1, 0
 	strb	w0, [x28,648]
-.L1490:
+.L1501:
 	cmp	w20, w1, uxth
-	bls	.L1521
+	bls	.L1532
 	mov	x0, 56
 	ldr	x2, [x28,1016]
 	mul	x0, x1, x0
 	add	x3, x2, x0
 	ldr	w0, [x2,x0]
-	cbz	w0, .L1491
+	cbz	w0, .L1502
 	ldr	w0, [x3,4]
 	add	w19, w19, 1
 	str	x1, [x29,112]
@@ -9268,47 +9353,47 @@ FtlLowFormatEraseBlock:
 	uxth	w19, w19
 	bl	FtlBbmMapBadBlock
 	ldr	x1, [x29,112]
-.L1491:
+.L1502:
 	add	x1, x1, 1
-	b	.L1490
-.L1521:
+	b	.L1501
+.L1532:
 	add	w23, w23, w27
 	ldr	w0, [x29,124]
 	uxth	w23, w23
 	cmp	w23, w0
-	bcc	.L1493
+	bcc	.L1504
 	mov	x23, 0
 	mov	x26, 56
-.L1494:
+.L1505:
 	cmp	w20, w23, uxth
-	bls	.L1522
-	cbz	w24, .L1495
+	bls	.L1533
+	cbz	w24, .L1506
 	add	x1, x21, :lo12:.LANCHOR2
 	mul	x0, x23, x26
 	ldr	x1, [x1,1016]
 	add	x2, x1, x0
 	ldr	w0, [x1,x0]
-	cbnz	w0, .L1495
+	cbnz	w0, .L1506
 	ldr	w0, [x2,4]
 	mov	w1, 1
 	lsr	w0, w0, 10
 	bl	FtlFreeSysBlkQueueIn
-.L1495:
+.L1506:
 	add	x23, x23, 1
-	b	.L1494
-.L1522:
+	b	.L1505
+.L1533:
 	cmp	w25, 63
-	bls	.L1501
-	cbz	w24, .L1497
-.L1501:
+	bls	.L1512
+	cbz	w24, .L1508
+.L1512:
 	add	x21, x21, :lo12:.LANCHOR2
 	mov	w1, w22
 	mov	w2, w20
 	ldr	x0, [x21,1016]
 	bl	FlashEraseBlocks
-.L1497:
+.L1508:
 	mov	w0, w19
-.L1473:
+.L1484:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -9321,21 +9406,23 @@ FtlLowFormatEraseBlock:
 	.global	FtlFreeSysBLkSort
 	.type	FtlFreeSysBLkSort, %function
 FtlFreeSysBLkSort:
-	adrp	x0, .LANCHOR2
+	adrp	x1, .LANCHOR2
+	add	x0, x1, :lo12:.LANCHOR2
+	add	x0, x0, 1464
+	ldrh	w6, [x0,2084]
+	ldrh	w2, [x0,6]
+	cbz	w2, .L1534
 	mov	w5, 0
-	add	x1, x0, :lo12:.LANCHOR2
+	ldrh	w3, [x0,2]
+	ldrh	w2, [x0,4]
 	mov	w4, w5
-	add	x1, x1, 1464
-	ldrh	w6, [x1,2084]
 	and	w6, w6, 31
-	ldrh	w3, [x1,2]
-	ldrh	w2, [x1,4]
-.L1524:
+.L1536:
 	cmp	w4, w6
-	bge	.L1531
-	add	x5, x1, x3, sxtw 1
+	bge	.L1544
+	add	x5, x0, x3, sxtw 1
 	ldrh	w7, [x5,8]
-	add	x5, x1, x2, sxtw 1
+	add	x5, x0, x2, sxtw 1
 	add	w4, w4, 1
 	strh	w7, [x5,8]
 	mov	w5, 1
@@ -9344,13 +9431,13 @@ FtlFreeSysBLkSort:
 	uxth	w4, w4
 	and	w3, w3, 1023
 	and	w2, w2, 1023
-	b	.L1524
-.L1531:
-	cbz	w5, .L1523
-	add	x0, x0, :lo12:.LANCHOR2
+	b	.L1536
+.L1544:
+	cbz	w5, .L1534
+	add	x0, x1, :lo12:.LANCHOR2
 	strh	w3, [x0,1466]
 	strh	w2, [x0,1468]
-.L1523:
+.L1534:
 	ret
 	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
 	.align	2
@@ -9366,18 +9453,18 @@ remove_from_free_sys_Queue:
 	add	x20, x20, :lo12:.LANCHOR2
 	add	x20, x20, 1464
 	ldrh	w3, [x20,6]
-	cbz	w3, .L1533
+	cbz	w3, .L1546
 	ldrh	w4, [x20,2]
 	mov	w19, w0
-.L1534:
+.L1547:
 	cmp	w19, w3
-	bcs	.L1539
+	bcs	.L1552
 	add	w2, w19, w4
 	ubfiz	x2, x2, 1, 10
 	add	x2, x20, x2
 	ldrh	w0, [x2,8]
 	cmp	w0, w1
-	bne	.L1535
+	bne	.L1548
 	adrp	x0, .LC34
 	add	x0, x0, :lo12:.LC34
 	bl	printk
@@ -9395,13 +9482,13 @@ remove_from_free_sys_Queue:
 	strh	w1, [x19,8]
 	strh	w0, [x20,6]
 	mov	w0, 1
-	b	.L1533
-.L1535:
+	b	.L1546
+.L1548:
 	add	w19, w19, 1
-	b	.L1534
-.L1539:
+	b	.L1547
+.L1552:
 	mov	w0, 0
-.L1533:
+.L1546:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -9422,10 +9509,10 @@ FtlFreeSysBlkQueueOut:
 	add	x21, x19, 1464
 	adrp	x24, .LANCHOR0
 	add	x23, x23, :lo12:.LC36
-.L1541:
+.L1554:
 	ldrh	w1, [x21,6]
 	adrp	x22, .LANCHOR2
-	cbz	w1, .L1542
+	cbz	w1, .L1555
 	ldrh	w2, [x21,2]
 	sub	w1, w1, #1
 	add	x0, x21, x2, sxtw 1
@@ -9435,7 +9522,7 @@ FtlFreeSysBlkQueueOut:
 	and	w2, w2, 1023
 	strh	w2, [x21,2]
 	ldrh	w20, [x0,8]
-	cbnz	w1, .L1543
+	cbnz	w1, .L1556
 	mov	w0, w20
 	str	x1, [x29,88]
 	bl	P2V_block_in_plane
@@ -9446,11 +9533,11 @@ FtlFreeSysBlkQueueOut:
 	str	w2, [x0,4]
 	add	x0, x24, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L1544
+	cbz	w0, .L1557
 	ldr	x0, [x19,1016]
 	mov	w2, 1
 	bl	FlashEraseBlocks
-.L1544:
+.L1557:
 	add	x25, x22, :lo12:.LANCHOR2
 	mov	w1, 1
 	mov	w2, w1
@@ -9464,22 +9551,25 @@ FtlFreeSysBlkQueueOut:
 	ldr	w0, [x25,912]
 	add	w0, w0, 1
 	str	w0, [x25,912]
-	b	.L1543
-.L1542:
+	b	.L1556
+.L1555:
 	adrp	x0, .LC35
 	add	x0, x0, :lo12:.LC35
 	bl	printk
-.L1545:
-	b	.L1545
-.L1543:
-	cbnz	w20, .L1546
+.L1558:
+	b	.L1558
+.L1556:
+	sub	w0, w20, #1
+	mov	w1, 65533
+	cmp	w1, w0, uxth
+	bcs	.L1559
 	add	x22, x22, :lo12:.LANCHOR2
 	mov	x0, x23
 	mov	w1, w20
 	ldrh	w2, [x22,1470]
 	bl	printk
-	b	.L1541
-.L1546:
+	b	.L1554
+.L1559:
 	mov	w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -9498,7 +9588,7 @@ insert_data_list:
 	mov	x4, x2
 	ldrh	w1, [x3,756]
 	cmp	w1, w0
-	bls	.L1552
+	bls	.L1565
 	mov	w7, 6
 	ldr	x11, [x3,1280]
 	mov	w1, -1
@@ -9507,10 +9597,10 @@ insert_data_list:
 	strh	w1, [x5,2]
 	strh	w1, [x11,x10]
 	ldr	x1, [x3,3568]
-	cbnz	x1, .L1553
+	cbnz	x1, .L1566
 	str	x5, [x3,3568]
-	b	.L1552
-.L1553:
+	b	.L1565
+.L1566:
 	ubfiz	x8, x0, 1, 16
 	ldr	x13, [x3,1184]
 	ldrh	w2, [x5,4]
@@ -9530,13 +9620,13 @@ insert_data_list:
 	add	x9, x14, x8
 	mov	w8, w7
 	uxth	w2, w2
-.L1561:
+.L1574:
 	add	w3, w3, 1
 	cmp	w0, w2
 	uxth	w3, w3
-	beq	.L1552
+	beq	.L1565
 	cmp	w3, w17
-	bhi	.L1552
+	bhi	.L1565
 	ubfiz	x15, x2, 1, 16
 	ldrh	w16, [x1,4]
 	cmp	w16, wzr
@@ -9544,47 +9634,47 @@ insert_data_list:
 	mul	w7, w7, w16
 	csinv	w7, w7, wzr, ne
 	cmp	w7, w6
-	bne	.L1557
+	bne	.L1570
 	ldrh	w15, [x14,x15]
 	ldrh	w7, [x9]
 	cmp	w15, w7
-	bcc	.L1559
-	b	.L1558
-.L1557:
-	bhi	.L1558
-.L1559:
+	bcc	.L1572
+	b	.L1571
+.L1570:
+	bhi	.L1571
+.L1572:
 	ldrh	w7, [x1]
 	cmp	w7, w18
-	bne	.L1560
+	bne	.L1573
 	strh	w2, [x5,2]
 	add	x2, x4, :lo12:.LANCHOR2
 	strh	w0, [x1]
 	str	x5, [x2,3576]
-	b	.L1552
-.L1560:
+	b	.L1565
+.L1573:
 	umull	x1, w7, w8
 	mov	w2, w7
 	add	x1, x12, x1
-	b	.L1561
-.L1558:
+	b	.L1574
+.L1571:
 	strh	w2, [x11,x10]
 	ldrh	w2, [x1,2]
 	strh	w2, [x5,2]
 	add	x2, x4, :lo12:.LANCHOR2
 	ldr	x3, [x2,3568]
 	cmp	x1, x3
-	bne	.L1562
+	bne	.L1575
 	strh	w0, [x1,2]
 	str	x5, [x2,3568]
-	b	.L1552
-.L1562:
+	b	.L1565
+.L1575:
 	ldrh	w3, [x1,2]
 	mov	w4, 6
 	ldr	x2, [x2,1280]
 	umull	x3, w3, w4
 	strh	w0, [x2,x3]
 	strh	w0, [x1,2]
-.L1552:
+.L1565:
 	mov	w0, 0
 	ret
 	.size	insert_data_list, .-insert_data_list
@@ -9610,7 +9700,7 @@ insert_free_list:
 	uxth	w0, w0
 	mov	w7, 65535
 	cmp	w0, w7
-	beq	.L1567
+	beq	.L1580
 	adrp	x2, .LANCHOR2
 	mov	w6, 6
 	add	x5, x2, :lo12:.LANCHOR2
@@ -9622,10 +9712,10 @@ insert_free_list:
 	strh	w1, [x4,2]
 	strh	w1, [x9,x8]
 	ldr	x1, [x5,3592]
-	cbnz	x1, .L1568
+	cbnz	x1, .L1581
 	str	x4, [x5,3592]
-	b	.L1567
-.L1568:
+	b	.L1580
+.L1581:
 	ldr	x11, [x5,1168]
 	ubfiz	x2, x0, 1, 16
 	ldr	x10, [x5,1280]
@@ -9635,41 +9725,41 @@ insert_free_list:
 	asr	x2, x2, 1
 	madd	x2, x5, x2, x2
 	uxth	w2, w2
-.L1571:
+.L1584:
 	ubfiz	x5, x2, 1, 16
 	ldrh	w5, [x11,x5]
 	cmp	w5, w12
-	bcs	.L1569
+	bcs	.L1582
 	ldrh	w5, [x1]
 	cmp	w5, w7
-	bne	.L1570
+	bne	.L1583
 	strh	w2, [x4,2]
 	strh	w0, [x1]
-	b	.L1567
-.L1570:
+	b	.L1580
+.L1583:
 	umull	x1, w5, w6
 	mov	w2, w5
 	add	x1, x10, x1
-	b	.L1571
-.L1569:
+	b	.L1584
+.L1582:
 	ldrh	w5, [x1,2]
 	strh	w5, [x4,2]
 	strh	w2, [x9,x8]
 	add	x2, x3, :lo12:.LANCHOR2
 	ldr	x3, [x2,3592]
 	cmp	x1, x3
-	bne	.L1572
+	bne	.L1585
 	strh	w0, [x1,2]
 	str	x4, [x2,3592]
-	b	.L1567
-.L1572:
+	b	.L1580
+.L1585:
 	ldrh	w3, [x1,2]
 	mov	w4, 6
 	ldr	x2, [x2,1280]
 	umull	x3, w3, w4
 	strh	w0, [x2,x3]
 	strh	w0, [x1,2]
-.L1567:
+.L1580:
 	mov	w0, 0
 	ret
 	.size	insert_free_list, .-insert_free_list
@@ -9702,31 +9792,31 @@ List_remove_node:
 	ldr	x2, [x6,1280]
 	add	x4, x2, x1
 	cmp	x4, x3
-	bne	.L1575
+	bne	.L1588
 	ldrh	w3, [x2,x1]
 	cmp	w3, w7
-	bne	.L1576
+	bne	.L1589
 	str	xzr, [x0]
-	b	.L1577
-.L1576:
+	b	.L1590
+.L1589:
 	umull	x3, w3, w5
 	add	x3, x2, x3
 	str	x3, [x0]
 	mov	w0, -1
 	strh	w0, [x3,2]
-	b	.L1577
-.L1575:
+	b	.L1590
+.L1588:
 	ldrh	w0, [x2,x1]
 	ldrh	w3, [x4,2]
 	cmp	w0, w7
-	bne	.L1578
+	bne	.L1591
 	cmp	w3, w0
-	beq	.L1577
+	beq	.L1590
 	umull	x3, w3, w5
 	mov	w0, -1
 	strh	w0, [x2,x3]
-	b	.L1577
-.L1578:
+	b	.L1590
+.L1591:
 	umull	x0, w0, w5
 	add	x0, x2, x0
 	strh	w3, [x0,2]
@@ -9735,7 +9825,7 @@ List_remove_node:
 	ldrh	w7, [x2,x1]
 	umull	x3, w3, w5
 	strh	w7, [x0,x3]
-.L1577:
+.L1590:
 	mov	w0, -1
 	strh	w0, [x2,x1]
 	strh	w0, [x4,2]
@@ -9752,14 +9842,14 @@ List_pop_index_node:
 	str	x19, [sp,16]
 	mov	w19, 65535
 	ldr	x2, [x0]
-	cbz	x2, .L1580
+	cbz	x2, .L1593
 	adrp	x3, .LANCHOR2+1280
 	mov	w5, w19
 	mov	w6, 6
 	ldr	x4, [x3,#:lo12:.LANCHOR2+1280]
-.L1581:
-	cbnz	w1, .L1582
-.L1584:
+.L1594:
+	cbnz	w1, .L1595
+.L1597:
 	sub	x2, x2, x4
 	mov	x1, -6148914691236517206
 	asr	x2, x2, 1
@@ -9767,17 +9857,17 @@ List_pop_index_node:
 	uxth	w19, w2
 	mov	w1, w19
 	bl	List_remove_node
-	b	.L1580
-.L1582:
+	b	.L1593
+.L1595:
 	ldrh	w3, [x2]
 	cmp	w3, w5
-	beq	.L1584
+	beq	.L1597
 	umull	x3, w3, w6
 	sub	w1, w1, #1
 	add	x2, x4, x3
 	uxth	w1, w1
-	b	.L1581
-.L1580:
+	b	.L1594
+.L1593:
 	mov	w0, w19
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -9792,26 +9882,26 @@ List_get_gc_head_node:
 	add	x2, x2, :lo12:.LANCHOR2
 	mov	w0, 65535
 	ldr	x1, [x2,3568]
-	cbz	x1, .L1592
+	cbz	x1, .L1605
 	ldr	x4, [x2,1280]
 	mov	w5, 6
-.L1588:
-	cbz	w3, .L1589
+.L1601:
+	cbz	w3, .L1602
 	ldrh	w2, [x1]
 	cmp	w2, w0
-	beq	.L1592
+	beq	.L1605
 	umull	x2, w2, w5
 	sub	w3, w3, #1
 	add	x1, x4, x2
 	uxth	w3, w3
-	b	.L1588
-.L1589:
+	b	.L1601
+.L1602:
 	sub	x1, x1, x4
 	mov	x0, -6148914691236517206
 	asr	x1, x1, 1
 	madd	x1, x0, x1, x1
 	uxth	w0, w1
-.L1592:
+.L1605:
 	ret
 	.size	List_get_gc_head_node, .-List_get_gc_head_node
 	.align	2
@@ -9826,20 +9916,20 @@ List_update_data_list:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x0,3608]
 	cmp	w1, w20
-	beq	.L1594
+	beq	.L1607
 	ldrh	w1, [x0,3656]
 	cmp	w1, w20
-	beq	.L1594
+	beq	.L1607
 	ldrh	w1, [x0,3704]
 	cmp	w1, w20
-	beq	.L1594
+	beq	.L1607
 	mov	w3, 6
 	ldr	x4, [x0,1280]
 	ldr	x2, [x0,3568]
 	umull	x3, w20, w3
 	add	x1, x4, x3
 	cmp	x1, x2
-	beq	.L1594
+	beq	.L1607
 	ldr	x5, [x0,1184]
 	ubfiz	x0, x20, 1, 16
 	ldrh	w2, [x5,x0]
@@ -9850,11 +9940,11 @@ List_update_data_list:
 	mov	w0, 65535
 	csinv	w2, w2, wzr, ne
 	cmp	w1, w0
-	bne	.L1596
+	bne	.L1609
 	ldrh	w0, [x4,x3]
 	cmp	w0, w1
-	beq	.L1594
-.L1596:
+	beq	.L1607
+.L1609:
 	mov	w0, 6
 	mov	x3, -6148914691236517206
 	umull	x1, w1, w0
@@ -9867,7 +9957,7 @@ List_update_data_list:
 	mul	w0, w0, w1
 	csinv	w0, w0, wzr, ne
 	cmp	w2, w0
-	bcs	.L1594
+	bcs	.L1607
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w1, w20
 	add	x0, x19, 3568
@@ -9877,7 +9967,7 @@ List_update_data_list:
 	strh	w0, [x19,3584]
 	mov	w0, w20
 	bl	INSERT_DATA_LIST
-.L1594:
+.L1607:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -9904,74 +9994,74 @@ ftl_free_no_use_map_blk:
 	mov	x0, x21
 	bl	ftl_memset
 	mov	w0, 0
-.L1601:
+.L1614:
 	ldrh	w1, [x19,6]
 	cmp	w1, w0
-	bls	.L1614
+	bls	.L1627
 	ubfiz	x1, x0, 2, 16
 	ldr	w2, [x20,x1]
 	mov	w1, 0
 	ubfx	x2, x2, 10, 16
-.L1602:
+.L1615:
 	ldrh	w3, [x19,10]
 	cmp	w3, w1
-	bls	.L1615
+	bls	.L1628
 	ubfiz	x3, x1, 1, 16
 	ldrh	w4, [x25,x3]
 	cmp	w4, w2
-	bne	.L1603
+	bne	.L1616
 	ldrh	w4, [x21,x3]
 	add	w4, w4, 1
 	strh	w4, [x21,x3]
-.L1603:
+.L1616:
 	add	w1, w1, 1
 	uxth	w1, w1
-	b	.L1602
-.L1615:
+	b	.L1615
+.L1628:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L1601
-.L1614:
+	b	.L1614
+.L1627:
 	mov	w24, 0
 	ldrh	w26, [x21]
 	mov	w20, w24
 	adrp	x27, .LANCHOR2
-.L1606:
+.L1619:
 	ldrh	w0, [x19,10]
 	cmp	w0, w20
-	bls	.L1616
+	bls	.L1629
 	ldrh	w0, [x19]
 	uxtw	x22, w20
 	cmp	w0, w20
-	bne	.L1607
+	bne	.L1620
 	add	x0, x27, :lo12:.LANCHOR2
 	ldrh	w1, [x19,2]
 	ldrh	w0, [x0,820]
 	cmp	w1, w0
-	bcs	.L1607
+	bcs	.L1620
 	strh	w0, [x21,x22,lsl 1]
-.L1607:
+.L1620:
 	lsl	x22, x22, 1
 	ldrh	w23, [x21,x22]
 	cmp	w26, w23
-	bls	.L1608
+	bls	.L1621
 	mov	w24, w20
 	mov	w26, w23
-.L1608:
-	cbnz	w23, .L1609
+.L1621:
+	cbnz	w23, .L1622
 	ldrh	w0, [x25,x22]
-	cbz	w0, .L1609
+	cbz	w0, .L1622
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	strh	w23, [x25,x22]
 	ldrh	w0, [x19,8]
 	sub	w0, w0, #1
 	strh	w0, [x19,8]
-.L1609:
+.L1622:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L1606
-.L1616:
+	b	.L1619
+.L1629:
 	mov	w0, w24
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -9992,12 +10082,12 @@ ftl_map_blk_alloc_new_blk:
 	mov	w20, 0
 	ldrh	w2, [x0,10]
 	ldr	x1, [x0,16]
-.L1618:
+.L1631:
 	cmp	w20, w2
-	beq	.L1622
+	beq	.L1635
 	mov	x22, x1
 	ldrh	w21, [x1],2
-	cbnz	w21, .L1619
+	cbnz	w21, .L1632
 	mov	x19, x0
 	bl	FtlFreeSysBlkQueueOut
 	strh	w0, [x22]
@@ -10005,15 +10095,15 @@ ftl_map_blk_alloc_new_blk:
 	sub	w2, w1, #1
 	mov	w0, 65533
 	cmp	w0, w2, uxth
-	bcs	.L1620
+	bcs	.L1633
 	adrp	x2, .LANCHOR2+1470
 	adrp	x0, .LC37
 	add	x0, x0, :lo12:.LC37
 	ldrh	w2, [x2,#:lo12:.LANCHOR2+1470]
 	bl	printk
-.L1621:
-	b	.L1621
-.L1620:
+.L1634:
+	b	.L1634
+.L1633:
 	ldr	w0, [x19,48]
 	strh	w21, [x19,2]
 	add	w0, w0, 1
@@ -10022,12 +10112,12 @@ ftl_map_blk_alloc_new_blk:
 	strh	w20, [x19]
 	add	w0, w0, 1
 	strh	w0, [x19,8]
-	b	.L1622
-.L1619:
+	b	.L1635
+.L1632:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L1618
-.L1622:
+	b	.L1631
+.L1635:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10038,127 +10128,130 @@ ftl_map_blk_alloc_new_blk:
 	.global	FtlMapWritePage
 	.type	FtlMapWritePage, %function
 FtlMapWritePage:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR2
-	mov	x19, x0
-	stp	x21, x22, [sp,32]
-	add	x22, x20, :lo12:.LANCHOR2
-	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	ldr	w21, [x22,1400]
-	mov	w24, w1
+	adrp	x25, .LANCHOR2
+	mov	x26, x2
+	stp	x23, x24, [sp,48]
 	stp	x27, x28, [sp,80]
-	mov	x25, x2
-	cbnz	w21, .L1625
 	adrp	x23, .LC38
-	mov	w26, 65535
-	add	x28, x22, 1408
-	add	x23, x23, :lo12:.LC38
-.L1626:
-	ldr	w1, [x22,896]
+	add	x28, x25, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	mov	w24, w1
+	mov	x19, x0
+	mov	w22, 0
+	add	x0, x23, :lo12:.LC38
+	mov	w27, 65535
+	add	x21, x28, 1408
+	str	x0, [x29,104]
+.L1638:
+	add	x0, x25, :lo12:.LANCHOR2
+	adrp	x20, .LANCHOR2
+	ldr	w1, [x0,896]
 	add	w1, w1, 1
-	str	w1, [x22,896]
-	ldrh	w1, [x22,820]
-	ldrh	w0, [x19,2]
-	sub	w1, w1, #1
-	cmp	w0, w1
-	bge	.L1627
+	str	w1, [x0,896]
+	ldrh	w0, [x0,820]
+	ldrh	w1, [x19,2]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	bge	.L1639
 	ldrh	w0, [x19]
-	cmp	w0, w26
-	bne	.L1628
-.L1627:
+	cmp	w0, w27
+	bne	.L1640
+.L1639:
 	mov	x0, x19
 	bl	Ftl_write_map_blk_to_last_page
-.L1628:
-	ldrh	w1, [x19]
-	mov	w2, 16
+.L1640:
+	ldr	w1, [x28,1400]
+	cbnz	w1, .L1641
+	ldrh	w2, [x19]
 	ldr	x0, [x19,16]
-	ldrh	w27, [x0,x1,lsl 1]
-	ldrh	w1, [x19,2]
-	ldr	x0, [x22,1112]
-	orr	w1, w1, w27, lsl 10
-	str	w1, [x28,4]
-	mov	w1, 0
-	str	x25, [x28,8]
-	str	x0, [x28,16]
+	ldrh	w23, [x0,x2,lsl 1]
+	mov	w2, 16
+	ldrh	w0, [x19,2]
+	str	x26, [x21,8]
+	orr	w0, w0, w23, lsl 10
+	str	w0, [x21,4]
+	ldr	x0, [x28,1112]
+	str	x0, [x21,16]
 	bl	ftl_memset
-	ldr	x1, [x28,16]
-	ldr	w0, [x19,48]
-	str	w0, [x1,4]
-	strh	w24, [x1,8]
-	ldrh	w0, [x19,4]
-	strh	w0, [x1]
-	mov	x0, x28
-	strh	w27, [x1,2]
+	ldr	x0, [x21,16]
+	ldr	w1, [x19,48]
+	str	w1, [x0,4]
+	strh	w24, [x0,8]
+	ldrh	w1, [x19,4]
+	strh	w1, [x0]
 	mov	w1, 1
+	strh	w23, [x0,2]
 	mov	w3, w1
+	mov	x0, x21
 	mov	w2, w1
 	bl	FlashProgPages
 	ldrh	w3, [x19,2]
 	add	w3, w3, 1
 	uxth	w3, w3
 	strh	w3, [x19,2]
-	ldr	w1, [x28]
-	cmn	w1, #1
-	bne	.L1629
-	ldr	w1, [x28,4]
-	mov	x0, x23
-	add	w21, w21, 1
+	ldr	w0, [x21]
+	cmn	w0, #1
+	bne	.L1642
+	ldr	x0, [x29,104]
+	add	w22, w22, 1
+	ldr	w1, [x21,4]
+	uxth	w22, w22
 	bl	printk
-	uxth	w21, w21
 	ldrh	w0, [x19,2]
 	cmp	w0, 2
-	bhi	.L1630
-	ldrh	w1, [x22,820]
-	sub	w1, w1, #1
-	strh	w1, [x19,2]
-.L1630:
-	cmp	w21, 3
-	bls	.L1626
+	bhi	.L1643
+	ldrh	w0, [x28,820]
+	sub	w0, w0, #1
+	strh	w0, [x19,2]
+.L1643:
+	cmp	w22, 3
+	bls	.L1638
 	add	x20, x20, :lo12:.LANCHOR2
 	adrp	x0, .LC39
 	add	x0, x0, :lo12:.LC39
-	mov	w2, w21
+	mov	w2, w22
 	ldr	w1, [x20,1412]
 	bl	printk
 	mov	w0, 1
 	str	w0, [x20,1400]
-	b	.L1625
-.L1629:
-	cbz	w1, .L1632
-	strh	w27, [x19,60]
-.L1632:
+	b	.L1641
+.L1642:
+	cbz	w0, .L1645
+	strh	w23, [x19,60]
+.L1645:
 	cmp	w3, 1
-	beq	.L1626
-	cmp	w1, 256
-	beq	.L1626
+	beq	.L1638
+	cmp	w0, 256
+	beq	.L1638
 	add	x20, x20, :lo12:.LANCHOR2
 	ldr	x0, [x19,40]
 	ldr	w1, [x20,1412]
 	str	w1, [x0,w24,uxtw 2]
-.L1625:
+.L1641:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 112
 	ret
 	.size	FtlMapWritePage, .-FtlMapWritePage
 	.align	2
 	.global	ftl_map_blk_gc
 	.type	ftl_map_blk_gc, %function
 ftl_map_blk_gc:
-	stp	x29, x30, [sp, -112]!
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
+	str	x27, [sp,80]
 	mov	x19, x0
 	adrp	x20, .LANCHOR2
 	ldr	x22, [x0,16]
@@ -10168,39 +10261,39 @@ ftl_map_blk_gc:
 	ldrh	w2, [x19,8]
 	sub	w1, w4, #4
 	cmp	w2, w1
-	bge	.L1637
+	bge	.L1650
 	ldrh	w2, [x19,60]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1639
+	beq	.L1652
 	add	x1, x20, :lo12:.LANCHOR2
 	ldrh	w2, [x19,2]
 	ldrh	w1, [x1,820]
 	cmp	w2, w1
-	bcc	.L1639
-.L1637:
+	bcc	.L1652
+.L1650:
 	ldrh	w1, [x19,60]
 	uxth	w21, w0
 	mov	w0, 65535
 	cmp	w1, w0
-	beq	.L1641
+	beq	.L1654
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w3, [x19,2]
 	ldrh	w0, [x0,820]
 	cmp	w0, w3
-	bhi	.L1641
+	bhi	.L1654
 	mov	x2, 0
-.L1642:
+.L1655:
 	uxth	w0, w2
 	cmp	w0, w4
-	bcs	.L1643
+	bcs	.L1656
 	add	x2, x2, 1
 	add	x5, x22, x2, lsl 1
 	ldrh	w5, [x5,-2]
 	cmp	w5, w1
-	bne	.L1642
+	bne	.L1655
 	mov	w21, w0
-.L1643:
+.L1656:
 	ubfiz	x2, x0, 1, 16
 	adrp	x0, .LC40
 	add	x0, x0, :lo12:.LC40
@@ -10208,12 +10301,12 @@ ftl_map_blk_gc:
 	bl	printk
 	mov	w0, -1
 	strh	w0, [x19,60]
-.L1641:
+.L1654:
 	ubfiz	x21, x21, 1, 16
-	ldrh	w25, [x22,x21]
-	cbz	w25, .L1639
+	ldrh	w24, [x22,x21]
+	cbz	w24, .L1652
 	ldr	w0, [x19,52]
-	cbnz	w0, .L1639
+	cbnz	w0, .L1652
 	mov	w1, 1
 	str	w1, [x19,52]
 	strh	w0, [x22,x21]
@@ -10224,76 +10317,79 @@ ftl_map_blk_gc:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x0,820]
 	cmp	w1, w0
-	bcc	.L1645
+	bcc	.L1658
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L1645:
-	add	x24, x20, :lo12:.LANCHOR2
-	adrp	x26, .LC41
+.L1658:
+	add	x25, x20, :lo12:.LANCHOR2
 	mov	w21, 0
-	add	x22, x24, 1408
-	mov	w27, 1
-	add	x26, x26, :lo12:.LC41
-.L1646:
+	add	x22, x25, 1408
+.L1659:
 	ldrh	w0, [x19,6]
 	cmp	w0, w21
-	bls	.L1656
-	ubfiz	x28, x21, 2, 16
-	ldr	w0, [x23,x28]
-	cmp	w25, w0, lsr 10
-	bne	.L1647
-	ldr	x3, [x24,1112]
+	bls	.L1670
+	ubfiz	x0, x21, 2, 16
+	add	x27, x23, x0
+	ldr	w1, [x23,x0]
+	cmp	w24, w1, lsr 10
+	bne	.L1660
+	ldr	x1, [x25,1056]
+	ldr	x26, [x25,1112]
+	str	x1, [x22,8]
 	mov	w1, 1
-	ldr	x0, [x24,1056]
+	str	x26, [x22,16]
 	mov	w2, w1
-	str	x3, [x22,16]
-	str	x0, [x22,8]
-	str	x3, [x29,104]
-	ldr	w0, [x23,x28]
+	ldr	w0, [x23,x0]
 	str	w0, [x22,4]
 	mov	x0, x22
 	bl	FlashReadPages
 	ldr	w0, [x22]
-	ldr	x3, [x29,104]
 	cmn	w0, #1
-	bne	.L1648
-	str	wzr, [x23,x28]
-	mov	x0, x26
-	ldr	w1, [x22,4]
-	ldrh	w2, [x3,8]
+	bne	.L1661
+.L1663:
+	add	x20, x20, :lo12:.LANCHOR2
+	str	wzr, [x27]
+	adrp	x0, .LC41
+	ldrh	w2, [x26,8]
+	add	x0, x0, :lo12:.LC41
+	ldr	w1, [x20,1412]
 	bl	printk
-	str	w27, [x24,1400]
-	b	.L1647
-.L1648:
+	mov	w0, 1
+	str	w0, [x20,1400]
+	b	.L1662
+.L1661:
+	ldrh	w0, [x26,8]
+	cmp	w0, w21
+	bne	.L1663
 	ldr	x2, [x22,8]
 	mov	x0, x19
 	mov	w1, w21
 	bl	FtlMapWritePage
-.L1647:
+.L1660:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L1646
-.L1656:
-	mov	w0, w25
+	b	.L1659
+.L1670:
+	mov	w0, w24
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
 	str	wzr, [x19,52]
-.L1639:
+.L1652:
 	add	x20, x20, :lo12:.LANCHOR2
 	ldrh	w1, [x19,2]
 	ldrh	w0, [x20,820]
 	cmp	w1, w0
-	bcc	.L1650
+	bcc	.L1662
 	mov	x0, x19
 	bl	ftl_map_blk_alloc_new_blk
-.L1650:
+.L1662:
 	mov	w0, 0
+	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 112
+	ldp	x29, x30, [sp], 96
 	ret
 	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
 	.align	2
@@ -10310,12 +10406,12 @@ Ftl_write_map_blk_to_last_page:
 	ldr	w20, [x1,1400]
 	ldr	x22, [x0,16]
 	ldr	x23, [x0,40]
-	cbnz	w20, .L1658
+	cbnz	w20, .L1672
 	mov	x19, x0
 	ldrh	w0, [x0]
 	mov	w2, 65535
 	cmp	w0, w2
-	bne	.L1659
+	bne	.L1673
 	ldrh	w0, [x19,8]
 	add	w0, w0, 1
 	strh	w0, [x19,8]
@@ -10326,8 +10422,8 @@ Ftl_write_map_blk_to_last_page:
 	strh	w20, [x19]
 	add	w0, w0, 1
 	str	w0, [x19,48]
-	b	.L1658
-.L1659:
+	b	.L1672
+.L1673:
 	ubfiz	x0, x0, 1, 16
 	ldr	w2, [x19,48]
 	ldrh	w22, [x22,x0]
@@ -10350,14 +10446,14 @@ Ftl_write_map_blk_to_last_page:
 	lsl	w2, w2, 3
 	bl	ftl_memset
 	mov	w0, w20
-.L1660:
+.L1674:
 	ldrh	w1, [x19,6]
 	cmp	w1, w0
-	bls	.L1663
+	bls	.L1677
 	ubfiz	x3, x0, 2, 32
 	ldr	w1, [x23,x3]
 	cmp	w22, w1, lsr 10
-	bne	.L1661
+	bne	.L1675
 	add	x2, x21, :lo12:.LANCHOR2
 	add	w20, w20, 1
 	uxth	w20, w20
@@ -10368,11 +10464,11 @@ Ftl_write_map_blk_to_last_page:
 	ldr	w3, [x23,x3]
 	add	x1, x2, x1
 	str	w3, [x1,4]
-.L1661:
+.L1675:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L1660
-.L1663:
+	b	.L1674
+.L1677:
 	mov	w1, 1
 	add	x0, x21, :lo12:.LANCHOR2
 	add	x0, x0, 1408
@@ -10384,7 +10480,7 @@ Ftl_write_map_blk_to_last_page:
 	strh	w0, [x19,2]
 	mov	x0, x19
 	bl	ftl_map_blk_gc
-.L1658:
+.L1672:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -10429,209 +10525,241 @@ select_l2p_ram_region:
 	mov	w5, 65535
 	ldrh	w2, [x1,858]
 	ldr	x1, [x1,1264]
-.L1666:
+.L1680:
 	uxth	w0, w4
 	cmp	w0, w2
-	bcs	.L1682
+	bcs	.L1696
 	add	x4, x4, 1
 	add	x6, x1, x4, lsl 4
 	ldrh	w6, [x6,-16]
 	cmp	w6, w5
-	bne	.L1666
-	b	.L1667
-.L1682:
+	bne	.L1680
+	b	.L1681
+.L1696:
 	mov	w0, w2
 	mov	x4, 0
 	mov	w7, -2147483648
-.L1669:
+.L1683:
 	uxth	w6, w4
 	cmp	w6, w2
-	bcs	.L1683
+	bcs	.L1697
 	add	x5, x1, x4, lsl 4
 	ldr	w5, [x5,4]
-	tbnz	w5, #31, .L1678
+	tbnz	w5, #31, .L1692
 	cmp	w5, w7
-	bcc	.L1670
-.L1678:
+	bcc	.L1684
+.L1692:
 	mov	w5, w7
 	mov	w6, w0
-.L1670:
+.L1684:
 	add	x4, x4, 1
 	mov	w7, w5
 	mov	w0, w6
-	b	.L1669
-.L1683:
+	b	.L1683
+.L1697:
 	cmp	w0, w2
-	bcc	.L1667
+	bcc	.L1681
 	add	x0, x3, :lo12:.LANCHOR2
 	add	x1, x1, 4
 	mov	w4, -1
 	mov	w3, 0
 	ldrh	w5, [x0,3816]
 	mov	w0, w2
-.L1673:
+.L1687:
 	cmp	w3, w2
-	beq	.L1667
+	beq	.L1681
 	ldr	w7, [x1]
 	cmp	w7, w4
-	bcs	.L1674
+	bcs	.L1688
 	ldrh	w6, [x1,-4]
 	cmp	w6, w5
 	csel	w4, w4, w7, eq
 	cmp	w6, w5
 	csel	w0, w0, w3, eq
-.L1674:
+.L1688:
 	add	w3, w3, 1
 	add	x1, x1, 16
 	uxth	w3, w3
-	b	.L1673
-.L1667:
+	b	.L1687
+.L1681:
 	ret
 	.size	select_l2p_ram_region, .-select_l2p_ram_region
 	.align	2
 	.global	log2phys
 	.type	log2phys, %function
 log2phys:
-	stp	x29, x30, [sp, -96]!
+	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR2
-	add	x3, x21, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x3, x19, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	stp	x23, x24, [sp,48]
-	stp	x19, x20, [sp,16]
-	mov	x26, x1
-	mov	w27, w2
+	stp	x21, x22, [sp,32]
+	mov	x25, x1
+	mov	w26, w2
 	ldrh	w1, [x3,826]
 	mov	x2, 1
-	ldr	x20, [x3,1264]
+	ldr	x21, [x3,1264]
 	add	w1, w1, 7
 	lsr	w28, w0, w1
 	lsl	x1, x2, x1
 	sub	w1, w1, #1
 	and	w23, w1, w0
 	ldrh	w1, [x3,858]
-	uxth	w25, w28
+	uxth	w24, w28
 	mov	x0, 0
 	uxth	x23, w23
-.L1685:
-	uxth	x19, w0
-	cmp	w19, w1
-	bcs	.L1699
+.L1699:
+	uxth	x20, w0
+	cmp	w20, w1
+	bcs	.L1714
 	add	x0, x0, 1
-	add	x2, x20, x0, lsl 4
+	add	x2, x21, x0, lsl 4
 	ldrh	w2, [x2,-16]
-	cmp	w2, w25
-	bne	.L1685
-.L1686:
-	cbnz	w27, .L1687
-	add	x0, x21, :lo12:.LANCHOR2
+	cmp	w2, w24
+	bne	.L1699
+.L1700:
+	cbnz	w26, .L1701
+	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x1, [x0,1264]
-	add	x1, x1, x19, lsl 4
+	add	x1, x1, x20, lsl 4
 	ldr	x0, [x1,8]
 	ldr	w0, [x0,x23,lsl 2]
-	str	w0, [x26]
-	b	.L1688
-.L1687:
-	add	x1, x21, :lo12:.LANCHOR2
-	lsl	x0, x19, 4
-	ldr	w3, [x26]
+	str	w0, [x25]
+	b	.L1702
+.L1701:
+	add	x1, x19, :lo12:.LANCHOR2
+	lsl	x0, x20, 4
+	ldr	w3, [x25]
 	ldr	x2, [x1,1264]
 	add	x2, x2, x0
 	ldr	x2, [x2,8]
 	str	w3, [x2,x23,lsl 2]
-	strh	w25, [x1,3816]
+	strh	w24, [x1,3816]
 	ldr	x2, [x1,1264]
 	add	x0, x2, x0
 	ldr	w2, [x0,4]
 	orr	w2, w2, -2147483648
 	str	w2, [x0,4]
-.L1688:
-	add	x21, x21, :lo12:.LANCHOR2
-	ldr	x0, [x21,1264]
-	add	x19, x0, x19, lsl 4
-	ldr	w0, [x19,4]
+.L1702:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldr	x0, [x19,1264]
+	add	x20, x0, x20, lsl 4
+	ldr	w0, [x20,4]
 	cmn	w0, #1
-	beq	.L1696
+	beq	.L1711
 	add	w0, w0, 1
-	str	w0, [x19,4]
-	b	.L1696
-.L1699:
+	str	w0, [x20,4]
+	b	.L1711
+.L1714:
 	bl	select_l2p_ram_region
-	uxth	x19, w0
-	ubfiz	x22, x19, 4, 16
+	uxth	x20, w0
+	ubfiz	x22, x20, 4, 16
 	mov	w2, 65535
-	add	x1, x20, x22
-	ldrh	w3, [x20,x22]
+	add	x1, x21, x22
+	ldrh	w3, [x21,x22]
 	cmp	w3, w2
-	beq	.L1691
+	beq	.L1705
 	ldr	w1, [x1,4]
-	tbz	w1, #31, .L1691
+	tbz	w1, #31, .L1705
 	bl	flush_l2p_region
-.L1691:
-	add	x20, x21, :lo12:.LANCHOR2
-	ubfiz	x0, x25, 2, 16
-	ldr	x1, [x20,1240]
-	ldr	w24, [x1,x0]
-	cbnz	w24, .L1692
-	ldr	x0, [x20,1264]
+.L1705:
+	add	x21, x19, :lo12:.LANCHOR2
+	ubfiz	x0, x24, 2, 16
+	ldr	x1, [x21,1240]
+	ldr	w27, [x1,x0]
+	cbnz	w27, .L1706
+	ldr	x0, [x21,1264]
 	mov	w1, 255
-	ldrh	w2, [x20,828]
+	ldrh	w2, [x21,828]
 	add	x0, x0, x22
 	ldr	x0, [x0,8]
 	bl	ftl_memset
-	ldr	x0, [x20,1264]
-	strh	w25, [x0,x22]
-	ldr	x0, [x20,1264]
+	ldr	x0, [x21,1264]
+	strh	w24, [x0,x22]
+	ldr	x0, [x21,1264]
 	add	x22, x0, x22
-	str	w24, [x22,4]
-	b	.L1686
-.L1692:
-	ldr	x1, [x20,1264]
-	add	x0, x20, 1408
-	str	w24, [x0,4]
-	add	x1, x1, x22
-	ldr	x1, [x1,8]
-	str	x1, [x0,8]
-	ldr	x1, [x20,1112]
-	str	x1, [x0,16]
+	str	w27, [x22,4]
+	b	.L1700
+.L1706:
+	ldr	x0, [x21,1264]
+	add	x3, x21, 1408
 	mov	w1, 1
+	str	x3, [x29,104]
+	add	x0, x0, x22
 	mov	w2, w1
+	str	w27, [x21,1412]
+	ldr	x0, [x0,8]
+	str	x0, [x21,1416]
+	ldr	x0, [x21,1112]
+	str	x0, [x21,1424]
+	mov	x0, x3
 	bl	FlashReadPages
-	ldr	w0, [x20,1408]
+	ldr	w0, [x21,1408]
+	ldr	x3, [x29,104]
 	cmp	w0, 256
-	bne	.L1693
-	and	w28, w28, 65535
+	ldr	x4, [x3,16]
+	bne	.L1707
+	and	w3, w28, 65535
 	adrp	x0, .LC42
-	mov	w2, w24
-	mov	w1, w28
+	mov	w1, w3
+	mov	w2, w27
 	add	x0, x0, :lo12:.LC42
-	lsr	w24, w24, 10
+	str	x4, [x29,96]
+	str	x3, [x29,104]
 	bl	printk
-	strh	w24, [x20,3812]
-	add	x0, x20, 3752
-	ldr	x2, [x20,1264]
-	mov	w1, w28
+	add	x0, x21, 3752
+	ldr	x2, [x21,1264]
+	lsr	w1, w27, 10
+	ldr	x3, [x29,104]
 	add	x2, x2, x22
+	strh	w1, [x0,60]
+	mov	w1, w3
 	ldr	x2, [x2,8]
 	bl	FtlMapWritePage
-.L1693:
-	add	x1, x21, :lo12:.LANCHOR2
+	ldr	x4, [x29,96]
+.L1707:
+	ldrh	w0, [x4,8]
+	cmp	w0, w24
+	beq	.L1708
+	adrp	x0, .LC43
+	add	x21, x19, :lo12:.LANCHOR2
+	uxth	w1, w28
+	mov	w2, w27
+	add	x0, x0, :lo12:.LC43
+	bl	printk
+	mov	w2, 4
+	ldr	x1, [x21,1424]
+	adrp	x0, .LC17
+	mov	w3, w2
+	add	x0, x0, :lo12:.LC17
+	bl	rknand_print_hex
+	adrp	x0, .LC44
+	ldr	x1, [x21,1240]
+	ldrh	w3, [x21,856]
+	add	x0, x0, :lo12:.LC44
+	mov	w2, 4
+	bl	rknand_print_hex
+	mov	w0, 1
+	str	w0, [x21,1400]
+.L1708:
+	add	x1, x19, :lo12:.LANCHOR2
 	ldr	x0, [x1,1264]
 	add	x0, x0, x22
 	str	wzr, [x0,4]
 	ldr	x0, [x1,1264]
-	strh	w25, [x0,x22]
-	b	.L1686
-.L1696:
+	strh	w24, [x0,x22]
+	b	.L1700
+.L1711:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 112
 	ret
 	.size	log2phys, .-log2phys
 	.align	2
@@ -10655,12 +10783,12 @@ FtlVendorPartWrite:
 	mov	x24, x2
 	ldrh	w23, [x19,826]
 	mov	w21, -1
-	bhi	.L1701
+	bhi	.L1716
 	lsr	w23, w25, w23
 	mov	w21, 0
 	add	x27, x19, 3824
-.L1702:
-	cbz	w22, .L1701
+.L1717:
+	cbz	w22, .L1716
 	ldrh	w1, [x19,824]
 	ldr	x0, [x19,1232]
 	udiv	w26, w25, w1
@@ -10672,8 +10800,8 @@ FtlVendorPartWrite:
 	cmp	w20, w22
 	csel	w20, w0, w20, hi
 	cmp	w20, w1
-	beq	.L1704
-	cbz	w2, .L1704
+	beq	.L1719
+	cbz	w2, .L1719
 	ldr	x0, [x19,1064]
 	mov	w1, 1
 	str	w2, [x29,108]
@@ -10682,13 +10810,13 @@ FtlVendorPartWrite:
 	add	x0, x29, 104
 	str	xzr, [x29,120]
 	bl	FlashReadPages
-	b	.L1705
-.L1704:
+	b	.L1720
+.L1719:
 	ldr	x0, [x19,1064]
 	mov	w1, 0
 	ldrh	w2, [x19,828]
 	bl	ftl_memset
-.L1705:
+.L1720:
 	ldr	x0, [x19,1064]
 	lsl	w28, w20, 9
 	ubfiz	x26, x26, 9, 16
@@ -10706,8 +10834,8 @@ FtlVendorPartWrite:
 	bl	FtlMapWritePage
 	cmn	w0, #1
 	csinv	w21, w21, wzr, ne
-	b	.L1702
-.L1701:
+	b	.L1717
+.L1716:
 	mov	w0, w21
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10738,16 +10866,16 @@ FtlVendorPartRead:
 	ldrh	w20, [x3,826]
 	cmp	w2, w1
 	mov	w0, -1
-	bhi	.L1716
-	adrp	x26, .LC43
+	bhi	.L1731
+	adrp	x26, .LC45
 	add	x0, x3, 3824
 	lsr	w20, w23, w20
 	mov	w21, 0
 	mov	x28, x3
-	add	x26, x26, :lo12:.LC43
+	add	x26, x26, :lo12:.LC45
 	str	x0, [x29,104]
-.L1717:
-	cbz	w22, .L1725
+.L1732:
+	cbz	w22, .L1740
 	ldrh	w19, [x28,824]
 	ldr	x0, [x28,1232]
 	udiv	w24, w23, w19
@@ -10759,7 +10887,7 @@ FtlVendorPartRead:
 	cmp	w19, w22
 	csel	w19, w0, w19, hi
 	lsl	w27, w19, 9
-	cbz	w4, .L1719
+	cbz	w4, .L1734
 	ldr	x0, [x28,1064]
 	mov	w1, 1
 	str	x0, [x29,128]
@@ -10775,7 +10903,7 @@ FtlVendorPartRead:
 	ldr	w0, [x28,1408]
 	csinv	w21, w21, wzr, ne
 	cmp	w0, 256
-	bne	.L1721
+	bne	.L1736
 	mov	w1, w20
 	mov	w2, w4
 	mov	x0, x26
@@ -10784,28 +10912,28 @@ FtlVendorPartRead:
 	mov	w1, w20
 	ldr	x2, [x28,1064]
 	bl	FtlMapWritePage
-.L1721:
+.L1736:
 	ldr	x1, [x28,1064]
 	ubfiz	x24, x24, 9, 16
 	mov	x0, x25
 	mov	w2, w27
 	add	x1, x1, x24
 	bl	ftl_memcpy
-	b	.L1722
-.L1719:
+	b	.L1737
+.L1734:
 	mov	x0, x25
 	mov	w1, w4
 	mov	w2, w27
 	bl	ftl_memset
-.L1722:
+.L1737:
 	add	w20, w20, 1
 	sub	w22, w22, w19
 	add	w23, w23, w19
 	add	x25, x25, x27, sxtw
-	b	.L1717
-.L1725:
+	b	.L1732
+.L1740:
 	mov	w0, w21
-.L1716:
+.L1731:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -10843,13 +10971,13 @@ FtlUpdateVaildLpn:
 	adrp	x1, .LANCHOR2
 	add	x3, x1, :lo12:.LANCHOR2
 	ldrh	w2, [x3,3888]
-	cbnz	w0, .L1729
+	cbnz	w0, .L1744
 	cmp	w2, 4
-	bhi	.L1729
+	bhi	.L1744
 	add	w2, w2, 1
 	strh	w2, [x3,3888]
-	b	.L1728
-.L1729:
+	b	.L1743
+.L1744:
 	add	x0, x1, :lo12:.LANCHOR2
 	mov	w7, 65535
 	strh	wzr, [x0,3888]
@@ -10857,20 +10985,20 @@ FtlUpdateVaildLpn:
 	ldrh	w5, [x0,756]
 	ldr	x6, [x0,1184]
 	mov	x0, 0
-.L1730:
+.L1745:
 	cmp	w5, w0, uxth
-	bls	.L1728
+	bls	.L1743
 	ldrh	w4, [x6,x0,lsl 1]
 	cmp	w4, w7
-	beq	.L1731
+	beq	.L1746
 	add	x3, x1, :lo12:.LANCHOR2
 	ldr	w2, [x3,3892]
 	add	w2, w4, w2
 	str	w2, [x3,3892]
-.L1731:
+.L1746:
 	add	x0, x0, 1
-	b	.L1730
-.L1728:
+	b	.L1745
+.L1743:
 	ret
 	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
 	.align	2
@@ -10884,13 +11012,13 @@ FtlMapBlkWriteDumpData:
 	ldr	w1, [x0,56]
 	ldrh	w19, [x0,6]
 	ldr	x4, [x0,40]
-	cbz	w1, .L1734
+	cbz	w1, .L1749
 	adrp	x1, .LANCHOR2
 	str	wzr, [x0,56]
 	add	x2, x1, :lo12:.LANCHOR2
 	mov	x21, x1
 	ldr	w3, [x2,1400]
-	cbnz	w3, .L1734
+	cbnz	w3, .L1749
 	mov	x20, x0
 	sub	w19, w19, #1
 	add	x0, x2, 1408
@@ -10902,23 +11030,23 @@ FtlMapBlkWriteDumpData:
 	str	x1, [x0,8]
 	ldr	w3, [x4,x3]
 	str	w3, [x0,4]
-	cbz	w3, .L1738
+	cbz	w3, .L1753
 	mov	w1, 1
 	mov	w2, w1
 	bl	FlashReadPages
-	b	.L1739
-.L1738:
+	b	.L1754
+.L1753:
 	ldrh	w2, [x2,828]
 	mov	x0, x1
 	mov	w1, 255
 	bl	ftl_memset
-.L1739:
+.L1754:
 	add	x2, x21, :lo12:.LANCHOR2
 	mov	x0, x20
 	mov	w1, w19
 	ldr	x2, [x2,1416]
 	bl	FtlMapWritePage
-.L1734:
+.L1749:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -10937,7 +11065,7 @@ FtlVpcTblFlush:
 	add	x19, x22, :lo12:.LANCHOR2
 	stp	x23, x24, [sp,48]
 	ldr	w0, [x19,1400]
-	cbnz	w0, .L1742
+	cbnz	w0, .L1757
 	ldr	x21, [x19,1112]
 	add	x20, x19, 3520
 	ldr	x1, [x19,1048]
@@ -11017,7 +11145,7 @@ FtlVpcTblFlush:
 	ldr	x1, [x1,#:lo12:.LANCHOR0+16]
 	bl	ftl_memcpy
 	ldrh	w0, [x19,860]
-	cbz	w0, .L1743
+	cbz	w0, .L1758
 	ldrh	w0, [x19,756]
 	ldrh	w2, [x19,856]
 	lsr	w1, w0, 3
@@ -11029,14 +11157,14 @@ FtlVpcTblFlush:
 	add	x0, x1, x0
 	ldr	x1, [x19,1240]
 	bl	ftl_memcpy
-.L1743:
+.L1758:
 	add	x19, x22, :lo12:.LANCHOR2
 	mov	w0, 0
 	mov	w23, 0
 	mov	w25, 65535
 	add	x20, x19, 1408
 	bl	FtlUpdateVaildLpn
-.L1744:
+.L1759:
 	ldr	x0, [x19,1048]
 	str	x0, [x20,8]
 	ldr	x0, [x19,1112]
@@ -11054,7 +11182,7 @@ FtlVpcTblFlush:
 	ldrh	w1, [x19,3898]
 	sub	w0, w0, #1
 	cmp	w1, w0
-	blt	.L1745
+	blt	.L1760
 	ldrh	w0, [x19,3896]
 	ldrh	w25, [x19,3900]
 	strh	wzr, [x19,3898]
@@ -11074,45 +11202,45 @@ FtlVpcTblFlush:
 	mov	w3, w1
 	mov	x0, x20
 	bl	FlashProgPages
-.L1745:
+.L1760:
 	ldrh	w1, [x19,3898]
 	ldr	w2, [x20]
 	add	w1, w1, 1
 	cmn	w2, #1
 	uxth	w1, w1
 	strh	w1, [x19,3898]
-	bne	.L1746
+	bne	.L1761
 	cmp	w1, 1
-	bne	.L1747
+	bne	.L1762
 	ldrh	w1, [x19,820]
 	sub	w1, w1, #1
 	strh	w1, [x19,3898]
-.L1747:
+.L1762:
 	add	w23, w23, 1
 	uxth	w23, w23
 	cmp	w23, 3
-	bls	.L1744
+	bls	.L1759
 	add	x22, x22, :lo12:.LANCHOR2
-	adrp	x0, .LC44
-	add	x0, x0, :lo12:.LC44
+	adrp	x0, .LC46
+	add	x0, x0, :lo12:.LC46
 	mov	w2, w23
 	ldr	w1, [x22,1412]
 	bl	printk
 	mov	w0, 1
 	str	w0, [x22,1400]
-	b	.L1742
-.L1746:
+	b	.L1757
+.L1761:
 	cmp	w1, 1
-	beq	.L1744
+	beq	.L1759
 	cmp	w2, 256
-	beq	.L1744
+	beq	.L1759
 	mov	w0, 65535
 	cmp	w25, w0
-	beq	.L1742
+	beq	.L1757
 	mov	w0, w25
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L1742:
+.L1757:
 	mov	w0, 0
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -11163,19 +11291,19 @@ FtlScanSysBlk:
 	mov	w2, 12
 	bl	ftl_memset
 	ldrh	w21, [x20,756]
-.L1754:
+.L1769:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,758]
 	cmp	w0, w21
-	bls	.L1795
+	bls	.L1810
 	mov	x27, 0
 	ldrh	w3, [x1,748]
 	ldrh	w2, [x1,830]
 	mov	w20, w27
 	mov	x23, x1
-.L1796:
+.L1811:
 	cmp	w3, w27, uxth
-	bls	.L1829
+	bls	.L1844
 	add	x0, x23, 776
 	mov	w1, w21
 	str	x2, [x29,112]
@@ -11186,7 +11314,7 @@ FtlScanSysBlk:
 	bl	FtlBbmIsBadBlock
 	ldr	x3, [x29,120]
 	ldr	x2, [x29,112]
-	cbnz	w0, .L1755
+	cbnz	w0, .L1770
 	mov	w0, 56
 	ldr	x1, [x23,992]
 	lsl	w28, w28, 10
@@ -11205,11 +11333,11 @@ FtlScanSysBlk:
 	ldr	x4, [x23,1128]
 	add	x1, x4, x1, sxtw 2
 	str	x1, [x0,16]
-.L1755:
+.L1770:
 	add	x27, x27, 1
-	b	.L1796
-.L1829:
-	cbz	w20, .L1758
+	b	.L1811
+.L1844:
+	cbz	w20, .L1773
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, w20
 	mov	w2, 1
@@ -11218,9 +11346,9 @@ FtlScanSysBlk:
 	adrp	x28, .LANCHOR0
 	ldr	x0, [x0,992]
 	bl	FlashReadPages
-.L1759:
+.L1774:
 	cmp	w20, w23, uxth
-	bls	.L1758
+	bls	.L1773
 	add	x0, x19, :lo12:.LANCHOR2
 	mul	x5, x23, x26
 	ldr	x0, [x0,992]
@@ -11230,9 +11358,9 @@ FtlScanSysBlk:
 	cmn	w0, #1
 	ldr	x25, [x1,16]
 	ubfx	x24, x4, 10, 16
-	bne	.L1761
+	bne	.L1776
 	mov	w6, 16
-.L1760:
+.L1775:
 	add	x7, x19, :lo12:.LANCHOR2
 	str	x6, [x29,104]
 	str	x7, [x29,112]
@@ -11253,44 +11381,44 @@ FtlScanSysBlk:
 	ldr	x5, [x29,120]
 	ldr	x6, [x29,104]
 	ldr	x0, [x7,992]
-	bne	.L1762
+	bne	.L1777
 	str	w27, [x0,x5]
-	b	.L1761
-.L1762:
+	b	.L1776
+.L1777:
 	ldr	w0, [x0,x5]
 	cmn	w0, #1
-	bne	.L1761
+	bne	.L1776
 	sub	w6, w6, #1
 	uxth	w6, w6
-	cbnz	w6, .L1760
-.L1761:
+	cbnz	w6, .L1775
+.L1776:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	x1, [x0,992]
 	ldr	w1, [x1,x5]
 	cmn	w1, #1
-	beq	.L1764
+	beq	.L1779
 	ldr	w0, [x0,872]
 	cmn	w0, #1
-	beq	.L1765
+	beq	.L1780
 	ldr	w1, [x25,4]
 	cmp	w0, w1
-	bhi	.L1766
-.L1765:
+	bhi	.L1781
+.L1780:
 	ldr	w0, [x25,4]
 	cmn	w0, #1
-	beq	.L1766
+	beq	.L1781
 	add	x1, x19, :lo12:.LANCHOR2
 	add	w0, w0, 1
 	str	w0, [x1,872]
-.L1766:
+.L1781:
 	ldrh	w0, [x25]
 	mov	w1, 61604
 	cmp	w0, w1
-	beq	.L1768
-	bhi	.L1769
+	beq	.L1783
+	bhi	.L1784
 	mov	w1, 61574
 	cmp	w0, w1
-	bne	.L1767
+	bne	.L1782
 	add	x5, x19, :lo12:.LANCHOR2
 	ldrh	w6, [x5,840]
 	ldrh	w0, [x5,1392]
@@ -11298,16 +11426,16 @@ FtlScanSysBlk:
 	ldr	x5, [x5,1224]
 	sxth	x1, w2
 	sub	w2, w2, w0
-	b	.L1782
-.L1769:
+	b	.L1797
+.L1784:
 	mov	w1, 61634
 	cmp	w0, w1
-	beq	.L1771
+	beq	.L1786
 	cmp	w0, w22
-	bne	.L1767
+	bne	.L1782
 	mov	w0, w24
-	b	.L1828
-.L1771:
+	b	.L1843
+.L1786:
 	add	x5, x19, :lo12:.LANCHOR2
 	ldr	w6, [x5,848]
 	ldrh	w0, [x5,3908]
@@ -11318,27 +11446,27 @@ FtlScanSysBlk:
 	sub	w2, w2, #1
 	sxth	x1, w1
 	sxth	w2, w2
-.L1773:
+.L1788:
 	cmp	w1, w2
-	ble	.L1830
+	ble	.L1845
 	sbfiz	x7, x1, 2, 32
 	ldr	w10, [x25,4]
 	sxth	x8, w1
 	ldr	w9, [x5,x7]
 	cmp	w10, w9
-	bls	.L1774
+	bls	.L1789
 	ldr	w2, [x5]
-	cbnz	w2, .L1775
+	cbnz	w2, .L1790
 	cmp	w0, w6
-	beq	.L1775
+	beq	.L1790
 	add	x2, x19, :lo12:.LANCHOR2
 	add	w0, w0, 1
 	strh	w0, [x2,3908]
-.L1775:
+.L1790:
 	mov	w0, 0
-.L1776:
+.L1791:
 	cmp	w0, w1
-	beq	.L1831
+	beq	.L1846
 	add	x5, x19, :lo12:.LANCHOR2
 	sxtw	x2, w0
 	lsl	x6, x2, 2
@@ -11353,31 +11481,31 @@ FtlScanSysBlk:
 	add	x6, x5, x2
 	ldrh	w6, [x6,2]
 	strh	w6, [x5,x2]
-	b	.L1776
-.L1831:
+	b	.L1791
+.L1846:
 	add	x2, x19, :lo12:.LANCHOR2
 	ldr	w5, [x25,4]
 	ldr	x0, [x2,1256]
 	str	w5, [x0,x7]
 	ldr	x0, [x2,1192]
 	strh	w24, [x0,x8,lsl 1]
-	tbz	w1, #31, .L1778
-	b	.L1767
-.L1774:
+	tbz	w1, #31, .L1793
+	b	.L1782
+.L1789:
 	sub	w1, w1, #1
 	sxth	x1, w1
-	b	.L1773
-.L1830:
-	tbz	w1, #31, .L1811
-	b	.L1767
-.L1778:
+	b	.L1788
+.L1845:
+	tbz	w1, #31, .L1826
+	b	.L1782
+.L1793:
 	ldrh	w0, [x2,3908]
 	ldr	w2, [x2,848]
 	sub	w2, w2, w0
 	sub	w2, w2, #1
 	cmp	w1, w2, sxth
-	bgt	.L1767
-.L1811:
+	bgt	.L1782
+.L1826:
 	add	x2, x19, :lo12:.LANCHOR2
 	add	w0, w0, 1
 	ldr	w3, [x25,4]
@@ -11385,33 +11513,33 @@ FtlScanSysBlk:
 	ldr	x0, [x2,1256]
 	str	w3, [x0,x1,lsl 2]
 	ldr	x0, [x2,1192]
-	b	.L1827
-.L1788:
+	b	.L1842
+.L1803:
 	sbfiz	x7, x1, 2, 32
 	ldr	w10, [x25,4]
 	sxth	x8, w1
 	ldr	w9, [x5,x7]
 	cmp	w10, w9
-	bhi	.L1832
+	bhi	.L1847
 	sub	w1, w1, #1
 	sxth	x1, w1
-.L1782:
+.L1797:
 	cmp	w1, w2
-	bgt	.L1788
-	b	.L1787
-.L1832:
+	bgt	.L1803
+	b	.L1802
+.L1847:
 	ldr	w2, [x5]
-	cbnz	w2, .L1784
+	cbnz	w2, .L1799
 	cmp	w0, w6
-	beq	.L1784
+	beq	.L1799
 	add	x2, x19, :lo12:.LANCHOR2
 	add	w0, w0, 1
 	strh	w0, [x2,1392]
-.L1784:
+.L1799:
 	mov	w0, 0
-.L1785:
+.L1800:
 	cmp	w0, w1
-	beq	.L1833
+	beq	.L1848
 	add	x5, x19, :lo12:.LANCHOR2
 	sxtw	x2, w0
 	lsl	x6, x2, 2
@@ -11426,105 +11554,105 @@ FtlScanSysBlk:
 	add	x6, x5, x2
 	ldrh	w6, [x6,2]
 	strh	w6, [x5,x2]
-	b	.L1785
-.L1833:
+	b	.L1800
+.L1848:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w5, [x25,4]
 	ldr	x2, [x0,1224]
 	str	w5, [x2,x7]
 	ldr	x0, [x0,1208]
 	strh	w24, [x0,x8,lsl 1]
-.L1787:
-	tbnz	w1, #31, .L1767
+.L1802:
+	tbnz	w1, #31, .L1782
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x0,840]
 	ldrh	w5, [x0,1392]
 	sub	w2, w2, #1
 	sub	w2, w2, w5
 	cmp	w1, w2, sxth
-	bgt	.L1767
+	bgt	.L1782
 	ldr	x2, [x0,1224]
 	add	w5, w5, 1
 	ldr	w3, [x25,4]
 	strh	w5, [x0,1392]
 	str	w3, [x2,x1,lsl 2]
 	ldr	x0, [x0,1208]
-.L1827:
+.L1842:
 	strh	w24, [x0,x1,lsl 1]
-	b	.L1767
-.L1768:
+	b	.L1782
+.L1783:
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x1, x0, 3896
 	ldrh	w2, [x0,3896]
 	cmp	w2, w22
-	bne	.L1789
+	bne	.L1804
 	strh	w24, [x0,3896]
 	ldr	w0, [x25,4]
 	str	w0, [x1,8]
-	b	.L1767
-.L1789:
+	b	.L1782
+.L1804:
 	ldrh	w0, [x1,4]
 	cmp	w0, w22
-	beq	.L1790
+	beq	.L1805
 	mov	w1, 1
 	bl	FtlFreeSysBlkQueueIn
-.L1790:
+.L1805:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w2, [x25,4]
 	add	x0, x1, 3896
 	ldr	w5, [x0,8]
 	cmp	w5, w2
-	bcs	.L1791
+	bcs	.L1806
 	ldrh	w2, [x1,3896]
 	strh	w2, [x0,4]
 	strh	w24, [x1,3896]
 	ldr	w1, [x25,4]
 	str	w1, [x0,8]
-	b	.L1767
-.L1791:
+	b	.L1782
+.L1806:
 	strh	w24, [x0,4]
-	b	.L1767
-.L1764:
+	b	.L1782
+.L1779:
 	add	x0, x28, :lo12:.LANCHOR0
 	ldrb	w1, [x0,136]
 	mov	w0, w24
-	cbz	w1, .L1792
-.L1828:
+	cbz	w1, .L1807
+.L1843:
 	mov	w1, 0
-.L1792:
+.L1807:
 	bl	FtlFreeSysBlkQueueIn
-.L1767:
+.L1782:
 	add	x23, x23, 1
-	b	.L1759
-.L1758:
+	b	.L1774
+.L1773:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L1754
-.L1795:
+	b	.L1769
+.L1810:
 	ldr	x2, [x1,1192]
 	ldrh	w0, [x2]
-	cbz	w0, .L1797
-.L1800:
+	cbz	w0, .L1812
+.L1815:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	x2, [x1,1208]
 	ldrh	w0, [x2]
-	cbz	w0, .L1798
-	b	.L1821
-.L1797:
+	cbz	w0, .L1813
+	b	.L1836
+.L1812:
 	ldrh	w3, [x1,3908]
-	cbz	w3, .L1800
+	cbz	w3, .L1815
 	ldr	w1, [x1,848]
-.L1801:
+.L1816:
 	cmp	w0, w1
-	bcs	.L1800
+	bcs	.L1815
 	ldrh	w3, [x2,w0,sxtw 1]
-	cbz	w3, .L1802
+	cbz	w3, .L1817
 	mov	w6, w0
-.L1803:
+.L1818:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w2, [x1,848]
 	cmp	w0, w2
-	bcs	.L1800
+	bcs	.L1815
 	sxtw	x5, w0
 	sub	w2, w0, w6
 	ldr	x4, [x1,1192]
@@ -11539,26 +11667,26 @@ FtlScanSysBlk:
 	str	w5, [x4,x2,lsl 2]
 	ldr	x1, [x1,1192]
 	strh	wzr, [x1,x3]
-	b	.L1803
-.L1802:
+	b	.L1818
+.L1817:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L1801
-.L1798:
+	b	.L1816
+.L1813:
 	ldrh	w3, [x1,1392]
-	cbz	w3, .L1821
+	cbz	w3, .L1836
 	ldrh	w1, [x1,840]
-.L1806:
+.L1821:
 	cmp	w0, w1
 	mov	w6, w0
-	bge	.L1821
+	bge	.L1836
 	ldrh	w3, [x2,w0,sxtw 1]
-	cbz	w3, .L1807
-.L1808:
+	cbz	w3, .L1822
+.L1823:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x1,840]
 	cmp	w0, w2
-	bge	.L1821
+	bge	.L1836
 	sxtw	x5, w0
 	sub	w2, w0, w6
 	ldr	x4, [x1,1208]
@@ -11573,12 +11701,12 @@ FtlScanSysBlk:
 	str	w5, [x4,x2,lsl 2]
 	ldr	x1, [x1,1208]
 	strh	wzr, [x1,x3]
-	b	.L1808
-.L1807:
+	b	.L1823
+.L1822:
 	add	w0, w0, 1
 	sxth	w0, w0
-	b	.L1806
-.L1821:
+	b	.L1821
+.L1836:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -11606,18 +11734,18 @@ FtlLoadEctTbl:
 	mov	w0, 17221
 	movk	w0, 0x4254, lsl 16
 	cmp	w1, w0
-	beq	.L1835
-	adrp	x0, .LC45
-	adrp	x1, .LC46
-	add	x1, x1, :lo12:.LC46
-	add	x0, x0, :lo12:.LC45
+	beq	.L1850
+	adrp	x0, .LC47
+	adrp	x1, .LC48
+	add	x1, x1, :lo12:.LC48
+	add	x0, x0, :lo12:.LC47
 	bl	printk
 	ldrh	w2, [x19,1144]
 	mov	w1, 0
 	ldr	x0, [x19,1160]
 	lsl	w2, w2, 9
 	bl	ftl_memset
-.L1835:
+.L1850:
 	mov	w0, 0
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -11630,10 +11758,10 @@ ftl_set_blk_mode:
 	stp	x29, x30, [sp, -16]!
 	uxth	w0, w0
 	add	x29, sp, 0
-	cbz	w1, .L1837
+	cbz	w1, .L1852
 	bl	ftl_set_blk_mode.part.17
-	b	.L1836
-.L1837:
+	b	.L1851
+.L1852:
 	adrp	x1, .LANCHOR0+16
 	ubfx	x2, x0, 5, 11
 	lsl	x2, x2, 2
@@ -11643,7 +11771,7 @@ ftl_set_blk_mode:
 	ldr	w1, [x3,x2]
 	bic	w0, w1, w0
 	str	w0, [x3,x2]
-.L1836:
+.L1851:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
@@ -11661,301 +11789,645 @@ ftl_get_blk_mode:
 	ret
 	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
 	.align	2
-	.global	FtlMapTblRecovery
-	.type	FtlMapTblRecovery, %function
-FtlMapTblRecovery:
-	stp	x29, x30, [sp, -128]!
-	mov	w1, 0
+	.global	FtlCheckVpc
+	.type	FtlCheckVpc, %function
+FtlCheckVpc:
+	stp	x29, x30, [sp, -96]!
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC49
+	add	x1, x1, :lo12:.LANCHOR3
 	add	x29, sp, 0
+	add	x1, x1, 16
+	add	x0, x0, :lo12:.LC49
+	str	x25, [sp,64]
 	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	mov	w20, 0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	mov	x19, x0
-	adrp	x21, .LANCHOR2
-	ldr	x0, [x0,40]
-	mov	w26, 0
-	str	x0, [x29,120]
-	ldrh	w23, [x19,6]
-	ldrh	w0, [x19,8]
-	str	w0, [x29,116]
-	lsl	w2, w23, 2
-	ldr	x0, [x29,120]
-	ldr	x22, [x19,16]
-	ldr	x25, [x19,24]
-	bl	ftl_memset
-	str	wzr, [x19,52]
-	add	x1, x21, :lo12:.LANCHOR2
-	str	wzr, [x19,48]
-	add	x6, x1, 1408
-	mov	x27, x1
-	mov	x24, x6
-	ldr	x0, [x1,1048]
-	ldr	x20, [x1,1112]
-	str	x0, [x1,1416]
-	mov	w0, -1
-	str	x20, [x1,1424]
-	strh	w0, [x19]
-	strh	w0, [x19,2]
-	mov	w0, 1
-	str	w0, [x19,56]
-	ldr	w0, [x29,116]
-	sub	w0, w0, #1
-	str	w0, [x29,112]
-.L1841:
-	ldr	w0, [x29,116]
-	cmp	w26, w0
-	bge	.L1858
-	ldr	w0, [x29,112]
-	sxtw	x28, w26
-	cmp	w26, w0
-	bne	.L1842
-	lsl	x0, x28, 1
-	mov	w1, 1
+	add	x19, x19, :lo12:.LANCHOR2
+	bl	printk
+	add	x0, x19, 3912
+	mov	w1, 0
+	mov	x2, 8192
+	bl	memset
+.L1856:
+	ldr	w0, [x19,1396]
+	cmp	w20, w0
+	bcs	.L1873
+	mov	w0, w20
+	add	x1, x29, 92
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x29,92]
+	cmn	w0, #1
+	beq	.L1857
+	lsr	w0, w0, 10
+	bl	P2V_block_in_plane
+	uxth	w0, w0
+	add	x2, x19, 3912
+	ldrh	w1, [x2,w0,sxtw 1]
+	add	w1, w1, 1
+	strh	w1, [x2,w0,sxtw 1]
+.L1857:
+	add	w20, w20, 1
+	b	.L1856
+.L1873:
+	ldr	x1, [x19,1184]
+	adrp	x0, .LC50
+	ldrh	w3, [x19,756]
+	add	x0, x0, :lo12:.LC50
+	mov	w2, 2
+	adrp	x21, .LC52
+	mov	w20, 0
+	add	x21, x21, :lo12:.LC52
+	bl	rknand_print_hex
+	adrp	x0, .LC51
+	ldrh	w3, [x19,756]
+	add	x0, x0, :lo12:.LC51
+	add	x1, x19, 3912
+	mov	w2, 2
+	bl	rknand_print_hex
+.L1859:
+	ldrh	w0, [x19,756]
+	cmp	w0, w20
+	bls	.L1874
+	ubfiz	x0, x20, 1, 16
+	ldr	x1, [x19,1184]
+	ldrh	w2, [x1,x0]
+	add	x0, x19, 3912
+	ldrh	w3, [x0,w20,sxtw 1]
+	cmp	w2, w3
+	beq	.L1860
+	mov	x0, x21
+	mov	w1, w20
+	bl	printk
+.L1860:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L1859
+.L1874:
+	ldr	x0, [x19,3592]
+	cbz	x0, .L1855
+	ldr	x20, [x19,1280]
+	adrp	x22, .LC53
+	ldrh	w23, [x19,3600]
+	mov	w21, 0
+	sub	x20, x0, x20
+	mov	x0, -6148914691236517206
+	asr	x20, x20, 1
+	add	x22, x22, :lo12:.LC53
+	mov	w24, 6
+	mov	w25, 65535
+	madd	x20, x0, x20, x20
+	uxth	w20, w20
+.L1863:
+	cmp	w21, w23
+	beq	.L1855
+	ubfiz	x0, x20, 1, 16
+	ldr	x1, [x19,1184]
+	ldrh	w2, [x1,x0]
+	cbz	w2, .L1864
+	add	x3, x19, 3912
+	mov	x0, x22
+	mov	w1, w20
+	ldrh	w3, [x3,w20,sxtw 1]
+	bl	printk
+.L1864:
+	umull	x20, w20, w24
+	ldr	x0, [x19,1280]
+	ldrh	w20, [x0,x20]
+	cmp	w20, w25
+	beq	.L1855
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L1863
+.L1855:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlCheckVpc, .-FtlCheckVpc
+	.align	2
+	.global	FtlDumpSysBlock
+	.type	FtlDumpSysBlock, %function
+FtlDumpSysBlock:
+	sub	sp, sp, #96
+	adrp	x2, .LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR2
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x19, x20, [sp,32]
+	stp	x21, x22, [sp,48]
+	stp	x23, x24, [sp,64]
+	str	x25, [sp,80]
+	add	x19, x2, 1408
+	uxth	w23, w0
+	adrp	x22, .LC54
+	ldr	x0, [x2,1048]
+	adrp	x25, .LC55
+	str	x0, [x19,8]
+	lsl	w24, w23, 10
+	ldr	x0, [x2,1112]
+	mov	w20, 0
+	str	x0, [x19,16]
+	mov	x21, x2
+	add	x22, x22, :lo12:.LC54
+	add	x25, x25, :lo12:.LC55
+.L1876:
+	ldrh	w0, [x21,820]
+	cmp	w20, w0
+	bge	.L1882
+	mov	w1, 1
+	orr	w0, w20, w24
+	mov	w2, w1
+	str	w0, [x19,4]
+	mov	x0, x19
+	bl	FlashReadPages
+	ldr	x0, [x19,8]
+	mov	w1, w23
+	ldr	x7, [x19,16]
+	ldr	w0, [x0]
+	str	w0, [sp]
+	mov	x0, x22
+	ldr	w4, [x7]
+	ldr	w5, [x7,4]
+	ldr	w6, [x7,8]
+	ldr	w2, [x19]
+	ldr	w3, [x19,4]
+	ldr	w7, [x7,12]
+	bl	printk
+	ldr	x0, [x19,16]
+	ldr	w0, [x0]
+	cmn	w0, #1
+	beq	.L1877
+	ldr	x1, [x21,1048]
+	mov	x0, x25
+	mov	w2, 4
+	mov	w3, 768
+	bl	rknand_print_hex
+.L1877:
+	add	w20, w20, 1
+	sxth	w20, w20
+	b	.L1876
+.L1882:
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldr	x25, [sp,80]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 96
+	ret
+	.size	FtlDumpSysBlock, .-FtlDumpSysBlock
+	.align	2
+	.global	Ftlscanalldata
+	.type	Ftlscanalldata, %function
+Ftlscanalldata:
+	sub	sp, sp, #96
+	adrp	x0, .LC56
+	add	x0, x0, :lo12:.LC56
+	mov	w1, 0
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x23, x24, [sp,64]
+	adrp	x23, .LANCHOR2
+	stp	x21, x22, [sp,48]
+	adrp	x21, .LC57
+	add	x22, x23, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,32]
+	add	x21, x21, :lo12:.LC57
+	mov	w20, 0
+	add	x19, x22, 1408
+	bl	printk
+.L1884:
+	add	x0, x23, :lo12:.LANCHOR2
+	ldr	w0, [x0,1396]
+	cmp	w20, w0
+	bcs	.L1891
+	mov	w0, w20
+	add	x1, x29, 76
+	mov	w2, 0
+	bl	log2phys
+	and	w0, w20, 2047
+	cbnz	w0, .L1885
+	ldr	w2, [x29,76]
+	mov	x0, x21
+	mov	w1, w20
+	bl	printk
+.L1885:
+	ldr	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L1887
+	str	w0, [x19,4]
+	mov	w1, 1
+	ldr	x0, [x22,1048]
+	mov	w2, 0
+	str	x0, [x19,8]
+	mov	x0, x19
+	ldr	x24, [x22,1112]
+	str	w20, [x19,24]
+	str	x24, [x19,16]
+	str	wzr, [x19]
+	bl	FlashReadPages
+	ldr	w0, [x19]
+	cmn	w0, #1
+	beq	.L1888
+	cmp	w0, 256
+	beq	.L1888
+	ldr	w0, [x24,8]
+	cmp	w0, w20
+	beq	.L1887
+.L1888:
+	ldr	x7, [x19,8]
+	mov	w1, w20
+	ldr	x6, [x19,16]
+	ldr	w0, [x7,4]
+	str	w0, [sp]
+	adrp	x0, .LC58
+	add	x0, x0, :lo12:.LC58
+	ldr	w3, [x6]
+	ldr	w4, [x6,4]
+	ldr	w5, [x6,8]
+	ldr	w2, [x19,4]
+	ldr	w6, [x6,12]
+	ldr	w7, [x7]
+	bl	printk
+.L1887:
+	add	w20, w20, 1
+	b	.L1884
+.L1891:
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 96
+	ret
+	.size	Ftlscanalldata, .-Ftlscanalldata
+	.align	2
+	.global	dump_map_info
+	.type	dump_map_info, %function
+dump_map_info:
+	sub	sp, sp, #128
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x21, x22, [sp,48]
+	adrp	x22, .LANCHOR2
+	add	x0, x22, :lo12:.LANCHOR2
+	stp	x25, x26, [sp,80]
+	stp	x23, x24, [sp,64]
+	stp	x27, x28, [sp,96]
+	stp	x19, x20, [sp,32]
+	adrp	x24, .LC59
+	mov	w25, 56
+	ldrh	w21, [x0,756]
+	mov	w26, 4
+	mov	x27, 56
+	add	x24, x24, :lo12:.LC59
+.L1893:
+	add	x19, x22, :lo12:.LANCHOR2
+	ldrh	w0, [x19,758]
+	cmp	w0, w21
+	bls	.L1906
+	mov	x23, 0
+	ldrh	w3, [x19,748]
+	ldrh	w2, [x19,830]
+	mov	w20, w23
+.L1902:
+	cmp	w3, w23, uxth
+	bls	.L1907
+	add	x0, x19, 776
+	mov	w1, w21
+	str	x2, [x29,96]
+	str	x3, [x29,104]
+	ldrb	w0, [x0,x23]
+	bl	V2P_block
+	uxth	w28, w0
+	bl	FtlBbmIsBadBlock
+	ldr	x3, [x29,104]
+	ldr	x2, [x29,96]
+	cbnz	w0, .L1894
+	umull	x0, w20, w25
+	ldr	x1, [x19,992]
+	lsl	w28, w28, 10
+	add	x1, x1, x0
+	str	w28, [x1,4]
+	ldr	x1, [x19,992]
+	ldr	x4, [x19,1128]
+	add	x0, x1, x0
+	ldr	x1, [x19,1072]
+	str	x1, [x0,8]
+	mul	w1, w20, w2
+	add	w20, w20, 1
+	sdiv	w1, w1, w26
+	uxth	w20, w20
+	add	x1, x4, x1, sxtw 2
+	str	x1, [x0,16]
+.L1894:
+	add	x23, x23, 1
+	b	.L1902
+.L1907:
+	cbz	w20, .L1897
+	add	x0, x22, :lo12:.LANCHOR2
+	mov	w1, w20
+	mov	w2, 1
+	mov	x19, 0
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+.L1898:
+	cmp	w20, w19, uxth
+	bls	.L1897
+	add	x0, x22, :lo12:.LANCHOR2
+	ldr	x0, [x0,992]
+	madd	x0, x19, x27, x0
+	add	x19, x19, 1
+	ldr	x7, [x0,8]
+	ldr	x6, [x0,16]
+	ldr	w2, [x0,4]
+	ldr	w0, [x7,4]
+	str	w0, [sp]
+	ubfx	x1, x2, 10, 16
+	mov	x0, x24
+	ldr	w3, [x6]
+	ldr	w4, [x6,4]
+	ldr	w5, [x6,8]
+	ldr	w7, [x7]
+	ldr	w6, [x6,12]
+	bl	printk
+	b	.L1898
+.L1897:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L1893
+.L1906:
+	adrp	x23, .LC60
+	mov	w21, 0
+	add	x22, x19, 1408
+	add	x23, x23, :lo12:.LC60
+.L1901:
+	ldrh	w0, [x19,3908]
+	cmp	w21, w0
+	bge	.L1904
+	sbfiz	x24, x21, 1, 32
+	mov	w20, 0
+.L1905:
+	ldrh	w0, [x19,820]
+	cmp	w20, w0
+	bge	.L1908
+	ldr	x0, [x19,1192]
+	mov	w1, 1
+	mov	w2, w1
+	ldrh	w0, [x0,x24]
+	orr	w0, w20, w0, lsl 10
+	str	w0, [x22,4]
+	mov	x0, x22
+	add	w20, w20, 1
+	bl	FlashReadPages
+	sxth	w20, w20
+	ldr	x0, [x22,8]
+	ldr	x1, [x19,1192]
+	ldr	x7, [x22,16]
+	ldr	w2, [x0]
+	ldrh	w1, [x1,x24]
+	str	w2, [sp]
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	mov	x0, x23
+	ldr	w4, [x7]
+	ldr	w5, [x7,4]
+	ldr	w6, [x7,8]
+	ldr	w2, [x22]
+	ldr	w3, [x22,4]
+	ldr	w7, [x7,12]
+	bl	printk
+	b	.L1905
+.L1908:
+	add	w21, w21, 1
+	sxth	w21, w21
+	b	.L1901
+.L1904:
+	ldr	x1, [x19,1192]
+	adrp	x0, .LC61
+	ldr	w3, [x19,848]
+	add	x0, x0, :lo12:.LC61
+	mov	w2, 2
+	bl	rknand_print_hex
+	ldr	x1, [x19,1240]
+	adrp	x0, .LC62
+	ldrh	w3, [x19,856]
+	add	x0, x0, :lo12:.LC62
+	mov	w2, 4
+	bl	rknand_print_hex
+	ldr	x1, [x19,1248]
+	adrp	x0, .LC63
+	ldrh	w3, [x19,856]
+	add	x0, x0, :lo12:.LC63
+	mov	w2, 4
+	bl	rknand_print_hex
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 128
+	ret
+	.size	dump_map_info, .-dump_map_info
+	.align	2
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	stp	x29, x30, [sp, -128]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	adrp	x20, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldrh	w23, [x19,6]
+	mov	w27, 0
+	ldr	x0, [x0,40]
+	lsl	w2, w23, 2
+	ldrh	w24, [x19,8]
+	str	x0, [x29,120]
+	ldr	x22, [x19,16]
+	ldr	x25, [x19,24]
+	bl	ftl_memset
+	add	x5, x20, :lo12:.LANCHOR2
+	str	x20, [x29,112]
+	add	x4, x5, 1408
+	str	wzr, [x19,52]
+	str	wzr, [x19,48]
+	mov	x26, x5
+	ldr	x0, [x5,1048]
+	mov	x20, x4
+	ldr	x21, [x5,1112]
+	str	x0, [x5,1416]
+	mov	w0, -1
+	str	x21, [x5,1424]
+	strh	w0, [x19]
+	strh	w0, [x19,2]
+	mov	w0, 1
+	str	w0, [x19,56]
+	sub	w0, w24, #1
+	str	w0, [x29,108]
+.L1910:
+	cmp	w27, w24
+	bge	.L1927
+	ldr	w0, [x29,108]
+	sxtw	x28, w27
+	cmp	w27, w0
+	bne	.L1911
+	lsl	x0, x28, 1
+	mov	w1, 1
 	add	x24, x22, x0
 	ldrh	w0, [x22,x0]
+	mov	w22, 0
 	bl	FtlGetLastWrittenPage
-	strh	w26, [x19]
-	sxth	w27, w0
+	strh	w27, [x19]
+	sxth	w26, w0
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-	add	x26, x21, :lo12:.LANCHOR2
-	add	w27, w27, 1
-	add	x26, x26, 1408
+	add	w26, w26, 1
 	ldr	w0, [x25,x28,lsl 2]
-	mov	w25, 0
 	str	w0, [x19,48]
-.L1843:
-	cmp	w25, w27
-	bge	.L1858
+	ldr	x0, [x29,112]
+	add	x25, x0, :lo12:.LANCHOR2
+	add	x25, x25, 1408
+.L1912:
+	cmp	w22, w26
+	bge	.L1927
 	ldrh	w0, [x24]
 	mov	w1, 1
 	mov	w2, w1
-	orr	w0, w25, w0, lsl 10
-	str	w0, [x26,4]
-	mov	x0, x26
+	orr	w0, w22, w0, lsl 10
+	str	w0, [x25,4]
+	mov	x0, x25
 	bl	FlashReadPages
-	ldr	w0, [x26]
+	ldr	w0, [x25]
 	cmn	w0, #1
-	beq	.L1844
-	ldrh	w0, [x20,8]
+	beq	.L1913
+	ldrh	w0, [x21,8]
 	cmp	w0, w23
-	bcs	.L1845
-	ldrh	w2, [x20]
+	bcs	.L1914
+	ldrh	w2, [x21]
 	ldrh	w1, [x19,4]
 	cmp	w2, w1
-	bne	.L1845
+	bne	.L1914
 	ubfiz	x0, x0, 2, 16
 	ldr	x2, [x29,120]
-	ldr	w1, [x26,4]
+	ldr	w1, [x25,4]
 	str	w1, [x2,x0]
-	b	.L1845
-.L1844:
+	b	.L1914
+.L1913:
 	ldrh	w0, [x24]
 	strh	w0, [x19,60]
-.L1845:
-	add	w25, w25, 1
-	sxth	w25, w25
-	b	.L1843
-.L1858:
-	add	x20, x21, :lo12:.LANCHOR2
-	add	x0, x20, 3752
-	cmp	x19, x0
-	bne	.L1848
-	b	.L1885
-.L1842:
-	ldr	x0, [x27,1048]
-	lsl	x1, x28, 1
-	str	x0, [x24,8]
-	add	x28, x22, x1
-	ldrh	w0, [x27,820]
-	ldrh	w1, [x22,x1]
-	sub	w0, w0, #1
-	orr	w0, w0, w1, lsl 10
-	mov	w1, 1
-	str	w0, [x24,4]
-	mov	w2, w1
-	mov	x0, x24
-	bl	FlashReadPages
-	ldr	w0, [x24]
+.L1914:
+	add	w22, w22, 1
+	sxth	w22, w22
+	b	.L1912
+.L1927:
+	mov	x0, x19
+	bl	ftl_free_no_use_map_blk
+	ldr	x0, [x29,112]
+	ldrh	w1, [x19,2]
+	add	x20, x0, :lo12:.LANCHOR2
+	ldrh	w0, [x20,820]
+	cmp	w1, w0
+	bne	.L1917
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+	b	.L1917
+.L1911:
+	ldr	x0, [x26,1048]
+	str	x0, [x20,8]
+	lsl	x0, x28, 1
+	add	x28, x22, x0
+	ldrh	w1, [x22,x0]
+	ldrh	w0, [x26,820]
+	sub	w0, w0, #1
+	orr	w0, w0, w1, lsl 10
+	mov	w1, 1
+	str	w0, [x20,4]
+	mov	w2, w1
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	w0, [x20]
 	cmn	w0, #1
-	beq	.L1872
-	ldrh	w1, [x20]
+	beq	.L1928
+	ldrh	w1, [x21]
 	mov	w3, 0
 	ldrh	w0, [x19,4]
 	cmp	w1, w0
-	bne	.L1882
-	ldrh	w0, [x20,8]
+	bne	.L1934
+	ldrh	w0, [x21,8]
 	mov	w1, 64245
 	cmp	w0, w1
-	bne	.L1882
-.L1850:
-	ldrh	w0, [x27,820]
+	bne	.L1934
+.L1919:
+	ldrh	w0, [x26,820]
 	sub	w0, w0, #1
 	cmp	w3, w0
-	bge	.L1853
-	ldr	x0, [x27,1048]
-	sbfiz	x2, x3, 3, 32
-	ldrh	w1, [x0,x2]
-	cmp	w1, w23
-	bcs	.L1851
-	add	x2, x0, x2
-	ubfiz	x1, x1, 2, 16
-	ldr	w0, [x2,4]
+	bge	.L1922
+	ldr	x2, [x26,1048]
+	sbfiz	x1, x3, 3, 32
+	ldrh	w0, [x2,x1]
+	cmp	w0, w23
+	bcs	.L1920
+	add	x1, x2, x1
+	ubfiz	x0, x0, 2, 16
 	ldr	x2, [x29,120]
-	str	w0, [x2,x1]
-.L1851:
+	ldr	w1, [x1,4]
+	str	w1, [x2,x0]
+.L1920:
 	add	w3, w3, 1
 	sxth	w3, w3
-	b	.L1850
-.L1872:
+	b	.L1919
+.L1928:
 	mov	w3, 0
-.L1882:
-	ldrh	w0, [x27,820]
+.L1934:
+	ldrh	w0, [x26,820]
 	cmp	w3, w0
-	bge	.L1853
+	bge	.L1922
 	ldrh	w0, [x28]
 	mov	w1, 1
 	mov	w2, w1
-	str	x3, [x29,104]
+	str	x3, [x29,96]
 	orr	w0, w3, w0, lsl 10
-	str	w0, [x24,4]
-	mov	x0, x24
+	str	w0, [x20,4]
+	mov	x0, x20
 	bl	FlashReadPages
-	ldr	w0, [x24]
-	ldr	x3, [x29,104]
+	ldr	w0, [x20]
+	ldr	x3, [x29,96]
 	cmn	w0, #1
-	beq	.L1854
-	ldrh	w1, [x20,8]
-	cmp	w1, w23
-	bcs	.L1854
-	ldrh	w2, [x20]
-	ldrh	w0, [x19,4]
-	cmp	w2, w0
-	bne	.L1854
-	ubfiz	x1, x1, 2, 16
+	beq	.L1923
+	ldrh	w0, [x21,8]
+	cmp	w0, w23
+	bcs	.L1923
+	ldrh	w2, [x21]
+	ldrh	w1, [x19,4]
+	cmp	w2, w1
+	bne	.L1923
+	ubfiz	x0, x0, 2, 16
 	ldr	x2, [x29,120]
-	ldr	w0, [x24,4]
-	str	w0, [x2,x1]
-.L1854:
+	ldr	w1, [x20,4]
+	str	w1, [x2,x0]
+.L1923:
 	add	w3, w3, 1
 	sxth	w3, w3
-	b	.L1882
-.L1853:
-	add	w4, w26, 1
-	sxth	w26, w4
-	b	.L1841
-.L1870:
-	ubfiz	x23, x24, 2, 32
-	ldr	x0, [x20,1248]
-	ldr	w1, [x0,x23]
-	sub	w2, w1, #1
-	cmn	w2, #3
-	bls	.L1886
-.L1863:
-	add	w24, w24, 1
-.L1861:
-	ldrh	w0, [x20,856]
-	cmp	w24, w0
-	bcc	.L1870
-.L1848:
-	mov	x0, x19
-	add	x21, x21, :lo12:.LANCHOR2
-	bl	ftl_free_no_use_map_blk
-	ldrh	w1, [x19,2]
-	ldrh	w0, [x21,820]
-	cmp	w1, w0
-	bne	.L1860
-	mov	x0, x19
-	bl	ftl_map_blk_alloc_new_blk
-	b	.L1860
-.L1885:
-	ldrh	w0, [x20,860]
-	cbz	w0, .L1848
-	adrp	x25, .LC47
-	mov	w24, 0
-	add	x27, x20, 1408
-	add	x25, x25, :lo12:.LC47
-	b	.L1861
-.L1886:
-	ldr	x2, [x20,1240]
-	ldr	w2, [x2,x23]
-	cmp	w1, w2
-	beq	.L1863
-	ldr	x1, [x20,1048]
-	ldr	x26, [x20,1112]
-	str	x1, [x27,8]
-	mov	w1, 1
-	str	x26, [x27,16]
-	mov	w2, w1
-	ldr	w0, [x0,x23]
-	str	w0, [x27,4]
-	mov	x0, x27
-	bl	FlashReadPages
-	ldr	w0, [x27]
-	cmn	w0, #1
-	beq	.L1863
-	ldrh	w1, [x26]
-	ldrh	w0, [x20,3756]
-	cmp	w1, w0
-	bne	.L1863
-	ldr	x0, [x20,1240]
-	ldr	w3, [x26,4]
-	ldr	w1, [x0,x23]
-	str	w1, [x27,4]
-	ldr	w0, [x0,x23]
-	cbnz	w0, .L1865
-	str	w0, [x26,4]
-	b	.L1866
-.L1865:
-	mov	w1, 1
-	mov	x0, x27
-	mov	w2, w1
-	str	x3, [x29,120]
-	bl	FlashReadPages
-	ldr	x3, [x29,120]
-.L1866:
-	ldr	w4, [x26,4]
-	cmp	w3, w4
-	bls	.L1863
-	ldr	x1, [x20,1248]
-	mov	x0, x25
-	ldr	x2, [x20,1240]
-	ldr	w1, [x1,x23]
-	ldr	w2, [x2,x23]
-	bl	printk
-	ldr	x0, [x20,1248]
-	ldr	w1, [x0,x23]
-	ldr	x0, [x20,1240]
-	str	w1, [x0,x23]
-	mov	w1, 0
-	ldr	x0, [x20,1248]
-	ldrh	w3, [x20,3908]
-	ldr	w2, [x0,x23]
-	ubfx	x2, x2, 10, 16
-.L1867:
-	cmp	w1, w3
-	bge	.L1887
-	ldrh	w0, [x22,w1,sxtw 1]
-	cmp	w0, w2
-	beq	.L1863
-	add	w1, w1, 1
-	sxth	w1, w1
-	b	.L1867
-.L1887:
-	ldr	w0, [x20,848]
-	cmp	w3, w0
-	bcs	.L1863
-	ubfiz	x3, x3, 1, 16
-	strh	w2, [x22,x3]
-	ldrh	w0, [x20,3908]
-	add	w0, w0, 1
-	strh	w0, [x20,3908]
-	mov	w0, w2
-	bl	remove_from_free_sys_Queue
-	b	.L1863
-.L1860:
+	b	.L1934
+.L1922:
+	add	w6, w27, 1
+	sxth	w27, w6
+	b	.L1910
+.L1917:
 	mov	x0, x19
 	bl	ftl_map_blk_gc
 	mov	x0, x19
@@ -12023,11 +12495,11 @@ FtlL2PDataInit:
 	bl	ftl_memset
 	mov	w2, 0
 	mov	w4, -1
-.L1890:
+.L1937:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w1, [x0,858]
 	cmp	w1, w2
-	bls	.L1892
+	bls	.L1939
 	ldr	x3, [x0,1264]
 	ubfiz	x1, x2, 4, 16
 	add	x3, x3, x1
@@ -12045,8 +12517,8 @@ FtlL2PDataInit:
 	and	x1, x1, -4
 	add	x0, x0, x1
 	str	x0, [x3,8]
-	b	.L1890
-.L1892:
+	b	.L1937
+.L1939:
 	ldr	w3, [x0,848]
 	add	x1, x0, 3752
 	strh	w3, [x0,3762]
@@ -12098,41 +12570,41 @@ ftl_sb_update_avl_pages:
 	strh	wzr, [x0,4]
 	mov	w6, 65535
 	ldrh	w4, [x4,748]
-.L1895:
+.L1942:
 	cmp	w2, w4
-	bcs	.L1901
+	bcs	.L1948
 	add	x5, x0, x2, sxtw 1
 	ldrh	w5, [x5,16]
 	cmp	w5, w6
-	beq	.L1896
+	beq	.L1943
 	ldrh	w5, [x0,4]
 	add	w5, w5, 1
 	strh	w5, [x0,4]
-.L1896:
+.L1943:
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L1895
-.L1901:
+	b	.L1942
+.L1948:
 	add	x3, x3, :lo12:.LANCHOR2
 	mov	w6, 65535
 	add	x4, x0, x4, uxth 1
 	ldrh	w5, [x3,818]
 	mov	x3, x0
-.L1898:
+.L1945:
 	cmp	x3, x4
-	beq	.L1902
+	beq	.L1949
 	ldrh	w2, [x3,16]
 	cmp	w2, w6
-	beq	.L1899
+	beq	.L1946
 	ldrh	w2, [x0,4]
 	add	w2, w5, w2
 	sub	w2, w2, #1
 	sub	w2, w2, w1
 	strh	w2, [x0,4]
-.L1899:
+.L1946:
 	add	x3, x3, 2
-	b	.L1898
-.L1902:
+	b	.L1945
+.L1949:
 	ret
 	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
 	.align	2
@@ -12153,9 +12625,9 @@ FtlReUsePrevPpa:
 	ubfiz	x22, x0, 1, 16
 	ldr	x3, [x2,1184]
 	ldrh	w1, [x3,x22]
-	cbnz	w1, .L1904
+	cbnz	w1, .L1951
 	ldr	x19, [x2,3592]
-	cbz	x19, .L1905
+	cbz	x19, .L1952
 	ldrh	w3, [x2,3600]
 	mov	x4, -6148914691236517206
 	ldr	x2, [x2,1280]
@@ -12165,11 +12637,11 @@ FtlReUsePrevPpa:
 	madd	x19, x4, x19, x19
 	mov	w4, 6
 	uxth	w19, w19
-.L1906:
+.L1953:
 	cmp	w1, w3
-	beq	.L1905
+	beq	.L1952
 	cmp	w19, w0
-	bne	.L1907
+	bne	.L1954
 	add	x21, x21, :lo12:.LANCHOR2
 	mov	w1, w19
 	add	x0, x21, 3592
@@ -12183,19 +12655,19 @@ FtlReUsePrevPpa:
 	ldrh	w0, [x1,x22]
 	add	w0, w0, 1
 	strh	w0, [x1,x22]
-	b	.L1905
-.L1907:
+	b	.L1952
+.L1954:
 	umull	x19, w19, w4
 	ldrh	w19, [x2,x19]
 	cmp	w19, w5
-	beq	.L1905
+	beq	.L1952
 	add	w1, w1, 1
 	uxth	w1, w1
-	b	.L1906
-.L1904:
+	b	.L1953
+.L1951:
 	add	w1, w1, 1
 	strh	w1, [x3,x22]
-.L1905:
+.L1952:
 	add	x1, x29, 60
 	mov	w0, w20
 	mov	w2, 1
@@ -12226,9 +12698,9 @@ make_superblock:
 	mov	x23, x1
 	mov	w25, -1
 	ldrh	w24, [x1,748]
-.L1913:
+.L1960:
 	cmp	w24, w21, uxth
-	bls	.L1924
+	bls	.L1971
 	add	x0, x23, 776
 	ldrh	w1, [x19]
 	ldrb	w0, [x0,x21]
@@ -12236,16 +12708,16 @@ make_superblock:
 	strh	w25, [x22]
 	mov	w26, w0
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L1914
+	cbnz	w0, .L1961
 	strh	w26, [x22]
 	ldrb	w0, [x19,7]
 	add	w0, w0, 1
 	strb	w0, [x19,7]
-.L1914:
+.L1961:
 	add	x21, x21, 1
 	add	x22, x22, 2
-	b	.L1913
-.L1924:
+	b	.L1960
+.L1971:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrb	w1, [x19,7]
 	strb	wzr, [x19,9]
@@ -12253,21 +12725,21 @@ make_superblock:
 	mul	w1, w1, w2
 	strh	w1, [x19,4]
 	ldr	w1, [x0,652]
-	cbz	w1, .L1916
+	cbz	w1, .L1963
 	ldrh	w1, [x19]
 	ldr	x0, [x0,1168]
 	ldrh	w0, [x0,x1,lsl 1]
 	cmp	w0, 59
-	bhi	.L1916
+	bhi	.L1963
 	mov	w0, 1
 	strb	w0, [x19,9]
-.L1916:
+.L1963:
 	adrp	x0, .LANCHOR0+24
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+24]
-	cbz	w0, .L1917
+	cbz	w0, .L1964
 	mov	w0, 1
 	strb	w0, [x19,9]
-.L1917:
+.L1964:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -12300,19 +12772,19 @@ FtlLoadSysInfo:
 	ldrh	w0, [x20,3896]
 	mov	w1, 65535
 	cmp	w0, w1
-	bne	.L1926
-.L1934:
+	bne	.L1973
+.L1981:
 	mov	w19, -1
-	b	.L1927
-.L1926:
+	b	.L1974
+.L1973:
 	mov	w1, 1
 	bl	FtlGetLastWrittenPage
 	sxth	w22, w0
 	add	w0, w0, 1
 	strh	w0, [x23,2]
 	mov	w23, 61604
-.L1928:
-	tbnz	w22, #31, .L1933
+.L1975:
+	tbnz	w22, #31, .L1980
 	ldrh	w0, [x20,3896]
 	mov	w1, 1
 	mov	w2, w1
@@ -12324,18 +12796,18 @@ FtlLoadSysInfo:
 	bl	FlashReadPages
 	ldr	w0, [x21]
 	cmn	w0, #1
-	beq	.L1929
+	beq	.L1976
 	ldr	x0, [x20,1048]
 	ldr	w1, [x0]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	bne	.L1929
+	bne	.L1976
 	ldr	x0, [x20,1112]
 	ldrh	w0, [x0]
 	cmp	w0, w23
-	bne	.L1929
-.L1933:
+	bne	.L1976
+.L1980:
 	add	x20, x19, :lo12:.LANCHOR2
 	mov	w2, 48
 	add	x22, x20, 1408
@@ -12361,7 +12833,7 @@ FtlLoadSysInfo:
 	add	x1, x3, x1, lsl 2
 	bl	ftl_memcpy
 	ldrh	w0, [x20,860]
-	cbz	w0, .L1931
+	cbz	w0, .L1978
 	ldrh	w0, [x20,756]
 	ldr	x3, [x22,8]
 	lsr	w1, w0, 3
@@ -12373,55 +12845,57 @@ FtlLoadSysInfo:
 	and	x1, x1, 65532
 	add	x1, x3, x1
 	bl	ftl_memcpy
-	b	.L1931
-.L1929:
+	b	.L1978
+.L1976:
 	sub	w22, w22, #1
 	sxth	w22, w22
-	b	.L1928
-.L1931:
+	b	.L1975
+.L1978:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
 	ldr	w3, [x0,3520]
 	cmp	w3, w2
-	bne	.L1934
+	bne	.L1981
 	ldrb	w3, [x0,3530]
 	ldrh	w2, [x0,770]
-	ldrh	w4, [x0,3528]
-	strh	w4, [x0,3902]
+	ldrh	w6, [x0,3528]
+	strh	w6, [x0,3902]
 	cmp	w3, w2
-	bne	.L1934
+	bne	.L1981
 	ldrh	w3, [x0,818]
 	add	x21, x21, :lo12:.LANCHOR0
 	ldrh	w2, [x0,824]
-	str	w4, [x0,3912]
-	mul	w3, w3, w4
+	adrp	x4, .LANCHOR4
+	add	x5, x4, :lo12:.LANCHOR4
+	mov	x20, x4
+	mul	w3, w3, w6
 	str	w3, [x0,1396]
-	strh	wzr, [x0,3922]
+	str	w6, [x5,3400]
 	mul	w3, w3, w2
 	str	w3, [x21,4048]
 	ldrh	w2, [x0,1302]
 	ldr	w3, [x0,760]
-	strb	wzr, [x0,3926]
+	strh	wzr, [x5,3410]
 	sub	w2, w3, w2
 	ldrh	w3, [x0,748]
-	sub	w2, w2, w4
-	ldrh	w4, [x0,3534]
-	strh	w4, [x0,3608]
+	sub	w2, w2, w6
+	strb	wzr, [x5,3414]
+	strb	wzr, [x5,3416]
 	udiv	w2, w2, w3
 	ldrh	w3, [x0,3536]
-	strh	w2, [x0,3916]
-	lsr	w5, w3, 6
+	strh	w2, [x5,3404]
+	lsr	w7, w3, 6
 	and	w3, w3, 63
 	strb	w3, [x0,3614]
 	ldrb	w3, [x0,3531]
 	strb	w3, [x0,3616]
 	mov	w3, -1
-	strh	w3, [x0,3920]
+	strh	w3, [x5,3408]
 	ldrh	w3, [x0,3538]
 	strh	w3, [x0,3656]
 	ldrh	w3, [x0,3540]
-	strh	w5, [x0,3610]
+	ldrh	w6, [x0,3534]
 	lsr	w5, w3, 6
 	and	w3, w3, 63
 	strb	w3, [x0,3662]
@@ -12433,8 +12907,9 @@ FtlLoadSysInfo:
 	strh	w5, [x0,3658]
 	lsr	w5, w3, 6
 	and	w3, w3, 63
-	strb	wzr, [x0,3928]
+	strh	w6, [x0,3608]
 	strb	w3, [x0,3710]
+	strh	w7, [x0,3610]
 	strh	w5, [x0,3706]
 	ldrb	w3, [x0,3533]
 	strb	w3, [x0,3712]
@@ -12450,48 +12925,48 @@ FtlLoadSysInfo:
 	str	wzr, [x0,908]
 	str	wzr, [x0,916]
 	str	wzr, [x0,892]
-	bls	.L1935
+	bls	.L1982
 	str	w1, [x0,872]
-.L1935:
+.L1982:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w1, [x0,3556]
 	ldr	w2, [x0,876]
 	cmp	w1, w2
-	bls	.L1936
+	bls	.L1983
 	str	w1, [x0,876]
-.L1936:
+.L1983:
 	mov	w0, 65535
-	cmp	w4, w0
-	beq	.L1937
+	cmp	w6, w0
+	beq	.L1984
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x0, x0, 3608
 	bl	make_superblock
-.L1937:
+.L1984:
 	add	x1, x19, :lo12:.LANCHOR2
 	add	x0, x1, 3656
 	ldrh	w2, [x1,3656]
 	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1938
+	beq	.L1985
 	bl	make_superblock
-.L1938:
-	add	x1, x19, :lo12:.LANCHOR2
-	add	x0, x1, 3704
-	ldrh	w2, [x1,3704]
+.L1985:
+	add	x19, x19, :lo12:.LANCHOR2
 	mov	w1, 65535
+	add	x0, x19, 3704
+	ldrh	w2, [x19,3704]
 	cmp	w2, w1
-	beq	.L1939
+	beq	.L1986
 	bl	make_superblock
-.L1939:
-	add	x19, x19, :lo12:.LANCHOR2
-	mov	w1, 65535
-	add	x0, x19, 3920
-	ldrh	w2, [x19,3920]
+.L1986:
+	add	x1, x20, :lo12:.LANCHOR4
 	mov	w19, 0
+	add	x0, x1, 3408
+	ldrh	w2, [x1,3408]
+	mov	w1, 65535
 	cmp	w2, w1
-	beq	.L1927
+	beq	.L1974
 	bl	make_superblock
-.L1927:
+.L1974:
 	mov	w0, w19
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -12500,48 +12975,358 @@ FtlLoadSysInfo:
 	ret
 	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
 	.align	2
-	.global	SupperBlkListInit
-	.type	SupperBlkListInit, %function
-SupperBlkListInit:
-	stp	x29, x30, [sp, -112]!
-	mov	w1, 0
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
+	.global	FtlDumpBlockInfo
+	.type	FtlDumpBlockInfo, %function
+FtlDumpBlockInfo:
+	sub	sp, sp, #176
+	lsr	x0, x0, 10
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x19, x20, [sp,32]
+	stp	x21, x22, [sp,48]
+	stp	x23, x24, [sp,64]
+	stp	x25, x26, [sp,80]
+	stp	x27, x28, [sp,96]
+	uxtb	w24, w1
+	bl	P2V_block_in_plane
+	adrp	x2, .LANCHOR3
+	adrp	x20, .LANCHOR2
+	uxth	w22, w0
+	add	x1, x2, :lo12:.LANCHOR3
+	add	x19, x20, :lo12:.LANCHOR2
+	adrp	x0, .LC49
+	add	x1, x1, 32
+	add	x0, x0, :lo12:.LC49
+	ldrh	w23, [x19,818]
+	bl	printk
+	ldr	x3, [x19,1184]
+	ubfiz	x2, x22, 1, 16
+	adrp	x0, .LC64
+	mov	w1, w22
+	add	x0, x0, :lo12:.LC64
+	ldrh	w2, [x3,x2]
+	bl	printk
+	strh	w22, [x29,112]
+	add	x0, x29, 112
+	bl	make_superblock
+	cbnz	w24, .L2000
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w0, .L2000
+	mov	w0, w22
+	bl	ftl_get_blk_mode
+	cmp	w0, 1
+	mov	w22, w0
+	bne	.L1992
+	ldrh	w23, [x19,820]
+	b	.L1992
+.L2000:
+	mov	w22, 0
+.L1992:
+	add	x3, x20, :lo12:.LANCHOR2
+	adrp	x0, .LC65
+	adrp	x24, .LC60
+	add	x0, x0, :lo12:.LC65
+	mov	w1, w22
+	mov	w2, w23
+	ldrh	w3, [x3,818]
+	mov	w21, 0
+	mov	w26, 65535
+	mov	w27, 56
+	mov	w25, 4
+	add	x24, x24, :lo12:.LC60
+	bl	printk
+.L1993:
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	x3, 0
+	mov	w19, w3
+	ldrh	w5, [x0,748]
+	ldrh	w6, [x0,828]
+	ldrh	w7, [x0,830]
+.L1994:
+	cmp	w5, w3, uxth
+	bls	.L2008
+	add	x0, x29, 112
+	add	x0, x0, x3, lsl 1
+	ldrh	w1, [x0,16]
+	cmp	w1, w26
+	beq	.L1995
+	add	x2, x20, :lo12:.LANCHOR2
+	orr	w1, w21, w1, lsl 10
+	umull	x0, w19, w27
+	ldr	x4, [x2,992]
+	add	x4, x4, x0
+	str	w1, [x4,4]
+	ldr	x1, [x2,992]
+	ldr	x4, [x2,1072]
+	add	x0, x1, x0
+	ldr	x2, [x2,1128]
+	mul	w1, w19, w6
+	sdiv	w1, w1, w25
+	add	x1, x4, x1, sxtw 2
+	str	x1, [x0,8]
+	mul	w1, w19, w7
+	add	w19, w19, 1
+	uxth	w19, w19
+	sdiv	w1, w1, w25
+	add	x1, x2, x1, sxtw 2
+	str	x1, [x0,16]
+.L1995:
+	add	x3, x3, 1
+	b	.L1994
+.L2008:
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w1, w19
+	mov	w2, w22
+	mov	x28, 0
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+	mov	x8, 56
+.L1997:
+	cmp	w19, w28, uxth
+	bls	.L2009
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrh	w1, [x29,112]
+	mul	x2, x28, x8
+	str	x8, [x29,104]
+	add	x28, x28, 1
+	ldr	x4, [x0,992]
+	add	x3, x4, x2
+	ldr	x0, [x3,8]
+	ldr	x7, [x3,16]
+	ldr	w5, [x0]
+	str	w5, [sp]
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	mov	x0, x24
+	ldr	w2, [x4,x2]
+	ldr	w5, [x7,4]
+	ldr	w4, [x7]
+	ldr	w6, [x7,8]
+	ldr	w3, [x3,4]
+	ldr	w7, [x7,12]
+	bl	printk
+	ldr	x8, [x29,104]
+	b	.L1997
+.L2009:
+	add	w21, w21, 1
+	uxth	w21, w21
+	cmp	w21, w23
+	bne	.L1993
+.L1999:
+	sub	sp, x29, #16
+	mov	w0, 0
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 176
+	ret
+	.size	FtlDumpBlockInfo, .-FtlDumpBlockInfo
+	.align	2
+	.global	FtlScanAllBlock
+	.type	FtlScanAllBlock, %function
+FtlScanAllBlock:
+	sub	sp, sp, #144
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC49
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC49
+	add	x1, x1, 56
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x23, x24, [sp,64]
+	stp	x21, x22, [sp,48]
+	adrp	x23, .LC67
+	adrp	x22, .LC66
+	adrp	x24, .LC68
+	add	x22, x22, :lo12:.LC66
+	stp	x19, x20, [sp,32]
+	add	x23, x23, :lo12:.LC67
+	mov	w20, 0
+	add	x24, x24, :lo12:.LC68
+	stp	x25, x26, [sp,80]
+	bl	printk
+.L2011:
 	adrp	x21, .LANCHOR2
-	stp	x19, x20, [sp,16]
 	add	x19, x21, :lo12:.LANCHOR2
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	mov	w23, 6
-	mov	w27, 0
-	ldrh	w2, [x19,758]
-	mov	w22, w27
-	ldr	x0, [x19,1280]
-	mov	w24, -1
-	mov	w25, 32768
-	mul	w2, w2, w23
-	bl	ftl_memset
-	str	xzr, [x19,3592]
-	str	xzr, [x19,3568]
-	str	xzr, [x19,3576]
+	ldrh	w0, [x19,758]
+	cmp	w0, w20
+	bls	.L2020
+	mov	w0, w20
+	strh	w20, [x29,80]
+	bl	ftl_get_blk_mode
+	mov	w3, w0
+	ldr	x4, [x19,1184]
+	ubfiz	x2, x20, 1, 16
+	mov	w1, w20
+	mov	x0, x22
+	ldrh	w2, [x4,x2]
+	bl	printk
+	add	x0, x29, 80
+	bl	make_superblock
+	mov	x1, 0
+	ldrh	w6, [x19,748]
+	ldrh	w7, [x19,828]
+	mov	w9, 65535
+	ldrh	w8, [x19,830]
+	mov	w10, 56
+	mov	w19, w1
+	mov	w5, 4
+.L2012:
+	cmp	w6, w1, uxth
+	bls	.L2021
+	add	x0, x29, 80
+	add	x0, x0, x1, lsl 1
+	ldrh	w0, [x0,16]
+	cmp	w0, w9
+	beq	.L2013
+	add	x3, x21, :lo12:.LANCHOR2
+	lsl	w0, w0, 10
+	umull	x2, w19, w10
+	ldr	x4, [x3,992]
+	add	x4, x4, x2
+	str	w0, [x4,4]
+	ldr	x0, [x3,992]
+	ldr	x4, [x3,1072]
+	add	x2, x0, x2
+	ldr	x3, [x3,1128]
+	mul	w0, w19, w7
+	sdiv	w0, w0, w5
+	add	x0, x4, x0, sxtw 2
+	str	x0, [x2,8]
+	mul	w0, w19, w8
+	add	w19, w19, 1
+	uxth	w19, w19
+	sdiv	w0, w0, w5
+	add	x0, x3, x0, sxtw 2
+	str	x0, [x2,16]
+.L2013:
+	add	x1, x1, 1
+	b	.L2012
+.L2021:
+	add	x0, x21, :lo12:.LANCHOR2
+	mov	w1, w19
+	mov	w2, 0
+	mov	x25, 0
+	mov	x26, 56
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+.L2015:
+	add	x0, x21, :lo12:.LANCHOR2
+	cmp	w19, w25, uxth
+	bls	.L2022
+	ldr	x4, [x0,992]
+	mul	x2, x25, x26
+	ldrh	w1, [x29,80]
+	add	x25, x25, 1
+	add	x3, x4, x2
+	ldr	x0, [x3,8]
+	ldr	x7, [x3,16]
+	ldr	w5, [x0]
+	str	w5, [sp]
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	mov	x0, x23
+	ldr	w2, [x4,x2]
+	ldr	w5, [x7,4]
+	ldr	w4, [x7]
+	ldr	w6, [x7,8]
+	ldr	w3, [x3,4]
+	ldr	w7, [x7,12]
+	bl	printk
+	b	.L2015
+.L2022:
+	ldr	x0, [x0,992]
+	mov	w1, w19
+	mov	w2, 1
+	mov	x25, 0
+	mov	x26, 56
+	bl	FlashReadPages
+.L2017:
+	cmp	w19, w25, uxth
+	bls	.L2023
+	add	x0, x21, :lo12:.LANCHOR2
+	ldrh	w1, [x29,80]
+	mul	x2, x25, x26
+	add	x25, x25, 1
+	ldr	x4, [x0,992]
+	add	x3, x4, x2
+	ldr	x0, [x3,8]
+	ldr	x7, [x3,16]
+	ldr	w5, [x0]
+	str	w5, [sp]
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	mov	x0, x24
+	ldr	w2, [x4,x2]
+	ldr	w5, [x7,4]
+	ldr	w4, [x7]
+	ldr	w6, [x7,8]
+	ldr	w3, [x3,4]
+	ldr	w7, [x7,12]
+	bl	printk
+	b	.L2017
+.L2023:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L2011
+.L2020:
+	sub	sp, x29, #16
+	mov	w0, 0
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 144
+	ret
+	.size	FtlScanAllBlock, .-FtlScanAllBlock
+	.align	2
+	.global	SupperBlkListInit
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	stp	x29, x30, [sp, -112]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w23, 6
+	mov	w27, 0
+	ldrh	w2, [x19,758]
+	mov	w22, w27
+	ldr	x0, [x19,1280]
+	mov	w24, -1
+	mov	w25, 32768
+	mul	w2, w2, w23
+	bl	ftl_memset
+	str	xzr, [x19,3592]
+	str	xzr, [x19,3568]
+	str	xzr, [x19,3576]
 	strh	wzr, [x19,3584]
 	strh	wzr, [x19,3600]
 	strh	wzr, [x19,862]
 	mov	w19, w27
-.L1945:
+.L2025:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldrh	w1, [x0,756]
 	cmp	w19, w1
-	bge	.L1952
+	bge	.L2032
 	mov	w20, 0
 	ldrh	w3, [x0,748]
 	ldrh	w2, [x0,818]
 	mov	w28, w20
 	mov	x26, x0
-.L1953:
+.L2033:
 	cmp	w28, w3
-	bge	.L1954
+	bge	.L2034
 	add	x0, x26, 776
 	mov	w1, w19
 	str	x2, [x29,96]
@@ -12551,54 +13336,54 @@ SupperBlkListInit:
 	bl	FtlBbmIsBadBlock
 	ldr	x3, [x29,104]
 	ldr	x2, [x29,96]
-	cbnz	w0, .L1946
+	cbnz	w0, .L2026
 	add	w20, w2, w20
 	sxth	w20, w20
-.L1946:
+.L2026:
 	add	w28, w28, 1
 	sxth	w28, w28
-	b	.L1953
-.L1954:
-	cbz	w20, .L1948
+	b	.L2033
+.L2034:
+	cbz	w20, .L2028
 	sdiv	w20, w25, w20
 	sxth	w20, w20
-	b	.L1949
-.L1948:
+	b	.L2029
+.L2028:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldr	x0, [x0,1184]
 	strh	w24, [x0,w19,sxtw 1]
-.L1949:
+.L2029:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldr	x1, [x0,1280]
 	smaddl	x1, w19, w23, x1
 	strh	w20, [x1,4]
 	ldrh	w1, [x0,3608]
 	cmp	w19, w1
-	beq	.L1950
+	beq	.L2030
 	ldrh	w1, [x0,3656]
 	cmp	w19, w1
-	beq	.L1950
+	beq	.L2030
 	ldrh	w1, [x0,3704]
 	cmp	w19, w1
-	beq	.L1950
+	beq	.L2030
 	ldr	x0, [x0,1184]
 	ldrh	w0, [x0,w19,sxtw 1]
-	cbnz	w0, .L1951
+	cbnz	w0, .L2031
 	add	w27, w27, 1
 	mov	w0, w19
 	uxth	w27, w27
 	bl	INSERT_FREE_LIST
-	b	.L1950
-.L1951:
+	b	.L2030
+.L2031:
 	add	w22, w22, 1
 	mov	w0, w19
 	uxth	w22, w22
 	bl	INSERT_DATA_LIST
-.L1950:
+.L2030:
 	add	w19, w19, 1
 	sxth	w19, w19
-	b	.L1945
-.L1952:
+	b	.L2025
+.L2032:
 	strh	w22, [x0,3584]
 	strh	w27, [x0,3600]
 	mov	w0, 0
@@ -12614,24 +13399,25 @@ SupperBlkListInit:
 	.global	Ftl_save_ext_data
 	.type	Ftl_save_ext_data, %function
 Ftl_save_ext_data:
-	adrp	x0, .LANCHOR2
+	adrp	x0, .LANCHOR4
 	mov	w1, 19539
-	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR4
 	movk	w1, 0x4654, lsl 16
 	stp	x29, x30, [sp, -16]!
-	add	x2, x0, 3968
+	add	x2, x0, 3456
 	add	x29, sp, 0
-	ldr	w3, [x0,3968]
+	ldr	w3, [x0,3456]
 	cmp	w3, w1
-	bne	.L1955
+	bne	.L2035
 	mov	w1, 72
 	movk	w1, 0x5000, lsl 16
 	str	w1, [x2,4]
-	adrp	x1, .LANCHOR4
-	add	x1, x1, :lo12:.LANCHOR4
-	ldr	w3, [x1,128]
-	ldr	w1, [x1,132]
-	str	w1, [x2,92]
+	ldr	w1, [x0,3968]
+	ldr	w0, [x0,3972]
+	str	w0, [x2,92]
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	str	w1, [x2,88]
 	ldr	w1, [x0,880]
 	str	w1, [x2,8]
 	ldr	w1, [x0,884]
@@ -12658,9 +13444,8 @@ Ftl_save_ext_data:
 	mov	w1, 1
 	str	w0, [x2,64]
 	mov	w0, 0
-	str	w3, [x2,88]
 	bl	FtlVendorPartWrite
-.L1955:
+.L2035:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
@@ -12674,30 +13459,30 @@ FtlEctTblFlush:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	ldr	w4, [x3,652]
-	cbz	w4, .L1958
+	cbz	w4, .L2038
 	ldr	w3, [x3,920]
 	cmp	w3, 29
 	mov	w3, 4
 	csel	w1, w1, w3, hi
-.L1958:
+.L2038:
 	adrp	x3, .LANCHOR4
 	add	x3, x3, :lo12:.LANCHOR4
-	ldrh	w4, [x3,136]
+	ldrh	w4, [x3,3976]
 	cmp	w4, 31
-	bhi	.L1959
+	bhi	.L2039
 	add	w4, w4, 1
 	mov	w1, 1
-	strh	w4, [x3,136]
-.L1959:
-	cbnz	w0, .L1960
+	strh	w4, [x3,3976]
+.L2039:
+	cbnz	w0, .L2040
 	add	x0, x2, :lo12:.LANCHOR2
 	ldr	x3, [x0,1160]
 	ldr	w0, [x3,20]
 	add	w1, w1, w0
 	ldr	w0, [x3,16]
 	cmp	w0, w1
-	bcc	.L1961
-.L1960:
+	bcc	.L2041
+.L2040:
 	add	x2, x2, :lo12:.LANCHOR2
 	ldr	x0, [x2,1160]
 	ldr	w1, [x0,16]
@@ -12717,7 +13502,7 @@ FtlEctTblFlush:
 	mov	w0, 64
 	bl	FtlVendorPartWrite
 	bl	Ftl_save_ext_data
-.L1961:
+.L2041:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -12731,86 +13516,88 @@ Ftl_load_ext_data:
 	mov	w0, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR2
+	adrp	x19, .LANCHOR4
 	str	x21, [sp,32]
-	add	x20, x19, :lo12:.LANCHOR2
-	add	x21, x20, 3968
+	add	x20, x19, :lo12:.LANCHOR4
+	add	x21, x20, 3456
 	mov	x2, x21
 	bl	FtlVendorPartRead
-	ldr	w1, [x20,3968]
+	ldr	w1, [x20,3456]
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
 	cmp	w1, w0
-	beq	.L1966
+	beq	.L2046
 	mov	x0, x21
 	mov	w1, 0
 	mov	w2, 512
 	bl	ftl_memset
 	mov	w0, 19539
 	movk	w0, 0x4654, lsl 16
-	str	w0, [x20,3968]
-.L1966:
-	add	x0, x19, :lo12:.LANCHOR2
+	str	w0, [x20,3456]
+.L2046:
+	add	x1, x19, :lo12:.LANCHOR4
 	mov	w2, 19539
 	movk	w2, 0x4654, lsl 16
-	adrp	x20, .LANCHOR4
-	ldr	w3, [x0,3968]
+	add	x0, x1, 3456
+	adrp	x20, .LANCHOR2
+	ldr	w3, [x1,3456]
 	cmp	w3, w2
-	bne	.L1967
-	add	x2, x20, :lo12:.LANCHOR4
-	ldr	w3, [x0,4056]
-	ldr	w1, [x0,4028]
-	str	w1, [x0,868]
-	str	w3, [x2,128]
-	ldr	w3, [x0,4060]
-	str	w3, [x2,132]
-	ldr	w2, [x0,3976]
-	str	w2, [x0,880]
-	ldr	w2, [x0,3980]
-	str	w2, [x0,884]
-	ldr	w2, [x0,3984]
-	str	w2, [x0,900]
-	ldr	w2, [x0,3988]
-	str	w2, [x0,896]
-	ldr	w2, [x0,3996]
-	str	w2, [x0,908]
-	ldr	w2, [x0,4000]
-	str	w2, [x0,912]
-	ldr	w2, [x0,4004]
-	str	w2, [x0,888]
-	ldr	w2, [x0,4008]
-	str	w2, [x0,892]
-	ldr	w2, [x0,4012]
-	str	w2, [x0,916]
-	ldr	w2, [x0,4016]
-	str	w2, [x0,920]
-.L1967:
-	add	x0, x19, :lo12:.LANCHOR2
+	bne	.L2047
+	ldr	w2, [x1,3544]
+	str	w2, [x1,3968]
+	ldr	w2, [x1,3548]
+	str	w2, [x1,3972]
+	add	x1, x20, :lo12:.LANCHOR2
+	ldr	w2, [x0,8]
+	str	w2, [x1,880]
+	ldr	w2, [x0,12]
+	str	w2, [x1,884]
+	ldr	w2, [x0,16]
+	str	w2, [x1,900]
+	ldr	w2, [x0,20]
+	str	w2, [x1,896]
+	ldr	w2, [x0,28]
+	str	w2, [x1,908]
+	ldr	w2, [x0,32]
+	str	w2, [x1,912]
+	ldr	w2, [x0,36]
+	str	w2, [x1,888]
+	ldr	w2, [x0,40]
+	str	w2, [x1,892]
+	ldr	w2, [x0,44]
+	str	w2, [x1,916]
+	ldr	w2, [x0,48]
+	ldr	w0, [x0,60]
+	str	w2, [x1,920]
+	str	w0, [x1,868]
+.L2047:
+	add	x1, x19, :lo12:.LANCHOR4
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w2, [x1,3524]
 	mov	w1, 34661
 	movk	w1, 0x1234, lsl 16
-	ldr	w2, [x0,4036]
 	str	wzr, [x0,864]
 	cmp	w2, w1
-	bne	.L1968
+	bne	.L2048
 	mov	w1, 1
 	str	w1, [x0,652]
-	adrp	x0, .LC45
-	adrp	x1, .LC48
-	add	x0, x0, :lo12:.LC45
-	add	x1, x1, :lo12:.LC48
+	adrp	x0, .LC47
+	adrp	x1, .LC69
+	add	x0, x0, :lo12:.LC47
+	add	x1, x1, :lo12:.LC69
 	bl	printk
-.L1968:
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x20, x20, :lo12:.LANCHOR4
+.L2048:
+	add	x0, x20, :lo12:.LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR4
+	ldr	x21, [sp,32]
 	ldrh	w2, [x0,808]
 	ldr	w3, [x0,904]
 	ldr	w1, [x0,908]
 	ldrh	w0, [x0,756]
 	madd	w1, w2, w3, w1
 	udiv	w0, w1, w0
-	str	w0, [x20,140]
+	str	w0, [x19,3980]
 	ldp	x19, x20, [sp,16]
-	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
 	ret
 	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
@@ -12833,25 +13620,25 @@ update_multiplier_value:
 	mov	w19, w22
 	ldrh	w25, [x1,818]
 	mov	x23, x1
-.L1970:
+.L2050:
 	cmp	w24, w22, uxth
-	bls	.L1977
+	bls	.L2057
 	add	x0, x23, 776
 	mov	w1, w20
 	ldrb	w0, [x0,x22]
 	bl	V2P_block
 	bl	FtlBbmIsBadBlock
-	cbnz	w0, .L1971
+	cbnz	w0, .L2051
 	add	w19, w19, w25
 	uxth	w19, w19
-.L1971:
+.L2051:
 	add	x22, x22, 1
-	b	.L1970
-.L1977:
-	cbz	w19, .L1973
+	b	.L2050
+.L2057:
+	cbz	w19, .L2053
 	mov	w0, 32768
 	sdiv	w19, w0, w19
-.L1973:
+.L2053:
 	add	x0, x21, :lo12:.LANCHOR2
 	mov	w1, 6
 	umull	x20, w20, w1
@@ -12874,7 +13661,7 @@ GetFreeBlockMinEraseCount:
 	add	x2, x2, :lo12:.LANCHOR2
 	ldr	x1, [x2,3592]
 	mov	w0, w1
-	cbz	x1, .L1979
+	cbz	x1, .L2059
 	ldr	x0, [x2,1280]
 	sub	x1, x1, x0
 	mov	x0, -6148914691236517206
@@ -12883,7 +13670,7 @@ GetFreeBlockMinEraseCount:
 	ldr	x0, [x2,1168]
 	and	x1, x1, 65535
 	ldrh	w0, [x0,x1,lsl 1]
-.L1979:
+.L2059:
 	ret
 	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
 	.align	2
@@ -12895,7 +13682,7 @@ GetFreeBlockMaxEraseCount:
 	add	x5, x2, :lo12:.LANCHOR2
 	ldr	x1, [x5,3592]
 	mov	w0, w1
-	cbz	x1, .L1982
+	cbz	x1, .L2062
 	ldrh	w3, [x5,3600]
 	mov	w0, 7
 	mov	w6, 6
@@ -12911,25 +13698,25 @@ GetFreeBlockMaxEraseCount:
 	madd	x1, x3, x1, x1
 	mov	w3, 0
 	uxth	w1, w1
-.L1984:
+.L2064:
 	cmp	w3, w4
-	beq	.L1987
+	beq	.L2067
 	umull	x5, w1, w6
 	ldrh	w5, [x0,x5]
 	cmp	w5, w7
-	bne	.L1985
-.L1987:
+	bne	.L2065
+.L2067:
 	add	x2, x2, :lo12:.LANCHOR2
 	ubfiz	x1, x1, 1, 16
 	ldr	x0, [x2,1168]
 	ldrh	w0, [x0,x1]
-	b	.L1982
-.L1985:
+	b	.L2062
+.L2065:
 	add	w3, w3, 1
 	mov	w1, w5
 	uxth	w3, w3
-	b	.L1984
-.L1982:
+	b	.L2064
+.L2062:
 	ret
 	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
 	.align	2
@@ -12937,11 +13724,11 @@ GetFreeBlockMaxEraseCount:
 	.type	FtlPrintInfo2buf, %function
 FtlPrintInfo2buf:
 	stp	x29, x30, [sp, -112]!
-	adrp	x1, .LC49
+	adrp	x1, .LC70
 	add	x29, sp, 0
 	stp	x25, x26, [sp,64]
 	adrp	x25, .LANCHOR0
-	add	x1, x1, :lo12:.LC49
+	add	x1, x1, :lo12:.LC70
 	add	x25, x25, :lo12:.LANCHOR0
 	str	x27, [sp,80]
 	stp	x23, x24, [sp,48]
@@ -12951,459 +13738,459 @@ FtlPrintInfo2buf:
 	bl	strcpy
 	add	x20, x23, 12
 	ldr	w2, [x25,4016]
-	adrp	x1, .LC50
+	adrp	x1, .LC71
 	adrp	x24, .LANCHOR2
 	mov	x0, x20
-	add	x1, x1, :lo12:.LC50
+	add	x1, x1, :lo12:.LC71
 	add	x22, x24, :lo12:.LANCHOR2
 	bl	sprintf
 	add	x20, x20, x0, sxtw
-	adrp	x1, .LC51
+	adrp	x1, .LC72
 	mov	x0, x20
 	ldr	w2, [x22,836]
-	add	x1, x1, :lo12:.LC51
+	add	x1, x1, :lo12:.LC72
 	bl	sprintf
 	add	x20, x20, x0, sxtw
 	adrp	x0, .LANCHOR1+3064
 	ldr	w0, [x0,#:lo12:.LANCHOR1+3064]
 	cmp	w0, 1
-	beq	.L1990
+	beq	.L2070
 	sub	w0, w20, w23
-	b	.L1991
-.L1990:
+	b	.L2071
+.L2070:
 	add	x0, x29, 96
 	add	x1, x29, 100
 	add	x2, x29, 104
 	add	x3, x29, 108
-	adrp	x19, .LANCHOR4
 	bl	NandcGetTimeCfg
-	add	x19, x19, :lo12:.LANCHOR4
 	ldr	w4, [x29,104]
-	adrp	x1, .LC52
+	adrp	x1, .LC73
 	ldr	w5, [x29,108]
-	add	x1, x1, :lo12:.LC52
-	ldr	w3, [x29,100]
 	mov	x0, x20
+	ldr	w3, [x29,100]
+	add	x1, x1, :lo12:.LC73
 	ldr	w2, [x29,96]
 	bl	sprintf
 	add	x21, x20, x0, sxtw
-	adrp	x1, .LC53
+	adrp	x1, .LC74
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC53
+	add	x1, x1, :lo12:.LC74
 	add	x21, x21, 10
+	adrp	x20, .LANCHOR4
 	bl	strcpy
+	add	x20, x20, :lo12:.LANCHOR4
 	ldr	w2, [x22,1396]
-	adrp	x1, .LC54
+	adrp	x1, .LC75
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC54
+	add	x1, x1, :lo12:.LC75
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,3892]
-	adrp	x1, .LC55
+	adrp	x1, .LC76
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC55
+	add	x1, x1, :lo12:.LC76
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,900]
-	adrp	x1, .LC56
+	adrp	x1, .LC77
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC56
+	add	x1, x1, :lo12:.LC77
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,888]
-	adrp	x1, .LC57
+	adrp	x1, .LC78
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC57
+	add	x1, x1, :lo12:.LC78
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,884]
-	adrp	x1, .LC58
+	adrp	x1, .LC79
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC58
+	add	x1, x1, :lo12:.LC79
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,892]
-	adrp	x1, .LC59
+	adrp	x1, .LC80
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC59
+	add	x1, x1, :lo12:.LC80
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,896]
-	adrp	x1, .LC60
+	adrp	x1, .LC81
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC60
+	add	x1, x1, :lo12:.LC81
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,880]
-	adrp	x1, .LC61
+	adrp	x1, .LC82
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC61
+	add	x1, x1, :lo12:.LC82
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x19,128]
-	adrp	x1, .LC62
+	ldr	w2, [x20,3968]
+	adrp	x1, .LC83
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC62
+	add	x1, x1, :lo12:.LC83
 	lsr	w2, w2, 11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x19,132]
-	adrp	x1, .LC63
+	ldr	w2, [x20,3972]
+	adrp	x1, .LC84
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC63
+	add	x1, x1, :lo12:.LC84
 	lsr	w2, w2, 11
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,872]
-	adrp	x1, .LC64
+	adrp	x1, .LC85
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC64
+	add	x1, x1, :lo12:.LC85
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,876]
-	adrp	x1, .LC65
-	add	x1, x1, :lo12:.LC65
+	adrp	x1, .LC86
+	add	x1, x1, :lo12:.LC86
 	mov	x0, x21
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	bl	FtlBbtCalcTotleCnt
 	uxth	w3, w0
 	ldrh	w2, [x22,1302]
-	adrp	x1, .LC66
+	adrp	x1, .LC87
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC66
+	add	x1, x1, :lo12:.LC87
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3600]
-	adrp	x1, .LC67
+	adrp	x1, .LC88
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC67
+	add	x1, x1, :lo12:.LC88
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,904]
-	adrp	x1, .LC68
+	adrp	x1, .LC89
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC68
+	add	x1, x1, :lo12:.LC89
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,908]
-	adrp	x1, .LC69
+	adrp	x1, .LC90
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC69
+	add	x1, x1, :lo12:.LC90
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldr	w2, [x19,140]
-	adrp	x1, .LC70
+	ldr	w2, [x20,3980]
+	adrp	x1, .LC91
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC70
+	add	x1, x1, :lo12:.LC91
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,912]
-	adrp	x1, .LC71
+	adrp	x1, .LC92
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC71
+	add	x1, x1, :lo12:.LC92
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,916]
-	adrp	x1, .LC72
+	adrp	x1, .LC93
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC72
+	add	x1, x1, :lo12:.LC93
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,920]
-	adrp	x1, .LC73
+	adrp	x1, .LC94
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC73
+	add	x1, x1, :lo12:.LC94
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3550]
-	adrp	x1, .LC74
+	adrp	x1, .LC95
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC74
+	add	x1, x1, :lo12:.LC95
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3548]
-	adrp	x1, .LC75
+	adrp	x1, .LC96
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC75
+	add	x1, x1, :lo12:.LC96
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x25,4048]
-	adrp	x1, .LC76
+	adrp	x1, .LC97
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC76
+	add	x1, x1, :lo12:.LC97
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,852]
-	adrp	x1, .LC77
+	adrp	x1, .LC98
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC77
+	add	x1, x1, :lo12:.LC98
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,744]
-	adrp	x1, .LC78
+	adrp	x1, .LC99
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC78
+	add	x1, x1, :lo12:.LC99
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,1470]
-	adrp	x1, .LC79
+	adrp	x1, .LC100
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC79
+	add	x1, x1, :lo12:.LC100
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,756]
-	adrp	x1, .LC80
+	adrp	x1, .LC101
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC80
+	add	x1, x1, :lo12:.LC101
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3916]
-	adrp	x1, .LC81
+	ldrh	w2, [x20,3404]
+	adrp	x1, .LC102
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC81
+	add	x1, x1, :lo12:.LC102
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w2, [x22,760]
-	adrp	x1, .LC82
+	adrp	x1, .LC103
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC82
+	add	x1, x1, :lo12:.LC103
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3896]
-	adrp	x1, .LC83
+	adrp	x1, .LC104
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC83
+	add	x1, x1, :lo12:.LC104
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,1296]
-	adrp	x1, .LC84
+	adrp	x1, .LC105
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC84
+	add	x1, x1, :lo12:.LC105
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3610]
-	adrp	x1, .LC85
+	adrp	x1, .LC106
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC85
+	add	x1, x1, :lo12:.LC106
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrb	w2, [x22,3614]
-	adrp	x1, .LC86
+	adrp	x1, .LC107
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC86
+	add	x1, x1, :lo12:.LC107
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3608]
-	adrp	x1, .LC87
+	adrp	x1, .LC108
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC87
+	add	x1, x1, :lo12:.LC108
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrb	w2, [x22,3616]
-	adrp	x1, .LC88
+	adrp	x1, .LC109
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC88
+	add	x1, x1, :lo12:.LC109
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3612]
-	adrp	x1, .LC89
+	adrp	x1, .LC110
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC89
+	add	x1, x1, :lo12:.LC110
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w3, [x22,3608]
-	adrp	x1, .LC90
+	adrp	x1, .LC111
 	ldr	x2, [x22,1184]
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC90
+	add	x1, x1, :lo12:.LC111
 	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3658]
-	adrp	x1, .LC91
+	adrp	x1, .LC112
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC91
+	add	x1, x1, :lo12:.LC112
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrb	w2, [x22,3662]
-	adrp	x1, .LC92
+	adrp	x1, .LC113
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC92
+	add	x1, x1, :lo12:.LC113
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3656]
-	adrp	x1, .LC93
+	adrp	x1, .LC114
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC93
+	add	x1, x1, :lo12:.LC114
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrb	w2, [x22,3664]
-	adrp	x1, .LC94
+	adrp	x1, .LC115
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC94
+	add	x1, x1, :lo12:.LC115
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3660]
-	adrp	x1, .LC95
+	adrp	x1, .LC116
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC95
+	add	x1, x1, :lo12:.LC116
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w3, [x22,3656]
-	adrp	x1, .LC96
+	adrp	x1, .LC117
 	ldr	x2, [x22,1184]
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC96
+	add	x1, x1, :lo12:.LC117
 	ldrh	w2, [x2,x3,lsl 1]
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3706]
-	adrp	x1, .LC97
+	adrp	x1, .LC118
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC97
+	add	x1, x1, :lo12:.LC118
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrb	w2, [x22,3710]
-	adrp	x1, .LC98
+	adrp	x1, .LC119
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC98
+	add	x1, x1, :lo12:.LC119
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3704]
-	adrp	x1, .LC99
+	adrp	x1, .LC120
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC99
+	add	x1, x1, :lo12:.LC120
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrb	w2, [x22,3712]
-	adrp	x1, .LC100
+	adrp	x1, .LC121
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC100
+	add	x1, x1, :lo12:.LC121
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldrh	w2, [x22,3708]
-	adrp	x1, .LC101
+	adrp	x1, .LC122
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC101
+	add	x1, x1, :lo12:.LC122
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3922]
-	adrp	x1, .LC102
+	ldrh	w2, [x20,3410]
+	adrp	x1, .LC123
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC102
+	add	x1, x1, :lo12:.LC123
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3926]
-	adrp	x1, .LC103
+	ldrb	w2, [x20,3414]
+	adrp	x1, .LC124
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC103
+	add	x1, x1, :lo12:.LC124
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3920]
-	adrp	x1, .LC104
+	ldrh	w2, [x20,3408]
+	adrp	x1, .LC125
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC104
+	add	x1, x1, :lo12:.LC125
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrb	w2, [x22,3928]
-	adrp	x1, .LC105
+	ldrb	w2, [x20,3416]
+	adrp	x1, .LC126
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC105
+	add	x1, x1, :lo12:.LC126
 	bl	sprintf
 	add	x21, x21, x0, sxtw
-	ldrh	w2, [x22,3924]
-	adrp	x1, .LC106
+	ldrh	w2, [x20,3412]
+	adrp	x1, .LC127
 	mov	x0, x21
-	add	x1, x1, :lo12:.LC106
+	add	x1, x1, :lo12:.LC127
 	bl	sprintf
 	add	x21, x21, x0, sxtw
 	ldr	w3, [x22,868]
-	adrp	x1, .LC107
+	adrp	x1, .LC128
 	ldr	w2, [x22,652]
-	add	x1, x1, :lo12:.LC107
-	ldr	w4, [x22,4052]
+	add	x1, x1, :lo12:.LC128
+	ldr	w4, [x20,3540]
 	mov	x0, x21
-	ldr	w5, [x22,4044]
+	ldr	w5, [x20,3532]
 	orr	w2, w2, w3, lsl 8
-	ldr	w3, [x22,4048]
+	ldr	w3, [x20,3536]
 	bl	sprintf
 	add	x19, x21, x0, sxtw
-	ldr	w2, [x22,4040]
-	adrp	x1, .LC108
+	ldr	w2, [x20,3528]
+	adrp	x1, .LC129
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC108
+	add	x1, x1, :lo12:.LC129
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x22,4064]
-	adrp	x1, .LC109
+	ldr	w2, [x20,3552]
+	adrp	x1, .LC130
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC109
+	add	x1, x1, :lo12:.LC130
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldrh	w2, [x22,952]
-	adrp	x1, .LC110
+	adrp	x1, .LC131
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC110
+	add	x1, x1, :lo12:.LC131
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldrh	w2, [x22,954]
-	adrp	x1, .LC111
+	adrp	x1, .LC132
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC111
+	add	x1, x1, :lo12:.LC132
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldr	w2, [x22,940]
-	adrp	x1, .LC112
+	adrp	x1, .LC133
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC112
+	add	x1, x1, :lo12:.LC133
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldrh	w2, [x22,956]
-	adrp	x1, .LC113
-	add	x1, x1, :lo12:.LC113
+	adrp	x1, .LC134
+	add	x1, x1, :lo12:.LC134
 	mov	x0, x19
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	bl	GetFreeBlockMinEraseCount
 	uxth	w2, w0
-	adrp	x1, .LC114
+	adrp	x1, .LC135
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC114
+	add	x1, x1, :lo12:.LC135
 	bl	sprintf
 	add	x19, x19, x0, sxtw
 	ldrh	w0, [x22,3600]
 	bl	GetFreeBlockMaxEraseCount
 	uxth	w2, w0
-	adrp	x1, .LC115
+	adrp	x1, .LC136
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC115
+	add	x1, x1, :lo12:.LC136
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w0, [x22,3920]
+	ldrh	w0, [x20,3408]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L1992
+	beq	.L2072
 	ubfiz	x2, x0, 1, 16
 	ldr	x3, [x22,1184]
-	adrp	x1, .LC116
+	adrp	x1, .LC137
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC116
+	add	x1, x1, :lo12:.LC137
 	ldrh	w2, [x3,x2]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-.L1992:
+.L2072:
 	mov	w0, 0
-	adrp	x22, .LC117
+	adrp	x22, .LC138
 	mov	w20, 0
 	mov	w27, 65535
 	bl	List_get_gc_head_node
 	mov	w26, 6
 	uxth	w3, w0
-	add	x22, x22, :lo12:.LC117
-.L1994:
+	add	x22, x22, :lo12:.LC138
+.L2074:
 	cmp	w3, w27
-	beq	.L1993
+	beq	.L2073
 	add	x21, x24, :lo12:.LANCHOR2
 	ubfiz	x6, x3, 1, 16
 	umull	x25, w3, w26
@@ -13423,14 +14210,14 @@ FtlPrintInfo2buf:
 	ldr	x0, [x21,1280]
 	cmp	w20, 16
 	ldrh	w3, [x0,x25]
-	bne	.L1994
-.L1993:
+	bne	.L2074
+.L2073:
 	add	x1, x24, :lo12:.LANCHOR2
-	adrp	x22, .LC118
+	adrp	x22, .LC139
 	mov	w20, 0
 	mov	w27, 65535
 	mov	w26, 6
-	add	x22, x22, :lo12:.LC118
+	add	x22, x22, :lo12:.LC139
 	ldr	x0, [x1,3592]
 	ldr	x3, [x1,1280]
 	sub	x3, x0, x3
@@ -13438,9 +14225,9 @@ FtlPrintInfo2buf:
 	asr	x3, x3, 1
 	madd	x3, x0, x3, x3
 	uxth	w3, w3
-.L1996:
+.L2076:
 	cmp	w3, w27
-	beq	.L1995
+	beq	.L2075
 	add	x21, x24, :lo12:.LANCHOR2
 	ubfiz	x5, x3, 1, 16
 	umull	x25, w3, w26
@@ -13458,10 +14245,10 @@ FtlPrintInfo2buf:
 	ldr	x0, [x21,1280]
 	cmp	w20, 4
 	ldrh	w3, [x0,x25]
-	bne	.L1996
-.L1995:
+	bne	.L2076
+.L2075:
 	sub	w0, w19, w23
-.L1991:
+.L2071:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -13475,11 +14262,11 @@ FtlPrintInfo2buf:
 	.type	ftl_proc_ftl_read, %function
 ftl_proc_ftl_read:
 	stp	x29, x30, [sp, -32]!
-	adrp	x1, .LC45
-	adrp	x2, .LC119
+	adrp	x1, .LC47
+	adrp	x2, .LC140
 	add	x29, sp, 0
-	add	x1, x1, :lo12:.LC45
-	add	x2, x2, :lo12:.LC119
+	add	x1, x1, :lo12:.LC47
+	add	x2, x2, :lo12:.LC140
 	stp	x19, x20, [sp,16]
 	mov	x20, x0
 	bl	sprintf
@@ -13505,76 +14292,76 @@ GetSwlReplaceBlock:
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	adrp	x19, .LANCHOR2
-	ldr	w3, [x1,140]
+	ldr	w3, [x1,3980]
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w2, [x1,920]
 	cmp	w3, w2
-	bcs	.L2001
+	bcs	.L2081
 	str	wzr, [x1,904]
 	ldrh	w3, [x1,756]
 	ldr	x5, [x1,1168]
 	mov	x1, 0
-.L2002:
+.L2082:
 	cmp	w3, w1
-	bls	.L2034
+	bls	.L2114
 	add	x4, x19, :lo12:.LANCHOR2
 	ldrh	w6, [x5,x1,lsl 1]
 	add	x1, x1, 1
 	ldr	w2, [x4,904]
 	add	w2, w6, w2
 	str	w2, [x4,904]
-	b	.L2002
-.L2034:
+	b	.L2082
+.L2114:
 	add	x2, x19, :lo12:.LANCHOR2
 	add	x4, x0, :lo12:.LANCHOR4
 	ldr	w1, [x2,904]
 	udiv	w3, w1, w3
-	str	w3, [x4,140]
+	str	w3, [x4,3980]
 	ldr	w3, [x2,908]
 	sub	w1, w1, w3
 	ldrh	w3, [x2,808]
 	udiv	w1, w1, w3
 	str	w1, [x2,904]
-	b	.L2004
-.L2001:
+	b	.L2084
+.L2081:
 	ldr	w2, [x1,916]
 	cmp	w3, w2
-	bls	.L2004
+	bls	.L2084
 	add	w2, w2, 1
 	str	w2, [x1,916]
 	mov	w1, 0
-.L2006:
+.L2086:
 	add	x2, x19, :lo12:.LANCHOR2
 	ldrh	w3, [x2,756]
 	cmp	w1, w3
-	bcs	.L2004
+	bcs	.L2084
 	ubfiz	x3, x1, 1, 32
 	ldr	x4, [x2,1168]
 	add	w1, w1, 1
 	ldrh	w2, [x4,x3]
 	add	w2, w2, 1
 	strh	w2, [x4,x3]
-	b	.L2006
-.L2004:
+	b	.L2086
+.L2084:
 	add	x1, x19, :lo12:.LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR4
 	ldr	w21, [x1,920]
-	ldr	w23, [x0,140]
+	ldr	w23, [x0,3980]
 	add	w0, w21, 256
 	cmp	w0, w23
-	bls	.L2009
+	bls	.L2089
 	ldr	w2, [x1,916]
 	add	w0, w21, 768
 	cmp	w0, w2
-	bls	.L2009
+	bls	.L2089
 	ldr	w0, [x1,652]
-	cbz	w0, .L2012
+	cbz	w0, .L2092
 	cmp	w21, 30
-	bls	.L2009
-.L2012:
+	bls	.L2089
+.L2092:
 	mov	w0, 65535
-	b	.L2011
-.L2009:
+	b	.L2091
+.L2089:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,3600]
 	add	w0, w0, w0, lsl 1
@@ -13583,13 +14370,13 @@ GetSwlReplaceBlock:
 	uxth	w6, w0
 	add	w0, w21, 64
 	cmp	w6, w0
-	bcs	.L2021
+	bcs	.L2101
 	cmp	w21, 30
-	bhi	.L2012
-.L2021:
+	bhi	.L2092
+.L2101:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	x3, [x1,3568]
-	cbz	x3, .L2012
+	cbz	x3, .L2092
 	mov	w26, 65535
 	mov	x0, -6148914691236517206
 	ldrh	w9, [x1,756]
@@ -13600,16 +14387,16 @@ GetSwlReplaceBlock:
 	add	x0, x0, 1
 	mov	w1, 0
 	mov	w10, 6
-.L2014:
+.L2094:
 	ldrh	w5, [x3]
 	cmp	w5, w8
-	beq	.L2016
+	beq	.L2096
 	add	w1, w1, 1
 	uxth	w1, w1
 	cmp	w1, w9
-	bhi	.L2012
+	bhi	.L2092
 	ldrh	w2, [x3,4]
-	cbz	w2, .L2015
+	cbz	w2, .L2095
 	sub	x4, x3, x7
 	asr	x4, x4, 1
 	mul	x4, x4, x0
@@ -13617,51 +14404,51 @@ GetSwlReplaceBlock:
 	and	x4, x4, 65535
 	ldrh	w2, [x25,x4,lsl 1]
 	cmp	w2, w21
-	bls	.L2020
+	bls	.L2100
 	cmp	w2, w26
-	bcs	.L2015
+	bcs	.L2095
 	mov	w26, w2
 	mov	w20, w3
-.L2015:
+.L2095:
 	umull	x3, w5, w10
 	add	x3, x7, x3
-	b	.L2014
-.L2020:
+	b	.L2094
+.L2100:
 	mov	w20, w3
-.L2016:
+.L2096:
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L2012
+	beq	.L2092
 	ubfiz	x24, x20, 1, 16
 	ldrh	w22, [x25,x24]
 	cmp	w22, w21
-	bls	.L2018
+	bls	.L2098
 	str	x6, [x29,88]
 	bl	GetFreeBlockMinEraseCount
 	ldr	x6, [x29,88]
 	cmp	w21, w0, uxth
-	bcs	.L2018
+	bcs	.L2098
 	add	x0, x19, :lo12:.LANCHOR2
 	str	w26, [x0,920]
-.L2018:
+.L2098:
 	cmp	w22, w23
-	bcs	.L2012
+	bcs	.L2092
 	add	w0, w22, 128
 	cmp	w6, w0
-	ble	.L2012
+	ble	.L2092
 	add	w0, w22, 256
 	cmp	w0, w23
-	bcc	.L2019
+	bcc	.L2099
 	add	x0, x19, :lo12:.LANCHOR2
 	add	w22, w22, 768
 	ldr	w0, [x0,916]
 	cmp	w22, w0
-	bcs	.L2012
-.L2019:
+	bcs	.L2092
+.L2099:
 	add	x19, x19, :lo12:.LANCHOR2
-	adrp	x0, .LC120
+	adrp	x0, .LC141
 	ldrh	w5, [x25,x24]
-	add	x0, x0, :lo12:.LC120
+	add	x0, x0, :lo12:.LC141
 	mov	w1, w20
 	mov	w2, w23
 	ldr	x4, [x19,1184]
@@ -13671,7 +14458,7 @@ GetSwlReplaceBlock:
 	mov	w0, 1
 	str	w0, [x19,928]
 	mov	w0, w20
-.L2011:
+.L2091:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -13688,13 +14475,13 @@ free_data_superblock:
 	mov	w1, 65535
 	cmp	w0, w1
 	add	x29, sp, 0
-	beq	.L2036
+	beq	.L2116
 	adrp	x2, .LANCHOR2+1184
 	ubfiz	x1, x0, 1, 16
 	ldr	x2, [x2,#:lo12:.LANCHOR2+1184]
 	strh	wzr, [x2,x1]
 	bl	INSERT_FREE_LIST
-.L2036:
+.L2116:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -13713,15 +14500,15 @@ allocate_data_superblock:
 	stp	x25, x26, [sp,64]
 	ldr	w1, [x19,1400]
 	stp	x27, x28, [sp,80]
-	cbnz	w1, .L2038
+	cbnz	w1, .L2118
 	mov	x20, x0
 	add	x23, x19, 3704
 	adrp	x22, .LANCHOR0
 	mov	w24, 7
 	add	x25, x19, 3592
-.L2039:
+.L2119:
 	cmp	x20, x23
-	bne	.L2040
+	bne	.L2120
 	ldrh	w2, [x19,3600]
 	ldr	w4, [x19,928]
 	lsr	w3, w2, 1
@@ -13730,43 +14517,43 @@ allocate_data_superblock:
 	add	w1, w1, w0, lsr 2
 	ldr	w0, [x19,652]
 	uxth	w1, w1
-	cbz	w0, .L2041
+	cbz	w0, .L2121
 	ldr	w0, [x19,920]
 	cmp	w0, 29
-	bhi	.L2041
+	bhi	.L2121
 	cmp	w0, 2
 	mov	w1, 0
-	bls	.L2042
-	tbz	x2, 0, .L2069
-	cbz	w4, .L2042
-.L2069:
+	bls	.L2122
+	tbz	x2, 0, .L2149
+	cbz	w4, .L2122
+.L2149:
 	mov	w1, w3
-	b	.L2041
-.L2040:
+	b	.L2121
+.L2120:
 	ldrb	w0, [x20,8]
 	mov	w1, 0
 	cmp	w0, 1
-	bne	.L2042
+	bne	.L2122
 	ldrh	w0, [x19,768]
 	cmp	w0, 1
-	beq	.L2042
+	beq	.L2122
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbnz	w0, .L2042
+	cbnz	w0, .L2122
 	ldr	w2, [x19,652]
 	ldrh	w0, [x19,3600]
 	lsr	w1, w0, 3
-	cbz	w2, .L2041
+	cbz	w2, .L2121
 	ldr	w2, [x19,920]
 	cmp	w2, 1
-	bhi	.L2041
+	bhi	.L2121
 	mul	w1, w0, w24
 	lsr	w1, w1, 3
-.L2041:
-	cbz	w1, .L2042
+.L2121:
+	cbz	w1, .L2122
 	sub	w1, w1, #1
 	uxth	w1, w1
-.L2042:
+.L2122:
 	ldrb	w2, [x20,8]
 	mov	x0, x25
 	bl	List_pop_index_node
@@ -13778,20 +14565,20 @@ allocate_data_superblock:
 	mov	x0, x20
 	bl	make_superblock
 	ldrb	w0, [x20,7]
-	cbz	w0, .L2044
+	cbz	w0, .L2124
 	mov	x0, 0
 	ldrh	w5, [x19,748]
 	mov	w26, w0
 	mov	x3, 56
 	mov	w6, 65535
-	b	.L2045
-.L2044:
+	b	.L2125
+.L2124:
 	ubfiz	x27, x27, 1, 16
 	ldr	x0, [x19,1184]
 	mov	w1, -1
 	strh	w1, [x0,x27]
-	b	.L2039
-.L2048:
+	b	.L2119
+.L2128:
 	ldr	x4, [x19,1016]
 	madd	x1, x0, x3, x4
 	str	xzr, [x1,16]
@@ -13799,40 +14586,40 @@ allocate_data_superblock:
 	add	x1, x20, x0, lsl 1
 	ldrh	w1, [x1,16]
 	cmp	w1, w6
-	beq	.L2047
+	beq	.L2127
 	umull	x2, w26, w3
 	add	w26, w26, 1
 	lsl	w1, w1, 10
 	add	x2, x4, x2
 	uxth	w26, w26
 	str	w1, [x2,4]
-.L2047:
+.L2127:
 	add	x0, x0, 1
-.L2045:
+.L2125:
 	cmp	w5, w0, uxth
-	bhi	.L2048
+	bhi	.L2128
 	add	x0, x19, 3608
 	uxtw	x28, w27
 	cmp	x20, x0
-	bne	.L2049
+	bne	.L2129
 	ldr	w1, [x19,652]
-	cbz	w1, .L2049
+	cbz	w1, .L2129
 	ldr	x1, [x19,1168]
 	ldrh	w1, [x1,x28,lsl 1]
 	cmp	w1, 30
-	bls	.L2049
+	bls	.L2129
 	strb	wzr, [x19,3616]
-.L2049:
+.L2129:
 	ldrb	w0, [x20,8]
-	cbnz	w0, .L2050
+	cbnz	w0, .L2130
 	lsl	x0, x28, 1
 	ldr	x1, [x19,1168]
 	mov	w2, 2
 	ldrh	w3, [x1,x0]
-	cbz	w3, .L2094
+	cbz	w3, .L2174
 	ldrh	w2, [x19,808]
 	add	w2, w3, w2
-.L2094:
+.L2174:
 	strh	w2, [x1,x0]
 	mov	w1, 0
 	ldr	w0, [x19,904]
@@ -13840,8 +14627,8 @@ allocate_data_superblock:
 	str	w0, [x19,904]
 	mov	w0, w27
 	bl	ftl_set_blk_mode
-	b	.L2053
-.L2050:
+	b	.L2133
+.L2130:
 	lsl	x0, x28, 1
 	ldr	x2, [x19,1168]
 	ldrh	w1, [x2,x0]
@@ -13852,15 +14639,15 @@ allocate_data_superblock:
 	str	w0, [x19,908]
 	mov	w0, w27
 	bl	ftl_set_blk_mode.part.17
-.L2053:
+.L2133:
 	lsl	x28, x28, 1
 	ldr	x0, [x19,1168]
 	ldr	w1, [x19,916]
 	ldrh	w0, [x0,x28]
 	cmp	w0, w1
-	bls	.L2054
+	bls	.L2134
 	str	w0, [x19,916]
-.L2054:
+.L2134:
 	ldrh	w1, [x19,808]
 	mov	x3, 56
 	ldr	w2, [x19,904]
@@ -13868,39 +14655,39 @@ allocate_data_superblock:
 	madd	w0, w1, w2, w0
 	ldrh	w1, [x19,756]
 	udiv	w0, w0, w1
-	adrp	x1, .LANCHOR4+140
-	str	w0, [x1,#:lo12:.LANCHOR4+140]
+	adrp	x1, .LANCHOR4+3980
+	str	w0, [x1,#:lo12:.LANCHOR4+3980]
 	ldr	x1, [x19,1160]
 	ldr	w0, [x1,16]
 	add	w0, w0, 1
 	str	w0, [x1,16]
 	mov	x0, 0
-.L2055:
+.L2135:
 	cmp	w26, w0, uxth
-	bls	.L2096
+	bls	.L2176
 	ldr	x1, [x19,1016]
 	madd	x1, x0, x3, x1
 	add	x0, x0, 1
 	ldr	w2, [x1,4]
 	and	w2, w2, -1024
 	str	w2, [x1,4]
-	b	.L2055
-.L2096:
+	b	.L2135
+.L2176:
 	add	x0, x22, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L2057
+	cbz	w0, .L2137
 	ldrb	w0, [x20,8]
 	cmp	w0, 1
 	ldr	x0, [x19,1016]
-	bne	.L2058
+	bne	.L2138
 	mov	w1, 0
-	b	.L2095
-.L2058:
+	b	.L2175
+.L2138:
 	mov	w1, 1
-.L2095:
+.L2175:
 	mov	w2, w26
 	bl	FlashEraseBlocks
-.L2057:
+.L2137:
 	ldrb	w1, [x20,8]
 	mov	w2, w26
 	ldr	x0, [x19,1016]
@@ -13908,15 +14695,15 @@ allocate_data_superblock:
 	mov	x1, 0
 	mov	x4, 56
 	mov	w2, w1
-.L2059:
+.L2139:
 	cmp	w26, w1, uxth
-	bls	.L2097
+	bls	.L2177
 	mul	x0, x1, x4
 	ldr	x3, [x19,1016]
 	add	x5, x3, x0
 	ldr	w3, [x3,x0]
 	cmn	w3, #1
-	bne	.L2060
+	bne	.L2140
 	ldr	w0, [x5,4]
 	add	w2, w2, 1
 	str	x4, [x29,104]
@@ -13935,22 +14722,22 @@ allocate_data_superblock:
 	ldrb	w0, [x20,7]
 	sub	w0, w0, #1
 	strb	w0, [x20,7]
-.L2060:
+.L2140:
 	add	x1, x1, 1
-	b	.L2059
-.L2097:
-	cbz	w2, .L2062
+	b	.L2139
+.L2177:
+	cbz	w2, .L2142
 	mov	w0, w27
 	bl	update_multiplier_value
 	bl	FtlBbmTblFlush
-.L2062:
+.L2142:
 	ldrb	w0, [x20,7]
-	cbnz	w0, .L2063
+	cbnz	w0, .L2143
 	ldr	x0, [x19,1184]
 	mov	w1, -1
 	strh	w1, [x0,x28]
-	b	.L2039
-.L2063:
+	b	.L2119
+.L2143:
 	add	x21, x21, :lo12:.LANCHOR2
 	strh	wzr, [x20,2]
 	strb	wzr, [x20,6]
@@ -13966,7 +14753,7 @@ allocate_data_superblock:
 	ldr	x1, [x21,1184]
 	ldrh	w2, [x20]
 	strh	w0, [x1,x2,lsl 1]
-.L2038:
+.L2118:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -13980,20 +14767,20 @@ allocate_data_superblock:
 	.global	FtlGcBufInit
 	.type	FtlGcBufInit, %function
 FtlGcBufInit:
-	adrp	x0, .LANCHOR4+144
+	adrp	x0, .LANCHOR4+3984
 	mov	w1, 0
 	adrp	x7, .LANCHOR2
 	mov	w8, 24
 	mov	w9, 1
 	mov	w4, 4
-	str	wzr, [x0,#:lo12:.LANCHOR4+144]
+	str	wzr, [x0,#:lo12:.LANCHOR4+3984]
 	mov	w10, 56
-.L2099:
+.L2179:
 	add	x2, x7, :lo12:.LANCHOR2
 	adrp	x6, .LANCHOR2
 	ldrh	w0, [x2,748]
 	cmp	w1, w0
-	bcs	.L2103
+	bcs	.L2183
 	umull	x3, w1, w8
 	ldr	x5, [x2,1104]
 	ldr	x6, [x2,1072]
@@ -14021,15 +14808,15 @@ FtlGcBufInit:
 	str	x2, [x0,8]
 	ldr	x2, [x5,8]
 	str	x2, [x0,16]
-	b	.L2099
-.L2103:
+	b	.L2179
+.L2183:
 	mov	w7, 24
 	mov	w4, 4
-.L2101:
+.L2181:
 	add	x1, x6, :lo12:.LANCHOR2
 	ldr	w2, [x1,1040]
 	cmp	w0, w2
-	bcs	.L2104
+	bcs	.L2184
 	umull	x3, w0, w7
 	ldr	x5, [x1,1104]
 	ldr	x8, [x1,1072]
@@ -14050,8 +14837,8 @@ FtlGcBufInit:
 	uxth	w0, w0
 	add	x1, x1, x2, sxtw 2
 	str	x1, [x3,8]
-	b	.L2101
-.L2104:
+	b	.L2181
+.L2184:
 	ret
 	.size	FtlGcBufInit, .-FtlGcBufInit
 	.align	2
@@ -14059,23 +14846,23 @@ FtlGcBufInit:
 	.type	FtlVariablesInit, %function
 FtlVariablesInit:
 	stp	x29, x30, [sp, -32]!
-	adrp	x0, .LANCHOR4
-	mov	w1, -1
+	mov	w0, -1
+	mov	w1, 0
 	add	x29, sp, 0
-	str	x19, [sp,16]
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR4
 	adrp	x19, .LANCHOR2
 	add	x19, x19, :lo12:.LANCHOR2
-	add	x0, x0, :lo12:.LANCHOR4
+	add	x20, x20, :lo12:.LANCHOR4
 	ldrh	w2, [x19,840]
-	strh	w1, [x0,160]
-	mov	w1, -1
-	str	xzr, [x0,152]
+	strh	w0, [x20,4000]
+	mov	w0, -1
+	str	w0, [x20,4012]
 	lsl	w2, w2, 1
-	str	w1, [x0,172]
-	mov	w1, 0
-	str	wzr, [x0,164]
-	str	wzr, [x0,168]
 	ldr	x0, [x19,1208]
+	str	xzr, [x20,3992]
+	str	wzr, [x20,4004]
+	str	wzr, [x20,4008]
 	str	wzr, [x19,652]
 	strh	wzr, [x19,1392]
 	bl	ftl_memset
@@ -14095,12 +14882,12 @@ FtlVariablesInit:
 	bl	ftl_memset
 	mov	w1, 0
 	mov	w2, 512
-	add	x0, x19, 3968
+	add	x0, x20, 3456
 	bl	ftl_memset
 	bl	FtlGcBufInit
 	bl	FtlL2PDataInit
-	ldr	x19, [sp,16]
 	mov	w0, 0
+	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	FtlVariablesInit, .-FtlVariablesInit
@@ -14115,32 +14902,32 @@ FtlGcBufFree:
 	mov	w9, 24
 	ldr	w8, [x2,1040]
 	ldr	x5, [x2,1104]
-.L2107:
+.L2187:
 	cmp	w3, w1
-	bcs	.L2106
+	bcs	.L2186
 	umull	x4, w3, w7
 	mov	w2, 0
 	add	x4, x0, x4
-.L2112:
+.L2192:
 	cmp	w2, w8
-	bcs	.L2109
+	bcs	.L2189
 	umull	x6, w2, w9
 	add	x10, x5, x6
 	ldr	x11, [x5,x6]
 	ldr	x6, [x4,8]
 	cmp	x11, x6
-	bne	.L2108
+	bne	.L2188
 	str	wzr, [x10,16]
-	b	.L2109
-.L2108:
+	b	.L2189
+.L2188:
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L2112
-.L2109:
+	b	.L2192
+.L2189:
 	add	w3, w3, 1
 	uxth	w3, w3
-	b	.L2107
-.L2106:
+	b	.L2187
+.L2186:
 	ret
 	.size	FtlGcBufFree, .-FtlGcBufFree
 	.align	2
@@ -14155,17 +14942,17 @@ FtlGcBufAlloc:
 	ldr	w5, [x2,1040]
 	ldr	x6, [x2,1104]
 	mov	w2, 0
-.L2114:
+.L2194:
 	cmp	w2, w1
-	bcs	.L2120
+	bcs	.L2200
 	mov	w3, 0
-.L2118:
+.L2198:
 	cmp	w3, w5
-	bcs	.L2116
+	bcs	.L2196
 	umull	x4, w3, w7
 	add	x4, x6, x4
 	ldr	w10, [x4,16]
-	cbnz	w10, .L2115
+	cbnz	w10, .L2195
 	umull	x3, w2, w9
 	str	w8, [x4,16]
 	add	x3, x0, x3
@@ -14173,41 +14960,41 @@ FtlGcBufAlloc:
 	str	x10, [x3,8]
 	ldr	x4, [x4,8]
 	str	x4, [x3,16]
-	b	.L2116
-.L2115:
+	b	.L2196
+.L2195:
 	add	w3, w3, 1
 	uxth	w3, w3
-	b	.L2118
-.L2116:
+	b	.L2198
+.L2196:
 	add	w2, w2, 1
 	uxth	w2, w2
-	b	.L2114
-.L2120:
+	b	.L2194
+.L2200:
 	ret
 	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
 	.align	2
 	.global	IsBlkInGcList
 	.type	IsBlkInGcList, %function
 IsBlkInGcList:
-	adrp	x1, .LANCHOR4+176
+	adrp	x1, .LANCHOR4+4016
 	uxth	w0, w0
-	ldrh	w2, [x1,#:lo12:.LANCHOR4+176]
+	ldrh	w2, [x1,#:lo12:.LANCHOR4+4016]
 	adrp	x1, .LANCHOR2+976
 	ldr	x3, [x1,#:lo12:.LANCHOR2+976]
 	mov	x1, 0
-.L2122:
+.L2202:
 	cmp	w2, w1, uxth
-	bls	.L2126
+	bls	.L2206
 	add	x1, x1, 1
 	add	x4, x3, x1, lsl 1
 	ldrh	w4, [x4,-2]
 	cmp	w4, w0
-	bne	.L2122
+	bne	.L2202
 	mov	w0, 1
-	b	.L2123
-.L2126:
+	b	.L2203
+.L2206:
 	mov	w0, 0
-.L2123:
+.L2203:
 	ret
 	.size	IsBlkInGcList, .-IsBlkInGcList
 	.align	2
@@ -14228,33 +15015,33 @@ FtlGcUpdatePage:
 	ldr	x1, [x29,32]
 	uxth	w9, w0
 	mov	x6, 0
-	ldrh	w8, [x4,176]
+	ldrh	w8, [x4,4016]
 	adrp	x4, .LANCHOR2
 	add	x5, x4, :lo12:.LANCHOR2
 	ldr	x7, [x5,976]
-.L2128:
+.L2208:
 	uxth	w5, w6
 	cmp	w5, w8
-	bcs	.L2132
+	bcs	.L2212
 	add	x6, x6, 1
 	add	x10, x7, x6, lsl 1
 	ldrh	w10, [x10,-2]
 	cmp	w10, w9
-	bne	.L2128
-.L2132:
+	bne	.L2208
+.L2212:
 	cmp	w5, w8
-	bne	.L2130
+	bne	.L2210
 	ubfiz	x5, x5, 1, 16
 	strh	w0, [x7,x5]
 	add	x0, x3, :lo12:.LANCHOR4
-	ldrh	w5, [x0,176]
+	ldrh	w5, [x0,4016]
 	add	w5, w5, 1
-	strh	w5, [x0,176]
-.L2130:
+	strh	w5, [x0,4016]
+.L2210:
 	add	x3, x3, :lo12:.LANCHOR4
 	add	x4, x4, :lo12:.LANCHOR2
 	mov	w0, 12
-	ldrh	w5, [x3,178]
+	ldrh	w5, [x3,4018]
 	ldr	x6, [x4,984]
 	umull	x5, w5, w0
 	add	x6, x6, x5
@@ -14263,9 +15050,9 @@ FtlGcUpdatePage:
 	add	x0, x1, x5
 	str	w2, [x0,8]
 	str	w19, [x1,x5]
-	ldrh	w0, [x3,178]
+	ldrh	w0, [x3,4018]
 	add	w0, w0, 1
-	strh	w0, [x3,178]
+	strh	w0, [x3,4018]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -14283,8 +15070,8 @@ FtlGcPageVarInit:
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x0, x0, :lo12:.LANCHOR4
 	ldrh	w2, [x19,822]
-	strh	wzr, [x0,176]
-	strh	wzr, [x0,178]
+	strh	wzr, [x0,4016]
+	strh	wzr, [x0,4018]
 	lsl	w2, w2, 1
 	ldr	x0, [x19,976]
 	bl	ftl_memset
@@ -14318,49 +15105,49 @@ FtlGcScanTempBlk:
 	ldrh	w26, [x0,3068]
 	mov	w0, 65535
 	cmp	w26, w0
-	beq	.L2157
-	cbnz	w26, .L2136
-	b	.L2137
-.L2157:
+	beq	.L2237
+	cbnz	w26, .L2216
+	b	.L2217
+.L2237:
 	mov	w26, 0
-.L2136:
+.L2216:
 	adrp	x0, .LANCHOR2+818
 	ldr	w1, [x29,152]
 	ldrh	w0, [x0,#:lo12:.LANCHOR2+818]
 	cmp	w1, w0
-	bne	.L2138
-.L2137:
+	bne	.L2218
+.L2217:
 	bl	FtlGcPageVarInit
-.L2138:
+.L2218:
 	mov	w0, -1
 	adrp	x25, .LANCHOR2
 	str	w0, [x29,156]
-	adrp	x0, .LC121
-	add	x0, x0, :lo12:.LC121
+	adrp	x0, .LC142
+	add	x0, x0, :lo12:.LC142
 	mov	w22, 0
 	mov	w23, 65535
 	mov	x21, x25
 	mov	x24, x25
 	str	x0, [x29,128]
-.L2151:
+.L2231:
 	ldrh	w0, [x19]
 	strb	wzr, [x19,8]
 	cmp	w0, w23
-	beq	.L2158
-.L2140:
-.L2154:
+	beq	.L2238
+.L2220:
+.L2234:
 	add	x0, x25, :lo12:.LANCHOR2
 	mov	x2, x19
 	mov	w20, 0
 	ldrh	w5, [x0,748]
 	ldrh	w8, [x0,830]
 	add	x5, x19, x5, lsl 1
-.L2141:
+.L2221:
 	cmp	x2, x5
-	beq	.L2166
+	beq	.L2246
 	ldrh	w1, [x2,16]
 	cmp	w1, w23
-	beq	.L2142
+	beq	.L2222
 	add	x6, x21, :lo12:.LANCHOR2
 	mov	w0, 56
 	orr	w1, w26, w1, lsl 10
@@ -14379,19 +15166,19 @@ FtlGcScanTempBlk:
 	sdiv	w1, w1, w3
 	add	x1, x6, x1, sxtw 2
 	str	x1, [x0,16]
-.L2142:
+.L2222:
 	add	x2, x2, 2
-	b	.L2141
-.L2166:
+	b	.L2221
+.L2246:
 	add	x0, x21, :lo12:.LANCHOR2
 	mov	w1, w20
 	mov	w2, 0
 	mov	x27, 0
 	ldr	x0, [x0,992]
 	bl	FlashReadPages
-.L2144:
+.L2224:
 	cmp	w20, w27, uxth
-	bls	.L2167
+	bls	.L2247
 	mov	x0, 56
 	mul	x28, x27, x0
 	add	x0, x21, :lo12:.LANCHOR2
@@ -14408,53 +15195,53 @@ FtlGcScanTempBlk:
 	ldr	x8, [x29,104]
 	ldr	x2, [x29,120]
 	ldr	w0, [x8,x28]
-	cbnz	w0, .L2145
+	cbnz	w0, .L2225
 	ldr	x1, [x29,112]
 	add	x27, x27, 1
 	ldr	x5, [x1,16]
 	ldrh	w0, [x5]
 	cmp	w0, w23
-	bne	.L2146
-	adrp	x0, .LANCHOR4+168
+	bne	.L2226
+	adrp	x0, .LANCHOR4+4008
 	mov	w1, 1
-	str	w1, [x0,#:lo12:.LANCHOR4+168]
-	b	.L2139
-.L2146:
+	str	w1, [x0,#:lo12:.LANCHOR4+4008]
+	b	.L2219
+.L2226:
 	mov	w1, w2
 	ldr	w0, [x5,12]
 	ldr	w2, [x5,8]
 	bl	FtlGcUpdatePage
-	b	.L2144
-.L2145:
+	b	.L2224
+.L2225:
 	ldr	x0, [x29,128]
 	ldrh	w1, [x19]
 	bl	printk
 	ldr	x0, [x29,144]
 	ldr	w0, [x0,652]
-	cbnz	w0, .L2147
+	cbnz	w0, .L2227
 	adrp	x0, .LANCHOR0+136
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
-	cbz	w0, .L2148
-.L2147:
+	cbz	w0, .L2228
+.L2227:
 	add	x0, x24, :lo12:.LANCHOR2
 	ldrh	w1, [x19]
 	ldr	x0, [x0,1168]
 	ldrh	w0, [x0,x1,lsl 1]
 	cmp	w0, 119
-	bls	.L2149
-.L2148:
+	bls	.L2229
+.L2228:
 	add	x0, x24, :lo12:.LANCHOR2
 	ldr	x0, [x0,992]
 	ldr	w0, [x0,x28]
 	cmn	w0, #1
-	bne	.L2150
-.L2149:
+	bne	.L2230
+.L2229:
 	add	x0, x24, :lo12:.LANCHOR2
 	ldr	x0, [x0,992]
 	add	x5, x0, x28
 	ldr	w0, [x5,4]
 	str	w0, [x29,156]
-.L2150:
+.L2230:
 	add	x0, x24, :lo12:.LANCHOR2
 	ldrh	w1, [x19]
 	mov	w26, 0
@@ -14465,36 +15252,36 @@ FtlGcScanTempBlk:
 	mov	w0, -1
 	strh	w0, [x19]
 	bl	FtlGcPageVarInit
-	b	.L2151
-.L2167:
+	b	.L2231
+.L2247:
 	ldr	w0, [x29,152]
 	add	w22, w22, 1
 	add	w3, w26, 1
 	cmp	w22, w0
 	uxth	w26, w3
-	bcs	.L2153
-.L2155:
+	bcs	.L2233
+.L2235:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldrh	w0, [x0,818]
 	cmp	w0, w26
-	bhi	.L2154
-	b	.L2158
-.L2153:
+	bhi	.L2234
+	b	.L2238
+.L2233:
 	ldr	x0, [x29,136]
 	add	x1, x0, :lo12:.LANCHOR1
 	ldrh	w0, [x1,3068]
 	cmp	w0, w23
-	beq	.L2155
+	beq	.L2235
 	add	w0, w0, w22
 	strh	w0, [x1,3068]
 	add	x0, x21, :lo12:.LANCHOR2
 	ldrh	w0, [x0,818]
 	cmp	w0, w26
-	bls	.L2155
-	b	.L2156
-.L2158:
+	bls	.L2235
+	b	.L2236
+.L2238:
 	mov	w6, 0
-.L2139:
+.L2219:
 	ldr	x0, [x29,136]
 	mov	w1, w26
 	strh	w26, [x19,2]
@@ -14505,7 +15292,7 @@ FtlGcScanTempBlk:
 	strh	w0, [x20,3068]
 	mov	x0, x19
 	bl	ftl_sb_update_avl_pages
-.L2156:
+.L2236:
 	ldr	w0, [x29,156]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -14523,28 +15310,28 @@ FtlGcRefreshOpenBlock:
 	add	x29, sp, 0
 	str	x19, [sp,16]
 	uxth	w19, w0
-	adrp	x0, .LC122
+	adrp	x0, .LC143
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC122
+	add	x0, x0, :lo12:.LC143
 	bl	printk
 	adrp	x2, .LANCHOR2
 	add	x2, x2, :lo12:.LANCHOR2
 	ldrh	w3, [x2,948]
 	cmp	w3, w19
-	beq	.L2169
+	beq	.L2249
 	ldrh	w1, [x2,950]
 	cmp	w1, w19
-	beq	.L2169
+	beq	.L2249
 	mov	w0, 65535
 	cmp	w3, w0
-	bne	.L2170
+	bne	.L2250
 	strh	w19, [x2,948]
-	b	.L2169
-.L2170:
+	b	.L2249
+.L2250:
 	cmp	w1, w0
-	bne	.L2169
+	bne	.L2249
 	strh	w19, [x2,950]
-.L2169:
+.L2249:
 	mov	w0, 0
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -14558,28 +15345,28 @@ FtlGcRefreshBlock:
 	add	x29, sp, 0
 	str	x19, [sp,16]
 	uxth	w19, w0
-	adrp	x0, .LC122
+	adrp	x0, .LC143
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC122
+	add	x0, x0, :lo12:.LC143
 	bl	printk
 	adrp	x2, .LANCHOR2
 	add	x2, x2, :lo12:.LANCHOR2
 	ldrh	w3, [x2,948]
 	cmp	w3, w19
-	beq	.L2172
+	beq	.L2252
 	ldrh	w1, [x2,950]
 	cmp	w1, w19
-	beq	.L2172
+	beq	.L2252
 	mov	w0, 65535
 	cmp	w3, w0
-	bne	.L2173
+	bne	.L2253
 	strh	w19, [x2,948]
-	b	.L2172
-.L2173:
+	b	.L2252
+.L2253:
 	cmp	w1, w0
-	bne	.L2172
+	bne	.L2252
 	strh	w19, [x2,950]
-.L2172:
+.L2252:
 	mov	w0, 0
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -14601,48 +15388,48 @@ FtlGcMarkBadPhyBlk:
 	bl	P2V_block_in_plane
 	uxth	w21, w0
 	ldrh	w1, [x22,958]
-	adrp	x0, .LC123
+	adrp	x0, .LC144
 	mov	w2, w20
-	add	x0, x0, :lo12:.LC123
+	add	x0, x0, :lo12:.LC144
 	bl	printk
 	mov	w0, w21
 	bl	FtlGcRefreshBlock
 	ldr	w0, [x22,652]
-	cbz	w0, .L2175
+	cbz	w0, .L2255
 	ubfiz	x0, x21, 1, 16
 	ldr	x2, [x22,1168]
 	ldrh	w1, [x2,x0]
 	cmp	w1, 29
-	bls	.L2175
+	bls	.L2255
 	sub	w1, w1, #30
 	strh	w1, [x2,x0]
-.L2175:
+.L2255:
 	add	x0, x19, :lo12:.LANCHOR2
 	adrp	x1, .LANCHOR4
 	add	x1, x1, :lo12:.LANCHOR4
-	add	x1, x1, 184
+	add	x1, x1, 4024
 	ldrh	w3, [x0,958]
 	mov	x0, 0
-.L2176:
+.L2256:
 	cmp	w3, w0, uxth
-	bls	.L2182
+	bls	.L2262
 	add	x0, x0, 1
 	add	x2, x1, x0, lsl 1
 	ldrh	w2, [x2,-2]
 	cmp	w2, w20
-	bne	.L2176
-	b	.L2177
-.L2182:
+	bne	.L2256
+	b	.L2257
+.L2262:
 	cmp	w3, 15
-	bhi	.L2177
+	bhi	.L2257
 	adrp	x1, .LANCHOR4
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x1, x1, :lo12:.LANCHOR4
 	add	w0, w3, 1
-	add	x1, x1, 184
+	add	x1, x1, 4024
 	strh	w0, [x19,958]
 	strh	w20, [x1,w3,sxtw 1]
-.L2177:
+.L2257:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -14660,20 +15447,20 @@ FtlGcReFreshBadBlk:
 	adrp	x19, .LANCHOR2
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w1, [x0,958]
-	cbz	w1, .L2184
+	cbz	w1, .L2264
 	ldrh	w3, [x0,948]
 	mov	w2, 65535
 	cmp	w3, w2
-	bne	.L2184
+	bne	.L2264
 	ldrh	w2, [x0,962]
 	cmp	w2, w1
-	bcc	.L2185
+	bcc	.L2265
 	strh	wzr, [x0,962]
-.L2185:
+.L2265:
 	add	x19, x19, :lo12:.LANCHOR2
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
-	add	x0, x0, 184
+	add	x0, x0, 4024
 	ldrh	w1, [x19,962]
 	ldrh	w0, [x0,w1,sxtw 1]
 	bl	P2V_block_in_plane
@@ -14681,7 +15468,7 @@ FtlGcReFreshBadBlk:
 	ldrh	w0, [x19,962]
 	add	w0, w0, 1
 	strh	w0, [x19,962]
-.L2184:
+.L2264:
 	mov	w0, 0
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -14703,15 +15490,15 @@ FtlGcFreeBadSuperBlk:
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
 	mov	w21, 0
-	cbz	w0, .L2191
+	cbz	w0, .L2271
 	adrp	x24, .LANCHOR4
-	adrp	x22, .LC124
-	add	x22, x22, :lo12:.LC124
+	adrp	x22, .LC145
+	add	x22, x22, :lo12:.LC145
 	add	x25, x24, :lo12:.LANCHOR4
-.L2199:
+.L2279:
 	ldrh	w0, [x19,748]
 	cmp	w0, w21
-	bls	.L2200
+	bls	.L2280
 	add	x0, x19, 776
 	mov	w1, w23
 	mov	w20, 0
@@ -14719,14 +15506,14 @@ FtlGcFreeBadSuperBlk:
 	ldrb	w0, [x0,w21,sxtw]
 	bl	V2P_block
 	uxth	w26, w0
-.L2192:
+.L2272:
 	ldrh	w0, [x19,958]
 	cmp	w0, w20
-	bls	.L2201
-	add	x0, x27, 184
+	bls	.L2281
+	add	x0, x27, 4024
 	ldrh	w0, [x0,w20,sxtw 1]
 	cmp	w0, w26
-	bne	.L2193
+	bne	.L2273
 	mov	w1, w26
 	mov	x0, x22
 	bl	printk
@@ -14735,29 +15522,29 @@ FtlGcFreeBadSuperBlk:
 	bl	FtlBbmTblFlush
 	ldrh	w2, [x19,958]
 	mov	w3, w20
-.L2194:
+.L2274:
 	cmp	w3, w2
-	bcs	.L2202
-	add	x4, x25, 184
+	bcs	.L2282
+	add	x4, x25, 4024
 	add	w0, w3, 1
 	ldrh	w1, [x4,w0,sxtw 1]
 	strh	w1, [x4,w3,sxtw 1]
 	uxth	w3, w0
-	b	.L2194
-.L2202:
+	b	.L2274
+.L2282:
 	sub	w2, w2, #1
 	strh	w2, [x19,958]
-.L2193:
+.L2273:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L2192
-.L2201:
+	b	.L2272
+.L2281:
 	add	w21, w21, 1
 	uxth	w21, w21
-	b	.L2199
-.L2200:
+	b	.L2279
+.L2280:
 	bl	FtlGcReFreshBadBlk
-.L2191:
+.L2271:
 	mov	w0, 0
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -14776,29 +15563,31 @@ update_vpc_list:
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR2
 	uxth	w19, w0
-	add	x1, x20, :lo12:.LANCHOR2
+	add	x2, x20, :lo12:.LANCHOR2
 	ubfiz	x0, x19, 1, 16
-	ldr	x2, [x1,1184]
-	ldrh	w2, [x2,x0]
-	cbnz	w2, .L2204
-	ldrh	w0, [x1,3920]
-	cmp	w0, w19
-	bne	.L2205
-	mov	w0, -1
-	strh	w0, [x1,3920]
-	b	.L2206
-.L2205:
-	ldrh	w3, [x1,3608]
-	mov	w0, w2
+	ldr	x1, [x2,1184]
+	ldrh	w1, [x1,x0]
+	cbnz	w1, .L2284
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrh	w3, [x0,3408]
+	cmp	w3, w19
+	bne	.L2285
+	mov	w1, -1
+	strh	w1, [x0,3408]
+	b	.L2286
+.L2285:
+	ldrh	w3, [x2,3608]
+	mov	w0, w1
 	cmp	w3, w19
-	beq	.L2207
-	ldrh	w3, [x1,3656]
+	beq	.L2287
+	ldrh	w3, [x2,3656]
 	cmp	w3, w19
-	beq	.L2207
-	ldrh	w1, [x1,3704]
-	cmp	w1, w19
-	beq	.L2207
-.L2206:
+	beq	.L2287
+	ldrh	w2, [x2,3704]
+	cmp	w2, w19
+	beq	.L2287
+.L2286:
 	add	x20, x20, :lo12:.LANCHOR2
 	mov	w1, w19
 	add	x0, x20, 3568
@@ -14811,12 +15600,12 @@ update_vpc_list:
 	mov	w0, w19
 	bl	FtlGcFreeBadSuperBlk
 	mov	w0, 1
-	b	.L2207
-.L2204:
+	b	.L2287
+.L2284:
 	mov	w0, w19
 	bl	List_update_data_list
 	mov	w0, 0
-.L2207:
+.L2287:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -14831,43 +15620,43 @@ decrement_vpc_count:
 	add	x29, sp, 0
 	str	x19, [sp,16]
 	cmp	w1, w0
-	beq	.L2212
+	beq	.L2292
 	adrp	x2, .LANCHOR2+1184
 	ubfiz	x0, x1, 1, 16
 	ldr	x2, [x2,#:lo12:.LANCHOR2+1184]
 	ldrh	w19, [x2,x0]
-	cbnz	w19, .L2213
-	adrp	x0, .LC125
+	cbnz	w19, .L2293
+	adrp	x0, .LC146
 	mov	w2, w19
-	add	x0, x0, :lo12:.LC125
+	add	x0, x0, :lo12:.LC146
 	bl	printk
-	b	.L2217
-.L2213:
+	b	.L2297
+.L2293:
 	sub	w19, w19, #1
 	strh	w19, [x2,x0]
-.L2212:
+.L2292:
 	adrp	x19, .LANCHOR4
 	mov	w0, 65535
 	add	x19, x19, :lo12:.LANCHOR4
-	ldrh	w2, [x19,160]
+	ldrh	w2, [x19,4000]
 	cmp	w2, w0
-	bne	.L2215
-	strh	w1, [x19,160]
-.L2217:
+	bne	.L2295
+	strh	w1, [x19,4000]
+.L2297:
 	mov	w0, 0
-	b	.L2214
-.L2215:
+	b	.L2294
+.L2295:
 	cmp	w2, w1
 	str	x1, [x29,40]
 	mov	w0, 0
-	beq	.L2214
+	beq	.L2294
 	mov	w0, w2
 	bl	update_vpc_list
 	cmp	w0, wzr
 	ldr	x1, [x29,40]
 	cset	w0, ne
-	strh	w1, [x19,160]
-.L2214:
+	strh	w1, [x19,4000]
+.L2294:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -14887,7 +15676,7 @@ FtlRecoverySuperblock:
 	mov	x19, x0
 	ldrh	w0, [x0]
 	cmp	w0, w2
-	beq	.L2376
+	beq	.L2456
 	ldrh	w0, [x19,2]
 	adrp	x20, .LANCHOR2
 	str	w0, [x29,188]
@@ -14896,44 +15685,44 @@ FtlRecoverySuperblock:
 	ldr	w1, [x29,188]
 	ldrh	w0, [x0,818]
 	cmp	w0, w1
-	bne	.L2221
+	bne	.L2301
 	strh	wzr, [x19,4]
-	b	.L2382
-.L2221:
+	b	.L2462
+.L2301:
 	ldrh	w0, [x19,16]
 	mov	w1, 0
-.L2222:
+.L2302:
 	cmp	w0, w2
-	bne	.L2385
+	bne	.L2465
 	add	w1, w1, 1
 	uxth	w1, w1
 	add	x0, x19, x1, sxtw 1
 	ldrh	w0, [x0,16]
-	b	.L2222
-.L2385:
+	b	.L2302
+.L2465:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2224
+	bne	.L2304
 	bl	FtlGetLastWrittenPage
 	cmn	w0, #1
 	mov	w21, w0
-	beq	.L2225
+	beq	.L2305
 	adrp	x0, .LANCHOR0
 	mov	w23, w21
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w1, [x0,136]
-	cbnz	w1, .L2299
+	cbnz	w1, .L2379
 	add	x0, x0, 140
 	ldrh	w23, [x0,w21,sxtw 1]
-	b	.L2299
-.L2224:
+	b	.L2379
+.L2304:
 	mov	w1, 0
 	bl	FtlGetLastWrittenPage
 	cmn	w0, #1
 	mov	w21, w0
-	beq	.L2225
+	beq	.L2305
 	mov	w23, w0
-.L2299:
+.L2379:
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	x2, x19
 	mov	w25, 0
@@ -14943,16 +15732,16 @@ FtlRecoverySuperblock:
 	ldrh	w4, [x0,748]
 	ldrh	w7, [x0,830]
 	add	x4, x19, x4, lsl 1
-	b	.L2227
-.L2225:
+	b	.L2307
+.L2305:
 	strh	wzr, [x19,2]
-.L2382:
+.L2462:
 	strb	wzr, [x19,6]
-	b	.L2376
-.L2229:
+	b	.L2456
+.L2309:
 	ldrh	w1, [x2,16]
 	cmp	w1, w8
-	beq	.L2228
+	beq	.L2308
 	add	x5, x20, :lo12:.LANCHOR2
 	orr	w1, w23, w1, lsl 10
 	umull	x0, w25, w9
@@ -14969,21 +15758,21 @@ FtlRecoverySuperblock:
 	sdiv	w1, w1, w10
 	add	x1, x5, x1, sxtw 2
 	str	x1, [x0,16]
-.L2228:
+.L2308:
 	add	x2, x2, 2
-.L2227:
+.L2307:
 	cmp	x2, x4
-	bne	.L2229
+	bne	.L2309
 	ldrb	w0, [x19,8]
 	str	wzr, [x29,184]
 	cmp	w0, 1
-	bne	.L2230
+	bne	.L2310
 	adrp	x0, .LANCHOR0+136
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
 	cmp	w0, wzr
 	cset	w0, ne
 	str	w0, [x29,184]
-.L2230:
+.L2310:
 	add	x22, x20, :lo12:.LANCHOR2
 	ldr	w2, [x29,184]
 	mov	w1, w25
@@ -14993,26 +15782,26 @@ FtlRecoverySuperblock:
 	ldr	x0, [x22,992]
 	bl	FlashReadPages
 	ldr	w0, [x22,876]
-	adrp	x22, .LC126
+	adrp	x22, .LC147
 	str	w0, [x29,176]
-	add	x22, x22, :lo12:.LC126
+	add	x22, x22, :lo12:.LC147
 	uxth	w0, w23
 	str	w0, [x29,168]
-.L2231:
+.L2311:
 	uxth	w2, w26
 	cmp	w2, w25
-	bcs	.L2238
+	bcs	.L2318
 	add	x6, x20, :lo12:.LANCHOR2
 	mov	x0, 56
 	mul	x0, x26, x0
 	ldr	x4, [x6,992]
 	add	x1, x4, x0
 	ldr	w0, [x4,x0]
-	cbnz	w0, .L2232
+	cbnz	w0, .L2312
 	ldr	x7, [x1,16]
 	ldr	w4, [x7,4]
 	cmn	w4, #1
-	beq	.L2233
+	beq	.L2313
 	ldr	w1, [x6,876]
 	mov	w0, w4
 	str	x7, [x29,136]
@@ -15024,34 +15813,34 @@ FtlRecoverySuperblock:
 	ldr	x4, [x29,152]
 	ldr	x2, [x29,144]
 	ldr	x7, [x29,136]
-	cbz	w0, .L2233
+	cbz	w0, .L2313
 	add	w4, w4, 1
 	str	w4, [x6,876]
-.L2233:
+.L2313:
 	ldr	w0, [x7]
 	cmn	w0, #1
-	bne	.L2234
-.L2238:
+	bne	.L2314
+.L2318:
 	cmp	w2, w25
-	bne	.L2377
+	bne	.L2457
 	add	x0, x20, :lo12:.LANCHOR2
 	add	w21, w21, 1
 	uxth	w21, w21
 	ldr	x0, [x0,992]
 	ldr	w0, [x0,4]
-	b	.L2378
-.L2232:
+	b	.L2458
+.L2312:
 	ldr	w1, [x1,4]
 	mov	x0, x22
 	bl	printk
 	ldr	w24, [x29,168]
 	add	x0, x27, :lo12:.LANCHOR4
 	ldrh	w1, [x19]
-	strh	w1, [x0,218]
-.L2234:
+	strh	w1, [x0,4058]
+.L2314:
 	add	x26, x26, 1
-	b	.L2231
-.L2377:
+	b	.L2311
+.L2457:
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	w1, 56
 	uxth	w21, w21
@@ -15059,83 +15848,83 @@ FtlRecoverySuperblock:
 	ldr	x0, [x0,992]
 	add	x2, x0, x2
 	ldr	w0, [x2,4]
-.L2378:
+.L2458:
 	lsr	x0, x0, 10
 	bl	P2V_plane
 	uxth	w26, w0
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2240
+	bne	.L2320
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w2, [x0,136]
-	cbnz	w2, .L2240
+	cbnz	w2, .L2320
 	add	x0, x0, 140
 	ldrh	w21, [x0,w21,sxtw 1]
-.L2240:
+.L2320:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x0,818]
 	cmp	w0, w21
-	bne	.L2241
+	bne	.L2321
 	strh	w21, [x19,2]
 	strb	wzr, [x19,6]
 	strh	wzr, [x19,4]
-.L2241:
+.L2321:
 	uxth	w0, w28
 	str	w0, [x29,152]
 	ldr	w0, [x29,188]
 	cmp	w21, w0
-	bne	.L2242
+	bne	.L2322
 	ldr	w0, [x29,152]
 	cmp	w26, w0
-	beq	.L2383
-.L2242:
+	beq	.L2463
+.L2322:
 	ldr	w0, [x29,176]
 	adrp	x25, .LANCHOR4
 	sub	w22, w0, #1
 	mov	w0, 65535
 	cmp	w24, w0
-	bne	.L2243
-	cbnz	w1, .L2244
-.L2243:
+	bne	.L2323
+	cbnz	w1, .L2324
+.L2323:
 	add	x0, x25, :lo12:.LANCHOR4
 	uxth	w6, w23
-	ldr	w1, [x0,172]
+	ldr	w1, [x0,4012]
 	cmn	w1, #1
-	bne	.L2245
-	str	w22, [x0,172]
-.L2245:
+	bne	.L2325
+	str	w22, [x0,4012]
+.L2325:
 	add	x0, x25, :lo12:.LANCHOR4
 	ldr	w24, [x29,188]
-	ldr	w3, [x0,172]
+	ldr	w3, [x0,4012]
 	ldr	w0, [x29,188]
 	add	w0, w0, 7
 	cmp	w0, w23, uxth
-	bge	.L2246
+	bge	.L2326
 	sub	w24, w6, #7
 	uxth	w24, w24
-.L2246:
+.L2326:
 	adrp	x7, .LANCHOR0
 	mov	w28, -1
 	add	x5, x7, :lo12:.LANCHOR0
 	mov	w27, w28
 	mov	w4, 65535
 	add	x5, x5, 652
-.L2247:
+.L2327:
 	cmp	w24, w6
-	bhi	.L2260
+	bhi	.L2340
 	add	x0, x20, :lo12:.LANCHOR2
 	mov	w23, 0
 	mov	w10, 56
 	ldrh	w2, [x0,748]
 	mov	x0, x19
 	add	x2, x19, x2, lsl 1
-.L2261:
+.L2341:
 	cmp	x0, x2
-	beq	.L2386
+	beq	.L2466
 	ldrh	w1, [x0,16]
 	cmp	w1, w4
-	beq	.L2248
+	beq	.L2328
 	add	x9, x20, :lo12:.LANCHOR2
 	orr	w1, w24, w1, lsl 10
 	umull	x8, w23, w10
@@ -15144,10 +15933,10 @@ FtlRecoverySuperblock:
 	uxth	w23, w23
 	add	x8, x9, x8
 	str	w1, [x8,4]
-.L2248:
+.L2328:
 	add	x0, x0, 2
-	b	.L2261
-.L2386:
+	b	.L2341
+.L2466:
 	add	x8, x20, :lo12:.LANCHOR2
 	ldr	w2, [x29,184]
 	mov	w1, w23
@@ -15171,99 +15960,99 @@ FtlRecoverySuperblock:
 	ldr	x0, [x8,992]
 	ldr	x5, [x29,128]
 	add	x0, x0, 16
-.L2250:
+.L2330:
 	cmp	w1, w23
-	beq	.L2387
+	beq	.L2467
 	ldr	w2, [x0,-16]
-	cbnz	w2, .L2251
+	cbnz	w2, .L2331
 	ldr	x2, [x0]
 	ldrh	w8, [x2]
 	cmp	w8, w4
-	beq	.L2252
+	beq	.L2332
 	ldr	w8, [x2,4]
 	cmn	w8, #1
-	beq	.L2252
+	beq	.L2332
 	add	x2, x25, :lo12:.LANCHOR4
 	cmn	w28, #1
-	ldr	w27, [x2,172]
-	str	w8, [x2,172]
-	bne	.L2252
+	ldr	w27, [x2,4012]
+	str	w8, [x2,4012]
+	bne	.L2332
 	ldrh	w2, [x5,x10,lsl 1]
 	cmp	w2, w4
-	bne	.L2253
-	cbz	w9, .L2252
-.L2253:
+	bne	.L2333
+	cbz	w9, .L2332
+.L2333:
 	cmp	w27, w22
 	csinv	w28, w27, wzr, ne
-	b	.L2252
-.L2251:
+	b	.L2332
+.L2331:
 	add	x0, x25, :lo12:.LANCHOR4
 	ldrh	w1, [x19]
-	strh	w1, [x0,218]
+	strh	w1, [x0,4058]
 	ldrb	w1, [x19,8]
-	cbnz	w1, .L2244
+	cbnz	w1, .L2324
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	add	x1, x1, 652
 	ldrh	w2, [x1,w24,sxtw 1]
 	mov	w1, 65535
 	cmp	w2, w1
-	bne	.L2255
+	bne	.L2335
 	cmn	w28, #1
-	beq	.L2256
-	str	w28, [x0,172]
-	b	.L2244
-.L2256:
+	beq	.L2336
+	str	w28, [x0,4012]
+	b	.L2324
+.L2336:
 	cmp	w3, w22
-	beq	.L2257
-	str	w3, [x0,172]
-	b	.L2244
-.L2257:
-	ldr	w1, [x0,172]
-	b	.L2384
-.L2255:
+	beq	.L2337
+	str	w3, [x0,4012]
+	b	.L2324
+.L2337:
+	ldr	w1, [x0,4012]
+	b	.L2464
+.L2335:
 	cmp	w27, w22
-	beq	.L2258
+	beq	.L2338
 	cmn	w27, #1
-	beq	.L2244
-	str	w27, [x0,172]
-	b	.L2244
-.L2258:
-	ldr	w1, [x0,172]
+	beq	.L2324
+	str	w27, [x0,4012]
+	b	.L2324
+.L2338:
+	ldr	w1, [x0,4012]
 	cmp	w1, w22
-	beq	.L2244
-.L2384:
+	beq	.L2324
+.L2464:
 	sub	w1, w1, #1
-	b	.L2379
-.L2252:
+	b	.L2459
+.L2332:
 	add	w1, w1, 1
 	add	x0, x0, 56
 	uxth	w1, w1
-	b	.L2250
-.L2387:
+	b	.L2330
+.L2467:
 	add	w24, w24, 1
 	uxth	w24, w24
-	b	.L2247
-.L2260:
+	b	.L2327
+.L2340:
 	add	x0, x25, :lo12:.LANCHOR4
 	mov	w1, -1
-.L2379:
-	str	w1, [x0,172]
-.L2244:
+.L2459:
+	str	w1, [x0,4012]
+.L2324:
 	add	x0, x25, :lo12:.LANCHOR4
 	mov	w1, 1
-	strh	w1, [x0,220]
+	strh	w1, [x0,4060]
 	add	x0, x20, :lo12:.LANCHOR2
 	add	x0, x0, 3752
 	bl	FtlMapBlkWriteDumpData
 	ldr	w23, [x29,188]
-	adrp	x0, .LC128
-	add	x0, x0, :lo12:.LC128
+	adrp	x0, .LC149
+	add	x0, x0, :lo12:.LC149
 	str	x0, [x29,128]
-	adrp	x0, .LC127
-	add	x0, x0, :lo12:.LC127
+	adrp	x0, .LC148
+	add	x0, x0, :lo12:.LC148
 	str	x0, [x29,120]
-.L2262:
+.L2342:
 	add	x0, x20, :lo12:.LANCHOR2
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
@@ -15274,12 +16063,12 @@ FtlRecoverySuperblock:
 	ldrb	w6, [x1,136]
 	mov	x1, x19
 	add	x3, x19, x3, lsl 1
-.L2263:
+.L2343:
 	cmp	x1, x3
-	beq	.L2388
+	beq	.L2468
 	ldrh	w2, [x1,16]
 	cmp	w2, w7
-	beq	.L2264
+	beq	.L2344
 	ldr	w0, [x29,176]
 	add	x5, x20, :lo12:.LANCHOR2
 	orr	w2, w23, w2, lsl 10
@@ -15289,33 +16078,33 @@ FtlRecoverySuperblock:
 	str	w2, [x4,4]
 	ldrb	w2, [x19,8]
 	cmp	w2, 1
-	bne	.L2265
-	cbz	w6, .L2265
+	bne	.L2345
+	cbz	w6, .L2345
 	ldr	x2, [x5,992]
 	add	x0, x2, x0
 	ldr	w2, [x0,4]
 	orr	w2, w2, -2147483648
 	str	w2, [x0,4]
-.L2265:
+.L2345:
 	ldr	w0, [x29,176]
 	add	w0, w0, 1
 	uxth	w0, w0
 	str	w0, [x29,176]
-.L2264:
+.L2344:
 	add	x1, x1, 2
-	b	.L2263
-.L2388:
+	b	.L2343
+.L2468:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldr	w1, [x29,176]
 	ldr	w2, [x29,184]
 	ldr	x0, [x0,992]
 	bl	FlashReadPages
 	str	xzr, [x29,160]
-.L2267:
+.L2347:
 	ldrh	w0, [x29,160]
 	ldr	w1, [x29,176]
 	cmp	w1, w0, uxth
-	bls	.L2389
+	bls	.L2469
 	ldr	x0, [x29,160]
 	mov	x24, 56
 	mul	x24, x0, x24
@@ -15331,38 +16120,38 @@ FtlRecoverySuperblock:
 	ldr	w1, [x29,188]
 	cmp	w23, w1
 	ldr	x1, [x29,168]
-	bcc	.L2268
+	bcc	.L2348
 	ldr	w2, [x29,152]
 	cmp	w0, w2
-	bcs	.L2303
+	bcs	.L2383
 	ldr	w2, [x29,188]
 	cmp	w23, w2
-	beq	.L2268
-.L2303:
+	beq	.L2348
+.L2383:
 	cmp	w0, w26
-	bne	.L2304
+	bne	.L2384
 	cmp	w23, w21
-	beq	.L2270
-.L2304:
+	beq	.L2350
+.L2384:
 	ldr	w0, [x28,x24]
 	cmn	w0, #1
-	beq	.L2272
+	beq	.L2352
 	ldr	x28, [x27,16]
 	mov	w0, 61589
 	ldrh	w1, [x28]
 	cmp	w1, w0
-	bne	.L2279
+	bne	.L2359
 	ldr	w22, [x28,4]
 	cmn	w22, #1
-	beq	.L2274
+	beq	.L2354
 	add	x27, x20, :lo12:.LANCHOR2
 	mov	w0, w22
 	ldr	w1, [x27,876]
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L2274
+	cbz	w0, .L2354
 	add	w0, w22, 1
 	str	w0, [x27,876]
-.L2274:
+.L2354:
 	ldr	w27, [x28,8]
 	add	x1, x29, 200
 	ldr	w0, [x28,12]
@@ -15372,15 +16161,15 @@ FtlRecoverySuperblock:
 	bl	log2phys
 	add	x0, x25, :lo12:.LANCHOR4
 	str	x0, [x29,136]
-	ldr	w1, [x0,172]
+	ldr	w1, [x0,4012]
 	cmn	w1, #1
-	beq	.L2275
+	beq	.L2355
 	mov	w0, w22
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L2275
+	cbz	w0, .L2355
 	ldr	w1, [x29,196]
 	cmn	w1, #1
-	beq	.L2276
+	beq	.L2356
 	add	x3, x20, :lo12:.LANCHOR2
 	str	x3, [x29,112]
 	ldr	x0, [x3,992]
@@ -15401,45 +16190,45 @@ FtlRecoverySuperblock:
 	add	x4, x2, x24
 	ldr	w0, [x2,x24]
 	cmn	w0, #1
-	bne	.L2277
-	b	.L2278
-.L2276:
+	bne	.L2357
+	b	.L2358
+.L2356:
 	ldr	w0, [x29,204]
 	ldr	w1, [x29,200]
 	cmp	w1, w0
-	bne	.L2279
+	bne	.L2359
 	mov	w0, w27
 	add	x1, x29, 196
 	mov	w2, 1
 	bl	log2phys
-.L2279:
+.L2359:
 	ldrh	w0, [x19]
-	b	.L2381
-.L2277:
+	b	.L2461
+.L2357:
 	ldr	x0, [x29,168]
 	ldr	w28, [x0,8]
 	cmp	w28, w27
-	bne	.L2278
+	bne	.L2358
 	ldr	x0, [x29,136]
 	ldr	w1, [x29,144]
 	str	x2, [x29,96]
-	ldr	w0, [x0,172]
+	ldr	w0, [x0,4012]
 	str	x3, [x29,104]
 	str	x4, [x29,112]
 	bl	ftl_cmp_data_ver
 	ldr	x4, [x29,112]
 	ldr	x3, [x29,104]
 	ldr	x2, [x29,96]
-	cbz	w0, .L2278
+	cbz	w0, .L2358
 	ldr	w0, [x29,200]
 	ldr	w1, [x29,204]
 	cmp	w0, w1
-	beq	.L2284
+	beq	.L2364
 	ldr	w1, [x29,196]
 	cmp	w0, w1
-	beq	.L2278
+	beq	.L2358
 	cmn	w0, #1
-	beq	.L2282
+	beq	.L2362
 	str	w0, [x4,4]
 	mov	w2, 0
 	ldr	x1, [x4,16]
@@ -15448,65 +16237,65 @@ FtlRecoverySuperblock:
 	mov	w1, 1
 	add	x0, x0, x24
 	bl	FlashReadPages
-	b	.L2283
-.L2282:
+	b	.L2363
+.L2362:
 	str	w0, [x2,x24]
-.L2283:
+.L2363:
 	adrp	x0, .LANCHOR2+992
 	ldr	x0, [x0,#:lo12:.LANCHOR2+992]
 	ldr	w0, [x0,x24]
 	cmn	w0, #1
-	beq	.L2284
+	beq	.L2364
 	ldr	x0, [x29,168]
 	ldr	w24, [x0,4]
 	add	x0, x25, :lo12:.LANCHOR4
 	mov	w1, w24
-	ldr	w0, [x0,172]
+	ldr	w0, [x0,4012]
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L2284
+	cbz	w0, .L2364
 	ldr	w0, [x29,144]
 	mov	w1, w24
 	bl	ftl_cmp_data_ver
-	cbz	w0, .L2278
-.L2284:
+	cbz	w0, .L2358
+.L2364:
 	ldr	w1, [x29,196]
 	mov	w0, w28
 	bl	FtlReUsePrevPpa
-.L2278:
+.L2358:
 	mov	w0, -1
 	str	w0, [x29,196]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L2286
-.L2275:
+	b	.L2366
+.L2355:
 	ldr	w0, [x29,204]
 	ldr	w1, [x29,200]
 	cmp	w1, w0
-	beq	.L2286
+	beq	.L2366
 	mov	w0, w27
 	add	x1, x29, 204
 	mov	w2, 1
 	bl	log2phys
 	ldr	w24, [x29,200]
 	cmn	w24, #1
-	beq	.L2286
+	beq	.L2366
 	ldr	w0, [x29,196]
 	cmp	w24, w0
-	beq	.L2286
+	beq	.L2366
 	lsr	x0, x24, 10
 	bl	P2V_block_in_plane
 	uxth	w0, w0
 	add	x1, x20, :lo12:.LANCHOR2
 	ldrh	w2, [x1,3608]
 	cmp	w2, w0
-	beq	.L2289
+	beq	.L2369
 	ldrh	w2, [x1,3656]
 	cmp	w2, w0
-	beq	.L2289
+	beq	.L2369
 	ldrh	w1, [x1,3704]
 	cmp	w1, w0
-	bne	.L2286
-.L2289:
+	bne	.L2366
+.L2369:
 	add	x28, x20, :lo12:.LANCHOR2
 	mov	w1, 1
 	mov	w2, 0
@@ -15521,18 +16310,18 @@ FtlRecoverySuperblock:
 	ldr	w0, [x0]
 	ldr	w1, [x3,4]
 	cmn	w0, #1
-	beq	.L2286
+	beq	.L2366
 	mov	w0, w22
 	bl	ftl_cmp_data_ver
-	cbnz	w0, .L2286
+	cbnz	w0, .L2366
 	mov	w0, w27
 	add	x1, x29, 200
 	mov	w2, 1
 	bl	log2phys
-.L2286:
+.L2366:
 	ldr	w0, [x29,196]
 	cmn	w0, #1
-	beq	.L2268
+	beq	.L2348
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
@@ -15540,91 +16329,91 @@ FtlRecoverySuperblock:
 	ubfiz	x3, x1, 1, 16
 	ldr	x2, [x2,1184]
 	ldrh	w2, [x2,x3]
-	cbz	w2, .L2290
-.L2381:
+	cbz	w2, .L2370
+.L2461:
 	bl	decrement_vpc_count
-	b	.L2268
-.L2290:
+	b	.L2348
+.L2370:
 	ldr	x0, [x29,120]
 	bl	printk
-	b	.L2268
-.L2272:
+	b	.L2348
+.L2352:
 	add	x24, x25, :lo12:.LANCHOR4
 	ldrh	w0, [x19]
 	mov	w2, w22
-	strh	w0, [x24,218]
+	strh	w0, [x24,4058]
 	ldr	x0, [x29,128]
 	bl	printk
-	ldr	w0, [x24,224]
+	ldr	w0, [x24,4064]
 	cmp	w0, 31
-	bhi	.L2291
-	add	x1, x24, 232
+	bhi	.L2371
+	add	x1, x24, 4072
 	ldr	w2, [x29,204]
 	str	w2, [x1,w0,uxtw 2]
 	add	w0, w0, 1
-	str	w0, [x24,224]
-.L2291:
+	str	w0, [x24,4064]
+.L2371:
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	add	x0, x25, :lo12:.LANCHOR4
-	ldr	w1, [x0,172]
+	ldr	w1, [x0,4012]
 	cmn	w1, #1
-	beq	.L2380
+	beq	.L2460
 	cmp	w1, w22
-	bls	.L2268
-.L2380:
-	str	w22, [x0,172]
-.L2268:
+	bls	.L2348
+.L2460:
+	str	w22, [x0,4012]
+.L2348:
 	ldr	x0, [x29,160]
 	add	x0, x0, 1
 	str	x0, [x29,160]
-	b	.L2267
-.L2389:
+	b	.L2347
+.L2469:
 	ldrb	w0, [x19,8]
 	add	w23, w23, 1
 	cmp	w0, 1
 	uxth	w23, w23
-	bne	.L2294
+	bne	.L2374
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L2294
+	cbz	w0, .L2374
 	cmp	w21, w23
-	bne	.L2294
+	bne	.L2374
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x0,820]
 	cmp	w0, w23
-	beq	.L2270
-.L2294:
+	beq	.L2350
+.L2374:
 	add	x0, x20, :lo12:.LANCHOR2
 	ldrh	w1, [x0,818]
 	cmp	w23, w1
-	bne	.L2262
+	bne	.L2342
 	ldrh	w2, [x0,748]
 	mov	w3, 65535
 	strh	w23, [x19,2]
 	mov	x0, 0
 	strh	wzr, [x19,4]
-.L2296:
+.L2376:
 	uxth	w1, w0
 	cmp	w1, w2
-	bcs	.L2376
+	bcs	.L2456
 	add	x0, x0, 1
 	add	x4, x19, x0, lsl 1
 	ldrh	w4, [x4,14]
 	cmp	w4, w3
-	beq	.L2296
+	beq	.L2376
 	strb	w1, [x19,6]
-	b	.L2376
-.L2270:
+	b	.L2456
+.L2350:
 	strb	w26, [x19,6]
 	strh	w21, [x19,2]
-.L2383:
+.L2463:
 	mov	x0, x19
 	mov	w1, w21
 	mov	w2, w26
 	bl	ftl_sb_update_avl_pages
-.L2376:
+.L2456:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -15644,11 +16433,11 @@ FtlSlcSuperblockCheck:
 	stp	x21, x22, [sp,32]
 	str	x23, [sp,48]
 	ldrh	w1, [x0,4]
-	cbz	w1, .L2390
+	cbz	w1, .L2470
 	ldrh	w1, [x0]
 	mov	w20, 65535
 	cmp	w1, w20
-	beq	.L2390
+	beq	.L2470
 	mov	x19, x0
 	ldrb	w0, [x0,6]
 	adrp	x21, .LANCHOR0
@@ -15657,10 +16446,10 @@ FtlSlcSuperblockCheck:
 	add	x21, x21, :lo12:.LANCHOR0
 	add	x22, x21, 652
 	ldrh	w0, [x19,x0,lsl 1]
-.L2394:
+.L2474:
 	cmp	w0, w20
-	bne	.L2401
-.L2396:
+	bne	.L2481
+.L2476:
 	ldrb	w0, [x19,6]
 	add	x1, x23, :lo12:.LANCHOR2
 	add	w0, w0, 1
@@ -15668,51 +16457,51 @@ FtlSlcSuperblockCheck:
 	uxtb	w0, w0
 	strb	w0, [x19,6]
 	cmp	w1, w0
-	bne	.L2395
+	bne	.L2475
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L2395:
+.L2475:
 	ldrb	w0, [x19,6]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L2394
-.L2401:
+	b	.L2474
+.L2481:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2397
+	bne	.L2477
 	ldrb	w0, [x21,136]
-	cbnz	w0, .L2397
+	cbnz	w0, .L2477
 	ldrh	w0, [x19,2]
 	ldrh	w0, [x22,w0,sxtw 1]
 	cmp	w0, w20
-	bne	.L2397
+	bne	.L2477
 	ldrh	w0, [x19,4]
 	sub	w0, w0, #1
 	strh	w0, [x19,4]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
 	ldrh	w1, [x19,4]
-	cbnz	w1, .L2396
+	cbnz	w1, .L2476
 	ldrh	w0, [x19,2]
 	strb	w1, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-	b	.L2390
-.L2397:
+	b	.L2470
+.L2477:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L2390
+	cbz	w0, .L2470
 	cmp	w1, 1
-	bne	.L2390
+	bne	.L2470
 	adrp	x0, .LANCHOR2
 	ldrh	w2, [x19,2]
 	add	x0, x0, :lo12:.LANCHOR2
 	ldrh	w1, [x0,820]
 	cmp	w2, w1
-	bcc	.L2390
+	bcc	.L2470
 	ldrh	w1, [x19]
 	ldr	x3, [x0,1184]
 	lsl	x1, x1, 1
@@ -15724,7 +16513,7 @@ FtlSlcSuperblockCheck:
 	ldrh	w0, [x0,818]
 	strh	w0, [x19,2]
 	strb	wzr, [x19,6]
-.L2390:
+.L2470:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -15751,11 +16540,11 @@ get_new_active_ppa:
 	add	x0, x0, 8
 	add	x24, x20, 652
 	ldrh	w0, [x19,x0,lsl 1]
-.L2403:
+.L2483:
 	cmp	w0, w22
 	adrp	x21, .LANCHOR2
-	bne	.L2418
-.L2404:
+	bne	.L2498
+.L2484:
 	ldrb	w0, [x19,6]
 	add	x1, x23, :lo12:.LANCHOR2
 	add	w0, w0, 1
@@ -15763,33 +16552,33 @@ get_new_active_ppa:
 	uxtb	w0, w0
 	strb	w0, [x19,6]
 	cmp	w1, w0
-	bne	.L2405
+	bne	.L2485
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,6]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L2405:
+.L2485:
 	ldrb	w0, [x19,6]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L2403
-.L2418:
+	b	.L2483
+.L2498:
 	ldrb	w1, [x19,8]
 	cmp	w1, 1
-	bne	.L2406
+	bne	.L2486
 	ldrb	w1, [x20,136]
-	cbnz	w1, .L2406
+	cbnz	w1, .L2486
 	ldrh	w1, [x19,2]
 	ldrh	w1, [x24,w1,sxtw 1]
 	cmp	w1, w22
-	bne	.L2406
+	bne	.L2486
 	ldrh	w0, [x19,4]
 	sub	w0, w0, #1
 	strh	w0, [x19,4]
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L2404
-.L2406:
+	b	.L2484
+.L2486:
 	ldrh	w1, [x19,4]
 	adrp	x20, .LANCHOR0
 	ldrh	w22, [x19,2]
@@ -15800,51 +16589,51 @@ get_new_active_ppa:
 	strh	w1, [x19,4]
 	mov	w24, w23
 	add	x25, x20, 652
-.L2407:
+.L2487:
 	add	x0, x21, :lo12:.LANCHOR2
 	ldrb	w1, [x19,6]
 	ldrh	w2, [x0,748]
-.L2409:
+.L2489:
 	add	w1, w1, 1
 	uxtb	w1, w1
 	cmp	w1, w2
-	bne	.L2408
+	bne	.L2488
 	ldrh	w1, [x19,2]
 	add	w1, w1, 1
 	strh	w1, [x19,2]
 	mov	w1, 0
-.L2408:
+.L2488:
 	add	x0, x19, x1, sxtw 1
 	ldrh	w0, [x0,16]
 	cmp	w0, w23
-	beq	.L2409
+	beq	.L2489
 	ldrb	w0, [x19,8]
 	strb	w1, [x19,6]
 	cmp	w0, 1
-	bne	.L2414
+	bne	.L2494
 	ldrb	w0, [x20,136]
-	cbnz	w0, .L2411
+	cbnz	w0, .L2491
 	ldrh	w0, [x19,2]
 	ldrh	w0, [x25,w0,sxtw 1]
 	cmp	w0, w24
-	bne	.L2411
+	bne	.L2491
 	ldrh	w1, [x19,4]
-	cbz	w1, .L2411
+	cbz	w1, .L2491
 	ldrh	w0, [x19]
 	sub	w1, w1, #1
 	strh	w1, [x19,4]
 	bl	decrement_vpc_count
-	b	.L2407
-.L2411:
+	b	.L2487
+.L2491:
 	adrp	x1, .LANCHOR0
 	add	x1, x1, :lo12:.LANCHOR0
 	ldrb	w0, [x1,136]
-	cbz	w0, .L2414
+	cbz	w0, .L2494
 	add	x2, x21, :lo12:.LANCHOR2
 	ldrh	w1, [x19,2]
 	ldrh	w0, [x2,820]
 	cmp	w1, w0
-	bcc	.L2414
+	bcc	.L2494
 	ldrh	w1, [x19]
 	ldr	x0, [x2,1184]
 	lsl	x1, x1, 1
@@ -15856,7 +16645,7 @@ get_new_active_ppa:
 	ldrh	w0, [x2,818]
 	strh	w0, [x19,2]
 	strb	wzr, [x19,6]
-.L2414:
+.L2494:
 	mov	w0, w22
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -15878,20 +16667,20 @@ FtlWriteDumpData:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	ldr	w0, [x20,1400]
-	cbnz	w0, .L2419
+	cbnz	w0, .L2499
 	ldrh	w2, [x20,3612]
-	cbz	w2, .L2421
+	cbz	w2, .L2501
 	ldrb	w1, [x20,3616]
-	cbnz	w1, .L2421
+	cbnz	w1, .L2501
 	ldrb	w1, [x20,3615]
 	ldrh	w3, [x20,818]
 	mul	w1, w1, w3
 	cmp	w2, w1
-	beq	.L2421
+	beq	.L2501
 	ldrb	w23, [x20,3618]
 	ldr	w22, [x20,1396]
 	ldrh	w24, [x20,748]
-	cbnz	w23, .L2419
+	cbnz	w23, .L2499
 	sub	w22, w22, #1
 	add	x1, x29, 84
 	mov	w0, w22
@@ -15906,29 +16695,29 @@ FtlWriteDumpData:
 	str	x1, [x29,96]
 	str	x21, [x29,104]
 	str	w23, [x21,4]
-	beq	.L2423
+	beq	.L2503
 	add	x0, x29, 88
 	mov	w1, 1
 	mov	w2, w23
 	bl	FlashReadPages
-	b	.L2424
-.L2423:
+	b	.L2504
+.L2503:
 	ldr	x0, [x20,1048]
 	mov	w1, 255
 	ldrh	w2, [x20,828]
 	bl	ftl_memset
-.L2424:
+.L2504:
 	add	x25, x19, :lo12:.LANCHOR2
 	mov	w0, -3947
 	lsl	w24, w24, 2
 	strh	w0, [x21]
 	mov	w23, 0
 	add	x20, x25, 3608
-.L2425:
+.L2505:
 	cmp	w23, w24
-	beq	.L2426
+	beq	.L2506
 	ldrh	w0, [x20,4]
-	cbz	w0, .L2426
+	cbz	w0, .L2506
 	ldr	w0, [x29,92]
 	add	w23, w23, 1
 	str	w0, [x21,12]
@@ -15951,16 +16740,16 @@ FtlWriteDumpData:
 	bl	FlashProgPages
 	ldrh	w0, [x20]
 	bl	decrement_vpc_count
-	b	.L2425
-.L2426:
+	b	.L2505
+.L2506:
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, 1
 	strb	w0, [x19,3618]
-	b	.L2419
-.L2421:
+	b	.L2499
+.L2501:
 	add	x19, x19, :lo12:.LANCHOR2
 	strb	wzr, [x19,3618]
-.L2419:
+.L2499:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -15978,23 +16767,23 @@ l2p_flush:
 	mov	w19, 0
 	adrp	x20, .LANCHOR2
 	bl	FtlWriteDumpData
-.L2437:
+.L2517:
 	add	x1, x20, :lo12:.LANCHOR2
 	ldrh	w0, [x1,858]
 	cmp	w0, w19
-	bls	.L2440
+	bls	.L2520
 	ldr	x1, [x1,1264]
 	ubfiz	x0, x19, 4, 16
 	add	x0, x1, x0
 	ldr	w0, [x0,4]
-	tbz	w0, #31, .L2438
+	tbz	w0, #31, .L2518
 	mov	w0, w19
 	bl	flush_l2p_region
-.L2438:
+.L2518:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2437
-.L2440:
+	b	.L2517
+.L2520:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -16007,64 +16796,62 @@ FtlSuperblockPowerLostFix:
 	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	mov	x19, x0
-	adrp	x0, .LANCHOR0+136
-	stp	x21, x22, [sp,32]
+	adrp	x20, .LANCHOR2
 	str	x23, [sp,48]
-	ldrb	w20, [x0,#:lo12:.LANCHOR0+136]
-	cbz	w20, .L2455
-	ldrb	w20, [x19,8]
-	cmp	w20, 1
-	bne	.L2450
-	ldrh	w21, [x19,4]
-	b	.L2442
-.L2450:
-	mov	w20, 0
-.L2455:
-	mov	w21, 12
-.L2442:
-	adrp	x23, .LANCHOR2
-	mov	w22, -1
-.L2443:
-	sub	w21, w21, #1
-	cmn	w21, #1
-	beq	.L2445
+	add	x1, x20, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	ldr	w1, [x1,1400]
+	cbnz	w1, .L2521
+	adrp	x2, .LANCHOR0+136
+	ldrb	w21, [x2,#:lo12:.LANCHOR0+136]
+	cbz	w21, .L2535
+	ldrb	w21, [x0,8]
+	cmp	w21, 1
+	bne	.L2531
+	ldrh	w22, [x0,4]
+	b	.L2523
+.L2531:
+	mov	w21, w1
+.L2535:
+	mov	w22, 12
+.L2523:
+	mov	x19, x0
+	mov	w23, -1
+.L2524:
+	sub	w22, w22, #1
+	cmn	w22, #1
+	beq	.L2526
 	ldrh	w0, [x19,4]
-	cbnz	w0, .L2444
-.L2445:
-	adrp	x0, .LANCHOR2
-	ldrh	w1, [x19]
-	add	x0, x0, :lo12:.LANCHOR2
-	ldrh	w4, [x19,4]
-	lsl	x1, x1, 1
-	ldr	x3, [x0,1184]
-	ldrh	w2, [x3,x1]
-	sub	w2, w2, w4
-	strh	w2, [x3,x1]
+	cbnz	w0, .L2525
+.L2526:
+	add	x20, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x19]
+	ldrh	w3, [x19,4]
+	lsl	x0, x0, 1
+	ldr	x2, [x20,1184]
+	ldrh	w1, [x2,x0]
+	sub	w1, w1, w3
+	strh	w1, [x2,x0]
 	strb	wzr, [x19,6]
-	ldrh	w0, [x0,818]
+	ldrh	w0, [x20,818]
 	strh	w0, [x19,2]
 	strh	wzr, [x19,4]
-	ldp	x21, x22, [sp,32]
-	ldp	x19, x20, [sp,16]
-	ldr	x23, [sp,48]
-	ldp	x29, x30, [sp], 128
-	ret
-.L2444:
+	b	.L2521
+.L2525:
 	mov	x0, x19
 	bl	get_new_active_ppa
 	str	w0, [x29,76]
 	cmn	w0, #1
-	beq	.L2445
-	add	x2, x23, :lo12:.LANCHOR2
-	str	w22, [x29,96]
+	beq	.L2526
+	add	x2, x20, :lo12:.LANCHOR2
+	str	w23, [x29,96]
 	mov	w3, 0
 	ldr	x1, [x2,1112]
 	ldr	x0, [x2,1048]
 	str	x0, [x29,80]
 	str	x1, [x29,88]
-	str	w22, [x1,8]
-	str	w22, [x1,12]
+	str	w23, [x1,8]
+	str	w23, [x1,12]
 	ldrh	w0, [x19]
 	strh	w0, [x1,2]
 	strh	wzr, [x1]
@@ -16076,11 +16863,17 @@ FtlSuperblockPowerLostFix:
 	csel	w0, w0, wzr, ne
 	str	w0, [x2,876]
 	add	x0, x29, 72
-	mov	w2, w20
+	mov	w2, w21
 	bl	FlashProgPages
 	ldrh	w0, [x19]
 	bl	decrement_vpc_count
-	b	.L2443
+	b	.L2524
+.L2521:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 128
+	ret
 	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
 	.align	2
 	.global	FtlVpcCheckAndModify
@@ -16088,11 +16881,11 @@ FtlSuperblockPowerLostFix:
 FtlVpcCheckAndModify:
 	stp	x29, x30, [sp, -80]!
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC129
+	adrp	x0, .LC49
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x29, sp, 0
-	add	x1, x1, 16
-	add	x0, x0, :lo12:.LC129
+	add	x1, x1, 72
+	add	x0, x0, :lo12:.LC49
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	adrp	x19, .LANCHOR2
@@ -16106,18 +16899,18 @@ FtlVpcCheckAndModify:
 	ldr	x0, [x0,1176]
 	lsl	w2, w2, 1
 	bl	ftl_memset
-.L2457:
+.L2537:
 	add	x19, x21, :lo12:.LANCHOR2
 	ldr	w0, [x19,1396]
 	cmp	w20, w0
-	bcs	.L2472
+	bcs	.L2552
 	mov	w0, w20
 	add	x1, x29, 76
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,76]
 	cmn	w0, #1
-	beq	.L2458
+	beq	.L2538
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	ubfiz	x0, x0, 1, 16
@@ -16125,39 +16918,39 @@ FtlVpcCheckAndModify:
 	ldrh	w1, [x2,x0]
 	add	w1, w1, 1
 	strh	w1, [x2,x0]
-.L2458:
+.L2538:
 	add	w20, w20, 1
-	b	.L2457
-.L2472:
-	adrp	x22, .LC130
+	b	.L2537
+.L2552:
+	adrp	x22, .LC150
 	mov	w20, 0
 	mov	w23, 65535
-	add	x22, x22, :lo12:.LC130
-.L2460:
+	add	x22, x22, :lo12:.LC150
+.L2540:
 	ldrh	w0, [x19,756]
 	cmp	w0, w20
-	bls	.L2473
+	bls	.L2553
 	ubfiz	x21, x20, 1, 16
 	ldr	x0, [x19,1184]
 	ldrh	w2, [x0,x21]
 	ldr	x0, [x19,1176]
 	ldrh	w3, [x0,x21]
 	cmp	w2, w3
-	beq	.L2463
+	beq	.L2543
 	cmp	w2, w23
-	beq	.L2463
+	beq	.L2543
 	mov	x0, x22
 	mov	w1, w20
 	bl	printk
 	ldrh	w0, [x19,3608]
 	cmp	w0, w20
-	beq	.L2463
+	beq	.L2543
 	ldrh	w0, [x19,3704]
 	cmp	w0, w20
-	beq	.L2463
+	beq	.L2543
 	ldrh	w0, [x19,3656]
 	cmp	w0, w20
-	beq	.L2463
+	beq	.L2543
 	ldr	x0, [x19,1176]
 	ldrh	w1, [x0,x21]
 	ldr	x0, [x19,1184]
@@ -16166,11 +16959,11 @@ FtlVpcCheckAndModify:
 	bl	update_vpc_list
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2463:
+.L2543:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L2460
-.L2473:
+	b	.L2540
+.L2553:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -16189,89 +16982,89 @@ allocate_new_data_superblock:
 	stp	x21, x22, [sp,32]
 	ldr	w1, [x2,1400]
 	ldrh	w22, [x0]
-	cbnz	w1, .L2475
+	cbnz	w1, .L2555
 	mov	x21, x0
 	mov	w0, 65535
 	cmp	w22, w0
-	beq	.L2476
+	beq	.L2556
 	ubfiz	x1, x22, 1, 16
 	ldr	x0, [x2,1184]
 	ldrh	w0, [x0,x1]
-	cbz	w0, .L2477
+	cbz	w0, .L2557
 	mov	w0, w22
 	bl	INSERT_DATA_LIST
-	b	.L2476
-.L2477:
+	b	.L2556
+.L2557:
 	mov	w0, w22
 	bl	INSERT_FREE_LIST
-.L2476:
+.L2556:
 	add	x1, x19, :lo12:.LANCHOR2
 	strb	wzr, [x21,8]
 	add	x0, x1, 3656
 	cmp	x21, x0
-	beq	.L2478
+	beq	.L2558
 	ldrh	w2, [x1,768]
 	cmp	w2, 1
-	beq	.L2478
+	beq	.L2558
 	adrp	x0, .LANCHOR0+136
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
-	cbz	w0, .L2479
-.L2478:
+	cbz	w0, .L2559
+.L2558:
 	mov	w0, 1
 	strb	w0, [x21,8]
-	b	.L2480
-.L2479:
+	b	.L2560
+.L2559:
 	add	x0, x1, 3608
 	cmp	x21, x0
-	bne	.L2480
+	bne	.L2560
 	cmp	w2, 3
-	beq	.L2482
+	beq	.L2562
 	ldr	w0, [x1,868]
 	cmp	w0, 1
-	bne	.L2483
-.L2482:
+	bne	.L2563
+.L2562:
 	add	x1, x19, :lo12:.LANCHOR2
 	mov	w0, 1
 	strb	w0, [x1,3616]
-.L2483:
+.L2563:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldr	w0, [x1,652]
-	cbz	w0, .L2480
+	cbz	w0, .L2560
 	ldr	w0, [x1,920]
 	cmp	w0, 29
-	bhi	.L2480
+	bhi	.L2560
 	mov	w0, 1
 	strb	w0, [x1,3616]
-.L2480:
+.L2560:
 	adrp	x1, .LANCHOR4
 	add	x0, x1, :lo12:.LANCHOR4
 	mov	x20, x1
-	ldrh	w2, [x0,160]
+	ldrh	w2, [x0,4000]
 	mov	w0, 65535
 	cmp	w2, w0
-	beq	.L2485
+	beq	.L2565
 	cmp	w22, w2
-	bne	.L2486
+	bne	.L2566
 	add	x19, x19, :lo12:.LANCHOR2
 	ubfiz	x1, x2, 1, 16
 	ldr	x0, [x19,1184]
 	ldrh	w0, [x0,x1]
-	cbz	w0, .L2487
-.L2486:
+	cbz	w0, .L2567
+.L2566:
 	mov	w0, w2
 	bl	update_vpc_list
-.L2487:
+.L2567:
 	add	x1, x20, :lo12:.LANCHOR4
 	mov	w0, -1
-	strh	w0, [x1,160]
-.L2485:
+	strh	w0, [x1,4000]
+.L2565:
 	mov	x0, x21
 	bl	allocate_data_superblock
 	bl	l2p_flush
 	mov	w0, 0
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2475:
+.L2555:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -16283,34 +17076,37 @@ allocate_new_data_superblock:
 	.type	FtlReadRefresh, %function
 FtlReadRefresh:
 	stp	x29, x30, [sp, -112]!
-	adrp	x1, .LANCHOR2
-	add	x0, x1, :lo12:.LANCHOR2
+	adrp	x1, .LANCHOR4
+	add	x2, x1, :lo12:.LANCHOR4
 	add	x29, sp, 0
-	add	x2, x0, 3968
+	add	x0, x2, 3456
 	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
-	ldr	w3, [x2,80]
-	cbz	w3, .L2501
-	ldr	w3, [x2,84]
-	ldr	w1, [x0,1396]
-	cmp	w3, w1
-	bcs	.L2502
-	mov	w20, 2048
-	mov	x19, x0
-.L2507:
-	ldr	w0, [x19,4052]
-	ldr	w1, [x19,1396]
+	stp	x21, x22, [sp,32]
+	adrp	x19, .LANCHOR2
+	ldr	w3, [x0,80]
+	cbz	w3, .L2581
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w4, [x0,84]
+	ldr	w3, [x1,1396]
+	cmp	w4, w3
+	bcs	.L2582
+	mov	w21, 2048
+	mov	x20, x2
+.L2587:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w0, [x20,3540]
+	ldr	w1, [x1,1396]
 	cmp	w0, w1
-	bcs	.L2504
+	bcs	.L2584
 	add	x1, x29, 52
 	mov	w2, 0
 	bl	log2phys
-	ldr	w0, [x19,4052]
+	ldr	w0, [x20,3540]
 	ldr	w1, [x29,52]
 	add	w0, w0, 1
-	str	w0, [x19,4052]
+	str	w0, [x20,3540]
 	cmn	w1, #1
-	beq	.L2505
+	beq	.L2585
 	str	w1, [x29,60]
 	mov	w2, 0
 	str	w0, [x29,80]
@@ -16322,58 +17118,60 @@ FtlReadRefresh:
 	bl	FlashReadPages
 	ldr	w0, [x29,56]
 	cmp	w0, 256
-	bne	.L2504
+	bne	.L2584
 	ldr	w0, [x29,52]
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	FtlGcRefreshBlock
-	b	.L2504
-.L2505:
-	subs	w20, w20, #1
-	bne	.L2507
-.L2504:
+	b	.L2584
+.L2585:
+	subs	w21, w21, #1
+	bne	.L2587
+.L2584:
 	mov	w0, -1
-	b	.L2509
-.L2502:
-	ldr	w0, [x0,900]
-	str	wzr, [x2,80]
-	str	wzr, [x2,84]
-	str	w0, [x2,76]
-	b	.L2515
-.L2501:
+	b	.L2589
+.L2582:
+	ldr	w1, [x1,900]
+	str	wzr, [x0,80]
+	str	wzr, [x0,84]
+	str	w1, [x0,76]
+	b	.L2595
+.L2581:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldr	w0, [x2,916]
+	ldr	w3, [x2,652]
 	adrp	x2, .LANCHOR0+136
-	ldr	w3, [x0,916]
-	ldr	w0, [x0,652]
 	ldrb	w4, [x2,#:lo12:.LANCHOR0+136]
 	mov	w2, 4194304
-	cbnz	w4, .L2510
-	add	w0, w0, w3, lsr 10
+	cbnz	w4, .L2590
+	add	w0, w3, w0, lsr 10
 	mov	w3, 33554432
 	asr	w2, w3, w0
-.L2510:
-	add	x4, x1, :lo12:.LANCHOR2
-	ldr	w3, [x4,900]
-	ldr	w0, [x4,4044]
-	add	w5, w3, 1048576
-	cmp	w0, w5
-	bhi	.L2511
+.L2590:
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x0, x1, :lo12:.LANCHOR4
+	ldr	w3, [x19,900]
+	ldr	w0, [x0,3532]
+	add	w4, w3, 1048576
+	cmp	w0, w4
+	bhi	.L2591
 	add	w0, w2, w0
 	cmp	w0, w3
-	bcc	.L2511
-	ldrb	w2, [x4,3548]
+	bcc	.L2591
+	ldrb	w2, [x19,3548]
 	mov	w0, 0
-	cbnz	w2, .L2509
-.L2511:
-	add	x0, x1, :lo12:.LANCHOR2
+	cbnz	w2, .L2589
+.L2591:
+	add	x0, x1, :lo12:.LANCHOR4
 	mov	w1, 1
-	str	wzr, [x0,4052]
-	str	w1, [x0,4048]
-	str	w3, [x0,4044]
-.L2515:
+	str	wzr, [x0,3540]
+	str	w1, [x0,3536]
+	str	w3, [x0,3532]
+.L2595:
 	mov	w0, 0
-.L2509:
+.L2589:
 	ldp	x19, x20, [sp,16]
-	ldr	x21, [sp,32]
+	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 112
 	ret
 	.size	FtlReadRefresh, .-FtlReadRefresh
@@ -16392,293 +17190,302 @@ ftl_do_gc:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	ldr	w4, [x3,1400]
-	cbnz	w4, .L2661
+	cbnz	w4, .L2741
 	ldr	w4, [x3,924]
-	cbnz	w4, .L2661
+	cbnz	w4, .L2741
 	ldrh	w4, [x3,3584]
 	cmp	w4, 47
-	bls	.L2661
-	mov	w23, w0
+	bls	.L2741
+	str	w0, [x29,124]
 	adrp	x0, .LANCHOR1+3068
 	mov	w24, w1
 	ldrh	w1, [x0,#:lo12:.LANCHOR1+3068]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2518
-.L2521:
+	bne	.L2598
+.L2601:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w1, [x0,950]
 	cmp	w1, w2
-	bne	.L2519
-	b	.L2520
-.L2518:
+	bne	.L2599
+	b	.L2600
+.L2598:
 	ldrh	w1, [x3,3704]
 	cmp	w1, w0
-	beq	.L2521
+	beq	.L2601
 	mov	w0, 1
 	bl	FtlGcFreeTempBlock
 	mov	w2, 1
-	cbz	w0, .L2521
-	b	.L2661
-.L2519:
+	cbz	w0, .L2601
+	b	.L2741
+.L2599:
 	ldrh	w3, [x0,948]
 	cmp	w3, w2
-	bne	.L2520
+	bne	.L2600
 	strh	w1, [x0,948]
 	mov	w1, -1
 	strh	w1, [x0,950]
-.L2520:
+.L2600:
 	add	x1, x19, :lo12:.LANCHOR2
-	cmp	w23, 1
+	ldr	w2, [x29,124]
+	adrp	x22, .LANCHOR4
+	cmp	w2, 1
 	ldr	w0, [x1,940]
 	add	w0, w0, 1
-	add	w0, w0, w23, lsl 7
+	add	w0, w0, w2, lsl 7
 	str	w0, [x1,940]
-	bne	.L2532
+	bne	.L2612
 	ldr	w1, [x1,652]
-	cbnz	w1, .L2523
+	cbnz	w1, .L2603
 	adrp	x1, .LANCHOR0+136
 	ldrb	w1, [x1,#:lo12:.LANCHOR0+136]
-	cbz	w1, .L2532
-.L2523:
+	cbz	w1, .L2612
+.L2603:
 	add	x20, x19, :lo12:.LANCHOR2
 	ldr	w1, [x20,920]
 	cmp	w1, 29
-	bhi	.L2532
-	adrp	x21, .LANCHOR4
-	add	x1, x21, :lo12:.LANCHOR4
-	ldrh	w1, [x1,360]
+	bhi	.L2612
+	adrp	x21, .LANCHOR5
+	add	x1, x21, :lo12:.LANCHOR5
+	ldrh	w1, [x1,-152]
 	add	w0, w0, w1
 	str	w0, [x20,940]
 	bl	FtlGcReFreshBadBlk
-	ldrh	w0, [x20,3920]
+	add	x0, x22, :lo12:.LANCHOR4
 	mov	w1, 65535
+	ldrh	w0, [x0,3408]
 	cmp	w0, w1
-	bne	.L2532
+	bne	.L2612
 	ldrh	w1, [x20,948]
 	cmp	w1, w0
-	bne	.L2532
+	bne	.L2612
 	ldr	w0, [x20,940]
 	cmp	w0, 1024
-	bhi	.L2524
+	bhi	.L2604
 	ldrh	w0, [x20,3600]
 	cmp	w0, 63
-	bhi	.L2532
-.L2524:
+	bhi	.L2612
+.L2604:
 	add	x0, x19, :lo12:.LANCHOR2
-	add	x1, x21, :lo12:.LANCHOR4
+	add	x1, x21, :lo12:.LANCHOR5
 	ldrh	w2, [x0,954]
 	ldrh	w3, [x0,3600]
 	add	w2, w2, 64
-	strh	wzr, [x1,360]
+	strh	wzr, [x1,-152]
 	cmp	w3, w2
-	bgt	.L2532
+	bgt	.L2612
 	str	wzr, [x0,940]
 	ldr	w0, [x0,920]
-	cbnz	w0, .L2525
+	cbnz	w0, .L2605
 	mov	w0, 6
-	b	.L2683
-.L2525:
+	b	.L2763
+.L2605:
 	cmp	w0, 5
-	bhi	.L2526
+	bhi	.L2606
 	mov	w0, 18
-.L2683:
-	strh	w0, [x1,360]
-.L2526:
+.L2763:
+	strh	w0, [x1,-152]
+.L2606:
 	mov	w0, 32
 	mov	w27, 65535
 	bl	List_get_gc_head_node
 	uxth	w25, w0
 	cmp	w25, w27
-	beq	.L2531
-	add	x22, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x22,956]
-	cbz	w0, .L2528
-	ldrh	w1, [x22,820]
+	beq	.L2611
+	add	x23, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x23,956]
+	cbz	w0, .L2608
+	ldrh	w1, [x23,820]
 	ubfiz	x25, x25, 1, 16
-	ldrh	w3, [x22,748]
-	ldr	x26, [x22,1184]
+	ldrh	w3, [x23,748]
+	ldr	x26, [x23,1184]
 	mul	w1, w1, w3
 	ldrh	w2, [x26,x25]
 	add	w1, w1, 1
 	cmp	w2, w1
-	bgt	.L2531
+	bgt	.L2611
 	add	w1, w0, 1
-	str	wzr, [x22,928]
+	str	wzr, [x23,928]
 	uxth	w1, w1
-	strh	w1, [x22,956]
-	str	x1, [x29,120]
+	strh	w1, [x23,956]
+	str	x1, [x29,112]
 	bl	List_get_gc_head_node
 	uxth	w20, w0
 	cmp	w20, w27
-	ldr	x1, [x29,120]
-	beq	.L2531
+	ldr	x1, [x29,112]
+	beq	.L2611
 	ubfiz	x27, x20, 1, 16
-	adrp	x0, .LC131
+	adrp	x0, .LC151
 	ldrh	w4, [x26,x25]
-	add	x0, x0, :lo12:.LC131
+	add	x0, x0, :lo12:.LC151
 	mov	w2, w20
 	ldrh	w3, [x26,x27]
 	bl	printk
-	ldrh	w0, [x22,956]
+	ldrh	w0, [x23,956]
 	cmp	w0, 40
-	bls	.L2529
-	ldr	x0, [x22,1184]
+	bls	.L2609
+	ldr	x0, [x23,1184]
 	ldrh	w0, [x0,x27]
 	cmp	w0, 32
-	bls	.L2529
-	strh	wzr, [x22,956]
-.L2529:
-	add	x21, x21, :lo12:.LANCHOR4
+	bls	.L2609
+	strh	wzr, [x23,956]
+.L2609:
+	add	x21, x21, :lo12:.LANCHOR5
 	mov	w0, 6
-	strh	w0, [x21,360]
-	b	.L2533
-.L2528:
+	strh	w0, [x21,-152]
+	b	.L2613
+.L2608:
 	mov	w0, 1
-	strh	w0, [x22,956]
-.L2531:
+	strh	w0, [x23,956]
+.L2611:
 	bl	GetSwlReplaceBlock
 	uxth	w20, w0
 	mov	w0, 65535
 	cmp	w20, w0
-	bne	.L2533
-	add	x21, x21, :lo12:.LANCHOR4
-	strh	wzr, [x21,360]
-.L2532:
-	add	x22, x19, :lo12:.LANCHOR2
+	bne	.L2613
+	add	x21, x21, :lo12:.LANCHOR5
+	strh	wzr, [x21,-152]
+.L2612:
+	add	x0, x22, :lo12:.LANCHOR4
+	ldrh	w20, [x0,3408]
 	mov	w0, 65535
-	ldrh	w20, [x22,3920]
 	cmp	w20, w0
-	bne	.L2689
-	ldrh	w0, [x22,3704]
+	bne	.L2769
+	add	x23, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x23,3704]
 	cmp	w0, w20
-	beq	.L2690
-.L2533:
+	beq	.L2770
+.L2613:
 	mov	w0, 65535
 	cmp	w20, w0
 	cset	w1, eq
-	cbz	w1, .L2546
-	cbnz	w23, .L2546
+	cbz	w1, .L2626
+	ldr	w0, [x29,124]
+	cbnz	w0, .L2626
 	add	x0, x19, :lo12:.LANCHOR2
-	mov	w21, 1
+	mov	w23, 1
 	ldrh	w1, [x0,3600]
 	cmp	w1, 24
-	bhi	.L2547
+	bhi	.L2627
 	cmp	w1, 16
-	ldrh	w21, [x0,818]
-	bls	.L2548
-	lsr	w21, w21, 5
-	b	.L2547
-.L2548:
+	ldrh	w23, [x0,818]
+	bls	.L2628
+	lsr	w23, w23, 5
+	b	.L2627
+.L2628:
 	cmp	w1, 12
-	bls	.L2549
-	lsr	w21, w21, 4
-	b	.L2547
-.L2549:
-	lsr	w0, w21, 2
+	bls	.L2629
+	lsr	w23, w23, 4
+	b	.L2627
+.L2629:
+	lsr	w0, w23, 2
 	cmp	w1, 9
-	csel	w21, w0, w21, cs
-.L2547:
+	csel	w23, w0, w23, cs
+.L2627:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w2, [x0,952]
 	cmp	w2, w1
-	bcs	.L2551
+	bcs	.L2631
 	ldrh	w1, [x0,3704]
 	mov	w2, 65535
 	cmp	w1, w2
-	bne	.L2552
+	bne	.L2632
 	ldrh	w2, [x0,948]
 	cmp	w2, w1
-	bne	.L2552
-	adrp	x1, .LANCHOR4+360
-	ldrh	w2, [x1,#:lo12:.LANCHOR4+360]
-	cbnz	w2, .L2553
+	bne	.L2632
+	adrp	x1, .LANCHOR5-152
+	ldrh	w2, [x1,#:lo12:.LANCHOR5-152]
+	cbnz	w2, .L2633
 	ldr	w1, [x0,1396]
 	ldr	w3, [x0,3892]
 	add	w1, w1, w1, lsl 1
 	cmp	w3, w1, lsr 2
-	bcs	.L2554
-.L2553:
+	bcs	.L2634
+.L2633:
+	add	x22, x22, :lo12:.LANCHOR4
 	add	x1, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x1,3916]
+	ldrh	w0, [x22,3404]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,952]
-	b	.L2555
-.L2554:
+	b	.L2635
+.L2634:
 	mov	w1, 18
 	strh	w1, [x0,952]
-.L2555:
+.L2635:
 	add	x19, x19, :lo12:.LANCHOR2
 	str	wzr, [x19,928]
-	b	.L2661
-.L2552:
+	b	.L2741
+.L2632:
+	add	x0, x22, :lo12:.LANCHOR4
 	add	x1, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x1,3916]
+	ldrh	w0, [x0,3404]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x1,952]
-.L2551:
+.L2631:
 	cmp	w24, 2
-	bhi	.L2616
+	bhi	.L2696
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w0, [x0,652]
-	cbz	w0, .L2616
-	add	w21, w21, 1
-	uxth	w21, w21
-	b	.L2616
-.L2546:
+	cbz	w0, .L2696
+	add	w23, w23, 1
+	uxth	w23, w23
+	b	.L2696
+.L2626:
 	add	x21, x19, :lo12:.LANCHOR2
 	mov	w2, 65535
 	ldrh	w0, [x21,3704]
 	cmp	w0, w2
-	bne	.L2558
-	cbz	w1, .L2558
+	bne	.L2638
+	cbz	w1, .L2638
 	ldrh	w1, [x21,948]
 	cmp	w1, w0
-	bne	.L2558
-	ldrh	w1, [x21,3920]
-	cmp	w1, w0
-	beq	.L2559
-.L2564:
+	bne	.L2638
+	add	x1, x22, :lo12:.LANCHOR4
+	ldrh	w2, [x1,3408]
+	cmp	w2, w0
+	beq	.L2639
+.L2644:
 	mov	w20, 65535
-	b	.L2558
-.L2559:
+	b	.L2638
+.L2639:
 	ldrh	w24, [x21,3600]
-	adrp	x20, .LANCHOR4
+	adrp	x20, .LANCHOR5
 	ldrh	w0, [x21,952]
 	str	wzr, [x21,928]
 	cmp	w0, w24
-	bcs	.L2560
-	add	x0, x20, :lo12:.LANCHOR4
-	ldrh	w0, [x0,360]
-	cbnz	w0, .L2561
+	bcs	.L2640
+	add	x0, x20, :lo12:.LANCHOR5
+	ldrh	w0, [x0,-152]
+	cbnz	w0, .L2641
 	ldr	w0, [x21,1396]
 	ldr	w1, [x21,3892]
 	add	w0, w0, w0, lsl 1
 	cmp	w1, w0, lsr 2
-	bcs	.L2562
-.L2561:
+	bcs	.L2642
+.L2641:
+	add	x22, x22, :lo12:.LANCHOR4
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x19,3916]
+	ldrh	w0, [x22,3404]
 	add	w0, w0, w0, lsl 1
 	asr	w0, w0, 2
 	strh	w0, [x19,952]
-	b	.L2563
-.L2562:
+	b	.L2643
+.L2642:
 	mov	w0, 18
 	strh	w0, [x21,952]
-.L2563:
-	add	x20, x20, :lo12:.LANCHOR4
+.L2643:
+	add	x20, x20, :lo12:.LANCHOR5
 	bl	FtlReadRefresh
-	ldrh	w2, [x20,360]
-	b	.L2661
-.L2560:
-	add	x22, x20, :lo12:.LANCHOR4
-	ldrh	w0, [x22,360]
-	cbnz	w0, .L2564
-	ldrh	w20, [x21,3916]
+	ldrh	w2, [x20,-152]
+	b	.L2741
+.L2640:
+	add	x23, x20, :lo12:.LANCHOR5
+	ldrh	w0, [x23,-152]
+	cbnz	w0, .L2644
+	ldrh	w20, [x1,3404]
 	add	w1, w20, w20, lsl 1
 	asr	w1, w1, 2
 	strh	w1, [x21,952]
@@ -16692,456 +17499,468 @@ ftl_do_gc:
 	mov	w2, 2
 	sdiv	w0, w0, w2
 	cmp	w1, w0
-	ble	.L2565
+	ble	.L2645
 	sub	w20, w20, #1
 	cmp	w24, w20
-	blt	.L2565
+	blt	.L2645
 	bl	FtlReadRefresh
-	b	.L2687
-.L2565:
-	cbnz	w1, .L2564
+	b	.L2767
+.L2645:
+	cbnz	w1, .L2644
 	mov	w0, -1
 	add	x19, x19, :lo12:.LANCHOR2
 	bl	decrement_vpc_count
 	ldrh	w2, [x19,3600]
 	add	w2, w2, 1
-	b	.L2661
-.L2558:
+	b	.L2741
+.L2638:
 	add	x0, x19, :lo12:.LANCHOR2
-	mov	w21, 2
+	mov	w23, 2
 	ldr	w0, [x0,652]
 	cmp	w0, wzr
-	csinc	w21, w21, wzr, ne
-	b	.L2557
-.L2616:
+	csinc	w23, w23, wzr, ne
+	b	.L2637
+.L2696:
 	mov	w20, 65535
-.L2557:
-	add	x0, x19, :lo12:.LANCHOR2
+.L2637:
+	add	x0, x22, :lo12:.LANCHOR4
 	mov	w2, 65535
-	ldrh	w1, [x0,3920]
+	ldrh	w1, [x0,3408]
 	cmp	w1, w2
-	bne	.L2567
+	bne	.L2647
 	cmp	w20, w1
-	beq	.L2568
-	strh	w20, [x0,3920]
-	b	.L2569
-.L2568:
-	ldrh	w1, [x0,948]
-	cmp	w1, w20
-	beq	.L2569
-	ubfiz	x1, x1, 1, 16
-	ldr	x2, [x0,1184]
-	ldrh	w1, [x2,x1]
-	cbnz	w1, .L2570
-	mov	w1, -1
-	strh	w1, [x0,948]
-.L2570:
-	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w1, [x0,948]
-	strh	w1, [x0,3920]
-	mov	w1, -1
-	strh	w1, [x0,948]
-.L2569:
-	add	x22, x19, :lo12:.LANCHOR2
+	beq	.L2648
+	strh	w20, [x0,3408]
+	b	.L2649
+.L2648:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,948]
+	cmp	w0, w20
+	beq	.L2649
+	ubfiz	x0, x0, 1, 16
+	ldr	x2, [x1,1184]
+	ldrh	w0, [x2,x0]
+	cbnz	w0, .L2650
+	mov	w0, -1
+	strh	w0, [x1,948]
+.L2650:
+	add	x1, x19, :lo12:.LANCHOR2
+	add	x0, x22, :lo12:.LANCHOR4
+	ldrh	w2, [x1,948]
+	strh	w2, [x0,3408]
+	mov	w0, -1
+	strh	w0, [x1,948]
+.L2649:
+	add	x21, x22, :lo12:.LANCHOR4
 	mov	w1, 65535
-	ldrh	w0, [x22,3920]
-	strb	wzr, [x22,3928]
+	ldrh	w0, [x21,3408]
+	strb	wzr, [x21,3416]
 	cmp	w0, w1
-	beq	.L2567
+	beq	.L2647
 	bl	IsBlkInGcList
-	cbz	w0, .L2572
+	cbz	w0, .L2652
 	mov	w0, -1
-	strh	w0, [x22,3920]
-.L2572:
+	strh	w0, [x21,3408]
+.L2652:
 	adrp	x0, .LANCHOR0+136
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
-	cbz	w0, .L2573
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x22, x0, 3920
-	ldrh	w0, [x0,3920]
+	cbz	w0, .L2653
+	add	x0, x22, :lo12:.LANCHOR4
+	add	x21, x0, 3408
+	ldrh	w0, [x0,3408]
 	bl	ftl_get_blk_mode
-	strb	w0, [x22,8]
-.L2573:
-	add	x22, x19, :lo12:.LANCHOR2
+	strb	w0, [x21,8]
+.L2653:
+	add	x21, x22, :lo12:.LANCHOR4
 	mov	w0, 65535
-	add	x24, x22, 3920
-	ldrh	w1, [x22,3920]
+	add	x24, x21, 3408
+	ldrh	w1, [x21,3408]
 	cmp	w1, w0
-	beq	.L2567
+	beq	.L2647
 	mov	x0, x24
 	bl	make_superblock
-	strh	wzr, [x22,3922]
-	adrp	x0, .LANCHOR4
-	ldrh	w2, [x22,3920]
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x1, [x22,1184]
-	strb	wzr, [x22,3926]
-	strh	wzr, [x0,362]
+	strh	wzr, [x21,3410]
+	adrp	x0, .LANCHOR5
+	add	x1, x19, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR5
+	ldrh	w2, [x21,3408]
+	strb	wzr, [x21,3414]
+	ldr	x1, [x1,1184]
+	strh	wzr, [x0,-150]
 	ldrh	w1, [x1,x2,lsl 1]
-	strh	w1, [x0,364]
-.L2567:
-	add	x3, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x3,3920]
-	ldrh	w1, [x3,3608]
-	cmp	w1, w0
-	beq	.L2574
-	ldrh	w1, [x3,3656]
+	strh	w1, [x0,-148]
+.L2647:
+	add	x21, x22, :lo12:.LANCHOR4
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x21,3408]
+	ldrh	w2, [x1,3608]
+	cmp	w2, w0
+	beq	.L2654
+	ldrh	w1, [x1,3656]
 	cmp	w1, w0
-	beq	.L2574
-.L2575:
-	mov	x28, x3
-	mov	w24, 65535
-	b	.L2576
-.L2574:
-	add	x19, x19, :lo12:.LANCHOR2
+	bne	.L2656
+.L2655:
+.L2654:
+	add	x22, x22, :lo12:.LANCHOR4
 	mov	w0, -1
-	strh	w0, [x19,3920]
-	b	.L2688
-.L2597:
-	ldrh	w0, [x28,3922]
-	add	w21, w21, w0
-	uxth	w21, w21
-	strh	w21, [x28,3922]
-	cmp	w21, w25
-	bcs	.L2691
-.L2599:
-	ldrh	w0, [x28,3600]
+	strh	w0, [x22,3408]
+	b	.L2768
+.L2677:
+	ldrh	w0, [x21,3410]
+	add	w23, w23, w0
+	uxth	w23, w23
+	strh	w23, [x21,3410]
+	cmp	w23, w26
+	bcs	.L2771
+.L2679:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,3600]
 	cmp	w0, 2
-	bhi	.L2602
-	ldrh	w21, [x28,818]
-.L2576:
-	ldrh	w0, [x28,3920]
-	cmp	w0, w24
-	bne	.L2577
-	str	wzr, [x28,928]
-	adrp	x25, .LANCHOR4
-.L2578:
-	ldrh	w22, [x28,956]
-	mov	w0, w22
+	bhi	.L2682
+	ldrh	w23, [x1,818]
+.L2656:
+	ldrh	w0, [x21,3408]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L2657
+	add	x0, x19, :lo12:.LANCHOR2
+	str	wzr, [x0,928]
+.L2658:
+	add	x26, x19, :lo12:.LANCHOR2
+	ldrh	w24, [x26,956]
+	mov	w0, w24
 	bl	List_get_gc_head_node
-	uxth	w26, w0
-	cmp	w26, w24
-	strh	w26, [x28,3920]
-	bne	.L2579
-	strh	wzr, [x28,956]
+	uxth	w27, w0
+	mov	w0, 65535
+	strh	w27, [x21,3408]
+	cmp	w27, w0
+	bne	.L2659
+	strh	wzr, [x26,956]
 	mov	w2, 8
-	b	.L2661
-.L2579:
-	mov	w0, w26
-	add	w22, w22, 1
+	b	.L2741
+.L2659:
+	mov	w0, w27
+	add	w24, w24, 1
 	bl	IsBlkInGcList
-	cbz	w0, .L2580
-	strh	w22, [x28,956]
-	b	.L2578
-.L2580:
-	ldrh	w5, [x28,748]
-	ubfiz	x1, x26, 1, 16
-	ldrh	w0, [x28,818]
-	uxth	w22, w22
-	ldr	x2, [x28,1184]
-	mov	w3, 2
-	strh	w22, [x28,956]
-	mul	w0, w0, w5
-	ldrh	w4, [x2,x1]
-	sdiv	w5, w0, w3
-	cmp	w4, w5
-	bgt	.L2582
-	cmp	w4, 8
-	bls	.L2583
-	cmp	w22, 48
-	bls	.L2583
-	add	x4, x25, :lo12:.LANCHOR4
-	ldrh	w4, [x4,176]
-	cmp	w4, 35
-	bhi	.L2583
-.L2582:
-	strh	wzr, [x28,956]
-.L2583:
+	cbz	w0, .L2660
+	strh	w24, [x26,956]
+	b	.L2658
+.L2660:
+	ldrh	w4, [x26,748]
+	ubfiz	x1, x27, 1, 16
+	ldrh	w0, [x26,818]
+	uxth	w24, w24
+	ldr	x2, [x26,1184]
+	strh	w24, [x26,956]
+	mul	w0, w0, w4
+	mov	w4, 2
+	ldrh	w3, [x2,x1]
+	sdiv	w4, w0, w4
+	cmp	w3, w4
+	bgt	.L2662
+	cmp	w3, 8
+	bls	.L2663
+	cmp	w24, 48
+	bls	.L2663
+	ldrh	w3, [x21,4016]
+	cmp	w3, 35
+	bhi	.L2663
+.L2662:
+	add	x3, x19, :lo12:.LANCHOR2
+	strh	wzr, [x3,956]
+.L2663:
 	ldrh	w1, [x2,x1]
 	cmp	w1, w0
-	blt	.L2584
-	cmp	w20, w24
-	bne	.L2584
+	blt	.L2664
+	mov	w0, 65535
+	cmp	w20, w0
+	bne	.L2664
+	add	x22, x22, :lo12:.LANCHOR4
 	add	x19, x19, :lo12:.LANCHOR2
 	mov	w0, -1
 	strh	wzr, [x19,956]
-	strh	w0, [x19,3920]
-.L2688:
-	adrp	x0, .LANCHOR4+360
-	ldrh	w2, [x0,#:lo12:.LANCHOR4+360]
-	b	.L2661
-.L2584:
-	cbnz	w1, .L2585
+	strh	w0, [x22,3408]
+.L2768:
+	adrp	x0, .LANCHOR5-152
+	ldrh	w2, [x0,#:lo12:.LANCHOR5-152]
+	b	.L2741
+.L2664:
+	cbnz	w1, .L2665
 	mov	w0, -1
 	bl	decrement_vpc_count
-	ldrh	w0, [x28,956]
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,956]
 	add	w0, w0, 1
-	strh	w0, [x28,956]
-	b	.L2578
-.L2585:
+	strh	w0, [x1,956]
+	b	.L2658
+.L2665:
 	adrp	x0, .LANCHOR0
-	strb	wzr, [x28,3928]
+	strb	wzr, [x21,3416]
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L2586
-	mov	w0, w26
+	cbz	w0, .L2666
+	mov	w0, w27
 	bl	ftl_get_blk_mode
-	strb	w0, [x28,3928]
-.L2586:
-	add	x22, x28, 3920
-	mov	x0, x22
+	strb	w0, [x21,3416]
+.L2666:
+	add	x24, x21, 3408
+	mov	x0, x24
 	bl	make_superblock
-	adrp	x1, .LANCHOR4
-	ldrh	w2, [x28,3920]
-	add	x1, x1, :lo12:.LANCHOR4
-	ldr	x0, [x28,1184]
-	strh	wzr, [x1,362]
+	adrp	x1, .LANCHOR5
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR5
+	ldrh	w2, [x21,3408]
+	ldr	x0, [x0,1184]
+	strh	wzr, [x1,-150]
 	ldrh	w0, [x0,x2,lsl 1]
-	strh	w0, [x1,364]
-	strh	wzr, [x28,3922]
-	strb	wzr, [x28,3926]
-.L2577:
-	cmp	w23, 1
-	bne	.L2587
-	bl	FtlReadRefresh
-.L2587:
-	mov	w0, 1
-	str	w0, [x28,924]
-	adrp	x0, .LANCHOR0
-	ldrh	w25, [x28,818]
-	add	x0, x0, :lo12:.LANCHOR0
-	ldrb	w0, [x0,136]
-	cbz	w0, .L2588
-	ldrb	w0, [x28,3928]
+	strh	w0, [x1,-148]
+	strh	wzr, [x21,3410]
+	strb	wzr, [x21,3414]
+.L2657:
+	ldr	w0, [x29,124]
 	cmp	w0, 1
-	bne	.L2588
-	ldrh	w25, [x28,820]
-.L2588:
-	ldrh	w0, [x28,3922]
-	add	w1, w0, w21
-	cmp	w1, w25
-	ble	.L2589
-	sub	w21, w25, w0
-	uxth	w21, w21
-.L2589:
-	mov	w26, 0
-.L2590:
-	cmp	w21, w26, uxth
-	bls	.L2597
-	add	x1, x28, 3920
-	ldrh	w4, [x1,2]
+	bne	.L2667
+	bl	FtlReadRefresh
+.L2667:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 1
+	str	w1, [x0,924]
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w26, [x0,818]
+	ldrb	w1, [x1,136]
+	cbz	w1, .L2668
+	ldrb	w1, [x21,3416]
+	cmp	w1, 1
+	bne	.L2668
+	ldrh	w26, [x0,820]
+.L2668:
+	ldrh	w0, [x21,3410]
+	add	w1, w0, w23
+	cmp	w1, w26
+	ble	.L2669
+	sub	w23, w26, w0
+	uxth	w23, w23
+.L2669:
+	mov	w27, 0
+.L2670:
+	cmp	w23, w27, uxth
+	bls	.L2677
+	add	x1, x21, 3408
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w3, [x1,2]
+	ldrh	w6, [x0,748]
 	mov	x0, 0
-	ldrh	w6, [x28,748]
-	add	w4, w4, w26
-	mov	w22, w0
-.L2598:
+	add	w3, w3, w27
+	mov	w24, w0
+.L2678:
 	cmp	w6, w0, uxth
-	bls	.L2692
+	bls	.L2772
 	add	x2, x1, x0, lsl 1
+	mov	w4, 65535
 	ldrh	w2, [x2,16]
-	cmp	w2, w24
-	beq	.L2591
-	mov	w3, 56
-	ldr	x7, [x28,1024]
-	orr	w2, w4, w2, lsl 10
-	umull	x5, w22, w3
-	add	w22, w22, 1
-	add	x5, x7, x5
-	uxth	w22, w22
-	str	w2, [x5,4]
-.L2591:
+	cmp	w2, w4
+	beq	.L2671
+	add	x5, x19, :lo12:.LANCHOR2
+	mov	w4, 56
+	orr	w2, w3, w2, lsl 10
+	umull	x4, w24, w4
+	ldr	x5, [x5,1024]
+	add	w24, w24, 1
+	add	x4, x5, x4
+	uxth	w24, w24
+	str	w2, [x4,4]
+.L2671:
 	add	x0, x0, 1
-	b	.L2598
-.L2692:
-	ldr	x0, [x28,1024]
-	mov	w1, w22
-	ldrb	w2, [x28,3928]
-	mov	x27, 0
+	b	.L2678
+.L2772:
+	add	x25, x19, :lo12:.LANCHOR2
+	ldrb	w2, [x21,3416]
+	mov	w1, w24
+	mov	x28, 0
+	ldr	x0, [x25,1024]
 	bl	FlashReadPages
-.L2593:
-	cmp	w22, w27, uxth
-	bls	.L2693
+.L2673:
+	cmp	w24, w28, uxth
+	bls	.L2773
 	mov	x0, 56
-	mul	x5, x27, x0
-	ldr	x0, [x28,1024]
+	mul	x5, x28, x0
+	ldr	x0, [x25,1024]
 	add	x1, x0, x5
 	ldr	w0, [x0,x5]
 	cmn	w0, #1
 	ldr	x4, [x1,16]
-	beq	.L2618
+	beq	.L2698
 	ldrh	w0, [x4]
 	mov	w1, 61589
 	cmp	w0, w1
-	bne	.L2618
+	bne	.L2698
 	ldr	w0, [x4,8]
 	add	x1, x29, 140
 	mov	w2, 0
-	str	x5, [x29,112]
-	str	x4, [x29,120]
+	str	x5, [x29,104]
+	str	x4, [x29,112]
 	bl	log2phys
-	ldr	x6, [x28,1024]
-	ldr	x5, [x29,112]
+	ldr	x2, [x25,1024]
+	ldr	x5, [x29,104]
 	ldr	w0, [x29,140]
-	add	x6, x6, x5
-	ldr	x4, [x29,120]
+	add	x2, x2, x5
+	ldr	x4, [x29,112]
 	and	w0, w0, 2147483647
-	ldr	w1, [x6,4]
+	ldr	w1, [x2,4]
 	cmp	w0, w1
-	bne	.L2618
-	adrp	x0, .LANCHOR4
-	ldr	x1, [x28,1000]
-	add	x2, x0, :lo12:.LANCHOR4
-	str	x2, [x29,112]
+	bne	.L2698
+	adrp	x0, .LANCHOR5
+	mov	x3, 56
+	add	x1, x0, :lo12:.LANCHOR5
 	str	x5, [x29,96]
 	str	x4, [x29,104]
-	ldrh	w0, [x2,362]
+	ldrh	w0, [x1,-150]
 	add	w0, w0, 1
-	strh	w0, [x2,362]
-	ldr	w0, [x2,144]
-	mov	x2, 56
-	madd	x1, x0, x2, x1
-	ldr	w0, [x6,24]
-	str	x1, [x29,120]
+	strh	w0, [x1,-150]
+	ldr	w0, [x21,3984]
+	ldr	x1, [x25,1000]
+	madd	x1, x0, x3, x1
+	ldr	w0, [x2,24]
+	str	x1, [x29,112]
 	str	w0, [x1,24]
 	bl	Ftl_get_new_temp_ppa
-	ldr	x1, [x29,120]
-	mov	x3, 56
-	ldr	x2, [x29,112]
+	ldr	x1, [x29,112]
+	mov	x2, 56
 	ldr	x5, [x29,96]
-	str	w0, [x1,4]
-	ldr	w0, [x2,144]
-	ldr	x1, [x28,1000]
 	ldr	x4, [x29,104]
-	str	x2, [x29,120]
-	madd	x0, x0, x3, x1
-	ldr	x1, [x28,1024]
+	str	w0, [x1,4]
+	ldr	w0, [x21,3984]
+	ldr	x1, [x25,1000]
+	madd	x0, x0, x2, x1
+	ldr	x1, [x25,1024]
 	add	x1, x1, x5
-	ldr	x6, [x1,8]
-	str	x6, [x0,8]
-	add	x6, x28, 3704
-	str	x6, [x29,112]
+	ldr	x2, [x1,8]
+	str	x2, [x0,8]
+	add	x2, x25, 3704
+	str	x2, [x29,112]
 	ldr	x1, [x1,16]
 	str	x1, [x0,16]
 	mov	w1, 1
 	ldr	w0, [x29,140]
 	str	w0, [x4,12]
-	ldrh	w0, [x28,3704]
+	ldrh	w0, [x25,3704]
 	strh	w0, [x4,2]
-	ldr	w0, [x28,876]
+	ldr	w0, [x25,876]
 	str	w0, [x4,4]
-	ldr	w0, [x2,144]
+	ldr	w0, [x21,3984]
 	add	w0, w0, 1
-	str	w0, [x2,144]
-	ldr	x0, [x28,1024]
+	str	w0, [x21,3984]
+	ldr	x0, [x25,1024]
 	add	x0, x0, x5
 	bl	FtlGcBufAlloc
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbnz	w0, .L2595
-	ldr	x6, [x29,112]
-	ldr	x2, [x29,120]
-	ldrb	w0, [x6,7]
-	ldr	w1, [x2,144]
+	cbnz	w0, .L2675
+	ldr	x2, [x29,112]
+	ldr	w1, [x21,3984]
+	ldrb	w0, [x2,7]
 	cmp	w1, w0
-	beq	.L2595
-	ldrh	w0, [x6,4]
-	cbnz	w0, .L2618
-.L2595:
+	beq	.L2675
+	ldrh	w0, [x2,4]
+	cbnz	w0, .L2698
+.L2675:
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L2618
-	adrp	x0, .LANCHOR4
+	cbz	w0, .L2698
+	adrp	x0, .LANCHOR5
 	add	x19, x19, :lo12:.LANCHOR2
-	add	x0, x0, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR5
 	str	wzr, [x19,924]
-	ldrh	w2, [x0,360]
-	b	.L2661
-.L2618:
-	add	x27, x27, 1
-	b	.L2593
-.L2693:
-	add	w26, w26, 1
-	b	.L2590
-.L2691:
-	adrp	x0, .LANCHOR4
-	add	x22, x0, :lo12:.LANCHOR4
-	mov	x21, x0
-	ldr	w1, [x22,144]
-	cbz	w1, .L2600
+	ldrh	w2, [x0,-152]
+	b	.L2741
+.L2698:
+	add	x28, x28, 1
+	b	.L2673
+.L2773:
+	add	w27, w27, 1
+	b	.L2670
+.L2771:
+	ldr	w0, [x21,3984]
+	adrp	x23, .LANCHOR5
+	cbz	w0, .L2680
 	bl	Ftl_gc_temp_data_write_back
-	cbz	w0, .L2600
-	str	wzr, [x28,924]
-.L2687:
-	ldrh	w2, [x22,360]
-	b	.L2661
-.L2600:
-	add	x0, x21, :lo12:.LANCHOR4
-	ldrh	w2, [x0,362]
-	cbnz	w2, .L2601
-	ldrh	w0, [x28,3920]
-	ldr	x1, [x28,1184]
+	cbz	w0, .L2680
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x23, x23, :lo12:.LANCHOR5
+	str	wzr, [x19,924]
+.L2767:
+	ldrh	w2, [x23,-152]
+	b	.L2741
+.L2680:
+	add	x23, x23, :lo12:.LANCHOR5
+	ldrh	w2, [x23,-150]
+	cbnz	w2, .L2681
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x21,3408]
 	lsl	x0, x0, 1
-	ldrh	w4, [x1,x0]
-	cbz	w4, .L2601
+	ldr	x1, [x1,1184]
+	ldrh	w3, [x1,x0]
+	cbz	w3, .L2681
 	strh	w2, [x1,x0]
-	ldrh	w0, [x28,3920]
+	ldrh	w0, [x21,3408]
 	bl	update_vpc_list
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2601:
+.L2681:
 	mov	w0, -1
-	strh	w0, [x28,3920]
-	b	.L2599
-.L2602:
-	adrp	x1, .LANCHOR4+360
-	str	wzr, [x28,924]
-	ldrh	w2, [x1,#:lo12:.LANCHOR4+360]
+	strh	w0, [x21,3408]
+	b	.L2679
+.L2682:
+	str	wzr, [x1,924]
+	adrp	x1, .LANCHOR5-152
+	ldrh	w2, [x1,#:lo12:.LANCHOR5-152]
 	cmp	w2, wzr
 	csinc	w2, w2, w0, ne
-	b	.L2661
-.L2690:
-	ldrh	w25, [x22,948]
+	b	.L2741
+.L2770:
+	ldrh	w25, [x23,948]
 	cmp	w25, w20
-	bne	.L2533
-	ldrh	w0, [x22,3600]
+	bne	.L2613
+	ldrh	w0, [x23,3600]
 	mov	w2, 1024
-	ldr	w1, [x22,940]
+	ldr	w1, [x23,940]
 	cmp	w0, 24
 	mov	w0, 5120
 	csel	w0, w0, w2, cc
 	cmp	w1, w0
-	bls	.L2533
-	adrp	x0, .LANCHOR4+360
-	str	wzr, [x22,940]
-	strh	wzr, [x0,#:lo12:.LANCHOR4+360]
+	bls	.L2613
+	adrp	x0, .LANCHOR5-152
+	str	wzr, [x23,940]
+	strh	wzr, [x0,#:lo12:.LANCHOR5-152]
 	bl	GetSwlReplaceBlock
 	uxth	w20, w0
 	cmp	w20, w25
-	bne	.L2535
-	ldrh	w1, [x22,3600]
-	ldrh	w0, [x22,954]
+	bne	.L2615
+	ldrh	w1, [x23,3600]
+	ldrh	w0, [x23,954]
 	cmp	w1, w0
-	bcs	.L2536
+	bcs	.L2616
 	mov	w0, 64
 	bl	List_get_gc_head_node
 	uxth	w0, w0
 	cmp	w0, w20
-	beq	.L2545
-	ldr	w2, [x22,864]
+	beq	.L2625
+	ldr	w2, [x23,864]
 	uxtw	x1, w0
-	cbnz	w2, .L2538
-	ldrh	w0, [x22,768]
+	cbnz	w2, .L2618
+	ldrh	w0, [x23,768]
 	cmp	w0, 3
-	beq	.L2538
-	ldr	w0, [x22,868]
-	cbnz	w0, .L2538
-	ldr	w0, [x22,652]
-	cbnz	w0, .L2538
+	beq	.L2618
+	ldr	w0, [x23,868]
+	cbnz	w0, .L2618
+	ldr	w0, [x23,652]
+	cbnz	w0, .L2618
 	adrp	x0, .LANCHOR0+136
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
-	cbz	w0, .L2539
-.L2538:
+	cbz	w0, .L2619
+.L2618:
 	add	x2, x19, :lo12:.LANCHOR2
 	ldr	x0, [x2,1184]
 	ldrh	w4, [x0,x1,lsl 1]
@@ -17155,7 +17974,7 @@ ftl_do_gc:
 	csel	w0, w1, w0, eq
 	add	w0, w3, w0
 	cmp	w4, w0
-	bgt	.L2541
+	bgt	.L2621
 	mov	w0, 0
 	bl	List_get_gc_head_node
 	uxth	w20, w0
@@ -17164,45 +17983,45 @@ ftl_do_gc:
 	ldr	w2, [x0,3892]
 	add	w1, w1, w1, lsl 1
 	cmp	w2, w1, lsr 2
-	bhi	.L2685
+	bhi	.L2765
 	mov	w1, 160
-	b	.L2684
-.L2541:
+	b	.L2764
+.L2621:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 128
-	b	.L2686
-.L2539:
-	ldr	x2, [x22,1184]
+	b	.L2766
+.L2619:
+	ldr	x2, [x23,1184]
 	ldrh	w1, [x2,x1,lsl 1]
 	cmp	w1, 7
-	bhi	.L2544
+	bhi	.L2624
 	bl	List_get_gc_head_node
 	uxth	w20, w0
 	add	x0, x19, :lo12:.LANCHOR2
-.L2685:
+.L2765:
 	mov	w1, 128
-.L2684:
+.L2764:
 	strh	w1, [x0,954]
 	mov	w0, 65535
 	cmp	w20, w0
-	beq	.L2545
-	b	.L2535
-.L2544:
+	beq	.L2625
+	b	.L2615
+.L2624:
 	add	x0, x19, :lo12:.LANCHOR2
 	mov	w1, 64
-.L2686:
+.L2766:
 	strh	w1, [x0,954]
-	b	.L2545
-.L2536:
+	b	.L2625
+.L2616:
 	mov	w0, 80
-	strh	w0, [x22,954]
-	b	.L2545
-.L2535:
+	strh	w0, [x23,954]
+	b	.L2625
+.L2615:
 	add	x5, x19, :lo12:.LANCHOR2
 	ubfiz	x4, x20, 1, 32
-	adrp	x0, .LC132
+	adrp	x0, .LC152
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC132
+	add	x0, x0, :lo12:.LC152
 	ldr	x3, [x5,1184]
 	ldr	x6, [x5,1168]
 	ldrh	w2, [x5,3600]
@@ -17210,13 +18029,13 @@ ftl_do_gc:
 	ldrh	w5, [x5,952]
 	ldrh	w4, [x6,x4]
 	bl	printk
-.L2545:
+.L2625:
 	bl	FtlGcReFreshBadBlk
-	b	.L2533
-.L2689:
+	b	.L2613
+.L2769:
 	mov	w20, w0
-	b	.L2533
-.L2661:
+	b	.L2613
+.L2741:
 	mov	w0, w2
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -17231,120 +18050,124 @@ ftl_do_gc:
 	.type	FtlCacheWriteBack, %function
 FtlCacheWriteBack:
 	stp	x29, x30, [sp, -112]!
-	adrp	x0, .LANCHOR4+368
+	adrp	x0, .LANCHOR5-144
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR2
-	ldr	x20, [x0,#:lo12:.LANCHOR4+368]
+	ldr	x20, [x0,#:lo12:.LANCHOR5-144]
 	add	x0, x19, :lo12:.LANCHOR2
-	str	x27, [sp,80]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
 	ldr	w22, [x0,1400]
-	cbnz	w22, .L2696
+	cbnz	w22, .L2776
 	ldr	w1, [x0,968]
-	cbz	w1, .L2696
+	cbz	w1, .L2776
 	adrp	x0, .LANCHOR0+136
 	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
-	cbz	w0, .L2698
+	cbz	w0, .L2778
 	ldrb	w0, [x20,8]
 	cmp	w0, 1
 	cset	w22, eq
-.L2698:
+.L2778:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrb	w3, [x20,9]
-	adrp	x24, .LC133
+	adrp	x24, .LC153
 	mov	w2, w22
 	mov	w23, 0
-	mov	w26, 56
+	mov	w25, 56
 	ldr	x0, [x0,1032]
-	add	x24, x24, :lo12:.LC133
+	add	x24, x24, :lo12:.LC153
 	bl	FlashProgPages
-.L2699:
+.L2779:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w1, [x0,968]
 	cmp	w23, w1
-	bcs	.L2716
-	umull	x21, w23, w26
+	bcs	.L2797
+	umull	x21, w23, w25
 	ldr	x1, [x0,1032]
 	add	x0, x1, x21
-	ldr	w25, [x1,x21]
-	cmn	w25, #1
-	beq	.L2719
+	ldr	w1, [x1,x21]
+	cmn	w1, #1
+	beq	.L2800
 	ldr	w1, [x0,4]
-	cbz	w22, .L2733
+	cbz	w22, .L2814
 	orr	w1, w1, -2147483648
-.L2733:
+.L2814:
 	ldr	w0, [x0,24]
 	mov	w2, 1
 	str	w1, [x29,108]
-	add	x25, x19, :lo12:.LANCHOR2
+	add	x26, x19, :lo12:.LANCHOR2
 	add	x1, x29, 108
 	bl	log2phys
-	ldr	x0, [x25,1032]
+	ldr	x0, [x26,1032]
 	add	x21, x0, x21
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L2703
+	beq	.L2783
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
 	ubfiz	x0, x1, 1, 16
-	ldr	x2, [x25,1184]
+	ldr	x2, [x26,1184]
 	mov	w21, w1
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L2704
+	cbnz	w2, .L2784
 	mov	x0, x24
 	bl	printk
-.L2704:
+.L2784:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L2703:
+.L2783:
 	add	w23, w23, 1
-	b	.L2699
-.L2735:
+	b	.L2779
+.L2816:
 	mov	w20, 16386
-.L2715:
+.L2796:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x0,958]
-	cbz	w0, .L2716
+	cbz	w0, .L2797
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	subs	w20, w20, #1
-	bne	.L2715
-.L2716:
+	bne	.L2796
+.L2797:
 	add	x19, x19, :lo12:.LANCHOR2
 	str	wzr, [x19,968]
-	b	.L2696
-.L2719:
-	adrp	x26, .LC133
+	b	.L2776
+.L2800:
+	adrp	x25, .LANCHOR4
+	adrp	x26, .LC153
 	mov	w24, 0
 	mov	w27, 56
-	add	x26, x26, :lo12:.LC133
-.L2700:
+	add	x25, x25, :lo12:.LANCHOR4
+	add	x26, x26, :lo12:.LC153
+.L2780:
 	add	x0, x19, :lo12:.LANCHOR2
 	ldr	w1, [x0,968]
 	cmp	w24, w1
-	bcs	.L2735
+	bcs	.L2816
 	umull	x21, w24, w27
 	ldr	x0, [x0,1032]
-	str	w25, [x0,x21]
-.L2706:
+	mov	w1, -1
+	mov	w28, 1
+	str	w1, [x0,x21]
+.L2786:
 	add	x23, x19, :lo12:.LANCHOR2
 	ldr	x0, [x23,1032]
 	add	x1, x0, x21
 	ldr	w0, [x0,x21]
 	cmn	w0, #1
 	ldr	w0, [x1,4]
-	bne	.L2736
+	bne	.L2817
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	ldrh	w1, [x20]
 	cmp	w1, w0, uxth
-	bne	.L2707
+	bne	.L2787
 	ldr	x2, [x23,1184]
 	ubfiz	x1, x1, 1, 16
 	ldrh	w3, [x20,4]
@@ -17355,16 +18178,16 @@ FtlCacheWriteBack:
 	ldrh	w0, [x23,818]
 	strh	w0, [x20,2]
 	strh	wzr, [x20,4]
-.L2707:
+.L2787:
 	ldrh	w0, [x20,4]
-	cbnz	w0, .L2708
+	cbnz	w0, .L2788
 	mov	x0, x20
 	bl	allocate_new_data_superblock
-.L2708:
+.L2788:
 	add	x23, x19, :lo12:.LANCHOR2
-	ldr	w0, [x23,4064]
+	ldr	w0, [x25,3552]
 	add	w0, w0, 1
-	str	w0, [x23,4064]
+	str	w0, [x25,3552]
 	ldr	x0, [x23,1032]
 	add	x0, x0, x21
 	ldr	w0, [x0,4]
@@ -17382,13 +18205,20 @@ FtlCacheWriteBack:
 	ldrb	w3, [x20,9]
 	add	x0, x0, x21
 	bl	FlashProgPages
-	ldr	w0, [x23,1400]
-	cbz	w0, .L2706
-	b	.L2696
-.L2736:
-	cbz	w22, .L2734
+	ldr	x0, [x23,1032]
+	ldr	w0, [x0,x21]
+	cmn	w0, #1
+	bne	.L2789
+	str	w28, [x23,1400]
+.L2789:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w0, [x0,1400]
+	cbz	w0, .L2786
+	b	.L2776
+.L2817:
+	cbz	w22, .L2815
 	orr	w0, w0, -2147483648
-.L2734:
+.L2815:
 	str	w0, [x29,108]
 	mov	w2, 1
 	ldr	w0, [x1,24]
@@ -17400,7 +18230,7 @@ FtlCacheWriteBack:
 	ldr	x0, [x21,16]
 	ldr	w0, [x0,12]
 	cmn	w0, #1
-	beq	.L2712
+	beq	.L2793
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	uxth	w1, w0
@@ -17408,22 +18238,22 @@ FtlCacheWriteBack:
 	ldr	x2, [x23,1184]
 	mov	w21, w1
 	ldrh	w2, [x2,x0]
-	cbnz	w2, .L2713
+	cbnz	w2, .L2794
 	mov	x0, x26
 	bl	printk
-.L2713:
+.L2794:
 	mov	w0, w21
 	bl	decrement_vpc_count
-.L2712:
+.L2793:
 	add	w24, w24, 1
-	b	.L2700
-.L2696:
+	b	.L2780
+.L2776:
 	mov	w0, 0
-	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 112
 	ret
 	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
@@ -17435,13 +18265,13 @@ FtlSysFlush:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR2+1400]
-	cbnz	w0, .L2738
+	cbnz	w0, .L2819
 	bl	FtlCacheWriteBack
 	bl	l2p_flush
 	mov	w0, 1
 	bl	FtlEctTblFlush
 	bl	FtlVpcTblFlush
-.L2738:
+.L2819:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -17455,9 +18285,9 @@ FtlDeInit:
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR1+3064]
 	cmp	w0, 1
-	bne	.L2740
+	bne	.L2821
 	bl	FtlSysFlush
-.L2740:
+.L2821:
 	mov	w0, 0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -17500,45 +18330,45 @@ ftl_discard:
 	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
 	mov	w0, -1
 	cmp	w2, w1
-	bhi	.L2744
+	bhi	.L2825
 	cmp	w19, 31
-	bls	.L2758
+	bls	.L2839
 	adrp	x22, .LANCHOR2
 	add	x21, x22, :lo12:.LANCHOR2
 	ldr	w0, [x21,1400]
-	cbnz	w0, .L2758
+	cbnz	w0, .L2839
 	bl	FtlCacheWriteBack
 	ldrh	w1, [x21,824]
 	udiv	w21, w20, w1
 	msub	w20, w1, w21, w20
 	uxth	w20, w20
-	cbz	w20, .L2747
+	cbz	w20, .L2828
 	sub	w1, w1, w20
 	add	w21, w21, 1
 	cmp	w1, w19
 	csel	w1, w1, w19, ls
 	sub	w19, w19, w1, uxth
-.L2747:
+.L2828:
 	mov	w0, -1
-	adrp	x23, .LANCHOR4
+	adrp	x23, .LANCHOR5
 	str	w0, [x29,76]
-.L2748:
+.L2829:
 	add	x20, x22, :lo12:.LANCHOR2
 	ldrh	w0, [x20,824]
 	cmp	w19, w0
-	bcc	.L2759
+	bcc	.L2840
 	mov	w0, w21
 	add	x1, x29, 72
 	mov	w2, 0
 	bl	log2phys
 	ldr	w0, [x29,72]
 	cmn	w0, #1
-	beq	.L2749
-	add	x1, x23, :lo12:.LANCHOR4
+	beq	.L2830
+	add	x1, x23, :lo12:.LANCHOR5
 	mov	w2, 1
-	ldr	w0, [x1,376]
+	ldr	w0, [x1,-136]
 	add	w0, w0, 1
-	str	w0, [x1,376]
+	str	w0, [x1,-136]
 	ldr	w0, [x20,888]
 	add	x1, x29, 76
 	add	w0, w0, 1
@@ -17549,24 +18379,24 @@ ftl_discard:
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	bl	decrement_vpc_count
-.L2749:
+.L2830:
 	add	x0, x22, :lo12:.LANCHOR2
 	add	w21, w21, 1
 	ldrh	w0, [x0,824]
 	sub	w19, w19, w0
-	b	.L2748
-.L2759:
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	w1, [x0,376]
+	b	.L2829
+.L2840:
+	adrp	x0, .LANCHOR5
+	add	x0, x0, :lo12:.LANCHOR5
+	ldr	w1, [x0,-136]
 	cmp	w1, 32
-	bls	.L2758
-	str	wzr, [x0,376]
+	bls	.L2839
+	str	wzr, [x0,-136]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
-.L2758:
+.L2839:
 	mov	w0, 0
-.L2744:
+.L2825:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -17587,95 +18417,94 @@ FtlGcFreeTempBlock:
 	stp	x25, x26, [sp,64]
 	ldr	w3, [x2,1400]
 	ldrh	w1, [x2,818]
-	cbnz	w3, .L2795
+	cbnz	w3, .L2876
 	ldrh	w20, [x2,3704]
 	mov	w4, 65535
 	cmp	w20, w4
-	bne	.L2763
-.L2772:
-	add	x20, x19, :lo12:.LANCHOR2
-	adrp	x21, .LANCHOR4
-	add	x22, x21, :lo12:.LANCHOR4
+	bne	.L2844
+.L2853:
+	add	x21, x19, :lo12:.LANCHOR2
+	adrp	x20, .LANCHOR4
+	add	x22, x20, :lo12:.LANCHOR4
 	mov	w0, 65535
-	add	x23, x20, 3704
-	ldrh	w1, [x20,3704]
-	str	wzr, [x22,168]
+	add	x23, x21, 3704
+	ldrh	w1, [x21,3704]
+	str	wzr, [x22,4008]
 	cmp	w1, w0
-	beq	.L2795
+	beq	.L2876
 	bl	FtlCacheWriteBack
 	mov	w26, 12
 	ldrb	w0, [x23,7]
-	ldrh	w3, [x20,818]
-	ldr	x1, [x20,1184]
-	ldrh	w2, [x20,3704]
+	ldrh	w3, [x21,818]
+	ldr	x1, [x21,1184]
+	ldrh	w2, [x21,3704]
 	mul	w0, w0, w3
 	strh	w0, [x1,x2,lsl 1]
-	ldrh	w1, [x22,178]
+	ldrh	w1, [x22,4018]
 	mov	w22, 0
-	ldr	w0, [x20,880]
+	ldr	w0, [x21,880]
 	add	w0, w1, w0
-	str	w0, [x20,880]
-	b	.L2773
-.L2763:
-	cbz	w0, .L2766
+	str	w0, [x21,880]
+	b	.L2854
+.L2844:
+	cbz	w0, .L2847
 	adrp	x0, .LANCHOR1
 	add	x0, x0, :lo12:.LANCHOR1
 	ldrh	w5, [x0,3068]
 	cmp	w5, w4
-	beq	.L2767
-.L2768:
+	beq	.L2848
+.L2849:
 	mov	w1, 2
-	b	.L2766
-.L2767:
+	b	.L2847
+.L2848:
 	strh	w3, [x0,3068]
 	ldrh	w0, [x2,3600]
 	cmp	w0, 17
-	bhi	.L2768
-.L2766:
+	bhi	.L2849
+.L2847:
 	add	x21, x19, :lo12:.LANCHOR2
 	add	x0, x21, 3704
 	bl	FtlGcScanTempBlk
 	str	w0, [x29,92]
 	cmn	w0, #1
-	beq	.L2769
+	beq	.L2850
 	ubfiz	x20, x20, 1, 16
 	ldr	x1, [x21,1168]
 	ldrh	w0, [x1,x20]
 	cmp	w0, 4
-	bls	.L2770
+	bls	.L2851
 	sub	w0, w0, #5
 	strh	w0, [x1,x20]
 	mov	w0, 1
 	bl	FtlEctTblFlush
-.L2770:
+.L2851:
 	adrp	x0, .LANCHOR4
 	add	x1, x0, :lo12:.LANCHOR4
-	mov	x20, x0
-	ldr	w1, [x1,168]
-	cbnz	w1, .L2771
-	add	x19, x19, :lo12:.LANCHOR2
-	ldr	w0, [x19,4064]
+	mov	x19, x0
+	ldr	w2, [x1,4008]
+	cbnz	w2, .L2852
+	ldr	w0, [x1,3552]
 	add	w0, w0, 1
-	str	w0, [x19,4064]
+	str	w0, [x1,3552]
 	ldr	w0, [x29,92]
 	lsr	w0, w0, 10
 	bl	FtlBbmMapBadBlock
 	bl	FtlBbmTblFlush
-.L2771:
-	add	x0, x20, :lo12:.LANCHOR4
-	str	wzr, [x0,168]
+.L2852:
+	add	x0, x19, :lo12:.LANCHOR4
+	str	wzr, [x0,4008]
 	mov	w0, 1
-	b	.L2762
-.L2769:
+	b	.L2843
+.L2850:
 	adrp	x0, .LANCHOR1+3068
 	mov	w1, 65535
 	ldrh	w2, [x0,#:lo12:.LANCHOR1+3068]
 	mov	w0, 1
 	cmp	w2, w1
-	bne	.L2762
-	b	.L2772
-.L2776:
-	ldr	x25, [x20,984]
+	bne	.L2843
+	b	.L2853
+.L2857:
+	ldr	x25, [x21,984]
 	add	x1, x29, 92
 	umull	x24, w22, w26
 	mov	w2, 0
@@ -17685,7 +18514,7 @@ FtlGcFreeTempBlock:
 	ldr	w0, [x29,92]
 	ldr	w1, [x25,x24]
 	cmp	w0, w1
-	bne	.L2774
+	bne	.L2855
 	lsr	x0, x0, 10
 	bl	P2V_block_in_plane
 	mov	w24, w0
@@ -17694,92 +18523,93 @@ FtlGcFreeTempBlock:
 	mov	w2, 1
 	bl	log2phys
 	mov	w0, w24
-.L2794:
+.L2875:
 	bl	decrement_vpc_count
-.L2775:
+.L2856:
 	add	w22, w22, 1
 	uxth	w22, w22
-.L2773:
-	add	x0, x21, :lo12:.LANCHOR4
-	ldrh	w0, [x0,178]
+.L2854:
+	add	x0, x20, :lo12:.LANCHOR4
+	ldrh	w0, [x0,4018]
 	cmp	w0, w22
-	bhi	.L2776
-	b	.L2796
-.L2774:
+	bhi	.L2857
+	b	.L2877
+.L2855:
 	ldr	w1, [x23,4]
 	cmp	w0, w1
-	beq	.L2775
-	ldrh	w0, [x20,3704]
-	b	.L2794
-.L2796:
+	beq	.L2856
+	ldrh	w0, [x21,3704]
+	b	.L2875
+.L2877:
 	mov	w0, -1
-	adrp	x20, .LANCHOR0
+	adrp	x21, .LANCHOR0
 	bl	decrement_vpc_count
-	add	x0, x20, :lo12:.LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
 	ldrb	w0, [x0,136]
-	cbz	w0, .L2777
+	cbz	w0, .L2858
 	add	x1, x19, :lo12:.LANCHOR2
-	adrp	x0, .LC134
-	add	x0, x0, :lo12:.LC134
+	adrp	x0, .LC154
+	add	x0, x0, :lo12:.LC154
 	ldrh	w1, [x1,3704]
 	bl	printk
-.L2777:
+.L2858:
 	add	x1, x19, :lo12:.LANCHOR2
 	ldrh	w0, [x1,3704]
 	ldr	x1, [x1,1184]
 	ubfiz	x2, x0, 1, 16
 	ldrh	w1, [x1,x2]
-	cbz	w1, .L2778
+	cbz	w1, .L2859
 	bl	INSERT_DATA_LIST
-	b	.L2779
-.L2778:
+	b	.L2860
+.L2859:
 	bl	INSERT_FREE_LIST
-.L2779:
+.L2860:
 	add	x22, x19, :lo12:.LANCHOR2
-	add	x21, x21, :lo12:.LANCHOR4
+	add	x23, x20, :lo12:.LANCHOR4
 	mov	w0, -1
-	strh	wzr, [x21,178]
+	strh	wzr, [x23,4018]
 	strh	w0, [x22,3704]
-	strh	wzr, [x21,176]
+	strh	wzr, [x23,4016]
 	bl	l2p_flush
 	bl	FtlVpcTblFlush
 	ldr	w0, [x22,652]
-	cbz	w0, .L2780
+	cbz	w0, .L2861
 	ldr	w0, [x22,920]
 	cmp	w0, 29
-	bhi	.L2780
-	ldrh	w0, [x22,3916]
+	bhi	.L2861
+	ldrh	w0, [x23,3404]
 	ldrh	w1, [x22,3600]
 	cmp	w1, w0
-	bcs	.L2781
+	bcs	.L2862
 	lsl	w0, w0, 1
 	strh	w0, [x22,952]
-.L2781:
-	add	x19, x19, :lo12:.LANCHOR2
+.L2862:
+	add	x20, x20, :lo12:.LANCHOR4
 	mov	w0, -1
-	strh	w0, [x19,3920]
-.L2795:
+	strh	w0, [x20,3408]
+.L2876:
 	mov	w0, 0
-	b	.L2762
-.L2780:
+	b	.L2843
+.L2861:
+	add	x20, x20, :lo12:.LANCHOR4
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w1, [x19,3916]
+	ldrh	w1, [x20,3404]
 	ldrh	w0, [x19,3600]
 	add	w2, w1, w1, lsl 1
 	cmp	w0, w2, lsr 2
-	ble	.L2795
-	add	x20, x20, :lo12:.LANCHOR0
+	ble	.L2876
+	add	x21, x21, :lo12:.LANCHOR0
 	mov	w0, -1
-	strh	w0, [x19,3920]
-	ldrb	w0, [x20,136]
-	cbz	w0, .L2782
+	strh	w0, [x20,3408]
+	ldrb	w0, [x21,136]
+	cbz	w0, .L2863
 	sub	w1, w1, #2
 	strh	w1, [x19,952]
-	b	.L2795
-.L2782:
+	b	.L2876
+.L2863:
 	mov	w1, 20
 	strh	w1, [x19,952]
-.L2762:
+.L2843:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -17803,14 +18633,14 @@ FtlGcPageRecovery:
 	ldrh	w1, [x19,3706]
 	ldrh	w0, [x19,818]
 	cmp	w1, w0
-	bcc	.L2797
+	bcc	.L2878
 	add	x0, x19, 3752
 	bl	FtlMapBlkWriteDumpData
 	mov	w0, 0
 	bl	FtlGcFreeTempBlock
-	adrp	x0, .LANCHOR4+168
-	str	wzr, [x0,#:lo12:.LANCHOR4+168]
-.L2797:
+	adrp	x0, .LANCHOR4+4008
+	str	wzr, [x0,#:lo12:.LANCHOR4+4008]
+.L2878:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -17820,11 +18650,11 @@ FtlGcPageRecovery:
 	.type	FtlPowerLostRecovery, %function
 FtlPowerLostRecovery:
 	stp	x29, x30, [sp, -32]!
-	adrp	x0, .LANCHOR4+224
+	adrp	x0, .LANCHOR4+4064
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR2
-	str	wzr, [x0,#:lo12:.LANCHOR4+224]
+	str	wzr, [x0,#:lo12:.LANCHOR4+4064]
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x20, x19, 3608
 	add	x19, x19, 3656
@@ -17845,1627 +18675,1629 @@ FtlPowerLostRecovery:
 	ret
 	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
 	.align	2
-	.global	Ftl_gc_temp_data_write_back
-	.type	Ftl_gc_temp_data_write_back, %function
-Ftl_gc_temp_data_write_back:
-	adrp	x0, .LANCHOR0+136
+	.global	FtlSysBlkInit
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
 	stp	x29, x30, [sp, -64]!
+	mov	w1, -1
 	add	x29, sp, 0
-	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
 	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR4
+	adrp	x20, .LANCHOR2
 	stp	x21, x22, [sp,32]
+	add	x0, x19, :lo12:.LANCHOR4
+	add	x21, x20, :lo12:.LANCHOR2
 	str	x23, [sp,48]
-	adrp	x21, .LANCHOR4
-	adrp	x19, .LANCHOR2
-	cbz	w0, .L2801
-	add	x0, x21, :lo12:.LANCHOR4
-	ldr	w0, [x0,144]
-	tbz	x0, 0, .L2801
-	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x0,3708]
-	cbz	w0, .L2801
-.L2806:
-	mov	w0, 0
-	b	.L2802
-.L2801:
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x1, x21, :lo12:.LANCHOR4
-	mov	w2, 0
-	mov	w20, 0
-	mov	w3, w2
-	mov	w23, 56
-	ldr	x0, [x0,1000]
-	ldr	w1, [x1,144]
-	bl	FlashProgPages
-.L2803:
-	add	x22, x21, :lo12:.LANCHOR4
-	ldr	w1, [x22,144]
-	cmp	w20, w1
-	bcs	.L2817
-	add	x0, x19, :lo12:.LANCHOR2
-	umull	x1, w20, w23
-	ldr	x2, [x0,1000]
-	add	x3, x2, x1
-	ldr	w2, [x2,x1]
-	cmn	w2, #1
-	bne	.L2804
-	ldrh	w4, [x0,3704]
-	ldr	x3, [x0,1184]
-	strh	wzr, [x3,x4,lsl 1]
-	strh	w2, [x0,3704]
-	ldr	w2, [x0,4064]
-	add	w2, w2, 1
-	str	w2, [x0,4064]
-	ldr	x0, [x0,1000]
-	add	x1, x0, x1
-	ldr	w0, [x1,4]
-	lsr	w0, w0, 10
-	bl	FtlBbmMapBadBlock
-	bl	FtlBbmTblFlush
-	bl	FtlGcPageVarInit
-	b	.L2816
-.L2804:
-	ldr	x2, [x3,16]
-	add	w20, w20, 1
-	ldr	w1, [x3,4]
-	uxth	w20, w20
-	ldr	w0, [x2,12]
-	ldr	w2, [x2,8]
-	bl	FtlGcUpdatePage
-	b	.L2803
-.L2817:
-	add	x19, x19, :lo12:.LANCHOR2
-	ldr	x0, [x19,1000]
-	bl	FtlGcBufFree
-	str	wzr, [x22,144]
-	ldrh	w0, [x19,3708]
-	cbnz	w0, .L2806
-	mov	w0, 1
-	bl	FtlGcFreeTempBlock
-.L2816:
+	strh	w1, [x0,4058]
+	strh	wzr, [x0,4060]
+	ldrh	w0, [x21,752]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	w1, [x21,3896]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2882
+.L2884:
+	mov	w23, -1
+	b	.L2883
+.L2882:
+	bl	FtlLoadSysInfo
+	mov	w23, w0
+	cbnz	w0, .L2884
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
 	mov	w0, 1
-.L2802:
+	bl	FtlUpdateVaildLpn
+	ldrh	w2, [x21,858]
+	mov	x1, 0
+	ldr	x0, [x21,1264]
+.L2885:
+	cmp	w1, w2
+	mov	w3, w1
+	bge	.L2889
+	add	x4, x0, x1, lsl 4
+	add	x1, x1, 1
+	ldr	w4, [x4,4]
+	tbz	w4, #31, .L2885
+.L2889:
+	add	x0, x20, :lo12:.LANCHOR2
+	cmp	w3, w2
+	ldrh	w1, [x0,3548]
+	add	w1, w1, 1
+	strh	w1, [x0,3548]
+	blt	.L2886
+	add	x19, x19, :lo12:.LANCHOR4
+	ldrh	w0, [x19,4060]
+	cbz	w0, .L2890
+.L2886:
+	add	x19, x20, :lo12:.LANCHOR2
+	add	x22, x19, 3608
+	add	x21, x19, 3656
+	mov	x0, x22
+	bl	FtlSuperblockPowerLostFix
+	mov	x0, x21
+	bl	FtlSuperblockPowerLostFix
+	ldrh	w0, [x19,3608]
+	ldr	x2, [x19,1184]
+	lsl	x0, x0, 1
+	ldrh	w3, [x19,3612]
+	ldrh	w1, [x2,x0]
+	sub	w1, w1, w3
+	strh	w1, [x2,x0]
+	strb	wzr, [x19,3614]
+	ldrh	w0, [x19,818]
+	strh	w0, [x19,3610]
+	ldrh	w0, [x19,3656]
+	ldr	x2, [x19,1184]
+	lsl	x0, x0, 1
+	strh	wzr, [x19,3612]
+	ldrh	w3, [x19,3660]
+	ldrh	w1, [x2,x0]
+	sub	w1, w1, w3
+	strh	w1, [x2,x0]
+	strb	wzr, [x19,3662]
+	ldrh	w0, [x19,818]
+	strh	w0, [x19,3658]
+	add	x0, x19, 3752
+	strh	wzr, [x19,3660]
+	bl	FtlMapBlkWriteDumpData
+	add	x0, x19, 3824
+	bl	FtlMapBlkWriteDumpData
+	ldrh	w0, [x19,3550]
+	add	w0, w0, 1
+	strh	w0, [x19,3550]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+.L2890:
+	add	x19, x20, :lo12:.LANCHOR2
+	mov	w0, 65535
+	add	x22, x19, 3608
+	ldrh	w1, [x19,3608]
+	cmp	w1, w0
+	beq	.L2891
+	ldrh	w0, [x19,3612]
+	cbnz	w0, .L2891
+	ldrh	w0, [x19,3660]
+	add	x21, x19, 3656
+	cbnz	w0, .L2891
+	bl	FtlVpcTblFlush
+	ldrh	w0, [x19,3608]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	w0, [x19,3656]
+	bl	FtlGcRefreshOpenBlock
+	mov	x0, x22
+	bl	allocate_new_data_superblock
+	mov	x0, x21
+	bl	allocate_new_data_superblock
+	add	x0, x19, 3824
+	bl	FtlMapBlkWriteDumpData
+.L2891:
+	add	x20, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x20,3548]
+	and	w0, w0, 31
+	cbnz	w0, .L2883
+	bl	FtlVpcCheckAndModify
+.L2883:
+	mov	w0, w23
+	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldr	x23, [sp,48]
 	ldp	x29, x30, [sp], 64
 	ret
-	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
-	.align	2
-	.global	Ftl_get_new_temp_ppa
-	.type	Ftl_get_new_temp_ppa, %function
-Ftl_get_new_temp_ppa:
-	stp	x29, x30, [sp, -32]!
-	add	x29, sp, 0
-	str	x19, [sp,16]
-	adrp	x19, .LANCHOR2
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x1, x0, 3704
-	ldrh	w2, [x0,3704]
-	mov	w0, 65535
-	cmp	w2, w0
-	beq	.L2819
-	ldrh	w0, [x1,4]
-	cbnz	w0, .L2820
-.L2819:
-	bl	FtlCacheWriteBack
-	mov	w0, 0
-	bl	FtlGcFreeTempBlock
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x0, x0, 3704
-	strb	wzr, [x0,8]
-	bl	allocate_data_superblock
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	strh	wzr, [x0,176]
-	strh	wzr, [x0,178]
-	bl	l2p_flush
-	mov	w0, 0
-	bl	FtlEctTblFlush
-	bl	FtlVpcTblFlush
-.L2820:
-	add	x0, x19, :lo12:.LANCHOR2
-	add	x0, x0, 3704
-	bl	get_new_active_ppa
-	ldr	x19, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
 	.align	2
-	.global	ftl_read
-	.type	ftl_read, %function
-ftl_read:
-	stp	x29, x30, [sp, -176]!
-	cmp	w0, 16
+	.global	FtlLowFormat
+	.type	FtlLowFormat, %function
+FtlLowFormat:
+	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	mov	w20, w1
-	mov	w28, w2
-	mov	x25, x3
-	bne	.L2822
-	add	w0, w1, 256
-	mov	w1, w2
-	mov	x2, x3
-	bl	FtlVendorPartRead
-	b	.L2823
-.L2822:
-	add	w0, w1, w2
-	str	w0, [x29,156]
-	adrp	x0, .LANCHOR0+4048
-	ldr	w2, [x29,156]
-	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
-	mov	w0, -1
-	cmp	w2, w1
-	bhi	.L2823
 	adrp	x19, .LANCHOR2
-	sub	w24, w2, #1
-	add	x1, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x1,824]
-	udiv	w27, w20, w0
-	udiv	w24, w24, w0
-	adrp	x0, .LANCHOR4
-	add	x0, x0, :lo12:.LANCHOR4
-	sub	w23, w24, w27
-	add	w23, w23, 1
-	ldr	w2, [x0,132]
-	add	w2, w28, w2
-	str	w2, [x0,132]
-	ldr	w0, [x1,900]
-	add	w0, w23, w0
-	str	w0, [x1,900]
-	mov	w0, w27
-	mov	w1, w24
-	bl	FtlCacheMetchLpa
-	cbz	w0, .L2824
-	bl	FtlCacheWriteBack
-.L2824:
-	mov	w26, 0
-	mov	w21, w27
-	str	w26, [x29,152]
-	mov	w22, w26
-	str	w26, [x29,140]
-.L2825:
-	cbz	w23, .L2866
-	mov	w0, w21
-	add	x1, x29, 172
-	mov	w2, 0
-	bl	log2phys
-	ldr	w3, [x29,172]
-	cmn	w3, #1
-	bne	.L2864
-	mov	w3, 0
-.L2826:
-	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x0,824]
-	cmp	w3, w0
-	bcs	.L2830
-	madd	w0, w21, w0, w3
-	cmp	w0, w20
-	bcc	.L2828
-	ldr	w1, [x29,156]
-	cmp	w0, w1
-	bcs	.L2828
-	sub	w0, w0, w20
-	mov	w1, 0
-	ubfiz	x0, x0, 9, 23
-	mov	w2, 512
-	add	x0, x25, x0
-	str	x3, [x29,144]
+	str	x23, [sp,48]
+	add	x20, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	ldr	w21, [x20,1400]
+	cbnz	w21, .L2899
+	ldrh	w2, [x20,856]
+	mov	w1, w21
+	ldr	x0, [x20,1248]
+	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldr	x3, [x29,144]
-.L2828:
-	add	w3, w3, 1
-	b	.L2826
-.L2864:
-	add	x2, x19, :lo12:.LANCHOR2
-	mov	w0, 56
-	cmp	w21, w27
-	umull	x1, w22, w0
-	ldr	x0, [x2,992]
-	add	x0, x0, x1
-	str	w3, [x0,4]
-	ldrh	w0, [x2,824]
-	bne	.L2831
-	ldr	x3, [x2,992]
-	ldr	x2, [x2,1088]
-	add	x3, x3, x1
-	str	x2, [x3,8]
-	udiv	w2, w20, w0
-	msub	w2, w2, w0, w20
-	str	w2, [x29,112]
-	sub	w2, w0, w2
-	cmp	w2, w28
-	csel	w2, w2, w28, ls
-	str	w2, [x29,152]
-	cmp	w2, w0
-	bne	.L2832
-	str	x25, [x3,8]
-	b	.L2832
-.L2831:
-	cmp	w21, w24
-	bne	.L2833
-	ldr	x3, [x2,992]
-	ldr	x2, [x2,1096]
-	add	x3, x3, x1
-	ldr	w4, [x29,156]
-	str	x2, [x3,8]
-	mul	w2, w21, w0
-	sub	w26, w4, w2
-	cmp	w26, w0
-	bne	.L2832
-	sub	w2, w2, w20
-	ubfiz	x2, x2, 9, 23
-	add	x2, x25, x2
-	str	x2, [x3,8]
-	b	.L2832
-.L2833:
-	ldr	x2, [x2,992]
-	mul	w0, w21, w0
-	add	x2, x2, x1
-	sub	w0, w0, w20
-	ubfiz	x0, x0, 9, 23
-	add	x0, x25, x0
-	str	x0, [x2,8]
-.L2832:
-	add	x2, x19, :lo12:.LANCHOR2
-	ldr	x0, [x2,992]
-	add	x1, x0, x1
-	ldrh	w0, [x2,830]
-	ldr	x2, [x2,1120]
-	mul	w0, w22, w0
-	str	w21, [x1,24]
-	add	w22, w22, 1
-	and	x0, x0, 4294967292
-	add	x0, x2, x0
-	str	x0, [x1,16]
-.L2830:
-	subs	w23, w23, #1
+	ldrh	w2, [x20,856]
+	mov	w1, w21
+	ldr	x0, [x20,1240]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	str	w21, [x20,872]
+	ldrh	w0, [x20,752]
+	str	w21, [x20,876]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	w0, .L2900
+	bl	FtlMakeBbt
+.L2900:
+	mov	w0, 0
+.L2901:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x1,824]
+	cmp	w0, w2, lsl 7
+	bge	.L2928
+	ubfiz	x3, x0, 2, 16
+	ldr	x4, [x1,1088]
+	mvn	w2, w0
+	orr	w2, w0, w2, lsl 16
+	str	w2, [x4,x3]
+	add	w0, w0, 1
+	ldr	x2, [x1,1096]
+	mov	w1, 23752
+	movk	w1, 0xa0f, lsl 16
+	uxth	w0, w0
+	str	w1, [x2,x3]
+	b	.L2901
+.L2928:
+	ldrh	w21, [x1,756]
+	mov	w20, 0
+.L2903:
+	add	x22, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x22,758]
+	cmp	w0, w21
+	bls	.L2929
+	mov	w0, w21
+	mov	w1, 1
 	add	w21, w21, 1
-	beq	.L2834
+	bl	FtlLowFormatEraseBlock
+	add	w0, w20, w0
+	uxth	w21, w21
+	uxth	w20, w0
+	b	.L2903
+.L2929:
+	ldrh	w0, [x22,748]
+	sub	w1, w20, #3
+	cmp	w1, w0, lsl 1
+	bge	.L2905
+.L2909:
+	mov	w20, 0
+	mov	w21, w20
+	b	.L2906
+.L2905:
+	udiv	w20, w20, w0
+	ldr	w0, [x22,852]
+	add	w0, w20, w0
+	bl	FtlSysBlkNumInit
+	ldrh	w0, [x22,752]
+	bl	FtlFreeSysBlkQueueInit
+	ldrh	w20, [x22,756]
+.L2907:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x0,748]
-	cmp	w22, w0, lsl 3
-	bne	.L2825
-.L2834:
-	cbz	w22, .L2825
+	ldrh	w0, [x0,758]
+	cmp	w0, w20
+	bls	.L2909
+	mov	w0, w20
+	mov	w1, 1
+	add	w20, w20, 1
+	bl	FtlLowFormatEraseBlock
+	uxth	w20, w20
+	b	.L2907
+.L2906:
 	add	x0, x19, :lo12:.LANCHOR2
-	mov	w1, w22
-	mov	w2, 0
-	ldr	x0, [x0,992]
-	bl	FlashReadPages
-	str	xzr, [x29,144]
-	ldr	x0, [x29,112]
-	ubfiz	x0, x0, 9, 23
-	str	x0, [x29,128]
-	ldr	w0, [x29,152]
-	lsl	w0, w0, 9
-	str	w0, [x29,136]
-	lsl	w0, w26, 9
-	str	w0, [x29,108]
-.L2836:
-	ldr	w0, [x29,144]
-	cmp	w22, w0
-	bls	.L2867
-	ldr	x0, [x29,144]
-	add	x2, x19, :lo12:.LANCHOR2
-	mov	x1, 56
-	mul	x3, x0, x1
-	ldr	x0, [x2,992]
-	add	x0, x0, x3
-	ldr	w1, [x0,24]
-	cmp	w1, w27
-	bne	.L2837
-	ldr	x1, [x0,8]
-	ldr	x0, [x2,1088]
-	cmp	x1, x0
-	bne	.L2838
-	ldr	x2, [x29,128]
-	mov	x0, x25
-	str	x3, [x29,96]
-	add	x1, x1, x2
-	ldr	w2, [x29,136]
-	b	.L2865
-.L2837:
-	cmp	w1, w24
-	bne	.L2838
-	ldr	x1, [x0,8]
-	ldr	x0, [x2,1096]
-	cmp	x1, x0
-	bne	.L2838
-	ldrh	w0, [x2,824]
-	ldr	w2, [x29,108]
-	str	x3, [x29,96]
-	mul	w0, w24, w0
-	sub	w0, w0, w20
-	ubfiz	x0, x0, 9, 23
-	add	x0, x25, x0
-.L2865:
-	bl	ftl_memcpy
-	ldr	x3, [x29,96]
-.L2838:
+	ldrh	w1, [x0,756]
+	cmp	w1, w21
+	bls	.L2930
+	mov	w0, w21
+	mov	w1, 0
+	add	w21, w21, 1
+	bl	FtlLowFormatEraseBlock
+	add	w0, w20, w0
+	uxth	w21, w21
+	uxth	w20, w0
+	b	.L2906
+.L2930:
+	ldrh	w1, [x0,758]
+	adrp	x21, .LANCHOR4
+	ldrh	w2, [x0,748]
+	add	x6, x21, :lo12:.LANCHOR4
+	str	w1, [x0,944]
+	ldr	w1, [x0,760]
+	udiv	w3, w1, w2
+	str	w3, [x0,1396]
+	ubfx	x5, x3, 5, 16
+	add	w4, w5, 36
+	strh	w4, [x6,3404]
+	mov	w4, 24
+	mul	w4, w2, w4
+	cmp	w20, w4
+	ble	.L2911
+	sub	w1, w1, w20
+	udiv	w1, w1, w2
+	str	w1, [x0,1396]
+	lsr	w1, w1, 5
+	add	w1, w1, 24
+	strh	w1, [x6,3404]
+.L2911:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	x1, [x0,992]
-	add	x5, x1, x3
-	ldr	w4, [x1,x3]
-	cmn	w4, #1
-	bne	.L2839
-	ldr	w2, [x0,4040]
-	str	w4, [x29,140]
-	add	w2, w2, 1
-	str	w2, [x0,4040]
-.L2839:
-	ldr	w0, [x1,x3]
-	cmp	w0, 256
-	bne	.L2840
-	ldr	w0, [x5,4]
-	lsr	x0, x0, 10
-	bl	P2V_block_in_plane
-	bl	FtlGcRefreshBlock
-.L2840:
-	ldr	x0, [x29,144]
-	add	x0, x0, 1
-	str	x0, [x29,144]
-	b	.L2836
-.L2867:
-	mov	w22, 0
-	b	.L2825
-.L2866:
+	ldr	w0, [x0,652]
+	cmp	w0, 1
+	bne	.L2912
+	add	x1, x21, :lo12:.LANCHOR4
+	udiv	w0, w20, w2
+	ldrh	w4, [x1,3404]
+	add	w0, w4, w0
+	add	w0, w4, w0, asr 2
+	strh	w0, [x1,3404]
+.L2912:
+	adrp	x22, .LANCHOR0
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2913
+	add	x1, x21, :lo12:.LANCHOR4
+	udiv	w0, w20, w2
+	ldrh	w4, [x1,3404]
+	add	w0, w4, w0
+	add	w0, w4, w0, asr 2
+	strh	w0, [x1,3404]
+.L2913:
+	add	x6, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x6,810]
+	cbz	w1, .L2915
+	add	x0, x21, :lo12:.LANCHOR4
+	ldrh	w4, [x0,3404]
+	add	w4, w4, w1, lsr 1
+	strh	w4, [x0,3404]
+	mul	w4, w1, w2
+	cmp	w4, w20
+	ble	.L2915
+	add	w1, w1, 32
+	str	w3, [x6,1396]
+	add	w1, w5, w1
+	strh	w1, [x0,3404]
+.L2915:
 	add	x19, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x19,958]
-	cbz	w0, .L2843
-	mov	w0, w23
-	mov	w1, 1
-	bl	ftl_do_gc
-.L2843:
-	ldr	w0, [x29,140]
-.L2823:
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 176
-	ret
-	.size	ftl_read, .-ftl_read
-	.align	2
-	.global	ftl_write
-	.type	ftl_write, %function
-ftl_write:
-	stp	x29, x30, [sp, -272]!
-	mov	w4, w0
-	mov	w0, 0
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	mov	w20, w1
-	adrp	x1, .LANCHOR2
-	stp	x21, x22, [sp,32]
-	mov	w21, w2
-	add	x2, x1, :lo12:.LANCHOR2
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	mov	x22, x3
-	str	x1, [x29,152]
-	ldr	w3, [x2,1400]
-	cbnz	w3, .L2869
-	cmp	w4, 16
-	bne	.L2870
-	add	w0, w20, 256
-	mov	w1, w21
-	mov	x2, x22
-	bl	FtlVendorPartWrite
-	b	.L2869
-.L2870:
-	adrp	x0, .LANCHOR0+4048
-	add	w24, w20, w21
-	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
-	mov	w0, -1
-	cmp	w24, w1
-	bhi	.L2869
-	adrp	x3, .LANCHOR4
-	ldrh	w1, [x2,824]
-	add	x26, x3, :lo12:.LANCHOR4
-	sub	w24, w24, #1
-	mov	w0, 2048
-	str	x3, [x29,144]
-	udiv	w23, w20, w1
-	cmp	w21, w1, lsl 1
-	str	w0, [x26,380]
-	add	x19, x2, 3608
-	ldr	w3, [x2,968]
-	udiv	w0, w24, w1
-	str	w0, [x29,200]
-	sub	w28, w0, w23
-	add	w25, w28, 1
-	ldr	w0, [x2,884]
-	add	w0, w25, w0
-	str	w0, [x2,884]
-	ldr	w0, [x26,128]
-	add	w0, w21, w0
-	str	w0, [x26,128]
-	cset	w0, cs
-	str	w0, [x29,204]
-	cmp	w21, 8
-	add	x0, x2, 3656
-	csel	x19, x19, x0, hi
-	cbz	w3, .L2873
-	mov	w0, 56
-	sub	w3, w3, #1
-	umull	x3, w3, w0
-	ldr	x0, [x2,1032]
-	add	x3, x0, x3
-	ldr	w0, [x3,24]
-	cmp	w23, w0
-	bne	.L2874
-	ldr	w0, [x2,892]
-	add	w0, w0, 1
-	str	w0, [x2,892]
-	ldr	w0, [x26,384]
-	add	w0, w0, 1
-	str	w0, [x26,384]
-	msub	w0, w23, w1, w20
-	sub	w1, w1, w0
-	ubfiz	x0, x0, 9, 23
-	cmp	w1, w21
-	csel	w19, w1, w21, ls
-	ldr	x1, [x3,8]
-	lsl	w25, w19, 9
-	add	x0, x1, x0
-	mov	w2, w25
-	mov	x1, x22
-	bl	ftl_memcpy
-	cbnz	w28, .L2875
-	ldr	w0, [x26,384]
-	cmp	w0, 2
-	bgt	.L2875
-.L2908:
-	mov	w0, 0
-	b	.L2869
-.L2875:
-	add	x22, x22, x25
-	sub	w21, w21, w19
-	add	w20, w20, w19
-	add	w23, w23, 1
-	mov	w25, w28
-.L2874:
-	ldr	x0, [x29,144]
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x19, [x0,368]
-	str	wzr, [x0,384]
-.L2873:
-	ldr	w1, [x29,200]
-	mov	w0, w23
-	bl	FtlCacheMetchLpa
-	cbz	w0, .L2876
-	bl	FtlCacheWriteBack
-.L2876:
-	ldr	x0, [x29,144]
-	str	w23, [x29,192]
-	add	x0, x0, :lo12:.LANCHOR4
-	str	x19, [x0,368]
-	ldr	x0, [x29,152]
-	add	x24, x0, :lo12:.LANCHOR2
-	add	x0, x24, 3608
-	str	x0, [x29,176]
-	adrp	x0, .LC135
-	add	x0, x0, :lo12:.LC135
-	str	x0, [x29,104]
-.L2877:
-	cbz	w25, .L2938
-	ldrh	w0, [x19,4]
-	cbnz	w0, .L2878
-	ldr	x1, [x29,176]
-	adrp	x26, .LANCHOR1
-	cmp	x19, x1
-	bne	.L2879
-	add	x0, x24, 3656
-	ldrh	w19, [x0,4]
-	cbnz	w19, .L2880
-	bl	allocate_new_data_superblock
-	add	x0, x26, :lo12:.LANCHOR1
-	str	w19, [x0,3072]
-.L2880:
-	ldr	x0, [x29,176]
-	add	x26, x26, :lo12:.LANCHOR1
-	add	x19, x24, 3656
-	bl	allocate_new_data_superblock
-	ldr	w0, [x26,3072]
-	cbnz	w0, .L2881
-.L2882:
-	ldr	x19, [x29,176]
-	b	.L2881
-.L2879:
-	add	x26, x26, :lo12:.LANCHOR1
-	str	w0, [x26,3072]
-	ldr	x0, [x29,176]
-	ldrh	w0, [x0,4]
-	cbnz	w0, .L2882
-	mov	x0, x19
-	bl	allocate_new_data_superblock
-.L2881:
-	ldrh	w0, [x19,4]
-	cbnz	w0, .L2883
-	mov	x0, x19
-	bl	allocate_new_data_superblock
-.L2883:
-	ldr	x0, [x29,144]
-	add	x0, x0, :lo12:.LANCHOR4
-	str	x19, [x0,368]
-.L2878:
-	ldr	w0, [x24,964]
-	mov	x28, 0
-	ldr	w2, [x24,968]
-	ldrh	w1, [x19,4]
-	sub	w0, w0, w2
-	cmp	w1, w0
-	csel	w0, w1, w0, ls
-	cmp	w0, w25
-	csel	w0, w0, w25, ls
-	str	w0, [x29,140]
-	ldr	w0, [x29,204]
-	and	w0, w0, 1
-	str	w0, [x29,116]
-	add	w0, w21, w20
-	str	w0, [x29,136]
-.L2884:
-	ldr	w1, [x29,192]
-	mov	w0, w28
-	add	w27, w1, w28
-	ldr	w1, [x29,140]
-	cmp	w28, w1
-	bcs	.L2939
-	ldrh	w1, [x19,4]
-	cbz	w1, .L2915
-	ldr	w1, [x29,200]
-	cmp	w27, w1
-	cset	w7, eq
-	cbz	w0, .L2886
-	ldr	w1, [x29,116]
-	tst	w7, w1
-	beq	.L2886
-	ldrh	w1, [x24,824]
-	ldr	w2, [x29,136]
-	msub	w2, w27, w1, w2
-	cmp	w2, w1
-	bne	.L2915
-.L2886:
-	add	x1, x29, 212
-	mov	w2, 0
-	mov	w0, w27
-	str	x7, [x29,160]
-	bl	log2phys
-	mov	x0, x19
-	bl	get_new_active_ppa
-	ldr	w6, [x24,968]
-	mov	w5, 56
-	ldr	x2, [x24,1032]
-	str	x5, [x29,184]
-	umull	x1, w6, w5
-	add	x2, x2, x1
-	str	w0, [x2,4]
-	ldrh	w2, [x24,830]
-	ldr	x0, [x24,1032]
-	add	x1, x0, x1
-	mul	w0, w2, w6
-	and	x0, x0, 4294967292
-	str	x0, [x29,128]
-	ldr	x0, [x24,1136]
-	ldr	x3, [x29,128]
-	str	x0, [x29,120]
-	add	x26, x0, x3
-	ldrh	w0, [x24,828]
-	str	x26, [x1,16]
-	str	w27, [x1,24]
-	mul	w0, w0, w6
-	ldr	x6, [x24,1080]
-	and	x0, x0, 4294967292
-	add	x0, x6, x0
-	str	x0, [x1,8]
-	mov	x0, x26
+	add	x20, x21, :lo12:.LANCHOR4
+	add	x22, x22, :lo12:.LANCHOR0
+	mov	w23, -1
+	ldrh	w0, [x20,3404]
+	ldr	w1, [x19,1396]
+	sub	w0, w1, w0
+	ldrh	w1, [x19,818]
+	mul	w0, w0, w2
+	str	w0, [x20,3400]
+	mul	w0, w0, w1
+	ldrh	w1, [x19,824]
+	str	w0, [x19,1396]
+	mul	w0, w0, w1
+	str	w0, [x22,4048]
+	bl	FtlBbmTblFlush
+	ldrh	w2, [x19,758]
 	mov	w1, 0
+	ldr	x0, [x19,1184]
+	lsl	w2, w2, 1
 	bl	ftl_memset
-	cmp	w27, w23
-	cset	w0, eq
-	str	w0, [x29,196]
+	strh	w23, [x20,3408]
+	strh	wzr, [x20,3410]
+	mov	w0, 1
+	strb	wzr, [x20,3414]
+	mov	w1, 255
+	strb	wzr, [x20,3416]
+	add	x20, x19, 3608
+	ldrh	w2, [x19,756]
+	strb	w0, [x20,8]
+	ldr	x0, [x22,16]
+	lsr	w2, w2, 3
+	str	wzr, [x19,3892]
+	strh	wzr, [x20,2]
+	strb	wzr, [x20,6]
+	strh	wzr, [x19,3608]
+	bl	ftl_memset
+.L2917:
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20,7]
 	cbnz	w0, .L2918
-	ldr	x7, [x29,160]
-	ldr	x5, [x29,184]
-	cbz	w7, .L2887
-	ldr	w0, [x29,136]
-	ldrh	w2, [x24,824]
-	msub	w2, w27, w2, w0
-	uxth	w0, w2
-	str	w0, [x29,184]
-	ldr	w0, [x29,196]
-	str	w0, [x29,160]
-	b	.L2890
+	ldrh	w1, [x20]
+	ldr	x0, [x19,1184]
+	strh	w23, [x0,x1,lsl 1]
+	ldrh	w0, [x20]
+	add	w0, w0, 1
+	strh	w0, [x20]
+	b	.L2917
 .L2918:
-	ldrh	w2, [x24,824]
-	udiv	w0, w20, w2
-	msub	w0, w0, w2, w20
-	str	w0, [x29,160]
-	sub	w2, w2, w0
-	cmp	w2, w21
-	csel	w0, w2, w21, ls
-	str	w0, [x29,184]
-.L2890:
-	ldrh	w0, [x24,824]
-	ldr	w1, [x29,184]
-	cmp	w1, w0
-	bne	.L2891
-	ldr	w0, [x29,196]
-	mov	x1, x22
-	cbnz	w0, .L2892
-	ldr	w0, [x29,184]
-	mul	w1, w0, w27
-	sub	w1, w1, w20
-	ubfiz	x1, x1, 9, 23
-	add	x1, x22, x1
-.L2892:
-	ldr	w2, [x29,204]
-	mov	w0, 56
-	cbz	w2, .L2893
-	ldr	w2, [x24,968]
-	umull	x0, w2, w0
-	ldr	x2, [x24,1032]
-	add	x0, x2, x0
-	b	.L2935
-.L2893:
-	ldr	w2, [x24,968]
-	umull	x0, w2, w0
-	ldr	x2, [x24,1032]
-	add	x0, x2, x0
-	ldr	x0, [x0,8]
-	b	.L2936
-.L2891:
-	ldr	w0, [x29,212]
-	cmn	w0, #1
-	beq	.L2895
-	str	w0, [x29,220]
-	mov	w1, 56
-	ldr	w0, [x24,968]
-	mov	w2, 0
-	str	w27, [x29,240]
-	umull	x0, w0, w1
-	ldr	x1, [x24,1032]
-	add	x0, x1, x0
-	ldr	x1, [x0,8]
-	ldr	x0, [x0,16]
-	str	x1, [x29,224]
+	ldr	w0, [x19,872]
+	mov	w22, -1
+	str	w0, [x20,12]
+	add	w0, w0, 1
+	ldrh	w1, [x20]
+	str	w0, [x19,872]
+	ldr	x0, [x19,1184]
+	ldrh	w2, [x20,4]
+	strh	w2, [x0,x1,lsl 1]
+	add	x0, x19, 3656
+	strh	wzr, [x19,3658]
+	ldrh	w1, [x20]
+	mov	x20, x0
+	strb	wzr, [x19,3662]
+	add	w1, w1, 1
+	strh	w1, [x19,3656]
 	mov	w1, 1
-	str	x0, [x29,232]
-	add	x0, x29, 216
-	bl	FlashReadPages
-	ldr	w0, [x29,216]
-	cmn	w0, #1
-	bne	.L2896
-	ldr	w0, [x24,4040]
+	strb	w1, [x19,3664]
+.L2919:
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20,7]
+	cbnz	w0, .L2920
+	ldrh	w1, [x20]
+	ldr	x0, [x19,1184]
+	strh	w22, [x0,x1,lsl 1]
+	ldrh	w0, [x20]
 	add	w0, w0, 1
-	str	w0, [x24,4040]
-	b	.L2898
-.L2896:
-	ldr	w0, [x26,8]
-	cmp	w0, w27
-	beq	.L2898
-	ldr	w0, [x24,4040]
-	mov	w2, w27
+	strh	w0, [x20]
+	b	.L2919
+.L2920:
+	ldr	w0, [x19,872]
+	add	x21, x21, :lo12:.LANCHOR4
+	str	w0, [x20,12]
 	add	w0, w0, 1
-	str	w0, [x24,4040]
-	ldr	x0, [x29,104]
-	ldr	w1, [x26,8]
-	bl	printk
-	b	.L2898
-.L2895:
-	ldr	w0, [x24,968]
-	mov	w1, 56
-	ldrh	w2, [x24,828]
-	umull	x0, w0, w1
-	ldr	x1, [x24,1032]
-	add	x0, x1, x0
-	mov	w1, 0
-	ldr	x0, [x0,8]
-	bl	ftl_memset
-.L2898:
-	ldr	w1, [x29,184]
-	mov	w0, 56
-	lsl	w2, w1, 9
-	ldr	w1, [x29,196]
-	cbz	w1, .L2899
-	ldr	w1, [x24,968]
-	umull	x0, w1, w0
-	ldr	x1, [x24,1032]
-	add	x1, x1, x0
-	ldr	x0, [x29,160]
-	ubfiz	x0, x0, 9, 23
-	ldr	x1, [x1,8]
-	add	x0, x1, x0
-	mov	x1, x22
-	b	.L2937
+	ldrh	w1, [x20]
+	str	w0, [x19,872]
+	ldr	x0, [x19,1184]
+	ldrh	w2, [x20,4]
+	mov	w20, -1
+	strh	w2, [x0,x1,lsl 1]
+	strh	w20, [x19,3704]
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x19,3896]
+	ldr	w0, [x21,3400]
+	strh	w0, [x19,3902]
+	ldr	w0, [x19,872]
+	str	w0, [x19,3904]
+	add	w0, w0, 1
+	strh	wzr, [x19,3898]
+	strh	w20, [x19,3900]
+	str	w0, [x19,872]
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cbnz	w0, .L2899
+	adrp	x0, .LANCHOR1+3064
+	mov	w1, 1
+	str	w1, [x0,#:lo12:.LANCHOR1+3064]
 .L2899:
-	ldr	w1, [x24,968]
-	umull	x0, w1, w0
-	ldr	x1, [x24,1032]
-	add	x0, x1, x0
-	ldrh	w1, [x24,824]
-	mul	w1, w27, w1
-	ldr	x0, [x0,8]
-	sub	w1, w1, w20
-	ubfiz	x1, x1, 9, 23
-	add	x1, x22, x1
-	b	.L2937
-.L2887:
-	ldr	w0, [x29,204]
-	ldrh	w1, [x24,824]
-	ldr	w2, [x24,968]
-	cbz	w0, .L2900
-	mul	w1, w27, w1
-	umull	x0, w2, w5
-	sub	w1, w1, w20
-	ldr	x2, [x24,1032]
-	ubfiz	x1, x1, 9, 23
-	add	x0, x2, x0
-	add	x1, x22, x1
+	mov	w0, 0
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlLowFormat, .-FtlLowFormat
+	.align	2
+	.global	FtlReInitForSDUpdata
+	.type	FtlReInitForSDUpdata, %function
+FtlReInitForSDUpdata:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2932
+.L2934:
+	mov	w0, 0
+	b	.L2933
+.L2932:
+	adrp	x0, RK29_NANDC_REG_BASE
+	ldr	x0, [x0,#:lo12:RK29_NANDC_REG_BASE]
+	bl	FlashInit
+	cbnz	w0, .L2934
+	bl	FlashLoadFactorBbt
+	cbz	w0, .L2935
+	bl	FlashMakeFactorBbt
 .L2935:
-	str	x1, [x0,8]
-	b	.L2894
-.L2900:
-	umull	x0, w2, w5
-	ldr	x2, [x24,1032]
-	mul	w1, w27, w1
-	add	x0, x2, x0
-	sub	w1, w1, w20
-	ubfiz	x1, x1, 9, 23
-	ldr	x0, [x0,8]
-	add	x1, x22, x1
-.L2936:
-	ldrh	w2, [x24,828]
-.L2937:
-	bl	ftl_memcpy
-.L2894:
-	ldr	x1, [x29,120]
-	mov	w0, -3947
-	ldr	x2, [x29,128]
-	add	x28, x28, 1
-	strh	w0, [x1,x2]
-	str	w27, [x26,8]
-	ldr	w0, [x24,876]
-	str	w0, [x26,4]
-	add	w0, w0, 1
-	cmn	w0, #1
-	csel	w0, w0, wzr, ne
-	str	w0, [x24,876]
-	ldr	w0, [x29,212]
-	str	w0, [x26,12]
-	ldrh	w0, [x19]
-	strh	w0, [x26,2]
-	ldr	w0, [x24,968]
-	add	w0, w0, 1
-	str	w0, [x24,968]
-	b	.L2884
-.L2939:
-	str	w27, [x29,192]
-	mov	x0, x1
-	b	.L2885
-.L2915:
-	str	w27, [x29,192]
-.L2885:
-	sub	w25, w25, w0
-	ldr	w0, [x29,204]
-	cbnz	w0, .L2904
-	ldr	w1, [x24,968]
-	ldr	w0, [x24,964]
-	cmp	w1, w0
-	bcs	.L2904
-	ldrh	w0, [x19,4]
-	cbz	w0, .L2904
-.L2906:
-	str	wzr, [x29,204]
-	b	.L2877
-.L2904:
-	bl	FtlCacheWriteBack
-	str	wzr, [x24,968]
-	cmp	w25, 3
-	bls	.L2906
-	b	.L2877
+	adrp	x20, .LANCHOR2
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x0, [x0,688]
+	bl	FlashReadIdbDataRaw
+	cbz	w0, .L2936
+	mov	w1, 0
+	mov	w2, 16
+	add	x0, x29, 32
+	bl	FlashReadFacBbtData
+	mov	w0, 0
+	ldr	w2, [x29,32]
+	mov	w1, w0
+	mov	w4, 1
 .L2938:
-	ldr	w1, [x29,200]
-	mov	w0, w25
-	sub	w1, w1, w23
-	bl	ftl_do_gc
-	ldr	x0, [x29,152]
-	add	x0, x0, :lo12:.LANCHOR2
-	ldrh	w1, [x0,3600]
-	cmp	w1, 31
-	bhi	.L2908
-	mov	w1, 128
-	mov	w19, 16
-	strh	w1, [x0,954]
-	strh	w1, [x0,952]
-.L2909:
+	lsl	w3, w4, w1
+	add	w1, w1, 1
+	tst	w3, w2
+	cset	w3, ne
+	cmp	w1, 16
+	add	w0, w0, w3
+	bne	.L2938
+	cmp	w0, 6
+	bhi	.L2939
+	add	x0, x19, :lo12:.LANCHOR0
+	b	.L2961
+.L2939:
+	mov	w1, 0
+	mov	w4, 1
+.L2942:
+	lsl	w3, w4, w1
+	add	w1, w1, 1
+	tst	w3, w2
+	cset	w3, ne
+	cmp	w1, 24
+	add	w0, w0, w3
+	bne	.L2942
+	cmp	w0, 17
+	add	x0, x19, :lo12:.LANCHOR0
+	bls	.L2961
+	mov	w1, 36
+.L2961:
+	strb	w1, [x0,25]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,25]
+	strh	w1, [x0,4042]
+.L2936:
+	adrp	x0, .LC47
+	adrp	x1, .LC140
+	add	x1, x1, :lo12:.LC140
+	add	x0, x0, :lo12:.LC47
+	add	x20, x20, :lo12:.LANCHOR2
+	bl	printk
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w19, 1
+	add	x0, x0, 4016
+	bl	FtlConstantsInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x20,752]
+	bl	FtlFreeSysBlkQueueInit
+.L2944:
+	bl	FtlLoadBbt
+	cbz	w0, .L2945
+.L2963:
+	bl	FtlLowFormat
+	cmp	w19, 3
+	bhi	.L2964
+	add	w19, w19, 1
+	b	.L2944
+.L2964:
+	mov	w0, -1
+	b	.L2933
+.L2945:
+	bl	FtlSysBlkInit
+	cbnz	w0, .L2963
+	adrp	x1, .LANCHOR1+3064
+	mov	w2, 1
+	str	w2, [x1,#:lo12:.LANCHOR1+3064]
+.L2933:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
+	.align	2
+	.global	Ftl_gc_temp_data_write_back
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x23, [sp,48]
+	add	x0, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	ldr	w1, [x0,1400]
+	cbz	w1, .L2966
+.L2969:
 	mov	w0, 0
-	mov	w1, 1
-	bl	ftl_do_gc
-	ldr	x0, [x29,152]
-	add	x0, x0, :lo12:.LANCHOR2
-	ldr	w0, [x0,1400]
-	cbnz	w0, .L2908
-	subs	w19, w19, #1
-	bne	.L2909
-	b	.L2908
-.L2869:
+	b	.L2967
+.L2966:
+	adrp	x1, .LANCHOR0+136
+	adrp	x22, .LANCHOR4
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+136]
+	cbz	w1, .L2968
+	add	x1, x22, :lo12:.LANCHOR4
+	ldr	w1, [x1,3984]
+	tbz	x1, 0, .L2968
+	ldrh	w0, [x0,3708]
+	cbnz	w0, .L2969
+.L2968:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x22, :lo12:.LANCHOR4
+	mov	w2, 0
+	mov	w21, 0
+	mov	w3, w2
+	mov	w23, 56
+	ldr	x0, [x0,1000]
+	ldr	w1, [x1,3984]
+	bl	FlashProgPages
+.L2970:
+	add	x20, x22, :lo12:.LANCHOR4
+	ldr	w1, [x20,3984]
+	cmp	w21, w1
+	bcs	.L2980
+	add	x1, x19, :lo12:.LANCHOR2
+	umull	x0, w21, w23
+	ldr	x2, [x1,1000]
+	add	x3, x2, x0
+	ldr	w2, [x2,x0]
+	cmn	w2, #1
+	bne	.L2971
+	ldrh	w4, [x1,3704]
+	ldr	x3, [x1,1184]
+	strh	wzr, [x3,x4,lsl 1]
+	strh	w2, [x1,3704]
+	ldr	x1, [x1,1000]
+	ldr	w2, [x20,3552]
+	add	x0, x1, x0
+	add	w2, w2, 1
+	str	w2, [x20,3552]
+	ldr	w0, [x0,4]
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	bl	FtlGcPageVarInit
+	b	.L2979
+.L2971:
+	ldr	x2, [x3,16]
+	add	w21, w21, 1
+	ldr	w1, [x3,4]
+	uxth	w21, w21
+	ldr	w0, [x2,12]
+	ldr	w2, [x2,8]
+	bl	FtlGcUpdatePage
+	b	.L2970
+.L2980:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldr	x0, [x19,1000]
+	bl	FtlGcBufFree
+	str	wzr, [x20,3984]
+	ldrh	w0, [x19,3708]
+	cbnz	w0, .L2969
+	mov	w0, 1
+	bl	FtlGcFreeTempBlock
+.L2979:
+	mov	w0, 1
+.L2967:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 272
-	ret
-	.size	ftl_write, .-ftl_write
-	.align	2
-	.global	ftl_vendor_write
-	.type	ftl_vendor_write, %function
-ftl_vendor_write:
-	stp	x29, x30, [sp, -16]!
-	mov	w5, w0
-	mov	w4, w1
-	add	x29, sp, 0
-	mov	x3, x2
-	mov	w1, w5
-	mov	w2, w4
-	mov	w0, 16
-	bl	ftl_write
-	ldp	x29, x30, [sp], 16
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 64
 	ret
-	.size	ftl_vendor_write, .-ftl_vendor_write
+	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
 	.align	2
-	.global	ftl_sys_write
-	.type	ftl_sys_write, %function
-ftl_sys_write:
-	stp	x29, x30, [sp, -16]!
-	mov	w4, w1
-	mov	x3, x2
+	.global	Ftl_get_new_temp_ppa
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
-	add	w1, w0, 256
-	mov	w2, w4
-	mov	w0, 16
-	bl	ftl_write
-	ldp	x29, x30, [sp], 16
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x0, 3704
+	ldrh	w2, [x0,3704]
+	mov	w0, 65535
+	cmp	w2, w0
+	beq	.L2982
+	ldrh	w0, [x1,4]
+	cbnz	w0, .L2983
+.L2982:
+	bl	FtlCacheWriteBack
+	mov	w0, 0
+	bl	FtlGcFreeTempBlock
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x0, x0, 3704
+	strb	wzr, [x0,8]
+	bl	allocate_data_superblock
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	strh	wzr, [x0,4016]
+	strh	wzr, [x0,4018]
+	bl	l2p_flush
+	mov	w0, 0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2983:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x0, x0, 3704
+	bl	get_new_active_ppa
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
 	ret
-	.size	ftl_sys_write, .-ftl_sys_write
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
 	.align	2
-	.global	ftl_fix_nand_power_lost_error
-	.type	ftl_fix_nand_power_lost_error, %function
-ftl_fix_nand_power_lost_error:
-	adrp	x0, .LANCHOR0+136
-	stp	x29, x30, [sp, -128]!
+	.global	ftl_read
+	.type	ftl_read, %function
+ftl_read:
+	stp	x29, x30, [sp, -192]!
+	cmp	w0, 16
 	add	x29, sp, 0
-	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
 	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	cbz	w0, .L2942
-	adrp	x21, .LANCHOR4
+	mov	w20, w1
+	mov	w28, w2
+	mov	x25, x3
+	bne	.L2985
+	add	w0, w1, 256
+	mov	w1, w2
+	mov	x2, x3
+	bl	FtlVendorPartRead
+	b	.L2986
+.L2985:
+	add	w0, w1, w2
+	str	w0, [x29,172]
+	adrp	x0, .LANCHOR0+4048
+	ldr	w2, [x29,172]
+	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
+	mov	w0, -1
+	cmp	w2, w1
+	bhi	.L2986
 	adrp	x19, .LANCHOR2
-	add	x0, x21, :lo12:.LANCHOR4
-	add	x20, x19, :lo12:.LANCHOR2
-	adrp	x24, .LC136
-	add	x26, x20, 3608
-	add	x25, x20, 3656
-	ldrh	w23, [x0,218]
-	add	x0, x24, :lo12:.LC136
-	ldr	x2, [x20,1184]
-	ubfiz	x22, x23, 1, 16
-	mov	w1, w23
-	ldrh	w2, [x2,x22]
-	bl	printk
-	ldrh	w0, [x20,3608]
-	bl	FtlGcRefreshOpenBlock
-	ldrh	w0, [x20,3656]
-	mov	w20, 4097
-	bl	FtlGcRefreshOpenBlock
-	mov	x0, x26
-	bl	allocate_new_data_superblock
+	adrp	x21, .LANCHOR4
+	add	x0, x19, :lo12:.LANCHOR2
+	sub	w24, w2, #1
+	add	x2, x21, :lo12:.LANCHOR4
+	ldrh	w1, [x0,824]
+	udiv	w27, w20, w1
+	udiv	w24, w24, w1
+	ldr	w1, [x2,3972]
+	add	w1, w28, w1
+	sub	w23, w24, w27
+	str	w1, [x2,3972]
+	add	w23, w23, 1
+	ldr	w1, [x0,900]
+	add	w1, w23, w1
+	str	w1, [x0,900]
+	mov	w1, w24
+	mov	w0, w27
+	bl	FtlCacheMetchLpa
+	mov	x1, x21
+	cbz	w0, .L2987
+	str	x21, [x29,160]
+	bl	FtlCacheWriteBack
+	ldr	x1, [x29,160]
+.L2987:
+	mov	w26, 0
+	add	x0, x1, :lo12:.LANCHOR4
+	mov	w21, w27
+	str	w26, [x29,168]
+	mov	w22, w26
+	str	w26, [x29,156]
+	str	x0, [x29,112]
+.L2988:
+	cbz	w23, .L3029
+	mov	w0, w21
+	add	x1, x29, 188
+	mov	w2, 0
+	bl	log2phys
+	ldr	w3, [x29,188]
+	cmn	w3, #1
+	bne	.L3027
+	mov	w3, 0
+.L2989:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,824]
+	cmp	w3, w0
+	bcs	.L2993
+	madd	w0, w21, w0, w3
+	cmp	w0, w20
+	bcc	.L2991
+	ldr	w1, [x29,172]
+	cmp	w0, w1
+	bcs	.L2991
+	sub	w0, w0, w20
+	mov	w1, 0
+	ubfiz	x0, x0, 9, 23
+	mov	w2, 512
+	add	x0, x25, x0
+	str	x3, [x29,160]
+	bl	ftl_memset
+	ldr	x3, [x29,160]
+.L2991:
+	add	w3, w3, 1
+	b	.L2989
+.L3027:
+	add	x2, x19, :lo12:.LANCHOR2
+	mov	w0, 56
+	cmp	w21, w27
+	umull	x1, w22, w0
+	ldr	x0, [x2,992]
+	add	x0, x0, x1
+	str	w3, [x0,4]
+	ldrh	w0, [x2,824]
+	bne	.L2994
+	ldr	x3, [x2,992]
+	ldr	x2, [x2,1088]
+	add	x3, x3, x1
+	str	x2, [x3,8]
+	udiv	w2, w20, w0
+	msub	w2, w2, w0, w20
+	str	w2, [x29,128]
+	sub	w2, w0, w2
+	cmp	w2, w28
+	csel	w2, w2, w28, ls
+	str	w2, [x29,168]
+	cmp	w2, w0
+	bne	.L2995
+	str	x25, [x3,8]
+	b	.L2995
+.L2994:
+	cmp	w21, w24
+	bne	.L2996
+	ldr	x3, [x2,992]
+	ldr	x2, [x2,1096]
+	add	x3, x3, x1
+	ldr	w4, [x29,172]
+	str	x2, [x3,8]
+	mul	w2, w21, w0
+	sub	w26, w4, w2
+	cmp	w26, w0
+	bne	.L2995
+	sub	w2, w2, w20
+	ubfiz	x2, x2, 9, 23
+	add	x2, x25, x2
+	str	x2, [x3,8]
+	b	.L2995
+.L2996:
+	ldr	x2, [x2,992]
+	mul	w0, w21, w0
+	add	x2, x2, x1
+	sub	w0, w0, w20
+	ubfiz	x0, x0, 9, 23
+	add	x0, x25, x0
+	str	x0, [x2,8]
+.L2995:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldr	x0, [x2,992]
+	add	x1, x0, x1
+	ldrh	w0, [x2,830]
+	ldr	x2, [x2,1120]
+	mul	w0, w22, w0
+	str	w21, [x1,24]
+	add	w22, w22, 1
+	and	x0, x0, 4294967292
+	add	x0, x2, x0
+	str	x0, [x1,16]
+.L2993:
+	subs	w23, w23, #1
+	add	w21, w21, 1
+	beq	.L2997
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,748]
+	cmp	w22, w0, lsl 3
+	bne	.L2988
+.L2997:
+	cbz	w22, .L2988
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, w22
+	mov	w2, 0
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+	str	xzr, [x29,160]
+	ldr	x0, [x29,128]
+	ubfiz	x0, x0, 9, 23
+	str	x0, [x29,144]
+	ldr	w0, [x29,168]
+	lsl	w0, w0, 9
+	str	w0, [x29,152]
+	lsl	w0, w26, 9
+	str	w0, [x29,124]
+.L2999:
+	ldr	w0, [x29,160]
+	cmp	w22, w0
+	bls	.L3030
+	ldr	x0, [x29,160]
+	add	x2, x19, :lo12:.LANCHOR2
+	mov	x1, 56
+	mul	x3, x0, x1
+	ldr	x0, [x2,992]
+	add	x0, x0, x3
+	ldr	w1, [x0,24]
+	cmp	w1, w27
+	bne	.L3000
+	ldr	x1, [x0,8]
+	ldr	x0, [x2,1088]
+	cmp	x1, x0
+	bne	.L3001
+	ldr	x2, [x29,144]
 	mov	x0, x25
-	bl	allocate_new_data_superblock
-.L2944:
-	subs	w20, w20, #1
-	beq	.L2948
-	mov	w0, 1
-	mov	w1, w0
-	bl	ftl_do_gc
+	str	x3, [x29,104]
+	add	x1, x1, x2
+	ldr	w2, [x29,152]
+	b	.L3028
+.L3000:
+	cmp	w1, w24
+	bne	.L3001
+	ldr	x1, [x0,8]
+	ldr	x0, [x2,1096]
+	cmp	x1, x0
+	bne	.L3001
+	ldrh	w0, [x2,824]
+	ldr	w2, [x29,124]
+	str	x3, [x29,104]
+	mul	w0, w24, w0
+	sub	w0, w0, w20
+	ubfiz	x0, x0, 9, 23
+	add	x0, x25, x0
+.L3028:
+	bl	ftl_memcpy
+	ldr	x3, [x29,104]
+.L3001:
 	add	x0, x19, :lo12:.LANCHOR2
-	ldr	x0, [x0,1184]
-	ldrh	w0, [x0,x22]
-	cbnz	w0, .L2944
-.L2948:
-	add	x20, x19, :lo12:.LANCHOR2
-	add	x0, x24, :lo12:.LC136
-	mov	w1, w23
-	ldr	x2, [x20,1184]
-	ldrh	w2, [x2,x22]
-	bl	printk
-	ldr	x0, [x20,1184]
-	ldrh	w0, [x0,x22]
-	cbnz	w0, .L2946
-	add	x0, x29, 80
-	strh	w23, [x29,80]
-	bl	make_superblock
-	mov	x0, 0
-	ldrh	w5, [x20,748]
-	mov	w6, 65535
-	mov	w20, w0
-	mov	w7, 56
-.L2949:
-	cmp	w5, w0, uxth
-	bls	.L2956
-	add	x1, x29, 80
-	add	x1, x1, x0, lsl 1
-	ldrh	w2, [x1,16]
-	cmp	w2, w6
-	beq	.L2950
-	add	x4, x19, :lo12:.LANCHOR2
-	lsl	w2, w2, 10
-	umull	x1, w20, w7
-	add	w20, w20, 1
-	ldr	x3, [x4,1016]
-	uxth	w20, w20
-	add	x3, x3, x1
-	str	w2, [x3,4]
-	ldr	x2, [x4,1016]
-	add	x1, x2, x1
-	str	xzr, [x1,8]
-	str	xzr, [x1,16]
-.L2950:
+	ldr	x0, [x0,992]
+	add	x5, x0, x3
+	ldr	w2, [x0,x3]
+	cmn	w2, #1
+	bne	.L3002
+	ldr	x1, [x29,112]
+	str	w2, [x29,156]
+	add	x4, x1, 3456
+	ldr	w1, [x1,3528]
+	add	w1, w1, 1
+	str	w1, [x4,72]
+.L3002:
+	ldr	w0, [x0,x3]
+	cmp	w0, 256
+	bne	.L3003
+	ldr	w0, [x5,4]
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L3003:
+	ldr	x0, [x29,160]
 	add	x0, x0, 1
-	b	.L2949
-.L2956:
+	str	x0, [x29,160]
+	b	.L2999
+.L3030:
+	mov	w22, 0
+	b	.L2988
+.L3029:
 	add	x19, x19, :lo12:.LANCHOR2
-	adrp	x0, .LC137
-	mov	w1, w23
-	add	x0, x0, :lo12:.LC137
-	ldr	x2, [x19,1184]
-	ldrh	w2, [x2,x22]
-	bl	printk
-	ldr	x0, [x19,1016]
-	mov	w1, 0
-	mov	w2, w20
-	bl	FlashEraseBlocks
-	ldr	x0, [x19,1016]
+	ldrh	w0, [x19,958]
+	cbz	w0, .L3006
+	mov	w0, w23
 	mov	w1, 1
-	mov	w2, w20
-	bl	FlashEraseBlocks
-.L2946:
-	add	x21, x21, :lo12:.LANCHOR4
-	mov	w0, -1
-	strh	w0, [x21,218]
-.L2942:
+	bl	ftl_do_gc
+.L3006:
+	ldr	w0, [x29,156]
+.L2986:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 128
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 192
 	ret
-	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.size	ftl_read, .-ftl_read
 	.align	2
-	.global	FtlSysBlkInit
-	.type	FtlSysBlkInit, %function
-FtlSysBlkInit:
-	stp	x29, x30, [sp, -64]!
-	mov	w1, -1
+	.global	FtlInit
+	.type	FtlInit, %function
+FtlInit:
+	stp	x29, x30, [sp, -48]!
+	mov	w0, -1
+	adrp	x1, .LC140
 	add	x29, sp, 0
+	str	x21, [sp,32]
+	adrp	x21, .LANCHOR1
+	add	x21, x21, :lo12:.LANCHOR1
+	add	x1, x1, :lo12:.LC140
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR4
-	adrp	x20, .LANCHOR2
-	stp	x21, x22, [sp,32]
-	add	x0, x19, :lo12:.LANCHOR4
-	add	x21, x20, :lo12:.LANCHOR2
-	str	x23, [sp,48]
-	strh	w1, [x0,218]
-	strh	wzr, [x0,220]
-	ldrh	w0, [x21,752]
+	adrp	x19, .LANCHOR2
+	adrp	x20, .LANCHOR0
+	str	w0, [x21,3064]
+	adrp	x0, .LANCHOR5-132
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR0
+	str	wzr, [x0,#:lo12:.LANCHOR5-132]
+	adrp	x0, .LC47
+	add	x0, x0, :lo12:.LC47
+	str	wzr, [x19,1400]
+	bl	printk
+	add	x0, x20, 4016
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x19,752]
 	bl	FtlFreeSysBlkQueueInit
-	bl	FtlScanSysBlk
-	ldrh	w1, [x21,3896]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L2958
-.L2960:
-	mov	w23, -1
-	b	.L2959
-.L2958:
-	bl	FtlLoadSysInfo
-	mov	w23, w0
-	cbnz	w0, .L2960
-	bl	FtlLoadMapInfo
-	bl	FtlLoadVonderInfo
-	bl	Ftl_load_ext_data
-	bl	FtlLoadEctTbl
-	bl	FtlFreeSysBLkSort
-	bl	SupperBlkListInit
-	bl	FtlPowerLostRecovery
-	mov	w0, 1
-	bl	FtlUpdateVaildLpn
-	ldrh	w2, [x21,858]
-	mov	x1, 0
-	ldr	x0, [x21,1264]
-.L2961:
-	cmp	w1, w2
-	mov	w3, w1
-	bge	.L2965
-	add	x4, x0, x1, lsl 4
-	add	x1, x1, 1
-	ldr	w4, [x4,4]
-	tbz	w4, #31, .L2961
-.L2965:
-	add	x0, x20, :lo12:.LANCHOR2
-	cmp	w3, w2
-	ldrh	w1, [x0,3548]
-	add	w1, w1, 1
-	strh	w1, [x0,3548]
-	blt	.L2962
-	add	x19, x19, :lo12:.LANCHOR4
-	ldrh	w0, [x19,220]
-	cbz	w0, .L2966
-.L2962:
-	add	x19, x20, :lo12:.LANCHOR2
-	add	x22, x19, 3608
-	add	x21, x19, 3656
-	mov	x0, x22
-	bl	FtlSuperblockPowerLostFix
-	mov	x0, x21
-	bl	FtlSuperblockPowerLostFix
-	ldrh	w0, [x19,3608]
-	ldr	x2, [x19,1184]
-	lsl	x0, x0, 1
-	ldrh	w3, [x19,3612]
-	ldrh	w1, [x2,x0]
-	sub	w1, w1, w3
-	strh	w1, [x2,x0]
-	strb	wzr, [x19,3614]
-	ldrh	w0, [x19,818]
-	strh	w0, [x19,3610]
-	ldrh	w0, [x19,3656]
-	ldr	x2, [x19,1184]
-	lsl	x0, x0, 1
-	strh	wzr, [x19,3612]
-	ldrh	w3, [x19,3660]
-	ldrh	w1, [x2,x0]
-	sub	w1, w1, w3
-	strh	w1, [x2,x0]
-	strb	wzr, [x19,3662]
-	ldrh	w0, [x19,818]
-	strh	w0, [x19,3658]
-	add	x0, x19, 3752
-	strh	wzr, [x19,3660]
-	bl	FtlMapBlkWriteDumpData
-	add	x0, x19, 3824
-	bl	FtlMapBlkWriteDumpData
-	ldrh	w0, [x19,3550]
-	add	w0, w0, 1
-	strh	w0, [x19,3550]
-	bl	l2p_flush
-	bl	FtlVpcTblFlush
-	b	.L2980
-.L2966:
-	bl	l2p_flush
-.L2980:
-	add	x19, x20, :lo12:.LANCHOR2
-	bl	FtlVpcTblFlush
-	mov	w0, 65535
-	add	x22, x19, 3608
-	ldrh	w1, [x19,3608]
-	cmp	w1, w0
-	bne	.L2968
-.L2970:
-	add	x20, x20, :lo12:.LANCHOR2
-	ldrh	w0, [x20,3548]
-	and	w0, w0, 31
-	cbnz	w0, .L2959
-	bl	FtlVpcCheckAndModify
-	b	.L2959
-.L2968:
-	ldrh	w0, [x22,4]
-	cbnz	w0, .L2970
-	ldrh	w0, [x19,3660]
-	add	x21, x19, 3656
-	cbnz	w0, .L2970
-	bl	FtlVpcTblFlush
-	ldrh	w0, [x19,3608]
-	bl	FtlGcRefreshOpenBlock
-	ldrh	w0, [x19,3656]
-	bl	FtlGcRefreshOpenBlock
-	mov	x0, x22
-	bl	allocate_new_data_superblock
-	mov	x0, x21
-	bl	allocate_new_data_superblock
-	add	x0, x19, 3824
-	bl	FtlMapBlkWriteDumpData
-	adrp	x0, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR0
-	ldrb	w1, [x0,136]
-	cbnz	w1, .L2972
-	ldrb	w0, [x0,24]
-	cbz	w0, .L2970
-.L2972:
-	mov	w19, 4096
-.L2975:
+	bl	FtlLoadBbt
+	cbz	w0, .L3032
+	adrp	x0, .LC155
+	add	x0, x0, :lo12:.LC155
+	b	.L3044
+.L3032:
+	bl	FtlSysBlkInit
+	cbz	w0, .L3034
+	adrp	x0, .LC156
+	add	x0, x0, :lo12:.LC156
+.L3044:
+	adrp	x1, .LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x1, x1, 96
+	bl	printk
+	b	.L3033
+.L3034:
+	mov	w1, 1
+	str	w1, [x21,3064]
+	bl	ftl_do_gc
+	ldrh	w0, [x19,3600]
+	cmp	w0, 15
+	bhi	.L3035
+	mov	w19, 1024
+.L3036:
 	mov	w0, 1
 	mov	w1, w0
 	bl	ftl_do_gc
 	subs	w19, w19, #1
-	bne	.L2975
-	b	.L2970
-.L2959:
-	mov	w0, w23
-	ldr	x23, [sp,48]
+	bne	.L3036
+	b	.L3033
+.L3035:
+	ldrb	w0, [x20,136]
+	cbz	w0, .L3033
+	mov	w19, 128
+.L3038:
+	mov	w0, 1
+	mov	w1, w0
+	bl	ftl_do_gc
+	subs	w19, w19, #1
+	bne	.L3038
+.L3033:
+	mov	w0, 0
+	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 64
+	ldp	x29, x30, [sp], 48
 	ret
-	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.size	FtlInit, .-FtlInit
 	.align	2
-	.global	FtlLowFormat
-	.type	FtlLowFormat, %function
-FtlLowFormat:
-	stp	x29, x30, [sp, -48]!
+	.global	ftl_write
+	.type	ftl_write, %function
+ftl_write:
+	stp	x29, x30, [sp, -272]!
+	mov	w4, w0
+	mov	w0, 0
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR2
-	add	x20, x19, :lo12:.LANCHOR2
+	mov	w20, w1
+	adrp	x1, .LANCHOR2
 	stp	x21, x22, [sp,32]
-	ldr	w21, [x20,1400]
-	cbnz	w21, .L2983
-	ldrh	w2, [x20,856]
-	mov	w1, w21
-	ldr	x0, [x20,1248]
-	lsl	w2, w2, 2
-	bl	ftl_memset
-	ldrh	w2, [x20,856]
+	mov	w21, w2
+	add	x2, x1, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x22, x3
+	str	x1, [x29,152]
+	ldr	w3, [x2,1400]
+	cbnz	w3, .L3046
+	cmp	w4, 16
+	bne	.L3047
+	add	w0, w20, 256
 	mov	w1, w21
-	ldr	x0, [x20,1240]
-	lsl	w2, w2, 2
-	bl	ftl_memset
-	str	w21, [x20,872]
-	ldrh	w0, [x20,752]
-	str	w21, [x20,876]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cbz	w0, .L2984
-	bl	FtlMakeBbt
-.L2984:
-	mov	w0, 0
-.L2985:
-	add	x1, x19, :lo12:.LANCHOR2
-	ldrh	w2, [x1,824]
-	cmp	w0, w2, lsl 7
-	bge	.L3012
-	ubfiz	x3, x0, 2, 16
-	ldr	x4, [x1,1088]
-	mvn	w2, w0
-	orr	w2, w0, w2, lsl 16
-	str	w2, [x4,x3]
+	mov	x2, x22
+	bl	FtlVendorPartWrite
+	b	.L3046
+.L3047:
+	adrp	x0, .LANCHOR0+4048
+	add	w24, w20, w21
+	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
+	mov	w0, -1
+	cmp	w24, w1
+	bhi	.L3046
+	adrp	x5, .LANCHOR5
+	ldrh	w1, [x2,824]
+	add	x26, x5, :lo12:.LANCHOR5
+	sub	w24, w24, #1
+	mov	w0, 2048
+	adrp	x4, .LANCHOR4
+	udiv	w23, w20, w1
+	add	x3, x4, :lo12:.LANCHOR4
+	str	w0, [x26,-128]
+	cmp	w21, w1, lsl 1
+	str	x5, [x29,144]
+	str	x4, [x29,112]
+	udiv	w0, w24, w1
+	str	w0, [x29,200]
+	sub	w28, w0, w23
+	add	w25, w28, 1
+	ldr	w0, [x2,884]
+	add	w0, w25, w0
+	str	w0, [x2,884]
+	ldr	w0, [x3,3968]
+	add	w0, w21, w0
+	str	w0, [x3,3968]
+	ldr	w3, [x2,968]
+	cset	w0, cs
+	str	w0, [x29,204]
+	cbz	w3, .L3049
+	mov	w0, 56
+	sub	w3, w3, #1
+	umull	x3, w3, w0
+	ldr	x0, [x2,1032]
+	add	x3, x0, x3
+	ldr	w0, [x3,24]
+	cmp	w23, w0
+	bne	.L3050
+	ldr	w0, [x2,892]
 	add	w0, w0, 1
-	ldr	x2, [x1,1096]
-	mov	w1, 23752
-	movk	w1, 0xa0f, lsl 16
-	uxth	w0, w0
-	str	w1, [x2,x3]
-	b	.L2985
-.L3012:
-	ldrh	w21, [x1,756]
-	mov	w20, 0
-.L2987:
-	add	x22, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x22,758]
-	cmp	w0, w21
-	bls	.L3013
-	mov	w0, w21
-	mov	w1, 1
-	add	w21, w21, 1
-	bl	FtlLowFormatEraseBlock
-	add	w0, w20, w0
-	uxth	w21, w21
-	uxth	w20, w0
-	b	.L2987
-.L3013:
-	ldrh	w0, [x22,748]
-	sub	w1, w20, #3
-	cmp	w1, w0, lsl 1
-	bge	.L2989
-.L2993:
-	mov	w20, 0
-	mov	w21, w20
-	b	.L2990
-.L2989:
-	udiv	w20, w20, w0
-	ldr	w0, [x22,852]
-	add	w0, w20, w0
-	bl	FtlSysBlkNumInit
-	ldrh	w0, [x22,752]
-	bl	FtlFreeSysBlkQueueInit
-	ldrh	w20, [x22,756]
-.L2991:
-	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x0,758]
-	cmp	w0, w20
-	bls	.L2993
-	mov	w0, w20
-	mov	w1, 1
-	add	w20, w20, 1
-	bl	FtlLowFormatEraseBlock
-	uxth	w20, w20
-	b	.L2991
-.L2990:
-	add	x2, x19, :lo12:.LANCHOR2
-	ldrh	w0, [x2,756]
-	cmp	w0, w21
-	bls	.L3014
-	mov	w0, w21
+	str	w0, [x2,892]
+	ldr	w0, [x26,-124]
+	add	w0, w0, 1
+	str	w0, [x26,-124]
+	msub	w0, w23, w1, w20
+	sub	w1, w1, w0
+	ubfiz	x0, x0, 9, 23
+	cmp	w1, w21
+	csel	w19, w1, w21, ls
+	ldr	x1, [x3,8]
+	lsl	w25, w19, 9
+	add	x0, x1, x0
+	mov	w2, w25
+	mov	x1, x22
+	bl	ftl_memcpy
+	cbnz	w28, .L3051
+	ldr	w0, [x26,-124]
+	cmp	w0, 2
+	bgt	.L3051
+.L3084:
+	mov	w0, 0
+	b	.L3046
+.L3051:
+	add	x22, x22, x25
+	sub	w21, w21, w19
+	add	w20, w20, w19
+	add	w23, w23, 1
+	mov	w25, w28
+.L3050:
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR5
+	str	wzr, [x0,-124]
+.L3049:
+	ldr	w1, [x29,200]
+	mov	w0, w23
+	bl	FtlCacheMetchLpa
+	cbz	w0, .L3052
+	bl	FtlCacheWriteBack
+.L3052:
+	ldr	x0, [x29,144]
+	ldr	x1, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR5
+	str	w23, [x29,192]
+	add	x3, x1, :lo12:.LANCHOR2
+	add	x19, x3, 3608
+	mov	x24, x3
+	str	x19, [x0,-144]
+	adrp	x0, .LC157
+	add	x0, x0, :lo12:.LC157
+	str	x19, [x29,176]
+	str	x0, [x29,96]
+.L3053:
+	cbz	w25, .L3113
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L3054
+	ldr	x1, [x29,176]
+	adrp	x26, .LANCHOR1
+	cmp	x19, x1
+	bne	.L3055
+	add	x0, x24, 3656
+	ldrh	w19, [x0,4]
+	cbnz	w19, .L3056
+	bl	allocate_new_data_superblock
+	add	x0, x26, :lo12:.LANCHOR1
+	str	w19, [x0,3072]
+.L3056:
+	ldr	x0, [x29,176]
+	add	x26, x26, :lo12:.LANCHOR1
+	add	x19, x24, 3656
+	bl	allocate_new_data_superblock
+	ldr	w0, [x26,3072]
+	cbnz	w0, .L3057
+.L3058:
+	ldr	x19, [x29,176]
+	b	.L3057
+.L3055:
+	add	x26, x26, :lo12:.LANCHOR1
+	str	w0, [x26,3072]
+	ldr	x0, [x29,176]
+	ldrh	w0, [x0,4]
+	cbnz	w0, .L3058
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+.L3057:
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L3059
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+.L3059:
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR5
+	str	x19, [x0,-144]
+.L3054:
+	ldr	w0, [x24,964]
+	mov	x28, 0
+	ldr	w2, [x24,968]
+	ldrh	w1, [x19,4]
+	sub	w0, w0, w2
+	cmp	w1, w0
+	csel	w0, w1, w0, ls
+	cmp	w0, w25
+	csel	w0, w0, w25, ls
+	str	w0, [x29,140]
+	ldr	w0, [x29,204]
+	and	w0, w0, 1
+	str	w0, [x29,108]
+	add	w0, w21, w20
+	str	w0, [x29,136]
+.L3060:
+	ldr	w1, [x29,192]
+	mov	w0, w28
+	add	w27, w1, w28
+	ldr	w1, [x29,140]
+	cmp	w28, w1
+	bcs	.L3114
+	ldrh	w1, [x19,4]
+	cbz	w1, .L3090
+	ldr	w1, [x29,200]
+	cmp	w27, w1
+	cset	w7, eq
+	cbz	w0, .L3062
+	ldr	w1, [x29,108]
+	tst	w7, w1
+	beq	.L3062
+	ldrh	w1, [x24,824]
+	ldr	w2, [x29,136]
+	msub	w2, w27, w1, w2
+	cmp	w2, w1
+	bne	.L3090
+.L3062:
+	add	x1, x29, 212
+	mov	w2, 0
+	mov	w0, w27
+	str	x7, [x29,160]
+	bl	log2phys
+	mov	x0, x19
+	bl	get_new_active_ppa
+	ldr	w6, [x24,968]
+	mov	w5, 56
+	ldr	x2, [x24,1032]
+	str	x5, [x29,184]
+	umull	x1, w6, w5
+	add	x2, x2, x1
+	str	w0, [x2,4]
+	ldrh	w2, [x24,830]
+	ldr	x0, [x24,1032]
+	add	x1, x0, x1
+	mul	w0, w2, w6
+	and	x0, x0, 4294967292
+	str	x0, [x29,128]
+	ldr	x0, [x24,1136]
+	ldr	x3, [x29,128]
+	str	x0, [x29,120]
+	add	x26, x0, x3
+	ldrh	w0, [x24,828]
+	str	x26, [x1,16]
+	str	w27, [x1,24]
+	mul	w0, w0, w6
+	ldr	x6, [x24,1080]
+	and	x0, x0, 4294967292
+	add	x0, x6, x0
+	str	x0, [x1,8]
+	mov	x0, x26
 	mov	w1, 0
-	add	w21, w21, 1
-	bl	FtlLowFormatEraseBlock
-	add	w0, w20, w0
-	uxth	w21, w21
-	uxth	w20, w0
-	b	.L2990
-.L3014:
-	ldrh	w3, [x2,748]
-	ldr	w1, [x2,760]
-	ldrh	w0, [x2,758]
-	str	w0, [x2,944]
-	udiv	w4, w1, w3
-	str	w4, [x2,1396]
-	ubfx	x5, x4, 5, 16
-	add	w0, w5, 36
-	strh	w0, [x2,3916]
-	mov	w0, 24
-	mul	w0, w3, w0
-	cmp	w20, w0
-	ble	.L2995
+	bl	ftl_memset
+	cmp	w27, w23
+	cset	w0, eq
+	str	w0, [x29,196]
+	cbnz	w0, .L3093
+	ldr	x7, [x29,160]
+	ldr	x5, [x29,184]
+	cbz	w7, .L3063
+	ldr	w0, [x29,136]
+	ldrh	w2, [x24,824]
+	msub	w2, w27, w2, w0
+	uxth	w0, w2
+	str	w0, [x29,184]
+	ldr	w0, [x29,196]
+	str	w0, [x29,160]
+	b	.L3066
+.L3093:
+	ldrh	w2, [x24,824]
+	udiv	w0, w20, w2
+	msub	w0, w0, w2, w20
+	str	w0, [x29,160]
+	sub	w2, w2, w0
+	cmp	w2, w21
+	csel	w0, w2, w21, ls
+	str	w0, [x29,184]
+.L3066:
+	ldrh	w0, [x24,824]
+	ldr	w1, [x29,184]
+	cmp	w1, w0
+	bne	.L3067
+	ldr	w0, [x29,196]
+	mov	x1, x22
+	cbnz	w0, .L3068
+	ldr	w0, [x29,184]
+	mul	w1, w0, w27
 	sub	w1, w1, w20
-	udiv	w1, w1, w3
-	str	w1, [x2,1396]
-	lsr	w1, w1, 5
-	add	w1, w1, 24
-	strh	w1, [x2,3916]
-.L2995:
-	add	x2, x19, :lo12:.LANCHOR2
-	ldr	w0, [x2,652]
-	cmp	w0, 1
-	bne	.L2996
-	ldrh	w1, [x2,3916]
-	udiv	w0, w20, w3
-	add	w0, w1, w0
-	add	w0, w1, w0, asr 2
-	strh	w0, [x2,3916]
-.L2996:
-	adrp	x21, .LANCHOR0
-	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w0, [x0,136]
-	cbz	w0, .L2997
-	add	x1, x19, :lo12:.LANCHOR2
-	udiv	w0, w20, w3
-	ldrh	w2, [x1,3916]
-	add	w0, w2, w0
-	add	w0, w2, w0, asr 2
-	strh	w0, [x1,3916]
-.L2997:
-	add	x0, x19, :lo12:.LANCHOR2
-	ldrh	w1, [x0,810]
-	cbz	w1, .L2999
-	ldrh	w2, [x0,3916]
-	add	w2, w2, w1, lsr 1
-	strh	w2, [x0,3916]
-	mul	w2, w1, w3
-	cmp	w2, w20
-	ble	.L2999
-	add	w1, w1, 32
-	str	w4, [x0,1396]
-	add	w1, w5, w1
-	strh	w1, [x0,3916]
-.L2999:
-	add	x19, x19, :lo12:.LANCHOR2
-	add	x21, x21, :lo12:.LANCHOR0
-	add	x20, x19, 3608
-	mov	w22, -1
-	ldr	w1, [x19,1396]
-	ldrh	w0, [x19,3916]
-	sub	w0, w1, w0
-	ldrh	w1, [x19,818]
-	mul	w0, w0, w3
-	str	w0, [x19,3912]
-	mul	w0, w0, w1
-	ldrh	w1, [x19,824]
-	str	w0, [x19,1396]
-	mul	w0, w0, w1
-	str	w0, [x21,4048]
-	bl	FtlBbmTblFlush
-	ldrh	w2, [x19,758]
+	ubfiz	x1, x1, 9, 23
+	add	x1, x22, x1
+.L3068:
+	ldr	w2, [x29,204]
+	mov	w0, 56
+	cbz	w2, .L3069
+	ldr	w2, [x24,968]
+	umull	x0, w2, w0
+	ldr	x2, [x24,1032]
+	add	x0, x2, x0
+	b	.L3110
+.L3069:
+	ldr	w2, [x24,968]
+	umull	x0, w2, w0
+	ldr	x2, [x24,1032]
+	add	x0, x2, x0
+	ldr	x0, [x0,8]
+	b	.L3111
+.L3067:
+	ldr	w0, [x29,212]
+	cmn	w0, #1
+	beq	.L3071
+	str	w0, [x29,220]
+	mov	w1, 56
+	ldr	w0, [x24,968]
+	mov	w2, 0
+	str	w27, [x29,240]
+	umull	x0, w0, w1
+	ldr	x1, [x24,1032]
+	add	x0, x1, x0
+	ldr	x1, [x0,8]
+	ldr	x0, [x0,16]
+	str	x1, [x29,224]
+	mov	w1, 1
+	str	x0, [x29,232]
+	add	x0, x29, 216
+	bl	FlashReadPages
+	ldr	w0, [x29,216]
+	cmn	w0, #1
+	bne	.L3072
+	ldr	x0, [x29,112]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w1, [x0,3528]
+	add	w1, w1, 1
+	str	w1, [x0,3528]
+	b	.L3074
+.L3072:
+	ldr	w0, [x26,8]
+	cmp	w0, w27
+	beq	.L3074
+	ldr	x0, [x29,112]
+	mov	w2, w27
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w1, [x0,3528]
+	add	w1, w1, 1
+	str	w1, [x0,3528]
+	ldr	x0, [x29,96]
+	ldr	w1, [x26,8]
+	bl	printk
+	b	.L3074
+.L3071:
+	ldr	w0, [x24,968]
+	mov	w1, 56
+	ldrh	w2, [x24,828]
+	umull	x0, w0, w1
+	ldr	x1, [x24,1032]
+	add	x0, x1, x0
 	mov	w1, 0
-	ldr	x0, [x19,1184]
-	lsl	w2, w2, 1
-	bl	ftl_memset
-	str	wzr, [x19,3892]
-	mov	w0, 1
-	ldrh	w2, [x19,756]
-	strb	w0, [x20,8]
-	mov	w1, 255
-	ldr	x0, [x21,16]
-	lsr	w2, w2, 3
-	strh	w22, [x19,3920]
-	strh	wzr, [x19,3922]
-	strb	wzr, [x19,3926]
-	strb	wzr, [x19,3928]
-	strh	wzr, [x20,2]
-	strb	wzr, [x20,6]
-	strh	wzr, [x19,3608]
+	ldr	x0, [x0,8]
 	bl	ftl_memset
-.L3001:
-	mov	x0, x20
-	bl	make_superblock
-	ldrb	w0, [x20,7]
-	cbnz	w0, .L3002
-	ldrh	w1, [x20]
-	ldr	x0, [x19,1184]
-	strh	w22, [x0,x1,lsl 1]
-	ldrh	w0, [x20]
-	add	w0, w0, 1
-	strh	w0, [x20]
-	b	.L3001
-.L3002:
-	ldr	w0, [x19,872]
-	mov	w21, -1
-	str	w0, [x20,12]
-	add	w0, w0, 1
-	ldrh	w1, [x20]
-	str	w0, [x19,872]
-	ldr	x0, [x19,1184]
-	ldrh	w2, [x20,4]
-	strh	w2, [x0,x1,lsl 1]
-	add	x0, x19, 3656
-	strh	wzr, [x19,3658]
-	ldrh	w1, [x20]
-	mov	x20, x0
-	strb	wzr, [x19,3662]
-	add	w1, w1, 1
-	strh	w1, [x19,3656]
-	mov	w1, 1
-	strb	w1, [x19,3664]
-.L3003:
-	mov	x0, x20
-	bl	make_superblock
-	ldrb	w0, [x20,7]
-	cbnz	w0, .L3004
-	ldrh	w1, [x20]
-	ldr	x0, [x19,1184]
-	strh	w21, [x0,x1,lsl 1]
-	ldrh	w0, [x20]
-	add	w0, w0, 1
-	strh	w0, [x20]
-	b	.L3003
-.L3004:
-	ldr	w0, [x19,872]
-	str	w0, [x20,12]
-	add	w0, w0, 1
-	ldrh	w1, [x20]
-	str	w0, [x19,872]
-	ldr	x0, [x19,1184]
-	ldrh	w2, [x20,4]
-	mov	w20, -1
-	strh	w2, [x0,x1,lsl 1]
-	strh	w20, [x19,3704]
-	bl	FtlFreeSysBlkQueueOut
-	strh	w0, [x19,3896]
-	ldr	w0, [x19,3912]
-	strh	w0, [x19,3902]
-	ldr	w0, [x19,872]
-	str	w0, [x19,3904]
+.L3074:
+	ldr	w1, [x29,184]
+	mov	w0, 56
+	lsl	w2, w1, 9
+	ldr	w1, [x29,196]
+	cbz	w1, .L3075
+	ldr	w1, [x24,968]
+	umull	x0, w1, w0
+	ldr	x1, [x24,1032]
+	add	x1, x1, x0
+	ldr	x0, [x29,160]
+	ubfiz	x0, x0, 9, 23
+	ldr	x1, [x1,8]
+	add	x0, x1, x0
+	mov	x1, x22
+	b	.L3112
+.L3075:
+	ldr	w1, [x24,968]
+	umull	x0, w1, w0
+	ldr	x1, [x24,1032]
+	add	x0, x1, x0
+	ldrh	w1, [x24,824]
+	mul	w1, w27, w1
+	ldr	x0, [x0,8]
+	sub	w1, w1, w20
+	ubfiz	x1, x1, 9, 23
+	add	x1, x22, x1
+	b	.L3112
+.L3063:
+	ldr	w0, [x29,204]
+	ldrh	w1, [x24,824]
+	ldr	w2, [x24,968]
+	cbz	w0, .L3076
+	mul	w1, w27, w1
+	umull	x0, w2, w5
+	sub	w1, w1, w20
+	ldr	x2, [x24,1032]
+	ubfiz	x1, x1, 9, 23
+	add	x0, x2, x0
+	add	x1, x22, x1
+.L3110:
+	str	x1, [x0,8]
+	b	.L3070
+.L3076:
+	umull	x0, w2, w5
+	ldr	x2, [x24,1032]
+	mul	w1, w27, w1
+	add	x0, x2, x0
+	sub	w1, w1, w20
+	ubfiz	x1, x1, 9, 23
+	ldr	x0, [x0,8]
+	add	x1, x22, x1
+.L3111:
+	ldrh	w2, [x24,828]
+.L3112:
+	bl	ftl_memcpy
+.L3070:
+	ldr	x1, [x29,120]
+	mov	w0, -3947
+	ldr	x2, [x29,128]
+	add	x28, x28, 1
+	strh	w0, [x1,x2]
+	str	w27, [x26,8]
+	ldr	w0, [x24,876]
+	str	w0, [x26,4]
 	add	w0, w0, 1
-	strh	wzr, [x19,3898]
-	strh	w20, [x19,3900]
-	str	w0, [x19,872]
-	bl	FtlVpcTblFlush
-	bl	FtlSysBlkInit
-	cbnz	w0, .L2983
-	adrp	x0, .LANCHOR1+3064
-	mov	w1, 1
-	str	w1, [x0,#:lo12:.LANCHOR1+3064]
-.L2983:
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x24,876]
+	ldr	w0, [x29,212]
+	str	w0, [x26,12]
+	ldrh	w0, [x19]
+	strh	w0, [x26,2]
+	ldr	w0, [x24,968]
+	add	w0, w0, 1
+	str	w0, [x24,968]
+	b	.L3060
+.L3114:
+	str	w27, [x29,192]
+	mov	x0, x1
+	b	.L3061
+.L3090:
+	str	w27, [x29,192]
+.L3061:
+	sub	w25, w25, w0
+	ldr	w0, [x29,204]
+	cbnz	w0, .L3080
+	ldr	w1, [x24,968]
+	ldr	w0, [x24,964]
+	cmp	w1, w0
+	bcs	.L3080
+	ldrh	w0, [x19,4]
+	cbz	w0, .L3080
+.L3082:
+	str	wzr, [x29,204]
+	b	.L3053
+.L3080:
+	bl	FtlCacheWriteBack
+	str	wzr, [x24,968]
+	cmp	w25, 1
+	bhi	.L3053
+	b	.L3082
+.L3113:
+	ldr	w1, [x29,200]
+	mov	w0, w25
+	sub	w1, w1, w23
+	bl	ftl_do_gc
+	ldr	x0, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,3600]
+	cmp	w1, 31
+	bhi	.L3084
+	mov	w1, 128
+	mov	w19, 16
+	strh	w1, [x0,954]
+	strh	w1, [x0,952]
+.L3085:
 	mov	w0, 0
+	mov	w1, 1
+	bl	ftl_do_gc
+	ldr	x0, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	w0, [x0,1400]
+	cbnz	w0, .L3084
+	subs	w19, w19, #1
+	bne	.L3085
+	b	.L3084
+.L3046:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 48
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 272
 	ret
-	.size	FtlLowFormat, .-FtlLowFormat
+	.size	ftl_write, .-ftl_write
 	.align	2
-	.global	FtlReInitForSDUpdata
-	.type	FtlReInitForSDUpdata, %function
-FtlReInitForSDUpdata:
-	stp	x29, x30, [sp, -48]!
+	.global	ftl_vendor_write
+	.type	ftl_vendor_write, %function
+ftl_vendor_write:
+	stp	x29, x30, [sp, -16]!
+	mov	w5, w0
+	mov	w4, w1
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,136]
-	cbz	w0, .L3016
-.L3018:
-	mov	w0, 0
-	b	.L3017
-.L3016:
-	adrp	x0, RK29_NANDC_REG_BASE
-	ldr	x0, [x0,#:lo12:RK29_NANDC_REG_BASE]
-	bl	FlashInit
-	cbnz	w0, .L3018
-	bl	FlashLoadFactorBbt
-	cbz	w0, .L3019
-	bl	FlashMakeFactorBbt
-.L3019:
-	adrp	x20, .LANCHOR2
-	add	x0, x20, :lo12:.LANCHOR2
-	ldr	x0, [x0,688]
-	bl	FlashReadIdbDataRaw
-	cbz	w0, .L3020
-	mov	w1, 0
-	mov	w2, 16
-	add	x0, x29, 32
-	bl	FlashReadFacBbtData
-	mov	w0, 0
-	ldr	w2, [x29,32]
-	mov	w1, w0
-	mov	w4, 1
-.L3022:
-	lsl	w3, w4, w1
-	add	w1, w1, 1
-	tst	w3, w2
-	cset	w3, ne
-	cmp	w1, 16
-	add	w0, w0, w3
-	bne	.L3022
-	cmp	w0, 6
-	bhi	.L3023
-	add	x0, x19, :lo12:.LANCHOR0
-	b	.L3045
-.L3023:
-	mov	w1, 0
-	mov	w4, 1
-.L3026:
-	lsl	w3, w4, w1
-	add	w1, w1, 1
-	tst	w3, w2
-	cset	w3, ne
-	cmp	w1, 24
-	add	w0, w0, w3
-	bne	.L3026
-	cmp	w0, 17
-	add	x0, x19, :lo12:.LANCHOR0
-	bls	.L3045
-	mov	w1, 36
-.L3045:
-	strb	w1, [x0,25]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x0,25]
-	strh	w1, [x0,4042]
-.L3020:
-	adrp	x0, .LC45
-	adrp	x1, .LC119
-	add	x1, x1, :lo12:.LC119
-	add	x0, x0, :lo12:.LC45
-	add	x20, x20, :lo12:.LANCHOR2
-	bl	printk
-	add	x0, x19, :lo12:.LANCHOR0
-	mov	w19, 1
-	add	x0, x0, 4016
-	bl	FtlConstantsInit
-	bl	FtlVariablesInit
-	ldrh	w0, [x20,752]
-	bl	FtlFreeSysBlkQueueInit
-.L3028:
-	bl	FtlLoadBbt
-	cbz	w0, .L3029
-.L3047:
-	bl	FtlLowFormat
-	cmp	w19, 3
-	bhi	.L3048
-	add	w19, w19, 1
-	b	.L3028
-.L3048:
-	mov	w0, -1
-	b	.L3017
-.L3029:
-	bl	FtlSysBlkInit
-	cbnz	w0, .L3047
-	adrp	x1, .LANCHOR1+3064
-	mov	w2, 1
-	str	w2, [x1,#:lo12:.LANCHOR1+3064]
-.L3017:
-	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 48
+	mov	x3, x2
+	mov	w1, w5
+	mov	w2, w4
+	mov	w0, 16
+	bl	ftl_write
+	ldp	x29, x30, [sp], 16
 	ret
-	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
+	.size	ftl_vendor_write, .-ftl_vendor_write
 	.align	2
-	.global	FtlInit
-	.type	FtlInit, %function
-FtlInit:
-	stp	x29, x30, [sp, -48]!
-	mov	w0, -1
-	adrp	x1, .LC119
+	.global	ftl_sys_write
+	.type	ftl_sys_write, %function
+ftl_sys_write:
+	stp	x29, x30, [sp, -16]!
+	mov	w4, w1
+	mov	x3, x2
 	add	x29, sp, 0
-	str	x21, [sp,32]
-	adrp	x21, .LANCHOR1
-	add	x21, x21, :lo12:.LANCHOR1
-	add	x1, x1, :lo12:.LC119
+	add	w1, w0, 256
+	mov	w2, w4
+	mov	w0, 16
+	bl	ftl_write
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_sys_write, .-ftl_sys_write
+	.align	2
+	.global	ftl_fix_nand_power_lost_error
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	adrp	x0, .LANCHOR0+136
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
 	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	cbz	w0, .L3117
+	adrp	x21, .LANCHOR4
 	adrp	x19, .LANCHOR2
-	adrp	x20, .LANCHOR0
-	str	w0, [x21,3064]
-	adrp	x0, .LANCHOR4+388
-	add	x19, x19, :lo12:.LANCHOR2
-	add	x20, x20, :lo12:.LANCHOR0
-	str	wzr, [x0,#:lo12:.LANCHOR4+388]
-	adrp	x0, .LC45
-	add	x0, x0, :lo12:.LC45
-	str	wzr, [x19,1400]
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x20, x19, :lo12:.LANCHOR2
+	adrp	x24, .LC158
+	add	x26, x20, 3608
+	add	x25, x20, 3656
+	ldrh	w23, [x0,4058]
+	add	x0, x24, :lo12:.LC158
+	ldr	x2, [x20,1184]
+	ubfiz	x22, x23, 1, 16
+	mov	w1, w23
+	ldrh	w2, [x2,x22]
 	bl	printk
-	add	x0, x20, 4016
-	bl	FtlConstantsInit
-	bl	FtlMemInit
-	bl	FtlVariablesInit
-	ldrh	w0, [x19,752]
-	bl	FtlFreeSysBlkQueueInit
-	bl	FtlLoadBbt
-	cbz	w0, .L3050
-	adrp	x0, .LC138
-	add	x0, x0, :lo12:.LC138
-	b	.L3062
-.L3050:
-	bl	FtlSysBlkInit
-	cbz	w0, .L3052
-	adrp	x0, .LC139
-	add	x0, x0, :lo12:.LC139
-.L3062:
-	adrp	x1, .LANCHOR3
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x1, x1, 40
+	ldrh	w0, [x20,3608]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	w0, [x20,3656]
+	mov	w20, 4097
+	bl	FtlGcRefreshOpenBlock
+	mov	x0, x26
+	bl	allocate_new_data_superblock
+	mov	x0, x25
+	bl	allocate_new_data_superblock
+.L3119:
+	subs	w20, w20, #1
+	beq	.L3123
+	mov	w0, 1
+	mov	w1, w0
+	bl	ftl_do_gc
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x0, [x0,1184]
+	ldrh	w0, [x0,x22]
+	cbnz	w0, .L3119
+.L3123:
+	add	x20, x19, :lo12:.LANCHOR2
+	add	x0, x24, :lo12:.LC158
+	mov	w1, w23
+	ldr	x2, [x20,1184]
+	ldrh	w2, [x2,x22]
+	bl	printk
+	ldr	x0, [x20,1184]
+	ldrh	w0, [x0,x22]
+	cbnz	w0, .L3121
+	add	x0, x29, 80
+	strh	w23, [x29,80]
+	bl	make_superblock
+	mov	x0, 0
+	ldrh	w5, [x20,748]
+	mov	w6, 65535
+	mov	w20, w0
+	mov	w7, 56
+.L3124:
+	cmp	w5, w0, uxth
+	bls	.L3131
+	add	x1, x29, 80
+	add	x1, x1, x0, lsl 1
+	ldrh	w2, [x1,16]
+	cmp	w2, w6
+	beq	.L3125
+	add	x4, x19, :lo12:.LANCHOR2
+	lsl	w2, w2, 10
+	umull	x1, w20, w7
+	add	w20, w20, 1
+	ldr	x3, [x4,1016]
+	uxth	w20, w20
+	add	x3, x3, x1
+	str	w2, [x3,4]
+	ldr	x2, [x4,1016]
+	add	x1, x2, x1
+	str	xzr, [x1,8]
+	str	xzr, [x1,16]
+.L3125:
+	add	x0, x0, 1
+	b	.L3124
+.L3131:
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x0, .LC159
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC159
+	ldr	x2, [x19,1184]
+	ldrh	w2, [x2,x22]
 	bl	printk
-	b	.L3051
-.L3052:
+	ldr	x0, [x19,1016]
+	mov	w1, 0
+	mov	w2, w20
+	bl	FlashEraseBlocks
+	ldr	x0, [x19,1016]
 	mov	w1, 1
-	str	w1, [x21,3064]
-	bl	ftl_do_gc
-	ldrh	w0, [x19,3600]
-	cmp	w0, 15
-	bhi	.L3053
-	mov	w19, 1024
-.L3054:
-	mov	w0, 1
-	mov	w1, w0
-	bl	ftl_do_gc
-	subs	w19, w19, #1
-	bne	.L3054
-	b	.L3051
-.L3053:
-	ldrb	w0, [x20,136]
-	cbz	w0, .L3051
-	mov	w19, 128
-.L3056:
-	mov	w0, 1
-	mov	w1, w0
-	bl	ftl_do_gc
-	subs	w19, w19, #1
-	bne	.L3056
-.L3051:
-	mov	w0, 0
-	ldr	x21, [sp,32]
+	mov	w2, w20
+	bl	FlashEraseBlocks
+.L3121:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w0, -1
+	strh	w0, [x21,4058]
+.L3117:
 	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 48
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 128
 	ret
-	.size	FtlInit, .-FtlInit
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
 	.global	gc_ink_free_return_value
+	.global	check_valid_page_count_table
 	.global	FtlUpdateVaildLpnCount
 	.global	g_ect_tbl_power_up_flush
 	.global	last_cache_match_count
@@ -19690,19 +20522,33 @@ FtlInit:
 	.section	.rodata
 	.align	3
 .LANCHOR3 = . + 0
-	.type	__func__.19429, %object
-	.size	__func__.19429, 11
-__func__.19429:
+	.type	__func__.19448, %object
+	.size	__func__.19448, 11
+__func__.19448:
 	.string	"FtlMemInit"
 	.zero	5
-	.type	__func__.20378, %object
-	.size	__func__.20378, 21
-__func__.20378:
+	.type	__func__.20195, %object
+	.size	__func__.20195, 12
+__func__.20195:
+	.string	"FtlCheckVpc"
+	.zero	4
+	.type	__func__.20228, %object
+	.size	__func__.20228, 17
+__func__.20228:
+	.string	"FtlDumpBlockInfo"
+	.zero	7
+	.type	__func__.20247, %object
+	.size	__func__.20247, 16
+__func__.20247:
+	.string	"FtlScanAllBlock"
+	.type	__func__.20495, %object
+	.size	__func__.20495, 21
+__func__.20495:
 	.string	"FtlVpcCheckAndModify"
 	.zero	3
-	.type	__func__.19502, %object
-	.size	__func__.19502, 8
-__func__.19502:
+	.type	__func__.19521, %object
+	.size	__func__.19521, 8
+__func__.19521:
 	.string	"FtlInit"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
@@ -19792,199 +20638,239 @@ __func__.19502:
 .LC42:
 	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
 .LC43:
-	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
+	.string	"region_id = %x phyAddr = %x\n"
 .LC44:
-	.string	"FtlVpcTblFlush error = %x error count = %d\n"
+	.string	"map_ppn:"
 .LC45:
-	.string	"%s\n"
+	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
 .LC46:
-	.string	"no ect"
+	.string	"FtlVpcTblFlush error = %x error count = %d\n"
 .LC47:
-	.string	"page map lost %x %x %x %x\n"
+	.string	"%s\n"
 .LC48:
-	.string	"slc mode"
+	.string	"no ect"
 .LC49:
-	.string	"FLASH INFO:\n"
+	.string	"...%s enter...\n"
 .LC50:
-	.string	"FLASH ID: %x\n"
+	.string	"vpc1"
 .LC51:
-	.string	"Device Capacity: %d MB\n"
+	.string	"vpc2"
 .LC52:
-	.string	"FMWAIT: %x %x %x %x\n"
+	.string	"FtlCheckVpc2 %x = %x  %x\n"
 .LC53:
-	.string	"FTL INFO:\n"
+	.string	"free blk vpc error %x = %x  %x\n"
 .LC54:
-	.string	"g_MaxLpn = 0x%x\n"
+	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data = %x\n"
 .LC55:
-	.string	"g_VaildLpn = 0x%x\n"
+	.string	":"
 .LC56:
-	.string	"read_page_count = 0x%x\n"
+	.string	"Ftlscanalldata = %x\n"
 .LC57:
-	.string	"discard_page_count = 0x%x\n"
+	.string	"scan lpa = %x ppa= %x\n"
 .LC58:
-	.string	"write_page_count = 0x%x\n"
+	.string	"lba = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC59:
-	.string	"cache_write_count = 0x%x\n"
+	.string	"phyBlk = %x,addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC60:
-	.string	"l2p_write_count = 0x%x\n"
+	.string	"id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC61:
-	.string	"gc_page_count = 0x%x\n"
+	.string	"Mblk:"
 .LC62:
-	.string	"totle_write = %d MB\n"
+	.string	"L2P:"
 .LC63:
-	.string	"totle_read = %d MB\n"
+	.string	"L2PC:"
 .LC64:
-	.string	"GSV = 0x%x\n"
+	.string	"superBlkID = %x vpc=%x\n"
 .LC65:
-	.string	"GDV = 0x%x\n"
+	.string	"flashmode = %x pagenum = %x %x\n"
 .LC66:
-	.string	"bad blk num = %d %d\n"
+	.string	"blk = %x vpc=%x mode = %x\n"
 .LC67:
-	.string	"free_superblocks = 0x%x\n"
+	.string	"mlc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC68:
-	.string	"mlc_EC = 0x%x\n"
+	.string	"slc id = %x,%x addr= %x,spare= %x %x %x %x data=%x %x\n"
 .LC69:
-	.string	"slc_EC = 0x%x\n"
+	.string	"slc mode"
 .LC70:
-	.string	"avg_EC = 0x%x\n"
+	.string	"FLASH INFO:\n"
 .LC71:
-	.string	"sys_EC = 0x%x\n"
+	.string	"FLASH ID: %x\n"
 .LC72:
-	.string	"max_EC = 0x%x\n"
+	.string	"Device Capacity: %d MB\n"
 .LC73:
-	.string	"min_EC = 0x%x\n"
+	.string	"FMWAIT: %x %x %x %x\n"
 .LC74:
-	.string	"PLT = 0x%x\n"
+	.string	"FTL INFO:\n"
 .LC75:
-	.string	"POT = 0x%x\n"
+	.string	"g_MaxLpn = 0x%x\n"
 .LC76:
-	.string	"MaxSector = 0x%x\n"
+	.string	"g_VaildLpn = 0x%x\n"
 .LC77:
-	.string	"init_sys_blks_pp = 0x%x\n"
+	.string	"read_page_count = 0x%x\n"
 .LC78:
-	.string	"sys_blks_pp = 0x%x\n"
+	.string	"discard_page_count = 0x%x\n"
 .LC79:
-	.string	"free sysblock = 0x%x\n"
+	.string	"write_page_count = 0x%x\n"
 .LC80:
-	.string	"data_blks_pp = 0x%x\n"
+	.string	"cache_write_count = 0x%x\n"
 .LC81:
-	.string	"data_op_blks_pp = 0x%x\n"
+	.string	"l2p_write_count = 0x%x\n"
 .LC82:
-	.string	"max_data_blks = 0x%x\n"
+	.string	"gc_page_count = 0x%x\n"
 .LC83:
-	.string	"Sys.id = 0x%x\n"
+	.string	"totle_write = %d MB\n"
 .LC84:
-	.string	"Bbt.id = 0x%x\n"
+	.string	"totle_read = %d MB\n"
 .LC85:
-	.string	"ACT.page = 0x%x\n"
+	.string	"GSV = 0x%x\n"
 .LC86:
-	.string	"ACT.plane = 0x%x\n"
+	.string	"GDV = 0x%x\n"
 .LC87:
-	.string	"ACT.id = 0x%x\n"
+	.string	"bad blk num = %d %d\n"
 .LC88:
-	.string	"ACT.mode = 0x%x\n"
+	.string	"free_superblocks = 0x%x\n"
 .LC89:
-	.string	"ACT.a_pages = 0x%x\n"
+	.string	"mlc_EC = 0x%x\n"
 .LC90:
-	.string	"ACT VPC = 0x%x\n"
+	.string	"slc_EC = 0x%x\n"
 .LC91:
-	.string	"BUF.page = 0x%x\n"
+	.string	"avg_EC = 0x%x\n"
 .LC92:
-	.string	"BUF.plane = 0x%x\n"
+	.string	"sys_EC = 0x%x\n"
 .LC93:
-	.string	"BUF.id = 0x%x\n"
+	.string	"max_EC = 0x%x\n"
 .LC94:
-	.string	"BUF.mode = 0x%x\n"
+	.string	"min_EC = 0x%x\n"
 .LC95:
-	.string	"BUF.a_pages = 0x%x\n"
+	.string	"PLT = 0x%x\n"
 .LC96:
-	.string	"BUF VPC = 0x%x\n"
+	.string	"POT = 0x%x\n"
 .LC97:
-	.string	"TMP.page = 0x%x\n"
+	.string	"MaxSector = 0x%x\n"
 .LC98:
-	.string	"TMP.plane = 0x%x\n"
+	.string	"init_sys_blks_pp = 0x%x\n"
 .LC99:
-	.string	"TMP.id = 0x%x\n"
+	.string	"sys_blks_pp = 0x%x\n"
 .LC100:
-	.string	"TMP.mode = 0x%x\n"
+	.string	"free sysblock = 0x%x\n"
 .LC101:
-	.string	"TMP.a_pages = 0x%x\n"
+	.string	"data_blks_pp = 0x%x\n"
 .LC102:
-	.string	"GC.page = 0x%x\n"
+	.string	"data_op_blks_pp = 0x%x\n"
 .LC103:
-	.string	"GC.plane = 0x%x\n"
+	.string	"max_data_blks = 0x%x\n"
 .LC104:
-	.string	"GC.id = 0x%x\n"
+	.string	"Sys.id = 0x%x\n"
 .LC105:
-	.string	"GC.mode = 0x%x\n"
+	.string	"Bbt.id = 0x%x\n"
 .LC106:
-	.string	"GC.a_pages = 0x%x\n"
+	.string	"ACT.page = 0x%x\n"
 .LC107:
-	.string	"WR_CHK = 0x%x %x %x %x\n"
+	.string	"ACT.plane = 0x%x\n"
 .LC108:
-	.string	"Read Err Cnt = 0x%x\n"
+	.string	"ACT.id = 0x%x\n"
 .LC109:
-	.string	"Prog Err Cnt = 0x%x\n"
+	.string	"ACT.mode = 0x%x\n"
 .LC110:
-	.string	"gc_free_blk_th= 0x%x\n"
+	.string	"ACT.a_pages = 0x%x\n"
 .LC111:
-	.string	"gc_merge_free_blk_th= 0x%x\n"
+	.string	"ACT VPC = 0x%x\n"
 .LC112:
-	.string	"gc_skip_write_count= 0x%x\n"
+	.string	"BUF.page = 0x%x\n"
 .LC113:
-	.string	"gc_blk_index= 0x%x\n"
+	.string	"BUF.plane = 0x%x\n"
 .LC114:
-	.string	"free min EC= 0x%x\n"
+	.string	"BUF.id = 0x%x\n"
 .LC115:
-	.string	"free max EC= 0x%x\n"
+	.string	"BUF.mode = 0x%x\n"
 .LC116:
-	.string	"GC__SB VPC = 0x%x\n"
+	.string	"BUF.a_pages = 0x%x\n"
 .LC117:
-	.string	"%d. [0x%x]=0x%x 0x%x  0x%x\n"
+	.string	"BUF VPC = 0x%x\n"
 .LC118:
-	.string	"free %d. [0x%x] 0x%x  0x%x\n"
+	.string	"TMP.page = 0x%x\n"
 .LC119:
-	.string	"FTL version: 5.0.48 20180408"
+	.string	"TMP.plane = 0x%x\n"
 .LC120:
-	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
+	.string	"TMP.id = 0x%x\n"
 .LC121:
-	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
+	.string	"TMP.mode = 0x%x\n"
 .LC122:
-	.string	"FtlGcRefreshBlock  0x%x\n"
+	.string	"TMP.a_pages = 0x%x\n"
 .LC123:
-	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
+	.string	"GC.page = 0x%x\n"
 .LC124:
-	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+	.string	"GC.plane = 0x%x\n"
 .LC125:
-	.string	"decrement_vpc_count %x = %d\n"
+	.string	"GC.id = 0x%x\n"
 .LC126:
-	.string	"RSB refresh addr %x\n"
+	.string	"GC.mode = 0x%x\n"
 .LC127:
-	.string	"spuer block %x vpn is 0\n "
+	.string	"GC.a_pages = 0x%x\n"
 .LC128:
-	.string	"g_recovery_ppa %x ver %x\n "
+	.string	"WR_CHK = 0x%x %x %x %x\n"
 .LC129:
-	.string	"...%s enter...\n"
+	.string	"Read Err = 0x%x\n"
 .LC130:
-	.string	"FtlCheckVpc %x = %x  %x\n"
+	.string	"Prog Err = 0x%x\n"
 .LC131:
-	.string	"%d GC datablk  = %x vpc %x %x\n"
+	.string	"gc_free_blk_th= 0x%x\n"
 .LC132:
-	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+	.string	"gc_merge_free_blk_th= 0x%x\n"
 .LC133:
-	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+	.string	"gc_skip_write_count= 0x%x\n"
 .LC134:
-	.string	"GC des block %x done\n"
+	.string	"gc_blk_index= 0x%x\n"
 .LC135:
-	.string	"FtlWrite: lpa error:%x %x\n"
+	.string	"free min EC= 0x%x\n"
 .LC136:
-	.string	"fix power lost blk = %x vpc=%x\n"
+	.string	"free max EC= 0x%x\n"
 .LC137:
-	.string	"erase power lost blk = %x vpc=%x\n"
+	.string	"GC__SB VPC = 0x%x\n"
 .LC138:
-	.string	"...%s: no bad block mapping table, format device\n"
+	.string	"%d. [0x%x]=0x%x 0x%x  0x%x\n"
 .LC139:
+	.string	"free %d. [0x%x] 0x%x  0x%x\n"
+.LC140:
+	.string	"FTL version: 5.0.48 20180703"
+.LC141:
+	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
+.LC142:
+	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
+.LC143:
+	.string	"FtlGcRefreshBlock  0x%x\n"
+.LC144:
+	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
+.LC145:
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+.LC146:
+	.string	"decrement_vpc_count %x = %d\n"
+.LC147:
+	.string	"RSB refresh addr %x\n"
+.LC148:
+	.string	"spuer block %x vpn is 0\n "
+.LC149:
+	.string	"g_recovery_ppa %x ver %x\n "
+.LC150:
+	.string	"FtlCheckVpc %x = %x  %x\n"
+.LC151:
+	.string	"%d GC datablk  = %x vpc %x %x\n"
+.LC152:
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+.LC153:
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+.LC154:
+	.string	"GC des block %x done\n"
+.LC155:
+	.string	"...%s: no bad block mapping table, format device\n"
+.LC156:
 	.string	"...%s FtlSysBlkInit error ,format device!\n"
+.LC157:
+	.string	"FtlWrite: lpa error:%x %x\n"
+.LC158:
+	.string	"fix power lost blk = %x vpc=%x\n"
+.LC159:
+	.string	"erase power lost blk = %x vpc=%x\n"
 	.data
 	.align	3
 .LANCHOR1 = . + 0
@@ -20653,9 +21539,9 @@ NandFlashParaTbl:
 	.byte	32
 	.hword	512
 	.byte	2
-	.byte	2
-	.hword	1096
-	.hword	1503
+	.byte	1
+	.hword	2184
+	.hword	1479
 	.byte	5
 	.byte	19
 	.byte	60
@@ -20681,7 +21567,7 @@ NandFlashParaTbl:
 	.byte	2
 	.byte	1
 	.hword	1048
-	.hword	1503
+	.hword	1479
 	.byte	5
 	.byte	19
 	.byte	60
@@ -22454,7 +23340,8 @@ power_up_flag:
 	.align	3
 .LANCHOR0 = . + 0
 .LANCHOR2 = . + 4352
-.LANCHOR4 = . + 8704
+.LANCHOR4 = . + 13056
+.LANCHOR5 = . + 17408
 	.type	gFlashPageBuffer0, %object
 	.size	gFlashPageBuffer0, 8
 gFlashPageBuffer0:
@@ -22607,11 +23494,16 @@ read_retry_cur_offset:
 	.size	gFlashInterfaceMode, 1
 gFlashInterfaceMode:
 	.zero	1
+	.zero	3
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.zero	4
 	.type	gFlashToggleModeEn, %object
 	.size	gFlashToggleModeEn, 1
 gFlashToggleModeEn:
 	.zero	1
-	.zero	2
+	.zero	3
 	.type	gBootDdrMode, %object
 	.size	gBootDdrMode, 4
 gBootDdrMode:
@@ -22620,11 +23512,6 @@ gBootDdrMode:
 	.size	gNandcVer, 4
 gNandcVer:
 	.zero	4
-	.type	g_nandc_version_data, %object
-	.size	g_nandc_version_data, 4
-g_nandc_version_data:
-	.zero	4
-	.zero	4
 	.type	gMasterTempBuf, %object
 	.size	gMasterTempBuf, 8
 gMasterTempBuf:
@@ -23224,6 +24111,10 @@ gSysInfo:
 g_totle_map_block:
 	.zero	2
 	.zero	2
+	.type	check_valid_page_count_table, %object
+	.size	check_valid_page_count_table, 8192
+check_valid_page_count_table:
+	.zero	8192
 	.type	g_MaxLbn, %object
 	.size	g_MaxLbn, 4
 g_MaxLbn:
@@ -23336,6 +24227,10 @@ gp_last_act_superblock:
 	.size	gc_discard_updated, 4
 gc_discard_updated:
 	.zero	4
+	.type	g_LowFormat, %object
+	.size	g_LowFormat, 4
+g_LowFormat:
+	.zero	4
 	.type	g_ftl_nand_free_count, %object
 	.size	g_ftl_nand_free_count, 4
 g_ftl_nand_free_count:
@@ -23344,10 +24239,6 @@ g_ftl_nand_free_count:
 	.size	last_cache_match_count, 4
 last_cache_match_count:
 	.zero	4
-	.type	g_LowFormat, %object
-	.size	g_LowFormat, 4
-g_LowFormat:
-	.zero	4
 	.type	g_gc_refresh_block_temp_tbl, %object
 	.size	g_gc_refresh_block_temp_tbl, 34
 g_gc_refresh_block_temp_tbl:
diff --git a/drivers/rk_nand/rk_nand_blk.c b/drivers/rk_nand/rk_nand_blk.c
index 43813e42ad2c..aee8beb350b7 100644
--- a/drivers/rk_nand/rk_nand_blk.c
+++ b/drivers/rk_nand/rk_nand_blk.c
@@ -234,7 +234,7 @@ static int nand_blktrans_thread(void *arg)
 	int req_empty_times = 0;
 
 	spin_lock_irq(rq->queue_lock);
-	rk_ftl_gc_jiffies = HZ * 5;
+	rk_ftl_gc_jiffies = HZ / 10; /* do garbage collect after 100ms */
 	rk_ftl_gc_do = 0;
 	rk_ftl_gc_timeout.expires = jiffies + rk_ftl_gc_jiffies;
 	add_timer(&rk_ftl_gc_timeout);
@@ -477,8 +477,9 @@ static int nand_prase_cmdline_part(struct nand_part *pdisk_part)
 				> cap_size) {
 				pdisk_part[i].size = cap_size -
 					pdisk_part[i].offset;
-				pr_err("partition config error....\n");
-				if (pdisk_part[i].size)
+				pr_err("partition error....max cap:%x\n",
+					cap_size);
+				if (!pdisk_part[i].size)
 					return i;
 				else
 					return (i + 1);
@@ -631,13 +632,6 @@ static int nand_remove_dev(struct nand_blk_dev *dev)
 
 int nand_blk_add_whole_disk(void)
 {
-	struct nand_part part;
-
-	part.offset = 0;
-	part.size = rk_ftl_get_capacity();
-	part.type = 0;
-	memcpy(part.name, "rknand", sizeof("rknand"));
-	nand_add_dev(&mytr, &part);
 	return 0;
 }
 
@@ -645,6 +639,7 @@ static int nand_blk_register(struct nand_blk_ops *nandr)
 {
 	int i, ret;
 	u32 part_size;
+	struct nand_part part;
 
 	rk_nand_schedule_enable_config(1);
 	nandr->quit = 0;
@@ -679,8 +674,15 @@ static int nand_blk_register(struct nand_blk_ops *nandr)
 	kthread_run(nand_blktrans_thread, (void *)nandr, "rknand");
 
 	g_max_part_num = nand_prase_cmdline_part(disk_array);
+
+	nandr->last_dev_index = 0;
+	part.offset = 0;
+	part.size = rk_ftl_get_capacity();
+	part.type = 0;
+	part.name[0] = 0;
+	nand_add_dev(&mytr, &part);
+
 	if (g_max_part_num) {
-		nandr->last_dev_index = 0;
 		for (i = 0; i < g_max_part_num; i++) {
 			part_size = (disk_array[i].offset + disk_array[i].size);
 			pr_info("%10s: 0x%09llx -- 0x%09llx (%llu MB)\n",
@@ -690,14 +692,6 @@ static int nand_blk_register(struct nand_blk_ops *nandr)
 				(u64)disk_array[i].size / 2048);
 			nand_add_dev(nandr, &disk_array[i]);
 		}
-	} else {
-		struct nand_part part;
-
-		part.offset = 0;
-		part.size = rk_ftl_get_capacity();
-		part.type = 0;
-		part.name[0] = 0;
-		nand_add_dev(&mytr, &part);
 	}
 
 	rknand_create_procfs();
diff --git a/drivers/rk_nand/rk_zftl_arm64.S b/drivers/rk_nand/rk_zftl_arm64.S
index 1d118e76115c..efe057763981 100644
--- a/drivers/rk_nand/rk_zftl_arm64.S
+++ b/drivers/rk_nand/rk_zftl_arm64.S
@@ -5,7 +5,7 @@
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
- * date: 2018-04-11
+ * date: 2018-06-15
  * function: rk ftl v5 for rockchip soc base on arm v8 to support 3D/2D
  *	     TLC and MLC.
  */
@@ -50,18 +50,44 @@ flash_mem_cmp8:
 	ret
 	.size	flash_mem_cmp8, .-flash_mem_cmp8
 	.align	2
+	.type	slc_phy_page_address_calc, %function
+slc_phy_page_address_calc:
+	adrp	x1, .LANCHOR0
+	add	x2, x1, :lo12:.LANCHOR0
+	ldrb	w3, [x1,#:lo12:.LANCHOR0]
+	cbz	w3, .L9
+	ldrb	w2, [x2,1]
+	cbz	w2, .L10
+.L9:
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w3, [x1,2]
+	udiv	w2, w0, w3
+	mul	w2, w2, w3
+	ldrb	w3, [x1,1]
+	sub	w0, w0, w2
+	cbz	w3, .L11
+	add	w0, w2, w0, lsl 1
+	b	.L10
+.L11:
+	add	x1, x1, 4
+	ldrh	w0, [x1,w0,uxtw 1]
+	add	w0, w0, w2
+.L10:
+	ret
+	.size	slc_phy_page_address_calc, .-slc_phy_page_address_calc
+	.align	2
 	.global	zftl_nandc_get_irq_status
 	.type	zftl_nandc_get_irq_status, %function
 zftl_nandc_get_irq_status:
-	adrp	x1, .LANCHOR0
-	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	adrp	x1, .LANCHOR0+516
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+516]
 	cmp	w1, 9
-	bne	.L9
+	bne	.L19
 	ldr	w0, [x0,296]
-	b	.L10
-.L9:
+	b	.L20
+.L19:
 	ldr	w0, [x0,372]
-.L10:
+.L20:
 	ret
 	.size	zftl_nandc_get_irq_status, .-zftl_nandc_get_irq_status
 	.section	.text.unlikely,"ax",%progbits
@@ -72,11 +98,11 @@ isxdigit:
 	mov	w2, 1
 	sub	w1, w1, #65
 	cmp	w1, 25
-	bls	.L12
+	bls	.L22
 	sub	w0, w0, #48
 	cmp	w0, 9
 	cset	w2, ls
-.L12:
+.L22:
 	mov	w0, w2
 	ret
 	.size	isxdigit, .-isxdigit
@@ -85,15 +111,15 @@ isxdigit:
 	.global	zftl_get_density
 	.type	zftl_get_density, %function
 zftl_get_density:
-	cbnz	w0, .L15
-	adrp	x0, .LANCHOR0+4
-	ldr	w0, [x0,#:lo12:.LANCHOR0+4]
-	b	.L16
-.L15:
+	cbnz	w0, .L25
+	adrp	x0, .LANCHOR0+520
+	ldr	w0, [x0,#:lo12:.LANCHOR0+520]
+	b	.L26
+.L25:
 	cmp	w0, 4
 	mov	w0, 8192
 	csel	w0, w0, wzr, cc
-.L16:
+.L26:
 	ret
 	.size	zftl_get_density, .-zftl_get_density
 	.align	2
@@ -109,89 +135,90 @@ _list_remove_node:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	umull	x21, w1, w4
-	ldr	x23, [x3,8]
+	ldr	x23, [x3,528]
 	mov	w3, 65535
 	add	x20, x23, x21
 	ldrh	w1, [x23,x21]
 	cmp	w1, w3
-	bne	.L19
+	bne	.L29
 	ldrh	w3, [x20,2]
 	cmp	w3, w1
-	bne	.L19
+	bne	.L29
 	ldr	x1, [x0]
 	cmp	x20, x1
-	bne	.L18
-.L19:
+	bne	.L28
+.L29:
 	ldrh	w1, [x20,2]
 	mov	x22, x0
 	mov	w0, 65535
 	mov	x24, x2
 	cmp	w1, w0
-	bne	.L21
+	bne	.L31
 	ldr	x0, [x22]
 	cmp	x20, x0
-	beq	.L21
+	beq	.L31
 	adrp	x0, .LC0
 	adrp	x1, .LANCHOR1
-	add	x0, x0, :lo12:.LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 184
+	mov	w2, 188
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L21:
+	bl	dump_stack
+.L31:
 	ldr	x0, [x22]
 	mov	w2, 65535
 	cmp	x20, x0
-	bne	.L22
+	bne	.L32
 	ldrh	w1, [x23,x21]
 	cmp	w1, w2
-	bne	.L23
+	bne	.L33
 	str	xzr, [x22]
-	b	.L24
-.L23:
+	b	.L34
+.L33:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 6
 	umull	x1, w1, w0
-	ldr	x0, [x19,8]
+	ldr	x0, [x19,528]
 	add	x1, x0, x1
 	str	x1, [x22]
 	mov	w0, -1
 	strh	w0, [x1,2]
-	b	.L24
-.L22:
+	b	.L34
+.L32:
 	ldrh	w0, [x23,x21]
 	cmp	w0, w2
-	bne	.L25
+	bne	.L35
 	ldrh	w1, [x20,2]
 	cmp	w1, w0
-	beq	.L24
+	beq	.L34
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 6
 	mov	w2, -1
 	umull	x1, w1, w0
-	ldr	x0, [x19,8]
-	b	.L26
-.L25:
+	ldr	x0, [x19,528]
+	b	.L36
+.L35:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, 6
 	ldrh	w2, [x20,2]
 	umull	x0, w0, w1
-	ldr	x3, [x19,8]
+	ldr	x3, [x19,528]
 	add	x0, x3, x0
 	strh	w2, [x0,2]
 	ldrh	w0, [x20,2]
 	ldrh	w2, [x23,x21]
 	umull	x0, w0, w1
-	ldr	x1, [x19,8]
-.L26:
+	ldr	x1, [x19,528]
+.L36:
 	strh	w2, [x1,x0]
-.L24:
+.L34:
 	mov	w0, -1
 	strh	w0, [x23,x21]
 	strh	w0, [x20,2]
 	ldrh	w0, [x24]
 	sub	w0, w0, #1
 	strh	w0, [x24]
-.L18:
+.L28:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -207,14 +234,14 @@ _list_pop_index_node:
 	stp	x19, x20, [sp,16]
 	mov	w19, 65535
 	ldr	x20, [x0]
-	cbz	x20, .L28
-	adrp	x3, .LANCHOR0+8
+	cbz	x20, .L38
+	adrp	x3, .LANCHOR0+528
 	mov	w4, 65535
 	mov	w5, 6
-	ldr	x19, [x3,#:lo12:.LANCHOR0+8]
-.L29:
-	cbnz	w1, .L30
-.L32:
+	ldr	x19, [x3,#:lo12:.LANCHOR0+528]
+.L39:
+	cbnz	w1, .L40
+.L42:
 	sub	x19, x20, x19
 	mov	x1, -6148914691236517206
 	asr	x19, x19, 1
@@ -225,17 +252,17 @@ _list_pop_index_node:
 	mov	w0, -1
 	strh	w0, [x20]
 	strh	w0, [x20,2]
-	b	.L28
-.L30:
+	b	.L38
+.L40:
 	ldrh	w3, [x20]
 	cmp	w3, w4
-	beq	.L32
+	beq	.L42
 	umull	x20, w3, w5
 	sub	w1, w1, #1
 	add	x20, x19, x20
 	uxth	w1, w1
-	b	.L29
-.L28:
+	b	.L39
+.L38:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -284,52 +311,52 @@ zftl_debug_proc_show:
 	.global	zftl_flash_suspend
 	.type	zftl_flash_suspend, %function
 zftl_flash_suspend:
-	adrp	x1, .LANCHOR0
-	add	x0, x1, :lo12:.LANCHOR0
-	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,516]
 	cmp	w1, 9
-	ldr	x1, [x0,16]
+	ldr	x1, [x0,536]
 	ldr	w2, [x1]
-	str	w2, [x0,24]
+	str	w2, [x0,544]
 	ldr	w2, [x1,4]
-	str	w2, [x0,28]
-	bne	.L37
+	str	w2, [x0,548]
+	bne	.L47
 	ldr	w2, [x1,16]
-	str	w2, [x0,32]
+	str	w2, [x0,552]
 	ldr	w2, [x1,32]
-	str	w2, [x0,36]
+	str	w2, [x0,556]
 	ldr	w2, [x1,80]
-	str	w2, [x0,40]
+	str	w2, [x0,560]
 	ldr	w2, [x1,84]
-	str	w2, [x0,44]
+	str	w2, [x0,564]
 	ldr	w2, [x1,520]
-	str	w2, [x0,48]
+	str	w2, [x0,568]
 	ldr	w1, [x1,8]
-	b	.L39
-.L37:
+	b	.L49
+.L47:
 	ldr	w2, [x1,8]
-	str	w2, [x0,32]
+	str	w2, [x0,552]
 	ldr	w2, [x1,12]
-	str	w2, [x0,36]
+	str	w2, [x0,556]
 	ldr	w2, [x1,304]
-	str	w2, [x0,40]
+	str	w2, [x0,560]
 	ldr	w2, [x1,308]
-	str	w2, [x0,44]
+	str	w2, [x0,564]
 	ldr	w2, [x1,336]
 	ldr	w1, [x1,344]
-	str	w2, [x0,48]
-.L39:
-	str	w1, [x0,52]
+	str	w2, [x0,568]
+.L49:
+	str	w1, [x0,572]
 	ret
 	.size	zftl_flash_suspend, .-zftl_flash_suspend
 	.align	2
 	.type	nandc_irq_disable, %function
 nandc_irq_disable:
-	adrp	x2, .LANCHOR0
-	ldrb	w2, [x2,#:lo12:.LANCHOR0]
+	adrp	x2, .LANCHOR0+516
+	ldrb	w2, [x2,#:lo12:.LANCHOR0+516]
 	cmp	w2, 9
 	mov	x2, 1
-	bne	.L41
+	bne	.L51
 	ldr	w3, [x0,292]
 	lsl	x1, x2, x1
 	orr	w2, w3, w1
@@ -337,8 +364,8 @@ nandc_irq_disable:
 	ldr	w2, [x0,288]
 	bic	w1, w2, w1
 	str	w1, [x0,288]
-	b	.L40
-.L41:
+	b	.L50
+.L51:
 	ldr	w3, [x0,368]
 	lsl	x1, x2, x1
 	orr	w2, w3, w1
@@ -346,7 +373,7 @@ nandc_irq_disable:
 	ldr	w2, [x0,364]
 	bic	w1, w2, w1
 	str	w1, [x0,364]
-.L40:
+.L50:
 	ret
 	.size	nandc_irq_disable, .-nandc_irq_disable
 	.align	2
@@ -356,182 +383,196 @@ _insert_free_list:
 	uxth	w1, w1
 	add	x6, x3, :lo12:.LANCHOR0
 	mov	x10, x3
-	ldrh	w4, [x6,56]
+	ldrh	w4, [x6,576]
 	cmp	w4, w1
-	bls	.L43
+	bls	.L53
 	ldrh	w3, [x2]
-	mov	w5, 6
+	mov	w7, 6
 	add	w3, w3, 1
 	strh	w3, [x2]
-	umull	x11, w1, w5
-	ldr	x12, [x6,8]
+	umull	x11, w1, w7
+	ldr	x12, [x6,528]
 	mov	w2, -1
-	add	x7, x12, x11
-	strh	w2, [x7,2]
+	add	x5, x12, x11
+	strh	w2, [x5,2]
 	strh	w2, [x12,x11]
 	ldr	x2, [x0]
-	cbz	x2, .L50
-	ldr	x9, [x6,64]
+	cbz	x2, .L60
+	ldr	x9, [x6,584]
 	ubfiz	x8, x1, 2, 16
-	ldr	x13, [x6,8]
+	ldrh	w13, [x6,592]
+	mov	w16, 65535
+	ldr	x14, [x6,528]
 	mov	x6, -6148914691236517206
-	mov	w15, 65535
 	ldr	w4, [x9,x8]
 	ubfx	x3, x4, 11, 8
 	ldrh	w4, [x9,x8]
-	mov	w8, w5
+	mov	w8, w7
 	ubfx	x4, x4, 0, 11
-	add	w4, w4, w3, lsl 3
-	sub	x3, x2, x13
+	madd	w4, w13, w3, w4
+	sub	x3, x2, x14
 	asr	x3, x3, 1
-	and	w4, w4, 4095
+	uxth	w4, w4
 	madd	x3, x6, x3, x3
 	uxth	w3, w3
-.L48:
-	ubfiz	x14, x3, 2, 16
-	ldr	w5, [x9,x14]
-	ubfx	x6, x5, 11, 8
-	ldrh	w5, [x9,x14]
-	ubfx	x5, x5, 0, 11
-	add	w5, w5, w6, lsl 3
-	and	w5, w5, 4095
-	cmp	w5, w4
-	bcs	.L46
-	ldrh	w5, [x2]
-	cmp	w5, w15
-	bne	.L47
-	strh	w3, [x7,2]
+.L58:
+	ubfiz	x15, x3, 2, 16
+	ldr	w6, [x9,x15]
+	ubfx	x7, x6, 11, 8
+	ldrh	w6, [x9,x15]
+	ubfx	x6, x6, 0, 11
+	madd	w6, w13, w7, w6
+	cmp	w4, w6, uxth
+	bls	.L56
+	ldrh	w6, [x2]
+	cmp	w6, w16
+	bne	.L57
+	strh	w3, [x5,2]
 	strh	w1, [x2]
-	b	.L43
-.L47:
-	umull	x2, w5, w8
-	mov	w3, w5
-	add	x2, x13, x2
-	b	.L48
-.L46:
+	b	.L53
+.L57:
+	umull	x2, w6, w8
+	mov	w3, w6
+	add	x2, x14, x2
+	b	.L58
+.L56:
 	ldrh	w4, [x2,2]
-	strh	w4, [x7,2]
+	strh	w4, [x5,2]
 	strh	w3, [x12,x11]
 	ldr	x3, [x0]
 	cmp	x2, x3
-	bne	.L49
+	bne	.L59
 	strh	w1, [x2,2]
-.L50:
-	str	x7, [x0]
-	b	.L43
-.L49:
+.L60:
+	str	x5, [x0]
+	b	.L53
+.L59:
 	ldrh	w0, [x2,2]
 	add	x3, x10, :lo12:.LANCHOR0
 	mov	w4, 6
-	ldr	x3, [x3,8]
+	ldr	x3, [x3,528]
 	umull	x0, w0, w4
 	strh	w1, [x3,x0]
 	strh	w1, [x2,2]
-.L43:
+.L53:
 	ret
 	.size	_insert_free_list, .-_insert_free_list
 	.align	2
 	.type	_insert_data_list, %function
 _insert_data_list:
-	sub	sp, sp, #16
-	adrp	x3, .LANCHOR0
-	add	x4, x3, :lo12:.LANCHOR0
+	sub	sp, sp, #32
+	adrp	x5, .LANCHOR0
+	add	x10, x5, :lo12:.LANCHOR0
 	uxth	w1, w1
-	mov	x10, x3
-	str	x19, [sp]
-	ldrh	w5, [x4,56]
-	cmp	w5, w1
-	bls	.L51
+	stp	x19, x20, [sp]
+	str	x21, [sp,16]
+	ldrh	w3, [x10,576]
+	cmp	w3, w1
+	bls	.L61
 	ldrh	w3, [x2]
-	mov	w9, 6
+	mov	w8, 6
 	add	w3, w3, 1
 	strh	w3, [x2]
-	umull	x11, w1, w9
-	ldr	x12, [x4,8]
+	umull	x8, w1, w8
+	ldr	x14, [x10,528]
 	mov	w2, -1
-	add	x6, x12, x11
+	add	x6, x14, x8
 	strh	w2, [x6,2]
-	strh	w2, [x12,x11]
+	strh	w2, [x14,x8]
 	ldr	x2, [x0]
-	cbz	x2, .L66
-	ubfiz	x3, x1, 1, 16
-	ldr	x15, [x4,72]
-	ldr	x14, [x4,8]
-	mov	x5, -6148914691236517206
-	ldrh	w18, [x4,56]
+	cbz	x2, .L81
+	uxtw	x9, w1
+	ldr	x16, [x10,600]
+	ldr	x12, [x10,584]
+	ldrh	w11, [x6,4]
+	ldrh	w4, [x16,x9,lsl 1]
+	lsl	x9, x9, 2
+	ldrh	w17, [x10,592]
+	ldr	w3, [x12,x9]
+	mul	w4, w4, w11
+	ubfx	x7, x3, 11, 8
+	ldrh	w3, [x12,x9]
+	and	w3, w3, 2047
+	cbz	w4, .L65
+	madd	w3, w17, w7, w3
+	add	w4, w4, w3, uxth
+.L65:
+	add	x7, x5, :lo12:.LANCHOR0
+	mov	x9, -6148914691236517206
+	cmp	w11, wzr
+	mov	w20, 65535
+	csinv	w4, w4, wzr, ne
+	mov	w21, 6
+	ldr	x18, [x7,528]
+	ldrh	w19, [x7,576]
 	mov	w7, 0
-	ldrh	w16, [x15,x3]
-	mov	w19, 65535
-	ldrh	w3, [x6,4]
-	ldr	x17, [x4,64]
-	cmp	w3, wzr
-	mul	w13, w16, w3
-	sub	x3, x2, x14
+	sub	x3, x2, x18
 	asr	x3, x3, 1
-	csinv	w13, w13, wzr, ne
-	madd	x3, x5, x3, x3
+	madd	x3, x9, x3, x3
 	uxth	w3, w3
-.L62:
+.L72:
 	add	w7, w7, 1
 	cmp	w1, w3
 	uxth	w7, w7
-	beq	.L51
-	cmp	w7, w18
-	bhi	.L51
-	uxtw	x8, w3
-	ldrh	w5, [x2,4]
-	cmp	w5, wzr
-	ldrh	w4, [x15,x8,lsl 1]
-	mul	w4, w4, w5
-	csinv	w4, w4, wzr, ne
-	cmp	w4, w13
-	bne	.L58
-	lsl	x8, x8, 2
-	ldr	w4, [x17,x8]
-	ubfx	x5, x4, 11, 8
-	ldrh	w4, [x17,x8]
-	ubfx	x4, x4, 0, 11
-	add	w4, w4, w5, lsl 3
-	and	w4, w4, 4095
-	cmp	w4, w16
-	bcc	.L60
-	b	.L59
-.L58:
-	bhi	.L59
-.L60:
-	ldrh	w4, [x2]
-	cmp	w4, w19
-	bne	.L61
+	beq	.L61
+	cmp	w7, w19
+	bhi	.L61
+	uxtw	x11, w3
+	ldrh	w15, [x2,4]
+	ldrh	w13, [x16,x11,lsl 1]
+	lsl	x11, x11, 2
+	ldr	w9, [x12,x11]
+	mul	w13, w13, w15
+	ubfx	x10, x9, 11, 8
+	ldrh	w9, [x12,x11]
+	and	w9, w9, 2047
+	cbz	w13, .L68
+	mov	w11, -1
+	cbz	w15, .L69
+	madd	w9, w17, w10, w9
+	add	w11, w13, w9, uxth
+	b	.L69
+.L68:
+	cbnz	w15, .L74
+	mov	w11, -1
+.L69:
+	cmp	w11, w4
+	bhi	.L70
+.L74:
+	ldrh	w9, [x2]
+	cmp	w9, w20
+	bne	.L71
 	strh	w3, [x6,2]
 	strh	w1, [x2]
-	b	.L51
-.L61:
-	umull	x2, w4, w9
-	mov	w3, w4
-	add	x2, x14, x2
-	b	.L62
-.L59:
+	b	.L61
+.L71:
+	umull	x2, w9, w21
+	mov	w3, w9
+	add	x2, x18, x2
+	b	.L72
+.L70:
 	ldrh	w4, [x2,2]
 	strh	w4, [x6,2]
-	strh	w3, [x12,x11]
+	strh	w3, [x14,x8]
 	ldr	x3, [x0]
 	cmp	x2, x3
-	bne	.L63
+	bne	.L73
 	strh	w1, [x2,2]
-.L66:
+.L81:
 	str	x6, [x0]
-	b	.L51
-.L63:
+	b	.L61
+.L73:
 	ldrh	w0, [x2,2]
-	add	x3, x10, :lo12:.LANCHOR0
-	mov	w4, 6
-	ldr	x3, [x3,8]
-	umull	x0, w0, w4
+	add	x5, x5, :lo12:.LANCHOR0
+	mov	w3, 6
+	umull	x0, w0, w3
+	ldr	x3, [x5,528]
 	strh	w1, [x3,x0]
 	strh	w1, [x2,2]
-.L51:
-	ldr	x19, [sp]
-	add	sp, sp, 16
+.L61:
+	ldp	x19, x20, [sp]
+	ldr	x21, [sp,16]
+	add	sp, sp, 32
 	ret
 	.size	_insert_data_list, .-_insert_data_list
 	.align	2
@@ -539,28 +580,28 @@ _insert_data_list:
 _list_get_gc_head_node.isra.5:
 	uxth	w1, w1
 	mov	w2, 65535
-	cbz	x0, .L73
-	adrp	x2, .LANCHOR0+8
+	cbz	x0, .L88
+	adrp	x2, .LANCHOR0+528
 	mov	w4, 65535
 	mov	w5, 6
-	ldr	x3, [x2,#:lo12:.LANCHOR0+8]
-.L69:
-	cbz	w1, .L70
+	ldr	x3, [x2,#:lo12:.LANCHOR0+528]
+.L84:
+	cbz	w1, .L85
 	ldrh	w2, [x0]
 	cmp	w2, w4
-	beq	.L73
+	beq	.L88
 	umull	x2, w2, w5
 	sub	w1, w1, #1
 	add	x0, x3, x2
 	uxth	w1, w1
-	b	.L69
-.L70:
+	b	.L84
+.L85:
 	sub	x0, x0, x3
 	mov	x1, -6148914691236517206
 	asr	x0, x0, 1
 	madd	x0, x1, x0, x0
 	uxth	w2, w0
-.L73:
+.L88:
 	mov	w0, w2
 	ret
 	.size	_list_get_gc_head_node.isra.5, .-_list_get_gc_head_node.isra.5
@@ -577,53 +618,54 @@ _list_update_data_list:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	mov	x20, x1
-	ldr	x3, [x4,80]
+	ldr	x3, [x4,608]
 	ldrh	w5, [x3,16]
 	cmp	w5, w19
-	beq	.L74
+	beq	.L89
 	ldrh	w1, [x3,48]
 	cmp	w1, w19
-	beq	.L74
+	beq	.L89
 	ldrh	w1, [x3,80]
 	cmp	w1, w19
-	beq	.L74
+	beq	.L89
 	mov	w23, 6
-	ldr	x25, [x4,8]
+	ldr	x25, [x4,528]
 	ldr	x1, [x0]
 	umull	x23, w19, w23
 	add	x24, x25, x23
 	cmp	x24, x1
-	beq	.L74
+	beq	.L89
 	mov	x21, x0
 	ldrh	w0, [x24,2]
 	mov	w1, 65535
 	mov	x22, x2
 	cmp	w0, w1
-	bne	.L78
+	bne	.L93
 	ldrh	w1, [x25,x23]
 	cmp	w1, w0
-	bne	.L78
+	bne	.L93
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
+	mov	w2, 255
 	add	x1, x1, 24
-	mov	w2, 251
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L78:
+	bl	dump_stack
+.L93:
 	ldrh	w3, [x24,2]
 	mov	w0, 65535
 	cmp	w3, w0
-	bne	.L79
+	bne	.L94
 	ldrh	w0, [x25,x23]
 	cmp	w0, w3
-	beq	.L74
-.L79:
+	beq	.L89
+.L94:
 	add	x1, x20, :lo12:.LANCHOR0
 	ubfiz	x0, x19, 1, 16
 	mov	x5, -6148914691236517206
-	ldr	x4, [x1,72]
-	ldr	x1, [x1,8]
+	ldr	x4, [x1,600]
+	ldr	x1, [x1,528]
 	ldrh	w2, [x4,x0]
 	ldrh	w0, [x24,4]
 	cmp	w0, wzr
@@ -640,7 +682,7 @@ _list_update_data_list:
 	mul	w0, w0, w1
 	csinv	w0, w0, wzr, ne
 	cmp	w2, w0
-	bcs	.L74
+	bcs	.L89
 	mov	x0, x21
 	mov	w1, w19
 	mov	x2, x22
@@ -649,7 +691,7 @@ _list_update_data_list:
 	mov	w1, w19
 	mov	x2, x22
 	bl	_insert_data_list
-.L74:
+.L89:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -657,10 +699,22 @@ _list_update_data_list:
 	ldp	x29, x30, [sp], 80
 	ret
 	.size	_list_update_data_list, .-_list_update_data_list
+	.align	2
+	.type	zftl_get_gc_node.part.12, %function
+zftl_get_gc_node.part.12:
+	uxth	w1, w0
+	adrp	x0, .LANCHOR0+616
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x0,#:lo12:.LANCHOR0+616]
+	bl	_list_get_gc_head_node.isra.5
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_get_gc_node.part.12, .-zftl_get_gc_node.part.12
 	.section	.text.unlikely
 	.align	2
-	.type	rk_simple_strtoull.constprop.34, %function
-rk_simple_strtoull.constprop.34:
+	.type	rk_simple_strtoull.constprop.31, %function
+rk_simple_strtoull.constprop.31:
 	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
@@ -670,56 +724,56 @@ rk_simple_strtoull.constprop.34:
 	mov	x23, x1
 	ldrb	w0, [x0]
 	cmp	w0, 48
-	bne	.L95
+	bne	.L111
 	ldrb	w0, [x20,1]
 	add	x19, x20, 1
 	mov	w21, 8
 	orr	w0, w0, 32
 	uxtb	w0, w0
 	cmp	w0, 120
-	bne	.L85
+	bne	.L101
 	ldrb	w0, [x20,2]
 	bl	isxdigit
-	cbz	w0, .L85
+	cbz	w0, .L101
 	add	x19, x20, 2
 	mov	w21, 16
-	b	.L85
-.L95:
+	b	.L101
+.L111:
 	mov	x19, x20
 	mov	w21, 10
-.L85:
+.L101:
 	mov	w22, 0
-.L86:
+.L102:
 	ldrb	w20, [x19]
 	mov	w0, w20
 	bl	isxdigit
-	cbnz	w0, .L87
-.L93:
-	cbz	x23, .L99
+	cbnz	w0, .L103
+.L109:
+	cbz	x23, .L115
 	str	x19, [x23]
-	b	.L99
-.L87:
+	b	.L115
+.L103:
 	sub	w2, w20, #48
 	cmp	w2, 9
-	bhi	.L100
-.L94:
+	bhi	.L116
+.L110:
 	cmp	w2, w21
-	bcs	.L93
+	bcs	.L109
 	madd	w22, w22, w21, w2
 	add	x19, x19, 1
-	b	.L86
-.L100:
+	b	.L102
+.L116:
 	orr	w20, w20, 32
 	sub	w2, w20, #87
-	b	.L94
-.L99:
+	b	.L110
+.L115:
 	mov	w0, w22
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 64
 	ret
-	.size	rk_simple_strtoull.constprop.34, .-rk_simple_strtoull.constprop.34
+	.size	rk_simple_strtoull.constprop.31, .-rk_simple_strtoull.constprop.31
 	.text
 	.align	2
 	.global	nand_flash_print_info
@@ -730,18 +784,18 @@ nand_flash_print_info:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR2
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L102
+	tbz	x0, 12, .L118
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC4
 	add	x1, x1, :lo12:.LANCHOR1
 	add	x0, x0, :lo12:.LC4
 	add	x1, x1, 48
 	bl	printk
-.L102:
+.L118:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L103
-	adrp	x0, .LANCHOR0+88
-	ldr	x6, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L119
+	adrp	x0, .LANCHOR0+624
+	ldr	x6, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC5
 	add	x0, x0, :lo12:.LC5
 	ldrb	w1, [x6,1]
@@ -751,278 +805,278 @@ nand_flash_print_info:
 	ldrb	w5, [x6,5]
 	ldrb	w6, [x6,6]
 	bl	printk
-.L103:
+.L119:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L104
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L120
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC6
 	add	x0, x0, :lo12:.LC6
 	ldrb	w1, [x1,8]
 	bl	printk
-.L104:
+.L120:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L105
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L121
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC7
 	add	x0, x0, :lo12:.LC7
 	ldrb	w1, [x1,9]
 	bl	printk
-.L105:
+.L121:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L106
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L122
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC8
 	add	x0, x0, :lo12:.LC8
 	ldrh	w1, [x1,10]
 	bl	printk
-.L106:
+.L122:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L107
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L123
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC9
 	add	x0, x0, :lo12:.LC9
 	ldrb	w1, [x1,12]
 	bl	printk
-.L107:
+.L123:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L108
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L124
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC10
 	add	x0, x0, :lo12:.LC10
 	ldrb	w1, [x1,13]
 	bl	printk
-.L108:
+.L124:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L109
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L125
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC11
 	add	x0, x0, :lo12:.LC11
 	ldrh	w1, [x1,14]
 	bl	printk
-.L109:
+.L125:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L110
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L126
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC12
 	add	x0, x0, :lo12:.LC12
 	ldrb	w1, [x1,23]
 	bl	printk
-.L110:
+.L126:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L111
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L127
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC13
 	add	x0, x0, :lo12:.LC13
 	ldrb	w1, [x1,18]
 	bl	printk
-.L111:
+.L127:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L112
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L128
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC14
 	add	x0, x0, :lo12:.LC14
 	ldrb	w1, [x1,19]
 	bl	printk
-.L112:
+.L128:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L113
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L129
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC15
 	add	x0, x0, :lo12:.LC15
 	ldrb	w1, [x1,20]
 	bl	printk
-.L113:
+.L129:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L114
-	adrp	x1, .LANCHOR0+96
+	tbz	x0, 12, .L130
+	adrp	x1, .LANCHOR0+632
 	adrp	x0, .LC16
 	add	x0, x0, :lo12:.LC16
-	ldrb	w1, [x1,#:lo12:.LANCHOR0+96]
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+632]
 	bl	printk
-.L114:
+.L130:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L115
-	adrp	x1, .LANCHOR0+97
+	tbz	x0, 12, .L131
+	adrp	x1, .LANCHOR0
 	adrp	x0, .LC17
 	add	x0, x0, :lo12:.LC17
-	ldrb	w1, [x1,#:lo12:.LANCHOR0+97]
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
 	bl	printk
-.L115:
+.L131:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L116
-	adrp	x0, .LANCHOR0+88
-	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L132
+	adrp	x0, .LANCHOR0+624
+	ldr	x1, [x0,#:lo12:.LANCHOR0+624]
 	adrp	x0, .LC18
 	add	x0, x0, :lo12:.LC18
 	ldrb	w1, [x1,22]
 	bl	printk
-.L116:
+.L132:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L117
-	adrp	x1, .LANCHOR0+98
+	tbz	x0, 12, .L133
+	adrp	x1, .LANCHOR0+633
 	adrp	x0, .LC19
 	add	x0, x0, :lo12:.LC19
-	ldrb	w1, [x1,#:lo12:.LANCHOR0+98]
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+633]
 	bl	printk
-.L117:
+.L133:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L118
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L134
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC20
 	add	x0, x0, :lo12:.LC20
 	and	w1, w1, 1
 	bl	printk
-.L118:
+.L134:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L119
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L135
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC21
 	add	x0, x0, :lo12:.LC21
 	ubfx	x1, x1, 1, 1
 	bl	printk
-.L119:
+.L135:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L120
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L136
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC22
 	add	x0, x0, :lo12:.LC22
 	ubfx	x1, x1, 2, 1
 	bl	printk
-.L120:
+.L136:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L121
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L137
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC23
 	add	x0, x0, :lo12:.LC23
 	ubfx	x1, x1, 3, 1
 	bl	printk
-.L121:
+.L137:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L122
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L138
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC24
 	add	x0, x0, :lo12:.LC24
 	ubfx	x1, x1, 4, 1
 	bl	printk
-.L122:
+.L138:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L123
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L139
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC25
 	add	x0, x0, :lo12:.LC25
 	ubfx	x1, x1, 5, 1
 	bl	printk
-.L123:
+.L139:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L124
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L140
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC26
 	add	x0, x0, :lo12:.LC26
 	ubfx	x1, x1, 6, 1
 	bl	printk
-.L124:
+.L140:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L125
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L141
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC27
 	add	x0, x0, :lo12:.LC27
 	ubfx	x1, x1, 7, 1
 	bl	printk
-.L125:
+.L141:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L126
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L142
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrb	w1, [x0,17]
 	adrp	x0, .LC28
 	add	x0, x0, :lo12:.LC28
 	and	w1, w1, 1
 	bl	printk
-.L126:
+.L142:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L127
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L143
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC29
 	add	x0, x0, :lo12:.LC29
 	ubfx	x1, x1, 9, 1
 	bl	printk
-.L127:
+.L143:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L128
-	adrp	x0, .LANCHOR0+88
-	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	tbz	x0, 12, .L144
+	adrp	x0, .LANCHOR0+624
+	ldr	x0, [x0,#:lo12:.LANCHOR0+624]
 	ldrh	w1, [x0,16]
 	adrp	x0, .LC30
 	add	x0, x0, :lo12:.LC30
 	ubfx	x1, x1, 10, 1
 	bl	printk
-.L128:
+.L144:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L129
-	adrp	x1, .LANCHOR0+97
+	tbz	x0, 12, .L145
+	adrp	x1, .LANCHOR0
 	adrp	x0, .LC17
 	add	x0, x0, :lo12:.LC17
-	ldrb	w1, [x1,#:lo12:.LANCHOR0+97]
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
 	bl	printk
-.L129:
+.L145:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L130
+	tbz	x0, 12, .L146
 	adrp	x2, .LANCHOR0
 	adrp	x0, .LC31
 	add	x2, x2, :lo12:.LANCHOR0
 	add	x0, x0, :lo12:.LC31
-	add	x2, x2, 104
+	add	x2, x2, 640
 	ldrb	w1, [x2,10]
 	ldrb	w2, [x2,11]
 	bl	printk
-.L130:
+.L146:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L131
+	tbz	x0, 12, .L147
 	adrp	x2, .LANCHOR0
 	adrp	x0, .LC32
 	add	x2, x2, :lo12:.LANCHOR0
 	add	x0, x0, :lo12:.LC32
-	add	x2, x2, 104
+	add	x2, x2, 640
 	ldrb	w1, [x2,8]
 	ldrb	w2, [x2,9]
 	bl	printk
-.L131:
+.L147:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L101
-	adrp	x1, .LANCHOR0+136
+	tbz	x0, 12, .L117
+	adrp	x1, .LANCHOR0+672
 	adrp	x0, .LC33
 	add	x0, x0, :lo12:.LC33
-	ldrb	w1, [x1,#:lo12:.LANCHOR0+136]
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+672]
 	bl	printk
-.L101:
+.L117:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -1039,7 +1093,7 @@ nandc_init:
 	stp	x19, x20, [sp,16]
 	str	wzr, [x29,56]
 	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L227
+	tbz	x0, 12, .L243
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC34
 	add	x1, x1, :lo12:.LANCHOR1
@@ -1047,45 +1101,51 @@ nandc_init:
 	add	x1, x1, 72
 	mov	x2, x22
 	bl	printk
-.L227:
-	adrp	x19, .LANCHOR0
-	mov	w1, 6
-	add	x0, x19, :lo12:.LANCHOR0
-	strb	w1, [x19,#:lo12:.LANCHOR0]
-	str	x22, [x0,16]
-	mov	w0, 12336
-	ldr	w1, [x22,352]
-	movk	w0, 0x5638, lsl 16
-	cmp	w1, w0
-	bne	.L228
-	mov	w0, 8
-	strb	w0, [x19,#:lo12:.LANCHOR0]
-.L228:
+.L243:
+	adrp	x1, .LANCHOR0
+	mov	w2, 6
+	add	x0, x1, :lo12:.LANCHOR0
+	ldr	w3, [x22,352]
+	mov	x20, x1
+	strb	w2, [x0,516]
+	mov	w2, 12336
+	movk	w2, 0x5638, lsl 16
+	str	x22, [x0,536]
+	cmp	w3, w2
+	bne	.L244
+	mov	w1, 8
+	strb	w1, [x0,516]
+.L244:
 	ldr	w1, [x22,128]
 	mov	w0, 12336
 	movk	w0, 0x5639, lsl 16
 	cmp	w1, w0
-	bne	.L229
-	mov	w0, 9
-	strb	w0, [x19,#:lo12:.LANCHOR0]
-.L229:
-	ldrb	w0, [x19,#:lo12:.LANCHOR0]
-	add	x20, x19, :lo12:.LANCHOR0
+	bne	.L245
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w1, 9
+	strb	w1, [x0,516]
+.L245:
+	add	x19, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x19,516]
 	cmp	w0, 9
-	bne	.L230
+	bne	.L246
 	mov	w0, 1
-	strb	w0, [x20,137]
+	strb	w0, [x19,673]
 	ldr	w0, [x29,56]
-	mov	w1, 4225
+	mov	w1, 2
 	orr	w0, w0, 256
 	str	w0, [x29,56]
 	ldr	w0, [x29,56]
+	bfi	w0, w1, 18, 3
+	str	w0, [x29,56]
+	mov	w1, 4161
+	ldr	w0, [x29,56]
 	str	w0, [x22]
-	ldr	x0, [x20,16]
+	ldr	x0, [x19,536]
 	str	wzr, [x0,520]
 	str	w1, [x0,4]
 	mov	w1, 8321
-	ldr	x0, [x20,16]
+	ldr	x0, [x19,536]
 	str	w1, [x0,8]
 	mov	w1, 4099
 	movk	w1, 0x10, lsl 16
@@ -1095,26 +1155,30 @@ nandc_init:
 	mov	w1, 39
 	str	w1, [x0,84]
 	ldr	w1, [x21,#:lo12:.LANCHOR2]
-	tbz	x1, 12, .L232
+	tbz	x1, 12, .L248
 	ldr	w1, [x0]
 	ldr	w2, [x0,8]
 	ldr	w3, [x0,80]
 	ldr	w4, [x0,84]
 	ldr	w5, [x0,88]
-	b	.L244
-.L230:
+	b	.L260
+.L246:
 	ldr	w0, [x29,56]
-	mov	w1, 4225
-	strb	wzr, [x20,137]
+	mov	w1, 1
+	strb	wzr, [x19,673]
 	orr	w0, w0, 256
 	str	w0, [x29,56]
 	ldr	w0, [x29,56]
+	bfi	w0, w1, 24, 3
+	str	w0, [x29,56]
+	mov	w1, 4193
+	ldr	w0, [x29,56]
 	str	w0, [x22]
-	ldr	x0, [x20,16]
+	ldr	x0, [x19,536]
 	str	wzr, [x0,336]
 	str	w1, [x0,4]
 	mov	w1, 8321
-	ldr	x0, [x20,16]
+	ldr	x0, [x19,536]
 	str	w1, [x0,344]
 	mov	w1, 4099
 	movk	w1, 0x10, lsl 16
@@ -1125,33 +1189,32 @@ nandc_init:
 	str	w1, [x0,308]
 	mov	w0, 2048
 	bl	ftl_malloc
-	str	x0, [x20,144]
+	str	x0, [x19,680]
 	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L232
-	ldr	x0, [x20,16]
+	tbz	x0, 12, .L248
+	ldr	x0, [x19,536]
 	ldr	w1, [x0]
 	ldr	w2, [x0,344]
 	ldr	w3, [x0,304]
 	ldr	w4, [x0,308]
 	ldr	w5, [x0,312]
-.L244:
+.L260:
 	adrp	x0, .LC35
 	add	x0, x0, :lo12:.LC35
 	bl	printk
-.L232:
-	add	x19, x19, :lo12:.LANCHOR0
+.L248:
+	add	x1, x20, :lo12:.LANCHOR0
 	mov	w0, 1
-	strb	w0, [x19,184]
+	strb	w0, [x1,720]
 	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	strh	wzr, [x19,186]
-	strb	wzr, [x19,188]
-	tbz	x0, 12, .L226
-	adrp	x1, .LANCHOR0
+	strh	wzr, [x1,722]
+	strb	wzr, [x1,724]
+	tbz	x0, 12, .L242
 	adrp	x0, .LC36
+	ldrb	w1, [x1,516]
 	add	x0, x0, :lo12:.LC36
-	ldrb	w1, [x1,#:lo12:.LANCHOR0]
 	bl	printk
-.L226:
+.L242:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 64
@@ -1164,11 +1227,11 @@ timer_delay_ns:
 	sub	sp, sp, #16
 	lsr	w0, w0, 4
 	str	w0, [sp,12]
-.L246:
+.L262:
 	ldr	w0, [sp,12]
 	sub	w1, w0, #1
 	str	w1, [sp,12]
-	cbnz	w0, .L246
+	cbnz	w0, .L262
 	add	sp, sp, 16
 	ret
 	.size	timer_delay_ns, .-timer_delay_ns
@@ -1217,34 +1280,34 @@ toshiba_set_rr_para:
 	adrp	x26, .LANCHOR0
 	mov	w27, 85
 	mov	x19, x2
-.L250:
+.L266:
 	add	x25, x26, :lo12:.LANCHOR0
-	ldrb	w0, [x25,190]
+	ldrb	w0, [x25,726]
 	cmp	w0, w20
-	bls	.L256
+	bls	.L272
 	add	x0, x19, 88
 	str	w27, [x22,8]
 	ldrsb	w0, [x20,x0]
 	str	w0, [x22,4]
 	mov	w0, 200
 	bl	timer_delay_ns
-	ldrb	w0, [x25,189]
+	ldrb	w0, [x25,725]
 	cmp	w0, 34
-	bne	.L251
+	bne	.L267
 	ldrsb	w0, [x24,x20]
-	b	.L255
-.L251:
+	b	.L271
+.L267:
 	cmp	w0, 35
-	bne	.L253
+	bne	.L269
 	ldrsb	w0, [x21,x20]
-	b	.L255
-.L253:
+	b	.L271
+.L269:
 	ldrsb	w0, [x23,232]
-.L255:
+.L271:
 	str	w0, [x22]
 	add	x20, x20, 1
-	b	.L250
-.L256:
+	b	.L266
+.L272:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -1267,8 +1330,8 @@ hynix_set_rr_para:
 	str	x23, [sp,48]
 	mov	x20, 160
 	mov	x21, 0
-	ldr	x4, [x3,192]
-	ldr	x19, [x3,16]
+	ldr	x4, [x3,728]
+	ldr	x19, [x3,536]
 	add	x23, x4, 128
 	ldrb	w22, [x4,113]
 	mul	w2, w1, w22
@@ -1281,9 +1344,9 @@ hynix_set_rr_para:
 	add	x20, x4, x1
 	add	x20, x20, 144
 	str	w0, [x19,2056]
-.L258:
+.L274:
 	cmp	w22, w21, uxtb
-	bls	.L260
+	bls	.L276
 	ldrb	w0, [x23,x21]
 	str	w0, [x19,2052]
 	mov	w0, 120
@@ -1291,8 +1354,8 @@ hynix_set_rr_para:
 	ldrsb	w0, [x20,x21]
 	add	x21, x21, 1
 	str	w0, [x19,2048]
-	b	.L258
-.L260:
+	b	.L274
+.L276:
 	mov	w0, 22
 	str	w0, [x19,2056]
 	ldp	x19, x20, [sp,16]
@@ -1311,22 +1374,22 @@ hynix_reconfig_rr_para:
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x19,189]
+	ldrb	w1, [x19,725]
 	sub	w1, w1, #1
 	uxtb	w1, w1
 	cmp	w1, 6
-	bhi	.L261
-	ldr	x1, [x19,192]
+	bhi	.L277
+	ldr	x1, [x19,728]
 	sxtw	x20, w0
 	add	x1, x1, x20
 	ldrb	w1, [x1,120]
-	cbz	w1, .L261
+	cbz	w1, .L277
 	mov	w1, 0
 	bl	hynix_set_rr_para
-	ldr	x0, [x19,192]
+	ldr	x0, [x19,728]
 	add	x20, x0, x20
 	strb	wzr, [x20,120]
-.L261:
+.L277:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -1337,37 +1400,37 @@ hynix_reconfig_rr_para:
 nandc_set_ddr_para:
 	adrp	x1, .LANCHOR0
 	uxtb	w0, w0
-	add	x2, x1, :lo12:.LANCHOR0
-	ldrb	w1, [x1,#:lo12:.LANCHOR0]
-	ldr	x2, [x2,16]
-	cmp	w1, 9
-	lsl	w1, w0, 16
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrb	w2, [x1,516]
+	ldr	x1, [x1,536]
+	cmp	w2, 9
+	lsl	w2, w0, 16
 	lsl	w0, w0, 8
-	orr	w0, w1, w0
+	orr	w0, w2, w0
 	orr	w0, w0, 3
-	bne	.L267
-	str	w0, [x2,80]
-	b	.L266
-.L267:
-	str	w0, [x2,304]
-.L266:
+	bne	.L283
+	str	w0, [x1,80]
+	b	.L282
+.L283:
+	str	w0, [x1,304]
+.L282:
 	ret
 	.size	nandc_set_ddr_para, .-nandc_set_ddr_para
 	.align	2
 	.global	nandc_get_ddr_para
 	.type	nandc_get_ddr_para, %function
 nandc_get_ddr_para:
-	adrp	x1, .LANCHOR0
-	add	x0, x1, :lo12:.LANCHOR0
-	ldrb	w1, [x1,#:lo12:.LANCHOR0]
-	ldr	x0, [x0,16]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,516]
+	ldr	x0, [x0,536]
 	cmp	w1, 9
-	bne	.L270
+	bne	.L286
 	ldr	w0, [x0,80]
-	b	.L272
-.L270:
+	b	.L288
+.L286:
 	ldr	w0, [x0,304]
-.L272:
+.L288:
 	ubfx	x0, x0, 8, 8
 	ret
 	.size	nandc_get_ddr_para, .-nandc_get_ddr_para
@@ -1377,22 +1440,22 @@ nandc_get_ddr_para:
 nandc_set_if_mode:
 	adrp	x3, .LANCHOR0
 	uxtb	w0, w0
-	add	x1, x3, :lo12:.LANCHOR0
+	add	x3, x3, :lo12:.LANCHOR0
 	tst	w0, 6
-	ldr	x2, [x1,16]
+	ldr	x2, [x3,536]
 	ldr	w1, [x2]
-	beq	.L274
+	beq	.L290
 	orr	w1, w1, 24576
 	and	w0, w0, 4
 	and	w1, w1, -32769
 	cmp	w0, wzr
 	orr	w1, w1, 196608
-	ldrb	w0, [x3,#:lo12:.LANCHOR0]
+	ldrb	w0, [x3,516]
 	orr	w4, w1, 32768
 	csel	w1, w4, w1, ne
 	cmp	w0, 9
 	mov	w0, 8321
-	bne	.L276
+	bne	.L292
 	str	w0, [x2,8]
 	mov	w0, 4099
 	movk	w0, 0x10, lsl 16
@@ -1401,8 +1464,8 @@ nandc_set_if_mode:
 	str	w0, [x2,84]
 	mov	w0, 39
 	str	w0, [x2,84]
-	b	.L277
-.L276:
+	b	.L293
+.L292:
 	str	w0, [x2,344]
 	mov	w0, 4099
 	movk	w0, 0x10, lsl 16
@@ -1411,10 +1474,10 @@ nandc_set_if_mode:
 	str	w0, [x2,308]
 	mov	w0, 39
 	str	w0, [x2,308]
-	b	.L277
-.L274:
+	b	.L293
+.L290:
 	and	w1, w1, -8193
-.L277:
+.L293:
 	str	w1, [x2]
 	ret
 	.size	nandc_set_if_mode, .-nandc_set_if_mode
@@ -1422,10 +1485,10 @@ nandc_set_if_mode:
 	.global	nandc_cs
 	.type	nandc_cs, %function
 nandc_cs:
-	adrp	x1, .LANCHOR0+16
+	adrp	x1, .LANCHOR0+536
 	mov	w2, 1
 	lsl	w0, w2, w0
-	ldr	x3, [x1,#:lo12:.LANCHOR0+16]
+	ldr	x3, [x1,#:lo12:.LANCHOR0+536]
 	ldr	w1, [x3]
 	bfi	w1, w0, 0, 8
 	str	w1, [x3]
@@ -1435,8 +1498,8 @@ nandc_cs:
 	.global	nandc_de_cs
 	.type	nandc_de_cs, %function
 nandc_de_cs:
-	adrp	x0, .LANCHOR0+16
-	ldr	x1, [x0,#:lo12:.LANCHOR0+16]
+	adrp	x0, .LANCHOR0+536
+	ldr	x1, [x0,#:lo12:.LANCHOR0+536]
 	ldr	w0, [x1]
 	and	w0, w0, -256
 	and	w0, w0, -131073
@@ -1458,31 +1521,32 @@ flash_wait_device_ready_raw:
 	stp	x25, x26, [sp,64]
 	mov	w20, w1
 	mov	w22, w2
-	ldrb	w0, [x0,98]
+	ldrb	w0, [x0,633]
 	mov	x19, x3
 	cmp	w0, w21
-	bhi	.L283
+	bhi	.L299
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 240
 	mov	w2, 599
+	add	x1, x1, 240
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L283:
+	bl	dump_stack
+.L299:
 	add	x3, x19, :lo12:.LANCHOR0
 	add	x21, x3, x21, sxtw
-	ldrb	w23, [x21,200]
+	ldrb	w23, [x21,736]
 	lsr	w24, w20, 8
 	lsr	w25, w20, 16
 	mov	w26, 120
 	mov	w0, w23
-	ldr	x19, [x3,16]
+	ldr	x19, [x3,536]
 	and	w21, w20, 255
 	bl	nandc_cs
 	ubfiz	x3, x23, 8, 8
 	add	x19, x19, x3
-.L285:
+.L301:
 	str	w26, [x19,2056]
 	mov	w0, 120
 	str	w21, [x19,2052]
@@ -1493,9 +1557,9 @@ flash_wait_device_ready_raw:
 	and	w20, w20, 255
 	and	w0, w22, w20
 	cmp	w0, w22
-	bne	.L285
+	bne	.L301
 	cmp	w20, 255
-	beq	.L285
+	beq	.L301
 	mov	w0, w23
 	bl	nandc_de_cs
 	mov	w0, w20
@@ -1516,26 +1580,26 @@ flash_wait_device_ready:
 	add	x29, sp, 0
 	and	w1, w0, 2097151
 	ubfx	x6, x0, 21, 3
-	cbnz	w3, .L287
-	adrp	x4, .LANCHOR0
-	add	x3, x4, :lo12:.LANCHOR0
-	ldrb	w0, [x3,97]
-	cbz	w0, .L288
-	ldrb	w0, [x3,208]
-	cbz	w0, .L287
-.L288:
-	add	x4, x4, :lo12:.LANCHOR0
-	ldrh	w5, [x4,210]
-	ldrb	w0, [x4,208]
-	udiv	w3, w1, w5
-	mul	w5, w3, w5
-	sub	w3, w1, w5
-	add	w1, w5, w3, lsl 1
-	cbnz	w0, .L287
-	add	x4, x4, 212
-	ldrh	w3, [x4,w3,uxtw 1]
+	cbnz	w3, .L303
+	adrp	x3, .LANCHOR0
+	add	x0, x3, :lo12:.LANCHOR0
+	ldrb	w4, [x3,#:lo12:.LANCHOR0]
+	cbz	w4, .L304
+	ldrb	w0, [x0,1]
+	cbz	w0, .L303
+.L304:
+	add	x3, x3, :lo12:.LANCHOR0
+	ldrh	w5, [x3,2]
+	ldrb	w0, [x3,1]
+	udiv	w4, w1, w5
+	mul	w5, w4, w5
+	sub	w4, w1, w5
+	add	w1, w5, w4, lsl 1
+	cbnz	w0, .L303
+	add	x3, x3, 4
+	ldrh	w3, [x3,w4,uxtw 1]
 	add	w1, w3, w5
-.L287:
+.L303:
 	mov	w0, w6
 	bl	flash_wait_device_ready_raw
 	ldp	x29, x30, [sp], 16
@@ -1551,22 +1615,22 @@ nandc_wait_flash_ready:
 	mov	w19, 34464
 	adrp	x20, .LANCHOR0
 	movk	w19, 0x1, lsl 16
-.L298:
+.L314:
 	mov	w0, 100
 	bl	timer_delay_ns
 	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,16]
+	ldr	x0, [x0,536]
 	ldr	w0, [x0]
 	str	w0, [x29,40]
 	ldr	w0, [x29,40]
-	tbnz	x0, 9, .L299
+	tbnz	x0, 9, .L315
 	subs	w19, w19, #1
-	bne	.L298
+	bne	.L314
 	mov	w0, -1
-	b	.L297
-.L299:
+	b	.L313
+.L315:
 	mov	w0, 0
-.L297:
+.L313:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -1597,23 +1661,23 @@ sandisk_set_rr_para:
 	add	x0, x0, x1
 	add	x1, x2, x1
 	mov	x2, 0
-.L302:
+.L318:
 	add	x3, x5, :lo12:.LANCHOR0
-	ldrb	w4, [x3,190]
+	ldrb	w4, [x3,726]
 	cmp	w4, w2
-	bls	.L307
-	ldrb	w3, [x3,189]
+	bls	.L323
+	ldrb	w3, [x3,725]
 	cmp	w3, 67
-	bne	.L303
+	bne	.L319
 	ldrsb	w3, [x0,x2]
-	b	.L306
-.L303:
+	b	.L322
+.L319:
 	ldrsb	w3, [x1,x2]
-.L306:
+.L322:
 	str	w3, [x20]
 	add	x2, x2, 1
-	b	.L302
-.L307:
+	b	.L318
+.L323:
 	bl	nandc_wait_flash_ready
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -1702,7 +1766,7 @@ toshiba_tlc_set_rr_para:
 	mov	w21, 239
 	adrp	x0, .LANCHOR2
 	str	w21, [x19,8]
-	cbz	w2, .L311
+	cbz	w2, .L327
 	mov	w2, 18
 	str	w2, [x19,4]
 	mov	x2, 7
@@ -1729,8 +1793,8 @@ toshiba_tlc_set_rr_para:
 	ldrb	w0, [x20,6]
 	str	w0, [x19]
 	str	wzr, [x19]
-	b	.L312
-.L311:
+	b	.L328
+.L327:
 	add	x0, x0, :lo12:.LANCHOR2
 	mov	w3, 20
 	add	x0, x0, 344
@@ -1740,7 +1804,7 @@ toshiba_tlc_set_rr_para:
 	str	w2, [x19]
 	str	w2, [x19]
 	str	w2, [x19]
-.L312:
+.L328:
 	bl	nandc_wait_flash_ready
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -1751,45 +1815,45 @@ toshiba_tlc_set_rr_para:
 	.global	zftl_flash_enter_slc_mode
 	.type	zftl_flash_enter_slc_mode, %function
 zftl_flash_enter_slc_mode:
-	adrp	x1, .LANCHOR0
+	adrp	x2, .LANCHOR0
 	uxtb	x0, w0
-	add	x1, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
+	add	x1, x2, :lo12:.LANCHOR0
 	add	x29, sp, 0
-	ldrb	w2, [x1,97]
-	cbz	w2, .L313
+	ldrb	w2, [x2,#:lo12:.LANCHOR0]
+	cbz	w2, .L329
 	cmp	w2, 1
-	ldr	x3, [x1,16]
-	bne	.L316
+	ldr	x3, [x1,536]
+	bne	.L332
 	adrp	x1, .LANCHOR2+405
 	ldrb	w2, [x1,#:lo12:.LANCHOR2+405]
-	cbz	w2, .L313
+	cbz	w2, .L329
 	sxtw	x1, w0
 	add	x1, x1, 8
 	add	x0, x3, x1, lsl 8
 	str	w2, [x0,8]
-	b	.L313
-.L316:
+	b	.L329
+.L332:
 	cmp	w2, 2
-	bne	.L318
+	bne	.L334
 	add	x1, x1, x0
-	ldrb	w2, [x1,728]
-	cbz	w2, .L313
-	strb	wzr, [x1,728]
+	ldrb	w2, [x1,744]
+	cbz	w2, .L329
+	strb	wzr, [x1,744]
 	adrp	x1, .LANCHOR2+405
 	ldrb	w1, [x1,#:lo12:.LANCHOR2+405]
-	cbz	w1, .L313
+	cbz	w1, .L329
 	add	x0, x0, 8
 	add	x0, x3, x0, lsl 8
 	str	w1, [x0,8]
-	b	.L313
-.L318:
+	b	.L329
+.L334:
 	cmp	w2, 3
-	bne	.L313
+	bne	.L329
 	add	x1, x1, x0, sxtw
-	ldrb	w2, [x1,728]
-	cbz	w2, .L313
-	strb	wzr, [x1,728]
+	ldrb	w2, [x1,744]
+	cbz	w2, .L329
+	strb	wzr, [x1,744]
 	ubfiz	x1, x0, 8, 8
 	add	x0, x3, x1
 	mov	w1, 239
@@ -1802,7 +1866,7 @@ zftl_flash_enter_slc_mode:
 	str	wzr, [x0,2048]
 	str	wzr, [x0,2048]
 	bl	nandc_wait_flash_ready
-.L313:
+.L329:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_flash_enter_slc_mode, .-zftl_flash_enter_slc_mode
@@ -1810,55 +1874,55 @@ zftl_flash_enter_slc_mode:
 	.global	zftl_flash_exit_slc_mode
 	.type	zftl_flash_exit_slc_mode, %function
 zftl_flash_exit_slc_mode:
-	adrp	x1, .LANCHOR0
+	adrp	x2, .LANCHOR0
 	uxtb	x0, w0
-	add	x1, x1, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
+	add	x1, x2, :lo12:.LANCHOR0
 	add	x29, sp, 0
-	ldrb	w2, [x1,97]
-	cbz	w2, .L331
+	ldrb	w2, [x2,#:lo12:.LANCHOR0]
+	cbz	w2, .L347
 	cmp	w2, 1
-	ldr	x4, [x1,16]
-	bne	.L334
+	ldr	x4, [x1,536]
+	bne	.L350
 	adrp	x1, .LANCHOR2+406
 	ldrb	w2, [x1,#:lo12:.LANCHOR2+406]
-	cbz	w2, .L331
+	cbz	w2, .L347
 	sxtw	x1, w0
 	add	x1, x1, 8
 	add	x0, x4, x1, lsl 8
 	str	w2, [x0,8]
-	b	.L331
-.L334:
+	b	.L347
+.L350:
 	cmp	w2, 2
-	bne	.L336
+	bne	.L352
 	add	x1, x1, x0
-	ldrb	w2, [x1,728]
-	cbnz	w2, .L331
+	ldrb	w2, [x1,744]
+	cbnz	w2, .L347
 	adrp	x2, .LANCHOR2
 	mov	w5, 4
 	add	x2, x2, :lo12:.LANCHOR2
 	ldrb	w3, [x2,388]
 	cmp	w3, 2
 	csel	w3, w3, w5, eq
-	strb	w3, [x1,728]
+	strb	w3, [x1,744]
 	ldrb	w1, [x2,406]
-	cbz	w1, .L331
+	cbz	w1, .L347
 	add	x0, x0, 8
 	add	x0, x4, x0, lsl 8
 	str	w1, [x0,8]
-	b	.L331
-.L336:
+	b	.L347
+.L352:
 	cmp	w2, 3
-	bne	.L331
+	bne	.L347
 	add	x1, x1, x0, sxtw
-	ldrb	w3, [x1,728]
-	cbnz	w3, .L331
+	ldrb	w3, [x1,744]
+	cbnz	w3, .L347
 	adrp	x2, .LANCHOR2+388
 	mov	w5, 4
 	ldrb	w2, [x2,#:lo12:.LANCHOR2+388]
 	cmp	w2, 2
 	csel	w2, w2, w5, eq
-	strb	w2, [x1,728]
+	strb	w2, [x1,744]
 	ubfiz	x1, x0, 8, 8
 	add	x0, x4, x1
 	mov	w1, 239
@@ -1871,7 +1935,7 @@ zftl_flash_exit_slc_mode:
 	str	w3, [x0,2048]
 	str	w3, [x0,2048]
 	bl	nandc_wait_flash_ready
-.L331:
+.L347:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_flash_exit_slc_mode, .-zftl_flash_exit_slc_mode
@@ -1879,96 +1943,209 @@ zftl_flash_exit_slc_mode:
 	.global	flash_start_page_read
 	.type	flash_start_page_read, %function
 flash_start_page_read:
-	stp	x29, x30, [sp, -80]!
-	adrp	x2, .LANCHOR0
+	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	ubfx	x19, x1, 21, 3
 	stp	x23, x24, [sp,48]
 	uxtb	w23, w0
-	add	x0, x2, :lo12:.LANCHOR0
-	stp	x19, x20, [sp,16]
+	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	str	x25, [sp,64]
-	ubfx	x19, x1, 21, 3
-	and	w20, w1, 2097151
+	and	w21, w1, 2097151
 	ubfx	x22, x1, 24, 2
-	ldrb	w0, [x0,98]
-	mov	x21, x2
+	ldrb	w0, [x0,633]
 	cmp	w0, w19
-	bhi	.L350
+	bhi	.L366
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
+	mov	w2, 741
 	add	x1, x1, 688
-	mov	w2, 736
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L350:
-	add	x25, x21, :lo12:.LANCHOR0
-	add	x19, x25, x19, sxtw
-	ldrb	w19, [x19,200]
+	bl	dump_stack
+.L366:
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x19, x20, x19, sxtw
+	ldrb	w19, [x19,736]
 	mov	w0, w19
-	ldr	x24, [x25,16]
+	ldr	x24, [x20,536]
 	bl	nandc_cs
-	cbnz	w22, .L351
-	ldrb	w0, [x25,97]
-	cbz	w0, .L352
-	ldrb	w0, [x25,208]
-	cbz	w0, .L353
-.L352:
-	add	x2, x21, :lo12:.LANCHOR0
-	ldrh	w1, [x2,210]
-	udiv	w0, w20, w1
-	mul	w0, w0, w1
-	ldrb	w1, [x2,208]
-	sub	w20, w20, w0
-	cbz	w1, .L354
-	add	w20, w0, w20, lsl 1
-	b	.L353
-.L354:
-	add	x2, x2, 212
-	ldrh	w20, [x2,w20,uxtw 1]
-	add	w20, w20, w0
-	b	.L355
-.L353:
+	cbnz	w22, .L367
+	mov	w0, w21
+	bl	slc_phy_page_address_calc
+	mov	w21, w0
+	adrp	x0, .LANCHOR0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0]
+	cbz	w0, .L368
 	mov	w0, w19
 	bl	zftl_flash_enter_slc_mode
-	b	.L355
-.L351:
-	ldr	x0, [x25,88]
+	b	.L368
+.L367:
+	ldr	x0, [x20,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L356
+	bne	.L369
 	sxtw	x0, w19
 	add	x0, x0, 8
 	add	x0, x24, x0, lsl 8
 	str	w22, [x0,8]
-	b	.L355
-.L356:
+	b	.L368
+.L369:
 	mov	w0, w19
 	bl	zftl_flash_exit_slc_mode
-.L355:
+.L368:
 	ubfiz	x19, x19, 8, 8
-	and	w0, w20, 255
+	and	w0, w21, 255
 	add	x1, x24, x19
 	str	wzr, [x1,2056]
 	str	wzr, [x1,2052]
 	str	wzr, [x1,2052]
 	str	w0, [x1,2052]
-	lsr	w0, w20, 8
+	lsr	w0, w21, 8
 	str	w0, [x1,2052]
-	lsr	w20, w20, 16
-	str	w20, [x1,2052]
+	lsr	w21, w21, 16
+	str	w21, [x1,2052]
 	mov	w0, 0
 	str	w23, [x1,2056]
 	bl	nandc_de_cs
-	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 80
+	ldp	x29, x30, [sp], 64
 	ret
 	.size	flash_start_page_read, .-flash_start_page_read
 	.align	2
+	.global	flash_start_plane_read
+	.type	flash_start_plane_read, %function
+flash_start_plane_read:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	and	w21, w1, 2097151
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	ubfx	x19, x0, 21, 3
+	and	w23, w0, 2097151
+	ubfx	x20, x0, 24, 2
+	add	x0, x22, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldrb	w0, [x0,633]
+	cmp	w0, w19
+	bhi	.L374
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 836
+	add	x1, x1, 712
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L374:
+	add	x26, x22, :lo12:.LANCHOR0
+	add	x19, x26, x19, sxtw
+	ldrb	w24, [x19,736]
+	mov	w0, w24
+	ldr	x25, [x26,536]
+	bl	nandc_cs
+	cbnz	w20, .L375
+	mov	w0, w23
+	bl	slc_phy_page_address_calc
+	mov	w23, w0
+	mov	w0, w21
+	bl	slc_phy_page_address_calc
+	mov	w21, w0
+	adrp	x0, .LANCHOR0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0]
+	cbz	w0, .L376
+	mov	w0, w24
+	bl	zftl_flash_enter_slc_mode
+	b	.L376
+.L375:
+	ldr	x0, [x26,624]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L377
+	sxtw	x0, w24
+	add	x0, x0, 8
+	add	x0, x25, x0, lsl 8
+	str	w20, [x0,8]
+	b	.L376
+.L377:
+	mov	w0, w24
+	bl	zftl_flash_exit_slc_mode
+.L376:
+	add	x26, x22, :lo12:.LANCHOR0
+	and	w2, w23, 255
+	add	x0, x26, 640
+	and	w28, w21, 255
+	lsr	w27, w21, 8
+	uxtb	x19, w24
+	ldrb	w1, [x0,16]
+	lsr	w21, w21, 16
+	cmp	w1, 1
+	lsr	w1, w23, 8
+	lsr	w23, w23, 16
+	bne	.L378
+	add	x19, x25, x19, lsl 8
+	ldrb	w3, [x0,8]
+	ldrb	w0, [x0,9]
+	str	w3, [x19,2056]
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w2, [x19,2052]
+	str	w1, [x19,2052]
+	str	w23, [x19,2052]
+	str	w0, [x19,2056]
+	bl	nandc_wait_flash_ready
+	cbz	w20, .L379
+	ldr	x0, [x26,624]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L379
+	str	w20, [x19,2056]
+.L379:
+	str	wzr, [x19,2056]
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	b	.L397
+.L378:
+	add	x19, x25, x19, lsl 8
+	ldrb	w0, [x0,8]
+	str	w0, [x19,2056]
+	str	w2, [x19,2052]
+	str	w1, [x19,2052]
+	str	w23, [x19,2052]
+	cbz	w20, .L381
+	ldr	x0, [x26,624]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L381
+	str	w20, [x19,2056]
+.L381:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x22,649]
+	str	w0, [x19,2056]
+.L397:
+	str	w28, [x19,2052]
+	mov	w0, 48
+	str	w27, [x19,2052]
+	str	w21, [x19,2052]
+	str	w0, [x19,2056]
+	mov	w0, w24
+	bl	nandc_de_cs
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_start_plane_read, .-flash_start_plane_read
+	.align	2
 	.global	flash_set_interface_mode
 	.type	flash_set_interface_mode, %function
 flash_set_interface_mode:
@@ -1984,11 +2161,11 @@ flash_set_interface_mode:
 	stp	x25, x26, [sp,64]
 	mov	w24, w0
 	mov	x20, 0
-	add	x25, x21, 732
+	add	x25, x21, 748
 	adrp	x23, .LANCHOR2
-.L370:
+.L408:
 	lsl	x0, x20, 3
-	ldr	x19, [x21,16]
+	ldr	x19, [x21,536]
 	ldrb	w1, [x0,x25]
 	cmp	w1, 44
 	cset	w26, eq
@@ -1998,61 +2175,61 @@ flash_set_interface_mode:
 	cset	w0, eq
 	adrp	x1, .LANCHOR0
 	orr	w0, w2, w0
-	cbnz	w0, .L371
-	cbz	w26, .L361
-.L371:
+	cbnz	w0, .L409
+	cbz	w26, .L399
+.L409:
 	add	x1, x1, :lo12:.LANCHOR0
 	cmp	w24, 1
-	ldrb	w1, [x1,764]
-	bne	.L363
-	tbz	x1, 0, .L361
+	ldrb	w1, [x1,780]
+	bne	.L401
+	tbz	x1, 0, .L399
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L364
+	tbz	x0, 12, .L402
 	adrp	x0, .LC37
 	add	x0, x0, :lo12:.LC37
 	bl	printk
-.L364:
+.L402:
 	add	x1, x19, x20, lsl 8
 	mov	w0, 239
 	str	w0, [x1,2056]
 	mov	w0, 1
-	cbz	w26, .L365
+	cbz	w26, .L403
 	str	w0, [x1,2052]
 	mov	w0, 5
-	b	.L388
-.L365:
+	b	.L426
+.L403:
 	mov	w2, 128
 	str	w2, [x1,2052]
-.L388:
+.L426:
 	str	w0, [x1,2048]
-	b	.L369
-.L363:
-	tbz	x1, 2, .L361
+	b	.L407
+.L401:
+	tbz	x1, 2, .L399
 	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L367
+	tbz	x0, 12, .L405
 	mov	x0, x22
 	bl	printk
-.L367:
+.L405:
 	add	x1, x19, x20, lsl 8
 	mov	w0, 239
 	str	w0, [x1,2056]
-	cbz	w26, .L368
+	cbz	w26, .L406
 	mov	w0, 1
 	str	w0, [x1,2052]
 	mov	w0, 35
-	b	.L388
-.L368:
+	b	.L426
+.L406:
 	mov	w0, 128
 	str	w0, [x1,2052]
 	str	w26, [x1,2048]
-.L369:
+.L407:
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
 	str	wzr, [x1,2048]
-.L361:
+.L399:
 	add	x20, x20, 1
 	cmp	x20, 4
-	bne	.L370
+	bne	.L408
 	bl	nandc_wait_flash_ready
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
@@ -2066,12 +2243,12 @@ flash_set_interface_mode:
 	.global	flash_reset
 	.type	flash_reset, %function
 flash_reset:
-	adrp	x1, .LANCHOR0+16
+	adrp	x1, .LANCHOR0+536
 	uxtb	x0, w0
 	stp	x29, x30, [sp, -16]!
 	add	x0, x0, 8
 	add	x29, sp, 0
-	ldr	x1, [x1,#:lo12:.LANCHOR0+16]
+	ldr	x1, [x1,#:lo12:.LANCHOR0+536]
 	add	x0, x1, x0, lsl 8
 	mov	w1, 255
 	str	w1, [x0,8]
@@ -2087,10 +2264,10 @@ flash_read_id:
 	add	x29, sp, 0
 	str	x21, [sp,32]
 	uxtb	w21, w0
-	adrp	x0, .LANCHOR0+16
+	adrp	x0, .LANCHOR0+536
 	stp	x19, x20, [sp,16]
 	mov	x19, x1
-	ldr	x20, [x0,#:lo12:.LANCHOR0+16]
+	ldr	x20, [x0,#:lo12:.LANCHOR0+536]
 	mov	w0, w21
 	bl	flash_reset
 	mov	w0, w21
@@ -2124,7 +2301,7 @@ flash_read_id:
 	sub	w0, w2, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L390
+	bhi	.L428
 	adrp	x0, .LC39
 	ldrb	w3, [x19,1]
 	ldrb	w4, [x19,2]
@@ -2134,7 +2311,7 @@ flash_read_id:
 	ldrb	w6, [x19,4]
 	ldrb	w7, [x19,5]
 	bl	printk
-.L390:
+.L428:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -2145,12 +2322,12 @@ flash_read_id:
 	.type	flash_read_spare, %function
 flash_read_spare:
 	stp	x29, x30, [sp, -48]!
-	adrp	x4, .LANCHOR0+16
+	adrp	x4, .LANCHOR0+536
 	ubfiz	x0, x0, 8, 8
 	add	x29, sp, 0
 	str	x19, [sp,16]
 	adrp	x3, .LANCHOR2+385
-	ldr	x19, [x4,#:lo12:.LANCHOR0+16]
+	ldr	x19, [x4,#:lo12:.LANCHOR0+536]
 	str	x2, [x29,40]
 	add	x19, x19, x0
 	ldrb	w3, [x3,#:lo12:.LANCHOR2+385]
@@ -2180,21 +2357,21 @@ flash_read_spare:
 	.type	sandisk_prog_test_bad_block, %function
 sandisk_prog_test_bad_block:
 	stp	x29, x30, [sp, -64]!
-	adrp	x2, .LANCHOR0+16
+	adrp	x2, .LANCHOR0+536
 	uxtb	w0, w0
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR2
-	ldr	x19, [x2,#:lo12:.LANCHOR0+16]
+	ldr	x19, [x2,#:lo12:.LANCHOR0+536]
 	add	x2, x20, :lo12:.LANCHOR2
 	str	x21, [sp,32]
 	ldrb	w3, [x2,405]
 	sxtw	x2, w0
 	add	x2, x2, 8
 	add	x2, x19, x2, lsl 8
-	cbnz	w3, .L407
+	cbnz	w3, .L445
 	mov	w3, 162
-.L407:
+.L445:
 	ubfiz	x0, x0, 8, 8
 	str	w3, [x2,8]
 	add	x19, x19, x0
@@ -2220,18 +2397,18 @@ sandisk_prog_test_bad_block:
 	mov	w0, 5
 	ldr	x1, [x29,56]
 	ands	w21, w2, w0
-	beq	.L396
+	beq	.L434
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L396
+	tbz	x0, 12, .L434
 	adrp	x0, .LC40
 	add	x0, x0, :lo12:.LC40
 	bl	printk
-.L396:
+.L434:
 	add	x20, x20, :lo12:.LANCHOR2
 	ldrb	w0, [x20,406]
-	cbz	w0, .L397
+	cbz	w0, .L435
 	str	w0, [x19,2056]
-.L397:
+.L435:
 	mov	w0, w21
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -2242,9 +2419,9 @@ sandisk_prog_test_bad_block:
 	.global	nandc_rdy_status
 	.type	nandc_rdy_status, %function
 nandc_rdy_status:
-	adrp	x0, .LANCHOR0+16
+	adrp	x0, .LANCHOR0+536
 	sub	sp, sp, #16
-	ldr	x0, [x0,#:lo12:.LANCHOR0+16]
+	ldr	x0, [x0,#:lo12:.LANCHOR0+536]
 	ldr	w0, [x0]
 	str	w0, [sp,8]
 	ldr	w0, [sp,8]
@@ -2256,51 +2433,51 @@ nandc_rdy_status:
 	.global	nandc_bch_sel
 	.type	nandc_bch_sel, %function
 nandc_bch_sel:
-	adrp	x2, .LANCHOR0
+	adrp	x1, .LANCHOR0
 	mov	w3, 1
-	add	x1, x2, :lo12:.LANCHOR0
-	ldrb	w2, [x2,#:lo12:.LANCHOR0]
-	strb	w0, [x1,188]
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrb	w2, [x1,516]
+	strb	w0, [x1,724]
 	cmp	w2, 9
-	ldr	x2, [x1,16]
-	bne	.L410
+	ldr	x2, [x1,536]
+	bne	.L448
 	str	w3, [x2,16]
 	cmp	w0, 70
 	mov	w1, 0
-	beq	.L411
+	beq	.L449
 	cmp	w0, 60
 	mov	w1, 3
-	beq	.L411
+	beq	.L449
 	cmp	w0, 40
 	mov	w1, 2
 	csel	w1, w1, w3, eq
-.L411:
+.L449:
 	lsl	w1, w1, 25
 	orr	w1, w1, 1
 	str	w1, [x2,32]
-	b	.L409
-.L410:
+	b	.L447
+.L448:
 	str	w3, [x2,8]
 	cmp	w0, 16
 	mov	w1, 4096
-	bne	.L413
-.L416:
+	bne	.L451
+.L454:
 	and	w1, w1, -17
-	b	.L414
-.L413:
+	b	.L452
+.L451:
 	cmp	w0, 24
-	bne	.L415
+	bne	.L453
 	orr	w1, w1, 16
-	b	.L414
-.L415:
+	b	.L452
+.L453:
 	cmp	w0, 40
 	orr	w1, w1, 262144
 	orr	w1, w1, 16
-	beq	.L416
-.L414:
+	beq	.L454
+.L452:
 	orr	w1, w1, 1
 	str	w1, [x2,12]
-.L409:
+.L447:
 	ret
 	.size	nandc_bch_sel, .-nandc_bch_sel
 	.align	2
@@ -2314,77 +2491,77 @@ zftl_flash_resume:
 	add	x0, x20, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	ldrb	w1, [x20,#:lo12:.LANCHOR0]
-	ldr	w2, [x0,24]
+	ldrb	w1, [x0,516]
+	ldr	w2, [x0,544]
 	cmp	w1, 9
-	ldr	x1, [x0,16]
+	ldr	x1, [x0,536]
 	str	w2, [x1]
-	ldr	x1, [x0,16]
-	ldr	w2, [x0,28]
+	ldr	x1, [x0,536]
+	ldr	w2, [x0,548]
 	str	w2, [x1,4]
-	ldr	x1, [x0,16]
-	ldr	w2, [x0,32]
-	bne	.L424
+	ldr	x1, [x0,536]
+	ldr	w2, [x0,552]
+	bne	.L462
 	str	w2, [x1,16]
-	ldr	w2, [x0,36]
+	ldr	w2, [x0,556]
 	str	w2, [x1,32]
-	ldr	w2, [x0,40]
+	ldr	w2, [x0,560]
 	str	w2, [x1,80]
-	ldr	w2, [x0,44]
+	ldr	w2, [x0,564]
 	str	w2, [x1,84]
-	ldr	w2, [x0,48]
+	ldr	w2, [x0,568]
 	str	w2, [x1,520]
-	ldr	w0, [x0,52]
+	ldr	w0, [x0,572]
 	str	w0, [x1,8]
-	b	.L425
-.L424:
+	b	.L463
+.L462:
 	str	w2, [x1,8]
-	ldr	w2, [x0,36]
+	ldr	w2, [x0,556]
 	str	w2, [x1,12]
-	ldr	w2, [x0,40]
+	ldr	w2, [x0,560]
 	str	w2, [x1,304]
-	ldr	w2, [x0,44]
+	ldr	w2, [x0,564]
 	str	w2, [x1,308]
-	ldr	w2, [x0,48]
+	ldr	w2, [x0,568]
 	str	w2, [x1,336]
-	ldr	w0, [x0,52]
+	ldr	w0, [x0,572]
 	str	w0, [x1,344]
-.L425:
-	add	x21, x20, :lo12:.LANCHOR0
+.L463:
+	add	x22, x20, :lo12:.LANCHOR0
 	mov	x19, 0
-	add	x23, x21, 732
+	add	x23, x22, 748
 	mov	w24, 2
-.L427:
+.L465:
 	lsl	x0, x19, 3
 	ldrb	w0, [x0,x23]
 	sub	w0, w0, #1
 	uxtb	w0, w0
 	cmp	w0, 253
-	bhi	.L426
-	uxtb	w22, w19
-	mov	w0, w22
+	bhi	.L464
+	uxtb	w21, w19
+	mov	w0, w21
 	bl	flash_reset
-	add	x0, x21, 728
+	add	x0, x22, 744
 	strb	w24, [x19,x0]
-	mov	w0, w22
+	mov	w0, w21
 	bl	zftl_flash_enter_slc_mode
-.L426:
+.L464:
 	add	x19, x19, 1
 	cmp	x19, 4
-	bne	.L427
+	bne	.L465
 	add	x20, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x20,136]
-	cbz	w0, .L428
+	ldrb	w0, [x20,672]
+	cbz	w0, .L466
 	mov	w0, 1
 	bl	nandc_set_if_mode
 	mov	w0, w19
 	bl	flash_set_interface_mode
 	mov	w0, w19
 	bl	nandc_set_if_mode
-	ldr	w0, [x20,40]
+	ldr	w0, [x20,560]
 	lsr	w0, w0, 8
 	bl	nandc_set_ddr_para
-.L428:
+.L466:
 	adrp	x0, .LANCHOR2+396
 	ldrb	w0, [x0,#:lo12:.LANCHOR2+396]
 	bl	nandc_bch_sel
@@ -2411,39 +2588,39 @@ rk_nandc_flash_ready:
 nandc_iqr_wait_flash_ready:
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
+	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
-	add	x20, x19, :lo12:.LANCHOR0
-	ldr	x0, [x20,16]
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x0, [x19,536]
 	bl	rk_nandc_rb_irq_flag_init
-	ldrb	w1, [x19,#:lo12:.LANCHOR0]
-	ldr	x0, [x20,16]
+	ldrb	w1, [x19,516]
+	ldr	x0, [x19,536]
 	cmp	w1, 9
-	bne	.L435
+	bne	.L473
 	ldr	w1, [x0,292]
 	orr	w1, w1, 2
 	str	w1, [x0,292]
 	ldr	w1, [x0,288]
 	orr	w1, w1, 2
 	str	w1, [x0,288]
-	b	.L436
-.L435:
+	b	.L474
+.L473:
 	ldr	w1, [x0,368]
 	orr	w1, w1, 2
 	str	w1, [x0,368]
 	ldr	w1, [x0,364]
 	orr	w1, w1, 2
 	str	w1, [x0,364]
-.L436:
+.L474:
 	ldr	w1, [x0]
-	tbnz	x1, 9, .L437
+	tbnz	x1, 9, .L475
 	bl	wait_for_nand_flash_ready
-	b	.L434
-.L437:
+	b	.L472
+.L475:
 	mov	w1, 1
 	bl	nandc_irq_disable
-.L434:
-	ldp	x19, x20, [sp,16]
+.L472:
+	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	nandc_iqr_wait_flash_ready, .-nandc_iqr_wait_flash_ready
@@ -2462,45 +2639,46 @@ flash_erase_duplane_block:
 	stp	x23, x24, [sp,48]
 	uxtb	w25, w1
 	mov	w22, w2
-	ldrb	w0, [x0,98]
+	ldrb	w0, [x0,633]
 	mov	w24, w3
 	cmp	w0, w19
-	bhi	.L440
+	bhi	.L478
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 712
 	mov	w2, 510
+	add	x1, x1, 736
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L440:
+	bl	dump_stack
+.L478:
 	add	x0, x20, :lo12:.LANCHOR0
 	add	x19, x0, x19, sxtw
-	ldrb	w23, [x19,200]
-	ldr	x19, [x0,16]
+	ldrb	w23, [x19,736]
+	ldr	x19, [x0,536]
 	adrp	x0, .LANCHOR2
 	mov	x21, x23
 	add	x23, x23, 8
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
 	add	x23, x19, x23, lsl 8
-	tbz	x0, 4, .L441
+	tbz	x0, 4, .L479
 	adrp	x0, .LC41
 	mov	w1, w21
 	add	x0, x0, :lo12:.LC41
 	mov	w2, w22
 	mov	w3, w24
 	bl	printk
-.L441:
+.L479:
 	bl	nandc_wait_flash_ready
 	mov	w0, w21
 	bl	nandc_cs
 	mov	w0, w21
-	cbnz	w25, .L442
+	cbnz	w25, .L480
 	bl	zftl_flash_enter_slc_mode
-	b	.L443
-.L442:
+	b	.L481
+.L480:
 	bl	zftl_flash_exit_slc_mode
-.L443:
+.L481:
 	ubfiz	x4, x21, 8, 8
 	mov	w0, 96
 	add	x19, x19, x4
@@ -2512,9 +2690,9 @@ flash_erase_duplane_block:
 	str	w0, [x19,2052]
 	lsr	w0, w22, 16
 	str	w0, [x19,2052]
-	ldrb	w0, [x20,765]
+	ldrb	w0, [x20,781]
 	mov	w20, 0
-	cbnz	w0, .L444
+	cbnz	w0, .L482
 	mov	w0, 208
 	str	w0, [x19,2056]
 	mov	w20, 5
@@ -2522,7 +2700,7 @@ flash_erase_duplane_block:
 	mov	x0, x23
 	bl	flash_read_status
 	and	w20, w0, w20
-.L444:
+.L482:
 	mov	w0, 96
 	str	w0, [x19,2056]
 	and	w0, w24, 255
@@ -2545,12 +2723,12 @@ flash_erase_duplane_block:
 	ldr	x2, [x29,88]
 	and	w19, w2, w19
 	orr	w19, w19, w20
-	cbz	w19, .L445
+	cbz	w19, .L483
 	adrp	x0, .LC42
 	mov	w1, w22
 	add	x0, x0, :lo12:.LC42
 	bl	printk
-.L445:
+.L483:
 	mov	w0, w19
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -2574,44 +2752,45 @@ flash_erase_block_en:
 	stp	x21, x22, [sp,32]
 	uxtb	w24, w1
 	mov	w22, w2
-	ldrb	w0, [x0,98]
+	ldrb	w0, [x0,633]
 	and	w23, w2, 2097151
 	cmp	w0, w20
-	bhi	.L454
+	bhi	.L492
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 744
 	mov	w2, 555
+	add	x1, x1, 768
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L454:
+	bl	dump_stack
+.L492:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x20, x0, x20, sxtw
-	ldrb	w21, [x20,200]
-	ldr	x25, [x0,16]
+	ldrb	w21, [x20,736]
+	ldr	x25, [x0,536]
 	adrp	x0, .LANCHOR2
 	mov	x20, x21
 	add	x21, x21, 8
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
 	add	x21, x25, x21, lsl 8
-	tbz	x0, 4, .L455
+	tbz	x0, 4, .L493
 	adrp	x0, .LC43
 	mov	w1, w20
 	add	x0, x0, :lo12:.LC43
 	mov	w2, w22
 	bl	printk
-.L455:
+.L493:
 	bl	nandc_wait_flash_ready
 	mov	w0, w20
 	bl	nandc_cs
 	mov	w0, w20
-	cbnz	w24, .L456
+	cbnz	w24, .L494
 	bl	zftl_flash_enter_slc_mode
-	b	.L457
-.L456:
+	b	.L495
+.L494:
 	bl	zftl_flash_exit_slc_mode
-.L457:
+.L495:
 	ubfiz	x3, x20, 8, 8
 	mov	w0, 96
 	add	x3, x25, x3
@@ -2633,15 +2812,15 @@ flash_erase_block_en:
 	bl	nandc_de_cs
 	mov	w3, 5
 	ands	w20, w21, w3
-	beq	.L458
+	beq	.L496
 	add	x19, x19, :lo12:.LANCHOR0
 	adrp	x0, .LC44
 	add	x0, x0, :lo12:.LC44
 	mov	w2, w20
-	ldrh	w1, [x19,210]
+	ldrh	w1, [x19,2]
 	udiv	w1, w22, w1
 	bl	printk
-.L458:
+.L496:
 	mov	w0, w20
 	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
@@ -2681,28 +2860,28 @@ flash_erase_all:
 	mov	x21, x0
 	mul	w20, w1, w20
 	uxth	w20, w20
-.L467:
-	ldrb	w0, [x23,98]
+.L505:
+	ldrb	w0, [x23,633]
 	cmp	w0, w19
-	bls	.L471
+	bls	.L509
 	add	x0, x23, x19, sxtw
-	ldrb	w24, [x0,200]
+	ldrb	w24, [x0,736]
 	mov	w22, 0
-.L468:
+.L506:
 	cmp	w20, w22, uxth
-	bls	.L472
+	bls	.L510
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w1, [x0,210]
+	ldrh	w1, [x0,2]
 	mov	w0, w24
 	mul	w1, w22, w1
 	add	w22, w22, 1
 	bl	flash_erase_block
-	b	.L468
-.L472:
+	b	.L506
+.L510:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L467
-.L471:
+	b	.L505
+.L509:
 	adrp	x0, .LC45
 	mov	w1, 0
 	add	x0, x0, :lo12:.LC45
@@ -2739,16 +2918,16 @@ nandc_xfer_start:
 	stp	x19, x20, [sp,16]
 	uxtb	w24, w0
 	uxtb	w23, w1
-	ldr	x0, [x21,16]
+	ldr	x0, [x21,536]
 	add	w20, w23, 1
 	str	x3, [x29,88]
 	bl	rk_nandc_xfer_irq_flag_init
-	ldrb	w0, [x22,#:lo12:.LANCHOR0]
-	ldr	x4, [x21,16]
+	ldrb	w0, [x21,516]
+	ldr	x4, [x21,536]
 	cmp	w0, 9
 	ldr	x3, [x29,88]
 	ldr	x2, [x29,80]
-	bne	.L475
+	bne	.L513
 	ldr	w0, [x4,292]
 	ubfiz	w19, w24, 1, 1
 	orr	w19, w19, 8
@@ -2760,19 +2939,19 @@ nandc_xfer_start:
 	str	w0, [x4,288]
 	mov	w0, 1
 	bfi	w19, w0, 5, 2
-	ldrb	w0, [x21,137]
+	ldrb	w0, [x21,673]
 	orr	w19, w19, 536870912
 	orr	w19, w19, 1024
 	and	w19, w19, -17
 	bfi	w19, w20, 22, 6
 	orr	w19, w19, 128
-	cbz	w0, .L477
-	ldrb	w1, [x21,184]
+	cbz	w0, .L515
+	ldrb	w1, [x21,720]
 	orr	w0, w19, 512
 	cmp	w1, wzr
 	csel	w19, w0, w19, ne
-	b	.L477
-.L475:
+	b	.L515
+.L513:
 	ldr	w0, [x4,368]
 	ubfiz	w19, w24, 1, 1
 	orr	w19, w19, 8
@@ -2793,8 +2972,8 @@ nandc_xfer_start:
 	orr	w19, w19, 1024
 	and	w19, w19, -17
 	bfi	w19, w20, 22, 6
-	cbz	w24, .L489
-	ldrb	w0, [x21,188]
+	cbz	w24, .L527
+	ldrb	w0, [x21,724]
 	ubfx	x23, x23, 1, 7
 	mov	w1, 64
 	mov	w4, 128
@@ -2802,27 +2981,27 @@ nandc_xfer_start:
 	add	x23, x3, x23, lsl 2
 	csel	w4, w1, w4, cc
 	mov	w1, 0
-	b	.L482
-.L477:
+	b	.L520
+.L515:
 	add	x22, x22, :lo12:.LANCHOR0
 	ubfx	x21, x19, 22, 6
 	mov	x0, x2
 	lsl	w1, w21, 10
-	str	x2, [x22,152]
+	str	x2, [x22,688]
 	mov	w2, w24
-	str	x3, [x22,160]
+	str	x3, [x22,696]
 	bl	rknand_dma_map_single
-	str	w0, [x22,168]
-	ldr	x0, [x22,160]
+	str	w0, [x22,704]
+	ldr	x0, [x22,696]
 	lsl	w1, w21, 2
 	mov	w2, w24
 	bl	rknand_dma_map_single
-	str	w0, [x22,172]
-	ldr	x3, [x22,16]
+	str	w0, [x22,708]
+	ldr	x3, [x22,536]
 	mov	w1, 1
-	str	w1, [x22,176]
+	str	w1, [x22,712]
 	cmp	w24, wzr
-	ldr	w1, [x22,168]
+	ldr	w1, [x22,704]
 	str	w1, [x3,52]
 	str	w0, [x3,56]
 	mov	w0, 16
@@ -2834,53 +3013,53 @@ nandc_xfer_start:
 	cset	w0, eq
 	orr	w1, w1, 4
 	bfi	w1, w0, 1, 1
-	ldrh	w0, [x22,186]
+	ldrh	w0, [x22,722]
 	orr	w1, w1, 1
 	bfi	w1, w0, 16, 11
 	str	w1, [x3,48]
 	str	w19, [x3,16]
 	orr	w19, w19, 4
 	str	w19, [x3,16]
-	b	.L474
-.L482:
+	b	.L512
+.L520:
 	cmp	x3, x23
 	add	w0, w1, w4
-	beq	.L484
+	beq	.L522
 	ldrh	w5, [x3,2]
 	and	x1, x1, 4294967292
-	ldr	x6, [x21,144]
+	ldr	x6, [x21,680]
 	ldrh	w7, [x3],4
 	orr	w5, w7, w5, lsl 16
 	str	w5, [x6,x1]
 	mov	w1, w0
-	b	.L482
-.L489:
-	ldr	x1, [x21,144]
+	b	.L520
+.L527:
+	ldr	x1, [x21,680]
 	str	w0, [x1]
-.L484:
+.L522:
 	add	x22, x22, :lo12:.LANCHOR0
 	and	w20, w20, 63
 	lsl	w1, w20, 10
-	ldr	x0, [x22,144]
-	str	x2, [x22,152]
-	str	x0, [x22,160]
+	ldr	x0, [x22,680]
+	str	x2, [x22,688]
+	str	x0, [x22,696]
 	mov	x0, x2
 	mov	w2, w24
 	bl	rknand_dma_map_single
-	str	w0, [x22,168]
-	ldr	x0, [x22,160]
+	str	w0, [x22,704]
+	ldr	x0, [x22,696]
 	lsl	w1, w20, 7
 	mov	w2, w24
 	bl	rknand_dma_map_single
-	str	w0, [x22,172]
-	ldr	x3, [x22,16]
+	str	w0, [x22,708]
+	ldr	x3, [x22,536]
 	mov	w0, 1
-	str	w0, [x22,176]
+	str	w0, [x22,712]
 	cmp	w24, wzr
-	ldr	w0, [x22,168]
+	ldr	w0, [x22,704]
 	mov	w1, 8660
 	str	w0, [x3,20]
-	ldr	w0, [x22,172]
+	ldr	w0, [x22,708]
 	str	w0, [x3,24]
 	cset	w0, eq
 	bfi	w1, w0, 1, 1
@@ -2890,7 +3069,7 @@ nandc_xfer_start:
 	str	w19, [x3,8]
 	orr	w19, w19, 4
 	str	w19, [x3,8]
-.L474:
+.L512:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -2905,24 +3084,24 @@ nandc_set_seed:
 	adrp	x1, .LANCHOR1
 	and	w0, w0, 127
 	add	x1, x1, :lo12:.LANCHOR1
-	adrp	x2, .LANCHOR0
-	add	x1, x1, 768
-	ldrh	w0, [x1,w0,uxtw 1]
-	add	x1, x2, :lo12:.LANCHOR0
-	ldrb	w2, [x2,#:lo12:.LANCHOR0]
-	orr	w3, w0, -1073741824
-	ldrb	w4, [x1,184]
-	ldr	x1, [x1,16]
-	cmp	w4, wzr
-	csel	w0, w3, w0, ne
+	add	x1, x1, 792
+	ldrh	w1, [x1,w0,uxtw 1]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	orr	w2, w1, -1073741824
+	ldrb	w3, [x0,720]
+	cmp	w3, wzr
+	csel	w1, w2, w1, ne
+	ldrb	w2, [x0,516]
+	ldr	x0, [x0,536]
 	cmp	w2, 9
-	bne	.L492
-	str	w0, [x1,520]
-	b	.L490
-.L492:
-	str	w0, [x1,336]
-.L490:
-	ret
+	bne	.L530
+	str	w1, [x0,520]
+	b	.L528
+.L530:
+	str	w1, [x0,336]
+.L528:
+	ret
 	.size	nandc_set_seed, .-nandc_set_seed
 	.align	2
 	.global	zftl_flash_de_init
@@ -2936,25 +3115,25 @@ zftl_flash_de_init:
 	mov	w0, 0
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	hynix_reconfig_rr_para
-	ldrb	w0, [x20,136]
-	cbz	w0, .L497
-	ldrb	w0, [x20,764]
-	tbz	x0, 0, .L497
+	ldrb	w0, [x20,672]
+	cbz	w0, .L535
+	ldrb	w0, [x20,780]
+	tbz	x0, 0, .L535
 	mov	w0, 1
 	bl	flash_set_interface_mode
 	mov	w0, 1
 	bl	nandc_set_if_mode
-	strb	wzr, [x20,136]
-.L497:
+	strb	wzr, [x20,672]
+.L535:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x19,184]
-	cbz	w0, .L498
+	ldrb	w0, [x19,720]
+	cbz	w0, .L536
 	mov	w0, 0
-	strb	wzr, [x19,184]
+	strb	wzr, [x19,720]
 	bl	nandc_set_seed
 	mov	w0, 1
-	strb	w0, [x19,184]
-.L498:
+	strb	w0, [x19,720]
+.L536:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -2964,18 +3143,18 @@ zftl_flash_de_init:
 	.global	nandc_randomizer_enable
 	.type	nandc_randomizer_enable, %function
 nandc_randomizer_enable:
-	adrp	x1, .LANCHOR0+184
-	strb	w0, [x1,#:lo12:.LANCHOR0+184]
+	adrp	x1, .LANCHOR0+720
+	strb	w0, [x1,#:lo12:.LANCHOR0+720]
 	ret
 	.size	nandc_randomizer_enable, .-nandc_randomizer_enable
 	.align	2
 	.global	nandc_get_chip_if
 	.type	nandc_get_chip_if, %function
 nandc_get_chip_if:
-	adrp	x1, .LANCHOR0+16
+	adrp	x1, .LANCHOR0+536
 	uxtb	x0, w0
 	add	x0, x0, 8
-	ldr	x1, [x1,#:lo12:.LANCHOR0+16]
+	ldr	x1, [x1,#:lo12:.LANCHOR0+536]
 	add	x0, x1, x0, lsl 8
 	ret
 	.size	nandc_get_chip_if, .-nandc_get_chip_if
@@ -2989,33 +3168,33 @@ buf_init:
 	stp	x19, x20, [sp,16]
 	add	x19, x0, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	add	x19, x19, 768
+	add	x19, x19, 784
 	mov	w21, 0
 	mov	x22, x0
-.L511:
+.L549:
 	add	x20, x22, :lo12:.LANCHOR0
 	uxtb	w0, w21
 	add	w1, w0, 1
 	strb	w0, [x19,1]
 	strb	w1, [x19]
 	add	w21, w21, 1
-	ldrb	w0, [x20,2816]
+	ldrb	w0, [x20,2832]
 	add	x19, x19, 64
 	strb	wzr, [x19,-62]
 	str	xzr, [x19,-48]
 	lsl	w0, w0, 9
 	bl	ftl_malloc
 	str	x0, [x19,-56]
-	ldrb	w0, [x20,2816]
+	ldrb	w0, [x20,2832]
 	lsl	w0, w0, 1
 	bl	ftl_malloc
 	str	x0, [x19,-40]
 	cmp	w21, 32
-	bne	.L511
-	strb	w21, [x20,2818]
+	bne	.L549
+	strb	w21, [x20,2834]
 	mov	w0, -1
-	strb	wzr, [x20,2817]
-	strb	w0, [x20,2752]
+	strb	wzr, [x20,2833]
+	strb	w0, [x20,2768]
 	ldp	x21, x22, [sp,32]
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
@@ -3028,8 +3207,8 @@ buf_reinit:
 	adrp	x0, .LANCHOR0
 	mov	w2, 0
 	add	x1, x0, :lo12:.LANCHOR0
-	add	x1, x1, 768
-.L514:
+	add	x1, x1, 784
+.L552:
 	uxtb	w3, w2
 	add	w2, w2, 1
 	add	w4, w3, 1
@@ -3039,12 +3218,12 @@ buf_reinit:
 	strb	wzr, [x1,2]
 	add	x1, x1, 64
 	str	xzr, [x1,-48]
-	bne	.L514
+	bne	.L552
 	add	x0, x0, :lo12:.LANCHOR0
 	mov	w1, -1
-	strb	wzr, [x0,2817]
-	strb	w1, [x0,2752]
-	strb	w2, [x0,2818]
+	strb	wzr, [x0,2833]
+	strb	w1, [x0,2768]
+	strb	w2, [x0,2834]
 	ret
 	.size	buf_reinit, .-buf_reinit
 	.align	2
@@ -3060,54 +3239,80 @@ buf_add_tail:
 	mov	x19, x1
 	ldrb	w1, [x20]
 	cmp	w1, 255
-	bne	.L522
+	bne	.L560
 	ldrb	w0, [x19,1]
 	cmp	w0, 255
-	bne	.L518
+	bne	.L556
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1024
 	mov	w2, 74
+	add	x1, x1, 1048
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L518:
+	bl	dump_stack
+.L556:
 	ldrb	w0, [x19,1]
 	strb	w0, [x20]
-	b	.L516
-.L522:
+	b	.L554
+.L560:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 768
-.L523:
+	add	x0, x0, 784
+.L561:
 	mov	w20, w1
 	sbfiz	x1, x1, 6, 32
 	ldrb	w1, [x0,x1]
 	cmp	w1, 255
-	bne	.L523
+	bne	.L561
 	ldrb	w0, [x19,1]
 	cmp	w0, 255
-	bne	.L520
+	bne	.L558
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1024
 	mov	w2, 81
+	add	x1, x1, 1048
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L520:
+	bl	dump_stack
+.L558:
 	adrp	x0, .LANCHOR0
 	sbfiz	x20, x20, 6, 32
 	add	x0, x0, :lo12:.LANCHOR0
 	ldrb	w1, [x19,1]
-	add	x0, x0, 768
+	add	x0, x0, 784
 	strb	w1, [x0,x20]
-.L516:
+.L554:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	buf_add_tail, .-buf_add_tail
 	.align	2
+	.type	queue_read_cmd, %function
+queue_read_cmd:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	mov	w0, 48
+	ldr	w1, [x19,40]
+	bl	flash_start_page_read
+	strb	wzr, [x19,59]
+	mov	w0, 1
+	strb	w0, [x19,58]
+	mov	w0, -1
+	strb	w0, [x19]
+	adrp	x0, .LANCHOR0
+	mov	x1, x19
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 2835
+	bl	buf_add_tail
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	queue_read_cmd, .-queue_read_cmd
+	.align	2
 	.global	buf_free
 	.type	buf_free, %function
 buf_free:
@@ -3119,23 +3324,26 @@ buf_free:
 	and	w1, w1, 8
 	uxtb	w1, w1
 	strb	w1, [x0,2]
-	cbz	w1, .L525
+	cbz	w1, .L564
+	ldr	w1, [x0,36]
+	cmn	w1, #1
+	beq	.L564
 	mov	x1, x0
 	add	x0, x19, :lo12:.LANCHOR0
-	add	x0, x0, 2817
+	add	x0, x0, 2833
 	bl	buf_add_tail
-	b	.L526
-.L525:
+	b	.L565
+.L564:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrb	w2, [x1,2817]
+	ldrb	w2, [x1,2833]
 	strb	w2, [x0]
 	ldrb	w0, [x0,1]
-	strb	w0, [x1,2817]
-.L526:
+	strb	w0, [x1,2833]
+.L565:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x19,2818]
+	ldrb	w0, [x19,2834]
 	add	w0, w0, 1
-	strb	w0, [x19,2818]
+	strb	w0, [x19,2834]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -3152,51 +3360,54 @@ buf_alloc:
 	str	x21, [sp,32]
 	uxtb	w21, w0
 	mov	x19, x1
-	ldrb	w0, [x20,2818]
-	cbz	w0, .L528
-.L531:
+	ldrb	w0, [x20,2834]
+	cbz	w0, .L573
+.L576:
 	add	x1, x19, :lo12:.LANCHOR0
-	add	x0, x1, 768
-	ldrb	w2, [x1,2817]
+	add	x0, x1, 784
+	ldrb	w2, [x1,2833]
 	add	x0, x0, x2, lsl 6
-	cbz	w21, .L529
-	b	.L530
-.L528:
+	cbz	w21, .L574
+	b	.L575
+.L573:
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1040
 	mov	w2, 121
+	add	x1, x1, 1064
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-	ldrb	w1, [x20,2818]
-	cbnz	w1, .L531
-.L533:
+	bl	dump_stack
+	ldrb	w1, [x20,2834]
+	cbnz	w1, .L576
+.L578:
 	mov	x0, 0
-	b	.L532
-.L529:
-	ldrb	w1, [x1,2818]
+	b	.L577
+.L574:
+	ldrb	w1, [x1,2834]
 	cmp	w1, 1
-	beq	.L533
-.L530:
+	beq	.L578
+.L575:
 	add	x1, x19, :lo12:.LANCHOR0
 	lsl	x2, x2, 6
-	add	x4, x1, 768
+	add	x4, x1, 784
 	add	x3, x4, x2
 	ldrb	w5, [x4,x2]
-	strb	w5, [x1,2817]
-	ldrb	w5, [x1,2818]
+	strb	w5, [x1,2833]
+	ldrb	w5, [x1,2834]
 	strh	wzr, [x3,50]
 	sub	w5, w5, #1
-	strb	w5, [x1,2818]
+	strb	w5, [x1,2834]
 	mov	w1, 1
 	strb	w1, [x3,2]
 	mov	w1, -1
 	str	xzr, [x3,16]
 	strb	w1, [x4,x2]
 	mov	w1, -1
+	strb	wzr, [x3,56]
 	str	w1, [x3,36]
-.L532:
+	strb	wzr, [x3,57]
+.L577:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -3209,33 +3420,33 @@ buf_remove_buf:
 	ldrb	w4, [x1,1]
 	ldrb	w2, [x0]
 	cmp	w4, w2
-	bne	.L540
+	bne	.L585
 	ldrb	w1, [x1]
 	strb	w1, [x0]
-	b	.L544
-.L540:
+	b	.L589
+.L585:
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 768
-.L542:
+	add	x0, x0, 784
+.L587:
 	cmp	w2, 255
-	beq	.L545
+	beq	.L590
 	mov	w3, w2
 	sbfiz	x2, x2, 6, 32
 	ldrb	w2, [x0,x2]
 	cmp	w2, w4
-	bne	.L542
+	bne	.L587
 	sbfiz	x3, x3, 6, 32
 	ldrb	w2, [x1]
 	strb	w2, [x0,x3]
 	mov	w0, -1
 	strb	w0, [x1]
-.L544:
+.L589:
 	mov	w0, 1
-	b	.L539
-.L545:
+	b	.L584
+.L590:
 	mov	w0, 0
-.L539:
+.L584:
 	ret
 	.size	buf_remove_buf, .-buf_remove_buf
 	.align	2
@@ -3248,31 +3459,32 @@ buf_remove_free:
 	adrp	x19, .LANCHOR0
 	mov	x20, x0
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2818]
-	cbnz	w0, .L547
+	ldrb	w0, [x0,2834]
+	cbnz	w0, .L592
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 172
+	add	x1, x1, 1080
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1056
-	mov	w2, 170
 	bl	printk
-.L547:
+	bl	dump_stack
+.L592:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x19,2818]
-	cbz	w0, .L546
-	add	x0, x19, 2817
+	ldrb	w0, [x19,2834]
+	cbz	w0, .L591
+	add	x0, x19, 2833
 	mov	x1, x20
 	bl	buf_remove_buf
 	cmp	w0, 1
-	bne	.L546
-	ldrb	w0, [x19,2818]
+	bne	.L591
+	ldrb	w0, [x19,2834]
 	sub	w0, w0, #1
-	strb	w0, [x19,2818]
+	strb	w0, [x19,2834]
 	ldrb	w0, [x20,2]
 	orr	w0, w0, 1
 	strb	w0, [x20,2]
-.L546:
+.L591:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -3294,9 +3506,9 @@ flash_check_bad_block:
 	asr	w2, w2, 5
 	lsl	w2, w2, 2
 	mul	w2, w0, w2
-	adrp	x0, .LANCHOR0+192
+	adrp	x0, .LANCHOR0+728
 	sxtw	x2, w2
-	ldr	x0, [x0,#:lo12:.LANCHOR0+192]
+	ldr	x0, [x0,#:lo12:.LANCHOR0+728]
 	add	x2, x2, 912
 	add	x2, x0, x2
 	ldr	w0, [x2,x3,lsl 2]
@@ -3327,12 +3539,12 @@ flash_mask_bad_block:
 	add	w20, w20, 31
 	bl	printk
 	asr	w20, w20, 5
-	adrp	x0, .LANCHOR0+192
+	adrp	x0, .LANCHOR0+728
 	lsl	w20, w20, 2
 	ubfx	x3, x21, 5, 27
 	lsl	x3, x3, 2
 	mul	w19, w19, w20
-	ldr	x0, [x0,#:lo12:.LANCHOR0+192]
+	ldr	x0, [x0,#:lo12:.LANCHOR0+728]
 	sxtw	x19, w19
 	add	x19, x19, 912
 	add	x19, x0, x19
@@ -3352,49 +3564,49 @@ flash_mask_bad_block:
 str2hex:
 	ldrb	w1, [x0]
 	cmp	w1, 48
-	bne	.L554
+	bne	.L599
 	ldrb	w1, [x0,1]
 	add	x2, x0, 2
 	and	w1, w1, -33
 	uxtb	w1, w1
 	cmp	w1, 88
 	csel	x0, x0, x2, ne
-.L554:
+.L599:
 	ldrb	w1, [x0]
 	and	w1, w1, -33
 	uxtb	w1, w1
 	cmp	w1, 88
 	mov	w1, 0
 	csinc	x0, x0, x0, ne
-.L556:
+.L601:
 	ldrb	w2, [x0]
-	cbz	w2, .L563
+	cbz	w2, .L608
 	sub	w3, w2, #48
 	uxtb	w3, w3
 	cmp	w3, 9
-	bhi	.L557
+	bhi	.L602
 	add	w1, w2, w1, lsl 4
 	sub	w1, w1, #48
-	b	.L558
-.L557:
+	b	.L603
+.L602:
 	sub	w3, w2, #97
 	uxtb	w3, w3
 	cmp	w3, 5
-	bhi	.L559
+	bhi	.L604
 	add	w1, w2, w1, lsl 4
 	sub	w1, w1, #87
-	b	.L558
-.L559:
+	b	.L603
+.L604:
 	sub	w3, w2, #65
 	uxtb	w3, w3
 	cmp	w3, 5
-	bhi	.L563
+	bhi	.L608
 	add	w1, w2, w1, lsl 4
 	sub	w1, w1, #55
-.L558:
+.L603:
 	add	x0, x0, 1
-	b	.L556
-.L563:
+	b	.L601
+.L608:
 	mov	w0, w1
 	ret
 	.size	str2hex, .-str2hex
@@ -3409,7 +3621,7 @@ zftl_proc_debug_init:
 	add	x3, x3, :lo12:.LANCHOR1
 	add	x29, sp, 0
 	mov	w1, 292
-	add	x3, x3, 1072
+	add	x3, x3, 1096
 	mov	x4, x2
 	add	x0, x0, :lo12:.LC47
 	bl	proc_create_data
@@ -3427,19 +3639,19 @@ ftl_print_info_to_buf:
 	add	x1, x1, :lo12:.LC1
 	add	x2, x2, :lo12:.LC2
 	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
+	stp	x21, x22, [sp,32]
 	mov	x20, x0
 	bl	sprintf
-	adrp	x21, .LANCHOR0
 	adrp	x7, .LANCHOR2
-	adrp	x1, .LC48
+	adrp	x22, .LANCHOR0
 	add	x7, x7, :lo12:.LANCHOR2
-	add	x21, x21, :lo12:.LANCHOR0
+	adrp	x1, .LC48
 	add	x7, x7, 376
+	add	x21, x22, :lo12:.LANCHOR0
 	add	x19, x20, x0, sxtw
 	add	x1, x1, :lo12:.LC48
-	mov	x0, x19
 	ldrb	w5, [x7,4]
+	mov	x0, x19
 	ldrb	w6, [x7,5]
 	ldrb	w3, [x7,2]
 	ldrb	w4, [x7,3]
@@ -3447,14 +3659,14 @@ ftl_print_info_to_buf:
 	ldrb	w7, [x7,6]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x21,4]
+	ldr	w2, [x21,520]
 	adrp	x1, .LC49
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC49
 	lsr	w2, w2, 11
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x21,2820]
+	ldr	w2, [x21,2836]
 	adrp	x1, .LC50
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC50
@@ -3466,77 +3678,77 @@ ftl_print_info_to_buf:
 	add	x1, x1, :lo12:.LC51
 	add	x19, x19, 10
 	bl	strcpy
-	ldr	w2, [x21,2824]
+	ldr	w2, [x21,2840]
 	adrp	x1, .LC52
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC52
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	w2, [x21,4]
+	ldr	w2, [x21,520]
 	adrp	x1, .LC53
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC53
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,80]
+	ldr	x2, [x21,608]
 	adrp	x1, .LC54
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC54
 	ldr	w2, [x2,524]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,80]
+	ldr	x2, [x21,608]
 	adrp	x1, .LC55
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC55
 	ldr	w2, [x2,528]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2828]
+	ldrh	w2, [x21,2844]
 	adrp	x1, .LC56
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC56
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2830]
+	ldrh	w2, [x21,2846]
 	adrp	x1, .LC57
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC57
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2832]
+	ldrh	w2, [x21,2848]
 	adrp	x1, .LC58
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC58
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2834]
+	ldrh	w2, [x21,2850]
 	adrp	x1, .LC59
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC59
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2836]
+	ldrh	w2, [x21,2852]
 	adrp	x1, .LC60
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC60
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2838]
+	ldrh	w2, [x21,2854]
 	adrp	x1, .LC61
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC61
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrb	w4, [x21,2841]
+	ldrb	w4, [x21,2857]
 	adrp	x1, .LC62
-	ldrb	w2, [x21,2818]
+	ldrb	w2, [x21,2834]
 	mov	x0, x19
-	ldrb	w3, [x21,2840]
+	ldrb	w3, [x21,2856]
 	add	x1, x1, :lo12:.LC62
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x3, [x21,2848]
+	ldr	x3, [x21,2864]
 	adrp	x1, .LC63
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC63
@@ -3544,7 +3756,7 @@ ftl_print_info_to_buf:
 	ldrh	w3, [x3,146]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21,2848]
+	ldr	x0, [x21,2864]
 	adrp	x1, .LC64
 	add	x1, x1, :lo12:.LC64
 	ldr	w3, [x0,16]
@@ -3553,7 +3765,7 @@ ftl_print_info_to_buf:
 	add	w2, w2, w3, lsr 11
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21,2848]
+	ldr	x0, [x21,2864]
 	adrp	x1, .LC65
 	add	x1, x1, :lo12:.LC65
 	ldr	w3, [x0,24]
@@ -3562,21 +3774,21 @@ ftl_print_info_to_buf:
 	add	w2, w2, w3, lsr 11
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2848]
+	ldr	x2, [x21,2864]
 	adrp	x1, .LC66
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC66
 	ldr	w2, [x2,64]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2848]
+	ldr	x2, [x21,2864]
 	adrp	x1, .LC67
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC67
 	ldr	w2, [x2,68]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x0, [x21,80]
+	ldr	x0, [x21,608]
 	mov	w2, 10
 	adrp	x1, .LC68
 	add	x1, x1, :lo12:.LC68
@@ -3585,55 +3797,55 @@ ftl_print_info_to_buf:
 	udiv	w2, w3, w2
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrb	w2, [x21,97]
+	ldrb	w2, [x22,#:lo12:.LANCHOR0]
 	adrp	x1, .LC69
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC69
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,80]
+	ldr	x2, [x21,608]
 	adrp	x1, .LC70
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC70
 	ldr	w2, [x2,556]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,80]
+	ldr	x2, [x21,608]
 	adrp	x1, .LC71
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC71
 	ldr	w2, [x2,552]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2848]
+	ldr	x2, [x21,2864]
 	adrp	x1, .LC72
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC72
 	ldr	w2, [x2,52]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2848]
+	ldr	x2, [x21,2864]
 	adrp	x1, .LC73
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC73
 	ldr	w2, [x2,60]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2848]
+	ldr	x2, [x21,2864]
 	adrp	x1, .LC74
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC74
 	ldr	w2, [x2,76]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x2, [x21,2848]
+	ldr	x2, [x21,2864]
 	adrp	x1, .LC75
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC75
 	ldr	w2, [x2,8]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x4, [x21,80]
+	ldr	x4, [x21,608]
 	adrp	x1, .LC76
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC76
@@ -3642,7 +3854,7 @@ ftl_print_info_to_buf:
 	ldrb	w4, [x4,25]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x4, [x21,80]
+	ldr	x4, [x21,608]
 	adrp	x1, .LC77
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC77
@@ -3651,7 +3863,7 @@ ftl_print_info_to_buf:
 	ldrb	w4, [x4,57]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x4, [x21,80]
+	ldr	x4, [x21,608]
 	adrp	x1, .LC78
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC78
@@ -3660,7 +3872,7 @@ ftl_print_info_to_buf:
 	ldrb	w4, [x4,89]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x6, [x21,2848]
+	ldr	x6, [x21,2864]
 	adrp	x1, .LC79
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC79
@@ -3671,7 +3883,7 @@ ftl_print_info_to_buf:
 	ldrh	w6, [x6,96]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldr	x6, [x21,2848]
+	ldr	x6, [x21,2864]
 	adrp	x1, .LC80
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC80
@@ -3682,22 +3894,33 @@ ftl_print_info_to_buf:
 	ldrh	w6, [x6,98]
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2856]
+	ldrh	w2, [x21,2872]
 	adrp	x1, .LC81
 	mov	x0, x19
 	add	x1, x1, :lo12:.LC81
 	bl	sprintf
 	add	x19, x19, x0, sxtw
-	ldrh	w2, [x21,2858]
+	ldr	w6, [x21,2884]
 	adrp	x1, .LC82
-	ldrh	w3, [x21,2860]
+	ldrh	w2, [x21,2874]
 	mov	x0, x19
-	ldrh	w4, [x21,2862]
+	ldrh	w3, [x21,2876]
 	add	x1, x1, :lo12:.LC82
-	ldrh	w5, [x21,2864]
+	ldrh	w4, [x21,2878]
+	ldrh	w5, [x21,2880]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x5, [x21,608]
+	adrp	x1, .LC83
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC83
+	ldrh	w2, [x5,584]
+	ldrh	w3, [x5,586]
+	ldrh	w4, [x5,588]
+	ldrh	w5, [x5,590]
 	bl	sprintf
 	add	x0, x19, x0, sxtw
-	ldr	x21, [sp,32]
+	ldp	x21, x22, [sp,32]
 	sub	w0, w0, w20
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
@@ -3726,251 +3949,202 @@ ftl_gc_write_buf:
 	ldrb	w0, [x0,2]
 	orr	w0, w0, 2
 	strb	w0, [x1,2]
-	add	x0, x19, 2866
+	add	x0, x19, 2888
 	bl	buf_add_tail
-	ldrb	w0, [x19,2840]
+	ldrb	w0, [x19,2856]
 	add	w0, w0, 1
 	uxtb	w0, w0
-	strb	w0, [x19,2840]
+	strb	w0, [x19,2856]
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	ftl_gc_write_buf, .-ftl_gc_write_buf
 	.align	2
-	.global	ftl_read_buf
-	.type	ftl_read_buf, %function
-ftl_read_buf:
-	stp	x29, x30, [sp, -48]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	mov	w20, w0
-	add	x0, x19, :lo12:.LANCHOR0
-	str	x21, [sp,32]
-	mov	x21, x1
-	ldr	w0, [x0,2824]
-	cmp	w20, w0
-	bcc	.L569
-	adrp	x2, .LANCHOR1
-	adrp	x0, .LC0
-	add	x1, x2, :lo12:.LANCHOR1
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1288
-	mov	w2, 887
-	bl	printk
-.L569:
-	add	x3, x19, :lo12:.LANCHOR0
-	mov	w2, 0
-	add	x3, x3, 768
-.L573:
-	ldr	w0, [x3,36]
-	cmp	w0, w20
-	bne	.L570
-	ldrb	w0, [x3,2]
-	tbz	x0, 3, .L570
-	add	x19, x19, :lo12:.LANCHOR0
-	ubfiz	x2, x2, 6, 32
-	add	x19, x19, 768
-	orr	w1, w0, 4
-	add	x19, x19, x2
-	strb	w1, [x19,2]
-	tbnz	x0, 0, .L571
-	mov	x0, x19
-	bl	buf_remove_free
-.L571:
-	mov	x0, x19
-	b	.L572
-.L570:
-	add	w2, w2, 1
-	add	x3, x3, 64
-	cmp	w2, 32
-	bne	.L573
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	x0, 0
-	ldr	w1, [x19,2868]
-	cmn	w1, #1
-	bne	.L572
-	str	w20, [x19,2868]
-	str	x21, [x19,2872]
-.L572:
-	ldp	x19, x20, [sp,16]
-	ldr	x21, [sp,32]
-	ldp	x29, x30, [sp], 48
-	ret
-	.size	ftl_read_buf, .-ftl_read_buf
-	.align	2
-	.global	ftl_read_buf_free
-	.type	ftl_read_buf_free, %function
-ftl_read_buf_free:
-	stp	x29, x30, [sp, -32]!
-	add	x29, sp, 0
-	str	x19, [sp,16]
-	mov	x19, x0
-	adrp	x0, .LANCHOR0
-	mov	x1, x19
-	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 2880
-	bl	buf_remove_buf
-	ldrb	w0, [x19,2]
-	tbz	x0, 1, .L580
-	and	w0, w0, -5
-	strb	w0, [x19,2]
-	b	.L579
-.L580:
-	mov	x0, x19
-	bl	buf_free
-.L579:
-	ldr	x19, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	ftl_read_buf_free, .-ftl_read_buf_free
-	.align	2
 	.global	gc_hook
 	.type	gc_hook, %function
 gc_hook:
 	ret
 	.size	gc_hook, .-gc_hook
 	.align	2
+	.global	vpn_check
+	.type	vpn_check, %function
+vpn_check:
+	ret
+	.size	vpn_check, .-vpn_check
+	.align	2
 	.global	gc_add_sblk
 	.type	gc_add_sblk, %function
 gc_add_sblk:
 	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	uxth	w21, w0
+	add	x0, x22, :lo12:.LANCHOR0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
 	stp	x23, x24, [sp,48]
-	uxth	w23, w0
-	add	x0, x20, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
-	uxth	w21, w1
-	uxth	w22, w2
-	ldrh	w0, [x0,56]
-	cmp	w0, w23
-	bhi	.L584
+	uxth	w23, w1
+	uxth	w20, w2
+	ldrh	w0, [x0,576]
+	cmp	w0, w21
+	bhi	.L616
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 258
+	add	x1, x1, 1312
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1304
-	mov	w2, 252
 	bl	printk
-.L584:
-	add	x6, x20, :lo12:.LANCHOR0
-	uxtw	x19, w23
+	bl	dump_stack
+.L616:
+	add	x6, x22, :lo12:.LANCHOR0
+	uxtw	x19, w21
 	lsl	x25, x19, 1
 	adrp	x24, .LANCHOR2
-	ldr	x0, [x6,72]
+	ldr	x0, [x6,600]
 	ldrh	w26, [x0,x25]
 	ldr	w0, [x24,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L585
-	ldr	x0, [x6,64]
-	mov	w1, w23
-	ldrh	w5, [x6,2944]
-	mov	w2, w21
+	tbz	x0, 8, .L617
+	ldr	x0, [x6,584]
+	mov	w1, w21
+	ldrh	w5, [x6,2952]
+	mov	w2, w23
 	add	x0, x0, x19, lsl 2
-	ldrh	w6, [x6,2862]
+	ldrh	w6, [x6,2878]
 	mov	w4, w26
 	ldrb	w3, [x0,2]
-	adrp	x0, .LC83
-	add	x0, x0, :lo12:.LC83
+	adrp	x0, .LC84
+	add	x0, x0, :lo12:.LC84
 	ubfx	x3, x3, 5, 3
 	bl	printk
-.L585:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldr	x0, [x1,64]
+.L617:
+	add	x3, x22, :lo12:.LANCHOR0
+	ldr	x0, [x3,584]
 	add	x0, x0, x19, lsl 2
 	ldrb	w19, [x0,2]
 	ands	w19, w19, 224
-	bne	.L586
-	cbz	w26, .L587
+	bne	.L618
+	cbz	w26, .L619
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 257
-	add	x1, x1, 1304
+	mov	w2, 263
+	add	x1, x1, 1312
 	add	x0, x0, :lo12:.LC0
 	bl	printk
-	b	.L587
-.L586:
-	ldrh	w2, [x1,2888]
-	add	x3, x1, 2888
+	bl	dump_stack
+	b	.L619
+.L618:
+	ldrh	w1, [x3,2896]
+	add	x6, x3, 2896
 	mov	w19, 0
-	cmp	w2, w23
-	beq	.L587
-	ldr	x1, [x1,80]
-	ldrh	w2, [x1,48]
-	cmp	w2, w23
-	beq	.L587
-	ldrh	w2, [x1,16]
-	cmp	w2, w23
-	beq	.L587
-	ldrh	w2, [x1,80]
-	cmp	w2, w23
-	beq	.L587
-	ldrh	w5, [x3,56]
-	mov	x2, 0
-.L588:
-	cmp	w5, w2
-	bls	.L611
-	add	x2, x2, 1
-	add	x4, x3, x2, lsl 1
-	ldrh	w4, [x4,56]
-	cmp	w4, w23
-	bne	.L588
+	cmp	w1, w21
+	beq	.L619
+	ldr	x3, [x3,608]
+	ldrh	w1, [x3,48]
+	cmp	w1, w21
+	beq	.L619
+	ldrh	w1, [x3,16]
+	cmp	w1, w21
+	beq	.L619
+	ldrh	w1, [x3,80]
+	cmp	w1, w21
+	beq	.L619
+	ldrh	w5, [x6,56]
+	mov	x4, 0
+.L620:
+	cmp	w5, w4
+	bls	.L651
+	add	x4, x4, 1
+	add	x1, x6, x4, lsl 1
+	ldrh	w1, [x1,56]
+	cmp	w1, w21
+	bne	.L620
+	mov	w19, 0
+	b	.L619
+.L651:
+	cbnz	w23, .L622
+	add	x4, x22, :lo12:.LANCHOR0
+	mov	w19, w23
+	ldrh	w7, [x4,3224]
+	cmp	w7, w21
+	beq	.L619
+	mov	x6, 0
+.L624:
+	add	x1, x4, 3232
+	ldrh	w1, [x6,x1]
+	cmp	w21, w1
+	bne	.L623
+	ldr	w1, [x24,#:lo12:.LANCHOR2]
 	mov	w19, 0
-	b	.L587
-.L611:
-	add	x19, x1, 392
-	cbnz	w21, .L591
-	sxtw	x3, w22
-	add	x3, x1, x3, lsl 7
+	tbz	x1, 8, .L619
+	ldr	x3, [x4,600]
+	mov	w1, w21
+	ldrb	w2, [x0,2]
+	adrp	x0, .LC85
+	mov	w4, w21
+	mov	w5, w7
+	ldrh	w3, [x3,x25]
+	ubfx	x2, x2, 5, 3
+	add	x0, x0, :lo12:.LC85
+	bl	printk
+	b	.L619
+.L623:
+	add	x6, x6, 2
+	cmp	x6, 16
+	bne	.L624
+	sxtw	x4, w20
+	add	x3, x3, x4, lsl 7
 	add	x19, x3, 136
-.L591:
+	b	.L626
+.L622:
+	add	x19, x3, 392
+.L626:
 	ldr	w1, [x24,#:lo12:.LANCHOR2]
-	tbz	x1, 8, .L592
-	add	x6, x20, :lo12:.LANCHOR0
+	tbz	x1, 8, .L627
+	add	x6, x22, :lo12:.LANCHOR0
 	ldrb	w3, [x0,2]
-	adrp	x0, .LC83
-	mov	w1, w23
-	add	x0, x0, :lo12:.LC83
-	mov	w2, w21
-	ldr	x4, [x6,72]
+	adrp	x0, .LC84
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC84
+	mov	w2, w23
+	ldr	x4, [x6,600]
 	ubfx	x3, x3, 5, 3
-	ldrh	w6, [x6,2862]
+	ldrh	w6, [x6,2878]
 	ldrh	w4, [x4,x25]
 	bl	printk
-.L592:
+.L627:
 	mov	x3, x19
 	add	x0, x19, 128
 	mov	w1, 65535
-.L595:
+.L630:
 	ldrh	w2, [x3]
 	cmp	w2, w1
-	bne	.L593
-	strh	w23, [x3]
-	add	x20, x20, :lo12:.LANCHOR0
-	cbz	w21, .L594
-	ldr	x1, [x20,80]
+	bne	.L628
+	strh	w21, [x3]
+	add	x22, x22, :lo12:.LANCHOR0
+	cbz	w23, .L629
+	ldr	x1, [x22,608]
 	ldrh	w0, [x1,124]
 	add	w0, w0, 1
 	strh	w0, [x1,124]
-	b	.L610
-.L594:
-	ldr	x0, [x20,80]
-	add	x22, x0, x22, uxth 1
-	ldrh	w0, [x22,120]
+	b	.L650
+.L629:
+	ldr	x0, [x22,608]
+	add	x2, x0, x20, uxth 1
+	ldrh	w0, [x2,120]
 	add	w0, w0, 1
-	strh	w0, [x22,120]
-.L610:
+	strh	w0, [x2,120]
+.L650:
 	mov	w19, 1
-	b	.L587
-.L593:
+	b	.L619
+.L628:
 	add	x3, x3, 2
 	cmp	x3, x0
-	bne	.L595
-	b	.L610
-.L587:
+	bne	.L630
+	b	.L650
+.L619:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -3983,9 +4157,9 @@ gc_add_sblk:
 	.global	gc_get_src_ppa_from_index
 	.type	gc_get_src_ppa_from_index, %function
 gc_get_src_ppa_from_index:
-	adrp	x1, .LANCHOR0+3216
+	adrp	x1, .LANCHOR0+3248
 	ubfiz	x0, x0, 2, 16
-	ldr	x1, [x1,#:lo12:.LANCHOR0+3216]
+	ldr	x1, [x1,#:lo12:.LANCHOR0+3248]
 	ldr	w0, [x1,x0]
 	ret
 	.size	gc_get_src_ppa_from_index, .-gc_get_src_ppa_from_index
@@ -4004,96 +4178,98 @@ gc_write_completed:
 	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	str	x27, [sp,80]
-	add	x23, x21, 768
-	add	x22, x22, 1320
-.L614:
-	ldrb	w0, [x21,3224]
+	add	x23, x21, 784
+	add	x22, x22, 1328
+.L654:
+	ldrb	w0, [x21,3256]
 	adrp	x19, .LANCHOR0
 	cmp	w0, 255
-	beq	.L636
+	beq	.L676
 	sxtw	x25, w0
 	lsl	x0, x25, 6
 	add	x2, x23, x0
 	ldrb	w0, [x23,x0]
 	ldr	w1, [x2,52]
-	strb	w0, [x21,3224]
+	strb	w0, [x21,3256]
 	ldrh	w24, [x2,48]
-	cbz	w1, .L615
+	cbz	w1, .L655
 	ldr	w2, [x2,40]
-	adrp	x0, .LC84
+	adrp	x0, .LC86
 	mov	w3, 1
-	add	x0, x0, :lo12:.LC84
-	str	w2, [x21,3208]
-	strh	w3, [x21,3206]
+	add	x0, x0, :lo12:.LC86
+	strh	w3, [x21,3216]
+	str	w2, [x21,3220]
 	bl	printk
 	adrp	x0, .LC0
 	mov	x1, x22
+	mov	w2, 544
 	add	x0, x0, :lo12:.LC0
-	mov	w2, 519
 	bl	printk
-.L615:
+	bl	dump_stack
+.L655:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w20, 1
-	ldrb	w1, [x0,3225]
+	ldrb	w1, [x0,3257]
 	cmp	w1, 3
-	bne	.L616
-	ldr	x0, [x0,80]
+	bne	.L656
+	ldr	x0, [x0,608]
 	ldrb	w20, [x0,89]
 	add	w20, w20, w20, lsl 1
 	and	w20, w20, 1023
-.L616:
+.L656:
 	adrp	x0, .LANCHOR2
 	uxth	x26, w24
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L617
+	tbz	x0, 8, .L657
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, w24
 	add	x2, x0, x25, lsl 6
 	mov	w3, w24
-	ldr	x4, [x0,3232]
-	adrp	x0, .LC85
-	ldrb	w2, [x2,769]
-	add	x0, x0, :lo12:.LC85
+	ldr	x4, [x0,3264]
+	adrp	x0, .LC87
+	ldrb	w2, [x2,785]
+	add	x0, x0, :lo12:.LC87
 	ldrb	w4, [x4,x26]
 	bl	printk
-.L617:
+.L657:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x1, [x0,3232]
+	ldr	x1, [x0,3264]
 	add	x0, x0, x25, lsl 6
 	ldrb	w1, [x1,x26]
-	ldrb	w0, [x0,769]
+	ldrb	w0, [x0,785]
 	cmp	w1, w0
-	beq	.L618
+	beq	.L658
 	adrp	x0, .LC0
 	mov	x1, x22
+	mov	w2, 551
 	add	x0, x0, :lo12:.LC0
-	mov	w2, 526
 	bl	printk
-.L618:
+	bl	dump_stack
+.L658:
 	add	x2, x19, :lo12:.LANCHOR0
-	add	x1, x2, 768
+	add	x1, x2, 784
 	add	x0, x1, x25, lsl 6
 	ldrb	w0, [x0,61]
 	cmp	w0, 3
-	beq	.L619
-	ldrb	w0, [x2,3225]
+	beq	.L659
+	ldrb	w0, [x2,3257]
 	cmp	w0, 3
-	bne	.L619
-	ldrb	w0, [x2,3240]
-	cbnz	w0, .L619
-	ldr	x3, [x2,3232]
-	b	.L620
-.L619:
+	bne	.L659
+	ldrb	w0, [x2,3272]
+	cbnz	w0, .L659
+	ldr	x3, [x2,3264]
+	b	.L660
+.L659:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w25, 0
 	mov	w26, -1
-	add	x27, x19, 768
-	strh	w24, [x19,3204]
-.L621:
+	add	x27, x19, 784
+	strh	w24, [x19,3212]
+.L661:
 	cmp	w20, w25, uxth
-	bls	.L614
+	bls	.L654
 	add	w1, w25, w24
-	ldr	x2, [x19,3232]
+	ldr	x2, [x19,3264]
 	add	w25, w25, 1
 	ldrb	w0, [x2,x1]
 	strb	w26, [x2,x1]
@@ -4101,20 +4277,20 @@ gc_write_completed:
 	add	x0, x27, x0
 	strb	wzr, [x0,61]
 	bl	buf_free
-	ldrb	w0, [x19,2895]
+	ldrb	w0, [x19,2903]
 	sub	w0, w0, #1
-	strb	w0, [x19,2895]
-	b	.L621
-.L620:
+	strb	w0, [x19,2903]
+	b	.L661
+.L660:
 	cmp	w20, w0, uxth
-	bls	.L614
+	bls	.L654
 	add	w2, w0, w24
 	add	w0, w0, 1
 	ldrb	w2, [x3,x2]
 	add	x2, x1, x2, lsl 6
 	strb	wzr, [x2,61]
-	b	.L620
-.L636:
+	b	.L660
+.L676:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -4129,51 +4305,51 @@ gc_write_completed:
 gc_get_src_blk:
 	adrp	x3, .LANCHOR0
 	add	x0, x3, :lo12:.LANCHOR0
-	ldr	x1, [x0,80]
-	ldrb	w0, [x0,3241]
+	ldr	x1, [x0,608]
+	ldrb	w0, [x0,3273]
 	ldrh	w4, [x1,124]
-	cbz	w4, .L638
+	cbz	w4, .L678
 	add	x1, x1, 392
 	mov	w2, 1
-	b	.L639
-.L638:
+	b	.L679
+.L678:
 	sxtw	x2, w0
 	add	x0, x1, x2, lsl 1
 	ldrh	w5, [x0,120]
 	mov	w0, 65535
-	cbz	w5, .L640
+	cbz	w5, .L680
 	add	x1, x1, x2, lsl 7
 	mov	w2, w4
 	add	x1, x1, 136
-.L639:
+.L679:
 	add	x4, x1, 128
 	mov	w5, 65535
-.L643:
+.L683:
 	ldrh	w0, [x1]
 	cmp	w0, w5
-	beq	.L641
+	beq	.L681
 	mov	w4, -1
 	strh	w4, [x1]
 	add	x3, x3, :lo12:.LANCHOR0
-	cbz	w2, .L642
-	ldr	x2, [x3,80]
+	cbz	w2, .L682
+	ldr	x2, [x3,608]
 	ldrh	w1, [x2,124]
 	sub	w1, w1, #1
 	strh	w1, [x2,124]
-	b	.L640
-.L642:
-	ldrb	w1, [x3,3241]
-	ldr	x2, [x3,80]
+	b	.L680
+.L682:
+	ldrb	w1, [x3,3273]
+	ldr	x2, [x3,608]
 	add	x1, x2, x1, lsl 1
 	ldrh	w2, [x1,120]
 	sub	w2, w2, #1
 	strh	w2, [x1,120]
-	b	.L640
-.L641:
+	b	.L680
+.L681:
 	add	x1, x1, 2
 	cmp	x1, x4
-	bne	.L643
-.L640:
+	bne	.L683
+.L680:
 	ret
 	.size	gc_get_src_blk, .-gc_get_src_blk
 	.align	2
@@ -4187,59 +4363,59 @@ gc_free_temp_buf:
 	adrp	x19, .LANCHOR0
 	str	x21, [sp,32]
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrb	w3, [x2,2895]
-	cbz	w3, .L648
-	ldrb	w3, [x2,2818]
+	ldrb	w3, [x2,2903]
+	cbz	w3, .L688
+	ldrb	w3, [x2,2834]
 	cmp	w3, 1
-	bhi	.L648
-	ldrh	w4, [x2,3242]
+	bhi	.L688
+	ldrh	w4, [x2,3274]
 	mov	x20, x2
-	ldrb	w0, [x2,3244]
-	add	x2, x2, 768
-	ldrh	w1, [x2,2436]
+	ldrb	w0, [x2,3276]
+	add	x2, x2, 784
+	ldrh	w1, [x2,2428]
 	mul	w0, w4, w0
 	add	w3, w1, 24
-	ldr	x4, [x2,2464]
+	ldr	x4, [x2,2480]
 	cmp	w0, w3
 	csel	w3, w0, w3, ls
-.L649:
+.L689:
 	cmp	w1, w3
-	bcs	.L662
+	bcs	.L702
 	uxtw	x21, w1
 	ldrb	w0, [x4,x21]
 	cmp	w0, 255
-	beq	.L650
+	beq	.L690
 	sbfiz	x0, x0, 6, 32
 	add	x0, x2, x0
 	ldrb	w5, [x0,61]
-	cbnz	w5, .L650
+	cbnz	w5, .L690
 	str	x1, [x29,56]
 	bl	buf_free
 	adrp	x0, .LANCHOR2
 	ldr	x1, [x29,56]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L651
-	ldr	x2, [x20,3232]
-	adrp	x0, .LC86
-	add	x0, x0, :lo12:.LC86
+	tbz	x0, 8, .L691
+	ldr	x2, [x20,3264]
+	adrp	x0, .LC88
+	add	x0, x0, :lo12:.LC88
 	ldrb	w2, [x2,x21]
 	bl	printk
-.L651:
+.L691:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w1, -1
-	ldr	x0, [x19,3232]
+	ldr	x0, [x19,3264]
 	strb	w1, [x0,x21]
-	ldrb	w0, [x19,2895]
+	ldrb	w0, [x19,2903]
 	sub	w0, w0, #1
-	strb	w0, [x19,2895]
+	strb	w0, [x19,2903]
 	mov	w0, 1
-	b	.L648
-.L650:
+	b	.L688
+.L690:
 	add	w1, w1, 1
-	b	.L649
-.L662:
+	b	.L689
+.L702:
 	mov	w0, 0
-.L648:
+.L688:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 64
@@ -4250,17 +4426,17 @@ gc_free_temp_buf:
 	.type	print_gc_debug_info, %function
 print_gc_debug_info:
 	adrp	x6, .LANCHOR0
-	adrp	x0, .LC87
+	adrp	x0, .LC89
 	add	x6, x6, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC87
+	add	x0, x0, :lo12:.LC89
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldrh	w1, [x6,2888]
-	ldrh	w2, [x6,2890]
-	ldrh	w3, [x6,3202]
-	ldrb	w4, [x6,2818]
-	ldrb	w5, [x6,2895]
-	ldrh	w6, [x6,2856]
+	ldrh	w1, [x6,2896]
+	ldrh	w2, [x6,2898]
+	ldrh	w3, [x6,3210]
+	ldrb	w4, [x6,2834]
+	ldrb	w5, [x6,2903]
+	ldrh	w6, [x6,2872]
 	bl	printk
 	ldp	x29, x30, [sp], 16
 	ret
@@ -4271,24 +4447,26 @@ print_gc_debug_info:
 zftl_get_gc_node:
 	stp	x29, x30, [sp, -16]!
 	uxth	w1, w1
-	adrp	x2, .LANCHOR0
+	uxth	w2, w0
 	cmp	w1, 5
 	add	x29, sp, 0
-	uxth	w3, w0
-	add	x2, x2, :lo12:.LANCHOR0
-	bne	.L665
-	ldr	x0, [x2,3248]
-	b	.L668
-.L665:
+	bne	.L705
+	adrp	x0, .LANCHOR0+3280
+	ldr	x0, [x0,#:lo12:.LANCHOR0+3280]
+	b	.L708
+.L705:
 	cmp	w1, 2
-	bne	.L667
-	ldr	x0, [x2,3256]
-	b	.L668
-.L667:
-	ldr	x0, [x2,3264]
-.L668:
-	mov	w1, w3
+	bne	.L707
+	mov	w0, w2
+	bl	zftl_get_gc_node.part.12
+	b	.L709
+.L707:
+	adrp	x0, .LANCHOR0+3288
+	ldr	x0, [x0,#:lo12:.LANCHOR0+3288]
+.L708:
+	mov	w1, w2
 	bl	_list_get_gc_head_node.isra.5
+.L709:
 	uxth	w0, w0
 	ldp	x29, x30, [sp], 16
 	ret
@@ -4309,26 +4487,26 @@ gc_search_src_blk:
 	stp	x27, x28, [sp,80]
 	uxtb	w24, w1
 	uxtb	w22, w2
-	ldr	x1, [x0,80]
+	ldr	x1, [x0,608]
 	add	x1, x1, x21, sxtw 1
 	ldrh	w19, [x1,120]
-	cbnz	w19, .L714
-	cbnz	w21, .L672
-	adrp	x26, .LC88
-	strh	w21, [x0,3272]
+	cbnz	w19, .L757
+	cbnz	w21, .L713
+	adrp	x26, .LC90
+	strh	w21, [x0,3296]
 	mov	w19, w21
 	mov	w25, w21
 	uxth	w23, w22
 	mov	w27, 65535
 	adrp	x28, .LANCHOR2
-	add	x26, x26, :lo12:.LC88
-.L673:
+	add	x26, x26, :lo12:.LC90
+.L714:
 	cmp	w25, w23
-	bcs	.L678
+	bcs	.L719
 	add	x3, x20, :lo12:.LANCHOR0
 	mov	w1, 3
 	str	x3, [x29,96]
-	ldrh	w2, [x3,3272]
+	ldrh	w2, [x3,3296]
 	str	x2, [x29,104]
 	mov	w0, w2
 	bl	zftl_get_gc_node
@@ -4339,12 +4517,12 @@ gc_search_src_blk:
 	mov	w4, w1
 	add	w2, w2, 1
 	uxth	w2, w2
-	strh	w2, [x3,3272]
-	beq	.L674
+	strh	w2, [x3,3296]
+	beq	.L715
 	ldr	w0, [x28,#:lo12:.LANCHOR2]
 	uxtw	x5, w1
-	tbz	x0, 8, .L675
-	ldr	x3, [x3,72]
+	tbz	x0, 8, .L716
+	ldr	x3, [x3,600]
 	mov	x0, x26
 	str	x4, [x29,96]
 	str	x5, [x29,104]
@@ -4352,224 +4530,232 @@ gc_search_src_blk:
 	bl	printk
 	ldr	x4, [x29,96]
 	ldr	x5, [x29,104]
-.L675:
+.L716:
 	add	x1, x20, :lo12:.LANCHOR0
-	ldr	x0, [x1,72]
+	ldr	x0, [x1,600]
 	ldrh	w2, [x0,x5,lsl 1]
-	ldrh	w0, [x1,2862]
+	ldrh	w0, [x1,2878]
 	cmp	w2, w0
-	bcs	.L676
+	bcs	.L717
 	mov	w1, 0
 	mov	w0, w4
 	mov	w2, w1
 	bl	gc_add_sblk
-	cbz	w0, .L677
+	cbz	w0, .L718
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w23
-	bls	.L677
-	b	.L678
-.L676:
-	strh	wzr, [x1,3272]
-	b	.L678
-.L674:
-	strh	wzr, [x3,3272]
-	b	.L678
-.L677:
+	bls	.L718
+	b	.L719
+.L717:
+	strh	wzr, [x1,3296]
+	b	.L719
+.L715:
+	strh	wzr, [x3,3296]
+	b	.L719
+.L718:
 	add	w25, w25, 1
 	uxth	w25, w25
-	b	.L673
-.L678:
-	tbz	x24, 1, .L680
+	b	.L714
+.L719:
+	tbz	x24, 1, .L721
 	mov	w26, 0
 	mov	w27, 65535
-.L681:
+.L722:
 	cmp	w26, w23
-	beq	.L685
+	beq	.L726
 	add	x25, x20, :lo12:.LANCHOR0
 	mov	w1, 5
-	ldrh	w28, [x25,3274]
+	ldrh	w28, [x25,3298]
 	mov	w0, w28
 	add	w28, w28, 1
 	bl	zftl_get_gc_node
 	uxth	w1, w0
-	strh	w28, [x25,3274]
+	strh	w28, [x25,3298]
 	cmp	w1, w27
-	beq	.L682
+	beq	.L723
 	ubfiz	x1, x1, 1, 16
-	ldr	x2, [x25,72]
+	ldr	x2, [x25,600]
 	ldrh	w2, [x2,x1]
-	ldrh	w1, [x25,2864]
+	ldrh	w1, [x25,2880]
 	cmp	w2, w1
-	bcs	.L683
+	bcs	.L723
 	mov	w1, 0
 	mov	w2, w1
 	bl	gc_add_sblk
-	cbz	w0, .L684
+	cbz	w0, .L725
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w23
-	bls	.L684
-	b	.L687
-.L683:
-	strh	wzr, [x25,3274]
-	b	.L685
-.L682:
-	strh	wzr, [x25,3272]
-	b	.L685
-.L684:
+	bls	.L725
+	b	.L728
+.L723:
+	strh	wzr, [x25,3298]
+	b	.L726
+.L725:
 	add	w26, w26, 1
 	uxth	w26, w26
-	b	.L681
-.L685:
+	b	.L722
+.L726:
 	cmp	w19, w23
-	bcs	.L687
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x1,3276]
-	ldrb	w4, [x1,3244]
-	lsr	w3, w0, 3
-	ldrh	w2, [x1,2864]
-	mul	w0, w0, w4
-	sub	w0, w0, w3
-	cmp	w2, w0
-	bge	.L680
-	add	w2, w3, w2
-	strh	w2, [x1,2864]
-	b	.L680
-.L687:
+	bcs	.L728
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x0,3274]
+	ldrb	w4, [x0,3276]
+	ldrh	w2, [x0,3300]
+	ldrh	w3, [x0,2880]
+	mul	w1, w1, w4
+	sub	w1, w1, w2, lsr 2
+	cmp	w3, w1
+	bge	.L721
+	add	w2, w3, w2, lsr 3
+	strh	w2, [x0,2880]
+	b	.L721
+.L728:
 	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x1,2864]
-	ldrh	w0, [x1,3276]
+	ldrh	w2, [x1,2880]
+	ldrh	w0, [x1,3300]
 	cmp	w2, w0
-	bls	.L680
+	bls	.L721
 	sub	w0, w2, w0, lsr 3
-	strh	w0, [x1,2864]
-.L680:
-	tbz	x24, 0, .L688
+	strh	w0, [x1,2880]
+.L721:
+	tbz	x24, 0, .L729
 	cmp	w19, w23
-	bcs	.L688
-	mov	w25, 64
+	bcs	.L729
+	mov	w25, 0
 	mov	w27, 65535
-.L692:
-	add	x26, x20, :lo12:.LANCHOR0
-	ldrh	w28, [x26,3278]
-	ldr	x0, [x26,3256]
-	mov	w1, w28
-	add	w28, w28, 1
-	bl	_list_get_gc_head_node.isra.5
-	strh	w28, [x26,3278]
+.L730:
+	cmp	w25, w23
+	beq	.L733
+	add	x28, x20, :lo12:.LANCHOR0
+	ldrh	w26, [x28,3302]
+	mov	w0, w26
+	add	w26, w26, 1
+	bl	zftl_get_gc_node.part.12
+	strh	w26, [x28,3302]
 	cmp	w27, w0, uxth
-	beq	.L689
+	beq	.L731
 	mov	w1, 0
 	mov	w2, w1
 	bl	gc_add_sblk
-	cbz	w0, .L690
+	cbz	w0, .L732
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w23
-	bcc	.L690
-	b	.L693
-.L689:
-	strh	wzr, [x26,3278]
-	b	.L691
-.L690:
-	sub	w25, w25, #1
+	bcc	.L732
+	b	.L735
+.L731:
+	strh	wzr, [x28,3302]
+	b	.L733
+.L732:
+	add	w25, w25, 1
 	uxth	w25, w25
-	cbnz	w25, .L692
-.L691:
+	b	.L730
+.L733:
 	cmp	w19, w23
-	bcs	.L693
+	bcs	.L735
 	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x20,2862]
-	ldrh	w1, [x20,3276]
+	ldrh	w1, [x20,2878]
+	ldrh	w0, [x20,3300]
 	cmp	w1, w0
-	bls	.L688
-	add	w0, w0, 8
-	b	.L771
-.L693:
+	bcs	.L729
+	add	w0, w1, w0, lsr 3
+	b	.L810
+.L735:
 	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x20,3276]
-	ldrh	w0, [x20,2862]
-	cmp	w0, w1, lsr 1
-	bls	.L688
-	sub	w0, w0, #8
-.L771:
-	strh	w0, [x20,2862]
-	b	.L688
-.L672:
+	ldrh	w0, [x20,3300]
+	ldrh	w1, [x20,2878]
+	cmp	w1, w0, lsr 1
+	bls	.L729
+	sub	w0, w1, w0, lsr 3
+.L810:
+	strh	w0, [x20,2878]
+	b	.L729
+.L713:
 	and	w1, w24, 1
-	strh	w19, [x0,3278]
+	strh	w19, [x0,3214]
+	strh	w19, [x0,3304]
 	str	w1, [x29,104]
-	tbz	x24, 0, .L694
-	ldrh	w2, [x0,3280]
-	ldrh	w1, [x0,2836]
-	cmp	w1, w2, lsr 1
-	bcc	.L717
-	ldrh	w0, [x0,2834]
+	tbz	x24, 0, .L736
+	ldrh	w2, [x0,3306]
+	ldrh	w1, [x0,2852]
+	cmp	w1, w2, lsr 2
+	bcc	.L737
+	ldrh	w0, [x0,2850]
 	cmp	w0, w1
-	bls	.L696
-.L717:
+	bls	.L738
+.L737:
+	add	x23, x20, :lo12:.LANCHOR0
+	mov	w19, 0
+	ldrh	w0, [x23,2850]
+	lsr	w0, w0, 2
+	strh	w0, [x23,3302]
+	mov	w0, 0
+	bl	zftl_get_gc_node.part.12
+	uxth	w1, w0
+	mov	w2, 65535
+	cmp	w1, w2
+	beq	.L739
+	ubfiz	x1, x1, 1, 16
+	ldr	x3, [x23,600]
+	ldrh	w2, [x23,3300]
+	ldrh	w1, [x3,x1]
+	cmp	w1, w2, lsr 2
+	bcs	.L739
+	mov	w1, w19
+	mov	w2, w21
+	strh	w19, [x23,3302]
+	bl	gc_add_sblk
+	cmp	w0, w19
+	cset	w19, ne
+.L739:
 	mov	w23, 64
 	mov	w26, 65535
 	uxth	w27, w22
-.L748:
-	add	x28, x20, :lo12:.LANCHOR0
-	ldrh	w25, [x28,3278]
-	ldr	x0, [x28,3256]
-	mov	w1, w25
-	bl	_list_get_gc_head_node.isra.5
+.L741:
+	add	x25, x20, :lo12:.LANCHOR0
+	ldrh	w28, [x25,3302]
+	mov	w0, w28
+	add	w28, w28, 1
+	bl	zftl_get_gc_node.part.12
+	strh	w28, [x25,3302]
 	cmp	w26, w0, uxth
-	add	w2, w25, 1
-	strh	w2, [x28,3278]
-	beq	.L697
+	beq	.L738
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L698
+	cbz	w0, .L740
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w27
-	bcc	.L698
-	b	.L696
-.L697:
-	strh	wzr, [x28,3278]
-	b	.L696
-.L698:
+	bcs	.L738
+.L740:
 	sub	w23, w23, #1
 	uxth	w23, w23
-	cbnz	w23, .L748
-.L696:
+	cbnz	w23, .L741
+.L738:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x0,3280]
-	ldrh	w1, [x0,2836]
-	cmp	w1, w2, lsr 1
-	bls	.L694
-	strh	wzr, [x0,3272]
-	mov	w23, 64
-	mov	w26, 65535
-	uxth	w27, w22
-.L700:
-	add	x25, x20, :lo12:.LANCHOR0
-	mov	w1, 3
-	ldrh	w28, [x25,3272]
-	mov	w0, w28
-	add	w28, w28, 1
-	bl	zftl_get_gc_node
-	strh	w28, [x25,3272]
-	cmp	w26, w0, uxth
-	bne	.L772
-.L694:
-	tbz	x24, 1, .L701
+	ldrh	w2, [x0,3306]
+	ldrh	w1, [x0,2852]
+	cmp	w1, w2, lsr 3
+	bhi	.L758
+	ldrh	w0, [x0,2850]
+	add	w0, w0, 8
+	cmp	w1, w0
+	bgt	.L758
+.L736:
+	tbz	x24, 1, .L744
 	add	x0, x20, :lo12:.LANCHOR0
 	mov	w25, 64
 	mov	w26, 0
 	mov	w27, 65535
 	uxth	w28, w22
-	strh	wzr, [x0,3274]
-.L706:
+	strh	wzr, [x0,3298]
+.L749:
 	add	x23, x20, :lo12:.LANCHOR0
 	mov	w1, 5
-	ldrh	w2, [x23,3274]
+	ldrh	w2, [x23,3298]
 	str	x2, [x29,96]
 	mov	w0, w2
 	bl	zftl_get_gc_node
@@ -4577,137 +4763,152 @@ gc_search_src_blk:
 	ldr	x2, [x29,96]
 	cmp	w1, w27
 	add	w2, w2, 1
-	strh	w2, [x23,3274]
-	beq	.L702
+	strh	w2, [x23,3298]
+	beq	.L745
+	cmp	w22, 1
+	bne	.L746
+	ldrh	w3, [x23,3274]
+	ldrb	w2, [x23,3276]
+	mul	w2, w2, w3
+	ldrh	w3, [x23,3300]
+	sub	w2, w2, w3, lsr 3
+	strh	w2, [x23,2874]
+.L746:
+	add	x2, x20, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
-	ldr	x2, [x23,72]
-	ldrh	w2, [x2,x1]
-	ldrh	w1, [x23,2858]
-	cmp	w2, w1
-	bcs	.L703
+	ldr	x3, [x2,600]
+	ldrh	w3, [x3,x1]
+	ldrh	w1, [x2,2874]
+	cmp	w3, w1
+	bcs	.L747
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L704
+	cbz	w0, .L748
 	add	w19, w19, 1
 	add	w26, w26, 1
 	uxth	w19, w19
 	uxth	w26, w26
 	cmp	w19, w28
-	bcc	.L704
-	b	.L705
-.L703:
-	strh	wzr, [x23,3274]
-	b	.L705
-.L702:
-	strh	wzr, [x23,3272]
-	b	.L705
-.L704:
-	sub	w3, w25, #1
-	uxth	w25, w3
-	cbnz	w25, .L706
-.L705:
+	bcc	.L748
+	b	.L745
+.L747:
+	strh	wzr, [x2,3298]
+	b	.L745
+.L748:
+	sub	w0, w25, #1
+	uxth	w25, w0
+	cbnz	w25, .L749
+.L745:
 	cmp	w19, w22
-	bcc	.L707
-	cbnz	w26, .L708
+	bcc	.L750
+	cbnz	w26, .L751
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2838]
-	ldrh	w0, [x0,3282]
+	ldrh	w1, [x0,2854]
+	ldrh	w0, [x0,3308]
 	cmp	w1, w0
-	bls	.L708
-.L707:
+	bls	.L751
+.L750:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w3, [x0,3244]
-	ldrh	w2, [x0,3242]
-	ldrh	w1, [x0,2858]
-	mul	w2, w2, w3
-	ldrh	w3, [x0,3276]
-	sub	w2, w2, w3, lsr 3
-	cmp	w1, w2
-	bge	.L701
-	add	w1, w1, 4
-	b	.L770
-.L708:
+	ldrh	w1, [x0,3274]
+	ldrb	w4, [x0,3276]
+	ldrh	w3, [x0,3300]
+	ldrh	w2, [x0,2874]
+	mul	w1, w1, w4
+	lsr	w3, w3, 3
+	sub	w1, w1, w3
+	cmp	w2, w1
+	bge	.L744
+	add	w2, w3, w2
+	strh	w2, [x0,2874]
+	b	.L744
+.L751:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x0,3276]
-	ldrb	w3, [x0,3244]
-	ldrh	w1, [x0,2858]
-	mul	w2, w2, w3
-	cmp	w1, w2
-	ble	.L701
-	sub	w1, w1, #4
-.L770:
-	strh	w1, [x0,2858]
-.L701:
+	ldrh	w1, [x0,3300]
+	ldrb	w2, [x0,3276]
+	ldrh	w3, [x0,2874]
+	mul	w2, w1, w2
+	cmp	w3, w2
+	ble	.L744
+	sub	w1, w3, w1, lsr 3
+	strh	w1, [x0,2874]
+.L744:
 	ldr	w0, [x29,104]
-	cbz	w0, .L688
+	cbz	w0, .L729
 	add	x0, x20, :lo12:.LANCHOR0
-	mov	w23, 64
-	mov	w25, 65535
-	uxth	w26, w22
-	strh	wzr, [x0,3274]
-.L712:
-	add	x27, x20, :lo12:.LANCHOR0
+	mov	w25, 64
+	mov	w26, 65535
+	uxth	w27, w22
+	strh	wzr, [x0,3296]
+.L755:
+	add	x23, x20, :lo12:.LANCHOR0
 	mov	w1, 3
-	ldrh	w0, [x27,3274]
+	ldrh	w28, [x23,3296]
+	mov	w0, w28
+	add	w28, w28, 1
 	bl	zftl_get_gc_node
 	uxth	w1, w0
-	cmp	w1, w25
-	beq	.L709
-	ldr	x2, [x27,72]
+	strh	w28, [x23,3296]
+	cmp	w1, w26
+	beq	.L752
 	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x23,600]
 	ldrh	w1, [x2,x1]
-	ldrh	w2, [x27,2860]
-	cmp	w2, w1
-	bls	.L719
 	cmp	w1, 2
-	bhi	.L710
-.L719:
+	bls	.L753
+	ldrh	w2, [x23,2876]
+	cmp	w2, w1
+	bls	.L753
+	ldrh	w2, [x23,3306]
+	ldrh	w1, [x23,2852]
+	cmp	w1, w2, lsr 1
+	bls	.L752
+.L753:
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L710
+	cbz	w0, .L754
 	add	w19, w19, 1
 	uxth	w19, w19
-	cmp	w19, w26
-	bcs	.L709
-.L710:
-	sub	w23, w23, #1
-	uxth	w23, w23
-	cbnz	w23, .L712
-.L709:
+	cmp	w19, w27
+	bcs	.L752
+.L754:
+	sub	w25, w25, #1
+	uxth	w25, w25
+	cbnz	w25, .L755
+.L752:
 	cmp	w19, w22
 	add	x20, x20, :lo12:.LANCHOR0
-	bcs	.L713
-	ldrh	w1, [x20,3276]
-	ldrh	w0, [x20,2860]
-	cmp	w0, w1, lsr 1
-	bls	.L688
-	sub	w0, w0, #4
-	strh	w0, [x20,2860]
-	b	.L688
-.L713:
-	ldrh	w0, [x20,3276]
-	ldrb	w2, [x20,3244]
-	ldrh	w1, [x20,2860]
-	mul	w0, w0, w2
+	bcs	.L756
+	ldrh	w0, [x20,3300]
+	ldrh	w1, [x20,2876]
+	cmp	w1, w0, lsr 1
+	bls	.L729
+	sub	w0, w1, w0, lsr 3
+	strh	w0, [x20,2876]
+	b	.L729
+.L756:
+	ldrh	w1, [x20,3300]
+	ldrb	w0, [x20,3276]
+	ldrh	w2, [x20,2876]
+	mul	w0, w1, w0
 	sub	w0, w0, #32
-	cmp	w1, w0
-	bge	.L688
-	add	w1, w1, 4
-	strh	w1, [x20,2860]
-.L688:
+	cmp	w2, w0
+	bge	.L729
+	add	w1, w2, w1, lsr 3
+	strh	w1, [x20,2876]
+.L729:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L714
-	adrp	x0, .LC89
+	tbz	x0, 8, .L757
+	adrp	x0, .LC91
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC89
+	add	x0, x0, :lo12:.LC91
 	mov	w2, w24
 	mov	w3, w19
 	mov	w4, w22
 	bl	printk
-.L714:
+.L757:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -4716,20 +4917,35 @@ gc_search_src_blk:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 112
 	ret
-.L772:
+.L758:
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w23, 64
+	mov	w26, 65535
+	uxth	w27, w22
+	strh	wzr, [x0,3296]
+.L743:
+	add	x25, x20, :lo12:.LANCHOR0
+	mov	w1, 3
+	ldrh	w28, [x25,3296]
+	mov	w0, w28
+	add	w28, w28, 1
+	bl	zftl_get_gc_node
+	strh	w28, [x25,3296]
+	cmp	w26, w0, uxth
+	beq	.L736
 	mov	w1, 0
 	mov	w2, w21
 	bl	gc_add_sblk
-	cbz	w0, .L699
+	cbz	w0, .L742
 	add	w19, w19, 1
 	uxth	w19, w19
 	cmp	w19, w27
-	bcs	.L694
-.L699:
+	bcs	.L736
+.L742:
 	sub	w23, w23, #1
 	uxth	w23, w23
-	cbnz	w23, .L700
-	b	.L694
+	cbnz	w23, .L743
+	b	.L736
 	.size	gc_search_src_blk, .-gc_search_src_blk
 	.align	2
 	.global	zftl_insert_free_list
@@ -4740,24 +4956,24 @@ zftl_insert_free_list:
 	add	x2, x2, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x2,64]
+	ldr	x0, [x2,584]
 	add	x0, x0, x1, uxth 2
 	ldrb	w0, [x0,2]
 	ands	w0, w0, 24
-	bne	.L774
-	add	x0, x2, 3288
-	add	x2, x2, 2828
-	b	.L777
-.L774:
+	bne	.L812
+	add	x0, x2, 3312
+	add	x2, x2, 2844
+	b	.L815
+.L812:
 	cmp	w0, 16
-	bne	.L776
-	add	x0, x2, 3296
-	add	x2, x2, 2830
-	b	.L777
-.L776:
-	add	x0, x2, 3304
-	add	x2, x2, 2832
-.L777:
+	bne	.L814
+	add	x0, x2, 3320
+	add	x2, x2, 2846
+	b	.L815
+.L814:
+	add	x0, x2, 3328
+	add	x2, x2, 2848
+.L815:
 	bl	_insert_free_list
 	ldp	x29, x30, [sp], 16
 	ret
@@ -4771,87 +4987,229 @@ zftl_insert_data_list:
 	add	x2, x2, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x2,64]
+	ldr	x0, [x2,584]
 	add	x0, x0, x1, uxth 2
 	ldrb	w3, [x0,2]
 	and	w3, w3, 224
 	cmp	w3, 64
-	bne	.L779
-	add	x0, x2, 3256
-	add	x2, x2, 2834
-	b	.L782
-.L779:
+	bne	.L817
+	add	x0, x2, 616
+	add	x2, x2, 2850
+	b	.L820
+.L817:
 	cmp	w3, 96
-	bne	.L781
-	add	x0, x2, 3264
-	add	x2, x2, 2836
-	b	.L782
-.L781:
+	bne	.L819
+	add	x0, x2, 3288
+	add	x2, x2, 2852
+	b	.L820
+.L819:
 	cmp	w3, 160
-	bne	.L778
-	add	x0, x2, 3248
-	add	x2, x2, 2838
-.L782:
+	bne	.L816
+	add	x0, x2, 3280
+	add	x2, x2, 2854
+.L820:
 	bl	_insert_data_list
-.L778:
+.L816:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_insert_data_list, .-zftl_insert_data_list
 	.align	2
+	.global	zftl_gc_get_free_sblk
+	.type	zftl_gc_get_free_sblk, %function
+zftl_gc_get_free_sblk:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	str	x23, [sp,48]
+	add	x23, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	uxth	w21, w0
+	uxth	w22, w1
+	ldr	x0, [x23,608]
+	ldrh	w19, [x0,588]
+	cbnz	w21, .L822
+	mov	w0, 65535
+	cmp	w19, w0
+	beq	.L822
+	adrp	x0, .LC92
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC92
+	bl	printk
+	ldr	x0, [x23,608]
+	mov	w1, -1
+	strh	w1, [x0,588]
+	b	.L823
+.L822:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w3, [x0,2846]
+	ldrh	w1, [x0,2848]
+	cmp	w3, w1
+	bls	.L824
+	mov	w1, 0
+	mov	x2, x0
+	lsr	w3, w3, 3
+	cmp	w21, w1
+	csel	w1, w3, w1, ne
+	add	x0, x0, 3320
+	add	x2, x2, 2846
+	b	.L842
+.L824:
+	lsr	w1, w1, 2
+	cbz	w21, .L828
+	mov	w1, 7
+	mul	w3, w3, w1
+	mov	w1, 8
+	sdiv	w3, w3, w1
+	uxth	w1, w3
+.L828:
+	add	x2, x20, :lo12:.LANCHOR0
+	add	x0, x2, 3328
+	add	x2, x2, 2848
+.L842:
+	bl	_list_pop_index_node
+	uxth	w19, w0
+	mov	w0, 65535
+	cmp	w19, w0
+	bne	.L829
+	add	x5, x20, :lo12:.LANCHOR0
+	adrp	x0, .LC93
+	add	x0, x0, :lo12:.LC93
+	mov	w1, w19
+	mov	w2, w22
+	ldr	x3, [x5,3312]
+	ldrh	w4, [x5,2844]
+	ldrh	w5, [x5,2848]
+	bl	printk
+.L829:
+	cbz	w21, .L823
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L823
+	add	x20, x20, :lo12:.LANCHOR0
+	uxtw	x6, w19
+	lsl	x0, x6, 2
+	ldr	x1, [x20,584]
+	ldr	x7, [x20,600]
+	add	x2, x1, x0
+	ldr	w4, [x1,x0]
+	ldrh	w5, [x1,x0]
+	adrp	x0, .LC94
+	ldrb	w3, [x2,2]
+	add	x0, x0, :lo12:.LC94
+	ldrh	w6, [x7,x6,lsl 1]
+	mov	w1, w19
+	ubfx	x2, x3, 5, 3
+	ubfx	x4, x4, 11, 8
+	ubfx	x3, x3, 3, 2
+	and	w5, w5, 2047
+	bl	printk
+.L823:
+	mov	w0, w19
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	zftl_gc_get_free_sblk, .-zftl_gc_get_free_sblk
+	.align	2
 	.global	zftl_get_free_sblk
 	.type	zftl_get_free_sblk, %function
 zftl_get_free_sblk:
 	stp	x29, x30, [sp, -48]!
-	uxth	w4, w0
+	uxth	w3, w0
 	add	x29, sp, 0
-	str	x21, [sp,32]
+	stp	x21, x22, [sp,32]
 	uxth	w21, w1
 	stp	x19, x20, [sp,16]
 	cmp	w21, 5
 	adrp	x19, .LANCHOR0
+	bne	.L844
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x0,2846]
+	ldrh	w1, [x0,2848]
+	cmp	w2, w1
+	bcc	.L845
+	ldrh	w0, [x0,2844]
+	cmp	w0, w2
+	bls	.L846
+	cbz	w1, .L846
+.L845:
 	add	x2, x19, :lo12:.LANCHOR0
-	bne	.L784
-	ldrh	w1, [x2,2830]
-	ldrh	w0, [x2,2832]
-	cmp	w1, w0
-	bls	.L785
-	add	x0, x2, 3296
-	mov	w1, w4
-	add	x2, x2, 2830
-	b	.L788
-.L785:
+	lsr	w1, w1, 1
+	add	x0, x2, 3328
+	b	.L874
+.L846:
 	add	x2, x19, :lo12:.LANCHOR0
-	mov	w1, w4
-	add	x0, x2, 3304
-	add	x2, x2, 2832
-	b	.L788
-.L784:
-	ldrh	w1, [x2,2828]
-	ldrh	w0, [x2,2832]
-	cmp	w1, w0
-	bls	.L785
-	add	x0, x2, 3288
-	mov	w1, w4
-	add	x2, x2, 2828
-.L788:
+	mov	w1, 0
+	add	x0, x2, 3320
+	add	x2, x2, 2846
+	b	.L873
+.L844:
+	add	x22, x19, :lo12:.LANCHOR0
+	cmp	w21, 1
+	ldr	x0, [x22,608]
+	ldrh	w20, [x0,590]
+	beq	.L848
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L848
+	adrp	x0, .LC95
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC95
+	bl	printk
+	ldr	x0, [x22,608]
+	mov	w1, -1
+	strh	w1, [x0,590]
+	b	.L849
+.L848:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x2,2844]
+	ldrh	w1, [x2,2848]
+	cmp	w0, w1
+	bcc	.L850
+	ldrh	w2, [x2,2846]
+	cmp	w2, w0
+	bls	.L851
+	cbz	w1, .L851
+.L850:
+	lsr	w1, w1, 1
+	cmp	w21, 1
+	csel	w3, w1, w3, eq
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x0, x2, 3328
+	mov	w1, w3
+.L874:
+	add	x2, x2, 2848
+	b	.L873
+.L851:
+	lsr	w0, w0, 1
+	cmp	w21, 1
+	csel	w3, w0, w3, eq
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x0, x2, 3312
+	mov	w1, w3
+	add	x2, x2, 2844
+.L873:
 	bl	_list_pop_index_node
-	uxth	w20, w0
+	uxth	w0, w0
+	mov	w20, w0
 	mov	w0, 65535
 	cmp	w20, w0
-	bne	.L787
+	bne	.L849
 	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC90
-	add	x0, x0, :lo12:.LC90
+	adrp	x0, .LC93
+	add	x0, x0, :lo12:.LC93
 	mov	w1, w20
 	mov	w2, w21
-	ldr	x3, [x19,3288]
-	ldrh	w4, [x19,2828]
-	ldrh	w5, [x19,2832]
+	ldr	x3, [x19,3312]
+	ldrh	w4, [x19,2844]
+	ldrh	w5, [x19,2848]
 	bl	printk
-.L787:
+.L849:
 	mov	w0, w20
-	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
 	ret
 	.size	zftl_get_free_sblk, .-zftl_get_free_sblk
@@ -4864,29 +5222,29 @@ zftl_remove_data_node:
 	add	x2, x2, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x2,64]
+	ldr	x0, [x2,584]
 	add	x0, x0, x1, uxth 2
 	ldrb	w3, [x0,2]
 	and	w3, w3, 224
 	cmp	w3, 64
-	bne	.L790
-	add	x0, x2, 3256
-	add	x2, x2, 2834
-	b	.L793
-.L790:
+	bne	.L876
+	add	x0, x2, 616
+	add	x2, x2, 2850
+	b	.L879
+.L876:
 	cmp	w3, 96
-	bne	.L792
-	add	x0, x2, 3264
-	add	x2, x2, 2836
-	b	.L793
-.L792:
+	bne	.L878
+	add	x0, x2, 3288
+	add	x2, x2, 2852
+	b	.L879
+.L878:
 	cmp	w3, 160
-	bne	.L789
-	add	x0, x2, 3248
-	add	x2, x2, 2838
-.L793:
+	bne	.L875
+	add	x0, x2, 3280
+	add	x2, x2, 2854
+.L879:
 	bl	_list_remove_node
-.L789:
+.L875:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_remove_data_node, .-zftl_remove_data_node
@@ -4899,24 +5257,24 @@ zftl_remove_free_node:
 	add	x2, x2, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x2,64]
+	ldr	x0, [x2,584]
 	add	x0, x0, x1, uxth 2
 	ldrb	w0, [x0,2]
 	ands	w0, w0, 24
-	bne	.L795
-	add	x0, x2, 3288
-	add	x2, x2, 2828
-	b	.L798
-.L795:
+	bne	.L881
+	add	x0, x2, 3312
+	add	x2, x2, 2844
+	b	.L884
+.L881:
 	cmp	w0, 16
-	bne	.L797
-	add	x0, x2, 3296
-	add	x2, x2, 2830
-	b	.L798
-.L797:
-	add	x0, x2, 3304
-	add	x2, x2, 2832
-.L798:
+	bne	.L883
+	add	x0, x2, 3320
+	add	x2, x2, 2846
+	b	.L884
+.L883:
+	add	x0, x2, 3328
+	add	x2, x2, 2848
+.L884:
 	bl	_list_remove_node
 	ldp	x29, x30, [sp], 16
 	ret
@@ -4930,29 +5288,29 @@ zftl_list_update_data_list:
 	add	x2, x2, :lo12:.LANCHOR0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x2,64]
+	ldr	x0, [x2,584]
 	add	x0, x0, x1, uxth 2
 	ldrb	w3, [x0,2]
 	and	w3, w3, 224
 	cmp	w3, 64
-	bne	.L800
-	add	x0, x2, 3256
-	add	x2, x2, 2834
-	b	.L803
-.L800:
+	bne	.L886
+	add	x0, x2, 616
+	add	x2, x2, 2850
+	b	.L889
+.L886:
 	cmp	w3, 96
-	bne	.L802
-	add	x0, x2, 3264
-	add	x2, x2, 2836
-	b	.L803
-.L802:
+	bne	.L888
+	add	x0, x2, 3288
+	add	x2, x2, 2852
+	b	.L889
+.L888:
 	cmp	w3, 160
-	bne	.L799
-	add	x0, x2, 3248
-	add	x2, x2, 2838
-.L803:
+	bne	.L885
+	add	x0, x2, 3280
+	add	x2, x2, 2854
+.L889:
 	bl	_list_update_data_list
-.L799:
+.L885:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	zftl_list_update_data_list, .-zftl_list_update_data_list
@@ -4965,31 +5323,31 @@ print_list_info:
 	add	x29, sp, 32
 	stp	x19, x20, [sp,48]
 	mov	x19, x0
-	adrp	x0, .LC91
+	adrp	x0, .LC96
 	stp	x21, x22, [sp,64]
 	stp	x23, x24, [sp,80]
 	stp	x25, x26, [sp,96]
-	add	x0, x0, :lo12:.LC91
+	add	x0, x0, :lo12:.LC96
 	ldrh	w2, [x1]
 	ldr	x1, [x19]
 	bl	printk
 	ldr	x19, [x19]
-	cbz	x19, .L804
+	cbz	x19, .L890
 	mov	x22, -6148914691236517206
-	adrp	x23, .LC92
+	adrp	x23, .LC97
 	mov	w20, 0
 	adrp	x25, .LANCHOR0
 	add	x22, x22, 1
-	add	x23, x23, :lo12:.LC92
+	add	x23, x23, :lo12:.LC97
 	mov	w26, 65535
 	mov	w24, 6
-.L807:
+.L893:
 	add	x21, x25, :lo12:.LANCHOR0
 	ldrh	w3, [x19]
 	ldrh	w4, [x19,2]
 	ldrh	w5, [x19,4]
-	ldr	x2, [x21,8]
-	ldr	x1, [x21,64]
+	ldr	x2, [x21,528]
+	ldr	x1, [x21,584]
 	sub	x2, x19, x2
 	asr	x2, x2, 1
 	mul	x2, x2, x22
@@ -5007,21 +5365,23 @@ print_list_info:
 	mov	w1, w20
 	and	w0, w0, 2047
 	str	w0, [sp,8]
-	ldr	x0, [x21,72]
+	ldr	x0, [x21,600]
 	ldrh	w0, [x0,x8,lsl 1]
 	str	w0, [sp,16]
 	mov	x0, x23
 	bl	printk
 	ldrh	w19, [x19]
 	cmp	w19, w26
-	beq	.L804
+	beq	.L890
+	ldr	x0, [x21,528]
 	add	w20, w20, 1
-	ldr	x0, [x21,8]
 	umull	x19, w19, w24
-	cmp	w20, 33
+	uxth	w20, w20
 	add	x19, x0, x19
-	bne	.L807
-.L804:
+	ldrh	w0, [x21,3336]
+	cmp	w0, w20
+	bcs	.L893
+.L890:
 	sub	sp, x29, #32
 	ldp	x19, x20, [sp,48]
 	ldp	x21, x22, [sp,64]
@@ -5040,156 +5400,286 @@ dump_all_list_info:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x0, x19, 3288
-	add	x1, x19, 2828
+	add	x0, x19, 3312
+	add	x1, x19, 2844
 	bl	print_list_info
-	add	x0, x19, 3296
-	add	x1, x19, 2830
+	add	x0, x19, 3320
+	add	x1, x19, 2846
 	bl	print_list_info
-	add	x0, x19, 3304
-	add	x1, x19, 2832
+	add	x0, x19, 3328
+	add	x1, x19, 2848
 	bl	print_list_info
-	add	x0, x19, 3256
-	add	x1, x19, 2834
+	add	x0, x19, 616
+	add	x1, x19, 2850
 	bl	print_list_info
-	add	x0, x19, 3264
-	add	x1, x19, 2836
+	add	x0, x19, 3288
+	add	x1, x19, 2852
 	bl	print_list_info
-	add	x0, x19, 3248
-	add	x1, x19, 2838
+	add	x0, x19, 3280
+	add	x1, x19, 2854
 	bl	print_list_info
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	dump_all_list_info, .-dump_all_list_info
 	.align	2
-	.global	ftl_get_blk_list_in_sblk
-	.type	ftl_get_blk_list_in_sblk, %function
-ftl_get_blk_list_in_sblk:
-	adrp	x7, .LANCHOR0
-	uxth	w0, w0
-	add	x2, x7, :lo12:.LANCHOR0
-	mov	w12, 21
-	ldr	x2, [x2,64]
-	add	x2, x2, x0, uxth 2
-	ldrb	w11, [x2,3]
-	mov	w2, 0
-	mov	w6, w2
-.L813:
+	.global	ftl_tmp_into_update
+	.type	ftl_tmp_into_update, %function
+ftl_tmp_into_update:
+	adrp	x0, .LANCHOR0+2864
+	ldr	x0, [x0,#:lo12:.LANCHOR0+2864]
+	ldr	w2, [x0,16]
+	cmp	w2, 2048
+	bls	.L896
+	lsr	w1, w2, 11
+	ldr	w3, [x0,20]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 11
+	str	w3, [x0,20]
+	str	w1, [x0,16]
+.L896:
+	ldr	w2, [x0,24]
+	cmp	w2, 2048
+	bls	.L897
+	lsr	w1, w2, 11
+	ldr	w3, [x0,28]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 11
+	str	w3, [x0,28]
+	str	w1, [x0,24]
+.L897:
+	ldr	w2, [x0,32]
+	cmp	w2, 1024
+	bls	.L898
+	lsr	w1, w2, 10
+	ldr	w3, [x0,36]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 10
+	str	w3, [x0,36]
+	str	w1, [x0,32]
+.L898:
+	ldr	w2, [x0,40]
+	cmp	w2, 1024
+	bls	.L895
+	lsr	w1, w2, 10
+	ldr	w3, [x0,44]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 10
+	str	w3, [x0,44]
+	str	w1, [x0,40]
+.L895:
+	ret
+	.size	ftl_tmp_into_update, .-ftl_tmp_into_update
+	.align	2
+	.global	ftl_get_blk_list_in_sblk
+	.type	ftl_get_blk_list_in_sblk, %function
+ftl_get_blk_list_in_sblk:
+	adrp	x7, .LANCHOR0
+	uxth	w0, w0
+	add	x2, x7, :lo12:.LANCHOR0
+	mov	w12, 21
+	ldr	x2, [x2,584]
+	add	x2, x2, x0, uxth 2
+	ldrb	w11, [x2,3]
+	mov	w2, 0
+	mov	w6, w2
+.L901:
 	add	x8, x7, :lo12:.LANCHOR0
-	ldrb	w3, [x8,3244]
+	ldrb	w3, [x8,3276]
 	cmp	w6, w3
-	bge	.L819
+	bge	.L907
 	asr	w3, w11, w6
-	tbnz	x3, 0, .L814
-	ldrb	w5, [x8,3312]
+	tbnz	x3, 0, .L902
+	ldrb	w5, [x8,3338]
 	sbfiz	x10, x2, 1, 32
-	ldrh	w3, [x8,3314]
+	ldrh	w3, [x8,3340]
 	sdiv	w9, w6, w5
 	sub	w3, w12, w3
 	lsl	w3, w9, w3
 	madd	w3, w0, w5, w3
 	uxth	w4, w3
 	strh	w4, [x1,x10]
-	ldrb	w3, [x8,3312]
+	ldrb	w3, [x8,3338]
 	cmp	w3, 1
-	bls	.L815
+	bls	.L903
 	sub	w3, w3, #1
 	and	w3, w6, w3
 	add	w3, w4, w3
 	strh	w3, [x1,x10]
-.L815:
+.L903:
 	add	w2, w2, 1
-.L814:
+.L902:
 	add	w6, w6, 1
-	b	.L813
-.L819:
+	b	.L901
+.L907:
 	mov	w0, w2
 	mov	w4, -1
-.L817:
+.L905:
 	add	x3, x7, :lo12:.LANCHOR0
-	ldrb	w3, [x3,3244]
+	ldrb	w3, [x3,3276]
 	cmp	w2, w3
-	bge	.L820
+	bge	.L908
 	strh	w4, [x1,w2,sxtw 1]
 	add	w2, w2, 1
-	b	.L817
-.L820:
+	b	.L905
+.L908:
 	ret
 	.size	ftl_get_blk_list_in_sblk, .-ftl_get_blk_list_in_sblk
 	.align	2
 	.global	ftl_free_sblk
 	.type	ftl_free_sblk, %function
 ftl_free_sblk:
-	stp	x29, x30, [sp, -48]!
+	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	uxth	x20, w0
-	add	x3, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	lsl	x21, x20, 2
-	mov	x22, x20
-	ldr	x4, [x3,64]
-	add	x2, x4, x21
-	ldrb	w0, [x2,2]
-	tbz	x0, 3, .L822
-	ldr	x5, [x3,2848]
-	ldr	w1, [x4,x21]
-	ldrh	w4, [x4,x21]
-	ldrh	w0, [x5,72]
-	ubfx	x1, x1, 11, 8
-	ldrh	w5, [x5,74]
-	ubfx	x4, x4, 0, 11
-	add	w4, w4, w5
-	ldrh	w5, [x3,3316]
-	cmp	w5, w4, uxth
-	bcc	.L823
-	add	w1, w0, w1
-	ldrh	w0, [x3,3318]
-	cmp	w0, w1, uxth
-	bcs	.L822
-.L823:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x1,2838]
-	ldrh	w3, [x1,2830]
-	add	w3, w0, w3
-	ldrh	w0, [x1,3282]
-	cmp	w3, w0
-	bge	.L824
-	ldrb	w1, [x2,2]
+	uxth	x22, w0
+	adrp	x0, .LANCHOR0
+	add	x3, x0, :lo12:.LANCHOR0
+	mov	x1, x22
+	stp	x19, x20, [sp,16]
+	lsl	x19, x22, 2
+	mov	x21, x0
+	ldr	x7, [x3,584]
+	add	x20, x7, x19
+	ldrb	w2, [x20,2]
+	tbz	x2, 3, .L911
+	ldr	x6, [x3,2864]
+	ldrh	w4, [x7,x19]
+	ldrh	w10, [x3,3342]
+	ldrh	w0, [x6,74]
+	and	w5, w4, 2047
+	ldr	w4, [x7,x19]
+	add	w0, w5, w0
+	ldrh	w6, [x6,72]
+	ubfx	x9, x4, 11, 8
+	ldrh	w4, [x3,592]
+	uxth	w8, w0
+	add	w6, w9, w6
+	uxth	w0, w6
+	udiv	w6, w8, w4
+	add	w6, w0, w6
+	cmp	w6, w10
+	ble	.L912
+	ldrh	w0, [x3,2846]
+	ldrh	w6, [x3,2854]
+	add	w6, w6, w0
+	ldrh	w0, [x3,3308]
+	add	w0, w0, 8
+	cmp	w6, w0
+	blt	.L928
+	ldrh	w0, [x3,2844]
+	ldrh	w6, [x3,2850]
+	add	w6, w6, w0
+	ldrh	w0, [x3,2852]
+	add	w6, w6, w0
+	ldrh	w0, [x3,3344]
+	add	w0, w0, 8
+	cmp	w6, w0
+	bge	.L928
+	b	.L917
+.L912:
+	madd	w0, w0, w4, w8
+	ldrh	w6, [x3,3346]
+	cmp	w0, w6
+	ble	.L914
+	ldrh	w0, [x3,2844]
+	ldrh	w6, [x3,2850]
+	add	w6, w6, w0
+	ldrh	w0, [x3,2852]
+	add	w6, w6, w0
+	ldrh	w0, [x3,3344]
+	add	w0, w0, 8
+	cmp	w6, w0
+	blt	.L917
+	ldrh	w0, [x3,2846]
+	ldrh	w6, [x3,2854]
+	add	w6, w6, w0
+	ldrh	w0, [x3,3308]
+	add	w0, w0, 8
+	cmp	w6, w0
+	bge	.L917
+.L928:
 	mov	w0, 2
-	bfi	w1, w0, 3, 2
-	b	.L828
-.L824:
-	ldrh	w0, [x1,2834]
-	ldrh	w3, [x1,2828]
-	ldrh	w4, [x1,2836]
-	add	w3, w0, w3
-	ldrh	w0, [x1,3320]
-	add	w3, w3, w4
-	cmp	w3, w0
-	bge	.L822
-	ldrb	w1, [x2,2]
-	and	w1, w1, -25
-.L828:
-	strb	w1, [x2,2]
-.L822:
-	mov	w0, w22
-	add	x19, x19, :lo12:.LANCHOR0
+	bfi	w2, w0, 3, 2
+	b	.L926
+.L917:
+	and	w2, w2, -25
+.L926:
+	strb	w2, [x20,2]
+.L914:
+	ldrb	w0, [x20,2]
+	ands	w0, w0, 24
+	bne	.L918
+	mul	w4, w9, w4
+	ldrh	w0, [x7,x19]
+	add	w4, w4, w4, lsl 1
+	add	w4, w5, w4, lsr 2
+	ubfx	x5, x4, 2, 9
+	bfi	w0, w5, 0, 11
+	strh	w0, [x7,x19]
+	b	.L911
+.L918:
+	cmp	w0, 16
+	bne	.L911
+	sdiv	w4, w5, w4
+	ldr	w0, [x7,x19]
+	add	w4, w4, w4, lsl 1
+	add	w4, w9, w4, lsr 2
+	ubfx	x4, x4, 2, 6
+	bfi	w0, w4, 11, 8
+	str	w0, [x7,x19]
+.L911:
+	mov	w0, w1
+	str	x1, [x29,56]
 	bl	zftl_remove_data_node
-	mov	w0, w22
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x1, [x29,56]
+	ldr	x2, [x0,584]
+	add	x2, x2, x19
+	ldrb	w3, [x2,2]
+	and	w3, w3, 31
+	strb	w3, [x2,2]
+	ldr	x2, [x0,600]
+	strh	wzr, [x2,x22,lsl 1]
+	ldrb	w2, [x20,2]
+	tbz	x2, 3, .L920
+	ldr	x2, [x0,608]
+	ldrh	w0, [x2,584]
+	cmp	w0, w1
+	bne	.L921
+	mov	w0, -1
+	ldrh	w3, [x2,588]
+	strh	w0, [x2,584]
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L921
+	adrp	x0, .LC98
+	strh	w1, [x2,588]
+	add	x0, x0, :lo12:.LC98
+	b	.L927
+.L921:
+	ldrh	w0, [x2,586]
+	cmp	w0, w1
+	bne	.L920
+	mov	w0, -1
+	ldrh	w3, [x2,590]
+	strh	w0, [x2,586]
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L920
+	adrp	x0, .LC99
+	strh	w1, [x2,590]
+	add	x0, x0, :lo12:.LC99
+.L927:
+	bl	printk
+	b	.L909
+.L920:
+	mov	w0, w1
 	bl	zftl_insert_free_list
-	ldr	x0, [x19,64]
-	add	x0, x0, x21
-	ldrb	w1, [x0,2]
-	and	w1, w1, 31
-	strb	w1, [x0,2]
-	ldr	x0, [x19,72]
-	strh	wzr, [x0,x20,lsl 1]
+.L909:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 48
+	ldp	x29, x30, [sp], 64
 	ret
 	.size	ftl_free_sblk, .-ftl_free_sblk
 	.align	2
@@ -5207,128 +5697,131 @@ gc_free_src_blk:
 	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	mov	w20, 0
-	add	x24, x23, 2888
-	add	x21, x21, 1344
-.L830:
+	add	x24, x23, 2896
+	add	x21, x21, 1352
+.L930:
 	ldrh	w0, [x24,56]
 	adrp	x25, .LANCHOR0
 	cmp	w0, w20
-	bls	.L868
+	bls	.L968
 	add	x0, x24, x20, sxtw 1
 	ldrh	w22, [x0,58]
-	ldr	x0, [x23,72]
+	ldr	x0, [x23,600]
 	lsl	x26, x22, 1
 	mov	x19, x22
 	ldrh	w2, [x0,x26]
-	cbz	w2, .L831
-	adrp	x0, .LC93
+	cbz	w2, .L931
+	adrp	x0, .LC100
 	mov	w1, w22
-	add	x0, x0, :lo12:.LC93
+	add	x0, x0, :lo12:.LC100
 	bl	printk
-.L831:
+.L931:
 	add	x0, x25, :lo12:.LANCHOR0
-	ldr	x1, [x0,72]
+	ldr	x1, [x0,600]
+	strh	wzr, [x1,x26]
+	ldr	x1, [x0,600]
 	ldrh	w1, [x1,x26]
-	cbnz	w1, .L832
-	ldr	x0, [x0,64]
+	cbnz	w1, .L932
+	ldr	x0, [x0,584]
 	add	x22, x0, x22, lsl 2
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L833
+	tbz	x0, 8, .L933
 	ldrb	w2, [x22,2]
-	adrp	x0, .LC94
-	add	x0, x0, :lo12:.LC94
+	adrp	x0, .LC101
+	add	x0, x0, :lo12:.LC101
 	mov	w1, w19
 	ubfx	x2, x2, 5, 3
 	bl	printk
-.L833:
+.L933:
 	ldrb	w0, [x22,2]
 	tst	w0, 192
-	beq	.L846
+	beq	.L946
 	and	w0, w0, 224
 	cmp	w0, 224
-	bne	.L834
-.L846:
+	bne	.L934
+.L946:
 	adrp	x0, .LC0
 	mov	x1, x21
+	mov	w2, 798
 	add	x0, x0, :lo12:.LC0
-	mov	w2, 770
 	bl	printk
-.L834:
+	bl	dump_stack
+.L934:
 	mov	w0, w19
 	add	x25, x25, :lo12:.LANCHOR0
 	bl	ftl_free_sblk
-	ldr	x2, [x25,80]
+	ldr	x2, [x25,608]
 	ldrh	w1, [x2,124]
-	cbz	w1, .L836
+	cbz	w1, .L936
 	mov	x0, 0
-.L838:
+.L938:
 	add	x4, x2, x0, lsl 1
 	mov	w3, w0
 	ldrh	w4, [x4,392]
 	cmp	w4, w19
-	bne	.L837
+	bne	.L937
 	add	x0, x2, x3, sxtw 1
 	mov	w3, -1
 	strh	w3, [x0,392]
 	sub	w1, w1, #1
 	strh	w1, [x2,124]
-	b	.L836
-.L837:
+	b	.L936
+.L937:
 	add	x0, x0, 1
 	cmp	x0, 64
-	bne	.L838
-.L836:
+	bne	.L938
+.L936:
 	ldrh	w1, [x2,120]
-	cbz	w1, .L839
+	cbz	w1, .L939
 	mov	x0, 0
-.L841:
+.L941:
 	add	x4, x2, x0, lsl 1
 	mov	w3, w0
 	ldrh	w4, [x4,136]
 	cmp	w4, w19
-	bne	.L840
+	bne	.L940
 	add	x0, x2, x3, sxtw 1
 	mov	w3, -1
 	strh	w3, [x0,136]
 	sub	w1, w1, #1
 	strh	w1, [x2,120]
-	b	.L839
-.L840:
+	b	.L939
+.L940:
 	add	x0, x0, 1
 	cmp	x0, 64
-	bne	.L841
-.L839:
+	bne	.L941
+.L939:
 	ldrh	w1, [x2,122]
-	cbz	w1, .L842
+	cbz	w1, .L942
 	mov	x0, 0
-.L844:
+.L944:
 	add	x4, x2, x0, lsl 1
 	mov	w3, w0
 	ldrh	w4, [x4,264]
 	cmp	w4, w19
-	bne	.L843
+	bne	.L943
 	add	x0, x2, x3, sxtw 1
 	mov	w3, -1
 	strh	w3, [x0,264]
 	sub	w1, w1, #1
 	strh	w1, [x2,122]
-	b	.L842
-.L843:
+	b	.L942
+.L943:
 	add	x0, x0, 1
 	cmp	x0, 64
-	bne	.L844
-	b	.L842
-.L832:
+	bne	.L944
+	b	.L942
+.L932:
 	mov	w0, w19
 	mov	w1, 1
 	mov	w2, 0
 	bl	gc_add_sblk
-.L842:
+.L942:
 	add	w20, w20, 1
 	uxth	w20, w20
-	b	.L830
-.L868:
+	b	.L930
+.L968:
 	strh	wzr, [x24,56]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -5351,27 +5844,27 @@ ftl_erase_phy_blk:
 	stp	x19, x20, [sp,16]
 	mov	w4, 1
 	mov	w21, w1
-	ldrh	w19, [x5,3314]
+	ldrh	w19, [x5,3340]
 	mov	x20, x3
 	sub	w19, w0, w19
-	ldrb	w0, [x5,3322]
+	ldrb	w0, [x5,3348]
 	asr	w22, w2, w19
 	lsl	w19, w4, w19
 	sub	w19, w19, #1
 	and	w19, w19, w2
 	sxth	w19, w19
-	cbz	w0, .L870
-	ldrh	w2, [x5,3324]
+	cbz	w0, .L970
+	ldrh	w2, [x5,3350]
 	cmp	w1, wzr
 	mov	w0, w22
 	cset	w1, eq
 	mul	w2, w19, w2
 	bl	flash_erase_block_en
-.L870:
+.L970:
 	add	x3, x20, :lo12:.LANCHOR0
 	mov	w1, w21
 	mov	w0, w22
-	ldrh	w2, [x3,3324]
+	ldrh	w2, [x3,3350]
 	mul	w2, w19, w2
 	bl	flash_erase_block_en
 	ldp	x19, x20, [sp,16]
@@ -5394,128 +5887,128 @@ ftl_erase_sblk:
 	stp	x25, x26, [sp,64]
 	ubfiz	x20, x24, 2, 16
 	mov	w22, w1
-	ldr	x0, [x0,64]
+	ldr	x0, [x0,584]
 	mov	w19, 0
 	add	x0, x0, x20
 	ldrb	w25, [x0,3]
-.L875:
+.L975:
 	add	x2, x23, :lo12:.LANCHOR0
-	ldrb	w0, [x2,3326]
+	ldrb	w0, [x2,3352]
 	cmp	w19, w0
-	bge	.L886
-	ldrb	w3, [x2,3312]
+	bge	.L986
+	ldrb	w3, [x2,3338]
 	mov	w21, 0
-	ldrh	w2, [x2,3324]
+	ldrh	w2, [x2,3350]
 	mov	w1, w21
 	sub	w4, w3, #1
 	mul	w6, w19, w3
 	mul	w5, w24, w3
-.L887:
+.L987:
 	cmp	w1, w3
-	bge	.L900
+	bge	.L1000
 	add	w0, w1, w6
 	asr	w0, w25, w0
-	tbnz	x0, 0, .L876
+	tbnz	x0, 0, .L976
 	and	w0, w1, w4
 	add	x7, x29, 80
 	add	w0, w5, w0
 	mul	w0, w0, w2
 	str	w0, [x7,w21,sxtw 2]
 	add	w21, w21, 1
-.L876:
+.L976:
 	add	w1, w1, 1
-	b	.L887
-.L900:
+	b	.L987
+.L1000:
 	cmp	w3, 4
-	bne	.L899
+	bne	.L999
 	mov	x26, 0
-.L878:
+.L978:
 	cmp	w21, w26
-	ble	.L881
+	ble	.L981
 	add	x2, x29, 80
 	mov	w0, w19
 	mov	w1, w22
 	ldr	w2, [x2,x26,lsl 2]
 	add	x26, x26, 1
 	bl	flash_erase_block_en
-	b	.L878
-.L899:
+	b	.L978
+.L999:
 	cmp	w21, 2
-	bne	.L882
+	bne	.L982
 	add	x0, x23, :lo12:.LANCHOR0
-	ldrb	w0, [x0,3322]
-	cbz	w0, .L883
+	ldrb	w0, [x0,3348]
+	cbz	w0, .L983
 	cmp	w22, wzr
 	ldr	w2, [x29,80]
 	ldr	w3, [x29,84]
 	mov	w0, w19
 	cset	w1, eq
 	bl	flash_erase_duplane_block
-.L883:
+.L983:
 	ldr	w2, [x29,80]
 	mov	w0, w19
 	ldr	w3, [x29,84]
 	mov	w1, w22
 	bl	flash_erase_duplane_block
-	b	.L881
-.L882:
+	b	.L981
+.L982:
 	cmp	w21, 1
-	bne	.L881
+	bne	.L981
 	add	x0, x23, :lo12:.LANCHOR0
-	ldrb	w0, [x0,3322]
-	cbz	w0, .L885
+	ldrb	w0, [x0,3348]
+	cbz	w0, .L985
 	cmp	w22, wzr
 	ldr	w2, [x29,80]
 	mov	w0, w19
 	cset	w1, eq
 	bl	flash_erase_block_en
-.L885:
+.L985:
 	ldr	w2, [x29,80]
 	mov	w0, w19
 	mov	w1, w22
 	bl	flash_erase_block_en
-.L881:
+.L981:
 	add	w19, w19, 1
-	b	.L875
-.L886:
-	cbnz	w22, .L888
-	ldr	x1, [x2,64]
+	b	.L975
+.L986:
+	cbnz	w22, .L988
+	ldr	x1, [x2,584]
 	ldrh	w0, [x1,x20]
 	add	w3, w0, 1
 	bfi	w0, w3, 0, 11
 	strh	w0, [x1,x20]
-	ldr	x0, [x2,2848]
+	ldr	x0, [x2,2864]
 	ldr	w1, [x0,84]
 	ldrh	w3, [x0,96]
 	add	w1, w1, 1
 	str	w1, [x0,84]
-	ldr	x1, [x2,64]
+	ldr	x1, [x2,584]
 	ldrh	w1, [x1,x20]
 	ubfx	x1, x1, 0, 11
 	uxth	w2, w1
 	cmp	w3, w2
-	bge	.L890
+	bge	.L990
 	strh	w1, [x0,96]
-	b	.L890
-.L888:
-	ldr	x3, [x2,64]
+	b	.L990
+.L988:
+	ldr	x3, [x2,584]
 	ldr	w0, [x3,x20]
 	ubfx	x1, x0, 11, 8
 	add	w1, w1, 1
 	bfi	w0, w1, 11, 8
 	str	w0, [x3,x20]
-	ldr	x0, [x2,2848]
+	ldr	x0, [x2,2864]
 	ldr	w1, [x0,80]
 	add	w1, w1, 1
 	str	w1, [x0,80]
-	ldr	x1, [x2,64]
+	ldr	x1, [x2,584]
 	ldrh	w2, [x0,98]
 	ldr	w1, [x1,x20]
 	ubfx	x1, x1, 11, 8
 	cmp	w2, w1, uxtb
-	bcs	.L890
+	bcs	.L990
 	strh	w1, [x0,98]
-.L890:
+.L990:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -5534,41 +6027,42 @@ ftl_alloc_sys_blk:
 	add	x1, x0, :lo12:.LANCHOR0
 	str	x19, [sp,16]
 	mov	x19, x0
-	ldr	x1, [x1,2848]
+	ldr	x1, [x1,2864]
 	ldrh	w2, [x1,136]
 	cmp	w2, 63
-	bls	.L902
+	bls	.L1002
 	strh	wzr, [x1,136]
-.L902:
+.L1002:
 	ldrh	w0, [x1,112]
-	cbnz	w0, .L903
+	cbnz	w0, .L1003
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1118
+	add	x1, x1, 1368
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1360
-	mov	w2, 1012
 	bl	printk
-.L903:
+	bl	dump_stack
+.L1003:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w4, 65535
-	ldr	x1, [x0,2848]
-.L907:
+	ldr	x1, [x0,2864]
+.L1007:
 	ldrh	w2, [x1,136]
-.L904:
+.L1004:
 	cmp	w2, 63
-	bgt	.L910
+	bgt	.L1010
 	sxtw	x3, w2
 	add	x3, x3, 80
 	ldrh	w0, [x1,x3,lsl 1]
 	cmp	w0, w4
-	bne	.L909
+	bne	.L1009
 	add	w2, w2, 1
-	b	.L904
-.L910:
+	b	.L1004
+.L1010:
 	strh	wzr, [x1,136]
-	b	.L907
-.L909:
+	b	.L1007
+.L1009:
 	mov	w4, -1
 	strh	w4, [x1,x3,lsl 1]
 	strh	w2, [x1,136]
@@ -5590,36 +6084,37 @@ ftl_free_sys_blk:
 	uxth	w20, w0
 	add	x0, x1, :lo12:.LANCHOR0
 	mov	x19, x1
-	ldr	x2, [x0,2848]
+	ldr	x2, [x0,2864]
 	ldrh	w0, [x2,138]
 	cmp	w0, 63
-	bls	.L912
+	bls	.L1012
 	strh	wzr, [x2,138]
-.L912:
+.L1012:
 	ldrh	w0, [x2,112]
 	cmp	w0, 63
-	bls	.L913
+	bls	.L1013
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1142
+	add	x1, x1, 1392
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1384
-	mov	w2, 1036
 	bl	printk
-.L913:
+	bl	dump_stack
+.L1013:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldr	x1, [x1,2848]
-.L917:
+	ldr	x1, [x1,2864]
+.L1017:
 	ldrh	w2, [x1,138]
-.L914:
+.L1014:
 	cmp	w2, 63
-	bgt	.L919
+	bgt	.L1019
 	sxtw	x3, w2
 	add	x3, x3, 80
 	ldrh	w4, [x1,x3,lsl 1]
 	cmp	w4, w0
-	bne	.L915
+	bne	.L1015
 	strh	w20, [x1,x3,lsl 1]
 	strh	w2, [x1,138]
 	ldrh	w0, [x1,112]
@@ -5628,12 +6123,12 @@ ftl_free_sys_blk:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
-.L915:
+.L1015:
 	add	w2, w2, 1
-	b	.L914
-.L919:
+	b	.L1014
+.L1019:
 	strh	wzr, [x1,138]
-	b	.L917
+	b	.L1017
 	.size	ftl_free_sys_blk, .-ftl_free_sys_blk
 	.align	2
 	.global	ftl_info_data_recovery
@@ -5647,77 +6142,77 @@ ftl_info_data_recovery:
 	str	x23, [sp,48]
 	ldrh	w2, [x0]
 	cmp	w2, w1
-	beq	.L920
+	beq	.L1020
 	adrp	x19, .LANCHOR0
 	ubfiz	x20, x2, 2, 16
 	add	x23, x19, :lo12:.LANCHOR0
-	ldr	x21, [x23,64]
+	ldr	x21, [x23,584]
 	add	x22, x21, x20
 	ldrb	w1, [x22,2]
 	tst	w1, 224
-	bne	.L920
+	bne	.L1020
 	ldrb	w0, [x0,4]
 	bfi	w1, w0, 5, 3
 	mov	w0, w2
 	strb	w1, [x22,2]
 	bl	zftl_remove_free_node
 	ldrb	w0, [x22,2]
-	tbz	x0, 3, .L924
-	ldr	x1, [x23,2848]
+	tbz	x0, 3, .L1024
+	ldr	x1, [x23,2864]
 	ldrh	w0, [x1,116]
 	sub	w0, w0, #1
 	strh	w0, [x1,116]
-	b	.L925
-.L924:
+	b	.L1025
+.L1024:
 	tst	w0, 24
-	ldr	x1, [x23,2848]
-	bne	.L926
+	ldr	x1, [x23,2864]
+	bne	.L1026
 	ldrh	w0, [x1,114]
 	sub	w0, w0, #1
 	strh	w0, [x1,114]
-	b	.L925
-.L926:
+	b	.L1025
+.L1026:
 	ldrh	w0, [x1,118]
 	sub	w0, w0, #1
 	strh	w0, [x1,118]
-.L925:
+.L1025:
 	ldrb	w0, [x22,2]
 	and	w0, w0, 224
 	cmp	w0, 160
-	bne	.L927
+	bne	.L1027
 	ldr	w0, [x21,x20]
 	add	x19, x19, :lo12:.LANCHOR0
 	ubfx	x1, x0, 11, 8
 	add	w1, w1, 1
 	bfi	w0, w1, 11, 8
 	str	w0, [x21,x20]
-	ldr	x1, [x19,2848]
+	ldr	x1, [x19,2864]
 	ldrh	w0, [x1,120]
 	sub	w0, w0, #1
 	strh	w0, [x1,120]
-	b	.L920
-.L927:
+	b	.L1020
+.L1027:
 	ldrh	w1, [x21,x20]
 	cmp	w0, 64
 	add	w2, w1, 1
 	bfi	w1, w2, 0, 11
 	strh	w1, [x21,x20]
-	bne	.L928
+	bne	.L1028
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,2848]
+	ldr	x1, [x19,2864]
 	ldrh	w0, [x1,122]
 	sub	w0, w0, #1
 	strh	w0, [x1,122]
-	b	.L920
-.L928:
+	b	.L1020
+.L1028:
 	cmp	w0, 96
-	bne	.L920
+	bne	.L1020
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,2848]
+	ldr	x1, [x19,2864]
 	ldrh	w0, [x1,124]
 	sub	w0, w0, #1
 	strh	w0, [x1,124]
-.L920:
+.L1020:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -5736,19 +6231,19 @@ ftl_get_ppa_from_index:
 	stp	x19, x20, [sp,16]
 	str	x21, [sp,32]
 	mov	x19, x2
-	ldrh	w0, [x4,3276]
-	ldr	x3, [x4,80]
-	ldrb	w4, [x4,3244]
+	ldrh	w0, [x4,3300]
+	ldr	x3, [x4,608]
+	ldrb	w4, [x4,3276]
 	mul	w0, w0, w4
 	cmp	w1, w0
-	bge	.L930
+	bge	.L1030
 	add	x3, x3, 16
-	b	.L931
-.L930:
+	b	.L1031
+.L1030:
 	sub	w1, w1, w0
 	add	x3, x3, 48
 	uxth	w1, w1
-.L931:
+.L1031:
 	ldrb	w2, [x3,9]
 	mov	w0, 65535
 	sdiv	w20, w1, w2
@@ -5756,17 +6251,18 @@ ftl_get_ppa_from_index:
 	add	x1, x3, x1, uxth 1
 	ldrh	w21, [x1,16]
 	cmp	w21, w0
-	bne	.L932
+	bne	.L1032
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1529
+	add	x1, x1, 1416
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1408
-	mov	w2, 1421
 	bl	printk
-.L932:
+	bl	dump_stack
+.L1032:
 	add	x2, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x2,3324]
+	ldrh	w0, [x2,3350]
 	madd	w0, w21, w0, w20
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
@@ -5783,25 +6279,25 @@ lpa_hash_get_ppa:
 	add	x2, x1, x0, uxtb 1
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldrh	w2, [x2,3328]
-	ldr	x4, [x1,3840]
-	ldr	x5, [x1,3848]
-.L934:
+	ldrh	w2, [x2,3360]
+	ldr	x4, [x1,3872]
+	ldr	x5, [x1,3880]
+.L1034:
 	cmp	w2, w3
-	beq	.L938
+	beq	.L1038
 	uxtw	x1, w2
 	ldr	w6, [x4,x1,lsl 2]
 	cmp	w6, w0
-	bne	.L935
+	bne	.L1035
 	mov	w0, w2
 	bl	ftl_get_ppa_from_index
-	b	.L936
-.L935:
+	b	.L1036
+.L1035:
 	ldrh	w2, [x5,x1,lsl 1]
-	b	.L934
-.L938:
+	b	.L1034
+.L1038:
 	mov	w0, -1
-.L936:
+.L1036:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	lpa_hash_get_ppa, .-lpa_hash_get_ppa
@@ -5816,68 +6312,71 @@ ftl_get_new_free_page:
 	ldrh	w1, [x0]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L940
+	bne	.L1040
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1644
+	add	x1, x1, 1440
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1432
-	mov	w2, 1536
 	bl	printk
-.L940:
+	bl	dump_stack
+.L1040:
 	adrp	x20, .LANCHOR0
 	ldrh	w1, [x19,2]
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3276]
+	ldrh	w0, [x0,3300]
 	cmp	w1, w0
-	bne	.L941
+	bne	.L1041
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1645
+	add	x1, x1, 1440
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1432
-	mov	w2, 1537
 	bl	printk
-.L941:
+	bl	dump_stack
+.L1041:
 	ldrh	w0, [x19,6]
-	cbnz	w0, .L942
+	cbnz	w0, .L1042
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1646
+	add	x1, x1, 1440
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1432
-	mov	w2, 1538
 	bl	printk
-.L942:
+	bl	dump_stack
+.L1042:
 	ldrb	w0, [x19,5]
 	add	x1, x20, :lo12:.LANCHOR0
 	add	x0, x0, 8
-	ldrb	w2, [x1,3244]
+	ldrb	w2, [x1,3276]
 	mov	w1, 65535
 	ldrh	w0, [x19,x0,lsl 1]
-.L943:
+.L1043:
 	cmp	w0, w1
-	bne	.L947
+	bne	.L1047
 	ldrb	w0, [x19,5]
 	add	w0, w0, 1
 	uxtb	w0, w0
 	strb	w0, [x19,5]
 	cmp	w0, w2
-	bne	.L944
+	bne	.L1044
 	ldrh	w0, [x19,2]
 	strb	wzr, [x19,5]
 	add	w0, w0, 1
 	strh	w0, [x19,2]
-.L944:
+.L1044:
 	ldrb	w0, [x19,5]
 	add	x0, x0, 8
 	ldrh	w0, [x19,x0,lsl 1]
-	b	.L943
-.L947:
+	b	.L1043
+.L1047:
 	add	x20, x20, :lo12:.LANCHOR0
 	ldrh	w2, [x19,2]
-	ldrh	w1, [x20,3324]
-	ldrb	w3, [x20,3244]
+	ldrh	w1, [x20,3350]
+	ldrb	w3, [x20,3276]
 	mul	w0, w0, w1
 	ldrh	w1, [x19,6]
 	orr	w0, w0, w2
@@ -5891,11 +6390,11 @@ ftl_get_new_free_page:
 	uxtb	w1, w1
 	strb	w1, [x19,5]
 	cmp	w3, w1
-	bne	.L946
+	bne	.L1046
 	add	w2, w2, 1
 	strb	wzr, [x19,5]
 	strh	w2, [x19,2]
-.L946:
+.L1046:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -5913,24 +6412,25 @@ ftl_ext_alloc_new_blk:
 	mov	w1, 65533
 	sub	w0, w0, #1
 	cmp	w1, w0, uxth
-	bcs	.L949
+	bcs	.L1049
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 1677
+	add	x1, x1, 1464
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1456
-	mov	w2, 1569
 	bl	printk
-.L949:
+	bl	dump_stack
+.L1049:
 	adrp	x19, .LANCHOR0
 	mov	w1, 0
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, w20
 	bl	ftl_erase_phy_blk
-	ldr	x0, [x19,2848]
+	ldr	x0, [x19,2864]
 	ldrh	w0, [x0,130]
 	bl	ftl_free_sys_blk
-	ldr	x0, [x19,2848]
+	ldr	x0, [x19,2864]
 	strh	w20, [x0,130]
 	strh	wzr, [x0,140]
 	mov	w0, 0
@@ -5944,52 +6444,52 @@ ftl_ext_alloc_new_blk:
 ftl_total_vpn_update:
 	adrp	x1, .LANCHOR0
 	add	x3, x1, :lo12:.LANCHOR0
-	ldrh	w2, [x3,3856]
-	cbnz	w0, .L951
+	ldrh	w2, [x3,3888]
+	cbnz	w0, .L1051
 	cmp	w2, 4
-	bhi	.L951
+	bhi	.L1051
 	add	w2, w2, 1
-	strh	w2, [x3,3856]
-	b	.L950
-.L951:
+	strh	w2, [x3,3888]
+	b	.L1050
+.L1051:
 	add	x0, x1, :lo12:.LANCHOR0
 	mov	w9, 65535
-	strh	wzr, [x0,3856]
-	ldrh	w6, [x0,56]
-	ldr	x7, [x0,72]
-	ldr	x8, [x0,64]
+	strh	wzr, [x0,3888]
+	ldrh	w6, [x0,576]
+	ldr	x7, [x0,600]
+	ldr	x8, [x0,584]
 	mov	x0, 0
 	mov	w2, w0
 	mov	w3, w0
-.L953:
+.L1053:
 	cmp	w6, w0, uxth
-	bls	.L961
+	bls	.L1061
 	ldrh	w4, [x7,x0,lsl 1]
 	cmp	w4, w9
-	beq	.L954
+	beq	.L1054
 	add	x5, x8, x0, lsl 2
 	ldrb	w5, [x5,2]
 	and	w5, w5, 224
 	cmp	w5, 160
-	bne	.L955
+	bne	.L1055
 	add	w2, w2, w4
-	b	.L954
-.L955:
+	b	.L1054
+.L1055:
 	add	w3, w3, w4
-.L954:
+.L1054:
 	add	x0, x0, 1
-	b	.L953
-.L961:
+	b	.L1053
+.L1061:
 	add	x1, x1, :lo12:.LANCHOR0
-	ldr	x0, [x1,80]
-	ldr	x1, [x1,2848]
+	ldr	x0, [x1,608]
+	ldr	x1, [x1,2864]
 	str	w3, [x0,524]
 	str	w2, [x0,528]
 	ldrh	w1, [x1,120]
-	cbz	w1, .L950
+	cbz	w1, .L1050
 	udiv	w2, w2, w1
 	str	w2, [x0,532]
-.L950:
+.L1050:
 	ret
 	.size	ftl_total_vpn_update, .-ftl_total_vpn_update
 	.align	2
@@ -6010,12 +6510,16 @@ ftl_vpn_update:
 	mov	w0, w19
 	ubfiz	x19, x19, 1, 16
 	bl	zftl_list_update_data_list
-	adrp	x0, .LANCHOR0+72
-	ldr	x0, [x0,#:lo12:.LANCHOR0+72]
-	ldrh	w0, [x0,x19]
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldr	x0, [x1,600]
+	ldrh	w2, [x0,x19]
+	mov	w0, 0
+	cbnz	w2, .L1064
+	mov	w0, 1
+	str	w0, [x1,2884]
+.L1064:
 	ldr	x19, [sp,16]
-	cmp	w0, wzr
-	cset	w0, eq
 	ldp	x29, x30, [sp], 32
 	ret
 	.size	ftl_vpn_update, .-ftl_vpn_update
@@ -6030,42 +6534,51 @@ ftl_vpn_decrement:
 	str	x19, [sp,16]
 	cmp	w1, w0
 	adrp	x2, .LANCHOR0
-	beq	.L965
+	beq	.L1067
 	add	x0, x2, :lo12:.LANCHOR0
 	ubfiz	x3, x1, 1, 16
-	ldr	x0, [x0,72]
+	ldr	x0, [x0,600]
 	ldrh	w19, [x0,x3]
-	cbnz	w19, .L966
-	adrp	x0, .LC95
+	cbnz	w19, .L1068
+	adrp	x0, .LC102
 	mov	w2, w19
-	add	x0, x0, :lo12:.LC95
+	add	x0, x0, :lo12:.LC102
 	bl	printk
-	b	.L970
-.L966:
+	b	.L1074
+.L1068:
 	sub	w19, w19, #1
 	strh	w19, [x0,x3]
-.L965:
+.L1067:
 	add	x19, x2, :lo12:.LANCHOR0
 	mov	w0, 0
-	ldrh	w2, [x19,3858]
+	ldrh	w2, [x19,3224]
 	cmp	w2, w1
-	beq	.L967
+	beq	.L1069
 	mov	w0, 65535
 	cmp	w2, w0
-	bne	.L968
-	strh	w1, [x19,3858]
-.L970:
+	bne	.L1070
+	strh	w1, [x19,3224]
+.L1074:
 	mov	w0, 0
-	b	.L967
-.L968:
+	b	.L1069
+.L1070:
 	mov	w0, w2
 	str	x1, [x29,40]
 	bl	ftl_vpn_update
 	cmp	w0, wzr
-	ldr	x1, [x29,40]
+	ldrh	w3, [x19,3890]
 	cset	w0, ne
-	strh	w1, [x19,3858]
-.L967:
+	ldrh	w2, [x19,3224]
+	add	w3, w3, 1
+	ldr	x1, [x29,40]
+	strh	w1, [x19,3224]
+	uxth	w3, w3
+	cmp	w3, 7
+	csel	w3, w3, wzr, ls
+	strh	w3, [x19,3890]
+	add	x3, x19, x3, uxth 1
+	strh	w2, [x3,3232]
+.L1069:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -6078,73 +6591,73 @@ lpa_hash_update_ppa:
 	uxtb	w5, w0
 	add	x6, x3, :lo12:.LANCHOR0
 	uxth	w2, w2
-	add	x4, x6, 3328
+	add	x4, x6, 3360
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x8, [x6,3840]
-	ldr	x12, [x6,3848]
+	ldr	x8, [x6,3872]
+	ldr	x12, [x6,3880]
 	mov	w6, 65535
 	ldrh	w4, [x4,w5,sxtw 1]
 	mov	w11, w6
-.L972:
+.L1076:
 	cmp	w4, w11
-	beq	.L976
+	beq	.L1080
 	uxtw	x9, w4
 	uxth	x7, w4
 	lsl	x10, x9, 2
 	add	x13, x8, x10
 	ldr	w10, [x8,x10]
 	cmp	w10, w0
-	bne	.L973
+	bne	.L1077
 	mov	w4, -1
 	str	w4, [x13]
 	mov	w4, 65535
 	cmp	w6, w4
 	add	x4, x3, :lo12:.LANCHOR0
-	bne	.L974
-	ldr	x6, [x4,3848]
-	add	x4, x4, 3328
+	bne	.L1078
+	ldr	x6, [x4,3880]
+	add	x4, x4, 3360
 	ldrh	w6, [x6,x7,lsl 1]
 	strh	w6, [x4,w5,sxtw 1]
-	b	.L975
-.L974:
-	ldr	x4, [x4,3848]
+	b	.L1079
+.L1078:
+	ldr	x4, [x4,3880]
 	ldrh	w8, [x4,x7,lsl 1]
 	strh	w8, [x4,w6,uxtw 1]
-.L975:
+.L1079:
 	add	x4, x3, :lo12:.LANCHOR0
 	mov	w6, -1
-	ldr	x4, [x4,3848]
+	ldr	x4, [x4,3880]
 	strh	w6, [x4,x7,lsl 1]
-	b	.L976
-.L973:
+	b	.L1080
+.L1077:
 	mov	w6, w4
 	ldrh	w4, [x12,x9,lsl 1]
-	b	.L972
-.L976:
+	b	.L1076
+.L1080:
 	add	x3, x3, :lo12:.LANCHOR0
 	uxtw	x4, w2
 	cmn	w1, #1
-	ldr	x6, [x3,3840]
+	ldr	x6, [x3,3872]
 	str	w0, [x6,x4,lsl 2]
-	add	x0, x3, 3328
+	add	x0, x3, 3360
 	ldrh	w6, [x0,w5,sxtw 1]
 	strh	w2, [x0,w5,sxtw 1]
-	ldr	x0, [x3,3848]
+	ldr	x0, [x3,3880]
 	strh	w6, [x0,x4,lsl 1]
-	beq	.L978
-	ldrh	w0, [x3,3314]
+	beq	.L1082
+	ldrh	w0, [x3,3340]
 	mov	w2, 21
 	mov	w4, 1
 	sub	w2, w2, w0
 	lsr	w1, w1, w0
 	lsl	w2, w4, w2
-	ldrb	w0, [x3,3312]
+	ldrb	w0, [x3,3338]
 	sub	w2, w2, #1
 	and	w1, w2, w1
 	udiv	w0, w1, w0
 	bl	ftl_vpn_decrement
-.L978:
+.L1082:
 	mov	w0, -1
 	ldp	x29, x30, [sp], 16
 	ret
@@ -6163,36 +6676,36 @@ ftl_mask_bad_block:
 	str	x21, [sp,32]
 	ubfx	x21, x0, 21, 3
 	mov	x19, x3
-	ldrh	w5, [x1,3314]
+	ldrh	w5, [x1,3340]
 	sub	w2, w2, w5
 	lsr	w0, w0, w5
 	lsl	w2, w4, w2
 	sub	w2, w2, #1
 	and	w0, w2, w0
-	ldrb	w2, [x1,3312]
+	ldrb	w2, [x1,3338]
 	udiv	w2, w0, w2
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
 	uxth	w20, w2
-	tbz	x0, 14, .L983
-	adrp	x0, .LC96
+	tbz	x0, 14, .L1087
+	adrp	x0, .LC103
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC96
+	add	x0, x0, :lo12:.LC103
 	mov	w2, w20
 	bl	printk
-.L983:
+.L1087:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0,56]
+	ldrh	w1, [x0,576]
 	cmp	w1, w20
-	bls	.L982
-	ldr	x0, [x0,64]
+	bls	.L1086
+	ldr	x0, [x0,584]
 	add	x20, x0, x20, uxth 2
 	mov	w0, 1
 	lsl	w1, w0, w21
 	ldrb	w0, [x20,3]
 	orr	w1, w1, w0
 	strb	w1, [x20,3]
-.L982:
+.L1086:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -6208,39 +6721,39 @@ print_ftl_debug_info:
 	str	x19, [sp,48]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x7, [x19,80]
-	ldrh	w6, [x19,2838]
-	ldrh	w1, [x19,2828]
+	ldr	x7, [x19,608]
+	ldrh	w6, [x19,2854]
+	ldrh	w1, [x19,2844]
 	ldr	w0, [x7,528]
 	str	w0, [sp]
-	ldr	w0, [x19,2824]
+	ldr	w0, [x19,2840]
 	str	w0, [sp,8]
-	adrp	x0, .LC97
-	ldrh	w2, [x19,2830]
-	add	x0, x0, :lo12:.LC97
+	adrp	x0, .LC104
+	ldrh	w2, [x19,2846]
+	add	x0, x0, :lo12:.LC104
 	ldr	w7, [x7,524]
-	ldrh	w3, [x19,2832]
-	ldrh	w4, [x19,2834]
-	ldrh	w5, [x19,2836]
-	bl	printk
-	ldr	x5, [x19,2848]
-	adrp	x0, .LC98
-	ldrb	w3, [x19,2841]
-	add	x0, x0, :lo12:.LC98
+	ldrh	w3, [x19,2848]
+	ldrh	w4, [x19,2850]
+	ldrh	w5, [x19,2852]
+	bl	printk
+	ldr	x5, [x19,2864]
+	adrp	x0, .LC105
+	ldrb	w3, [x19,2857]
+	add	x0, x0, :lo12:.LC105
 	ldr	w4, [x5,8]
 	ldr	w1, [x5,20]
 	ldr	w2, [x5,28]
 	ldr	w5, [x5,64]
 	bl	printk
-	ldr	x2, [x19,2848]
-	adrp	x0, .LC99
-	add	x0, x0, :lo12:.LC99
+	ldr	x2, [x19,2864]
+	adrp	x0, .LC106
+	add	x0, x0, :lo12:.LC106
 	ldr	w3, [x2,16]
 	ldr	w1, [x2,52]
 	ldr	w2, [x2,60]
 	lsr	w3, w3, 11
 	bl	printk
-	ldr	x7, [x19,2848]
+	ldr	x7, [x19,2864]
 	ldrh	w0, [x7,90]
 	ldrh	w6, [x7,72]
 	ldrh	w1, [x7,74]
@@ -6252,18 +6765,18 @@ print_ftl_debug_info:
 	str	w0, [sp,8]
 	ldrh	w0, [x7,98]
 	str	w0, [sp,16]
-	adrp	x0, .LC100
-	add	x0, x0, :lo12:.LC100
+	adrp	x0, .LC107
+	add	x0, x0, :lo12:.LC107
 	ldr	w2, [x7,84]
 	ldr	w7, [x7,80]
 	bl	printk
-	ldrh	w1, [x19,2858]
-	adrp	x0, .LC101
-	ldrh	w2, [x19,2860]
-	add	x0, x0, :lo12:.LC101
-	ldrh	w3, [x19,2862]
-	ldrh	w4, [x19,2864]
-	ldrh	w5, [x19,2856]
+	ldrh	w1, [x19,2874]
+	adrp	x0, .LC108
+	ldrh	w2, [x19,2876]
+	add	x0, x0, :lo12:.LC108
+	ldrh	w3, [x19,2878]
+	ldrh	w4, [x19,2880]
+	ldrh	w5, [x19,2872]
 	bl	printk
 	sub	sp, x29, #32
 	ldr	x19, [sp,48]
@@ -6280,62 +6793,64 @@ ftl_write_buf:
 	stp	x19, x20, [sp,16]
 	str	x21, [sp,32]
 	mov	x20, x0
-	cbnz	x0, .L990
+	cbnz	x0, .L1094
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
-	mov	w2, 639
-	add	x1, x1, 1480
+	mov	w2, 661
+	add	x1, x1, 1488
 	add	x0, x0, :lo12:.LC0
 	bl	printk
+	bl	dump_stack
 	bl	print_ftl_debug_info
 	mov	w0, -1
-	b	.L999
-.L990:
+	b	.L1103
+.L1094:
 	adrp	x19, .LANCHOR0
 	ldrb	w1, [x20,56]
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2816]
+	ldrb	w0, [x0,2832]
 	cmp	w1, w0
-	bls	.L995
+	bls	.L1099
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 666
+	add	x1, x1, 1488
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1480
-	mov	w2, 644
 	bl	printk
-.L995:
+	bl	dump_stack
+.L1099:
 	ldrb	w0, [x20,56]
-	cbz	w0, .L992
+	cbz	w0, .L1096
 	add	x21, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x21,2816]
+	ldrb	w1, [x21,2832]
 	cmp	w1, w0
-	bcs	.L993
-.L992:
+	bcs	.L1097
+.L1096:
 	mov	x0, x20
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	buf_free
-	ldrb	w0, [x19,2840]
-	b	.L999
-.L993:
-	add	x0, x21, 2866
+	ldrb	w0, [x19,2856]
+	b	.L1103
+.L1097:
+	add	x0, x21, 2888
 	mov	x1, x20
 	bl	buf_add_tail
-	ldr	x0, [x21,2848]
+	ldr	x0, [x21,2864]
 	ldrb	w1, [x20,56]
-	ldrb	w2, [x21,2840]
+	ldrb	w2, [x21,2856]
 	ldr	w3, [x0,16]
 	add	w2, w2, 1
 	add	w1, w3, w1
 	str	w1, [x0,16]
 	ldr	w1, [x0,32]
 	uxtb	w2, w2
-	strb	w2, [x21,2840]
+	strb	w2, [x21,2856]
 	add	w1, w1, 1
 	str	w1, [x0,32]
 	mov	w0, w2
-.L999:
+.L1103:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -6352,25 +6867,25 @@ ftl_write_completed:
 	str	x25, [sp,64]
 	stp	x21, x22, [sp,32]
 	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x21, .LC102
+	adrp	x21, .LC109
 	stp	x23, x24, [sp,48]
-	add	x22, x19, 768
+	add	x22, x19, 784
 	mov	w23, 21
 	mov	w24, 1
-	add	x21, x21, :lo12:.LC102
-.L1001:
-	ldrb	w0, [x19,3860]
+	add	x21, x21, :lo12:.LC109
+.L1105:
+	ldrb	w0, [x19,3892]
 	cmp	w0, 255
-	beq	.L1008
+	beq	.L1112
 	sbfiz	x0, x0, 6, 32
 	add	x20, x22, x0
 	add	x4, x20, 32
 	ldrb	w0, [x22,x0]
-	strb	w0, [x19,3860]
+	strb	w0, [x19,3892]
 	ldr	w0, [x20,52]
 	cmn	w0, #1
-	bne	.L1002
-	ldrh	w2, [x19,3314]
+	bne	.L1106
+	ldrh	w2, [x19,3340]
 	mov	x0, x21
 	ldr	w3, [x4,8]
 	sub	w1, w23, w2
@@ -6378,7 +6893,7 @@ ftl_write_completed:
 	lsr	w2, w3, w2
 	sub	w1, w1, #1
 	and	w2, w1, w2
-	ldrb	w1, [x19,3312]
+	ldrb	w1, [x19,3338]
 	udiv	w1, w2, w1
 	ldr	w2, [x4,4]
 	uxth	w25, w1
@@ -6388,39 +6903,39 @@ ftl_write_completed:
 	mov	w0, w25
 	mov	w2, 0
 	bl	gc_add_sblk
-	ldr	x0, [x19,80]
+	ldr	x0, [x19,608]
 	ldr	w1, [x0,556]
 	add	w1, w1, 1
 	str	w1, [x0,556]
 	ldrh	w1, [x0,16]
 	cmp	w1, w25
-	bne	.L1003
+	bne	.L1107
 	strh	wzr, [x0,22]
-	b	.L1004
-.L1003:
+	b	.L1108
+.L1107:
 	ldrh	w1, [x0,48]
 	cmp	w1, w25
-	bne	.L1004
+	bne	.L1108
 	strh	wzr, [x0,54]
-.L1004:
+.L1108:
 	mov	x0, x20
 	bl	ftl_write_buf
-	b	.L1001
-.L1002:
+	b	.L1105
+.L1106:
 	ldr	w0, [x4,4]
 	ldr	w1, [x4,12]
 	ldrh	w2, [x20,48]
 	bl	lpa_hash_update_ppa
 	ldrb	w0, [x20,2]
-	tbz	x0, 2, .L1006
+	tbz	x0, 2, .L1110
 	and	w0, w0, -3
 	strb	w0, [x20,2]
-	b	.L1001
-.L1006:
+	b	.L1105
+.L1110:
 	mov	x0, x20
 	bl	buf_free
-	b	.L1001
-.L1008:
+	b	.L1105
+.L1112:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -6429,6 +6944,53 @@ ftl_write_completed:
 	ret
 	.size	ftl_write_completed, .-ftl_write_completed
 	.align	2
+	.global	zftl_add_read_buf
+	.type	zftl_add_read_buf, %function
+zftl_add_read_buf:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	cbnz	x0, .L1114
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 948
+	add	x1, x1, 1504
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+	bl	print_ftl_debug_info
+	b	.L1113
+.L1114:
+	adrp	x19, .LANCHOR0
+	ldrb	w1, [x20,56]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2832]
+	cmp	w1, w0
+	bls	.L1117
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 953
+	add	x1, x1, 1504
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L1117:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	x1, x20
+	add	x0, x19, 3893
+	bl	buf_add_tail
+	ldrb	w0, [x19,3894]
+	add	w0, w0, 1
+	strb	w0, [x19,3894]
+.L1113:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	zftl_add_read_buf, .-zftl_add_read_buf
+	.align	2
 	.global	ftl_alloc_sblk
 	.type	ftl_alloc_sblk, %function
 ftl_alloc_sblk:
@@ -6448,32 +7010,33 @@ ftl_alloc_sblk:
 	uxth	w19, w0
 	mov	w0, 65535
 	cmp	w19, w0
-	beq	.L1011
-	adrp	x0, .LANCHOR0+64
-	ldr	x21, [x0,#:lo12:.LANCHOR0+64]
+	beq	.L1120
+	adrp	x0, .LANCHOR0+584
+	ldr	x21, [x0,#:lo12:.LANCHOR0+584]
 	add	x21, x21, x19, uxth 2
 	ldrb	w0, [x21,2]
 	tst	w0, 224
-	beq	.L1012
+	beq	.L1121
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 827
+	add	x1, x1, 1528
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1496
-	mov	w2, 757
 	bl	printk
-.L1012:
+	bl	dump_stack
+.L1121:
 	ldrb	w1, [x21,2]
 	bfi	w1, w20, 5, 3
 	ubfx	x2, x1, 3, 2
 	orr	w0, w22, w2
 	bfi	w1, w0, 3, 2
 	strb	w1, [x21,2]
-	b	.L1018
-.L1011:
-	adrp	x21, .LC103
+	b	.L1127
+.L1120:
+	adrp	x21, .LC110
 	bl	print_ftl_debug_info
-	add	x21, x21, :lo12:.LC103
+	add	x21, x21, :lo12:.LC110
 	mov	w1, w19
 	mov	w2, w20
 	mov	x0, x21
@@ -6490,11 +7053,12 @@ ftl_alloc_sblk:
 	adrp	x1, .LANCHOR1
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 837
+	add	x1, x1, 1528
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 1496
-	mov	w2, 767
 	bl	printk
-.L1018:
+	bl	dump_stack
+.L1127:
 	mov	w0, w19
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -6509,10 +7073,10 @@ sblk_init:
 	adrp	x0, .LANCHOR0
 	mov	w1, -1
 	add	x0, x0, :lo12:.LANCHOR0
-	strb	w1, [x0,3861]
-	strb	w1, [x0,3860]
-	strb	w1, [x0,2880]
-	strb	w1, [x0,3224]
+	strb	w1, [x0,2835]
+	strb	w1, [x0,3892]
+	strb	w1, [x0,3895]
+	strb	w1, [x0,3256]
 	mov	w0, 0
 	ret
 	.size	sblk_init, .-sblk_init
@@ -6521,24 +7085,24 @@ sblk_init:
 	.type	dump_sblk_queue, %function
 dump_sblk_queue:
 	stp	x29, x30, [sp, -48]!
-	adrp	x0, .LC104
+	adrp	x0, .LC111
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR0
 	str	x21, [sp,32]
 	add	x20, x20, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC104
-	ldrb	w1, [x20,3861]
+	add	x0, x0, :lo12:.LC111
+	ldrb	w1, [x20,2835]
 	bl	printk
-	ldrb	w19, [x20,3861]
+	ldrb	w19, [x20,2835]
 	cmp	w19, 255
-	beq	.L1020
-	add	x20, x20, 768
+	beq	.L1129
+	add	x20, x20, 784
 	sbfiz	x19, x19, 6, 32
-	adrp	x21, .LC105
+	adrp	x21, .LC112
 	add	x19, x20, x19
-	add	x21, x21, :lo12:.LC105
-.L1022:
+	add	x21, x21, :lo12:.LC112
+.L1131:
 	ldrb	w1, [x19,1]
 	mov	x0, x21
 	ldrb	w2, [x19,58]
@@ -6546,11 +7110,11 @@ dump_sblk_queue:
 	bl	printk
 	ldrb	w19, [x19]
 	cmp	w19, 255
-	beq	.L1020
+	beq	.L1129
 	sbfiz	x19, x19, 6, 32
 	add	x19, x20, x19
-	b	.L1022
-.L1020:
+	b	.L1131
+.L1129:
 	ldp	x19, x20, [sp,16]
 	ldr	x21, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -6564,12 +7128,12 @@ queue_lun_state:
 	mov	w5, w0
 	add	x3, x3, :lo12:.LANCHOR0
 	mov	w0, 0
-	ldrb	w2, [x3,3861]
+	ldrb	w2, [x3,2835]
 	cmp	w2, 255
-	beq	.L1030
-	ldrh	w8, [x3,3314]
+	beq	.L1139
+	ldrh	w8, [x3,3340]
 	mov	w4, 21
-	ldrb	w7, [x3,3312]
+	ldrb	w7, [x3,3338]
 	mov	w0, 1
 	sub	w4, w4, w8
 	ubfx	x9, x5, 21, 3
@@ -6578,127 +7142,145 @@ queue_lun_state:
 	sub	w4, w4, #1
 	asr	w5, w5, w8
 	uxth	w7, w7
-	adrp	x10, .L1034
+	adrp	x10, .L1142
 	uxth	w4, w4
 	and	w5, w5, w7
 	and	w5, w5, w4
-	add	x3, x3, 768
-	add	x10, x10, :lo12:.L1034
-.L1037:
+	add	x3, x3, 784
+	add	x10, x10, :lo12:.L1142
+.L1145:
 	add	x0, x3, x2, lsl 6
 	ldr	w6, [x0,40]
 	ubfx	x11, x6, 21, 3
 	cmp	w11, w9
-	bne	.L1031
+	bne	.L1140
 	lsr	w6, w6, w8
 	ldrb	w0, [x0,58]
 	and	w6, w7, w6
 	and	w6, w4, w6
 	cmp	w6, w5
-	bne	.L1032
+	bne	.L1141
 	cmp	w1, 1
-	beq	.L1035
-	b	.L1030
-.L1032:
+	beq	.L1143
+	b	.L1139
+.L1141:
 	cmp	w1, 3
-	bhi	.L1031
+	bhi	.L1140
 	ldrb	w6, [x10,w1,uxtw]
-	adr	x11, .Lrtx1034
+	adr	x11, .Lrtx1142
 	add	x6, x11, w6, sxtb #2
 	br	x6
-.Lrtx1034:
+.Lrtx1142:
 	.section	.rodata
 	.align	0
 	.align	2
-.L1034:
-	.byte	(.L1033 - .Lrtx1034) / 4
-	.byte	(.L1035 - .Lrtx1034) / 4
-	.byte	(.L1036 - .Lrtx1034) / 4
-	.byte	(.L1030 - .Lrtx1034) / 4
+.L1142:
+	.byte	(.L1139 - .Lrtx1142) / 4
+	.byte	(.L1143 - .Lrtx1142) / 4
+	.byte	(.L1144 - .Lrtx1142) / 4
+	.byte	(.L1139 - .Lrtx1142) / 4
 	.text
-.L1033:
-	cmp	w0, 2
-	b	.L1046
-.L1035:
+.L1143:
 	sub	w6, w0, #6
 	and	w6, w6, -3
 	uxtb	w6, w6
-	cbz	w6, .L1031
-	b	.L1030
-.L1036:
+	cbz	w6, .L1140
+	b	.L1139
+.L1144:
 	cmp	w0, 10
-.L1046:
-	bne	.L1030
-.L1031:
+	bne	.L1139
+.L1140:
 	lsl	x2, x2, 6
 	ldrb	w2, [x3,x2]
 	cmp	w2, 255
-	bne	.L1037
+	bne	.L1145
 	mov	w0, 0
-.L1030:
+.L1139:
 	ret
 	.size	queue_lun_state, .-queue_lun_state
 	.align	2
 	.global	queue_remove_completed_req
 	.type	queue_remove_completed_req, %function
 queue_remove_completed_req:
-	adrp	x0, .LANCHOR0
-	add	x1, x0, :lo12:.LANCHOR0
-	ldrb	w2, [x1,3861]
+	adrp	x3, .LANCHOR0
+	mov	w5, 0
+	add	x0, x3, :lo12:.LANCHOR0
+	mov	w11, -1
+	add	x4, x0, 784
+	add	x12, x0, 3895
+	add	x13, x0, 3892
+	ldrb	w7, [x0,2835]
+	ldrb	w9, [x0,3895]
+	ldrb	w8, [x0,3256]
+	ldrb	w10, [x0,3892]
+.L1155:
+	cmp	w7, 255
+	beq	.L1156
+	sbfiz	x6, x7, 6, 32
+	sxtw	x1, w7
+	add	x2, x4, x6
+	ldrb	w2, [x2,58]
+	sub	w2, w2, #11
+	uxtb	w2, w2
+	cmp	w2, 1
+	bls	.L1157
+	cbz	w5, .L1154
+	strb	w7, [x0,2835]
+	b	.L1154
+.L1157:
+	lsl	x5, x1, 6
+	ldrb	w7, [x4,x6]
+	add	x2, x4, x5
+	strb	w11, [x4,x5]
+	ldrb	w5, [x2,59]
+	cmp	w5, 1
+	bne	.L1160
+	ldrh	w2, [x2,50]
+	cbnz	w2, .L1168
+	mov	w2, w10
+	mov	x5, x13
+	b	.L1161
+.L1160:
+	cbz	w5, .L1178
+.L1162:
+	mov	w5, 1
+	b	.L1155
+.L1178:
+	ldr	w2, [x2,36]
+	cmn	w2, #1
+	beq	.L1162
+	mov	w2, w9
+	mov	x5, x12
+	b	.L1161
+.L1168:
+	mov	w2, w8
+	add	x5, x0, 3256
+.L1161:
 	cmp	w2, 255
-	beq	.L1048
-	add	x6, x1, 768
-	lsl	x5, x2, 6
-	add	x7, x6, x5
-	ldrb	w3, [x7,58]
-	sub	w3, w3, #11
-	uxtb	w3, w3
-	cmp	w3, 1
-	bhi	.L1048
-	ldrb	w3, [x6,x5]
-	strb	w3, [x1,3861]
-	mov	w3, -1
-	strb	w3, [x6,x5]
-	ldrb	w3, [x7,59]
-	cmp	w3, 1
-	bne	.L1050
-	ldrh	w3, [x7,50]
-	cbnz	w3, .L1051
-	ldrb	w3, [x1,3860]
-	add	x1, x1, 3860
-	b	.L1052
-.L1051:
-	ldrb	w3, [x1,3224]
-	add	x1, x1, 3224
-	b	.L1052
-.L1050:
-	cbnz	w3, .L1048
-	ldr	w3, [x7,36]
-	cmn	w3, #1
-	beq	.L1048
-	ldrb	w3, [x1,2880]
-	add	x1, x1, 2880
-.L1052:
-	cmp	w3, 255
-	add	x0, x0, :lo12:.LANCHOR0
-	bne	.L1056
-	add	x0, x0, x2, lsl 6
-	ldrb	w0, [x0,769]
-	strb	w0, [x1]
-	b	.L1048
-.L1056:
-	add	x0, x0, 768
-.L1063:
-	mov	w1, w3
-	sbfiz	x3, x3, 6, 32
-	ldrb	w3, [x0,x3]
-	cmp	w3, 255
-	bne	.L1063
-	add	x2, x0, x2, lsl 6
-	sbfiz	x1, x1, 6, 32
-	ldrb	w2, [x2,1]
-	strb	w2, [x0,x1]
-.L1048:
+	bne	.L1166
+	add	x3, x3, :lo12:.LANCHOR0
+	add	x1, x3, x1, lsl 6
+	strb	w7, [x3,2835]
+	ldrb	w0, [x1,785]
+	strb	w0, [x5]
+	b	.L1154
+.L1166:
+	mov	w5, w2
+	sbfiz	x2, x2, 6, 32
+	ldrb	w2, [x4,x2]
+	cmp	w2, 255
+	bne	.L1166
+	add	x1, x4, x1, lsl 6
+	sbfiz	x5, x5, 6, 32
+	ldrb	w1, [x1,1]
+	strb	w1, [x4,x5]
+	b	.L1162
+.L1156:
+	cbz	w5, .L1154
+	add	x3, x3, :lo12:.LANCHOR0
+	mov	w0, -1
+	strb	w0, [x3,2835]
+.L1154:
 	ret
 	.size	queue_remove_completed_req, .-queue_remove_completed_req
 	.align	2
@@ -6712,96 +7294,98 @@ pm_alloc_new_blk:
 	str	x23, [sp,48]
 	add	x3, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	ldr	x2, [x3,2848]
+	ldr	x2, [x3,2864]
 	ldrh	w1, [x2,690]
 	add	w1, w1, 1
 	uxth	w0, w1
-	ldrb	w1, [x3,3244]
+	ldrb	w1, [x3,3276]
 	strh	w0, [x2,690]
 	cmp	w1, w0
-	bls	.L1065
+	bls	.L1180
 	add	x0, x2, x0, sxtw 1
 	ldrh	w1, [x0,672]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L1066
-.L1065:
-	adrp	x22, .LC106
-	add	x22, x22, :lo12:.LC106
-.L1078:
+	bne	.L1181
+.L1180:
+	adrp	x22, .LC113
+	add	x22, x22, :lo12:.LC113
+.L1193:
 	mov	w0, 1
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	ftl_alloc_sblk
 	uxth	w21, w0
 	mov	w1, 0
 	bl	ftl_erase_sblk
-	ldr	x1, [x20,2848]
+	ldr	x1, [x20,2864]
 	mov	w0, w21
 	add	x1, x1, 672
 	bl	ftl_get_blk_list_in_sblk
 	uxth	w0, w0
-	cbnz	w0, .L1067
+	cbnz	w0, .L1182
 	mov	w1, w21
 	mov	x0, x22
 	bl	printk
-	ldr	x2, [x20,64]
+	ldr	x2, [x20,584]
 	add	x1, x2, x21, uxth 2
 	ldrb	w2, [x1,2]
 	orr	w2, w2, -32
 	strb	w2, [x1,2]
-	b	.L1078
-.L1067:
-	ldr	x1, [x20,2848]
+	b	.L1193
+.L1182:
+	ldr	x1, [x20,2864]
 	mov	w0, 1
 	mov	w2, 65535
-	str	w0, [x20,3864]
+	str	w0, [x20,3896]
 	mov	x20, 0
 	strh	wzr, [x1,690]
-.L1069:
+.L1184:
 	add	x3, x1, x20, lsl 1
 	uxth	w0, w20
 	ldrh	w3, [x3,416]
 	cmp	w3, w2
-	beq	.L1068
+	beq	.L1183
 	add	x20, x20, 1
 	cmp	x20, 128
-	bne	.L1069
+	bne	.L1184
 	adrp	x0, .LC0
 	adrp	x1, .LANCHOR3
-	add	x0, x0, :lo12:.LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 192
+	mov	w2, 194
+	add	x0, x0, :lo12:.LC0
 	bl	printk
+	bl	dump_stack
 	mov	w0, w20
-.L1068:
+.L1183:
 	add	x1, x19, :lo12:.LANCHOR0
-	ldr	x1, [x1,2848]
+	ldr	x1, [x1,2864]
 	add	x0, x1, x0, sxtw 1
 	strh	w21, [x0,416]
 	ldrh	w0, [x1,688]
 	add	w0, w0, 1
 	strh	w0, [x1,688]
-.L1066:
+.L1181:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x1, [x0,2848]
+	ldr	x1, [x0,2864]
 	ldrh	w0, [x1,690]
 	add	x0, x0, 336
 	ldrh	w20, [x1,x0,lsl 1]
 	mov	w0, 65533
 	sub	w1, w20, #1
 	cmp	w0, w1, uxth
-	bcs	.L1071
+	bcs	.L1186
 	adrp	x0, .LC0
 	adrp	x1, .LANCHOR3
-	add	x0, x0, :lo12:.LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 197
+	mov	w2, 199
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L1071:
+	bl	dump_stack
+.L1186:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 21
-	ldr	x1, [x19,2848]
-	ldrh	w2, [x19,3314]
+	ldr	x1, [x19,2864]
+	ldrh	w2, [x19,3340]
 	sub	w0, w0, w2
 	strh	wzr, [x1,696]
 	asr	w4, w20, w0
@@ -6809,17 +7393,17 @@ pm_alloc_new_blk:
 	strh	w4, [x1,694]
 	adrp	x1, .LANCHOR2
 	ldr	w1, [x1,#:lo12:.LANCHOR2]
-	tbz	x1, 12, .L1075
+	tbz	x1, 12, .L1190
 	mov	w2, 1
 	mov	w1, w20
 	lsl	w2, w2, w0
-	adrp	x0, .LC107
-	add	x0, x0, :lo12:.LC107
+	adrp	x0, .LC114
+	add	x0, x0, :lo12:.LC114
 	sub	w2, w2, #1
 	mov	w3, w20
 	uxth	w4, w4
 	bl	printk
-.L1075:
+.L1190:
 	mov	w0, 0
 	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
@@ -6838,68 +7422,69 @@ pm_select_ram_region:
 	str	x19, [sp,16]
 	add	x2, x2, :lo12:.LANCHOR0
 	mov	x19, 0
-.L1082:
-	add	x1, x2, 3872
+.L1197:
+	add	x1, x2, 3904
 	lsl	x4, x19, 4
 	uxth	w0, w19
 	ldrh	w4, [x4,x1]
 	cmp	w4, w3
-	beq	.L1081
+	beq	.L1196
 	add	x19, x19, 1
 	cmp	x19, 32
-	bne	.L1082
+	bne	.L1197
 	mov	x0, 0
 	mov	w3, 32768
-.L1084:
+.L1199:
 	add	x2, x1, x0, lsl 4
 	uxth	w4, w0
 	ldrh	w2, [x2,2]
-	tbnz	x2, 15, .L1083
+	tbnz	x2, 15, .L1198
 	cmp	w2, w3
-	bcs	.L1083
+	bcs	.L1198
 	mov	w3, w2
 	mov	w19, w4
-.L1083:
+.L1198:
 	add	x0, x0, 1
 	cmp	x0, 32
-	bne	.L1084
+	bne	.L1199
 	cmp	w19, 32
 	mov	w0, w19
-	bne	.L1081
-	adrp	x0, .LANCHOR4+32
+	bne	.L1196
+	adrp	x0, .LANCHOR4+64
 	mov	w2, -1
 	mov	w1, 0
-	ldrb	w3, [x0,#:lo12:.LANCHOR4+32]
+	ldrb	w3, [x0,#:lo12:.LANCHOR4+64]
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 3872
-.L1086:
+	add	x0, x0, 3904
+.L1201:
 	ldrh	w5, [x0,2]
 	cmp	w5, w2
-	bcs	.L1085
+	bcs	.L1200
 	ldrh	w4, [x0]
 	cmp	w4, w3
 	csel	w2, w2, w5, eq
 	cmp	w4, w3
 	csel	w19, w19, w1, eq
-.L1085:
+.L1200:
 	add	w1, w1, 1
 	add	x0, x0, 16
 	uxth	w1, w1
 	cmp	w1, 32
-	bne	.L1086
+	bne	.L1201
 	cmp	w19, 32
-	bne	.L1087
+	bne	.L1202
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
+	mov	w2, 297
 	add	x1, x1, 24
-	mov	w2, 295
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L1087:
+	bl	dump_stack
+.L1202:
 	mov	w0, w19
-.L1081:
+.L1196:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -6923,58 +7508,58 @@ flash_lsb_page_tbl_build:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	cbnz	w0, .L1095
+	cbnz	w0, .L1210
 	mov	x0, 0
 	add	x2, x19, :lo12:.LANCHOR0
-.L1096:
-	add	x1, x2, 212
+.L1211:
+	add	x1, x2, 4
 	strh	w0, [x1,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L1096
-.L1102:
+	bne	.L1211
+.L1217:
 	adrp	x20, .LANCHOR4
 	mov	w1, 255
 	add	x20, x20, :lo12:.LANCHOR4
 	mov	w2, 1024
-	add	x0, x20, 36
+	add	x0, x20, 68
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	ftl_memset
 	mov	x0, 0
-	b	.L1097
-.L1095:
+	b	.L1212
+.L1210:
 	cmp	w0, 1
-	bne	.L1098
+	bne	.L1213
 	mov	x0, 0
 	mov	w4, 3
 	mov	w5, 2
 	add	x3, x19, :lo12:.LANCHOR0
-.L1101:
+.L1216:
 	cmp	x0, 3
 	uxth	w2, w0
 	mov	w1, w2
-	bls	.L1099
+	bls	.L1214
 	ubfiz	w1, w2, 1, 15
 	and	w2, w2, 1
 	cmp	w2, wzr
 	csel	w2, w4, w5, ne
 	sub	w1, w1, w2
 	uxth	w1, w1
-.L1099:
-	add	x2, x3, 212
+.L1214:
+	add	x2, x3, 4
 	strh	w1, [x2,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L1101
-	b	.L1102
-.L1098:
+	bne	.L1216
+	b	.L1217
+.L1213:
 	cmp	w0, 2
-	bne	.L1103
+	bne	.L1218
 	mov	w1, 65535
 	mov	x0, 0
 	add	x4, x19, :lo12:.LANCHOR0
-.L1105:
-	add	x3, x4, 212
+.L1220:
+	add	x3, x4, 4
 	cmp	x0, 1
 	uxth	w2, w0
 	csel	w2, w1, w2, hi
@@ -6983,43 +7568,43 @@ flash_lsb_page_tbl_build:
 	add	x0, x0, 1
 	cmp	x0, 256
 	uxth	w1, w1
-	bne	.L1105
-	b	.L1102
-.L1103:
+	bne	.L1220
+	b	.L1217
+.L1218:
 	cmp	w0, 3
-	bne	.L1106
+	bne	.L1221
 	mov	x0, 0
 	mov	w4, 5
 	mov	w5, 4
 	add	x3, x19, :lo12:.LANCHOR0
-.L1109:
+.L1224:
 	cmp	x0, 5
 	uxth	w2, w0
 	mov	w1, w2
-	bls	.L1107
+	bls	.L1222
 	ubfiz	w1, w2, 1, 15
 	and	w2, w2, 1
 	cmp	w2, wzr
 	csel	w2, w4, w5, ne
 	sub	w1, w1, w2
 	uxth	w1, w1
-.L1107:
-	add	x2, x3, 212
+.L1222:
+	add	x2, x3, 4
 	strh	w1, [x2,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 256
-	bne	.L1109
-	b	.L1102
-.L1106:
+	bne	.L1224
+	b	.L1217
+.L1221:
 	cmp	w0, 4
-	bne	.L1110
+	bne	.L1225
 	add	x2, x19, :lo12:.LANCHOR0
 	mov	w5, 7
-	add	x1, x2, 212
+	add	x1, x2, 4
 	mov	w4, 6
 	strh	w0, [x1,8]
 	mov	w0, 5
-	strh	wzr, [x2,212]
+	strh	wzr, [x2,4]
 	mov	w2, 1
 	strh	w0, [x1,10]
 	mov	w0, 7
@@ -7032,7 +7617,7 @@ flash_lsb_page_tbl_build:
 	strh	w0, [x1,14]
 	mov	w0, 8
 	strh	w2, [x1,6]
-.L1112:
+.L1227:
 	and	w3, w0, 1
 	ubfiz	w2, w0, 1, 15
 	add	w0, w0, 1
@@ -7043,48 +7628,48 @@ flash_lsb_page_tbl_build:
 	sub	w2, w2, w3
 	cmp	w0, 256
 	strh	w2, [x1,14]
-	bne	.L1112
-	b	.L1102
-.L1110:
+	bne	.L1227
+	b	.L1217
+.L1225:
 	cmp	w0, 5
-	bne	.L1113
+	bne	.L1228
 	mov	x0, 0
 	add	x2, x19, :lo12:.LANCHOR0
-.L1114:
-	add	x1, x2, 212
+.L1229:
+	add	x1, x2, 4
 	strh	w0, [x1,x0,lsl 1]
 	add	x0, x0, 1
 	cmp	x0, 16
-	bne	.L1114
+	bne	.L1229
 	mov	x0, 0
-.L1115:
+.L1230:
 	add	x2, x1, x0
 	add	w3, w0, 16
 	add	x0, x0, 2
 	cmp	x0, 480
 	strh	w3, [x2,32]
-	bne	.L1115
-	b	.L1102
-.L1113:
+	bne	.L1230
+	b	.L1217
+.L1228:
 	cmp	w0, 8
-	bne	.L1102
+	bne	.L1217
 	mov	x0, 0
 	add	x2, x19, :lo12:.LANCHOR0
-.L1116:
-	add	x1, x2, 212
+.L1231:
+	add	x1, x2, 4
 	strh	w0, [x0,x1]
 	add	x0, x0, 2
 	cmp	x0, 512
-	bne	.L1116
-	b	.L1102
-.L1097:
-	add	x1, x19, 212
-	add	x2, x20, 36
+	bne	.L1231
+	b	.L1217
+.L1212:
+	add	x1, x19, 4
+	add	x2, x20, 68
 	ldrh	w1, [x0,x1]
 	add	x0, x0, 2
 	cmp	x0, 512
 	strh	w1, [x2,w1,sxtw 1]
-	bne	.L1097
+	bne	.L1212
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -7102,14 +7687,14 @@ flash_die_info_init:
 	ldr	w0, [x19,#:lo12:.LANCHOR2]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	tbz	x0, 12, .L1133
+	tbz	x0, 12, .L1248
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC4
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x0, x0, :lo12:.LC4
 	add	x1, x1, 48
 	bl	printk
-.L1133:
+.L1248:
 	add	x25, x19, :lo12:.LANCHOR2
 	adrp	x21, .LANCHOR0
 	add	x20, x21, :lo12:.LANCHOR0
@@ -7119,75 +7704,75 @@ flash_die_info_init:
 	ldrh	w0, [x25,402]
 	mov	x24, 0
 	ldrb	w1, [x25,388]
-	add	x27, x20, 732
-	strh	w0, [x20,210]
+	add	x27, x20, 748
+	strh	w0, [x20,2]
 	add	x25, x25, 377
 	ldrh	w0, [x25,9]
-	strb	wzr, [x20,98]
+	strb	wzr, [x20,633]
 	sdiv	w0, w0, w1
 	mov	w1, 0
-	strh	w0, [x26,1060]
-	add	x0, x20, 200
+	strh	w0, [x26,1092]
+	add	x0, x20, 736
 	bl	ftl_memset
-	add	x0, x26, 1064
+	add	x0, x26, 1096
 	mov	w1, 0
 	mov	w2, 32
 	bl	ftl_memset
 	ldrb	w23, [x25,-1]
-.L1135:
+.L1250:
 	mov	x0, x25
 	add	x1, x27, x24, lsl 3
 	mov	w2, w23
 	bl	flash_mem_cmp8
-	cbnz	w0, .L1134
-	ldrb	w1, [x20,98]
-	add	x2, x26, 1064
+	cbnz	w0, .L1249
+	ldrb	w1, [x20,633]
+	add	x2, x26, 1096
 	str	w0, [x2,w1,sxtw 2]
 	add	w0, w1, 1
 	add	x1, x20, x1, sxtw
-	strb	w0, [x20,98]
-	strb	w24, [x1,200]
-.L1134:
+	strb	w0, [x20,633]
+	strb	w24, [x1,736]
+.L1249:
 	add	x24, x24, 1
 	cmp	x24, 4
-	bne	.L1135
+	bne	.L1250
 	add	x0, x19, :lo12:.LANCHOR2
 	add	x1, x0, 376
 	ldrb	w2, [x1,8]
 	cmp	w2, 2
-	beq	.L1136
-.L1140:
+	beq	.L1251
+.L1255:
 	add	x19, x19, :lo12:.LANCHOR2
 	add	x21, x21, :lo12:.LANCHOR0
 	add	x22, x22, :lo12:.LANCHOR4
 	ldp	x23, x24, [sp,48]
 	ldrb	w1, [x19,389]
-	ldrb	w0, [x21,98]
+	ldrb	w0, [x21,633]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
 	mul	w0, w0, w1
 	ldrh	w1, [x19,390]
 	ldp	x19, x20, [sp,16]
 	mul	w0, w0, w1
-	strh	w0, [x22,1096]
+	strh	w0, [x22,1128]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 112
 	ret
-.L1136:
+.L1251:
 	add	x24, x21, :lo12:.LANCHOR0
 	ldrh	w20, [x1,14]
 	ldrb	w27, [x1,23]
 	mov	x25, 0
 	and	w20, w20, 65280
 	add	x26, x0, 377
-	ldrh	w2, [x24,210]
-	add	x3, x24, 732
+	ldrh	w2, [x24,2]
+	add	x3, x24, 748
 	add	x4, x22, :lo12:.LANCHOR4
 	mul	w20, w20, w2
 	ldrb	w2, [x1,13]
 	mul	w20, w20, w2
 	lsl	w28, w20, 1
-.L1139:
+.L1254:
 	add	x1, x3, x25, lsl 3
 	mov	x0, x26
 	mov	w2, w23
@@ -7196,21 +7781,21 @@ flash_die_info_init:
 	bl	flash_mem_cmp8
 	ldr	x3, [x29,104]
 	ldr	x4, [x29,96]
-	cbnz	w0, .L1137
-	ldrb	w1, [x24,98]
-	add	x0, x4, 1064
+	cbnz	w0, .L1252
+	ldrb	w1, [x24,633]
+	add	x0, x4, 1096
 	cmp	w27, wzr
 	csel	w2, w20, w28, eq
 	str	w2, [x0,w1,sxtw 2]
 	add	w0, w1, 1
 	add	x1, x24, x1, sxtw
-	strb	w0, [x24,98]
-	strb	w25, [x1,200]
-.L1137:
+	strb	w0, [x24,633]
+	strb	w25, [x1,736]
+.L1252:
 	add	x25, x25, 1
 	cmp	x25, 4
-	bne	.L1139
-	b	.L1140
+	bne	.L1254
+	b	.L1255
 	.size	flash_die_info_init, .-flash_die_info_init
 	.align	2
 	.global	lpa_hash_init
@@ -7223,13 +7808,13 @@ lpa_hash_init:
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x0, x19, 3328
+	add	x0, x19, 3360
 	bl	ftl_memset
-	ldrh	w0, [x19,3276]
+	ldrh	w0, [x19,3300]
 	mov	w1, 255
-	ldrb	w2, [x19,3244]
+	ldrb	w2, [x19,3276]
 	mul	w2, w0, w2
-	ldr	x0, [x19,3848]
+	ldr	x0, [x19,3880]
 	lsl	w2, w2, 2
 	bl	ftl_memset
 	ldr	x19, [sp,16]
@@ -7245,52 +7830,52 @@ lpa_rebuild_hash:
 	add	x29, sp, 0
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
 	str	x19, [sp,16]
-	tbz	x0, 12, .L1151
+	tbz	x0, 12, .L1266
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC108
+	adrp	x0, .LC115
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC108
+	add	x0, x0, :lo12:.LC115
 	add	x1, x1, 72
-	mov	w2, 218
+	mov	w2, 222
 	mov	w3, 0
 	bl	printk
-.L1151:
+.L1266:
 	adrp	x19, .LANCHOR0
 	mov	w1, 255
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 512
-	add	x0, x19, 3328
+	add	x0, x19, 3360
 	bl	ftl_memset
-	ldrh	w0, [x19,3276]
+	ldrh	w0, [x19,3300]
 	mov	w1, 255
-	ldrb	w2, [x19,3244]
+	ldrb	w2, [x19,3276]
 	mul	w2, w0, w2
-	ldr	x0, [x19,3848]
+	ldr	x0, [x19,3880]
 	lsl	w2, w2, 2
 	bl	ftl_memset
 	mov	w0, 0
-.L1152:
-	ldrh	w1, [x19,3276]
-	ldrb	w2, [x19,3244]
+.L1267:
+	ldrh	w1, [x19,3300]
+	ldrb	w2, [x19,3276]
 	mul	w1, w1, w2
 	cmp	w0, w1, lsl 1
-	bge	.L1161
+	bge	.L1276
 	uxtw	x2, w0
-	ldr	x1, [x19,3840]
+	ldr	x1, [x19,3872]
 	ldr	w1, [x1,x2,lsl 2]
 	cmn	w1, #1
-	beq	.L1153
+	beq	.L1268
 	uxtb	w1, w1
-	add	x3, x19, 3328
+	add	x3, x19, 3360
 	ldrh	w4, [x3,w1,sxtw 1]
 	strh	w0, [x3,w1,sxtw 1]
-	ldr	x1, [x19,3848]
+	ldr	x1, [x19,3880]
 	strh	w4, [x1,x2,lsl 1]
-.L1153:
+.L1268:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L1152
-.L1161:
+	b	.L1267
+.L1276:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -7313,9 +7898,9 @@ zftl_read_flash_info:
 	add	x1, x1, 376
 	mov	w5, 1
 	ldrb	w2, [x1,9]
-	ldrh	w3, [x0,210]
+	ldrh	w3, [x0,2]
 	mul	w2, w2, w3
-	ldrb	w3, [x0,188]
+	ldrb	w3, [x0,724]
 	strb	w3, [x19,7]
 	uxth	w2, w2
 	strh	w2, [x19,4]
@@ -7330,23 +7915,23 @@ zftl_read_flash_info:
 	ldrb	w2, [x1,9]
 	strb	w2, [x19,6]
 	mov	w2, 32
-	ldrb	w4, [x0,98]
+	ldrb	w4, [x0,633]
 	ldrb	w1, [x1,7]
 	strb	w1, [x19,9]
 	mov	x1, 0
 	strb	w2, [x19,8]
-.L1163:
+.L1278:
 	cmp	w4, w1, uxtb
-	bls	.L1165
-	add	x2, x0, 200
+	bls	.L1280
+	add	x2, x0, 736
 	ldrb	w3, [x19,10]
 	ldrb	w2, [x1,x2]
 	add	x1, x1, 1
 	lsl	w2, w5, w2
 	orr	w2, w2, w3
 	strb	w2, [x19,10]
-	b	.L1163
-.L1165:
+	b	.L1278
+.L1280:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -7365,61 +7950,64 @@ gc_init:
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR4
 	str	x21, [sp,32]
-	add	x21, x19, 2888
+	add	x21, x19, 2896
 	mov	x0, x21
-	strb	wzr, [x19,3241]
-	strb	wzr, [x20,1098]
+	strb	wzr, [x19,3273]
+	strb	wzr, [x20,1130]
+	str	wzr, [x20,1132]
+	strh	wzr, [x19,3304]
 	bl	ftl_memset
-	ldrh	w1, [x19,3276]
+	ldrh	w1, [x19,3300]
 	mov	w0, -1
-	ldrb	w3, [x19,3244]
-	strh	w0, [x19,2888]
+	ldrb	w3, [x19,3276]
+	strh	w0, [x19,2896]
 	lsr	w0, w1, 2
 	lsr	w2, w1, 1
-	strh	w0, [x19,2924]
-	strh	w0, [x19,2862]
-	ldrh	w0, [x19,3242]
-	strh	w2, [x19,2926]
+	strh	w0, [x19,2932]
+	strh	w0, [x19,2878]
+	ldrh	w0, [x19,3274]
+	strh	w2, [x19,2934]
 	mul	w2, w1, w3
 	mul	w0, w0, w3
-	strh	w1, [x19,2864]
+	strh	w1, [x19,2880]
 	uxth	w2, w2
 	lsl	w0, w0, 2
 	sub	w4, w2, #32
-	strh	w2, [x19,2858]
-	strh	w4, [x19,2860]
-	str	xzr, [x19,2896]
-	strh	wzr, [x19,3278]
-	strh	wzr, [x19,3272]
-	strh	wzr, [x19,3274]
+	strh	w2, [x19,2874]
+	strh	w4, [x19,2876]
+	strh	wzr, [x19,3302]
+	strh	wzr, [x19,3296]
+	strh	wzr, [x19,3298]
+	str	xzr, [x19,2904]
 	bl	ftl_malloc
-	ldrb	w1, [x19,3244]
-	str	x0, [x20,1104]
-	ldrh	w0, [x19,3242]
+	ldrb	w1, [x19,3276]
+	str	x0, [x20,1136]
+	ldrh	w0, [x19,3274]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x20,1112]
-	ldrh	w1, [x19,3242]
-	ldrb	w0, [x19,3244]
+	str	x0, [x20,1144]
+	ldrh	w1, [x19,3274]
+	ldrb	w0, [x19,3276]
 	mul	w0, w1, w0
 	bl	ftl_malloc
-	str	x0, [x19,3232]
-	ldrb	w1, [x19,3244]
-	ldrh	w0, [x19,3242]
+	str	x0, [x19,3264]
+	ldrb	w1, [x19,3276]
+	ldrh	w0, [x19,3274]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x19,3216]
-	ldrb	w1, [x19,3244]
-	ldrh	w0, [x19,3242]
+	str	x0, [x19,3248]
+	ldrb	w1, [x19,3276]
+	ldrh	w0, [x19,3274]
 	mul	w0, w0, w1
 	lsl	w0, w0, 2
 	bl	ftl_malloc
-	str	x0, [x20,1120]
-	ldrh	w0, [x19,3280]
-	strh	w0, [x19,2856]
+	str	x0, [x20,1152]
+	ldrh	w0, [x19,3306]
 	ldr	x21, [sp,32]
+	lsr	w0, w0, 2
+	strh	w0, [x19,2872]
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 48
 	ret
@@ -7429,334 +8017,622 @@ gc_init:
 	.type	gc_static_wearleveling, %function
 gc_static_wearleveling:
 	stp	x29, x30, [sp, -144]!
-	mov	w1, 10240
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	add	x0, x20, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldr	x6, [x0,2848]
-	ldr	w0, [x6,32]
-	cmp	w0, w1
-	bls	.L1168
-	ldr	w1, [x6,36]
-	add	w1, w1, w0, lsr 10
-	and	w0, w0, 1023
-	str	w1, [x6,36]
-	str	w0, [x6,32]
-.L1168:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,80]
+	ldr	x0, [x0,2864]
+	ldr	w1, [x0,32]
+	mov	w0, 10240
+	cmp	w1, w0
+	bls	.L1283
+	bl	ftl_tmp_into_update
+.L1283:
+	add	x3, x19, :lo12:.LANCHOR0
+	ldr	x0, [x3,608]
 	ldr	w1, [x0,568]
 	ldr	w2, [x0,12]
 	add	w1, w1, 860160
 	add	w1, w1, 3840
 	cmp	w2, w1
-	bhi	.L1169
+	bhi	.L1284
+	ldr	x3, [x3,2864]
 	ldr	w1, [x0,572]
-	ldr	w3, [x6,36]
+	ldr	w3, [x3,36]
 	add	w1, w1, 32
 	cmp	w3, w1
-	bls	.L1167
-.L1169:
-	ldr	w1, [x6,36]
-	mov	w9, 0
-	str	w1, [x0,572]
-	mov	w26, 65535
+	bls	.L1334
+.L1284:
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w22, 0
+	mov	w20, 65535
+	adrp	x8, .LC116
+	mov	w28, w22
+	str	w22, [x29,136]
+	ldr	x1, [x1,2864]
+	mov	w27, w22
+	str	w22, [x29,140]
+	mov	w26, w22
+	mov	w25, w22
+	mov	w24, w22
+	ldr	w3, [x1,36]
+	mov	w21, w20
+	str	w3, [x0,572]
+	mov	w9, w20
 	str	w2, [x0,568]
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	w4, w9
-	mov	w2, w9
-	ldrh	w3, [x6,134]
-	mov	w1, w9
-	ldrh	w11, [x0,56]
-	mov	w22, w9
-	ldr	x10, [x0,64]
-	mov	w21, w9
-	mov	w19, w26
-	mov	w12, w26
-.L1171:
-	cmp	w3, w11
-	bcs	.L1215
-	ubfiz	x0, x3, 2, 16
-	add	x5, x10, x0
-	ldrb	w5, [x5,2]
-	tbz	x5, 3, .L1172
-	ldrh	w5, [x10,x0]
-	and	w8, w5, 2047
-	ldr	w5, [x10,x0]
-	ubfx	x0, x5, 11, 8
-	b	.L1173
-.L1172:
-	tst	w5, 24
-	bne	.L1174
-	ldrh	w5, [x10,x0]
-	mov	w0, 65535
-	and	w8, w5, 2047
-	b	.L1173
-.L1174:
-	ldr	w5, [x10,x0]
-	ubfx	x0, x5, 11, 8
-.L1197:
-	cmp	w19, w0
-	add	w2, w2, 1
-	csel	w19, w19, w0, cc
-	cmp	w21, w0
-	add	w4, w4, w0
-	csel	w0, w21, w0, hi
-	uxth	w2, w2
-	uxth	w19, w19
-	uxth	w21, w0
-.L1198:
-	add	w3, w3, 1
-	uxth	w3, w3
-	b	.L1171
-.L1215:
-	ldrh	w0, [x6,96]
-	cmp	w0, w22
-	bcs	.L1176
-	strh	w22, [x6,96]
-.L1176:
-	ldrh	w0, [x6,98]
-	cmp	w0, w21
-	bcs	.L1177
-	strh	w21, [x6,98]
-.L1177:
-	adrp	x23, .LANCHOR2
-	str	x23, [x29,128]
-	udiv	w3, w9, w1
-	strh	w3, [x6,88]
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	udiv	w4, w4, w2
-	strh	w4, [x6,90]
-	tbz	x0, 10, .L1178
-	adrp	x0, .LC109
-	uxth	w3, w3
-	add	x0, x0, :lo12:.LC109
-	uxth	w4, w4
+	adrp	x10, .LANCHOR2
+	add	x8, x8, :lo12:.LC116
+	ldrh	w23, [x1,134]
+.L1286:
+	add	x4, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x4,576]
+	cmp	w0, w23
+	bls	.L1395
+	uxtw	x7, w23
+	ldr	x0, [x4,584]
+	lsl	x1, x7, 2
+	add	x6, x0, x1
+	ldrb	w2, [x6,2]
+	and	w3, w2, 224
+	cmp	w3, 224
+	beq	.L1287
+	tbz	x2, 3, .L1288
+	ldrh	w3, [x0,x1]
+	ldr	w2, [x0,x1]
+	and	w3, w3, 2047
+	ubfx	x2, x2, 11, 8
+	b	.L1289
+.L1288:
+	tst	w2, 24
+	bne	.L1290
+	ldrh	w3, [x0,x1]
+	mov	w2, 65535
+	and	w3, w3, 2047
+	b	.L1289
+.L1290:
+	ldr	w2, [x0,x1]
+	mov	w3, 65535
+	ubfx	x2, x2, 11, 8
+	b	.L1291
+.L1289:
+	ldr	w4, [x29,136]
+	add	w26, w26, 1
+	cmp	w20, w3
+	add	w4, w4, w3
+	str	w4, [x29,136]
+	uxth	w26, w26
+	bls	.L1333
+	add	x4, x19, :lo12:.LANCHOR0
+	mov	w20, w3
+	ldr	x4, [x4,608]
+	strh	w23, [x4,586]
+.L1333:
+	cmp	w25, w3
+	bcs	.L1292
+	mov	w22, w23
+	mov	w25, w3
+.L1292:
+	cmp	w2, w9
+	beq	.L1293
+.L1291:
+	ldr	w4, [x29,140]
+	add	w27, w27, 1
+	cmp	w21, w2
+	add	w4, w4, w2
+	str	w4, [x29,140]
+	uxth	w27, w27
+	bls	.L1294
+	add	x4, x19, :lo12:.LANCHOR0
+	mov	w21, w2
+	ldr	x4, [x4,608]
+	strh	w23, [x4,584]
+.L1294:
+	cmp	w24, w2
+	bcs	.L1293
+	mov	w28, w23
+	mov	w24, w2
+.L1293:
+	cmp	w3, 9
+	bls	.L1336
+	cmp	w2, 9
+	bhi	.L1287
+.L1336:
+	ldr	w2, [x10,#:lo12:.LANCHOR2]
+	tbz	x2, 8, .L1287
+	ldrh	w2, [x0,x1]
+	ldr	w3, [x0,x1]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w5, [x6,2]
+	mov	w1, w23
+	ldrb	w6, [x6,3]
+	and	w2, w2, 2047
+	ldr	x11, [x0,600]
+	ubfx	x4, x5, 3, 2
+	mov	x0, x8
+	ubfx	x3, x3, 11, 8
+	ubfx	x5, x5, 5, 3
+	str	x10, [x29,112]
+	ldrh	w7, [x11,x7,lsl 1]
+	str	x9, [x29,120]
+	str	x8, [x29,128]
 	bl	printk
-.L1178:
-	ldr	x0, [x29,128]
-	adrp	x25, .LANCHOR4
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 10, .L1179
-	add	x6, x25, :lo12:.LANCHOR4
-	adrp	x0, .LC110
-	add	x0, x0, :lo12:.LC110
-	mov	w1, w26
-	mov	w2, w19
-	mov	w3, w22
-	ldrh	w5, [x6,1128]
-	mov	w4, w21
-	ldrh	w6, [x6,1130]
-	bl	printk
-.L1179:
-	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x10, [x29,112]
+	ldr	x9, [x29,120]
+	ldr	x8, [x29,128]
+.L1287:
+	add	w23, w23, 1
+	uxth	w23, w23
+	b	.L1286
+.L1395:
+	ldr	x0, [x4,608]
 	mov	w1, 255
 	mov	w2, 128
-	ldr	x0, [x0,80]
+	str	x4, [x29,128]
 	add	x0, x0, 264
+	adrp	x23, .LANCHOR2
 	strh	wzr, [x0,-142]
 	bl	ftl_memset
-	add	x1, x25, :lo12:.LANCHOR4
-	sub	w0, w21, w19
-	str	w0, [x29,136]
-	ldrh	w0, [x1,1130]
-	ldr	w2, [x29,136]
+	ldr	x4, [x29,128]
+	ldr	w2, [x23,#:lo12:.LANCHOR2]
+	ldr	x0, [x4,608]
+	ldr	x3, [x4,584]
+	ldrh	w7, [x0,586]
+	lsl	x0, x7, 2
+	mov	x1, x7
+	add	x8, x3, x0
+	tbz	x2, 10, .L1297
+	ldr	x9, [x4,600]
+	ldrh	w2, [x3,x0]
+	ldrb	w5, [x8,2]
+	ldr	w3, [x3,x0]
+	adrp	x0, .LC117
+	ldrb	w6, [x8,3]
+	ubfx	x4, x5, 3, 2
+	ldrh	w7, [x9,x7,lsl 1]
+	add	x0, x0, :lo12:.LC117
+	and	w2, w2, 2047
+	ubfx	x3, x3, 11, 8
+	ubfx	x5, x5, 5, 3
+	str	x8, [x29,128]
+	bl	printk
+	ldr	x8, [x29,128]
+.L1297:
+	ldrb	w0, [x8,2]
+	tbz	x0, 3, .L1298
+	ldrb	w0, [x8,2]
+	and	w1, w0, 192
+	cmp	w1, 64
+	bne	.L1299
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	mov	w2, 1
+	str	x3, [x29,128]
+	ldr	x0, [x3,608]
+	ldrh	w0, [x0,586]
+	bl	gc_add_sblk
+	ldr	x3, [x29,128]
+	mov	w0, 1
+	strh	w0, [x3,3214]
+	b	.L1298
+.L1299:
+	tst	w0, 224
+	bne	.L1298
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w2, 65535
+	ldr	x0, [x1,608]
+	ldrh	w3, [x0,590]
+	cmp	w3, w2
+	bne	.L1298
+	ldrh	w0, [x0,586]
+	str	x1, [x29,128]
+	bl	zftl_remove_free_node
+	ldr	x1, [x29,128]
+	ldr	x0, [x1,608]
+	ldrh	w1, [x0,586]
+	strh	w1, [x0,590]
+	mov	w1, -1
+	strh	w1, [x0,586]
+.L1298:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w2, [x23,#:lo12:.LANCHOR2]
+	ldr	x1, [x0,608]
+	ldr	x4, [x0,584]
+	ldrh	w7, [x1,584]
+	lsl	x3, x7, 2
+	mov	x1, x7
+	add	x8, x4, x3
+	tbz	x2, 10, .L1300
+	ldr	x9, [x0,600]
+	adrp	x0, .LC118
+	ldrh	w2, [x4,x3]
+	add	x0, x0, :lo12:.LC118
+	ldrb	w5, [x8,2]
+	ldr	w3, [x4,x3]
+	and	w2, w2, 2047
+	ldrb	w6, [x8,3]
+	ubfx	x4, x5, 3, 2
+	ldrh	w7, [x9,x7,lsl 1]
+	ubfx	x3, x3, 11, 8
+	ubfx	x5, x5, 5, 3
+	str	x8, [x29,128]
+	bl	printk
+	ldr	x8, [x29,128]
+.L1300:
+	ldrb	w0, [x8,2]
+	tbz	x0, 3, .L1301
+	ldrb	w0, [x8,2]
+	and	w1, w0, 192
+	cmp	w1, 64
+	bne	.L1302
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	mov	w2, 1
+	str	x3, [x29,128]
+	ldr	x0, [x3,608]
+	ldrh	w0, [x0,584]
+	bl	gc_add_sblk
+	ldr	x3, [x29,128]
+	mov	w0, 1
+	strh	w0, [x3,3214]
+	b	.L1301
+.L1302:
+	tst	w0, 224
+	bne	.L1301
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w2, 65535
+	ldr	x0, [x1,608]
+	ldrh	w3, [x0,588]
+	cmp	w3, w2
+	bne	.L1301
+	ldrh	w0, [x0,584]
+	str	x1, [x29,128]
+	bl	zftl_remove_free_node
+	ldr	x1, [x29,128]
+	ldr	x0, [x1,608]
+	ldrh	w1, [x0,584]
+	strh	w1, [x0,588]
+	mov	w1, -1
+	strh	w1, [x0,584]
+.L1301:
+	add	x4, x19, :lo12:.LANCHOR0
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	ldr	x1, [x4,584]
+	tbz	x0, 10, .L1303
+	uxtw	x7, w22
+	ldr	x8, [x4,600]
+	lsl	x0, x7, 2
+	add	x6, x1, x0
+	ldrh	w7, [x8,x7,lsl 1]
+	ldrh	w2, [x1,x0]
+	ldr	w3, [x1,x0]
+	adrp	x0, .LC119
+	ldrb	w5, [x6,2]
+	add	x0, x0, :lo12:.LC119
+	ldrb	w6, [x6,3]
+	mov	w1, w22
+	ubfx	x4, x5, 3, 2
+	and	w2, w2, 2047
+	ubfx	x3, x3, 11, 8
+	ubfx	x5, x5, 5, 3
+	bl	printk
+.L1303:
+	add	x4, x19, :lo12:.LANCHOR0
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	ldr	x1, [x4,584]
+	tbz	x0, 10, .L1304
+	uxtw	x7, w28
+	ldr	x8, [x4,600]
+	lsl	x0, x7, 2
+	add	x6, x1, x0
+	ldrh	w7, [x8,x7,lsl 1]
+	ldrh	w2, [x1,x0]
+	ldr	w3, [x1,x0]
+	adrp	x0, .LC120
+	ldrb	w5, [x6,2]
+	add	x0, x0, :lo12:.LC120
+	ldrb	w6, [x6,3]
+	mov	w1, w28
+	ubfx	x4, x5, 3, 2
+	and	w2, w2, 2047
+	ubfx	x3, x3, 11, 8
+	ubfx	x5, x5, 5, 3
+	bl	printk
+.L1304:
+	ldr	w1, [x29,136]
+	add	x0, x19, :lo12:.LANCHOR0
+	udiv	w3, w1, w26
+	ldr	w1, [x29,140]
+	ldr	x0, [x0,2864]
+	strh	w25, [x0,96]
+	strh	w24, [x0,98]
+	strh	w20, [x0,92]
+	strh	w21, [x0,94]
+	udiv	w4, w1, w27
+	strh	w3, [x0,88]
+	strh	w4, [x0,90]
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 10, .L1305
+	adrp	x0, .LC121
+	mov	w1, w26
+	add	x0, x0, :lo12:.LC121
+	mov	w2, w27
+	uxth	w3, w3
+	uxth	w4, w4
+	bl	printk
+.L1305:
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	adrp	x28, .LANCHOR4
+	tbz	x0, 10, .L1306
+	add	x6, x28, :lo12:.LANCHOR4
+	adrp	x0, .LC122
+	add	x0, x0, :lo12:.LC122
+	mov	w1, w20
+	mov	w2, w21
+	mov	w3, w25
+	ldrh	w5, [x6,1160]
+	mov	w4, w24
+	ldrh	w6, [x6,1162]
+	bl	printk
+.L1306:
+	add	x1, x28, :lo12:.LANCHOR4
+	sub	w0, w24, w21
+	str	w0, [x29,140]
+	ldrh	w0, [x1,1162]
+	ldr	w2, [x29,140]
 	cmp	w2, w0
-	bgt	.L1180
-	ldrh	w1, [x1,1128]
-	sub	w0, w22, w26
+	bgt	.L1307
+	ldrh	w1, [x1,1160]
+	sub	w0, w25, w20
 	cmp	w0, w1
-	bgt	.L1180
-.L1187:
-	cbz	w19, .L1189
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,2848]
-	ldrh	w0, [x0,134]
-	b	.L1190
-.L1180:
-	add	x9, x20, :lo12:.LANCHOR0
-	adrp	x27, .LC112
-	adrp	x28, .LC111
-	mov	w24, 0
-	mov	x23, x9
-	str	w24, [x29,140]
-	ldr	x0, [x9,2848]
-	ldrh	w21, [x0,134]
-	sub	w0, w22, w26
-	str	w0, [x29,124]
-	add	x0, x27, :lo12:.LC112
-	str	x0, [x29,112]
-	add	x0, x28, :lo12:.LC111
-	str	x0, [x29,104]
-.L1183:
-	ldrh	w0, [x23,56]
-	cmp	w0, w21
-	bls	.L1187
-	uxtw	x22, w21
-	ldr	x28, [x23,64]
-	lsl	x27, x22, 2
-	add	x0, x28, x27
+	ble	.L1335
+.L1307:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w26, 0
+	mov	w22, w26
+	ldr	x1, [x0,608]
+	ldr	x0, [x0,2864]
+	ldrh	w24, [x1,580]
+	ldrh	w27, [x0,134]
+	sub	w0, w25, w20
+	str	w0, [x29,136]
+	adrp	x0, .LC124
+	add	x0, x0, :lo12:.LC124
+	adrp	x25, .LC123
+	str	x0, [x29,128]
+	add	x0, x25, :lo12:.LC123
+	str	x0, [x29,120]
+.L1309:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x1,576]
+	cmp	w27, w0
+	bcs	.L1318
+	add	w7, w24, 1
+	ldr	x4, [x1,584]
+	uxth	w24, w7
+	cmp	w24, w0
+	csel	w24, w24, wzr, cc
+	uxtw	x25, w24
+	lsl	x3, x25, 2
+	add	x0, x4, x3
 	ldrb	w0, [x0,2]
-	and	w1, w0, 224
-	cmp	w1, 224
-	beq	.L1184
+	and	w2, w0, 224
+	cmp	w2, 224
+	beq	.L1311
 	tst	w0, 192
-	cset	w2, eq
-	cbnz	w2, .L1184
+	beq	.L1311
 	ubfx	x0, x0, 3, 2
-	and	w0, w0, 2
-	uxtb	w1, w0
-	add	x0, x25, :lo12:.LANCHOR4
-	cbz	w1, .L1185
-	ldrh	w0, [x0,1130]
-	ldr	w1, [x29,136]
-	cmp	w1, w0
-	ble	.L1186
-	ldr	w0, [x28,x27]
-	add	w1, w19, 1
+	cmp	w2, 160
+	and	w1, w0, 1
+	tbnz	x0, 0, .L1393
+	cmp	w0, 2
+.L1393:
+	add	x0, x28, :lo12:.LANCHOR4
+	bne	.L1314
+	ldrh	w0, [x0,1162]
+	ldr	w2, [x29,140]
+	cmp	w2, w0
+	ble	.L1315
+	ldr	w0, [x4,x3]
 	ubfx	x0, x0, 11, 8
-	cmp	w0, w1
-	bgt	.L1186
-	mov	w1, w2
-	mov	w0, w21
+	cmp	w0, w21
+	bls	.L1316
+	cbz	w1, .L1315
+	ldrh	w0, [x4,x3]
+	and	w0, w0, 2047
+	cmp	w0, w20
+	bgt	.L1315
+.L1316:
+	mov	w1, 0
+	mov	w0, w24
 	mov	w2, 1
+	str	x4, [x29,104]
+	str	x3, [x29,112]
+	add	w22, w22, 1
 	bl	gc_add_sblk
-	ldr	w0, [x29,140]
-	add	w0, w0, 1
-	str	w0, [x29,140]
-	ldr	x0, [x29,128]
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 10, .L1186
-	ldr	x0, [x23,64]
-	ldr	x11, [x23,72]
-	add	x0, x0, x27
-	ldrh	w5, [x28,x27]
-	ldr	w6, [x28,x27]
-	ldrb	w2, [x0,2]
-	ldr	x0, [x29,104]
-	b	.L1214
-.L1185:
-	ldrh	w0, [x0,1128]
-	ldr	w2, [x29,124]
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 1
+	add	x9, x0, 2896
+	ldr	x3, [x29,112]
+	ldr	x4, [x29,104]
+	strh	w1, [x0,3214]
+	ldr	w1, [x23,#:lo12:.LANCHOR2]
+	tbz	x1, 10, .L1315
+	ldr	x1, [x0,584]
+	ldr	x10, [x0,600]
+	add	x1, x1, x3
+	ldrh	w5, [x4,x3]
+	ldr	w6, [x4,x3]
+	ldr	x0, [x29,120]
+	ldrb	w2, [x1,2]
+	b	.L1394
+.L1314:
+	ldrh	w0, [x0,1160]
+	ldr	w2, [x29,136]
 	cmp	w2, w0
-	ble	.L1186
-	ldrh	w0, [x28,x27]
-	add	w2, w26, 1
+	ble	.L1315
+	ldrh	w0, [x4,x3]
+	add	w2, w20, 8
 	and	w0, w0, 2047
 	cmp	w0, w2
-	bgt	.L1186
-	mov	w0, w21
+	ble	.L1317
+	cbz	w1, .L1315
+	ldr	w0, [x4,x3]
+	add	w1, w21, 4
+	ubfx	x0, x0, 11, 8
+	cmp	w0, w1
+	bgt	.L1315
+.L1317:
+	mov	w1, 0
+	mov	w0, w24
 	mov	w2, 1
-	add	w24, w24, 1
+	str	x4, [x29,104]
+	str	x3, [x29,112]
+	add	w26, w26, 1
 	bl	gc_add_sblk
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 1
+	add	x9, x0, 2896
+	ldr	x3, [x29,112]
+	ldr	x4, [x29,104]
+	strh	w1, [x0,3214]
+	ldr	w1, [x23,#:lo12:.LANCHOR2]
+	tbz	x1, 10, .L1315
+	ldr	x1, [x0,584]
+	ldr	x10, [x0,600]
+	add	x1, x1, x3
+	ldrh	w5, [x4,x3]
+	ldr	w6, [x4,x3]
 	ldr	x0, [x29,128]
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 10, .L1186
-	ldr	x0, [x23,64]
-	ldr	x11, [x23,72]
-	add	x0, x0, x27
-	ldrh	w5, [x28,x27]
-	ldr	w6, [x28,x27]
-	ldrb	w2, [x0,2]
-	ldr	x0, [x29,112]
-.L1214:
-	ldrh	w3, [x11,x22,lsl 1]
-	mov	w1, w21
-	ldrh	w4, [x23,2944]
+	ldrb	w2, [x1,2]
+.L1394:
+	ldrh	w3, [x10,x25,lsl 1]
+	mov	w1, w24
+	ldrh	w4, [x9,56]
 	ubfx	x2, x2, 5, 3
 	and	w5, w5, 2047
 	ubfx	x6, x6, 11, 8
 	bl	printk
-.L1186:
-	cmp	w24, 4
-	bhi	.L1187
-	ldr	w0, [x29,140]
-	cmp	w0, 4
-	bhi	.L1187
-.L1184:
-	add	w10, w21, 1
-	uxth	w21, w10
-	b	.L1183
-.L1192:
+.L1315:
+	cmp	w26, 4
+	bhi	.L1318
+	cmp	w22, 4
+	bhi	.L1318
+.L1311:
+	add	w27, w27, 1
+	uxth	w27, w27
+	b	.L1309
+.L1318:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,608]
+	str	w24, [x0,580]
+	b	.L1308
+.L1335:
+	mov	w26, 0
+	mov	w22, w26
+.L1308:
+	cbz	w21, .L1321
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2864]
+	ldrh	w0, [x0,134]
+.L1322:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x1,576]
+	cmp	w2, w0
+	bls	.L1396
 	ubfiz	x3, x0, 2, 16
-	ldr	x4, [x1,64]
+	ldr	x4, [x1,584]
+	add	x5, x4, x3
 	ldr	w1, [x4,x3]
 	ubfx	x2, x1, 11, 8
-	cmp	w2, w19
-	bcc	.L1191
-	sub	w2, w2, w19
+	cmp	w2, w21
+	bcc	.L1323
+	ldrb	w5, [x5,2]
+	tst	w5, 24
+	beq	.L1323
+	sub	w2, w2, w21
 	bfi	w1, w2, 11, 8
 	str	w1, [x4,x3]
-.L1191:
+.L1323:
 	add	w0, w0, 1
 	uxth	w0, w0
-.L1190:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x1,56]
-	cmp	w2, w0
-	bhi	.L1192
-	ldr	x0, [x1,2848]
+	b	.L1322
+.L1396:
+	ldr	x0, [x1,2864]
 	ldrh	w1, [x0,72]
-	add	w1, w19, w1
+	add	w1, w21, w1
 	strh	w1, [x0,72]
 	ldrh	w1, [x0,98]
-	cmp	w1, w19
-	bls	.L1189
-	sub	w19, w1, w19
-	strh	w19, [x0,98]
-.L1189:
-	cbz	w26, .L1167
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,2848]
+	cmp	w1, w21
+	bls	.L1321
+	sub	w21, w1, w21
+	strh	w21, [x0,98]
+.L1321:
+	cbz	w20, .L1327
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2864]
 	ldrh	w0, [x0,134]
-.L1194:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x1,56]
+.L1328:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x1,576]
 	cmp	w2, w0
-	bls	.L1216
+	bls	.L1397
 	ubfiz	x3, x0, 2, 16
-	ldr	x4, [x1,64]
+	ldr	x4, [x1,584]
+	add	x5, x4, x3
 	ldrh	w1, [x4,x3]
 	and	w2, w1, 2047
-	cmp	w2, w26
-	blt	.L1195
-	sub	w2, w2, w26
+	cmp	w2, w20
+	blt	.L1329
+	ldrb	w5, [x5,2]
+	and	w5, w5, 24
+	cmp	w5, 16
+	beq	.L1329
+	sub	w2, w2, w20
 	bfi	w1, w2, 0, 11
 	strh	w1, [x4,x3]
-.L1195:
+.L1329:
 	add	w0, w0, 1
 	uxth	w0, w0
-	b	.L1194
-.L1216:
-	ldr	x0, [x1,2848]
+	b	.L1328
+.L1397:
+	ldr	x0, [x1,2864]
 	ldrh	w1, [x0,74]
-	add	w1, w26, w1
+	add	w1, w20, w1
 	strh	w1, [x0,74]
 	ldrh	w1, [x0,96]
-	cmp	w1, w26
-	bls	.L1167
-	sub	w7, w1, w26
-	strh	w7, [x0,96]
-	b	.L1167
-.L1173:
-	cmp	w26, w8
-	add	w1, w1, 1
-	csel	w7, w26, w8, cc
-	cmp	w22, w8
-	add	w9, w9, w8
-	csel	w8, w22, w8, hi
-	cmp	w0, w12
-	uxth	w1, w1
-	uxth	w26, w7
-	uxth	w22, w8
-	bne	.L1197
-	b	.L1198
-.L1167:
+	cmp	w1, w20
+	bls	.L1327
+	sub	w20, w1, w20
+	strh	w20, [x0,96]
+.L1327:
+	mov	w1, 5
+	mov	w0, 0
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	mov	w2, 65535
+	cmp	w1, w2
+	beq	.L1285
+	add	x19, x19, :lo12:.LANCHOR0
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x19,600]
+	ldrh	w2, [x2,x1]
+	ldrh	w1, [x19,3300]
+	cmp	w2, w1
+	bhi	.L1285
+	mov	w1, 0
+	mov	w2, 1
+	add	w22, w22, 1
+	bl	gc_add_sblk
+	b	.L1285
+.L1334:
+	mov	w26, 0
+	mov	w22, w26
+.L1285:
+	add	w0, w26, w22
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -7781,199 +8657,202 @@ zftl_sblk_list_init:
 	stp	x27, x28, [sp,80]
 	mov	w24, 6
 	mov	w23, 32768
-	ldrh	w2, [x19,56]
-	adrp	x26, .LC113
-	ldr	x0, [x19,8]
+	ldrh	w2, [x19,576]
+	adrp	x26, .LC125
+	ldr	x0, [x19,528]
 	mov	w25, -1
-	add	x26, x26, :lo12:.LC113
+	add	x26, x26, :lo12:.LC125
 	mul	w2, w2, w24
 	bl	ftl_memset
-	ldrh	w22, [x19,3276]
-	ldrb	w0, [x19,3244]
-	str	xzr, [x19,3288]
-	str	xzr, [x19,3296]
+	ldrh	w22, [x19,3274]
+	mov	w0, 16
+	strh	w0, [x19,3336]
+	ldrb	w0, [x19,3276]
+	str	xzr, [x19,3312]
+	str	xzr, [x19,3320]
 	mul	w22, w0, w22
-	str	xzr, [x19,3304]
-	str	xzr, [x19,3264]
+	str	xzr, [x19,3328]
+	str	xzr, [x19,3288]
 	sdiv	w22, w23, w22
-	str	xzr, [x19,3256]
-	str	xzr, [x19,3248]
-	strh	wzr, [x19,2828]
-	strh	wzr, [x19,2830]
-	strh	wzr, [x19,2832]
-	strh	wzr, [x19,2834]
-	strh	wzr, [x19,2838]
-	strh	wzr, [x19,2836]
+	str	xzr, [x19,616]
+	str	xzr, [x19,3280]
+	strh	wzr, [x19,2844]
+	strh	wzr, [x19,2846]
+	strh	wzr, [x19,2848]
+	strh	wzr, [x19,2850]
+	strh	wzr, [x19,2854]
+	strh	wzr, [x19,2852]
 	sxth	w0, w22
 	str	w0, [x29,108]
-	ldr	x0, [x19,2848]
+	ldr	x0, [x19,2864]
 	ldrsh	w19, [x0,134]
 	strh	wzr, [x0,146]
-.L1218:
-	add	x1, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x1,56]
-	cmp	w19, w0
-	bge	.L1248
+.L1399:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x0,576]
+	cmp	w19, w1
+	bge	.L1429
 	sxtw	x22, w19
-	ldr	x27, [x1,64]
-	ldr	w2, [x29,108]
+	ldr	x27, [x0,584]
+	ldr	w1, [x29,108]
 	add	x27, x27, x22, lsl 2
-	ldrb	w0, [x27,3]
-	cbz	w0, .L1219
+	ldrb	w2, [x27,3]
+	cbz	w2, .L1400
+	ldrb	w5, [x0,3276]
+	ldrh	w6, [x0,3274]
+	ldr	x4, [x0,2864]
 	mov	w0, 0
-	ldrb	w5, [x1,3244]
-	ldrh	w6, [x1,3276]
-	mov	w2, w0
-	ldr	x4, [x1,2848]
-.L1220:
+	mov	w1, w0
+.L1401:
 	cmp	w0, w5
-	bge	.L1249
-	ldrb	w1, [x27,3]
-	asr	w1, w1, w0
-	tbnz	x1, 0, .L1221
-	add	w2, w6, w2
-	sxth	w2, w2
-	b	.L1222
-.L1221:
-	ldrh	w1, [x4,146]
-	add	w1, w1, 1
-	strh	w1, [x4,146]
-.L1222:
+	bge	.L1430
+	ldrb	w2, [x27,3]
+	asr	w2, w2, w0
+	tbnz	x2, 0, .L1402
+	add	w1, w6, w1
+	sxth	w1, w1
+	b	.L1403
+.L1402:
+	ldrh	w2, [x4,146]
+	add	w2, w2, 1
+	strh	w2, [x4,146]
+.L1403:
 	add	w0, w0, 1
-	b	.L1220
-.L1249:
-	cbz	w2, .L1224
-	sdiv	w2, w23, w2
-	sxth	w2, w2
-	b	.L1219
-.L1224:
+	b	.L1401
+.L1430:
+	cbz	w1, .L1405
+	sdiv	w1, w23, w1
+	add	w1, w1, 1
+	sxth	w1, w1
+	b	.L1400
+.L1405:
 	ldrb	w0, [x27,2]
 	orr	w0, w0, -32
 	strb	w0, [x27,2]
 	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x0, [x0,72]
+	ldr	x0, [x0,600]
 	strh	w25, [x0,x22,lsl 1]
-.L1219:
+.L1400:
 	add	x20, x21, :lo12:.LANCHOR0
 	smull	x0, w19, w24
-	ldr	x1, [x20,8]
-	add	x1, x1, x0
-	strh	w2, [x1,4]
-	ldr	x1, [x20,8]
+	ldr	x2, [x20,528]
+	add	x2, x2, x0
+	strh	w1, [x2,4]
+	ldr	x1, [x20,528]
 	add	x2, x1, x0
 	strh	w25, [x2,2]
 	strh	w25, [x1,x0]
 	ldrb	w1, [x27,2]
 	and	w0, w1, 224
 	cmp	w0, 224
-	beq	.L1227
+	beq	.L1408
 	cmp	w0, 32
 	cset	w28, eq
-	cbnz	w28, .L1227
-	ldr	x2, [x20,80]
+	cbnz	w28, .L1408
+	ldr	x2, [x20,608]
 	ldrh	w4, [x2,16]
 	cmp	w19, w4
-	beq	.L1227
+	beq	.L1408
 	ldrh	w4, [x2,48]
 	cmp	w19, w4
-	beq	.L1227
+	beq	.L1408
 	ldrh	w2, [x2,80]
 	cmp	w19, w2
-	beq	.L1227
+	beq	.L1408
 	cmp	w0, 64
-	bne	.L1229
+	bne	.L1410
 	uxth	w27, w19
-	add	x0, x20, 3256
+	add	x0, x20, 616
 	mov	w1, w27
-	add	x2, x20, 2834
-	b	.L1246
-.L1229:
+	add	x2, x20, 2850
+	b	.L1427
+.L1410:
 	cmp	w0, 96
-	bne	.L1230
+	bne	.L1411
 	uxth	w27, w19
-	add	x0, x20, 3264
+	add	x0, x20, 3288
 	mov	w1, w27
-	add	x2, x20, 2836
-	b	.L1246
-.L1230:
+	add	x2, x20, 2852
+	b	.L1427
+.L1411:
 	cmp	w0, 160
-	bne	.L1231
+	bne	.L1412
 	uxth	w27, w19
-	add	x0, x20, 3248
+	add	x0, x20, 3280
 	mov	w1, w27
-	add	x2, x20, 2838
-.L1246:
+	add	x2, x20, 2854
+.L1427:
 	bl	_insert_data_list
-	ldr	x0, [x20,72]
+	ldr	x0, [x20,600]
 	ldrh	w0, [x0,x22,lsl 1]
 	cmp	w0, 7
-	bhi	.L1227
+	bhi	.L1408
 	mov	w0, w27
 	mov	w1, 1
 	mov	w2, w28
-	b	.L1244
-.L1231:
-	cbnz	w0, .L1227
-	ldr	x0, [x20,72]
+	b	.L1425
+.L1412:
+	cbnz	w0, .L1408
+	ldr	x0, [x20,600]
 	ldrh	w2, [x0,x22,lsl 1]
-	cbz	w2, .L1232
+	cbz	w2, .L1413
 	mov	x0, x26
 	mov	w1, w19
 	bl	printk
 	ldrb	w0, [x27,2]
-	tbz	x0, 4, .L1233
+	tbz	x0, 4, .L1414
 	mov	w1, 5
-	b	.L1240
-.L1233:
+	b	.L1421
+.L1414:
 	mov	w1, 2
-.L1240:
+.L1421:
 	bfi	w0, w1, 5, 3
 	mov	w2, 0
 	strb	w0, [x27,2]
 	mov	w1, 1
 	mov	w0, w19
-.L1244:
+.L1425:
 	bl	gc_add_sblk
-	b	.L1227
-.L1232:
+	b	.L1408
+.L1413:
 	ands	w1, w1, 24
 	add	x2, x21, :lo12:.LANCHOR0
-	bne	.L1235
-	add	x0, x2, 3288
+	bne	.L1416
+	add	x0, x2, 3312
 	mov	w1, w19
-	add	x2, x2, 2828
-	b	.L1242
-.L1235:
+	add	x2, x2, 2844
+	b	.L1423
+.L1416:
 	cmp	w1, 16
-	bne	.L1236
-	add	x0, x2, 3296
+	bne	.L1417
+	add	x0, x2, 3320
 	mov	w1, w19
-	add	x2, x2, 2830
-	b	.L1242
-.L1236:
-	add	x0, x2, 3304
+	add	x2, x2, 2846
+	b	.L1423
+.L1417:
+	add	x0, x2, 3328
 	mov	w1, w19
-	add	x2, x2, 2832
-.L1242:
+	add	x2, x2, 2848
+.L1423:
 	bl	_insert_free_list
-.L1227:
+.L1408:
 	add	w19, w19, 1
 	sxth	w19, w19
-	b	.L1218
-.L1248:
-	ldr	x0, [x1,2848]
-	ldrh	w2, [x1,2828]
-	strh	w2, [x0,114]
-	ldrh	w2, [x1,2830]
-	strh	w2, [x0,118]
-	ldrh	w2, [x1,2832]
-	strh	w2, [x0,116]
-	ldrh	w2, [x1,2834]
-	strh	w2, [x0,122]
-	ldrh	w2, [x1,2838]
-	ldrh	w1, [x1,2836]
-	strh	w2, [x0,120]
-	strh	w1, [x0,124]
+	b	.L1399
+.L1429:
+	ldr	x1, [x0,2864]
+	ldrh	w2, [x0,2844]
+	strh	w2, [x1,114]
+	ldrh	w2, [x0,2846]
+	strh	w2, [x1,118]
+	ldrh	w2, [x0,2848]
+	strh	w2, [x1,116]
+	ldrh	w2, [x0,2850]
+	strh	w2, [x1,122]
+	ldrh	w2, [x0,2854]
+	ldrh	w0, [x0,2852]
+	strh	w2, [x1,120]
+	strh	w0, [x1,124]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -7990,7 +8869,7 @@ ftl_open_sblk_init:
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
-	adrp	x20, .LC106
+	adrp	x20, .LC113
 	adrp	x23, .LANCHOR0
 	stp	x25, x26, [sp,64]
 	stp	x21, x22, [sp,32]
@@ -7999,10 +8878,10 @@ ftl_open_sblk_init:
 	mov	w21, w1
 	add	x25, x0, 16
 	mov	x26, x23
-	add	x20, x20, :lo12:.LC106
+	add	x20, x20, :lo12:.LC113
 	mov	w24, -1
-.L1251:
-.L1254:
+.L1432:
+.L1435:
 	mov	w0, w21
 	bl	ftl_alloc_sblk
 	uxth	w22, w0
@@ -8018,41 +8897,41 @@ ftl_open_sblk_init:
 	cmp	w21, 2
 	strh	wzr, [x19,2]
 	mov	w3, 0
-	ldrh	w1, [x0,3276]
+	ldrh	w1, [x0,3300]
 	strb	wzr, [x19,5]
 	strh	wzr, [x19,10]
 	mul	w2, w1, w2
 	strh	w2, [x19,6]
 	strb	w21, [x19,4]
-	beq	.L1252
-	ldrb	w3, [x0,3244]
+	beq	.L1433
+	ldrb	w3, [x0,3276]
 	mul	w3, w1, w3
 	uxth	w3, w3
-.L1252:
+.L1433:
 	add	x27, x26, :lo12:.LANCHOR0
 	strh	w3, [x19,12]
 	ubfiz	x28, x22, 1, 16
-	ldrb	w2, [x27,3244]
-	ldr	x0, [x27,3840]
+	ldrb	w2, [x27,3276]
+	ldr	x0, [x27,3872]
 	add	x0, x0, x3, uxth 2
 	mul	w2, w1, w2
 	mov	w1, 255
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldr	x0, [x27,72]
+	ldr	x0, [x27,600]
 	ldrh	w1, [x19,6]
 	strh	w1, [x0,x28]
 	ldrb	w0, [x19,9]
-	cbnz	w0, .L1250
+	cbnz	w0, .L1431
 	mov	x0, x20
 	mov	w1, w22
 	bl	printk
-	ldr	x0, [x27,72]
+	ldr	x0, [x27,600]
 	strh	w24, [x0,x28]
 	mov	w0, 7
 	strb	w0, [x19,4]
-	b	.L1254
-.L1250:
+	b	.L1435
+.L1431:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -8074,17 +8953,18 @@ pm_free_sblk:
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldrh	w0, [x0,1132]
+	ldrh	w0, [x0,1164]
 	cmp	w0, 128
-	bls	.L1257
+	bls	.L1438
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
+	mov	w2, 78
 	add	x1, x1, 96
-	mov	w2, 76
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L1257:
+	bl	dump_stack
+.L1438:
 	add	x28, x29, 112
 	mov	w1, 0
 	mov	w2, 256
@@ -8095,18 +8975,18 @@ pm_free_sblk:
 	mov	w0, 21
 	mov	w1, 1
 	mov	x3, 0
-	ldrh	w6, [x2,3314]
-	ldr	x4, [x2,2848]
+	ldrh	w6, [x2,3340]
+	ldr	x4, [x2,2864]
 	sub	w0, w0, w6
-	ldrb	w8, [x2,3312]
+	ldrb	w8, [x2,3338]
 	lsl	w0, w1, w0
 	add	x1, x23, :lo12:.LANCHOR4
 	ldrh	w7, [x4,698]
 	sub	w0, w0, #1
-	ldrh	w9, [x1,1132]
-.L1258:
+	ldrh	w9, [x1,1164]
+.L1439:
 	cmp	w7, w3, uxth
-	bls	.L1283
+	bls	.L1464
 	add	x1, x4, x3, lsl 2
 	mov	x2, 0
 	ldr	w1, [x1,704]
@@ -8114,90 +8994,90 @@ pm_free_sblk:
 	and	w1, w1, w0
 	udiv	w1, w1, w8
 	uxth	w1, w1
-.L1259:
+.L1440:
 	cmp	w9, w2, uxth
-	bls	.L1284
+	bls	.L1465
 	add	x5, x4, x2, lsl 1
 	ldrh	w5, [x5,416]
 	cmp	w5, w1
-	bne	.L1260
+	bne	.L1441
 	ldrh	w5, [x28,x2,lsl 1]
 	add	w5, w5, 1
 	strh	w5, [x28,x2,lsl 1]
-.L1260:
+.L1441:
 	add	x2, x2, 1
-	b	.L1259
-.L1284:
+	b	.L1440
+.L1465:
 	add	x3, x3, 1
-	b	.L1258
-.L1283:
+	b	.L1439
+.L1464:
 	add	x1, x21, :lo12:.LANCHOR0
 	mov	w25, 0
-	adrp	x24, .LC114
+	adrp	x24, .LC126
 	mov	w19, w25
 	adrp	x26, .LANCHOR2
 	mov	w27, -1
-	ldrb	w0, [x1,3244]
-	add	x24, x24, :lo12:.LC114
-	ldrh	w20, [x1,3276]
+	ldrb	w0, [x1,3276]
+	add	x24, x24, :lo12:.LC126
+	ldrh	w20, [x1,3300]
 	mul	w20, w0, w20
 	uxth	w20, w20
-.L1263:
+.L1444:
 	add	x0, x23, :lo12:.LANCHOR4
-	ldrh	w0, [x0,1132]
+	ldrh	w0, [x0,1164]
 	cmp	w0, w19
-	bls	.L1285
+	bls	.L1466
 	add	x0, x21, :lo12:.LANCHOR0
 	sxtw	x22, w19
 	add	x1, x22, 208
-	ldr	x4, [x0,2848]
-	ldrb	w2, [x0,3312]
+	ldr	x4, [x0,2864]
+	ldrb	w2, [x0,3338]
 	ldrh	w3, [x4,x1,lsl 1]
 	ldrh	w1, [x4,692]
 	sdiv	w1, w1, w2
 	cmp	w1, w3
-	bne	.L1264
-	ldrb	w1, [x0,3244]
-	ldrh	w0, [x0,3276]
+	bne	.L1445
+	ldrb	w1, [x0,3276]
+	ldrh	w0, [x0,3300]
 	mul	w0, w1, w0
 	strh	w0, [x28,w19,sxtw 1]
-.L1264:
+.L1445:
 	ldrh	w0, [x28,x22,lsl 1]
 	cmp	w20, w0
-	bls	.L1265
+	bls	.L1446
 	cmp	w0, wzr
 	csel	w25, w25, w19, eq
 	csel	w20, w20, w0, eq
-.L1265:
-	cbnz	w0, .L1267
+.L1446:
+	cbnz	w0, .L1448
 	mov	w0, 65535
 	cmp	w3, w0
-	beq	.L1267
+	beq	.L1448
 	ldr	w0, [x26,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L1268
+	tbz	x0, 12, .L1449
 	ldrh	w4, [x4,688]
 	mov	x0, x24
 	mov	w1, w19
 	mov	w2, 0
 	bl	printk
-.L1268:
+.L1449:
 	add	x1, x21, :lo12:.LANCHOR0
 	add	x22, x22, 208
 	str	x1, [x29,104]
-	ldr	x0, [x1,2848]
+	ldr	x0, [x1,2864]
 	ldrh	w0, [x0,x22,lsl 1]
 	bl	ftl_free_sblk
 	ldr	x1, [x29,104]
-	ldr	x0, [x1,2848]
+	ldr	x0, [x1,2864]
 	strh	w27, [x0,x22,lsl 1]
 	ldrh	w1, [x0,688]
 	sub	w1, w1, #1
 	strh	w1, [x0,688]
-.L1267:
+.L1448:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L1263
-.L1285:
+	b	.L1444
+.L1466:
 	mov	w0, w25
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -8228,35 +9108,35 @@ flash_into_data_init:
 	ldr	w0, [x1,#:lo12:.LANCHOR2]
 	stp	x19, x20, [sp,16]
 	mov	x20, x1
-	tbz	x0, 12, .L1288
+	tbz	x0, 12, .L1469
 	adrp	x2, .LANCHOR3
-	adrp	x0, .LC115
+	adrp	x0, .LC127
 	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC115
+	add	x0, x0, :lo12:.LC127
 	mov	w1, 100
 	add	x2, x2, 112
 	bl	printk
-.L1288:
+.L1469:
 	adrp	x19, .LANCHOR0
 	mov	w1, 0
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w2, 2048
-	ldr	x0, [x19,192]
+	ldr	x0, [x19,728]
 	bl	ftl_memset
-	ldr	x1, [x19,192]
+	ldr	x1, [x19,728]
 	mov	w0, 21321
 	movk	w0, 0x5359, lsl 16
 	mov	w2, 32
 	str	w0, [x1]
 	mov	w1, 2032
-	ldr	x0, [x19,192]
+	ldr	x0, [x19,728]
 	add	x0, x0, 80
 	str	w1, [x0,-72]
 	mov	w1, 1
 	strh	w1, [x0,-64]
-	add	x1, x19, 104
+	add	x1, x19, 640
 	bl	ftl_memcpy
-	ldr	x0, [x19,192]
+	ldr	x0, [x19,728]
 	add	x1, x20, :lo12:.LANCHOR2
 	add	x1, x1, 376
 	mov	w2, 32
@@ -8271,14 +9151,14 @@ flash_into_data_init:
 	.type	ftl_memcpy32, %function
 ftl_memcpy32:
 	mov	x3, 0
-.L1293:
+.L1474:
 	cmp	w2, w3
-	bls	.L1295
+	bls	.L1476
 	ldr	w4, [x1,x3,lsl 2]
 	str	w4, [x0,x3,lsl 2]
 	add	x3, x3, 1
-	b	.L1293
-.L1295:
+	b	.L1474
+.L1476:
 	ret
 	.size	ftl_memcpy32, .-ftl_memcpy32
 	.align	2
@@ -8300,17 +9180,17 @@ js_hash:
 	mov	w0, 42982
 	mov	x2, 0
 	movk	w0, 0x47c6, lsl 16
-.L1298:
+.L1479:
 	cmp	w1, w2
-	bls	.L1300
+	bls	.L1481
 	lsl	w3, w0, 5
 	ldrb	w4, [x5,x2]
 	add	w3, w3, w0, lsr 2
 	add	x2, x2, 1
 	add	w3, w3, w4
 	eor	w0, w0, w3
-	b	.L1298
-.L1300:
+	b	.L1479
+.L1481:
 	ret
 	.size	js_hash, .-js_hash
 	.align	2
@@ -8321,8 +9201,8 @@ timer_get_time:
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
 	ldr	x1, [x0,#:lo12:jiffies]
-	adrp	x0, .LANCHOR4+1136
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1136]
+	adrp	x0, .LANCHOR4+1168
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1168]
 	sub	x0, x1, x0
 	bl	jiffies_to_msecs
 	ldp	x29, x30, [sp], 16
@@ -8342,10 +9222,10 @@ StorageSysDataLoad:
 	mov	w1, 0
 	bl	ftl_memset
 	bl	rknand_device_lock
-	adrp	x0, .LANCHOR4+1144
+	adrp	x0, .LANCHOR4+1176
 	mov	x2, x19
 	mov	w1, 1
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1176]
 	ldr	x3, [x0,24]
 	mov	w0, w20
 	blr	x3
@@ -8365,10 +9245,10 @@ StorageSysDataStore:
 	str	x0, [x29,16]
 	str	x1, [x29,24]
 	bl	rknand_device_lock
-	adrp	x1, .LANCHOR4+1144
+	adrp	x1, .LANCHOR4+1176
 	ldr	x2, [x29,24]
 	ldr	x0, [x29,16]
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1176]
 	ldr	x3, [x1,32]
 	mov	w1, 1
 	blr	x3
@@ -8388,11 +9268,11 @@ FlashBootVendorRead:
 	str	x1, [x29,32]
 	str	x2, [x29,40]
 	bl	rknand_device_lock
-	adrp	x3, .LANCHOR4+1144
+	adrp	x3, .LANCHOR4+1176
 	ldr	x1, [x29,32]
 	ldr	x2, [x29,40]
 	ldr	x0, [x29,24]
-	ldr	x3, [x3,#:lo12:.LANCHOR4+1144]
+	ldr	x3, [x3,#:lo12:.LANCHOR4+1176]
 	ldr	x3, [x3,8]
 	blr	x3
 	str	x0, [x29,40]
@@ -8411,11 +9291,11 @@ FlashBootVendorWrite:
 	str	x1, [x29,32]
 	str	x2, [x29,40]
 	bl	rknand_device_lock
-	adrp	x3, .LANCHOR4+1144
+	adrp	x3, .LANCHOR4+1176
 	ldr	x1, [x29,32]
 	ldr	x2, [x29,40]
 	ldr	x0, [x29,24]
-	ldr	x3, [x3,#:lo12:.LANCHOR4+1144]
+	ldr	x3, [x3,#:lo12:.LANCHOR4+1176]
 	ldr	x3, [x3,16]
 	blr	x3
 	str	x0, [x29,40]
@@ -8428,20 +9308,20 @@ FlashBootVendorWrite:
 	.global	flash_sram_load_store
 	.type	flash_sram_load_store, %function
 flash_sram_load_store:
-	adrp	x4, .LANCHOR4+1152
+	adrp	x4, .LANCHOR4+1184
 	mov	x6, x0
 	stp	x29, x30, [sp, -16]!
 	uxtw	x1, w1
 	add	x29, sp, 0
-	ldr	x4, [x4,#:lo12:.LANCHOR4+1152]
+	ldr	x4, [x4,#:lo12:.LANCHOR4+1184]
 	add	x4, x4, 4096
-	cbnz	w2, .L1307
+	cbnz	w2, .L1488
 	add	x1, x4, x1
-	b	.L1309
-.L1307:
+	b	.L1490
+.L1488:
 	add	x0, x4, x1
 	mov	x1, x6
-.L1309:
+.L1490:
 	mov	w2, w3
 	bl	ftl_memcpy
 	ldp	x29, x30, [sp], 16
@@ -8458,13 +9338,13 @@ FlashCs123Init:
 	.type	rk_ftl_de_init, %function
 rk_ftl_de_init:
 	stp	x29, x30, [sp, -16]!
-	adrp	x0, .LC116
+	adrp	x0, .LC128
 	mov	w1, 0
 	add	x29, sp, 0
-	add	x0, x0, :lo12:.LC116
+	add	x0, x0, :lo12:.LC128
 	bl	printk
-	adrp	x0, .LANCHOR4+1144
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	adrp	x0, .LANCHOR4+1176
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1176]
 	ldr	x0, [x0,80]
 	blr	x0
 	ldp	x29, x30, [sp], 16
@@ -8474,10 +9354,10 @@ rk_ftl_de_init:
 	.global	rk_ftl_cache_write_back
 	.type	rk_ftl_cache_write_back, %function
 rk_ftl_cache_write_back:
-	adrp	x0, .LANCHOR4+1144
+	adrp	x0, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1176]
 	ldr	x1, [x0,64]
 	mov	w0, 0
 	blr	x1
@@ -8488,10 +9368,10 @@ rk_ftl_cache_write_back:
 	.global	rk_nand_suspend
 	.type	rk_nand_suspend, %function
 rk_nand_suspend:
-	adrp	x0, .LANCHOR4+1144
+	adrp	x0, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1176]
 	ldr	x0, [x0,88]
 	blr	x0
 	ldp	x29, x30, [sp], 16
@@ -8501,10 +9381,10 @@ rk_nand_suspend:
 	.global	rk_nand_resume
 	.type	rk_nand_resume, %function
 rk_nand_resume:
-	adrp	x0, .LANCHOR4+1144
+	adrp	x0, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1176]
 	ldr	x0, [x0,96]
 	blr	x0
 	ldp	x29, x30, [sp], 16
@@ -8514,10 +9394,10 @@ rk_nand_resume:
 	.global	rk_ftl_get_capacity
 	.type	rk_ftl_get_capacity, %function
 rk_ftl_get_capacity:
-	adrp	x0, .LANCHOR4+1144
+	adrp	x0, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1176]
 	ldr	x1, [x0,72]
 	mov	w0, 0
 	blr	x1
@@ -8528,10 +9408,10 @@ rk_ftl_get_capacity:
 	.global	rk_nandc_get_irq_status
 	.type	rk_nandc_get_irq_status, %function
 rk_nandc_get_irq_status:
-	adrp	x1, .LANCHOR4+1144
+	adrp	x1, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1176]
 	ldr	x1, [x1,120]
 	blr	x1
 	ldp	x29, x30, [sp], 16
@@ -8541,10 +9421,10 @@ rk_nandc_get_irq_status:
 	.global	rknand_proc_ftlread
 	.type	rknand_proc_ftlread, %function
 rknand_proc_ftlread:
-	adrp	x1, .LANCHOR4+1144
+	adrp	x1, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1176]
 	ldr	x1, [x1,128]
 	blr	x1
 	ldp	x29, x30, [sp], 16
@@ -8554,11 +9434,11 @@ rknand_proc_ftlread:
 	.global	FtlWrite
 	.type	FtlWrite, %function
 FtlWrite:
-	adrp	x4, .LANCHOR4+1144
+	adrp	x4, .LANCHOR4+1176
 	uxtb	w0, w0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x4, [x4,#:lo12:.LANCHOR4+1144]
+	ldr	x4, [x4,#:lo12:.LANCHOR4+1176]
 	ldr	x4, [x4,48]
 	blr	x4
 	ldp	x29, x30, [sp], 16
@@ -8568,11 +9448,11 @@ FtlWrite:
 	.global	FtlRead
 	.type	FtlRead, %function
 FtlRead:
-	adrp	x4, .LANCHOR4+1144
+	adrp	x4, .LANCHOR4+1176
 	uxtb	w0, w0
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x4, [x4,#:lo12:.LANCHOR4+1144]
+	ldr	x4, [x4,#:lo12:.LANCHOR4+1176]
 	ldr	x4, [x4,40]
 	blr	x4
 	ldp	x29, x30, [sp], 16
@@ -8582,10 +9462,10 @@ FtlRead:
 	.global	FtlDiscard
 	.type	FtlDiscard, %function
 FtlDiscard:
-	adrp	x2, .LANCHOR4+1144
+	adrp	x2, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x2, [x2,#:lo12:.LANCHOR4+1144]
+	ldr	x2, [x2,#:lo12:.LANCHOR4+1176]
 	ldr	x2, [x2,56]
 	blr	x2
 	ldp	x29, x30, [sp], 16
@@ -8595,10 +9475,10 @@ FtlDiscard:
 	.global	rk_ftl_garbage_collect
 	.type	rk_ftl_garbage_collect, %function
 rk_ftl_garbage_collect:
-	adrp	x2, .LANCHOR4+1144
+	adrp	x2, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x2, [x2,#:lo12:.LANCHOR4+1144]
+	ldr	x2, [x2,#:lo12:.LANCHOR4+1176]
 	ldr	x2, [x2,104]
 	blr	x2
 	ldp	x29, x30, [sp], 16
@@ -8608,10 +9488,10 @@ rk_ftl_garbage_collect:
 	.global	ReadFlashInfo
 	.type	ReadFlashInfo, %function
 ReadFlashInfo:
-	adrp	x1, .LANCHOR4+1144
+	adrp	x1, .LANCHOR4+1176
 	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1176]
 	ldr	x1, [x1,112]
 	blr	x1
 	ldp	x29, x30, [sp], 16
@@ -8627,8 +9507,8 @@ rknand_print_hex:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	mov	x19, 0
-	adrp	x23, .LC117
-	adrp	x21, .LC118
+	adrp	x23, .LC129
+	adrp	x21, .LC130
 	adrp	x24, .LC1
 	stp	x25, x26, [sp,64]
 	str	x27, [sp,80]
@@ -8637,48 +9517,48 @@ rknand_print_hex:
 	mov	w25, w2
 	uxtw	x26, w3
 	mov	w20, w19
-	add	x23, x23, :lo12:.LC117
-	add	x21, x21, :lo12:.LC118
+	add	x23, x23, :lo12:.LC129
+	add	x21, x21, :lo12:.LC130
 	add	x24, x24, :lo12:.LC1
-.L1324:
+.L1505:
 	cmp	x19, x26
-	beq	.L1332
-	cbnz	w20, .L1325
+	beq	.L1513
+	cbnz	w20, .L1506
 	mov	x0, x23
 	mov	x1, x27
 	mov	x2, x22
 	mov	w3, w19
 	bl	printk
-.L1325:
+.L1506:
 	cmp	w25, 4
 	mov	x0, x21
-	bne	.L1326
+	bne	.L1507
 	ldr	w1, [x22,x19,lsl 2]
-	b	.L1331
-.L1326:
+	b	.L1512
+.L1507:
 	cmp	w25, 2
-	bne	.L1328
+	bne	.L1509
 	ldrsh	w1, [x22,x19,lsl 1]
-	b	.L1331
-.L1328:
+	b	.L1512
+.L1509:
 	ldrb	w1, [x22,x19]
-.L1331:
+.L1512:
 	bl	printk
 	add	w20, w20, 1
 	cmp	w20, 15
-	bls	.L1329
-	adrp	x1, .LC119
+	bls	.L1510
+	adrp	x1, .LC131
 	mov	x0, x24
-	add	x1, x1, :lo12:.LC119
+	add	x1, x1, :lo12:.LC131
 	mov	w20, 0
 	bl	printk
-.L1329:
+.L1510:
 	add	x19, x19, 1
-	b	.L1324
-.L1332:
+	b	.L1505
+.L1513:
 	adrp	x0, .LC1
-	adrp	x1, .LC119
-	add	x1, x1, :lo12:.LC119
+	adrp	x1, .LC131
+	add	x1, x1, :lo12:.LC131
 	add	x0, x0, :lo12:.LC1
 	bl	printk
 	ldr	x27, [sp,80]
@@ -8707,7 +9587,7 @@ hynix_get_read_retry_default:
 	stp	x27, x28, [sp,80]
 	cmp	w25, 2
 	str	x19, [x29,128]
-	ldr	x27, [x0,192]
+	ldr	x27, [x0,728]
 	add	x0, x27, 112
 	str	x0, [x29,136]
 	mov	w0, -84
@@ -8718,30 +9598,30 @@ hynix_get_read_retry_default:
 	add	x26, x27, 128
 	strb	w1, [x27,130]
 	strb	w0, [x27,131]
-	bne	.L1334
+	bne	.L1515
 	ldr	x1, [x29,136]
 	mov	w0, -89
 	strb	w0, [x1,16]
 	adrp	x0, .LANCHOR2+425
 	mov	w1, -9
 	strb	w1, [x0,#:lo12:.LANCHOR2+425]
-	b	.L1389
-.L1334:
+	b	.L1570
+.L1515:
 	cmp	w25, 3
-	bne	.L1336
+	bne	.L1517
 	mov	x4, 0
-.L1337:
+.L1518:
 	sub	w0, w4, #80
 	strb	w0, [x26,x4]
 	add	x4, x4, 1
 	cmp	x4, 8
-	bne	.L1337
+	bne	.L1518
 	mov	w21, w4
 	mov	w28, w4
-	b	.L1335
-.L1336:
+	b	.L1516
+.L1517:
 	cmp	w25, 4
-	bne	.L1338
+	bne	.L1519
 	mov	w4, -52
 	strb	w4, [x27,128]
 	mov	w4, -65
@@ -8757,10 +9637,10 @@ hynix_get_read_retry_default:
 	strb	w1, [x27,134]
 	strb	w4, [x27,132]
 	strb	w0, [x27,135]
-	b	.L1335
-.L1338:
+	b	.L1516
+.L1519:
 	cmp	w25, 5
-	bne	.L1339
+	bne	.L1520
 	mov	w0, 56
 	strb	w0, [x27,128]
 	mov	w0, 57
@@ -8770,10 +9650,10 @@ hynix_get_read_retry_default:
 	strb	w0, [x27,130]
 	mov	w0, 59
 	strb	w0, [x27,131]
-	b	.L1423
-.L1339:
+	b	.L1604
+.L1520:
 	cmp	w25, 6
-	bne	.L1340
+	bne	.L1521
 	mov	w0, 14
 	strb	w0, [x27,128]
 	mov	w0, 15
@@ -8783,32 +9663,32 @@ hynix_get_read_retry_default:
 	strb	w0, [x27,130]
 	mov	w0, 17
 	strb	w0, [x27,131]
-	b	.L1423
-.L1340:
+	b	.L1604
+.L1521:
 	cmp	w25, 7
-	bne	.L1389
+	bne	.L1570
 	mov	x0, 0
-.L1341:
+.L1522:
 	sub	w1, w0, #80
 	strb	w1, [x26,x0]
 	add	x0, x0, 1
 	cmp	x0, 8
-	bne	.L1341
+	bne	.L1522
 	mov	w0, -44
 	mov	w21, 12
 	strb	w0, [x27,136]
 	mov	w28, 10
 	mov	w0, -43
 	strb	w0, [x27,137]
-	b	.L1335
-.L1389:
+	b	.L1516
+.L1570:
 	mov	w21, 7
-.L1423:
+.L1604:
 	mov	w28, 4
-.L1335:
+.L1516:
 	sub	w0, w25, #1
 	cmp	w0, 1
-	bhi	.L1420
+	bhi	.L1601
 	ldr	x0, [x29,128]
 	adrp	x24, .LANCHOR2
 	add	x24, x24, :lo12:.LANCHOR2
@@ -8816,21 +9696,21 @@ hynix_get_read_retry_default:
 	add	x19, x0, :lo12:.LANCHOR0
 	mov	w27, 55
 	add	x24, x24, 408
-.L1342:
-	ldrb	w0, [x19,98]
+.L1523:
+	ldrb	w0, [x19,633]
 	cmp	w0, w23
-	bls	.L1349
+	bls	.L1530
 	add	x0, x19, x23, sxtw
 	ldr	x2, [x29,136]
-	ldrb	w0, [x0,200]
+	ldrb	w0, [x0,736]
 	mov	x20, 160
-	ldr	x22, [x19,16]
+	ldr	x22, [x19,536]
 	mov	x25, 0
 	ubfiz	x1, x0, 8, 8
 	madd	x20, x0, x20, x2
 	add	x22, x22, x1
 	add	x20, x20, 32
-.L1344:
+.L1525:
 	str	w27, [x22,2056]
 	ldrb	w0, [x26,x25]
 	str	w0, [x22,2052]
@@ -8840,12 +9720,12 @@ hynix_get_read_retry_default:
 	strb	w0, [x20,x25]
 	add	x25, x25, 1
 	cmp	w28, w25, uxtb
-	bhi	.L1344
+	bhi	.L1525
 	mov	x0, 0
-.L1345:
+.L1526:
 	add	w2, w0, 8
 	mov	x1, 0
-.L1346:
+.L1527:
 	add	x3, x1, x0
 	add	x1, x1, 4
 	add	x3, x24, x3
@@ -8855,10 +9735,10 @@ hynix_get_read_retry_default:
 	add	w3, w5, w3
 	strb	w3, [x20,w2,sxtw]
 	add	w2, w2, 8
-	bne	.L1346
+	bne	.L1527
 	add	x0, x0, 1
 	cmp	x0, 4
-	bne	.L1345
+	bne	.L1526
 	add	w23, w23, 1
 	strb	wzr, [x20,16]
 	strb	wzr, [x20,24]
@@ -8868,11 +9748,11 @@ hynix_get_read_retry_default:
 	strb	wzr, [x20,48]
 	strb	wzr, [x20,41]
 	strb	wzr, [x20,49]
-	b	.L1342
-.L1420:
+	b	.L1523
+.L1601:
 	sub	w0, w25, #3
 	cmp	w0, 4
-	bhi	.L1349
+	bhi	.L1530
 	mul	w0, w28, w21
 	sub	w23, w28, #1
 	mov	w20, 0
@@ -8886,13 +9766,13 @@ hynix_get_read_retry_default:
 	adrp	x26, .LANCHOR4
 	add	x0, x23, 1
 	str	x0, [x29,112]
-.L1350:
+.L1531:
 	ldr	x0, [x29,128]
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrb	w1, [x0,98]
+	ldrb	w1, [x0,633]
 	cmp	w1, w20
-	bhi	.L1388
-.L1349:
+	bhi	.L1569
+.L1530:
 	ldr	x0, [x29,136]
 	strb	w28, [x0,1]
 	strb	w21, [x0,2]
@@ -8903,10 +9783,10 @@ hynix_get_read_retry_default:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 144
 	ret
-.L1388:
+.L1569:
 	add	x1, x0, x20, sxtw
-	ldrb	w1, [x1,200]
-	ldr	x0, [x0,16]
+	ldrb	w1, [x1,736]
+	ldr	x0, [x0,536]
 	mov	x24, 160
 	ubfiz	x2, x1, 8, 8
 	ldr	x3, [x29,136]
@@ -8921,28 +9801,28 @@ hynix_get_read_retry_default:
 	cmp	w25, 4
 	str	w0, [x23,2056]
 	ldr	x1, [x29,104]
-	bne	.L1351
+	bne	.L1532
 	mov	w0, 64
 	str	w1, [x23,2052]
 	str	w0, [x23,2048]
 	mov	w0, 204
-	b	.L1424
-.L1351:
+	b	.L1605
+.L1532:
 	cmp	w19, 1
-	bhi	.L1353
+	bhi	.L1534
 	ldrb	w0, [x27,128]
 	str	w0, [x23,2052]
 	mov	w0, 82
-	b	.L1425
-.L1353:
+	b	.L1606
+.L1534:
 	mov	w0, 174
 	str	w0, [x23,2052]
 	str	wzr, [x23,2048]
 	mov	w0, 176
-.L1424:
+.L1605:
 	str	w0, [x23,2052]
 	mov	w0, 77
-.L1425:
+.L1606:
 	str	w0, [x23,2048]
 	mov	w0, 22
 	str	w0, [x23,2056]
@@ -8956,13 +9836,13 @@ hynix_get_read_retry_default:
 	str	wzr, [x23,2056]
 	str	wzr, [x23,2052]
 	str	wzr, [x23,2052]
-	bne	.L1354
+	bne	.L1535
 	mov	w0, 31
 	str	w0, [x23,2052]
-	b	.L1355
-.L1354:
+	b	.L1536
+.L1535:
 	str	wzr, [x23,2052]
-.L1355:
+.L1536:
 	mov	w7, 2
 	str	w7, [x23,2052]
 	str	wzr, [x23,2052]
@@ -8972,89 +9852,89 @@ hynix_get_read_retry_default:
 	bl	nandc_wait_flash_ready
 	cmp	w19, 1
 	mov	w1, 16
-	bls	.L1357
+	bls	.L1538
 	ldr	x7, [x29,104]
 	cmp	w25, 7
 	mov	w1, 32
 	csel	w1, w1, w7, eq
-.L1357:
+.L1538:
 	adrp	x0, .LANCHOR4
 	mov	x7, 0
 	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x0, [x0,1160]
-.L1358:
+	ldr	x0, [x0,1192]
+.L1539:
 	ldr	w8, [x23,2048]
 	strb	w8, [x0,x7]
 	add	x7, x7, 1
 	cmp	w1, w7, uxtb
-	bhi	.L1358
+	bhi	.L1539
 	cmp	w25, 7
-	bne	.L1359
+	bne	.L1540
 	mov	w1, 0
-.L1361:
+.L1542:
 	ldrb	w7, [x0]
 	cmp	w7, 12
-	beq	.L1360
+	beq	.L1541
 	ldrb	w7, [x0,1]
 	cmp	w7, 10
-	beq	.L1360
+	beq	.L1541
 	add	w1, w1, 1
 	add	x0, x0, 4
 	uxtb	w1, w1
 	cmp	w1, 8
-	bne	.L1361
-	b	.L1362
-.L1360:
+	bne	.L1542
+	b	.L1543
+.L1541:
 	cmp	w1, 7
-	bne	.L1363
-.L1362:
-	adrp	x0, .LC120
+	bne	.L1544
+.L1543:
+	adrp	x0, .LC132
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC120
+	add	x0, x0, :lo12:.LC132
 	bl	printk
-.L1364:
-	b	.L1364
-.L1359:
+.L1545:
+	b	.L1545
+.L1540:
 	cmp	w25, 6
-	bne	.L1363
+	bne	.L1544
 	mov	x1, 0
-.L1365:
+.L1546:
 	ldrb	w7, [x0,x1]
 	cmp	w7, 12
-	beq	.L1363
+	beq	.L1544
 	add	x7, x0, x1
 	ldrb	w7, [x7,8]
 	cmp	w7, 4
-	beq	.L1363
+	beq	.L1544
 	add	x1, x1, 1
 	cmp	x1, 8
-	bne	.L1365
-	adrp	x0, .LC120
+	bne	.L1546
+	adrp	x0, .LC132
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC120
+	add	x0, x0, :lo12:.LC132
 	bl	printk
-.L1367:
-	b	.L1367
-.L1363:
+.L1548:
+	b	.L1548
+.L1544:
 	add	x0, x26, :lo12:.LANCHOR4
-	ldr	x9, [x0,1160]
+	ldr	x9, [x0,1192]
 	mov	x0, 0
-.L1368:
+.L1549:
 	ldr	w1, [x29,120]
 	cmp	w1, w0
-	ble	.L1427
+	ble	.L1608
 	ldr	w1, [x23,2048]
 	strb	w1, [x9,x0]
 	add	x0, x0, 1
-	b	.L1368
-.L1427:
+	b	.L1549
+.L1608:
 	add	x0, x26, :lo12:.LANCHOR4
 	mov	w8, w22
 	mov	w7, 8
-	ldr	x11, [x0,1160]
-.L1371:
+	ldr	x11, [x0,1192]
+.L1552:
 	mov	w0, 0
-.L1370:
+.L1551:
 	add	w1, w0, w8
 	add	w0, w0, 1
 	sbfiz	x1, x1, 2, 32
@@ -9062,96 +9942,96 @@ hynix_get_read_retry_default:
 	ldr	w10, [x11,x1]
 	mvn	w10, w10
 	str	w10, [x11,x1]
-	bne	.L1370
+	bne	.L1551
 	ldr	w0, [x29,124]
 	subs	w7, w7, #1
 	add	w8, w8, w0
-	bne	.L1371
+	bne	.L1552
 	mov	x7, 0
 	mov	w15, 1
-.L1372:
+.L1553:
 	add	x0, x26, :lo12:.LANCHOR4
 	mov	w1, 0
 	mov	w10, w1
-	ldr	x14, [x0,1160]
-.L1376:
+	ldr	x14, [x0,1192]
+.L1557:
 	lsl	w8, w15, w10
 	mov	w12, w7
 	mov	w0, 16
 	mov	w11, 0
-.L1374:
+.L1555:
 	ldr	w13, [x14,w12,sxtw 2]
 	add	w12, w12, w22
 	and	w13, w8, w13
 	cmp	w13, w8
 	csinc	w11, w11, w11, ne
 	subs	w0, w0, #1
-	bne	.L1374
+	bne	.L1555
 	cmp	w11, 9
 	orr	w8, w1, w8
 	add	w10, w10, 1
 	csel	w1, w8, w1, cs
 	cmp	w10, 32
-	bne	.L1376
+	bne	.L1557
 	str	w1, [x14,x7,lsl 2]
 	add	x7, x7, 1
 	cmp	w22, w7
-	bgt	.L1372
+	bgt	.L1553
 	add	x1, x26, :lo12:.LANCHOR4
 	mov	x7, 0
 	mov	w8, w7
-	ldr	x1, [x1,1160]
-.L1379:
+	ldr	x1, [x1,1192]
+.L1560:
 	ldr	w10, [x1,x7]
 	add	x7, x7, 4
 	cmp	w10, wzr
 	csinc	w8, w8, w8, ne
 	cmp	x7, 32
-	bne	.L1379
+	bne	.L1560
 	cmp	w8, 7
-	ble	.L1380
-	adrp	x0, .LC121
+	ble	.L1561
+	adrp	x0, .LC133
 	mov	w2, 1
-	add	x0, x0, :lo12:.LC121
+	add	x0, x0, :lo12:.LC133
 	mov	w3, 1024
 	bl	rknand_print_hex
-	adrp	x0, .LC120
+	adrp	x0, .LC132
 	mov	w1, 0
-	add	x0, x0, :lo12:.LC120
+	add	x0, x0, :lo12:.LC132
 	bl	printk
-.L1381:
-	b	.L1381
-.L1380:
+.L1562:
+	b	.L1562
+.L1561:
 	cmp	w25, 6
 	mov	w7, 4
-	beq	.L1382
+	beq	.L1563
 	cmp	w25, 7
 	mov	w7, 10
 	mov	w1, 8
 	csel	w7, w1, w7, ne
-.L1382:
+.L1563:
 	mov	w8, 0
-.L1383:
+.L1564:
 	mov	x1, 0
-.L1384:
+.L1565:
 	add	w10, w0, w1
 	ldrb	w11, [x9,x1]
 	add	x1, x1, 1
 	cmp	w28, w1, uxtb
 	strb	w11, [x24,w10,sxtw]
-	bhi	.L1384
+	bhi	.L1565
 	add	w8, w8, 1
 	ldr	x1, [x29,112]
 	cmp	w8, w21
 	add	w0, w0, w7
 	add	x9, x9, x1
-	blt	.L1383
+	blt	.L1564
 	mov	w24, 255
 	str	w24, [x23,2056]
 	bl	nandc_wait_flash_ready
 	cmp	w19, 1
 	mov	w0, 56
-	bhi	.L1426
+	bhi	.L1607
 	mov	w0, 54
 	str	w0, [x23,2056]
 	ldrb	w0, [x27,128]
@@ -9166,12 +10046,12 @@ hynix_get_read_retry_default:
 	str	w24, [x23,2052]
 	str	w24, [x23,2052]
 	str	w24, [x23,2052]
-.L1426:
+.L1607:
 	str	w0, [x23,2056]
 	add	w20, w20, 1
 	bl	nandc_wait_flash_ready
 	uxtb	w20, w20
-	b	.L1350
+	b	.L1531
 	.size	hynix_get_read_retry_default, .-hynix_get_read_retry_default
 	.align	2
 	.global	flash_get_read_retry_tbl
@@ -9184,9 +10064,9 @@ flash_get_read_retry_tbl:
 	sub	w1, w0, #1
 	uxtb	w1, w1
 	cmp	w1, 6
-	bhi	.L1428
+	bhi	.L1609
 	bl	hynix_get_read_retry_default
-.L1428:
+.L1609:
 	ldp	x29, x30, [sp], 16
 	ret
 	.size	flash_get_read_retry_tbl, .-flash_get_read_retry_tbl
@@ -9201,59 +10081,59 @@ nandc_xfer_done:
 	add	x20, x19, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
 	stp	x21, x22, [sp,32]
-	ldr	x0, [x20,16]
+	ldr	x0, [x20,536]
 	bl	wait_for_nandc_xfer_completed
 	adrp	x0, .LANCHOR4
 	add	x1, x0, :lo12:.LANCHOR4
 	mov	x23, x0
-	strb	wzr, [x1,1168]
-	ldrb	w1, [x19,#:lo12:.LANCHOR0]
+	strb	wzr, [x1,1200]
+	ldrb	w1, [x20,516]
 	cmp	w1, 9
-	bne	.L1431
-	ldr	x24, [x20,16]
+	bne	.L1612
+	ldr	x24, [x20,536]
 	ldr	w0, [x24,16]
 	str	w0, [x29,64]
 	ldr	w20, [x24,48]
 	ubfx	x20, x20, 1, 1
-	cbnz	w20, .L1451
-	adrp	x21, .LC125
-	adrp	x23, .LC124
-	add	x21, x21, :lo12:.LC125
-	add	x23, x23, :lo12:.LC124
-	b	.L1433
-.L1451:
-	adrp	x21, .LC123
-	adrp	x22, .LC124
+	cbnz	w20, .L1632
+	adrp	x21, .LC137
+	adrp	x23, .LC136
+	add	x21, x21, :lo12:.LC137
+	add	x23, x23, :lo12:.LC136
+	b	.L1614
+.L1632:
+	adrp	x21, .LC135
+	adrp	x22, .LC136
 	mov	w20, 0
-	add	x21, x21, :lo12:.LC123
-	add	x22, x22, :lo12:.LC124
-.L1432:
+	add	x21, x21, :lo12:.LC135
+	add	x22, x22, :lo12:.LC136
+.L1613:
 	ldr	w2, [x24,64]
 	ldr	w1, [x29,64]
 	ubfx	x2, x2, 16, 6
 	ubfx	x1, x1, 22, 6
 	cmp	w2, w1
-	bge	.L1435
+	bge	.L1616
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,16]
+	ldr	x0, [x0,536]
 	ldr	w0, [x0]
 	str	w0, [x29,72]
 	ldr	w0, [x29,72]
-	tbz	x0, 13, .L1434
+	tbz	x0, 13, .L1615
 	ldr	w0, [x29,72]
-	tbz	x0, 17, .L1434
+	tbz	x0, 17, .L1615
 	ldr	w1, [x29,72]
-	adrp	x0, .LC122
-	add	x0, x0, :lo12:.LC122
+	adrp	x0, .LC134
+	add	x0, x0, :lo12:.LC134
 	ubfx	x1, x1, 17, 1
 	bl	printk
-	b	.L1435
-.L1434:
+	b	.L1616
+.L1615:
 	ldr	w0, [x29,64]
 	add	w20, w20, 1
 	ubfx	x0, x0, 22, 6
 	cmp	w20, w0, lsl 12
-	bne	.L1432
+	bne	.L1613
 	ldr	w2, [x24,64]
 	mov	w1, w20
 	ldr	w3, [x29,64]
@@ -9265,18 +10145,18 @@ nandc_xfer_done:
 	mov	x0, x22
 	mov	w2, 4
 	mov	w3, 64
-	ldr	x1, [x1,16]
+	ldr	x1, [x1,536]
 	bl	rknand_print_hex
 	ldr	w0, [x29,72]
-	tbz	x0, 13, .L1432
+	tbz	x0, 13, .L1613
 	add	x0, x23, :lo12:.LANCHOR4
 	mov	w1, 1
-	strb	w1, [x0,1168]
-.L1435:
+	strb	w1, [x0,1200]
+.L1616:
 	add	x20, x19, :lo12:.LANCHOR0
-	add	x20, x20, 144
+	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1439
+	cbz	w0, .L1620
 	ldr	w1, [x29,64]
 	mov	w2, 0
 	ldr	w0, [x20,24]
@@ -9287,33 +10167,33 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 2
-	b	.L1479
-.L1441:
+	b	.L1660
+.L1622:
 	add	x22, x19, :lo12:.LANCHOR0
 	add	w20, w20, 1
-	ldr	x0, [x22,16]
+	ldr	x0, [x22,536]
 	ldr	w0, [x0,16]
 	str	w0, [x29,64]
 	and	w0, w20, 16777215
-	cbnz	w0, .L1433
+	cbnz	w0, .L1614
 	ldr	w2, [x29,64]
 	mov	w1, w20
 	ldr	w3, [x24,64]
 	mov	x0, x21
 	ubfx	x3, x3, 16, 6
 	bl	printk
-	ldr	x1, [x22,16]
+	ldr	x1, [x22,536]
 	mov	x0, x23
 	mov	w2, 4
 	mov	w3, 64
 	bl	rknand_print_hex
-.L1433:
+.L1614:
 	ldr	w0, [x29,64]
-	tbz	x0, 20, .L1441
+	tbz	x0, 20, .L1622
 	add	x20, x19, :lo12:.LANCHOR0
-	add	x20, x20, 144
+	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1439
+	cbz	w0, .L1620
 	ldr	w1, [x29,64]
 	mov	w2, 1
 	ldr	w0, [x20,24]
@@ -9324,49 +10204,49 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 2
-	b	.L1478
-.L1431:
-	ldr	x23, [x20,16]
+	b	.L1659
+.L1612:
+	ldr	x23, [x20,536]
 	ldr	w0, [x23,8]
 	str	w0, [x29,64]
 	ldr	w20, [x23,16]
 	ubfx	x20, x20, 1, 1
-	cbnz	w20, .L1452
-	adrp	x21, .LC125
-	adrp	x24, .LC124
-	add	x21, x21, :lo12:.LC125
-	add	x24, x24, :lo12:.LC124
-	b	.L1444
-.L1452:
-	adrp	x21, .LC123
-	adrp	x22, .LC124
+	cbnz	w20, .L1633
+	adrp	x21, .LC137
+	adrp	x24, .LC136
+	add	x21, x21, :lo12:.LC137
+	add	x24, x24, :lo12:.LC136
+	b	.L1625
+.L1633:
+	adrp	x21, .LC135
+	adrp	x22, .LC136
 	mov	w20, 0
-	add	x21, x21, :lo12:.LC123
-	add	x22, x22, :lo12:.LC124
-.L1443:
+	add	x21, x21, :lo12:.LC135
+	add	x22, x22, :lo12:.LC136
+.L1624:
 	ldr	w2, [x23,28]
 	ldr	w1, [x29,64]
 	ubfx	x2, x2, 16, 5
 	ubfx	x1, x1, 22, 6
 	cmp	w2, w1
-	bge	.L1446
+	bge	.L1627
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,16]
+	ldr	x0, [x0,536]
 	ldr	w0, [x0]
 	str	w0, [x29,72]
 	ldr	w0, [x29,72]
-	tbz	x0, 13, .L1445
+	tbz	x0, 13, .L1626
 	ldr	w0, [x29,72]
-	tbz	x0, 17, .L1445
+	tbz	x0, 17, .L1626
 	ldr	w1, [x29,72]
-	adrp	x0, .LC126
-	add	x0, x0, :lo12:.LC126
+	adrp	x0, .LC138
+	add	x0, x0, :lo12:.LC138
 	bl	printk
-	b	.L1446
-.L1445:
+	b	.L1627
+.L1626:
 	add	w20, w20, 1
 	and	w0, w20, 16777215
-	cbnz	w0, .L1443
+	cbnz	w0, .L1624
 	ldr	w2, [x23,28]
 	mov	w1, w20
 	ldr	w3, [x29,64]
@@ -9378,14 +10258,14 @@ nandc_xfer_done:
 	mov	x0, x22
 	mov	w2, 4
 	mov	w3, 64
-	ldr	x1, [x1,16]
+	ldr	x1, [x1,536]
 	bl	rknand_print_hex
-	b	.L1443
-.L1446:
+	b	.L1624
+.L1627:
 	add	x20, x19, :lo12:.LANCHOR0
-	add	x20, x20, 144
+	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1439
+	cbz	w0, .L1620
 	ldr	w1, [x29,64]
 	mov	w2, 0
 	ldr	w0, [x20,24]
@@ -9396,35 +10276,35 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 7
-.L1479:
+.L1660:
 	mov	w2, 0
-	b	.L1477
-.L1450:
+	b	.L1658
+.L1631:
 	add	x22, x19, :lo12:.LANCHOR0
 	add	w20, w20, 1
-	ldr	x0, [x22,16]
+	ldr	x0, [x22,536]
 	ldr	w0, [x0,8]
 	str	w0, [x29,64]
 	and	w0, w20, 16777215
-	cbnz	w0, .L1444
+	cbnz	w0, .L1625
 	ldr	w2, [x29,64]
 	mov	w1, w20
 	ldr	w3, [x23,28]
 	mov	x0, x21
 	ubfx	x3, x3, 16, 5
 	bl	printk
-	ldr	x1, [x22,16]
+	ldr	x1, [x22,536]
 	mov	x0, x24
 	mov	w2, 4
 	mov	w3, 64
 	bl	rknand_print_hex
-.L1444:
+.L1625:
 	ldr	w0, [x29,64]
-	tbz	x0, 20, .L1450
+	tbz	x0, 20, .L1631
 	add	x20, x19, :lo12:.LANCHOR0
-	add	x20, x20, 144
+	add	x20, x20, 680
 	ldr	w0, [x20,32]
-	cbz	w0, .L1439
+	cbz	w0, .L1620
 	ldr	w1, [x29,64]
 	mov	w2, 1
 	ldr	w0, [x20,24]
@@ -9435,15 +10315,15 @@ nandc_xfer_done:
 	ldr	w0, [x20,28]
 	ubfx	x1, x1, 22, 6
 	lsl	w1, w1, 7
-.L1478:
+.L1659:
 	mov	w2, 1
-.L1477:
+.L1658:
 	bl	rknand_dma_unmap_single
-.L1439:
+.L1620:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	str	wzr, [x19,176]
+	str	wzr, [x19,712]
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 80
 	ret
@@ -9468,19 +10348,19 @@ nandc_xfer:
 	bl	nandc_xfer_start
 	bl	nandc_xfer_done
 	mov	w0, 0
-	cbnz	w20, .L1510
+	cbnz	w20, .L1691
 	adrp	x19, .LANCHOR0
-	add	x3, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x19,#:lo12:.LANCHOR0]
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x2,516]
 	cmp	w1, 9
-	bne	.L1482
-	ldr	x5, [x3,16]
+	bne	.L1663
+	ldr	x5, [x2,536]
 	lsr	w22, w22, 2
 	mov	w4, 1
 	mov	w3, w0
-.L1483:
+.L1664:
 	cmp	w3, w22
-	bcs	.L1519
+	bcs	.L1700
 	uxtw	x1, w3
 	add	x1, x1, 84
 	ldr	w1, [x5,x1,lsl 2]
@@ -9492,33 +10372,33 @@ nandc_xfer:
 	and	w1, w1, w2
 	and	w4, w4, w1
 	ldr	w1, [x29,72]
-	tbnz	x1, 2, .L1502
+	tbnz	x1, 2, .L1683
 	ldr	w1, [x29,72]
-	tbnz	x1, 18, .L1502
+	tbnz	x1, 18, .L1683
 	ldr	w2, [x29,72]
 	ldr	w1, [x29,72]
 	ubfx	x2, x2, 3, 7
 	ubfx	x1, x1, 19, 7
 	cmp	w2, w1
 	ldr	w1, [x29,72]
-	ble	.L1485
+	ble	.L1666
 	ubfx	x1, x1, 3, 7
-	b	.L1486
-.L1485:
+	b	.L1667
+.L1666:
 	ubfx	x1, x1, 19, 7
-.L1486:
+.L1667:
 	cmp	w0, w1
 	csel	w0, w0, w1, cs
-	b	.L1484
-.L1502:
+	b	.L1665
+.L1683:
 	mov	w0, -1
-.L1484:
+.L1665:
 	add	w3, w3, 1
-	b	.L1483
-.L1519:
+	b	.L1664
+.L1700:
 	add	x22, x19, :lo12:.LANCHOR0
 	cmp	w4, wzr
-	ldr	x1, [x22,16]
+	ldr	x1, [x22,536]
 	ldr	w20, [x1]
 	mov	w1, 512
 	csel	w0, w0, w1, eq
@@ -9526,44 +10406,44 @@ nandc_xfer:
 	movk	w1, 0x2, lsl 16
 	and	w1, w20, w1
 	cmp	w1, 139264
-	bne	.L1489
-	adrp	x0, .LC127
+	bne	.L1670
+	adrp	x0, .LC139
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC127
+	add	x0, x0, :lo12:.LC139
 	orr	w20, w20, 131072
 	bl	printk
-	ldr	x0, [x22,16]
+	ldr	x0, [x22,536]
 	str	w20, [x0]
 	mov	w0, -1
-.L1489:
-	tbz	x20, 13, .L1490
-	adrp	x1, .LANCHOR4+1168
-	ldrb	w1, [x1,#:lo12:.LANCHOR4+1168]
-	cbz	w1, .L1490
-	adrp	x0, .LC128
+.L1670:
+	tbz	x20, 13, .L1671
+	adrp	x1, .LANCHOR4+1200
+	ldrb	w1, [x1,#:lo12:.LANCHOR4+1200]
+	cbz	w1, .L1671
+	adrp	x0, .LC140
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC128
+	add	x0, x0, :lo12:.LC140
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	printk
-	ldr	x0, [x19,16]
+	ldr	x0, [x19,536]
 	mov	w1, 1
 	str	w1, [x0,16]
-	b	.L1491
-.L1482:
-	ldrb	w0, [x3,188]
+	b	.L1672
+.L1663:
+	ldrb	w0, [x2,724]
 	mov	w5, 128
 	lsr	w6, w22, 1
-	mov	w2, 1
+	mov	w3, 1
 	cmp	w0, 25
 	mov	w0, 64
 	csel	w5, w0, w5, cc
 	mov	w1, w20
 	mov	w4, w20
-.L1493:
+.L1674:
 	cmp	w4, w6
 	add	w7, w1, w5
-	bcs	.L1520
-	ldr	x0, [x3,144]
+	bcs	.L1701
+	ldr	x0, [x2,680]
 	and	x1, x1, 4294967292
 	ldr	w0, [x0,x1]
 	ubfiz	x1, x4, 2, 30
@@ -9571,32 +10451,32 @@ nandc_xfer:
 	lsr	w8, w0, 16
 	strb	w0, [x23,x1]
 	lsr	w1, w0, 8
-	strb	w1, [x23,w2,uxtw]
-	add	w1, w2, 1
+	strb	w1, [x23,w3,uxtw]
+	add	w1, w3, 1
 	lsr	w0, w0, 24
 	strb	w8, [x23,x1]
-	add	w1, w2, 2
-	add	w2, w2, 4
+	add	w1, w3, 2
+	add	w3, w3, 4
 	strb	w0, [x23,x1]
 	mov	w1, w7
-	b	.L1493
-.L1520:
+	b	.L1674
+.L1701:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 0
 	lsr	w22, w22, 2
-	ldr	x6, [x0,16]
+	ldr	x6, [x0,536]
 	mov	w0, w2
-.L1495:
+.L1676:
 	cmp	w2, w22
-	bcs	.L1521
+	bcs	.L1702
 	uxtw	x1, w2
 	add	x1, x1, 8
 	ldr	w1, [x6,x1,lsl 2]
 	str	w1, [x29,72]
 	ldr	w1, [x29,72]
-	tbnz	x1, 2, .L1505
+	tbnz	x1, 2, .L1686
 	ldr	w1, [x29,72]
-	tbnz	x1, 15, .L1505
+	tbnz	x1, 15, .L1686
 	ldr	w3, [x29,72]
 	ubfx	x5, x3, 3, 5
 	ldr	w3, [x29,72]
@@ -9609,60 +10489,60 @@ nandc_xfer:
 	orr	w1, w4, w1, lsl 5
 	cmp	w3, w1
 	ldr	w1, [x29,72]
-	bls	.L1497
+	bls	.L1678
 	ubfx	x3, x1, 3, 5
 	ldr	w1, [x29,72]
 	ubfx	x1, x1, 27, 1
-	b	.L1518
-.L1497:
+	b	.L1699
+.L1678:
 	ubfx	x3, x1, 16, 5
 	ldr	w1, [x29,72]
 	ubfx	x1, x1, 29, 1
-.L1518:
+.L1699:
 	orr	w1, w3, w1, lsl 5
 	cmp	w0, w1
 	csel	w0, w0, w1, cs
-	b	.L1496
-.L1505:
+	b	.L1677
+.L1686:
 	mov	w0, -1
-.L1496:
+.L1677:
 	add	w2, w2, 1
-	b	.L1495
-.L1521:
+	b	.L1676
+.L1702:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,16]
+	ldr	x1, [x19,536]
 	str	wzr, [x1,16]
 	ldr	w20, [x1]
 	mov	w1, 8192
 	movk	w1, 0x2, lsl 16
 	and	w1, w20, w1
 	cmp	w1, 139264
-	bne	.L1490
-	adrp	x0, .LC129
+	bne	.L1671
+	adrp	x0, .LC141
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC129
+	add	x0, x0, :lo12:.LC141
 	orr	w20, w20, 131072
 	bl	printk
-	ldr	x0, [x19,16]
+	ldr	x0, [x19,536]
 	str	w20, [x0]
-	b	.L1491
-.L1490:
+	b	.L1672
+.L1671:
 	cmn	w0, #1
-	beq	.L1510
+	beq	.L1691
 	ldr	w1, [x23]
 	cmn	w1, #1
-	bne	.L1510
+	bne	.L1691
 	ldr	w1, [x23,4]
 	cmn	w1, #1
-	bne	.L1510
+	bne	.L1691
 	ldr	w1, [x21]
 	cmn	w1, #1
 	mov	w1, 512
 	csel	w0, w0, w1, ne
-	b	.L1510
-.L1491:
+	b	.L1691
+.L1672:
 	mov	w0, -1
-.L1510:
+.L1691:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldr	x23, [sp,48]
@@ -9685,43 +10565,43 @@ flash_read_page:
 	stp	x19, x20, [sp,16]
 	mov	w23, w1
 	mov	x26, x2
-	ldr	x19, [x0,16]
+	ldr	x19, [x0,536]
 	adrp	x0, .LANCHOR2
 	mov	x25, x3
 	mov	w27, w4
 	and	w20, w1, 2097151
 	ubfx	x24, x23, 24, 2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1523
-	adrp	x0, .LC130
+	tbz	x0, 4, .L1704
+	adrp	x0, .LC142
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC130
+	add	x0, x0, :lo12:.LC142
 	mov	w2, w24
 	mov	w3, w23
 	bl	printk
-.L1523:
+.L1704:
 	bl	nandc_wait_flash_ready
 	mov	w0, w21
 	bl	nandc_cs
-	cbnz	w24, .L1524
+	cbnz	w24, .L1705
 	mov	w0, w21
 	bl	zftl_flash_enter_slc_mode
-	b	.L1525
-.L1524:
+	b	.L1706
+.L1705:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldr	x0, [x0,88]
+	ldr	x0, [x0,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L1526
+	bne	.L1707
 	sxtw	x0, w21
 	add	x0, x0, 8
 	add	x0, x19, x0, lsl 8
 	str	w24, [x0,8]
-	b	.L1525
-.L1526:
+	b	.L1706
+.L1707:
 	mov	w0, w21
 	bl	zftl_flash_exit_slc_mode
-.L1525:
+.L1706:
 	ubfiz	x5, x21, 8, 8
 	and	w23, w23, 255
 	add	x19, x19, x5
@@ -9735,19 +10615,19 @@ flash_read_page:
 	str	w0, [x19,2052]
 	mov	w0, 48
 	str	w0, [x19,2056]
-	cbz	w24, .L1527
+	cbz	w24, .L1708
 	add	x22, x22, :lo12:.LANCHOR0
-	ldr	x0, [x22,88]
+	ldr	x0, [x22,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L1527
+	bne	.L1708
 	add	w20, w20, w20, lsl 1
 	sub	w0, w20, #1
 	add	w0, w0, w24
-	b	.L1538
-.L1527:
+	b	.L1719
+.L1708:
 	mov	w0, w20
-.L1538:
+.L1719:
 	bl	nandc_set_seed
 	bl	nandc_wait_flash_ready
 	mov	w0, 5
@@ -9791,7 +10671,7 @@ micron_read_retrial:
 	stp	x27, x28, [sp,80]
 	uxtb	w24, w0
 	mov	w21, w1
-	ldrb	w0, [x19,188]
+	ldrb	w0, [x19,724]
 	mov	x25, x2
 	mov	x26, x3
 	mov	w28, -1
@@ -9800,18 +10680,18 @@ micron_read_retrial:
 	asr	w0, w0, 2
 	str	w0, [x29,124]
 	bl	nandc_wait_flash_ready
-	ldr	x22, [x19,16]
+	ldr	x22, [x19,536]
 	uxtb	x19, w24
 	lsl	x0, x19, 8
 	str	x0, [x29,112]
-	adrp	x0, .LC131
-	add	x0, x0, :lo12:.LC131
+	adrp	x0, .LC143
+	add	x0, x0, :lo12:.LC143
 	str	x0, [x29,104]
-.L1540:
+.L1721:
 	add	x0, x23, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1184]
+	ldrb	w0, [x0,1216]
 	cmp	w20, w0
-	bcs	.L1544
+	bcs	.L1725
 	ldr	x0, [x29,112]
 	add	w27, w20, 1
 	add	x1, x22, x0
@@ -9836,7 +10716,7 @@ micron_read_retrial:
 	mov	w6, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L1541
+	tbz	x0, 12, .L1722
 	ldr	x0, [x29,104]
 	mov	w1, w20
 	mov	w2, w21
@@ -9845,24 +10725,24 @@ micron_read_retrial:
 	str	x6, [x29,96]
 	bl	printk
 	ldr	x6, [x29,96]
-.L1541:
+.L1722:
 	cmn	w6, #1
-	beq	.L1542
+	beq	.L1723
 	adrp	x0, .LANCHOR4
 	cmn	w28, #1
 	add	x0, x0, :lo12:.LANCHOR4
 	csel	w28, w28, w6, ne
-	ldr	x25, [x0,1160]
-	ldr	x26, [x0,1176]
+	ldr	x25, [x0,1192]
+	ldr	x26, [x0,1208]
 	ldr	w0, [x29,124]
 	cmp	w6, w0
-	bcc	.L1549
-.L1542:
+	bcc	.L1730
+.L1723:
 	mov	w20, w27
-	b	.L1540
-.L1549:
+	b	.L1721
+.L1730:
 	mov	w28, w6
-.L1544:
+.L1725:
 	add	x19, x22, x19, lsl 8
 	mov	w0, 239
 	str	w0, [x19,2056]
@@ -9876,24 +10756,24 @@ micron_read_retrial:
 	str	wzr, [x19,2048]
 	str	wzr, [x19,2048]
 	cmp	w28, w0
-	bcc	.L1546
+	bcc	.L1727
 	cmn	w28, #1
 	mov	w0, 256
 	csel	w28, w28, w0, eq
-.L1546:
+.L1727:
 	cmn	w28, #1
-	beq	.L1550
+	beq	.L1731
 	cmp	w28, 256
-	bne	.L1547
-.L1550:
-	adrp	x0, .LC132
+	bne	.L1728
+.L1731:
+	adrp	x0, .LC144
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC132
+	add	x0, x0, :lo12:.LC144
 	mov	w2, w21
 	mov	w3, w20
 	mov	w4, w28
 	bl	printk
-.L1547:
+.L1728:
 	mov	w0, w28
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -9928,9 +10808,9 @@ toshiba_3d_read_retrial:
 	mov	w3, 56
 	add	x0, x0, 8
 	mov	w21, 10
-	ldr	x25, [x1,16]
+	ldr	x25, [x1,536]
 	lsl	x0, x0, 8
-	ldrb	w1, [x1,189]
+	ldrb	w1, [x1,725]
 	add	x23, x25, x0
 	cmp	w1, 36
 	csel	w2, w3, w2, ne
@@ -9938,19 +10818,19 @@ toshiba_3d_read_retrial:
 	cmp	w1, 36
 	mov	w1, 26
 	csel	w21, w21, w1, ne
-	cbnz	w19, .L1564
+	cbnz	w19, .L1745
 	str	x0, [x29,112]
-	adrp	x0, .LC133
-	add	x0, x0, :lo12:.LC133
+	adrp	x0, .LC145
+	add	x0, x0, :lo12:.LC145
 	mov	w19, -1
 	mov	w28, 1
 	str	x0, [x29,104]
-.L1571:
+.L1752:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1565
+	bne	.L1746
 	mov	w1, w28
 	mov	w2, 0
 	bl	toshiba_tlc_set_rr_para
@@ -9958,11 +10838,11 @@ toshiba_3d_read_retrial:
 	mov	w1, 93
 	add	x0, x25, x0
 	str	w1, [x0,8]
-	b	.L1566
-.L1565:
+	b	.L1747
+.L1746:
 	mov	w1, w28
 	bl	toshiba_3d_set_slc_rr_para
-.L1566:
+.L1747:
 	ldr	w4, [x29,124]
 	mov	w0, w22
 	mov	w1, w24
@@ -9972,7 +10852,7 @@ toshiba_3d_read_retrial:
 	mov	w4, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1567
+	tbz	x0, 4, .L1748
 	ldr	x0, [x29,104]
 	mov	w3, w4
 	mov	w1, w28
@@ -9980,66 +10860,66 @@ toshiba_3d_read_retrial:
 	str	x4, [x29,96]
 	bl	printk
 	ldr	x4, [x29,96]
-.L1567:
+.L1748:
 	cmn	w4, #1
-	beq	.L1568
+	beq	.L1749
 	adrp	x0, .LANCHOR4
 	cmn	w19, #1
 	add	x0, x0, :lo12:.LANCHOR4
 	csel	w19, w19, w4, ne
-	ldr	x26, [x0,1160]
-	ldr	x27, [x0,1176]
+	ldr	x26, [x0,1192]
+	ldr	x27, [x0,1208]
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,188]
+	ldrb	w0, [x0,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w4, w0, lsr 2
-	bcc	.L1587
-.L1568:
+	bcc	.L1768
+.L1749:
 	add	w28, w28, 1
 	cmp	w28, w21
-	bne	.L1571
-	b	.L1570
-.L1587:
+	bne	.L1752
+	b	.L1751
+.L1768:
 	mov	w21, w28
 	mov	w19, w4
-.L1570:
+.L1751:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1572
+	bne	.L1753
 	mov	w1, 0
 	mov	w2, w1
-	b	.L1610
-.L1572:
+	b	.L1791
+.L1753:
 	mov	w1, 0
 	bl	toshiba_3d_set_slc_rr_para
-	b	.L1573
-.L1564:
+	b	.L1754
+.L1745:
 	mov	x28, x0
-	adrp	x0, .LC134
-	add	x0, x0, :lo12:.LC134
+	adrp	x0, .LC146
+	add	x0, x0, :lo12:.LC146
 	mov	w19, -1
 	mov	w21, 1
 	str	x0, [x29,104]
-.L1580:
+.L1761:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1574
+	bne	.L1755
 	mov	w1, w21
 	mov	w2, 1
 	bl	toshiba_tlc_set_rr_para
 	add	x0, x25, x28
 	mov	w1, 93
-	b	.L1609
-.L1574:
+	b	.L1790
+.L1755:
 	mov	w1, w21
 	bl	toshiba_3d_set_tlc_rr_para
 	add	x0, x25, x28
 	mov	w1, 38
-.L1609:
+.L1790:
 	str	w1, [x0,8]
 	mov	x2, x26
 	mov	w0, w22
@@ -10050,7 +10930,7 @@ toshiba_3d_read_retrial:
 	mov	w4, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1576
+	tbz	x0, 4, .L1757
 	ldr	x0, [x29,104]
 	mov	w3, w4
 	mov	w1, w21
@@ -10058,47 +10938,47 @@ toshiba_3d_read_retrial:
 	str	x4, [x29,96]
 	bl	printk
 	ldr	x4, [x29,96]
-.L1576:
+.L1757:
 	cmn	w4, #1
-	beq	.L1577
+	beq	.L1758
 	adrp	x0, .LANCHOR4
 	cmn	w19, #1
 	add	x0, x0, :lo12:.LANCHOR4
 	csel	w19, w19, w4, ne
-	ldr	x26, [x0,1160]
-	ldr	x27, [x0,1176]
+	ldr	x26, [x0,1192]
+	ldr	x27, [x0,1208]
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,188]
+	ldrb	w0, [x0,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w4, w0, lsr 2
-	bcc	.L1588
-.L1577:
+	bcc	.L1769
+.L1758:
 	ldr	w0, [x29,112]
 	add	w21, w21, 1
 	cmp	w21, w0
-	bne	.L1580
-	b	.L1579
-.L1588:
+	bne	.L1761
+	b	.L1760
+.L1769:
 	mov	w19, w4
-.L1579:
+.L1760:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	cmp	w0, 36
 	mov	x0, x23
-	bne	.L1581
+	bne	.L1762
 	mov	w1, 0
 	mov	w2, 1
-.L1610:
+.L1791:
 	bl	toshiba_tlc_set_rr_para
-	b	.L1573
-.L1581:
+	b	.L1754
+.L1762:
 	mov	w1, 0
 	bl	toshiba_3d_set_tlc_rr_para
-.L1573:
+.L1754:
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	cmp	w0, 36
-	bne	.L1582
+	bne	.L1763
 	ubfiz	x22, x22, 8, 8
 	mov	w0, 85
 	add	x25, x25, x22
@@ -10107,29 +10987,29 @@ toshiba_3d_read_retrial:
 	str	wzr, [x25,2052]
 	str	wzr, [x25,2048]
 	str	w0, [x25,2056]
-.L1582:
+.L1763:
 	add	x20, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x20,188]
+	ldrb	w0, [x20,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w19, w0, lsr 2
-	bcc	.L1583
+	bcc	.L1764
 	cmn	w19, #1
 	mov	w0, 256
 	csel	w19, w19, w0, eq
-.L1583:
+.L1764:
 	cmn	w19, #1
-	beq	.L1589
+	beq	.L1770
 	cmp	w19, 256
-	bne	.L1584
-.L1589:
-	adrp	x0, .LC135
+	bne	.L1765
+.L1770:
+	adrp	x0, .LC147
 	mov	w1, w21
-	add	x0, x0, :lo12:.LC135
+	add	x0, x0, :lo12:.LC147
 	mov	w2, w24
 	mov	w3, w21
 	mov	w4, w19
 	bl	printk
-.L1584:
+.L1765:
 	bl	nandc_wait_flash_ready
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
@@ -10163,26 +11043,26 @@ toshiba_read_retrial:
 	sxtw	x0, w23
 	add	x21, x0, 8
 	str	x0, [x29,112]
-	ldrb	w0, [x1,189]
-	ldr	x22, [x1,16]
+	ldrb	w0, [x1,725]
+	ldr	x22, [x1,536]
 	sub	w0, w0, #67
 	add	x21, x22, x21, lsl 8
 	uxtb	w0, w0
 	cmp	w0, 1
-	bls	.L1612
-	ldrb	w0, [x1,136]
-	cbz	w0, .L1613
+	bls	.L1793
+	ldrb	w0, [x1,672]
+	cbz	w0, .L1794
 	mov	w0, 1
 	mov	w25, 1
 	bl	nandc_set_if_mode
-.L1613:
+.L1794:
 	ubfiz	x0, x23, 8, 8
 	mov	w1, 92
 	add	x0, x22, x0
 	str	w1, [x0,2056]
 	mov	w1, 197
 	str	w1, [x0,2056]
-.L1612:
+.L1793:
 	ldr	x0, [x29,112]
 	mov	w20, 1
 	mov	w24, -1
@@ -10191,41 +11071,41 @@ toshiba_read_retrial:
 	str	x0, [x29,104]
 	ubfiz	x0, x23, 8, 8
 	str	x0, [x29,96]
-.L1614:
+.L1795:
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1184]
+	ldrb	w0, [x0,1216]
 	add	w0, w0, 1
 	cmp	w20, w0
-	bcs	.L1645
+	bcs	.L1826
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, w20
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	sub	w0, w0, #67
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x21
-	bhi	.L1615
+	bhi	.L1796
 	bl	sandisk_set_rr_para
-	b	.L1616
-.L1615:
+	b	.L1797
+.L1796:
 	bl	toshiba_set_rr_para
-.L1616:
+.L1797:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	cmp	w0, 34
-	bne	.L1617
+	bne	.L1798
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1184]
+	ldrb	w0, [x0,1216]
 	sub	w0, w0, #3
 	cmp	w20, w0
-	bne	.L1617
+	bne	.L1798
 	ldr	x0, [x29,104]
 	mov	w1, 179
 	add	x0, x22, x0
 	str	w1, [x0,8]
-.L1617:
+.L1798:
 	ldr	x0, [x29,96]
 	mov	w1, 38
 	ldr	w4, [x29,120]
@@ -10240,69 +11120,69 @@ toshiba_read_retrial:
 	bl	flash_read_page
 	cmn	w0, #1
 	mov	w28, w0
-	beq	.L1620
+	beq	.L1801
 	cmn	w24, #1
 	csel	w24, w24, w0, ne
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x26, [x0,1160]
-	ldr	x27, [x0,1176]
+	ldr	x26, [x0,1192]
+	ldr	x27, [x0,1208]
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,188]
+	ldrb	w0, [x0,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L1622
-.L1620:
+	bcc	.L1803
+.L1801:
 	add	w20, w20, 1
-	b	.L1614
-.L1645:
+	b	.L1795
+.L1826:
 	mov	w28, w24
-.L1622:
+.L1803:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 0
-	ldrb	w0, [x0,189]
+	ldrb	w0, [x0,725]
 	sub	w0, w0, #67
 	uxtb	w0, w0
 	cmp	w0, 1
 	mov	x0, x21
-	bhi	.L1624
+	bhi	.L1805
 	bl	sandisk_set_rr_para
-	b	.L1625
-.L1624:
+	b	.L1806
+.L1805:
 	bl	toshiba_set_rr_para
-.L1625:
+.L1806:
 	ldr	x0, [x29,112]
 	add	x19, x19, :lo12:.LANCHOR0
 	add	x0, x0, 8
 	add	x22, x22, x0, lsl 8
 	mov	w0, 255
 	str	w0, [x22,8]
-	ldrb	w0, [x19,188]
+	ldrb	w0, [x19,724]
 	add	w0, w0, w0, lsl 1
 	cmp	w28, w0, lsr 2
-	bcc	.L1626
+	bcc	.L1807
 	cmn	w28, #1
 	mov	w0, 256
 	csel	w28, w28, w0, eq
-.L1626:
+.L1807:
 	cmn	w28, #1
-	beq	.L1632
+	beq	.L1813
 	cmp	w28, 256
-	bne	.L1627
-.L1632:
-	adrp	x0, .LC135
+	bne	.L1808
+.L1813:
+	adrp	x0, .LC147
 	ldr	w2, [x29,124]
-	add	x0, x0, :lo12:.LC135
+	add	x0, x0, :lo12:.LC147
 	mov	w1, w20
 	mov	w3, w20
 	mov	w4, w28
 	bl	printk
-.L1627:
+.L1808:
 	bl	nandc_wait_flash_ready
-	cbz	w25, .L1629
+	cbz	w25, .L1810
 	mov	w0, 4
 	bl	nandc_set_if_mode
-.L1629:
+.L1810:
 	mov	w0, w28
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10328,7 +11208,7 @@ hynix_read_retrial:
 	stp	x23, x24, [sp,48]
 	mov	x25, x2
 	mov	w23, w1
-	ldr	x5, [x0,192]
+	ldr	x5, [x0,728]
 	mov	x26, x3
 	str	w4, [x29,124]
 	mov	x22, x21
@@ -10340,9 +11220,9 @@ hynix_read_retrial:
 	bl	nandc_wait_flash_ready
 	mov	w6, 0
 	adrp	x7, .LANCHOR4
-.L1647:
+.L1828:
 	cmp	w6, w24
-	bcs	.L1651
+	bcs	.L1832
 	add	w20, w20, 1
 	mov	w0, w22
 	str	x7, [x29,104]
@@ -10361,47 +11241,47 @@ hynix_read_retrial:
 	cmn	w0, #1
 	ldr	x6, [x29,112]
 	ldr	x7, [x29,104]
-	beq	.L1649
+	beq	.L1830
 	add	x1, x7, :lo12:.LANCHOR4
 	cmn	w19, #1
 	csel	w19, w19, w0, ne
-	ldr	x25, [x1,1160]
-	ldr	x26, [x1,1176]
+	ldr	x25, [x1,1192]
+	ldr	x26, [x1,1208]
 	add	x1, x28, :lo12:.LANCHOR0
-	ldrb	w1, [x1,188]
+	ldrb	w1, [x1,724]
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	bcc	.L1656
-.L1649:
+	bcc	.L1837
+.L1830:
 	add	w6, w6, 1
-	b	.L1647
-.L1656:
+	b	.L1828
+.L1837:
 	mov	w19, w0
-.L1651:
+.L1832:
 	add	x28, x28, :lo12:.LANCHOR0
 	add	x21, x27, x21
-	ldrb	w0, [x28,188]
+	ldrb	w0, [x28,724]
 	strb	w20, [x21,8]
 	add	w0, w0, w0, lsl 1
 	cmp	w19, w0, lsr 2
-	bcc	.L1653
+	bcc	.L1834
 	cmn	w19, #1
 	mov	w0, 256
 	csel	w19, w19, w0, eq
-.L1653:
+.L1834:
 	cmn	w19, #1
-	beq	.L1657
+	beq	.L1838
 	cmp	w19, 256
-	bne	.L1654
-.L1657:
-	adrp	x0, .LC136
+	bne	.L1835
+.L1838:
+	adrp	x0, .LC148
 	mov	w1, w6
-	add	x0, x0, :lo12:.LC136
+	add	x0, x0, :lo12:.LC148
 	mov	w2, w23
 	mov	w3, w6
 	mov	w4, w19
 	bl	printk
-.L1654:
+.L1835:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10412,9 +11292,9 @@ hynix_read_retrial:
 	ret
 	.size	hynix_read_retrial, .-hynix_read_retrial
 	.align	2
-	.global	flash_ddr_tunning_read
-	.type	flash_ddr_tunning_read, %function
-flash_ddr_tunning_read:
+	.global	flash_ddr_tuning_read
+	.type	flash_ddr_tuning_read, %function
+flash_ddr_tuning_read:
 	stp	x29, x30, [sp, -128]!
 	uxtb	w0, w0
 	add	x29, sp, 0
@@ -10431,16 +11311,16 @@ flash_ddr_tunning_read:
 	bl	nandc_get_ddr_para
 	mov	w26, 0
 	str	w0, [x29,120]
-	adrp	x0, .LC137
+	adrp	x0, .LC149
 	mov	w22, w26
-	add	x0, x0, :lo12:.LC137
+	add	x0, x0, :lo12:.LC149
 	mov	w28, w26
 	mov	w27, w26
 	mov	w25, 1024
 	mov	w21, 6
 	mov	w19, -1
 	str	x0, [x29,104]
-.L1672:
+.L1853:
 	mov	w0, w21
 	bl	nandc_set_ddr_para
 	ldr	w4, [x29,116]
@@ -10452,7 +11332,7 @@ flash_ddr_tunning_read:
 	mov	w4, w0
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1667
+	tbz	x0, 4, .L1848
 	ldr	x0, [x29,104]
 	mov	w3, w4
 	mov	w1, w21
@@ -10460,74 +11340,74 @@ flash_ddr_tunning_read:
 	str	x4, [x29,96]
 	bl	printk
 	ldr	x4, [x29,96]
-.L1667:
+.L1848:
 	add	w0, w25, 1
 	cmp	w4, w0
-	bhi	.L1668
+	bhi	.L1849
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x23, [x0,1160]
-	ldr	x24, [x0,1176]
+	ldr	x23, [x0,1192]
+	ldr	x24, [x0,1208]
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	ldrb	w0, [x0,188]
+	ldrb	w0, [x0,724]
 	cmp	w4, w0, lsr 2
-	bcs	.L1677
+	bcs	.L1858
 	add	w27, w27, 1
 	cmp	w27, 7
-	bls	.L1677
+	bls	.L1858
 	sub	w26, w21, w27
 	mov	w25, w4
 	mov	w19, 0
-	b	.L1670
-.L1668:
+	b	.L1851
+.L1849:
 	cmp	w28, w27
-	bcs	.L1678
+	bcs	.L1859
 	cmp	w27, 7
 	sub	w22, w26, w27
-	bhi	.L1671
+	bhi	.L1852
 	mov	w28, w27
-	b	.L1678
-.L1677:
+	b	.L1859
+.L1858:
 	mov	w26, w21
 	mov	w25, w4
 	mov	w19, 0
-	b	.L1669
-.L1678:
+	b	.L1850
+.L1859:
 	mov	w27, 0
-.L1669:
+.L1850:
 	add	w21, w21, 2
 	cmp	w21, 50
-	bne	.L1672
-.L1670:
+	bne	.L1853
+.L1851:
 	cmp	w28, w27
 	csel	w26, w26, w22, ls
-.L1671:
-	cbz	w26, .L1673
-	adrp	x0, .LANCHOR0+188
+.L1852:
+	cbz	w26, .L1854
+	adrp	x0, .LANCHOR0+724
 	mov	w1, 3
-	ldrb	w0, [x0,#:lo12:.LANCHOR0+188]
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+724]
 	udiv	w0, w0, w1
 	cmp	w25, w0
-	bcs	.L1673
-	adrp	x0, .LC138
+	bcs	.L1854
+	adrp	x0, .LC150
 	mov	w1, w26
-	add	x0, x0, :lo12:.LC138
+	add	x0, x0, :lo12:.LC150
 	bl	printk
 	mov	w0, w26
-	b	.L1686
-.L1673:
+	b	.L1867
+.L1854:
 	ldrb	w0, [x29,120]
-.L1686:
+.L1867:
 	bl	nandc_set_ddr_para
-	cbz	w19, .L1675
-	adrp	x0, .LC139
+	cbz	w19, .L1856
+	adrp	x0, .LC151
 	ldr	w1, [x29,124]
-	add	x0, x0, :lo12:.LC139
+	add	x0, x0, :lo12:.LC151
 	mov	w2, w20
 	mov	w25, w19
 	bl	printk
-.L1675:
+.L1856:
 	mov	w0, w25
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10536,7 +11416,7 @@ flash_ddr_tunning_read:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 128
 	ret
-	.size	flash_ddr_tunning_read, .-flash_ddr_tunning_read
+	.size	flash_ddr_tuning_read, .-flash_ddr_tuning_read
 	.align	2
 	.global	flash_read_page_en
 	.type	flash_read_page_en, %function
@@ -10553,53 +11433,58 @@ flash_read_page_en:
 	stp	x25, x26, [sp,64]
 	mov	w19, w1
 	mov	x25, x2
-	ldrb	w0, [x0,98]
+	ldrb	w0, [x0,633]
 	mov	x24, x3
 	mov	w23, w4
 	ubfx	x26, x19, 24, 2
 	cmp	w0, w21
-	bhi	.L1688
+	bhi	.L1869
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
+	mov	w2, 377
 	add	x1, x1, 136
-	mov	w2, 378
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L1688:
+	bl	dump_stack
+.L1869:
 	add	x0, x20, :lo12:.LANCHOR0
-	add	x21, x0, x21, sxtw
+	add	x1, x0, x21, sxtw
+	ldrb	w22, [x1,736]
+	ldrb	w0, [x0,633]
+	cmp	w0, w21
+	bcs	.L1870
 	adrp	x0, .LANCHOR2
-	ldrb	w22, [x21,200]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L1689
-	adrp	x0, .LC140
+	tbz	x0, 6, .L1870
+	adrp	x0, .LC152
 	mov	w1, w22
-	add	x0, x0, :lo12:.LC140
-	mov	w2, w19
+	add	x0, x0, :lo12:.LC152
+	mov	w2, w21
+	mov	w3, w19
 	bl	printk
-.L1689:
-	cbnz	w26, .L1690
+.L1870:
+	cbnz	w26, .L1871
+	ldrb	w1, [x20,#:lo12:.LANCHOR0]
 	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x0,97]
-	cbz	w1, .L1691
-	ldrb	w0, [x0,208]
-	cbz	w0, .L1690
-.L1691:
+	cbz	w1, .L1872
+	ldrb	w0, [x0,1]
+	cbz	w0, .L1871
+.L1872:
 	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x1,210]
+	ldrh	w2, [x1,2]
 	udiv	w0, w19, w2
 	mul	w0, w0, w2
-	ldrb	w2, [x1,208]
+	ldrb	w2, [x1,1]
 	sub	w19, w19, w0
-	cbz	w2, .L1692
+	cbz	w2, .L1873
 	add	w19, w0, w19, lsl 1
-	b	.L1690
-.L1692:
-	add	x1, x1, 212
+	b	.L1871
+.L1873:
+	add	x1, x1, 4
 	ldrh	w19, [x1,w19,uxtw 1]
 	add	w19, w19, w0
-.L1690:
+.L1871:
 	mov	w0, w22
 	mov	w1, w19
 	mov	x2, x25
@@ -10608,28 +11493,28 @@ flash_read_page_en:
 	bl	flash_read_page
 	cmn	w0, #1
 	mov	w21, w0
-	bne	.L1699
+	bne	.L1880
 	add	x26, x20, :lo12:.LANCHOR0
-	ldrb	w27, [x26,184]
-	cbnz	w27, .L1694
-.L1697:
-	adrp	x0, .LANCHOR4+1192
-	ldr	x5, [x0,#:lo12:.LANCHOR4+1192]
-	cbnz	x5, .L1695
-	b	.L1696
-.L1694:
+	ldrb	w27, [x26,720]
+	cbnz	w27, .L1875
+.L1878:
+	adrp	x0, .LANCHOR4+1224
+	ldr	x5, [x0,#:lo12:.LANCHOR4+1224]
+	cbnz	x5, .L1876
+	b	.L1877
+.L1875:
 	mov	w0, w22
 	mov	w1, w19
 	mov	x2, x25
 	mov	x3, x24
 	mov	w4, w23
-	strb	wzr, [x26,184]
+	strb	wzr, [x26,720]
 	bl	flash_read_page
-	strb	w27, [x26,184]
+	strb	w27, [x26,720]
 	cmn	w0, #1
-	beq	.L1697
-	b	.L1715
-.L1695:
+	beq	.L1878
+	b	.L1896
+.L1876:
 	mov	w0, w22
 	mov	w1, w19
 	mov	x2, x25
@@ -10637,27 +11522,27 @@ flash_read_page_en:
 	mov	w4, w23
 	blr	x5
 	cmn	w0, #1
-	bne	.L1715
-.L1696:
+	bne	.L1896
+.L1877:
 	add	x20, x20, :lo12:.LANCHOR0
-	adrp	x0, .LC141
-	add	x0, x0, :lo12:.LC141
+	adrp	x0, .LC153
+	add	x0, x0, :lo12:.LC153
 	mov	w1, 0
 	mov	w2, w19
 	mov	w3, -1
-	ldrb	w4, [x20,184]
+	ldrb	w4, [x20,720]
 	bl	printk
-	ldrb	w0, [x20,136]
-	cbz	w0, .L1699
+	ldrb	w0, [x20,672]
+	cbz	w0, .L1880
 	mov	w0, w22
 	mov	w1, w19
 	mov	x2, x25
 	mov	x3, x24
 	mov	w4, w23
-	bl	flash_ddr_tunning_read
-.L1715:
+	bl	flash_ddr_tuning_read
+.L1896:
 	mov	w21, w0
-.L1699:
+.L1880:
 	mov	w0, w21
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -10675,11 +11560,11 @@ flash_get_last_written_page:
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
 	uxtb	w23, w0
-	adrp	x0, .LANCHOR4+1060
+	adrp	x0, .LANCHOR4+1092
 	stp	x19, x20, [sp,16]
 	adrp	x20, .LANCHOR2
 	mov	x24, x2
-	ldrh	w19, [x0,#:lo12:.LANCHOR4+1060]
+	ldrh	w19, [x0,#:lo12:.LANCHOR4+1092]
 	add	x0, x20, :lo12:.LANCHOR2
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
@@ -10696,12 +11581,12 @@ flash_get_last_written_page:
 	add	w1, w26, w19
 	bl	flash_read_page_en
 	cmp	w0, 512
-	bne	.L1717
+	bne	.L1898
 	mov	w28, 0
 	mov	w5, 2
-.L1718:
+.L1899:
 	cmp	w28, w19
-	bgt	.L1717
+	bgt	.L1898
 	add	w0, w28, w19
 	mov	x2, x24
 	mov	x3, x21
@@ -10713,24 +11598,24 @@ flash_get_last_written_page:
 	bl	flash_read_page_en
 	cmp	w0, 512
 	ldr	x5, [x29,104]
-	bne	.L1719
+	bne	.L1900
 	sub	w19, w20, #1
 	sxth	w19, w19
-	b	.L1718
-.L1719:
+	b	.L1899
+.L1900:
 	add	w20, w20, 1
 	sxth	w28, w20
-	b	.L1718
-.L1717:
+	b	.L1899
+.L1898:
 	ldr	w0, [x27,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L1722
-	adrp	x0, .LC142
+	tbz	x0, 12, .L1903
+	adrp	x0, .LC154
 	ldr	w3, [x21]
-	add	x0, x0, :lo12:.LC142
+	add	x0, x0, :lo12:.LC154
 	mov	w1, w22
 	mov	w2, w19
 	bl	printk
-.L1722:
+.L1903:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10745,12 +11630,12 @@ flash_get_last_written_page:
 	.type	flash_get_last_written_page_ext, %function
 flash_get_last_written_page_ext:
 	uxth	w6, w0
-	adrp	x0, .LANCHOR0+3314
+	adrp	x0, .LANCHOR0+3340
 	stp	x29, x30, [sp, -16]!
 	mov	w5, 21
 	mov	x8, x1
 	add	x29, sp, 0
-	ldrh	w0, [x0,#:lo12:.LANCHOR0+3314]
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+3340]
 	mov	x7, x2
 	mov	w4, w3
 	mov	x2, x8
@@ -10777,145 +11662,145 @@ flash_info_blk_init:
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	adrp	x20, .LANCHOR0
-	tbz	x0, 12, .L1728
+	tbz	x0, 12, .L1909
 	add	x4, x20, :lo12:.LANCHOR0
 	adrp	x2, .LANCHOR3
-	adrp	x0, .LC143
+	adrp	x0, .LC155
 	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC143
+	add	x0, x0, :lo12:.LC155
 	mov	w1, 49
-	ldr	x4, [x4,192]
+	ldr	x4, [x4,728]
 	add	x2, x2, 160
 	mov	w3, 2048
 	bl	printk
-.L1728:
+.L1909:
 	mov	w22, 4
 	adrp	x24, .LANCHOR4
-.L1731:
+.L1912:
 	add	x19, x20, :lo12:.LANCHOR0
 	add	x21, x24, :lo12:.LANCHOR4
 	mov	w0, 0
 	mov	w4, 4
 	adrp	x23, .LANCHOR4
-	ldrh	w1, [x19,210]
-	ldr	x2, [x19,192]
-	ldr	x3, [x21,1200]
+	ldrh	w1, [x19,2]
+	ldr	x2, [x19,728]
+	ldr	x3, [x21,1232]
 	mul	w1, w22, w1
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L1729
-	ldr	x2, [x19,192]
+	beq	.L1910
+	ldr	x2, [x19,728]
 	mov	w0, 21321
 	movk	w0, 0x5359, lsl 16
 	ldr	w1, [x2]
 	cmp	w1, w0
-	beq	.L1730
-.L1729:
+	beq	.L1911
+.L1910:
 	add	w22, w22, 1
 	cmp	w22, 16
-	bne	.L1731
-.L1755:
+	bne	.L1912
+.L1936:
 	mov	w0, -1
-	b	.L1754
-.L1730:
+	b	.L1935
+.L1911:
 	ldrb	w1, [x2,36]
 	mov	w4, 4
-	ldrh	w3, [x19,210]
-	strb	w1, [x21,1208]
+	ldrh	w3, [x19,2]
+	strb	w1, [x21,1240]
 	ldrb	w0, [x2,37]
 	mul	w1, w1, w3
-	ldr	x3, [x21,1200]
-	strb	w0, [x21,1209]
+	ldr	x3, [x21,1232]
+	strb	w0, [x21,1241]
 	mov	w0, 0
 	mov	w21, 0
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L1733
-	ldr	x0, [x19,192]
+	beq	.L1914
+	ldr	x0, [x19,728]
 	mov	w1, 21321
 	movk	w1, 0x5359, lsl 16
 	mov	w21, 0
 	ldr	w2, [x0]
 	cmp	w2, w1
-	bne	.L1733
+	bne	.L1914
 	ldr	w21, [x0,4]
-.L1733:
+.L1914:
 	add	x19, x23, :lo12:.LANCHOR4
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	mov	w4, 4
-	ldrb	w2, [x19,1209]
-	ldrh	w1, [x22,210]
-	ldr	x3, [x19,1200]
+	ldrb	w2, [x19,1241]
+	ldrh	w1, [x22,2]
+	ldr	x3, [x19,1232]
 	mul	w1, w2, w1
-	ldr	x2, [x22,192]
+	ldr	x2, [x22,728]
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L1734
-	ldr	x0, [x22,192]
+	beq	.L1915
+	ldr	x0, [x22,728]
 	mov	w1, 21321
 	movk	w1, 0x5359, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	bne	.L1734
+	bne	.L1915
 	ldr	w1, [x0,4]
 	cmp	w21, w1
-	bcs	.L1734
+	bcs	.L1915
 	ldrb	w1, [x0,37]
 	ldrb	w0, [x0,36]
-	strb	w1, [x19,1208]
-	strb	w0, [x19,1209]
-.L1734:
+	strb	w1, [x19,1240]
+	strb	w0, [x19,1241]
+.L1915:
 	add	x21, x23, :lo12:.LANCHOR4
 	add	x22, x20, :lo12:.LANCHOR0
 	mov	w0, 0
 	mov	w4, 4
-	ldrb	w1, [x21,1208]
-	ldr	x3, [x21,1200]
-	ldr	x2, [x22,192]
+	ldrb	w1, [x21,1240]
+	ldr	x3, [x21,1232]
+	ldr	x2, [x22,728]
 	bl	flash_get_last_written_page
 	sxth	w19, w0
 	add	w0, w0, 1
-	strh	w0, [x21,1210]
-	ldrb	w0, [x21,1208]
-	ldrh	w21, [x22,210]
+	strh	w0, [x21,1242]
+	ldrb	w0, [x21,1240]
+	ldrh	w21, [x22,2]
 	mul	w21, w0, w21
-.L1735:
-	tbnz	w19, #31, .L1756
+.L1916:
+	tbnz	w19, #31, .L1937
 	add	x22, x20, :lo12:.LANCHOR0
 	add	x3, x23, :lo12:.LANCHOR4
 	mov	w0, 0
 	add	w1, w19, w21
 	mov	w4, 4
-	ldr	x2, [x22,192]
-	ldr	x3, [x3,1200]
+	ldr	x2, [x22,728]
+	ldr	x3, [x3,1232]
 	bl	flash_read_page_en
 	cmn	w0, #1
-	beq	.L1736
-	ldr	x0, [x22,192]
+	beq	.L1917
+	ldr	x0, [x22,728]
 	ldr	w1, [x0]
 	mov	w0, 21321
 	movk	w0, 0x5359, lsl 16
 	cmp	w1, w0
-	bne	.L1736
-.L1738:
+	bne	.L1917
+.L1919:
 	mov	w0, 0
-	b	.L1754
-.L1736:
+	b	.L1935
+.L1917:
 	sub	w19, w19, #1
 	sxth	w19, w19
-	b	.L1735
-.L1756:
+	b	.L1916
+.L1937:
 	cmn	w19, #1
-	bne	.L1738
+	bne	.L1919
 	add	x20, x20, :lo12:.LANCHOR0
-	adrp	x0, .LC144
-	add	x0, x0, :lo12:.LC144
-	ldr	x1, [x20,192]
+	adrp	x0, .LC156
+	add	x0, x0, :lo12:.LC156
+	ldr	x1, [x20,728]
 	ldr	w1, [x1]
 	bl	printk
-	b	.L1755
-.L1754:
+	b	.L1936
+.L1935:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -10937,39 +11822,39 @@ flash_ddr_para_scan:
 	stp	x23, x24, [sp,48]
 	uxtb	w24, w0
 	mov	w23, w1
-	ldrb	w0, [x21,764]
+	ldrb	w0, [x21,780]
 	add	x20, x20, :lo12:.LANCHOR4
-	strb	w22, [x21,136]
+	strb	w22, [x21,672]
 	bl	flash_set_interface_mode
-	ldrb	w0, [x21,764]
+	ldrb	w0, [x21,780]
 	bl	nandc_set_if_mode
-	ldr	x2, [x20,1216]
+	ldr	x2, [x20,1248]
 	mov	w1, w23
-	ldr	x3, [x20,1224]
+	ldr	x3, [x20,1256]
 	mov	w4, 4
 	mov	w0, w24
-	bl	flash_ddr_tunning_read
-	ldr	x2, [x20,1216]
+	bl	flash_ddr_tuning_read
+	ldr	x2, [x20,1248]
 	mov	w0, w24
-	ldr	x3, [x20,1224]
+	ldr	x3, [x20,1256]
 	mov	w1, w23
 	mov	w4, 4
 	bl	flash_read_page
 	cmn	w0, #1
-	bne	.L1758
-	ldrb	w0, [x21,764]
-	tbz	x0, 0, .L1758
+	bne	.L1939
+	ldrb	w0, [x21,780]
+	tbz	x0, 0, .L1939
 	mov	w0, 1
 	bl	flash_set_interface_mode
 	mov	w0, w22
 	bl	nandc_set_if_mode
-	strb	wzr, [x21,136]
-	b	.L1759
-.L1758:
+	strb	wzr, [x21,672]
+	b	.L1940
+.L1939:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, 1
-	strb	w0, [x19,136]
-.L1759:
+	strb	w0, [x19,672]
+.L1940:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -10978,8 +11863,8 @@ flash_ddr_para_scan:
 	ret
 	.size	flash_ddr_para_scan, .-flash_ddr_para_scan
 	.align	2
-	.type	id_block_read_data.constprop.30, %function
-id_block_read_data.constprop.30:
+	.type	id_block_read_data.constprop.27, %function
+id_block_read_data.constprop.27:
 	stp	x29, x30, [sp, -240]!
 	add	x29, sp, 0
 	stp	x27, x28, [sp,80]
@@ -10990,7 +11875,7 @@ id_block_read_data.constprop.30:
 	str	x1, [x29,120]
 	stp	x25, x26, [sp,64]
 	mov	w26, w0
-	ldr	x0, [x19,88]
+	ldr	x0, [x19,624]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	mov	x21, x2
@@ -11001,10 +11886,10 @@ id_block_read_data.constprop.30:
 	mov	w25, w22
 	str	w2, [x29,164]
 	mul	w0, w2, w0
-	ldrb	w2, [x19,184]
+	ldrb	w2, [x19,720]
 	str	w2, [x29,136]
 	uxth	w0, w0
-	strb	wzr, [x19,184]
+	strb	wzr, [x19,720]
 	udiv	w2, w26, w0
 	msub	w0, w2, w0, w26
 	str	w0, [x29,172]
@@ -11013,12 +11898,12 @@ id_block_read_data.constprop.30:
 	ldr	w0, [x29,172]
 	and	w0, w0, 3
 	str	w0, [x29,168]
-	adrp	x0, .LC145
-	add	x0, x0, :lo12:.LC145
+	adrp	x0, .LC157
+	add	x0, x0, :lo12:.LC157
 	str	x0, [x29,112]
-.L1764:
+.L1945:
 	cmp	w22, w27
-	bcs	.L1801
+	bcs	.L1982
 	ldr	w0, [x29,168]
 	adrp	x1, .LANCHOR4
 	add	x1, x1, :lo12:.LANCHOR4
@@ -11026,36 +11911,36 @@ id_block_read_data.constprop.30:
 	uxth	w0, w0
 	str	w0, [x29,144]
 	ldr	w0, [x29,172]
-	ldrb	w1, [x1,1232]
+	ldrb	w1, [x1,1264]
 	add	w20, w22, w0
-	add	x0, x19, 212
+	add	x0, x19, 4
 	udiv	w20, w20, w23
 	and	w20, w20, 65535
 	ldrh	w0, [x0,w20,sxtw 1]
-	cbnz	w1, .L1765
+	cbnz	w1, .L1946
 	mov	w20, w0
-	b	.L1766
-.L1765:
-	ldrb	w1, [x19,208]
+	b	.L1947
+.L1946:
+	ldrb	w1, [x19,1]
 	lsl	w0, w20, 1
 	cmp	w1, wzr
 	csel	w20, w0, w20, ne
-.L1766:
+.L1947:
 	ldr	w1, [x29,160]
 	ldr	w0, [x29,164]
-	ldrb	w28, [x19,96]
+	ldrb	w28, [x19,632]
 	madd	w0, w20, w0, w1
 	ldr	w1, [x29,168]
 	str	w0, [x29,140]
 	add	w24, w0, w1
-	ldr	x0, [x19,88]
+	ldr	x0, [x19,624]
 	ldrb	w0, [x0,9]
 	udiv	w24, w24, w0
-	ldrb	w0, [x19,188]
+	ldrb	w0, [x19,724]
 	str	w0, [x29,132]
 	mov	w0, w28
 	bl	nandc_bch_sel
-.L1767:
+.L1948:
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
@@ -11064,30 +11949,30 @@ id_block_read_data.constprop.30:
 	bl	flash_read_page
 	cmn	w0, #1
 	mov	w20, w0
-	bne	.L1774
-	ldrb	w6, [x19,184]
-	cbnz	w6, .L1769
-.L1772:
+	bne	.L1955
+	ldrb	w6, [x19,720]
+	cbnz	w6, .L1950
+.L1953:
 	adrp	x0, .LANCHOR4
 	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x6, [x0,1192]
-	cbnz	x6, .L1770
-	b	.L1771
-.L1769:
+	ldr	x6, [x0,1224]
+	cbnz	x6, .L1951
+	b	.L1952
+.L1950:
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
 	add	x3, x29, 176
 	mov	w4, w23
 	str	x6, [x29,104]
-	strb	wzr, [x19,184]
+	strb	wzr, [x19,720]
 	bl	flash_read_page
 	cmn	w0, #1
 	ldr	x6, [x29,104]
-	strb	w6, [x19,184]
-	beq	.L1772
-	b	.L1800
-.L1770:
+	strb	w6, [x19,720]
+	beq	.L1953
+	b	.L1981
+.L1951:
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
@@ -11095,28 +11980,28 @@ id_block_read_data.constprop.30:
 	mov	w4, w23
 	blr	x6
 	cmn	w0, #1
-	bne	.L1800
-.L1771:
-	ldrb	w0, [x19,136]
-	cbz	w0, .L1774
+	bne	.L1981
+.L1952:
+	ldrb	w0, [x19,672]
+	cbz	w0, .L1955
 	mov	w0, 0
 	mov	w1, w24
 	mov	x2, x21
 	add	x3, x29, 176
 	mov	w4, w23
-	bl	flash_ddr_tunning_read
-.L1800:
+	bl	flash_ddr_tuning_read
+.L1981:
 	mov	w20, w0
-.L1774:
+.L1955:
 	cmn	w20, #1
-	bne	.L1775
+	bne	.L1956
 	cmp	w28, 16
-	beq	.L1775
+	beq	.L1956
 	mov	w0, 16
 	mov	w28, 16
 	bl	nandc_bch_sel
-	b	.L1767
-.L1775:
+	b	.L1948
+.L1956:
 	ldr	w0, [x29,132]
 	bl	nandc_bch_sel
 	cmn	w20, #1
@@ -11127,18 +12012,18 @@ id_block_read_data.constprop.30:
 	cmp	w0, w26
 	cset	w0, eq
 	tst	w1, w0
-	beq	.L1777
-	cbnz	w25, .L1777
+	beq	.L1958
+	cbnz	w25, .L1958
 	ldr	w1, [x21]
 	mov	w0, 18766
 	movk	w0, 0x464e, lsl 16
 	cmp	w1, w0
-	bne	.L1777
+	bne	.L1958
 	ldr	w0, [x29,144]
 	ldrb	w23, [x21,17]
 	add	w27, w27, w0
-	b	.L1778
-.L1777:
+	b	.L1959
+.L1958:
 	ldr	x0, [x29,144]
 	mov	w2, w22
 	ldr	w1, [x29,140]
@@ -11149,16 +12034,16 @@ id_block_read_data.constprop.30:
 	ldr	x0, [x29,112]
 	bl	printk
 	str	wzr, [x29,168]
-.L1778:
+.L1959:
 	ldr	w0, [x29,144]
 	add	w22, w0, w22
 	uxth	w22, w22
-	b	.L1764
-.L1801:
+	b	.L1945
+.L1982:
 	ldr	x0, [x29,120]
 	ldrb	w1, [x29,136]
 	add	x0, x0, :lo12:.LANCHOR0
-	strb	w1, [x0,184]
+	strb	w1, [x0,720]
 	mov	w0, w25
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -11167,7 +12052,119 @@ id_block_read_data.constprop.30:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 240
 	ret
-	.size	id_block_read_data.constprop.30, .-id_block_read_data.constprop.30
+	.size	id_block_read_data.constprop.27, .-id_block_read_data.constprop.27
+	.align	2
+	.global	flash_complete_plane_page_read
+	.type	flash_complete_plane_page_read, %function
+flash_complete_plane_page_read:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	ubfx	x22, x0, 21, 3
+	stp	x19, x20, [sp,16]
+	and	w19, w0, 2097151
+	ubfx	x20, x0, 24, 2
+	add	x0, x21, :lo12:.LANCHOR0
+	str	x25, [sp,64]
+	stp	x23, x24, [sp,48]
+	mov	x24, x1
+	mov	x23, x2
+	ldrb	w0, [x0,633]
+	cmp	w0, w22
+	bhi	.L1984
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 782
+	add	x1, x1, 184
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L1984:
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x22, x0, x22, sxtw
+	ldrb	w22, [x22,736]
+	ldr	x25, [x0,536]
+	mov	w0, w22
+	bl	nandc_cs
+	cbnz	w20, .L1985
+	mov	w0, w19
+	bl	slc_phy_page_address_calc
+	mov	w19, w0
+.L1985:
+	add	x3, x21, :lo12:.LANCHOR0
+	uxtb	x5, w22
+	and	w2, w19, 255
+	lsr	w1, w19, 8
+	ldrb	w0, [x3,656]
+	cmp	w0, 1
+	lsr	w0, w19, 16
+	bne	.L1986
+	add	x5, x25, x5, lsl 8
+	mov	w3, 6
+	b	.L1999
+.L1986:
+	ldr	x3, [x3,624]
+	add	x5, x25, x5, lsl 8
+	ldrb	w3, [x3,12]
+	cmp	w3, 3
+	bne	.L1988
+	mov	w3, 5
+.L1999:
+	str	w3, [x5,2056]
+	str	wzr, [x5,2052]
+	str	wzr, [x5,2052]
+	str	w2, [x5,2052]
+	str	w1, [x5,2052]
+	str	w0, [x5,2052]
+	b	.L1997
+.L1988:
+	str	wzr, [x5,2056]
+	str	wzr, [x5,2052]
+	str	wzr, [x5,2052]
+	str	w2, [x5,2052]
+	str	w1, [x5,2052]
+	str	w0, [x5,2052]
+	mov	w0, 5
+	str	w0, [x5,2056]
+	str	wzr, [x5,2052]
+	str	wzr, [x5,2052]
+.L1997:
+	mov	w0, 224
+	str	w0, [x5,2056]
+	cbz	w20, .L1989
+	add	x21, x21, :lo12:.LANCHOR0
+	ldr	x0, [x21,624]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L1989
+	sub	w20, w20, #1
+	add	w0, w19, w19, lsl 1
+	add	w0, w20, w0
+	b	.L1998
+.L1989:
+	mov	w0, w19
+.L1998:
+	bl	nandc_set_seed
+	adrp	x2, .LANCHOR2+385
+	mov	x3, x24
+	mov	x4, x23
+	mov	w1, 0
+	mov	w0, w22
+	ldrb	w2, [x2,#:lo12:.LANCHOR2+385]
+	bl	nandc_xfer
+	mov	w19, w0
+	mov	w0, w22
+	bl	nandc_de_cs
+	ldr	x25, [sp,64]
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	flash_complete_plane_page_read, .-flash_complete_plane_page_read
 	.align	2
 	.global	flash_complete_page_read
 	.type	flash_complete_page_read, %function
@@ -11175,82 +12172,68 @@ flash_complete_page_read:
 	stp	x29, x30, [sp, -112]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	and	w19, w0, 2097151
+	adrp	x19, .LANCHOR0
+	and	w20, w0, 2097151
 	stp	x23, x24, [sp,48]
 	mov	w24, w0
-	add	x0, x20, :lo12:.LANCHOR0
-	stp	x25, x26, [sp,64]
+	add	x0, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ubfx	x23, x24, 21, 3
+	ubfx	x21, x24, 21, 3
 	mov	x25, x1
-	ldrb	w0, [x0,98]
+	ldrb	w0, [x0,633]
 	mov	x26, x2
 	ubfx	x22, x24, 24, 2
-	cmp	w0, w23
-	bhi	.L1803
+	cmp	w0, w21
+	bhi	.L2001
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 904
+	add	x1, x1, 216
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 184
-	mov	w2, 789
 	bl	printk
-.L1803:
-	add	x21, x20, :lo12:.LANCHOR0
-	add	x23, x21, x23, sxtw
-	ldrb	w23, [x23,200]
+	bl	dump_stack
+.L2001:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x21, x0, x21, sxtw
+	ldrb	w23, [x21,736]
+	ldr	x21, [x0,536]
 	mov	w0, w23
-	ldr	x27, [x21,16]
 	bl	nandc_cs
-	cbnz	w22, .L1804
-	ldrb	w0, [x21,97]
-	cbz	w0, .L1805
-	ldrb	w0, [x21,208]
-	cbz	w0, .L1804
-.L1805:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w2, [x1,210]
-	udiv	w0, w19, w2
-	mul	w0, w0, w2
-	ldrb	w2, [x1,208]
-	sub	w19, w19, w0
-	cbz	w2, .L1806
-	add	w19, w0, w19, lsl 1
-	b	.L1804
-.L1806:
-	add	x1, x1, 212
-	ldrh	w19, [x1,w19,uxtw 1]
-	add	w19, w19, w0
-.L1804:
+	cbnz	w22, .L2002
+	mov	w0, w20
+	bl	slc_phy_page_address_calc
+	mov	w20, w0
+.L2002:
 	ubfiz	x0, x23, 8, 8
-	add	x5, x27, x0
+	add	x5, x21, x0
 	mov	w0, 5
 	str	w0, [x5,2056]
-	and	w0, w19, 255
+	and	w0, w20, 255
 	str	wzr, [x5,2052]
 	str	wzr, [x5,2052]
 	str	w0, [x5,2052]
-	lsr	w0, w19, 8
+	lsr	w0, w20, 8
 	str	w0, [x5,2052]
-	lsr	w0, w19, 16
+	lsr	w0, w20, 16
 	str	w0, [x5,2052]
 	mov	w0, 224
 	str	w0, [x5,2056]
-	cbz	w22, .L1807
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,88]
+	cbz	w22, .L2003
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,624]
 	ldrb	w0, [x0,12]
 	cmp	w0, 3
-	bne	.L1807
+	bne	.L2003
 	sub	w0, w22, #1
-	add	w1, w19, w19, lsl 1
+	add	w1, w20, w20, lsl 1
 	add	w0, w0, w1
-	b	.L1845
-.L1807:
-	mov	w0, w19
-.L1845:
+	b	.L2035
+.L2003:
+	mov	w0, w20
+.L2035:
 	adrp	x21, .LANCHOR2
 	bl	nandc_set_seed
 	add	x27, x21, :lo12:.LANCHOR2
@@ -11262,29 +12245,29 @@ flash_complete_page_read:
 	ldrb	w2, [x27,9]
 	bl	nandc_xfer
 	cmn	w0, #1
-	bne	.L1809
-	add	x28, x20, :lo12:.LANCHOR0
-	ldrb	w5, [x28,184]
-	cbz	w5, .L1810
+	bne	.L2005
+	add	x28, x19, :lo12:.LANCHOR0
+	ldrb	w5, [x28,720]
+	cbz	w5, .L2006
 	ldrb	w4, [x27,9]
 	mov	w0, w23
-	orr	w1, w19, w22, lsl 24
+	orr	w1, w20, w22, lsl 24
 	mov	x2, x25
 	mov	x3, x26
 	str	x5, [x29,104]
-	strb	wzr, [x28,184]
+	strb	wzr, [x28,720]
 	bl	flash_read_page
 	ldr	x5, [x29,104]
-	strb	w5, [x28,184]
-	cbnz	w22, .L1811
-.L1818:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrb	w2, [x1,97]
-	cbz	w2, .L1811
-	ldrb	w1, [x1,188]
+	strb	w5, [x28,720]
+	cbnz	w22, .L2007
+.L2014:
+	ldrb	w2, [x19,#:lo12:.LANCHOR0]
+	add	x1, x19, :lo12:.LANCHOR0
+	cbz	w2, .L2007
+	ldrb	w1, [x1,724]
 	add	w1, w1, w1, lsl 1
 	cmp	w0, w1, lsr 2
-	blt	.L1811
+	blt	.L2007
 	add	x21, x21, :lo12:.LANCHOR2
 	ldrb	w1, [x21,395]
 	sub	w1, w1, #4
@@ -11292,54 +12275,54 @@ flash_complete_page_read:
 	cmp	w1, 3
 	mov	w1, 256
 	csel	w0, w0, w1, hi
-	b	.L1828
-.L1811:
+	b	.L2022
+.L2007:
 	cmn	w0, #1
-	bne	.L1828
-.L1819:
-	adrp	x0, .LANCHOR4+1192
-	ldr	x5, [x0,#:lo12:.LANCHOR4+1192]
-	cbnz	x5, .L1814
-.L1817:
-	add	x20, x20, :lo12:.LANCHOR0
-	adrp	x0, .LC146
-	add	x0, x0, :lo12:.LC146
+	bne	.L2022
+.L2015:
+	adrp	x0, .LANCHOR4+1224
+	ldr	x5, [x0,#:lo12:.LANCHOR4+1224]
+	cbnz	x5, .L2010
+.L2013:
+	add	x19, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC158
+	add	x0, x0, :lo12:.LC158
 	mov	w1, 0
 	mov	w2, w24
 	mov	w3, -1
-	ldrb	w4, [x20,184]
+	ldrb	w4, [x19,720]
 	bl	printk
-	ldrb	w0, [x20,136]
-	cbnz	w0, .L1815
+	ldrb	w0, [x19,672]
+	cbnz	w0, .L2011
 	mov	w0, -1
-	b	.L1828
-.L1814:
+	b	.L2022
+.L2010:
 	add	x4, x21, :lo12:.LANCHOR2
 	mov	w0, w23
-	orr	w1, w19, w22, lsl 24
+	orr	w1, w20, w22, lsl 24
 	mov	x2, x25
 	mov	x3, x26
 	ldrb	w4, [x4,385]
 	blr	x5
 	cmn	w0, #1
-	bne	.L1828
-	b	.L1817
-.L1815:
+	bne	.L2022
+	b	.L2013
+.L2011:
 	add	x21, x21, :lo12:.LANCHOR2
 	mov	w0, w23
-	orr	w1, w19, w22, lsl 24
+	orr	w1, w20, w22, lsl 24
 	mov	x2, x25
 	mov	x3, x26
 	ldrb	w4, [x21,385]
-	bl	flash_ddr_tunning_read
-	b	.L1828
-.L1809:
-	cbz	w22, .L1818
-	b	.L1828
-.L1810:
-	cbz	w22, .L1818
-	b	.L1819
-.L1828:
+	bl	flash_ddr_tuning_read
+	b	.L2022
+.L2005:
+	cbz	w22, .L2014
+	b	.L2022
+.L2006:
+	cbz	w22, .L2014
+	b	.L2015
+.L2022:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -11351,132 +12334,321 @@ flash_complete_page_read:
 	.align	2
 	.type	queue_wait_first_req_completed, %function
 queue_wait_first_req_completed:
-	stp	x29, x30, [sp, -64]!
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	ldrb	w20, [x0,3861]
-	cmp	w20, 255
-	beq	.L1882
-	add	x0, x0, 768
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldrb	w21, [x0,2835]
+	cmp	w21, 255
+	beq	.L2120
+	add	x0, x0, 784
 	mov	w1, 0
-	add	x0, x0, x20, lsl 6
+	add	x0, x0, x21, lsl 6
 	ldrb	w2, [x0,58]
-	ldr	w21, [x0,40]
+	ldr	w20, [x0,40]
 	sub	w3, w2, #1
 	cmp	w3, 9
-	bhi	.L1848
-	adrp	x0, .L1850
-	add	x0, x0, :lo12:.L1850
-	ldrb	w0, [x0,w3,uxtw]
-	adr	x1, .Lrtx1850
-	add	x0, x1, w0, sxtb #2
+	bhi	.L2038
+	adrp	x0, .L2040
+	add	x0, x0, :lo12:.L2040
+	ldrh	w0, [x0,w3,uxtw #1]
+	adr	x1, .Lrtx2040
+	add	x0, x1, w0, sxth #2
 	br	x0
-.Lrtx1850:
+.Lrtx2040:
 	.section	.rodata
 	.align	0
 	.align	2
-.L1850:
-	.byte	(.L1849 - .Lrtx1850) / 4
-	.byte	(.L1849 - .Lrtx1850) / 4
-	.byte	(.L1851 - .Lrtx1850) / 4
-	.byte	(.L1851 - .Lrtx1850) / 4
-	.byte	(.L1851 - .Lrtx1850) / 4
-	.byte	(.L1852 - .Lrtx1850) / 4
-	.byte	(.L1853 - .Lrtx1850) / 4
-	.byte	(.L1854 - .Lrtx1850) / 4
-	.byte	(.L1851 - .Lrtx1850) / 4
-	.byte	(.L1854 - .Lrtx1850) / 4
+.L2040:
+	.2byte	(.L2039 - .Lrtx2040) / 4
+	.2byte	(.L2041 - .Lrtx2040) / 4
+	.2byte	(.L2042 - .Lrtx2040) / 4
+	.2byte	(.L2042 - .Lrtx2040) / 4
+	.2byte	(.L2042 - .Lrtx2040) / 4
+	.2byte	(.L2043 - .Lrtx2040) / 4
+	.2byte	(.L2044 - .Lrtx2040) / 4
+	.2byte	(.L2045 - .Lrtx2040) / 4
+	.2byte	(.L2042 - .Lrtx2040) / 4
+	.2byte	(.L2045 - .Lrtx2040) / 4
 	.text
-.L1849:
-	mov	w0, w21
+.L2039:
+	mov	w0, w20
 	mov	w1, 64
 	bl	flash_wait_device_ready
-	tbz	x0, 6, .L1882
+	tbz	x0, 6, .L2120
+	add	x3, x19, :lo12:.LANCHOR0
+	add	x0, x3, 784
+	add	x0, x0, x21, lsl 6
+	ldr	x2, [x0,16]
+	ldr	x1, [x0,8]
+	cbz	x2, .L2047
+	ldrb	w4, [x0,56]
+	ldrb	w0, [x3,2832]
+	cmp	w4, w0
+	csel	x1, x1, x2, ne
+.L2047:
 	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, w21
-	add	x19, x19, 768
-	add	x20, x19, x20, lsl 6
-	mov	x2, x20
-	ldr	x3, [x20,8]
-	ldr	x1, [x2,16]!
-	cmp	x1, xzr
-	ldr	x2, [x2,8]
-	csel	x1, x3, x1, eq
+	mov	w0, w20
+	add	x19, x19, 784
+	add	x19, x19, x21, lsl 6
+	ldr	x2, [x19,24]
 	bl	flash_complete_page_read
-	str	w0, [x20,52]
+	str	w0, [x19,52]
 	mov	w0, 12
-	strb	w0, [x20,58]
-	ldrb	w0, [x20,2]
+	strb	w0, [x19,58]
+	ldrb	w0, [x19,2]
 	orr	w0, w0, 8
-	strb	w0, [x20,2]
-	b	.L1882
-.L1851:
-	bl	nandc_iqr_wait_flash_ready
-	mov	w0, w21
+	strb	w0, [x19,2]
+	b	.L2120
+.L2041:
+	mov	w0, w20
 	mov	w1, 64
 	bl	flash_wait_device_ready
-	mov	w21, w0
-	tbz	x21, 6, .L1882
-	mov	w1, 5
-	add	x19, x19, :lo12:.LANCHOR0
-	ands	w1, w21, w1
-	beq	.L1857
-	add	x19, x19, 768
-	mov	w0, 11
-	add	x20, x19, x20, lsl 6
-	mov	w4, 11
-	strb	w0, [x20,58]
-	adrp	x0, .LC147
-	ldrb	w1, [x20,1]
-	add	x0, x0, :lo12:.LC147
-	ldr	w2, [x20,52]
-	ldr	w3, [x20,40]
+	add	x2, x19, :lo12:.LANCHOR0
+	lsl	x4, x21, 6
+	add	x3, x2, 784
+	add	x1, x3, x4
+	ldrb	w20, [x3,x4]
+	tbz	x0, 6, .L2120
+	add	x3, x3, x20, lsl 6
+	ldr	x0, [x1,16]
+	ldr	x27, [x1,8]
+	ldr	x23, [x3,8]
+	cbz	x0, .L2048
+	ldrb	w3, [x1,56]
+	ldrb	w1, [x2,2832]
+	cmp	w3, w1
+	csel	x27, x27, x0, ne
+.L2048:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x0, x2, 784
+	add	x0, x0, x20, lsl 6
+	ldr	x1, [x0,16]
+	cbz	x1, .L2049
+	ldrb	w3, [x0,56]
+	ldrb	w0, [x2,2832]
+	cmp	w3, w0
+	csel	x23, x23, x1, ne
+.L2049:
+	add	x24, x19, :lo12:.LANCHOR0
+	mov	x1, x27
+	add	x24, x24, 784
+	add	x26, x24, x21, lsl 6
+	add	x24, x24, x20, lsl 6
+	add	x28, x26, 32
+	add	x26, x26, 16
+	ldr	x2, [x26,8]
+	ldr	w0, [x26,24]
+	bl	flash_complete_plane_page_read
+	mov	w22, w0
+	ldr	x2, [x24,24]
+	mov	x1, x23
+	ldr	w0, [x24,40]
+	bl	flash_complete_plane_page_read
+	mov	w25, w0
+	cmn	w22, #1
+	beq	.L2050
+	ldr	w0, [x28,4]
+	cmn	w0, #1
+	beq	.L2051
+	ldr	x1, [x26,8]
+	ldr	w1, [x1,4]
+	cmp	w0, w1
+	beq	.L2051
+.L2050:
+	add	x4, x19, :lo12:.LANCHOR0
+	mov	x2, x27
+	add	x24, x4, 784
+	add	x24, x24, x21, lsl 6
+	ldrb	w4, [x4,2832]
+	add	x26, x24, 32
+	add	x24, x24, 16
+	ldr	w1, [x24,24]
+	ldr	x3, [x24,8]
+	ubfx	x0, x1, 21, 3
+	and	w1, w1, -14680065
+	bl	flash_read_page_en
+	mov	w22, w0
+	ldr	w2, [x26,4]
+	cmn	w2, #1
+	beq	.L2052
+	ldr	x3, [x24,8]
+	ldr	w4, [x3,4]
+	cmp	w2, w4
+	beq	.L2052
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 6, .L2052
+	adrp	x0, .LC159
+	ldr	w1, [x26,8]
+	ldr	w3, [x3]
+	add	x0, x0, :lo12:.LC159
 	bl	printk
-	mov	w0, -1
-	str	w0, [x20,52]
-	b	.L1883
-.L1857:
+.L2052:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 784
+	add	x0, x0, x21, lsl 6
+	ldr	w1, [x0,36]
+	cmn	w1, #1
+	beq	.L2051
+	ldr	x0, [x0,24]
+	ldr	w0, [x0,4]
+	cmp	w1, w0
+	beq	.L2051
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 338
+	add	x1, x1, 248
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2051:
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w1, 12
+	add	x3, x3, 784
+	cmn	w25, #1
+	add	x21, x3, x21, lsl 6
+	ldrb	w0, [x21,2]
+	str	w22, [x21,52]
+	orr	w0, w0, 8
+	strb	w1, [x21,58]
+	strb	w0, [x21,2]
+	beq	.L2053
+	add	x3, x3, x20, lsl 6
+	ldr	w0, [x3,36]
+	cmn	w0, #1
+	beq	.L2055
+	ldr	x1, [x3,24]
+	ldr	w1, [x1,4]
+	cmp	w0, w1
+	beq	.L2055
+.L2053:
+	add	x4, x19, :lo12:.LANCHOR0
+	mov	x2, x23
+	add	x21, x4, 784
+	add	x21, x21, x20, lsl 6
+	ldrb	w4, [x4,2832]
+	add	x24, x21, 32
+	add	x21, x21, 16
+	ldr	w1, [x21,24]
+	ldr	x3, [x21,8]
+	ubfx	x0, x1, 21, 3
+	and	w1, w1, -14680065
+	bl	flash_read_page_en
+	ldr	w2, [x24,4]
+	cmn	w2, #1
+	beq	.L2057
+	ldr	x3, [x21,8]
+	ldr	w4, [x3,4]
+	cmp	w2, w4
+	beq	.L2057
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 6, .L2057
+	adrp	x0, .LC159
+	ldr	w1, [x24,8]
+	ldr	w3, [x3]
+	add	x0, x0, :lo12:.LC159
+	bl	printk
+.L2057:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 784
+	add	x0, x0, x20, lsl 6
+	ldr	w1, [x0,36]
+	cmn	w1, #1
+	beq	.L2055
+	ldr	x0, [x0,24]
+	ldr	w0, [x0,4]
+	cmp	w1, w0
+	beq	.L2055
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 353
+	add	x1, x1, 248
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2055:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 12
+	add	x19, x19, 784
 	add	x20, x19, x20, lsl 6
-	b	.L1864
-.L1854:
+	ldrb	w0, [x20,2]
+	str	w22, [x20,52]
+	orr	w0, w0, 8
+	strb	w1, [x20,58]
+	strb	w0, [x20,2]
+	b	.L2120
+.L2042:
+	bl	nandc_iqr_wait_flash_ready
+	mov	w0, w20
+	mov	w1, 64
+	bl	flash_wait_device_ready
+	mov	w20, w0
+	tbz	x20, 6, .L2120
+	mov	w1, 5
+	add	x19, x19, :lo12:.LANCHOR0
+	ands	w1, w20, w1
+	beq	.L2058
+	add	x19, x19, 784
+	mov	w0, 11
+	add	x19, x19, x21, lsl 6
+	mov	w4, 11
+	strb	w0, [x19,58]
+	adrp	x0, .LC160
+	ldrb	w1, [x19,1]
+	add	x0, x0, :lo12:.LC160
+	ldr	w2, [x19,52]
+	ldr	w3, [x19,40]
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19,52]
+	b	.L2121
+.L2058:
+	add	x19, x19, x21, lsl 6
+	b	.L2065
+.L2045:
 	add	x22, x19, :lo12:.LANCHOR0
 	mov	w0, 3
 	cmp	w2, 10
 	mov	w1, 9
-	add	x22, x22, 768
+	add	x22, x22, 784
 	csel	w1, w0, w1, ne
-	ubfx	x3, x21, 21, 3
-	add	x0, x22, x20, lsl 6
-.L1859:
+	ubfx	x3, x20, 21, 3
+	add	x0, x22, x21, lsl 6
+.L2060:
 	ldrb	w23, [x0]
 	cmp	w23, 255
-	beq	.L1884
+	beq	.L2122
 	add	x0, x22, x23, lsl 6
 	ldrb	w2, [x0,58]
 	cmp	w2, w1
-	bne	.L1859
+	bne	.L2060
 	ldr	w2, [x0,40]
 	ubfx	x2, x2, 21, 3
 	cmp	w3, w2
-	bne	.L1859
+	bne	.L2060
 	bl	nandc_iqr_wait_flash_ready
-	mov	w0, w21
+	mov	w0, w20
 	mov	w1, 64
 	bl	flash_wait_device_ready
-	mov	w21, w0
+	mov	w20, w0
 	and	w0, w0, 64
-	tbz	x21, 6, .L1867
-	ands	w0, w21, 15
-	add	x22, x22, x20, lsl 6
-	beq	.L1862
-	adrp	x0, .LC147
+	tbz	x20, 6, .L2068
+	ands	w0, w20, 15
+	add	x22, x22, x21, lsl 6
+	beq	.L2063
+	adrp	x0, .LC160
 	ldrb	w1, [x22,1]
 	ldr	w2, [x22,52]
-	add	x0, x0, :lo12:.LC147
+	add	x0, x0, :lo12:.LC160
 	ldr	w3, [x22,40]
 	mov	w4, 11
 	bl	printk
@@ -11484,66 +12656,68 @@ queue_wait_first_req_completed:
 	strb	w0, [x22,58]
 	mov	w0, -1
 	str	w0, [x22,52]
-.L1861:
+.L2062:
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x19, x19, 768
-	add	x20, x19, x20, lsl 6
+	add	x19, x19, 784
+	add	x21, x19, x21, lsl 6
 	add	x23, x19, x23, lsl 6
-	ldrb	w0, [x20,58]
+	ldrb	w0, [x21,58]
 	strb	w0, [x23,58]
-	ldr	w0, [x20,52]
+	ldr	w0, [x21,52]
 	str	w0, [x23,52]
-.L1883:
-	mov	w1, w21
-	b	.L1848
-.L1862:
+.L2121:
+	mov	w1, w20
+	b	.L2038
+.L2063:
 	mov	w1, 12
 	str	w0, [x22,52]
 	strb	w1, [x22,58]
-.L1867:
-	mov	w21, w0
-	b	.L1861
-.L1884:
+.L2068:
+	mov	w20, w0
+	b	.L2062
+.L2122:
 	mov	w1, -1
-	b	.L1848
-.L1852:
+	b	.L2038
+.L2043:
 	mov	w1, 32
-	mov	w0, w21
+	mov	w0, w20
 	bl	flash_wait_device_ready
-	tbz	x0, 5, .L1882
+	tbz	x0, 5, .L2120
 	ands	w1, w0, 15
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x19, x20, lsl 6
-	beq	.L1864
+	add	x19, x19, x21, lsl 6
+	beq	.L2065
 	mov	w1, 11
-	strb	w1, [x20,826]
+	strb	w1, [x19,842]
 	mov	w1, -1
-	str	w1, [x20,820]
+	str	w1, [x19,836]
 	mov	w1, w0
-	b	.L1848
-.L1864:
+	b	.L2038
+.L2065:
 	mov	w0, 12
-	str	w1, [x20,820]
-	strb	w0, [x20,826]
-	b	.L1848
-.L1853:
+	str	w1, [x19,836]
+	strb	w0, [x19,842]
+	b	.L2038
+.L2044:
 	mov	w1, 64
-	mov	w0, w21
+	mov	w0, w20
 	bl	flash_wait_device_ready
-	tbz	x0, 6, .L1882
+	tbz	x0, 6, .L2120
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x19, x20, lsl 6
-	str	w0, [x20,820]
+	add	x19, x19, x21, lsl 6
+	str	w0, [x19,836]
 	mov	w0, 6
-	strb	w0, [x20,826]
-.L1882:
+	strb	w0, [x19,842]
+.L2120:
 	mov	w1, 0
-.L1848:
+.L2038:
 	mov	w0, w1
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 64
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
 	ret
 	.size	queue_wait_first_req_completed, .-queue_wait_first_req_completed
 	.align	2
@@ -11554,15 +12728,15 @@ sblk_wait_write_queue_completed:
 	add	x29, sp, 0
 	str	x19, [sp,16]
 	adrp	x19, .LANCHOR0
-.L1886:
+.L2124:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,3861]
+	ldrb	w0, [x0,2835]
 	cmp	w0, 255
-	beq	.L1888
+	beq	.L2126
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L1886
-.L1888:
+	b	.L2124
+.L2126:
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
 	ret
@@ -11616,337 +12790,175 @@ ftl_read_ppa_page:
 	ret
 	.size	ftl_read_ppa_page, .-ftl_read_ppa_page
 	.align	2
-	.global	ftl_open_sblk_read_test
-	.type	ftl_open_sblk_read_test, %function
-ftl_open_sblk_read_test:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	uxth	w19, w0
-	add	x1, x29, 80
-	stp	x21, x22, [sp,32]
-	mov	w0, w19
-	adrp	x21, .LANCHOR4
-	adrp	x22, .LANCHOR5
-	add	x21, x21, :lo12:.LANCHOR4
-	add	x22, x22, :lo12:.LANCHOR5
-	str	x23, [sp,48]
-	add	x21, x21, 1280
-	bl	ftl_get_blk_list_in_sblk
-	add	x22, x22, 256
-	strh	w19, [x29,64]
-	strb	w0, [x29,73]
-	mov	w19, 0
-.L1892:
-	adrp	x0, .LANCHOR0
-	add	x1, x0, :lo12:.LANCHOR0
-	mov	x23, x0
-	ldrh	w1, [x1,3276]
-	cmp	w1, w19
-	bls	.L1891
-	mov	w20, 0
-.L1898:
-	add	x3, x23, :lo12:.LANCHOR0
-	ldrb	w0, [x3,3244]
-	cmp	w0, w20
-	bls	.L1904
-	add	x0, x29, 64
-	add	x0, x0, x20, sxtw 1
-	ldrh	w0, [x0,16]
-	mov	w1, 65535
-	cmp	w0, w1
-	beq	.L1894
-	ldrh	w1, [x3,3324]
-	mov	x2, x22
-	ldrb	w3, [x3,2816]
-	madd	w0, w0, w1, w19
-	mov	x1, x21
-	bl	ftl_read_ppa_page
-	cmp	w0, 512
-	beq	.L1891
-.L1894:
-	add	w20, w20, 1
-	uxth	w20, w20
-	b	.L1898
-.L1904:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L1892
-.L1891:
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldr	x23, [sp,48]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	ftl_open_sblk_read_test, .-ftl_open_sblk_read_test
-	.align	2
 	.global	sblk_read_page
 	.type	sblk_read_page, %function
 sblk_read_page:
-	stp	x29, x30, [sp, -112]!
+	stp	x29, x30, [sp, -128]!
 	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	adrp	x23, .LANCHOR0
-	mov	w24, 1
 	stp	x21, x22, [sp,32]
-	add	x23, x23, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	adrp	x22, .LANCHOR0
+	adrp	x23, .LANCHOR3
 	uxtb	w21, w1
+	add	x22, x22, :lo12:.LANCHOR0
+	add	x23, x23, :lo12:.LANCHOR3
 	stp	x19, x20, [sp,16]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	mov	x20, x0
+	mov	x25, x0
 	mov	x19, x0
-	mov	w22, w21
-	mov	w25, -1
-	add	x26, x23, 3861
-.L1906:
-	cbz	w22, .L1918
-	ldrb	w27, [x19]
-	ldr	w28, [x19,40]
-.L1907:
-	mov	w0, w28
+	mov	w20, w21
+	add	x27, x22, 784
+	add	x23, x23, 280
+.L2130:
+	cbz	w20, .L2153
+	ldrb	w28, [x19]
+	ldr	w26, [x19,40]
+.L2131:
+	mov	w0, w26
 	mov	w1, 0
 	bl	queue_lun_state
-	mov	w2, w0
-	cbz	w0, .L1919
+	cbz	w0, .L2154
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L1907
-.L1919:
-	ldr	w1, [x19,40]
-	mov	w0, 48
+	b	.L2131
+.L2154:
+	cmp	w20, 1
+	beq	.L2137
+	adrp	x0, .LANCHOR4+1265
+	ldrb	w0, [x0,#:lo12:.LANCHOR4+1265]
+	cbz	w0, .L2137
+	ldrb	w0, [x19]
+	ubfx	x3, x26, 21, 3
+	cmp	w0, 255
+	bne	.L2136
+	adrp	x0, .LC0
+	mov	x1, x23
+	mov	w2, 624
+	add	x0, x0, :lo12:.LC0
+	str	x3, [x29,120]
+	bl	printk
+	bl	dump_stack
+	ldr	x3, [x29,120]
+.L2136:
+	ldrb	w24, [x19]
+	lsl	x24, x24, 6
+	add	x2, x27, x24
+	ldr	w1, [x2,40]
+	ubfx	x0, x1, 21, 3
+	cmp	w3, w0
+	bne	.L2137
+	ldrh	w0, [x22,3350]
+	add	w26, w0, w26
+	cmp	w1, w26
+	bne	.L2137
+	ldr	w0, [x19,40]
+	add	x26, x22, 2835
 	str	x2, [x29,104]
-	bl	flash_start_page_read
-	strb	w24, [x19,58]
-	ldr	x2, [x29,104]
+	sub	w20, w20, #1
+	ldrb	w28, [x27,x24]
+	bl	flash_start_plane_read
+	strb	wzr, [x19,59]
+	mov	w4, 2
+	mov	w3, -1
+	strb	w4, [x19,58]
 	mov	x0, x26
-	strb	w2, [x19,59]
+	strb	w3, [x19]
 	mov	x1, x19
-	strb	w25, [x19]
+	str	x4, [x29,112]
+	str	x3, [x29,120]
+	bl	buf_add_tail
+	ldr	x2, [x29,104]
+	mov	x0, x26
+	ldr	x4, [x29,112]
+	ldr	x3, [x29,120]
+	mov	x1, x2
+	strb	w4, [x2,58]
+	strb	wzr, [x2,59]
+	strb	w3, [x27,x24]
 	bl	buf_add_tail
-	subs	w22, w22, #1
-	beq	.L1918
-	add	x19, x23, 768
-	sbfiz	x27, x27, 6, 32
-	add	x19, x19, x27
-	b	.L1906
-.L1918:
+	b	.L2135
+.L2137:
+	mov	x0, x19
+	bl	queue_read_cmd
+.L2135:
+	subs	w20, w20, #1
+	beq	.L2153
+	sbfiz	x19, x28, 6, 32
+	add	x19, x27, x19
+	b	.L2130
+.L2153:
 	adrp	x19, .LANCHOR0
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x19, x19, 768
-.L1911:
-	cbz	w21, .L1920
-	ldrb	w0, [x20,58]
+	add	x19, x19, 784
+.L2141:
+	cbz	w21, .L2155
+	ldrb	w0, [x25,58]
 	cmp	w0, 12
-	bne	.L1912
-	ldrb	w20, [x20]
+	bne	.L2142
+	ldrb	w0, [x25]
 	sub	w21, w21, #1
-	add	x20, x19, x20, lsl 6
-	b	.L1911
-.L1912:
+	cmp	w0, 255
+	beq	.L2142
+	sbfiz	x25, x0, 6, 32
+	add	x25, x19, x25
+.L2142:
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L1911
-.L1920:
+	b	.L2141
+.L2155:
 	mov	w0, w21
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 112
+	ldp	x29, x30, [sp], 128
 	ret
 	.size	sblk_read_page, .-sblk_read_page
 	.align	2
-	.global	gc_check_data_one_wl
-	.type	gc_check_data_one_wl, %function
-gc_check_data_one_wl:
-	sub	sp, sp, #112
-	stp	x29, x30, [sp,16]
-	add	x29, sp, 16
-	stp	x19, x20, [sp,32]
-	adrp	x19, .LANCHOR0
-	str	x27, [sp,96]
-	add	x20, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,48]
-	stp	x23, x24, [sp,64]
-	stp	x25, x26, [sp,80]
-	ldr	x0, [x20,2896]
-	ldr	x23, [x20,80]
-	add	x20, x20, 2888
-	cbnz	x0, .L1922
-	mov	w0, 1
-	bl	buf_alloc
-	str	x0, [x20,8]
-.L1922:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x20, [x0,2896]
-	cbnz	x20, .L1923
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 216
-	mov	w2, 348
+	.global	flash_prog_page
+	.type	flash_prog_page, %function
+flash_prog_page:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	x22, w0
+	adrp	x21, .LANCHOR2
+	adrp	x0, .LANCHOR0+536
+	str	x27, [sp,80]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	ldr	x19, [x0,#:lo12:.LANCHOR0+536]
+	mov	x20, x22
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	add	x22, x22, 8
+	stp	x25, x26, [sp,64]
+	mov	w23, w1
+	mov	x25, x3
+	mov	x26, x2
+	mov	w3, w4
+	add	x22, x19, x22, lsl 8
+	and	w24, w1, 2097151
+	ubfx	x27, x23, 24, 2
+	tbz	x0, 4, .L2157
+	adrp	x0, .LC161
+	mov	w2, w27
+	add	x0, x0, :lo12:.LC161
 	bl	printk
-.L1923:
-	mov	w24, 0
-	add	x25, x23, 80
-	add	x21, x19, :lo12:.LANCHOR0
-	adrp	x26, .LANCHOR4
-.L1924:
-	ldrb	w0, [x25,9]
-	cmp	w24, w0
-	bge	.L1945
-	mov	w22, 1
-	sxtw	x27, w24
-.L1933:
-	add	x0, x21, 2888
-	ldrh	w1, [x0,20]
-	cmp	w22, w1
-	bgt	.L1946
-	add	x1, x27, 8
-	ldrh	w2, [x21,3324]
-	ldrh	w0, [x0,16]
-	ldrh	w1, [x25,x1,lsl 1]
-	mul	w1, w1, w2
-	ldrb	w2, [x21,3225]
-	cmp	w2, 3
-	bne	.L1925
-	add	w1, w1, w0
-	orr	w1, w1, w22, lsl 24
-	b	.L1944
-.L1925:
-	cmp	w2, 2
-	bne	.L1927
-	sub	w0, w0, #1
-	add	w1, w0, w1
-	add	w1, w1, w22
-	orr	w1, w1, 33554432
-	b	.L1944
-.L1927:
-	add	w1, w1, w0
-.L1944:
-	str	w1, [x20,40]
-	mov	x0, x20
-	mov	w1, 1
-	bl	sblk_read_page
-	ldr	w2, [x20,52]
-	cmn	w2, #1
-	beq	.L1928
-	add	x3, x26, :lo12:.LANCHOR4
-	ldrh	w0, [x21,2910]
-	ldr	x1, [x20,24]
-	lsl	x0, x0, 2
-	ldr	x4, [x3,1104]
-	ldr	w5, [x4,x0]
-	ldr	w4, [x1,4]
-	cmp	w5, w4
-	bne	.L1928
-	ldr	x3, [x3,1112]
-	ldr	w3, [x3,x0]
-	ldr	w0, [x1,8]
-	cmp	w3, w0
-	beq	.L1929
-.L1928:
-	add	x0, x26, :lo12:.LANCHOR4
-	ldrh	w4, [x21,2910]
-	lsl	x4, x4, 2
-	ldr	x1, [x0,1104]
-	ldr	w3, [x1,x4]
-	cmn	w3, #1
-	beq	.L1929
-	adrp	x1, .LANCHOR2
-	ldr	w1, [x1,#:lo12:.LANCHOR2]
-	tbz	x1, 10, .L1930
-	ldr	x7, [x20,24]
-	ldr	x5, [x0,1112]
-	ldr	w0, [x7,12]
-	str	w0, [sp]
-	adrp	x0, .LC148
-	add	x0, x0, :lo12:.LC148
-	ldr	w4, [x5,x4]
-	ldr	w6, [x7,4]
-	ldr	w5, [x7]
-	ldr	w1, [x20,40]
-	ldr	w7, [x7,8]
-	bl	printk
-.L1930:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x23,80]
-	ldr	x0, [x19,72]
-	strh	wzr, [x0,x1,lsl 1]
-	mov	w0, -1
-	b	.L1931
-.L1929:
-	ldrh	w0, [x21,2910]
-	add	w22, w22, 1
-	add	w0, w0, 1
-	strh	w0, [x21,2910]
-	b	.L1933
-.L1946:
-	add	w24, w24, 1
-	b	.L1924
-.L1945:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x19,2904]
-	add	w0, w0, 1
-	strh	w0, [x19,2904]
-	mov	w0, 0
-.L1931:
-	sub	sp, x29, #16
-	ldp	x19, x20, [sp,32]
-	ldp	x21, x22, [sp,48]
-	ldp	x23, x24, [sp,64]
-	ldp	x25, x26, [sp,80]
-	ldr	x27, [sp,96]
-	ldp	x29, x30, [sp,16]
-	add	sp, sp, 112
-	ret
-	.size	gc_check_data_one_wl, .-gc_check_data_one_wl
-	.align	2
-	.global	flash_prog_page
-	.type	flash_prog_page, %function
-flash_prog_page:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	uxtb	x22, w0
-	adrp	x21, .LANCHOR2
-	adrp	x0, .LANCHOR0+16
-	str	x27, [sp,80]
-	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	ldr	x19, [x0,#:lo12:.LANCHOR0+16]
-	mov	x20, x22
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	add	x22, x22, 8
-	stp	x25, x26, [sp,64]
-	mov	w23, w1
-	mov	x25, x3
-	mov	x26, x2
-	mov	w3, w4
-	add	x22, x19, x22, lsl 8
-	and	w24, w1, 2097151
-	ubfx	x27, x23, 24, 2
-	tbz	x0, 4, .L1948
-	adrp	x0, .LC149
-	mov	w2, w27
-	add	x0, x0, :lo12:.LC149
-	bl	printk
-.L1948:
+.L2157:
 	bl	nandc_wait_flash_ready
 	mov	w0, w20
 	bl	hynix_reconfig_rr_para
 	mov	w0, w20
 	bl	nandc_cs
 	mov	w0, w20
-	cbnz	w27, .L1949
+	cbnz	w27, .L2158
 	bl	zftl_flash_enter_slc_mode
-	b	.L1950
-.L1949:
+	b	.L2159
+.L2158:
 	bl	zftl_flash_exit_slc_mode
-.L1950:
+.L2159:
 	ubfiz	x4, x20, 8, 8
 	mov	w0, 128
 	add	x19, x19, x4
@@ -11978,16 +12990,16 @@ flash_prog_page:
 	mov	w0, w20
 	and	w19, w21, 4
 	bl	nandc_de_cs
-	tbz	x21, 2, .L1951
+	tbz	x21, 2, .L2160
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L1951
-	adrp	x0, .LC150
+	tbz	x0, 12, .L2160
+	adrp	x0, .LC162
 	mov	w1, w23
-	add	x0, x0, :lo12:.LC150
+	add	x0, x0, :lo12:.LC162
 	mov	w2, w19
 	bl	printk
-.L1951:
+.L2160:
 	mov	w0, w19
 	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
@@ -12007,72 +13019,72 @@ flash_test_blk:
 	stp	x21, x22, [sp,32]
 	uxtb	w22, w0
 	uxth	w20, w1
-	cbnz	w22, .L1962
-	adrp	x0, .LANCHOR5+512
-	ldrb	w1, [x0,#:lo12:.LANCHOR5+512]
+	adrp	x19, .LANCHOR4
+	cbnz	w22, .L2171
+	add	x0, x19, :lo12:.LANCHOR4
+	ldrb	w1, [x0,1266]
 	mov	w0, w22
 	cmp	w1, w20
-	bhi	.L1963
-.L1962:
-	adrp	x19, .LANCHOR4
-	mov	w1, 165
+	bhi	.L2172
+.L2171:
 	add	x19, x19, :lo12:.LANCHOR4
+	mov	w1, 165
 	mov	w2, 32
-	ldr	x0, [x19,1224]
+	ldr	x0, [x19,1256]
 	bl	ftl_memset
-	ldr	x0, [x19,1216]
+	ldr	x0, [x19,1248]
 	mov	w1, 90
 	mov	w2, 8
 	bl	ftl_memset
-	adrp	x0, .LANCHOR0+210
-	ldrh	w21, [x0,#:lo12:.LANCHOR0+210]
+	adrp	x0, .LANCHOR0+2
+	ldrh	w21, [x0,#:lo12:.LANCHOR0+2]
 	mov	w0, w22
 	mul	w21, w20, w21
 	mov	w1, w21
 	bl	flash_erase_block
 	cmn	w0, #1
-	beq	.L1968
+	beq	.L2177
 	adrp	x20, .LANCHOR2
-	ldr	x2, [x19,1216]
+	ldr	x2, [x19,1248]
 	add	x20, x20, :lo12:.LANCHOR2
-	ldr	x3, [x19,1224]
+	ldr	x3, [x19,1256]
 	mov	w0, w22
 	mov	w1, w21
 	add	x20, x20, 376
 	ldrb	w4, [x20,9]
 	bl	flash_prog_page
 	cmn	w0, #1
-	beq	.L1968
+	beq	.L2177
 	ldrb	w4, [x20,9]
 	mov	w0, w22
-	ldr	x2, [x19,1216]
+	ldr	x2, [x19,1248]
 	mov	w1, w21
-	ldr	x3, [x19,1224]
+	ldr	x3, [x19,1256]
 	bl	flash_read_page
 	cmn	w0, #1
 	mov	w20, w0
-	beq	.L1968
-	ldr	x0, [x19,1216]
+	beq	.L2177
+	ldr	x0, [x19,1248]
 	ldr	w1, [x0]
 	mov	w0, 23130
 	bfi	w0, w0, 16, 16
 	cmp	w1, w0
-	bne	.L1968
-	ldr	x0, [x19,1224]
+	bne	.L2177
+	ldr	x0, [x19,1256]
 	ldr	w1, [x0]
 	mov	w0, 42405
 	bfi	w0, w0, 16, 16
 	cmp	w1, w0
 	csinv	w20, w20, wzr, eq
-	b	.L1965
-.L1968:
+	b	.L2174
+.L2177:
 	mov	w20, -1
-.L1965:
+.L2174:
 	mov	w0, w22
 	mov	w1, w21
 	bl	flash_erase_block
 	mov	w0, w20
-.L1963:
+.L2172:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
@@ -12080,8 +13092,8 @@ flash_test_blk:
 	.size	flash_test_blk, .-flash_test_blk
 	.section	.text.unlikely
 	.align	2
-	.type	fw_flash_page_prog.constprop.31, %function
-fw_flash_page_prog.constprop.31:
+	.type	fw_flash_page_prog.constprop.28, %function
+fw_flash_page_prog.constprop.28:
 	stp	x29, x30, [sp, -64]!
 	adrp	x4, .LANCHOR0
 	add	x29, sp, 0
@@ -12090,11 +13102,11 @@ fw_flash_page_prog.constprop.31:
 	mov	x21, x1
 	stp	x19, x20, [sp,16]
 	str	x2, [x29,56]
-	ldr	x1, [x4,88]
-	ldrb	w20, [x4,188]
+	ldr	x1, [x4,624]
+	ldrb	w20, [x4,724]
 	ldrb	w19, [x1,9]
 	udiv	w19, w0, w19
-	ldrb	w0, [x4,96]
+	ldrb	w0, [x4,632]
 	bl	nandc_bch_sel
 	ldr	x3, [x29,56]
 	mov	w1, w19
@@ -12110,101 +13122,68 @@ fw_flash_page_prog.constprop.31:
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 64
 	ret
-	.size	fw_flash_page_prog.constprop.31, .-fw_flash_page_prog.constprop.31
+	.size	fw_flash_page_prog.constprop.28, .-fw_flash_page_prog.constprop.28
 	.text
 	.align	2
-	.global	flash_start_page_prog
-	.type	flash_start_page_prog, %function
-flash_start_page_prog:
-	stp	x29, x30, [sp, -96]!
+	.global	flash_start_tlc_page_prog
+	.type	flash_start_tlc_page_prog, %function
+flash_start_tlc_page_prog:
+	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	and	w19, w1, 2097151
+	mov	w20, w4
+	adrp	x4, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	uxtb	w25, w0
+	add	x0, x4, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	uxtb	w22, w0
-	add	x0, x20, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	ubfx	x27, x1, 21, 3
-	mov	x24, x2
-	ldrb	w0, [x0,98]
-	mov	x23, x3
-	ubfx	x26, x1, 24, 2
-	cmp	w0, w27
-	bhi	.L1978
+	uxtb	w26, w3
+	uxtb	w21, w1
+	ldrb	w0, [x0,633]
+	uxtb	w22, w2
+	mov	x24, x5
+	mov	x23, x6
+	cmp	w0, w26
+	mov	x19, x4
+	bhi	.L2187
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 648
+	add	x1, x1, 296
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 240
-	mov	w2, 685
 	bl	printk
-.L1978:
-	add	x28, x20, :lo12:.LANCHOR0
-	add	x0, x28, x27, sxtw
-	ldrb	w21, [x0,200]
-	ldr	x25, [x28,16]
-	bl	nandc_rdy_status
-	cbnz	w0, .L1979
-	ldrb	w0, [x28,98]
-	cmp	w0, 1
-	bne	.L1980
-	bl	nandc_wait_flash_ready
-	b	.L1979
-.L1980:
-	mov	w0, w27
-	mov	w1, w19
-	mov	w2, 64
-	bl	flash_wait_device_ready_raw
-.L1979:
-	mov	w0, w21
-	bl	hynix_reconfig_rr_para
-	mov	w0, w21
+	bl	dump_stack
+.L2187:
+	add	x4, x19, :lo12:.LANCHOR0
+	add	x26, x4, x26, sxtw
+	ldrb	w26, [x26,736]
+	mov	w0, w26
+	ldr	x19, [x4,536]
 	bl	nandc_cs
-	cbnz	w26, .L1981
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x0,97]
-	cbz	w1, .L1982
-	ldrb	w0, [x0,208]
-	cbz	w0, .L1983
-.L1982:
-	add	x20, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x20,210]
-	udiv	w0, w19, w1
-	mul	w0, w0, w1
-	ldrb	w1, [x20,208]
-	sub	w19, w19, w0
-	cbz	w1, .L1984
-	add	w19, w0, w19, lsl 1
-	b	.L1983
-.L1984:
-	add	x20, x20, 212
-	ldrh	w19, [x20,w19,uxtw 1]
-	add	w19, w19, w0
-	b	.L1985
-.L1983:
-	mov	w0, w21
-	bl	zftl_flash_enter_slc_mode
-	b	.L1985
-.L1981:
-	mov	w0, w21
-	bl	zftl_flash_exit_slc_mode
-.L1985:
-	ubfiz	x1, x21, 8, 8
+	cbz	w25, .L2188
+	sxtw	x1, w26
+	add	x1, x1, 8
+	add	x1, x19, x1, lsl 8
+	str	w25, [x1,8]
+.L2188:
+	ubfiz	x7, x26, 8, 8
 	mov	w0, 128
-	add	x20, x25, x1
-	str	w0, [x20,2056]
-	and	w0, w19, 255
-	str	wzr, [x20,2052]
-	str	wzr, [x20,2052]
-	str	w0, [x20,2052]
-	lsr	w0, w19, 8
-	str	w0, [x20,2052]
-	lsr	w0, w19, 16
-	str	w0, [x20,2052]
-	mov	w0, w19
+	add	x19, x19, x7
+	str	w21, [x19,2056]
+	str	w0, [x19,2056]
+	and	w0, w20, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w20, 8
+	str	w0, [x19,2052]
+	lsr	w0, w20, 16
+	add	w20, w20, w20, lsl 1
+	str	w0, [x19,2052]
+	sub	w0, w20, #1
+	add	w0, w0, w21
 	bl	nandc_set_seed
 	adrp	x1, .LANCHOR2+385
 	mov	x2, x24
@@ -12213,338 +13192,25 @@ flash_start_page_prog:
 	ldrb	w1, [x1,#:lo12:.LANCHOR2+385]
 	bl	nandc_xfer_start
 	bl	nandc_xfer_done
-	str	w22, [x20,2056]
-	mov	w0, w21
+	str	w22, [x19,2056]
+	mov	w0, w26
 	bl	nandc_de_cs
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
+	ldp	x29, x30, [sp], 80
 	ret
-	.size	flash_start_page_prog, .-flash_start_page_prog
+	.size	flash_start_tlc_page_prog, .-flash_start_tlc_page_prog
 	.align	2
-	.type	queue_prog_cmd, %function
-queue_prog_cmd:
-	stp	x29, x30, [sp, -32]!
-	add	x29, sp, 0
-	str	x19, [sp,16]
-	mov	x19, x0
-	mov	w0, 16
-	ldr	w1, [x19,40]
-	ldr	x2, [x19,8]
-	ldr	x3, [x19,24]
-	bl	flash_start_page_prog
-	adrp	x0, .LANCHOR0
-	ldr	w4, [x19,40]
-	add	x1, x0, :lo12:.LANCHOR0
-	ldrb	w2, [x1,3861]
-	cmp	w2, 255
-	beq	.L1990
-	ubfx	x4, x4, 21, 3
-	add	x1, x1, 768
-.L1992:
-	add	x3, x1, x2, lsl 6
-	ldr	w5, [x3,40]
-	ubfx	x5, x5, 21, 3
-	cmp	w4, w5
-	bne	.L1991
-	ldrb	w5, [x3,58]
-	add	x3, x3, 48
-	cmp	w5, 6
-	bne	.L1991
-	mov	w1, 3
-	strb	w1, [x3,10]
-	b	.L1990
-.L1991:
-	lsl	x2, x2, 6
-	ldrb	w2, [x1,x2]
-	cmp	w2, 255
-	bne	.L1992
-.L1990:
-	mov	w1, 3
-	strb	w1, [x19,58]
+	.type	queue_tlc_prog_cmd, %function
+queue_tlc_prog_cmd:
+	stp	x29, x30, [sp, -48]!
 	mov	w1, 1
-	add	x0, x0, :lo12:.LANCHOR0
-	strb	w1, [x19,59]
-	mov	w1, -1
-	add	x0, x0, 3861
-	strb	w1, [x19]
-	mov	x1, x19
-	bl	buf_add_tail
-	ldr	x19, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	queue_prog_cmd, .-queue_prog_cmd
-	.align	2
-	.global	sblk_prog_page
-	.type	sblk_prog_page, %function
-sblk_prog_page:
-	stp	x29, x30, [sp, -96]!
+	mov	w2, 26
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	str	x27, [sp,80]
-	mov	x19, x0
-	uxtb	w20, w1
-	ldrh	w0, [x0,50]
-	cbz	w0, .L1998
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L1998
-	adrp	x0, .LC151
-	ldr	w1, [x19,40]
-	add	x0, x0, :lo12:.LC151
-	mov	w2, w20
-	bl	printk
-.L1998:
-	adrp	x21, .LANCHOR0
-	adrp	x24, .LANCHOR3
-	add	x21, x21, :lo12:.LANCHOR0
-	add	x24, x24, :lo12:.LANCHOR3
-	mov	w22, 0
-	add	x26, x21, 768
-	add	x24, x24, 264
-.L1999:
-	cbz	w20, .L2025
-	ldrb	w25, [x19]
-	ldr	w23, [x19,40]
-.L2000:
-	mov	w0, w23
-	mov	w1, 1
-	bl	queue_lun_state
-	cbz	w0, .L2026
-	bl	queue_wait_first_req_completed
-	bl	queue_remove_completed_req
-	b	.L2000
-.L2026:
-	cmp	w20, 1
-	beq	.L2002
-	ldrb	w0, [x21,765]
-	cbnz	w0, .L2003
-.L2002:
-	mov	x0, x19
-	bl	queue_prog_cmd
-	b	.L2004
-.L2003:
-	ldrb	w0, [x19]
-	ubfx	x27, x23, 21, 3
-	cmp	w0, 255
-	bne	.L2005
-	adrp	x0, .LC0
-	mov	x1, x24
-	add	x0, x0, :lo12:.LC0
-	mov	w2, 489
-	bl	printk
-.L2005:
-	ldrb	w0, [x19]
-	add	x0, x26, x0, lsl 6
-	ldr	w4, [x0,40]
-	ubfx	x0, x4, 21, 3
-	cmp	w27, w0
-	bne	.L2006
-	ldrh	w3, [x21,3314]
-	mov	w1, 21
-	ldrb	w6, [x21,3312]
-	mov	w27, 1
-	sub	w1, w1, w3
-	lsr	w0, w23, w3
-	sub	w6, w6, #1
-	lsl	w1, w27, w1
-	sub	w1, w1, #1
-	lsl	w2, w27, w3
-	uxth	w7, w6
-	sub	w2, w2, #1
-	and	w5, w7, w0
-	lsr	w0, w4, w3
-	uxth	w1, w1
-	and	w3, w7, w0
-	and	w3, w1, w3
-	and	w0, w1, w5
-	cmp	w0, w3
-	uxth	w2, w2
-	beq	.L2006
-	and	w23, w2, w23
-	and	w2, w2, w4
-	cmp	w23, w2
-	bne	.L2006
-	cmp	w22, w6
-	beq	.L2006
-	ldr	w1, [x19,40]
-	mov	w0, 17
-	ldr	x2, [x19,8]
-	add	w22, w22, w27
-	ldr	x3, [x19,24]
-	bl	flash_start_page_prog
-	strb	w27, [x19,59]
-	mov	w0, 8
-	strb	w0, [x19,58]
-	mov	w0, -1
-	mov	x1, x19
-	strb	w0, [x19]
-	add	x0, x21, 3861
-	bl	buf_add_tail
-	b	.L2004
-.L2006:
-	mov	x0, x19
-	mov	w22, 0
-	bl	queue_prog_cmd
-.L2004:
-	sbfiz	x19, x25, 6, 32
-	sub	w20, w20, #1
-	add	x19, x26, x19
-	b	.L1999
-.L2025:
-	mov	w0, w20
-	ldr	x27, [sp,80]
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	sblk_prog_page, .-sblk_prog_page
-	.align	2
-	.global	ftl_flush
-	.type	ftl_flush, %function
-ftl_flush:
-	stp	x29, x30, [sp, -32]!
-	adrp	x2, .LANCHOR0
-	add	x29, sp, 0
-	add	x0, x2, :lo12:.LANCHOR0
-	stp	x19, x20, [sp,16]
-	mov	x19, x2
-	adrp	x20, .LANCHOR5
-	ldrb	w1, [x0,2841]
-	cbz	w1, .L2028
-	add	x2, x20, :lo12:.LANCHOR5
-	add	x0, x0, 768
-	ldrb	w2, [x2,513]
-	add	x0, x0, x2, lsl 6
-	bl	sblk_prog_page
-.L2028:
-	add	x2, x19, :lo12:.LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR5
-	mov	w0, -1
-	strb	wzr, [x2,2841]
-	strb	w0, [x20,513]
-	bl	sblk_wait_write_queue_completed
-	bl	ftl_write_completed
-	mov	w0, -1
-	bl	ftl_vpn_decrement
-	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	ftl_flush, .-ftl_flush
-	.align	2
-	.global	zftl_cache_flush
-	.type	zftl_cache_flush, %function
-zftl_cache_flush:
-	adrp	x0, .LANCHOR0+2841
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	ldrb	w0, [x0,#:lo12:.LANCHOR0+2841]
-	cbz	w0, .L2032
-	bl	timer_get_time
-	adrp	x1, .LANCHOR5+516
-	ldr	w1, [x1,#:lo12:.LANCHOR5+516]
-	add	w1, w1, 100
-	cmp	w0, w1
-	bls	.L2032
-	bl	ftl_flush
-.L2032:
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	zftl_cache_flush, .-zftl_cache_flush
-	.align	2
-	.global	flash_start_tlc_page_prog
-	.type	flash_start_tlc_page_prog, %function
-flash_start_tlc_page_prog:
-	stp	x29, x30, [sp, -80]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	mov	w20, w4
-	adrp	x4, .LANCHOR0
-	stp	x25, x26, [sp,64]
-	uxtb	w25, w0
-	add	x0, x4, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	uxtb	w26, w3
-	uxtb	w21, w1
-	ldrb	w0, [x0,98]
-	uxtb	w22, w2
-	mov	x24, x5
-	mov	x23, x6
-	cmp	w0, w26
-	mov	x19, x4
-	bhi	.L2037
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 280
-	mov	w2, 648
-	bl	printk
-.L2037:
-	add	x4, x19, :lo12:.LANCHOR0
-	add	x26, x4, x26, sxtw
-	ldrb	w26, [x26,200]
-	mov	w0, w26
-	ldr	x19, [x4,16]
-	bl	nandc_cs
-	cbz	w25, .L2038
-	sxtw	x1, w26
-	add	x1, x1, 8
-	add	x1, x19, x1, lsl 8
-	str	w25, [x1,8]
-.L2038:
-	ubfiz	x7, x26, 8, 8
-	mov	w0, 128
-	add	x19, x19, x7
-	str	w21, [x19,2056]
-	str	w0, [x19,2056]
-	and	w0, w20, 255
-	str	wzr, [x19,2052]
-	str	wzr, [x19,2052]
-	str	w0, [x19,2052]
-	lsr	w0, w20, 8
-	str	w0, [x19,2052]
-	lsr	w0, w20, 16
-	add	w20, w20, w20, lsl 1
-	str	w0, [x19,2052]
-	sub	w0, w20, #1
-	add	w0, w0, w21
-	bl	nandc_set_seed
-	adrp	x1, .LANCHOR2+385
-	mov	x2, x24
-	mov	x3, x23
-	mov	w0, 1
-	ldrb	w1, [x1,#:lo12:.LANCHOR2+385]
-	bl	nandc_xfer_start
-	bl	nandc_xfer_done
-	str	w22, [x19,2056]
-	mov	w0, w26
-	bl	nandc_de_cs
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 80
-	ret
-	.size	flash_start_tlc_page_prog, .-flash_start_tlc_page_prog
-	.align	2
-	.type	queue_tlc_prog_cmd, %function
-queue_tlc_prog_cmd:
-	stp	x29, x30, [sp, -48]!
-	mov	w1, 1
-	mov	w2, 26
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
+	str	x21, [sp,32]
 	mov	x19, x0
 	ldr	x6, [x0]
 	ldr	w20, [x6,40]
@@ -12589,7 +13255,7 @@ queue_tlc_prog_cmd:
 	strb	w0, [x1]
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 3861
+	add	x0, x0, 2835
 	bl	buf_add_tail
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -12607,16 +13273,16 @@ sblk_tlc_prog_one_page:
 	mov	x20, x0
 	ldr	x0, [x0]
 	ldr	w21, [x0,40]
-.L2044:
+.L2194:
 	mov	w0, w21
 	mov	w1, 1
 	bl	queue_lun_state
 	mov	w19, w0
-	cbz	w0, .L2046
+	cbz	w0, .L2196
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2044
-.L2046:
+	b	.L2194
+.L2196:
 	mov	x0, x20
 	bl	queue_tlc_prog_cmd
 	ldr	x21, [sp,32]
@@ -12639,17 +13305,17 @@ sblk_xlc_prog_pages:
 	ldr	x0, [x0]
 	mov	w24, w2
 	ldr	w20, [x0,40]
-.L2048:
+.L2198:
 	mov	w0, w20
 	mov	w1, 1
 	bl	queue_lun_state
-	cbz	w0, .L2052
+	cbz	w0, .L2202
 	bl	queue_wait_first_req_completed
 	bl	queue_remove_completed_req
-	b	.L2048
-.L2052:
+	b	.L2198
+.L2202:
 	cmp	w24, 2
-	bne	.L2050
+	bne	.L2200
 	ldr	x6, [x19]
 	mov	w1, 1
 	ldr	x0, [x22]
@@ -12731,13 +13397,13 @@ sblk_xlc_prog_pages:
 	strb	w0, [x1]
 	adrp	x0, .LANCHOR0
 	add	x0, x0, :lo12:.LANCHOR0
-	add	x0, x0, 3861
+	add	x0, x0, 2835
 	bl	buf_add_tail
-	b	.L2051
-.L2050:
+	b	.L2201
+.L2200:
 	mov	x0, x19
 	bl	queue_tlc_prog_cmd
-.L2051:
+.L2201:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -12746,133 +13412,94 @@ sblk_xlc_prog_pages:
 	ret
 	.size	sblk_xlc_prog_pages, .-sblk_xlc_prog_pages
 	.align	2
-	.global	flash_prog_page_en
-	.type	flash_prog_page_en, %function
-flash_prog_page_en:
+	.global	flash_start_page_prog
+	.type	flash_start_page_prog, %function
+flash_start_page_prog:
 	stp	x29, x30, [sp, -96]!
-	adrp	x6, .LANCHOR0
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	uxtb	w21, w0
-	add	x0, x6, :lo12:.LANCHOR0
-	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
+	adrp	x22, .LANCHOR0
 	stp	x25, x26, [sp,64]
+	uxtb	w25, w0
+	add	x0, x22, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
 	stp	x27, x28, [sp,80]
-	mov	w20, w1
-	mov	x23, x2
-	ldrb	w0, [x0,98]
-	mov	x22, x3
-	mov	w24, w4
-	uxtb	w25, w5
-	cmp	w0, w21
-	ubfx	x28, x20, 24, 2
-	mov	x19, x6
-	bhi	.L2054
+	ubfx	x24, x1, 21, 3
+	mov	x27, x2
+	ldrb	w0, [x0,633]
+	mov	x26, x3
+	and	w20, w1, 2097151
+	ubfx	x23, x1, 24, 2
+	cmp	w0, w24
+	bhi	.L2204
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 699
+	add	x1, x1, 328
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 312
-	mov	w2, 473
-	bl	printk
-.L2054:
-	add	x2, x19, :lo12:.LANCHOR0
-	mov	w26, w20
-	add	x0, x2, x21, sxtw
-	ldrb	w27, [x0,200]
-	cbnz	w28, .L2055
-	ldrb	w0, [x2,97]
-	cbz	w0, .L2056
-	ldrb	w0, [x2,208]
-	cbz	w0, .L2055
-.L2056:
-	add	x6, x19, :lo12:.LANCHOR0
-	ldrh	w26, [x6,210]
-	ldrb	w1, [x6,208]
-	udiv	w2, w20, w26
-	mul	w26, w2, w26
-	sub	w0, w20, w26
-	cbz	w1, .L2057
-	add	w26, w26, w0, lsl 1
-	b	.L2055
-.L2057:
-	add	x6, x6, 212
-	ldrh	w0, [x6,w0,uxtw 1]
-	add	w26, w0, w26
-.L2055:
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 4, .L2058
-	adrp	x0, .LC152
-	mov	w1, w27
-	add	x0, x0, :lo12:.LC152
-	mov	w2, w20
 	bl	printk
-.L2058:
-	mov	w1, w26
-	mov	w0, w27
-	mov	x2, x23
-	mov	x3, x22
-	mov	w4, w24
-	bl	flash_prog_page
-	mov	w26, w0
-	cbz	w25, .L2059
-	adrp	x19, .LANCHOR4
-	mov	w0, w21
-	add	x25, x19, :lo12:.LANCHOR4
-	mov	w1, w20
-	mov	w4, w24
-	ldr	x2, [x25,1216]
-	ldr	x3, [x25,1224]
-	bl	flash_read_page_en
-	cmp	w0, 512
-	beq	.L2060
-	cmn	w0, #1
-	beq	.L2060
-	ldr	x0, [x25,1216]
-	ldr	w1, [x23]
-	ldr	w0, [x0]
-	cmp	w1, w0
-	bne	.L2060
-	ldr	x0, [x25,1224]
-	ldr	w1, [x22]
-	ldr	w0, [x0]
-	cmp	w1, w0
-	beq	.L2059
-.L2060:
-	add	x19, x19, :lo12:.LANCHOR4
-	mov	w2, 4
-	adrp	x0, .LC153
-	mov	w3, w2
-	add	x0, x0, :lo12:.LC153
-	ldr	x1, [x19,1224]
-	bl	rknand_print_hex
-	mov	w2, 4
-	adrp	x0, .LC154
-	ldr	x1, [x19,1216]
-	add	x0, x0, :lo12:.LC154
-	mov	w3, w2
-	bl	rknand_print_hex
-	b	.L2061
-.L2059:
-	cmn	w26, #1
-	mov	w0, w26
-	bne	.L2062
-.L2061:
-	adrp	x0, .LC155
+	bl	dump_stack
+.L2204:
+	add	x28, x22, :lo12:.LANCHOR0
+	add	x0, x28, x24, sxtw
+	ldrb	w21, [x0,736]
+	ldr	x19, [x28,536]
+	bl	nandc_rdy_status
+	cbnz	w0, .L2205
+	ldrb	w0, [x28,633]
+	cmp	w0, 1
+	bne	.L2206
+	bl	nandc_wait_flash_ready
+	b	.L2205
+.L2206:
+	mov	w0, w24
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC155
-	bl	printk
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 312
-	mov	w2, 499
-	bl	printk
-	mov	w0, -1
-.L2062:
+	mov	w2, 64
+	bl	flash_wait_device_ready_raw
+.L2205:
+	mov	w0, w21
+	bl	hynix_reconfig_rr_para
+	mov	w0, w21
+	bl	nandc_cs
+	cbnz	w23, .L2207
+	mov	w0, w20
+	bl	slc_phy_page_address_calc
+	mov	w20, w0
+	ldrb	w0, [x22,#:lo12:.LANCHOR0]
+	cbz	w0, .L2208
+	mov	w0, w21
+	bl	zftl_flash_enter_slc_mode
+	b	.L2208
+.L2207:
+	mov	w0, w21
+	bl	zftl_flash_exit_slc_mode
+.L2208:
+	ubfiz	x4, x21, 8, 8
+	mov	w0, 128
+	add	x19, x19, x4
+	str	w0, [x19,2056]
+	and	w0, w20, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w20, 8
+	str	w0, [x19,2052]
+	lsr	w0, w20, 16
+	str	w0, [x19,2052]
+	mov	w0, w20
+	bl	nandc_set_seed
+	adrp	x1, .LANCHOR2+385
+	mov	x2, x27
+	mov	x3, x26
+	mov	w0, 1
+	ldrb	w1, [x1,#:lo12:.LANCHOR2+385]
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	w25, [x19,2056]
+	mov	w0, w21
+	bl	nandc_de_cs
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -12880,138 +13507,390 @@ flash_prog_page_en:
 	ldp	x27, x28, [sp,80]
 	ldp	x29, x30, [sp], 96
 	ret
-	.size	flash_prog_page_en, .-flash_prog_page_en
+	.size	flash_start_page_prog, .-flash_start_page_prog
 	.align	2
-	.global	ftl_test_block
-	.type	ftl_test_block, %function
-ftl_test_block:
-	stp	x29, x30, [sp, -112]!
+	.type	queue_prog_cmd, %function
+queue_prog_cmd:
+	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
-	stp	x25, x26, [sp,64]
-	adrp	x25, .LANCHOR4
-	adrp	x26, .LANCHOR5
-	add	x25, x25, :lo12:.LANCHOR4
-	add	x26, x26, :lo12:.LANCHOR5
-	stp	x27, x28, [sp,80]
+	str	x19, [sp,16]
+	mov	x19, x0
+	mov	w0, 16
+	ldr	w1, [x19,40]
+	ldr	x2, [x19,8]
+	ldr	x3, [x19,24]
+	bl	flash_start_page_prog
+	adrp	x0, .LANCHOR0
+	ldr	w4, [x19,40]
+	add	x1, x0, :lo12:.LANCHOR0
+	ldrb	w2, [x1,2835]
+	cmp	w2, 255
+	beq	.L2213
+	ubfx	x4, x4, 21, 3
+	add	x1, x1, 784
+.L2215:
+	add	x3, x1, x2, lsl 6
+	ldr	w5, [x3,40]
+	ubfx	x5, x5, 21, 3
+	cmp	w4, w5
+	bne	.L2214
+	ldrb	w5, [x3,58]
+	add	x3, x3, 48
+	cmp	w5, 6
+	bne	.L2214
+	mov	w1, 3
+	strb	w1, [x3,10]
+	b	.L2213
+.L2214:
+	lsl	x2, x2, 6
+	ldrb	w2, [x1,x2]
+	cmp	w2, 255
+	bne	.L2215
+.L2213:
+	mov	w1, 3
+	strb	w1, [x19,58]
+	mov	w1, 1
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x19,59]
+	mov	w1, -1
+	add	x0, x0, 2835
+	strb	w1, [x19]
+	mov	x1, x19
+	bl	buf_add_tail
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	queue_prog_cmd, .-queue_prog_cmd
+	.align	2
+	.global	sblk_prog_page
+	.type	sblk_prog_page, %function
+sblk_prog_page:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	stp	x19, x20, [sp,16]
-	mov	w27, 0
-	adrp	x28, .LC156
-	uxth	w23, w0
-	str	wzr, [x26,256]
-	add	x0, x25, 1280
-	str	wzr, [x25,1280]
-	mov	w21, w27
-	add	x28, x28, :lo12:.LC156
-	str	x0, [x29,104]
-	add	x26, x26, 256
-.L2076:
-	adrp	x20, .LANCHOR0
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x0,3326]
-	cmp	w1, w21
-	bls	.L2085
-	mov	w24, 0
-.L2086:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x0,3312]
-	cmp	w0, w24
-	bls	.L2101
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	uxtb	w20, w1
+	ldrh	w0, [x0,50]
+	cbz	w0, .L2221
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2077
-	mov	x0, x28
-	mov	w1, w23
+	tbz	x0, 8, .L2221
+	adrp	x0, .LC163
+	ldr	w1, [x19,40]
+	add	x0, x0, :lo12:.LC163
+	mov	w2, w20
 	bl	printk
-.L2077:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrb	w19, [x0,3312]
-	madd	w19, w23, w19, w24
-	uxth	w19, w19
-	cbnz	w21, .L2078
-	ldr	x0, [x0,192]
-	ldrb	w0, [x0,47]
-	cmp	w0, w19
-	bcs	.L2079
-.L2078:
-	uxtb	w22, w21
-	mov	w1, w19
-	mov	w0, w22
-	bl	flash_check_bad_block
-	cbnz	w0, .L2079
-	add	x4, x20, :lo12:.LANCHOR0
-	mov	w0, w22
-	mov	w1, w27
-	str	x4, [x29,96]
-	ldrh	w3, [x4,3324]
-	mul	w25, w19, w3
-	mov	w2, w25
-	bl	flash_erase_block_en
-	ldr	x4, [x29,96]
-	cbz	w0, .L2080
-	ldrb	w0, [x4,3225]
-	cmp	w0, 2
-	bne	.L2100
-	ldrb	w0, [x4,97]
-	cbz	w0, .L2100
+.L2221:
+	adrp	x24, .LANCHOR0
+	adrp	x25, .LC0
+	add	x23, x24, :lo12:.LANCHOR0
+	mov	w21, 0
+	add	x27, x23, 784
+	add	x25, x25, :lo12:.LC0
+.L2222:
+	cbz	w20, .L2252
+	ldrb	w26, [x19]
+	ldr	w22, [x19,40]
+.L2223:
 	mov	w0, w22
 	mov	w1, 1
-	mov	w2, w25
-	bl	flash_erase_block_en
-	cbz	w0, .L2082
-	b	.L2100
-.L2080:
-	cbz	w27, .L2083
-.L2082:
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	w27, 1
-	ldrb	w0, [x0,3225]
-	add	w25, w25, w0, lsl 24
-.L2083:
-	add	x4, x20, :lo12:.LANCHOR0
-	ldr	x2, [x29,104]
-	mov	w0, w22
-	mov	w1, w25
-	mov	x3, x26
-	mov	w5, 1
-	ldrb	w4, [x4,2816]
-	bl	flash_prog_page_en
-	cbz	w0, .L2079
-.L2100:
-	mov	w0, w22
-	mov	w1, w19
-	bl	flash_mask_bad_block
-.L2079:
-	add	w24, w24, 1
-	uxth	w24, w24
-	b	.L2086
-.L2101:
-	add	w21, w21, 1
-	uxth	w21, w21
-	b	.L2076
-.L2085:
-	cbz	w27, .L2087
-	ldr	x0, [x0,64]
-	add	x23, x0, x23, uxth 2
-	ldrb	w0, [x23,2]
-	mov	w1, 2
-	bfi	w0, w1, 3, 2
-	strb	w0, [x23,2]
-.L2087:
+	bl	queue_lun_state
+	cbz	w0, .L2253
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2223
+.L2253:
+	cmp	w20, 1
+	beq	.L2225
+	add	x0, x24, :lo12:.LANCHOR0
+	ldrb	w0, [x0,781]
+	cbnz	w0, .L2226
+.L2225:
+	mov	x0, x19
+	bl	queue_prog_cmd
+	b	.L2227
+.L2226:
+	ldrb	w0, [x19]
+	ubfx	x28, x22, 21, 3
+	cmp	w0, 255
+	bne	.L2228
+	adrp	x1, .LANCHOR3
+	mov	w2, 546
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	x0, x25
+	add	x1, x1, 352
+	bl	printk
+	bl	dump_stack
+.L2228:
+	ldrb	w0, [x19]
+	add	x0, x27, x0, lsl 6
+	ldr	w4, [x0,40]
+	ubfx	x0, x4, 21, 3
+	cmp	w28, w0
+	bne	.L2229
+	ldrh	w3, [x23,3340]
+	mov	w1, 21
+	ldrb	w6, [x23,3338]
+	mov	w28, 1
+	sub	w1, w1, w3
+	lsr	w0, w22, w3
+	sub	w6, w6, #1
+	lsl	w1, w28, w1
+	sub	w1, w1, #1
+	lsl	w2, w28, w3
+	uxth	w7, w6
+	sub	w2, w2, #1
+	and	w5, w7, w0
+	lsr	w0, w4, w3
+	uxth	w1, w1
+	and	w3, w7, w0
+	and	w3, w1, w3
+	and	w0, w1, w5
+	cmp	w0, w3
+	uxth	w2, w2
+	beq	.L2229
+	and	w22, w2, w22
+	and	w2, w2, w4
+	cmp	w22, w2
+	bne	.L2229
+	cmp	w21, w6
+	beq	.L2229
+	ldr	w1, [x19,40]
+	mov	w0, 17
+	ldr	x2, [x19,8]
+	add	w21, w21, w28
+	ldr	x3, [x19,24]
+	bl	flash_start_page_prog
+	strb	w28, [x19,59]
+	mov	w0, 8
+	strb	w0, [x19,58]
+	mov	w0, -1
+	mov	x1, x19
+	strb	w0, [x19]
+	add	x0, x23, 2835
+	bl	buf_add_tail
+	b	.L2227
+.L2229:
+	mov	x0, x19
+	mov	w21, 0
+	bl	queue_prog_cmd
+.L2227:
+	subs	w20, w20, #1
+	beq	.L2252
+	add	x19, x24, :lo12:.LANCHOR0
+	sbfiz	x26, x26, 6, 32
+	add	x19, x19, 784
+	add	x19, x19, x26
+	b	.L2222
+.L2252:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 112
+	ldp	x29, x30, [sp], 96
 	ret
-	.size	ftl_test_block, .-ftl_test_block
+	.size	sblk_prog_page, .-sblk_prog_page
 	.align	2
-	.global	ftl_prog_page
-	.type	ftl_prog_page, %function
-ftl_prog_page:
+	.global	ftl_flush
+	.type	ftl_flush, %function
+ftl_flush:
+	stp	x29, x30, [sp, -32]!
+	adrp	x2, .LANCHOR0
+	add	x29, sp, 0
+	add	x0, x2, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	x19, x2
+	adrp	x20, .LANCHOR4
+	ldrb	w1, [x0,2857]
+	cbz	w1, .L2255
+	add	x2, x20, :lo12:.LANCHOR4
+	add	x0, x0, 784
+	ldrb	w2, [x2,1267]
+	add	x0, x0, x2, lsl 6
+	bl	sblk_prog_page
+.L2255:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w0, -1
+	strb	wzr, [x2,2857]
+	strb	w0, [x20,1267]
+	bl	sblk_wait_write_queue_completed
+	bl	ftl_write_completed
+	mov	w0, -1
+	bl	ftl_vpn_decrement
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_flush, .-ftl_flush
+	.align	2
+	.global	zftl_cache_flush
+	.type	zftl_cache_flush, %function
+zftl_cache_flush:
+	adrp	x0, .LANCHOR0+2857
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+2857]
+	cbz	w0, .L2259
+	bl	timer_get_time
+	adrp	x1, .LANCHOR4+1268
+	ldr	w1, [x1,#:lo12:.LANCHOR4+1268]
+	add	w1, w1, 100
+	cmp	w0, w1
+	bls	.L2259
+	bl	ftl_flush
+.L2259:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_cache_flush, .-zftl_cache_flush
+	.align	2
+	.global	flash_prog_page_en
+	.type	flash_prog_page_en, %function
+flash_prog_page_en:
+	stp	x29, x30, [sp, -96]!
+	adrp	x6, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x6, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w20, w1
+	mov	x23, x2
+	ldrb	w0, [x0,633]
+	mov	x22, x3
+	mov	w24, w4
+	uxtb	w25, w5
+	cmp	w0, w21
+	ubfx	x28, x20, 24, 2
+	mov	x19, x6
+	bhi	.L2264
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 473
+	add	x1, x1, 368
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2264:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w26, w20
+	add	x1, x0, x21, sxtw
+	ldrb	w27, [x1,736]
+	cbnz	w28, .L2265
+	adrp	x1, .LANCHOR0
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	cbz	w1, .L2266
+	ldrb	w0, [x0,1]
+	cbz	w0, .L2265
+.L2266:
+	add	x6, x19, :lo12:.LANCHOR0
+	ldrh	w26, [x6,2]
+	ldrb	w1, [x6,1]
+	udiv	w2, w20, w26
+	mul	w26, w2, w26
+	sub	w0, w20, w26
+	cbz	w1, .L2267
+	add	w26, w26, w0, lsl 1
+	b	.L2265
+.L2267:
+	add	x6, x6, 4
+	ldrh	w0, [x6,w0,uxtw 1]
+	add	w26, w0, w26
+.L2265:
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 4, .L2268
+	adrp	x0, .LC164
+	mov	w1, w27
+	add	x0, x0, :lo12:.LC164
+	mov	w2, w20
+	bl	printk
+.L2268:
+	mov	w1, w26
+	mov	w0, w27
+	mov	x2, x23
+	mov	x3, x22
+	mov	w4, w24
+	bl	flash_prog_page
+	mov	w26, w0
+	cbz	w25, .L2269
+	adrp	x19, .LANCHOR4
+	mov	w0, w21
+	add	x25, x19, :lo12:.LANCHOR4
+	mov	w1, w20
+	mov	w4, w24
+	ldr	x2, [x25,1248]
+	ldr	x3, [x25,1256]
+	bl	flash_read_page_en
+	cmp	w0, 512
+	beq	.L2270
+	cmn	w0, #1
+	beq	.L2270
+	ldr	x0, [x25,1248]
+	ldr	w1, [x23]
+	ldr	w0, [x0]
+	cmp	w1, w0
+	bne	.L2270
+	ldr	x0, [x25,1256]
+	ldr	w1, [x22]
+	ldr	w0, [x0]
+	cmp	w1, w0
+	beq	.L2269
+.L2270:
+	add	x19, x19, :lo12:.LANCHOR4
+	mov	w2, 4
+	adrp	x0, .LC165
+	mov	w3, w2
+	add	x0, x0, :lo12:.LC165
+	ldr	x1, [x19,1256]
+	bl	rknand_print_hex
+	mov	w2, 4
+	adrp	x0, .LC166
+	ldr	x1, [x19,1248]
+	add	x0, x0, :lo12:.LC166
+	mov	w3, w2
+	bl	rknand_print_hex
+	b	.L2271
+.L2269:
+	cmn	w26, #1
+	mov	w0, w26
+	bne	.L2272
+.L2271:
+	adrp	x0, .LC167
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC167
+	bl	printk
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 499
+	add	x1, x1, 368
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+	mov	w0, -1
+.L2272:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_prog_page_en, .-flash_prog_page_en
+	.align	2
+	.global	ftl_prog_page
+	.type	ftl_prog_page, %function
+ftl_prog_page:
 	stp	x29, x30, [sp, -64]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
@@ -13030,19 +13909,20 @@ ftl_prog_page:
 	bl	flash_prog_page_en
 	cmn	w0, #1
 	mov	w19, w0
-	bne	.L2103
+	bne	.L2286
 	adrp	x2, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x2, :lo12:.LANCHOR3
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 336
-	mov	w2, 2052
+	add	x1, x1, 392
+	mov	w2, 2151
 	bl	printk
-	adrp	x0, .LC155
+	bl	dump_stack
+	adrp	x0, .LC167
 	mov	w1, w20
-	add	x0, x0, :lo12:.LC155
+	add	x0, x0, :lo12:.LC167
 	bl	printk
-.L2103:
+.L2286:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x29, x30, [sp], 64
@@ -13057,7 +13937,7 @@ ftl_info_flush:
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
 	adrp	x21, .LANCHOR0
-	adrp	x22, .LANCHOR5
+	adrp	x22, .LANCHOR4
 	stp	x25, x26, [sp,64]
 	mov	w26, w0
 	add	x0, x21, :lo12:.LANCHOR0
@@ -13065,183 +13945,186 @@ ftl_info_flush:
 	stp	x19, x20, [sp,16]
 	stp	x27, x28, [sp,80]
 	adrp	x23, .LANCHOR3
-	add	x19, x22, :lo12:.LANCHOR5
-	ldrb	w2, [x0,2816]
-	adrp	x24, .LC157
+	add	x19, x22, :lo12:.LANCHOR4
+	ldrb	w2, [x0,2832]
+	adrp	x24, .LC168
 	add	x23, x23, :lo12:.LANCHOR3
-	add	x0, x19, 576
+	add	x0, x19, 1280
 	lsl	w2, w2, 1
 	mov	w25, 0
-	add	x24, x24, :lo12:.LC157
-	add	x23, x23, 352
+	add	x24, x24, :lo12:.LC168
+	add	x23, x23, 408
 	bl	ftl_memset
-.L2105:
+.L2288:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w27, [x19,832]
-	ldrh	w20, [x19,834]
-	ldr	x2, [x0,2848]
-	ldrh	w28, [x0,3324]
+	ldrb	w27, [x19,1536]
+	ldrh	w20, [x19,1538]
+	ldr	x2, [x0,2864]
+	ldrh	w28, [x0,3350]
 	ldr	w1, [x2,4]
 	add	w1, w1, 1
 	str	w1, [x2,4]
-	str	w26, [x19,576]
-	ldr	x3, [x0,2848]
+	str	w26, [x19,1280]
+	ldr	x3, [x0,2864]
 	ldr	w0, [x3,4]
-	str	w0, [x19,580]
+	str	w0, [x19,1284]
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2106
+	tbz	x0, 12, .L2289
 	ldr	w3, [x3,4]
 	mov	x0, x24
 	mov	w1, w27
 	mov	w2, w20
 	bl	printk
-.L2106:
+.L2289:
 	add	x1, x21, :lo12:.LANCHOR0
-	ldrh	w0, [x19,834]
-	ldrh	w1, [x1,3276]
+	ldrh	w0, [x19,1538]
+	ldrh	w1, [x1,3300]
 	cmp	w1, w0
-	bhi	.L2107
+	bhi	.L2290
 	adrp	x20, .LC0
 	add	x20, x20, :lo12:.LC0
-.L2112:
-	ldrb	w1, [x19,833]
+.L2295:
+	ldrb	w1, [x19,1537]
 	add	w1, w1, 1
 	uxtb	w1, w1
-	strb	w1, [x19,833]
+	strb	w1, [x19,1537]
 	cmp	w1, 7
-	bls	.L2108
+	bls	.L2291
 	mov	x1, 0
-.L2111:
+.L2294:
 	add	x0, x21, :lo12:.LANCHOR0
 	uxth	w25, w1
-	ldr	x2, [x0,192]
+	ldr	x2, [x0,728]
 	add	w0, w1, 8
 	add	x0, x2, x0, sxtw
 	ldrb	w2, [x0,32]
 	add	w0, w2, 127
 	uxtb	w0, w0
 	cmp	w0, 125
-	bhi	.L2109
-	mov	x0, x20
+	bhi	.L2292
 	mov	x1, x23
-	mov	w2, 672
+	mov	w2, 742
+	mov	x0, x20
 	bl	printk
-	b	.L2110
-.L2109:
+	bl	dump_stack
+	b	.L2293
+.L2292:
 	cmp	w2, 255
-	bne	.L2110
+	bne	.L2293
 	add	x1, x1, 1
 	cmp	x1, 8
-	bne	.L2111
+	bne	.L2294
 	mov	w25, w1
-.L2110:
-	strb	w25, [x19,833]
+.L2293:
+	strb	w25, [x19,1537]
 	mov	w25, 1
-.L2108:
+.L2291:
 	add	x27, x21, :lo12:.LANCHOR0
-	ldrb	w1, [x19,833]
-	ldr	x0, [x27,192]
+	ldrb	w1, [x19,1537]
+	ldr	x0, [x27,728]
 	add	x1, x0, x1
 	ldrb	w2, [x1,40]
-	strb	w2, [x19,832]
+	strb	w2, [x19,1536]
 	cmp	w2, 255
-	beq	.L2112
-	ldrh	w20, [x27,3324]
+	beq	.L2295
+	ldrh	w20, [x27,3350]
 	mov	w0, 0
 	mul	w20, w2, w20
 	mov	w1, w20
 	bl	flash_erase_block
-	ldrb	w4, [x27,2816]
+	ldrb	w4, [x27,2832]
 	mov	w1, w20
 	mov	w0, 0
-	add	x2, x19, 896
-	add	x3, x19, 576
+	add	x2, x19, 1600
+	add	x3, x19, 1280
 	add	w20, w20, 1
 	bl	ftl_prog_page
 	mov	w0, 1
-	strh	w0, [x19,834]
-	b	.L2113
-.L2107:
+	strh	w0, [x19,1538]
+	b	.L2296
+.L2290:
 	madd	w20, w27, w28, w20
-	cbnz	w0, .L2113
+	cbnz	w0, .L2296
 	mov	w1, w20
 	bl	flash_erase_block
-.L2113:
+.L2296:
 	add	x4, x21, :lo12:.LANCHOR0
 	mov	w1, w20
 	mov	w0, 0
-	add	x2, x19, 896
-	add	x3, x19, 576
-	ldrb	w4, [x4,2816]
+	add	x2, x19, 1600
+	add	x3, x19, 1280
+	ldrb	w4, [x4,2832]
 	bl	ftl_prog_page
 	cmn	w0, #1
-	ldrh	w1, [x19,834]
-	adrp	x0, .LANCHOR6
+	ldrh	w1, [x19,1538]
+	adrp	x0, .LANCHOR5
 	add	w1, w1, 1
-	strh	w1, [x19,834]
-	beq	.L2114
-	add	x1, x0, :lo12:.LANCHOR6
-	ldrb	w1, [x1,-128]
-	cbz	w1, .L2115
-.L2114:
-	add	x0, x0, :lo12:.LANCHOR6
-	strb	wzr, [x0,-128]
-	b	.L2105
-.L2115:
-	cbnz	w25, .L2116
-.L2124:
-	add	x22, x22, :lo12:.LANCHOR5
-	ldrb	w0, [x22,832]
+	strh	w1, [x19,1538]
+	beq	.L2297
+	add	x1, x0, :lo12:.LANCHOR5
+	ldrb	w1, [x1,576]
+	cbz	w1, .L2298
+.L2297:
+	add	x0, x0, :lo12:.LANCHOR5
+	strb	wzr, [x0,576]
+	b	.L2288
+.L2298:
+	cbnz	w25, .L2299
+.L2307:
+	add	x22, x22, :lo12:.LANCHOR4
+	ldrb	w0, [x22,1536]
 	cmp	w0, 255
-	bne	.L2118
+	bne	.L2301
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 708
-	add	x1, x1, 352
+	mov	w2, 778
+	add	x1, x1, 408
 	add	x0, x0, :lo12:.LC0
 	bl	printk
-	b	.L2118
-.L2116:
-	ldrb	w19, [x19,833]
+	bl	dump_stack
+	b	.L2301
+.L2299:
+	ldrb	w19, [x19,1537]
 	adrp	x20, .LANCHOR3
 	adrp	x23, .LC0
 	add	x20, x20, :lo12:.LANCHOR3
 	add	w19, w19, 1
 	add	x23, x23, :lo12:.LC0
-	add	x20, x20, 352
-.L2119:
+	add	x20, x20, 408
+.L2302:
 	cmp	w19, 7
-	bhi	.L2124
+	bhi	.L2307
 	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x1, [x0,192]
+	ldr	x1, [x0,728]
 	add	w0, w19, 8
 	add	x0, x1, x0, sxtw
 	ldrb	w24, [x0,32]
 	add	w0, w24, 127
 	uxtb	w0, w0
 	cmp	w0, 125
-	bhi	.L2120
-	mov	x0, x23
+	bhi	.L2303
 	mov	x1, x20
-	mov	w2, 701
+	mov	w2, 771
+	mov	x0, x23
 	bl	printk
-	b	.L2121
-.L2120:
+	bl	dump_stack
+	b	.L2304
+.L2303:
 	cmp	w24, 255
-	beq	.L2122
-.L2121:
+	beq	.L2305
+.L2304:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrh	w1, [x0,3324]
+	ldrh	w1, [x0,3350]
 	mov	w0, 0
 	mul	w1, w24, w1
 	bl	flash_erase_block
-.L2122:
+.L2305:
 	add	w19, w19, 1
 	uxth	w19, w19
-	b	.L2119
-.L2118:
+	b	.L2302
+.L2301:
 	mov	w0, 0
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -13260,53 +14143,53 @@ ftl_info_blk_init:
 	mov	w2, 16384
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	adrp	x19, .LANCHOR6
+	adrp	x19, .LANCHOR0
+	adrp	x20, .LANCHOR5
 	stp	x23, x24, [sp,48]
-	add	x23, x20, :lo12:.LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR6
+	add	x23, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR5
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	adrp	x21, .LANCHOR5
-	strb	w0, [x19,-128]
-	ldrh	w1, [x23,56]
-	add	x22, x21, :lo12:.LANCHOR5
-	add	x24, x22, 896
-	strb	w0, [x19,-126]
+	adrp	x21, .LANCHOR4
+	strb	w0, [x20,576]
+	ldrh	w1, [x23,576]
+	add	x22, x21, :lo12:.LANCHOR4
+	add	x24, x22, 1600
+	strb	w0, [x20,578]
 	mov	x0, x24
-	strb	wzr, [x19,-127]
+	strb	wzr, [x20,577]
 	add	x1, x24, x1, lsl 2
-	str	x1, [x23,2848]
+	str	x1, [x23,2864]
 	mov	w1, 0
-	str	x24, [x23,64]
-	adrp	x26, .LC158
+	str	x24, [x23,584]
+	adrp	x26, .LC169
 	adrp	x27, .LANCHOR2
 	bl	ftl_memset
-	add	x26, x26, :lo12:.LC158
-	sub	x0, x19, #64
+	add	x26, x26, :lo12:.LC169
+	add	x0, x20, 640
 	mov	w1, 0
 	mov	w2, 16384
-	mov	w19, 7
+	mov	w20, 7
 	bl	ftl_memset
-	strb	wzr, [x22,833]
-	ldr	x0, [x23,192]
-	add	x23, x22, 576
-	strh	wzr, [x22,834]
+	strb	wzr, [x22,1537]
+	ldr	x0, [x23,728]
+	add	x23, x22, 1280
+	strh	wzr, [x22,1538]
 	ldrb	w0, [x0,40]
-	strb	w0, [x22,832]
-.L2142:
-	add	x5, x20, :lo12:.LANCHOR0
-	add	w0, w19, 8
-	sxth	w25, w19
-	ldr	x1, [x5,192]
+	strb	w0, [x22,1536]
+.L2325:
+	add	x5, x19, :lo12:.LANCHOR0
+	add	w0, w20, 8
+	sxth	w25, w20
+	ldr	x1, [x5,728]
 	add	x0, x1, x0, sxtw
 	ldrb	w1, [x0,32]
 	cmp	w1, 255
-	beq	.L2138
-	ldrh	w22, [x5,3324]
+	beq	.L2321
+	ldrh	w22, [x5,3350]
 	mov	w0, 0
-	ldrb	w4, [x5,2816]
+	ldrb	w4, [x5,2832]
 	mov	x2, x24
 	mov	x3, x23
 	str	x5, [x29,104]
@@ -13316,168 +14199,133 @@ ftl_info_blk_init:
 	cmn	w0, #1
 	mov	w28, w0
 	ldr	x5, [x29,104]
-	bne	.L2139
-	ldrb	w4, [x5,2816]
+	bne	.L2322
+	ldrb	w4, [x5,2832]
 	mov	w0, 0
 	add	w1, w22, 1
 	mov	x2, x24
 	mov	x3, x23
 	bl	ftl_read_page
 	mov	w28, w0
-.L2139:
+.L2322:
 	ldr	w0, [x27,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2140
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	w1, w19
+	tbz	x0, 12, .L2323
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, w20
 	mov	w2, w28
-	mov	w3, 580
-	ldr	x4, [x0,2848]
+	mov	w3, 672
+	ldr	x4, [x0,2864]
 	mov	x0, x26
 	ldr	w4, [x4]
 	bl	printk
-.L2140:
+.L2323:
 	cmn	w28, #1
-	beq	.L2138
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,2848]
+	beq	.L2321
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2864]
 	ldr	w1, [x0]
 	mov	w0, 21574
 	movk	w0, 0x494c, lsl 16
 	cmp	w1, w0
-	beq	.L2155
-.L2138:
-	sub	w19, w19, #1
-	cmn	w19, #1
-	bne	.L2142
+	beq	.L2333
+.L2321:
+	sub	w20, w20, #1
+	cmn	w20, #1
+	bne	.L2325
 	mov	w25, 0
-	b	.L2141
-.L2155:
-	mov	w19, w25
-.L2141:
+	b	.L2324
+.L2333:
+	mov	w20, w25
+.L2324:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2143
-	add	x0, x20, :lo12:.LANCHOR0
-	mov	w1, w19
+	tbz	x0, 12, .L2326
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, w20
 	mov	w2, 4800
-	ldr	x3, [x0,2848]
-	adrp	x0, .LC159
-	add	x0, x0, :lo12:.LC159
+	ldr	x3, [x0,2864]
+	adrp	x0, .LC170
+	add	x0, x0, :lo12:.LC170
 	ldr	w3, [x3]
 	bl	printk
-.L2143:
-	cmn	w19, #1
-	bne	.L2144
-	add	x0, x21, :lo12:.LANCHOR5
+.L2326:
+	cmn	w20, #1
+	bne	.L2327
+	add	x0, x21, :lo12:.LANCHOR4
 	mov	w1, 0
-	add	x0, x0, 896
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x0, x0, 1600
 	mov	w2, 16384
-	add	x20, x20, :lo12:.LANCHOR0
 	bl	ftl_memset
+	ldr	x1, [x19,2864]
 	mov	w0, 21574
-	ldr	x1, [x20,2848]
 	movk	w0, 0x494c, lsl 16
 	str	w0, [x1]
-	mov	w0, w19
-	b	.L2145
-.L2144:
-	add	x26, x20, :lo12:.LANCHOR0
-	add	x23, x21, :lo12:.LANCHOR5
+	mov	w0, 9
+	movk	w0, 0x6, lsl 16
+	ldr	x1, [x19,2864]
+	str	w0, [x1,12]
+	mov	w0, w20
+	b	.L2328
+.L2327:
+	add	x26, x19, :lo12:.LANCHOR0
+	add	x23, x21, :lo12:.LANCHOR4
 	add	w0, w25, 8
-	add	x24, x23, 896
+	add	x24, x23, 1600
 	mov	x2, x24
 	mov	w4, 4
-	ldr	x1, [x26,192]
+	ldr	x1, [x26,728]
 	add	x0, x1, x0, sxtw
-	strb	w25, [x23,833]
-	add	x25, x23, 576
+	strb	w25, [x23,1537]
+	add	x25, x23, 1280
 	ldrb	w1, [x0,32]
 	mov	x3, x25
 	mov	w0, 0
-	strb	w1, [x23,832]
+	strb	w1, [x23,1536]
 	bl	flash_get_last_written_page
 	sxth	w22, w0
 	add	w0, w0, 1
-	uxth	w19, w0
-	ldrb	w0, [x23,832]
-	ldrh	w23, [x26,3324]
+	uxth	w20, w0
+	ldrb	w0, [x23,1536]
+	ldrh	w23, [x26,3350]
 	mul	w23, w0, w23
-.L2146:
-	tbnz	w22, #31, .L2151
-	add	x26, x20, :lo12:.LANCHOR0
+.L2329:
+	tbnz	w22, #31, .L2332
+	add	x26, x19, :lo12:.LANCHOR0
 	mov	w0, 0
 	add	w1, w22, w23
 	mov	x2, x24
 	mov	x3, x25
-	ldrb	w4, [x26,2816]
+	ldrb	w4, [x26,2832]
 	bl	ftl_read_page
 	cmn	w0, #1
-	beq	.L2147
-	ldr	x0, [x26,2848]
+	beq	.L2330
+	ldr	x0, [x26,2864]
 	ldr	w1, [x0]
 	mov	w0, 21574
 	movk	w0, 0x494c, lsl 16
 	cmp	w1, w0
-	bne	.L2147
-.L2151:
-	add	x20, x20, :lo12:.LANCHOR0
-	add	x21, x21, :lo12:.LANCHOR5
-	ldr	x0, [x20,2848]
-	strh	w19, [x21,834]
-	ldr	w2, [x0,16]
-	cmp	w2, 2048
-	bls	.L2149
-	lsr	w1, w2, 11
-	ldr	w3, [x0,20]
-	add	w3, w3, w1
-	sub	w1, w2, w1, lsl 11
-	str	w3, [x0,20]
-	str	w1, [x0,16]
-	b	.L2149
-.L2147:
+	bne	.L2330
+.L2332:
+	add	x21, x21, :lo12:.LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR0
+	strh	w20, [x21,1538]
+	bl	ftl_tmp_into_update
+	ldr	x1, [x19,2864]
+	ldr	w0, [x1,64]
+	add	w0, w0, 1
+	str	w0, [x1,64]
+	mov	w0, 0
+	bl	ftl_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	mov	w0, 0
+	b	.L2328
+.L2330:
 	sub	w22, w22, #1
 	sxth	w22, w22
-	b	.L2146
-.L2149:
-	ldr	w2, [x0,24]
-	cmp	w2, 2048
-	bls	.L2152
-	lsr	w1, w2, 11
-	ldr	w3, [x0,28]
-	add	w3, w3, w1
-	sub	w1, w2, w1, lsl 11
-	str	w3, [x0,28]
-	str	w1, [x0,24]
-.L2152:
-	ldr	w2, [x0,32]
-	cmp	w2, 1024
-	bls	.L2153
-	lsr	w1, w2, 10
-	ldr	w3, [x0,36]
-	add	w3, w3, w1
-	sub	w1, w2, w1, lsl 10
-	str	w3, [x0,36]
-	str	w1, [x0,32]
-.L2153:
-	ldr	w2, [x0,40]
-	cmp	w2, 1024
-	bls	.L2154
-	lsr	w1, w2, 10
-	ldr	w3, [x0,44]
-	add	w3, w3, w1
-	sub	w1, w2, w1, lsl 10
-	str	w3, [x0,44]
-	str	w1, [x0,40]
-.L2154:
-	ldr	w1, [x0,64]
-	add	w1, w1, 1
-	str	w1, [x0,64]
-	mov	w0, 0
-	bl	ftl_info_flush
-	mov	w0, 0
-	bl	ftl_info_flush
-	mov	w0, 0
-.L2145:
+	b	.L2329
+.L2328:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -13501,79 +14349,80 @@ ftl_ext_info_flush:
 	mov	w1, 100
 	udiv	w0, w0, w1
 	add	x1, x22, :lo12:.LANCHOR0
-	ldr	x1, [x1,80]
+	ldr	x1, [x1,608]
 	ldr	w3, [x1,520]
 	cmp	w0, w3
-	bls	.L2173
+	bls	.L2351
 	ldr	w2, [x1,12]
 	sub	w2, w2, w3
 	add	w2, w2, w0
 	str	w2, [x1,12]
-	b	.L2186
-.L2173:
-	bcs	.L2174
-.L2186:
+	b	.L2364
+.L2351:
+	bcs	.L2352
+.L2364:
 	str	w0, [x1,520]
-.L2174:
+.L2352:
 	adrp	x23, .LANCHOR3
-	adrp	x24, .LANCHOR6
+	adrp	x19, .LANCHOR4
 	add	x23, x23, :lo12:.LANCHOR3
-	add	x24, x24, :lo12:.LANCHOR6
+	add	x19, x19, :lo12:.LANCHOR4
 	mov	w0, 0
-	add	x23, x23, 368
-	sub	x25, x24, #64
+	add	x23, x23, 424
+	add	x19, x19, 1280
 	bl	ftl_total_vpn_update
-.L2175:
-	adrp	x19, .LANCHOR5
-	add	x19, x19, :lo12:.LANCHOR5
-	add	x19, x19, 576
-.L2178:
+.L2353:
+	adrp	x24, .LANCHOR5
+	add	x24, x24, :lo12:.LANCHOR5
+	add	x25, x24, 640
+.L2356:
 	add	x2, x22, :lo12:.LANCHOR0
-	ldr	x0, [x2,2848]
+	ldr	x0, [x2,2864]
 	ldr	w1, [x0,56]
 	add	w1, w1, 1
 	str	w1, [x0,56]
 	ldrh	w1, [x0,140]
-	ldrh	w0, [x2,3276]
+	ldrh	w0, [x2,3300]
 	cmp	w1, w0
-	bcc	.L2176
+	bcc	.L2354
 	bl	ftl_ext_alloc_new_blk
-.L2176:
+.L2354:
 	add	x0, x22, :lo12:.LANCHOR0
-	ldr	x0, [x0,2848]
+	ldr	x0, [x0,2864]
 	ldrh	w1, [x0,130]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L2177
+	bne	.L2355
 	adrp	x0, .LC0
 	mov	x1, x23
+	mov	w2, 1747
 	add	x0, x0, :lo12:.LC0
-	mov	w2, 1639
 	bl	printk
-.L2177:
+	bl	dump_stack
+.L2355:
 	add	x21, x22, :lo12:.LANCHOR0
 	mov	w0, 21
 	mov	w1, 1
-	ldr	x2, [x21,2848]
-	ldrh	w20, [x21,3314]
+	ldr	x2, [x21,2864]
+	ldrh	w20, [x21,3340]
 	ldrh	w3, [x2,130]
 	sub	w20, w0, w20
 	ldrh	w0, [x2,140]
 	asr	w26, w3, w20
 	lsl	w20, w1, w20
 	sub	w20, w20, #1
-	ldrb	w2, [x21,2816]
+	ldrb	w2, [x21,2832]
 	and	w3, w20, w3
-	ldrh	w20, [x21,3324]
+	ldrh	w20, [x21,3350]
 	mov	w1, 0
 	lsl	w2, w2, 1
 	madd	w20, w3, w20, w0
 	mov	x0, x19
 	bl	ftl_memset
 	str	wzr, [x19]
-	ldr	x0, [x21,2848]
+	ldr	x0, [x21,2864]
 	uxth	w20, w20
-	ldrb	w4, [x21,2816]
+	ldrb	w4, [x21,2832]
 	mov	w1, w20
 	mov	x2, x25
 	mov	x3, x19
@@ -13581,23 +14430,23 @@ ftl_ext_info_flush:
 	str	w0, [x19,4]
 	mov	w0, w26
 	bl	ftl_prog_page
-	ldr	x2, [x21,2848]
+	ldr	x2, [x21,2864]
 	ldrh	w1, [x2,140]
 	add	w1, w1, 1
 	uxth	w1, w1
 	strh	w1, [x2,140]
 	cmp	w1, 1
-	beq	.L2178
+	beq	.L2356
 	cmn	w0, #1
-	beq	.L2179
-	ldrb	w0, [x24,-126]
-	cbz	w0, .L2180
-.L2179:
-	adrp	x0, .LANCHOR6
-	add	x0, x0, :lo12:.LANCHOR6
-	strb	wzr, [x0,-126]
-	b	.L2175
-.L2180:
+	beq	.L2357
+	ldrb	w0, [x24,578]
+	cbz	w0, .L2358
+.L2357:
+	adrp	x0, .LANCHOR5
+	add	x0, x0, :lo12:.LANCHOR5
+	strb	wzr, [x0,578]
+	b	.L2353
+.L2358:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -13615,100 +14464,107 @@ ftl_ext_info_init:
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
 	str	x27, [sp,80]
-	add	x1, x19, :lo12:.LANCHOR0
-	mov	w20, 1
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	strh	wzr, [x1,3856]
-	adrp	x21, .LANCHOR6
-	ldr	x0, [x1,2848]
-	adrp	x22, .LANCHOR5
-	ldrh	w23, [x1,3314]
-	mov	w1, 21
-	add	x2, x21, :lo12:.LANCHOR6
-	add	x3, x22, :lo12:.LANCHOR5
-	ldrh	w0, [x0,130]
-	sub	w23, w1, w23
-	lsl	w20, w20, w23
-	sub	x2, x2, #64
-	asr	w23, w0, w23
-	sub	w20, w20, #1
-	and	w20, w20, w0
-	add	x3, x3, 576
-	uxtb	w23, w23
-	mov	w1, w20
-	mov	w0, w23
+	add	x26, x19, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR5
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR4
+	add	x2, x20, :lo12:.LANCHOR5
+	ldr	x0, [x26,2864]
+	add	x3, x21, :lo12:.LANCHOR4
+	ldrh	w22, [x26,3340]
+	add	x2, x2, 640
+	add	x3, x3, 1280
+	strh	wzr, [x26,3888]
+	ldrh	w1, [x0,130]
+	mov	w0, 21
+	sub	w22, w0, w22
+	mov	w0, 1
+	asr	w27, w1, w22
+	lsl	w22, w0, w22
+	sub	w22, w22, #1
+	and	w22, w22, w1
+	uxtb	w25, w27
+	mov	w0, w25
+	mov	w1, w22
 	bl	flash_get_last_written_page
-	sxth	w25, w0
+	sxth	w24, w0
 	adrp	x0, .LANCHOR2
-	mov	w24, w25
+	mov	w23, w24
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2188
+	tbz	x0, 12, .L2366
+	ldr	x5, [x26,2864]
 	adrp	x1, .LANCHOR3
-	adrp	x0, .LC108
+	adrp	x0, .LC171
 	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC108
-	add	x1, x1, 392
-	mov	w2, 1683
-	mov	w3, w25
+	add	x0, x0, :lo12:.LC171
+	add	x1, x1, 448
+	ldrh	w5, [x5,130]
+	mov	w2, 1791
+	mov	w3, w24
+	uxth	w4, w27
 	bl	printk
-.L2188:
-	add	x21, x21, :lo12:.LANCHOR6
-	add	x22, x22, :lo12:.LANCHOR5
-	mov	w26, w25
-	sub	x21, x21, #64
-	add	x22, x22, 576
-.L2189:
-	tbnz	w26, #31, .L2194
+.L2366:
+	add	x20, x20, :lo12:.LANCHOR5
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w26, w24
+	add	x20, x20, 640
+	add	x21, x21, 1280
+.L2367:
+	tbnz	w26, #31, .L2372
 	add	x27, x19, :lo12:.LANCHOR0
-	mov	w0, w23
-	mov	x2, x21
-	mov	x3, x22
-	ldrh	w1, [x27,3324]
-	ldrb	w4, [x27,2816]
-	madd	w1, w20, w1, w26
+	mov	w0, w25
+	mov	x2, x20
+	mov	x3, x21
+	ldrh	w1, [x27,3350]
+	ldrb	w4, [x27,2832]
+	madd	w1, w22, w1, w26
 	bl	flash_read_page_en
 	cmp	w0, 512
-	beq	.L2190
+	beq	.L2368
 	cmn	w0, #1
-	beq	.L2190
-	ldr	x0, [x27,80]
+	beq	.L2368
+	ldr	x0, [x27,608]
 	ldr	w1, [x0]
 	mov	w0, 20038
 	movk	w0, 0x4549, lsl 16
 	cmp	w1, w0
-	bne	.L2190
-.L2194:
+	bne	.L2368
+.L2372:
 	bl	zftl_sblk_list_init
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2848]
+	ldr	x0, [x0,2864]
 	ldrh	w1, [x0,140]
-	cmp	w1, w25
-	bgt	.L2192
-	add	w24, w24, 1
-	strh	w24, [x0,140]
+	cmp	w1, w24
+	bgt	.L2370
+	add	w23, w23, 1
+	strh	w23, [x0,140]
 	bl	ftl_ext_info_flush
-	b	.L2192
-.L2190:
+	b	.L2370
+.L2368:
 	sub	w26, w26, #1
 	sxth	w26, w26
-	b	.L2189
-.L2192:
+	b	.L2367
+.L2370:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x20, [x19,80]
+	ldr	x20, [x19,608]
 	bl	timer_get_time
 	mov	w1, 100
 	udiv	w0, w0, w1
 	str	w0, [x20,520]
-	ldr	x20, [x19,80]
+	ldr	x20, [x19,608]
 	bl	timer_get_time
 	str	w0, [x20,604]
-	ldr	x0, [x19,80]
-	str	wzr, [x0,608]
+	ldr	x1, [x19,608]
 	mov	w0, -1
-	strh	w0, [x19,3858]
+	strh	w0, [x19,3224]
+	strh	w0, [x1,584]
+	strh	w0, [x1,586]
+	strh	w0, [x1,588]
+	strh	w0, [x1,590]
 	mov	w0, 0
+	str	wzr, [x1,608]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -13718,5651 +14574,4526 @@ ftl_ext_info_init:
 	ret
 	.size	ftl_ext_info_init, .-ftl_ext_info_init
 	.align	2
-	.global	ftl_low_format
-	.type	ftl_low_format, %function
-ftl_low_format:
-	stp	x29, x30, [sp, -128]!
+	.global	ftl_prog_ppa_page
+	.type	ftl_prog_ppa_page, %function
+ftl_prog_ppa_page:
+	stp	x29, x30, [sp, -16]!
+	mov	w5, w0
+	mov	x7, x1
+	mov	x6, x2
+	add	x29, sp, 0
+	mov	w4, w3
+	ubfx	x0, x5, 21, 3
+	and	w1, w5, 2097151
+	mov	x2, x7
+	mov	x3, x6
+	bl	ftl_prog_page
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_prog_ppa_page, .-ftl_prog_ppa_page
+	.align	2
+	.global	ftl_write_last_log_page
+	.type	ftl_write_last_log_page, %function
+ftl_write_last_log_page:
+	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR3
 	stp	x21, x22, [sp,32]
-	add	x20, x20, :lo12:.LANCHOR3
-	adrp	x22, .LC0
+	stp	x19, x20, [sp,16]
 	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	mov	w21, 8
-	adrp	x24, .LANCHOR0
-	add	x22, x22, :lo12:.LC0
-	add	x20, x20, 416
-.L2207:
-	add	x0, x24, :lo12:.LANCHOR0
 	adrp	x19, .LANCHOR0
-	ldr	x0, [x0,192]
-	add	x0, x0, x21, sxtw
-	ldrb	w23, [x0,32]
-	add	w0, w23, 127
-	uxtb	w0, w0
-	cmp	w0, 125
-	bhi	.L2205
+	mov	w21, -1
+	ldrh	w1, [x0,6]
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w24, [x0,12]
+	cmp	w1, 1
+	ldr	x22, [x19,3872]
+	bne	.L2384
+	mov	x20, x0
+	bl	ftl_get_new_free_page
+	cmn	w0, #1
+	mov	w23, w0
+	mov	w21, 0
+	beq	.L2384
+	ldrh	w0, [x20]
+	add	x22, x22, x24, uxth 2
+	bl	ftl_vpn_decrement
+	adrp	x1, .LANCHOR6
+	mov	w0, 15555
+	add	x1, x1, :lo12:.LANCHOR6
+	movk	w0, 0xf55f, lsl 16
+	add	x2, x1, 3968
+	str	x2, [x29,72]
+	str	w0, [x1,3968]
+	ldrb	w0, [x19,3276]
+	ldrh	w1, [x19,3300]
+	mul	w1, w1, w0
 	mov	x0, x22
-	mov	x1, x20
-	mov	w2, 1854
-	bl	printk
-.L2205:
-	cmp	w23, 255
-	beq	.L2206
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0,3324]
-	mov	w0, 0
-	mul	w1, w23, w1
-	bl	flash_erase_block
-.L2206:
-	add	w21, w21, 1
-	cmp	w21, 16
-	bne	.L2207
-	bl	sblk_init
-	bl	ftl_info_blk_init
-	adrp	x0, .LANCHOR5
-	mov	w1, 0
-	add	x0, x0, :lo12:.LANCHOR5
-	mov	w2, 16384
-	add	x0, x0, 896
-	bl	ftl_memset
-	add	x1, x19, :lo12:.LANCHOR0
-	mov	w6, 1
-	ldr	x0, [x1,2848]
-	ldrh	w5, [x1,56]
-	ldrh	w0, [x0,134]
-.L2208:
-	cmp	w0, w5
-	bcs	.L2242
-	add	x4, x19, :lo12:.LANCHOR0
-	ubfiz	x1, x0, 2, 16
-	add	w0, w0, 1
-	ldr	x2, [x4,64]
-	uxth	w0, w0
-	add	x2, x2, x1
-	ldrb	w3, [x2,2]
-	and	w3, w3, 31
-	strb	w3, [x2,2]
-	ldr	x2, [x4,64]
-	add	x1, x2, x1
-	ldrb	w2, [x1,2]
-	bfi	w2, w6, 3, 2
-	strb	w2, [x1,2]
-	b	.L2208
-.L2242:
-	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, 21574
-	movk	w1, 0x494c, lsl 16
-	mov	w20, 0
-	adrp	x24, .LANCHOR7
-	mov	w25, 1
-	ldr	x2, [x0,2848]
-	str	w1, [x2]
-	ldr	x0, [x0,2848]
-	strh	wzr, [x0,148]
-.L2210:
-	add	x21, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x21,56]
-	cmp	w0, w20
-	bls	.L2243
-	add	x0, x24, :lo12:.LANCHOR7
-	mov	w27, 0
-	ubfiz	x22, x20, 2, 16
-	mov	w23, w27
-	strh	w20, [x0,3264]
-	mov	w0, w20
-	bl	ftl_test_block
-	ldrb	w28, [x21,3312]
-	ldrb	w4, [x21,3326]
-	mov	w21, w27
-	mul	w6, w20, w28
-	uxth	w5, w28
-.L2211:
-	cmp	w21, w4
-	bcs	.L2215
-	mov	x26, 0
-.L2216:
-	cmp	w5, w26, uxth
-	bls	.L2244
-	add	w1, w6, w26
+	lsl	w1, w1, 2
+	bl	js_hash
+	ldr	x2, [x29,72]
+	mov	x1, x22
+	ldrb	w3, [x19,2832]
+	str	w0, [x2,4]
+	mov	w0, w23
+	str	w21, [x2,8]
+	str	w21, [x2,12]
+	bl	ftl_prog_ppa_page
+.L2384:
 	mov	w0, w21
-	str	x5, [x29,104]
-	str	x4, [x29,112]
-	str	x6, [x29,120]
-	bl	flash_check_bad_block
-	ldr	x6, [x29,120]
-	ldr	x4, [x29,112]
-	ldr	x5, [x29,104]
-	cbz	w0, .L2212
-	add	x3, x19, :lo12:.LANCHOR0
-	add	w1, w27, w26
-	lsl	w1, w25, w1
-	ldr	x0, [x3,64]
-	add	x0, x0, x22
-	ldrb	w2, [x0,3]
-	orr	w1, w1, w2
-	strb	w1, [x0,3]
-	ldr	x1, [x3,2848]
-	ldrh	w0, [x1,148]
-	add	w0, w0, 1
-	strh	w0, [x1,148]
-	b	.L2213
-.L2212:
-	add	w23, w23, 1
-	uxth	w23, w23
-.L2213:
-	add	x26, x26, 1
-	b	.L2216
-.L2244:
-	add	w21, w21, 1
-	add	w27, w27, w28
-	uxth	w21, w21
-	b	.L2211
-.L2215:
-	cbnz	w23, .L2217
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,64]
-	add	x22, x0, x22
-	ldrb	w0, [x22,2]
-	orr	w0, w0, -32
-	strb	w0, [x22,2]
-.L2217:
-	add	w20, w20, 1
-	uxth	w20, w20
-	b	.L2210
-.L2243:
-	adrp	x0, .LANCHOR6
-	mov	w1, 0
-	add	x0, x0, :lo12:.LANCHOR6
-	mov	w2, 16384
-	sub	x0, x0, #64
-	bl	ftl_memset
-	ldr	x1, [x21,80]
-	mov	w0, 20038
-	movk	w0, 0x4549, lsl 16
-	mov	w6, 3
-	mov	w7, 15
-	str	w0, [x1]
-	mov	x1, 0
-	ldr	x0, [x21,192]
-	ldrb	w4, [x21,3312]
-	ldrb	w20, [x0,47]
-	udiv	w20, w20, w4
-	add	w20, w20, 1
-.L2221:
-	add	x3, x19, :lo12:.LANCHOR0
-	lsl	x0, x1, 2
-	cmp	w4, 1
-	csinc	w5, w6, wzr, ne
-	cmp	w4, 4
-	ldr	x2, [x3,64]
-	add	x2, x2, x0
-	strb	w5, [x2,3]
-	bne	.L2220
-	ldr	x2, [x3,64]
-	add	x2, x2, x0
-	strb	w7, [x2,3]
-.L2220:
-	add	x2, x19, :lo12:.LANCHOR0
-	add	x1, x1, 1
-	cmp	w20, w1, uxth
-	ldr	x5, [x2,2848]
-	ldrh	w3, [x5,148]
-	add	w3, w4, w3
-	strh	w3, [x5,148]
-	ldr	x3, [x2,64]
-	add	x0, x3, x0
-	ldrb	w3, [x0,2]
-	orr	w3, w3, -32
-	strb	w3, [x0,2]
-	bhi	.L2221
-	mov	w0, 16
-	sdiv	w4, w0, w4
-	ldr	x0, [x2,2848]
-	add	w4, w20, w4
-	uxth	w4, w4
-	strh	w4, [x0,134]
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2222
-	adrp	x0, .LC160
-	mov	w1, 1901
-	add	x0, x0, :lo12:.LC160
-	mov	w2, 128
-	mov	w3, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	ftl_write_last_log_page, .-ftl_write_last_log_page
+	.align	2
+	.global	ftl_open_sblk_recovery
+	.type	ftl_open_sblk_recovery, %function
+ftl_open_sblk_recovery:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x24, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	x27, x1
+	tbz	x0, 12, .L2389
+	adrp	x0, .LC172
+	ldrh	w1, [x19,2]
+	add	x0, x0, :lo12:.LC172
 	bl	printk
-.L2222:
-	add	x21, x19, :lo12:.LANCHOR0
-	mov	w1, 255
-	mov	w2, 128
-	ldr	x0, [x21,2848]
-	add	x0, x0, 160
-	bl	ftl_memset
-	ldrb	w8, [x21,3312]
-	mov	w10, 21
-	ldrh	w0, [x21,3314]
-	ldrb	w13, [x21,3326]
-	uxth	w9, w8
-	sub	w10, w10, w0
-	mov	w0, 0
-	mul	w11, w20, w9
-	mov	w22, w0
-	uxth	w11, w11
-.L2223:
-	add	x21, x19, :lo12:.LANCHOR0
-	ldr	x1, [x21,2848]
-	ldrh	w1, [x1,134]
-	cmp	w1, w20
-	bls	.L2245
-	ldr	x2, [x21,64]
-	ubfiz	x1, x20, 2, 16
-	add	w6, w0, w11
-	mov	w5, 0
-	add	x2, x2, x1
-	mov	w4, w5
-	uxth	w6, w6
-	ldrb	w3, [x2,2]
-	orr	w3, w3, -32
-	strb	w3, [x2,2]
-	ldr	x2, [x21,64]
-	ldr	x14, [x21,2848]
-	add	x1, x2, x1
-.L2224:
-	cmp	w13, w4, uxth
-	bls	.L2228
-	lsl	w12, w4, w10
-	mov	x3, 0
-	uxth	w12, w12
-.L2229:
-	uxth	w2, w3
-	cmp	w2, w9
-	bcs	.L2246
-	ldrb	w7, [x1,3]
-	add	w15, w5, w3
-	asr	w7, w7, w15
-	tbnz	x7, 0, .L2225
-	cmp	w8, 1
-	mov	w7, w6
-	bls	.L2226
-	and	w2, w2, 1
-	add	w2, w6, w2
-	uxth	w7, w2
-.L2226:
-	add	x15, x14, x22, sxtw 1
+.L2389:
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2390
+	adrp	x0, .LC173
+	ldrb	w1, [x19,5]
+	add	x0, x0, :lo12:.LC173
+	bl	printk
+.L2390:
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2391
+	adrp	x0, .LC174
+	ldrh	w1, [x19]
+	add	x0, x0, :lo12:.LC174
+	bl	printk
+.L2391:
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2392
+	adrp	x0, .LC175
+	ldrh	w1, [x19,16]
+	ldrh	w2, [x19,18]
+	add	x0, x0, :lo12:.LC175
+	bl	printk
+.L2392:
+	ldrh	w0, [x19,10]
+	adrp	x21, .LANCHOR0
+	strh	w0, [x19,14]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x19]
+	ldrh	w0, [x0,576]
+	cmp	w1, w0
+	bcs	.L2388
+	mov	w0, 1
+	adrp	x25, .LANCHOR4
+	adrp	x26, .LANCHOR3
+	add	x25, x25, :lo12:.LANCHOR4
+	bl	buf_alloc
+	add	x26, x26, :lo12:.LANCHOR3
+	ldrb	w22, [x19,5]
+	mov	x20, x0
+	ldrh	w23, [x19,2]
+	add	x0, x26, 472
+	mov	w28, 0
+	add	x25, x25, 1280
+	str	x0, [x29,120]
+.L2395:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3300]
+	cmp	w0, w23
+	bls	.L2398
+	ldrb	w22, [x19,5]
+.L2396:
+	ldrb	w0, [x19,9]
+	cmp	w0, w22
+	bls	.L2472
+	add	x0, x19, x22, sxtw 1
+	ldrh	w0, [x0,16]
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L2397
+	add	x3, x21, :lo12:.LANCHOR0
+	ldr	x2, [x20,24]
+	ldrh	w1, [x3,3350]
+	ldrb	w3, [x3,2832]
+	madd	w0, w0, w1, w23
+	ldr	x1, [x20,8]
+	bl	ftl_read_ppa_page
+	cmp	w0, 512
+	mov	w26, w0
+	beq	.L2398
+	cmn	w0, #1
+	beq	.L2399
+	ldr	x0, [x20,24]
+	ldr	w1, [x0]
+	cmn	w1, #1
+	bne	.L2399
+	ldr	w0, [x0,4]
+	cmn	w0, #1
+	bne	.L2399
+	ldr	x0, [x20,8]
+	ldr	w0, [x0]
+	cmn	w0, #1
+	beq	.L2398
+.L2399:
+	adrp	x0, .LANCHOR5+577
+	mov	w1, 1
+	strb	w1, [x0,#:lo12:.LANCHOR5+577]
+	ldrb	w0, [x19,9]
+	ldrh	w1, [x19,10]
+	madd	w0, w23, w0, w22
+	cmp	w1, w0
+	beq	.L2400
+	adrp	x0, .LC0
+	ldr	x1, [x29,120]
+	mov	w2, 1396
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2400:
+	ldrh	w0, [x19,10]
+	ldrh	w1, [x19,6]
+	ldrb	w2, [x19,9]
+	add	w1, w1, w0
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3300]
+	mul	w0, w0, w2
+	cmp	w1, w0
+	beq	.L2401
+	adrp	x0, .LC0
+	ldr	x1, [x29,120]
+	mov	w2, 1397
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2401:
+	cmn	w26, #1
+	beq	.L2405
+	ldr	x0, [x20,24]
+	ldr	w0, [x0,4]
+	cmn	w0, #1
+	beq	.L2405
+	bl	lpa_hash_get_ppa
+	cbz	x27, .L2403
+	ldr	x2, [x20,24]
+	ldr	w3, [x2,8]
+	cmp	w0, w3
+	beq	.L2403
+	cmn	w0, #1
+	beq	.L2403
+	add	x4, x21, :lo12:.LANCHOR0
+	mov	w5, 21
+	mov	w28, 1
+	ldrh	w3, [x4,3340]
+	lsr	w1, w0, w3
+	sub	w3, w5, w3
+	lsl	w3, w28, w3
+	sub	w3, w3, #1
+	and	w3, w1, w3
+	ldrb	w1, [x4,3338]
+	udiv	w3, w3, w1
+	ldrh	w1, [x27]
+	cmp	w1, w3, uxth
+	bne	.L2403
+	ldr	w6, [x2]
+	mov	x2, x25
+	ldrb	w3, [x4,2832]
+	ldr	x1, [x20,8]
+	str	x5, [x29,96]
+	str	x6, [x29,104]
+	str	x4, [x29,112]
+	bl	ftl_read_ppa_page
+	ldr	w0, [x25]
+	ldr	x6, [x29,104]
+	ldr	x4, [x29,112]
+	cmp	w0, w6
+	ldr	x5, [x29,96]
+	bcc	.L2403
+	ldr	x0, [x20,24]
+	ldr	w1, [x0,8]
+	cmn	w1, #1
+	beq	.L2405
+	ldrh	w0, [x4,3340]
+	sub	w5, w5, w0
+	lsr	w1, w1, w0
+	lsl	w28, w28, w5
+	ldrb	w0, [x4,3338]
+	sub	w28, w28, #1
+	and	w1, w28, w1
+	udiv	w0, w1, w0
+	bl	ftl_vpn_decrement
+	b	.L2405
+.L2403:
+	ldr	x2, [x20,24]
+	add	x1, x21, :lo12:.LANCHOR0
+	ldr	w3, [x2,4]
+	ldr	w0, [x1,2840]
+	cmp	w3, w0
+	bcs	.L2405
+	ldrb	w0, [x19,9]
+	ldrh	w4, [x1,3300]
+	ldrh	w3, [x19,10]
+	mul	w0, w0, w4
+	sub	w0, w0, #1
+	cmp	w3, w0
+	blt	.L2473
+.L2405:
+	ldrh	w0, [x19,6]
+	mov	w28, 1
+	sub	w0, w0, #1
+	strh	w0, [x19,6]
+	ldrh	w0, [x19,10]
+	add	w0, w0, 1
+	strh	w0, [x19,10]
+.L2397:
 	add	w22, w22, 1
-	add	w2, w7, w12
-	strh	w2, [x15,160]
 	uxth	w22, w22
-.L2225:
-	add	x3, x3, 1
-	b	.L2229
-.L2246:
-	add	w4, w4, 1
-	add	w5, w5, w8
-	b	.L2224
-.L2228:
-	add	w20, w20, 1
-	add	w0, w0, w9
-	uxth	w20, w20
-	uxth	w0, w0
-	b	.L2223
-.L2245:
-	ldrh	w2, [x21,56]
-	mov	w1, 0
-	ldr	x0, [x21,72]
-	lsl	w2, w2, 1
-	bl	ftl_memset
-	bl	zftl_sblk_list_init
-	ldr	x0, [x21,2848]
-	ldrh	w1, [x21,56]
-	ldrh	w2, [x0,134]
-	strh	w22, [x0,112]
-	sub	w1, w1, w2
-	strh	wzr, [x0,114]
-	strh	w1, [x0,116]
-	strh	wzr, [x0,118]
-	mov	w0, 1
-	bl	ftl_alloc_sblk
-	mov	w22, w0
-	mov	w1, 0
-	bl	ftl_erase_sblk
-	ldr	x1, [x21,2848]
-	mov	w0, w22
-	add	x1, x1, 672
-	bl	ftl_get_blk_list_in_sblk
-	ldr	x0, [x21,2848]
-	ldrh	w20, [x0,672]
-	strh	wzr, [x0,690]
-	mov	w0, 65533
-	sub	w1, w20, #1
-	cmp	w0, w1, uxth
-	bcs	.L2231
+	b	.L2396
+.L2472:
+	add	w23, w23, 1
+	strb	wzr, [x19,5]
+	uxth	w23, w23
+	b	.L2395
+.L2398:
+	add	x2, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x19,10]
+	ldrh	w1, [x19,6]
+	strh	w23, [x19,2]
+	add	w1, w1, w0
+	ldrh	w2, [x2,3300]
+	ldrb	w0, [x19,9]
+	strb	w22, [x19,5]
+	mul	w0, w0, w2
+	cmp	w1, w0
+	beq	.L2409
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1473
+	add	x1, x1, 472
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 416
-	mov	w2, 1932
 	bl	printk
-.L2231:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w1, 255
-	mov	w2, 256
-	ldr	x0, [x19,2848]
-	add	x0, x0, 416
-	strh	wzr, [x0,280]
-	bl	ftl_memset
-	ldr	x1, [x19,2848]
-	mov	w2, 21
-	ldrh	w0, [x19,3314]
-	sub	w2, w2, w0
-	mov	w0, 1
-	strh	w0, [x1,688]
-	adrp	x0, .LANCHOR7+3266
-	asr	w2, w20, w2
-	strh	w20, [x1,692]
-	strh	w2, [x1,694]
-	ldrh	w0, [x0,#:lo12:.LANCHOR7+3266]
-	strh	w22, [x1,416]
-	strh	w0, [x1,698]
-	bl	ftl_alloc_sys_blk
-	mov	w20, w0
-	mov	w1, 0
-	bl	ftl_erase_phy_blk
-	ldr	x1, [x19,2848]
-	ldr	x0, [x19,80]
-	strh	w20, [x1,130]
-	add	x0, x0, 16
-	mov	w1, 2
-	bl	ftl_open_sblk_init
-	ldr	x0, [x19,80]
-	mov	w1, 3
-	add	x0, x0, 48
-	bl	ftl_open_sblk_init
-	ldr	x1, [x19,2848]
-	ldr	x0, [x19,80]
-	ldrh	w2, [x1,134]
-	add	x0, x0, 136
-	strh	w2, [x0,-10]
-	mov	w2, -1
-	strh	wzr, [x0,-12]
-	strh	w2, [x0,-56]
-	strh	w2, [x0,-6]
-	mov	w2, -1
-	strh	wzr, [x0,-16]
-	str	w2, [x0,408]
-	strh	wzr, [x0,-14]
-	strh	w2, [x1,126]
-	mov	w1, 255
-	mov	w2, 256
-	bl	ftl_memset
-	ldr	x0, [x19,80]
-	mov	w1, 255
-	mov	w2, 128
-	add	x0, x0, 392
-	bl	ftl_memset
-	bl	ftl_ext_info_flush
-	mov	w0, 0
-	bl	ftl_info_flush
-	bl	ftl_info_blk_init
+	bl	dump_stack
+.L2409:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w3, [x19,10]
+	ldr	x4, [x0,3872]
 	mov	w0, 0
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 128
-	ret
-	.size	ftl_low_format, .-ftl_low_format
-	.align	2
-	.global	ftl_re_low_format_test
-	.type	ftl_re_low_format_test, %function
-ftl_re_low_format_test:
-	stp	x29, x30, [sp, -48]!
-	adrp	x0, .LC161
-	mov	w1, 1
-	add	x29, sp, 0
-	add	x0, x0, :lo12:.LC161
-	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
-	adrp	x19, .LANCHOR0
+	mov	w2, w0
+.L2410:
+	cmp	w2, w3
+	bcs	.L2474
+	ldrh	w1, [x19,12]
+	add	w1, w2, w1
+	ldr	w1, [x4,x1,lsl 2]
+	cmn	w1, #1
+	beq	.L2411
+	add	w1, w0, 1
+	uxth	w0, w1
+.L2411:
+	add	w2, w2, 1
+	b	.L2410
+.L2474:
+	add	x2, x21, :lo12:.LANCHOR0
+	ldrb	w1, [x19,9]
+	sub	w0, w0, w3
+	ldrh	w22, [x2,3300]
+	madd	w0, w1, w22, w0
+	uxth	w22, w0
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2413
+	ldrh	w1, [x19]
+	adrp	x0, .LC176
+	ldr	x4, [x2,600]
+	add	x0, x0, :lo12:.LC176
+	ubfiz	x3, x1, 1, 16
+	mov	w2, w22
+	ldrh	w3, [x4,x3]
 	bl	printk
-	bl	sblk_init
-	bl	ftl_info_blk_init
-	bl	ftl_ext_info_init
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x1, [x0,2848]
-	ldrh	w2, [x0,56]
-	mov	w0, 0
-	mov	w3, w0
-	mov	w4, w0
-	ldrh	w1, [x1,134]
-.L2248:
-	cmp	w1, w2
-	bcs	.L2254
-	add	x5, x19, :lo12:.LANCHOR0
-	ldr	x6, [x5,64]
-	add	x6, x6, x1, uxth 2
-	ldrb	w5, [x6,2]
-	and	w7, w5, 31
-	ands	w5, w5, 24
-	strb	w7, [x6,2]
-	bne	.L2249
-	add	w4, w4, 1
-	uxth	w4, w4
-	b	.L2250
-.L2249:
-	cmp	w5, 16
-	bne	.L2251
-	add	w3, w3, 1
-	uxth	w3, w3
-	b	.L2250
-.L2251:
-	add	w0, w0, 1
-	uxth	w0, w0
-.L2250:
-	add	w1, w1, 1
-	uxth	w1, w1
-	b	.L2248
-.L2254:
-	add	x20, x19, :lo12:.LANCHOR0
-	lsl	w2, w2, 1
-	ldr	x1, [x20,2848]
-	strh	w0, [x1,116]
-	ldr	x0, [x20,72]
-	strh	w4, [x1,114]
-	strh	w3, [x1,118]
-	strh	wzr, [x1,122]
-	strh	wzr, [x1,120]
-	strh	wzr, [x1,124]
-	mov	w1, 0
-	bl	ftl_memset
-	bl	zftl_sblk_list_init
-	mov	w0, 1
-	bl	ftl_alloc_sblk
-	mov	w21, w0
-	mov	w1, 0
-	bl	ftl_erase_sblk
-	ldr	x1, [x20,2848]
-	mov	w0, w21
-	add	x1, x1, 672
-	bl	ftl_get_blk_list_in_sblk
-	ldr	x0, [x20,2848]
-	ldrh	w20, [x0,672]
-	strh	wzr, [x0,690]
-	mov	w0, 65533
-	sub	w1, w20, #1
-	cmp	w0, w1, uxth
-	bcs	.L2253
+.L2413:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x19]
+	adrp	x23, .LC177
+	mov	w25, -1
+	add	x23, x23, :lo12:.LC177
+	ldr	x0, [x0,600]
+	strh	w22, [x0,x1,lsl 1]
+	mov	x0, x20
+	mov	w22, 0
+	bl	buf_free
+.L2414:
+	add	x2, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x2,3276]
+	cmp	w22, w0, lsl 1
+	bcs	.L2475
+	cbz	w28, .L2415
+	ldrh	w0, [x19,6]
+	cmp	w0, 1
+	bls	.L2415
+	mov	x0, x19
+	bl	ftl_get_new_free_page
+	mov	w26, w0
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2416
+	mov	x0, x23
+	mov	w1, w26
+	bl	printk
+.L2416:
+	add	x3, x21, :lo12:.LANCHOR0
+	ldr	x0, [x20,24]
+	ldr	x1, [x3,2864]
+	ldr	w1, [x1,8]
+	str	w1, [x0]
+	ldr	x0, [x20,24]
+	str	w25, [x0,4]
+	ldr	x0, [x20,24]
+	str	w25, [x0,8]
+	ldr	x0, [x20,24]
+	str	wzr, [x0,12]
+	ldr	x0, [x20,8]
+	str	wzr, [x0]
+	mov	w0, w26
+	ldr	x1, [x20,8]
+	ldr	x2, [x20,24]
+	ldrb	w3, [x3,2832]
+	bl	ftl_prog_ppa_page
+	ldrh	w0, [x19]
+	bl	ftl_vpn_decrement
+.L2415:
+	add	w22, w22, 1
+	b	.L2414
+.L2475:
+	ldrh	w1, [x2,3300]
+	ldrh	w0, [x19,12]
+	ldrb	w3, [x19,9]
+	madd	w0, w1, w3, w0
+	mov	x1, -4
+	add	x0, x1, x0, sxtw 2
+	ldr	x1, [x2,3872]
+	ldr	w0, [x1,x0]
+	cmn	w0, #1
+	beq	.L2418
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1503
+	add	x1, x1, 472
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 432
-	mov	w2, 2004
 	bl	printk
-.L2253:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w1, 255
-	mov	w2, 256
-	ldr	x0, [x19,2848]
-	add	x0, x0, 416
-	strh	wzr, [x0,280]
-	bl	ftl_memset
-	ldr	x0, [x19,2848]
-	mov	w1, 0
-	mov	w2, 4096
-	add	x0, x0, 704
-	bl	ftl_memset
-	ldr	x1, [x19,2848]
-	lsr	w0, w20, 14
-	ldrh	w2, [x19,56]
-	and	w20, w20, 16383
-	strh	w0, [x1,694]
-	mov	w0, 1
-	strh	w0, [x1,688]
-	adrp	x0, .LANCHOR7+3266
-	lsl	w2, w2, 1
-	strh	w20, [x1,692]
-	strh	w21, [x1,416]
-	ldrh	w0, [x0,#:lo12:.LANCHOR7+3266]
-	strh	w0, [x1,698]
-	mov	w1, 0
-	ldr	x0, [x19,72]
-	bl	ftl_memset
-	ldr	x0, [x19,80]
-	mov	w1, 2
-	add	x0, x0, 16
-	bl	ftl_open_sblk_init
-	ldr	x0, [x19,80]
-	mov	w1, 3
-	add	x0, x0, 48
-	bl	ftl_open_sblk_init
-	ldr	x1, [x19,2848]
-	ldr	x0, [x19,80]
-	ldrh	w2, [x1,134]
-	add	x0, x0, 136
-	strh	w2, [x0,-10]
-	mov	w2, -1
-	strh	wzr, [x0,-12]
-	strh	w2, [x0,-56]
-	strh	w2, [x0,-6]
-	mov	w2, -1
-	strh	wzr, [x0,-16]
-	str	w2, [x0,408]
-	strh	wzr, [x0,-14]
-	strh	w2, [x1,126]
-	mov	w1, 255
-	mov	w2, 256
-	bl	ftl_memset
-	ldr	x0, [x19,80]
-	mov	w1, 255
-	mov	w2, 128
-	add	x0, x0, 392
-	bl	ftl_memset
-	ldr	x0, [x19,80]
-	str	wzr, [x0,520]
-	str	wzr, [x0,524]
-	str	wzr, [x0,528]
-	bl	ftl_ext_info_flush
-	mov	w0, 0
-	bl	ftl_info_flush
-	bl	ftl_info_blk_init
-	ldr	x21, [sp,32]
-	mov	w0, 0
+	bl	dump_stack
+.L2418:
+	ldrh	w0, [x19,6]
+	cmp	w0, 1
+	bne	.L2388
+	mov	x0, x19
+	bl	ftl_write_last_log_page
+	b	.L2388
+.L2473:
+	ldr	x0, [x1,2864]
+	ldr	w2, [x2]
+	ldr	w1, [x0,8]
+	cmp	w2, w1
+	bls	.L2406
+	str	w2, [x0,8]
+.L2406:
+	ldr	x1, [x20,24]
+	ldrh	w0, [x19,10]
+	ldrh	w2, [x19,12]
+	add	w2, w2, w0
+	ldr	w0, [x1,4]
+	ldr	w1, [x1,8]
+	bl	lpa_hash_update_ppa
+	b	.L2405
+.L2388:
 	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 48
-	ret
-	.size	ftl_re_low_format_test, .-ftl_re_low_format_test
-	.align	2
-	.global	ftl_prog_ppa_page
-	.type	ftl_prog_ppa_page, %function
-ftl_prog_ppa_page:
-	stp	x29, x30, [sp, -16]!
-	mov	w5, w0
-	mov	x7, x1
-	mov	x6, x2
-	add	x29, sp, 0
-	mov	w4, w3
-	ubfx	x0, x5, 21, 3
-	and	w1, w5, 2097151
-	mov	x2, x7
-	mov	x3, x6
-	bl	ftl_prog_page
-	ldp	x29, x30, [sp], 16
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
 	ret
-	.size	ftl_prog_ppa_page, .-ftl_prog_ppa_page
+	.size	ftl_open_sblk_recovery, .-ftl_open_sblk_recovery
 	.align	2
-	.global	ftl_write_last_log_page
-	.type	ftl_write_last_log_page, %function
-ftl_write_last_log_page:
-	stp	x29, x30, [sp, -80]!
+	.global	pm_write_page
+	.type	pm_write_page, %function
+pm_write_page:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	stp	x19, x20, [sp,16]
+	adrp	x22, .LANCHOR3
+	str	x27, [sp,80]
 	stp	x23, x24, [sp,48]
+	add	x22, x22, :lo12:.LANCHOR3
+	adrp	x23, .LC0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	mov	w21, w0
+	mov	x24, x1
+	adrp	x25, .LANCHOR0
+	add	x23, x23, :lo12:.LC0
+	add	x22, x22, 496
+.L2477:
+	add	x2, x25, :lo12:.LANCHOR0
 	adrp	x19, .LANCHOR0
-	mov	w21, -1
-	ldrh	w1, [x0,6]
+	ldr	x0, [x2,2864]
+	ldr	w1, [x0,48]
+	ldrh	w3, [x0,696]
+	add	w1, w1, 1
+	str	w1, [x0,48]
+	ldrh	w1, [x2,3300]
+	cmp	w3, w1
+	bcs	.L2478
+	ldrh	w1, [x0,692]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2479
+.L2478:
+	bl	pm_alloc_new_blk
+	mov	w0, 0
+	bl	ftl_info_flush
+.L2479:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2864]
+	ldrh	w1, [x0,692]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2480
+	mov	x1, x22
+	mov	w2, 230
+	mov	x0, x23
+	bl	printk
+	bl	dump_stack
+.L2480:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w24, [x0,12]
-	cmp	w1, 1
-	ldr	x22, [x19,3840]
-	bne	.L2257
-	mov	x20, x0
-	bl	ftl_get_new_free_page
+	adrp	x20, .LANCHOR7
+	add	x27, x20, :lo12:.LANCHOR7
+	mov	w2, 64
+	ldr	x1, [x19,2864]
+	ldrh	w26, [x19,3350]
+	ldrh	w0, [x1,692]
+	ldrh	w1, [x1,696]
+	madd	w26, w0, w26, w1
+	ldr	x0, [x27,-128]
+	mov	w1, 0
+	bl	ftl_memset
+	ldr	x0, [x27,-128]
+	mov	x2, x24
+	str	w21, [x0]
+	ldr	x1, [x19,2864]
+	ldr	x0, [x27,-128]
+	ldrb	w4, [x19,2832]
+	ldr	w1, [x1,48]
+	str	w1, [x0,4]
+	mov	w1, w26
+	ldr	x0, [x19,2864]
+	ldr	x3, [x27,-128]
+	ldrb	w0, [x0,694]
+	bl	ftl_prog_page
+	ldr	x1, [x19,2864]
+	ldrh	w2, [x1,696]
+	add	w2, w2, 1
+	uxth	w2, w2
+	strh	w2, [x1,696]
+	cmp	w2, 1
+	beq	.L2481
+	ldrb	w2, [x27,-120]
+	cbz	w2, .L2482
+.L2481:
+	add	x20, x20, :lo12:.LANCHOR7
+	strb	wzr, [x20,-120]
+	b	.L2477
+.L2482:
 	cmn	w0, #1
-	mov	w23, w0
-	mov	w21, 0
-	beq	.L2257
-	ldrh	w0, [x20]
-	add	x22, x22, x24, uxth 2
-	bl	ftl_vpn_decrement
-	adrp	x1, .LANCHOR5
-	mov	w0, 15555
-	add	x1, x1, :lo12:.LANCHOR5
-	movk	w0, 0xf55f, lsl 16
-	add	x2, x1, 256
-	str	x2, [x29,72]
-	str	w0, [x1,256]
-	ldrb	w0, [x19,3244]
-	ldrh	w1, [x19,3276]
-	mul	w1, w1, w0
-	mov	x0, x22
-	lsl	w1, w1, 2
-	bl	js_hash
-	ldr	x2, [x29,72]
-	mov	x1, x22
-	ldrb	w3, [x19,2816]
-	str	w0, [x2,4]
-	mov	w0, w23
-	str	w21, [x2,8]
-	str	w21, [x2,12]
-	bl	ftl_prog_ppa_page
-.L2257:
-	mov	w0, w21
+	bne	.L2484
+	adrp	x0, .LC178
+	mov	w1, w26
+	add	x0, x0, :lo12:.LC178
+	bl	printk
+	b	.L2477
+.L2484:
+	ldrh	w0, [x1,698]
+	cmp	w21, w0
+	bcs	.L2485
+	add	x21, x1, x21, uxtw 2
+	str	w26, [x21,704]
+.L2485:
+	mov	w0, 0
+	ldr	x27, [sp,80]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 80
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
 	ret
-	.size	ftl_write_last_log_page, .-ftl_write_last_log_page
+	.size	pm_write_page, .-pm_write_page
 	.align	2
-	.global	ftl_open_sblk_recovery
-	.type	ftl_open_sblk_recovery, %function
-ftl_open_sblk_recovery:
-	sub	sp, sp, #176
-	stp	x29, x30, [sp,48]
-	add	x29, sp, 48
-	stp	x23, x24, [sp,96]
-	adrp	x23, .LANCHOR2
-	str	x1, [x29,120]
-	stp	x19, x20, [sp,64]
-	mov	x19, x0
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	stp	x21, x22, [sp,80]
-	stp	x25, x26, [sp,112]
-	stp	x27, x28, [sp,128]
-	tbz	x0, 12, .L2262
-	adrp	x0, .LC162
-	ldrh	w1, [x19,2]
-	add	x0, x0, :lo12:.LC162
-	bl	printk
-.L2262:
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2263
-	adrp	x0, .LC163
-	ldrb	w1, [x19,5]
-	add	x0, x0, :lo12:.LC163
-	bl	printk
-.L2263:
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2264
-	adrp	x0, .LC164
-	ldrh	w1, [x19]
-	add	x0, x0, :lo12:.LC164
-	bl	printk
-.L2264:
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2265
-	adrp	x0, .LC165
-	ldrh	w1, [x19,16]
-	ldrh	w2, [x19,18]
-	add	x0, x0, :lo12:.LC165
-	bl	printk
-.L2265:
-	ldrh	w0, [x19,10]
-	adrp	x24, .LANCHOR5
-	strh	w0, [x19,14]
-	mov	w0, 1
-	adrp	x25, .LANCHOR3
-	add	x24, x24, :lo12:.LANCHOR5
-	bl	buf_alloc
-	add	x25, x25, :lo12:.LANCHOR3
-	ldrb	w21, [x19,5]
-	mov	x27, x0
-	ldrh	w22, [x19,2]
-	mov	w28, 0
-	add	x24, x24, 576
-	add	x25, x25, 456
-.L2266:
-	adrp	x20, .LANCHOR0
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3276]
-	cmp	w0, w22
-	bls	.L2269
-	ldrb	w21, [x19,5]
-.L2267:
-	ldrb	w0, [x19,9]
-	cmp	w0, w21
-	bls	.L2347
-	add	x0, x19, x21, sxtw 1
-	ldrh	w5, [x0,16]
-	mov	w0, 65535
-	cmp	w5, w0
-	beq	.L2268
-	add	x3, x20, :lo12:.LANCHOR0
-	ldr	x1, [x27,8]
-	ldr	x2, [x27,24]
-	str	x5, [x29,104]
-	ldrh	w4, [x3,3324]
-	ldrb	w3, [x3,2816]
-	madd	w4, w5, w4, w22
-	str	x4, [x29,112]
-	mov	w0, w4
-	bl	ftl_read_ppa_page
-	cmp	w0, 512
-	mov	w26, w0
-	beq	.L2269
-	cmn	w0, #1
-	ldr	x4, [x29,112]
-	ldr	x5, [x29,104]
-	beq	.L2270
-	ldr	x0, [x27,24]
-	ldr	w1, [x0]
-	cmn	w1, #1
-	bne	.L2270
-	ldr	w0, [x0,4]
-	cmn	w0, #1
-	bne	.L2270
-	ldr	x0, [x27,8]
-	ldr	w0, [x0]
-	cmn	w0, #1
-	beq	.L2269
-.L2270:
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2271
-	ldr	x7, [x27,8]
-	mov	w3, w4
-	ldr	x0, [x27,24]
-	mov	w2, w22
-	mov	w4, w26
-	ldr	w1, [x7,12]
-	str	w1, [sp]
-	ldr	w1, [x0]
-	str	w1, [sp,8]
-	ldr	w1, [x0,4]
-	str	w1, [sp,16]
-	ldr	w1, [x0,8]
-	str	w1, [sp,24]
-	mov	w1, w5
-	ldr	w0, [x0,12]
-	str	w0, [sp,32]
-	adrp	x0, .LC166
-	add	x0, x0, :lo12:.LC166
-	ldr	w5, [x7]
-	ldr	w6, [x7,4]
-	ldr	w7, [x7,8]
-	bl	printk
-.L2271:
-	adrp	x0, .LANCHOR6-127
-	mov	w1, 1
-	strb	w1, [x0,#:lo12:.LANCHOR6-127]
-	ldrb	w0, [x19,9]
-	ldrh	w1, [x19,10]
-	madd	w0, w22, w0, w21
-	cmp	w1, w0
-	beq	.L2272
-	adrp	x0, .LC0
-	mov	x1, x25
-	add	x0, x0, :lo12:.LC0
-	mov	w2, 1288
-	bl	printk
-.L2272:
-	ldrh	w0, [x19,10]
-	ldrh	w1, [x19,6]
-	ldrb	w2, [x19,9]
-	add	w1, w1, w0
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,3276]
-	mul	w0, w0, w2
-	cmp	w1, w0
-	beq	.L2273
-	adrp	x0, .LC0
-	mov	x1, x25
-	add	x0, x0, :lo12:.LC0
-	mov	w2, 1289
-	bl	printk
-.L2273:
-	cmn	w26, #1
-	beq	.L2277
-	ldr	x0, [x27,24]
-	ldr	w0, [x0,4]
-	cmn	w0, #1
-	beq	.L2277
-	bl	lpa_hash_get_ppa
-	ldr	x1, [x29,120]
-	cbz	x1, .L2275
-	ldr	x3, [x27,24]
-	ldr	w1, [x3,8]
-	cmp	w0, w1
-	beq	.L2275
-	cmn	w0, #1
-	beq	.L2275
-	add	x28, x20, :lo12:.LANCHOR0
-	mov	w4, 21
-	mov	w26, 1
-	ldrh	w1, [x28,3314]
-	lsr	w2, w0, w1
-	sub	w1, w4, w1
-	lsl	w1, w26, w1
-	sub	w1, w1, #1
-	and	w1, w2, w1
-	ldrb	w2, [x28,3312]
-	udiv	w1, w1, w2
-	ldr	x2, [x29,120]
-	ldrh	w2, [x2]
-	cmp	w2, w1, uxth
-	bne	.L2275
-	ldr	w5, [x3]
-	mov	x2, x24
-	ldr	x1, [x27,8]
-	ldrb	w3, [x28,2816]
-	str	x4, [x29,104]
-	str	x5, [x29,112]
-	bl	ftl_read_ppa_page
-	ldr	w0, [x24]
-	ldr	x5, [x29,112]
-	ldr	x4, [x29,104]
-	cmp	w0, w5
-	bcc	.L2275
-	ldr	x0, [x27,24]
-	ldr	w1, [x0,8]
-	cmn	w1, #1
-	beq	.L2277
-	ldrh	w0, [x28,3314]
-	sub	w4, w4, w0
-	lsr	w1, w1, w0
-	lsl	w26, w26, w4
-	ldrb	w0, [x28,3312]
-	sub	w26, w26, #1
-	and	w1, w26, w1
-	udiv	w0, w1, w0
-	bl	ftl_vpn_decrement
-	b	.L2277
-.L2275:
-	ldr	x2, [x27,24]
-	add	x1, x20, :lo12:.LANCHOR0
-	ldr	w3, [x2,4]
-	ldr	w0, [x1,2824]
-	cmp	w3, w0
-	bcs	.L2277
-	ldrb	w0, [x19,9]
-	ldrh	w4, [x1,3276]
-	ldrh	w3, [x19,10]
-	mul	w0, w0, w4
-	sub	w0, w0, #1
-	cmp	w3, w0
-	blt	.L2348
-.L2277:
-	ldrh	w0, [x19,6]
-	mov	w28, 1
-	sub	w0, w0, #1
-	strh	w0, [x19,6]
-	ldrh	w0, [x19,10]
-	add	w0, w0, 1
-	strh	w0, [x19,10]
-.L2268:
-	add	w21, w21, 1
-	uxth	w21, w21
-	b	.L2267
-.L2347:
-	add	w22, w22, 1
-	strb	wzr, [x19,5]
-	uxth	w22, w22
-	b	.L2266
-.L2269:
-	add	x2, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x19,10]
-	ldrh	w1, [x19,6]
-	strh	w22, [x19,2]
-	add	w1, w1, w0
-	ldrh	w2, [x2,3276]
-	ldrb	w0, [x19,9]
-	strb	w21, [x19,5]
-	mul	w0, w0, w2
-	cmp	w1, w0
-	beq	.L2281
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 456
-	mov	w2, 1365
-	bl	printk
-.L2281:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w3, [x19,10]
-	ldr	x4, [x0,3840]
-	mov	w0, 0
-	mov	w2, w0
-.L2282:
-	cmp	w2, w3
-	bcs	.L2349
-	ldrh	w1, [x19,12]
-	add	w1, w2, w1
-	ldr	w1, [x4,x1,lsl 2]
-	cmn	w1, #1
-	beq	.L2283
-	add	w1, w0, 1
-	uxth	w0, w1
-.L2283:
-	add	w2, w2, 1
-	b	.L2282
-.L2349:
-	add	x2, x20, :lo12:.LANCHOR0
-	ldrb	w1, [x19,9]
-	sub	w0, w0, w3
-	ldrh	w21, [x2,3276]
-	madd	w0, w1, w21, w0
-	uxth	w21, w0
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2285
-	ldrh	w1, [x19]
-	adrp	x0, .LC167
-	ldr	x4, [x2,72]
-	add	x0, x0, :lo12:.LC167
-	ubfiz	x3, x1, 1, 16
-	mov	w2, w21
-	ldrh	w3, [x4,x3]
-	bl	printk
-.L2285:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x19]
-	adrp	x22, .LC168
-	mov	w24, -1
-	add	x22, x22, :lo12:.LC168
-	ldr	x0, [x0,72]
-	strh	w21, [x0,x1,lsl 1]
-	mov	x0, x27
-	mov	w21, 0
-	bl	buf_free
-.L2286:
-	add	x2, x20, :lo12:.LANCHOR0
-	ldrb	w0, [x2,3244]
-	cmp	w21, w0, lsl 1
-	bcs	.L2350
-	cbz	w28, .L2287
-	ldrh	w0, [x19,6]
-	cmp	w0, 1
-	bls	.L2287
-	mov	x0, x19
-	bl	ftl_get_new_free_page
-	mov	w25, w0
-	ldr	w0, [x23,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2288
-	mov	x0, x22
-	mov	w1, w25
-	bl	printk
-.L2288:
-	add	x3, x20, :lo12:.LANCHOR0
-	ldr	x0, [x27,24]
-	ldr	x1, [x3,2848]
-	ldr	w1, [x1,8]
-	str	w1, [x0]
-	ldr	x0, [x27,24]
-	str	w24, [x0,4]
-	ldr	x0, [x27,24]
-	str	w24, [x0,8]
-	ldr	x0, [x27,24]
-	str	wzr, [x0,12]
-	ldr	x0, [x27,8]
-	str	wzr, [x0]
-	mov	w0, w25
-	ldr	x1, [x27,8]
-	ldr	x2, [x27,24]
-	ldrb	w3, [x3,2816]
-	bl	ftl_prog_ppa_page
-	ldrh	w0, [x19]
-	bl	ftl_vpn_decrement
-.L2287:
-	add	w21, w21, 1
-	b	.L2286
-.L2350:
-	ldrh	w1, [x2,3276]
-	ldrh	w0, [x19,12]
-	ldrb	w3, [x19,9]
-	madd	w0, w1, w3, w0
-	mov	x1, -4
-	add	x0, x1, x0, sxtw 2
-	ldr	x1, [x2,3840]
-	ldr	w0, [x1,x0]
-	cmn	w0, #1
-	beq	.L2290
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 456
-	mov	w2, 1395
-	bl	printk
-.L2290:
-	ldrh	w0, [x19,6]
-	cmp	w0, 1
-	bne	.L2261
-	mov	x0, x19
-	bl	ftl_write_last_log_page
-	b	.L2261
-.L2348:
-	ldr	x0, [x1,2848]
-	ldr	w2, [x2]
-	ldr	w1, [x0,8]
-	cmp	w2, w1
-	bls	.L2278
-	str	w2, [x0,8]
-.L2278:
-	ldr	x1, [x27,24]
-	ldrh	w0, [x19,10]
-	ldrh	w2, [x19,12]
-	add	w2, w2, w0
-	ldr	w0, [x1,4]
-	ldr	w1, [x1,8]
-	bl	lpa_hash_update_ppa
-	b	.L2277
-.L2261:
-	sub	sp, x29, #48
-	ldp	x19, x20, [sp,64]
-	ldp	x21, x22, [sp,80]
-	ldp	x23, x24, [sp,96]
-	ldp	x25, x26, [sp,112]
-	ldp	x27, x28, [sp,128]
-	ldp	x29, x30, [sp,48]
-	add	sp, sp, 176
-	ret
-	.size	ftl_open_sblk_recovery, .-ftl_open_sblk_recovery
-	.align	2
-	.global	pm_write_page
-	.type	pm_write_page, %function
-pm_write_page:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x22, .LANCHOR3
-	str	x27, [sp,80]
-	stp	x23, x24, [sp,48]
-	add	x22, x22, :lo12:.LANCHOR3
-	adrp	x23, .LC0
-	stp	x25, x26, [sp,64]
-	stp	x19, x20, [sp,16]
-	mov	w21, w0
-	mov	x24, x1
-	adrp	x25, .LANCHOR0
-	add	x23, x23, :lo12:.LC0
-	add	x22, x22, 480
-.L2352:
-	add	x2, x25, :lo12:.LANCHOR0
-	adrp	x19, .LANCHOR0
-	ldr	x0, [x2,2848]
-	ldr	w1, [x0,48]
-	ldrh	w3, [x0,696]
-	add	w1, w1, 1
-	str	w1, [x0,48]
-	ldrh	w1, [x2,3276]
-	cmp	w3, w1
-	bcs	.L2353
-	ldrh	w1, [x0,692]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L2354
-.L2353:
-	bl	pm_alloc_new_blk
-	mov	w0, 0
-	bl	ftl_info_flush
-.L2354:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,2848]
-	ldrh	w1, [x0,692]
-	mov	w0, 65535
-	cmp	w1, w0
-	bne	.L2355
-	mov	x0, x23
-	mov	x1, x22
-	mov	w2, 228
-	bl	printk
-.L2355:
-	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x20, .LANCHOR7
-	add	x27, x20, :lo12:.LANCHOR7
-	mov	w2, 64
-	ldr	x1, [x19,2848]
-	ldrh	w26, [x19,3324]
-	ldrh	w0, [x1,692]
-	ldrh	w1, [x1,696]
-	madd	w26, w0, w26, w1
-	ldr	x0, [x27,3272]
-	mov	w1, 0
-	bl	ftl_memset
-	ldr	x0, [x27,3272]
-	mov	x2, x24
-	str	w21, [x0]
-	ldr	x1, [x19,2848]
-	ldr	x0, [x27,3272]
-	ldrb	w4, [x19,2816]
-	ldr	w1, [x1,48]
-	str	w1, [x0,4]
-	mov	w1, w26
-	ldr	x0, [x19,2848]
-	ldr	x3, [x27,3272]
-	ldrb	w0, [x0,694]
-	bl	ftl_prog_page
-	ldr	x1, [x19,2848]
-	ldrh	w2, [x1,696]
-	add	w2, w2, 1
-	uxth	w2, w2
-	strh	w2, [x1,696]
-	cmp	w2, 1
-	beq	.L2356
-	ldrb	w2, [x27,3280]
-	cbz	w2, .L2357
-.L2356:
-	add	x20, x20, :lo12:.LANCHOR7
-	strb	wzr, [x20,3280]
-	b	.L2352
-.L2357:
-	cmn	w0, #1
-	bne	.L2359
-	adrp	x0, .LC169
-	mov	w1, w26
-	add	x0, x0, :lo12:.LC169
-	bl	printk
-	b	.L2352
-.L2359:
-	ldrh	w0, [x1,698]
-	cmp	w21, w0
-	bcs	.L2360
-	add	x21, x1, x21, uxtw 2
-	str	w26, [x21,704]
-.L2360:
-	mov	w0, 0
-	ldr	x27, [sp,80]
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	pm_write_page, .-pm_write_page
-	.align	2
-	.global	flash_info_flush
-	.type	flash_info_flush, %function
-flash_info_flush:
-	adrp	x0, .LANCHOR2
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	stp	x19, x20, [sp,16]
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	tbz	x0, 12, .L2365
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC115
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC115
-	mov	w1, 251
-	add	x2, x2, 496
-	bl	printk
-.L2365:
-	adrp	x22, .LANCHOR4
-	adrp	x23, .LANCHOR0
-	add	x0, x22, :lo12:.LANCHOR4
-	mov	w1, 0
-	mov	w2, 64
-	add	x19, x23, :lo12:.LANCHOR0
-	adrp	x24, .LC171
-	adrp	x25, .LC172
-	ldr	x0, [x0,1200]
-	mov	w26, 0
-	add	x24, x24, :lo12:.LC171
-	add	x25, x25, :lo12:.LC172
-	bl	ftl_memset
-	ldr	x1, [x19,192]
-	adrp	x0, .LC170
-	add	x0, x0, :lo12:.LC170
-	mov	w2, 4
-	mov	w3, 16
-	bl	rknand_print_hex
-	ldr	x19, [x19,192]
-	add	x0, x19, 16
-	ldr	w1, [x19,8]
-	bl	js_hash
-	str	w0, [x19,12]
-.L2366:
-	add	x21, x22, :lo12:.LANCHOR4
-	add	x27, x23, :lo12:.LANCHOR0
-	mov	x0, x24
-	ldrb	w20, [x21,1208]
-	ldrh	w19, [x21,1210]
-	mov	w1, w20
-	ldrh	w28, [x27,210]
-	mov	w2, w19
-	bl	printk
-	ldrh	w1, [x21,1060]
-	ldrh	w0, [x21,1210]
-	sub	w1, w1, #1
-	cmp	w0, w1
-	blt	.L2367
-	ldr	x1, [x27,192]
-	ldrb	w19, [x21,1209]
-	strh	wzr, [x21,1210]
-	ldr	w0, [x1,4]
-	add	w0, w0, 1
-	str	w0, [x1,4]
-	ldrb	w0, [x21,1208]
-	ldr	x20, [x27,192]
-	strb	w0, [x21,1209]
-	mov	x0, x20
-	strb	w19, [x21,1208]
-	ldrh	w1, [x20,16]
-	add	w1, w1, 1
-	strh	w1, [x0,16]!
-	ldr	w1, [x20,8]
-	bl	js_hash
-	str	w0, [x20,12]
-	ldrh	w0, [x27,210]
-	mul	w19, w19, w0
-	mov	w0, 0
-	b	.L2375
-.L2367:
-	madd	w19, w20, w28, w19
-	cbnz	w0, .L2368
-.L2375:
-	mov	w1, w19
-	bl	flash_erase_block
-.L2368:
-	add	x2, x23, :lo12:.LANCHOR0
-	add	x20, x22, :lo12:.LANCHOR4
-	mov	w4, 4
-	mov	w5, 1
-	ldr	x1, [x2,192]
-	ldr	x0, [x20,1200]
-	ldr	w1, [x1,4]
-	str	w1, [x0]
-	mov	w0, 21321
-	movk	w0, 0x5359, lsl 16
-	ldr	x1, [x20,1200]
-	str	w0, [x1,4]
-	mov	w1, w19
-	mov	w0, 0
-	ldr	x2, [x2,192]
-	ldr	x3, [x20,1200]
-	bl	flash_prog_page_en
-	cmn	w0, #1
-	ldrh	w1, [x20,1210]
-	add	w1, w1, 1
-	strh	w1, [x20,1210]
-	bne	.L2369
-	mov	x0, x25
-	mov	w1, w19
-	bl	printk
-	b	.L2366
-.L2369:
-	cbnz	w26, .L2376
-	mov	w26, 1
-	b	.L2366
-.L2376:
-	mov	w0, 0
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	flash_info_flush, .-flash_info_flush
-	.align	2
-	.global	nand_flash_init
-	.type	nand_flash_init, %function
-nand_flash_init:
-	stp	x29, x30, [sp, -80]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR2
-	mov	x19, x0
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	stp	x25, x26, [sp,64]
-	tbz	x0, 12, .L2378
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC115
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC115
-	mov	w1, 2101
-	add	x2, x2, 520
-	bl	printk
-.L2378:
-	mov	x0, x19
-	adrp	x19, .LANCHOR0
-	mov	x21, 0
-	mov	w25, 2
-	bl	nandc_init
-	mov	w26, 44
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x1, x20, :lo12:.LANCHOR2
-	add	x22, x0, 732
-	add	x1, x1, 376
-	mov	x23, x0
-	mov	x24, x22
-	str	x1, [x0,88]
-.L2384:
-	mov	w0, w21
-	mov	x1, x22
-	bl	flash_read_id
-	add	x0, x23, 728
-	strb	w25, [x21,x0]
-	cbnz	x21, .L2379
-	ldrb	w0, [x24]
-	sub	w0, w0, #1
-	uxtb	w0, w0
-	cmp	w0, 253
-	bls	.L2380
-.L2382:
-	mov	w22, -2
-	b	.L2426
-.L2380:
-	ldrb	w0, [x24,1]
-	cmp	w0, 255
-	beq	.L2382
-.L2379:
-	ldrb	w0, [x22]
-	cmp	w0, 181
-	bne	.L2383
-	strb	w26, [x22]
-.L2383:
-	add	x21, x21, 1
-	add	x22, x22, 8
-	cmp	x21, 4
-	bne	.L2384
-	add	x22, x20, :lo12:.LANCHOR2
-	add	x23, x19, :lo12:.LANCHOR0
-	add	x22, x22, 440
-	mov	w21, 0
-	add	x23, x23, 732
-.L2387:
-	ldrb	w2, [x22]
-	add	x0, x22, 1
-	mov	x1, x23
-	bl	flash_mem_cmp8
-	cbnz	w0, .L2385
-	add	x1, x20, :lo12:.LANCHOR2
-	ubfiz	x21, x21, 5, 32
-	add	x0, x1, 440
-	adds	x21, x0, x21
-	beq	.L2382
-	ldrb	w3, [x21,22]
-	mov	x0, 0
-	b	.L2389
-.L2385:
-	add	w21, w21, 1
-	add	x22, x22, 32
-	cmp	w21, 30
-	bne	.L2387
-	b	.L2382
-.L2389:
-	add	x4, x1, x0, lsl 5
-	mov	w2, w0
-	ldrb	w4, [x4,1400]
-	cmp	w4, w3
-	beq	.L2388
-	add	x0, x0, 1
-	cmp	x0, 4
-	bne	.L2389
-	mov	w2, w0
-.L2388:
-	add	x22, x20, :lo12:.LANCHOR2
-	ubfiz	x2, x2, 5, 32
-	add	x1, x22, 1400
-	add	x0, x19, :lo12:.LANCHOR0
-	add	x1, x1, x2
-	add	x0, x0, 104
-	mov	w2, 32
-	add	x22, x22, 376
-	bl	ftl_memcpy
-	mov	x0, x22
-	mov	x1, x21
-	mov	w2, 32
-	bl	ftl_memcpy
-	ldrb	w0, [x19,#:lo12:.LANCHOR0]
-	cmp	w0, 8
-	bhi	.L2390
-	ldrb	w1, [x22,20]
-	cmp	w1, 60
-	bls	.L2391
-	mov	w1, 60
-	strb	w1, [x22,20]
-.L2391:
-	cmp	w0, 8
-	bne	.L2390
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,732]
-	cmp	w0, 44
-	beq	.L2451
-.L2390:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2392
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC115
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC115
-	mov	w1, 2122
-	add	x2, x2, 520
-	bl	printk
-.L2392:
-	adrp	x21, .LANCHOR4
-	mov	w0, 16384
-	add	x23, x21, :lo12:.LANCHOR4
-	add	x22, x19, :lo12:.LANCHOR0
-	bl	ftl_malloc
-	add	x24, x20, :lo12:.LANCHOR2
-	str	x0, [x23,1216]
-	mov	w0, 16384
-	bl	ftl_malloc
-	str	x0, [x23,1160]
-	mov	w0, 2048
-	bl	ftl_malloc
-	str	x0, [x22,192]
-	mov	w0, 64
-	bl	ftl_malloc
-	str	x0, [x23,1224]
-	mov	w0, 64
-	bl	ftl_malloc
-	str	x0, [x23,1176]
-	mov	w0, 64
-	bl	ftl_malloc
-	str	x0, [x23,1200]
-	adrp	x0, .LANCHOR5+512
-	strb	wzr, [x0,#:lo12:.LANCHOR5+512]
-	bl	flash_die_info_init
-	ldrb	w0, [x24,394]
-	bl	flash_lsb_page_tbl_build
-	ldrb	w0, [x24,396]
-	bl	nandc_bch_sel
-	str	xzr, [x23,1192]
-	ldr	x1, [x22,88]
-	ldrh	w0, [x1,16]
-	ubfx	x2, x0, 8, 3
-	strb	w2, [x22,764]
-	adrp	x2, .LANCHOR7+3281
-	ubfx	x3, x0, 3, 1
-	strb	w3, [x2,#:lo12:.LANCHOR7+3281]
-	ubfx	x2, x0, 4, 1
-	strb	w2, [x22,765]
-	ubfx	x2, x0, 12, 1
-	strb	w2, [x22,3240]
-	ubfx	x2, x0, 13, 1
-	ubfx	x0, x0, 14, 1
-	strb	w0, [x22,208]
-	ldrb	w0, [x1,28]
-	mov	w1, 60
-	strb	w1, [x22,96]
-	ldrb	w1, [x19,#:lo12:.LANCHOR0]
-	strb	w2, [x22,3322]
-	strb	w0, [x22,97]
-	cmp	w1, 9
-	bne	.L2393
-	mov	w1, 70
-	strb	w1, [x22,96]
-.L2393:
-	add	x2, x20, :lo12:.LANCHOR2
-	add	x1, x21, :lo12:.LANCHOR4
-	add	x2, x2, 376
-	add	x3, x19, :lo12:.LANCHOR0
-	strb	w0, [x1,1232]
-	ldrb	w0, [x2,19]
-	ldrh	w2, [x2,16]
-	strb	w0, [x3,189]
-	tbz	x2, 6, .L2395
-	sub	w2, w0, #17
-	uxtb	w2, w2
-	cmp	w2, 2
-	bhi	.L2396
-	adrp	x2, micron_read_retrial
-	cmp	w0, 19
-	add	x2, x2, :lo12:micron_read_retrial
-	str	x2, [x1,1192]
-	bne	.L2447
-	mov	w0, 15
-	b	.L2448
-.L2396:
-	sub	w2, w0, #65
-	uxtb	w2, w2
-	cmp	w2, 1
-	bls	.L2416
-	cmp	w0, 33
-	bne	.L2399
-.L2416:
-	add	x0, x21, :lo12:.LANCHOR4
-	adrp	x1, toshiba_read_retrial
-	add	x1, x1, :lo12:toshiba_read_retrial
-	mov	w2, 4
-	str	x1, [x0,1192]
-	add	x1, x19, :lo12:.LANCHOR0
-	strb	w2, [x1,190]
-	mov	w1, 7
-	strb	w1, [x0,1184]
-	b	.L2395
-.L2399:
-	sub	w2, w0, #67
-	uxtb	w2, w2
-	cmp	w2, 1
-	sub	w2, w0, #34
-	cset	w3, ls
-	uxtb	w2, w2
-	cmp	w2, 1
-	bls	.L2417
-	cbz	w3, .L2401
-.L2417:
-	add	x2, x21, :lo12:.LANCHOR4
-	adrp	x1, toshiba_read_retrial
-	add	x1, x1, :lo12:toshiba_read_retrial
-	cmp	w0, 35
-	str	x1, [x2,1192]
-	beq	.L2403
-	cmp	w0, 68
-	beq	.L2403
-	mov	w0, 7
-	strb	w0, [x2,1184]
-	b	.L2404
-.L2403:
-	add	x0, x21, :lo12:.LANCHOR4
-	mov	w1, 17
-	strb	w1, [x0,1184]
-.L2404:
-	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, 4
-	cbnz	w3, .L2449
-	mov	w1, 5
-.L2449:
-	strb	w1, [x0,190]
-	b	.L2395
-.L2401:
-	sub	w0, w0, #36
-	uxtb	w0, w0
-	cmp	w0, 1
-	bhi	.L2395
-	adrp	x0, toshiba_3d_read_retrial
-	add	x0, x0, :lo12:toshiba_3d_read_retrial
-	str	x0, [x1,1192]
-.L2447:
-	mov	w0, 7
-.L2448:
-	strb	w0, [x1,1184]
-.L2395:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2406
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC115
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC115
-	mov	w1, 2170
-	add	x2, x2, 520
-	bl	printk
-.L2406:
-	add	x0, x19, :lo12:.LANCHOR0
-	strb	wzr, [x0,136]
-	ldrb	w0, [x0,764]
-	tbz	x0, 0, .L2407
-	mov	w0, 4
-	bl	nandc_set_if_mode
-	mov	w0, 1
-	bl	flash_set_interface_mode
-	mov	w0, 1
-	b	.L2450
-.L2407:
-	mov	w0, 4
-.L2450:
-	bl	nandc_set_if_mode
-	bl	flash_info_blk_init
-	cmn	w0, #1
-	mov	w22, w0
-	bne	.L2409
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2426
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC115
-	add	x2, x2, :lo12:.LANCHOR3
-	mov	w1, 2190
-	add	x2, x2, 520
-	add	x0, x0, :lo12:.LC115
-	bl	printk
-	b	.L2426
-.L2409:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,189]
-	sub	w0, w0, #1
-	uxtb	w0, w0
-	cmp	w0, 6
-	bhi	.L2410
-	add	x0, x21, :lo12:.LANCHOR4
-	adrp	x1, hynix_read_retrial
-	add	x1, x1, :lo12:hynix_read_retrial
-	str	x1, [x0,1192]
-.L2410:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x19,764]
-	tbz	x0, 2, .L2412
-	ldr	x0, [x19,192]
-	ldrb	w0, [x0,19]
-	cbz	w0, .L2412
-	add	x21, x21, :lo12:.LANCHOR4
-	ldrh	w1, [x19,210]
-	mov	w0, 0
-	ldrb	w2, [x21,1208]
-	mul	w1, w2, w1
-	bl	flash_ddr_para_scan
-	ldrb	w0, [x19,136]
-	cbnz	w0, .L2412
-	ldr	x1, [x19,192]
-	strb	w0, [x1,19]
-	bl	flash_info_flush
-.L2412:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2414
-	adrp	x2, .LANCHOR3
-	adrp	x0, .LC115
-	add	x2, x2, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC115
-	mov	w1, 2243
-	add	x2, x2, 520
-	bl	printk
-.L2414:
-	bl	nand_flash_print_info
-	mov	w22, 0
-	b	.L2426
-.L2451:
-	add	x0, x20, :lo12:.LANCHOR2
-	add	x0, x0, 376
-	ldrb	w1, [x0,28]
-	cmp	w1, 3
-	bne	.L2390
-	strb	wzr, [x0,28]
-	b	.L2390
-.L2426:
-	mov	w0, w22
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 80
-	ret
-	.size	nand_flash_init, .-nand_flash_init
-	.align	2
-	.global	ftl_sysblk_dump
-	.type	ftl_sysblk_dump, %function
-ftl_sysblk_dump:
-	sub	sp, sp, #144
-	stp	x29, x30, [sp,48]
-	add	x29, sp, 48
-	stp	x25, x26, [sp,112]
-	uxth	w25, w0
-	mov	w0, 1
-	stp	x19, x20, [sp,64]
-	stp	x23, x24, [sp,96]
-	stp	x27, x28, [sp,128]
-	stp	x21, x22, [sp,80]
-	bl	buf_alloc
-	ldr	x24, [x0,8]
-	mov	w20, 0
-	adrp	x22, .LC166
-	adrp	x23, .LC173
-	mov	x27, x0
-	mov	w19, w20
-	adrp	x28, .LANCHOR0
-	add	x22, x22, :lo12:.LC166
-	add	x23, x23, :lo12:.LC173
-	add	x24, x24, 704
-.L2453:
-	add	x3, x28, :lo12:.LANCHOR0
-	ldrh	w1, [x3,3276]
-	cmp	w1, w19
-	bls	.L2465
-	ldrh	w21, [x3,3324]
-	ldr	x1, [x27,8]
-	ldr	x2, [x27,24]
-	madd	w21, w25, w21, w19
-	ldrb	w3, [x3,2816]
-	mov	w0, w21
-	bl	ftl_read_ppa_page
-	mov	w26, w0
-	ldr	x7, [x27,8]
-	mov	w1, w25
-	ldr	x2, [x27,24]
-	mov	w3, w21
-	mov	w4, w26
-	ldr	w0, [x7,12]
-	str	w0, [sp]
-	ldr	w0, [x2]
-	str	w0, [sp,8]
-	ldr	w0, [x2,4]
-	str	w0, [sp,16]
-	ldr	w0, [x2,8]
-	str	w0, [sp,24]
-	ldr	w0, [x2,12]
-	mov	w2, w19
-	str	w0, [sp,32]
-	mov	x0, x22
-	ldr	w5, [x7]
-	ldr	w6, [x7,4]
-	ldr	w7, [x7,8]
-	bl	printk
-	mov	x0, x23
-	mov	x1, x24
-	mov	w2, 4
-	mov	w3, 32
-	bl	rknand_print_hex
-	cmp	w26, 512
-	beq	.L2458
-	cmn	w26, #1
-	bne	.L2454
-.L2458:
-	mov	w20, 1
-.L2454:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L2453
-.L2465:
-	mov	x0, x27
-	bl	buf_free
-	cbz	w20, .L2457
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 536
-	mov	w2, 1232
-	bl	printk
-.L2457:
-	sub	sp, x29, #48
-	mov	w0, w20
-	ldp	x19, x20, [sp,64]
-	ldp	x21, x22, [sp,80]
-	ldp	x23, x24, [sp,96]
-	ldp	x25, x26, [sp,112]
-	ldp	x27, x28, [sp,128]
-	ldp	x29, x30, [sp,48]
-	add	sp, sp, 144
-	ret
-	.size	ftl_sysblk_dump, .-ftl_sysblk_dump
-	.align	2
-	.global	dump_ftl_info
-	.type	dump_ftl_info, %function
-dump_ftl_info:
-	stp	x29, x30, [sp, -32]!
-	adrp	x0, .LC174
-	add	x29, sp, 0
-	str	x19, [sp,16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC174
-	ldrb	w1, [x19,2818]
-	bl	printk
-	adrp	x3, .LANCHOR5
-	adrp	x0, .LC175
-	add	x3, x3, :lo12:.LANCHOR5
-	add	x0, x0, :lo12:.LC175
-	ldrb	w1, [x3,832]
-	ldrb	w2, [x3,833]
-	ldrh	w3, [x3,834]
-	bl	printk
-	ldr	x2, [x19,2848]
-	adrp	x0, .LC176
-	add	x0, x0, :lo12:.LC176
-	ldrh	w1, [x2,130]
-	ldrh	w2, [x2,140]
-	bl	printk
-	ldr	x1, [x19,80]
-	adrp	x0, .LC177
-	add	x0, x0, :lo12:.LC177
-	add	x5, x1, 16
-	ldrh	w1, [x1,16]
-	ldrh	w2, [x5,2]
-	ldrb	w3, [x5,5]
-	ldrh	w4, [x5,6]
-	ldrh	w5, [x5,10]
-	bl	printk
-	ldr	x1, [x19,80]
-	adrp	x0, .LC178
-	add	x0, x0, :lo12:.LC178
-	add	x5, x1, 48
-	ldrh	w1, [x1,48]
-	ldrh	w2, [x5,2]
-	ldrb	w3, [x5,5]
-	ldrh	w4, [x5,6]
-	ldrh	w5, [x5,10]
-	bl	printk
-	ldr	x1, [x19,80]
-	adrp	x0, .LC179
-	add	x0, x0, :lo12:.LC179
-	add	x5, x1, 80
-	ldrh	w1, [x1,80]
-	ldrh	w4, [x5,6]
-	ldrh	w2, [x5,2]
-	ldrb	w3, [x5,5]
-	ldrh	w5, [x5,10]
-	bl	printk
-	ldrh	w0, [x19,3276]
-	mov	w2, 4
-	ldrb	w3, [x19,3244]
-	ldr	x1, [x19,3840]
-	mul	w3, w0, w3
-	adrp	x0, .LC180
-	add	x0, x0, :lo12:.LC180
-	lsl	w3, w3, 1
-	bl	rknand_print_hex
-	ldr	x1, [x19,72]
-	adrp	x0, .LC181
-	ldrh	w3, [x19,56]
-	add	x0, x0, :lo12:.LC181
-	mov	w2, 2
-	bl	rknand_print_hex
-	ldr	x3, [x19,2848]
-	adrp	x0, .LC173
-	add	x0, x0, :lo12:.LC173
-	mov	w2, 4
-	add	x1, x3, 704
-	ldrh	w3, [x3,698]
-	bl	rknand_print_hex
-	ldr	x1, [x19,64]
-	adrp	x0, .LC182
-	ldrh	w3, [x19,56]
-	add	x0, x0, :lo12:.LC182
-	mov	w2, 4
-	bl	rknand_print_hex
-	adrp	x0, .LC183
-	add	x1, x19, 3328
-	add	x0, x0, :lo12:.LC183
-	mov	w2, 2
-	mov	w3, 256
-	bl	rknand_print_hex
-	ldrh	w0, [x19,3276]
-	mov	w2, 2
-	ldrb	w3, [x19,3244]
-	ldr	x1, [x19,3848]
-	mul	w3, w0, w3
-	adrp	x0, .LC184
-	add	x0, x0, :lo12:.LC184
-	lsl	w3, w3, 1
-	bl	rknand_print_hex
-	ldr	x19, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	dump_ftl_info, .-dump_ftl_info
-	.align	2
-	.global	pm_ppa_update_check
-	.type	pm_ppa_update_check, %function
-pm_ppa_update_check:
-	adrp	x5, .LANCHOR0
-	mov	w6, 21
-	add	x5, x5, :lo12:.LANCHOR0
-	mov	w7, 1
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	ldrh	w4, [x5,3314]
-	ldrb	w3, [x5,3312]
-	sub	w6, w6, w4
-	lsr	w4, w2, w4
-	lsl	w6, w7, w6
-	sub	w6, w6, #1
-	and	w4, w6, w4
-	udiv	w4, w4, w3
-	ldr	x3, [x5,64]
-	add	x4, x3, x4, uxth 2
-	ldrb	w3, [x4,2]
-	ubfx	x3, x3, 5, 3
-	cmp	w3, 7
-	cset	w4, eq
-	cbnz	w4, .L2471
-	cmp	w3, w7
-	bne	.L2468
-.L2471:
-	mov	w3, w2
-	mov	w2, w1
-	mov	x1, x0
-	adrp	x0, .LC185
-	add	x0, x0, :lo12:.LC185
-	bl	printk
-	bl	dump_ftl_info
-	mov	w4, -1
-.L2468:
-	mov	w0, w4
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	pm_ppa_update_check, .-pm_ppa_update_check
-	.align	2
-	.type	load_l2p_region, %function
-load_l2p_region:
-	stp	x29, x30, [sp, -64]!
-	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	uxth	w23, w1
-	stp	x21, x22, [sp,32]
-	stp	x19, x20, [sp,16]
-	cmp	w23, 31
-	uxth	w21, w0
-	bls	.L2474
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 552
-	mov	w2, 31
-	bl	printk
-.L2474:
-	adrp	x20, .LANCHOR0
-	adrp	x19, .LANCHOR7
-	add	x20, x20, :lo12:.LANCHOR0
-	ldr	x0, [x20,2848]
-	ldrh	w2, [x0,698]
-	cmp	w21, w2
-	bls	.L2475
-	adrp	x0, .LC186
-	mov	w1, w21
-	add	x0, x0, :lo12:.LC186
-	add	x19, x19, :lo12:.LANCHOR7
-	bl	printk
-	mov	x0, 0
-	ldrh	w2, [x19,3282]
-	mov	w1, 255
-	ldr	x0, [x0,8]
-	bl	ftl_memset
-	ldr	x0, [x20,2848]
-	ldrh	w0, [x0,698]
-	cmp	w0, w21
-	bcs	.L2477
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 552
-	mov	w2, 35
-	b	.L2481
-.L2475:
-	add	x0, x0, x21, sxtw 2
-	sbfiz	x23, x23, 4, 32
-	ldr	w22, [x0,704]
-	add	x0, x20, 3872
-	add	x24, x0, x23
-	strh	w21, [x0,x23]
-	strh	wzr, [x24,2]
-	cbnz	w22, .L2478
-	adrp	x0, .LC187
-	mov	w1, w21
-	mov	w2, w22
-	add	x19, x19, :lo12:.LANCHOR7
-	add	x0, x0, :lo12:.LC187
-	bl	printk
-	ldr	x0, [x24,8]
-	mov	w1, 255
-	ldrh	w2, [x19,3282]
-	bl	ftl_memset
-	b	.L2477
-.L2478:
-	add	x23, x19, :lo12:.LANCHOR7
-	ldrb	w3, [x20,2816]
-	ldr	x1, [x24,8]
-	mov	w0, w22
-	ldr	x2, [x23,3272]
-	bl	ftl_read_ppa_page
-	mov	w3, w0
-	ldr	x0, [x23,3272]
-	ldr	w2, [x0]
-	cmp	w2, w21
-	beq	.L2479
-	adrp	x0, .LC188
-	mov	w4, w22
-	mov	w1, w21
-	add	x0, x0, :lo12:.LC188
-	bl	printk
-	ldr	x3, [x20,2848]
-	adrp	x0, .LC189
-	add	x0, x0, :lo12:.LC189
-	mov	w2, 4
-	add	x1, x3, 704
-	ldrh	w3, [x3,698]
-	bl	rknand_print_hex
-	ldrb	w3, [x20,2816]
-	adrp	x0, .LC190
-	ldr	x1, [x24,8]
-	add	x0, x0, :lo12:.LC190
-	mov	w2, 4
-	lsl	w3, w3, 7
-	bl	rknand_print_hex
-	ldr	x1, [x23,3272]
-	adrp	x0, .LC191
-	add	x0, x0, :lo12:.LC191
-	mov	w2, 4
-	mov	w3, 16
-	bl	rknand_print_hex
-	ldrh	w0, [x20,3314]
-	mov	w1, 21
-	mov	w2, 1
-	sub	w1, w1, w0
-	lsr	w22, w22, w0
-	lsl	w1, w2, w1
-	ldrb	w0, [x20,3312]
-	sub	w1, w1, #1
-	and	w22, w1, w22
-	mov	x1, 0
-	udiv	w0, w22, w0
-	bl	ftl_sblk_dump
-.L2479:
-	add	x19, x19, :lo12:.LANCHOR7
-	ldr	x0, [x19,3272]
-	ldr	w0, [x0]
-	cmp	w0, w21
-	beq	.L2477
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 552
-	mov	w2, 57
-.L2481:
-	bl	printk
-.L2477:
-	mov	w0, 0
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 64
-	ret
-	.size	load_l2p_region, .-load_l2p_region
-	.align	2
-	.global	pm_gc
-	.type	pm_gc, %function
-pm_gc:
-	stp	x29, x30, [sp, -80]!
-	add	x29, sp, 0
-	stp	x23, x24, [sp,48]
-	adrp	x23, .LANCHOR0
-	str	x25, [sp,64]
-	stp	x19, x20, [sp,16]
-	add	x20, x23, :lo12:.LANCHOR0
-	adrp	x19, .LANCHOR4
-	stp	x21, x22, [sp,32]
-	add	x19, x19, :lo12:.LANCHOR4
-	ldr	x0, [x20,2848]
-	ldrh	w1, [x0,688]
-	ldrh	w0, [x19,1132]
-	sub	w0, w0, #1
-	cmp	w1, w0
-	blt	.L2484
-	bl	pm_free_sblk
-	ldr	x2, [x20,2848]
-	ldrh	w1, [x19,1132]
-	ldrh	w3, [x2,688]
-	sub	w1, w1, #1
-	cmp	w3, w1
-	blt	.L2484
-	add	x0, x2, x0, uxth 1
-	ldrh	w21, [x0,416]
-	mov	w0, 65535
-	cmp	w21, w0
-	bne	.L2486
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 129
-	add	x1, x1, 568
-	add	x0, x0, :lo12:.LC0
-	bl	printk
-	bl	pm_free_sblk
-	ldr	x1, [x20,2848]
-	add	x0, x1, x0, uxth 1
-	ldrh	w21, [x0,416]
-.L2486:
-	bl	pm_select_ram_region
-	uxth	x20, w0
-	add	x0, x23, :lo12:.LANCHOR0
-	lsl	x1, x20, 4
-	add	x0, x0, 3872
-	mov	x22, x20
-	add	x19, x0, x1
-	ldrh	w0, [x0,x1]
-	mov	w1, 65535
-	cmp	w0, w1
-	beq	.L2487
-	ldr	x1, [x19,8]
-	cbz	x1, .L2487
-	ldrsh	w2, [x19,2]
-	tbz	w2, #31, .L2487
-	bl	pm_write_page
-	ldrh	w0, [x19,2]
-	and	w0, w0, 32767
-	strh	w0, [x19,2]
-.L2487:
-	add	x23, x23, :lo12:.LANCHOR0
-	mov	w19, 0
-	add	x0, x23, 3872
-	mov	w24, 21
-	mov	w25, 1
-	add	x20, x0, x20, lsl 4
-.L2488:
-	ldr	x0, [x23,2848]
-	ldrh	w1, [x0,698]
-	cmp	w1, w19
-	bls	.L2494
-	ldrh	w1, [x23,3314]
-	add	x0, x0, x19, sxtw 2
-	ldr	w0, [x0,704]
-	lsr	w0, w0, w1
-	sub	w1, w24, w1
-	lsl	w1, w25, w1
-	sub	w1, w1, #1
-	and	w1, w0, w1
-	ldrb	w0, [x23,3312]
-	udiv	w1, w1, w0
-	cmp	w21, w1, uxth
-	bne	.L2489
-	mov	w1, w22
-	mov	w0, w19
-	bl	load_l2p_region
-	ldr	x1, [x20,8]
-	mov	w0, w19
-	bl	pm_write_page
-	mov	w0, -1
-	strh	w0, [x20]
-.L2489:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L2488
-.L2494:
-	bl	pm_free_sblk
-.L2484:
-	mov	w0, 0
-	ldr	x25, [sp,64]
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 80
-	ret
-	.size	pm_gc, .-pm_gc
-	.align	2
-	.global	pm_flush_id
-	.type	pm_flush_id, %function
-pm_flush_id:
-	stp	x29, x30, [sp, -32]!
-	ubfiz	x0, x0, 4, 16
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	add	x19, x19, :lo12:.LANCHOR0
-	add	x1, x19, 3872
-	add	x20, x1, x0
-	ldrh	w0, [x1,x0]
-	ldr	x1, [x20,8]
-	bl	pm_write_page
-	ldrh	w0, [x20,2]
-	and	w0, w0, 32767
-	strh	w0, [x20,2]
-	ldr	w0, [x19,3864]
-	cbz	w0, .L2496
-	bl	pm_gc
-	str	wzr, [x19,3864]
-.L2496:
-	mov	w0, 0
-	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	pm_flush_id, .-pm_flush_id
-	.align	2
-	.global	pm_flush
-	.type	pm_flush, %function
-pm_flush:
-	stp	x29, x30, [sp, -32]!
-	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	mov	x19, 0
-	add	x20, x20, :lo12:.LANCHOR0
-	add	x20, x20, 3872
-.L2502:
-	add	x1, x20, x19, lsl 4
-	uxth	w0, w19
-	ldrsh	w1, [x1,2]
-	tbz	w1, #31, .L2501
-	bl	pm_flush_id
-.L2501:
-	add	x19, x19, 1
-	cmp	x19, 32
-	bne	.L2502
-	mov	w0, 0
-	ldp	x19, x20, [sp,16]
-	ldp	x29, x30, [sp], 32
-	ret
-	.size	pm_flush, .-pm_flush
-	.align	2
-	.global	flt_sys_flush
-	.type	flt_sys_flush, %function
-flt_sys_flush:
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	ftl_flush
-	bl	pm_flush
-	bl	ftl_ext_info_flush
-	mov	w0, 0
-	bl	ftl_info_flush
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	flt_sys_flush, .-flt_sys_flush
-	.align	2
-	.global	zftl_deinit
-	.type	zftl_deinit, %function
-zftl_deinit:
-	stp	x29, x30, [sp, -16]!
-	add	x29, sp, 0
-	bl	zftl_flash_de_init
-	bl	flt_sys_flush
-	bl	zftl_flash_de_init
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	zftl_deinit, .-zftl_deinit
-	.align	2
-	.global	pm_init
-	.type	pm_init, %function
-pm_init:
-	stp	x29, x30, [sp, -96]!
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR7
-	stp	x19, x20, [sp,16]
-	add	x22, x21, :lo12:.LANCHOR7
-	adrp	x19, .LANCHOR0
-	add	x20, x19, :lo12:.LANCHOR0
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	mov	w23, w0
-	mov	w0, 1
-	strb	w0, [x22,3280]
-	mov	w0, 64
-	str	wzr, [x20,3864]
-	add	x20, x20, 3872
-	bl	ftl_malloc
-	mov	w24, -1
-	str	x0, [x22,3272]
-	add	x22, x20, 512
-.L2508:
-	strh	w24, [x20]
-	strh	wzr, [x20,2]
-	cbz	w23, .L2507
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2816]
-	lsl	w0, w0, 9
-	bl	ftl_malloc
-	str	x0, [x20,8]
-.L2507:
-	add	x20, x20, 16
-	cmp	x20, x22
-	bne	.L2508
-	add	x20, x19, :lo12:.LANCHOR0
-	add	x21, x21, :lo12:.LANCHOR7
-	mov	w4, 4
-	ldr	x1, [x20,2848]
-	ldr	x25, [x21,3272]
-	ldr	x23, [x20,3880]
-	ldrb	w0, [x1,694]
-	mov	x3, x25
-	ldrh	w1, [x1,692]
-	mov	x2, x23
-	bl	flash_get_last_written_page
-	sxth	w21, w0
-	ldr	x1, [x20,2848]
-	mov	w24, w21
-	ldrh	w2, [x1,696]
-	cmp	w2, w21
-	bgt	.L2509
-	adrp	x0, .LC192
-	ldrh	w1, [x1,692]
-	mov	w3, w21
-	add	x0, x0, :lo12:.LC192
-	adrp	x26, .LC193
-	add	w21, w21, 1
-	bl	printk
-	add	x26, x26, :lo12:.LC193
-	ldr	x0, [x20,2848]
-	ldrsh	w20, [x0,696]
-.L2510:
-	cmp	w20, w21
-	bge	.L2523
-	add	x27, x19, :lo12:.LANCHOR0
-	mov	x2, x23
-	mov	x3, x25
-	ldr	x0, [x27,2848]
-	ldrh	w22, [x27,3324]
-	ldrb	w4, [x27,2816]
-	ldrh	w1, [x0,692]
-	ldrb	w0, [x0,694]
-	madd	w22, w1, w22, w20
-	mov	w1, w22
-	bl	flash_read_page_en
-	mov	w28, w0
-	ldr	x3, [x27,2848]
-	mov	x0, x26
-	mov	w2, w22
-	ldr	w1, [x3,48]
-	add	w1, w1, 1
-	str	w1, [x3,48]
-	ldrh	w3, [x3,694]
-	ldr	w1, [x25]
-	bl	printk
-	cmp	w28, 512
-	beq	.L2511
-	cmn	w28, #1
-	beq	.L2511
-	ldr	x1, [x27,2848]
-	ldr	w0, [x25]
-	ldrh	w2, [x1,698]
-	cmp	w0, w2
-	bcs	.L2511
-	add	x0, x1, x0, uxtw 2
-	str	w22, [x0,704]
-.L2511:
-	add	w20, w20, 1
-	sxth	w20, w20
-	b	.L2510
-.L2523:
-	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x0, .LANCHOR6-127
-	mov	w1, 1
-	add	w24, w24, 1
-	strb	w1, [x0,#:lo12:.LANCHOR6-127]
-	ldr	x0, [x19,2848]
-	strh	w24, [x0,696]
-	bl	pm_free_sblk
-	ldr	x1, [x19,3880]
-	mov	w0, -1
-	bl	pm_write_page
-	ldr	x1, [x19,3880]
-	mov	w0, -1
-	bl	pm_write_page
-.L2509:
-	bl	pm_free_sblk
-	bl	pm_gc
-	mov	w0, 0
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	pm_init, .-pm_init
-	.align	2
-	.global	pm_log2phys
-	.type	pm_log2phys, %function
-pm_log2phys:
+	.global	flash_info_flush
+	.type	flash_info_flush, %function
+flash_info_flush:
+	adrp	x0, .LANCHOR2
 	stp	x29, x30, [sp, -96]!
-	mov	w5, w0
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR0
-	str	x25, [sp,64]
-	add	x3, x21, :lo12:.LANCHOR0
-	mov	x22, x1
-	stp	x19, x20, [sp,16]
-	stp	x23, x24, [sp,48]
-	mov	w23, w2
-	mov	x19, 0
-	ldrb	w4, [x3,2816]
-	ldr	w2, [x3,2824]
-	add	x3, x3, 3872
-	lsl	w20, w4, 7
-	lsl	w24, w4, 7
-	cmp	w0, w2
-	udiv	w20, w0, w20
-	uxth	w25, w20
-	msub	w24, w25, w24, w0
-	uxth	x24, w24
-	bcc	.L2536
-	adrp	x0, .LC194
-	mov	w1, w5
-	add	x0, x0, :lo12:.LC194
-	bl	printk
-	mov	w0, -1
-	b	.L2526
-.L2540:
-	ldrh	w0, [x3]
-	cmp	w0, w25
-	beq	.L2528
-.L2527:
-	add	w19, w19, 1
-	add	x3, x3, 16
-	uxth	x19, w19
-	cmp	w19, 32
-	beq	.L2539
-.L2536:
-	ldr	x0, [x3,8]
-	cbnz	x0, .L2540
-	b	.L2527
-.L2539:
-	bl	pm_select_ram_region
-	uxth	x19, w0
-	add	x2, x21, :lo12:.LANCHOR0
-	sbfiz	x3, x19, 4, 32
-	add	x2, x2, 3872
-	mov	w1, w0
-	add	x4, x2, x3
-	ldrh	w3, [x2,x3]
-	mov	w2, 65535
-	cmp	w3, w2
-	bne	.L2541
-.L2532:
-	adrp	x0, .LANCHOR7+3284
-	strb	w19, [x0,#:lo12:.LANCHOR7+3284]
-	mov	w0, w25
-	bl	load_l2p_region
-.L2528:
-	cbnz	w23, .L2529
-	add	x0, x21, :lo12:.LANCHOR0
-	add	x0, x0, x19, lsl 4
-	ldr	x0, [x0,3880]
-	ldr	w0, [x0,x24,lsl 2]
-	str	w0, [x22]
-	b	.L2530
-.L2529:
-	add	x0, x21, :lo12:.LANCHOR0
-	ldr	w2, [x22]
-	add	x0, x0, 3872
-	add	x0, x0, x19, lsl 4
-	ldr	x1, [x0,8]
-	str	w2, [x1,x24,lsl 2]
-	ldrh	w1, [x0,2]
-	orr	w1, w1, -32768
-	strh	w1, [x0,2]
-	adrp	x0, .LANCHOR4+32
-	strb	w20, [x0,#:lo12:.LANCHOR4+32]
-.L2530:
-	add	x21, x21, :lo12:.LANCHOR0
-	mov	w2, 32767
-	add	x21, x21, 3872
-	mov	w0, 0
-	add	x19, x21, x19, lsl 4
-	ldrh	w1, [x19,2]
-	and	w3, w1, 32767
-	cmp	w3, w2
-	beq	.L2526
-	add	w1, w1, 1
-	strh	w1, [x19,2]
-	b	.L2526
-.L2541:
-	ldrsh	w2, [x4,2]
-	tbz	w2, #31, .L2532
-	str	x1, [x29,88]
-	bl	pm_flush_id
-	ldr	x1, [x29,88]
-	b	.L2532
-.L2526:
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldr	x25, [sp,64]
-	ldp	x29, x30, [sp], 96
-	ret
-	.size	pm_log2phys, .-pm_log2phys
-	.align	2
-	.global	ftl_read_ahead
-	.type	ftl_read_ahead, %function
-ftl_read_ahead:
-	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	stp	x23, x24, [sp,48]
-	add	x23, x20, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
-	mov	w21, 0
-	ldr	w0, [x23,2868]
-	cmn	w0, #1
-	beq	.L2543
-	mov	w0, w21
-	bl	buf_alloc
-	mov	x19, x0
-	mov	w0, -1
-	cbz	x19, .L2552
-	ldr	w22, [x23,2868]
-	str	w22, [x19,36]
-	str	w0, [x23,2868]
-	mov	w0, w22
-	ldr	x24, [x19,8]
-	ldr	x23, [x19,24]
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,76]
-	cmn	w0, #1
-	bne	.L2545
-	mov	w0, w22
-	add	x1, x29, 76
-	mov	w2, w21
-	bl	pm_log2phys
-.L2545:
-	ldr	w1, [x29,76]
-	str	w1, [x19,40]
-	str	w1, [x19,44]
-	cmn	w1, #1
-	bne	.L2546
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	x0, x24
-	mov	w1, 0
-	ldrb	w2, [x20,2816]
-	lsl	w2, w2, 9
-	bl	ftl_memset
-	ldrb	w0, [x19,2]
-	orr	w0, w0, 8
-	strb	w0, [x19,2]
-	b	.L2557
-.L2546:
-	mov	x0, x19
-	mov	w1, 1
-	bl	sblk_read_page
-	ldr	w24, [x19,52]
-	cmn	w24, #1
-	bne	.L2547
-	ldrb	w0, [x19,2]
-	add	x20, x20, :lo12:.LANCHOR0
-	and	w0, w0, -9
-	strb	w0, [x19,2]
-	ldr	x1, [x20,80]
-	ldr	w0, [x1,552]
-	add	w0, w0, 1
-	str	w0, [x1,552]
-	b	.L2548
-.L2547:
-	cmp	w24, 256
-	bne	.L2548
-	add	x20, x20, :lo12:.LANCHOR0
-	mov	w5, 21
-	mov	w21, 1
-	ldr	w4, [x29,76]
-	ldr	w2, [x19,36]
-	adrp	x0, .LC195
-	ldrh	w3, [x20,3314]
-	add	x0, x0, :lo12:.LC195
-	ldrb	w20, [x20,3312]
-	sub	w5, w5, w3
-	lsr	w3, w4, w3
-	lsl	w5, w21, w5
-	sub	w5, w5, #1
-	and	w3, w5, w3
-	udiv	w20, w3, w20
-	ldr	w3, [x19,40]
-	uxth	w1, w20
-	bl	printk
-	mov	w0, w20
-	mov	w1, w21
-	mov	w2, 0
-	bl	gc_add_sblk
-.L2548:
-	ldr	w5, [x23,4]
-	cmp	w5, w22
-	beq	.L2549
-	adrp	x0, .LC196
-	ldrb	w1, [x19,1]
-	ldr	w3, [x29,76]
-	add	x0, x0, :lo12:.LC196
-	ldr	w4, [x23]
-	mov	w2, w22
-	ldr	w6, [x23,8]
-	ldr	w7, [x23,12]
-	bl	printk
-.L2549:
-	ldr	w0, [x23,4]
-	cmp	w0, w22
-	cset	w21, ne
-	cbnz	w21, .L2554
-	cmn	w24, #1
-	bne	.L2543
-.L2554:
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 576
-	mov	w2, 874
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	tbz	x0, 12, .L2490
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC127
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC127
+	mov	w1, 251
+	add	x2, x2, 512
 	bl	printk
-.L2557:
-	mov	w21, 0
-	b	.L2543
-.L2552:
-	mov	w21, w0
-.L2543:
-	mov	w0, w21
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 80
-	ret
-	.size	ftl_read_ahead, .-ftl_read_ahead
-	.align	2
-	.global	gc_recovery
-	.type	gc_recovery, %function
-gc_recovery:
-	sub	sp, sp, #208
-	stp	x29, x30, [sp,32]
-	add	x29, sp, 32
-	stp	x19, x20, [sp,48]
-	adrp	x19, .LANCHOR0
-	stp	x23, x24, [sp,80]
-	add	x24, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,64]
-	stp	x25, x26, [sp,96]
-	stp	x27, x28, [sp,112]
+.L2490:
 	adrp	x22, .LANCHOR4
-	strb	wzr, [x24,3241]
+	adrp	x23, .LANCHOR0
 	add	x0, x22, :lo12:.LANCHOR4
-	ldr	x20, [x24,80]
-	add	x21, x20, 80
-	strb	wzr, [x0,1098]
-	bl	gc_init
-	ldrh	w1, [x20,80]
-	mov	w0, 65535
-	str	x22, [x29,152]
-	cmp	w1, w0
-	ldr	x0, [x24,80]
-	beq	.L2559
-	mov	w1, -1
-	strh	w1, [x0,130]
-	mov	w0, 1
-	bl	buf_alloc
-	mov	x23, x0
-	ldrb	w0, [x21,9]
-	ldrh	w1, [x24,3324]
-	sub	w0, w0, #1
-	add	x0, x21, x0, sxtw 1
-	ldrh	w0, [x0,16]
-	mul	w0, w0, w1
-	ldrb	w1, [x24,3225]
-	str	w0, [x29,168]
-	cmp	w1, 3
-	bne	.L2560
-	ldrh	w1, [x24,3276]
-	sub	w1, w1, #1
-	add	w0, w1, w0
-	orr	w0, w0, 50331648
-	b	.L2606
-.L2560:
-	cmp	w1, 2
-	bne	.L2561
-	ldrh	w1, [x24,3276]
-	add	w0, w0, w1, lsl 1
-	sub	w0, w0, #1
-	orr	w0, w0, 33554432
-.L2606:
-	str	w0, [x23,40]
-.L2561:
-	mov	x0, x23
-	mov	w1, 1
-	bl	sblk_read_page
-	ldr	w0, [x23,52]
-	cmp	w0, 512
-	beq	.L2562
-	cmn	w0, #1
-	beq	.L2562
-	ldr	x0, [x23,24]
-	ldr	w1, [x0]
-	mov	w0, 15555
-	movk	w0, 0xf55f, lsl 16
-	cmp	w1, w0
-	beq	.L2563
-.L2562:
-	mov	x0, x23
-	bl	buf_free
-	ldr	x7, [x23,24]
-	ldr	x6, [x23,8]
-	ldr	w0, [x7,4]
-	str	w0, [sp]
-	ldr	w0, [x7,8]
-	str	w0, [sp,8]
-	ldr	w0, [x7,12]
-	str	w0, [sp,16]
-	adrp	x0, .LC197
-	add	x0, x0, :lo12:.LC197
-	ldr	w3, [x6]
-	ldr	w4, [x6,4]
-	ldr	w5, [x6,8]
-	ldr	w1, [x23,40]
-	ldr	w2, [x23,52]
-	ldr	w6, [x6,12]
-	ldr	w7, [x7]
-	bl	printk
-	b	.L2609
-.L2563:
-	add	x24, x19, :lo12:.LANCHOR0
-	ldr	x0, [x29,152]
-	ldr	x1, [x23,8]
-	add	x25, x0, :lo12:.LANCHOR4
-	ldrb	w2, [x24,3244]
-	ldrh	w0, [x24,3242]
-	mul	w2, w0, w2
-	ldr	x0, [x25,1104]
-	lsl	w2, w2, 2
-	bl	ftl_memcpy
-	ldrh	w0, [x24,3242]
-	ldrb	w2, [x24,3244]
-	ldr	x1, [x23,8]
-	mul	w2, w0, w2
-	add	x1, x1, x2, sxtw 2
-	ldr	x0, [x25,1112]
-	lsl	w2, w2, 2
-	bl	ftl_memcpy
-	ldrb	w27, [x24,3225]
-	ldrh	w26, [x24,3276]
-	cmp	w27, 2
-	bne	.L2565
-	lsl	w26, w26, 1
-	mov	w27, 1
-.L2565:
-	mov	w22, 0
-	adrp	x24, .LC198
-	add	x0, x24, :lo12:.LC198
-	mov	w25, w22
-	str	x0, [x29,128]
-	b	.L2566
-.L2611:
-	ldr	x0, [x0,1112]
-	ldr	w1, [x0,x12]
-	ldr	w0, [x7,8]
-	cmp	w1, w0
-	bne	.L2570
-.L2595:
-	add	w25, w25, 1
-	add	w28, w28, 1
-.L2574:
-	cmp	w28, w27
-	bhi	.L2610
-	ldr	x0, [x29,144]
-	add	x1, x19, :lo12:.LANCHOR0
-	add	x0, x0, 8
-	ldrh	w2, [x1,3324]
-	ldrb	w1, [x1,3225]
-	ldrh	w0, [x21,x0,lsl 1]
-	cmp	w1, 3
-	mul	w0, w0, w2
-	str	w0, [x29,168]
-	bne	.L2567
-	add	w0, w0, w22
-	orr	w0, w0, w28, lsl 24
-.L2607:
-	str	w0, [x23,40]
-	mov	w1, 1
-	mov	x0, x23
-	bl	sblk_read_page
-	ldr	x0, [x29,152]
-	sbfiz	x12, x25, 2, 32
-	ldr	x7, [x23,24]
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	w6, [x7,4]
-	ldr	x1, [x0,1104]
-	ldr	w3, [x1,x12]
-	cmp	w3, w6
-	beq	.L2611
-.L2570:
-	ldr	x0, [x29,152]
-	str	x12, [x29,120]
-	add	x13, x0, :lo12:.LANCHOR4
-	ldr	w0, [x7,12]
-	str	x13, [x29,112]
-	ldr	x4, [x13,1112]
-	str	w0, [sp]
-	ldr	x0, [x29,128]
-	ldr	w4, [x4,x12]
-	ldr	w5, [x7]
-	ldr	w1, [x23,40]
-	ldr	w2, [x23,52]
-	ldr	w7, [x7,8]
-	bl	printk
-	ldr	x13, [x29,112]
-	ldr	x12, [x29,120]
-	ldr	x0, [x13,1104]
-	ldr	w0, [x0,x12]
-	cmn	w0, #1
-	beq	.L2595
-	mov	x0, x23
-	bl	buf_free
-.L2609:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x20,80]
-	mov	w28, 0
-	ldr	x1, [x0,72]
-	strh	wzr, [x1,x2,lsl 1]
-	ldr	x0, [x0,80]
-	ldrh	w1, [x20,80]
-	strh	w1, [x0,130]
-	b	.L2564
-.L2573:
-	add	w22, w22, 1
-.L2566:
-	cmp	w22, w26
-	beq	.L2575
-	sub	w0, w22, #1
-	mov	w24, 0
-	str	w0, [x29,140]
-.L2576:
-	ldrb	w0, [x21,9]
-	cmp	w24, w0
-	bge	.L2573
-	sxtw	x0, w24
-	mov	w28, 1
-	str	x0, [x29,144]
-	b	.L2574
-.L2567:
-	cmp	w1, 2
-	bne	.L2569
-	ldr	w1, [x29,140]
-	add	w0, w0, w1
-	add	w0, w0, w28
-	orr	w0, w0, 33554432
-	b	.L2607
-.L2569:
-	add	w0, w0, w22
-	b	.L2607
-.L2610:
-	add	w24, w24, 1
-	b	.L2576
-.L2575:
-	mov	x0, x23
-	mov	w28, 0
-	mov	w23, w28
-	bl	buf_free
-	str	w28, [x29,144]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x21,9]
-	ldrh	w3, [x20,80]
-	ldr	x2, [x0,72]
-	ldrh	w0, [x0,3242]
-	mul	w0, w1, w0
-	strh	w0, [x2,x3,lsl 1]
-	adrp	x0, .LC199
-	add	x0, x0, :lo12:.LC199
-	str	x0, [x29,104]
-.L2577:
-	cmp	w23, w26
-	beq	.L2590
-	sub	w0, w23, #1
-	mov	w25, 0
-	str	w0, [x29,112]
-.L2591:
-	ldrb	w0, [x21,9]
-	cmp	w25, w0
-	bge	.L2588
-	sxtw	x0, w25
-	mov	w24, 1
-	str	x0, [x29,120]
-.L2589:
-	cmp	w24, w27
-	bhi	.L2612
-	ldr	x1, [x29,152]
-	ldr	w0, [x29,144]
-	add	x1, x1, :lo12:.LANCHOR4
-	sbfiz	x0, x0, 2, 32
-	ldr	x2, [x1,1104]
-	ldr	w22, [x2,x0]
-	cmn	w22, #1
-	beq	.L2578
-	ldr	x1, [x1,1112]
-	ldr	w0, [x1,x0]
-	str	w0, [x29,140]
-	mov	w0, w22
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,172]
-	cmn	w0, #1
-	bne	.L2579
-	mov	w0, w22
-	add	x1, x29, 172
-	mov	w2, 0
-	bl	pm_log2phys
-.L2579:
-	ldr	x0, [x29,120]
-	add	x0, x0, 8
-	ldrh	w3, [x21,x0,lsl 1]
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0,3324]
-	ldrb	w0, [x0,3225]
-	cmp	w0, 3
-	mul	w3, w3, w1
-	bne	.L2580
-	add	w3, w3, w23
-	orr	w3, w3, w24, lsl 24
-	b	.L2608
-.L2580:
-	cmp	w0, 2
-	bne	.L2582
-	ldr	w0, [x29,112]
-	add	w3, w3, w0
-	add	w3, w3, w24
-	orr	w3, w3, 33554432
-	b	.L2608
-.L2582:
-	add	w3, w3, w23
-.L2608:
-	add	x0, x19, :lo12:.LANCHOR0
-	str	w3, [x29,168]
-	ldr	w1, [x29,140]
-	mov	w4, 21
-	mov	w2, 1
-	ldrh	w3, [x0,3314]
-	ldrb	w0, [x0,3312]
-	lsr	w1, w1, w3
-	sub	w3, w4, w3
-	lsl	w3, w2, w3
-	sub	w3, w3, #1
-	and	w3, w1, w3
-	ldr	w1, [x29,140]
-	udiv	w3, w3, w0
-	uxth	w0, w3
-	str	w0, [x29,128]
-	ldr	w0, [x29,172]
-	cmp	w0, w1
-	bne	.L2583
-	ldr	x0, [x29,104]
-	mov	w1, w22
-	ldr	w2, [x29,168]
-	bl	pm_ppa_update_check
-	cbz	w0, .L2584
-.L2605:
-	b	.L2605
-.L2584:
-	mov	w0, w22
-	add	x1, x29, 168
-	mov	w2, 1
-	add	w28, w28, 1
-	bl	pm_log2phys
-	ldrh	w0, [x29,128]
-	bl	ftl_vpn_decrement
-	b	.L2586
-.L2583:
-	ldr	w1, [x29,168]
-	cmp	w0, w1
-	csinc	w28, w28, w28, ne
-.L2586:
-	ldr	w0, [x29,144]
-	add	x2, x19, :lo12:.LANCHOR0
-	add	w0, w0, 1
-	str	w0, [x29,144]
-	ldr	w0, [x29,128]
-	ldr	x1, [x2,64]
-	add	x1, x1, x0, lsl 2
-	ldrb	w1, [x1,2]
-	ands	w1, w1, 224
-	bne	.L2578
-	lsl	x0, x0, 1
-	ldr	x2, [x2,72]
-	ldrh	w3, [x2,x0]
-	cbz	w3, .L2578
-	strh	w1, [x2,x0]
-.L2578:
-	add	w24, w24, 1
-	b	.L2589
-.L2612:
-	add	w25, w25, 1
-	b	.L2591
-.L2588:
-	add	w23, w23, 1
-	b	.L2577
-.L2590:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x20,80]
-	ldr	x0, [x0,72]
-	strh	w28, [x0,x1,lsl 1]
-.L2564:
-	ldrh	w1, [x20,80]
-	adrp	x0, .LC200
-	mov	w2, w28
-	add	x0, x0, :lo12:.LC200
+	mov	w1, 0
+	mov	w2, 64
+	add	x19, x23, :lo12:.LANCHOR0
+	adrp	x24, .LC180
+	adrp	x25, .LC181
+	ldr	x0, [x0,1232]
+	mov	w26, 0
+	add	x24, x24, :lo12:.LC180
+	add	x25, x25, :lo12:.LC181
+	bl	ftl_memset
+	ldr	x1, [x19,728]
+	adrp	x0, .LC179
+	add	x0, x0, :lo12:.LC179
+	mov	w2, 4
+	mov	w3, 16
+	bl	rknand_print_hex
+	ldr	x19, [x19,728]
+	add	x0, x19, 16
+	ldr	w1, [x19,8]
+	bl	js_hash
+	str	w0, [x19,12]
+.L2491:
+	add	x21, x22, :lo12:.LANCHOR4
+	add	x27, x23, :lo12:.LANCHOR0
+	mov	x0, x24
+	ldrb	w20, [x21,1240]
+	ldrh	w19, [x21,1242]
+	mov	w1, w20
+	ldrh	w28, [x27,2]
+	mov	w2, w19
 	bl	printk
-	mov	w0, -1
-	strh	w0, [x20,80]
-	bl	pm_flush
-	bl	ftl_ext_info_flush
-	add	x0, x19, :lo12:.LANCHOR0
-	mov	w1, 65535
-	ldr	x0, [x0,80]
-	ldrh	w0, [x0,130]
+	ldrh	w1, [x21,1092]
+	ldrh	w0, [x21,1242]
+	sub	w1, w1, #1
 	cmp	w0, w1
-	beq	.L2592
-	bl	ftl_free_sblk
-.L2592:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, -1
-	ldr	x1, [x19,2848]
-	strh	w0, [x1,126]
-	ldr	x1, [x19,80]
-	strh	w0, [x1,130]
+	blt	.L2492
+	ldr	x1, [x27,728]
+	ldrb	w19, [x21,1241]
+	strh	wzr, [x21,1242]
+	ldr	w0, [x1,4]
+	add	w0, w0, 1
+	str	w0, [x1,4]
+	ldrb	w0, [x21,1240]
+	ldr	x20, [x27,728]
+	strb	w0, [x21,1241]
+	mov	x0, x20
+	strb	w19, [x21,1240]
+	ldrh	w1, [x20,16]
+	add	w1, w1, 1
+	strh	w1, [x0,16]!
+	ldr	w1, [x20,8]
+	bl	js_hash
+	str	w0, [x20,12]
+	ldrh	w0, [x27,2]
+	mul	w19, w19, w0
 	mov	w0, 0
-	bl	ftl_info_flush
-	b	.L2558
-.L2559:
-	ldrh	w0, [x0,130]
-	cmp	w0, w1
-	beq	.L2558
-	ldr	x1, [x24,2848]
-	ldrh	w1, [x1,126]
-	cmp	w1, w0
-	bne	.L2594
-	bl	pm_flush
-	ldr	x0, [x24,80]
-	ldrh	w0, [x0,130]
-	bl	ftl_free_sblk
-	ldr	x0, [x24,2848]
-	mov	w1, -1
-	strh	w1, [x0,126]
+	b	.L2500
+.L2492:
+	madd	w19, w20, w28, w19
+	cbnz	w0, .L2493
+.L2500:
+	mov	w1, w19
+	bl	flash_erase_block
+.L2493:
+	add	x2, x23, :lo12:.LANCHOR0
+	add	x20, x22, :lo12:.LANCHOR4
+	mov	w4, 4
+	mov	w5, 1
+	ldr	x1, [x2,728]
+	ldr	x0, [x20,1232]
+	ldr	w1, [x1,4]
+	str	w1, [x0]
+	mov	w0, 21321
+	movk	w0, 0x5359, lsl 16
+	ldr	x1, [x20,1232]
+	str	w0, [x1,4]
+	mov	w1, w19
 	mov	w0, 0
-	bl	ftl_info_flush
-.L2594:
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w1, -1
-	ldr	x0, [x19,80]
-	strh	w1, [x0,130]
-.L2558:
-	sub	sp, x29, #32
-	ldp	x19, x20, [sp,48]
-	ldp	x21, x22, [sp,64]
-	ldp	x23, x24, [sp,80]
-	ldp	x25, x26, [sp,96]
-	ldp	x27, x28, [sp,112]
-	ldp	x29, x30, [sp,32]
-	add	sp, sp, 208
+	ldr	x2, [x2,728]
+	ldr	x3, [x20,1232]
+	bl	flash_prog_page_en
+	cmn	w0, #1
+	ldrh	w1, [x20,1242]
+	add	w1, w1, 1
+	strh	w1, [x20,1242]
+	bne	.L2494
+	mov	x0, x25
+	mov	w1, w19
+	bl	printk
+	b	.L2491
+.L2494:
+	cbnz	w26, .L2501
+	mov	w26, 1
+	b	.L2491
+.L2501:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
 	ret
-	.size	gc_recovery, .-gc_recovery
+	.size	flash_info_flush, .-flash_info_flush
 	.align	2
-	.global	zftl_init
-	.type	zftl_init, %function
-zftl_init:
-	stp	x29, x30, [sp, -64]!
-	adrp	x1, .LANCHOR5+513
-	mov	w0, -1
+	.global	nand_flash_init
+	.type	nand_flash_init, %function
+nand_flash_init:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	strb	w0, [x1,#:lo12:.LANCHOR5+513]
-	add	x20, x19, :lo12:.LANCHOR0
-	adrp	x1, .LC2
+	adrp	x20, .LANCHOR2
+	mov	x19, x0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	strb	w0, [x20,2866]
-	mov	w0, -1
-	str	w0, [x20,2868]
-	adrp	x0, .LC1
-	add	x1, x1, :lo12:.LC2
-	add	x0, x0, :lo12:.LC1
-	strb	wzr, [x20,2840]
-	adrp	x21, .LANCHOR7
-	strb	wzr, [x20,2841]
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	tbz	x0, 12, .L2503
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC127
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC127
+	mov	w1, 2209
+	add	x2, x2, 536
 	bl	printk
-	adrp	x7, .LANCHOR2
-	ldrb	w4, [x20,98]
-	add	x2, x7, :lo12:.LANCHOR2
-	strb	w4, [x20,3326]
-	ldrh	w5, [x20,210]
-	strh	w5, [x20,3324]
-	ldrb	w3, [x2,389]
-	strb	w3, [x20,3312]
-	ldrb	w6, [x2,388]
-	mul	w3, w3, w4
-	ldrh	w1, [x2,386]
-	ldrb	w0, [x2,385]
-	uxtb	w4, w3
-	add	x3, x21, :lo12:.LANCHOR7
-	ldrh	w8, [x2,390]
-	ubfiz	w11, w0, 9, 7
-	sdiv	w9, w1, w6
-	strb	w6, [x20,3225]
-	strb	w0, [x20,2816]
-	mov	w2, 0
-	strh	w1, [x20,3242]
-	strh	w9, [x20,3276]
-	strb	w4, [x20,3244]
-	strh	w8, [x20,56]
-	mov	x20, x7
-	strh	w11, [x3,3282]
-	mov	w3, 1
-.L2614:
-	cmp	w3, w5
-	bhi	.L2678
-	add	w2, w2, 1
-	lsl	w3, w3, 1
-	uxth	w2, w2
-	b	.L2614
-.L2678:
-	mul	w3, w0, w1
-	mov	w1, 57344
-	add	x7, x19, :lo12:.LANCHOR0
-	movk	w1, 0x1c, lsl 16
-	sub	w2, w2, #1
-	mul	w5, w3, w8
-	mul	w1, w4, w1
-	strh	w2, [x7,3314]
-	lsr	w2, w5, 21
-	mul	w5, w5, w4
-	mul	w1, w1, w2
-	str	w5, [x7,2820]
-	add	x10, x21, :lo12:.LANCHOR7
-	add	w5, w1, 24576
-	adrp	x22, .LANCHOR4
-	mul	w3, w3, w4
-	udiv	w2, w5, w0
-	sub	w0, w11, #1
-	str	w2, [x7,2824]
-	sub	w3, w3, #1
-	str	w5, [x10,3288]
-	str	w1, [x7,4]
-	add	w0, w0, w2, lsl 2
-	mul	w2, w9, w4
-	udiv	w0, w0, w11
-	strh	w0, [x10,3266]
-	add	x10, x22, :lo12:.LANCHOR4
-	ubfiz	w0, w0, 4, 16
-	sdiv	w0, w0, w2
-	strh	w0, [x10,1132]
-	add	w0, w8, w8, lsl 1
-	asr	w0, w0, 2
-	strh	w0, [x7,3320]
-	udiv	w3, w5, w3
-	lsr	w0, w8, 4
-	cmp	w0, 79
-	strh	w0, [x7,3280]
-	add	w3, w3, 8
-	strh	w3, [x7,3282]
-	bhi	.L2616
-	mov	w0, 80
-	strh	w0, [x7,3280]
-.L2616:
-	add	x2, x19, :lo12:.LANCHOR0
-	mov	w0, 4000
-	mov	w3, 1024
-	cmp	w6, 2
-	strh	w0, [x2,3316]
-	mov	w0, 50
-	strh	w0, [x2,3318]
-	add	x0, x22, :lo12:.LANCHOR4
-	strh	w3, [x0,1128]
-	mov	w3, 64
-	strh	w3, [x0,1130]
-	beq	.L2617
-	ldrb	w0, [x2,3240]
-	cbz	w0, .L2618
-.L2617:
+.L2503:
+	mov	x0, x19
+	adrp	x19, .LANCHOR0
+	add	x22, x19, :lo12:.LANCHOR0
+	adrp	x21, .LANCHOR4
+	bl	nandc_init
+	add	x24, x22, 748
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w1, 0
+	add	x0, x0, 376
+	str	x0, [x22,624]
+	mov	w0, 1
+	mov	w2, 8
+	strb	w0, [x22,633]
+	add	x0, x22, 736
+	mov	x23, 0
+	mov	w26, 2
+	bl	ftl_memset
+	mov	x25, x24
+	add	x0, x21, :lo12:.LANCHOR4
+	mov	w1, 0
+	add	x0, x0, 1096
+	mov	w2, 32
+	mov	w27, 44
+	bl	ftl_memset
+.L2509:
+	mov	w0, w23
+	mov	x1, x24
+	bl	flash_read_id
+	add	x0, x22, 744
+	strb	w26, [x23,x0]
+	cbnz	x23, .L2504
+	ldrb	w0, [x25]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bls	.L2505
+.L2507:
+	mov	w22, -2
+	b	.L2571
+.L2505:
+	ldrb	w0, [x25,1]
+	cmp	w0, 255
+	beq	.L2507
+.L2504:
+	ldrb	w0, [x24]
+	cmp	w0, 181
+	bne	.L2508
+	strb	w27, [x24]
+.L2508:
+	add	x23, x23, 1
+	add	x24, x24, 8
+	cmp	x23, 4
+	bne	.L2509
+	add	x23, x20, :lo12:.LANCHOR2
+	add	x24, x19, :lo12:.LANCHOR0
+	add	x23, x23, 440
+	mov	w22, 0
+	add	x24, x24, 748
+.L2512:
+	ldrb	w2, [x23]
+	add	x0, x23, 1
+	mov	x1, x24
+	bl	flash_mem_cmp8
+	cbnz	w0, .L2510
+	add	x1, x20, :lo12:.LANCHOR2
+	ubfiz	x22, x22, 5, 32
+	add	x0, x1, 440
+	adds	x22, x0, x22
+	beq	.L2507
+	ldrb	w3, [x22,22]
+	mov	x0, 0
+	b	.L2514
+.L2510:
+	add	w22, w22, 1
+	add	x23, x23, 32
+	cmp	w22, 30
+	bne	.L2512
+	b	.L2507
+.L2514:
+	add	x4, x1, x0, lsl 5
+	mov	w2, w0
+	ldrb	w4, [x4,1400]
+	cmp	w4, w3
+	beq	.L2513
+	add	x0, x0, 1
+	cmp	x0, 4
+	bne	.L2514
+	mov	w2, w0
+.L2513:
+	add	x23, x20, :lo12:.LANCHOR2
+	add	x24, x19, :lo12:.LANCHOR0
+	add	x1, x23, 1400
+	ubfiz	x2, x2, 5, 32
+	add	x1, x1, x2
+	add	x0, x24, 640
+	mov	w2, 32
+	add	x23, x23, 376
+	bl	ftl_memcpy
+	mov	x0, x23
+	mov	x1, x22
+	mov	w2, 32
+	bl	ftl_memcpy
+	ldrb	w0, [x24,516]
+	cmp	w0, 8
+	bhi	.L2515
+	ldrb	w1, [x23,20]
+	cmp	w1, 60
+	bls	.L2516
+	mov	w1, 60
+	strb	w1, [x23,20]
+.L2516:
+	cmp	w0, 8
+	bne	.L2515
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,748]
+	cmp	w0, 44
+	beq	.L2577
+.L2515:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2517
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC127
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC127
+	mov	w1, 2233
+	add	x2, x2, 536
+	bl	printk
+.L2517:
+	add	x23, x21, :lo12:.LANCHOR4
+	mov	w0, 16384
+	add	x22, x19, :lo12:.LANCHOR0
+	add	x24, x20, :lo12:.LANCHOR2
+	bl	ftl_malloc
+	str	x0, [x23,1248]
+	mov	w0, 16384
+	bl	ftl_malloc
+	str	x0, [x23,1192]
+	mov	w0, 2048
+	bl	ftl_malloc
+	str	x0, [x22,728]
+	mov	w0, 64
+	bl	ftl_malloc
+	str	x0, [x23,1256]
+	mov	w0, 64
+	bl	ftl_malloc
+	str	x0, [x23,1208]
+	mov	w0, 64
+	bl	ftl_malloc
+	strb	wzr, [x23,1266]
+	str	x0, [x23,1232]
+	bl	flash_die_info_init
+	ldrb	w0, [x24,394]
+	bl	flash_lsb_page_tbl_build
+	ldrb	w0, [x24,396]
+	bl	nandc_bch_sel
+	str	xzr, [x23,1224]
+	ldr	x1, [x22,624]
+	ldrh	w0, [x1,16]
+	ubfx	x2, x0, 8, 3
+	strb	w2, [x22,780]
+	ubfx	x2, x0, 3, 1
+	strb	w2, [x23,1265]
+	ubfx	x2, x0, 4, 1
+	strb	w2, [x22,781]
+	ubfx	x2, x0, 12, 1
+	strb	w2, [x22,3272]
+	ubfx	x2, x0, 13, 1
+	ubfx	x0, x0, 14, 1
+	strb	w0, [x22,1]
+	ldrb	w0, [x1,28]
+	mov	w1, 60
+	strb	w1, [x22,632]
+	ldrb	w1, [x22,516]
+	strb	w2, [x22,3348]
+	strb	w0, [x19,#:lo12:.LANCHOR0]
+	cmp	w1, 9
+	bne	.L2518
+	mov	w1, 70
+	strb	w1, [x22,632]
+.L2518:
+	add	x2, x20, :lo12:.LANCHOR2
+	add	x1, x21, :lo12:.LANCHOR4
+	add	x2, x2, 376
+	add	x3, x19, :lo12:.LANCHOR0
+	strb	w0, [x1,1264]
+	ldrb	w0, [x2,19]
+	ldrh	w2, [x2,16]
+	strb	w0, [x3,725]
+	tbz	x2, 6, .L2520
+	sub	w2, w0, #17
+	uxtb	w2, w2
+	cmp	w2, 2
+	bhi	.L2521
+	adrp	x2, micron_read_retrial
+	cmp	w0, 19
+	add	x2, x2, :lo12:micron_read_retrial
+	str	x2, [x1,1224]
+	bne	.L2573
+	mov	w0, 15
+	b	.L2574
+.L2521:
+	sub	w2, w0, #65
+	uxtb	w2, w2
+	cmp	w2, 1
+	bls	.L2542
+	cmp	w0, 33
+	bne	.L2524
+.L2542:
+	add	x0, x21, :lo12:.LANCHOR4
+	adrp	x1, toshiba_read_retrial
+	add	x1, x1, :lo12:toshiba_read_retrial
+	mov	w2, 4
+	str	x1, [x0,1224]
+	add	x1, x19, :lo12:.LANCHOR0
+	strb	w2, [x1,726]
+	mov	w1, 7
+	strb	w1, [x0,1216]
+	b	.L2520
+.L2524:
+	sub	w2, w0, #67
+	uxtb	w2, w2
+	cmp	w2, 1
+	sub	w2, w0, #34
+	cset	w3, ls
+	uxtb	w2, w2
+	cmp	w2, 1
+	bls	.L2543
+	cbz	w3, .L2526
+.L2543:
+	add	x2, x21, :lo12:.LANCHOR4
+	adrp	x1, toshiba_read_retrial
+	add	x1, x1, :lo12:toshiba_read_retrial
+	cmp	w0, 35
+	str	x1, [x2,1224]
+	beq	.L2528
+	cmp	w0, 68
+	beq	.L2528
+	mov	w0, 7
+	strb	w0, [x2,1216]
+	b	.L2529
+.L2528:
+	add	x0, x21, :lo12:.LANCHOR4
+	mov	w1, 17
+	strb	w1, [x0,1216]
+.L2529:
 	add	x0, x19, :lo12:.LANCHOR0
-	mov	w2, 150
-	mov	w3, 128
-	strh	w2, [x0,3318]
-	add	x2, x22, :lo12:.LANCHOR4
-	strh	w3, [x2,1130]
-	ldrb	w3, [x0,97]
-	cbnz	w3, .L2618
-	mov	w3, 600
-	strh	w3, [x0,3316]
-	mov	w0, 512
-	strh	w0, [x2,1128]
-.L2618:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2620
-	adrp	x0, .LC201
-	add	x0, x0, :lo12:.LC201
-	bl	printk
-.L2620:
+	mov	w1, 4
+	cbnz	w3, .L2575
+	mov	w1, 5
+.L2575:
+	strb	w1, [x0,726]
+	b	.L2520
+.L2526:
+	sub	w0, w0, #36
+	uxtb	w0, w0
+	cmp	w0, 1
+	bhi	.L2520
+	adrp	x0, toshiba_3d_read_retrial
+	add	x0, x0, :lo12:toshiba_3d_read_retrial
+	str	x0, [x1,1224]
+.L2573:
+	mov	w0, 7
+.L2574:
+	strb	w0, [x1,1216]
+.L2520:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2621
-	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC202
-	add	x0, x0, :lo12:.LC202
-	ldr	w1, [x1,2820]
+	tbz	x0, 12, .L2531
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC127
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC127
+	mov	w1, 2281
+	add	x2, x2, 536
 	bl	printk
-.L2621:
+.L2531:
+	add	x0, x19, :lo12:.LANCHOR0
+	strb	wzr, [x0,672]
+	ldrb	w0, [x0,780]
+	tbz	x0, 0, .L2532
+	mov	w0, 4
+	bl	nandc_set_if_mode
+	mov	w0, 1
+	bl	flash_set_interface_mode
+	mov	w0, 1
+	b	.L2576
+.L2532:
+	mov	w0, 4
+.L2576:
+	bl	nandc_set_if_mode
+	bl	flash_info_blk_init
+	cmn	w0, #1
+	mov	w22, w0
+	bne	.L2534
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2622
-	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC203
-	add	x0, x0, :lo12:.LC203
-	ldr	w1, [x1,2824]
+	tbz	x0, 12, .L2535
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC127
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC127
+	mov	w1, 2301
+	add	x2, x2, 536
 	bl	printk
-.L2622:
+.L2535:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 17
+	ldr	x0, [x19,728]
+	strb	w1, [x0,32]
+	b	.L2571
+.L2534:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,725]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L2536
+	add	x0, x21, :lo12:.LANCHOR4
+	adrp	x1, hynix_read_retrial
+	add	x1, x1, :lo12:hynix_read_retrial
+	str	x1, [x0,1224]
+.L2536:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x19,780]
+	tbz	x0, 2, .L2538
+	ldr	x0, [x19,728]
+	ldrb	w0, [x0,19]
+	cbz	w0, .L2538
+	add	x21, x21, :lo12:.LANCHOR4
+	ldrh	w1, [x19,2]
+	mov	w0, 0
+	ldrb	w2, [x21,1240]
+	mul	w1, w2, w1
+	bl	flash_ddr_para_scan
+	ldrb	w0, [x19,672]
+	cbnz	w0, .L2538
+	ldr	x1, [x19,728]
+	strb	w0, [x1,19]
+	bl	flash_info_flush
+.L2538:
 	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2623
-	add	x1, x21, :lo12:.LANCHOR7
-	adrp	x0, .LC204
-	add	x0, x0, :lo12:.LC204
-	ldr	w1, [x1,3288]
+	tbz	x0, 12, .L2540
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC127
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC127
+	mov	w1, 2356
+	add	x2, x2, 536
 	bl	printk
-.L2623:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2624
-	add	x1, x21, :lo12:.LANCHOR7
-	adrp	x0, .LC205
-	add	x0, x0, :lo12:.LC205
-	ldrh	w1, [x1,3266]
+.L2540:
+	bl	nand_flash_print_info
+	mov	w22, 0
+	b	.L2571
+.L2577:
+	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x0, 376
+	ldrb	w1, [x0,28]
+	cmp	w1, 3
+	bne	.L2515
+	strb	wzr, [x0,28]
+	b	.L2515
+.L2571:
+	mov	w0, w22
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	nand_flash_init, .-nand_flash_init
+	.align	2
+	.global	ftl_sysblk_dump
+	.type	ftl_sysblk_dump, %function
+ftl_sysblk_dump:
+	sub	sp, sp, #144
+	stp	x29, x30, [sp,48]
+	add	x29, sp, 48
+	stp	x25, x26, [sp,112]
+	uxth	w25, w0
+	mov	w0, 1
+	stp	x19, x20, [sp,64]
+	stp	x23, x24, [sp,96]
+	stp	x27, x28, [sp,128]
+	stp	x21, x22, [sp,80]
+	bl	buf_alloc
+	ldr	x24, [x0,8]
+	mov	w20, 0
+	adrp	x22, .LC182
+	adrp	x23, .LC183
+	mov	x27, x0
+	mov	w19, w20
+	adrp	x28, .LANCHOR0
+	add	x22, x22, :lo12:.LC182
+	add	x23, x23, :lo12:.LC183
+	add	x24, x24, 704
+.L2579:
+	add	x3, x28, :lo12:.LANCHOR0
+	ldrh	w1, [x3,3300]
+	cmp	w1, w19
+	bls	.L2591
+	ldrh	w21, [x3,3350]
+	ldr	x1, [x27,8]
+	ldr	x2, [x27,24]
+	madd	w21, w25, w21, w19
+	ldrb	w3, [x3,2832]
+	mov	w0, w21
+	bl	ftl_read_ppa_page
+	mov	w26, w0
+	ldr	x7, [x27,8]
+	mov	w1, w25
+	ldr	x2, [x27,24]
+	mov	w3, w21
+	mov	w4, w26
+	ldr	w0, [x7,12]
+	str	w0, [sp]
+	ldr	w0, [x2]
+	str	w0, [sp,8]
+	ldr	w0, [x2,4]
+	str	w0, [sp,16]
+	ldr	w0, [x2,8]
+	str	w0, [sp,24]
+	ldr	w0, [x2,12]
+	mov	w2, w19
+	str	w0, [sp,32]
+	mov	x0, x22
+	ldr	w5, [x7]
+	ldr	w6, [x7,4]
+	ldr	w7, [x7,8]
 	bl	printk
-.L2624:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2625
-	add	x1, x21, :lo12:.LANCHOR7
-	adrp	x0, .LC206
-	add	x0, x0, :lo12:.LC206
-	ldrh	w1, [x1,3282]
+	mov	x0, x23
+	mov	x1, x24
+	mov	w2, 4
+	mov	w3, 32
+	bl	rknand_print_hex
+	cmp	w26, 512
+	beq	.L2584
+	cmn	w26, #1
+	bne	.L2580
+.L2584:
+	mov	w20, 1
+.L2580:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2579
+.L2591:
+	mov	x0, x27
+	bl	buf_free
+	cbz	w20, .L2583
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1339
+	add	x1, x1, 552
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L2625:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2626
-	add	x1, x22, :lo12:.LANCHOR4
-	adrp	x0, .LC207
-	add	x0, x0, :lo12:.LC207
-	ldrh	w1, [x1,1132]
+	bl	dump_stack
+.L2583:
+	sub	sp, x29, #48
+	mov	w0, w20
+	ldp	x19, x20, [sp,64]
+	ldp	x21, x22, [sp,80]
+	ldp	x23, x24, [sp,96]
+	ldp	x25, x26, [sp,112]
+	ldp	x27, x28, [sp,128]
+	ldp	x29, x30, [sp,48]
+	add	sp, sp, 144
+	ret
+	.size	ftl_sysblk_dump, .-ftl_sysblk_dump
+	.align	2
+	.global	dump_ftl_info
+	.type	dump_ftl_info, %function
+dump_ftl_info:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LC184
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC184
+	ldrb	w1, [x19,2834]
 	bl	printk
-.L2626:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2627
-	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC208
-	add	x0, x0, :lo12:.LC208
-	ldrh	w1, [x1,3280]
+	adrp	x3, .LANCHOR4
+	adrp	x0, .LC185
+	add	x3, x3, :lo12:.LANCHOR4
+	add	x0, x0, :lo12:.LC185
+	ldrb	w1, [x3,1536]
+	ldrb	w2, [x3,1537]
+	ldrh	w3, [x3,1538]
 	bl	printk
-.L2627:
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2628
-	add	x1, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC209
-	add	x0, x0, :lo12:.LC209
-	ldrh	w1, [x1,3282]
+	ldr	x2, [x19,2864]
+	adrp	x0, .LC186
+	add	x0, x0, :lo12:.LC186
+	ldrh	w1, [x2,130]
+	ldrh	w2, [x2,140]
 	bl	printk
-.L2628:
-	add	x22, x19, :lo12:.LANCHOR0
-	bl	buf_init
-	mov	w0, 6
-	adrp	x23, .LANCHOR6
-	ldrh	w1, [x22,56]
-	mul	w0, w1, w0
-	bl	ftl_malloc
-	str	x0, [x22,8]
-	ldrb	w1, [x22,3244]
-	ldrh	w0, [x22,3276]
-	mul	w0, w0, w1
-	lsl	w0, w0, 2
-	bl	ftl_malloc
-	str	x0, [x22,3848]
-	ldrb	w1, [x22,3244]
-	add	x2, x23, :lo12:.LANCHOR6
-	ldrh	w0, [x22,3276]
-	sub	x2, x2, #64
-	str	x2, [x22,3840]
-	mul	w1, w0, w1
-	ldrh	w0, [x22,56]
-	lsl	w1, w1, 1
-	add	x3, x2, x1, sxtw 2
-	str	x3, [x22,72]
-	add	w1, w1, w0, lsr 1
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	add	x1, x2, x1, sxtw 2
-	str	x1, [x22,80]
-	tbz	x0, 12, .L2629
-	adrp	x0, .LC210
-	add	x0, x0, :lo12:.LC210
+	ldr	x1, [x19,608]
+	adrp	x0, .LC187
+	add	x0, x0, :lo12:.LC187
+	add	x5, x1, 16
+	ldrh	w1, [x1,16]
+	ldrh	w2, [x5,2]
+	ldrb	w3, [x5,5]
+	ldrh	w4, [x5,6]
+	ldrh	w5, [x5,10]
 	bl	printk
-.L2629:
-	add	x2, x19, :lo12:.LANCHOR0
-	add	x3, x21, :lo12:.LANCHOR7
-	ldrh	w0, [x2,3276]
-	ldrb	w22, [x2,3244]
-	ldrh	w1, [x2,56]
-	ldrh	w24, [x3,3266]
-	mul	w22, w0, w22
-	ldr	w0, [x20,#:lo12:.LANCHOR2]
-	lsl	w24, w24, 2
-	add	w24, w24, w1, lsl 2
-	add	w22, w1, w22, lsl 2
-	add	w24, w24, 704
-	lsl	w22, w22, 1
-	add	w22, w22, 612
-	tbz	x0, 12, .L2630
-	adrp	x0, .LC211
-	ldrh	w3, [x3,3282]
-	add	x0, x0, :lo12:.LC211
-	mov	w1, w22
-	mov	w2, w24
+	ldr	x1, [x19,608]
+	adrp	x0, .LC188
+	add	x0, x0, :lo12:.LC188
+	add	x5, x1, 48
+	ldrh	w1, [x1,48]
+	ldrh	w2, [x5,2]
+	ldrb	w3, [x5,5]
+	ldrh	w4, [x5,6]
+	ldrh	w5, [x5,10]
 	bl	printk
-.L2630:
-	add	x21, x21, :lo12:.LANCHOR7
-	ldrh	w0, [x21,3282]
-	cmp	w22, w0
-	bhi	.L2632
-	cmp	w24, w0
-	bls	.L2631
-.L2632:
-.L2633:
-	b	.L2633
-.L2631:
-	bl	sblk_init
-	bl	ftl_info_blk_init
-	cmn	w0, #1
-	beq	.L2634
-	bl	ftl_ext_info_init
-	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, 1
-	add	x23, x23, :lo12:.LANCHOR6
-	bl	pm_init
-	bl	lpa_rebuild_hash
-	ldr	x0, [x19,80]
-	mov	x1, 0
-	add	x0, x0, 16
-	bl	ftl_open_sblk_recovery
-	ldr	x1, [x19,80]
-	add	x0, x1, 48
-	add	x1, x1, 16
-	bl	ftl_open_sblk_recovery
-	ldr	x1, [x19,2848]
-	ldr	w0, [x1,8]
-	add	w0, w0, 16
-	str	w0, [x1,8]
-	ldr	x0, [x19,80]
-	add	x0, x0, 16
-	bl	ftl_info_data_recovery
-	ldr	x0, [x19,80]
-	add	x0, x0, 48
-	bl	ftl_info_data_recovery
-	ldr	x0, [x19,80]
-	add	x0, x0, 80
-	bl	ftl_info_data_recovery
-	bl	gc_recovery
-	bl	pm_flush
-	mov	w0, 1
-	bl	ftl_total_vpn_update
-	ldrb	w0, [x23,-127]
-	cbz	w0, .L2635
-	ldr	x1, [x19,2848]
-	ldr	w0, [x1,68]
-	add	w0, w0, 1
-	str	w0, [x1,68]
-.L2635:
-	bl	ftl_ext_info_flush
-	mov	w0, 0
-	bl	ftl_info_flush
-	bl	print_ftl_debug_info
-	mov	w0, 0
-.L2634:
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 64
+	ldr	x1, [x19,608]
+	adrp	x0, .LC189
+	add	x0, x0, :lo12:.LC189
+	add	x5, x1, 80
+	ldrh	w1, [x1,80]
+	ldrh	w4, [x5,6]
+	ldrh	w2, [x5,2]
+	ldrb	w3, [x5,5]
+	ldrh	w5, [x5,10]
+	bl	printk
+	ldrh	w0, [x19,3300]
+	mov	w2, 4
+	ldrb	w3, [x19,3276]
+	ldr	x1, [x19,3872]
+	mul	w3, w0, w3
+	adrp	x0, .LC190
+	add	x0, x0, :lo12:.LC190
+	lsl	w3, w3, 1
+	bl	rknand_print_hex
+	ldr	x1, [x19,600]
+	adrp	x0, .LC191
+	ldrh	w3, [x19,576]
+	add	x0, x0, :lo12:.LC191
+	mov	w2, 2
+	bl	rknand_print_hex
+	ldr	x3, [x19,2864]
+	adrp	x0, .LC183
+	add	x0, x0, :lo12:.LC183
+	mov	w2, 4
+	add	x1, x3, 704
+	ldrh	w3, [x3,698]
+	bl	rknand_print_hex
+	ldr	x1, [x19,584]
+	adrp	x0, .LC192
+	ldrh	w3, [x19,576]
+	add	x0, x0, :lo12:.LC192
+	mov	w2, 4
+	bl	rknand_print_hex
+	adrp	x0, .LC193
+	add	x1, x19, 3360
+	add	x0, x0, :lo12:.LC193
+	mov	w2, 2
+	mov	w3, 256
+	bl	rknand_print_hex
+	ldrh	w0, [x19,3300]
+	mov	w2, 2
+	ldrb	w3, [x19,3276]
+	ldr	x1, [x19,3880]
+	mul	w3, w0, w3
+	adrp	x0, .LC194
+	add	x0, x0, :lo12:.LC194
+	lsl	w3, w3, 1
+	bl	rknand_print_hex
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
 	ret
-	.size	zftl_init, .-zftl_init
+	.size	dump_ftl_info, .-dump_ftl_info
 	.align	2
-	.global	rk_ftl_init
-	.type	rk_ftl_init, %function
-rk_ftl_init:
-	stp	x29, x30, [sp, -48]!
-	adrp	x0, jiffies
+	.global	pm_ppa_update_check
+	.type	pm_ppa_update_check, %function
+pm_ppa_update_check:
+	adrp	x5, .LANCHOR0
+	mov	w6, 21
+	add	x5, x5, :lo12:.LANCHOR0
+	mov	w7, 1
+	stp	x29, x30, [sp, -16]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR4
-	ldr	x0, [x0,#:lo12:jiffies]
-	add	x19, x20, :lo12:.LANCHOR4
-	str	x21, [sp,32]
-	str	x0, [x19,1136]
-	mov	w0, 136
-	bl	ftl_malloc
-	str	x0, [x19,1144]
-	cbnz	x0, .L2680
-.L2682:
-	mov	w0, -1
-	b	.L2681
-.L2680:
-	adrp	x21, .LANCHOR7
-	mov	w0, 2048
-	add	x21, x21, :lo12:.LANCHOR7
-	bl	ftl_malloc
-	str	xzr, [x19,1152]
-	add	x1, x21, 3304
-	str	x0, [x21,3296]
-	add	x0, x19, 1152
-	str	xzr, [x21,3304]
-	bl	rknand_get_reg_addr
-	ldr	x0, [x19,1152]
-	cbz	x0, .L2682
-	bl	rk_nandc_irq_init
-	mov	w1, 0
-	ldr	x0, [x21,3296]
+	ldrh	w4, [x5,3340]
+	ldrb	w3, [x5,3338]
+	sub	w6, w6, w4
+	lsr	w4, w2, w4
+	lsl	w6, w7, w6
+	sub	w6, w6, #1
+	and	w4, w6, w4
+	udiv	w4, w4, w3
+	ldr	x3, [x5,584]
+	add	x4, x3, x4, uxth 2
+	ldrb	w3, [x4,2]
+	ubfx	x3, x3, 5, 3
+	cmp	w3, 7
+	cset	w4, eq
+	cbnz	w4, .L2597
+	cmp	w3, w7
+	bne	.L2594
+.L2597:
+	mov	w3, w2
 	mov	w2, w1
-	mov	w3, 2048
-	bl	flash_sram_load_store
-	bl	rknand_flash_cs_init
-	ldr	x0, [x19,1144]
-	adrp	x1, zftl_deinit
-	add	x1, x1, :lo12:zftl_deinit
-	str	x1, [x0,80]
-	adrp	x1, zftl_cache_flush
-	add	x1, x1, :lo12:zftl_cache_flush
-	str	x1, [x0,64]
-	adrp	x1, zftl_flash_suspend
-	add	x1, x1, :lo12:zftl_flash_suspend
-	str	x1, [x0,88]
-	adrp	x1, zftl_flash_resume
-	add	x1, x1, :lo12:zftl_flash_resume
-	str	x1, [x0,96]
-	adrp	x1, zftl_get_density
-	add	x1, x1, :lo12:zftl_get_density
-	str	x1, [x0,72]
-	adrp	x1, zftl_read_flash_info
-	add	x1, x1, :lo12:zftl_read_flash_info
-	str	x1, [x0,112]
-	adrp	x1, zftl_read
-	add	x1, x1, :lo12:zftl_read
-	str	x1, [x0,40]
-	adrp	x1, zftl_write
-	add	x1, x1, :lo12:zftl_write
-	str	x1, [x0,48]
-	adrp	x1, zftl_sys_read
-	add	x1, x1, :lo12:zftl_sys_read
-	str	x1, [x0,24]
-	adrp	x1, zftl_sys_write
-	add	x1, x1, :lo12:zftl_sys_write
-	str	x1, [x0,32]
-	adrp	x1, zftl_vendor_read
-	add	x1, x1, :lo12:zftl_vendor_read
-	str	x1, [x0,8]
-	adrp	x1, zftl_vendor_write
-	add	x1, x1, :lo12:zftl_vendor_write
-	str	x1, [x0,16]
-	adrp	x1, zftl_nandc_get_irq_status
-	add	x1, x1, :lo12:zftl_nandc_get_irq_status
-	str	x1, [x0,120]
-	adrp	x1, zftl_proc_ftl_read
-	add	x1, x1, :lo12:zftl_proc_ftl_read
-	str	x1, [x0,128]
-	adrp	x1, zftl_do_gc
-	add	x1, x1, :lo12:zftl_do_gc
-	str	x1, [x0,104]
-	adrp	x1, zftl_discard
-	add	x1, x1, :lo12:zftl_discard
-	str	x1, [x0,56]
-	ldr	x0, [x19,1152]
-	bl	nand_flash_init
-	cbnz	w0, .L2683
-	bl	zftl_init
-	mov	w19, w0
-	bl	zftl_proc_debug_init
-	b	.L2684
-.L2683:
-	ldr	x0, [x19,1144]
-	adrp	x1, ftl_deinit
-	add	x1, x1, :lo12:ftl_deinit
-	str	x1, [x0,80]
-	adrp	x1, ftl_cache_flush
-	add	x1, x1, :lo12:ftl_cache_flush
-	str	x1, [x0,64]
-	adrp	x1, ftl_flash_suspend
-	add	x1, x1, :lo12:ftl_flash_suspend
-	str	x1, [x0,88]
-	adrp	x1, ftl_flash_resume
-	add	x1, x1, :lo12:ftl_flash_resume
-	str	x1, [x0,96]
-	adrp	x1, ftl_get_density
-	add	x1, x1, :lo12:ftl_get_density
-	str	x1, [x0,72]
-	adrp	x1, ftl_read_flash_info
-	add	x1, x1, :lo12:ftl_read_flash_info
-	str	x1, [x0,112]
-	adrp	x1, ftl_read
-	add	x1, x1, :lo12:ftl_read
-	str	x1, [x0,40]
-	adrp	x1, ftl_write
-	add	x1, x1, :lo12:ftl_write
-	str	x1, [x0,48]
-	adrp	x1, ftl_sys_read
-	add	x1, x1, :lo12:ftl_sys_read
-	str	x1, [x0,24]
-	adrp	x1, ftl_sys_write
-	add	x1, x1, :lo12:ftl_sys_write
-	str	x1, [x0,32]
-	adrp	x1, ftl_vendor_read
-	add	x1, x1, :lo12:ftl_vendor_read
-	str	x1, [x0,8]
-	adrp	x1, ftl_vendor_write
-	add	x1, x1, :lo12:ftl_vendor_write
-	str	x1, [x0,16]
-	adrp	x1, ftl_nandc_get_irq_status
-	add	x1, x1, :lo12:ftl_nandc_get_irq_status
-	str	x1, [x0,120]
-	adrp	x1, ftl_proc_ftl_read
-	add	x1, x1, :lo12:ftl_proc_ftl_read
-	str	x1, [x0,128]
-	adrp	x1, ftl_do_gc
-	add	x1, x1, :lo12:ftl_do_gc
-	str	x1, [x0,104]
-	adrp	x1, ftl_discard
-	add	x1, x1, :lo12:ftl_discard
-	str	x1, [x0,56]
-	ldr	x0, [x19,1152]
-	bl	FlashInit
-	mov	w19, w0
-	adrp	x0, .LANCHOR2
-	adrp	x1, gNandParaInfo
-	add	x0, x0, :lo12:.LANCHOR2
-	add	x1, x1, :lo12:gNandParaInfo
-	add	x0, x0, 376
-	mov	w2, 32
-	bl	ftl_memcpy
-	adrp	x0, g_nandc_version_data
-	ldr	w1, [x0,#:lo12:g_nandc_version_data]
-	mov	w0, 12336
-	movk	w0, 0x5638, lsl 16
-	cmp	w1, w0
-	bne	.L2685
-	adrp	x0, gFlashSlcMode
-	ldrb	w0, [x0,#:lo12:gFlashSlcMode]
-	cbnz	w0, .L2686
-.L2685:
-	add	x20, x20, :lo12:.LANCHOR4
-	adrp	x0, .LANCHOR0+97
-	strb	wzr, [x20,1232]
-	strb	wzr, [x0,#:lo12:.LANCHOR0+97]
-.L2686:
-	cbnz	w19, .L2684
-	bl	FtlInit
-	mov	w19, w0
-.L2684:
-	adrp	x0, .LC212
-	mov	w1, w19
-	add	x0, x0, :lo12:.LC212
+	mov	x1, x0
+	adrp	x0, .LC195
+	add	x0, x0, :lo12:.LC195
 	bl	printk
-	mov	w0, w19
-.L2681:
-	ldp	x19, x20, [sp,16]
-	ldr	x21, [sp,32]
-	ldp	x29, x30, [sp], 48
+	bl	dump_ftl_info
+	mov	w4, -1
+.L2594:
+	mov	w0, w4
+	ldp	x29, x30, [sp], 16
 	ret
-	.size	rk_ftl_init, .-rk_ftl_init
+	.size	pm_ppa_update_check, .-pm_ppa_update_check
 	.align	2
-	.global	gc_update_l2p_map_new
-	.type	gc_update_l2p_map_new, %function
-gc_update_l2p_map_new:
-	stp	x29, x30, [sp, -160]!
+	.type	load_l2p_region, %function
+load_l2p_region:
+	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
-	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	add	x0, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
-	stp	x27, x28, [sp,80]
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	adrp	x21, .LANCHOR2
-	ldr	x20, [x0,80]
-	ldrh	w1, [x0,3242]
-	add	x28, x20, 80
-	ldrb	w0, [x28,9]
-	mul	w0, w1, w0
-	str	w0, [x29,140]
-	bl	timer_get_time
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2691
-	adrp	x0, .LC213
-	ldrh	w1, [x20,80]
-	add	x0, x0, :lo12:.LC213
-	bl	printk
-.L2691:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x20,80]
-	ldr	w2, [x29,140]
-	mov	w22, 0
-	mov	w23, w22
-	ldr	x0, [x0,72]
-	sub	w2, w2, #1
-	strh	w2, [x0,x1,lsl 1]
-	adrp	x0, .LC216
-	add	x0, x0, :lo12:.LC216
-	str	x0, [x29,120]
-	adrp	x0, .LC215
-	add	x0, x0, :lo12:.LC215
-	str	x0, [x29,112]
-	adrp	x0, .LC214
-	add	x0, x0, :lo12:.LC214
-	str	x0, [x29,104]
-.L2692:
-	ldr	w0, [x29,140]
-	cmp	w23, w0
-	beq	.L2726
-	adrp	x24, .LANCHOR4
-	str	x24, [x29,128]
-	add	x0, x24, :lo12:.LANCHOR4
-	ldr	x0, [x0,1104]
-	ldr	w2, [x0,w23,sxtw 2]
-	cmn	w2, #1
-	beq	.L2693
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2816]
-	lsl	w0, w0, 7
-	udiv	w0, w2, w0
-	and	w0, w0, 65535
-	str	w0, [x29,136]
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2694
-	ldr	x0, [x29,104]
-	mov	w3, w23
-	ldr	w1, [x29,136]
+	uxth	w22, w1
+	str	x23, [sp,48]
+	stp	x19, x20, [sp,16]
+	cmp	w22, 31
+	uxth	w20, w0
+	bls	.L2600
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 31
+	add	x1, x1, 568
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L2694:
-	mov	w25, w23
-.L2700:
-	ldr	x0, [x29,128]
-	sbfiz	x26, x25, 2, 32
-	add	x1, x0, :lo12:.LANCHOR4
-	ldr	x0, [x1,1104]
-	ldr	w24, [x0,x26]
-	cmn	w24, #1
-	beq	.L2695
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	w2, [x29,136]
-	ldrb	w0, [x0,2816]
-	lsl	w0, w0, 7
-	udiv	w0, w24, w0
-	cmp	w2, w0, uxth
-	bne	.L2695
-	ldr	x0, [x1,1112]
-	ldr	w27, [x0,x26]
-	mov	w0, w24
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,156]
-	cmn	w0, #1
-	bne	.L2696
-	mov	w0, w24
-	add	x1, x29, 156
-	mov	w2, 0
-	bl	pm_log2phys
-.L2696:
-	ldr	w3, [x29,156]
-	cmp	w3, w27
-	bne	.L2697
-	ldr	x0, [x29,128]
-	add	x1, x29, 152
-	mov	w2, 1
-	add	w22, w22, 1
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x0, [x0,1120]
-	ldr	w0, [x0,x26]
-	str	w0, [x29,152]
-	mov	w0, w24
-	bl	pm_log2phys
-	add	x1, x19, :lo12:.LANCHOR0
-	mov	w2, 21
-	mov	w0, 1
-	ldrh	w3, [x1,3314]
-	sub	w2, w2, w3
-	lsr	w3, w27, w3
-	lsl	w2, w0, w2
-	sub	w2, w2, #1
-	and	w3, w2, w3
-	ldrb	w2, [x1,3312]
-	udiv	w2, w3, w2
-	uxth	w2, w2
-	str	x2, [x29,96]
-	mov	w0, w2
-	bl	ftl_vpn_decrement
-	ldrh	w0, [x28]
-	ldr	x2, [x29,96]
-	cmp	w0, w2
-	bne	.L2698
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2698
-	ldr	x0, [x29,112]
-	mov	w1, w24
-	ldr	w3, [x29,156]
-	mov	w2, w27
+	bl	dump_stack
+.L2600:
+	adrp	x21, .LANCHOR0
+	adrp	x19, .LANCHOR7
+	add	x21, x21, :lo12:.LANCHOR0
+	ldr	x0, [x21,2864]
+	ldrh	w2, [x0,698]
+	cmp	w20, w2
+	bls	.L2601
+	adrp	x0, .LC196
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC196
+	add	x19, x19, :lo12:.LANCHOR7
 	bl	printk
-	b	.L2698
-.L2697:
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2699
-	ldr	x0, [x29,120]
-	mov	w1, w24
-	mov	w2, w27
+	mov	x0, 0
+	ldrh	w2, [x19,-118]
+	mov	w1, 255
+	ldr	x0, [x0,8]
+	bl	ftl_memset
+	ldr	x0, [x21,2864]
+	ldrh	w0, [x0,698]
+	cmp	w0, w20
+	bcs	.L2603
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 568
+	mov	w2, 35
+	b	.L2607
+.L2601:
+	add	x0, x0, x20, sxtw 2
+	sbfiz	x22, x22, 4, 32
+	ldr	w4, [x0,704]
+	add	x0, x21, 3904
+	add	x23, x0, x22
+	strh	w20, [x0,x22]
+	strh	wzr, [x23,2]
+	cbnz	w4, .L2604
+	adrp	x0, .LC197
+	mov	w1, w20
+	mov	w2, w4
+	add	x19, x19, :lo12:.LANCHOR7
+	add	x0, x0, :lo12:.LC197
 	bl	printk
-.L2699:
-	ldrh	w0, [x28]
-	bl	ftl_vpn_decrement
-.L2698:
-	ldr	x0, [x29,128]
-	mov	w1, -1
-	add	x0, x0, :lo12:.LANCHOR4
-	ldr	x0, [x0,1104]
-	str	w1, [x0,x26]
-	bl	timer_get_time
-.L2695:
-	ldr	w0, [x29,140]
-	add	w25, w25, 1
-	cmp	w25, w0
-	bne	.L2700
-.L2693:
-	add	w23, w23, 1
-	b	.L2692
-.L2726:
-	ldr	w0, [x21,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2702
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w3, [x20,80]
-	ldr	x1, [x0,80]
-	ldr	x2, [x0,72]
-	adrp	x0, .LC217
-	add	x0, x0, :lo12:.LC217
-	ldrh	w1, [x1,80]
-	ldrh	w2, [x2,x3,lsl 1]
-	mov	w3, w22
+	ldr	x0, [x23,8]
+	mov	w1, 255
+	ldrh	w2, [x19,-118]
+	bl	ftl_memset
+	b	.L2603
+.L2604:
+	add	x22, x19, :lo12:.LANCHOR7
+	ldrb	w3, [x21,2832]
+	ldr	x1, [x23,8]
+	mov	w0, w4
+	str	x4, [x29,72]
+	ldr	x2, [x22,-128]
+	bl	ftl_read_ppa_page
+	mov	w3, w0
+	ldr	x0, [x22,-128]
+	ldr	x4, [x29,72]
+	ldr	w2, [x0]
+	cmp	w2, w20
+	beq	.L2605
+	adrp	x0, .LC198
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC198
 	bl	printk
-.L2702:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x20,80]
-	ldr	x0, [x0,72]
-	ldrh	w0, [x0,x1,lsl 1]
-	cmp	w0, w22
-	beq	.L2703
+	ldr	x3, [x21,2864]
+	adrp	x0, .LC199
+	add	x0, x0, :lo12:.LC199
+	mov	w2, 4
+	add	x1, x3, 704
+	ldrh	w3, [x3,698]
+	bl	rknand_print_hex
+	ldrb	w3, [x21,2832]
+	adrp	x0, .LC200
+	ldr	x1, [x23,8]
+	add	x0, x0, :lo12:.LC200
+	mov	w2, 4
+	lsl	w3, w3, 7
+	bl	rknand_print_hex
+	adrp	x0, .LC201
+	ldr	x1, [x22,-128]
+	add	x0, x0, :lo12:.LC201
+	mov	w2, 4
+	mov	w3, 16
+	bl	rknand_print_hex
+.L2605:
+	add	x19, x19, :lo12:.LANCHOR7
+	ldr	x0, [x19,-128]
+	ldr	w0, [x0]
+	cmp	w0, w20
+	beq	.L2603
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 592
-	mov	w2, 463
+	add	x1, x1, 568
+	mov	w2, 59
+.L2607:
 	bl	printk
-.L2703:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x20,80]
-	ldr	x0, [x19,72]
-	strh	w22, [x0,x1,lsl 1]
-	ldrh	w0, [x20,80]
-	bl	zftl_insert_data_list
+	bl	dump_stack
+.L2603:
+	mov	w0, 0
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	load_l2p_region, .-load_l2p_region
+	.align	2
+	.global	pm_gc
+	.type	pm_gc, %function
+pm_gc:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	str	x25, [sp,64]
+	stp	x19, x20, [sp,16]
+	add	x20, x23, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR4
+	stp	x21, x22, [sp,32]
+	add	x19, x19, :lo12:.LANCHOR4
+	ldr	x0, [x20,2864]
+	ldrh	w1, [x0,688]
+	ldrh	w0, [x19,1164]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	blt	.L2610
+	bl	pm_free_sblk
+	ldr	x2, [x20,2864]
+	ldrh	w1, [x19,1164]
+	ldrh	w3, [x2,688]
+	sub	w1, w1, #1
+	cmp	w3, w1
+	blt	.L2610
+	add	x0, x2, x0, uxth 1
+	ldrh	w21, [x0,416]
+	mov	w0, 65535
+	cmp	w21, w0
+	bne	.L2612
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 131
+	add	x1, x1, 584
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+	bl	pm_free_sblk
+	ldr	x1, [x20,2864]
+	add	x0, x1, x0, uxth 1
+	ldrh	w21, [x0,416]
+.L2612:
+	bl	pm_select_ram_region
+	uxth	x20, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	lsl	x1, x20, 4
+	add	x0, x0, 3904
+	mov	x22, x20
+	add	x19, x0, x1
+	ldrh	w0, [x0,x1]
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L2613
+	ldr	x1, [x19,8]
+	cbz	x1, .L2613
+	ldrsh	w2, [x19,2]
+	tbz	w2, #31, .L2613
+	bl	pm_write_page
+	ldrh	w0, [x19,2]
+	and	w0, w0, 32767
+	strh	w0, [x19,2]
+.L2613:
+	add	x23, x23, :lo12:.LANCHOR0
+	mov	w19, 0
+	add	x0, x23, 3904
+	mov	w24, 21
+	mov	w25, 1
+	add	x20, x0, x20, lsl 4
+.L2614:
+	ldr	x0, [x23,2864]
+	ldrh	w1, [x0,698]
+	cmp	w1, w19
+	bls	.L2620
+	ldrh	w1, [x23,3340]
+	add	x0, x0, x19, sxtw 2
+	ldr	w0, [x0,704]
+	lsr	w0, w0, w1
+	sub	w1, w24, w1
+	lsl	w1, w25, w1
+	sub	w1, w1, #1
+	and	w1, w0, w1
+	ldrb	w0, [x23,3338]
+	udiv	w1, w1, w0
+	cmp	w21, w1, uxth
+	bne	.L2615
+	mov	w1, w22
+	mov	w0, w19
+	bl	load_l2p_region
+	ldr	x1, [x20,8]
+	mov	w0, w19
+	bl	pm_write_page
+	mov	w0, -1
+	strh	w0, [x20]
+.L2615:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2614
+.L2620:
+	bl	pm_free_sblk
+.L2610:
+	mov	w0, 0
+	ldr	x25, [sp,64]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 160
+	ldp	x29, x30, [sp], 80
 	ret
-	.size	gc_update_l2p_map_new, .-gc_update_l2p_map_new
+	.size	pm_gc, .-pm_gc
 	.align	2
-	.global	gc_scan_src_blk_one_page
-	.type	gc_scan_src_blk_one_page, %function
-gc_scan_src_blk_one_page:
-	stp	x29, x30, [sp, -80]!
-	mov	w4, 0
-	mov	w6, 65535
+	.global	pm_flush_id
+	.type	pm_flush_id, %function
+pm_flush_id:
+	stp	x29, x30, [sp, -32]!
+	ubfiz	x0, x0, 4, 16
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	str	x23, [sp,48]
-	add	x3, x19, :lo12:.LANCHOR0
-	mov	w5, w4
-	add	x2, x3, 2888
-	stp	x21, x22, [sp,32]
-	ldrb	w0, [x2,4]
-	add	x1, x2, x0, sxtw 1
-	ldrb	w7, [x3,3244]
-	ldrh	w1, [x1,40]
-	ldrh	w3, [x2,2]
-.L2728:
-	cmp	w1, w6
-	bne	.L2770
-	add	w0, w0, 1
-	uxtb	w0, w0
-	cmp	w0, w7
-	bne	.L2729
-	add	w3, w3, 1
-	mov	w4, 1
-	mov	w0, 0
-	uxth	w3, w3
-.L2729:
-	add	x1, x2, x0, sxtw 1
-	mov	w5, 1
-	ldrh	w1, [x1,40]
-	b	.L2728
-.L2770:
-	cbz	w5, .L2731
-	add	x2, x19, :lo12:.LANCHOR0
-	strb	w0, [x2,2892]
-.L2731:
-	cbz	w4, .L2732
-	add	x0, x19, :lo12:.LANCHOR0
-	strh	w3, [x0,2890]
-.L2732:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w2, [x0,3225]
-	ldrh	w20, [x0,3324]
-	cmp	w2, 2
-	mul	w1, w1, w20
-	bne	.L2733
-	ldrb	w2, [x0,2894]
-	add	x0, x0, 2888
-	cbnz	w2, .L2733
-	ldrh	w20, [x0,2]
-	add	w20, w1, w20, lsl 1
-	b	.L2734
-.L2733:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w20, [x0,2890]
-	add	w20, w1, w20
-.L2734:
-	add	x2, x19, :lo12:.LANCHOR0
-	add	x1, x2, 2888
-	ldrb	w0, [x2,2892]
-	add	w0, w0, 1
-	uxtb	w0, w0
-	strb	w0, [x2,2892]
-	ldrb	w2, [x2,3244]
-	cmp	w2, w0
-	bne	.L2735
-	ldrh	w0, [x1,2]
-	strb	wzr, [x1,4]
-	add	w0, w0, 1
-	strh	w0, [x1,2]
-.L2735:
-	mov	w0, 1
-	mov	w21, 0
 	add	x19, x19, :lo12:.LANCHOR0
-	bl	buf_alloc
-	mov	x22, x0
-.L2746:
-	ldrb	w0, [x19,2894]
-	cbnz	w21, .L2748
-	cmp	w0, 3
-	beq	.L2736
-.L2748:
-	cmp	w0, w21
-	bgt	.L2738
-.L2747:
-	mov	x0, x22
-	bl	buf_free
-	ldr	x23, [sp,48]
+	add	x1, x19, 3904
+	add	x20, x1, x0
+	ldrh	w0, [x1,x0]
+	ldr	x1, [x20,8]
+	bl	pm_write_page
+	ldrh	w0, [x20,2]
+	and	w0, w0, 32767
+	strh	w0, [x20,2]
+	ldr	w0, [x19,3896]
+	cbz	w0, .L2622
+	bl	pm_gc
+	str	wzr, [x19,3896]
+.L2622:
+	mov	w0, 0
 	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 80
+	ldp	x29, x30, [sp], 32
 	ret
-.L2738:
-	ldrb	w1, [x19,3225]
-	cmp	w1, 2
-	bne	.L2739
-	cbnz	w0, .L2739
-	add	w0, w21, w20
-	orr	w0, w0, 33554432
-	b	.L2769
-.L2739:
-	orr	w0, w20, w21, lsl 24
-.L2769:
-	str	w0, [x22,40]
-	mov	w1, 1
-	mov	x0, x22
-	bl	sblk_read_page
-	ldr	w0, [x22,52]
-	cmp	w0, 512
-	beq	.L2743
-	cmn	w0, #1
-	beq	.L2743
-	ldr	x0, [x22,24]
-	ldr	w23, [x0,4]
-	mov	w0, w23
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,76]
-	cmn	w0, #1
-	bne	.L2744
-	mov	w0, w23
-	add	x1, x29, 76
-	mov	w2, 0
-	bl	pm_log2phys
-.L2744:
-	ldr	w0, [x29,76]
-	cmp	w20, w0
-	bne	.L2743
-	ldrh	w2, [x19,2912]
-	ldr	x1, [x19,3216]
-	str	w20, [x1,x2,lsl 2]
-	ldrh	w1, [x19,2912]
-	add	w1, w1, 1
-	strh	w1, [x19,2912]
-.L2743:
-	ldrh	w0, [x19,2914]
-	add	w0, w0, 1
-	strh	w0, [x19,2914]
-.L2736:
-	add	w21, w21, 1
-	cmp	w21, 4
-	bne	.L2746
-	b	.L2747
-	.size	gc_scan_src_blk_one_page, .-gc_scan_src_blk_one_page
+	.size	pm_flush_id, .-pm_flush_id
 	.align	2
-	.global	gc_scan_static_data
-	.type	gc_scan_static_data, %function
-gc_scan_static_data:
-	stp	x29, x30, [sp, -80]!
+	.global	pm_flush
+	.type	pm_flush, %function
+pm_flush:
+	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x19, .LANCHOR0
-	add	x1, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
-	stp	x23, x24, [sp,48]
-	ldr	x0, [x1,80]
-	ldr	w2, [x0,544]
-	cmn	w2, #1
-	beq	.L2772
-	adrp	x21, .LANCHOR3
-	adrp	x22, .LC0
-	add	x21, x21, :lo12:.LANCHOR3
-	mov	w20, 11
-	add	x22, x22, :lo12:.LC0
-	add	x21, x21, 616
-.L2773:
-	add	x24, x19, :lo12:.LANCHOR0
-	add	x1, x29, 76
-	mov	w2, 0
-	ldr	x0, [x24,80]
-	ldr	w0, [x0,544]
-	bl	pm_log2phys
-	ldr	w0, [x29,76]
-	cmn	w0, #1
-	beq	.L2774
-	mov	w0, 1
-	bl	buf_alloc
-	mov	x23, x0
-	ldr	w1, [x29,76]
-	str	w1, [x0,40]
-	mov	w1, 1
-	bl	sblk_read_page
-	ldr	w0, [x23,52]
-	cmp	w0, 256
-	bne	.L2775
-	ldrh	w0, [x24,3314]
-	mov	w2, 21
-	mov	w1, 1
-	ldr	w3, [x29,76]
-	sub	w2, w2, w0
-	lsl	w2, w1, w2
-	lsr	w3, w3, w0
-	sub	w2, w2, #1
-	ldrb	w0, [x24,3312]
-	and	w2, w2, w3
-	udiv	w0, w2, w0
-	mov	w2, 0
-	bl	gc_add_sblk
-.L2775:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x1, [x23,24]
-	ldr	x0, [x0,80]
-	ldr	w1, [x1,4]
-	ldr	w0, [x0,544]
-	cmp	w1, w0
-	beq	.L2776
-	mov	x0, x22
-	mov	x1, x21
-	mov	w2, 1369
-	bl	printk
-.L2776:
-	mov	x0, x23
-	bl	buf_free
-.L2774:
-	add	x2, x19, :lo12:.LANCHOR0
-	ldr	x1, [x2,80]
-	ldr	w2, [x2,2824]
-	ldr	w0, [x1,544]
-	add	w0, w0, 1
-	str	w0, [x1,544]
-	cmp	w0, w2
-	bcc	.L2777
-	mov	w0, -1
-	str	w0, [x1,544]
-	ldr	w0, [x1,548]
-	add	w0, w0, 1
-	str	w0, [x1,548]
+	adrp	x20, .LANCHOR0
+	mov	x19, 0
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x20, x20, 3904
+.L2628:
+	add	x1, x20, x19, lsl 4
+	uxth	w0, w19
+	ldrsh	w1, [x1,2]
+	tbz	w1, #31, .L2627
+	bl	pm_flush_id
+.L2627:
+	add	x19, x19, 1
+	cmp	x19, 32
+	bne	.L2628
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	pm_flush, .-pm_flush
+	.align	2
+	.global	flt_sys_flush
+	.type	flt_sys_flush, %function
+flt_sys_flush:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
 	bl	ftl_flush
 	bl	pm_flush
 	bl	ftl_ext_info_flush
 	mov	w0, 0
 	bl	ftl_info_flush
-	b	.L2771
-.L2777:
-	ldr	w0, [x29,76]
-	cmn	w0, #1
-	bne	.L2771
-	sub	w20, w20, #1
-	uxth	w20, w20
-	cbnz	w20, .L2773
-	b	.L2771
-.L2772:
-	ldr	x1, [x1,2848]
-	ldr	w2, [x1,40]
-	cmp	w2, 20480
-	bls	.L2782
-	ldr	w3, [x1,44]
-	add	w3, w3, w2, lsr 10
-	and	w2, w2, 1023
-	str	w3, [x1,44]
-	str	w2, [x1,40]
-.L2782:
-	ldr	w2, [x0,536]
-	ldr	w3, [x0,12]
-	add	w2, w2, 12959744
-	add	w2, w2, 256
-	cmp	w3, w2
-	bhi	.L2783
-	ldr	w2, [x0,540]
-	ldr	w4, [x1,44]
-	add	w2, w2, 98304
-	add	w2, w2, 1696
-	cmp	w4, w2
-	bls	.L2771
-.L2783:
-	ldr	w1, [x1,44]
-	str	w1, [x0,540]
-	str	w3, [x0,536]
-	str	wzr, [x0,544]
-.L2771:
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x29, x30, [sp], 80
+	ldp	x29, x30, [sp], 16
 	ret
-	.size	gc_scan_static_data, .-gc_scan_static_data
+	.size	flt_sys_flush, .-flt_sys_flush
 	.align	2
-	.global	gc_block_vpn_scan
-	.type	gc_block_vpn_scan, %function
-gc_block_vpn_scan:
-	stp	x29, x30, [sp, -144]!
+	.global	zftl_deinit
+	.type	zftl_deinit, %function
+zftl_deinit:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	zftl_flash_de_init
+	bl	flt_sys_flush
+	bl	zftl_flash_de_init
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_deinit, .-zftl_deinit
+	.align	2
+	.global	pm_init
+	.type	pm_init, %function
+pm_init:
+	stp	x29, x30, [sp, -96]!
 	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR7
 	stp	x19, x20, [sp,16]
+	add	x22, x21, :lo12:.LANCHOR7
 	adrp	x19, .LANCHOR0
 	add	x20, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
-	ldr	x1, [x20,80]
-	ldrh	w0, [x20,56]
-	ldr	w1, [x1,608]
-	cmp	w1, w0
-	bcs	.L2788
-	bl	timer_get_time
-	ldr	x21, [x20,80]
-	ldr	w1, [x21,604]
-	add	w1, w1, 28672
-	add	w1, w1, 1328
-	cmp	w0, w1
-	bls	.L2788
-	bl	timer_get_time
-	str	w0, [x21,604]
-	ldr	x0, [x20,80]
-	ldrh	w2, [x20,56]
-	ldr	w1, [x0,600]
-	cmp	w1, w2
-	bcs	.L2792
-	ldr	x2, [x20,2848]
-	ldrh	w2, [x2,134]
-	cmp	w1, w2
-	bcs	.L2793
-.L2792:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldr	x1, [x1,2848]
-	ldrh	w1, [x1,134]
-	str	w1, [x0,600]
-.L2793:
-	ldr	w25, [x0,600]
-	mov	w0, 65535
-	uxth	w20, w25
-	cmp	w20, w0
-	bne	.L2794
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 640
-	mov	w2, 1590
+	mov	w23, w0
+	mov	w0, 1
+	strb	w0, [x22,-120]
+	mov	w0, 64
+	str	wzr, [x20,3896]
+	add	x20, x20, 3904
+	bl	ftl_malloc
+	mov	w24, -1
+	str	x0, [x22,-128]
+	add	x22, x20, 512
+.L2634:
+	strh	w24, [x20]
+	strh	wzr, [x20,2]
+	cbz	w23, .L2633
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2832]
+	lsl	w0, w0, 9
+	bl	ftl_malloc
+	str	x0, [x20,8]
+.L2633:
+	add	x20, x20, 16
+	cmp	x20, x22
+	bne	.L2634
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x21, x21, :lo12:.LANCHOR7
+	mov	w4, 4
+	ldr	x1, [x20,2864]
+	ldr	x25, [x21,-128]
+	ldr	x23, [x20,3912]
+	ldrb	w0, [x1,694]
+	mov	x3, x25
+	ldrh	w1, [x1,692]
+	mov	x2, x23
+	bl	flash_get_last_written_page
+	sxth	w21, w0
+	ldr	x1, [x20,2864]
+	mov	w24, w21
+	ldrh	w2, [x1,696]
+	cmp	w2, w21
+	bgt	.L2635
+	adrp	x0, .LC202
+	ldrh	w1, [x1,692]
+	mov	w3, w21
+	add	x0, x0, :lo12:.LC202
+	adrp	x26, .LC203
+	add	w21, w21, 1
 	bl	printk
-.L2794:
-	add	x21, x19, :lo12:.LANCHOR0
-	ldr	x0, [x21,80]
-	ldr	w1, [x0,600]
-	add	w1, w1, 1
-	str	w1, [x0,600]
-	ldr	w1, [x0,608]
+	add	x26, x26, :lo12:.LC203
+	ldr	x0, [x20,2864]
+	ldrsh	w20, [x0,696]
+.L2636:
+	cmp	w20, w21
+	bge	.L2649
+	add	x27, x19, :lo12:.LANCHOR0
+	mov	x2, x23
+	mov	x3, x25
+	ldr	x0, [x27,2864]
+	ldrh	w22, [x27,3350]
+	ldrb	w4, [x27,2832]
+	ldrh	w1, [x0,692]
+	ldrb	w0, [x0,694]
+	madd	w22, w1, w22, w20
+	mov	w1, w22
+	bl	flash_read_page_en
+	mov	w28, w0
+	ldr	x3, [x27,2864]
+	mov	x0, x26
+	mov	w2, w22
+	ldr	w1, [x3,48]
 	add	w1, w1, 1
-	str	w1, [x0,608]
-	add	x1, x29, 128
-	mov	w0, w20
-	bl	ftl_get_blk_list_in_sblk
-	uxth	w1, w0
-	cbz	w1, .L2788
-	uxtw	x22, w20
-	ldr	x24, [x21,64]
-	add	x24, x24, x22, lsl 2
-	ldrb	w1, [x24,2]
-	tst	w1, 192
-	and	w2, w1, 224
-	beq	.L2795
-	cmp	w2, 224
-	beq	.L2795
-	ldr	x1, [x21,80]
-	ldrh	w3, [x1,16]
-	cmp	w3, w20
-	beq	.L2795
-	ldrh	w3, [x1,48]
-	cmp	w3, w20
-	beq	.L2795
-	ldrh	w1, [x1,80]
-	cmp	w1, w20
-	bne	.L2796
-.L2795:
-	cbnz	w2, .L2788
-	add	x0, x19, :lo12:.LANCHOR0
-	lsl	x22, x22, 1
-	ldr	x0, [x0,72]
-	ldrh	w0, [x0,x22]
-	cbz	w0, .L2797
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 640
-	mov	w2, 1606
+	str	w1, [x3,48]
+	ldrh	w3, [x3,694]
+	ldr	w1, [x25]
 	bl	printk
-.L2797:
+	cmp	w28, 512
+	beq	.L2637
+	cmn	w28, #1
+	beq	.L2637
+	ldr	x1, [x27,2864]
+	ldr	w0, [x25]
+	ldrh	w2, [x1,698]
+	cmp	w0, w2
+	bcs	.L2637
+	add	x0, x1, x0, uxtw 2
+	str	w22, [x0,704]
+.L2637:
+	add	w20, w20, 1
+	sxth	w20, w20
+	b	.L2636
+.L2649:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x0, [x19,72]
-	strh	wzr, [x0,x22]
-	b	.L2788
-.L2796:
-	and	w0, w0, 65535
-	add	x1, x29, 144
-	sub	w0, w0, #1
-	add	x0, x1, x0, sxtw 1
-	ldrh	w21, [x0,-16]
+	adrp	x0, .LANCHOR5+577
+	mov	w1, 1
+	add	w24, w24, 1
+	strb	w1, [x0,#:lo12:.LANCHOR5+577]
+	ldr	x0, [x19,2864]
+	strh	w24, [x0,696]
+	bl	pm_free_sblk
+	ldr	x1, [x19,3912]
+	mov	w0, -1
+	bl	pm_write_page
+	ldr	x1, [x19,3912]
+	mov	w0, -1
+	bl	pm_write_page
+.L2635:
+	bl	pm_free_sblk
+	bl	pm_gc
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	pm_init, .-pm_init
+	.align	2
+	.global	pm_log2phys
+	.type	pm_log2phys, %function
+pm_log2phys:
+	stp	x29, x30, [sp, -96]!
+	mov	w5, w0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	str	x25, [sp,64]
+	add	x3, x21, :lo12:.LANCHOR0
+	mov	x22, x1
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	mov	w23, w2
+	mov	x19, 0
+	ldrb	w4, [x3,2832]
+	ldr	w2, [x3,2840]
+	add	x3, x3, 3904
+	lsl	w20, w4, 7
+	lsl	w24, w4, 7
+	cmp	w0, w2
+	udiv	w20, w0, w20
+	uxth	w25, w20
+	msub	w24, w25, w24, w0
+	uxth	x24, w24
+	bcc	.L2662
+	adrp	x0, .LC204
+	mov	w1, w5
+	add	x0, x0, :lo12:.LC204
+	bl	printk
+	mov	w0, -1
+	b	.L2652
+.L2666:
+	ldrh	w0, [x3]
+	cmp	w0, w25
+	beq	.L2654
+.L2653:
+	add	w19, w19, 1
+	add	x3, x3, 16
+	uxth	x19, w19
+	cmp	w19, 32
+	beq	.L2665
+.L2662:
+	ldr	x0, [x3,8]
+	cbnz	x0, .L2666
+	b	.L2653
+.L2665:
+	bl	pm_select_ram_region
+	uxth	x19, w0
+	add	x2, x21, :lo12:.LANCHOR0
+	sbfiz	x3, x19, 4, 32
+	add	x2, x2, 3904
+	mov	w1, w0
+	add	x4, x2, x3
+	ldrh	w3, [x2,x3]
+	mov	w2, 65535
+	cmp	w3, w2
+	bne	.L2667
+.L2658:
+	adrp	x0, .LANCHOR7-116
+	strb	w19, [x0,#:lo12:.LANCHOR7-116]
+	mov	w0, w25
+	bl	load_l2p_region
+.L2654:
+	cbnz	w23, .L2655
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x0, x19, lsl 4
+	ldr	x0, [x0,3912]
+	ldr	w0, [x0,x24,lsl 2]
+	str	w0, [x22]
+	b	.L2656
+.L2655:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w2, [x22]
+	add	x0, x0, 3904
+	add	x0, x0, x19, lsl 4
+	ldr	x1, [x0,8]
+	str	w2, [x1,x24,lsl 2]
+	ldrh	w1, [x0,2]
+	orr	w1, w1, -32768
+	strh	w1, [x0,2]
+	adrp	x0, .LANCHOR4+64
+	strb	w20, [x0,#:lo12:.LANCHOR4+64]
+.L2656:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w2, 32767
+	add	x21, x21, 3904
+	mov	w0, 0
+	add	x19, x21, x19, lsl 4
+	ldrh	w1, [x19,2]
+	and	w3, w1, 32767
+	cmp	w3, w2
+	beq	.L2652
+	add	w1, w1, 1
+	strh	w1, [x19,2]
+	b	.L2652
+.L2667:
+	ldrsh	w2, [x4,2]
+	tbz	w2, #31, .L2658
+	str	x1, [x29,88]
+	bl	pm_flush_id
+	ldr	x1, [x29,88]
+	b	.L2658
+.L2652:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	pm_log2phys, .-pm_log2phys
+	.align	2
+	.global	gc_recovery
+	.type	gc_recovery, %function
+gc_recovery:
+	sub	sp, sp, #192
+	stp	x29, x30, [sp,32]
+	add	x29, sp, 32
+	stp	x19, x20, [sp,48]
+	adrp	x20, .LANCHOR0
+	stp	x23, x24, [sp,80]
+	add	x24, x20, :lo12:.LANCHOR0
+	adrp	x23, .LANCHOR4
+	stp	x21, x22, [sp,64]
+	stp	x25, x26, [sp,96]
+	stp	x27, x28, [sp,112]
+	add	x0, x23, :lo12:.LANCHOR4
+	strb	wzr, [x24,3273]
+	ldr	x21, [x24,608]
+	strb	wzr, [x0,1130]
+	bl	gc_init
+	ldrh	w1, [x21,80]
 	mov	w0, 65535
-	cmp	w21, w0
-	bne	.L2799
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 640
-	mov	w2, 1612
-	bl	printk
-.L2799:
-	add	x2, x19, :lo12:.LANCHOR0
-	ldrb	w3, [x24,2]
-	mov	w26, 1
-	and	w3, w3, 224
-	ldrh	w0, [x2,3276]
-	cmp	w3, 160
-	ldrh	w1, [x2,3324]
-	sub	w0, w0, #1
-	mul	w1, w21, w1
-	uxth	w0, w0
-	bne	.L2800
-	ldrb	w3, [x2,3225]
-	cmp	w3, 2
-	uxth	w26, w3
-	orr	w1, w1, w3, lsl 24
-	bne	.L2800
-	ldrh	w0, [x2,3242]
-	sub	w0, w0, #1
-	uxth	w0, w0
-.L2800:
-	orr	w21, w0, w1
+	str	x23, [x29,136]
+	add	x22, x21, 80
+	cmp	w1, w0
+	ldr	x0, [x24,608]
+	beq	.L2669
+	mov	w1, -1
+	strh	w1, [x0,130]
 	mov	w0, 1
 	bl	buf_alloc
-	str	w21, [x0,40]
+	mov	x19, x0
+	ldrb	w0, [x22,9]
+	ldrh	w1, [x24,3350]
+	sub	w0, w0, #1
+	add	x0, x22, x0, sxtw 1
+	ldrh	w0, [x0,16]
+	mul	w0, w0, w1
+	ldrb	w1, [x24,3257]
+	str	w0, [x29,152]
+	cmp	w1, 3
+	bne	.L2670
+	ldrh	w1, [x24,3300]
+	sub	w1, w1, #1
+	add	w0, w1, w0
+	orr	w0, w0, 50331648
+	b	.L2713
+.L2670:
+	cmp	w1, 2
+	bne	.L2671
+	ldrh	w1, [x24,3300]
+	add	w0, w0, w1, lsl 1
+	sub	w0, w0, #1
+	orr	w0, w0, 33554432
+.L2713:
+	str	w0, [x19,40]
+.L2671:
+	mov	x0, x19
 	mov	w1, 1
-	add	x21, x19, :lo12:.LANCHOR0
-	mov	x23, x0
 	bl	sblk_read_page
-	ldrh	w0, [x21,3242]
-	mov	w1, 255
-	ldrb	w2, [x21,3244]
-	mul	w2, w0, w2
-	ldr	x0, [x21,3216]
-	lsl	w2, w2, 2
-	bl	ftl_memset
-	ldr	w0, [x23,52]
+	ldr	w0, [x19,52]
 	cmp	w0, 512
-	beq	.L2812
+	beq	.L2672
 	cmn	w0, #1
-	cset	w2, eq
-	cbz	w2, .L2801
-.L2812:
-	mov	w0, w20
-	mov	w1, 1
-	mov	w2, 0
-	b	.L2825
-.L2801:
-	ldr	x0, [x23,24]
+	beq	.L2672
+	ldr	x0, [x19,24]
 	ldr	w1, [x0]
 	mov	w0, 15555
 	movk	w0, 0xf55f, lsl 16
 	cmp	w1, w0
-	beq	.L2803
-	mov	w0, w20
+	beq	.L2673
+.L2672:
+	mov	x0, x19
+	bl	buf_free
+	ldr	x7, [x19,24]
+	ldr	x6, [x19,8]
+	ldr	w0, [x7,4]
+	str	w0, [sp]
+	ldr	w0, [x7,8]
+	str	w0, [sp,8]
+	ldr	w0, [x7,12]
+	str	w0, [sp,16]
+	adrp	x0, .LC205
+	add	x0, x0, :lo12:.LC205
+	ldr	w3, [x6]
+	ldr	w4, [x6,4]
+	ldr	w5, [x6,8]
+	ldr	w1, [x19,40]
+	ldr	w2, [x19,52]
+	ldr	w6, [x6,12]
+	ldr	w7, [x7]
+	bl	printk
+	b	.L2716
+.L2673:
+	add	x24, x20, :lo12:.LANCHOR0
+	ldr	x0, [x29,136]
+	ldr	x1, [x19,8]
+	add	x25, x0, :lo12:.LANCHOR4
+	ldrb	w2, [x24,3276]
+	ldrh	w0, [x24,3274]
+	mul	w2, w0, w2
+	ldr	x0, [x25,1136]
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	ldrh	w0, [x24,3274]
+	ldrb	w2, [x24,3276]
+	ldr	x1, [x19,8]
+	mul	w2, w0, w2
+	add	x1, x1, x2, sxtw 2
+	ldr	x0, [x25,1144]
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	ldrb	w26, [x24,3257]
+	ldrh	w25, [x24,3300]
+	cmp	w26, 2
+	bne	.L2675
+	lsl	w25, w25, 1
+	mov	w26, 1
+.L2675:
+	mov	w23, 0
+	adrp	x24, .LC206
+	add	x0, x24, :lo12:.LC206
+	mov	w27, w23
+	str	x0, [x29,112]
+	b	.L2676
+.L2718:
+	ldr	x0, [x0,1144]
+	ldr	w1, [x0,x12]
+	ldr	w0, [x7,8]
+	cmp	w1, w0
+	bne	.L2680
+.L2703:
+	add	w27, w27, 1
+	add	w28, w28, 1
+.L2684:
+	cmp	w28, w26
+	bhi	.L2717
+	ldr	x0, [x29,128]
+	add	x1, x20, :lo12:.LANCHOR0
+	add	x0, x0, 8
+	ldrh	w2, [x1,3350]
+	ldrb	w1, [x1,3257]
+	ldrh	w0, [x22,x0,lsl 1]
+	cmp	w1, 3
+	mul	w0, w0, w2
+	str	w0, [x29,152]
+	bne	.L2677
+	add	w0, w0, w23
+	orr	w0, w0, w28, lsl 24
+.L2714:
+	str	w0, [x19,40]
+	mov	w1, 1
+	mov	x0, x19
+	bl	sblk_read_page
+	ldr	x0, [x29,136]
+	sbfiz	x12, x27, 2, 32
+	ldr	x7, [x19,24]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w6, [x7,4]
+	ldr	x1, [x0,1136]
+	ldr	w3, [x1,x12]
+	cmp	w3, w6
+	beq	.L2718
+.L2680:
+	ldr	x0, [x29,136]
+	str	x12, [x29,104]
+	add	x13, x0, :lo12:.LANCHOR4
+	ldr	w0, [x7,12]
+	str	x13, [x29,96]
+	ldr	x4, [x13,1144]
+	str	w0, [sp]
+	ldr	x0, [x29,112]
+	ldr	w4, [x4,x12]
+	ldr	w5, [x7]
+	ldr	w1, [x19,40]
+	ldr	w2, [x19,52]
+	ldr	w7, [x7,8]
+	bl	printk
+	ldr	x13, [x29,96]
+	ldr	x12, [x29,104]
+	ldr	x0, [x13,1136]
+	ldr	w0, [x0,x12]
+	cmn	w0, #1
+	beq	.L2703
+	mov	x0, x19
+	bl	buf_free
+.L2716:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x21,80]
+	mov	w28, 0
+	ldr	x1, [x0,600]
+	strh	wzr, [x1,x2,lsl 1]
+	ldr	x0, [x0,608]
+	ldrh	w1, [x21,80]
+	strh	w1, [x0,130]
+	b	.L2674
+.L2683:
+	add	w23, w23, 1
+.L2676:
+	cmp	w23, w25
+	beq	.L2685
+	sub	w0, w23, #1
+	mov	w24, 0
+	str	w0, [x29,124]
+.L2686:
+	ldrb	w0, [x22,9]
+	cmp	w24, w0
+	bge	.L2683
+	sxtw	x0, w24
+	mov	w28, 1
+	str	x0, [x29,128]
+	b	.L2684
+.L2677:
+	cmp	w1, 2
+	bne	.L2679
+	ldr	w1, [x29,124]
+	add	w0, w0, w1
+	add	w0, w0, w28
+	orr	w0, w0, 33554432
+	b	.L2714
+.L2679:
+	add	w0, w0, w23
+	b	.L2714
+.L2717:
+	add	w24, w24, 1
+	b	.L2686
+.L2685:
+	mov	x0, x19
+	mov	w28, 0
+	mov	w27, w28
+	bl	buf_free
+	str	w28, [x29,128]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w1, [x22,9]
+	ldrh	w3, [x21,80]
+	ldr	x2, [x0,600]
+	ldrh	w0, [x0,3274]
+	mul	w0, w1, w0
+	strh	w0, [x2,x3,lsl 1]
+.L2687:
+	cmp	w27, w25
+	beq	.L2698
+	sub	w0, w27, #1
+	mov	w24, 0
+	str	w0, [x29,104]
+.L2699:
+	ldrb	w0, [x22,9]
+	cmp	w24, w0
+	bge	.L2696
+	sxtw	x0, w24
+	mov	w23, 1
+	str	x0, [x29,112]
+.L2697:
+	cmp	w23, w26
+	bhi	.L2719
+	ldr	x1, [x29,136]
+	ldr	w0, [x29,128]
+	add	x1, x1, :lo12:.LANCHOR4
+	sbfiz	x0, x0, 2, 32
+	ldr	x2, [x1,1136]
+	ldr	w6, [x2,x0]
+	cmn	w6, #1
+	beq	.L2688
+	ldr	x1, [x1,1144]
+	str	x6, [x29,96]
+	ldr	w0, [x1,x0]
+	str	w0, [x29,124]
+	mov	w0, w6
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,156]
+	cmn	w0, #1
+	ldr	x6, [x29,96]
+	bne	.L2689
+	mov	w0, w6
+	add	x1, x29, 156
+	mov	w2, 0
+	bl	pm_log2phys
+	ldr	x6, [x29,96]
+.L2689:
+	ldr	x0, [x29,112]
+	add	x0, x0, 8
+	ldrh	w1, [x22,x0,lsl 1]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x0,3350]
+	ldrb	w0, [x0,3257]
+	cmp	w0, 3
+	mul	w1, w1, w2
+	bne	.L2690
+	add	w1, w1, w27
+	orr	w1, w1, w23, lsl 24
+	b	.L2715
+.L2690:
+	cmp	w0, 2
+	bne	.L2692
+	ldr	w0, [x29,104]
+	add	w1, w1, w0
+	add	w1, w1, w23
+	orr	w1, w1, 33554432
+	b	.L2715
+.L2692:
+	add	w1, w1, w27
+.L2715:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w2, [x29,124]
+	str	w1, [x29,152]
+	ldrh	w1, [x0,3340]
+	lsr	w19, w2, w1
+	mov	w2, 21
+	sub	w1, w2, w1
+	mov	w2, 1
+	lsl	w1, w2, w1
+	sub	w1, w1, #1
+	and	w1, w19, w1
+	ldrb	w19, [x0,3338]
+	ldr	w0, [x29,156]
+	udiv	w19, w1, w19
+	ldr	w1, [x29,124]
+	cmp	w0, w1
+	uxth	x19, w19
+	bne	.L2693
+	mov	w0, w6
+	add	x1, x29, 152
+	add	w28, w28, 1
+	bl	pm_log2phys
+	mov	w0, w19
+	bl	ftl_vpn_decrement
+	b	.L2694
+.L2693:
+	ldr	w1, [x29,152]
+	cmp	w0, w1
+	csinc	w28, w28, w28, ne
+.L2694:
+	ldr	w0, [x29,128]
+	add	x1, x20, :lo12:.LANCHOR0
+	add	w0, w0, 1
+	str	w0, [x29,128]
+	ldr	x0, [x1,584]
+	add	x0, x0, x19, lsl 2
+	ldrb	w0, [x0,2]
+	ands	w0, w0, 224
+	bne	.L2688
+	lsl	x19, x19, 1
+	ldr	x1, [x1,600]
+	ldrh	w2, [x1,x19]
+	cbz	w2, .L2688
+	strh	w0, [x1,x19]
+.L2688:
+	add	w23, w23, 1
+	b	.L2697
+.L2719:
+	add	w24, w24, 1
+	b	.L2699
+.L2696:
+	add	w27, w27, 1
+	b	.L2687
+.L2698:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x21,80]
+	ldr	x0, [x0,600]
+	strh	w28, [x0,x1,lsl 1]
+.L2674:
+	ldrh	w1, [x21,80]
+	adrp	x0, .LC207
+	mov	w2, w28
+	add	x0, x0, :lo12:.LC207
+	bl	printk
+	mov	w0, -1
+	strh	w0, [x21,80]
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w1, 65535
+	ldr	x0, [x0,608]
+	ldrh	w0, [x0,130]
+	cmp	w0, w1
+	beq	.L2700
+	bl	ftl_free_sblk
+.L2700:
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w0, -1
+	ldr	x1, [x20,2864]
+	strh	w0, [x1,126]
+	ldr	x1, [x20,608]
+	strh	w0, [x1,130]
+	mov	w0, 0
+	bl	ftl_info_flush
+	b	.L2668
+.L2669:
+	ldrh	w0, [x0,130]
+	cmp	w0, w1
+	beq	.L2668
+	ldr	x1, [x24,2864]
+	ldrh	w1, [x1,126]
+	cmp	w1, w0
+	bne	.L2702
+	bl	pm_flush
+	ldr	x0, [x24,608]
+	ldrh	w0, [x0,130]
+	bl	ftl_free_sblk
+	ldr	x0, [x24,2864]
+	mov	w1, -1
+	strh	w1, [x0,126]
+	mov	w0, 0
+	bl	ftl_info_flush
+.L2702:
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w1, -1
+	ldr	x0, [x20,608]
+	strh	w1, [x0,130]
+.L2668:
+	sub	sp, x29, #32
+	ldp	x19, x20, [sp,48]
+	ldp	x21, x22, [sp,64]
+	ldp	x23, x24, [sp,80]
+	ldp	x25, x26, [sp,96]
+	ldp	x27, x28, [sp,112]
+	ldp	x29, x30, [sp,32]
+	add	sp, sp, 192
+	ret
+	.size	gc_recovery, .-gc_recovery
+	.align	2
+	.global	zftl_init
+	.type	zftl_init, %function
+zftl_init:
+	stp	x29, x30, [sp, -64]!
+	mov	w0, -1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	adrp	x19, .LANCHOR0
+	adrp	x22, .LANCHOR4
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x1, x22, :lo12:.LANCHOR4
+	adrp	x21, .LANCHOR7
+	stp	x23, x24, [sp,48]
+	add	x23, x21, :lo12:.LANCHOR7
+	strb	w0, [x20,2888]
+	strb	w0, [x20,3893]
+	strb	w0, [x1,1267]
+	mov	w0, -1
+	adrp	x1, .LC2
+	str	w0, [x23,-112]
+	adrp	x0, .LC1
+	add	x1, x1, :lo12:.LC2
+	add	x0, x0, :lo12:.LC1
+	strb	wzr, [x20,2856]
+	strb	wzr, [x20,3894]
+	strb	wzr, [x20,2857]
+	bl	printk
+	adrp	x11, .LANCHOR2
+	ldrb	w6, [x20,633]
+	add	x1, x11, :lo12:.LANCHOR2
+	strb	w6, [x20,3352]
+	ldrh	w4, [x20,2]
+	strh	w4, [x20,3350]
+	ldrb	w2, [x1,389]
+	ldrb	w8, [x1,388]
+	ldrh	w3, [x1,386]
+	mul	w6, w2, w6
+	ldrb	w0, [x1,385]
+	ldrh	w7, [x1,390]
+	mov	w1, 0
+	sdiv	w9, w3, w8
+	strb	w2, [x20,3338]
+	strb	w8, [x20,3257]
+	uxtb	w6, w6
+	strb	w0, [x20,2832]
+	ubfiz	w10, w0, 9, 7
+	strh	w3, [x20,3274]
+	mov	w2, 1
+	strh	w9, [x20,3300]
+	strb	w6, [x20,3276]
+	strh	w7, [x20,576]
+	mov	x20, x11
+	strh	w10, [x23,-118]
+.L2721:
+	cmp	w2, w4
+	bhi	.L2787
+	add	w1, w1, 1
+	lsl	w2, w2, 1
+	uxth	w1, w1
+	b	.L2721
+.L2787:
+	mul	w3, w0, w3
+	add	x2, x19, :lo12:.LANCHOR0
+	sub	w1, w1, #1
+	mul	w5, w3, w7
+	strh	w1, [x2,3340]
 	mov	w1, 1
-.L2825:
-	bl	gc_add_sblk
-	mov	x0, x23
-	bl	buf_free
-	b	.L2788
-.L2803:
-	ldrb	w0, [x21,3244]
-	mov	x27, 0
-	ldrh	w1, [x21,3276]
-	and	w28, w25, 65535
-	mov	w21, w27
-	mul	w0, w0, w1
-	mul	w26, w26, w0
-	uxth	w0, w26
-	ldr	x26, [x23,8]
-	str	w0, [x29,108]
-.L2804:
-	ldr	w0, [x29,108]
-	cmp	w0, w27
-	ble	.L2826
-	ldr	w0, [x26,x27,lsl 2]
-	cmn	w0, #1
-	beq	.L2805
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,124]
-	cmn	w0, #1
-	bne	.L2806
-	ldr	w0, [x26,x27,lsl 2]
-	add	x1, x29, 124
+	lsr	w4, w5, 21
 	mov	w2, 0
-	bl	pm_log2phys
-.L2806:
-	add	x4, x19, :lo12:.LANCHOR0
-	mov	w1, 21
-	ldrh	w0, [x4,3314]
-	sub	w2, w1, w0
-	mov	w1, 1
-	lsl	w2, w1, w2
-	ldr	w1, [x29,124]
+.L2723:
+	cmp	w1, w4
+	bhi	.L2788
+	add	w2, w2, 1
+	lsl	w1, w1, 1
+	uxth	w2, w2
+	b	.L2723
+.L2788:
+	mov	w1, 57344
+	mov	w4, 1
+	movk	w1, 0x1c, lsl 16
 	sub	w2, w2, #1
-	lsr	w0, w1, w0
-	ldrb	w1, [x4,3312]
-	and	w0, w2, w0
-	udiv	w0, w0, w1
-	cmp	w0, w28
-	bne	.L2805
-	add	w21, w21, 1
-	uxth	w21, w21
-.L2805:
-	add	x27, x27, 1
-	b	.L2804
-.L2826:
-	mov	x0, x23
-	bl	buf_free
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2808
+	lsl	w2, w4, w2
+	add	x4, x19, :lo12:.LANCHOR0
+	mul	w1, w6, w1
+	mul	w5, w5, w6
+	str	w5, [x4,2836]
+	add	x11, x21, :lo12:.LANCHOR7
+	mul	w1, w1, w2
+	mul	w9, w9, w6
+	add	w5, w1, 24576
+	str	w5, [x11,-108]
+	mul	w3, w3, w6
+	udiv	w2, w5, w0
+	sub	w0, w10, #1
+	str	w2, [x4,2840]
+	sub	w3, w3, #1
+	str	w1, [x4,520]
+	add	w0, w0, w2, lsl 2
+	add	x2, x22, :lo12:.LANCHOR4
+	udiv	w5, w5, w3
+	add	w5, w5, 8
+	strh	w5, [x4,3308]
+	udiv	w0, w0, w10
+	strh	w0, [x11,-104]
+	ubfiz	w0, w0, 4, 16
+	sdiv	w0, w0, w9
+	strh	w0, [x2,1164]
+	add	w0, w7, w7, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x4,3344]
+	lsr	w0, w7, 4
+	strh	w0, [x4,3306]
+	cmp	w0, 79
+	bhi	.L2725
+	mov	w0, 80
+	strh	w0, [x4,3306]
+.L2725:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w4, [x24,2]
-	uxth	w1, w25
-	mov	w3, w21
-	ubfx	x4, x4, 5, 3
-	ldr	x2, [x0,72]
+	mov	w2, 2000
+	mov	w3, 256
+	cmp	w8, 2
+	strh	w2, [x0,3346]
+	mov	w2, 50
+	strh	w2, [x0,3342]
+	add	x2, x22, :lo12:.LANCHOR4
+	strh	w3, [x2,1160]
+	mov	w3, 48
+	strh	w3, [x2,1162]
+	mov	w2, 32
+	strh	w2, [x0,592]
+	beq	.L2726
+	ldrb	w0, [x0,3272]
+	cbz	w0, .L2727
+.L2726:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 150
+	mov	w3, 64
+	strh	w2, [x0,3342]
+	add	x2, x22, :lo12:.LANCHOR4
+	strh	w3, [x2,1162]
+	mov	w3, 12
+	strh	w3, [x0,592]
+	ldrb	w3, [x19,#:lo12:.LANCHOR0]
+	cbnz	w3, .L2727
+	mov	w3, 4
+	strh	w3, [x0,592]
+	mov	w3, 600
+	strh	w3, [x0,3346]
+	mov	w0, 128
+	strh	w0, [x2,1160]
+.L2727:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2729
+	adrp	x0, .LC208
+	add	x0, x0, :lo12:.LC208
+	bl	printk
+.L2729:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2730
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC209
+	add	x0, x0, :lo12:.LC209
+	ldr	w1, [x1,2836]
+	bl	printk
+.L2730:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2731
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC210
+	add	x0, x0, :lo12:.LC210
+	ldr	w1, [x1,2840]
+	bl	printk
+.L2731:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2732
+	add	x1, x21, :lo12:.LANCHOR7
+	adrp	x0, .LC211
+	add	x0, x0, :lo12:.LC211
+	ldr	w1, [x1,-108]
+	bl	printk
+.L2732:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2733
+	add	x1, x21, :lo12:.LANCHOR7
+	adrp	x0, .LC212
+	add	x0, x0, :lo12:.LC212
+	ldrh	w1, [x1,-104]
+	bl	printk
+.L2733:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2734
+	add	x1, x21, :lo12:.LANCHOR7
+	adrp	x0, .LC213
+	add	x0, x0, :lo12:.LC213
+	ldrh	w1, [x1,-118]
+	bl	printk
+.L2734:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2735
+	add	x22, x22, :lo12:.LANCHOR4
+	adrp	x0, .LC214
+	add	x0, x0, :lo12:.LC214
+	ldrh	w1, [x22,1164]
+	bl	printk
+.L2735:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2736
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC215
+	add	x0, x0, :lo12:.LC215
+	ldrh	w1, [x1,3306]
+	bl	printk
+.L2736:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2737
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC216
+	add	x0, x0, :lo12:.LC216
+	ldrh	w1, [x1,3308]
+	bl	printk
+.L2737:
+	add	x22, x19, :lo12:.LANCHOR0
+	bl	buf_init
+	mov	w0, 6
+	adrp	x23, .LANCHOR5
+	ldrh	w1, [x22,576]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x22,528]
+	ldrb	w1, [x22,3276]
+	ldrh	w0, [x22,3300]
+	mul	w0, w0, w1
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x22,3880]
+	ldrb	w1, [x22,3276]
+	add	x2, x23, :lo12:.LANCHOR5
+	ldrh	w0, [x22,3300]
+	add	x2, x2, 640
+	str	x2, [x22,3872]
+	mul	w1, w0, w1
+	ldrh	w0, [x22,576]
+	lsl	w1, w1, 1
+	add	x3, x2, x1, sxtw 2
+	str	x3, [x22,600]
+	add	w1, w1, w0, lsr 1
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	add	x1, x2, x1, sxtw 2
+	str	x1, [x22,608]
+	tbz	x0, 12, .L2738
+	adrp	x0, .LC217
+	add	x0, x0, :lo12:.LC217
+	bl	printk
+.L2738:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x3, x21, :lo12:.LANCHOR7
+	ldrh	w0, [x2,3300]
+	ldrb	w22, [x2,3276]
+	ldrh	w1, [x2,576]
+	ldrh	w24, [x3,-104]
+	mul	w22, w0, w22
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	lsl	w24, w24, 2
+	add	w24, w24, w1, lsl 2
+	add	w22, w1, w22, lsl 2
+	add	w24, w24, 704
+	lsl	w22, w22, 1
+	add	w22, w22, 632
+	tbz	x0, 12, .L2739
 	adrp	x0, .LC218
+	ldrh	w3, [x3,-118]
 	add	x0, x0, :lo12:.LC218
-	ldrh	w2, [x2,x22,lsl 1]
+	mov	w1, w22
+	mov	w2, w24
 	bl	printk
-.L2808:
-	add	x19, x19, :lo12:.LANCHOR0
-	cmp	w21, 31
-	ldr	x0, [x19,72]
-	strh	w21, [x0,x22,lsl 1]
-	bhi	.L2788
-	mov	w0, w20
-	mov	w1, 1
-	mov	w2, 0
-	bl	gc_add_sblk
-.L2788:
+.L2739:
+	add	x21, x21, :lo12:.LANCHOR7
+	ldrh	w0, [x21,-118]
+	cmp	w22, w0
+	bhi	.L2741
+	cmp	w24, w0
+	bls	.L2740
+.L2741:
+.L2742:
+	b	.L2742
+.L2740:
+	bl	sblk_init
+	bl	ftl_info_blk_init
+	cmn	w0, #1
+	beq	.L2743
+	bl	ftl_ext_info_init
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	add	x23, x23, :lo12:.LANCHOR5
+	bl	pm_init
+	bl	lpa_rebuild_hash
+	ldr	x0, [x19,608]
+	mov	x1, 0
+	add	x0, x0, 16
+	bl	ftl_open_sblk_recovery
+	ldr	x1, [x19,608]
+	add	x0, x1, 48
+	add	x1, x1, 16
+	bl	ftl_open_sblk_recovery
+	ldr	x1, [x19,2864]
+	ldr	w0, [x1,8]
+	add	w0, w0, 16
+	str	w0, [x1,8]
+	ldr	x0, [x19,608]
+	add	x0, x0, 16
+	bl	ftl_info_data_recovery
+	ldr	x0, [x19,608]
+	add	x0, x0, 48
+	bl	ftl_info_data_recovery
+	ldr	x0, [x19,608]
+	add	x0, x0, 80
+	bl	ftl_info_data_recovery
+	bl	gc_recovery
+	bl	pm_flush
+	mov	w0, 1
+	bl	ftl_total_vpn_update
+	ldrb	w0, [x23,577]
+	cbz	w0, .L2744
+	ldr	x1, [x19,2864]
+	ldr	w0, [x1,68]
+	add	w0, w0, 1
+	str	w0, [x1,68]
+.L2744:
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	bl	print_ftl_debug_info
+	mov	w0, 0
+.L2743:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 144
+	ldp	x29, x30, [sp], 64
 	ret
-	.size	gc_block_vpn_scan, .-gc_block_vpn_scan
+	.size	zftl_init, .-zftl_init
 	.align	2
-	.global	ftl_sblk_dump
-	.type	ftl_sblk_dump, %function
-ftl_sblk_dump:
-	sub	sp, sp, #256
-	mov	w2, 65535
-	stp	x29, x30, [sp,48]
-	add	x29, sp, 48
-	stp	x21, x22, [sp,80]
-	uxth	w22, w0
-	mov	w0, 0
-	stp	x19, x20, [sp,64]
-	stp	x23, x24, [sp,96]
-	stp	x25, x26, [sp,112]
-	stp	x27, x28, [sp,128]
-	cmp	w22, w2
-	beq	.L2828
-	adrp	x23, .LANCHOR0
-	add	x2, x23, :lo12:.LANCHOR0
-	ldrh	w3, [x2,56]
-	cmp	w3, w22
-	bls	.L2828
-	uxtw	x0, w22
-	str	x0, [x29,128]
-	lsl	x0, x0, 2
-	str	x0, [x29,152]
-	ldr	x0, [x2,64]
-	mov	w26, 1
-	ldr	x3, [x29,152]
-	add	x0, x0, x3
-	ldrb	w0, [x0,2]
-	and	w0, w0, 224
-	cmp	w0, 160
-	bne	.L2829
-	ldrb	w26, [x2,3225]
-.L2829:
-	str	x1, [x29,144]
-	mov	w0, w22
-	add	x1, x29, 192
-	strh	w22, [x29,176]
-	mov	w21, 0
-	bl	ftl_get_blk_list_in_sblk
-	uxtb	w1, w0
-	mov	w4, w0
-	add	x0, x23, :lo12:.LANCHOR0
-	strb	w1, [x29,185]
-	mov	w3, w26
-	strh	wzr, [x29,178]
-	uxtb	w4, w4
-	ldrh	w2, [x0,3276]
-	mov	w28, w21
-	strb	wzr, [x29,181]
-	mov	w19, w21
-	strh	wzr, [x29,186]
-	mul	w1, w1, w2
-	strh	w1, [x29,182]
-	ldr	x1, [x0,64]
-	ldr	x0, [x29,152]
-	add	x1, x1, x0
-	adrp	x0, .LC219
-	add	x0, x0, :lo12:.LC219
-	ldrb	w2, [x1,2]
-	mov	w1, w22
-	ubfx	x2, x2, 5, 3
-	bl	printk
+	.global	rk_ftl_init
+	.type	rk_ftl_init, %function
+rk_ftl_init:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, jiffies
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR4
+	ldr	x0, [x0,#:lo12:jiffies]
+	add	x19, x20, :lo12:.LANCHOR4
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR7
+	add	x21, x21, :lo12:.LANCHOR7
+	str	x0, [x19,1168]
+	mov	w0, 136
+	strb	wzr, [x21,-102]
+	bl	ftl_malloc
+	str	x0, [x19,1176]
+	cbnz	x0, .L2790
+.L2792:
+	mov	w0, -1
+	b	.L2791
+.L2790:
+	mov	w0, 2048
+	bl	ftl_malloc
+	str	x0, [x21,-96]
+	mov	x1, x21
+	add	x0, x19, 1184
+	str	xzr, [x19,1184]
+	str	xzr, [x1,-88]!
+	bl	rknand_get_reg_addr
+	ldr	x0, [x19,1184]
+	cbz	x0, .L2792
+	bl	rk_nandc_irq_init
+	mov	w1, 0
+	ldr	x0, [x21,-96]
+	mov	w2, w1
+	mov	w3, 2048
+	bl	flash_sram_load_store
+	bl	rknand_flash_cs_init
+	ldr	x0, [x19,1176]
+	adrp	x1, zftl_deinit
+	add	x1, x1, :lo12:zftl_deinit
+	str	x1, [x0,80]
+	adrp	x1, zftl_cache_flush
+	add	x1, x1, :lo12:zftl_cache_flush
+	str	x1, [x0,64]
+	adrp	x1, zftl_flash_suspend
+	add	x1, x1, :lo12:zftl_flash_suspend
+	str	x1, [x0,88]
+	adrp	x1, zftl_flash_resume
+	add	x1, x1, :lo12:zftl_flash_resume
+	str	x1, [x0,96]
+	adrp	x1, zftl_get_density
+	add	x1, x1, :lo12:zftl_get_density
+	str	x1, [x0,72]
+	adrp	x1, zftl_read_flash_info
+	add	x1, x1, :lo12:zftl_read_flash_info
+	str	x1, [x0,112]
+	adrp	x1, zftl_read
+	add	x1, x1, :lo12:zftl_read
+	str	x1, [x0,40]
+	adrp	x1, zftl_write
+	add	x1, x1, :lo12:zftl_write
+	str	x1, [x0,48]
+	adrp	x1, zftl_sys_read
+	add	x1, x1, :lo12:zftl_sys_read
+	str	x1, [x0,24]
+	adrp	x1, zftl_sys_write
+	add	x1, x1, :lo12:zftl_sys_write
+	str	x1, [x0,32]
+	adrp	x1, zftl_vendor_read
+	add	x1, x1, :lo12:zftl_vendor_read
+	str	x1, [x0,8]
+	adrp	x1, zftl_vendor_write
+	add	x1, x1, :lo12:zftl_vendor_write
+	str	x1, [x0,16]
+	adrp	x1, zftl_nandc_get_irq_status
+	add	x1, x1, :lo12:zftl_nandc_get_irq_status
+	str	x1, [x0,120]
+	adrp	x1, zftl_proc_ftl_read
+	add	x1, x1, :lo12:zftl_proc_ftl_read
+	str	x1, [x0,128]
+	adrp	x1, zftl_do_gc
+	add	x1, x1, :lo12:zftl_do_gc
+	str	x1, [x0,104]
+	adrp	x1, zftl_discard
+	add	x1, x1, :lo12:zftl_discard
+	str	x1, [x0,56]
+	ldr	x0, [x19,1184]
+	bl	nand_flash_init
+	mov	w22, w0
+	cbnz	w0, .L2793
+	bl	zftl_init
+	mov	w19, w0
+	bl	zftl_proc_debug_init
 	mov	w0, 1
-	bl	buf_alloc
-	mov	x27, x0
-	adrp	x0, .LC166
-	str	w21, [x29,140]
-	add	x0, x0, :lo12:.LC166
-	str	x0, [x29,120]
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	add	x0, x0, 664
-	str	x0, [x29,112]
-.L2830:
-	add	x20, x23, :lo12:.LANCHOR0
-	ldrh	w0, [x20,3276]
-	cmp	w0, w19
-	bls	.L2846
-	lsl	w0, w19, 1
-	mov	w25, 0
-	sub	w0, w0, #1
-	str	w0, [x29,136]
-.L2847:
-	ldrb	w0, [x29,185]
-	cmp	w0, w25
-	bls	.L2844
-	mov	w24, 1
-.L2845:
-	cmp	w24, w26
-	bhi	.L2864
-	add	x0, x29, 176
-	add	x0, x0, x25, sxtw 1
-	ldrh	w2, [x0,16]
-	mov	w0, 65535
-	cmp	w2, w0
-	beq	.L2831
-	add	x1, x23, :lo12:.LANCHOR0
-	cmp	w26, 3
-	ldrh	w0, [x1,3324]
-	mul	w0, w2, w0
-	add	w20, w0, w19
-	bne	.L2832
-	orr	w20, w20, w24, lsl 24
-	b	.L2833
-.L2832:
-	cmp	w26, 2
-	bne	.L2833
-	ldr	w3, [x29,136]
-	ldrb	w20, [x1,3225]
-	add	w0, w0, w3
-	add	w0, w0, w24
-	orr	w20, w0, w20, lsl 24
-.L2833:
-	mov	w1, 1
-	str	w20, [x27,40]
-	mov	x0, x27
-	str	x2, [x29,104]
-	bl	sblk_read_page
-	ldr	x7, [x27,8]
-	mov	w3, w20
-	ldr	x0, [x27,24]
-	ldr	w9, [x27,52]
-	ldr	w1, [x7,12]
-	str	w1, [sp]
-	mov	w4, w9
-	ldr	x2, [x29,104]
-	ldr	w1, [x0]
-	str	w1, [sp,8]
-	str	x9, [x29,104]
-	ldr	w1, [x0,4]
-	str	w1, [sp,16]
-	ldr	w1, [x0,8]
-	str	w1, [sp,24]
-	mov	w1, w2
-	mov	w2, w19
-	ldr	w0, [x0,12]
-	str	w0, [sp,32]
-	ldr	x0, [x29,120]
-	ldr	w5, [x7]
-	ldr	w6, [x7,4]
-	ldr	w7, [x7,8]
+	strb	w0, [x21,-102]
+	b	.L2794
+.L2793:
+	ldr	x1, [x19,1176]
+	adrp	x2, ftl_read_flash_info
+	add	x2, x2, :lo12:ftl_read_flash_info
+	adrp	x0, ftl_deinit
+	add	x0, x0, :lo12:ftl_deinit
+	adrp	x21, .LANCHOR2
+	str	x2, [x1,112]
+	adrp	x2, ftl_read
+	add	x2, x2, :lo12:ftl_read
+	str	x2, [x1,40]
+	adrp	x2, ftl_write
+	str	x0, [x1,80]
+	add	x2, x2, :lo12:ftl_write
+	str	x2, [x1,48]
+	adrp	x2, ftl_sys_read
+	adrp	x0, ftl_cache_flush
+	add	x2, x2, :lo12:ftl_sys_read
+	str	x2, [x1,24]
+	adrp	x2, ftl_sys_write
+	add	x0, x0, :lo12:ftl_cache_flush
+	add	x2, x2, :lo12:ftl_sys_write
+	str	x2, [x1,32]
+	adrp	x2, ftl_vendor_read
+	str	x0, [x1,64]
+	add	x2, x2, :lo12:ftl_vendor_read
+	str	x2, [x1,8]
+	adrp	x2, ftl_vendor_write
+	adrp	x0, ftl_flash_suspend
+	add	x2, x2, :lo12:ftl_vendor_write
+	str	x2, [x1,16]
+	adrp	x2, ftl_nandc_get_irq_status
+	add	x0, x0, :lo12:ftl_flash_suspend
+	add	x2, x2, :lo12:ftl_nandc_get_irq_status
+	str	x0, [x1,88]
+	str	x2, [x1,120]
+	adrp	x0, ftl_flash_resume
+	adrp	x2, ftl_proc_ftl_read
+	add	x0, x0, :lo12:ftl_flash_resume
+	add	x2, x2, :lo12:ftl_proc_ftl_read
+	str	x0, [x1,96]
+	str	x2, [x1,128]
+	adrp	x0, ftl_get_density
+	adrp	x2, ftl_do_gc
+	add	x0, x0, :lo12:ftl_get_density
+	add	x2, x2, :lo12:ftl_do_gc
+	str	x0, [x1,72]
+	str	x2, [x1,104]
+	adrp	x2, ftl_discard
+	ldr	x0, [x19,1184]
+	add	x2, x2, :lo12:ftl_discard
+	str	x2, [x1,56]
+	bl	FlashInit
+	mov	w19, w0
+	cmn	w22, #2
+	bne	.L2795
+	add	x22, x21, :lo12:.LANCHOR2
+	adrp	x1, gNandParaInfo
+	add	x22, x22, 376
+	add	x1, x1, :lo12:gNandParaInfo
+	mov	x0, x22
+	mov	w2, 32
+	bl	ftl_memcpy
+	ldrb	w0, [x22,18]
+	bl	flash_lsb_page_tbl_build
+.L2795:
+	adrp	x0, g_nandc_version_data
+	ldr	w1, [x0,#:lo12:g_nandc_version_data]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	adrp	x1, .LANCHOR0
+	bne	.L2796
+	adrp	x0, gFlashSlcMode
+	ldrb	w0, [x0,#:lo12:gFlashSlcMode]
+	cbnz	w0, .L2797
+.L2796:
+	add	x0, x20, :lo12:.LANCHOR4
+	strb	wzr, [x1,#:lo12:.LANCHOR0]
+	strb	wzr, [x0,1264]
+.L2797:
+	adrp	x2, gNandFlashIDBEccBits
+	add	x0, x1, :lo12:.LANCHOR0
+	add	x21, x21, :lo12:.LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR4
+	ldrb	w2, [x2,#:lo12:gNandFlashIDBEccBits]
+	strb	w2, [x0,632]
+	adrp	x2, gNandFlashEccBits
+	ldrh	w3, [x21,386]
+	str	xzr, [x20,1224]
+	ldrb	w2, [x2,#:lo12:gNandFlashEccBits]
+	strb	w2, [x0,724]
+	mov	w2, 1
+	mov	w0, 0
+.L2798:
+	cmp	w2, w3
+	bhi	.L2803
+	add	w0, w0, 1
+	lsl	w2, w2, 1
+	uxth	w0, w0
+	b	.L2798
+.L2803:
+	add	x1, x1, :lo12:.LANCHOR0
+	sub	w0, w0, #1
+	strb	wzr, [x1,672]
+	strh	w0, [x1,3340]
+	cbnz	w19, .L2794
+	bl	FtlInit
+	mov	w19, w0
+.L2794:
+	adrp	x0, .LC219
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC219
 	bl	printk
-	ldr	x9, [x29,104]
-	cmp	w9, 512
-	beq	.L2851
-	cmn	w9, #1
-	bne	.L2835
-.L2851:
-	mov	w0, 1
-	str	w0, [x29,140]
-.L2835:
-	add	x0, x23, :lo12:.LANCHOR0
-	ldr	x1, [x29,152]
-	ldr	x0, [x0,64]
-	add	x0, x0, x1
-	ldrb	w0, [x0,2]
-	and	w0, w0, 224
-	cmp	w0, 32
-	beq	.L2831
-	cmp	w0, 224
-	cset	w2, eq
-	cbnz	w2, .L2831
-	ldr	x0, [x27,24]
-	str	x2, [x29,104]
-	ldr	w0, [x0,4]
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,172]
-	cmn	w0, #1
-	ldr	x2, [x29,104]
-	bne	.L2837
-	ldr	x0, [x27,24]
-	add	x1, x29, 172
-	ldr	w0, [x0,4]
-	bl	pm_log2phys
-.L2837:
-	ldr	w0, [x29,172]
-	cmp	w0, w20
-	bne	.L2838
-	ldr	x2, [x27,24]
-	add	w21, w21, 1
+	mov	w0, w19
+.L2791:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	rk_ftl_init, .-rk_ftl_init
+	.align	2
+	.global	gc_update_l2p_map_new
+	.type	gc_update_l2p_map_new, %function
+gc_update_l2p_map_new:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	adrp	x22, .LANCHOR2
+	ldr	x20, [x0,608]
+	ldrh	w24, [x0,3274]
+	add	x0, x20, 80
+	str	x0, [x29,128]
+	ldrb	w0, [x0,9]
+	mul	w24, w24, w0
+	bl	timer_get_time
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2805
 	adrp	x0, .LC220
-	mov	w1, w20
+	ldrh	w1, [x20,80]
 	add	x0, x0, :lo12:.LC220
-	mov	w3, w21
-	ldr	w2, [x2,4]
 	bl	printk
-.L2838:
-	ldr	x0, [x29,144]
-	cbz	x0, .L2840
-	ubfiz	x20, x28, 2, 32
-	ldr	w2, [x0,x20]
-	ldr	x0, [x27,24]
-	ldr	w0, [x0,4]
-	cmp	w0, w2
-	beq	.L2841
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L2841
+.L2805:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x20,80]
+	sub	w2, w24, #1
+	mov	w21, 0
+	mov	w23, w21
+	adrp	x27, .LANCHOR4
+	ldr	x0, [x0,600]
+	strh	w2, [x0,x1,lsl 1]
+	adrp	x0, .LC222
+	add	x0, x0, :lo12:.LC222
+	str	x0, [x29,120]
 	adrp	x0, .LC221
-	mov	w1, w28
 	add	x0, x0, :lo12:.LC221
+	str	x0, [x29,112]
+.L2806:
+	cmp	w23, w24
+	beq	.L2838
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x0, [x0,1136]
+	ldr	w2, [x0,w23,sxtw 2]
+	cmn	w2, #1
+	beq	.L2807
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2832]
+	lsl	w0, w0, 7
+	udiv	w0, w2, w0
+	and	w0, w0, 65535
+	str	w0, [x29,140]
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2808
+	ldr	x0, [x29,112]
+	mov	w3, w23
+	ldr	w1, [x29,140]
 	bl	printk
-.L2841:
-	ldr	x0, [x29,144]
-	ldr	x1, [x27,24]
-	ldr	w0, [x0,x20]
-	ldr	w1, [x1,4]
-	cmp	w1, w0
-	beq	.L2840
+.L2808:
+	mov	w25, w23
+.L2814:
+	add	x1, x27, :lo12:.LANCHOR4
+	sbfiz	x26, x25, 2, 32
+	ldr	x0, [x1,1136]
+	ldr	w4, [x0,x26]
+	cmn	w4, #1
+	beq	.L2809
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w2, [x29,140]
+	ldrb	w0, [x0,2832]
+	lsl	w0, w0, 7
+	udiv	w0, w4, w0
+	cmp	w2, w0, uxth
+	bne	.L2809
+	ldr	x0, [x1,1144]
+	str	x4, [x29,104]
+	ldr	w28, [x0,x26]
+	mov	w0, w4
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,156]
 	cmn	w0, #1
-	beq	.L2840
-	adrp	x0, .LC0
-	ldr	x1, [x29,112]
-	add	x0, x0, :lo12:.LC0
-	mov	w2, 1193
+	ldr	x4, [x29,104]
+	bne	.L2810
+	mov	w0, w4
+	add	x1, x29, 156
+	mov	w2, 0
+	bl	pm_log2phys
+	ldr	x4, [x29,104]
+.L2810:
+	ldr	w3, [x29,156]
+	cmp	w3, w28
+	bne	.L2811
+	add	x0, x27, :lo12:.LANCHOR4
+	add	x1, x29, 152
+	mov	w2, 1
+	add	w21, w21, 1
+	ldr	x0, [x0,1152]
+	ldr	w0, [x0,x26]
+	str	w0, [x29,152]
+	mov	w0, w4
+	bl	pm_log2phys
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w0, 21
+	ldrh	w1, [x2,3340]
+	sub	w3, w0, w1
+	mov	w0, 1
+	lsl	w0, w0, w3
+	lsr	w28, w28, w1
+	sub	w0, w0, #1
+	and	w28, w0, w28
+	ldrb	w0, [x2,3338]
+	udiv	w0, w28, w0
+	b	.L2837
+.L2811:
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2813
+	ldr	x0, [x29,120]
+	mov	w1, w4
+	mov	w2, w28
 	bl	printk
-.L2840:
-	add	w28, w28, 1
-.L2831:
-	add	w24, w24, 1
-	uxth	w24, w24
-	b	.L2845
-.L2864:
+.L2813:
+	ldr	x0, [x29,128]
+	ldrh	w0, [x0]
+.L2837:
+	bl	ftl_vpn_decrement
+	add	x0, x27, :lo12:.LANCHOR4
+	mov	w1, -1
+	ldr	x0, [x0,1136]
+	str	w1, [x0,x26]
+	bl	timer_get_time
+.L2809:
 	add	w25, w25, 1
-	uxth	w25, w25
-	b	.L2847
-.L2844:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L2830
-.L2846:
-	mov	x0, x27
-	bl	buf_free
-	ldr	x3, [x29,128]
-	adrp	x0, .LC222
-	ldr	x2, [x20,72]
-	add	x0, x0, :lo12:.LC222
-	mov	w1, w22
+	cmp	w25, w24
+	bne	.L2814
+.L2807:
+	add	w23, w23, 1
+	b	.L2806
+.L2838:
+	ldr	w0, [x22,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2816
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w3, [x20,80]
+	ldr	x1, [x0,608]
+	ldr	x2, [x0,600]
+	adrp	x0, .LC223
+	add	x0, x0, :lo12:.LC223
+	ldrh	w1, [x1,80]
 	ldrh	w2, [x2,x3,lsl 1]
 	mov	w3, w21
 	bl	printk
-	ldr	w0, [x29,140]
-.L2828:
-	sub	sp, x29, #48
-	ldp	x19, x20, [sp,64]
-	ldp	x21, x22, [sp,80]
-	ldp	x23, x24, [sp,96]
-	ldp	x25, x26, [sp,112]
-	ldp	x27, x28, [sp,128]
-	ldp	x29, x30, [sp,48]
-	add	sp, sp, 256
+.L2816:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x20,80]
+	ldr	x0, [x0,600]
+	ldrh	w0, [x0,x1,lsl 1]
+	cmp	w0, w21
+	beq	.L2817
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 488
+	add	x1, x1, 592
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2817:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x20,80]
+	ldr	x0, [x19,600]
+	strh	w21, [x0,x1,lsl 1]
+	ldrh	w0, [x20,80]
+	bl	zftl_insert_data_list
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
 	ret
-	.size	ftl_sblk_dump, .-ftl_sblk_dump
+	.size	gc_update_l2p_map_new, .-gc_update_l2p_map_new
 	.align	2
-	.global	zftl_read
-	.type	zftl_read, %function
-zftl_read:
-	stp	x29, x30, [sp, -176]!
+	.global	gc_scan_src_blk_one_page
+	.type	gc_scan_src_blk_one_page, %function
+gc_scan_src_blk_one_page:
+	stp	x29, x30, [sp, -80]!
+	mov	w4, 0
+	mov	w6, 65535
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	mov	w19, w0
-	adrp	x0, .LANCHOR2
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	mov	w24, w1
-	stp	x21, x22, [sp,32]
-	stp	x27, x28, [sp,80]
-	mov	w25, w2
-	mov	x23, x3
-	tbz	x0, 12, .L2866
-	adrp	x0, .LC223
-	mov	w1, w19
-	add	x0, x0, :lo12:.LC223
-	mov	w2, w24
-	mov	w3, w25
-	bl	printk
-.L2866:
-	cbnz	w19, .L2867
-	adrp	x0, .LANCHOR0+4
-	mov	w19, 24576
-	ldr	w2, [x0,#:lo12:.LANCHOR0+4]
-	b	.L2868
-.L2867:
-	cmp	w19, 3
-	mov	w0, -1
-	bhi	.L2869
-	lsl	w19, w19, 13
-	mov	w2, 8192
-.L2868:
-	add	w1, w24, w25
-	mov	w0, -1
-	cmp	w1, w2
-	bhi	.L2869
-	adrp	x22, .LANCHOR0
-	add	w24, w19, w24
-	add	x1, x22, :lo12:.LANCHOR0
-	add	w28, w24, w25
-	str	wzr, [x29,152]
-	ldr	x2, [x1,2848]
-	ldr	w0, [x2,24]
-	add	w0, w0, w25
-	str	w0, [x2,24]
-	ldrb	w0, [x1,2816]
-	sub	w1, w28, #1
-	udiv	w27, w24, w0
-	mov	w21, w27
-	udiv	w0, w1, w0
-	str	w0, [x29,148]
-	sub	w26, w0, w27
-	add	w0, w26, 1
-	str	w0, [x29,156]
-	adrp	x0, .LC0
-	add	x0, x0, :lo12:.LC0
-	str	x0, [x29,136]
-	adrp	x0, .LANCHOR3
-	add	x0, x0, :lo12:.LANCHOR3
-	add	x0, x0, 680
-	str	x0, [x29,128]
-.L2870:
-	ldr	w0, [x29,156]
-	cbz	w0, .L2916
-	add	x0, x22, :lo12:.LANCHOR0
-	ldr	w1, [x29,148]
-	cmp	w21, w27
-	cset	w2, eq
-	cmp	w21, w1
-	ldrb	w0, [x0,2816]
-	cset	w20, eq
-	uxth	w19, w0
-	cbnz	w20, .L2896
-	cbz	w2, .L2871
-	b	.L2915
-.L2896:
-	cbz	w2, .L2873
-.L2915:
-	udiv	w20, w24, w0
-	msub	w20, w20, w0, w24
-	uxth	w0, w25
-	uxth	w20, w20
-	sub	w19, w19, w20
-	uxth	w19, w19
-	cmp	w19, w25
-	csel	w19, w0, w19, hi
-	b	.L2871
-.L2873:
-	msub	w19, w0, w21, w28
-	mov	w20, w2
-	uxtb	w19, w19
-.L2871:
-	add	x1, x22, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR0
+	str	x23, [sp,48]
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w5, w4
+	add	x2, x3, 2896
+	stp	x21, x22, [sp,32]
+	ldrb	w0, [x2,4]
+	add	x1, x2, x0, sxtw 1
+	ldrb	w7, [x3,3276]
+	ldrh	w1, [x1,40]
+	ldrh	w3, [x2,2]
+.L2840:
+	cmp	w1, w6
+	bne	.L2882
+	add	w0, w0, 1
+	uxtb	w0, w0
+	cmp	w0, w7
+	bne	.L2841
+	add	w3, w3, 1
+	mov	w4, 1
 	mov	w0, 0
-	add	x1, x1, 768
-.L2876:
-	ldr	w2, [x1,36]
-	cmp	w2, w21
-	bne	.L2874
-	ldrb	w2, [x1,2]
-	tbz	x2, 3, .L2874
-	add	x2, x22, :lo12:.LANCHOR0
-	ubfiz	x1, x0, 6, 32
-	add	x0, x2, x1
-	ubfiz	x20, x20, 9, 16
-	lsl	w2, w19, 9
-	ubfiz	x19, x19, 9, 16
-	ldr	x1, [x0,776]
-	mov	x0, x23
-	add	x23, x23, x19
-	add	x1, x1, x20
-	bl	ftl_memcpy
-	b	.L2875
-.L2874:
+	uxth	w3, w3
+.L2841:
+	add	x1, x2, x0, sxtw 1
+	mov	w5, 1
+	ldrh	w1, [x1,40]
+	b	.L2840
+.L2882:
+	cbz	w5, .L2843
+	add	x2, x19, :lo12:.LANCHOR0
+	strb	w0, [x2,2900]
+.L2843:
+	cbz	w4, .L2844
+	add	x0, x19, :lo12:.LANCHOR0
+	strh	w3, [x0,2898]
+.L2844:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w2, [x0,3257]
+	ldrh	w20, [x0,3350]
+	cmp	w2, 2
+	mul	w1, w1, w20
+	bne	.L2845
+	ldrb	w2, [x0,2902]
+	add	x0, x0, 2896
+	cbnz	w2, .L2845
+	ldrh	w20, [x0,2]
+	add	w20, w1, w20, lsl 1
+	b	.L2846
+.L2845:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w20, [x0,2898]
+	add	w20, w1, w20
+.L2846:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x1, x2, 2896
+	ldrb	w0, [x2,2900]
 	add	w0, w0, 1
-	add	x1, x1, 64
-	cmp	w0, 32
-	bne	.L2876
-	mov	w0, w21
+	uxtb	w0, w0
+	strb	w0, [x2,2900]
+	ldrb	w2, [x2,3276]
+	cmp	w2, w0
+	bne	.L2847
+	ldrh	w0, [x1,2]
+	strb	wzr, [x1,4]
+	add	w0, w0, 1
+	strh	w0, [x1,2]
+.L2847:
+	mov	w0, 1
+	mov	w21, 0
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	buf_alloc
+	mov	x22, x0
+.L2858:
+	ldrb	w0, [x19,2902]
+	cbnz	w21, .L2860
+	cmp	w0, 3
+	beq	.L2848
+.L2860:
+	cmp	w0, w21
+	bgt	.L2850
+.L2859:
+	mov	x0, x22
+	bl	buf_free
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 80
+	ret
+.L2850:
+	ldrb	w1, [x19,3257]
+	cmp	w1, 2
+	bne	.L2851
+	cbnz	w0, .L2851
+	add	w0, w21, w20
+	orr	w0, w0, 33554432
+	b	.L2881
+.L2851:
+	orr	w0, w20, w21, lsl 24
+.L2881:
+	str	w0, [x22,40]
+	mov	w1, 1
+	mov	x0, x22
+	bl	sblk_read_page
+	ldr	w0, [x22,52]
+	cmp	w0, 512
+	beq	.L2855
+	cmn	w0, #1
+	beq	.L2855
+	ldr	x0, [x22,24]
+	ldr	w23, [x0,4]
+	mov	w0, w23
 	bl	lpa_hash_get_ppa
-	str	w0, [x29,172]
+	str	w0, [x29,76]
 	cmn	w0, #1
-	bne	.L2877
-	mov	w0, w21
-	add	x1, x29, 172
+	bne	.L2856
+	mov	w0, w23
+	add	x1, x29, 76
 	mov	w2, 0
 	bl	pm_log2phys
-.L2877:
-	ldr	w0, [x29,172]
-	cmn	w0, #1
-	bne	.L2878
-	mov	w19, 0
-.L2879:
-	add	x0, x22, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2816]
-	cmp	w19, w0
-	bcs	.L2875
-	madd	w0, w21, w0, w19
-	cmp	w0, w24
-	bcc	.L2880
-	cmp	w0, w28
-	bcs	.L2880
-	mov	x0, x23
-	mov	w1, 0
-	mov	w2, 512
-	add	x23, x23, 512
-	bl	ftl_memset
-.L2880:
-	add	w19, w19, 1
-	b	.L2879
-.L2878:
-	mov	w0, 0
-	bl	buf_alloc
-	mov	x26, x0
-	cbnz	x0, .L2882
-	bl	ftl_read_ahead
-	b	.L2870
-.L2882:
-	add	x1, x22, :lo12:.LANCHOR0
-	ldr	x2, [x1,2848]
-	ldr	w0, [x2,40]
+.L2856:
+	ldr	w0, [x29,76]
+	cmp	w20, w0
+	bne	.L2855
+	ldrh	w2, [x19,2920]
+	ldr	x1, [x19,3248]
+	str	w20, [x1,x2,lsl 2]
+	ldrh	w1, [x19,2920]
+	add	w1, w1, 1
+	strh	w1, [x19,2920]
+.L2855:
+	ldrh	w0, [x19,2922]
 	add	w0, w0, 1
-	str	w0, [x2,40]
-	ldr	w0, [x29,172]
-	str	w0, [x26,40]
-	str	w0, [x26,44]
-	ldrb	w0, [x1,2816]
-	cmp	w0, w19
+	strh	w0, [x19,2922]
+.L2848:
+	add	w21, w21, 1
+	cmp	w21, 4
+	bne	.L2858
+	b	.L2859
+	.size	gc_scan_src_blk_one_page, .-gc_scan_src_blk_one_page
+	.align	2
+	.global	gc_scan_src_blk
+	.type	gc_scan_src_blk, %function
+gc_scan_src_blk:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldrh	w1, [x0,2896]
+	mov	w0, 65535
+	cmp	w1, w0
 	bne	.L2884
-	str	x23, [x26,16]
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 925
+	add	x1, x1, 616
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
 .L2884:
-	mov	x0, x26
-	mov	w1, 1
-	bl	sblk_read_page
-	ldr	w9, [x26,52]
-	cmn	w9, #1
-	bne	.L2885
-	add	x0, x22, :lo12:.LANCHOR0
-	str	w9, [x29,152]
-	ldr	x1, [x0,80]
-	ldr	w0, [x1,552]
-	add	w0, w0, 1
-	str	w0, [x1,552]
-	b	.L2886
-.L2885:
-	cmp	w9, 256
-	bne	.L2886
-	add	x1, x22, :lo12:.LANCHOR0
-	mov	w2, 21
-	mov	w5, 1
-	ldr	w0, [x29,172]
-	ldr	w3, [x26,40]
-	ldrh	w4, [x1,3314]
-	str	x9, [x29,104]
-	sub	w2, w2, w4
-	lsr	w4, w0, w4
-	lsl	w2, w5, w2
-	ldrb	w0, [x1,3312]
-	sub	w2, w2, #1
-	str	x5, [x29,112]
-	and	w4, w2, w4
-	ldr	w2, [x26,36]
-	udiv	w4, w4, w0
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w3, 65535
+	mov	w0, 0
+	ldrh	w1, [x2,2896]
+	cmp	w1, w3
+	beq	.L2885
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2886
+	ubfiz	x3, x1, 1, 16
+	ldr	x2, [x2,600]
 	adrp	x0, .LC224
 	add	x0, x0, :lo12:.LC224
-	str	x4, [x29,120]
-	uxth	w1, w4
+	ldrh	w2, [x2,x3]
 	bl	printk
-	ldr	x4, [x29,120]
-	mov	w2, 0
-	ldr	x5, [x29,112]
-	mov	w0, w4
-	mov	w1, w5
-	bl	gc_add_sblk
-	ldr	x9, [x29,104]
 .L2886:
-	ldr	x7, [x26,24]
-	ldr	w5, [x7,4]
-	cmp	w5, w21
-	beq	.L2887
-	ldr	w4, [x7]
-	adrp	x0, .LC196
-	ldr	w6, [x7,8]
-	mov	w2, w21
-	ldrb	w1, [x26,1]
-	add	x0, x0, :lo12:.LC196
-	ldr	w3, [x29,172]
-	ldr	w7, [x7,12]
-	str	x9, [x29,120]
-	bl	printk
-	add	x3, x22, :lo12:.LANCHOR0
-	mov	w2, 21
-	mov	w1, 1
-	ldrh	w0, [x3,3314]
-	sub	w2, w2, w0
-	lsl	w2, w1, w2
-	ldr	w1, [x29,172]
-	sub	w2, w2, #1
-	lsr	w0, w1, w0
-	ldrb	w1, [x3,3312]
-	and	w0, w2, w0
-	udiv	w0, w0, w1
-	mov	x1, 0
-	bl	ftl_sblk_dump
-	ldr	x9, [x29,120]
+	add	x20, x19, :lo12:.LANCHOR0
+	bl	timer_get_time
+	add	x21, x20, 2896
+	add	x1, x20, 2936
+	ldrh	w0, [x20,2896]
+	bl	ftl_get_blk_list_in_sblk
+	uxtb	w1, w0
+	strb	w1, [x21,5]
+	cbnz	w1, .L2887
+	mov	w0, -1
+	strh	w0, [x20,2896]
+	b	.L2913
 .L2887:
-	ldr	x0, [x26,24]
-	ldr	w0, [x0,4]
-	cmp	w0, w21
-	bne	.L2897
-	cmn	w9, #1
-	bne	.L2888
-.L2897:
-	ldr	x0, [x29,136]
-	mov	w2, 1030
-	ldr	x1, [x29,128]
+	ldrh	w3, [x20,2896]
+	ldr	x2, [x20,584]
+	add	x2, x2, x3, lsl 2
+	ldrb	w2, [x2,2]
+	tst	w2, 192
+	and	w4, w2, 224
+	beq	.L2888
+	cmp	w4, 224
+	beq	.L2888
+	ldr	x2, [x20,608]
+	ldrh	w5, [x2,16]
+	cmp	w5, w3
+	beq	.L2888
+	ldrh	w5, [x2,48]
+	cmp	w5, w3
+	beq	.L2888
+	ldrh	w2, [x2,80]
+	cmp	w2, w3
+	bne	.L2889
+.L2888:
+	cbnz	w4, .L2890
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,600]
+	ldrh	w0, [x0,x3,lsl 1]
+	cbz	w0, .L2891
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 945
+	add	x1, x1, 616
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2891:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2896]
+	ldr	x0, [x0,600]
+	strh	wzr, [x0,x1,lsl 1]
+.L2890:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, -1
+	strh	wzr, [x19,2920]
+	strh	w0, [x19,2896]
+.L2913:
+	mov	w0, 0
+	b	.L2885
+.L2889:
+	and	w0, w0, 255
+	sub	w0, w0, #1
+	add	x0, x21, x0, sxtw 1
+	ldrh	w20, [x0,40]
+	mov	w0, 65535
+	cmp	w20, w0
+	bne	.L2892
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 953
+	add	x1, x1, 616
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2892:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w24, 1
+	ldrh	w3, [x2,2896]
+	ldr	x4, [x2,584]
+	ldrh	w0, [x2,3300]
+	add	x3, x4, x3, lsl 2
+	ldrh	w1, [x2,3350]
+	sub	w0, w0, #1
+	ldrb	w3, [x3,2]
+	uxth	w0, w0
+	mul	w1, w20, w1
+	and	w3, w3, 224
+	cmp	w3, 160
+	bne	.L2893
+	ldrb	w3, [x2,3257]
+	cmp	w3, 2
+	uxth	w24, w3
+	orr	w1, w1, w3, lsl 24
+	bne	.L2893
+	ldrh	w0, [x2,3274]
+	sub	w0, w0, #1
+	uxth	w0, w0
+.L2893:
+	add	x20, x19, :lo12:.LANCHOR0
+	orr	w23, w0, w1
+	mov	w0, 1
+	strb	w24, [x20,2902]
+	strh	wzr, [x20,2898]
+	strb	wzr, [x20,2900]
+	strh	wzr, [x20,2922]
+	bl	buf_alloc
+	mov	w1, 1
+	str	w23, [x0,40]
+	mov	x21, x0
+	bl	sblk_read_page
+	ldrh	w0, [x20,3274]
+	mov	w1, 255
+	ldrb	w2, [x20,3276]
+	mul	w2, w0, w2
+	ldr	x0, [x20,3248]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	strh	wzr, [x20,2920]
+	ldr	w0, [x21,52]
+	cmp	w0, 512
+	beq	.L2914
+	cmn	w0, #1
+	beq	.L2914
+	ldr	x0, [x21,24]
+	ldr	w1, [x0]
+	mov	w0, 15555
+	movk	w0, 0xf55f, lsl 16
+	cmp	w1, w0
+	beq	.L2896
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 985
+	add	x1, x1, 616
+	add	x0, x0, :lo12:.LC0
 	bl	printk
-.L2888:
-	ldr	x0, [x26,16]
-	cbnz	x0, .L2890
-	ldr	x1, [x26,8]
-	ubfiz	x20, x20, 9, 16
-	mov	x0, x23
-	lsl	w2, w19, 9
-	add	x1, x1, x20
-	bl	ftl_memcpy
-.L2890:
-	mov	x0, x26
-	ubfiz	x19, x19, 9, 16
-	add	x23, x23, x19
+	bl	dump_stack
+.L2914:
+	mov	x0, x21
 	bl	buf_free
-.L2875:
-	ldr	w0, [x29,156]
-	add	w21, w21, 1
+	mov	w0, -1
+	b	.L2885
+.L2896:
+	ldrb	w0, [x20,3276]
+	mov	x26, 0
+	ldrh	w22, [x20,3300]
+	mov	w25, 1
+	ldr	x23, [x21,8]
+	mul	w22, w0, w22
+	mul	w22, w24, w22
+	mov	w24, 21
+	uxth	w22, w22
+.L2897:
+	cmp	w22, w26
+	ble	.L2915
+	ldr	w0, [x23,x26,lsl 2]
+	cmn	w0, #1
+	beq	.L2899
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,92]
+	cmn	w0, #1
+	bne	.L2900
+	ldr	w0, [x23,x26,lsl 2]
+	add	x1, x29, 92
+	mov	w2, 0
+	bl	pm_log2phys
+.L2900:
+	ldrh	w1, [x20,3340]
+	ldr	w2, [x29,92]
+	sub	w0, w24, w1
+	ldrh	w3, [x20,2896]
+	lsl	w0, w25, w0
+	lsr	w1, w2, w1
 	sub	w0, w0, #1
-	str	w0, [x29,156]
-	b	.L2870
-.L2916:
+	and	w1, w0, w1
+	ldrb	w0, [x20,3338]
+	udiv	w1, w1, w0
+	cmp	w1, w3
+	bne	.L2899
+	ldrh	w3, [x20,2920]
+	ldr	x1, [x20,3248]
+	str	w2, [x1,x3,lsl 2]
+	ldrh	w1, [x20,2920]
+	add	w1, w1, 1
+	strh	w1, [x20,2920]
+.L2899:
 	bl	timer_get_time
-	adrp	x1, .LANCHOR7+3312
-	str	w0, [x1,#:lo12:.LANCHOR7+3312]
-	ldr	w0, [x29,152]
-.L2869:
+	add	x26, x26, 1
+	b	.L2897
+.L2915:
+	mov	x0, x21
+	bl	buf_free
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2896]
+	ldr	x3, [x0,600]
+	ubfiz	x2, x1, 1, 16
+	ldrh	w2, [x3,x2]
+	ldrh	w3, [x0,2920]
+	cmp	w2, w3
+	beq	.L2903
+	adrp	x0, .LC225
+	add	x0, x0, :lo12:.LC225
+	bl	printk
+.L2903:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x19,2896]
+	ldr	x1, [x19,600]
+	ldrh	w3, [x19,2920]
+	strh	w3, [x1,x2,lsl 1]
+	strh	wzr, [x19,2924]
+	ldrh	w0, [x19,2920]
+.L2885:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 176
-	ret
-	.size	zftl_read, .-zftl_read
-	.align	2
-	.global	zftl_vendor_read
-	.type	zftl_vendor_read, %function
-zftl_vendor_read:
-	stp	x29, x30, [sp, -16]!
-	mov	w4, w1
-	mov	x3, x2
-	add	x29, sp, 0
-	add	w1, w0, 512
-	mov	w2, w4
-	mov	w0, 2
-	bl	zftl_read
-	ldp	x29, x30, [sp], 16
-	ret
-	.size	zftl_vendor_read, .-zftl_vendor_read
-	.align	2
-	.global	zftl_sys_read
-	.type	zftl_sys_read, %function
-zftl_sys_read:
-	stp	x29, x30, [sp, -16]!
-	mov	w5, w0
-	mov	w4, w1
-	add	x29, sp, 0
-	mov	x3, x2
-	mov	w1, w5
-	mov	w2, w4
-	mov	w0, 2
-	bl	zftl_read
-	ldp	x29, x30, [sp], 16
+	ldp	x29, x30, [sp], 96
 	ret
-	.size	zftl_sys_read, .-zftl_sys_read
+	.size	gc_scan_src_blk, .-gc_scan_src_blk
 	.align	2
-	.global	vpn_check
-	.type	vpn_check, %function
-vpn_check:
-	stp	x29, x30, [sp, -128]!
+	.global	gc_scan_static_data
+	.type	gc_scan_static_data, %function
+gc_scan_static_data:
+	stp	x29, x30, [sp, -80]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	adrp	x20, .LANCHOR0
-	add	x19, x20, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR0
+	add	x3, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	bl	timer_get_time
-	adrp	x21, .LANCHOR7
-	bl	dump_ftl_info
-	adrp	x22, .LANCHOR3
-	ldr	x3, [x19,80]
-	adrp	x0, .LC225
-	add	x0, x0, :lo12:.LC225
-	adrp	x23, .LC0
-	add	x22, x22, :lo12:.LANCHOR3
-	add	x23, x23, :lo12:.LC0
-	ldrh	w1, [x3,16]
-	add	x22, x22, 696
-	ldrh	w2, [x3,48]
-	ldrh	w3, [x3,80]
-	bl	printk
-	ldr	x0, [x19,80]
-	ldr	x3, [x19,72]
-	ldrh	w1, [x0,16]
-	ubfiz	x2, x1, 1, 16
-	ldrh	w3, [x3,x2]
-	ldrh	w2, [x0,22]
-	adrp	x0, .LC226
-	add	x0, x0, :lo12:.LC226
-	sub	w4, w3, w2
-	bl	printk
-	ldr	x0, [x19,80]
-	ldr	x3, [x19,72]
-	mov	w19, 0
-	ldrh	w1, [x0,48]
-	ubfiz	x2, x1, 1, 16
-	ldrh	w3, [x3,x2]
-	ldrh	w2, [x0,54]
-	adrp	x0, .LC227
-	add	x0, x0, :lo12:.LC227
-	sub	w4, w3, w2
-	bl	printk
-	add	x0, x21, :lo12:.LANCHOR7
-	mov	w1, 0
-	add	x0, x0, 3320
-	mov	w2, 4608
-	bl	ftl_memset
-.L2920:
-	add	x24, x20, :lo12:.LANCHOR0
-	ldr	w0, [x24,2824]
-	cmp	w19, w0
-	bcs	.L2948
-	mov	w0, w19
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,124]
-	cmn	w0, #1
-	bne	.L2921
-	mov	w0, w19
-	add	x1, x29, 124
+	ldr	x0, [x3,608]
+	ldr	w1, [x0,544]
+	cmn	w1, #1
+	beq	.L2917
+	adrp	x21, .LANCHOR3
+	adrp	x22, .LC0
+	add	x21, x21, :lo12:.LANCHOR3
+	mov	w20, 11
+	add	x22, x22, :lo12:.LC0
+	add	x21, x21, 632
+.L2918:
+	add	x24, x19, :lo12:.LANCHOR0
+	add	x1, x29, 76
 	mov	w2, 0
-	bl	pm_log2phys
-	b	.L2922
-.L2921:
-	ldrh	w2, [x24,3314]
-	mov	w1, 21
-	lsr	w0, w0, w2
-	sub	w1, w1, w2
-	mov	w2, 1
-	lsl	w1, w2, w1
-	sub	w1, w1, #1
-	and	w0, w0, w1
-	ldrb	w1, [x24,3312]
-	udiv	w0, w0, w1
-	ldrh	w1, [x24,56]
-	cmp	w1, w0, uxth
-	bhi	.L2922
-	mov	x0, x23
-	mov	x1, x22
-	mov	w2, 1256
-	bl	printk
-.L2922:
-	ldr	w2, [x29,124]
-	cmn	w2, #1
-	beq	.L2924
-	add	x24, x20, :lo12:.LANCHOR0
-	mov	w3, 21
-	mov	w0, 1
-	ldrh	w4, [x24,3314]
-	sub	w3, w3, w4
-	lsr	w4, w2, w4
-	lsl	w3, w0, w3
-	ldrh	w0, [x24,56]
-	sub	w3, w3, #1
-	and	w4, w3, w4
-	ldrb	w3, [x24,3312]
-	udiv	w3, w4, w3
-	uxth	w25, w3
-	and	w3, w3, 65535
-	cmp	w0, w25
-	bls	.L2925
-	add	x0, x21, :lo12:.LANCHOR7
-	add	x0, x0, 3320
-	ldrh	w1, [x0,w3,sxtw 1]
-	add	w1, w1, 1
-	strh	w1, [x0,w3,sxtw 1]
-	b	.L2926
-.L2925:
-	adrp	x0, .LC228
-	mov	w1, w19
-	add	x0, x0, :lo12:.LC228
-	bl	printk
-	ldrb	w3, [x24,2816]
-	adrp	x0, .LC229
-	ldr	x1, [x24,3880]
-	add	x0, x0, :lo12:.LC229
-	mov	w2, 4
-	lsl	w3, w3, 7
-	bl	rknand_print_hex
-.L2926:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x0,56]
-	cmp	w0, w25
-	bhi	.L2924
-	mov	x0, x23
-	mov	x1, x22
-	mov	w2, 1266
-	bl	printk
-.L2924:
-	bl	timer_get_time
-	add	w19, w19, 1
-	b	.L2920
-.L2948:
-	mov	w23, 0
-	adrp	x26, .LC230
-	mov	w19, w23
-	add	x27, x21, :lo12:.LANCHOR7
-	add	x26, x26, :lo12:.LC230
-	mov	w28, 65535
-.L2929:
-	add	x22, x20, :lo12:.LANCHOR0
-	ldrh	w1, [x22,56]
-	cmp	w1, w19
-	bls	.L2949
-	uxtw	x1, w19
-	ldr	x0, [x22,72]
-	lsl	x25, x1, 1
-	add	x24, x27, 3320
-	sxtw	x5, w19
-	ldrh	w3, [x0,x25]
-	ldrh	w2, [x24,w19,sxtw 1]
-	cmp	w3, w2
-	beq	.L2930
-	ldr	x0, [x22,64]
-	str	x5, [x29,104]
-	add	x1, x0, x1, lsl 2
-	mov	x0, x26
-	ldrb	w4, [x1,2]
-	mov	w1, w19
-	ubfx	x4, x4, 5, 3
-	bl	printk
-	ldr	x0, [x22,72]
-	ldrh	w1, [x0,x25]
-	cmp	w1, w28
-	beq	.L2930
-	ldr	x5, [x29,104]
-	ldrh	w0, [x24,x5,lsl 1]
-	cmp	w0, w1
-	bls	.L2930
-	ldr	x1, [x22,80]
-	ldrh	w0, [x1,16]
-	cmp	w0, w19
-	beq	.L2930
-	ldrh	w0, [x1,80]
-	cmp	w0, w19
-	beq	.L2930
-	ldrh	w0, [x1,48]
-	cmp	w0, w19
-	csinc	w23, w23, wzr, eq
-.L2930:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L2929
-.L2949:
-	adrp	x22, .LANCHOR3
-	adrp	x24, .LC0
-	add	x22, x22, :lo12:.LANCHOR3
-	mov	w19, 0
-	add	x21, x21, :lo12:.LANCHOR7
-	add	x24, x24, :lo12:.LC0
-	add	x22, x22, 696
-.L2932:
-	add	x1, x20, :lo12:.LANCHOR0
-	ldrh	w0, [x1,56]
-	cmp	w0, w19
-	bls	.L2950
-	uxtw	x25, w19
-	ldr	x0, [x1,64]
-	add	x0, x0, x25, lsl 2
-	ldrb	w0, [x0,2]
-	tst	w0, 224
-	bne	.L2934
-	add	x0, x21, 3320
-	sxtw	x27, w19
-	ldrh	w0, [x0,w19,sxtw 1]
-	cbnz	w0, .L2935
-	lsl	x26, x25, 1
-	ldr	x0, [x1,72]
-	ldrh	w0, [x0,x26]
-	cbz	w0, .L2936
-	adrp	x0, .LC231
-	mov	w1, w19
-	add	x0, x0, :lo12:.LC231
-	bl	printk
-.L2936:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,72]
-	strh	wzr, [x0,x26]
-.L2935:
-	add	x0, x20, :lo12:.LANCHOR0
-	ldr	x0, [x0,72]
-	ldrh	w0, [x0,x25,lsl 1]
-	cbz	w0, .L2934
-	add	x0, x21, 3320
-	ldrh	w0, [x0,x27,lsl 1]
-	cbz	w0, .L2934
-	mov	x0, x24
-	mov	x1, x22
-	mov	w2, 1298
-	bl	printk
-.L2934:
-	add	w19, w19, 1
-	uxth	w19, w19
-	b	.L2932
-.L2950:
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC232
-	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, w23
-	add	x1, x1, 696
-	add	x0, x0, :lo12:.LC232
+	ldr	x0, [x24,608]
+	ldr	w0, [x0,544]
+	bl	pm_log2phys
+	ldr	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L2919
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x23, x0
+	ldr	w1, [x29,76]
+	str	w1, [x0,40]
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w0, [x23,52]
+	cmp	w0, 256
+	bne	.L2920
+	ldrh	w0, [x24,3340]
+	mov	w2, 21
+	mov	w1, 1
+	ldr	w3, [x29,76]
+	sub	w2, w2, w0
+	lsl	w2, w1, w2
+	lsr	w3, w3, w0
+	sub	w2, w2, #1
+	ldrb	w0, [x24,3338]
+	and	w2, w2, w3
+	udiv	w0, w2, w0
+	mov	w2, 0
+	bl	gc_add_sblk
+.L2920:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x23,24]
+	ldr	x0, [x0,608]
+	ldr	w1, [x1,4]
+	ldr	w0, [x0,544]
+	cmp	w1, w0
+	beq	.L2921
+	mov	x1, x21
+	mov	w2, 1424
+	mov	x0, x22
 	bl	printk
+	bl	dump_stack
+.L2921:
+	mov	x0, x23
+	bl	buf_free
+.L2919:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldr	x1, [x2,608]
+	ldr	w2, [x2,2840]
+	ldr	w0, [x1,544]
+	add	w0, w0, 1
+	str	w0, [x1,544]
+	cmp	w0, w2
+	bcc	.L2922
+	mov	w0, -1
+	str	w0, [x1,544]
+	ldr	w0, [x1,548]
+	add	w0, w0, 1
+	str	w0, [x1,548]
+	bl	ftl_flush
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	b	.L2916
+.L2922:
+	ldr	w0, [x29,76]
+	cmn	w0, #1
+	bne	.L2916
+	sub	w20, w20, #1
+	uxth	w20, w20
+	cbnz	w20, .L2918
+	b	.L2916
+.L2917:
+	ldr	w1, [x0,536]
+	ldr	w2, [x0,12]
+	add	w1, w1, 12959744
+	add	w1, w1, 256
+	cmp	w2, w1
+	bhi	.L2927
+	ldr	x3, [x3,2864]
+	ldr	w1, [x0,540]
+	ldr	w3, [x3,44]
+	add	w1, w1, 98304
+	add	w1, w1, 1696
+	cmp	w3, w1
+	bls	.L2916
+.L2927:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x1, [x19,2864]
+	ldr	w1, [x1,44]
+	str	w1, [x0,540]
+	str	w2, [x0,536]
+	str	wzr, [x0,544]
+.L2916:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 128
+	ldp	x29, x30, [sp], 80
 	ret
-	.size	vpn_check, .-vpn_check
+	.size	gc_scan_static_data, .-gc_scan_static_data
 	.align	2
-	.global	gc_scan_src_blk
-	.type	gc_scan_src_blk, %function
-gc_scan_src_blk:
-	stp	x29, x30, [sp, -96]!
+	.global	gc_block_vpn_scan
+	.type	gc_block_vpn_scan, %function
+gc_block_vpn_scan:
+	stp	x29, x30, [sp, -144]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
 	adrp	x19, .LANCHOR0
-	add	x0, x19, :lo12:.LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
 	stp	x25, x26, [sp,64]
-	ldrh	w1, [x0,2888]
-	mov	w0, 65535
+	stp	x27, x28, [sp,80]
+	ldr	x1, [x20,608]
+	ldrh	w0, [x20,576]
+	ldr	w1, [x1,608]
 	cmp	w1, w0
-	bne	.L2952
+	bcs	.L2932
+	bl	timer_get_time
+	ldr	x21, [x20,608]
+	ldr	w1, [x21,604]
+	add	w1, w1, 28672
+	add	w1, w1, 1328
+	cmp	w0, w1
+	bls	.L2932
+	bl	timer_get_time
+	str	w0, [x21,604]
+	ldr	x0, [x20,608]
+	ldrh	w2, [x20,576]
+	ldr	w1, [x0,600]
+	cmp	w1, w2
+	bcs	.L2936
+	ldr	x2, [x20,2864]
+	ldrh	w2, [x2,134]
+	cmp	w1, w2
+	bcs	.L2937
+.L2936:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x1, [x1,2864]
+	ldrh	w1, [x1,134]
+	str	w1, [x0,600]
+.L2937:
+	ldr	w25, [x0,600]
+	mov	w0, 65535
+	uxth	w20, w25
+	cmp	w20, w0
+	bne	.L2938
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1717
+	add	x1, x1, 656
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 712
-	mov	w2, 897
-	bl	printk
-.L2952:
-	add	x2, x19, :lo12:.LANCHOR0
-	mov	w3, 65535
-	mov	w0, 0
-	ldrh	w1, [x2,2888]
-	cmp	w1, w3
-	beq	.L2953
-	adrp	x0, .LANCHOR2
-	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L2954
-	ubfiz	x3, x1, 1, 16
-	ldr	x2, [x2,72]
-	adrp	x0, .LC233
-	add	x0, x0, :lo12:.LC233
-	ldrh	w2, [x2,x3]
 	bl	printk
-.L2954:
-	add	x20, x19, :lo12:.LANCHOR0
-	bl	timer_get_time
-	add	x21, x20, 2888
-	add	x1, x20, 2928
-	ldrh	w0, [x20,2888]
+	bl	dump_stack
+.L2938:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldr	x0, [x21,608]
+	ldr	w1, [x0,600]
+	add	w1, w1, 1
+	str	w1, [x0,600]
+	ldr	w1, [x0,608]
+	add	w1, w1, 1
+	str	w1, [x0,608]
+	add	x1, x29, 128
+	mov	w0, w20
 	bl	ftl_get_blk_list_in_sblk
-	uxtb	w1, w0
-	strb	w1, [x21,5]
-	cbnz	w1, .L2955
-	mov	w0, -1
-	strh	w0, [x20,2888]
-	b	.L2983
-.L2955:
-	ldrh	w3, [x20,2888]
-	ldr	x2, [x20,64]
-	add	x2, x2, x3, lsl 2
-	ldrb	w2, [x2,2]
-	tst	w2, 192
-	and	w4, w2, 224
-	beq	.L2956
-	cmp	w4, 224
-	beq	.L2956
-	ldr	x2, [x20,80]
-	ldrh	w5, [x2,16]
-	cmp	w5, w3
-	beq	.L2956
-	ldrh	w5, [x2,48]
-	cmp	w5, w3
-	beq	.L2956
-	ldrh	w2, [x2,80]
-	cmp	w2, w3
-	bne	.L2957
-.L2956:
-	cbnz	w4, .L2958
+	uxth	w1, w0
+	cbz	w1, .L2932
+	uxtw	x22, w20
+	ldr	x24, [x21,584]
+	add	x24, x24, x22, lsl 2
+	ldrb	w1, [x24,2]
+	tst	w1, 192
+	and	w2, w1, 224
+	beq	.L2939
+	cmp	w2, 224
+	beq	.L2939
+	ldr	x1, [x21,608]
+	ldrh	w3, [x1,16]
+	cmp	w3, w20
+	beq	.L2939
+	ldrh	w3, [x1,48]
+	cmp	w3, w20
+	beq	.L2939
+	ldrh	w1, [x1,80]
+	cmp	w1, w20
+	bne	.L2940
+.L2939:
+	cbnz	w2, .L2932
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,72]
-	ldrh	w0, [x0,x3,lsl 1]
-	cbz	w0, .L2959
+	lsl	x22, x22, 1
+	ldr	x0, [x0,600]
+	ldrh	w0, [x0,x22]
+	cbz	w0, .L2941
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1733
+	add	x1, x1, 656
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 712
-	mov	w2, 917
 	bl	printk
-.L2959:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2888]
-	ldr	x0, [x0,72]
-	strh	wzr, [x0,x1,lsl 1]
-.L2958:
+	bl	dump_stack
+.L2941:
 	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, -1
-	strh	wzr, [x19,2912]
-	strh	w0, [x19,2888]
-.L2983:
-	mov	w0, 0
-	b	.L2953
-.L2957:
-	and	w0, w0, 255
+	ldr	x0, [x19,600]
+	strh	wzr, [x0,x22]
+	b	.L2932
+.L2940:
+	and	w0, w0, 65535
+	add	x1, x29, 144
 	sub	w0, w0, #1
-	add	x0, x21, x0, sxtw 1
-	ldrh	w20, [x0,40]
+	add	x0, x1, x0, sxtw 1
+	ldrh	w21, [x0,-16]
 	mov	w0, 65535
-	cmp	w20, w0
-	bne	.L2960
+	cmp	w21, w0
+	bne	.L2943
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1739
+	add	x1, x1, 656
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 712
-	mov	w2, 925
 	bl	printk
-.L2960:
+	bl	dump_stack
+.L2943:
 	add	x2, x19, :lo12:.LANCHOR0
-	mov	w24, 1
-	ldrh	w3, [x2,2888]
-	ldr	x4, [x2,64]
-	ldrh	w0, [x2,3276]
-	add	x3, x4, x3, lsl 2
-	ldrh	w1, [x2,3324]
-	sub	w0, w0, #1
-	ldrb	w3, [x3,2]
-	uxth	w0, w0
-	mul	w1, w20, w1
+	ldrb	w3, [x24,2]
+	mov	w26, 1
 	and	w3, w3, 224
+	ldrh	w0, [x2,3300]
 	cmp	w3, 160
-	bne	.L2961
-	ldrb	w3, [x2,3225]
+	ldrh	w1, [x2,3350]
+	sub	w0, w0, #1
+	mul	w1, w21, w1
+	uxth	w0, w0
+	bne	.L2944
+	ldrb	w3, [x2,3257]
 	cmp	w3, 2
-	uxth	w24, w3
+	uxth	w26, w3
 	orr	w1, w1, w3, lsl 24
-	bne	.L2961
-	ldrh	w0, [x2,3242]
+	bne	.L2944
+	ldrh	w0, [x2,3274]
 	sub	w0, w0, #1
 	uxth	w0, w0
-.L2961:
-	add	x20, x19, :lo12:.LANCHOR0
-	orr	w23, w0, w1
+.L2944:
+	orr	w21, w0, w1
 	mov	w0, 1
-	strb	w24, [x20,2894]
-	strh	wzr, [x20,2890]
-	strb	wzr, [x20,2892]
-	strh	wzr, [x20,2914]
 	bl	buf_alloc
+	str	w21, [x0,40]
 	mov	w1, 1
-	str	w23, [x0,40]
-	mov	x21, x0
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	x23, x0
 	bl	sblk_read_page
-	ldrh	w0, [x20,3242]
+	ldrh	w0, [x21,3274]
 	mov	w1, 255
-	ldrb	w2, [x20,3244]
+	ldrb	w2, [x21,3276]
 	mul	w2, w0, w2
-	ldr	x0, [x20,3216]
+	ldr	x0, [x21,3248]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	strh	wzr, [x20,2912]
-	ldr	w0, [x21,52]
+	ldr	w0, [x23,52]
 	cmp	w0, 512
-	beq	.L2965
+	beq	.L2956
 	cmn	w0, #1
-	beq	.L2965
-	ldr	x0, [x21,24]
-	ldr	w1, [x0]
-	mov	w0, 15555
-	movk	w0, 0xf55f, lsl 16
-	cmp	w1, w0
-	beq	.L2964
-	ldrh	w0, [x20,2888]
-	mov	x1, 0
-	bl	ftl_sblk_dump
-	ldr	x0, [x21,24]
+	cset	w2, eq
+	cbz	w2, .L2945
+.L2956:
+	mov	w0, w20
+	mov	w1, 1
+	mov	w2, 0
+	b	.L2969
+.L2945:
+	ldr	x0, [x23,24]
 	ldr	w1, [x0]
 	mov	w0, 15555
 	movk	w0, 0xf55f, lsl 16
 	cmp	w1, w0
-	beq	.L2965
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 712
-	mov	w2, 955
-	bl	printk
-.L2965:
-	mov	x0, x21
+	beq	.L2947
+	mov	w0, w20
+	mov	w1, 1
+.L2969:
+	bl	gc_add_sblk
+	mov	x0, x23
 	bl	buf_free
-	mov	w0, -1
-	b	.L2953
-.L2964:
-	ldrb	w0, [x20,3244]
-	mov	x26, 0
-	ldrh	w22, [x20,3276]
-	mov	w25, 1
-	ldr	x23, [x21,8]
-	mul	w22, w0, w22
-	mul	w22, w24, w22
-	mov	w24, 21
-	uxth	w22, w22
-.L2966:
-	cmp	w22, w26
-	ble	.L2984
-	ldr	w0, [x23,x26,lsl 2]
+	b	.L2932
+.L2947:
+	ldrb	w0, [x21,3276]
+	mov	x27, 0
+	ldrh	w1, [x21,3300]
+	and	w28, w25, 65535
+	mov	w21, w27
+	mul	w0, w0, w1
+	mul	w26, w26, w0
+	uxth	w0, w26
+	ldr	x26, [x23,8]
+	str	w0, [x29,108]
+.L2948:
+	ldr	w0, [x29,108]
+	cmp	w0, w27
+	ble	.L2970
+	ldr	w0, [x26,x27,lsl 2]
 	cmn	w0, #1
-	beq	.L2968
+	beq	.L2949
 	bl	lpa_hash_get_ppa
-	str	w0, [x29,92]
+	str	w0, [x29,124]
 	cmn	w0, #1
-	bne	.L2969
-	ldr	w0, [x23,x26,lsl 2]
-	add	x1, x29, 92
+	bne	.L2950
+	ldr	w0, [x26,x27,lsl 2]
+	add	x1, x29, 124
 	mov	w2, 0
 	bl	pm_log2phys
-.L2969:
-	ldrh	w0, [x20,3314]
-	ldr	w2, [x29,92]
-	sub	w1, w24, w0
-	ldrh	w3, [x20,2888]
-	lsl	w1, w25, w1
-	lsr	w0, w2, w0
-	sub	w1, w1, #1
-	and	w0, w1, w0
-	ldrb	w1, [x20,3312]
+.L2950:
+	add	x4, x19, :lo12:.LANCHOR0
+	mov	w1, 21
+	ldrh	w0, [x4,3340]
+	sub	w2, w1, w0
+	mov	w1, 1
+	lsl	w2, w1, w2
+	ldr	w1, [x29,124]
+	sub	w2, w2, #1
+	lsr	w0, w1, w0
+	ldrb	w1, [x4,3338]
+	and	w0, w2, w0
 	udiv	w0, w0, w1
-	cmp	w0, w3
-	bne	.L2968
-	ldrh	w3, [x20,2912]
-	ldr	x0, [x20,3216]
-	str	w2, [x0,x3,lsl 2]
-	ldrh	w0, [x20,2912]
-	add	w0, w0, 1
-	strh	w0, [x20,2912]
-.L2968:
-	bl	timer_get_time
-	add	x26, x26, 1
-	b	.L2966
-.L2984:
-	mov	x0, x21
+	cmp	w0, w28
+	bne	.L2949
+	add	w21, w21, 1
+	uxth	w21, w21
+.L2949:
+	add	x27, x27, 1
+	b	.L2948
+.L2970:
+	mov	x0, x23
 	bl	buf_free
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2952
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x0,2888]
-	ldr	x3, [x0,72]
-	ubfiz	x2, x1, 1, 16
-	ldrh	w2, [x3,x2]
-	ldrh	w3, [x0,2912]
-	cmp	w2, w3
-	beq	.L2972
-	adrp	x0, .LC234
-	add	x0, x0, :lo12:.LC234
+	ldrb	w4, [x24,2]
+	uxth	w1, w25
+	mov	w3, w21
+	ubfx	x4, x4, 5, 3
+	ldr	x2, [x0,600]
+	adrp	x0, .LC226
+	add	x0, x0, :lo12:.LC226
+	ldrh	w2, [x2,x22,lsl 1]
 	bl	printk
-.L2972:
-	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x0,2888]
-	ldr	x1, [x0,72]
-	ldrh	w0, [x0,2912]
-	ldrh	w1, [x1,x2,lsl 1]
-	cmp	w1, w0
-	bcs	.L2973
-	bl	vpn_check
-.L2973:
+.L2952:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x19,2888]
-	ldr	x1, [x19,72]
-	ldrh	w3, [x19,2912]
-	strh	w3, [x1,x2,lsl 1]
-	strh	wzr, [x19,2916]
-	ldrh	w0, [x19,2912]
-.L2953:
+	cmp	w21, 31
+	ldr	x0, [x19,600]
+	strh	w21, [x0,x22,lsl 1]
+	bhi	.L2932
+	mov	w0, w20
+	mov	w1, 1
+	mov	w2, 0
+	bl	gc_add_sblk
+.L2932:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
-	ldp	x29, x30, [sp], 96
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
 	ret
-	.size	gc_scan_src_blk, .-gc_scan_src_blk
+	.size	gc_block_vpn_scan, .-gc_block_vpn_scan
 	.align	2
-	.global	ftl_scan_all_data
-	.type	ftl_scan_all_data, %function
-ftl_scan_all_data:
-	sub	sp, sp, #144
+	.global	ftl_sblk_dump
+	.type	ftl_sblk_dump, %function
+ftl_sblk_dump:
+	sub	sp, sp, #256
+	uxth	x0, w0
+	stp	x29, x30, [sp,48]
+	add	x29, sp, 48
+	stp	x23, x24, [sp,96]
+	adrp	x23, .LANCHOR0
+	str	x0, [x29,136]
+	stp	x19, x20, [sp,64]
+	add	x19, x23, :lo12:.LANCHOR0
+	mov	x20, x0
+	stp	x25, x26, [sp,112]
+	stp	x21, x22, [sp,80]
+	stp	x27, x28, [sp,128]
+	lsl	x25, x0, 2
+	str	x1, [x29,144]
+	ldr	x0, [x19,584]
+	add	x1, x0, x25
+	ldrh	w4, [x0,x25]
+	ldr	w5, [x0,x25]
+	adrp	x0, .LC227
+	ldrb	w3, [x1,2]
+	add	x0, x0, :lo12:.LC227
+	mov	w1, w20
+	and	w4, w4, 2047
+	ubfx	x2, x3, 5, 3
+	ubfx	x5, x5, 11, 8
+	ubfx	x3, x3, 3, 2
+	bl	printk
+	mov	w1, 65535
 	mov	w0, 0
-	stp	x29, x30, [sp,16]
-	add	x29, sp, 16
-	stp	x19, x20, [sp,32]
-	stp	x23, x24, [sp,64]
-	stp	x25, x26, [sp,80]
-	stp	x27, x28, [sp,96]
-	stp	x21, x22, [sp,48]
+	cmp	w20, w1
+	beq	.L2972
+	ldrh	w1, [x19,576]
+	cmp	w1, w20
+	bls	.L2972
+	ldr	x0, [x19,584]
+	mov	w26, 1
+	add	x0, x0, x25
+	ldrb	w0, [x0,2]
+	and	w0, w0, 224
+	cmp	w0, 160
+	bne	.L2973
+	ldrb	w26, [x19,3257]
+.L2973:
+	add	x1, x29, 192
+	mov	w0, w20
+	strh	w20, [x29,176]
+	mov	w22, 0
+	bl	ftl_get_blk_list_in_sblk
+	uxtb	w1, w0
+	mov	w4, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	strb	w1, [x29,185]
+	mov	w3, w26
+	strh	wzr, [x29,178]
+	uxtb	w4, w4
+	ldrh	w2, [x0,3300]
+	mov	w27, w22
+	strb	wzr, [x29,181]
+	mov	w19, w22
+	strh	wzr, [x29,186]
+	mul	w1, w1, w2
+	strh	w1, [x29,182]
+	ldr	x1, [x0,584]
+	adrp	x0, .LC228
+	add	x0, x0, :lo12:.LC228
+	add	x1, x1, x25
+	ldrb	w2, [x1,2]
+	mov	w1, w20
+	ubfx	x2, x2, 5, 3
+	bl	printk
+	mov	w0, 1
 	bl	buf_alloc
-	adrp	x24, .LC236
-	mov	x19, x0
-	adrp	x25, .LC237
-	adrp	x0, .LC235
-	mov	w1, 0
-	add	x0, x0, :lo12:.LC235
-	mov	w20, 0
-	add	x24, x24, :lo12:.LC236
-	add	x27, x25, :lo12:.LC237
+	mov	x28, x0
+	adrp	x0, .LC182
+	str	w22, [x29,152]
+	add	x0, x0, :lo12:.LC182
+	str	x0, [x29,120]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	add	x0, x0, 680
+	str	x0, [x29,112]
+.L2974:
+	add	x21, x23, :lo12:.LANCHOR0
+	ldrh	w0, [x21,3300]
+	cmp	w0, w19
+	bls	.L2990
+	lsl	w0, w19, 1
+	str	wzr, [x29,156]
+	sub	w0, w0, #1
+	str	w0, [x29,132]
+.L2991:
+	ldrb	w0, [x29,185]
+	ldr	w1, [x29,156]
+	cmp	w0, w1
+	bls	.L2988
+	mov	w24, 1
+.L2989:
+	cmp	w24, w26
+	ldr	w0, [x29,156]
+	bhi	.L3008
+	add	x1, x29, 176
+	add	x0, x1, x0, sxtw 1
+	ldrh	w2, [x0,16]
+	mov	w0, 65535
+	cmp	w2, w0
+	beq	.L2975
+	add	x1, x23, :lo12:.LANCHOR0
+	cmp	w26, 3
+	ldrh	w0, [x1,3350]
+	mul	w0, w2, w0
+	add	w21, w0, w19
+	bne	.L2976
+	orr	w21, w21, w24, lsl 24
+	b	.L2977
+.L2976:
+	cmp	w26, 2
+	bne	.L2977
+	ldr	w3, [x29,132]
+	ldrb	w21, [x1,3257]
+	add	w0, w0, w3
+	add	w0, w0, w24
+	orr	w21, w0, w21, lsl 24
+.L2977:
+	mov	w1, 1
+	str	w21, [x28,40]
+	mov	x0, x28
+	str	x2, [x29,104]
+	bl	sblk_read_page
+	ldr	x7, [x28,8]
+	mov	w3, w21
+	ldr	x0, [x28,24]
+	ldr	w9, [x28,52]
+	ldr	w1, [x7,12]
+	str	w1, [sp]
+	mov	w4, w9
+	ldr	x2, [x29,104]
+	ldr	w1, [x0]
+	str	w1, [sp,8]
+	str	x9, [x29,104]
+	ldr	w1, [x0,4]
+	str	w1, [sp,16]
+	ldr	w1, [x0,8]
+	str	w1, [sp,24]
+	mov	w1, w2
+	mov	w2, w19
+	ldr	w0, [x0,12]
+	str	w0, [sp,32]
+	ldr	x0, [x29,120]
+	ldr	w5, [x7]
+	ldr	w6, [x7,4]
+	ldr	w7, [x7,8]
+	bl	printk
+	ldr	x9, [x29,104]
+	cmp	w9, 512
+	beq	.L2995
+	cmn	w9, #1
+	bne	.L2979
+.L2995:
+	mov	w0, 1
+	str	w0, [x29,152]
+.L2979:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	x0, [x0,584]
+	add	x0, x0, x25
+	ldrb	w0, [x0,2]
+	and	w0, w0, 224
+	cmp	w0, 32
+	beq	.L2975
+	cmp	w0, 224
+	cset	w2, eq
+	cbnz	w2, .L2975
+	ldr	x0, [x28,24]
+	str	x2, [x29,104]
+	ldr	w0, [x0,4]
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,172]
+	cmn	w0, #1
+	ldr	x2, [x29,104]
+	bne	.L2981
+	ldr	x0, [x28,24]
+	add	x1, x29, 172
+	ldr	w0, [x0,4]
+	bl	pm_log2phys
+.L2981:
+	ldr	w0, [x29,172]
+	cmp	w0, w21
+	bne	.L2982
+	ldr	x2, [x28,24]
+	add	w22, w22, 1
+	adrp	x0, .LC229
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC229
+	mov	w3, w22
+	ldr	w2, [x2,4]
+	bl	printk
+.L2982:
+	ldr	x0, [x29,144]
+	cbz	x0, .L2984
+	ubfiz	x21, x27, 2, 32
+	ldr	w2, [x0,x21]
+	ldr	x0, [x28,24]
+	ldr	w0, [x0,4]
+	cmp	w0, w2
+	beq	.L2985
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2985
+	adrp	x0, .LC230
+	mov	w1, w27
+	add	x0, x0, :lo12:.LC230
+	bl	printk
+.L2985:
+	ldr	x0, [x29,144]
+	ldr	x1, [x28,24]
+	ldr	w0, [x0,x21]
+	ldr	w1, [x1,4]
+	cmp	w1, w0
+	beq	.L2984
+	cmn	w0, #1
+	beq	.L2984
+	adrp	x0, .LC0
+	ldr	x1, [x29,112]
+	mov	w2, 1300
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L2984:
+	add	w27, w27, 1
+.L2975:
+	add	w24, w24, 1
+	uxth	w24, w24
+	b	.L2989
+.L3008:
+	add	w0, w0, 1
+	uxth	w0, w0
+	str	w0, [x29,156]
+	b	.L2991
+.L2988:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2974
+.L2990:
+	mov	x0, x28
+	bl	buf_free
+	ldr	x3, [x29,136]
+	adrp	x0, .LC231
+	ldr	x2, [x21,600]
+	add	x0, x0, :lo12:.LC231
+	mov	w1, w20
+	ldrh	w2, [x2,x3,lsl 1]
+	mov	w3, w22
+	bl	printk
+	ldr	w0, [x29,152]
+.L2972:
+	sub	sp, x29, #48
+	ldp	x19, x20, [sp,64]
+	ldp	x21, x22, [sp,80]
+	ldp	x23, x24, [sp,96]
+	ldp	x25, x26, [sp,112]
+	ldp	x27, x28, [sp,128]
+	ldp	x29, x30, [sp,48]
+	add	sp, sp, 256
+	ret
+	.size	ftl_sblk_dump, .-ftl_sblk_dump
+	.align	2
+	.global	zftl_read
+	.type	zftl_read, %function
+zftl_read:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w19, w0
+	adrp	x0, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	mov	w22, w1
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w25, w2
+	mov	x23, x3
+	tbz	x0, 12, .L3010
+	adrp	x0, .LC232
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC232
+	mov	w2, w22
+	mov	w3, w25
 	bl	printk
-.L2986:
-	adrp	x21, .LANCHOR0
-	add	x0, x21, :lo12:.LANCHOR0
-	ldr	w0, [x0,2824]
-	cmp	w20, w0
-	bcs	.L3009
+.L3010:
+	cbnz	w19, .L3011
+	adrp	x0, .LANCHOR0+520
+	mov	w19, 24576
+	ldr	w2, [x0,#:lo12:.LANCHOR0+520]
+	b	.L3012
+.L3011:
+	cmp	w19, 3
+	mov	w0, -1
+	bhi	.L3013
+	lsl	w19, w19, 13
+	mov	w2, 8192
+.L3012:
+	add	w1, w22, w25
 	mov	w0, -1
-	str	w0, [x19,36]
+	cmp	w1, w2
+	bhi	.L3013
+	add	w22, w19, w22
+	adrp	x19, .LANCHOR0
+	add	x1, x19, :lo12:.LANCHOR0
+	add	w28, w22, w25
+	str	wzr, [x29,140]
+	ldr	x2, [x1,2864]
+	ldr	w0, [x2,24]
+	add	w0, w0, w25
+	str	w0, [x2,24]
+	ldrb	w0, [x1,2832]
+	sub	w1, w28, #1
+	udiv	w27, w22, w0
+	mov	w20, w27
+	udiv	w0, w1, w0
+	str	w0, [x29,136]
+	sub	w24, w0, w27
+	add	w24, w24, 1
+	adrp	x0, .LC0
+	add	x0, x0, :lo12:.LC0
+	str	x0, [x29,128]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	add	x0, x0, 696
+	str	x0, [x29,120]
+.L3014:
+	cbz	w24, .L3074
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w1, [x29,136]
+	cmp	w20, w27
+	cset	w2, eq
+	cmp	w20, w1
+	ldrb	w0, [x0,2832]
+	cset	w26, eq
+	uxth	w21, w0
+	cbnz	w26, .L3044
+	cbz	w2, .L3015
+	b	.L3073
+.L3044:
+	cbz	w2, .L3017
+.L3073:
+	udiv	w26, w22, w0
+	msub	w26, w26, w0, w22
+	uxth	w0, w25
+	uxth	w26, w26
+	sub	w21, w21, w26
+	uxth	w21, w21
+	cmp	w21, w25
+	csel	w21, w0, w21, hi
+	b	.L3015
+.L3017:
+	msub	w21, w0, w20, w28
+	mov	w26, w2
+	uxtb	w21, w21
+.L3015:
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w0, 0
+	add	x1, x1, 784
+.L3020:
+	ldr	w2, [x1,36]
+	cmp	w2, w20
+	bne	.L3018
+	ldrb	w2, [x1,2]
+	tbz	x2, 3, .L3018
+	add	x2, x19, :lo12:.LANCHOR0
+	ubfiz	x1, x0, 6, 32
+	add	x0, x2, x1
+	ubfiz	x26, x26, 9, 16
+	lsl	w2, w21, 9
+	ubfiz	x21, x21, 9, 16
+	ldr	x1, [x0,792]
+	mov	x0, x23
+	add	x23, x23, x21
+	add	x1, x1, x26
+	bl	ftl_memcpy
+	b	.L3019
+.L3018:
+	add	w0, w0, 1
+	add	x1, x1, 64
+	cmp	w0, 32
+	bne	.L3020
 	mov	w0, w20
 	bl	lpa_hash_get_ppa
-	str	w0, [x29,124]
+	str	w0, [x29,156]
 	cmn	w0, #1
-	bne	.L2987
+	bne	.L3021
 	mov	w0, w20
-	add	x1, x29, 124
+	add	x1, x29, 156
 	mov	w2, 0
 	bl	pm_log2phys
-.L2987:
-	and	w0, w20, 4095
-	cbnz	w0, .L2988
-	ldr	w2, [x29,124]
-	mov	x0, x24
-	mov	w1, w20
-	bl	printk
-.L2988:
-	ldr	w0, [x29,124]
-	str	w0, [x19,40]
-	str	w0, [x19,44]
+.L3021:
+	ldr	w0, [x29,156]
 	cmn	w0, #1
-	beq	.L2990
-	mov	x0, x19
-	mov	w1, 1
-	bl	sblk_read_page
-	ldr	w3, [x19,52]
-	cmn	w3, #1
-	beq	.L2991
-	cmp	w3, 256
-	beq	.L2991
-	ldr	x0, [x19,24]
-	ldr	w0, [x0,4]
-	cmp	w0, w20
-	beq	.L2990
-.L2991:
-	ldr	x0, [x19,8]
-	add	x23, x25, :lo12:.LC237
-	ldr	x7, [x19,24]
-	adrp	x26, .LC238
-	ldr	w1, [x0]
-	str	w1, [sp]
-	mov	w1, w20
-	ldr	w0, [x0,4]
-	str	w0, [sp,8]
+	bne	.L3022
+	mov	w21, 0
+.L3023:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2832]
+	cmp	w21, w0
+	bcs	.L3019
+	madd	w0, w20, w0, w21
+	cmp	w0, w22
+	bcc	.L3024
+	cmp	w0, w28
+	bcs	.L3024
 	mov	x0, x23
-	ldr	w4, [x7]
-	ldr	w5, [x7,4]
-	ldr	w6, [x7,8]
-	ldr	w2, [x19,40]
-	ldr	w7, [x7,12]
+	mov	w1, 0
+	mov	w2, 512
+	add	x23, x23, 512
+	bl	ftl_memset
+.L3024:
+	add	w21, w21, 1
+	b	.L3023
+.L3022:
+	mov	w0, 0
+	bl	buf_alloc
+	cbz	x0, .L3026
+	add	x2, x19, :lo12:.LANCHOR0
+	ldr	x3, [x2,2864]
+	ldr	w2, [x3,40]
+	add	w2, w2, 1
+	str	w2, [x3,40]
+	ldr	w2, [x29,156]
+	strb	w21, [x0,56]
+	ubfiz	x21, x21, 9, 16
+	str	x23, [x0,16]
+	add	x23, x23, x21
+	str	w2, [x0,40]
+	str	w2, [x0,44]
+	str	w20, [x0,36]
+	strb	w26, [x0,57]
+	bl	zftl_add_read_buf
+.L3019:
+	add	w20, w20, 1
+	sub	w24, w24, #1
+.L3026:
+	cbz	w24, .L3045
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2834]
+	cmp	w0, 2
+	bhi	.L3014
+.L3045:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x2,3894]
+	cbz	w1, .L3014
+	add	x0, x2, 784
+	ldrb	w2, [x2,3893]
+	add	x0, x0, x2, lsl 6
+	bl	sblk_read_page
+.L3029:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,3894]
+	cbz	w1, .L3075
+	ldrb	w0, [x0,3893]
+	cmp	w0, 255
+	bne	.L3030
+	ldr	x1, [x29,120]
+	mov	w2, 1064
+	ldr	x0, [x29,128]
 	bl	printk
-	ldr	x0, [x19,24]
-	ldr	w22, [x0,4]
-	ldr	w0, [x0,8]
-	cmn	w0, #1
-	bne	.L2993
-.L2995:
-	add	x21, x21, :lo12:.LANCHOR0
-	mov	w0, w20
-	ldrb	w22, [x21,2816]
-	bl	lpa_hash_get_ppa
-	mov	w1, w20
-	mov	w4, w0
-	lsl	w28, w22, 7
-	lsl	w3, w22, 7
-	sub	w3, w3, #1
-	add	x0, x26, :lo12:.LC238
-	sdiv	w28, w20, w28
-	and	w3, w20, w3
-	adrp	x26, .LC240
-	mov	x22, 0
-	uxth	w3, w3
-	add	x21, x21, 3872
-	add	x26, x26, :lo12:.LC240
-	uxth	w23, w28
-	mov	w2, w23
+	bl	dump_stack
+.L3030:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x1, x2, 784
+	ldrb	w21, [x2,3893]
+	lsl	x0, x21, 6
+	add	x26, x1, x0
+	ldrb	w0, [x1,x0]
+	ldr	w8, [x26,52]
+	strb	w0, [x2,3893]
+	cmn	w8, #1
+	bne	.L3031
+	ldr	x1, [x2,608]
+	str	w8, [x29,140]
+	ldr	w0, [x1,552]
+	add	w0, w0, 1
+	str	w0, [x1,552]
+	b	.L3032
+.L3031:
+	cmp	w8, 256
+	bne	.L3032
+	ldrh	w0, [x2,3340]
+	mov	w1, 21
+	mov	w5, 1
+	ldr	w3, [x26,40]
+	sub	w4, w1, w0
+	str	x8, [x29,96]
+	lsl	w4, w5, w4
+	lsr	w0, w3, w0
+	sub	w4, w4, #1
+	str	x5, [x29,104]
+	and	w0, w4, w0
+	ldrb	w4, [x2,3338]
+	ldr	w2, [x26,36]
+	udiv	w4, w0, w4
+	adrp	x0, .LC233
+	add	x0, x0, :lo12:.LC233
+	str	x4, [x29,112]
+	uxth	w1, w4
 	bl	printk
-	mov	w0, w20
-	add	x1, x29, 124
+	ldr	x4, [x29,112]
 	mov	w2, 0
-	bl	pm_log2phys
-	b	.L2994
-.L2993:
-	add	x1, x21, :lo12:.LANCHOR0
-	ldr	w1, [x1,2824]
-	cmp	w22, w1
-	bcs	.L2995
-	str	w0, [x19,40]
-	mov	w1, 1
-	mov	x0, x19
-	bl	sblk_read_page
-	ldr	x0, [x19,8]
-	ldr	x7, [x19,24]
-	ldr	w1, [x0]
-	str	w1, [sp]
-	mov	w1, w20
-	ldr	w0, [x0,4]
-	str	w0, [sp,8]
-	mov	x0, x23
+	ldr	x5, [x29,104]
+	mov	w0, w4
+	mov	w1, w5
+	bl	gc_add_sblk
+	ldr	x8, [x29,96]
+.L3032:
+	add	x9, x19, :lo12:.LANCHOR0
+	add	x1, x9, 784
+	add	x1, x1, x21, lsl 6
+	add	x10, x1, 32
+	ldr	x0, [x1,24]
+	ldr	w3, [x0,4]
+	ldr	w0, [x1,36]
+	cmp	w3, w0
+	beq	.L3033
+	ldr	x3, [x9,608]
+	str	x8, [x29,96]
+	str	x9, [x29,104]
+	ldr	w0, [x3,552]
+	str	x10, [x29,112]
+	add	w0, w0, 1
+	str	w0, [x3,552]
+	adrp	x0, .LC234
+	ldr	x7, [x1,24]
+	add	x0, x0, :lo12:.LC234
+	ldr	w2, [x10,4]
+	ldr	w3, [x10,8]
 	ldr	w4, [x7]
 	ldr	w5, [x7,4]
 	ldr	w6, [x7,8]
-	ldr	w2, [x19,40]
-	ldr	w3, [x19,52]
+	ldrb	w1, [x1,1]
 	ldr	w7, [x7,12]
 	bl	printk
-	mov	w0, w22
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,124]
-	cmn	w0, #1
-	bne	.L2996
-	mov	w0, w22
-	add	x1, x29, 124
-	mov	w2, 0
-	bl	pm_log2phys
-.L2996:
-	ldr	w0, [x29,124]
+	ldr	x9, [x29,104]
+	mov	w1, 21
+	ldr	x10, [x29,112]
+	ldrh	w0, [x9,3340]
+	sub	w2, w1, w0
 	mov	w1, 1
-	str	w0, [x19,40]
-	mov	x0, x19
-	bl	sblk_read_page
-	ldr	x0, [x19,8]
-	ldr	x7, [x19,24]
-	ldr	w1, [x0]
-	str	w1, [sp]
-	mov	w1, w22
-	ldr	w0, [x0,4]
-	str	w0, [sp,8]
-	mov	x0, x27
-	ldr	w6, [x7,8]
-	ldr	w4, [x7]
-	ldr	w3, [x19,52]
-	ldr	w5, [x7,4]
-	ldr	w2, [x19,40]
-	ldr	w7, [x7,12]
-	bl	printk
-	add	x5, x21, :lo12:.LANCHOR0
-	mov	w0, w22
-	str	x5, [x29,96]
-	ldrb	w23, [x5,2816]
-	lsl	w2, w23, 7
-	udiv	w2, w22, w2
-	str	x2, [x29,104]
-	uxth	w28, w2
-	bl	lpa_hash_get_ppa
-	lsl	w3, w23, 7
-	ldr	x2, [x29,104]
-	sub	w3, w3, #1
-	mov	w4, w0
-	and	w3, w3, w22
-	mov	w1, w22
-	uxth	w2, w2
-	add	x0, x26, :lo12:.LC238
-	uxth	w3, w3
-	bl	printk
-	mov	w0, w22
-	add	x1, x29, 124
-	mov	w2, 0
-	mov	x22, 0
-	bl	pm_log2phys
-	ldr	x5, [x29,96]
-	adrp	x4, .LC239
-	add	x4, x4, :lo12:.LC239
-	add	x23, x5, 3872
-.L2998:
-	add	x0, x23, x22
-	ldr	x1, [x0,8]
-	cbz	x1, .L2997
-	ldrh	w0, [x22,x23]
-	cmp	w0, w28
-	bne	.L2997
-	mov	x0, x4
-	mov	w2, 4
-	mov	w3, 4096
-	str	x4, [x29,104]
-	bl	rknand_print_hex
-	ldr	x4, [x29,104]
-.L2997:
-	add	x22, x22, 16
-	cmp	x22, 512
-	bne	.L2998
-	b	.L2995
-.L3010:
-	ldrh	w0, [x22,x21]
-	cmp	w0, w23
-	bne	.L2999
+	lsl	w2, w1, w2
+	ldr	w1, [x10,8]
+	sub	w2, w2, #1
+	lsr	w0, w1, w0
+	ldrb	w1, [x9,3338]
+	and	w0, w2, w0
+	udiv	w0, w0, w1
+	mov	x1, 0
+	bl	ftl_sblk_dump
+	ldr	x8, [x29,96]
+.L3033:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 784
+	add	x0, x0, x21, lsl 6
+	ldr	x1, [x0,24]
+	ldr	w0, [x0,36]
+	ldr	w1, [x1,4]
+	cmp	w1, w0
+	bne	.L3046
+	cmn	w8, #1
+	bne	.L3034
+.L3046:
+	ldr	x1, [x29,120]
+	mov	w2, 1085
+	ldr	x0, [x29,128]
+	bl	printk
+	bl	dump_stack
+.L3034:
+	add	x1, x19, :lo12:.LANCHOR0
+	add	x0, x1, 784
+	add	x21, x0, x21, lsl 6
+	ldrb	w1, [x1,2832]
+	ldrb	w2, [x21,56]
+	cmp	w1, w2
+	bls	.L3036
+	ldrb	w3, [x21,57]
+	lsl	w2, w2, 9
+	ldr	x1, [x21,8]
+	ldr	x0, [x21,16]
+	add	x1, x1, x3, lsl 9
+	bl	ftl_memcpy
+	b	.L3037
+.L3036:
+	ldrb	w0, [x21,2]
+	and	w0, w0, -9
+	strb	w0, [x21,2]
+.L3037:
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	x1, x26
+	add	x0, x21, 3895
+	bl	buf_remove_buf
 	mov	x0, x26
-	mov	w2, 4
-	mov	w3, 4096
-	bl	rknand_print_hex
-.L2999:
-	add	x22, x22, 16
-	cmp	x22, 512
-	beq	.L2990
-.L2994:
-	add	x0, x21, x22
-	ldr	x1, [x0,8]
-	cbnz	x1, .L3010
-	b	.L2999
-.L2990:
-	add	w20, w20, 1
-	b	.L2986
-.L3009:
-	mov	x0, x19
 	bl	buf_free
-	sub	sp, x29, #16
-	ldp	x19, x20, [sp,32]
-	ldp	x21, x22, [sp,48]
-	ldp	x23, x24, [sp,64]
-	ldp	x25, x26, [sp,80]
-	ldp	x27, x28, [sp,96]
-	ldp	x29, x30, [sp,16]
-	add	sp, sp, 144
+	ldrb	w0, [x21,3894]
+	sub	w0, w0, #1
+	strb	w0, [x21,3894]
+	b	.L3029
+.L3075:
+	mov	w2, -1
+	strb	w1, [x0,3894]
+	strb	w2, [x0,3893]
+	b	.L3014
+.L3074:
+	bl	timer_get_time
+	adrp	x1, .LANCHOR7-80
+	str	w0, [x1,#:lo12:.LANCHOR7-80]
+	ldr	w0, [x29,140]
+.L3013:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	zftl_read, .-zftl_read
+	.align	2
+	.global	zftl_vendor_read
+	.type	zftl_vendor_read, %function
+zftl_vendor_read:
+	stp	x29, x30, [sp, -16]!
+	mov	w4, w1
+	mov	x3, x2
+	add	x29, sp, 0
+	add	w1, w0, 512
+	mov	w2, w4
+	mov	w0, 2
+	bl	zftl_read
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_vendor_read, .-zftl_vendor_read
+	.align	2
+	.global	zftl_sys_read
+	.type	zftl_sys_read, %function
+zftl_sys_read:
+	stp	x29, x30, [sp, -16]!
+	mov	w5, w0
+	mov	w4, w1
+	add	x29, sp, 0
+	mov	x3, x2
+	mov	w1, w5
+	mov	w2, w4
+	mov	w0, 2
+	bl	zftl_read
+	ldp	x29, x30, [sp], 16
 	ret
-	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.size	zftl_sys_read, .-zftl_sys_read
 	.align	2
 	.type	zftl_debug_proc_write, %function
 zftl_debug_proc_write:
@@ -19378,137 +19109,137 @@ zftl_debug_proc_write:
 	stp	x23, x24, [sp,80]
 	stp	x25, x26, [sp,96]
 	mov	x21, x2
-	bhi	.L3012
+	bhi	.L3079
 	mov	x0, x19
 	bl	rk_copy_from_user
 	mov	x22, x0
 	mov	x0, -14
-	cbnz	x22, .L3012
-	adrp	x0, .LC241
+	cbnz	x22, .L3079
+	adrp	x0, .LC235
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC241
+	add	x0, x0, :lo12:.LC235
 	strb	w22, [x19,x21]
 	bl	printk
-	adrp	x0, .LC242
+	adrp	x0, .LC236
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC242
+	add	x0, x0, :lo12:.LC236
 	mov	w2, 1
 	mov	w3, 16
 	bl	rknand_print_hex
 	bl	rknand_device_lock
-	adrp	x1, .LC243
+	adrp	x1, .LC237
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC243
+	add	x1, x1, :lo12:.LC237
 	mov	x2, 7
 	bl	memcmp
-	cbnz	w0, .L3013
+	cbnz	w0, .L3080
 	adrp	x23, .LANCHOR0
-	adrp	x0, .LC244
+	adrp	x0, .LC238
 	add	x19, x23, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC244
+	add	x0, x0, :lo12:.LC238
 	mov	w2, 4
 	adrp	x20, .LANCHOR4
-	ldr	x3, [x19,2848]
+	ldr	x3, [x19,2864]
 	add	x1, x3, 704
 	ldrh	w3, [x3,698]
 	bl	rknand_print_hex
 	add	x3, x20, :lo12:.LANCHOR4
-	ldr	x1, [x19,2848]
-	adrp	x0, .LC245
+	ldr	x1, [x19,2864]
+	adrp	x0, .LC239
 	mov	w2, 2
-	add	x0, x0, :lo12:.LC245
+	add	x0, x0, :lo12:.LC239
 	add	x1, x1, 416
-	ldrh	w3, [x3,1132]
+	ldrh	w3, [x3,1164]
 	mov	w19, w22
 	mov	w22, 65535
 	bl	rknand_print_hex
-.L3014:
+.L3081:
 	add	x0, x20, :lo12:.LANCHOR4
-	ldrh	w0, [x0,1132]
+	ldrh	w0, [x0,1164]
 	cmp	w19, w0
-	bge	.L3017
+	bge	.L3084
 	mov	w0, 300
 	bl	msleep
 	add	x0, x23, :lo12:.LANCHOR0
-	ldr	x0, [x0,2848]
+	ldr	x0, [x0,2864]
 	add	x0, x0, x19, sxtw 1
 	ldrh	w0, [x0,416]
 	cmp	w0, w22
-	beq	.L3015
+	beq	.L3082
 	mov	x1, 0
 	bl	ftl_sblk_dump
-.L3015:
+.L3082:
 	add	w19, w19, 1
-	b	.L3014
-.L3013:
-	adrp	x1, .LC246
+	b	.L3081
+.L3080:
+	adrp	x1, .LC240
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC246
+	add	x1, x1, :lo12:.LC240
 	mov	x2, 7
 	bl	memcmp
-	cbnz	w0, .L3018
+	cbnz	w0, .L3085
 	adrp	x23, .LANCHOR0
-	adrp	x0, .LC244
+	adrp	x0, .LC238
 	add	x20, x23, :lo12:.LANCHOR0
-	add	x0, x0, :lo12:.LC244
+	add	x0, x0, :lo12:.LC238
 	mov	w2, 4
 	add	x22, x29, 192
-	adrp	x24, .LC249
-	ldr	x3, [x20,2848]
-	add	x24, x24, :lo12:.LC249
+	adrp	x24, .LC243
+	ldr	x3, [x20,2864]
+	add	x24, x24, :lo12:.LC243
 	add	x1, x3, 704
 	ldrh	w3, [x3,698]
 	bl	rknand_print_hex
-	adrp	x3, .LANCHOR4+1132
-	ldr	x1, [x20,2848]
-	adrp	x0, .LC245
+	adrp	x3, .LANCHOR4+1164
+	ldr	x1, [x20,2864]
+	adrp	x0, .LC239
 	mov	w2, 2
-	add	x0, x0, :lo12:.LC245
+	add	x0, x0, :lo12:.LC239
 	add	x1, x1, 416
-	ldrh	w3, [x3,#:lo12:.LANCHOR4+1132]
+	ldrh	w3, [x3,#:lo12:.LANCHOR4+1164]
 	bl	rknand_print_hex
-	adrp	x0, .LC247
+	adrp	x0, .LC241
 	add	x1, x19, 7
-	add	x0, x0, :lo12:.LC247
+	add	x0, x0, :lo12:.LC241
 	str	x1, [x22,-88]!
-	add	x19, x20, 3872
+	add	x19, x20, 3904
 	mov	x20, x23
 	bl	printk
-	adrp	x23, .LC248
+	adrp	x23, .LC242
 	ldr	x0, [x29,104]
 	mov	x1, x22
 	add	x25, x19, 512
-	add	x23, x23, :lo12:.LC248
-	bl	rk_simple_strtoull.constprop.34
+	add	x23, x23, :lo12:.LC242
+	bl	rk_simple_strtoull.constprop.31
 	mov	w22, w0
 	str	w0, [x29,100]
 	uxth	w26, w0
-.L3020:
+.L3087:
 	ldrh	w1, [x19]
 	mov	x0, x23
 	ldrh	w2, [x19,2]
 	bl	printk
 	ldrh	w0, [x19]
 	cmp	w0, w26
-	bne	.L3019
+	bne	.L3086
 	add	x0, x20, :lo12:.LANCHOR0
 	ldr	x1, [x19,8]
 	mov	w2, 4
-	ldrb	w3, [x0,2816]
+	ldrb	w3, [x0,2832]
 	mov	x0, x24
 	lsl	w3, w3, 7
 	bl	rknand_print_hex
-.L3019:
+.L3086:
 	add	x19, x19, 16
 	cmp	x19, x25
-	bne	.L3020
+	bne	.L3087
 	mov	w0, 300
 	add	x20, x20, :lo12:.LANCHOR0
 	bl	msleep
 	mov	w0, 1
 	bl	buf_alloc
 	mov	x19, x0
-	ldr	x1, [x20,2848]
+	ldr	x1, [x20,2864]
 	add	x1, x1, x22, uxth 2
 	ldr	w1, [x1,704]
 	str	w1, [x29,100]
@@ -19524,8 +19255,8 @@ zftl_debug_proc_write:
 	str	w0, [sp,8]
 	ldr	w0, [x7,12]
 	str	w0, [sp,16]
-	adrp	x0, .LC197
-	add	x0, x0, :lo12:.LC197
+	adrp	x0, .LC205
+	add	x0, x0, :lo12:.LC205
 	ldr	w3, [x6]
 	ldr	w2, [x19,52]
 	ldr	w4, [x6,4]
@@ -19533,58 +19264,62 @@ zftl_debug_proc_write:
 	ldr	w7, [x7]
 	ldr	w6, [x6,12]
 	bl	printk
-	ldrb	w3, [x20,2816]
-	adrp	x0, .LC250
-	add	x0, x0, :lo12:.LC250
+	ldrb	w3, [x20,2832]
+	adrp	x0, .LC244
+	add	x0, x0, :lo12:.LC244
 	ldr	x1, [x19,8]
 	mov	w2, 4
 	lsl	w3, w3, 7
-	b	.L3032
-.L3018:
-	adrp	x1, .LC251
+	b	.L3102
+.L3085:
+	adrp	x1, .LC245
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC251
+	add	x1, x1, :lo12:.LC245
 	mov	x2, 7
 	bl	memcmp
-	cbnz	w0, .L3021
+	cbnz	w0, .L3088
 	bl	dump_ftl_info
-	b	.L3017
-.L3021:
-	adrp	x1, .LC252
+	b	.L3084
+.L3088:
+	adrp	x1, .LC246
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC252
-	mov	x2, 8
+	add	x1, x1, :lo12:.LC246
+	mov	x2, 9
 	bl	memcmp
-	cbnz	w0, .L3022
+	cbnz	w0, .L3089
+	add	x1, x29, 192
+	add	x0, x19, 9
+	str	x0, [x1,-88]!
+	bl	rk_simple_strtoull.constprop.31
+	str	w0, [x29,100]
+	adrp	x1, .LANCHOR0+3336
+	strh	w0, [x1,#:lo12:.LANCHOR0+3336]
 	bl	dump_all_list_info
-	b	.L3017
-.L3022:
-	adrp	x1, .LC253
+	b	.L3084
+.L3089:
+	adrp	x1, .LC247
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC253
+	add	x1, x1, :lo12:.LC247
 	mov	x2, 8
 	bl	memcmp
-	cbnz	w0, .L3023
-	bl	vpn_check
-	b	.L3017
-.L3023:
-	adrp	x1, .LC254
+	cbz	w0, .L3084
+	adrp	x1, .LC248
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC254
+	add	x1, x1, :lo12:.LC248
 	mov	x2, 8
 	bl	memcmp
-	cbnz	w0, .L3024
+	cbnz	w0, .L3091
 	add	x20, x29, 192
-	adrp	x0, .LC247
+	adrp	x0, .LC241
 	add	x1, x19, 8
-	add	x0, x0, :lo12:.LC247
+	add	x0, x0, :lo12:.LC241
 	str	x1, [x20,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x20
 	adrp	x20, .LANCHOR0
 	add	x20, x20, :lo12:.LANCHOR0
-	bl	rk_simple_strtoull.constprop.34
+	bl	rk_simple_strtoull.constprop.31
 	str	w0, [x29,100]
 	mov	w0, 1
 	bl	buf_alloc
@@ -19602,8 +19337,8 @@ zftl_debug_proc_write:
 	str	w0, [sp,8]
 	ldr	w0, [x7,12]
 	str	w0, [sp,16]
-	adrp	x0, .LC197
-	add	x0, x0, :lo12:.LC197
+	adrp	x0, .LC205
+	add	x0, x0, :lo12:.LC205
 	ldr	w3, [x6]
 	ldr	w4, [x6,4]
 	ldr	w5, [x6,8]
@@ -19611,99 +19346,117 @@ zftl_debug_proc_write:
 	ldr	w6, [x6,12]
 	ldr	w7, [x7]
 	bl	printk
-	ldrb	w3, [x20,2816]
-	adrp	x0, .LC190
+	ldrb	w3, [x20,2832]
+	adrp	x0, .LC200
 	ldr	x1, [x19,8]
-	add	x0, x0, :lo12:.LC190
+	add	x0, x0, :lo12:.LC200
 	mov	w2, 4
 	lsl	w3, w3, 7
 	bl	rknand_print_hex
-	ldrb	w3, [x20,2816]
-	adrp	x0, .LC191
+	ldrb	w3, [x20,2832]
+	adrp	x0, .LC201
 	ldr	x1, [x19,24]
-	add	x0, x0, :lo12:.LC191
+	add	x0, x0, :lo12:.LC201
 	mov	w2, 4
 	lsl	w3, w3, 1
-.L3032:
+.L3102:
 	bl	rknand_print_hex
 	mov	x0, x19
 	bl	buf_free
-	b	.L3017
-.L3024:
-	adrp	x1, .LC255
+	b	.L3084
+.L3091:
+	adrp	x1, .LC249
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC255
+	add	x1, x1, :lo12:.LC249
 	mov	x2, 8
 	bl	memcmp
-	cbnz	w0, .L3025
+	cbnz	w0, .L3092
 	add	x20, x29, 192
-	adrp	x0, .LC247
+	adrp	x0, .LC241
 	add	x1, x19, 8
-	add	x0, x0, :lo12:.LC247
+	add	x0, x0, :lo12:.LC241
 	str	x1, [x20,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x20
-	bl	rk_simple_strtoull.constprop.34
+	bl	rk_simple_strtoull.constprop.31
 	str	w0, [x29,100]
 	mov	x1, x22
 	bl	ftl_sblk_dump
-	b	.L3017
-.L3025:
-	adrp	x1, .LC256
+	b	.L3084
+.L3092:
+	adrp	x1, .LC250
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC256
+	add	x1, x1, :lo12:.LC250
 	mov	x2, 10
 	bl	memcmp
-	cbnz	w0, .L3026
+	cbnz	w0, .L3093
 	add	x20, x29, 192
-	adrp	x0, .LC247
+	adrp	x0, .LC241
 	add	x1, x19, 10
-	add	x0, x0, :lo12:.LC247
+	add	x0, x0, :lo12:.LC241
 	str	x1, [x20,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x20
-	bl	rk_simple_strtoull.constprop.34
+	bl	rk_simple_strtoull.constprop.31
 	str	w0, [x29,100]
 	adrp	x1, .LANCHOR2
 	str	w0, [x1,#:lo12:.LANCHOR2]
-	b	.L3017
-.L3026:
-	adrp	x1, .LC257
+	b	.L3084
+.L3093:
+	adrp	x1, .LC251
 	mov	x2, 8
 	mov	x0, x19
-	add	x1, x1, :lo12:.LC257
+	add	x1, x1, :lo12:.LC251
 	bl	memcmp
 	mov	w2, w0
 	str	x2, [x29,88]
-	cbnz	w0, .L3027
+	cbnz	w0, .L3094
 	add	x1, x19, 8
-	adrp	x0, .LC247
+	adrp	x0, .LC241
 	add	x19, x29, 192
-	add	x0, x0, :lo12:.LC247
+	add	x0, x0, :lo12:.LC241
 	str	x1, [x19,-88]!
 	bl	printk
 	ldr	x0, [x29,104]
 	mov	x1, x19
-	bl	rk_simple_strtoull.constprop.34
+	bl	rk_simple_strtoull.constprop.31
 	mov	w19, w0
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,100]
 	cmn	w0, #1
 	ldr	x2, [x29,88]
-	bne	.L3028
+	bne	.L3095
 	mov	w0, w19
 	add	x1, x29, 100
 	bl	pm_log2phys
-.L3028:
-	adrp	x0, .LC258
+.L3095:
+	adrp	x0, .LC252
 	ldr	w2, [x29,100]
 	mov	w1, w19
+	add	x0, x0, :lo12:.LC252
+	bl	printk
+	b	.L3084
+.L3094:
+	adrp	x0, .LC253
+	add	x0, x0, :lo12:.LC253
+	bl	printk
+	adrp	x0, .LC254
+	add	x0, x0, :lo12:.LC254
+	bl	printk
+	adrp	x0, .LC255
+	add	x0, x0, :lo12:.LC255
+	bl	printk
+	adrp	x0, .LC256
+	add	x0, x0, :lo12:.LC256
+	bl	printk
+	adrp	x0, .LC257
+	add	x0, x0, :lo12:.LC257
+	bl	printk
+	adrp	x0, .LC258
 	add	x0, x0, :lo12:.LC258
 	bl	printk
-	b	.L3017
-.L3027:
 	adrp	x0, .LC259
 	add	x0, x0, :lo12:.LC259
 	bl	printk
@@ -19713,28 +19466,10 @@ zftl_debug_proc_write:
 	adrp	x0, .LC261
 	add	x0, x0, :lo12:.LC261
 	bl	printk
-	adrp	x0, .LC262
-	add	x0, x0, :lo12:.LC262
-	bl	printk
-	adrp	x0, .LC263
-	add	x0, x0, :lo12:.LC263
-	bl	printk
-	adrp	x0, .LC264
-	add	x0, x0, :lo12:.LC264
-	bl	printk
-	adrp	x0, .LC265
-	add	x0, x0, :lo12:.LC265
-	bl	printk
-	adrp	x0, .LC266
-	add	x0, x0, :lo12:.LC266
-	bl	printk
-	adrp	x0, .LC267
-	add	x0, x0, :lo12:.LC267
-	bl	printk
-.L3017:
+.L3084:
 	bl	rknand_device_unlock
 	mov	x0, x21
-.L3012:
+.L3079:
 	sub	sp, x29, #32
 	ldp	x19, x20, [sp,48]
 	ldp	x21, x22, [sp,64]
@@ -19743,7 +19478,185 @@ zftl_debug_proc_write:
 	ldp	x29, x30, [sp,32]
 	add	sp, sp, 224
 	ret
-	.size	zftl_debug_proc_write, .-zftl_debug_proc_write
+	.size	zftl_debug_proc_write, .-zftl_debug_proc_write
+	.align	2
+	.global	gc_check_data_one_wl
+	.type	gc_check_data_one_wl, %function
+gc_check_data_one_wl:
+	sub	sp, sp, #128
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x19, x20, [sp,32]
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,48]
+	stp	x23, x24, [sp,64]
+	stp	x25, x26, [sp,80]
+	stp	x27, x28, [sp,96]
+	ldr	x0, [x20,2904]
+	ldr	x23, [x20,608]
+	add	x20, x20, 2896
+	cbnz	x0, .L3104
+	mov	w0, 1
+	bl	buf_alloc
+	str	x0, [x20,8]
+.L3104:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x20, [x0,2904]
+	cbnz	x20, .L3105
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 366
+	add	x1, x1, 712
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L3105:
+	mov	w24, 0
+	add	x25, x23, 80
+	add	x21, x19, :lo12:.LANCHOR0
+	adrp	x27, .LANCHOR4
+.L3106:
+	ldrb	w0, [x25,9]
+	cmp	w24, w0
+	bge	.L3129
+	mov	w22, 1
+	sxtw	x28, w24
+.L3115:
+	add	x0, x21, 2896
+	ldrh	w1, [x0,20]
+	cmp	w22, w1
+	bgt	.L3130
+	add	x1, x28, 8
+	ldrh	w2, [x21,3350]
+	ldrh	w0, [x0,16]
+	ldrh	w1, [x25,x1,lsl 1]
+	mul	w1, w1, w2
+	ldrb	w2, [x21,3257]
+	cmp	w2, 3
+	bne	.L3107
+	add	w1, w1, w0
+	orr	w1, w1, w22, lsl 24
+	b	.L3128
+.L3107:
+	cmp	w2, 2
+	bne	.L3109
+	sub	w0, w0, #1
+	add	w1, w0, w1
+	add	w1, w1, w22
+	orr	w1, w1, 33554432
+	b	.L3128
+.L3109:
+	add	w1, w1, w0
+.L3128:
+	str	w1, [x20,40]
+	mov	x0, x20
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w0, [x20,52]
+	cmn	w0, #1
+	beq	.L3110
+	add	x2, x27, :lo12:.LANCHOR4
+	ldrh	w0, [x21,2918]
+	ldr	x1, [x20,24]
+	lsl	x0, x0, 2
+	ldr	x3, [x2,1136]
+	ldr	w4, [x3,x0]
+	ldr	w3, [x1,4]
+	cmp	w4, w3
+	bne	.L3110
+	ldr	x2, [x2,1144]
+	ldr	w2, [x2,x0]
+	ldr	w0, [x1,8]
+	cmp	w2, w0
+	beq	.L3111
+.L3110:
+	add	x26, x27, :lo12:.LANCHOR4
+	ldrh	w0, [x21,2918]
+	add	x4, x21, 2896
+	ldr	x1, [x26,1136]
+	ldr	w0, [x1,x0,lsl 2]
+	cmn	w0, #1
+	beq	.L3111
+	ldrb	w5, [x25,9]
+	adrp	x0, .LC262
+	ldrh	w3, [x21,3274]
+	add	x0, x0, :lo12:.LC262
+	mov	w2, 4
+	str	x4, [x29,104]
+	mul	w3, w5, w3
+	bl	rknand_print_hex
+	ldrb	w5, [x25,9]
+	adrp	x0, .LC263
+	ldrh	w3, [x21,3274]
+	add	x0, x0, :lo12:.LC263
+	ldr	x1, [x26,1144]
+	mov	w2, 4
+	mul	w3, w5, w3
+	bl	rknand_print_hex
+	adrp	x0, .LANCHOR2
+	ldr	x4, [x29,104]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 10, .L3112
+	ldr	x7, [x20,24]
+	ldrh	w4, [x4,22]
+	ldr	x5, [x26,1144]
+	ldr	w0, [x7,12]
+	lsl	x4, x4, 2
+	ldr	x3, [x26,1136]
+	str	w0, [sp]
+	adrp	x0, .LC264
+	add	x0, x0, :lo12:.LC264
+	ldr	w3, [x3,x4]
+	ldr	w6, [x7,4]
+	ldr	w4, [x5,x4]
+	ldr	w1, [x20,40]
+	ldr	w5, [x7]
+	ldr	w2, [x20,52]
+	ldr	w7, [x7,8]
+	bl	printk
+.L3112:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	x1, 0
+	ldr	x0, [x19,608]
+	ldrh	w0, [x0,80]
+	bl	ftl_sblk_dump
+	ldr	x0, [x19,600]
+	ldrh	w1, [x23,80]
+	strh	wzr, [x0,x1,lsl 1]
+	mov	w0, -1
+	b	.L3113
+.L3111:
+	ldrh	w0, [x21,2918]
+	add	w22, w22, 1
+	add	w0, w0, 1
+	strh	w0, [x21,2918]
+	b	.L3115
+.L3130:
+	add	w24, w24, 1
+	b	.L3106
+.L3129:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x19,2912]
+	ldrb	w3, [x19,3348]
+	add	w0, w1, 1
+	strh	w0, [x19,2912]
+	mov	w0, 0
+	cbz	w3, .L3113
+	add	w1, w1, 2
+	strh	w1, [x19,2912]
+.L3113:
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 128
+	ret
+	.size	gc_check_data_one_wl, .-gc_check_data_one_wl
 	.align	2
 	.global	ftl_update_l2p_map
 	.type	ftl_update_l2p_map, %function
@@ -19759,65 +19672,66 @@ ftl_update_l2p_map:
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	ldrb	w1, [x23,9]
-	ldrh	w24, [x0,3276]
+	ldrh	w24, [x0,3300]
 	ldrh	w20, [x23,12]
-	ldr	x0, [x0,3840]
+	ldr	x0, [x0,3872]
 	mul	w24, w24, w1
 	add	x20, x0, x20, lsl 2
 	add	x0, x20, x24, sxtw 2
 	ldr	w0, [x0,-4]
 	cmn	w0, #1
-	beq	.L3034
+	beq	.L3132
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1576
+	add	x1, x1, 736
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 728
-	mov	w2, 1468
 	bl	printk
-.L3034:
-	adrp	x0, .LC269
+	bl	dump_stack
+.L3132:
+	adrp	x0, .LC266
 	mov	x28, 0
-	add	x0, x0, :lo12:.LC269
-	adrp	x27, .LC268
+	add	x0, x0, :lo12:.LC266
+	adrp	x27, .LC265
 	str	x0, [x29,120]
-	adrp	x0, .LC270
-	add	x0, x0, :lo12:.LC270
+	adrp	x0, .LC267
+	add	x0, x0, :lo12:.LC267
 	mov	w22, w28
 	str	x0, [x29,112]
-	add	x27, x27, :lo12:.LC268
-.L3035:
+	add	x27, x27, :lo12:.LC265
+.L3133:
 	cmp	w28, w24
 	mov	w25, w28
-	bge	.L3062
+	bge	.L3160
 	ldr	w2, [x20,x28,lsl 2]
 	cmn	w2, #1
-	beq	.L3036
+	beq	.L3134
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w21, [x0,2816]
+	ldrb	w21, [x0,2832]
 	adrp	x0, .LANCHOR2
 	lsl	w21, w21, 7
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
 	udiv	w21, w2, w21
 	and	w21, w21, 65535
-	tbz	x0, 12, .L3040
+	tbz	x0, 12, .L3138
 	mov	x0, x27
 	mov	w1, w21
 	mov	w3, w28
 	bl	printk
-.L3040:
+.L3138:
 	sbfiz	x26, x25, 2, 32
 	ldr	w0, [x20,x26]
 	cmn	w0, #1
-	beq	.L3038
+	beq	.L3136
 	add	x3, x19, :lo12:.LANCHOR0
-	ldrb	w1, [x3,2816]
+	ldrb	w1, [x3,2832]
 	lsl	w1, w1, 7
 	udiv	w0, w0, w1
 	cmp	w21, w0, uxth
-	bne	.L3038
+	bne	.L3136
 	ldrb	w0, [x23,9]
-	ldrh	w2, [x3,3324]
+	ldrh	w2, [x3,3350]
 	str	x3, [x29,104]
 	sdiv	w1, w25, w0
 	msub	w0, w1, w0, w25
@@ -19829,13 +19743,13 @@ ftl_update_l2p_map:
 	ldr	w1, [x20,x26]
 	bl	pm_ppa_update_check
 	ldr	x3, [x29,104]
-	cbz	w0, .L3039
-	ldr	x1, [x3,3840]
+	cbz	w0, .L3137
+	ldr	x1, [x3,3872]
 	mov	w2, 4
 	ldr	x0, [x29,112]
 	mov	w3, w24
 	bl	rknand_print_hex
-.L3039:
+.L3137:
 	ldr	w0, [x20,x26]
 	add	x1, x29, 140
 	mov	w2, 1
@@ -19844,30 +19758,30 @@ ftl_update_l2p_map:
 	uxth	w22, w22
 	mov	w0, -1
 	str	w0, [x20,x26]
-.L3038:
+.L3136:
 	add	w25, w25, 1
 	cmp	w25, w24
-	bne	.L3040
-.L3036:
+	bne	.L3138
+.L3134:
 	add	x28, x28, 1
-	b	.L3035
-.L3062:
+	b	.L3133
+.L3160:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L3042
+	tbz	x0, 12, .L3140
 	add	x0, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x23]
 	mov	w2, w22
 	ubfiz	x3, x1, 1, 16
-	ldr	x4, [x0,72]
-	adrp	x0, .LC271
-	add	x0, x0, :lo12:.LC271
+	ldr	x4, [x0,600]
+	adrp	x0, .LC268
+	add	x0, x0, :lo12:.LC268
 	ldrh	w3, [x4,x3]
 	bl	printk
-.L3042:
+.L3140:
 	add	x19, x19, :lo12:.LANCHOR0
 	ldrh	w1, [x23]
-	ldr	x0, [x19,72]
+	ldr	x0, [x19,600]
 	strh	w22, [x0,x1,lsl 1]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -19890,13 +19804,13 @@ ftl_alloc_new_data_sblk:
 	ldrh	w0, [x19]
 	mov	w1, 65535
 	cmp	w0, w1
-	beq	.L3064
+	beq	.L3162
 	bl	zftl_insert_data_list
-.L3064:
-	adrp	x0, .LANCHOR0+80
+.L3162:
+	adrp	x0, .LANCHOR0+608
 	mov	w2, 2
 	mov	w1, 3
-	ldr	x0, [x0,#:lo12:.LANCHOR0+80]
+	ldr	x0, [x0,#:lo12:.LANCHOR0+608]
 	add	x0, x0, 16
 	cmp	x19, x0
 	mov	x0, x19
@@ -19916,292 +19830,299 @@ ftl_alloc_new_data_sblk:
 	.type	ftl_write_commit, %function
 ftl_write_commit:
 	stp	x29, x30, [sp, -160]!
-	adrp	x0, .LANCHOR5
 	add	x29, sp, 0
 	stp	x23, x24, [sp,48]
 	adrp	x24, .LANCHOR0
-	add	x0, x0, :lo12:.LANCHOR5
 	add	x24, x24, :lo12:.LANCHOR0
+	add	x0, x24, 784
+	str	x0, [x29,112]
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
 	str	x0, [x29,120]
-	stp	x27, x28, [sp,80]
-	add	x0, x0, 513
-	add	x28, x24, 768
 	stp	x19, x20, [sp,16]
+	add	x0, x0, 1267
+	str	x0, [x29,104]
 	stp	x21, x22, [sp,32]
 	stp	x25, x26, [sp,64]
-	str	x0, [x29,104]
-.L3068:
-	ldrb	w0, [x24,2840]
+	stp	x27, x28, [sp,80]
+.L3166:
+	ldrb	w0, [x24,2856]
 	adrp	x21, .LANCHOR0
-	cbz	w0, .L3070
-	ldrb	w1, [x24,2866]
+	cbz	w0, .L3168
+	ldrb	w1, [x24,2888]
 	sub	w0, w0, #1
-	str	x1, [x29,112]
+	ldr	x2, [x29,112]
+	str	x1, [x29,128]
 	lsl	x1, x1, 6
-	strb	w0, [x24,2840]
-	add	x25, x28, x1
-	ldr	w0, [x24,2824]
-	ldrb	w1, [x28,x1]
-	ldr	w23, [x25,36]
-	strb	w1, [x24,2866]
-	cmp	w23, w0
-	bcc	.L3071
-	mov	x0, x25
+	add	x27, x2, x1
+	strb	w0, [x24,2856]
+	ldr	w0, [x24,2840]
+	ldrb	w1, [x2,x1]
+	strb	w1, [x24,2888]
+	ldr	w1, [x27,36]
+	cmp	w1, w0
+	bcc	.L3169
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 495
+	add	x1, x1, 760
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L3169:
+	ldr	x0, [x29,128]
+	add	x1, x21, :lo12:.LANCHOR0
+	add	x4, x1, 784
+	add	x0, x4, x0, lsl 6
+	ldr	w2, [x1,2840]
+	ldr	w23, [x0,36]
+	cmp	w23, w2
+	bcc	.L3170
+	mov	x0, x27
 	bl	buf_free
 	mov	w0, -1
-	b	.L3125
-.L3071:
-	ldr	x0, [x25,24]
-	str	x0, [x29,128]
-	ldrb	w0, [x24,2841]
-	ldr	x26, [x25,8]
-	ldrb	w22, [x25,57]
-	ldrb	w20, [x25,56]
-	cbz	w0, .L3073
+	b	.L3224
+.L3170:
+	ldr	x25, [x0,8]
+	ldr	x28, [x0,24]
+	ldrb	w22, [x0,57]
+	ldrb	w20, [x0,56]
+	ldrb	w0, [x1,2857]
+	cbz	w0, .L3172
 	ldr	x0, [x29,120]
-	ldrb	w3, [x0,513]
-	add	x0, x21, :lo12:.LANCHOR0
-	add	x0, x0, 768
-	add	x3, x28, x3, lsl 6
-.L3074:
-	ldrb	w4, [x3]
-	cmp	w4, 255
-	beq	.L3127
-	sbfiz	x3, x4, 6, 32
-	add	x3, x0, x3
-	b	.L3074
-.L3127:
+	ldrb	w3, [x0,1267]
+	add	x3, x4, x3, lsl 6
+.L3173:
+	ldrb	w5, [x3]
+	cmp	w5, 255
+	beq	.L3226
+	sbfiz	x3, x5, 6, 32
+	add	x3, x4, x3
+	b	.L3173
+.L3226:
 	ldr	w0, [x3,36]
 	cmp	w0, w23
-	bne	.L3073
+	bne	.L3172
 	ldr	x0, [x3,8]
 	ubfiz	x1, x22, 9, 8
 	lsl	w2, w20, 9
 	add	x0, x0, x1
-	add	x1, x26, x1
+	add	x1, x25, x1
 	bl	ftl_memcpy
-	mov	x0, x25
+	mov	x0, x27
 	bl	buf_free
-	b	.L3068
-.L3073:
+	b	.L3166
+.L3172:
 	mov	w0, w23
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,156]
 	cmn	w0, #1
-	bne	.L3077
+	bne	.L3176
 	mov	w0, w23
 	add	x1, x29, 156
 	mov	w2, 0
 	bl	pm_log2phys
-.L3077:
+.L3176:
 	add	x4, x21, :lo12:.LANCHOR0
 	mov	w3, 0
-	ldr	x19, [x4,80]
-	add	x4, x4, 768
+	add	x4, x4, 784
+	ldr	x19, [x4,-176]
 	add	x19, x19, 16
-.L3080:
+.L3179:
 	ldr	w0, [x4,36]
 	cmp	w0, w23
-	bne	.L3078
+	bne	.L3177
 	ldrb	w5, [x4,2]
-	tbz	x5, 3, .L3078
+	tbz	x5, 3, .L3177
 	add	x0, x21, :lo12:.LANCHOR0
 	ubfiz	x3, x3, 6, 32
-	add	x0, x0, 768
+	add	x0, x0, 784
 	and	w5, w5, -9
 	add	x3, x0, x3
 	ldr	w0, [x3,40]
 	strb	w5, [x3,2]
-	ldr	x27, [x3,8]
+	ldr	x26, [x3,8]
 	str	w0, [x29,156]
-	b	.L3079
-.L3078:
+	b	.L3178
+.L3177:
 	add	w3, w3, 1
 	add	x4, x4, 64
 	cmp	w3, 32
-	bne	.L3080
-	mov	x27, 0
-.L3079:
+	bne	.L3179
+	mov	x26, 0
+.L3178:
 	add	x3, x21, :lo12:.LANCHOR0
 	str	wzr, [x29,136]
-	ldrb	w0, [x3,2816]
+	ldrb	w0, [x3,2832]
 	cmp	w20, w0
-	bcs	.L3081
+	bcs	.L3180
 	add	w20, w22, w20
-	cbz	x27, .L3082
-	cbz	w22, .L3083
-	mov	x0, x26
-	mov	x1, x27
+	cbz	x26, .L3181
+	cbz	w22, .L3182
+	mov	x0, x25
+	mov	x1, x26
 	lsl	w2, w22, 9
 	str	x3, [x29,136]
 	bl	ftl_memcpy
 	ldr	x3, [x29,136]
-	ldr	x19, [x3,80]
+	ldr	x19, [x3,608]
 	add	x19, x19, 48
-.L3083:
+.L3182:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w2, [x0,2816]
+	ldrb	w2, [x0,2832]
 	cmp	w20, w2
-	bcc	.L3084
-	ldr	x19, [x0,80]
+	bcc	.L3183
+	ldr	x19, [x0,608]
 	add	x19, x19, 16
-	b	.L3126
-.L3084:
+	b	.L3225
+.L3183:
 	ubfiz	x1, x20, 9, 9
 	sub	w2, w2, w20
-	add	x0, x26, x1
+	add	x0, x25, x1
 	lsl	w2, w2, 9
-	add	x1, x27, x1
+	add	x1, x26, x1
 	bl	ftl_memcpy
-.L3126:
+.L3225:
 	str	wzr, [x29,136]
-	b	.L3081
-.L3082:
+	b	.L3180
+.L3181:
 	ldr	w0, [x29,156]
 	cmn	w0, #1
-	beq	.L3085
+	beq	.L3184
 	mov	w0, 1
 	bl	buf_alloc
-	mov	x27, x0
+	mov	x26, x0
 	ldr	w1, [x29,156]
 	str	w1, [x0,40]
 	mov	w1, 1
 	str	w23, [x0,36]
 	bl	sblk_read_page
-	ldr	x0, [x27,24]
+	ldr	x0, [x26,24]
 	ldr	w1, [x0,12]
 	ldr	w0, [x0,4]
 	add	w1, w1, 1
 	str	w1, [x29,136]
 	cmp	w0, w23
-	bne	.L3086
-	ldr	w0, [x27,52]
+	bne	.L3185
+	ldr	w0, [x26,52]
 	cmn	w0, #1
-	bne	.L3087
-.L3086:
-	ldrb	w1, [x27,1]
-	adrp	x0, .LC272
+	bne	.L3186
+.L3185:
+	add	x0, x21, :lo12:.LANCHOR0
 	ldr	w2, [x29,156]
 	mov	w3, w23
-	ldr	w4, [x27,52]
-	add	x0, x0, :lo12:.LC272
+	ldr	x1, [x0,608]
+	ldr	w0, [x1,552]
+	add	w0, w0, 1
+	str	w0, [x1,552]
+	adrp	x0, .LC269
+	ldrb	w1, [x26,1]
+	add	x0, x0, :lo12:.LC269
+	ldr	w4, [x26,52]
 	bl	printk
+	adrp	x0, .LC201
 	mov	w2, 4
-	ldr	x1, [x27,24]
-	adrp	x0, .LC191
+	ldr	x1, [x26,24]
+	add	x0, x0, :lo12:.LC201
 	mov	w3, w2
-	add	x0, x0, :lo12:.LC191
 	bl	rknand_print_hex
-	add	x3, x21, :lo12:.LANCHOR0
-	mov	w2, 21
-	mov	w1, 1
-	ldrh	w0, [x3,3314]
-	sub	w2, w2, w0
-	lsl	w2, w1, w2
-	ldr	w1, [x29,156]
-	sub	w2, w2, #1
-	lsr	w0, w1, w0
-	ldrb	w1, [x3,3312]
-	and	w0, w2, w0
-	udiv	w0, w0, w1
-	mov	x1, 0
-	bl	ftl_sblk_dump
-.L3087:
-	ldr	x0, [x27,24]
+.L3186:
+	ldr	x0, [x26,24]
 	ldr	w0, [x0,4]
 	cmp	w0, w23
-	bne	.L3088
-	ldr	w0, [x27,52]
+	bne	.L3187
+	ldr	w0, [x26,52]
 	cmn	w0, #1
-	bne	.L3089
-.L3088:
+	bne	.L3188
+.L3187:
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 566
+	add	x1, x1, 760
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 752
-	mov	w2, 544
 	bl	printk
-.L3089:
-	cbz	w22, .L3090
+	bl	dump_stack
+.L3188:
+	cbz	w22, .L3189
 	ldr	w0, [x29,156]
 	lsl	w2, w22, 9
 	cmn	w0, #1
-	beq	.L3091
-	ldr	x1, [x27,8]
-	mov	x0, x26
+	beq	.L3190
+	ldr	x1, [x26,8]
+	mov	x0, x25
 	bl	ftl_memcpy
-	b	.L3092
-.L3085:
-	cbz	w22, .L3090
+	b	.L3191
+.L3184:
+	cbz	w22, .L3189
 	lsl	w2, w22, 9
-.L3091:
-	mov	x0, x26
+.L3190:
+	mov	x0, x25
 	mov	w1, 0
 	bl	ftl_memset
-.L3092:
+.L3191:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x19, [x0,80]
+	ldr	x19, [x0,608]
 	add	x19, x19, 48
-.L3090:
+.L3189:
 	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w2, [x0,2816]
+	ldrb	w2, [x0,2832]
 	cmp	w20, w2
-	bcc	.L3093
-	bls	.L3094
-	ldr	x19, [x0,80]
+	bcc	.L3192
+	bls	.L3193
+	ldr	x19, [x0,608]
 	add	x19, x19, 16
-	b	.L3094
-.L3093:
+	b	.L3193
+.L3192:
 	ldr	w0, [x29,156]
 	sub	w2, w2, w20
 	lsl	w2, w2, 9
 	cmn	w0, #1
 	ubfiz	x0, x20, 7, 9
-	beq	.L3095
-	ldr	x1, [x27,8]
+	beq	.L3194
+	ldr	x1, [x26,8]
 	lsl	x20, x0, 2
-	add	x0, x26, x20
+	add	x0, x25, x20
 	add	x1, x1, x20
 	bl	ftl_memcpy
-	b	.L3094
-.L3095:
-	add	x0, x26, x0, lsl 2
+	b	.L3193
+.L3194:
+	add	x0, x25, x0, lsl 2
 	mov	w1, 0
 	bl	ftl_memset
-.L3094:
-	cbz	x27, .L3081
-	ldrb	w0, [x27,2]
-	mov	x1, x27
+.L3193:
+	cbz	x26, .L3180
+	ldrb	w0, [x26,2]
+	mov	x1, x26
 	and	w0, w0, -9
-	strb	w0, [x27,2]
+	strb	w0, [x26,2]
 	add	x0, x21, :lo12:.LANCHOR0
-	add	x0, x0, 2880
+	add	x0, x0, 3895
 	bl	buf_remove_buf
-	mov	x0, x27
+	mov	x0, x26
 	bl	buf_free
-.L3081:
+.L3180:
 	ldrh	w0, [x19,6]
-	cbnz	w0, .L3096
+	cbnz	w0, .L3195
 	bl	ftl_flush
 	mov	x0, x19
 	bl	ftl_alloc_new_data_sblk
-.L3096:
+.L3195:
 	mov	x0, x19
 	add	x20, x21, :lo12:.LANCHOR0
 	bl	ftl_get_new_free_page
-	ldr	x1, [x29,112]
-	add	x3, x20, 768
-	ldr	x6, [x29,128]
+	ldr	x1, [x29,128]
+	add	x3, x20, 784
+	ldr	w6, [x29,136]
 	lsl	x2, x1, 6
-	ldr	w7, [x29,136]
 	add	x1, x3, x2
 	ldr	w5, [x1,32]
-	str	w5, [x6]
-	str	w23, [x6,4]
+	str	w5, [x28]
+	str	w6, [x28,12]
 	ldr	w5, [x29,156]
-	str	w5, [x6,8]
-	str	w7, [x6,12]
+	str	w5, [x28,8]
+	str	w23, [x28,4]
 	str	w0, [x1,40]
 	mov	w0, -1
 	strb	w0, [x3,x2]
@@ -20216,69 +20137,69 @@ ftl_write_commit:
 	sub	w0, w0, #1
 	strh	w0, [x1,48]
 	ldr	x0, [x29,104]
-	mov	x1, x25
+	mov	x1, x27
 	bl	buf_add_tail
-	ldrb	w0, [x20,2841]
+	ldrb	w0, [x20,2857]
 	add	w0, w0, 1
-	strb	w0, [x20,2841]
+	strb	w0, [x20,2857]
 	bl	timer_get_time
 	ldr	x1, [x29,120]
-	ldrb	w2, [x20,2841]
-	str	w0, [x1,516]
+	ldrb	w2, [x20,2857]
+	str	w0, [x1,1268]
 	cmp	w2, 2
-	adrp	x0, .LANCHOR5
-	bhi	.L3097
+	adrp	x0, .LANCHOR4
+	bhi	.L3196
 	ldrh	w1, [x19,6]
 	cmp	w1, 1
-	bne	.L3070
-.L3097:
+	bne	.L3168
+.L3196:
 	ldrb	w1, [x19,5]
 	mov	w4, 2
 	add	x6, x21, :lo12:.LANCHOR0
 	cmp	w1, wzr
 	ldrh	w1, [x19,6]
 	csinc	w4, w4, wzr, ne
-	add	x6, x6, 768
+	add	x6, x6, 784
 	cmp	w1, 1
-	add	x1, x0, :lo12:.LANCHOR5
+	add	x1, x0, :lo12:.LANCHOR4
 	csel	w4, w4, w2, ne
-	ldrb	w5, [x1,513]
+	ldrb	w5, [x1,1267]
 	mov	w1, 0
 	mov	w3, w5
-.L3101:
+.L3200:
 	cmp	w1, w4
-	beq	.L3128
+	beq	.L3227
 	ubfiz	x3, x3, 6, 8
 	add	w1, w1, 1
 	ldrb	w3, [x6,x3]
-	b	.L3101
-.L3128:
-	add	x0, x0, :lo12:.LANCHOR5
+	b	.L3200
+.L3227:
+	add	x0, x0, :lo12:.LANCHOR4
 	uxtb	w1, w1
 	sub	w2, w2, w1
 	ubfiz	x5, x5, 6, 8
-	strb	w3, [x0,513]
+	strb	w3, [x0,1267]
 	add	x0, x21, :lo12:.LANCHOR0
-	add	x0, x0, 768
+	add	x0, x0, 784
 	strb	w2, [x0,2073]
 	add	x0, x0, x5
 	bl	sblk_prog_page
 	ldrh	w0, [x19,6]
 	cmp	w0, 1
-	bne	.L3070
+	bne	.L3168
 	bl	sblk_wait_write_queue_completed
 	bl	ftl_write_completed
 	mov	x0, x19
 	bl	ftl_write_last_log_page
 	mov	x0, x19
 	bl	ftl_alloc_new_data_sblk
-.L3070:
+.L3168:
 	add	x21, x21, :lo12:.LANCHOR0
-	ldrb	w19, [x21,2840]
-	cbnz	w19, .L3068
+	ldrb	w19, [x21,2856]
+	cbnz	w19, .L3166
 	bl	ftl_write_completed
 	mov	w0, w19
-.L3125:
+.L3224:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -20301,102 +20222,83 @@ gc_do_copy_back:
 	stp	x23, x24, [sp,64]
 	stp	x25, x26, [sp,80]
 	stp	x27, x28, [sp,96]
-	ldrb	w0, [x21,3241]
-	ldr	x22, [x21,80]
-	cbnz	w0, .L3130
+	ldrb	w0, [x21,3273]
+	ldr	x22, [x21,608]
+	cbnz	w0, .L3229
 	bl	buf_alloc
 	mov	x20, x0
-	cbz	x0, .L3129
-	ldrh	w23, [x21,2914]
-	mov	w0, w23
-	add	w23, w23, 1
+	cbz	x0, .L3228
+	ldrh	w22, [x21,2922]
+	mov	w0, w22
+	add	w22, w22, 1
 	bl	gc_get_src_ppa_from_index
 	str	w0, [x20,40]
-	mov	w22, w0
+	mov	w23, w0
 	mov	w1, 1
 	mov	x0, x20
-	strh	w23, [x21,2914]
+	strh	w22, [x21,2922]
 	bl	sblk_read_page
 	ldr	w0, [x20,52]
 	cmp	w0, 512
-	beq	.L3185
-	cmn	w0, #1
-	bne	.L3132
-.L3185:
-	add	x3, x19, :lo12:.LANCHOR0
-	mov	w2, 21
-	ldrh	w1, [x3,3314]
-	lsr	w0, w22, w1
-	sub	w1, w2, w1
-	mov	w2, 1
-	lsl	w1, w2, w1
-	sub	w1, w1, #1
-	and	w1, w0, w1
-	ldrb	w0, [x3,3312]
-	udiv	w0, w1, w0
-	mov	x1, 0
-	bl	ftl_sblk_dump
-.L3132:
-	ldr	w0, [x20,52]
-	cmp	w0, 512
-	beq	.L3186
+	beq	.L3282
 	cmn	w0, #1
-	bne	.L3134
-.L3186:
+	bne	.L3231
+.L3282:
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 600
+	add	x1, x1, 784
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 776
-	mov	w2, 573
 	bl	printk
-.L3134:
+	bl	dump_stack
+.L3231:
 	ldr	x0, [x20,24]
 	ldr	w21, [x0,4]
 	mov	w0, w21
 	bl	lpa_hash_get_ppa
 	str	w0, [x29,144]
 	cmn	w0, #1
-	bne	.L3136
+	bne	.L3233
 	mov	w0, w21
 	add	x1, x29, 144
 	mov	w2, 0
 	bl	pm_log2phys
-.L3136:
-	ldr	w23, [x29,144]
-	cmp	w23, w22
-	bne	.L3137
+.L3233:
+	ldr	w22, [x29,144]
+	cmp	w22, w23
+	bne	.L3234
 	add	x1, x19, :lo12:.LANCHOR0
-	add	x0, x1, 768
-	add	x1, x1, 2816
-.L3140:
+	add	x0, x1, 784
+	add	x1, x1, 2832
+.L3237:
 	ldr	w2, [x0,36]
 	cmp	w2, w21
-	bne	.L3138
+	bne	.L3235
 	ldrb	w2, [x0,2]
-	tbz	x2, 1, .L3138
+	tbz	x2, 1, .L3235
 	mov	x0, x20
 	bl	buf_free
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3129
+	tbz	x0, 8, .L3228
 	add	x19, x19, :lo12:.LANCHOR0
-	adrp	x0, .LC273
+	adrp	x0, .LC270
 	mov	w1, w21
-	mov	w2, w23
-	add	x0, x0, :lo12:.LC273
-	ldrh	w3, [x19,2914]
+	mov	w2, w22
+	add	x0, x0, :lo12:.LC270
+	ldrh	w3, [x19,2922]
 	bl	printk
-	b	.L3129
-.L3138:
+	b	.L3228
+.L3235:
 	add	x0, x0, 64
 	cmp	x0, x1
-	bne	.L3140
-	add	x22, x19, :lo12:.LANCHOR0
+	bne	.L3237
+	add	x23, x19, :lo12:.LANCHOR0
 	ldrb	w1, [x20,2]
 	str	w21, [x20,36]
 	strb	wzr, [x20,57]
-	ldrb	w0, [x22,2816]
+	ldrb	w0, [x23,2832]
 	strb	w0, [x20,56]
 	mov	w0, 10
 	orr	w0, w1, w0
@@ -20406,59 +20308,59 @@ gc_do_copy_back:
 	str	w0, [x20,32]
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3141
+	tbz	x0, 8, .L3238
 	ldr	w2, [x29,144]
 	mov	w0, w21
 	str	x2, [x29,136]
 	bl	lpa_hash_get_ppa
 	mov	w3, w0
 	ldr	x2, [x29,136]
-	adrp	x0, .LC274
-	ldrh	w5, [x22,2914]
-	add	x0, x0, :lo12:.LC274
+	adrp	x0, .LC271
+	ldrh	w5, [x23,2922]
+	add	x0, x0, :lo12:.LC271
 	mov	w1, w21
-	mov	w4, w23
+	mov	w4, w22
 	bl	printk
-.L3141:
+.L3238:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	x0, x20
 	bl	ftl_gc_write_buf
 	bl	ftl_write_commit
-	ldr	x1, [x19,2848]
+	ldr	x1, [x19,2864]
 	ldr	w0, [x1,60]
 	add	w0, w0, 1
 	str	w0, [x1,60]
-	ldrh	w0, [x19,2916]
+	ldrh	w0, [x19,2924]
 	add	w0, w0, 1
-	strh	w0, [x19,2916]
-	b	.L3129
-.L3137:
+	strh	w0, [x19,2924]
+	b	.L3228
+.L3234:
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3143
+	tbz	x0, 8, .L3240
 	mov	w0, w21
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	lpa_hash_get_ppa
 	mov	w3, w0
-	ldrh	w5, [x19,2914]
-	adrp	x0, .LC274
-	add	x0, x0, :lo12:.LC274
+	ldrh	w5, [x19,2922]
+	adrp	x0, .LC271
+	add	x0, x0, :lo12:.LC271
 	mov	w1, w21
-	mov	w2, w23
-	mov	w4, w22
+	mov	w2, w22
+	mov	w4, w23
 	bl	printk
-.L3143:
+.L3240:
 	mov	x0, x20
 	bl	buf_free
-	b	.L3129
-.L3130:
-	ldrb	w24, [x21,3225]
-	add	x0, x21, 2888
+	b	.L3228
+.L3229:
+	ldrb	w24, [x21,3257]
+	add	x0, x21, 2896
 	add	x22, x22, 80
 	cmp	w24, 3
-	bne	.L3144
-	ldrb	w1, [x21,3240]
-	cbz	w1, .L3145
+	bne	.L3241
+	ldrb	w1, [x21,3272]
+	cbz	w1, .L3242
 	ldrb	w20, [x22,9]
 	ldrh	w21, [x0,314]
 	str	w24, [x29,136]
@@ -20467,8 +20369,8 @@ gc_do_copy_back:
 	sdiv	w23, w21, w23
 	madd	w20, w23, w20, w21
 	uxth	w20, w20
-	b	.L3147
-.L3145:
+	b	.L3244
+.L3242:
 	ldrh	w20, [x0,314]
 	adrp	x0, .LANCHOR2
 	ldrb	w21, [x22,9]
@@ -20485,107 +20387,107 @@ gc_do_copy_back:
 	cmp	w25, 1
 	add	w21, w21, w21, lsl 1
 	uxth	w21, w21
-	bne	.L3148
-	b	.L3147
-.L3144:
+	bne	.L3245
+	b	.L3244
+.L3241:
 	ldrb	w20, [x22,9]
-	ldrb	w1, [x21,3322]
+	ldrb	w1, [x21,3348]
 	ldrh	w21, [x0,314]
 	mov	w0, 1
 	sdiv	w23, w21, w20
 	msub	w20, w23, w20, w21
 	uxth	w20, w20
-	cbz	w1, .L3230
+	cbz	w1, .L3323
 	mov	w0, 2
-.L3230:
+.L3323:
 	str	w0, [x29,136]
-.L3147:
+.L3244:
 	mov	w25, 0
 	add	x24, x19, :lo12:.LANCHOR0
 	adrp	x3, .LANCHOR4
-.L3150:
+.L3247:
 	ldrb	w1, [x22,9]
 	ldr	w0, [x29,136]
 	mul	w0, w0, w1
 	cmp	w25, w0
-	bge	.L3183
-	ldrh	w0, [x24,3242]
+	bge	.L3280
+	ldrh	w0, [x24,3274]
 	add	w26, w21, w25
 	mul	w0, w0, w1
 	sub	w0, w0, #1
 	cmp	w26, w0
-	beq	.L3183
+	beq	.L3280
 	add	x0, x3, :lo12:.LANCHOR4
 	sbfiz	x26, x26, 2, 32
-	ldr	x1, [x0,1112]
+	ldr	x1, [x0,1144]
 	ldr	w0, [x1,x26]
 	cmn	w0, #1
-	bne	.L3151
-	ldrh	w27, [x24,2914]
-	ldrh	w0, [x24,2912]
+	bne	.L3248
+	ldrh	w27, [x24,2922]
+	ldrh	w0, [x24,2920]
 	str	x3, [x29,120]
 	str	x1, [x29,128]
 	cmp	w0, w27
-	bls	.L3129
+	bls	.L3228
 	mov	w0, w27
 	add	w27, w27, 1
 	bl	gc_get_src_ppa_from_index
-	strh	w27, [x24,2914]
+	strh	w27, [x24,2922]
 	ldr	x1, [x29,128]
 	ldr	x3, [x29,120]
 	str	w0, [x1,x26]
-.L3151:
+.L3248:
 	add	w25, w25, 1
 	uxth	w25, w25
-	b	.L3150
-.L3183:
+	b	.L3247
+.L3280:
 	mov	w25, 1
-.L3148:
+.L3245:
 	adrp	x0, .LANCHOR2
 	str	x0, [x29,120]
 	ldr	w1, [x0,#:lo12:.LANCHOR2]
-	tbz	x1, 8, .L3153
-	adrp	x0, .LANCHOR4+1112
+	tbz	x1, 8, .L3250
+	adrp	x0, .LANCHOR4+1144
 	add	x4, x19, :lo12:.LANCHOR0
 	ubfiz	x5, x21, 2, 16
 	mov	w1, w23
 	mov	w2, w25
 	mov	w3, w20
-	ldr	x6, [x0,#:lo12:.LANCHOR4+1112]
-	adrp	x0, .LC275
-	ldrh	w4, [x4,3202]
-	add	x0, x0, :lo12:.LC275
+	ldr	x6, [x0,#:lo12:.LANCHOR4+1144]
+	adrp	x0, .LC272
+	ldrh	w4, [x4,3210]
+	add	x0, x0, :lo12:.LC272
 	ldr	w5, [x6,x5]
 	mov	w6, w21
 	bl	printk
-.L3153:
+.L3250:
 	adrp	x0, .LC0
 	mov	w27, 0
 	add	x0, x0, :lo12:.LC0
 	str	x0, [x29,112]
 	adrp	x0, .LANCHOR3
 	add	x0, x0, :lo12:.LANCHOR3
-	add	x0, x0, 776
+	add	x0, x0, 784
 	str	x0, [x29,104]
-.L3154:
+.L3251:
 	ldrb	w0, [x22,9]
 	ldr	w1, [x29,136]
 	mul	w0, w1, w0
 	cmp	w27, w0
-	bge	.L3234
+	bge	.L3327
 	add	w26, w21, w27
 	sxtw	x0, w26
 	str	x0, [x29,128]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	x1, [x29,128]
-	ldr	x0, [x0,3232]
+	ldr	x0, [x0,3264]
 	ldrb	w0, [x0,x1]
 	cmp	w0, 255
-	bne	.L3155
+	bne	.L3252
 	mov	w0, 0
 	bl	buf_alloc
 	mov	x24, x0
-	cbnz	x0, .L3156
+	cbnz	x0, .L3253
 	bl	sblk_wait_write_queue_completed
 	bl	ftl_write_completed
 	bl	gc_write_completed
@@ -20593,45 +20495,45 @@ gc_do_copy_back:
 	mov	w0, w24
 	bl	buf_alloc
 	mov	x24, x0
-	cbz	x0, .L3129
-.L3156:
+	cbz	x0, .L3228
+.L3253:
 	add	x28, x19, :lo12:.LANCHOR0
 	ldr	x2, [x29,128]
 	ldrb	w1, [x24,1]
-	ldr	x0, [x28,3232]
+	ldr	x0, [x28,3264]
 	strb	w1, [x0,x2]
 	strh	w26, [x24,48]
-	ldrb	w0, [x28,2895]
+	ldrb	w0, [x28,2903]
 	strb	w25, [x24,61]
 	add	w0, w0, 1
-	strb	w0, [x28,2895]
+	strb	w0, [x28,2903]
 	ldrb	w1, [x22,9]
-	ldrh	w0, [x28,3242]
+	ldrh	w0, [x28,3274]
 	mul	w0, w0, w1
 	sub	w0, w0, #1
 	cmp	w26, w0
 	adrp	x26, .LANCHOR4
-	bne	.L3157
+	bne	.L3254
 	add	x26, x26, :lo12:.LANCHOR4
 	mov	w1, -1
-	ldr	x0, [x26,1104]
+	ldr	x0, [x26,1136]
 	str	w1, [x0,x2,lsl 2]
-	ldrh	w0, [x28,3242]
-	ldrb	w2, [x28,3244]
-	ldr	x1, [x26,1104]
+	ldrh	w0, [x28,3274]
+	ldrb	w2, [x28,3276]
+	ldr	x1, [x26,1136]
 	mul	w2, w0, w2
 	ldr	x0, [x24,8]
 	lsl	w2, w2, 2
 	bl	ftl_memcpy
-	ldrh	w0, [x28,3242]
-	ldrb	w2, [x28,3244]
-	ldr	x1, [x26,1112]
+	ldrh	w0, [x28,3274]
+	ldrb	w2, [x28,3276]
+	ldr	x1, [x26,1144]
 	mul	w2, w0, w2
 	ldr	x0, [x24,8]
 	add	x0, x0, x2, sxtw 2
 	lsl	w2, w2, 2
 	bl	ftl_memcpy
-	ldrb	w2, [x28,2816]
+	ldrb	w2, [x28,2832]
 	mov	w1, 0
 	ldr	x0, [x24,24]
 	lsl	w2, w2, 1
@@ -20640,106 +20542,107 @@ gc_do_copy_back:
 	mov	w0, 15555
 	movk	w0, 0xf55f, lsl 16
 	str	w0, [x1]
-	ldrh	w0, [x28,3242]
-	ldrb	w1, [x28,3244]
+	ldrh	w0, [x28,3274]
+	ldrb	w1, [x28,3276]
 	ldr	x26, [x24,24]
 	mul	w1, w0, w1
 	ldr	x0, [x24,8]
 	lsl	w1, w1, 2
 	bl	js_hash
 	str	w0, [x26,4]
-	ldr	x1, [x28,80]
+	ldr	x1, [x28,608]
 	ldr	x0, [x24,24]
 	ldr	w1, [x1,132]
-	b	.L3231
-.L3157:
+	b	.L3324
+.L3254:
 	ldr	x0, [x29,128]
 	mov	w1, 1
 	lsl	x28, x0, 2
 	add	x0, x26, :lo12:.LANCHOR4
-	ldr	x0, [x0,1112]
+	ldr	x0, [x0,1144]
 	ldr	w0, [x0,x28]
 	str	w0, [x24,40]
 	mov	x0, x24
 	bl	sblk_read_page
 	ldr	w0, [x24,52]
 	cmp	w0, 512
-	beq	.L3158
+	beq	.L3255
 	cmn	w0, #1
-	bne	.L3159
-.L3158:
+	bne	.L3256
+.L3255:
 	add	x4, x19, :lo12:.LANCHOR0
 	mov	w2, 21
 	mov	w1, 1
-	ldrh	w0, [x4,3314]
+	ldrh	w0, [x4,3340]
 	sub	w2, w2, w0
 	lsl	w2, w1, w2
 	ldr	w1, [x24,40]
 	sub	w2, w2, #1
 	lsr	w0, w1, w0
-	ldrb	w1, [x4,3312]
+	ldrb	w1, [x4,3338]
 	and	w0, w2, w0
 	udiv	w0, w0, w1
 	mov	x1, 0
 	bl	ftl_sblk_dump
 	ldr	w0, [x24,52]
 	cmp	w0, 512
-	beq	.L3187
+	beq	.L3283
 	cmn	w0, #1
-	bne	.L3159
-.L3187:
+	bne	.L3256
+.L3283:
 	ldr	x0, [x24,24]
 	mov	w1, -1
 	str	w1, [x0,4]
-.L3159:
+.L3256:
 	ldr	w0, [x24,52]
 	cmp	w0, 512
-	beq	.L3188
+	beq	.L3284
 	cmn	w0, #1
-	bne	.L3162
-.L3188:
-	ldr	x0, [x29,112]
-	mov	w2, 688
+	bne	.L3259
+.L3284:
 	ldr	x1, [x29,104]
+	mov	w2, 715
+	ldr	x0, [x29,112]
 	bl	printk
-.L3162:
+	bl	dump_stack
+.L3259:
 	ldr	x1, [x24,24]
 	add	x0, x19, :lo12:.LANCHOR0
 	ldr	w2, [x1,4]
-	ldr	w0, [x0,2824]
+	ldr	w0, [x0,2840]
 	cmp	w2, w0
-	bcc	.L3164
+	bcc	.L3261
 	mov	w0, -1
 	str	w0, [x1,4]
-.L3164:
+.L3261:
 	ldr	x0, [x24,24]
 	add	x26, x26, :lo12:.LANCHOR4
 	ldr	w1, [x0,4]
-	ldr	x0, [x26,1104]
+	ldr	x0, [x26,1136]
 	str	w1, [x0,x28]
 	ldr	x0, [x24,24]
 	ldr	w1, [x24,40]
-.L3231:
+.L3324:
 	str	w1, [x0,8]
-.L3155:
+.L3252:
 	add	x3, x19, :lo12:.LANCHOR0
 	ldr	x2, [x29,128]
-	add	x1, x3, 768
+	add	x1, x3, 784
 	sxtw	x5, w27
-	ldr	x0, [x3,3232]
+	ldr	x0, [x3,3264]
 	ldrb	w4, [x0,x2]
 	add	x0, x29, 144
 	mov	w2, 2
 	add	x1, x1, x4, lsl 6
 	str	x1, [x0,w27,sxtw 3]
-	ldrb	w0, [x3,3225]
+	ldrb	w0, [x3,3257]
 	strh	w2, [x1,50]
 	cmp	w0, 3
 	strb	w25, [x1,61]
 	adrp	x2, .LANCHOR4
-	bne	.L3165
+	bne	.L3262
 	udiv	w0, w27, w0
-	ldrh	w3, [x3,3324]
+	ldrh	w3, [x3,3350]
 	add	x2, x2, :lo12:.LANCHOR4
 	add	w4, w0, w20
 	add	x4, x22, x4, sxtw 1
@@ -20750,54 +20653,54 @@ gc_do_copy_back:
 	orr	w3, w3, w23
 	sub	w0, w27, w0
 	str	w3, [x1,40]
-	ldr	x1, [x2,1120]
+	ldr	x1, [x2,1152]
 	uxth	w0, w0
 	add	w0, w0, 1
 	orr	w0, w3, w0, lsl 24
 	str	w0, [x1,x4,lsl 2]
-	b	.L3166
-.L3165:
+	b	.L3263
+.L3262:
 	cmp	w0, 2
-	bne	.L3167
-	ldrb	w6, [x3,3322]
+	bne	.L3264
+	ldrb	w6, [x3,3348]
 	add	x1, x1, 32
-	ldrh	w0, [x3,3324]
-	cbnz	w6, .L3168
+	ldrh	w0, [x3,3350]
+	cbnz	w6, .L3265
 	add	w3, w27, w20
 	add	x3, x22, x3, sxtw 1
 	ldrh	w3, [x3,16]
 	madd	w0, w3, w0, w23
-	b	.L3233
-.L3168:
+	b	.L3326
+.L3265:
 	add	w3, w20, w27, lsr 1
 	add	x3, x22, x3, sxtw 1
 	ldrh	w3, [x3,16]
 	madd	w0, w3, w0, w23
 	and	w3, w27, 1
 	add	w0, w0, w3
-.L3233:
+.L3326:
 	orr	w0, w0, 33554432
 	str	w0, [x1,8]
-.L3167:
+.L3264:
 	add	x0, x19, :lo12:.LANCHOR0
 	add	x2, x2, :lo12:.LANCHOR4
-	add	x0, x0, 768
+	add	x0, x0, 784
 	add	x0, x0, x4, lsl 6
 	ldr	w3, [x0,40]
 	ldrh	w1, [x0,48]
-	ldr	x0, [x2,1120]
+	ldr	x0, [x2,1152]
 	str	w3, [x0,x1,lsl 2]
-.L3166:
+.L3263:
 	ldr	x0, [x29,120]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3169
+	tbz	x0, 8, .L3266
 	add	x0, x29, 144
 	ldr	x1, [x29,128]
 	mov	w2, w25
 	ldr	x5, [x0,x5,lsl 3]
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrb	w3, [x0,2894]
-	ldr	x0, [x0,3232]
+	ldrb	w3, [x0,2902]
+	ldr	x0, [x0,3264]
 	ldrh	w6, [x5,48]
 	ldrb	w7, [x5,1]
 	ldrb	w4, [x0,x1]
@@ -20806,1151 +20709,1176 @@ gc_do_copy_back:
 	udiv	w0, w27, w0
 	add	w0, w20, w0
 	str	w0, [sp]
-	ldr	x0, [x5,24]
-	ldr	w0, [x0,4]
-	str	w0, [sp,8]
-	adrp	x0, .LC276
-	add	x0, x0, :lo12:.LC276
-	ldr	w5, [x5,40]
-	bl	printk
-.L3169:
-	add	w8, w27, 1
-	uxth	w27, w8
-	b	.L3154
-.L3234:
-	add	x2, x19, :lo12:.LANCHOR0
-	mov	w1, 0
-	ldrb	w0, [x2,3225]
-	cmp	w0, 3
-	add	x0, x29, 144
-	bne	.L3216
-	ldrb	w1, [x2,3240]
-	cbz	w1, .L3172
-.L3175:
-	ldr	x1, [x29,144]
-	strb	wzr, [x1,60]
-	b	.L3173
-.L3172:
-	cmp	w25, 1
-	mov	w2, 9
-	beq	.L3232
-	cmp	w25, 2
-	bne	.L3175
-	mov	w2, 13
-.L3232:
-	ldr	x1, [x29,144]
-	strb	w2, [x1,60]
-.L3173:
-	ldrb	w2, [x22,9]
-	add	x1, x0, 24
-	bl	sblk_xlc_prog_pages
-	b	.L3176
-.L3216:
-	ldrb	w2, [x22,9]
-	ldr	w3, [x29,136]
-	mul	w2, w2, w3
-	sub	w2, w2, #1
-	cmp	w1, w2
-	bge	.L3235
-	ldr	x2, [x0,w1,sxtw 3]
-	add	w1, w1, 1
-	ldr	x3, [x0,w1,sxtw 3]
-	uxth	w1, w1
-	ldrb	w3, [x3,1]
-	strb	w3, [x2]
-	b	.L3216
-.L3235:
-	ldr	x0, [x0,w2,sxtw 3]
-	mov	w1, -1
-	strb	w1, [x0]
-	ldrb	w1, [x22,9]
-	ldr	x0, [x29,144]
-	mul	w1, w3, w1
-	bl	sblk_prog_page
-.L3176:
-	add	x1, x19, :lo12:.LANCHOR0
-	ldrb	w2, [x22,9]
-	ldrb	w3, [x1,3240]
-	cbz	w3, .L3178
-	add	w0, w2, w2, lsl 1
-	and	w2, w0, 1023
-	b	.L3179
-.L3178:
-	ldrb	w1, [x1,3322]
-	ubfiz	w0, w2, 1, 8
-	cmp	w1, wzr
-	csel	w2, w0, w2, ne
-.L3179:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldr	x1, [x19,2848]
-	ldr	w0, [x1,52]
-	add	w0, w0, w2
-	str	w0, [x1,52]
-	ldrh	w1, [x19,3202]
-	add	w0, w2, w1
-	ldrh	w1, [x19,3242]
-	uxth	w0, w0
-	strh	w0, [x19,3202]
-	ldrb	w2, [x22,9]
-	mul	w1, w1, w2
-	cmp	w0, w1
-	blt	.L3180
-	ldr	x0, [x19,80]
-	strh	wzr, [x0,86]
-.L3180:
-	bl	gc_write_completed
-.L3129:
-	sub	sp, x29, #16
-	ldp	x19, x20, [sp,32]
-	ldp	x21, x22, [sp,48]
-	ldp	x23, x24, [sp,64]
-	ldp	x25, x26, [sp,80]
-	ldp	x27, x28, [sp,96]
-	ldp	x29, x30, [sp,16]
-	add	sp, sp, 208
-	ret
-	.size	gc_do_copy_back, .-gc_do_copy_back
-	.align	2
-	.global	zftl_discard
-	.type	zftl_discard, %function
-zftl_discard:
-	stp	x29, x30, [sp, -128]!
-	add	w2, w0, w1
-	mov	w4, -1
-	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR0
-	stp	x19, x20, [sp,16]
-	mov	w19, w1
-	add	x1, x21, :lo12:.LANCHOR0
-	stp	x23, x24, [sp,48]
-	stp	x25, x26, [sp,64]
-	stp	x27, x28, [sp,80]
-	ldr	w1, [x1,4]
-	cmp	w2, w1
-	bhi	.L3237
-	adrp	x23, .LANCHOR8
-	add	w24, w0, 24576
-	add	x0, x23, :lo12:.LANCHOR8
-	adrp	x25, .LANCHOR2
-	ldr	w1, [x0,3576]
-	add	w1, w19, w1
-	str	w1, [x0,3576]
-	ldr	w0, [x25,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L3238
-	adrp	x0, .LC277
-	mov	w2, w24
-	add	x0, x0, :lo12:.LC277
-	mov	w3, w19
-	mov	w4, 0
-	bl	printk
-.L3238:
-	add	x20, x21, :lo12:.LANCHOR0
-	ldr	x0, [x20,2848]
-	ldr	w26, [x0,8]
-	add	w1, w26, 1
-	str	w1, [x0,8]
-	bl	ftl_write_commit
-	bl	ftl_flush
-	ldrb	w22, [x20,2816]
-	udiv	w20, w24, w22
-	msub	w27, w20, w22, w24
-	cbz	w27, .L3239
-	sub	w22, w22, w27
-	mov	w0, w20
-	cmp	w22, w19
-	csel	w22, w22, w19, ls
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,120]
-	cmn	w0, #1
-	bne	.L3240
-	mov	w0, w20
-	add	x1, x29, 120
-	mov	w2, 0
-	bl	pm_log2phys
-.L3240:
-	ldr	w0, [x29,120]
-	and	w28, w22, 65535
-	cmn	w0, #1
-	beq	.L3242
-	mov	w0, 0
-	bl	buf_alloc
-	mov	x3, x0
-	cbz	x0, .L3242
-	strb	w27, [x0,57]
-	ubfiz	x27, x27, 9, 25
-	str	w20, [x0,36]
-	mov	w1, 0
-	strb	w22, [x0,56]
-	lsl	w2, w28, 9
-	str	w26, [x0,32]
-	ldr	x0, [x0,8]
-	str	x3, [x29,104]
-	add	x0, x0, x27
-	bl	ftl_memset
-	ldr	x3, [x29,104]
-	mov	x0, x3
-	bl	ftl_write_buf
-	bl	ftl_write_commit
-	add	x0, x21, :lo12:.LANCHOR0
-	ldr	x1, [x0,2848]
-	ldr	w0, [x1,76]
-	add	w0, w0, 1
-	str	w0, [x1,76]
-.L3242:
-	add	w20, w20, 1
-	sub	w19, w19, w28
-.L3239:
-	cbz	w19, .L3244
-	bl	ftl_flush
-.L3244:
-	mov	w0, -1
-	mov	w27, 1
-	str	w0, [x29,124]
-	mov	w28, 21
-.L3245:
-	add	x22, x21, :lo12:.LANCHOR0
-	ldrb	w0, [x22,2816]
-	cmp	w19, w0
-	bcc	.L3284
-	mov	w0, w20
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,120]
-	cmn	w0, #1
-	beq	.L3246
-	mov	w0, 0
-	bl	buf_alloc
-	mov	x3, x0
-	cbz	x0, .L3248
-	ldrb	w2, [x22,2816]
-	mov	w1, 0
-	str	w20, [x0,36]
-	strb	w2, [x0,56]
-	lsl	w2, w2, 9
-	str	w26, [x0,32]
-	strb	wzr, [x0,57]
-	ldr	x0, [x0,8]
-	str	x3, [x29,104]
-	bl	ftl_memset
-	ldr	x3, [x29,104]
-	mov	x0, x3
-	bl	ftl_write_buf
-	bl	ftl_write_commit
-	b	.L3283
-.L3246:
-	mov	w0, w20
-	add	x1, x29, 120
-	mov	w2, 0
-	bl	pm_log2phys
-	ldr	w0, [x29,120]
-	cmn	w0, #1
-	beq	.L3248
-	add	x1, x29, 124
-	mov	w2, 1
-	mov	w0, w20
-	bl	pm_log2phys
-	ldrh	w0, [x22,3314]
-	ldr	w1, [x29,120]
-	sub	w2, w28, w0
-	lsl	w2, w27, w2
-	lsr	w0, w1, w0
-	sub	w2, w2, #1
-	ldrb	w1, [x22,3312]
-	and	w0, w2, w0
-	udiv	w0, w0, w1
-	bl	ftl_vpn_decrement
-.L3283:
-	ldr	x1, [x22,2848]
-	ldr	w0, [x1,76]
-	add	w0, w0, 1
-	str	w0, [x1,76]
-.L3248:
-	add	x0, x21, :lo12:.LANCHOR0
-	add	w20, w20, 1
-	ldrb	w0, [x0,2816]
-	sub	w19, w19, w0
-	b	.L3245
-.L3284:
-	cbz	w19, .L3252
-	mov	w0, w20
-	bl	lpa_hash_get_ppa
-	str	w0, [x29,120]
-	cmn	w0, #1
-	bne	.L3253
-	mov	w0, w20
-	add	x1, x29, 120
-	mov	w2, 0
-	bl	pm_log2phys
-.L3253:
-	ldr	w0, [x29,120]
-	cmn	w0, #1
-	beq	.L3252
-	mov	w0, 0
-	bl	buf_alloc
-	mov	x22, x0
-	cbz	x0, .L3252
-	str	w20, [x0,36]
-	strb	wzr, [x0,57]
-	strb	w19, [x0,56]
-	str	w26, [x0,32]
-	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w0, [x0,2816]
-	cmp	w19, w0
-	bcc	.L3255
-	adrp	x1, .LANCHOR3
-	adrp	x0, .LC0
-	add	x1, x1, :lo12:.LANCHOR3
-	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 792
-	mov	w2, 1177
+	ldr	x0, [x5,24]
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	adrp	x0, .LC273
+	add	x0, x0, :lo12:.LC273
+	ldr	w5, [x5,40]
 	bl	printk
-.L3255:
-	ldr	x0, [x22,8]
+.L3266:
+	add	w8, w27, 1
+	uxth	w27, w8
+	b	.L3251
+.L3327:
+	add	x2, x19, :lo12:.LANCHOR0
 	mov	w1, 0
-	lsl	w2, w19, 9
-	add	x21, x21, :lo12:.LANCHOR0
-	bl	ftl_memset
-	mov	x0, x22
-	bl	ftl_write_buf
-	bl	ftl_write_commit
-	ldr	x1, [x21,2848]
-	ldr	w0, [x1,76]
-	add	w0, w0, 1
-	str	w0, [x1,76]
-.L3252:
-	add	x0, x23, :lo12:.LANCHOR8
-	mov	w4, 0
-	ldr	w1, [x0,3576]
-	cmp	w1, 8192
-	bls	.L3237
-	ldr	w0, [x25,#:lo12:.LANCHOR2]
-	tbz	x0, 12, .L3256
-	adrp	x0, .LC277
-	mov	w2, w24
-	add	x0, x0, :lo12:.LC277
-	mov	w3, w19
-	bl	printk
-.L3256:
-	add	x23, x23, :lo12:.LANCHOR8
-	str	wzr, [x23,3576]
-	bl	flt_sys_flush
-	mov	w0, 1
-	mov	w4, 0
-	str	w0, [x23,3580]
-.L3237:
-	mov	w0, w4
-	ldp	x19, x20, [sp,16]
-	ldp	x21, x22, [sp,32]
-	ldp	x23, x24, [sp,48]
-	ldp	x25, x26, [sp,64]
-	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 128
+	ldrb	w0, [x2,3257]
+	cmp	w0, 3
+	add	x0, x29, 144
+	bne	.L3310
+	ldrb	w1, [x2,3272]
+	cbz	w1, .L3269
+.L3272:
+	ldr	x1, [x29,144]
+	strb	wzr, [x1,60]
+	b	.L3270
+.L3269:
+	cmp	w25, 1
+	mov	w2, 9
+	beq	.L3325
+	cmp	w25, 2
+	bne	.L3272
+	mov	w2, 13
+.L3325:
+	ldr	x1, [x29,144]
+	strb	w2, [x1,60]
+.L3270:
+	ldrb	w2, [x22,9]
+	add	x1, x0, 24
+	bl	sblk_xlc_prog_pages
+	b	.L3273
+.L3310:
+	ldrb	w2, [x22,9]
+	ldr	w3, [x29,136]
+	mul	w2, w2, w3
+	sub	w2, w2, #1
+	cmp	w1, w2
+	bge	.L3328
+	ldr	x2, [x0,w1,sxtw 3]
+	add	w1, w1, 1
+	ldr	x3, [x0,w1,sxtw 3]
+	uxth	w1, w1
+	ldrb	w3, [x3,1]
+	strb	w3, [x2]
+	b	.L3310
+.L3328:
+	ldr	x0, [x0,w2,sxtw 3]
+	mov	w1, -1
+	strb	w1, [x0]
+	ldrb	w1, [x22,9]
+	ldr	x0, [x29,144]
+	mul	w1, w3, w1
+	bl	sblk_prog_page
+.L3273:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrb	w2, [x22,9]
+	ldrb	w3, [x1,3272]
+	cbz	w3, .L3275
+	add	w0, w2, w2, lsl 1
+	and	w2, w0, 1023
+	b	.L3276
+.L3275:
+	ldrb	w1, [x1,3348]
+	ubfiz	w0, w2, 1, 8
+	cmp	w1, wzr
+	csel	w2, w0, w2, ne
+.L3276:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x1, [x19,2864]
+	ldr	w0, [x1,52]
+	add	w0, w0, w2
+	str	w0, [x1,52]
+	ldrh	w1, [x19,3210]
+	add	w0, w2, w1
+	ldrh	w1, [x19,3274]
+	uxth	w0, w0
+	strh	w0, [x19,3210]
+	ldrb	w2, [x22,9]
+	mul	w1, w1, w2
+	cmp	w0, w1
+	blt	.L3277
+	ldr	x0, [x19,608]
+	strh	wzr, [x0,86]
+.L3277:
+	bl	gc_write_completed
+.L3228:
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 208
 	ret
-	.size	zftl_discard, .-zftl_discard
+	.size	gc_do_copy_back, .-gc_do_copy_back
 	.align	2
 	.global	zftl_do_gc
 	.type	zftl_do_gc, %function
 zftl_do_gc:
-	sub	sp, sp, #112
+	sub	sp, sp, #128
 	stp	x29, x30, [sp,16]
 	add	x29, sp, 16
 	stp	x19, x20, [sp,32]
 	adrp	x19, .LANCHOR0
-	stp	x23, x24, [sp,64]
-	mov	w24, w0
-	add	x0, x19, :lo12:.LANCHOR0
-	stp	x21, x22, [sp,48]
+	add	x1, x19, :lo12:.LANCHOR0
 	stp	x25, x26, [sp,80]
+	stp	x21, x22, [sp,48]
+	stp	x23, x24, [sp,64]
 	stp	x27, x28, [sp,96]
-	cmp	w24, 1
-	ldrh	w1, [x0,2832]
-	ldrh	w21, [x0,2828]
-	ldr	x23, [x0,80]
-	add	w21, w1, w21
-	ldrh	w22, [x0,2830]
-	uxth	w21, w21
-	bne	.L3286
-	adrp	x0, .LANCHOR7
-	adrp	x25, .LANCHOR8
-	add	x2, x0, :lo12:.LANCHOR7
-	mov	x20, x0
-	ldr	w26, [x2,3312]
-	cbnz	w26, .L3287
-	add	x0, x25, :lo12:.LANCHOR8
-	ldr	w0, [x0,3584]
-	cbz	w0, .L3286
-.L3287:
-	add	w26, w26, 50
+	mov	w26, w0
+	ldrh	w20, [x1,2844]
+	cmp	w26, 1
+	ldrh	w0, [x1,2848]
+	ldr	x24, [x1,608]
+	add	w20, w0, w20
+	ldrh	w22, [x1,2846]
+	uxth	w20, w20
+	bne	.L3330
+	adrp	x21, .LANCHOR7
+	add	x1, x21, :lo12:.LANCHOR7
+	ldr	w23, [x1,-80]
+	cbnz	w23, .L3331
+	ldr	w1, [x1,-76]
+	cbz	w1, .L3330
+.L3331:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x1,3306]
+	cmp	w20, w2, lsr 2
+	bls	.L3330
+	ldrh	w1, [x1,2872]
+	cmp	w1, w20
+	bcs	.L3330
+	add	w23, w23, 20
 	bl	timer_get_time
-	cmp	w26, w0
-	bcs	.L3288
-	add	x0, x20, :lo12:.LANCHOR7
-	str	wzr, [x0,3312]
-.L3288:
-	add	x19, x25, :lo12:.LANCHOR8
-	ldr	w20, [x19,3584]
+	cmp	w23, w0
+	bcs	.L3332
+	add	x0, x21, :lo12:.LANCHOR7
+	str	wzr, [x0,-80]
+.L3332:
+	add	x19, x21, :lo12:.LANCHOR7
+	ldr	w20, [x19,-76]
 	bl	timer_get_time
-	add	w20, w20, 50
+	add	w20, w20, 20
 	cmp	w20, w0
-	bcs	.L3404
-	str	wzr, [x19,3584]
-	b	.L3404
-.L3286:
-	adrp	x20, .LANCHOR4
-	add	x0, x20, :lo12:.LANCHOR4
-	ldrb	w2, [x0,1098]
+	bcs	.L3515
+	str	wzr, [x19,-76]
+	b	.L3515
+.L3330:
+	adrp	x23, .LANCHOR4
+	add	x1, x23, :lo12:.LANCHOR4
+	ldrb	w2, [x1,1130]
+	mov	w1, 16
 	cmp	w2, 6
-	bhi	.L3404
-	adrp	x0, .L3292
-	add	x0, x0, :lo12:.L3292
-	ldrh	w0, [x0,w2,uxtw #1]
-	adr	x2, .Lrtx3292
-	add	x0, x2, w0, sxth #2
-	br	x0
-.Lrtx3292:
+	bhi	.L3488
+	adrp	x1, .L3336
+	add	x1, x1, :lo12:.L3336
+	ldrh	w1, [x1,w2,uxtw #1]
+	adr	x2, .Lrtx3336
+	add	x1, x2, w1, sxth #2
+	br	x1
+.Lrtx3336:
 	.section	.rodata
 	.align	0
 	.align	2
-.L3292:
-	.2byte	(.L3291 - .Lrtx3292) / 4
-	.2byte	(.L3293 - .Lrtx3292) / 4
-	.2byte	(.L3294 - .Lrtx3292) / 4
-	.2byte	(.L3295 - .Lrtx3292) / 4
-	.2byte	(.L3296 - .Lrtx3292) / 4
-	.2byte	(.L3374 - .Lrtx3292) / 4
-	.2byte	(.L3298 - .Lrtx3292) / 4
+.L3336:
+	.2byte	(.L3335 - .Lrtx3336) / 4
+	.2byte	(.L3337 - .Lrtx3336) / 4
+	.2byte	(.L3338 - .Lrtx3336) / 4
+	.2byte	(.L3339 - .Lrtx3336) / 4
+	.2byte	(.L3340 - .Lrtx3336) / 4
+	.2byte	(.L3446 - .Lrtx3336) / 4
+	.2byte	(.L3342 - .Lrtx3336) / 4
 	.text
-.L3291:
-	ldrh	w28, [x23,80]
-	add	x27, x19, :lo12:.LANCHOR0
-	mov	w0, 65535
-	add	w22, w22, w1
-	cmp	w28, w0
+.L3335:
+	add	x21, x19, :lo12:.LANCHOR0
+	add	w22, w22, w0
+	ldrh	w1, [x24,80]
 	uxth	w22, w22
-	ldrh	w25, [x27,2834]
-	ldrh	w26, [x27,2836]
-	beq	.L3299
+	ldrh	w0, [x21,2850]
+	ldrh	w25, [x21,2852]
+	add	w25, w25, w0
+	mov	w0, 65535
+	cmp	w1, w0
+	uxth	w25, w25
+	beq	.L3343
+	cbnz	w26, .L3344
+	ldrh	w0, [x21,2872]
+	cmp	w20, w0, lsl 1
+	bge	.L3515
+.L3344:
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	w1, 5
+	ldrh	w0, [x21,3304]
+	add	w0, w0, 1
+	uxth	w0, w0
+	strh	w0, [x21,3304]
+	bl	zftl_get_gc_node
+	uxth	w2, w0
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L3346
+	add	x3, x23, :lo12:.LANCHOR4
+	ubfiz	x2, x2, 1, 16
+	ldr	w1, [x3,1132]
+	add	w1, w1, 1
+	str	w1, [x3,1132]
+	ldr	x3, [x21,600]
+	ldrh	w2, [x3,x2]
+	ldrh	w3, [x21,3300]
+	cmp	w3, w2
+	bcs	.L3347
+	ldrh	w3, [x21,576]
+	cmp	w1, w3, lsr 4
+	bls	.L3346
+	ldrh	w1, [x21,2874]
+	cmp	w1, w2
+	bls	.L3346
+.L3347:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	ldrb	w2, [x2,3273]
+	bl	gc_add_sblk
+	cbz	w0, .L3348
+	add	x23, x23, :lo12:.LANCHOR4
+	mov	w0, 1
+	str	wzr, [x23,1132]
+	strb	w0, [x23,1130]
+	b	.L3515
+.L3346:
+	add	x0, x19, :lo12:.LANCHOR0
+	strh	wzr, [x0,3304]
+.L3348:
+	cmp	w22, 15
+	mov	w21, 2
+	bls	.L3349
+	cbz	w25, .L3448
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w21, 1
+	ldrh	w1, [x0,2854]
+	ldrh	w0, [x0,3308]
+	cmp	w1, w0
+	bls	.L3349
+.L3448:
+	mov	w21, 2
+.L3349:
 	adrp	x0, .LANCHOR2
-	cmp	w22, 7
-	mov	w24, 3
-	csinc	w24, w24, wzr, hi
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3301
-	ldrh	w5, [x23,124]
-	adrp	x0, .LC278
-	ldrh	w6, [x23,120]
-	add	x0, x0, :lo12:.LC278
-	ldrh	w7, [x23,122]
-	mov	w1, 1705
-	ldrb	w2, [x27,3241]
-	mov	w3, w21
-	str	w28, [sp]
+	tbz	x0, 8, .L3350
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w3, w20
 	mov	w4, w22
+	ldr	x0, [x1,608]
+	ldrb	w2, [x1,3273]
+	mov	w1, 1853
+	ldrh	w5, [x0,124]
+	ldrh	w6, [x0,120]
+	ldrh	w7, [x0,122]
+	ldrh	w0, [x24,80]
+	str	w0, [sp]
+	adrp	x0, .LC274
+	add	x0, x0, :lo12:.LC274
 	bl	printk
-.L3301:
+.L3350:
 	add	x19, x19, :lo12:.LANCHOR0
-	mov	w1, w24
+	mov	w1, w21
 	mov	w2, 1
-	ldrb	w0, [x19,3241]
+	ldrb	w0, [x19,3273]
 	bl	gc_search_src_blk
 	cmp	w0, wzr
-	ble	.L3404
-.L3307:
-	add	x20, x20, :lo12:.LANCHOR4
+	ble	.L3351
+.L3352:
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w0, 1
-	b	.L3425
-.L3299:
-	cmp	w24, 1
-	bne	.L3303
+	b	.L3518
+.L3351:
+	ldrb	w0, [x19,3273]
+	mov	w1, 3
+	mov	w2, 1
+	bl	gc_search_src_blk
+	cmp	w0, wzr
+	bgt	.L3352
+	b	.L3515
+.L3343:
+	cmp	w26, 1
+	bne	.L3353
 	bl	gc_scan_static_data
-	adrp	x23, .LANCHOR8
+	ldr	x0, [x21,608]
+	ldrh	w0, [x0,122]
+	cbz	w0, .L3354
+.L3355:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	add	x23, x23, :lo12:.LANCHOR4
+	strb	w0, [x19,3273]
+	b	.L3518
+.L3354:
 	bl	gc_static_wearleveling
+	cbnz	w0, .L3355
 	bl	gc_block_vpn_scan
-	add	x0, x23, :lo12:.LANCHOR8
-	ldr	w0, [x0,3580]
-	cbz	w0, .L3305
+	cbz	w22, .L3449
+	cmp	w20, w25
+	bcs	.L3358
+	ldrh	w0, [x21,3306]
+	cmp	w20, w0, lsl 1
+	blt	.L3359
+.L3358:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	w1, w20, w25
+	ldrh	w2, [x0,3306]
+	cmp	w1, w2, lsl 1
+	blt	.L3359
+	ldrh	w1, [x0,2854]
+	ldrh	w0, [x0,3308]
+	cmp	w1, w0
+	bcc	.L3449
+.L3359:
+	add	x21, x19, :lo12:.LANCHOR0
+	add	x27, x23, :lo12:.LANCHOR4
+	mov	w28, 1
+	ldr	w1, [x27,1132]
+	ldrh	w0, [x21,576]
+	add	w1, w1, 1
+	strb	w28, [x21,3273]
+	str	w1, [x27,1132]
+	cmp	w1, w0, lsr 5
+	bls	.L3361
+	ldrh	w0, [x21,2854]
+	cmp	w0, w22
+	bls	.L3361
+	mov	w1, 5
+	mov	w0, 0
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	mov	w0, 65535
+	cmp	w1, w0
+	beq	.L3449
+	ubfiz	x1, x1, 1, 16
+	ldr	x0, [x21,600]
+	ldrb	w2, [x21,3276]
+	mov	w24, 16
+	ldrh	w0, [x0,x1]
+	ldrh	w1, [x21,3300]
+	mul	w1, w1, w2
+	cmp	w0, w1
+	bgt	.L3357
+	str	wzr, [x27,1132]
+	mov	w0, w28
+	mov	w1, 2
+	b	.L3508
+.L3361:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x0,2854]
+	ldrh	w1, [x0,3308]
+	cmp	w2, w1
+	bcc	.L3364
+	mov	w0, 1
+	mov	w1, 2
+	mov	w2, w0
+	b	.L3509
+.L3364:
+	ldrh	w24, [x0,2850]
+	cbnz	w24, .L3365
+	ldrh	w0, [x0,2852]
+	cmp	w0, 8
+	bls	.L3357
+.L3365:
+	mov	w0, 1
+	mov	w1, w0
+.L3508:
+	mov	w2, 4
+.L3509:
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	cbnz	w0, .L3352
+	b	.L3449
+.L3353:
+	ldrh	w0, [x21,2872]
+	cmp	w0, w20
+	bcc	.L3515
+.L3449:
+	mov	w24, 16
+.L3357:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldr	w0, [x21,2884]
+	cbz	w0, .L3366
+	mov	w0, 1
 	mov	w1, 5
+	strb	w0, [x21,3273]
 	mov	w0, 0
+	str	wzr, [x21,2884]
 	bl	zftl_get_gc_node
 	uxth	w1, w0
-	cmp	w1, w28
-	beq	.L3306
+	mov	w2, 65535
+	cmp	w1, w2
+	beq	.L3367
 	ubfiz	x1, x1, 1, 16
-	ldr	x2, [x27,72]
+	ldr	x2, [x21,600]
 	ldrh	w1, [x2,x1]
-	cmp	w1, 4
-	bhi	.L3306
-	mov	w1, w24
-	mov	w2, 0
+	cmp	w1, 8
+	bhi	.L3367
+	mov	w2, 1
+	mov	w1, 0
+	str	w2, [x21,2884]
 	bl	gc_add_sblk
-	cbnz	w0, .L3307
-.L3306:
+	cbnz	w0, .L3352
+.L3367:
 	mov	w1, 4
 	mov	w0, 0
 	bl	zftl_get_gc_node
 	uxth	w1, w0
 	mov	w2, 65535
 	cmp	w1, w2
-	beq	.L3308
-	add	x2, x19, :lo12:.LANCHOR0
+	beq	.L3368
+	add	x3, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
-	ldr	x2, [x2,72]
+	ldr	x2, [x3,600]
 	ldrh	w1, [x2,x1]
 	cmp	w1, 4
-	bhi	.L3308
-	mov	w1, 1
-	mov	w2, 0
-	bl	gc_add_sblk
-	cbnz	w0, .L3307
-.L3308:
-	add	x27, x19, :lo12:.LANCHOR0
+	bhi	.L3368
+	mov	w2, 1
 	mov	w1, 0
-	ldr	x0, [x27,3256]
-	bl	_list_get_gc_head_node.isra.5
+	str	w2, [x3,2884]
+	bl	gc_add_sblk
+	cbnz	w0, .L3352
+.L3368:
+	mov	w0, 0
+	bl	zftl_get_gc_node.part.12
 	uxth	w1, w0
 	mov	w2, 65535
 	cmp	w1, w2
-	beq	.L3309
+	beq	.L3366
+	add	x2, x19, :lo12:.LANCHOR0
 	ubfiz	x1, x1, 1, 16
-	ldr	x2, [x27,72]
-	ldrh	w1, [x2,x1]
+	ldr	x3, [x2,600]
+	ldrh	w1, [x3,x1]
 	cmp	w1, 4
-	bhi	.L3309
+	bhi	.L3366
 	mov	w1, 1
+	str	w1, [x2,2884]
 	mov	w2, 0
 	bl	gc_add_sblk
-	cbnz	w0, .L3307
-.L3309:
-	add	x23, x23, :lo12:.LANCHOR8
-	str	wzr, [x23,3580]
-	b	.L3305
-.L3303:
-	ldrh	w0, [x27,2856]
-	cmp	w0, w21
-	bcc	.L3404
-.L3305:
-	add	x1, x19, :lo12:.LANCHOR0
+	cbnz	w0, .L3352
+.L3366:
+	add	x21, x19, :lo12:.LANCHOR0
 	mov	w0, 1
-	ldr	x7, [x1,80]
-	strb	w0, [x1,3241]
+	ldr	x7, [x21,608]
+	strb	w0, [x21,3273]
 	ldrh	w5, [x7,124]
-	cbz	w5, .L3311
-	add	x20, x20, :lo12:.LANCHOR4
-	strb	wzr, [x1,3241]
-	strb	w0, [x20,1098]
+	cbz	w5, .L3369
+	add	x23, x23, :lo12:.LANCHOR4
+	strb	wzr, [x21,3273]
+	strb	w0, [x23,1130]
 	adrp	x0, .LANCHOR2
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3404
+	tbz	x0, 8, .L3370
 	ldrh	w6, [x7,120]
-	adrp	x0, .LC279
+	adrp	x0, .LC275
 	ldrh	w7, [x7,122]
-	mov	w1, 1762
+	mov	w1, 1951
 	mov	w2, 0
-	mov	w3, w21
+	mov	w3, w20
 	mov	w4, w22
-	add	x0, x0, :lo12:.LC279
+	add	x0, x0, :lo12:.LC275
 	bl	printk
-	b	.L3404
-.L3311:
-	ldrh	w3, [x1,2856]
-	cmp	w21, w3
-	bcs	.L3314
-	cmp	w22, 1
-	bls	.L3315
+	b	.L3370
+.L3369:
+	ldrh	w2, [x21,2872]
+	cmp	w20, w2
+	bcs	.L3371
+	cbz	w22, .L3372
 	cmp	w22, 16
-	bls	.L3316
-	ldrh	w2, [x1,2838]
-	ldrh	w1, [x1,3282]
+	bls	.L3373
+	ldrh	w2, [x21,2854]
+	ldrh	w1, [x21,3308]
 	cmp	w2, w1
-	bcs	.L3316
-	mov	w1, 3
-	mov	w2, 16
-	b	.L3423
-.L3316:
-	mov	w1, 2
+	bhi	.L3373
+	mov	w1, w0
+	mov	w2, 4
+	str	x5, [x29,104]
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	ldr	x5, [x29,104]
+	cbnz	w0, .L3374
+	ldrb	w0, [x21,3273]
+	b	.L3517
+.L3374:
+	mov	w1, 5
+	mov	w0, w5
+	bl	zftl_get_gc_node
+	uxth	w2, w0
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L3443
+	add	x3, x23, :lo12:.LANCHOR4
+	ubfiz	x2, x2, 1, 16
+	ldr	w1, [x3,1132]
+	add	w1, w1, 1
+	str	w1, [x3,1132]
+	ldr	x3, [x21,600]
+	ldrh	w2, [x3,x2]
+	ldrh	w3, [x21,3300]
+	cmp	w3, w2
+	bcs	.L3377
+	ldrh	w3, [x21,576]
+	cmp	w1, w3, lsr 4
+	bls	.L3443
+	ldrh	w1, [x21,2874]
+	cmp	w1, w2
+	bls	.L3443
+.L3377:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	ldrb	w2, [x19,3273]
+	bl	gc_add_sblk
 	mov	w0, 1
-	mov	w2, w1
+	str	w0, [x19,2884]
+	add	x0, x23, :lo12:.LANCHOR4
+	str	wzr, [x0,1132]
+	b	.L3443
+.L3373:
+	mov	w0, 1
+	mov	w1, 2
+	mov	w2, w0
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	cbnz	w0, .L3443
 	add	x19, x19, :lo12:.LANCHOR0
+.L3514:
+	ldrb	w0, [x19,3273]
+	mov	w1, 3
+	mov	w2, 2
+.L3511:
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	cbnz	w0, .L3307
-	b	.L3421
-.L3315:
+	b	.L3375
+.L3372:
 	adrp	x0, .LANCHOR2
-	strb	w5, [x1,3241]
+	strb	w22, [x21,3273]
 	ldr	w0, [x0,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3319
-	adrp	x0, .LC279
+	tbz	x0, 8, .L3379
+	adrp	x0, .LC275
 	ldrh	w6, [x7,120]
 	ldrh	w7, [x7,122]
-	add	x0, x0, :lo12:.LC279
-	mov	w1, 1778
-	mov	w2, w5
-	mov	w3, w21
+	add	x0, x0, :lo12:.LC275
+	mov	w1, 1981
+	mov	w2, w22
+	mov	w3, w20
 	mov	w4, w22
+	mov	w5, w22
 	bl	printk
-.L3319:
+.L3379:
 	add	x19, x19, :lo12:.LANCHOR0
-	cmp	w21, 16
-	ldrb	w0, [x19,3241]
-	bls	.L3320
+	cmp	w20, 16
+	ldrb	w0, [x19,3273]
+	bls	.L3380
+.L3517:
 	mov	w1, 3
 	mov	w2, 4
-	b	.L3423
-.L3320:
+	b	.L3511
+.L3380:
 	mov	w1, 1
 	mov	w2, w1
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	cbnz	w0, .L3307
-.L3421:
-	ldrb	w0, [x19,3241]
-	mov	w1, 3
-	mov	w2, 2
-.L3423:
-	bl	gc_search_src_blk
-	uxth	w0, w0
-	b	.L3317
-.L3314:
-	cmp	w24, 1
-	lsl	w0, w3, 1
-	bne	.L3321
-	cmp	w21, w0
-	bge	.L3321
-	add	w0, w26, w25
-	uxth	w0, w0
-	cmp	w0, w22, lsr 1
-	bcs	.L3322
-	ldrh	w3, [x1,2838]
-	ldrh	w2, [x1,3282]
-	cmp	w3, w2
-	bcs	.L3322
-	ldrh	w0, [x1,3280]
-	lsr	w0, w0, 1
-	strh	w0, [x1,2856]
-	b	.L3404
-.L3322:
+	cbnz	w0, .L3443
+	b	.L3514
+.L3371:
+	cmp	w26, 1
+	mov	w1, w24
+	bne	.L3488
+	cmp	w20, w2, lsl 1
+	bge	.L3381
+	cmp	w25, w22, lsr 1
+	bcs	.L3382
+	ldrh	w2, [x21,2854]
+	ldrh	w0, [x21,3308]
+	cmp	w2, w0
+	bcs	.L3382
+	ldrh	w0, [x21,3306]
+	lsr	w0, w0, 2
+	strh	w0, [x21,2872]
+	b	.L3488
+.L3382:
+	mov	w1, 5
+	mov	w0, 0
+	bl	zftl_get_gc_node
+	uxth	w21, w0
+	mov	w1, 65535
+	mov	w27, w21
+	cmp	w21, w1
+	bne	.L3383
+.L3388:
 	cmp	w22, 1
-	bls	.L3323
-	cmp	w22, 16
+	bhi	.L3384
+	b	.L3385
+.L3383:
+	add	x26, x23, :lo12:.LANCHOR4
+	add	x2, x19, :lo12:.LANCHOR0
+	uxtw	x21, w21
+	ldr	w1, [x26,1132]
+	ldrh	w3, [x2,576]
+	add	w1, w1, 1
+	str	w1, [x26,1132]
+	cmp	w1, w3, lsr 4
+	bls	.L3386
+	ldr	x1, [x2,600]
+	str	wzr, [x26,1132]
+	ldrh	w3, [x1,x21,lsl 1]
+	ldrh	w1, [x2,2874]
+	cmp	w3, w1
+	bcs	.L3386
+	mov	w1, 0
+	mov	w2, 1
+	bl	gc_add_sblk
+	cbz	w0, .L3386
+	mov	w0, 1
+	strb	w0, [x26,1130]
+	b	.L3370
+.L3386:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x0, [x1,600]
+	ldrh	w2, [x0,x21,lsl 1]
+	ldrh	w0, [x1,3300]
+	cmp	w2, w0, lsr 1
+	bhi	.L3387
+	mov	w0, w27
+	mov	w1, 1
+	mov	w2, 0
+	bl	gc_add_sblk
+	b	.L3443
+.L3387:
+	ldrh	w3, [x1,2850]
+	ldrh	w0, [x1,2852]
+	add	w0, w3, w0
+	ldrh	w3, [x1,3306]
+	cmp	w0, w3, lsl 1
+	ble	.L3388
+	ldrh	w0, [x1,2874]
+	cmp	w0, w2
+	bcc	.L3385
+	b	.L3388
+.L3384:
+	add	x21, x19, :lo12:.LANCHOR0
 	mov	w0, 1
-	bls	.L3324
+	cmp	w22, 16
+	strb	w0, [x21,3273]
+	bls	.L3389
+	ldrh	w2, [x21,2854]
+	ldrh	w1, [x21,3308]
+	cmp	w2, w1
+	bhi	.L3389
+	mov	w1, w0
+	mov	w2, 4
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	cbnz	w0, .L3390
+	ldrb	w0, [x21,3273]
 	mov	w1, 3
-	mov	w2, 8
-	b	.L3420
-.L3324:
+	mov	w2, 4
+	b	.L3510
+.L3389:
+	mov	w0, 1
 	mov	w1, 2
-	mov	w2, w1
+	mov	w2, w0
 	bl	gc_search_src_blk
 	uxth	w0, w0
-	cbnz	w0, .L3325
+	cbnz	w0, .L3390
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w1, 3
 	mov	w2, 2
-	ldrb	w0, [x0,3241]
-.L3420:
+	ldrb	w0, [x0,3273]
+.L3510:
 	bl	gc_search_src_blk
 	uxth	w0, w0
-.L3325:
+.L3390:
 	add	x19, x19, :lo12:.LANCHOR0
-	b	.L3422
-.L3323:
-	cmp	w21, w0
-	bcs	.L3326
+	cmp	w20, w25, lsr 1
+	ldrh	w1, [x19,3306]
+	bls	.L3512
+	lsr	w1, w1, 2
+	b	.L3513
+.L3385:
+	cmp	w20, w25
 	add	x19, x19, :lo12:.LANCHOR0
-	mov	w0, 0
+	bcs	.L3392
+	mov	w0, 4
+	strb	wzr, [x19,3273]
+	bl	zftl_get_gc_node.part.12
+	uxth	w0, w0
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L3392
+	ubfiz	x0, x0, 1, 16
+	ldr	x1, [x19,600]
+	ldrb	w2, [x19,3276]
+	ldrh	w1, [x1,x0]
+	ldrh	w0, [x19,3300]
+	mul	w0, w0, w2
+	cmp	w1, w0, lsr 1
+	bgt	.L3392
 	mov	w1, 3
-	mov	w2, 8
-	strb	wzr, [x19,3241]
+	mov	w0, 0
+	mov	w2, 4
 	bl	gc_search_src_blk
 	uxth	w0, w0
-.L3422:
-	ldrh	w1, [x19,3280]
-	strh	w1, [x19,2856]
-	b	.L3317
-.L3321:
-	cmp	w21, w0
-	blt	.L3404
-.L3326:
-	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x19,3280]
-	lsr	w0, w0, 1
-	strh	w0, [x19,2856]
-	b	.L3404
-.L3317:
-	cbnz	w0, .L3307
-	b	.L3404
-.L3293:
-	add	x21, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x19,3306]
+.L3512:
+	lsr	w1, w1, 1
+.L3513:
+	strh	w1, [x19,2872]
+	b	.L3375
+.L3392:
+	ldrh	w0, [x19,3306]
+	lsr	w0, w0, 2
+	strh	w0, [x19,2872]
+	b	.L3370
+.L3381:
+	ldrh	w0, [x21,3306]
+	mov	w24, w5
+	lsr	w0, w0, 2
+	strh	w0, [x21,2872]
+	b	.L3370
+.L3375:
+	mov	w1, w24
+	cbz	w0, .L3488
+.L3443:
+	add	x23, x23, :lo12:.LANCHOR4
+	mov	w0, 1
+	strb	w0, [x23,1130]
+	b	.L3370
+.L3337:
+	add	x20, x19, :lo12:.LANCHOR0
 	mov	w0, 65535
-	ldrh	w1, [x21,2888]
+	ldrh	w1, [x20,2896]
 	cmp	w1, w0
-	bne	.L3327
+	bne	.L3395
 	bl	gc_get_src_blk
-	strh	w0, [x21,2888]
-.L3327:
+	strh	w0, [x20,2896]
+.L3395:
 	add	x0, x19, :lo12:.LANCHOR0
 	mov	w2, 65535
-	add	x1, x0, 2888
-	ldrh	w3, [x0,2888]
+	add	x1, x0, 2896
+	ldrh	w3, [x0,2896]
 	cmp	w3, w2
-	beq	.L3328
+	beq	.L3516
 	ldrh	w5, [x1,56]
 	uxtw	x4, w3
-	ldr	x2, [x0,64]
+	ldr	x2, [x0,584]
 	add	x2, x2, x4, lsl 2
-	cbz	w5, .L3330
+	cbz	w5, .L3398
 	mov	x0, 0
-.L3329:
+.L3397:
 	cmp	w5, w0, uxth
-	bls	.L3330
+	bls	.L3398
 	add	x0, x0, 1
 	add	x6, x1, x0, lsl 1
 	ldrh	w6, [x6,56]
 	cmp	w6, w3
-	bne	.L3329
-.L3335:
+	bne	.L3397
+.L3403:
 	add	x19, x19, :lo12:.LANCHOR0
 	mov	w0, -1
-	strh	w0, [x19,2888]
-	b	.L3404
-.L3330:
+	strh	w0, [x19,2896]
+	b	.L3515
+.L3398:
 	ldrb	w0, [x2,2]
 	tst	w0, 192
-	beq	.L3378
+	beq	.L3456
 	and	w0, w0, 224
 	cmp	w0, 224
-	bne	.L3332
-.L3378:
+	bne	.L3400
+.L3456:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x0, [x0,72]
+	ldr	x0, [x0,600]
 	ldrh	w0, [x0,x4,lsl 1]
-	cbz	w0, .L3335
+	cbz	w0, .L3403
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 1972
-	add	x1, x1, 808
+	mov	w2, 2214
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
 	bl	printk
-	b	.L3335
-.L3332:
-	add	x20, x20, :lo12:.LANCHOR4
+	bl	dump_stack
+	b	.L3403
+.L3400:
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w0, 2
-.L3425:
-	strb	w0, [x20,1098]
-	b	.L3404
-.L3328:
-	add	x20, x20, :lo12:.LANCHOR4
-	strb	wzr, [x20,1098]
-	b	.L3404
-.L3294:
+	b	.L3518
+.L3338:
 	bl	gc_scan_src_blk
 	cmn	w0, #1
-	bne	.L3336
-	add	x20, x20, :lo12:.LANCHOR4
+	bne	.L3404
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w0, 3
-	b	.L3425
-.L3336:
+.L3518:
+	strb	w0, [x23,1130]
+	b	.L3515
+.L3404:
 	add	x1, x19, :lo12:.LANCHOR0
 	mov	w3, 65535
-	ldrh	w0, [x1,2888]
+	ldrh	w0, [x1,2896]
 	cmp	w0, w3
-	beq	.L3307
-	ldrh	w3, [x1,2912]
-	add	x20, x20, :lo12:.LANCHOR4
-	cbz	w3, .L3337
+	beq	.L3352
+	ldrh	w3, [x1,2920]
+	add	x23, x23, :lo12:.LANCHOR4
+	cbz	w3, .L3405
 	mov	w0, 4
-	strh	wzr, [x1,2914]
-	strb	w0, [x20,1098]
-	b	.L3404
-.L3337:
+	strh	wzr, [x1,2922]
+	strb	w0, [x23,1130]
+	b	.L3515
+.L3405:
 	ubfiz	x0, x0, 1, 16
-	ldr	x1, [x1,72]
+	ldr	x1, [x1,600]
 	mov	w2, 1
-	strb	w2, [x20,1098]
+	strb	w2, [x23,1130]
 	ldrh	w0, [x1,x0]
-	cbz	w0, .L3338
+	cbz	w0, .L3406
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 2242
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 808
-	mov	w2, 2000
 	bl	printk
-.L3338:
+	bl	dump_stack
+.L3406:
 	add	x20, x19, :lo12:.LANCHOR0
-	add	x22, x20, 2888
-	ldrh	w0, [x20,2888]
-	ldr	x2, [x20,72]
-	ubfiz	x1, x0, 1, 16
-	ldrh	w21, [x2,x1]
-	cbnz	w21, .L3335
+	add	x21, x20, 2896
+	ldrh	w0, [x20,2896]
 	bl	ftl_free_sblk
-	ldrh	w1, [x20,2888]
-	ldr	x0, [x20,72]
-	strh	w21, [x0,x1,lsl 1]
-	ldrh	w1, [x22,30]
-	add	w1, w1, 1
-	uxth	w1, w1
-	cmp	w1, 8
-	bhi	.L3340
-	strh	w1, [x22,30]
-	b	.L3335
-.L3340:
-	strh	w21, [x22,30]
+	ldr	x0, [x20,600]
+	ldrh	w1, [x20,2896]
+	strh	wzr, [x0,x1,lsl 1]
+	ldrh	w0, [x21,30]
+	add	w0, w0, 1
+	uxth	w0, w0
+	cmp	w0, 8
+	bhi	.L3407
+	strh	w0, [x21,30]
+	b	.L3403
+.L3407:
+	strh	wzr, [x21,30]
 	bl	ftl_flush
 	bl	pm_flush
 	bl	ftl_ext_info_flush
-	mov	w0, w21
+	mov	w0, 0
 	bl	ftl_info_flush
-	b	.L3335
-.L3295:
-	add	x22, x19, :lo12:.LANCHOR0
-.L3405:
+	b	.L3403
+.L3339:
+	add	x21, x19, :lo12:.LANCHOR0
+.L3489:
 	bl	gc_scan_src_blk_one_page
-	ldrh	w2, [x22,2890]
-	add	x0, x22, 2888
-	ldrh	w1, [x22,3276]
+	ldrh	w2, [x21,2898]
+	add	x0, x21, 2896
+	ldrh	w1, [x21,3300]
 	cmp	w2, w1
-	bcs	.L3341
-	cmp	w21, 7
-	bls	.L3405
-	b	.L3404
-.L3341:
+	bcs	.L3409
+	cmp	w20, 7
+	bls	.L3489
+	b	.L3515
+.L3409:
 	ldrh	w3, [x0,24]
 	adrp	x2, .LANCHOR2
-	cbz	w3, .L3342
-	add	x20, x20, :lo12:.LANCHOR4
+	cbz	w3, .L3410
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w1, 4
 	strh	wzr, [x0,26]
-	strb	w1, [x20,1098]
+	strb	w1, [x23,1130]
 	ldr	w1, [x2,#:lo12:.LANCHOR2]
-	tbz	x1, 8, .L3343
+	tbz	x1, 8, .L3411
 	ldrh	w1, [x0]
-	adrp	x0, .LC280
-	ldr	x4, [x22,72]
-	add	x0, x0, :lo12:.LC280
+	adrp	x0, .LC276
+	ldr	x4, [x21,600]
+	add	x0, x0, :lo12:.LC276
 	ubfiz	x2, x1, 1, 16
 	ldrh	w2, [x4,x2]
 	bl	printk
-.L3343:
+.L3411:
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x0,2888]
-	ldr	x1, [x0,72]
-	ldrh	w0, [x0,2912]
+	ldrh	w2, [x0,2896]
+	ldr	x1, [x0,600]
+	ldrh	w0, [x0,2920]
 	ldrh	w1, [x1,x2,lsl 1]
 	cmp	w1, w0
-	beq	.L3344
+	beq	.L3412
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 2276
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 808
-	mov	w2, 2034
 	bl	printk
-.L3344:
+	bl	dump_stack
+.L3412:
 	add	x19, x19, :lo12:.LANCHOR0
-	ldrh	w1, [x19,2888]
-	ldr	x0, [x19,72]
-	ldrh	w2, [x19,2912]
+	ldrh	w1, [x19,2896]
+	ldr	x0, [x19,600]
+	ldrh	w2, [x19,2920]
 	strh	w2, [x0,x1,lsl 1]
-	b	.L3404
-.L3342:
-	add	x20, x20, :lo12:.LANCHOR4
+	b	.L3515
+.L3410:
+	add	x23, x23, :lo12:.LANCHOR4
 	ldrh	w1, [x0]
 	mov	w0, 1
-	ldr	x21, [x22,64]
-	add	x21, x21, x1, uxth 2
-	strb	w0, [x20,1098]
+	ldr	x20, [x21,584]
+	add	x20, x20, x1, uxth 2
+	strb	w0, [x23,1130]
 	ldr	w0, [x2,#:lo12:.LANCHOR2]
-	tbz	x0, 8, .L3345
-	ldrb	w2, [x21,2]
-	adrp	x0, .LC281
-	add	x0, x0, :lo12:.LC281
+	tbz	x0, 8, .L3413
+	ldrb	w2, [x20,2]
+	adrp	x0, .LC277
+	add	x0, x0, :lo12:.LC277
 	ubfx	x2, x2, 5, 3
 	bl	printk
-.L3345:
-	ldrb	w0, [x21,2]
+.L3413:
+	ldrb	w0, [x20,2]
 	tst	w0, 192
-	beq	.L3379
+	beq	.L3457
 	and	w0, w0, 224
 	cmp	w0, 224
-	bne	.L3346
-.L3379:
+	bne	.L3414
+.L3457:
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 2286
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 808
-	mov	w2, 2044
 	bl	printk
-.L3346:
+	bl	dump_stack
+.L3414:
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x19, 2888
-	ldrh	w0, [x19,2888]
+	add	x20, x19, 2896
+	ldrh	w0, [x19,2896]
 	bl	ftl_free_sblk
 	mov	w0, -1
-	strh	w0, [x19,2888]
+	strh	w0, [x19,2896]
 	ldrh	w0, [x20,30]
 	add	w0, w0, 1
 	uxth	w0, w0
 	cmp	w0, 8
-	bhi	.L3348
+	bhi	.L3416
 	strh	w0, [x20,30]
-	b	.L3404
-.L3348:
+	b	.L3515
+.L3416:
 	strh	wzr, [x20,30]
-	b	.L3426
-.L3296:
-	cbnz	w24, .L3349
+	b	.L3519
+.L3340:
+	cbnz	w26, .L3417
 	add	x0, x19, :lo12:.LANCHOR0
-	ldrh	w0, [x0,2856]
-	cmp	w0, w21
-	bcc	.L3404
-.L3349:
-	ldrh	w1, [x23,80]
+	ldrh	w0, [x0,2872]
+	cmp	w0, w20
+	bcc	.L3515
+.L3417:
+	ldrh	w1, [x24,80]
 	mov	w0, 65535
 	cmp	w1, w0
-	bne	.L3350
+	bne	.L3418
 	add	x22, x19, :lo12:.LANCHOR0
-	ldrb	w0, [x22,3241]
-	cmp	w0, 1
-	bne	.L3350
+	ldrb	w21, [x22,3273]
+	cmp	w21, 1
+	bne	.L3418
 	bl	ftl_flush
-	ldrh	w0, [x22,2832]
-	cbnz	w0, .L3424
-	ldrh	w0, [x22,2830]
-.L3424:
-	lsr	w0, w0, 1
+	ldrh	w0, [x22,3214]
+	cbz	w0, .L3419
+	mov	w0, w21
+.L3419:
 	mov	w1, 5
-	bl	zftl_get_free_sblk
-	uxth	w24, w0
+	bl	zftl_gc_get_free_sblk
+	uxth	w20, w0
 	mov	w0, 65535
-	mov	w22, w24
-	cmp	w24, w0
-	beq	.L3353
+	cmp	w20, w0
+	beq	.L3421
 	add	x0, x19, :lo12:.LANCHOR0
-	ldr	x21, [x0,64]
-	add	x21, x21, x24, uxth 2
+	ldr	x21, [x0,584]
+	add	x21, x21, x20, uxth 2
 	ldrb	w0, [x21,2]
 	tst	w0, 224
-	beq	.L3354
+	beq	.L3422
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 2315
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 808
-	mov	w2, 2069
 	bl	printk
-.L3354:
+	bl	dump_stack
+.L3422:
 	ldrb	w0, [x21,2]
 	mov	w1, 5
 	bfi	w0, w1, 5, 3
 	orr	w0, w0, 16
 	strb	w0, [x21,2]
-.L3373:
-	mov	w0, w22
+.L3444:
+	mov	w0, w20
 	mov	w1, 1
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR4
+	add	x23, x23, :lo12:.LANCHOR4
 	bl	ftl_erase_sblk
 	mov	w0, 5
-	add	x1, x23, 96
-	strb	w0, [x23,84]
-	mov	w0, w22
+	add	x1, x24, 96
+	strb	w0, [x24,84]
+	mov	w0, w20
 	bl	ftl_get_blk_list_in_sblk
 	uxtb	w0, w0
-	ldrh	w1, [x19,3276]
-	strb	w0, [x23,89]
-	ldrb	w2, [x19,3244]
+	ldrh	w1, [x19,3300]
+	strb	w0, [x24,89]
+	ldrb	w2, [x19,3276]
 	mul	w0, w0, w1
-	strh	w0, [x23,86]
+	strh	w0, [x24,86]
 	mov	w1, 255
-	ldrh	w0, [x19,3242]
-	strh	w22, [x23,80]
-	strh	wzr, [x23,82]
+	ldrh	w0, [x19,3274]
+	strh	w20, [x24,80]
+	strh	wzr, [x24,82]
 	mul	w2, w0, w2
-	ldr	x0, [x20,1104]
-	strb	wzr, [x23,85]
+	ldr	x0, [x23,1136]
+	strb	wzr, [x24,85]
 	lsl	w2, w2, 2
-	strh	wzr, [x23,90]
+	strh	wzr, [x24,90]
 	bl	ftl_memset
-	ldrh	w0, [x19,3242]
+	ldrh	w0, [x19,3274]
 	mov	w1, 255
-	ldrb	w2, [x19,3244]
+	ldrb	w2, [x19,3276]
 	mul	w2, w0, w2
-	ldr	x0, [x20,1112]
+	ldr	x0, [x23,1144]
 	lsl	w2, w2, 2
 	bl	ftl_memset
-	ldrh	w3, [x19,3242]
+	ldrh	w3, [x19,3274]
 	mov	w1, 255
-	ldrb	w2, [x19,3244]
-	ldr	x0, [x19,3232]
+	ldrb	w2, [x19,3276]
+	ldr	x0, [x19,3264]
 	mul	w2, w3, w2
 	bl	ftl_memset
-	ldr	x0, [x19,80]
+	ldr	x0, [x19,608]
 	mov	w1, -1
-	str	w24, [x0,132]
+	str	w20, [x0,132]
 	strh	w1, [x0,128]
 	strh	w1, [x0,130]
 	bl	pm_flush
 	bl	ftl_ext_info_flush
-	strh	wzr, [x19,2944]
-	ldr	x0, [x19,2848]
-	strh	w22, [x0,126]
+	strh	wzr, [x19,2952]
+	ldr	x0, [x19,2864]
+	strh	w20, [x0,126]
 	mov	w0, -1
-	str	w0, [x19,3208]
+	str	w0, [x19,3220]
 	mov	w0, 0
-	strh	wzr, [x19,3202]
-	strh	wzr, [x19,3204]
-	strh	wzr, [x19,3206]
+	strh	wzr, [x19,3210]
+	strh	wzr, [x19,3212]
+	strh	wzr, [x19,3216]
 	bl	ftl_info_flush
-	b	.L3404
-.L3350:
-	cmp	w24, 1
-	mov	w22, 4
-	csinc	w22, w22, wzr, eq
-	cmp	w21, 15
-	add	w0, w22, 4
-	add	x21, x19, :lo12:.LANCHOR0
-	csel	w22, w0, w22, ls
-.L3357:
-	sub	w22, w22, #1
-	uxtb	w22, w22
-	cmp	w22, 255
-	beq	.L3404
+	b	.L3515
+.L3418:
+	cmp	w26, 1
+	mov	w21, 4
+	csinc	w21, w21, wzr, eq
+	cmp	w20, 15
+	add	w0, w21, 4
+	add	x20, x19, :lo12:.LANCHOR0
+	csel	w21, w0, w21, ls
+.L3425:
+	sub	w21, w21, #1
+	uxtb	w21, w21
+	cmp	w21, 255
+	beq	.L3515
 	bl	gc_do_copy_back
-	ldrb	w0, [x21,3241]
-	cbnz	w0, .L3358
-	ldrb	w0, [x21,2818]
+	ldrb	w0, [x20,3273]
+	cbnz	w0, .L3426
+	ldrb	w0, [x20,2834]
 	cmp	w0, 3
-	bhi	.L3359
+	bhi	.L3427
 	bl	ftl_write_commit
-.L3359:
-	ldrh	w1, [x21,2914]
-	ldrh	w0, [x21,2912]
+.L3427:
+	ldrh	w1, [x20,2922]
+	ldrh	w0, [x20,2920]
 	cmp	w1, w0
-	bcc	.L3357
-	add	x20, x20, :lo12:.LANCHOR4
+	bcc	.L3425
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w0, 1
-	strb	w0, [x20,1098]
+	strb	w0, [x23,1130]
 	bl	ftl_write_commit
 	bl	ftl_flush
-	ldrh	w1, [x21,2888]
-	ldr	x0, [x21,72]
+	ldrh	w1, [x20,2896]
+	ldr	x0, [x20,600]
 	ldrh	w0, [x0,x1,lsl 1]
-	cbz	w0, .L3361
+	cbz	w0, .L3429
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 2390
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
-	add	x1, x1, 808
-	mov	w2, 2144
 	bl	printk
-.L3361:
-	add	x20, x19, :lo12:.LANCHOR0
-	add	x21, x20, 2888
-	ldrh	w1, [x20,2888]
-	ldr	x3, [x20,72]
-	ubfiz	x0, x1, 1, 16
-	ldrh	w2, [x3,x0]
-	cbnz	w2, .L3362
-	strh	w2, [x3,x0]
-	ldrh	w0, [x20,2888]
+	bl	dump_stack
+.L3429:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x1,2896]
+	ldr	x3, [x1,600]
+	ubfiz	x2, x0, 1, 16
+	ldrh	w4, [x3,x2]
+	cbnz	w4, .L3430
+	strh	w4, [x3,x2]
+	ldrh	w0, [x1,2896]
 	bl	ftl_free_sblk
-	b	.L3335
-.L3362:
-	ldrh	w3, [x21,24]
-	adrp	x0, .LC282
-	add	x0, x0, :lo12:.LC282
-	bl	printk
-	ldrh	w3, [x21,24]
-	adrp	x0, .LC283
-	ldr	x1, [x20,3216]
-	add	x0, x0, :lo12:.LC283
-	mov	w2, 4
-	add	w3, w3, 1
-	bl	rknand_print_hex
-	ldrh	w1, [x20,2888]
-	adrp	x0, .LC284
-	ldr	x3, [x20,72]
-	add	x0, x0, :lo12:.LC284
-	ubfiz	x2, x1, 1, 16
-	ldrh	w4, [x21,26]
-	ldrh	w5, [x21,28]
-	ldrh	w2, [x3,x2]
-	ldrh	w3, [x21,24]
-	bl	printk
-	ldrh	w0, [x20,2888]
-	mov	x1, 0
-	bl	ftl_sblk_dump
-	bl	gc_scan_src_blk
-	ldrh	w1, [x20,2888]
-	adrp	x0, .LC285
-	ldr	x3, [x20,72]
-	add	x0, x0, :lo12:.LC285
-	ubfiz	x2, x1, 1, 16
-	ldrh	w2, [x3,x2]
-	ldrh	w3, [x21,24]
-	bl	printk
-	adrp	x0, .LC286
-	ldr	x1, [x20,3216]
-	ldrh	w3, [x21,24]
-	add	x0, x0, :lo12:.LC286
-	mov	w2, 4
-	bl	rknand_print_hex
-	b	.L3335
-.L3358:
-	add	x0, x21, 2888
-	ldrh	w1, [x0,318]
-	cbz	w1, .L3363
-	strh	wzr, [x0,318]
-	ldr	w0, [x0,320]
+	b	.L3403
+.L3430:
+	mov	w1, 0
+	mov	w2, 1
+	bl	gc_add_sblk
+	b	.L3403
+.L3426:
+	add	x0, x20, 2896
+	ldrh	w1, [x0,320]
+	cbz	w1, .L3431
+	strh	wzr, [x0,320]
+	ldr	w0, [x0,324]
 	cmn	w0, #1
-	beq	.L3364
+	beq	.L3432
 	bl	ftl_mask_bad_block
-.L3364:
-	add	x21, x19, :lo12:.LANCHOR0
-	ldr	x0, [x21,80]
-	str	wzr, [x21,3208]
-	strh	wzr, [x21,2944]
+.L3432:
+	add	x20, x19, :lo12:.LANCHOR0
+	ldr	x0, [x20,608]
+	str	wzr, [x20,3220]
+	strh	wzr, [x20,2952]
 	ldrh	w0, [x0,80]
 	bl	ftl_free_sblk
-	ldr	x1, [x21,80]
+	ldr	x1, [x20,608]
 	mov	w0, -1
-	ldr	x2, [x21,2848]
+	ldr	x2, [x20,2864]
 	strh	w0, [x1,80]
 	strh	w0, [x2,126]
 	strh	w0, [x1,130]
-	ldr	x0, [x21,2896]
-	cbz	x0, .L3365
+	ldr	x0, [x20,2904]
+	cbz	x0, .L3433
 	bl	buf_free
-.L3365:
+.L3433:
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR4
-	str	xzr, [x19,2896]
+	add	x23, x23, :lo12:.LANCHOR4
+	str	xzr, [x19,2904]
 	bl	flt_sys_flush
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2177
-	add	x1, x1, 808
+	mov	w2, 2426
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
-	strb	wzr, [x20,1098]
+	strb	wzr, [x23,1130]
 	bl	printk
-	b	.L3404
-.L3363:
-	ldrh	w1, [x23,86]
+	bl	dump_stack
+	b	.L3515
+.L3431:
+	ldrh	w1, [x24,86]
 	cmp	w1, 1
-	bls	.L3366
+	bls	.L3434
 	ldrh	w2, [x0,26]
 	ldrh	w1, [x0,24]
 	cmp	w2, w1
-	bcc	.L3357
-	add	x20, x20, :lo12:.LANCHOR4
+	bcc	.L3425
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w1, 1
-	strb	w1, [x20,1098]
+	strb	w1, [x23,1130]
 	ldrh	w1, [x0,56]
 	add	w2, w1, 1
 	add	x1, x0, x1, sxtw 1
@@ -21959,15 +21887,15 @@ zftl_do_gc:
 	strh	w2, [x1,58]
 	mov	w1, -1
 	strh	w1, [x0]
-	b	.L3404
-.L3366:
-	add	x20, x20, :lo12:.LANCHOR4
+	b	.L3515
+.L3434:
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w1, 5
 	ldrh	w2, [x0,26]
-	strb	w1, [x20,1098]
+	strb	w1, [x23,1130]
 	ldrh	w1, [x0,24]
 	cmp	w2, w1
-	bcc	.L3367
+	bcc	.L3435
 	ldrh	w1, [x0,56]
 	add	w2, w1, 1
 	add	x1, x0, x1, sxtw 1
@@ -21976,114 +21904,122 @@ zftl_do_gc:
 	strh	w2, [x1,58]
 	mov	w1, -1
 	strh	w1, [x0]
-.L3367:
+.L3435:
 	add	x20, x19, :lo12:.LANCHOR0
 	bl	ftl_flush
 	bl	sblk_wait_write_queue_completed
 	bl	gc_write_completed
-	ldr	x0, [x20,80]
-	ldrh	w1, [x23,80]
+	ldr	x0, [x20,608]
+	ldrh	w1, [x24,80]
 	strh	w1, [x0,128]
 	bl	pm_flush
 	bl	ftl_ext_info_flush
-	strh	wzr, [x20,2904]
-	ldrb	w2, [x20,3225]
-	ldrh	w1, [x20,3276]
-	strh	w1, [x20,2906]
+	strh	wzr, [x20,2912]
+	ldrb	w2, [x20,3257]
+	ldrh	w1, [x20,3300]
+	strh	w1, [x20,2914]
 	cmp	w2, 2
-	strh	w2, [x20,2908]
-	bne	.L3368
+	strh	w2, [x20,2916]
+	bne	.L3437
 	lsl	w1, w1, 1
-	strh	w1, [x20,2906]
+	strh	w1, [x20,2914]
+	ldrb	w1, [x20,3348]
+	cbnz	w1, .L3437
 	mov	w1, 1
-	strh	w1, [x20,2908]
-.L3368:
+	strh	w1, [x20,2916]
+.L3437:
 	add	x19, x19, :lo12:.LANCHOR0
-	strh	wzr, [x19,2910]
-	b	.L3404
-.L3374:
-	mov	w22, 0
-	add	x25, x19, :lo12:.LANCHOR0
-.L3297:
+	strh	wzr, [x19,2918]
+	b	.L3515
+.L3446:
+	mov	w21, 0
+	add	x24, x19, :lo12:.LANCHOR0
+.L3341:
 	bl	gc_check_data_one_wl
-	cbz	w0, .L3370
+	cbz	w0, .L3440
 	add	x19, x19, :lo12:.LANCHOR0
-	add	x20, x20, :lo12:.LANCHOR4
-	ldr	x0, [x19,80]
-	strh	wzr, [x19,2944]
+	add	x23, x23, :lo12:.LANCHOR4
+	ldr	x0, [x19,608]
+	strh	wzr, [x19,2952]
 	ldrh	w0, [x0,80]
 	bl	ftl_free_sblk
-	ldr	x1, [x19,80]
+	ldr	x1, [x19,608]
 	mov	w0, -1
-	ldr	x2, [x19,2848]
+	ldr	x2, [x19,2864]
 	strh	w0, [x1,80]
 	strh	w0, [x2,126]
 	strh	w0, [x1,130]
-	ldr	x0, [x19,2896]
+	ldr	x0, [x19,2904]
 	bl	buf_free
-	str	xzr, [x19,2896]
-	strb	wzr, [x20,1098]
-.L3426:
+	str	xzr, [x19,2904]
+	strb	wzr, [x23,1130]
+.L3519:
 	bl	flt_sys_flush
-	b	.L3404
-.L3370:
-	ldrh	w1, [x25,2904]
-	ldrh	w0, [x25,2906]
+	b	.L3515
+.L3440:
+	ldrh	w1, [x24,2912]
+	ldrh	w0, [x24,2914]
 	cmp	w1, w0
-	bcc	.L3371
-	add	x20, x20, :lo12:.LANCHOR4
+	bcc	.L3441
+	add	x23, x23, :lo12:.LANCHOR4
 	mov	w0, 6
-	strb	w0, [x20,1098]
-	ldr	x0, [x25,2896]
+	strb	w0, [x23,1130]
+	ldr	x0, [x24,2904]
 	bl	buf_free
-	str	xzr, [x25,2896]
-	b	.L3404
-.L3371:
-	cmp	w21, 7
-	bls	.L3297
-	cmp	w24, 1
-	bne	.L3404
-	add	w22, w22, 1
-	uxtb	w22, w22
-	cmp	w22, 4
-	bls	.L3297
-	b	.L3404
-.L3298:
+	str	xzr, [x24,2904]
+	b	.L3515
+.L3441:
+	cmp	w20, 15
+	bls	.L3341
+	cmp	w26, 1
+	bne	.L3515
+	add	w21, w21, 1
+	uxtb	w21, w21
+	cmp	w21, 4
+	bls	.L3341
+	b	.L3515
+.L3342:
 	bl	gc_update_l2p_map_new
-	mov	w21, -1
+	mov	w20, -1
 	bl	gc_free_src_blk
 	add	x19, x19, :lo12:.LANCHOR0
 	bl	ftl_flush
-	add	x20, x20, :lo12:.LANCHOR4
 	bl	pm_flush
-	strh	w21, [x23,80]
+	strh	w20, [x24,80]
 	bl	ftl_ext_info_flush
-	ldr	x0, [x19,2848]
-	strh	w21, [x0,126]
+	ldr	x0, [x19,2864]
+	strh	w20, [x0,126]
 	mov	w0, 0
 	bl	ftl_info_flush
-	strb	wzr, [x20,1098]
-	bl	print_ftl_debug_info
-	b	.L3404
-.L3353:
+.L3516:
+	add	x23, x23, :lo12:.LANCHOR4
+	strb	wzr, [x23,1130]
+.L3515:
+	mov	w1, 16
+	b	.L3488
+.L3370:
+	mov	w1, w24
+	b	.L3488
+.L3421:
 	adrp	x1, .LANCHOR3
 	adrp	x0, .LC0
 	add	x1, x1, :lo12:.LANCHOR3
-	mov	w2, 2075
-	add	x1, x1, 808
+	mov	w2, 2321
+	add	x1, x1, 800
 	add	x0, x0, :lo12:.LC0
 	bl	printk
-	b	.L3373
-.L3404:
+	bl	dump_stack
+	b	.L3444
+.L3488:
 	sub	sp, x29, #16
-	mov	w0, 16
+	mov	w0, w1
 	ldp	x19, x20, [sp,32]
 	ldp	x21, x22, [sp,48]
 	ldp	x23, x24, [sp,64]
 	ldp	x25, x26, [sp,80]
 	ldp	x27, x28, [sp,96]
 	ldp	x29, x30, [sp,16]
-	add	sp, sp, 112
+	add	sp, sp, 128
 	ret
 	.size	zftl_do_gc, .-zftl_do_gc
 	.align	2
@@ -22103,64 +22039,64 @@ zftl_write:
 	stp	x21, x22, [sp,32]
 	mov	w28, w1
 	mov	x25, x3
-	tbz	x0, 12, .L3428
-	adrp	x0, .LC287
+	tbz	x0, 12, .L3521
+	adrp	x0, .LC278
 	mov	w1, w19
-	add	x0, x0, :lo12:.LC287
+	add	x0, x0, :lo12:.LC278
 	mov	w2, w28
 	mov	w3, w23
 	bl	printk
-.L3428:
-	cbnz	w19, .L3429
-	adrp	x0, .LANCHOR0+4
+.L3521:
+	cbnz	w19, .L3522
+	adrp	x0, .LANCHOR0+520
 	mov	w19, 24576
-	ldr	w2, [x0,#:lo12:.LANCHOR0+4]
-	b	.L3430
-.L3429:
+	ldr	w2, [x0,#:lo12:.LANCHOR0+520]
+	b	.L3523
+.L3522:
 	cmp	w19, 3
 	mov	w0, -1
-	bhi	.L3431
+	bhi	.L3524
 	lsl	w19, w19, 13
 	mov	w2, 8192
-.L3430:
+.L3523:
 	add	w1, w28, w23
 	mov	w0, -1
 	cmp	w1, w2
-	bhi	.L3431
+	bhi	.L3524
 	add	w28, w19, w28
 	adrp	x19, .LANCHOR0
 	add	x0, x19, :lo12:.LANCHOR0
 	sub	w22, w23, #1
 	add	w22, w22, w28
 	add	w26, w28, w23
-	ldrb	w0, [x0,2816]
+	ldrb	w0, [x0,2832]
 	udiv	w24, w28, w0
 	mov	w21, w24
 	udiv	w22, w22, w0
 	sub	w20, w22, w24
 	add	w20, w20, 1
-.L3432:
-	cbz	w20, .L3451
+.L3525:
+	cbz	w20, .L3544
 	mov	w0, 0
 	bl	buf_alloc
 	mov	x27, x0
-	cbnz	x0, .L3433
+	cbnz	x0, .L3526
 	bl	ftl_write_commit
-	b	.L3432
-.L3433:
+	b	.L3525
+.L3526:
 	strb	wzr, [x0,57]
 	add	x0, x19, :lo12:.LANCHOR0
 	cmp	w21, w24
-	ldrb	w4, [x0,2816]
+	ldrb	w4, [x0,2832]
 	cset	w0, eq
 	strb	w4, [x27,56]
 	cmp	w21, w22
-	beq	.L3435
-	cbz	w0, .L3436
-	b	.L3445
-.L3435:
-	cbz	w0, .L3437
-.L3445:
+	beq	.L3528
+	cbz	w0, .L3529
+	b	.L3538
+.L3528:
+	cbz	w0, .L3530
+.L3538:
 	udiv	w0, w28, w4
 	msub	w0, w0, w4, w28
 	uxtb	w0, w0
@@ -22169,12 +22105,12 @@ zftl_write:
 	uxtb	w4, w4
 	cmp	w4, w23
 	csel	w4, w23, w4, hi
-	b	.L3449
-.L3437:
+	b	.L3542
+.L3530:
 	msub	w4, w4, w21, w26
-.L3449:
+.L3542:
 	strb	w4, [x27,56]
-.L3436:
+.L3529:
 	ldrb	w1, [x27,57]
 	sub	w20, w20, #1
 	ldr	x0, [x27,8]
@@ -22186,7 +22122,7 @@ zftl_write:
 	str	w21, [x27,36]
 	add	x0, x19, :lo12:.LANCHOR0
 	add	w21, w21, 1
-	ldr	x1, [x0,2848]
+	ldr	x1, [x0,2864]
 	ldr	w0, [x1,8]
 	add	w2, w0, 1
 	str	w2, [x1,8]
@@ -22195,27 +22131,27 @@ zftl_write:
 	bl	ftl_write_buf
 	ldrb	w0, [x27,56]
 	add	x25, x25, x0, lsl 9
-	b	.L3432
-.L3451:
+	b	.L3525
+.L3544:
 	bl	ftl_write_commit
 	mov	w0, w20
-.L3450:
+.L3543:
 	mov	w1, 1
 	bl	zftl_do_gc
 	add	x1, x19, :lo12:.LANCHOR0
-	ldrh	w2, [x1,2828]
-	ldrh	w0, [x1,2832]
+	ldrh	w2, [x1,2844]
+	ldrh	w0, [x1,2848]
 	add	w0, w2, w0
 	cmp	w0, 7
-	bgt	.L3452
+	bgt	.L3545
 	mov	w0, 0
-	b	.L3450
-.L3452:
+	b	.L3543
+.L3545:
 	bl	timer_get_time
-	adrp	x1, .LANCHOR8+3584
-	str	w0, [x1,#:lo12:.LANCHOR8+3584]
+	adrp	x1, .LANCHOR7-76
+	str	w0, [x1,#:lo12:.LANCHOR7-76]
 	mov	w0, 0
-.L3431:
+.L3524:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -22254,7 +22190,246 @@ zftl_sys_write:
 	bl	zftl_write
 	ldp	x29, x30, [sp], 16
 	ret
-	.size	zftl_sys_write, .-zftl_sys_write
+	.size	zftl_sys_write, .-zftl_sys_write
+	.align	2
+	.global	zftl_discard
+	.type	zftl_discard, %function
+zftl_discard:
+	stp	x29, x30, [sp, -128]!
+	add	w2, w0, w1
+	mov	w4, -1
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	w19, w1
+	add	x1, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w1, [x1,520]
+	cmp	w2, w1
+	bhi	.L3549
+	adrp	x23, .LANCHOR7
+	add	w24, w0, 24576
+	add	x0, x23, :lo12:.LANCHOR7
+	adrp	x25, .LANCHOR2
+	ldr	w1, [x0,-72]
+	add	w1, w19, w1
+	str	w1, [x0,-72]
+	ldr	w0, [x25,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L3550
+	adrp	x0, .LC279
+	mov	w2, w24
+	add	x0, x0, :lo12:.LC279
+	mov	w3, w19
+	mov	w4, 0
+	bl	printk
+.L3550:
+	add	x20, x21, :lo12:.LANCHOR0
+	ldr	x0, [x20,2864]
+	ldr	w26, [x0,8]
+	add	w1, w26, 1
+	str	w1, [x0,8]
+	bl	ftl_write_commit
+	bl	ftl_flush
+	ldrb	w22, [x20,2832]
+	udiv	w20, w24, w22
+	msub	w27, w20, w22, w24
+	cbz	w27, .L3551
+	sub	w22, w22, w27
+	mov	w0, w20
+	cmp	w22, w19
+	csel	w22, w22, w19, ls
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,120]
+	cmn	w0, #1
+	bne	.L3552
+	mov	w0, w20
+	add	x1, x29, 120
+	mov	w2, 0
+	bl	pm_log2phys
+.L3552:
+	ldr	w0, [x29,120]
+	and	w28, w22, 65535
+	cmn	w0, #1
+	beq	.L3554
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x3, x0
+	cbz	x0, .L3554
+	strb	w27, [x0,57]
+	ubfiz	x27, x27, 9, 25
+	str	w20, [x0,36]
+	mov	w1, 0
+	strb	w22, [x0,56]
+	lsl	w2, w28, 9
+	str	w26, [x0,32]
+	ldr	x0, [x0,8]
+	str	x3, [x29,104]
+	add	x0, x0, x27
+	bl	ftl_memset
+	ldr	x3, [x29,104]
+	mov	x0, x3
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x1, [x0,2864]
+	ldr	w0, [x1,76]
+	add	w0, w0, 1
+	str	w0, [x1,76]
+.L3554:
+	add	w20, w20, 1
+	sub	w19, w19, w28
+.L3551:
+	cbz	w19, .L3556
+	bl	ftl_flush
+.L3556:
+	mov	w0, -1
+	mov	w27, 1
+	str	w0, [x29,124]
+	mov	w28, 21
+.L3557:
+	add	x22, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x22,2832]
+	cmp	w19, w0
+	bcc	.L3596
+	mov	w0, w20
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,120]
+	cmn	w0, #1
+	beq	.L3558
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x3, x0
+	cbz	x0, .L3560
+	ldrb	w2, [x22,2832]
+	mov	w1, 0
+	str	w20, [x0,36]
+	strb	w2, [x0,56]
+	lsl	w2, w2, 9
+	str	w26, [x0,32]
+	strb	wzr, [x0,57]
+	ldr	x0, [x0,8]
+	str	x3, [x29,104]
+	bl	ftl_memset
+	ldr	x3, [x29,104]
+	mov	x0, x3
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	b	.L3595
+.L3558:
+	mov	w0, w20
+	add	x1, x29, 120
+	mov	w2, 0
+	bl	pm_log2phys
+	ldr	w0, [x29,120]
+	cmn	w0, #1
+	beq	.L3560
+	add	x1, x29, 124
+	mov	w2, 1
+	mov	w0, w20
+	bl	pm_log2phys
+	ldrh	w0, [x22,3340]
+	ldr	w1, [x29,120]
+	sub	w2, w28, w0
+	lsl	w2, w27, w2
+	lsr	w0, w1, w0
+	sub	w2, w2, #1
+	ldrb	w1, [x22,3338]
+	and	w0, w2, w0
+	udiv	w0, w0, w1
+	bl	ftl_vpn_decrement
+.L3595:
+	ldr	x1, [x22,2864]
+	ldr	w0, [x1,76]
+	add	w0, w0, 1
+	str	w0, [x1,76]
+.L3560:
+	add	x0, x21, :lo12:.LANCHOR0
+	add	w20, w20, 1
+	ldrb	w0, [x0,2832]
+	sub	w19, w19, w0
+	b	.L3557
+.L3596:
+	cbz	w19, .L3564
+	mov	w0, w20
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,120]
+	cmn	w0, #1
+	bne	.L3565
+	mov	w0, w20
+	add	x1, x29, 120
+	mov	w2, 0
+	bl	pm_log2phys
+.L3565:
+	ldr	w0, [x29,120]
+	cmn	w0, #1
+	beq	.L3564
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x22, x0
+	cbz	x0, .L3564
+	str	w20, [x0,36]
+	strb	wzr, [x0,57]
+	strb	w19, [x0,56]
+	str	w26, [x0,32]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2832]
+	cmp	w19, w0
+	bcc	.L3567
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1235
+	add	x1, x1, 816
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	dump_stack
+.L3567:
+	ldr	x0, [x22,8]
+	mov	w1, 0
+	lsl	w2, w19, 9
+	bl	ftl_memset
+	mov	x0, x22
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x1, [x0,2864]
+	ldr	w0, [x1,76]
+	add	w0, w0, 1
+	str	w0, [x1,76]
+.L3564:
+	add	x0, x23, :lo12:.LANCHOR7
+	mov	w4, 0
+	ldr	w1, [x0,-72]
+	cmp	w1, 8192
+	bls	.L3549
+	ldr	w0, [x25,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L3568
+	adrp	x0, .LC279
+	mov	w2, w24
+	add	x0, x0, :lo12:.LC279
+	mov	w3, w19
+	bl	printk
+.L3568:
+	add	x23, x23, :lo12:.LANCHOR7
+	add	x21, x21, :lo12:.LANCHOR0
+	str	wzr, [x23,-72]
+	bl	flt_sys_flush
+	mov	w0, 1
+	mov	w4, 0
+	str	w0, [x21,2884]
+.L3549:
+	mov	w0, w4
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	zftl_discard, .-zftl_discard
 	.align	2
 	.global	id_block_prog_msb_ff_data
 	.type	id_block_prog_msb_ff_data, %function
@@ -22271,34 +22446,34 @@ id_block_prog_msb_ff_data:
 	stp	x27, x28, [sp,80]
 	adrp	x20, .LANCHOR4
 	uxth	w19, w2
-	ldr	x0, [x0,88]
+	ldr	x0, [x0,624]
 	ldrb	w2, [x0,19]
 	add	x0, x20, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1232]
-	cbnz	w0, .L3455
+	ldrb	w0, [x0,1264]
+	cbnz	w0, .L3597
 	sub	w0, w2, #5
 	uxtb	w0, w0
 	cmp	w0, 2
-	bls	.L3457
+	bls	.L3599
 	cmp	w2, 68
-	beq	.L3457
+	beq	.L3599
 	sub	w2, w2, #19
 	and	w2, w2, -17
 	uxtb	w2, w2
-	cbnz	w2, .L3455
-.L3457:
-	adrp	x24, .LC288
+	cbnz	w2, .L3597
+.L3599:
+	adrp	x24, .LC280
 	mov	w25, w1
-	add	x24, x24, :lo12:.LC288
+	add	x24, x24, :lo12:.LC280
 	add	x20, x20, :lo12:.LANCHOR4
 	mov	w27, 65535
-.L3459:
+.L3601:
 	add	x28, x21, :lo12:.LANCHOR0
-	ldr	x0, [x28,88]
+	ldr	x0, [x28,624]
 	ldrh	w0, [x0,10]
 	cmp	w0, w19
-	bls	.L3455
-	add	x22, x20, 36
+	bls	.L3597
+	add	x22, x20, 68
 	add	w26, w19, w25
 	mov	x0, x24
 	mov	w1, w19
@@ -22307,22 +22482,22 @@ id_block_prog_msb_ff_data:
 	bl	printk
 	ldrh	w0, [x22,w19,sxtw 1]
 	cmp	w0, w27
-	bne	.L3455
-	ldr	x0, [x20,1160]
+	bne	.L3597
+	ldr	x0, [x20,1192]
 	mov	w1, 255
 	mov	w2, 16384
 	add	w19, w19, 1
 	bl	ftl_memset
 	uxth	w19, w19
-	ldr	x4, [x28,88]
+	ldr	x4, [x28,624]
 	mov	w0, w23
-	ldr	x2, [x20,1160]
+	ldr	x2, [x20,1192]
 	mov	w1, w26
 	ldrb	w4, [x4,9]
 	mov	x3, x2
 	bl	flash_prog_page
-	b	.L3459
-.L3455:
+	b	.L3601
+.L3597:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
@@ -22335,125 +22510,166 @@ id_block_prog_msb_ff_data:
 	.global	write_idblock
 	.type	write_idblock, %function
 write_idblock:
-	stp	x29, x30, [sp, -208]!
+	stp	x29, x30, [sp, -224]!
 	add	x29, sp, 0
 	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR0
+	adrp	x22, .LANCHOR0
 	stp	x19, x20, [sp,16]
 	mov	w19, w0
-	add	x0, x21, :lo12:.LANCHOR0
-	stp	x25, x26, [sp,64]
+	add	x0, x22, :lo12:.LANCHOR0
 	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	mov	x26, x1
-	ldr	x0, [x0,88]
-	ldrb	w23, [x0,9]
+	str	x2, [x29,128]
+	ldr	x0, [x0,624]
+	ldrb	w21, [x0,9]
 	ldrh	w20, [x0,10]
 	mov	w0, 59392
 	movk	w0, 0x3, lsl 16
 	bl	ftl_malloc
-	mov	x22, x0
+	mov	x23, x0
 	mov	w0, -1
-	cbz	x22, .L3495
+	cbz	x23, .L3648
 	add	w19, w19, 511
-	add	x2, x26, 253952
 	lsr	w19, w19, 9
-	add	x2, x2, 2044
+	cmp	w19, 8
+	bls	.L3634
+	cmp	w19, 500
+	bhi	.L3648
+	b	.L3605
+.L3634:
+	mov	w19, 8
+.L3605:
+	mul	w20, w20, w21
+	add	x3, x26, 253952
+	mov	w2, 63999
+	add	x3, x3, 2044
+	mov	w4, 4097
+	uxth	w0, w20
+	str	w0, [x29,152]
+	udiv	w0, w19, w0
+	str	w0, [x29,120]
 	mov	w0, 0
-	mov	w24, 63999
-	mov	w3, 4097
-.L3466:
-	ldr	w1, [x2]
-	cbnz	w1, .L3463
+.L3609:
+	ldr	w1, [x3]
+	cbnz	w1, .L3606
 	ldr	w1, [x26,w0,uxtw 2]
 	add	w0, w0, 1
-	cmp	w0, w3
-	sub	w24, w24, #1
+	cmp	w0, w4
+	sub	w2, w2, #1
 	csel	w0, w0, wzr, cc
-	str	w1, [x2],-4
-	cmp	w24, 4096
-	bne	.L3466
-	b	.L3465
-.L3463:
-	adrp	x0, .LC289
-	mov	w2, w24
-	add	x0, x0, :lo12:.LC289
+	str	w1, [x3],-4
+	cmp	w2, 4096
+	bne	.L3609
+	b	.L3608
+.L3606:
+	adrp	x0, .LC281
+	add	x0, x0, :lo12:.LC281
 	bl	printk
-.L3465:
-	add	x0, x21, :lo12:.LANCHOR0
-	add	w1, w19, 128
-	mul	w20, w20, w23
-	mov	w25, 0
-	ldr	x2, [x0,88]
-	ldrh	w0, [x2,10]
-	ldrb	w19, [x2,12]
-	mov	w2, w24
-	lsl	w0, w0, 2
-	sdiv	w19, w0, w19
-	mov	w0, 500
-	cmp	w19, 500
-	csel	w19, w19, w0, ls
-	adrp	x0, .LC290
-	cmp	w19, w1
-	add	x0, x0, :lo12:.LC290
-	csel	w19, w19, w1, ls
-	ldr	w1, [x26,w24,uxtw 2]
-	mov	w3, w19
+.L3608:
+	ldr	x1, [x29,128]
+	adrp	x0, .LC282
+	add	x0, x0, :lo12:.LC282
+	mov	w2, 4
+	mov	w3, 5
+	mov	x21, 0
+	mov	w28, w21
+	bl	rknand_print_hex
+	adrp	x0, .LC283
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC283
+	mov	w2, w19
 	bl	printk
-	str	w25, [x29,140]
-	uxth	w0, w20
-	str	w0, [x29,116]
-.L3485:
-	mov	w1, 0
-	mov	x0, x22
-	mov	w2, 512
-	add	x24, x21, :lo12:.LANCHOR0
-	bl	ftl_memset
-	ldr	x0, [x24,192]
-	ldr	w1, [x29,140]
-	add	x0, x0, x1, uxtw
+.L3631:
+	adrp	x1, .LANCHOR7
+	add	x1, x1, :lo12:.LANCHOR7
+	ldrb	w1, [x1,-102]
+	cbnz	w1, .L3610
+	ldr	x1, [x29,128]
+	ldr	w2, [x29,152]
+	ldr	w1, [x1,x21,lsl 2]
+	mul	w20, w1, w2
+	cbz	w21, .L3611
+	ldr	w2, [x29,120]
+	cmp	w2, 1
+	bls	.L3611
+	sub	w0, w21, #1
+	ldr	x2, [x29,128]
+	ldr	w0, [x2,x0,lsl 2]
+	add	w0, w0, 1
+	cmp	w1, w0
+	bne	.L3611
+	b	.L3612
+.L3610:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	x0, [x0,728]
+	add	x0, x0, x21, uxtw
 	ldrb	w20, [x0,32]
 	cmp	w20, 255
-	beq	.L3467
-	ldr	w0, [x29,116]
+	beq	.L3612
+	ldr	w0, [x29,152]
 	mul	w20, w20, w0
-	ldr	x0, [x24,88]
-	ldrb	w27, [x0,9]
-	ldrh	w23, [x0,10]
-	ldrb	w0, [x24,184]
-	udiv	w1, w20, w27
-	str	w0, [x29,112]
-	mul	w23, w27, w23
+.L3611:
+	mov	w2, 512
+	mov	w1, 0
+	mov	x0, x23
+	bl	ftl_memset
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	x1, [x0,624]
+	ldrb	w25, [x1,9]
+	ldrh	w24, [x1,10]
+	ldrb	w1, [x0,720]
+	str	w1, [x29,116]
+	udiv	w1, w20, w25
+	strb	wzr, [x0,720]
+	mul	w24, w25, w24
 	mov	w0, 0
-	strb	wzr, [x24,184]
-	uxth	w23, w23
+	uxth	w24, w24
 	bl	flash_erase_block
-	udiv	w0, w20, w23
-	msub	w0, w0, w23, w20
-	str	w0, [x29,136]
-	sub	w28, w20, w0
-	cmp	w20, w28
-	bne	.L3489
-	ldrb	w0, [x21,#:lo12:.LANCHOR0]
+	cmp	w19, w24
+	mov	w2, 1
+	bls	.L3613
+	mov	w0, 0
+	add	w1, w20, w24
+	bl	flash_erase_block
+	mov	w2, 2
+.L3613:
+	add	x27, x22, :lo12:.LANCHOR0
+	ldr	x1, [x27,624]
+	ldrh	w0, [x1,10]
+	ldrb	w1, [x1,12]
+	lsl	w0, w0, 2
+	mul	w0, w0, w2
+	sdiv	w0, w0, w1
+	str	w0, [x29,112]
+	udiv	w0, w20, w24
+	msub	w0, w0, w24, w20
+	str	w0, [x29,124]
+	sub	w0, w20, w0
+	str	w0, [x29,156]
+	cmp	w20, w0
+	bne	.L3638
+	ldrb	w0, [x27,516]
 	cmp	w0, 9
-	bne	.L3489
+	bne	.L3638
 	adrp	x0, .LANCHOR4
 	mov	w1, 0
 	add	x0, x0, :lo12:.LANCHOR4
 	mov	w2, 1024
-	ldr	x3, [x0,1216]
-	str	x3, [x29,128]
+	ldr	x3, [x0,1248]
+	str	x3, [x29,144]
 	mov	x0, x3
 	bl	ftl_memset
-	ldr	x3, [x29,128]
+	ldr	x3, [x29,144]
 	mov	w0, 18766
 	movk	w0, 0x464e, lsl 16
 	mov	w1, 12
-	cmp	w27, 8
+	cmp	w25, 8
 	str	w0, [x3]
 	str	w1, [x3,4]
 	str	wzr, [x3,12]
-	ldr	x2, [x24,88]
+	ldr	x2, [x27,624]
 	ldrb	w0, [x2,29]
 	strb	w0, [x3,16]
 	mov	w0, 4
@@ -22470,136 +22686,138 @@ write_idblock:
 	strb	w0, [x3,21]
 	add	x0, x3, 12
 	bl	js_hash
-	ldr	x3, [x29,128]
+	ldr	x3, [x29,144]
 	str	w0, [x3,8]
 	sub	w0, w19, #4
-	str	w0, [x29,128]
-	b	.L3468
-.L3489:
-	str	w19, [x29,128]
+	str	w0, [x29,144]
+	b	.L3614
+.L3638:
+	str	w19, [x29,144]
 	mov	x3, 0
-.L3468:
-	str	x26, [x29,120]
+.L3614:
+	str	x26, [x29,136]
 	mov	w24, 0
-	add	x23, x21, :lo12:.LANCHOR0
-.L3470:
-	cmp	w24, w19
-	bcs	.L3503
-	ldr	w0, [x29,136]
+	add	x27, x22, :lo12:.LANCHOR0
+.L3616:
+	ldr	w0, [x29,112]
+	cmp	w24, w0
+	bcs	.L3657
+	ldr	w0, [x29,124]
 	adrp	x2, .LANCHOR4
 	add	x2, x2, :lo12:.LANCHOR4
 	add	w4, w24, w0
-	add	x0, x23, 212
+	add	x0, x27, 4
 	ubfx	x4, x4, 2, 16
 	add	w1, w4, 1
-	ldrb	w2, [x2,1232]
+	ldrb	w2, [x2,1264]
 	ldrh	w0, [x0,w1,sxtw 1]
-	cbz	w2, .L3472
-	ldrb	w6, [x23,208]
+	cbz	w2, .L3618
+	ldrb	w6, [x27,1]
 	lsl	w0, w1, 1
 	cmp	w6, wzr
 	csel	w0, w0, w1, ne
-.L3472:
-	ldrb	w1, [x23]
+.L3618:
+	ldrb	w1, [x27,516]
 	cmp	w1, 9
-	beq	.L3502
+	beq	.L3656
 	sub	w0, w0, #1
 	lsl	w0, w0, 2
-.L3502:
-	str	w0, [x29,144]
+.L3656:
+	str	w0, [x29,160]
 	mov	w0, 61424
-	str	w0, [x29,148]
-	add	x0, x23, 212
+	str	w0, [x29,164]
+	add	x0, x27, 4
 	ldrh	w0, [x0,w4,sxtw 1]
-	cbnz	w2, .L3476
+	cbnz	w2, .L3622
 	mov	w4, w0
-	b	.L3477
-.L3476:
-	ldrb	w1, [x23,208]
+	b	.L3623
+.L3622:
+	ldrb	w1, [x27,1]
 	lsl	w0, w4, 1
 	cmp	w1, wzr
 	csel	w4, w0, w4, ne
-.L3477:
-	mul	w0, w4, w27
-	cbnz	x3, .L3478
-	ldr	x1, [x29,120]
-	add	w0, w0, w28
-	add	x2, x29, 144
+.L3623:
+	mul	w0, w4, w25
+	cbnz	x3, .L3624
+	ldr	w1, [x29,156]
+	add	x2, x29, 160
 	str	x4, [x29,104]
-	bl	fw_flash_page_prog.constprop.31
+	add	w0, w0, w1
+	ldr	x1, [x29,136]
+	bl	fw_flash_page_prog.constprop.28
 	adrp	x0, .LANCHOR4
 	ldr	x4, [x29,104]
 	add	x0, x0, :lo12:.LANCHOR4
-	ldrb	w0, [x0,1232]
-	cbnz	w0, .L3479
-	udiv	w1, w28, w27
+	ldrb	w0, [x0,1264]
+	cbnz	w0, .L3625
+	ldr	w1, [x29,156]
 	add	w2, w4, 1
+	udiv	w1, w1, w25
 	bl	id_block_prog_msb_ff_data
-.L3479:
-	ldr	x0, [x29,120]
+.L3625:
+	ldr	x0, [x29,136]
 	add	x0, x0, 2048
-	str	x0, [x29,120]
-	b	.L3480
-.L3478:
-	add	w0, w0, w28
+	str	x0, [x29,136]
+	b	.L3626
+.L3624:
+	ldr	w1, [x29,156]
+	add	x2, x29, 160
+	add	w0, w0, w1
 	mov	x1, x3
-	add	x2, x29, 144
-	bl	fw_flash_page_prog.constprop.31
-.L3480:
+	bl	fw_flash_page_prog.constprop.28
+.L3626:
 	add	w24, w24, 4
 	mov	x3, 0
 	uxth	w24, w24
-	b	.L3470
-.L3503:
-	add	x0, x21, :lo12:.LANCHOR0
-	ldrb	w1, [x29,112]
-	mov	x2, x22
-	strb	w1, [x0,184]
+	b	.L3616
+.L3657:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w1, [x29,116]
+	mov	x2, x23
+	strb	w1, [x0,720]
 	mov	w0, w20
-	ldr	w1, [x29,128]
-	bl	id_block_read_data.constprop.30
-	ldr	w0, [x29,128]
-	lsl	w23, w0, 7
-	mov	x0, 0
-.L3482:
-	cmp	w23, w0
-	bls	.L3504
-	ldr	w2, [x22,x0,lsl 2]
-	add	x0, x0, 1
-	add	x1, x26, x0, lsl 2
-	ldr	w1, [x1,-4]
-	cmp	w2, w1
-	beq	.L3482
-	mov	x0, x22
+	ldr	w1, [x29,144]
+	bl	id_block_read_data.constprop.27
+	ldr	w0, [x29,144]
+	mov	x1, 0
+	lsl	w0, w0, 7
+.L3628:
+	cmp	w0, w1
+	bls	.L3658
+	ldr	w3, [x23,x1,lsl 2]
+	add	x1, x1, 1
+	add	x2, x26, x1, lsl 2
+	ldr	w2, [x2,-4]
+	cmp	w3, w2
+	beq	.L3628
+	mov	x0, x23
 	mov	w1, 0
 	mov	w2, 512
 	bl	ftl_memset
 	mov	w1, w20
 	mov	w0, 0
 	bl	flash_erase_block
-	b	.L3467
-.L3504:
-	add	w25, w25, 1
-	cmp	w25, 5
-	bhi	.L3486
-.L3467:
-	ldr	w0, [x29,140]
-	add	w0, w0, 1
-	str	w0, [x29,140]
-	cmp	w0, 4
-	bne	.L3485
-.L3486:
-	mov	x0, x22
+	b	.L3612
+.L3658:
+	add	w28, w28, 1
+	cmp	w28, 5
+	bhi	.L3632
+.L3612:
+	add	x21, x21, 1
+	cmp	x21, 4
+	bne	.L3631
+.L3632:
+	mov	x0, x23
 	bl	ftl_free
-	cmp	w25, wzr
+	cmp	w28, wzr
 	csetm	w0, eq
-.L3495:
+.L3648:
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
 	ldp	x23, x24, [sp,48]
 	ldp	x25, x26, [sp,64]
 	ldp	x27, x28, [sp,80]
-	ldp	x29, x30, [sp], 208
+	ldp	x29, x30, [sp], 224
 	ret
 	.size	write_idblock, .-write_idblock
 	.align	2
@@ -22611,17 +22829,17 @@ CRC_32:
 	mov	x5, x0
 	add	x3, x3, :lo12:.LANCHOR2
 	mov	w0, w2
-.L3506:
+.L3660:
 	cmp	w1, w2
-	bls	.L3508
+	bls	.L3662
 	ldrb	w4, [x5,x2]
 	add	x6, x3, 2296
 	add	x2, x2, 1
 	eor	w4, w4, w0, lsr 24
 	ldr	w4, [x6,w4,uxtw 2]
 	eor	w0, w4, w0, lsl 8
-	b	.L3506
-.L3508:
+	b	.L3660
+.L3662:
 	ret
 	.size	CRC_32, .-CRC_32
 	.align	2
@@ -22635,319 +22853,322 @@ rknand_sys_storage_ioctl:
 	stp	x29, x30, [sp, -48]!
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	str	x21, [sp,32]
+	stp	x21, x22, [sp,32]
 	mov	w19, w1
 	mov	x20, x2
-	beq	.L3511
+	beq	.L3665
 	mov	w0, 29187
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3512
+	bhi	.L3666
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3513
+	beq	.L3667
 	mov	w0, 25726
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3514
+	bhi	.L3668
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3515
+	beq	.L3669
 	mov	w0, 25601
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3516
+	bhi	.L3670
 	mov	w0, 25364
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bne	.L3572
+	bne	.L3727
 	bl	rknand_dev_flush
-	b	.L3606
-.L3516:
+	b	.L3761
+.L3670:
 	mov	w0, 25602
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3518
+	beq	.L3672
 	mov	w0, 25603
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3519
-	b	.L3572
-.L3514:
+	beq	.L3673
+	b	.L3727
+.L3668:
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3520
+	beq	.L3674
 	mov	w0, 27688
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3521
+	bhi	.L3675
 	mov	w0, 25727
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3522
-	b	.L3572
-.L3521:
+	beq	.L3676
+	b	.L3727
+.L3675:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3520
+	beq	.L3674
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3520
-	b	.L3572
-.L3512:
+	beq	.L3674
+	b	.L3727
+.L3666:
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3523
+	beq	.L3677
 	mov	w0, 29267
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3524
+	bhi	.L3678
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3525
+	beq	.L3679
 	mov	w0, 29189
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bcc	.L3526
+	bcc	.L3680
 	mov	w0, 29210
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3527
+	beq	.L3681
 	mov	w0, 29266
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3528
-	b	.L3572
-.L3524:
+	beq	.L3682
+	b	.L3727
+.L3678:
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3529
+	beq	.L3683
 	mov	w0, 30225
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	bhi	.L3530
+	bhi	.L3684
 	mov	w0, 29268
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3531
+	beq	.L3685
 	mov	w0, 30224
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3532
-	b	.L3572
-.L3530:
+	beq	.L3686
+	b	.L3727
+.L3684:
 	mov	w0, 30226
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3532
+	beq	.L3686
 	mov	w0, 30227
 	movk	w0, 0x4004, lsl 16
 	cmp	w1, w0
-	beq	.L3529
-	b	.L3572
-.L3526:
-	adrp	x0, .LC291
-	add	x0, x0, :lo12:.LC291
+	beq	.L3683
+	b	.L3727
+.L3680:
+	adrp	x0, .LC284
+	add	x0, x0, :lo12:.LC284
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbnz	x0, .L3533
-.L3538:
+	cbnz	x0, .L3687
+.L3692:
 	mov	x0, -12
-	b	.L3510
-.L3533:
+	b	.L3664
+.L3687:
 	mov	x1, x20
 	mov	x2, 512
 	bl	rk_copy_from_user
-	cbnz	x0, .L3613
-	adrp	x0, .LC293
+	cbnz	x0, .L3768
+	adrp	x0, .LC286
 	ldr	w1, [x19]
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC293
+	add	x0, x0, :lo12:.LC286
 	bl	printk
 	ldr	w0, [x19,4]
 	str	w0, [x29,52]
 	cmp	w0, 8
-	bhi	.L3610
+	bhi	.L3765
 	bl	rknand_device_lock
 	ldr	w1, [x29,52]
 	mov	x2, x19
 	ldr	w0, [x19]
-	bl	id_block_read_data.constprop.30
+	bl	id_block_read_data.constprop.27
 	bl	rknand_device_unlock
 	ldr	w2, [x29,52]
 	mov	x0, x20
 	mov	x1, x19
 	ubfiz	x2, x2, 9, 23
 	bl	rk_copy_to_user
-	cbz	x0, .L3616
-	adrp	x0, .LC294
-	add	x0, x0, :lo12:.LC294
-.L3608:
+	cbz	x0, .L3771
+	adrp	x0, .LC287
+	add	x0, x0, :lo12:.LC287
+.L3763:
 	bl	printk
-.L3610:
+.L3765:
 	mov	x0, x19
-.L3611:
+.L3766:
 	bl	ftl_free
-.L3609:
+.L3764:
 	mov	x0, -14
-	b	.L3510
-.L3525:
-	adrp	x0, .LC295
-	add	x0, x0, :lo12:.LC295
+	b	.L3664
+.L3679:
+	adrp	x0, .LC288
+	add	x0, x0, :lo12:.LC288
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3538
+	cbz	x0, .L3692
 	mov	x1, x20
 	mov	x2, 4096
 	bl	rk_copy_from_user
-	cbnz	x0, .L3613
+	cbnz	x0, .L3768
+	adrp	x0, .LC289
 	ldr	w1, [x19]
-	adrp	x0, .LC296
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC296
+	add	x0, x0, :lo12:.LC289
 	bl	printk
-	adrp	x0, .LANCHOR8
-	add	x21, x0, :lo12:.LANCHOR8
+	adrp	x0, .LANCHOR7
+	add	x22, x0, :lo12:.LANCHOR7
 	mov	x20, x0
-	ldr	x1, [x21,3592]
-	cbnz	x1, .L3540
+	ldr	x21, [x22,-64]
+	cbnz	x21, .L3694
 	mov	w0, 260096
 	bl	ftl_malloc
-	str	x0, [x21,3592]
-	cbz	x0, .L3610
-.L3540:
+	str	x0, [x22,-64]
+	cbz	x0, .L3765
+	mov	w1, w21
+	mov	x2, 260096
+	bl	memset
+.L3694:
 	ldr	w2, [x19,4]
 	cmp	w2, 4088
-	bhi	.L3610
+	bhi	.L3765
 	ldr	w0, [x19]
 	mov	w1, 55296
 	movk	w1, 0x3, lsl 16
 	cmp	w0, w1
-	bhi	.L3610
-	add	x20, x20, :lo12:.LANCHOR8
+	bhi	.L3765
+	add	x20, x20, :lo12:.LANCHOR7
 	uxtw	x2, w2
-	ldr	x1, [x20,3592]
+	ldr	x1, [x20,-64]
 	add	x0, x1, x0, uxtw
 	add	x1, x19, 8
 	bl	memcpy
-.L3616:
+.L3771:
 	mov	x0, x19
 	bl	ftl_free
-	b	.L3606
-.L3528:
-	adrp	x0, .LC297
-	add	x0, x0, :lo12:.LC297
+	b	.L3761
+.L3682:
+	adrp	x0, .LC290
+	add	x0, x0, :lo12:.LC290
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3538
+	cbz	x0, .L3692
 	mov	x1, x20
 	mov	x2, 28
 	bl	rk_copy_from_user
-	cbz	x0, .L3542
-.L3613:
-	adrp	x0, .LC292
-	add	x0, x0, :lo12:.LC292
-	b	.L3608
-.L3542:
+	cbz	x0, .L3697
+.L3768:
+	adrp	x0, .LC285
+	add	x0, x0, :lo12:.LC285
+	b	.L3763
+.L3697:
 	ldr	w1, [x19]
-	adrp	x0, .LC298
+	adrp	x0, .LC291
 	ldr	w2, [x19,4]
-	add	x0, x0, :lo12:.LC298
+	add	x0, x0, :lo12:.LC291
 	bl	printk
 	ldr	w1, [x19]
 	mov	w0, 59392
 	movk	w0, 0x3, lsl 16
 	cmp	w1, w0
-	bhi	.L3610
-	adrp	x20, .LANCHOR8
-	add	x20, x20, :lo12:.LANCHOR8
-	ldr	x0, [x20,3592]
-	cbz	x0, .L3610
+	bhi	.L3765
+	adrp	x20, .LANCHOR7
+	add	x20, x20, :lo12:.LANCHOR7
+	ldr	x0, [x20,-64]
+	cbz	x0, .L3765
 	bl	CRC_32
 	ldr	w1, [x19,4]
 	cmp	w1, w0
-	beq	.L3545
+	beq	.L3700
 	mov	x0, x19
 	bl	ftl_free
 	mov	x0, -2
-	b	.L3510
-.L3545:
+	b	.L3664
+.L3700:
 	bl	rknand_device_lock
-	ldr	x1, [x20,3592]
+	ldr	x1, [x20,-64]
 	add	x2, x19, 8
 	ldr	w0, [x19]
 	bl	write_idblock
 	bl	rknand_device_unlock
-	ldr	x0, [x20,3592]
+	ldr	x0, [x20,-64]
 	bl	ftl_free
-	str	xzr, [x20,3592]
-	b	.L3616
-.L3527:
-	adrp	x0, .LC299
-	add	x0, x0, :lo12:.LC299
+	str	xzr, [x20,-64]
+	b	.L3771
+.L3681:
+	adrp	x0, .LC292
+	add	x0, x0, :lo12:.LC292
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3538
+	cbz	x0, .L3692
 	bl	ReadFlashInfo
 	mov	x0, x20
 	mov	x1, x21
-	mov	x2, 11
-	b	.L3618
-.L3511:
-	adrp	x0, .LC300
-	add	x0, x0, :lo12:.LC300
+	mov	x2, 11
+	b	.L3773
+.L3665:
+	adrp	x0, .LC293
+	add	x0, x0, :lo12:.LC293
 	bl	printk
 	bl	nand_blk_add_whole_disk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3538
+	cbz	x0, .L3692
 	mov	w1, 0
 	mov	w2, 64
 	bl	ftl_memset
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 64
-	b	.L3618
-.L3523:
-	adrp	x0, .LC301
-	add	x0, x0, :lo12:.LC301
+	b	.L3773
+.L3677:
+	adrp	x0, .LC294
+	add	x0, x0, :lo12:.LC294
 	bl	printk
-	adrp	x0, .LANCHOR8+3600
+	adrp	x0, .LANCHOR7-56
 	add	x1, x29, 52
 	mov	x2, 4
-	ldr	x0, [x0,#:lo12:.LANCHOR8+3600]
+	ldr	x0, [x0,#:lo12:.LANCHOR7-56]
 	ldr	w0, [x0,20]
 	str	w0, [x29,52]
 	mov	x0, x20
-.L3601:
+.L3756:
 	bl	rk_copy_to_user
-	cbnz	x0, .L3609
-	b	.L3606
-.L3531:
-	adrp	x0, .LC302
-	add	x0, x0, :lo12:.LC302
+	cbnz	x0, .L3764
+	b	.L3761
+.L3685:
+	adrp	x0, .LC295
+	add	x0, x0, :lo12:.LC295
 	bl	printk
 	mov	w0, 4096
 	bl	ftl_malloc
 	mov	x21, x0
-	cbz	x0, .L3538
+	cbz	x0, .L3692
 	bl	rknand_device_lock
 	mov	w1, 264
 	mov	w2, 2
@@ -22958,96 +23179,96 @@ rknand_sys_storage_ioctl:
 	mov	x0, x20
 	mov	x1, x21
 	mov	x2, 1024
-.L3618:
+.L3773:
 	bl	rk_copy_to_user
 	mov	x19, x0
 	mov	x0, x21
-	cbnz	x19, .L3611
+	cbnz	x19, .L3766
 	bl	ftl_free
-	b	.L3537
-.L3515:
-	adrp	x0, .LC303
-	add	x0, x0, :lo12:.LC303
+	b	.L3691
+.L3669:
+	adrp	x0, .LC296
+	add	x0, x0, :lo12:.LC296
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
 	mov	x19, x0
-	cbz	x0, .L3550
-.L3555:
-	adrp	x0, .LC292
-	add	x0, x0, :lo12:.LC292
+	cbz	x0, .L3705
+.L3710:
+	adrp	x0, .LC285
+	add	x0, x0, :lo12:.LC285
 	bl	printk
-	b	.L3609
-.L3550:
+	b	.L3764
+.L3705:
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	beq	.L3551
-.L3552:
+	beq	.L3706
+.L3707:
 	mov	x19, -1
-	b	.L3537
-.L3551:
+	b	.L3691
+.L3706:
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3552
-	adrp	x21, .LANCHOR8
+	bhi	.L3707
+	adrp	x21, .LANCHOR7
 	add	x0, x29, 56
-	add	x21, x21, :lo12:.LANCHOR8
+	add	x21, x21, :lo12:.LANCHOR7
 	mov	x2, 512
-	ldr	x1, [x21,3600]
+	ldr	x1, [x21,-56]
 	bl	memcpy
-	ldr	w1, [x21,3608]
+	ldr	w1, [x21,-48]
 	mov	w0, 5161
 	movk	w0, 0xc059, lsl 16
 	cmp	w1, w0
-	beq	.L3553
+	beq	.L3708
 	add	x0, x29, 120
 	mov	w1, w19
 	mov	x2, 128
 	str	w19, [x29,64]
 	str	w19, [x29,68]
 	bl	memset
-.L3553:
+.L3708:
 	add	x0, x29, 312
 	mov	w1, 0
 	mov	x2, 256
 	str	wzr, [x29,72]
 	bl	memset
-	b	.L3615
-.L3518:
-	adrp	x0, .LC304
-	add	x0, x0, :lo12:.LC304
+	b	.L3770
+.L3672:
+	adrp	x0, .LC297
+	add	x0, x0, :lo12:.LC297
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3555
+	cbnz	x0, .L3710
 	ldr	w1, [x29,56]
 	mov	w0, 21060
 	movk	w0, 0x4b4d, lsl 16
 	cmp	w1, w0
-	bne	.L3552
+	bne	.L3707
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3552
-	adrp	x1, .LANCHOR8
+	bhi	.L3707
+	adrp	x1, .LANCHOR7
 	mov	w2, 5161
-	add	x1, x1, :lo12:.LANCHOR8
+	add	x1, x1, :lo12:.LANCHOR7
 	movk	w2, 0xc059, lsl 16
 	mov	x0, -2
-	ldr	w3, [x1,3608]
+	ldr	w3, [x1,-48]
 	cmp	w3, w2
-	bne	.L3510
+	bne	.L3664
 	ldr	w2, [x29,68]
 	mov	x0, -3
 	sub	w3, w2, #1
 	cmp	w3, 127
-	bhi	.L3510
-	ldr	x19, [x1,3600]
+	bhi	.L3664
+	ldr	x19, [x1,-56]
 	add	x1, x29, 120
 	add	x0, x19, 64
 	str	w2, [x19,12]
@@ -23055,144 +23276,144 @@ rknand_sys_storage_ioctl:
 	bl	memcpy
 	mov	w0, 1
 	mov	x1, x19
-	b	.L3607
-.L3522:
-	adrp	x0, .LC305
-	add	x0, x0, :lo12:.LC305
+	b	.L3762
+.L3676:
+	adrp	x0, .LC298
+	add	x0, x0, :lo12:.LC298
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3555
+	cbnz	x0, .L3710
 	ldr	w1, [x29,56]
 	mov	w0, 17476
 	movk	w0, 0x4253, lsl 16
 	cmp	w1, w0
-	bne	.L3552
+	bne	.L3707
 	ldr	w0, [x29,60]
 	cmp	w0, 512
-	bhi	.L3552
-	adrp	x19, .LANCHOR8
-	add	x0, x19, :lo12:.LANCHOR8
-	ldr	w1, [x0,3612]
-	cbnz	w1, .L3556
-.L3559:
+	bhi	.L3707
+	adrp	x19, .LANCHOR7
+	add	x0, x19, :lo12:.LANCHOR7
+	ldr	w1, [x0,-44]
+	cbnz	w1, .L3711
+.L3714:
 	mov	x0, 0
-	b	.L3510
-.L3556:
-	ldr	x1, [x0,3616]
+	b	.L3664
+.L3711:
+	ldr	x1, [x0,-40]
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	ldr	w3, [x1]
 	cmp	w3, w2
-	beq	.L3557
+	beq	.L3712
 	mov	w2, 22867
 	movk	w2, 0x4453, lsl 16
 	str	w2, [x1]
 	mov	w2, 504
-	ldr	x1, [x0,3616]
+	ldr	x1, [x0,-40]
 	str	w2, [x1,4]
-	ldr	x0, [x0,3616]
+	ldr	x0, [x0,-40]
 	str	wzr, [x0,8]
 	str	wzr, [x0,12]
-.L3557:
-	add	x20, x19, :lo12:.LANCHOR8
+.L3712:
+	add	x20, x19, :lo12:.LANCHOR7
 	mov	w0, 0
-	ldr	x1, [x20,3616]
+	ldr	x1, [x20,-40]
 	str	wzr, [x1,16]
 	bl	StorageSysDataStore
-	ldr	x0, [x20,3600]
+	ldr	x0, [x20,-56]
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L3558
+	beq	.L3713
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
 	mov	w1, 504
-	ldr	x0, [x20,3600]
+	ldr	x0, [x20,-56]
 	str	w1, [x0,4]
-	ldr	x0, [x20,3600]
+	ldr	x0, [x20,-56]
 	str	wzr, [x0,8]
-.L3558:
-	add	x19, x19, :lo12:.LANCHOR8
+.L3713:
+	add	x19, x19, :lo12:.LANCHOR7
 	mov	w1, 0
 	mov	x2, 128
-	ldr	x20, [x19,3600]
+	ldr	x20, [x19,-56]
 	add	x0, x20, 64
 	str	wzr, [x20,12]
 	bl	memset
 	mov	w0, 1
 	mov	x1, x20
 	bl	StorageSysDataStore
-	str	wzr, [x19,3612]
-	str	wzr, [x19,3608]
-	b	.L3606
-.L3513:
-	adrp	x0, .LC306
-	add	x0, x0, :lo12:.LC306
+	str	wzr, [x19,-44]
+	str	wzr, [x19,-48]
+	b	.L3761
+.L3667:
+	adrp	x0, .LC299
+	add	x0, x0, :lo12:.LC299
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3555
+	cbnz	x0, .L3710
 	ldr	w2, [x29,56]
 	mov	w1, 20037
 	movk	w1, 0x4253, lsl 16
 	cmp	w2, w1
-	bne	.L3552
+	bne	.L3707
 	ldr	w1, [x29,60]
 	cmp	w1, 512
-	bhi	.L3552
-	adrp	x19, .LANCHOR8
-	add	x1, x19, :lo12:.LANCHOR8
-	ldr	w2, [x1,3612]
+	bhi	.L3707
+	adrp	x19, .LANCHOR7
+	add	x1, x19, :lo12:.LANCHOR7
+	ldr	w2, [x1,-44]
 	cmp	w2, 1
-	beq	.L3559
-	ldr	x2, [x1,3616]
+	beq	.L3714
+	ldr	x2, [x1,-40]
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	ldr	w4, [x2]
 	cmp	w4, w3
-	beq	.L3560
+	beq	.L3715
 	mov	w3, 22867
 	movk	w3, 0x4453, lsl 16
 	str	w3, [x2]
 	mov	w3, 504
-	ldr	x2, [x1,3616]
+	ldr	x2, [x1,-40]
 	str	w3, [x2,4]
-	ldr	x1, [x1,3616]
+	ldr	x1, [x1,-40]
 	str	w0, [x1,8]
 	str	w0, [x1,12]
-.L3560:
-	add	x20, x19, :lo12:.LANCHOR8
+.L3715:
+	add	x20, x19, :lo12:.LANCHOR7
 	mov	w0, 1
-	ldr	x1, [x20,3616]
+	ldr	x1, [x20,-40]
 	str	w0, [x1,16]
 	mov	w0, 0
 	bl	StorageSysDataStore
-	ldr	x0, [x20,3600]
+	ldr	x0, [x20,-56]
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	ldr	w2, [x0]
 	cmp	w2, w1
-	beq	.L3561
+	beq	.L3716
 	mov	w1, 21060
 	movk	w1, 0x4b4d, lsl 16
 	str	w1, [x0]
 	mov	w1, 504
-	ldr	x0, [x20,3600]
+	ldr	x0, [x20,-56]
 	str	w1, [x0,4]
-	ldr	x0, [x20,3600]
+	ldr	x0, [x20,-56]
 	str	wzr, [x0,8]
-.L3561:
-	add	x19, x19, :lo12:.LANCHOR8
+.L3716:
+	add	x19, x19, :lo12:.LANCHOR7
 	mov	w1, 0
 	mov	x2, 128
-	ldr	x20, [x19,3600]
+	ldr	x20, [x19,-56]
 	add	x0, x20, 64
 	str	wzr, [x20,12]
 	bl	memset
@@ -23200,211 +23421,210 @@ rknand_sys_storage_ioctl:
 	mov	x1, x20
 	bl	StorageSysDataStore
 	mov	w0, 1
-	str	w0, [x19,3612]
-	b	.L3606
-.L3519:
-	adrp	x0, .LC307
-	add	x0, x0, :lo12:.LC307
+	str	w0, [x19,-44]
+	b	.L3761
+.L3673:
+	adrp	x0, .LC300
+	add	x0, x0, :lo12:.LC300
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3555
+	cbnz	x0, .L3710
 	ldr	w1, [x29,56]
 	mov	w0, 20051
 	movk	w0, 0x4144, lsl 16
 	cmp	w1, w0
-	bne	.L3552
+	bne	.L3707
 	ldr	w2, [x29,60]
 	cmp	w2, 512
-	bhi	.L3552
-	adrp	x1, .LANCHOR8
+	bhi	.L3707
+	adrp	x1, .LANCHOR7
 	add	x0, x29, 64
-	add	x1, x1, :lo12:.LANCHOR8
+	add	x1, x1, :lo12:.LANCHOR7
 	uxtw	x2, w2
-	add	x1, x1, 3624
-	b	.L3614
-.L3520:
+	sub	x1, x1, #32
+	b	.L3769
+.L3674:
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3562
-	adrp	x0, .LC308
-	add	x0, x0, :lo12:.LC308
-	b	.L3604
-.L3562:
+	bne	.L3717
+	adrp	x0, .LC301
+	add	x0, x0, :lo12:.LC301
+	b	.L3759
+.L3717:
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3564
-	adrp	x0, .LC309
-	add	x0, x0, :lo12:.LC309
-	b	.L3604
-.L3564:
-	adrp	x0, .LC310
-	add	x0, x0, :lo12:.LC310
-.L3604:
+	bne	.L3719
+	adrp	x0, .LC302
+	add	x0, x0, :lo12:.LC302
+	b	.L3759
+.L3719:
+	adrp	x0, .LC303
+	add	x0, x0, :lo12:.LC303
+.L3759:
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3555
+	cbnz	x0, .L3710
 	ldr	w1, [x29,56]
 	mov	w0, 17227
 	movk	w0, 0x4c4f, lsl 16
 	cmp	w1, w0
-	bne	.L3609
+	bne	.L3764
 	mov	w0, 27708
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3565
-	adrp	x0, .LANCHOR8+3600
+	adrp	x0, .LANCHOR7
+	bne	.L3720
+	add	x0, x0, :lo12:.LANCHOR7
 	add	x1, x29, 56
 	mov	x2, 16
-	ldr	x0, [x0,#:lo12:.LANCHOR8+3600]
+	ldr	x0, [x0,-56]
 	ldr	w0, [x0,20]
 	str	w0, [x29,60]
 	strb	w0, [x29,64]
 	mov	x0, x20
 	bl	rk_copy_to_user
-	cbz	x0, .L3510
-	b	.L3609
-.L3565:
-	adrp	x0, .LANCHOR9
-	add	x20, x0, :lo12:.LANCHOR9
-	ldr	w1, [x20,-216]
+	cbz	x0, .L3664
+	b	.L3764
+.L3720:
+	add	x20, x0, :lo12:.LANCHOR7
+	ldr	w1, [x20,480]
 	cmp	w1, 10
-	bhi	.L3609
-	adrp	x1, .LANCHOR8+3600
+	bhi	.L3764
+	ldr	x1, [x20,-56]
 	ldr	w2, [x29,60]
-	ldr	x1, [x1,#:lo12:.LANCHOR8+3600]
 	ldr	w3, [x1,24]
 	cmp	w3, w2
-	beq	.L3566
-	cbz	w3, .L3566
-	adrp	x0, .LC311
+	beq	.L3721
+	cbz	w3, .L3721
+	adrp	x0, .LC304
 	mov	w1, w2
-	add	x0, x0, :lo12:.LC311
+	add	x0, x0, :lo12:.LC304
 	bl	printk
-	ldr	w0, [x20,-216]
+	ldr	w0, [x20,480]
 	add	w0, w0, 1
-	str	w0, [x20,-216]
-	b	.L3609
-.L3566:
-	add	x0, x0, :lo12:.LANCHOR9
-	str	wzr, [x0,-216]
+	str	w0, [x20,480]
+	b	.L3764
+.L3721:
+	add	x0, x0, :lo12:.LANCHOR7
+	str	wzr, [x0,480]
 	mov	w0, 27698
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	bne	.L3567
+	bne	.L3722
 	str	wzr, [x1,20]
 	str	wzr, [x1,24]
-	b	.L3568
-.L3567:
+	b	.L3723
+.L3722:
 	mov	w0, 1
 	str	w2, [x1,24]
 	str	w0, [x1,20]
-.L3568:
+.L3723:
 	mov	w0, 1
 	mov	x19, -2
 	bl	StorageSysDataStore
 	cmn	w0, #1
-	bne	.L3606
-	b	.L3537
-.L3532:
-	adrp	x0, .LC312
-	add	x0, x0, :lo12:.LC312
+	bne	.L3761
+	b	.L3691
+.L3686:
+	adrp	x0, .LC305
+	add	x0, x0, :lo12:.LC305
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3555
+	cbnz	x0, .L3710
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L3552
+	bne	.L3707
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L3552
+	bhi	.L3707
 	mov	w0, 30224
-	adrp	x1, .LANCHOR9
+	adrp	x1, .LANCHOR7
 	movk	w0, 0x4004, lsl 16
 	uxtw	x2, w2
 	cmp	w19, w0
-	add	x1, x1, :lo12:.LANCHOR9
+	add	x1, x1, :lo12:.LANCHOR7
 	add	x0, x29, 64
-	bne	.L3569
-	ldr	x1, [x1,-208]
-	b	.L3605
-.L3569:
-	ldr	x1, [x1,-200]
-.L3605:
+	bne	.L3724
+	ldr	x1, [x1,488]
+	b	.L3760
+.L3724:
+	ldr	x1, [x1,496]
+.L3760:
 	add	x1, x1, 8
-.L3614:
+.L3769:
 	bl	memcpy
-.L3615:
+.L3770:
 	mov	x0, x20
 	add	x1, x29, 56
 	mov	x2, 520
-	b	.L3601
-.L3529:
-	adrp	x0, .LC313
-	add	x0, x0, :lo12:.LC313
+	b	.L3756
+.L3683:
+	adrp	x0, .LC306
+	add	x0, x0, :lo12:.LC306
 	bl	printk
 	add	x0, x29, 56
 	mov	x1, x20
 	mov	x2, 520
 	bl	rk_copy_from_user
-	cbnz	x0, .L3555
+	cbnz	x0, .L3710
 	ldr	w1, [x29,56]
 	mov	w0, 17750
 	movk	w0, 0x444e, lsl 16
 	cmp	w1, w0
-	bne	.L3552
+	bne	.L3707
 	ldr	w2, [x29,60]
 	cmp	w2, 504
-	bhi	.L3552
+	bhi	.L3707
 	mov	w0, 30225
 	add	w2, w2, 8
 	movk	w0, 0x4004, lsl 16
 	cmp	w19, w0
-	adrp	x19, .LANCHOR9
-	add	x19, x19, :lo12:.LANCHOR9
-	bne	.L3571
-	ldr	x0, [x19,-208]
+	adrp	x19, .LANCHOR7
+	add	x19, x19, :lo12:.LANCHOR7
+	bne	.L3726
+	ldr	x0, [x19,488]
 	add	x1, x29, 56
 	bl	memcpy
 	mov	w0, 2
-	ldr	x1, [x19,-208]
-	b	.L3607
-.L3571:
-	ldr	x0, [x19,-200]
+	ldr	x1, [x19,488]
+	b	.L3762
+.L3726:
+	ldr	x0, [x19,496]
 	add	x1, x29, 56
 	bl	memcpy
-	ldr	x1, [x19,-200]
+	ldr	x1, [x19,496]
 	mov	w0, 3
-.L3607:
+.L3762:
 	bl	StorageSysDataStore
 	uxtw	x19, w0
-	b	.L3537
-.L3606:
+	b	.L3691
+.L3761:
 	mov	x19, 0
-.L3537:
-	adrp	x0, .LC314
+.L3691:
+	adrp	x0, .LC307
 	mov	x1, x19
-	add	x0, x0, :lo12:.LC314
+	add	x0, x0, :lo12:.LC307
 	bl	printk
 	mov	x0, x19
-	b	.L3510
-.L3572:
+	b	.L3664
+.L3727:
 	mov	x0, -22
-.L3510:
+.L3664:
 	ldp	x19, x20, [sp,16]
-	ldr	x21, [sp,32]
+	ldp	x21, x22, [sp,32]
 	ldp	x29, x30, [sp], 48
 	add	sp, sp, 528
 	ret
@@ -23413,65 +23633,60 @@ rknand_sys_storage_ioctl:
 	.global	rk_ftl_storage_sys_init
 	.type	rk_ftl_storage_sys_init, %function
 rk_ftl_storage_sys_init:
-	stp	x29, x30, [sp, -64]!
-	adrp	x0, .LANCHOR7+3296
+	stp	x29, x30, [sp, -48]!
 	mov	w2, 512
 	add	x29, sp, 0
-	stp	x21, x22, [sp,32]
-	adrp	x21, .LANCHOR8
-	ldr	x1, [x0,#:lo12:.LANCHOR7+3296]
 	stp	x19, x20, [sp,16]
-	add	x19, x21, :lo12:.LANCHOR8
-	adrp	x20, .LANCHOR9
-	str	x23, [sp,48]
-	add	x23, x20, :lo12:.LANCHOR9
+	adrp	x20, .LANCHOR7
+	add	x19, x20, :lo12:.LANCHOR7
+	stp	x21, x22, [sp,32]
+	ldr	x1, [x19,-96]
+	str	x1, [x19,-40]
 	add	x0, x1, 512
-	str	x0, [x19,3600]
+	str	x0, [x19,-56]
 	add	x0, x1, 1024
-	str	x1, [x19,3616]
 	add	x1, x1, 1536
-	str	x0, [x23,-208]
-	add	x0, x19, 3624
-	str	x1, [x23,-200]
-	str	xzr, [x19,3592]
+	str	x0, [x19,488]
+	sub	x0, x19, #32
+	str	xzr, [x19,-64]
+	str	x1, [x19,496]
 	bl	ftl_memcpy
-	ldr	x22, [x19,3616]
-	str	wzr, [x23,-216]
-	str	wzr, [x19,3608]
-	ldr	w0, [x22,16]
-	ldr	w23, [x22,508]
-	str	w0, [x19,3612]
-	cbz	w23, .L3621
-	mov	x0, x22
+	ldr	x21, [x19,-40]
+	str	wzr, [x19,-48]
+	str	wzr, [x19,480]
+	ldr	w0, [x21,16]
+	ldr	w22, [x21,508]
+	str	w0, [x19,-44]
+	cbz	w22, .L3776
+	mov	x0, x21
 	mov	w1, 508
 	bl	js_hash
-	cmp	w23, w0
-	beq	.L3621
-	adrp	x0, .LC315
-	str	wzr, [x22,16]
-	add	x0, x0, :lo12:.LC315
-	str	wzr, [x19,3612]
-	bl	printk
-.L3621:
-	add	x21, x21, :lo12:.LANCHOR8
-	ldr	w0, [x21,3612]
-	cbz	w0, .L3622
-	mov	w0, 5161
-	movk	w0, 0xc059, lsl 16
-	str	w0, [x21,3608]
-.L3622:
-	add	x20, x20, :lo12:.LANCHOR9
+	cmp	w22, w0
+	beq	.L3776
+	adrp	x0, .LC308
+	str	wzr, [x21,16]
+	add	x0, x0, :lo12:.LC308
+	str	wzr, [x19,-44]
+	bl	printk
+.L3776:
+	add	x0, x20, :lo12:.LANCHOR7
+	ldr	w1, [x0,-44]
+	cbz	w1, .L3777
+	mov	w1, 5161
+	movk	w1, 0xc059, lsl 16
+	str	w1, [x0,-48]
+.L3777:
+	add	x20, x20, :lo12:.LANCHOR7
 	mov	w0, 2
-	ldr	x1, [x20,-208]
+	ldr	x1, [x20,488]
 	bl	StorageSysDataLoad
-	ldr	x1, [x20,-200]
+	ldr	x1, [x20,496]
 	mov	w0, 3
 	bl	StorageSysDataLoad
 	bl	rknand_sys_storage_init
-	ldr	x23, [sp,48]
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
-	ldp	x29, x30, [sp], 64
+	ldp	x29, x30, [sp], 48
 	ret
 	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
 	.align	2
@@ -23491,59 +23706,59 @@ rk_ftl_vendor_storage_init:
 	stp	x19, x20, [sp,16]
 	stp	x21, x22, [sp,32]
 	stp	x23, x24, [sp,48]
-	adrp	x21, .LANCHOR9
+	adrp	x21, .LANCHOR7
 	bl	ftl_malloc
-	add	x1, x21, :lo12:.LANCHOR9
+	add	x1, x21, :lo12:.LANCHOR7
 	mov	w19, -12
-	str	x0, [x1,-192]
-	cbz	x0, .L3631
+	str	x0, [x1,504]
+	cbz	x0, .L3786
 	mov	w23, 0
-	adrp	x24, .LC316
+	adrp	x24, .LC309
 	mov	w19, w23
 	mov	w22, w23
-	add	x24, x24, :lo12:.LC316
-.L3635:
-	add	x20, x21, :lo12:.LANCHOR9
+	add	x24, x24, :lo12:.LC309
+.L3790:
+	add	x20, x21, :lo12:.LANCHOR7
 	lsl	w0, w22, 7
 	mov	w1, 128
-	ldr	x2, [x20,-192]
+	ldr	x2, [x20,504]
 	bl	FlashBootVendorRead
-	cbnz	w0, .L3632
-	ldr	x3, [x20,-192]
+	cbnz	w0, .L3787
+	ldr	x3, [x20,504]
 	mov	x0, x24
 	add	x2, x3, 61440
 	ldr	w1, [x3]
 	ldr	w3, [x3,4]
 	ldr	w2, [x2,4092]
 	bl	printk
-	ldr	x20, [x20,-192]
+	ldr	x20, [x20,504]
 	mov	w0, 22084
 	movk	w0, 0x524b, lsl 16
 	ldr	w1, [x20]
 	cmp	w1, w0
-	bne	.L3633
+	bne	.L3788
 	ldr	w0, [x20,4]
 	cmp	w19, w0
-	bcs	.L3633
+	bcs	.L3788
 	add	x1, x20, 61440
 	ldr	w1, [x1,4092]
 	cmp	w1, w0
 	csel	w23, w23, w22, ne
 	csel	w19, w19, w0, ne
-.L3633:
-	cbnz	w22, .L3643
+.L3788:
+	cbnz	w22, .L3798
 	mov	w22, 1
-	b	.L3635
-.L3643:
-	cbz	w19, .L3636
+	b	.L3790
+.L3798:
+	cbz	w19, .L3791
 	lsl	w0, w23, 7
 	mov	w1, 128
 	mov	x2, x20
 	bl	FlashBootVendorRead
 	mov	w19, w0
-	cbz	w0, .L3631
-	b	.L3632
-.L3636:
+	cbz	w0, .L3786
+	b	.L3787
+.L3791:
 	mov	x0, x20
 	mov	w1, w19
 	mov	x2, 65536
@@ -23557,14 +23772,14 @@ rk_ftl_vendor_storage_init:
 	mov	w0, -1032
 	strh	w19, [x20,12]
 	strh	w0, [x20,14]
-	b	.L3631
-.L3632:
-	add	x21, x21, :lo12:.LANCHOR9
+	b	.L3786
+.L3787:
+	add	x21, x21, :lo12:.LANCHOR7
 	mov	w19, -1
-	ldr	x0, [x21,-192]
+	ldr	x0, [x21,504]
 	bl	kfree
-	str	xzr, [x21,-192]
-.L3631:
+	str	xzr, [x21,504]
+.L3786:
 	mov	w0, w19
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -23576,24 +23791,24 @@ rk_ftl_vendor_storage_init:
 	.global	rk_ftl_vendor_read
 	.type	rk_ftl_vendor_read, %function
 rk_ftl_vendor_read:
-	adrp	x3, .LANCHOR9-192
+	adrp	x3, .LANCHOR7+504
 	stp	x29, x30, [sp, -32]!
 	add	x29, sp, 0
-	ldr	x5, [x3,#:lo12:.LANCHOR9-192]
+	ldr	x5, [x3,#:lo12:.LANCHOR7+504]
 	mov	w3, -1
 	str	x19, [sp,16]
-	cbz	x5, .L3645
+	cbz	x5, .L3800
 	ldrh	w3, [x5,10]
 	mov	x4, 0
-.L3646:
+.L3801:
 	cmp	w4, w3
 	mov	w6, w4
-	bcs	.L3650
+	bcs	.L3805
 	add	x7, x5, x4, lsl 3
 	add	x4, x4, 1
 	ldrh	w7, [x7,16]
 	cmp	w7, w0
-	bne	.L3646
+	bne	.L3801
 	add	x6, x5, x6, uxtw 3
 	ldrh	w4, [x6,20]
 	mov	x0, x1
@@ -23605,10 +23820,10 @@ rk_ftl_vendor_read:
 	uxtw	x2, w19
 	bl	memcpy
 	mov	w3, w19
-	b	.L3645
-.L3650:
+	b	.L3800
+.L3805:
 	mov	w3, -1
-.L3645:
+.L3800:
 	mov	w0, w3
 	ldr	x19, [sp,16]
 	ldp	x29, x30, [sp], 32
@@ -23620,10 +23835,10 @@ rk_ftl_vendor_read:
 rk_ftl_vendor_write:
 	stp	x29, x30, [sp, -112]!
 	mov	w6, w0
-	adrp	x0, .LANCHOR9-192
+	adrp	x0, .LANCHOR7+504
 	add	x29, sp, 0
 	stp	x19, x20, [sp,16]
-	ldr	x19, [x0,#:lo12:.LANCHOR9-192]
+	ldr	x19, [x0,#:lo12:.LANCHOR7+504]
 	stp	x25, x26, [sp,64]
 	stp	x27, x28, [sp,80]
 	stp	x21, x22, [sp,32]
@@ -23631,38 +23846,38 @@ rk_ftl_vendor_write:
 	mov	w26, w2
 	mov	x28, x1
 	mov	w2, -1
-	cbz	x19, .L3652
+	cbz	x19, .L3807
 	add	w20, w26, 63
 	ldrh	w3, [x19,10]
 	ldrh	w23, [x19,8]
 	and	w20, w20, -64
 	mov	x2, 0
-.L3653:
+.L3808:
 	cmp	w2, w3
 	mov	w4, w2
-	bcs	.L3668
+	bcs	.L3823
 	add	x0, x19, x2, lsl 3
 	add	x2, x2, 1
 	ldrh	w0, [x0,16]
 	cmp	w0, w6
-	bne	.L3653
+	bne	.L3808
 	add	x21, x19, x4, uxtw 3
 	ldrh	w24, [x21,20]
 	add	x5, x19, 1024
 	add	w24, w24, 63
 	and	w24, w24, -64
 	cmp	w26, w24
-	bls	.L3654
+	bls	.L3809
 	ldrh	w0, [x19,14]
 	mov	w2, -1
 	cmp	w0, w20
-	bcc	.L3652
+	bcc	.L3807
 	ldrh	w21, [x21,18]
 	add	w22, w3, w2
-.L3655:
+.L3810:
 	cmp	w4, w22
 	uxtw	x3, w4
-	bcs	.L3669
+	bcs	.L3824
 	add	x3, x19, x3, lsl 3
 	add	w25, w4, 1
 	add	x1, x19, x25, uxtw 3
@@ -23685,8 +23900,8 @@ rk_ftl_vendor_write:
 	mov	w4, w25
 	ldr	x6, [x29,96]
 	ldr	x5, [x29,104]
-	b	.L3655
-.L3669:
+	b	.L3810
+.L3824:
 	add	x3, x19, x3, lsl 3
 	uxth	w21, w21
 	mov	x1, x28
@@ -23703,20 +23918,20 @@ rk_ftl_vendor_write:
 	add	w24, w24, w0
 	sub	w24, w24, w20
 	strh	w24, [x19,14]
-	b	.L3667
-.L3654:
+	b	.L3822
+.L3809:
 	ldrh	w0, [x21,18]
 	mov	x1, x28
 	uxtw	x2, w26
 	add	x0, x5, x0
 	bl	memcpy
 	strh	w26, [x21,20]
-	b	.L3667
-.L3668:
+	b	.L3822
+.L3823:
 	ldrh	w4, [x19,14]
 	mov	w2, -1
 	cmp	w4, w20
-	bcc	.L3652
+	bcc	.L3807
 	add	x3, x19, x3, uxth 3
 	strh	w6, [x3,16]
 	uxth	w20, w20
@@ -23736,7 +23951,7 @@ rk_ftl_vendor_write:
 	ldrh	w0, [x19,10]
 	add	w0, w0, 1
 	strh	w0, [x19,10]
-.L3667:
+.L3822:
 	ldr	w0, [x19,4]
 	add	x1, x19, 61440
 	mov	x2, x19
@@ -23753,7 +23968,7 @@ rk_ftl_vendor_write:
 	lsl	w0, w23, 7
 	bl	FlashBootVendorWrite
 	mov	w2, 0
-.L3652:
+.L3807:
 	mov	w0, w2
 	ldp	x19, x20, [sp,16]
 	ldp	x21, x22, [sp,32]
@@ -23777,37 +23992,37 @@ rk_ftl_vendor_storage_ioctl:
 	mov	x21, x2
 	bl	ftl_malloc
 	mov	x19, x0
-	cbz	x0, .L3671
+	cbz	x0, .L3826
 	mov	w2, 30209
 	ldr	x1, [x29,56]
 	movk	w2, 0x4004, lsl 16
 	cmp	w1, w2
-	beq	.L3673
+	beq	.L3828
 	mov	w2, 30210
 	movk	w2, 0x4004, lsl 16
 	cmp	w1, w2
-	beq	.L3674
-	b	.L3685
-.L3673:
+	beq	.L3829
+	b	.L3840
+.L3828:
 	mov	x1, x21
 	mov	x2, 8
 	bl	rk_copy_from_user
-	cbnz	x0, .L3685
+	cbnz	x0, .L3840
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	beq	.L3676
-.L3677:
+	beq	.L3831
+.L3832:
 	mov	x20, -1
-	b	.L3672
-.L3676:
+	b	.L3827
+.L3831:
 	ldrh	w0, [x19,4]
 	add	x1, x19, 8
 	ldrh	w2, [x19,6]
 	bl	rk_ftl_vendor_read
 	cmn	w0, #1
-	beq	.L3677
+	beq	.L3832
 	uxth	x2, w0
 	strh	w0, [x19,6]
 	mov	x1, x19
@@ -23817,38 +24032,38 @@ rk_ftl_vendor_storage_ioctl:
 	bl	rk_copy_to_user
 	cmp	x0, xzr
 	csel	x20, xzr, x20, eq
-	b	.L3672
-.L3674:
+	b	.L3827
+.L3829:
 	mov	x1, x21
 	mov	x2, 8
 	bl	rk_copy_from_user
-	cbnz	x0, .L3685
+	cbnz	x0, .L3840
 	ldr	w1, [x19]
 	mov	w0, 17745
 	movk	w0, 0x5652, lsl 16
 	cmp	w1, w0
-	bne	.L3677
+	bne	.L3832
 	ldrh	w3, [x19,6]
 	cmp	w3, 4087
-	bhi	.L3677
+	bhi	.L3832
 	add	w2, w3, 8
 	mov	x0, x19
 	mov	x1, x21
 	sxtw	x2, w2
 	bl	rk_copy_from_user
-	cbnz	x0, .L3685
+	cbnz	x0, .L3840
 	ldrh	w0, [x19,4]
 	add	x1, x19, 8
 	ldrh	w2, [x19,6]
 	bl	rk_ftl_vendor_write
 	sxtw	x20, w0
-	b	.L3672
-.L3685:
+	b	.L3827
+.L3840:
 	mov	x20, -14
-.L3672:
+.L3827:
 	mov	x0, x19
 	bl	kfree
-.L3671:
+.L3826:
 	mov	x0, x20
 	ldr	x21, [sp,32]
 	ldp	x19, x20, [sp,16]
@@ -23869,6 +24084,7 @@ rk_ftl_vendor_storage_ioctl:
 	.global	RK29_NANDC1_REG_BASE
 	.global	RK29_NANDC_REG_BASE
 	.global	gp_ftl_api
+	.global	rk_zftl_enable
 	.global	g_pm_spare
 	.global	pm_first_write
 	.global	pm_gc_enable
@@ -23892,11 +24108,14 @@ rk_ftl_vendor_storage_ioctl:
 	.global	gp_free_xlc_head
 	.global	gp_free_slc_head
 	.global	gp_sblk_list_tbl
+	.global	zftl_print_list_count
 	.global	ftl_ext_info_first_write
 	.global	ftl_sys_info_first_write
 	.global	ftl_low_format_cur_blk
 	.global	ftl_power_lost_flag
 	.global	ftl_vpn_update_count
+	.global	ftl_sblk_update_list_offset
+	.global	ftl_sblk_update_list
 	.global	ftl_sblk_vpn_update_id
 	.global	ftl_sblk_lpa_tbl
 	.global	ftl_sblk_vpn
@@ -23916,6 +24135,7 @@ rk_ftl_vendor_storage_ioctl:
 	.global	gc_pre_ppa_tbl
 	.global	gc_lpa_tbl
 	.global	g_gc_info
+	.global	gc_xlc_search_index
 	.global	gc_xlc_data_index
 	.global	gc_slc_cache_index
 	.global	gc_slc_data_index
@@ -23926,10 +24146,11 @@ rk_ftl_vendor_storage_ioctl:
 	.global	gc_tlc_mode_slc_vpn_th
 	.global	gc_state
 	.global	gc_mode
-	.global	check_vpc_tbl
 	.global	p_read_ahead_ext_buf
 	.global	discard_sector_count
 	.global	read_ahead_lpa
+	.global	read_buf_count
+	.global	read_buf_head
 	.global	write_commit_count
 	.global	write_commit_head
 	.global	write_buf_count
@@ -23937,6 +24158,7 @@ rk_ftl_vendor_storage_ioctl:
 	.global	ftl_flush_jiffies
 	.global	lpa_hash
 	.global	lpa_hash_index
+	.global	_c_slc_to_xlc_ec_ratio
 	.global	_c_mix_max_xlc_ec_count
 	.global	_c_mix_max_slc_ec_count
 	.global	_c_swl_xlc_gc_th
@@ -24020,24 +24242,24 @@ rk_ftl_vendor_storage_ioctl:
 	.section	.rodata
 	.align	3
 .LANCHOR1 = . + 0
-	.type	__func__.33843, %object
-	.size	__func__.33843, 18
-__func__.33843:
+	.type	__func__.33878, %object
+	.size	__func__.33878, 18
+__func__.33878:
 	.string	"_list_remove_node"
 	.zero	6
-	.type	__func__.33868, %object
-	.size	__func__.33868, 23
-__func__.33868:
+	.type	__func__.33903, %object
+	.size	__func__.33903, 23
+__func__.33903:
 	.string	"_list_update_data_list"
 	.zero	1
-	.type	__func__.18877, %object
-	.size	__func__.18877, 22
-__func__.18877:
+	.type	__func__.18927, %object
+	.size	__func__.18927, 22
+__func__.18927:
 	.string	"nand_flash_print_info"
 	.zero	2
-	.type	__func__.18959, %object
-	.size	__func__.18959, 11
-__func__.18959:
+	.type	__func__.19012, %object
+	.size	__func__.19012, 11
+__func__.19012:
 	.string	"nandc_init"
 	.zero	5
 	.type	toshiba_A19ref_value, %object
@@ -24199,9 +24421,9 @@ toshiba_ref_value:
 	.byte	8
 	.byte	12
 	.byte	112
-	.type	__func__.18489, %object
-	.size	__func__.18489, 28
-__func__.18489:
+	.type	__func__.18515, %object
+	.size	__func__.18515, 28
+__func__.18515:
 	.string	"flash_wait_device_ready_raw"
 	.zero	4
 	.type	toshiba_3D_tlc_value, %object
@@ -24622,19 +24844,24 @@ toshiba_3D_slc_value:
 	.byte	-56
 	.byte	56
 	.zero	5
-	.type	__func__.18539, %object
-	.size	__func__.18539, 22
-__func__.18539:
+	.type	__func__.18568, %object
+	.size	__func__.18568, 22
+__func__.18568:
 	.string	"flash_start_page_read"
 	.zero	2
-	.type	__func__.18464, %object
-	.size	__func__.18464, 26
-__func__.18464:
+	.type	__func__.18593, %object
+	.size	__func__.18593, 23
+__func__.18593:
+	.string	"flash_start_plane_read"
+	.zero	1
+	.type	__func__.18490, %object
+	.size	__func__.18490, 26
+__func__.18490:
 	.string	"flash_erase_duplane_block"
 	.zero	6
-	.type	__func__.18475, %object
-	.size	__func__.18475, 21
-__func__.18475:
+	.type	__func__.18501, %object
+	.size	__func__.18501, 21
+__func__.18501:
 	.string	"flash_erase_block_en"
 	.zero	3
 	.type	random_seed, %object
@@ -24768,19 +24995,19 @@ random_seed:
 	.hword	28406
 	.hword	17598
 	.hword	28087
-	.type	__func__.19129, %object
-	.size	__func__.19129, 13
-__func__.19129:
+	.type	__func__.19182, %object
+	.size	__func__.19182, 13
+__func__.19182:
 	.string	"buf_add_tail"
 	.zero	3
-	.type	__func__.19142, %object
-	.size	__func__.19142, 10
-__func__.19142:
+	.type	__func__.19195, %object
+	.size	__func__.19195, 10
+__func__.19195:
 	.string	"buf_alloc"
 	.zero	6
-	.type	__func__.19156, %object
-	.size	__func__.19156, 16
-__func__.19156:
+	.type	__func__.19209, %object
+	.size	__func__.19209, 16
+__func__.19209:
 	.string	"buf_remove_free"
 	.type	zftl_debug_proc_fops, %object
 	.size	zftl_debug_proc_fops, 216
@@ -24794,262 +25021,257 @@ zftl_debug_proc_fops:
 	.zero	8
 	.xword	single_release
 	.zero	104
-	.type	__func__.33231, %object
-	.size	__func__.33231, 13
-__func__.33231:
-	.string	"ftl_read_buf"
-	.zero	3
-	.type	__func__.33449, %object
-	.size	__func__.33449, 12
-__func__.33449:
+	.type	__func__.33472, %object
+	.size	__func__.33472, 12
+__func__.33472:
 	.string	"gc_add_sblk"
 	.zero	4
-	.type	__func__.33514, %object
-	.size	__func__.33514, 19
-__func__.33514:
+	.type	__func__.33540, %object
+	.size	__func__.33540, 19
+__func__.33540:
 	.string	"gc_write_completed"
 	.zero	5
-	.type	__func__.33565, %object
-	.size	__func__.33565, 16
-__func__.33565:
+	.type	__func__.33591, %object
+	.size	__func__.33591, 16
+__func__.33591:
 	.string	"gc_free_src_blk"
-	.type	__func__.34041, %object
-	.size	__func__.34041, 18
-__func__.34041:
+	.type	__func__.34084, %object
+	.size	__func__.34084, 18
+__func__.34084:
 	.string	"ftl_alloc_sys_blk"
 	.zero	6
-	.type	__func__.34051, %object
-	.size	__func__.34051, 17
-__func__.34051:
+	.type	__func__.34094, %object
+	.size	__func__.34094, 17
+__func__.34094:
 	.string	"ftl_free_sys_blk"
 	.zero	7
-	.type	__func__.34155, %object
-	.size	__func__.34155, 23
-__func__.34155:
+	.type	__func__.34198, %object
+	.size	__func__.34198, 23
+__func__.34198:
 	.string	"ftl_get_ppa_from_index"
 	.zero	1
-	.type	__func__.34194, %object
-	.size	__func__.34194, 22
-__func__.34194:
+	.type	__func__.34237, %object
+	.size	__func__.34237, 22
+__func__.34237:
 	.string	"ftl_get_new_free_page"
 	.zero	2
-	.type	__func__.34205, %object
-	.size	__func__.34205, 22
-__func__.34205:
+	.type	__func__.34248, %object
+	.size	__func__.34248, 22
+__func__.34248:
 	.string	"ftl_ext_alloc_new_blk"
 	.zero	2
-	.type	__func__.33172, %object
-	.size	__func__.33172, 14
-__func__.33172:
+	.type	__func__.33254, %object
+	.size	__func__.33254, 14
+__func__.33254:
 	.string	"ftl_write_buf"
 	.zero	2
-	.type	__func__.33999, %object
-	.size	__func__.33999, 15
-__func__.33999:
+	.type	__func__.33298, %object
+	.size	__func__.33298, 18
+__func__.33298:
+	.string	"zftl_add_read_buf"
+	.zero	6
+	.type	__func__.34043, %object
+	.size	__func__.34043, 15
+__func__.34043:
 	.string	"ftl_alloc_sblk"
 	.align	3
 .LANCHOR3 = . + 0
-	.type	__func__.34627, %object
-	.size	__func__.34627, 17
-__func__.34627:
+	.type	__func__.34595, %object
+	.size	__func__.34595, 17
+__func__.34595:
 	.string	"pm_alloc_new_blk"
 	.zero	7
-	.type	__func__.34655, %object
-	.size	__func__.34655, 21
-__func__.34655:
+	.type	__func__.34623, %object
+	.size	__func__.34623, 21
+__func__.34623:
 	.string	"pm_select_ram_region"
 	.zero	3
-	.type	__func__.18867, %object
-	.size	__func__.18867, 20
-__func__.18867:
+	.type	__func__.18917, %object
+	.size	__func__.18917, 20
+__func__.18917:
 	.string	"flash_die_info_init"
 	.zero	4
-	.type	__func__.33109, %object
-	.size	__func__.33109, 17
-__func__.33109:
+	.type	__func__.33189, %object
+	.size	__func__.33189, 17
+__func__.33189:
 	.string	"lpa_rebuild_hash"
 	.zero	7
-	.type	__func__.34591, %object
-	.size	__func__.34591, 13
-__func__.34591:
+	.type	__func__.34559, %object
+	.size	__func__.34559, 13
+__func__.34559:
 	.string	"pm_free_sblk"
 	.zero	3
-	.type	__func__.19179, %object
-	.size	__func__.19179, 21
-__func__.19179:
+	.type	__func__.19232, %object
+	.size	__func__.19232, 21
+__func__.19232:
 	.string	"flash_into_data_init"
 	.zero	3
-	.type	__func__.18420, %object
-	.size	__func__.18420, 19
-__func__.18420:
+	.type	__func__.18446, %object
+	.size	__func__.18446, 19
+__func__.18446:
 	.string	"flash_read_page_en"
 	.zero	5
-	.type	__func__.19168, %object
-	.size	__func__.19168, 20
-__func__.19168:
+	.type	__func__.19221, %object
+	.size	__func__.19221, 20
+__func__.19221:
 	.string	"flash_info_blk_init"
 	.zero	4
-	.type	__func__.18554, %object
-	.size	__func__.18554, 25
-__func__.18554:
+	.type	__func__.18581, %object
+	.size	__func__.18581, 31
+__func__.18581:
+	.string	"flash_complete_plane_page_read"
+	.zero	1
+	.type	__func__.18606, %object
+	.size	__func__.18606, 25
+__func__.18606:
 	.string	"flash_complete_page_read"
 	.zero	7
-	.type	__func__.33467, %object
-	.size	__func__.33467, 21
-__func__.33467:
-	.string	"gc_check_data_one_wl"
-	.zero	3
-	.type	__func__.18526, %object
-	.size	__func__.18526, 22
-__func__.18526:
+	.type	__func__.34426, %object
+	.size	__func__.34426, 31
+__func__.34426:
+	.string	"queue_wait_first_req_completed"
+	.zero	1
+	.type	__func__.34506, %object
+	.size	__func__.34506, 15
+__func__.34506:
+	.string	"sblk_read_page"
+	.zero	1
+	.type	__func__.18539, %object
+	.size	__func__.18539, 26
+__func__.18539:
+	.string	"flash_start_tlc_page_prog"
+	.zero	6
+	.type	__func__.18557, %object
+	.size	__func__.18557, 22
+__func__.18557:
 	.string	"flash_start_page_prog"
 	.zero	2
-	.type	__func__.34517, %object
-	.size	__func__.34517, 15
-__func__.34517:
+	.type	__func__.34479, %object
+	.size	__func__.34479, 15
+__func__.34479:
 	.string	"sblk_prog_page"
 	.zero	1
-	.type	__func__.18513, %object
-	.size	__func__.18513, 26
-__func__.18513:
-	.string	"flash_start_tlc_page_prog"
-	.zero	6
-	.type	__func__.18449, %object
-	.size	__func__.18449, 19
-__func__.18449:
+	.type	__func__.18475, %object
+	.size	__func__.18475, 19
+__func__.18475:
 	.string	"flash_prog_page_en"
 	.zero	5
-	.type	__func__.34342, %object
-	.size	__func__.34342, 14
-__func__.34342:
+	.type	__func__.34309, %object
+	.size	__func__.34309, 14
+__func__.34309:
 	.string	"ftl_prog_page"
 	.zero	2
-	.type	__func__.33967, %object
-	.size	__func__.33967, 15
-__func__.33967:
+	.type	__func__.34011, %object
+	.size	__func__.34011, 15
+__func__.34011:
 	.string	"ftl_info_flush"
 	.zero	1
-	.type	__func__.34230, %object
-	.size	__func__.34230, 19
-__func__.34230:
+	.type	__func__.34273, %object
+	.size	__func__.34273, 19
+__func__.34273:
 	.string	"ftl_ext_info_flush"
 	.zero	5
-	.type	__func__.34242, %object
-	.size	__func__.34242, 18
-__func__.34242:
+	.type	__func__.34285, %object
+	.size	__func__.34285, 18
+__func__.34285:
 	.string	"ftl_ext_info_init"
 	.zero	6
-	.type	__func__.34288, %object
-	.size	__func__.34288, 15
-__func__.34288:
-	.string	"ftl_low_format"
-	.zero	1
-	.type	__func__.34332, %object
-	.size	__func__.34332, 23
-__func__.34332:
-	.string	"ftl_re_low_format_test"
-	.zero	1
-	.type	__func__.34129, %object
-	.size	__func__.34129, 23
-__func__.34129:
+	.type	__func__.34172, %object
+	.size	__func__.34172, 23
+__func__.34172:
 	.string	"ftl_open_sblk_recovery"
 	.zero	1
-	.type	__func__.34637, %object
-	.size	__func__.34637, 14
-__func__.34637:
+	.type	__func__.34605, %object
+	.size	__func__.34605, 14
+__func__.34605:
 	.string	"pm_write_page"
 	.zero	2
-	.type	__func__.19201, %object
-	.size	__func__.19201, 17
-__func__.19201:
+	.type	__func__.19254, %object
+	.size	__func__.19254, 17
+__func__.19254:
 	.string	"flash_info_flush"
 	.zero	7
-	.type	__func__.18921, %object
-	.size	__func__.18921, 16
-__func__.18921:
+	.type	__func__.18971, %object
+	.size	__func__.18971, 16
+__func__.18971:
 	.string	"nand_flash_init"
-	.type	__func__.34110, %object
-	.size	__func__.34110, 16
-__func__.34110:
+	.type	__func__.34153, %object
+	.size	__func__.34153, 16
+__func__.34153:
 	.string	"ftl_sysblk_dump"
-	.type	__func__.34577, %object
-	.size	__func__.34577, 16
-__func__.34577:
+	.type	__func__.34545, %object
+	.size	__func__.34545, 16
+__func__.34545:
 	.string	"load_l2p_region"
-	.type	__func__.34611, %object
-	.size	__func__.34611, 6
-__func__.34611:
+	.type	__func__.34579, %object
+	.size	__func__.34579, 6
+__func__.34579:
 	.string	"pm_gc"
 	.zero	2
-	.type	__func__.33223, %object
-	.size	__func__.33223, 15
-__func__.33223:
-	.string	"ftl_read_ahead"
-	.zero	1
-	.type	__func__.33501, %object
-	.size	__func__.33501, 22
-__func__.33501:
+	.type	__func__.33527, %object
+	.size	__func__.33527, 22
+__func__.33527:
 	.string	"gc_update_l2p_map_new"
 	.zero	2
-	.type	__func__.33669, %object
-	.size	__func__.33669, 20
-__func__.33669:
+	.type	__func__.33636, %object
+	.size	__func__.33636, 16
+__func__.33636:
+	.string	"gc_scan_src_blk"
+	.type	__func__.33694, %object
+	.size	__func__.33694, 20
+__func__.33694:
 	.string	"gc_scan_static_data"
 	.zero	4
-	.type	__func__.33727, %object
-	.size	__func__.33727, 18
-__func__.33727:
+	.type	__func__.33757, %object
+	.size	__func__.33757, 18
+__func__.33757:
 	.string	"gc_block_vpn_scan"
 	.zero	6
-	.type	__func__.34086, %object
-	.size	__func__.34086, 14
-__func__.34086:
+	.type	__func__.34129, %object
+	.size	__func__.34129, 14
+__func__.34129:
 	.string	"ftl_sblk_dump"
 	.zero	2
-	.type	__func__.33269, %object
-	.size	__func__.33269, 10
-__func__.33269:
+	.type	__func__.33331, %object
+	.size	__func__.33331, 10
+__func__.33331:
 	.string	"zftl_read"
 	.zero	6
-	.type	__func__.33336, %object
-	.size	__func__.33336, 10
-__func__.33336:
-	.string	"vpn_check"
-	.zero	6
-	.type	__func__.33610, %object
-	.size	__func__.33610, 16
-__func__.33610:
-	.string	"gc_scan_src_blk"
-	.type	__func__.34176, %object
-	.size	__func__.34176, 19
-__func__.34176:
+	.type	__func__.33493, %object
+	.size	__func__.33493, 21
+__func__.33493:
+	.string	"gc_check_data_one_wl"
+	.zero	3
+	.type	__func__.34219, %object
+	.size	__func__.34219, 19
+__func__.34219:
 	.string	"ftl_update_l2p_map"
 	.zero	5
-	.type	__func__.33161, %object
-	.size	__func__.33161, 17
-__func__.33161:
+	.type	__func__.33236, %object
+	.size	__func__.33236, 17
+__func__.33236:
 	.string	"ftl_write_commit"
 	.zero	7
-	.type	__func__.33543, %object
-	.size	__func__.33543, 16
-__func__.33543:
+	.type	__func__.33569, %object
+	.size	__func__.33569, 16
+__func__.33569:
 	.string	"gc_do_copy_back"
-	.type	__func__.33295, %object
-	.size	__func__.33295, 13
-__func__.33295:
-	.string	"_ftl_discard"
-	.zero	3
-	.type	__func__.33754, %object
-	.size	__func__.33754, 11
-__func__.33754:
+	.type	__func__.33785, %object
+	.size	__func__.33785, 11
+__func__.33785:
 	.string	"zftl_do_gc"
+	.zero	5
+	.type	__func__.33362, %object
+	.size	__func__.33362, 13
+__func__.33362:
+	.string	"_ftl_discard"
 	.section	.rodata.str1.1,"aMS",%progbits,1
 .LC0:
 	.string	"\n!!!!! error @ func:%s - line:%d\n"
 .LC1:
 	.string	"%s\n"
 .LC2:
-	.string	"FTL version: 6.0.7 20180411"
+	.string	"FTL version: 6.0.9 20180704"
 .LC3:
 	.string	"zftl_debug:0x%x\n"
 .LC4:
@@ -25209,474 +25431,460 @@ __func__.33754:
 .LC81:
 	.string	"gc free blk th = %d\n"
 .LC82:
-	.string	"gc vpn th = %d %d %d %d\n"
+	.string	"gc vpn th = %d %d %d %d %d\n"
 .LC83:
-	.string	"gc_add_sblk = %d, %d, %d, %d, %d, %d\n"
+	.string	"swl blk = %x %x %x %x\n"
 .LC84:
-	.string	"status: %x, ppa: %x\n"
+	.string	"gc_add_sblk = %d, %d, %d, %d, %d, %d\n"
 .LC85:
-	.string	"gc_write_completed: %x  %x  %x %x\n"
+	.string	"gc_add_sblk = %d, %d, %d,last update:%d, %d\n"
 .LC86:
-	.string	"%d gc_free_temp_buf buf id= %x\n"
+	.string	"status: %x, ppa: %x\n"
 .LC87:
-	.string	"gc: b:%x,p:%x,i:%x; free buf=%d %d free slc th: %d\n"
+	.string	"gc_write_completed: %x  %x  %x %x\n"
 .LC88:
-	.string	"zftl_get_gc_node cache = %x index = %d vpn = %x\n"
+	.string	"%d gc_free_temp_buf buf id= %x\n"
 .LC89:
-	.string	"gc_search_src_blk mode = %x, src mode = %x, count= %d %d\n"
+	.string	"gc: b:%x,p:%x,i:%x; free buf=%d %d free slc th: %d\n"
 .LC90:
-	.string	"zftl_get_free_sblk %x %d, %p %d %d\n"
+	.string	"zftl_get_gc_node cache = %x index = %d vpn = %x\n"
 .LC91:
-	.string	"list count:%p %d\n"
+	.string	"gc_search_src_blk mode = %x, src mode = %x, count= %d %d\n"
 .LC92:
-	.string	"%d: node:%x %x %x %x, %d %d %d %d %d\n"
+	.string	"swl_tlc_free_mini_ec_blk alloc sblk %x\n"
 .LC93:
-	.string	"gc_free_src_blk = %x, vpn = %d\n"
+	.string	"zftl_get_free_sblk %x %d, %p %d %d\n"
 .LC94:
-	.string	"gc_free_src_blk %x, %d\n"
+	.string	"zftl_gc_get_free_sblk %x %x %x, %d %d %d\n"
 .LC95:
-	.string	"ftl_vpn_decrement %x = %d\n"
+	.string	"swl_slc_free_mini_ec_blk alloc sblk %x\n"
 .LC96:
-	.string	"mask bad block:cs %x block: %x\n"
+	.string	"list count:%p %d\n"
 .LC97:
-	.string	"free blk: s:%x,t:%x,m:%x, data blk:s:%x,%x,t%x vpn: s:%x t:%x, max_vpn: %x\n"
+	.string	"%d: node:%x %x %x %x, %d %d %d %d %d\n"
 .LC98:
-	.string	"totle w: %d MB,r: %d MB %d dv:0x%X,poc:%d\n"
+	.string	"swl_tlc_free_mini_ec_blk sblk %x\n"
 .LC99:
-	.string	"gc xlc page: %d,gc slc page: %d, tmp w: %d MB\n"
+	.string	"swl_slc_free_mini_ec_blk sblk %x\n"
 .LC100:
-	.string	"slc ec: %d,%d,%d,%d,%d,tlc ec: %d,%d,%d,%d,%d\n"
+	.string	"gc_free_src_blk = %x, vpn = %d\n"
 .LC101:
-	.string	"gc th: tlc_tlc: %d tlc_slc: %d slc_slc: %d slc_tlc:%d free_th: %d\n"
+	.string	"gc_free_src_blk %x, %d\n"
 .LC102:
-	.string	"ftl prog error =%x, lpa = %x, ppa= %x\n"
+	.string	"ftl_vpn_decrement %x = %d\n"
 .LC103:
-	.string	"alloc sblk %x %d\n"
+	.string	"mask bad block:cs %x block: %x\n"
 .LC104:
-	.string	"dump_sblk_queue: %d\n"
+	.string	"free blk: s:%x,t:%x,m:%x, data blk:s:%x,%x,t%x vpn: s:%x t:%x, max_vpn: %x\n"
 .LC105:
-	.string	"buf id= %d state = %d ppa = %x\n"
+	.string	"totle w: %d MB,r: %d MB %d dv:0x%X,poc:%d\n"
 .LC106:
-	.string	"blk %x is bad block\n"
+	.string	"gc xlc page: %d,gc slc page: %d, tmp w: %d MB\n"
 .LC107:
-	.string	"pm_alloc_new_blk: %x %x %x %x\n"
+	.string	"slc ec: %d,%d,%d,%d,%d,tlc ec: %d,%d,%d,%d,%d\n"
 .LC108:
-	.string	"%s %d %d\n"
+	.string	"gc th: tlc_tlc: %d tlc_slc: %d slc_slc: %d slc_tlc:%d free_th: %d\n"
 .LC109:
-	.string	"gc_static_wearleveling: slc blk: %d, tlc blk: %d avg slc ec: %d, avg tlc ec: %d \n"
+	.string	"ftl prog error =%x, lpa = %x, ppa= %x\n"
 .LC110:
-	.string	"gc_static_wearleveling: min slc ec: %d, min tlc ec: %d max slc ec: %d, max tlc ec: %d; %d %d\n"
+	.string	"alloc sblk %x %d\n"
 .LC111:
-	.string	"swl add tlc gc = %d, %d, %d, %d, %d, %d\n"
+	.string	"dump_sblk_queue: %d\n"
 .LC112:
-	.string	"swl add slc gc  = %d, %d, %d, %d, %d, %d\n"
+	.string	"buf id= %d state = %d ppa = %x\n"
 .LC113:
-	.string	"free blk vpn error: %x %x\n"
+	.string	"blk %x is bad block\n"
 .LC114:
-	.string	"ftl_free_no_use_map_blk %x %x %x %d\n"
+	.string	"pm_alloc_new_blk: %x %x %x %x\n"
 .LC115:
-	.string	"...%d @ %s\n"
+	.string	"%s %d %d\n"
 .LC116:
-	.string	"rk_ftl_de_init %x\n"
+	.string	"gc_static_wearleveling: min blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC117:
-	.string	"%s %p:0x%x:"
+	.string	"gc_static_wearleveling: min slc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC118:
-	.string	"%x "
+	.string	"gc_static_wearleveling: min tlc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC119:
-	.string	""
+	.string	"gc_static_wearleveling: max slc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC120:
-	.string	"otp error! %d"
+	.string	"gc_static_wearleveling: max xlc blk: %x,sec=%d,xec = %d ,mode=%d, func=%x, bbt=%x vpn = %d\n"
 .LC121:
-	.string	"rr"
+	.string	"gc_static_wearleveling: slc blk: %x, tlc blk: %d avg slc ec: %d, avg tlc ec: %d \n"
 .LC122:
-	.string	"flash_abort_clear = %d\n"
+	.string	"gc_static_wearleveling: min slc ec: %x, min tlc ec: %d max slc ec: %d, max tlc ec: %d; %d %d\n"
 .LC123:
-	.string	"%d mtrans_cnt = %d page_num = %d\n"
+	.string	"swl add tlc gc = %x, %d, %d, %d, %d, %d\n"
 .LC124:
-	.string	"nandc:"
+	.string	"swl add slc gc  = %x, %d, %d, %d, %d, %d\n"
 .LC125:
-	.string	"%d flReg.d32=%x %x\n"
+	.string	"free blk vpn error: %x %x\n"
 .LC126:
-	.string	"nandc_xfer_done read error %x\n"
+	.string	"ftl_free_no_use_map_blk %x %x %x %d\n"
 .LC127:
-	.string	"dqs data abort %x\n"
+	.string	"...%d @ %s\n"
 .LC128:
-	.string	"dqs data timeout %x\n"
+	.string	"rk_ftl_de_init %x\n"
 .LC129:
-	.string	"xfer error %x\n"
+	.string	"%s %p:0x%x:"
 .LC130:
-	.string	"flash_read_page %x %x %x\n"
+	.string	"%x "
 .LC131:
-	.string	"micron %d row=%x,count %d,status=%d\n"
+	.string	""
 .LC132:
-	.string	"micron RR %d row=%x,count %d,status=%d\n"
+	.string	"otp error! %d"
 .LC133:
-	.string	"toshiba SRR %d row=%x, status=%d\n"
+	.string	"rr"
 .LC134:
-	.string	"toshiba TRR %d row=%x, status=%d\n"
+	.string	"flash_abort_clear = %d\n"
 .LC135:
-	.string	"toshiba RR %d row=%x,count %d,status=%d\n"
+	.string	"%d mtrans_cnt = %d page_num = %d\n"
 .LC136:
-	.string	"hynix RR %d row=%x, count %d, status=%d\n"
+	.string	"nandc:"
 .LC137:
-	.string	"%d flash_ddr_tunning_read %x ecc=%d\n"
+	.string	"%d flReg.d32=%x %x\n"
 .LC138:
-	.string	"sync para %d\n"
+	.string	"nandc_xfer_done read error %x\n"
 .LC139:
-	.string	"DDR mode Read error %x %x\n"
+	.string	"dqs data abort %x\n"
 .LC140:
-	.string	"flash_read_page_en %x %x\n"
+	.string	"dqs data timeout %x\n"
 .LC141:
-	.string	"flash_read_page_en %x %x error_ecc %d %d\n"
+	.string	"xfer error %x\n"
 .LC142:
-	.string	"flash_get_last_written_page: %x %x %x\n"
+	.string	"flash_read_page %x %x %x\n"
 .LC143:
-	.string	"...%d @ %s %d %p\n"
+	.string	"micron %d row=%x,count %d,status=%d\n"
 .LC144:
-	.string	"no sys info %x\n"
+	.string	"micron RR %d row=%x,count %d,status=%d\n"
 .LC145:
-	.string	"read page: %x %x %x %x\n"
+	.string	"toshiba SRR %d row=%x, status=%d\n"
 .LC146:
-	.string	"flash_complete_page_read %x %x error_ecc %d %d\n"
+	.string	"toshiba TRR %d row=%x, status=%d\n"
 .LC147:
-	.string	"set buf %d,status = %x, ppa = %x lun state = %d\n"
+	.string	"toshiba RR %d row=%x,count %d,status=%d\n"
 .LC148:
-	.string	"1ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
+	.string	"hynix RR %d row=%x, count %d, status=%d\n"
 .LC149:
-	.string	"flash_prog_page %x %x %x\n"
+	.string	"%d flash_ddr_tuning_read %x ecc=%d\n"
 .LC150:
-	.string	"flash_prog_page page_addr = %x status = %x\n"
+	.string	"sync para %d\n"
 .LC151:
-	.string	"sblk_prog_page ppa = %x, count = %d\n"
+	.string	"DDR mode Read error %x %x\n"
 .LC152:
-	.string	"flash_prog_page_en:%x %x\n"
+	.string	"flash_read_page_en %x %x %x\n"
 .LC153:
-	.string	"spare"
+	.string	"flash_read_page_en %x %x error_ecc %d %d\n"
 .LC154:
-	.string	"data"
+	.string	"flash_get_last_written_page: %x %x %x\n"
 .LC155:
-	.string	"write error: %x\n"
+	.string	"...%d @ %s %d %p\n"
 .LC156:
-	.string	"low format %d\n"
+	.string	"no sys info %x\n"
 .LC157:
-	.string	"g_ftl_info_blk blk = %x, page = %x version = %d\n"
+	.string	"read page: %x %x %x %x\n"
 .LC158:
-	.string	"%d %x @%d %x\n"
+	.string	"flash_complete_page_read %x %x error_ecc %d %d\n"
 .LC159:
-	.string	"ftl_info_blk_init %d %d %x\n"
+	.string	"read: %x %x %x %x\n"
 .LC160:
-	.string	"low format %d %d %d %d\n"
+	.string	"set buf %d,status = %x, ppa = %x lun state = %d\n"
 .LC161:
-	.string	"re low format %d\n"
+	.string	"flash_prog_page %x %x %x\n"
 .LC162:
-	.string	"saved_active_page  = %x\n"
+	.string	"flash_prog_page page_addr = %x status = %x\n"
 .LC163:
-	.string	"saved_active_plane = %x\n"
+	.string	"sblk_prog_page ppa = %x, count = %d\n"
 .LC164:
-	.string	"sblk = %x\n"
+	.string	"flash_prog_page_en:%x %x\n"
 .LC165:
-	.string	"phy_blk = %x %x\n"
+	.string	"spare"
 .LC166:
-	.string	"blk= %x, page=%x, ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
+	.string	"data"
 .LC167:
-	.string	"sblk = %x, vpn0 = %d, vpn1 = %d\n"
+	.string	"write error: %x\n"
 .LC168:
-	.string	"dump write = %x\n"
+	.string	"g_ftl_info_blk blk = %x, page = %x version = %d\n"
 .LC169:
-	.string	"pm_write_page write error: %x\n"
+	.string	"%d %x @%d %x\n"
 .LC170:
-	.string	"finfo:"
+	.string	"ftl_info_blk_init %d %d %x\n"
 .LC171:
-	.string	"flash_info_flush id = %x, page = %x\n"
+	.string	"%s %d %d %x %x\n"
 .LC172:
-	.string	"sys_info_flush error:%x\n"
+	.string	"saved_active_page  = %x\n"
 .LC173:
-	.string	"l2p:"
+	.string	"saved_active_plane = %x\n"
 .LC174:
-	.string	"free_buf_count: %d\n"
+	.string	"sblk = %x\n"
 .LC175:
-	.string	"g_ftl_info_blk blk:0x%x, index:0x%x, page:0x%x\n"
+	.string	"phy_blk = %x %x\n"
 .LC176:
-	.string	"ftl_ext_info_blk blk:0x%x, page:0x%x\n"
+	.string	"sblk = %x, vpn0 = %d, vpn1 = %d\n"
 .LC177:
-	.string	"ac_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+	.string	"dump write = %x\n"
 .LC178:
-	.string	"tmp_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+	.string	"pm_write_page write error: %x\n"
 .LC179:
-	.string	"gc_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+	.string	"finfo:"
 .LC180:
-	.string	"lpa:"
+	.string	"flash_info_flush id = %x, page = %x\n"
 .LC181:
-	.string	"vpn:"
+	.string	"sys_info_flush error:%x\n"
 .LC182:
-	.string	"sblk:"
+	.string	"blk= %x, page=%x, ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
 .LC183:
-	.string	"lpa_hash:"
+	.string	"l2p:"
 .LC184:
-	.string	"lpa_hash_index:"
+	.string	"free_buf_count: %d\n"
 .LC185:
-	.string	"%s w error lpn = %x, max ppa = %d\n"
+	.string	"g_ftl_info_blk blk:0x%x, index:0x%x, page:0x%x\n"
 .LC186:
-	.string	"region_id = %d, pm_max_region = %d\n"
+	.string	"ftl_ext_info_blk blk:0x%x, page:0x%x\n"
 .LC187:
-	.string	"load_l2p_region no ppa = %x , %x, all setting 0xff....\n"
+	.string	"ac_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
 .LC188:
-	.string	"load_l2p_region = %x,%x,%x, %x\n"
+	.string	"tmp_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
 .LC189:
-	.string	"pm_ppa:"
+	.string	"gc_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
 .LC190:
-	.string	"data:"
+	.string	"lpa:"
 .LC191:
-	.string	"spare:"
+	.string	"vpn:"
 .LC192:
-	.string	"pm_init posr %x %x %x\n"
+	.string	"sblk:"
 .LC193:
-	.string	"pm_init recovery %x %x %x\n"
+	.string	"lpa_hash:"
 .LC194:
-	.string	"pm_log2phys  lpn = %d, max lpn = %d\n"
+	.string	"lpa_hash_index:"
 .LC195:
-	.string	"ftl_read_ahead refresh =%x, lpa = %x, ppa= %x\n"
+	.string	"%s w error lpn = %x, max ppa = %d\n"
 .LC196:
-	.string	"id=%d, lpa = %x, ppa = %x spare = %x %x %x %x\n"
+	.string	"region_id = %d, pm_max_region = %d\n"
 .LC197:
-	.string	"ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
+	.string	"load_l2p_region no ppa = %x , %x, all setting 0xff....\n"
 .LC198:
-	.string	"ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
+	.string	"load_l2p_region = %x,%x,%x, %x\n"
 .LC199:
-	.string	"gc_recovery"
+	.string	"pm_ppa:"
 .LC200:
-	.string	"gc_recovery: %x vpn = %x\n"
+	.string	"data:"
 .LC201:
-	.string	"_c_user_data_density := %d\n"
+	.string	"spare:"
 .LC202:
-	.string	"_c_totle_phy_density := %d\n"
+	.string	"pm_init posr %x %x %x\n"
 .LC203:
-	.string	"_c_totle_log_page := %d\n"
+	.string	"pm_init recovery %x %x %x\n"
 .LC204:
-	.string	"_c_totle_data_density := %d\n"
+	.string	"pm_log2phys  lpn = %d, max lpn = %d\n"
 .LC205:
-	.string	"_c_ftl_pm_page_num := %d\n"
+	.string	"ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
 .LC206:
-	.string	"_c_ftl_byte_pre_page := %d\n"
+	.string	"ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
 .LC207:
-	.string	"_c_max_pm_sblk := %d\n"
+	.string	"gc_recovery: %x vpn = %x\n"
 .LC208:
-	.string	"_min_slc_super_block := %d\n"
+	.string	"_c_user_data_density := %d\n"
 .LC209:
-	.string	"_max_xlc_super_block := %d\n"
+	.string	"_c_totle_phy_density := %d\n"
 .LC210:
-	.string	"gp_ftl_ext_info %p %p %p\n"
+	.string	"_c_totle_log_page := %d\n"
 .LC211:
-	.string	"flash info size: %d %d %d\n"
+	.string	"_c_totle_data_density := %d\n"
 .LC212:
-	.string	"ftl_init %x\n"
+	.string	"_c_ftl_pm_page_num := %d\n"
 .LC213:
-	.string	"gc_update_l2p_map_new sblk %x\n"
+	.string	"_c_ftl_byte_pre_page := %d\n"
 .LC214:
-	.string	"gc_update_l2p_map_new: %x %x %x\n"
+	.string	"_c_max_pm_sblk := %d\n"
 .LC215:
-	.string	"0lpa: %x %x %x\n"
+	.string	"_min_slc_super_block := %d\n"
 .LC216:
-	.string	"lpa: %x %x %x\n"
+	.string	"_max_xlc_super_block := %d\n"
 .LC217:
-	.string	"gc_update_l2p_map_new: %x vpn = %x vpn1 = %x done\n"
+	.string	"gp_ftl_ext_info %p %p %p\n"
 .LC218:
-	.string	"gc_block_vpn_scan = %x, s vpn0 = %d, c vpn1 = %d f:%d\n"
+	.string	"flash info size: %d %d %d\n"
 .LC219:
-	.string	"ftl_sblk_dump = %x %x %x %x\n"
+	.string	"ftl_init %x\n"
 .LC220:
-	.string	"page_addr = %x, lpa=%x vpn = %d\n"
+	.string	"gc_update_l2p_map_new sblk %x\n"
 .LC221:
-	.string	"index= %x, lpa=%x\n"
+	.string	"gc_update_l2p_map_new: %x %x %x\n"
 .LC222:
-	.string	"block = %x, vpn=%x check vpn = %d\n"
+	.string	"lpa: %x %x %x\n"
 .LC223:
-	.string	"ftl_read %x %x %x\n"
+	.string	"gc_update_l2p_map_new: %x vpn = %x vpn1 = %x done\n"
 .LC224:
-	.string	"ftl_read refresh =%x, lpa = %x, ppa= %x\n"
+	.string	"gc_scan_src_blk = %x, vpn = %d\n"
 .LC225:
-	.string	"acblk = %x, tempblk = %x, gc_des = %x\n"
+	.string	"gc_scan_src_blk = %x, s vpn0 = %d, c vpn1 = %d\n"
 .LC226:
-	.string	"acblk = %x, free page = %x, vpn = %x %x\n"
+	.string	"gc_block_vpn_scan = %x, s vpn0 = %d, c vpn1 = %d f:%d\n"
 .LC227:
-	.string	"tmp_blk = %x, free page = %x, vpn = %x %x\n"
+	.string	"ftl_sblk_dump = %x %d %d %d %d\n"
 .LC228:
-	.string	"vpn_check lpa = %x, ppa = %x, blk = %x\n"
+	.string	"ftl_sblk_dump = %x %x %x %x\n"
 .LC229:
-	.string	"l2p"
+	.string	"page_addr = %x, lpa=%x vpn = %d\n"
 .LC230:
-	.string	"vpn_check %x = c %x  s %x function: %x\n"
+	.string	"index= %x, lpa=%x\n"
 .LC231:
-	.string	"vpn_check blk = %x fix vpc\n"
+	.string	"block = %x, vpn=%x check vpn = %d\n"
 .LC232:
-	.string	"...%s exit...%d\n"
+	.string	"ftl_read %x %x %x\n"
 .LC233:
-	.string	"gc_scan_src_blk = %x, vpn = %d\n"
+	.string	"ftl_read refresh =%x, lpa = %x, ppa= %x\n"
 .LC234:
-	.string	"gc_scan_src_blk = %x, s vpn0 = %d, c vpn1 = %d\n"
+	.string	"id=%d, lpa = %x, ppa = %x spare = %x %x %x %x\n"
 .LC235:
-	.string	"ftl_scan_all_data = %x\n"
+	.string	"zftl debug cmd: %s\n"
 .LC236:
-	.string	"scan lpa = %x ppa= %x\n"
+	.string	"cmd:"
 .LC237:
-	.string	"lba = %x,addr= %x, ststus = %x, spare= %x %x %x %x data=%x %x\n"
+	.string	"dumpl2p"
 .LC238:
-	.string	"lba = %x, id= %x, index = %x hash ppa = %x\n"
+	.string	"pm l2p:"
 .LC239:
-	.string	"0pm:"
+	.string	"pm blk:"
 .LC240:
-	.string	"1pm:"
+	.string	"dumppm:"
 .LC241:
-	.string	"zftl debug cmd: %s\n"
+	.string	"p_cmd: %s\n"
 .LC242:
-	.string	"cmd:"
+	.string	"pm ram = %x, %x\n"
 .LC243:
-	.string	"dumpl2p"
+	.string	"ram:"
 .LC244:
-	.string	"pm l2p:"
+	.string	"pm:"
 .LC245:
-	.string	"pm blk:"
+	.string	"dumpsys"
 .LC246:
-	.string	"dumppm:"
+	.string	"dumplist:"
 .LC247:
-	.string	"p_cmd: %s\n"
+	.string	"vpncheck"
 .LC248:
-	.string	"pm ram = %x, %x\n"
+	.string	"dumpppa:"
 .LC249:
-	.string	"ram:"
+	.string	"dumpblk:"
 .LC250:
-	.string	"pm:"
+	.string	"setzdebug:"
 .LC251:
-	.string	"dumpsys"
+	.string	"lpa2ppa:"
 .LC252:
-	.string	"dumplist"
+	.string	"lpa: %x--> ppa: %x\n"
 .LC253:
-	.string	"vpncheck"
+	.string	"help:\n"
 .LC254:
-	.string	"dumpppa:"
+	.string	"1. echo dumpl2p > /proc/zftl_debug\n"
 .LC255:
-	.string	"dumpblk:"
+	.string	"2. echo dumppm:x > /proc/zftl_debug\n"
 .LC256:
-	.string	"setzdebug:"
+	.string	"3. echo dumpsys > /proc/zftl_debug\n"
 .LC257:
-	.string	"lpa2ppa:"
+	.string	"4. echo dumpppa:x > /proc/zftl_debug\n"
 .LC258:
-	.string	"lpa: %x--> ppa: %x\n"
+	.string	"5. echo vpncheck > /proc/zftl_debug\n"
 .LC259:
-	.string	"help:\n"
+	.string	"6. echo setzdebug:x > /proc/zftl_debug\n"
 .LC260:
-	.string	"1. echo dumpl2p > /proc/zftl_debug\n"
+	.string	"7. echo dumplist > /proc/zftl_debug\n"
 .LC261:
-	.string	"2. echo dumppm:x > /proc/zftl_debug\n"
+	.string	"8. echo lpa2ppa:x> /proc/zftl_debug\n"
 .LC262:
-	.string	"3. echo dumpsys > /proc/zftl_debug\n"
+	.string	"gc_lpa:"
 .LC263:
-	.string	"4. echo dumpppa:x > /proc/zftl_debug\n"
+	.string	"gc_ppa:"
 .LC264:
-	.string	"5. echo vpncheck > /proc/zftl_debug\n"
+	.string	"err: ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
 .LC265:
-	.string	"6. echo setzdebug:x > /proc/zftl_debug\n"
+	.string	"ftl_update_l2p_map: %x %x %x\n"
 .LC266:
-	.string	"7. echo dumplist > /proc/zftl_debug\n"
+	.string	"ftl_update_l2p_map"
 .LC267:
-	.string	"8. echo lpa2ppa:x> /proc/zftl_debug\n"
+	.string	"lpa_tbl:"
 .LC268:
-	.string	"ftl_update_l2p_map: %x %x %x\n"
+	.string	"sblk %x vpn: %d %d\n"
 .LC269:
-	.string	"ftl_update_l2p_map"
+	.string	"%d read error: ppa:%x, lpa:%x, status:%x\n"
 .LC270:
-	.string	"lpa_tbl:"
+	.string	"gc page in buf: lpa %x ppa = %x pageindex= %x\n"
 .LC271:
-	.string	"sblk %x vpn: %d %d\n"
+	.string	"gc_do_copy_back: lpa %x des_ppa = %x %x gc_ppa= %x page_index= %d\n"
 .LC272:
-	.string	"%d read error: ppa:%x, lpa:%x, status:%x\n"
+	.string	"gc_do_copy_back: %x %x %x %x gc_ppa:%x %x\n"
 .LC273:
-	.string	"gc page in buf: lpa %x ppa = %x pageindex= %x\n"
+	.string	"%d prog_step: %x %x buf id= %x ppa = %x hash=%x id = %x plane = %x lpa=%x\n"
 .LC274:
-	.string	"gc_do_copy_back: lpa %x des_ppa = %x %x gc_ppa= %x page_index= %d\n"
+	.string	"gc %d: %d %d %d %d %d %d %d\n"
 .LC275:
-	.string	"gc_do_copy_back: %x %x %x %x gc_ppa:%x %x\n"
+	.string	"gc %d: %d %d %d %d %d %d\n"
 .LC276:
-	.string	"%d prog_step: %x %x buf id= %x ppa = %x hash=%x id = %x plane = %x lpa=%x\n"
+	.string	"GC_STATE_SCAN_ALL_PAGE = %x, vpn0 = %d, vpn1 = %d\n"
 .LC277:
-	.string	"ftl_discard:(%x, %x, %x, %x)\n"
+	.string	"gc free %x, %d\n"
 .LC278:
-	.string	"gc %d: %d %d %d %d %d %d %d\n"
+	.string	"ftlwrite %x %x %x\n"
 .LC279:
-	.string	"gc %d: %d %d %d %d %d %d\n"
+	.string	"ftl_discard:(%x, %x, %x, %x)\n"
 .LC280:
-	.string	"GC_STATE_SCAN_ALL_PAGE = %x, vpn0 = %d, vpn1 = %d\n"
+	.string	"id_block_prog_msb_ff_data slc page = %d pageadd=%x %x\n"
 .LC281:
-	.string	"gc free %x, %d\n"
+	.string	"write_idblock fix data %x %x\n"
 .LC282:
-	.string	"error gc slc free sblk = %x, vpn = %d %d\n"
+	.string	"idblk:"
 .LC283:
-	.string	"vpage0:"
+	.string	"write_idblock totle_sec %x %x\n"
 .LC284:
-	.string	"block %x, vpn = %d %d %d %d\n"
-.LC285:
-	.string	"block %x, vpn = %d %d\n"
-.LC286:
-	.string	"vpage1:"
-.LC287:
-	.string	"ftlwrite %x %x %x\n"
-.LC288:
-	.string	"id_block_prog_msb_ff_data slc page = %d pageadd=%x %x\n"
-.LC289:
-	.string	"write_idblock fix data %x %x\n"
-.LC290:
-	.string	"1 write_idblock fix data %x %x %x\n"
-.LC291:
 	.string	"READ_SECTOR_IO\n"
-.LC292:
+.LC285:
 	.string	"rk_copy_from_user error\n"
-.LC293:
+.LC286:
 	.string	"READ_SECTOR_IO %x %x\n"
-.LC294:
+.LC287:
 	.string	"rk_copy_to_user error\n"
-.LC295:
+.LC288:
 	.string	"WRITE_SECTOR_IO\n"
-.LC296:
+.LC289:
 	.string	"WRITE_SECTOR_IO %x %x\n"
-.LC297:
+.LC290:
 	.string	"END_WRITE_SECTOR_IO\n"
-.LC298:
+.LC291:
 	.string	"END_WRITE_SECTOR_IO %x %x\n"
-.LC299:
+.LC292:
 	.string	"GET_FLASH_INFO_IO\n"
-.LC300:
+.LC293:
 	.string	"GET_BAD_BLOCK_IO\n"
-.LC301:
+.LC294:
 	.string	"GET_LOCK_FLAG_IO\n"
-.LC302:
+.LC295:
 	.string	"GET_PUBLIC_KEY_IO\n"
-.LC303:
+.LC296:
 	.string	"RKNAND_GET_DRM_KEY\n"
-.LC304:
+.LC297:
 	.string	"RKNAND_STORE_DRM_KEY\n"
-.LC305:
+.LC298:
 	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
-.LC306:
+.LC299:
 	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
-.LC307:
+.LC300:
 	.string	"RKNAND_GET_SN_SECTOR\n"
-.LC308:
+.LC301:
 	.string	"RKNAND_LOADER_UNLOCK\n"
-.LC309:
+.LC302:
 	.string	"RKNAND_LOADER_STATUS\n"
-.LC310:
+.LC303:
 	.string	"RKNAND_LOADER_LOCK\n"
-.LC311:
+.LC304:
 	.string	"LockKey not match %d\n"
-.LC312:
+.LC305:
 	.string	"RKNAND_GET_VENDOR_SECTOR\n"
-.LC313:
+.LC306:
 	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
-.LC314:
+.LC307:
 	.string	"return ret = %lx\n"
-.LC315:
+.LC308:
 	.string	"secureBootEn check error\n"
-.LC316:
+.LC309:
 	.string	"\0013vendor storage %x,%x,%x\n"
 	.data
 	.align	3
@@ -26133,7 +26341,7 @@ zftl_nand_flash_para_tbl:
 	.byte	37
 	.byte	60
 	.byte	32
-	.byte	2
+	.byte	3
 	.byte	1
 	.byte	4
 	.byte	0
@@ -26161,7 +26369,7 @@ zftl_nand_flash_para_tbl:
 	.byte	37
 	.byte	60
 	.byte	32
-	.byte	2
+	.byte	3
 	.byte	1
 	.byte	4
 	.byte	0
@@ -26189,7 +26397,7 @@ zftl_nand_flash_para_tbl:
 	.byte	36
 	.byte	60
 	.byte	32
-	.byte	2
+	.byte	3
 	.byte	1
 	.byte	4
 	.byte	0
@@ -26245,7 +26453,7 @@ zftl_nand_flash_para_tbl:
 	.byte	33
 	.byte	40
 	.byte	32
-	.byte	2
+	.byte	3
 	.byte	1
 	.byte	1
 	.byte	0
@@ -26296,7 +26504,7 @@ zftl_nand_flash_para_tbl:
 	.byte	2
 	.byte	1
 	.hword	1056
-	.hword	17881
+	.hword	17857
 	.byte	2
 	.byte	35
 	.byte	40
@@ -26385,7 +26593,7 @@ zftl_nand_flash_para_tbl:
 	.byte	33
 	.byte	40
 	.byte	32
-	.byte	2
+	.byte	3
 	.byte	1
 	.byte	1
 	.byte	0
@@ -26576,7 +26784,7 @@ zftl_nand_flash_para_tbl:
 	.byte	2
 	.byte	1
 	.hword	1048
-	.hword	9695
+	.hword	9671
 	.byte	5
 	.byte	19
 	.byte	70
@@ -26688,7 +26896,7 @@ zftl_nand_flash_para_tbl:
 	.byte	2
 	.byte	1
 	.hword	1024
-	.hword	479
+	.hword	455
 	.byte	4
 	.byte	18
 	.byte	60
@@ -26770,9 +26978,9 @@ zftl_nand_flash_para_tbl:
 	.byte	32
 	.hword	512
 	.byte	2
-	.byte	2
-	.hword	1096
-	.hword	9695
+	.byte	1
+	.hword	2184
+	.hword	9671
 	.byte	5
 	.byte	19
 	.byte	70
@@ -26798,9 +27006,9 @@ zftl_nand_flash_para_tbl:
 	.byte	32
 	.hword	512
 	.byte	2
-	.byte	2
-	.hword	1096
-	.hword	9695
+	.byte	1
+	.hword	2184
+	.hword	9671
 	.byte	5
 	.byte	19
 	.byte	60
@@ -27684,10 +27892,24 @@ gTable_Crc32:
 .LANCHOR0 = . + 0
 .LANCHOR4 = . + 4352
 .LANCHOR5 = . + 21760
-.LANCHOR6 = . + 39168
-.LANCHOR7 = . + 52224
-.LANCHOR8 = . + 56576
-.LANCHOR9 = . + 60928
+.LANCHOR6 = . + 34816
+.LANCHOR7 = . + 39168
+	.type	g_flash_slc_mode, %object
+	.size	g_flash_slc_mode, 1
+g_flash_slc_mode:
+	.zero	1
+	.type	g_slc_mode_addr2, %object
+	.size	g_slc_mode_addr2, 1
+g_slc_mode_addr2:
+	.zero	1
+	.type	g_block_align_addr, %object
+	.size	g_block_align_addr, 2
+g_block_align_addr:
+	.zero	2
+	.type	g_lsb_page_tbl, %object
+	.size	g_lsb_page_tbl, 512
+g_lsb_page_tbl:
+	.zero	512
 	.type	g_nandc_ver, %object
 	.size	g_nandc_ver, 1
 g_nandc_ver:
@@ -27697,6 +27919,7 @@ g_nandc_ver:
 	.size	_c_user_data_density, 4
 _c_user_data_density:
 	.zero	4
+	.zero	4
 	.type	gp_sblk_list_tbl, %object
 	.size	gp_sblk_list_tbl, 8
 gp_sblk_list_tbl:
@@ -27746,6 +27969,11 @@ _c_ftl_blk_pre_plane:
 	.size	gp_blk_info, 8
 gp_blk_info:
 	.zero	8
+	.type	_c_slc_to_xlc_ec_ratio, %object
+	.size	_c_slc_to_xlc_ec_ratio, 2
+_c_slc_to_xlc_ec_ratio:
+	.zero	2
+	.zero	6
 	.type	ftl_sblk_vpn, %object
 	.size	ftl_sblk_vpn, 8
 ftl_sblk_vpn:
@@ -27754,6 +27982,10 @@ ftl_sblk_vpn:
 	.size	gp_ftl_ext_info, 8
 gp_ftl_ext_info:
 	.zero	8
+	.type	gp_data_slc_data_head, %object
+	.size	gp_data_slc_data_head, 8
+gp_data_slc_data_head:
+	.zero	8
 	.type	gp_nand_para_info, %object
 	.size	gp_nand_para_info, 8
 gp_nand_para_info:
@@ -27762,15 +27994,11 @@ gp_nand_para_info:
 	.size	g_idb_ecc_bits, 1
 g_idb_ecc_bits:
 	.zero	1
-	.type	g_flash_slc_mode, %object
-	.size	g_flash_slc_mode, 1
-g_flash_slc_mode:
-	.zero	1
 	.type	g_nand_max_die, %object
 	.size	g_nand_max_die, 1
 g_nand_max_die:
 	.zero	1
-	.zero	5
+	.zero	6
 	.type	g_nand_opt_para, %object
 	.size	g_nand_opt_para, 32
 g_nand_opt_para:
@@ -27818,20 +28046,6 @@ gp_flash_info:
 	.size	g_die_cs_idx, 8
 g_die_cs_idx:
 	.zero	8
-	.type	g_slc_mode_addr2, %object
-	.size	g_slc_mode_addr2, 1
-g_slc_mode_addr2:
-	.zero	1
-	.zero	1
-	.type	g_block_align_addr, %object
-	.size	g_block_align_addr, 2
-g_block_align_addr:
-	.zero	2
-	.type	g_lsb_page_tbl, %object
-	.size	g_lsb_page_tbl, 512
-g_lsb_page_tbl:
-	.zero	512
-	.zero	4
 	.type	g_flash_cur_mode, %object
 	.size	g_flash_cur_mode, 4
 g_flash_cur_mode:
@@ -27865,6 +28079,9 @@ p_free_buf_head:
 	.size	free_buf_count, 1
 free_buf_count:
 	.zero	1
+	.type	sblk_queue_head, %object
+	.size	sblk_queue_head, 1
+sblk_queue_head:
 	.zero	1
 	.type	_c_totle_phy_density, %object
 	.size	_c_totle_phy_density, 4
@@ -27931,28 +28148,29 @@ gc_slc_mode_vpn_th:
 	.size	gc_slc_mode_tlc_vpn_th, 2
 gc_slc_mode_tlc_vpn_th:
 	.zero	2
+	.zero	2
+	.type	_gc_after_discard_en, %object
+	.size	_gc_after_discard_en, 4
+_gc_after_discard_en:
+	.zero	4
 	.type	write_buf_head, %object
 	.size	write_buf_head, 1
 write_buf_head:
 	.zero	1
-	.zero	1
-	.type	read_ahead_lpa, %object
-	.size	read_ahead_lpa, 4
-read_ahead_lpa:
-	.zero	4
-	.type	p_read_ahead_ext_buf, %object
-	.size	p_read_ahead_ext_buf, 8
-p_read_ahead_ext_buf:
-	.zero	8
-	.type	sblk_read_completed_queue_head, %object
-	.size	sblk_read_completed_queue_head, 1
-sblk_read_completed_queue_head:
-	.zero	1
 	.zero	7
 	.type	g_gc_info, %object
 	.size	g_gc_info, 328
 g_gc_info:
 	.zero	328
+	.type	ftl_sblk_vpn_update_id, %object
+	.size	ftl_sblk_vpn_update_id, 2
+ftl_sblk_vpn_update_id:
+	.zero	2
+	.zero	6
+	.type	ftl_sblk_update_list, %object
+	.size	ftl_sblk_update_list, 16
+ftl_sblk_update_list:
+	.zero	16
 	.type	gc_valid_page_ppa, %object
 	.size	gc_valid_page_ppa, 8
 gc_valid_page_ppa:
@@ -27991,10 +28209,6 @@ _c_ftl_nand_planes_num:
 	.size	gp_data_xlc_data_head, 8
 gp_data_xlc_data_head:
 	.zero	8
-	.type	gp_data_slc_data_head, %object
-	.size	gp_data_slc_data_head, 8
-gp_data_slc_data_head:
-	.zero	8
 	.type	gp_data_slc_cache_head, %object
 	.size	gp_data_slc_cache_head, 8
 gp_data_slc_cache_head:
@@ -28015,6 +28229,10 @@ _c_ftl_page_pre_slc_blk:
 	.size	gc_slc_data_index, 2
 gc_slc_data_index:
 	.zero	2
+	.type	gc_xlc_search_index, %object
+	.size	gc_xlc_search_index, 2
+gc_xlc_search_index:
+	.zero	2
 	.type	_min_slc_super_block, %object
 	.size	_min_slc_super_block, 2
 _min_slc_super_block:
@@ -28023,7 +28241,7 @@ _min_slc_super_block:
 	.size	_max_xlc_super_block, 2
 _max_xlc_super_block:
 	.zero	2
-	.zero	4
+	.zero	2
 	.type	gp_free_slc_head, %object
 	.size	gp_free_slc_head, 8
 gp_free_slc_head:
@@ -28036,6 +28254,10 @@ gp_free_xlc_head:
 	.size	gp_free_mix_head, 8
 gp_free_mix_head:
 	.zero	8
+	.type	zftl_print_list_count, %object
+	.size	zftl_print_list_count, 2
+zftl_print_list_count:
+	.zero	2
 	.type	_c_ftl_planes_per_die, %object
 	.size	_c_ftl_planes_per_die, 1
 _c_ftl_planes_per_die:
@@ -28045,10 +28267,6 @@ _c_ftl_planes_per_die:
 	.size	_c_ftl_block_addr_log2, 2
 _c_ftl_block_addr_log2:
 	.zero	2
-	.type	_c_mix_max_slc_ec_count, %object
-	.size	_c_mix_max_slc_ec_count, 2
-_c_mix_max_slc_ec_count:
-	.zero	2
 	.type	_c_mix_max_xlc_ec_count, %object
 	.size	_c_mix_max_xlc_ec_count, 2
 _c_mix_max_xlc_ec_count:
@@ -28057,6 +28275,10 @@ _c_mix_max_xlc_ec_count:
 	.size	_max_slc_super_block, 2
 _max_slc_super_block:
 	.zero	2
+	.type	_c_mix_max_slc_ec_count, %object
+	.size	_c_mix_max_slc_ec_count, 2
+_c_mix_max_slc_ec_count:
+	.zero	2
 	.type	g_flash_3d_mlc_flag, %object
 	.size	g_flash_3d_mlc_flag, 1
 g_flash_3d_mlc_flag:
@@ -28070,7 +28292,7 @@ _c_ftl_block_align_addr:
 	.size	_c_ftl_nand_die_num, 1
 _c_ftl_nand_die_num:
 	.zero	1
-	.zero	1
+	.zero	7
 	.type	lpa_hash, %object
 	.size	lpa_hash, 512
 lpa_hash:
@@ -28087,19 +28309,26 @@ lpa_hash_index:
 	.size	ftl_vpn_update_count, 2
 ftl_vpn_update_count:
 	.zero	2
-	.type	ftl_sblk_vpn_update_id, %object
-	.size	ftl_sblk_vpn_update_id, 2
-ftl_sblk_vpn_update_id:
+	.type	ftl_sblk_update_list_offset, %object
+	.size	ftl_sblk_update_list_offset, 2
+ftl_sblk_update_list_offset:
 	.zero	2
 	.type	sblk_write_completed_queue_head, %object
 	.size	sblk_write_completed_queue_head, 1
 sblk_write_completed_queue_head:
 	.zero	1
-	.type	sblk_queue_head, %object
-	.size	sblk_queue_head, 1
-sblk_queue_head:
+	.type	read_buf_head, %object
+	.size	read_buf_head, 1
+read_buf_head:
+	.zero	1
+	.type	read_buf_count, %object
+	.size	read_buf_count, 1
+read_buf_count:
+	.zero	1
+	.type	sblk_read_completed_queue_head, %object
+	.size	sblk_read_completed_queue_head, 1
+sblk_read_completed_queue_head:
 	.zero	1
-	.zero	2
 	.type	pm_gc_enable, %object
 	.size	pm_gc_enable, 4
 pm_gc_enable:
@@ -28135,7 +28364,11 @@ g_totle_phy_block:
 	.size	gc_state, 1
 gc_state:
 	.zero	1
-	.zero	5
+	.zero	1
+	.type	gc_search_count, %object
+	.size	gc_search_count, 4
+gc_search_count:
+	.zero	4
 	.type	gc_lpa_tbl, %object
 	.size	gc_lpa_tbl, 8
 gc_lpa_tbl:
@@ -28216,15 +28449,10 @@ g_flash_spare_buffer:
 	.size	g_idb_slc_mode_enable, 1
 g_idb_slc_mode_enable:
 	.zero	1
-	.zero	47
-	.type	ftl_tmp_buffer, %object
-	.size	ftl_tmp_buffer, 16384
-ftl_tmp_buffer:
-	.zero	16384
-	.type	ftl_tmp_spare, %object
-	.size	ftl_tmp_spare, 256
-ftl_tmp_spare:
-	.zero	256
+	.type	g_flash_multi_page_read_en, %object
+	.size	g_flash_multi_page_read_en, 1
+g_flash_multi_page_read_en:
+	.zero	1
 	.type	g_flash_reversd_blks, %object
 	.size	g_flash_reversd_blks, 1
 g_flash_reversd_blks:
@@ -28233,12 +28461,11 @@ g_flash_reversd_blks:
 	.size	write_commit_head, 1
 write_commit_head:
 	.zero	1
-	.zero	2
 	.type	ftl_flush_jiffies, %object
 	.size	ftl_flush_jiffies, 4
 ftl_flush_jiffies:
 	.zero	4
-	.zero	56
+	.zero	8
 	.type	ftl_info_spare, %object
 	.size	ftl_info_spare, 256
 ftl_info_spare:
@@ -28269,15 +28496,10 @@ ftl_ext_info_first_write:
 	.size	ftl_ext_info_data_buffer, 16384
 ftl_ext_info_data_buffer:
 	.zero	16384
-	.type	ftl_low_format_cur_blk, %object
-	.size	ftl_low_format_cur_blk, 2
-ftl_low_format_cur_blk:
-	.zero	2
-	.type	_c_ftl_pm_page_num, %object
-	.size	_c_ftl_pm_page_num, 2
-_c_ftl_pm_page_num:
-	.zero	2
-	.zero	4
+	.type	ftl_tmp_spare, %object
+	.size	ftl_tmp_spare, 256
+ftl_tmp_spare:
+	.zero	256
 	.type	g_pm_spare, %object
 	.size	g_pm_spare, 8
 g_pm_spare:
@@ -28286,9 +28508,6 @@ g_pm_spare:
 	.size	pm_first_write, 1
 pm_first_write:
 	.zero	1
-	.type	g_flash_multi_page_read_en, %object
-	.size	g_flash_multi_page_read_en, 1
-g_flash_multi_page_read_en:
 	.zero	1
 	.type	_c_ftl_byte_pre_page, %object
 	.size	_c_ftl_byte_pre_page, 2
@@ -28299,11 +28518,23 @@ _c_ftl_byte_pre_page:
 pm_last_load_ram_id:
 	.zero	1
 	.zero	3
+	.type	read_ahead_lpa, %object
+	.size	read_ahead_lpa, 4
+read_ahead_lpa:
+	.zero	4
 	.type	_c_totle_data_density, %object
 	.size	_c_totle_data_density, 4
 _c_totle_data_density:
 	.zero	4
-	.zero	4
+	.type	_c_ftl_pm_page_num, %object
+	.size	_c_ftl_pm_page_num, 2
+_c_ftl_pm_page_num:
+	.zero	2
+	.type	rk_zftl_enable, %object
+	.size	rk_zftl_enable, 1
+rk_zftl_enable:
+	.zero	1
+	.zero	5
 	.type	gLoaderBootInfo, %object
 	.size	gLoaderBootInfo, 8
 gLoaderBootInfo:
@@ -28316,23 +28547,14 @@ RK29_NANDC1_REG_BASE:
 	.size	_last_read_time, 4
 _last_read_time:
 	.zero	4
+	.type	_last_write_time, %object
+	.size	_last_write_time, 4
+_last_write_time:
 	.zero	4
-	.type	check_vpc_tbl, %object
-	.size	check_vpc_tbl, 4608
-check_vpc_tbl:
-	.zero	4608
 	.type	discard_sector_count, %object
 	.size	discard_sector_count, 4
 discard_sector_count:
 	.zero	4
-	.type	_gc_after_discard_en, %object
-	.size	_gc_after_discard_en, 4
-_gc_after_discard_en:
-	.zero	4
-	.type	_last_write_time, %object
-	.size	_last_write_time, 4
-_last_write_time:
-	.zero	4
 	.zero	4
 	.type	g_idb_buffer, %object
 	.size	g_idb_buffer, 8
@@ -28375,6 +28597,19 @@ gpVendor1Info:
 	.size	g_vendor, 8
 g_vendor:
 	.zero	8
+	.type	ftl_low_format_cur_blk, %object
+	.size	ftl_low_format_cur_blk, 2
+ftl_low_format_cur_blk:
+	.zero	2
+	.zero	62
+	.type	ftl_tmp_buffer, %object
+	.size	ftl_tmp_buffer, 16384
+ftl_tmp_buffer:
+	.zero	16384
+	.type	p_read_ahead_ext_buf, %object
+	.size	p_read_ahead_ext_buf, 8
+p_read_ahead_ext_buf:
+	.zero	8
 	.type	_c_ftl_nand_blks_per_die, %object
 	.size	_c_ftl_nand_blks_per_die, 2
 _c_ftl_nand_blks_per_die:
diff --git a/drivers/soc/rockchip/Kconfig b/drivers/soc/rockchip/Kconfig
index 20da55d9cbb1..af0756c46320 100644
--- a/drivers/soc/rockchip/Kconfig
+++ b/drivers/soc/rockchip/Kconfig
@@ -1,5 +1,7 @@
 if ARCH_ROCKCHIP || COMPILE_TEST
 
+source "drivers/soc/rockchip/Kconfig.cpu"
+
 #
 # Rockchip Soc drivers
 #
diff --git a/drivers/soc/rockchip/Kconfig.cpu b/drivers/soc/rockchip/Kconfig.cpu
new file mode 100644
index 000000000000..c6a830bb27f6
--- /dev/null
+++ b/drivers/soc/rockchip/Kconfig.cpu
@@ -0,0 +1,65 @@
+# SPDX-License-Identifier: GPL-2.0
+
+menu "CPU selection"
+	depends on ARCH_ROCKCHIP
+
+config CPU_RK312X
+	bool "RK3126/8"
+	depends on ARM
+	default y
+
+config CPU_RK3036
+	bool "RK3036"
+	depends on ARM
+	default y
+
+config CPU_RK30XX
+	bool "RK3066/8"
+	depends on ARM
+	default y
+
+config CPU_RK3188
+	bool "RK3188"
+	depends on ARM
+	default y
+
+config CPU_RK3288
+	bool "RK3288"
+	depends on ARM
+	default y
+
+config CPU_RK322X
+	bool "RK3228/9"
+	depends on ARM
+	default y
+
+config CPU_RV110X
+	bool "RV1107/8"
+	depends on ARM
+	default y
+
+config CPU_PX30
+	bool "PX30"
+	default y if ARM64
+
+config CPU_RK3308
+	bool "RK3308"
+	default y if ARM64
+
+config CPU_RK3328
+	bool "RK3328"
+	default y if ARM64
+
+config CPU_RK3366
+	bool "RK3366"
+	default y if ARM64
+
+config CPU_RK3368
+	bool "RK3368"
+	default y if ARM64
+
+config CPU_RK3399
+	bool "RK3399"
+	default y if ARM64
+
+endmenu
diff --git a/include/linux/dmaengine.h b/include/linux/dmaengine.h
index cc535a478bae..6d72a759ff6f 100644
--- a/include/linux/dmaengine.h
+++ b/include/linux/dmaengine.h
@@ -365,6 +365,8 @@ struct dma_slave_config {
 	u32 dst_maxburst;
 	bool device_fc;
 	unsigned int slave_id;
+	unsigned int src_interlace_size;
+	unsigned int dst_interlace_size;
 };
 
 /**
diff --git a/include/sound/pcm.h b/include/sound/pcm.h
index af1fb37c6b26..08db8a8640a0 100644
--- a/include/sound/pcm.h
+++ b/include/sound/pcm.h
@@ -1093,8 +1093,6 @@ unsigned int snd_pcm_rate_to_rate_bit(unsigned int rate);
 unsigned int snd_pcm_rate_bit_to_rate(unsigned int rate_bit);
 unsigned int snd_pcm_rate_mask_intersect(unsigned int rates_a,
 					 unsigned int rates_b);
-unsigned int snd_pcm_rate_range_to_bits(unsigned int rate_min,
-					unsigned int rate_max);
 
 /**
  * snd_pcm_set_runtime_buffer - Set the PCM runtime buffer
@@ -1401,6 +1399,27 @@ static inline u64 pcm_format_to_bits(snd_pcm_format_t pcm_format)
 	return 1ULL << (__force int) pcm_format;
 }
 
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+snd_pcm_sframes_t snd_pcm_vad_read(struct snd_pcm_substream *substream,
+				   void __user *buf, snd_pcm_uframes_t frames);
+/**
+ * snd_pcm_vad_avail - Get the available (readable) space for vad
+ * @runtime: PCM substream instance
+ *
+ * Result is between 0 ... (boundary - 1)
+ */
+snd_pcm_uframes_t snd_pcm_vad_avail(struct snd_pcm_substream *substream);
+/**
+ * snd_pcm_vad_attached - Check whether vad is attached to substream or not
+ * @substream: PCM substream instance
+ *
+ * Result is true for attached or false for detached
+ */
+bool snd_pcm_vad_attached(struct snd_pcm_substream *substream);
+int snd_pcm_vad_preprocess(struct snd_pcm_substream *substream,
+			   void *buf, snd_pcm_uframes_t size);
+#endif
+
 /* printk helpers */
 #define pcm_err(pcm, fmt, args...) \
 	dev_err((pcm)->card->dev, fmt, ##args)
diff --git a/sound/core/pcm_dmaengine.c b/sound/core/pcm_dmaengine.c
index 8eb58c709b14..8e74d9997806 100644
--- a/sound/core/pcm_dmaengine.c
+++ b/sound/core/pcm_dmaengine.c
@@ -142,6 +142,15 @@ static void dmaengine_pcm_dma_complete(void *arg)
 	struct snd_pcm_substream *substream = arg;
 	struct dmaengine_pcm_runtime_data *prtd = substream_to_prtd(substream);
 
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+	if (snd_pcm_vad_attached(substream) &&
+	    substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+		void *buf = substream->runtime->dma_area + prtd->pos;
+
+		snd_pcm_vad_preprocess(substream, buf,
+				       substream->runtime->period_size);
+	}
+#endif
 	prtd->pos += snd_pcm_lib_period_bytes(substream);
 	if (prtd->pos >= snd_pcm_lib_buffer_bytes(substream))
 		prtd->pos = 0;
diff --git a/sound/soc/codecs/rk3308_codec.c b/sound/soc/codecs/rk3308_codec.c
index 54171b60db92..889dce93ef87 100644
--- a/sound/soc/codecs/rk3308_codec.c
+++ b/sound/soc/codecs/rk3308_codec.c
@@ -53,10 +53,39 @@
 
 #define CODEC_DRV_NAME			"rk3308-acodec"
 
+#define ADC_GRP_SKIP_MAGIC		0x1001
+#define ADC_GRP_SKIP_MAGIC2		0x1002
 #define ADC_LR_GROUP_MAX		4
+#define ADC_STABLE_MS			20
 #define DEBUG_POP_ALWAYS		0
 #define ENABLE_AGC			0
 #define HPDET_POLL_MS			2000
+#define NOT_USED			255
+#define LOOPBACK_HANDLE_MS		100
+
+#define GRF_SOC_CON1			0x304
+#define GRF_I2S2_8CH_SDI_SFT		0
+#define GRF_I2S3_4CH_SDI_SFT		8
+#define GRF_I2S1_2CH_SDI_SFT		12
+
+#define GRF_I2S2_8CH_SDI_R_MSK(i, v)	((v >> (i * 2 + GRF_I2S2_8CH_SDI_SFT)) & 0x3)
+#define GRF_I2S2_8CH_SDI_W_MSK(i)	(0x3 << (i * 2 + GRF_I2S2_8CH_SDI_SFT + 16))
+#define GRF_I2S2_8CH_SDI(i, v)		(((v & 0x3) << (i * 2 + GRF_I2S2_8CH_SDI_SFT)) |\
+					 GRF_I2S2_8CH_SDI_W_MSK(i))
+
+#define GRF_I2S3_4CH_SDI_W_MSK(i)	(0x3 << (i * 2 + GRF_I2S3_4CH_SDI_SFT + 16))
+#define GRF_I2S3_4CH_SDI(i, v)		(((v & 0x3) << (i * 2 + GRF_I2S3_4CH_SDI_SFT)) |\
+					 GRF_I2S3_4CH_SDI_W_MSK(i))
+
+#define GRF_I2S1_2CH_SDI_W_MSK		(0x3 << (GRF_I2S1_2CH_SDI_SFT + 16))
+#define GRF_I2S1_2CH_SDI(v)		(((v & 0x3) << GRF_I2S1_2CH_SDI_SFT) |\
+					 GRF_I2S1_2CH_SDI_W_MSK)
+
+enum {
+	ACODEC_TO_I2S2_8CH = 0,
+	ACODEC_TO_I2S3_4CH,
+	ACODEC_TO_I2S1_2CH,
+};
 
 enum {
 	ADC_GRP0_MICIN = 0,
@@ -64,6 +93,12 @@ enum {
 };
 
 enum {
+	ADC_TYPE_NORMAL = 0,
+	ADC_TYPE_LOOPBACK,
+	ADC_TYPE_ALL,
+};
+
+enum {
 	DAC_LINEOUT = 0,
 	DAC_HPOUT = 1,
 	DAC_LINEOUT_HPOUT = 11,
@@ -74,18 +109,29 @@ enum {
 	PATH_BUSY,
 };
 
+enum {
+	PM_NORMAL = 0,
+	PM_LLP_DOWN,		/* light low power down */
+	PM_LLP_UP,
+	PM_DLP_DOWN,		/* deep low power down */
+	PM_DLP_UP,
+	PM_DLP_DOWN2,
+	PM_DLP_UP2,
+};
+
 struct rk3308_codec_priv {
 	const struct device *plat_dev;
 	struct device dev;
 	struct reset_control *reset;
 	struct regmap *regmap;
+	struct regmap *grf;
 	struct clk *pclk;
 	struct clk *mclk_rx;
 	struct clk *mclk_tx;
 	struct gpio_desc *hp_ctl_gpio;
 	struct gpio_desc *spk_ctl_gpio;
+	struct snd_soc_codec *codec;
 	struct snd_soc_jack *hpdet_jack;
-	int irq;
 	/*
 	 * To select ADCs for groups:
 	 *
@@ -94,15 +140,37 @@ struct rk3308_codec_priv {
 	 * grp 2 -- select ADC5 / ADC6
 	 * grp 3 -- select ADC7 / ADC8
 	 */
-	int adc_cur_grp;
+	u32 used_adc_grps;
+	/* The ADC group which is used for loop back */
+	u32 loopback_grp;
+	u32 en_always_grps[ADC_LR_GROUP_MAX];
+	u32 en_always_grps_num;
+	u32 enabled_grps[ADC_LR_GROUP_MAX];
+	u32 i2s_sdis[ADC_LR_GROUP_MAX];
+	u32 to_i2s_grps;
+	u32 delay_loopback_handle_ms;
+	int which_i2s;
+	int irq;
 	int adc_grp0_using_linein;
 	int adc_zerocross;
 	/* 0: line out, 1: hp out, 11: lineout and hpout */
 	int dac_output;
+	int adc_path_state;
 	int dac_path_state;
 
+	int pm_state;
+
+	/* Only hpout do fade-in and fade-out */
+	unsigned int hpout_l_dgain;
+	unsigned int hpout_r_dgain;
+
+	bool enable_all_adcs;
 	bool hp_plugged;
+	bool loopback_dacs_enabled;
+	bool no_deep_low_power;
+	bool no_hp_det;
 	struct delayed_work hpdet_work;
+	struct delayed_work loopback_work;
 
 #if defined(CONFIG_DEBUG_FS)
 	struct dentry *dbg_codec;
@@ -134,6 +202,17 @@ static const DECLARE_TLV_DB_RANGE(rk3308_codec_adc_3_8_mic_gain_tlv,
 	3, 3, TLV_DB_MINMAX_ITEM(2000, 2000),
 );
 
+static bool has_loopback(int loopback_grp);
+
+static int rk3308_codec_hpout_l_get_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol);
+static int rk3308_codec_hpout_l_put_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol);
+static int rk3308_codec_hpout_r_get_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol);
+static int rk3308_codec_hpout_r_put_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol);
+
 static const struct snd_kcontrol_new rk3308_codec_dapm_controls[] = {
 	/* ALC AGC Group */
 	SOC_SINGLE_RANGE_TLV("ALC AGC Group 0 Left Volume",
@@ -407,16 +486,22 @@ static const struct snd_kcontrol_new rk3308_codec_dapm_controls[] = {
 		       0, rk3308_codec_dac_lineout_gain_tlv),
 
 	/* DAC HPOUT */
-	SOC_SINGLE_TLV("DAC HPOUT Left Volume",
-		       RK3308_DAC_ANA_CON05,
-		       RK3308_DAC_L_HPOUT_GAIN_SFT,
-		       RK3308_DAC_L_HPOUT_GAIN_MAX,
-		       0, rk3308_codec_dac_hpout_gain_tlv),
-	SOC_SINGLE_TLV("DAC HPOUT Right Volume",
-		       RK3308_DAC_ANA_CON06,
-		       RK3308_DAC_R_HPOUT_GAIN_SFT,
-		       RK3308_DAC_R_HPOUT_GAIN_MAX,
-		       0, rk3308_codec_dac_hpout_gain_tlv),
+	SOC_SINGLE_EXT_TLV("DAC HPOUT Left Volume",
+			   RK3308_DAC_ANA_CON05,
+			   RK3308_DAC_L_HPOUT_GAIN_SFT,
+			   RK3308_DAC_L_HPOUT_GAIN_MAX,
+			   0,
+			   rk3308_codec_hpout_l_get_tlv,
+			   rk3308_codec_hpout_l_put_tlv,
+			   rk3308_codec_dac_hpout_gain_tlv),
+	SOC_SINGLE_EXT_TLV("DAC HPOUT Right Volume",
+			   RK3308_DAC_ANA_CON06,
+			   RK3308_DAC_R_HPOUT_GAIN_SFT,
+			   RK3308_DAC_R_HPOUT_GAIN_MAX,
+			   0,
+			   rk3308_codec_hpout_r_get_tlv,
+			   rk3308_codec_hpout_r_put_tlv,
+			   rk3308_codec_dac_hpout_gain_tlv),
 
 	/* DAC HPMIX */
 	SOC_SINGLE_RANGE_TLV("DAC HPMIX Left Volume",
@@ -433,18 +518,124 @@ static const struct snd_kcontrol_new rk3308_codec_dapm_controls[] = {
 			     0, rk3308_codec_dac_hpmix_gain_tlv),
 };
 
+static int rk3308_codec_hpout_l_get_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol)
+{
+	return snd_soc_get_volsw_range(kcontrol, ucontrol);
+}
+
+static int rk3308_codec_hpout_l_put_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_soc_kcontrol_codec(kcontrol);
+	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	unsigned int dgain = ucontrol->value.integer.value[0];
+
+	if (dgain > RK3308_DAC_L_HPOUT_GAIN_MAX) {
+		dev_err(rk3308->plat_dev, "%s: invalid l_dgain: %d\n",
+			__func__, dgain);
+		return -EINVAL;
+	}
+
+	rk3308->hpout_l_dgain = dgain;
+
+	return snd_soc_put_volsw_range(kcontrol, ucontrol);
+}
+
+static int rk3308_codec_hpout_r_get_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol)
+{
+	return snd_soc_get_volsw_range(kcontrol, ucontrol);
+}
+
+static int rk3308_codec_hpout_r_put_tlv(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_soc_kcontrol_codec(kcontrol);
+	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	unsigned int dgain = ucontrol->value.integer.value[0];
+
+	if (dgain > RK3308_DAC_R_HPOUT_GAIN_MAX) {
+		dev_err(rk3308->plat_dev, "%s: invalid r_dgain: %d\n",
+			__func__, dgain);
+		return -EINVAL;
+	}
+
+	rk3308->hpout_r_dgain = dgain;
+
+	return snd_soc_put_volsw_range(kcontrol, ucontrol);
+}
+
+static u32 to_mapped_grp(struct rk3308_codec_priv *rk3308, int idx)
+{
+	return rk3308->i2s_sdis[idx];
+}
+
+static bool adc_for_each_grp(struct rk3308_codec_priv *rk3308,
+			     int type, int idx, u32 *grp)
+{
+	if (type == ADC_TYPE_NORMAL) {
+		u32 mapped_grp = to_mapped_grp(rk3308, idx);
+		int max_grps;
+
+		if (rk3308->enable_all_adcs)
+			max_grps = ADC_LR_GROUP_MAX;
+		else
+			max_grps = rk3308->used_adc_grps;
+
+		if (idx >= max_grps)
+			return false;
+
+		if ((!rk3308->loopback_dacs_enabled) &&
+		    has_loopback(rk3308->loopback_grp) &&
+		    rk3308->loopback_grp == idx) {
+			/*
+			 * Ths loopback DACs are closed, and specify the
+			 * loopback ADCs.
+			 */
+			*grp = ADC_GRP_SKIP_MAGIC;
+		} else if (rk3308->enabled_grps[mapped_grp]) {
+			/* To set the skip flag if the ADC GRP is enabled. */
+			*grp = ADC_GRP_SKIP_MAGIC2;
+		} else {
+			*grp = mapped_grp;
+		}
+
+		dev_dbg(rk3308->plat_dev,
+			"ADC_TYPE_NORMAL, idx: %d, get grp: %d\n",
+			idx, *grp);
+	} else if (type == ADC_TYPE_ALL) {
+		if (idx >= ADC_LR_GROUP_MAX)
+			return false;
+
+		*grp = idx;
+		dev_dbg(rk3308->plat_dev,
+			"ADC_TYPE_ALL, idx: %d, get grp: %d\n",
+			idx, *grp);
+	} else {
+		if (idx >= 1)
+			return false;
+
+		*grp = rk3308->loopback_grp;
+		dev_dbg(rk3308->plat_dev,
+			"ADC_TYPE_LOOPBACK, idx: %d, get grp: %d\n",
+			idx, *grp);
+	}
+
+	return true;
+}
+
 /*
  * Maybe there are rk3308_codec_get_adc_path_state() and
  * rk3308_codec_set_adc_path_state() in future.
  */
-
 static int rk3308_codec_get_dac_path_state(struct rk3308_codec_priv *rk3308)
 {
 	return rk3308->dac_path_state;
 }
 
 static void rk3308_codec_set_dac_path_state(struct rk3308_codec_priv *rk3308,
-					   int state)
+					    int state)
 {
 	rk3308->dac_path_state = state;
 }
@@ -482,12 +673,12 @@ static int rk3308_codec_reset(struct snd_soc_codec *codec)
 static int rk3308_codec_adc_dig_reset(struct rk3308_codec_priv *rk3308)
 {
 	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
-				   RK3308_ADC_DIG_WORK,
-				   RK3308_ADC_DIG_RESET);
+			   RK3308_ADC_DIG_WORK,
+			   RK3308_ADC_DIG_RESET);
 	udelay(50);
 	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
-				   RK3308_ADC_DIG_WORK,
-				   RK3308_ADC_DIG_WORK);
+			   RK3308_ADC_DIG_WORK,
+			   RK3308_ADC_DIG_WORK);
 
 	return 0;
 }
@@ -495,12 +686,12 @@ static int rk3308_codec_adc_dig_reset(struct rk3308_codec_priv *rk3308)
 static int rk3308_codec_dac_dig_reset(struct rk3308_codec_priv *rk3308)
 {
 	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
-				   RK3308_DAC_DIG_WORK,
-				   RK3308_DAC_DIG_RESET);
+			   RK3308_DAC_DIG_WORK,
+			   RK3308_DAC_DIG_RESET);
 	udelay(50);
 	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
-				   RK3308_DAC_DIG_WORK,
-				   RK3308_DAC_DIG_WORK);
+			   RK3308_DAC_DIG_WORK,
+			   RK3308_DAC_DIG_WORK);
 
 	return 0;
 }
@@ -532,7 +723,8 @@ static int rk3308_set_dai_fmt(struct snd_soc_dai *codec_dai,
 	struct snd_soc_codec *codec = codec_dai->codec;
 	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
 	unsigned int adc_aif1 = 0, adc_aif2 = 0, dac_aif1 = 0, dac_aif2 = 0;
-	int grp, is_master;
+	int idx, grp, is_master;
+	int type = ADC_TYPE_NORMAL;
 
 	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
 	case SND_SOC_DAIFMT_CBS_CFS:
@@ -615,7 +807,7 @@ static int rk3308_set_dai_fmt(struct snd_soc_dai *codec_dai,
 				   RK3308_ADC_DIG_WORK,
 				   RK3308_ADC_DIG_RESET);
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON01(grp),
 				   RK3308_ADC_I2S_LRC_POL_MSK |
 				   RK3308_ADC_I2S_MODE_MSK,
@@ -633,6 +825,17 @@ static int rk3308_set_dai_fmt(struct snd_soc_dai *codec_dai,
 				   RK3308_ADC_DIG_WORK,
 				   RK3308_ADC_DIG_WORK);
 
+	/* Enable high pass filter and cut-off 20Hz for ADCs */
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON04(grp),
+				   RK3308_ADC_HPF_PATH_MSK,
+				   RK3308_ADC_HPF_PATH_EN);
+		udelay(10);
+		regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON04(grp),
+				   RK3308_ADC_HPF_CUTOFF_MSK,
+				   RK3308_ADC_HPF_CUTOFF_20HZ);
+	}
+
 	regmap_update_bits(rk3308->regmap, RK3308_DAC_DIG_CON01,
 			   RK3308_DAC_I2S_LRC_POL_MSK |
 			   RK3308_DAC_I2S_MODE_MSK,
@@ -646,99 +849,120 @@ static int rk3308_set_dai_fmt(struct snd_soc_dai *codec_dai,
 	return 0;
 }
 
-static int rk3308_hw_params(struct snd_pcm_substream *substream,
-			    struct snd_pcm_hw_params *params,
-			    struct snd_soc_dai *dai)
+static int rk3308_codec_dac_dig_config(struct rk3308_codec_priv *rk3308,
+				       struct snd_pcm_hw_params *params)
 {
-	struct snd_soc_codec *codec = dai->codec;
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	unsigned int dac_aif1 = 0, dac_aif2 = 0;
 
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-		unsigned int dac_aif1 = 0, dac_aif2 = 0;
+	/* Clear the status of DAC DIG Digital reigisters */
+	rk3308_codec_dac_dig_reset(rk3308);
 
-		/* Clear the status of DAC DIG Digital reigisters */
-		rk3308_codec_dac_dig_reset(rk3308);
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_16BITS;
+		break;
+	case SNDRV_PCM_FORMAT_S20_3LE:
+		dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_20BITS;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_24BITS;
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+		dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_32BITS;
+		break;
+	default:
+		return -EINVAL;
+	}
 
-		switch (params_format(params)) {
-		case SNDRV_PCM_FORMAT_S16_LE:
-			dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_16BITS;
-			break;
-		case SNDRV_PCM_FORMAT_S20_3LE:
-			dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_20BITS;
-			break;
-		case SNDRV_PCM_FORMAT_S24_LE:
-			dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_24BITS;
-			break;
-		case SNDRV_PCM_FORMAT_S32_LE:
-			dac_aif1 |= RK3308_DAC_I2S_VALID_LEN_32BITS;
-			break;
-		default:
-			return -EINVAL;
-		}
+	dac_aif1 |= RK3308_DAC_I2S_LR_NORMAL;
+	dac_aif2 |= RK3308_DAC_I2S_WORK;
 
-		dac_aif1 |= RK3308_DAC_I2S_LR_NORMAL;
-		dac_aif2 |= RK3308_DAC_I2S_WORK;
+	regmap_update_bits(rk3308->regmap, RK3308_DAC_DIG_CON01,
+			   RK3308_DAC_I2S_VALID_LEN_MSK |
+			   RK3308_DAC_I2S_LR_MSK,
+			   dac_aif1);
+	regmap_update_bits(rk3308->regmap, RK3308_DAC_DIG_CON02,
+			   RK3308_DAC_I2S_MSK,
+			   dac_aif2);
 
-		regmap_update_bits(rk3308->regmap, RK3308_DAC_DIG_CON01,
-				   RK3308_DAC_I2S_VALID_LEN_MSK |
-				   RK3308_DAC_I2S_LR_MSK,
-				   dac_aif1);
-		regmap_update_bits(rk3308->regmap, RK3308_DAC_DIG_CON02,
-				   RK3308_DAC_I2S_MSK,
-				   dac_aif2);
-	} else {
-		unsigned int adc_aif1 = 0, adc_aif2 = 0;
-		int grp, cur_grp_max;
+	return 0;
+}
 
-		/* Clear the status of ADC DIG Digital reigisters */
-		rk3308_codec_adc_dig_reset(rk3308);
+static int rk3308_codec_adc_dig_config(struct rk3308_codec_priv *rk3308,
+				       struct snd_pcm_hw_params *params)
+{
+	unsigned int adc_aif1 = 0, adc_aif2 = 0;
+	int type = ADC_TYPE_NORMAL;
+	int idx, grp;
 
-		switch (params_format(params)) {
-		case SNDRV_PCM_FORMAT_S16_LE:
-			adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_16BITS;
-			break;
-		case SNDRV_PCM_FORMAT_S20_3LE:
-			adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_20BITS;
-			break;
-		case SNDRV_PCM_FORMAT_S24_LE:
-			adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_24BITS;
-			break;
-		case SNDRV_PCM_FORMAT_S32_LE:
-			adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_32BITS;
-			break;
-		default:
-			return -EINVAL;
-		}
+	/* Clear the status of ADC DIG Digital reigisters */
+	rk3308_codec_adc_dig_reset(rk3308);
 
-		switch (params_channels(params)) {
-		case 1:
-			adc_aif1 |= RK3308_ADC_I2S_MONO;
-			cur_grp_max = 0;
-			break;
-		case 2:
-		case 4:
-		case 6:
-		case 8:
-			adc_aif1 |= RK3308_ADC_I2S_STEREO;
-			cur_grp_max = (params_channels(params) - 1) / 2;
-			break;
-		default:
-			return -EINVAL;
-		}
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_16BITS;
+		break;
+	case SNDRV_PCM_FORMAT_S20_3LE:
+		adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_20BITS;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_24BITS;
+		break;
+	case SNDRV_PCM_FORMAT_S32_LE:
+		adc_aif1 |= RK3308_ADC_I2S_VALID_LEN_32BITS;
+		break;
+	default:
+		return -EINVAL;
+	}
 
-		adc_aif1 |= RK3308_ADC_I2S_LR_NORMAL;
-		adc_aif2 |= RK3308_ADC_I2S_WORK;
-
-		for (grp = 0; grp <= cur_grp_max; grp++) {
-			regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON01(grp),
-					   RK3308_ADC_I2S_VALID_LEN_MSK |
-					   RK3308_ADC_I2S_LR_MSK |
-					   RK3308_ADC_I2S_TYPE_MSK,
-					   adc_aif1);
-			regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON02(grp),
-					   RK3308_ADC_I2S_MSK,
-					   adc_aif2);
-		}
+	switch (params_channels(params)) {
+	case 1:
+		adc_aif1 |= RK3308_ADC_I2S_MONO;
+		break;
+	case 2:
+	case 4:
+	case 6:
+	case 8:
+		adc_aif1 |= RK3308_ADC_I2S_STEREO;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	adc_aif1 |= RK3308_ADC_I2S_LR_NORMAL;
+	adc_aif2 |= RK3308_ADC_I2S_WORK;
+
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON01(grp),
+				   RK3308_ADC_I2S_VALID_LEN_MSK |
+				   RK3308_ADC_I2S_LR_MSK |
+				   RK3308_ADC_I2S_TYPE_MSK,
+				   adc_aif1);
+		regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON02(grp),
+				   RK3308_ADC_I2S_MSK,
+				   adc_aif2);
+	}
+
+	return 0;
+}
+
+static int rk3308_codec_update_adc_grps(struct rk3308_codec_priv *rk3308,
+					struct snd_pcm_hw_params *params)
+{
+	switch (params_channels(params)) {
+	case 1:
+		rk3308->used_adc_grps = 1;
+		break;
+	case 2:
+	case 4:
+	case 6:
+	case 8:
+		rk3308->used_adc_grps = params_channels(params) / 2;
+		break;
+	default:
+		dev_err(rk3308->plat_dev, "Invalid channels: %d\n",
+			params_channels(params));
+		return -EINVAL;
 	}
 
 	return 0;
@@ -778,7 +1002,6 @@ static int rk3308_mute_stream(struct snd_soc_dai *dai, int mute, int stream)
 			else if (rk3308->dac_output == DAC_HPOUT)
 				rk3308_headphone_ctl(rk3308, 1);
 #endif
-
 			for (dgain = 0x7; dgain >= 0x2; dgain--) {
 				/*
 				 * Keep the min -> max digital CIC interpolation
@@ -798,6 +1021,84 @@ static int rk3308_mute_stream(struct snd_soc_dai *dai, int mute, int stream)
 	return 0;
 }
 
+static int rk3308_codec_digital_fadein(struct rk3308_codec_priv *rk3308)
+{
+	unsigned int dgain, dgain_ref;
+
+	if (rk3308->hpout_l_dgain != rk3308->hpout_r_dgain) {
+		pr_warn("HPOUT l_dgain: 0x%x != r_dgain: 0x%x\n",
+			rk3308->hpout_l_dgain, rk3308->hpout_r_dgain);
+		dgain_ref = min(rk3308->hpout_l_dgain, rk3308->hpout_r_dgain);
+	} else {
+		dgain_ref = rk3308->hpout_l_dgain;
+	}
+
+	/*
+	 * We'd better change the gain of the left and right channels
+	 * at the same time to avoid different listening
+	 */
+	for (dgain = RK3308_DAC_L_HPOUT_GAIN_NDB_39;
+	     dgain <= dgain_ref; dgain++) {
+		/* Step 02 decrease dgains for de-pop */
+		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON05,
+				   RK3308_DAC_L_HPOUT_GAIN_MSK,
+				   dgain);
+
+		/* Step 02 decrease dgains for de-pop */
+		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON06,
+				   RK3308_DAC_R_HPOUT_GAIN_MSK,
+				   dgain);
+	}
+
+	return 0;
+}
+
+static int rk3308_codec_digital_fadeout(struct rk3308_codec_priv *rk3308)
+{
+	unsigned int l_dgain, r_dgain;
+
+	/*
+	 * Note. In the step2, adjusting the register step by step to
+	 * the appropriate value and taking 20ms as time step
+	 */
+	regmap_read(rk3308->regmap, RK3308_DAC_ANA_CON05, &l_dgain);
+	l_dgain &= RK3308_DAC_L_HPOUT_GAIN_MSK;
+
+	regmap_read(rk3308->regmap, RK3308_DAC_ANA_CON06, &r_dgain);
+	r_dgain &= RK3308_DAC_R_HPOUT_GAIN_MSK;
+
+	if (l_dgain != r_dgain) {
+		pr_warn("HPOUT l_dgain: 0x%x != r_dgain: 0x%x\n",
+			l_dgain, r_dgain);
+		l_dgain = min(l_dgain, r_dgain);
+	}
+
+	/*
+	 * We'd better change the gain of the left and right channels
+	 * at the same time to avoid different listening
+	 */
+	while (l_dgain >= RK3308_DAC_L_HPOUT_GAIN_NDB_39) {
+		/* Step 02 decrease dgains for de-pop */
+		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON05,
+				   RK3308_DAC_L_HPOUT_GAIN_MSK,
+				   l_dgain);
+
+		/* Step 02 decrease dgains for de-pop */
+		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON06,
+				   RK3308_DAC_R_HPOUT_GAIN_MSK,
+				   l_dgain);
+
+		usleep_range(200, 300);  /* estimated value */
+
+		if (l_dgain == RK3308_DAC_L_HPOUT_GAIN_NDB_39)
+			break;
+
+		l_dgain--;
+	}
+
+	return 0;
+}
+
 static int rk3308_codec_dac_lineout_enable(struct rk3308_codec_priv *rk3308)
 {
 	/* Step 06 */
@@ -967,7 +1268,7 @@ static int rk3308_codec_dac_switch(struct rk3308_codec_priv *rk3308,
 	rk3308->dac_output = dac_output;
 out:
 	dev_dbg(rk3308->plat_dev, "switch dac_output to: %d\n",
-		 rk3308->dac_output);
+		rk3308->dac_output);
 
 	return ret;
 }
@@ -1142,15 +1443,6 @@ static int rk3308_codec_dac_enable(struct rk3308_codec_priv *rk3308)
 
 	udelay(20);
 
-	/* Step 15 */
-	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON12,
-			   RK3308_DAC_L_HPMIX_GAIN_MSK |
-			   RK3308_DAC_R_HPMIX_GAIN_MSK,
-			   RK3308_DAC_L_HPMIX_GAIN_NDB_6 |
-			   RK3308_DAC_R_HPMIX_GAIN_NDB_6);
-
-	udelay(20);
-
 	if (rk3308->dac_output == DAC_HPOUT ||
 	    rk3308->dac_output == DAC_LINEOUT_HPOUT) {
 		/* Step 16 */
@@ -1177,28 +1469,8 @@ static int rk3308_codec_dac_enable(struct rk3308_codec_priv *rk3308)
 	if (rk3308->dac_output == DAC_HPOUT ||
 	    rk3308->dac_output == DAC_LINEOUT_HPOUT) {
 		/* Step 18 */
-		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON05,
-				   RK3308_DAC_L_HPOUT_GAIN_MSK,
-				   RK3308_DAC_L_HPOUT_GAIN_NDB_39);
-
-		/* Step 18 */
-		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON06,
-				   RK3308_DAC_R_HPOUT_GAIN_MSK,
-				   RK3308_DAC_R_HPOUT_GAIN_NDB_39);
-
-		udelay(20);
-	}
-
-	if (rk3308->dac_output == DAC_LINEOUT ||
-	    rk3308->dac_output == DAC_LINEOUT_HPOUT) {
 		/* Step 19 */
-		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON04,
-				   RK3308_DAC_L_LINEOUT_GAIN_MSK |
-				   RK3308_DAC_R_LINEOUT_GAIN_MSK,
-				   RK3308_DAC_L_LINEOUT_GAIN_NDB_6 |
-				   RK3308_DAC_R_LINEOUT_GAIN_NDB_6);
-
-		udelay(20);
+		rk3308_codec_digital_fadein(rk3308);
 	}
 
 	/* TODO: TRY TO TEST DRIVE STRENGTH */
@@ -1206,71 +1478,21 @@ static int rk3308_codec_dac_enable(struct rk3308_codec_priv *rk3308)
 	return 0;
 }
 
-static int rk3308_codec_digital_fadeout(struct rk3308_codec_priv *rk3308)
+static int rk3308_codec_dac_disable(struct rk3308_codec_priv *rk3308)
 {
-	unsigned int l_dgain, r_dgain;
+	/* Step 00, the min digital gain for mute */
 
-	/*
-	 * Note. In the step2, adjusting the register step by step to
-	 * the appropriate value and taking 20ms as time step
-	 */
-	regmap_read(rk3308->regmap, RK3308_DAC_ANA_CON05, &l_dgain);
-	l_dgain &= RK3308_DAC_L_HPOUT_GAIN_MSK;
+	/* Step 01 */
 
-	regmap_read(rk3308->regmap, RK3308_DAC_ANA_CON06, &r_dgain);
-	r_dgain &= RK3308_DAC_R_HPOUT_GAIN_MSK;
+	/* Step 02 */
+	rk3308_codec_digital_fadeout(rk3308);
 
-	if (l_dgain != r_dgain)
-		pr_warn("HPOUT l_dgain: 0x%x != r_dgain: 0x%x\n",
-			l_dgain, r_dgain);
-
-	/*
-	 * We'd better change the gain of the left and right channels
-	 * at the same time to avoid different listening
-	 */
-	while (l_dgain >= RK3308_DAC_L_HPOUT_GAIN_NDB_39) {
-		/* Step 02 decrease dgains for de-pop */
-		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON05,
-				   RK3308_DAC_L_HPOUT_GAIN_MSK,
-				   l_dgain);
-
-		/* Step 02 decrease dgains for de-pop */
-		regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON06,
-				   RK3308_DAC_R_HPOUT_GAIN_MSK,
-				   r_dgain);
-
-		usleep_range(200, 300);  /* estimated value */
-
-		if (l_dgain == RK3308_DAC_L_HPOUT_GAIN_NDB_39)
-			break;
-
-		l_dgain--;
-		r_dgain--;
-	}
-
-	return 0;
-}
-
-static int rk3308_codec_dac_disable(struct rk3308_codec_priv *rk3308)
-{
-	/* Step 00, the min digital gain for mute */
-
-	/* Step 01 */
-	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON04,
-			   RK3308_DAC_L_LINEOUT_GAIN_MSK |
-			   RK3308_DAC_R_LINEOUT_GAIN_MSK,
-			   RK3308_DAC_L_LINEOUT_GAIN_NDB_6 |
-			   RK3308_DAC_R_LINEOUT_GAIN_NDB_6);
-
-	/* Step 02 */
-	rk3308_codec_digital_fadeout(rk3308);
-
-	/* Step 03 */
-	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON13,
-			   RK3308_DAC_L_HPMIX_UNMUTE |
-			   RK3308_DAC_R_HPMIX_UNMUTE,
-			   RK3308_DAC_L_HPMIX_MUTE |
-			   RK3308_DAC_R_HPMIX_MUTE);
+	/* Step 03 */
+	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON13,
+			   RK3308_DAC_L_HPMIX_UNMUTE |
+			   RK3308_DAC_R_HPMIX_UNMUTE,
+			   RK3308_DAC_L_HPMIX_MUTE |
+			   RK3308_DAC_R_HPMIX_MUTE);
 
 	/* Step 04 */
 	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON12,
@@ -1374,28 +1596,20 @@ static int rk3308_codec_dac_disable(struct rk3308_codec_priv *rk3308)
 			   RK3308_DAC_L_HPMIX_INIT |
 			   RK3308_DAC_R_HPMIX_INIT);
 
-	/* Step 19 */
-	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON12,
-			   RK3308_DAC_L_HPMIX_GAIN_MSK |
-			   RK3308_DAC_R_HPMIX_GAIN_MSK,
-			   RK3308_DAC_L_HPMIX_GAIN_NDB_6 |
-			   RK3308_DAC_R_HPMIX_GAIN_NDB_6);
-
 	/*
 	 * Note2. If the ACODEC_DAC_ANA_CON12[7] or ACODEC_DAC_ANA_CON12[3]
 	 * is set to 0x1, add the steps from the section Disable ADC
 	 * Configuration Standard Usage Flow after complete the step 19
 	 *
 	 * IF USING LINE-IN
-	 * rk3308_codec_adc_ana_disable(rk3308);
+	 * rk3308_codec_adc_ana_disable(rk3308, type);
 	 */
 
 	return 0;
 }
 
-static int rk3308_codec_power_on(struct snd_soc_codec *codec)
+static int rk3308_codec_power_on(struct rk3308_codec_priv *rk3308)
 {
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
 	unsigned int v;
 
 	/* 1. Supply the power of digital part and reset the Audio Codec */
@@ -1461,9 +1675,8 @@ static int rk3308_codec_power_on(struct snd_soc_codec *codec)
 	return 0;
 }
 
-static int rk3308_codec_power_off(struct snd_soc_codec *codec)
+static int rk3308_codec_power_off(struct rk3308_codec_priv *rk3308)
 {
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
 	unsigned int v;
 
 	/*
@@ -1533,6 +1746,145 @@ static int rk3308_codec_headset_detect_disable(struct rk3308_codec_priv *rk3308)
 	return 0;
 }
 
+static int rk3308_codec_check_i2s_sdis(struct rk3308_codec_priv *rk3308,
+				       int num)
+{
+	int i, j, ret = 0;
+
+	switch (num) {
+	case 1:
+		rk3308->which_i2s = ACODEC_TO_I2S1_2CH;
+		break;
+	case 2:
+		rk3308->which_i2s = ACODEC_TO_I2S3_4CH;
+		break;
+	case 4:
+		rk3308->which_i2s = ACODEC_TO_I2S2_8CH;
+		break;
+	default:
+		dev_err(rk3308->plat_dev, "Invalid i2s sdis num: %d\n", num);
+		ret = -EINVAL;
+		goto err;
+	}
+
+	for (i = 0; i < num; i++) {
+		if (rk3308->i2s_sdis[i] > ADC_LR_GROUP_MAX - 1) {
+			dev_err(rk3308->plat_dev,
+				"i2s_sdis[%d]: %d is overflow\n",
+				i, rk3308->i2s_sdis[i]);
+			ret = -EINVAL;
+			goto err;
+		}
+
+		for (j = 0; j < num; j++) {
+			if (i == j)
+				continue;
+
+			if (rk3308->i2s_sdis[i] == rk3308->i2s_sdis[j]) {
+				dev_err(rk3308->plat_dev,
+					"Invalid i2s_sdis: [%d]%d == [%d]%d\n",
+					i, rk3308->i2s_sdis[i],
+					j, rk3308->i2s_sdis[j]);
+				ret = -EINVAL;
+				goto err;
+			}
+		}
+	}
+
+err:
+	return ret;
+}
+
+static int rk3308_codec_adc_grps_route_config(struct rk3308_codec_priv *rk3308)
+{
+	int idx = 0;
+
+	if (rk3308->which_i2s == ACODEC_TO_I2S2_8CH) {
+		for (idx = 0; idx < rk3308->to_i2s_grps; idx++) {
+			regmap_write(rk3308->grf, GRF_SOC_CON1,
+				     GRF_I2S2_8CH_SDI(idx, rk3308->i2s_sdis[idx]));
+		}
+	} else if (rk3308->which_i2s == ACODEC_TO_I2S3_4CH) {
+		for (idx = 0; idx < rk3308->to_i2s_grps; idx++) {
+			regmap_write(rk3308->grf, GRF_SOC_CON1,
+				     GRF_I2S3_4CH_SDI(idx, rk3308->i2s_sdis[idx]));
+		}
+	} else if (rk3308->which_i2s == ACODEC_TO_I2S1_2CH) {
+		regmap_write(rk3308->grf, GRF_SOC_CON1,
+			     GRF_I2S1_2CH_SDI(rk3308->i2s_sdis[idx]));
+	}
+
+	return 0;
+}
+
+/* Put default one-to-one mapping */
+static int rk3308_codec_adc_grps_route_default(struct rk3308_codec_priv *rk3308)
+{
+	unsigned int v, idx;
+
+	rk3308->which_i2s = ACODEC_TO_I2S2_8CH;
+	rk3308->to_i2s_grps = ADC_LR_GROUP_MAX;
+	/*
+	 * The GRF values may be kept the previous status after hot reboot,
+	 * we need to update them.
+	 */
+	for (idx = 0; idx < rk3308->to_i2s_grps; idx++) {
+		regmap_read(rk3308->grf, GRF_SOC_CON1, &v);
+		rk3308->i2s_sdis[idx] = GRF_I2S2_8CH_SDI_R_MSK(idx, v);
+	}
+
+	return 0;
+}
+
+static int rk3308_codec_adc_grps_route(struct rk3308_codec_priv *rk3308,
+				       struct device_node *np)
+{
+	int num, ret;
+
+	rk3308->grf = syscon_regmap_lookup_by_phandle(np, "rockchip,grf");
+	if (IS_ERR(rk3308->grf)) {
+		dev_err(rk3308->plat_dev, "Missing rockchip,grf property\n");
+		return PTR_ERR(rk3308->grf);
+	}
+
+	num = of_count_phandle_with_args(np, "rockchip,adc-grps-route", NULL);
+	if (num < 0) {
+		if (num == -ENOENT) {
+			/* Not use 'rockchip,adc-grps-route' property here */
+			rk3308_codec_adc_grps_route_default(rk3308);
+			ret = 0;
+		} else {
+			dev_err(rk3308->plat_dev,
+				"Failed to read 'rockchip,adc-grps-route' num: %d\n",
+				num);
+			ret = num;
+		}
+		return ret;
+	}
+
+	ret = of_property_read_u32_array(np, "rockchip,adc-grps-route",
+					 rk3308->i2s_sdis, num);
+	if (ret < 0) {
+		dev_err(rk3308->plat_dev,
+			"Failed to read 'rockchip,adc-grps-route': %d\n",
+			ret);
+		return ret;
+	}
+
+	ret = rk3308_codec_check_i2s_sdis(rk3308, num);
+	if (ret < 0) {
+		dev_err(rk3308->plat_dev,
+			"Failed to check i2s_sdis: %d\n", ret);
+		return ret;
+	}
+
+	rk3308->to_i2s_grps = num;
+
+	rk3308_codec_adc_grps_route_config(rk3308);
+
+	return 0;
+}
+
 static int check_micbias(int micbias)
 {
 	switch (micbias) {
@@ -1550,6 +1902,32 @@ static int check_micbias(int micbias)
 	return -EINVAL;
 }
 
+static bool has_loopback(int loopback_grp)
+{
+	switch (loopback_grp) {
+	case 0:
+	case 1:
+	case 2:
+	case 3:
+		return true;
+	}
+
+	return false;
+}
+
+static bool has_en_always_grps(struct rk3308_codec_priv *rk3308)
+{
+	int idx;
+
+	for (idx = 0; idx < ADC_LR_GROUP_MAX; idx++) {
+		if (rk3308->en_always_grps[idx] >= 0 &&
+		    rk3308->en_always_grps[idx] <= ADC_LR_GROUP_MAX - 1)
+			return true;
+	}
+
+	return false;
+}
+
 static int rk3308_codec_micbias_enable(struct rk3308_codec_priv *rk3308,
 				       int micbias)
 {
@@ -1632,16 +2010,19 @@ static int rk3308_codec_micbias_disable(struct rk3308_codec_priv *rk3308)
 	return 0;
 }
 
-static int rk3308_codec_alc_enable(struct rk3308_codec_priv *rk3308)
+static int rk3308_codec_alc_enable(struct rk3308_codec_priv *rk3308, int type)
 {
-	int grp = rk3308->adc_cur_grp;
+	int idx, grp;
 
 	/*
 	 * 1. Set he max level and min level of the ALC need to control.
 	 *
 	 * These values are estimated
 	 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ALC_L_DIG_CON05(grp),
 				   RK3308_AGC_LO_8BITS_AGC_MAX_MSK,
 				   0x26);
@@ -1676,7 +2057,10 @@ static int rk3308_codec_alc_enable(struct rk3308_codec_priv *rk3308)
 	 *
 	 * By default is 44.1KHz for sample.
 	 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ALC_L_DIG_CON04(grp),
 				   RK3308_AGC_APPROX_RATE_MSK,
 				   RK3308_AGC_APPROX_RATE_44_1K);
@@ -1688,7 +2072,10 @@ static int rk3308_codec_alc_enable(struct rk3308_codec_priv *rk3308)
 
 #if ENABLE_AGC
 	/* 3. Set ACODEC_ALC_DIG_CON9[6] to 0x1, to enable the ALC module */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ALC_L_DIG_CON09(grp),
 				   RK3308_AGC_FUNC_SEL_MSK,
 				   RK3308_AGC_FUNC_SEL_EN);
@@ -1703,7 +2090,10 @@ static int rk3308_codec_alc_enable(struct rk3308_codec_priv *rk3308)
 	 * (ACODEC_ADC_ANA_CON11+0x80)[1:0] and (ACODEC_ADC_ANA_CON11+0xc0)[1:0]
 	 * to 0x3, to enable the ALC module to control the gain of PGA.
 	 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON11(grp),
 				   RK3308_ADC_ALCL_CON_GAIN_PGAL_MSK |
 				   RK3308_ADC_ALCR_CON_GAIN_PGAR_MSK,
@@ -1721,11 +2111,15 @@ static int rk3308_codec_alc_enable(struct rk3308_codec_priv *rk3308)
 	return 0;
 }
 
-static int rk3308_codec_alc_disable(struct rk3308_codec_priv *rk3308)
+static int rk3308_codec_alc_disable(struct rk3308_codec_priv *rk3308,
+				    int type)
 {
-	int grp;
+	int idx, grp;
+
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
 		/*
 		 * 1. Set ACODEC_ALC_DIG_CON9[6] to 0x0, to disable the ALC
 		 * module, then the ALC output gain will keep to the last value
@@ -1738,7 +2132,10 @@ static int rk3308_codec_alc_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_AGC_FUNC_SEL_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/*
 		 * 2. Set ACODEC_ADC_ANA_CON11[1:0], (ACODEC_ADC_ANA_CON11+0x40)
 		 * [1:0], (ACODEC_ADC_ANA_CON11+0x80)[1:0] and
@@ -1755,11 +2152,15 @@ static int rk3308_codec_alc_disable(struct rk3308_codec_priv *rk3308)
 	return 0;
 }
 
-static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308)
+static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308,
+					int type)
 {
-	int grp;
+	int idx, grp;
+
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
 		/* vendor step 1 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_ADC_WORK |
@@ -1768,7 +2169,10 @@ static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ADC_INIT);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		/* vendor step 2 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON02(grp),
 				   RK3308_ADC_CH1_ALC_WORK |
@@ -1777,7 +2181,10 @@ static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ALC_INIT);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		/* vendor step 3 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_MIC_WORK |
@@ -1786,9 +2193,12 @@ static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_MIC_INIT);
 	}
 
-	usleep_range(2000, 2500);	/* estimated value */
+	usleep_range(200, 250);	/* estimated value */
+
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
 		/* vendor step 1 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_ADC_WORK |
@@ -1797,7 +2207,10 @@ static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ADC_WORK);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		/* vendor step 2 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON02(grp),
 				   RK3308_ADC_CH1_ALC_WORK |
@@ -1806,7 +2219,10 @@ static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ALC_WORK);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		/* vendor step 3 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_MIC_WORK |
@@ -1818,11 +2234,11 @@ static int rk3308_codec_adc_reinit_mics(struct rk3308_codec_priv *rk3308)
 	return 0;
 }
 
-static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
+static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308,
+				       int type)
 {
-	unsigned int adc_aif1 = 0, adc_aif2 = 0;
 	unsigned int agc_func_en;
-	int grp = rk3308->adc_cur_grp;
+	int idx, grp;
 
 	/*
 	 * 1. Set the ACODEC_ADC_ANA_CON7[7:6] and ACODEC_ADC_ANA_CON7[5:4],
@@ -1839,7 +2255,11 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_IN_LINEIN);
 
 		/* Keep other ADCs as MIC-IN */
-		for (grp = 1; grp < ADC_LR_GROUP_MAX; grp++) {
+		for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+			/* The groups without line-in are >= 1 */
+			if (grp < 1 || grp == ADC_GRP_SKIP_MAGIC)
+				continue;
+
 			regmap_update_bits(rk3308->regmap,
 					   RK3308_ADC_ANA_CON07(grp),
 					   RK3308_ADC_CH1_IN_SEL_MSK |
@@ -1848,7 +2268,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 					   RK3308_ADC_CH2_IN_MIC);
 		}
 	} else {
-		for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+		for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+			if (grp == ADC_GRP_SKIP_MAGIC)
+				continue;
+
 			regmap_update_bits(rk3308->regmap,
 					   RK3308_ADC_ANA_CON07(grp),
 					   RK3308_ADC_CH1_IN_SEL_MSK |
@@ -1863,24 +2286,35 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	 * of ADC, to enable the MIC module, to enable the reference voltage
 	 * buffer, and to end the initialization of MIC
 	 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++)
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_MIC_UNMUTE |
 				   RK3308_ADC_CH2_MIC_UNMUTE,
 				   RK3308_ADC_CH1_MIC_UNMUTE |
 				   RK3308_ADC_CH2_MIC_UNMUTE);
+	}
+
 	/*
 	 * 3. Set ACODEC_ADC_ANA_CON6[0] to 0x1, to enable the current source
 	 * of audio
 	 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON06(grp),
 				   RK3308_ADC_CURRENT_MSK,
 				   RK3308_ADC_CURRENT_EN);
 	}
 
 	/* vendor step 4*/
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_BUF_REF_EN |
 				   RK3308_ADC_CH2_BUF_REF_EN,
@@ -1889,7 +2323,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 5 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_MIC_EN |
 				   RK3308_ADC_CH2_MIC_EN,
@@ -1898,7 +2335,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 6 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON02(grp),
 				   RK3308_ADC_CH1_ALC_EN |
 				   RK3308_ADC_CH2_ALC_EN,
@@ -1907,7 +2347,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 7 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_CLK_EN |
 				   RK3308_ADC_CH2_CLK_EN,
@@ -1916,7 +2359,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 8 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_ADC_EN |
 				   RK3308_ADC_CH2_ADC_EN,
@@ -1925,7 +2371,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 9 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_ADC_WORK |
 				   RK3308_ADC_CH2_ADC_WORK,
@@ -1934,7 +2383,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 10 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON02(grp),
 				   RK3308_ADC_CH1_ALC_WORK |
 				   RK3308_ADC_CH2_ALC_WORK,
@@ -1943,7 +2395,10 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 11 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_MIC_WORK |
 				   RK3308_ADC_CH2_MIC_WORK,
@@ -1952,27 +2407,14 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 	}
 
 	/* vendor step 12 */
-	adc_aif1 = RK3308_ADC_CH1_MIC_GAIN_0DB;
-	adc_aif2 = RK3308_ADC_CH2_MIC_GAIN_0DB;
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
-		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON01(grp),
-				   RK3308_ADC_CH1_MIC_GAIN_MSK |
-				   RK3308_ADC_CH2_MIC_GAIN_MSK,
-				   adc_aif1 | adc_aif2);
-	}
 
 	/* vendor step 13 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
-		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON03(grp),
-				   RK3308_ADC_CH1_ALC_GAIN_MSK,
-				   RK3308_ADC_CH1_ALC_GAIN_0DB);
-		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON04(grp),
-				   RK3308_ADC_CH2_ALC_GAIN_MSK,
-				   RK3308_ADC_CH2_ALC_GAIN_0DB);
-	}
 
 	/* vendor step 14 */
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC)
+			continue;
+
 		regmap_read(rk3308->regmap, RK3308_ALC_L_DIG_CON09(grp),
 			    &agc_func_en);
 		if (rk3308->adc_zerocross ||
@@ -1993,19 +2435,18 @@ static int rk3308_codec_adc_ana_enable(struct rk3308_codec_priv *rk3308)
 		}
 	}
 
-	/* vendor step 15, re-init mic */
-	rk3308_codec_adc_reinit_mics(rk3308);
-
-	/* vendor step 16 Begin recording */
-
 	return 0;
 }
 
-static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
+static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308,
+					int type)
 {
-	int grp;
+	int idx, grp;
+
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
 		/* vendor step 1 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON02(grp),
 				   RK3308_ADC_CH1_ZEROCROSS_DET_EN |
@@ -2014,7 +2455,10 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ZEROCROSS_DET_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 2 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_ADC_EN |
@@ -2023,7 +2467,10 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ADC_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 3 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_CLK_EN |
@@ -2032,7 +2479,10 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_CLK_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 4 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON02(grp),
 				   RK3308_ADC_CH1_ALC_EN |
@@ -2041,7 +2491,10 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ALC_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 5 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_MIC_EN |
@@ -2050,7 +2503,10 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_MIC_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 6 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_BUF_REF_EN |
@@ -2059,14 +2515,20 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_BUF_REF_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 7 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON06(grp),
 				   RK3308_ADC_CURRENT_MSK,
 				   RK3308_ADC_CURRENT_DIS);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 8 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON05(grp),
 				   RK3308_ADC_CH1_ADC_WORK |
@@ -2075,7 +2537,10 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ADC_INIT);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 9 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON02(grp),
 				   RK3308_ADC_CH1_ALC_WORK |
@@ -2084,7 +2549,10 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 				   RK3308_ADC_CH2_ALC_INIT);
 	}
 
-	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		if (grp == ADC_GRP_SKIP_MAGIC2)
+			continue;
+
 		/* vendor step 10 */
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON00(grp),
 				   RK3308_ADC_CH1_MIC_WORK |
@@ -2096,13 +2564,14 @@ static int rk3308_codec_adc_ana_disable(struct rk3308_codec_priv *rk3308)
 	return 0;
 }
 
-static int rk3308_codec_open_capture(struct snd_soc_codec *codec)
+static int rk3308_codec_open_capture(struct rk3308_codec_priv *rk3308)
 {
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
-	int grp = 0;
+	int idx, grp = 0;
+	int type = ADC_TYPE_NORMAL;
 
-	rk3308_codec_alc_enable(rk3308);
-	rk3308_codec_adc_ana_enable(rk3308);
+	rk3308_codec_alc_enable(rk3308, type);
+	rk3308_codec_adc_ana_enable(rk3308, type);
+	rk3308_codec_adc_reinit_mics(rk3308, type);
 
 	if (rk3308->adc_grp0_using_linein) {
 		regmap_update_bits(rk3308->regmap, RK3308_ADC_DIG_CON03(0),
@@ -2112,89 +2581,346 @@ static int rk3308_codec_open_capture(struct snd_soc_codec *codec)
 				   RK3308_ADC_R_CH_BIST_MSK,
 				   RK3308_ADC_R_CH_NORMAL_LEFT);
 	} else {
-		for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
-			regmap_update_bits(rk3308->regmap,
-					   RK3308_ADC_DIG_CON03(grp),
-					   RK3308_ADC_L_CH_BIST_MSK,
-					   RK3308_ADC_L_CH_NORMAL_LEFT);
-			regmap_update_bits(rk3308->regmap,
-					   RK3308_ADC_DIG_CON03(grp),
-					   RK3308_ADC_R_CH_BIST_MSK,
-					   RK3308_ADC_R_CH_NORMAL_RIGHT);
+		for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+			if (has_loopback(rk3308->loopback_grp) &&
+			    grp == ADC_GRP_SKIP_MAGIC) {
+				/*
+				 * Switch to dummy BIST mode (BIST keep reset
+				 * now) to keep the zero input data in I2S bus.
+				 *
+				 * It may cause the glitch if we hold the ADC
+				 * digtital i2s module in codec.
+				 *
+				 * Then, the grp which is set from loopback_grp.
+				 */
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(rk3308->loopback_grp),
+						   RK3308_ADC_L_CH_BIST_MSK,
+						   RK3308_ADC_L_CH_BIST_SINE);
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(rk3308->loopback_grp),
+						   RK3308_ADC_R_CH_BIST_MSK,
+						   RK3308_ADC_R_CH_BIST_SINE);
+			} else {
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_L_CH_BIST_MSK,
+						   RK3308_ADC_L_CH_NORMAL_LEFT);
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_R_CH_BIST_MSK,
+						   RK3308_ADC_R_CH_NORMAL_RIGHT);
+			}
 		}
 	}
 
 	return 0;
 }
 
-static int rk3308_codec_close_capture(struct snd_soc_codec *codec)
+static void rk3308_codec_adc_mclk_disable(struct rk3308_codec_priv *rk3308)
 {
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
+			   RK3308_ADC_MCLK_MSK,
+			   RK3308_ADC_MCLK_DIS);
+}
+
+static void rk3308_codec_adc_mclk_enable(struct rk3308_codec_priv *rk3308)
+{
+	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
+			   RK3308_ADC_MCLK_MSK,
+			   RK3308_ADC_MCLK_EN);
+	udelay(20);
+}
+
+static void rk3308_codec_dac_mclk_disable(struct rk3308_codec_priv *rk3308)
+{
+	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
+			   RK3308_DAC_MCLK_MSK,
+			   RK3308_DAC_MCLK_DIS);
+}
+
+static void rk3308_codec_dac_mclk_enable(struct rk3308_codec_priv *rk3308)
+{
+	regmap_update_bits(rk3308->regmap, RK3308_GLB_CON,
+			   RK3308_DAC_MCLK_MSK,
+			   RK3308_DAC_MCLK_EN);
+	udelay(20);
+}
 
-	rk3308_codec_alc_disable(rk3308);
-	rk3308_codec_adc_ana_disable(rk3308);
+static int rk3308_codec_close_all_capture(struct rk3308_codec_priv *rk3308)
+{
+	rk3308_codec_alc_disable(rk3308, ADC_TYPE_ALL);
+	rk3308_codec_adc_ana_disable(rk3308, ADC_TYPE_ALL);
 
 	return 0;
 }
 
-static int rk3308_codec_open_playback(struct snd_soc_codec *codec)
+static int rk3308_codec_close_capture(struct rk3308_codec_priv *rk3308)
 {
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	rk3308_codec_alc_disable(rk3308, ADC_TYPE_NORMAL);
+	rk3308_codec_adc_ana_disable(rk3308, ADC_TYPE_NORMAL);
+
+	return 0;
+}
 
+static int rk3308_codec_open_playback(struct rk3308_codec_priv *rk3308)
+{
 	rk3308_codec_dac_enable(rk3308);
-	rk3308_codec_set_dac_path_state(rk3308, PATH_BUSY);
 
 	return 0;
 }
 
-static int rk3308_codec_close_playback(struct snd_soc_codec *codec)
+static int rk3308_codec_close_playback(struct rk3308_codec_priv *rk3308)
 {
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
-
-	rk3308_codec_set_dac_path_state(rk3308, PATH_IDLE);
 	rk3308_codec_dac_disable(rk3308);
 
 	return 0;
 }
 
-static int rk3308_pcm_startup(struct snd_pcm_substream *substream,
-			      struct snd_soc_dai *dai)
+static int rk3308_codec_llp_down(struct rk3308_codec_priv *rk3308)
 {
-	struct snd_soc_codec *codec = dai->codec;
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
-	int ret = 0;
+	rk3308_codec_adc_mclk_disable(rk3308);
+	rk3308_codec_dac_mclk_disable(rk3308);
 
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
-		ret = rk3308_codec_open_playback(codec);
-	else
-		ret = rk3308_codec_open_capture(codec);
+	return 0;
+}
 
-	regcache_cache_only(rk3308->regmap, false);
-	regcache_sync(rk3308->regmap);
+static int rk3308_codec_llp_up(struct rk3308_codec_priv *rk3308)
+{
+	rk3308_codec_adc_mclk_enable(rk3308);
+	rk3308_codec_dac_mclk_enable(rk3308);
 
-	return ret;
+	return 0;
 }
 
-static void rk3308_pcm_shutdown(struct snd_pcm_substream *substream,
-				struct snd_soc_dai *dai)
+static int rk3308_codec_dlp_down(struct rk3308_codec_priv *rk3308)
 {
-	struct snd_soc_codec *codec = dai->codec;
-	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	rk3308_codec_micbias_disable(rk3308);
+	rk3308_codec_power_off(rk3308);
 
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
-		rk3308_codec_close_playback(codec);
-	else
-		rk3308_codec_close_capture(codec);
+	return 0;
+}
 
-	regcache_cache_only(rk3308->regmap, false);
-	regcache_sync(rk3308->regmap);
+static int rk3308_codec_dlp_up(struct rk3308_codec_priv *rk3308)
+{
+	rk3308_codec_power_on(rk3308);
+	rk3308_codec_micbias_enable(rk3308, RK3308_ADC_MICBIAS_VOLT_0_85);
+
+	return 0;
+}
+
+/* Just used for debug and trace power state */
+static void rk3308_codec_set_pm_state(struct rk3308_codec_priv *rk3308,
+				      int pm_state)
+{
+	int ret;
+
+	switch (pm_state) {
+	case PM_LLP_DOWN:
+		rk3308_codec_llp_down(rk3308);
+		break;
+	case PM_LLP_UP:
+		rk3308_codec_llp_up(rk3308);
+		break;
+	case PM_DLP_DOWN:
+		rk3308_codec_dlp_down(rk3308);
+		break;
+	case PM_DLP_UP:
+		rk3308_codec_dlp_up(rk3308);
+		break;
+	case PM_DLP_DOWN2:
+		clk_disable_unprepare(rk3308->mclk_rx);
+		clk_disable_unprepare(rk3308->mclk_tx);
+		clk_disable_unprepare(rk3308->pclk);
+		break;
+	case PM_DLP_UP2:
+		ret = clk_prepare_enable(rk3308->pclk);
+		if (ret < 0) {
+			dev_err(rk3308->plat_dev,
+				"Failed to enable acodec pclk: %d\n", ret);
+			goto err;
+		}
+
+		ret = clk_prepare_enable(rk3308->mclk_rx);
+		if (ret < 0) {
+			dev_err(rk3308->plat_dev,
+				"Failed to enable i2s mclk_rx: %d\n", ret);
+			goto err;
+		}
+
+		ret = clk_prepare_enable(rk3308->mclk_tx);
+		if (ret < 0) {
+			dev_err(rk3308->plat_dev,
+				"Failed to enable i2s mclk_tx: %d\n", ret);
+			goto err;
+		}
+		break;
+	default:
+		dev_err(rk3308->plat_dev, "Invalid pm_state: %d\n", pm_state);
+		goto err;
+	}
+
+	rk3308->pm_state = pm_state;
+
+err:
+	return;
+}
+
+static void rk3308_codec_update_adcs_status(struct rk3308_codec_priv *rk3308,
+					    int state)
+{
+	int idx;
+
+	if (state == PATH_BUSY) {
+		/*
+		 * The used_adc_grps points out the current max ADC grps
+		 * dynamically during enable ADCs.
+		 */
+		for (idx = 0; idx < rk3308->en_always_grps_num; idx++) {
+			u32 mapped_grp = to_mapped_grp(rk3308, idx);
+
+			rk3308->enabled_grps[mapped_grp] = 1;
+		}
+	} else {
+		/* Clear all of enabled_grps flags if en_always_grps is 0 */
+		for (idx = 0; idx < ADC_LR_GROUP_MAX; idx++) {
+			if (rk3308->en_always_grps[idx])
+				continue;
+
+			rk3308->enabled_grps[idx] = 0;
+		}
+	}
+}
+
+static int rk3308_hw_params(struct snd_pcm_substream *substream,
+			    struct snd_pcm_hw_params *params,
+			    struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	struct snd_pcm_str *playback_str =
+			&substream->pcm->streams[SNDRV_PCM_STREAM_PLAYBACK];
+	int type = ADC_TYPE_LOOPBACK;
+	int idx, grp;
+	int ret;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		/* DAC only supports 2 channels */
+		rk3308_codec_dac_mclk_enable(rk3308);
+		rk3308_codec_open_playback(rk3308);
+		rk3308_codec_dac_dig_config(rk3308, params);
+		rk3308_codec_set_dac_path_state(rk3308, PATH_BUSY);
+	} else {
+		rk3308_codec_adc_mclk_enable(rk3308);
+		ret = rk3308_codec_update_adc_grps(rk3308, params);
+		if (ret < 0)
+			return ret;
+
+		/* Check the DACs are opened */
+		if (playback_str->substream_opened) {
+			rk3308->loopback_dacs_enabled = true;
+			for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_L_CH_BIST_MSK,
+						   RK3308_ADC_L_CH_NORMAL_LEFT);
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_R_CH_BIST_MSK,
+						   RK3308_ADC_R_CH_NORMAL_RIGHT);
+			}
+		} else {
+			rk3308->loopback_dacs_enabled = false;
+			for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_L_CH_BIST_MSK,
+						   RK3308_ADC_L_CH_BIST_SINE);
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_R_CH_BIST_MSK,
+						   RK3308_ADC_R_CH_BIST_SINE);
+			}
+		}
+
+		rk3308_codec_open_capture(rk3308);
+		rk3308_codec_adc_dig_config(rk3308, params);
+		rk3308_codec_update_adcs_status(rk3308, PATH_BUSY);
+	}
+
+	return 0;
+}
+
+static int rk3308_pcm_trigger(struct snd_pcm_substream *substream,
+			      int cmd, struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	int type = ADC_TYPE_LOOPBACK;
+	int idx, grp;
+
+	if (has_loopback(rk3308->loopback_grp) &&
+	    rk3308->dac_output == DAC_LINEOUT &&
+	    substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		if (cmd == SNDRV_PCM_TRIGGER_START) {
+			struct snd_pcm_str *capture_str =
+				&substream->pcm->streams[SNDRV_PCM_STREAM_CAPTURE];
+
+			if (capture_str->substream_opened)
+				queue_delayed_work(system_power_efficient_wq,
+						   &rk3308->loopback_work,
+						   msecs_to_jiffies(rk3308->delay_loopback_handle_ms));
+		} else if (cmd == SNDRV_PCM_TRIGGER_STOP) {
+			/*
+			 * Switch to dummy bist mode to kick the glitch during disable
+			 * ADCs and keep zero input data
+			 */
+			for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_L_CH_BIST_MSK,
+						   RK3308_ADC_L_CH_BIST_SINE);
+				regmap_update_bits(rk3308->regmap,
+						   RK3308_ADC_DIG_CON03(grp),
+						   RK3308_ADC_R_CH_BIST_MSK,
+						   RK3308_ADC_R_CH_BIST_SINE);
+			}
+			rk3308_codec_alc_disable(rk3308, ADC_TYPE_LOOPBACK);
+			rk3308_codec_adc_ana_disable(rk3308, ADC_TYPE_LOOPBACK);
+		}
+	}
+
+	return 0;
+}
+
+static void rk3308_pcm_shutdown(struct snd_pcm_substream *substream,
+				struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		rk3308_codec_close_playback(rk3308);
+		rk3308_codec_dac_mclk_disable(rk3308);
+		regcache_cache_only(rk3308->regmap, false);
+		regcache_sync(rk3308->regmap);
+		rk3308_codec_set_dac_path_state(rk3308, PATH_IDLE);
+	} else {
+		rk3308_codec_close_capture(rk3308);
+		if (!has_en_always_grps(rk3308))
+			rk3308_codec_adc_mclk_disable(rk3308);
+
+		regcache_cache_only(rk3308->regmap, false);
+		regcache_sync(rk3308->regmap);
+		rk3308_codec_update_adcs_status(rk3308, PATH_IDLE);
+	}
 }
 
 static struct snd_soc_dai_ops rk3308_dai_ops = {
 	.hw_params = rk3308_hw_params,
 	.set_fmt = rk3308_set_dai_fmt,
 	.mute_stream = rk3308_mute_stream,
-	.startup = rk3308_pcm_startup,
+	.trigger = rk3308_pcm_trigger,
 	.shutdown = rk3308_pcm_shutdown,
 };
 
@@ -2228,23 +2954,154 @@ static struct snd_soc_dai_driver rk3308_dai[] = {
 
 static int rk3308_suspend(struct snd_soc_codec *codec)
 {
-	rk3308_set_bias_level(codec, SND_SOC_BIAS_OFF);
+	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
 
+	if (rk3308->no_deep_low_power)
+		goto out;
+
+	rk3308_codec_dlp_down(rk3308);
+	clk_disable_unprepare(rk3308->mclk_rx);
+	clk_disable_unprepare(rk3308->mclk_tx);
+	clk_disable_unprepare(rk3308->pclk);
+
+out:
+	rk3308_set_bias_level(codec, SND_SOC_BIAS_OFF);
 	return 0;
 }
 
 static int rk3308_resume(struct snd_soc_codec *codec)
 {
+	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
+	int ret = 0;
+
+	if (rk3308->no_deep_low_power)
+		goto out;
+
+	ret = clk_prepare_enable(rk3308->pclk);
+	if (ret < 0) {
+		dev_err(rk3308->plat_dev,
+			"Failed to enable acodec pclk: %d\n", ret);
+		goto out;
+	}
+
+	ret = clk_prepare_enable(rk3308->mclk_rx);
+	if (ret < 0) {
+		dev_err(rk3308->plat_dev,
+			"Failed to enable i2s mclk_rx: %d\n", ret);
+		goto out;
+	}
+
+	ret = clk_prepare_enable(rk3308->mclk_tx);
+	if (ret < 0) {
+		dev_err(rk3308->plat_dev,
+			"Failed to enable i2s mclk_tx: %d\n", ret);
+		goto out;
+	}
+
+	rk3308_codec_dlp_up(rk3308);
+out:
 	rk3308_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
+	return ret;
+}
+
+static int rk3308_codec_default_gains(struct rk3308_codec_priv *rk3308)
+{
+	int grp;
+
+	/* Prepare ADC gains */
+	/* vendor step 12, set MIC PGA default gains */
+	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON01(grp),
+				   RK3308_ADC_CH1_MIC_GAIN_MSK |
+				   RK3308_ADC_CH2_MIC_GAIN_MSK,
+				   RK3308_ADC_CH1_MIC_GAIN_0DB |
+				   RK3308_ADC_CH2_MIC_GAIN_0DB);
+	}
+
+	/* vendor step 13, set ALC default gains */
+	for (grp = 0; grp < ADC_LR_GROUP_MAX; grp++) {
+		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON03(grp),
+				   RK3308_ADC_CH1_ALC_GAIN_MSK,
+				   RK3308_ADC_CH1_ALC_GAIN_0DB);
+		regmap_update_bits(rk3308->regmap, RK3308_ADC_ANA_CON04(grp),
+				   RK3308_ADC_CH2_ALC_GAIN_MSK,
+				   RK3308_ADC_CH2_ALC_GAIN_0DB);
+	}
+
+	/* Prepare DAC gains */
+	/* Step 15, set HPMIX default gains */
+	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON12,
+			   RK3308_DAC_L_HPMIX_GAIN_MSK |
+			   RK3308_DAC_R_HPMIX_GAIN_MSK,
+			   RK3308_DAC_L_HPMIX_GAIN_NDB_6 |
+			   RK3308_DAC_R_HPMIX_GAIN_NDB_6);
+
+	/* Step 18, set HPOUT default gains */
+	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON05,
+			   RK3308_DAC_L_HPOUT_GAIN_MSK,
+			   RK3308_DAC_L_HPOUT_GAIN_NDB_39);
+	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON06,
+			   RK3308_DAC_R_HPOUT_GAIN_MSK,
+			   RK3308_DAC_R_HPOUT_GAIN_NDB_39);
+
+	/* Using the same gain to HPOUT LR channels */
+	rk3308->hpout_l_dgain = RK3308_DAC_L_HPOUT_GAIN_NDB_39;
+
+	/* Step 19, set LINEOUT default gains */
+	regmap_update_bits(rk3308->regmap, RK3308_DAC_ANA_CON04,
+			   RK3308_DAC_L_LINEOUT_GAIN_MSK |
+			   RK3308_DAC_R_LINEOUT_GAIN_MSK,
+			   RK3308_DAC_L_LINEOUT_GAIN_NDB_6 |
+			   RK3308_DAC_R_LINEOUT_GAIN_NDB_6);
+
+	return 0;
+}
+
+static int rk3308_codec_setup_en_always_adcs(struct rk3308_codec_priv *rk3308,
+					     struct device_node *np)
+{
+	int num, ret;
+
+	num = of_count_phandle_with_args(np, "rockchip,en-always-grps", NULL);
+	if (num < 0) {
+		if (num == -ENOENT) {
+			/*
+			 * If there is note use 'rockchip,en-always-grps'
+			 * property, return 0 is also right.
+			 */
+			ret = 0;
+		} else {
+			dev_err(rk3308->plat_dev,
+				"Failed to read 'rockchip,adc-grps-route' num: %d\n",
+				num);
+			ret = num;
+		}
+
+		rk3308->en_always_grps_num = 0;
+		return ret;
+	}
+
+	rk3308->en_always_grps_num = num;
+
+	ret = of_property_read_u32_array(np, "rockchip,en-always-grps",
+					 rk3308->en_always_grps, num);
+	if (ret < 0) {
+		dev_err(rk3308->plat_dev,
+			"Failed to read 'rockchip,en-always-grps': %d\n",
+			ret);
+		return ret;
+	}
 
 	return 0;
 }
 
-static int rk3308_codec_prepare(struct snd_soc_codec *codec)
+static int rk3308_codec_prepare(struct rk3308_codec_priv *rk3308)
 {
 	/* Clear registers for ADC and DAC */
-	rk3308_codec_close_playback(codec);
-	rk3308_codec_close_capture(codec);
+	rk3308_codec_close_playback(rk3308);
+	rk3308_codec_close_all_capture(rk3308);
+	rk3308_codec_default_gains(rk3308);
+	rk3308_codec_llp_down(rk3308);
 
 	return 0;
 }
@@ -2253,16 +3110,18 @@ static int rk3308_probe(struct snd_soc_codec *codec)
 {
 	struct rk3308_codec_priv *rk3308 = snd_soc_codec_get_drvdata(codec);
 
+	rk3308->codec = codec;
 	rk3308_codec_set_dac_path_state(rk3308, PATH_IDLE);
 
 	rk3308_codec_reset(codec);
-	rk3308_codec_power_on(codec);
+	rk3308_codec_power_on(rk3308);
 
 	/* From vendor recommend */
 	rk3308_codec_micbias_enable(rk3308, RK3308_ADC_MICBIAS_VOLT_0_85);
 
-	rk3308_codec_prepare(codec);
-	rk3308_codec_headset_detect_enable(rk3308);
+	rk3308_codec_prepare(rk3308);
+	if (!rk3308->no_hp_det)
+		rk3308_codec_headset_detect_enable(rk3308);
 
 	regcache_cache_only(rk3308->regmap, false);
 	regcache_sync(rk3308->regmap);
@@ -2276,9 +3135,10 @@ static int rk3308_remove(struct snd_soc_codec *codec)
 
 	rk3308_headphone_ctl(rk3308, 0);
 	rk3308_speaker_ctl(rk3308, 0);
-	rk3308_codec_headset_detect_disable(rk3308);
-	rk3308_codec_power_off(codec);
+	if (!rk3308->no_hp_det)
+		rk3308_codec_headset_detect_disable(rk3308);
 	rk3308_codec_micbias_disable(rk3308);
+	rk3308_codec_power_off(rk3308);
 
 	rk3308_codec_set_dac_path_state(rk3308, PATH_IDLE);
 
@@ -2360,6 +3220,33 @@ static void rk3308_codec_hpdetect_work(struct work_struct *work)
 		enable_irq(rk3308->irq);
 }
 
+static void rk3308_codec_loopback_work(struct work_struct *work)
+{
+	struct rk3308_codec_priv *rk3308 =
+		container_of(work, struct rk3308_codec_priv, loopback_work.work);
+	int type = ADC_TYPE_LOOPBACK;
+	int idx, grp;
+
+	/* Prepare loopback ADCs */
+	rk3308_codec_alc_enable(rk3308, type);
+	rk3308_codec_adc_ana_enable(rk3308, type);
+
+	/* Waiting ADCs are stable */
+	msleep(ADC_STABLE_MS);
+
+	/* Recover normal mode after enable ADCs */
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++) {
+		regmap_update_bits(rk3308->regmap,
+				   RK3308_ADC_DIG_CON03(grp),
+				   RK3308_ADC_L_CH_BIST_MSK,
+				   RK3308_ADC_L_CH_NORMAL_LEFT);
+		regmap_update_bits(rk3308->regmap,
+				   RK3308_ADC_DIG_CON03(grp),
+				   RK3308_ADC_R_CH_BIST_MSK,
+				   RK3308_ADC_R_CH_NORMAL_RIGHT);
+	}
+}
+
 static irqreturn_t rk3308_codec_hpdet_isr(int irq, void *data)
 {
 	struct rk3308_codec_priv *rk3308 = data;
@@ -2397,34 +3284,158 @@ static const struct regmap_config rk3308_codec_regmap_config = {
 	.cache_type = REGCACHE_FLAT,
 };
 
-static ssize_t adc_ch_show(struct device *dev,
-			   struct device_attribute *attr,
-			   char *buf)
+static ssize_t pm_state_show(struct device *dev,
+			     struct device_attribute *attr,
+			     char *buf)
 {
 	struct rk3308_codec_priv *rk3308 =
 		container_of(dev, struct rk3308_codec_priv, dev);
 
-	return sprintf(buf, "adc_cur_grp: %d\n", rk3308->adc_cur_grp);
+	return sprintf(buf, "pm_state: %d\n", rk3308->pm_state);
 }
 
-static ssize_t adc_ch_store(struct device *dev,
-			    struct device_attribute *attr,
-			    const char *buf, size_t count)
+static ssize_t pm_state_store(struct device *dev,
+			      struct device_attribute *attr,
+			      const char *buf, size_t count)
 {
 	struct rk3308_codec_priv *rk3308 =
 		container_of(dev, struct rk3308_codec_priv, dev);
-	unsigned long grp;
-	int ret = kstrtoul(buf, 10, &grp);
+	unsigned long pm_state;
+	int ret = kstrtoul(buf, 10, &pm_state);
 
-	if (ret < 0 || grp > 4) {
-		dev_err(dev, "Invalid LR grp: %ld, ret: %d\n", grp, ret);
+	if (ret < 0) {
+		dev_err(dev, "Invalid pm_state: %ld, ret: %d\n",
+			pm_state, ret);
 		return -EINVAL;
 	}
 
-	rk3308->adc_cur_grp = grp;
+	rk3308_codec_set_pm_state(rk3308, pm_state);
+
+	dev_info(dev, "Store pm_state: %d\n", rk3308->pm_state);
+
+	return count;
+}
+
+static ssize_t adc_grps_show(struct device *dev,
+			     struct device_attribute *attr,
+			     char *buf)
+{
+	struct rk3308_codec_priv *rk3308 =
+		container_of(dev, struct rk3308_codec_priv, dev);
+	u32 grp;
+	int type = ADC_TYPE_NORMAL, count = 0;
+	int idx;
+
+	count += sprintf(buf + count, "current used adc_grps:\n");
+	count += sprintf(buf + count, "- normal:");
+	for (idx = 0; adc_for_each_grp(rk3308, type, idx, &grp); idx++)
+		count += sprintf(buf + count, " %d", grp);
+	count += sprintf(buf + count, "\n");
+	count += sprintf(buf + count, "- loopback: %d\n",
+			 rk3308->loopback_grp);
+
+	return count;
+}
+
+static ssize_t adc_grps_store(struct device *dev,
+			      struct device_attribute *attr,
+			      const char *buf, size_t count)
+{
+	struct rk3308_codec_priv *rk3308 =
+		container_of(dev, struct rk3308_codec_priv, dev);
+	char adc_type;
+	int grps, ret;
+
+	ret = sscanf(buf, "%c,%d", &adc_type, &grps);
+	if (ret != 2) {
+		dev_err(rk3308->plat_dev, "%s sscanf failed: %d\n",
+			__func__, ret);
+		return -EFAULT;
+	}
+
+	if (adc_type == 'n')
+		rk3308->used_adc_grps = grps;
+	else if (adc_type == 'l')
+		rk3308->loopback_grp = grps;
+
+	return count;
+}
+
+static ssize_t adc_grps_route_show(struct device *dev,
+				   struct device_attribute *attr,
+				   char *buf)
+{
+	struct rk3308_codec_priv *rk3308 =
+		container_of(dev, struct rk3308_codec_priv, dev);
+	char which_i2s[32] = {0};
+	int count = 0;
+	u32 grp;
+
+	switch (rk3308->which_i2s) {
+	case ACODEC_TO_I2S1_2CH:
+		strcpy(which_i2s, "i2s1_2ch");
+		break;
+	case ACODEC_TO_I2S3_4CH:
+		strcpy(which_i2s, "i2s3_4ch");
+		break;
+	default:
+		strcpy(which_i2s, "i2s2_8ch");
+		break;
+	}
+
+	count += sprintf(buf + count, "%s from acodec route mapping:\n",
+			 which_i2s);
+	for (grp = 0; grp < rk3308->to_i2s_grps; grp++) {
+		count += sprintf(buf + count, "* sdi_%d <-- sdo_%d\n",
+				 grp, rk3308->i2s_sdis[grp]);
+	}
+
+	return count;
+}
+
+static ssize_t adc_grps_route_store(struct device *dev,
+				    struct device_attribute *attr,
+				    const char *buf, size_t count)
+{
+	struct rk3308_codec_priv *rk3308 =
+		container_of(dev, struct rk3308_codec_priv, dev);
+	int which_i2s, idx, i2s_sdis[ADC_LR_GROUP_MAX];
+	int ret;
+
+	ret = sscanf(buf, "%d,%d,%d,%d,%d", &which_i2s,
+		     &i2s_sdis[0], &i2s_sdis[1], &i2s_sdis[2], &i2s_sdis[3]);
+	if (ret != 5) {
+		dev_err(rk3308->plat_dev, "%s sscanf failed: %d\n",
+			__func__, ret);
+		goto err;
+	}
+
+	if (which_i2s < ACODEC_TO_I2S2_8CH ||
+	    which_i2s > ACODEC_TO_I2S1_2CH) {
+		dev_err(rk3308->plat_dev, "Invalid i2s type: %d\n", which_i2s);
+		goto err;
+	}
+
+	rk3308->which_i2s = which_i2s;
+
+	switch (rk3308->which_i2s) {
+	case ACODEC_TO_I2S1_2CH:
+		rk3308->to_i2s_grps = 1;
+		break;
+	case ACODEC_TO_I2S3_4CH:
+		rk3308->to_i2s_grps = 2;
+		break;
+	default:
+		rk3308->to_i2s_grps = 4;
+		break;
+	}
+
+	for (idx = 0; idx < rk3308->to_i2s_grps; idx++)
+		rk3308->i2s_sdis[idx] = i2s_sdis[idx];
 
-	dev_info(dev, "store grp: %d\n", rk3308->adc_cur_grp);
+	rk3308_codec_adc_grps_route_config(rk3308);
 
+err:
 	return count;
 }
 
@@ -2544,11 +3555,44 @@ static ssize_t dac_output_store(struct device *dev,
 	return count;
 }
 
-static const struct device_attribute adc_ch_attrs[] = {
-	__ATTR(adc_cur_grp, 0644, adc_ch_show, adc_ch_store),
-	__ATTR(adc_grp0_in, 0644, adc_grp0_in_show, adc_grp0_in_store),
-	__ATTR(adc_zerocross, 0644, adc_zerocross_show, adc_zerocross_store),
-	__ATTR(dac_output, 0644, dac_output_show, dac_output_store),
+static ssize_t enable_all_adcs_show(struct device *dev,
+				    struct device_attribute *attr,
+				    char *buf)
+{
+	struct rk3308_codec_priv *rk3308 =
+		container_of(dev, struct rk3308_codec_priv, dev);
+
+	return sprintf(buf, "%d\n", rk3308->enable_all_adcs);
+}
+
+static ssize_t enable_all_adcs_store(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t count)
+{
+	struct rk3308_codec_priv *rk3308 =
+		container_of(dev, struct rk3308_codec_priv, dev);
+	unsigned long enable;
+	int ret = kstrtoul(buf, 10, &enable);
+
+	if (ret < 0) {
+		dev_err(dev, "Invalid enable value: %ld, ret: %d\n",
+			enable, ret);
+		return -EINVAL;
+	}
+
+	rk3308->enable_all_adcs = enable;
+
+	return count;
+}
+
+static const struct device_attribute acodec_attrs[] = {
+	__ATTR_RW(adc_grps),
+	__ATTR_RW(adc_grps_route),
+	__ATTR_RW(adc_grp0_in),
+	__ATTR_RW(adc_zerocross),
+	__ATTR_RW(dac_output),
+	__ATTR_RW(enable_all_adcs),
+	__ATTR_RW(pm_state),
 };
 
 static void rk3308_codec_device_release(struct device *dev)
@@ -2574,8 +3618,8 @@ static int rk3308_codec_sysfs_init(struct platform_device *pdev,
 		return -ENOMEM;
 	}
 
-	for (i = 0; i < ARRAY_SIZE(adc_ch_attrs); i++) {
-		if (device_create_file(dev, &adc_ch_attrs[i])) {
+	for (i = 0; i < ARRAY_SIZE(acodec_attrs); i++) {
+		if (device_create_file(dev, &acodec_attrs[i])) {
 			dev_err(&pdev->dev,
 				"Create 'rk3308-acodec-dev' attr failed\n");
 			device_unregister(dev);
@@ -2775,6 +3819,46 @@ static int rk3308_platform_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+	rk3308->enable_all_adcs =
+		of_property_read_bool(np, "rockchip,enable-all-adcs");
+
+	rk3308->no_deep_low_power =
+		of_property_read_bool(np, "rockchip,no-deep-low-power");
+
+	rk3308->no_hp_det =
+		of_property_read_bool(np, "rockchip,no-hp-det");
+
+	rk3308->delay_loopback_handle_ms = LOOPBACK_HANDLE_MS;
+	ret = of_property_read_u32(np, "rockchip,delay-loopback-handle-ms",
+				   &rk3308->delay_loopback_handle_ms);
+
+	rk3308->loopback_grp = NOT_USED;
+	ret = of_property_read_u32(np, "rockchip,loopback-grp",
+				   &rk3308->loopback_grp);
+	/*
+	 * If there is no loopback on some board, the -EINVAL indicates that
+	 * we don't need add the node, and it is not an error.
+	 */
+	if (ret < 0 && ret != -EINVAL) {
+		dev_err(&pdev->dev, "Failed to read loopback property: %d\n",
+			ret);
+		return ret;
+	}
+
+	ret = rk3308_codec_adc_grps_route(rk3308, np);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Failed to route ADC groups: %d\n",
+			ret);
+		return ret;
+	}
+
+	ret = rk3308_codec_setup_en_always_adcs(rk3308, np);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "Failed to setup enabled always ADCs: %d\n",
+			ret);
+		return ret;
+	}
+
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	base = devm_ioremap_resource(&pdev->dev, res);
 	if (IS_ERR(base)) {
@@ -2791,27 +3875,32 @@ static int rk3308_platform_probe(struct platform_device *pdev)
 		goto failed;
 	}
 
-	rk3308->irq = platform_get_irq(pdev, 0);
-	if (rk3308->irq < 0) {
-		dev_err(&pdev->dev, "Can not get codec irq\n");
-		goto failed;
-	}
+	if (!rk3308->no_hp_det) {
+		rk3308->irq = platform_get_irq(pdev, 0);
+		if (rk3308->irq < 0) {
+			dev_err(&pdev->dev, "Can not get codec irq\n");
+			goto failed;
+		}
 
-	INIT_DELAYED_WORK(&rk3308->hpdet_work, rk3308_codec_hpdetect_work);
+		INIT_DELAYED_WORK(&rk3308->hpdet_work, rk3308_codec_hpdetect_work);
 
-	ret = devm_request_irq(&pdev->dev, rk3308->irq,
-			       rk3308_codec_hpdet_isr,
-			       0,
-			       "acodec-hpdet",
-			       rk3308);
-	if (ret < 0) {
-		dev_err(&pdev->dev, "Failed to request IRQ: %d\n", ret);
-		goto failed;
+		ret = devm_request_irq(&pdev->dev, rk3308->irq,
+				       rk3308_codec_hpdet_isr,
+				       0,
+				       "acodec-hpdet",
+				       rk3308);
+		if (ret < 0) {
+			dev_err(&pdev->dev, "Failed to request IRQ: %d\n", ret);
+			goto failed;
+		}
 	}
 
+	INIT_DELAYED_WORK(&rk3308->loopback_work, rk3308_codec_loopback_work);
+
 	rk3308->adc_grp0_using_linein = ADC_GRP0_MICIN;
 	rk3308->dac_output = DAC_LINEOUT;
 	rk3308->adc_zerocross = 1;
+	rk3308->pm_state = PM_NORMAL;
 
 	platform_set_drvdata(pdev, rk3308);
 
diff --git a/sound/soc/codecs/rk3308_codec.h b/sound/soc/codecs/rk3308_codec.h
index 586400f9905e..914c073a2add 100644
--- a/sound/soc/codecs/rk3308_codec.h
+++ b/sound/soc/codecs/rk3308_codec.h
@@ -26,7 +26,8 @@
 #define ACODEC_ADC_I2S_CTL0			0x04 /* REG 0x01 */
 #define ACODEC_ADC_I2S_CTL1			0x08 /* REG 0x02 */
 #define ACODEC_ADC_BIST_MODE_SEL		0x0c /* REG 0x03 */
-/* Resevred REG 0x04 ~ 0x06 */
+#define ACODEC_ADC_HPF_PATH			0x10 /* REG 0x04 */
+/* Resevred REG 0x05 ~ 0x06 */
 #define ACODEC_ADC_DATA_PATH			0x1c /* REG 0x07 */
 /* Resevred REG 0x08 ~ 0x0f */
 
@@ -123,6 +124,7 @@
 #define RK3308_ADC_DIG_CON01(ch)		(RK3308_ADC_DIG_OFFSET(ch) + ACODEC_ADC_I2S_CTL0)
 #define RK3308_ADC_DIG_CON02(ch)		(RK3308_ADC_DIG_OFFSET(ch) + ACODEC_ADC_I2S_CTL1)
 #define RK3308_ADC_DIG_CON03(ch)		(RK3308_ADC_DIG_OFFSET(ch) + ACODEC_ADC_BIST_MODE_SEL)
+#define RK3308_ADC_DIG_CON04(ch)		(RK3308_ADC_DIG_OFFSET(ch) + ACODEC_ADC_HPF_PATH)
 #define RK3308_ADC_DIG_CON07(ch)		(RK3308_ADC_DIG_OFFSET(ch) + ACODEC_ADC_DATA_PATH)
 
 #define RK3308_ALC_L_DIG_CON00(ch)		(RK3308_ADC_DIG_OFFSET(ch) + ACODEC_ADC_PGA_AGC_L_CTL0)
@@ -208,6 +210,12 @@
 #define RK3308_ADC_BIST_RESET			(0 << 7)
 #define RK3308_DAC_BIST_WORK			(1 << 6)
 #define RK3308_DAC_BIST_RESET			(0 << 6)
+#define RK3308_ADC_MCLK_MSK			(1 << 5)
+#define RK3308_ADC_MCLK_DIS			(1 << 5)
+#define RK3308_ADC_MCLK_EN			(0 << 5)
+#define RK3308_DAC_MCLK_MSK			(1 << 4)
+#define RK3308_DAC_MCLK_DIS			(1 << 4)
+#define RK3308_DAC_MCLK_EN			(0 << 4)
 #define RK3308_CODEC_RST_MSK			(0x7 << 0)
 #define RK3308_ADC_DIG_WORK			(1 << 2)
 #define RK3308_ADC_DIG_RESET			(0 << 2)
@@ -273,6 +281,17 @@
 #define RK3308_ADC_R_CH_BIST_CUBE		(0x1 << RK3308_ADC_R_CH_BIST_SFT)
 #define RK3308_ADC_R_CH_NORMAL_RIGHT		(0x0 << RK3308_ADC_R_CH_BIST_SFT) /* normal mode */
 
+/* RK3308_ADC_DIG_CON04 - REG: 0x0010 */
+#define RK3308_ADC_HPF_PATH_SFT			2
+#define RK3308_ADC_HPF_PATH_MSK			(1 << RK3308_ADC_HPF_PATH_SFT)
+#define RK3308_ADC_HPF_PATH_DIS			(1 << RK3308_ADC_HPF_PATH_SFT)
+#define RK3308_ADC_HPF_PATH_EN			(0 << RK3308_ADC_HPF_PATH_SFT)
+#define RK3308_ADC_HPF_CUTOFF_SFT		0
+#define RK3308_ADC_HPF_CUTOFF_MSK		(0x3 << RK3308_ADC_HPF_CUTOFF_SFT)
+#define RK3308_ADC_HPF_CUTOFF_612HZ		(0x2 << RK3308_ADC_HPF_CUTOFF_SFT)
+#define RK3308_ADC_HPF_CUTOFF_245HZ		(0x1 << RK3308_ADC_HPF_CUTOFF_SFT)
+#define RK3308_ADC_HPF_CUTOFF_20HZ		(0x0 << RK3308_ADC_HPF_CUTOFF_SFT)
+
 /* RK3308_ADC_DIG_CON07 - REG: 0x001c */
 #define RK3308_ADCL_DATA_SFT			4
 #define RK3308_ADCL_DATA(x)			(x << RK3308_ADCL_DATA_SFT)
diff --git a/sound/soc/rockchip/Kconfig b/sound/soc/rockchip/Kconfig
index 6cf42d27849e..e9a97eea68a6 100644
--- a/sound/soc/rockchip/Kconfig
+++ b/sound/soc/rockchip/Kconfig
@@ -6,13 +6,20 @@ config SND_SOC_ROCKCHIP
 	  the Rockchip SoCs' Audio interfaces. You will also need to
 	  select the audio interfaces to support below.
 
+config SND_SOC_ROCKCHIP_FORCE_SRAM
+	bool "Rockchip force using sram buffer"
+	def_bool n
+	help
+	  Say Y if you want to force using sram buffer for pcm buffer,
+	  but the sram size is limited.
+
 config SND_SOC_ROCKCHIP_I2S
 	tristate "Rockchip I2S Device Driver"
 	depends on CLKDEV_LOOKUP && SND_SOC_ROCKCHIP
 	select SND_SOC_GENERIC_DMAENGINE_PCM
 	help
 	  Say Y or M if you want to add support for I2S driver for
-	  Rockchip I2S device. The device supports upto maximum of
+	  Rockchip I2S device. The device supports up to maximum of
 	  8 channels each for play and record.
 
 config SND_SOC_ROCKCHIP_I2S_TDM
@@ -24,6 +31,13 @@ config SND_SOC_ROCKCHIP_I2S_TDM
 	  Rockchip I2S/TDM device. The device supports up to maximum of
 	  8 channels each for play and record.
 
+config SND_SOC_ROCKCHIP_MULTI_DAIS
+	tristate "Rockchip Multi-DAIS Device Driver"
+	depends on CLKDEV_LOOKUP && SND_SOC_ROCKCHIP
+	help
+	  Say Y or M if you want to add support for Multi-dais driver for
+	  Rockchip.
+
 config SND_SOC_ROCKCHIP_PDM
 	tristate "Rockchip PDM Controller Driver"
 	depends on CLKDEV_LOOKUP && SND_SOC_ROCKCHIP
@@ -41,6 +55,40 @@ config SND_SOC_ROCKCHIP_SPDIF
 	  Say Y or M if you want to add support for SPDIF driver for
 	  Rockchip SPDIF transceiver device.
 
+config SND_SOC_ROCKCHIP_VAD
+	tristate "Rockchip Voice Activity Detection Driver"
+	depends on CLKDEV_LOOKUP && SND_SOC_ROCKCHIP
+	help
+	  Say Y or M if you want to add support for VAD driver for
+	  Rockchip VAD device.
+
+config SND_SOC_ROCKCHIP_DA7219
+	tristate "ASoC support for Rockchip boards using a DA7219 codec"
+	depends on SND_SOC_ROCKCHIP && I2C && GPIOLIB
+	select SND_SOC_ROCKCHIP_I2S
+	select SND_SOC_DA7219
+	help
+	  Say Y or M here if you want to add support for SoC audio on Rockchip
+	  boards using the DA7219 codec, such as Veyron.
+
+config SND_SOC_ROCKCHIP_HDMI_ANALOG
+	tristate "ASoC support for Rockchip built-in HDMI and CODEC IC"
+	select SND_SOC_ROCKCHIP_I2S
+	select SND_SOC_HDMI_CODEC
+	help
+	  Say Y or M here if you want to add support for SoC audio on Rockchip
+	  boards using built-in HDMI and CODEC IC, such as RK3368 boards.
+
+config SND_SOC_ROCKCHIP_HDMI_DP
+	tristate "ASoC support for Rockchip built-in HDMI and DP"
+	depends on SND_SOC_ROCKCHIP && CLKDEV_LOOKUP
+	depends on ROCKCHIP_CDN_DP || DRM_DW_HDMI_I2S_AUDIO
+	select SND_SOC_ROCKCHIP_I2S
+	select SND_SOC_HDMI_CODEC
+	help
+	  Say Y or M here if you want to add support for SoC audio on Rockchip
+	  boards using built-in HDMI and DP, such as RK3399 boards.
+
 config SND_SOC_ROCKCHIP_MAX98090
 	tristate "ASoC support for Rockchip boards using a MAX98090 codec"
 	depends on SND_SOC_ROCKCHIP && I2C && GPIOLIB && CLKDEV_LOOKUP
@@ -67,14 +115,20 @@ config SND_SOC_ROCKCHIP_RT5645
 	  Say Y or M here if you want to add support for SoC audio on Rockchip
 	  boards using the RT5645/RT5650 codec, such as Veyron.
 
-config SND_SOC_RK3399_GRU_SOUND
-	tristate "ASoC support multiple codecs for Rockchip RK3399 GRU boards"
-	depends on SND_SOC_ROCKCHIP && I2C && GPIOLIB && CLKDEV_LOOKUP && SPI
+config SND_SOC_ROCKCHIP_RT5651_TC358749
+	tristate "ASoC support for Rockchip boards RT5651 TC358749 HDMIIN"
+	depends on SND_SOC_ROCKCHIP && I2C && GPIOLIB && CLKDEV_LOOKUP
 	select SND_SOC_ROCKCHIP_I2S
-	select SND_SOC_MAX98357A
-	select SND_SOC_RT5514
-	select SND_SOC_DA7219
-	select SND_SOC_RT5514_SPI
+	select SND_SOC_RT5651
+	select SND_SOC_TC358749X
 	help
-	  Say Y or M here if you want to add support multiple codecs for SoC
-	  audio on Rockchip RK3399 GRU boards.
+	  Say Y or M here if you want to add support for SoC audio on Rockchip
+	  boards for RT5651 TC358749 HDMIIn
+
+config SND_SOC_ROCKCHIP_CDNDP
+	tristate "ASoC support for Rockchip CDN DP common codec"
+	depends on SND_SOC_ROCKCHIP && CLKDEV_LOOKUP
+	select SND_SOC_ROCKCHIP_I2S
+	help
+	  Say Y or M here if you want to add support for SoC audio on Rockchip
+	  boards using CDN DP, such as RK3399 boards.
diff --git a/sound/soc/rockchip/Makefile b/sound/soc/rockchip/Makefile
index f903dd13dd37..8518cbaa3822 100644
--- a/sound/soc/rockchip/Makefile
+++ b/sound/soc/rockchip/Makefile
@@ -1,20 +1,38 @@
 # ROCKCHIP Platform Support
 snd-soc-rockchip-i2s-objs := rockchip_i2s.o
 snd-soc-rockchip-i2s-tdm-objs := rockchip_i2s_tdm.o
+snd-soc-rockchip-multi-dais-objs := rockchip_multi_dais.o rockchip_multi_dais_pcm.o
 snd-soc-rockchip-pdm-objs := rockchip_pdm.o
 snd-soc-rockchip-spdif-objs := rockchip_spdif.o
+snd-soc-rockchip-vad-objs := rockchip_vad.o
+ifdef CONFIG_THUMB2_KERNEL
+snd-soc-rockchip-vad-$(CONFIG_THUMB2_KERNEL) += vad_preprocess_thumb.o
+else
+snd-soc-rockchip-vad-$(CONFIG_ARM64) += vad_preprocess_arm64.o
+snd-soc-rockchip-vad-$(CONFIG_ARM) += vad_preprocess_arm.o
+endif
 
 obj-$(CONFIG_SND_SOC_ROCKCHIP_I2S) += snd-soc-rockchip-i2s.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_I2S_TDM) += snd-soc-rockchip-i2s-tdm.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_MULTI_DAIS) += snd-soc-rockchip-multi-dais.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_PDM) += snd-soc-rockchip-pdm.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_SPDIF) += snd-soc-rockchip-spdif.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_VAD) += snd-soc-rockchip-vad.o
 
+snd-soc-rockchip-da7219-objs := rockchip_da7219.o
+snd-soc-rockchip-hdmi-analog-objs := rockchip_hdmi_analog.o
+snd-soc-rockchip-hdmi-dp-objs := rockchip_hdmi_dp.o
 snd-soc-rockchip-max98090-objs := rockchip_max98090.o
 snd-soc-rockchip-multicodecs-objs := rockchip_multicodecs.o
 snd-soc-rockchip-rt5645-objs := rockchip_rt5645.o
-snd-soc-rk3399-gru-sound-objs := rk3399_gru_sound.o
+snd-soc-rockchip-rt5651-tc358749x-objs := rockchip_rt5651_tc358749x.o
+snd-soc-rockchip-cdndp-objs := rockchip_cdndp.o
 
+obj-$(CONFIG_SND_SOC_ROCKCHIP_DA7219) += snd-soc-rockchip-da7219.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_HDMI_ANALOG) += snd-soc-rockchip-hdmi-analog.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_HDMI_DP) += snd-soc-rockchip-hdmi-dp.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_MAX98090) += snd-soc-rockchip-max98090.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_MULTICODECS) += snd-soc-rockchip-multicodecs.o
 obj-$(CONFIG_SND_SOC_ROCKCHIP_RT5645) += snd-soc-rockchip-rt5645.o
-obj-$(CONFIG_SND_SOC_RK3399_GRU_SOUND) += snd-soc-rk3399-gru-sound.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_RT5651_TC358749) += snd-soc-rockchip-rt5651-tc358749x.o
+obj-$(CONFIG_SND_SOC_ROCKCHIP_CDNDP) += snd-soc-rockchip-cdndp.o
diff --git a/sound/soc/rockchip/rockchip_i2s.c b/sound/soc/rockchip/rockchip_i2s.c
index 974915cb4c4f..504d79ef6554 100644
--- a/sound/soc/rockchip/rockchip_i2s.c
+++ b/sound/soc/rockchip/rockchip_i2s.c
@@ -18,6 +18,7 @@
 #include <linux/clk.h>
 #include <linux/pm_runtime.h>
 #include <linux/regmap.h>
+#include <linux/spinlock.h>
 #include <sound/pcm_params.h>
 #include <sound/dmaengine_pcm.h>
 
@@ -51,8 +52,12 @@ struct rk_i2s_dev {
 	bool rx_start;
 	bool is_master_mode;
 	const struct rk_i2s_pins *pins;
+	unsigned int bclk_fs;
 };
 
+/* txctrl/rxctrl lock */
+static DEFINE_SPINLOCK(lock);
+
 static int i2s_runtime_suspend(struct device *dev)
 {
 	struct rk_i2s_dev *i2s = dev_get_drvdata(dev);
@@ -94,6 +99,7 @@ static void rockchip_snd_txctrl(struct rk_i2s_dev *i2s, int on)
 	unsigned int val = 0;
 	int retry = 10;
 
+	spin_lock(&lock);
 	if (on) {
 		regmap_update_bits(i2s->regmap, I2S_DMACR,
 				   I2S_DMACR_TDE_ENABLE, I2S_DMACR_TDE_ENABLE);
@@ -116,6 +122,7 @@ static void rockchip_snd_txctrl(struct rk_i2s_dev *i2s, int on)
 					   I2S_XFER_TXS_STOP |
 					   I2S_XFER_RXS_STOP);
 
+			udelay(150);
 			regmap_update_bits(i2s->regmap, I2S_CLR,
 					   I2S_CLR_TXC | I2S_CLR_RXC,
 					   I2S_CLR_TXC | I2S_CLR_RXC);
@@ -133,6 +140,7 @@ static void rockchip_snd_txctrl(struct rk_i2s_dev *i2s, int on)
 			}
 		}
 	}
+	spin_unlock(&lock);
 }
 
 static void rockchip_snd_rxctrl(struct rk_i2s_dev *i2s, int on)
@@ -140,6 +148,7 @@ static void rockchip_snd_rxctrl(struct rk_i2s_dev *i2s, int on)
 	unsigned int val = 0;
 	int retry = 10;
 
+	spin_lock(&lock);
 	if (on) {
 		regmap_update_bits(i2s->regmap, I2S_DMACR,
 				   I2S_DMACR_RDE_ENABLE, I2S_DMACR_RDE_ENABLE);
@@ -162,6 +171,7 @@ static void rockchip_snd_rxctrl(struct rk_i2s_dev *i2s, int on)
 					   I2S_XFER_TXS_STOP |
 					   I2S_XFER_RXS_STOP);
 
+			udelay(150);
 			regmap_update_bits(i2s->regmap, I2S_CLR,
 					   I2S_CLR_TXC | I2S_CLR_RXC,
 					   I2S_CLR_TXC | I2S_CLR_RXC);
@@ -179,6 +189,7 @@ static void rockchip_snd_rxctrl(struct rk_i2s_dev *i2s, int on)
 			}
 		}
 	}
+	spin_unlock(&lock);
 }
 
 static int rockchip_i2s_set_fmt(struct snd_soc_dai *cpu_dai,
@@ -186,7 +197,9 @@ static int rockchip_i2s_set_fmt(struct snd_soc_dai *cpu_dai,
 {
 	struct rk_i2s_dev *i2s = to_info(cpu_dai);
 	unsigned int mask = 0, val = 0;
+	int ret = 0;
 
+	pm_runtime_get_sync(cpu_dai->dev);
 	mask = I2S_CKR_MSS_MASK;
 	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
 	case SND_SOC_DAIFMT_CBS_CFS:
@@ -199,12 +212,28 @@ static int rockchip_i2s_set_fmt(struct snd_soc_dai *cpu_dai,
 		i2s->is_master_mode = false;
 		break;
 	default:
-		return -EINVAL;
+		ret = -EINVAL;
+		goto err_pm_put;
+	}
+
+	regmap_update_bits(i2s->regmap, I2S_CKR, mask, val);
+
+	mask = I2S_CKR_CKP_MASK;
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		val = I2S_CKR_CKP_NEG;
+		break;
+	case SND_SOC_DAIFMT_IB_NF:
+		val = I2S_CKR_CKP_POS;
+		break;
+	default:
+		ret = -EINVAL;
+		goto err_pm_put;
 	}
 
 	regmap_update_bits(i2s->regmap, I2S_CKR, mask, val);
 
-	mask = I2S_TXCR_IBM_MASK;
+	mask = I2S_TXCR_IBM_MASK | I2S_TXCR_TFS_MASK | I2S_TXCR_PBM_MASK;
 	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
 	case SND_SOC_DAIFMT_RIGHT_J:
 		val = I2S_TXCR_IBM_RSJM;
@@ -215,13 +244,20 @@ static int rockchip_i2s_set_fmt(struct snd_soc_dai *cpu_dai,
 	case SND_SOC_DAIFMT_I2S:
 		val = I2S_TXCR_IBM_NORMAL;
 		break;
+	case SND_SOC_DAIFMT_DSP_A: /* PCM no delay mode */
+		val = I2S_TXCR_TFS_PCM;
+		break;
+	case SND_SOC_DAIFMT_DSP_B: /* PCM delay 1 mode */
+		val = I2S_TXCR_TFS_PCM | I2S_TXCR_PBM_MODE(1);
+		break;
 	default:
-		return -EINVAL;
+		ret = -EINVAL;
+		goto err_pm_put;
 	}
 
 	regmap_update_bits(i2s->regmap, I2S_TXCR, mask, val);
 
-	mask = I2S_RXCR_IBM_MASK;
+	mask = I2S_RXCR_IBM_MASK | I2S_RXCR_TFS_MASK | I2S_RXCR_PBM_MASK;
 	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
 	case SND_SOC_DAIFMT_RIGHT_J:
 		val = I2S_RXCR_IBM_RSJM;
@@ -232,13 +268,23 @@ static int rockchip_i2s_set_fmt(struct snd_soc_dai *cpu_dai,
 	case SND_SOC_DAIFMT_I2S:
 		val = I2S_RXCR_IBM_NORMAL;
 		break;
+	case SND_SOC_DAIFMT_DSP_A: /* PCM no delay mode */
+		val = I2S_RXCR_TFS_PCM;
+		break;
+	case SND_SOC_DAIFMT_DSP_B: /* PCM delay 1 mode */
+		val = I2S_RXCR_TFS_PCM | I2S_RXCR_PBM_MODE(1);
+		break;
 	default:
-		return -EINVAL;
+		ret = -EINVAL;
+		goto err_pm_put;
 	}
 
 	regmap_update_bits(i2s->regmap, I2S_RXCR, mask, val);
 
-	return 0;
+err_pm_put:
+	pm_runtime_put(cpu_dai->dev);
+
+	return ret;
 }
 
 static int rockchip_i2s_hw_params(struct snd_pcm_substream *substream,
@@ -252,11 +298,11 @@ static int rockchip_i2s_hw_params(struct snd_pcm_substream *substream,
 
 	if (i2s->is_master_mode) {
 		mclk_rate = clk_get_rate(i2s->mclk);
-		bclk_rate = 2 * 32 * params_rate(params);
-		if (bclk_rate && mclk_rate % bclk_rate)
+		bclk_rate = i2s->bclk_fs * params_rate(params);
+		if (!bclk_rate)
 			return -EINVAL;
 
-		div_bclk = mclk_rate / bclk_rate;
+		div_bclk = DIV_ROUND_CLOSEST(mclk_rate, bclk_rate);
 		div_lrck = bclk_rate / params_rate(params);
 		regmap_update_bits(i2s->regmap, I2S_CKR,
 				   I2S_CKR_MDIV_MASK,
@@ -532,9 +578,14 @@ static const struct rk_i2s_pins rk3399_i2s_pins = {
 };
 
 static const struct of_device_id rockchip_i2s_match[] = {
+	{ .compatible = "rockchip,px30-i2s", },
+	{ .compatible = "rockchip,rk3036-i2s", },
 	{ .compatible = "rockchip,rk3066-i2s", },
+	{ .compatible = "rockchip,rk3128-i2s", },
 	{ .compatible = "rockchip,rk3188-i2s", },
 	{ .compatible = "rockchip,rk3288-i2s", },
+	{ .compatible = "rockchip,rk3328-i2s", },
+	{ .compatible = "rockchip,rk3368-i2s", },
 	{ .compatible = "rockchip,rk3399-i2s", .data = &rk3399_i2s_pins },
 	{},
 };
@@ -600,11 +651,11 @@ static int rockchip_i2s_probe(struct platform_device *pdev)
 
 	i2s->playback_dma_data.addr = res->start + I2S_TXDR;
 	i2s->playback_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
-	i2s->playback_dma_data.maxburst = 4;
+	i2s->playback_dma_data.maxburst = 8;
 
 	i2s->capture_dma_data.addr = res->start + I2S_RXDR;
 	i2s->capture_dma_data.addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES;
-	i2s->capture_dma_data.maxburst = 4;
+	i2s->capture_dma_data.maxburst = 8;
 
 	dev_set_drvdata(&pdev->dev, i2s);
 
@@ -631,6 +682,12 @@ static int rockchip_i2s_probe(struct platform_device *pdev)
 			soc_dai->capture.channels_max = val;
 	}
 
+	i2s->bclk_fs = 64;
+	if (!of_property_read_u32(node, "rockchip,bclk-fs", &val)) {
+		if ((val >= 32) && (val % 2 == 0))
+			i2s->bclk_fs = val;
+	}
+
 	ret = devm_snd_soc_register_component(&pdev->dev,
 					      &rockchip_i2s_component,
 					      soc_dai, 1);
@@ -640,6 +697,8 @@ static int rockchip_i2s_probe(struct platform_device *pdev)
 		goto err_suspend;
 	}
 
+	if (of_property_read_bool(node, "rockchip,no-dmaengine"))
+		return ret;
 	ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
 	if (ret) {
 		dev_err(&pdev->dev, "Could not register PCM\n");
@@ -671,9 +730,35 @@ static int rockchip_i2s_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_PM_SLEEP
+static int rockchip_i2s_suspend(struct device *dev)
+{
+	struct rk_i2s_dev *i2s = dev_get_drvdata(dev);
+
+	regcache_mark_dirty(i2s->regmap);
+
+	return 0;
+}
+
+static int rockchip_i2s_resume(struct device *dev)
+{
+	struct rk_i2s_dev *i2s = dev_get_drvdata(dev);
+	int ret;
+
+	ret = pm_runtime_get_sync(dev);
+	if (ret < 0)
+		return ret;
+	ret = regcache_sync(i2s->regmap);
+	pm_runtime_put(dev);
+
+	return ret;
+}
+#endif
+
 static const struct dev_pm_ops rockchip_i2s_pm_ops = {
 	SET_RUNTIME_PM_OPS(i2s_runtime_suspend, i2s_runtime_resume,
 			   NULL)
+	SET_SYSTEM_SLEEP_PM_OPS(rockchip_i2s_suspend, rockchip_i2s_resume)
 };
 
 static struct platform_driver rockchip_i2s_driver = {
diff --git a/sound/soc/rockchip/rockchip_i2s.h b/sound/soc/rockchip/rockchip_i2s.h
index 31f11fd25393..a7b8527d8a73 100644
--- a/sound/soc/rockchip/rockchip_i2s.h
+++ b/sound/soc/rockchip/rockchip_i2s.h
@@ -41,6 +41,7 @@
 #define I2S_TXCR_TFS_SHIFT	5
 #define I2S_TXCR_TFS_I2S	(0 << I2S_TXCR_TFS_SHIFT)
 #define I2S_TXCR_TFS_PCM	(1 << I2S_TXCR_TFS_SHIFT)
+#define I2S_TXCR_TFS_MASK	(1 << I2S_TXCR_TFS_SHIFT)
 #define I2S_TXCR_VDW_SHIFT	0
 #define I2S_TXCR_VDW(x)		((x - 1) << I2S_TXCR_VDW_SHIFT)
 #define I2S_TXCR_VDW_MASK	(0x1f << I2S_TXCR_VDW_SHIFT)
@@ -70,6 +71,7 @@
 #define I2S_RXCR_TFS_SHIFT	5
 #define I2S_RXCR_TFS_I2S	(0 << I2S_RXCR_TFS_SHIFT)
 #define I2S_RXCR_TFS_PCM	(1 << I2S_RXCR_TFS_SHIFT)
+#define I2S_RXCR_TFS_MASK	(1 << I2S_RXCR_TFS_SHIFT)
 #define I2S_RXCR_VDW_SHIFT	0
 #define I2S_RXCR_VDW(x)		((x - 1) << I2S_RXCR_VDW_SHIFT)
 #define I2S_RXCR_VDW_MASK	(0x1f << I2S_RXCR_VDW_SHIFT)
@@ -91,6 +93,7 @@
 #define I2S_CKR_CKP_SHIFT	26
 #define I2S_CKR_CKP_NEG		(0 << I2S_CKR_CKP_SHIFT)
 #define I2S_CKR_CKP_POS		(1 << I2S_CKR_CKP_SHIFT)
+#define I2S_CKR_CKP_MASK	(1 << I2S_CKR_CKP_SHIFT)
 #define I2S_CKR_RLP_SHIFT	25
 #define I2S_CKR_RLP_NORMAL	(0 << I2S_CKR_RLP_SHIFT)
 #define I2S_CKR_RLP_OPPSITE	(1 << I2S_CKR_RLP_SHIFT)
diff --git a/sound/soc/rockchip/rockchip_i2s_tdm.c b/sound/soc/rockchip/rockchip_i2s_tdm.c
index 01c820ceacac..908714d5a070 100644
--- a/sound/soc/rockchip/rockchip_i2s_tdm.c
+++ b/sound/soc/rockchip/rockchip_i2s_tdm.c
@@ -116,6 +116,14 @@ static inline struct rk_i2s_tdm_dev *to_info(struct snd_soc_dai *dai)
 	return snd_soc_dai_get_drvdata(dai);
 }
 
+#if defined(CONFIG_ARM) && !defined(writeq)
+static inline void __raw_writeq(u64 val, volatile void __iomem *addr)
+{
+	asm volatile("strd %0, %H0, [%1]" : : "r" (val), "r" (addr));
+}
+#define writeq(v,c) ({ __iowmb(); __raw_writeq((__force u64) cpu_to_le64(v), c); })
+#endif
+
 static void rockchip_snd_xfer_reset_assert(struct rk_i2s_tdm_dev *i2s_tdm,
 					   int tx_bank, int tx_offset,
 					   int rx_bank, int rx_offset)
@@ -145,7 +153,7 @@ static void rockchip_snd_xfer_reset_assert(struct rk_i2s_tdm_dev *i2s_tdm,
 			addr = cru_reset + (rx_bank * 4);
 		}
 
-		if (IS_ALIGNED((u64)addr, 8)) {
+		if (IS_ALIGNED((uintptr_t)addr, 8)) {
 			writeq(val, addr);
 			break;
 		}
@@ -189,7 +197,7 @@ static void rockchip_snd_xfer_reset_deassert(struct rk_i2s_tdm_dev *i2s_tdm,
 			addr = cru_reset + (rx_bank * 4);
 		}
 
-		if (IS_ALIGNED((u64)addr, 8)) {
+		if (IS_ALIGNED((uintptr_t)addr, 8)) {
 			writeq(val, addr);
 			break;
 		}
@@ -1233,6 +1241,8 @@ static int rockchip_i2s_tdm_probe(struct platform_device *pdev)
 		goto err_suspend;
 	}
 
+	if (of_property_read_bool(node, "rockchip,no-dmaengine"))
+		return ret;
 	ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
 	if (ret) {
 		dev_err(&pdev->dev, "Could not register PCM\n");
diff --git a/sound/soc/rockchip/rockchip_multi_dais.c b/sound/soc/rockchip/rockchip_multi_dais.c
new file mode 100644
index 000000000000..3d1eaa8ae4f4
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_multi_dais.c
@@ -0,0 +1,521 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ALSA SoC Audio Layer - Rockchip Multi-DAIS  driver
+ *
+ * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
+ * Author: Sugar Zhang <sugar.zhang@rock-chips.com>
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/mfd/syscon.h>
+#include <linux/of_device.h>
+#include <linux/pm_runtime.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#include "rockchip_multi_dais.h"
+
+#define BITCLOCK_INV_STR	"bitclock-inversion"
+#define FRAME_INV_STR		"frame-inversion"
+#define BITCLOCK_MASTER_STR	"bitclock-master"
+#define FRAME_MASTER_STR	"frame-master"
+#define DAIS_DRV_NAME		"rockchip-mdais"
+#define RK3308_GRF_SOC_CON2	0x308
+
+static inline struct rk_mdais_dev *to_info(struct snd_soc_dai *dai)
+{
+	return snd_soc_dai_get_drvdata(dai);
+}
+
+static void hw_refine_channels(struct snd_pcm_hw_params *params,
+			       unsigned int channel)
+{
+	struct snd_interval *c =
+		hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS);
+
+	c->min = channel;
+	c->max = channel;
+}
+
+static int rockchip_mdais_hw_params(struct snd_pcm_substream *substream,
+				    struct snd_pcm_hw_params *params,
+				    struct snd_soc_dai *dai)
+{
+	struct rk_mdais_dev *mdais = to_info(dai);
+	struct snd_pcm_hw_params *cparams;
+	struct snd_soc_dai *child;
+	unsigned int *channel_maps;
+	int ret = 0, i = 0;
+
+	cparams = kmemdup(params, sizeof(*params), GFP_KERNEL);
+	if (IS_ERR(cparams))
+		return PTR_ERR(cparams);
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		channel_maps = mdais->playback_channel_maps;
+	else
+		channel_maps = mdais->capture_channel_maps;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		if (channel_maps[i])
+			hw_refine_channels(cparams, channel_maps[i]);
+		if (child->driver->ops && child->driver->ops->hw_params) {
+			ret = child->driver->ops->hw_params(substream, cparams, child);
+			if (ret < 0) {
+				dev_err(dai->dev, "ASoC: can't set %s hw params: %d\n",
+					dai->name, ret);
+				return ret;
+			}
+		}
+	}
+
+	kfree(cparams);
+	return 0;
+}
+
+static int rockchip_mdais_trigger(struct snd_pcm_substream *substream,
+				  int cmd, struct snd_soc_dai *dai)
+{
+	struct rk_mdais_dev *mdais = to_info(dai);
+	struct snd_soc_dai *child;
+	int ret = 0, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		if (child->driver->ops && child->driver->ops->trigger) {
+			ret = child->driver->ops->trigger(substream,
+							  cmd, child);
+			if (ret < 0)
+				return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int rockchip_mdais_set_sysclk(struct snd_soc_dai *cpu_dai, int clk_id,
+				     unsigned int freq, int dir)
+{
+	struct rk_mdais_dev *mdais = to_info(cpu_dai);
+	struct snd_soc_dai *child;
+	int ret, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		ret = snd_soc_dai_set_sysclk(child, clk_id, freq, dir);
+		if (ret && ret != -ENOTSUPP)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int rockchip_mdais_set_fmt(struct snd_soc_dai *cpu_dai,
+				  unsigned int fmt)
+{
+	struct rk_mdais_dev *mdais = to_info(cpu_dai);
+	struct snd_soc_dai *child;
+	unsigned int dai_fmt;
+	int ret, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		dai_fmt = fmt;
+		if (mdais->dais[i].fmt_msk) {
+			dai_fmt &= ~(mdais->dais[i].fmt_msk);
+			dai_fmt |= mdais->dais[i].fmt;
+		}
+		ret = snd_soc_dai_set_fmt(child, dai_fmt);
+		if (ret && ret != -ENOTSUPP)
+			return ret;
+	}
+
+	return 0;
+}
+
+static int rockchip_mdais_dai_probe(struct snd_soc_dai *dai)
+{
+	struct rk_mdais_dev *mdais = to_info(dai);
+	struct snd_soc_dai *child;
+	int ret, i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		if (!child->probed && child->driver->probe) {
+			ret = child->driver->probe(child);
+			if (ret < 0) {
+				dev_err(child->dev,
+					"ASoC: failed to probe DAI %s: %d\n",
+					child->name, ret);
+				return ret;
+			}
+			dai->probed = 1;
+		}
+	}
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops rockchip_mdais_dai_ops = {
+	.hw_params = rockchip_mdais_hw_params,
+	.set_sysclk = rockchip_mdais_set_sysclk,
+	.set_fmt = rockchip_mdais_set_fmt,
+	.trigger = rockchip_mdais_trigger,
+};
+
+static const struct snd_soc_component_driver rockchip_mdais_component = {
+	.name = DAIS_DRV_NAME,
+};
+
+static const struct of_device_id rockchip_mdais_match[] = {
+	{ .compatible = "rockchip,multi-dais", },
+	{ .compatible = "rockchip,rk3308-multi-dais", },
+	{},
+};
+
+static struct snd_soc_dai *rockchip_mdais_find_dai(struct device_node *np)
+{
+	struct snd_soc_dai_link_component dai_component = { 0 };
+
+	dai_component.of_node = np;
+
+	return snd_soc_find_dai(&dai_component);
+}
+
+static int mdais_runtime_suspend(struct device *dev)
+{
+	struct rk_mdais_dev *mdais = dev_get_drvdata(dev);
+	struct snd_soc_dai *child;
+	int i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		pm_runtime_put(child->dev);
+	}
+
+	return 0;
+}
+
+static int mdais_runtime_resume(struct device *dev)
+{
+	struct rk_mdais_dev *mdais = dev_get_drvdata(dev);
+	struct snd_soc_dai *child;
+	int i = 0;
+
+	for (i = 0; i < mdais->num_dais; i++) {
+		child = mdais->dais[i].dai;
+		pm_runtime_get_sync(child->dev);
+	}
+
+	return 0;
+}
+
+static int mdais_read_prop_array(struct device_node *node,
+				 const char *propname,
+				 unsigned int *array, int num)
+{
+	int ret = 0;
+
+	memset(array, 0, sizeof(*array) * num);
+	if (of_property_read_bool(node, propname)) {
+		ret = of_property_read_u32_array(node, propname, array, num);
+		if (ret)
+			ret = -EINVAL;
+	} else {
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static void mdais_parse_daifmt(struct device_node *node, struct rk_dai *dais,
+			       int num_dai)
+{
+	unsigned int cinv[MAX_DAIS], finv[MAX_DAIS];
+	unsigned int cmst[MAX_DAIS], fmst[MAX_DAIS];
+	unsigned int format = 0, format_mask = 0;
+	int i = 0, ret = 0;
+
+	ret = mdais_read_prop_array(node, BITCLOCK_INV_STR, cinv, num_dai);
+	if (!ret)
+		format_mask |= SND_SOC_DAIFMT_INV_MASK;
+	ret = mdais_read_prop_array(node, FRAME_INV_STR, finv, num_dai);
+	if (!ret)
+		format_mask |= SND_SOC_DAIFMT_INV_MASK;
+	ret = mdais_read_prop_array(node, BITCLOCK_MASTER_STR, cmst, num_dai);
+	if (!ret)
+		format_mask |= SND_SOC_DAIFMT_MASTER_MASK;
+	ret = mdais_read_prop_array(node, FRAME_MASTER_STR, fmst, num_dai);
+	if (!ret)
+		format_mask |= SND_SOC_DAIFMT_MASTER_MASK;
+
+	for (i = 0; i < num_dai; i++) {
+		format = 0;
+
+		switch ((cinv[i] << 4) + finv[i]) {
+		case 0x11:
+			format |= SND_SOC_DAIFMT_IB_IF;
+			break;
+		case 0x10:
+			format |= SND_SOC_DAIFMT_IB_NF;
+			break;
+		case 0x01:
+			format |= SND_SOC_DAIFMT_NB_IF;
+			break;
+		default:
+			/* SND_SOC_DAIFMT_NB_NF is default */
+			break;
+		}
+
+		switch ((!cmst[i] << 4) + !fmst[i]) {
+		case 0x11:
+			format |= SND_SOC_DAIFMT_CBM_CFM;
+			break;
+		case 0x10:
+			format |= SND_SOC_DAIFMT_CBM_CFS;
+			break;
+		case 0x01:
+			format |= SND_SOC_DAIFMT_CBS_CFM;
+			break;
+		default:
+			format |= SND_SOC_DAIFMT_CBS_CFS;
+			break;
+		}
+
+		dais[i].fmt = format;
+		dais[i].fmt_msk = format_mask;
+	}
+}
+
+static int rockchip_mdais_dai_prepare(struct platform_device *pdev,
+				      struct snd_soc_dai_driver **soc_dai)
+{
+	struct snd_soc_dai_driver rockchip_mdais_dai = {
+		.probe = rockchip_mdais_dai_probe,
+		.playback = {
+			.stream_name = "Playback",
+			.channels_min = 2,
+			.channels_max = 32,
+			.rates = SNDRV_PCM_RATE_8000_192000,
+			.formats = (SNDRV_PCM_FMTBIT_S8 |
+				    SNDRV_PCM_FMTBIT_S16_LE |
+				    SNDRV_PCM_FMTBIT_S20_3LE |
+				    SNDRV_PCM_FMTBIT_S24_LE |
+				    SNDRV_PCM_FMTBIT_S32_LE),
+		},
+		.capture = {
+			.stream_name = "Capture",
+			.channels_min = 2,
+			.channels_max = 32,
+			.rates = SNDRV_PCM_RATE_8000_192000,
+			.formats = (SNDRV_PCM_FMTBIT_S8 |
+				    SNDRV_PCM_FMTBIT_S16_LE |
+				    SNDRV_PCM_FMTBIT_S20_3LE |
+				    SNDRV_PCM_FMTBIT_S24_LE |
+				    SNDRV_PCM_FMTBIT_S32_LE),
+		},
+		.ops = &rockchip_mdais_dai_ops,
+	};
+
+	*soc_dai = devm_kmemdup(&pdev->dev, &rockchip_mdais_dai,
+				sizeof(rockchip_mdais_dai), GFP_KERNEL);
+	if (!(*soc_dai))
+		return -ENOMEM;
+
+	return 0;
+}
+
+static void mdais_fixup_dai(struct snd_soc_dai_driver *soc_dai,
+			    struct rk_mdais_dev *mdais)
+{
+	int i, tch, rch;
+	unsigned int *tx_maps, *rx_maps;
+
+	tch = 0;
+	rch = 0;
+	tx_maps = mdais->playback_channel_maps;
+	rx_maps = mdais->capture_channel_maps;
+	for (i = 0; i < mdais->num_dais; i++) {
+		tch += tx_maps[i];
+		rch += rx_maps[i];
+	}
+
+	soc_dai->playback.channels_min = tch;
+	soc_dai->playback.channels_max = tch;
+	soc_dai->capture.channels_min = rch;
+	soc_dai->capture.channels_max = rch;
+}
+
+static int rockchip_mdais_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct platform_device  *sub_pdev;
+	struct rk_mdais_dev *mdais;
+	struct device_node *node;
+	struct snd_soc_dai_driver *soc_dai;
+	struct rk_dai *dais;
+	unsigned int *map;
+	int count, mp_count;
+	int ret = 0, i = 0;
+
+	ret = rockchip_mdais_dai_prepare(pdev, &soc_dai);
+	if (ret < 0)
+		return ret;
+
+	mdais = devm_kzalloc(&pdev->dev, sizeof(*mdais), GFP_KERNEL);
+	if (!mdais)
+		return -ENOMEM;
+
+	count = of_count_phandle_with_args(np, "dais", NULL);
+	if (count < 0 || count > MAX_DAIS)
+		return -EINVAL;
+
+	mp_count = of_property_count_u32_elems(np, "capture,channel-mapping");
+	if (mp_count != count)
+		return -EINVAL;
+	mp_count = of_property_count_u32_elems(np, "playback,channel-mapping");
+	if (mp_count != count)
+		return -EINVAL;
+
+	mdais->num_dais = count;
+	dais = devm_kcalloc(&pdev->dev, count,
+			    sizeof(*dais), GFP_KERNEL);
+	if (!dais)
+		return -ENOMEM;
+
+	map = devm_kcalloc(&pdev->dev, count,
+			   sizeof(*map), GFP_KERNEL);
+	if (!map)
+		return -ENOMEM;
+	ret = of_property_read_u32_array(np, "capture,channel-mapping",
+					 map, count);
+	if (ret)
+		return -EINVAL;
+	mdais->capture_channel_maps = map;
+	map = devm_kcalloc(&pdev->dev, count,
+			   sizeof(*map), GFP_KERNEL);
+	if (!map)
+		return -ENOMEM;
+	ret = of_property_read_u32_array(np, "playback,channel-mapping",
+					 map, count);
+	if (ret)
+		return -EINVAL;
+	mdais->playback_channel_maps = map;
+
+	for (i = 0; i < count; i++) {
+		node = of_parse_phandle(np, "dais", i);
+		sub_pdev = of_find_device_by_node(node);
+		if (!sub_pdev) {
+			dev_err(&pdev->dev, "fail to find subnode dev\n");
+			return -ENODEV;
+		}
+		dais[i].of_node = node;
+		dais[i].dev = &sub_pdev->dev;
+		dais[i].dai = rockchip_mdais_find_dai(node);
+		if (!dais[i].dai)
+			return -EPROBE_DEFER;
+	}
+
+	mdais_parse_daifmt(np, dais, count);
+	mdais_fixup_dai(soc_dai, mdais);
+
+	if (of_device_is_compatible(np, "rockchip,rk3308-multi-dais")) {
+		struct regmap *grf;
+		const char *name;
+		unsigned int i2s0_fmt = 0, i2s1_fmt = 0;
+
+		for (i = 0; i < count; i++) {
+			name = dev_name(dais[i].dev);
+			if (strstr(name, "ff300000"))
+				i2s0_fmt = dais[i].fmt;
+			else if (strstr(name, "ff310000"))
+				i2s1_fmt = dais[i].fmt;
+		}
+		i2s0_fmt &= SND_SOC_DAIFMT_MASTER_MASK;
+		i2s1_fmt &= SND_SOC_DAIFMT_MASTER_MASK;
+
+		if ((i2s0_fmt == SND_SOC_DAIFMT_CBS_CFS &&
+		     i2s1_fmt == SND_SOC_DAIFMT_CBM_CFM) ||
+		    (i2s0_fmt == SND_SOC_DAIFMT_CBM_CFM &&
+		     i2s1_fmt == SND_SOC_DAIFMT_CBS_CFS)) {
+			grf = syscon_regmap_lookup_by_phandle(np,
+							      "rockchip,grf");
+			if (IS_ERR(grf))
+				return PTR_ERR(grf);
+
+			dev_info(&pdev->dev, "enable i2s 16ch ctrl en\n");
+			regmap_write(grf, RK3308_GRF_SOC_CON2,
+				     BIT(14) << 16 | BIT(14));
+		}
+	}
+
+	mdais->dais = dais;
+	mdais->dev = &pdev->dev;
+	dev_set_drvdata(&pdev->dev, mdais);
+
+	pm_runtime_enable(&pdev->dev);
+	if (!pm_runtime_enabled(&pdev->dev)) {
+		ret = mdais_runtime_resume(&pdev->dev);
+		if (ret)
+			goto err_pm_disable;
+	}
+
+	ret = devm_snd_soc_register_component(&pdev->dev,
+					      &rockchip_mdais_component,
+					      soc_dai, 1);
+
+	if (ret) {
+		dev_err(&pdev->dev, "could not register dai: %d\n", ret);
+		goto err_suspend;
+	}
+
+	ret = snd_dmaengine_mpcm_register(mdais);
+	if (ret) {
+		dev_err(&pdev->dev, "Could not register PCM\n");
+		return ret;
+	}
+
+	return 0;
+
+err_suspend:
+	if (!pm_runtime_status_suspended(&pdev->dev))
+		mdais_runtime_resume(&pdev->dev);
+err_pm_disable:
+	pm_runtime_disable(&pdev->dev);
+
+	return ret;
+}
+
+static int rockchip_mdais_remove(struct platform_device *pdev)
+{
+	snd_dmaengine_mpcm_unregister(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+	if (!pm_runtime_status_suspended(&pdev->dev))
+		mdais_runtime_suspend(&pdev->dev);
+
+	return 0;
+}
+
+static const struct dev_pm_ops rockchip_mdais_pm_ops = {
+	SET_RUNTIME_PM_OPS(mdais_runtime_suspend, mdais_runtime_resume,
+			   NULL)
+};
+
+static struct platform_driver rockchip_mdais_driver = {
+	.probe = rockchip_mdais_probe,
+	.remove = rockchip_mdais_remove,
+	.driver = {
+		.name = DAIS_DRV_NAME,
+		.of_match_table = of_match_ptr(rockchip_mdais_match),
+		.pm = &rockchip_mdais_pm_ops,
+	},
+};
+module_platform_driver(rockchip_mdais_driver);
+
+MODULE_DESCRIPTION("ROCKCHIP MULTI-DAIS ASoC Interface");
+MODULE_AUTHOR("Sugar Zhang <sugar.zhang@rock-chips.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" DAIS_DRV_NAME);
+MODULE_DEVICE_TABLE(of, rockchip_mdais_match);
diff --git a/sound/soc/rockchip/rockchip_multi_dais.h b/sound/soc/rockchip/rockchip_multi_dais.h
new file mode 100644
index 000000000000..5d9a076afb78
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_multi_dais.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Rockchip MULTI DAIS driver
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+#ifndef _ROCKCHIP_MULTI_DAIS_H
+#define _ROCKCHIP_MULTI_DAIS_H
+
+#define MAX_DAIS 4
+
+struct rk_dai {
+	struct device *dev;
+	struct device_node *of_node;
+	struct snd_soc_dai *dai;
+	unsigned int fmt;
+	unsigned int fmt_msk;
+};
+
+struct rk_mdais_dev {
+	struct device *dev;
+	struct rk_dai *dais;
+	unsigned int *playback_channel_maps;
+	unsigned int *capture_channel_maps;
+	int num_dais;
+};
+
+int snd_dmaengine_mpcm_register(struct rk_mdais_dev *mdais);
+void snd_dmaengine_mpcm_unregister(struct device *dev);
+
+#endif
diff --git a/sound/soc/rockchip/rockchip_multi_dais_pcm.c b/sound/soc/rockchip/rockchip_multi_dais_pcm.c
new file mode 100644
index 000000000000..f9c9a56f5a85
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_multi_dais_pcm.c
@@ -0,0 +1,575 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * ALSA SoC Audio Layer - Rockchip Multi-DAIS-PCM driver
+ *
+ * Copyright (c) 2018 Rockchip Electronics Co. Ltd.
+ * Author: Sugar Zhang <sugar.zhang@rock-chips.com>
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/dmaengine.h>
+#include <linux/dma-mapping.h>
+#include <sound/dmaengine_pcm.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#include "rockchip_multi_dais.h"
+
+#define MAX_FIFO_SIZE	32 /* max fifo size in frames */
+
+struct dmaengine_mpcm {
+	struct rk_mdais_dev *mdais;
+	struct dma_chan *tx_chans[MAX_DAIS];
+	struct dma_chan *rx_chans[MAX_DAIS];
+	struct snd_soc_platform platform;
+};
+
+struct dmaengine_mpcm_runtime_data {
+	struct dma_chan *chans[MAX_DAIS];
+	dma_cookie_t cookies[MAX_DAIS];
+	unsigned int *channel_maps;
+	int num_chans;
+	unsigned int pos;
+	unsigned int master_chan;
+	bool start_flag;
+};
+
+static inline struct dmaengine_mpcm_runtime_data *substream_to_prtd(
+	const struct snd_pcm_substream *substream)
+{
+	return substream->runtime->private_data;
+}
+
+static struct dmaengine_mpcm *soc_platform_to_pcm(struct snd_soc_platform *p)
+{
+	return container_of(p, struct dmaengine_mpcm, platform);
+}
+
+static struct dma_chan *to_chan(struct dmaengine_mpcm *pcm,
+				struct snd_pcm_substream *substream)
+{
+	struct dma_chan *chan = NULL;
+	int i;
+
+	for (i = 0; i < pcm->mdais->num_dais; i++) {
+		chan = substream->stream ? pcm->rx_chans[i] : pcm->tx_chans[i];
+		if (chan)
+			break;
+	}
+
+	return chan;
+}
+
+static struct device *dmaengine_dma_dev(struct dmaengine_mpcm *pcm,
+					struct snd_pcm_substream *substream)
+{
+	struct dma_chan *chan;
+
+	chan = to_chan(pcm, substream);
+	if (!chan)
+		return NULL;
+
+	return chan->device->dev;
+}
+
+static void snd_dmaengine_mpcm_set_config_from_dai_data(
+	const struct snd_pcm_substream *substream,
+	const struct snd_dmaengine_dai_dma_data *dma_data,
+	struct dma_slave_config *slave_config)
+{
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		slave_config->dst_addr = dma_data->addr;
+		if (dma_data->addr_width != DMA_SLAVE_BUSWIDTH_UNDEFINED)
+			slave_config->dst_addr_width = dma_data->addr_width;
+	} else {
+		slave_config->src_addr = dma_data->addr;
+		if (dma_data->addr_width != DMA_SLAVE_BUSWIDTH_UNDEFINED)
+			slave_config->src_addr_width = dma_data->addr_width;
+	}
+
+	slave_config->slave_id = dma_data->slave_id;
+}
+
+static void dmaengine_mpcm_dma_complete(void *arg)
+{
+	struct snd_pcm_substream *substream = arg;
+#ifdef CONFIG_SND_SOC_ROCKCHIP_VAD
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+
+	if (snd_pcm_vad_attached(substream) &&
+	    substream->stream == SNDRV_PCM_STREAM_CAPTURE) {
+		void *buf = substream->runtime->dma_area + prtd->pos;
+
+		snd_pcm_vad_preprocess(substream, buf,
+				       substream->runtime->period_size);
+	}
+
+	prtd->pos += snd_pcm_lib_period_bytes(substream);
+	if (prtd->pos >= snd_pcm_lib_buffer_bytes(substream))
+		prtd->pos = 0;
+
+#endif
+	snd_pcm_period_elapsed(substream);
+}
+
+static int dmaengine_mpcm_prepare_and_submit(struct snd_pcm_substream *substream)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct dma_async_tx_descriptor *desc;
+	enum dma_transfer_direction direction;
+	unsigned long flags = DMA_CTRL_ACK;
+	unsigned int *maps = prtd->channel_maps;
+	int offset, buffer_bytes, period_bytes;
+	int i;
+	bool callback = false;
+
+	direction = snd_pcm_substream_to_dma_direction(substream);
+
+	if (!substream->runtime->no_period_wakeup)
+		flags |= DMA_PREP_INTERRUPT;
+
+	prtd->pos = 0;
+	offset = 0;
+	period_bytes = snd_pcm_lib_period_bytes(substream);
+	buffer_bytes = snd_pcm_lib_buffer_bytes(substream);
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (!prtd->chans[i])
+			continue;
+		desc = dmaengine_prep_dma_cyclic(prtd->chans[i],
+						 runtime->dma_addr + offset,
+						 buffer_bytes, period_bytes,
+						 direction, flags);
+
+		if (!desc)
+			return -ENOMEM;
+		if (!callback) {
+			desc->callback = dmaengine_mpcm_dma_complete;
+			desc->callback_param = substream;
+			callback = true;
+			prtd->master_chan = i;
+		}
+		prtd->cookies[i] = dmaengine_submit(desc);
+		offset += samples_to_bytes(runtime, maps[i]);
+	}
+
+	return 0;
+}
+
+static void mpcm_dma_async_issue_pending(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dma_async_issue_pending(prtd->chans[i]);
+	}
+}
+
+static void mpcm_dmaengine_resume(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dmaengine_resume(prtd->chans[i]);
+	}
+}
+
+static void mpcm_dmaengine_pause(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dmaengine_pause(prtd->chans[i]);
+	}
+}
+
+static void mpcm_dmaengine_terminate_all(struct dmaengine_mpcm_runtime_data *prtd)
+{
+	int i;
+
+	for (i = 0; i < prtd->num_chans; i++) {
+		if (prtd->chans[i])
+			dmaengine_terminate_all(prtd->chans[i]);
+	}
+}
+
+static int snd_dmaengine_mpcm_trigger(struct snd_pcm_substream *substream, int cmd)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	int ret;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+		ret = dmaengine_mpcm_prepare_and_submit(substream);
+		if (ret)
+			return ret;
+		mpcm_dma_async_issue_pending(prtd);
+		break;
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		mpcm_dmaengine_resume(prtd);
+		break;
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+		if (runtime->info & SNDRV_PCM_INFO_PAUSE)
+			mpcm_dmaengine_pause(prtd);
+		else
+			mpcm_dmaengine_terminate_all(prtd);
+		prtd->start_flag = false;
+		break;
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		mpcm_dmaengine_pause(prtd);
+		prtd->start_flag = false;
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+		mpcm_dmaengine_terminate_all(prtd);
+		prtd->start_flag = false;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int dmaengine_mpcm_hw_params(struct snd_pcm_substream *substream,
+				    struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct dma_chan *chan;
+	struct snd_dmaengine_dai_dma_data *dma_data;
+	struct dma_slave_config slave_config;
+	snd_pcm_format_t format;
+	unsigned int *maps;
+	int frame_bytes;
+	int ret, num, i, sz;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		maps = pcm->mdais->playback_channel_maps;
+	else
+		maps = pcm->mdais->capture_channel_maps;
+	format = params_format(params);
+	frame_bytes = snd_pcm_format_size(format, params_channels(params));
+	num = pcm->mdais->num_dais;
+
+	for (i = 0; i < num; i++) {
+		memset(&slave_config, 0, sizeof(slave_config));
+		ret = snd_hwparams_to_dma_slave_config(substream, params,
+						       &slave_config);
+		if (ret)
+			return ret;
+
+		dma_data = snd_soc_dai_get_dma_data(pcm->mdais->dais[i].dai,
+						    substream);
+		if (!dma_data)
+			continue;
+
+		snd_dmaengine_mpcm_set_config_from_dai_data(substream,
+							    dma_data,
+							    &slave_config);
+
+		/* refine params for interlace access */
+		sz = snd_pcm_format_size(format, maps[i]);
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+			chan = pcm->tx_chans[i];
+			if (sz) {
+				slave_config.src_interlace_size = frame_bytes - sz;
+				if (slave_config.src_interlace_size)
+					slave_config.dst_maxburst = sz / slave_config.dst_addr_width;
+			}
+		} else {
+			chan = pcm->rx_chans[i];
+			if (sz) {
+				slave_config.dst_interlace_size = frame_bytes - sz;
+				if (slave_config.dst_interlace_size)
+					slave_config.src_maxburst = sz / slave_config.src_addr_width;
+			}
+		}
+		if (!chan)
+			continue;
+
+		ret = dmaengine_slave_config(chan, &slave_config);
+		if (ret)
+			return ret;
+	}
+	return snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(params));
+}
+
+static int dmaengine_mpcm_set_runtime_hwparams(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct device *dma_dev = dmaengine_dma_dev(pcm, substream);
+	struct dma_chan *chan;
+	struct dma_slave_caps dma_caps;
+	struct snd_pcm_hardware hw;
+	u32 addr_widths = BIT(DMA_SLAVE_BUSWIDTH_1_BYTE) |
+			  BIT(DMA_SLAVE_BUSWIDTH_2_BYTES) |
+			  BIT(DMA_SLAVE_BUSWIDTH_4_BYTES);
+	int i, ret;
+
+	chan = to_chan(pcm, substream);
+	if (!chan)
+		return -EINVAL;
+
+	memset(&hw, 0, sizeof(hw));
+	hw.info = SNDRV_PCM_INFO_MMAP | SNDRV_PCM_INFO_MMAP_VALID |
+			SNDRV_PCM_INFO_INTERLEAVED;
+	hw.periods_min = 2;
+	hw.periods_max = UINT_MAX;
+	hw.period_bytes_min = 256;
+	hw.period_bytes_max = dma_get_max_seg_size(dma_dev);
+	hw.buffer_bytes_max = SIZE_MAX;
+
+	ret = dma_get_slave_caps(chan, &dma_caps);
+	if (ret == 0) {
+		if (dma_caps.cmd_pause)
+			hw.info |= SNDRV_PCM_INFO_PAUSE | SNDRV_PCM_INFO_RESUME;
+		if (dma_caps.residue_granularity <= DMA_RESIDUE_GRANULARITY_SEGMENT)
+			hw.info |= SNDRV_PCM_INFO_BATCH;
+
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			addr_widths = dma_caps.dst_addr_widths;
+		else
+			addr_widths = dma_caps.src_addr_widths;
+	}
+
+	/*
+	 * Prepare formats mask for valid/allowed sample types. If the dma does
+	 * not have support for the given physical word size, it needs to be
+	 * masked out so user space can not use the format which produces
+	 * corrupted audio.
+	 * In case the dma driver does not implement the slave_caps the default
+	 * assumption is that it supports 1, 2 and 4 bytes widths.
+	 */
+	for (i = 0; i <= SNDRV_PCM_FORMAT_LAST; i++) {
+		int bits = snd_pcm_format_physical_width(i);
+
+		/* Enable only samples with DMA supported physical widths */
+		switch (bits) {
+		case 8:
+		case 16:
+		case 24:
+		case 32:
+		case 64:
+			if (addr_widths & (1 << (bits / 8)))
+				hw.formats |= (1LL << i);
+			break;
+		default:
+			/* Unsupported types */
+			break;
+		}
+	}
+
+	return snd_soc_set_runtime_hwparams(substream, &hw);
+}
+
+static int dmaengine_mpcm_open(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct dmaengine_mpcm_runtime_data *prtd;
+	int ret, i;
+
+	ret = dmaengine_mpcm_set_runtime_hwparams(substream);
+	if (ret)
+		return ret;
+
+	ret = snd_pcm_hw_constraint_integer(substream->runtime,
+					    SNDRV_PCM_HW_PARAM_PERIODS);
+	if (ret < 0)
+		return ret;
+
+	prtd = kzalloc(sizeof(*prtd), GFP_KERNEL);
+	if (!prtd)
+		return -ENOMEM;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		prtd->channel_maps = pcm->mdais->playback_channel_maps;
+		for (i = 0; i < pcm->mdais->num_dais; i++)
+			prtd->chans[i] = pcm->tx_chans[i];
+	} else {
+		prtd->channel_maps = pcm->mdais->capture_channel_maps;
+		for (i = 0; i < pcm->mdais->num_dais; i++)
+			prtd->chans[i] = pcm->rx_chans[i];
+	}
+
+	prtd->num_chans = pcm->mdais->num_dais;
+	prtd->start_flag = false;
+	substream->runtime->private_data = prtd;
+
+	return 0;
+}
+
+static int dmaengine_mpcm_new(struct snd_soc_pcm_runtime *rtd)
+{
+	struct dmaengine_mpcm *pcm = soc_platform_to_pcm(rtd->platform);
+	struct snd_pcm_substream *substream;
+	size_t prealloc_buffer_size;
+	size_t max_buffer_size;
+	unsigned int i;
+	int ret;
+
+	prealloc_buffer_size = 512 * 1024;
+	max_buffer_size = SIZE_MAX;
+
+	for (i = SNDRV_PCM_STREAM_PLAYBACK; i <= SNDRV_PCM_STREAM_CAPTURE; i++) {
+		substream = rtd->pcm->streams[i].substream;
+		if (!substream)
+			continue;
+
+		ret = snd_pcm_lib_preallocate_pages(substream,
+						    SNDRV_DMA_TYPE_DEV_IRAM,
+						    dmaengine_dma_dev(pcm, substream),
+						    prealloc_buffer_size,
+						    max_buffer_size);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+static snd_pcm_uframes_t dmaengine_mpcm_pointer(struct snd_pcm_substream *substream)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct dma_tx_state state;
+	snd_pcm_uframes_t frames;
+	unsigned int buf_size;
+	unsigned int pos = 0;
+	unsigned int master = prtd->master_chan;
+
+	buf_size = snd_pcm_lib_buffer_bytes(substream);
+	dmaengine_tx_status(prtd->chans[master], prtd->cookies[master], &state);
+	if (state.residue > 0 && state.residue <= buf_size)
+		pos = buf_size - state.residue;
+
+	frames = bytes_to_frames(substream->runtime, pos);
+	if (!prtd->start_flag && frames >= MAX_FIFO_SIZE)
+		prtd->start_flag = true;
+
+	if (prtd->start_flag) {
+		if (frames >= MAX_FIFO_SIZE)
+			frames -= MAX_FIFO_SIZE;
+		else
+			frames = runtime->buffer_size + frames - MAX_FIFO_SIZE;
+	} else {
+		frames = 0;
+	}
+
+	return frames;
+}
+
+static int dmaengine_mpcm_close(struct snd_pcm_substream *substream)
+{
+	struct dmaengine_mpcm_runtime_data *prtd = substream_to_prtd(substream);
+
+	kfree(prtd);
+
+	return 0;
+}
+
+static const struct snd_pcm_ops dmaengine_mpcm_ops = {
+	.open		= dmaengine_mpcm_open,
+	.close		= dmaengine_mpcm_close,
+	.ioctl		= snd_pcm_lib_ioctl,
+	.hw_params	= dmaengine_mpcm_hw_params,
+	.hw_free	= snd_pcm_lib_free_pages,
+	.trigger	= snd_dmaengine_mpcm_trigger,
+	.pointer	= dmaengine_mpcm_pointer,
+};
+
+static const struct snd_soc_platform_driver dmaengine_mpcm_platform = {
+	.component_driver = {
+		.probe_order = SND_SOC_COMP_ORDER_LATE,
+	},
+	.ops		= &dmaengine_mpcm_ops,
+	.pcm_new	= dmaengine_mpcm_new,
+};
+
+static void dmaengine_mpcm_release_chan(struct dmaengine_mpcm *pcm)
+{
+	int i;
+
+	for (i = 0; i < pcm->mdais->num_dais; i++) {
+		if (pcm->tx_chans[i])
+			dma_release_channel(pcm->tx_chans[i]);
+		if (pcm->rx_chans[i])
+			dma_release_channel(pcm->rx_chans[i]);
+	}
+}
+
+int snd_dmaengine_mpcm_register(struct rk_mdais_dev *mdais)
+{
+	struct device *dev;
+	struct device *child;
+	struct dmaengine_mpcm *pcm;
+	struct dma_chan *chan;
+	unsigned int *tx_maps, *rx_maps;
+	int ret, i, num;
+
+	dev = mdais->dev;
+	num = mdais->num_dais;
+	tx_maps = mdais->playback_channel_maps;
+	rx_maps = mdais->capture_channel_maps;
+	pcm = kzalloc(sizeof(*pcm), GFP_KERNEL);
+	if (!pcm)
+		return -ENOMEM;
+
+	pcm->mdais = mdais;
+	for (i = 0; i < num; i++) {
+		child = mdais->dais[i].dev;
+		if (tx_maps[i]) {
+			chan = dma_request_slave_channel_reason(child, "tx");
+			if (IS_ERR(chan))
+				chan = NULL;
+			pcm->tx_chans[i] = chan;
+		}
+
+		if (rx_maps[i]) {
+			chan = dma_request_slave_channel_reason(child, "rx");
+			if (IS_ERR(chan))
+				chan = NULL;
+			pcm->rx_chans[i] = chan;
+		}
+	}
+
+	ret = snd_soc_add_platform(dev, &pcm->platform,
+				   &dmaengine_mpcm_platform);
+	if (ret)
+		goto err_free_dma;
+
+	return 0;
+
+err_free_dma:
+	dmaengine_mpcm_release_chan(pcm);
+	kfree(pcm);
+	return ret;
+}
+EXPORT_SYMBOL_GPL(snd_dmaengine_mpcm_register);
+
+void snd_dmaengine_mpcm_unregister(struct device *dev)
+{
+	struct snd_soc_platform *platform;
+	struct dmaengine_mpcm *pcm;
+
+	platform = snd_soc_lookup_platform(dev);
+	if (!platform)
+		return;
+
+	pcm = soc_platform_to_pcm(platform);
+
+	snd_soc_remove_platform(platform);
+	dmaengine_mpcm_release_chan(pcm);
+	kfree(pcm);
+}
+EXPORT_SYMBOL_GPL(snd_dmaengine_mpcm_unregister);
+
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/rockchip/rockchip_multicodecs.c b/sound/soc/rockchip/rockchip_multicodecs.c
index 94fc2f25cbe6..8a97063cc0eb 100644
--- a/sound/soc/rockchip/rockchip_multicodecs.c
+++ b/sound/soc/rockchip/rockchip_multicodecs.c
@@ -36,6 +36,7 @@
 #define DEFAULT_MCLK_FS	256
 
 struct multicodecs_data {
+	struct snd_soc_card snd_card;
 	unsigned int mclk_fs;
 	bool codec_hp_det;
 };
@@ -104,18 +105,11 @@ static struct snd_soc_dai_link rk_dailink = {
 		SND_SOC_DAIFMT_CBS_CFS,
 };
 
-static struct snd_soc_card snd_soc_card_rk = {
-	.name = "rk-multicodecs-sound",
-	.dai_link = &rk_dailink,
-	.num_links = 1,
-	.num_aux_devs = 0,
-};
-
 static int rk_multicodecs_probe(struct platform_device *pdev)
 {
-	struct snd_soc_card *card = &snd_soc_card_rk;
+	struct snd_soc_card *card;
 	struct device_node *np = pdev->dev.of_node;
-	struct snd_soc_dai_link *link = card->dai_link;
+	struct snd_soc_dai_link *link;
 	struct snd_soc_dai_link_component *codecs;
 	struct multicodecs_data *mc_data;
 	struct of_phandle_args args;
@@ -124,6 +118,11 @@ static int rk_multicodecs_probe(struct platform_device *pdev)
 	int count;
 	int ret = 0, i = 0, idx = 0;
 
+	mc_data = devm_kzalloc(&pdev->dev, sizeof(*mc_data), GFP_KERNEL);
+	if (!mc_data)
+		return -ENOMEM;
+
+	card = &mc_data->snd_card;
 	card->dev = &pdev->dev;
 
 	/* Parse the card name from DT */
@@ -131,9 +130,10 @@ static int rk_multicodecs_probe(struct platform_device *pdev)
 	if (ret < 0)
 		return ret;
 
-	mc_data = devm_kzalloc(&pdev->dev, sizeof(*mc_data), GFP_KERNEL);
-	if (!mc_data)
-		return -ENOMEM;
+	link = &rk_dailink;
+	card->dai_link = &rk_dailink;
+	card->num_links = 1;
+	card->num_aux_devs = 0;
 
 	count = of_count_phandle_with_args(np, "rockchip,codec", NULL);
 	if (count < 0 || count > MAX_CODECS)
diff --git a/sound/soc/rockchip/rockchip_vad.c b/sound/soc/rockchip/rockchip_vad.c
new file mode 100644
index 000000000000..dae05c9ddf24
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_vad.c
@@ -0,0 +1,853 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Rockchip VAD driver
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/uaccess.h>
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/of_device.h>
+#include <linux/of_address.h>
+#include <linux/pm_runtime.h>
+#include <linux/regmap.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+
+#include "rockchip_vad.h"
+#include "rockchip_multi_dais.h"
+#include "vad_preprocess.h"
+
+#define DRV_NAME "rockchip-vad"
+
+#define VAD_RATES	SNDRV_PCM_RATE_8000_192000
+#define VAD_FORMATS	(SNDRV_PCM_FMTBIT_S16_LE | \
+			SNDRV_PCM_FMTBIT_S20_3LE | \
+			SNDRV_PCM_FMTBIT_S24_LE | \
+			SNDRV_PCM_FMTBIT_S32_LE)
+#define ACODEC_REG_NUM	28
+#define VAD_SRAM_BUFFER_END	0xfffbfff8
+
+static struct snd_pcm_substream *vad_substream;
+static unsigned int voice_inactive_frames;
+module_param(voice_inactive_frames, uint, 0644);
+MODULE_PARM_DESC(voice_inactive_frames, "voice inactive frame count");
+
+struct vad_buf {
+	void __iomem *begin;
+	void __iomem *end;
+	void __iomem *cur;
+	void __iomem *pos;
+	int size;
+	bool loop;
+};
+
+struct rockchip_vad {
+	struct device *dev;
+	struct device_node *audio_node;
+	struct clk *hclk;
+	struct regmap *regmap;
+	unsigned int memphy;
+	void __iomem *membase;
+	struct vad_buf vbuf;
+	struct vad_params params;
+	struct vad_uparams uparams;
+	int mode;
+	u32 audio_src;
+	u32 audio_src_addr;
+	u32 audio_chnl;
+	u32 channels;
+	u32 buffer_time; /* msec */
+	struct dentry *debugfs_dir;
+	void *buf;
+	bool acodec_cfg;
+};
+
+struct audio_src_addr_map {
+	u32 id;
+	u32 addr;
+};
+
+static int rockchip_vad_stop(struct rockchip_vad *vad)
+{
+	unsigned int val;
+	struct vad_buf *vbuf = &vad->vbuf;
+	struct vad_params *params = &vad->params;
+
+	regmap_update_bits(vad->regmap, VAD_CTRL, VAD_EN_MASK, VAD_DISABLE);
+	regmap_read(vad->regmap, VAD_RAM_END_ADDR, &val);
+	vbuf->end = vbuf->begin + (val - vad->memphy) + 0x8;
+	regmap_read(vad->regmap, VAD_INT, &val);
+	val &= BIT(8);
+	vbuf->loop = val;
+	regmap_read(vad->regmap, VAD_RAM_CUR_ADDR, &val);
+	if (!val) {
+		vbuf->size = 0;
+		vbuf->cur = vbuf->begin;
+		return 0;
+	}
+	vbuf->cur = vbuf->begin + (val - vad->memphy);
+
+	if (vbuf->loop) {
+		vbuf->size = vbuf->end - vbuf->begin;
+		vbuf->pos = vbuf->cur;
+	} else {
+		vbuf->size = vbuf->cur - vbuf->begin;
+		vbuf->end = vbuf->cur;
+		vbuf->pos = vbuf->begin;
+	}
+
+	regmap_read(vad->regmap, VAD_DET_CON0, &val);
+	params->noise_level = (val & NOISE_LEVEL_MASK) >> NOISE_LEVEL_SHIFT;
+	params->vad_con_thd = (val & VAD_CON_THD_MASK) >> VAD_CON_THD_SHIFT;
+	params->voice_gain = (val & GAIN_MASK) >> GAIN_SHIFT;
+	regmap_read(vad->regmap, VAD_DET_CON1, &val);
+	params->sound_thd = val & SOUND_THD_MASK;
+	regmap_read(vad->regmap, VAD_DET_CON5, &val);
+	params->noise_abs = val & NOISE_ABS_MASK;
+
+	vad_preprocess_init(params);
+	voice_inactive_frames = 0;
+
+	dev_info(vad->dev, "bufsize: %d, hw_abs: 0x%x\n",
+		 vbuf->size, params->noise_abs);
+
+	return 0;
+}
+
+static int rockchip_vad_setup(struct rockchip_vad *vad)
+{
+	struct regmap *regmap = vad->regmap;
+	u32 val, mask;
+
+	dev_info(vad->dev, "sw_abs: 0x%x\n",
+		 vad->uparams.noise_abs);
+	regmap_update_bits(regmap, VAD_DET_CON5,
+			   NOISE_ABS_MASK, vad->uparams.noise_abs);
+	regmap_update_bits(regmap, VAD_CTRL, VAD_EN_MASK, VAD_EN);
+
+	val = ERR_INT_EN | VAD_DET_INT_EN;
+	mask = ERR_INT_EN_MASK | VAD_DET_INT_EN_MASK;
+
+	regmap_update_bits(regmap, VAD_INT, mask, val);
+
+	vad_preprocess_destroy();
+
+	return 0;
+}
+
+static struct rockchip_vad *substream_get_drvdata(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct rockchip_vad *vad = NULL;
+	unsigned int i;
+
+	if (PCM_RUNTIME_CHECK(substream))
+		return NULL;
+	if (!rtd)
+		return NULL;
+
+	for (i = 0; i < rtd->num_codecs; i++) {
+		struct snd_soc_dai *codec_dai = rtd->codec_dais[i];
+
+		if (strstr(codec_dai->name, "vad"))
+			vad = snd_soc_codec_get_drvdata(codec_dai->codec);
+	}
+
+	return vad;
+}
+
+snd_pcm_sframes_t snd_pcm_vad_read(struct snd_pcm_substream *substream,
+				   void __user *buf, snd_pcm_uframes_t frames)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct rockchip_vad *vad = NULL;
+	struct vad_buf *vbuf;
+	snd_pcm_uframes_t avail;
+	int bytes, vbytes, frame_sz, vframe_sz, padding_sz;
+	unsigned int i;
+	void *pbuf, *sbuf;
+
+	vad = substream_get_drvdata(substream);
+
+	if (!vad)
+		return -EFAULT;
+
+	vbuf = &vad->vbuf;
+
+	avail = snd_pcm_vad_avail(substream);
+	avail = avail > frames ? frames : avail;
+	bytes = frames_to_bytes(runtime, avail);
+	if (bytes <= 0)
+		return -EFAULT;
+
+	if (!vad->buf) {
+		vad->buf = kzalloc(bytes, GFP_KERNEL);
+		if (!vad->buf)
+			return -ENOMEM;
+	}
+
+	frame_sz = frames_to_bytes(runtime, 1);
+	vframe_sz = samples_to_bytes(runtime, vad->channels);
+	padding_sz = frame_sz - vframe_sz;
+	vbytes = vframe_sz * avail;
+	sbuf = vad->buf;
+	pbuf = vad->buf + bytes - vbytes;
+	if (!vbuf->loop) {
+		memcpy_fromio(pbuf, vbuf->pos, vbytes);
+		vbuf->pos += vbytes;
+	} else {
+		if ((vbuf->pos + vbytes) <= vbuf->end) {
+			memcpy_fromio(pbuf, vbuf->pos, vbytes);
+			vbuf->pos += vbytes;
+		} else {
+			int part1 = vbuf->end - vbuf->pos;
+			int part2 = vbytes - part1;
+
+			memcpy_fromio(pbuf, vbuf->pos, part1);
+			memcpy_fromio(pbuf + part1, vbuf->begin, part2);
+			vbuf->pos = vbuf->begin + part2;
+		}
+	}
+
+	if (padding_sz) {
+		for (i = 0; i < avail; i++) {
+			memmove(sbuf, pbuf, vframe_sz);
+			sbuf += vframe_sz;
+			pbuf += vframe_sz;
+			memset(sbuf, 0x0, padding_sz);
+			sbuf += padding_sz;
+		}
+	}
+
+	if (copy_to_user(buf, vad->buf, bytes))
+		return -EFAULT;
+
+	vbuf->size -= vbytes;
+	if (vbuf->size <= 0) {
+		kfree(vad->buf);
+		vad->buf = NULL;
+	}
+
+	return avail;
+}
+EXPORT_SYMBOL(snd_pcm_vad_read);
+
+/**
+ * snd_pcm_vad_avail - Get the available (readable) space for vad
+ * @runtime: PCM substream instance
+ *
+ * Result is between 0 ... (boundary - 1)
+ */
+snd_pcm_uframes_t snd_pcm_vad_avail(struct snd_pcm_substream *substream)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct rockchip_vad *vad = NULL;
+	struct vad_buf *vbuf;
+	snd_pcm_uframes_t vframes;
+
+	vad = substream_get_drvdata(substream);
+
+	if (!vad)
+		return 0;
+
+	vbuf = &vad->vbuf;
+
+	if (vbuf->size <= 0)
+		return 0;
+
+	vframes = samples_to_bytes(runtime, vad->channels);
+	if (vframes)
+		vframes = vbuf->size / vframes;
+	if (!vframes)
+		dev_err(vad->dev, "residue bytes: %d\n", vbuf->size);
+	return vframes;
+}
+EXPORT_SYMBOL(snd_pcm_vad_avail);
+
+int snd_pcm_vad_preprocess(struct snd_pcm_substream *substream,
+			   void *buf, snd_pcm_uframes_t size)
+{
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct rockchip_vad *vad = NULL;
+	unsigned int i;
+	s16 *data;
+
+	vad = substream_get_drvdata(substream);
+
+	if (!vad)
+		return 0;
+
+	buf += samples_to_bytes(runtime, vad->audio_chnl);
+	for (i = 0; i < size; i++) {
+		data = buf;
+		if (vad_preprocess(*data))
+			voice_inactive_frames = 0;
+		else
+			voice_inactive_frames++;
+		buf += frames_to_bytes(runtime, 1);
+	}
+
+	vad_preprocess_update_params(&vad->uparams);
+	return 0;
+}
+EXPORT_SYMBOL(snd_pcm_vad_preprocess);
+
+/**
+ * snd_pcm_vad_attached - Check whether vad is attached to substream or not
+ * @substream: PCM substream instance
+ *
+ * Result is true for attached or false for detached
+ */
+bool snd_pcm_vad_attached(struct snd_pcm_substream *substream)
+{
+	struct rockchip_vad *vad = NULL;
+
+	if (vad_substream == substream)
+		vad = substream_get_drvdata(substream);
+
+	return vad ? true : false;
+}
+EXPORT_SYMBOL(snd_pcm_vad_attached);
+
+static bool rockchip_vad_writeable_reg(struct device *dev, unsigned int reg)
+{
+	return true;
+}
+
+static bool rockchip_vad_readable_reg(struct device *dev, unsigned int reg)
+{
+	return true;
+}
+
+static bool rockchip_vad_volatile_reg(struct device *dev, unsigned int reg)
+{
+	switch (reg) {
+	case VAD_INT:
+	case VAD_RAM_CUR_ADDR:
+	case VAD_DET_CON5:
+		return true;
+	default:
+		return false;
+	}
+}
+
+static const struct reg_default rockchip_vad_reg_defaults[] = {
+	{VAD_CTRL,     0x03000000},
+	{VAD_DET_CON0, 0x00024020},
+	{VAD_DET_CON1, 0x00ff0064},
+	{VAD_DET_CON2, 0x3bf5e663},
+	{VAD_DET_CON3, 0x3bf58817},
+	{VAD_DET_CON4, 0x382b8858},
+	{VAD_RAM_BEGIN_ADDR, 0xfff88000},
+	{VAD_RAM_END_ADDR, 0xfffbfff8},
+};
+
+static const struct regmap_config rockchip_vad_regmap_config = {
+	.reg_bits = 32,
+	.reg_stride = 4,
+	.val_bits = 32,
+	.max_register = VAD_INT,
+	.reg_defaults = rockchip_vad_reg_defaults,
+	.num_reg_defaults = ARRAY_SIZE(rockchip_vad_reg_defaults),
+	.writeable_reg = rockchip_vad_writeable_reg,
+	.readable_reg = rockchip_vad_readable_reg,
+	.volatile_reg = rockchip_vad_volatile_reg,
+	.cache_type = REGCACHE_FLAT,
+};
+
+static const struct audio_src_addr_map addr_maps[] = {
+	{0, 0xff300800},
+	{1, 0xff310800},
+	{2, 0xff320800},
+	{3, 0xff330800},
+	{4, 0xff380400}
+};
+
+static int rockchip_vad_get_audio_src_address(struct rockchip_vad *vad,
+					      u32 addr)
+{
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_SIZE(addr_maps); i++) {
+		if ((addr & addr_maps[i].addr) == addr) {
+			vad->audio_src = addr_maps[i].id;
+			vad->audio_src_addr = addr_maps[i].addr;
+			return 0;
+		}
+	}
+
+	return -ENODEV;
+}
+
+static irqreturn_t rockchip_vad_irq(int irqno, void *dev_id)
+{
+	struct rockchip_vad *vad = dev_id;
+	unsigned  int val;
+
+	regmap_read(vad->regmap, VAD_INT, &val);
+	regmap_write(vad->regmap, VAD_INT, val);
+
+	dev_dbg(vad->dev, "irq 0x%08x\n", val);
+
+	return IRQ_HANDLED;
+}
+
+static const struct reg_sequence rockchip_vad_acodec_adc_enable[] = {
+	{ VAD_OD_ADDR0, 0x36261606 },
+	{ VAD_D_DATA0, 0x51515151 },
+	{ VAD_OD_ADDR1, 0x30201000 },
+	{ VAD_D_DATA1, 0xbbbbbbbb },
+	{ VAD_OD_ADDR2, 0x32221202 },
+	{ VAD_D_DATA2, 0x11111111 },
+	{ VAD_OD_ADDR3, 0x35251505 },
+	{ VAD_D_DATA3, 0x77777777 },
+	{ VAD_OD_ADDR4, 0x32221202 },
+	{ VAD_D_DATA4, 0x33333333 },
+	{ VAD_OD_ADDR5, 0x30201000 },
+	{ VAD_D_DATA5, 0xffffffff },
+	{ VAD_OD_ADDR6, 0x32221202 },
+	{ VAD_D_DATA6, 0x77777777 },
+};
+
+static int rockchip_vad_config_acodec(struct snd_pcm_hw_params *params,
+				      struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+	unsigned int val = 0;
+
+	if (!vad->acodec_cfg)
+		return 0;
+
+	val = ACODEC_BASE + ACODEC_ADC_ANA_CON0;
+	regmap_write(vad->regmap, VAD_ID_ADDR, val);
+
+	regmap_multi_reg_write(vad->regmap, rockchip_vad_acodec_adc_enable,
+			       ARRAY_SIZE(rockchip_vad_acodec_adc_enable));
+
+	regmap_update_bits(vad->regmap, VAD_CTRL, ACODE_CFG_REG_NUM_MASK,
+			   ACODE_CFG_REG_NUM(ACODEC_REG_NUM));
+	regmap_update_bits(vad->regmap, VAD_CTRL, CFG_ACODE_AFTER_DET_EN_MASK,
+			   CFG_ACODE_AFTER_DET_EN);
+
+	return 0;
+}
+
+static struct snd_soc_dai *rockchip_vad_find_dai(struct device_node *np)
+{
+	struct snd_soc_dai_link_component dai_component = { 0 };
+
+	dai_component.of_node = np;
+
+	return snd_soc_find_dai(&dai_component);
+}
+
+static void hw_refine_channels(struct snd_pcm_hw_params *params,
+			       unsigned int channel)
+{
+	struct snd_interval *c =
+		hw_param_interval(params, SNDRV_PCM_HW_PARAM_CHANNELS);
+
+	c->min = channel;
+	c->max = channel;
+}
+
+static void rockchip_vad_params_fixup(struct snd_pcm_substream *substream,
+				      struct snd_pcm_hw_params *params,
+				      struct snd_soc_dai *dai)
+{
+	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(dai->codec);
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai, *audio_src_dai;
+	struct device_node *np;
+	struct rk_mdais_dev *mdais;
+	unsigned int *channel_maps;
+	int i;
+
+	cpu_dai = rtd->cpu_dai;
+	np = cpu_dai->dev->of_node;
+	if (of_device_is_compatible(np, "rockchip,multi-dais")) {
+		audio_src_dai = rockchip_vad_find_dai(vad->audio_node);
+		mdais = snd_soc_dai_get_drvdata(cpu_dai);
+		channel_maps = mdais->capture_channel_maps;
+		for (i = 0; i < mdais->num_dais; i++) {
+			if (audio_src_dai == mdais->dais[i].dai &&
+			    channel_maps[i])
+				hw_refine_channels(params, channel_maps[i]);
+		}
+	}
+}
+
+static int rockchip_vad_hw_params(struct snd_pcm_substream *substream,
+				  struct snd_pcm_hw_params *params,
+				  struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+	unsigned int val = 0, mask = 0, frame_bytes;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		return 0;
+
+	rockchip_vad_params_fixup(substream, params, dai);
+	vad->channels = params_channels(params);
+	switch (params_format(params)) {
+	case SNDRV_PCM_FORMAT_S16_LE:
+		val = AUDIO_CHNL_16B;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+	case SNDRV_PCM_FORMAT_S32_LE:
+		val = AUDIO_CHNL_24B;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	regmap_update_bits(vad->regmap, VAD_CTRL, AUDIO_CHNL_BW_MASK, val);
+	regmap_update_bits(vad->regmap, VAD_CTRL, AUDIO_CHNL_NUM_MASK,
+			   AUDIO_CHNL_NUM(params_channels(params)));
+
+	val = SRC_ADDR_MODE_INC | SRC_BURST_INCR;
+	mask = SRC_ADDR_MODE_MASK | SRC_BURST_MASK | INCR_BURST_LEN_MASK;
+	switch (params_channels(params)) {
+	case 8:
+		/* fallthrough */
+	case 6:
+		/* fallthrough */
+	case 4:
+		/* fallthrough */
+	case 2:
+		val |= INCR_BURST_LEN(params_channels(params));
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	regmap_update_bits(vad->regmap, VAD_CTRL, mask, val);
+
+	/* calculate buffer space according buffer time */
+	if (vad->buffer_time) {
+		frame_bytes = snd_pcm_format_size(params_format(params),
+						  params_channels(params));
+		val = params_rate(params) * vad->buffer_time / 1000;
+		val *= frame_bytes;
+		val += vad->memphy;
+		val -= 0x8;
+		if (val < vad->memphy || val > VAD_SRAM_BUFFER_END)
+			return -EINVAL;
+		regmap_write(vad->regmap, VAD_RAM_END_ADDR, val);
+	}
+
+	/*
+	 * config acodec
+	 * audio_src 2/3 is connected to acodec
+	 */
+	val = vad->audio_src >> AUDIO_SRC_SEL_SHIFT;
+	if (val == 2 || val == 3)
+		rockchip_vad_config_acodec(params, dai);
+
+	return 0;
+}
+
+static int rockchip_vad_enable_cpudai(struct snd_pcm_substream *substream)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *cpu_dai;
+	int ret = 0;
+
+	if (PCM_RUNTIME_CHECK(substream))
+		return -EFAULT;
+	if (!rtd)
+		return -EFAULT;
+
+	cpu_dai = rtd->cpu_dai;
+
+	pm_runtime_get_sync(cpu_dai->dev);
+
+	if (cpu_dai->driver->ops && cpu_dai->driver->ops->trigger)
+		ret = cpu_dai->driver->ops->trigger(substream,
+						    SNDRV_PCM_TRIGGER_START,
+						    cpu_dai);
+
+	return ret;
+}
+
+static int rockchip_vad_pcm_startup(struct snd_pcm_substream *substream,
+				    struct snd_soc_dai *dai)
+{
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		return 0;
+
+	vad_substream = substream;
+
+	return 0;
+}
+
+static void rockchip_vad_pcm_shutdown(struct snd_pcm_substream *substream,
+				      struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		return;
+
+	rockchip_vad_enable_cpudai(substream);
+	rockchip_vad_setup(vad);
+
+	vad_substream = NULL;
+}
+
+static int rockchip_vad_trigger(struct snd_pcm_substream *substream, int cmd,
+				struct snd_soc_dai *dai)
+{
+	struct snd_soc_codec *codec = dai->codec;
+	struct rockchip_vad *vad = snd_soc_codec_get_drvdata(codec);
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+			return 0;
+		rockchip_vad_stop(vad);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static struct snd_soc_dai_ops rockchip_vad_dai_ops = {
+	.hw_params = rockchip_vad_hw_params,
+	.shutdown = rockchip_vad_pcm_shutdown,
+	.startup = rockchip_vad_pcm_startup,
+	.trigger = rockchip_vad_trigger,
+};
+
+static struct snd_soc_dai_driver vad_dai = {
+	.name = "vad",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 1,
+		.channels_max = 8,
+		.rates = VAD_RATES,
+		.formats = VAD_FORMATS,
+	},
+	.capture = {
+		 .stream_name = "Capture",
+		.channels_min = 1,
+		.channels_max = 8,
+		.rates = VAD_RATES,
+		.formats = VAD_FORMATS,
+	},
+	.ops = &rockchip_vad_dai_ops,
+};
+
+static struct snd_soc_codec_driver soc_vad_codec;
+
+#if defined(CONFIG_DEBUG_FS)
+#include <linux/fs.h>
+#include <linux/debugfs.h>
+#include <linux/seq_file.h>
+
+static int rockchip_vad_debugfs_reg_show(struct seq_file *s, void *v)
+{
+	struct rockchip_vad *vad = s->private;
+	unsigned int i;
+	unsigned int val;
+
+	for (i = VAD_CTRL; i <= VAD_INT; i += 4) {
+		regmap_read(vad->regmap, i, &val);
+		if (!(i % 16))
+			seq_printf(s, "\n%08x:  ", i);
+		seq_printf(s, "%08x ", val);
+	}
+
+	return 0;
+}
+
+static ssize_t rockchip_vad_debugfs_reg_write(struct file *file,
+					      const char __user *buf,
+					      size_t count, loff_t *ppos)
+{
+	struct rockchip_vad *vad = ((struct seq_file *)file->private_data)->private;
+	unsigned int reg, val;
+	char kbuf[24];
+
+	if (count >= sizeof(kbuf))
+		return -EINVAL;
+
+	if (copy_from_user(kbuf, buf, count))
+		return -EFAULT;
+	kbuf[count] = '\0';
+	if (sscanf(kbuf, "%x %x", &reg, &val) != 2)
+		return -EFAULT;
+
+	regmap_write(vad->regmap, reg, val);
+
+	return count;
+}
+
+static int rockchip_vad_debugfs_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, rockchip_vad_debugfs_reg_show, inode->i_private);
+}
+
+static const struct file_operations rockchip_vad_reg_debugfs_fops = {
+	.owner = THIS_MODULE,
+	.open = rockchip_vad_debugfs_open,
+	.read = seq_read,
+	.write = rockchip_vad_debugfs_reg_write,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+#endif
+
+static void rockchip_vad_init(struct rockchip_vad *vad)
+{
+	unsigned int val, mask;
+
+	regmap_write(vad->regmap, VAD_RAM_BEGIN_ADDR, vad->memphy);
+	vad->vbuf.begin = vad->membase;
+	regmap_write(vad->regmap, VAD_IS_ADDR, vad->audio_src_addr);
+
+	val = VAD_DET_CHNL(vad->audio_chnl);
+	val |= vad->audio_src;
+	val |= vad->mode << VAD_MODE_SHIFT;
+	mask = VAD_DET_CHNL_MASK | AUDIO_SRC_SEL_MASK |
+	       VAD_MODE_MASK;
+
+	regmap_update_bits(vad->regmap, VAD_CTRL, mask, val);
+}
+
+static int rockchip_vad_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct device_node *asrc_np;
+	struct rockchip_vad *vad;
+	struct resource *res;
+	struct resource audio_res;
+	void __iomem *regbase;
+	int irq;
+	int ret;
+
+	vad = devm_kzalloc(&pdev->dev, sizeof(*vad), GFP_KERNEL);
+	if (!vad)
+		return -ENOMEM;
+
+	vad->dev = &pdev->dev;
+
+	vad->acodec_cfg = of_property_read_bool(np, "rockchip,acodec-cfg");
+	of_property_read_u32(np, "rockchip,mode", &vad->mode);
+	of_property_read_u32(np, "rockchip,det-channel", &vad->audio_chnl);
+	of_property_read_u32(np, "rockchip,buffer-time-ms", &vad->buffer_time);
+	asrc_np = of_parse_phandle(np, "rockchip,audio-src", 0);
+	ret = of_address_to_resource(asrc_np, 0, &audio_res);
+	if (ret)
+		return ret;
+	ret = rockchip_vad_get_audio_src_address(vad, audio_res.start);
+	if (ret)
+		return ret;
+	vad->audio_node = asrc_np;
+	vad->audio_src <<= AUDIO_SRC_SEL_SHIFT;
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "vad");
+	regbase = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(regbase))
+		return PTR_ERR(regbase);
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM,
+					   "vad-memory");
+	vad->memphy = res->start;
+	vad->membase = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(vad->membase))
+		return PTR_ERR(vad->membase);
+
+	vad->hclk = devm_clk_get(&pdev->dev, "hclk");
+	if (IS_ERR(vad->hclk))
+		return PTR_ERR(vad->hclk);
+
+	ret = clk_prepare_enable(vad->hclk);
+	if (ret)
+		return ret;
+
+	vad->regmap = devm_regmap_init_mmio(&pdev->dev, regbase,
+					    &rockchip_vad_regmap_config);
+	if (IS_ERR(vad->regmap)) {
+		ret = PTR_ERR(vad->regmap);
+		goto err;
+	}
+
+	rockchip_vad_init(vad);
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		ret = irq;
+		goto err;
+	}
+
+	ret = devm_request_irq(&pdev->dev, irq, rockchip_vad_irq,
+			       0, dev_name(&pdev->dev), vad);
+	if (ret < 0)
+		goto err;
+
+#if defined(CONFIG_DEBUG_FS)
+	vad->debugfs_dir = debugfs_create_dir("vad", NULL);
+	if (IS_ERR(vad->debugfs_dir))
+		dev_err(&pdev->dev, "failed to create debugfs dir for vad!\n");
+	else
+		debugfs_create_file("reg", 0644, vad->debugfs_dir, vad,
+				    &rockchip_vad_reg_debugfs_fops);
+#endif
+
+	platform_set_drvdata(pdev, vad);
+	return snd_soc_register_codec(&pdev->dev, &soc_vad_codec,
+				      &vad_dai, 1);
+err:
+	clk_disable_unprepare(vad->hclk);
+	return ret;
+}
+
+static int rockchip_vad_remove(struct platform_device *pdev)
+{
+	struct rockchip_vad *vad = dev_get_drvdata(&pdev->dev);
+
+	if (!IS_ERR(vad->hclk))
+		clk_disable_unprepare(vad->hclk);
+	snd_soc_unregister_codec(&pdev->dev);
+	return 0;
+}
+
+static const struct of_device_id rockchip_vad_match[] = {
+	{ .compatible = "rockchip,vad", },
+	{},
+};
+
+static struct platform_driver rockchip_vad_driver = {
+	.probe = rockchip_vad_probe,
+	.remove = rockchip_vad_remove,
+	.driver = {
+		.name = DRV_NAME,
+		.of_match_table = of_match_ptr(rockchip_vad_match),
+	},
+};
+module_platform_driver(rockchip_vad_driver);
+
+MODULE_DESCRIPTION("Rockchip VAD Controller");
+MODULE_AUTHOR("Andy Yan <andy.yan@rock-chips.com>");
+MODULE_AUTHOR("Sugar Zhang <sugar.zhang@rock-chips.com>");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:" DRV_NAME);
+MODULE_DEVICE_TABLE(of, rockchip_vad_match);
diff --git a/sound/soc/rockchip/rockchip_vad.h b/sound/soc/rockchip/rockchip_vad.h
new file mode 100644
index 000000000000..a4ae5cf689af
--- /dev/null
+++ b/sound/soc/rockchip/rockchip_vad.h
@@ -0,0 +1,183 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Rockchip VAD driver
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+#ifndef _ROCKCHIP_VAD_H
+#define _ROCKCHIP_VAD_H
+
+#define VAD_CTRL			0x00
+#define VAD_DET_CHNL_SHIFT		29
+#define VAD_DET_CHNL_MASK		GENMASK(31, 29)
+#define VAD_DET_CHNL(x)			((x) << VAD_DET_CHNL_SHIFT)
+#define AUDIO_24BIT_SAT_SHIFT		28
+#define AUDIO_24BIT_SAT_MASK		BIT(28)
+#define AUDIO_H16B			0
+#define AUDIO_SAT_24TO16		BIT(28)
+#define AUDIO_24BIT_ALIGN_MODE_SHIFT	27
+#define AUDIO_24BIT_ALIGN_MODE_MASK	BIT(27)
+#define AUDIO_24BIT_ALIGN_8_31B		0
+#define AUDIO_24BIT_ALIGN_0_23B		BIT(27)
+#define AUDIO_CHNL_BW_SHIFT		26
+#define AUDIO_CHNL_BW_MASK		BIT(26)
+#define AUDIO_CHNL_16B			0
+#define AUDIO_CHNL_24B			BIT(26)
+#define AUDIO_CHNL_NUM_SHIFT		23
+#define AUDIO_CHNL_NUM_MASK		GENMASK(25, 23)
+#define AUDIO_CHNL_NUM(x)		((x - 1) << AUDIO_CHNL_NUM_SHIFT)
+#define CFG_ACODE_AFTER_DET_EN_SHIFT	22
+#define CFG_ACODE_AFTER_DET_EN_MASK	BIT(22)
+#define CFG_ACODE_AFTER_DET_EN		BIT(22)
+#define VAD_MODE_SHIFT			20
+#define VAD_MODE_MASK			GENMASK(21, 20)
+#define STORE_DATA_VAD_DET_ONLY		0
+#define STORE_DATA_ALL			(1 << VAD_MODE_SHIFT)
+#define NO_STORE_DATA			(2 << VAD_MODE_SHIFT)
+#define ACODE_CFG_REG_NUM_SHIFT		15
+#define ACODE_CFG_REG_NUM_MASK		GENMASK(19, 15)
+#define ACODE_CFG_REG_NUM(x)		((x - 1) << ACODE_CFG_REG_NUM_SHIFT)
+#define SRC_ADDR_MODE_SHIFT		14
+#define SRC_ADDR_MODE_MASK		BIT(14)
+#define SRC_ADDR_MODE_INC		0
+#define SRC_ADDR_MODE_FIXED		BIT(14)
+#define INCR_BURST_LEN_SHIFT		10
+#define INCR_BURST_LEN_MASK		GENMASK(13, 10)
+#define INCR_BURST_LEN(x)		((x - 1) << INCR_BURST_LEN_SHIFT)
+#define SRC_BURST_NUM_SHIFT		7
+#define SRC_BURST_NUM_MASK		GENMASK(9, 7)
+#define SRC_BURST_NUM(x)		((x - 1) << SRC_BURST_NUM_SHIFT)
+#define SRC_BURST_SHIFT			4
+#define SRC_BURST_MASK			GENMASK(6, 4)
+#define SRC_BURST_SIGNLE		0
+#define SRC_BURST_INCR			(1 << SRC_BURST_SHIFT)
+#define SRC_BURST_INCR4			(3 << SRC_BURST_SHIFT)
+#define SRC_BURST_INCR8			(5 << SRC_BURST_SHIFT)
+#define SRC_BURST_INCR16		(7 << SRC_BURST_SHIFT)
+#define AUDIO_SRC_SEL_SHIFT		1
+#define AUDIO_SRC_SEL_MASK		GENMASK(3, 1)
+#define AUDIO_SRC_SEL_I2S0		0
+#define AUDIO_SRC_SEL_I2S1		(1 << AUDIO_SRC_SEL_MASK)
+#define AUDIO_SRC_SEL_I2S2		(2 << AUDIO_SRC_SEL_MASK)
+#define AUDIO_SRC_SEL_I2S3		(3 << AUDIO_SRC_SEL_MASK)
+#define AUDIO_SRC_SEL_PDM		(4 << AUDIO_SRC_SEL_MASK)
+#define VAD_EN_SHIFT			0
+#define VAD_EN_MASK			BIT(0)
+#define VAD_EN				BIT(0)
+#define VAD_DISABLE			0
+#define VAD_IS_ADDR			4
+#define VAD_ID_ADDR			8
+#define VAD_OD_ADDR0			0x0c
+#define VAD_OD_ADDR1			0x10
+#define VAD_OD_ADDR2			0x14
+#define VAD_OD_ADDR3			0x18
+#define VAD_OD_ADDR4			0x1c
+#define VAD_OD_ADDR5			0x20
+#define VAD_OD_ADDR6			0x24
+#define VAD_OD_ADDR7			0x28
+#define VAD_D_DATA0			0x2c
+#define VAD_D_DATA1			0x30
+#define VAD_D_DATA2			0x34
+#define VAD_D_DATA3			0x38
+#define VAD_D_DATA4			0x3c
+#define VAD_D_DATA5			0x40
+#define VAD_D_DATA6			0x44
+#define VAD_D_DATA7			0x48
+
+#define VAD_TIMEOUT			0x4c
+#define WORK_TIMEOUT_EN_MASK		BIT(31)
+#define WORK_TIMEOUT_EN			BIT(31)
+#define WORK_TIMEOUT_DISABLE		0
+#define IDLE_TIMEOUT_EN_MASK		BIT(30)
+#define IDLE_TIMEOUT_EN			BIT(30)
+#define IDLE_TIMEOUT_DISABLE		0
+#define WORK_TIMEOUT_THD_SHIFT		20
+#define WORK_TIMEOUT_THD_MASK		GENMASK(29, 20)
+#define WORK_TIMEOUT_THD(x)		((x) << WORK_TIMEOUT_THD_SHIFT)
+#define IDLE_TIMEOUT_THD_SHIFT		0
+#define IDLE_TIMEOUT_THD_MASK		GENMASK(19, 0)
+#define IDLE_TIMEOUT_THD(x)		((x) << IDLE_TIMEOUT_THD_SHIFT)
+
+#define VAD_RAM_BEGIN_ADDR		0x50
+#define VAD_RAM_END_ADDR		0x54
+#define VAD_RAM_CUR_ADDR		0x58
+#define VAD_DET_CON0			0x5c
+#define VAD_CON_THD_SHIFT		16
+#define VAD_CON_THD_MASK		GENMASK(23, 16)
+#define VAD_CON_THD(x)			((x) << VAD_CON_THD_SHIFT)
+#define NOISE_LEVEL_SHIFT		12
+#define NOISE_LEVEL_MASK		GENMASK(14, 12)
+#define NOISE_LEVEL(x)			((x) << NOISE_LEVEL_SHIFT)
+#define GAIN_SHIFT			0
+#define GAIN_MASK			GENMASK(9, 0)
+#define GAIN(x)				(x)
+
+#define VAD_DET_CON1			0x60
+#define MIN_NOISE_FIND_MODE_SHIFT	30
+#define MIN_NOISE_FIN_MODE_MASK		BIT(30)
+#define MIN_NOISE_FIND_MODE0		0
+#define MIN_NOISE_FIND_MODE1		BIT(30)
+#define NOISE_CLEAN_MODE_SHIFT		29
+#define NOISE_CLEAN_MODE_MASK		BIT(29)
+#define NOISE_CLEAN_MODE0		0
+#define NOISE_CLEAN_MODE1		BIT(29)
+#define NOISE_CLK_FORCE_EN_MASK		BIT(28)
+#define NOISE_CLK_AUTO_GATING		0
+#define NOISE_CLK_FORCE_EN		BIT(28)
+#define NOISE_SAMPLE_NUM_SHIFT		16
+#define NOISE_SAMPLE_NUM_MASK		GENMASK(25, 16)
+#define NOISE_SAMPLE_NUM		((x) << NOISE_SAMPLE_NUM_SHIFT)
+#define SOUND_THD_MASK			GENMASK(15, 0)
+#define SOUND_THD(x)			(x)
+
+#define VAD_DET_CON2			0x64
+#define IIR_B0_SHIFT			16
+#define IIR_B0_MASK			GENMASK(31, 16)
+#define IIR_B0(x)			((x) << IIR_B0_SHIFT)
+#define NOISE_ALPHA_SHIFT		8
+#define NOISE_ALPHA_MASK		GENMASK(15, 8)
+#define NOISE_ALPHA(x)			((x) << NOISE_ALPHA_SHIFT)
+#define NOISE_FRM_NUM_MASK		GENMASK(6, 0)
+#define NOISE_FRM_NUM(x)		(x)
+
+#define VAD_DET_CON3			0x68
+#define IIR_B2_MASK			GENMASK(31, 16)
+#define IIR_B2(x)			((x) << 16)
+#define IIR_B1_MASK			GENMASK(15, 0)
+#define IIR_B1(x)			(x)
+
+#define VAD_DET_CON4			0x6c
+#define IIR_A2_MASK			GENMASK(31, 16)
+#define IIR_A2(x)			((x) << 16)
+#define IIR_A1_MASK			GENMASK(15, 0)
+#define IIR_A1(x)			(x)
+
+#define VAD_DET_CON5			0x70
+#define IIR_RESULT_SHIFT		16
+#define IIR_RESULT_MASK			GENMASK(31, 16)
+#define NOISE_ABS_MASK			GENMASK(15, 0)
+#define NOISE_ABS(x)			(x)
+
+#define VAD_INT				0x74
+#define VAD_IDLE_MASK			BIT(9)
+#define RAM_LOOP_FLGA_MASK		BIT(8)
+#define WORK_TIMEOUT_FLAG_MASK		BIT(7)
+#define IDLE_TIMEOUT_FLAG_MASK		BIT(6)
+#define ERR_INT_FLAG_MASK		BIT(5)
+#define VAD_DET_INT_FLAG_MASK		BIT(4)
+#define WORK_TIMEOUT_INT_EN_MASK	BIT(3)
+#define WORK_TIMEOUT_INT_EN		BIT(3)
+#define IDLE_TIMEOUT_INT_EN_MASK	BIT(2)
+#define IDLE_TIMEOUT_INT_EN		BIT(2)
+#define ERR_INT_EN_MASK			BIT(1)
+#define ERR_INT_EN			BIT(1)
+#define VAD_DET_INT_EN_MASK		BIT(0)
+#define VAD_DET_INT_EN			BIT(0)
+
+/* acodec */
+#define ACODEC_BASE			0xff560000
+#define ACODEC_ADC_ANA_CON0		0X340
+
+#endif
diff --git a/sound/soc/rockchip/vad_preprocess.h b/sound/soc/rockchip/vad_preprocess.h
new file mode 100644
index 000000000000..85e4d1022984
--- /dev/null
+++ b/sound/soc/rockchip/vad_preprocess.h
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Rockchip VAD Preprocess
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+#ifndef _ROCKCHIP_VAD_PREPROCESS_H
+#define _ROCKCHIP_VAD_PREPROCESS_H
+
+struct vad_params {
+	int noise_abs;
+	int noise_level;
+	int sound_thd;
+	int vad_con_thd;
+	int voice_gain;
+};
+
+struct vad_uparams {
+	int noise_abs;
+};
+
+void vad_preprocess_init(struct vad_params *params);
+void vad_preprocess_destroy(void);
+void vad_preprocess_update_params(struct vad_uparams *uparams);
+int vad_preprocess(int data);
+
+#endif
diff --git a/sound/soc/rockchip/vad_preprocess_arm.S b/sound/soc/rockchip/vad_preprocess_arm.S
new file mode 100644
index 000000000000..a0d3eabf2ba0
--- /dev/null
+++ b/sound/soc/rockchip/vad_preprocess_arm.S
@@ -0,0 +1,348 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Rockchip VAD Preprocess
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+	.arch armv7-a
+	.fpu softvfp
+	.eabi_attribute 20, 1
+	.eabi_attribute 21, 1
+	.eabi_attribute 23, 3
+	.eabi_attribute 24, 1
+	.eabi_attribute 25, 1
+	.eabi_attribute 26, 2
+	.eabi_attribute 30, 4
+	.eabi_attribute 34, 1
+	.eabi_attribute 18, 4
+	.file	"vad_preprocess_arm.S"
+	.text
+	.align	2
+	.global	vad_preprocess_init
+	.type	vad_preprocess_init, %function
+vad_preprocess_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L4
+	ldr	r3, [r0, #8]
+	strh	r3, [r2]	@ movhi
+	ldr	r3, [r0, #4]
+	strh	r3, [r2, #2]	@ movhi
+	ldr	r3, [r0, #12]
+	strh	r3, [r2, #4]	@ movhi
+	ldr	r3, [r0]
+	strh	r3, [r2, #6]	@ movhi
+	ldr	r3, [r0, #16]
+	tst	r3, #512
+	ubfx	r3, r3, #0, #9
+	eorne	r3, r3, #65280
+	eorne	r3, r3, #255
+	uxtheq	r3, r3
+	strh	r3, [r2, #8]	@ movhi
+	bx	lr
+.L5:
+	.align	2
+.L4:
+	.word	.LANCHOR0
+	.fnend
+	.size	vad_preprocess_init, .-vad_preprocess_init
+	.align	2
+	.global	vad_preprocess
+	.type	vad_preprocess, %function
+vad_preprocess:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L27
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	movw	lr, #15349
+	ldrsh	r2, [r3, #8]
+	ldrh	ip, [r3, #10]
+	ldr	r1, .L27+4
+	mul	r0, r2, r0
+	ldrh	r4, [r3, #12]
+	smulbb	r1, ip, r1
+	add	r2, r0, #31
+	cmp	r0, #0
+	movlt	r0, r2
+	ldrh	r2, [r3, #14]
+	mov	r0, r0, asr #5
+	mla	r1, lr, r0, r1
+	smlabb	r1, r4, lr, r1
+	ldr	r4, .L27+8
+	ldrsh	lr, [r3, #16]
+	smulbb	r4, r2, r4
+	rsb	r4, r4, r1
+	movw	r1, #14379
+	mls	r4, lr, r1, r4
+	cmp	r4, #1
+	mov	r5, r4, asr #31
+	sbcs	r1, r5, #0
+	blt	.L7
+	adds	r4, r4, #8192
+	adc	r5, r5, #0
+	b	.L24
+.L7:
+	subs	r4, r4, #8192
+	movw	r8, #16383
+	sbc	r5, r5, #0
+	mov	r9, #0
+	mov	r6, r5, asr #31
+	mov	r7, r6, asr #31
+	and	r6, r6, r8
+	and	r7, r7, r9
+	adds	r4, r4, r6
+	adc	r5, r5, r7
+.L24:
+	strh	ip, [r3, #12]	@ movhi
+	mov	r1, r4, lsr #14
+	ldrh	ip, [r3, #18]
+	orr	r1, r1, r5, asl #18
+	strh	r0, [r3, #10]	@ movhi
+	add	ip, ip, #1
+	uxth	r1, r1
+	ldr	r0, .L27+12
+	uxth	ip, ip
+	strh	r1, [r3, #14]	@ movhi
+	strh	ip, [r3, #18]	@ movhi
+	sxth	r1, r1
+	sxth	ip, ip
+	cmp	r1, #0
+	and	r0, r0, ip
+	rsblt	r1, r1, #0
+	cmp	r0, #0
+	strh	r2, [r3, #16]	@ movhi
+	sublt	r0, r0, #1
+	ldr	r2, [r3, #20]
+	mvnlt	r0, r0, asl #24
+	add	r2, r1, r2
+	mvnlt	r0, r0, lsr #24
+	addlt	r0, r0, #1
+	cmp	r0, #0
+	str	r2, [r3, #20]
+	bne	.L9
+	ldr	r0, [r3, #24]
+	ldr	ip, .L27
+	cmp	r0, #99
+	bgt	.L11
+	add	r2, r2, #128
+	add	ip, ip, r0, asl #1
+	add	lr, r2, #255
+	cmp	r2, #0
+	movlt	r2, lr
+	mov	r2, r2, asr #8
+	strh	r2, [ip, #28]	@ movhi
+	b	.L12
+.L11:
+	add	lr, ip, #28
+	add	ip, ip, #226
+.L13:
+	ldrh	r4, [lr, #2]
+	strh	r4, [lr], #2	@ movhi
+	cmp	lr, ip
+	bne	.L13
+	add	r2, r2, #128
+	add	ip, r2, #255
+	cmp	r2, #0
+	movlt	r2, ip
+	mov	r2, r2, asr #8
+	strh	r2, [r3, #226]	@ movhi
+.L12:
+	cmp	r0, #99
+	ldrh	r2, [r3, #28]
+	ldrle	r4, .L27+16
+	movle	lr, #1
+	bgt	.L26
+.L15:
+	cmp	lr, r0
+	bge	.L17
+	ldrsh	ip, [r4], #2
+	sxth	r2, r2
+	add	lr, lr, #1
+	cmp	ip, r2
+	movge	ip, r2
+	uxth	r2, ip
+	b	.L15
+.L26:
+	ldr	ip, .L27+16
+	add	r4, ip, #198
+.L18:
+	ldrsh	lr, [ip], #2
+	sxth	r2, r2
+	cmp	r2, lr
+	movge	r2, lr
+	cmp	ip, r4
+	uxth	r2, r2
+	bne	.L18
+.L17:
+	ldrh	lr, [r3, #6]
+	mov	ip, #128
+	mov	r4, #230
+	add	r0, r0, #1
+	str	r0, [r3, #24]
+	smlabb	ip, lr, r4, ip
+	mov	lr, #26
+	smlabb	r2, r2, lr, ip
+	add	ip, r2, #255
+	cmp	r2, #0
+	movlt	r2, ip
+	mov	r2, r2, asr #8
+	strh	r2, [r3, #6]	@ movhi
+	mov	r2, #0
+	str	r2, [r3, #20]
+	strh	r2, [r3, #18]	@ movhi
+.L9:
+	ldrh	r2, [r3, #6]
+	ldrh	ip, [r3, #2]
+	ldrsh	r3, [r3]
+	ldr	r0, .L27
+	smlabb	r3, r2, ip, r3
+	add	r2, r0, #428
+	cmp	r1, r3
+	ble	.L19
+	ldrh	r3, [r2]
+	ldrsh	r0, [r0, #4]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r2]	@ movhi
+	sxth	r3, r3
+	cmp	r0, r3
+	movge	r0, #0
+	movlt	r0, #1
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L19:
+	mov	r0, #0
+	strh	r0, [r2]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, pc}
+.L28:
+	.align	2
+.L27:
+	.word	.LANCHOR0
+	.word	-30697
+	.word	-30632
+	.word	-2147483393
+	.word	.LANCHOR0+30
+	.fnend
+	.size	vad_preprocess, .-vad_preprocess
+	.align	2
+	.global	vad_preprocess_destroy
+	.type	vad_preprocess_destroy, %function
+vad_preprocess_destroy:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L32
+	mov	r3, #0
+	mov	ip, r3
+	strh	r3, [r2, #10]	@ movhi
+	strh	r3, [r2, #12]	@ movhi
+	strh	r3, [r2, #14]	@ movhi
+	strh	r3, [r2, #16]	@ movhi
+	strh	r3, [r2, #18]	@ movhi
+	add	r2, r2, #428
+	strh	r3, [r2]	@ movhi
+.L30:
+	ldr	r2, .L32
+	mov	r1, #0
+	add	r0, r2, #28
+	strh	ip, [r3, r0]	@ movhi
+	add	r3, r3, #2
+	cmp	r3, #200
+	bne	.L30
+	mov	r3, #32
+	str	r1, [r2, #20]
+	strh	r1, [r2, #6]	@ movhi
+	strh	r3, [r2, #8]	@ movhi
+	str	r1, [r2, #24]
+	bx	lr
+.L33:
+	.align	2
+.L32:
+	.word	.LANCHOR0
+	.fnend
+	.size	vad_preprocess_destroy, .-vad_preprocess_destroy
+	.align	2
+	.global	vad_preprocess_update_params
+	.type	vad_preprocess_update_params, %function
+vad_preprocess_update_params:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L35
+	ldrsh	r3, [r3, #6]
+	str	r3, [r0]
+	bx	lr
+.L36:
+	.align	2
+.L35:
+	.word	.LANCHOR0
+	.fnend
+	.size	vad_preprocess_update_params, .-vad_preprocess_update_params
+	.bss
+	.align	2
+.LANCHOR0 = . + 0
+	.type	g_sound_thd, %object
+	.size	g_sound_thd, 2
+g_sound_thd:
+	.space	2
+	.type	g_noise_level, %object
+	.size	g_noise_level, 2
+g_noise_level:
+	.space	2
+	.type	g_vad_con_thd, %object
+	.size	g_vad_con_thd, 2
+g_vad_con_thd:
+	.space	2
+	.type	g_noise_abs, %object
+	.size	g_noise_abs, 2
+g_noise_abs:
+	.space	2
+	.type	g_signal_gain, %object
+	.size	g_signal_gain, 2
+g_signal_gain:
+	.space	2
+	.type	g_xn_1, %object
+	.size	g_xn_1, 2
+g_xn_1:
+	.space	2
+	.type	g_xn_2, %object
+	.size	g_xn_2, 2
+g_xn_2:
+	.space	2
+	.type	g_yn_1, %object
+	.size	g_yn_1, 2
+g_yn_1:
+	.space	2
+	.type	g_yn_2, %object
+	.size	g_yn_2, 2
+g_yn_2:
+	.space	2
+	.type	g_sample_cnt, %object
+	.size	g_sample_cnt, 2
+g_sample_cnt:
+	.space	2
+	.type	g_sum_abs_frm, %object
+	.size	g_sum_abs_frm, 4
+g_sum_abs_frm:
+	.space	4
+	.type	frm_count, %object
+	.size	frm_count, 4
+frm_count:
+	.space	4
+	.type	g_ave_abs_rec, %object
+	.size	g_ave_abs_rec, 400
+g_ave_abs_rec:
+	.space	400
+	.type	g_vad_cnt, %object
+	.size	g_vad_cnt, 2
+g_vad_cnt:
+	.space	2
+	.ident	"GCC: (GNU) 4.9 20150123 (prerelease)"
+	.section	.note.GNU-stack,"",%progbits
diff --git a/sound/soc/rockchip/vad_preprocess_arm64.S b/sound/soc/rockchip/vad_preprocess_arm64.S
new file mode 100644
index 000000000000..fa579c1431c9
--- /dev/null
+++ b/sound/soc/rockchip/vad_preprocess_arm64.S
@@ -0,0 +1,273 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Rockchip VAD Preprocess
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+	.arch armv8-a
+	.file	"vad_preprocess_arm64.S"
+	.text
+	.align	2
+	.global	vad_preprocess_init
+	.type	vad_preprocess_init, %function
+vad_preprocess_init:
+	adrp	x2, .LANCHOR0
+	add	x1, x2, :lo12:.LANCHOR0
+	ldr	w3, [x0, 8]
+	strh	w3, [x2, #:lo12:.LANCHOR0]
+	ldr	w2, [x0, 4]
+	strh	w2, [x1, 2]
+	ldr	w2, [x0, 12]
+	strh	w2, [x1, 4]
+	ldr	w2, [x0]
+	strh	w2, [x1, 6]
+	ldr	w2, [x0, 16]
+	and	w0, w2, 511
+	tbz	x2, 9, .L2
+	mvn	w0, w0
+.L2:
+	strh	w0, [x1, 8]
+	ret
+	.size	vad_preprocess_init, .-vad_preprocess_init
+	.align	2
+	.global	vad_preprocess
+	.type	vad_preprocess, %function
+vad_preprocess:
+	adrp	x4, .LANCHOR0
+	add	x2, x4, :lo12:.LANCHOR0
+	mov	w8, 15349
+	ldrsh	w1, [x2, 8]
+	ldrsh	w7, [x2, 10]
+	ldrsh	w6, [x2, 12]
+	ldrsh	w3, [x2, 16]
+	mul	w0, w1, w0
+	mov	w1, 32
+	sdiv	w0, w0, w1
+	ldrsh	w1, [x2, 14]
+	mov	w2, -30697
+	mul	w2, w7, w2
+	mul	w5, w0, w8
+	sxtw	x2, w2
+	add	x2, x2, x5, sxtw
+	smaddl	x3, w3, w8, x2
+	mov	w2, -30632
+	smsubl	x2, w6, w2, x3
+	mov	w3, 14379
+	smsubl	x1, w1, w3, x2
+	cmp	x1, 0
+	ble	.L5
+	add	x1, x1, 8192
+	asr	x1, x1, 14
+.L6:
+	add	x2, x4, :lo12:.LANCHOR0
+	sxth	w1, w1
+	cmp	w1, 0
+	ldrh	w3, [x2, 18]
+	strh	w0, [x2, 10]
+	add	w3, w3, 1
+	ldr	w0, [x2, 20]
+	sxth	w3, w3
+	strh	w1, [x2, 12]
+	csneg	w1, w1, w1, ge
+	strh	w3, [x2, 18]
+	negs	w5, w3
+	add	w0, w1, w0
+	strh	w7, [x2, 16]
+	and	w3, w3, 255
+	strh	w6, [x2, 14]
+	and	w5, w5, 255
+	str	w0, [x2, 20]
+	csneg	w3, w3, w5, mi
+	cbnz	w3, .L7
+	ldr	w3, [x2, 24]
+	cmp	w3, 99
+	bgt	.L8
+	add	w0, w0, 128
+	mov	w5, 256
+	add	x2, x2, 32
+	sdiv	w0, w0, w5
+	strh	w0, [x2, w3, sxtw 1]
+.L9:
+	add	x2, x4, :lo12:.LANCHOR0
+	cmp	w3, 99
+	ldrsh	w0, [x2, 32]
+	bgt	.L11
+	add	x2, x2, 32
+	mov	x5, 0
+.L12:
+	add	x5, x5, 1
+	cmp	w3, w5
+	bgt	.L13
+.L14:
+	add	x2, x4, :lo12:.LANCHOR0
+	mov	w6, 230
+	add	w3, w3, 1
+	ldrsh	w5, [x2, 6]
+	strh	wzr, [x2, 18]
+	stp	wzr, w3, [x2, 20]
+	mul	w5, w5, w6
+	mov	w6, 26
+	add	w5, w5, 128
+	madd	w0, w0, w6, w5
+	mov	w5, 256
+	sdiv	w0, w0, w5
+	strh	w0, [x2, 6]
+.L7:
+	add	x0, x4, :lo12:.LANCHOR0
+	ldrsh	w3, [x4, #:lo12:.LANCHOR0]
+	ldrsh	w2, [x0, 6]
+	ldrsh	w5, [x0, 2]
+	madd	w2, w2, w5, w3
+	cmp	w1, w2
+	ble	.L16
+	ldrh	w1, [x0, 432]
+	add	w1, w1, 1
+	sxth	w1, w1
+	strh	w1, [x0, 432]
+	ldrsh	w0, [x0, 4]
+	cmp	w0, w1
+	cset	w0, lt
+	ret
+.L5:
+	sub	x1, x1, #8192
+	mov	x2, 16384
+	sdiv	x1, x1, x2
+	b	.L6
+.L8:
+	add	x5, x2, 34
+	add	x2, x2, 232
+.L10:
+	ldrh	w6, [x5]
+	add	x5, x5, 2
+	strh	w6, [x5, -4]
+	cmp	x2, x5
+	bne	.L10
+	add	w0, w0, 128
+	mov	w5, 256
+	add	x2, x4, :lo12:.LANCHOR0
+	sdiv	w0, w0, w5
+	strh	w0, [x2, 230]
+	b	.L9
+.L13:
+	lsl	x6, x5, 1
+	ldrsh	w7, [x6, x2]
+	ldrh	w6, [x6, x2]
+	cmp	w7, w0
+	csel	w0, w6, w0, le
+	sxth	w0, w0
+	b	.L12
+.L11:
+	add	x5, x2, 34
+	add	x2, x2, 232
+.L15:
+	ldrsh	w7, [x5]
+	ldrh	w6, [x5], 2
+	cmp	w7, w0
+	csel	w0, w6, w0, le
+	cmp	x2, x5
+	sxth	w0, w0
+	bne	.L15
+	b	.L14
+.L16:
+	strh	wzr, [x0, 432]
+	mov	w0, 0
+	ret
+	.size	vad_preprocess, .-vad_preprocess
+	.align	2
+	.global	vad_preprocess_destroy
+	.type	vad_preprocess_destroy, %function
+vad_preprocess_destroy:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x2, x0, 32
+	mov	x1, 0
+	strh	wzr, [x0, 10]
+	strh	wzr, [x0, 16]
+	strh	wzr, [x0, 12]
+	strh	wzr, [x0, 14]
+	strh	wzr, [x0, 18]
+	strh	wzr, [x0, 432]
+.L21:
+	strh	wzr, [x1, x2]
+	add	x1, x1, 2
+	cmp	x1, 200
+	bne	.L21
+	mov	w1, 32
+	strh	wzr, [x0, 6]
+	strh	w1, [x0, 8]
+	stp	wzr, wzr, [x0, 20]
+	ret
+	.size	vad_preprocess_destroy, .-vad_preprocess_destroy
+	.align	2
+	.global	vad_preprocess_update_params
+	.type	vad_preprocess_update_params, %function
+vad_preprocess_update_params:
+	adrp	x1, .LANCHOR0+6
+	ldrsh	w1, [x1, #:lo12:.LANCHOR0+6]
+	str	w1, [x0]
+	ret
+	.size	vad_preprocess_update_params, .-vad_preprocess_update_params
+	.bss
+	.align	3
+	.set	.LANCHOR0,. + 0
+	.type	g_sound_thd, %object
+	.size	g_sound_thd, 2
+g_sound_thd:
+	.zero	2
+	.type	g_noise_level, %object
+	.size	g_noise_level, 2
+g_noise_level:
+	.zero	2
+	.type	g_vad_con_thd, %object
+	.size	g_vad_con_thd, 2
+g_vad_con_thd:
+	.zero	2
+	.type	g_noise_abs, %object
+	.size	g_noise_abs, 2
+g_noise_abs:
+	.zero	2
+	.type	g_signal_gain, %object
+	.size	g_signal_gain, 2
+g_signal_gain:
+	.zero	2
+	.type	g_xn_1, %object
+	.size	g_xn_1, 2
+g_xn_1:
+	.zero	2
+	.type	g_yn_1, %object
+	.size	g_yn_1, 2
+g_yn_1:
+	.zero	2
+	.type	g_yn_2, %object
+	.size	g_yn_2, 2
+g_yn_2:
+	.zero	2
+	.type	g_xn_2, %object
+	.size	g_xn_2, 2
+g_xn_2:
+	.zero	2
+	.type	g_sample_cnt, %object
+	.size	g_sample_cnt, 2
+g_sample_cnt:
+	.zero	2
+	.type	g_sum_abs_frm, %object
+	.size	g_sum_abs_frm, 4
+g_sum_abs_frm:
+	.zero	4
+	.type	frm_count, %object
+	.size	frm_count, 4
+frm_count:
+	.zero	4
+	.zero	4
+	.type	g_ave_abs_rec, %object
+	.size	g_ave_abs_rec, 400
+g_ave_abs_rec:
+	.zero	400
+	.type	g_vad_cnt, %object
+	.size	g_vad_cnt, 2
+g_vad_cnt:
+	.zero	2
+	.ident	"GCC: (Linaro GCC 6.3-2017.05) 6.3.1 20170404"
+	.section	.note.GNU-stack,"",@progbits
diff --git a/sound/soc/rockchip/vad_preprocess_thumb.S b/sound/soc/rockchip/vad_preprocess_thumb.S
new file mode 100644
index 000000000000..a105634e60d0
--- /dev/null
+++ b/sound/soc/rockchip/vad_preprocess_thumb.S
@@ -0,0 +1,360 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Rockchip VAD Preprocess
+ *
+ * Copyright (C) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ */
+
+	.syntax unified
+	.arch armv7-a
+	.fpu softvfp
+	.eabi_attribute 20, 1
+	.eabi_attribute 21, 1
+	.eabi_attribute 23, 3
+	.eabi_attribute 24, 1
+	.eabi_attribute 25, 1
+	.eabi_attribute 26, 2
+	.eabi_attribute 30, 4
+	.eabi_attribute 34, 1
+	.eabi_attribute 18, 4
+	.thumb
+	.file	"vad_preprocess_thumb.S"
+	.text
+	.align	1
+	.global	vad_preprocess_init
+	.thumb
+	.thumb_func
+	.type	vad_preprocess_init, %function
+vad_preprocess_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L4
+	ldr	r3, [r0, #8]
+	strh	r3, [r2]	@ movhi
+	ldr	r3, [r0, #4]
+	strh	r3, [r2, #2]	@ movhi
+	ldr	r3, [r0, #12]
+	strh	r3, [r2, #4]	@ movhi
+	ldr	r3, [r0]
+	strh	r3, [r2, #6]	@ movhi
+	ldr	r3, [r0, #16]
+	tst	r3, #512
+	ubfx	r3, r3, #0, #9
+	itte	ne
+	eorne	r3, r3, #65280
+	eorne	r3, r3, #255
+	uxtheq	r3, r3
+	strh	r3, [r2, #8]	@ movhi
+	bx	lr
+.L5:
+	.align	2
+.L4:
+	.word	.LANCHOR0
+	.fnend
+	.size	vad_preprocess_init, .-vad_preprocess_init
+	.align	1
+	.global	vad_preprocess
+	.thumb
+	.thumb_func
+	.type	vad_preprocess, %function
+vad_preprocess:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L29
+	movw	r2, #34839
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	movw	r1, #15349
+	ldrsh	r5, [r3, #8]
+	muls	r0, r5, r0
+	ldrh	r7, [r3, #10]
+	it	mi
+	addmi	r0, r0, #31
+	ldrh	r4, [r3, #12]
+	asrs	r0, r0, #5
+	ldrh	r6, [r3, #14]
+	smulbb	r2, r7, r2
+	mla	r2, r1, r0, r2
+	smlabb	r2, r4, r1, r2
+	movw	r1, #34904
+	smulbb	r1, r6, r1
+	ldrsh	r4, [r3, #16]
+	subs	r1, r2, r1
+	movw	r2, #14379
+	mls	r4, r4, r2, r1
+	cmp	r4, #1
+	asr	r5, r4, #31
+	sbcs	r2, r5, #0
+	blt	.L8
+	adds	r4, r4, #8192
+	adc	r5, r5, #0
+	b	.L10
+.L8:
+	subs	r4, r4, #8192
+	adc	r5, r5, #-1
+	cmp	r4, #0
+	sbcs	r2, r5, #0
+	bge	.L10
+	movw	r8, #16383
+	mov	r9, #0
+	adds	r4, r4, r8
+	adc	r5, r5, r9
+.L10:
+	lsrs	r1, r4, #14
+	ldrh	r4, [r3, #18]
+	orr	r1, r1, r5, lsl #18
+	ldr	r2, .L29+4
+	adds	r4, r4, #1
+	strh	r0, [r3, #10]	@ movhi
+	uxth	r1, r1
+	strh	r1, [r3, #14]	@ movhi
+	uxth	r4, r4
+	strh	r4, [r3, #18]	@ movhi
+	sxth	r1, r1
+	ldr	r0, [r3, #20]
+	sxth	r4, r4
+	cmp	r1, #0
+	and	r2, r2, r4
+	it	lt
+	rsblt	r1, r1, #0
+	cmp	r2, #0
+	add	r0, r0, r1
+	it	lt
+	addlt	r2, r2, #-1
+	strh	r7, [r3, #12]	@ movhi
+	it	lt
+	ornlt	r2, r2, #255
+	strh	r6, [r3, #16]	@ movhi
+	it	lt
+	addlt	r2, r2, #1
+	str	r0, [r3, #20]
+	cmp	r2, #0
+	bne	.L11
+	ldr	r4, [r3, #24]
+	ldr	r2, .L29
+	cmp	r4, #99
+	bgt	.L13
+	adds	r5, r0, #128
+	add	r2, r2, r4, lsl #1
+	it	mi
+	addwmi	r5, r0, #383
+	asrs	r5, r5, #8
+	strh	r5, [r2, #28]	@ movhi
+	b	.L15
+.L13:
+	add	r5, r2, #28
+	adds	r2, r2, #226
+.L16:
+	ldrh	r6, [r5, #2]
+	strh	r6, [r5], #2	@ movhi
+	cmp	r5, r2
+	bne	.L16
+	adds	r2, r0, #128
+	it	mi
+	addwmi	r2, r0, #383
+	ldr	r0, .L29
+	asrs	r2, r2, #8
+	strh	r2, [r0, #226]	@ movhi
+.L15:
+	cmp	r4, #99
+	ldrh	r2, [r3, #28]
+	mov	r0, #1
+	bgt	.L18
+	ldr	r5, .L29+8
+.L19:
+	cmp	r0, r4
+	bge	.L21
+	ldrsh	r6, [r5, r0, lsl #1]
+	sxth	r2, r2
+	adds	r0, r0, #1
+	cmp	r2, r6
+	it	ge
+	movge	r2, r6
+	uxth	r2, r2
+	b	.L19
+.L18:
+	ldr	r6, .L29+8
+.L22:
+	ldrsh	r5, [r6, r0, lsl #1]
+	sxth	r2, r2
+	adds	r0, r0, #1
+	cmp	r2, r5
+	it	ge
+	movge	r2, r5
+	cmp	r0, #100
+	uxth	r2, r2
+	bne	.L22
+.L21:
+	ldrh	r5, [r3, #6]
+	movs	r0, #128
+	movs	r6, #230
+	adds	r4, r4, #1
+	str	r4, [r3, #24]
+	smlabb	r0, r5, r6, r0
+	movs	r5, #26
+	smlabb	r2, r2, r5, r0
+	ldr	r0, .L29
+	cmp	r2, #0
+	it	lt
+	addlt	r2, r2, #255
+	asrs	r2, r2, #8
+	strh	r2, [r0, #6]	@ movhi
+	movs	r2, #0
+	str	r2, [r3, #20]
+	strh	r2, [r3, #18]	@ movhi
+.L11:
+	ldrh	r0, [r3, #6]
+	ldrh	r4, [r3, #2]
+	ldrsh	r3, [r3]
+	ldr	r2, .L29
+	smlabb	r3, r0, r4, r3
+	cmp	r1, r3
+	ble	.L24
+	ldrh	r3, [r2, #428]
+	ldrsh	r0, [r2, #4]
+	adds	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r2, #428]	@ movhi
+	sxth	r3, r3
+	cmp	r0, r3
+	ite	ge
+	movge	r0, #0
+	movlt	r0, #1
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L24:
+	movs	r0, #0
+	strh	r0, [r2, #428]	@ movhi
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L30:
+	.align	2
+.L29:
+	.word	.LANCHOR0
+	.word	-2147483393
+	.word	.LANCHOR0+28
+	.fnend
+	.size	vad_preprocess, .-vad_preprocess
+	.align	1
+	.global	vad_preprocess_destroy
+	.thumb
+	.thumb_func
+	.type	vad_preprocess_destroy, %function
+vad_preprocess_destroy:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movs	r3, #0
+	ldr	r2, .L34
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r3
+	strh	r3, [r2, #10]	@ movhi
+	strh	r3, [r2, #12]	@ movhi
+	strh	r3, [r2, #14]	@ movhi
+	strh	r3, [r2, #16]	@ movhi
+	strh	r3, [r2, #18]	@ movhi
+	strh	r3, [r2, #428]	@ movhi
+.L32:
+	ldr	r2, .L34
+	movs	r1, #0
+	add	r0, r2, #28
+	strh	r4, [r0, r3, lsl #1]	@ movhi
+	adds	r3, r3, #1
+	cmp	r3, #100
+	bne	.L32
+	movs	r3, #32
+	str	r1, [r2, #20]
+	strh	r1, [r2, #6]	@ movhi
+	strh	r3, [r2, #8]	@ movhi
+	str	r1, [r2, #24]
+	pop	{r4, pc}
+.L35:
+	.align	2
+.L34:
+	.word	.LANCHOR0
+	.fnend
+	.size	vad_preprocess_destroy, .-vad_preprocess_destroy
+	.align	1
+	.global	vad_preprocess_update_params
+	.thumb
+	.thumb_func
+	.type	vad_preprocess_update_params, %function
+vad_preprocess_update_params:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L37
+	ldrsh	r3, [r3, #6]
+	str	r3, [r0]
+	bx	lr
+.L38:
+	.align	2
+.L37:
+	.word	.LANCHOR0
+	.fnend
+	.size	vad_preprocess_update_params, .-vad_preprocess_update_params
+	.bss
+	.align	2
+.LANCHOR0 = . + 0
+	.type	g_sound_thd, %object
+	.size	g_sound_thd, 2
+g_sound_thd:
+	.space	2
+	.type	g_noise_level, %object
+	.size	g_noise_level, 2
+g_noise_level:
+	.space	2
+	.type	g_vad_con_thd, %object
+	.size	g_vad_con_thd, 2
+g_vad_con_thd:
+	.space	2
+	.type	g_noise_abs, %object
+	.size	g_noise_abs, 2
+g_noise_abs:
+	.space	2
+	.type	g_signal_gain, %object
+	.size	g_signal_gain, 2
+g_signal_gain:
+	.space	2
+	.type	g_xn_1, %object
+	.size	g_xn_1, 2
+g_xn_1:
+	.space	2
+	.type	g_xn_2, %object
+	.size	g_xn_2, 2
+g_xn_2:
+	.space	2
+	.type	g_yn_1, %object
+	.size	g_yn_1, 2
+g_yn_1:
+	.space	2
+	.type	g_yn_2, %object
+	.size	g_yn_2, 2
+g_yn_2:
+	.space	2
+	.type	g_sample_cnt, %object
+	.size	g_sample_cnt, 2
+g_sample_cnt:
+	.space	2
+	.type	g_sum_abs_frm, %object
+	.size	g_sum_abs_frm, 4
+g_sum_abs_frm:
+	.space	4
+	.type	frm_count, %object
+	.size	frm_count, 4
+frm_count:
+	.space	4
+	.type	g_ave_abs_rec, %object
+	.size	g_ave_abs_rec, 400
+g_ave_abs_rec:
+	.space	400
+	.type	g_vad_cnt, %object
+	.size	g_vad_cnt, 2
+g_vad_cnt:
+	.space	2
+	.ident	"GCC: (GNU) 4.9 20150123 (prerelease)"
+	.section	.note.GNU-stack,"",%progbits
diff --git a/sound/soc/soc-generic-dmaengine-pcm.c b/sound/soc/soc-generic-dmaengine-pcm.c
index 6cef3977507a..6e8974f8cee3 100644
--- a/sound/soc/soc-generic-dmaengine-pcm.c
+++ b/sound/soc/soc-generic-dmaengine-pcm.c
@@ -278,6 +278,26 @@ static int dmaengine_pcm_new(struct snd_soc_pcm_runtime *rtd)
 		max_buffer_size = SIZE_MAX;
 	}
 
+#ifdef CONFIG_SND_SOC_ROCKCHIP_FORCE_SRAM
+	for (i = SNDRV_PCM_STREAM_PLAYBACK; i <= SNDRV_PCM_STREAM_CAPTURE; i++) {
+		substream = rtd->pcm->streams[i].substream;
+		if (substream)
+			break;
+	}
+
+	if (!substream)
+		return 0;
+
+	dev = dmaengine_dma_dev(pcm, substream);
+	if (dev && dev->of_node) {
+		ret = of_property_read_bool(dev->of_node,
+					    "rockchip,force-iram");
+		if (ret)
+			prealloc_buffer_size = 32 * 1024;
+	}
+
+	dev = rtd->platform->dev;
+#endif
 
 	for (i = SNDRV_PCM_STREAM_PLAYBACK; i <= SNDRV_PCM_STREAM_CAPTURE; i++) {
 		substream = rtd->pcm->streams[i].substream;
-- 
2.11.0

