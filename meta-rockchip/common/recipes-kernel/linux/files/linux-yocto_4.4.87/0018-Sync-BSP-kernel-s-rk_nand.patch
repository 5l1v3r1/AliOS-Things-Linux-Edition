From fff7b22b8926eb50de8299e09f4b57130185895a Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Wed, 30 May 2018 18:56:55 +0800
Subject: [PATCH 18/27] Sync BSP kernel's rk_nand

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 drivers/Kconfig                       |     2 +
 drivers/Makefile                      |     1 +
 drivers/rk_nand/Kconfig               |    10 +
 drivers/rk_nand/Makefile              |     8 +
 drivers/rk_nand/rk_ftl_api.h          |    41 +
 drivers/rk_nand/rk_ftl_arm_v7.S       | 27945 +++++++++++++++++++++++++++++++
 drivers/rk_nand/rk_ftl_arm_v7_thumb.S | 27165 ++++++++++++++++++++++++++++++
 drivers/rk_nand/rk_ftl_arm_v8.S       | 25896 +++++++++++++++++++++++++++++
 drivers/rk_nand/rk_ftlv5_arm64.S      | 23379 ++++++++++++++++++++++++++
 drivers/rk_nand/rk_nand_base.c        |   492 +
 drivers/rk_nand/rk_nand_base.h        |    46 +
 drivers/rk_nand/rk_nand_blk.c         |   820 +
 drivers/rk_nand/rk_nand_blk.h         |    61 +
 drivers/rk_nand/rk_zftl_arm64.S       | 28390 ++++++++++++++++++++++++++++++++
 14 files changed, 134256 insertions(+)
 create mode 100644 drivers/rk_nand/Kconfig
 create mode 100644 drivers/rk_nand/Makefile
 create mode 100644 drivers/rk_nand/rk_ftl_api.h
 create mode 100644 drivers/rk_nand/rk_ftl_arm_v7.S
 create mode 100644 drivers/rk_nand/rk_ftl_arm_v7_thumb.S
 create mode 100644 drivers/rk_nand/rk_ftl_arm_v8.S
 create mode 100644 drivers/rk_nand/rk_ftlv5_arm64.S
 create mode 100644 drivers/rk_nand/rk_nand_base.c
 create mode 100644 drivers/rk_nand/rk_nand_base.h
 create mode 100644 drivers/rk_nand/rk_nand_blk.c
 create mode 100644 drivers/rk_nand/rk_nand_blk.h
 create mode 100644 drivers/rk_nand/rk_zftl_arm64.S

diff --git a/drivers/Kconfig b/drivers/Kconfig
index d2ac339de85f..8b55b2cad16a 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -198,4 +198,6 @@ source "drivers/hwtracing/intel_th/Kconfig"
 
 source "drivers/fpga/Kconfig"
 
+source "drivers/rk_nand/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 098997f2cc3a..1d7c45b4af97 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -173,3 +173,4 @@ obj-$(CONFIG_STM)		+= hwtracing/stm/
 obj-$(CONFIG_ANDROID)		+= android/
 obj-$(CONFIG_NVMEM)		+= nvmem/
 obj-$(CONFIG_FPGA)		+= fpga/
+obj-$(CONFIG_RK_NAND)		+= rk_nand/
diff --git a/drivers/rk_nand/Kconfig b/drivers/rk_nand/Kconfig
new file mode 100644
index 000000000000..c49a1c28b702
--- /dev/null
+++ b/drivers/rk_nand/Kconfig
@@ -0,0 +1,10 @@
+# SPDX-License-Identifier: GPL-2.0
+if ARCH_ROCKCHIP
+config RK_NAND
+	tristate "RK NAND Device Support"
+	default n
+	depends on BLOCK_RKNAND != y
+	help
+	  RK NAND Device Support.
+
+endif
diff --git a/drivers/rk_nand/Makefile b/drivers/rk_nand/Makefile
new file mode 100644
index 000000000000..40aedbeb60e4
--- /dev/null
+++ b/drivers/rk_nand/Makefile
@@ -0,0 +1,8 @@
+# SPDX-License-Identifier: GPL-2.0
+obj-$(CONFIG_RK_NAND) += rk_ftl.o rk_nand_base.o rk_nand_blk.o
+ifdef CONFIG_THUMB2_KERNEL
+rk_ftl-$(CONFIG_THUMB2_KERNEL) += rk_ftl_arm_v7_thumb.o
+else
+rk_ftl-$(CONFIG_ARM64) += rk_zftl_arm64.o rk_ftlv5_arm64.o
+rk_ftl-$(CONFIG_ARM) += rk_ftl_arm_v7.o
+endif
diff --git a/drivers/rk_nand/rk_ftl_api.h b/drivers/rk_nand/rk_ftl_api.h
new file mode 100644
index 000000000000..ebde01e3dbb6
--- /dev/null
+++ b/drivers/rk_nand/rk_ftl_api.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __RK_FTL_API_H
+#define __RK_FTL_API_H
+
+void rk_nandc_flash_xfer_completed(void *nandc_reg);
+void rk_nandc_flash_ready(void *nandc_reg);
+u32 rk_nandc_get_irq_status(void *nandc_reg);
+int rknand_proc_ftlread(char *page);
+int FtlRead(u8 lun, u32 index, u32 sectors, u8 *buf);
+int FtlWrite(u8 lun, u32 index, u32 sectors, u8 *buf);
+int rk_ftl_garbage_collect(u32 mode, u32 pages);
+void rk_ftl_cache_write_back(void);
+int FtlDiscard(u32 index, u32 sectors);
+int rk_nand_schedule_enable_config(int en);
+int rk_ftl_get_capacity(void);
+void rk_ftl_storage_sys_init(void);
+int rk_ftl_init(void);
+void rk_nand_de_init(void);
+void rk_ftl_de_init(void);
+void rk_nand_suspend(void);
+void rk_nand_resume(void);
+int rknand_get_reg_addr(unsigned long *p_nandc0, unsigned long *p_nandc1);
+long rknand_sys_storage_ioctl(struct file *file, unsigned int cmd,
+			      unsigned long arg);
+long rk_ftl_vendor_storage_ioctl(struct file *file, unsigned int cmd,
+				 unsigned long arg);
+int rk_ftl_vendor_write(u32 id, void *pbuf, u32 size);
+int rk_ftl_vendor_read(u32 id, void *pbuf, u32 size);
+int rk_ftl_vendor_storage_init(void);
+int rknand_vendor_storage_init(void);
+
+#endif
+
diff --git a/drivers/rk_nand/rk_ftl_arm_v7.S b/drivers/rk_nand/rk_ftl_arm_v7.S
new file mode 100644
index 000000000000..7768253519a2
--- /dev/null
+++ b/drivers/rk_nand/rk_ftl_arm_v7.S
@@ -0,0 +1,27945 @@
+/*
+ * Copyright (c) 2016-2018, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * date: 2018-05-04
+ */
+	.arch armv7-a
+	.fpu softvfp
+	.eabi_attribute 20, 1
+	.eabi_attribute 21, 1
+	.eabi_attribute 23, 3
+	.eabi_attribute 24, 1
+	.eabi_attribute 25, 1
+	.eabi_attribute 26, 2
+	.eabi_attribute 30, 4
+	.eabi_attribute 18, 4
+	.file	"rk_ftl_arm_v7.S"
+	.text
+	.align	2
+	.type	FlashGetReadRetryDefault.part.25, %function
+FlashGetReadRetryDefault.part.25:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r0, #33
+	cmpne	r0, #65
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	beq	.L2
+	cmp	r0, #66
+	bne	.L3
+.L2:
+	ldr	r3, .L8
+	mov	r2, #4
+	strb	r0, [r3, #0]
+	b	.L7
+.L3:
+	cmp	r0, #34
+	cmpne	r0, #67
+	bne	.L5
+	ldr	r3, .L8
+	mov	r2, #5
+	strb	r0, [r3, #0]
+.L7:
+	strb	r2, [r3, #1]
+	add	r0, r3, #4
+	mov	r2, #7
+	ldr	r1, .L8+4
+	strb	r2, [r3, #2]
+	mov	r2, #45
+	b	.L6
+.L5:
+	cmp	r0, #35
+	cmpne	r0, #68
+	ldmnefd	sp!, {r3, pc}
+	ldr	r3, .L8
+	mov	r2, #5
+	ldr	r1, .L8+8
+	strb	r0, [r3, #0]
+	add	r0, r3, #4
+	strb	r2, [r3, #1]
+	mov	r2, #17
+	strb	r2, [r3, #2]
+	mov	r2, #95
+.L6:
+	bl	memcpy
+	ldmfd	sp!, {r3, pc}
+.L9:
+	.align	2
+.L8:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR1+45
+	.fnend
+	.size	FlashGetReadRetryDefault.part.25, .-FlashGetReadRetryDefault.part.25
+	.align	2
+	.global	FlashMemCmp8
+	.type	FlashMemCmp8, %function
+FlashMemCmp8:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L20
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L18
+	ldrb	r3, [r1, #1]	@ zero_extendqisi2
+	ldrb	ip, [r0, #1]	@ zero_extendqisi2
+	cmp	ip, r3
+	movne	r3, #0
+	bne	.L18
+	b	.L19
+.L15:
+	ldrb	r4, [r0, r3]	@ zero_extendqisi2
+	ldrb	ip, [r1, r3]	@ zero_extendqisi2
+	add	r3, r3, #1
+	cmp	r4, ip
+	beq	.L18
+	mov	r0, r3
+	ldmfd	sp!, {r4, pc}
+.L18:
+	cmp	r3, r2
+	bne	.L15
+	mov	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L19:
+	mov	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L21:
+	.align	2
+.L20:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashMemCmp8, .-FlashMemCmp8
+	.align	2
+	.global	FlashRsvdBlkChk
+	.type	FlashRsvdBlkChk, %function
+FlashRsvdBlkChk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L23
+	ldrb	r2, [r3, #853]	@ zero_extendqisi2
+	ldr	r3, [r3, #856]
+	mul	r3, r3, r2
+	cmp	r1, r3
+	movcs	r2, #0
+	movcc	r2, #1
+	cmp	r0, #0
+	movne	r2, #0
+	eor	r0, r2, #1
+	bx	lr
+.L24:
+	.align	2
+.L23:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashRsvdBlkChk, .-FlashRsvdBlkChk
+	.align	2
+	.global	FlashGetRandomizer
+	.type	FlashGetRandomizer, %function
+FlashGetRandomizer:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	and	r2, r1, #127
+	ldr	r3, .L27
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	add	r3, r3, r2, asl #1
+	ldrh	r4, [r3, #140]
+	ldr	r3, .L27+4
+	ldrb	r3, [r3, #860]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L26
+	bl	FlashRsvdBlkChk
+	cmp	r0, #0
+	orrne	r4, r4, #-1073741824
+.L26:
+	mov	r0, r4
+	ldmfd	sp!, {r4, pc}
+.L28:
+	.align	2
+.L27:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetRandomizer, .-FlashGetRandomizer
+	.align	2
+	.global	FlashSetRandomizer
+	.type	FlashSetRandomizer, %function
+FlashSetRandomizer:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	and	r2, r1, #127
+	ldr	r3, .L31
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	add	r3, r3, r2, asl #1
+	mov	r6, r0
+	ldrh	r4, [r3, #140]
+	ldr	r3, .L31+4
+	ldrb	r2, [r3, #860]	@ zero_extendqisi2
+	mov	r5, r3
+	cmp	r2, #0
+	beq	.L30
+	bl	FlashRsvdBlkChk
+	cmp	r0, #0
+	orrne	r4, r4, #-1073741824
+.L30:
+	add	r5, r5, r6, asl #3
+	ldr	r3, [r5, #864]
+	str	r4, [r3, #336]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L32:
+	.align	2
+.L31:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashSetRandomizer, .-FlashSetRandomizer
+	.align	2
+	.global	FlashReadCmd
+	.type	FlashReadCmd, %function
+FlashReadCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L34
+	mov	r2, r1, lsr #16
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	add	ip, ip, r0, asl #3
+	ldrb	r3, [ip, #868]	@ zero_extendqisi2
+	ldr	r4, [ip, #864]
+	mov	ip, #0
+	add	r3, r3, #8
+	add	r3, r4, r3, asl #8
+	str	ip, [r3, #8]
+	str	ip, [r3, #4]
+	str	ip, [r3, #4]
+	uxtb	ip, r1
+	str	ip, [r3, #4]
+	mov	ip, r1, lsr #8
+	str	ip, [r3, #4]
+	str	r2, [r3, #4]
+	mov	r2, #48
+	str	r2, [r3, #8]
+	ldmfd	sp!, {r4, lr}
+	b	FlashSetRandomizer
+.L35:
+	.align	2
+.L34:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadCmd, .-FlashReadCmd
+	.align	2
+	.global	FlashReadDpDataOutCmd
+	.type	FlashReadDpDataOutCmd, %function
+FlashReadDpDataOutCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L40
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	add	ip, r2, r0, asl #3
+	ldrb	r2, [r2, #912]	@ zero_extendqisi2
+	ldrb	r3, [ip, #868]	@ zero_extendqisi2
+	ldr	r4, [ip, #864]
+	cmp	r2, #1
+	add	r3, r3, #8
+	mov	r2, #0
+	add	r3, r4, r3, asl #8
+	bne	.L37
+	mov	ip, #6
+	str	ip, [r3, #8]
+	str	r2, [r3, #4]
+	str	r2, [r3, #4]
+	uxtb	r2, r1
+	str	r2, [r3, #4]
+	mov	r2, r1, lsr #8
+	str	r2, [r3, #4]
+	mov	r2, r1, lsr #16
+	b	.L39
+.L37:
+	str	r2, [r3, #8]
+	uxtb	ip, r1
+	str	r2, [r3, #4]
+	str	r2, [r3, #4]
+	str	ip, [r3, #4]
+	mov	ip, r1, lsr #8
+	str	ip, [r3, #4]
+	mov	ip, r1, lsr #16
+	str	ip, [r3, #4]
+	mov	ip, #5
+	str	ip, [r3, #8]
+	str	r2, [r3, #4]
+.L39:
+	str	r2, [r3, #4]
+	mov	r2, #224
+	str	r2, [r3, #8]
+	ldmfd	sp!, {r4, lr}
+	b	FlashSetRandomizer
+.L41:
+	.align	2
+.L40:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadDpDataOutCmd, .-FlashReadDpDataOutCmd
+	.align	2
+	.global	flash_enter_slc_mode
+	.type	flash_enter_slc_mode, %function
+flash_enter_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L44
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	bxeq	lr
+	add	r0, r3, r0, asl #3
+	ldrb	r3, [r0, #868]	@ zero_extendqisi2
+	ldr	r2, [r0, #864]
+	add	r3, r3, #8
+	add	r3, r2, r3, asl #8
+	mov	r2, #218
+	str	r2, [r3, #8]
+	bx	lr
+.L45:
+	.align	2
+.L44:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
+	.align	2
+	.global	flash_exit_slc_mode
+	.type	flash_exit_slc_mode, %function
+flash_exit_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L48
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	bxeq	lr
+	add	r0, r3, r0, asl #3
+	ldrb	r3, [r0, #868]	@ zero_extendqisi2
+	ldr	r2, [r0, #864]
+	add	r3, r3, #8
+	add	r3, r2, r3, asl #8
+	mov	r2, #223
+	str	r2, [r3, #8]
+	bx	lr
+.L49:
+	.align	2
+.L48:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
+	.align	2
+	.global	FlashProgFirstCmd
+	.type	FlashProgFirstCmd, %function
+FlashProgFirstCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L51
+	mov	r2, r1, lsr #16
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	add	ip, ip, r0, asl #3
+	ldrb	r3, [ip, #868]	@ zero_extendqisi2
+	ldr	r4, [ip, #864]
+	mov	ip, #128
+	add	r3, r3, #8
+	add	r3, r4, r3, asl #8
+	str	ip, [r3, #8]
+	mov	ip, #0
+	str	ip, [r3, #4]
+	str	ip, [r3, #4]
+	uxtb	ip, r1
+	str	ip, [r3, #4]
+	mov	ip, r1, lsr #8
+	str	ip, [r3, #4]
+	str	r2, [r3, #4]
+	ldmfd	sp!, {r4, lr}
+	b	FlashSetRandomizer
+.L52:
+	.align	2
+.L51:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgFirstCmd, .-FlashProgFirstCmd
+	.align	2
+	.global	FlashEraseCmd
+	.type	FlashEraseCmd, %function
+FlashEraseCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L55
+	cmp	r2, #0
+	add	r0, r3, r0, asl #3
+	ldr	ip, [r0, #864]
+	ldrb	r0, [r0, #868]	@ zero_extendqisi2
+	add	r0, r0, #8
+	add	r0, ip, r0, asl #8
+	beq	.L54
+	ldr	r3, [r3, #856]
+	mov	r2, #96
+	str	r2, [r0, #8]
+	uxtb	r2, r1
+	str	r2, [r0, #4]
+	mov	r2, r1, lsr #8
+	str	r2, [r0, #4]
+	mov	r2, r1, lsr #16
+	add	r1, r1, r3
+	str	r2, [r0, #4]
+.L54:
+	mov	r3, #96
+	str	r3, [r0, #8]
+	uxtb	r3, r1
+	str	r3, [r0, #4]
+	mov	r3, r1, lsr #8
+	mov	r1, r1, lsr #16
+	str	r3, [r0, #4]
+	mov	r3, #208
+	str	r1, [r0, #4]
+	str	r3, [r0, #8]
+	bx	lr
+.L56:
+	.align	2
+.L55:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashEraseCmd, .-FlashEraseCmd
+	.align	2
+	.global	FlashProgDpSecondCmd
+	.type	FlashProgDpSecondCmd, %function
+FlashProgDpSecondCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L58
+	mov	r2, r1, lsr #16
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	add	r4, ip, r0, asl #3
+	ldrb	ip, [ip, #907]	@ zero_extendqisi2
+	ldrb	r3, [r4, #868]	@ zero_extendqisi2
+	ldr	r5, [r4, #864]
+	add	r3, r3, #8
+	add	r3, r5, r3, asl #8
+	str	ip, [r3, #8]
+	mov	ip, #0
+	str	ip, [r3, #4]
+	str	ip, [r3, #4]
+	uxtb	ip, r1
+	str	ip, [r3, #4]
+	mov	ip, r1, lsr #8
+	str	ip, [r3, #4]
+	str	r2, [r3, #4]
+	ldmfd	sp!, {r4, r5, lr}
+	b	FlashSetRandomizer
+.L59:
+	.align	2
+.L58:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgDpSecondCmd, .-FlashProgDpSecondCmd
+	.align	2
+	.global	FlashProgSecondCmd
+	.type	FlashProgSecondCmd, %function
+FlashProgSecondCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L61
+	add	r3, r3, r0, asl #3
+	ldr	r2, [r3, #864]
+	ldrb	r3, [r3, #868]	@ zero_extendqisi2
+	add	r3, r3, #8
+	add	r3, r2, r3, asl #8
+	mov	r2, #16
+	str	r2, [r3, #8]
+	bx	lr
+.L62:
+	.align	2
+.L61:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
+	.align	2
+	.global	FlashProgDpFirstCmd
+	.type	FlashProgDpFirstCmd, %function
+FlashProgDpFirstCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L64
+	add	r0, r3, r0, asl #3
+	ldrb	r3, [r3, #906]	@ zero_extendqisi2
+	ldrb	r2, [r0, #868]	@ zero_extendqisi2
+	ldr	r1, [r0, #864]
+	add	r2, r2, #8
+	add	r2, r1, r2, asl #8
+	str	r3, [r2, #8]
+	bx	lr
+.L65:
+	.align	2
+.L64:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgDpFirstCmd, .-FlashProgDpFirstCmd
+	.align	2
+	.global	JSHash
+	.type	JSHash, %function
+JSHash:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, r0
+	mov	r2, #0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r0, .L69
+	b	.L67
+.L68:
+	mov	ip, r0, asl #5
+	ldrb	r4, [r3, r2]	@ zero_extendqisi2
+	add	ip, ip, r0, lsr #2
+	add	r2, r2, #1
+	add	ip, ip, r4
+	eor	r0, r0, ip
+.L67:
+	cmp	r2, r1
+	bne	.L68
+	ldmfd	sp!, {r4, pc}
+.L70:
+	.align	2
+.L69:
+	.word	1204201446
+	.fnend
+	.size	JSHash, .-JSHash
+	.align	2
+	.global	FlashLoadIdbInfo
+	.type	FlashLoadIdbInfo, %function
+FlashLoadIdbInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r0, #0
+	bx	lr
+	.fnend
+	.size	FlashLoadIdbInfo, .-FlashLoadIdbInfo
+	.align	2
+	.global	FlashPrintInfo
+	.type	FlashPrintInfo, %function
+FlashPrintInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FlashPrintInfo, .-FlashPrintInfo
+	.align	2
+	.global	FlashReadIdbData
+	.type	FlashReadIdbData, %function
+FlashReadIdbData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	mov	r2, #2048
+	ldr	r1, .L74
+	bl	memcpy
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L75:
+	.align	2
+.L74:
+	.word	.LANCHOR0+932
+	.fnend
+	.size	FlashReadIdbData, .-FlashReadIdbData
+	.align	2
+	.global	FlashLoadPhyInfoInRam
+	.type	FlashLoadPhyInfoInRam, %function
+FlashLoadPhyInfoInRam:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, #0
+	ldr	r6, .L88
+.L80:
+	add	r5, r6, r4, asl #5
+	ldr	r1, .L88+4
+	add	r0, r5, #1
+	ldrb	r2, [r6, r4, asl #5]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	subs	r1, r0, #0
+	bne	.L77
+	cmp	r5, #0
+	ldrneb	r2, [r5, #22]	@ zero_extendqisi2
+	ldrne	r3, .L88+8
+	bne	.L82
+	b	.L87
+.L77:
+	add	r4, r4, #1
+	cmp	r4, #74
+	bne	.L80
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L82:
+	ldrb	r0, [r3, r1, asl #5]	@ zero_extendqisi2
+	cmp	r0, r2
+	beq	.L81
+	add	r1, r1, #1
+	cmp	r1, #4
+	bne	.L82
+.L81:
+	ldr	r3, .L88+8
+	mov	r2, #32
+	ldr	r0, .L88+12
+	add	r1, r3, r1, asl #5
+	bl	memcpy
+	ldr	r0, .L88+16
+	mov	r1, r5
+	mov	r2, #32
+	bl	memcpy
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L87:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L89:
+	.align	2
+.L88:
+	.word	.LANCHOR1+396
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR1+2764
+	.word	.LANCHOR0+896
+	.word	.LANCHOR1+2892
+	.fnend
+	.size	FlashLoadPhyInfoInRam, .-FlashLoadPhyInfoInRam
+	.align	2
+	.global	ftl_flash_suspend
+	.type	ftl_flash_suspend, %function
+ftl_flash_suspend:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L91
+	ldr	r2, [r3, #3012]
+	ldr	r1, [r2, #0]
+	str	r1, [r3, #3016]
+	ldr	r1, [r2, #4]
+	str	r1, [r3, #3020]
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #3024]
+	ldr	r1, [r2, #12]
+	str	r1, [r3, #3028]
+	ldr	r1, [r2, #304]
+	str	r1, [r3, #3032]
+	ldr	r1, [r2, #308]
+	str	r1, [r3, #3036]
+	ldr	r1, [r2, #336]
+	ldr	r2, [r2, #344]
+	str	r1, [r3, #3040]
+	str	r2, [r3, #3044]
+	bx	lr
+.L92:
+	.align	2
+.L91:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_flash_suspend, .-ftl_flash_suspend
+	.global	__aeabi_uidiv
+	.align	2
+	.global	LogAddr2PhyAddr
+	.type	LogAddr2PhyAddr, %function
+LogAddr2PhyAddr:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	fp, r3
+	ldr	r3, .L98
+	mov	r5, r1
+	mov	r6, r2
+	movw	r1, #3062
+	movw	r2, #3060
+	ldr	r8, [r0, #4]
+	ldrh	r2, [r3, r2]
+	mov	r4, r0
+	ldrh	sl, [r3, r1]
+	bic	r8, r8, #-2147483648
+	ldr	r7, [r3, #856]
+	ubfx	r9, r8, #10, #16
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
+	mov	r8, r8, asl #22
+	mul	sl, sl, r2
+	uxth	r7, r7
+	cmp	r3, #1
+	mov	r0, r9
+	moveq	r7, r7, asl #1
+	mov	r8, r8, lsr #22
+	uxtheq	r7, r7
+	uxth	sl, sl
+	mov	r1, sl
+	bl	__aeabi_uidiv
+	cmp	r5, #1
+	ldr	r3, .L98
+	uxth	r0, r0
+	mls	sl, sl, r0, r9
+	uxth	sl, sl
+	bne	.L95
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	addeq	r8, r3, r8, asl #1
+	movweq	r2, #3076
+	ldreqh	r8, [r8, r2]
+.L95:
+	add	r3, r3, r0, asl #2
+	ldr	r3, [r3, #3588]
+	mla	r7, r7, sl, r3
+	ldrb	r3, [sp, #40]	@ zero_extendqisi2
+	cmp	r3, #1
+	add	r8, r7, r8
+	str	r8, [r6, #0]
+	str	r0, [fp, #0]
+	bls	.L97
+	ldr	r0, [r4, #4]
+	ldr	r3, [r4, #40]
+	add	r0, r0, #1024
+	rsb	r3, r3, r0
+	rsbs	r0, r3, #0
+	adc	r0, r0, r3
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L97:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L99:
+	.align	2
+.L98:
+	.word	.LANCHOR0
+	.fnend
+	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
+	.align	2
+	.global	FlashScheduleEnSet
+	.type	FlashScheduleEnSet, %function
+FlashScheduleEnSet:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L101
+	ldr	r2, [r3, #3620]
+	str	r0, [r3, #3620]
+	mov	r0, r2
+	bx	lr
+.L102:
+	.align	2
+.L101:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashScheduleEnSet, .-FlashScheduleEnSet
+	.align	2
+	.global	FlashGetPageSize
+	.type	FlashGetPageSize, %function
+FlashGetPageSize:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L104
+	ldr	r3, [r3, #3624]
+	ldrb	r0, [r3, #9]	@ zero_extendqisi2
+	bx	lr
+.L105:
+	.align	2
+.L104:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetPageSize, .-FlashGetPageSize
+	.align	2
+	.global	NandcReadDontCaseBusyEn
+	.type	NandcReadDontCaseBusyEn, %function
+NandcReadDontCaseBusyEn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	NandcReadDontCaseBusyEn, .-NandcReadDontCaseBusyEn
+	.align	2
+	.global	NandcGetChipIf
+	.type	NandcGetChipIf, %function
+NandcGetChipIf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L108
+	add	r3, r3, r0, asl #3
+	ldrb	r0, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
+	add	r0, r0, #8
+	add	r0, r2, r0, asl #8
+	bx	lr
+.L109:
+	.align	2
+.L108:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcGetChipIf, .-NandcGetChipIf
+	.align	2
+	.global	NandcSetDdrPara
+	.type	NandcSetDdrPara, %function
+NandcSetDdrPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L111
+	mov	r2, r0, asl #8
+	orr	r2, r2, r0, asl #16
+	orr	r2, r2, #1
+	ldr	r3, [r3, #3012]
+	str	r2, [r3, #304]
+	bx	lr
+.L112:
+	.align	2
+.L111:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrPara, .-NandcSetDdrPara
+	.align	2
+	.global	NandcSetDdrDiv
+	.type	NandcSetDdrDiv, %function
+NandcSetDdrDiv:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L114
+	orr	r0, r0, #16640
+	ldr	r3, [r3, #3012]
+	str	r0, [r3, #344]
+	bx	lr
+.L115:
+	.align	2
+.L114:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrDiv, .-NandcSetDdrDiv
+	.align	2
+	.global	NandcSetDdrMode
+	.type	NandcSetDdrMode, %function
+NandcSetDdrMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L118
+	cmp	r0, #0
+	ldr	r2, [r3, #3012]
+	ldr	r3, [r2, #0]
+	bfc	r3, #13, #1
+	orrne	r3, r3, #253952
+	str	r3, [r2, #0]
+	bx	lr
+.L119:
+	.align	2
+.L118:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrMode, .-NandcSetDdrMode
+	.align	2
+	.global	NandcSetMode
+	.type	NandcSetMode, %function
+NandcSetMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L124
+	ands	r1, r0, #6
+	ldr	r2, [r3, #3012]
+	ldr	r3, [r2, #0]
+	bfieq	r3, r1, #13, #1
+	beq	.L123
+	orr	r3, r3, #24576
+	movw	r1, #16641
+	bfc	r3, #15, #1
+	str	r1, [r2, #344]
+	orr	r3, r3, #196608
+	ldr	r1, .L124+4
+	tst	r0, #4
+	orrne	r3, r3, #32768
+	str	r1, [r2, #304]
+	mov	r1, #38
+	str	r1, [r2, #308]
+	mov	r1, #39
+	str	r1, [r2, #308]
+.L123:
+	str	r3, [r2, #0]
+	mov	r0, #0
+	bx	lr
+.L125:
+	.align	2
+.L124:
+	.word	.LANCHOR0
+	.word	1710595
+	.fnend
+	.size	NandcSetMode, .-NandcSetMode
+	.align	2
+	.global	NandcFlashCs
+	.type	NandcFlashCs, %function
+NandcFlashCs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L127
+	add	r3, r3, r0, asl #3
+	mov	r0, #1
+	ldr	r2, [r3, #864]
+	ldrb	r1, [r3, #868]	@ zero_extendqisi2
+	ldr	r3, [r2, #0]
+	mov	r1, r0, asl r1
+	bfi	r3, r1, #0, #8
+	str	r3, [r2, #0]
+	bx	lr
+.L128:
+	.align	2
+.L127:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcFlashCs, .-NandcFlashCs
+	.align	2
+	.global	NandcFlashDeCs
+	.type	NandcFlashDeCs, %function
+NandcFlashDeCs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L130
+	add	r3, r3, r0, asl #3
+	ldr	r2, [r3, #864]
+	ldr	r3, [r2, #0]
+	bfc	r3, #0, #8
+	bfc	r3, #17, #1
+	str	r3, [r2, #0]
+	bx	lr
+.L131:
+	.align	2
+.L130:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcFlashDeCs, .-NandcFlashDeCs
+	.align	2
+	.global	NandcDelayns
+	.type	NandcDelayns, %function
+NandcDelayns:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	.pad #8
+	sub	sp, sp, #8
+	mov	r0, r0, lsr #4
+	str	r0, [sp, #4]
+.L133:
+	ldr	r0, [sp, #4]
+	cmp	r0, #0
+	sub	r3, r0, #1
+	str	r3, [sp, #4]
+	bne	.L133
+	add	sp, sp, #8
+	bx	lr
+	.fnend
+	.size	NandcDelayns, .-NandcDelayns
+	.align	2
+	.global	FlashReadStatusEN
+	.type	FlashReadStatusEN, %function
+FlashReadStatusEN:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L144
+	add	r0, r3, r0, asl #3
+	ldr	ip, [r3, #3624]
+	ldrb	r5, [r0, #868]	@ zero_extendqisi2
+	ldr	r4, [r0, #864]
+	ldrb	ip, [ip, #8]	@ zero_extendqisi2
+	add	r5, r5, #8
+	cmp	ip, #2
+	add	r0, r4, r5, asl #8
+	movne	r3, #112
+	strne	r3, [r0, #8]
+	bne	.L140
+	cmp	r2, #0
+	ldreqb	r2, [r3, #909]	@ zero_extendqisi2
+	ldrneb	r2, [r3, #910]	@ zero_extendqisi2
+	str	r2, [r0, #8]
+	ldrb	r3, [r3, #911]	@ zero_extendqisi2
+	cmp	r3, #0
+	movne	r3, #0
+	ldrne	r2, .L144
+	bne	.L139
+	b	.L140
+.L141:
+	mov	ip, r3, asl #3
+	add	r3, r3, #1
+	mov	ip, r1, lsr ip
+	uxtb	ip, ip
+	str	ip, [r0, #4]
+.L139:
+	ldrb	ip, [r2, #911]	@ zero_extendqisi2
+	cmp	r3, ip
+	bcc	.L141
+.L140:
+	mov	r0, #80
+	bl	NandcDelayns
+	ldr	r0, [r4, r5, asl #8]
+	uxtb	r0, r0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L145:
+	.align	2
+.L144:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadStatusEN, .-FlashReadStatusEN
+	.align	2
+	.global	FlashWaitReadyEN
+	.type	FlashWaitReadyEN, %function
+FlashWaitReadyEN:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+.L150:
+	mov	r0, r6
+	mov	r1, r5
+	mov	r2, r4
+	bl	FlashReadStatusEN
+	cmp	r0, #255
+	beq	.L150
+	tst	r0, #64
+	beq	.L150
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	FlashWaitReadyEN, .-FlashWaitReadyEN
+	.align	2
+	.global	FlashWaitCmdDone
+	.type	FlashWaitCmdDone, %function
+FlashWaitCmdDone:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L154
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	add	r4, r3, r0, asl #4
+	ldrb	r5, [r3, r0, asl #4]	@ zero_extendqisi2
+	mov	r6, r0
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L152
+	mov	r0, r5
+	bl	NandcFlashCs
+	ldr	r3, .L154+4
+	ldr	r1, [r4, #4]
+	mov	r0, r5
+	add	r6, r3, r6, asl #2
+	ldr	r2, [r6, #3588]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r6, r0
+	mov	r0, r5
+	bl	NandcFlashDeCs
+	ldr	r3, [r4, #8]
+	ands	r6, r6, #1
+	mvnne	r6, #0
+	str	r6, [r3, #0]
+	ldr	r2, [r4, #12]
+	mov	r3, #0
+	str	r3, [r4, #8]
+	cmp	r2, r3
+	strne	r6, [r2, #0]
+	strne	r3, [r4, #12]
+.L152:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L155:
+	.align	2
+.L154:
+	.word	.LANCHOR0+3628
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashWaitCmdDone, .-FlashWaitCmdDone
+	.align	2
+	.global	HynixSetRRPara
+	.type	HynixSetRRPara, %function
+HynixSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r8, r3
+	ldr	r9, .L162
+	mov	r4, r0
+	mov	r5, r1
+	mov	r6, r2
+	ldr	r3, [r9, #3624]
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	cmp	r3, #6
+	addeq	r9, r9, #20
+	addeq	r9, r9, r0, asl #6
+	addeq	r9, r9, r8, asl #2
+	beq	.L158
+	cmp	r3, #7
+	addeq	r9, r9, #28
+	addne	r3, r8, r0, asl #3
+	moveq	r3, #160
+	addne	r9, r9, #20
+	mlaeq	r9, r3, r0, r9
+	moveq	r3, #10
+	addne	r9, r9, r3, asl #3
+	mlaeq	r9, r3, r8, r9
+.L158:
+	ldr	r3, .L162
+	mov	r0, r4
+	mov	r7, #0
+	add	r3, r3, r4, asl #3
+	ldrb	sl, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
+	add	sl, sl, #8
+	add	sl, r2, sl, asl #8
+	bl	NandcFlashCs
+	mov	r3, #54
+	str	r3, [sl, #8]
+	b	.L160
+.L161:
+	ldrb	r3, [r6, r7]	@ zero_extendqisi2
+	mov	r0, #200
+	str	r3, [sl, #4]
+	bl	NandcDelayns
+	ldrsb	r3, [r9, r7]
+	add	r7, r7, #1
+	str	r3, [sl, #0]
+.L160:
+	uxtb	r3, r7
+	cmp	r3, r5
+	bcc	.L161
+	mov	r3, #22
+	mov	r0, r4
+	str	r3, [sl, #8]
+	bl	NandcFlashDeCs
+	ldr	r3, .L162
+	add	r4, r3, r4
+	strb	r8, [r4, #3756]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L163:
+	.align	2
+.L162:
+	.word	.LANCHOR0
+	.fnend
+	.size	HynixSetRRPara, .-HynixSetRRPara
+	.align	2
+	.global	FlashSetReadRetryDefault
+	.type	FlashSetReadRetryDefault, %function
+FlashSetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r6, .L169
+	ldr	r3, [r6, #3624]
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #6
+	ldmhifd	sp!, {r4, r5, r6, pc}
+	ldr	r5, .L169+4
+	mov	r4, #0
+.L167:
+	ldrb	r3, [r5, r4, asl #3]	@ zero_extendqisi2
+	uxtb	r0, r4
+	cmp	r3, #173
+	bne	.L166
+	ldrb	r1, [r6, #1]	@ zero_extendqisi2
+	mov	r3, #0
+	ldr	r2, .L169+8
+	bl	HynixSetRRPara
+.L166:
+	add	r4, r4, #1
+	cmp	r4, #4
+	bne	.L167
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L170:
+	.align	2
+.L169:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+4
+	.fnend
+	.size	FlashSetReadRetryDefault, .-FlashSetReadRetryDefault
+	.align	2
+	.global	SamsungSetRRPara
+	.type	SamsungSetRRPara, %function
+SamsungSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r4, r0
+	ldr	r3, .L174
+	mov	r5, #0
+	ldr	sl, .L174+4
+	mov	r8, #161
+	add	r1, r3, r1, asl #2
+	add	r6, r1, #3
+	mov	r7, r3
+	b	.L172
+.L173:
+	str	r8, [r4, #8]
+	mov	r3, #0
+	str	r3, [r4, #0]
+	mov	r0, #300
+	ldrsb	r3, [r5, r7]
+	add	r5, r5, #1
+	str	r3, [r4, #0]
+	ldrsb	r3, [r6, #1]!
+	str	r3, [r4, #0]
+	bl	NandcDelayns
+.L172:
+	ldrb	r3, [sl, #3760]	@ zero_extendqisi2
+	cmp	r5, r3
+	bcc	.L173
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L175:
+	.align	2
+.L174:
+	.word	.LANCHOR1+2924
+	.word	.LANCHOR0
+	.fnend
+	.size	SamsungSetRRPara, .-SamsungSetRRPara
+	.align	2
+	.global	ToshibaSetRRPara
+	.type	ToshibaSetRRPara, %function
+ToshibaSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	add	r6, r1, #1
+	ldr	r8, .L183
+	mov	r4, r0
+	add	r6, r6, r6, asl #2
+	mov	r5, #0
+	add	r3, r8, #45
+	add	r7, r8, r6
+	ldr	sl, .L183+4
+	add	r6, r3, r6
+	add	r9, r8, r1
+	b	.L177
+.L181:
+	mov	r3, #85
+	str	r3, [r4, #8]
+	ldrsb	r3, [r5, r8]
+	mov	r0, #200
+	str	r3, [r4, #4]
+	bl	NandcDelayns
+	ldrb	r3, [sl, #3761]	@ zero_extendqisi2
+	cmp	r3, #34
+	ldreqsb	r3, [r7, #0]
+	beq	.L182
+	cmp	r3, #35
+	addne	r3, r9, #2976
+	addne	r3, r3, #12
+	ldreqsb	r3, [r6, #0]
+	ldrnesb	r3, [r3, #0]
+.L182:
+	add	r5, r5, #1
+	add	r7, r7, #1
+	add	r6, r6, #1
+	str	r3, [r4, #0]
+.L177:
+	ldrb	r3, [sl, #3760]	@ zero_extendqisi2
+	cmp	r5, r3
+	bcc	.L181
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L184:
+	.align	2
+.L183:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	ToshibaSetRRPara, .-ToshibaSetRRPara
+	.align	2
+	.global	FlashReadStatus
+	.type	FlashReadStatus, %function
+FlashReadStatus:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, #112
+	ldr	r3, .L186
+	add	r3, r3, r0, asl #3
+	mov	r0, #80
+	ldrb	r5, [r3, #868]	@ zero_extendqisi2
+	ldr	r4, [r3, #864]
+	add	r5, r5, #8
+	add	r3, r4, r5, asl #8
+	str	r2, [r3, #8]
+	bl	NandcDelayns
+	ldr	r0, [r4, r5, asl #8]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L187:
+	.align	2
+.L186:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadStatus, .-FlashReadStatus
+	.align	2
+	.global	NandcWaitFlashReady
+	.type	NandcWaitFlashReady, %function
+NandcWaitFlashReady:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L193
+	stmfd	sp!, {r0, r1, r2, r4, r5, lr}
+	.save {r0, r1, r2, r4, r5, lr}
+	add	r3, r3, r0, asl #3
+	ldr	r4, .L193+4
+	ldr	r5, [r3, #864]
+.L190:
+	mov	r0, #100
+	bl	NandcDelayns
+	ldr	r3, [r5, #0]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #512
+	bne	.L191
+	subs	r4, r4, #1
+	bne	.L190
+	mvn	r0, #0
+	b	.L189
+.L191:
+	mov	r0, #0
+.L189:
+	ldmfd	sp!, {r1, r2, r3, r4, r5, pc}
+.L194:
+	.align	2
+.L193:
+	.word	.LANCHOR0
+	.word	100000
+	.fnend
+	.size	NandcWaitFlashReady, .-NandcWaitFlashReady
+	.align	2
+	.global	FlashEraseSLc2KBlocks
+	.type	FlashEraseSLc2KBlocks, %function
+FlashEraseSLc2KBlocks:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
+	.save {r4, r5, r6, r7, r8, sl, lr}
+	mov	r6, #0
+	.pad #20
+	sub	sp, sp, #20
+	mov	r8, r1
+	mov	r4, r0
+	mov	r7, r6
+	ldr	r5, .L203
+	b	.L196
+.L202:
+	add	r3, r6, r8
+	add	r2, sp, #8
+	mov	r0, r4
+	mov	r1, #0
+	uxtb	r3, r3
+	str	r3, [sp, #0]
+	add	r3, sp, #12
+	bl	LogAddr2PhyAddr
+	ldr	r3, [sp, #12]
+	ldrb	r2, [r5, #3762]	@ zero_extendqisi2
+	cmp	r3, r2
+	mvncs	r3, #0
+	strcs	r3, [r4, #0]
+	bcs	.L198
+	add	r2, r5, r3
+	add	r3, r5, r3, asl #4
+	ldrb	sl, [r2, #3764]	@ zero_extendqisi2
+	strb	sl, [r3, #3628]
+	mov	r0, sl
+	bl	NandcWaitFlashReady
+	mov	r0, sl
+	bl	NandcFlashCs
+	mov	r2, #0
+	ldr	r1, [sp, #8]
+	mov	r0, sl
+	bl	FlashEraseCmd
+	mov	r0, sl
+	bl	NandcWaitFlashReady
+	ldr	r1, [sp, #8]
+	mov	r0, sl
+	bl	FlashReadStatus
+	ldr	r3, [sp, #8]
+	mov	r2, #0
+	ands	r0, r0, #1
+	mvnne	r0, #0
+	str	r0, [r4, #0]
+	ldr	r1, [r5, #856]
+	mov	r0, sl
+	add	r1, r1, r3
+	bl	FlashEraseCmd
+	mov	r0, sl
+	bl	NandcWaitFlashReady
+	mov	r0, sl
+	ldr	r1, [sp, #8]
+	bl	FlashReadStatus
+	tst	r0, #1
+	mvnne	r3, #0
+	strne	r3, [r4, #0]
+	ldr	r3, [r4, #0]
+	cmn	r3, #1
+	bne	.L201
+	ldr	r0, .L203+4
+	ldr	r1, [sp, #8]
+	bl	printk
+.L201:
+	mov	r0, sl
+	bl	NandcFlashDeCs
+.L198:
+	sub	r6, r6, #1
+	add	r7, r7, #1
+	add	r4, r4, #36
+	uxtb	r6, r6
+.L196:
+	cmp	r7, r8
+	bne	.L202
+	mov	r0, #0
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
+.L204:
+	.align	2
+.L203:
+	.word	.LANCHOR0
+	.word	.LC1
+	.fnend
+	.size	FlashEraseSLc2KBlocks, .-FlashEraseSLc2KBlocks
+	.align	2
+	.global	SandiskSetRRPara
+	.type	SandiskSetRRPara, %function
+SandiskSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r3, #239
+	mov	r4, r0
+	str	r3, [r0, #8]
+	mov	r3, #17
+	str	r3, [r0, #4]
+	mov	r0, #200
+	mov	r5, r1
+	bl	NandcDelayns
+	ldr	r1, .L211
+	add	r3, r5, r5, asl #2
+	mvn	r6, #4
+	add	r0, r1, r3
+	add	r1, r1, #45
+	add	r1, r1, r3
+	mov	r2, #0
+	ldr	ip, .L211+4
+	mul	r5, r6, r5
+	b	.L206
+.L209:
+	ldrb	r6, [ip, #3761]	@ zero_extendqisi2
+	add	r2, r2, #1
+	cmp	r6, #67
+	addeq	r6, r0, r5
+	addne	r6, r1, r5
+	add	r6, r6, r3
+	add	r0, r0, #1
+	add	r1, r1, #1
+	ldrsb	r6, [r6, #5]
+	str	r6, [r4, #0]
+.L206:
+	ldrb	r6, [ip, #3760]	@ zero_extendqisi2
+	cmp	r2, r6
+	bcc	.L209
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	NandcWaitFlashReady
+.L212:
+	.align	2
+.L211:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	SandiskSetRRPara, .-SandiskSetRRPara
+	.align	2
+	.global	SandiskProgTestBadBlock
+	.type	SandiskProgTestBadBlock, %function
+SandiskProgTestBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L214
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	add	r3, r3, r0, asl #3
+	ldrb	r6, [r3, #868]	@ zero_extendqisi2
+	ldr	r5, [r3, #864]
+	mov	r3, #162
+	add	r6, r6, #8
+	add	r4, r5, r6, asl #8
+	str	r3, [r4, #8]
+	mov	r3, #128
+	str	r3, [r4, #8]
+	mov	r3, #0
+	str	r3, [r4, #4]
+	str	r3, [r4, #4]
+	uxtb	r3, r1
+	str	r3, [r4, #4]
+	mov	r3, r1, lsr #8
+	mov	r1, r1, lsr #16
+	str	r3, [r4, #4]
+	str	r1, [r4, #4]
+	mov	r3, #16
+	str	r3, [r4, #8]
+	bl	NandcWaitFlashReady
+	mov	r3, #112
+	mov	r0, #80
+	str	r3, [r4, #8]
+	bl	NandcDelayns
+	ldr	r0, [r5, r6, asl #8]
+	and	r0, r0, #1
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L215:
+	.align	2
+.L214:
+	.word	.LANCHOR0
+	.fnend
+	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
+	.align	2
+	.global	FlashReadSpare
+	.type	FlashReadSpare, %function
+FlashReadSpare:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L217
+	mov	ip, #0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r2
+	ldrb	r2, [r3, #2901]	@ zero_extendqisi2
+	ldr	r3, .L217+4
+	add	r3, r3, r0, asl #3
+	mov	r2, r2, asl #9
+	ldrb	r5, [r3, #868]	@ zero_extendqisi2
+	ldr	r4, [r3, #864]
+	add	r5, r5, #8
+	add	r3, r4, r5, asl #8
+	str	ip, [r3, #8]
+	str	r2, [r3, #4]
+	mov	r2, r2, lsr #8
+	str	r2, [r3, #4]
+	uxtb	r2, r1
+	str	r2, [r3, #4]
+	mov	r2, r1, lsr #8
+	mov	r1, r1, lsr #16
+	str	r2, [r3, #4]
+	str	r1, [r3, #4]
+	mov	r2, #48
+	str	r2, [r3, #8]
+	bl	NandcWaitFlashReady
+	ldr	r3, [r4, r5, asl #8]
+	strb	r3, [r6, #0]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L218:
+	.align	2
+.L217:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadSpare, .-FlashReadSpare
+	.align	2
+	.global	FlashEraseBlock
+	.type	FlashEraseBlock, %function
+FlashEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	mov	r5, r1
+	mov	r6, r2
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r2, r6
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashEraseCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashReadStatus
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	and	r0, r5, #1
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	FlashEraseBlock, .-FlashEraseBlock
+	.align	2
+	.global	FlashReset
+	.type	FlashReset, %function
+FlashReset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r3, .L221
+	add	r3, r3, r0, asl #3
+	ldrb	r5, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
+	add	r5, r5, #8
+	add	r5, r2, r5, asl #8
+	bl	NandcFlashCs
+	mov	r3, #255
+	mov	r0, r4
+	str	r3, [r5, #8]
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	NandcFlashDeCs
+.L222:
+	.align	2
+.L221:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReset, .-FlashReset
+	.align	2
+	.type	FlashReadIDRaw, %function
+FlashReadIDRaw:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
+	.save {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
+	mov	r5, r1
+	mov	r4, r0
+	bl	FlashReset
+	ldr	r3, .L225
+	mov	r0, r4
+	add	r3, r3, r4, asl #3
+	ldrb	r7, [r3, #868]	@ zero_extendqisi2
+	ldr	r6, [r3, #864]
+	bl	NandcFlashCs
+	add	r7, r7, #8
+	mov	r3, #144
+	mov	r0, #200
+	add	r8, r6, r7, asl #8
+	str	r3, [r8, #8]
+	mov	r3, #0
+	str	r3, [r8, #4]
+	bl	NandcDelayns
+	ldr	r3, [r6, r7, asl #8]
+	mov	r0, r4
+	strb	r3, [r5, #0]
+	ldr	r3, [r6, r7, asl #8]
+	strb	r3, [r5, #1]
+	ldr	r3, [r6, r7, asl #8]
+	strb	r3, [r5, #2]
+	ldr	r3, [r6, r7, asl #8]
+	strb	r3, [r5, #3]
+	ldr	r3, [r6, r7, asl #8]
+	strb	r3, [r5, #4]
+	ldr	r3, [r6, r7, asl #8]
+	strb	r3, [r5, #5]
+	bl	NandcFlashDeCs
+	ldrb	r2, [r5, #0]	@ zero_extendqisi2
+	sub	r3, r2, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L223
+	ldrb	r1, [r5, #2]	@ zero_extendqisi2
+	ldrb	r3, [r5, #1]	@ zero_extendqisi2
+	ldr	r0, .L225+4
+	str	r1, [sp, #0]
+	ldrb	r1, [r5, #3]	@ zero_extendqisi2
+	str	r1, [sp, #4]
+	ldrb	r1, [r5, #4]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	ldrb	r1, [r5, #5]	@ zero_extendqisi2
+	str	r1, [sp, #12]
+	add	r1, r4, #1
+	bl	printk
+.L223:
+	ldmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
+.L226:
+	.align	2
+.L225:
+	.word	.LANCHOR0
+	.word	.LC2
+	.fnend
+	.size	FlashReadIDRaw, .-FlashReadIDRaw
+	.align	2
+	.global	FlashSetInterfaceMode
+	.type	FlashSetInterfaceMode, %function
+FlashSetInterfaceMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r4, #0
+	ldr	sl, .L241
+	mov	r7, #239
+	ldr	r9, .L241+4
+	mov	r1, r4
+	sub	r8, sl, #864
+	mov	r6, #128
+	mov	r5, #1
+.L237:
+	mov	r2, sl
+	ldrb	lr, [r4, r9]	@ zero_extendqisi2
+	ldr	r3, [r2, r4]!
+	cmp	lr, #152
+	cmpne	lr, #69
+	ldrb	r2, [r2, #4]	@ zero_extendqisi2
+	add	r2, r2, #8
+	add	ip, r3, r2, asl #8
+	beq	.L228
+	cmp	lr, #173
+	cmpne	lr, #44
+	bne	.L229
+.L228:
+	cmp	r0, #1
+	ldrb	fp, [r8, #3772]	@ zero_extendqisi2
+	bne	.L230
+	tst	fp, #1
+	beq	.L229
+	cmp	lr, #173
+	str	r7, [ip, #8]
+	streq	r0, [ip, #4]
+	beq	.L240
+	cmp	lr, #44
+	streq	r0, [ip, #4]
+	strne	r6, [ip, #4]
+	moveq	ip, #5
+	strne	r0, [r3, r2, asl #8]
+	bne	.L235
+	b	.L239
+.L230:
+	tst	fp, #4
+	beq	.L229
+	cmp	lr, #173
+	str	r7, [ip, #8]
+	streq	r5, [ip, #4]
+	moveq	ip, #32
+	beq	.L239
+	cmp	lr, #44
+	strne	r6, [ip, #4]
+	bne	.L240
+	str	r5, [ip, #4]
+	mov	ip, #35
+.L239:
+	str	ip, [r3, r2, asl #8]
+	b	.L235
+.L240:
+	str	r1, [r3, r2, asl #8]
+.L235:
+	str	r1, [r3, r2, asl #8]
+	str	r1, [r3, r2, asl #8]
+	str	r1, [r3, r2, asl #8]
+.L229:
+	add	r4, r4, #8
+	cmp	r4, #32
+	bne	.L237
+	mov	r0, #0
+	bl	NandcWaitFlashReady
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L242:
+	.align	2
+.L241:
+	.word	.LANCHOR0+864
+	.word	.LANCHOR0+2980
+	.fnend
+	.size	FlashSetInterfaceMode, .-FlashSetInterfaceMode
+	.align	2
+	.global	ftl_flash_de_init
+	.type	ftl_flash_de_init, %function
+ftl_flash_de_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r0, #0
+	ldr	r4, .L245
+	bl	NandcWaitFlashReady
+	bl	FlashSetReadRetryDefault
+	ldrb	r3, [r4, #3773]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L244
+	ldrb	r3, [r4, #3772]	@ zero_extendqisi2
+	tst	r3, #1
+	beq	.L244
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	mov	r3, #0
+	strb	r3, [r4, #3773]
+.L244:
+	ldr	r3, [r4, #864]
+	mov	r0, #0
+	str	r0, [r3, #336]
+	ldmfd	sp!, {r4, pc}
+.L246:
+	.align	2
+.L245:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_flash_de_init, .-ftl_flash_de_init
+	.align	2
+	.global	FlashReadDpCmd
+	.type	FlashReadDpCmd, %function
+FlashReadDpCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L251
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r7, r2
+	add	r2, r3, r0, asl #3
+	mov	r5, r1
+	mov	r4, r0
+	ldrb	r6, [r2, #868]	@ zero_extendqisi2
+	ldr	r1, [r2, #864]
+	ldrb	r2, [r3, #912]	@ zero_extendqisi2
+	add	r6, r6, #8
+	cmp	r2, #1
+	ldrb	r2, [r3, #904]	@ zero_extendqisi2
+	add	r6, r1, r6, asl #8
+	str	r2, [r6, #8]
+	bne	.L248
+	mov	r8, #0
+	uxtb	r2, r5
+	str	r8, [r6, #4]
+	str	r8, [r6, #4]
+	str	r2, [r6, #4]
+	mov	r2, r5, lsr #8
+	str	r2, [r6, #4]
+	mov	r2, r5, lsr #16
+	str	r2, [r6, #4]
+	ldrb	r3, [r3, #905]	@ zero_extendqisi2
+	str	r3, [r6, #8]
+	bl	NandcWaitFlashReady
+	str	r8, [r6, #8]
+	str	r8, [r6, #4]
+	str	r8, [r6, #4]
+	b	.L250
+.L248:
+	uxtb	r2, r5
+	str	r2, [r6, #4]
+	mov	r2, r5, lsr #8
+	str	r2, [r6, #4]
+	mov	r2, r5, lsr #16
+	str	r2, [r6, #4]
+	ldrb	r3, [r3, #905]	@ zero_extendqisi2
+	str	r3, [r6, #8]
+.L250:
+	uxtb	r3, r7
+	mov	r0, r4
+	str	r3, [r6, #4]
+	mov	r1, r5
+	mov	r3, r7, lsr #8
+	mov	r7, r7, lsr #16
+	str	r3, [r6, #4]
+	mov	r3, #48
+	str	r7, [r6, #4]
+	str	r3, [r6, #8]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	b	FlashSetRandomizer
+.L252:
+	.align	2
+.L251:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadDpCmd, .-FlashReadDpCmd
+	.align	2
+	.global	NandcRandmzSel
+	.type	NandcRandmzSel, %function
+NandcRandmzSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L254
+	add	r3, r3, r0, asl #3
+	ldr	r3, [r3, #864]
+	str	r1, [r3, #336]
+	bx	lr
+.L255:
+	.align	2
+.L254:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcRandmzSel, .-NandcRandmzSel
+	.global	__aeabi_idiv
+	.align	2
+	.global	NandcTimeCfg
+	.type	NandcTimeCfg, %function
+NandcTimeCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r0, #0
+	bl	rknand_get_clk_rate
+	ldr	r1, .L266
+	bl	__aeabi_idiv
+	ldr	r3, .L266+4
+	ldr	r3, [r3, #3012]
+	cmp	r0, #250
+	movwgt	r2, #8354
+	bgt	.L264
+	cmp	r0, #220
+	bgt	.L265
+.L259:
+	cmp	r0, #185
+	movwgt	r2, #4226
+	bgt	.L264
+	cmp	r0, #160
+	movwgt	r2, #4194
+	bgt	.L264
+	cmp	r4, #35
+	movwls	r2, #4193
+	bls	.L264
+	cmp	r4, #99
+	movwls	r2, #4225
+	bls	.L264
+.L265:
+	movw	r2, #8322
+.L264:
+	str	r2, [r3, #4]
+	ldmfd	sp!, {r4, pc}
+.L267:
+	.align	2
+.L266:
+	.word	1000000
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcTimeCfg, .-NandcTimeCfg
+	.align	2
+	.global	NandcInit
+	.type	NandcInit, %function
+NandcInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, #0
+	ldr	r4, .L270
+	mov	r3, #1
+	mov	r5, #0
+	str	r0, [r4, #3012]
+	str	r2, [r4, #868]
+	str	r0, [r4, #864]
+	str	r3, [r4, #876]
+	mov	r3, #2
+	str	r0, [r4, #872]
+	str	r3, [r4, #884]
+	mov	r3, #3
+	str	r0, [r4, #880]
+	str	r0, [r4, #888]
+	str	r3, [r4, #892]
+	ldr	r3, [r0, #0]
+	and	r3, r3, #253952
+	ubfx	r1, r3, #13, #1
+	bfi	r3, r2, #13, #1
+	ldr	r2, [r0, #352]
+	orr	r3, r3, #256
+	str	r1, [r4, #3776]
+	movw	r1, #2049
+	ubfx	r2, r2, #16, #4
+	str	r2, [r4, #3780]
+	ldr	r2, [r0, #352]
+	cmp	r2, r1
+	str	r2, [r4, #3784]
+	moveq	r2, #8
+	streq	r2, [r4, #3780]
+	str	r3, [r0, #0]
+	mov	r0, #40
+	ldr	r3, [r4, #3012]
+	str	r5, [r3, #336]
+	bl	NandcTimeCfg
+	ldr	r3, [r4, #3012]
+	movw	r2, #8322
+	mov	r0, #36864
+	str	r2, [r3, #344]
+	ldr	r2, .L270+4
+	str	r2, [r3, #304]
+	bl	ftl_malloc
+	str	r5, [r4, #3816]
+	str	r5, [r4, #3824]
+	str	r0, [r4, #3788]
+	str	r0, [r4, #3792]
+	add	r0, r0, #32768
+	str	r0, [r4, #3796]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L271:
+	.align	2
+.L270:
+	.word	.LANCHOR0
+	.word	1710593
+	.fnend
+	.size	NandcInit, .-NandcInit
+	.align	2
+	.global	FlashTimingCfg
+	.type	FlashTimingCfg, %function
+FlashTimingCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	sub	r3, r0, #4160
+	movw	r2, #4225
+	sub	r3, r3, #33
+	cmp	r0, r2
+	cmpne	r3, #1
+	bls	.L273
+	movw	r3, #4226
+	movw	r2, #8322
+	cmp	r0, r3
+	cmpne	r0, r2
+	bne	.L274
+.L273:
+	ldr	r3, .L275
+	ldr	r3, [r3, #3012]
+	str	r0, [r3, #4]
+.L274:
+	ldr	r3, .L275+4
+	ldrb	r0, [r3, #2913]	@ zero_extendqisi2
+	b	NandcTimeCfg
+.L276:
+	.align	2
+.L275:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.fnend
+	.size	FlashTimingCfg, .-FlashTimingCfg
+	.align	2
+	.global	NandcGetTimeCfg
+	.type	NandcGetTimeCfg, %function
+NandcGetTimeCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L278
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r4, [ip, #3012]
+	ldr	r4, [r4, #4]
+	str	r4, [r0, #0]
+	ldr	r0, [ip, #3012]
+	ldr	r0, [r0, #0]
+	str	r0, [r1, #0]
+	ldr	r1, [ip, #3012]
+	ldr	r1, [r1, #304]
+	str	r1, [r2, #0]
+	ldr	r2, [ip, #3012]
+	ldr	r0, [r2, #308]
+	ldr	r1, [r2, #344]
+	uxtb	r2, r0
+	orr	r2, r2, r1, asl #16
+	str	r2, [r3, #0]
+	ldmfd	sp!, {r4, pc}
+.L279:
+	.align	2
+.L278:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
+	.align	2
+	.global	NandcBchSel
+	.type	NandcBchSel, %function
+NandcBchSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L285
+	mov	r1, #1
+	ldr	r2, [r3, #3012]
+	str	r0, [r3, #3828]
+	mov	r3, #0
+	str	r1, [r2, #8]
+	mov	r1, #16
+	cmp	r0, r1
+	bfi	r3, r1, #8, #8
+	bfc	r3, #18, #1
+	beq	.L284
+.L281:
+	cmp	r0, #24
+	orreq	r3, r3, #16
+	beq	.L282
+	cmp	r0, #40
+	orr	r3, r3, #262144
+	orr	r3, r3, #16
+	bne	.L282
+.L284:
+	bfc	r3, #4, #1
+.L282:
+	orr	r3, r3, #1
+	str	r3, [r2, #12]
+	bx	lr
+.L286:
+	.align	2
+.L285:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcBchSel, .-NandcBchSel
+	.align	2
+	.global	FlashBchSel
+	.type	FlashBchSel, %function
+FlashBchSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L288
+	strb	r0, [r3, #3832]
+	b	NandcBchSel
+.L289:
+	.align	2
+.L288:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashBchSel, .-FlashBchSel
+	.align	2
+	.global	ftl_flash_resume
+	.type	ftl_flash_resume, %function
+ftl_flash_resume:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L295
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, #0
+	ldr	r2, [r3, #3012]
+	ldr	r1, [r3, #3016]
+	ldr	r5, [r3, #3032]
+	ldr	r6, .L295+4
+	str	r1, [r2, #0]
+	ldr	r1, [r3, #3020]
+	ldr	r2, [r3, #3012]
+	str	r1, [r2, #4]
+	ldr	r1, [r3, #3024]
+	str	r1, [r2, #8]
+	ldr	r1, [r3, #3028]
+	str	r1, [r2, #12]
+	ldr	r1, [r3, #3036]
+	str	r5, [r2, #304]
+	str	r1, [r2, #308]
+	ldr	r1, [r3, #3040]
+	ldr	r3, [r3, #3044]
+	str	r1, [r2, #336]
+	str	r3, [r2, #344]
+.L292:
+	ldrb	r3, [r6, r4, asl #3]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L291
+	uxtb	r0, r4
+	bl	FlashReset
+.L291:
+	add	r4, r4, #1
+	cmp	r4, #4
+	bne	.L292
+	ldr	r4, .L295
+	ldrb	r3, [r4, #3773]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L293
+	mov	r0, #1
+	bl	NandcSetMode
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	NandcSetMode
+	ubfx	r0, r5, #8, #8
+	bl	NandcSetDdrPara
+.L293:
+	ldr	r3, .L295
+	ldr	r3, [r3, #3624]
+	ldrb	r0, [r3, #20]	@ zero_extendqisi2
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	FlashBchSel
+.L296:
+	.align	2
+.L295:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2980
+	.fnend
+	.size	ftl_flash_resume, .-ftl_flash_resume
+	.align	2
+	.global	ftl_nandc_get_irq_status
+	.type	ftl_nandc_get_irq_status, %function
+ftl_nandc_get_irq_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, [r0, #372]
+	bx	lr
+	.fnend
+	.size	ftl_nandc_get_irq_status, .-ftl_nandc_get_irq_status
+	.align	2
+	.global	rk_nandc_flash_ready
+	.type	rk_nandc_flash_ready, %function
+rk_nandc_flash_ready:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, [r0, #368]
+	orr	r3, r3, #2
+	str	r3, [r0, #368]
+	ldr	r3, [r0, #364]
+	bic	r3, r3, #2
+	str	r3, [r0, #364]
+	bx	lr
+	.fnend
+	.size	rk_nandc_flash_ready, .-rk_nandc_flash_ready
+	.align	2
+	.global	NandcIqrWaitFlashReady
+	.type	NandcIqrWaitFlashReady, %function
+NandcIqrWaitFlashReady:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	bl	rk_nandc_rb_irq_flag_init
+	ldr	r3, [r4, #368]
+	orr	r3, r3, #2
+	str	r3, [r4, #368]
+	ldr	r3, [r4, #364]
+	orr	r3, r3, #2
+	str	r3, [r4, #364]
+	ldr	r3, [r4, #0]
+	ubfx	r3, r3, #8, #8
+	and	r3, r3, #2
+	uxtb	r3, r3
+	cmp	r3, #0
+	bne	.L300
+	mov	r0, r4
+	ldmfd	sp!, {r4, lr}
+	b	wait_for_nand_flash_ready
+.L300:
+	ldr	r3, [r4, #368]
+	orr	r3, r3, #2
+	str	r3, [r4, #368]
+	ldr	r3, [r4, #364]
+	bic	r3, r3, #2
+	str	r3, [r4, #364]
+	ldmfd	sp!, {r4, pc}
+	.fnend
+	.size	NandcIqrWaitFlashReady, .-NandcIqrWaitFlashReady
+	.align	2
+	.global	FlashEraseBlocks
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r5, .L321
+	mov	r6, r0
+	str	r1, [sp, #12]
+	mov	r7, r2
+	ldrb	r4, [r5, #852]	@ zero_extendqisi2
+	cmp	r4, #0
+	moveq	r9, r5
+	beq	.L302
+	mov	r1, r2
+	bl	FlashEraseSLc2KBlocks
+	b	.L303
+.L311:
+	mov	r8, #36
+	rsb	r3, r4, r7
+	mul	r8, r8, r4
+	uxtb	r3, r3
+	mov	r1, #0
+	str	r3, [sp, #0]
+	add	r2, sp, #16
+	add	r3, sp, #20
+	add	fp, r6, r8
+	mov	r0, fp
+	bl	LogAddr2PhyAddr
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
+	mov	sl, r0
+	ldr	r0, [sp, #20]
+	cmp	r0, r3
+	mvncs	r3, #0
+	strcs	r3, [r6, r8]
+	bcs	.L305
+	ldrb	r3, [r5, #3833]	@ zero_extendqisi2
+	cmp	r3, #0
+	add	r3, r9, r0, asl #4
+	ldr	r3, [r3, #3636]
+	moveq	sl, #0
+	cmp	r3, #0
+	beq	.L307
+	uxtb	r0, r0
+	bl	FlashWaitCmdDone
+.L307:
+	ldr	r2, [sp, #20]
+	mov	r1, #0
+	cmp	sl, #0
+	add	r3, r5, r2, asl #4
+	movne	r0, #36
+	str	r1, [r3, #3640]
+	ldr	r1, [sp, #16]
+	str	fp, [r3, #3636]
+	str	r1, [r3, #3632]
+	addne	r1, r4, #1
+	mlane	r1, r0, r1, r6
+	strne	r1, [r3, #3640]
+	add	r3, r9, r2
+	add	r2, r9, r2, asl #4
+	ldrb	r8, [r3, #3764]	@ zero_extendqisi2
+	mov	r0, r8
+	strb	r8, [r2, #3628]
+	bl	NandcFlashCs
+	ldr	r3, [sp, #12]
+	mov	r0, r8
+	cmp	r3, #1
+	bne	.L309
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L309
+	bl	flash_enter_slc_mode
+	b	.L310
+.L309:
+	bl	flash_exit_slc_mode
+.L310:
+	ldr	r3, [sp, #20]
+	mov	r0, r8
+	ldr	r1, [sp, #16]
+	add	r4, r4, sl
+	add	r3, r5, r3, asl #2
+	ldr	r2, [r3, #3588]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r0, r8
+	ldr	r1, [sp, #16]
+	mov	r2, sl
+	bl	FlashEraseCmd
+	mov	r0, r8
+	bl	NandcFlashDeCs
+.L305:
+	add	r4, r4, #1
+.L302:
+	cmp	r4, r7
+	bcc	.L311
+	ldr	r5, .L321
+	mov	r4, #0
+	ldr	r8, .L321+4
+	ldr	r0, [r5, #3012]
+	bl	NandcIqrWaitFlashReady
+	b	.L312
+.L314:
+	uxtb	r0, r4
+	bl	FlashWaitCmdDone
+	ldr	r3, [sp, #12]
+	cmp	r3, #1
+	bne	.L313
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L313
+	ldrb	r0, [r8, r4, asl #4]	@ zero_extendqisi2
+	bl	flash_exit_slc_mode
+.L313:
+	add	r4, r4, #1
+.L312:
+	ldrb	r2, [r5, #3762]	@ zero_extendqisi2
+	ldr	r3, .L321
+	cmp	r4, r2
+	bcc	.L314
+	ldr	r0, [r3, #3836]
+	cmp	r0, #0
+	beq	.L303
+	ldrb	r3, [r3, #2980]	@ zero_extendqisi2
+	cmp	r3, #69
+	moveq	r3, #0
+	moveq	r2, r3
+	bne	.L320
+	b	.L315
+.L316:
+	add	r3, r3, #1
+	str	r2, [r6, #-36]
+.L315:
+	cmp	r3, r7
+	add	r6, r6, #36
+	bne	.L316
+.L320:
+	mov	r0, #0
+.L303:
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L322:
+	.align	2
+.L321:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3628
+	.fnend
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
+	.align	2
+	.global	rk_nandc_flash_xfer_completed
+	.type	rk_nandc_flash_xfer_completed, %function
+rk_nandc_flash_xfer_completed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, [r0, #368]
+	orr	r3, r3, #1
+	str	r3, [r0, #368]
+	ldr	r3, [r0, #364]
+	bic	r3, r3, #1
+	str	r3, [r0, #364]
+	bx	lr
+	.fnend
+	.size	rk_nandc_flash_xfer_completed, .-rk_nandc_flash_xfer_completed
+	.align	2
+	.global	NandcSendDumpDataStart
+	.type	NandcSendDumpDataStart, %function
+NandcSendDumpDataStart:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, [r0, #16]
+	.pad #8
+	sub	sp, sp, #8
+	ldr	r3, .L325
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bfc	r2, #2, #1
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	str	r2, [r0, #16]
+	str	r3, [r0, #8]
+	orr	r3, r3, #4
+	str	r3, [r0, #8]
+	add	sp, sp, #8
+	bx	lr
+.L326:
+	.align	2
+.L325:
+	.word	538969130
+	.fnend
+	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
+	.align	2
+	.global	NandcSendDumpDataDone
+	.type	NandcSendDumpDataDone, %function
+NandcSendDumpDataDone:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	.pad #8
+	sub	sp, sp, #8
+.L328:
+	ldr	r3, [r0, #8]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #1048576
+	beq	.L328
+	add	sp, sp, #8
+	bx	lr
+	.fnend
+	.size	NandcSendDumpDataDone, .-NandcSendDumpDataDone
+	.align	2
+	.global	NandcXferStart
+	.type	NandcXferStart, %function
+NandcXferStart:
+	.fnstart
+	@ args = 8, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r6, r1
+	ldr	r1, .L343
+	mov	r8, r2
+	mov	r4, #0
+	.pad #20
+	sub	sp, sp, #20
+	add	r0, r1, r0, asl #3
+	ldr	r9, [sp, #56]
+	ldr	r5, [r0, #864]
+	ldrb	r2, [r0, #868]	@ zero_extendqisi2
+	mov	r0, #16
+	ldr	ip, [sp, #60]
+	ldr	r7, [r5, #12]
+	bfi	r7, r0, #8, #8
+	bfi	r7, r4, #3, #1
+	bfi	r4, r6, #1, #1
+	orr	r4, r4, #8
+	bfi	r7, r2, #5, #3
+	mov	r2, #1
+	bfi	r4, r2, #5, #2
+	orr	r4, r4, #536870912
+	mov	r3, r3, lsr r2
+	orr	r4, r4, #1024
+	bfi	r4, r3, #4, #1
+	ldr	r3, [r1, #3780]
+	cmp	r3, #3
+	bls	.L331
+	ldr	r3, [r5, #16]
+	cmp	r9, #0
+	cmpeq	ip, #0
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bfc	r3, #2, #1
+	str	r3, [sp, #12]
+	beq	.L332
+	cmp	r6, #0
+	beq	.L333
+	ldr	r3, [r1, #3828]
+	mov	r0, ip
+	cmp	r3, #24
+	movhi	r3, #128
+	movls	r3, #64
+	str	r3, [sp, #0]
+	mov	r3, r8, lsr r2
+	str	r3, [sp, #4]
+	mov	r3, #0
+	mov	r2, r3
+	b	.L335
+.L338:
+	cmp	ip, #0
+	mov	lr, r3, lsr #2
+	add	r2, r2, #1
+	ldrneh	fp, [r0, #2]
+	mvneq	fp, #0
+	ldrneh	sl, [r0], #4
+	ldreq	sl, [r1, #3796]
+	orrne	sl, sl, fp, asl #16
+	ldrne	fp, [r1, #3796]
+	streq	fp, [sl, lr, asl #2]
+	strne	sl, [fp, lr, asl #2]
+	ldr	lr, [sp, #0]
+	add	r3, r3, lr
+.L335:
+	ldr	sl, [sp, #4]
+	cmp	r2, sl
+	bcc	.L338
+.L333:
+	mov	r0, r5
+	add	r8, r8, #1
+	bl	rk_nandc_xfer_irq_flag_init
+	ldr	r3, [r5, #368]
+	mov	r8, r8, asr #1
+	cmp	r9, #0
+	bfi	r4, r8, #22, #6
+	ldr	r8, .L343
+	orr	r3, r3, #1
+	str	r3, [r5, #368]
+	ldr	r3, [r5, #364]
+	ubfx	sl, r4, #22, #5
+	ldreq	r0, [r8, #3792]
+	movne	r0, r9
+	orr	r3, r3, #1
+	str	r3, [r5, #364]
+	ldr	r3, [r8, #3796]
+	mov	r2, r6
+	mov	r1, sl, asl #10
+	str	r3, [r8, #3804]
+	str	r0, [r8, #3800]
+	bl	rknand_dma_map_single
+	mov	r2, r6
+	mov	r1, sl, asl #7
+	str	r0, [r8, #3808]
+	ldr	r0, [r8, #3804]
+	bl	rknand_dma_map_single
+	mov	r3, #1
+	str	r3, [r8, #3816]
+	mov	r2, #16
+	ldr	r3, [r8, #3808]
+	tst	r9, #3
+	str	r0, [r8, #3812]
+	str	r3, [r5, #20]
+	ldr	r3, [r8, #3812]
+	str	r3, [r5, #24]
+	mov	r3, #0
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bfi	r3, r2, #9, #5
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	moveq	r2, #2
+	orr	r3, r3, #448
+	str	r3, [sp, #12]
+	ldreq	r3, [sp, #12]
+	bfieq	r3, r2, #3, #3
+	streq	r3, [sp, #12]
+	rsbs	r6, r6, #1
+	ldr	r3, [sp, #12]
+	movcc	r6, #0
+	orr	r3, r3, #4
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bfi	r3, r6, #1, #1
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	orr	r3, r3, #1
+	str	r3, [sp, #12]
+.L332:
+	ldr	r3, [sp, #12]
+	str	r3, [r5, #16]
+.L331:
+	str	r7, [r5, #12]
+	str	r4, [r5, #8]
+	orr	r4, r4, #4
+	str	r4, [r5, #8]
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L344:
+	.align	2
+.L343:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcXferStart, .-NandcXferStart
+	.align	2
+	.global	NandcCopy1KB
+	.type	NandcCopy1KB, %function
+NandcCopy1KB:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #1
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r2
+	add	r2, r0, #4096
+	mov	r4, r0
+	ldr	r6, [sp, #16]
+	add	r2, r2, r5, asl #9
+	bne	.L346
+	cmp	r3, #0
+	beq	.L347
+	mov	r0, r2
+	mov	r1, r3
+	mov	r2, #1024
+	bl	memcpy
+.L347:
+	cmp	r6, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	ldrb	r3, [r6, #2]	@ zero_extendqisi2
+	mov	r5, r5, lsr #1
+	ldrb	r2, [r6, #1]	@ zero_extendqisi2
+	mov	r3, r3, asl #16
+	orr	r3, r3, r2, asl #8
+	ldrb	r2, [r6, #0]	@ zero_extendqisi2
+	orr	r3, r3, r2
+	ldrb	r2, [r6, #3]	@ zero_extendqisi2
+	orr	r3, r3, r2, asl #24
+	mov	r2, #48
+	mul	r5, r2, r5
+	mov	r5, r5, asr #2
+	add	r5, r5, #128
+	str	r3, [r4, r5, asl #2]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L346:
+	cmp	r3, #0
+	beq	.L349
+	mov	r1, r2
+	mov	r0, r3
+	mov	r2, #1024
+	bl	memcpy
+.L349:
+	cmp	r6, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	mov	r5, r5, lsr #1
+	mov	r3, #48
+	mul	r5, r3, r5
+	mov	r5, r5, asr #2
+	add	r5, r5, #128
+	ldr	r3, [r4, r5, asl #2]
+	mov	r2, r3, lsr #8
+	strb	r3, [r6, #0]
+	strb	r2, [r6, #1]
+	mov	r2, r3, lsr #16
+	mov	r3, r3, lsr #24
+	strb	r2, [r6, #2]
+	strb	r3, [r6, #3]
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	NandcCopy1KB, .-NandcCopy1KB
+	.align	2
+	.global	Ftl_log2
+	.type	Ftl_log2, %function
+Ftl_log2:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r2, #1
+	mov	r3, #0
+	b	.L351
+.L352:
+	add	r3, r3, #1
+	mov	r2, r2, asl #1
+	uxth	r3, r3
+.L351:
+	cmp	r2, r0
+	bls	.L352
+	sub	r3, r3, #1
+	uxth	r0, r3
+	bx	lr
+	.fnend
+	.size	Ftl_log2, .-Ftl_log2
+	.align	2
+	.global	FtlPrintInfo
+	.type	FtlPrintInfo, %function
+FtlPrintInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FtlPrintInfo, .-FtlPrintInfo
+	.align	2
+	.global	FtlSysBlkNumInit
+	.type	FtlSysBlkNumInit, %function
+FtlSysBlkNumInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L357
+	movw	r2, #3844
+	cmp	r0, #23
+	movw	r1, #3854
+	ldrh	r2, [r3, r2]
+	movls	r0, #24
+	ldrh	r1, [r3, r1]
+	str	r0, [r3, #3840]
+	mul	r2, r2, r0
+	rsb	r0, r0, r1
+	movw	r1, #3852
+	strh	r0, [r3, r1]	@ movhi
+	mov	r0, #0
+	ldr	r1, [r3, #3860]
+	str	r2, [r3, #3848]
+	rsb	r2, r2, r1
+	str	r2, [r3, #3856]
+	bx	lr
+.L358:
+	.align	2
+.L357:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
+	.align	2
+	.global	FtlConstantsInit
+	.type	FtlConstantsInit, %function
+FtlConstantsInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	movw	r2, #3864
+	ldr	r3, .L376
+	mov	r4, r0
+	ldrh	lr, [r0, #8]
+	.pad #20
+	sub	sp, sp, #20
+	ldrh	r1, [r0, #10]
+	ldrh	r0, [r0, #12]
+	strh	lr, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	ldrh	r6, [r4, #14]
+	strh	r1, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	strh	r0, [r3, r2]	@ movhi
+	movw	r2, #3854
+	strh	r6, [r3, r2]	@ movhi
+	mov	r3, #0
+	ldr	r2, .L376+4
+.L360:
+	strb	r3, [r3, r2]
+	add	r3, r3, #1
+	cmp	r3, #32
+	bne	.L360
+	ldrh	r2, [r4, #14]
+	ldrh	r3, [r4, #20]
+	cmp	r3, r2, lsr #8
+	bcs	.L361
+	ldr	r2, .L376+4
+	sub	ip, r1, #1
+	uxtb	r7, r0
+	mov	r3, #0
+	rsb	sl, r0, r2
+	str	sl, [sp, #8]
+	mla	ip, r0, ip, r2
+	mov	r8, r7, asl #1
+	uxtb	r8, r8
+	str	ip, [sp, #12]
+	b	.L362
+.L363:
+	strb	ip, [r9, r2]
+	add	fp, ip, r7
+	add	ip, ip, r8
+	add	r5, r5, #1
+	strb	fp, [sl, r2]
+	uxtb	ip, ip
+.L365:
+	cmp	r5, r1
+	add	r2, r2, r0
+	bcc	.L363
+	add	r3, r3, #1
+.L362:
+	cmp	r3, r0
+	bcs	.L364
+	ldr	fp, [sp, #8]
+	mov	r2, #0
+	uxtb	ip, r3
+	mov	r5, r2
+	add	r9, fp, r3
+	ldr	fp, [sp, #12]
+	add	sl, fp, r3
+	b	.L365
+.L364:
+	ldr	r3, .L376
+	movw	r2, #3866
+	mov	r1, r1, asl #1
+	mov	r6, r6, lsr #1
+	strh	r1, [r3, r2]	@ movhi
+	movw	r2, #3854
+	strh	r6, [r3, r2]	@ movhi
+.L361:
+	ldr	r3, .L376
+	movw	r2, #3902
+	cmp	lr, #1
+	mov	r1, #5
+	mov	ip, #0
+	ldr	sl, .L376
+	ldrb	r8, [r3, #852]	@ zero_extendqisi2
+	strh	r1, [r3, r2]	@ movhi
+	mov	r1, #3904
+	streqh	lr, [r3, r2]	@ movhi
+	cmp	r8, #0
+	movw	r2, #3906
+	strh	ip, [r3, r1]	@ movhi
+	mov	r1, #4352
+	strh	r1, [r3, r2]	@ movhi
+	ldrne	r3, .L376
+	movne	r1, #384
+	strneh	r1, [r3, r2]	@ movhi
+	movw	r3, #3866
+	ldrh	r5, [sl, r3]
+	movw	r3, #3844
+	mul	r5, r5, r0
+	uxth	r5, r5
+	strh	r5, [sl, r3]	@ movhi
+	add	r3, r3, #10
+	ldrh	r6, [sl, r3]
+	add	r3, r3, #54
+	mul	r0, r0, r6
+	uxth	r0, r0
+	strh	r0, [sl, r3]	@ movhi
+	bl	Ftl_log2
+	movw	r3, #3910
+	ldrh	fp, [r4, #18]
+	movw	r2, #3912
+	ldrh	r9, [r4, #20]
+	strh	r0, [sl, r3]	@ movhi
+	mov	r0, r9
+	ldrh	r3, [r4, #16]
+	mul	r1, r3, r5
+	strh	r3, [sl, r2]	@ movhi
+	add	r2, r2, #2
+	strh	fp, [sl, r2]	@ movhi
+	add	r2, r2, #2
+	strh	r1, [sl, r2]	@ movhi
+	add	r2, r2, #2
+	strh	r9, [sl, r2]	@ movhi
+	str	r3, [sp, #4]
+	bl	Ftl_log2
+	mov	r2, #3920
+	movw	r1, #3922
+	cmp	r6, #1024
+	strh	r0, [sl, r2]	@ movhi
+	mov	r2, r9, asl #9
+	mov	r7, r0
+	uxth	r2, r2
+	strh	r2, [sl, r1]	@ movhi
+	add	r1, r1, #2
+	mov	r2, r2, lsr #8
+	strh	r2, [sl, r1]	@ movhi
+	movw	r2, #3926
+	ldrh	r1, [r4, #26]
+	mov	r4, sl
+	strh	r1, [sl, r2]	@ movhi
+	uxtbhi	r1, r6
+	mul	r2, r6, r5
+	str	r2, [sl, #3860]
+	movhi	r2, #3904
+	ldr	r3, [sp, #4]
+	strhih	r1, [sl, r2]	@ movhi
+	mov	r2, #3904
+	ldrh	r2, [sl, r2]
+	mul	r1, fp, r9
+	rsb	r2, r2, r6
+	mov	r6, r6, asl #6
+	mul	r2, r2, r5
+	mul	r2, r9, r2
+	mul	r3, r3, r2
+	mov	r3, r3, asr #11
+	str	r3, [sl, #3928]
+	movw	sl, #3906
+	ldrh	r0, [r4, sl]
+	mov	r0, r0, asl #3
+	bl	__aeabi_idiv
+	movw	r3, #3932
+	uxth	r0, r0
+	strh	r0, [r4, r3]	@ movhi
+	cmp	r0, #4
+	ldr	r4, .L376
+	ldrls	r2, .L376
+	movls	r1, #4
+	strlsh	r1, [r2, r3]	@ movhi
+	cmp	r8, #0
+	mov	r1, r5
+	movne	r3, #640
+	strneh	r3, [r4, sl]	@ movhi
+	ldrh	r2, [r4, sl]
+	movw	r3, #3934
+	mov	r2, r2, asr r7
+	add	r7, r7, #9
+	mov	r6, r6, asr r7
+	add	r2, r2, #2
+	strh	r2, [r4, r3]	@ movhi
+	mov	r3, #3936
+	uxth	r6, r6
+	strh	r6, [r4, r3]	@ movhi
+	mul	r3, r5, r6
+	add	r6, r6, #8
+	str	r3, [r4, #3940]
+	movw	r3, #3932
+	ldrh	r0, [r4, r3]
+	bl	__aeabi_uidiv
+	cmp	r5, #1
+	ldreq	r3, .L376
+	uxtah	r6, r6, r0
+	str	r6, [r4, #3840]
+	ldr	r4, .L376
+	addeq	r6, r6, #4
+	streq	r6, [r3, #3840]
+	ldr	r0, [r4, #3840]
+	uxth	r0, r0
+	bl	FtlSysBlkNumInit
+	ldr	r3, [r4, #3840]
+	ldr	r6, [r4, #3856]
+	mov	r0, #2048
+	str	r3, [r4, #3944]
+	movw	r3, #3912
+	ldrh	r3, [r4, r3]
+	mov	r6, r6, asl #2
+	mul	r6, r3, r6
+	mov	r3, #3920
+	ldrh	r3, [r4, r3]
+	add	r3, r3, #9
+	mov	r6, r6, lsr r3
+	movw	r3, #3948
+	add	r6, r6, #2
+	uxth	r6, r6
+	strh	r6, [r4, r3]	@ movhi
+	movw	r3, #3918
+	ldrh	r5, [r4, r3]
+	mov	r1, r5
+	bl	__aeabi_idiv
+	movw	r3, #3950
+	ldrb	ip, [r4, #928]	@ zero_extendqisi2
+	ldr	r1, [r4, #3940]
+	cmp	ip, #0
+	strh	r0, [r4, r3]	@ movhi
+	mov	r3, #0
+	str	r3, [r4, #3952]
+	movw	r3, #3932
+	ldrh	r0, [r4, r3]
+	add	r2, r0, #3
+	strh	r2, [r4, r3]	@ movhi
+	add	r2, r1, #3
+	str	r2, [r4, #3940]
+	addne	r0, r0, #4
+	addne	r1, r1, #5
+	strneh	r0, [r4, r3]	@ movhi
+	strne	r1, [r4, #3940]
+	bne	.L373
+.L372:
+	cmp	r2, #7
+	movls	r3, #8
+	strls	r3, [r4, #3940]
+.L373:
+	movw	r3, #3956
+	mov	r2, #0
+	strh	r2, [r4, r3]	@ movhi
+	movw	r2, #3852
+	ldrh	r2, [r4, r2]
+	mov	r0, #0
+	mov	r1, r2, lsr #3
+	add	r2, r1, r2, asl #1
+	add	r2, r2, #52
+	add	r6, r2, r6, asl #2
+	cmp	r6, r5, asl #9
+	ldrcc	r2, .L376
+	movcc	r1, #1
+	strcch	r1, [r2, r3]	@ movhi
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L377:
+	.align	2
+.L376:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3870
+	.fnend
+	.size	FtlConstantsInit, .-FtlConstantsInit
+	.align	2
+	.global	IsBlkInVendorPart
+	.type	IsBlkInVendorPart, %function
+IsBlkInVendorPart:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L385
+	movw	r2, #3958
+	ldrh	r2, [r3, r2]
+	cmp	r2, #0
+	beq	.L383
+	movw	r2, #3932
+	ldrh	r1, [r3, r2]
+	ldr	r2, [r3, #3960]
+	mov	r3, #0
+	b	.L380
+.L382:
+	ldrh	ip, [r2], #2
+	cmp	ip, r0
+	beq	.L384
+	add	r3, r3, #1
+	uxth	r3, r3
+.L380:
+	cmp	r3, r1
+	bne	.L382
+	mov	r0, #0
+	bx	lr
+.L384:
+	mov	r0, #1
+	bx	lr
+.L383:
+	mov	r0, r2
+	bx	lr
+.L386:
+	.align	2
+.L385:
+	.word	.LANCHOR0
+	.fnend
+	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
+	.align	2
+	.global	FtlCacheMetchLpa
+	.type	FtlCacheMetchLpa, %function
+FtlCacheMetchLpa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L395
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r3, [r2, #3964]
+	cmp	r3, #0
+	beq	.L392
+	ldr	ip, [r2, #3968]
+	mov	r2, #0
+.L391:
+	ldr	r4, [ip, #16]
+	cmp	r4, r0
+	bcc	.L389
+	cmp	r4, r1
+	bls	.L393
+.L389:
+	add	r2, r2, #1
+	add	ip, ip, #36
+	cmp	r2, r3
+	bne	.L391
+	mov	r0, #0
+	ldmfd	sp!, {r4, pc}
+.L393:
+	mov	r0, #1
+	ldmfd	sp!, {r4, pc}
+.L392:
+	mov	r0, r3
+	ldmfd	sp!, {r4, pc}
+.L396:
+	.align	2
+.L395:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
+	.align	2
+	.global	FtlGetCap
+	.type	FtlGetCap, %function
+FtlGetCap:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L398
+	ldr	r0, [r3, #3952]
+	bx	lr
+.L399:
+	.align	2
+.L398:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetCap, .-FtlGetCap
+	.align	2
+	.global	ftl_get_density
+	.type	ftl_get_density, %function
+ftl_get_density:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L401
+	ldr	r0, [r3, #3952]
+	bx	lr
+.L402:
+	.align	2
+.L401:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_get_density, .-ftl_get_density
+	.align	2
+	.global	FtlGetLpn
+	.type	FtlGetLpn, %function
+FtlGetLpn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L404
+	ldr	r0, [r3, #3972]
+	bx	lr
+.L405:
+	.align	2
+.L404:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetLpn, .-FtlGetLpn
+	.align	2
+	.global	FtlBbmMapBadBlock
+	.type	FtlBbmMapBadBlock, %function
+FtlBbmMapBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
+	.save {r0, r1, r4, r5, r6, lr}
+	movw	r3, #3908
+	ldr	r4, .L407
+	mov	r5, r0
+	ldrh	r6, [r4, r3]
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	uxth	r2, r0
+	mls	r3, r6, r2, r5
+	add	r1, r4, r2, asl #2
+	mov	r6, #1
+	ldr	r0, [r1, #4004]
+	uxth	r3, r3
+	and	r1, r3, #31
+	mov	ip, r3, lsr #5
+	ldr	lr, [r0, ip, asl #2]
+	orr	r1, lr, r6, asl r1
+	str	r1, [r0, ip, asl #2]
+	str	r1, [sp, #0]
+	mov	r1, r5
+	ldr	r0, .L407+4
+	bl	printk
+	movw	r3, #3982
+	ldrh	r2, [r4, r3]
+	mov	r0, #0
+	add	r2, r2, r6
+	strh	r2, [r4, r3]	@ movhi
+	ldmfd	sp!, {r2, r3, r4, r5, r6, pc}
+.L408:
+	.align	2
+.L407:
+	.word	.LANCHOR0
+	.word	.LC3
+	.fnend
+	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
+	.global	__aeabi_uidivmod
+	.align	2
+	.global	FtlBbmIsBadBlock
+	.type	FtlBbmIsBadBlock, %function
+FtlBbmIsBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	movw	r3, #3908
+	ldr	r5, .L410
+	mov	r7, r0
+	ldrh	r6, [r5, r3]
+	mov	r1, r6
+	bl	__aeabi_uidivmod
+	mov	r0, r7
+	uxth	r4, r1
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	mov	r2, r4, lsr #5
+	and	r4, r4, #31
+	uxth	r0, r0
+	add	r5, r5, r0, asl #2
+	ldr	r3, [r5, #4004]
+	ldr	r0, [r3, r2, asl #2]
+	mov	r0, r0, lsr r4
+	and	r0, r0, #1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L411:
+	.align	2
+.L410:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
+	.align	2
+	.global	FtlBbtInfoPrint
+	.type	FtlBbtInfoPrint, %function
+FtlBbtInfoPrint:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
+	.align	2
+	.global	FtlBbtCalcTotleCnt
+	.type	FtlBbtCalcTotleCnt, %function
+FtlBbtCalcTotleCnt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, #0
+	mov	r5, r4
+	ldr	r6, .L417
+	movw	r8, #3908
+	movw	r7, #3866
+	b	.L414
+.L416:
+	mov	r0, r5
+	add	r5, r5, #1
+	bl	FtlBbmIsBadBlock
+	uxth	r5, r5
+	cmp	r0, #0
+	addne	r4, r4, #1
+	uxthne	r4, r4
+.L414:
+	ldrh	r3, [r6, r8]
+	ldrh	r2, [r6, r7]
+	mul	r3, r2, r3
+	cmp	r5, r3
+	blt	.L416
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L418:
+	.align	2
+.L417:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
+	.align	2
+	.global	V2P_block
+	.type	V2P_block, %function
+V2P_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	movw	r3, #3868
+	ldr	r5, .L420
+	mov	r7, r1
+	mov	r6, r0
+	ldrh	r4, [r5, r3]
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	movw	r3, #3908
+	ldrh	r5, [r5, r3]
+	mov	r1, r4
+	mul	r7, r4, r7
+	mla	r5, r5, r0, r7
+	mov	r0, r6
+	bl	__aeabi_uidivmod
+	add	r1, r5, r1
+	uxth	r0, r1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L421:
+	.align	2
+.L420:
+	.word	.LANCHOR0
+	.fnend
+	.size	V2P_block, .-V2P_block
+	.align	2
+	.global	P2V_plane
+	.type	P2V_plane, %function
+P2V_plane:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L423
+	movw	r2, #3868
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldrh	r4, [r3, r2]
+	add	r2, r2, #40
+	ldrh	r1, [r3, r2]
+	bl	__aeabi_uidiv
+	mov	r1, r4
+	mul	r5, r0, r4
+	mov	r0, r6
+	bl	__aeabi_uidivmod
+	add	r1, r5, r1
+	uxth	r0, r1
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L424:
+	.align	2
+.L423:
+	.word	.LANCHOR0
+	.fnend
+	.size	P2V_plane, .-P2V_plane
+	.align	2
+	.global	P2V_block_in_plane
+	.type	P2V_block_in_plane, %function
+P2V_block_in_plane:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	movw	r3, #3908
+	ldr	r4, .L426
+	ldrh	r1, [r4, r3]
+	bl	__aeabi_uidivmod
+	movw	r3, #3868
+	uxth	r0, r1
+	ldrh	r1, [r4, r3]
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	ldmfd	sp!, {r4, pc}
+.L427:
+	.align	2
+.L426:
+	.word	.LANCHOR0
+	.fnend
+	.size	P2V_block_in_plane, .-P2V_block_in_plane
+	.align	2
+	.global	ftl_cmp_data_ver
+	.type	ftl_cmp_data_ver, %function
+ftl_cmp_data_ver:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r0, r1
+	bls	.L429
+	rsb	r0, r1, r0
+	cmp	r0, #-2147483648
+	movhi	r0, #0
+	movls	r0, #1
+	bx	lr
+.L429:
+	rsb	r0, r0, r1
+	cmp	r0, #-2147483648
+	movls	r0, #0
+	movhi	r0, #1
+	bx	lr
+	.fnend
+	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
+	.align	2
+	.global	FtlFreeSysBlkQueueEmpty
+	.type	FtlFreeSysBlkQueueEmpty, %function
+FtlFreeSysBlkQueueEmpty:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L432
+	movw	r3, #4042
+	ldrh	r0, [r2, r3]
+	rsbs	r0, r0, #1
+	movcc	r0, #0
+	bx	lr
+.L433:
+	.align	2
+.L432:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
+	.align	2
+	.global	FtlFreeSysBlkQueueFull
+	.type	FtlFreeSysBlkQueueFull, %function
+FtlFreeSysBlkQueueFull:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L435
+	movw	r3, #4042
+	ldrh	r0, [r2, r3]
+	sub	r2, r0, #1024
+	rsbs	r0, r2, #0
+	adc	r0, r0, r2
+	bx	lr
+.L436:
+	.align	2
+.L435:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
+	.align	2
+	.global	FtlFreeSysBlkQueueIn
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L440
+	movw	r3, #4042
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	ldrh	r3, [r2, r3]
+	cmp	r3, #1024
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	cmp	r1, #0
+	beq	.L439
+	ldr	r4, .L440+4
+	ldr	r3, [r4, #-2092]
+	cmp	r3, #0
+	bne	.L439
+	bl	P2V_block_in_plane
+	mov	r1, #1
+	mov	r3, r5, asl #10
+	mov	r2, r1
+	mov	r6, r0
+	ldr	r0, [r4, #-2088]
+	mov	r6, r6, asl #1
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r3, [r4, #-2084]
+	ldrh	r2, [r3, r6]
+	add	r2, r2, #1
+	strh	r2, [r3, r6]	@ movhi
+	ldr	r3, [r4, #-2080]
+	add	r3, r3, #1
+	str	r3, [r4, #-2080]
+.L439:
+	ldr	r3, .L440
+	movw	r2, #4042
+	movw	r0, #4036
+	ldrh	r1, [r3, r2]
+	add	r1, r1, #1
+	strh	r1, [r3, r2]	@ movhi
+	movw	r2, #4040
+	ldrh	r1, [r3, r2]
+	add	ip, r1, #4
+	add	r1, r1, #1
+	bic	r1, r1, #64512
+	add	ip, r3, ip, asl #1
+	strh	r5, [ip, r0]	@ movhi
+	strh	r1, [r3, r2]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L441:
+	.align	2
+.L440:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+	.align	2
+	.global	FtlFreeSysBLkSort
+	.type	FtlFreeSysBLkSort, %function
+FtlFreeSysBLkSort:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L445
+	mov	r0, #0
+	ldr	r2, .L445+4
+	ldr	r1, .L445+8
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	ldrh	r4, [r2, r3]
+	movw	r3, #4038
+	ldrh	r2, [r1, r3]
+	add	r3, r3, #2
+	and	r4, r4, #31
+	ldrh	r3, [r1, r3]
+	b	.L443
+.L444:
+	add	ip, r1, r2, asl #1
+	add	r2, r2, #1
+	add	ip, ip, #4032
+	add	r0, r0, #1
+	mov	r2, r2, asl #22
+	ldrh	r5, [ip, #12]
+	add	ip, r1, r3, asl #1
+	add	r3, r3, #1
+	add	ip, ip, #4032
+	mov	r2, r2, lsr #22
+	uxth	r0, r0
+	mov	r3, r3, asl #22
+	strh	r5, [ip, #12]	@ movhi
+	mov	r3, r3, lsr #22
+.L443:
+	cmp	r0, r4
+	ldr	ip, .L445+8
+	blt	.L444
+	movw	r1, #4038
+	strh	r2, [ip, r1]	@ movhi
+	movw	r2, #4040
+	strh	r3, [ip, r2]	@ movhi
+	ldmfd	sp!, {r4, r5, pc}
+.L446:
+	.align	2
+.L445:
+	.word	-2048
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
+	.align	2
+	.global	remove_from_free_sys_Queue
+	.type	remove_from_free_sys_Queue, %function
+remove_from_free_sys_Queue:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L453
+	movw	r2, #4042
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r1, r0
+	ldrh	r0, [r3, r2]
+	cmp	r0, #0
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	movw	r2, #4038
+	mov	r5, #0
+	ldrh	ip, [r3, r2]
+	b	.L449
+.L451:
+	add	r2, r5, ip
+	ldr	r4, .L453
+	movw	r6, #4036
+	mov	r2, r2, asl #22
+	add	r2, r3, r2, lsr #21
+	add	r2, r2, #4032
+	add	r2, r2, #12
+	ldrh	r2, [r2, #0]
+	cmp	r2, r1
+	bne	.L450
+	ldr	r0, .L453+4
+	bl	printk
+	movw	r2, #4038
+	ldrh	r3, [r4, r2]
+	mov	r0, #1
+	add	r1, r3, #4
+	add	r5, r5, r3
+	add	r3, r3, #1
+	add	r1, r4, r1, asl #1
+	mov	r5, r5, asl #22
+	bic	r3, r3, #64512
+	ldrh	r1, [r1, r6]
+	add	r5, r4, r5, lsr #21
+	add	r5, r5, #8
+	strh	r1, [r5, r6]	@ movhi
+	strh	r3, [r4, r2]	@ movhi
+	movw	r3, #4042
+	ldrh	r2, [r4, r3]
+	sub	r2, r2, #1
+	strh	r2, [r4, r3]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L450:
+	add	r5, r5, #1
+.L449:
+	cmp	r5, r0
+	bcc	.L451
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L454:
+	.align	2
+.L453:
+	.word	.LANCHOR0
+	.word	.LC4
+	.fnend
+	.size	remove_from_free_sys_Queue, .-remove_from_free_sys_Queue
+	.align	2
+	.global	FtlFreeSysBlkQueueOut
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	movw	r7, #4042
+	ldr	r4, .L462
+	movw	r8, #4038
+.L456:
+	ldrh	r1, [r4, r7]
+	cmp	r1, #0
+	beq	.L457
+	ldr	r9, .L462+4
+	sub	r1, r1, #1
+	ldrh	r2, [r4, r8]
+	ldr	r6, [r9, #-2092]
+	add	r3, r4, r2, asl #1
+	add	r2, r2, #1
+	add	r3, r3, #4032
+	cmp	r6, #0
+	bic	r2, r2, #64512
+	ldrh	r5, [r3, #12]
+	strh	r1, [r4, r7]	@ movhi
+	strh	r2, [r4, r8]	@ movhi
+	bne	.L458
+	mov	r0, r5
+	bl	P2V_block_in_plane
+	mov	r3, r5, asl #10
+	mov	sl, r0
+	ldr	r0, [r9, #-2088]
+	str	r3, [r0, #4]
+	ldrb	r3, [r4, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L459
+	mov	r1, r6
+	mov	r2, #1
+	bl	FlashEraseBlocks
+.L459:
+	ldr	r6, .L462+4
+	mov	r1, #1
+	mov	r2, r1
+	mov	sl, sl, asl #1
+	ldr	r0, [r6, #-2088]
+	bl	FlashEraseBlocks
+	ldr	r3, [r6, #-2084]
+	ldrh	r2, [r3, sl]
+	add	r2, r2, #1
+	strh	r2, [r3, sl]	@ movhi
+	ldr	r3, [r6, #-2080]
+	add	r3, r3, #1
+	str	r3, [r6, #-2080]
+	b	.L458
+.L457:
+	ldr	r0, .L462+8
+	bl	printk
+.L460:
+	b	.L460
+.L458:
+	cmp	r5, #0
+	bne	.L461
+	mov	r1, r5
+	ldrh	r2, [r4, r7]
+	ldr	r0, .L462+12
+	bl	printk
+	b	.L456
+.L461:
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L463:
+	.align	2
+.L462:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC5
+	.word	.LC6
+	.fnend
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
+	.align	2
+	.global	insert_data_list
+	.type	insert_data_list, %function
+insert_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L479
+	movw	r3, #3852
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldrh	r3, [r2, r3]
+	cmp	r3, r0
+	bls	.L465
+	ldr	r1, .L479+4
+	mov	ip, #6
+	mul	ip, ip, r0
+	mvn	r6, #0
+	ldr	r4, [r1, #-2028]
+	mov	r5, r1
+	add	r2, r4, ip
+	strh	r6, [r2, #2]	@ movhi
+	strh	r6, [r4, ip]	@ movhi
+	ldr	r3, [r1, #-2024]
+	cmp	r3, #0
+	beq	.L478
+.L466:
+	ldr	r7, [r1, #-2020]
+	mov	r8, r0, asl #1
+	ldrh	r1, [r2, #4]
+	ldr	r9, .L479
+	ldrh	sl, [r7, r8]
+	cmp	r1, #0
+	ldr	fp, [r5, #-2084]
+	mulne	r6, r1, sl
+	ldr	r1, [r5, #-2028]
+	ldr	sl, .L479+8
+	mov	r5, #0
+	add	r8, fp, r8
+	str	r8, [sp, #12]
+	str	r1, [sp, #4]
+	rsb	r1, r1, r3
+	mov	r1, r1, asr #1
+	mul	r1, sl, r1
+	movw	sl, #3852
+	ldrh	sl, [r9, sl]
+	str	sl, [sp, #8]
+	uxth	r1, r1
+.L473:
+	add	r5, r5, #1
+	ldr	r8, [sp, #8]
+	uxth	r5, r5
+	cmp	r5, r8
+	bhi	.L465
+	cmp	r0, r1
+	beq	.L465
+	mov	r9, r1, asl #1
+	ldrh	r8, [r3, #4]
+	ldrh	sl, [r7, r9]
+	cmp	r8, #0
+	mvneq	r8, #0
+	mulne	r8, r8, sl
+	cmp	r8, r6
+	bne	.L469
+	ldrh	sl, [fp, r9]
+	ldr	r9, [sp, #12]
+	ldrh	r8, [r9, #0]
+	cmp	sl, r8
+	bcc	.L471
+	b	.L470
+.L469:
+	bhi	.L470
+.L471:
+	ldrh	r8, [r3, #0]
+	movw	sl, #65535
+	cmp	r8, sl
+	streqh	r1, [r2, #2]	@ movhi
+	streqh	r0, [r3, #0]	@ movhi
+	ldreq	r3, .L479+4
+	streq	r2, [r3, #-2016]
+	beq	.L465
+.L472:
+	ldr	r9, [sp, #4]
+	mov	r1, #6
+	mla	r3, r1, r8, r9
+	mov	r1, r8
+	b	.L473
+.L470:
+	strh	r1, [r4, ip]	@ movhi
+	ldrh	r1, [r3, #2]
+	strh	r1, [r2, #2]	@ movhi
+	ldr	r1, .L479+4
+	ldr	ip, [r1, #-2024]
+	cmp	r3, ip
+	bne	.L474
+	strh	r0, [r3, #2]	@ movhi
+.L478:
+	str	r2, [r1, #-2024]
+	b	.L465
+.L474:
+	ldrh	r2, [r3, #2]
+	mov	ip, #6
+	ldr	r1, [r1, #-2028]
+	mul	r2, ip, r2
+	strh	r0, [r1, r2]	@ movhi
+	strh	r0, [r3, #2]	@ movhi
+.L465:
+	mov	r0, #0
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L480:
+	.align	2
+.L479:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	insert_data_list, .-insert_data_list
+	.align	2
+	.global	INSERT_DATA_LIST
+	.type	INSERT_DATA_LIST, %function
+INSERT_DATA_LIST:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	insert_data_list
+	ldr	r2, .L482
+	ldr	r3, .L482+4
+	ldrh	r1, [r2, r3]
+	add	r1, r1, #1
+	strh	r1, [r2, r3]	@ movhi
+	ldmfd	sp!, {r3, pc}
+.L483:
+	.align	2
+.L482:
+	.word	.LANCHOR2
+	.word	-2012
+	.fnend
+	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
+	.align	2
+	.global	insert_free_list
+	.type	insert_free_list, %function
+insert_free_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	movw	r6, #65535
+	cmp	r0, r6
+	beq	.L485
+	ldr	r1, .L492
+	mov	r5, #6
+	mul	ip, r5, r0
+	mvn	r3, #0
+	ldr	r4, [r1, #-2028]
+	add	r2, r4, ip
+	strh	r3, [r2, #2]	@ movhi
+	strh	r3, [r4, ip]	@ movhi
+	ldr	r3, [r1, #-2008]
+	cmp	r3, #0
+	beq	.L491
+.L486:
+	ldr	sl, [r1, #-2028]
+	mov	r8, r0, asl #1
+	ldr	r7, [r1, #-2084]
+	rsb	r1, sl, r3
+	ldr	r9, .L492+4
+	mov	r1, r1, asr #1
+	ldrh	r8, [r7, r8]
+	mul	r1, r9, r1
+	mov	r9, r5
+	uxth	r1, r1
+.L489:
+	mov	r5, r1, asl #1
+	ldrh	r5, [r7, r5]
+	cmp	r5, r8
+	bcs	.L487
+	ldrh	r5, [r3, #0]
+	cmp	r5, r6
+	streqh	r1, [r2, #2]	@ movhi
+	streqh	r0, [r3, #0]	@ movhi
+	beq	.L485
+.L488:
+	mla	r3, r9, r5, sl
+	mov	r1, r5
+	b	.L489
+.L487:
+	ldrh	r5, [r3, #2]
+	strh	r5, [r2, #2]	@ movhi
+	strh	r1, [r4, ip]	@ movhi
+	ldr	r1, .L492
+	ldr	ip, [r1, #-2008]
+	cmp	r3, ip
+	bne	.L490
+	strh	r0, [r3, #2]	@ movhi
+.L491:
+	str	r2, [r1, #-2008]
+	b	.L485
+.L490:
+	ldrh	r2, [r3, #2]
+	mov	ip, #6
+	ldr	r1, [r1, #-2028]
+	mul	r2, ip, r2
+	strh	r0, [r1, r2]	@ movhi
+	strh	r0, [r3, #2]	@ movhi
+.L485:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L493:
+	.align	2
+.L492:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	insert_free_list, .-insert_free_list
+	.align	2
+	.global	INSERT_FREE_LIST
+	.type	INSERT_FREE_LIST, %function
+INSERT_FREE_LIST:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	insert_free_list
+	ldr	r2, .L495
+	ldr	r3, .L495+4
+	ldrh	r1, [r2, r3]
+	add	r1, r1, #1
+	strh	r1, [r2, r3]	@ movhi
+	ldmfd	sp!, {r3, pc}
+.L496:
+	.align	2
+.L495:
+	.word	.LANCHOR2
+	.word	-2004
+	.fnend
+	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
+	.align	2
+	.global	List_remove_node
+	.type	List_remove_node, %function
+List_remove_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L502
+	mov	r2, #6
+	mul	r1, r2, r1
+	ldr	r3, [ip, #-2028]
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	add	r5, r3, r1
+	ldr	r4, [r0, #0]
+	movw	r6, #65535
+	cmp	r5, r4
+	ldrh	r4, [r3, r1]
+	bne	.L498
+	cmp	r4, r6
+	mlane	r2, r2, r4, r3
+	moveq	r2, #0
+	streq	r2, [r0, #0]
+	strne	r2, [r0, #0]
+	mvnne	r0, #0
+	strneh	r0, [r2, #2]	@ movhi
+	b	.L500
+.L498:
+	cmp	r4, r6
+	ldrh	r0, [r5, #2]
+	bne	.L501
+	cmp	r0, r4
+	mulne	r2, r2, r0
+	mvnne	r0, #0
+	strneh	r0, [r3, r2]	@ movhi
+	b	.L500
+.L501:
+	mla	r4, r2, r4, r3
+	strh	r0, [r4, #2]	@ movhi
+	ldrh	r6, [r5, #2]
+	ldrh	r4, [r3, r1]
+	ldr	r0, [ip, #-2028]
+	mul	r2, r2, r6
+	strh	r4, [r0, r2]	@ movhi
+.L500:
+	mvn	r2, #0
+	mov	r0, #0
+	strh	r2, [r3, r1]	@ movhi
+	strh	r2, [r5, #2]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L503:
+	.align	2
+.L502:
+	.word	.LANCHOR2
+	.fnend
+	.size	List_remove_node, .-List_remove_node
+	.align	2
+	.global	List_pop_index_node
+	.type	List_pop_index_node, %function
+List_pop_index_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r3, [r0, #0]
+	cmp	r3, #0
+	beq	.L509
+	ldr	r2, .L510
+	movw	lr, #65535
+	mov	ip, #6
+	ldr	r4, [r2, #-2028]
+	b	.L506
+.L508:
+	mla	r3, ip, r2, r4
+	sub	r1, r1, #1
+	uxth	r1, r1
+.L506:
+	cmp	r1, #0
+	beq	.L507
+	ldrh	r2, [r3, #0]
+	cmp	r2, lr
+	bne	.L508
+.L507:
+	rsb	r4, r4, r3
+	ldr	r3, .L510+4
+	mov	r4, r4, asr #1
+	mul	r4, r3, r4
+	uxth	r4, r4
+	mov	r1, r4
+	bl	List_remove_node
+	mov	r0, r4
+	ldmfd	sp!, {r4, pc}
+.L509:
+	movw	r0, #65535
+	ldmfd	sp!, {r4, pc}
+.L511:
+	.align	2
+.L510:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	List_pop_index_node, .-List_pop_index_node
+	.align	2
+	.global	List_get_gc_head_node
+	.type	List_get_gc_head_node, %function
+List_get_gc_head_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L518
+	ldr	r3, [r2, #-2024]
+	cmp	r3, #0
+	beq	.L517
+	ldr	r2, [r2, #-2028]
+	movw	r1, #65535
+	mov	ip, #6
+	b	.L514
+.L516:
+	mla	r3, ip, r3, r2
+	sub	r0, r0, #1
+	uxth	r0, r0
+.L514:
+	cmp	r0, #0
+	beq	.L515
+	ldrh	r3, [r3, #0]
+	cmp	r3, r1
+	bne	.L516
+	mov	r0, r1
+	bx	lr
+.L515:
+	rsb	r3, r2, r3
+	ldr	r0, .L518+4
+	mov	r3, r3, asr #1
+	mul	r0, r0, r3
+	uxth	r0, r0
+	bx	lr
+.L517:
+	movw	r0, #65535
+	bx	lr
+.L519:
+	.align	2
+.L518:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	List_get_gc_head_node, .-List_get_gc_head_node
+	.align	2
+	.global	List_update_data_list
+	.type	List_update_data_list, %function
+List_update_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r3, .L527
+	ldr	r2, .L527+4
+	ldrh	r2, [r3, r2]
+	cmp	r2, r0
+	beq	.L521
+	ldr	r2, .L527+8
+	ldrh	r2, [r3, r2]
+	cmp	r2, r0
+	beq	.L521
+	ldr	r2, .L527+12
+	ldrh	r2, [r3, r2]
+	cmp	r2, r0
+	beq	.L521
+	mov	r5, #6
+	ldr	r2, [r3, #-2028]
+	mul	r5, r5, r0
+	ldr	r0, [r3, #-2024]
+	add	r1, r2, r5
+	cmp	r1, r0
+	beq	.L521
+	ldr	ip, [r3, #-2020]
+	mov	r3, r4, asl #1
+	ldrh	r0, [ip, r3]
+	ldrh	r3, [r1, #4]
+	cmp	r3, #0
+	mulne	r0, r3, r0
+	ldrh	r3, [r1, #2]
+	mvneq	r0, #0
+	movw	r1, #65535
+	cmp	r3, r1
+	bne	.L523
+	ldrh	r1, [r2, r5]
+	cmp	r1, r3
+	beq	.L521
+.L523:
+	mov	r1, #6
+	mla	r3, r1, r3, r2
+	ldr	r1, .L527+16
+	rsb	r2, r2, r3
+	mov	r2, r2, asr #1
+	ldrh	r3, [r3, #4]
+	mul	r2, r1, r2
+	cmp	r3, #0
+	mvneq	r3, #0
+	uxth	r2, r2
+	mov	r2, r2, asl #1
+	ldrh	r2, [ip, r2]
+	mulne	r3, r3, r2
+	cmp	r0, r3
+	bcs	.L521
+	ldr	r0, .L527+20
+	mov	r1, r4
+	bl	List_remove_node
+	ldr	r5, .L527
+	ldr	r3, .L527+24
+	mov	r0, r4
+	ldrh	r2, [r5, r3]
+	sub	r2, r2, #1
+	strh	r2, [r5, r3]	@ movhi
+	bl	INSERT_DATA_LIST
+.L521:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L528:
+	.align	2
+.L527:
+	.word	.LANCHOR2
+	.word	-2000
+	.word	-1952
+	.word	-1904
+	.word	-1431655765
+	.word	.LANCHOR2-2024
+	.word	-2012
+	.fnend
+	.size	List_update_data_list, .-List_update_data_list
+	.align	2
+	.global	ftl_map_blk_alloc_new_blk
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r4, r0
+	ldrh	r2, [r0, #10]
+	mov	r5, #0
+	ldr	r3, [r0, #12]
+	b	.L530
+.L535:
+	mov	r7, r3
+	add	r3, r3, #2
+	ldrh	r6, [r7, #0]
+	cmp	r6, #0
+	bne	.L531
+	bl	FtlFreeSysBlkQueueOut
+	movw	r3, #65533
+	sub	r2, r0, #1
+	mov	r1, r0
+	strh	r0, [r7, #0]	@ movhi
+	uxth	r2, r2
+	cmp	r2, r3
+	bls	.L532
+	ldr	r2, .L536
+	movw	r3, #4042
+	ldr	r0, .L536+4
+	ldrh	r2, [r2, r3]
+	bl	printk
+.L533:
+	b	.L533
+.L532:
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	add	r3, r3, #1
+	str	r3, [r4, #28]
+	ldrh	r3, [r4, #8]
+	strh	r5, [r4, #0]	@ movhi
+	add	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	b	.L534
+.L531:
+	add	r5, r5, #1
+	uxth	r5, r5
+.L530:
+	cmp	r5, r2
+	bne	.L535
+.L534:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L537:
+	.align	2
+.L536:
+	.word	.LANCHOR0
+	.word	.LC7
+	.fnend
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
+	.align	2
+	.global	select_l2p_ram_region
+	.type	select_l2p_ram_region, %function
+select_l2p_ram_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L550
+	movw	r3, #3950
+	stmfd	sp!, {r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	movw	r1, #65535
+	ldrh	r3, [r2, r3]
+	ldr	r2, .L550+4
+	ldr	ip, [r2, #-1856]
+	mov	r2, #0
+	mov	r0, r2
+	b	.L539
+.L541:
+	add	r2, r2, #12
+	add	r4, ip, r2
+	ldrh	r4, [r4, #-12]
+	cmp	r4, r1
+	ldmeqfd	sp!, {r4, r5, r6, r7, pc}
+	add	r0, r0, #1
+	uxth	r0, r0
+.L539:
+	cmp	r0, r3
+	bne	.L541
+	mov	r1, #0
+	mov	r0, r3
+	mov	r5, #-2147483648
+	mov	r2, r1
+	b	.L542
+.L544:
+	add	r4, ip, r1
+	ldr	r4, [r4, #4]
+	cmp	r4, #0
+	blt	.L543
+	cmp	r4, r5
+	movcc	r5, r4
+	movcc	r0, r2
+.L543:
+	add	r2, r2, #1
+	add	r1, r1, #12
+	uxth	r2, r2
+.L542:
+	cmp	r2, r3
+	bne	.L544
+	cmp	r0, r3
+	ldmccfd	sp!, {r4, r5, r6, r7, pc}
+	ldr	r2, .L550+8
+	mov	r0, r3
+	ldr	r1, .L550+4
+	mvn	r4, #0
+	ldrh	r6, [r1, r2]
+	mov	r2, #0
+	mov	r1, r2
+	b	.L545
+.L547:
+	add	r5, ip, r2
+	ldr	r5, [r5, #4]
+	cmp	r5, r4
+	bcs	.L546
+	ldrh	r7, [ip, r2]
+	cmp	r7, r6
+	movne	r4, r5
+	movne	r0, r1
+.L546:
+	add	r1, r1, #1
+	add	r2, r2, #12
+	uxth	r1, r1
+.L545:
+	cmp	r1, r3
+	bne	.L547
+	ldmfd	sp!, {r4, r5, r6, r7, pc}
+.L551:
+	.align	2
+.L550:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1852
+	.fnend
+	.size	select_l2p_ram_region, .-select_l2p_ram_region
+	.align	2
+	.global	FtlUpdateVaildLpn
+	.type	FtlUpdateVaildLpn, %function
+FtlUpdateVaildLpn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L558
+	ldr	r2, .L558+4
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	ldrh	r1, [r2, r3]
+	cmp	r1, #4
+	add	ip, r1, #1
+	mov	r1, r3
+	strh	ip, [r2, r3]	@ movhi
+	bhi	.L553
+	cmp	r0, #0
+	ldmeqfd	sp!, {r4, r5, pc}
+.L553:
+	ldr	r0, .L558+8
+	mov	r3, #0
+	strh	r3, [r2, r1]	@ movhi
+	movw	r1, #3852
+	str	r3, [r2, #-1848]
+	movw	ip, #65535
+	ldrh	r4, [r0, r1]
+	ldr	r1, [r2, #-2020]
+	ldr	r2, .L558+4
+	b	.L555
+.L557:
+	ldrh	r0, [r1], #2
+	add	r3, r3, #1
+	cmp	r0, ip
+	uxth	r3, r3
+	ldrne	r5, [r2, #-1848]
+	addne	r0, r0, r5
+	strne	r0, [r2, #-1848]
+.L555:
+	cmp	r3, r4
+	bne	.L557
+	ldmfd	sp!, {r4, r5, pc}
+.L559:
+	.align	2
+.L558:
+	.word	-1850
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
+	.align	2
+	.global	ftl_set_blk_mode
+	.type	ftl_set_blk_mode, %function
+ftl_set_blk_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L564
+	mov	r2, r0, lsr #5
+	cmp	r1, #0
+	and	r0, r0, #31
+	uxth	r2, r2
+	mov	ip, #1
+	ldr	r3, [r3, #-1844]
+	ldr	r1, [r3, r2, asl #2]
+	orrne	r0, r1, ip, asl r0
+	biceq	r0, r1, ip, asl r0
+	str	r0, [r3, r2, asl #2]
+	bx	lr
+.L565:
+	.align	2
+.L564:
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
+	.align	2
+	.global	ftl_get_blk_mode
+	.type	ftl_get_blk_mode, %function
+ftl_get_blk_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L567
+	mov	r2, r0, lsr #5
+	and	r0, r0, #31
+	ldr	r3, [r3, #-1844]
+	ldr	r3, [r3, r2, asl #2]
+	mov	r0, r3, lsr r0
+	and	r0, r0, #1
+	bx	lr
+.L568:
+	.align	2
+.L567:
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
+	.align	2
+	.global	ftl_sb_update_avl_pages
+	.type	ftl_sb_update_avl_pages, %function
+ftl_sb_update_avl_pages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	ip, .L576
+	mov	r3, #0
+	strh	r3, [r0, #4]	@ movhi
+	movw	r3, #3844
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldrh	r3, [ip, r3]
+	movw	ip, #65535
+	b	.L570
+.L572:
+	add	r4, r0, r2, asl #1
+	add	r2, r2, #1
+	ldrh	r4, [r4, #16]
+	uxth	r2, r2
+	cmp	r4, ip
+	ldrneh	r4, [r0, #4]
+	addne	r4, r4, #1
+	strneh	r4, [r0, #4]	@ movhi
+.L570:
+	cmp	r2, r3
+	bcc	.L572
+	ldr	ip, .L576
+	movw	r2, #3912
+	movw	r4, #65535
+	mvn	r1, r1
+	ldrh	r5, [ip, r2]
+	mov	ip, r0
+	mov	r2, #0
+	b	.L573
+.L575:
+	ldrh	r6, [ip, #16]
+	add	r2, r2, #1
+	add	ip, ip, #2
+	cmp	r6, r4
+	uxth	r2, r2
+	ldrneh	r6, [r0, #4]
+	addne	r6, r5, r6
+	addne	r6, r6, r1
+	strneh	r6, [r0, #4]	@ movhi
+.L573:
+	cmp	r2, r3
+	bne	.L575
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L577:
+	.align	2
+.L576:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
+	.align	2
+	.global	make_superblock
+	.type	make_superblock, %function
+make_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r4, r0
+	mov	r5, #0
+	ldr	r6, .L584
+	strh	r5, [r0, #4]	@ movhi
+	movw	r8, #3844
+	strb	r5, [r4, #7]
+	mvn	r7, #0
+	b	.L579
+.L581:
+	add	r3, r6, r5
+	ldrh	r1, [r4, #0]
+	add	sl, r5, #8
+	add	r5, r5, #1
+	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	sl, sl, asl #1
+	uxth	r5, r5
+	strh	r7, [r4, sl]	@ movhi
+	mov	r9, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	streqh	r9, [r4, sl]	@ movhi
+	ldreqb	r3, [r4, #7]	@ zero_extendqisi2
+	addeq	r3, r3, #1
+	streqb	r3, [r4, #7]
+.L579:
+	ldrh	r2, [r6, r8]
+	ldr	r3, .L584
+	cmp	r2, r5
+	bhi	.L581
+	movw	r1, #3912
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
+	ldrh	r1, [r3, r1]
+	ldr	r3, [r3, #3836]
+	mul	r2, r1, r2
+	strh	r2, [r4, #4]	@ movhi
+	mov	r2, #0
+	cmp	r3, r2
+	strb	r2, [r4, #9]
+	beq	.L582
+	ldr	r2, .L584+4
+	ldrh	r3, [r4, #0]
+	ldr	r2, [r2, #-2084]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #59
+	movls	r3, #1
+	strlsb	r3, [r4, #9]
+.L582:
+	ldr	r3, .L584
+	mov	r0, #0
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
+	cmp	r3, #0
+	movne	r3, #1
+	strneb	r3, [r4, #9]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L585:
+	.align	2
+.L584:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	make_superblock, .-make_superblock
+	.align	2
+	.global	update_multiplier_value
+	.type	update_multiplier_value, %function
+update_multiplier_value:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r4, #0
+	mov	r7, r0
+	mov	r5, r4
+	ldr	r6, .L591
+	movw	sl, #3844
+	movw	r8, #3912
+	b	.L587
+.L589:
+	add	r3, r6, r5
+	mov	r1, r7
+	add	r5, r5, #1
+	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	bl	V2P_block
+	uxth	r5, r5
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	ldreqh	r3, [r6, r8]
+	addeq	r4, r4, r3
+	uxtheq	r4, r4
+.L587:
+	ldrh	r3, [r6, sl]
+	cmp	r3, r5
+	bhi	.L589
+	cmp	r4, #0
+	beq	.L590
+	mov	r1, r4
+	mov	r0, #32768
+	bl	__aeabi_idiv
+	uxth	r4, r0
+.L590:
+	ldr	r3, .L591+4
+	mov	r2, #6
+	mov	r0, #0
+	ldr	r3, [r3, #-2028]
+	mla	r7, r2, r7, r3
+	strh	r4, [r7, #4]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L592:
+	.align	2
+.L591:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	update_multiplier_value, .-update_multiplier_value
+	.align	2
+	.global	GetFreeBlockMinEraseCount
+	.type	GetFreeBlockMinEraseCount, %function
+GetFreeBlockMinEraseCount:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L596
+	ldr	r0, [r3, #-2008]
+	cmp	r0, #0
+	bxeq	lr
+	ldr	r2, [r3, #-2028]
+	rsb	r0, r2, r0
+	ldr	r2, .L596+4
+	mov	r0, r0, asr #1
+	mul	r0, r2, r0
+	ldr	r2, [r3, #-2084]
+	uxth	r0, r0
+	mov	r3, r0, asl #1
+	ldrh	r0, [r2, r3]
+	bx	lr
+.L597:
+	.align	2
+.L596:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
+	.align	2
+	.global	GetFreeBlockMaxEraseCount
+	.type	GetFreeBlockMaxEraseCount, %function
+GetFreeBlockMaxEraseCount:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L605
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	ldr	r3, [r2, #-2008]
+	cmp	r3, #0
+	beq	.L604
+	ldr	r1, .L605+4
+	mov	ip, #7
+	mov	r5, #6
+	movw	r4, #65535
+	ldrh	r1, [r2, r1]
+	mul	r1, ip, r1
+	mov	r1, r1, asr #3
+	cmp	r0, r1
+	uxthgt	r0, r1
+	ldr	r1, [r2, #-2028]
+	ldr	r2, .L605+8
+	rsb	r3, r1, r3
+	mov	r3, r3, asr #1
+	mul	r3, r2, r3
+	mov	r2, #0
+	uxth	r3, r3
+	b	.L601
+.L603:
+	mul	ip, r5, r3
+	ldrh	ip, [r1, ip]
+	cmp	ip, r4
+	beq	.L602
+	add	r2, r2, #1
+	mov	r3, ip
+	uxth	r2, r2
+.L601:
+	cmp	r2, r0
+	bne	.L603
+.L602:
+	ldr	r2, .L605
+	mov	r3, r3, asl #1
+	ldr	r2, [r2, #-2084]
+	ldrh	r0, [r2, r3]
+	ldmfd	sp!, {r4, r5, pc}
+.L604:
+	mov	r0, r3
+	ldmfd	sp!, {r4, r5, pc}
+.L606:
+	.align	2
+.L605:
+	.word	.LANCHOR2
+	.word	-2004
+	.word	-1431655765
+	.fnend
+	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
+	.align	2
+	.global	FtlPrintInfo2buf
+	.type	FtlPrintInfo2buf, %function
+FtlPrintInfo2buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	sl, r0
+	ldr	r5, .L617
+	add	r4, sl, #12
+	.pad #32
+	sub	sp, sp, #32
+	ldr	r1, .L617+4
+	bl	strcpy
+	mov	r0, r4
+	ldr	r1, .L617+8
+	ldr	r2, [r5, #3048]
+	bl	sprintf
+	ldr	r1, .L617+12
+	ldr	r2, [r5, #3928]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, .L617+16
+	ldr	r3, [r3, #2996]
+	cmp	r3, #1
+	add	r4, r4, r0
+	rsbne	r0, sl, r4
+	bne	.L609
+	add	r0, sp, #16
+	add	r1, sp, #20
+	add	r2, sp, #24
+	add	r3, sp, #28
+	bl	NandcGetTimeCfg
+	ldr	r3, [sp, #24]
+	ldr	r2, [sp, #16]
+	mov	r0, r4
+	ldr	r1, .L617+20
+	str	r3, [sp, #0]
+	ldr	r3, [sp, #28]
+	ldr	r8, .L617+24
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #20]
+	bl	sprintf
+	ldr	r1, .L617+28
+	add	r6, r4, r0
+	ldr	r4, .L617+32
+	mov	r0, r6
+	add	r6, r6, #10
+	bl	strcpy
+	ldr	r2, [r5, #3972]
+	mov	r0, r6
+	ldr	r1, .L617+36
+	bl	sprintf
+	ldr	r1, .L617+40
+	ldr	r2, [r4, #-1848]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+44
+	ldr	r2, [r4, #-1840]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+48
+	ldr	r2, [r4, #-1836]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+52
+	ldr	r2, [r4, #-1832]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+56
+	ldr	r2, [r4, #-1828]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+60
+	ldr	r2, [r4, #-1824]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+64
+	ldr	r2, [r4, #-1820]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r2, [r4, #-1816]
+	ldr	r1, .L617+68
+	mov	r2, r2, lsr #11
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r2, [r4, #-1812]
+	ldr	r1, .L617+72
+	mov	r2, r2, lsr #11
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+76
+	ldr	r2, [r4, #-1808]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+80
+	ldr	r2, [r4, #-1804]
+	add	r6, r6, r0
+	mov	r0, r6
+	bl	sprintf
+	add	r6, r6, r0
+	bl	FtlBbtCalcTotleCnt
+	movw	r2, #3982
+	ldr	r1, .L617+84
+	ldrh	r2, [r5, r2]
+	mov	r3, r0
+	mov	r0, r6
+	bl	sprintf
+	ldr	r1, .L617+88
+	add	r7, r6, r0
+	ldr	r6, .L617+92
+	mov	r0, r7
+	ldrh	r2, [r4, r6]
+	bl	sprintf
+	ldr	r1, .L617+96
+	ldr	r2, [r4, #-1800]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+100
+	ldr	r2, [r4, #-1796]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+104
+	ldr	r2, [r4, #-1792]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+108
+	ldr	r2, [r4, #-2080]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+112
+	ldr	r2, [r4, #-1788]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+116
+	ldr	r2, [r4, #-1784]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+120
+	ldr	r1, .L617+124
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+128
+	ldr	r1, .L617+132
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r2, [r5, #3952]
+	ldr	r1, .L617+136
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r2, [r5, #3944]
+	ldr	r1, .L617+140
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r2, [r5, #3840]
+	ldr	r1, .L617+144
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	movw	r3, #4042
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L617+148
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	movw	r3, #3852
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L617+152
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+156
+	ldr	r1, .L617+160
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r2, [r5, #3856]
+	ldr	r1, .L617+164
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+168
+	ldr	r1, .L617+172
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	movw	r3, #3976
+	ldrh	r2, [r5, r3]
+	ldr	r1, .L617+176
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+180
+	ldr	r1, .L617+184
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+188
+	ldrb	r2, [r4, #-1994]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldrh	r2, [r4, r8]
+	ldr	r1, .L617+192
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+196
+	ldrb	r2, [r4, #-1992]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+200
+	ldr	r1, .L617+204
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldrh	r3, [r4, r8]
+	ldr	r2, [r4, #-2020]
+	add	r8, r8, #48
+	ldr	r1, .L617+208
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+212
+	ldr	r1, .L617+216
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+220
+	ldrb	r2, [r4, #-1946]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldrh	r2, [r4, r8]
+	ldr	r1, .L617+224
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+228
+	ldrb	r2, [r4, #-1944]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+232
+	ldr	r1, .L617+236
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldrh	r3, [r4, r8]
+	ldr	r2, [r4, #-2020]
+	add	r8, r8, #188
+	ldr	r1, .L617+240
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+244
+	ldr	r1, .L617+248
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+252
+	ldrb	r2, [r4, #-1898]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+256
+	ldr	r1, .L617+260
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+264
+	ldrb	r2, [r4, #-1896]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+268
+	ldr	r1, .L617+272
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+276
+	ldr	r1, .L617+280
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+284
+	ldrb	r2, [r4, #-1758]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+288
+	ldrh	r2, [r4, r8]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+292
+	ldrb	r2, [r4, #-1756]	@ zero_extendqisi2
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r3, .L617+296
+	ldr	r1, .L617+300
+	ldrh	r2, [r4, r3]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, [r4, #-1628]
+	ldr	r3, [r5, #3836]
+	ldr	r2, [r4, #-1716]
+	str	r1, [sp, #0]
+	ldr	r1, [r4, #-1636]
+	orr	r2, r3, r2, asl #8
+	str	r1, [sp, #4]
+	ldr	r1, .L617+304
+	ldr	r3, [r4, #-1632]
+	add	r7, r7, r0
+	mov	r0, r7
+	bl	sprintf
+	ldr	r1, .L617+308
+	ldr	r2, [r4, #-1640]
+	add	r5, r7, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L617+312
+	ldr	r2, [r4, #-1616]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r3, .L617+316
+	ldr	r1, .L617+320
+	ldrh	r2, [r4, r3]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r3, .L617+324
+	ldr	r1, .L617+328
+	ldrh	r2, [r4, r3]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L617+332
+	ldr	r2, [r4, #-1196]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r3, .L617+336
+	ldr	r1, .L617+340
+	ldrh	r2, [r4, r3]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	add	r5, r5, r0
+	bl	GetFreeBlockMinEraseCount
+	ldr	r1, .L617+344
+	mov	r2, r0
+	mov	r0, r5
+	bl	sprintf
+	add	r5, r5, r0
+	ldrh	r0, [r4, r6]
+	bl	GetFreeBlockMaxEraseCount
+	ldr	r1, .L617+348
+	mov	r2, r0
+	mov	r0, r5
+	bl	sprintf
+	ldrh	r3, [r4, r8]
+	movw	r2, #65535
+	cmp	r3, r2
+	add	r5, r5, r0
+	beq	.L610
+	ldr	r2, [r4, #-2020]
+	mov	r3, r3, asl #1
+	mov	r0, r5
+	ldr	r1, .L617+352
+	ldrh	r2, [r2, r3]
+	bl	sprintf
+	add	r5, r5, r0
+.L610:
+	mov	r0, #0
+	ldr	r4, .L617+32
+	bl	List_get_gc_head_node
+	mov	r6, #0
+	movw	r8, #65535
+	mov	r9, #6
+	uxth	r3, r0
+.L612:
+	cmp	r3, r8
+	beq	.L611
+	ldr	r1, [r4, #-2020]
+	mov	r2, r3, asl #1
+	mul	r7, r9, r3
+	mov	r0, r5
+	ldrh	r1, [r1, r2]
+	str	r1, [sp, #0]
+	ldr	r1, [r4, #-2028]
+	add	r1, r1, r7
+	ldrh	r1, [r1, #4]
+	str	r1, [sp, #4]
+	ldr	r1, [r4, #-2084]
+	ldrh	r2, [r1, r2]
+	ldr	r1, .L617+356
+	str	r2, [sp, #8]
+	mov	r2, r6
+	bl	sprintf
+	add	r6, r6, #1
+	ldr	r3, [r4, #-2028]
+	cmp	r6, #16
+	ldrh	r3, [r3, r7]
+	add	r5, r5, r0
+	bne	.L612
+.L611:
+	ldr	r6, .L617+32
+	mov	r4, #0
+	movw	r8, #65535
+	mov	r9, #6
+	ldr	r2, [r6, #-2008]
+	ldr	r3, [r6, #-2028]
+	rsb	r3, r3, r2
+	ldr	r2, .L617+360
+	mov	r3, r3, asr #1
+	mul	r3, r2, r3
+	uxth	r3, r3
+.L614:
+	cmp	r3, r8
+	beq	.L613
+	mul	r7, r9, r3
+	ldr	r2, [r6, #-2028]
+	mov	r0, r5
+	add	r2, r2, r7
+	ldrh	r2, [r2, #4]
+	str	r2, [sp, #0]
+	mov	r2, r3, asl #1
+	ldr	r1, [r6, #-2084]
+	ldrh	r2, [r1, r2]
+	ldr	r1, .L617+364
+	str	r2, [sp, #4]
+	mov	r2, r4
+	bl	sprintf
+	add	r4, r4, #1
+	ldr	r3, [r6, #-2028]
+	cmp	r4, #4
+	ldrh	r3, [r3, r7]
+	add	r5, r5, r0
+	bne	.L614
+.L613:
+	rsb	r0, sl, r5
+.L609:
+	add	sp, sp, #32
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L618:
+	.align	2
+.L617:
+	.word	.LANCHOR0
+	.word	.LC8
+	.word	.LC9
+	.word	.LC10
+	.word	.LANCHOR1
+	.word	.LC11
+	.word	-2000
+	.word	.LC12
+	.word	.LANCHOR2
+	.word	.LC13
+	.word	.LC14
+	.word	.LC15
+	.word	.LC16
+	.word	.LC17
+	.word	.LC18
+	.word	.LC19
+	.word	.LC20
+	.word	.LC21
+	.word	.LC22
+	.word	.LC23
+	.word	.LC24
+	.word	.LC25
+	.word	.LC26
+	.word	-2004
+	.word	.LC27
+	.word	.LC28
+	.word	.LC29
+	.word	.LC30
+	.word	.LC31
+	.word	.LC32
+	.word	-2046
+	.word	.LC33
+	.word	-2048
+	.word	.LC34
+	.word	.LC35
+	.word	.LC36
+	.word	.LC37
+	.word	.LC38
+	.word	.LC39
+	.word	-1780
+	.word	.LC40
+	.word	.LC41
+	.word	-1776
+	.word	.LC42
+	.word	.LC43
+	.word	-1998
+	.word	.LC44
+	.word	.LC45
+	.word	.LC46
+	.word	.LC47
+	.word	-1996
+	.word	.LC48
+	.word	.LC49
+	.word	-1950
+	.word	.LC50
+	.word	.LC51
+	.word	.LC52
+	.word	.LC53
+	.word	-1948
+	.word	.LC54
+	.word	.LC55
+	.word	-1902
+	.word	.LC56
+	.word	.LC57
+	.word	-1904
+	.word	.LC58
+	.word	.LC59
+	.word	-1900
+	.word	.LC60
+	.word	-1762
+	.word	.LC61
+	.word	.LC62
+	.word	.LC63
+	.word	.LC64
+	.word	-1760
+	.word	.LC65
+	.word	.LC66
+	.word	.LC67
+	.word	.LC68
+	.word	-1200
+	.word	.LC69
+	.word	-1198
+	.word	.LC70
+	.word	.LC71
+	.word	-1192
+	.word	.LC72
+	.word	.LC73
+	.word	.LC74
+	.word	.LC75
+	.word	.LC76
+	.word	-1431655765
+	.word	.LC77
+	.fnend
+	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
+	.align	2
+	.global	ftl_proc_ftl_read
+	.type	ftl_proc_ftl_read, %function
+ftl_proc_ftl_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r1, .L620
+	ldr	r2, .L620+4
+	bl	sprintf
+	add	r5, r4, r0
+	mov	r0, r5
+	bl	FtlPrintInfo2buf
+	add	r0, r5, r0
+	rsb	r0, r4, r0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L621:
+	.align	2
+.L620:
+	.word	.LC78
+	.word	.LC79
+	.fnend
+	.size	ftl_proc_ftl_read, .-ftl_proc_ftl_read
+	.align	2
+	.global	GetSwlReplaceBlock
+	.type	GetSwlReplaceBlock, %function
+GetSwlReplaceBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L647
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r1, [r3, #-1792]
+	ldr	r2, [r3, #-1784]
+	cmp	r1, r2
+	bcs	.L623
+	ldr	r0, .L647+4
+	movw	r1, #3852
+	mov	r2, #0
+	str	r2, [r3, #-1800]
+	ldrh	r1, [r0, r1]
+	ldr	r0, [r3, #-2084]
+	b	.L624
+.L625:
+	ldrh	lr, [r0], #2
+	add	r2, r2, #1
+	ldr	ip, [r3, #-1800]
+	add	ip, lr, ip
+	str	ip, [r3, #-1800]
+.L624:
+	cmp	r2, r1
+	ldr	r4, .L647
+	bcc	.L625
+	ldr	r5, [r4, #-1800]
+	mov	r0, r5
+	bl	__aeabi_uidiv
+	ldr	r2, .L647+4
+	movw	r3, #3902
+	ldrh	r1, [r2, r3]
+	str	r0, [r4, #-1792]
+	ldr	r0, [r4, #-1796]
+	rsb	r0, r0, r5
+	bl	__aeabi_uidiv
+	str	r0, [r4, #-1800]
+	b	.L626
+.L623:
+	ldr	r2, [r3, #-1788]
+	cmp	r1, r2
+	bls	.L626
+	add	r2, r2, #1
+	ldr	r4, .L647+4
+	str	r2, [r3, #-1788]
+	movw	ip, #3852
+	mov	r2, #0
+	b	.L627
+.L628:
+	ldr	r0, [r3, #-2084]
+	mov	r1, r2, asl #1
+	add	r2, r2, #1
+	ldrh	r5, [r0, r1]
+	add	r5, r5, #1
+	strh	r5, [r0, r1]	@ movhi
+.L627:
+	ldrh	r1, [r4, ip]
+	cmp	r2, r1
+	bcc	.L628
+.L626:
+	ldr	r3, .L647
+	ldr	r6, [r3, #-1784]
+	ldr	r5, [r3, #-1792]
+	add	r2, r6, #256
+	cmp	r2, r5
+	mov	r2, r3
+	bls	.L629
+	ldr	r3, [r3, #-1788]
+	add	r1, r6, #768
+	cmp	r1, r3
+	bls	.L629
+	ldr	r3, .L647+4
+	ldr	r3, [r3, #3836]
+	cmp	r3, #0
+	beq	.L646
+	cmp	r6, #30
+	bhi	.L646
+.L629:
+	ldr	r3, .L647+8
+	ldrh	r0, [r2, r3]
+	add	r0, r0, r0, asl #1
+	ubfx	r0, r0, #2, #16
+	bl	GetFreeBlockMaxEraseCount
+	add	r3, r6, #64
+	cmp	r0, r3
+	mov	r8, r0
+	bcs	.L631
+	cmp	r6, #30
+	bhi	.L646
+.L631:
+	ldr	r2, .L647
+	ldr	r3, [r2, #-2024]
+	cmp	r3, #0
+	beq	.L646
+	ldr	r0, .L647+4
+	movw	r1, #3852
+	movw	r7, #65535
+	mov	r4, r7
+	mov	fp, r7
+	ldrh	sl, [r0, r1]
+	ldr	r0, [r2, #-2028]
+	ldr	r1, [r2, #-2084]
+	mov	r2, #0
+	b	.L632
+.L635:
+	add	r2, r2, #1
+	uxth	r2, r2
+	cmp	r2, sl
+	bhi	.L646
+	ldrh	ip, [r3, #4]
+	cmp	ip, #0
+	beq	.L633
+	rsb	r3, r0, r3
+	ldr	ip, .L647+12
+	mov	r3, r3, asr #1
+	mul	r3, ip, r3
+	uxth	r3, r3
+	mov	ip, r3, asl #1
+	ldrh	ip, [r1, ip]
+	cmp	ip, r6
+	bls	.L643
+	cmp	ip, r7
+	movcc	r7, ip
+	movcc	r4, r3
+.L633:
+	mov	ip, #6
+	mla	r3, ip, r9, r0
+.L632:
+	ldrh	r9, [r3, #0]
+	cmp	r9, fp
+	bne	.L635
+	b	.L634
+.L643:
+	mov	r4, r3
+.L634:
+	movw	r3, #65535
+	cmp	r4, r3
+	beq	.L630
+	mov	r9, r4, asl #1
+	ldrh	sl, [r1, r9]
+	cmp	sl, r6
+	bls	.L636
+	bl	GetFreeBlockMinEraseCount
+	cmp	r0, r6
+	ldrhi	r3, .L647
+	strhi	r7, [r3, #-1784]
+.L636:
+	cmp	sl, r5
+	bcs	.L646
+	add	r3, sl, #128
+	cmp	r8, r3
+	ble	.L646
+	add	r3, sl, #256
+	ldr	r6, .L647
+	cmp	r3, r5
+	bcc	.L637
+	ldr	r3, [r6, #-1788]
+	add	sl, sl, #768
+	cmp	sl, r3
+	bcs	.L646
+.L637:
+	ldr	r3, [r6, #-2020]
+	mov	r1, r4
+	ldr	r0, .L647+16
+	mov	r2, r5
+	ldrh	r3, [r3, r9]
+	str	r3, [sp, #0]
+	ldr	r3, [r6, #-2084]
+	ldrh	r3, [r3, r9]
+	stmib	sp, {r3, r8}
+	ldr	r3, [r6, #-1788]
+	bl	printk
+	mov	r3, #1
+	str	r3, [r6, #-1188]
+	b	.L630
+.L646:
+	movw	r4, #65535
+.L630:
+	mov	r0, r4
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L648:
+	.align	2
+.L647:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	-2004
+	.word	-1431655765
+	.word	.LC80
+	.fnend
+	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
+	.align	2
+	.global	free_data_superblock
+	.type	free_data_superblock, %function
+free_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	r2, #65535
+	cmp	r0, r2
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	beq	.L650
+	ldr	r2, .L651
+	mov	r3, r0, asl #1
+	mov	r1, #0
+	ldr	r2, [r2, #-2020]
+	strh	r1, [r2, r3]	@ movhi
+	bl	INSERT_FREE_LIST
+.L650:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L652:
+	.align	2
+.L651:
+	.word	.LANCHOR2
+	.fnend
+	.size	free_data_superblock, .-free_data_superblock
+	.align	2
+	.global	FtlGcBufInit
+	.type	FtlGcBufInit, %function
+FtlGcBufInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L661
+	mov	r3, #0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	movw	sl, #3844
+	str	r3, [r2, #-1184]
+	mov	r8, #12
+	ldr	r0, .L661+4
+	mov	r7, #1
+	movw	r6, #3922
+	movw	fp, #3924
+	b	.L654
+.L655:
+	mul	r1, r8, r3
+	ldr	r4, [r2, #-1180]
+	add	ip, r4, r1
+	str	r7, [ip, #8]
+	ldrh	ip, [r0, r6]
+	mul	ip, ip, r3
+	add	r5, ip, #3
+	cmp	ip, #0
+	movlt	ip, r5
+	ldr	r5, [r2, #-1176]
+	bic	ip, ip, #3
+	add	ip, r5, ip
+	str	ip, [r4, r1]
+	ldrh	ip, [r0, fp]
+	ldr	r9, [r2, #-1180]
+	mul	ip, ip, r3
+	add	r4, r9, r1
+	add	r5, ip, #3
+	cmp	ip, #0
+	movlt	ip, r5
+	ldr	r5, [r2, #-1172]
+	bic	ip, ip, #3
+	add	ip, r5, ip
+	str	ip, [r4, #4]
+	ldr	ip, [r2, #-1168]
+	mov	r5, #36
+	ldr	r1, [r9, r1]
+	mla	ip, r5, r3, ip
+	add	r3, r3, #1
+	uxth	r3, r3
+	str	r1, [ip, #8]
+	ldr	r1, [r4, #4]
+	str	r1, [ip, #12]
+.L654:
+	ldrh	r1, [r0, sl]
+	cmp	r3, r1
+	bcc	.L655
+	b	.L660
+.L657:
+	mul	r2, r8, r1
+	ldr	r4, [r3, #-1180]
+	add	r0, r4, r2
+	str	r7, [r0, #8]
+	ldrh	r0, [ip, r6]
+	mul	r0, r0, r1
+	add	sl, r0, #3
+	cmp	r0, #0
+	movlt	r0, sl
+	ldr	sl, [r3, #-1176]
+	bic	r0, r0, #3
+	add	r0, sl, r0
+	str	r0, [r4, r2]
+	ldr	r0, [r3, #-1180]
+	add	r0, r0, r2
+	ldrh	r2, [ip, r5]
+	mul	r2, r2, r1
+	add	r1, r1, #1
+	uxth	r1, r1
+	add	r4, r2, #3
+	cmp	r2, #0
+	movlt	r2, r4
+	ldr	r4, [r3, #-1172]
+	bic	r2, r2, #3
+	add	r2, r4, r2
+	str	r2, [r0, #4]
+	b	.L659
+.L660:
+	ldr	r3, .L661
+	mov	r8, #12
+	ldr	ip, .L661+4
+	mov	r7, #0
+	movw	r6, #3922
+	movw	r5, #3924
+.L659:
+	ldr	r2, [r3, #-1164]
+	cmp	r1, r2
+	bcc	.L657
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L662:
+	.align	2
+.L661:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGcBufInit, .-FtlGcBufInit
+	.align	2
+	.global	FtlGcBufFree
+	.type	FtlGcBufFree, %function
+FtlGcBufFree:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L670
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r5, #36
+	ldr	r6, [r3, #-1164]
+	mov	fp, #12
+	ldr	ip, [r3, #-1180]
+	mov	r3, #0
+	mov	r4, r3
+	b	.L664
+.L667:
+	mul	sl, fp, r2
+	add	r8, ip, sl
+	ldr	r9, [ip, sl]
+	ldr	sl, [r7, #8]
+	cmp	r9, sl
+	streq	r4, [r8, #8]
+	beq	.L666
+.L665:
+	add	r2, r2, #1
+	uxth	r2, r2
+.L669:
+	cmp	r2, r6
+	bcc	.L667
+.L666:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L664:
+	cmp	r3, r1
+	ldmcsfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+	mla	r7, r5, r3, r0
+	mov	r2, #0
+	b	.L669
+.L671:
+	.align	2
+.L670:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcBufFree, .-FtlGcBufFree
+	.align	2
+	.global	FtlGcBufAlloc
+	.type	FtlGcBufAlloc, %function
+FtlGcBufAlloc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L679
+	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
+	.save {r4, r5, r6, r7, r8, sl, lr}
+	mov	r6, #12
+	ldr	r8, [r3, #-1164]
+	mov	r5, #1
+	ldr	r7, [r3, #-1180]
+	mov	r4, #36
+	mov	r3, #0
+	b	.L673
+.L676:
+	mla	ip, r6, r2, r7
+	ldr	sl, [ip, #8]
+	cmp	sl, #0
+	bne	.L674
+	mla	r2, r4, r3, r0
+	ldr	sl, [ip, #0]
+	str	r5, [ip, #8]
+	str	sl, [r2, #8]
+	ldr	ip, [ip, #4]
+	str	ip, [r2, #12]
+	b	.L675
+.L674:
+	add	r2, r2, #1
+	uxth	r2, r2
+	b	.L677
+.L678:
+	mov	r2, #0
+.L677:
+	cmp	r2, r8
+	bcc	.L676
+.L675:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L673:
+	cmp	r3, r1
+	bcc	.L678
+	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
+.L680:
+	.align	2
+.L679:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
+	.align	2
+	.global	IsBlkInGcList
+	.type	IsBlkInGcList, %function
+IsBlkInGcList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L686
+	ldr	r2, .L686+4
+	ldrh	r1, [r3, r2]
+	ldr	r2, [r3, #-1156]
+	mov	r3, #0
+	b	.L682
+.L684:
+	ldrh	ip, [r2], #2
+	cmp	ip, r0
+	beq	.L685
+	add	r3, r3, #1
+	uxth	r3, r3
+.L682:
+	cmp	r3, r1
+	bne	.L684
+	mov	r0, #0
+	bx	lr
+.L685:
+	mov	r0, #1
+	bx	lr
+.L687:
+	.align	2
+.L686:
+	.word	.LANCHOR2
+	.word	-1160
+	.fnend
+	.size	IsBlkInGcList, .-IsBlkInGcList
+	.align	2
+	.global	FtlGcUpdatePage
+	.type	FtlGcUpdatePage, %function
+FtlGcUpdatePage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r4, r0
+	ubfx	r0, r0, #10, #16
+	mov	r5, r1
+	mov	r6, r2
+	bl	P2V_block_in_plane
+	ldr	r3, .L692
+	ldr	r2, .L692+4
+	ldrh	ip, [r3, r2]
+	ldr	r2, [r3, #-1156]
+	mov	r3, #0
+	mov	r1, r2
+	b	.L689
+.L691:
+	ldrh	r7, [r1], #2
+	cmp	r7, r0
+	beq	.L690
+	add	r3, r3, #1
+	uxth	r3, r3
+.L689:
+	cmp	r3, ip
+	bne	.L691
+	mov	r3, r3, asl #1
+	strh	r0, [r2, r3]	@ movhi
+	ldr	r2, .L692
+	ldr	r3, .L692+4
+	ldrh	r1, [r2, r3]
+	add	r1, r1, #1
+	strh	r1, [r2, r3]	@ movhi
+.L690:
+	ldr	r3, .L692
+	mov	r0, #12
+	ldr	r2, .L692+8
+	ldrh	r1, [r3, r2]
+	mul	r1, r0, r1
+	ldr	r0, [r3, #-1152]
+	add	ip, r0, r1
+	stmib	ip, {r5, r6}
+	str	r4, [r0, r1]
+	ldrh	r1, [r3, r2]
+	add	r1, r1, #1
+	strh	r1, [r3, r2]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L693:
+	.align	2
+.L692:
+	.word	.LANCHOR2
+	.word	-1160
+	.word	-1148
+	.fnend
+	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
+	.align	2
+	.global	FtlGcRefreshOpenBlock
+	.type	FtlGcRefreshOpenBlock, %function
+FtlGcRefreshOpenBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	mov	r1, r4
+	ldr	r0, .L697
+	bl	printk
+	ldr	r3, .L697+4
+	ldr	ip, .L697+8
+	ldrh	r5, [r3, ip]
+	cmp	r5, r4
+	beq	.L695
+	ldr	r2, .L697+12
+	ldrh	r0, [r3, r2]
+	cmp	r0, r4
+	beq	.L695
+	movw	r1, #65535
+	cmp	r5, r1
+	streqh	r4, [r3, ip]	@ movhi
+	beq	.L695
+	cmp	r0, r1
+	streqh	r4, [r3, r2]	@ movhi
+.L695:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L698:
+	.align	2
+.L697:
+	.word	.LC81
+	.word	.LANCHOR2
+	.word	-1146
+	.word	-1144
+	.fnend
+	.size	FtlGcRefreshOpenBlock, .-FtlGcRefreshOpenBlock
+	.align	2
+	.global	FtlGcRefreshBlock
+	.type	FtlGcRefreshBlock, %function
+FtlGcRefreshBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	mov	r1, r4
+	ldr	r0, .L702
+	bl	printk
+	ldr	r3, .L702+4
+	ldr	ip, .L702+8
+	ldrh	r5, [r3, ip]
+	cmp	r5, r4
+	beq	.L700
+	ldr	r2, .L702+12
+	ldrh	r0, [r3, r2]
+	cmp	r0, r4
+	beq	.L700
+	movw	r1, #65535
+	cmp	r5, r1
+	streqh	r4, [r3, ip]	@ movhi
+	beq	.L700
+	cmp	r0, r1
+	streqh	r4, [r3, r2]	@ movhi
+.L700:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L703:
+	.align	2
+.L702:
+	.word	.LC81
+	.word	.LANCHOR2
+	.word	-1146
+	.word	-1144
+	.fnend
+	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
+	.align	2
+	.global	FtlGcMarkBadPhyBlk
+	.type	FtlGcMarkBadPhyBlk, %function
+FtlGcMarkBadPhyBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r4, r0
+	bl	P2V_block_in_plane
+	ldr	r7, .L709
+	mov	r2, r4
+	ldr	r6, .L709+4
+	ldrh	r1, [r7, r6]
+	mov	r5, r0
+	ldr	r0, .L709+8
+	bl	printk
+	mov	r0, r5
+	bl	FtlGcRefreshBlock
+	ldr	r3, .L709+12
+	ldr	r3, [r3, #3836]
+	cmp	r3, #0
+	beq	.L705
+	ldr	r3, [r7, #-2084]
+	mov	r5, r5, asl #1
+	ldrh	r2, [r3, r5]
+	cmp	r2, #29
+	subhi	r2, r2, #30
+	strhih	r2, [r3, r5]	@ movhi
+.L705:
+	ldrh	r1, [r7, r6]
+	mov	r3, #0
+	ldr	r2, .L709+16
+	b	.L706
+.L708:
+	ldrh	r0, [r2, #2]!
+	cmp	r0, r4
+	beq	.L707
+	add	r3, r3, #1
+	uxth	r3, r3
+.L706:
+	cmp	r3, r1
+	bne	.L708
+	cmp	r3, #15
+	bhi	.L707
+	ldr	r2, .L709
+	ldr	r1, .L709+20
+	add	r0, r2, r3, asl #1
+	add	r3, r3, #1
+	strh	r4, [r0, r1]	@ movhi
+	sub	r1, r1, #2
+	strh	r3, [r2, r1]	@ movhi
+.L707:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L710:
+	.align	2
+.L709:
+	.word	.LANCHOR2
+	.word	-1142
+	.word	.LC82
+	.word	.LANCHOR0
+	.word	.LANCHOR2-1142
+	.word	-1140
+	.fnend
+	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
+	.align	2
+	.global	FtlGcReFreshBadBlk
+	.type	FtlGcReFreshBadBlk, %function
+FtlGcReFreshBadBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r2, .L714
+	ldr	r3, .L714+4
+	ldrh	r2, [r3, r2]
+	cmp	r2, #0
+	beq	.L712
+	ldr	r1, .L714+8
+	ldrh	r0, [r3, r1]
+	movw	r1, #65535
+	cmp	r0, r1
+	bne	.L712
+	ldr	r4, .L714+12
+	ldr	r5, .L714+4
+	ldrh	r1, [r3, r4]
+	cmp	r1, r2
+	movcs	r2, #0
+	strcsh	r2, [r3, r4]	@ movhi
+	ldrh	r2, [r5, r4]
+	ldr	r3, .L714+16
+	add	r2, r5, r2, asl #1
+	ldrh	r0, [r2, r3]
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	ldrh	r3, [r5, r4]
+	add	r3, r3, #1
+	strh	r3, [r5, r4]	@ movhi
+.L712:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L715:
+	.align	2
+.L714:
+	.word	-1142
+	.word	.LANCHOR2
+	.word	-1146
+	.word	-1106
+	.word	-1140
+	.fnend
+	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
+	.align	2
+	.global	ftl_memset
+	.type	ftl_memset, %function
+ftl_memset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r2, #0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	beq	.L717
+	bl	memset
+.L717:
+	mov	r0, r4
+	ldmfd	sp!, {r4, pc}
+	.fnend
+	.size	ftl_memset, .-ftl_memset
+	.align	2
+	.global	FtlGcPageVarInit
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r3, #0
+	ldr	r4, .L719
+	movw	r5, #3916
+	ldr	r2, .L719+4
+	mov	r1, #255
+	ldr	r6, .L719+8
+	ldr	r0, [r4, #-1156]
+	strh	r3, [r4, r2]	@ movhi
+	add	r2, r2, #12
+	strh	r3, [r4, r2]	@ movhi
+	ldrh	r2, [r6, r5]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r3, [r6, r5]
+	mov	r2, #12
+	ldr	r0, [r4, #-1152]
+	mov	r1, #255
+	mul	r2, r2, r3
+	bl	ftl_memset
+	ldmfd	sp!, {r4, r5, r6, lr}
+	b	FtlGcBufInit
+.L720:
+	.align	2
+.L719:
+	.word	.LANCHOR2
+	.word	-1160
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	2
+	.global	SupperBlkListInit
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	movw	r3, #3854
+	ldr	r7, .L731
+	mov	r2, #6
+	ldr	r4, .L731+4
+	mov	r1, #0
+	mov	r6, #0
+	ldrh	r3, [r7, r3]
+	mov	sl, r6
+	ldr	r0, [r4, #-2028]
+	mul	r2, r2, r3
+	bl	ftl_memset
+	ldr	r3, .L731+8
+	str	r6, [r4, #-2008]
+	str	r6, [r4, #-2024]
+	strh	r6, [r4, r3]	@ movhi
+	add	r3, r3, #8
+	str	r6, [r4, #-2016]
+	strh	r6, [r4, r3]	@ movhi
+	add	r3, r3, #900
+	strh	r6, [r4, r3]	@ movhi
+	mov	r4, r6
+	b	.L722
+.L724:
+	add	r1, r7, r1
+	add	r9, r9, #1
+	ldrb	r0, [r1, #3870]	@ zero_extendqisi2
+	mov	r1, r3
+	stmia	sp, {r2, r3}
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	ldmia	sp, {r2, r3}
+	uxth	r9, r9
+	cmp	r0, #0
+	ldreqh	r1, [r7, r2]
+	addeq	r5, r5, r1
+	uxtheq	r5, r5
+	b	.L729
+.L730:
+	mov	r5, #0
+	uxth	r3, r4
+	mov	r9, r5
+	movw	fp, #3844
+	movw	r2, #3912
+.L729:
+	ldrh	r0, [r7, fp]
+	sxth	r1, r9
+	cmp	r1, r0
+	blt	.L724
+	cmp	r5, #0
+	ldr	r9, .L731+4
+	beq	.L725
+	sxth	r1, r5
+	mov	r0, #32768
+	bl	__aeabi_idiv
+	uxth	r5, r0
+	b	.L726
+.L725:
+	sxth	r3, r4
+	ldr	r2, [r9, #-2020]
+	mvn	r1, #0
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+.L726:
+	sxth	r1, r4
+	ldr	r0, [r9, #-2028]
+	ldr	r3, .L731+4
+	mov	r2, r1, asl #1
+	add	r1, r2, r1
+	add	r1, r0, r1, asl #1
+	strh	r5, [r1, #4]	@ movhi
+	ldr	r1, .L731+12
+	ldrh	r1, [r9, r1]
+	cmp	r8, r1
+	beq	.L727
+	ldr	r1, .L731+16
+	ldrh	r1, [r3, r1]
+	cmp	r8, r1
+	beq	.L727
+	ldr	r1, .L731+20
+	ldrh	r1, [r3, r1]
+	cmp	r8, r1
+	beq	.L727
+	ldr	r3, [r3, #-2020]
+	uxth	r0, r4
+	ldrh	r3, [r3, r2]
+	cmp	r3, #0
+	bne	.L728
+	add	r6, r6, #1
+	uxth	r6, r6
+	bl	INSERT_FREE_LIST
+	b	.L727
+.L728:
+	add	sl, sl, #1
+	uxth	sl, sl
+	bl	INSERT_DATA_LIST
+.L727:
+	add	r4, r4, #1
+	uxth	r4, r4
+.L722:
+	movw	r2, #3852
+	sxth	r8, r4
+	ldrh	r3, [r7, r2]
+	cmp	r8, r3
+	blt	.L730
+	ldr	r3, .L731+4
+	mov	r0, #0
+	ldr	r2, .L731+8
+	strh	sl, [r3, r2]	@ movhi
+	add	r2, r2, #8
+	strh	r6, [r3, r2]	@ movhi
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L732:
+	.align	2
+.L731:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-2012
+	.word	-2000
+	.word	-1952
+	.word	-1904
+	.fnend
+	.size	SupperBlkListInit, .-SupperBlkListInit
+	.align	2
+	.global	FtlL2PDataInit
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r1, #0
+	ldr	r4, .L736
+	movw	r6, #3922
+	ldr	r5, .L736+4
+	movw	r7, #3950
+	mov	r8, #12
+	ldr	r2, [r4, #3940]
+	ldr	r0, [r5, #-1100]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r3, [r4, r6]
+	ldrh	r2, [r4, r7]
+	mov	r1, #255
+	ldr	r0, [r5, #-1096]
+	mul	r2, r2, r3
+	bl	ftl_memset
+	mov	r2, #0
+	mov	ip, r2
+	mvn	r0, #0
+	b	.L734
+.L735:
+	mul	r3, r8, r2
+	ldr	r1, [r5, #-1856]
+	add	sl, r1, r3
+	str	ip, [sl, #4]
+	strh	r0, [r1, r3]	@ movhi
+	ldr	r1, [r5, #-1856]
+	ldr	sl, [r5, #-1096]
+	add	r3, r1, r3
+	ldrh	r1, [r4, r6]
+	mul	r1, r2, r1
+	add	r2, r2, #1
+	uxth	r2, r2
+	bic	r1, r1, #3
+	add	r1, sl, r1
+	str	r1, [r3, #8]
+.L734:
+	ldrh	r3, [r4, r7]
+	ldr	r1, .L736
+	cmp	r3, r2
+	ldr	r3, .L736+4
+	bhi	.L735
+	ldr	r0, .L736+8
+	mvn	r2, #0
+	ldr	ip, [r1, #3940]
+	strh	r2, [r3, r0]	@ movhi
+	sub	r0, r0, #2
+	strh	r2, [r3, r0]	@ movhi
+	add	r0, r0, #10
+	strh	ip, [r3, r0]	@ movhi
+	ldr	ip, .L736+12
+	ldr	r0, .L736+16
+	strh	ip, [r3, r0]	@ movhi
+	add	r0, r0, #40
+	ldrh	ip, [r3, r0]
+	sub	r0, r0, #36
+	strh	ip, [r3, r0]	@ movhi
+	movw	r0, #3948
+	ldrh	r0, [r1, r0]
+	ldr	r1, .L736+20
+	strh	r0, [r3, r1]	@ movhi
+	ldr	r1, [r3, #-1044]
+	str	r1, [r3, #-1080]
+	ldr	r1, [r3, #-1040]
+	str	r1, [r3, #-1076]
+	ldr	r1, [r3, #-1100]
+	str	r1, [r3, #-1072]
+	ldr	r1, [r3, #-1036]
+	str	r1, [r3, #-1068]
+	ldr	r1, .L736+24
+	strh	r2, [r3, r1]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L737:
+	.align	2
+.L736:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1090
+	.word	-3902
+	.word	-1088
+	.word	-1086
+	.word	-1052
+	.fnend
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
+	.align	2
+	.global	ftl_free_no_use_map_blk
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r4, r0
+	ldrh	r2, [r0, #10]
+	mov	r1, #0
+	ldr	r5, [r0, #20]
+	ldr	r6, [r0, #12]
+	ldr	r7, [r0, #24]
+	mov	r2, r2, asl #1
+	mov	r0, r5
+	bl	ftl_memset
+	mov	r3, #0
+	b	.L739
+.L743:
+	ldr	r0, [r7, r3, asl #2]
+	mov	r2, #0
+	ubfx	r0, r0, #10, #16
+	b	.L740
+.L742:
+	mov	r1, r2, asl #1
+	add	r2, r2, #1
+	ldrh	ip, [r6, r1]
+	uxth	r2, r2
+	cmp	ip, r0
+	ldreqh	ip, [r5, r1]
+	addeq	ip, ip, #1
+	streqh	ip, [r5, r1]	@ movhi
+.L740:
+	ldrh	r1, [r4, #10]
+	cmp	r1, r2
+	bhi	.L742
+	add	r3, r3, #1
+	uxth	r3, r3
+.L739:
+	ldrh	r2, [r4, #6]
+	cmp	r2, r3
+	bhi	.L743
+	mov	sl, #0
+	ldrh	fp, [r5, #0]
+	mov	r7, sl
+	ldr	r3, .L749
+	movw	r2, #3914
+	b	.L744
+.L748:
+	ldrh	r1, [r4, #0]
+	cmp	r1, r7
+	bne	.L745
+	ldrh	r0, [r4, #2]
+	ldrh	r1, [r3, r2]
+	cmp	r0, r1
+	movcc	r0, r7, asl #1
+	strcch	r1, [r5, r0]	@ movhi
+.L745:
+	mov	r9, r7, asl #1
+	ldrh	r8, [r5, r9]
+	cmp	fp, r8
+	movhi	sl, r7
+	movhi	fp, r8
+	cmp	r8, #0
+	bne	.L747
+	ldrh	r0, [r6, r9]
+	cmp	r0, #0
+	beq	.L747
+	mov	r1, #1
+	stmia	sp, {r2, r3}
+	bl	FtlFreeSysBlkQueueIn
+	strh	r8, [r6, r9]	@ movhi
+	ldmia	sp, {r2, r3}
+	ldrh	r1, [r4, #8]
+	sub	r1, r1, #1
+	strh	r1, [r4, #8]	@ movhi
+.L747:
+	add	r7, r7, #1
+	uxth	r7, r7
+.L744:
+	ldrh	r1, [r4, #10]
+	cmp	r1, r7
+	bhi	.L748
+	mov	r0, sl
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L750:
+	.align	2
+.L749:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
+	.align	2
+	.global	FtlFreeSysBlkQueueInit
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L752
+	movw	r2, #4038
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, #0
+	strh	r4, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	mov	r1, r4
+	strh	r4, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	strh	r4, [r3, r2]	@ movhi
+	movw	r2, #4036
+	strh	r0, [r3, r2]	@ movhi
+	mov	r2, #2048
+	ldr	r0, .L752+4
+	bl	ftl_memset
+	mov	r0, r4
+	ldmfd	sp!, {r4, pc}
+.L753:
+	.align	2
+.L752:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+4044
+	.fnend
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	2
+	.global	FtlBbtMemInit
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L755
+	movw	r2, #3976
+	mvn	r1, #0
+	ldr	r0, .L755+4
+	strh	r1, [r3, r2]	@ movhi
+	add	r2, r2, #6
+	mov	r1, #0
+	strh	r1, [r3, r2]	@ movhi
+	mov	r1, #255
+	mov	r2, #16
+	b	ftl_memset
+.L756:
+	.align	2
+.L755:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3988
+	.fnend
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	2
+	.global	FtlBbt2Bitmap
+	.type	FtlBbt2Bitmap, %function
+FtlBbt2Bitmap:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L761
+	ldr	r2, .L761+4
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	ldrh	r2, [r2, r3]
+	mov	r0, r1
+	mov	r4, r1
+	mov	r1, #0
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	mov	r3, #0
+	movw	ip, #65535
+	mov	r0, #1
+.L759:
+	ldrh	r2, [r5, r3]
+	cmp	r2, ip
+	ldmeqfd	sp!, {r4, r5, r6, pc}
+	mov	r1, r2, lsr #5
+	add	r3, r3, #2
+	cmp	r3, #1024
+	and	r2, r2, #31
+	ldr	r6, [r4, r1, asl #2]
+	orr	r2, r6, r0, asl r2
+	str	r2, [r4, r1, asl #2]
+	bne	.L759
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L762:
+	.align	2
+.L761:
+	.word	-1032
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
+	.align	2
+	.global	FtlVariablesInit
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mvn	r3, #0
+	ldr	r5, .L764
+	mov	r4, #0
+	ldr	r2, .L764+4
+	mov	r1, r4
+	ldr	r6, .L764+8
+	movw	r7, #3854
+	str	r3, [r5, #-1012]
+	strh	r3, [r5, r2]	@ movhi
+	movw	r3, #3958
+	strh	r4, [r6, r3]	@ movhi
+	movw	r3, #3932
+	ldrh	r2, [r6, r3]
+	ldr	r0, [r6, #3960]
+	str	r4, [r5, #-1028]
+	mov	r2, r2, asl #1
+	str	r4, [r5, #-1020]
+	str	r4, [r5, #-1016]
+	str	r4, [r6, #3836]
+	bl	ftl_memset
+	ldrh	r2, [r6, r7]
+	mov	r1, r4
+	ldr	r0, [r5, #-2084]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r2, [r6, r7]
+	mov	r1, r4
+	ldr	r0, [r5, #-1008]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	mov	r1, r4
+	mov	r2, #48
+	ldr	r0, .L764+12
+	bl	ftl_memset
+	mov	r1, r4
+	mov	r2, #512
+	sub	r0, r5, #1712
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L765:
+	.align	2
+.L764:
+	.word	.LANCHOR2
+	.word	-1024
+	.word	.LANCHOR0
+	.word	.LANCHOR2-2076
+	.fnend
+	.size	FtlVariablesInit, .-FtlVariablesInit
+	.align	2
+	.global	FtlMemInit
+	.type	FtlMemInit, %function
+FtlMemInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r6, #0
+	ldr	r4, .L797
+	mov	r0, #1024
+	ldr	r3, .L797+4
+	mov	r7, #12
+	ldr	r2, .L797+8
+	movw	sl, #3844
+	ldr	r5, .L797+12
+	mov	r8, #36
+	strh	r6, [r4, r3]	@ movhi
+	movw	r3, #65535
+	str	r3, [r4, #-996]
+	mvn	r3, #0
+	strh	r3, [r4, r2]	@ movhi
+	add	r2, r2, #2
+	str	r6, [r4, #-1004]
+	strh	r3, [r4, r2]	@ movhi
+	mov	r2, #32
+	ldr	r3, .L797+16
+	str	r6, [r4, #-1716]
+	str	r6, [r4, #-1808]
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	mov	r2, #128
+	str	r6, [r4, #-1804]
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #6
+	str	r6, [r4, #-1820]
+	strh	r6, [r4, r3]	@ movhi
+	add	r3, r3, #50
+	str	r6, [r4, #-1832]
+	strh	r6, [r4, r3]	@ movhi
+	add	r3, r3, #158
+	str	r6, [r4, #-1836]
+	strh	r6, [r4, r3]	@ movhi
+	sub	r3, r3, #122
+	str	r6, [r4, #-1828]
+	strh	r6, [r4, r3]	@ movhi
+	movw	r3, #3918
+	ldrh	r1, [r5, r3]
+	str	r6, [r4, #-1824]
+	str	r6, [r4, #-1840]
+	str	r6, [r4, #-1800]
+	str	r6, [r4, #-1796]
+	str	r6, [r4, #-2080]
+	str	r6, [r4, #-1788]
+	str	r6, [r4, #-1784]
+	str	r6, [r4, #-1000]
+	str	r6, [r4, #-1188]
+	str	r6, [r4, #-992]
+	str	r6, [r4, #-1196]
+	str	r6, [r4, #-988]
+	bl	__aeabi_idiv
+	movw	r3, #3844
+	ldrh	r3, [r5, r3]
+	str	r6, [r5, #3964]
+	movw	r6, #3916
+	mov	r3, r3, asl #2
+	cmp	r0, r3
+	str	r0, [r4, #-980]
+	ldrh	r0, [r5, r6]
+	strhi	r3, [r4, #-980]
+	ldr	r4, .L797
+	mov	r0, r0, asl #1
+	bl	ftl_malloc
+	str	r0, [r4, #-1156]
+	ldrh	r0, [r5, r6]
+	mul	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r6, [r5, sl]
+	mul	r6, r8, r6
+	mov	r9, r6, asl #3
+	str	r0, [r4, #-1152]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #-976]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-972]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #-968]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-2088]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-1168]
+	ldr	r0, [r4, #-980]
+	mul	r0, r8, r0
+	bl	ftl_malloc
+	movw	r8, #3922
+	ldrh	r3, [r5, sl]
+	ldrh	r6, [r5, r8]
+	mov	r3, r3, asl #1
+	add	r3, r3, #1
+	str	r3, [r4, #-1164]
+	str	r0, [r5, #3968]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-964]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-960]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-956]
+	ldr	r0, [r4, #-1164]
+	mul	r0, r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-1176]
+	ldr	r0, [r4, #-980]
+	mul	r0, r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-952]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #-948]
+	mov	r0, r6
+	bl	ftl_malloc
+	movw	r6, #3924
+	str	r0, [r4, #-944]
+	ldr	r0, [r4, #-1164]
+	mul	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r3, [r5, r6]
+	ldrh	sl, [r5, sl]
+	mul	sl, sl, r3
+	str	r0, [r4, #-1180]
+	mov	r0, sl
+	bl	ftl_malloc
+	str	r0, [r4, #-940]
+	mov	r0, sl, asl #3
+	bl	ftl_malloc
+	ldrh	r3, [r5, r6]
+	ldr	sl, .L797+20
+	str	r0, [r4, #-936]
+	ldr	r0, [r4, #-1164]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrh	r3, [r5, r6]
+	movw	r6, #3854
+	str	r0, [r4, #-1172]
+	ldr	r0, [r4, #-980]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	str	r0, [r4, #-932]
+	ldrh	r0, [r5, r6]
+	mov	r0, r0, asl #1
+	uxth	r0, r0
+	strh	r0, [r4, sl]	@ movhi
+	bl	ftl_malloc
+	str	r0, [r4, #-1008]
+	ldrh	r0, [r4, sl]
+	add	r0, r0, #544
+	add	r0, r0, #3
+	mov	r0, r0, lsr #9
+	strh	r0, [r4, sl]	@ movhi
+	mov	r0, r0, asl #9
+	bl	ftl_malloc
+	ldrh	sl, [r5, r6]
+	mov	sl, sl, asl #1
+	str	r0, [r4, #-924]
+	add	r0, r0, #32
+	str	r0, [r4, #-2084]
+	mov	r0, sl
+	bl	ftl_malloc
+	str	r0, [r4, #-920]
+	mov	r0, sl
+	bl	ftl_malloc
+	ldr	sl, [r5, #3940]
+	mov	sl, sl, asl #1
+	str	r0, [r4, #-2020]
+	mov	r0, sl
+	bl	ftl_malloc
+	str	r0, [r4, #-1044]
+	mov	r0, sl
+	bl	ftl_malloc
+	movw	sl, #3932
+	str	r0, [r4, #-1100]
+	ldrh	r0, [r5, r6]
+	mov	r0, r0, lsr #3
+	add	r0, r0, #4
+	bl	ftl_malloc
+	str	r0, [r4, #-1844]
+	ldrh	r0, [r5, sl]
+	mov	r0, r0, asl #1
+	bl	ftl_malloc
+	str	r0, [r5, #3960]
+	ldrh	r0, [r5, sl]
+	mov	r0, r0, asl #1
+	bl	ftl_malloc
+	str	r0, [r4, #-916]
+	ldrh	r0, [r5, sl]
+	add	sl, sl, #2
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	str	r0, [r4, #-912]
+	ldrh	r0, [r5, sl]
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	ldrh	r2, [r5, sl]
+	mov	r1, #0
+	mov	r2, r2, asl #2
+	str	r0, [r4, #-908]
+	bl	ftl_memset
+	movw	r3, #3948
+	ldrh	sl, [r5, r3]
+	mov	sl, sl, asl #2
+	mov	r0, sl
+	bl	ftl_malloc
+	str	r0, [r4, #-1036]
+	mov	r0, sl
+	bl	ftl_malloc
+	movw	sl, #3950
+	str	r0, [r4, #-904]
+	ldr	r0, [r5, #3940]
+	mov	r0, r0, asl #2
+	bl	ftl_malloc
+	str	r0, [r4, #-1040]
+	ldrh	r0, [r5, sl]
+	mul	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r3, [r5, sl]
+	movw	r7, #3866
+	str	r0, [r4, #-1856]
+	ldrh	r0, [r5, r8]
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	ldrh	r3, [r5, r6]
+	ldr	r6, .L797+24
+	str	r0, [r4, #-1096]
+	mov	r0, #6
+	mul	r0, r0, r3
+	bl	ftl_malloc
+	movw	r3, #3908
+	ldrh	r3, [r5, r3]
+	ldrh	r2, [r5, r7]
+	add	r3, r3, #31
+	mov	r3, r3, lsr #5
+	strh	r3, [r4, r6]	@ movhi
+	mul	r3, r2, r3
+	str	r0, [r4, #-2028]
+	mov	r0, r3, asl #2
+	bl	ftl_malloc
+	ldrh	r1, [r4, r6]
+	mov	r3, #1
+	ldr	ip, .L797+12
+	mov	r1, r1, asl #2
+	mov	r2, r1
+	str	r0, [r5, #4004]
+	ldrh	r5, [r5, r7]
+	ldr	r0, .L797+28
+	b	.L768
+.L769:
+	ldr	r4, [ip, #4004]
+	add	r3, r3, #1
+	add	r4, r4, r2
+	add	r2, r2, r1
+	str	r4, [r0, #4]!
+.L768:
+	cmp	r3, r5
+	bcc	.L769
+	ldr	r0, .L797+32
+	mov	r2, #0
+	mov	r1, r2
+	add	r0, r0, r3, asl #2
+	b	.L770
+.L771:
+	add	ip, r0, r2
+	add	r3, r3, #1
+	add	r2, r2, #4
+	str	r1, [ip, #28]
+.L770:
+	cmp	r3, #7
+	bls	.L771
+	ldr	r3, .L797
+	ldr	r2, [r3, #-1044]
+	cmp	r2, #0
+	beq	.L796
+.L772:
+	ldr	r2, [r3, #-1100]
+	cmp	r2, #0
+	beq	.L796
+.L774:
+	ldr	r2, [r3, #-1036]
+	cmp	r2, #0
+	beq	.L796
+.L775:
+	ldr	r2, [r3, #-1040]
+	cmp	r2, #0
+	beq	.L796
+.L776:
+	ldr	r2, [r3, #-1856]
+	cmp	r2, #0
+	beq	.L796
+.L777:
+	ldr	r2, [r3, #-1096]
+	cmp	r2, #0
+	beq	.L796
+.L778:
+	ldr	r2, [r3, #-2028]
+	cmp	r2, #0
+	beq	.L796
+.L779:
+	ldr	r2, .L797+12
+	ldr	r2, [r2, #4004]
+	cmp	r2, #0
+	beq	.L796
+.L780:
+	ldr	r3, [r3, #-2020]
+	cmp	r3, #0
+	beq	.L796
+.L781:
+	ldr	r3, .L797
+	ldr	r2, [r3, #-1156]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-1152]
+	cmp	r2, #0
+	beq	.L796
+.L783:
+	ldr	r2, [r3, #-976]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-968]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-2088]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-1168]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-972]
+	cmp	r2, #0
+	beq	.L796
+.L785:
+	ldr	r2, [r3, #-964]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-960]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r3, [r3, #-956]
+	cmp	r3, #0
+	beq	.L796
+	ldr	r3, .L797
+	ldr	r2, [r3, #-1176]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-948]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-944]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-1180]
+	cmp	r2, #0
+	beq	.L796
+.L787:
+	ldr	r2, [r3, #-940]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-936]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r2, [r3, #-1172]
+	cmp	r2, #0
+	beq	.L796
+.L789:
+	ldr	r2, [r3, #-2084]
+	cmp	r2, #0
+	beq	.L796
+	ldr	r3, [r3, #-1008]
+	cmp	r3, #0
+	beq	.L796
+.L791:
+	ldr	r3, .L797+12
+	ldr	r3, [r3, #3960]
+	cmp	r3, #0
+	beq	.L796
+.L792:
+	ldr	r3, .L797
+	ldr	r2, [r3, #-916]
+	cmp	r2, #0
+	beq	.L796
+.L793:
+	ldr	r2, [r3, #-912]
+	cmp	r2, #0
+	beq	.L796
+.L794:
+	ldr	r3, [r3, #-908]
+	cmp	r3, #0
+	bne	.L795
+.L796:
+	ldr	r0, .L797+36
+	ldr	r1, .L797+40
+	bl	printk
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L795:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L798:
+	.align	2
+.L797:
+	.word	.LANCHOR2
+	.word	-1104
+	.word	-1146
+	.word	.LANCHOR0
+	.word	-1200
+	.word	-928
+	.word	-1032
+	.word	.LANCHOR0+4004
+	.word	.LANCHOR0+3976
+	.word	.LC83
+	.word	.LANCHOR3
+	.fnend
+	.size	FtlMemInit, .-FtlMemInit
+	.align	2
+	.global	ftl_read_flash_info
+	.type	ftl_read_flash_info, %function
+ftl_read_flash_info:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r1, #0
+	mov	r2, #11
+	mov	r4, r0
+	bl	ftl_memset
+	ldr	r3, .L802
+	ldr	r2, [r3, #3624]
+	ldr	r1, [r3, #856]
+	ldrb	r2, [r2, #9]	@ zero_extendqisi2
+	mul	r2, r1, r2
+	mov	r1, #0
+	uxth	r2, r2
+	strb	r2, [r4, #4]
+	mov	r2, r2, lsr #8
+	strb	r2, [r4, #5]
+	ldrb	r2, [r3, #3832]	@ zero_extendqisi2
+	strb	r2, [r4, #7]
+	ldr	r2, [r3, #3952]
+	ubfx	r0, r2, #8, #8
+	strb	r0, [r4, #1]
+	strb	r2, [r4, #0]
+	ubfx	r0, r2, #16, #8
+	mov	r2, r2, lsr #24
+	strb	r0, [r4, #2]
+	strb	r2, [r4, #3]
+	ldr	r2, [r3, #3624]
+	ldrb	r0, [r2, #9]	@ zero_extendqisi2
+	strb	r0, [r4, #6]
+	mov	r0, #32
+	strb	r0, [r4, #8]
+	ldrb	r2, [r2, #7]	@ zero_extendqisi2
+	ldrb	r0, [r3, #3762]	@ zero_extendqisi2
+	mov	r3, r1
+	strb	r1, [r4, #10]
+	strb	r2, [r4, #9]
+	mov	r2, #1
+	ldr	r1, .L802+4
+	b	.L800
+.L801:
+	ldrb	r5, [r3, r1]	@ zero_extendqisi2
+	add	r3, r3, #1
+	ldrb	ip, [r4, #10]	@ zero_extendqisi2
+	orr	ip, ip, r2, asl r5
+	strb	ip, [r4, #10]
+.L800:
+	uxtb	ip, r3
+	cmp	ip, r0
+	bcc	.L801
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L803:
+	.align	2
+.L802:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3764
+	.fnend
+	.size	ftl_read_flash_info, .-ftl_read_flash_info
+	.align	2
+	.global	FlashDieInfoInit
+	.type	FlashDieInfoInit, %function
+FlashDieInfoInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r1, .L816
+	mov	r2, #0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	ldr	r3, .L816+4
+	strb	r2, [r1, #-900]
+	ldr	r1, .L816+8
+	strb	r2, [r3, #3762]
+	movw	r2, #2902
+	ldrh	r2, [r1, r2]
+	cmp	r2, #256
+	str	r2, [r3, #856]
+	movhi	r2, #512
+	bhi	.L815
+	cmp	r2, #128
+	bls	.L806
+	mov	r2, #256
+.L815:
+	str	r2, [r3, #856]
+.L806:
+	mov	r1, #0
+	mov	r2, #8
+	ldr	r0, .L816+12
+	mov	r6, #0
+	bl	ftl_memset
+	mov	r1, #0
+	mov	r2, #32
+	ldr	r0, .L816+16
+	bl	ftl_memset
+	ldr	r0, .L816+20
+	mov	r1, #0
+	mov	r2, #128
+	bl	ftl_memset
+	ldr	r7, .L816+24
+	ldr	r5, .L816+4
+	mov	r8, r7
+.L808:
+	ldr	r4, [r5, #3624]
+	mov	r1, r8
+	add	r0, r4, #1
+	ldrb	r2, [r4, #0]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	cmp	r0, #0
+	bne	.L807
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
+	add	r2, r5, r3, asl #2
+	str	r0, [r2, #3588]
+	add	r2, r5, r3
+	add	r3, r3, #1
+	strb	r3, [r5, #3762]
+	strb	r6, [r2, #3764]
+.L807:
+	add	r6, r6, #1
+	add	r8, r8, #8
+	cmp	r6, #4
+	bne	.L808
+	ldr	r5, .L816+4
+	ldr	r3, .L816
+	ldrb	r2, [r5, #3762]	@ zero_extendqisi2
+	strb	r2, [r3, #-900]
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cmp	r3, #2
+	bne	.L809
+	add	sl, r4, #1
+	mov	r6, #0
+	mov	r8, r5
+.L812:
+	mov	r0, sl
+	mov	r1, r7
+	ldrb	r2, [r4, #0]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	cmp	r0, #0
+	bne	.L810
+	ldrb	r1, [r4, #13]	@ zero_extendqisi2
+	ldr	r0, [r5, #856]
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
+	mul	r0, r0, r1
+	ldrh	r1, [r4, #14]
+	add	r2, r5, r3, asl #2
+	and	r1, r1, #65280
+	mul	r1, r1, r0
+	str	r1, [r2, #3588]
+	ldrb	r0, [r4, #23]	@ zero_extendqisi2
+	cmp	r0, #0
+	movne	r1, r1, asl #1
+	strne	r1, [r2, #3588]
+	add	r2, r8, r3
+	add	r3, r3, #1
+	strb	r3, [r8, #3762]
+	strb	r6, [r2, #3764]
+.L810:
+	add	r6, r6, #1
+	add	r7, r7, #8
+	cmp	r6, #4
+	bne	.L812
+.L809:
+	ldr	r3, .L816+4
+	ldrb	r1, [r4, #13]	@ zero_extendqisi2
+	ldr	r2, .L816
+	ldrb	r3, [r3, #3762]	@ zero_extendqisi2
+	mul	r1, r1, r3
+	ldrh	r3, [r4, #14]
+	mul	r1, r3, r1
+	ldr	r3, .L816+28
+	strh	r1, [r2, r3]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L817:
+	.align	2
+.L816:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR0+3764
+	.word	.LANCHOR0+3588
+	.word	.LANCHOR0+3628
+	.word	.LANCHOR0+2980
+	.word	-898
+	.fnend
+	.size	FlashDieInfoInit, .-FlashDieInfoInit
+	.align	2
+	.global	BuildFlashLsbPageTable
+	.type	BuildFlashLsbPageTable, %function
+BuildFlashLsbPageTable:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r0, #0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r1
+	bne	.L819
+	ldr	r3, .L858
+.L820:
+	strh	r0, [r3, #2]!	@ movhi
+	add	r0, r0, #1
+	uxth	r0, r0
+	cmp	r0, #256
+	bne	.L820
+	b	.L821
+.L819:
+	cmp	r0, #1
+	bne	.L822
+	ldr	r0, .L858+4
+	mov	r2, #0
+	mov	r3, r2
+.L825:
+	uxth	r1, r3
+	cmp	r1, #3
+	bls	.L823
+	tst	r3, #1
+	moveq	r1, #2
+	movne	r1, #3
+	rsb	r1, r1, r2
+	uxth	r1, r1
+.L823:
+	add	r3, r3, #1
+	strh	r1, [r2, r0]	@ movhi
+	cmp	r3, #256
+	add	r2, r2, #2
+	bne	.L825
+	b	.L821
+.L822:
+	cmp	r0, #2
+	bne	.L826
+	mov	r3, #0
+	ldr	r0, .L858
+	movw	r2, #65535
+	mov	r1, r3
+	b	.L857
+.L829:
+	cmp	r3, #1
+	movls	r1, r3
+	movhi	r1, r2
+.L857:
+	add	r3, r3, #1
+	add	r2, r2, #2
+	strh	r1, [r0, #2]!	@ movhi
+	uxth	r3, r3
+	uxth	r2, r2
+	cmp	r3, #256
+	bne	.L829
+	b	.L821
+.L826:
+	cmp	r0, #3
+	bne	.L830
+	ldr	r0, .L858+4
+	mov	r2, #0
+	mov	r3, r2
+.L833:
+	uxth	r1, r3
+	cmp	r1, #5
+	bls	.L831
+	tst	r3, #1
+	moveq	r1, #4
+	movne	r1, #5
+	rsb	r1, r1, r2
+	uxth	r1, r1
+.L831:
+	add	r3, r3, #1
+	strh	r1, [r2, r0]	@ movhi
+	cmp	r3, #256
+	add	r2, r2, #2
+	bne	.L833
+	b	.L821
+.L830:
+	cmp	r0, #4
+	mov	r2, #0
+	bne	.L834
+	ldr	r3, .L858+8
+	movw	r1, #3076
+	strh	r2, [r3, r1]	@ movhi
+	movw	r2, #3078
+	mov	r1, #1
+	strh	r1, [r3, r2]	@ movhi
+	mov	r1, #2
+	add	r2, r2, r1
+	strh	r1, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	mov	r1, #3
+	strh	r1, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	mov	r1, #5
+	strh	r0, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	ldr	r0, .L858+12
+	strh	r1, [r3, r2]	@ movhi
+	mov	r2, #3088
+	mov	r1, #7
+	strh	r1, [r3, r2]	@ movhi
+	add	r2, r2, #2
+	mov	r1, #8
+	strh	r1, [r3, r2]	@ movhi
+	mov	r2, #16
+	mov	r3, r1
+.L836:
+	tst	r3, #1
+	add	r3, r3, #1
+	moveq	r1, #6
+	movne	r1, #7
+	cmp	r3, #256
+	rsb	r1, r1, r2
+	add	r2, r2, #2
+	strh	r1, [r0, #2]!	@ movhi
+	uxth	r2, r2
+	bne	.L836
+	b	.L821
+.L834:
+	cmp	r0, #5
+	bne	.L837
+	ldr	r1, .L858
+	mov	r3, r2
+.L838:
+	strh	r3, [r1, #2]!	@ movhi
+	add	r3, r3, #1
+	uxth	r3, r3
+	cmp	r3, #16
+	bne	.L838
+	ldr	r2, .L858+16
+.L839:
+	strh	r3, [r2, #2]!	@ movhi
+	add	r3, r3, #2
+	uxth	r3, r3
+	cmp	r3, #496
+	bne	.L839
+	b	.L821
+.L837:
+	cmp	r0, #6
+	bne	.L821
+	ldr	r0, .L858
+	mov	r3, r2
+.L842:
+	uxth	r1, r3
+	cmp	r1, #5
+	bls	.L840
+	tst	r3, #1
+	moveq	r1, #10
+	movne	r1, #12
+	rsb	r1, r1, r2
+	uxth	r1, r1
+.L840:
+	add	r3, r3, #1
+	add	r2, r2, #3
+	cmp	r3, #256
+	strh	r1, [r0, #2]!	@ movhi
+	uxth	r2, r2
+	bne	.L842
+.L821:
+	mov	r2, #1024
+	ldr	r0, .L858+20
+	mov	r1, #255
+	uxth	r4, r4
+	bl	ftl_memset
+	ldr	r2, .L858
+	mov	r3, #0
+	ldr	r0, .L858+24
+	b	.L843
+.L844:
+	ldrh	r1, [r2, #2]!
+	add	r3, r3, #1
+	uxth	r3, r3
+	add	ip, r0, r1, asl #1
+	sub	ip, ip, #896
+	strh	r1, [ip, #0]	@ movhi
+.L843:
+	cmp	r3, r4
+	bcc	.L844
+	ldmfd	sp!, {r4, pc}
+.L859:
+	.align	2
+.L858:
+	.word	.LANCHOR0+3074
+	.word	.LANCHOR0+3076
+	.word	.LANCHOR0
+	.word	.LANCHOR0+3090
+	.word	.LANCHOR0+3106
+	.word	.LANCHOR2-896
+	.word	.LANCHOR2
+	.fnend
+	.size	BuildFlashLsbPageTable, .-BuildFlashLsbPageTable
+	.align	2
+	.global	ftl_memcpy
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memcpy
+	.fnend
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	2
+	.global	ftl_memcpy32
+	.type	ftl_memcpy32, %function
+ftl_memcpy32:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, #0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	ip, r3
+	b	.L862
+.L863:
+	ldr	r4, [r1, r3]
+	add	ip, ip, #1
+	str	r4, [r0, r3]
+	add	r3, r3, #4
+.L862:
+	cmp	ip, r2
+	bne	.L863
+	ldmfd	sp!, {r4, pc}
+	.fnend
+	.size	ftl_memcpy32, .-ftl_memcpy32
+	.align	2
+	.global	ftl_memcmp
+	.type	ftl_memcmp, %function
+ftl_memcmp:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memcmp
+	.fnend
+	.size	ftl_memcmp, .-ftl_memcmp
+	.align	2
+	.global	js_hash
+	.type	js_hash, %function
+js_hash:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, r0
+	mov	r2, #0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	ldr	r0, .L868
+	b	.L866
+.L867:
+	mov	ip, r0, asl #5
+	ldrb	r4, [r3, r2]	@ zero_extendqisi2
+	add	ip, ip, r0, lsr #2
+	add	r2, r2, #1
+	add	ip, ip, r4
+	eor	r0, r0, ip
+.L866:
+	cmp	r2, r1
+	bne	.L867
+	ldmfd	sp!, {r4, pc}
+.L869:
+	.align	2
+.L868:
+	.word	1204201446
+	.fnend
+	.size	js_hash, .-js_hash
+	.align	2
+	.global	timer_get_time
+	.type	timer_get_time, %function
+timer_get_time:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L871
+	ldr	r0, [r3, #0]
+	b	jiffies_to_msecs
+.L872:
+	.align	2
+.L871:
+	.word	jiffies
+	.fnend
+	.size	timer_get_time, .-timer_get_time
+	.align	2
+	.global	FlashSramLoadStore
+	.type	FlashSramLoadStore, %function
+FlashSramLoadStore:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	cmp	r2, #0
+	ldr	r4, .L876
+	mov	ip, r0
+	mov	r2, r3
+	ldr	r4, [r4, #128]
+	add	r4, r4, #4096
+	add	r1, r4, r1
+	movne	r0, r1
+	movne	r1, ip
+	ldmfd	sp!, {r4, lr}
+	b	memcpy
+.L877:
+	.align	2
+.L876:
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashSramLoadStore, .-FlashSramLoadStore
+	.align	2
+	.global	FlashCs123Init
+	.type	FlashCs123Init, %function
+FlashCs123Init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FlashCs123Init, .-FlashCs123Init
+	.align	2
+	.global	rk_nand_suspend
+	.type	rk_nand_suspend, %function
+rk_nand_suspend:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_flash_suspend
+	.fnend
+	.size	rk_nand_suspend, .-rk_nand_suspend
+	.align	2
+	.global	rk_nand_resume
+	.type	rk_nand_resume, %function
+rk_nand_resume:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_flash_resume
+	.fnend
+	.size	rk_nand_resume, .-rk_nand_resume
+	.align	2
+	.global	rk_ftl_get_capacity
+	.type	rk_ftl_get_capacity, %function
+rk_ftl_get_capacity:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L882
+	ldr	r0, [r3, #3952]
+	bx	lr
+.L883:
+	.align	2
+.L882:
+	.word	.LANCHOR0
+	.fnend
+	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
+	.align	2
+	.global	rk_nandc_get_irq_status
+	.type	rk_nandc_get_irq_status, %function
+rk_nandc_get_irq_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, [r0, #372]
+	bx	lr
+	.fnend
+	.size	rk_nandc_get_irq_status, .-rk_nandc_get_irq_status
+	.align	2
+	.global	rknand_proc_ftlread
+	.type	rknand_proc_ftlread, %function
+rknand_proc_ftlread:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_proc_ftl_read
+	.fnend
+	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
+	.align	2
+	.global	ReadFlashInfo
+	.type	ReadFlashInfo, %function
+ReadFlashInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_read_flash_info
+	.fnend
+	.size	ReadFlashInfo, .-ReadFlashInfo
+	.align	2
+	.global	rknand_print_hex
+	.type	rknand_print_hex, %function
+rknand_print_hex:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r5, #0
+	mov	r8, r0
+	mov	r6, r1
+	mov	r7, r2
+	mov	sl, r3
+	mov	r4, r5
+	b	.L888
+.L894:
+	cmp	r5, #0
+	bne	.L889
+	ldr	r0, .L896
+	mov	r1, r8
+	mov	r2, r6
+	mov	r3, r4
+	bl	printk
+.L889:
+	cmp	r7, #4
+	ldreq	r0, .L896+4
+	ldreq	r1, [r6, r4, asl #2]
+	beq	.L895
+	cmp	r7, #2
+	moveq	r3, r4, asl #1
+	ldreq	r0, .L896+4
+	ldreqsh	r1, [r6, r3]
+	ldrne	r0, .L896+4
+	ldrneb	r1, [r6, r4]	@ zero_extendqisi2
+.L895:
+	add	r5, r5, #1
+	bl	printk
+	cmp	r5, #15
+	bls	.L893
+	ldr	r0, .L896+8
+	mov	r5, #0
+	ldr	r1, .L896+12
+	bl	printk
+.L893:
+	add	r4, r4, #1
+.L888:
+	cmp	r4, sl
+	bne	.L894
+	ldr	r0, .L896+8
+	ldr	r1, .L896+12
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	b	printk
+.L897:
+	.align	2
+.L896:
+	.word	.LC84
+	.word	.LC85
+	.word	.LC78
+	.word	.LC86
+	.fnend
+	.size	rknand_print_hex, .-rknand_print_hex
+	.align	2
+	.global	NandcXferComp
+	.type	NandcXferComp, %function
+NandcXferComp:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, lr}
+	.save {r0, r1, r4, r5, r6, lr}
+	ldr	r6, .L921
+	add	r0, r6, r0, asl #3
+	ldr	r3, [r6, #3780]
+	ldr	r4, [r0, #864]
+	cmp	r3, #3
+	bls	.L915
+	ldr	r3, [r4, #16]
+	tst	r3, #4
+	beq	.L915
+	mov	r0, r4
+	bl	wait_for_nandc_xfer_completed
+	ldr	r5, [r4, #16]
+	ldr	r3, [r4, #8]
+	ands	r5, r5, #2
+	str	r3, [sp, #0]
+	movne	r5, #0
+	bne	.L919
+	b	.L920
+.L905:
+	ldr	r3, [r6, #3780]
+	cmp	r3, #5
+	bls	.L902
+	ldr	r3, [r4, #0]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	tst	r3, #8192
+	beq	.L902
+	ldr	r3, [sp, #4]
+	tst	r3, #131072
+	bne	.L903
+.L902:
+	add	r5, r5, #1
+	bic	r3, r5, #-16777216
+	cmp	r3, #0
+	bne	.L919
+	ldr	r2, [r4, #28]
+	mov	r1, r5
+	ldr	r3, [sp, #0]
+	ubfx	r2, r2, #16, #5
+	ldr	r0, .L921+4
+	ubfx	r3, r3, #22, #6
+	bl	printk
+	ldr	r0, .L921+8
+	mov	r1, r4
+	mov	r2, #4
+	mov	r3, #512
+	bl	rknand_print_hex
+.L919:
+	ldr	r2, [r4, #28]
+	ldr	r3, [sp, #0]
+	ubfx	r2, r2, #16, #5
+	ubfx	r3, r3, #22, #6
+	cmp	r2, r3
+	blt	.L905
+.L903:
+	ldr	r4, .L921
+	ldr	r3, [r4, #3816]
+	cmp	r3, #0
+	beq	.L906
+	ldr	r1, [sp, #0]
+	mov	r2, #0
+	ldr	r0, [r4, #3808]
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r1, [sp, #0]
+	ldr	r0, [r4, #3812]
+	mov	r2, #0
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #7
+	bl	rknand_dma_unmap_single
+	b	.L906
+.L909:
+	ldr	r3, [r4, #8]
+	add	r5, r5, #1
+	str	r3, [sp, #0]
+	bic	r3, r5, #-16777216
+	cmp	r3, #0
+	bne	.L920
+	ldr	r2, [sp, #0]
+	mov	r1, r5
+	ldr	r3, [r4, #28]
+	ldr	r0, .L921+12
+	ubfx	r3, r3, #16, #5
+	bl	printk
+	ldr	r0, .L921+8
+	mov	r1, r4
+	mov	r2, #4
+	mov	r3, #512
+	bl	rknand_print_hex
+.L920:
+	ldr	r3, [sp, #0]
+	tst	r3, #1048576
+	beq	.L909
+	ldr	r6, .L921
+	ldr	r3, [r6, #3824]
+	cmp	r3, #0
+	beq	.L910
+	mov	r0, r4
+	bl	NandcSendDumpDataStart
+.L910:
+	ldr	r3, [r6, #3816]
+	ldr	r5, .L921
+	cmp	r3, #0
+	beq	.L911
+	ldr	r1, [sp, #0]
+	mov	r2, #1
+	ldr	r0, [r5, #3808]
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #10
+	bl	rknand_dma_unmap_single
+	ldr	r1, [sp, #0]
+	ldr	r0, [r5, #3812]
+	mov	r2, #1
+	ubfx	r1, r1, #22, #5
+	mov	r1, r1, asl #7
+	bl	rknand_dma_unmap_single
+.L911:
+	ldr	r3, .L921
+	ldr	r3, [r3, #3824]
+	cmp	r3, #0
+	beq	.L906
+	mov	r0, r4
+	bl	NandcSendDumpDataDone
+.L906:
+	ldr	r3, .L921
+	mov	r2, #0
+	str	r2, [r3, #3816]
+	b	.L898
+.L915:
+	ldr	r3, [r4, #8]
+	str	r3, [sp, #0]
+	ldr	r3, [sp, #0]
+	tst	r3, #1048576
+	beq	.L915
+.L898:
+	ldmfd	sp!, {r2, r3, r4, r5, r6, pc}
+.L922:
+	.align	2
+.L921:
+	.word	.LANCHOR0
+	.word	.LC87
+	.word	.LC88
+	.word	.LC89
+	.fnend
+	.size	NandcXferComp, .-NandcXferComp
+	.align	2
+	.global	NandcXferData
+	.type	NandcXferData, %function
+NandcXferData:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 80
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r4, r3
+	mov	r9, r3
+	ldr	r3, .L961
+	.pad #92
+	sub	sp, sp, #92
+	tst	r4, #63
+	add	r3, r3, r0, asl #3
+	mov	r7, r0
+	mov	fp, r1
+	mov	sl, r2
+	ldr	r5, [sp, #128]
+	ldr	r6, [r3, #864]
+	bne	.L924
+	cmp	r5, #0
+	bne	.L925
+	add	r0, sp, #24
+	mov	r1, #255
+	mov	r2, #64
+	add	r5, sp, #24
+	bl	ftl_memset
+.L925:
+	mov	r0, r7
+	mov	r1, fp
+	mov	r2, sl
+	mov	r3, #0
+	stmia	sp, {r4, r5}
+	bl	NandcXferStart
+	mov	r0, r7
+	bl	NandcXferComp
+	cmp	fp, #0
+	movne	r4, #0
+	bne	.L926
+	ldr	r1, .L961
+	mov	r0, sl, lsr #1
+	mov	r3, fp
+	mov	r2, fp
+	ldr	ip, [r1, #3828]
+	mov	r4, r1
+	cmp	ip, #24
+	movhi	ip, #128
+	movls	ip, #64
+	b	.L928
+.L929:
+	ldr	r1, [r4, #3796]
+	mov	r3, r3, lsr #2
+	add	r2, r2, #1
+	ldr	r3, [r1, r3, asl #2]
+	mov	r1, r3, lsr #8
+	strb	r3, [r5, #0]
+	strb	r1, [r5, #1]
+	mov	r1, r3, lsr #16
+	mov	r3, r3, lsr #24
+	strb	r1, [r5, #2]
+	strb	r3, [r5, #3]
+	add	r5, r5, #4
+	mov	r3, r7
+.L928:
+	cmp	r2, r0
+	add	r7, r3, ip
+	ldr	r1, .L961
+	bcc	.L929
+	mov	r3, #0
+	ldr	r0, [r1, #3828]
+	mov	sl, sl, lsr #2
+	ldr	r1, [r1, #3780]
+	mov	r4, r3
+	b	.L930
+.L936:
+	add	r2, r3, #8
+	ldr	r2, [r6, r2, asl #2]
+	str	r2, [sp, #20]
+	ldr	r2, [sp, #20]
+	tst	r2, #4
+	bne	.L951
+	ldr	r2, [sp, #20]
+	ands	r2, r2, #32768
+	bne	.L951
+	cmp	r1, #5
+	bls	.L932
+	ldr	r7, [sp, #20]
+	ldr	ip, [sp, #20]
+	ldr	r5, [sp, #20]
+	ubfx	r7, r7, #3, #5
+	ldr	r2, [sp, #20]
+	ubfx	ip, ip, #27, #1
+	ubfx	r5, r5, #16, #5
+	ubfx	r2, r2, #29, #1
+	orr	ip, r7, ip, asl #5
+	orr	r2, r5, r2, asl #5
+	cmp	ip, r2
+	ldr	ip, [sp, #20]
+	ldrhi	r2, [sp, #20]
+	ubfxhi	ip, ip, #3, #5
+	ldrls	r2, [sp, #20]
+	ubfxls	ip, ip, #16, #5
+	ubfxhi	r2, r2, #27, #1
+	ubfxls	r2, r2, #29, #1
+	b	.L959
+.L932:
+	cmp	r1, #3
+	bls	.L934
+	ldr	r7, [sp, #20]
+	ldr	ip, [sp, #20]
+	ldr	r5, [sp, #20]
+	ubfx	r7, r7, #3, #5
+	ldr	r2, [sp, #20]
+	ubfx	ip, ip, #28, #1
+	ubfx	r5, r5, #16, #5
+	ubfx	r2, r2, #30, #1
+	orr	ip, r7, ip, asl #5
+	orr	r2, r5, r2, asl #5
+	cmp	ip, r2
+	ldr	ip, [sp, #20]
+	ldrhi	r2, [sp, #20]
+	ubfxhi	ip, ip, #3, #5
+	ldrls	r2, [sp, #20]
+	ubfxls	ip, ip, #16, #5
+	ubfxhi	r2, r2, #28, #1
+	ubfxls	r2, r2, #30, #1
+.L959:
+	orr	r2, ip, r2, asl #5
+.L934:
+	cmp	r4, r2
+	movcc	r4, r2
+	b	.L931
+.L951:
+	mvn	r4, #0
+.L931:
+	add	r3, r3, #1
+.L930:
+	cmp	r3, sl
+	bcs	.L926
+	cmp	r0, #0
+	bne	.L936
+.L926:
+	mov	r3, #0
+	str	r3, [r6, #16]
+	b	.L937
+.L924:
+	cmp	r1, #1
+	mov	r8, #0
+	bne	.L957
+	b	.L938
+.L941:
+	cmp	r5, #0
+	and	r4, r8, #3
+	mov	r0, r6
+	mov	r1, #1
+	movne	r3, #2
+	moveq	r3, #0
+	mla	r3, r8, r3, r5
+	mov	r2, r4
+	add	r8, r8, #2
+	str	r3, [sp, #0]
+	mov	r3, r9
+	bl	NandcCopy1KB
+	mov	r3, #0
+	mov	r0, r7
+	str	r3, [sp, #0]
+	str	r3, [sp, #4]
+	mov	r1, #1
+	mov	r2, #2
+	mov	r3, r4
+	bl	NandcXferStart
+	mov	r0, r7
+	bl	NandcXferComp
+	add	r9, r9, #1024
+.L938:
+	cmp	r8, sl
+	bcc	.L941
+	mov	r4, #0
+	b	.L937
+.L957:
+	mov	r1, r8
+	mov	r2, #2
+	mov	r3, r8
+	str	r8, [sp, #0]
+	str	r8, [sp, #4]
+	mov	r4, r8
+	bl	NandcXferStart
+	str	fp, [sp, #12]
+	mov	ip, r8
+	mov	fp, r6
+	mov	r6, r5
+	b	.L960
+.L946:
+	mov	r0, r7
+	bl	NandcXferComp
+	ldr	r3, [fp, #32]
+	add	ip, r5, #2
+	cmp	ip, sl
+	str	r3, [sp, #20]
+	bcs	.L943
+	mov	r3, #0
+	mov	r0, r7
+	str	r3, [sp, #0]
+	mov	r1, r3
+	str	r3, [sp, #4]
+	mov	r2, #2
+	and	r3, ip, #3
+	str	ip, [sp, #8]
+	bl	NandcXferStart
+	ldr	ip, [sp, #8]
+.L943:
+	ldr	r3, [sp, #20]
+	tst	r3, #4
+	mvnne	r4, #0
+	bne	.L944
+	ldr	r2, [sp, #20]
+	ldr	r3, [sp, #20]
+	ubfx	r2, r2, #3, #5
+	ubfx	r3, r3, #27, #1
+	orr	r3, r2, r3, asl #5
+	cmp	r4, r3
+	movcc	r4, r3
+.L944:
+	cmp	r6, #0
+	and	r2, r8, #3
+	mov	r0, fp
+	mov	r1, #0
+	movne	r3, #2
+	moveq	r3, #0
+	mla	r5, r5, r3, r6
+	mov	r3, r9
+	str	ip, [sp, #8]
+	add	r8, r8, #2
+	add	r9, r9, #1024
+	str	r5, [sp, #0]
+	bl	NandcCopy1KB
+	ldr	ip, [sp, #8]
+.L960:
+	cmp	ip, sl
+	mov	r5, ip
+	bcc	.L946
+	mov	r6, fp
+	ldr	fp, [sp, #12]
+.L937:
+	ldr	r3, .L961
+	rsbs	fp, fp, #1
+	movcc	fp, #0
+	ldr	r3, [r3, #3780]
+	cmp	r3, #5
+	movls	fp, #0
+	cmp	fp, #0
+	beq	.L947
+	ldr	r3, [r6, #0]
+	and	r2, r3, #139264
+	cmp	r2, #139264
+	orreq	r3, r3, #131072
+	streq	r3, [r6, #0]
+	mvneq	r4, #0
+.L947:
+	mov	r0, r4
+	add	sp, sp, #92
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L962:
+	.align	2
+.L961:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcXferData, .-NandcXferData
+	.align	2
+	.global	FlashProgPage
+	.type	FlashProgPage, %function
+FlashProgPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, lr}
+	mov	r8, r3
+	ldr	r3, .L966
+	subs	r4, r0, #0
+	mov	r5, r1
+	mov	r6, r2
+	ldrb	r7, [r3, #2901]	@ zero_extendqisi2
+	bne	.L964
+	ldr	r3, .L966+4
+	ldrb	r2, [r3, #853]	@ zero_extendqisi2
+	ldr	r1, [r3, #856]
+	mul	r2, r1, r2
+	cmp	r5, r2
+	bcs	.L964
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
+	cmp	r3, #0
+	subeq	r7, r7, #2
+	movne	r7, #4
+.L964:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r0, r4
+	mov	r1, r5
+	bl	FlashProgFirstCmd
+	uxtb	r2, r7
+	mov	r3, r6
+	mov	r0, r4
+	mov	r1, #1
+	str	r8, [sp, #0]
+	bl	NandcXferData
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashProgSecondCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashReadStatus
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	and	r0, r5, #1
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
+.L967:
+	.align	2
+.L966:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgPage, .-FlashProgPage
+	.align	2
+	.global	FlashPageProgMsbFFData
+	.type	FlashPageProgMsbFFData, %function
+FlashPageProgMsbFFData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r4, r2
+	ldr	r2, .L975
+	mov	r7, r1
+	mov	r8, r0
+	ldrb	r1, [r2, #928]	@ zero_extendqisi2
+	ldr	r3, [r2, #3624]
+	cmp	r1, #0
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	beq	.L969
+	ldr	r1, [r2, #3784]
+	ldr	r2, .L975+4
+	cmp	r1, r2
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L969:
+	sub	r2, r3, #5
+	uxtb	r2, r2
+	cmp	r3, #68
+	cmpne	r2, #2
+	bls	.L972
+	cmp	r3, #35
+	cmpne	r3, #19
+	beq	.L972
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L973:
+	add	r3, r5, r4, asl #1
+	sub	r3, r3, #896
+	ldrh	r3, [r3, #0]
+	cmp	r3, sl
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+	mov	r1, #255
+	mov	r2, #32768
+	ldr	r0, [r5, #132]
+	bl	ftl_memset
+	add	r1, r4, r7
+	add	r4, r4, #1
+	mov	r0, r8
+	ldr	r2, [r5, #132]
+	mov	r3, #0
+	bl	FlashProgPage
+	uxth	r4, r4
+	b	.L974
+.L972:
+	ldr	r6, .L975
+	movw	sl, #65535
+	ldr	r5, .L975+8
+.L974:
+	ldr	r3, [r6, #3624]
+	ldrh	r3, [r3, #10]
+	cmp	r3, r4
+	bhi	.L973
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L976:
+	.align	2
+.L975:
+	.word	.LANCHOR0
+	.word	1446522928
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashPageProgMsbFFData, .-FlashPageProgMsbFFData
+	.align	2
+	.global	FlashReadRawPage
+	.type	FlashReadRawPage, %function
+FlashReadRawPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, lr}
+	mov	r8, r3
+	ldr	r3, .L980
+	subs	r4, r0, #0
+	mov	r6, r1
+	mov	r5, r2
+	ldrb	r7, [r3, #2901]	@ zero_extendqisi2
+	bne	.L978
+	ldr	r3, .L980+4
+	ldrb	r2, [r3, #853]	@ zero_extendqisi2
+	ldr	r3, [r3, #856]
+	mul	r3, r3, r2
+	cmp	r1, r3
+	movcc	r7, #4
+.L978:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r1, r6
+	mov	r0, r4
+	bl	FlashReadCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r3, r5
+	mov	r1, #0
+	mov	r2, r7
+	mov	r0, r4
+	str	r8, [sp, #0]
+	bl	NandcXferData
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	mov	r0, r5
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
+.L981:
+	.align	2
+.L980:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadRawPage, .-FlashReadRawPage
+	.align	2
+	.global	HynixReadRetrial
+	.type	HynixReadRetrial, %function
+HynixReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r7, r3
+	ldr	r3, .L996
+	mov	sl, r2
+	ldr	fp, .L996
+	mov	r6, r0
+	add	r2, r3, r0
+	str	r1, [sp, #4]
+	ldrb	r9, [r3, #2]	@ zero_extendqisi2
+	mov	r8, #0
+	ldr	r3, [r3, #3624]
+	mvn	r5, #0
+	ldrb	r4, [r2, #12]	@ zero_extendqisi2
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	cmp	r3, #7
+	ldreqb	r4, [r2, #20]	@ zero_extendqisi2
+	bl	NandcWaitFlashReady
+	mov	ip, fp
+	b	.L984
+.L989:
+	add	r4, r4, #1
+	ldrb	r1, [fp, #1]	@ zero_extendqisi2
+	mov	r0, r6
+	ldr	r2, .L996+4
+	uxtb	r4, r4
+	str	ip, [sp, #0]
+	cmp	r4, r9
+	movcs	r4, #0
+	mov	r3, r4
+	bl	HynixSetRRPara
+	mov	r0, r6
+	ldr	r1, [sp, #4]
+	mov	r2, sl
+	mov	r3, r7
+	bl	FlashReadRawPage
+	ldr	ip, [sp, #0]
+	cmn	r0, #1
+	beq	.L986
+	ldrb	r3, [ip, #3832]	@ zero_extendqisi2
+	cmn	r5, #1
+	moveq	r5, r0
+	add	r3, r3, r3, asl #1
+	cmp	r0, r3, lsr #2
+	bcc	.L995
+	mov	r7, #0
+	mov	sl, r7
+.L986:
+	add	r8, r8, #1
+.L984:
+	cmp	r8, r9
+	bcc	.L989
+	b	.L988
+.L995:
+	mov	r5, r0
+.L988:
+	ldr	r3, .L996
+	add	r6, r3, r6
+	ldr	r2, [r3, #3624]
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	ldrb	r2, [r2, #19]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r2, #7
+	streqb	r4, [r6, #20]
+	strneb	r4, [r6, #12]
+	adds	r0, r5, #1
+	movne	r0, #1
+	cmp	r5, r3, lsr #2
+	movcc	r0, #0
+	andcs	r0, r0, #1
+	cmp	r0, #0
+	moveq	r0, r5
+	movne	r0, #256
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L997:
+	.align	2
+.L996:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+4
+	.fnend
+	.size	HynixReadRetrial, .-HynixReadRetrial
+	.align	2
+	.global	MicronReadRetrial
+	.type	MicronReadRetrial, %function
+MicronReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r9, r0
+	ldr	r4, .L1011
+	mov	sl, r3
+	.pad #28
+	sub	sp, sp, #28
+	ldrb	r0, [r4, #3832]	@ zero_extendqisi2
+	ldrb	r3, [r4, #928]	@ zero_extendqisi2
+	str	r1, [sp, #16]
+	cmp	r3, #0
+	str	r2, [sp, #20]
+	addeq	r0, r0, r0, asl #1
+	ubfxeq	r0, r0, #2, #8
+	beq	.L1010
+	mov	r1, #3
+	bl	__aeabi_idiv
+	uxtb	r0, r0
+.L1010:
+	add	r4, r4, r9, asl #3
+	str	r0, [sp, #12]
+	mov	r0, r9
+	mov	r8, #0
+	bl	NandcWaitFlashReady
+	ldrb	r7, [r4, #868]	@ zero_extendqisi2
+	ldr	r6, [r4, #864]
+	mov	fp, r8
+	add	r7, r7, #8
+	mvn	r4, #0
+	add	r5, r6, r7, asl #8
+	b	.L1001
+.L1005:
+	mov	r3, #239
+	mov	r0, #200
+	str	r3, [r5, #8]
+	mov	r3, #137
+	str	r3, [r5, #4]
+	bl	NandcDelayns
+	add	ip, r8, #1
+	mov	r0, r9
+	str	ip, [r5, #0]
+	ldr	r1, [sp, #16]
+	mov	r3, sl
+	str	fp, [r5, #0]
+	ldr	r2, [sp, #20]
+	str	fp, [r5, #0]
+	str	fp, [r5, #0]
+	str	ip, [sp, #8]
+	bl	FlashReadRawPage
+	ldr	ip, [sp, #8]
+	cmn	r0, #1
+	beq	.L1002
+	cmn	r4, #1
+	ldr	r2, [sp, #12]
+	moveq	r4, r0
+	cmp	r0, r2
+	bcc	.L1009
+	mov	sl, #0
+	str	sl, [sp, #20]
+.L1002:
+	mov	r8, ip
+.L1001:
+	ldr	r2, .L1011+4
+	ldrb	r3, [r2, #136]	@ zero_extendqisi2
+	cmp	r8, r3
+	bcc	.L1005
+	b	.L1004
+.L1009:
+	mov	r4, r0
+.L1004:
+	mov	r3, #239
+	mov	r0, #200
+	str	r3, [r5, #8]
+	mov	r3, #137
+	str	r3, [r5, #4]
+	bl	NandcDelayns
+	ldr	r2, [sp, #12]
+	mov	r3, #0
+	str	r3, [r6, r7, asl #8]
+	cmp	r4, r2
+	str	r3, [r6, r7, asl #8]
+	str	r3, [r6, r7, asl #8]
+	str	r3, [r6, r7, asl #8]
+	movcc	r3, #0
+	movcs	r3, #1
+	cmn	r4, #1
+	moveq	r3, #0
+	cmp	r3, #0
+	movne	r4, #256
+	cmn	r4, #1
+	cmpne	r4, #256
+	bne	.L1007
+	ldr	r0, .L1011+8
+	mov	r1, r8
+	ldr	r2, [sp, #16]
+	mov	r3, r8
+	str	r4, [sp, #0]
+	bl	printk
+.L1007:
+	mov	r0, r4
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1012:
+	.align	2
+.L1011:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC90
+	.fnend
+	.size	MicronReadRetrial, .-MicronReadRetrial
+	.align	2
+	.global	SamsungReadRetrial
+	.type	SamsungReadRetrial, %function
+SamsungReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r8, r0
+	mov	r7, r2
+	mov	r6, r3
+	mov	r9, r1
+	bl	NandcWaitFlashReady
+	ldr	ip, .L1022
+	mov	r5, #1
+	mvn	r4, #0
+	ldr	fp, .L1022+4
+	add	r3, ip, r8, asl #3
+	ldrb	sl, [r3, #868]	@ zero_extendqisi2
+	ldr	r2, [r3, #864]
+	add	sl, sl, #8
+	add	sl, r2, sl, asl #8
+	b	.L1014
+.L1018:
+	mov	r0, sl
+	uxtb	r1, r5
+	str	ip, [sp, #4]
+	bl	SamsungSetRRPara
+	mov	r0, r8
+	mov	r1, r9
+	mov	r2, r7
+	mov	r3, r6
+	bl	FlashReadRawPage
+	ldr	ip, [sp, #4]
+	cmn	r0, #1
+	beq	.L1015
+	ldrb	r3, [ip, #3832]	@ zero_extendqisi2
+	cmn	r4, #1
+	moveq	r4, r0
+	add	r3, r3, r3, asl #1
+	cmp	r0, r3, lsr #2
+	bcc	.L1021
+	mov	r6, #0
+	mov	r7, r6
+.L1015:
+	add	r5, r5, #1
+.L1014:
+	ldrb	r3, [fp, #136]	@ zero_extendqisi2
+	add	r3, r3, #1
+	cmp	r5, r3
+	bcc	.L1018
+	b	.L1017
+.L1021:
+	mov	r4, r0
+.L1017:
+	mov	r0, sl
+	mov	r1, #0
+	bl	SamsungSetRRPara
+	ldr	r3, .L1022
+	adds	r0, r4, #1
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	movne	r0, #1
+	add	r3, r3, r3, asl #1
+	cmp	r4, r3, lsr #2
+	movcc	r0, #0
+	andcs	r0, r0, #1
+	cmp	r0, #0
+	moveq	r0, r4
+	movne	r0, #256
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1023:
+	.align	2
+.L1022:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	SamsungReadRetrial, .-SamsungReadRetrial
+	.align	2
+	.global	ToshibaReadRetrial
+	.type	ToshibaReadRetrial, %function
+ToshibaReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r8, r0
+	str	r1, [sp, #4]
+	mov	r9, r2
+	mov	r7, r3
+	bl	NandcWaitFlashReady
+	ldr	r3, .L1045
+	add	r2, r3, r8, asl #3
+	ldr	r1, [r2, #864]
+	ldrb	r4, [r2, #868]	@ zero_extendqisi2
+	ldrb	r2, [r3, #3761]	@ zero_extendqisi2
+	add	r4, r4, #8
+	sub	r2, r2, #67
+	add	r4, r1, r4, asl #8
+	uxtb	r2, r2
+	cmp	r2, #1
+	movls	sl, #0
+	bls	.L1025
+	ldrb	sl, [r3, #3773]	@ zero_extendqisi2
+	cmp	sl, #0
+	beq	.L1026
+	mov	r0, #0
+	mov	sl, #1
+	bl	NandcSetDdrMode
+.L1026:
+	mov	r3, #92
+	str	r3, [r4, #8]
+	mov	r3, #197
+	str	r3, [r4, #8]
+.L1025:
+	mov	r6, #1
+	mvn	r5, #0
+	ldr	fp, .L1045
+	b	.L1027
+.L1036:
+	ldrb	r3, [fp, #3761]	@ zero_extendqisi2
+	mov	r0, r4
+	uxtb	r1, r6
+	sub	r3, r3, #67
+	uxtb	r3, r3
+	cmp	r3, #1
+	bhi	.L1028
+	bl	SandiskSetRRPara
+	b	.L1029
+.L1028:
+	bl	ToshibaSetRRPara
+.L1029:
+	ldr	r2, .L1045
+	ldrb	r3, [r2, #3761]	@ zero_extendqisi2
+	cmp	r3, #34
+	bne	.L1030
+	ldr	r2, .L1045+4
+	ldrb	r3, [r2, #136]	@ zero_extendqisi2
+	sub	r3, r3, #3
+	cmp	r6, r3
+	moveq	r3, #179
+	streq	r3, [r4, #8]
+.L1030:
+	cmp	sl, #0
+	mov	r3, #38
+	str	r3, [r4, #8]
+	mov	r3, #93
+	str	r3, [r4, #8]
+	beq	.L1031
+	mov	r0, #4
+	bl	NandcSetDdrMode
+	ldr	r1, [sp, #4]
+	mov	r2, r9
+	mov	r3, r7
+	mov	r0, r8
+	bl	FlashReadRawPage
+	mov	r3, r0
+	mov	r0, #0
+	str	r3, [sp, #0]
+	bl	NandcSetDdrMode
+	ldr	r3, [sp, #0]
+	b	.L1032
+.L1031:
+	mov	r3, r7
+	mov	r0, r8
+	ldr	r1, [sp, #4]
+	mov	r2, r9
+	bl	FlashReadRawPage
+	mov	r3, r0
+.L1032:
+	cmn	r3, #1
+	beq	.L1033
+	ldrb	r2, [fp, #3832]	@ zero_extendqisi2
+	cmn	r5, #1
+	moveq	r5, r3
+	add	r2, r2, r2, asl #1
+	cmp	r3, r2, lsr #2
+	bcc	.L1044
+	mov	r7, #0
+	mov	r9, r7
+.L1033:
+	add	r6, r6, #1
+.L1027:
+	ldr	r2, .L1045+4
+	ldrb	r3, [r2, #136]	@ zero_extendqisi2
+	add	r3, r3, #1
+	cmp	r6, r3
+	bcc	.L1036
+	b	.L1035
+.L1044:
+	mov	r5, r3
+.L1035:
+	ldr	r6, .L1045
+	mov	r0, r4
+	mov	r1, #0
+	ldrb	r3, [r6, #3761]	@ zero_extendqisi2
+	sub	r3, r3, #67
+	uxtb	r3, r3
+	cmp	r3, #1
+	bhi	.L1037
+	bl	SandiskSetRRPara
+	b	.L1038
+.L1037:
+	bl	ToshibaSetRRPara
+.L1038:
+	mov	r3, #255
+	str	r3, [r4, #8]
+	ldrb	r3, [r6, #3832]	@ zero_extendqisi2
+	adds	r2, r5, #1
+	mov	r0, r8
+	movne	r2, #1
+	add	r3, r3, r3, asl #1
+	cmp	r5, r3, lsr #2
+	movcc	r3, #0
+	andcs	r3, r2, #1
+	cmp	r3, #0
+	movne	r5, #256
+	bl	NandcWaitFlashReady
+	cmp	sl, #0
+	beq	.L1040
+	mov	r0, #4
+	bl	NandcSetDdrMode
+.L1040:
+	mov	r0, r5
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1046:
+	.align	2
+.L1045:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	ToshibaReadRetrial, .-ToshibaReadRetrial
+	.align	2
+	.global	FlashSavePhyInfo
+	.type	FlashSavePhyInfo, %function
+FlashSavePhyInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r6, #0
+	ldr	r5, .L1054
+	ldr	r7, .L1054+4
+	ldr	r8, .L1054+8
+	ldr	r3, [r5, #144]
+	ldrb	r0, [r5, #148]	@ zero_extendqisi2
+	str	r3, [r5, #140]
+	bl	FlashBchSel
+	mov	r1, #0
+	mov	r2, #2048
+	ldr	r0, [r5, #144]
+	bl	ftl_memset
+	ldr	r3, [r5, #140]
+	ldr	r1, .L1054+12
+	mov	r2, #32
+	str	r8, [r3, #0]
+	ldr	r4, [r5, #140]
+	ldrb	r3, [r7, #3762]	@ zero_extendqisi2
+	add	r0, r4, #16
+	strh	r3, [r4, #12]	@ movhi
+	ldrb	r3, [r7, #853]	@ zero_extendqisi2
+	strh	r3, [r4, #14]	@ movhi
+	ldrb	r3, [r7, #3773]	@ zero_extendqisi2
+	str	r3, [r4, #1076]
+	bl	memcpy
+	add	r0, r4, #80
+	ldr	r1, .L1054+16
+	mov	r2, #8
+	bl	memcpy
+	add	r0, r4, #96
+	ldr	r1, .L1054+20
+	mov	r2, #32
+	bl	memcpy
+	ldr	r0, [r5, #140]
+	ldr	r1, .L1054+24
+	mov	r2, #32
+	add	r0, r0, #160
+	bl	memcpy
+	ldr	r4, [r5, #140]
+	add	r1, r7, #896
+	mov	r2, #32
+	add	r0, r4, #192
+	bl	memcpy
+	mov	r2, #852
+	add	r0, r4, #224
+	mov	r1, r7
+	bl	memcpy
+	add	r0, r4, #12
+	movw	r1, #2036
+	bl	JSHash
+	movw	r3, #1592
+	str	r3, [r4, #4]
+	ldr	r3, [r5, #132]
+	str	r3, [r5, #140]
+	str	r0, [r4, #8]
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+	mov	r4, r6
+.L1050:
+	ldr	r1, [r7, #856]
+	mov	r0, #0
+	mov	r2, r0
+	mul	r1, r1, r4
+	bl	FlashEraseBlock
+	ldr	r1, [r7, #856]
+	mov	r0, #0
+	ldr	r2, [r5, #144]
+	mov	r3, r0
+	mul	r1, r1, r4
+	bl	FlashProgPage
+	ldr	r1, [r7, #856]
+	mov	r0, #0
+	ldr	r2, [r5, #144]
+	mov	r3, r0
+	mul	r1, r1, r4
+	add	r1, r1, #1
+	bl	FlashProgPage
+	ldr	r1, [r7, #856]
+	mov	r0, #0
+	ldr	r2, [r5, #132]
+	mov	r3, r0
+	mul	r1, r1, r4
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	beq	.L1048
+	ldr	sl, [r5, #140]
+	ldr	r3, [sl, #0]
+	cmp	r3, r8
+	bne	.L1048
+	add	r0, sl, #12
+	movw	r1, #2036
+	bl	JSHash
+	ldr	r3, [sl, #8]
+	cmp	r3, r0
+	bne	.L1048
+	add	r3, r4, #1
+	str	r3, [r5, #152]
+	ldr	r3, [r7, #856]
+	add	r6, r6, #1
+	cmp	r6, #1
+	mul	r3, r3, r4
+	str	r3, [r5, #156]
+	bhi	.L1049
+.L1048:
+	add	r4, r4, #1
+	cmp	r4, #4
+	bne	.L1050
+.L1049:
+	mov	r0, #0
+	bl	flash_exit_slc_mode
+	cmp	r6, #0
+	mvneq	r0, #0
+	movne	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L1055:
+	.align	2
+.L1054:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	1312902724
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR0+3764
+	.word	.LANCHOR0+3588
+	.word	.LANCHOR1+2892
+	.fnend
+	.size	FlashSavePhyInfo, .-FlashSavePhyInfo
+	.align	2
+	.global	FlashReadIdbDataRaw
+	.type	FlashReadIdbDataRaw, %function
+FlashReadIdbDataRaw:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	mov	r2, #4
+	mov	sl, r0
+	ldr	r1, .L1067
+	add	r0, sp, #12
+	bl	memcpy
+	ldr	r3, .L1067+4
+	ldrb	r2, [r3, #3832]	@ zero_extendqisi2
+	str	r2, [sp, #4]
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L1067+8
+	cmp	r2, r3
+	bne	.L1057
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+.L1057:
+	ldr	r7, .L1067+4
+	mov	r0, sl
+	mov	r1, #0
+	mov	r2, #2048
+	bl	ftl_memset
+	mvn	r8, #0
+	mov	r4, #2
+	ldr	r9, .L1067+12
+	mov	fp, r7
+	b	.L1058
+.L1065:
+	mov	r6, #0
+.L1060:
+	add	r3, sp, #12
+	ldr	r5, .L1067+12
+	ldrb	r0, [r3, r6]	@ zero_extendqisi2
+	bl	FlashBchSel
+	ldr	r1, [r7, #856]
+	mov	r0, #0
+	ldr	r2, [r9, #144]
+	mov	r3, r0
+	mul	r1, r1, r4
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	bne	.L1059
+	add	r6, r6, #1
+	cmp	r6, #4
+	bne	.L1060
+	b	.L1061
+.L1059:
+	ldr	r3, [r5, #144]
+	ldr	r2, [r3, #0]
+	ldr	r3, .L1067+16
+	cmp	r2, r3
+	bne	.L1061
+	add	r3, sp, #16
+	ldr	r0, .L1067+20
+	add	r6, r3, r6
+	ldrb	r1, [r6, #-4]	@ zero_extendqisi2
+	bl	printk
+	mov	r0, sl
+	ldr	r1, [r5, #144]
+	mov	r2, #2048
+	bl	memcpy
+	ldr	r3, [r5, #144]
+	ldr	r3, [r3, #512]
+	strb	r3, [fp, #853]
+	ldr	r3, [r5, #152]
+	cmp	r3, r4
+	bls	.L1064
+	str	r4, [r5, #152]
+	bl	FlashSavePhyInfo
+	mov	r8, #0
+.L1061:
+	add	r4, r4, #1
+.L1058:
+	ldrb	r3, [r7, #853]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcc	.L1065
+	b	.L1062
+.L1064:
+	mov	r8, #0
+.L1062:
+	ldr	r0, [sp, #4]
+	bl	FlashBchSel
+	ldr	r3, .L1067+4
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L1067+8
+	cmp	r2, r3
+	bne	.L1063
+	mov	r0, #0
+	bl	flash_exit_slc_mode
+.L1063:
+	mov	r0, r8
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1068:
+	.align	2
+.L1067:
+	.word	.LANCHOR3+11
+	.word	.LANCHOR0
+	.word	1446522928
+	.word	.LANCHOR2
+	.word	-52655045
+	.word	.LC91
+	.fnend
+	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
+	.align	2
+	.global	FlashLoadPhyInfo
+	.type	FlashLoadPhyInfo, %function
+FlashLoadPhyInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r2, #4
+	ldr	r1, .L1080
+	add	r0, sp, #4
+	bl	memcpy
+	ldr	r5, .L1080+4
+	ldr	r2, .L1080+8
+	movw	r3, #2902
+	mov	r4, #0
+	mov	r8, #4
+	mov	r0, r4
+	str	r4, [r5, #156]
+	ldrh	r9, [r2, r3]
+	mvn	r6, #0
+	ldr	r3, [r5, #144]
+	ldr	fp, .L1080+12
+	str	r3, [r5, #140]
+	bl	flash_enter_slc_mode
+	b	.L1070
+.L1072:
+	add	r3, sp, #4
+	ldrb	r0, [r3, r7]	@ zero_extendqisi2
+	bl	FlashBchSel
+	mov	r0, #0
+	mov	r1, r4
+	ldr	r2, [r5, #144]
+	mov	r3, r0
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	bne	.L1071
+	mov	r0, #0
+	mov	r1, sl
+	ldr	r2, [r5, #144]
+	mov	r3, r0
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	bne	.L1071
+	add	r7, r7, #1
+	cmp	r7, #4
+	beq	.L1073
+	b	.L1072
+.L1071:
+	ldr	r7, [r5, #140]
+	ldr	r3, [r7, #0]
+	cmp	r3, fp
+	bne	.L1073
+	cmp	r6, #0
+	bne	.L1074
+	ldr	r2, .L1080+8
+	movw	r3, #2902
+	mov	r0, r4
+	ldrh	r1, [r2, r3]
+	bl	__aeabi_uidiv
+	ldr	r3, .L1080+4
+	add	r0, r0, #1
+	str	r0, [r3, #152]
+	mov	r0, r6
+	b	.L1079
+.L1074:
+	add	r0, r7, #12
+	movw	r1, #2036
+	bl	JSHash
+	ldr	r3, [r7, #8]
+	cmp	r3, r0
+	bne	.L1073
+	ldr	r6, .L1080+16
+	add	r1, r7, #160
+	mov	r2, #32
+	ldr	r0, .L1080+20
+	bl	memcpy
+	add	r0, r6, #896
+	add	r1, r7, #192
+	mov	r2, #32
+	bl	memcpy
+	mov	r0, r6
+	add	r1, r7, #224
+	mov	r2, #852
+	bl	memcpy
+	ldr	r3, [r7, #1076]
+	ldr	r2, .L1080+8
+	mov	r0, r4
+	str	r4, [r5, #156]
+	strb	r3, [r6, #3773]
+	movw	r3, #2902
+	ldrh	r1, [r2, r3]
+	mov	r6, #0
+	bl	__aeabi_uidiv
+	add	r0, r0, #1
+	str	r0, [r5, #152]
+	cmp	r0, #1
+	moveq	r3, #2
+	streq	r3, [r5, #152]
+	ldrh	r3, [r7, #14]
+	strb	r3, [r5, #160]
+.L1073:
+	subs	r8, r8, #1
+	add	r4, r4, r9
+	beq	.L1077
+.L1070:
+	add	sl, r4, #1
+	mov	r7, #0
+	b	.L1072
+.L1077:
+	mov	r0, r8
+.L1079:
+	bl	flash_exit_slc_mode
+	mov	r0, r6
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1081:
+	.align	2
+.L1080:
+	.word	.LANCHOR3+11
+	.word	.LANCHOR2
+	.word	.LANCHOR1
+	.word	1312902724
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2892
+	.fnend
+	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
+	.align	2
+	.global	FlashDdrTunningRead
+	.type	FlashDdrTunningRead, %function
+FlashDdrTunningRead:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	sl, r3
+	ldr	r4, .L1103
+	.pad #20
+	sub	sp, sp, #20
+	mov	fp, r0
+	mov	r9, r2
+	str	r1, [sp, #0]
+	ldr	r3, [r4, #3012]
+	ldr	r7, [r4, #3780]
+	ldr	r3, [r3, #304]
+	cmp	r7, #7
+	movhi	r7, #12
+	movls	r7, #6
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #56]
+	cmp	r3, #0
+	moveq	r8, #1024
+	beq	.L1084
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	mov	r0, fp
+	bl	FlashReset
+	ldr	r1, [sp, #0]
+	mov	r2, r9
+	mov	r3, sl
+	mov	r0, fp
+	bl	FlashReadRawPage
+	mov	r8, r0
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	NandcSetMode
+	cmn	r8, #1
+	beq	.L1085
+	ldr	r0, .L1103+4
+	mov	r2, r8
+	ldr	r1, [sp, #0]
+	bl	printk
+	cmp	r8, #9
+	bhi	.L1086
+	add	r4, r4, fp, asl #3
+	ldr	r3, [r4, #864]
+	ldr	r2, [r3, #3840]
+	ldr	r2, [r3, #0]
+	orr	r2, r2, #131072
+	str	r2, [r3, #0]
+.L1086:
+	ldr	r3, .L1103+8
+	ldr	r2, [r3, #164]
+	add	r2, r2, #1
+	str	r2, [r3, #164]
+	cmp	r2, #2048
+	movcs	sl, #0
+	strcs	sl, [r3, #164]
+	movcs	r9, sl
+	bcc	.L1085
+.L1084:
+	mov	r4, #0
+	str	fp, [sp, #4]
+	mov	r5, r4
+	mvn	r6, #0
+	mov	fp, r4
+	str	r4, [sp, #8]
+.L1091:
+	uxtb	r0, r7
+	bl	NandcSetDdrPara
+	mov	r3, sl
+	ldr	r0, [sp, #4]
+	mov	r2, r9
+	ldr	r1, [sp, #0]
+	bl	FlashReadRawPage
+	add	r3, r8, #1
+	cmp	r0, r3
+	bhi	.L1087
+	cmp	r0, #2
+	bhi	.L1097
+	add	r5, r5, #1
+	cmp	r5, #9
+	bls	.L1097
+	mov	ip, fp
+	rsb	r4, r5, r7
+	ldr	fp, [sp, #4]
+	mov	r8, r0
+	mov	r6, #0
+	b	.L1089
+.L1087:
+	cmp	fp, r5
+	bcs	.L1098
+	cmp	r5, #7
+	rsb	r3, r5, r4
+	str	r3, [sp, #8]
+	bhi	.L1102
+	mov	fp, r5
+	b	.L1098
+.L1097:
+	mov	r6, #0
+	mov	r4, r7
+	mov	r8, r0
+	mov	sl, r6
+	mov	r9, r6
+	b	.L1088
+.L1098:
+	mov	r5, #0
+.L1088:
+	add	r7, r7, #2
+	cmp	r7, #69
+	bls	.L1091
+	mov	ip, fp
+	ldr	fp, [sp, #4]
+.L1089:
+	cmp	ip, r5
+	bcc	.L1092
+	b	.L1090
+.L1102:
+	ldr	fp, [sp, #4]
+.L1090:
+	ldr	r4, [sp, #8]
+.L1092:
+	cmp	r4, #0
+	beq	.L1093
+	ldr	r0, .L1103+12
+	mov	r1, r4
+	bl	printk
+	uxtb	r0, r4
+	bl	NandcSetDdrPara
+.L1093:
+	cmn	r6, #1
+	bne	.L1085
+	ldr	r0, .L1103+16
+	mov	r1, fp
+	ldr	r2, [sp, #0]
+	bl	printk
+	ldr	r3, [sp, #56]
+	cmp	r3, #0
+	moveq	r8, r6
+	beq	.L1085
+	ldr	r3, [sp, #12]
+	ubfx	r0, r3, #8, #8
+	bl	NandcSetDdrPara
+.L1085:
+	mov	r0, r8
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1104:
+	.align	2
+.L1103:
+	.word	.LANCHOR0
+	.word	.LC92
+	.word	.LANCHOR2
+	.word	.LC93
+	.word	.LC94
+	.fnend
+	.size	FlashDdrTunningRead, .-FlashDdrTunningRead
+	.align	2
+	.global	FlashDdrParaScan
+	.type	FlashDdrParaScan, %function
+FlashDdrParaScan:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, lr}
+	mov	r7, r0
+	ldr	r5, .L1109
+	mov	r4, #0
+	mov	r6, r1
+	ldrb	r0, [r5, #3772]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r5, #3772]	@ zero_extendqisi2
+	bl	NandcSetMode
+	mov	r1, r6
+	mov	r2, r4
+	mov	r3, r4
+	mov	r0, r7
+	str	r4, [sp, #0]
+	bl	FlashDdrTunningRead
+	mov	r1, r6
+	mov	r2, r4
+	mov	r3, r4
+	mov	r8, r0
+	mov	r0, r7
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	beq	.L1106
+	cmn	r8, #1
+	bne	.L1107
+.L1106:
+	ldrb	r3, [r5, #3772]	@ zero_extendqisi2
+	tst	r3, #1
+	beq	.L1107
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	ldr	r3, .L1109
+	mov	r2, #0
+	strb	r2, [r3, #3773]
+	b	.L1108
+.L1107:
+	mov	r3, #1
+	strb	r3, [r5, #3773]
+.L1108:
+	mov	r0, #0
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
+.L1110:
+	.align	2
+.L1109:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashDdrParaScan, .-FlashDdrParaScan
+	.align	2
+	.global	FlashReadPage
+	.type	FlashReadPage, %function
+FlashReadPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r5, r0
+	mov	r6, r1
+	mov	r8, r2
+	mov	sl, r3
+	bl	FlashReadRawPage
+	cmn	r0, #1
+	mov	r4, r0
+	bne	.L1112
+	ldr	r7, .L1117
+	ldrb	r9, [r7, #860]	@ zero_extendqisi2
+	cmp	r9, #0
+	beq	.L1113
+	mov	r3, #0
+	mov	r0, r5
+	strb	r3, [r7, #860]
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, sl
+	bl	FlashReadRawPage
+	strb	r9, [r7, #860]
+	cmn	r0, #1
+	movne	r4, r0
+	bne	.L1112
+.L1113:
+	ldr	r7, .L1117
+	ldrb	r3, [r7, #3773]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1112
+	ldr	r3, [r7, #3012]
+	mov	r0, r5
+	mov	r1, r6
+	mov	r2, r8
+	ldr	r9, [r3, #304]
+	mov	r3, #1
+	str	r3, [sp, #0]
+	mov	r3, sl
+	bl	FlashDdrTunningRead
+	cmn	r0, #1
+	mov	r4, r0
+	beq	.L1114
+	ldrb	r3, [r7, #3832]	@ zero_extendqisi2
+	cmp	r0, r3, lsr #1
+	bls	.L1112
+.L1114:
+	ubfx	r0, r9, #8, #8
+	bl	NandcSetDdrPara
+.L1112:
+	ldr	r7, .L1117+4
+	ldr	ip, [r7, #168]
+	adds	r3, ip, #0
+	movne	r3, #1
+	cmn	r4, #1
+	movne	r3, #0
+	cmp	r3, #0
+	beq	.L1115
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, sl
+	mov	r0, r5
+	blx	ip
+	mov	r2, r5
+	mov	r3, r6
+	mov	r4, r0
+	ldr	r0, .L1117+8
+	mov	r1, r4
+	bl	printk
+	cmn	r4, #1
+	bne	.L1115
+	ldr	r3, .L1117
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1115
+	mov	r0, r5
+	bl	flash_enter_slc_mode
+	ldr	ip, [r7, #168]
+	mov	r0, r5
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, sl
+	blx	ip
+	mov	r4, r0
+	mov	r0, r5
+	bl	flash_exit_slc_mode
+.L1115:
+	mov	r0, r4
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
+.L1118:
+	.align	2
+.L1117:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC95
+	.fnend
+	.size	FlashReadPage, .-FlashReadPage
+	.align	2
+	.global	FlashReadSlc2KPages
+	.type	FlashReadSlc2KPages, %function
+FlashReadSlc2KPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1132
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r8, r1
+	.pad #28
+	sub	sp, sp, #28
+	mov	fp, r2
+	ldrb	sl, [r3, #2901]	@ zero_extendqisi2
+	mov	r4, r0
+	mov	r7, #0
+	ldr	r6, .L1132+4
+	b	.L1120
+.L1129:
+	rsb	r3, r7, r8
+	add	r2, sp, #20
+	mov	r0, r4
+	mov	r1, fp
+	uxtb	r3, r3
+	str	r3, [sp, #0]
+	add	r3, sp, #16
+	bl	LogAddr2PhyAddr
+	ldr	r3, [sp, #16]
+	ldrb	r2, [r6, #3762]	@ zero_extendqisi2
+	cmp	r3, r2
+	mvncs	r3, #0
+	strcs	r3, [r4, #0]
+	bcs	.L1122
+	add	r3, r6, r3
+	ldrb	r5, [r3, #3764]	@ zero_extendqisi2
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	bl	NandcFlashCs
+	ldr	r1, [sp, #20]
+	mov	r0, r5
+	bl	FlashReadCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	ldr	r3, [r4, #12]
+	mov	r2, sl
+	mov	r1, #0
+	mov	r0, r5
+	str	r3, [sp, #0]
+	ldr	r3, [r4, #8]
+	bl	NandcXferData
+	ldr	r3, [sp, #20]
+	ldr	r1, [r6, #856]
+	add	r1, r1, r3
+	mov	r9, r0
+	mov	r0, r5
+	bl	FlashReadCmd
+	ldr	r3, [r4, #8]
+	ldr	r2, [r4, #12]
+	mov	r1, #0
+	cmp	r3, #0
+	mov	r0, r5
+	addne	r3, r3, #2048
+	cmp	r2, #0
+	addne	r2, r2, #8
+	str	r2, [sp, #0]
+	mov	r2, sl
+	bl	NandcXferData
+	mov	r3, r0
+	mov	r0, r5
+	str	r3, [sp, #12]
+	bl	NandcFlashDeCs
+	ldr	r3, [sp, #12]
+	cmp	r3, r9
+	movcs	r9, r3
+	ldrb	r3, [r6, #3832]	@ zero_extendqisi2
+	adds	r2, r9, #1
+	add	r3, r3, r3, asl #1
+	movne	r2, #1
+	cmp	r9, r3, lsr #2
+	movls	r3, #0
+	andhi	r3, r2, #1
+	cmp	r3, #0
+	movne	r9, #256
+	cmp	r9, #256
+	cmnne	r9, #1
+	str	r9, [r4, #0]
+	movne	r3, #0
+	strne	r3, [r4, #0]
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L1127
+	ldr	r2, [r3, #8]
+	cmn	r2, #1
+	bne	.L1127
+	ldr	r3, [r3, #0]
+	cmn	r3, #1
+	strne	r2, [r4, #0]
+.L1127:
+	ldr	r3, [r4, #0]
+	cmn	r3, #1
+	bne	.L1122
+	ldr	r1, [r4, #4]
+	ldr	r0, .L1132+8
+	ldrb	r2, [r6, #3832]	@ zero_extendqisi2
+	bl	printk
+	ldr	r1, [r4, #8]
+	cmp	r1, #0
+	beq	.L1128
+	ldr	r0, .L1132+12
+	mov	r2, #4
+	mov	r3, #8
+	bl	rknand_print_hex
+.L1128:
+	ldr	r1, [r4, #12]
+	cmp	r1, #0
+	beq	.L1122
+	mov	r2, #4
+	ldr	r0, .L1132+16
+	mov	r3, r2
+	bl	rknand_print_hex
+.L1122:
+	add	r7, r7, #1
+	add	r4, r4, #36
+.L1120:
+	cmp	r7, r8
+	bne	.L1129
+	mov	r0, #0
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1133:
+	.align	2
+.L1132:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LC96
+	.word	.LC97
+	.word	.LC98
+	.fnend
+	.size	FlashReadSlc2KPages, .-FlashReadSlc2KPages
+	.align	2
+	.global	FlashReadPages
+	.type	FlashReadPages, %function
+FlashReadPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1176
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldrb	r3, [r3, #2901]	@ zero_extendqisi2
+	mov	r9, r0
+	str	r1, [sp, #28]
+	str	r2, [sp, #32]
+	str	r3, [sp, #24]
+	ldr	r3, .L1176+4
+	ldrb	r8, [r3, #852]	@ zero_extendqisi2
+	ldrb	ip, [r3, #860]	@ zero_extendqisi2
+	cmp	r8, #0
+	str	ip, [sp, #36]
+	moveq	sl, r8
+	beq	.L1135
+	bl	FlashReadSlc2KPages
+	b	.L1136
+.L1163:
+	mov	r3, #36
+	ldr	ip, [sp, #28]
+	mul	r3, r3, sl
+	add	r2, sp, #44
+	ldr	r1, [sp, #32]
+	ldr	fp, .L1176+4
+	add	r6, r9, r3
+	str	r3, [sp, #16]
+	rsb	r3, sl, ip
+	ldr	r5, [r6, #4]
+	mov	r0, r6
+	uxtb	r3, r3
+	str	r3, [sp, #0]
+	add	r3, sp, #40
+	bl	LogAddr2PhyAddr
+	ldr	r3, [sp, #40]
+	ldrb	r2, [fp, #3762]	@ zero_extendqisi2
+	cmp	r3, r2
+	ldrcs	ip, [sp, #16]
+	mvncs	r3, #0
+	mov	r7, r0
+	strcs	r3, [r9, ip]
+	bcs	.L1138
+	add	r3, fp, r3
+	ldrb	r4, [r3, #3764]	@ zero_extendqisi2
+	ldr	r3, .L1176+8
+	mov	r0, r4
+	ldrb	r3, [r3, #172]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r7, #0
+	bl	NandcWaitFlashReady
+	ldr	r3, [fp, #3624]
+	ldrb	r2, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r2, #1
+	uxtb	r3, r3
+	cmp	r3, #6
+	bhi	.L1140
+	add	r1, fp, r4
+	cmp	r2, #7
+	add	fp, fp, r4
+	ldr	r2, .L1176+4
+	ldrb	r3, [r1, #12]	@ zero_extendqisi2
+	ldreqb	r3, [r1, #20]	@ zero_extendqisi2
+	ldrb	r1, [fp, #3756]	@ zero_extendqisi2
+	cmp	r1, r3
+	beq	.L1140
+	ldrb	r1, [r2, #1]	@ zero_extendqisi2
+	mov	r0, r4
+	add	r2, r2, #4
+	bl	HynixSetRRPara
+.L1140:
+	mov	r0, r4
+	mov	r5, r5, lsr #31
+	bl	NandcFlashCs
+	ldr	ip, [sp, #32]
+	mov	r0, r4
+	cmp	ip, #1
+	orreq	r5, r5, #1
+	str	r5, [sp, #20]
+	cmp	r5, #0
+	beq	.L1142
+	ldr	r3, .L1176+4
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1142
+	bl	flash_enter_slc_mode
+	b	.L1143
+.L1142:
+	bl	flash_exit_slc_mode
+.L1143:
+	ldr	fp, .L1176+4
+.L1175:
+	ldr	r1, [sp, #44]
+	cmn	r1, #1
+	cmpeq	r4, #255
+	moveq	r3, #0
+	movne	r3, #1
+	moveq	r7, r3
+	beq	.L1145
+	cmp	r7, #0
+	beq	.L1146
+	ldr	r2, [fp, #856]
+	mov	r0, r4
+	add	r2, r1, r2
+	bl	FlashReadDpCmd
+	b	.L1147
+.L1146:
+	mov	r0, r4
+	bl	FlashReadCmd
+.L1147:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	cmp	r7, #0
+	beq	.L1145
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	bl	FlashReadDpDataOutCmd
+.L1145:
+	ldr	r3, [r6, #12]
+	mov	r0, r4
+	ldr	r2, [sp, #24]
+	mov	r1, #0
+	str	r3, [sp, #0]
+	ldr	r3, [r6, #8]
+	bl	NandcXferData
+	ldrb	r2, [fp, #860]	@ zero_extendqisi2
+	adds	r2, r2, #0
+	movne	r2, #1
+	cmn	r0, #1
+	movne	r2, #0
+	cmp	r2, #0
+	movne	r2, #0
+	movne	r7, #0
+	strneb	r2, [fp, #860]
+	bne	.L1175
+.L1148:
+	cmp	r7, #0
+	mov	r5, r0
+	beq	.L1149
+	ldr	r3, .L1176+4
+	mov	r0, r4
+	ldr	r1, [r3, #856]
+	ldr	r3, [sp, #44]
+	str	r2, [sp, #12]
+	add	r1, r1, r3
+	bl	FlashReadDpDataOutCmd
+	add	r3, sl, #1
+	mov	r1, #36
+	ldr	r2, [sp, #12]
+	mla	r3, r1, r3, r9
+	mov	r0, r4
+	ldr	r1, [r3, #12]
+	str	r1, [sp, #0]
+	mov	r1, r2
+	ldr	r3, [r3, #8]
+	ldr	r2, [sp, #24]
+	bl	NandcXferData
+	cmn	r0, #1
+	mov	r8, r0
+	moveq	r7, #0
+.L1149:
+	mov	r0, r4
+	ldr	fp, .L1176+4
+	bl	NandcFlashDeCs
+	ldr	ip, [sp, #36]
+	cmn	r5, #1
+	strb	ip, [fp, #860]
+	bne	.L1153
+	ldrb	r3, [fp, #3773]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1151
+	ldr	r3, [fp, #3012]
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r7, [r3, #304]
+	mov	r3, #1
+	str	r3, [sp, #0]
+	ldr	r2, [r6, #8]
+	ldr	r3, [r6, #12]
+	bl	FlashDdrTunningRead
+	cmn	r0, #1
+	mov	r5, r0
+	beq	.L1152
+	ldrb	r3, [fp, #3832]	@ zero_extendqisi2
+	cmp	r0, r3, lsr #1
+	bls	.L1169
+.L1152:
+	ubfx	r0, r7, #8, #8
+	bl	NandcSetDdrPara
+	cmn	r5, #1
+	bne	.L1169
+.L1151:
+	ldr	r3, .L1176+8
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r2, [r6, #8]
+	ldr	r7, [r3, #168]
+	ldr	r3, [r6, #12]
+	cmp	r7, #0
+	beq	.L1154
+	blx	r7
+	cmn	r0, #1
+	mov	r5, r0
+	bne	.L1171
+	ldr	r2, .L1176+4
+	ldr	r3, [r2, #3624]
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #6
+	bhi	.L1156
+	ldrb	r1, [r2, #1]	@ zero_extendqisi2
+	mov	r0, r4
+	add	r2, r2, #4
+	mov	r3, #0
+	bl	HynixSetRRPara
+.L1156:
+	ldr	r1, [sp, #44]
+	mov	r0, r4
+	ldr	r2, [r6, #8]
+	ldr	r3, [r6, #12]
+	bl	FlashReadRawPage
+	ldr	r7, .L1176+4
+	ldr	r1, [r6, #4]
+	ldrb	r2, [r7, #3832]	@ zero_extendqisi2
+	mov	r5, r0
+	ldr	r0, .L1176+12
+	mov	r3, r5
+	bl	printk
+	cmn	r5, #1
+	bne	.L1171
+	ldrb	r7, [r7, #928]	@ zero_extendqisi2
+	cmp	r7, #0
+	beq	.L1155
+	ldr	ip, [sp, #20]
+	mov	r0, r4
+	cmp	ip, #0
+	beq	.L1157
+	bl	flash_enter_slc_mode
+	b	.L1158
+.L1157:
+	bl	flash_exit_slc_mode
+.L1158:
+	ldr	r3, .L1176+8
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r2, [r6, #8]
+	ldr	ip, [r3, #168]
+	ldr	r3, [r6, #12]
+	blx	ip
+	mov	r5, r0
+	b	.L1171
+.L1154:
+	bl	FlashReadRawPage
+	mov	r5, r0
+	b	.L1155
+.L1169:
+	mov	r7, #0
+.L1153:
+	ldr	r3, .L1176+4
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r5, r3, lsr #2
+	bls	.L1155
+	ldr	r3, .L1176+8
+	ldr	r3, [r3, #168]
+	cmp	r3, #0
+	moveq	r5, #256
+	b	.L1155
+.L1171:
+	mov	r7, #0
+.L1155:
+	ldr	ip, [sp, #16]
+	cmp	r5, #256
+	cmnne	r5, #1
+	movne	r2, #0
+	str	r5, [r9, ip]
+	strne	r2, [r9, ip]
+	ldr	ip, [sp, #16]
+	ldr	r3, [r9, ip]
+	cmn	r3, #1
+	bne	.L1160
+	ldr	r2, .L1176+4
+	ldr	r1, [r6, #4]
+	ldr	r0, .L1176+16
+	ldrb	r2, [r2, #3832]	@ zero_extendqisi2
+	bl	printk
+	ldr	r1, [r6, #12]
+	cmp	r1, #0
+	beq	.L1160
+	mov	r2, #4
+	ldr	r0, .L1176+20
+	mov	r3, r2
+	bl	rknand_print_hex
+.L1160:
+	cmp	r7, #0
+	beq	.L1161
+	ldr	r3, .L1176+4
+	ldrb	r3, [r3, #3832]	@ zero_extendqisi2
+	add	r3, r3, r3, asl #1
+	cmp	r8, r3, lsr #2
+	bls	.L1162
+	ldr	r3, .L1176+8
+	ldr	r3, [r3, #168]
+	cmp	r3, #0
+	moveq	r8, #256
+.L1162:
+	add	r3, sl, #1
+	mov	r2, #36
+	cmp	r8, #256
+	cmnne	r8, #1
+	mul	r3, r2, r3
+	movne	r2, #0
+	str	r8, [r9, r3]
+	strne	r2, [r9, r3]
+.L1161:
+	ldr	ip, [sp, #20]
+	add	sl, sl, r7
+	cmp	ip, #0
+	beq	.L1138
+	ldr	r3, .L1176+4
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1138
+	mov	r0, r4
+	bl	flash_exit_slc_mode
+.L1138:
+	add	sl, sl, #1
+.L1135:
+	ldr	ip, [sp, #28]
+	cmp	sl, ip
+	bcc	.L1163
+	mov	r0, #0
+.L1136:
+	add	sp, sp, #52
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1177:
+	.align	2
+.L1176:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC99
+	.word	.LC96
+	.word	.LC98
+	.fnend
+	.size	FlashReadPages, .-FlashReadPages
+	.align	2
+	.global	FtlGcScanTempBlk
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L1203
+	movw	r3, #3000
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldrh	r4, [r2, r3]
+	movw	r3, #65535
+	mov	r5, r0
+	str	r1, [sp, #20]
+	cmp	r4, r3
+	beq	.L1199
+	cmp	r4, #0
+	bne	.L1179
+	b	.L1180
+.L1199:
+	mov	r4, #0
+.L1179:
+	ldr	r2, .L1203+4
+	movw	r3, #3912
+	ldr	fp, [sp, #20]
+	ldrh	r3, [r2, r3]
+	cmp	fp, r3
+	bne	.L1181
+.L1180:
+	bl	FtlGcPageVarInit
+.L1181:
+	mov	r7, #0
+	movw	r8, #65535
+	mov	sl, r7
+	mvn	r3, #0
+	str	r3, [sp, #16]
+.L1194:
+	ldrh	r3, [r5, #0]
+	strb	sl, [r5, #8]
+	cmp	r3, r8
+	beq	.L1200
+.L1183:
+.L1201:
+	ldr	r3, .L1203+4
+	movw	r2, #3844
+	ldrh	r9, [r3, r2]
+	ldr	r2, .L1203+8
+	ldr	lr, [r2, #-976]
+	ldr	ip, [r2, #-1172]
+	movw	r2, #3924
+	ldrh	r2, [r3, r2]
+	mov	r3, #0
+	mov	r6, r3
+	str	r2, [sp, #12]
+	mov	r2, r5
+	b	.L1184
+.L1186:
+	ldrh	r0, [r2, #16]
+	cmp	r0, r8
+	beq	.L1185
+	mov	fp, #36
+	orr	r0, r4, r0, asl #10
+	mla	r1, fp, r6, lr
+	ldr	fp, [sp, #12]
+	stmib	r1, {r0, sl}
+	mul	r0, fp, r6
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	fp, r0, #3
+	cmp	r0, #0
+	movlt	r0, fp
+	bic	r0, r0, #3
+	add	r0, ip, r0
+	str	r0, [r1, #12]
+.L1185:
+	add	r3, r3, #1
+	add	r2, r2, #2
+	uxth	r3, r3
+.L1184:
+	cmp	r3, r9
+	bne	.L1186
+	ldr	r9, .L1203+8
+	mov	r1, r6
+	mov	r2, #0
+	ldr	r0, [r9, #-976]
+	bl	FlashReadPages
+	mov	r3, #36
+	mul	r3, r3, r6
+	mov	r6, #0
+	str	r3, [sp, #12]
+	b	.L1187
+.L1195:
+	ldr	r1, [r9, #-976]
+	add	r3, r1, r6
+	ldr	fp, [r3, #4]
+	stmib	sp, {r1, r3}
+	ubfx	r0, fp, #10, #16
+	bl	P2V_plane
+	ldr	r1, [sp, #4]
+	ldr	r3, [sp, #8]
+	ldr	r1, [r1, r6]
+	cmp	r1, #0
+	mov	r2, r0
+	bne	.L1188
+	ldr	r3, [r3, #12]
+	add	r6, r6, #36
+	ldrh	r1, [r3, #0]
+	cmp	r1, r8
+	ldreq	r3, .L1203+8
+	moveq	r1, #1
+	streq	r1, [r3, #-1016]
+	beq	.L1182
+.L1189:
+	ldr	r0, [r3, #12]
+	mov	r1, fp
+	ldr	r2, [r3, #8]
+	bl	FtlGcUpdatePage
+	b	.L1187
+.L1188:
+	mov	r2, fp
+	ldr	r0, .L1203+12
+	ldrh	r1, [r5, #0]
+	bl	printk
+	ldr	r3, .L1203+4
+	ldr	r2, [r3, #3836]
+	cmp	r2, #0
+	bne	.L1190
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1191
+.L1190:
+	ldr	r2, .L1203+8
+	ldrh	r3, [r5, #0]
+	ldr	r2, [r2, #-2084]
+	mov	r3, r3, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #119
+	bls	.L1192
+.L1191:
+	ldr	r3, .L1203+8
+	ldr	r3, [r3, #-976]
+	ldr	r3, [r3, r6]
+	cmn	r3, #1
+	bne	.L1193
+.L1192:
+	ldr	r3, .L1203+8
+	ldr	r3, [r3, #-976]
+	add	r6, r3, r6
+	ldr	r6, [r6, #4]
+	str	r6, [sp, #16]
+.L1193:
+	ldr	r2, .L1203+8
+	mov	r4, #0
+	ldrh	r3, [r5, #0]
+	ldr	r2, [r2, #-2020]
+	mov	r3, r3, asl #1
+	strh	sl, [r2, r3]	@ movhi
+	ldrh	r0, [r5, #0]
+	bl	INSERT_FREE_LIST
+	mvn	r3, #0
+	strh	r3, [r5, #0]	@ movhi
+	bl	FtlGcPageVarInit
+	b	.L1194
+.L1187:
+	ldr	r3, [sp, #12]
+	cmp	r6, r3
+	bne	.L1195
+	ldr	fp, [sp, #20]
+	add	r7, r7, #1
+	add	r4, r4, #1
+	cmp	r7, fp
+	uxth	r4, r4
+	bcc	.L1196
+	ldr	r2, .L1203
+	movw	r3, #3000
+	ldrh	r1, [r2, r3]
+	cmp	r1, r8
+	beq	.L1196
+	add	r1, r1, r7
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r2, .L1203+4
+	add	r3, r3, #912
+	ldrh	r3, [r2, r3]
+	cmp	r3, r4
+	bhi	.L1197
+.L1196:
+	ldr	r2, .L1203+4
+	movw	r3, #3912
+	ldrh	r3, [r2, r3]
+	cmp	r3, r4
+	bhi	.L1201
+.L1200:
+	mov	r2, #0
+.L1182:
+	ldr	r1, .L1203
+	movw	r3, #3000
+	mvn	r0, #0
+	strh	r4, [r5, #2]	@ movhi
+	strb	r2, [r5, #6]
+	strh	r0, [r1, r3]	@ movhi
+	mov	r0, r5
+	mov	r1, r4
+	bl	ftl_sb_update_avl_pages
+.L1197:
+	ldr	r0, [sp, #16]
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1204:
+	.align	2
+.L1203:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC100
+	.fnend
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	2
+	.global	FtlScanSysBlk
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r6, #0
+	ldr	r5, .L1263
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, .L1263+4
+	mov	r1, r6
+	ldr	r3, .L1263+8
+	movw	r7, #3932
+	ldr	r2, [r5, #3940]
+	ldr	r0, [r4, #-1040]
+	mov	sl, r4
+	strh	r6, [r4, r3]	@ movhi
+	movw	r3, #3958
+	strh	r6, [r5, r3]	@ movhi
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldr	r2, [r5, #3940]
+	mov	r1, r6
+	ldr	r0, [r4, #-1044]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldrh	r2, [r5, r7]
+	mov	r1, r6
+	ldr	r0, [r4, #-912]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r2, [r5, r7]
+	mov	r1, r6
+	ldr	r0, [r5, #3960]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	sub	r0, r4, #1776
+	mov	r1, #255
+	mov	r2, #12
+	bl	ftl_memset
+	movw	r3, #3852
+	ldrh	r3, [r5, r3]
+	str	r3, [sp, #8]
+	b	.L1206
+.L1208:
+	add	r3, r6, r5
+	ldr	r1, [sp, #8]
+	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	bl	V2P_block
+	str	r0, [sp, #0]
+	bl	FtlBbmIsBadBlock
+	ldr	r3, [sp, #0]
+	cmp	r0, #0
+	bne	.L1207
+	ldr	r2, [r4, #-976]
+	mov	r3, r3, asl #10
+	mla	r2, r9, r7, r2
+	str	r3, [r2, #4]
+	ldr	r3, [r4, #-1176]
+	str	r3, [r2, #8]
+	ldrh	r3, [r6, r8]
+	mul	r3, r3, r7
+	add	r7, r7, #1
+	uxth	r7, r7
+	add	r1, r3, #3
+	cmp	r3, #0
+	movlt	r3, r1
+	ldr	r1, [r4, #-1172]
+	bic	r3, r3, #3
+	add	r3, r1, r3
+	str	r3, [r2, #12]
+.L1207:
+	add	r5, r5, #1
+	uxth	r5, r5
+	b	.L1241
+.L1254:
+	mov	r7, #0
+	movw	fp, #3844
+	mov	r5, r7
+	mov	r9, #36
+	movw	r8, #3924
+.L1241:
+	ldrh	r3, [r6, fp]
+	cmp	r3, r5
+	bhi	.L1208
+	cmp	r7, #0
+	beq	.L1209
+	ldr	r0, [r4, #-976]
+	mov	r1, r7
+	mov	r2, #1
+	mov	fp, r7
+	bl	FlashReadPages
+	mov	r8, #0
+	str	r8, [sp, #12]
+.L1240:
+	ldr	r3, [r4, #-976]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
+	ldr	r6, [r2, #4]
+	cmn	r3, #1
+	ldr	r5, [r2, #12]
+	ubfx	r6, r6, #10, #16
+	bne	.L1210
+	mov	r7, #16
+.L1212:
+	ldr	r0, [r4, #-976]
+	mov	r1, #1
+	mov	r2, r1
+	add	r0, r0, r8
+	ldr	r3, [r0, #4]
+	add	r3, r3, #1
+	str	r3, [r0, #4]
+	bl	FlashReadPages
+	ldrh	r3, [r5, #0]
+	movw	r1, #65535
+	cmp	r3, r1
+	ldreq	r3, [sl, #-976]
+	mvneq	r2, #0
+	streq	r2, [r3, r8]
+	beq	.L1210
+.L1211:
+	ldr	r3, [r4, #-976]
+	ldr	r3, [r3, r8]
+	cmn	r3, #1
+	bne	.L1210
+	sub	r7, r7, #1
+	uxth	r7, r7
+	cmp	r7, #0
+	bne	.L1212
+.L1210:
+	ldr	r3, [r4, #-976]
+	ldr	r3, [r3, r8]
+	cmn	r3, #1
+	beq	.L1213
+	ldr	r2, [r4, #-1808]
+	ldr	r3, [r5, #4]
+	cmn	r2, #1
+	beq	.L1214
+	cmp	r2, r3
+	bhi	.L1215
+.L1214:
+	cmn	r3, #1
+	addne	r3, r3, #1
+	strne	r3, [sl, #-1808]
+.L1215:
+	ldrh	r3, [r5, #0]
+	movw	r2, #61604
+	cmp	r3, r2
+	beq	.L1218
+	bhi	.L1221
+	movw	r2, #61574
+	cmp	r3, r2
+	bne	.L1216
+	b	.L1261
+.L1221:
+	movw	r2, #61634
+	cmp	r3, r2
+	beq	.L1219
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L1216
+	b	.L1262
+.L1219:
+	ldr	r3, .L1263
+	mov	r9, r6
+	ldr	r1, .L1263+8
+	ldr	ip, [r4, #-1040]
+	ldr	r0, [r3, #3940]
+	ldrh	r1, [r4, r1]
+	uxth	r2, r0
+	sub	r3, r2, #1
+	rsb	r2, r1, r2
+	sub	r2, r2, #1
+	uxth	r3, r3
+	sxth	r2, r2
+	str	r2, [sp, #4]
+	b	.L1222
+.L1228:
+	mov	r6, r2, asl #2
+	ldr	r7, [r5, #4]
+	str	r6, [sp, #16]
+	ldr	r6, [ip, r2, asl #2]
+	cmp	r7, r6
+	bls	.L1223
+	ldr	ip, [ip, #0]
+	mov	r6, r9
+	cmp	ip, #0
+	bne	.L1224
+	cmp	r1, r0
+	addne	r1, r1, #1
+	ldrne	r0, .L1263+8
+	strneh	r1, [r4, r0]	@ movhi
+.L1224:
+	mov	r0, #0
+	sxth	r9, r3
+	str	r3, [sp, #4]
+	b	.L1225
+.L1226:
+	ldr	r7, [r4, #-1040]
+	add	ip, r1, #1
+	add	r0, r0, #1
+	ldr	r3, [r7, ip, asl #2]
+	mov	ip, ip, asl #1
+	uxth	r0, r0
+	str	r3, [r7, r1, asl #2]
+	mov	r1, r1, asl #1
+	ldr	r7, [r4, #-1044]
+	ldrh	ip, [r7, ip]
+	strh	ip, [r7, r1]	@ movhi
+.L1225:
+	sxth	r1, r0
+	cmp	r1, r9
+	bne	.L1226
+	ldr	r1, [sl, #-1040]
+	mov	r2, r2, asl #1
+	ldr	r0, [r5, #4]
+	ldr	ip, [sp, #16]
+	ldr	r3, [sp, #4]
+	str	r0, [r1, ip]
+	ldr	r1, [sl, #-1044]
+	strh	r6, [r1, r2]	@ movhi
+	b	.L1227
+.L1223:
+	sub	r3, r3, #1
+	uxth	r3, r3
+.L1222:
+	ldr	r6, [sp, #4]
+	sxth	r2, r3
+	cmp	r2, r6
+	bgt	.L1228
+	mov	r6, r9
+.L1227:
+	sxth	r3, r3
+	cmp	r3, #0
+	blt	.L1216
+	ldr	r2, .L1263+8
+	ldr	r0, .L1263
+	ldrh	r1, [r4, r2]
+	ldr	r0, [r0, #3940]
+	rsb	r0, r1, r0
+	sub	r0, r0, #1
+	sxth	r0, r0
+	cmp	r3, r0
+	bgt	.L1216
+	add	r1, r1, #1
+	strh	r1, [r4, r2]	@ movhi
+	ldr	r2, [r4, #-1040]
+	ldr	r1, [r5, #4]
+	str	r1, [r2, r3, asl #2]
+	mov	r3, r3, asl #1
+	ldr	r2, [r4, #-1044]
+	b	.L1258
+.L1261:
+	ldr	r1, .L1263
+	movw	r3, #3932
+	movw	ip, #3958
+	mov	r9, r6
+	ldrh	r0, [r1, r3]
+	ldrh	r1, [r1, ip]
+	sub	r2, r0, #1
+	ldr	ip, [r4, #-912]
+	uxth	r3, r2
+	rsb	r2, r1, r2
+	str	r2, [sp, #4]
+	b	.L1229
+.L1235:
+	mov	r6, r2, asl #2
+	ldr	r7, [r5, #4]
+	str	r6, [sp, #16]
+	ldr	r6, [ip, r2, asl #2]
+	cmp	r7, r6
+	bls	.L1230
+	ldr	ip, [ip, #0]
+	mov	r6, r9
+	cmp	ip, #0
+	bne	.L1231
+	cmp	r1, r0
+	addne	r1, r1, #1
+	ldrne	ip, .L1263
+	movwne	r0, #3958
+	strneh	r1, [ip, r0]	@ movhi
+.L1231:
+	sxth	ip, r3
+	mov	r0, #0
+	str	ip, [sp, #20]
+	ldr	r9, .L1263
+	str	r3, [sp, #4]
+	b	.L1232
+.L1233:
+	ldr	r7, [r4, #-912]
+	add	ip, r1, #1
+	add	r0, r0, #1
+	ldr	r3, [r7, ip, asl #2]
+	mov	ip, ip, asl #1
+	uxth	r0, r0
+	str	r3, [r7, r1, asl #2]
+	mov	r1, r1, asl #1
+	ldr	r7, [r9, #3960]
+	ldrh	ip, [r7, ip]
+	strh	ip, [r7, r1]	@ movhi
+.L1232:
+	ldr	ip, [sp, #20]
+	sxth	r1, r0
+	cmp	r1, ip
+	bne	.L1233
+	ldr	r1, [sl, #-912]
+	mov	r2, r2, asl #1
+	ldr	r0, [r5, #4]
+	ldr	ip, [sp, #16]
+	ldr	r3, [sp, #4]
+	str	r0, [r1, ip]
+	ldr	r1, .L1263
+	ldr	r1, [r1, #3960]
+	strh	r6, [r1, r2]	@ movhi
+	b	.L1234
+.L1230:
+	sub	r3, r3, #1
+	uxth	r3, r3
+.L1229:
+	ldr	r6, [sp, #4]
+	sxth	r2, r3
+	cmp	r2, r6
+	bgt	.L1235
+	mov	r6, r9
+.L1234:
+	sxth	r3, r3
+	cmp	r3, #0
+	blt	.L1216
+	ldr	r2, .L1263
+	movw	ip, #3932
+	movw	r1, #3958
+	ldrh	ip, [r2, ip]
+	ldrh	r0, [r2, r1]
+	sub	ip, ip, #1
+	rsb	ip, r0, ip
+	sxth	ip, ip
+	cmp	r3, ip
+	bgt	.L1216
+	add	r0, r0, #1
+	strh	r0, [r2, r1]	@ movhi
+	ldr	r0, [r5, #4]
+	ldr	r1, [r4, #-912]
+	str	r0, [r1, r3, asl #2]
+	mov	r3, r3, asl #1
+	ldr	r2, [r2, #3960]
+.L1258:
+	strh	r6, [r2, r3]	@ movhi
+	b	.L1216
+.L1218:
+	ldr	r3, .L1263+12
+	movw	ip, #65535
+	ldrh	r2, [r4, r3]
+	cmp	r2, ip
+	streqh	r6, [r4, r3]	@ movhi
+	beq	.L1259
+	ldr	r3, .L1263+16
+	movw	r1, #65535
+	ldrh	r0, [r4, r3]
+	cmp	r0, r1
+	beq	.L1237
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+.L1237:
+	ldr	r3, [r5, #4]
+	ldr	r2, [sl, #-1768]
+	cmp	r2, r3
+	ldr	r3, .L1263+16
+	strcsh	r6, [r4, r3]	@ movhi
+	bcs	.L1216
+	ldr	r2, .L1263+12
+	ldrh	r1, [r4, r2]
+	strh	r6, [r4, r2]	@ movhi
+	strh	r1, [r4, r3]	@ movhi
+.L1259:
+	ldr	r3, [r5, #4]
+	str	r3, [r4, #-1768]
+	b	.L1216
+.L1262:
+	mov	r0, r6
+	b	.L1260
+.L1213:
+	ldr	r3, .L1263
+	mov	r0, r6
+	ldrb	r1, [r3, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L1239
+.L1260:
+	mov	r1, #0
+.L1239:
+	bl	FtlFreeSysBlkQueueIn
+.L1216:
+	ldr	r6, [sp, #12]
+	add	r8, r8, #36
+	add	r3, r6, #1
+	uxth	r3, r3
+	str	r3, [sp, #12]
+	cmp	r3, fp
+	bne	.L1240
+.L1209:
+	ldr	ip, [sp, #8]
+	add	r3, ip, #1
+	uxth	r3, r3
+	str	r3, [sp, #8]
+.L1206:
+	ldr	r6, .L1263
+	movw	r3, #3854
+	ldr	ip, [sp, #8]
+	ldrh	r3, [r6, r3]
+	cmp	r3, ip
+	bhi	.L1254
+	ldr	r1, .L1263+4
+	ldr	r2, [r1, #-1044]
+	ldrh	r3, [r2, #0]
+	cmp	r3, #0
+	bne	.L1242
+	ldr	r0, .L1263+8
+	ldrh	r1, [r1, r0]
+	cmp	r1, #0
+	ldrne	r0, [r6, #3940]
+	bne	.L1243
+	b	.L1242
+.L1247:
+	mov	r1, r1, asl #1
+	ldrh	r1, [r2, r1]
+	cmp	r1, #0
+	beq	.L1244
+	ldr	r7, .L1263
+	sxth	r6, r3
+	ldr	r1, .L1263+4
+	mov	r5, #0
+	b	.L1245
+.L1246:
+	ldr	ip, [r1, #-1044]
+	mov	r0, r2, asl #1
+	rsb	r4, r6, r2
+	add	r3, r3, #1
+	ldrh	sl, [ip, r0]
+	mov	r8, r4, asl #1
+	uxth	r3, r3
+	strh	sl, [ip, r8]	@ movhi
+	ldr	ip, [r1, #-1040]
+	ldr	r2, [ip, r2, asl #2]
+	str	r2, [ip, r4, asl #2]
+	ldr	r2, [r1, #-1044]
+	strh	r5, [r2, r0]	@ movhi
+.L1245:
+	ldr	r0, [r7, #3940]
+	sxth	r2, r3
+	cmp	r2, r0
+	bcc	.L1246
+	b	.L1242
+.L1244:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L1243:
+	sxth	r1, r3
+	cmp	r1, r0
+	bcc	.L1247
+.L1242:
+	ldr	r2, .L1263
+	ldr	r1, [r2, #3960]
+	ldrh	r3, [r1, #0]
+	cmp	r3, #0
+	bne	.L1248
+	movw	r0, #3958
+	ldrh	r0, [r2, r0]
+	cmp	r0, #0
+	movwne	r0, #3932
+	ldrneh	r2, [r2, r0]
+	bne	.L1249
+	b	.L1248
+.L1253:
+	mov	ip, r0, asl #1
+	ldrh	ip, [r1, ip]
+	cmp	ip, #0
+	beq	.L1250
+	ldr	r1, .L1263
+	movw	r8, #3932
+	ldr	r7, .L1263+4
+	mov	r6, #0
+	b	.L1251
+.L1252:
+	ldr	r4, [r1, #3960]
+	mov	ip, r2, asl #1
+	rsb	r5, r0, r2
+	add	r3, r3, #1
+	ldrh	r9, [r4, ip]
+	mov	sl, r5, asl #1
+	uxth	r3, r3
+	strh	r9, [r4, sl]	@ movhi
+	ldr	r4, [r7, #-912]
+	ldr	r2, [r4, r2, asl #2]
+	str	r2, [r4, r5, asl #2]
+	ldr	r2, [r1, #3960]
+	strh	r6, [r2, ip]	@ movhi
+.L1251:
+	ldrh	ip, [r1, r8]
+	sxth	r2, r3
+	cmp	r2, ip
+	blt	.L1252
+	b	.L1248
+.L1250:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L1249:
+	sxth	r0, r3
+	cmp	r0, r2
+	blt	.L1253
+.L1248:
+	mov	r0, #0
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1264:
+	.align	2
+.L1263:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1048
+	.word	-1776
+	.word	-1772
+	.fnend
+	.size	FtlScanSysBlk, .-FtlScanSysBlk
+	.align	2
+	.global	FtlGetLastWrittenPage
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #1
+	ldr	r3, .L1276
+	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
+	.save {r4, r5, r6, r7, r8, sl, lr}
+	movweq	r2, #3914
+	movwne	r2, #3912
+	.pad #108
+	sub	sp, sp, #108
+	ldrh	r4, [r3, r2]
+	add	r7, sp, #4
+	mov	r5, r1
+	add	r3, sp, #40
+	sub	r4, r4, #1
+	str	r3, [sp, #16]
+	mov	sl, r0, asl #10
+	mov	r1, #1
+	uxth	r4, r4
+	mov	r0, r7
+	mov	r2, r5
+	mov	r8, #0
+	sxth	r3, r4
+	str	r8, [sp, #12]
+	orr	r3, r3, sl
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #40]
+	cmn	r3, #1
+	bne	.L1269
+	b	.L1274
+.L1272:
+	add	r6, r6, r3
+	mov	r0, r7
+	mov	r1, #1
+	mov	r2, r5
+	add	r6, r6, r6, lsr #31
+	ubfx	r6, r6, #1, #16
+	sxth	r3, r6
+	orr	r3, r3, sl
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #40]
+	cmn	r3, #1
+	bne	.L1270
+	ldr	r3, [sp, #44]
+	cmn	r3, #1
+	bne	.L1270
+	ldr	r3, [sp, #4]
+	cmn	r3, #1
+	subne	r4, r6, #1
+	uxthne	r4, r4
+	bne	.L1274
+.L1270:
+	add	r6, r6, #1
+	uxth	r8, r6
+.L1274:
+	sxth	r6, r8
+	sxth	r3, r4
+	cmp	r6, r3
+	ble	.L1272
+.L1269:
+	sxth	r0, r4
+	add	sp, sp, #108
+	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
+.L1277:
+	.align	2
+.L1276:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.align	2
+	.global	FtlLoadSysInfo
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r5, #0
+	ldr	r4, .L1294
+	mov	r1, r5
+	ldr	r2, .L1294+4
+	ldr	r3, [r4, #-940]
+	ldr	r0, [r4, #-2020]
+	str	r5, [r4, #184]
+	str	r3, [r4, #188]
+	movw	r3, #3852
+	ldrh	r2, [r2, r3]
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldr	r3, .L1294+8
+	ldrh	r0, [r4, r3]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1292
+	mov	r1, #1
+	ldr	r7, .L1294+12
+	bl	FtlGetLastWrittenPage
+	ldr	r3, .L1294+16
+	add	r2, r0, #1
+	mov	r6, r0
+	strh	r2, [r4, r3]	@ movhi
+	b	.L1280
+.L1283:
+	ldr	r2, .L1294+8
+	mov	r1, #1
+	ldr	r0, .L1294+20
+	ldrh	r2, [r4, r2]
+	orr	r3, r3, r2, asl #10
+	str	r3, [r4, #180]
+	ldr	r3, [r4, #-964]
+	mov	r2, r1
+	str	r3, [r4, #184]
+	bl	FlashReadPages
+	ldr	r3, [r4, #176]
+	cmn	r3, #1
+	beq	.L1281
+	ldr	r3, [r4, #-964]
+	ldr	r3, [r3, #0]
+	cmp	r3, r7
+	bne	.L1281
+	ldr	r3, [r4, #-940]
+	ldrh	r2, [r3, #0]
+	movw	r3, #61604
+	cmp	r2, r3
+	beq	.L1282
+.L1281:
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L1280:
+	add	r3, r5, r6
+	sxth	r3, r3
+	cmp	r3, #0
+	bge	.L1283
+.L1282:
+	ldr	r4, .L1294
+	mov	r2, #48
+	ldr	r5, .L1294+4
+	movw	r6, #3852
+	ldr	r0, .L1294+24
+	ldr	r7, [r4, #184]
+	mov	r1, r7
+	bl	memcpy
+	ldrh	r2, [r5, r6]
+	add	r1, r7, #48
+	ldr	r0, [r4, #-2020]
+	mov	r2, r2, asl #1
+	bl	memcpy
+	ldrh	r1, [r5, r6]
+	ldr	r3, [r4, #184]
+	ldr	r0, [r4, #-1844]
+	mov	r2, r1, lsr #3
+	add	r1, r1, #24
+	add	r2, r2, #4
+	mov	r1, r1, lsr #1
+	add	r1, r3, r1, asl #2
+	bl	memcpy
+	movw	r3, #3956
+	ldrh	r3, [r5, r3]
+	cmp	r3, #0
+	beq	.L1284
+	ldrh	r3, [r5, r6]
+	movw	r2, #3948
+	ldrh	r2, [r5, r2]
+	ldr	r0, [r4, #-904]
+	mov	r1, r3, lsr #3
+	add	r1, r1, r3, asl #1
+	ldr	r3, [r4, #184]
+	add	r1, r1, #52
+	mov	r2, r2, asl #2
+	ubfx	r1, r1, #2, #14
+	add	r1, r3, r1, asl #2
+	bl	memcpy
+.L1284:
+	ldr	r4, .L1294
+	ldr	r3, .L1294+12
+	ldr	r2, [r4, #-2076]
+	cmp	r2, r3
+	bne	.L1292
+	ldr	r3, .L1294+28
+	movw	r1, #3866
+	ldrb	r0, [r4, #-2066]	@ zero_extendqisi2
+	ldrh	r2, [r4, r3]
+	ldr	r3, .L1294+32
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r3, .L1294+4
+	ldrh	r1, [r3, r1]
+	cmp	r0, r1
+	bne	.L1292
+	movw	r1, #3912
+	movw	r0, #3918
+	ldrh	r1, [r3, r1]
+	movw	r5, #65535
+	ldrh	r0, [r3, r0]
+	str	r2, [r4, #212]
+	mul	r1, r2, r1
+	str	r1, [r3, #3972]
+	mul	r1, r0, r1
+	ldr	r0, [r3, #3856]
+	str	r1, [r3, #3952]
+	movw	r1, #3982
+	ldrh	r1, [r3, r1]
+	rsb	r0, r1, r0
+	rsb	r0, r2, r0
+	movw	r2, #3844
+	ldrh	r1, [r3, r2]
+	bl	__aeabi_uidiv
+	ldr	r3, .L1294+36
+	ldr	r1, .L1294+40
+	strh	r0, [r4, r3]	@ movhi
+	ldr	r3, .L1294+44
+	ldrh	r2, [r4, r3]
+	add	r3, r3, #62
+	strh	r2, [r4, r3]	@ movhi
+	sub	r3, r3, #60
+	ldrh	r3, [r4, r3]
+	mov	r0, r3, lsr #6
+	and	r3, r3, #63
+	strb	r3, [r4, #-1994]
+	ldrb	r3, [r4, #-2065]	@ zero_extendqisi2
+	strh	r0, [r4, r1]	@ movhi
+	mvn	r1, #0
+	ldr	r0, .L1294+48
+	strb	r3, [r4, #-1992]
+	ldr	r3, .L1294+52
+	strh	r1, [r4, r3]	@ movhi
+	mov	r3, #0
+	ldr	r1, .L1294+56
+	strh	r3, [r4, r0]	@ movhi
+	strb	r3, [r4, #-1758]
+	ldrh	r0, [r4, r1]
+	add	r1, r1, #106
+	strb	r3, [r4, #-1756]
+	str	r3, [r4, #-1820]
+	strh	r0, [r4, r1]	@ movhi
+	sub	r1, r1, #104
+	ldr	r0, .L1294+60
+	ldrh	r1, [r4, r1]
+	mov	ip, r1, lsr #6
+	and	r1, r1, #63
+	strb	r1, [r4, #-1946]
+	ldrb	r1, [r4, #-2064]	@ zero_extendqisi2
+	strh	ip, [r4, r0]	@ movhi
+	strb	r1, [r4, #-1944]
+	ldr	r1, .L1294+64
+	ldrh	r0, [r4, r1]
+	add	r1, r1, #150
+	strh	r0, [r4, r1]	@ movhi
+	sub	r1, r1, #148
+	ldr	r0, .L1294+68
+	ldrh	r1, [r4, r1]
+	mov	ip, r1, lsr #6
+	and	r1, r1, #63
+	strb	r1, [r4, #-1898]
+	ldrb	r1, [r4, #-2063]	@ zero_extendqisi2
+	strh	ip, [r4, r0]	@ movhi
+	strb	r1, [r4, #-1896]
+	str	r3, [r4, #-1832]
+	ldr	r1, [r4, #-2044]
+	str	r3, [r4, #-1840]
+	str	r3, [r4, #-1824]
+	str	r3, [r4, #-1796]
+	str	r3, [r4, #-1788]
+	str	r3, [r4, #-1828]
+	ldr	r3, [r4, #-2036]
+	str	r1, [r4, #-1800]
+	ldr	r1, [r4, #-1808]
+	cmp	r3, r1
+	strhi	r3, [r4, #-1808]
+	ldr	r4, .L1294
+	ldr	r3, [r4, #-2040]
+	ldr	r1, [r4, #-1804]
+	cmp	r3, r1
+	strhi	r3, [r4, #-1804]
+	cmp	r2, r5
+	beq	.L1287
+	ldr	r0, .L1294+72
+	bl	make_superblock
+.L1287:
+	ldr	r3, .L1294+76
+	ldrh	r3, [r4, r3]
+	cmp	r3, r5
+	beq	.L1288
+	ldr	r0, .L1294+80
+	bl	make_superblock
+.L1288:
+	ldr	r4, .L1294
+	movw	r5, #65535
+	ldr	r3, .L1294+84
+	ldrh	r3, [r4, r3]
+	cmp	r3, r5
+	beq	.L1289
+	sub	r0, r4, #1904
+	bl	make_superblock
+.L1289:
+	ldr	r3, .L1294+52
+	ldrh	r3, [r4, r3]
+	cmp	r3, r5
+	beq	.L1293
+	ldr	r0, .L1294+88
+	bl	make_superblock
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1292:
+	mvn	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1293:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1295:
+	.align	2
+.L1294:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	-1776
+	.word	1179929683
+	.word	-1774
+	.word	.LANCHOR2+176
+	.word	.LANCHOR2-2076
+	.word	-2068
+	.word	-1770
+	.word	-1780
+	.word	-1998
+	.word	-2062
+	.word	-1762
+	.word	-1764
+	.word	-2058
+	.word	-1950
+	.word	-2054
+	.word	-1902
+	.word	.LANCHOR2-2000
+	.word	-1952
+	.word	.LANCHOR2-1952
+	.word	-1904
+	.word	.LANCHOR2-1764
+	.fnend
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	2
+	.global	FtlLoadBbt
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	ldr	r6, .L1312
+	ldr	r8, .L1312+4
+	ldr	r3, [r6, #-964]
+	mov	r7, r6
+	ldr	r4, [r6, #-940]
+	str	r3, [r6, #184]
+	str	r4, [r6, #188]
+	bl	FtlBbtMemInit
+	movw	r3, #3908
+	ldrh	r5, [r8, r3]
+	sub	r5, r5, #1
+	uxth	r5, r5
+	b	.L1297
+.L1301:
+	mov	r1, #1
+	mov	r3, r5, asl #10
+	ldr	r0, .L1312+8
+	mov	r2, r1
+	str	r3, [r6, #180]
+	bl	FlashReadPages
+	ldr	r3, [r6, #176]
+	cmn	r3, #1
+	bne	.L1298
+	ldr	r3, [r6, #180]
+	mov	r1, #1
+	ldr	r0, .L1312+8
+	mov	r2, r1
+	add	r3, r3, #1
+	str	r3, [r6, #180]
+	bl	FlashReadPages
+.L1298:
+	ldr	r3, [r7, #176]
+	cmn	r3, #1
+	beq	.L1299
+	ldrh	r2, [r4, #0]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L1299
+	ldr	r3, .L1312+4
+	movw	r2, #3976
+	strh	r5, [r3, r2]	@ movhi
+	ldr	r2, [r4, #4]
+	str	r2, [r3, #3984]
+	movw	r2, #3980
+	ldrh	r1, [r4, #8]
+	strh	r1, [r3, r2]	@ movhi
+	b	.L1300
+.L1299:
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L1297:
+	movw	r3, #3908
+	ldrh	r3, [r8, r3]
+	sub	r3, r3, #48
+	cmp	r5, r3
+	bgt	.L1301
+.L1300:
+	ldr	r5, .L1312+4
+	movw	r8, #3976
+	movw	r3, #65535
+	ldrh	r2, [r5, r8]
+	cmp	r2, r3
+	beq	.L1311
+	movw	r6, #3980
+	ldrh	r2, [r5, r6]
+	cmp	r2, r3
+	beq	.L1303
+	ldr	r7, .L1312
+	mov	r1, #1
+	mov	r2, r2, asl #10
+	add	r0, r7, #176
+	str	r2, [r7, #180]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r3, [r7, #176]
+	cmn	r3, #1
+	beq	.L1303
+	ldrh	r2, [r4, #0]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L1303
+	ldr	r3, [r4, #4]
+	ldr	r2, [r5, #3984]
+	cmp	r3, r2
+	strhi	r3, [r5, #3984]
+	ldrhih	r2, [r5, r6]
+	ldrhih	r3, [r4, #8]
+	strhih	r2, [r5, r8]	@ movhi
+	strhih	r3, [r5, r6]	@ movhi
+.L1303:
+	ldr	r8, .L1312+4
+	movw	r3, #3976
+	mov	r1, #1
+	mov	r6, #0
+	ldr	r5, .L1312
+	ldrh	r0, [r8, r3]
+	bl	FtlGetLastWrittenPage
+	movw	r3, #3978
+	add	r2, r0, #1
+	mov	r7, r0
+	strh	r2, [r8, r3]	@ movhi
+	b	.L1304
+.L1307:
+	movw	r2, #3976
+	mov	r1, #1
+	ldrh	r2, [r8, r2]
+	ldr	r0, .L1312+8
+	orr	r3, r3, r2, asl #10
+	str	r3, [r5, #180]
+	ldr	r3, [r5, #-964]
+	mov	r2, r1
+	str	r3, [r5, #184]
+	bl	FlashReadPages
+	ldr	r3, [r5, #176]
+	cmn	r3, #1
+	beq	.L1305
+	ldrh	r2, [r4, #0]
+	movw	r3, #61649
+	cmp	r2, r3
+	beq	.L1306
+.L1305:
+	sub	r6, r6, #1
+	uxth	r6, r6
+.L1304:
+	add	r3, r6, r7
+	sxth	r3, r3
+	cmp	r3, #0
+	bge	.L1307
+.L1306:
+	ldr	r3, .L1312+4
+	movw	r2, #3982
+	ldrh	r1, [r4, #10]
+	ldrh	r0, [r4, #12]
+	strh	r1, [r3, r2]	@ movhi
+	movw	r2, #65535
+	cmp	r0, r2
+	beq	.L1308
+	ldr	r2, [r3, #3840]
+	cmp	r0, r2
+	beq	.L1308
+	movw	r1, #3854
+	ldrh	r3, [r3, r1]
+	mov	r3, r3, lsr #2
+	cmp	r2, r3
+	bcs	.L1308
+	cmp	r0, r3
+	bcs	.L1308
+	bl	FtlSysBlkNumInit
+.L1308:
+	ldr	r5, .L1312+12
+	mov	r4, #0
+	movw	r7, #3866
+	ldr	r6, .L1312
+	sub	r8, r5, #4000
+	b	.L1309
+.L1310:
+	ldr	r3, .L1312+16
+	ldr	r1, [r6, #184]
+	ldr	r0, [r5, #4]!
+	ldrh	r2, [r6, r3]
+	mov	r2, r2, asl #2
+	mla	r1, r4, r2, r1
+	bl	memcpy
+	add	r4, r4, #1
+.L1309:
+	ldrh	r3, [r8, r7]
+	cmp	r4, r3
+	bcc	.L1310
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1311:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1313:
+	.align	2
+.L1312:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+176
+	.word	.LANCHOR0+4000
+	.word	-1032
+	.fnend
+	.size	FtlLoadBbt, .-FtlLoadBbt
+	.align	2
+	.global	FtlLoadFactoryBbt
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r5, #0
+	ldr	r3, .L1321
+	movw	fp, #3866
+	ldr	r7, .L1321+4
+	ldr	r6, .L1321+8
+	ldr	r2, [r3, #-964]
+	ldr	r8, [r3, #-940]
+	str	r2, [r3, #184]
+	str	r8, [r3, #188]
+	b	.L1315
+.L1320:
+	movw	r9, #3908
+	mvn	r3, #0
+	ldrh	r4, [r6, r9]
+	strh	r3, [r7], #2	@ movhi
+	add	r4, r4, r3
+	ldr	sl, .L1321
+	uxth	r4, r4
+	b	.L1316
+.L1319:
+	mla	r3, r3, r5, r4
+	mov	r1, #1
+	ldr	r0, .L1321+12
+	mov	r2, r1
+	mov	r3, r3, asl #10
+	str	r3, [sl, #180]
+	bl	FlashReadPages
+	ldr	r3, [sl, #176]
+	cmn	r3, #1
+	beq	.L1317
+	ldrh	r2, [r8, #0]
+	movw	r3, #61664
+	cmp	r2, r3
+	streqh	r4, [r7, #-2]	@ movhi
+	beq	.L1318
+.L1317:
+	sub	r4, r4, #1
+	uxth	r4, r4
+.L1316:
+	ldrh	r3, [r6, r9]
+	sub	r2, r3, #16
+	cmp	r4, r2
+	bgt	.L1319
+.L1318:
+	add	r5, r5, #1
+.L1315:
+	ldrh	r3, [r6, fp]
+	cmp	r5, r3
+	bcc	.L1320
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1322:
+	.align	2
+.L1321:
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3988
+	.word	.LANCHOR0
+	.word	.LANCHOR2+176
+	.fnend
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	.align	2
+	.global	FlashProgSlc2KPages
+	.type	FlashProgSlc2KPages, %function
+FlashProgSlc2KPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #68
+	sub	sp, sp, #68
+	mov	sl, r1
+	mov	r9, r2
+	str	r3, [sp, #12]
+	mov	r4, r0
+	ldr	r3, .L1342
+	mov	r6, r0
+	mov	r8, #0
+	ldr	r7, .L1342+4
+	ldrb	fp, [r3, #2901]	@ zero_extendqisi2
+	b	.L1324
+.L1331:
+	rsb	r3, r8, sl
+	add	r2, sp, #20
+	mov	r0, r6
+	mov	r1, r9
+	uxtb	r3, r3
+	str	r3, [sp, #0]
+	add	r3, sp, #24
+	bl	LogAddr2PhyAddr
+	ldr	r3, [sp, #24]
+	ldrb	r2, [r7, #3762]	@ zero_extendqisi2
+	cmp	r3, r2
+	mvncs	r3, #0
+	strcs	r3, [r6, #0]
+	bcs	.L1326
+	add	r3, r7, r3
+	ldrb	r5, [r3, #3764]	@ zero_extendqisi2
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	bl	NandcFlashCs
+	mov	r0, r5
+	ldr	r1, [sp, #20]
+	bl	FlashProgFirstCmd
+	ldr	r3, [r6, #12]
+	mov	r2, fp
+	mov	r1, #1
+	mov	r0, r5
+	str	r3, [sp, #0]
+	ldr	r3, [r6, #8]
+	bl	NandcXferData
+	ldr	r1, [sp, #20]
+	mov	r0, r5
+	bl	FlashProgSecondCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	ldr	r1, [sp, #20]
+	mov	r0, r5
+	bl	FlashReadStatus
+	ldr	r3, [sp, #20]
+	ands	r0, r0, #1
+	mvnne	r0, #0
+	str	r0, [r6, #0]
+	ldr	r1, [r7, #856]
+	mov	r0, r5
+	add	r1, r1, r3
+	bl	FlashProgFirstCmd
+	ldr	r3, [r6, #8]
+	ldr	r2, [r6, #12]
+	mov	r1, #1
+	cmp	r3, #0
+	mov	r0, r5
+	addne	r3, r3, #2048
+	cmp	r2, #0
+	addne	r2, r2, #8
+	str	r2, [sp, #0]
+	mov	r2, fp
+	bl	NandcXferData
+	ldr	r3, [sp, #20]
+	ldr	r1, [r7, #856]
+	mov	r0, r5
+	add	r1, r1, r3
+	bl	FlashProgSecondCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	ldr	r1, [sp, #20]
+	bl	FlashReadStatus
+	tst	r0, #1
+	mov	r0, r5
+	mvnne	r3, #0
+	strne	r3, [r6, #0]
+	bl	NandcFlashDeCs
+.L1326:
+	add	r8, r8, #1
+	add	r6, r6, #36
+.L1324:
+	cmp	r8, sl
+	bne	.L1331
+	ldr	r3, [sp, #12]
+	cmp	r3, #0
+	movne	r6, #0
+	ldrne	r5, .L1342+8
+	bne	.L1332
+	b	.L1333
+.L1338:
+	ldr	r3, [r4, #0]
+	cmn	r3, #1
+	bne	.L1334
+	ldr	r1, [r4, #4]
+	ldr	r0, .L1342+12
+	bl	printk
+	b	.L1335
+.L1334:
+	rsb	r3, r6, sl
+	mov	r1, r9
+	add	r2, sp, #20
+	mov	r0, r4
+	uxtb	r3, r3
+	str	r3, [sp, #0]
+	add	r3, sp, #24
+	bl	LogAddr2PhyAddr
+	ldr	r2, [r5, #216]
+	mov	r3, #0
+	mov	lr, r4
+	add	ip, sp, #28
+	str	r3, [r2, #0]
+	ldr	r2, [r5, #220]
+	str	r3, [r2, #0]
+	ldmia	lr!, {r0, r1, r2, r3}
+	stmia	ip!, {r0, r1, r2, r3}
+	ldmia	lr!, {r0, r1, r2, r3}
+	stmia	ip!, {r0, r1, r2, r3}
+	add	r0, sp, #28
+	ldr	r3, [lr, #0]
+	mov	r1, #1
+	mov	r2, r9
+	str	r3, [ip, #0]
+	ldr	r3, [r5, #216]
+	str	r3, [sp, #36]
+	ldr	r3, [r5, #220]
+	str	r3, [sp, #40]
+	bl	FlashReadPages
+	ldr	r7, [sp, #28]
+	cmn	r7, #1
+	bne	.L1336
+	ldr	r0, .L1342+16
+	ldr	r1, [r4, #4]
+	bl	printk
+	str	r7, [r4, #0]
+.L1336:
+	ldr	r3, [r4, #12]
+	cmp	r3, #0
+	beq	.L1337
+	ldr	r2, [r3, #0]
+	ldr	r3, [r5, #220]
+	ldr	r3, [r3, #0]
+	cmp	r2, r3
+	beq	.L1337
+	ldr	r0, .L1342+20
+	ldr	r1, [r4, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r4, #0]
+.L1337:
+	ldr	r3, [r4, #8]
+	cmp	r3, #0
+	beq	.L1335
+	ldr	r2, [r3, #0]
+	ldr	r3, [r5, #216]
+	ldr	r3, [r3, #0]
+	cmp	r2, r3
+	beq	.L1335
+	ldr	r0, .L1342+24
+	ldr	r1, [r4, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r4, #0]
+.L1335:
+	add	r6, r6, #1
+	add	r4, r4, #36
+.L1332:
+	cmp	r6, sl
+	bne	.L1338
+.L1333:
+	mov	r0, #0
+	add	sp, sp, #68
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1343:
+	.align	2
+.L1342:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC101
+	.word	.LC102
+	.word	.LC103
+	.word	.LC104
+	.fnend
+	.size	FlashProgSlc2KPages, .-FlashProgSlc2KPages
+	.align	2
+	.global	FlashProgPages
+	.type	FlashProgPages, %function
+FlashProgPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #76
+	sub	sp, sp, #76
+	ldr	r5, .L1372
+	mov	r9, r0
+	str	r1, [sp, #8]
+	mov	sl, r2
+	str	r3, [sp, #16]
+	ldr	ip, [r5, #3624]
+	ldrb	r6, [r5, #852]	@ zero_extendqisi2
+	ldrb	ip, [ip, #19]	@ zero_extendqisi2
+	cmp	r6, #0
+	moveq	fp, r5
+	str	ip, [sp, #20]
+	ldr	ip, .L1372+4
+	ldrb	ip, [ip, #2901]	@ zero_extendqisi2
+	str	ip, [sp, #12]
+	beq	.L1345
+	bl	FlashProgSlc2KPages
+	b	.L1346
+.L1359:
+	mov	r4, #36
+	ldr	r2, [sp, #8]
+	mul	r4, r4, r6
+	rsb	r3, r6, r2
+	mov	r1, sl
+	add	r2, sp, #28
+	uxtb	r3, r3
+	str	r3, [sp, #0]
+	add	r7, r9, r4
+	add	r3, sp, #32
+	mov	r0, r7
+	bl	LogAddr2PhyAddr
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
+	ldr	r2, [sp, #32]
+	cmp	r2, r3
+	mvncs	r3, #0
+	strcs	r3, [r9, r4]
+	mov	r8, r0
+	bcs	.L1348
+	ldrb	r1, [r5, #3833]	@ zero_extendqisi2
+	add	r2, fp, r2, asl #4
+	cmp	r1, #0
+	ldr	r2, [r2, #3636]
+	moveq	r8, #0
+	cmp	r2, #0
+	beq	.L1350
+	cmp	r3, #1
+	bne	.L1351
+	ldr	r0, [r5, #3012]
+	bl	NandcIqrWaitFlashReady
+.L1351:
+	ldrb	r0, [sp, #32]	@ zero_extendqisi2
+	bl	FlashWaitCmdDone
+.L1350:
+	ldr	r2, [sp, #32]
+	mov	r1, #0
+	cmp	r8, #0
+	add	r3, r5, r2, asl #4
+	movne	r0, #36
+	str	r1, [r3, #3640]
+	ldr	r1, [sp, #28]
+	str	r7, [r3, #3636]
+	str	r1, [r3, #3632]
+	addne	r1, r6, #1
+	mlane	r1, r0, r1, r9
+	strne	r1, [r3, #3640]
+	add	r3, fp, r2
+	add	r2, fp, r2, asl #4
+	ldrb	r4, [r3, #3764]	@ zero_extendqisi2
+	ldrb	r3, [fp, #3762]	@ zero_extendqisi2
+	cmp	r3, #1
+	strb	r4, [r2, #3628]
+	mov	r0, r4
+	bne	.L1353
+	bl	NandcWaitFlashReady
+	b	.L1354
+.L1353:
+	bl	NandcFlashCs
+	ldr	r3, [sp, #32]
+	mov	r0, r4
+	ldr	r1, [sp, #28]
+	add	r3, r5, r3, asl #2
+	ldr	r2, [r3, #3588]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r0, r4
+	bl	NandcFlashDeCs
+.L1354:
+	ldr	r2, [sp, #20]
+	sub	r3, r2, #1
+	cmp	r3, #6
+	bhi	.L1355
+	add	r3, r5, r4
+	ldrb	r3, [r3, #3756]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1355
+	mov	r0, r4
+	ldrb	r1, [r5, #1]	@ zero_extendqisi2
+	ldr	r2, .L1372+8
+	mov	r3, #0
+	bl	HynixSetRRPara
+.L1355:
+	mov	r0, r4
+	bl	NandcFlashCs
+	cmp	sl, #1
+	mov	r0, r4
+	bne	.L1356
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1356
+	bl	flash_enter_slc_mode
+	b	.L1357
+.L1356:
+	bl	flash_exit_slc_mode
+.L1357:
+	mov	r0, r4
+	ldr	r1, [sp, #28]
+	bl	FlashProgFirstCmd
+	ldr	r3, [r7, #12]
+	mov	r0, r4
+	mov	r1, #1
+	ldr	r2, [sp, #12]
+	str	r3, [sp, #0]
+	ldr	r3, [r7, #8]
+	bl	NandcXferData
+	cmp	r8, #0
+	beq	.L1358
+	mov	r0, r4
+	ldr	r1, [sp, #28]
+	bl	FlashProgDpFirstCmd
+	ldr	r3, [sp, #32]
+	ldr	r1, [sp, #28]
+	mov	r0, r4
+	add	r3, r5, r3, asl #2
+	ldr	r2, [r3, #3588]
+	adds	r2, r2, #0
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	ldr	r3, [sp, #28]
+	ldr	r1, [r5, #856]
+	mov	r0, r4
+	add	r1, r1, r3
+	bl	FlashProgDpSecondCmd
+	add	r3, r6, #1
+	mov	r2, #36
+	mov	r0, r4
+	mla	r3, r2, r3, r9
+	mov	r1, #1
+	ldr	r2, [r3, #12]
+	str	r2, [sp, #0]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r3, #8]
+	bl	NandcXferData
+.L1358:
+	mov	r0, r4
+	ldr	r1, [sp, #28]
+	bl	FlashProgSecondCmd
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	add	r6, r6, r8
+.L1348:
+	add	r6, r6, #1
+.L1345:
+	ldr	r3, [sp, #8]
+	cmp	r6, r3
+	bcc	.L1359
+	ldr	r5, .L1372
+	mov	r4, #0
+	ldr	r6, .L1372+12
+	ldr	r0, [r5, #3012]
+	bl	NandcIqrWaitFlashReady
+	b	.L1360
+.L1362:
+	uxtb	r0, r4
+	bl	FlashWaitCmdDone
+	cmp	sl, #1
+	bne	.L1361
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1361
+	ldrb	r0, [r6, r4, asl #4]	@ zero_extendqisi2
+	bl	flash_exit_slc_mode
+.L1361:
+	add	r4, r4, #1
+.L1360:
+	ldrb	r3, [r5, #3762]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcc	.L1362
+	ldr	r2, [sp, #16]
+	cmp	r2, #0
+	ldreq	r0, [sp, #16]
+	beq	.L1346
+	mov	r5, #0
+	ldr	r4, .L1372+16
+	ldr	r6, [sp, #8]
+	b	.L1363
+.L1368:
+	ldr	r3, [r9, #0]
+	cmn	r3, #1
+	bne	.L1364
+	ldr	r1, [r9, #4]
+	ldr	r0, .L1372+20
+	bl	printk
+	b	.L1365
+.L1364:
+	rsb	r3, r5, r6
+	mov	r1, sl
+	add	r2, sp, #28
+	mov	r0, r9
+	uxtb	r3, r3
+	str	r3, [sp, #0]
+	add	r3, sp, #32
+	bl	LogAddr2PhyAddr
+	ldr	r2, [r4, #216]
+	mov	r3, #0
+	mov	lr, r9
+	add	ip, sp, #36
+	str	r3, [r2, #0]
+	ldr	r2, [r4, #220]
+	str	r3, [r2, #0]
+	ldmia	lr!, {r0, r1, r2, r3}
+	stmia	ip!, {r0, r1, r2, r3}
+	ldmia	lr!, {r0, r1, r2, r3}
+	stmia	ip!, {r0, r1, r2, r3}
+	add	r0, sp, #36
+	ldr	r3, [lr, #0]
+	mov	r1, #1
+	mov	r2, sl
+	str	r3, [ip, #0]
+	ldr	r3, [r4, #216]
+	str	r3, [sp, #44]
+	ldr	r3, [r4, #220]
+	str	r3, [sp, #48]
+	bl	FlashReadPages
+	ldr	r7, [sp, #36]
+	cmn	r7, #1
+	bne	.L1366
+	ldr	r0, .L1372+24
+	ldr	r1, [r9, #4]
+	bl	printk
+	str	r7, [r9, #0]
+.L1366:
+	ldr	r3, [r9, #12]
+	cmp	r3, #0
+	beq	.L1367
+	ldr	r2, [r3, #0]
+	ldr	r3, [r4, #220]
+	ldr	r3, [r3, #0]
+	cmp	r2, r3
+	beq	.L1367
+	ldr	r0, .L1372+28
+	ldr	r1, [r9, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r9, #0]
+.L1367:
+	ldr	r3, [r9, #8]
+	cmp	r3, #0
+	beq	.L1365
+	ldr	r2, [r3, #0]
+	ldr	r3, [r4, #216]
+	ldr	r3, [r3, #0]
+	cmp	r2, r3
+	beq	.L1365
+	ldr	r0, .L1372+32
+	ldr	r1, [r9, #4]
+	bl	printk
+	mvn	r3, #0
+	str	r3, [r9, #0]
+.L1365:
+	add	r5, r5, #1
+	add	r9, r9, #36
+.L1363:
+	cmp	r5, r6
+	bne	.L1368
+	mov	r0, #0
+.L1346:
+	add	sp, sp, #76
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1373:
+	.align	2
+.L1372:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR0+4
+	.word	.LANCHOR0+3628
+	.word	.LANCHOR2
+	.word	.LC101
+	.word	.LC102
+	.word	.LC103
+	.word	.LC104
+	.fnend
+	.size	FlashProgPages, .-FlashProgPages
+	.align	2
+	.type	FtlVpcTblFlush.part.13, %function
+FtlVpcTblFlush.part.13:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r1, #255
+	ldr	r4, .L1386
+	movw	r7, #3852
+	ldr	r6, .L1386+4
+	ldr	r3, [r4, #-964]
+	ldr	r5, [r4, #-940]
+	str	r3, [r4, #184]
+	ldr	r3, .L1386+8
+	str	r5, [r4, #188]
+	ldrh	r3, [r4, r3]
+	strh	r3, [r5, #2]	@ movhi
+	ldr	r3, .L1386+12
+	strh	r3, [r5, #0]	@ movhi
+	ldr	r3, [r4, #-1768]
+	str	r3, [r5, #4]
+	mov	r3, #0
+	str	r3, [r5, #8]
+	str	r3, [r5, #12]
+	ldr	r3, .L1386+16
+	str	r3, [r4, #-2076]
+	ldr	r3, .L1386+20
+	str	r3, [r4, #-2072]
+	ldr	r3, .L1386+24
+	ldrh	r2, [r4, r3]
+	ldr	r3, .L1386+28
+	strh	r2, [r4, r3]	@ movhi
+	movw	r3, #3866
+	ldrh	r3, [r6, r3]
+	strb	r3, [r4, #-2066]
+	ldr	r3, .L1386+32
+	ldrh	r2, [r4, r3]
+	sub	r3, r3, #62
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #64
+	ldrh	r2, [r4, r3]
+	ldrb	r3, [r4, #-1994]	@ zero_extendqisi2
+	orr	r2, r3, r2, asl #6
+	ldr	r3, .L1386+36
+	strh	r2, [r4, r3]	@ movhi
+	ldrb	r3, [r4, #-1992]	@ zero_extendqisi2
+	strb	r3, [r4, #-2065]
+	ldr	r3, .L1386+40
+	ldrh	r2, [r4, r3]
+	sub	r3, r3, #106
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #108
+	ldrh	r2, [r4, r3]
+	ldrb	r3, [r4, #-1946]	@ zero_extendqisi2
+	orr	r2, r3, r2, asl #6
+	ldr	r3, .L1386+44
+	strh	r2, [r4, r3]	@ movhi
+	ldrb	r3, [r4, #-1944]	@ zero_extendqisi2
+	strb	r3, [r4, #-2064]
+	ldr	r3, .L1386+48
+	ldrh	r2, [r4, r3]
+	sub	r3, r3, #150
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #152
+	ldr	r0, [r4, #184]
+	ldrh	r2, [r4, r3]
+	ldrb	r3, [r4, #-1898]	@ zero_extendqisi2
+	orr	r2, r3, r2, asl #6
+	ldr	r3, .L1386+52
+	strh	r2, [r4, r3]	@ movhi
+	ldrb	r3, [r4, #-1896]	@ zero_extendqisi2
+	strb	r3, [r4, #-2063]
+	ldr	r3, [r4, #-1800]
+	str	r3, [r4, #-2044]
+	ldr	r3, [r4, #-1808]
+	str	r3, [r4, #-2036]
+	ldr	r3, [r4, #-1804]
+	str	r3, [r4, #-2040]
+	movw	r3, #3922
+	ldrh	r2, [r6, r3]
+	bl	ftl_memset
+	ldr	r1, .L1386+56
+	mov	r2, #48
+	ldr	r0, [r4, #184]
+	bl	memcpy
+	ldrh	r2, [r6, r7]
+	ldr	r0, [r4, #184]
+	ldr	r1, [r4, #-2020]
+	mov	r2, r2, asl #1
+	add	r0, r0, #48
+	bl	memcpy
+	ldrh	r2, [r6, r7]
+	ldr	r3, [r4, #184]
+	add	r0, r2, #24
+	ldr	r1, [r4, #-1844]
+	mov	r2, r2, lsr #3
+	mov	r0, r0, lsr #1
+	add	r2, r2, #4
+	add	r0, r3, r0, asl #2
+	bl	memcpy
+	movw	r3, #3956
+	ldrh	r3, [r6, r3]
+	cmp	r3, #0
+	beq	.L1375
+	ldrh	r3, [r6, r7]
+	ldr	r1, [r4, #184]
+	mov	r0, r3, lsr #3
+	add	r0, r0, r3, asl #1
+	movw	r3, #3948
+	add	r0, r0, #52
+	ldrh	r2, [r6, r3]
+	ubfx	r0, r0, #2, #14
+	mov	r2, r2, asl #2
+	add	r0, r1, r0, asl #2
+	ldr	r1, [r4, #-1036]
+	bl	memcpy
+.L1375:
+	mov	r0, #0
+	ldr	r4, .L1386
+	bl	FtlUpdateVaildLpn
+	ldr	r6, .L1386+60
+	mov	r7, #0
+	movw	sl, #65535
+.L1385:
+	ldr	r3, [r4, #-964]
+	mov	r1, #1
+	ldr	r8, .L1386+8
+	ldr	r0, .L1386+64
+	str	r3, [r4, #184]
+	ldr	r3, [r4, #-940]
+	ldrh	r2, [r4, r8]
+	str	r3, [r4, #188]
+	ldrh	r3, [r4, r6]
+	orr	r3, r3, r2, asl #10
+	mov	r2, r1
+	str	r3, [r4, #180]
+	mov	r3, r1
+	bl	FlashProgPages
+	ldr	r1, .L1386+4
+	movw	r3, #3914
+	ldrh	r2, [r4, r6]
+	ldrh	r3, [r1, r3]
+	sub	r3, r3, #1
+	cmp	r2, r3
+	blt	.L1377
+	ldr	r3, .L1386+68
+	ldrh	r2, [r4, r8]
+	ldrh	sl, [r4, r3]
+	strh	r2, [r4, r3]	@ movhi
+	mov	r3, #0
+	strh	r3, [r4, r6]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	ldr	r3, [r4, #-1808]
+	mov	r1, #1
+	add	r2, r3, #1
+	str	r2, [r4, #-1808]
+	str	r3, [r4, #-1768]
+	mov	r2, r0, asl #10
+	strh	r0, [r4, r8]	@ movhi
+	str	r2, [r4, #180]
+	mov	r2, r1
+	str	r3, [r5, #4]
+	mov	r3, r1
+	strh	r0, [r5, #2]	@ movhi
+	ldr	r0, .L1386+64
+	bl	FlashProgPages
+.L1377:
+	ldrh	r3, [r4, r6]
+	ldr	r2, [r4, #176]
+	add	r3, r3, #1
+	cmn	r2, #1
+	uxth	r3, r3
+	strh	r3, [r4, r6]	@ movhi
+	bne	.L1378
+	cmp	r3, #1
+	add	r7, r7, #1
+	ldreq	r2, .L1386+4
+	movweq	r3, #3914
+	uxth	r7, r7
+	ldreqh	r3, [r2, r3]
+	subeq	r3, r3, #1
+	streqh	r3, [r4, r6]	@ movhi
+	cmp	r7, #3
+	bls	.L1385
+	ldr	r4, .L1386
+	mov	r2, r7
+	ldr	r0, .L1386+72
+	ldr	r1, [r4, #180]
+	bl	printk
+	mov	r3, #1
+	str	r3, [r4, #-2092]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L1378:
+	cmp	r3, #1
+	beq	.L1385
+	cmp	r2, #256
+	beq	.L1385
+	movw	r3, #65535
+	cmp	sl, r3
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+	mov	r0, sl
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L1387:
+	.align	2
+.L1386:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	-1776
+	.word	-3932
+	.word	1179929683
+	.word	1342177352
+	.word	-1770
+	.word	-2068
+	.word	-2000
+	.word	-2060
+	.word	-1952
+	.word	-2056
+	.word	-1904
+	.word	-2052
+	.word	.LANCHOR2-2076
+	.word	-1774
+	.word	.LANCHOR2+176
+	.word	-1772
+	.word	.LC105
+	.fnend
+	.size	FtlVpcTblFlush.part.13, .-FtlVpcTblFlush.part.13
+	.align	2
+	.global	FtlVpcTblFlush
+	.type	FtlVpcTblFlush, %function
+FtlVpcTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L1390
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L1389
+	bl	FtlVpcTblFlush.part.13
+.L1389:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L1391:
+	.align	2
+.L1390:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
+	.section	.text.unlikely,"ax",%progbits
+	.align	2
+	.type	FtlBbmTblFlush.part.16, %function
+FtlBbmTblFlush.part.16:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r1, #0
+	ldr	r7, .L1405
+	mov	r6, #0
+	ldr	sl, .L1405+4
+	movw	r9, #3866
+	ldr	r3, [r7, #-940]
+	add	r8, sl, #4000
+	ldr	r0, [r7, #-964]
+	str	r3, [r7, #188]
+	movw	r3, #3922
+	str	r0, [r7, #184]
+	ldrh	r2, [sl, r3]
+	bl	ftl_memset
+	b	.L1393
+.L1394:
+	ldr	r3, .L1405+8
+	ldr	r1, [r8, #4]!
+	ldrh	r2, [r7, r3]
+	ldr	r3, [r7, #184]
+	mul	r0, r2, r6
+	mov	r2, r2, asl #2
+	add	r6, r6, #1
+	add	r0, r3, r0, asl #2
+	bl	memcpy
+.L1393:
+	ldrh	r3, [sl, r9]
+	ldr	r4, .L1405+4
+	cmp	r6, r3
+	ldr	r5, .L1405
+	blt	.L1394
+	ldr	r6, [r5, #188]
+	mov	r1, #255
+	mov	r2, #16
+	mov	r7, #0
+	mov	fp, r7
+	mov	r0, r6
+	bl	ftl_memset
+	ldr	r3, .L1405+12
+	strh	r3, [r6, #0]	@ movhi
+	ldr	r3, [r4, #3984]
+	str	r3, [r6, #4]
+	movw	r3, #3976
+	ldrh	r3, [r4, r3]
+	strh	r3, [r6, #2]	@ movhi
+	movw	r3, #3980
+	ldrh	r3, [r4, r3]
+	strh	r3, [r6, #8]	@ movhi
+	movw	r3, #3982
+	ldrh	r3, [r4, r3]
+	strh	r3, [r6, #10]	@ movhi
+	ldr	r3, [r4, #3840]
+	strh	r3, [r6, #12]	@ movhi
+	b	.L1403
+.L1400:
+	mov	fp, #1
+.L1403:
+	ldr	r3, [r5, #-964]
+	movw	r8, #3976
+	ldr	r4, .L1405+4
+	mov	r1, #0
+	movw	sl, #3978
+	str	r1, [r5, #176]
+	str	r3, [r5, #184]
+	movw	r9, #3980
+	ldr	r3, [r5, #-940]
+	ldrh	r1, [r4, r8]
+	ldrh	r2, [r4, sl]
+	str	r3, [r5, #188]
+	ldrh	r0, [r6, #10]
+	orr	r3, r2, r1, asl #10
+	str	r3, [r5, #180]
+	ldrh	r3, [r4, r9]
+	str	r0, [sp, #0]
+	ldr	r0, .L1405+16
+	bl	printk
+	mov	r1, #1
+	mov	r2, r1
+	mov	r3, r1
+	ldr	r0, .L1405+20
+	bl	FlashProgPages
+	movw	r3, #3914
+	ldrh	r3, [r4, r3]
+	ldrh	r2, [r4, sl]
+	sub	r3, r3, #1
+	cmp	r2, r3
+	blt	.L1396
+	ldr	r3, [r4, #3984]
+	mov	r1, #0	@ movhi
+	ldrh	r2, [r4, r8]
+	add	r3, r3, #1
+	ldr	r0, [r5, #-2088]
+	str	r3, [r4, #3984]
+	str	r3, [r6, #4]
+	ldrh	r3, [r4, r9]
+	strh	r1, [r4, sl]	@ movhi
+	mov	r1, #1
+	strh	r2, [r6, #8]	@ movhi
+	strh	r2, [r4, r9]	@ movhi
+	mov	r2, r1
+	strh	r3, [r4, r8]	@ movhi
+	mov	r3, r3, asl #10
+	str	r3, [r5, #180]
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	ldr	r0, .L1405+20
+	mov	r2, r1
+	mov	r3, r1
+	bl	FlashProgPages
+.L1396:
+	ldr	r2, .L1405+4
+	movw	r3, #3978
+	ldr	r4, .L1405
+	ldrh	r1, [r2, r3]
+	add	r1, r1, #1
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r3, [r5, #176]
+	cmn	r3, #1
+	bne	.L1397
+	add	r7, r7, #1
+	ldr	r0, .L1405+24
+	ldr	r1, [r5, #180]
+	uxth	r7, r7
+	bl	printk
+	cmp	r7, #3
+	bls	.L1403
+	ldr	r0, .L1405+28
+	mov	r2, r7
+	ldr	r1, [r4, #180]
+	bl	printk
+	mov	r3, #1
+	str	r3, [r4, #-2092]
+	b	.L1404
+.L1397:
+	cmp	fp, #0
+	beq	.L1400
+.L1404:
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1406:
+	.align	2
+.L1405:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	-1032
+	.word	-3887
+	.word	.LC106
+	.word	.LANCHOR2+176
+	.word	.LC107
+	.word	.LC108
+	.fnend
+	.size	FtlBbmTblFlush.part.16, .-FtlBbmTblFlush.part.16
+	.text
+	.align	2
+	.global	FtlBbmTblFlush
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L1409
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L1408
+	bl	FtlBbmTblFlush.part.16
+.L1408:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L1410:
+	.align	2
+.L1409:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.align	2
+	.global	FtlGcFreeBadSuperBlk
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r9, r0
+	ldr	r4, .L1421
+	ldr	r3, .L1421+4
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	movne	r6, #0
+	movne	sl, r4
+	bne	.L1412
+	b	.L1413
+.L1419:
+	add	r3, r3, r6
+	mov	r1, r9
+	mov	r5, #0
+	ldr	r7, .L1421+4
+	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	r8, r0
+	b	.L1414
+.L1418:
+	add	r3, r4, r5, asl #1
+	sub	r3, r3, #1136
+	sub	r3, r3, #4
+	ldrh	r3, [r3, #0]
+	cmp	r3, r8
+	bne	.L1415
+	mov	r1, r8
+	ldr	r0, .L1421+8
+	bl	printk
+	mov	r0, r8
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	r1, [r4, r7]
+	mov	r3, r5
+	b	.L1416
+.L1417:
+	add	r0, r3, #1
+	add	r3, r4, r3, asl #1
+	sub	r3, r3, #1136
+	add	r2, r4, r0, asl #1
+	sub	r2, r2, #1136
+	sub	r2, r2, #4
+	ldrh	r2, [r2, #0]
+	strh	r2, [r3, #-4]	@ movhi
+	uxth	r3, r0
+.L1416:
+	cmp	r3, r1
+	bcc	.L1417
+	sub	r1, r1, #1
+	strh	r1, [sl, r7]	@ movhi
+.L1415:
+	add	r5, r5, #1
+	uxth	r5, r5
+.L1414:
+	ldrh	r3, [r4, r7]
+	cmp	r3, r5
+	bhi	.L1418
+	add	r6, r6, #1
+	uxth	r6, r6
+.L1412:
+	ldr	r3, .L1421+12
+	movw	r2, #3844
+	ldrh	r2, [r3, r2]
+	cmp	r2, r6
+	bhi	.L1419
+	bl	FtlGcReFreshBadBlk
+.L1413:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L1422:
+	.align	2
+.L1421:
+	.word	.LANCHOR2
+	.word	-1142
+	.word	.LC109
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.align	2
+	.global	update_vpc_list
+	.type	update_vpc_list, %function
+update_vpc_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, r0, asl #1
+	ldr	r3, .L1431
+	mov	r4, r0
+	ldr	r1, [r3, #-2020]
+	ldrh	r2, [r1, r2]
+	cmp	r2, #0
+	bne	.L1424
+	ldr	r1, .L1431+4
+	ldrh	r0, [r3, r1]
+	cmp	r0, r4
+	mvneq	r2, #0
+	streqh	r2, [r3, r1]	@ movhi
+	beq	.L1426
+	ldr	r1, .L1431+8
+	ldrh	r1, [r3, r1]
+	cmp	r1, r4
+	beq	.L1427
+	ldr	r1, .L1431+12
+	ldrh	r1, [r3, r1]
+	cmp	r1, r4
+	beq	.L1427
+	ldr	r1, .L1431+16
+	ldrh	r3, [r3, r1]
+	cmp	r3, r4
+	beq	.L1427
+.L1426:
+	mov	r1, r4
+	ldr	r0, .L1431+20
+	bl	List_remove_node
+	ldr	r5, .L1431
+	ldr	r3, .L1431+24
+	mov	r0, r4
+	ldrh	r2, [r5, r3]
+	sub	r2, r2, #1
+	strh	r2, [r5, r3]	@ movhi
+	bl	free_data_superblock
+	mov	r0, r4
+	bl	FtlGcFreeBadSuperBlk
+	mov	r2, #1
+	b	.L1427
+.L1424:
+	bl	List_update_data_list
+	mov	r2, #0
+.L1427:
+	mov	r0, r2
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1432:
+	.align	2
+.L1431:
+	.word	.LANCHOR2
+	.word	-1764
+	.word	-2000
+	.word	-1952
+	.word	-1904
+	.word	.LANCHOR2-2024
+	.word	-2012
+	.fnend
+	.size	update_vpc_list, .-update_vpc_list
+	.align	2
+	.global	decrement_vpc_count
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r5, r0
+	beq	.L1434
+	ldr	r2, .L1439
+	mov	r3, r0, asl #1
+	ldr	r2, [r2, #-2020]
+	ldrh	r4, [r2, r3]
+	cmp	r4, #0
+	subne	r4, r4, #1
+	strneh	r4, [r2, r3]	@ movhi
+	bne	.L1434
+	ldr	r0, .L1439+4
+	mov	r1, r5
+	mov	r2, r4
+	bl	printk
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1434:
+	ldr	r7, .L1439
+	movw	r3, #65535
+	ldr	r6, .L1439+8
+	ldrh	r0, [r7, r6]
+	cmp	r0, r3
+	streqh	r5, [r7, r6]	@ movhi
+	moveq	r0, #0
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
+	cmp	r0, r5
+	beq	.L1438
+	bl	update_vpc_list
+	strh	r5, [r7, r6]	@ movhi
+	adds	r0, r0, #0
+	movne	r0, #1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1438:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1440:
+	.align	2
+.L1439:
+	.word	.LANCHOR2
+	.word	.LC110
+	.word	-1024
+	.fnend
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	2
+	.global	get_new_active_ppa
+	.type	get_new_active_ppa, %function
+get_new_active_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r3, #0
+	strb	r3, [r0, #10]
+	mov	r4, r0
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	movw	r6, #65535
+	ldr	r5, .L1453
+	ldr	r7, .L1453+4
+	add	r3, r0, r3, asl #1
+	ldrh	r3, [r3, #16]
+	b	.L1442
+.L1443:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	movw	r2, #3844
+	ldrh	r2, [r5, r2]
+	add	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r4, #6]
+	cmp	r2, r3
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	streqb	r3, [r4, #6]
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	add	r3, r4, r3, asl #1
+	ldrh	r3, [r3, #16]
+.L1442:
+	cmp	r3, r6
+	beq	.L1443
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	cmp	r2, #1
+	bne	.L1445
+	ldrb	r2, [r5, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1445
+	ldrh	r2, [r4, #2]
+	add	r2, r7, r2, asl #1
+	sub	r2, r2, #896
+	ldrh	r2, [r2, #0]
+	cmp	r2, r6
+	bne	.L1445
+	ldrh	r3, [r4, #4]
+	ldrh	r0, [r4, #0]
+	sub	r3, r3, #1
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	b	.L1443
+.L1445:
+	ldrh	r6, [r4, #2]
+	movw	r5, #65535
+	mov	r7, r5
+	orr	r6, r6, r3, asl #10
+	ldrh	r3, [r4, #4]
+	sub	r3, r3, #1
+	strh	r3, [r4, #4]	@ movhi
+.L1450:
+	ldr	r2, .L1453
+	movw	r3, #3844
+	ldrh	r2, [r2, r3]
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+.L1447:
+	add	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, r2
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	add	r1, r4, r3, asl #1
+	ldrh	r1, [r1, #16]
+	cmp	r1, r5
+	beq	.L1447
+	strb	r3, [r4, #6]
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	bne	.L1448
+	ldr	r3, .L1453
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldrh	r2, [r4, #2]
+	bne	.L1451
+	ldr	r3, .L1453+4
+	add	r2, r3, r2, asl #1
+	sub	r2, r2, #896
+	ldrh	r3, [r2, #0]
+	cmp	r3, r7
+	bne	.L1448
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	beq	.L1448
+	sub	r3, r3, #1
+	ldrh	r0, [r4, #0]
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	b	.L1450
+.L1451:
+	movw	r1, #3914
+	ldrh	r1, [r3, r1]
+	cmp	r2, r1
+	bcc	.L1448
+	ldr	r1, .L1453+4
+	ldrh	r2, [r4, #0]
+	ldrh	r0, [r4, #4]
+	ldr	r1, [r1, #-2020]
+	mov	r2, r2, asl #1
+	ldrh	ip, [r1, r2]
+	rsb	r0, r0, ip
+	strh	r0, [r1, r2]	@ movhi
+	mov	r2, #0
+	strh	r2, [r4, #4]	@ movhi
+	mov	r1, r2	@ movhi
+	movw	r2, #3912
+	ldrh	r3, [r3, r2]
+	strb	r1, [r4, #6]
+	strh	r3, [r4, #2]	@ movhi
+.L1448:
+	mov	r0, r6
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1454:
+	.align	2
+.L1453:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	get_new_active_ppa, .-get_new_active_ppa
+	.align	2
+	.type	FtlSlcSuperblockCheck.part.19, %function
+FtlSlcSuperblockCheck.part.19:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r4, r0
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	movw	r6, #65535
+	ldr	r5, .L1461
+	ldr	r7, .L1461+4
+	add	r3, r0, r3, asl #1
+	ldrh	r3, [r3, #16]
+	b	.L1456
+.L1457:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	movw	r2, #3844
+	ldrh	r2, [r5, r2]
+	add	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r4, #6]
+	cmp	r2, r3
+	ldreqh	r3, [r4, #2]
+	addeq	r3, r3, #1
+	streqh	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	streqb	r3, [r4, #6]
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	add	r3, r4, r3, asl #1
+	ldrh	r3, [r3, #16]
+.L1456:
+	cmp	r3, r6
+	beq	.L1457
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	cmp	r2, #1
+	bne	.L1459
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1459
+	ldrh	r3, [r4, #2]
+	add	r3, r7, r3, asl #1
+	sub	r3, r3, #896
+	ldrh	r3, [r3, #0]
+	cmp	r3, r6
+	bne	.L1459
+	ldrh	r3, [r4, #4]
+	ldrh	r0, [r4, #0]
+	sub	r3, r3, #1
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L1457
+	ldrh	r2, [r4, #2]
+	strb	r3, [r4, #6]
+	add	r2, r2, #1
+	strh	r2, [r4, #2]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1459:
+	ldr	r3, .L1461
+	ldrb	r1, [r3, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, pc}
+	cmp	r2, #1
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
+	movw	r2, #3914
+	ldrh	r1, [r4, #2]
+	ldrh	r2, [r3, r2]
+	cmp	r1, r2
+	ldmccfd	sp!, {r3, r4, r5, r6, r7, pc}
+	ldr	r1, .L1461+4
+	ldrh	r2, [r4, #0]
+	ldrh	r0, [r4, #4]
+	ldr	r1, [r1, #-2020]
+	mov	r2, r2, asl #1
+	ldrh	ip, [r1, r2]
+	rsb	r0, r0, ip
+	strh	r0, [r1, r2]	@ movhi
+	mov	r2, #0
+	strh	r2, [r4, #4]	@ movhi
+	mov	r1, r2	@ movhi
+	movw	r2, #3912
+	ldrh	r3, [r3, r2]
+	strb	r1, [r4, #6]
+	strh	r3, [r4, #2]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1462:
+	.align	2
+.L1461:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSlcSuperblockCheck.part.19, .-FtlSlcSuperblockCheck.part.19
+	.align	2
+	.global	FtlSlcSuperblockCheck
+	.type	FtlSlcSuperblockCheck, %function
+FtlSlcSuperblockCheck:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldrh	r2, [r0, #4]
+	cmp	r2, #0
+	bxeq	lr
+	ldrh	r2, [r0, #0]
+	movw	r3, #65535
+	cmp	r2, r3
+	bxeq	lr
+	b	FtlSlcSuperblockCheck.part.19
+	.fnend
+	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
+	.align	2
+	.type	allocate_data_superblock.part.20, %function
+allocate_data_superblock.part.20:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L1501
+	mov	r5, r0
+	ldr	r8, .L1501+4
+.L1497:
+	ldr	r3, .L1501+8
+	cmp	r5, r3
+	bne	.L1467
+	ldrh	r2, [r4, r8]
+	ldr	r3, [r4, #-1188]
+	mov	r1, r2, lsr #1
+	mul	ip, r3, r2
+	add	r0, r1, #1
+	add	r0, r0, ip, lsr #2
+	ldr	ip, .L1501+12
+	uxth	r0, r0
+	ldr	ip, [ip, #3836]
+	cmp	ip, #0
+	beq	.L1491
+	ldr	ip, [r4, #-1784]
+	cmp	ip, #29
+	bhi	.L1491
+	cmp	ip, #2
+	bls	.L1496
+	tst	r2, #1
+	beq	.L1468
+	cmp	r3, #0
+	moveq	r1, r3
+	beq	.L1469
+	b	.L1468
+.L1467:
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	bne	.L1496
+	ldr	r3, .L1501+12
+	movw	r2, #3864
+	ldrh	r2, [r3, r2]
+	cmp	r2, #1
+	beq	.L1496
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1496
+	ldr	r3, [r3, #3836]
+	ldrh	r2, [r4, r8]
+	cmp	r3, #0
+	mov	r1, r2, lsr #3
+	beq	.L1468
+	ldr	r3, [r4, #-1784]
+	cmp	r3, #1
+	movls	r1, #7
+	mulls	r1, r1, r2
+	movls	r1, r1, lsr #3
+	b	.L1468
+.L1491:
+	mov	r1, r0
+.L1468:
+	cmp	r1, #0
+	subne	r1, r1, #1
+	uxthne	r1, r1
+	b	.L1469
+.L1496:
+	mov	r1, #0
+.L1469:
+	ldrb	r2, [r5, #8]	@ zero_extendqisi2
+	ldr	r0, .L1501+16
+	bl	List_pop_index_node
+	ldrh	r3, [r4, r8]
+	sub	r3, r3, #1
+	strh	r3, [r4, r8]	@ movhi
+	uxth	r7, r0
+	mov	r0, r5
+	strh	r7, [r5, #0]	@ movhi
+	bl	make_superblock
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1470
+	ldr	r2, .L1501+12
+	movw	r3, #3844
+	ldr	ip, [r4, #-2088]
+	mov	r6, #0
+	mov	sl, r5
+	mov	r1, r5
+	ldrh	r9, [r2, r3]
+	mov	r0, r6
+	mov	r3, ip
+	mov	r2, r6
+	stmia	sp, {r5, ip}
+	b	.L1471
+.L1470:
+	ldr	r3, [r4, #-2020]
+	mov	r7, r7, asl #1
+	mvn	r2, #0
+	strh	r2, [r3, r7]	@ movhi
+	b	.L1497
+.L1474:
+	str	r0, [r3, #8]
+	movw	r5, #65535
+	str	r0, [r3, #12]
+	ldrh	lr, [r1, #16]
+	cmp	lr, r5
+	beq	.L1473
+	ldr	r5, [sp, #4]
+	mov	ip, #36
+	mov	lr, lr, asl #10
+	mla	fp, ip, r6, r5
+	add	r6, r6, #1
+	uxth	r6, r6
+	str	lr, [fp, #4]
+.L1473:
+	add	r2, r2, #1
+	add	r3, r3, #36
+	add	r1, r1, #2
+	uxth	r2, r2
+.L1471:
+	cmp	r2, r9
+	bne	.L1474
+	ldr	r3, .L1501+12
+	ldr	r5, [sp, #0]
+	ldr	r3, [r3, #3836]
+	cmp	r3, #0
+	beq	.L1475
+	ldr	r3, .L1501+20
+	cmp	r5, r3
+	bne	.L1475
+	ldr	r2, [r4, #-2084]
+	mov	r3, r7, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #30
+	movhi	r3, #0
+	strhib	r3, [r4, #-1992]
+.L1475:
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	ldr	r2, [r4, #-2084]
+	cmp	r3, #0
+	mov	r3, r7, asl #1
+	ldrh	r1, [r2, r3]
+	bne	.L1476
+	cmp	r1, #0
+	ldrne	ip, .L1501+12
+	movwne	r0, #3902
+	moveq	r1, #2
+	ldrneh	r0, [ip, r0]
+	addne	r1, r1, r0
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r3, [r4, #-1800]
+	mov	r0, r7
+	mov	r1, #0
+	add	r3, r3, #1
+	str	r3, [r4, #-1800]
+	b	.L1499
+.L1476:
+	add	r1, r1, #1
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r3, [r4, #-1796]
+	mov	r0, r7
+	mov	r1, #1
+	add	r3, r3, #1
+	str	r3, [r4, #-1796]
+.L1499:
+	bl	ftl_set_blk_mode
+	ldr	r3, [r4, #-2084]
+	mov	r9, r7, asl #1
+	ldr	r2, [r4, #-1788]
+	ldr	fp, .L1501
+	ldrh	r3, [r3, r9]
+	cmp	r3, r2
+	movw	r2, #3902
+	strhi	r3, [r4, #-1788]
+	ldr	r3, .L1501+12
+	ldr	r0, [fp, #-1800]
+	ldrh	r1, [r3, r2]
+	ldr	r2, [fp, #-1796]
+	mla	r0, r0, r1, r2
+	movw	r2, #3852
+	ldrh	r1, [r3, r2]
+	bl	__aeabi_uidiv
+	ldr	r3, [fp, #-924]
+	ldr	r2, [r3, #16]
+	add	r2, r2, #1
+	str	r2, [r3, #16]
+	ldr	r3, [fp, #-2088]
+	mov	r2, #0
+	str	r0, [fp, #-1792]
+	b	.L1481
+.L1482:
+	add	r2, r2, #1
+	ldr	r1, [r3, #-32]
+	uxth	r2, r2
+	bic	r1, r1, #1020
+	bic	r1, r1, #3
+	str	r1, [r3, #-32]
+.L1481:
+	cmp	r2, r6
+	add	r3, r3, #36
+	bne	.L1482
+	ldr	r3, .L1501+12
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1483
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	mov	r2, r6
+	ldr	r0, [r4, #-2088]
+	cmp	r3, #1
+	moveq	r1, #0
+	movne	r1, #1
+	bl	FlashEraseBlocks
+.L1483:
+	mov	r2, r6
+	ldr	r0, [r4, #-2088]
+	ldrb	r1, [r5, #8]	@ zero_extendqisi2
+	mov	fp, #0
+	bl	FlashEraseBlocks
+	mov	r2, #36
+	mul	r2, r2, r6
+	mov	r3, r7
+	mov	ip, r9
+	mov	r6, fp
+	mov	r7, r5
+	mov	r9, r2
+	b	.L1485
+.L1487:
+	ldr	r1, [r4, #-2088]
+	add	r0, r1, fp
+	ldr	r5, [r1, fp]
+	cmn	r5, #1
+	bne	.L1486
+	ldr	r0, [r0, #4]
+	add	r6, r6, #1
+	str	r3, [sp, #12]
+	ubfx	r0, r0, #10, #16
+	str	ip, [sp, #8]
+	bl	FtlBbmMapBadBlock
+	strh	r5, [sl, #16]	@ movhi
+	ldrb	r1, [r7, #7]	@ zero_extendqisi2
+	sub	r1, r1, #1
+	strb	r1, [r7, #7]
+	ldr	ip, [sp, #8]
+	ldr	r3, [sp, #12]
+.L1486:
+	add	fp, fp, #36
+	add	sl, sl, #2
+.L1485:
+	cmp	fp, r9
+	bne	.L1487
+	cmp	r6, #0
+	mov	r5, r7
+	mov	r9, ip
+	mov	r7, r3
+	beq	.L1488
+	mov	r0, r3
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L1488:
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldreq	r3, .L1501
+	mvneq	r2, #0
+	ldreq	r3, [r3, #-2020]
+	streqh	r2, [r3, r9]	@ movhi
+	beq	.L1497
+.L1489:
+	ldr	r1, .L1501+12
+	movw	r2, #3912
+	ldrh	r2, [r1, r2]
+	strh	r7, [r5, #0]	@ movhi
+	mul	r2, r2, r3
+	mov	r3, #0
+	strh	r3, [r5, #2]	@ movhi
+	strb	r3, [r5, #6]
+	ldr	r3, .L1501
+	uxth	r2, r2
+	strh	r2, [r5, #4]	@ movhi
+	ldr	r1, [r3, #-1808]
+	str	r1, [r5, #12]
+	add	r1, r1, #1
+	str	r1, [r3, #-1808]
+	ldrh	r0, [r5, #0]
+	ldr	r1, [r3, #-2020]
+	mov	r3, r0, asl #1
+	strh	r2, [r1, r3]	@ movhi
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1502:
+	.align	2
+.L1501:
+	.word	.LANCHOR2
+	.word	-2004
+	.word	.LANCHOR2-1904
+	.word	.LANCHOR0
+	.word	.LANCHOR2-2008
+	.word	.LANCHOR2-2000
+	.fnend
+	.size	allocate_data_superblock.part.20, .-allocate_data_superblock.part.20
+	.align	2
+	.global	allocate_data_superblock
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L1505
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L1504
+	bl	allocate_data_superblock.part.20
+.L1504:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L1506:
+	.align	2
+.L1505:
+	.word	.LANCHOR2
+	.fnend
+	.size	allocate_data_superblock, .-allocate_data_superblock
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1516
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r0
+	ldrb	r7, [r3, #928]	@ zero_extendqisi2
+	.pad #40
+	sub	sp, sp, #40
+	cmp	r7, #0
+	beq	.L1515
+	ldrb	r7, [r0, #8]	@ zero_extendqisi2
+	cmp	r7, #1
+	ldreqh	r6, [r0, #4]
+	beq	.L1508
+	mov	r7, #0
+.L1515:
+	mov	r6, #12
+.L1508:
+	mvn	r8, #0
+	ldr	r5, .L1516+4
+	b	.L1509
+.L1512:
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	beq	.L1510
+	mov	r0, r4
+	bl	get_new_active_ppa
+	cmn	r0, #1
+	str	r0, [sp, #8]
+	beq	.L1510
+	ldr	r2, [r5, #-940]
+	add	r0, sp, #4
+	ldr	r3, [r5, #-964]
+	sub	r6, r6, #1
+	str	r8, [sp, #20]
+	str	r2, [sp, #16]
+	str	r3, [sp, #12]
+	str	r8, [r2, #12]
+	str	r8, [r2, #8]
+	ldrh	r3, [r4, #0]
+	strh	r3, [r2, #2]	@ movhi
+	mov	r3, #0
+	strh	r3, [r2, #0]	@ movhi
+	ldr	r1, [r5, #-1804]
+	cmn	r1, #2
+	str	r1, [r2, #4]
+	addne	r1, r1, #1
+	moveq	r1, #0
+	mov	r2, r7
+	str	r1, [r5, #-1804]
+	mov	r1, #1
+	bl	FlashProgPages
+	ldrh	r0, [r4, #0]
+	bl	decrement_vpc_count
+.L1509:
+	cmp	r6, #0
+	bne	.L1512
+.L1510:
+	ldr	r2, .L1516+4
+	ldrh	r3, [r4, #0]
+	ldrh	r1, [r4, #4]
+	ldr	r2, [r2, #-2020]
+	mov	r3, r3, asl #1
+	ldrh	r0, [r2, r3]
+	rsb	r1, r1, r0
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r2, .L1516
+	movw	r3, #3912
+	ldrh	r3, [r2, r3]
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	add	sp, sp, #40
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1517:
+	.align	2
+.L1516:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.align	2
+	.global	FtlLowFormatEraseBlock
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r7, .L1547
+	mov	r8, r1
+	ldr	r9, .L1547+4
+	str	r0, [sp, #12]
+	ldr	r6, [r7, #-2092]
+	ldrb	r0, [r9, #3833]	@ zero_extendqisi2
+	cmp	r6, #0
+	str	r0, [sp, #16]
+	movne	r4, #0
+	bne	.L1519
+	ldrb	r2, [r9, #928]	@ zero_extendqisi2
+	mov	r5, r6
+	ldr	r3, [sp, #12]
+	mov	r4, r6
+	mov	fp, #36
+	str	r2, [sp, #8]
+	str	r3, [r7, #-988]
+	b	.L1520
+.L1524:
+	mul	r3, fp, r6
+	ldr	r2, [r7, #-2088]
+	mov	r0, #0
+	ldr	r1, [sp, #12]
+	str	r0, [r2, r3]
+	add	r3, r9, r6
+	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	r8, #0
+	mov	sl, r0
+	beq	.L1521
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L1522
+.L1521:
+	mov	r0, sl
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	addne	r4, r4, #1
+	uxthne	r4, r4
+	bne	.L1522
+	movw	r1, #3924
+	ldr	r3, [r7, #-2088]
+	ldrh	r2, [r9, r1]
+	mov	sl, sl, asl #10
+	mla	r3, fp, r5, r3
+	mul	r2, r2, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r1, r2, #3
+	cmp	r2, #0
+	str	sl, [r3, #4]
+	movlt	r2, r1
+	ldr	r1, [r7, #-936]
+	bic	r2, r2, #3
+	str	r0, [r3, #8]
+	add	r2, r1, r2
+	str	r2, [r3, #12]
+.L1522:
+	add	r6, r6, #1
+	uxth	r6, r6
+.L1520:
+	movw	r2, #3844
+	ldr	sl, .L1547+4
+	ldrh	r3, [r9, r2]
+	cmp	r3, r6
+	bhi	.L1524
+	cmp	r5, #0
+	beq	.L1519
+	ldr	r3, [sp, #8]
+	mov	r7, #0
+	ldr	r9, .L1547
+	mov	r2, r5
+	adds	r6, r3, #0
+	strb	r7, [sl, #3833]
+	movne	r6, #1
+	ldr	r0, [r9, #-2088]
+	mov	r1, r6
+	bl	FlashEraseBlocks
+	ldr	r0, [sp, #16]
+	strb	r0, [sl, #3833]
+	mov	sl, r7
+.L1527:
+	ldr	r3, [r9, #-2088]
+	add	r2, r3, r7
+	ldr	r3, [r3, r7]
+	cmn	r3, #1
+	bne	.L1526
+	ldr	r0, [r2, #4]
+	add	r4, r4, #1
+	ubfx	r0, r0, #10, #16
+	uxth	r4, r4
+	bl	FtlBbmMapBadBlock
+.L1526:
+	add	sl, sl, #1
+	add	r7, r7, #36
+	uxth	sl, sl
+	cmp	sl, r5
+	bne	.L1527
+	cmp	r8, #0
+	moveq	r2, #6
+	moveq	sl, #1
+	streq	r2, [sp, #8]
+	beq	.L1528
+	ldr	r3, .L1547+4
+	movw	r2, #3914
+	ldrh	sl, [r3, r2]
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	moveq	r1, sl, lsr #2
+	streq	r1, [sp, #8]
+	moveq	r6, #1
+	movne	r6, #1
+	strne	r6, [sp, #8]
+.L1528:
+	mov	r7, #0
+.L1536:
+	mov	r9, #0
+	ldr	fp, .L1547
+	mov	r5, r9
+	b	.L1529
+.L1532:
+	mov	r0, #36
+	ldr	r2, [fp, #-2088]
+	mul	r3, r0, r9
+	mov	r1, #0
+	str	r1, [r2, r3]
+	ldr	r2, .L1547+4
+	ldr	r1, [sp, #12]
+	add	r3, r2, r9
+	ldrb	r0, [r3, #3870]	@ zero_extendqisi2
+	bl	V2P_block
+	cmp	r8, #0
+	str	r0, [sp, #20]
+	beq	.L1530
+	bl	IsBlkInVendorPart
+	cmp	r0, #0
+	bne	.L1531
+.L1530:
+	ldr	r0, [sp, #20]
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #0
+	bne	.L1531
+	ldr	r3, [fp, #-2088]
+	mov	r0, #36
+	ldr	r1, [sp, #20]
+	mla	r3, r0, r5, r3
+	add	r2, r7, r1, asl #10
+	ldr	r1, .L1547+4
+	add	r0, r0, #3888
+	str	r2, [r3, #4]
+	ldr	r2, [fp, #-948]
+	str	r2, [r3, #8]
+	ldrh	r2, [r1, r0]
+	mul	r2, r2, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	r1, r2, #3
+	cmp	r2, #0
+	movlt	r2, r1
+	ldr	r1, [fp, #-944]
+	bic	r2, r2, #3
+	add	r2, r1, r2
+	str	r2, [r3, #12]
+.L1531:
+	add	r9, r9, #1
+	uxth	r9, r9
+.L1529:
+	ldr	ip, .L1547+4
+	movw	r2, #3844
+	ldrh	r3, [ip, r2]
+	cmp	r3, r9
+	bhi	.L1532
+	cmp	r5, #0
+	beq	.L1519
+	ldr	r9, .L1547
+	mov	r3, #0
+	mov	r1, r5
+	strb	r3, [ip, #3833]
+	mov	r2, r6
+	mov	r3, #1
+	ldr	r0, [r9, #-2088]
+	mov	fp, #0
+	str	ip, [sp, #4]
+	bl	FlashProgPages
+	ldr	ip, [sp, #4]
+	mov	r3, fp
+	ldr	r0, [sp, #16]
+	strb	r0, [ip, #3833]
+	mov	ip, r8
+	mov	r8, r6
+	mov	r6, r5
+	mov	r5, fp
+.L1535:
+	ldr	r2, [r9, #-2088]
+	add	r1, r2, fp
+	ldr	r2, [r2, fp]
+	cmp	r2, #0
+	beq	.L1534
+	ldr	r0, [r1, #4]
+	add	r4, r4, #1
+	str	ip, [sp, #4]
+	ubfx	r0, r0, #10, #16
+	uxth	r4, r4
+	bl	FtlBbmMapBadBlock
+	ldr	ip, [sp, #4]
+.L1534:
+	add	r5, r5, #1
+	add	fp, fp, #36
+	uxth	r5, r5
+	cmp	r5, r6
+	bne	.L1535
+	ldr	r1, [sp, #8]
+	mov	r5, r6
+	mov	r6, r8
+	mov	r8, ip
+	add	r7, r7, r1
+	uxth	r7, r7
+	cmp	r7, sl
+	bcc	.L1536
+	ldr	r9, .L1547
+	mov	r7, #0
+	mov	sl, r7
+.L1538:
+	cmp	r8, #0
+	beq	.L1537
+	ldr	r3, [r9, #-2088]
+	add	r2, r3, r7
+	ldr	r3, [r3, r7]
+	cmp	r3, #0
+	bne	.L1537
+	ldr	r0, [r2, #4]
+	mov	r1, #1
+	ubfx	r0, r0, #10, #16
+	bl	FtlFreeSysBlkQueueIn
+.L1537:
+	add	sl, sl, #1
+	add	r7, r7, #36
+	uxth	sl, sl
+	cmp	sl, r5
+	bne	.L1538
+	ldr	r2, [sp, #12]
+	cmp	r2, #63
+	movhi	r3, #0
+	movls	r3, #1
+	cmp	r8, #0
+	moveq	r8, r3
+	orrne	r8, r3, #1
+	cmp	r8, #0
+	beq	.L1519
+	ldr	r3, .L1547
+	mov	r1, r6
+	mov	r2, sl
+	ldr	r0, [r3, #-2088]
+	bl	FlashEraseBlocks
+.L1519:
+	mov	r0, r4
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1548:
+	.align	2
+.L1547:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	.align	2
+	.type	FlashTestBlk.part.23, %function
+FlashTestBlk.part.23:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+.L1550:
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #108
+	sub	sp, sp, #108
+	ldr	r4, .L1552
+	mov	r5, r0
+	mov	r1, #165
+	add	r0, sp, #40
+	mov	r2, #32
+	str	r0, [sp, #16]
+	ldr	r3, [r4, #132]
+	mov	r5, r5, asl #10
+	str	r3, [sp, #12]
+	bl	ftl_memset
+	ldr	r0, [r4, #132]
+	mov	r1, #90
+	mov	r2, #8
+	bl	ftl_memset
+	mov	r1, #1
+	mov	r2, r1
+	add	r0, sp, #4
+	str	r5, [sp, #8]
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	add	r0, sp, #4
+	mov	r3, r1
+	mov	r2, r1
+	bl	FlashProgPages
+	ldr	r4, [sp, #4]
+	add	r0, sp, #4
+	mov	r1, #0
+	cmp	r4, #0
+	mov	r2, #1
+	mvnne	r4, #0
+	bl	FlashEraseBlocks
+	mov	r0, r4
+	add	sp, sp, #108
+	ldmfd	sp!, {r4, r5, pc}
+.L1553:
+	.align	2
+.L1552:
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashTestBlk.part.23, .-FlashTestBlk.part.23
+	.align	2
+	.global	FlashTestBlk
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1556
+	ldr	r3, [r3, #152]
+	cmp	r0, r3
+	bcc	.L1555
+	b	FlashTestBlk.part.23
+.L1555:
+	mov	r0, #0
+	bx	lr
+.L1557:
+	.align	2
+.L1556:
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashTestBlk, .-FlashTestBlk
+	.align	2
+	.global	FlashMakeFactorBbt
+	.type	FlashMakeFactorBbt, %function
+FlashMakeFactorBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 72
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1586
+	movw	r1, #3062
+	movw	r2, #3060
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #76
+	sub	sp, sp, #76
+	ldrh	r2, [r3, r2]
+	mov	r5, #0
+	ldrh	fp, [r3, r1]
+	mov	r1, #1
+	ldr	r4, .L1586+4
+	mul	fp, fp, r2
+	ldr	r2, [r3, #3624]
+	ldr	r0, [r4, #224]
+	ldrb	r2, [r2, #24]	@ zero_extendqisi2
+	str	r0, [sp, #28]
+	ldr	r0, .L1586+8
+	uxth	fp, fp
+	str	r2, [sp, #12]
+	ldr	r2, [r3, #856]
+	ldrb	r3, [r3, #852]	@ zero_extendqisi2
+	uxth	r2, r2
+	cmp	r3, #1
+	str	r2, [sp, #8]
+	moveq	r3, r2, asl #1
+	uxtheq	r3, r3
+	streq	r3, [sp, #8]
+	bl	printk
+	ldr	r0, [r4, #224]
+	mov	r2, #4096
+	mov	r1, #0
+	bl	ftl_memset
+	sub	r3, fp, #1
+	mov	r2, fp, lsr #4
+	ldr	r4, .L1586
+	uxth	r3, r3
+	str	r2, [sp, #20]
+	str	r3, [sp, #24]
+	b	.L1560
+.L1582:
+	ldr	r3, .L1586+4
+	add	r2, r3, r5, asl #1
+	ldrh	r6, [r2, #228]
+	cmp	r6, #0
+	bne	.L1561
+	movw	r2, #3068
+	ldr	r0, [r3, #144]
+	ldrh	r2, [r4, r2]
+	mov	r1, r6
+	mov	r8, r6
+	mov	r7, r6
+	add	sl, r4, r5, asl #2
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+	add	r3, r4, r5
+	ldrb	r9, [r3, #3764]	@ zero_extendqisi2
+	b	.L1562
+.L1570:
+	mvn	r3, #0
+	strb	r3, [sp, #34]
+	strb	r3, [sp, #35]
+	ldr	r3, [sp, #12]
+	tst	r3, #1
+	beq	.L1563
+	ldr	r3, [sl, #3588]
+	add	r2, sp, #34
+	mov	r0, r9
+	add	r3, r6, r3
+	str	r3, [sp, #4]
+	mov	r1, r3
+	bl	FlashReadSpare
+	ldrb	r2, [r4, #852]	@ zero_extendqisi2
+	ldr	r3, [sp, #4]
+	cmp	r2, #1
+	bne	.L1563
+	ldr	r1, [r4, #856]
+	add	r2, sp, #35
+	mov	r0, r9
+	add	r1, r3, r1
+	bl	FlashReadSpare
+	ldrb	r3, [sp, #34]	@ zero_extendqisi2
+	ldrb	r2, [sp, #35]	@ zero_extendqisi2
+	and	r3, r2, r3
+	strb	r3, [sp, #34]
+.L1563:
+	ldr	r0, [sp, #12]
+	tst	r0, #2
+	beq	.L1564
+	ldr	r3, [r4, #3624]
+	mov	r0, r9
+	add	r2, sp, #35
+	ldrh	r1, [r3, #10]
+	ldr	r3, [sl, #3588]
+	sub	r1, r1, #1
+	add	r1, r1, r3
+	add	r1, r1, r6
+	bl	FlashReadSpare
+.L1564:
+	ldr	r3, [r4, #3624]
+	ldrb	r3, [r3, #7]	@ zero_extendqisi2
+	cmp	r3, #1
+	cmpne	r3, #8
+	ldrb	r3, [sp, #34]	@ zero_extendqisi2
+	bne	.L1565
+	cmp	r3, #0
+	beq	.L1584
+	ldrb	r0, [sp, #35]	@ zero_extendqisi2
+	rsbs	r0, r0, #1
+	movcc	r0, #0
+	b	.L1566
+.L1565:
+	cmp	r3, #255
+	bne	.L1584
+	ldrb	r0, [sp, #35]	@ zero_extendqisi2
+	subs	r0, r0, #255
+	movne	r0, #1
+	b	.L1566
+.L1584:
+	mov	r0, #1
+.L1566:
+	ldr	r2, [sp, #12]
+	tst	r2, #4
+	beq	.L1567
+	ldr	r1, [sl, #3588]
+	mov	r0, r9
+	add	r1, r6, r1
+	bl	SandiskProgTestBadBlock
+.L1567:
+	cmp	r0, #0
+	beq	.L1568
+	mov	r1, r5
+	mov	r2, r8
+	ldr	r0, .L1586+12
+	add	r7, r7, #1
+	bl	printk
+	ldr	r3, [sp, #16]
+	and	r0, r8, #31
+	mov	ip, #1
+	uxth	r7, r7
+	mov	r2, r3, lsr #5
+	ldr	r3, .L1586+4
+	ldr	r3, [r3, #144]
+	ldr	r1, [r3, r2, asl #2]
+	orr	r1, r1, ip, asl r0
+	ldr	r0, [sp, #20]
+	str	r1, [r3, r2, asl #2]
+	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
+	mul	r3, r3, r0
+	cmp	r7, r3
+	bgt	.L1569
+.L1568:
+	ldr	r2, [sp, #8]
+	add	r8, r8, #1
+	add	r6, r6, r2
+.L1562:
+	uxth	r3, r8
+	str	r3, [sp, #16]
+	cmp	r3, fp
+	bcc	.L1570
+.L1569:
+	ldr	r0, .L1586+16
+	mov	r1, r5
+	mov	r2, r7
+	bl	printk
+	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
+	ldr	r0, [sp, #20]
+	mul	r3, r3, r0
+	cmp	r7, r3
+	blt	.L1571
+	movw	r3, #3068
+	mov	r1, #0
+	ldrh	r2, [r4, r3]
+	ldr	r3, .L1586+4
+	mov	r2, r2, asl #9
+	ldr	r0, [r3, #144]
+	bl	ftl_memset
+.L1571:
+	cmp	r5, #0
+	bne	.L1572
+	ldr	sl, .L1586+4
+	mov	r8, r5
+	mov	r7, r5
+	ldrh	r9, [sl, #152]
+	b	.L1573
+.L1575:
+	mov	r0, r6
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L1574
+	mov	r1, r6
+	ldr	r0, .L1586+20
+	bl	printk
+	ldr	r3, [sl, #144]
+	mov	r2, r6, lsr #5
+	mov	r0, #1
+	add	r7, r7, r0
+	and	r6, r6, #31
+	ldr	r1, [r3, r2, asl #2]
+	uxth	r7, r7
+	orr	r6, r1, r0, asl r6
+	str	r6, [r3, r2, asl #2]
+.L1574:
+	add	r8, r8, #1
+	uxth	r8, r8
+.L1573:
+	add	r6, r8, r9
+	ldrb	r3, [r4, #853]	@ zero_extendqisi2
+	uxth	r6, r6
+	cmp	r3, r6
+	bhi	.L1575
+	ldr	r6, [sp, #24]
+	sub	r9, fp, #50
+	ldr	sl, .L1586+4
+	mov	r8, #1
+	b	.L1576
+.L1578:
+	mov	r0, r6
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L1577
+	mov	r1, r6
+	ldr	r0, .L1586+20
+	bl	printk
+	ldr	r3, [sl, #144]
+	mov	r2, r6, lsr #5
+	and	r0, r6, #31
+	ldr	r1, [r3, r2, asl #2]
+	orr	r1, r1, r8, asl r0
+	str	r1, [r3, r2, asl #2]
+.L1577:
+	sub	r6, r6, #1
+	uxth	r6, r6
+.L1576:
+	cmp	r6, r9
+	bgt	.L1578
+	ldr	r3, .L1586+4
+	ldrb	r1, [r4, #853]	@ zero_extendqisi2
+	ldr	r2, [r3, #152]
+	rsb	r2, r2, r1
+	cmp	r7, r2
+	bcc	.L1572
+	movw	r2, #3068
+	ldr	r0, [r3, #144]
+	ldrh	r2, [r4, r2]
+	mov	r1, #0
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+.L1572:
+	mul	r8, fp, r5
+	ldr	r7, .L1586+4
+	ldr	r6, [sp, #24]
+	ldr	r9, [sp, #28]
+	add	sl, r7, r5, asl #1
+.L1579:
+	ldr	r0, .L1586+24
+	mov	r1, r5
+	mov	r2, r6
+	bl	printk
+	ldr	r3, [r7, #144]
+	b	.L1580
+.L1581:
+	sub	r6, r6, #1
+	uxth	r6, r6
+.L1580:
+	mov	r1, r6, lsr #5
+	and	r2, r6, #31
+	ldr	r1, [r3, r1, asl #2]
+	mov	r2, r1, lsr r2
+	ands	r2, r2, #1
+	bne	.L1581
+	ldr	r3, .L1586+28
+	mov	r1, #1
+	strh	r6, [sl, #228]	@ movhi
+	add	r0, sp, #36
+	strh	r6, [r9, #2]	@ movhi
+	strh	r3, [r9, #0]	@ movhi
+	ldr	r3, [r7, #144]
+	strh	r2, [r9, #8]	@ movhi
+	mov	r2, r1
+	str	r3, [sp, #44]
+	ldr	r3, [r7, #224]
+	str	r3, [sp, #48]
+	add	r3, r6, r8
+	mov	r3, r3, asl #10
+	str	r3, [sp, #40]
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	mov	r3, r1
+	add	r0, sp, #36
+	mov	r2, r1
+	bl	FlashProgPages
+	ldr	r3, [sp, #36]
+	cmp	r3, #0
+	subne	r6, r6, #1
+	uxthne	r6, r6
+	bne	.L1579
+.L1561:
+	add	r5, r5, #1
+	uxtb	r5, r5
+.L1560:
+	ldrb	r3, [r4, #3762]	@ zero_extendqisi2
+	cmp	r3, r5
+	bhi	.L1582
+	add	sp, sp, #76
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1587:
+	.align	2
+.L1586:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC111
+	.word	.LC112
+	.word	.LC113
+	.word	.LC114
+	.word	.LC115
+	.word	-3872
+	.fnend
+	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
+	.align	2
+	.global	ftl_map_blk_gc
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r4, r0
+	ldr	r6, [r0, #12]
+	ldr	r5, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	ip, [r4, #10]
+	ldrh	r2, [r4, #8]
+	sub	r3, ip, #4
+	cmp	r2, r3
+	bge	.L1589
+	ldrh	r2, [r4, #40]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1590
+	ldr	r1, .L1602
+	movw	r3, #3914
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r1, r3]
+	cmp	r2, r3
+	bcc	.L1590
+.L1589:
+	ldrh	r1, [r4, #40]
+	movw	r3, #65535
+	uxth	r7, r0
+	cmp	r1, r3
+	beq	.L1591
+	ldr	r0, .L1602
+	movw	r2, #3914
+	ldrh	r3, [r4, #2]
+	ldrh	r2, [r0, r2]
+	cmp	r2, r3
+	movls	r0, r6
+	movls	r2, #0
+	bhi	.L1591
+	b	.L1592
+.L1594:
+	ldrh	lr, [r0], #2
+	cmp	lr, r1
+	beq	.L1601
+	add	r2, r2, #1
+	uxth	r2, r2
+.L1592:
+	cmp	r2, ip
+	bne	.L1594
+	b	.L1593
+.L1601:
+	mov	r7, r2
+.L1593:
+	mov	r2, r2, asl #1
+	ldr	r0, .L1602+4
+	ldrh	r2, [r6, r2]
+	bl	printk
+	mvn	r3, #0
+	strh	r3, [r4, #40]	@ movhi
+.L1591:
+	mov	r7, r7, asl #1
+	ldrh	r8, [r6, r7]
+	cmp	r8, #0
+	beq	.L1590
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	bne	.L1590
+	mov	r2, #1
+	ldr	r1, .L1602
+	str	r2, [r4, #32]
+	strh	r3, [r6, r7]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
+	sub	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	movw	r3, #3914
+	ldrh	r3, [r1, r3]
+	cmp	r2, r3
+	bcc	.L1595
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1595:
+	mov	r7, #0
+	ldr	r6, .L1602+8
+	mov	fp, r7
+	b	.L1596
+.L1599:
+	ldr	r3, [r5, r7, asl #2]
+	mov	r9, r7, asl #2
+	cmp	r8, r3, lsr #10
+	bne	.L1597
+	ldr	r3, [r6, #-960]
+	mov	r1, #1
+	ldr	sl, [r6, #-940]
+	mov	r2, r1
+	ldr	r0, .L1602+12
+	str	r3, [r6, #184]
+	str	sl, [r6, #188]
+	ldr	r3, [r5, r7, asl #2]
+	str	r3, [r6, #180]
+	bl	FlashReadPages
+	ldr	r3, [r6, #176]
+	cmn	r3, #1
+	bne	.L1598
+	str	fp, [r5, r9]
+	ldr	r0, .L1602+16
+	ldr	r1, [r6, #180]
+	ldrh	r2, [sl, #8]
+	bl	printk
+	mov	r3, #1
+	str	r3, [r6, #-2092]
+	b	.L1597
+.L1598:
+	mov	r0, r4
+	mov	r1, r7
+	ldr	r2, [r6, #184]
+	bl	FtlMapWritePage
+.L1597:
+	add	r7, r7, #1
+	uxth	r7, r7
+.L1596:
+	ldrh	r3, [r4, #6]
+	cmp	r3, r7
+	bhi	.L1599
+	mov	r0, r8
+	mov	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+	mov	r3, #0
+	str	r3, [r4, #32]
+.L1590:
+	ldr	r1, .L1602
+	movw	r3, #3914
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r1, r3]
+	cmp	r2, r3
+	bcc	.L1600
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1600:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1603:
+	.align	2
+.L1602:
+	.word	.LANCHOR0
+	.word	.LC116
+	.word	.LANCHOR2
+	.word	.LANCHOR2+176
+	.word	.LC117
+	.fnend
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	2
+	.global	Ftl_write_map_blk_to_last_page
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r0
+	ldr	r5, .L1610
+	ldr	r7, [r0, #12]
+	ldr	r8, [r0, #24]
+	ldr	r6, [r5, #-2092]
+	cmp	r6, #0
+	bne	.L1605
+	ldrh	r3, [r0, #0]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L1606
+	ldrh	r3, [r0, #8]
+	add	r3, r3, #1
+	strh	r3, [r0, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	strh	r0, [r7, #0]	@ movhi
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	add	r3, r3, #1
+	strh	r6, [r4, #0]	@ movhi
+	str	r3, [r4, #28]
+	b	.L1605
+.L1606:
+	mov	r3, r3, asl #1
+	ldr	r2, [r0, #28]
+	mov	r1, #255
+	ldrh	r7, [r7, r3]
+	ldrh	r3, [r0, #2]
+	orr	r3, r3, r7, asl #10
+	str	r3, [r5, #180]
+	ldr	r3, [r5, #-964]
+	str	r3, [r5, #184]
+	ldr	r3, [r5, #-940]
+	str	r3, [r5, #188]
+	str	r2, [r3, #4]
+	ldr	r2, .L1610+4
+	strh	r2, [r3, #8]	@ movhi
+	ldrh	r2, [r0, #4]
+	strh	r7, [r3, #2]	@ movhi
+	strh	r2, [r3, #0]	@ movhi
+	movw	r3, #3914
+	ldr	r2, .L1610+8
+	ldr	r0, [r5, #-964]
+	ldrh	r2, [r2, r3]
+	mov	r2, r2, asl #3
+	bl	ftl_memset
+	mov	r3, r6
+	b	.L1607
+.L1609:
+	ldr	r2, [r8, r3, asl #2]
+	cmp	r7, r2, lsr #10
+	bne	.L1608
+	add	r6, r6, #1
+	ldr	r2, [r5, #-964]
+	uxth	r6, r6
+	str	r3, [r2, r6, asl #3]
+	ldr	r2, [r5, #-964]
+	ldr	r1, [r8, r3, asl #2]
+	add	r2, r2, r6, asl #3
+	str	r1, [r2, #4]
+.L1608:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L1607:
+	ldrh	r2, [r4, #6]
+	cmp	r2, r3
+	bhi	.L1609
+	mov	r1, #1
+	mov	r3, #0
+	ldr	r0, .L1610+12
+	mov	r2, r1
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
+	add	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+.L1605:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1611:
+	.align	2
+.L1610:
+	.word	.LANCHOR2
+	.word	-1291
+	.word	.LANCHOR0
+	.word	.LANCHOR2+176
+	.fnend
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	2
+	.type	FtlMapWritePage.part.14, %function
+FtlMapWritePage.part.14:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r4, r0
+	ldr	r5, .L1625
+	mov	sl, r1
+	ldr	r8, .L1625+4
+	mov	r9, r2
+	mov	r6, #0
+.L1623:
+	ldr	r3, [r5, #-1824]
+	add	r3, r3, #1
+	str	r3, [r5, #-1824]
+	movw	r3, #3914
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r8, r3]
+	sub	r3, r3, #1
+	cmp	r2, r3
+	bge	.L1614
+	ldrh	r2, [r4, #0]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1615
+.L1614:
+	mov	r0, r4
+	bl	Ftl_write_map_blk_to_last_page
+.L1615:
+	ldrh	r3, [r4, #0]
+	mov	r1, #0
+	ldr	r2, [r4, #12]
+	ldr	r0, [r5, #-940]
+	mov	r3, r3, asl #1
+	ldrh	r7, [r2, r3]
+	mov	r2, #16
+	ldrh	r3, [r4, #2]
+	str	r9, [r5, #184]
+	orr	r3, r3, r7, asl #10
+	str	r0, [r5, #188]
+	str	r3, [r5, #180]
+	bl	ftl_memset
+	ldr	r3, [r5, #188]
+	mov	r1, #1
+	ldr	r2, [r4, #28]
+	ldr	r0, .L1625+8
+	strh	sl, [r3, #8]	@ movhi
+	str	r2, [r3, #4]
+	ldrh	r2, [r4, #4]
+	strh	r7, [r3, #2]	@ movhi
+	strh	r2, [r3, #0]	@ movhi
+	mov	r2, r1
+	mov	r3, r1
+	bl	FlashProgPages
+	ldrh	r2, [r4, #2]
+	add	r2, r2, #1
+	uxth	r2, r2
+	strh	r2, [r4, #2]	@ movhi
+	ldr	r3, [r5, #176]
+	cmn	r3, #1
+	bne	.L1616
+	ldr	r0, .L1625+12
+	add	r6, r6, #1
+	ldr	r1, [r5, #180]
+	bl	printk
+	ldrh	r3, [r4, #2]
+	uxth	r6, r6
+	cmp	r3, #2
+	movwls	r3, #3914
+	ldrlsh	r3, [r8, r3]
+	subls	r3, r3, #1
+	strlsh	r3, [r4, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L1623
+	ldr	r4, .L1625
+	mov	r2, r6
+	ldr	r0, .L1625+16
+	ldr	r1, [r4, #180]
+	bl	printk
+	mov	r3, #1
+	str	r3, [r4, #-2092]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L1616:
+	cmp	r3, #0
+	strneh	r7, [r4, #40]	@ movhi
+	cmp	r2, #1
+	beq	.L1623
+	cmp	r3, #256
+	beq	.L1623
+	ldr	r3, .L1625
+	ldr	r2, [r3, #180]
+	ldr	r3, [r4, #24]
+	str	r2, [r3, sl, asl #2]
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L1626:
+	.align	2
+.L1625:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+176
+	.word	.LC118
+	.word	.LC119
+	.fnend
+	.size	FtlMapWritePage.part.14, .-FtlMapWritePage.part.14
+	.align	2
+	.global	FtlMapWritePage
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L1629
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L1628
+	bl	FtlMapWritePage.part.14
+.L1628:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L1630:
+	.align	2
+.L1629:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	2
+	.global	flush_l2p_region
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, #12
+	ldr	r5, .L1632
+	mul	r4, r4, r0
+	ldr	r0, .L1632+4
+	ldr	r2, [r5, #-1856]
+	add	r3, r2, r4
+	ldrh	r1, [r2, r4]
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+	ldr	r3, [r5, #-1856]
+	mov	r0, #0
+	add	r4, r3, r4
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1633:
+	.align	2
+.L1632:
+	.word	.LANCHOR2
+	.word	.LANCHOR2-1092
+	.fnend
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	2
+	.global	FtlMapBlkWriteDumpData
+	.type	FtlMapBlkWriteDumpData, %function
+FtlMapBlkWriteDumpData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r3, [r0, #36]
+	ldrh	r5, [r0, #6]
+	cmp	r3, #0
+	ldr	r2, [r0, #24]
+	ldmeqfd	sp!, {r3, r4, r5, pc}
+	mov	r3, #0
+	str	r3, [r0, #36]
+	ldr	r3, .L1638
+	ldr	r1, [r3, #-2092]
+	cmp	r1, #0
+	ldmnefd	sp!, {r3, r4, r5, pc}
+	sub	r5, r5, #1
+	ldr	r0, [r3, #-960]
+	ldr	r1, [r3, #-940]
+	uxth	r5, r5
+	str	r0, [r3, #184]
+	str	r1, [r3, #188]
+	ldr	r2, [r2, r5, asl #2]
+	cmp	r2, #0
+	str	r2, [r3, #180]
+	beq	.L1636
+	mov	r1, #1
+	add	r0, r3, #176
+	mov	r2, r1
+	bl	FlashReadPages
+	b	.L1637
+.L1636:
+	ldr	r2, .L1638+4
+	movw	r3, #3922
+	mov	r1, #255
+	ldrh	r2, [r2, r3]
+	bl	ftl_memset
+.L1637:
+	ldr	r3, .L1638
+	mov	r0, r4
+	mov	r1, r5
+	ldr	r2, [r3, #184]
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	FtlMapWritePage
+.L1639:
+	.align	2
+.L1638:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlMapBlkWriteDumpData, .-FtlMapBlkWriteDumpData
+	.align	2
+	.global	FtlVendorPartRead
+	.type	FtlVendorPartRead, %function
+FtlVendorPartRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1651
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r9, r2
+	mov	r2, #3920
+	mov	r5, r1
+	ldrh	r7, [r3, r2]
+	movw	r2, #3906
+	ldrh	r2, [r3, r2]
+	add	r1, r1, r0
+	.pad #52
+	sub	sp, sp, #52
+	mov	r8, r0
+	cmp	r1, r2
+	mvnhi	fp, #0
+	bhi	.L1641
+	mov	r7, r0, lsr r7
+	mov	fp, #0
+	ldr	r6, .L1651+4
+	mov	r2, r7, asl #2
+	str	r2, [sp, #0]
+	b	.L1642
+.L1648:
+	ldr	r3, [r6, #-908]
+	mov	r0, r8
+	ldr	r2, [sp, #0]
+	ldr	sl, [r3, r2]
+	movw	r3, #3918
+	ldr	r2, .L1651
+	ldrh	r4, [r2, r3]
+	mov	r1, r4
+	bl	__aeabi_uidivmod
+	uxth	r1, r1
+	str	r1, [sp, #4]
+	rsb	r4, r1, r4
+	uxth	r4, r4
+	cmp	r4, r5
+	uxthhi	r4, r5
+	cmp	sl, #0
+	beq	.L1644
+	ldr	r2, .L1651+4
+	mov	r1, #1
+	add	r0, sp, #12
+	str	sl, [sp, #16]
+	ldr	r3, [r2, #-956]
+	mov	r2, r1
+	str	r3, [sp, #20]
+	mov	r3, #0
+	str	r3, [sp, #24]
+	bl	FlashReadPages
+	ldr	r3, [sp, #12]
+	cmn	r3, #1
+	moveq	fp, r3
+	ldr	r3, [r6, #176]
+	cmp	r3, #256
+	bne	.L1646
+	mov	r1, r7
+	mov	r2, sl
+	ldr	r0, .L1651+8
+	bl	printk
+	ldr	r0, .L1651+12
+	mov	r1, r7
+	ldr	r2, [r6, #-956]
+	bl	FtlMapWritePage
+.L1646:
+	ldr	r3, [sp, #4]
+	mov	r0, r9
+	ldr	r1, [r6, #-956]
+	mov	r2, r4, asl #9
+	add	r1, r1, r3, asl #9
+	bl	memcpy
+	b	.L1647
+.L1644:
+	mov	r0, r9
+	mov	r1, sl
+	mov	r2, r4, asl #9
+	bl	ftl_memset
+.L1647:
+	ldr	r3, [sp, #0]
+	add	r7, r7, #1
+	rsb	r5, r4, r5
+	add	r8, r8, r4
+	add	r9, r9, r4, asl #9
+	add	r3, r3, #4
+	str	r3, [sp, #0]
+.L1642:
+	cmp	r5, #0
+	bne	.L1648
+.L1641:
+	mov	r0, fp
+	add	sp, sp, #52
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1652:
+	.align	2
+.L1651:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC120
+	.word	.LANCHOR2+244
+	.fnend
+	.size	FtlVendorPartRead, .-FtlVendorPartRead
+	.align	2
+	.global	Ftl_load_ext_data
+	.type	Ftl_load_ext_data, %function
+Ftl_load_ext_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, #0
+	ldr	r4, .L1657
+	mov	r1, #1
+	ldr	r5, .L1657+4
+	sub	r2, r4, #1712
+	bl	FtlVendorPartRead
+	ldr	r3, [r4, #-1712]
+	cmp	r3, r5
+	beq	.L1654
+	sub	r0, r4, #1712
+	mov	r1, #0
+	mov	r2, #512
+	bl	ftl_memset
+	str	r5, [r4, #-1712]
+.L1654:
+	ldr	r2, [r4, #-1712]
+	ldr	r3, .L1657
+	cmp	r2, r5
+	bne	.L1655
+	ldr	r2, [r3, #-1624]
+	str	r2, [r3, #-1816]
+	ldr	r2, [r3, #-1620]
+	str	r2, [r3, #-1812]
+	ldr	r2, [r3, #-1704]
+	str	r2, [r3, #-1820]
+	ldr	r2, [r3, #-1700]
+	str	r2, [r3, #-1832]
+	ldr	r2, [r3, #-1696]
+	str	r2, [r3, #-1840]
+	ldr	r2, [r3, #-1692]
+	str	r2, [r3, #-1824]
+	ldr	r2, [r3, #-1684]
+	str	r2, [r3, #-1796]
+	ldr	r2, [r3, #-1680]
+	str	r2, [r3, #-2080]
+	ldr	r2, [r3, #-1676]
+	str	r2, [r3, #-1836]
+	ldr	r2, [r3, #-1672]
+	str	r2, [r3, #-1828]
+	ldr	r2, [r3, #-1668]
+	str	r2, [r3, #-1788]
+	ldr	r2, [r3, #-1664]
+	str	r2, [r3, #-1784]
+	ldr	r2, [r3, #-1652]
+	str	r2, [r3, #-1716]
+.L1655:
+	ldr	r4, .L1657
+	mov	r3, #0
+	ldr	r5, .L1657+8
+	str	r3, [r4, #-1004]
+	ldr	r2, [r4, #-1644]
+	ldr	r3, .L1657+12
+	cmp	r2, r3
+	bne	.L1656
+	mov	r3, #1
+	ldr	r0, .L1657+16
+	str	r3, [r5, #3836]
+	ldr	r1, .L1657+20
+	bl	printk
+.L1656:
+	movw	r3, #3902
+	ldr	r0, [r4, #-1800]
+	ldrh	r2, [r5, r3]
+	ldr	r3, [r4, #-1796]
+	mla	r0, r0, r2, r3
+	movw	r3, #3852
+	ldrh	r1, [r5, r3]
+	bl	__aeabi_uidiv
+	str	r0, [r4, #-1792]
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1658:
+	.align	2
+.L1657:
+	.word	.LANCHOR2
+	.word	1179929683
+	.word	.LANCHOR0
+	.word	305432421
+	.word	.LC78
+	.word	.LC121
+	.fnend
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.align	2
+	.global	FtlLoadEctTbl
+	.type	FtlLoadEctTbl, %function
+FtlLoadEctTbl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, #64
+	ldr	r4, .L1661
+	ldr	r5, .L1661+4
+	ldr	r2, [r4, #-924]
+	ldrh	r1, [r4, r5]
+	bl	FtlVendorPartRead
+	ldr	r3, [r4, #-924]
+	ldr	r2, [r3, #0]
+	ldr	r3, .L1661+8
+	cmp	r2, r3
+	beq	.L1660
+	ldr	r1, .L1661+12
+	ldr	r0, .L1661+16
+	bl	printk
+	ldrh	r2, [r4, r5]
+	ldr	r0, [r4, #-924]
+	mov	r1, #0
+	mov	r2, r2, asl #9
+	bl	ftl_memset
+.L1660:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L1662:
+	.align	2
+.L1661:
+	.word	.LANCHOR2
+	.word	-928
+	.word	1112818501
+	.word	.LC122
+	.word	.LC78
+	.fnend
+	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
+	.align	2
+	.global	FtlVendorPartWrite
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1673
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r9, r2
+	mov	r2, #3920
+	mov	r4, r1
+	ldrh	r8, [r3, r2]
+	movw	r2, #3906
+	ldrh	r2, [r3, r2]
+	add	r1, r1, r0
+	.pad #60
+	sub	sp, sp, #60
+	mov	r6, r0
+	cmp	r1, r2
+	mvnhi	r7, #0
+	bhi	.L1664
+	mov	r8, r0, lsr r8
+	mov	r7, #0
+	ldr	sl, .L1673+4
+	mov	ip, r8, asl #2
+	str	ip, [sp, #8]
+	b	.L1665
+.L1670:
+	ldr	r1, .L1673
+	movw	r2, #3918
+	ldr	ip, [sp, #8]
+	mov	r0, r6
+	ldr	r3, [sl, #-908]
+	ldrh	fp, [r1, r2]
+	ldr	r3, [r3, ip]
+	mov	r1, fp
+	str	r3, [sp, #4]
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #4]
+	ldr	r2, .L1673+4
+	uxth	r1, r1
+	str	r1, [sp, #12]
+	rsb	r5, r1, fp
+	uxth	r5, r5
+	cmp	r5, r4
+	uxthhi	r5, r4
+	cmp	r3, #0
+	beq	.L1667
+	cmp	r5, fp
+	beq	.L1667
+	str	r3, [sp, #24]
+	mov	r1, #1
+	ldr	r3, [r2, #-956]
+	add	r0, sp, #20
+	mov	r2, r1
+	str	r3, [sp, #28]
+	mov	r3, #0
+	str	r3, [sp, #32]
+	bl	FlashReadPages
+	b	.L1668
+.L1667:
+	ldr	ip, .L1673
+	movw	r3, #3922
+	ldr	r0, [r2, #-956]
+	mov	r1, #0
+	ldrh	r2, [ip, r3]
+	bl	ftl_memset
+.L1668:
+	ldr	r3, [sp, #12]
+	mov	fp, r5, asl #9
+	ldr	r0, [sl, #-956]
+	mov	r1, r9
+	mov	r2, fp
+	rsb	r4, r5, r4
+	add	r0, r0, r3, asl #9
+	add	r6, r6, r5
+	bl	memcpy
+	mov	r1, r8
+	ldr	r0, .L1673+8
+	add	r8, r8, #1
+	ldr	r2, [sl, #-956]
+	add	r9, r9, fp
+	bl	FtlMapWritePage
+	ldr	ip, [sp, #8]
+	add	ip, ip, #4
+	str	ip, [sp, #8]
+	cmn	r0, #1
+	moveq	r7, r0
+.L1665:
+	cmp	r4, #0
+	bne	.L1670
+.L1664:
+	mov	r0, r7
+	add	sp, sp, #60
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1674:
+	.align	2
+.L1673:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR2+244
+	.fnend
+	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.align	2
+	.global	Ftl_save_ext_data
+	.type	Ftl_save_ext_data, %function
+Ftl_save_ext_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L1677
+	ldr	r3, .L1677+4
+	ldr	r1, [r2, #-1712]
+	cmp	r1, r3
+	bxne	lr
+	ldr	r3, .L1677+8
+	mov	r0, #0
+	mov	r1, #1
+	str	r3, [r2, #-1708]
+	ldr	r3, [r2, #-1816]
+	str	r3, [r2, #-1624]
+	ldr	r3, [r2, #-1812]
+	str	r3, [r2, #-1620]
+	ldr	r3, [r2, #-1820]
+	str	r3, [r2, #-1704]
+	ldr	r3, [r2, #-1832]
+	str	r3, [r2, #-1700]
+	ldr	r3, [r2, #-1840]
+	str	r3, [r2, #-1696]
+	ldr	r3, [r2, #-1824]
+	str	r3, [r2, #-1692]
+	ldr	r3, [r2, #-1796]
+	str	r3, [r2, #-1684]
+	ldr	r3, [r2, #-2080]
+	str	r3, [r2, #-1680]
+	ldr	r3, [r2, #-1836]
+	str	r3, [r2, #-1676]
+	ldr	r3, [r2, #-1828]
+	str	r3, [r2, #-1672]
+	ldr	r3, [r2, #-1788]
+	str	r3, [r2, #-1668]
+	ldr	r3, [r2, #-1784]
+	str	r3, [r2, #-1664]
+	ldr	r3, [r2, #-1716]
+	str	r3, [r2, #-1652]
+	ldr	r3, [r2, #-1004]
+	str	r3, [r2, #-1648]
+	sub	r2, r2, #1712
+	b	FtlVendorPartWrite
+.L1678:
+	.align	2
+.L1677:
+	.word	.LANCHOR2
+	.word	1179929683
+	.word	1342177352
+	.fnend
+	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
+	.align	2
+	.global	FtlEctTblFlush
+	.type	FtlEctTblFlush, %function
+FtlEctTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L1686
+	ldr	r1, .L1686+4
+	ldr	r3, [r3, #3836]
+	cmp	r3, #0
+	moveq	r2, #32
+	beq	.L1680
+	ldr	r2, [r1, #-1784]
+	cmp	r2, #29
+	movls	r2, #4
+	movhi	r2, #32
+.L1680:
+	mov	r3, #288
+	ldrh	r1, [r1, r3]
+	cmp	r1, #31
+	addls	r1, r1, #1
+	ldrls	r2, .L1686+4
+	strlsh	r1, [r2, r3]	@ movhi
+	movls	r2, #1
+	cmp	r0, #0
+	ldr	r3, .L1686+4
+	bne	.L1682
+	ldr	r1, [r3, #-924]
+	ldr	r0, [r1, #20]
+	ldr	r1, [r1, #16]
+	add	r2, r2, r0
+	cmp	r1, r2
+	bcc	.L1683
+.L1682:
+	ldr	r2, [r3, #-924]
+	mov	r0, #64
+	ldr	r1, [r2, #16]
+	str	r1, [r2, #20]
+	ldr	r1, .L1686+8
+	str	r1, [r2, #0]
+	ldr	r1, .L1686+12
+	ldr	r2, [r3, #-924]
+	ldrh	r1, [r3, r1]
+	mov	r3, r1, asl #9
+	str	r3, [r2, #12]
+	ldr	r3, [r2, #8]
+	add	r3, r3, #1
+	str	r3, [r2, #8]
+	mov	r3, #0
+	str	r3, [r2, #4]
+	bl	FtlVendorPartWrite
+	bl	Ftl_save_ext_data
+.L1683:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L1687:
+	.align	2
+.L1686:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	1112818501
+	.word	-928
+	.fnend
+	.size	FtlEctTblFlush, .-FtlEctTblFlush
+	.align	2
+	.type	ftl_load_l2p_region, %function
+ftl_load_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r5, r0
+	ldr	r4, .L1692
+	mov	r7, #12
+	ldr	r3, [r4, #-1036]
+	ldr	r6, [r3, r0, asl #2]
+	cmp	r6, #0
+	bne	.L1689
+	mul	r7, r7, r1
+	ldr	r3, [r4, #-1856]
+	ldr	r2, .L1692+4
+	mov	r1, #255
+	add	r3, r3, r7
+	ldr	r0, [r3, #8]
+	movw	r3, #3922
+	ldrh	r2, [r2, r3]
+	bl	ftl_memset
+	ldr	r3, [r4, #-1856]
+	strh	r5, [r3, r7]	@ movhi
+	ldr	r3, [r4, #-1856]
+	add	r7, r3, r7
+	str	r6, [r7, #4]
+	b	.L1690
+.L1689:
+	mul	r7, r7, r1
+	ldr	r3, [r4, #-1856]
+	mov	r1, #1
+	add	r0, r4, #176
+	mov	r2, r1
+	str	r6, [r4, #180]
+	add	r3, r3, r7
+	ldr	r3, [r3, #8]
+	str	r3, [r4, #184]
+	ldr	r3, [r4, #-940]
+	str	r3, [r4, #188]
+	bl	FlashReadPages
+	ldr	r3, [r4, #176]
+	cmp	r3, #256
+	bne	.L1691
+	mov	r2, r6
+	mov	r1, r5
+	ldr	r0, .L1692+8
+	mov	r6, r6, lsr #10
+	bl	printk
+	ldr	r3, .L1692+12
+	ldr	r0, .L1692+16
+	mov	r1, r5
+	strh	r6, [r4, r3]	@ movhi
+	ldr	r3, [r4, #-1856]
+	add	r3, r3, r7
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+.L1691:
+	ldr	r3, .L1692
+	mov	r1, #0
+	ldr	r3, [r3, #-1856]
+	add	r2, r3, r7
+	str	r1, [r2, #4]
+	strh	r5, [r3, r7]	@ movhi
+.L1690:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1693:
+	.align	2
+.L1692:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC123
+	.word	-1052
+	.word	.LANCHOR2-1092
+	.fnend
+	.size	ftl_load_l2p_region, .-ftl_load_l2p_region
+	.align	2
+	.global	log2phys
+	.type	log2phys, %function
+log2phys:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r8, r2
+	ldr	r3, .L1703
+	mov	r2, #3920
+	mov	r4, r1
+	ldrh	r7, [r3, r2]
+	mvn	r2, #0
+	add	r7, r7, #7
+	mov	r6, r0, lsr r7
+	bic	r7, r0, r2, asl r7
+	movw	r2, #3950
+	ldrh	r2, [r3, r2]
+	uxth	r6, r6
+	ldr	r3, .L1703+4
+	uxth	r7, r7
+	ldr	sl, [r3, #-1856]
+	mov	r3, #0
+	mov	r5, r3
+	b	.L1695
+.L1701:
+	add	r3, r3, #12
+	add	r1, sl, r3
+	ldrh	r1, [r1, #-12]
+	cmp	r1, r6
+	bne	.L1696
+.L1697:
+	cmp	r8, #0
+	ldr	r3, .L1703+4
+	mov	r2, #12
+	bne	.L1698
+	ldr	r3, [r3, #-1856]
+	mla	r2, r2, r5, r3
+	ldr	r3, [r2, #8]
+	ldr	r3, [r3, r7, asl #2]
+	str	r3, [r4, #0]
+	b	.L1699
+.L1698:
+	mul	r2, r2, r5
+	ldr	r1, [r3, #-1856]
+	ldr	r0, [r4, #0]
+	add	r1, r1, r2
+	ldr	r1, [r1, #8]
+	str	r0, [r1, r7, asl #2]
+	ldr	r1, [r3, #-1856]
+	add	r2, r1, r2
+	ldr	r1, [r2, #4]
+	orr	r1, r1, #-2147483648
+	str	r1, [r2, #4]
+	ldr	r2, .L1703+8
+	strh	r6, [r3, r2]	@ movhi
+.L1699:
+	ldr	r3, .L1703+4
+	mov	r2, #12
+	mov	r0, #0
+	ldr	r3, [r3, #-1856]
+	mla	r5, r2, r5, r3
+	ldr	r3, [r5, #4]
+	cmn	r3, #1
+	addne	r3, r3, #1
+	strne	r3, [r5, #4]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L1696:
+	add	r5, r5, #1
+	uxth	r5, r5
+.L1695:
+	cmp	r5, r2
+	bne	.L1701
+	bl	select_l2p_ram_region
+	mov	r3, #12
+	mul	r3, r3, r0
+	mov	r5, r0
+	add	r2, sl, r3
+	ldrh	r1, [sl, r3]
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1702
+	ldr	r3, [r2, #4]
+	cmp	r3, #0
+	bge	.L1702
+	bl	flush_l2p_region
+.L1702:
+	mov	r0, r6
+	mov	r1, r5
+	bl	ftl_load_l2p_region
+	b	.L1697
+.L1704:
+	.align	2
+.L1703:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1852
+	.fnend
+	.size	log2phys, .-log2phys
+	.align	2
+	.global	FtlReUsePrevPpa
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, lr}
+	mov	r7, r0
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r3, .L1711
+	ldr	r1, [r3, #-2020]
+	mov	r5, r0, asl #1
+	ldrh	r2, [r1, r5]
+	cmp	r2, #0
+	addne	r2, r2, #1
+	strneh	r2, [r1, r5]	@ movhi
+	bne	.L1707
+	ldr	r4, [r3, #-2008]
+	cmp	r4, #0
+	beq	.L1707
+	ldr	r1, .L1711+4
+	mov	ip, #6
+	ldrh	lr, [r3, r1]
+	ldr	r3, [r3, #-2028]
+	ldr	r1, .L1711+8
+	rsb	r4, r3, r4
+	mov	r4, r4, asr #1
+	mul	r4, r1, r4
+	movw	r1, #65535
+	uxth	r4, r4
+	b	.L1708
+.L1710:
+	cmp	r4, r0
+	bne	.L1709
+	mov	r1, r4
+	ldr	r0, .L1711+12
+	bl	List_remove_node
+	ldr	r6, .L1711
+	ldr	r3, .L1711+4
+	mov	r0, r4
+	ldrh	r2, [r6, r3]
+	sub	r2, r2, #1
+	strh	r2, [r6, r3]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r3, [r6, #-2020]
+	ldrh	r2, [r3, r5]
+	add	r2, r2, #1
+	strh	r2, [r3, r5]	@ movhi
+	b	.L1707
+.L1709:
+	mul	r4, ip, r4
+	ldrh	r4, [r3, r4]
+	cmp	r4, r1
+	beq	.L1707
+	add	r2, r2, #1
+	uxth	r2, r2
+.L1708:
+	cmp	r2, lr
+	bne	.L1710
+.L1707:
+	mov	r0, r7
+	add	r1, sp, #4
+	mov	r2, #1
+	bl	log2phys
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
+.L1712:
+	.align	2
+.L1711:
+	.word	.LANCHOR2
+	.word	-2004
+	.word	-1431655765
+	.word	.LANCHOR2-2008
+	.fnend
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	2
+	.type	FtlReadRefresh.part.15, %function
+FtlReadRefresh.part.15:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #40
+	sub	sp, sp, #40
+	ldr	r4, .L1721
+	ldr	r6, .L1721+4
+	ldr	r2, [r4, #-1628]
+	ldr	r3, [r6, #3972]
+	cmp	r2, r3
+	bcs	.L1714
+	mov	r5, #2048
+.L1717:
+	ldr	r0, [r4, #-1628]
+	ldr	r3, [r6, #3972]
+	cmp	r0, r3
+	bcs	.L1719
+	mov	r1, sp
+	mov	r2, #0
+	bl	log2phys
+	ldr	r0, [sp, #0]
+	ldr	r3, [r4, #-1628]
+	cmn	r0, #1
+	add	r3, r3, #1
+	str	r3, [r4, #-1628]
+	beq	.L1716
+	str	r0, [sp, #8]
+	add	r0, sp, #40
+	mov	r2, #0
+	mov	r1, #1
+	str	r2, [r0, #-36]!
+	str	r3, [sp, #20]
+	str	r2, [sp, #12]
+	str	r2, [sp, #16]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	cmp	r3, #256
+	bne	.L1719
+	ldr	r0, [sp, #0]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	b	.L1719
+.L1716:
+	subs	r5, r5, #1
+	bne	.L1717
+	b	.L1715
+.L1714:
+	ldr	r3, [r4, #-1840]
+	mov	r0, #0
+	str	r0, [r4, #-1632]
+	str	r0, [r4, #-1628]
+	str	r3, [r4, #-1636]
+	b	.L1715
+.L1719:
+	mvn	r0, #0
+.L1715:
+	add	sp, sp, #40
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1722:
+	.align	2
+.L1721:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlReadRefresh.part.15, .-FtlReadRefresh.part.15
+	.align	2
+	.global	FtlReadRefresh
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1730
+	ldr	r2, [r3, #-1632]
+	cmp	r2, #0
+	beq	.L1724
+	b	FtlReadRefresh.part.15
+.L1724:
+	ldr	r2, .L1730+4
+	ldr	r0, [r3, #-1788]
+	ldr	r1, [r2, #3836]
+	ldrb	r2, [r2, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	ldr	r2, [r3, #-1840]
+	addeq	r0, r1, r0, lsr #10
+	moveq	r1, #33554432
+	movne	r0, #4194304
+	moveq	r0, r1, asr r0
+	ldr	r1, [r3, #-1636]
+	add	r3, r2, #1048576
+	cmp	r1, r3
+	bhi	.L1726
+	add	r1, r0, r1
+	cmp	r1, r2
+	bcc	.L1726
+	ldr	r3, .L1730
+	ldrb	r3, [r3, #-2048]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1727
+.L1726:
+	ldr	r3, .L1730
+	mov	r1, #1
+	str	r2, [r3, #-1636]
+	str	r1, [r3, #-1632]
+	mov	r1, #0
+	str	r1, [r3, #-1628]
+.L1727:
+	mov	r0, #0
+	bx	lr
+.L1731:
+	.align	2
+.L1730:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	2
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r3, [r0, #16]
+	mov	r4, r0
+	ldrh	r8, [r0, #6]
+	mov	r1, #0
+	ldr	fp, [r0, #24]
+	mov	r9, #0
+	str	r3, [sp, #24]
+	ldrh	r3, [r0, #8]
+	mov	r2, r8, asl #2
+	ldr	r7, [r0, #12]
+	mov	r0, fp
+	str	r3, [sp, #16]
+	bl	ftl_memset
+	ldr	r3, .L1767
+	mov	sl, r7
+	str	r9, [r4, #32]
+	str	r9, [r4, #28]
+	ldr	r2, [r3, #-964]
+	ldr	r5, [r3, #-940]
+	str	r2, [r3, #184]
+	str	r5, [r3, #188]
+	mvn	r3, #0
+	strh	r3, [r4, #0]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #1
+	str	r3, [r4, #36]
+	ldr	r3, [sp, #16]
+	sub	r3, r3, #1
+	str	r3, [sp, #20]
+	ldr	r3, .L1767+4
+	b	.L1733
+.L1747:
+	ldr	r0, [sp, #20]
+	cmp	r2, r0
+	mov	r2, r2, asl #1
+	bne	.L1734
+	ldrh	r0, [sl, r2]
+	mov	r1, #1
+	add	r3, sl, r2
+	str	r3, [sp, #16]
+	bl	FtlGetLastWrittenPage
+	ldr	r1, [sp, #20]
+	ldr	r2, [sp, #24]
+	mov	r7, sl
+	strh	r9, [r4, #0]	@ movhi
+	mov	sl, #0
+	ldr	r6, .L1767
+	uxth	r0, r0
+	add	r3, r0, #1
+	strh	r3, [r4, #2]	@ movhi
+	ldr	r3, [r2, r1, asl #2]
+	sxth	r9, r0
+	add	r9, r9, #1
+	str	r3, [r4, #28]
+	b	.L1735
+.L1738:
+	ldr	r0, [sp, #16]
+	mov	r1, #1
+	ldrh	r2, [r0, #0]
+	ldr	r0, .L1767+8
+	orr	r3, r3, r2, asl #10
+	mov	r2, r1
+	str	r3, [r6, #180]
+	bl	FlashReadPages
+	ldr	r3, [r6, #176]
+	cmn	r3, #1
+	ldreq	r1, [sp, #16]
+	ldreqh	r3, [r1, #0]
+	streqh	r3, [r4, #40]	@ movhi
+	beq	.L1737
+	ldrh	r3, [r5, #8]
+	cmp	r3, r8
+	bcs	.L1737
+	ldrh	r2, [r4, #4]
+	ldrh	r1, [r5, #0]
+	cmp	r1, r2
+	ldreq	r2, [r6, #180]
+	streq	r2, [fp, r3, asl #2]
+.L1737:
+	add	sl, sl, #1
+	uxth	sl, sl
+.L1735:
+	sxth	r3, sl
+	cmp	r3, r9
+	blt	.L1738
+	b	.L1739
+.L1734:
+	ldr	r6, .L1767
+	movw	r7, #3914
+	add	r0, sl, r2
+	str	r0, [sp, #28]
+	add	r0, r6, #176
+	ldr	r1, [r6, #-964]
+	str	r1, [r6, #184]
+	ldrh	r1, [sl, r2]
+	ldrh	r2, [r3, r7]
+	sub	r2, r2, #1
+	orr	r2, r2, r1, asl #10
+	mov	r1, #1
+	str	r2, [r6, #180]
+	mov	r2, r1
+	str	r3, [sp, #12]
+	bl	FlashReadPages
+	ldr	r2, [r6, #176]
+	ldr	r3, [sp, #12]
+	cmn	r2, #1
+	beq	.L1760
+	ldrh	r1, [r5, #0]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	bne	.L1760
+	ldrh	r1, [r5, #8]
+	movw	r2, #64245
+	cmp	r1, r2
+	bne	.L1760
+	b	.L1761
+.L1743:
+	ldr	r0, [r6, #-964]
+	mov	ip, r1, asl #3
+	add	r2, r2, #1
+	ldr	r1, [r0, r1, asl #3]
+	uxth	r2, r2
+	uxth	r1, r1
+	cmp	r1, r8
+	addcc	r0, r0, ip
+	ldrcc	r0, [r0, #4]
+	strcc	r0, [fp, r1, asl #2]
+	b	.L1741
+.L1761:
+	mov	r2, #0
+.L1741:
+	ldrh	r0, [r3, r7]
+	sxth	r1, r2
+	sub	r0, r0, #1
+	cmp	r1, r0
+	blt	.L1743
+	b	.L1744
+.L1746:
+	ldr	r0, [sp, #28]
+	ldrh	r1, [r0, #0]
+	ldr	r0, .L1767+8
+	orr	r2, r2, r1, asl #10
+	mov	r1, #1
+	str	r2, [r7, #180]
+	mov	r2, r1
+	str	r3, [sp, #12]
+	bl	FlashReadPages
+	ldr	r2, [r7, #176]
+	ldr	r3, [sp, #12]
+	cmn	r2, #1
+	beq	.L1745
+	ldrh	r2, [r5, #8]
+	cmp	r2, r8
+	bcs	.L1745
+	ldrh	r1, [r4, #4]
+	ldrh	r0, [r5, #0]
+	cmp	r0, r1
+	ldreq	r1, [r7, #180]
+	streq	r1, [fp, r2, asl #2]
+.L1745:
+	add	r6, r6, #1
+	uxth	r6, r6
+	b	.L1763
+.L1760:
+	ldr	r7, .L1767
+	mov	r6, #0
+.L1763:
+	movw	r1, #3914
+	sxth	r2, r6
+	ldrh	r1, [r3, r1]
+	cmp	r2, r1
+	blt	.L1746
+.L1744:
+	add	r9, r9, #1
+	uxth	r9, r9
+.L1733:
+	ldr	r1, [sp, #16]
+	sxth	r2, r9
+	cmp	r2, r1
+	blt	.L1747
+	mov	r7, sl
+.L1739:
+	ldr	r3, .L1767+12
+	cmp	r4, r3
+	bne	.L1748
+	ldr	r9, .L1767+4
+	movw	r3, #3956
+	ldrh	r3, [r9, r3]
+	cmp	r3, #0
+	bne	.L1762
+	b	.L1748
+.L1756:
+	ldr	r3, [r5, #-904]
+	mov	r4, r8, asl #2
+	ldr	r2, [r3, r8, asl #2]
+	sub	r1, r2, #1
+	cmn	r1, #3
+	bhi	.L1750
+	ldr	r1, [r5, #-1036]
+	ldr	r1, [r1, r8, asl #2]
+	cmp	r2, r1
+	beq	.L1750
+	ldr	r2, [r5, #-964]
+	mov	r1, #1
+	ldr	r6, [r5, #-940]
+	ldr	r0, .L1767+8
+	str	r2, [r5, #184]
+	mov	r2, r1
+	str	r6, [r5, #188]
+	ldr	r3, [r3, r4]
+	str	r3, [r5, #180]
+	bl	FlashReadPages
+	ldr	r3, [r5, #176]
+	cmn	r3, #1
+	beq	.L1750
+	ldr	r3, .L1767+16
+	ldrh	r2, [r6, #0]
+	ldrh	r3, [r5, r3]
+	cmp	r2, r3
+	bne	.L1750
+	ldr	r3, [r5, #-1036]
+	ldr	fp, [r6, #4]
+	ldr	r2, [r3, r4]
+	str	r2, [r5, #180]
+	ldr	r3, [r3, r4]
+	cmp	r3, #0
+	streq	r3, [r6, #4]
+	beq	.L1752
+	mov	r1, #1
+	ldr	r0, .L1767+8
+	mov	r2, r1
+	bl	FlashReadPages
+.L1752:
+	ldr	r1, [r6, #4]
+	cmp	fp, r1
+	bls	.L1750
+	ldr	r2, [r5, #-904]
+	ldr	r3, [r5, #-1036]
+	ldr	r0, .L1767+20
+	str	r1, [sp, #0]
+	ldr	r1, [r2, r4]
+	ldr	r2, [r3, r4]
+	mov	r3, fp
+	bl	printk
+	ldr	r3, [r5, #-904]
+	ldr	r2, [r3, r4]
+	ldr	r3, [r5, #-1036]
+	str	r2, [r3, r4]
+	mov	r2, #0
+	ldr	r3, [r5, #-904]
+	ldr	r0, [r3, r4]
+	ldr	r3, .L1767+24
+	ubfx	r0, r0, #10, #16
+	ldrh	r3, [r5, r3]
+	b	.L1753
+.L1754:
+	mov	r1, r1, asl #1
+	ldrh	r1, [r7, r1]
+	cmp	r1, r0
+	beq	.L1750
+	add	r2, r2, #1
+	uxth	r2, r2
+.L1753:
+	sxth	r1, r2
+	cmp	r1, r3
+	blt	.L1754
+	b	.L1765
+.L1766:
+	mov	r3, r3, asl #1
+	strh	r0, [r7, r3]	@ movhi
+	ldr	r3, .L1767+24
+	ldrh	r2, [r5, r3]
+	add	r2, r2, #1
+	strh	r2, [r5, r3]	@ movhi
+	bl	remove_from_free_sys_Queue
+.L1750:
+	add	r8, r8, #1
+	b	.L1749
+.L1762:
+	ldr	r5, .L1767
+	mov	r8, #0
+	mov	sl, r4
+.L1749:
+	movw	r2, #3948
+	ldrh	r3, [r9, r2]
+	cmp	r8, r3
+	bcc	.L1756
+	mov	r4, sl
+.L1748:
+	mov	r0, r4
+	bl	ftl_free_no_use_map_blk
+	ldr	r1, .L1767+4
+	movw	r3, #3914
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r1, r3]
+	cmp	r2, r3
+	bne	.L1757
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L1757:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, #0
+	add	sp, sp, #36
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1765:
+	ldr	r2, [r9, #3940]
+	cmp	r3, r2
+	bcs	.L1750
+	b	.L1766
+.L1768:
+	.align	2
+.L1767:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+176
+	.word	.LANCHOR2-1092
+	.word	-1088
+	.word	.LC124
+	.word	-1048
+	.fnend
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	2
+	.global	FtlLoadMapInfo
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	FtlL2PDataInit
+	ldr	r0, .L1770
+	bl	FtlMapTblRecovery
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L1771:
+	.align	2
+.L1770:
+	.word	.LANCHOR2-1092
+	.fnend
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	FtlLoadVonderInfo
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	movw	r2, #3932
+	ldr	r3, .L1773
+	ldr	r0, .L1773+4
+	ldrh	r2, [r3, r2]
+	strh	r2, [r0, #254]	@ movhi
+	ldr	r2, .L1773+8
+	strh	r2, [r0, #248]	@ movhi
+	movw	r2, #3958
+	ldrh	r2, [r3, r2]
+	strh	r2, [r0, #252]	@ movhi
+	movw	r2, #3934
+	ldrh	r2, [r3, r2]
+	ldr	r3, [r3, #3960]
+	strh	r2, [r0, #250]	@ movhi
+	mvn	r2, #0
+	str	r3, [r0, #256]
+	ldr	r3, [r0, #-912]
+	str	r3, [r0, #260]
+	ldr	r3, [r0, #-916]
+	str	r3, [r0, #264]
+	ldr	r3, [r0, #-908]
+	str	r3, [r0, #268]
+	mov	r3, #284
+	strh	r2, [r0, r3]	@ movhi
+	add	r0, r0, #244
+	bl	FtlMapTblRecovery
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L1774:
+	.align	2
+.L1773:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-3962
+	.fnend
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlRecoverySuperblock
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	movw	r2, #65535
+	ldrh	r3, [r0, #0]
+	.pad #60
+	sub	sp, sp, #60
+	mov	r4, r0
+	cmp	r3, r2
+	beq	.L1776
+	ldrh	r3, [r0, #2]
+	ldr	r1, .L1865
+	ldrb	fp, [r0, #6]	@ zero_extendqisi2
+	str	r3, [sp, #12]
+	movw	r3, #3912
+	ldrh	r3, [r1, r3]
+	ldr	ip, [sp, #12]
+	str	fp, [sp, #24]
+	cmp	r3, ip
+	mov	r3, #0
+	streqh	r3, [r0, #4]	@ movhi
+	moveq	r2, r3	@ movhi
+	ldrneh	r0, [r0, #16]
+	bne	.L1778
+	b	.L1862
+.L1779:
+	add	r3, r3, #1
+	uxth	r3, r3
+	add	r1, r4, r3, asl #1
+	ldrh	r0, [r1, #16]
+.L1778:
+	cmp	r0, r2
+	beq	.L1779
+	ldrb	r1, [r4, #8]	@ zero_extendqisi2
+	cmp	r1, #1
+	bne	.L1780
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
+	mov	r7, r0
+	beq	.L1781
+	ldr	r3, .L1865
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1855
+	add	r3, r3, r0, asl #1
+	movw	r2, #3076
+	ldrh	r8, [r3, r2]
+	b	.L1847
+.L1780:
+	mov	r1, #0
+	bl	FtlGetLastWrittenPage
+	cmn	r0, #1
+	mov	r7, r0
+	beq	.L1781
+.L1855:
+	mov	r8, r7
+.L1847:
+	ldr	r3, .L1865
+	movw	r2, #3844
+	mov	r5, #0
+	str	r4, [sp, #32]
+	movw	ip, #65535
+	ldrh	r9, [r3, r2]
+	ldr	r2, .L1865+4
+	ldr	sl, [r2, #-976]
+	ldr	r6, [r2, #-1172]
+	movw	r2, #3924
+	ldrh	lr, [r3, r2]
+	mov	r2, r4
+	mov	r3, r5
+	b	.L1783
+.L1781:
+	mov	r3, #0
+	strh	r3, [r4, #2]	@ movhi
+	mov	r2, r3	@ movhi
+.L1862:
+	strb	r2, [r4, #6]
+	b	.L1776
+.L1785:
+	ldrh	r0, [r2, #16]
+	cmp	r0, ip
+	beq	.L1784
+	mov	fp, #36
+	orr	r0, r8, r0, asl #10
+	mla	r1, fp, r5, sl
+	str	r0, [r1, #4]
+	mov	r0, #0
+	str	r0, [r1, #8]
+	mul	r0, lr, r5
+	add	r5, r5, #1
+	uxth	r5, r5
+	add	fp, r0, #3
+	cmp	r0, #0
+	movlt	r0, fp
+	bic	r0, r0, #3
+	add	r0, r6, r0
+	str	r0, [r1, #12]
+.L1784:
+	add	r3, r3, #1
+	add	r2, r2, #2
+	uxth	r3, r3
+.L1783:
+	cmp	r3, r9
+	bne	.L1785
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	movne	r3, #0
+	bne	.L1856
+	ldr	r3, .L1865
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	adds	r3, r3, #0
+	movne	r3, #1
+.L1856:
+	ldr	r6, .L1865+4
+	mov	r1, r5
+	str	r3, [sp, #20]
+	mov	sl, #0
+	ldr	r2, [sp, #20]
+	ldr	r0, [r6, #-976]
+	bl	FlashReadPages
+	ldr	fp, [r6, #-1804]
+	movw	ip, #65535
+	str	ip, [sp, #4]
+	str	fp, [sp, #8]
+	b	.L1787
+.L1792:
+	mov	lr, #36
+	ldr	r1, [r6, #-976]
+	mul	r2, lr, sl
+	add	r3, r1, r2
+	ldr	r2, [r1, r2]
+	cmp	r2, #0
+	bne	.L1788
+	ldr	r3, [r3, #12]
+	ldr	fp, [r3, #4]
+	cmn	fp, #1
+	beq	.L1789
+	ldr	r1, [r6, #-1804]
+	mov	r0, fp
+	str	r3, [sp, #0]
+	bl	ftl_cmp_data_ver
+	ldr	r3, [sp, #0]
+	cmp	r0, #0
+	addne	fp, fp, #1
+	strne	fp, [r6, #-1804]
+.L1789:
+	ldr	r3, [r3, #0]
+	cmn	r3, #1
+	bne	.L1791
+	b	.L1790
+.L1788:
+	ldr	r1, [r3, #4]
+	movw	fp, #290
+	ldr	r0, .L1865+8
+	bl	printk
+	ldrh	r3, [r4, #0]
+	uxth	r2, r8
+	str	r2, [sp, #4]
+	strh	r3, [r6, fp]	@ movhi
+.L1791:
+	add	sl, sl, #1
+.L1787:
+	uxth	r9, sl
+	cmp	r9, r5
+	bcc	.L1792
+.L1790:
+	ldr	r3, .L1865+4
+	cmp	r9, r5
+	addeq	r7, r7, #1
+	uxthne	r7, r7
+	movne	r2, #36
+	ldrne	r3, [r3, #-976]
+	uxtheq	r7, r7
+	ldreq	r3, [r3, #-976]
+	mlane	r9, r2, r9, r3
+	ldreq	r0, [r3, #4]
+	ldrne	r0, [r9, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_plane
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	ldr	r3, .L1865
+	cmp	r2, #1
+	str	r0, [sp, #16]
+	bne	.L1795
+	ldrb	r1, [r3, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	addeq	r7, r3, r7, asl #1
+	movweq	r1, #3076
+	ldreqh	r7, [r7, r1]
+.L1795:
+	movw	r1, #3912
+	ldr	ip, [sp, #12]
+	ldrh	r3, [r3, r1]
+	ldr	fp, [sp, #24]
+	cmp	r3, r7
+	streqh	r7, [r4, #2]	@ movhi
+	moveq	r3, #0
+	streqb	r3, [r4, #6]
+	streqh	r3, [r4, #4]	@ movhi
+	ldr	r3, [sp, #16]
+	cmp	r7, ip
+	cmpeq	r3, fp
+	beq	.L1863
+.L1797:
+	ldr	fp, [sp, #4]
+	movw	r3, #65535
+	ldr	ip, [sp, #8]
+	cmp	fp, r3
+	sub	r6, ip, #1
+	bne	.L1798
+	cmp	r2, #0
+	bne	.L1799
+.L1798:
+	ldr	r2, .L1865+4
+	uxth	r3, r8
+	ldr	ip, [sp, #12]
+	mvn	fp, #0
+	mov	sl, r3
+	mov	r9, fp
+	ldr	r1, [r2, #-1012]
+	ldr	r8, .L1865+4
+	cmn	r1, #1
+	streq	r6, [r2, #-1012]
+	ldr	r2, [r2, #-1012]
+	str	r2, [sp, #4]
+	add	r2, ip, #7
+	cmp	r3, r2
+	subgt	r5, r3, #7
+	mov	r3, r7
+	ldrle	r5, [sp, #12]
+	mov	r7, r6
+	uxthgt	r5, r5
+	b	.L1802
+.L1804:
+	ldrh	r0, [r1, #16]
+	movw	lr, #65535
+	cmp	r0, lr
+	beq	.L1803
+	ldr	ip, [sp, #8]
+	mov	r3, #36
+	orr	r0, r5, r0, asl #10
+	mla	lr, r3, r6, ip
+	add	r6, r6, #1
+	uxth	r6, r6
+	str	r0, [lr, #4]
+.L1803:
+	add	r2, r2, #1
+	add	r1, r1, #2
+	uxth	r2, r2
+.L1815:
+	ldr	lr, [sp, #36]
+	cmp	r2, lr
+	bne	.L1804
+	ldr	r3, [sp, #28]
+	mov	r1, r6
+	ldr	r0, [r8, #-976]
+	ldr	r2, [sp, #20]
+	str	r3, [sp, #0]
+	bl	FlashReadPages
+	ldr	r2, .L1865
+	add	r0, r8, r5, asl #1
+	mov	r1, #0
+	str	r0, [sp, #8]
+	ldr	r3, [sp, #0]
+	ldrb	ip, [r2, #928]	@ zero_extendqisi2
+	ldr	r2, [r8, #-976]
+	str	ip, [sp, #28]
+	b	.L1805
+.L1813:
+	ldr	r0, [r2, #0]
+	cmp	r0, #0
+	bne	.L1806
+	ldr	r0, [r2, #12]
+	movw	ip, #65535
+	ldrh	lr, [r0, #0]
+	cmp	lr, ip
+	beq	.L1807
+	ldr	r0, [r0, #4]
+	cmn	r0, #1
+	beq	.L1807
+	cmn	fp, #1
+	ldr	r9, [r8, #-1012]
+	str	r0, [r8, #-1012]
+	bne	.L1807
+	ldr	lr, [sp, #8]
+	sub	r0, lr, #896
+	ldrh	r0, [r0, #0]
+	cmp	r0, ip
+	bne	.L1808
+	ldr	r0, [sp, #28]
+	cmp	r0, #0
+	beq	.L1807
+.L1808:
+	cmp	r9, r7
+	mvneq	fp, #0
+	movne	fp, r9
+	b	.L1807
+.L1806:
+	mov	r6, r7
+	ldrh	r1, [r4, #0]
+	mov	r7, r3
+	ldr	r3, .L1865+4
+	movw	r2, #290
+	strh	r1, [r3, r2]	@ movhi
+	ldrb	r2, [r4, #8]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L1799
+	add	r5, r3, r5, asl #1
+	movw	r2, #65535
+	sub	r5, r5, #896
+	ldrh	r1, [r5, #0]
+	cmp	r1, r2
+	bne	.L1809
+	cmn	fp, #1
+	bne	.L1858
+.L1810:
+	ldr	fp, [sp, #4]
+	cmp	fp, r6
+	beq	.L1811
+.L1858:
+	str	fp, [r3, #-1012]
+	b	.L1799
+.L1811:
+	ldr	r2, [r3, #-1012]
+	b	.L1864
+.L1809:
+	cmp	r9, r6
+	beq	.L1812
+	cmn	r9, #1
+	strne	r9, [r3, #-1012]
+	b	.L1799
+.L1812:
+	ldr	r2, [r3, #-1012]
+	cmp	r2, r6
+	beq	.L1799
+.L1864:
+	sub	r2, r2, #1
+	b	.L1859
+.L1807:
+	add	r1, r1, #1
+	add	r2, r2, #36
+	uxth	r1, r1
+.L1805:
+	cmp	r1, r6
+	bne	.L1813
+	add	r5, r5, #1
+	uxth	r5, r5
+.L1802:
+	cmp	r5, sl
+	bhi	.L1814
+	ldr	r1, .L1865
+	movw	r2, #3844
+	ldr	lr, [r8, #-976]
+	mov	r6, #0
+	str	r3, [sp, #28]
+	ldrh	ip, [r1, r2]
+	mov	r1, r4
+	str	lr, [sp, #8]
+	mov	r2, r6
+	str	ip, [sp, #36]
+	b	.L1815
+.L1814:
+	mov	r6, r7
+	mov	r7, r3
+	ldr	r3, .L1865+4
+	mvn	r2, #0
+.L1859:
+	str	r2, [r3, #-1012]
+.L1799:
+	ldr	r5, .L1865+4
+	mov	r3, #292
+	mov	r2, #1
+	ldr	r0, .L1865+12
+	strh	r2, [r5, r3]	@ movhi
+	bl	FtlMapBlkWriteDumpData
+	ldr	r8, [sp, #12]
+	str	r7, [sp, #8]
+.L1816:
+	ldr	r3, .L1865
+	movw	r2, #3844
+	mov	r7, #0
+	ldr	lr, [r5, #-976]
+	mov	fp, #36
+	ldrh	sl, [r3, r2]
+	mov	r2, r4
+	ldrb	ip, [r3, #928]	@ zero_extendqisi2
+	mov	r3, r7
+	b	.L1817
+.L1820:
+	ldrh	r0, [r2, #16]
+	movw	r1, #65535
+	cmp	r0, r1
+	beq	.L1818
+	mla	r1, fp, r7, lr
+	orr	r0, r8, r0, asl #10
+	str	r0, [r1, #4]
+	ldrb	r9, [r4, #8]	@ zero_extendqisi2
+	cmp	r9, #1
+	bne	.L1819
+	cmp	ip, #0
+	orrne	r0, r0, #-2147483648
+	strne	r0, [r1, #4]
+.L1819:
+	add	r7, r7, #1
+	uxth	r7, r7
+.L1818:
+	add	r3, r3, #1
+	add	r2, r2, #2
+	uxth	r3, r3
+.L1817:
+	cmp	r3, sl
+	bne	.L1820
+	mov	r1, r7
+	ldr	r0, [r5, #-976]
+	ldr	r2, [sp, #20]
+	bl	FlashReadPages
+	mov	r3, #36
+	mul	r3, r3, r7
+	mov	r7, #0
+	str	r3, [sp, #36]
+	b	.L1821
+.L1842:
+	ldr	r9, [r5, #-976]
+	add	r9, r9, r7
+	ldr	sl, [r9, #4]
+	ubfx	r0, sl, #10, #16
+	str	sl, [sp, #52]
+	bl	P2V_plane
+	ldr	r3, [sp, #12]
+	cmp	r8, r3
+	bcc	.L1822
+	ldr	fp, [sp, #24]
+	mov	ip, r3
+	cmp	r0, fp
+	movcs	r3, #0
+	movcc	r3, #1
+	cmp	r8, ip
+	movne	r3, #0
+	cmp	r3, #0
+	bne	.L1822
+	ldr	r3, [sp, #16]
+	ldr	ip, [sp, #8]
+	cmp	r0, r3
+	cmpeq	r8, ip
+	beq	.L1854
+	ldr	r3, [r9, #0]
+	cmn	r3, #1
+	beq	.L1824
+	ldr	sl, [r9, #12]
+	movw	r3, #61589
+	ldrh	r2, [sl, #0]
+	cmp	r2, r3
+	bne	.L1831
+.L1825:
+	ldr	r6, [sl, #4]
+	cmn	r6, #1
+	beq	.L1826
+	ldr	r1, [r5, #-1804]
+	mov	r0, r6
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	addne	r3, r6, #1
+	strne	r3, [r5, #-1804]
+.L1826:
+	ldr	r9, [sl, #8]
+	add	r1, sp, #48
+	ldr	r3, [sl, #12]
+	mov	r2, #0
+	mov	r0, r9
+	str	r3, [sp, #44]
+	bl	log2phys
+	ldr	r1, [r5, #-1012]
+	cmn	r1, #1
+	beq	.L1827
+	mov	r0, r6
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1827
+	ldr	r3, [sp, #44]
+	cmn	r3, #1
+	beq	.L1828
+	ldr	r0, [r5, #-976]
+	mov	r1, #1
+	mov	r2, #0
+	add	r0, r0, r7
+	ldr	fp, [r0, #12]
+	str	r3, [r0, #4]
+	str	fp, [sp, #4]
+	bl	FlashReadPages
+	ldr	r3, [r5, #-976]
+	ldr	ip, [fp, #4]
+	add	fp, r3, r7
+	ldr	r3, [r3, r7]
+	str	ip, [sp, #28]
+	cmn	r3, #1
+	bne	.L1829
+	b	.L1830
+.L1828:
+	ldr	r3, [sp, #52]
+	ldr	r2, [sp, #48]
+	cmp	r2, r3
+	bne	.L1831
+	mov	r0, r9
+	add	r1, sp, #44
+	mov	r2, #1
+	bl	log2phys
+.L1831:
+	ldrh	r0, [r4, #0]
+	b	.L1861
+.L1829:
+	ldr	r3, [sp, #4]
+	ldr	sl, [r3, #8]
+	cmp	sl, r9
+	bne	.L1830
+	ldr	r0, [r5, #-1012]
+	ldr	r1, [sp, #28]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1830
+	ldr	r3, [sp, #48]
+	ldr	r2, [sp, #52]
+	cmp	r3, r2
+	beq	.L1835
+.L1832:
+	ldr	r2, [sp, #44]
+	cmp	r3, r2
+	beq	.L1830
+	cmn	r3, #1
+	streq	r3, [fp, #0]
+	beq	.L1834
+	ldr	ip, [fp, #12]
+	mov	r0, fp
+	str	r3, [fp, #4]
+	mov	r1, #1
+	mov	r2, #0
+	str	ip, [sp, #4]
+	bl	FlashReadPages
+.L1834:
+	ldr	r3, [r5, #-976]
+	ldr	r3, [r3, r7]
+	cmn	r3, #1
+	beq	.L1835
+	ldr	r3, [sp, #4]
+	ldr	r0, [r5, #-1012]
+	ldr	r9, [r3, #4]
+	mov	r1, r9
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1835
+	ldr	r0, [sp, #28]
+	mov	r1, r9
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L1830
+.L1835:
+	mov	r0, sl
+	ldr	r1, [sp, #44]
+	bl	FtlReUsePrevPpa
+.L1830:
+	ldrh	r0, [r4, #0]
+	mvn	r3, #0
+	str	r3, [sp, #44]
+	bl	decrement_vpc_count
+	b	.L1837
+.L1827:
+	ldr	r3, [sp, #52]
+	ldr	r2, [sp, #48]
+	cmp	r2, r3
+	beq	.L1837
+	mov	r0, r9
+	add	r1, sp, #52
+	mov	r2, #1
+	bl	log2phys
+	ldr	fp, [sp, #48]
+	cmn	fp, #1
+	beq	.L1837
+	ldr	r3, [sp, #44]
+	cmp	fp, r3
+	beq	.L1837
+	ubfx	r0, fp, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, .L1865+16
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	beq	.L1838
+	ldr	r3, .L1865+20
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	beq	.L1838
+	ldr	r3, .L1865+24
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	bne	.L1837
+.L1838:
+	ldr	ip, .L1865+4
+	mov	r1, #1
+	mov	r2, #0
+	ldr	r0, [ip, #-976]
+	str	fp, [r0, #4]
+	ldr	sl, [r0, #12]
+	bl	FlashReadPages
+	ldr	r0, .L1865+4
+	ldr	r1, [sl, #4]
+	ldr	r3, [r0, #-976]
+	ldr	r3, [r3, #0]
+	cmn	r3, #1
+	beq	.L1837
+	mov	r0, r6
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	bne	.L1837
+	mov	r0, r9
+	add	r1, sp, #48
+	mov	r2, #1
+	bl	log2phys
+.L1837:
+	ldr	r0, [sp, #44]
+	cmn	r0, #1
+	beq	.L1822
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r5, #-2020]
+	mov	r3, r0, asl #1
+	mov	r1, r0
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1839
+.L1861:
+	bl	decrement_vpc_count
+	b	.L1822
+.L1839:
+	ldr	r0, .L1865+28
+	bl	printk
+	b	.L1822
+.L1824:
+	ldrh	r3, [r4, #0]
+	movw	r1, #290
+	mov	r2, r6
+	ldr	r0, .L1865+32
+	strh	r3, [r5, r1]	@ movhi
+	mov	r1, sl
+	bl	printk
+	ldr	r3, [r5, #296]
+	cmp	r3, #31
+	addls	r2, r5, r3, asl #2
+	addls	r3, r3, #1
+	ldrls	r1, [sp, #52]
+	strls	r3, [r5, #296]
+	strls	r1, [r2, #300]
+	ldrh	r0, [r4, #0]
+	bl	decrement_vpc_count
+	ldr	r3, [r5, #-1012]
+	cmn	r3, #1
+	beq	.L1860
+.L1841:
+	cmp	r3, r6
+	bls	.L1822
+.L1860:
+	str	r6, [r5, #-1012]
+.L1822:
+	add	r7, r7, #36
+.L1821:
+	ldr	r3, [sp, #36]
+	cmp	r7, r3
+	bne	.L1842
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	add	r8, r8, #1
+	cmp	r3, #1
+	uxth	r8, r8
+	bne	.L1843
+	ldr	r3, .L1865
+	ldrb	r2, [r3, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L1843
+	movw	r2, #3914
+	ldr	ip, [sp, #8]
+	ldrh	r3, [r3, r2]
+	cmp	ip, r8
+	cmpeq	r3, r8
+	beq	.L1854
+.L1843:
+	ldr	r3, .L1865
+	movw	r2, #3912
+	ldrh	r2, [r3, r2]
+	cmp	r8, r2
+	bne	.L1816
+	mov	r2, #0
+	movw	r1, #3844
+	strh	r2, [r4, #4]	@ movhi
+	ldrh	r1, [r3, r1]
+	mov	r3, r2
+	strh	r8, [r4, #2]	@ movhi
+	movw	r2, #65535
+	ldr	r0, [sp, #32]
+	b	.L1844
+.L1846:
+	add	r0, r0, #2
+	ldrh	ip, [r0, #14]
+	cmp	ip, r2
+	strneb	r3, [r4, #6]
+	bne	.L1776
+.L1845:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L1844:
+	cmp	r3, r1
+	bne	.L1846
+	b	.L1776
+.L1854:
+.L1823:
+	ldr	r7, [sp, #8]
+	ldr	r3, [sp, #16]
+	strh	r7, [r4, #2]	@ movhi
+	strb	r3, [r4, #6]
+.L1863:
+	mov	r0, r4
+	mov	r1, r7
+	mov	r2, r3
+	bl	ftl_sb_update_avl_pages
+.L1776:
+	mov	r0, #0
+	add	sp, sp, #60
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L1866:
+	.align	2
+.L1865:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC125
+	.word	.LANCHOR2-1092
+	.word	-2000
+	.word	-1952
+	.word	-1904
+	.word	.LC126
+	.word	.LC127
+	.fnend
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.align	2
+	.global	FtlWriteDumpData
+	.type	FtlWriteDumpData, %function
+FtlWriteDumpData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #40
+	sub	sp, sp, #40
+	ldr	r4, .L1876
+	ldr	r3, [r4, #-2092]
+	mov	r2, r4
+	cmp	r3, #0
+	bne	.L1867
+	ldr	r3, .L1876+4
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	beq	.L1869
+	ldrb	r1, [r4, #-1992]	@ zero_extendqisi2
+	cmp	r1, #0
+	bne	.L1869
+	ldr	r5, .L1876+8
+	movw	r0, #3912
+	ldrb	r1, [r4, #-1993]	@ zero_extendqisi2
+	ldrh	r0, [r5, r0]
+	mul	r1, r0, r1
+	cmp	r3, r1
+	beq	.L1869
+	ldrb	r8, [r4, #-1990]	@ zero_extendqisi2
+	movw	r3, #3844
+	ldr	r7, [r5, #3972]
+	cmp	r8, #0
+	ldrh	r6, [r5, r3]
+	bne	.L1867
+	sub	r7, r7, #1
+	mov	r1, sp
+	mov	r2, r8
+	mov	r0, r7
+	bl	log2phys
+	ldr	r3, [sp, #0]
+	ldr	r0, [r4, #-964]
+	ldr	r4, [r4, #-940]
+	cmn	r3, #1
+	str	r3, [sp, #8]
+	str	r7, [sp, #20]
+	str	r0, [sp, #12]
+	str	r4, [sp, #16]
+	str	r8, [r4, #4]
+	beq	.L1870
+	add	r0, sp, #4
+	mov	r1, #1
+	mov	r2, r8
+	bl	FlashReadPages
+	b	.L1871
+.L1870:
+	movw	r3, #3922
+	mov	r1, #255
+	ldrh	r2, [r5, r3]
+	bl	ftl_memset
+.L1871:
+	ldr	r3, .L1876+12
+	mov	r6, r6, asl #2
+	ldr	r5, .L1876
+	ldr	r8, .L1876+4
+	strh	r3, [r4, #0]	@ movhi
+	b	.L1872
+.L1875:
+	ldrh	r3, [r5, r8]
+	cmp	r3, #0
+	beq	.L1873
+	ldr	r3, [sp, #8]
+	sub	r0, r0, #2000
+	str	r7, [r4, #8]
+	sub	r6, r6, #1
+	str	r3, [r4, #12]
+	ldr	r3, .L1876+16
+	ldrh	r3, [r5, r3]
+	strh	r3, [r4, #2]	@ movhi
+	bl	get_new_active_ppa
+	ldr	r3, [r5, #-1804]
+	mov	r2, #0
+	mov	r1, #1
+	str	r0, [sp, #8]
+	add	r0, sp, #4
+	str	r3, [r4, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	str	r3, [r5, #-1804]
+	moveq	r3, #0
+	streq	r3, [r5, #-1804]
+	mov	r3, r2
+	bl	FlashProgPages
+	ldr	r3, .L1876+16
+	ldrh	r0, [r5, r3]
+	bl	decrement_vpc_count
+.L1872:
+	cmp	r6, #0
+	ldr	r0, .L1876
+	bne	.L1875
+.L1873:
+	mov	r3, #1
+	strb	r3, [r0, #-1990]
+	b	.L1867
+.L1869:
+	mov	r3, #0
+	strb	r3, [r2, #-1990]
+.L1867:
+	add	sp, sp, #40
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L1877:
+	.align	2
+.L1876:
+	.word	.LANCHOR2
+	.word	-1996
+	.word	.LANCHOR0
+	.word	-3947
+	.word	-2000
+	.fnend
+	.size	FtlWriteDumpData, .-FtlWriteDumpData
+	.align	2
+	.global	l2p_flush
+	.type	l2p_flush, %function
+l2p_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	bl	FtlWriteDumpData
+	mov	r4, #0
+	ldr	r7, .L1882
+	movw	r6, #3950
+	ldr	r5, .L1882+4
+	b	.L1879
+.L1881:
+	ldr	r3, [r5, #-1856]
+	mov	r2, #12
+	mla	r3, r2, r4, r3
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L1880
+	mov	r0, r4
+	bl	flush_l2p_region
+.L1880:
+	add	r4, r4, #1
+	uxth	r4, r4
+.L1879:
+	ldrh	r3, [r7, r6]
+	cmp	r3, r4
+	bhi	.L1881
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L1883:
+	.align	2
+.L1882:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	FtlVpcCheckAndModify
+	.type	FtlVpcCheckAndModify, %function
+FtlVpcCheckAndModify:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, lr}
+	mov	r4, #0
+	ldr	r6, .L1891
+	ldr	r1, .L1891+4
+	ldr	r0, .L1891+8
+	bl	printk
+	movw	r3, #3854
+	ldrh	r2, [r6, r3]
+	mov	r1, #0
+	ldr	r5, .L1891+12
+	mov	r2, r2, asl #1
+	ldr	r0, [r5, #-920]
+	bl	ftl_memset
+	b	.L1885
+.L1887:
+	mov	r0, r4
+	add	r1, sp, #4
+	mov	r2, #0
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	cmn	r0, #1
+	beq	.L1886
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, [r5, #-920]
+	mov	r0, r0, asl #1
+	ldrh	r2, [r3, r0]
+	add	r2, r2, #1
+	strh	r2, [r3, r0]	@ movhi
+.L1886:
+	add	r4, r4, #1
+.L1885:
+	ldr	r3, [r6, #3972]
+	cmp	r4, r3
+	bcc	.L1887
+	mov	r4, #0
+	ldr	r7, .L1891
+	movw	r8, #3852
+	ldr	r5, .L1891+12
+	b	.L1888
+.L1890:
+	ldr	r3, [r5, #-2020]
+	mov	r6, r4, asl #1
+	ldrh	r2, [r3, r6]
+	ldr	r3, [r5, #-920]
+	ldrh	r3, [r3, r6]
+	cmp	r2, r3
+	beq	.L1889
+	movw	r1, #65535
+	cmp	r2, r1
+	beq	.L1889
+	ldr	r0, .L1891+16
+	mov	r1, r4
+	bl	printk
+	ldr	r3, .L1891+20
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L1889
+	ldr	r3, .L1891+24
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L1889
+	ldr	r3, .L1891+28
+	ldrh	r3, [r5, r3]
+	cmp	r3, r4
+	beq	.L1889
+	ldr	r3, [r5, #-920]
+	mov	r0, r4
+	ldrh	r2, [r3, r6]
+	ldr	r3, [r5, #-2020]
+	strh	r2, [r3, r6]	@ movhi
+	bl	update_vpc_list
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L1889:
+	add	r4, r4, #1
+	uxth	r4, r4
+.L1888:
+	ldrh	r3, [r7, r8]
+	cmp	r3, r4
+	bhi	.L1890
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
+.L1892:
+	.align	2
+.L1891:
+	.word	.LANCHOR0
+	.word	.LANCHOR3+15
+	.word	.LC128
+	.word	.LANCHOR2
+	.word	.LC129
+	.word	-2000
+	.word	-1904
+	.word	-1952
+	.fnend
+	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.align	2
+	.global	allocate_new_data_superblock
+	.type	allocate_new_data_superblock, %function
+allocate_new_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1905
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	ldr	r2, [r3, #-2092]
+	ldrh	r5, [r0, #0]
+	cmp	r2, #0
+	bne	.L1894
+	movw	r2, #65535
+	cmp	r5, r2
+	beq	.L1895
+	ldr	r2, [r3, #-2020]
+	mov	r3, r5, asl #1
+	mov	r0, r5
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1896
+	bl	INSERT_DATA_LIST
+	b	.L1895
+.L1896:
+	bl	INSERT_FREE_LIST
+.L1895:
+	mov	r3, #0
+	strb	r3, [r4, #8]
+	ldr	r3, .L1905
+	sub	r2, r3, #1952
+	cmp	r4, r2
+	beq	.L1897
+	ldr	r1, .L1905+4
+	movw	r2, #3864
+	ldrh	r2, [r1, r2]
+	cmp	r2, #1
+	beq	.L1897
+	ldrb	r1, [r1, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L1898
+.L1897:
+	mov	r3, #1
+	strb	r3, [r4, #8]
+	b	.L1899
+.L1898:
+	sub	r1, r3, #2000
+	cmp	r4, r1
+	bne	.L1899
+	cmp	r2, #3
+	beq	.L1900
+	ldr	r2, [r3, #-1716]
+	cmp	r2, #1
+	bne	.L1901
+.L1900:
+	mov	r2, #1
+	strb	r2, [r3, #-1992]
+.L1901:
+	ldr	r2, .L1905+4
+	ldr	r2, [r2, #3836]
+	cmp	r2, #0
+	beq	.L1899
+	ldr	r3, [r3, #-1784]
+	cmp	r3, #29
+	ldrls	r3, .L1905
+	movls	r2, #1
+	strlsb	r2, [r3, #-1992]
+.L1899:
+	ldr	r3, .L1905+8
+	ldr	r6, .L1905
+	ldrh	r0, [r6, r3]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L1902
+	cmp	r5, r0
+	bne	.L1903
+	ldr	r2, [r6, #-2020]
+	mov	r3, r0, asl #1
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L1904
+.L1903:
+	bl	update_vpc_list
+.L1904:
+	ldr	r3, .L1905+8
+	mvn	r2, #0
+	strh	r2, [r6, r3]	@ movhi
+.L1902:
+	mov	r0, r4
+	bl	allocate_data_superblock
+	bl	l2p_flush
+	mov	r0, #0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L1894:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L1906:
+	.align	2
+.L1905:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	-1024
+	.fnend
+	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.align	2
+	.type	ftl_do_gc.part.21, %function
+ftl_do_gc.part.21:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2004
+	movw	ip, #65535
+	ldr	r2, .L2004+4
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	mov	sl, r1
+	str	r0, [sp, #16]
+	ldrh	r0, [r3, r2]
+	cmp	r0, ip
+	beq	.L1908
+	ldr	r1, .L2004+8
+	ldrh	r4, [r3, r1]
+	cmp	r4, ip
+	streqh	r0, [r3, r1]	@ movhi
+	mvneq	r1, #0
+	streqh	r1, [r3, r2]	@ movhi
+.L1908:
+	ldr	r1, [sp, #16]
+	ldr	r2, [r3, #-1196]
+	cmp	r1, #1
+	add	r2, r2, #1
+	add	r2, r2, r1, asl #7
+	str	r2, [r3, #-1196]
+	bne	.L1909
+	ldr	r3, .L2004+12
+	ldr	r1, [r3, #3836]
+	cmp	r1, #0
+	bne	.L1910
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1909
+.L1910:
+	ldr	r4, .L2004
+	ldr	r3, [r4, #-1784]
+	cmp	r3, #29
+	bhi	.L1909
+	mov	r3, #428
+	ldrh	r3, [r4, r3]
+	add	r2, r2, r3
+	str	r2, [r4, #-1196]
+	bl	FtlGcReFreshBadBlk
+	ldr	r3, .L2004+16
+	movw	r2, #65535
+	ldrh	r3, [r4, r3]
+	cmp	r3, r2
+	bne	.L1909
+	ldr	r2, .L2004+8
+	ldrh	r2, [r4, r2]
+	cmp	r2, r3
+	bne	.L1909
+	ldr	r3, [r4, #-1196]
+	cmp	r3, #1024
+	bhi	.L1911
+	ldr	r3, .L2004+20
+	ldrh	r3, [r4, r3]
+	cmp	r3, #63
+	bhi	.L1909
+.L1911:
+	ldr	r3, .L2004
+	mov	r2, #428
+	ldr	r0, .L2004+20
+	mov	r1, #0
+	strh	r1, [r3, r2]	@ movhi
+	ldrh	ip, [r3, r0]
+	ldr	r0, .L2004+24
+	ldrh	r0, [r3, r0]
+	add	r0, r0, #64
+	cmp	ip, r0
+	bgt	.L1909
+	str	r1, [r3, #-1196]
+	ldr	r1, [r3, #-1784]
+	cmp	r1, #0
+	moveq	r1, #6
+	beq	.L2000
+	cmp	r1, #5
+	bhi	.L1913
+	mov	r1, #18
+.L2000:
+	strh	r1, [r3, r2]	@ movhi
+.L1913:
+	mov	r0, #32
+	movw	r7, #65535
+	bl	List_get_gc_head_node
+	uxth	r2, r0
+	cmp	r2, r7
+	beq	.L1914
+	ldr	r5, .L2004
+	ldr	r6, .L2004+28
+	ldrh	r0, [r5, r6]
+	cmp	r0, #0
+	moveq	r3, #1
+	streqh	r3, [r5, r6]	@ movhi
+	beq	.L1914
+	ldr	r3, .L2004+12
+	movw	ip, #3914
+	movw	lr, #3844
+	ldr	r9, [r5, #-2020]
+	mov	r2, r2, asl #1
+	ldrh	ip, [r3, ip]
+	ldrh	r3, [r3, lr]
+	ldrh	r1, [r9, r2]
+	mul	r3, r3, ip
+	add	r3, r3, #1
+	cmp	r1, r3
+	bgt	.L1914
+	add	fp, r0, #1
+	mov	r8, #0
+	str	r8, [r5, #-1188]
+	uxth	fp, fp
+	strh	fp, [r5, r6]	@ movhi
+	str	r2, [sp, #8]
+	bl	List_get_gc_head_node
+	ldr	r2, [sp, #8]
+	uxth	r4, r0
+	cmp	r4, r7
+	beq	.L1914
+	ldrh	r2, [r9, r2]
+	mov	r7, r4, asl #1
+	ldr	r0, .L2004+32
+	mov	r1, fp
+	ldrh	r3, [r9, r7]
+	str	r2, [sp, #0]
+	mov	r2, r4
+	bl	printk
+	ldrh	r3, [r5, r6]
+	cmp	r3, #40
+	bls	.L1916
+	ldr	r3, [r5, #-2020]
+	ldrh	r3, [r3, r7]
+	cmp	r3, #32
+	strhih	r8, [r5, r6]	@ movhi
+.L1916:
+	ldr	r2, .L2004
+	mov	r3, #428
+	mov	r1, #6
+	strh	r1, [r2, r3]	@ movhi
+	b	.L1918
+.L1914:
+	bl	GetSwlReplaceBlock
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r4, r0
+	bne	.L1918
+	ldr	r2, .L2004
+	mov	r3, #428
+	mov	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+.L1909:
+	ldr	r5, .L2004
+	movw	r4, #65535
+	ldr	r3, .L2004+16
+	ldrh	r2, [r5, r3]
+	cmp	r2, r4
+	bne	.L1918
+	ldr	r3, .L2004+36
+	ldrh	r3, [r5, r3]
+	cmp	r3, r2
+	movne	r4, r2
+	bne	.L1918
+	ldr	r2, .L2004+8
+	ldrh	r7, [r5, r2]
+	cmp	r7, r3
+	movne	r4, r3
+	bne	.L1918
+	ldr	r8, .L2004+20
+	ldr	r2, [r5, #-1196]
+	ldrh	r3, [r5, r8]
+	cmp	r3, #23
+	movhi	r3, #1024
+	movls	r3, #5120
+	cmp	r2, r3
+	movls	r4, r7
+	bls	.L1918
+	mov	r2, #428
+	mov	r3, #0
+	str	r3, [r5, #-1196]
+	mov	r6, r5
+	strh	r3, [r5, r2]	@ movhi
+	bl	GetSwlReplaceBlock
+	cmp	r0, r7
+	mov	r4, r0
+	bne	.L1920
+	ldr	r3, .L2004+24
+	ldrh	r1, [r5, r8]
+	ldrh	r2, [r5, r3]
+	cmp	r1, r2
+	movcs	r2, #80
+	strcsh	r2, [r5, r3]	@ movhi
+	bcs	.L1930
+	mov	r0, #64
+	bl	List_get_gc_head_node
+	uxth	r3, r0
+	cmp	r3, r4
+	beq	.L1930
+	ldr	r2, [r5, #-1004]
+	cmp	r2, #0
+	bne	.L1923
+	ldr	r2, .L2004+12
+	movw	r1, #3864
+	ldrh	r1, [r2, r1]
+	cmp	r1, #3
+	beq	.L1923
+	ldr	r1, [r5, #-1716]
+	cmp	r1, #0
+	bne	.L1923
+	ldr	r1, [r2, #3836]
+	cmp	r1, #0
+	bne	.L1923
+	ldrb	r0, [r2, #928]	@ zero_extendqisi2
+	cmp	r0, #0
+	beq	.L1924
+.L1923:
+	ldr	r1, .L2004
+	mov	r3, r3, asl #1
+	movw	ip, #3844
+	movw	lr, #3864
+	ldr	r2, [r1, #-2020]
+	ldrh	r0, [r2, r3]
+	movw	r2, #3914
+	ldr	r3, .L2004+12
+	ldrh	r2, [r3, r2]
+	ldrh	ip, [r3, ip]
+	ldrh	r3, [r3, lr]
+	mul	ip, ip, r2
+	cmp	r3, #3
+	moveq	r3, r2, lsr #1
+	movne	r3, #0
+	add	r3, ip, r3
+	cmp	r0, r3
+	bgt	.L1926
+	mov	r0, #0
+	bl	List_get_gc_head_node
+	ldr	r2, .L2004+12
+	ldr	r3, .L2004
+	ldr	r2, [r2, #3972]
+	ldr	r1, [r3, #-1848]
+	add	r2, r2, r2, asl #1
+	cmp	r1, r2, lsr #2
+	ldr	r2, .L2004+24
+	movhi	r1, #128
+	movls	r1, #160
+	strh	r1, [r3, r2]	@ movhi
+	uxth	r4, r0
+	b	.L1928
+.L1926:
+	ldr	r3, .L2004+24
+	mov	r2, #128
+	strh	r2, [r1, r3]	@ movhi
+	b	.L1930
+.L1924:
+	ldr	r2, [r5, #-2020]
+	mov	r3, r3, asl #1
+	ldr	r6, .L2004
+	ldr	r5, .L2004+24
+	ldrh	r3, [r2, r3]
+	cmp	r3, #7
+	movhi	r3, #64
+	strhih	r3, [r6, r5]	@ movhi
+	bhi	.L1930
+	bl	List_get_gc_head_node
+	mov	r3, #128
+	strh	r3, [r6, r5]	@ movhi
+	uxth	r4, r0
+.L1928:
+	movw	r3, #65535
+	cmp	r4, r3
+	beq	.L1930
+.L1920:
+	ldr	r1, .L2004
+	mov	r0, r4, asl #1
+	ldr	r3, .L2004+20
+	ldr	ip, [r1, #-2084]
+	ldrh	r2, [r1, r3]
+	ldr	r3, [r1, #-2020]
+	ldrh	r3, [r3, r0]
+	ldrh	r0, [ip, r0]
+	str	r0, [sp, #0]
+	ldr	r0, .L2004+40
+	ldrh	r1, [r1, r0]
+	ldr	r0, .L2004+44
+	str	r1, [sp, #4]
+	mov	r1, r4
+	bl	printk
+.L1930:
+	bl	FtlGcReFreshBadBlk
+.L1918:
+	movw	r0, #65535
+	rsb	ip, r0, r4
+	rsbs	r1, ip, #0
+	ldr	r3, [sp, #16]
+	adc	r1, r1, ip
+	ldr	r5, .L2004
+	cmp	r3, #0
+	movne	r2, #0
+	andeq	r2, r1, #1
+	cmp	r2, #0
+	beq	.L1931
+	ldr	r3, .L2004+20
+	ldrh	r2, [r5, r3]
+	cmp	r2, #24
+	movhi	r6, #1
+	bhi	.L1932
+	ldr	r1, .L2004+12
+	movw	r3, #3912
+	cmp	r2, #16
+	ldrh	r6, [r1, r3]
+	movhi	r6, r6, lsr #5
+	bhi	.L1932
+	cmp	r2, #12
+	movhi	r6, r6, lsr #4
+	bhi	.L1932
+	cmp	r2, #8
+	movhi	r6, r6, lsr #2
+.L1932:
+	ldr	r1, .L2004+40
+	ldr	r3, .L2004
+	ldrh	r0, [r5, r1]
+	cmp	r0, r2
+	bcs	.L1936
+	ldr	r2, .L2004+36
+	movw	r0, #65535
+	ldrh	r2, [r3, r2]
+	cmp	r2, r0
+	bne	.L1937
+	ldr	r0, .L2004+8
+	ldrh	r0, [r3, r0]
+	cmp	r0, r2
+	bne	.L1937
+	mov	r2, #428
+	ldrh	r0, [r3, r2]
+	cmp	r0, #0
+	bne	.L1938
+	ldr	r2, .L2004+12
+	ldr	ip, [r3, #-1848]
+	ldr	r2, [r2, #3972]
+	add	r2, r2, r2, asl #1
+	cmp	ip, r2, lsr #2
+	movcs	r2, #18
+	bcs	.L2002
+.L1938:
+	ldr	r3, .L2004
+	ldr	r2, .L2004+48
+	ldr	r1, .L2004+40
+	ldrh	r2, [r3, r2]
+	add	r2, r2, r2, asl #1
+	mov	r2, r2, asr #2
+.L2002:
+	strh	r2, [r3, r1]	@ movhi
+	mov	r2, #0
+	ldr	r3, .L2004
+	str	r2, [r3, #-1188]
+	b	.L1941
+.L1937:
+	ldr	r3, .L2004
+	ldr	r2, .L2004+48
+	ldr	r1, .L2004+40
+	ldrh	r2, [r3, r2]
+	add	r2, r2, r2, asl #1
+	mov	r2, r2, asr #2
+	strh	r2, [r3, r1]	@ movhi
+.L1936:
+	ldr	r3, .L2004+12
+	cmp	sl, #2
+	movw	r4, #65535
+	movhi	sl, #0
+	movls	sl, #1
+	ldr	r3, [r3, #3836]
+	cmp	r3, #0
+	moveq	sl, #0
+	cmp	sl, #0
+	addne	r6, r6, #1
+	uxthne	r6, r6
+	b	.L1942
+.L1931:
+	ldr	r3, .L2004+36
+	ldrh	r3, [r5, r3]
+	cmp	r3, r0
+	bne	.L1943
+	ldr	r0, .L2004+8
+	ldrh	r0, [r5, r0]
+	cmp	r0, r3
+	movne	r1, #0
+	andeq	r1, r1, #1
+	cmp	r1, #0
+	beq	.L1943
+	ldr	r1, .L2004+16
+	ldrh	r4, [r5, r1]
+	cmp	r4, r3
+	movne	r4, r3
+	bne	.L1943
+	ldr	r3, .L2004+20
+	mov	r6, #428
+	str	r2, [r5, #-1188]
+	ldrh	r7, [r5, r3]
+	add	r3, r3, #804
+	ldrh	r2, [r5, r3]
+	cmp	r2, r7
+	bcs	.L1944
+	ldrh	r2, [r5, r6]
+	cmp	r2, #0
+	bne	.L1945
+	ldr	r2, .L2004+12
+	ldr	r1, [r5, #-1848]
+	ldr	r2, [r2, #3972]
+	add	r2, r2, r2, asl #1
+	cmp	r1, r2, lsr #2
+	movcs	r2, #18
+	strcsh	r2, [r5, r3]	@ movhi
+	bcs	.L1947
+.L1945:
+	ldr	r3, .L2004
+	ldr	r2, .L2004+48
+	ldr	r1, .L2004+40
+	ldrh	r2, [r3, r2]
+	add	r2, r2, r2, asl #1
+	mov	r2, r2, asr #2
+	strh	r2, [r3, r1]	@ movhi
+.L1947:
+	bl	FtlReadRefresh
+	mov	r3, #428
+	ldr	r2, .L2004
+	b	.L2003
+.L1944:
+	ldrh	r0, [r5, r6]
+	cmp	r0, #0
+	bne	.L1943
+	ldr	r2, .L2004+48
+	ldrh	r4, [r5, r2]
+	add	r2, r4, r4, asl #1
+	mov	r2, r2, asr #2
+	strh	r2, [r5, r3]	@ movhi
+	bl	List_get_gc_head_node
+	ldr	r3, [r5, #-2020]
+	ldr	r1, .L2004+12
+	movw	r2, #3914
+	ldrh	r2, [r1, r2]
+	uxth	r0, r0
+	mov	r0, r0, asl #1
+	ldrh	r3, [r3, r0]
+	movw	r0, #3844
+	ldrh	r1, [r1, r0]
+	mul	r2, r1, r2
+	add	r2, r2, r2, lsr #31
+	cmp	r3, r2, asr #1
+	ble	.L1948
+	sub	r4, r4, #1
+	cmp	r7, r4
+	blt	.L1948
+	bl	FtlReadRefresh
+	ldrh	r0, [r5, r6]
+	b	.L1941
+.L1948:
+	cmp	r3, #0
+	movwne	r4, #65535
+	bne	.L1943
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldr	r3, .L2004+20
+	ldr	r2, .L2004
+	ldrh	r0, [r2, r3]
+	add	r0, r0, #1
+	b	.L1941
+.L1943:
+	ldr	r3, .L2004+12
+	ldr	r6, [r3, #3836]
+	cmp	r6, #0
+	movne	r6, #2
+	moveq	r6, #1
+.L1942:
+	ldr	r3, .L2004
+	movw	r0, #65535
+	ldr	r2, .L2004+16
+	ldrh	r1, [r3, r2]
+	cmp	r1, r0
+	bne	.L1949
+	cmp	r4, r1
+	strneh	r4, [r3, r2]	@ movhi
+	bne	.L1951
+	ldr	r2, .L2004+8
+	ldrh	r1, [r3, r2]
+	cmp	r1, r4
+	beq	.L1951
+	ldr	r0, [r3, #-2020]
+	mov	r1, r1, asl #1
+	ldrh	r1, [r0, r1]
+	cmp	r1, #0
+	mvneq	r1, #0
+	streqh	r1, [r3, r2]	@ movhi
+	ldr	r3, .L2004
+	ldr	r1, .L2004+16
+	ldrh	r0, [r3, r2]
+	strh	r0, [r3, r1]	@ movhi
+	mvn	r1, #0
+	strh	r1, [r3, r2]	@ movhi
+.L1951:
+	ldr	r5, .L2004
+	mov	r3, #0
+	ldr	r7, .L2004+16
+	strb	r3, [r5, #-1756]
+	movw	r3, #65535
+	ldrh	r0, [r5, r7]
+	cmp	r0, r3
+	beq	.L1949
+	bl	IsBlkInGcList
+	cmp	r0, #0
+	mvnne	r3, #0
+	strneh	r3, [r5, r7]	@ movhi
+	ldr	r3, .L2004+12
+	ldr	r7, .L2004
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1954
+	ldr	r3, .L2004+16
+	ldrh	r0, [r7, r3]
+	bl	ftl_get_blk_mode
+	strb	r0, [r7, #-1756]
+.L1954:
+	ldr	r8, .L2004+16
+	movw	r3, #65535
+	ldr	r5, .L2004
+	ldrh	r2, [r7, r8]
+	cmp	r2, r3
+	beq	.L1949
+	ldr	r0, .L2004+52
+	bl	make_superblock
+	ldr	r1, .L2004+56
+	movw	r2, #430
+	mov	r3, #0
+	strh	r3, [r5, r2]	@ movhi
+	strh	r3, [r5, r1]	@ movhi
+	strb	r3, [r5, #-1758]
+	ldrh	r3, [r5, r8]
+	ldr	r2, [r5, #-2020]
+	mov	r3, r3, asl #1
+	ldrh	r2, [r2, r3]
+	mov	r3, #432
+	strh	r2, [r5, r3]	@ movhi
+.L1949:
+	ldr	r3, .L2004
+	ldr	r0, .L2004+16
+	ldr	r2, .L2004+60
+	ldrh	r1, [r3, r0]
+	ldrh	r2, [r3, r2]
+	cmp	r2, r1
+	mov	r2, r3
+	beq	.L1955
+	ldr	ip, .L2004+64
+	ldrh	r3, [r3, ip]
+	cmp	r3, r1
+	movne	fp, r4
+	bne	.L1999
+.L1956:
+.L1955:
+	mvn	r3, #0
+	strh	r3, [r2, r0]	@ movhi
+	mov	r3, #428
+.L2003:
+	ldrh	r0, [r2, r3]
+	b	.L1941
+.L1999:
+	ldr	r4, .L2004
+	movw	sl, #65535
+	ldr	r9, .L2004+16
+	ldrh	r3, [r4, r9]
+	cmp	r3, sl
+	bne	.L1958
+	ldr	r5, .L2004+28
+	mov	r3, #0
+	str	r3, [r4, #-1188]
+.L1998:
+	ldrh	r8, [r4, r5]
+	mov	r0, r8
+	bl	List_get_gc_head_node
+	movw	r1, #65535
+	uxth	r7, r0
+	strh	r7, [r4, r9]	@ movhi
+	cmp	r7, r1
+	bne	.L1960
+	ldr	r3, .L2004+28
+	mov	r1, #0
+	ldr	r2, .L2004
+	mov	r0, #8
+	strh	r1, [r2, r3]	@ movhi
+	b	.L1941
+.L1960:
+	mov	r0, r7
+	bl	IsBlkInGcList
+	cmp	r0, #0
+	add	r0, r8, #1
+	strneh	r0, [r4, r5]	@ movhi
+	bne	.L1998
+	ldr	ip, .L2004+12
+	movw	r8, #3912
+	ldr	r2, [r4, #-2020]
+	mov	r3, r7, asl #1
+	uxth	r0, r0
+	strh	r0, [r4, r5]	@ movhi
+	ldrh	sl, [ip, r8]
+	movw	r8, #3844
+	ldrh	ip, [ip, r8]
+	ldrh	r1, [r2, r3]
+	mul	sl, ip, sl
+	add	ip, sl, sl, lsr #31
+	cmp	r1, ip, asr #1
+	bgt	.L1963
+	cmp	r0, #48
+	bls	.L1964
+	cmp	r1, #8
+	bls	.L1964
+	ldr	r1, .L2004+68
+	ldrh	r1, [r4, r1]
+	cmp	r1, #35
+	bhi	.L1964
+.L1963:
+	mov	r1, #0
+	strh	r1, [r4, r5]	@ movhi
+.L1964:
+	ldrh	r3, [r2, r3]
+	movw	r2, #65535
+	cmp	r3, sl
+	cmpge	fp, r2
+	ldr	sl, .L2004
+	movne	r8, #0
+	moveq	r8, #1
+	bne	.L1965
+	ldr	r3, .L2004+16
+	mvn	r2, #0
+	strh	r2, [sl, r3]	@ movhi
+	add	r3, r3, #572
+	mov	r2, #0
+	strh	r2, [sl, r3]	@ movhi
+	mov	r3, #428
+	ldrh	r0, [sl, r3]
+	b	.L1941
+.L1965:
+	cmp	r3, #0
+	bne	.L1966
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r3, [r4, r5]
+	add	r3, r3, #1
+	strh	r3, [r4, r5]	@ movhi
+	b	.L1998
+.L1966:
+	ldr	r3, .L2004+12
+	strb	r8, [sl, #-1756]
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L1967
+	mov	r0, r7
+	bl	ftl_get_blk_mode
+	strb	r0, [sl, #-1756]
+.L1967:
+	ldr	r4, .L2004
+	ldr	r0, .L2004+52
+	bl	make_superblock
+	movw	r1, #430
+	mov	r3, #0
+	strh	r3, [r4, r1]	@ movhi
+	ldr	r1, .L2004+16
+	ldr	r0, [r4, #-2020]
+	ldrh	r1, [r4, r1]
+	mov	r1, r1, asl #1
+	ldrh	r0, [r0, r1]
+	mov	r1, #432
+	strb	r3, [r4, #-1758]
+	strh	r0, [r4, r1]	@ movhi
+	ldr	r1, .L2004+56
+	strh	r3, [r4, r1]	@ movhi
+.L1958:
+	ldr	sl, [sp, #16]
+	cmp	sl, #1
+	bne	.L1968
+	bl	FtlReadRefresh
+.L1968:
+	ldr	r3, .L2004
+	mov	r2, #1
+	movw	r1, #3912
+	str	r2, [r3, #-1000]
+	ldr	r2, .L2004+12
+	ldrh	r9, [r2, r1]
+	ldrb	r1, [r2, #928]	@ zero_extendqisi2
+	cmp	r1, #0
+	beq	.L1969
+	ldrb	r1, [r3, #-1756]	@ zero_extendqisi2
+	cmp	r1, #1
+	movweq	r1, #3914
+	ldreqh	r9, [r2, r1]
+.L1969:
+	ldr	r2, .L2004+56
+	mov	r8, #0
+	str	fp, [sp, #20]
+	mov	fp, r9
+	ldr	r4, .L2004
+	ldrh	r3, [r3, r2]
+	add	r2, r3, r6
+	cmp	r2, r9
+	rsbgt	r6, r3, r9
+	uxthgt	r6, r6
+	b	.L1971
+.L1973:
+	ldrh	r1, [r2, #2]!
+	movw	sl, #65535
+	add	r3, r3, #1
+	cmp	r1, sl
+	uxth	r3, r3
+	orrne	r1, ip, r1, asl #10
+	mlane	sl, r0, r7, lr
+	addne	r7, r7, #1
+	uxthne	r7, r7
+	strne	r1, [sl, #4]
+.L1979:
+	cmp	r3, r5
+	bne	.L1973
+	ldr	r0, [r4, #-1168]
+	mov	r1, r7
+	ldrb	r2, [r4, #-1756]	@ zero_extendqisi2
+	mov	r5, #0
+	bl	FlashReadPages
+	mov	r9, r5
+	mov	sl, r6
+	b	.L1974
+.L1977:
+	ldr	r3, [r4, #-1168]
+	add	r2, r3, r5
+	ldr	r3, [r3, r5]
+	ldr	r6, [r2, #12]
+	cmn	r3, #1
+	beq	.L1975
+	ldrh	r3, [r6, #0]
+	movw	r1, #61589
+	cmp	r3, r1
+	bne	.L1975
+	add	r1, sp, #28
+	mov	r2, #0
+	ldr	r0, [r6, #8]
+	bl	log2phys
+	ldr	r1, [r4, #-1168]
+	ldr	r2, [sp, #28]
+	add	r1, r1, r5
+	bic	r2, r2, #-2147483648
+	ldr	r3, [r1, #4]
+	cmp	r2, r3
+	bne	.L1975
+	movw	r3, #430
+	ldr	r0, [r4, #-1184]
+	ldrh	r2, [r4, r3]
+	ldr	r1, [r1, #16]
+	add	r2, r2, #1
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r2, [r4, #-972]
+	mov	r3, #36
+	mla	r2, r3, r0, r2
+	str	r1, [r2, #16]
+	str	r2, [sp, #8]
+	str	r3, [sp, #12]
+	bl	Ftl_get_new_temp_ppa
+	ldr	r2, [sp, #8]
+	ldr	r1, [r4, #-1184]
+	str	r0, [r2, #4]
+	ldr	r3, [sp, #12]
+	ldr	r2, [r4, #-972]
+	mla	r3, r3, r1, r2
+	ldr	r2, [r4, #-1168]
+	add	r2, r2, r5
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #8]
+	mov	r1, #1
+	ldr	r2, [r2, #12]
+	str	r2, [r3, #12]
+	ldr	r3, [sp, #28]
+	str	r3, [r6, #12]
+	ldr	r3, .L2004+36
+	ldrh	r3, [r4, r3]
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, [r4, #-1804]
+	ldr	r0, [r4, #-1168]
+	str	r3, [r6, #4]
+	add	r0, r0, r5
+	ldr	r3, [r4, #-1184]
+	add	r3, r3, #1
+	str	r3, [r4, #-1184]
+	bl	FtlGcBufAlloc
+	ldr	r3, .L2004+12
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L1976
+	ldrb	r3, [r4, #-1897]	@ zero_extendqisi2
+	ldr	r2, [r4, #-1184]
+	cmp	r2, r3
+	beq	.L1976
+	ldr	r3, .L2004+72
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L1975
+.L1976:
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	ldrne	r3, .L2004
+	movne	r2, #0
+	strne	r2, [r3, #-1000]
+	movne	r2, #428
+	bne	.L2003
+.L1975:
+	add	r9, r9, #1
+	add	r5, r5, #36
+	uxth	r9, r9
+.L1974:
+	cmp	r9, r7
+	bne	.L1977
+	add	r8, r8, #1
+	mov	r6, sl
+.L1971:
+	uxth	r3, r8
+	ldr	r7, .L2004
+	cmp	r3, r6
+	ldr	r3, .L2004+56
+	bcs	.L1978
+	ldr	r1, .L2004+12
+	movw	r2, #3844
+	ldrh	ip, [r4, r3]
+	mov	r7, #0
+	ldr	lr, [r4, #-1168]
+	mov	r3, r7
+	ldrh	r5, [r1, r2]
+	add	ip, ip, r8
+	ldr	r2, .L2004+76
+	mov	r0, #36
+	b	.L1979
+.L1978:
+	ldrh	r2, [r7, r3]
+	mov	r9, fp
+	ldr	fp, [sp, #20]
+	add	r6, r6, r2
+	uxth	r6, r6
+	strh	r6, [r7, r3]	@ movhi
+	cmp	r6, r9
+	bcc	.L1980
+	ldr	r3, [r7, #-1184]
+	cmp	r3, #0
+	beq	.L1981
+	bl	Ftl_gc_temp_data_write_back
+	cmp	r0, #0
+	movne	r3, #0
+	strne	r3, [r7, #-1000]
+	movne	r3, #428
+	ldrneh	r0, [r7, r3]
+	bne	.L1941
+.L1981:
+	ldr	r3, .L2004
+	movw	r2, #430
+	ldrh	ip, [r3, r2]
+	cmp	ip, #0
+	bne	.L1982
+	ldr	r2, .L2004+16
+	ldr	r0, [r3, #-2020]
+	ldrh	r1, [r3, r2]
+	mov	r1, r1, asl #1
+	ldrh	r4, [r0, r1]
+	cmp	r4, #0
+	beq	.L1982
+	strh	ip, [r0, r1]	@ movhi
+	ldrh	r0, [r3, r2]
+	bl	update_vpc_list
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L1982:
+	ldr	r3, .L2004+16
+	mvn	r1, #0
+	ldr	r2, .L2004
+	strh	r1, [r2, r3]	@ movhi
+.L1980:
+	ldr	r3, .L2004
+	ldr	r2, .L2004+20
+	ldrh	r2, [r3, r2]
+	cmp	r2, #2
+	ldrls	r2, .L2004+12
+	movwls	r3, #3912
+	ldrlsh	r6, [r2, r3]
+	bls	.L1999
+.L1983:
+	mov	r1, #0
+	str	r1, [r3, #-1000]
+	mov	r1, #428
+	ldrh	r0, [r3, r1]
+	cmp	r0, #0
+	addeq	r0, r2, #1
+.L1941:
+	add	sp, sp, #36
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2005:
+	.align	2
+.L2004:
+	.word	.LANCHOR2
+	.word	-1144
+	.word	-1146
+	.word	.LANCHOR0
+	.word	-1764
+	.word	-2004
+	.word	-1198
+	.word	-1192
+	.word	.LC130
+	.word	-1904
+	.word	-1200
+	.word	.LC131
+	.word	-1780
+	.word	.LANCHOR2-1764
+	.word	-1762
+	.word	-2000
+	.word	-1952
+	.word	-1160
+	.word	-1900
+	.word	.LANCHOR2-1750
+	.fnend
+	.size	ftl_do_gc.part.21, .-ftl_do_gc.part.21
+	.align	2
+	.global	ftl_do_gc
+	.type	ftl_do_gc, %function
+ftl_do_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r3, .L2013
+	mov	r5, r1
+	ldr	r0, [r3, #-2092]
+	cmp	r0, #0
+	movne	r0, #0
+	ldmnefd	sp!, {r3, r4, r5, pc}
+	ldr	r2, [r3, #-1000]
+	cmp	r2, #0
+	ldmnefd	sp!, {r3, r4, r5, pc}
+	ldr	r1, .L2013+4
+	ldrh	r1, [r3, r1]
+	cmp	r1, #47
+	movls	r0, r2
+	ldmlsfd	sp!, {r3, r4, r5, pc}
+	ldr	r1, .L2013+8
+	movw	r2, #3000
+	ldrh	r1, [r1, r2]
+	movw	r2, #65535
+	cmp	r1, r2
+	beq	.L2008
+	ldr	r1, .L2013+12
+	ldrh	r3, [r3, r1]
+	cmp	r3, r2
+	beq	.L2008
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	bne	.L2012
+.L2008:
+	mov	r0, r4
+	mov	r1, r5
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	ftl_do_gc.part.21
+.L2012:
+	mov	r0, #1
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2014:
+	.align	2
+.L2013:
+	.word	.LANCHOR2
+	.word	-2012
+	.word	.LANCHOR1
+	.word	-1904
+	.fnend
+	.size	ftl_do_gc, .-ftl_do_gc
+	.align	2
+	.global	FtlCacheWriteBack
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2037
+	stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
+	ldr	r4, [r3, #436]
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L2016
+	ldr	r3, .L2037+4
+	ldr	r1, [r3, #3964]
+	cmp	r1, #0
+	beq	.L2016
+	ldrb	r8, [r3, #928]	@ zero_extendqisi2
+	cmp	r8, #0
+	beq	.L2017
+	ldrb	r8, [r4, #8]	@ zero_extendqisi2
+	sub	lr, r8, #1
+	rsbs	r8, lr, #0
+	adc	r8, r8, lr
+.L2017:
+	ldr	r0, [r3, #3968]
+	mov	r2, r8
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	mov	r5, #0
+	bl	FlashProgPages
+	mov	r7, r5
+	ldr	r6, .L2037+4
+	ldr	r9, .L2037
+	b	.L2018
+.L2023:
+	ldr	r2, [r6, #3968]
+	add	r3, r2, r5
+	ldr	r2, [r2, r5]
+	cmn	r2, #1
+	beq	.L2036
+	ldr	r2, [r3, #4]
+	cmp	r8, #0
+	ldr	r0, [r3, #16]
+	add	r1, sp, #4
+	str	r2, [sp, #4]
+	orrne	r2, r2, #-2147483648
+	strne	r2, [sp, #4]
+	mov	r2, #1
+	bl	log2phys
+	ldr	r3, [r6, #3968]
+	add	r3, r3, r5
+	ldr	r3, [r3, #12]
+	ldr	r0, [r3, #12]
+	cmn	r0, #1
+	beq	.L2021
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r9, #-2020]
+	mov	r3, r0, asl #1
+	mov	sl, r0
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	bne	.L2022
+	ldr	r0, .L2037+8
+	mov	r1, sl
+	bl	printk
+.L2022:
+	mov	r0, sl
+	bl	decrement_vpc_count
+.L2021:
+	add	r7, r7, #1
+	add	r5, r5, #36
+.L2018:
+	ldr	r3, [r6, #3964]
+	cmp	r7, r3
+	bcc	.L2023
+	b	.L2024
+.L2032:
+	ldr	r3, [r6, #3968]
+	mvn	r2, #0
+	movw	sl, #3912
+	str	r2, [r3, r5]
+	b	.L2025
+.L2028:
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r4, #0]
+	cmp	r3, r0
+	bne	.L2026
+	ldr	r2, [r7, #-2020]
+	mov	r3, r3, asl #1
+	ldrh	r1, [r4, #4]
+	ldrh	r0, [r2, r3]
+	rsb	r1, r1, r0
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r3, [r6, sl]
+	strh	r3, [r4, #2]	@ movhi
+	mov	r3, #0
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+.L2026:
+	ldrh	r3, [r4, #4]
+	cmp	r3, #0
+	bne	.L2027
+	mov	r0, r4
+	bl	allocate_new_data_superblock
+.L2027:
+	ldr	r3, [r7, #-1616]
+	add	r3, r3, #1
+	str	r3, [r7, #-1616]
+	ldr	r3, [r6, #3968]
+	add	r3, r3, r5
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlGcMarkBadPhyBlk
+	mov	r0, r4
+	bl	get_new_active_ppa
+	mov	r1, #1
+	mov	r2, r8
+	mov	r3, r0
+	str	r0, [sp, #4]
+	ldr	r0, [r6, #3968]
+	add	r0, r0, r5
+	str	r3, [r0, #4]
+	ldrb	r3, [r4, #9]	@ zero_extendqisi2
+	bl	FlashProgPages
+	ldr	r3, [r7, #-2092]
+	cmp	r3, #0
+	bne	.L2016
+.L2025:
+	ldr	r2, [r6, #3968]
+	add	r3, r2, r5
+	ldr	r2, [r2, r5]
+	cmn	r2, #1
+	beq	.L2028
+	ldr	r2, [r3, #4]
+	cmp	r8, #0
+	ldr	r0, [r3, #16]
+	add	r1, sp, #4
+	str	r2, [sp, #4]
+	orrne	r2, r2, #-2147483648
+	strne	r2, [sp, #4]
+	mov	r2, #1
+	bl	log2phys
+	ldr	r3, [r6, #3968]
+	add	r3, r3, r5
+	ldr	r3, [r3, #12]
+	ldr	r0, [r3, #12]
+	cmn	r0, #1
+	beq	.L2030
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r7, #-2020]
+	mov	r3, r0, asl #1
+	mov	sl, r0
+	ldrh	r2, [r2, r3]
+	cmp	r2, #0
+	bne	.L2031
+	ldr	r0, .L2037+8
+	mov	r1, sl
+	bl	printk
+.L2031:
+	mov	r0, sl
+	bl	decrement_vpc_count
+.L2030:
+	add	r9, r9, #1
+	add	r5, r5, #36
+	b	.L2019
+.L2036:
+	ldr	r6, .L2037+4
+	mov	r5, #0
+	ldr	r7, .L2037
+	mov	r9, r5
+.L2019:
+	ldr	r3, [r6, #3964]
+	cmp	r9, r3
+	bcc	.L2032
+	movw	r4, #16386
+	ldr	r6, .L2037
+	ldr	r5, .L2037+12
+	b	.L2033
+.L2034:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	subs	r4, r4, #1
+	beq	.L2024
+.L2033:
+	ldrh	r3, [r6, r5]
+	cmp	r3, #0
+	bne	.L2034
+.L2024:
+	ldr	r3, .L2037+4
+	mov	r2, #0
+	str	r2, [r3, #3964]
+.L2016:
+	mov	r0, #0
+	ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
+.L2038:
+	.align	2
+.L2037:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC132
+	.word	-1142
+	.fnend
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	2
+	.global	FtlGcFreeTempBlock
+	.type	FtlGcFreeTempBlock, %function
+FtlGcFreeTempBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, r8, sl, lr}
+	movw	r3, #3912
+	ldr	r2, .L2062
+	ldrh	r1, [r2, r3]
+	ldr	r3, .L2062+4
+	ldr	r2, [r3, #-2092]
+	cmp	r2, #0
+	bne	.L2060
+	ldr	ip, .L2062+8
+	ldrh	r5, [r3, ip]
+	movw	ip, #65535
+	cmp	r5, ip
+	beq	.L2041
+	cmp	r0, #0
+	beq	.L2042
+	ldr	lr, .L2062+12
+	movw	r0, #3000
+	ldrh	r4, [lr, r0]
+	cmp	r4, ip
+	movne	r1, #2
+	bne	.L2042
+	strh	r2, [lr, r0]	@ movhi
+	ldr	r2, .L2062+16
+	ldrh	r3, [r3, r2]
+	cmp	r3, #17
+	movhi	r1, #2
+.L2042:
+	ldr	r4, .L2062+4
+	sub	r0, r4, #1904
+	bl	FtlGcScanTempBlk
+	cmn	r0, #1
+	str	r0, [sp, #4]
+	beq	.L2043
+	ldr	r3, [r4, #-2084]
+	mov	r5, r5, asl #1
+	ldrh	r2, [r3, r5]
+	cmp	r2, #4
+	bls	.L2044
+	sub	r2, r2, #5
+	mov	r0, #1
+	strh	r2, [r3, r5]	@ movhi
+	bl	FtlEctTblFlush
+.L2044:
+	ldr	r3, .L2062+4
+	ldr	r2, [r3, #-1016]
+	cmp	r2, #0
+	bne	.L2045
+	ldr	r2, [r3, #-1616]
+	ldr	r0, [sp, #4]
+	add	r2, r2, #1
+	str	r2, [r3, #-1616]
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+.L2045:
+	ldr	r3, .L2062+4
+	mov	r2, #0
+	str	r2, [r3, #-1016]
+	b	.L2058
+.L2043:
+	ldr	r2, .L2062+12
+	movw	r3, #3000
+	ldrh	r2, [r2, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L2058
+.L2041:
+	ldr	r6, .L2062+4
+	movw	r3, #65535
+	ldr	r5, .L2062+8
+	mov	r4, #0
+	str	r4, [r6, #-1016]
+	ldrh	r2, [r6, r5]
+	cmp	r2, r3
+	moveq	r0, r4
+	beq	.L2040
+	bl	FtlCacheWriteBack
+	ldr	ip, .L2062
+	movw	r0, #3912
+	ldrb	r1, [r6, #-1897]	@ zero_extendqisi2
+	ldrh	r3, [r6, r5]
+	ldrh	r0, [ip, r0]
+	ldr	r2, [r6, #-2020]
+	ldr	sl, .L2062+20
+	mov	r3, r3, asl #1
+	mul	r1, r0, r1
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r3, [r6, #-1820]
+	ldrh	r2, [r6, sl]
+	add	r3, r2, r3
+	str	r3, [r6, #-1820]
+	b	.L2046
+.L2049:
+	mov	r7, #12
+	ldr	r8, [r6, #-1152]
+	mul	r7, r7, r4
+	add	r1, sp, #4
+	mov	r2, #0
+	add	r5, r8, r7
+	ldr	r0, [r5, #8]
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	ldr	r3, [r8, r7]
+	cmp	r0, r3
+	bne	.L2047
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	add	r1, r5, #4
+	mov	r2, #1
+	mov	r7, r0
+	ldr	r0, [r5, #8]
+	bl	log2phys
+	mov	r0, r7
+	b	.L2061
+.L2047:
+	ldr	r3, [r5, #4]
+	cmp	r0, r3
+	beq	.L2048
+	ldr	r3, .L2062+8
+	ldrh	r0, [r6, r3]
+.L2061:
+	bl	decrement_vpc_count
+.L2048:
+	add	r4, r4, #1
+	uxth	r4, r4
+.L2046:
+	ldrh	r3, [r6, sl]
+	ldr	r5, .L2062+4
+	cmp	r3, r4
+	bhi	.L2049
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldr	r3, .L2062
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2050
+	ldr	r3, .L2062+8
+	ldr	r0, .L2062+24
+	ldrh	r1, [r5, r3]
+	bl	printk
+.L2050:
+	ldr	r3, .L2062+8
+	ldr	r1, [r5, #-2020]
+	ldrh	r0, [r5, r3]
+	mov	r5, r3
+	mov	r2, r0, asl #1
+	ldrh	r2, [r1, r2]
+	cmp	r2, #0
+	beq	.L2051
+	bl	INSERT_DATA_LIST
+	b	.L2052
+.L2051:
+	bl	INSERT_FREE_LIST
+.L2052:
+	ldr	r4, .L2062+4
+	mvn	r3, #0
+	ldr	r2, .L2062+20
+	strh	r3, [r4, r5]	@ movhi
+	mov	r3, #0
+	strh	r3, [r4, r2]	@ movhi
+	sub	r2, r2, #12
+	strh	r3, [r4, r2]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	r3, .L2062
+	mov	r0, r4
+	ldr	r1, .L2062+16
+	ldr	r2, .L2062+28
+	ldr	r3, [r3, #3836]
+	cmp	r3, #0
+	beq	.L2053
+	ldr	r3, [r4, #-1784]
+	cmp	r3, #29
+	bhi	.L2053
+	ldrh	r3, [r4, r2]
+	ldrh	r2, [r4, r1]
+	mvn	r1, #0
+	cmp	r2, r3
+	movcc	r3, r3, asl #1
+	ldrcc	r2, .L2062+32
+	strcch	r3, [r4, r2]	@ movhi
+	ldr	r3, .L2062+36
+	ldr	r2, .L2062+4
+	strh	r1, [r2, r3]	@ movhi
+	b	.L2060
+.L2053:
+	ldrh	r2, [r0, r2]
+	ldrh	r1, [r0, r1]
+	ldr	r3, .L2062+4
+	add	r0, r2, r2, asl #1
+	cmp	r1, r0, lsr #2
+	ble	.L2060
+	ldr	r1, .L2062+36
+	mvn	r0, #0
+	strh	r0, [r3, r1]	@ movhi
+	ldr	r1, .L2062
+	ldrb	r0, [r1, #928]	@ zero_extendqisi2
+	ldr	r1, .L2062+32
+	cmp	r0, #0
+	subne	r2, r2, #2
+	moveq	r2, #20
+	strneh	r2, [r3, r1]	@ movhi
+	streqh	r2, [r3, r1]	@ movhi
+	beq	.L2040
+	b	.L2060
+.L2058:
+	mov	r0, #1
+	b	.L2040
+.L2060:
+	mov	r0, #0
+.L2040:
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, sl, pc}
+.L2063:
+	.align	2
+.L2062:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1904
+	.word	.LANCHOR1
+	.word	-2004
+	.word	-1148
+	.word	.LC133
+	.word	-1780
+	.word	-1200
+	.word	-1764
+	.fnend
+	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
+	.align	2
+	.global	Ftl_gc_temp_data_write_back
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	ldr	r3, .L2073
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldr	r3, .L2073+4
+	beq	.L2065
+	ldr	r2, [r3, #-1184]
+	tst	r2, #1
+	beq	.L2065
+	ldr	r2, .L2073+8
+	ldrh	r2, [r3, r2]
+	cmp	r2, #0
+	bne	.L2070
+.L2065:
+	mov	r2, #0
+	ldr	r0, [r3, #-972]
+	ldr	r1, [r3, #-1184]
+	mov	r3, r2
+	bl	FlashProgPages
+	mov	r4, #0
+	ldr	r5, .L2073+4
+	mov	r6, #36
+	b	.L2067
+.L2069:
+	mul	r3, r6, r4
+	ldr	r1, [r5, #-972]
+	add	r2, r1, r3
+	ldr	r1, [r1, r3]
+	cmn	r1, #1
+	bne	.L2068
+	ldr	r2, .L2073+12
+	mov	lr, #0
+	ldr	ip, [r7, #-2020]
+	ldrh	r0, [r7, r2]
+	mov	r0, r0, asl #1
+	strh	lr, [ip, r0]	@ movhi
+	strh	r1, [r7, r2]	@ movhi
+	ldr	r2, [r7, #-1616]
+	add	r2, r2, #1
+	str	r2, [r7, #-1616]
+	ldr	r2, [r7, #-972]
+	add	r3, r2, r3
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	bl	FtlGcPageVarInit
+	b	.L2072
+.L2068:
+	ldr	r3, [r2, #12]
+	add	r4, r4, #1
+	ldr	r1, [r2, #4]
+	uxth	r4, r4
+	ldr	r0, [r3, #12]
+	ldr	r2, [r3, #8]
+	bl	FtlGcUpdatePage
+.L2067:
+	ldr	r1, [r5, #-1184]
+	ldr	r7, .L2073+4
+	cmp	r4, r1
+	bcc	.L2069
+	ldr	r0, [r7, #-972]
+	bl	FtlGcBufFree
+	ldr	r3, .L2073+8
+	mov	r0, #0
+	str	r0, [r7, #-1184]
+	ldrh	r3, [r7, r3]
+	cmp	r3, r0
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, pc}
+	mov	r0, #1
+	bl	FtlGcFreeTempBlock
+.L2072:
+	mov	r0, #1
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2070:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2074:
+	.align	2
+.L2073:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1900
+	.word	-1904
+	.fnend
+	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
+	.align	2
+	.global	FtlGcPageRecovery
+	.type	FtlGcPageRecovery, %function
+FtlGcPageRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movw	r5, #3912
+	ldr	r6, .L2077
+	ldr	r4, .L2077+4
+	ldrh	r1, [r6, r5]
+	sub	r0, r4, #1904
+	bl	FtlGcScanTempBlk
+	ldr	r3, .L2077+8
+	ldrh	r2, [r4, r3]
+	ldrh	r3, [r6, r5]
+	cmp	r2, r3
+	ldmccfd	sp!, {r4, r5, r6, pc}
+	ldr	r0, .L2077+12
+	bl	FtlMapBlkWriteDumpData
+	mov	r0, #0
+	bl	FtlGcFreeTempBlock
+	mov	r3, #0
+	str	r3, [r4, #-1016]
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2078:
+	.align	2
+.L2077:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1902
+	.word	.LANCHOR2-1092
+	.fnend
+	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
+	.align	2
+	.global	FtlPowerLostRecovery
+	.type	FtlPowerLostRecovery, %function
+FtlPowerLostRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, #0
+	ldr	r4, .L2080
+	sub	r6, r4, #2000
+	str	r5, [r4, #296]
+	sub	r4, r4, #1952
+	mov	r0, r6
+	bl	FtlRecoverySuperblock
+	mov	r0, r6
+	bl	FtlSlcSuperblockCheck
+	mov	r0, r4
+	bl	FtlRecoverySuperblock
+	mov	r0, r4
+	bl	FtlSlcSuperblockCheck
+	bl	FtlGcPageRecovery
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2081:
+	.align	2
+.L2080:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
+	.align	2
+	.global	FtlSysBlkInit
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r3, #292
+	ldr	r6, .L2093
+	mov	r2, #0
+	ldr	r4, .L2093+4
+	mvn	r5, #0
+	ldr	r0, [r6, #3848]
+	strh	r2, [r4, r3]	@ movhi
+	movw	r3, #290
+	strh	r5, [r4, r3]	@ movhi
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldr	r3, .L2093+8
+	ldrh	r2, [r4, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2083
+	bl	FtlLoadSysInfo
+	subs	r7, r0, #0
+	bne	.L2083
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	r0, #1
+	bl	FtlUpdateVaildLpn
+	movw	r3, #3950
+	ldrh	r2, [r6, r3]
+	mov	r3, r7
+	ldr	r1, [r4, #-1856]
+	b	.L2084
+.L2086:
+	add	r0, r1, r7
+	add	r7, r7, #12
+	ldr	r0, [r0, #4]
+	cmp	r0, #0
+	blt	.L2085
+	add	r3, r3, #1
+.L2084:
+	cmp	r3, r2
+	blt	.L2086
+.L2085:
+	ldr	r4, .L2093+4
+	cmp	r3, r2
+	ldr	r1, .L2093+12
+	ldrh	r0, [r4, r1]
+	add	r0, r0, #1
+	strh	r0, [r4, r1]	@ movhi
+	blt	.L2087
+	mov	r3, #292
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	beq	.L2088
+.L2087:
+	ldr	r0, .L2093+16
+	bl	FtlSuperblockPowerLostFix
+	ldr	r0, .L2093+20
+	bl	FtlSuperblockPowerLostFix
+	ldr	r3, .L2093+24
+	ldr	r1, [r4, #-2020]
+	ldr	r2, .L2093+28
+	ldrh	r3, [r4, r3]
+	ldrh	r0, [r4, r2]
+	mov	r3, r3, asl #1
+	ldrh	ip, [r1, r3]
+	rsb	r0, r0, ip
+	strh	r0, [r1, r3]	@ movhi
+	ldr	r0, .L2093
+	movw	r1, #3912
+	ldr	r3, .L2093+32
+	ldr	lr, [r4, #-2020]
+	ldrh	ip, [r0, r1]
+	strh	ip, [r4, r3]	@ movhi
+	mov	r3, #0
+	strh	r3, [r4, r2]	@ movhi
+	add	r2, r2, #44
+	strb	r3, [r4, #-1994]
+	ldrh	ip, [r4, r2]
+	add	r2, r2, #4
+	ldrh	r5, [r4, r2]
+	mov	ip, ip, asl #1
+	ldrh	r6, [lr, ip]
+	rsb	r5, r5, r6
+	strh	r5, [lr, ip]	@ movhi
+	ldrh	r0, [r0, r1]
+	ldr	r1, .L2093+36
+	strh	r3, [r4, r2]	@ movhi
+	strb	r3, [r4, #-1946]
+	strh	r0, [r4, r1]	@ movhi
+	ldr	r0, .L2093+40
+	bl	FtlMapBlkWriteDumpData
+	ldr	r0, .L2093+44
+	bl	FtlMapBlkWriteDumpData
+	ldr	r3, .L2093+48
+	ldrh	r2, [r4, r3]
+	add	r2, r2, #1
+	strh	r2, [r4, r3]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+.L2088:
+	ldr	r4, .L2093+4
+	movw	r3, #65535
+	ldr	r5, .L2093+24
+	ldrh	r2, [r4, r5]
+	cmp	r2, r3
+	beq	.L2089
+	ldr	r3, .L2093+28
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L2089
+	ldr	r3, .L2093+52
+	ldrh	r3, [r4, r3]
+	cmp	r3, #0
+	bne	.L2089
+	bl	FtlVpcTblFlush
+	ldrh	r0, [r4, r5]
+	bl	FtlGcRefreshOpenBlock
+	ldr	r3, .L2093+56
+	ldrh	r0, [r4, r3]
+	bl	FtlGcRefreshOpenBlock
+	add	r0, r4, r5
+	bl	allocate_new_data_superblock
+	sub	r0, r4, #1952
+	bl	allocate_new_data_superblock
+	add	r0, r4, #244
+	bl	FtlMapBlkWriteDumpData
+.L2089:
+	ldr	r3, .L2093+12
+	ldr	r2, .L2093+4
+	ldrh	r5, [r2, r3]
+	ands	r5, r5, #31
+	movne	r5, #0
+	bne	.L2083
+	bl	FtlVpcCheckAndModify
+.L2083:
+	mov	r0, r5
+	ldmfd	sp!, {r3, r4, r5, r6, r7, pc}
+.L2094:
+	.align	2
+.L2093:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1776
+	.word	-2048
+	.word	.LANCHOR2-2000
+	.word	.LANCHOR2-1952
+	.word	-2000
+	.word	-1996
+	.word	-1998
+	.word	-1950
+	.word	.LANCHOR2-1092
+	.word	.LANCHOR2+244
+	.word	-2046
+	.word	-1948
+	.word	-1952
+	.fnend
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.align	2
+	.global	Ftl_get_new_temp_ppa
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L2098
+	ldr	r5, .L2098+4
+	ldrh	r2, [r5, r3]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L2096
+	ldr	r3, .L2098+8
+	ldrh	r3, [r5, r3]
+	cmp	r3, #0
+	bne	.L2097
+.L2096:
+	bl	FtlCacheWriteBack
+	mov	r0, #0
+	bl	FtlGcFreeTempBlock
+	ldr	r0, .L2098+12
+	mov	r4, #0
+	strb	r4, [r5, #-1896]
+	bl	allocate_data_superblock
+	ldr	r3, .L2098+16
+	strh	r4, [r5, r3]	@ movhi
+	add	r3, r3, #12
+	strh	r4, [r5, r3]	@ movhi
+	bl	l2p_flush
+	mov	r0, r4
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2097:
+	ldr	r0, .L2098+12
+	ldmfd	sp!, {r3, r4, r5, lr}
+	b	get_new_active_ppa
+.L2099:
+	.align	2
+.L2098:
+	.word	-1904
+	.word	.LANCHOR2
+	.word	-1900
+	.word	.LANCHOR2-1904
+	.word	-1160
+	.fnend
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	2
+	.global	ftl_discard
+	.type	ftl_discard, %function
+ftl_discard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r0, r1, r2, r4, r5, r6, r7, lr}
+	add	r2, r1, r0
+	ldr	r5, .L2110
+	mov	r7, r0
+	mov	r4, r1
+	ldr	r3, [r5, #3952]
+	cmp	r2, r3
+	mvnhi	r0, #0
+	bhi	.L2101
+	cmp	r1, #31
+	bls	.L2108
+	ldr	r3, .L2110+4
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L2108
+	bl	FtlCacheWriteBack
+	movw	r3, #3918
+	ldrh	r6, [r5, r3]
+	mov	r0, r7
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	mls	r7, r0, r6, r7
+	mov	r5, r0
+	uxth	r7, r7
+	cmp	r7, #0
+	beq	.L2102
+	rsb	r6, r7, r6
+	add	r5, r0, #1
+	cmp	r6, r4
+	movcs	r6, r4
+	uxth	r6, r6
+	rsb	r4, r6, r4
+.L2102:
+	mvn	r3, #0
+	ldr	r7, .L2110
+	str	r3, [sp, #4]
+	movw	r6, #3918
+	b	.L2103
+.L2105:
+	mov	r0, r5
+	mov	r1, sp
+	mov	r2, #0
+	bl	log2phys
+	ldr	r3, [sp, #0]
+	cmn	r3, #1
+	beq	.L2104
+	ldr	r3, .L2110+4
+	add	r1, sp, #4
+	mov	r0, r5
+	ldr	r2, [r3, #440]
+	add	r2, r2, #1
+	str	r2, [r3, #440]
+	ldr	r2, [r3, #-1836]
+	add	r2, r2, #1
+	str	r2, [r3, #-1836]
+	mov	r2, #1
+	bl	log2phys
+	ldr	r0, [sp, #0]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L2104:
+	ldrh	r3, [r7, r6]
+	add	r5, r5, #1
+	rsb	r4, r3, r4
+.L2103:
+	ldrh	r3, [r7, r6]
+	cmp	r4, r3
+	bcs	.L2105
+	ldr	r3, .L2110+4
+	mov	r4, #0
+	ldr	r2, [r3, #440]
+	cmp	r2, #32
+	bls	.L2109
+	str	r4, [r3, #440]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L2109
+.L2108:
+	mov	r0, #0
+	b	.L2101
+.L2109:
+	mov	r0, r4
+.L2101:
+	ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, pc}
+.L2111:
+	.align	2
+.L2110:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_discard, .-ftl_discard
+	.align	2
+	.global	FtlDiscard
+	.type	FtlDiscard, %function
+FtlDiscard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_discard
+	.fnend
+	.size	FtlDiscard, .-FtlDiscard
+	.align	2
+	.global	ftl_cache_flush
+	.type	ftl_cache_flush, %function
+ftl_cache_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	ftl_cache_flush, .-ftl_cache_flush
+	.align	2
+	.global	rk_ftl_cache_write_back
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	2
+	.global	FtlSysFlush
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2117
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L2116
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	mov	r0, #1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2116:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2118:
+	.align	2
+.L2117:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	FtlDeInit
+	.type	FtlDeInit, %function
+FtlDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2121
+	ldr	r3, [r3, #2996]
+	cmp	r3, #1
+	bne	.L2120
+	bl	FtlSysFlush
+.L2120:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2122:
+	.align	2
+.L2121:
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlDeInit, .-FtlDeInit
+	.align	2
+	.global	ftl_deinit
+	.type	ftl_deinit, %function
+ftl_deinit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	bl	ftl_flash_de_init
+	bl	FtlDeInit
+	ldmfd	sp!, {r3, lr}
+	b	ftl_flash_de_init
+	.fnend
+	.size	ftl_deinit, .-ftl_deinit
+	.align	2
+	.global	rk_ftl_de_init
+	.type	rk_ftl_de_init, %function
+rk_ftl_de_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	mov	r1, #0
+	ldr	r0, .L2125
+	bl	printk
+	ldmfd	sp!, {r3, lr}
+	b	ftl_deinit
+.L2126:
+	.align	2
+.L2125:
+	.word	.LC134
+	.fnend
+	.size	rk_ftl_de_init, .-rk_ftl_de_init
+	.align	2
+	.global	rk_ftl_garbage_collect
+	.type	rk_ftl_garbage_collect, %function
+rk_ftl_garbage_collect:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_do_gc
+	.fnend
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	2
+	.global	ftl_fix_nand_power_lost_error
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2137
+	stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
+	.save {r4, r5, r6, r7, r8, sl, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2128
+	ldr	r4, .L2137+4
+	movw	r3, #290
+	ldr	r0, .L2137+8
+	movw	r7, #4097
+	ldrh	r6, [r4, r3]
+	ldr	r3, [r4, #-2020]
+	mov	r5, r6, asl #1
+	mov	r1, r6
+	ldrh	r2, [r3, r5]
+	bl	printk
+	ldr	r3, .L2137+12
+	ldrh	r0, [r4, r3]
+	bl	FtlGcRefreshOpenBlock
+	ldr	r3, .L2137+16
+	ldrh	r0, [r4, r3]
+	bl	FtlGcRefreshOpenBlock
+	sub	r0, r4, #2000
+	bl	allocate_new_data_superblock
+	sub	r0, r4, #1952
+	bl	allocate_new_data_superblock
+	b	.L2130
+.L2132:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	ldr	r3, [r4, #-2020]
+	ldrh	r3, [r3, r5]
+	cmp	r3, #0
+	beq	.L2131
+.L2130:
+	subs	r7, r7, #1
+	bne	.L2132
+.L2131:
+	ldr	r7, .L2137+4
+	mov	r1, r6
+	ldr	r0, .L2137+8
+	ldr	r3, [r7, #-2020]
+	ldrh	r2, [r3, r5]
+	bl	printk
+	ldr	r3, [r7, #-2020]
+	ldrh	r4, [r3, r5]
+	cmp	r4, #0
+	bne	.L2133
+	add	r8, sp, #48
+	mov	r0, sp
+	strh	r6, [r8, #-48]!	@ movhi
+	add	r8, r8, #14
+	bl	make_superblock
+	ldr	r2, .L2137
+	movw	r3, #3844
+	ldr	r7, [r7, #-2088]
+	movw	lr, #65535
+	mov	ip, #36
+	ldrh	sl, [r2, r3]
+	mov	r1, r4
+	mov	r3, r4
+	b	.L2134
+.L2136:
+	ldrh	r0, [r8, #2]!
+	cmp	r0, lr
+	beq	.L2135
+	mla	r2, ip, r4, r7
+	add	r4, r4, #1
+	mov	r0, r0, asl #10
+	uxth	r4, r4
+	stmib	r2, {r0, r1}
+	str	r1, [r2, #12]
+.L2135:
+	add	r3, r3, #1
+	uxth	r3, r3
+.L2134:
+	cmp	r3, sl
+	bne	.L2136
+	ldr	r7, .L2137+4
+	mov	r1, r6
+	ldr	r0, .L2137+20
+	ldr	r3, [r7, #-2020]
+	ldrh	r2, [r3, r5]
+	bl	printk
+	mov	r1, #0
+	mov	r2, r4
+	ldr	r0, [r7, #-2088]
+	bl	FlashEraseBlocks
+	ldr	r0, [r7, #-2088]
+	mov	r1, #1
+	mov	r2, r4
+	bl	FlashEraseBlocks
+.L2133:
+	ldr	r2, .L2137+4
+	movw	r3, #290
+	mvn	r1, #0
+	strh	r1, [r2, r3]	@ movhi
+.L2128:
+	add	sp, sp, #52
+	ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
+.L2138:
+	.align	2
+.L2137:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC135
+	.word	-2000
+	.word	-1952
+	.word	.LC136
+	.fnend
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.align	2
+	.global	FtlInit
+	.type	FtlInit, %function
+FtlInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+.L2140:
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mvn	r3, #0
+	ldr	r4, .L2150
+	ldr	r6, .L2150+4
+	ldr	r5, .L2150+8
+	ldr	r1, .L2150+12
+	str	r3, [r6, #2996]
+	mov	r3, #0
+	ldr	r0, .L2150+16
+	str	r3, [r4, #444]
+	str	r3, [r4, #-2092]
+	bl	printk
+	ldr	r0, .L2150+20
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldr	r0, [r5, #3848]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	ldrne	r0, .L2150+24
+	bne	.L2149
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	beq	.L2143
+	ldr	r0, .L2150+28
+.L2149:
+	ldr	r1, .L2150+32
+	bl	printk
+	b	.L2142
+.L2143:
+	mov	r1, #1
+	str	r1, [r6, #2996]
+	bl	ftl_do_gc
+	ldr	r3, .L2150+36
+	ldrh	r3, [r4, r3]
+	cmp	r3, #15
+	bhi	.L2144
+	mov	r4, #1024
+.L2145:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	subs	r4, r4, #1
+	bne	.L2145
+	b	.L2142
+.L2144:
+	ldrb	r3, [r5, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2142
+	mov	r4, #128
+.L2146:
+	mov	r0, #1
+	mov	r1, r0
+	bl	ftl_do_gc
+	subs	r4, r4, #1
+	bne	.L2146
+.L2142:
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2151:
+	.align	2
+.L2150:
+	.word	.LANCHOR2
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LC79
+	.word	.LC78
+	.word	.LANCHOR0+3048
+	.word	.LC137
+	.word	.LC138
+	.word	.LANCHOR3+36
+	.word	-2004
+	.fnend
+	.size	FtlInit, .-FtlInit
+	.align	2
+	.type	ftl_write.part.22, %function
+ftl_write.part.22:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 96
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r3, #2048
+	ldr	r4, .L2197
+	.pad #100
+	sub	sp, sp, #100
+	ldr	r7, .L2197+4
+	mov	r5, r1
+	mov	r8, r0
+	str	r2, [sp, #8]
+	str	r3, [r4, #448]
+	movw	r3, #3918
+	ldrh	r6, [r7, r3]
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	mov	r1, r6
+	str	r0, [sp, #12]
+	sub	r0, r8, #1
+	add	r0, r0, r5
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #12]
+	ldr	sl, [r7, #3964]
+	cmp	sl, #0
+	rsb	r9, r3, r0
+	str	r0, [sp, #36]
+	add	r3, r9, #1
+	str	r3, [sp, #16]
+	ldr	lr, [sp, #16]
+	ldr	r3, [r4, #-1832]
+	add	r3, lr, r3
+	str	r3, [r4, #-1832]
+	ldr	r3, [r4, #-1816]
+	add	r3, r5, r3
+	str	r3, [r4, #-1816]
+	beq	.L2185
+	ldr	r3, [r7, #3968]
+	sub	sl, sl, #1
+	mov	r2, #36
+	ldr	r0, [sp, #12]
+	mla	sl, r2, sl, r3
+	ldr	r3, [sl, #16]
+	cmp	r0, r3
+	strne	r5, [sp, #28]
+	bne	.L2154
+	ldr	r3, [r4, #-1828]
+	mov	r0, r8
+	mov	r1, r6
+	add	r3, r3, #1
+	str	r3, [r4, #-1828]
+	ldr	r3, [r4, #452]
+	add	r3, r3, #1
+	str	r3, [r4, #452]
+	bl	__aeabi_uidivmod
+	ldr	r0, [sl, #8]
+	rsb	r7, r1, r6
+	add	r0, r0, r1, asl #9
+	cmp	r7, r5
+	movcs	r7, r5
+	ldr	r1, [sp, #8]
+	mov	fp, r7, asl #9
+	mov	r2, fp
+	bl	memcpy
+	cmp	r9, #0
+	bne	.L2155
+	ldr	r3, [r4, #452]
+	cmp	r3, #2
+	ble	.L2156
+.L2155:
+	rsb	r3, r7, r5
+	str	r3, [sp, #28]
+	ldr	r3, [sp, #8]
+	add	r8, r8, r7
+	str	r9, [sp, #16]
+	add	r3, r3, fp
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #12]
+	add	r3, r3, #1
+	str	r3, [sp, #12]
+.L2154:
+	ldr	r3, .L2197
+	mov	r2, #0
+	str	r2, [r3, #452]
+	b	.L2153
+.L2185:
+	str	r5, [sp, #28]
+.L2153:
+	ldr	r0, [sp, #12]
+	ldr	r1, [sp, #36]
+	bl	FtlCacheMetchLpa
+	cmp	r0, #0
+	beq	.L2157
+	bl	FtlCacheWriteBack
+.L2157:
+	ldr	r7, .L2197
+	cmp	r5, r6, asl #1
+	ldr	r4, .L2197+4
+	mov	fp, #0
+	movcc	r3, #0
+	movcs	r3, #1
+	sub	r6, r7, #2000
+	str	r3, [sp, #20]
+	str	r6, [r7, #436]
+	mov	sl, r4
+	ldr	r5, [sp, #12]
+	str	fp, [sp, #40]
+	b	.L2194
+.L2183:
+	ldrh	r3, [r6, #4]
+	cmp	r3, #0
+	bne	.L2159
+	ldr	lr, .L2197+8
+	cmp	r6, lr
+	bne	.L2160
+	ldr	r3, .L2197+12
+	ldrh	r3, [r7, r3]
+	cmp	r3, #0
+	bne	.L2161
+	sub	r0, r9, #1952
+	str	r3, [sp, #0]
+	bl	allocate_new_data_superblock
+	ldr	r3, [sp, #0]
+	ldr	r0, .L2197+16
+	str	r3, [r0, #3004]
+.L2161:
+	ldr	r0, .L2197+8
+	bl	allocate_new_data_superblock
+	ldr	r1, .L2197+16
+	ldr	r3, .L2197+20
+	ldr	r2, [r1, #3004]
+	cmp	r2, #0
+	movne	r6, r3
+	b	.L2162
+.L2160:
+	ldr	r2, .L2197+16
+	str	r3, [r2, #3004]
+	ldr	r3, .L2197+24
+	ldrh	r3, [r7, r3]
+	cmp	r3, #0
+	subne	r6, r9, #2000
+	bne	.L2162
+	mov	r0, r6
+	bl	allocate_new_data_superblock
+.L2162:
+	ldrh	r3, [r6, #4]
+	cmp	r3, #0
+	bne	.L2163
+	mov	r0, r6
+	bl	allocate_new_data_superblock
+.L2163:
+	str	r6, [r7, #436]
+.L2159:
+	ldr	r1, [r7, #-980]
+	mov	r9, r6
+	ldr	r2, [r4, #3964]
+	ldrh	r3, [r6, #4]
+	rsb	r2, r2, r1
+	cmp	r3, r2
+	movcc	r2, r3
+	ldr	r3, [sp, #16]
+	cmp	r2, r3
+	movcc	r3, r2
+	str	r3, [sp, #52]
+	mov	r3, #0
+	str	r3, [sp, #24]
+	b	.L2164
+.L2180:
+	ldrh	r3, [r9, #4]
+	cmp	r3, #0
+	beq	.L2165
+	ldr	lr, [sp, #36]
+	ldr	r0, [sp, #20]
+	rsb	r2, lr, r5
+	rsbs	r3, r2, #0
+	adc	r3, r3, r2
+	tst	r3, r0
+	beq	.L2166
+	ldr	r1, [sp, #24]
+	cmp	r1, #0
+	beq	.L2166
+	movw	lr, #3918
+	ldr	r0, [sp, #28]
+	ldrh	r2, [r4, lr]
+	add	r1, r0, r8
+	mls	r1, r2, r5, r1
+	cmp	r1, r2
+	bne	.L2165
+.L2166:
+	add	r1, sp, #56
+	mov	r2, #0
+	mov	r0, r5
+	str	r3, [sp, #0]
+	bl	log2phys
+	mov	r0, r9
+	bl	get_new_active_ppa
+	ldr	r2, [r4, #3964]
+	ldr	r1, [r4, #3968]
+	mov	ip, #36
+	ldr	lr, [r4, #3964]
+	mla	r1, ip, r2, r1
+	movw	r2, #3924
+	ldrh	r2, [r4, r2]
+	str	r5, [r1, #16]
+	str	r0, [r1, #4]
+	mul	r0, lr, r2
+	bic	r0, r0, #3
+	str	r0, [sp, #44]
+	ldr	r0, [r7, #-932]
+	ldr	lr, [sp, #44]
+	str	r0, [sp, #48]
+	add	r6, r0, lr
+	movw	r0, #3922
+	ldr	lr, [r4, #3964]
+	ldrh	r0, [r4, r0]
+	str	r6, [r1, #12]
+	mul	lr, lr, r0
+	ldr	r0, [r7, #-952]
+	str	lr, [sp, #32]
+	bic	lr, lr, #3
+	add	lr, r0, lr
+	mov	r0, r6
+	str	lr, [r1, #8]
+	mov	r1, #0
+	str	ip, [sp, #4]
+	bl	ftl_memset
+	ldr	r0, [sp, #12]
+	ldr	ip, [sp, #4]
+	rsb	r3, r0, r5
+	rsbs	r0, r3, #0
+	adc	r0, r0, r3
+	ldr	r3, [sp, #0]
+	str	r0, [sp, #32]
+	orrs	r0, r0, r3
+	beq	.L2167
+	ldr	r1, [sp, #32]
+	cmp	r1, #0
+	beq	.L2168
+	movw	r2, #3918
+	mov	r0, r8
+	ldrh	fp, [r4, r2]
+	mov	r1, fp
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #28]
+	rsb	fp, r1, fp
+	str	r1, [sp, #40]
+	cmp	fp, r3
+	movcs	fp, r3
+	b	.L2169
+.L2168:
+	cmp	r3, #0
+	beq	.L2169
+	ldr	r3, [sp, #28]
+	movw	lr, #3918
+	add	fp, r3, r8
+	ldrh	r3, [r4, lr]
+	mls	fp, r3, r5, fp
+	ldr	r3, [sp, #32]
+	str	r3, [sp, #40]
+	uxth	fp, fp
+.L2169:
+	movw	lr, #3918
+	ldrh	r3, [r4, lr]
+	cmp	fp, r3
+	bne	.L2170
+	ldr	r3, [sp, #32]
+	ldr	r0, [sl, #3964]
+	cmp	r3, #0
+	ldr	r2, [sl, #3968]
+	muleq	r1, r5, fp
+	ldreq	r3, [sp, #8]
+	ldrne	r1, [sp, #8]
+	rsbeq	r1, r8, r1
+	addeq	r1, r3, r1, asl #9
+	ldr	r3, [sp, #20]
+	cmp	r3, #0
+	mov	r3, #36
+	mla	r3, r3, r0, r2
+	strne	r1, [r3, #8]
+	bne	.L2173
+	ldr	r0, [r3, #8]
+	movw	r3, #3922
+	ldrh	r2, [sl, r3]
+	b	.L2195
+.L2170:
+	ldr	r2, [sp, #56]
+	mov	r3, #36
+	cmn	r2, #1
+	beq	.L2174
+	ldr	r1, [r4, #3964]
+	add	r0, sp, #60
+	str	r2, [sp, #64]
+	ldr	r2, [r4, #3968]
+	str	r5, [sp, #76]
+	mla	r3, r3, r1, r2
+	mov	r1, #1
+	ldr	r2, [r3, #8]
+	ldr	r3, [r3, #12]
+	str	r2, [sp, #68]
+	mov	r2, #0
+	str	r3, [sp, #72]
+	bl	FlashReadPages
+	ldr	r3, [sp, #60]
+	cmn	r3, #1
+	ldreq	r3, [r7, #-1640]
+	addeq	r3, r3, #1
+	streq	r3, [r7, #-1640]
+	beq	.L2176
+	ldr	r3, [r6, #8]
+	cmp	r3, r5
+	beq	.L2176
+	ldr	r3, [r7, #-1640]
+	mov	r2, r5
+	ldr	r0, .L2197+28
+	add	r3, r3, #1
+	str	r3, [r7, #-1640]
+	ldr	r1, [r6, #8]
+	bl	printk
+	b	.L2176
+.L2174:
+	ldr	r1, [r4, #3964]
+	ldr	r2, [r4, #3968]
+	mla	r3, r3, r1, r2
+	mov	r1, #0
+	ldr	r0, [r3, #8]
+	movw	r3, #3922
+	ldrh	r2, [r4, r3]
+	bl	ftl_memset
+.L2176:
+	ldr	r3, [sp, #32]
+	ldr	r1, [r4, #3964]
+	ldr	r2, [r4, #3968]
+	cmp	r3, #0
+	mov	r3, #36
+	mla	r3, r3, r1, r2
+	ldrne	r0, [r3, #8]
+	ldrne	r3, [sp, #40]
+	ldrne	r1, [sp, #8]
+	addne	r0, r0, r3, asl #9
+	bne	.L2196
+.L2177:
+	movw	lr, #3918
+	ldr	r0, [r3, #8]
+	ldrh	r1, [r4, lr]
+	ldr	r3, [sp, #8]
+	mul	r1, r1, r5
+	rsb	r1, r8, r1
+	add	r1, r3, r1, asl #9
+.L2196:
+	mov	r2, fp, asl #9
+	b	.L2195
+.L2167:
+	ldr	r3, [sp, #20]
+	ldr	r2, [r4, #3964]
+	cmp	r3, #0
+	ldr	r3, [r4, #3968]
+	mla	ip, ip, r2, r3
+	beq	.L2178
+	movw	lr, #3918
+	ldr	r0, [sp, #8]
+	ldrh	r3, [r4, lr]
+	mul	r3, r3, r5
+	rsb	r3, r8, r3
+	add	r3, r0, r3, asl #9
+	str	r3, [ip, #8]
+	b	.L2173
+.L2178:
+	movw	r2, #3918
+	ldr	r3, [sp, #8]
+	ldrh	r1, [r4, r2]
+	movw	lr, #3922
+	ldr	r0, [ip, #8]
+	ldrh	r2, [r4, lr]
+	mul	r1, r1, r5
+	rsb	r1, r8, r1
+	add	r1, r3, r1, asl #9
+.L2195:
+	bl	memcpy
+.L2173:
+	ldr	r3, .L2197+32
+	ldr	r1, [sp, #48]
+	ldr	r0, [sp, #44]
+	strh	r3, [r1, r0]	@ movhi
+	ldr	r3, [r7, #-1804]
+	str	r5, [r6, #8]
+	add	r5, r5, #1
+	str	r3, [r6, #4]
+	add	r3, r3, #1
+	cmn	r3, #1
+	str	r3, [r7, #-1804]
+	moveq	r3, #0
+	streq	r3, [r7, #-1804]
+	ldr	r3, [sp, #56]
+	str	r3, [r6, #12]
+	ldrh	r3, [r9, #0]
+	strh	r3, [r6, #2]	@ movhi
+	ldr	r3, [r4, #3964]
+	add	r3, r3, #1
+	str	r3, [r4, #3964]
+	ldr	r3, [sp, #24]
+	add	r3, r3, #1
+	str	r3, [sp, #24]
+.L2164:
+	ldr	r3, [sp, #24]
+	ldr	lr, [sp, #52]
+	cmp	r3, lr
+	bne	.L2180
+.L2165:
+	ldr	r3, [sp, #16]
+	mov	r6, r9
+	ldr	lr, [sp, #24]
+	ldr	r2, [r4, #3964]
+	rsb	r3, lr, r3
+	ldr	r0, [sp, #20]
+	str	r3, [sp, #16]
+	ldr	r3, [r7, #-980]
+	cmp	r2, r3
+	orrcs	r0, r0, #1
+	uxtb	r3, r0
+	cmp	r3, #0
+	bne	.L2181
+	ldrh	r2, [r9, #4]
+	cmp	r2, #0
+	bne	.L2191
+.L2181:
+	bl	FtlCacheWriteBack
+	ldr	lr, [sp, #16]
+	mov	r3, #0
+	str	r3, [sl, #3964]
+	cmp	lr, #1
+	ldr	r3, [sp, #20]
+	movls	r3, #0
+.L2191:
+	str	r3, [sp, #20]
+.L2194:
+	ldr	r3, [sp, #16]
+	ldr	r9, .L2197
+	cmp	r3, #0
+	bne	.L2183
+	mov	r0, r3
+	ldr	lr, [sp, #12]
+	ldr	r3, [sp, #36]
+	rsb	r1, lr, r3
+	bl	ftl_do_gc
+	ldr	r3, .L2197+36
+	ldrh	r3, [r9, r3]
+	cmp	r3, #31
+	bhi	.L2156
+	ldr	r2, .L2197+40
+	mov	r3, #128
+	mov	r4, #16
+	strh	r3, [r9, r2]	@ movhi
+	ldr	r2, .L2197+44
+	strh	r3, [r9, r2]	@ movhi
+.L2184:
+	mov	r0, #0
+	mov	r1, #1
+	bl	ftl_do_gc
+	ldr	r3, [r9, #-2092]
+	cmp	r3, #0
+	bne	.L2156
+	subs	r4, r4, #1
+	bne	.L2184
+.L2156:
+	mov	r0, #0
+	add	sp, sp, #100
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2198:
+	.align	2
+.L2197:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2-2000
+	.word	-1948
+	.word	.LANCHOR1
+	.word	.LANCHOR2-1952
+	.word	-1996
+	.word	.LC139
+	.word	-3947
+	.word	-2004
+	.word	-1198
+	.word	-1200
+	.fnend
+	.size	ftl_write.part.22, .-ftl_write.part.22
+	.align	2
+	.global	ftl_write
+	.type	ftl_write, %function
+ftl_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r0
+	mov	r0, r1
+	mov	r1, r2
+	mov	r2, r3
+	ldr	r3, .L2204
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	movne	r0, #0
+	bxne	lr
+	cmp	ip, #16
+	bne	.L2201
+	add	r0, r0, #256
+	b	FtlVendorPartWrite
+.L2201:
+	ldr	r3, .L2204+4
+	add	ip, r1, r0
+	ldr	r3, [r3, #3952]
+	cmp	ip, r3
+	bhi	.L2203
+	b	ftl_write.part.22
+.L2203:
+	mvn	r0, #0
+	bx	lr
+.L2205:
+	.align	2
+.L2204:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_write, .-ftl_write
+	.align	2
+	.global	FtlWrite
+	.type	FtlWrite, %function
+FtlWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_write
+	.fnend
+	.size	FtlWrite, .-FtlWrite
+	.align	2
+	.global	ftl_sys_write
+	.type	ftl_sys_write, %function
+ftl_sys_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r1
+	mov	r3, r2
+	add	r1, r0, #256
+	mov	r2, ip
+	mov	r0, #16
+	b	ftl_write
+	.fnend
+	.size	ftl_sys_write, .-ftl_sys_write
+	.align	2
+	.global	StorageSysDataStore
+	.type	StorageSysDataStore, %function
+StorageSysDataStore:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r1
+	mov	r5, r0
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, #1
+	mov	r0, r5
+	bl	ftl_sys_write
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+	.fnend
+	.size	StorageSysDataStore, .-StorageSysDataStore
+	.align	2
+	.global	ftl_vendor_write
+	.type	ftl_vendor_write, %function
+ftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	ip, r1
+	mov	r3, r2
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r1, r4
+	mov	r0, #16
+	mov	r2, ip
+	ldmfd	sp!, {r4, lr}
+	b	ftl_write
+	.fnend
+	.size	ftl_vendor_write, .-ftl_vendor_write
+	.align	2
+	.global	FlashBootVendorWrite
+	.type	FlashBootVendorWrite, %function
+FlashBootVendorWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, r5
+	mov	r0, r6
+	bl	ftl_vendor_write
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
+	.align	2
+	.global	ftl_read
+	.type	ftl_read, %function
+ftl_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	cmp	r0, #16
+	.pad #68
+	sub	sp, sp, #68
+	mov	r4, r1
+	mov	r8, r3
+	str	r2, [sp, #28]
+	bne	.L2212
+	add	r0, r1, #256
+	mov	r1, r2
+	mov	r2, r3
+	bl	FtlVendorPartRead
+	str	r0, [sp, #16]
+	b	.L2213
+.L2212:
+	ldr	r3, [sp, #28]
+	add	r3, r3, r1
+	str	r3, [sp, #20]
+	ldr	r3, .L2242
+	ldr	r1, [sp, #20]
+	ldr	r2, [r3, #3952]
+	cmp	r1, r2
+	mvnhi	r3, #0
+	strhi	r3, [sp, #16]
+	bhi	.L2213
+	movw	r2, #3918
+	mov	r0, r4
+	ldrh	r5, [r3, r2]
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #20]
+	mov	r1, r5
+	str	r0, [sp, #12]
+	sub	r0, r3, #1
+	bl	__aeabi_uidiv
+	ldr	r1, [sp, #12]
+	rsb	r3, r1, #1
+	ldr	r1, [sp, #28]
+	add	r3, r3, r0
+	str	r3, [sp, #8]
+	ldr	r3, .L2242+4
+	mov	fp, r0
+	ldr	r0, [sp, #12]
+	ldr	r2, [r3, #-1812]
+	add	r2, r1, r2
+	ldr	r1, [sp, #8]
+	str	r2, [r3, #-1812]
+	ldr	r2, [r3, #-1840]
+	add	r2, r1, r2
+	mov	r1, fp
+	str	r2, [r3, #-1840]
+	bl	FtlCacheMetchLpa
+	cmp	r0, #0
+	beq	.L2214
+	bl	FtlCacheWriteBack
+.L2214:
+	mov	r9, #0
+	ldr	r6, [sp, #12]
+	str	r9, [sp, #32]
+	mov	r5, r9
+	str	r9, [sp, #16]
+	ldr	r7, .L2242
+	b	.L2237
+.L2231:
+	mov	r2, #0
+	mov	r0, r6
+	add	r1, sp, #60
+	bl	log2phys
+	ldr	r2, [sp, #60]
+	cmn	r2, #1
+	bne	.L2238
+	b	.L2241
+.L2219:
+	mla	r0, r0, r6, sl
+	cmp	r0, r4
+	bcc	.L2218
+	ldr	r2, [sp, #20]
+	cmp	r0, r2
+	bcs	.L2218
+	rsb	r0, r4, r0
+	mov	r1, #0
+	mov	r2, #512
+	str	r3, [sp, #4]
+	add	r0, r8, r0, asl #9
+	bl	ftl_memset
+	ldr	r3, [sp, #4]
+.L2218:
+	add	sl, sl, #1
+	b	.L2216
+.L2241:
+	mov	sl, #0
+	movw	r3, #3918
+.L2216:
+	ldrh	r0, [r7, r3]
+	cmp	sl, r0
+	bcc	.L2219
+	b	.L2220
+.L2238:
+	ldr	r3, .L2242+4
+	mov	sl, #36
+	ldr	r1, [r3, #-976]
+	mla	sl, sl, r5, r1
+	ldr	r1, [sp, #12]
+	cmp	r6, r1
+	str	r2, [sl, #4]
+	movw	r2, #3918
+	bne	.L2221
+	ldr	r3, [r3, #-948]
+	mov	r0, r4
+	str	r3, [sl, #8]
+	ldrh	r3, [r7, r2]
+	mov	r1, r3
+	str	r3, [sp, #4]
+	bl	__aeabi_uidivmod
+	ldr	r3, [sp, #4]
+	str	r1, [sp, #36]
+	rsb	r2, r1, r3
+	ldr	r1, [sp, #28]
+	cmp	r2, r1
+	movcc	r1, r2
+	str	r1, [sp, #32]
+	cmp	r1, r3
+	streq	r8, [sl, #8]
+	b	.L2222
+.L2221:
+	cmp	r6, fp
+	ldrneh	r3, [r7, r2]
+	mulne	r3, r3, r6
+	bne	.L2239
+	ldr	r3, [r3, #-944]
+	ldrh	r2, [r7, r2]
+	ldr	r1, [sp, #20]
+	str	r3, [sl, #8]
+	mul	r3, r2, r6
+	rsb	r9, r3, r1
+	cmp	r9, r2
+	bne	.L2222
+.L2239:
+	rsb	r3, r4, r3
+	add	r3, r8, r3, asl #9
+	str	r3, [sl, #8]
+.L2222:
+	movw	r3, #3924
+	ldr	r2, .L2242+4
+	ldrh	r3, [r7, r3]
+	str	r6, [sl, #16]
+	ldr	r2, [r2, #-936]
+	mul	r3, r3, r5
+	add	r5, r5, #1
+	bic	r3, r3, #3
+	add	r3, r2, r3
+	str	r3, [sl, #12]
+.L2220:
+	ldr	r3, [sp, #8]
+	add	r6, r6, #1
+	subs	r3, r3, #1
+	str	r3, [sp, #8]
+	beq	.L2224
+	movw	r3, #3844
+	ldrh	r3, [r7, r3]
+	cmp	r5, r3, asl #3
+	bne	.L2237
+.L2224:
+	cmp	r5, #0
+	beq	.L2237
+	ldr	sl, .L2242+4
+	mov	r1, r5
+	mov	r2, #0
+	ldr	r0, [sl, #-976]
+	bl	FlashReadPages
+	ldr	r3, [sp, #36]
+	str	r6, [sp, #52]
+	mov	r6, r5
+	mov	r3, r3, asl #9
+	str	r3, [sp, #40]
+	ldr	r3, [sp, #32]
+	mov	r3, r3, asl #9
+	str	r3, [sp, #44]
+	mov	r3, r9, asl #9
+	str	r3, [sp, #48]
+	mov	r3, #0
+	str	r3, [sp, #24]
+.L2230:
+	ldr	r3, [sp, #24]
+	mov	r5, #36
+	ldr	r1, [sp, #12]
+	mul	r5, r5, r3
+	ldr	r3, [sl, #-976]
+	add	r3, r3, r5
+	ldr	r2, [r3, #16]
+	cmp	r2, r1
+	bne	.L2226
+	ldr	r1, [r3, #8]
+	ldr	r3, [sl, #-948]
+	cmp	r1, r3
+	bne	.L2227
+	ldr	r3, [sp, #40]
+	mov	r0, r8
+	ldr	r2, [sp, #44]
+	add	r1, r1, r3
+	b	.L2240
+.L2226:
+	cmp	r2, fp
+	bne	.L2227
+	ldr	r1, [r3, #8]
+	ldr	r3, [sl, #-944]
+	cmp	r1, r3
+	bne	.L2227
+	movw	r2, #3918
+	ldrh	r0, [r7, r2]
+	ldr	r2, [sp, #48]
+	mul	r0, r0, fp
+	rsb	r0, r4, r0
+	add	r0, r8, r0, asl #9
+.L2240:
+	bl	memcpy
+.L2227:
+	ldr	r3, [sl, #-976]
+	add	r0, r3, r5
+	ldr	r2, [r3, r5]
+	cmn	r2, #1
+	streq	r2, [sp, #16]
+	ldreq	r1, [sl, #-1640]
+	addeq	r1, r1, #1
+	streq	r1, [sl, #-1640]
+	ldr	r3, [r3, r5]
+	cmp	r3, #256
+	bne	.L2229
+	ldr	r0, [r0, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L2229:
+	ldr	r3, [sp, #24]
+	add	r3, r3, #1
+	str	r3, [sp, #24]
+	cmp	r3, r6
+	bne	.L2230
+	ldr	r6, [sp, #52]
+	mov	r5, #0
+.L2237:
+	ldr	r3, [sp, #8]
+	cmp	r3, #0
+	bne	.L2231
+	ldr	r3, .L2242+8
+	ldr	r2, .L2242+4
+	ldrh	r3, [r2, r3]
+	cmp	r3, #0
+	beq	.L2213
+	ldr	r0, [sp, #8]
+	mov	r1, #1
+	bl	ftl_do_gc
+.L2213:
+	ldr	r0, [sp, #16]
+	add	sp, sp, #68
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2243:
+	.align	2
+.L2242:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1142
+	.fnend
+	.size	ftl_read, .-ftl_read
+	.align	2
+	.global	FtlRead
+	.type	FtlRead, %function
+FtlRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	ftl_read
+	.fnend
+	.size	FtlRead, .-FtlRead
+	.align	2
+	.global	ftl_sys_read
+	.type	ftl_sys_read, %function
+ftl_sys_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	ip, r1
+	mov	r3, r2
+	add	r1, r0, #256
+	mov	r2, ip
+	mov	r0, #16
+	b	ftl_read
+	.fnend
+	.size	ftl_sys_read, .-ftl_sys_read
+	.align	2
+	.global	StorageSysDataLoad
+	.type	StorageSysDataLoad, %function
+StorageSysDataLoad:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r2, #512
+	mov	r5, r0
+	mov	r4, r1
+	mov	r0, r1
+	mov	r1, #0
+	bl	ftl_memset
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, #1
+	mov	r0, r5
+	bl	ftl_sys_read
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+	.fnend
+	.size	StorageSysDataLoad, .-StorageSysDataLoad
+	.align	2
+	.global	ftl_vendor_read
+	.type	ftl_vendor_read, %function
+ftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	ip, r1
+	mov	r3, r2
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r1, r4
+	mov	r0, #16
+	mov	r2, ip
+	ldmfd	sp!, {r4, lr}
+	b	ftl_read
+	.fnend
+	.size	ftl_vendor_read, .-ftl_vendor_read
+	.align	2
+	.global	FlashBootVendorRead
+	.type	FlashBootVendorRead, %function
+FlashBootVendorRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	mov	r5, r1
+	mov	r4, r2
+	bl	rknand_device_lock
+	mov	r2, r4
+	mov	r1, r5
+	mov	r0, r6
+	bl	ftl_vendor_read
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+	.fnend
+	.size	FlashBootVendorRead, .-FlashBootVendorRead
+	.align	2
+	.type	rk_ftl_vendor_ops.constprop.26, %function
+rk_ftl_vendor_ops.constprop.26:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r2, #0
+	mov	r3, r0
+	mov	r2, r3
+	mov	r0, r1
+	mov	r1, #128
+	beq	.L2250
+	b	FlashBootVendorWrite
+.L2250:
+	b	FlashBootVendorRead
+	.fnend
+	.size	rk_ftl_vendor_ops.constprop.26, .-rk_ftl_vendor_ops.constprop.26
+	.align	2
+	.global	FlashLoadFactorBbt
+	.type	FlashLoadFactorBbt, %function
+FlashLoadFactorBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	movw	r2, #3062
+	ldr	r9, .L2260
+	movw	r3, #3060
+	ldr	r4, .L2260+4
+	.pad #52
+	sub	sp, sp, #52
+	mov	r1, #0
+	mvn	r7, #0
+	ldrh	r3, [r9, r3]
+	add	r0, r4, #228
+	ldrh	r8, [r9, r2]
+	mov	r2, #16
+	mov	r6, #0
+	mul	r8, r8, r3
+	bl	ftl_memset
+	ldr	r3, [r4, #224]
+	str	r6, [sp, #20]
+	mov	r4, r6
+	str	r3, [sp, #24]
+	uxth	r8, r8
+	add	r3, r8, r7
+	uxth	r3, r3
+	str	r3, [sp, #4]
+	b	.L2252
+.L2258:
+	ldr	r5, [sp, #4]
+	sub	r3, r8, #12
+	mul	fp, r8, r4
+	ldr	sl, .L2260+4
+	b	.L2253
+.L2256:
+	add	r2, fp, r5
+	mov	r1, #1
+	add	r0, sp, #12
+	str	r3, [sp, #0]
+	mov	r2, r2, asl #10
+	str	r2, [sp, #16]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [sp, #12]
+	ldr	r3, [sp, #0]
+	cmn	r2, #1
+	beq	.L2254
+	ldr	r2, [sl, #224]
+	ldrh	r1, [r2, #0]
+	movw	r2, #61664
+	cmp	r1, r2
+	bne	.L2254
+	ldr	r0, .L2260+8
+	mov	r1, r4
+	mov	r2, r5
+	add	r6, r6, #1
+	bl	printk
+	ldr	r3, .L2260+4
+	uxth	r6, r6
+	add	r3, r3, r4, asl #1
+	strh	r5, [r3, #228]	@ movhi
+	b	.L2255
+.L2254:
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L2253:
+	cmp	r5, r3
+	bgt	.L2256
+.L2255:
+	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
+	add	r4, r4, #1
+	cmp	r3, r6
+	uxtb	r4, r4
+	moveq	r7, #0
+.L2252:
+	ldrb	r3, [r9, #3762]	@ zero_extendqisi2
+	cmp	r3, r4
+	bhi	.L2258
+	mov	r0, r7
+	add	sp, sp, #52
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2261:
+	.align	2
+.L2260:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC140
+	.fnend
+	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
+	.align	2
+	.global	FlashReadFacBbtData
+	.type	FlashReadFacBbtData, %function
+FlashReadFacBbtData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2272
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, lr}
+	mov	r6, r1
+	mov	r9, r2
+	movw	r1, #3062
+	movw	r2, #3060
+	ldrh	r8, [r3, r1]
+	ldrh	r2, [r3, r2]
+	.pad #40
+	sub	sp, sp, #40
+	ldr	r7, .L2272+4
+	mov	r4, r0
+	mul	r8, r8, r2
+	ldr	r3, [r7, #144]
+	str	r3, [sp, #12]
+	ldr	r3, [r7, #224]
+	uxth	r8, r8
+	sub	r5, r8, #1
+	mul	sl, r8, r6
+	str	r3, [sp, #16]
+	uxth	r5, r5
+	sub	r8, r8, #16
+	b	.L2263
+.L2269:
+	mov	r1, #1
+	add	r3, r5, sl
+	add	r0, sp, #4
+	mov	r2, r1
+	mov	r3, r3, asl #10
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	cmn	r3, #1
+	beq	.L2264
+	ldr	r3, [r7, #224]
+	ldrh	r2, [r3, #0]
+	movw	r3, #61664
+	cmp	r2, r3
+	bne	.L2264
+	cmp	r4, #0
+	moveq	r0, r4
+	beq	.L2265
+	cmp	r6, #0
+	ldreq	r3, .L2272+4
+	moveq	r0, #1
+	beq	.L2266
+	b	.L2267
+.L2268:
+	ldr	r2, [r3, #144]
+	ubfx	r1, r6, #5, #16
+	and	lr, r6, #31
+	add	r6, r6, #1
+	ldr	ip, [r2, r1, asl #2]
+	uxth	r6, r6
+	orr	ip, ip, r0, asl lr
+	str	ip, [r2, r1, asl #2]
+.L2266:
+	ldr	r2, [r3, #152]
+	cmp	r6, r2
+	bcc	.L2268
+.L2267:
+	ldr	r3, .L2272+4
+	mov	r2, r9
+	mov	r0, r4
+	ldr	r1, [r3, #144]
+	bl	memcpy
+	mov	r2, #4
+	ldr	r0, .L2272+8
+	mov	r1, r4
+	mov	r3, r2
+	bl	rknand_print_hex
+	mov	r0, #0
+	b	.L2265
+.L2264:
+	sub	r5, r5, #1
+	uxth	r5, r5
+.L2263:
+	cmp	r5, r8
+	bgt	.L2269
+	mvn	r0, #0
+.L2265:
+	add	sp, sp, #40
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
+.L2273:
+	.align	2
+.L2272:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC141
+	.fnend
+	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
+	.align	2
+	.global	FlashGetBadBlockList
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2281
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r0
+	ldr	r3, [r3, #3624]
+	ldr	r6, .L2281+4
+	ldrb	r2, [r3, #13]	@ zero_extendqisi2
+	ldrh	r4, [r3, #14]
+	ldr	r0, [r6, #132]
+	mul	r4, r4, r2
+	uxth	r4, r4
+	add	r2, r4, #7
+	mov	r2, r2, lsr #3
+	bl	FlashReadFacBbtData
+	cmn	r0, #1
+	beq	.L2280
+	mov	r2, #0
+	mov	r0, r4, lsr #4
+	mov	r3, r2
+	sub	r4, r4, #1
+	mov	r1, #1
+	b	.L2276
+.L2278:
+	ldr	ip, [r6, #132]
+	mov	r8, r2, lsr #5
+	and	r7, r2, #31
+	ldr	ip, [ip, r8, asl #2]
+	ands	ip, ip, r1, asl r7
+	movne	ip, r3, asl #1
+	addne	r3, r3, #1
+	uxthne	r3, r3
+	strneh	r2, [r5, ip]	@ movhi
+	cmp	r3, r0
+	bcs	.L2280
+	add	r2, r2, #1
+	uxth	r2, r2
+.L2276:
+	cmp	r2, r4
+	blt	.L2278
+	b	.L2275
+.L2280:
+	mov	r3, #0
+.L2275:
+	mov	r3, r3, asl #1
+	mvn	r2, #0
+	mov	r0, #0
+	strh	r2, [r5, r3]	@ movhi
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2282:
+	.align	2
+.L2281:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
+	.global	FtlMakeBbt
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	ldr	r4, .L2301
+	ldr	r5, [r4, #-2092]
+	cmp	r5, #0
+	bne	.L2284
+	ldr	r7, .L2301+4
+	bl	FtlBbtMemInit
+	ldr	r6, .L2301+8
+	bl	FtlLoadFactoryBbt
+	add	sl, r7, #12
+	b	.L2285
+.L2291:
+	ldrh	r3, [sl], #2
+	movw	r2, #65535
+	ldr	r0, [r4, #-964]
+	movw	fp, #3908
+	ldr	r9, [r4, #-940]
+	cmp	r3, r2
+	str	r0, [r4, #184]
+	str	r9, [r4, #188]
+	beq	.L2286
+	ldrh	r8, [r6, fp]
+	mov	r1, #1
+	mov	r2, r1
+	ldr	r0, .L2301+12
+	mla	r8, r8, r5, r3
+	mov	r3, r8, asl #10
+	str	r3, [r4, #180]
+	bl	FlashReadPages
+	ldrh	r2, [r6, fp]
+	ldr	r0, [r7, #28]
+	add	r2, r2, #7
+	ldr	r1, [r4, #184]
+	mov	r2, r2, lsr #3
+	bl	memcpy
+	b	.L2287
+.L2286:
+	mov	r1, r5
+	bl	FlashGetBadBlockList
+	ldr	r0, [r4, #184]
+	ldr	r1, [r7, #28]
+	bl	FtlBbt2Bitmap
+	ldrh	fp, [r6, fp]
+.L2289:
+	sub	fp, fp, #1
+	uxth	fp, fp
+.L2300:
+	movw	r8, #3908
+	ldrh	r0, [r6, r8]
+	mla	r0, r0, r5, fp
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L2289
+	mov	r1, #0
+	mov	r2, #16
+	strh	fp, [sl, #-2]	@ movhi
+	ldr	r0, [r4, #-940]
+	bl	ftl_memset
+	ldr	r3, .L2301+16
+	strh	r3, [r9, #0]	@ movhi
+	mov	r3, #0
+	str	r3, [r9, #4]
+	ldrh	r3, [sl, #-2]
+	ldrh	r8, [r6, r8]
+	strh	r3, [r9, #2]	@ movhi
+	ldrh	r3, [sl, #-2]
+	ldr	r1, [r7, #28]
+	ldr	r0, [r4, #184]
+	mla	r8, r8, r5, r3
+	mov	r3, r8, asl #10
+	str	r3, [r4, #180]
+	ldr	r3, .L2301+20
+	ldrh	r2, [r4, r3]
+	mov	r2, r2, asl #2
+	bl	memcpy
+	mov	r1, #1
+	mov	r2, r1
+	ldr	r0, .L2301+12
+	bl	FlashEraseBlocks
+	mov	r1, #1
+	mov	r3, r1
+	ldr	r0, .L2301+12
+	mov	r2, r1
+	bl	FlashProgPages
+	ldr	r3, [r4, #176]
+	cmn	r3, #1
+	bne	.L2287
+	uxth	r0, r8
+	bl	FtlBbmMapBadBlock
+	b	.L2300
+.L2287:
+	uxth	r0, r8
+	add	r5, r5, #1
+	bl	FtlBbmMapBadBlock
+	add	r7, r7, #4
+.L2285:
+	movw	r3, #3866
+	ldrh	r3, [r6, r3]
+	cmp	r5, r3
+	bcc	.L2291
+	mov	r4, #0
+	ldr	r7, .L2301+8
+	movw	r6, #3926
+	b	.L2292
+.L2293:
+	mov	r0, r4
+	add	r4, r4, #1
+	bl	FtlBbmMapBadBlock
+	uxth	r4, r4
+.L2292:
+	ldrh	r3, [r7, r6]
+	ldr	r5, .L2301+8
+	cmp	r3, r4
+	bhi	.L2293
+	movw	r7, #3988
+	movw	r6, #3976
+	ldrh	r4, [r5, r7]
+	sub	r4, r4, #1
+	uxth	r4, r4
+	b	.L2294
+.L2299:
+	mov	r0, r4
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L2295
+	mov	r0, r4
+	bl	FlashTestBlk
+	cmp	r0, #0
+	beq	.L2296
+	mov	r0, r4
+	bl	FtlBbmMapBadBlock
+	b	.L2295
+.L2296:
+	ldrh	r2, [r5, r6]
+	movw	r3, #65535
+	cmp	r2, r3
+	streqh	r4, [r5, r6]	@ movhi
+.L2297:
+	ldrne	r2, .L2301+8
+	movwne	r3, #3980
+	strneh	r4, [r2, r3]	@ movhi
+	bne	.L2298
+.L2295:
+	sub	r4, r4, #1
+	uxth	r4, r4
+.L2294:
+	ldrh	r3, [r5, r7]
+	sub	r3, r3, #48
+	cmp	r4, r3
+	bgt	.L2299
+.L2298:
+	ldr	r4, .L2301+8
+	movw	r6, #3976
+	ldr	r3, .L2301
+	movw	r5, #3980
+	mov	r7, #0
+	movw	r8, #3978
+	str	r7, [r4, #3984]
+	mov	r2, #2
+	ldr	r0, [r3, #-2088]
+	mov	r1, #1
+	ldrh	r3, [r4, r6]
+	strh	r7, [r4, r8]	@ movhi
+	mov	r3, r3, asl #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r4, r5]
+	mov	r3, r3, asl #10
+	str	r3, [r0, #40]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r4, r6]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r4, r5]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r4, #3984]
+	ldrh	r2, [r4, r5]
+	add	r3, r3, #1
+	str	r3, [r4, #3984]
+	ldrh	r3, [r4, r6]
+	strh	r7, [r4, r8]	@ movhi
+	strh	r2, [r4, r6]	@ movhi
+	strh	r3, [r4, r5]	@ movhi
+	bl	FtlBbmTblFlush
+.L2284:
+	mov	r0, #0
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2302:
+	.align	2
+.L2301:
+	.word	.LANCHOR2
+	.word	.LANCHOR0+3976
+	.word	.LANCHOR0
+	.word	.LANCHOR2+176
+	.word	-3872
+	.word	-1032
+	.fnend
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	2
+	.type	FtlLowFormat.part.24, %function
+FtlLowFormat.part.24:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	movw	r6, #3948
+	ldr	r5, .L2324
+	mov	r1, #0
+	ldr	r4, .L2324+4
+	ldrh	r2, [r5, r6]
+	ldr	r0, [r4, #-904]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldrh	r2, [r5, r6]
+	mov	r1, #0
+	ldr	r0, [r4, #-1036]
+	mov	r2, r2, asl #2
+	bl	ftl_memset
+	ldr	r0, [r5, #3848]
+	mov	r3, #0
+	str	r3, [r4, #-1808]
+	str	r3, [r4, #-1804]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	beq	.L2304
+	bl	FtlMakeBbt
+.L2304:
+	mov	r3, #0
+	ldr	ip, .L2324
+	movw	r0, #3918
+	ldr	r2, .L2324+4
+	ldr	r1, .L2324+8
+	b	.L2305
+.L2306:
+	ldr	lr, [r2, #-948]
+	mvn	r4, r3
+	orr	r4, r3, r4, asl #16
+	str	r4, [lr, r3, asl #2]
+	ldr	lr, [r2, #-944]
+	str	r1, [lr, r3, asl #2]
+	add	r3, r3, #1
+	uxth	r3, r3
+.L2305:
+	ldrh	lr, [ip, r0]
+	ldr	r8, .L2324
+	cmp	r3, lr, asl #7
+	blt	.L2306
+	movw	r3, #3852
+	mov	r5, #0
+	ldrh	r6, [r8, r3]
+	movw	r7, #3854
+	b	.L2307
+.L2308:
+	mov	r0, r6
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	r5, r5, r0
+	uxth	r5, r5
+.L2307:
+	ldrh	r3, [r8, r7]
+	ldr	r4, .L2324
+	cmp	r3, r6
+	bhi	.L2308
+	movw	r3, #3844
+	ldrh	r1, [r4, r3]
+	sub	r3, r5, #3
+	cmp	r3, r1, asl #1
+	blt	.L2309
+	mov	r0, r5
+	movw	r6, #3854
+	bl	__aeabi_uidiv
+	ldr	r3, [r4, #3944]
+	add	r0, r0, r3
+	uxth	r0, r0
+	bl	FtlSysBlkNumInit
+	ldr	r0, [r4, #3848]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	movw	r3, #3852
+	ldrh	r5, [r4, r3]
+	b	.L2310
+.L2311:
+	mov	r0, r5
+	mov	r1, #1
+	bl	FtlLowFormatEraseBlock
+	add	r5, r5, #1
+	uxth	r5, r5
+.L2310:
+	ldrh	r3, [r4, r6]
+	cmp	r3, r5
+	bhi	.L2311
+.L2309:
+	mov	r4, #0
+	ldr	r8, .L2324
+	mov	r6, r4
+	movw	r7, #3852
+	b	.L2312
+.L2313:
+	mov	r0, r6
+	mov	r1, #0
+	bl	FtlLowFormatEraseBlock
+	add	r6, r6, #1
+	uxth	r6, r6
+	add	r4, r4, r0
+	uxth	r4, r4
+.L2312:
+	ldrh	r3, [r8, r7]
+	ldr	r5, .L2324
+	cmp	r3, r6
+	bhi	.L2313
+	movw	r3, #3854
+	ldr	r8, .L2324+4
+	ldrh	r3, [r5, r3]
+	ldr	fp, [r5, #3856]
+	ldr	r9, .L2324+12
+	str	r3, [r8, #-988]
+	movw	r3, #3844
+	ldrh	r6, [r5, r3]
+	mov	r0, fp
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ubfx	sl, r0, #5, #16
+	mov	r7, r0
+	add	r3, sl, #36
+	strh	r3, [r8, r9]	@ movhi
+	mov	r3, #24
+	str	r0, [r5, #3972]
+	mul	r3, r3, r6
+	cmp	r4, r3
+	ble	.L2314
+	rsb	r0, r4, fp
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	str	r0, [r5, #3972]
+	mov	r0, r0, lsr #5
+	add	r0, r0, #24
+	strh	r0, [r8, r9]	@ movhi
+.L2314:
+	ldr	r3, .L2324
+	ldr	r3, [r3, #3836]
+	cmp	r3, #1
+	bne	.L2315
+	mov	r0, r4
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldr	r8, .L2324+4
+	ldr	r5, .L2324+12
+	ldrh	r9, [r8, r5]
+	uxtah	r0, r9, r0
+	add	r9, r9, r0, lsr #2
+	strh	r9, [r8, r5]	@ movhi
+.L2315:
+	ldr	r3, .L2324
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2316
+	mov	r0, r4
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldr	r8, .L2324+4
+	ldr	r5, .L2324+12
+	ldrh	r9, [r8, r5]
+	uxtah	r0, r9, r0
+	add	r9, r9, r0, lsr #2
+	strh	r9, [r8, r5]	@ movhi
+.L2316:
+	ldr	r0, .L2324
+	mov	r3, #3904
+	ldrh	r3, [r0, r3]
+	cmp	r3, #0
+	beq	.L2317
+	ldr	r1, .L2324+4
+	ldr	r2, .L2324+12
+	ldrh	ip, [r1, r2]
+	add	ip, ip, r3, lsr #1
+	strh	ip, [r1, r2]	@ movhi
+	mul	ip, r6, r3
+	cmp	ip, r4
+	strgt	r7, [r0, #3972]
+	addgt	r3, r3, #32
+	addgt	sl, sl, r3
+	strgth	sl, [r1, r2]	@ movhi
+.L2317:
+	ldr	r4, .L2324+4
+	ldr	r5, .L2324
+	ldr	r3, .L2324+12
+	ldr	r2, [r5, #3972]
+	ldrh	r3, [r4, r3]
+	rsb	r3, r3, r2
+	mul	r6, r6, r3
+	movw	r3, #3912
+	ldrh	r3, [r5, r3]
+	str	r6, [r4, #212]
+	mul	r6, r3, r6
+	movw	r3, #3918
+	ldrh	r3, [r5, r3]
+	str	r6, [r5, #3972]
+	mul	r6, r3, r6
+	str	r6, [r5, #3952]
+	bl	FtlBbmTblFlush
+	movw	r3, #3854
+	ldrh	r2, [r5, r3]
+	mov	r1, #0
+	ldr	r0, [r4, #-2020]
+	ldr	r6, .L2324+16
+	mov	r2, r2, asl #1
+	bl	ftl_memset
+	ldr	r2, .L2324+20
+	mvn	r1, #0
+	mov	r3, #0
+	str	r3, [r4, #-1848]
+	strh	r1, [r4, r2]	@ movhi
+	ldr	r1, .L2324+24
+	strb	r3, [r4, #-1758]
+	strb	r3, [r4, #-1756]
+	strh	r3, [r4, r1]	@ movhi
+	sub	r1, r1, #236
+	strb	r3, [r4, #-1994]
+	strh	r3, [r4, r1]	@ movhi
+	mov	r1, #255
+	strh	r3, [r4, r6]	@ movhi
+	mov	r3, #1
+	strb	r3, [r4, #-1992]
+	movw	r3, #3852
+	ldrh	r2, [r5, r3]
+	ldr	r0, [r4, #-1844]
+	mov	r2, r2, lsr #3
+	bl	ftl_memset
+.L2318:
+	ldr	r5, .L2324+4
+	sub	r0, r5, #2000
+	bl	make_superblock
+	ldrb	r3, [r4, #-1993]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2319
+	ldrh	r3, [r4, r6]
+	mvn	r1, #0
+	ldr	r2, [r4, #-2020]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r3, [r4, r6]
+	add	r3, r3, #1
+	strh	r3, [r4, r6]	@ movhi
+	b	.L2318
+.L2319:
+	ldr	r3, [r5, #-1808]
+	ldr	r1, [r5, #-2020]
+	ldr	r6, .L2324+28
+	str	r3, [r5, #-1988]
+	add	r3, r3, #1
+	str	r3, [r5, #-1808]
+	ldr	r3, .L2324+32
+	ldrh	r0, [r5, r3]
+	ldr	r3, .L2324+16
+	ldrh	r2, [r5, r3]
+	mov	r2, r2, asl #1
+	strh	r0, [r1, r2]	@ movhi
+	mov	r2, #0
+	ldr	r0, .L2324+36
+	ldrh	r3, [r5, r3]
+	strb	r2, [r5, #-1946]
+	add	r3, r3, #1
+	strh	r2, [r5, r0]	@ movhi
+	strh	r3, [r5, r6]	@ movhi
+	mov	r3, #1
+	strb	r3, [r5, #-1944]
+.L2320:
+	ldr	r4, .L2324+4
+	sub	r0, r4, #1952
+	bl	make_superblock
+	ldrb	r3, [r5, #-1945]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2321
+	ldrh	r3, [r5, r6]
+	mvn	r1, #0
+	ldr	r2, [r5, #-2020]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldrh	r3, [r5, r6]
+	add	r3, r3, #1
+	strh	r3, [r5, r6]	@ movhi
+	b	.L2320
+.L2321:
+	ldr	r3, [r4, #-1808]
+	mvn	r5, #0
+	ldr	r2, [r4, #-2020]
+	str	r3, [r4, #-1940]
+	add	r3, r3, #1
+	str	r3, [r4, #-1808]
+	ldr	r3, .L2324+40
+	ldrh	r1, [r4, r3]
+	ldr	r3, .L2324+28
+	ldrh	r3, [r4, r3]
+	mov	r3, r3, asl #1
+	strh	r1, [r2, r3]	@ movhi
+	ldr	r3, .L2324+44
+	strh	r5, [r4, r3]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	ldr	r3, .L2324+48
+	mov	r2, #0
+	strh	r0, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	ldr	r2, [r4, #212]
+	strh	r5, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	strh	r2, [r4, r3]	@ movhi
+	ldr	r3, [r4, #-1808]
+	str	r3, [r4, #-1768]
+	add	r3, r3, #1
+	str	r3, [r4, #-1808]
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	ldmnefd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+	ldr	r3, .L2324+52
+	mov	r2, #1
+	str	r2, [r3, #2996]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2325:
+	.align	2
+.L2324:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	168778952
+	.word	-1780
+	.word	-2000
+	.word	-1764
+	.word	-1762
+	.word	-1952
+	.word	-1996
+	.word	-1950
+	.word	-1948
+	.word	-1904
+	.word	-1776
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlLowFormat.part.24, .-FtlLowFormat.part.24
+	.align	2
+	.global	FtlLowFormat
+	.type	FtlLowFormat, %function
+FtlLowFormat:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L2328
+	ldr	r3, [r3, #-2092]
+	cmp	r3, #0
+	bne	.L2327
+	bl	FtlLowFormat.part.24
+.L2327:
+	mov	r0, #0
+	ldmfd	sp!, {r3, pc}
+.L2329:
+	.align	2
+.L2328:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlLowFormat, .-FtlLowFormat
+	.align	2
+	.global	HynixGetReadRetryDefault
+	.type	HynixGetReadRetryDefault, %function
+HynixGetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2415
+	mvn	r2, #83
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r4, r0
+	cmp	r4, #2
+	strb	r0, [r3, #0]
+	strb	r2, [r3, #4]
+	mvn	r0, #82
+	mvn	r1, #81
+	mvn	r2, #80
+	.pad #68
+	sub	sp, sp, #68
+	strb	r0, [r3, #5]
+	strb	r1, [r3, #6]
+	strb	r2, [r3, #7]
+	bne	.L2331
+	mvn	r2, #88
+	strb	r2, [r3, #4]
+	ldr	r3, .L2415+4
+	mvn	r2, #8
+	strb	r2, [r3, #3025]
+	b	.L2387
+.L2331:
+	cmp	r4, #3
+	bne	.L2333
+	mvn	r2, #79
+	strb	r2, [r3, #4]
+	mvn	r2, #78
+	strb	r2, [r3, #5]
+	mvn	r2, #77
+	strb	r2, [r3, #6]
+	mvn	r2, #76
+	strb	r2, [r3, #7]
+	mvn	r2, #75
+	strb	r2, [r3, #8]
+	mvn	r2, #74
+	strb	r2, [r3, #9]
+	mvn	r2, #73
+	strb	r2, [r3, #10]
+	mvn	r2, #72
+	b	.L2410
+.L2333:
+	cmp	r4, #4
+	bne	.L2334
+	mvn	ip, #51
+	strb	r0, [r3, #9]
+	strb	ip, [r3, #4]
+	mvn	ip, #64
+	strb	r1, [r3, #10]
+	strb	ip, [r3, #5]
+	mvn	ip, #85
+	strb	ip, [r3, #6]
+	mvn	ip, #84
+	strb	ip, [r3, #7]
+	mvn	ip, #50
+	strb	ip, [r3, #8]
+.L2410:
+	mov	r6, #8
+	strb	r2, [r3, #11]
+	mov	r5, r6
+	b	.L2332
+.L2334:
+	cmp	r4, #5
+	bne	.L2335
+	mov	r2, #56
+	mov	r6, #8
+	strb	r2, [r3, #4]
+	mov	r2, #57
+	strb	r2, [r3, #5]
+	mov	r2, #58
+	strb	r2, [r3, #6]
+	mov	r2, #59
+	strb	r2, [r3, #7]
+	b	.L2409
+.L2335:
+	cmp	r4, #6
+	bne	.L2336
+	mov	r2, #14
+	mov	r6, #12
+	strb	r2, [r3, #4]
+	mov	r2, #15
+	strb	r2, [r3, #5]
+	mov	r2, #16
+	strb	r2, [r3, #6]
+	mov	r2, #17
+	strb	r2, [r3, #7]
+	b	.L2409
+.L2336:
+	cmp	r4, #7
+	bne	.L2387
+	mvn	r2, #79
+	mov	r6, #12
+	strb	r2, [r3, #4]
+	mov	r5, #10
+	mvn	r2, #78
+	strb	r2, [r3, #5]
+	mvn	r2, #77
+	strb	r2, [r3, #6]
+	mvn	r2, #76
+	strb	r2, [r3, #7]
+	mvn	r2, #75
+	strb	r2, [r3, #8]
+	mvn	r2, #74
+	strb	r2, [r3, #9]
+	mvn	r2, #73
+	strb	r2, [r3, #10]
+	mvn	r2, #72
+	strb	r2, [r3, #11]
+	mvn	r2, #43
+	strb	r2, [r3, #12]
+	mvn	r2, #42
+	strb	r2, [r3, #13]
+	b	.L2332
+.L2387:
+	mov	r6, #7
+.L2409:
+	mov	r5, #4
+.L2332:
+	sub	r3, r4, #1
+	cmp	r3, #1
+	bhi	.L2405
+	b	.L2413
+.L2343:
+	add	r2, fp, r8
+	add	r4, fp, #20
+	mov	r7, #0
+	mov	r5, #55
+	ldrb	r2, [r2, #3764]	@ zero_extendqisi2
+	add	r4, r4, r2, asl #6
+	add	r2, fp, r2, asl #3
+	ldrb	sl, [r2, #868]	@ zero_extendqisi2
+	ldr	r1, [r2, #864]
+	add	sl, sl, #8
+	add	sl, r1, sl, asl #8
+.L2339:
+	add	r2, fp, r7
+	str	r5, [sl, #8]
+	mov	r0, #80
+	ldrb	r2, [r2, #4]	@ zero_extendqisi2
+	str	r2, [sl, #4]
+	str	r3, [sp, #12]
+	bl	NandcDelayns
+	ldr	r2, [sl, #0]
+	strb	r2, [r4, r7]
+	add	r7, r7, #1
+	ldr	r3, [sp, #12]
+	uxtb	r2, r7
+	cmp	r2, r6
+	bcc	.L2339
+	mov	r2, #0
+	b	.L2340
+.L2341:
+	ldrb	r7, [r0, r1, asl #2]	@ zero_extendqisi2
+	ldrb	r5, [r4, r2]	@ zero_extendqisi2
+	add	r5, r7, r5
+	strb	r5, [ip, r1, asl #3]
+	add	r1, r1, #1
+	cmp	r1, #7
+	bne	.L2341
+	add	r2, r2, #1
+	cmp	r2, #4
+	beq	.L2342
+.L2340:
+	mov	r1, #1
+	add	ip, r4, r2
+	add	r0, r2, r9
+	b	.L2341
+.L2342:
+	add	r8, r8, #1
+	mov	r2, #0
+	strb	r2, [r4, #16]
+	strb	r2, [r4, #24]
+	uxtb	r8, r8
+	strb	r2, [r4, #32]
+	strb	r2, [r4, #40]
+	strb	r2, [r4, #48]
+	strb	r2, [r4, #41]
+	strb	r2, [r4, #49]
+	b	.L2337
+.L2413:
+	ldr	r9, .L2415+8
+	mov	r3, r6
+	mov	r8, #0
+	mov	r6, r5
+.L2337:
+	ldr	fp, .L2415
+	ldrb	r2, [fp, #3762]	@ zero_extendqisi2
+	cmp	r2, r8
+	bhi	.L2343
+	mov	r5, r6
+	mov	r6, r3
+	b	.L2344
+.L2405:
+	sub	r3, r4, #3
+	cmp	r3, #4
+	bhi	.L2344
+	mul	r3, r6, r5
+	mov	sl, #0
+	mov	r7, sl
+	str	r6, [sp, #48]
+	mov	r2, r3, asr #2
+	mov	r3, r3, asl #4
+	str	r2, [sp, #24]
+	str	r3, [sp, #52]
+	b	.L2345
+.L2386:
+	add	r3, r1, sl
+	ldrb	r6, [r3, #3764]	@ zero_extendqisi2
+	add	r3, r1, r6, asl #3
+	mov	r0, r6
+	ldrb	fp, [r3, #868]	@ zero_extendqisi2
+	ldr	r9, [r3, #864]
+	mov	r3, #255
+	add	fp, fp, #8
+	add	r8, r9, fp, asl #8
+	str	r3, [r8, #8]
+	str	r1, [sp, #12]
+	bl	NandcWaitFlashReady
+	ldr	r1, [sp, #12]
+	cmp	r4, #7
+	addeq	r1, r1, #28
+	moveq	r3, #160
+	addne	r1, r1, #20
+	addne	r1, r1, r6, asl #6
+	strne	r1, [sp, #28]
+	mlaeq	r3, r3, r6, r1
+	streq	r3, [sp, #28]
+	cmp	r4, #4
+	mov	r3, #54
+	str	r3, [r8, #8]
+	bne	.L2348
+	mov	r3, #255
+	str	r3, [r8, #4]
+	mov	r3, #64
+	str	r3, [r9, fp, asl #8]
+	mov	r3, #204
+	b	.L2411
+.L2348:
+	sub	r3, r4, #5
+	cmp	r3, #1
+	ldrls	r3, .L2415
+	ldrlsb	r3, [r3, #4]	@ zero_extendqisi2
+	strls	r3, [r8, #4]
+	movls	r3, #82
+	bls	.L2412
+.L2350:
+	mov	r3, #174
+	str	r3, [r8, #4]
+	mov	r3, #176
+	str	r7, [r9, fp, asl #8]
+.L2411:
+	str	r3, [r8, #4]
+	mov	r3, #77
+.L2412:
+	cmp	r4, #6
+	str	r3, [r9, fp, asl #8]
+	mov	r0, r6
+	mov	r3, #22
+	str	r3, [r8, #8]
+	mov	r3, #23
+	str	r3, [r8, #8]
+	mov	r3, #4
+	str	r3, [r8, #8]
+	mov	r3, #25
+	str	r3, [r8, #8]
+	moveq	r3, #31
+	str	r7, [r8, #8]
+	str	r7, [r8, #4]
+	str	r7, [r8, #4]
+	streq	r3, [r8, #4]
+	mov	r3, #2
+	strne	r7, [r8, #4]
+	str	r3, [r8, #4]
+	mov	r3, #48
+	str	r7, [r8, #4]
+	str	r3, [r8, #8]
+	bl	NandcWaitFlashReady
+	sub	r3, r4, #5
+	cmp	r3, #1
+	str	r3, [sp, #36]
+	movls	r1, #16
+	bls	.L2354
+	cmp	r4, #7
+	moveq	r1, #32
+	movne	r1, #2
+.L2354:
+	ldr	r3, .L2415+12
+	ldr	r2, [r3, #144]
+	mov	r3, #0
+.L2355:
+	ldr	r0, [r8, #0]
+	strb	r0, [r2, r3]
+	add	r3, r3, #1
+	uxtb	r0, r3
+	cmp	r0, r1
+	bcc	.L2355
+	cmp	r4, #7
+	bne	.L2356
+	mov	r3, #0
+.L2358:
+	ldrb	r1, [r2, #0]	@ zero_extendqisi2
+	cmp	r1, #12
+	beq	.L2357
+	ldrb	r1, [r2, #1]	@ zero_extendqisi2
+	cmp	r1, #10
+	beq	.L2357
+	add	r3, r3, #1
+	add	r2, r2, #4
+	uxtb	r3, r3
+	cmp	r3, #8
+	bne	.L2358
+	b	.L2359
+.L2357:
+	cmp	r3, #6
+	bls	.L2360
+.L2359:
+	ldr	r0, .L2415+16
+	mov	r1, #0
+	bl	printk
+.L2361:
+	b	.L2361
+.L2356:
+	cmp	r4, #6
+	bne	.L2360
+	mov	r1, #8
+.L2362:
+	ldrb	r3, [r2], #1	@ zero_extendqisi2
+	cmp	r3, #12
+	beq	.L2360
+	ldrb	r3, [r2, #7]	@ zero_extendqisi2
+	cmp	r3, #4
+	beq	.L2360
+	sub	r1, r1, #1
+	uxtb	r1, r1
+	cmp	r1, #0
+	bne	.L2362
+	b	.L2414
+.L2364:
+	b	.L2364
+.L2360:
+	ldr	r3, .L2415+12
+	mov	r2, #0
+	ldr	ip, [r3, #144]
+	str	ip, [sp, #40]
+.L2365:
+	ldr	r1, [r8, #0]
+	ldr	lr, [sp, #40]
+	ldr	ip, [sp, #52]
+	strb	r1, [lr, r2]
+	add	r2, r2, #1
+	cmp	r2, ip
+	blt	.L2365
+	ldr	r2, [sp, #24]
+	ldr	r1, [r3, #144]
+	mov	r3, #8
+	mov	ip, r2, asl #2
+	mov	lr, r2, asl #3
+	add	r1, r1, ip
+	str	ip, [sp, #32]
+.L2367:
+	mov	r2, #0
+	mov	r0, r2
+.L2366:
+	ldr	ip, [r1, r2]
+	add	r0, r0, #1
+	mvn	ip, ip
+	str	ip, [r1, r2]
+	ldr	ip, [sp, #24]
+	add	r2, r2, #4
+	cmp	r0, ip
+	blt	.L2366
+	subs	r3, r3, #1
+	add	r1, r1, lr
+	bne	.L2367
+	str	r3, [sp, #16]
+	str	sl, [sp, #60]
+	b	.L2368
+.L2372:
+	mov	lr, #1
+	mov	r0, #0
+	mov	ip, lr, asl r2
+	mov	lr, r0
+	mov	sl, #16
+	str	r3, [sp, #4]
+	str	sl, [sp, #20]
+.L2370:
+	ldr	r3, [sp, #56]
+	ldr	r3, [r3, r0]
+	and	sl, ip, r3
+	ldr	r3, [sp, #20]
+	cmp	sl, ip
+	ldr	sl, [sp, #32]
+	addeq	lr, lr, #1
+	subs	r3, r3, #1
+	add	r0, r0, sl
+	str	r3, [sp, #20]
+	bne	.L2370
+	cmp	lr, #8
+	add	r2, r2, #1
+	orrhi	r1, r1, ip
+	cmp	r2, #32
+	ldr	r3, [sp, #4]
+	bne	.L2372
+	ldr	ip, [sp, #16]
+	ldr	r2, [sp, #24]
+	add	ip, ip, #1
+	ldr	sl, [sp, #44]
+	cmp	ip, r2
+	str	ip, [sp, #16]
+	str	r1, [sl, r3]
+	add	r3, r3, #4
+	bge	.L2373
+.L2368:
+	ldr	sl, .L2415+12
+	mov	r1, #0
+	mov	r2, r1
+	ldr	sl, [sl, #144]
+	add	ip, sl, r3
+	str	ip, [sp, #56]
+	str	sl, [sp, #44]
+	b	.L2372
+.L2373:
+	ldr	r3, .L2415+12
+	ldr	sl, [sp, #60]
+	ldr	r1, [r3, #144]
+	mov	r3, #0
+	mov	r2, r3
+.L2375:
+	ldr	r0, [r1, r3]
+	add	r3, r3, #4
+	cmp	r0, #0
+	addeq	r2, r2, #1
+	cmp	r3, #32
+	bne	.L2375
+	cmp	r2, #7
+	ble	.L2376
+	ldr	r0, .L2415+20
+	mov	r2, #1
+	mov	r3, #1024
+	bl	rknand_print_hex
+	ldr	r0, .L2415+16
+	mov	r1, #0
+	bl	printk
+.L2377:
+	b	.L2377
+.L2376:
+	cmp	r4, #6
+	moveq	r0, #4
+	streq	r0, [sp, #16]
+	beq	.L2378
+	cmp	r4, #7
+	moveq	lr, #10
+	movne	lr, #8
+	str	lr, [sp, #16]
+.L2378:
+	cmp	r5, #0
+	ldr	r0, [sp, #40]
+	subne	r3, r5, #1
+	mov	r2, #0
+	moveq	r1, #1
+	streq	r1, [sp, #20]
+	uxtbne	r3, r3
+	ldr	r1, [sp, #28]
+	addne	r3, r3, #1
+	strne	r3, [sp, #20]
+	b	.L2381
+.L2382:
+	ldrb	lr, [ip], #1	@ zero_extendqisi2
+	strb	lr, [r1, r3]
+	add	r3, r3, #1
+	uxtb	lr, r3
+	cmp	lr, r5
+	bcc	.L2382
+	ldr	r3, [sp, #20]
+	add	r2, r2, #1
+	ldr	ip, [sp, #16]
+	add	r0, r0, r3
+	ldr	r3, [sp, #48]
+	add	r1, r1, ip
+	cmp	r2, r3
+	bge	.L2383
+.L2381:
+	mov	ip, r0
+	mov	r3, #0
+	b	.L2382
+.L2383:
+	mov	r3, #255
+	mov	r0, r6
+	str	r3, [r8, #8]
+	bl	NandcWaitFlashReady
+	ldr	ip, [sp, #36]
+	cmp	ip, #1
+	movhi	r3, #56
+	strhi	r3, [r8, #8]
+	bhi	.L2385
+	mov	r3, #54
+	str	r3, [r8, #8]
+	ldr	r3, .L2415
+	mov	r0, sl
+	mvn	r1, #0
+	ldrb	r3, [r3, #4]	@ zero_extendqisi2
+	str	r3, [r8, #4]
+	mov	r3, #22
+	str	r7, [r9, fp, asl #8]
+	str	r3, [r8, #8]
+	bl	FlashReadCmd
+.L2385:
+	mov	r0, r6
+	add	sl, sl, #1
+	bl	NandcWaitFlashReady
+	uxtb	sl, sl
+.L2345:
+	ldr	r1, .L2415
+	ldrb	r3, [r1, #3762]	@ zero_extendqisi2
+	cmp	r3, sl
+	bhi	.L2386
+	ldr	r6, [sp, #48]
+.L2344:
+	ldr	r3, .L2415
+	strb	r5, [r3, #1]
+	strb	r6, [r3, #2]
+	add	sp, sp, #68
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2414:
+	ldr	r0, .L2415+16
+	bl	printk
+	b	.L2364
+.L2416:
+	.align	2
+.L2415:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR1+3008
+	.word	.LANCHOR2
+	.word	.LC142
+	.word	.LC143
+	.fnend
+	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
+	.align	2
+	.global	FlashGetReadRetryDefault
+	.type	FlashGetReadRetryDefault, %function
+FlashGetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, lr}
+	.save {r3, lr}
+	subs	r3, r0, #0
+	ldmeqfd	sp!, {r3, pc}
+	sub	r2, r3, #1
+	cmp	r2, #6
+	bhi	.L2419
+	ldmfd	sp!, {r3, lr}
+	b	HynixGetReadRetryDefault
+.L2419:
+	cmp	r3, #49
+	bne	.L2420
+	ldr	r0, .L2421
+	mov	r2, #64
+	ldr	r1, .L2421+4
+	strb	r3, [r0, #0]
+	mov	r3, #4
+	strb	r3, [r0, #1]
+	mov	r3, #15
+	strb	r3, [r0, #2]
+	add	r0, r0, #4
+	bl	memcpy
+	ldmfd	sp!, {r3, pc}
+.L2420:
+	ldmfd	sp!, {r3, lr}
+	b	FlashGetReadRetryDefault.part.25
+.L2422:
+	.align	2
+.L2421:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+2924
+	.fnend
+	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
+	.align	2
+	.global	FlashInit
+	.type	FlashInit, %function
+FlashInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r7, r0
+	mov	r0, #32768
+	ldr	r5, .L2474
+	bl	ftl_malloc
+	ldr	r6, .L2474+4
+	mov	r4, #0
+	str	r0, [r5, #144]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r5, #132]
+	mov	r0, #4096
+	bl	ftl_malloc
+	str	r0, [r5, #224]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r5, #216]
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r3, #50
+	str	r4, [r5, #152]
+	strb	r3, [r5, #160]
+	strb	r3, [r6, #853]
+	mov	r3, #128
+	str	r4, [r5, #164]
+	str	r3, [r6, #856]
+	mov	r3, #60
+	strb	r4, [r6, #3773]
+	strb	r3, [r5, #148]
+	strb	r4, [r6, #852]
+	str	r0, [r5, #220]
+	mov	r0, r7
+	bl	NandcInit
+	ldr	r5, .L2474+8
+	mov	r7, #44
+.L2427:
+	uxtb	r0, r4
+	mov	r1, r5
+	bl	FlashReadIDRaw
+	cmp	r4, #0
+	bne	.L2424
+	ldrb	r3, [r6, #2980]	@ zero_extendqisi2
+	sub	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L2465
+	ldrb	r3, [r6, #2981]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L2466
+.L2424:
+	ldrb	r3, [r5, #0]	@ zero_extendqisi2
+	add	r4, r4, #1
+	cmp	r3, #181
+	streqb	r7, [r5, #0]
+	cmp	r4, #4
+	add	r5, r5, #8
+	bne	.L2427
+	ldr	r4, .L2474+4
+	ldrb	r3, [r4, #2980]	@ zero_extendqisi2
+	cmp	r3, #173
+	beq	.L2428
+	ldr	r0, [r4, #3776]
+	bl	NandcSetDdrMode
+.L2428:
+	ldr	r5, .L2474+4
+	mov	r1, #0
+	mov	r2, #852
+	mov	r0, r5
+	bl	ftl_memset
+	ldr	r3, .L2474+12
+	str	r3, [r4, #3624]
+	mov	r3, #0
+	strb	r3, [r4, #860]
+	ldrb	r3, [r4, #2981]	@ zero_extendqisi2
+	cmp	r3, #161
+	cmpne	r3, #241
+	beq	.L2429
+	cmp	r3, #218
+	beq	.L2429
+	cmp	r3, #209
+	beq	.L2429
+	cmp	r3, #220
+	bne	.L2430
+	ldrb	r2, [r5, #2983]	@ zero_extendqisi2
+	cmp	r2, #149
+	bne	.L2430
+.L2429:
+	ldr	r2, .L2474+4
+	mov	r1, #1
+	mov	r0, #16
+	ldr	ip, .L2474+16
+	strb	r1, [r2, #852]
+	ldr	r1, .L2474
+	strb	r0, [r2, #853]
+	strb	r3, [ip, #3038]
+	strb	r0, [r1, #148]
+	ldrb	r0, [r2, #2980]	@ zero_extendqisi2
+	cmp	r0, #152
+	strb	r0, [ip, #3037]
+	bne	.L2431
+	ldrb	r0, [r2, #2984]	@ zero_extendqisi2
+	sxtb	r0, r0
+	cmp	r0, #0
+	movge	r0, #24
+	strgeb	r0, [r1, #148]
+.L2431:
+	ldr	r1, [r2, #3784]
+	ldr	r2, .L2474+20
+	cmp	r1, r2
+	ldreq	r2, .L2474
+	moveq	r1, #16
+	streqb	r1, [r2, #148]
+	cmp	r3, #218
+	bne	.L2433
+	ldr	r3, .L2474+16
+	movw	r2, #3050
+	mov	r1, #2048
+	strh	r1, [r3, r2]	@ movhi
+	mvn	r2, #37
+	b	.L2471
+.L2433:
+	cmp	r3, #220
+	bne	.L2434
+	ldr	r3, .L2474+16
+	movw	r2, #3050
+	mov	r1, #4096
+	strh	r1, [r3, r2]	@ movhi
+	mvn	r2, #35
+.L2471:
+	strb	r2, [r3, #3038]
+.L2434:
+	ldr	r1, .L2474+24
+	mov	r2, #32
+	ldr	r0, .L2474+28
+	bl	memcpy
+	ldr	r0, .L2474+12
+	mov	r2, #32
+	add	r1, r0, #144
+	bl	memcpy
+.L2430:
+	ldr	r4, .L2474+4
+	ldrb	r3, [r4, #852]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2435
+	bl	FlashLoadPhyInfoInRam
+	cmp	r0, #0
+	bne	.L2436
+	ldr	r3, [r4, #3624]
+	ldrh	r0, [r3, #16]
+	ubfx	r0, r0, #8, #3
+	strb	r0, [r4, #3772]
+	tst	r0, #1
+	bne	.L2436
+	mov	r3, #1
+	strb	r3, [r4, #3773]
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	NandcSetMode
+.L2436:
+	ldr	r4, .L2474+4
+	ldr	r3, [r4, #3624]
+	ldrb	r3, [r3, #26]	@ zero_extendqisi2
+	strb	r3, [r4, #928]
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L2435
+	ldr	r3, [r4, #3776]
+	cmp	r3, #0
+	beq	.L2438
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	b	.L2472
+.L2438:
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #3772]	@ zero_extendqisi2
+.L2472:
+	bl	NandcSetMode
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L2435
+	ldr	r4, .L2474+4
+	mov	r0, #1
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+	ldr	r0, .L2474+32
+	ldr	r3, [r4, #3624]
+	ldrh	r1, [r3, #14]
+	bl	printk
+	bl	FlashLoadPhyInfoInRam
+	cmn	r0, #1
+	ldmeqfd	sp!, {r4, r5, r6, r7, r8, pc}
+	bl	FlashDieInfoInit
+	ldr	r3, [r4, #3624]
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	bl	FlashGetReadRetryDefault
+	ldr	r1, .L2474+36
+	ldr	r0, .L2474
+	ldr	r3, [r4, #3624]
+	ldrh	r1, [r0, r1]
+	ldrb	r2, [r3, #9]	@ zero_extendqisi2
+	add	r1, r1, #4080
+	add	r1, r1, #15
+	cmp	r2, r1, lsr #12
+	blt	.L2441
+	ldrh	r1, [r3, #14]
+	add	r1, r1, #255
+	cmp	r2, r1, lsr #8
+	bge	.L2442
+.L2441:
+	ldrh	r2, [r3, #14]
+	bic	r2, r2, #255
+	strh	r2, [r3, #14]	@ movhi
+.L2442:
+	ldr	r3, .L2474+4
+	ldrb	r3, [r3, #3772]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L2443
+	bl	FlashSavePhyInfo
+	ldr	r3, .L2474
+	mov	r0, #0
+	ldr	r1, [r3, #156]
+	bl	FlashDdrParaScan
+.L2443:
+	bl	FlashSavePhyInfo
+.L2435:
+	ldr	r4, .L2474+4
+	ldr	r5, .L2474
+	ldr	r3, [r4, #3624]
+	ldrb	r2, [r3, #26]	@ zero_extendqisi2
+	ldrh	r0, [r3, #10]
+	ldrb	r6, [r3, #18]	@ zero_extendqisi2
+	strb	r2, [r4, #928]
+	ldrh	r2, [r3, #16]
+	ubfx	r1, r2, #7, #1
+	strb	r1, [r4, #860]
+	ubfx	r1, r2, #3, #1
+	strb	r1, [r5, #172]
+	ubfx	r1, r2, #4, #1
+	ubfx	r2, r2, #8, #3
+	strb	r1, [r4, #3833]
+	strb	r2, [r4, #3772]
+	mov	r2, #0
+	ldrb	r1, [r3, #12]	@ zero_extendqisi2
+	str	r2, [r5, #168]
+	bl	__aeabi_idiv
+	mov	r1, r0
+	mov	r0, r6
+	bl	BuildFlashLsbPageTable
+	bl	FlashDieInfoInit
+	ldr	r3, [r4, #3624]
+	ldrh	r2, [r3, #16]
+	tst	r2, #64
+	beq	.L2444
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	strb	r0, [r4, #3761]
+	strb	r3, [r4, #3760]
+	ldrb	r3, [r4, #2]	@ zero_extendqisi2
+	strb	r3, [r5, #136]
+	sub	r3, r0, #1
+	uxtb	r3, r3
+	cmp	r3, #6
+	bhi	.L2445
+	ldr	r3, .L2474+40
+	str	r3, [r5, #168]
+	sub	r3, r0, #5
+	uxtb	r3, r3
+	cmp	r3, #1
+	movls	r3, #1
+	strls	r3, [r4, #3824]
+	bls	.L2447
+	cmp	r0, #7
+	addeq	r4, r4, #28
+	beq	.L2448
+.L2447:
+	ldr	r4, .L2474+44
+.L2448:
+	mov	r3, #0
+	mov	r2, r3
+.L2450:
+	ldrsb	r1, [r4, r2]
+	add	r2, r2, #1
+	cmp	r1, #0
+	addeq	r3, r3, #1
+	cmp	r2, #32
+	bne	.L2450
+	cmp	r3, #27
+	bls	.L2444
+	bl	FlashGetReadRetryDefault
+	bl	FlashSavePhyInfo
+	b	.L2444
+.L2445:
+	sub	r3, r0, #17
+	uxtb	r3, r3
+	cmp	r3, #2
+	bhi	.L2451
+	ldr	r3, .L2474+48
+	cmp	r0, #19
+	str	r3, [r5, #168]
+	mov	r3, #7
+	strb	r3, [r5, #136]
+	moveq	r3, #15
+	streqb	r3, [r5, #136]
+	b	.L2444
+.L2451:
+	cmp	r0, #33
+	cmpne	r0, #65
+	beq	.L2452
+	cmp	r0, #66
+	bne	.L2453
+.L2452:
+	ldr	r3, .L2474
+	mov	r1, #4
+	ldr	r2, .L2474+52
+	str	r2, [r3, #168]
+	ldr	r2, .L2474+4
+	strb	r1, [r2, #3760]
+	mov	r2, #7
+	strb	r2, [r3, #136]
+	b	.L2444
+.L2453:
+	cmp	r0, #67
+	cmpne	r0, #34
+	beq	.L2454
+	cmp	r0, #35
+	beq	.L2454
+	cmp	r0, #68
+	bne	.L2455
+.L2454:
+	ldr	r3, .L2474
+	cmp	r0, #35
+	cmpne	r0, #68
+	ldr	r2, .L2474+52
+	sub	r0, r0, #67
+	uxtb	r0, r0
+	str	r2, [r3, #168]
+	mov	r2, #7
+	strb	r2, [r3, #136]
+	moveq	r2, #17
+	streqb	r2, [r3, #136]
+	cmp	r0, #1
+	ldr	r3, .L2474+4
+	movls	r2, #4
+	movhi	r2, #5
+	strb	r2, [r3, #3760]
+	b	.L2444
+.L2455:
+	cmp	r0, #49
+	ldreq	r3, .L2474+56
+	streq	r3, [r5, #168]
+.L2444:
+	ldr	r2, .L2474+4
+	ldr	r3, .L2474+20
+	ldr	r1, [r2, #3784]
+	cmp	r1, r3
+	bne	.L2458
+	ldrb	r3, [r2, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	ldrne	r3, [r2, #3624]
+	movne	r1, #0
+	strneb	r1, [r3, #18]
+.L2458:
+	ldrb	r2, [r2, #2980]	@ zero_extendqisi2
+	ldr	r3, .L2474+4
+	cmp	r2, #44
+	bne	.L2459
+	ldrb	r2, [r3, #3773]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2459
+	ldr	r1, [r3, #3784]
+	ldr	r2, .L2474+20
+	cmp	r1, r2
+	bne	.L2460
+	ldrb	r3, [r3, #928]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2459
+.L2460:
+	ldr	r3, .L2474+4
+	mov	r2, #0
+	mov	r0, #1
+	strb	r2, [r3, #3773]
+	bl	FlashSetInterfaceMode
+	mov	r0, #1
+	bl	NandcSetMode
+.L2459:
+	mov	r0, #0
+	bl	flash_enter_slc_mode
+	ldr	r2, .L2474+4
+	ldrb	r3, [r2, #3772]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L2461
+	ldrb	r2, [r2, #3773]	@ zero_extendqisi2
+	cmp	r2, #0
+	bne	.L2462
+	tst	r3, #1
+	bne	.L2461
+.L2462:
+	ldr	r3, .L2474
+	mov	r0, #0
+	ldr	r1, [r3, #156]
+	bl	FlashDdrParaScan
+.L2461:
+	ldr	r4, .L2474+4
+	mov	r0, #0
+	bl	flash_exit_slc_mode
+	mov	r8, #16
+	movw	r6, #3062
+	ldr	r3, [r4, #3624]
+	ldrb	r0, [r3, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	add	r0, r4, #932
+	bl	FlashReadIdbDataRaw
+	ldr	r0, .L2474+60
+	strb	r8, [r4, #853]
+	bl	FlashTimingCfg
+	ldr	r5, [r4, #3624]
+	mov	r3, #3056
+	ldrb	r2, [r5, #12]	@ zero_extendqisi2
+	ldrh	r7, [r5, #14]
+	strh	r2, [r4, r3]	@ movhi
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	ldrb	r2, [r4, #3762]	@ zero_extendqisi2
+	str	r3, [r4, #3052]
+	ldr	r3, [r4, #2980]
+	str	r3, [r4, #3048]
+	movw	r3, #3058
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	ldrb	r2, [r5, #13]	@ zero_extendqisi2
+	strh	r7, [r4, r6]	@ movhi
+	strh	r2, [r4, r3]	@ movhi
+	add	r3, r3, #4
+	ldrh	r2, [r5, #10]
+	strh	r2, [r4, r3]	@ movhi
+	ldrb	r1, [r5, #12]	@ zero_extendqisi2
+	ldrh	r0, [r5, #10]
+	bl	__aeabi_idiv
+	movw	r3, #3066
+	mov	lr, #512
+	movw	r2, #3070
+	strh	r0, [r4, r3]	@ movhi
+	movw	r0, #3068
+	ldrb	ip, [r5, #9]	@ zero_extendqisi2
+	strh	ip, [r4, r0]	@ movhi
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
+	ldrh	r1, [r5, #10]
+	mul	r1, r1, r3
+	mov	r3, #3072
+	strh	lr, [r4, r3]	@ movhi
+	add	r3, r3, #2
+	ldrb	lr, [r4, #853]	@ zero_extendqisi2
+	strh	lr, [r4, r3]	@ movhi
+	uxth	r1, r1
+	ldrb	lr, [r4, #852]	@ zero_extendqisi2
+	strh	r1, [r4, r2]	@ movhi
+	cmp	lr, #1
+	bne	.L2464
+	mov	r7, r7, lsr #1
+	mov	ip, ip, asl #1
+	mov	r1, r1, asl #1
+	strb	r8, [r4, #853]
+	strh	r1, [r4, r2]	@ movhi
+	mov	r2, #8
+	strh	r7, [r4, r6]	@ movhi
+	strh	ip, [r4, r0]	@ movhi
+	strh	r2, [r4, r3]	@ movhi
+.L2464:
+	ldrb	r0, [r5, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	bl	ftl_flash_suspend
+	mov	r0, #0
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2465:
+	mvn	r0, #1
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2466:
+	mvn	r0, #1
+	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
+.L2475:
+	.align	2
+.L2474:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2980
+	.word	.LANCHOR1+2892
+	.word	.LANCHOR1
+	.word	1446522928
+	.word	.LANCHOR1+2796
+	.word	.LANCHOR0+896
+	.word	.LC144
+	.word	-898
+	.word	HynixReadRetrial
+	.word	.LANCHOR0+20
+	.word	MicronReadRetrial
+	.word	ToshibaReadRetrial
+	.word	SamsungReadRetrial
+	.word	150000
+	.fnend
+	.size	FlashInit, .-FlashInit
+	.align	2
+	.global	rk_ftl_init
+	.type	rk_ftl_init, %function
+rk_ftl_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r0, #2048
+	bl	ftl_malloc
+	ldr	r4, .L2480
+	mov	r5, #0
+	add	r1, r4, #460
+	str	r5, [r4, #128]
+	str	r5, [r4, #460]
+	str	r0, [r4, #456]
+	add	r0, r4, #128
+	bl	rknand_get_reg_addr
+	ldr	r3, [r4, #128]
+	cmp	r3, r5
+	mvneq	r4, #0
+	beq	.L2477
+	bl	rk_nandc_irq_init
+	ldr	r0, [r4, #456]
+	mov	r1, r5
+	mov	r2, r5
+	mov	r3, #2048
+	bl	FlashSramLoadStore
+	bl	rknand_flash_cs_init
+	ldr	r0, [r4, #128]
+	bl	FlashInit
+	subs	r4, r0, #0
+	bne	.L2478
+	bl	FtlInit
+.L2478:
+	ldr	r0, .L2480+4
+	mov	r1, r4
+	bl	printk
+.L2477:
+	mov	r0, r4
+	ldmfd	sp!, {r3, r4, r5, pc}
+.L2481:
+	.align	2
+.L2480:
+	.word	.LANCHOR2
+	.word	.LC145
+	.fnend
+	.size	rk_ftl_init, .-rk_ftl_init
+	.align	2
+	.global	FtlReInitForSDUpdata
+	.type	FtlReInitForSDUpdata, %function
+FtlReInitForSDUpdata:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2507
+	stmfd	sp!, {r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldrb	r4, [r3, #928]	@ zero_extendqisi2
+	cmp	r4, #0
+	movne	r0, #0
+	bne	.L2483
+	ldr	r5, .L2507+4
+	ldr	r0, [r5, #128]
+	bl	FlashInit
+	cmp	r0, #0
+	movne	r0, r4
+	bne	.L2483
+	bl	FlashLoadFactorBbt
+	cmp	r0, #0
+	beq	.L2484
+	bl	FlashMakeFactorBbt
+.L2484:
+	ldr	r0, [r5, #132]
+	bl	FlashReadIdbDataRaw
+	cmp	r0, #0
+	beq	.L2485
+	mov	r1, #0
+	mov	r2, #16
+	mov	r0, sp
+	bl	FlashReadFacBbtData
+	ldr	r1, [sp, #0]
+	mov	r3, #0
+	mov	r0, #1
+	mov	r2, r3
+.L2487:
+	ands	ip, r1, r0, asl r2
+	add	r2, r2, #1
+	addne	r3, r3, #1
+	cmp	r2, #16
+	bne	.L2487
+	cmp	r3, #6
+	ldrls	r3, .L2507
+	bls	.L2503
+	mov	r2, #0
+	mov	r0, #1
+.L2488:
+	ands	ip, r1, r0, asl r2
+	add	r2, r2, #1
+	addne	r3, r3, #1
+	cmp	r2, #24
+	bne	.L2488
+	cmp	r3, #17
+	ldr	r3, .L2507
+	movhi	r2, #36
+.L2503:
+	strb	r2, [r3, #853]
+	movw	r2, #3074
+	ldr	r3, .L2507
+	ldrb	r1, [r3, #853]	@ zero_extendqisi2
+	strh	r1, [r3, r2]	@ movhi
+.L2485:
+	ldr	r1, .L2507+8
+	mov	r4, #1
+	ldr	r0, .L2507+12
+	bl	printk
+	ldr	r0, .L2507+16
+	bl	FtlConstantsInit
+	bl	FtlVariablesInit
+	ldr	r3, .L2507
+	ldr	r0, [r3, #3848]
+	uxth	r0, r0
+	bl	FtlFreeSysBlkQueueInit
+	b	.L2492
+.L2494:
+	add	r4, r4, #1
+.L2492:
+	bl	FtlLoadBbt
+	cmp	r0, #0
+	bne	.L2505
+.L2493:
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	beq	.L2495
+.L2505:
+	bl	FtlLowFormat
+	cmp	r4, #3
+	bls	.L2494
+	b	.L2506
+.L2495:
+	ldr	r3, .L2507+20
+	mov	r2, #1
+	str	r2, [r3, #2996]
+	b	.L2483
+.L2506:
+	mvn	r0, #0
+.L2483:
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, pc}
+.L2508:
+	.align	2
+.L2507:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC79
+	.word	.LC78
+	.word	.LANCHOR0+3048
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
+	.align	2
+	.global	flash_boot_enter_slc_mode
+	.type	flash_boot_enter_slc_mode, %function
+flash_boot_enter_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L2511
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L2511+4
+	cmp	r2, r3
+	bxne	lr
+	b	flash_enter_slc_mode
+.L2512:
+	.align	2
+.L2511:
+	.word	.LANCHOR0
+	.word	1446522928
+	.fnend
+	.size	flash_boot_enter_slc_mode, .-flash_boot_enter_slc_mode
+	.align	2
+	.global	flash_boot_exit_slc_mode
+	.type	flash_boot_exit_slc_mode, %function
+flash_boot_exit_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L2515
+	ldr	r2, [r3, #3784]
+	ldr	r3, .L2515+4
+	cmp	r2, r3
+	bxne	lr
+	b	flash_exit_slc_mode
+.L2516:
+	.align	2
+.L2515:
+	.word	.LANCHOR0
+	.word	1446522928
+	.fnend
+	.size	flash_boot_exit_slc_mode, .-flash_boot_exit_slc_mode
+	.align	2
+	.global	IdBlockReadData
+	.type	IdBlockReadData, %function
+IdBlockReadData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, .L2522
+	mov	r6, r0
+	str	r2, [sp, #20]
+	mov	sl, r1
+	ldr	r0, .L2522+4
+	mov	r1, r6
+	ldr	r2, [r4, #3624]
+	ldr	r3, [r4, #856]
+	ldr	r8, .L2522+8
+	ldrb	r5, [r2, #9]	@ zero_extendqisi2
+	mov	r2, sl
+	mul	r5, r5, r3
+	bl	printk
+	ldr	r3, [r4, #3624]
+	mov	r0, r6
+	ldrb	r9, [r3, #9]	@ zero_extendqisi2
+	uxth	r5, r5
+	mov	r1, r5
+	mov	r5, #0
+	bl	__aeabi_uidivmod
+	mul	r2, r9, r1
+	rsb	ip, r1, r6
+	mov	r7, r1
+	str	ip, [sp, #12]
+	ubfx	r2, r2, #2, #2
+	b	.L2518
+.L2520:
+	add	r1, r5, r7
+	rsb	r3, r2, #4
+	ubfx	r1, r1, #2, #16
+	ldrb	r0, [r4, #928]	@ zero_extendqisi2
+	uxth	r3, r3
+	str	r3, [sp, #16]
+	add	r3, r4, r1, asl #1
+	cmp	r0, #0
+	add	r3, r3, #3072
+	add	r3, r3, #4
+	ldrh	r3, [r3, #0]
+	beq	.L2519
+	ldr	r0, [r4, #3784]
+	ldr	ip, .L2522+12
+	cmp	r0, ip
+	moveq	r3, r1
+.L2519:
+	ldr	ip, [sp, #12]
+	ldrb	r0, [r8, #148]	@ zero_extendqisi2
+	add	r2, r2, ip
+	ldrb	ip, [r4, #3832]	@ zero_extendqisi2
+	ldr	fp, [r8, #132]
+	mla	r2, r9, r3, r2
+	ldr	r3, [r4, #3624]
+	ldrb	r1, [r3, #9]	@ zero_extendqisi2
+	str	ip, [sp, #0]
+	stmib	sp, {r1, r2}
+	bl	FlashBchSel
+	mov	r0, #0
+	bl	flash_boot_enter_slc_mode
+	ldr	r2, [sp, #8]
+	ldr	r1, [sp, #4]
+	mov	r0, r2
+	bl	__aeabi_uidiv
+	mov	r2, fp
+	mov	r1, r0
+	mov	r0, #0
+	mov	r3, r0
+	bl	FlashReadPage
+	mov	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	ip, [sp, #0]
+	mov	r0, ip
+	bl	FlashBchSel
+	ldr	ip, [sp, #20]
+	mov	r2, #2048
+	ldr	r1, [r8, #132]
+	add	r0, ip, r5, asl #9
+	bl	memcpy
+	ldr	ip, [sp, #16]
+	mov	r2, #0
+	add	r5, ip, r5
+	uxth	r5, r5
+.L2518:
+	cmp	r5, sl
+	bcc	.L2520
+	mov	r1, r6
+	mov	r2, sl
+	mov	r3, #0
+	ldr	r0, .L2522+16
+	bl	printk
+	mov	r0, #0
+	add	sp, sp, #28
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2523:
+	.align	2
+.L2522:
+	.word	.LANCHOR0
+	.word	.LC146
+	.word	.LANCHOR2
+	.word	1446522928
+	.word	.LC147
+	.fnend
+	.size	IdBlockReadData, .-IdBlockReadData
+	.align	2
+	.global	IDBlockWriteData
+	.type	IDBlockWriteData, %function
+IDBlockWriteData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r4, .L2531
+	mov	r5, r0
+	str	r2, [sp, #20]
+	mov	r8, r1
+	ldr	r0, .L2531+4
+	mov	r1, r5
+	ldr	r2, [r4, #3624]
+	mov	r7, r5
+	ldr	r3, [r4, #856]
+	ldr	fp, .L2531+8
+	ldrb	r6, [r2, #9]	@ zero_extendqisi2
+	mov	r2, r8
+	mul	r6, r6, r3
+	bl	printk
+	mov	r0, #0
+	bl	flash_boot_enter_slc_mode
+	movw	r3, #3068
+	ldrh	r1, [r4, r3]
+	mov	r0, r5
+	bl	__aeabi_uidiv
+	uxth	r6, r6
+	mov	r1, r0
+	mov	r0, #0
+	mov	r2, r0
+	bl	FlashEraseBlock
+	mov	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	r3, [r4, #3624]
+	mov	r1, r6
+	mov	r0, r5
+	mov	r6, #0
+	ldrb	sl, [r3, #9]	@ zero_extendqisi2
+	bl	__aeabi_uidivmod
+	mov	r9, r1
+	rsb	r1, r1, r5
+	str	r1, [sp, #16]
+	b	.L2525
+.L2529:
+	add	r3, r6, r9
+	ubfx	r3, r3, #2, #16
+	cmp	r3, #0
+	beq	.L2526
+	add	r1, r3, #1
+	ldrb	r0, [r4, #928]	@ zero_extendqisi2
+	add	r2, r4, r1, asl #1
+	cmp	r0, #0
+	add	r2, r2, #3072
+	add	r2, r2, #4
+	ldrh	r2, [r2, #0]
+	beq	.L2527
+	ldr	r0, [r4, #3784]
+	cmp	r0, fp
+	uxtheq	r2, r1
+.L2527:
+	sub	r2, r2, #1
+	mov	r2, r2, asl #2
+	str	r2, [sp, #24]
+	mov	r2, #0
+	str	r2, [sp, #28]
+.L2526:
+	add	r2, r4, r3, asl #1
+	add	r2, r2, #3072
+	ldrh	r5, [r2, #4]
+	ldrb	r2, [r4, #928]	@ zero_extendqisi2
+	cmp	r2, #0
+	beq	.L2528
+	ldr	r2, [r4, #3784]
+	cmp	r2, fp
+	moveq	r5, r3
+.L2528:
+	ldr	r2, [sp, #16]
+	ldr	r1, [sp, #20]
+	ldrb	ip, [r4, #3832]	@ zero_extendqisi2
+	mla	r3, sl, r5, r2
+	add	r2, r1, r6, asl #9
+	ldr	r1, .L2531+12
+	add	r6, r6, #4
+	uxth	r6, r6
+	ldrb	r0, [r1, #148]	@ zero_extendqisi2
+	str	ip, [sp, #4]
+	str	r2, [sp, #8]
+	str	r3, [sp, #12]
+	bl	FlashBchSel
+	mov	r0, #0
+	bl	flash_boot_enter_slc_mode
+	ldr	r3, [sp, #12]
+	ldr	r1, [r4, #3624]
+	mov	r0, r3
+	ldrb	r1, [r1, #9]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	ldr	r2, [sp, #8]
+	add	r3, sp, #24
+	mov	r1, r0
+	mov	r0, #0
+	bl	FlashProgPage
+	mov	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	ip, [sp, #4]
+	mov	r0, ip
+	bl	FlashBchSel
+	ldr	r0, [sp, #16]
+	mov	r1, sl
+	bl	__aeabi_uidiv
+	add	r2, r5, #1
+	uxth	r2, r2
+	mov	r1, r0
+	mov	r0, #0
+	bl	FlashPageProgMsbFFData
+.L2525:
+	cmp	r6, r8
+	bcc	.L2529
+	mov	r1, r7
+	mov	r2, r8
+	mov	r3, #0
+	ldr	r0, .L2531+16
+	bl	printk
+	mov	r5, r7
+	mov	r0, #0
+	add	sp, sp, #92
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2532:
+	.align	2
+.L2531:
+	.word	.LANCHOR0
+	.word	.LC148
+	.word	1446522928
+	.word	.LANCHOR2
+	.word	.LC149
+	.fnend
+	.size	IDBlockWriteData, .-IDBlockWriteData
+	.align	2
+	.global	write_idblock
+	.type	write_idblock, %function
+write_idblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2546
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	r7, r2
+	ldr	r2, [r3, #856]
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r3, [r3, #3624]
+	mov	r6, r0
+	mov	r0, #256000
+	mov	r4, r1
+	ldrb	r3, [r3, #9]	@ zero_extendqisi2
+	mul	r3, r3, r2
+	uxth	r3, r3
+	str	r3, [sp, #8]
+	bl	ftl_malloc
+	subs	r5, r0, #0
+	mvneq	r0, #0
+	beq	.L2534
+	add	sl, r6, #508
+	add	sl, sl, #3
+	mov	sl, sl, lsr #9
+	cmp	sl, #255
+	bhi	.L2535
+	add	r0, r4, sl, asl #9
+	mov	r1, r4
+	rsb	r2, sl, #256
+	bl	memcpy
+.L2535:
+	ldr	r8, .L2546
+	mov	r3, #5
+	ldr	r0, .L2546+4
+	mov	r1, r7
+	mov	r2, #4
+	add	sl, sl, #128
+	bl	rknand_print_hex
+	ldrb	r2, [r8, #853]	@ zero_extendqisi2
+	ldr	r1, [r4, #512]
+	cmp	sl, #256
+	movcs	sl, #256
+	ldr	r0, .L2546+8
+	mov	fp, #0
+	bl	printk
+	ldrb	r3, [r8, #853]	@ zero_extendqisi2
+	ldr	r2, [r4, #512]
+	mov	r1, sl
+	ldr	r0, .L2546+12
+	mov	r9, fp
+	cmp	r2, r3
+	mov	r8, r4
+	mov	r2, r6
+	strhi	r3, [r4, #512]
+	mov	r6, r7
+	bl	printk
+	mov	r1, sl, asl #7
+	str	r1, [sp, #12]
+.L2541:
+	ldr	r1, .L2546
+	movw	r2, #3074
+	ldr	r3, [r6], #4
+	ldrh	r2, [r1, r2]
+	cmp	r3, r2
+	bcs	.L2537
+	ldr	r2, .L2546+16
+	ldr	r2, [r2, #152]
+	cmp	r3, r2
+	bcc	.L2537
+	mov	r0, r5
+	mov	r1, #512
+	bl	__memzero
+	ldr	r2, [sp, #8]
+	ldr	r0, [r6, #-4]
+	mov	r1, sl
+	mul	r0, r0, r2
+	mov	r2, r8
+	bl	IDBlockWriteData
+	ldr	r3, [sp, #8]
+	ldr	r0, [r6, #-4]
+	mov	r1, sl
+	mov	r2, r5
+	mul	r0, r0, r3
+	bl	IdBlockReadData
+	mov	r3, #0
+	mov	r7, r3
+.L2540:
+	ldr	r1, [r5, r3]
+	add	r3, r3, #4
+	add	r2, r8, r3
+	ldr	r2, [r2, #-4]
+	cmp	r1, r2
+	beq	.L2538
+	bic	r4, r7, #255
+	stmia	sp, {r1, r2}
+	mov	r3, r7
+	mov	r1, r9
+	ldr	r2, [r6, #-4]
+	mov	r4, r4, asl #2
+	ldr	r0, .L2546+20
+	bl	printk
+	ldr	r0, .L2546+24
+	add	r1, r8, r4
+	mov	r2, #4
+	mov	r3, #256
+	bl	rknand_print_hex
+	mov	r3, #256
+	mov	r2, #4
+	ldr	r0, .L2546+28
+	add	r1, r5, r4
+	bl	rknand_print_hex
+	mov	r0, r5
+	mov	r1, #512
+	bl	__memzero
+	ldr	r1, [sp, #8]
+	ldr	r0, [r6, #-4]
+	mov	r2, r5
+	mul	r0, r0, r1
+	mov	r1, #4
+	bl	IDBlockWriteData
+	ldr	r0, .L2546+32
+	bl	printk
+	ldr	r2, [sp, #12]
+	cmp	r7, r2
+	bcc	.L2537
+	b	.L2539
+.L2538:
+	ldr	r1, [sp, #12]
+	add	r7, r7, #1
+	cmp	r7, r1
+	bne	.L2540
+.L2539:
+	add	fp, fp, #1
+.L2537:
+	add	r9, r9, #1
+	cmp	r9, #5
+	bne	.L2541
+	mov	r0, r5
+	bl	ftl_free
+	cmp	fp, #0
+	mvneq	r0, #0
+	movne	r0, #0
+.L2534:
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2547:
+	.align	2
+.L2546:
+	.word	.LANCHOR0
+	.word	.LC150
+	.word	.LC151
+	.word	.LC152
+	.word	.LANCHOR2
+	.word	.LC153
+	.word	.LC154
+	.word	.LC155
+	.word	.LC156
+	.fnend
+	.size	write_idblock, .-write_idblock
+	.align	2
+	.global	CRC_32
+	.type	CRC_32, %function
+CRC_32:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, r0
+	mov	r0, #0
+	stmfd	sp!, {r4, lr}
+	.save {r4, lr}
+	mov	r2, r0
+	ldr	ip, .L2551
+	b	.L2549
+.L2550:
+	ldrb	r4, [r3, r2]	@ zero_extendqisi2
+	add	r2, r2, #1
+	eor	r4, r4, r0, lsr #24
+	add	r4, ip, r4, asl #2
+	ldr	r4, [r4, #3068]
+	eor	r0, r4, r0, asl #8
+.L2549:
+	cmp	r2, r1
+	bne	.L2550
+	ldmfd	sp!, {r4, pc}
+.L2552:
+	.align	2
+.L2551:
+	.word	.LANCHOR1
+	.fnend
+	.size	CRC_32, .-CRC_32
+	.align	2
+	.global	rknand_sys_storage_ioctl
+	.type	rknand_sys_storage_ioctl, %function
+rknand_sys_storage_ioctl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 528
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2668
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	cmp	r1, r3
+	.pad #528
+	sub	sp, sp, #528
+	mov	r5, r1
+	mov	r4, r2
+	beq	.L2562
+	bhi	.L2571
+	ldr	r3, .L2668+4
+	cmp	r1, r3
+	beq	.L2559
+	bhi	.L2572
+	sub	r3, r3, #125
+	cmp	r1, r3
+	beq	.L2556
+	bhi	.L2573
+	sub	r3, r3, #237
+	cmp	r1, r3
+	bne	.L2614
+	b	.L2664
+.L2573:
+	ldr	r3, .L2668+8
+	cmp	r1, r3
+	beq	.L2557
+	add	r3, r3, #1
+	cmp	r1, r3
+	bne	.L2614
+	b	.L2665
+.L2572:
+	ldr	r3, .L2668+12
+	cmp	r1, r3
+	beq	.L2561
+	bhi	.L2574
+	ldr	r3, .L2668+16
+	cmp	r1, r3
+	bne	.L2614
+	b	.L2666
+.L2574:
+	ldr	r3, .L2668+20
+	cmp	r1, r3
+	beq	.L2561
+	add	r3, r3, #10
+	cmp	r1, r3
+	bne	.L2614
+	b	.L2561
+.L2571:
+	ldr	r3, .L2668+24
+	cmp	r1, r3
+	beq	.L2567
+	bhi	.L2575
+	sub	r3, r3, #78
+	cmp	r1, r3
+	beq	.L2564
+	bcc	.L2563
+	add	r3, r3, #21
+	cmp	r1, r3
+	beq	.L2565
+	add	r3, r3, #56
+	cmp	r1, r3
+	bne	.L2614
+	b	.L2667
+.L2575:
+	ldr	r3, .L2668+28
+	cmp	r1, r3
+	beq	.L2570
+	bhi	.L2576
+	sub	r3, r3, #956
+	sub	r3, r3, #1
+	cmp	r1, r3
+	beq	.L2568
+	add	r3, r3, #956
+	cmp	r1, r3
+	bne	.L2614
+	b	.L2569
+.L2576:
+	ldr	r3, .L2668+32
+	cmp	r1, r3
+	beq	.L2569
+	add	r3, r3, #1
+	cmp	r1, r3
+	bne	.L2614
+	b	.L2570
+.L2563:
+	ldr	r0, .L2668+36
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r5, r0, #0
+	beq	.L2621
+	mov	r1, r4
+	mov	r2, #512
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2663
+.L2577:
+	ldr	r0, .L2668+40
+	ldmia	r5, {r1, r2}
+	bl	printk
+	ldr	r3, [r5, #4]
+	cmp	r3, #8
+	str	r3, [sp, #4]
+	bhi	.L2585
+	bl	rknand_device_lock
+	ldr	r1, [sp, #4]
+	mov	r2, r5
+	ldr	r0, [r5, #0]
+	bl	IdBlockReadData
+	bl	rknand_device_unlock
+	ldr	r2, [sp, #4]
+	mov	r0, r4
+	mov	r1, r5
+	mov	r2, r2, asl #9
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	beq	.L2649
+	ldr	r0, .L2668+44
+.L2662:
+	bl	printk
+	b	.L2585
+.L2564:
+	ldr	r0, .L2668+48
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r5, r0, #0
+	beq	.L2621
+	mov	r1, r4
+	mov	r2, #4096
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2663
+.L2581:
+	ldr	r4, .L2668+52
+	ldr	r0, .L2668+56
+	ldmia	r5, {r1, r2}
+	bl	printk
+	ldr	r3, [r4, #464]
+	cmp	r3, #0
+	bne	.L2582
+	mov	r0, #260096
+	bl	ftl_malloc
+	cmp	r0, #0
+	str	r0, [r4, #464]
+	beq	.L2585
+.L2582:
+	ldr	r2, [r5, #4]
+	movw	r3, #4088
+	cmp	r2, r3
+	bhi	.L2585
+	ldr	r3, [r5, #0]
+	cmp	r3, #251904
+	bhi	.L2585
+	ldr	r1, .L2668+52
+	ldr	r0, [r1, #464]
+	add	r1, r5, #8
+	add	r0, r0, r3
+	bl	memcpy
+.L2649:
+	mov	r0, r5
+	bl	ftl_free
+.L2650:
+	mov	r4, #0
+	b	.L2580
+.L2667:
+	ldr	r0, .L2668+60
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r5, r0, #0
+	beq	.L2621
+	mov	r1, r4
+	mov	r2, #28
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	beq	.L2584
+.L2663:
+	ldr	r0, .L2668+64
+	b	.L2662
+.L2584:
+	ldmia	r5, {r1, r2}
+	ldr	r0, .L2668+68
+	bl	printk
+	ldr	r1, [r5, #0]
+	cmp	r1, #256000
+	bhi	.L2585
+	ldr	r4, .L2668+52
+	ldr	r0, [r4, #464]
+	cmp	r0, #0
+	beq	.L2585
+.L2586:
+	bl	CRC_32
+	ldr	r3, [r5, #4]
+	cmp	r3, r0
+	beq	.L2587
+	mov	r0, r5
+	bl	ftl_free
+	b	.L2627
+.L2587:
+	bl	rknand_device_lock
+	ldr	r1, [r4, #464]
+	add	r2, r5, #8
+	ldr	r0, [r5, #0]
+	bl	write_idblock
+	mov	r6, #0
+	bl	rknand_device_unlock
+	ldr	r0, [r4, #464]
+	bl	ftl_free
+	str	r6, [r4, #464]
+	mov	r0, r5
+	mov	r4, r6
+	bl	ftl_free
+	b	.L2580
+.L2585:
+	mov	r0, r5
+	b	.L2653
+.L2565:
+	ldr	r0, .L2668+72
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r5, r0, #0
+	beq	.L2621
+	bl	ftl_read_flash_info
+	mov	r0, r4
+	mov	r1, r5
+	mov	r2, #11
+	b	.L2658
+.L2562:
+	ldr	r0, .L2668+76
+	bl	printk
+	bl	nand_blk_add_whole_disk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r5, r0, #0
+	beq	.L2621
+	bl	rknand_device_lock
+	mov	r1, #0
+	mov	r2, #64
+	mov	r0, r5
+	bl	FlashReadFacBbtData
+	bl	rknand_device_unlock
+	ldr	r0, .L2668+80
+	mov	r1, r5
+	mov	r2, #4
+	mov	r3, #8
+	bl	rknand_print_hex
+	mov	r0, r4
+	mov	r1, r5
+	mov	r2, #64
+	b	.L2658
+.L2567:
+	ldr	r0, .L2668+84
+	bl	printk
+	ldr	r3, .L2668+52
+	add	r1, sp, #528
+	mov	r0, r4
+	mov	r2, #4
+	ldr	r3, [r3, #468]
+	ldr	r3, [r3, #20]
+	str	r3, [r1, #-524]!
+	b	.L2654
+.L2568:
+	ldr	r0, .L2668+88
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	subs	r5, r0, #0
+	beq	.L2621
+	bl	rknand_device_lock
+	mov	r1, #264
+	mov	r2, #2
+	mov	r3, r5
+	mov	r0, #16
+	bl	ftl_read
+	bl	rknand_device_unlock
+	mov	r0, r4
+	mov	r1, r5
+	mov	r2, #1024
+.L2658:
+	bl	rk_copy_to_user
+	subs	r4, r0, #0
+	mov	r0, r5
+	beq	.L2590
+.L2653:
+	bl	ftl_free
+	b	.L2644
+.L2590:
+	bl	ftl_free
+	b	.L2580
+.L2556:
+	ldr	r0, .L2668+92
+	bl	printk
+	add	r0, sp, #8
+	mov	r1, r4
+	mov	r2, #520
+	bl	rk_copy_from_user
+	subs	r5, r0, #0
+	bne	.L2655
+.L2591:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+96
+	cmp	r2, r3
+	bne	.L2646
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L2646
+	ldr	r6, .L2668+52
+	mov	r2, #512
+	add	r0, sp, #8
+	ldr	r1, [r6, #468]
+	bl	memcpy
+	ldr	r2, [r6, #472]
+	ldr	r3, .L2668+100
+	cmp	r2, r3
+	beq	.L2592
+	add	r0, sp, #72
+	mov	r1, #128
+	str	r5, [sp, #16]
+	str	r5, [sp, #20]
+	bl	__memzero
+.L2592:
+	add	r0, sp, #264
+	mov	r1, #256
+	mov	r3, #0
+	str	r3, [sp, #24]
+	bl	__memzero
+	b	.L2661
+.L2557:
+	ldr	r0, .L2668+104
+	bl	printk
+	add	r0, sp, #8
+	mov	r1, r4
+	mov	r2, #520
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2655
+.L2593:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+96
+	cmp	r2, r3
+	bne	.L2646
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L2646
+	ldr	r4, .L2668+52
+	ldr	r3, .L2668+100
+	ldr	r2, [r4, #472]
+	cmp	r2, r3
+	bne	.L2627
+	ldr	r3, [sp, #20]
+	sub	r2, r3, #1
+	cmp	r2, #127
+	mvnhi	r4, #2
+	bhi	.L2554
+	ldr	r0, [r4, #468]
+	add	r1, sp, #72
+	str	r3, [r0, #12]
+	add	r0, r0, #64
+	ldr	r2, [sp, #20]
+	bl	memcpy
+	mov	r0, #1
+	ldr	r1, [r4, #468]
+	b	.L2651
+.L2666:
+	ldr	r0, .L2668+108
+	bl	printk
+	add	r0, sp, #8
+	mov	r1, r4
+	mov	r2, #520
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2655
+.L2594:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+112
+	cmp	r2, r3
+	bne	.L2646
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L2646
+	ldr	r5, .L2668+52
+	ldr	r4, [r5, #476]
+	cmp	r4, #0
+	beq	.L2554
+	ldr	r3, [r5, #480]
+	ldr	r2, .L2668+116
+	ldr	r1, [r3, #0]
+	cmp	r1, r2
+	beq	.L2595
+	str	r2, [r3, #0]
+	mov	r2, #504
+	ldr	r3, [r5, #480]
+	str	r2, [r3, #4]
+	mov	r2, #0
+	str	r2, [r3, #8]
+	str	r2, [r3, #12]
+.L2595:
+	ldr	r1, [r5, #480]
+	mov	r4, #0
+	mov	r0, r4
+	str	r4, [r1, #16]
+	bl	StorageSysDataStore
+	ldr	r3, [r5, #468]
+	ldr	r2, .L2668+96
+	ldr	r5, .L2668+52
+	ldr	r1, [r3, #0]
+	cmp	r1, r2
+	strne	r2, [r3, #0]
+	ldr	r0, [r5, #468]
+	mov	r1, #128
+	ldrne	r3, .L2668+52
+	movne	r2, #504
+	ldrne	r3, [r3, #468]
+	stmneib	r3, {r2, r4}
+	mov	r4, #0
+	str	r4, [r0, #12]
+	add	r0, r0, #64
+	bl	__memzero
+	mov	r0, #1
+	ldr	r1, [r5, #468]
+	bl	StorageSysDataStore
+	str	r4, [r5, #476]
+	str	r4, [r5, #472]
+	b	.L2580
+.L2559:
+	ldr	r0, .L2668+120
+	bl	printk
+	mov	r1, r4
+	add	r0, sp, #8
+	mov	r2, #520
+	bl	rk_copy_from_user
+	subs	r4, r0, #0
+	bne	.L2655
+.L2597:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+124
+	cmp	r2, r3
+	bne	.L2646
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L2646
+	ldr	r5, .L2668+52
+	ldr	r3, [r5, #476]
+	cmp	r3, #1
+	beq	.L2554
+	ldr	r3, [r5, #480]
+	mov	r0, #0
+	ldr	r2, .L2668+116
+	ldr	r1, [r3, #0]
+	cmp	r1, r2
+	strne	r2, [r3, #0]
+	ldr	r1, [r5, #480]
+	ldrne	r3, [r5, #480]
+	movne	r2, #504
+	strne	r4, [r3, #12]
+	stmneib	r3, {r2, r4}
+	mov	r3, #1
+	str	r3, [r1, #16]
+	bl	StorageSysDataStore
+	ldr	r3, [r5, #468]
+	ldr	r2, .L2668+96
+	ldr	r1, [r3, #0]
+	cmp	r1, r2
+	beq	.L2599
+	str	r2, [r3, #0]
+	mov	r1, #504
+	ldr	r3, .L2668+52
+	mov	r2, #0
+	ldr	r3, [r3, #468]
+	stmib	r3, {r1, r2}
+.L2599:
+	ldr	r5, .L2668+52
+	mov	r1, #128
+	mov	r4, #0
+	ldr	r0, [r5, #468]
+	str	r4, [r0, #12]
+	add	r0, r0, #64
+	bl	__memzero
+	mov	r0, #1
+	ldr	r1, [r5, #468]
+	bl	StorageSysDataStore
+	mov	r3, #1
+	str	r3, [r5, #476]
+	b	.L2580
+.L2665:
+	ldr	r0, .L2668+128
+	bl	printk
+	add	r0, sp, #8
+	mov	r1, r4
+	mov	r2, #520
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2655
+.L2600:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+132
+	cmp	r2, r3
+	bne	.L2646
+	ldr	r2, [sp, #12]
+	cmp	r2, #512
+	addls	r0, sp, #16
+	ldrls	r1, .L2668+136
+	bls	.L2660
+	b	.L2646
+.L2561:
+	ldr	r3, .L2668+20
+	cmp	r5, r3
+	ldreq	r0, .L2668+140
+	beq	.L2647
+	ldr	r3, .L2668+144
+	cmp	r5, r3
+	ldreq	r0, .L2668+148
+	ldrne	r0, .L2668+152
+.L2647:
+	bl	printk
+	add	r0, sp, #8
+	mov	r1, r4
+	mov	r2, #520
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2655
+.L2604:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+156
+	cmp	r2, r3
+	bne	.L2644
+	ldr	r3, .L2668+144
+	ldr	r6, .L2668+52
+	cmp	r5, r3
+	bne	.L2605
+	ldr	r3, [r6, #468]
+	mov	r0, r4
+	add	r1, sp, #8
+	mov	r2, #16
+	ldr	r3, [r3, #20]
+	str	r3, [sp, #12]
+	strb	r3, [sp, #16]
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	moveq	r4, r0
+	mvnne	r4, #13
+	b	.L2554
+.L2605:
+	ldr	r3, [r6, #996]
+	cmp	r3, #10
+	bhi	.L2644
+	ldr	r3, [r6, #468]
+	ldr	r1, [sp, #12]
+	ldr	r2, [r3, #24]
+	cmp	r2, r1
+	beq	.L2606
+	cmp	r2, #0
+	beq	.L2606
+	ldr	r0, .L2668+160
+	bl	printk
+	ldr	r3, [r6, #996]
+	add	r3, r3, #1
+	str	r3, [r6, #996]
+	b	.L2644
+.L2606:
+	ldr	r0, .L2668+52
+	mov	r2, #0
+	str	r2, [r0, #996]
+	ldr	r0, .L2668+20
+	cmp	r5, r0
+	mov	r0, #1
+	strne	r1, [r3, #24]
+	mov	r1, r3
+	movne	r2, #1
+	streq	r2, [r3, #20]
+	streq	r2, [r3, #24]
+	strne	r2, [r3, #20]
+	bl	StorageSysDataStore
+	cmn	r0, #1
+	mvneq	r4, #1
+	movne	r4, #0
+	b	.L2580
+.L2569:
+	ldr	r0, .L2668+164
+	bl	printk
+	add	r0, sp, #8
+	mov	r1, r4
+	mov	r2, #520
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2655
+.L2609:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+168
+	cmp	r2, r3
+	bne	.L2646
+	ldr	r2, [sp, #12]
+	cmp	r2, #504
+	bhi	.L2646
+	ldr	r3, .L2668+172
+	add	r0, sp, #16
+	cmp	r5, r3
+	ldr	r3, .L2668+52
+	ldreq	r1, [r3, #1000]
+	ldrne	r1, [r3, #1004]
+	add	r1, r1, #8
+.L2660:
+	bl	memcpy
+.L2661:
+	add	r1, sp, #8
+	mov	r0, r4
+	mov	r2, #520
+.L2654:
+	bl	rk_copy_to_user
+	subs	r4, r0, #0
+	bne	.L2644
+	b	.L2580
+.L2570:
+	ldr	r0, .L2668+176
+	bl	printk
+	add	r0, sp, #8
+	mov	r1, r4
+	mov	r2, #520
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	beq	.L2612
+.L2655:
+	ldr	r0, .L2668+64
+	bl	printk
+	b	.L2644
+.L2612:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L2668+168
+	cmp	r2, r3
+	bne	.L2646
+	ldr	r2, [sp, #12]
+	cmp	r2, #504
+	bhi	.L2646
+	ldr	r3, .L2668+28
+	add	r2, r2, #8
+	ldr	r4, .L2668+52
+	cmp	r5, r3
+	bne	.L2613
+	add	r1, sp, #8
+	ldr	r0, [r4, #1000]
+	bl	memcpy
+	ldr	r1, [r4, #1000]
+	mov	r0, #2
+.L2651:
+	bl	StorageSysDataStore
+	mov	r4, r0
+	b	.L2580
+.L2613:
+	add	r1, sp, #8
+	ldr	r0, [r4, #1004]
+	bl	memcpy
+	mov	r0, #3
+	ldr	r1, [r4, #1004]
+	b	.L2651
+.L2664:
+	bl	rknand_dev_flush
+	b	.L2650
+.L2646:
+	mvn	r4, #0
+.L2580:
+	mov	r1, r4
+	ldr	r0, .L2668+180
+	bl	printk
+	b	.L2554
+.L2614:
+	mvn	r4, #21
+	b	.L2554
+.L2621:
+	mvn	r4, #11
+	b	.L2554
+.L2627:
+	mvn	r4, #1
+	b	.L2554
+.L2644:
+	mvn	r4, #13
+.L2554:
+	mov	r0, r4
+	add	sp, sp, #528
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2669:
+	.align	2
+.L2668:
+	.word	1074033155
+	.word	1074029694
+	.word	1074029570
+	.word	1074031656
+	.word	1074029695
+	.word	1074031666
+	.word	1074033235
+	.word	1074034193
+	.word	1074034194
+	.word	.LC157
+	.word	.LC159
+	.word	.LC160
+	.word	.LC161
+	.word	.LANCHOR2
+	.word	.LC162
+	.word	.LC163
+	.word	.LC158
+	.word	.LC164
+	.word	.LC165
+	.word	.LC166
+	.word	.LC167
+	.word	.LC168
+	.word	.LC169
+	.word	.LC170
+	.word	1263358532
+	.word	-1067903959
+	.word	.LC171
+	.word	.LC172
+	.word	1112753220
+	.word	1146313043
+	.word	.LC173
+	.word	1112755781
+	.word	.LC174
+	.word	1094995539
+	.word	.LANCHOR2+484
+	.word	.LC175
+	.word	1074031676
+	.word	.LC176
+	.word	.LC177
+	.word	1280262987
+	.word	.LC178
+	.word	.LC179
+	.word	1145980246
+	.word	1074034192
+	.word	.LC180
+	.word	.LC181
+	.fnend
+	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
+	.align	2
+	.global	rk_ftl_storage_sys_init
+	.type	rk_ftl_storage_sys_init, %function
+rk_ftl_storage_sys_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r2, #512
+	ldr	r4, .L2673
+	mov	r6, #0
+	add	r0, r4, #484
+	ldr	r5, [r4, #456]
+	str	r6, [r4, #464]
+	add	r1, r5, #1536
+	add	r3, r5, #512
+	str	r5, [r4, #480]
+	str	r3, [r4, #468]
+	add	r3, r5, #1024
+	str	r1, [r4, #1004]
+	str	r3, [r4, #1000]
+	bl	memcpy
+	ldr	r7, [r5, #508]
+	ldr	r3, [r5, #16]
+	cmp	r7, r6
+	str	r6, [r4, #472]
+	str	r6, [r4, #996]
+	str	r3, [r4, #476]
+	beq	.L2671
+	mov	r0, r5
+	mov	r1, #508
+	bl	JSHash
+	cmp	r7, r0
+	beq	.L2671
+	str	r6, [r5, #16]
+	ldr	r0, .L2673+4
+	str	r6, [r4, #476]
+	bl	printk
+.L2671:
+	ldr	r3, [r4, #476]
+	mov	r0, #2
+	ldr	r4, .L2673
+	cmp	r3, #0
+	ldrne	r2, .L2673+8
+	ldrne	r3, .L2673
+	ldr	r1, [r4, #1000]
+	strne	r2, [r3, #472]
+	bl	StorageSysDataLoad
+	ldr	r1, [r4, #1004]
+	mov	r0, #3
+	bl	StorageSysDataLoad
+	ldmfd	sp!, {r3, r4, r5, r6, r7, lr}
+	b	rknand_sys_storage_init
+.L2674:
+	.align	2
+.L2673:
+	.word	.LANCHOR2
+	.word	.LC182
+	.word	-1067903959
+	.fnend
+	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
+	.align	2
+	.global	StorageSysDataDeInit
+	.type	StorageSysDataDeInit, %function
+StorageSysDataDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r0, #0
+	bx	lr
+	.fnend
+	.size	StorageSysDataDeInit, .-StorageSysDataDeInit
+	.align	2
+	.global	rk_ftl_vendor_storage_init
+	.type	rk_ftl_vendor_storage_init, %function
+rk_ftl_vendor_storage_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	stmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
+	.save {r3, r4, r5, r6, r7, r8, sl, lr}
+	mov	r0, #65536
+	mov	r1, #209
+	mov	r2, #4
+	bl	kmalloc_order_trace
+	ldr	r7, .L2684
+	cmp	r0, #0
+	str	r0, [r7, #1008]
+	beq	.L2682
+	ldr	sl, .L2684+4
+	mov	r6, #0
+	mov	r4, r6
+	mov	r5, r6
+	movw	r8, #65532
+.L2680:
+	ldr	r0, [r7, #1008]
+	mov	r1, r5, asl #7
+	mov	r2, #0
+	bl	rk_ftl_vendor_ops.constprop.26
+	cmp	r0, #0
+	bne	.L2678
+	ldr	r3, [r7, #1008]
+	ldr	r0, .L2684+8
+	ldr	r1, [r3, #0]
+	ldr	r2, [r3, r8]
+	ldr	r3, [r3, #4]
+	bl	printk
+	ldr	r0, [r7, #1008]
+	ldr	r3, [r0, #0]
+	cmp	r3, sl
+	bne	.L2679
+	ldr	r3, [r0, r8]
+	ldr	r2, [r0, #4]
+	cmp	r3, r2
+	bne	.L2679
+	cmp	r4, r3
+	movcc	r6, r5
+	movcc	r4, r3
+.L2679:
+	add	r5, r5, #1
+	cmp	r5, #2
+	bne	.L2680
+	cmp	r4, #0
+	beq	.L2681
+	mov	r1, r6, asl #7
+	mov	r2, #0
+	bl	rk_ftl_vendor_ops.constprop.26
+	cmp	r0, #0
+	ldmeqfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+	b	.L2678
+.L2681:
+	mov	r1, #65536
+	bl	__memzero
+	ldr	r3, .L2684
+	ldr	r1, .L2684+4
+	mov	r2, #1
+	mov	r0, r4
+	ldr	r3, [r3, #1008]
+	stmia	r3, {r1, r2}
+	movw	r1, #65532
+	str	r2, [r3, r1]
+	ldr	r2, .L2684+12
+	strh	r4, [r3, #12]	@ movhi
+	strh	r2, [r3, #14]	@ movhi
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L2678:
+	ldr	r4, .L2684
+	ldr	r0, [r4, #1008]
+	bl	kfree
+	mov	r3, #0
+	mvn	r0, #0
+	str	r3, [r4, #1008]
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L2682:
+	mvn	r0, #11
+	ldmfd	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
+.L2685:
+	.align	2
+.L2684:
+	.word	.LANCHOR2
+	.word	1380668996
+	.word	.LC183
+	.word	-1032
+	.fnend
+	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
+	.align	2
+	.global	rk_ftl_vendor_read
+	.type	rk_ftl_vendor_read, %function
+rk_ftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	mov	r3, r0
+	mov	r0, r1
+	ldr	r1, .L2693
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	ip, [r1, #1008]
+	cmp	ip, #0
+	ldrneh	r4, [ip, #10]
+	movne	r5, ip
+	movne	r1, #0
+	bne	.L2688
+	b	.L2692
+.L2690:
+	ldrh	r6, [r5, #16]
+	add	r5, r5, #8
+	cmp	r6, r3
+	bne	.L2689
+	add	r1, r1, #2
+	add	r1, ip, r1, asl #3
+	ldrh	r4, [r1, #4]
+	ldrh	r1, [r1, #2]
+	cmp	r2, r4
+	movcc	r4, r2
+	add	r1, r1, #1024
+	add	r1, ip, r1
+	mov	r2, r4
+	bl	memcpy
+	mov	r0, r4
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2689:
+	add	r1, r1, #1
+.L2688:
+	cmp	r1, r4
+	bcc	.L2690
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2692:
+	mvn	r0, #0
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2694:
+	.align	2
+.L2693:
+	.word	.LANCHOR2
+	.fnend
+	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
+	.align	2
+	.global	rk_ftl_vendor_write
+	.type	rk_ftl_vendor_write, %function
+rk_ftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2712
+	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, sl, fp, lr}
+	mov	sl, r0
+	ldr	r4, [r3, #1008]
+	.pad #20
+	sub	sp, sp, #20
+	mov	r9, r1
+	mov	r5, r2
+	cmp	r4, #0
+	beq	.L2708
+	add	r8, r2, #63
+	ldrh	r2, [r4, #8]
+	ldrh	r3, [r4, #10]
+	bic	r8, r8, #63
+	mov	r7, #0
+	str	r2, [sp, #8]
+	b	.L2697
+.L2704:
+	add	r2, r7, #2
+	mov	r2, r2, asl #3
+	add	r6, r4, r2
+	ldrh	r2, [r4, r2]
+	cmp	r2, sl
+	bne	.L2698
+	ldrh	r2, [r6, #4]
+	add	r2, r2, #63
+	bic	r2, r2, #63
+	str	r2, [sp, #12]
+	cmp	r5, r2
+	bls	.L2699
+	ldrh	r2, [r4, #14]
+	cmp	r2, r8
+	bcc	.L2708
+	sub	r3, r3, #1
+	mov	fp, r8
+	ldrh	r6, [r6, #2]
+	mov	r8, r3
+	b	.L2700
+.L2701:
+	add	r7, r7, #1
+	mov	r2, r2, asl #3
+	add	r0, r7, #2
+	add	r3, r4, r2
+	mov	r0, r0, asl #3
+	add	r1, r4, r0
+	ldrh	r0, [r4, r0]
+	strh	r0, [r4, r2]	@ movhi
+	add	r0, r6, #1024
+	ldrh	r2, [r1, #4]
+	add	r0, r4, r0
+	strh	r6, [r3, #2]	@ movhi
+	strh	r2, [r3, #4]	@ movhi
+	ldrh	r3, [r1, #4]
+	ldrh	r1, [r1, #2]
+	add	r3, r3, #63
+	bic	r3, r3, #63
+	add	r1, r1, #1024
+	add	r1, r4, r1
+	str	r3, [sp, #4]
+	mov	r2, r3
+	bl	memcpy
+	ldr	r3, [sp, #4]
+	add	r6, r6, r3
+.L2700:
+	cmp	r7, r8
+	add	r2, r7, #2
+	bcc	.L2701
+	mov	r2, r2, asl #3
+	uxth	r6, r6
+	add	r3, r4, r2
+	add	r0, r6, #1024
+	strh	sl, [r4, r2]	@ movhi
+	add	r0, r4, r0
+	strh	r6, [r3, #2]	@ movhi
+	mov	r2, r5
+	strh	r5, [r3, #4]	@ movhi
+	mov	r1, r9
+	bl	memcpy
+	ldrh	r3, [r4, #14]
+	ldr	r2, [sp, #12]
+	uxth	r8, fp
+	add	r6, r6, r8
+	strh	r6, [r4, #12]	@ movhi
+	add	r3, r2, r3
+	rsb	r8, r8, r3
+	strh	r8, [r4, #14]	@ movhi
+	b	.L2711
+.L2699:
+	ldrh	r0, [r6, #2]
+	mov	r1, r9
+	mov	r2, r5
+	add	r0, r0, #1024
+	add	r0, r4, r0
+	bl	memcpy
+	strh	r5, [r6, #4]	@ movhi
+	b	.L2711
+.L2698:
+	add	r7, r7, #1
+.L2697:
+	cmp	r7, r3
+	bcc	.L2704
+	ldrh	r2, [r4, #14]
+	cmp	r2, r8
+	bcc	.L2708
+	add	r3, r3, #2
+	uxth	r8, r8
+	mov	r1, r9
+	mov	r3, r3, asl #3
+	add	r2, r4, r3
+	strh	sl, [r4, r3]	@ movhi
+	ldrh	r3, [r4, #12]
+	strh	r5, [r2, #4]	@ movhi
+	strh	r3, [r2, #2]	@ movhi
+	ldrh	r3, [r4, #12]
+	add	r3, r8, r3
+	strh	r3, [r4, #12]	@ movhi
+	ldrh	r3, [r4, #14]
+	rsb	r8, r8, r3
+	strh	r8, [r4, #14]	@ movhi
+	ldrh	r0, [r2, #2]
+	mov	r2, r5
+	add	r0, r0, #1024
+	add	r0, r4, r0
+	bl	memcpy
+	ldrh	r3, [r4, #10]
+	add	r3, r3, #1
+	strh	r3, [r4, #10]	@ movhi
+.L2711:
+	ldr	r3, [r4, #4]
+	movw	r2, #65532
+	mov	r0, r4
+	add	r3, r3, #1
+	str	r3, [r4, #4]
+	str	r3, [r4, r2]
+	mov	r2, #1
+	ldrh	r3, [r4, #8]
+	add	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r4, #8]	@ movhi
+	cmp	r3, #1
+	movhi	r3, #0
+	strhih	r3, [r4, #8]	@ movhi
+	ldr	r3, [sp, #8]
+	mov	r1, r3, asl #7
+	bl	rk_ftl_vendor_ops.constprop.26
+	mov	r0, #0
+	b	.L2696
+.L2708:
+	mvn	r0, #0
+.L2696:
+	add	sp, sp, #20
+	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
+.L2713:
+	.align	2
+.L2712:
+	.word	.LANCHOR2
+	.fnend
+	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
+	.align	2
+	.global	rk_ftl_vendor_storage_ioctl
+	.type	rk_ftl_vendor_storage_ioctl, %function
+rk_ftl_vendor_storage_ioctl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2731
+	stmfd	sp!, {r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r2
+	mov	r6, r1
+	ldr	r0, [r3, #48]
+	mov	r1, #208
+	mov	r2, #4096
+	bl	kmem_cache_alloc_trace
+	subs	r4, r0, #0
+	mvneq	r5, #0
+	beq	.L2715
+	ldr	r3, .L2731+4
+	cmp	r6, r3
+	beq	.L2717
+	add	r3, r3, #1
+	cmp	r6, r3
+	bne	.L2728
+	b	.L2730
+.L2717:
+	mov	r1, r5
+	mov	r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2728
+	ldr	r2, [r4, #0]
+	ldr	r3, .L2731+8
+	cmp	r2, r3
+	bne	.L2727
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_read
+	cmn	r0, #1
+	beq	.L2723
+	uxth	r2, r0
+	mov	r1, r4
+	strh	r2, [r4, #6]	@ movhi
+	mov	r0, r5
+	add	r2, r2, #8
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	moveq	r5, r0
+	mvnne	r5, #13
+	b	.L2716
+.L2730:
+	mov	r1, r5
+	mov	r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2728
+	ldr	r2, [r4, #0]
+	ldr	r3, .L2731+8
+	cmp	r2, r3
+	bne	.L2727
+	ldrh	r2, [r4, #6]
+	movw	r3, #4087
+	cmp	r2, r3
+	bhi	.L2727
+	mov	r0, r4
+	mov	r1, r5
+	add	r2, r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L2728
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_write
+.L2723:
+	mov	r5, r0
+	b	.L2716
+.L2727:
+	mvn	r5, #0
+	b	.L2716
+.L2728:
+	mvn	r5, #13
+.L2716:
+	mov	r0, r4
+	bl	kfree
+.L2715:
+	mov	r0, r5
+	ldmfd	sp!, {r4, r5, r6, pc}
+.L2732:
+	.align	2
+.L2731:
+	.word	kmalloc_caches
+	.word	1074034177
+	.word	1448232273
+	.fnend
+	.size	rk_ftl_vendor_storage_ioctl, .-rk_ftl_vendor_storage_ioctl
+	.global	gTable_Crc32
+	.global	SecureBootUnlockTryCount
+	.global	SecureBootCheckOK
+	.global	SecureBootEn
+	.global	gpVendor1Info
+	.global	gpVendor0Info
+	.global	g_idb_buffer
+	.global	gSnSectorData
+	.global	gpDrmKeyInfo
+	.global	gpBootConfig
+	.global	gLoaderBootInfo
+	.global	RK29_NANDC1_REG_BASE
+	.global	RK29_NANDC_REG_BASE
+	.global	gc_ink_free_return_value
+	.global	FtlUpdateVaildLpnCount
+	.global	g_ect_tbl_power_up_flush
+	.global	last_cache_match_count
+	.global	power_up_flag
+	.global	g_LowFormat
+	.global	gFtlInitStatus
+	.global	DeviceCapacity
+	.global	ToshibaRefValue
+	.global	Toshiba15RefValue
+	.global	ToshibaA19RefValue
+	.global	SamsungRefValue
+	.global	refValueDefault
+	.global	FbbtBlk
+	.global	random_seed
+	.global	gSlcNandParaInfo
+	.global	gNandParaInfo
+	.global	g_page_map_check_enable
+	.global	g_power_lost_ecc_error_blk
+	.global	g_power_lost_recovery_flag
+	.global	c_mlc_erase_count_value
+	.global	g_recovery_ppa_tbl
+	.global	g_recovery_page_min_ver
+	.global	g_recovery_page_num
+	.global	g_cur_erase_blk
+	.global	g_gc_skip_write_count
+	.global	g_gc_head_data_block_count
+	.global	g_gc_head_data_block
+	.global	g_ftl_nand_free_count
+	.global	g_in_swl_replace
+	.global	g_in_gc_progress
+	.global	g_all_blk_used_slc_mode
+	.global	g_max_erase_count
+	.global	g_totle_sys_slc_erase_count
+	.global	g_totle_slc_erase_count
+	.global	g_min_erase_count
+	.global	g_totle_avg_erase_count
+	.global	g_totle_mlc_erase_count
+	.global	g_totle_l2p_write_count
+	.global	g_totle_cache_write_count
+	.global	g_tmp_data_superblock_id
+	.global	g_totle_read_page_count
+	.global	g_totle_discard_page_count
+	.global	g_totle_read_sector
+	.global	g_totle_write_sector
+	.global	g_totle_write_page_count
+	.global	g_totle_gc_page_count
+	.global	g_gc_blk_index
+	.global	g_gc_merge_free_blk_threshold
+	.global	g_gc_free_blk_threshold
+	.global	g_gc_refresh_block_temp_tbl
+	.global	g_free_slc_blk_num
+	.global	g_gc_refresh_block_temp_num
+	.global	g_gc_bad_block_temp_tbl
+	.global	g_gc_bad_block_gc_index
+	.global	g_gc_bad_block_temp_num
+	.global	g_gc_next_blk_1
+	.global	g_gc_next_blk
+	.global	g_gc_cur_blk_max_valid_pages
+	.global	g_gc_cur_blk_valid_pages
+	.global	g_gc_page_offset
+	.global	g_gc_blk_num
+	.global	p_gc_blk_tbl
+	.global	p_gc_page_info
+	.global	g_sys_ext_data
+	.global	g_sys_save_data
+	.global	gp_last_act_superblock
+	.global	g_gc_superblock
+	.global	g_gc_temp_superblock
+	.global	g_buffer_superblock
+	.global	g_active_superblock
+	.global	g_num_data_superblocks
+	.global	g_num_free_superblocks
+	.global	p_data_block_list_tail
+	.global	p_data_block_list_head
+	.global	p_free_data_block_list_head
+	.global	p_data_block_list_table
+	.global	g_l2p_last_update_region_id
+	.global	p_l2p_map_buf
+	.global	p_l2p_ram_map
+	.global	g_totle_vendor_block
+	.global	p_vendor_region_ppn_table
+	.global	p_vendor_block_ver_table
+	.global	p_vendor_block_valid_page_count
+	.global	p_vendor_block_table
+	.global	g_totle_map_block
+	.global	p_map_region_ppn_check_table
+	.global	p_map_region_ppn_table
+	.global	p_map_block_ver_table
+	.global	p_map_block_valid_page_count
+	.global	p_map_block_table
+	.global	p_blk_mode_table
+	.global	p_valid_page_count_check_table
+	.global	p_valid_page_count_table
+	.global	g_totle_swl_count
+	.global	p_swl_mul_table
+	.global	p_erase_count_table
+	.global	g_ect_tbl_info_size
+	.global	gp_ect_tbl_info
+	.global	g_gc_num_req
+	.global	c_gc_page_buf_num
+	.global	gp_gc_page_buf_info
+	.global	p_gc_data_buf
+	.global	p_gc_spare_buf
+	.global	p_io_spare_buf
+	.global	p_io_data_buf_1
+	.global	p_io_data_buf_0
+	.global	p_sys_spare_buf
+	.global	p_vendor_data_buf
+	.global	p_sys_data_buf_1
+	.global	p_sys_data_buf
+	.global	g_wr_page_num
+	.global	req_wr_io
+	.global	c_wr_page_buf_num
+	.global	p_wr_io_data_buf
+	.global	p_wr_io_spare_buf
+	.global	p_plane_order_table
+	.global	g_req_cache
+	.global	req_gc_dst
+	.global	req_gc
+	.global	req_erase
+	.global	req_prgm
+	.global	req_read
+	.global	req_sys
+	.global	gVendorBlkInfo
+	.global	gL2pMapInfo
+	.global	gSysFreeQueue
+	.global	gSysInfo
+	.global	gBbtInfo
+	.global	g_flash_read_only_en
+	.global	g_inkDie_check_enable
+	.global	g_SlcPartLbaEndSector
+	.global	g_MaxLbn
+	.global	g_VaildLpn
+	.global	g_MaxLpn
+	.global	g_MaxLbaSector
+	.global	g_GlobalDataVersion
+	.global	g_GlobalSysVersion
+	.global	ftl_gc_temp_power_lost_recovery_flag
+	.global	c_ftl_nand_max_data_blks
+	.global	c_ftl_nand_data_op_blks_per_plane
+	.global	c_ftl_nand_data_blks_per_plane
+	.global	c_ftl_nand_max_sys_blks
+	.global	c_ftl_nand_init_sys_blks_per_plane
+	.global	c_ftl_nand_sys_blks_per_plane
+	.global	c_ftl_vendor_part_size
+	.global	c_ftl_nand_max_vendor_blks
+	.global	c_ftl_nand_max_map_blks
+	.global	c_ftl_nand_map_blks_per_plane
+	.global	c_ftl_nand_vendor_region_num
+	.global	c_ftl_nand_l2pmap_ram_region_num
+	.global	c_ftl_nand_map_region_num
+	.global	c_ftl_nand_totle_phy_blks
+	.global	c_ftl_nand_reserved_blks
+	.global	c_ftl_nand_byte_pre_oob
+	.global	c_ftl_nand_byte_pre_page
+	.global	c_ftl_nand_sec_pre_page_shift
+	.global	c_ftl_nand_sec_pre_page
+	.global	c_ftl_nand_page_pre_super_blk
+	.global	c_ftl_nand_page_pre_slc_blk
+	.global	c_ftl_nand_page_pre_blk
+	.global	c_ftl_nand_bbm_buf_size
+	.global	c_ftl_nand_ext_blk_pre_plane
+	.global	c_ftl_nand_blk_pre_plane
+	.global	c_ftl_nand_planes_num
+	.global	c_ftl_nand_blks_per_die_shift
+	.global	c_ftl_nand_blks_per_die
+	.global	c_ftl_nand_planes_per_die
+	.global	c_ftl_nand_die_num
+	.global	c_ftl_nand_type
+	.global	gMasterTempBuf
+	.global	gMasterInfo
+	.global	gNandcDumpWriteEn
+	.global	gToggleModeClkDiv
+	.global	gBootDdrMode
+	.global	gNandcEccBits
+	.global	gpNandc1
+	.global	gpNandc
+	.global	g_nandc_version_data
+	.global	gNandcVer
+	.global	gNandChipMap
+	.global	gNandIDataBuf
+	.global	FlashDdrTunningReadCount
+	.global	FlashWaitBusyScheduleEn
+	.global	gNandPhyInfo
+	.global	gFlashProgCheckSpareBuffer
+	.global	gFlashProgCheckBuffer
+	.global	gFlashSpareBuffer
+	.global	gFlashPageBuffer1
+	.global	gFlashPageBuffer0
+	.global	gpFlashSaveInfo
+	.global	gReadRetryInfo
+	.global	gpNandParaInfo
+	.global	gNandOptPara
+	.global	g_slc2KBNand
+	.global	g_maxRetryCount
+	.global	g_maxRegNum
+	.global	g_retryMode
+	.global	gNandIDBResBlkNumSaveInFlash
+	.global	gNandIDBResBlkNum
+	.global	gNandFlashResEndPageAddr
+	.global	gNandFlashInfoBlockAddr
+	.global	gNandFlashIdbBlockAddr
+	.global	gNandFlashInfoBlockEcc
+	.global	gNandFlashIDBEccBits
+	.global	gNandFlashEccBits
+	.global	gNandRandomizer
+	.global	gBlockPageAlignSize
+	.global	gTotleBlock
+	.global	gNandMaxChip
+	.global	gNandMaxDie
+	.global	gFlashInterfaceMode
+	.global	gFlashSlcMode
+	.global	gFlashOnfiModeEn
+	.global	gFlashToggleModeEn
+	.global	gFlashSdrModeEn
+	.global	gMultiPageProgEn
+	.global	gMultiPageReadEn
+	.global	gpReadRetrial
+	.global	mlcPageToSlcPageTbl
+	.global	slcPageToMlcPageTbl
+	.global	DieAddrs
+	.global	gDieOp
+	.global	DieCsIndex
+	.global	IDByte
+	.global	read_retry_cur_offset
+	.section	.rodata
+	.set	.LANCHOR3,. + 0
+	.type	__func__.14459, %object
+	.size	__func__.14459, 11
+__func__.14459:
+	.ascii	"FtlMemInit\000"
+.LC0:
+	.byte	60
+	.byte	40
+	.byte	24
+	.byte	16
+	.type	__func__.15408, %object
+	.size	__func__.15408, 21
+__func__.15408:
+	.ascii	"FtlVpcCheckAndModify\000"
+	.type	__func__.14532, %object
+	.size	__func__.14532, 8
+__func__.14532:
+	.ascii	"FtlInit\000"
+	.section	.rodata.str1.1,"aMS",%progbits,1
+.LC1:
+	.ascii	"FlashEraseBlocks pageAddr error %x\012\000"
+.LC2:
+	.ascii	"No.%d FLASH ID:%x %x %x %x %x %x\012\000"
+.LC3:
+	.ascii	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\012"
+	.ascii	"\000"
+.LC4:
+	.ascii	"remove_from_free_sys_Queue %x\012\000"
+.LC5:
+	.ascii	"FtlFreeSysBlkQueueOut free count = %d\012\000"
+.LC6:
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\012"
+	.ascii	"\000"
+.LC7:
+	.ascii	"FtlFreeSysBlkQueueOut = %x, free count = %d\012\000"
+.LC8:
+	.ascii	"FLASH INFO:\012\000"
+.LC9:
+	.ascii	"FLASH ID: %x\012\000"
+.LC10:
+	.ascii	"Device Capacity: %d MB\012\000"
+.LC11:
+	.ascii	"FMWAIT: %x %x %x %x\012\000"
+.LC12:
+	.ascii	"FTL INFO:\012\000"
+.LC13:
+	.ascii	"g_MaxLpn = 0x%x\012\000"
+.LC14:
+	.ascii	"g_VaildLpn = 0x%x\012\000"
+.LC15:
+	.ascii	"read_page_count = 0x%x\012\000"
+.LC16:
+	.ascii	"discard_page_count = 0x%x\012\000"
+.LC17:
+	.ascii	"write_page_count = 0x%x\012\000"
+.LC18:
+	.ascii	"cache_write_count = 0x%x\012\000"
+.LC19:
+	.ascii	"l2p_write_count = 0x%x\012\000"
+.LC20:
+	.ascii	"gc_page_count = 0x%x\012\000"
+.LC21:
+	.ascii	"totle_write = %d MB\012\000"
+.LC22:
+	.ascii	"totle_read = %d MB\012\000"
+.LC23:
+	.ascii	"GSV = 0x%x\012\000"
+.LC24:
+	.ascii	"GDV = 0x%x\012\000"
+.LC25:
+	.ascii	"bad blk num = %d %d\012\000"
+.LC26:
+	.ascii	"free_superblocks = 0x%x\012\000"
+.LC27:
+	.ascii	"mlc_EC = 0x%x\012\000"
+.LC28:
+	.ascii	"slc_EC = 0x%x\012\000"
+.LC29:
+	.ascii	"avg_EC = 0x%x\012\000"
+.LC30:
+	.ascii	"sys_EC = 0x%x\012\000"
+.LC31:
+	.ascii	"max_EC = 0x%x\012\000"
+.LC32:
+	.ascii	"min_EC = 0x%x\012\000"
+.LC33:
+	.ascii	"PLT = 0x%x\012\000"
+.LC34:
+	.ascii	"POT = 0x%x\012\000"
+.LC35:
+	.ascii	"MaxSector = 0x%x\012\000"
+.LC36:
+	.ascii	"init_sys_blks_pp = 0x%x\012\000"
+.LC37:
+	.ascii	"sys_blks_pp = 0x%x\012\000"
+.LC38:
+	.ascii	"free sysblock = 0x%x\012\000"
+.LC39:
+	.ascii	"data_blks_pp = 0x%x\012\000"
+.LC40:
+	.ascii	"data_op_blks_pp = 0x%x\012\000"
+.LC41:
+	.ascii	"max_data_blks = 0x%x\012\000"
+.LC42:
+	.ascii	"Sys.id = 0x%x\012\000"
+.LC43:
+	.ascii	"Bbt.id = 0x%x\012\000"
+.LC44:
+	.ascii	"ACT.page = 0x%x\012\000"
+.LC45:
+	.ascii	"ACT.plane = 0x%x\012\000"
+.LC46:
+	.ascii	"ACT.id = 0x%x\012\000"
+.LC47:
+	.ascii	"ACT.mode = 0x%x\012\000"
+.LC48:
+	.ascii	"ACT.a_pages = 0x%x\012\000"
+.LC49:
+	.ascii	"ACT VPC = 0x%x\012\000"
+.LC50:
+	.ascii	"BUF.page = 0x%x\012\000"
+.LC51:
+	.ascii	"BUF.plane = 0x%x\012\000"
+.LC52:
+	.ascii	"BUF.id = 0x%x\012\000"
+.LC53:
+	.ascii	"BUF.mode = 0x%x\012\000"
+.LC54:
+	.ascii	"BUF.a_pages = 0x%x\012\000"
+.LC55:
+	.ascii	"BUF VPC = 0x%x\012\000"
+.LC56:
+	.ascii	"TMP.page = 0x%x\012\000"
+.LC57:
+	.ascii	"TMP.plane = 0x%x\012\000"
+.LC58:
+	.ascii	"TMP.id = 0x%x\012\000"
+.LC59:
+	.ascii	"TMP.mode = 0x%x\012\000"
+.LC60:
+	.ascii	"TMP.a_pages = 0x%x\012\000"
+.LC61:
+	.ascii	"GC.page = 0x%x\012\000"
+.LC62:
+	.ascii	"GC.plane = 0x%x\012\000"
+.LC63:
+	.ascii	"GC.id = 0x%x\012\000"
+.LC64:
+	.ascii	"GC.mode = 0x%x\012\000"
+.LC65:
+	.ascii	"GC.a_pages = 0x%x\012\000"
+.LC66:
+	.ascii	"WR_CHK = 0x%x %x %x %x\012\000"
+.LC67:
+	.ascii	"Read Err Cnt = 0x%x\012\000"
+.LC68:
+	.ascii	"Prog Err Cnt = 0x%x\012\000"
+.LC69:
+	.ascii	"gc_free_blk_th= 0x%x\012\000"
+.LC70:
+	.ascii	"gc_merge_free_blk_th= 0x%x\012\000"
+.LC71:
+	.ascii	"gc_skip_write_count= 0x%x\012\000"
+.LC72:
+	.ascii	"gc_blk_index= 0x%x\012\000"
+.LC73:
+	.ascii	"free min EC= 0x%x\012\000"
+.LC74:
+	.ascii	"free max EC= 0x%x\012\000"
+.LC75:
+	.ascii	"GC__SB VPC = 0x%x\012\000"
+.LC76:
+	.ascii	"%d. [0x%x]=0x%x 0x%x  0x%x\012\000"
+.LC77:
+	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
+.LC78:
+	.ascii	"%s\012\000"
+.LC79:
+	.ascii	"FTL version: 5.0.48 20180504\000"
+.LC80:
+	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
+	.ascii	"\012\000"
+.LC81:
+	.ascii	"FtlGcRefreshBlock  0x%x\012\000"
+.LC82:
+	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
+.LC83:
+	.ascii	"%s error allocating memory. return -1\012\000"
+.LC84:
+	.ascii	"%s %p:0x%x:\000"
+.LC85:
+	.ascii	"%x \000"
+.LC86:
+	.ascii	"\000"
+.LC87:
+	.ascii	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\012"
+	.ascii	"\000"
+.LC88:
+	.ascii	"nandc:\000"
+.LC89:
+	.ascii	"%d flReg.d32=%x %x\012\000"
+.LC90:
+	.ascii	"micron RR %d row=%x,count %d,status=%d\012\000"
+.LC91:
+	.ascii	"ECC:%d\012\000"
+.LC92:
+	.ascii	"sdr read ok %x ecc=%d\012\000"
+.LC93:
+	.ascii	"sync para %d\012\000"
+.LC94:
+	.ascii	"TOG mode Read error %x %x\012\000"
+.LC95:
+	.ascii	"read retry status %x %x %x\012\000"
+.LC96:
+	.ascii	"Read pageadd=%x  ecc=%x err=%x\012\000"
+.LC97:
+	.ascii	"data:\000"
+.LC98:
+	.ascii	"spare:\000"
+.LC99:
+	.ascii	"ReadRetry pageadd=%x ecc=%x err=%x\012\000"
+.LC100:
+	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
+.LC101:
+	.ascii	"prog error: = %x\012\000"
+.LC102:
+	.ascii	"prog read error: = %x\012\000"
+.LC103:
+	.ascii	"prog read s error: = %x %x %x\012\000"
+.LC104:
+	.ascii	"prog read d error: = %x %x %x\012\000"
+.LC105:
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+.LC106:
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+.LC107:
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
+.LC108:
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+.LC109:
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+.LC110:
+	.ascii	"decrement_vpc_count %x = %d\012\000"
+.LC111:
+	.ascii	"FlashMakeFactorBbt %d\012\000"
+.LC112:
+	.ascii	"bad block:%d %d\012\000"
+.LC113:
+	.ascii	"FMFB:%d %d\012\000"
+.LC114:
+	.ascii	"E:bad block:%d\012\000"
+.LC115:
+	.ascii	"FMFB:Save %d %d\012\000"
+.LC116:
+	.ascii	"ftl_map_blk_gc blk info: %x %x %x\012\000"
+.LC117:
+	.ascii	"page map lost: %x %x\012\000"
+.LC118:
+	.ascii	"FtlMapWritePage error = %x\012\000"
+.LC119:
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+.LC120:
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+.LC121:
+	.ascii	"slc mode\000"
+.LC122:
+	.ascii	"no ect\000"
+.LC123:
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+.LC124:
+	.ascii	"page map lost %x %x %x %x\012\000"
+.LC125:
+	.ascii	"RSB refresh addr %x\012\000"
+.LC126:
+	.ascii	"spuer block %x vpn is 0\012 \000"
+.LC127:
+	.ascii	"g_recovery_ppa %x ver %x\012 \000"
+.LC128:
+	.ascii	"...%s enter...\012\000"
+.LC129:
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+.LC130:
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+.LC131:
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+.LC132:
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+.LC133:
+	.ascii	"GC des block %x done\012\000"
+.LC134:
+	.ascii	"rk_ftl_de_init %x\012\000"
+.LC135:
+	.ascii	"fix power lost blk = %x vpc=%x\012\000"
+.LC136:
+	.ascii	"erase power lost blk = %x vpc=%x\012\000"
+.LC137:
+	.ascii	"...%s: no bad block mapping table, format device\012"
+	.ascii	"\000"
+.LC138:
+	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
+.LC139:
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+.LC140:
+	.ascii	"FLFB:%d %d\012\000"
+.LC141:
+	.ascii	"BBT:\000"
+.LC142:
+	.ascii	"otp error! %d\000"
+.LC143:
+	.ascii	"rr\000"
+.LC144:
+	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
+.LC145:
+	.ascii	"FtlInit %x\012\000"
+.LC146:
+	.ascii	"IdBlockReadData %x %x\012\000"
+.LC147:
+	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+.LC148:
+	.ascii	"IDBlockWriteData %x %x\012\000"
+.LC149:
+	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+.LC150:
+	.ascii	"idblk:\000"
+.LC151:
+	.ascii	"idb reverse %x %x\012\000"
+.LC152:
+	.ascii	"write_idblock totle_sec %x %x\012\000"
+.LC153:
+	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
+	.ascii	"\012\000"
+.LC154:
+	.ascii	"write\000"
+.LC155:
+	.ascii	"read\000"
+.LC156:
+	.ascii	"write_idblock error\012\000"
+.LC157:
+	.ascii	"READ_SECTOR_IO\012\000"
+.LC158:
+	.ascii	"rk_copy_from_user error\012\000"
+.LC159:
+	.ascii	"READ_SECTOR_IO %x %x\012\000"
+.LC160:
+	.ascii	"rk_copy_to_user error\012\000"
+.LC161:
+	.ascii	"WRITE_SECTOR_IO\012\000"
+.LC162:
+	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+.LC163:
+	.ascii	"END_WRITE_SECTOR_IO\012\000"
+.LC164:
+	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+.LC165:
+	.ascii	"GET_FLASH_INFO_IO\012\000"
+.LC166:
+	.ascii	"GET_BAD_BLOCK_IO\012\000"
+.LC167:
+	.ascii	"bbt:\000"
+.LC168:
+	.ascii	"GET_LOCK_FLAG_IO\012\000"
+.LC169:
+	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+.LC170:
+	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+.LC171:
+	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+.LC172:
+	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+.LC173:
+	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+.LC174:
+	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+.LC175:
+	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+.LC176:
+	.ascii	"RKNAND_LOADER_STATUS\012\000"
+.LC177:
+	.ascii	"RKNAND_LOADER_LOCK\012\000"
+.LC178:
+	.ascii	"LockKey not match %d\012\000"
+.LC179:
+	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+.LC180:
+	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+.LC181:
+	.ascii	"return ret = %lx\012\000"
+.LC182:
+	.ascii	"secureBootEn check error\012\000"
+.LC183:
+	.ascii	"\0013vendor storage %x,%x,%x\012\000"
+	.data
+	.align	2
+	.set	.LANCHOR1,. + 0
+	.type	ToshibaA19RefValue, %object
+	.size	ToshibaA19RefValue, 45
+ToshibaA19RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.type	Toshiba15RefValue, %object
+	.size	Toshiba15RefValue, 95
+Toshiba15RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.type	random_seed, %object
+	.size	random_seed, 256
+random_seed:
+	.short	22378
+	.short	1512
+	.short	25245
+	.short	17827
+	.short	25756
+	.short	19440
+	.short	9026
+	.short	10030
+	.short	29528
+	.short	20467
+	.short	29676
+	.short	24432
+	.short	31328
+	.short	6872
+	.short	13426
+	.short	13842
+	.short	8783
+	.short	1108
+	.short	782
+	.short	28837
+	.short	30729
+	.short	9505
+	.short	18676
+	.short	23085
+	.short	18730
+	.short	1085
+	.short	32609
+	.short	14697
+	.short	20858
+	.short	15170
+	.short	30365
+	.short	1607
+	.short	32298
+	.short	4995
+	.short	18905
+	.short	1976
+	.short	9592
+	.short	20204
+	.short	17443
+	.short	13615
+	.short	23330
+	.short	29369
+	.short	13947
+	.short	9398
+	.short	32398
+	.short	8984
+	.short	27600
+	.short	21785
+	.short	6019
+	.short	6311
+	.short	31598
+	.short	30210
+	.short	19327
+	.short	13896
+	.short	11347
+	.short	27545
+	.short	3107
+	.short	26575
+	.short	32270
+	.short	19852
+	.short	20601
+	.short	8349
+	.short	9290
+	.short	29819
+	.short	13579
+	.short	3661
+	.short	28676
+	.short	27331
+	.short	32574
+	.short	8693
+	.short	31253
+	.short	9081
+	.short	5399
+	.short	6842
+	.short	20087
+	.short	5537
+	.short	1274
+	.short	11617
+	.short	9530
+	.short	4866
+	.short	8035
+	.short	23219
+	.short	1178
+	.short	23272
+	.short	7383
+	.short	18944
+	.short	12488
+	.short	12871
+	.short	29340
+	.short	20532
+	.short	11022
+	.short	22514
+	.short	228
+	.short	22363
+	.short	24978
+	.short	14584
+	.short	12138
+	.short	3092
+	.short	17916
+	.short	16863
+	.short	14554
+	.short	31457
+	.short	29474
+	.short	25311
+	.short	24121
+	.short	3684
+	.short	28037
+	.short	22865
+	.short	22839
+	.short	25217
+	.short	13217
+	.short	27186
+	.short	14938
+	.short	11180
+	.short	29754
+	.short	24180
+	.short	15150
+	.short	32455
+	.short	20434
+	.short	23848
+	.short	29983
+	.short	16120
+	.short	14769
+	.short	20041
+	.short	29803
+	.short	28406
+	.short	17598
+	.short	28087
+	.type	NandFlashParaTbl, %object
+	.size	NandFlashParaTbl, 2368
+NandFlashParaTbl:
+	.byte	6
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	68
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1064
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	4
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-88
+	.byte	5
+	.byte	-53
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	74
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	84
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	128
+	.byte	2
+	.byte	2
+	.short	4096
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	70
+	.byte	-123
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-120
+	.byte	5
+	.byte	-58
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	0
+	.byte	39
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	1
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	86
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	24
+	.short	512
+	.byte	2
+	.byte	2
+	.short	700
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	-59
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-43
+	.byte	-47
+	.byte	-90
+	.byte	104
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.short	64
+	.byte	1
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-36
+	.byte	-112
+	.byte	-90
+	.byte	84
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	64
+	.byte	1
+	.byte	2
+	.short	1024
+	.short	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	84
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	50
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	2184
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	50
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1048
+	.short	1479
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1044
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-46
+	.byte	4
+	.byte	67
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	473
+	.byte	1
+	.byte	1
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-61
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	473
+	.byte	1
+	.byte	2
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-111
+	.byte	96
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1046
+	.short	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2090
+	.short	473
+	.byte	1
+	.byte	4
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-21
+	.byte	116
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	473
+	.byte	1
+	.byte	7
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	530
+	.short	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	281
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-89
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1060
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	20
+	.byte	-98
+	.byte	52
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-89
+	.byte	66
+	.byte	72
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1060
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	473
+	.byte	2
+	.byte	6
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2092
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	273
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	-124
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	36
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-123
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	2
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1505
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-43
+	.byte	-124
+	.byte	50
+	.byte	114
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	1
+	.short	2056
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2058
+	.short	1489
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2062
+	.short	1489
+	.byte	1
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-107
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	1
+	.byte	2
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	85
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2050
+	.short	401
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1056
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2082
+	.short	473
+	.byte	1
+	.byte	65
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2090
+	.short	1241
+	.byte	1
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	473
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	473
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-92
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2138
+	.short	1497
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2062
+	.short	473
+	.byte	1
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	126
+	.byte	100
+	.byte	68
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	473
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	126
+	.byte	104
+	.byte	68
+	.byte	0
+	.byte	2
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	505
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	122
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	409
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	122
+	.byte	88
+	.byte	67
+	.byte	0
+	.byte	2
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	441
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-43
+	.byte	-108
+	.byte	118
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	1038
+	.short	281
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	20
+	.byte	118
+	.byte	84
+	.byte	-62
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	1169
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	40
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	NandOptPara, %object
+	.size	NandOptPara, 128
+NandOptPara:
+	.byte	1
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	50
+	.byte	17
+	.byte	-128
+	.byte	112
+	.byte	120
+	.byte	120
+	.byte	3
+	.byte	1
+	.byte	0
+	.space	14
+	.byte	2
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	0
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	3
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	4
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	112
+	.byte	112
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.type	gNandParaInfo, %object
+	.size	gNandParaInfo, 32
+gNandParaInfo:
+	.byte	0
+	.byte	0
+	.space	5
+	.byte	0
+	.byte	1
+	.byte	8
+	.short	128
+	.byte	2
+	.byte	1
+	.short	2048
+	.short	0
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	SamsungRefValue, %object
+	.size	SamsungRefValue, 64
+SamsungRefValue:
+	.byte	-89
+	.byte	-92
+	.byte	-91
+	.byte	-90
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	10
+	.byte	0
+	.byte	0
+	.byte	40
+	.byte	0
+	.byte	-20
+	.byte	-40
+	.byte	-19
+	.byte	-11
+	.byte	-19
+	.byte	-26
+	.byte	10
+	.byte	15
+	.byte	5
+	.byte	0
+	.byte	15
+	.byte	10
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-17
+	.byte	-24
+	.byte	-36
+	.byte	-15
+	.byte	-5
+	.byte	-2
+	.byte	-16
+	.byte	10
+	.byte	0
+	.byte	-5
+	.byte	-20
+	.byte	-48
+	.byte	-30
+	.byte	-48
+	.byte	-62
+	.byte	20
+	.byte	15
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-5
+	.byte	-24
+	.byte	-36
+	.byte	30
+	.byte	20
+	.byte	-5
+	.byte	-20
+	.byte	-5
+	.byte	-1
+	.byte	-5
+	.byte	-8
+	.byte	7
+	.byte	12
+	.byte	2
+	.byte	0
+	.type	ToshibaRefValue, %object
+	.size	ToshibaRefValue, 8
+ToshibaRefValue:
+	.byte	0
+	.byte	4
+	.byte	124
+	.byte	120
+	.byte	116
+	.byte	8
+	.byte	12
+	.byte	112
+	.type	gFtlInitStatus, %object
+	.size	gFtlInitStatus, 4
+gFtlInitStatus:
+	.word	-1
+	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
+	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
+ftl_gc_temp_block_bops_scan_page_addr:
+	.short	-1
+	.space	2
+	.type	power_up_flag, %object
+	.size	power_up_flag, 4
+power_up_flag:
+	.word	1
+	.type	refValueDefault, %object
+	.size	refValueDefault, 28
+refValueDefault:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.type	gSlcNandParaInfo, %object
+	.size	gSlcNandParaInfo, 32
+gSlcNandParaInfo:
+	.byte	2
+	.byte	-104
+	.byte	-15
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	1
+	.byte	1
+	.byte	4
+	.short	64
+	.byte	1
+	.byte	1
+	.short	1024
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	16
+	.byte	40
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	gTable_Crc32, %object
+	.size	gTable_Crc32, 1024
+gTable_Crc32:
+	.word	0
+	.word	79760823
+	.word	159521646
+	.word	222500569
+	.word	319043292
+	.word	398801771
+	.word	445001138
+	.word	507977733
+	.word	638086584
+	.word	583622671
+	.word	797603542
+	.word	726367073
+	.word	890002276
+	.word	835540691
+	.word	1015955466
+	.word	944721341
+	.word	1276173168
+	.word	1221711559
+	.word	1167245342
+	.word	1096011177
+	.word	1595207084
+	.word	1540743195
+	.word	1452734146
+	.word	1381497717
+	.word	1780004552
+	.word	1859763071
+	.word	1671081382
+	.word	1734058001
+	.word	2031910932
+	.word	2111671715
+	.word	1889442682
+	.word	1952421581
+	.word	-1742620960
+	.word	-1662993577
+	.word	-1851544178
+	.word	-1788698567
+	.word	-1960476612
+	.word	-1880846965
+	.word	-2102944942
+	.word	-2040097051
+	.word	-1104553128
+	.word	-1159145745
+	.word	-1213480906
+	.word	-1284846207
+	.word	-1389499004
+	.word	-1444093901
+	.word	-1531971862
+	.word	-1603339427
+	.word	-734958192
+	.word	-789553113
+	.word	-575441154
+	.word	-646808759
+	.word	-952804532
+	.word	-1007397125
+	.word	-826851294
+	.word	-898216555
+	.word	-231145432
+	.word	-151515745
+	.word	-71623866
+	.word	-8775951
+	.word	-516081932
+	.word	-436454589
+	.word	-390124134
+	.word	-327278547
+	.word	880959607
+	.word	809725376
+	.word	1023441689
+	.word	968980142
+	.word	663115435
+	.word	591878940
+	.word	772033989
+	.word	717570162
+	.word	311037391
+	.word	374014072
+	.word	453514913
+	.word	533273366
+	.word	26098451
+	.word	89077412
+	.word	135012477
+	.word	214773194
+	.word	2022882055
+	.word	2085861040
+	.word	1896915049
+	.word	1976675806
+	.word	1805028827
+	.word	1868005484
+	.word	1645516469
+	.word	1725274882
+	.word	1587205823
+	.word	1515969288
+	.word	1461243345
+	.word	1406779494
+	.word	1302257763
+	.word	1231023572
+	.word	1142749965
+	.word	1088288442
+	.word	-1398548841
+	.word	-1469916384
+	.word	-1524511239
+	.word	-1579106226
+	.word	-1079517109
+	.word	-1150882308
+	.word	-1239024859
+	.word	-1293617518
+	.word	-1968456913
+	.word	-1905609064
+	.word	-2094423999
+	.word	-2014794250
+	.word	-1716548109
+	.word	-1653702588
+	.word	-1876060515
+	.word	-1796433110
+	.word	-525136409
+	.word	-462290864
+	.word	-382658935
+	.word	-303031490
+	.word	-206095557
+	.word	-143247732
+	.word	-97181611
+	.word	-17551902
+	.word	-960798625
+	.word	-1032163864
+	.word	-818316495
+	.word	-872909178
+	.word	-708880765
+	.word	-780248268
+	.word	-599962131
+	.word	-654557094
+	.word	1761919214
+	.word	1841679705
+	.word	1619450752
+	.word	1682429495
+	.word	2046883378
+	.word	2126642053
+	.word	1937960284
+	.word	2000937195
+	.word	1326230870
+	.word	1271767265
+	.word	1183757880
+	.word	1112521615
+	.word	1544067978
+	.word	1489606205
+	.word	1435140324
+	.word	1363905875
+	.word	622074782
+	.word	567612969
+	.word	748028144
+	.word	676793671
+	.word	907029826
+	.word	852566261
+	.word	1066546732
+	.word	995310491
+	.word	52196902
+	.word	131955601
+	.word	178154824
+	.word	241131775
+	.word	270024954
+	.word	349785421
+	.word	429546388
+	.word	492525091
+	.word	-249203186
+	.word	-169575495
+	.word	-123245216
+	.word	-60399401
+	.word	-501137198
+	.word	-421507739
+	.word	-341615684
+	.word	-278768117
+	.word	-684909642
+	.word	-739502591
+	.word	-558956328
+	.word	-630321809
+	.word	-1003934358
+	.word	-1058529059
+	.word	-844417532
+	.word	-915784781
+	.word	-1120555650
+	.word	-1175150391
+	.word	-1263028720
+	.word	-1334395993
+	.word	-1372480606
+	.word	-1427073515
+	.word	-1481408308
+	.word	-1552773765
+	.word	-1690451770
+	.word	-1610822287
+	.word	-1832920152
+	.word	-1770072545
+	.word	-2009467366
+	.word	-1929839699
+	.word	-2118390412
+	.word	-2055544637
+	.word	1569104025
+	.word	1497869614
+	.word	1409596407
+	.word	1355134528
+	.word	1317180997
+	.word	1245944818
+	.word	1191218475
+	.word	1136754844
+	.word	2072956193
+	.word	2135933078
+	.word	1913443919
+	.word	1993202680
+	.word	1753938941
+	.word	1816917578
+	.word	1627971731
+	.word	1707732260
+	.word	295074793
+	.word	358053470
+	.word	403988615
+	.word	483749168
+	.word	43142453
+	.word	106119298
+	.word	185620059
+	.word	265378796
+	.word	933107281
+	.word	861871078
+	.word	1042025791
+	.word	987562120
+	.word	614080653
+	.word	542846266
+	.word	756562915
+	.word	702101076
+	.word	-978905479
+	.word	-1050272818
+	.word	-869987049
+	.word	-924581728
+	.word	-693952347
+	.word	-765317870
+	.word	-551470133
+	.word	-606062980
+	.word	-475038783
+	.word	-412191114
+	.word	-366124881
+	.word	-286495464
+	.word	-257209059
+	.word	-194363222
+	.word	-114731405
+	.word	-35103804
+	.word	-1984443127
+	.word	-1921597250
+	.word	-2143955353
+	.word	-2064327728
+	.word	-1699480619
+	.word	-1636632990
+	.word	-1825447749
+	.word	-1745818356
+	.word	-1346395983
+	.word	-1417761530
+	.word	-1505903649
+	.word	-1560496536
+	.word	-1128556947
+	.word	-1199924262
+	.word	-1254519549
+	.word	-1309114188
+	.bss
+	.align	2
+	.set	.LANCHOR0,. + 0
+	.set	.LANCHOR2,. + 8184
+	.type	gReadRetryInfo, %object
+	.size	gReadRetryInfo, 852
+gReadRetryInfo:
+	.space	852
+	.type	g_slc2KBNand, %object
+	.size	g_slc2KBNand, 1
+g_slc2KBNand:
+	.space	1
+	.type	gNandIDBResBlkNum, %object
+	.size	gNandIDBResBlkNum, 1
+gNandIDBResBlkNum:
+	.space	1
+	.space	2
+	.type	gBlockPageAlignSize, %object
+	.size	gBlockPageAlignSize, 4
+gBlockPageAlignSize:
+	.space	4
+	.type	gNandRandomizer, %object
+	.size	gNandRandomizer, 1
+gNandRandomizer:
+	.space	1
+	.space	3
+	.type	gNandChipMap, %object
+	.size	gNandChipMap, 32
+gNandChipMap:
+	.space	32
+	.type	gNandOptPara, %object
+	.size	gNandOptPara, 32
+gNandOptPara:
+	.space	32
+	.type	gFlashSlcMode, %object
+	.size	gFlashSlcMode, 1
+gFlashSlcMode:
+	.space	1
+	.space	3
+	.type	gNandIDataBuf, %object
+	.size	gNandIDataBuf, 2048
+gNandIDataBuf:
+	.space	2048
+	.type	IDByte, %object
+	.size	IDByte, 32
+IDByte:
+	.space	32
+	.type	gpNandc, %object
+	.size	gpNandc, 4
+gpNandc:
+	.space	4
+	.type	NANDC_FMCTL, %object
+	.size	NANDC_FMCTL, 4
+NANDC_FMCTL:
+	.space	4
+	.type	NANDC_FMWAIT, %object
+	.size	NANDC_FMWAIT, 4
+NANDC_FMWAIT:
+	.space	4
+	.type	NANDC_FLCTL, %object
+	.size	NANDC_FLCTL, 4
+NANDC_FLCTL:
+	.space	4
+	.type	NANDC_BCHCTL, %object
+	.size	NANDC_BCHCTL, 4
+NANDC_BCHCTL:
+	.space	4
+	.type	NANDC_DLL_CTL_REG0, %object
+	.size	NANDC_DLL_CTL_REG0, 4
+NANDC_DLL_CTL_REG0:
+	.space	4
+	.type	NANDC_DLL_CTL_REG1, %object
+	.size	NANDC_DLL_CTL_REG1, 4
+NANDC_DLL_CTL_REG1:
+	.space	4
+	.type	NANDC_RANDMZ_CFG, %object
+	.size	NANDC_RANDMZ_CFG, 4
+NANDC_RANDMZ_CFG:
+	.space	4
+	.type	NANDC_FMWAIT_SYN, %object
+	.size	NANDC_FMWAIT_SYN, 4
+NANDC_FMWAIT_SYN:
+	.space	4
+	.type	gNandPhyInfo, %object
+	.size	gNandPhyInfo, 28
+gNandPhyInfo:
+	.space	28
+	.type	slcPageToMlcPageTbl, %object
+	.size	slcPageToMlcPageTbl, 512
+slcPageToMlcPageTbl:
+	.space	512
+	.type	DieAddrs, %object
+	.size	DieAddrs, 32
+DieAddrs:
+	.space	32
+	.type	FlashWaitBusyScheduleEn, %object
+	.size	FlashWaitBusyScheduleEn, 4
+FlashWaitBusyScheduleEn:
+	.space	4
+	.type	gpNandParaInfo, %object
+	.size	gpNandParaInfo, 4
+gpNandParaInfo:
+	.space	4
+	.type	gDieOp, %object
+	.size	gDieOp, 128
+gDieOp:
+	.space	128
+	.type	read_retry_cur_offset, %object
+	.size	read_retry_cur_offset, 4
+read_retry_cur_offset:
+	.space	4
+	.type	g_maxRegNum, %object
+	.size	g_maxRegNum, 1
+g_maxRegNum:
+	.space	1
+	.type	g_retryMode, %object
+	.size	g_retryMode, 1
+g_retryMode:
+	.space	1
+	.type	gNandMaxDie, %object
+	.size	gNandMaxDie, 1
+gNandMaxDie:
+	.space	1
+	.space	1
+	.type	DieCsIndex, %object
+	.size	DieCsIndex, 8
+DieCsIndex:
+	.space	8
+	.type	gFlashInterfaceMode, %object
+	.size	gFlashInterfaceMode, 1
+gFlashInterfaceMode:
+	.space	1
+	.type	gFlashToggleModeEn, %object
+	.size	gFlashToggleModeEn, 1
+gFlashToggleModeEn:
+	.space	1
+	.space	2
+	.type	gBootDdrMode, %object
+	.size	gBootDdrMode, 4
+gBootDdrMode:
+	.space	4
+	.type	gNandcVer, %object
+	.size	gNandcVer, 4
+gNandcVer:
+	.space	4
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.space	4
+	.type	gMasterTempBuf, %object
+	.size	gMasterTempBuf, 4
+gMasterTempBuf:
+	.space	4
+	.type	gMasterInfo, %object
+	.size	gMasterInfo, 32
+gMasterInfo:
+	.space	32
+	.type	gNandcDumpWriteEn, %object
+	.size	gNandcDumpWriteEn, 4
+gNandcDumpWriteEn:
+	.space	4
+	.type	gNandcEccBits, %object
+	.size	gNandcEccBits, 4
+gNandcEccBits:
+	.space	4
+	.type	gNandFlashEccBits, %object
+	.size	gNandFlashEccBits, 1
+gNandFlashEccBits:
+	.space	1
+	.type	gMultiPageProgEn, %object
+	.size	gMultiPageProgEn, 1
+gMultiPageProgEn:
+	.space	1
+	.space	2
+	.type	g_inkDie_check_enable, %object
+	.size	g_inkDie_check_enable, 4
+g_inkDie_check_enable:
+	.space	4
+	.type	c_ftl_nand_sys_blks_per_plane, %object
+	.size	c_ftl_nand_sys_blks_per_plane, 4
+c_ftl_nand_sys_blks_per_plane:
+	.space	4
+	.type	c_ftl_nand_planes_num, %object
+	.size	c_ftl_nand_planes_num, 2
+c_ftl_nand_planes_num:
+	.space	2
+	.space	2
+	.type	c_ftl_nand_max_sys_blks, %object
+	.size	c_ftl_nand_max_sys_blks, 4
+c_ftl_nand_max_sys_blks:
+	.space	4
+	.type	c_ftl_nand_data_blks_per_plane, %object
+	.size	c_ftl_nand_data_blks_per_plane, 2
+c_ftl_nand_data_blks_per_plane:
+	.space	2
+	.type	c_ftl_nand_blk_pre_plane, %object
+	.size	c_ftl_nand_blk_pre_plane, 2
+c_ftl_nand_blk_pre_plane:
+	.space	2
+	.type	c_ftl_nand_max_data_blks, %object
+	.size	c_ftl_nand_max_data_blks, 4
+c_ftl_nand_max_data_blks:
+	.space	4
+	.type	c_ftl_nand_totle_phy_blks, %object
+	.size	c_ftl_nand_totle_phy_blks, 4
+c_ftl_nand_totle_phy_blks:
+	.space	4
+	.type	c_ftl_nand_type, %object
+	.size	c_ftl_nand_type, 2
+c_ftl_nand_type:
+	.space	2
+	.type	c_ftl_nand_die_num, %object
+	.size	c_ftl_nand_die_num, 2
+c_ftl_nand_die_num:
+	.space	2
+	.type	c_ftl_nand_planes_per_die, %object
+	.size	c_ftl_nand_planes_per_die, 2
+c_ftl_nand_planes_per_die:
+	.space	2
+	.type	p_plane_order_table, %object
+	.size	p_plane_order_table, 32
+p_plane_order_table:
+	.space	32
+	.type	c_mlc_erase_count_value, %object
+	.size	c_mlc_erase_count_value, 2
+c_mlc_erase_count_value:
+	.space	2
+	.type	c_ftl_nand_ext_blk_pre_plane, %object
+	.size	c_ftl_nand_ext_blk_pre_plane, 2
+c_ftl_nand_ext_blk_pre_plane:
+	.space	2
+	.type	c_ftl_vendor_part_size, %object
+	.size	c_ftl_vendor_part_size, 2
+c_ftl_vendor_part_size:
+	.space	2
+	.type	c_ftl_nand_blks_per_die, %object
+	.size	c_ftl_nand_blks_per_die, 2
+c_ftl_nand_blks_per_die:
+	.space	2
+	.type	c_ftl_nand_blks_per_die_shift, %object
+	.size	c_ftl_nand_blks_per_die_shift, 2
+c_ftl_nand_blks_per_die_shift:
+	.space	2
+	.type	c_ftl_nand_page_pre_blk, %object
+	.size	c_ftl_nand_page_pre_blk, 2
+c_ftl_nand_page_pre_blk:
+	.space	2
+	.type	c_ftl_nand_page_pre_slc_blk, %object
+	.size	c_ftl_nand_page_pre_slc_blk, 2
+c_ftl_nand_page_pre_slc_blk:
+	.space	2
+	.type	c_ftl_nand_page_pre_super_blk, %object
+	.size	c_ftl_nand_page_pre_super_blk, 2
+c_ftl_nand_page_pre_super_blk:
+	.space	2
+	.type	c_ftl_nand_sec_pre_page, %object
+	.size	c_ftl_nand_sec_pre_page, 2
+c_ftl_nand_sec_pre_page:
+	.space	2
+	.type	c_ftl_nand_sec_pre_page_shift, %object
+	.size	c_ftl_nand_sec_pre_page_shift, 2
+c_ftl_nand_sec_pre_page_shift:
+	.space	2
+	.type	c_ftl_nand_byte_pre_page, %object
+	.size	c_ftl_nand_byte_pre_page, 2
+c_ftl_nand_byte_pre_page:
+	.space	2
+	.type	c_ftl_nand_byte_pre_oob, %object
+	.size	c_ftl_nand_byte_pre_oob, 2
+c_ftl_nand_byte_pre_oob:
+	.space	2
+	.type	c_ftl_nand_reserved_blks, %object
+	.size	c_ftl_nand_reserved_blks, 2
+c_ftl_nand_reserved_blks:
+	.space	2
+	.type	DeviceCapacity, %object
+	.size	DeviceCapacity, 4
+DeviceCapacity:
+	.space	4
+	.type	c_ftl_nand_max_vendor_blks, %object
+	.size	c_ftl_nand_max_vendor_blks, 2
+c_ftl_nand_max_vendor_blks:
+	.space	2
+	.type	c_ftl_nand_vendor_region_num, %object
+	.size	c_ftl_nand_vendor_region_num, 2
+c_ftl_nand_vendor_region_num:
+	.space	2
+	.type	c_ftl_nand_map_blks_per_plane, %object
+	.size	c_ftl_nand_map_blks_per_plane, 2
+c_ftl_nand_map_blks_per_plane:
+	.space	2
+	.space	2
+	.type	c_ftl_nand_max_map_blks, %object
+	.size	c_ftl_nand_max_map_blks, 4
+c_ftl_nand_max_map_blks:
+	.space	4
+	.type	c_ftl_nand_init_sys_blks_per_plane, %object
+	.size	c_ftl_nand_init_sys_blks_per_plane, 4
+c_ftl_nand_init_sys_blks_per_plane:
+	.space	4
+	.type	c_ftl_nand_map_region_num, %object
+	.size	c_ftl_nand_map_region_num, 2
+c_ftl_nand_map_region_num:
+	.space	2
+	.type	c_ftl_nand_l2pmap_ram_region_num, %object
+	.size	c_ftl_nand_l2pmap_ram_region_num, 2
+c_ftl_nand_l2pmap_ram_region_num:
+	.space	2
+	.type	g_MaxLbaSector, %object
+	.size	g_MaxLbaSector, 4
+g_MaxLbaSector:
+	.space	4
+	.type	g_page_map_check_enable, %object
+	.size	g_page_map_check_enable, 2
+g_page_map_check_enable:
+	.space	2
+	.type	g_totle_vendor_block, %object
+	.size	g_totle_vendor_block, 2
+g_totle_vendor_block:
+	.space	2
+	.type	p_vendor_block_table, %object
+	.size	p_vendor_block_table, 4
+p_vendor_block_table:
+	.space	4
+	.type	g_wr_page_num, %object
+	.size	g_wr_page_num, 4
+g_wr_page_num:
+	.space	4
+	.type	req_wr_io, %object
+	.size	req_wr_io, 4
+req_wr_io:
+	.space	4
+	.type	g_MaxLpn, %object
+	.size	g_MaxLpn, 4
+g_MaxLpn:
+	.space	4
+	.type	gBbtInfo, %object
+	.size	gBbtInfo, 60
+gBbtInfo:
+	.space	60
+	.type	gSysFreeQueue, %object
+	.size	gSysFreeQueue, 2056
+gSysFreeQueue:
+	.space	2056
+	.type	g_flash_read_only_en, %object
+	.size	g_flash_read_only_en, 4
+g_flash_read_only_en:
+	.space	4
+	.type	req_erase, %object
+	.size	req_erase, 4
+req_erase:
+	.space	4
+	.type	p_erase_count_table, %object
+	.size	p_erase_count_table, 4
+p_erase_count_table:
+	.space	4
+	.type	g_totle_sys_slc_erase_count, %object
+	.size	g_totle_sys_slc_erase_count, 4
+g_totle_sys_slc_erase_count:
+	.space	4
+	.type	g_sys_save_data, %object
+	.size	g_sys_save_data, 48
+g_sys_save_data:
+	.space	48
+	.type	p_data_block_list_table, %object
+	.size	p_data_block_list_table, 4
+p_data_block_list_table:
+	.space	4
+	.type	p_data_block_list_head, %object
+	.size	p_data_block_list_head, 4
+p_data_block_list_head:
+	.space	4
+	.type	p_valid_page_count_table, %object
+	.size	p_valid_page_count_table, 4
+p_valid_page_count_table:
+	.space	4
+	.type	p_data_block_list_tail, %object
+	.size	p_data_block_list_tail, 4
+p_data_block_list_tail:
+	.space	4
+	.type	g_num_data_superblocks, %object
+	.size	g_num_data_superblocks, 2
+g_num_data_superblocks:
+	.space	2
+	.space	2
+	.type	p_free_data_block_list_head, %object
+	.size	p_free_data_block_list_head, 4
+p_free_data_block_list_head:
+	.space	4
+	.type	g_num_free_superblocks, %object
+	.size	g_num_free_superblocks, 2
+g_num_free_superblocks:
+	.space	2
+	.space	2
+	.type	g_active_superblock, %object
+	.size	g_active_superblock, 48
+g_active_superblock:
+	.space	48
+	.type	g_buffer_superblock, %object
+	.size	g_buffer_superblock, 48
+g_buffer_superblock:
+	.space	48
+	.type	g_gc_temp_superblock, %object
+	.size	g_gc_temp_superblock, 48
+g_gc_temp_superblock:
+	.space	48
+	.type	p_l2p_ram_map, %object
+	.size	p_l2p_ram_map, 4
+p_l2p_ram_map:
+	.space	4
+	.type	g_l2p_last_update_region_id, %object
+	.size	g_l2p_last_update_region_id, 2
+g_l2p_last_update_region_id:
+	.space	2
+	.type	FtlUpdateVaildLpnCount, %object
+	.size	FtlUpdateVaildLpnCount, 2
+FtlUpdateVaildLpnCount:
+	.space	2
+	.type	g_VaildLpn, %object
+	.size	g_VaildLpn, 4
+g_VaildLpn:
+	.space	4
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 4
+p_blk_mode_table:
+	.space	4
+	.type	g_totle_read_page_count, %object
+	.size	g_totle_read_page_count, 4
+g_totle_read_page_count:
+	.space	4
+	.type	g_totle_discard_page_count, %object
+	.size	g_totle_discard_page_count, 4
+g_totle_discard_page_count:
+	.space	4
+	.type	g_totle_write_page_count, %object
+	.size	g_totle_write_page_count, 4
+g_totle_write_page_count:
+	.space	4
+	.type	g_totle_cache_write_count, %object
+	.size	g_totle_cache_write_count, 4
+g_totle_cache_write_count:
+	.space	4
+	.type	g_totle_l2p_write_count, %object
+	.size	g_totle_l2p_write_count, 4
+g_totle_l2p_write_count:
+	.space	4
+	.type	g_totle_gc_page_count, %object
+	.size	g_totle_gc_page_count, 4
+g_totle_gc_page_count:
+	.space	4
+	.type	g_totle_write_sector, %object
+	.size	g_totle_write_sector, 4
+g_totle_write_sector:
+	.space	4
+	.type	g_totle_read_sector, %object
+	.size	g_totle_read_sector, 4
+g_totle_read_sector:
+	.space	4
+	.type	g_GlobalSysVersion, %object
+	.size	g_GlobalSysVersion, 4
+g_GlobalSysVersion:
+	.space	4
+	.type	g_GlobalDataVersion, %object
+	.size	g_GlobalDataVersion, 4
+g_GlobalDataVersion:
+	.space	4
+	.type	g_totle_mlc_erase_count, %object
+	.size	g_totle_mlc_erase_count, 4
+g_totle_mlc_erase_count:
+	.space	4
+	.type	g_totle_slc_erase_count, %object
+	.size	g_totle_slc_erase_count, 4
+g_totle_slc_erase_count:
+	.space	4
+	.type	g_totle_avg_erase_count, %object
+	.size	g_totle_avg_erase_count, 4
+g_totle_avg_erase_count:
+	.space	4
+	.type	g_max_erase_count, %object
+	.size	g_max_erase_count, 4
+g_max_erase_count:
+	.space	4
+	.type	g_min_erase_count, %object
+	.size	g_min_erase_count, 4
+g_min_erase_count:
+	.space	4
+	.type	c_ftl_nand_data_op_blks_per_plane, %object
+	.size	c_ftl_nand_data_op_blks_per_plane, 2
+c_ftl_nand_data_op_blks_per_plane:
+	.space	2
+	.space	2
+	.type	gSysInfo, %object
+	.size	gSysInfo, 12
+gSysInfo:
+	.space	12
+	.type	g_gc_superblock, %object
+	.size	g_gc_superblock, 48
+g_gc_superblock:
+	.space	48
+	.type	g_all_blk_used_slc_mode, %object
+	.size	g_all_blk_used_slc_mode, 4
+g_all_blk_used_slc_mode:
+	.space	4
+	.type	g_sys_ext_data, %object
+	.size	g_sys_ext_data, 512
+g_sys_ext_data:
+	.space	512
+	.type	g_gc_free_blk_threshold, %object
+	.size	g_gc_free_blk_threshold, 2
+g_gc_free_blk_threshold:
+	.space	2
+	.type	g_gc_merge_free_blk_threshold, %object
+	.size	g_gc_merge_free_blk_threshold, 2
+g_gc_merge_free_blk_threshold:
+	.space	2
+	.type	g_gc_skip_write_count, %object
+	.size	g_gc_skip_write_count, 4
+g_gc_skip_write_count:
+	.space	4
+	.type	g_gc_blk_index, %object
+	.size	g_gc_blk_index, 2
+g_gc_blk_index:
+	.space	2
+	.space	2
+	.type	g_in_swl_replace, %object
+	.size	g_in_swl_replace, 4
+g_in_swl_replace:
+	.space	4
+	.type	g_gc_num_req, %object
+	.size	g_gc_num_req, 4
+g_gc_num_req:
+	.space	4
+	.type	gp_gc_page_buf_info, %object
+	.size	gp_gc_page_buf_info, 4
+gp_gc_page_buf_info:
+	.space	4
+	.type	p_gc_data_buf, %object
+	.size	p_gc_data_buf, 4
+p_gc_data_buf:
+	.space	4
+	.type	p_gc_spare_buf, %object
+	.size	p_gc_spare_buf, 4
+p_gc_spare_buf:
+	.space	4
+	.type	req_gc, %object
+	.size	req_gc, 4
+req_gc:
+	.space	4
+	.type	c_gc_page_buf_num, %object
+	.size	c_gc_page_buf_num, 4
+c_gc_page_buf_num:
+	.space	4
+	.type	g_gc_blk_num, %object
+	.size	g_gc_blk_num, 2
+g_gc_blk_num:
+	.space	2
+	.space	2
+	.type	p_gc_blk_tbl, %object
+	.size	p_gc_blk_tbl, 4
+p_gc_blk_tbl:
+	.space	4
+	.type	p_gc_page_info, %object
+	.size	p_gc_page_info, 4
+p_gc_page_info:
+	.space	4
+	.type	g_gc_page_offset, %object
+	.size	g_gc_page_offset, 2
+g_gc_page_offset:
+	.space	2
+	.type	g_gc_next_blk, %object
+	.size	g_gc_next_blk, 2
+g_gc_next_blk:
+	.space	2
+	.type	g_gc_next_blk_1, %object
+	.size	g_gc_next_blk_1, 2
+g_gc_next_blk_1:
+	.space	2
+	.type	g_gc_bad_block_temp_num, %object
+	.size	g_gc_bad_block_temp_num, 2
+g_gc_bad_block_temp_num:
+	.space	2
+	.type	g_gc_bad_block_temp_tbl, %object
+	.size	g_gc_bad_block_temp_tbl, 34
+g_gc_bad_block_temp_tbl:
+	.space	34
+	.type	g_gc_bad_block_gc_index, %object
+	.size	g_gc_bad_block_gc_index, 2
+g_gc_bad_block_gc_index:
+	.space	2
+	.type	g_free_slc_blk_num, %object
+	.size	g_free_slc_blk_num, 2
+g_free_slc_blk_num:
+	.space	2
+	.space	2
+	.type	p_map_block_valid_page_count, %object
+	.size	p_map_block_valid_page_count, 4
+p_map_block_valid_page_count:
+	.space	4
+	.type	p_l2p_map_buf, %object
+	.size	p_l2p_map_buf, 4
+p_l2p_map_buf:
+	.space	4
+	.type	gL2pMapInfo, %object
+	.size	gL2pMapInfo, 44
+gL2pMapInfo:
+	.space	44
+	.type	g_totle_map_block, %object
+	.size	g_totle_map_block, 2
+g_totle_map_block:
+	.space	2
+	.space	2
+	.type	p_map_block_table, %object
+	.size	p_map_block_table, 4
+p_map_block_table:
+	.space	4
+	.type	p_map_block_ver_table, %object
+	.size	p_map_block_ver_table, 4
+p_map_block_ver_table:
+	.space	4
+	.type	p_map_region_ppn_table, %object
+	.size	p_map_region_ppn_table, 4
+p_map_region_ppn_table:
+	.space	4
+	.type	c_ftl_nand_bbm_buf_size, %object
+	.size	c_ftl_nand_bbm_buf_size, 2
+c_ftl_nand_bbm_buf_size:
+	.space	2
+	.space	2
+	.type	g_req_cache, %object
+	.size	g_req_cache, 4
+g_req_cache:
+	.space	4
+	.type	g_tmp_data_superblock_id, %object
+	.size	g_tmp_data_superblock_id, 2
+g_tmp_data_superblock_id:
+	.space	2
+	.space	2
+	.type	g_totle_swl_count, %object
+	.size	g_totle_swl_count, 4
+g_totle_swl_count:
+	.space	4
+	.type	ftl_gc_temp_power_lost_recovery_flag, %object
+	.size	ftl_gc_temp_power_lost_recovery_flag, 4
+ftl_gc_temp_power_lost_recovery_flag:
+	.space	4
+	.type	g_recovery_page_min_ver, %object
+	.size	g_recovery_page_min_ver, 4
+g_recovery_page_min_ver:
+	.space	4
+	.type	p_swl_mul_table, %object
+	.size	p_swl_mul_table, 4
+p_swl_mul_table:
+	.space	4
+	.type	g_SlcPartLbaEndSector, %object
+	.size	g_SlcPartLbaEndSector, 4
+g_SlcPartLbaEndSector:
+	.space	4
+	.type	g_in_gc_progress, %object
+	.size	g_in_gc_progress, 4
+g_in_gc_progress:
+	.space	4
+	.type	g_gc_head_data_block, %object
+	.size	g_gc_head_data_block, 4
+g_gc_head_data_block:
+	.space	4
+	.type	g_gc_head_data_block_count, %object
+	.size	g_gc_head_data_block_count, 4
+g_gc_head_data_block_count:
+	.space	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.space	4
+	.type	g_gc_refresh_block_temp_num, %object
+	.size	g_gc_refresh_block_temp_num, 2
+g_gc_refresh_block_temp_num:
+	.space	2
+	.space	2
+	.type	c_wr_page_buf_num, %object
+	.size	c_wr_page_buf_num, 4
+c_wr_page_buf_num:
+	.space	4
+	.type	req_read, %object
+	.size	req_read, 4
+req_read:
+	.space	4
+	.type	req_gc_dst, %object
+	.size	req_gc_dst, 4
+req_gc_dst:
+	.space	4
+	.type	req_prgm, %object
+	.size	req_prgm, 4
+req_prgm:
+	.space	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 4
+p_sys_data_buf:
+	.space	4
+	.type	p_sys_data_buf_1, %object
+	.size	p_sys_data_buf_1, 4
+p_sys_data_buf_1:
+	.space	4
+	.type	p_vendor_data_buf, %object
+	.size	p_vendor_data_buf, 4
+p_vendor_data_buf:
+	.space	4
+	.type	p_wr_io_data_buf, %object
+	.size	p_wr_io_data_buf, 4
+p_wr_io_data_buf:
+	.space	4
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 4
+p_io_data_buf_0:
+	.space	4
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 4
+p_io_data_buf_1:
+	.space	4
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 4
+p_sys_spare_buf:
+	.space	4
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 4
+p_io_spare_buf:
+	.space	4
+	.type	p_wr_io_spare_buf, %object
+	.size	p_wr_io_spare_buf, 4
+p_wr_io_spare_buf:
+	.space	4
+	.type	g_ect_tbl_info_size, %object
+	.size	g_ect_tbl_info_size, 2
+g_ect_tbl_info_size:
+	.space	2
+	.space	2
+	.type	gp_ect_tbl_info, %object
+	.size	gp_ect_tbl_info, 4
+gp_ect_tbl_info:
+	.space	4
+	.type	p_valid_page_count_check_table, %object
+	.size	p_valid_page_count_check_table, 4
+p_valid_page_count_check_table:
+	.space	4
+	.type	p_vendor_block_valid_page_count, %object
+	.size	p_vendor_block_valid_page_count, 4
+p_vendor_block_valid_page_count:
+	.space	4
+	.type	p_vendor_block_ver_table, %object
+	.size	p_vendor_block_ver_table, 4
+p_vendor_block_ver_table:
+	.space	4
+	.type	p_vendor_region_ppn_table, %object
+	.size	p_vendor_region_ppn_table, 4
+p_vendor_region_ppn_table:
+	.space	4
+	.type	p_map_region_ppn_check_table, %object
+	.size	p_map_region_ppn_check_table, 4
+p_map_region_ppn_check_table:
+	.space	4
+	.type	gNandMaxChip, %object
+	.size	gNandMaxChip, 1
+gNandMaxChip:
+	.space	1
+	.space	1
+	.type	gTotleBlock, %object
+	.size	gTotleBlock, 2
+gTotleBlock:
+	.space	2
+	.type	mlcPageToSlcPageTbl, %object
+	.size	mlcPageToSlcPageTbl, 1024
+mlcPageToSlcPageTbl:
+	.space	1024
+	.type	RK29_NANDC_REG_BASE, %object
+	.size	RK29_NANDC_REG_BASE, 4
+RK29_NANDC_REG_BASE:
+	.space	4
+	.type	gFlashPageBuffer1, %object
+	.size	gFlashPageBuffer1, 4
+gFlashPageBuffer1:
+	.space	4
+	.type	g_maxRetryCount, %object
+	.size	g_maxRetryCount, 1
+g_maxRetryCount:
+	.space	1
+	.space	3
+	.type	gpFlashSaveInfo, %object
+	.size	gpFlashSaveInfo, 4
+gpFlashSaveInfo:
+	.space	4
+	.type	gFlashPageBuffer0, %object
+	.size	gFlashPageBuffer0, 4
+gFlashPageBuffer0:
+	.space	4
+	.type	gNandFlashIDBEccBits, %object
+	.size	gNandFlashIDBEccBits, 1
+gNandFlashIDBEccBits:
+	.space	1
+	.space	3
+	.type	gNandFlashIdbBlockAddr, %object
+	.size	gNandFlashIdbBlockAddr, 4
+gNandFlashIdbBlockAddr:
+	.space	4
+	.type	gNandFlashInfoBlockAddr, %object
+	.size	gNandFlashInfoBlockAddr, 4
+gNandFlashInfoBlockAddr:
+	.space	4
+	.type	gNandIDBResBlkNumSaveInFlash, %object
+	.size	gNandIDBResBlkNumSaveInFlash, 1
+gNandIDBResBlkNumSaveInFlash:
+	.space	1
+	.space	3
+	.type	FlashDdrTunningReadCount, %object
+	.size	FlashDdrTunningReadCount, 4
+FlashDdrTunningReadCount:
+	.space	4
+	.type	gpReadRetrial, %object
+	.size	gpReadRetrial, 4
+gpReadRetrial:
+	.space	4
+	.type	gMultiPageReadEn, %object
+	.size	gMultiPageReadEn, 1
+gMultiPageReadEn:
+	.space	1
+	.space	3
+	.type	req_sys, %object
+	.size	req_sys, 36
+req_sys:
+	.space	36
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.space	4
+	.type	gFlashProgCheckBuffer, %object
+	.size	gFlashProgCheckBuffer, 4
+gFlashProgCheckBuffer:
+	.space	4
+	.type	gFlashProgCheckSpareBuffer, %object
+	.size	gFlashProgCheckSpareBuffer, 4
+gFlashProgCheckSpareBuffer:
+	.space	4
+	.type	gFlashSpareBuffer, %object
+	.size	gFlashSpareBuffer, 4
+gFlashSpareBuffer:
+	.space	4
+	.type	FbbtBlk, %object
+	.size	FbbtBlk, 16
+FbbtBlk:
+	.space	16
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
+	.type	g_ect_tbl_power_up_flush, %object
+	.size	g_ect_tbl_power_up_flush, 2
+g_ect_tbl_power_up_flush:
+	.space	2
+	.type	g_power_lost_ecc_error_blk, %object
+	.size	g_power_lost_ecc_error_blk, 2
+g_power_lost_ecc_error_blk:
+	.space	2
+	.type	g_power_lost_recovery_flag, %object
+	.size	g_power_lost_recovery_flag, 2
+g_power_lost_recovery_flag:
+	.space	2
+	.space	2
+	.type	g_recovery_page_num, %object
+	.size	g_recovery_page_num, 4
+g_recovery_page_num:
+	.space	4
+	.type	g_recovery_ppa_tbl, %object
+	.size	g_recovery_ppa_tbl, 128
+g_recovery_ppa_tbl:
+	.space	128
+	.type	gc_ink_free_return_value, %object
+	.size	gc_ink_free_return_value, 2
+gc_ink_free_return_value:
+	.space	2
+	.type	g_gc_cur_blk_valid_pages, %object
+	.size	g_gc_cur_blk_valid_pages, 2
+g_gc_cur_blk_valid_pages:
+	.space	2
+	.type	g_gc_cur_blk_max_valid_pages, %object
+	.size	g_gc_cur_blk_max_valid_pages, 2
+g_gc_cur_blk_max_valid_pages:
+	.space	2
+	.space	2
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 4
+gp_last_act_superblock:
+	.space	4
+	.type	gc_discard_updated, %object
+	.size	gc_discard_updated, 4
+gc_discard_updated:
+	.space	4
+	.type	g_LowFormat, %object
+	.size	g_LowFormat, 4
+g_LowFormat:
+	.space	4
+	.type	g_ftl_nand_free_count, %object
+	.size	g_ftl_nand_free_count, 4
+g_ftl_nand_free_count:
+	.space	4
+	.type	last_cache_match_count, %object
+	.size	last_cache_match_count, 4
+last_cache_match_count:
+	.space	4
+	.type	gLoaderBootInfo, %object
+	.size	gLoaderBootInfo, 4
+gLoaderBootInfo:
+	.space	4
+	.type	RK29_NANDC1_REG_BASE, %object
+	.size	RK29_NANDC1_REG_BASE, 4
+RK29_NANDC1_REG_BASE:
+	.space	4
+	.type	g_idb_buffer, %object
+	.size	g_idb_buffer, 4
+g_idb_buffer:
+	.space	4
+	.type	gpDrmKeyInfo, %object
+	.size	gpDrmKeyInfo, 4
+gpDrmKeyInfo:
+	.space	4
+	.type	SecureBootCheckOK, %object
+	.size	SecureBootCheckOK, 4
+SecureBootCheckOK:
+	.space	4
+	.type	SecureBootEn, %object
+	.size	SecureBootEn, 4
+SecureBootEn:
+	.space	4
+	.type	gpBootConfig, %object
+	.size	gpBootConfig, 4
+gpBootConfig:
+	.space	4
+	.type	gSnSectorData, %object
+	.size	gSnSectorData, 512
+gSnSectorData:
+	.space	512
+	.type	SecureBootUnlockTryCount, %object
+	.size	SecureBootUnlockTryCount, 4
+SecureBootUnlockTryCount:
+	.space	4
+	.type	gpVendor0Info, %object
+	.size	gpVendor0Info, 4
+gpVendor0Info:
+	.space	4
+	.type	gpVendor1Info, %object
+	.size	gpVendor1Info, 4
+gpVendor1Info:
+	.space	4
+	.type	g_vendor, %object
+	.size	g_vendor, 4
+g_vendor:
+	.space	4
+	.type	g_gc_refresh_block_temp_tbl, %object
+	.size	g_gc_refresh_block_temp_tbl, 34
+g_gc_refresh_block_temp_tbl:
+	.space	34
+	.space	2
+	.type	gToggleModeClkDiv, %object
+	.size	gToggleModeClkDiv, 4
+gToggleModeClkDiv:
+	.space	4
+	.type	gpNandc1, %object
+	.size	gpNandc1, 4
+gpNandc1:
+	.space	4
+	.type	gNandFlashResEndPageAddr, %object
+	.size	gNandFlashResEndPageAddr, 4
+gNandFlashResEndPageAddr:
+	.space	4
+	.type	gNandFlashInfoBlockEcc, %object
+	.size	gNandFlashInfoBlockEcc, 1
+gNandFlashInfoBlockEcc:
+	.space	1
+	.type	gFlashOnfiModeEn, %object
+	.size	gFlashOnfiModeEn, 1
+gFlashOnfiModeEn:
+	.space	1
+	.type	gFlashSdrModeEn, %object
+	.size	gFlashSdrModeEn, 1
+gFlashSdrModeEn:
+	.space	1
diff --git a/drivers/rk_nand/rk_ftl_arm_v7_thumb.S b/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
new file mode 100644
index 000000000000..77de7f91b411
--- /dev/null
+++ b/drivers/rk_nand/rk_ftl_arm_v7_thumb.S
@@ -0,0 +1,27165 @@
+/*
+ * Copyright (c) 2016-2017, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * date: 2017-12-13
+ */
+	.syntax unified
+	.arch armv7-a
+	.fpu softvfp
+	.eabi_attribute 20, 1
+	.eabi_attribute 21, 1
+	.eabi_attribute 23, 3
+	.eabi_attribute 24, 1
+	.eabi_attribute 25, 1
+	.eabi_attribute 26, 2
+	.eabi_attribute 30, 4
+	.eabi_attribute 34, 1
+	.eabi_attribute 18, 4
+	.thumb
+	.file	"rk_ftl_arm_v7.S"
+	.text
+	.align	1
+	.global	FlashMemCmp8
+	.thumb
+	.thumb_func
+	.type	FlashMemCmp8, %function
+FlashMemCmp8:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L10
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	ldrb	r3, [r3]	@ zero_extendqisi2
+	cbz	r3, .L4
+	ldrb	r4, [r0, #1]	@ zero_extendqisi2
+	ldrb	r3, [r1, #1]	@ zero_extendqisi2
+	cmp	r4, r3
+	beq	.L8
+	movs	r3, #0
+.L4:
+	cmp	r3, r2
+	beq	.L8
+	ldrb	r5, [r0, r3]	@ zero_extendqisi2
+	ldrb	r4, [r1, r3]	@ zero_extendqisi2
+	adds	r3, r3, #1
+	cmp	r5, r4
+	beq	.L4
+	mov	r0, r3
+	pop	{r4, r5, pc}
+.L8:
+	movs	r0, #0
+	pop	{r4, r5, pc}
+.L11:
+	.align	2
+.L10:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashMemCmp8, .-FlashMemCmp8
+	.align	1
+	.global	FlashRsvdBlkChk
+	.thumb
+	.thumb_func
+	.type	FlashRsvdBlkChk, %function
+FlashRsvdBlkChk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L15
+	ldrb	r2, [r3, #1]	@ zero_extendqisi2
+	ldr	r3, [r3, #4]
+	muls	r3, r2, r3
+	cmp	r1, r3
+	bcs	.L14
+	adds	r0, r0, #0
+	it	ne
+	movne	r0, #1
+	bx	lr
+.L14:
+	movs	r0, #1
+	bx	lr
+.L16:
+	.align	2
+.L15:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashRsvdBlkChk, .-FlashRsvdBlkChk
+	.align	1
+	.global	FlashGetRandomizer
+	.thumb
+	.thumb_func
+	.type	FlashGetRandomizer, %function
+FlashGetRandomizer:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L25
+	and	r2, r1, #127
+	push	{r4, lr}
+	.save {r4, lr}
+	ldrh	r4, [r3, r2, lsl #1]
+	ldr	r3, .L25+4
+	ldrb	r3, [r3, #8]	@ zero_extendqisi2
+	cbz	r3, .L18
+	bl	FlashRsvdBlkChk
+	cbz	r0, .L18
+	orr	r4, r4, #-1073741824
+.L18:
+	mov	r0, r4
+	pop	{r4, pc}
+.L26:
+	.align	2
+.L25:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetRandomizer, .-FlashGetRandomizer
+	.align	1
+	.global	FlashSetRandomizer
+	.thumb
+	.thumb_func
+	.type	FlashSetRandomizer, %function
+FlashSetRandomizer:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L35
+	and	r2, r1, #127
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldrh	r5, [r3, r2, lsl #1]
+	ldr	r3, .L35+4
+	ldrb	r2, [r3, #8]	@ zero_extendqisi2
+	mov	r4, r3
+	cbz	r2, .L28
+	bl	FlashRsvdBlkChk
+	cbz	r0, .L28
+	orr	r5, r5, #-1073741824
+.L28:
+	add	r4, r4, r6, lsl #3
+	ldr	r3, [r4, #12]
+	str	r5, [r3, #336]
+	pop	{r4, r5, r6, pc}
+.L36:
+	.align	2
+.L35:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashSetRandomizer, .-FlashSetRandomizer
+	.align	1
+	.global	FlashReadCmd
+	.thumb
+	.thumb_func
+	.type	FlashReadCmd, %function
+FlashReadCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	lsrs	r2, r1, #16
+	ldr	r4, .L38
+	add	r4, r4, r0, lsl #3
+	ldr	r3, [r4, #12]
+	ldrb	r4, [r4, #16]	@ zero_extendqisi2
+	add	r3, r3, r4, lsl #8
+	movs	r4, #0
+	str	r4, [r3, #2056]
+	str	r4, [r3, #2052]
+	str	r4, [r3, #2052]
+	uxtb	r4, r1
+	str	r4, [r3, #2052]
+	lsrs	r4, r1, #8
+	str	r4, [r3, #2052]
+	str	r2, [r3, #2052]
+	movs	r2, #48
+	str	r2, [r3, #2056]
+	pop	{r4, lr}
+	b	FlashSetRandomizer
+.L39:
+	.align	2
+.L38:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadCmd, .-FlashReadCmd
+	.align	1
+	.global	FlashReadDpDataOutCmd
+	.thumb
+	.thumb_func
+	.type	FlashReadDpDataOutCmd, %function
+FlashReadDpDataOutCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	uxtb	r6, r1
+	ldr	r4, .L44
+	lsrs	r5, r1, #8
+	add	r3, r4, r0, lsl #3
+	ldrb	r4, [r4, #60]	@ zero_extendqisi2
+	ldr	r2, [r3, #12]
+	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	cmp	r4, #1
+	lsr	r4, r1, #16
+	lsl	r3, r3, #8
+	add	r3, r3, r2
+	bne	.L41
+	movs	r2, #6
+	str	r2, [r3, #2056]
+	movs	r2, #0
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+	str	r6, [r3, #2052]
+	str	r5, [r3, #2052]
+	str	r4, [r3, #2052]
+	b	.L43
+.L41:
+	movs	r2, #0
+	str	r2, [r3, #2056]
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+	str	r6, [r3, #2052]
+	str	r5, [r3, #2052]
+	str	r4, [r3, #2052]
+	movs	r4, #5
+	str	r4, [r3, #2056]
+	str	r2, [r3, #2052]
+	str	r2, [r3, #2052]
+.L43:
+	movs	r2, #224
+	str	r2, [r3, #2056]
+	pop	{r4, r5, r6, lr}
+	b	FlashSetRandomizer
+.L45:
+	.align	2
+.L44:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadDpDataOutCmd, .-FlashReadDpDataOutCmd
+	.align	1
+	.global	flash_enter_slc_mode
+	.thumb
+	.thumb_func
+	.type	flash_enter_slc_mode, %function
+flash_enter_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L51
+	ldrb	r2, [r3, #76]	@ zero_extendqisi2
+	cbz	r2, .L46
+	add	r0, r3, r0, lsl #3
+	ldrb	r2, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r0, #12]
+	add	r3, r3, r2, lsl #8
+	movs	r2, #218
+	str	r2, [r3, #2056]
+.L46:
+	bx	lr
+.L52:
+	.align	2
+.L51:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
+	.align	1
+	.global	flash_exit_slc_mode
+	.thumb
+	.thumb_func
+	.type	flash_exit_slc_mode, %function
+flash_exit_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L58
+	ldrb	r2, [r3, #76]	@ zero_extendqisi2
+	cbz	r2, .L53
+	add	r0, r3, r0, lsl #3
+	ldrb	r2, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r0, #12]
+	add	r3, r3, r2, lsl #8
+	movs	r2, #223
+	str	r2, [r3, #2056]
+.L53:
+	bx	lr
+.L59:
+	.align	2
+.L58:
+	.word	.LANCHOR0
+	.fnend
+	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
+	.align	1
+	.global	FlashProgFirstCmd
+	.thumb
+	.thumb_func
+	.type	FlashProgFirstCmd, %function
+FlashProgFirstCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	lsrs	r2, r1, #16
+	ldr	r4, .L61
+	add	r4, r4, r0, lsl #3
+	ldr	r3, [r4, #12]
+	ldrb	r4, [r4, #16]	@ zero_extendqisi2
+	add	r3, r3, r4, lsl #8
+	movs	r4, #128
+	str	r4, [r3, #2056]
+	movs	r4, #0
+	str	r4, [r3, #2052]
+	str	r4, [r3, #2052]
+	uxtb	r4, r1
+	str	r4, [r3, #2052]
+	lsrs	r4, r1, #8
+	str	r4, [r3, #2052]
+	str	r2, [r3, #2052]
+	pop	{r4, lr}
+	b	FlashSetRandomizer
+.L62:
+	.align	2
+.L61:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgFirstCmd, .-FlashProgFirstCmd
+	.align	1
+	.global	FlashEraseCmd
+	.thumb
+	.thumb_func
+	.type	FlashEraseCmd, %function
+FlashEraseCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	ldr	r5, .L68
+	add	r0, r5, r0, lsl #3
+	ldrb	r3, [r0, #16]	@ zero_extendqisi2
+	ldr	r4, [r0, #12]
+	lsls	r3, r3, #8
+	cbz	r2, .L64
+	adds	r2, r4, r3
+	movs	r0, #96
+	str	r0, [r2, #2056]
+	uxtb	r0, r1
+	str	r0, [r2, #2052]
+	lsrs	r0, r1, #8
+	str	r0, [r2, #2052]
+	lsrs	r0, r1, #16
+	str	r0, [r2, #2052]
+	ldr	r2, [r5, #4]
+	add	r1, r1, r2
+.L64:
+	add	r3, r3, r4
+	movs	r2, #96
+	str	r2, [r3, #2056]
+	uxtb	r2, r1
+	str	r2, [r3, #2052]
+	lsrs	r2, r1, #8
+	lsrs	r1, r1, #16
+	str	r2, [r3, #2052]
+	str	r1, [r3, #2052]
+	movs	r2, #208
+	str	r2, [r3, #2056]
+	pop	{r4, r5, pc}
+.L69:
+	.align	2
+.L68:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashEraseCmd, .-FlashEraseCmd
+	.align	1
+	.global	FlashProgDpSecondCmd
+	.thumb
+	.thumb_func
+	.type	FlashProgDpSecondCmd, %function
+FlashProgDpSecondCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	lsrs	r2, r1, #16
+	ldr	r4, .L71
+	add	r5, r4, r0, lsl #3
+	ldrb	r4, [r4, #55]	@ zero_extendqisi2
+	ldr	r3, [r5, #12]
+	ldrb	r5, [r5, #16]	@ zero_extendqisi2
+	add	r3, r3, r5, lsl #8
+	str	r4, [r3, #2056]
+	movs	r4, #0
+	str	r4, [r3, #2052]
+	str	r4, [r3, #2052]
+	uxtb	r4, r1
+	str	r4, [r3, #2052]
+	lsrs	r4, r1, #8
+	str	r4, [r3, #2052]
+	str	r2, [r3, #2052]
+	pop	{r4, r5, lr}
+	b	FlashSetRandomizer
+.L72:
+	.align	2
+.L71:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgDpSecondCmd, .-FlashProgDpSecondCmd
+	.align	1
+	.global	FlashProgSecondCmd
+	.thumb
+	.thumb_func
+	.type	FlashProgSecondCmd, %function
+FlashProgSecondCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L74
+	add	r0, r3, r0, lsl #3
+	ldrb	r2, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r0, #12]
+	add	r3, r3, r2, lsl #8
+	movs	r2, #16
+	str	r2, [r3, #2056]
+	bx	lr
+.L75:
+	.align	2
+.L74:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
+	.align	1
+	.global	FlashProgDpFirstCmd
+	.thumb
+	.thumb_func
+	.type	FlashProgDpFirstCmd, %function
+FlashProgDpFirstCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L77
+	add	r0, r2, r0, lsl #3
+	ldrb	r2, [r2, #54]	@ zero_extendqisi2
+	ldrb	r1, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r0, #12]
+	add	r3, r3, r1, lsl #8
+	str	r2, [r3, #2056]
+	bx	lr
+.L78:
+	.align	2
+.L77:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgDpFirstCmd, .-FlashProgDpFirstCmd
+	.align	1
+	.global	JSHash
+	.thumb
+	.thumb_func
+	.type	JSHash, %function
+JSHash:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L83
+	add	r1, r1, r0
+	push	{r4, lr}
+	.save {r4, lr}
+.L80:
+	cmp	r0, r1
+	beq	.L82
+	lsls	r2, r3, #5
+	ldrb	r4, [r0], #1	@ zero_extendqisi2
+	add	r2, r2, r3, lsr #2
+	add	r2, r2, r4
+	eors	r3, r3, r2
+	b	.L80
+.L82:
+	mov	r0, r3
+	pop	{r4, pc}
+.L84:
+	.align	2
+.L83:
+	.word	1204201446
+	.fnend
+	.size	JSHash, .-JSHash
+	.align	1
+	.global	FlashLoadIdbInfo
+	.thumb
+	.thumb_func
+	.type	FlashLoadIdbInfo, %function
+FlashLoadIdbInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r0, #0
+	bx	lr
+	.fnend
+	.size	FlashLoadIdbInfo, .-FlashLoadIdbInfo
+	.align	1
+	.global	BuildFlashLsbPageTable
+	.thumb
+	.thumb_func
+	.type	BuildFlashLsbPageTable, %function
+BuildFlashLsbPageTable:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r1
+	cbnz	r0, .L87
+	ldr	r3, .L113
+.L88:
+	strh	r0, [r3, r0, lsl #1]	@ movhi
+	adds	r0, r0, #1
+	cmp	r0, #256
+	bne	.L88
+.L92:
+	movs	r1, #255
+	ldr	r0, .L113+4
+	mov	r2, #1024
+	uxth	r4, r4
+	bl	memset
+	movs	r3, #0
+	ldr	r1, .L113+8
+	b	.L89
+.L87:
+	cmp	r0, #1
+	bne	.L90
+	ldr	r5, .L113
+	movs	r3, #0
+.L91:
+	uxth	r2, r3
+	cmp	r2, #3
+	ite	ls
+	movls	r0, #0
+	movhi	r0, #1
+	bics	r1, r0, r3
+	ite	ne
+	movne	r1, #2
+	moveq	r1, #3
+	rsb	r1, r1, r2, lsl #1
+	cmp	r0, #0
+	it	ne
+	movne	r2, r1
+	strh	r2, [r5, r3, lsl #1]	@ movhi
+	adds	r3, r3, #1
+	cmp	r3, #256
+	bne	.L91
+	b	.L92
+.L90:
+	cmp	r0, #2
+	bne	.L93
+	ldr	r0, .L113
+	movs	r3, #0
+.L94:
+	uxth	r2, r3
+	lsls	r1, r2, #1
+	subs	r1, r1, #1
+	cmp	r2, #1
+	it	hi
+	movhi	r2, r1
+	strh	r2, [r0, r3, lsl #1]	@ movhi
+	adds	r3, r3, #1
+	cmp	r3, #256
+	bne	.L94
+	b	.L92
+.L93:
+	cmp	r0, #3
+	bne	.L95
+	ldr	r5, .L113
+	movs	r3, #0
+.L96:
+	uxth	r2, r3
+	cmp	r2, #5
+	ite	ls
+	movls	r0, #0
+	movhi	r0, #1
+	bics	r1, r0, r3
+	ite	ne
+	movne	r1, #4
+	moveq	r1, #5
+	rsb	r1, r1, r2, lsl #1
+	cmp	r0, #0
+	it	ne
+	movne	r2, r1
+	strh	r2, [r5, r3, lsl #1]	@ movhi
+	adds	r3, r3, #1
+	cmp	r3, #256
+	bne	.L96
+	b	.L92
+.L95:
+	cmp	r0, #4
+	mov	r3, #0
+	bne	.L97
+	ldr	r2, .L113+8
+	strh	r3, [r2, #80]	@ movhi
+	movs	r3, #1
+	strh	r0, [r2, #88]	@ movhi
+	strh	r3, [r2, #82]	@ movhi
+	movs	r3, #2
+	strh	r3, [r2, #84]	@ movhi
+	movs	r3, #3
+	strh	r3, [r2, #86]	@ movhi
+	movs	r3, #5
+	strh	r3, [r2, #90]	@ movhi
+	movs	r3, #7
+	strh	r3, [r2, #92]	@ movhi
+	movs	r3, #8
+	strh	r3, [r2, #94]!	@ movhi
+.L98:
+	tst	r3, #1
+	ite	ne
+	movne	r1, #7
+	moveq	r1, #6
+	rsb	r1, r1, r3, lsl #1
+	adds	r3, r3, #1
+	strh	r1, [r2, #2]!	@ movhi
+	uxth	r3, r3
+	cmp	r3, #256
+	bne	.L98
+	b	.L92
+.L97:
+	cmp	r0, #5
+	bne	.L99
+	ldr	r2, .L113
+.L100:
+	strh	r3, [r2, r3, lsl #1]	@ movhi
+	adds	r3, r3, #1
+	cmp	r3, #16
+	bne	.L100
+	ldr	r2, .L113+12
+.L101:
+	strh	r3, [r2, #2]!	@ movhi
+	adds	r3, r3, #2
+	uxth	r3, r3
+	cmp	r3, #496
+	bne	.L101
+	b	.L92
+.L99:
+	cmp	r0, #6
+	bne	.L92
+	ldr	r5, .L113
+.L102:
+	uxth	r2, r3
+	cmp	r2, #5
+	ite	ls
+	movls	r0, #0
+	movhi	r0, #1
+	add	r1, r2, r2, lsl #1
+	bics	r6, r0, r3
+	ite	ne
+	movne	r6, #10
+	moveq	r6, #12
+	subs	r1, r1, r6
+	cmp	r0, #0
+	it	ne
+	movne	r2, r1
+	strh	r2, [r5, r3, lsl #1]	@ movhi
+	adds	r3, r3, #1
+	cmp	r3, #256
+	bne	.L102
+	b	.L92
+.L89:
+	uxth	r2, r3
+	cmp	r2, r4
+	bcs	.L112
+	ldr	r2, .L113
+	ldrh	r2, [r2, r3, lsl #1]
+	adds	r3, r3, #1
+	add	r0, r1, r2, lsl #1
+	strh	r2, [r0, #592]	@ movhi
+	b	.L89
+.L112:
+	pop	{r4, r5, r6, pc}
+.L114:
+	.align	2
+.L113:
+	.word	.LANCHOR0+80
+	.word	.LANCHOR0+592
+	.word	.LANCHOR0
+	.word	.LANCHOR0+110
+	.fnend
+	.size	BuildFlashLsbPageTable, .-BuildFlashLsbPageTable
+	.align	1
+	.global	FlashPrintInfo
+	.thumb
+	.thumb_func
+	.type	FlashPrintInfo, %function
+FlashPrintInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FlashPrintInfo, .-FlashPrintInfo
+	.align	1
+	.global	FlashDieInfoInit
+	.thumb
+	.thumb_func
+	.type	FlashDieInfoInit, %function
+FlashDieInfoInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movs	r3, #0
+	ldr	r4, .L134
+	strb	r3, [r4, #1616]
+	strb	r3, [r4, #1617]
+	ldr	r3, .L134+4
+	ldrh	r3, [r3, #266]
+	cmp	r3, #256
+	bls	.L117
+	mov	r3, #512
+	b	.L133
+.L117:
+	cmp	r3, #128
+	it	hi
+	movhi	r3, #256
+.L133:
+	ldr	r0, .L134+8
+	movs	r1, #8
+	str	r3, [r4, #4]
+	bl	__memzero
+	ldr	r0, .L134+12
+	movs	r1, #32
+	bl	__memzero
+	ldr	r0, .L134+16
+	movs	r1, #128
+	ldr	r8, .L134
+	bl	__memzero
+	ldr	r5, [r4, #1788]
+	movs	r6, #0
+	add	r10, r8, #1792
+	adds	r7, r5, #1
+.L121:
+	mov	r0, r7
+	add	r1, r10, r6, lsl #3
+	ldrb	r2, [r5]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	ldr	r9, .L134+20
+	cbnz	r0, .L120
+	ldrb	r3, [r8, #1616]	@ zero_extendqisi2
+	add	r2, r8, r3, lsl #2
+	str	r0, [r2, #1628]
+	adds	r2, r3, #1
+	add	r3, r3, r8
+	strb	r2, [r8, #1616]
+	strb	r6, [r3, #1620]
+.L120:
+	adds	r6, r6, #1
+	cmp	r6, #4
+	bne	.L121
+	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
+	ldr	r2, .L134
+	strb	r3, [r4, #1617]
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	cmp	r3, #2
+	beq	.L122
+.L126:
+	ldrb	r3, [r5, #13]	@ zero_extendqisi2
+	ldrb	r2, [r4, #1616]	@ zero_extendqisi2
+	smulbb	r2, r2, r3
+	ldrh	r3, [r5, #14]
+	smulbb	r3, r2, r3
+	strh	r3, [r4, #1824]	@ movhi
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L122:
+	ldr	r8, [r2, #4]
+	movs	r6, #0
+	mov	r10, r2
+.L125:
+	mov	r0, r7
+	add	r1, r9, r6, lsl #3
+	ldrb	r2, [r5]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	cbnz	r0, .L123
+	ldrb	r1, [r5, #13]	@ zero_extendqisi2
+	ldrh	r3, [r5, #14]
+	ldrb	r2, [r10, #1616]	@ zero_extendqisi2
+	mul	r1, r8, r1
+	and	r3, r3, #65280
+	add	r0, r10, r2, lsl #2
+	muls	r3, r1, r3
+	str	r3, [r0, #1628]
+	ldrb	r1, [r5, #23]	@ zero_extendqisi2
+	cbz	r1, .L124
+	lsls	r3, r3, #1
+	str	r3, [r0, #1628]
+.L124:
+	adds	r3, r2, #1
+	add	r2, r2, r4
+	strb	r3, [r4, #1616]
+	strb	r6, [r2, #1620]
+.L123:
+	adds	r6, r6, #1
+	cmp	r6, #4
+	bne	.L125
+	b	.L126
+.L135:
+	.align	2
+.L134:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR0+1620
+	.word	.LANCHOR0+1628
+	.word	.LANCHOR0+1660
+	.word	.LANCHOR0+1792
+	.fnend
+	.size	FlashDieInfoInit, .-FlashDieInfoInit
+	.align	1
+	.global	FlashSuspend
+	.thumb
+	.thumb_func
+	.type	FlashSuspend, %function
+FlashSuspend:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L137
+	movs	r0, #0
+	ldr	r2, [r3, #1828]
+	ldr	r1, [r2]
+	str	r1, [r3, #1832]
+	ldr	r1, [r2, #4]
+	str	r1, [r3, #1836]
+	ldr	r1, [r2, #8]
+	str	r1, [r3, #1840]
+	ldr	r1, [r2, #12]
+	str	r1, [r3, #1844]
+	ldr	r1, [r2, #304]
+	str	r1, [r3, #1848]
+	ldr	r1, [r2, #308]
+	str	r1, [r3, #1852]
+	ldr	r1, [r2, #336]
+	ldr	r2, [r2, #344]
+	str	r1, [r3, #1856]
+	str	r2, [r3, #1860]
+	bx	lr
+.L138:
+	.align	2
+.L137:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashSuspend, .-FlashSuspend
+	.global	__aeabi_uidiv
+	.align	1
+	.global	LogAddr2PhyAddr
+	.thumb
+	.thumb_func
+	.type	LogAddr2PhyAddr, %function
+LogAddr2PhyAddr:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r7, r0
+	ldr	r0, .L144
+	mov	r8, r3
+	ldr	r4, [r7, #4]
+	mov	r10, r1
+	mov	r9, r2
+	ldrh	r3, [r0, #1878]
+	bic	r4, r4, #-2147483648
+	ldrh	r5, [r0, #1876]
+	mov	r6, r0
+	ldrh	fp, [r0, #4]
+	smulbb	r5, r5, r3
+	ldrb	r3, [r0]	@ zero_extendqisi2
+	cmp	r3, #1
+	ubfx	r3, r4, #10, #16
+	it	eq
+	lsleq	fp, fp, #1
+	str	r3, [sp, #4]
+	mov	r0, r3
+	uxth	r5, r5
+	it	eq
+	uxtheq	fp, fp
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	cmp	r10, #1
+	ubfx	r1, r4, #0, #10
+	uxth	r0, r0
+	ldr	r3, [sp, #4]
+	smulbb	r5, r0, r5
+	sub	r3, r3, r5
+	uxth	r3, r3
+	bne	.L141
+	ldrb	r2, [r6, #76]	@ zero_extendqisi2
+	cbnz	r2, .L141
+	ldr	r2, .L144
+	add	r1, r2, r1, lsl #1
+	ldrh	r1, [r1, #80]
+.L141:
+	add	r6, r6, r0, lsl #2
+	ldr	r2, [r6, #1628]
+	mla	fp, fp, r3, r2
+	ldrb	r3, [sp, #48]	@ zero_extendqisi2
+	cmp	r3, #1
+	add	r1, r1, fp
+	str	r1, [r9]
+	str	r0, [r8]
+	bls	.L143
+	ldr	r0, [r7, #4]
+	ldr	r3, [r7, #40]
+	add	r0, r0, #1024
+	subs	r3, r0, r3
+	rsbs	r0, r3, #0
+	adcs	r0, r0, r3
+	b	.L142
+.L143:
+	movs	r0, #0
+.L142:
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L145:
+	.align	2
+.L144:
+	.word	.LANCHOR0
+	.fnend
+	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
+	.align	1
+	.global	ReadFlashInfo
+	.thumb
+	.thumb_func
+	.type	ReadFlashInfo, %function
+ReadFlashInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r1, #11
+	mov	r4, r0
+	bl	__memzero
+	ldr	r3, .L150
+	movs	r5, #1
+	ldr	r1, [r3, #1788]
+	ldr	r2, [r3, #4]
+	addw	r3, r3, #1620
+	ldrb	r0, [r1, #9]	@ zero_extendqisi2
+	smulbb	r2, r0, r2
+	ldrb	r0, [r3, #272]	@ zero_extendqisi2
+	strb	r0, [r4, #7]
+	uxth	r2, r2
+	strh	r2, [r4, #4]	@ unaligned
+	ldrb	r0, [r1, #13]	@ zero_extendqisi2
+	muls	r2, r0, r2
+	ldrh	r0, [r1, #14]
+	ldrb	r1, [r1, #8]	@ zero_extendqisi2
+	muls	r2, r0, r2
+	muls	r2, r1, r2
+	str	r2, [r4]	@ unaligned
+	ldr	r2, [r3, #168]
+	ldrb	r0, [r3, #-4]	@ zero_extendqisi2
+	ldrb	r1, [r2, #9]	@ zero_extendqisi2
+	strb	r1, [r4, #6]
+	movs	r1, #32
+	strb	r1, [r4, #8]
+	ldrb	r2, [r2, #7]	@ zero_extendqisi2
+	strb	r2, [r4, #9]
+	movs	r2, #0
+	strb	r2, [r4, #10]
+.L147:
+	uxtb	r1, r2
+	cmp	r1, r0
+	bcs	.L149
+	ldrb	r1, [r2, r3]	@ zero_extendqisi2
+	adds	r2, r2, #1
+	lsl	r6, r5, r1
+	ldrb	r1, [r4, #10]	@ zero_extendqisi2
+	orrs	r1, r1, r6
+	strb	r1, [r4, #10]
+	b	.L147
+.L149:
+	pop	{r4, r5, r6, pc}
+.L151:
+	.align	2
+.L150:
+	.word	.LANCHOR0
+	.fnend
+	.size	ReadFlashInfo, .-ReadFlashInfo
+	.align	1
+	.global	FlashScheduleEnSet
+	.thumb
+	.thumb_func
+	.type	FlashScheduleEnSet, %function
+FlashScheduleEnSet:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L153
+	ldr	r2, [r3, #1896]
+	str	r0, [r3, #1896]
+	mov	r0, r2
+	bx	lr
+.L154:
+	.align	2
+.L153:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashScheduleEnSet, .-FlashScheduleEnSet
+	.align	1
+	.global	FlashGetPageSize
+	.thumb
+	.thumb_func
+	.type	FlashGetPageSize, %function
+FlashGetPageSize:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L156
+	ldr	r3, [r3, #1788]
+	ldrb	r0, [r3, #9]	@ zero_extendqisi2
+	bx	lr
+.L157:
+	.align	2
+.L156:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashGetPageSize, .-FlashGetPageSize
+	.align	1
+	.global	NandcReadDontCaseBusyEn
+	.thumb
+	.thumb_func
+	.type	NandcReadDontCaseBusyEn, %function
+NandcReadDontCaseBusyEn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	NandcReadDontCaseBusyEn, .-NandcReadDontCaseBusyEn
+	.align	1
+	.global	NandcGetChipIf
+	.thumb
+	.thumb_func
+	.type	NandcGetChipIf, %function
+NandcGetChipIf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L160
+	add	r0, r3, r0, lsl #3
+	ldrb	r2, [r0, #16]	@ zero_extendqisi2
+	ldr	r0, [r0, #12]
+	adds	r2, r2, #8
+	add	r0, r0, r2, lsl #8
+	bx	lr
+.L161:
+	.align	2
+.L160:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcGetChipIf, .-NandcGetChipIf
+	.align	1
+	.global	NandcSetDdrPara
+	.thumb
+	.thumb_func
+	.type	NandcSetDdrPara, %function
+NandcSetDdrPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L163
+	ldr	r2, [r3, #1828]
+	lsls	r3, r0, #8
+	orr	r0, r3, r0, lsl #16
+	orr	r3, r0, #1
+	str	r3, [r2, #304]
+	bx	lr
+.L164:
+	.align	2
+.L163:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrPara, .-NandcSetDdrPara
+	.align	1
+	.global	NandcSetDdrDiv
+	.thumb
+	.thumb_func
+	.type	NandcSetDdrDiv, %function
+NandcSetDdrDiv:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L166
+	orr	r0, r0, #16640
+	ldr	r3, [r3, #1828]
+	str	r0, [r3, #344]
+	bx	lr
+.L167:
+	.align	2
+.L166:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrDiv, .-NandcSetDdrDiv
+	.align	1
+	.global	NandcSetDdrMode
+	.thumb
+	.thumb_func
+	.type	NandcSetDdrMode, %function
+NandcSetDdrMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L171
+	ldr	r2, [r3, #1828]
+	ldr	r3, [r2]
+	cbnz	r0, .L169
+	bfi	r3, r0, #13, #1
+	b	.L170
+.L169:
+	orr	r3, r3, #253952
+.L170:
+	str	r3, [r2]
+	bx	lr
+.L172:
+	.align	2
+.L171:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetDdrMode, .-NandcSetDdrMode
+	.align	1
+	.global	NandcSetMode
+	.thumb
+	.thumb_func
+	.type	NandcSetMode, %function
+NandcSetMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r5, .L180
+	ldr	r3, [r5, #1828]
+	ldr	r4, [r3]
+	ands	r3, r0, #6
+	beq	.L174
+	orr	r4, r4, #24576
+	lsls	r3, r0, #29
+	bfc	r4, #15, #1
+	mov	r0, #0
+	orr	r4, r4, #196608
+	it	mi
+	orrmi	r4, r4, #32768
+	bl	rknand_get_clk_rate
+	ldr	r3, [r5, #1828]
+	movw	r2, #8322
+	str	r2, [r3, #344]
+	add	r2, r2, #1040384
+	addw	r2, r2, #3969
+	str	r2, [r3, #304]
+	movs	r2, #38
+	str	r2, [r3, #308]
+	movs	r2, #39
+	str	r2, [r3, #308]
+	b	.L176
+.L174:
+	bfi	r4, r3, #13, #1
+.L176:
+	ldr	r3, [r5, #1828]
+	movs	r0, #0
+	str	r4, [r3]
+	pop	{r3, r4, r5, pc}
+.L181:
+	.align	2
+.L180:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcSetMode, .-NandcSetMode
+	.align	1
+	.global	NandcFlashCs
+	.thumb
+	.thumb_func
+	.type	NandcFlashCs, %function
+NandcFlashCs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L183
+	add	r0, r2, r0, lsl #3
+	movs	r2, #1
+	ldr	r1, [r0, #12]
+	ldrb	r0, [r0, #16]	@ zero_extendqisi2
+	ldr	r3, [r1]
+	lsls	r2, r2, r0
+	bfi	r3, r2, #0, #8
+	str	r3, [r1]
+	bx	lr
+.L184:
+	.align	2
+.L183:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcFlashCs, .-NandcFlashCs
+	.align	1
+	.global	NandcFlashDeCs
+	.thumb
+	.thumb_func
+	.type	NandcFlashDeCs, %function
+NandcFlashDeCs:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L186
+	add	r0, r3, r0, lsl #3
+	ldr	r2, [r0, #12]
+	ldr	r3, [r2]
+	bfc	r3, #0, #8
+	bfc	r3, #17, #1
+	str	r3, [r2]
+	bx	lr
+.L187:
+	.align	2
+.L186:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcFlashDeCs, .-NandcFlashDeCs
+	.align	1
+	.global	NandcDelayns
+	.thumb
+	.thumb_func
+	.type	NandcDelayns, %function
+NandcDelayns:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	.pad #8
+	sub	sp, sp, #8
+	lsrs	r0, r0, #4
+	str	r0, [sp, #4]
+.L189:
+	ldr	r0, [sp, #4]
+	subs	r3, r0, #1
+	str	r3, [sp, #4]
+	cmp	r0, #0
+	bne	.L189
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+	.fnend
+	.size	NandcDelayns, .-NandcDelayns
+	.align	1
+	.global	FlashReadStatus
+	.thumb
+	.thumb_func
+	.type	FlashReadStatus, %function
+FlashReadStatus:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r2, #112
+	ldr	r3, .L192
+	add	r0, r3, r0, lsl #3
+	ldrb	r4, [r0, #16]	@ zero_extendqisi2
+	ldr	r5, [r0, #12]
+	movs	r0, #80
+	add	r3, r5, r4, lsl #8
+	adds	r4, r4, #8
+	str	r2, [r3, #2056]
+	lsls	r4, r4, #8
+	bl	NandcDelayns
+	ldr	r0, [r5, r4]
+	pop	{r3, r4, r5, pc}
+.L193:
+	.align	2
+.L192:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadStatus, .-FlashReadStatus
+	.align	1
+	.global	ToshibaSetRRPara
+	.thumb
+	.thumb_func
+	.type	ToshibaSetRRPara, %function
+ToshibaSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	add	r8, r1, r1, lsl #2
+	ldr	r9, .L203+8
+	movs	r4, #0
+	ldr	r7, .L203
+	mov	r5, r0
+	add	r10, r9, #288
+	mov	r6, r1
+.L195:
+	ldrb	r3, [r7, #1901]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcs	.L202
+	movs	r3, #85
+	str	r3, [r5, #8]
+	ldrsb	r3, [r4, r10]
+	movs	r0, #200
+	str	r3, [r5, #4]
+	bl	NandcDelayns
+	ldrb	r3, [r7, #1900]	@ zero_extendqisi2
+	cmp	r3, #34
+	bne	.L196
+	add	r3, r4, r8
+	add	r3, r3, r10
+	b	.L201
+.L196:
+	cmp	r3, #35
+	bne	.L198
+	ldr	r2, .L203+4
+	add	r3, r4, r8
+	add	r3, r3, r2
+.L201:
+	ldrsb	r3, [r3, #5]
+	b	.L200
+.L198:
+	add	r3, r9, r6
+	ldrsb	r3, [r3, #432]
+.L200:
+	str	r3, [r5]
+	adds	r4, r4, #1
+	b	.L195
+.L202:
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L204:
+	.align	2
+.L203:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+336
+	.word	.LANCHOR1
+	.fnend
+	.size	ToshibaSetRRPara, .-ToshibaSetRRPara
+	.align	1
+	.global	SamsungSetRRPara
+	.thumb
+	.thumb_func
+	.type	SamsungSetRRPara, %function
+SamsungSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L209
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	add	r1, r3, r1, lsl #2
+	movs	r4, #0
+	ldr	r8, .L209+4
+	adds	r5, r1, #3
+	mov	r9, #161
+	mov	r6, r0
+	mov	r7, r3
+	mov	r10, r4
+.L206:
+	ldrb	r3, [r8, #1901]	@ zero_extendqisi2
+	cmp	r4, r3
+	bcs	.L208
+	str	r9, [r6, #8]
+	mov	r0, #300
+	str	r10, [r6]
+	ldrsb	r3, [r7, r4]
+	adds	r4, r4, #1
+	str	r3, [r6]
+	ldrsb	r3, [r5, #1]!
+	str	r3, [r6]
+	bl	NandcDelayns
+	b	.L206
+.L208:
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L210:
+	.align	2
+.L209:
+	.word	.LANCHOR1+440
+	.word	.LANCHOR0
+	.fnend
+	.size	SamsungSetRRPara, .-SamsungSetRRPara
+	.align	1
+	.global	HynixSetRRPara
+	.thumb
+	.thumb_func
+	.type	HynixSetRRPara, %function
+HynixSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r7, r3
+	ldr	r6, .L218
+	mov	r9, r2
+	mov	r5, r0
+	mov	r8, r1
+	addw	r4, r6, #1902
+	ldr	r3, [r6, #1788]
+	ldrb	r2, [r3, #19]	@ zero_extendqisi2
+	lsls	r3, r0, #3
+	cmp	r2, #6
+	bne	.L212
+	add	r4, r4, r0, lsl #6
+	adds	r4, r4, #20
+	add	r4, r4, r7, lsl #2
+	b	.L213
+.L212:
+	cmp	r2, #7
+	itett	eq
+	moveq	r2, #160
+	addne	r2, r7, r3
+	mlaeq	r4, r2, r0, r4
+	addeq	r2, r7, r7, lsl #2
+	ittee	ne
+	addne	r4, r4, r2, lsl #3
+	addne	r4, r4, #20
+	addeq	r4, r4, #28
+	addeq	r4, r4, r2, lsl #1
+.L213:
+	add	r3, r3, r6
+	mov	r0, r5
+	add	r8, r8, #-1
+	subs	r4, r4, #1
+	ldrb	fp, [r3, #16]	@ zero_extendqisi2
+	ldr	r10, [r3, #12]
+	bl	NandcFlashCs
+	movs	r3, #54
+	lsl	fp, fp, #8
+	add	r2, r10, fp
+	str	r3, [r2, #2056]
+	add	r3, r9, #-1
+	add	r9, r9, r8
+	mov	r8, r2
+.L215:
+	cmp	r3, r9
+	beq	.L217
+	ldrb	r2, [r3, #1]!	@ zero_extendqisi2
+	movs	r0, #200
+	str	r2, [r8, #2052]
+	str	r3, [sp, #4]
+	bl	NandcDelayns
+	ldrsb	r2, [r4, #1]!
+	str	r2, [r8, #2048]
+	ldr	r3, [sp, #4]
+	b	.L215
+.L217:
+	add	fp, fp, r10
+	movs	r3, #22
+	mov	r0, r5
+	add	r5, r5, r6
+	str	r3, [fp, #2056]
+	bl	NandcFlashDeCs
+	strb	r7, [r5, #2756]
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L219:
+	.align	2
+.L218:
+	.word	.LANCHOR0
+	.fnend
+	.size	HynixSetRRPara, .-HynixSetRRPara
+	.align	1
+	.global	FlashSetReadRetryDefault
+	.thumb
+	.thumb_func
+	.type	FlashSetReadRetryDefault, %function
+FlashSetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r3, .L226
+	ldr	r2, [r3, #1788]
+	ldrb	r2, [r2, #19]	@ zero_extendqisi2
+	subs	r2, r2, #1
+	cmp	r2, #6
+	bhi	.L220
+	movs	r4, #0
+	mov	r5, r3
+.L221:
+	ldr	r2, .L226+4
+	uxtb	r0, r4
+	ldrb	r3, [r2, r4, lsl #3]	@ zero_extendqisi2
+	cmp	r3, #173
+	bne	.L222
+	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
+	adds	r2, r2, #114
+	movs	r3, #0
+	bl	HynixSetRRPara
+.L222:
+	adds	r4, r4, #1
+	cmp	r4, #4
+	bne	.L221
+.L220:
+	pop	{r3, r4, r5, pc}
+.L227:
+	.align	2
+.L226:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+1792
+	.fnend
+	.size	FlashSetReadRetryDefault, .-FlashSetReadRetryDefault
+	.align	1
+	.global	FlashReadStatusEN
+	.thumb
+	.thumb_func
+	.type	FlashReadStatusEN, %function
+FlashReadStatusEN:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r5, .L238
+	add	r0, r5, r0, lsl #3
+	ldr	r3, [r5, #1788]
+	ldrb	r4, [r0, #16]	@ zero_extendqisi2
+	ldr	r6, [r0, #12]
+	ldrb	r3, [r3, #8]	@ zero_extendqisi2
+	cmp	r3, #2
+	lsl	r3, r4, #8
+	add	r4, r4, #8
+	bne	.L229
+	cbnz	r2, .L230
+	ldrb	r2, [r5, #57]	@ zero_extendqisi2
+	b	.L237
+.L230:
+	ldrb	r2, [r5, #58]	@ zero_extendqisi2
+.L237:
+	add	r3, r3, r6
+	str	r2, [r3, #2056]
+	ldrb	r0, [r5, #59]	@ zero_extendqisi2
+	cbz	r0, .L233
+	movs	r3, #0
+	add	r5, r6, r4, lsl #8
+.L232:
+	cmp	r3, r0
+	bcs	.L233
+	lsls	r2, r3, #3
+	adds	r3, r3, #1
+	lsr	r2, r1, r2
+	uxtb	r2, r2
+	str	r2, [r5, #4]
+	b	.L232
+.L229:
+	add	r3, r3, r6
+	movs	r2, #112
+	str	r2, [r3, #2056]
+.L233:
+	movs	r0, #80
+	lsls	r4, r4, #8
+	bl	NandcDelayns
+	ldr	r0, [r6, r4]
+	uxtb	r0, r0
+	pop	{r4, r5, r6, pc}
+.L239:
+	.align	2
+.L238:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadStatusEN, .-FlashReadStatusEN
+	.align	1
+	.global	FlashWaitReadyEN
+	.thumb
+	.thumb_func
+	.type	FlashWaitReadyEN, %function
+FlashWaitReadyEN:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	mov	r5, r1
+	mov	r6, r2
+.L244:
+	mov	r0, r4
+	mov	r1, r5
+	mov	r2, r6
+	bl	FlashReadStatusEN
+	cmp	r0, #255
+	mov	r3, r0
+	beq	.L244
+	lsls	r3, r3, #25
+	bpl	.L244
+	pop	{r4, r5, r6, pc}
+	.fnend
+	.size	FlashWaitReadyEN, .-FlashWaitReadyEN
+	.align	1
+	.global	FlashWaitCmdDone
+	.thumb
+	.thumb_func
+	.type	FlashWaitCmdDone, %function
+FlashWaitCmdDone:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r8, r0
+	ldr	r5, .L254
+	add	r4, r5, r0, lsl #4
+	ldr	r3, [r4, #1668]
+	ldrb	r6, [r4, #1660]	@ zero_extendqisi2
+	cbz	r3, .L249
+	add	r5, r5, r8, lsl #2
+	mov	r0, r6
+	bl	NandcFlashCs
+	ldr	r1, [r4, #1664]
+	ldr	r2, [r5, #1628]
+	mov	r0, r6
+	adds	r2, r2, #0
+	it	ne
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r5, r0
+	mov	r0, r6
+	bl	NandcFlashDeCs
+	ldr	r2, [r4, #1668]
+	sbfx	r3, r5, #0, #1
+	str	r3, [r2]
+	movs	r2, #0
+	ldr	r1, [r4, #1672]
+	str	r2, [r4, #1668]
+	cbz	r1, .L249
+	str	r3, [r1]
+	str	r2, [r4, #1672]
+.L249:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L255:
+	.align	2
+.L254:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashWaitCmdDone, .-FlashWaitCmdDone
+	.align	1
+	.global	NandcWaitFlashReady
+	.thumb
+	.thumb_func
+	.type	NandcWaitFlashReady, %function
+NandcWaitFlashReady:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L261
+	push	{r0, r1, r2, r4, r5, lr}
+	.save {r4, r5, lr}
+	.pad #12
+	add	r0, r3, r0, lsl #3
+	ldr	r4, .L261+4
+	ldr	r5, [r0, #12]
+.L258:
+	movs	r0, #100
+	bl	NandcDelayns
+	ldr	r3, [r5]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	lsls	r3, r3, #22
+	bmi	.L259
+	subs	r4, r4, #1
+	bne	.L258
+	mov	r0, #-1
+	b	.L257
+.L259:
+	movs	r0, #0
+.L257:
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, pc}
+.L262:
+	.align	2
+.L261:
+	.word	.LANCHOR0
+	.word	100000
+	.fnend
+	.size	NandcWaitFlashReady, .-NandcWaitFlashReady
+	.align	1
+	.global	FlashReset
+	.thumb
+	.thumb_func
+	.type	FlashReset, %function
+FlashReset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L264
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	add	r3, r3, r0, lsl #3
+	mov	r4, r0
+	ldrb	r6, [r3, #16]	@ zero_extendqisi2
+	ldr	r5, [r3, #12]
+	bl	NandcFlashCs
+	movs	r3, #255
+	mov	r0, r4
+	add	r5, r5, r6, lsl #8
+	str	r3, [r5, #2056]
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	pop	{r4, r5, r6, lr}
+	b	NandcFlashDeCs
+.L265:
+	.align	2
+.L264:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReset, .-FlashReset
+	.align	1
+	.global	FlashEraseBlock
+	.thumb
+	.thumb_func
+	.type	FlashEraseBlock, %function
+FlashEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	mov	r5, r1
+	mov	r6, r2
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r2, r6
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashEraseCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashReadStatus
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	and	r0, r5, #1
+	pop	{r4, r5, r6, pc}
+	.fnend
+	.size	FlashEraseBlock, .-FlashEraseBlock
+	.align	1
+	.global	FlashSetInterfaceMode
+	.thumb
+	.thumb_func
+	.type	FlashSetInterfaceMode, %function
+FlashSetInterfaceMode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r5, .L295
+	movs	r4, #0
+	movs	r7, #239
+	mov	lr, #128
+	mov	ip, #1
+	mov	r8, #35
+	ldrb	r3, [r5, #2760]	@ zero_extendqisi2
+	mov	r9, #32
+	mov	r10, #5
+	and	r2, r3, #1
+	str	r2, [sp, #12]
+	and	r2, r3, #4
+	uxtb	r3, r2
+	mov	r2, r4
+	str	r3, [sp, #8]
+	add	r3, r5, #12
+	str	r3, [sp, #4]
+.L277:
+	ldr	r1, .L295+4
+	ldr	r3, [sp, #4]
+	ldrb	r1, [r4, r1]	@ zero_extendqisi2
+	ldr	r6, [r4, r3]
+	add	r3, r3, r4
+	cmp	r1, #152
+	ldr	r3, [r3, #4]
+	beq	.L268
+	cmp	r1, #69
+	beq	.L268
+	cmp	r1, #173
+	beq	.L268
+	cmp	r1, #44
+	bne	.L269
+.L268:
+	cmp	r0, #1
+	uxtb	r3, r3
+	bne	.L270
+	ldr	r5, [sp, #12]
+	cbz	r5, .L269
+	lsls	r3, r3, #8
+	cmp	r1, #173
+	add	fp, r6, r3
+	str	r7, [fp, #2056]
+	bne	.L271
+	str	r0, [fp, #2052]
+	b	.L294
+.L271:
+	cmp	r1, #44
+	itete	eq
+	streq	r0, [fp, #2052]
+	strne	lr, [fp, #2052]
+	streq	r10, [fp, #2048]
+	strne	r0, [fp, #2048]
+	b	.L275
+.L270:
+	ldr	r5, [sp, #8]
+	cbz	r5, .L269
+	lsls	r3, r3, #8
+	cmp	r1, #173
+	add	fp, r6, r3
+	str	r7, [fp, #2056]
+	bne	.L274
+	str	ip, [fp, #2052]
+	str	r9, [fp, #2048]
+	b	.L275
+.L274:
+	cmp	r1, #44
+	bne	.L276
+	str	ip, [fp, #2052]
+	str	r8, [fp, #2048]
+	b	.L275
+.L276:
+	str	lr, [fp, #2052]
+.L294:
+	str	r2, [fp, #2048]
+.L275:
+	add	r3, r3, r6
+	str	r2, [r3, #2048]
+	str	r2, [r3, #2048]
+	str	r2, [r3, #2048]
+.L269:
+	adds	r4, r4, #8
+	cmp	r4, #32
+	bne	.L277
+	movs	r0, #0
+	bl	NandcWaitFlashReady
+	movs	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L296:
+	.align	2
+.L295:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+1792
+	.fnend
+	.size	FlashSetInterfaceMode, .-FlashSetInterfaceMode
+	.align	1
+	.global	FlashReadSpare
+	.thumb
+	.thumb_func
+	.type	FlashReadSpare, %function
+FlashReadSpare:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r2
+	ldr	r5, .L298
+	ldr	r3, .L298+4
+	add	r5, r5, r0, lsl #3
+	ldrb	r3, [r3, #265]	@ zero_extendqisi2
+	ldrb	r2, [r5, #16]	@ zero_extendqisi2
+	ldr	r4, [r5, #12]
+	lsls	r3, r3, #9
+	add	r4, r4, r2, lsl #8
+	movs	r2, #0
+	str	r2, [r4, #2056]
+	str	r3, [r4, #2052]
+	lsrs	r3, r3, #8
+	str	r3, [r4, #2052]
+	uxtb	r3, r1
+	str	r3, [r4, #2052]
+	lsrs	r3, r1, #8
+	lsrs	r1, r1, #16
+	str	r3, [r4, #2052]
+	movs	r3, #48
+	str	r1, [r4, #2052]
+	str	r3, [r4, #2056]
+	bl	NandcWaitFlashReady
+	ldr	r3, [r4, #2048]
+	strb	r3, [r6]
+	pop	{r4, r5, r6, pc}
+.L299:
+	.align	2
+.L298:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.fnend
+	.size	FlashReadSpare, .-FlashReadSpare
+	.align	1
+	.global	SandiskProgTestBadBlock
+	.thumb
+	.thumb_func
+	.type	SandiskProgTestBadBlock, %function
+SandiskProgTestBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L301
+	push	{r4, lr}
+	.save {r4, lr}
+	add	r2, r2, r0, lsl #3
+	ldrb	r4, [r2, #16]	@ zero_extendqisi2
+	ldr	r3, [r2, #12]
+	add	r4, r3, r4, lsl #8
+	movs	r3, #162
+	str	r3, [r4, #2056]
+	movs	r3, #128
+	str	r3, [r4, #2056]
+	movs	r3, #0
+	str	r3, [r4, #2052]
+	str	r3, [r4, #2052]
+	uxtb	r3, r1
+	str	r3, [r4, #2052]
+	lsrs	r3, r1, #8
+	lsrs	r1, r1, #16
+	str	r3, [r4, #2052]
+	str	r1, [r4, #2052]
+	movs	r3, #16
+	str	r3, [r4, #2056]
+	bl	NandcWaitFlashReady
+	movs	r3, #112
+	movs	r0, #80
+	str	r3, [r4, #2056]
+	bl	NandcDelayns
+	ldr	r0, [r4, #2048]
+	and	r0, r0, #1
+	pop	{r4, pc}
+.L302:
+	.align	2
+.L301:
+	.word	.LANCHOR0
+	.fnend
+	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
+	.align	1
+	.global	SandiskSetRRPara
+	.thumb
+	.thumb_func
+	.type	SandiskSetRRPara, %function
+SandiskSetRRPara:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r3, #239
+	mov	r5, r0
+	str	r3, [r0, #8]
+	movs	r3, #17
+	str	r3, [r0, #4]
+	movs	r0, #200
+	mov	r4, r1
+	bl	NandcDelayns
+	ldr	r0, .L310
+	ldr	r1, .L310+4
+	add	r4, r4, r4, lsl #2
+	movs	r2, #0
+	sub	r6, r0, #48
+.L304:
+	ldrb	r3, [r1, #1901]	@ zero_extendqisi2
+	cmp	r2, r3
+	bcs	.L309
+	ldrb	r3, [r1, #1900]	@ zero_extendqisi2
+	cmp	r3, #67
+	add	r3, r2, r4
+	ite	eq
+	addeq	r3, r3, r6
+	addne	r3, r3, r0
+	adds	r2, r2, #1
+	ldrsb	r3, [r3, #5]
+	str	r3, [r5]
+	b	.L304
+.L309:
+	movs	r0, #0
+	pop	{r4, r5, r6, lr}
+	b	NandcWaitFlashReady
+.L311:
+	.align	2
+.L310:
+	.word	.LANCHOR1+336
+	.word	.LANCHOR0
+	.fnend
+	.size	SandiskSetRRPara, .-SandiskSetRRPara
+	.align	1
+	.global	FlashEraseSLc2KBlocks
+	.thumb
+	.thumb_func
+	.type	FlashEraseSLc2KBlocks, %function
+FlashEraseSLc2KBlocks:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	movs	r5, #0
+	ldr	r8, .L323+4
+	.pad #20
+	sub	sp, sp, #20
+	mov	r6, r0
+	mov	r9, r1
+	mov	r7, r5
+.L313:
+	cmp	r7, r9
+	beq	.L322
+	rsb	r3, r7, r9
+	add	r2, sp, #8
+	adds	r0, r6, r5
+	movs	r1, #0
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #12
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r8, #1616]	@ zero_extendqisi2
+	ldr	r3, [sp, #12]
+	cmp	r3, r2
+	bcc	.L314
+	mov	r3, #-1
+	str	r3, [r6, r5]
+	b	.L315
+.L314:
+	add	r2, r8, r3
+	add	r3, r8, r3, lsl #4
+	ldrb	r4, [r2, #1620]	@ zero_extendqisi2
+	strb	r4, [r3, #1660]
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	movs	r2, #0
+	mov	r0, r4
+	ldr	r1, [sp, #8]
+	bl	FlashEraseCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	ldr	r1, [sp, #8]
+	bl	FlashReadStatus
+	movs	r2, #0
+	ldr	r3, [sp, #8]
+	sbfx	r0, r0, #0, #1
+	str	r0, [r6, r5]
+	mov	r0, r4
+	ldr	r1, [r8, #4]
+	add	r1, r1, r3
+	bl	FlashEraseCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	ldr	r1, [sp, #8]
+	bl	FlashReadStatus
+	lsls	r3, r0, #31
+	itt	mi
+	movmi	r3, #-1
+	strmi	r3, [r6, r5]
+	ldr	r3, [r6, r5]
+	adds	r3, r3, #1
+	bne	.L317
+	ldr	r0, .L323
+	ldr	r1, [sp, #8]
+	bl	printk
+.L317:
+	mov	r0, r4
+	bl	NandcFlashDeCs
+.L315:
+	adds	r7, r7, #1
+	adds	r5, r5, #36
+	b	.L313
+.L322:
+	movs	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L324:
+	.align	2
+.L323:
+	.word	.LC1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashEraseSLc2KBlocks, .-FlashEraseSLc2KBlocks
+	.align	1
+	.global	FlashReadDpCmd
+	.thumb
+	.thumb_func
+	.type	FlashReadDpCmd, %function
+FlashReadDpCmd:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L329
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r5, r2
+	add	r2, r3, r0, lsl #3
+	ldrb	r6, [r3, #52]	@ zero_extendqisi2
+	mov	r7, r1
+	uxtb	lr, r1
+	ldrb	r4, [r2, #16]	@ zero_extendqisi2
+	uxtb	r10, r5
+	ldr	ip, [r2, #12]
+	lsr	r9, r5, #8
+	ldrb	r2, [r3, #60]	@ zero_extendqisi2
+	mov	r8, r0
+	lsls	r4, r4, #8
+	ldrb	r3, [r3, #53]	@ zero_extendqisi2
+	cmp	r2, #1
+	add	r4, r4, ip
+	lsr	r2, r1, #8
+	lsr	r5, r5, #16
+	lsr	r1, r1, #16
+	str	r6, [r4, #2056]
+	bne	.L326
+	movs	r6, #0
+	str	r6, [r4, #2052]
+	str	r6, [r4, #2052]
+	str	lr, [r4, #2052]
+	str	r2, [r4, #2052]
+	str	r1, [r4, #2052]
+	str	r3, [r4, #2056]
+	bl	NandcWaitFlashReady
+	str	r6, [r4, #2056]
+	str	r6, [r4, #2052]
+	str	r6, [r4, #2052]
+	b	.L328
+.L326:
+	str	lr, [r4, #2052]
+	str	r2, [r4, #2052]
+	str	r1, [r4, #2052]
+	str	r3, [r4, #2056]
+.L328:
+	str	r10, [r4, #2052]
+	movs	r3, #48
+	str	r9, [r4, #2052]
+	mov	r0, r8
+	str	r5, [r4, #2052]
+	mov	r1, r7
+	str	r3, [r4, #2056]
+	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
+	b	FlashSetRandomizer
+.L330:
+	.align	2
+.L329:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadDpCmd, .-FlashReadDpCmd
+	.align	1
+	.global	FlashDeInit
+	.thumb
+	.thumb_func
+	.type	FlashDeInit, %function
+FlashDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	movs	r0, #0
+	ldr	r4, .L339
+	bl	NandcWaitFlashReady
+	bl	FlashSetReadRetryDefault
+	ldrb	r3, [r4, #2761]	@ zero_extendqisi2
+	cbz	r3, .L332
+	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+	lsls	r3, r3, #31
+	bpl	.L332
+	movs	r0, #1
+	bl	FlashSetInterfaceMode
+	movs	r0, #1
+	bl	NandcSetMode
+	movs	r3, #0
+	strb	r3, [r4, #2761]
+.L332:
+	ldr	r3, [r4, #12]
+	movs	r0, #0
+	str	r0, [r3, #336]
+	pop	{r4, pc}
+.L340:
+	.align	2
+.L339:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashDeInit, .-FlashDeInit
+	.align	1
+	.global	NandcRandmzSel
+	.thumb
+	.thumb_func
+	.type	NandcRandmzSel, %function
+NandcRandmzSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L342
+	add	r0, r3, r0, lsl #3
+	ldr	r3, [r0, #12]
+	str	r1, [r3, #336]
+	bx	lr
+.L343:
+	.align	2
+.L342:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcRandmzSel, .-NandcRandmzSel
+	.global	__aeabi_idiv
+	.align	1
+	.global	NandcTimeCfg
+	.thumb
+	.thumb_func
+	.type	NandcTimeCfg, %function
+NandcTimeCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	movs	r0, #0
+	bl	rknand_get_clk_rate
+	ldr	r1, .L354
+	bl	__aeabi_idiv
+	ldr	r3, .L354+4
+	ldr	r3, [r3, #1828]
+	cmp	r0, #250
+	ble	.L345
+	movw	r2, #8354
+	b	.L352
+.L345:
+	cmp	r0, #220
+	bgt	.L353
+	cmp	r0, #185
+	ble	.L348
+	movw	r2, #4226
+	b	.L352
+.L348:
+	cmp	r0, #160
+	ble	.L349
+	movw	r2, #4194
+	b	.L352
+.L349:
+	cmp	r4, #35
+	bhi	.L350
+	movw	r2, #4193
+	b	.L352
+.L350:
+	cmp	r4, #99
+	bls	.L351
+.L353:
+	movw	r2, #8322
+	b	.L352
+.L351:
+	movw	r2, #4225
+.L352:
+	str	r2, [r3, #4]
+	pop	{r4, pc}
+.L355:
+	.align	2
+.L354:
+	.word	1000000
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcTimeCfg, .-NandcTimeCfg
+	.align	1
+	.global	FlashTimingCfg
+	.thumb
+	.thumb_func
+	.type	FlashTimingCfg, %function
+FlashTimingCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	sub	r3, r0, #4192
+	subs	r3, r3, #1
+	cmp	r3, #1
+	bls	.L357
+	sub	r3, r0, #4224
+	subs	r3, r3, #1
+	cmp	r3, #1
+	bls	.L357
+	movw	r3, #8322
+	cmp	r0, r3
+	bne	.L358
+.L357:
+	ldr	r3, .L359
+	ldr	r3, [r3, #1828]
+	str	r0, [r3, #4]
+.L358:
+	ldr	r3, .L359+4
+	ldrb	r0, [r3, #277]	@ zero_extendqisi2
+	b	NandcTimeCfg
+.L360:
+	.align	2
+.L359:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.fnend
+	.size	FlashTimingCfg, .-FlashTimingCfg
+	.align	1
+	.global	NandcInit
+	.thumb
+	.thumb_func
+	.type	NandcInit, %function
+NandcInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r5, #0
+	ldr	r4, .L362
+	movs	r3, #1
+	str	r0, [r4, #1828]
+	str	r0, [r4, #12]
+	str	r3, [r4, #24]
+	movs	r3, #2
+	str	r0, [r4, #20]
+	str	r3, [r4, #32]
+	movs	r3, #3
+	str	r0, [r4, #28]
+	str	r0, [r4, #36]
+	str	r5, [r4, #16]
+	str	r3, [r4, #40]
+	ldr	r3, [r0]
+	and	r3, r3, #253952
+	ubfx	r2, r3, #13, #1
+	str	r2, [r4, #2764]
+	ldr	r2, [r0, #352]
+	and	r3, r3, #245760
+	orr	r3, r3, #256
+	ubfx	r2, r2, #16, #4
+	str	r2, [r4, #2768]
+	ldr	r2, [r0, #352]
+	str	r2, [r4, #2772]
+	str	r3, [r0]
+	movs	r0, #40
+	ldr	r3, [r4, #1828]
+	str	r5, [r3, #336]
+	bl	NandcTimeCfg
+	ldr	r3, [r4, #1828]
+	movw	r2, #8322
+	mov	r0, #36864
+	str	r2, [r3, #344]
+	ldr	r2, .L362+4
+	str	r2, [r3, #304]
+	bl	ftl_malloc
+	str	r5, [r4, #2804]
+	str	r5, [r4, #2812]
+	str	r0, [r4, #2776]
+	str	r0, [r4, #2780]
+	add	r0, r0, #32768
+	str	r0, [r4, #2784]
+	pop	{r3, r4, r5, pc}
+.L363:
+	.align	2
+.L362:
+	.word	.LANCHOR0
+	.word	1579009
+	.fnend
+	.size	NandcInit, .-NandcInit
+	.align	1
+	.global	NandcGetTimeCfg
+	.thumb
+	.thumb_func
+	.type	NandcGetTimeCfg, %function
+NandcGetTimeCfg:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	ldr	r4, .L365
+	ldr	r5, [r4, #1828]
+	ldr	r5, [r5, #4]
+	str	r5, [r0]
+	ldr	r0, [r4, #1828]
+	ldr	r0, [r0]
+	str	r0, [r1]
+	ldr	r1, [r4, #1828]
+	ldr	r1, [r1, #304]
+	str	r1, [r2]
+	ldr	r1, [r4, #1828]
+	ldr	r2, [r1, #308]
+	ldr	r1, [r1, #344]
+	uxtb	r2, r2
+	orr	r2, r2, r1, lsl #16
+	str	r2, [r3]
+	pop	{r4, r5, pc}
+.L366:
+	.align	2
+.L365:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
+	.align	1
+	.global	NandcBchSel
+	.thumb
+	.thumb_func
+	.type	NandcBchSel, %function
+NandcBchSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L375
+	movs	r1, #1
+	ldr	r2, [r3, #1828]
+	str	r0, [r3, #2816]
+	movs	r3, #0
+	str	r1, [r2, #8]
+	movs	r1, #16
+	cmp	r0, r1
+	bfi	r3, r1, #8, #8
+	bfc	r3, #18, #1
+	bne	.L368
+.L371:
+	bfc	r3, #4, #1
+	b	.L369
+.L368:
+	cmp	r0, #24
+	bne	.L370
+	orr	r3, r3, #16
+	b	.L369
+.L370:
+	cmp	r0, #40
+	orr	r3, r3, #262144
+	orr	r3, r3, #16
+	beq	.L371
+.L369:
+	orr	r3, r3, #1
+	str	r3, [r2, #12]
+	bx	lr
+.L376:
+	.align	2
+.L375:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcBchSel, .-NandcBchSel
+	.align	1
+	.global	FlashBchSel
+	.thumb
+	.thumb_func
+	.type	FlashBchSel, %function
+FlashBchSel:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L378
+	strb	r0, [r3, #1892]
+	b	NandcBchSel
+.L379:
+	.align	2
+.L378:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashBchSel, .-FlashBchSel
+	.align	1
+	.global	FlashResume
+	.thumb
+	.thumb_func
+	.type	FlashResume, %function
+FlashResume:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L388
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r5, #0
+	ldr	r2, [r3, #1828]
+	add	r6, r3, #1792
+	ldr	r1, [r3, #1832]
+	mov	r4, r3
+	str	r1, [r2]
+	ldr	r1, [r3, #1836]
+	ldr	r2, [r3, #1828]
+	str	r1, [r2, #4]
+	ldr	r1, [r3, #1840]
+	str	r1, [r2, #8]
+	ldr	r1, [r3, #1844]
+	str	r1, [r2, #12]
+	ldr	r1, [r3, #1848]
+	str	r1, [r2, #304]
+	ldr	r1, [r3, #1852]
+	str	r1, [r2, #308]
+	ldr	r1, [r3, #1856]
+	str	r1, [r2, #336]
+	ldr	r1, [r3, #1860]
+	str	r1, [r2, #344]
+.L382:
+	ldrb	r3, [r6, r5, lsl #3]	@ zero_extendqisi2
+	subs	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L381
+	uxtb	r0, r5
+	bl	FlashReset
+.L381:
+	adds	r5, r5, #1
+	cmp	r5, #4
+	bne	.L382
+	ldrb	r3, [r4, #2761]	@ zero_extendqisi2
+	ldr	r5, .L388
+	cbz	r3, .L383
+	movs	r0, #1
+	bl	NandcSetMode
+	ldrb	r0, [r5, #2760]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r5, #2760]	@ zero_extendqisi2
+	bl	NandcSetMode
+	ldrb	r0, [r5, #1849]	@ zero_extendqisi2
+	bl	NandcSetDdrPara
+.L383:
+	ldr	r3, [r4, #1788]
+	ldrb	r0, [r3, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	movs	r0, #0
+	pop	{r4, r5, r6, pc}
+.L389:
+	.align	2
+.L388:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashResume, .-FlashResume
+	.align	1
+	.global	NandCIrqEnable
+	.thumb
+	.thumb_func
+	.type	NandCIrqEnable, %function
+NandCIrqEnable:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r3, #1
+	ldr	r2, [r0, #368]
+	lsls	r3, r3, r1
+	orrs	r2, r2, r3
+	str	r2, [r0, #368]
+	ldr	r2, [r0, #364]
+	orrs	r3, r3, r2
+	str	r3, [r0, #364]
+	bx	lr
+	.fnend
+	.size	NandCIrqEnable, .-NandCIrqEnable
+	.align	1
+	.global	NandCIrqDisable
+	.thumb
+	.thumb_func
+	.type	NandCIrqDisable, %function
+NandCIrqDisable:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r3, #1
+	ldr	r2, [r0, #368]
+	lsls	r3, r3, r1
+	orrs	r2, r2, r3
+	str	r2, [r0, #368]
+	ldr	r2, [r0, #364]
+	bic	r3, r2, r3
+	str	r3, [r0, #364]
+	bx	lr
+	.fnend
+	.size	NandCIrqDisable, .-NandCIrqDisable
+	.align	1
+	.global	rk_nandc_get_irq_status
+	.thumb
+	.thumb_func
+	.type	rk_nandc_get_irq_status, %function
+rk_nandc_get_irq_status:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, [r0, #372]
+	bx	lr
+	.fnend
+	.size	rk_nandc_get_irq_status, .-rk_nandc_get_irq_status
+	.align	1
+	.global	rk_nandc_flash_ready
+	.thumb
+	.thumb_func
+	.type	rk_nandc_flash_ready, %function
+rk_nandc_flash_ready:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r1, #1
+	b	NandCIrqDisable
+	.fnend
+	.size	rk_nandc_flash_ready, .-rk_nandc_flash_ready
+	.align	1
+	.global	NandcIqrWaitFlashReady
+	.thumb
+	.thumb_func
+	.type	NandcIqrWaitFlashReady, %function
+NandcIqrWaitFlashReady:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	bl	rk_nandc_rb_irq_flag_init
+	mov	r0, r4
+	movs	r1, #1
+	bl	NandCIrqEnable
+	ldr	r3, [r4]
+	mov	r0, r4
+	lsls	r3, r3, #22
+	bmi	.L395
+	pop	{r4, lr}
+	b	wait_for_nand_flash_ready
+.L395:
+	movs	r1, #1
+	pop	{r4, lr}
+	b	NandCIrqDisable
+	.fnend
+	.size	NandcIqrWaitFlashReady, .-NandcIqrWaitFlashReady
+	.align	1
+	.global	FlashEraseBlocks
+	.thumb
+	.thumb_func
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r0
+	ldr	r4, .L425
+	.pad #28
+	sub	sp, sp, #28
+	mov	r10, r1
+	mov	r8, r2
+	ldrb	r5, [r4]	@ zero_extendqisi2
+	cbz	r5, .L410
+	mov	r1, r2
+	bl	FlashEraseSLc2KBlocks
+	b	.L398
+.L410:
+	mov	fp, r4
+.L397:
+	cmp	r5, r8
+	bcs	.L423
+	movs	r3, #36
+	movs	r1, #0
+	add	r2, sp, #16
+	mul	r6, r3, r5
+	add	r3, r9, r6
+	str	r3, [sp, #12]
+	rsb	r3, r5, r8
+	ldr	r0, [sp, #12]
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #20
+	bl	LogAddr2PhyAddr
+	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
+	mov	r7, r0
+	ldr	r0, [sp, #20]
+	cmp	r0, r3
+	bcc	.L399
+	mov	r3, #-1
+	str	r3, [r9, r6]
+	b	.L400
+.L399:
+	ldrb	r3, [fp, #2820]	@ zero_extendqisi2
+	cmp	r3, #0
+	add	r3, r4, r0, lsl #4
+	it	eq
+	moveq	r7, #0
+	ldr	r3, [r3, #1668]
+	cbz	r3, .L402
+	uxtb	r0, r0
+	bl	FlashWaitCmdDone
+.L402:
+	ldr	r1, [sp, #20]
+	ldr	r3, [sp, #12]
+	lsls	r2, r1, #4
+	add	lr, r4, r2
+	str	r3, [lr, #1668]
+	movs	r3, #0
+	str	r3, [lr, #1672]
+	ldr	r3, [sp, #16]
+	str	r3, [lr, #1664]
+	cbz	r7, .L403
+	add	r3, r6, #36
+	add	r3, r3, r9
+	str	r3, [lr, #1672]
+.L403:
+	add	r1, r1, r4
+	add	r2, r2, r4
+	ldrb	r6, [r1, #1620]	@ zero_extendqisi2
+	mov	r0, r6
+	strb	r6, [r2, #1660]
+	bl	NandcFlashCs
+	cmp	r10, #1
+	mov	r0, r6
+	bne	.L404
+	ldrb	r3, [fp, #76]	@ zero_extendqisi2
+	cbz	r3, .L404
+	bl	flash_enter_slc_mode
+	b	.L405
+.L404:
+	bl	flash_exit_slc_mode
+.L405:
+	ldr	r3, [sp, #20]
+	mov	r0, r6
+	ldr	r1, [sp, #16]
+	add	r5, r5, r7
+	add	r3, r4, r3, lsl #2
+	ldr	r2, [r3, #1628]
+	adds	r2, r2, #0
+	it	ne
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r0, r6
+	mov	r2, r7
+	ldr	r1, [sp, #16]
+	bl	FlashEraseCmd
+	mov	r0, r6
+	bl	NandcFlashDeCs
+.L400:
+	adds	r5, r5, #1
+	b	.L397
+.L423:
+	ldr	r0, [r4, #1828]
+	movs	r5, #0
+	bl	NandcIqrWaitFlashReady
+	ldr	r6, .L425
+	addw	r7, r6, #1660
+.L407:
+	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
+	cmp	r5, r3
+	bcs	.L424
+	uxtb	r0, r5
+	bl	FlashWaitCmdDone
+	cmp	r10, #1
+	bne	.L408
+	ldrb	r3, [r6, #76]	@ zero_extendqisi2
+	cbz	r3, .L408
+	lsls	r3, r5, #4
+	ldrb	r0, [r7, r3]	@ zero_extendqisi2
+	bl	flash_exit_slc_mode
+.L408:
+	adds	r5, r5, #1
+	b	.L407
+.L424:
+	movs	r0, #0
+.L398:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L426:
+	.align	2
+.L425:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
+	.align	1
+	.global	rk_nandc_flash_xfer_completed
+	.thumb
+	.thumb_func
+	.type	rk_nandc_flash_xfer_completed, %function
+rk_nandc_flash_xfer_completed:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r1, #0
+	b	NandCIrqDisable
+	.fnend
+	.size	rk_nandc_flash_xfer_completed, .-rk_nandc_flash_xfer_completed
+	.align	1
+	.global	NandcSendDumpDataStart
+	.thumb
+	.thumb_func
+	.type	NandcSendDumpDataStart, %function
+NandcSendDumpDataStart:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, [r0, #16]
+	.pad #8
+	sub	sp, sp, #8
+	ldr	r3, .L429
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	bic	r2, r2, #4
+	str	r2, [sp, #4]
+	ldr	r2, [sp, #4]
+	str	r2, [r0, #16]
+	str	r3, [r0, #8]
+	orr	r3, r3, #4
+	str	r3, [r0, #8]
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+.L430:
+	.align	2
+.L429:
+	.word	538969130
+	.fnend
+	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
+	.align	1
+	.global	NandcSendDumpDataDone
+	.thumb
+	.thumb_func
+	.type	NandcSendDumpDataDone, %function
+NandcSendDumpDataDone:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	.pad #8
+	sub	sp, sp, #8
+.L432:
+	ldr	r3, [r0, #8]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	lsls	r3, r3, #11
+	bpl	.L432
+	add	sp, sp, #8
+	@ sp needed
+	bx	lr
+	.fnend
+	.size	NandcSendDumpDataDone, .-NandcSendDumpDataDone
+	.align	1
+	.global	NandcXferStart
+	.thumb
+	.thumb_func
+	.type	NandcXferStart, %function
+NandcXferStart:
+	.fnstart
+	@ args = 8, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	mov	r8, r2
+	mov	r7, r1
+	ldr	r2, [sp, #60]
+	ldr	fp, [sp, #56]
+	cbnz	r2, .L449
+	adds	r2, fp, #0
+	it	ne
+	movne	r2, #1
+	b	.L436
+.L449:
+	movs	r2, #1
+.L436:
+	ldr	r5, .L454
+	movs	r4, #0
+	add	r0, r5, r0, lsl #3
+	ldr	r6, [r0, #12]
+	ldrb	r1, [r0, #16]	@ zero_extendqisi2
+	movs	r0, #16
+	ldr	r9, [r6, #12]
+	bfi	r9, r0, #8, #8
+	bfi	r9, r4, #3, #1
+	bfi	r4, r7, #1, #1
+	bfi	r9, r1, #5, #3
+	orr	r4, r4, #8
+	movs	r1, #1
+	bfi	r4, r1, #5, #2
+	lsrs	r3, r3, r1
+	orr	r4, r4, #536870912
+	orr	r4, r4, #1024
+	bfi	r4, r3, #4, #1
+	ldr	r3, [r5, #2768]
+	cmp	r3, #3
+	bls	.L437
+	ldr	r3, [r6, #16]
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bic	r3, r3, #4
+	str	r3, [sp, #12]
+	cmp	r2, #0
+	beq	.L438
+	cbnz	r7, .L439
+.L447:
+	add	r8, r8, #1
+	mov	r0, r6
+	bl	rk_nandc_xfer_irq_flag_init
+	mov	r0, r6
+	movs	r1, #0
+	asr	r8, r8, #1
+	bl	NandCIrqEnable
+	bfi	r4, r8, #22, #6
+	cmp	fp, #0
+	beq	.L440
+	mov	r0, fp
+	b	.L441
+.L439:
+	ldr	r3, [r5, #2816]
+	mov	ip, r5
+	ldr	r0, [sp, #60]
+	cmp	r3, #25
+	ite	cc
+	movcc	r3, #64
+	movcs	r3, #128
+	str	r3, [sp]
+	lsr	r3, r8, #1
+	str	r3, [sp, #4]
+	movs	r3, #0
+	mov	r1, r3
+.L443:
+	ldr	r2, [sp, #4]
+	cmp	r1, r2
+	bcs	.L447
+	ldr	r2, [sp, #60]
+	lsr	r10, r3, #2
+	cbz	r2, .L444
+	ldrh	r2, [r0, #2]
+	ldrh	lr, [r0], #4
+	orr	lr, lr, r2, lsl #16
+	ldr	r2, [ip, #2784]
+	str	lr, [r2, r10, lsl #2]
+	b	.L445
+.L444:
+	ldr	r2, [ip, #2784]
+	mov	lr, r2
+	mov	r2, #-1
+	str	r2, [lr, r10, lsl #2]
+.L445:
+	ldr	r2, [sp]
+	adds	r1, r1, #1
+	add	r3, r3, r2
+	b	.L443
+.L440:
+	ldr	r0, [r5, #2780]
+.L441:
+	ldr	r3, [r5, #2784]
+	ubfx	r8, r4, #22, #5
+	mov	r2, r7
+	str	r0, [r5, #2788]
+	lsl	r1, r8, #10
+	str	r3, [r5, #2792]
+	bl	rknand_dma_map_single
+	mov	r2, r7
+	lsl	r1, r8, #7
+	clz	r7, r7
+	lsrs	r7, r7, #5
+	str	r0, [r5, #2796]
+	ldr	r0, [r5, #2792]
+	bl	rknand_dma_map_single
+	movs	r3, #1
+	str	r3, [r5, #2804]
+	tst	fp, #3
+	ldr	r3, [r5, #2796]
+	str	r0, [r5, #2800]
+	str	r3, [r6, #20]
+	ldr	r3, [r5, #2800]
+	str	r3, [r6, #24]
+	mov	r3, #0
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bic	r3, r3, #15872
+	orr	r3, r3, #8192
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	orr	r3, r3, #448
+	str	r3, [sp, #12]
+	itttt	eq
+	ldreq	r3, [sp, #12]
+	biceq	r3, r3, #56
+	orreq	r3, r3, #16
+	streq	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	orr	r3, r3, #4
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #12]
+	bic	r3, r3, #2
+	orr	r7, r3, r7, lsl #1
+	str	r7, [sp, #12]
+	ldr	r3, [sp, #12]
+	orr	r3, r3, #1
+	str	r3, [sp, #12]
+.L438:
+	ldr	r3, [sp, #12]
+	str	r3, [r6, #16]
+.L437:
+	str	r9, [r6, #12]
+	str	r4, [r6, #8]
+	orr	r4, r4, #4
+	str	r4, [r6, #8]
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L455:
+	.align	2
+.L454:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcXferStart, .-NandcXferStart
+	.align	1
+	.global	Ftl_log2
+	.thumb
+	.thumb_func
+	.type	Ftl_log2, %function
+Ftl_log2:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r1, #0
+	movs	r2, #1
+.L457:
+	cmp	r2, r0
+	uxth	r3, r1
+	add	r1, r1, #1
+	bhi	.L459
+	lsls	r2, r2, #1
+	b	.L457
+.L459:
+	subs	r0, r3, #1
+	uxth	r0, r0
+	bx	lr
+	.fnend
+	.size	Ftl_log2, .-Ftl_log2
+	.align	1
+	.global	FtlPrintInfo
+	.thumb
+	.thumb_func
+	.type	FtlPrintInfo, %function
+FtlPrintInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FtlPrintInfo, .-FtlPrintInfo
+	.align	1
+	.global	FtlSysBlkNumInit
+	.thumb
+	.thumb_func
+	.type	FtlSysBlkNumInit, %function
+FtlSysBlkNumInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L463
+	cmp	r0, #23
+	it	ls
+	movls	r0, #24
+	ldrh	r2, [r3, #2828]
+	ldrh	r1, [r3, #2838]
+	str	r0, [r3, #2824]
+	muls	r2, r0, r2
+	subs	r0, r1, r0
+	ldr	r1, [r3, #2844]
+	strh	r0, [r3, #2836]	@ movhi
+	movs	r0, #0
+	str	r2, [r3, #2832]
+	subs	r2, r1, r2
+	str	r2, [r3, #2840]
+	bx	lr
+.L464:
+	.align	2
+.L463:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
+	.align	1
+	.global	FtlConstantsInit
+	.thumb
+	.thumb_func
+	.type	FtlConstantsInit, %function
+FtlConstantsInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	ldrh	r2, [r5, #14]
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L494
+	ldrh	lr, [r0, #8]
+	str	r2, [sp]
+	addw	r1, r4, #2856
+	ldrh	r2, [sp]
+	ldrh	r3, [r0, #10]
+	ldrh	r0, [r0, #12]
+	strh	r2, [r4, #2838]	@ movhi
+	movs	r2, #0
+	strh	lr, [r4, #2848]	@ movhi
+	strh	r3, [r4, #2850]	@ movhi
+	strh	r0, [r4, #2852]	@ movhi
+.L466:
+	strb	r2, [r2, r1]
+	adds	r2, r2, #1
+	cmp	r2, #32
+	bne	.L466
+	ldrh	r1, [r5, #14]
+	ldrh	r2, [r5, #20]
+	cmp	r2, r1, lsr #8
+	bcs	.L467
+	uxtb	r10, r0
+	ldr	r9, .L494+4
+	lsl	r2, r10, #1
+	uxtb	r2, r2
+	str	r2, [sp, #8]
+	subs	r2, r3, #1
+	muls	r2, r0, r2
+	str	r2, [sp, #4]
+	movs	r2, #0
+.L468:
+	cmp	r2, r0
+	bcs	.L470
+	ldr	r6, [sp, #4]
+	rsb	ip, r0, r2
+	uxtb	r1, r2
+	add	ip, ip, r9
+	adds	r6, r2, r6
+	add	r6, r9, r6
+	str	r6, [sp, #12]
+	movs	r6, #0
+	mov	r8, r6
+.L471:
+	cmp	r8, r3
+	add	r6, r6, r0
+	bcs	.L493
+	ldr	r7, [sp, #12]
+	add	fp, r1, r10
+	strb	r1, [ip, r6]
+	add	r8, r8, #1
+	strb	fp, [r7, r6]
+	ldr	r7, [sp, #8]
+	add	r1, r1, r7
+	uxtb	r1, r1
+	b	.L471
+.L493:
+	adds	r2, r2, #1
+	b	.L468
+.L470:
+	lsls	r3, r3, #1
+	strh	r3, [r4, #2850]	@ movhi
+	ldr	r3, [sp]
+	lsrs	r7, r3, #1
+	strh	r7, [r4, #2838]	@ movhi
+.L467:
+	cmp	lr, #1
+	mov	r3, #5
+	strh	r3, [r4, #2888]	@ movhi
+	mov	r3, #0
+	strh	r3, [r4, #2890]	@ movhi
+	it	eq
+	ldreq	r3, .L494
+	ldrb	r8, [r4]	@ zero_extendqisi2
+	it	eq
+	strheq	lr, [r3, #2888]	@ movhi
+	mov	r3, #4352
+	strh	r3, [r4, #2892]	@ movhi
+	cmp	r8, #0
+	beq	.L473
+	ldr	r3, .L494
+	mov	r2, #384
+	strh	r2, [r3, #2892]	@ movhi
+.L473:
+	ldrh	r6, [r4, #2838]
+	ldrh	r7, [r4, #2850]
+	smulbb	r7, r7, r0
+	smulbb	r0, r6, r0
+	uxth	r7, r7
+	strh	r7, [r4, #2828]	@ movhi
+	uxth	r0, r0
+	strh	r0, [r4, #2894]	@ movhi
+	bl	Ftl_log2
+	ldrh	r9, [r5, #16]
+	ldrh	fp, [r5, #20]
+	ldrh	r1, [r5, #18]
+	smulbb	r3, r7, r9
+	strh	r9, [r4, #2898]	@ movhi
+	strh	r1, [r4, #2900]	@ movhi
+	strh	fp, [r4, #2904]	@ movhi
+	strh	r3, [r4, #2902]	@ movhi
+	strh	r0, [r4, #2896]	@ movhi
+	mov	r0, fp
+	str	r1, [sp]
+	bl	Ftl_log2
+	lsl	r3, fp, #9
+	cmp	r6, #1024
+	uxth	r3, r3
+	strh	r3, [r4, #2908]	@ movhi
+	it	hi
+	ldrhi	r2, .L494
+	lsr	r3, r3, #8
+	strh	r3, [r4, #2910]	@ movhi
+	ldrh	r3, [r5, #26]
+	strh	r3, [r4, #2912]	@ movhi
+	mul	r3, r6, r7
+	str	r3, [r4, #2844]
+	itt	hi
+	uxtbhi	r3, r6
+	strhhi	r3, [r2, #2890]	@ movhi
+	mov	r10, r0
+	ldrh	r5, [r4, #2890]
+	ldr	r1, [sp]
+	subs	r5, r6, r5
+	strh	r0, [r4, #2906]	@ movhi
+	ldrh	r0, [r4, #2892]
+	muls	r5, r7, r5
+	ldr	r3, .L494
+	lsls	r0, r0, #3
+	mul	r1, r1, fp
+	str	r3, [sp]
+	mul	r5, fp, r5
+	mul	r5, r9, r5
+	asrs	r5, r5, #11
+	str	r5, [r4, #2916]
+	bl	__aeabi_idiv
+	ldr	r3, [sp]
+	uxth	r0, r0
+	cmp	r0, #4
+	itet	ls
+	movls	r2, #4
+	strhhi	r0, [r3, #2920]	@ movhi
+	strhls	r2, [r3, #2920]	@ movhi
+	cmp	r8, #0
+	beq	.L477
+	mov	r3, #640
+	strh	r3, [r4, #2892]	@ movhi
+.L477:
+	ldrh	r3, [r4, #2892]
+	lsls	r6, r6, #6
+	mov	r1, r7
+	ldr	r5, .L494
+	asr	r3, r3, r10
+	add	r10, r10, #9
+	asr	r6, r6, r10
+	adds	r3, r3, #2
+	strh	r3, [r4, #2922]	@ movhi
+	uxth	r0, r6
+	strh	r6, [r4, #2924]	@ movhi
+	add	r6, r0, #8
+	mul	r3, r7, r0
+	ldrh	r0, [r4, #2920]
+	str	r3, [r4, #2928]
+	bl	__aeabi_uidiv
+	cmp	r7, #1
+	ldr	r7, .L494
+	uxtah	r0, r6, r0
+	it	eq
+	addeq	r0, r0, #4
+	str	r0, [r5, #2824]
+	ldrh	r0, [r4, #2824]
+	bl	FtlSysBlkNumInit
+	ldr	r3, [r4, #2824]
+	ldr	r5, [r4, #2840]
+	mov	r0, #2048
+	ldrh	r6, [r4, #2904]
+	str	r3, [r4, #2932]
+	ldrh	r3, [r4, #2898]
+	lsls	r5, r5, #2
+	mov	r1, r6
+	muls	r5, r3, r5
+	ldrh	r3, [r4, #2906]
+	adds	r3, r3, #9
+	lsrs	r5, r5, r3
+	adds	r5, r5, #2
+	uxth	r5, r5
+	strh	r5, [r4, #2936]	@ movhi
+	bl	__aeabi_idiv
+	ldrh	r2, [r4, #2920]
+	movs	r3, #0
+	str	r3, [r4, #2940]
+	adds	r3, r2, #3
+	strh	r3, [r4, #2920]	@ movhi
+	ldr	r3, [r4, #2928]
+	adds	r1, r3, #3
+	str	r1, [r4, #2928]
+	ldrb	r1, [r4, #76]	@ zero_extendqisi2
+	strh	r0, [r4, #2938]	@ movhi
+	cbz	r1, .L480
+	adds	r2, r2, #4
+	adds	r3, r3, #5
+	strh	r2, [r7, #2920]	@ movhi
+	str	r3, [r7, #2928]
+.L480:
+	ldrh	r2, [r4, #2836]
+	movs	r3, #0
+	strh	r3, [r4, #2944]	@ movhi
+	movs	r0, #0
+	lsrs	r3, r2, #3
+	add	r3, r3, r2, lsl #1
+	adds	r3, r3, #52
+	add	r5, r3, r5, lsl #2
+	cmp	r5, r6, lsl #9
+	ittt	cc
+	movcc	r2, #1
+	ldrcc	r3, .L494
+	strhcc	r2, [r3, #2944]	@ movhi
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L495:
+	.align	2
+.L494:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2856
+	.fnend
+	.size	FtlConstantsInit, .-FtlConstantsInit
+	.align	1
+	.global	IsBlkInVendorPart
+	.thumb
+	.thumb_func
+	.type	IsBlkInVendorPart, %function
+IsBlkInVendorPart:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L503
+	ldrh	r3, [r2, #2946]
+	cbz	r3, .L502
+	ldr	r3, [r2, #2948]
+	ldrh	r2, [r2, #2920]
+	add	r2, r3, r2, lsl #1
+.L498:
+	cmp	r3, r2
+	beq	.L502
+	ldrh	r1, [r3], #2
+	cmp	r1, r0
+	bne	.L498
+	movs	r0, #1
+	bx	lr
+.L502:
+	movs	r0, #0
+	bx	lr
+.L504:
+	.align	2
+.L503:
+	.word	.LANCHOR0
+	.fnend
+	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
+	.align	1
+	.global	FtlCacheMetchLpa
+	.thumb
+	.thumb_func
+	.type	FtlCacheMetchLpa, %function
+FtlCacheMetchLpa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L513
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r3, [r2, #2952]
+	cbz	r3, .L512
+	ldr	r5, [r2, #2956]
+	movs	r6, #36
+	movs	r2, #0
+.L508:
+	mla	r4, r6, r2, r5
+	ldr	r4, [r4, #16]
+	cmp	r4, r0
+	bcc	.L507
+	cmp	r4, r1
+	bls	.L510
+.L507:
+	adds	r2, r2, #1
+	cmp	r2, r3
+	bne	.L508
+.L512:
+	movs	r0, #0
+	pop	{r4, r5, r6, pc}
+.L510:
+	movs	r0, #1
+	pop	{r4, r5, r6, pc}
+.L514:
+	.align	2
+.L513:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
+	.align	1
+	.global	FtlGetCap
+	.thumb
+	.thumb_func
+	.type	FtlGetCap, %function
+FtlGetCap:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L516
+	ldr	r0, [r3, #2940]
+	bx	lr
+.L517:
+	.align	2
+.L516:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetCap, .-FtlGetCap
+	.align	1
+	.global	FtlGetCapacity
+	.thumb
+	.thumb_func
+	.type	FtlGetCapacity, %function
+FtlGetCapacity:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L519
+	ldr	r0, [r3, #2940]
+	bx	lr
+.L520:
+	.align	2
+.L519:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetCapacity, .-FtlGetCapacity
+	.align	1
+	.global	FtlGetLpn
+	.thumb
+	.thumb_func
+	.type	FtlGetLpn, %function
+FtlGetLpn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L522
+	ldr	r0, [r3, #2960]
+	bx	lr
+.L523:
+	.align	2
+.L522:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetLpn, .-FtlGetLpn
+	.align	1
+	.global	FtlGetCurEraseBlock
+	.thumb
+	.thumb_func
+	.type	FtlGetCurEraseBlock, %function
+FtlGetCurEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L525
+	ldrh	r2, [r3, #2828]
+	ldr	r0, [r3, #2964]
+	muls	r0, r2, r0
+	bx	lr
+.L526:
+	.align	2
+.L525:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetCurEraseBlock, .-FtlGetCurEraseBlock
+	.align	1
+	.global	FtlGetAllBlockNum
+	.thumb
+	.thumb_func
+	.type	FtlGetAllBlockNum, %function
+FtlGetAllBlockNum:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L528
+	ldrh	r2, [r3, #2838]
+	ldrh	r0, [r3, #2828]
+	muls	r0, r2, r0
+	bx	lr
+.L529:
+	.align	2
+.L528:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetAllBlockNum, .-FtlGetAllBlockNum
+	.align	1
+	.global	FtlBbmMapBadBlock
+	.thumb
+	.thumb_func
+	.type	FtlBbmMapBadBlock, %function
+FtlBbmMapBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r6, r0
+	ldr	r5, .L531
+	ldrh	r4, [r5, #2894]
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	uxth	r2, r0
+	smulbb	r3, r2, r4
+	add	r1, r5, r2, lsl #2
+	ldr	r4, [r1, #2996]
+	movs	r1, #1
+	subs	r3, r6, r3
+	uxth	r3, r3
+	and	r0, r3, #31
+	lsrs	r7, r3, #5
+	lsls	r1, r1, r0
+	ldr	r0, [r4, r7, lsl #2]
+	orrs	r1, r1, r0
+	ldr	r0, .L531+4
+	str	r1, [r4, r7, lsl #2]
+	str	r1, [sp]
+	mov	r1, r6
+	bl	printk
+	ldrh	r3, [r5, #2974]
+	movs	r0, #0
+	adds	r3, r3, #1
+	strh	r3, [r5, #2974]	@ movhi
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, pc}
+.L532:
+	.align	2
+.L531:
+	.word	.LANCHOR0
+	.word	.LC2
+	.fnend
+	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
+	.global	__aeabi_uidivmod
+	.align	1
+	.global	FtlBbmIsBadBlock
+	.thumb
+	.thumb_func
+	.type	FtlBbmIsBadBlock, %function
+FtlBbmIsBadBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r7, r0
+	ldr	r5, .L534
+	ldrh	r6, [r5, #2894]
+	mov	r1, r6
+	bl	__aeabi_uidivmod
+	mov	r0, r7
+	uxth	r4, r1
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	lsrs	r2, r4, #5
+	and	r4, r4, #31
+	uxth	r0, r0
+	add	r5, r5, r0, lsl #2
+	ldr	r3, [r5, #2996]
+	ldr	r0, [r3, r2, lsl #2]
+	lsrs	r0, r0, r4
+	and	r0, r0, #1
+	pop	{r3, r4, r5, r6, r7, pc}
+.L535:
+	.align	2
+.L534:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
+	.align	1
+	.global	FtlBbtInfoPrint
+	.thumb
+	.thumb_func
+	.type	FtlBbtInfoPrint, %function
+FtlBbtInfoPrint:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
+	.align	1
+	.global	FtlBbtMemInit
+	.thumb
+	.thumb_func
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r0, .L538
+	movw	r3, #65535
+	movs	r1, #255
+	movs	r2, #16
+	addw	r0, r0, #2980
+	strh	r3, [r0, #-12]	@ movhi
+	movs	r3, #0
+	strh	r3, [r0, #-6]	@ movhi
+	b	memset
+.L539:
+	.align	2
+.L538:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	1
+	.global	FtlBbtCalcTotleCnt
+	.thumb
+	.thumb_func
+	.type	FtlBbtCalcTotleCnt, %function
+FtlBbtCalcTotleCnt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r5, #0
+	ldr	r4, .L548
+	ldrh	r6, [r4, #2894]
+	ldrh	r3, [r4, #2850]
+	mov	r4, r5
+	muls	r6, r3, r6
+.L541:
+	uxth	r0, r5
+	cmp	r0, r6
+	bge	.L547
+	bl	FtlBbmIsBadBlock
+	cbz	r0, .L542
+	adds	r4, r4, #1
+	uxth	r4, r4
+.L542:
+	adds	r5, r5, #1
+	b	.L541
+.L547:
+	mov	r0, r4
+	pop	{r4, r5, r6, pc}
+.L549:
+	.align	2
+.L548:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
+	.align	1
+	.global	V2P_block
+	.thumb
+	.thumb_func
+	.type	V2P_block, %function
+V2P_block:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r4, r1
+	ldr	r6, .L551
+	mov	r7, r0
+	ldrh	r5, [r6, #2852]
+	mov	r1, r5
+	bl	__aeabi_uidivmod
+	mov	r0, r7
+	smlabb	r4, r4, r5, r1
+	mov	r1, r5
+	bl	__aeabi_uidiv
+	ldrh	r3, [r6, #2894]
+	smlabb	r0, r3, r0, r4
+	uxth	r0, r0
+	pop	{r3, r4, r5, r6, r7, pc}
+.L552:
+	.align	2
+.L551:
+	.word	.LANCHOR0
+	.fnend
+	.size	V2P_block, .-V2P_block
+	.align	1
+	.global	P2V_plane
+	.thumb
+	.thumb_func
+	.type	P2V_plane, %function
+P2V_plane:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L554
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldrh	r1, [r3, #2894]
+	ldrh	r5, [r3, #2852]
+	bl	__aeabi_uidiv
+	mov	r1, r5
+	smulbb	r4, r0, r5
+	mov	r0, r6
+	bl	__aeabi_uidivmod
+	add	r1, r1, r4
+	uxth	r0, r1
+	pop	{r4, r5, r6, pc}
+.L555:
+	.align	2
+.L554:
+	.word	.LANCHOR0
+	.fnend
+	.size	P2V_plane, .-P2V_plane
+	.align	1
+	.global	P2V_block_in_plane
+	.thumb
+	.thumb_func
+	.type	P2V_block_in_plane, %function
+P2V_block_in_plane:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	ldr	r4, .L557
+	ldrh	r1, [r4, #2894]
+	bl	__aeabi_uidivmod
+	uxth	r0, r1
+	ldrh	r1, [r4, #2852]
+	bl	__aeabi_uidiv
+	uxth	r0, r0
+	pop	{r4, pc}
+.L558:
+	.align	2
+.L557:
+	.word	.LANCHOR0
+	.fnend
+	.size	P2V_block_in_plane, .-P2V_block_in_plane
+	.align	1
+	.global	ftl_cmp_data_ver
+	.thumb
+	.thumb_func
+	.type	ftl_cmp_data_ver, %function
+ftl_cmp_data_ver:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	cmp	r0, r1
+	bls	.L560
+	subs	r0, r0, r1
+	cmp	r0, #-2147483648
+	ite	hi
+	movhi	r0, #0
+	movls	r0, #1
+	bx	lr
+.L560:
+	subs	r0, r1, r0
+	cmp	r0, #-2147483648
+	ite	ls
+	movls	r0, #0
+	movhi	r0, #1
+	bx	lr
+	.fnend
+	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
+	.align	1
+	.global	FtlFreeSysBlkQueueInit
+	.thumb
+	.thumb_func
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L563
+	mov	r1, #2048
+	push	{r4, lr}
+	.save {r4, lr}
+	movs	r4, #0
+	strh	r0, [r3, #3028]	@ movhi
+	addw	r0, r3, #3036
+	strh	r4, [r3, #3030]	@ movhi
+	strh	r4, [r3, #3032]	@ movhi
+	strh	r4, [r3, #3034]	@ movhi
+	bl	__memzero
+	mov	r0, r4
+	pop	{r4, pc}
+.L564:
+	.align	2
+.L563:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	1
+	.global	FtlFreeSysBlkQueueEmpty
+	.thumb
+	.thumb_func
+	.type	FtlFreeSysBlkQueueEmpty, %function
+FtlFreeSysBlkQueueEmpty:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L566
+	ldrh	r0, [r3, #3034]
+	clz	r0, r0
+	lsrs	r0, r0, #5
+	bx	lr
+.L567:
+	.align	2
+.L566:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
+	.align	1
+	.global	FtlFreeSysBlkQueueFull
+	.thumb
+	.thumb_func
+	.type	FtlFreeSysBlkQueueFull, %function
+FtlFreeSysBlkQueueFull:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L569
+	ldrh	r0, [r3, #3034]
+	sub	r3, r0, #1024
+	rsbs	r0, r3, #0
+	adcs	r0, r0, r3
+	bx	lr
+.L570:
+	.align	2
+.L569:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
+	.align	1
+	.global	FtlFreeSysBlkQueueIn
+	.thumb
+	.thumb_func
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r6, r0
+	ldr	r4, .L580
+	ldrh	r3, [r4, #3034]
+	cmp	r3, #1024
+	beq	.L571
+	cbz	r1, .L573
+	ldr	r5, .L580+4
+	ldr	r3, [r5, #740]
+	cbnz	r3, .L573
+	bl	P2V_block_in_plane
+	movs	r1, #1
+	lsls	r3, r6, #10
+	mov	r2, r1
+	mov	r7, r0
+	ldr	r0, [r5, #744]
+	str	r3, [r0, #4]
+	bl	FlashEraseBlocks
+	ldr	r2, [r5, #748]
+	ldrh	r3, [r2, r7, lsl #1]
+	adds	r3, r3, #1
+	strh	r3, [r2, r7, lsl #1]	@ movhi
+	ldr	r3, [r5, #752]
+	adds	r3, r3, #1
+	str	r3, [r5, #752]
+.L573:
+	ldrh	r3, [r4, #3034]
+	adds	r3, r3, #1
+	strh	r3, [r4, #3034]	@ movhi
+	ldrh	r3, [r4, #3032]
+	add	r2, r4, r3, lsl #1
+	adds	r3, r3, #1
+	ubfx	r3, r3, #0, #10
+	strh	r3, [r4, #3032]	@ movhi
+	strh	r6, [r2, #3036]	@ movhi
+.L571:
+	pop	{r3, r4, r5, r6, r7, pc}
+.L581:
+	.align	2
+.L580:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+	.align	1
+	.global	FtlFreeSysBLkSort
+	.thumb
+	.thumb_func
+	.type	FtlFreeSysBLkSort, %function
+FtlFreeSysBLkSort:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movs	r4, #0
+	ldr	r5, .L594
+	ldr	r6, .L594+4
+.L583:
+	ldrh	r3, [r5, #3034]
+	adds	r7, r4, #1
+	uxth	r4, r4
+	ldr	r0, .L594
+	cmp	r3, r4
+	bls	.L591
+	ldrh	r3, [r5, #3030]
+	add	r3, r3, r4
+	add	r3, r5, r3, lsl #1
+	ldrh	r0, [r3, #3036]
+	bl	P2V_block_in_plane
+	ldr	r2, [r6, #748]
+	ldr	r3, [r6, #756]
+	ldrh	r2, [r2, r0, lsl #1]
+	str	r2, [r3, r4, lsl #2]
+	mov	r4, r7
+	b	.L583
+.L591:
+	ldr	r5, .L594+4
+	movs	r1, #0
+	mov	ip, r5
+.L585:
+	ldrh	r8, [r0, #3034]
+	add	r3, r8, #-1
+	cmp	r1, r3
+	bge	.L592
+	adds	r4, r1, #1
+	ldr	r2, [r5, #756]
+	mov	r3, r1
+	uxth	r4, r4
+	mov	lr, r4
+.L586:
+	cmp	lr, r8
+	bcs	.L593
+	ldr	r6, [r2, lr, lsl #2]
+	ldr	r7, [r2, r3, lsl #2]
+	cmp	r7, r6
+	it	hi
+	movhi	r3, lr
+	add	lr, lr, #1
+	uxth	lr, lr
+	b	.L586
+.L593:
+	cmp	r1, r3
+	beq	.L589
+	ldr	r6, [r2, r1, lsl #2]
+	ldr	r7, [r2, r3, lsl #2]
+	str	r6, [r2, r3, lsl #2]
+	ldr	r2, [ip, #756]
+	str	r7, [r2, r1, lsl #2]
+	ldrh	r2, [r0, #3030]
+	add	r3, r3, r2
+	add	r2, r2, r1
+	adds	r3, r3, #4
+	adds	r2, r2, #4
+	add	r3, r0, r3, lsl #1
+	add	r2, r0, r2, lsl #1
+	ldrh	r7, [r3, #3028]
+	ldrh	r1, [r2, #3028]
+	strh	r1, [r3, #3028]	@ movhi
+	strh	r7, [r2, #3028]	@ movhi
+.L589:
+	mov	r1, r4
+	b	.L585
+.L592:
+	pop	{r4, r5, r6, r7, r8, pc}
+.L595:
+	.align	2
+.L594:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
+	.align	1
+	.global	remove_from_free_sys_Queue
+	.thumb
+	.thumb_func
+	.type	remove_from_free_sys_Queue, %function
+remove_from_free_sys_Queue:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L603
+	mov	r1, r0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldrh	r0, [r3, #3034]
+	cbz	r0, .L597
+	ldrh	r6, [r3, #3030]
+	movs	r4, #0
+.L598:
+	cmp	r4, r0
+	bcs	.L602
+	adds	r2, r4, r6
+	ldr	r5, .L603
+	ubfx	r2, r2, #0, #10
+	add	r2, r3, r2, lsl #1
+	ldrh	r2, [r2, #3036]
+	cmp	r2, r1
+	bne	.L599
+	ldr	r0, .L603+4
+	bl	printk
+	ldrh	r3, [r5, #3030]
+	movs	r0, #1
+	add	r4, r4, r3
+	add	r2, r5, r3, lsl #1
+	ubfx	r4, r4, #0, #10
+	adds	r3, r3, #1
+	ldrh	r2, [r2, #3036]
+	add	r4, r5, r4, lsl #1
+	ubfx	r3, r3, #0, #10
+	strh	r3, [r5, #3030]	@ movhi
+	ldrh	r3, [r5, #3034]
+	strh	r2, [r4, #3036]	@ movhi
+	subs	r3, r3, #1
+	strh	r3, [r5, #3034]	@ movhi
+	pop	{r4, r5, r6, pc}
+.L599:
+	adds	r4, r4, #1
+	b	.L598
+.L602:
+	movs	r0, #0
+.L597:
+	pop	{r4, r5, r6, pc}
+.L604:
+	.align	2
+.L603:
+	.word	.LANCHOR0
+	.word	.LC3
+	.fnend
+	.size	remove_from_free_sys_Queue, .-remove_from_free_sys_Queue
+	.align	1
+	.global	FtlFreeSysBlkQueueOut
+	.thumb
+	.thumb_func
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	ldr	r5, .L612
+	ldrh	r2, [r5, #3034]
+	cbz	r2, .L608
+	ldrh	r3, [r5, #3030]
+	subs	r2, r2, #1
+	ldr	r4, .L612+4
+	strh	r2, [r5, #3034]	@ movhi
+	add	r1, r5, r3, lsl #1
+	adds	r3, r3, #1
+	ldr	r8, [r4, #740]
+	ubfx	r3, r3, #0, #10
+	ldrh	r6, [r1, #3036]
+	strh	r3, [r5, #3030]	@ movhi
+	cmp	r8, #0
+	bne	.L606
+	mov	r0, r6
+	bl	P2V_block_in_plane
+	lsls	r3, r6, #10
+	mov	r7, r0
+	ldr	r0, [r4, #744]
+	str	r3, [r0, #4]
+	ldrb	r3, [r5, #76]	@ zero_extendqisi2
+	cbz	r3, .L607
+	mov	r1, r8
+	movs	r2, #1
+	bl	FlashEraseBlocks
+.L607:
+	movs	r1, #1
+	ldr	r0, [r4, #744]
+	mov	r2, r1
+	bl	FlashEraseBlocks
+	ldr	r2, [r4, #748]
+	ldrh	r3, [r2, r7, lsl #1]
+	adds	r3, r3, #1
+	strh	r3, [r2, r7, lsl #1]	@ movhi
+	ldr	r3, [r4, #752]
+	adds	r3, r3, #1
+	str	r3, [r4, #752]
+	b	.L606
+.L608:
+	movw	r6, #65535
+.L606:
+	mov	r0, r6
+	pop	{r4, r5, r6, r7, r8, pc}
+.L613:
+	.align	2
+.L612:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
+	.align	1
+	.global	insert_data_list
+	.thumb
+	.thumb_func
+	.type	insert_data_list, %function
+insert_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r5, .L630
+	ldrh	r3, [r5, #2836]
+	cmp	r3, r0
+	bls	.L616
+	movs	r4, #6
+	ldr	r2, .L630+4
+	movw	r3, #65535
+	muls	r4, r0, r4
+	ldr	lr, [r2, #760]
+	mov	r7, r2
+	add	r1, lr, r4
+	strh	r3, [r1, #2]	@ movhi
+	strh	r3, [lr, r4]	@ movhi
+	ldr	r3, [r2, #764]
+	cmp	r3, #0
+	beq	.L629
+	ldr	r8, [r2, #768]
+	lsl	fp, r0, #1
+	ldrh	r2, [r1, #4]
+	ldrh	r6, [r8, r0, lsl #1]
+	cbz	r2, .L627
+	muls	r6, r2, r6
+	b	.L618
+.L627:
+	mov	r6, #-1
+.L618:
+	ldr	ip, [r7, #760]
+	ldr	r2, .L630+8
+	rsb	r9, ip, r3
+	ldrh	r5, [r5, #2836]
+	asr	r9, r9, #1
+	str	r5, [sp]
+	mul	r2, r2, r9
+	ldr	r9, [r7, #748]
+	add	r5, r9, fp
+	str	r5, [sp, #4]
+	movs	r5, #0
+	uxth	r2, r2
+.L625:
+	adds	r5, r5, #1
+	ldr	r7, [sp]
+	uxth	r5, r5
+	cmp	r5, r7
+	bhi	.L616
+	cmp	r0, r2
+	beq	.L616
+	ldrh	r7, [r3, #4]
+	lsl	r10, r2, #1
+	ldrh	fp, [r8, r2, lsl #1]
+	cbz	r7, .L628
+	mul	r7, r7, fp
+	b	.L620
+.L628:
+	mov	r7, #-1
+.L620:
+	cmp	r7, r6
+	bne	.L621
+	ldr	r7, [sp, #4]
+	ldrh	r10, [r9, r10]
+	ldrh	r7, [r7]
+	cmp	r10, r7
+	bcc	.L623
+	b	.L622
+.L621:
+	bhi	.L622
+.L623:
+	ldrh	r7, [r3]
+	movw	r10, #65535
+	cmp	r7, r10
+	bne	.L624
+	strh	r2, [r1, #2]	@ movhi
+	strh	r0, [r3]	@ movhi
+	ldr	r3, .L630+4
+	str	r1, [r3, #772]
+	b	.L616
+.L624:
+	movs	r3, #6
+	mov	r2, r7
+	mla	r3, r3, r7, ip
+	b	.L625
+.L622:
+	strh	r2, [lr, r4]	@ movhi
+	ldrh	r2, [r3, #2]
+	strh	r2, [r1, #2]	@ movhi
+	ldr	r2, .L630+4
+	ldr	r4, [r2, #764]
+	cmp	r3, r4
+	bne	.L626
+	strh	r0, [r3, #2]	@ movhi
+.L629:
+	str	r1, [r2, #764]
+	b	.L616
+.L626:
+	ldrh	r4, [r3, #2]
+	ldr	r1, [r2, #760]
+	movs	r2, #6
+	muls	r2, r4, r2
+	strh	r0, [r1, r2]	@ movhi
+	strh	r0, [r3, #2]	@ movhi
+.L616:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L631:
+	.align	2
+.L630:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	insert_data_list, .-insert_data_list
+	.align	1
+	.global	INSERT_DATA_LIST
+	.thumb
+	.thumb_func
+	.type	INSERT_DATA_LIST, %function
+INSERT_DATA_LIST:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	bl	insert_data_list
+	ldr	r2, .L633
+	ldrh	r3, [r2, #776]
+	adds	r3, r3, #1
+	strh	r3, [r2, #776]	@ movhi
+	pop	{r3, pc}
+.L634:
+	.align	2
+.L633:
+	.word	.LANCHOR2
+	.fnend
+	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
+	.align	1
+	.global	insert_free_list
+	.thumb
+	.thumb_func
+	.type	insert_free_list, %function
+insert_free_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movw	r5, #65535
+	cmp	r0, r5
+	beq	.L636
+	movs	r1, #6
+	ldr	r2, .L643
+	mul	lr, r1, r0
+	ldr	ip, [r2, #760]
+	mov	r7, r2
+	add	r6, ip, lr
+	strh	r5, [r6, #2]	@ movhi
+	strh	r5, [ip, lr]	@ movhi
+	ldr	r3, [r2, #780]
+	cbz	r3, .L642
+	ldr	r8, [r2, #760]
+	ldr	r9, [r2, #748]
+	rsb	r4, r8, r3
+	ldr	r2, .L643+4
+	asrs	r4, r4, #1
+	ldrh	r10, [r9, r0, lsl #1]
+	muls	r4, r2, r4
+	uxth	r2, r4
+.L640:
+	ldrh	r4, [r9, r2, lsl #1]
+	cmp	r4, r10
+	bcs	.L638
+	ldrh	r4, [r3]
+	cmp	r4, r5
+	bne	.L639
+	strh	r2, [r6, #2]	@ movhi
+	strh	r0, [r3]	@ movhi
+	b	.L636
+.L639:
+	mla	r3, r1, r4, r8
+	mov	r2, r4
+	b	.L640
+.L638:
+	ldrh	r1, [r3, #2]
+	strh	r1, [r6, #2]	@ movhi
+	strh	r2, [ip, lr]	@ movhi
+	ldr	r1, [r7, #780]
+	ldr	r2, .L643
+	cmp	r3, r1
+	bne	.L641
+	strh	r0, [r3, #2]	@ movhi
+.L642:
+	str	r6, [r2, #780]
+	b	.L636
+.L641:
+	ldrh	r4, [r3, #2]
+	ldr	r1, [r2, #760]
+	movs	r2, #6
+	muls	r2, r4, r2
+	strh	r0, [r1, r2]	@ movhi
+	strh	r0, [r3, #2]	@ movhi
+.L636:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L644:
+	.align	2
+.L643:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	insert_free_list, .-insert_free_list
+	.align	1
+	.global	INSERT_FREE_LIST
+	.thumb
+	.thumb_func
+	.type	INSERT_FREE_LIST, %function
+INSERT_FREE_LIST:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	bl	insert_free_list
+	ldr	r2, .L646
+	ldrh	r3, [r2, #784]
+	adds	r3, r3, #1
+	strh	r3, [r2, #784]	@ movhi
+	pop	{r3, pc}
+.L647:
+	.align	2
+.L646:
+	.word	.LANCHOR2
+	.fnend
+	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
+	.align	1
+	.global	List_remove_node
+	.thumb
+	.thumb_func
+	.type	List_remove_node, %function
+List_remove_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	movs	r4, #6
+	ldr	r7, .L653
+	movw	r6, #65535
+	muls	r1, r4, r1
+	ldr	r3, [r0]
+	ldr	r2, [r7, #760]
+	adds	r5, r2, r1
+	cmp	r5, r3
+	ldrh	r3, [r2, r1]
+	bne	.L649
+	cmp	r3, r6
+	ittee	eq
+	moveq	r3, #0
+	streq	r3, [r0]
+	mlane	r3, r4, r3, r2
+	strne	r3, [r0]
+	it	ne
+	strhne	r6, [r3, #2]	@ movhi
+	b	.L651
+.L649:
+	cmp	r3, r6
+	ldrh	r0, [r5, #2]
+	bne	.L652
+	cmp	r0, r3
+	beq	.L651
+	muls	r0, r4, r0
+	strh	r3, [r2, r0]	@ movhi
+	b	.L651
+.L652:
+	mla	r3, r4, r3, r2
+	strh	r0, [r3, #2]	@ movhi
+	ldrh	r6, [r5, #2]
+	ldrh	r0, [r2, r1]
+	ldr	r3, [r7, #760]
+	muls	r4, r6, r4
+	strh	r0, [r3, r4]	@ movhi
+.L651:
+	movw	r3, #65535
+	movs	r0, #0
+	strh	r3, [r2, r1]	@ movhi
+	strh	r3, [r5, #2]	@ movhi
+	pop	{r4, r5, r6, r7, pc}
+.L654:
+	.align	2
+.L653:
+	.word	.LANCHOR2
+	.fnend
+	.size	List_remove_node, .-List_remove_node
+	.align	1
+	.global	List_pop_index_node
+	.thumb
+	.thumb_func
+	.type	List_pop_index_node, %function
+List_pop_index_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	ldr	r3, [r0]
+	cbz	r3, .L661
+	ldr	r2, .L662
+	movs	r6, #6
+	movw	r5, #65535
+	ldr	r4, [r2, #760]
+.L657:
+	cbnz	r1, .L658
+.L660:
+	subs	r4, r3, r4
+	ldr	r3, .L662+4
+	asrs	r4, r4, #1
+	muls	r4, r3, r4
+	uxth	r4, r4
+	mov	r1, r4
+	bl	List_remove_node
+	mov	r0, r4
+	pop	{r4, r5, r6, pc}
+.L658:
+	ldrh	r2, [r3]
+	cmp	r2, r5
+	beq	.L660
+	subs	r1, r1, #1
+	mla	r3, r6, r2, r4
+	uxth	r1, r1
+	b	.L657
+.L661:
+	movw	r0, #65535
+	pop	{r4, r5, r6, pc}
+.L663:
+	.align	2
+.L662:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	List_pop_index_node, .-List_pop_index_node
+	.align	1
+	.global	List_get_gc_head_node
+	.thumb
+	.thumb_func
+	.type	List_get_gc_head_node, %function
+List_get_gc_head_node:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L671
+	push	{r4, lr}
+	.save {r4, lr}
+	ldr	r3, [r2, #764]
+	cbz	r3, .L669
+	movs	r4, #6
+	ldr	r1, [r2, #760]
+	movw	r2, #65535
+.L666:
+	cbz	r0, .L667
+	ldrh	r3, [r3]
+	cmp	r3, r2
+	beq	.L669
+	subs	r0, r0, #1
+	mla	r3, r4, r3, r1
+	uxth	r0, r0
+	b	.L666
+.L669:
+	movw	r0, #65535
+	pop	{r4, pc}
+.L667:
+	subs	r3, r3, r1
+	ldr	r0, .L671+4
+	asrs	r3, r3, #1
+	muls	r0, r3, r0
+	uxth	r0, r0
+	pop	{r4, pc}
+.L672:
+	.align	2
+.L671:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	List_get_gc_head_node, .-List_get_gc_head_node
+	.align	1
+	.global	List_update_data_list
+	.thumb
+	.thumb_func
+	.type	List_update_data_list, %function
+List_update_data_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r5, r0
+	ldr	r4, .L678
+	ldrh	r3, [r4, #788]
+	cmp	r3, r0
+	beq	.L674
+	ldrh	r3, [r4, #836]
+	cmp	r3, r0
+	beq	.L674
+	ldrh	r3, [r4, #884]
+	cmp	r3, r0
+	beq	.L674
+	movs	r3, #6
+	ldr	r0, [r4, #760]
+	ldr	r2, [r4, #764]
+	muls	r3, r5, r3
+	adds	r1, r0, r3
+	cmp	r1, r2
+	beq	.L674
+	ldr	r6, [r4, #768]
+	ldrh	r7, [r1, #4]
+	ldrh	r1, [r1, #2]
+	ldrh	r2, [r6, r5, lsl #1]
+	muls	r2, r7, r2
+	movw	r7, #65535
+	it	eq
+	moveq	r2, #-1
+	cmp	r1, r7
+	bne	.L676
+	ldrh	r3, [r0, r3]
+	cmp	r3, r1
+	beq	.L674
+.L676:
+	movs	r3, #6
+	muls	r1, r3, r1
+	ldr	r3, .L678+4
+	asrs	r7, r1, #1
+	add	r1, r1, r0
+	muls	r3, r7, r3
+	ldrh	r1, [r1, #4]
+	ldrh	r3, [r6, r3, lsl #1]
+	muls	r3, r1, r3
+	it	eq
+	moveq	r3, #-1
+	cmp	r2, r3
+	bcs	.L674
+	ldr	r0, .L678+8
+	mov	r1, r5
+	bl	List_remove_node
+	ldrh	r3, [r4, #776]
+	mov	r0, r5
+	subs	r3, r3, #1
+	strh	r3, [r4, #776]	@ movhi
+	bl	INSERT_DATA_LIST
+.L674:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, pc}
+.L679:
+	.align	2
+.L678:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.word	.LANCHOR2+764
+	.fnend
+	.size	List_update_data_list, .-List_update_data_list
+	.align	1
+	.global	ftl_map_blk_alloc_new_blk
+	.thumb
+	.thumb_func
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	movs	r3, #0
+	ldrh	r1, [r0, #10]
+	mov	r4, r0
+	ldr	r2, [r0, #12]
+.L681:
+	uxth	r5, r3
+	cmp	r5, r1
+	bcs	.L683
+	mov	r7, r2
+	adds	r3, r3, #1
+	ldrh	r6, [r7]
+	adds	r2, r2, #2
+	cmp	r6, #0
+	bne	.L681
+	bl	FtlFreeSysBlkQueueOut
+	strh	r0, [r7]	@ movhi
+	cbz	r0, .L683
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	adds	r3, r3, #1
+	str	r3, [r4, #28]
+	ldrh	r3, [r4, #8]
+	strh	r5, [r4]	@ movhi
+	adds	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+.L683:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, pc}
+	.fnend
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
+	.align	1
+	.global	select_l2p_ram_region
+	.thumb
+	.thumb_func
+	.type	select_l2p_ram_region, %function
+select_l2p_ram_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	movs	r1, #0
+	ldr	r3, .L701
+	movs	r4, #12
+	ldr	r7, .L701+4
+	movw	r5, #65535
+	ldrh	r2, [r3, #2938]
+	ldr	r3, [r7, #932]
+.L688:
+	uxth	r0, r1
+	cmp	r0, r2
+	bcs	.L699
+	adds	r1, r1, #1
+	mla	r6, r4, r1, r3
+	ldrh	r6, [r6, #-12]
+	cmp	r6, r5
+	bne	.L688
+	b	.L689
+.L699:
+	movs	r1, #0
+	mov	r6, #-2147483648
+	mov	lr, #12
+	mov	r0, r2
+.L691:
+	uxth	r5, r1
+	cmp	r5, r2
+	bcs	.L700
+	mla	r4, lr, r1, r3
+	ldr	r4, [r4, #4]
+	cmp	r4, #0
+	blt	.L692
+	cmp	r4, r6
+	itt	cc
+	movcc	r6, r4
+	movcc	r0, r5
+.L692:
+	adds	r1, r1, #1
+	b	.L691
+.L700:
+	cmp	r0, r2
+	bcc	.L689
+	ldrh	r7, [r7, #936]
+	movs	r1, #0
+	mov	r4, #-1
+	mov	r0, r2
+.L694:
+	uxth	r5, r1
+	cmp	r5, r2
+	bcs	.L689
+	ldr	r6, [r3, #4]
+	cmp	r6, r4
+	bcs	.L695
+	ldrh	lr, [r3]
+	cmp	lr, r7
+	itt	ne
+	movne	r4, r6
+	movne	r0, r5
+.L695:
+	adds	r1, r1, #1
+	adds	r3, r3, #12
+	b	.L694
+.L689:
+	pop	{r4, r5, r6, r7, pc}
+.L702:
+	.align	2
+.L701:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	select_l2p_ram_region, .-select_l2p_ram_region
+	.align	1
+	.global	FtlUpdateVaildLpn
+	.thumb
+	.thumb_func
+	.type	FtlUpdateVaildLpn, %function
+FtlUpdateVaildLpn:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r1, .L710
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	ldrh	r2, [r1, #938]
+	mov	r3, r1
+	cmp	r2, #4
+	bhi	.L704
+	cbnz	r0, .L704
+	adds	r2, r2, #1
+	strh	r2, [r1, #938]	@ movhi
+	pop	{r4, r5, pc}
+.L704:
+	ldr	r1, .L710+4
+	movs	r2, #0
+	strh	r2, [r3, #938]	@ movhi
+	movw	r5, #65535
+	str	r2, [r3, #940]
+	ldrh	r1, [r1, #2836]
+	ldr	r2, [r3, #768]
+	add	r1, r2, r1, lsl #1
+.L705:
+	cmp	r2, r1
+	beq	.L709
+	ldrh	r4, [r2], #2
+	cmp	r4, r5
+	ittt	ne
+	ldrne	r0, [r3, #940]
+	addne	r0, r0, r4
+	strne	r0, [r3, #940]
+	b	.L705
+.L709:
+	pop	{r4, r5, pc}
+.L711:
+	.align	2
+.L710:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
+	.align	1
+	.global	ftl_set_blk_mode
+	.thumb
+	.thumb_func
+	.type	ftl_set_blk_mode, %function
+ftl_set_blk_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	lsrs	r3, r0, #5
+	ldr	r2, .L715
+	and	r0, r0, #31
+	uxth	r3, r3
+	cbz	r1, .L713
+	ldr	r1, [r2, #944]
+	movs	r2, #1
+	lsls	r2, r2, r0
+	ldr	r0, [r1, r3, lsl #2]
+	orrs	r2, r2, r0
+	str	r2, [r1, r3, lsl #2]
+	bx	lr
+.L713:
+	ldr	r1, [r2, #944]
+	movs	r2, #1
+	lsls	r2, r2, r0
+	ldr	r0, [r1, r3, lsl #2]
+	bic	r0, r0, r2
+	str	r0, [r1, r3, lsl #2]
+	bx	lr
+.L716:
+	.align	2
+.L715:
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
+	.align	1
+	.global	ftl_get_blk_mode
+	.thumb
+	.thumb_func
+	.type	ftl_get_blk_mode, %function
+ftl_get_blk_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L718
+	lsrs	r1, r0, #5
+	ldr	r2, [r3, #944]
+	and	r3, r0, #31
+	ldr	r0, [r2, r1, lsl #2]
+	lsrs	r0, r0, r3
+	and	r0, r0, #1
+	bx	lr
+.L719:
+	.align	2
+.L718:
+	.word	.LANCHOR2
+	.fnend
+	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
+	.align	1
+	.global	ftl_sb_update_avl_pages
+	.thumb
+	.thumb_func
+	.type	ftl_sb_update_avl_pages, %function
+ftl_sb_update_avl_pages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movs	r3, #0
+	strh	r3, [r0, #4]	@ movhi
+	ldr	r3, .L729
+	push	{r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	adds	r4, r2, #7
+	ldrh	r5, [r3, #2828]
+	movw	r7, #65535
+	add	r4, r0, r4, lsl #1
+.L721:
+	cmp	r2, r5
+	bcs	.L727
+	ldrh	r6, [r4, #2]!
+	adds	r2, r2, #1
+	cmp	r6, r7
+	uxth	r2, r2
+	ittt	ne
+	ldrhne	r6, [r0, #4]
+	addne	r6, r6, #1
+	strhne	r6, [r0, #4]	@ movhi
+	b	.L721
+.L727:
+	ldrh	r6, [r3, #2898]
+	add	r4, r0, #14
+	movs	r2, #0
+	movw	r7, #65535
+.L724:
+	uxth	r3, r2
+	cmp	r3, r5
+	bcs	.L728
+	ldrh	r3, [r4, #2]!
+	adds	r2, r2, #1
+	cmp	r3, r7
+	itttt	ne
+	ldrhne	r3, [r0, #4]
+	addne	r3, r3, r6
+	addne	r3, r3, #-1
+	subne	r3, r3, r1
+	it	ne
+	strhne	r3, [r0, #4]	@ movhi
+	b	.L724
+.L728:
+	pop	{r4, r5, r6, r7, pc}
+.L730:
+	.align	2
+.L729:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
+	.align	1
+	.global	make_superblock
+	.thumb
+	.thumb_func
+	.type	make_superblock, %function
+make_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r3, #0
+	ldr	r6, .L744
+	add	r7, r0, #16
+	mov	r4, r0
+	mov	r5, r3
+	addw	r10, r6, #2856
+	movw	r9, #65535
+	ldrh	r8, [r6, #2828]
+	strh	r3, [r0, #4]	@ movhi
+	strb	r3, [r0, #7]
+.L732:
+	uxth	r3, r5
+	cmp	r3, r8
+	bcs	.L743
+	ldrb	r0, [r10, r5]	@ zero_extendqisi2
+	ldrh	r1, [r4]
+	bl	V2P_block
+	strh	r9, [r7]	@ movhi
+	mov	fp, r0
+	bl	FtlBbmIsBadBlock
+	cbnz	r0, .L733
+	strh	fp, [r7]	@ movhi
+	ldrb	r3, [r4, #7]	@ zero_extendqisi2
+	adds	r3, r3, #1
+	strb	r3, [r4, #7]
+.L733:
+	adds	r5, r5, #1
+	adds	r7, r7, #2
+	b	.L732
+.L743:
+	ldrb	r2, [r4, #7]	@ zero_extendqisi2
+	ldrh	r3, [r6, #2898]
+	smulbb	r3, r2, r3
+	strh	r3, [r4, #4]	@ movhi
+	movs	r3, #0
+	strb	r3, [r4, #9]
+	ldr	r3, .L744+4
+	ldr	r2, [r3, #948]
+	cbz	r2, .L735
+	ldrh	r2, [r4]
+	ldr	r3, [r3, #748]
+	ldrh	r3, [r3, r2, lsl #1]
+	cmp	r3, #59
+	itt	ls
+	movls	r3, #1
+	strbls	r3, [r4, #9]
+.L735:
+	ldrb	r3, [r6]	@ zero_extendqisi2
+	cbz	r3, .L736
+	movs	r3, #1
+	strb	r3, [r4, #9]
+.L736:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L745:
+	.align	2
+.L744:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	make_superblock, .-make_superblock
+	.align	1
+	.global	update_multiplier_value
+	.thumb
+	.thumb_func
+	.type	update_multiplier_value, %function
+update_multiplier_value:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	movs	r5, #0
+	ldr	r3, .L755
+	mov	r7, r0
+	mov	r4, r5
+	addw	r6, r3, #2856
+	ldrh	r8, [r3, #2828]
+	ldrh	r9, [r3, #2898]
+.L747:
+	uxth	r3, r5
+	cmp	r3, r8
+	bcs	.L754
+	mov	r1, r7
+	ldrb	r0, [r6, r5]	@ zero_extendqisi2
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	cbnz	r0, .L748
+	add	r4, r4, r9
+	uxth	r4, r4
+.L748:
+	adds	r5, r5, #1
+	b	.L747
+.L754:
+	cbz	r4, .L750
+	mov	r1, r4
+	mov	r0, #32768
+	bl	__aeabi_idiv
+	uxth	r4, r0
+.L750:
+	ldr	r3, .L755+4
+	movs	r2, #6
+	movs	r0, #0
+	ldr	r3, [r3, #760]
+	mla	r7, r2, r7, r3
+	strh	r4, [r7, #4]	@ movhi
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L756:
+	.align	2
+.L755:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	update_multiplier_value, .-update_multiplier_value
+	.align	1
+	.global	GetFreeBlockMinEraseCount
+	.thumb
+	.thumb_func
+	.type	GetFreeBlockMinEraseCount, %function
+GetFreeBlockMinEraseCount:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L760
+	ldr	r0, [r2, #780]
+	cbz	r0, .L758
+	ldr	r3, [r2, #760]
+	subs	r0, r0, r3
+	ldr	r3, .L760+4
+	asrs	r0, r0, #1
+	muls	r0, r3, r0
+	ldr	r3, [r2, #748]
+	uxth	r0, r0
+	ldrh	r0, [r3, r0, lsl #1]
+.L758:
+	bx	lr
+.L761:
+	.align	2
+.L760:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
+	.align	1
+	.global	GetFreeBlockMaxEraseCount
+	.thumb
+	.thumb_func
+	.type	GetFreeBlockMaxEraseCount, %function
+GetFreeBlockMaxEraseCount:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r1, .L770
+	push	{r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	ldr	r3, [r1, #780]
+	cbz	r3, .L768
+	ldrh	r2, [r1, #784]
+	movs	r6, #6
+	ldr	r4, [r1, #760]
+	movw	r7, #65535
+	rsb	r2, r2, r2, lsl #3
+	subs	r3, r3, r4
+	asrs	r2, r2, #3
+	asrs	r3, r3, #1
+	cmp	r0, r2
+	it	gt
+	uxthgt	r0, r2
+	ldr	r2, .L770+4
+	muls	r3, r2, r3
+	movs	r2, #0
+	uxth	r3, r3
+.L765:
+	uxth	r5, r2
+	cmp	r5, r0
+	bcs	.L767
+	mul	r5, r6, r3
+	adds	r2, r2, #1
+	ldrh	r5, [r4, r5]
+	cmp	r5, r7
+	bne	.L769
+.L767:
+	ldr	r2, [r1, #748]
+	ldrh	r0, [r2, r3, lsl #1]
+	pop	{r4, r5, r6, r7, pc}
+.L769:
+	mov	r3, r5
+	b	.L765
+.L768:
+	mov	r0, r3
+	pop	{r4, r5, r6, r7, pc}
+.L771:
+	.align	2
+.L770:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.fnend
+	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
+	.align	1
+	.global	FtlPrintInfo2buf
+	.thumb
+	.thumb_func
+	.type	FtlPrintInfo2buf, %function
+FtlPrintInfo2buf:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r6, r0
+	ldr	r8, .L782+240
+	add	r4, r6, #12
+	ldr	r1, .L782
+	.pad #32
+	sub	sp, sp, #32
+	bl	strcpy
+	mov	r0, r4
+	ldr	r1, .L782+4
+	ldr	r2, [r8, #1864]
+	bl	sprintf
+	ldr	r1, .L782+8
+	ldr	r2, [r8, #2916]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r3, .L782+12
+	ldr	r3, [r3, #504]
+	cmp	r3, #1
+	add	r4, r4, r0
+	bne	.L778
+	add	r0, sp, #16
+	add	r1, sp, #20
+	add	r2, sp, #24
+	add	r3, sp, #28
+	bl	NandcGetTimeCfg
+	mov	r0, r4
+	ldr	r1, .L782+16
+	ldr	r7, .L782+20
+	ldr	r3, [sp, #24]
+	ldr	r2, [sp, #16]
+	str	r3, [sp]
+	ldr	r3, [sp, #28]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #20]
+	bl	sprintf
+	ldr	r1, .L782+24
+	add	r4, r4, r0
+	add	r5, r4, #10
+	mov	r0, r4
+	bl	strcpy
+	mov	r0, r5
+	ldr	r1, .L782+28
+	ldr	r2, [r8, #2960]
+	bl	sprintf
+	ldr	r1, .L782+32
+	ldr	r2, [r7, #940]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+36
+	ldr	r2, [r7, #952]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+40
+	ldr	r2, [r7, #956]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+44
+	ldr	r2, [r7, #960]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+48
+	ldr	r2, [r7, #964]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+52
+	ldr	r2, [r7, #968]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+56
+	ldr	r2, [r7, #972]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r2, [r7, #976]
+	ldr	r1, .L782+60
+	lsrs	r2, r2, #11
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r2, [r7, #980]
+	ldr	r1, .L782+64
+	lsrs	r2, r2, #11
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+68
+	ldr	r2, [r7, #984]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+72
+	ldr	r2, [r7, #988]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	add	r5, r5, r0
+	bl	FtlBbtCalcTotleCnt
+	ldr	r1, .L782+76
+	ldrh	r2, [r8, #2974]
+	mov	r3, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+80
+	ldrh	r2, [r7, #784]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+84
+	ldr	r2, [r7, #992]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+88
+	ldr	r2, [r7, #996]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+92
+	ldr	r2, [r7, #1000]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+96
+	ldr	r2, [r7, #752]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+100
+	ldr	r2, [r7, #1004]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+104
+	ldr	r2, [r7, #1008]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+108
+	ldrh	r2, [r7, #1042]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+112
+	ldrh	r2, [r7, #1040]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+116
+	ldr	r2, [r8, #2940]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+120
+	ldr	r2, [r8, #2932]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+124
+	ldr	r2, [r8, #2824]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+128
+	ldrh	r2, [r8, #3034]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+132
+	ldrh	r2, [r8, #2836]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+136
+	ldrh	r2, [r7, #1060]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+140
+	ldr	r2, [r8, #2840]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+144
+	ldrh	r2, [r7, #1064]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+148
+	ldrh	r2, [r8, #2968]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+152
+	ldrh	r2, [r7, #790]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+156
+	ldrb	r2, [r7, #794]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+160
+	ldrh	r2, [r7, #788]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+164
+	ldrb	r2, [r7, #796]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+168
+	ldrh	r2, [r7, #792]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r3, [r7, #768]
+	ldrh	r2, [r7, #788]
+	ldr	r1, .L782+172
+	ldrh	r2, [r3, r2, lsl #1]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+176
+	ldrh	r2, [r7, #838]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+180
+	ldrb	r2, [r7, #842]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+184
+	ldrh	r2, [r7, #836]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+188
+	ldrb	r2, [r7, #844]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+192
+	ldrh	r2, [r7, #840]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r3, [r7, #768]
+	ldrh	r2, [r7, #836]
+	ldr	r1, .L782+196
+	ldrh	r2, [r3, r2, lsl #1]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+200
+	ldrh	r2, [r7, #886]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+204
+	ldrb	r2, [r7, #890]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+208
+	ldrh	r2, [r7, #884]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+212
+	ldrb	r2, [r7, #892]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+216
+	ldrh	r2, [r7, #888]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+220
+	ldrh	r2, [r7, #1078]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+224
+	ldrb	r2, [r7, #1082]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+228
+	ldrh	r2, [r7, #1076]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+232
+	ldrb	r2, [r7, #1084]	@ zero_extendqisi2
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L782+236
+	ldrh	r2, [r7, #1080]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, [r7, #1212]
+	ldr	r3, [r7, #948]
+	ldr	r2, [r7, #1124]
+	b	.L783
+.L784:
+	.align	2
+.L782:
+	.word	.LC4
+	.word	.LC5
+	.word	.LC6
+	.word	.LANCHOR1
+	.word	.LC7
+	.word	.LANCHOR2
+	.word	.LC8
+	.word	.LC9
+	.word	.LC10
+	.word	.LC11
+	.word	.LC12
+	.word	.LC13
+	.word	.LC14
+	.word	.LC15
+	.word	.LC16
+	.word	.LC17
+	.word	.LC18
+	.word	.LC19
+	.word	.LC20
+	.word	.LC21
+	.word	.LC22
+	.word	.LC23
+	.word	.LC24
+	.word	.LC25
+	.word	.LC26
+	.word	.LC27
+	.word	.LC28
+	.word	.LC29
+	.word	.LC30
+	.word	.LC31
+	.word	.LC32
+	.word	.LC33
+	.word	.LC34
+	.word	.LC35
+	.word	.LC36
+	.word	.LC37
+	.word	.LC38
+	.word	.LC39
+	.word	.LC40
+	.word	.LC41
+	.word	.LC42
+	.word	.LC43
+	.word	.LC44
+	.word	.LC45
+	.word	.LC46
+	.word	.LC47
+	.word	.LC48
+	.word	.LC49
+	.word	.LC50
+	.word	.LC51
+	.word	.LC52
+	.word	.LC53
+	.word	.LC54
+	.word	.LC55
+	.word	.LC56
+	.word	.LC57
+	.word	.LC58
+	.word	.LC59
+	.word	.LC60
+	.word	.LC61
+	.word	.LANCHOR0
+.L783:
+	orr	r2, r3, r2, lsl #8
+	str	r1, [sp]
+	add	r5, r5, r0
+	ldr	r1, [r7, #1204]
+	mov	r0, r5
+	str	r1, [sp, #4]
+	ldr	r3, [r7, #1208]
+	ldr	r1, .L785
+	bl	sprintf
+	ldr	r1, .L785+4
+	ldr	r2, [r7, #1200]
+	add	r5, r5, r0
+	mov	r0, r5
+	bl	sprintf
+	ldr	r1, .L785+8
+	ldr	r2, [r7, #1224]
+	adds	r4, r5, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, .L785+12
+	ldrh	r2, [r7, #1640]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, .L785+16
+	ldrh	r2, [r7, #1642]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, .L785+20
+	ldr	r2, [r7, #1644]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	ldr	r1, .L785+24
+	ldrh	r2, [r7, #1648]
+	add	r4, r4, r0
+	mov	r0, r4
+	bl	sprintf
+	add	r4, r4, r0
+	bl	GetFreeBlockMinEraseCount
+	ldr	r1, .L785+28
+	mov	r2, r0
+	mov	r0, r4
+	bl	sprintf
+	add	r4, r4, r0
+	ldrh	r0, [r7, #784]
+	bl	GetFreeBlockMaxEraseCount
+	ldr	r1, .L785+32
+	mov	r2, r0
+	mov	r0, r4
+	bl	sprintf
+	ldrh	r3, [r7, #1076]
+	movw	r2, #65535
+	cmp	r3, r2
+	add	r4, r4, r0
+	beq	.L775
+	ldr	r2, [r7, #768]
+	mov	r0, r4
+	ldr	r1, .L785+36
+	ldrh	r2, [r2, r3, lsl #1]
+	bl	sprintf
+	add	r4, r4, r0
+.L775:
+	movs	r0, #0
+	movs	r5, #0
+	bl	List_get_gc_head_node
+	mov	r9, #6
+	movw	r10, #65535
+	uxth	r3, r0
+.L777:
+	cmp	r3, r10
+	beq	.L776
+	ldr	r2, [r7, #768]
+	mov	r0, r4
+	mul	r8, r9, r3
+	ldr	r1, .L785+40
+	ldrh	r2, [r2, r3, lsl #1]
+	str	r2, [sp]
+	ldr	r2, [r7, #760]
+	add	r2, r2, r8
+	ldrh	r2, [r2, #4]
+	str	r2, [sp, #4]
+	ldr	r2, [r7, #748]
+	ldrh	r2, [r2, r3, lsl #1]
+	str	r2, [sp, #8]
+	mov	r2, r5
+	bl	sprintf
+	adds	r5, r5, #1
+	ldr	r3, [r7, #760]
+	cmp	r5, #16
+	ldrh	r3, [r3, r8]
+	add	r4, r4, r0
+	bne	.L777
+.L776:
+	ldr	r2, [r7, #760]
+	movs	r5, #0
+	ldr	r3, [r7, #780]
+	mov	r9, #6
+	movw	r10, #65535
+	subs	r3, r3, r2
+	ldr	r2, .L785+44
+	asrs	r3, r3, #1
+	muls	r3, r2, r3
+	uxth	r3, r3
+.L779:
+	cmp	r3, r10
+	beq	.L778
+	mul	r8, r9, r3
+	ldr	r2, [r7, #760]
+	mov	r0, r4
+	ldr	r1, .L785+48
+	add	r2, r2, r8
+	ldrh	r2, [r2, #4]
+	str	r2, [sp]
+	ldr	r2, [r7, #748]
+	ldrh	r2, [r2, r3, lsl #1]
+	str	r2, [sp, #4]
+	mov	r2, r5
+	bl	sprintf
+	adds	r5, r5, #1
+	ldr	r3, [r7, #760]
+	cmp	r5, #4
+	ldrh	r3, [r3, r8]
+	add	r4, r4, r0
+	bne	.L779
+.L778:
+	subs	r0, r4, r6
+	add	sp, sp, #32
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L786:
+	.align	2
+.L785:
+	.word	.LC62
+	.word	.LC63
+	.word	.LC64
+	.word	.LC65
+	.word	.LC66
+	.word	.LC67
+	.word	.LC68
+	.word	.LC69
+	.word	.LC70
+	.word	.LC71
+	.word	.LC72
+	.word	-1431655765
+	.word	.LC73
+	.fnend
+	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
+	.align	1
+	.global	rknand_proc_ftlread
+	.thumb
+	.thumb_func
+	.type	rknand_proc_ftlread, %function
+rknand_proc_ftlread:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r5, r0
+	ldr	r1, .L788
+	ldr	r2, .L788+4
+	bl	sprintf
+	adds	r4, r5, r0
+	mov	r0, r4
+	bl	FtlPrintInfo2buf
+	add	r0, r0, r4
+	subs	r0, r0, r5
+	pop	{r3, r4, r5, pc}
+.L789:
+	.align	2
+.L788:
+	.word	.LC74
+	.word	.LC75
+	.fnend
+	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
+	.align	1
+	.global	GetSwlReplaceBlock
+	.thumb
+	.thumb_func
+	.type	GetSwlReplaceBlock, %function
+GetSwlReplaceBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r4, .L818
+	ldr	r2, [r4, #1000]
+	ldr	r3, [r4, #1008]
+	cmp	r2, r3
+	bcs	.L791
+	ldr	r2, .L818+4
+	movs	r3, #0
+	ldr	r0, [r4, #748]
+	str	r3, [r4, #992]
+	ldrh	r1, [r2, #2836]
+	mov	r5, r2
+.L792:
+	cmp	r3, r1
+	bcs	.L817
+	ldrh	r6, [r0, r3, lsl #1]
+	adds	r3, r3, #1
+	ldr	r2, [r4, #992]
+	add	r2, r2, r6
+	str	r2, [r4, #992]
+	b	.L792
+.L817:
+	ldr	r6, [r4, #992]
+	mov	r0, r6
+	bl	__aeabi_uidiv
+	ldrh	r1, [r5, #2888]
+	str	r0, [r4, #1000]
+	ldr	r0, [r4, #996]
+	subs	r0, r6, r0
+	bl	__aeabi_uidiv
+	str	r0, [r4, #992]
+	b	.L794
+.L791:
+	ldr	r3, [r4, #1004]
+	cmp	r2, r3
+	bls	.L794
+	ldr	r0, .L818+4
+	adds	r3, r3, #1
+	str	r3, [r4, #1004]
+	movs	r3, #0
+.L796:
+	ldrh	r2, [r0, #2836]
+	cmp	r3, r2
+	bcs	.L794
+	ldr	r1, [r4, #748]
+	ldrh	r2, [r1, r3, lsl #1]
+	adds	r2, r2, #1
+	strh	r2, [r1, r3, lsl #1]	@ movhi
+	adds	r3, r3, #1
+	b	.L796
+.L794:
+	ldr	r6, [r4, #1008]
+	ldr	r8, [r4, #1000]
+	add	r3, r6, #256
+	ldr	r2, .L818
+	cmp	r3, r8
+	bls	.L799
+	ldr	r1, [r2, #1004]
+	add	r3, r6, #768
+	cmp	r3, r1
+	bls	.L799
+	ldr	r3, [r2, #948]
+	cbnz	r3, .L800
+.L802:
+	movw	r0, #65535
+	b	.L801
+.L800:
+	cmp	r6, #30
+	bhi	.L802
+.L799:
+	ldrh	r0, [r4, #784]
+	add	r0, r0, r0, lsl #1
+	ubfx	r0, r0, #2, #16
+	bl	GetFreeBlockMaxEraseCount
+	add	r3, r6, #64
+	cmp	r0, r3
+	mov	r9, r0
+	bcs	.L803
+	cmp	r6, #30
+	bhi	.L802
+.L803:
+	ldr	r3, [r4, #764]
+	ldr	r2, .L818
+	cmp	r3, #0
+	beq	.L802
+	ldr	r1, .L818+4
+	movw	r7, #65535
+	ldr	r0, [r2, #760]
+	mov	ip, #6
+	ldr	r10, [r2, #748]
+	mov	r5, r7
+	ldrh	r1, [r1, #2836]
+	mov	lr, r7
+	str	r1, [sp, #20]
+	movs	r1, #0
+.L804:
+	ldrh	r2, [r3]
+	cmp	r2, lr
+	str	r2, [sp, #16]
+	beq	.L806
+	adds	r1, r1, #1
+	ldr	r2, [sp, #20]
+	uxth	r1, r1
+	cmp	r1, r2
+	bhi	.L802
+	ldrh	fp, [r3, #4]
+	cmp	fp, #0
+	beq	.L805
+	subs	r3, r3, r0
+	ldr	r2, .L818+8
+	asrs	r3, r3, #1
+	muls	r3, r2, r3
+	uxth	r3, r3
+	ldrh	fp, [r10, r3, lsl #1]
+	cmp	fp, r6
+	bls	.L810
+	cmp	fp, r7
+	itt	cc
+	movcc	r7, fp
+	movcc	r5, r3
+.L805:
+	ldr	r3, [sp, #16]
+	mla	r3, ip, r3, r0
+	b	.L804
+.L810:
+	mov	r5, r3
+.L806:
+	movw	r3, #65535
+	cmp	r5, r3
+	beq	.L802
+	ldrh	fp, [r10, r5, lsl #1]
+	lsls	r3, r5, #1
+	cmp	fp, r6
+	bls	.L808
+	str	r3, [sp, #16]
+	bl	GetFreeBlockMinEraseCount
+	ldr	r3, [sp, #16]
+	cmp	r0, r6
+	it	hi
+	strhi	r7, [r4, #1008]
+.L808:
+	cmp	fp, r8
+	bcs	.L802
+	add	r2, fp, #128
+	cmp	r9, r2
+	ble	.L802
+	add	r2, fp, #256
+	cmp	r2, r8
+	bcc	.L809
+	ldr	r2, [r4, #1004]
+	add	fp, fp, #768
+	cmp	fp, r2
+	bcs	.L802
+.L809:
+	ldr	r2, [r4, #768]
+	mov	r1, r5
+	ldr	r0, .L818+12
+	ldrh	r2, [r2, r3]
+	str	r2, [sp]
+	mov	r2, r8
+	ldrh	r3, [r10, r3]
+	str	r9, [sp, #8]
+	str	r3, [sp, #4]
+	ldr	r3, [r4, #1004]
+	bl	printk
+	mov	r0, r5
+	movs	r3, #1
+	str	r3, [r4, #1652]
+.L801:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L819:
+	.align	2
+.L818:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	-1431655765
+	.word	.LC76
+	.fnend
+	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
+	.align	1
+	.global	free_data_superblock
+	.thumb
+	.thumb_func
+	.type	free_data_superblock, %function
+free_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	movw	r2, #65535
+	cmp	r0, r2
+	push	{r3, lr}
+	.save {r3, lr}
+	beq	.L821
+	ldr	r2, .L822
+	movs	r1, #0
+	ldr	r2, [r2, #768]
+	strh	r1, [r2, r0, lsl #1]	@ movhi
+	bl	INSERT_FREE_LIST
+.L821:
+	movs	r0, #0
+	pop	{r3, pc}
+.L823:
+	.align	2
+.L822:
+	.word	.LANCHOR2
+	.fnend
+	.size	free_data_superblock, .-free_data_superblock
+	.align	1
+	.global	FtlGcBufInit
+	.thumb
+	.thumb_func
+	.type	FtlGcBufInit, %function
+FtlGcBufInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L835
+	mov	ip, #36
+	ldr	r0, .L835+4
+	movs	r3, #0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r7, #12
+	mov	lr, #1
+	mov	r6, r0
+	mov	r4, r2
+	str	r3, [r2, #1656]
+.L825:
+	ldrh	r1, [r0, #2828]
+	adds	r5, r3, #1
+	uxth	r3, r3
+	ldr	r8, .L835+4
+	cmp	r3, r1
+	bcs	.L833
+	mul	r8, r7, r3
+	ldr	r9, [r2, #1660]
+	add	r1, r9, r8
+	str	lr, [r1, #8]
+	ldrh	r1, [r0, #2908]
+	muls	r1, r3, r1
+	it	mi
+	addmi	r1, r1, #3
+	bic	r10, r1, #3
+	ldr	r1, [r4, #1664]
+	add	r1, r1, r10
+	str	r1, [r9, r8]
+	ldr	r10, [r2, #1660]
+	ldrh	r1, [r6, #2910]
+	muls	r1, r3, r1
+	it	mi
+	addmi	r1, r1, #3
+	add	r9, r10, r8
+	bic	fp, r1, #3
+	ldr	r1, [r4, #1668]
+	add	r1, r1, fp
+	str	r1, [r9, #4]
+	ldr	r1, [r2, #1672]
+	mla	r3, ip, r3, r1
+	ldr	r1, [r10, r8]
+	str	r1, [r3, #8]
+	ldr	r1, [r9, #4]
+	str	r1, [r3, #12]
+	mov	r3, r5
+	b	.L825
+.L833:
+	ldr	r0, .L835
+	mov	lr, #12
+	movs	r5, #0
+.L829:
+	ldr	r3, [r2, #1676]
+	cmp	r1, r3
+	bcs	.L834
+	mul	r7, lr, r1
+	ldr	r6, [r0, #1660]
+	ldr	r4, [r0, #1664]
+	adds	r3, r6, r7
+	str	r5, [r3, #8]
+	ldrh	r3, [r8, #2908]
+	muls	r3, r1, r3
+	it	mi
+	addmi	r3, r3, #3
+	bic	r3, r3, #3
+	add	r3, r3, r4
+	str	r3, [r6, r7]
+	ldr	r3, [r2, #1660]
+	ldr	r6, [r0, #1668]
+	add	r7, r7, r3
+	ldrh	r3, [r8, #2910]
+	muls	r3, r1, r3
+	add	r1, r1, #1
+	it	mi
+	addmi	r3, r3, #3
+	bic	r3, r3, #3
+	uxth	r1, r1
+	add	r3, r3, r6
+	str	r3, [r7, #4]
+	b	.L829
+.L834:
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L836:
+	.align	2
+.L835:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGcBufInit, .-FtlGcBufInit
+	.align	1
+	.global	FtlGcBufFree
+	.thumb
+	.thumb_func
+	.type	FtlGcBufFree, %function
+FtlGcBufFree:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L844
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movs	r5, #0
+	ldr	lr, [r3, #1676]
+	mov	r10, #36
+	ldr	r6, [r3, #1660]
+	mov	r8, #12
+	mov	ip, r5
+.L838:
+	uxth	r4, r5
+	cmp	r4, r1
+	bcs	.L837
+	mla	r4, r10, r4, r0
+	movs	r2, #0
+.L839:
+	uxth	r3, r2
+	cmp	r3, lr
+	bcs	.L840
+	mul	r3, r8, r3
+	ldr	r7, [r4, #8]
+	adds	r2, r2, #1
+	add	r9, r6, r3
+	ldr	r3, [r6, r3]
+	cmp	r3, r7
+	bne	.L839
+	str	ip, [r9, #8]
+.L840:
+	adds	r5, r5, #1
+	b	.L838
+.L837:
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L845:
+	.align	2
+.L844:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcBufFree, .-FtlGcBufFree
+	.align	1
+	.global	FtlGcBufAlloc
+	.thumb
+	.thumb_func
+	.type	FtlGcBufAlloc, %function
+FtlGcBufAlloc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L854
+	mov	ip, #1
+	push	{r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	movs	r4, #0
+	ldr	r5, [r3, #1676]
+	mov	lr, #12
+	ldr	r6, [r3, #1660]
+	mov	r8, #36
+.L847:
+	uxth	r2, r4
+	cmp	r2, r1
+	bcs	.L853
+	mov	r9, #0
+.L848:
+	uxth	r3, r9
+	cmp	r3, r5
+	bcs	.L849
+	mla	r3, lr, r3, r6
+	add	r9, r9, #1
+	ldr	r7, [r3, #8]
+	cmp	r7, #0
+	bne	.L848
+	mla	r2, r8, r2, r0
+	ldr	r7, [r3]
+	str	ip, [r3, #8]
+	str	r7, [r2, #8]
+	ldr	r3, [r3, #4]
+	str	r3, [r2, #12]
+.L849:
+	adds	r4, r4, #1
+	b	.L847
+.L853:
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L855:
+	.align	2
+.L854:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
+	.align	1
+	.global	IsBlkInGcList
+	.thumb
+	.thumb_func
+	.type	IsBlkInGcList, %function
+IsBlkInGcList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L862
+	ldr	r3, [r2, #1680]
+	ldrh	r2, [r2, #1684]
+	add	r2, r3, r2, lsl #1
+.L857:
+	cmp	r3, r2
+	beq	.L861
+	ldrh	r1, [r3], #2
+	cmp	r1, r0
+	bne	.L857
+	movs	r0, #1
+	bx	lr
+.L861:
+	movs	r0, #0
+	bx	lr
+.L863:
+	.align	2
+.L862:
+	.word	.LANCHOR2
+	.fnend
+	.size	IsBlkInGcList, .-IsBlkInGcList
+	.align	1
+	.global	FtlGcUpdatePage
+	.thumb
+	.thumb_func
+	.type	FtlGcUpdatePage, %function
+FtlGcUpdatePage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r6, r0
+	ubfx	r0, r0, #10, #16
+	mov	r7, r1
+	mov	r8, r2
+	bl	P2V_block_in_plane
+	ldr	r3, .L871
+	movs	r4, #0
+	ldrh	r1, [r3, #1684]
+	ldr	r2, [r3, #1680]
+.L865:
+	uxth	r5, r4
+	cmp	r5, r1
+	bcs	.L869
+	adds	r4, r4, #1
+	add	lr, r2, r4, lsl #1
+	ldrh	lr, [lr, #-2]
+	cmp	lr, r0
+	bne	.L865
+.L869:
+	cmp	r5, r1
+	bne	.L867
+	strh	r0, [r2, r5, lsl #1]	@ movhi
+	ldrh	r0, [r3, #1684]
+	adds	r0, r0, #1
+	strh	r0, [r3, #1684]	@ movhi
+.L867:
+	ldrh	r2, [r3, #1692]
+	movs	r0, #12
+	muls	r0, r2, r0
+	ldr	r2, [r3, #1688]
+	adds	r1, r2, r0
+	str	r7, [r1, #4]
+	str	r8, [r1, #8]
+	str	r6, [r2, r0]
+	ldrh	r2, [r3, #1692]
+	adds	r2, r2, #1
+	strh	r2, [r3, #1692]	@ movhi
+	pop	{r4, r5, r6, r7, r8, pc}
+.L872:
+	.align	2
+.L871:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
+	.align	1
+	.global	FtlGcRefreshOpenBlock
+	.thumb
+	.thumb_func
+	.type	FtlGcRefreshOpenBlock, %function
+FtlGcRefreshOpenBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r1, r4
+	ldr	r0, .L876
+	bl	printk
+	ldr	r3, .L876+4
+	ldrh	r0, [r3, #1694]
+	cmp	r0, r4
+	beq	.L874
+	ldrh	r1, [r3, #1696]
+	cmp	r1, r4
+	beq	.L874
+	movw	r2, #65535
+	cmp	r0, r2
+	bne	.L875
+	strh	r4, [r3, #1694]	@ movhi
+	b	.L874
+.L875:
+	cmp	r1, r2
+	it	eq
+	strheq	r4, [r3, #1696]	@ movhi
+.L874:
+	movs	r0, #0
+	pop	{r4, pc}
+.L877:
+	.align	2
+.L876:
+	.word	.LC77
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcRefreshOpenBlock, .-FtlGcRefreshOpenBlock
+	.align	1
+	.global	FtlGcRefreshBlock
+	.thumb
+	.thumb_func
+	.type	FtlGcRefreshBlock, %function
+FtlGcRefreshBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	mov	r1, r4
+	ldr	r0, .L881
+	bl	printk
+	ldr	r3, .L881+4
+	ldrh	r0, [r3, #1694]
+	cmp	r0, r4
+	beq	.L879
+	ldrh	r1, [r3, #1696]
+	cmp	r1, r4
+	beq	.L879
+	movw	r2, #65535
+	cmp	r0, r2
+	bne	.L880
+	strh	r4, [r3, #1694]	@ movhi
+	b	.L879
+.L880:
+	cmp	r1, r2
+	it	eq
+	strheq	r4, [r3, #1696]	@ movhi
+.L879:
+	movs	r0, #0
+	pop	{r4, pc}
+.L882:
+	.align	2
+.L881:
+	.word	.LC77
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
+	.align	1
+	.global	FtlGcMarkBadPhyBlk
+	.thumb
+	.thumb_func
+	.type	FtlGcMarkBadPhyBlk, %function
+FtlGcMarkBadPhyBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r5, r0
+	bl	P2V_block_in_plane
+	ldr	r4, .L892
+	mov	r2, r5
+	ldrh	r1, [r4, #1698]
+	mov	r6, r0
+	ldr	r0, .L892+4
+	bl	printk
+	mov	r0, r6
+	bl	FtlGcRefreshBlock
+	ldr	r2, [r4, #948]
+	mov	r3, r4
+	cbz	r2, .L884
+	ldr	r1, [r4, #748]
+	ldrh	r2, [r1, r6, lsl #1]
+	cmp	r2, #29
+	itt	hi
+	subhi	r2, r2, #30
+	strhhi	r2, [r1, r6, lsl #1]	@ movhi
+.L884:
+	ldrh	r2, [r3, #1698]
+	movs	r1, #0
+	ldr	r4, .L892+8
+.L885:
+	uxth	r0, r1
+	cmp	r0, r2
+	bcs	.L891
+	adds	r1, r1, #1
+	add	r0, r4, r1, lsl #1
+	ldrh	r0, [r0, #-2]
+	cmp	r0, r5
+	bne	.L885
+	b	.L886
+.L891:
+	cmp	r2, #15
+	itttt	ls
+	addls	r1, r2, #1
+	strhls	r1, [r3, #1698]	@ movhi
+	addls	r3, r3, r2, lsl #1
+	strhls	r5, [r3, #1700]	@ movhi
+.L886:
+	movs	r0, #0
+	pop	{r4, r5, r6, pc}
+.L893:
+	.align	2
+.L892:
+	.word	.LANCHOR2
+	.word	.LC78
+	.word	.LANCHOR2+1700
+	.fnend
+	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
+	.align	1
+	.global	FtlGcReFreshBadBlk
+	.thumb
+	.thumb_func
+	.type	FtlGcReFreshBadBlk, %function
+FtlGcReFreshBadBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	ldr	r4, .L900
+	ldrh	r3, [r4, #1698]
+	cbz	r3, .L895
+	ldrh	r1, [r4, #1694]
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L895
+	ldrh	r2, [r4, #1734]
+	cmp	r2, r3
+	itt	cs
+	movcs	r3, #0
+	strhcs	r3, [r4, #1734]	@ movhi
+	ldrh	r3, [r4, #1734]
+	add	r3, r4, r3, lsl #1
+	ldrh	r0, [r3, #1700]
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	ldrh	r3, [r4, #1734]
+	adds	r3, r3, #1
+	strh	r3, [r4, #1734]	@ movhi
+.L895:
+	movs	r0, #0
+	pop	{r4, pc}
+.L901:
+	.align	2
+.L900:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
+	.align	1
+	.global	ftl_memset
+	.thumb
+	.thumb_func
+	.type	ftl_memset, %function
+ftl_memset:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	mov	r4, r0
+	cbz	r2, .L903
+	bl	memset
+.L903:
+	mov	r0, r4
+	pop	{r4, pc}
+	.fnend
+	.size	ftl_memset, .-ftl_memset
+	.align	1
+	.global	FtlMemInit
+	.thumb
+	.thumb_func
+	.type	FtlMemInit, %function
+FtlMemInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	mov	r0, #1024
+	ldr	r4, .L1011
+	movs	r6, #0
+	ldr	r5, .L1011+4
+	movw	r3, #65535
+	movs	r7, #12
+	mov	r8, #36
+	strh	r6, [r4, #1736]	@ movhi
+	ldrh	r1, [r5, #2904]
+	str	r6, [r4, #1740]
+	str	r6, [r4, #1124]
+	str	r6, [r4, #984]
+	str	r6, [r4, #988]
+	str	r6, [r4, #972]
+	str	r6, [r4, #960]
+	str	r6, [r4, #956]
+	str	r6, [r4, #964]
+	str	r6, [r4, #968]
+	str	r6, [r4, #952]
+	str	r6, [r4, #992]
+	str	r6, [r4, #996]
+	str	r6, [r4, #752]
+	str	r6, [r4, #1004]
+	str	r6, [r4, #1008]
+	str	r6, [r4, #1744]
+	str	r6, [r4, #1652]
+	str	r3, [r4, #1748]
+	str	r6, [r4, #1752]
+	str	r6, [r4, #1644]
+	str	r6, [r5, #2964]
+	strh	r3, [r4, #1694]	@ movhi
+	strh	r3, [r4, #1696]	@ movhi
+	movs	r3, #32
+	strh	r6, [r4, #1648]	@ movhi
+	strh	r3, [r4, #1640]	@ movhi
+	movs	r3, #128
+	strh	r6, [r4, #1698]	@ movhi
+	strh	r3, [r4, #1642]	@ movhi
+	strh	r6, [r4, #1756]	@ movhi
+	strh	r6, [r4, #1734]	@ movhi
+	bl	__aeabi_idiv
+	ldrh	r3, [r5, #2828]
+	str	r6, [r5, #2952]
+	lsls	r3, r3, #2
+	cmp	r0, r3
+	str	r0, [r4, #1760]
+	ldrh	r0, [r5, #2902]
+	it	hi
+	strhi	r3, [r4, #1760]
+	lsls	r0, r0, #1
+	bl	ftl_malloc
+	str	r0, [r4, #1680]
+	ldrh	r0, [r5, #2902]
+	muls	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r6, [r5, #2828]
+	mul	r6, r8, r6
+	lsl	r9, r6, #3
+	str	r0, [r4, #1688]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #1764]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1768]
+	mov	r0, r9
+	bl	ftl_malloc
+	str	r0, [r4, #1772]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #744]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1672]
+	ldr	r0, [r4, #1760]
+	mul	r0, r8, r0
+	bl	ftl_malloc
+	ldrh	r6, [r5, #2908]
+	ldrh	r3, [r5, #2828]
+	lsls	r3, r3, #1
+	adds	r3, r3, #1
+	str	r3, [r4, #1676]
+	str	r0, [r5, #2956]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #756]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1776]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1780]
+	ldr	r0, [r4, #1676]
+	muls	r0, r6, r0
+	bl	ftl_malloc
+	str	r0, [r4, #1664]
+	ldr	r0, [r4, #1760]
+	muls	r0, r6, r0
+	bl	ftl_malloc
+	str	r0, [r4, #1784]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1788]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1792]
+	ldr	r0, [r4, #1676]
+	muls	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r3, [r5, #2828]
+	ldrh	r6, [r5, #2910]
+	muls	r6, r3, r6
+	str	r0, [r4, #1660]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1796]
+	lsls	r0, r6, #3
+	bl	ftl_malloc
+	ldrh	r3, [r5, #2910]
+	str	r0, [r4, #1800]
+	ldr	r0, [r4, #1676]
+	muls	r0, r3, r0
+	bl	ftl_malloc
+	ldrh	r3, [r5, #2910]
+	str	r0, [r4, #1668]
+	ldr	r0, [r4, #1760]
+	muls	r0, r3, r0
+	bl	ftl_malloc
+	str	r0, [r4, #1804]
+	ldrh	r0, [r5, #2838]
+	lsls	r0, r0, #1
+	uxth	r0, r0
+	strh	r0, [r4, #1808]	@ movhi
+	bl	ftl_malloc
+	str	r0, [r4, #1812]
+	ldrh	r0, [r4, #1808]
+	addw	r0, r0, #547
+	lsrs	r0, r0, #9
+	strh	r0, [r4, #1808]	@ movhi
+	lsls	r0, r0, #9
+	bl	ftl_malloc
+	ldrh	r6, [r5, #2838]
+	lsls	r6, r6, #1
+	str	r0, [r4, #1816]
+	adds	r0, r0, #32
+	str	r0, [r4, #748]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1820]
+	mov	r0, r6
+	bl	ftl_malloc
+	ldr	r6, [r5, #2928]
+	lsls	r6, r6, #1
+	str	r0, [r4, #768]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1824]
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1828]
+	ldrh	r0, [r5, #2838]
+	lsrs	r0, r0, #3
+	adds	r0, r0, #4
+	bl	ftl_malloc
+	str	r0, [r4, #944]
+	ldrh	r0, [r5, #2920]
+	lsls	r0, r0, #1
+	bl	ftl_malloc
+	str	r0, [r5, #2948]
+	ldrh	r0, [r5, #2920]
+	lsls	r0, r0, #1
+	bl	ftl_malloc
+	str	r0, [r4, #1832]
+	ldrh	r0, [r5, #2920]
+	lsls	r0, r0, #2
+	bl	ftl_malloc
+	str	r0, [r4, #1836]
+	ldrh	r0, [r5, #2922]
+	lsls	r0, r0, #2
+	bl	ftl_malloc
+	ldrh	r2, [r5, #2922]
+	movs	r1, #0
+	lsls	r2, r2, #2
+	str	r0, [r4, #1840]
+	bl	ftl_memset
+	ldrh	r6, [r5, #2936]
+	lsls	r6, r6, #2
+	mov	r0, r6
+	bl	ftl_malloc
+	str	r0, [r4, #1844]
+	mov	r0, r6
+	bl	ftl_malloc
+	ldr	r6, .L1011+8
+	str	r0, [r4, #1848]
+	ldr	r0, [r5, #2928]
+	lsls	r0, r0, #2
+	bl	ftl_malloc
+	str	r0, [r4, #1852]
+	ldrh	r0, [r5, #2938]
+	muls	r0, r7, r0
+	bl	ftl_malloc
+	ldrh	r3, [r5, #2938]
+	str	r0, [r4, #932]
+	ldrh	r0, [r5, #2908]
+	muls	r0, r3, r0
+	bl	ftl_malloc
+	ldrh	r3, [r5, #2838]
+	str	r0, [r4, #1856]
+	movs	r0, #6
+	muls	r0, r3, r0
+	bl	ftl_malloc
+	ldrh	r3, [r5, #2894]
+	adds	r3, r3, #31
+	asrs	r3, r3, #5
+	strh	r3, [r4, #1860]	@ movhi
+	str	r0, [r4, #760]
+	ldrh	r0, [r5, #2850]
+	muls	r0, r3, r0
+	lsls	r0, r0, #2
+	bl	ftl_malloc
+	ldrh	r2, [r4, #1860]
+	ldrh	r7, [r5, #2850]
+	movs	r3, #1
+	lsls	r2, r2, #2
+	mov	r1, r2
+	str	r0, [r5, #2996]
+.L909:
+	cmp	r3, r7
+	bcs	.L1009
+	ldr	r0, [r5, #2996]
+	adds	r3, r3, #1
+	add	r0, r0, r1
+	add	r1, r1, r2
+	str	r0, [r6, #4]!
+	b	.L909
+.L1009:
+	ldr	r2, .L1011+12
+	movs	r1, #0
+.L911:
+	cmp	r3, #8
+	beq	.L1010
+	add	r0, r2, r3, lsl #2
+	adds	r3, r3, #1
+	str	r1, [r0, #28]
+	b	.L911
+.L1010:
+	ldr	r2, [r4, #1824]
+	ldr	r3, .L1011
+	cbnz	r2, .L913
+.L915:
+	ldr	r1, .L1011+16
+	ldr	r0, .L1011+20
+	bl	printk
+	mov	r0, #-1
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L1012:
+	.align	2
+.L1011:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR0+2996
+	.word	.LANCHOR0+2968
+	.word	.LANCHOR3
+	.word	.LC79
+.L913:
+	ldr	r2, [r3, #1828]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1844]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1852]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #932]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1856]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #760]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r5, #2996]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r3, [r3, #768]
+	cmp	r3, #0
+	beq	.L915
+	ldr	r2, [r4, #1680]
+	ldr	r3, .L1013
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1688]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1764]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1772]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #744]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1672]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1768]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #756]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1776]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r3, [r3, #1780]
+	cmp	r3, #0
+	beq	.L915
+	ldr	r2, [r4, #1664]
+	ldr	r3, .L1013
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1788]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1792]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1660]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1796]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1800]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1668]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #748]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r3, [r3, #1812]
+	cmp	r3, #0
+	beq	.L915
+	ldr	r3, .L1013+4
+	ldr	r3, [r3, #2948]
+	cmp	r3, #0
+	beq	.L915
+	ldr	r3, .L1013
+	ldr	r2, [r3, #1832]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r2, [r3, #1836]
+	cmp	r2, #0
+	beq	.L915
+	ldr	r3, [r3, #1840]
+	cmp	r3, #0
+	beq	.L915
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L1014:
+	.align	2
+.L1013:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlMemInit, .-FtlMemInit
+	.align	1
+	.global	FtlBbt2Bitmap
+	.thumb
+	.thumb_func
+	.type	FtlBbt2Bitmap, %function
+FtlBbt2Bitmap:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r4, r0
+	ldr	r3, .L1020
+	mov	r0, r1
+	mov	r5, r1
+	movs	r1, #0
+	movs	r6, #1
+	movw	r7, #65535
+	ldrh	r2, [r3, #1860]
+	lsls	r2, r2, #2
+	bl	ftl_memset
+	subs	r2, r4, #2
+	addw	r4, r4, #1022
+.L1017:
+	ldrh	r3, [r2, #2]!
+	cmp	r3, r7
+	beq	.L1015
+	lsrs	r1, r3, #5
+	cmp	r2, r4
+	and	r3, r3, #31
+	ldr	r0, [r5, r1, lsl #2]
+	lsl	r3, r6, r3
+	orr	r3, r3, r0
+	str	r3, [r5, r1, lsl #2]
+	bne	.L1017
+.L1015:
+	pop	{r3, r4, r5, r6, r7, pc}
+.L1021:
+	.align	2
+.L1020:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
+	.align	1
+	.global	ftl_free_no_use_map_blk
+	.thumb
+	.thumb_func
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r4, r0
+	ldrh	r2, [r0, #10]
+	movs	r1, #0
+	ldr	r6, [r0, #20]
+	ldr	r9, [r0, #12]
+	ldr	r5, [r0, #24]
+	lsls	r2, r2, #1
+	mov	r0, r6
+	bl	ftl_memset
+	movs	r2, #0
+.L1023:
+	ldrh	r1, [r4, #6]
+	uxth	r3, r2
+	cmp	r1, r3
+	bls	.L1036
+	ldr	r0, [r5, r3, lsl #2]
+	movs	r1, #0
+	ubfx	r0, r0, #10, #16
+.L1024:
+	ldrh	r7, [r4, #10]
+	uxth	r3, r1
+	cmp	r7, r3
+	bls	.L1037
+	ldrh	r7, [r9, r3, lsl #1]
+	adds	r1, r1, #1
+	cmp	r7, r0
+	ittt	eq
+	ldrheq	r7, [r6, r3, lsl #1]
+	addeq	r7, r7, #1
+	strheq	r7, [r6, r3, lsl #1]	@ movhi
+	b	.L1024
+.L1037:
+	adds	r2, r2, #1
+	b	.L1023
+.L1036:
+	movs	r7, #0
+	ldrh	fp, [r6]
+	ldr	r2, .L1039
+	mov	r10, r7
+.L1028:
+	ldrh	r3, [r4, #10]
+	uxth	r5, r7
+	cmp	r3, r5
+	bls	.L1038
+	ldrh	r3, [r4]
+	cmp	r3, r5
+	bne	.L1029
+	ldrh	r3, [r2, #2900]
+	ldrh	r1, [r4, #2]
+	cmp	r1, r3
+	it	cc
+	strhcc	r3, [r6, r5, lsl #1]	@ movhi
+.L1029:
+	ldrh	r8, [r6, r5, lsl #1]
+	cmp	fp, r8
+	itt	hi
+	movhi	r10, r5
+	movhi	fp, r8
+	cmp	r8, #0
+	bne	.L1031
+	ldrh	r0, [r9, r5, lsl #1]
+	cbz	r0, .L1031
+	movs	r1, #1
+	str	r2, [sp, #4]
+	bl	FtlFreeSysBlkQueueIn
+	strh	r8, [r9, r5, lsl #1]	@ movhi
+	ldrh	r3, [r4, #8]
+	subs	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldr	r2, [sp, #4]
+.L1031:
+	adds	r7, r7, #1
+	b	.L1028
+.L1038:
+	mov	r0, r10
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1040:
+	.align	2
+.L1039:
+	.word	.LANCHOR0
+	.fnend
+	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
+	.align	1
+	.global	FtlL2PDataInit
+	.thumb
+	.thumb_func
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	movs	r1, #0
+	ldr	r4, .L1045
+	movs	r7, #0
+	ldr	r5, .L1045+4
+	mov	r6, r7
+	ldr	r2, [r4, #2928]
+	mov	r9, r4
+	ldr	r0, [r5, #1828]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r3, [r4, #2908]
+	ldrh	r2, [r4, #2938]
+	movs	r1, #255
+	ldr	r0, [r5, #1856]
+	muls	r2, r3, r2
+	bl	ftl_memset
+	mov	r3, r5
+	movs	r5, #12
+	mov	r2, r4
+	movw	lr, #65535
+.L1042:
+	ldrh	ip, [r2, #2938]
+	adds	r0, r7, #1
+	uxth	r7, r7
+	ldr	r1, .L1045
+	cmp	ip, r7
+	bls	.L1044
+	mul	r1, r5, r7
+	ldr	ip, [r3, #932]
+	add	r8, ip, r1
+	str	r6, [r8, #4]
+	strh	lr, [ip, r1]	@ movhi
+	ldr	r4, [r3, #932]
+	add	ip, r4, r1
+	ldrh	r1, [r9, #2908]
+	muls	r1, r7, r1
+	ldr	r7, [r3, #1856]
+	bic	r1, r1, #3
+	add	r1, r1, r7
+	mov	r7, r0
+	str	r1, [ip, #8]
+	b	.L1042
+.L1044:
+	ldr	r0, [r1, #2928]
+	movw	r2, #65535
+	ldrh	r1, [r1, #2936]
+	strh	r2, [r3, #1866]	@ movhi
+	strh	r0, [r3, #1874]	@ movhi
+	movw	r0, #61634
+	strh	r1, [r3, #1870]	@ movhi
+	ldr	r1, [r3, #1824]
+	strh	r0, [r3, #1868]	@ movhi
+	ldrh	r0, [r3, #1908]
+	str	r1, [r3, #1876]
+	ldr	r1, [r3, #1852]
+	strh	r2, [r3, #1864]	@ movhi
+	strh	r0, [r3, #1872]	@ movhi
+	str	r1, [r3, #1880]
+	ldr	r1, [r3, #1828]
+	strh	r2, [r3, #1904]	@ movhi
+	str	r1, [r3, #1884]
+	ldr	r1, [r3, #1844]
+	str	r1, [r3, #1888]
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L1046:
+	.align	2
+.L1045:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
+	.align	1
+	.global	FtlVariablesInit
+	.thumb
+	.thumb_func
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r5, #0
+	ldr	r6, .L1048
+	movw	r3, #65535
+	ldr	r4, .L1048+4
+	mov	r1, r5
+	ldrh	r2, [r6, #2920]
+	ldr	r0, [r6, #2948]
+	strh	r3, [r4, #1916]	@ movhi
+	mov	r3, #-1
+	lsls	r2, r2, #1
+	str	r3, [r4, #1928]
+	str	r5, [r4, #1912]
+	str	r5, [r4, #1920]
+	str	r5, [r4, #1924]
+	str	r5, [r4, #948]
+	strh	r5, [r6, #2946]	@ movhi
+	bl	ftl_memset
+	ldrh	r2, [r6, #2838]
+	mov	r1, r5
+	ldr	r0, [r4, #748]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r6, #2838]
+	mov	r1, r5
+	ldr	r0, [r4, #1812]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	add	r0, r4, #1012
+	movs	r1, #48
+	bl	__memzero
+	add	r0, r4, #1128
+	mov	r1, #512
+	bl	__memzero
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L1049:
+	.align	2
+.L1048:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlVariablesInit, .-FtlVariablesInit
+	.align	1
+	.global	SupperBlkListInit
+	.thumb
+	.thumb_func
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r2, #6
+	ldr	r6, .L1061
+	movs	r5, #0
+	ldr	r4, .L1061+4
+	.pad #20
+	sub	sp, sp, #20
+	movs	r1, #0
+	mov	r9, r5
+	ldrh	r3, [r6, #2838]
+	mov	r10, r5
+	ldr	r0, [r4, #760]
+	mov	r8, r6
+	muls	r2, r3, r2
+	bl	ftl_memset
+	str	r5, [r4, #780]
+	str	r5, [r4, #764]
+	str	r5, [r4, #772]
+	strh	r5, [r4, #776]	@ movhi
+	strh	r5, [r4, #784]	@ movhi
+	strh	r5, [r4, #1736]	@ movhi
+.L1051:
+	uxth	fp, r5
+	ldrh	r2, [r8, #2836]
+	sxth	r7, fp
+	cmp	r7, r2
+	bge	.L1058
+	ldr	r3, .L1061
+	movs	r2, #0
+	mov	r6, r2
+	ldrh	ip, [r3, #2828]
+	ldrh	r3, [r3, #2898]
+	str	r3, [sp, #4]
+.L1059:
+	sxth	r1, r2
+	cmp	r1, ip
+	bge	.L1060
+	add	r1, r1, r8
+	str	r2, [sp, #12]
+	str	ip, [sp, #8]
+	ldrb	r0, [r1, #2856]	@ zero_extendqisi2
+	mov	r1, fp
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	ldr	ip, [sp, #8]
+	ldr	r2, [sp, #12]
+	cbnz	r0, .L1052
+	ldr	r3, [sp, #4]
+	add	r6, r6, r3
+	uxth	r6, r6
+.L1052:
+	adds	r2, r2, #1
+	b	.L1059
+.L1060:
+	cbz	r6, .L1054
+	sxth	r1, r6
+	mov	r0, #32768
+	bl	__aeabi_idiv
+	uxth	r6, r0
+	b	.L1055
+.L1054:
+	ldr	r1, [r4, #768]
+	sxth	r2, fp
+	movw	r0, #65535
+	strh	r0, [r1, r2, lsl #1]	@ movhi
+.L1055:
+	add	r0, r7, r7, lsl #1
+	ldr	r1, [r4, #760]
+	ldr	r2, .L1061+4
+	add	r1, r1, r0, lsl #1
+	strh	r6, [r1, #4]	@ movhi
+	ldrh	r1, [r4, #788]
+	cmp	r7, r1
+	beq	.L1056
+	ldrh	r1, [r2, #836]
+	cmp	r7, r1
+	beq	.L1056
+	ldrh	r1, [r2, #884]
+	cmp	r7, r1
+	beq	.L1056
+	ldr	r2, [r2, #768]
+	ldrh	r2, [r2, r7, lsl #1]
+	cbnz	r2, .L1057
+	add	r9, r9, #1
+	mov	r0, fp
+	uxth	r9, r9
+	bl	INSERT_FREE_LIST
+	b	.L1056
+.L1057:
+	add	r10, r10, #1
+	mov	r0, fp
+	uxth	r10, r10
+	bl	INSERT_DATA_LIST
+.L1056:
+	adds	r5, r5, #1
+	b	.L1051
+.L1058:
+	movs	r0, #0
+	strh	r10, [r4, #776]	@ movhi
+	strh	r9, [r4, #784]	@ movhi
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1062:
+	.align	2
+.L1061:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	SupperBlkListInit, .-SupperBlkListInit
+	.align	1
+	.global	FtlGcPageVarInit
+	.thumb
+	.thumb_func
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r1, #255
+	ldr	r5, .L1064
+	movs	r3, #0
+	ldr	r4, .L1064+4
+	ldrh	r2, [r5, #2902]
+	ldr	r0, [r4, #1680]
+	strh	r3, [r4, #1684]	@ movhi
+	lsls	r2, r2, #1
+	strh	r3, [r4, #1692]	@ movhi
+	bl	ftl_memset
+	ldrh	r3, [r5, #2902]
+	movs	r2, #12
+	ldr	r0, [r4, #1688]
+	movs	r1, #255
+	muls	r2, r3, r2
+	bl	ftl_memset
+	pop	{r3, r4, r5, lr}
+	b	FtlGcBufInit
+.L1065:
+	.align	2
+.L1064:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	1
+	.global	ftl_memcpy
+	.thumb
+	.thumb_func
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memcpy
+	.fnend
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	1
+	.global	FlashReadIdbData
+	.thumb
+	.thumb_func
+	.type	FlashReadIdbData, %function
+FlashReadIdbData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	mov	r2, #2048
+	ldr	r1, .L1068
+	bl	ftl_memcpy
+	movs	r0, #0
+	pop	{r3, pc}
+.L1069:
+	.align	2
+.L1068:
+	.word	.LANCHOR2+1932
+	.fnend
+	.size	FlashReadIdbData, .-FlashReadIdbData
+	.align	1
+	.global	FlashLoadPhyInfoInRam
+	.thumb
+	.thumb_func
+	.type	FlashLoadPhyInfoInRam, %function
+FlashLoadPhyInfoInRam:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r4, #0
+	ldr	r6, .L1082
+.L1074:
+	mov	r0, r6
+	ldr	r1, .L1082+4
+	ldrb	r2, [r6, #-1]	@ zero_extendqisi2
+	bl	FlashMemCmp8
+	mov	r5, r0
+	cbnz	r0, .L1071
+	ldr	r3, .L1082+8
+	lsls	r4, r4, #5
+	add	r2, r3, #508
+	adds	r6, r2, r4
+	beq	.L1077
+	add	r4, r4, r3
+	addw	r3, r3, #2812
+	ldrb	r2, [r4, #530]	@ zero_extendqisi2
+	mov	r4, r0
+	b	.L1076
+.L1071:
+	adds	r4, r4, #1
+	adds	r6, r6, #32
+	cmp	r4, #72
+	bne	.L1074
+	b	.L1077
+.L1081:
+	adds	r4, r4, #1
+	cmp	r4, #4
+	beq	.L1075
+.L1076:
+	lsls	r1, r4, #5
+	ldrb	r1, [r1, r3]	@ zero_extendqisi2
+	cmp	r1, r2
+	bne	.L1081
+.L1075:
+	ldr	r1, .L1082+12
+	movs	r2, #32
+	ldr	r0, .L1082+16
+	add	r1, r1, r4, lsl #5
+	bl	ftl_memcpy
+	mov	r1, r6
+	movs	r2, #32
+	ldr	r0, .L1082+20
+	bl	ftl_memcpy
+	b	.L1072
+.L1077:
+	mov	r5, #-1
+.L1072:
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L1083:
+	.align	2
+.L1082:
+	.word	.LANCHOR1+509
+	.word	.LANCHOR0+1792
+	.word	.LANCHOR1
+	.word	.LANCHOR1+2812
+	.word	.LANCHOR0+44
+	.word	.LANCHOR1+256
+	.fnend
+	.size	FlashLoadPhyInfoInRam, .-FlashLoadPhyInfoInRam
+	.align	1
+	.global	NandcCopy1KB
+	.thumb
+	.thumb_func
+	.type	NandcCopy1KB, %function
+NandcCopy1KB:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	cmp	r1, #1
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r2
+	add	r2, r0, #4096
+	ldr	r6, [sp, #16]
+	add	r5, r0, #512
+	add	r2, r2, r4, lsl #9
+	bne	.L1085
+	cbz	r3, .L1086
+	mov	r0, r2
+	mov	r1, r3
+	mov	r2, #1024
+	bl	ftl_memcpy
+.L1086:
+	cbz	r6, .L1084
+	ldrb	r3, [r6, #2]	@ zero_extendqisi2
+	lsrs	r4, r4, #1
+	ldrb	r2, [r6, #1]	@ zero_extendqisi2
+	add	r4, r4, r4, lsl #1
+	lsls	r3, r3, #16
+	orr	r2, r3, r2, lsl #8
+	ldrb	r3, [r6]	@ zero_extendqisi2
+	lsls	r4, r4, #2
+	orrs	r3, r3, r2
+	ldrb	r2, [r6, #3]	@ zero_extendqisi2
+	orr	r3, r3, r2, lsl #24
+	str	r3, [r5, r4, lsl #2]
+	pop	{r4, r5, r6, pc}
+.L1085:
+	cbz	r3, .L1089
+	mov	r1, r2
+	mov	r0, r3
+	mov	r2, #1024
+	bl	ftl_memcpy
+.L1089:
+	cbz	r6, .L1084
+	lsrs	r4, r4, #1
+	add	r4, r4, r4, lsl #1
+	lsls	r4, r4, #2
+	ldr	r3, [r5, r4, lsl #2]
+	lsrs	r2, r3, #8
+	strb	r3, [r6]
+	strb	r2, [r6, #1]
+	lsrs	r2, r3, #16
+	lsrs	r3, r3, #24
+	strb	r2, [r6, #2]
+	strb	r3, [r6, #3]
+.L1084:
+	pop	{r4, r5, r6, pc}
+	.fnend
+	.size	NandcCopy1KB, .-NandcCopy1KB
+	.align	1
+	.global	ftl_memcmp
+	.thumb
+	.thumb_func
+	.type	ftl_memcmp, %function
+ftl_memcmp:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	memcmp
+	.fnend
+	.size	ftl_memcmp, .-ftl_memcmp
+	.align	1
+	.global	FlashSramLoadStore
+	.thumb
+	.thumb_func
+	.type	FlashSramLoadStore, %function
+FlashSramLoadStore:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r5, r0
+	ldr	r4, .L1104
+	ldr	r4, [r4, #3980]
+	add	r4, r4, #4096
+	add	r1, r1, r4
+	cbz	r2, .L1103
+	mov	r0, r1
+	mov	r1, r5
+.L1103:
+	mov	r2, r3
+	pop	{r4, r5, lr}
+	b	ftl_memcpy
+.L1105:
+	.align	2
+.L1104:
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashSramLoadStore, .-FlashSramLoadStore
+	.align	1
+	.global	FlashCs123Init
+	.thumb
+	.thumb_func
+	.type	FlashCs123Init, %function
+FlashCs123Init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	bx	lr
+	.fnend
+	.size	FlashCs123Init, .-FlashCs123Init
+	.align	1
+	.global	rk_nand_de_init
+	.thumb
+	.thumb_func
+	.type	rk_nand_de_init, %function
+rk_nand_de_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FlashDeInit
+	.fnend
+	.size	rk_nand_de_init, .-rk_nand_de_init
+	.align	1
+	.global	rk_nand_suspend
+	.thumb
+	.thumb_func
+	.type	rk_nand_suspend, %function
+rk_nand_suspend:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FlashSuspend
+	.fnend
+	.size	rk_nand_suspend, .-rk_nand_suspend
+	.align	1
+	.global	rk_nand_resume
+	.thumb
+	.thumb_func
+	.type	rk_nand_resume, %function
+rk_nand_resume:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FlashResume
+	.fnend
+	.size	rk_nand_resume, .-rk_nand_resume
+	.align	1
+	.global	rk_ftl_get_capacity
+	.thumb
+	.thumb_func
+	.type	rk_ftl_get_capacity, %function
+rk_ftl_get_capacity:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L1111
+	ldr	r0, [r3, #2940]
+	bx	lr
+.L1112:
+	.align	2
+.L1111:
+	.word	.LANCHOR0
+	.fnend
+	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
+	.align	1
+	.global	rknand_print_hex
+	.thumb
+	.thumb_func
+	.type	rknand_print_hex, %function
+rknand_print_hex:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	movs	r5, #0
+	mov	r9, r0
+	mov	r6, r1
+	mov	r7, r2
+	mov	r8, r3
+	mov	r4, r5
+.L1114:
+	cmp	r4, r8
+	beq	.L1122
+	cbnz	r5, .L1115
+	ldr	r0, .L1123
+	mov	r1, r9
+	mov	r2, r4
+	bl	printk
+.L1115:
+	cmp	r7, #4
+	ldr	r0, .L1123+4
+	bne	.L1116
+	ldr	r1, [r6, r4, lsl #2]
+	b	.L1121
+.L1116:
+	cmp	r7, #2
+	ite	eq
+	ldrsheq	r1, [r6, r4, lsl #1]
+	ldrbne	r1, [r6, r4]	@ zero_extendqisi2
+.L1121:
+	adds	r5, r5, #1
+	bl	printk
+	cmp	r5, #15
+	bls	.L1119
+	ldr	r0, .L1123+8
+	movs	r5, #0
+	ldr	r1, .L1123+12
+	bl	printk
+.L1119:
+	adds	r4, r4, #1
+	b	.L1114
+.L1122:
+	ldr	r0, .L1123+8
+	ldr	r1, .L1123+12
+	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
+	b	printk
+.L1124:
+	.align	2
+.L1123:
+	.word	.LC80
+	.word	.LC81
+	.word	.LC74
+	.word	.LC82
+	.fnend
+	.size	rknand_print_hex, .-rknand_print_hex
+	.align	1
+	.global	HynixGetReadRetryDefault
+	.thumb
+	.thumb_func
+	.type	HynixGetReadRetryDefault, %function
+HynixGetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	cmp	r0, #2
+	ldr	r5, .L1217
+	mov	r3, #172
+	mov	r1, #173
+	mov	r2, #174
+	.pad #44
+	sub	sp, sp, #44
+	mov	r4, r0
+	strb	r3, [r5, #1906]
+	mov	r3, #175
+	strb	r0, [r5, #1902]
+	strb	r1, [r5, #1907]
+	strb	r2, [r5, #1908]
+	strb	r3, [r5, #1909]
+	bne	.L1126
+	movs	r3, #167
+	strb	r3, [r5, #1906]
+	ldr	r3, .L1217+4
+	movs	r2, #247
+	strb	r2, [r3, #2957]
+	b	.L1179
+.L1126:
+	cmp	r0, #3
+	bne	.L1128
+	movs	r3, #176
+	strb	r3, [r5, #1906]
+	movs	r3, #177
+	strb	r3, [r5, #1907]
+	movs	r3, #178
+	strb	r3, [r5, #1908]
+	movs	r3, #179
+	strb	r3, [r5, #1909]
+	movs	r3, #180
+	strb	r3, [r5, #1910]
+	movs	r3, #181
+	strb	r3, [r5, #1911]
+	movs	r3, #182
+	strb	r3, [r5, #1912]
+	movs	r3, #183
+	b	.L1212
+.L1128:
+	cmp	r0, #4
+	bne	.L1129
+	movs	r0, #204
+	strb	r1, [r5, #1911]
+	strb	r0, [r5, #1906]
+	movs	r0, #191
+	strb	r2, [r5, #1912]
+	strb	r0, [r5, #1907]
+	movs	r0, #170
+	strb	r0, [r5, #1908]
+	movs	r0, #171
+	strb	r0, [r5, #1909]
+	movs	r0, #205
+	strb	r0, [r5, #1910]
+.L1212:
+	mov	fp, #8
+	strb	r3, [r5, #1913]
+	mov	r9, fp
+	b	.L1127
+.L1129:
+	cmp	r0, #5
+	bne	.L1130
+	movs	r3, #56
+	mov	fp, #8
+	strb	r3, [r5, #1906]
+	movs	r3, #57
+	strb	r3, [r5, #1907]
+	movs	r3, #58
+	strb	r3, [r5, #1908]
+	movs	r3, #59
+	strb	r3, [r5, #1909]
+	b	.L1211
+.L1130:
+	cmp	r0, #6
+	bne	.L1131
+	movs	r3, #14
+	mov	fp, #12
+	strb	r3, [r5, #1906]
+	movs	r3, #15
+	strb	r3, [r5, #1907]
+	movs	r3, #16
+	strb	r3, [r5, #1908]
+	movs	r3, #17
+	strb	r3, [r5, #1909]
+	b	.L1211
+.L1131:
+	cmp	r0, #7
+	bne	.L1179
+	movs	r3, #176
+	mov	fp, #12
+	strb	r3, [r5, #1906]
+	mov	r9, #10
+	movs	r3, #177
+	strb	r3, [r5, #1907]
+	movs	r3, #178
+	strb	r3, [r5, #1908]
+	movs	r3, #179
+	strb	r3, [r5, #1909]
+	movs	r3, #180
+	strb	r3, [r5, #1910]
+	movs	r3, #181
+	strb	r3, [r5, #1911]
+	movs	r3, #182
+	strb	r3, [r5, #1912]
+	movs	r3, #183
+	strb	r3, [r5, #1913]
+	movs	r3, #212
+	strb	r3, [r5, #1914]
+	movs	r3, #213
+	strb	r3, [r5, #1915]
+	b	.L1127
+.L1179:
+	mov	fp, #7
+.L1211:
+	mov	r9, #4
+.L1127:
+	subs	r3, r4, #1
+	cmp	r3, #1
+	bhi	.L1208
+	ldr	r7, .L1217+8
+	mov	r8, #0
+.L1132:
+	ldrb	r3, [r5, #1616]	@ zero_extendqisi2
+	uxtb	r6, r8
+	ldr	r2, .L1217
+	cmp	r3, r6
+	bls	.L1139
+	add	r6, r6, r2
+	ldrb	r3, [r6, #1620]	@ zero_extendqisi2
+	add	r4, r2, r3, lsl #6
+	add	r3, r2, r3, lsl #3
+	addw	r4, r4, #1922
+	addw	r2, r2, #1905
+	ldrb	r6, [r3, #16]	@ zero_extendqisi2
+	ldr	r1, [r3, #12]
+	mov	r10, r4
+	mov	r3, r4
+	add	r6, r1, r6, lsl #8
+	addw	ip, r6, #2056
+.L1134:
+	str	r3, [sp, #8]
+	movs	r3, #55
+	str	r3, [ip]
+	movs	r0, #80
+	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
+	str	ip, [sp, #4]
+	str	r1, [r6, #2052]
+	str	r2, [sp]
+	str	r2, [sp, #12]
+	bl	NandcDelayns
+	ldr	r1, [r6, #2048]
+	ldr	r3, [sp, #8]
+	ldmia	sp, {r2, ip}
+	strb	r1, [r3], #1
+	subs	r1, r3, r4
+	uxtb	r1, r1
+	cmp	r1, r9
+	bcc	.L1134
+	movs	r2, #0
+.L1135:
+	movs	r3, #1
+	adds	r0, r7, r2
+.L1136:
+	ldrb	r6, [r0, r3, lsl #2]	@ zero_extendqisi2
+	ldrb	r1, [r10]	@ zero_extendqisi2
+	add	r1, r1, r6
+	strb	r1, [r10, r3, lsl #3]
+	adds	r3, r3, #1
+	cmp	r3, #7
+	bne	.L1136
+	adds	r2, r2, #1
+	add	r10, r10, #1
+	cmp	r2, #4
+	bne	.L1135
+	movs	r3, #0
+	add	r8, r8, #1
+	strb	r3, [r4, #16]
+	strb	r3, [r4, #24]
+	strb	r3, [r4, #32]
+	strb	r3, [r4, #40]
+	strb	r3, [r4, #48]
+	strb	r3, [r4, #41]
+	strb	r3, [r4, #49]
+	b	.L1132
+.L1208:
+	subs	r3, r4, #3
+	cmp	r3, #4
+	bhi	.L1139
+	smulbb	r2, r9, fp
+	lsls	r3, r2, #4
+	str	r3, [sp, #32]
+	and	r3, r2, #252
+	str	r3, [sp]
+	movs	r3, #0
+.L1215:
+	str	r3, [sp, #12]
+	ldrb	r3, [sp, #12]	@ zero_extendqisi2
+	str	r3, [sp, #8]
+	ldr	r3, .L1217
+	ldr	r2, [sp, #8]
+	ldrb	r3, [r3, #1616]	@ zero_extendqisi2
+	cmp	r3, r2
+	bhi	.L1178
+.L1139:
+	ldr	r3, .L1217
+	strb	r9, [r3, #1903]
+	strb	fp, [r3, #1904]
+	add	sp, sp, #44
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1178:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L1217
+	add	r3, r3, r2
+	movs	r2, #255
+	ldrb	r8, [r3, #1620]	@ zero_extendqisi2
+	ldr	r3, .L1217
+	add	r3, r3, r8, lsl #3
+	mov	r0, r8
+	ldr	r10, [r3, #12]
+	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	lsls	r6, r3, #8
+	str	r3, [sp, #4]
+	add	r3, r10, r6
+	str	r2, [r3, #2056]
+	bl	NandcWaitFlashReady
+	cmp	r4, #7
+	it	eq
+	moveq	lr, #160
+	mov	r2, #54
+	itete	eq
+	ldreq	r3, .L1217+12
+	ldrne	r3, .L1217+12
+	mlaeq	lr, lr, r8, r3
+	addne	lr, r3, r8, lsl #6
+	ite	ne
+	addne	r3, lr, #20
+	addeq	r3, lr, #28
+	str	r3, [sp, #16]
+	ldr	r3, [sp, #4]
+	cmp	r4, #4
+	add	r3, r10, r3, lsl #8
+	str	r2, [r3, #2056]
+	bne	.L1143
+	add	r6, r6, r10
+	movs	r3, #255
+	str	r3, [r6, #2052]
+	movs	r3, #64
+	str	r3, [r6, #2048]
+	movs	r3, #204
+	b	.L1214
+.L1143:
+	subs	r2, r4, #5
+	cmp	r2, #1
+	bhi	.L1145
+	ldr	r2, .L1217
+	ldrb	r2, [r2, #1906]	@ zero_extendqisi2
+	str	r2, [r3, #2052]
+	movs	r2, #82
+	str	r2, [r3, #2048]
+	b	.L1144
+.L1145:
+	add	r6, r6, r10
+	movs	r3, #174
+	str	r3, [r6, #2052]
+	movs	r3, #0
+	str	r3, [r6, #2048]
+	movs	r3, #176
+.L1214:
+	str	r3, [r6, #2052]
+	movs	r3, #77
+	str	r3, [r6, #2048]
+.L1144:
+	ldr	r3, [sp, #4]
+	cmp	r4, #6
+	mov	r2, #48
+	mov	r0, r8
+	add	r5, r10, r3, lsl #8
+	mov	r3, #22
+	str	r3, [r5, #2056]
+	mov	r3, #23
+	str	r3, [r5, #2056]
+	mov	r3, #4
+	str	r3, [r5, #2056]
+	mov	r3, #25
+	str	r3, [r5, #2056]
+	mov	r3, #0
+	str	r3, [r5, #2056]
+	str	r3, [r5, #2052]
+	str	r3, [r5, #2052]
+	it	eq
+	moveq	r3, #31
+	str	r3, [r5, #2052]
+	movs	r3, #2
+	str	r3, [r5, #2052]
+	movs	r3, #0
+	str	r3, [r5, #2052]
+	ldr	r3, [sp, #4]
+	add	r3, r10, r3, lsl #8
+	str	r2, [r3, #2056]
+	bl	NandcWaitFlashReady
+	subs	r3, r4, #5
+	cmp	r3, #1
+	str	r3, [sp, #20]
+	bls	.L1181
+	cmp	r4, #7
+	ite	eq
+	moveq	r0, #32
+	movne	r0, #2
+	b	.L1149
+.L1218:
+	.align	2
+.L1217:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR1+2940
+	.word	.LANCHOR0+1902
+.L1181:
+	movs	r0, #16
+.L1149:
+	ldr	r3, .L1219
+	ldr	r3, [r3, #3984]
+	mov	r1, r3
+.L1150:
+	ldr	r2, [r5, #2048]
+	strb	r2, [r1], #1
+	subs	r2, r1, r3
+	uxtb	r2, r2
+	cmp	r2, r0
+	bcc	.L1150
+	cmp	r4, #7
+	bne	.L1151
+	movs	r2, #0
+.L1153:
+	ldrb	r0, [r3, r2, lsl #2]	@ zero_extendqisi2
+	uxtb	r1, r2
+	cmp	r0, #12
+	beq	.L1152
+	add	r0, r3, r2, lsl #2
+	ldrb	r0, [r0, #1]	@ zero_extendqisi2
+	cmp	r0, #10
+	beq	.L1152
+	adds	r2, r2, #1
+	cmp	r2, #8
+	bne	.L1153
+	b	.L1154
+.L1152:
+	cmp	r1, #7
+	bne	.L1155
+.L1154:
+	ldr	r0, .L1219+4
+	movs	r1, #0
+	bl	printk
+.L1156:
+	b	.L1156
+.L1151:
+	cmp	r4, #6
+	bne	.L1155
+	subs	r2, r3, #1
+	adds	r3, r3, #7
+.L1157:
+	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
+	cmp	r1, #12
+	beq	.L1155
+	ldrb	r1, [r2, #8]	@ zero_extendqisi2
+	cmp	r1, #4
+	beq	.L1155
+	cmp	r2, r3
+	bne	.L1157
+	ldr	r0, .L1219+4
+	movs	r1, #0
+	bl	printk
+.L1159:
+	b	.L1159
+.L1155:
+	ldr	r1, .L1219
+	ldr	r0, [sp, #32]
+	ldr	r2, [r1, #3984]
+	adds	r0, r2, r0
+	mov	r3, r2
+.L1160:
+	cmp	r3, r0
+	beq	.L1216
+	ldr	r6, [r5, #2048]
+	strb	r6, [r3], #1
+	b	.L1160
+.L1216:
+	ldr	r3, [sp]
+	ldr	r0, [r1, #3984]
+	add	r0, r0, r3
+	movs	r3, #8
+.L1163:
+	ldr	r1, [sp]
+	adds	r6, r0, r1
+.L1162:
+	ldr	r1, [r0]
+	mvns	r1, r1
+	str	r1, [r0], #4
+	cmp	r0, r6
+	bne	.L1162
+	ldr	r1, [sp]
+	subs	r3, r3, #1
+	add	r0, r0, r1
+	bne	.L1163
+.L1164:
+	ldr	r1, .L1219
+	movs	r0, #0
+	ldr	r1, [r1, #3984]
+	str	r1, [sp, #24]
+	mov	r1, r0
+	ldr	r6, [sp, #24]
+	add	r6, r6, r3
+	str	r6, [sp, #36]
+.L1167:
+	movs	r6, #1
+	movs	r7, #16
+	str	r7, [sp, #28]
+	lsl	lr, r6, r1
+	movs	r6, #0
+	mov	ip, r6
+.L1165:
+	ldr	r7, [sp, #36]
+	ldr	r7, [r7, r6]
+	and	r7, lr, r7
+	cmp	r7, lr
+	it	eq
+	addeq	ip, ip, #1
+	ldr	r7, [sp]
+	add	r6, r6, r7
+	ldr	r7, [sp, #28]
+	subs	r7, r7, #1
+	str	r7, [sp, #28]
+	bne	.L1165
+	cmp	ip, #8
+	add	r1, r1, #1
+	it	hi
+	orrhi	r0, r0, lr
+	cmp	r1, #32
+	bne	.L1167
+	ldr	r1, [sp, #24]
+	str	r0, [r1, r3]
+	adds	r3, r3, #4
+	ldr	r1, [sp]
+	cmp	r3, r1
+	bne	.L1164
+	ldr	r3, .L1219
+	ldr	r1, [r3, #3984]
+	movs	r3, #0
+	subs	r0, r1, #4
+	add	r6, r1, #28
+.L1169:
+	ldr	r7, [r0, #4]!
+	cmp	r7, #0
+	it	eq
+	addeq	r3, r3, #1
+	cmp	r0, r6
+	bne	.L1169
+	cmp	r3, #7
+	ble	.L1170
+	ldr	r0, .L1219+8
+	movs	r2, #1
+	mov	r3, #1024
+	bl	rknand_print_hex
+	ldr	r0, .L1219+4
+	movs	r1, #0
+	bl	printk
+.L1171:
+	b	.L1171
+.L1170:
+	cmp	r4, #6
+	beq	.L1183
+	cmp	r4, #7
+	ite	ne
+	movne	ip, #8
+	moveq	ip, #10
+	b	.L1172
+.L1183:
+	mov	ip, #4
+.L1172:
+	add	r7, r9, #-1
+	ldr	r1, [sp, #16]
+	movs	r0, #0
+	uxtb	r7, r7
+	adds	r7, r7, #1
+.L1173:
+	mov	lr, r1
+	mov	r3, r2
+.L1174:
+	ldrb	r6, [r3], #1	@ zero_extendqisi2
+	strb	r6, [lr], #1
+	subs	r6, r3, r2
+	uxtb	r6, r6
+	cmp	r6, r9
+	bcc	.L1174
+	adds	r0, r0, #1
+	add	r2, r2, r7
+	cmp	r0, fp
+	add	r1, r1, ip
+	blt	.L1173
+	ldr	r3, [sp, #4]
+	mov	r0, r8
+	add	r6, r10, r3, lsl #8
+	movs	r3, #255
+	str	r3, [r6, #2056]
+	bl	NandcWaitFlashReady
+	ldr	r3, [sp, #20]
+	cmp	r3, #1
+	bhi	.L1176
+	movs	r3, #54
+	str	r3, [r6, #2056]
+	ldr	r3, .L1219+12
+	mov	r1, #-1
+	ldr	r0, [sp, #8]
+	ldrb	r3, [r3, #1906]	@ zero_extendqisi2
+	str	r3, [r5, #2052]
+	movs	r3, #0
+	str	r3, [r5, #2048]
+	movs	r3, #22
+	str	r3, [r6, #2056]
+	bl	FlashReadCmd
+	b	.L1177
+.L1176:
+	movs	r3, #56
+	str	r3, [r6, #2056]
+.L1177:
+	mov	r0, r8
+	bl	NandcWaitFlashReady
+	ldr	r3, [sp, #12]
+	adds	r3, r3, #1
+	b	.L1215
+.L1220:
+	.align	2
+.L1219:
+	.word	.LANCHOR2
+	.word	.LC83
+	.word	.LC84
+	.word	.LANCHOR0
+	.fnend
+	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
+	.align	1
+	.global	FlashGetReadRetryDefault
+	.thumb
+	.thumb_func
+	.type	FlashGetReadRetryDefault, %function
+FlashGetReadRetryDefault:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	mov	r3, r0
+	cmp	r0, #0
+	beq	.L1221
+	subs	r2, r0, #1
+	cmp	r2, #6
+	bhi	.L1223
+	b	HynixGetReadRetryDefault
+.L1223:
+	cmp	r0, #49
+	bne	.L1224
+	ldr	r0, .L1244
+	movs	r2, #64
+	ldr	r1, .L1244+4
+	addw	r0, r0, #1906
+	strb	r3, [r0, #-4]
+	movs	r3, #4
+	strb	r3, [r0, #-3]
+	movs	r3, #15
+	strb	r3, [r0, #-2]
+	b	.L1242
+.L1224:
+	cmp	r0, #33
+	beq	.L1225
+	sub	r2, r0, #65
+	cmp	r2, #1
+	bhi	.L1226
+.L1225:
+	ldr	r0, .L1244
+	strb	r3, [r0, #1902]
+	movs	r3, #4
+	b	.L1243
+.L1226:
+	cmp	r0, #34
+	beq	.L1227
+	cmp	r0, #67
+	bne	.L1228
+.L1227:
+	ldr	r0, .L1244
+	strb	r3, [r0, #1902]
+	movs	r3, #5
+.L1243:
+	strb	r3, [r0, #1903]
+	movs	r2, #45
+	movs	r3, #7
+	addw	r0, r0, #1906
+	strb	r3, [r0, #-2]
+	ldr	r1, .L1244+8
+	b	.L1242
+.L1228:
+	cmp	r0, #35
+	beq	.L1229
+	cmp	r0, #68
+	bne	.L1221
+.L1229:
+	ldr	r0, .L1244
+	movs	r2, #95
+	ldr	r1, .L1244+12
+	addw	r0, r0, #1906
+	strb	r3, [r0, #-4]
+	movs	r3, #5
+	strb	r3, [r0, #-3]
+	movs	r3, #17
+	strb	r3, [r0, #-2]
+.L1242:
+	b	ftl_memcpy
+.L1221:
+	bx	lr
+.L1245:
+	.align	2
+.L1244:
+	.word	.LANCHOR0
+	.word	.LANCHOR1+440
+	.word	.LANCHOR1+288
+	.word	.LANCHOR1+336
+	.fnend
+	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
+	.align	1
+	.global	NandcXferComp
+	.thumb
+	.thumb_func
+	.type	NandcXferComp, %function
+NandcXferComp:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #8
+	ldr	r5, .L1285
+	add	r0, r5, r0, lsl #3
+	ldr	r3, [r5, #2768]
+	ldr	r4, [r0, #12]
+	cmp	r3, #3
+	bls	.L1277
+	ldr	r3, [r4, #16]
+	lsls	r6, r3, #29
+	bpl	.L1277
+	mov	r0, r4
+	bl	wait_for_nandc_xfer_completed
+	ldr	r6, [r4, #16]
+	ldr	r3, [r4, #8]
+	ubfx	r6, r6, #1, #1
+	str	r3, [sp]
+	cmp	r6, #0
+	beq	.L1259
+	movs	r6, #0
+.L1249:
+	ldr	r2, [r4, #28]
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #5
+	ubfx	r3, r3, #22, #6
+	cmp	r2, r3
+	bge	.L1257
+	ldr	r3, [r5, #2768]
+	cmp	r3, #5
+	bhi	.L1250
+.L1253:
+	adds	r6, r6, #1
+	bic	r3, r6, #-16777216
+	cmp	r3, #0
+	bne	.L1249
+	ldr	r2, [r4, #28]
+	mov	r1, r6
+	ldr	r3, [sp]
+	ubfx	r2, r2, #16, #5
+	ldr	r0, .L1285+4
+	ubfx	r3, r3, #22, #6
+	bl	printk
+	ldr	r0, .L1285+8
+	mov	r1, r4
+	movs	r2, #4
+	mov	r3, #512
+	bl	rknand_print_hex
+	b	.L1249
+.L1250:
+	ldr	r3, [r4]
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #4]
+	lsls	r0, r3, #18
+	bpl	.L1253
+	ldr	r3, [sp, #4]
+	lsls	r1, r3, #14
+	bpl	.L1253
+.L1257:
+	ldr	r3, [r5, #2804]
+	ldr	r4, .L1285
+	cmp	r3, #0
+	beq	.L1258
+	ldr	r1, [sp]
+	movs	r2, #0
+	ldr	r0, [r4, #2796]
+	ubfx	r1, r1, #22, #5
+	lsls	r1, r1, #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r4, #2800]
+	movs	r2, #0
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #5
+	lsls	r1, r1, #7
+	bl	rknand_dma_unmap_single
+	b	.L1258
+.L1261:
+	ldr	r3, [r4, #8]
+	adds	r6, r6, #1
+	str	r3, [sp]
+	bic	r3, r6, #-16777216
+	cbnz	r3, .L1259
+	ldr	r2, [sp]
+	mov	r1, r6
+	ldr	r3, [r4, #28]
+	ldr	r0, .L1285+12
+	ubfx	r3, r3, #16, #5
+	bl	printk
+	ldr	r0, .L1285+8
+	mov	r1, r4
+	movs	r2, #4
+	mov	r3, #512
+	bl	rknand_print_hex
+.L1259:
+	ldr	r3, [sp]
+	lsls	r2, r3, #11
+	bpl	.L1261
+	ldr	r3, [r5, #2812]
+	cbz	r3, .L1262
+	mov	r0, r4
+	bl	NandcSendDumpDataStart
+.L1262:
+	ldr	r3, [r5, #2804]
+	ldr	r6, .L1285
+	cbz	r3, .L1263
+	ldr	r1, [sp]
+	movs	r2, #1
+	ldr	r0, [r6, #2796]
+	ubfx	r1, r1, #22, #5
+	lsls	r1, r1, #10
+	bl	rknand_dma_unmap_single
+	ldr	r0, [r6, #2800]
+	movs	r2, #1
+	ldr	r1, [sp]
+	ubfx	r1, r1, #22, #5
+	lsls	r1, r1, #7
+	bl	rknand_dma_unmap_single
+.L1263:
+	ldr	r3, [r5, #2812]
+	cbz	r3, .L1258
+	mov	r0, r4
+	bl	NandcSendDumpDataDone
+.L1258:
+	movs	r3, #0
+	str	r3, [r5, #2804]
+	b	.L1246
+.L1277:
+	ldr	r3, [r4, #8]
+	str	r3, [sp]
+	ldr	r3, [sp]
+	lsls	r3, r3, #11
+	bpl	.L1277
+.L1246:
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, pc}
+.L1286:
+	.align	2
+.L1285:
+	.word	.LANCHOR0
+	.word	.LC85
+	.word	.LC86
+	.word	.LC87
+	.fnend
+	.size	NandcXferComp, .-NandcXferComp
+	.align	1
+	.global	NandcXferData
+	.thumb
+	.thumb_func
+	.type	NandcXferData, %function
+NandcXferData:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 80
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r3
+	ldr	r5, .L1331
+	tst	r9, #63
+	.pad #92
+	sub	sp, sp, #92
+	mov	r8, r0
+	add	r3, r5, r0, lsl #3
+	mov	r10, r1
+	mov	r6, r2
+	ldr	r7, [r3, #12]
+	bne	.L1288
+	ldr	r3, [sp, #128]
+	cbnz	r3, .L1289
+	add	r0, sp, #24
+	movs	r1, #255
+	movs	r2, #64
+	bl	memset
+	add	r3, sp, #24
+	str	r3, [sp, #128]
+.L1289:
+	ldr	r3, [sp, #128]
+	mov	r0, r8
+	str	r9, [sp]
+	mov	r1, r10
+	mov	r2, r6
+	str	r3, [sp, #4]
+	movs	r3, #0
+	bl	NandcXferStart
+	mov	r0, r8
+	bl	NandcXferComp
+	cmp	r10, #0
+	bne	.L1315
+	ldr	r3, [r5, #2816]
+	lsrs	r4, r6, #1
+	mov	r2, r10
+	mov	r1, r10
+	cmp	r3, #25
+	ldr	r3, [sp, #128]
+	ite	cc
+	movcc	lr, #64
+	movcs	lr, #128
+.L1292:
+	cmp	r1, r4
+	add	r3, r3, #4
+	add	ip, r2, lr
+	bcs	.L1329
+	ldr	r0, [r5, #2784]
+	lsrs	r2, r2, #2
+	adds	r1, r1, #1
+	ldr	r2, [r0, r2, lsl #2]
+	lsrs	r0, r2, #8
+	strb	r2, [r3, #-4]
+	strb	r0, [r3, #-3]
+	lsrs	r0, r2, #16
+	lsrs	r2, r2, #24
+	strb	r0, [r3, #-2]
+	strb	r2, [r3, #-1]
+	mov	r2, ip
+	b	.L1292
+.L1329:
+	movs	r2, #0
+	ldr	r0, [r5, #2816]
+	ldr	r1, [r5, #2768]
+	lsrs	r6, r6, #2
+	mov	fp, r2
+.L1294:
+	cmp	r2, r6
+	bcs	.L1290
+	cmp	r0, #0
+	beq	.L1290
+	add	r3, r2, #8
+	ldr	r3, [r7, r3, lsl #2]
+	str	r3, [sp, #20]
+	ldr	r3, [sp, #20]
+	lsls	r4, r3, #29
+	bmi	.L1318
+	ldr	r4, [sp, #20]
+	ubfx	r4, r4, #15, #1
+	cmp	r4, #0
+	bne	.L1318
+	cmp	r1, #5
+	bls	.L1296
+	ldr	r4, [sp, #20]
+	ldr	r3, [sp, #20]
+	ubfx	r4, r4, #3, #5
+	ubfx	ip, r3, #27, #1
+	ldr	r3, [sp, #20]
+	ldr	lr, [sp, #20]
+	ubfx	r3, r3, #16, #5
+	orr	r4, r4, ip, lsl #5
+	ubfx	lr, lr, #29, #1
+	orr	r3, r3, lr, lsl #5
+	cmp	r4, r3
+	ldr	r3, [sp, #20]
+	ittee	hi
+	ldrhi	r4, [sp, #20]
+	ubfxhi	r3, r3, #3, #5
+	ldrls	r4, [sp, #20]
+	ubfxls	r3, r3, #16, #5
+	ite	hi
+	ubfxhi	r4, r4, #27, #1
+	ubfxls	r4, r4, #29, #1
+	b	.L1328
+.L1296:
+	cmp	r1, #3
+	bls	.L1298
+	ldr	r4, [sp, #20]
+	ldr	r3, [sp, #20]
+	ubfx	r4, r4, #3, #5
+	ubfx	ip, r3, #28, #1
+	ldr	r3, [sp, #20]
+	ldr	lr, [sp, #20]
+	ubfx	r3, r3, #16, #5
+	orr	r4, r4, ip, lsl #5
+	ubfx	lr, lr, #30, #1
+	orr	r3, r3, lr, lsl #5
+	cmp	r4, r3
+	ldr	r3, [sp, #20]
+	ittee	hi
+	ldrhi	r4, [sp, #20]
+	ubfxhi	r3, r3, #3, #5
+	ldrls	r4, [sp, #20]
+	ubfxls	r3, r3, #16, #5
+	ite	hi
+	ubfxhi	r4, r4, #28, #1
+	ubfxls	r4, r4, #30, #1
+.L1328:
+	orr	r4, r3, r4, lsl #5
+.L1298:
+	cmp	fp, r4
+	it	cc
+	movcc	fp, r4
+	b	.L1295
+.L1318:
+	mov	fp, #-1
+.L1295:
+	adds	r2, r2, #1
+	b	.L1294
+.L1315:
+	mov	fp, #0
+.L1290:
+	movs	r3, #0
+	str	r3, [r7, #16]
+	b	.L1301
+.L1288:
+	cmp	r1, #1
+	mov	r4, #0
+	bne	.L1327
+	mov	fp, r4
+.L1302:
+	cmp	r4, r6
+	bcs	.L1330
+	and	ip, r4, #3
+	cmp	r9, #0
+	beq	.L1321
+	add	r3, r9, r4, lsl #9
+	b	.L1304
+.L1321:
+	mov	r3, r9
+.L1304:
+	ldr	r2, [sp, #128]
+	mov	r0, r7
+	ldr	r1, [sp, #128]
+	cmp	r2, #0
+	str	ip, [sp, #8]
+	ite	ne
+	movne	r2, #2
+	moveq	r2, #0
+	mla	r2, r4, r2, r1
+	movs	r1, #1
+	adds	r4, r4, #2
+	str	r2, [sp]
+	mov	r2, ip
+	bl	NandcCopy1KB
+	mov	r0, r8
+	movs	r1, #1
+	movs	r2, #2
+	ldr	ip, [sp, #8]
+	str	fp, [sp]
+	str	fp, [sp, #4]
+	mov	r3, ip
+	bl	NandcXferStart
+	mov	r0, r8
+	bl	NandcXferComp
+	b	.L1302
+.L1330:
+	mov	fp, #0
+	b	.L1301
+.L1327:
+	str	r4, [sp]
+	mov	r1, r4
+	str	r4, [sp, #4]
+	movs	r2, #2
+	mov	r3, r4
+	mov	fp, r4
+	bl	NandcXferStart
+	str	r9, [sp, #8]
+.L1307:
+	cmp	r4, r6
+	bcs	.L1301
+	mov	r0, r8
+	bl	NandcXferComp
+	ldr	r3, [r7, #32]
+	add	ip, r4, #2
+	cmp	ip, r6
+	str	r3, [sp, #20]
+	bcs	.L1308
+	movs	r3, #0
+	mov	r0, r8
+	str	r3, [sp]
+	movs	r2, #2
+	str	r3, [sp, #4]
+	mov	r1, r3
+	and	r3, ip, #3
+	str	ip, [sp, #12]
+	bl	NandcXferStart
+	ldr	ip, [sp, #12]
+.L1308:
+	ldr	r3, [sp, #20]
+	lsls	r3, r3, #29
+	bmi	.L1323
+	ldr	r2, [sp, #20]
+	ldr	r3, [sp, #20]
+	ubfx	r2, r2, #3, #5
+	ubfx	r3, r3, #27, #1
+	orr	r3, r2, r3, lsl #5
+	cmp	fp, r3
+	it	cc
+	movcc	fp, r3
+	b	.L1309
+.L1323:
+	mov	fp, #-1
+.L1309:
+	ldr	r1, [sp, #128]
+	cmp	r9, #0
+	ldr	r3, [sp, #8]
+	it	eq
+	moveq	r3, #0
+	ldr	r0, [sp, #128]
+	cmp	r1, #0
+	ite	ne
+	movne	r1, #2
+	moveq	r1, #0
+	sub	r2, ip, #2
+	str	ip, [sp, #12]
+	mla	r4, r4, r1, r0
+	and	r2, r2, #3
+	mov	r0, r7
+	movs	r1, #0
+	str	r4, [sp]
+	bl	NandcCopy1KB
+	ldr	ip, [sp, #12]
+	ldr	r3, [sp, #8]
+	mov	r4, ip
+	add	r3, r3, #1024
+	str	r3, [sp, #8]
+	b	.L1307
+.L1301:
+	ldr	r3, [r5, #2768]
+	cmp	r3, #5
+	bls	.L1313
+	cmp	r10, #0
+	bne	.L1313
+	ldr	r3, [r7]
+	and	r2, r3, #139264
+	cmp	r2, #139264
+	ittt	eq
+	moveq	fp, #-1
+	orreq	r3, r3, #131072
+	streq	r3, [r7]
+.L1313:
+	mov	r0, fp
+	add	sp, sp, #92
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1332:
+	.align	2
+.L1331:
+	.word	.LANCHOR0
+	.fnend
+	.size	NandcXferData, .-NandcXferData
+	.align	1
+	.global	FlashReadRawPage
+	.thumb
+	.thumb_func
+	.type	FlashReadRawPage, %function
+FlashReadRawPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r8, r3
+	ldr	r3, .L1335
+	mov	r6, r1
+	mov	r7, r2
+	mov	r4, r0
+	ldrb	r5, [r3, #265]	@ zero_extendqisi2
+	cbnz	r0, .L1334
+	ldr	r2, .L1335+4
+	ldrb	r3, [r2, #1]	@ zero_extendqisi2
+	ldr	r2, [r2, #4]
+	muls	r2, r3, r2
+	cmp	r1, r2
+	it	cc
+	movcc	r5, #4
+.L1334:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r1, r6
+	mov	r0, r4
+	bl	FlashReadCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r2, r5
+	movs	r1, #0
+	mov	r3, r7
+	mov	r0, r4
+	str	r8, [sp]
+	bl	NandcXferData
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	mov	r0, r5
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1336:
+	.align	2
+.L1335:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashReadRawPage, .-FlashReadRawPage
+	.align	1
+	.global	FlashDdrTunningRead
+	.thumb
+	.thumb_func
+	.type	FlashDdrTunningRead, %function
+FlashDdrTunningRead:
+	.fnstart
+	@ args = 4, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r7, r3
+	ldr	r4, .L1363
+	.pad #20
+	sub	sp, sp, #20
+	mov	r10, r0
+	mov	fp, r2
+	str	r1, [sp]
+	ldr	r3, [r4, #1828]
+	ldr	r3, [r3, #304]
+	str	r3, [sp, #8]
+	ldr	r3, [r4, #2768]
+	cmp	r3, #8
+	ldr	r3, [sp, #56]
+	ite	cc
+	movcc	r9, #6
+	movcs	r9, #12
+	cmp	r3, #0
+	beq	.L1351
+	movs	r0, #1
+	bl	FlashSetInterfaceMode
+	movs	r0, #1
+	bl	NandcSetMode
+	mov	r0, r10
+	bl	FlashReset
+	mov	r3, r7
+	mov	r2, fp
+	mov	r0, r10
+	ldr	r1, [sp]
+	bl	FlashReadRawPage
+	mov	r6, r0
+	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	bl	NandcSetMode
+	adds	r3, r6, #1
+	bne	.L1340
+.L1349:
+	mov	r6, #-1
+	b	.L1341
+.L1340:
+	mov	r2, r6
+	ldr	r0, .L1363+4
+	ldr	r1, [sp]
+	bl	printk
+	cmp	r6, #9
+	itt	ls
+	addls	r4, r4, r10, lsl #3
+	ldrls	r3, [r4, #12]
+	ldr	r4, .L1363+8
+	itttt	ls
+	ldrls	r2, [r3, #3840]
+	ldrls	r2, [r3]
+	orrls	r2, r2, #131072
+	strls	r2, [r3]
+	ldr	r3, [r4, #3988]
+	adds	r3, r3, #1
+	str	r3, [r4, #3988]
+	cmp	r3, #2048
+	bcc	.L1341
+	movs	r7, #0
+	str	r7, [r4, #3988]
+	mov	fp, r7
+	b	.L1339
+.L1351:
+	mov	r6, #1024
+.L1339:
+	movs	r4, #0
+	mov	r8, #-1
+	str	r4, [sp, #4]
+	mov	ip, r4
+	mov	r5, r4
+.L1347:
+	uxtb	r0, r9
+	str	ip, [sp, #12]
+	bl	NandcSetDdrPara
+	mov	r3, r7
+	mov	r0, r10
+	mov	r2, fp
+	ldr	r1, [sp]
+	bl	FlashReadRawPage
+	adds	r3, r6, #1
+	cmp	r0, r3
+	ldr	ip, [sp, #12]
+	bhi	.L1343
+	cmp	r0, #2
+	bhi	.L1353
+	adds	r5, r5, #1
+	cmp	r5, #9
+	bls	.L1353
+	rsb	r4, r5, r9
+	mov	r6, r0
+	mov	r8, #0
+	b	.L1345
+.L1343:
+	ldr	r3, [sp, #4]
+	cmp	r3, r5
+	bcs	.L1354
+	cmp	r5, #7
+	rsb	ip, r5, r4
+	bhi	.L1355
+	str	r5, [sp, #4]
+	b	.L1354
+.L1353:
+	mov	r8, #0
+	mov	r4, r9
+	mov	r6, r0
+	mov	r7, r8
+	mov	fp, r8
+	b	.L1344
+.L1354:
+	movs	r5, #0
+.L1344:
+	add	r9, r9, #2
+	cmp	r9, #69
+	bls	.L1347
+.L1345:
+	ldr	r3, [sp, #4]
+	cmp	r3, r5
+	it	cs
+	movcs	r4, ip
+	b	.L1346
+.L1355:
+	mov	r4, ip
+.L1346:
+	cbz	r4, .L1348
+	ldr	r0, .L1363+12
+	mov	r1, r4
+	bl	printk
+	uxtb	r0, r4
+	bl	NandcSetDdrPara
+.L1348:
+	cmp	r8, #0
+	beq	.L1341
+	ldr	r0, .L1363+16
+	mov	r1, r10
+	ldr	r2, [sp]
+	bl	printk
+	ldr	r3, [sp, #56]
+	cmp	r3, #0
+	beq	.L1349
+	ldr	r3, [sp, #8]
+	ubfx	r0, r3, #8, #8
+	bl	NandcSetDdrPara
+.L1341:
+	mov	r0, r6
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1364:
+	.align	2
+.L1363:
+	.word	.LANCHOR0
+	.word	.LC88
+	.word	.LANCHOR2
+	.word	.LC89
+	.word	.LC90
+	.fnend
+	.size	FlashDdrTunningRead, .-FlashDdrTunningRead
+	.align	1
+	.global	FlashReadPage
+	.thumb
+	.thumb_func
+	.type	FlashReadPage, %function
+FlashReadPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r8, r2
+	mov	r5, r0
+	mov	r6, r1
+	mov	r7, r3
+	bl	FlashReadRawPage
+	adds	r2, r0, #1
+	mov	r4, r0
+	bne	.L1366
+	ldr	r9, .L1385+4
+	ldrb	fp, [r9, #8]	@ zero_extendqisi2
+	mov	r10, r9
+	cmp	fp, #0
+	bne	.L1367
+.L1369:
+	ldrb	r3, [r10, #2761]	@ zero_extendqisi2
+	ldr	r9, .L1385+4
+	cbz	r3, .L1366
+	b	.L1384
+.L1367:
+	movs	r3, #0
+	mov	r0, r5
+	strb	r3, [r9, #8]
+	mov	r1, r6
+	mov	r3, r7
+	mov	r2, r8
+	bl	FlashReadRawPage
+	strb	fp, [r9, #8]
+	adds	r3, r0, #1
+	beq	.L1369
+	mov	r4, r0
+	b	.L1366
+.L1384:
+	ldr	r3, [r9, #1828]
+	mov	r1, r6
+	mov	r0, r5
+	mov	r2, r8
+	ldr	r10, [r3, #304]
+	movs	r3, #1
+	str	r3, [sp]
+	mov	r3, r7
+	bl	FlashDdrTunningRead
+	adds	r1, r0, #1
+	mov	r4, r0
+	beq	.L1370
+	ldrb	r3, [r9, #1892]	@ zero_extendqisi2
+	cmp	r0, r3, lsr #1
+	bls	.L1366
+.L1370:
+	ubfx	r0, r10, #8, #8
+	bl	NandcSetDdrPara
+.L1366:
+	ldr	r9, .L1385+8
+	ldr	ip, [r9, #3992]
+	cmp	ip, #0
+	beq	.L1371
+	adds	r2, r4, #1
+	bne	.L1371
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, r7
+	mov	r0, r5
+	blx	ip
+	mov	r3, r6
+	mov	r2, r5
+	mov	r4, r0
+	ldr	r0, .L1385
+	mov	r1, r4
+	bl	printk
+	adds	r3, r4, #1
+	bne	.L1371
+	ldr	r3, .L1385+4
+	ldrb	r3, [r3, #76]	@ zero_extendqisi2
+	cbz	r3, .L1371
+	mov	r0, r5
+	bl	flash_enter_slc_mode
+	ldr	r4, [r9, #3992]
+	mov	r0, r5
+	mov	r1, r6
+	mov	r2, r8
+	mov	r3, r7
+	blx	r4
+	mov	r4, r0
+	mov	r0, r5
+	bl	flash_exit_slc_mode
+.L1371:
+	mov	r0, r4
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1386:
+	.align	2
+.L1385:
+	.word	.LC91
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashReadPage, .-FlashReadPage
+	.align	1
+	.global	FlashDdrParaScan
+	.thumb
+	.thumb_func
+	.type	FlashDdrParaScan, %function
+FlashDdrParaScan:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r7, r0
+	ldr	r4, .L1397
+	mov	r6, r1
+	movs	r5, #0
+	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r4, #2760]	@ zero_extendqisi2
+	bl	NandcSetMode
+	mov	r1, r6
+	mov	r2, r5
+	mov	r3, r5
+	mov	r0, r7
+	str	r5, [sp]
+	bl	FlashDdrTunningRead
+	mov	r1, r6
+	mov	r2, r5
+	mov	r3, r5
+	mov	r8, r0
+	mov	r0, r7
+	bl	FlashReadRawPage
+	adds	r0, r0, #1
+	beq	.L1388
+	cmp	r8, #-1
+	bne	.L1389
+.L1388:
+	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+	lsls	r3, r3, #31
+	bpl	.L1389
+	movs	r0, #1
+	bl	FlashSetInterfaceMode
+	movs	r0, #1
+	bl	NandcSetMode
+	ldr	r3, .L1397
+	movs	r2, #0
+	strb	r2, [r3, #2761]
+	b	.L1390
+.L1389:
+	movs	r3, #1
+	strb	r3, [r4, #2761]
+.L1390:
+	movs	r0, #0
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1398:
+	.align	2
+.L1397:
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashDdrParaScan, .-FlashDdrParaScan
+	.align	1
+	.global	FlashLoadPhyInfo
+	.thumb
+	.thumb_func
+	.type	FlashLoadPhyInfo, %function
+FlashLoadPhyInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r6, .L1415
+	movs	r4, #0
+	ldr	r3, .L1415+4
+	mov	r9, #4
+	ldr	r5, .L1415+8
+	mov	r7, #-1
+	mov	r8, r6
+	ldr	r0, [r3]	@ unaligned
+	ldrh	r3, [r6, #266]
+	mov	r6, r5
+	str	r4, [r5, #4000]
+	str	r0, [sp, #12]	@ unaligned
+	mov	r0, r4
+	str	r3, [sp, #4]
+	ldr	r3, [r5, #3984]
+	str	r3, [r5, #3996]
+	bl	flash_enter_slc_mode
+.L1400:
+	add	fp, r4, #1
+	mov	r10, #0
+.L1402:
+	add	r3, sp, #12
+	ldrb	r0, [r3, r10]	@ zero_extendqisi2
+	bl	FlashBchSel
+	movs	r0, #0
+	mov	r1, r4
+	ldr	r2, [r5, #3984]
+	mov	r3, r0
+	bl	FlashReadRawPage
+	adds	r0, r0, #1
+	bne	.L1401
+	movs	r0, #0
+	mov	r1, fp
+	ldr	r2, [r6, #3984]
+	mov	r3, r0
+	bl	FlashReadRawPage
+	adds	r0, r0, #1
+	bne	.L1401
+	add	r10, r10, #1
+	cmp	r10, #4
+	beq	.L1403
+	b	.L1402
+.L1404:
+	add	r0, fp, #12
+	movw	r1, #2036
+	bl	JSHash
+	ldr	r3, [fp, #8]
+	cmp	r3, r0
+	bne	.L1410
+	add	r1, fp, #160
+	movs	r2, #32
+	ldr	r0, .L1415+12
+	bl	ftl_memcpy
+	ldr	r7, .L1415+16
+	ldr	r1, [r6, #3996]
+	movs	r2, #32
+	add	r0, r7, #44
+	adds	r1, r1, #192
+	bl	ftl_memcpy
+	ldr	r1, [r6, #3996]
+	mov	r2, #852
+	addw	r0, r7, #1902
+	adds	r1, r1, #224
+	bl	ftl_memcpy
+	ldr	fp, [r6, #3996]
+	str	r4, [r6, #4000]
+	mov	r0, r4
+	ldrh	r1, [r8, #266]
+	ldr	r3, [fp, #1076]
+	strb	r3, [r7, #2761]
+	bl	__aeabi_uidiv
+	adds	r3, r0, #1
+	cbnz	r0, .L1413
+	movs	r3, #2
+.L1413:
+	str	r3, [r6, #4004]
+	movs	r7, #0
+	ldrh	r3, [fp, #14]
+	strb	r3, [r5, #4008]
+.L1403:
+	ldr	r3, [sp, #4]
+	subs	r9, r9, #1
+	add	r4, r4, r3
+	bne	.L1400
+	mov	r0, r9
+.L1414:
+	bl	flash_exit_slc_mode
+	mov	r0, r7
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1401:
+	ldr	fp, [r5, #3996]
+	ldr	r2, .L1415+20
+	ldr	r3, [fp]
+	cmp	r3, r2
+	bne	.L1403
+	cmp	r7, #0
+	bne	.L1404
+	mov	r0, r4
+	ldrh	r1, [r8, #266]
+	bl	__aeabi_uidiv
+	ldr	r3, .L1415+8
+	adds	r0, r0, #1
+	str	r0, [r3, #4004]
+	mov	r0, r7
+	b	.L1414
+.L1410:
+	mov	r7, #-1
+	b	.L1403
+.L1416:
+	.align	2
+.L1415:
+	.word	.LANCHOR1
+	.word	.LANCHOR3+11
+	.word	.LANCHOR2
+	.word	.LANCHOR1+256
+	.word	.LANCHOR0
+	.word	1312902724
+	.fnend
+	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
+	.align	1
+	.global	ToshibaReadRetrial
+	.thumb
+	.thumb_func
+	.type	ToshibaReadRetrial, %function
+ToshibaReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	mov	r9, r0
+	mov	fp, r3
+	str	r2, [sp, #8]
+	str	r1, [sp, #16]
+	bl	NandcWaitFlashReady
+	ldr	r4, .L1445
+	add	r3, r4, r9, lsl #3
+	ldrb	r2, [r3, #16]	@ zero_extendqisi2
+	ldr	r7, [r3, #12]
+	ldrb	r3, [r4, #1900]	@ zero_extendqisi2
+	add	r6, r2, #8
+	subs	r3, r3, #67
+	add	r6, r7, r6, lsl #8
+	cmp	r3, #1
+	lsl	r3, r2, #8
+	str	r3, [sp, #12]
+	bls	.L1434
+	ldrb	r5, [r4, #2761]	@ zero_extendqisi2
+	cbz	r5, .L1435
+	movs	r0, #0
+	str	r2, [sp, #20]
+	bl	NandcSetDdrMode
+	movs	r3, #1
+	ldr	r2, [sp, #20]
+	str	r3, [sp, #4]
+	b	.L1419
+.L1435:
+	str	r5, [sp, #4]
+.L1419:
+	ldr	r3, [sp, #12]
+	movs	r1, #92
+	adds	r3, r7, r3
+	str	r1, [r3, #2056]
+	movs	r1, #197
+	str	r1, [r3, #2056]
+	b	.L1418
+.L1434:
+	movs	r3, #0
+	str	r3, [sp, #4]
+.L1418:
+	mov	r8, #1
+	mov	r10, #-1
+	lsls	r3, r2, #8
+	str	r3, [sp, #20]
+.L1420:
+	ldr	r3, .L1445+4
+	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+	adds	r3, r3, #1
+	cmp	r8, r3
+	bcs	.L1444
+	ldrb	r3, [r4, #1900]	@ zero_extendqisi2
+	mov	r0, r6
+	uxtb	r1, r8
+	subs	r3, r3, #67
+	cmp	r3, #1
+	bhi	.L1421
+	bl	SandiskSetRRPara
+	b	.L1422
+.L1421:
+	bl	ToshibaSetRRPara
+.L1422:
+	ldrb	r3, [r4, #1900]	@ zero_extendqisi2
+	cmp	r3, #34
+	bne	.L1423
+	ldr	r3, .L1445+4
+	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+	subs	r3, r3, #3
+	cmp	r8, r3
+	itttt	eq
+	moveq	r2, #179
+	ldreq	r3, [sp, #20]
+	addeq	r3, r7, r3
+	streq	r2, [r3, #2056]
+.L1423:
+	ldr	r3, [sp, #12]
+	movs	r2, #38
+	adds	r3, r7, r3
+	str	r2, [r3, #2056]
+	movs	r2, #93
+	str	r2, [r3, #2056]
+	ldr	r3, [sp, #4]
+	cbz	r3, .L1424
+	movs	r0, #4
+	bl	NandcSetDdrMode
+	mov	r0, r9
+	mov	r3, fp
+	ldr	r1, [sp, #16]
+	ldr	r2, [sp, #8]
+	bl	FlashReadRawPage
+	mov	r5, r0
+	movs	r0, #0
+	bl	NandcSetDdrMode
+	b	.L1425
+.L1424:
+	mov	r0, r9
+	ldr	r1, [sp, #16]
+	ldr	r2, [sp, #8]
+	mov	r3, fp
+	bl	FlashReadRawPage
+	mov	r5, r0
+.L1425:
+	adds	r2, r5, #1
+	beq	.L1426
+	ldrb	r2, [r4, #1892]	@ zero_extendqisi2
+	cmp	r10, #-1
+	it	eq
+	moveq	r10, r5
+	add	r2, r2, r2, lsl #1
+	cmp	r5, r2, asr #2
+	bcc	.L1428
+	mov	fp, #0
+	str	fp, [sp, #8]
+.L1426:
+	add	r8, r8, #1
+	b	.L1420
+.L1444:
+	mov	r5, r10
+.L1428:
+	ldrb	r2, [r4, #1900]	@ zero_extendqisi2
+	mov	r0, r6
+	movs	r1, #0
+	subs	r2, r2, #67
+	cmp	r2, #1
+	bhi	.L1430
+	bl	SandiskSetRRPara
+	b	.L1431
+.L1430:
+	bl	ToshibaSetRRPara
+.L1431:
+	ldr	r3, [sp, #12]
+	movs	r2, #255
+	add	r7, r7, r3
+	str	r2, [r7, #2056]
+	ldrb	r2, [r4, #1892]	@ zero_extendqisi2
+	add	r2, r2, r2, lsl #1
+	cmp	r5, r2, asr #2
+	bcc	.L1432
+	adds	r3, r5, #1
+	it	ne
+	movne	r5, #256
+.L1432:
+	mov	r0, r9
+	bl	NandcWaitFlashReady
+	ldr	r3, [sp, #4]
+	cbz	r3, .L1433
+	movs	r0, #4
+	bl	NandcSetDdrMode
+.L1433:
+	mov	r0, r5
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1446:
+	.align	2
+.L1445:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	ToshibaReadRetrial, .-ToshibaReadRetrial
+	.align	1
+	.global	SamsungReadRetrial
+	.thumb
+	.thumb_func
+	.type	SamsungReadRetrial, %function
+SamsungReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r0
+	ldr	r5, .L1460
+	mov	r9, r2
+	mov	r7, r3
+	mov	fp, r1
+	bl	NandcWaitFlashReady
+	add	r2, r5, r8, lsl #3
+	mov	r10, #1
+	mov	r4, #-1
+	ldrb	r3, [r2, #16]	@ zero_extendqisi2
+	ldr	r6, [r2, #12]
+	adds	r3, r3, #8
+	add	r6, r6, r3, lsl #8
+.L1448:
+	ldr	r3, .L1460+4
+	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+	adds	r3, r3, #1
+	cmp	r10, r3
+	bcs	.L1451
+	mov	r0, r6
+	uxtb	r1, r10
+	bl	SamsungSetRRPara
+	mov	r2, r9
+	mov	r0, r8
+	mov	r1, fp
+	mov	r3, r7
+	bl	FlashReadRawPage
+	adds	r2, r0, #1
+	beq	.L1449
+	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
+	cmp	r4, #-1
+	it	eq
+	moveq	r4, r0
+	add	r3, r3, r3, lsl #1
+	cmp	r0, r3, asr #2
+	bcc	.L1454
+	movs	r7, #0
+	mov	r9, r7
+.L1449:
+	add	r10, r10, #1
+	b	.L1448
+.L1454:
+	mov	r4, r0
+.L1451:
+	mov	r0, r6
+	movs	r1, #0
+	bl	SamsungSetRRPara
+	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
+	add	r3, r3, r3, lsl #1
+	cmp	r4, r3, asr #2
+	bcc	.L1453
+	adds	r3, r4, #1
+	it	ne
+	movne	r4, #256
+.L1453:
+	mov	r0, r4
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1461:
+	.align	2
+.L1460:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	SamsungReadRetrial, .-SamsungReadRetrial
+	.align	1
+	.global	MicronReadRetrial
+	.thumb
+	.thumb_func
+	.type	MicronReadRetrial, %function
+MicronReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r3
+	ldr	r3, .L1478
+	mov	fp, r2
+	.pad #28
+	sub	sp, sp, #28
+	mov	r8, r0
+	mov	r10, r1
+	ldrb	r2, [r3, #76]	@ zero_extendqisi2
+	mov	r5, r3
+	ldrb	r4, [r3, #1892]	@ zero_extendqisi2
+	cbnz	r2, .L1463
+	add	r4, r4, r4, lsl #1
+	ubfx	r4, r4, #2, #8
+	b	.L1464
+.L1463:
+	ldr	r2, .L1478+4
+	smull	r2, r3, r4, r2
+	uxtb	r4, r3
+.L1464:
+	mov	r0, r8
+	movs	r7, #0
+	bl	NandcWaitFlashReady
+	add	r3, r5, r8, lsl #3
+	mov	r5, #-1
+	ldr	r2, [r3, #12]
+	ldrb	r3, [r3, #16]	@ zero_extendqisi2
+	str	r3, [sp, #16]
+	mov	r3, r2
+	str	r2, [sp, #12]
+	ldr	r2, [sp, #16]
+	add	r6, r3, r2, lsl #8
+.L1465:
+	ldr	r3, .L1478+8
+	ldrb	r3, [r3, #4009]	@ zero_extendqisi2
+	cmp	r7, r3
+	bcs	.L1468
+	movs	r3, #239
+	movs	r0, #200
+	str	r3, [r6, #2056]
+	movs	r3, #137
+	str	r3, [r6, #2052]
+	bl	NandcDelayns
+	mov	ip, #0
+	adds	r3, r7, #1
+	mov	r2, fp
+	str	r3, [r6, #2048]
+	mov	r0, r8
+	str	ip, [r6, #2048]
+	mov	r1, r10
+	str	ip, [r6, #2048]
+	str	ip, [r6, #2048]
+	str	r3, [sp, #8]
+	mov	r3, r9
+	str	ip, [sp, #20]
+	bl	FlashReadRawPage
+	adds	r2, r0, #1
+	beq	.L1466
+	cmp	r5, #-1
+	it	eq
+	moveq	r5, r0
+	cmp	r0, r4
+	bcc	.L1472
+	ldr	ip, [sp, #20]
+	mov	r9, ip
+	mov	fp, ip
+.L1466:
+	ldr	r7, [sp, #8]
+	b	.L1465
+.L1472:
+	mov	r5, r0
+.L1468:
+	ldr	r2, [sp, #16]
+	movs	r0, #200
+	ldr	r3, [sp, #12]
+	add	r6, r3, r2, lsl #8
+	movs	r3, #239
+	str	r3, [r6, #2056]
+	movs	r3, #137
+	str	r3, [r6, #2052]
+	bl	NandcDelayns
+	cmp	r5, r4
+	mov	r3, #0
+	str	r3, [r6, #2048]
+	str	r3, [r6, #2048]
+	str	r3, [r6, #2048]
+	str	r3, [r6, #2048]
+	bcc	.L1470
+	adds	r3, r5, #1
+	ldr	r0, .L1478+12
+	it	ne
+	movne	r5, #256
+	mov	r1, r7
+	str	r5, [sp]
+	mov	r2, r10
+	mov	r3, r7
+	bl	printk
+.L1470:
+	mov	r0, r5
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1479:
+	.align	2
+.L1478:
+	.word	.LANCHOR0
+	.word	1431655766
+	.word	.LANCHOR2
+	.word	.LC92
+	.fnend
+	.size	MicronReadRetrial, .-MicronReadRetrial
+	.align	1
+	.global	HynixReadRetrial
+	.thumb
+	.thumb_func
+	.type	HynixReadRetrial, %function
+HynixReadRetrial:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r10, r2
+	ldr	r5, .L1497
+	mov	r8, r3
+	mov	r7, r0
+	mov	fp, r1
+	adds	r3, r5, r0
+	mov	r6, #-1
+	ldr	r2, [r5, #1788]
+	ldrb	r4, [r3, #1914]	@ zero_extendqisi2
+	ldrb	r9, [r5, #1904]	@ zero_extendqisi2
+	ldrb	r2, [r2, #19]	@ zero_extendqisi2
+	cmp	r2, #7
+	it	eq
+	ldrbeq	r4, [r3, #1922]	@ zero_extendqisi2
+	bl	NandcWaitFlashReady
+	mov	ip, #0
+.L1482:
+	cmp	ip, r9
+	bcs	.L1486
+	adds	r4, r4, #1
+	mov	r0, r7
+	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
+	uxtb	r4, r4
+	ldr	r2, .L1497+4
+	cmp	r4, r9
+	it	cs
+	movcs	r4, #0
+	str	ip, [sp, #4]
+	mov	r3, r4
+	bl	HynixSetRRPara
+	mov	r2, r10
+	mov	r0, r7
+	mov	r1, fp
+	mov	r3, r8
+	bl	FlashReadRawPage
+	adds	r2, r0, #1
+	ldr	ip, [sp, #4]
+	beq	.L1484
+	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
+	cmp	r6, #-1
+	it	eq
+	moveq	r6, r0
+	add	r3, r3, r3, lsl #1
+	cmp	r0, r3, asr #2
+	bcc	.L1491
+	mov	r8, #0
+	mov	r10, r8
+.L1484:
+	add	ip, ip, #1
+	b	.L1482
+.L1491:
+	mov	r6, r0
+.L1486:
+	ldr	r3, [r5, #1788]
+	add	r7, r7, r5
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	cmp	r3, #7
+	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
+	ite	eq
+	strbeq	r4, [r7, #1922]
+	strbne	r4, [r7, #1914]
+	add	r3, r3, r3, lsl #1
+	cmp	r6, r3, asr #2
+	bcc	.L1490
+	adds	r3, r6, #1
+	it	ne
+	movne	r6, #256
+.L1490:
+	mov	r0, r6
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1498:
+	.align	2
+.L1497:
+	.word	.LANCHOR0
+	.word	.LANCHOR0+1906
+	.fnend
+	.size	HynixReadRetrial, .-HynixReadRetrial
+	.align	1
+	.global	FlashProgPage
+	.thumb
+	.thumb_func
+	.type	FlashProgPage, %function
+FlashProgPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #8
+	mov	r8, r3
+	ldr	r3, .L1502
+	mov	r5, r1
+	mov	r7, r2
+	mov	r4, r0
+	ldrb	r6, [r3, #265]	@ zero_extendqisi2
+	cbnz	r0, .L1500
+	ldr	r2, .L1502+4
+	ldrb	r3, [r2, #1]	@ zero_extendqisi2
+	ldr	r1, [r2, #4]
+	muls	r1, r3, r1
+	cmp	r5, r1
+	bcs	.L1500
+	ldrb	r3, [r2]	@ zero_extendqisi2
+	cbnz	r3, .L1501
+	subs	r6, r6, #2
+	b	.L1500
+.L1501:
+	movs	r6, #4
+.L1500:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r0, r4
+	mov	r1, r5
+	bl	FlashProgFirstCmd
+	uxtb	r2, r6
+	mov	r3, r7
+	mov	r0, r4
+	movs	r1, #1
+	str	r8, [sp]
+	bl	NandcXferData
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashProgSecondCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r1, r5
+	mov	r0, r4
+	bl	FlashReadStatus
+	mov	r5, r0
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	and	r0, r5, #1
+	add	sp, sp, #8
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1503:
+	.align	2
+.L1502:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.fnend
+	.size	FlashProgPage, .-FlashProgPage
+	.align	1
+	.global	FlashSavePhyInfo
+	.thumb
+	.thumb_func
+	.type	FlashSavePhyInfo, %function
+FlashSavePhyInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L1513
+	ldr	r5, .L1513+4
+	ldr	r8, .L1513+12
+	ldr	r3, [r4, #3984]
+	mov	r9, r4
+	ldrb	r0, [r4, #4010]	@ zero_extendqisi2
+	mov	r10, r5
+	str	r3, [r4, #3996]
+	bl	FlashBchSel
+	ldr	r0, [r4, #3984]
+	mov	r1, #2048
+	bl	__memzero
+	ldr	r3, [r4, #3996]
+	add	r1, r5, #1792
+	movs	r2, #32
+	str	r8, [r3]
+	ldr	r0, [r4, #3996]
+	ldrb	r3, [r5, #1616]	@ zero_extendqisi2
+	adds	r0, r0, #16
+	strh	r3, [r0, #-4]	@ movhi
+	ldrb	r3, [r5, #1]	@ zero_extendqisi2
+	strh	r3, [r0, #-2]	@ movhi
+	ldrb	r3, [r5, #2761]	@ zero_extendqisi2
+	str	r3, [r0, #1060]
+	bl	ftl_memcpy
+	ldr	r0, [r4, #3996]
+	addw	r1, r5, #1620
+	movs	r2, #8
+	adds	r0, r0, #80
+	bl	ftl_memcpy
+	ldr	r0, [r4, #3996]
+	addw	r1, r5, #1628
+	movs	r2, #32
+	adds	r0, r0, #96
+	bl	ftl_memcpy
+	ldr	r0, [r4, #3996]
+	ldr	r1, .L1513+8
+	movs	r2, #32
+	adds	r0, r0, #160
+	bl	ftl_memcpy
+	ldr	r0, [r4, #3996]
+	add	r1, r5, #44
+	movs	r2, #32
+	adds	r0, r0, #192
+	bl	ftl_memcpy
+	ldr	r0, [r4, #3996]
+	mov	r2, #852
+	addw	r1, r5, #1902
+	adds	r0, r0, #224
+	bl	ftl_memcpy
+	ldr	r6, [r4, #3996]
+	movw	r1, #2036
+	add	r0, r6, #12
+	bl	JSHash
+	mov	r3, #1592
+	str	r3, [r6, #4]
+	ldr	r3, [r4, #4012]
+	str	r3, [r4, #3996]
+	str	r0, [r6, #8]
+	movs	r0, #0
+	bl	flash_enter_slc_mode
+	movs	r6, #0
+	mov	r7, r6
+.L1507:
+	ldr	r1, [r5, #4]
+	movs	r0, #0
+	mov	r2, r0
+	muls	r1, r7, r1
+	bl	FlashEraseBlock
+	ldr	r1, [r5, #4]
+	movs	r0, #0
+	ldr	r2, [r4, #3984]
+	muls	r1, r7, r1
+	mov	r3, r0
+	bl	FlashProgPage
+	ldr	r1, [r5, #4]
+	movs	r0, #0
+	ldr	r2, [r4, #3984]
+	muls	r1, r7, r1
+	mov	r3, r0
+	adds	r1, r1, #1
+	bl	FlashProgPage
+	ldr	r1, [r5, #4]
+	movs	r0, #0
+	ldr	r2, [r4, #4012]
+	muls	r1, r7, r1
+	mov	r3, r0
+	bl	FlashReadRawPage
+	adds	r2, r7, #1
+	adds	r0, r0, #1
+	beq	.L1505
+	ldr	fp, [r9, #3996]
+	ldr	r3, [fp]
+	cmp	r3, r8
+	bne	.L1505
+	add	r0, fp, #12
+	movw	r1, #2036
+	str	r2, [sp, #4]
+	bl	JSHash
+	ldr	r3, [fp, #8]
+	cmp	r3, r0
+	ldr	r2, [sp, #4]
+	bne	.L1505
+	ldr	r3, [r10, #4]
+	cmp	r6, #1
+	str	r2, [r9, #4004]
+	mul	r3, r3, r7
+	str	r3, [r9, #4000]
+	beq	.L1508
+	movs	r6, #1
+.L1505:
+	cmp	r2, #4
+	mov	r7, r2
+	bne	.L1507
+	b	.L1506
+.L1508:
+	movs	r6, #2
+.L1506:
+	movs	r0, #0
+	bl	flash_exit_slc_mode
+	clz	r0, r6
+	lsrs	r0, r0, #5
+	negs	r0, r0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1514:
+	.align	2
+.L1513:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR1+256
+	.word	1312902724
+	.fnend
+	.size	FlashSavePhyInfo, .-FlashSavePhyInfo
+	.align	1
+	.global	FlashReadIdbDataRaw
+	.thumb
+	.thumb_func
+	.type	FlashReadIdbDataRaw, %function
+FlashReadIdbDataRaw:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r0
+	ldr	r3, .L1528
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L1528+4
+	ldr	r0, [r3]	@ unaligned
+	ldr	r2, [r4, #2772]
+	ldr	r3, .L1528+8
+	str	r0, [sp, #12]	@ unaligned
+	cmp	r2, r3
+	ldrb	r10, [r4, #1892]	@ zero_extendqisi2
+	str	r3, [sp, #4]
+	bne	.L1516
+	movs	r0, #0
+	bl	flash_enter_slc_mode
+.L1516:
+	mov	r0, r9
+	mov	r1, #2048
+	bl	__memzero
+	mov	r8, #-1
+	movs	r5, #2
+.L1517:
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	cmp	r5, r3
+	bcs	.L1521
+	movs	r7, #0
+.L1519:
+	add	r3, sp, #12
+	ldr	r6, .L1528+12
+	ldrb	fp, [r7, r3]	@ zero_extendqisi2
+	mov	r0, fp
+	bl	FlashBchSel
+	ldr	r1, [r4, #4]
+	movs	r0, #0
+	ldr	r2, [r6, #3984]
+	muls	r1, r5, r1
+	mov	r3, r0
+	bl	FlashReadRawPage
+	adds	r0, r0, #1
+	bne	.L1518
+	adds	r7, r7, #1
+	cmp	r7, #4
+	bne	.L1519
+	b	.L1520
+.L1518:
+	ldr	r3, [r6, #3984]
+	ldr	r2, .L1528+16
+	ldr	r3, [r3]
+	cmp	r3, r2
+	bne	.L1520
+	mov	r1, fp
+	ldr	r0, .L1528+20
+	bl	printk
+	mov	r2, #2048
+	mov	r0, r9
+	ldr	r1, [r6, #3984]
+	bl	ftl_memcpy
+	ldr	r3, [r6, #3984]
+	ldr	r2, .L1528+4
+	ldr	r3, [r3, #512]
+	strb	r3, [r2, #1]
+	ldr	r3, [r6, #4004]
+	cmp	r3, r5
+	bls	.L1524
+	str	r5, [r6, #4004]
+	bl	FlashSavePhyInfo
+	mov	r8, #0
+.L1520:
+	adds	r5, r5, #1
+	b	.L1517
+.L1524:
+	mov	r8, #0
+.L1521:
+	mov	r0, r10
+	bl	FlashBchSel
+	ldr	r3, [r4, #2772]
+	ldr	r2, [sp, #4]
+	cmp	r3, r2
+	bne	.L1526
+	movs	r0, #0
+	bl	flash_exit_slc_mode
+.L1526:
+	mov	r0, r8
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1529:
+	.align	2
+.L1528:
+	.word	.LANCHOR3+11
+	.word	.LANCHOR0
+	.word	1446522928
+	.word	.LANCHOR2
+	.word	-52655045
+	.word	.LC93
+	.fnend
+	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
+	.align	1
+	.global	FlashInit
+	.thumb
+	.thumb_func
+	.type	FlashInit, %function
+FlashInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r6, r0
+	.pad #28
+	sub	sp, sp, #28
+	mov	r0, #32768
+	bl	ftl_malloc
+	ldr	r5, .L1626
+	ldr	r4, .L1626+4
+	movs	r7, #0
+	add	r9, r4, #12
+	mov	r10, r4
+	str	r0, [r5, #3984]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r5, #4012]
+	mov	r0, #4096
+	bl	ftl_malloc
+	str	r0, [r5, #4016]
+	mov	r0, #32768
+	bl	ftl_malloc
+	str	r0, [r5, #4020]
+	mov	r0, #4096
+	bl	ftl_malloc
+	movs	r3, #50
+	str	r7, [r5, #4004]
+	strb	r3, [r4, #1]
+	strb	r3, [r5, #4008]
+	movs	r3, #128
+	strb	r7, [r4, #2761]
+	str	r3, [r4, #4]
+	movs	r3, #60
+	str	r7, [r5, #3988]
+	strb	r7, [r4]
+	strb	r3, [r5, #4010]
+	str	r0, [r5, #4024]
+	mov	r0, r6
+	bl	NandcInit
+	add	r6, r4, #1792
+.L1535:
+	uxtb	fp, r7
+	mov	r0, fp
+	bl	FlashReset
+	ldr	r2, [r9, r7, lsl #3]
+	add	r3, r9, r7, lsl #3
+	mov	r0, fp
+	ldrb	r8, [r3, #4]	@ zero_extendqisi2
+	str	r2, [sp, #20]
+	bl	NandcFlashCs
+	movs	r3, #144
+	movs	r0, #200
+	ldr	r2, [sp, #20]
+	add	r8, r2, r8, lsl #8
+	str	r3, [r8, #2056]
+	movs	r3, #0
+	str	r3, [r8, #2052]
+	bl	NandcDelayns
+	ldr	r3, [r8, #2048]
+	mov	r0, fp
+	strb	r3, [r6]
+	ldr	r3, [r8, #2048]
+	strb	r3, [r6, #1]
+	ldr	r3, [r8, #2048]
+	strb	r3, [r6, #2]
+	ldr	r3, [r8, #2048]
+	strb	r3, [r6, #3]
+	ldr	r3, [r8, #2048]
+	strb	r3, [r6, #4]
+	ldr	r3, [r8, #2048]
+	strb	r3, [r6, #5]
+	bl	NandcFlashDeCs
+	ldrb	r2, [r6]	@ zero_extendqisi2
+	subs	r3, r2, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L1531
+	ldrb	r1, [r6, #2]	@ zero_extendqisi2
+	ldrb	r3, [r6, #1]	@ zero_extendqisi2
+	ldr	r0, .L1626+8
+	str	r1, [sp]
+	ldrb	r1, [r6, #3]	@ zero_extendqisi2
+	str	r1, [sp, #4]
+	ldrb	r1, [r6, #4]	@ zero_extendqisi2
+	str	r1, [sp, #8]
+	ldrb	r1, [r6, #5]	@ zero_extendqisi2
+	str	r1, [sp, #12]
+	adds	r1, r7, #1
+	bl	printk
+.L1531:
+	cbnz	r7, .L1532
+	ldrb	r3, [r4, #1792]	@ zero_extendqisi2
+	subs	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, #253
+	bhi	.L1576
+	ldrb	r3, [r10, #1793]	@ zero_extendqisi2
+	cmp	r3, #255
+	beq	.L1576
+.L1532:
+	ldrb	r3, [r6]	@ zero_extendqisi2
+	adds	r7, r7, #1
+	adds	r6, r6, #8
+	cmp	r3, #181
+	itt	eq
+	moveq	r3, #44
+	strbeq	r3, [r6, #-8]
+	cmp	r7, #4
+	bne	.L1535
+	ldrb	r3, [r4, #1792]	@ zero_extendqisi2
+	cmp	r3, #173
+	beq	.L1536
+	ldr	r3, .L1626+4
+	ldr	r0, [r3, #2764]
+	bl	NandcSetDdrMode
+.L1536:
+	ldr	r0, .L1626+12
+	mov	r1, #852
+	bl	__memzero
+	ldr	r3, .L1626+16
+	str	r3, [r4, #1788]
+	movs	r3, #0
+	strb	r3, [r4, #8]
+	ldrb	r3, [r4, #1793]	@ zero_extendqisi2
+	cmp	r3, #161
+	beq	.L1537
+	cmp	r3, #241
+	beq	.L1537
+	cmp	r3, #218
+	beq	.L1537
+	cmp	r3, #220
+	bne	.L1538
+.L1537:
+	ldrb	r1, [r4, #1792]	@ zero_extendqisi2
+	movs	r2, #1
+	strb	r2, [r4]
+	movs	r2, #16
+	strb	r2, [r4, #1]
+	cmp	r1, #152
+	strb	r2, [r5, #4010]
+	ldr	r2, .L1626+20
+	strb	r1, [r2, #2969]
+	strb	r3, [r2, #2970]
+	bne	.L1539
+	ldr	r1, .L1626+4
+	ldrsb	r1, [r1, #1796]
+	cmp	r1, #0
+	ittt	ge
+	movge	r0, #24
+	ldrge	r1, .L1626
+	strbge	r0, [r1, #4010]
+.L1539:
+	cmp	r3, #218
+	bne	.L1540
+	mov	r1, #2048
+	b	.L1622
+.L1540:
+	cmp	r3, #220
+	bne	.L1541
+	mov	r1, #4096
+.L1622:
+	strh	r1, [r2, #2982]	@ movhi
+	strb	r3, [r2, #2970]
+.L1541:
+	ldr	r1, .L1626+24
+	movs	r2, #32
+	ldr	r0, .L1626+28
+	bl	ftl_memcpy
+	ldr	r0, .L1626+16
+	movs	r2, #32
+	addw	r1, r0, #2712
+	bl	ftl_memcpy
+.L1538:
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	ldr	r6, .L1626+4
+	cmp	r3, #0
+	bne	.L1542
+	bl	FlashLoadPhyInfoInRam
+	cbnz	r0, .L1544
+	ldr	r3, [r6, #1788]
+	ldrh	r3, [r3, #16]
+	lsrs	r3, r3, #8
+	lsls	r7, r3, #31
+	and	r0, r3, #7
+	strb	r0, [r6, #2760]
+	bmi	.L1544
+	movs	r3, #1
+	strb	r3, [r6, #2761]
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r6, #2760]	@ zero_extendqisi2
+	bl	NandcSetMode
+.L1544:
+	ldr	r3, [r4, #1788]
+	ldr	r6, .L1626+4
+	ldrb	r3, [r3, #26]	@ zero_extendqisi2
+	strb	r3, [r4, #76]
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L1542
+	ldr	r3, [r6, #2764]
+	cbz	r3, .L1547
+	movs	r0, #1
+	bl	FlashSetInterfaceMode
+	movs	r0, #1
+	b	.L1623
+.L1547:
+	ldrb	r0, [r6, #2760]	@ zero_extendqisi2
+	bl	FlashSetInterfaceMode
+	ldrb	r0, [r6, #2760]	@ zero_extendqisi2
+.L1623:
+	bl	NandcSetMode
+	bl	FlashLoadPhyInfo
+	cmp	r0, #0
+	beq	.L1542
+	movs	r0, #1
+	ldr	r6, .L1626+4
+	bl	FlashSetInterfaceMode
+	movs	r0, #1
+	bl	NandcSetMode
+	ldr	r3, [r4, #1788]
+	ldr	r0, .L1626+32
+	ldrh	r1, [r3, #14]
+	bl	printk
+	bl	FlashLoadPhyInfoInRam
+	adds	r1, r0, #1
+	beq	.L1533
+	bl	FlashDieInfoInit
+	ldr	r3, [r6, #1788]
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	bl	FlashGetReadRetryDefault
+	ldr	r3, [r6, #1788]
+	ldrh	r2, [r6, #1824]
+	ldrb	r1, [r3, #9]	@ zero_extendqisi2
+	addw	r2, r2, #4095
+	cmp	r1, r2, asr #12
+	blt	.L1549
+	ldrh	r2, [r3, #14]
+	adds	r2, r2, #255
+	cmp	r1, r2, asr #8
+	bge	.L1550
+.L1549:
+	ldrh	r2, [r3, #14]
+	bic	r2, r2, #255
+	strh	r2, [r3, #14]	@ movhi
+.L1550:
+	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L1551
+	bl	FlashSavePhyInfo
+	movs	r0, #0
+	ldr	r1, [r5, #4000]
+	bl	FlashDdrParaScan
+.L1551:
+	bl	FlashSavePhyInfo
+.L1542:
+	ldr	r2, [r4, #1788]
+	ldr	r6, .L1626+4
+	ldr	r7, .L1626
+	ldrb	r3, [r2, #26]	@ zero_extendqisi2
+	ldrh	r0, [r2, #10]
+	ldrb	r8, [r2, #18]	@ zero_extendqisi2
+	strb	r3, [r4, #76]
+	ldrh	r3, [r2, #16]
+	ubfx	r1, r3, #7, #1
+	strb	r1, [r4, #8]
+	ubfx	r1, r3, #3, #1
+	strb	r1, [r5, #4028]
+	ubfx	r1, r3, #4, #1
+	ubfx	r3, r3, #8, #3
+	strb	r1, [r4, #2820]
+	strb	r3, [r4, #2760]
+	movs	r3, #0
+	ldrb	r1, [r2, #12]	@ zero_extendqisi2
+	str	r3, [r5, #3992]
+	bl	__aeabi_idiv
+	mov	r1, r0
+	mov	r0, r8
+	bl	BuildFlashLsbPageTable
+	bl	FlashDieInfoInit
+	ldr	r3, [r4, #1788]
+	ldrh	r2, [r3, #16]
+	lsls	r2, r2, #25
+	bpl	.L1553
+	ldrb	r0, [r3, #19]	@ zero_extendqisi2
+	ldrb	r3, [r6, #1903]	@ zero_extendqisi2
+	strb	r0, [r6, #1900]
+	strb	r3, [r6, #1901]
+	ldrb	r3, [r6, #1904]	@ zero_extendqisi2
+	strb	r3, [r7, #4009]
+	subs	r3, r0, #1
+	cmp	r3, #6
+	bhi	.L1554
+	ldr	r3, .L1626+36
+	str	r3, [r7, #3992]
+	subs	r3, r0, #5
+	cmp	r3, #1
+	bhi	.L1555
+	movs	r3, #1
+	str	r3, [r6, #2812]
+	b	.L1556
+.L1555:
+	cmp	r0, #7
+	beq	.L1577
+.L1556:
+	ldr	r6, .L1626+40
+	b	.L1557
+.L1627:
+	.align	2
+.L1626:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC94
+	.word	.LANCHOR0+1902
+	.word	.LANCHOR1+256
+	.word	.LANCHOR1
+	.word	.LANCHOR1+2844
+	.word	.LANCHOR0+44
+	.word	.LC95
+	.word	HynixReadRetrial
+	.word	.LANCHOR0+1922
+.L1577:
+	addw	r6, r6, #1930
+.L1557:
+	subs	r2, r6, #1
+	movs	r3, #0
+	adds	r6, r6, #31
+.L1558:
+	ldrsb	r1, [r2, #1]!
+	cmp	r1, #0
+	it	eq
+	addeq	r3, r3, #1
+	cmp	r2, r6
+	bne	.L1558
+	cmp	r3, #27
+	bls	.L1553
+	bl	FlashGetReadRetryDefault
+	bl	FlashSavePhyInfo
+	b	.L1553
+.L1554:
+	sub	r3, r0, #17
+	cmp	r3, #2
+	bhi	.L1560
+	ldr	r3, .L1628
+	cmp	r0, #19
+	str	r3, [r7, #3992]
+	ite	ne
+	movne	r3, #7
+	moveq	r3, #15
+	strb	r3, [r7, #4009]
+	b	.L1553
+.L1560:
+	cmp	r0, #33
+	beq	.L1562
+	sub	r3, r0, #65
+	cmp	r3, #1
+	bhi	.L1563
+.L1562:
+	ldr	r3, .L1628+4
+	str	r3, [r5, #3992]
+	movs	r3, #4
+	strb	r3, [r4, #1901]
+	movs	r3, #7
+	strb	r3, [r5, #4009]
+	b	.L1553
+.L1563:
+	sub	r3, r0, #67
+	uxtb	r3, r3
+	cmp	r3, #1
+	bls	.L1564
+	sub	r2, r0, #34
+	cmp	r2, #1
+	bhi	.L1565
+.L1564:
+	ldr	r2, .L1628+4
+	cmp	r0, #35
+	str	r2, [r5, #3992]
+	beq	.L1566
+	cmp	r0, #68
+	beq	.L1566
+	ldr	r2, .L1628+8
+	movs	r1, #7
+	strb	r1, [r2, #4009]
+	b	.L1567
+.L1566:
+	movs	r2, #17
+	strb	r2, [r5, #4009]
+.L1567:
+	cmp	r3, #1
+	ite	ls
+	movls	r3, #4
+	movhi	r3, #5
+	strb	r3, [r4, #1901]
+	b	.L1553
+.L1565:
+	cmp	r0, #49
+	itt	eq
+	ldreq	r3, .L1628+12
+	streq	r3, [r7, #3992]
+.L1553:
+	ldr	r1, [r4, #2772]
+	ldr	r2, .L1628+16
+	ldr	r3, .L1628+20
+	cmp	r1, r2
+	bne	.L1569
+	ldrb	r2, [r3, #76]	@ zero_extendqisi2
+	cbz	r2, .L1569
+	ldr	r3, [r3, #1788]
+	movs	r2, #0
+	strb	r2, [r3, #18]
+.L1569:
+	ldrb	r2, [r4, #1792]	@ zero_extendqisi2
+	ldr	r3, .L1628+20
+	cmp	r2, #44
+	bne	.L1570
+	ldrb	r2, [r3, #2761]	@ zero_extendqisi2
+	cbz	r2, .L1570
+	movs	r0, #1
+	movs	r2, #0
+	strb	r2, [r3, #2761]
+	bl	FlashSetInterfaceMode
+	movs	r0, #1
+	bl	NandcSetMode
+.L1570:
+	movs	r0, #0
+	bl	flash_enter_slc_mode
+	ldrb	r3, [r4, #2760]	@ zero_extendqisi2
+	tst	r3, #6
+	beq	.L1571
+	ldr	r2, .L1628+20
+	ldrb	r2, [r2, #2761]	@ zero_extendqisi2
+	cbnz	r2, .L1572
+	lsls	r3, r3, #31
+	bmi	.L1571
+.L1572:
+	movs	r0, #0
+	ldr	r1, [r5, #4000]
+	bl	FlashDdrParaScan
+.L1571:
+	movs	r0, #0
+	mov	r8, #16
+	bl	flash_exit_slc_mode
+	ldr	r3, [r4, #1788]
+	ldr	r6, .L1628+20
+	ldrb	r0, [r3, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	ldr	r0, .L1628+24
+	bl	FlashReadIdbDataRaw
+	ldr	r0, .L1628+28
+	strb	r8, [r4, #1]
+	bl	FlashTimingCfg
+	ldr	r5, [r4, #1788]
+	ldrb	r3, [r5, #12]	@ zero_extendqisi2
+	ldrh	r7, [r5, #14]
+	strh	r3, [r4, #1872]	@ movhi
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	str	r3, [r4, #1868]
+	ldr	r3, [r4, #1792]
+	str	r3, [r4, #1864]
+	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
+	strh	r3, [r4, #1874]	@ movhi
+	ldrb	r3, [r5, #13]	@ zero_extendqisi2
+	strh	r7, [r4, #1878]	@ movhi
+	strh	r3, [r4, #1876]	@ movhi
+	ldrh	r3, [r5, #10]
+	strh	r3, [r4, #1880]	@ movhi
+	ldrb	r1, [r5, #12]	@ zero_extendqisi2
+	ldrh	r0, [r5, #10]
+	bl	__aeabi_idiv
+	strh	r0, [r4, #1882]	@ movhi
+	ldrb	r2, [r5, #9]	@ zero_extendqisi2
+	strh	r2, [r4, #1884]	@ movhi
+	ldrb	r1, [r5, #9]	@ zero_extendqisi2
+	ldrh	r3, [r5, #10]
+	smulbb	r3, r1, r3
+	mov	r1, #512
+	strh	r1, [r4, #1888]	@ movhi
+	ldrb	r1, [r4, #1]	@ zero_extendqisi2
+	strh	r1, [r4, #1890]	@ movhi
+	uxth	r3, r3
+	ldrb	r1, [r4]	@ zero_extendqisi2
+	strh	r3, [r4, #1886]	@ movhi
+	cmp	r1, #1
+	bne	.L1574
+	lsls	r3, r3, #1
+	lsrs	r7, r7, #1
+	lsls	r2, r2, #1
+	strh	r3, [r6, #1886]	@ movhi
+	strb	r8, [r6, #1]
+	movs	r3, #8
+	strh	r7, [r6, #1878]	@ movhi
+	strh	r2, [r6, #1884]	@ movhi
+	strh	r3, [r6, #1890]	@ movhi
+.L1574:
+	ldrb	r0, [r5, #20]	@ zero_extendqisi2
+	bl	FlashBchSel
+	bl	FlashSuspend
+	movs	r0, #0
+	b	.L1533
+.L1576:
+	mvn	r0, #1
+.L1533:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1629:
+	.align	2
+.L1628:
+	.word	MicronReadRetrial
+	.word	ToshibaReadRetrial
+	.word	.LANCHOR2
+	.word	SamsungReadRetrial
+	.word	1446522928
+	.word	.LANCHOR0
+	.word	.LANCHOR2+1932
+	.word	150000
+	.fnend
+	.size	FlashInit, .-FlashInit
+	.align	1
+	.global	FlashPageProgMsbFFData
+	.thumb
+	.thumb_func
+	.type	FlashPageProgMsbFFData, %function
+FlashPageProgMsbFFData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r4, r2
+	ldr	r2, .L1645
+	mov	r8, r1
+	mov	r7, r0
+	ldr	r3, [r2, #1788]
+	mov	r5, r2
+	ldrb	r1, [r2, #76]	@ zero_extendqisi2
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	cbz	r1, .L1631
+	ldr	r1, [r2, #2772]
+	ldr	r2, .L1645+4
+	cmp	r1, r2
+	beq	.L1630
+.L1631:
+	subs	r2, r3, #5
+	cmp	r2, #2
+	bls	.L1632
+	cmp	r3, #68
+	beq	.L1632
+	cmp	r3, #35
+	beq	.L1632
+	cmp	r3, #19
+	bne	.L1630
+.L1632:
+	ldr	r9, .L1645
+	movw	r10, #65535
+	ldr	r6, .L1645+8
+.L1634:
+	ldr	r3, [r5, #1788]
+	ldrh	r3, [r3, #10]
+	cmp	r3, r4
+	bls	.L1630
+	add	r3, r9, r4, lsl #1
+	ldrh	r3, [r3, #592]
+	cmp	r3, r10
+	bne	.L1630
+	movs	r1, #255
+	mov	r2, #32768
+	ldr	r0, [r6, #4012]
+	bl	memset
+	add	r1, r4, r8
+	adds	r4, r4, #1
+	mov	r0, r7
+	ldr	r2, [r6, #4012]
+	movs	r3, #0
+	bl	FlashProgPage
+	uxth	r4, r4
+	b	.L1634
+.L1630:
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L1646:
+	.align	2
+.L1645:
+	.word	.LANCHOR0
+	.word	1446522928
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashPageProgMsbFFData, .-FlashPageProgMsbFFData
+	.align	1
+	.global	FlashReadSlc2KPages
+	.thumb
+	.thumb_func
+	.type	FlashReadSlc2KPages, %function
+FlashReadSlc2KPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1677
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r6, #0
+	ldr	r7, .L1677+4
+	.pad #28
+	sub	sp, sp, #28
+	ldrb	r9, [r3, #265]	@ zero_extendqisi2
+	mov	r8, r1
+	mov	fp, r0
+	str	r2, [sp, #8]
+	mov	r10, r7
+.L1648:
+	cmp	r6, r8
+	beq	.L1676
+	rsb	r3, r6, r8
+	add	r2, sp, #20
+	mov	r0, fp
+	ldr	r1, [sp, #8]
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #16
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r7, #1616]	@ zero_extendqisi2
+	ldr	r3, [sp, #16]
+	cmp	r3, r2
+	bcc	.L1649
+	mov	r3, #-1
+	str	r3, [fp]
+	b	.L1650
+.L1649:
+	add	r3, r3, r7
+	ldrb	r4, [r3, #1620]	@ zero_extendqisi2
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	mov	r0, r4
+	bl	NandcFlashCs
+	mov	r0, r4
+	ldr	r1, [sp, #20]
+	bl	FlashReadCmd
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	ldr	r3, [fp, #12]
+	movs	r1, #0
+	mov	r2, r9
+	mov	r0, r4
+	str	r3, [sp]
+	ldr	r3, [fp, #8]
+	bl	NandcXferData
+	ldr	r1, [r7, #4]
+	ldr	r3, [sp, #20]
+	mov	r5, r0
+	mov	r0, r4
+	add	r1, r1, r3
+	bl	FlashReadCmd
+	ldr	r3, [fp, #8]
+	cbz	r3, .L1651
+	add	r3, r3, #2048
+.L1651:
+	ldr	r2, [fp, #12]
+	cbz	r2, .L1652
+	adds	r2, r2, #8
+.L1652:
+	str	r2, [sp]
+	movs	r1, #0
+	mov	r2, r9
+	mov	r0, r4
+	bl	NandcXferData
+	str	r0, [sp, #12]
+	mov	r0, r4
+	bl	NandcFlashDeCs
+	ldr	r3, [sp, #12]
+	cmp	r5, r3
+	it	cc
+	movcc	r5, r3
+	ldrb	r3, [r10, #1892]	@ zero_extendqisi2
+	add	r3, r3, r3, lsl #1
+	cmp	r5, r3, asr #2
+	bls	.L1653
+	adds	r0, r5, #1
+	it	ne
+	movne	r5, #256
+	str	r5, [fp]
+	b	.L1655
+.L1653:
+	movs	r3, #0
+	str	r3, [fp]
+.L1655:
+	ldr	r3, [fp, #12]
+	cbz	r3, .L1656
+	ldr	r2, [r3, #8]
+	adds	r1, r2, #1
+	bne	.L1656
+	ldr	r3, [r3]
+	adds	r3, r3, #1
+	it	ne
+	strne	r2, [fp]
+.L1656:
+	ldr	r3, [fp]
+	adds	r2, r3, #1
+	bne	.L1650
+	ldr	r1, [fp, #4]
+	ldr	r0, .L1677+8
+	ldrb	r2, [r10, #1892]	@ zero_extendqisi2
+	bl	printk
+	ldr	r1, [fp, #8]
+	cbz	r1, .L1658
+	ldr	r0, .L1677+12
+	movs	r2, #4
+	movs	r3, #8
+	bl	rknand_print_hex
+.L1658:
+	ldr	r1, [fp, #12]
+	cbz	r1, .L1650
+	movs	r2, #4
+	ldr	r0, .L1677+16
+	mov	r3, r2
+	bl	rknand_print_hex
+.L1650:
+	adds	r6, r6, #1
+	add	fp, fp, #36
+	b	.L1648
+.L1676:
+	movs	r0, #0
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1678:
+	.align	2
+.L1677:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LC96
+	.word	.LC97
+	.word	.LC98
+	.fnend
+	.size	FlashReadSlc2KPages, .-FlashReadSlc2KPages
+	.align	1
+	.global	FlashReadPages
+	.thumb
+	.thumb_func
+	.type	FlashReadPages, %function
+FlashReadPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1778
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #52
+	sub	sp, sp, #52
+	ldrb	r3, [r3, #265]	@ zero_extendqisi2
+	mov	r10, r0
+	ldr	r5, .L1778+4
+	str	r1, [sp, #28]
+	str	r3, [sp, #24]
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	str	r2, [sp, #16]
+	str	r3, [sp, #32]
+	ldrb	r3, [r5]	@ zero_extendqisi2
+	cbz	r3, .L1722
+	bl	FlashReadSlc2KPages
+	b	.L1773
+.L1722:
+	mov	r8, r3
+	str	r3, [sp, #12]
+.L1680:
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #28]
+	cmp	r3, r2
+	bcs	.L1775
+	ldr	r3, [sp, #12]
+	mov	r9, #36
+	ldr	r2, [sp, #12]
+	ldr	r1, [sp, #16]
+	mul	r9, r9, r3
+	ldr	r3, [sp, #28]
+	subs	r3, r3, r2
+	add	r2, sp, #44
+	add	r7, r10, r9
+	uxtb	r3, r3
+	ldr	fp, [r7, #4]
+	mov	r0, r7
+	str	r3, [sp]
+	add	r3, sp, #40
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r5, #1616]	@ zero_extendqisi2
+	ldr	r3, [sp, #40]
+	mov	r6, r0
+	cmp	r3, r2
+	bcc	.L1682
+	mov	r3, #-1
+	str	r3, [r10, r9]
+	b	.L1683
+.L1682:
+	add	r3, r3, r5
+	ldrb	r4, [r3, #1620]	@ zero_extendqisi2
+	ldr	r3, .L1778+8
+	mov	r0, r4
+	ldrb	r3, [r3, #4028]	@ zero_extendqisi2
+	cmp	r3, #0
+	it	eq
+	moveq	r6, #0
+	bl	NandcWaitFlashReady
+	ldr	r3, .L1778+4
+	ldr	r3, [r3, #1788]
+	ldrb	r1, [r3, #19]	@ zero_extendqisi2
+	subs	r3, r1, #1
+	cmp	r3, #6
+	bhi	.L1685
+	adds	r2, r5, r4
+	cmp	r1, #7
+	ldrb	r3, [r2, #1914]	@ zero_extendqisi2
+	it	eq
+	ldrbeq	r3, [r2, #1922]	@ zero_extendqisi2
+	ldr	r2, .L1778+4
+	add	r2, r2, r4
+	ldrb	r2, [r2, #2756]	@ zero_extendqisi2
+	cmp	r2, r3
+	beq	.L1685
+	mov	r0, r4
+	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
+	ldr	r2, .L1778+12
+	bl	HynixSetRRPara
+.L1685:
+	mov	r0, r4
+	and	r3, fp, #-2147483648
+	str	r3, [sp, #20]
+	bl	NandcFlashCs
+	ldr	r3, [sp, #16]
+	cmp	r3, #1
+	beq	.L1687
+	ldr	r3, [sp, #20]
+	cbz	r3, .L1688
+.L1687:
+	ldr	r3, .L1778+4
+	ldrb	r3, [r3, #76]	@ zero_extendqisi2
+	cbz	r3, .L1688
+	mov	r0, r4
+	bl	flash_enter_slc_mode
+.L1690:
+	mov	fp, #0
+	b	.L1689
+.L1688:
+	mov	r0, r4
+	bl	flash_exit_slc_mode
+	b	.L1690
+.L1776:
+	cmp	r4, #255
+	beq	.L1723
+.L1691:
+	cbz	r6, .L1693
+	ldr	r2, [r5, #4]
+	mov	r0, r4
+	add	r2, r2, r1
+	bl	FlashReadDpCmd
+.L1694:
+	mov	r0, r4
+	bl	NandcWaitFlashReady
+	cbz	r6, .L1692
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	bl	FlashReadDpDataOutCmd
+.L1692:
+	ldr	r3, [r7, #12]
+	mov	r0, r4
+	movs	r1, #0
+	ldr	r2, [sp, #24]
+	str	r3, [sp]
+	ldr	r3, [r7, #8]
+	bl	NandcXferData
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	mov	ip, r0
+	cbz	r3, .L1725
+	cmp	r0, #-1
+	bne	.L1725
+	movs	r6, #0
+	strb	fp, [r5, #8]
+.L1689:
+	ldr	r1, [sp, #44]
+	adds	r0, r1, #1
+	bne	.L1691
+	b	.L1776
+.L1693:
+	mov	r0, r4
+	bl	FlashReadCmd
+	b	.L1694
+.L1723:
+	movs	r6, #0
+	b	.L1692
+.L1725:
+	mov	fp, ip
+	cbz	r6, .L1696
+	ldr	r3, .L1778+4
+	mov	r0, r4
+	str	ip, [sp, #36]
+	ldr	r1, [r3, #4]
+	ldr	r3, [sp, #44]
+	add	r1, r1, r3
+	bl	FlashReadDpDataOutCmd
+	add	r3, r9, #36
+	add	r3, r3, r10
+	mov	r0, r4
+	movs	r1, #0
+	ldr	r2, [r3, #12]
+	str	r2, [sp]
+	ldr	r2, [sp, #24]
+	ldr	r3, [r3, #8]
+	bl	NandcXferData
+	cmp	r0, #-1
+	ldr	ip, [sp, #36]
+	it	eq
+	moveq	r6, #0
+	mov	r8, r0
+.L1696:
+	mov	r0, r4
+	str	ip, [sp, #36]
+	bl	NandcFlashDeCs
+	ldr	ip, [sp, #36]
+	ldrb	r3, [sp, #32]	@ zero_extendqisi2
+	cmp	ip, #-1
+	strb	r3, [r5, #8]
+	bne	.L1703
+	ldrb	r3, [r5, #2761]	@ zero_extendqisi2
+	cbnz	r3, .L1698
+.L1702:
+	ldr	r3, .L1778+8
+	ldr	r6, [r3, #3992]
+	cbnz	r6, .L1699
+	b	.L1777
+.L1698:
+	ldr	r3, [r5, #1828]
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r6, [r3, #304]
+	movs	r3, #1
+	str	r3, [sp]
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	bl	FlashDdrTunningRead
+	cmp	r0, #-1
+	mov	fp, r0
+	beq	.L1701
+	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
+	cmp	r0, r3, lsr #1
+	bls	.L1727
+.L1701:
+	ubfx	r0, r6, #8, #8
+	bl	NandcSetDdrPara
+	cmp	fp, #-1
+	beq	.L1702
+	b	.L1727
+.L1699:
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	blx	r6
+	cmp	r0, #-1
+	mov	fp, r0
+	bne	.L1704
+	ldr	r3, [r5, #1788]
+	ldrb	r3, [r3, #19]	@ zero_extendqisi2
+	subs	r3, r3, #1
+	cmp	r3, #6
+	bhi	.L1705
+	mov	r0, r4
+	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
+	ldr	r2, .L1778+12
+	movs	r3, #0
+	bl	HynixSetRRPara
+.L1705:
+	ldr	r1, [sp, #44]
+	mov	r0, r4
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	bl	FlashReadRawPage
+	ldr	r1, [r7, #4]
+	ldrb	r2, [r5, #1892]	@ zero_extendqisi2
+	mov	fp, r0
+	ldr	r0, .L1778+16
+	mov	r3, fp
+	bl	printk
+	cmp	fp, #-1
+	bne	.L1704
+	ldrb	r6, [r5, #76]	@ zero_extendqisi2
+	cbz	r6, .L1706
+	ldr	r3, [sp, #16]
+	mov	r0, r4
+	cmp	r3, #1
+	beq	.L1707
+	ldr	r3, [sp, #20]
+	cbz	r3, .L1708
+.L1707:
+	bl	flash_enter_slc_mode
+	b	.L1709
+.L1708:
+	bl	flash_exit_slc_mode
+.L1709:
+	ldr	r3, .L1778+8
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r2, [r7, #8]
+	ldr	r6, [r3, #3992]
+	ldr	r3, [r7, #12]
+	blx	r6
+	movs	r6, #0
+	mov	fp, r0
+	b	.L1710
+.L1777:
+	mov	r0, r4
+	ldr	r1, [sp, #44]
+	ldr	r2, [r7, #8]
+	ldr	r3, [r7, #12]
+	bl	FlashReadRawPage
+	mov	fp, r0
+	b	.L1710
+.L1727:
+	movs	r6, #0
+.L1703:
+	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
+	add	r3, r3, r3, lsl #1
+	cmp	fp, r3, asr #2
+	bls	.L1712
+	ldr	r3, .L1778+8
+	ldr	r3, [r3, #3992]
+	cbz	r3, .L1729
+.L1710:
+	cmp	fp, #-1
+	beq	.L1706
+	b	.L1712
+.L1729:
+	mov	fp, #256
+.L1706:
+	str	fp, [r10, r9]
+	b	.L1713
+.L1779:
+	.align	2
+.L1778:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR0+1906
+	.word	.LC99
+.L1704:
+	movs	r6, #0
+.L1712:
+	cmp	fp, #256
+	beq	.L1706
+	movs	r3, #0
+	str	r3, [r10, r9]
+.L1713:
+	ldr	r3, [r10, r9]
+	adds	r2, r3, #1
+	bne	.L1715
+	ldr	r1, [r7, #4]
+	ldr	r0, .L1780
+	ldrb	r2, [r5, #1892]	@ zero_extendqisi2
+	bl	printk
+	ldr	r1, [r7, #12]
+	cbz	r1, .L1715
+	movs	r2, #4
+	ldr	r0, .L1780+4
+	mov	r3, r2
+	bl	rknand_print_hex
+.L1715:
+	cbz	r6, .L1717
+	ldrb	r3, [r5, #1892]	@ zero_extendqisi2
+	add	r3, r3, r3, lsl #1
+	cmp	r8, r3, asr #2
+	bls	.L1718
+	ldr	r3, .L1780+8
+	ldr	r3, [r3, #3992]
+	cmp	r3, #0
+	it	eq
+	moveq	r8, #256
+.L1718:
+	add	r9, r9, #36
+	cmp	r8, #-1
+	str	r8, [r10, r9]
+	beq	.L1717
+	cmp	r8, #256
+	itt	ne
+	movne	r3, #0
+	strne	r3, [r10, r9]
+.L1717:
+	ldr	r3, [sp, #12]
+	add	r3, r3, r6
+	str	r3, [sp, #12]
+	ldr	r3, [sp, #16]
+	cmp	r3, #1
+	beq	.L1719
+	ldr	r3, [sp, #20]
+	cbz	r3, .L1683
+.L1719:
+	ldrb	r3, [r5, #76]	@ zero_extendqisi2
+	cbz	r3, .L1683
+	mov	r0, r4
+	bl	flash_exit_slc_mode
+.L1683:
+	ldr	r3, [sp, #12]
+	adds	r3, r3, #1
+	str	r3, [sp, #12]
+	b	.L1680
+.L1775:
+	movs	r0, #0
+.L1773:
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1781:
+	.align	2
+.L1780:
+	.word	.LC96
+	.word	.LC98
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashReadPages, .-FlashReadPages
+	.align	1
+	.global	FlashLoadFactorBbt
+	.thumb
+	.thumb_func
+	.type	FlashLoadFactorBbt, %function
+FlashLoadFactorBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r1, #16
+	ldr	r7, .L1794
+	.pad #52
+	sub	sp, sp, #52
+	ldr	r4, .L1794+4
+	movs	r5, #0
+	mov	fp, #-1
+	ldrh	r3, [r7, #1878]
+	add	r0, r4, #4032
+	ldrh	r6, [r7, #1876]
+	mov	r10, r5
+	mov	r8, r7
+	mov	r9, r4
+	smulbb	r6, r6, r3
+	bl	__memzero
+	ldr	r3, [r4, #4016]
+	uxth	r6, r6
+	str	r5, [sp, #20]
+	str	r3, [sp, #24]
+.L1783:
+	ldrb	r3, [r8, #1616]	@ zero_extendqisi2
+	uxtb	r7, r5
+	cmp	r3, r7
+	bls	.L1793
+	mul	ip, r6, r7
+	subs	r4, r6, #1
+	sub	r3, r6, #12
+	uxth	r4, r4
+.L1784:
+	cmp	r4, r3
+	ble	.L1786
+	add	r2, ip, r4
+	movs	r1, #1
+	add	r0, sp, #12
+	str	r3, [sp, #4]
+	lsls	r2, r2, #10
+	str	r2, [sp, #16]
+	mov	r2, r1
+	str	ip, [sp]
+	bl	FlashReadPages
+	ldr	r2, [sp, #12]
+	ldr	ip, [sp]
+	adds	r2, r2, #1
+	ldr	r3, [sp, #4]
+	beq	.L1785
+	ldr	r2, [r9, #4016]
+	ldrh	r1, [r2]
+	movw	r2, #61664
+	cmp	r1, r2
+	bne	.L1785
+	mov	r1, r7
+	ldr	r0, .L1794+8
+	mov	r2, r4
+	add	r10, r10, #1
+	bl	printk
+	ldr	r3, .L1794+4
+	uxth	r10, r10
+	add	r7, r3, r7, lsl #1
+	strh	r4, [r7, #4032]	@ movhi
+	b	.L1786
+.L1785:
+	subs	r4, r4, #1
+	uxth	r4, r4
+	b	.L1784
+.L1786:
+	ldrb	r3, [r8, #1616]	@ zero_extendqisi2
+	adds	r5, r5, #1
+	cmp	r3, r10
+	it	eq
+	moveq	fp, #0
+	b	.L1783
+.L1793:
+	mov	r0, fp
+	add	sp, sp, #52
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1795:
+	.align	2
+.L1794:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC100
+	.fnend
+	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
+	.align	1
+	.global	FlashProgSlc2KPages
+	.thumb
+	.thumb_func
+	.type	FlashProgSlc2KPages, %function
+FlashProgSlc2KPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #68
+	sub	sp, sp, #68
+	ldr	r8, .L1826+20
+	movs	r7, #0
+	str	r3, [sp, #12]
+	mov	r6, r1
+	ldr	r3, .L1826
+	mov	r9, r2
+	mov	r4, r0
+	mov	r10, r0
+	mov	fp, r8
+	ldrb	r3, [r3, #265]	@ zero_extendqisi2
+	str	r3, [sp, #8]
+.L1797:
+	cmp	r7, r6
+	beq	.L1825
+	subs	r3, r6, r7
+	add	r2, sp, #20
+	mov	r0, r10
+	mov	r1, r9
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #24
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r8, #1616]	@ zero_extendqisi2
+	ldr	r3, [sp, #24]
+	cmp	r3, r2
+	bcc	.L1798
+	mov	r3, #-1
+	str	r3, [r10]
+	b	.L1799
+.L1798:
+	add	r3, r3, r8
+	ldrb	r5, [r3, #1620]	@ zero_extendqisi2
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	bl	NandcFlashCs
+	mov	r0, r5
+	ldr	r1, [sp, #20]
+	bl	FlashProgFirstCmd
+	ldr	r3, [r10, #12]
+	movs	r1, #1
+	mov	r0, r5
+	ldr	r2, [sp, #8]
+	str	r3, [sp]
+	ldr	r3, [r10, #8]
+	bl	NandcXferData
+	mov	r0, r5
+	ldr	r1, [sp, #20]
+	bl	FlashProgSecondCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	ldr	r1, [sp, #20]
+	bl	FlashReadStatus
+	ldr	r3, [sp, #20]
+	sbfx	r0, r0, #0, #1
+	str	r0, [r10]
+	mov	r0, r5
+	ldr	r1, [r8, #4]
+	add	r1, r1, r3
+	bl	FlashProgFirstCmd
+	ldr	r3, [r10, #8]
+	cbz	r3, .L1800
+	add	r3, r3, #2048
+.L1800:
+	ldr	r2, [r10, #12]
+	cbz	r2, .L1801
+	adds	r2, r2, #8
+.L1801:
+	str	r2, [sp]
+	movs	r1, #1
+	ldr	r2, [sp, #8]
+	mov	r0, r5
+	bl	NandcXferData
+	ldr	r1, [fp, #4]
+	mov	r0, r5
+	ldr	r3, [sp, #20]
+	add	r1, r1, r3
+	bl	FlashProgSecondCmd
+	mov	r0, r5
+	bl	NandcWaitFlashReady
+	mov	r0, r5
+	ldr	r1, [sp, #20]
+	bl	FlashReadStatus
+	lsls	r2, r0, #31
+	mov	r0, r5
+	itt	mi
+	movmi	r3, #-1
+	strmi	r3, [r10]
+	bl	NandcFlashDeCs
+.L1799:
+	adds	r7, r7, #1
+	add	r10, r10, #36
+	b	.L1797
+.L1825:
+	ldr	r3, [sp, #12]
+	cmp	r3, #0
+	beq	.L1824
+	ldr	r8, .L1826+24
+	mov	r10, #0
+	mov	fp, r8
+.L1804:
+	cmp	r10, r6
+	beq	.L1824
+	ldr	r3, [r4]
+	adds	r3, r3, #1
+	bne	.L1805
+	ldr	r1, [r4, #4]
+	ldr	r0, .L1826+4
+	bl	printk
+	b	.L1806
+.L1805:
+	rsb	r3, r10, r6
+	mov	r1, r9
+	add	r2, sp, #20
+	mov	r0, r4
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #24
+	mov	r7, r4
+	bl	LogAddr2PhyAddr
+	ldr	r2, [r8, #4020]
+	movs	r3, #0
+	str	r3, [r2]
+	ldr	r2, [r8, #4024]
+	str	r3, [r2]
+	ldmia	r7!, {r0, r1, r2, r3}
+	add	r5, sp, #28
+	stmia	r5!, {r0, r1, r2, r3}
+	ldmia	r7!, {r0, r1, r2, r3}
+	stmia	r5!, {r0, r1, r2, r3}
+	add	r0, sp, #28
+	ldr	r3, [r7]
+	movs	r1, #1
+	mov	r2, r9
+	str	r3, [r5]
+	ldr	r3, [r8, #4020]
+	str	r3, [sp, #36]
+	ldr	r3, [r8, #4024]
+	str	r3, [sp, #40]
+	bl	FlashReadPages
+	ldr	r5, [sp, #28]
+	adds	r3, r5, #1
+	bne	.L1807
+	ldr	r0, .L1826+8
+	ldr	r1, [r4, #4]
+	bl	printk
+	str	r5, [r4]
+.L1807:
+	ldr	r3, [r4, #12]
+	cbz	r3, .L1808
+	ldr	r2, [r3]
+	ldr	r3, [fp, #4024]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1808
+	ldr	r0, .L1826+12
+	ldr	r1, [r4, #4]
+	bl	printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L1808:
+	ldr	r3, [r4, #8]
+	cbz	r3, .L1806
+	ldr	r2, [r3]
+	ldr	r3, [fp, #4020]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L1806
+	ldr	r0, .L1826+16
+	ldr	r1, [r4, #4]
+	bl	printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L1806:
+	add	r10, r10, #1
+	adds	r4, r4, #36
+	b	.L1804
+.L1824:
+	movs	r0, #0
+	add	sp, sp, #68
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1827:
+	.align	2
+.L1826:
+	.word	.LANCHOR1
+	.word	.LC101
+	.word	.LC102
+	.word	.LC103
+	.word	.LC104
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashProgSlc2KPages, .-FlashProgSlc2KPages
+	.align	1
+	.global	FtlLoadFactoryBbt
+	.thumb
+	.thumb_func
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r6, #0
+	ldr	r5, .L1839
+	ldr	r7, .L1839+4
+	ldr	r3, [r5, #756]
+	subw	r8, r7, #2978
+	ldr	r9, [r5, #1796]
+	mov	r10, r8
+	str	r3, [r5, #4056]
+	str	r9, [r5, #4060]
+.L1829:
+	ldrh	r3, [r8, #2850]
+	cmp	r6, r3
+	bcs	.L1838
+	ldrh	r4, [r8, #2894]
+	movw	fp, #61664
+	movw	r3, #65535
+	strh	r3, [r7, #2]!	@ movhi
+	subs	r4, r4, #1
+	uxth	r4, r4
+.L1830:
+	ldrh	r3, [r10, #2894]
+	sub	r2, r3, #16
+	cmp	r4, r2
+	ble	.L1832
+	mla	r3, r3, r6, r4
+	movs	r1, #1
+	ldr	r0, .L1839+8
+	mov	r2, r1
+	lsls	r3, r3, #10
+	str	r3, [r5, #4052]
+	bl	FlashReadPages
+	ldr	r3, [r5, #4048]
+	adds	r3, r3, #1
+	beq	.L1831
+	ldrh	r3, [r9]
+	cmp	r3, fp
+	bne	.L1831
+	strh	r4, [r7]	@ movhi
+	b	.L1832
+.L1831:
+	subs	r4, r4, #1
+	uxth	r4, r4
+	b	.L1830
+.L1832:
+	adds	r6, r6, #1
+	b	.L1829
+.L1838:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1840:
+	.align	2
+.L1839:
+	.word	.LANCHOR2
+	.word	.LANCHOR0+2978
+	.word	.LANCHOR2+4048
+	.fnend
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	.align	1
+	.global	FtlGetLastWrittenPage
+	.thumb
+	.thumb_func
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L1852
+	cmp	r1, #1
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	.pad #104
+	sub	sp, sp, #104
+	it	eq
+	ldrheq	r4, [r3, #2900]
+	mov	r8, r1
+	it	ne
+	ldrhne	r4, [r3, #2898]
+	lsls	r6, r0, #10
+	add	r3, sp, #40
+	add	r0, sp, #4
+	subs	r5, r4, #1
+	str	r3, [sp, #16]
+	movs	r1, #1
+	mov	r2, r8
+	uxth	r5, r5
+	movs	r7, #0
+	str	r7, [sp, #12]
+	sxth	r3, r5
+	orrs	r3, r3, r6
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #40]
+	adds	r3, r3, #1
+	bne	.L1844
+.L1845:
+	sxth	r3, r7
+	sxth	r4, r5
+	cmp	r3, r4
+	bgt	.L1844
+	add	r4, r4, r3
+	add	r0, sp, #4
+	movs	r1, #1
+	mov	r2, r8
+	add	r4, r4, r4, lsr #31
+	asrs	r4, r4, #1
+	sxth	r3, r4
+	orrs	r3, r3, r6
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #40]
+	adds	r3, r3, #1
+	bne	.L1846
+	ldr	r3, [sp, #44]
+	adds	r3, r3, #1
+	bne	.L1846
+	ldr	r3, [sp, #4]
+	adds	r3, r3, #1
+	beq	.L1846
+	subs	r4, r4, #1
+	uxth	r5, r4
+	b	.L1845
+.L1846:
+	adds	r3, r4, #1
+	uxth	r7, r3
+	b	.L1845
+.L1844:
+	sxth	r0, r5
+	add	sp, sp, #104
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1853:
+	.align	2
+.L1852:
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.align	1
+	.global	FtlLoadBbt
+	.thumb
+	.thumb_func
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movs	r3, #0
+	ldr	r4, .L1883
+	ldr	r5, .L1883+4
+	ldr	r7, [r4, #1796]
+	mov	r8, r4
+	str	r3, [r4, #4056]
+	str	r7, [r4, #4060]
+	bl	FtlBbtMemInit
+	ldrh	r6, [r5, #2894]
+	subs	r6, r6, #1
+	uxth	r6, r6
+.L1855:
+	ldrh	r3, [r5, #2894]
+	subs	r3, r3, #48
+	cmp	r6, r3
+	ble	.L1858
+	movs	r1, #1
+	ldr	r0, .L1883+8
+	lsls	r3, r6, #10
+	str	r3, [r4, #4052]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r3, [r4, #4048]
+	adds	r3, r3, #1
+	bne	.L1856
+	movs	r1, #1
+	ldr	r3, [r8, #4052]
+	ldr	r0, .L1883+8
+	mov	r2, r1
+	adds	r3, r3, #1
+	str	r3, [r8, #4052]
+	bl	FlashReadPages
+.L1856:
+	ldr	r3, [r4, #4048]
+	adds	r3, r3, #1
+	beq	.L1857
+	ldrh	r2, [r7]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L1857
+	ldr	r3, [r7, #4]
+	strh	r6, [r5, #2968]	@ movhi
+	str	r3, [r5, #2976]
+	ldrh	r3, [r7, #8]
+	strh	r3, [r5, #2972]	@ movhi
+	b	.L1858
+.L1857:
+	subs	r6, r6, #1
+	uxth	r6, r6
+	b	.L1855
+.L1858:
+	ldrh	r3, [r5, #2968]
+	movw	r2, #65535
+	ldr	r6, .L1883+4
+	cmp	r3, r2
+	beq	.L1872
+	ldrh	r3, [r6, #2972]
+	cmp	r3, r2
+	beq	.L1862
+	movs	r1, #1
+	ldr	r0, .L1883+8
+	lsls	r3, r3, #10
+	str	r3, [r4, #4052]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r3, [r4, #4048]
+	adds	r3, r3, #1
+	beq	.L1862
+	ldrh	r2, [r7]
+	movw	r3, #61649
+	cmp	r2, r3
+	bne	.L1862
+	ldr	r3, [r7, #4]
+	ldr	r2, [r6, #2976]
+	cmp	r3, r2
+	itttt	hi
+	strhi	r3, [r6, #2976]
+	ldrhhi	r2, [r6, #2972]
+	ldrhhi	r3, [r7, #8]
+	strhhi	r2, [r6, #2968]	@ movhi
+	it	hi
+	strhhi	r3, [r6, #2972]	@ movhi
+.L1862:
+	ldrh	r0, [r5, #2968]
+	movs	r1, #1
+	bl	FtlGetLastWrittenPage
+	movw	r8, #61649
+	uxth	r6, r0
+	adds	r0, r0, #1
+	strh	r0, [r5, #2970]	@ movhi
+.L1864:
+	sxth	r3, r6
+	cmp	r3, #0
+	blt	.L1869
+	ldrh	r2, [r5, #2968]
+	movs	r1, #1
+	ldr	r0, .L1883+8
+	orr	r3, r3, r2, lsl #10
+	str	r3, [r4, #4052]
+	ldr	r3, [r4, #756]
+	mov	r2, r1
+	str	r3, [r4, #4056]
+	bl	FlashReadPages
+	ldr	r3, [r4, #4048]
+	adds	r3, r3, #1
+	beq	.L1865
+	ldrh	r3, [r7]
+	cmp	r3, r8
+	bne	.L1865
+.L1869:
+	ldrh	r2, [r7, #10]
+	ldrh	r0, [r7, #12]
+	ldr	r3, .L1883+4
+	strh	r2, [r5, #2974]	@ movhi
+	movw	r2, #65535
+	cmp	r0, r2
+	bne	.L1866
+	b	.L1867
+.L1865:
+	subs	r6, r6, #1
+	uxth	r6, r6
+	b	.L1864
+.L1866:
+	ldr	r2, [r3, #2824]
+	cmp	r0, r2
+	beq	.L1867
+	ldrh	r3, [r3, #2838]
+	lsrs	r3, r3, #2
+	cmp	r2, r3
+	bcs	.L1867
+	cmp	r0, r3
+	bcs	.L1867
+	bl	FtlSysBlkNumInit
+.L1867:
+	ldr	r7, .L1883+12
+	movs	r6, #0
+.L1870:
+	ldrh	r3, [r5, #2850]
+	cmp	r6, r3
+	bcs	.L1882
+	ldrh	r2, [r4, #1860]
+	ldr	r1, [r4, #4056]
+	ldr	r0, [r7, #4]!
+	lsls	r2, r2, #2
+	mla	r1, r6, r2, r1
+	bl	ftl_memcpy
+	adds	r6, r6, #1
+	b	.L1870
+.L1882:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1872:
+	mov	r0, #-1
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1884:
+	.align	2
+.L1883:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+4048
+	.word	.LANCHOR0+2992
+	.fnend
+	.size	FtlLoadBbt, .-FtlLoadBbt
+	.align	1
+	.global	FtlScanSysBlk
+	.thumb
+	.thumb_func
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movs	r6, #0
+	ldr	r5, .L1970
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r4, .L1970+4
+	mov	r1, r6
+	ldr	r2, [r5, #2928]
+	ldr	r0, [r4, #1852]
+	mov	r9, r4
+	strh	r6, [r5, #2946]	@ movhi
+	lsls	r2, r2, #2
+	strh	r6, [r4, #1908]	@ movhi
+	bl	ftl_memset
+	ldr	r2, [r5, #2928]
+	mov	r1, r6
+	ldr	r0, [r4, #1824]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r5, #2920]
+	mov	r1, r6
+	ldr	r0, [r4, #1836]
+	lsls	r2, r2, #2
+	bl	ftl_memset
+	ldrh	r2, [r5, #2920]
+	ldr	r0, [r5, #2948]
+	mov	r1, r6
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	add	r0, r4, #1064
+	movs	r1, #255
+	movs	r2, #12
+	bl	memset
+	ldrh	r3, [r5, #2836]
+	str	r5, [sp, #12]
+	mov	r5, r4
+	str	r3, [sp, #4]
+.L1886:
+	ldr	r6, .L1970
+	ldr	r2, [sp, #4]
+	ldrh	r3, [r6, #2838]
+	mov	r0, r6
+	cmp	r3, r2
+	bls	.L1928
+	ldr	r1, [r4, #1668]
+	mov	r10, #36
+	ldrh	r8, [r6, #2828]
+	movs	r7, #0
+	ldr	r2, [r4, #1764]
+	str	r1, [sp, #8]
+	ldr	r3, [r4, #1664]
+	ldrh	r1, [r6, #2910]
+	str	r7, [sp]
+	str	r1, [sp, #16]
+	addw	r1, r6, #2856
+	str	r1, [sp, #20]
+.L1929:
+	uxth	r1, r7
+	cmp	r1, r8
+	bcs	.L1965
+	str	r3, [sp, #28]
+	ldr	r3, [sp, #20]
+	ldr	r1, [sp, #4]
+	str	r2, [sp, #24]
+	ldrb	r0, [r3, r7]	@ zero_extendqisi2
+	bl	V2P_block
+	mov	fp, r0
+	bl	FtlBbmIsBadBlock
+	ldr	r2, [sp, #24]
+	ldr	r3, [sp, #28]
+	cbnz	r0, .L1887
+	ldr	r1, [sp]
+	ldr	r6, [sp]
+	mla	r0, r10, r1, r2
+	lsl	r1, fp, #10
+	str	r1, [r0, #4]
+	ldr	r1, [sp, #16]
+	muls	r1, r6, r1
+	ldr	r6, [sp, #8]
+	it	mi
+	addmi	r1, r1, #3
+	bic	r1, r1, #3
+	str	r3, [r0, #8]
+	add	r1, r1, r6
+	str	r1, [r0, #12]
+	ldr	r1, [sp]
+	adds	r1, r1, #1
+	uxth	r1, r1
+	str	r1, [sp]
+.L1887:
+	adds	r7, r7, #1
+	b	.L1929
+.L1965:
+	ldr	r3, [sp]
+	cmp	r3, #0
+	beq	.L1891
+	mov	r1, r3
+	ldr	r0, [r4, #1764]
+	movs	r2, #1
+	ldr	r8, .L1970
+	bl	FlashReadPages
+	movs	r3, #0
+	str	r3, [sp, #8]
+.L1892:
+	ldrh	r3, [sp, #8]
+	ldr	r2, [sp]
+	cmp	r3, r2
+	bcs	.L1891
+	ldr	r3, [sp, #8]
+	mov	r10, #36
+	mul	r10, r10, r3
+	ldr	r3, [r4, #1764]
+	add	r2, r3, r10
+	ldr	r3, [r3, r10]
+	ldr	r6, [r2, #4]
+	adds	r3, r3, #1
+	ldr	r7, [r2, #12]
+	ubfx	r6, r6, #10, #16
+	bne	.L1894
+	mov	fp, #16
+	movw	r3, #65535
+.L1893:
+	ldr	r0, [r4, #1764]
+	movs	r1, #1
+	str	r3, [sp, #16]
+	add	r0, r0, r10
+	ldr	r2, [r0, #4]
+	adds	r2, r2, #1
+	str	r2, [r0, #4]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldrh	r2, [r7]
+	ldr	r3, [sp, #16]
+	cmp	r2, r3
+	bne	.L1895
+	ldr	r3, [r9, #1764]
+	mov	r2, #-1
+	str	r2, [r3, r10]
+	b	.L1894
+.L1895:
+	ldr	r2, [r5, #1764]
+	ldr	r2, [r2, r10]
+	adds	r2, r2, #1
+	bne	.L1894
+	add	fp, fp, #-1
+	uxth	fp, fp
+	cmp	fp, #0
+	bne	.L1893
+.L1894:
+	ldr	r3, [r5, #1764]
+	ldr	r3, [r3, r10]
+	adds	r3, r3, #1
+	beq	.L1897
+	ldr	r2, [r5, #984]
+	ldr	r3, [r7, #4]
+	adds	r1, r2, #1
+	beq	.L1898
+	cmp	r2, r3
+	bhi	.L1899
+.L1898:
+	adds	r2, r3, #1
+	itt	ne
+	addne	r2, r3, #1
+	strne	r2, [r9, #984]
+.L1899:
+	ldrh	r2, [r7]
+	movw	r1, #61604
+	cmp	r2, r1
+	beq	.L1901
+	bhi	.L1902
+	movw	r3, #61574
+	cmp	r2, r3
+	bne	.L1900
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #12]
+	ldrh	r10, [r3, #2920]
+	ldrh	r0, [r2, #2946]
+	ldr	r2, [r9, #1836]
+	add	lr, r10, #-1
+	uxth	r3, lr
+	rsb	lr, r0, lr
+	str	r2, [sp, #16]
+	b	.L1915
+.L1902:
+	movw	r3, #61634
+	cmp	r2, r3
+	beq	.L1904
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L1900
+	mov	r0, r6
+	b	.L1964
+.L1904:
+	ldr	r3, [sp, #12]
+	ldrh	r0, [r4, #1908]
+	ldr	r2, [r4, #1852]
+	ldr	r1, [r3, #2928]
+	str	r2, [sp, #16]
+	uxth	lr, r1
+	add	r3, lr, #-1
+	rsb	lr, r0, lr
+	add	lr, lr, #-1
+	uxth	r3, r3
+	sxth	lr, lr
+.L1906:
+	sxth	ip, r3
+	cmp	ip, lr
+	ble	.L1966
+	ldr	r2, [r7, #4]
+	lsl	fp, ip, #2
+	mov	r10, r2
+	ldr	r2, [sp, #16]
+	ldr	r2, [r2, ip, lsl #2]
+	cmp	r10, r2
+	bls	.L1907
+	ldr	r2, [sp, #16]
+	ldr	r2, [r2]
+	cbnz	r2, .L1908
+	cmp	r0, r1
+	itt	ne
+	addne	r0, r0, #1
+	strhne	r0, [r9, #1908]	@ movhi
+.L1908:
+	movs	r1, #0
+	uxth	lr, r3
+.L1909:
+	uxth	r2, r1
+	cmp	r2, lr
+	bcs	.L1967
+	ldr	r0, [r5, #1852]
+	sxth	r2, r2
+	adds	r1, r1, #1
+	add	r10, r0, r2, lsl #2
+	ldr	r10, [r10, #4]
+	str	r10, [r0, r2, lsl #2]
+	ldr	r0, [r5, #1824]
+	add	r10, r0, r2, lsl #1
+	ldrh	r10, [r10, #2]
+	strh	r10, [r0, r2, lsl #1]	@ movhi
+	b	.L1909
+.L1967:
+	ldr	r1, [r7, #4]
+	ldr	r2, [r4, #1852]
+	str	r1, [r2, fp]
+	sxth	r1, r3
+	ldr	r2, [r4, #1824]
+	cmp	r1, #0
+	strh	r6, [r2, ip, lsl #1]	@ movhi
+	bge	.L1911
+	b	.L1900
+.L1907:
+	subs	r3, r3, #1
+	uxth	r3, r3
+	b	.L1906
+.L1966:
+	cmp	ip, #0
+	bge	.L1942
+	b	.L1900
+.L1911:
+	ldrh	r0, [r5, #1908]
+	ldr	r2, [r8, #2928]
+	subs	r2, r2, r0
+	subs	r2, r2, #1
+	sxth	r2, r2
+	cmp	r1, r2
+	bgt	.L1900
+.L1942:
+	ldr	r2, [r4, #1852]
+	sxth	r3, r3
+	ldr	r1, [r7, #4]
+	adds	r0, r0, #1
+	strh	r0, [r4, #1908]	@ movhi
+	str	r1, [r2, r3, lsl #2]
+	ldr	r2, [r4, #1824]
+	b	.L1962
+.L1921:
+	ldr	r1, [sp, #16]
+	lsl	fp, ip, #2
+	ldr	r2, [r7, #4]
+	ldr	r1, [r1, ip, lsl #2]
+	cmp	r2, r1
+	bhi	.L1968
+	subs	r3, r3, #1
+	uxth	r3, r3
+.L1915:
+	sxth	ip, r3
+	cmp	ip, lr
+	bgt	.L1921
+	b	.L1920
+.L1971:
+	.align	2
+.L1970:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+.L1968:
+	ldr	r2, [sp, #16]
+	ldr	r2, [r2]
+	cbnz	r2, .L1917
+	cmp	r0, r10
+	itt	ne
+	addne	r0, r0, #1
+	strhne	r0, [r8, #2946]	@ movhi
+.L1917:
+	movs	r1, #0
+	uxth	lr, r3
+.L1918:
+	uxth	r2, r1
+	cmp	r2, lr
+	bcs	.L1969
+	ldr	r0, [r4, #1836]
+	sxth	r2, r2
+	adds	r1, r1, #1
+	add	r10, r0, r2, lsl #2
+	ldr	r10, [r10, #4]
+	str	r10, [r0, r2, lsl #2]
+	ldr	r0, [r8, #2948]
+	add	r10, r0, r2, lsl #1
+	ldrh	r10, [r10, #2]
+	strh	r10, [r0, r2, lsl #1]	@ movhi
+	b	.L1918
+.L1969:
+	ldr	r2, [r5, #1836]
+	ldr	r1, [r7, #4]
+	str	r1, [r2, fp]
+	ldr	r2, .L1972
+	ldr	r2, [r2, #2948]
+	strh	r6, [r2, ip, lsl #1]	@ movhi
+.L1920:
+	sxth	r3, r3
+	cmp	r3, #0
+	blt	.L1900
+	ldrh	r2, [r8, #2920]
+	ldrh	r1, [r8, #2946]
+	subs	r2, r2, #1
+	subs	r2, r2, r1
+	sxth	r2, r2
+	cmp	r3, r2
+	bgt	.L1900
+	adds	r1, r1, #1
+	ldr	r2, [r9, #1836]
+	strh	r1, [r8, #2946]	@ movhi
+	ldr	r1, [r7, #4]
+	str	r1, [r2, r3, lsl #2]
+	ldr	r2, [r8, #2948]
+.L1962:
+	strh	r6, [r2, r3, lsl #1]	@ movhi
+	b	.L1900
+.L1901:
+	ldrh	r1, [r9, #1064]
+	movw	r2, #65535
+	cmp	r1, r2
+	bne	.L1922
+	strh	r6, [r5, #1064]	@ movhi
+	b	.L1963
+.L1922:
+	ldrh	r0, [r5, #1068]
+	cmp	r0, r2
+	beq	.L1923
+	movs	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+.L1923:
+	ldr	r2, [r9, #1072]
+	ldr	r3, [r7, #4]
+	cmp	r2, r3
+	bcs	.L1924
+	ldrh	r3, [r5, #1064]
+	strh	r6, [r5, #1064]	@ movhi
+	strh	r3, [r5, #1068]	@ movhi
+	ldr	r3, [r7, #4]
+.L1963:
+	str	r3, [r5, #1072]
+	b	.L1900
+.L1924:
+	strh	r6, [r5, #1068]	@ movhi
+	b	.L1900
+.L1897:
+	ldrb	r1, [r8, #76]	@ zero_extendqisi2
+	mov	r0, r6
+	cbz	r1, .L1925
+.L1964:
+	movs	r1, #0
+.L1925:
+	bl	FtlFreeSysBlkQueueIn
+.L1900:
+	ldr	r3, [sp, #8]
+	adds	r3, r3, #1
+	str	r3, [sp, #8]
+	b	.L1892
+.L1891:
+	ldr	r6, [sp, #4]
+	adds	r6, r6, #1
+	uxth	r3, r6
+	str	r3, [sp, #4]
+	b	.L1886
+.L1928:
+	ldr	r3, .L1972+4
+	ldr	r5, [r3, #1824]
+	ldrh	r2, [r5]
+	cbz	r2, .L1930
+.L1933:
+	ldr	r5, [r0, #2948]
+	ldr	r3, .L1972
+	ldrh	r2, [r5]
+	cbz	r2, .L1931
+	b	.L1954
+.L1930:
+	ldrh	r3, [r3, #1908]
+	cmp	r3, #0
+	beq	.L1933
+	ldr	r6, [r6, #2928]
+.L1934:
+	uxth	r3, r2
+	sxth	r1, r3
+	cmp	r1, r6
+	bcs	.L1933
+	ldrh	r7, [r5, r1, lsl #1]
+	adds	r2, r2, #1
+	cmp	r7, #0
+	beq	.L1934
+	mov	lr, #0
+.L1935:
+	ldr	r5, [r0, #2928]
+	sxth	r2, r3
+	cmp	r2, r5
+	bcs	.L1933
+	ldr	r5, [r4, #1824]
+	subs	r6, r2, r1
+	adds	r3, r3, #1
+	ldrh	r7, [r5, r2, lsl #1]
+	uxth	r3, r3
+	strh	r7, [r5, r6, lsl #1]	@ movhi
+	ldr	r5, [r4, #1852]
+	ldr	r7, [r5, r2, lsl #2]
+	str	r7, [r5, r6, lsl #2]
+	ldr	r5, [r4, #1824]
+	strh	lr, [r5, r2, lsl #1]	@ movhi
+	b	.L1935
+.L1931:
+	ldrh	r1, [r3, #2946]
+	cbz	r1, .L1954
+	ldrh	r6, [r3, #2920]
+.L1938:
+	uxth	r3, r2
+	sxth	r1, r3
+	cmp	r1, r6
+	bge	.L1954
+	ldrh	r7, [r5, r1, lsl #1]
+	adds	r2, r2, #1
+	cmp	r7, #0
+	beq	.L1938
+	ldr	r5, .L1972
+	mov	ip, #0
+.L1939:
+	ldrh	r6, [r0, #2920]
+	sxth	r2, r3
+	cmp	r2, r6
+	bge	.L1954
+	ldr	r6, [r5, #2948]
+	rsb	lr, r1, r2
+	adds	r3, r3, #1
+	ldrh	r7, [r6, r2, lsl #1]
+	uxth	r3, r3
+	strh	r7, [r6, lr, lsl #1]	@ movhi
+	ldr	r6, [r4, #1836]
+	ldr	r7, [r6, r2, lsl #2]
+	str	r7, [r6, lr, lsl #2]
+	ldr	r6, [r5, #2948]
+	strh	ip, [r6, r2, lsl #1]	@ movhi
+	b	.L1939
+.L1954:
+	movs	r0, #0
+	add	sp, sp, #36
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L1973:
+	.align	2
+.L1972:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlScanSysBlk, .-FtlScanSysBlk
+	.align	1
+	.global	FtlLoadSysInfo
+	.thumb
+	.thumb_func
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movs	r1, #0
+	ldr	r6, .L1993
+	ldr	r5, .L1993+4
+	ldrh	r2, [r6, #2836]
+	ldr	r3, [r5, #1796]
+	ldr	r0, [r5, #768]
+	lsls	r2, r2, #1
+	str	r1, [r5, #4056]
+	str	r3, [r5, #4060]
+	bl	ftl_memset
+	ldrh	r0, [r5, #1064]
+	movw	r2, #65535
+	cmp	r0, r2
+	bne	.L1975
+.L1983:
+	mov	r0, #-1
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1975:
+	movs	r1, #1
+	ldr	r8, .L1993+12
+	bl	FtlGetLastWrittenPage
+	mov	r7, r5
+	uxth	r4, r0
+	adds	r0, r0, #1
+	strh	r0, [r5, #1066]	@ movhi
+.L1977:
+	sxth	r3, r4
+	cmp	r3, #0
+	blt	.L1982
+	ldrh	r2, [r5, #1064]
+	movs	r1, #1
+	ldr	r0, .L1993+8
+	orr	r3, r3, r2, lsl #10
+	str	r3, [r5, #4052]
+	ldr	r3, [r5, #756]
+	mov	r2, r1
+	str	r3, [r5, #4056]
+	bl	FlashReadPages
+	ldr	r3, [r5, #4048]
+	adds	r3, r3, #1
+	beq	.L1978
+	ldr	r3, [r7, #756]
+	ldr	r3, [r3]
+	cmp	r3, r8
+	bne	.L1978
+	ldr	r3, [r7, #1796]
+	ldrh	r2, [r3]
+	movw	r3, #61604
+	cmp	r2, r3
+	bne	.L1978
+.L1982:
+	ldr	r4, .L1993+4
+	movs	r2, #48
+	ldr	r1, [r5, #4056]
+	add	r0, r4, #1012
+	ldr	r7, .L1993
+	bl	ftl_memcpy
+	ldrh	r2, [r6, #2836]
+	ldr	r1, [r5, #4056]
+	ldr	r0, [r5, #768]
+	adds	r1, r1, #48
+	lsls	r2, r2, #1
+	bl	ftl_memcpy
+	ldrh	r2, [r6, #2836]
+	ldr	r3, [r5, #4056]
+	add	r1, r2, #24
+	ldr	r0, [r5, #944]
+	ubfx	r1, r1, #1, #30
+	lsrs	r2, r2, #3
+	adds	r2, r2, #4
+	add	r1, r3, r1, lsl #2
+	bl	ftl_memcpy
+	ldrh	r3, [r6, #2944]
+	cbz	r3, .L1980
+	ldrh	r2, [r7, #2836]
+	ldr	r1, [r4, #4056]
+	ldr	r0, [r4, #1848]
+	lsrs	r3, r2, #3
+	add	r3, r3, r2, lsl #1
+	ldrh	r2, [r7, #2936]
+	adds	r3, r3, #52
+	ubfx	r3, r3, #2, #14
+	lsls	r2, r2, #2
+	add	r1, r1, r3, lsl #2
+	bl	ftl_memcpy
+	b	.L1980
+.L1978:
+	subs	r4, r4, #1
+	uxth	r4, r4
+	b	.L1977
+.L1980:
+	ldr	r2, [r5, #1012]
+	ldr	r3, .L1993+12
+	ldr	r4, .L1993+4
+	cmp	r2, r3
+	bne	.L1983
+	ldrb	r0, [r4, #1022]	@ zero_extendqisi2
+	ldrh	r1, [r6, #2850]
+	ldrh	r2, [r4, #1020]
+	cmp	r0, r1
+	ldr	r3, .L1993
+	strh	r2, [r4, #1070]	@ movhi
+	bne	.L1983
+	ldrh	r1, [r3, #2898]
+	ldrh	r0, [r3, #2904]
+	str	r2, [r4, #4084]
+	muls	r1, r2, r1
+	str	r1, [r3, #2960]
+	muls	r1, r0, r1
+	ldrh	r0, [r3, #2974]
+	str	r1, [r3, #2940]
+	ldr	r1, [r3, #2840]
+	subs	r0, r1, r0
+	ldrh	r1, [r3, #2828]
+	subs	r0, r0, r2
+	bl	__aeabi_uidiv
+	ldrh	r3, [r4, #1028]
+	ldrh	r1, [r4, #1026]
+	lsrs	r2, r3, #6
+	strh	r2, [r4, #790]	@ movhi
+	ldrh	r2, [r4, #1030]
+	and	r3, r3, #63
+	strb	r3, [r4, #794]
+	ldrb	r3, [r4, #1023]	@ zero_extendqisi2
+	strh	r2, [r4, #836]	@ movhi
+	ldrh	r2, [r4, #1032]
+	strb	r3, [r4, #796]
+	movw	r3, #65535
+	strh	r1, [r4, #788]	@ movhi
+	strh	r3, [r4, #1076]	@ movhi
+	movs	r3, #0
+	strh	r3, [r4, #1078]	@ movhi
+	strb	r3, [r4, #1082]
+	strb	r3, [r4, #1084]
+	str	r3, [r4, #972]
+	strh	r0, [r4, #1060]	@ movhi
+	lsrs	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #842]
+	ldrb	r2, [r4, #1024]	@ zero_extendqisi2
+	strh	r0, [r4, #838]	@ movhi
+	strb	r2, [r4, #844]
+	ldrh	r2, [r4, #1034]
+	strh	r2, [r4, #884]	@ movhi
+	ldrh	r2, [r4, #1036]
+	lsrs	r0, r2, #6
+	and	r2, r2, #63
+	strb	r2, [r4, #890]
+	ldrb	r2, [r4, #1025]	@ zero_extendqisi2
+	strh	r0, [r4, #886]	@ movhi
+	strb	r2, [r4, #892]
+	str	r3, [r4, #960]
+	ldr	r2, [r4, #1044]
+	str	r3, [r4, #952]
+	str	r3, [r4, #968]
+	str	r3, [r4, #996]
+	str	r3, [r4, #1004]
+	str	r3, [r4, #964]
+	ldr	r3, [r4, #1052]
+	str	r2, [r4, #992]
+	ldr	r2, [r4, #984]
+	cmp	r3, r2
+	ldr	r2, [r5, #988]
+	it	hi
+	strhi	r3, [r4, #984]
+	ldr	r3, [r5, #1048]
+	cmp	r3, r2
+	itt	hi
+	ldrhi	r2, .L1993+4
+	strhi	r3, [r2, #988]
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L1986
+	ldr	r0, .L1993+16
+	bl	make_superblock
+.L1986:
+	ldrh	r2, [r5, #836]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1987
+	ldr	r0, .L1993+20
+	bl	make_superblock
+.L1987:
+	ldrh	r2, [r5, #884]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1988
+	ldr	r0, .L1993+24
+	bl	make_superblock
+.L1988:
+	ldrh	r2, [r5, #1076]
+	movw	r3, #65535
+	cmp	r2, r3
+	beq	.L1989
+	ldr	r0, .L1993+28
+	bl	make_superblock
+.L1989:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L1994:
+	.align	2
+.L1993:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR2+4048
+	.word	1179929683
+	.word	.LANCHOR2+788
+	.word	.LANCHOR2+836
+	.word	.LANCHOR2+884
+	.word	.LANCHOR2+1076
+	.fnend
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	1
+	.global	FtlGcScanTempBlk
+	.thumb
+	.thumb_func
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2029
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldrh	r4, [r3, #3000]
+	movw	r3, #65535
+	mov	r5, r0
+	str	r1, [sp, #12]
+	cmp	r4, r3
+	beq	.L2018
+	cbnz	r4, .L1996
+	b	.L1997
+.L2018:
+	movs	r4, #0
+.L1996:
+	ldr	r3, .L2029+4
+	ldr	r2, [sp, #12]
+	ldrh	r3, [r3, #2898]
+	cmp	r2, r3
+	bne	.L1998
+.L1997:
+	bl	FtlGcPageVarInit
+.L1998:
+	ldr	r7, .L2029+8
+	mov	r10, #0
+	mov	r3, #-1
+	str	r3, [sp, #4]
+	mov	r9, r7
+.L2012:
+	ldrh	r1, [r5]
+	movw	r3, #65535
+	movs	r2, #0
+	strb	r2, [r5, #8]
+	cmp	r1, r3
+	beq	.L1999
+.L2000:
+.L2015:
+	ldr	r3, .L2029+4
+	movs	r2, #0
+	ldr	fp, [r7, #1764]
+	mov	ip, #36
+	mov	r6, r2
+	movw	lr, #65535
+	ldrh	r8, [r3, #2828]
+	ldr	r3, [r7, #1668]
+	str	r3, [sp, #16]
+	ldr	r3, .L2029+4
+	ldrh	r3, [r3, #2910]
+	str	r3, [sp, #20]
+	add	r3, r5, #14
+	str	r3, [sp, #8]
+.L2001:
+	uxth	r3, r2
+	cmp	r3, r8
+	bcs	.L2027
+	ldr	r1, [sp, #8]
+	ldrh	r3, [r1, #2]!
+	cmp	r3, lr
+	str	r1, [sp, #8]
+	beq	.L2002
+	mla	r1, ip, r6, fp
+	orr	r3, r4, r3, lsl #10
+	str	r3, [r1, #4]
+	movs	r3, #0
+	str	r3, [r1, #8]
+	ldr	r3, [sp, #20]
+	muls	r3, r6, r3
+	it	mi
+	addmi	r3, r3, #3
+	adds	r6, r6, #1
+	bic	r3, r3, #3
+	uxth	r6, r6
+	mov	r0, r3
+	ldr	r3, [sp, #16]
+	add	r0, r0, r3
+	str	r0, [r1, #12]
+.L2002:
+	adds	r2, r2, #1
+	b	.L2001
+.L2027:
+	ldr	r0, [r7, #1764]
+	mov	r1, r6
+	movs	r2, #0
+	mov	fp, #0
+	bl	FlashReadPages
+.L2005:
+	uxth	r3, fp
+	cmp	r3, r6
+	bcs	.L2028
+	movs	r3, #36
+	mul	r8, r3, fp
+	ldr	r3, .L2029+8
+	ldr	ip, [r3, #1764]
+	add	r1, ip, r8
+	str	r1, [sp, #16]
+	str	ip, [sp, #20]
+	ldr	r3, [r1, #4]
+	ubfx	r0, r3, #10, #16
+	str	r3, [sp, #8]
+	bl	P2V_plane
+	ldr	ip, [sp, #20]
+	mov	r2, r0
+	ldr	r3, [sp, #8]
+	ldr	r0, [ip, r8]
+	cbnz	r0, .L2006
+	ldr	r1, [sp, #16]
+	movw	r0, #65535
+	add	fp, fp, #1
+	ldr	lr, [r1, #12]
+	ldrh	r1, [lr]
+	cmp	r1, r0
+	bne	.L2007
+	ldr	r3, .L2029+8
+	movs	r1, #1
+	str	r1, [r3, #1924]
+	b	.L1999
+.L2007:
+	ldr	r0, [lr, #12]
+	mov	r1, r3
+	ldr	r2, [lr, #8]
+	bl	FtlGcUpdatePage
+	b	.L2005
+.L2006:
+	mov	r2, r3
+	ldr	r0, .L2029+12
+	ldrh	r1, [r5]
+	bl	printk
+	ldr	r2, [r9, #948]
+	ldrh	r3, [r5]
+	cbnz	r2, .L2008
+	ldr	r2, .L2029+4
+	ldrb	r2, [r2, #76]	@ zero_extendqisi2
+	cbz	r2, .L2009
+.L2008:
+	ldr	r2, [r7, #748]
+	ldrh	r2, [r2, r3, lsl #1]
+	cmp	r2, #119
+	bls	.L2010
+.L2009:
+	ldr	r2, [r7, #1764]
+	ldr	r2, [r2, r8]
+	adds	r2, r2, #1
+	bne	.L2011
+.L2010:
+	ldr	r2, [r7, #1764]
+	add	r8, r8, r2
+	ldr	r2, [r8, #4]
+	str	r2, [sp, #4]
+.L2011:
+	ldr	r2, [r9, #768]
+	movs	r4, #0
+	strh	r4, [r2, r3, lsl #1]	@ movhi
+	ldrh	r0, [r5]
+	bl	INSERT_FREE_LIST
+	movw	r3, #65535
+	strh	r3, [r5]	@ movhi
+	bl	FtlGcPageVarInit
+	b	.L2012
+.L2028:
+	ldr	r3, [sp, #12]
+	add	r10, r10, #1
+	adds	r4, r4, #1
+	cmp	r10, r3
+	uxth	r4, r4
+	bcs	.L2014
+.L2016:
+	ldr	r3, .L2029+4
+	ldrh	r3, [r3, #2898]
+	cmp	r3, r4
+	bhi	.L2015
+	movs	r2, #0
+	b	.L1999
+.L2014:
+	ldr	r2, .L2029
+	movw	r1, #65535
+	ldrh	r3, [r2, #3000]
+	cmp	r3, r1
+	beq	.L2016
+	add	r3, r3, r10
+	strh	r3, [r2, #3000]	@ movhi
+	ldr	r3, .L2029+4
+	ldrh	r3, [r3, #2898]
+	cmp	r3, r4
+	bls	.L2016
+	b	.L2017
+.L1999:
+	ldr	r3, .L2029
+	movw	r1, #65535
+	strh	r4, [r5, #2]	@ movhi
+	mov	r0, r5
+	strb	r2, [r5, #6]
+	strh	r1, [r3, #3000]	@ movhi
+	mov	r1, r4
+	bl	ftl_sb_update_avl_pages
+.L2017:
+	ldr	r0, [sp, #4]
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2030:
+	.align	2
+.L2029:
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC105
+	.fnend
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	1
+	.global	FlashProgPages
+	.thumb
+	.thumb_func
+	.type	FlashProgPages, %function
+FlashProgPages:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #76
+	sub	sp, sp, #76
+	ldr	r5, .L2086
+	mov	r4, r0
+	str	r1, [sp, #8]
+	mov	r9, r2
+	str	r3, [sp, #20]
+	ldr	r6, [r5, #1788]
+	ldrb	r7, [r5]	@ zero_extendqisi2
+	ldrb	r6, [r6, #19]	@ zero_extendqisi2
+	str	r6, [sp, #16]
+	ldr	r6, .L2086+4
+	ldrb	r6, [r6, #265]	@ zero_extendqisi2
+	str	r6, [sp, #12]
+	cbz	r7, .L2032
+	bl	FlashProgSlc2KPages
+	b	.L2033
+.L2046:
+	movs	r3, #36
+	add	r2, sp, #28
+	mov	r1, r9
+	mul	r8, r3, r7
+	ldr	r3, [sp, #8]
+	subs	r3, r3, r7
+	add	fp, r4, r8
+	uxtb	r3, r3
+	str	r3, [sp]
+	mov	r0, fp
+	add	r3, sp, #32
+	bl	LogAddr2PhyAddr
+	ldrb	r2, [r5, #1616]	@ zero_extendqisi2
+	ldr	r3, [sp, #32]
+	mov	r10, r0
+	cmp	r3, r2
+	bcc	.L2034
+	mov	r3, #-1
+	str	r3, [r4, r8]
+.L2035:
+	adds	r7, r7, #1
+.L2032:
+	ldr	r3, [sp, #8]
+	ldr	r6, .L2086
+	cmp	r7, r3
+	bcc	.L2046
+	b	.L2084
+.L2034:
+	add	r3, r5, r3, lsl #4
+	ldrb	r1, [r5, #2820]	@ zero_extendqisi2
+	ldr	r3, [r3, #1668]
+	cmp	r1, #0
+	it	eq
+	moveq	r10, #0
+	cbz	r3, .L2037
+	cmp	r2, #1
+	bne	.L2038
+	ldr	r0, [r5, #1828]
+	bl	NandcIqrWaitFlashReady
+.L2038:
+	ldrb	r0, [sp, #32]	@ zero_extendqisi2
+	bl	FlashWaitCmdDone
+.L2037:
+	ldr	r3, [sp, #32]
+	movs	r0, #0
+	add	r2, r5, r3, lsl #4
+	addw	r1, r2, #1668
+	str	r0, [r2, #1672]
+	ldr	r0, [sp, #28]
+	str	fp, [r2, #1668]
+	str	r0, [r2, #1664]
+	cmp	r10, #0
+	beq	.L2039
+	add	r2, r8, #36
+	add	r2, r2, r4
+	str	r2, [r1, #4]
+.L2039:
+	adds	r2, r5, r3
+	add	r3, r5, r3, lsl #4
+	ldrb	r6, [r2, #1620]	@ zero_extendqisi2
+	strb	r6, [r3, #1660]
+	mov	r0, r6
+	ldrb	r3, [r5, #1616]	@ zero_extendqisi2
+	cmp	r3, #1
+	bne	.L2040
+	bl	NandcWaitFlashReady
+	b	.L2041
+.L2040:
+	bl	NandcFlashCs
+	mov	r0, r6
+	ldr	r3, [sp, #32]
+	ldr	r1, [sp, #28]
+	add	r3, r5, r3, lsl #2
+	ldr	r2, [r3, #1628]
+	adds	r2, r2, #0
+	it	ne
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	mov	r0, r6
+	bl	NandcFlashDeCs
+.L2041:
+	ldr	r3, [sp, #16]
+	subs	r3, r3, #1
+	cmp	r3, #6
+	bhi	.L2042
+	adds	r3, r5, r6
+	ldrb	r3, [r3, #2756]	@ zero_extendqisi2
+	cbz	r3, .L2042
+	mov	r0, r6
+	ldrb	r1, [r5, #1903]	@ zero_extendqisi2
+	ldr	r2, .L2086+8
+	movs	r3, #0
+	bl	HynixSetRRPara
+.L2042:
+	mov	r0, r6
+	bl	NandcFlashCs
+	cmp	r9, #1
+	mov	r0, r6
+	bne	.L2043
+	ldrb	r3, [r5, #76]	@ zero_extendqisi2
+	cbz	r3, .L2043
+	bl	flash_enter_slc_mode
+	b	.L2044
+.L2043:
+	bl	flash_exit_slc_mode
+.L2044:
+	mov	r0, r6
+	ldr	r1, [sp, #28]
+	bl	FlashProgFirstCmd
+	ldr	r3, [fp, #12]
+	mov	r0, r6
+	movs	r1, #1
+	str	r3, [sp]
+	ldr	r2, [sp, #12]
+	ldr	r3, [fp, #8]
+	bl	NandcXferData
+	cmp	r10, #0
+	beq	.L2045
+	mov	r0, r6
+	ldr	r1, [sp, #28]
+	bl	FlashProgDpFirstCmd
+	mov	r0, r6
+	add	r8, r8, #36
+	add	r8, r8, r4
+	ldr	r3, [sp, #32]
+	ldr	r1, [sp, #28]
+	add	r3, r5, r3, lsl #2
+	ldr	r2, [r3, #1628]
+	adds	r2, r2, #0
+	it	ne
+	movne	r2, #1
+	bl	FlashWaitReadyEN
+	ldr	r1, [r5, #4]
+	mov	r0, r6
+	ldr	r3, [sp, #28]
+	add	r1, r1, r3
+	bl	FlashProgDpSecondCmd
+	ldr	r3, [r8, #12]
+	mov	r0, r6
+	movs	r1, #1
+	str	r3, [sp]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r8, #8]
+	bl	NandcXferData
+.L2045:
+	mov	r0, r6
+	ldr	r1, [sp, #28]
+	bl	FlashProgSecondCmd
+	mov	r0, r6
+	bl	NandcFlashDeCs
+	add	r7, r7, r10
+	b	.L2035
+.L2084:
+	ldr	r0, [r6, #1828]
+	movs	r5, #0
+	bl	NandcIqrWaitFlashReady
+	addw	r8, r6, #1660
+	mov	r7, r6
+.L2047:
+	ldrb	r3, [r6, #1616]	@ zero_extendqisi2
+	cmp	r5, r3
+	bcs	.L2085
+	uxtb	r0, r5
+	bl	FlashWaitCmdDone
+	cmp	r9, #1
+	bne	.L2048
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	cbz	r3, .L2048
+	lsls	r3, r5, #4
+	ldrb	r0, [r8, r3]	@ zero_extendqisi2
+	bl	flash_exit_slc_mode
+.L2048:
+	adds	r5, r5, #1
+	b	.L2047
+.L2085:
+	ldr	r3, [sp, #20]
+	cbnz	r3, .L2050
+.L2058:
+	movs	r0, #0
+	b	.L2033
+.L2050:
+	ldr	r7, .L2086+12
+	mov	r8, #0
+	mov	r10, r7
+.L2051:
+	ldr	r3, [sp, #8]
+	cmp	r8, r3
+	beq	.L2058
+	ldr	r3, [r4]
+	adds	r3, r3, #1
+	bne	.L2052
+	ldr	r1, [r4, #4]
+	ldr	r0, .L2086+16
+	bl	printk
+	b	.L2053
+.L2052:
+	ldr	r3, [sp, #8]
+	mov	r1, r9
+	add	r2, sp, #28
+	mov	r0, r4
+	rsb	r3, r8, r3
+	mov	r6, r4
+	uxtb	r3, r3
+	str	r3, [sp]
+	add	r3, sp, #32
+	bl	LogAddr2PhyAddr
+	ldr	r2, [r7, #4020]
+	movs	r3, #0
+	str	r3, [r2]
+	ldr	r2, [r7, #4024]
+	str	r3, [r2]
+	ldmia	r6!, {r0, r1, r2, r3}
+	add	r5, sp, #36
+	stmia	r5!, {r0, r1, r2, r3}
+	ldmia	r6!, {r0, r1, r2, r3}
+	stmia	r5!, {r0, r1, r2, r3}
+	add	r0, sp, #36
+	ldr	r3, [r6]
+	movs	r1, #1
+	mov	r2, r9
+	str	r3, [r5]
+	ldr	r3, [r7, #4020]
+	str	r3, [sp, #44]
+	ldr	r3, [r7, #4024]
+	str	r3, [sp, #48]
+	bl	FlashReadPages
+	ldr	r5, [sp, #36]
+	adds	r3, r5, #1
+	bne	.L2054
+	ldr	r0, .L2086+20
+	ldr	r1, [r4, #4]
+	bl	printk
+	str	r5, [r4]
+.L2054:
+	ldr	r3, [r4, #12]
+	cbz	r3, .L2055
+	ldr	r2, [r3]
+	ldr	r3, [r10, #4024]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2055
+	ldr	r0, .L2086+24
+	ldr	r1, [r4, #4]
+	bl	printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L2055:
+	ldr	r3, [r4, #8]
+	cbz	r3, .L2053
+	ldr	r2, [r3]
+	ldr	r3, [r10, #4020]
+	ldr	r3, [r3]
+	cmp	r2, r3
+	beq	.L2053
+	ldr	r0, .L2086+28
+	ldr	r1, [r4, #4]
+	bl	printk
+	mov	r3, #-1
+	str	r3, [r4]
+.L2053:
+	add	r8, r8, #1
+	adds	r4, r4, #36
+	b	.L2051
+.L2033:
+	add	sp, sp, #76
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2087:
+	.align	2
+.L2086:
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LANCHOR0+1906
+	.word	.LANCHOR2
+	.word	.LC101
+	.word	.LC102
+	.word	.LC103
+	.word	.LC104
+	.fnend
+	.size	FlashProgPages, .-FlashProgPages
+	.align	1
+	.global	FlashTestBlk
+	.thumb
+	.thumb_func
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 104
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2091
+	push	{r4, r5, lr}
+	.save {r4, r5, lr}
+	mov	r4, r0
+	ldr	r2, [r3, #4004]
+	.pad #108
+	sub	sp, sp, #108
+	cmp	r0, r2
+	bcc	.L2090
+	ldr	r5, [r3, #4012]
+	add	r0, sp, #40
+	movs	r1, #165
+	movs	r2, #32
+	str	r0, [sp, #16]
+	lsls	r4, r4, #10
+	str	r5, [sp, #12]
+	bl	memset
+	mov	r0, r5
+	movs	r1, #90
+	movs	r2, #8
+	bl	memset
+	movs	r1, #1
+	mov	r2, r1
+	add	r0, sp, #4
+	str	r4, [sp, #8]
+	bl	FlashEraseBlocks
+	movs	r1, #1
+	mov	r2, r1
+	mov	r3, r1
+	add	r0, sp, #4
+	bl	FlashProgPages
+	movs	r1, #0
+	movs	r2, #1
+	ldr	r4, [sp, #4]
+	add	r0, sp, #4
+	adds	r4, r4, #0
+	it	ne
+	movne	r4, #1
+	negs	r4, r4
+	bl	FlashEraseBlocks
+	b	.L2089
+.L2090:
+	movs	r4, #0
+.L2089:
+	mov	r0, r4
+	add	sp, sp, #108
+	@ sp needed
+	pop	{r4, r5, pc}
+.L2092:
+	.align	2
+.L2091:
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashTestBlk, .-FlashTestBlk
+	.align	1
+	.global	FlashMakeFactorBbt
+	.thumb
+	.thumb_func
+	.type	FlashMakeFactorBbt, %function
+FlashMakeFactorBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 80
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #84
+	sub	sp, sp, #84
+	ldr	r5, .L2151
+	movs	r1, #1
+	ldr	r4, .L2151+4
+	ldr	r0, .L2151+8
+	ldr	r3, [r5, #4016]
+	ldrh	r8, [r4, #1876]
+	str	r3, [sp, #20]
+	ldrh	r3, [r4, #1878]
+	smulbb	r8, r8, r3
+	ldr	r3, [r4, #1788]
+	ldrb	r3, [r3, #24]	@ zero_extendqisi2
+	uxth	r8, r8
+	str	r3, [sp, #24]
+	ldrh	r3, [r4, #4]
+	str	r3, [sp, #16]
+	ldrb	r3, [r4]	@ zero_extendqisi2
+	ldr	r4, .L2151+4
+	cmp	r3, #1
+	itttt	eq
+	ldreq	r3, [sp, #16]
+	lsleq	r3, r3, #1
+	uxtheq	r3, r3
+	streq	r3, [sp, #16]
+	bl	printk
+	ldr	r0, [r5, #4016]
+	mov	r1, #4096
+	ldr	r5, .L2151
+	bl	__memzero
+	lsr	r3, r8, #4
+	str	r3, [sp, #28]
+	movs	r3, #0
+	str	r3, [sp, #8]
+.L2095:
+	ldrb	r7, [sp, #8]	@ zero_extendqisi2
+	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
+	cmp	r3, r7
+	bls	.L2147
+	add	r3, r5, r7, lsl #1
+	ldrh	r6, [r3, #4032]
+	cmp	r6, #0
+	bne	.L2125
+	ldrh	r2, [r4, #1884]
+	mov	r1, r6
+	ldr	r0, [r5, #3984]
+	mov	r9, r6
+	lsls	r2, r2, #9
+	bl	ftl_memset
+	adds	r3, r4, r7
+	ldrb	r10, [r3, #1620]	@ zero_extendqisi2
+	lsls	r3, r7, #2
+	add	fp, r4, r3
+	str	r6, [sp, #4]
+	str	r3, [sp, #32]
+.L2097:
+	ldrh	r3, [sp, #4]
+	cmp	r3, r8
+	str	r3, [sp, #12]
+	bcs	.L2107
+	movs	r3, #255
+	strb	r3, [sp, #42]
+	strb	r3, [sp, #43]
+	ldr	r3, [sp, #24]
+	lsls	r1, r3, #31
+	bpl	.L2099
+	ldr	r3, [fp, #1628]
+	add	r2, sp, #42
+	mov	r0, r10
+	add	r3, r3, r6
+	str	r3, [sp, #36]
+	mov	r1, r3
+	bl	FlashReadSpare
+	ldrb	r2, [r4]	@ zero_extendqisi2
+	cmp	r2, #1
+	ldr	r3, [sp, #36]
+	bne	.L2099
+	ldr	r1, [r4, #4]
+	add	r2, sp, #43
+	mov	r0, r10
+	add	r1, r1, r3
+	bl	FlashReadSpare
+	ldrb	r3, [sp, #42]	@ zero_extendqisi2
+	ldrb	r2, [sp, #43]	@ zero_extendqisi2
+	ands	r3, r3, r2
+	strb	r3, [sp, #42]
+.L2099:
+	ldr	r3, [sp, #24]
+	lsls	r2, r3, #30
+	bpl	.L2101
+	ldr	r3, [r4, #1788]
+	mov	r0, r10
+	add	r2, sp, #43
+	ldrh	r1, [r3, #10]
+	ldr	r3, [fp, #1628]
+	subs	r1, r1, #1
+	add	r1, r1, r3
+	add	r1, r1, r6
+	bl	FlashReadSpare
+.L2101:
+	ldr	r3, [r4, #1788]
+	ldrb	r2, [r3, #7]	@ zero_extendqisi2
+	ldrb	r3, [sp, #42]	@ zero_extendqisi2
+	cmp	r2, #1
+	beq	.L2102
+	cmp	r2, #8
+	bne	.L2103
+.L2102:
+	cbz	r3, .L2124
+	ldrb	r0, [sp, #43]	@ zero_extendqisi2
+	clz	r0, r0
+	lsrs	r0, r0, #5
+	b	.L2104
+.L2103:
+	cmp	r3, #255
+	bne	.L2124
+	ldrb	r0, [sp, #43]	@ zero_extendqisi2
+	subs	r0, r0, #255
+	it	ne
+	movne	r0, #1
+	b	.L2104
+.L2124:
+	movs	r0, #1
+.L2104:
+	ldr	r3, [sp, #24]
+	lsls	r3, r3, #29
+	bpl	.L2105
+	ldr	r3, .L2151+4
+	mov	r0, r10
+	ldr	r2, [sp, #32]
+	add	r3, r3, r2
+	ldr	r1, [r3, #1628]
+	add	r1, r1, r6
+	bl	SandiskProgTestBadBlock
+.L2105:
+	cbz	r0, .L2106
+	mov	r1, r7
+	ldr	r2, [sp, #4]
+	ldr	r0, .L2151+12
+	add	r9, r9, #1
+	bl	printk
+	ldr	r2, [r5, #3984]
+	uxth	r9, r9
+	ldr	r3, [sp, #12]
+	and	r0, r3, #31
+	lsrs	r1, r3, #5
+	movs	r3, #1
+	lsls	r3, r3, r0
+	ldr	r0, [r2, r1, lsl #2]
+	orrs	r3, r3, r0
+	str	r3, [r2, r1, lsl #2]
+	ldr	r2, [sp, #28]
+	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
+	muls	r3, r2, r3
+	cmp	r9, r3
+	bgt	.L2107
+.L2106:
+	ldr	r3, [sp, #4]
+	adds	r3, r3, #1
+	str	r3, [sp, #4]
+	ldr	r3, [sp, #16]
+	add	r6, r6, r3
+	b	.L2097
+.L2107:
+	mov	r2, r9
+	ldr	r0, .L2151+16
+	mov	r1, r7
+	bl	printk
+	ldrb	r3, [r4, #1616]	@ zero_extendqisi2
+	ldr	r2, [sp, #28]
+	muls	r3, r2, r3
+	cmp	r9, r3
+	blt	.L2109
+	ldrh	r2, [r4, #1884]
+	movs	r1, #0
+	ldr	r0, [r5, #3984]
+	lsls	r2, r2, #9
+	bl	ftl_memset
+.L2109:
+	cmp	r7, #0
+	bne	.L2111
+	ldrh	r10, [r5, #4004]
+	mov	r9, #1
+	mov	r6, r7
+.L2112:
+	ldr	r3, .L2151+4
+	ldrb	r3, [r3, #1]	@ zero_extendqisi2
+	cmp	r3, r10
+	bls	.L2148
+	mov	r0, r10
+	bl	FlashTestBlk
+	cbz	r0, .L2113
+	mov	r1, r10
+	ldr	r0, .L2151+20
+	bl	printk
+	ldr	r2, [r5, #3984]
+	lsr	r0, r10, #5
+	adds	r6, r6, #1
+	and	r3, r10, #31
+	ldr	r1, [r2, r0, lsl #2]
+	uxth	r6, r6
+	lsl	r3, r9, r3
+	orrs	r3, r3, r1
+	str	r3, [r2, r0, lsl #2]
+.L2113:
+	add	r10, r10, #1
+	uxth	r10, r10
+	b	.L2112
+.L2148:
+	add	fp, r8, #-1
+	sub	r9, r8, #50
+	mov	r10, #1
+	uxth	fp, fp
+.L2115:
+	cmp	fp, r9
+	ble	.L2149
+	mov	r0, fp
+	bl	FlashTestBlk
+	cbz	r0, .L2116
+	mov	r1, fp
+	ldr	r0, .L2151+20
+	bl	printk
+	ldr	r2, [r5, #3984]
+	lsr	r0, fp, #5
+	and	r3, fp, #31
+	lsl	r3, r10, r3
+	ldr	r1, [r2, r0, lsl #2]
+	orrs	r3, r3, r1
+	str	r3, [r2, r0, lsl #2]
+.L2116:
+	add	fp, fp, #-1
+	uxth	fp, fp
+	b	.L2115
+.L2149:
+	ldr	r3, .L2151+4
+	ldr	r2, [r5, #4004]
+	ldrb	r3, [r3, #1]	@ zero_extendqisi2
+	subs	r3, r3, r2
+	cmp	r6, r3
+	bcc	.L2111
+	ldrh	r2, [r4, #1884]
+	movs	r1, #0
+	ldr	r0, [r5, #3984]
+	lsls	r2, r2, #9
+	bl	ftl_memset
+.L2111:
+	ldrb	r6, [sp, #8]	@ zero_extendqisi2
+	add	r10, r8, #-1
+	add	r9, r5, r7, lsl #1
+	uxth	r10, r10
+	mul	r6, r8, r6
+.L2119:
+	mov	r1, r7
+	ldr	r0, .L2151+24
+	mov	r2, r10
+	bl	printk
+	ldr	r1, [r5, #3984]
+.L2120:
+	lsr	r3, r10, #5
+	and	r2, r10, #31
+	ldr	r3, [r1, r3, lsl #2]
+	lsrs	r3, r3, r2
+	ands	r3, r3, #1
+	beq	.L2150
+	add	r10, r10, #-1
+	uxth	r10, r10
+	b	.L2120
+.L2150:
+	ldr	r1, [sp, #20]
+	movw	r2, #61664
+	strh	r10, [r9, #4032]	@ movhi
+	add	r0, sp, #44
+	strh	r2, [r1]	@ movhi
+	strh	r10, [r1, #2]	@ movhi
+	strh	r3, [r1, #8]	@ movhi
+	movs	r1, #1
+	ldr	r3, [r5, #3984]
+	mov	r2, r1
+	str	r3, [sp, #52]
+	ldr	r3, [r5, #4016]
+	str	r3, [sp, #56]
+	add	r3, r10, r6
+	lsls	r3, r3, #10
+	str	r3, [sp, #48]
+	bl	FlashEraseBlocks
+	movs	r1, #1
+	mov	r3, r1
+	mov	r2, r1
+	add	r0, sp, #44
+	bl	FlashProgPages
+	ldr	r3, [sp, #44]
+	cbz	r3, .L2125
+	add	r10, r10, #-1
+	uxth	r10, r10
+	b	.L2119
+.L2125:
+	ldr	r3, [sp, #8]
+	adds	r3, r3, #1
+	str	r3, [sp, #8]
+	b	.L2095
+.L2147:
+	add	sp, sp, #84
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2152:
+	.align	2
+.L2151:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC106
+	.word	.LC107
+	.word	.LC108
+	.word	.LC109
+	.word	.LC110
+	.fnend
+	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
+	.align	1
+	.global	FtlLowFormatEraseBlock
+	.thumb
+	.thumb_func
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r4, .L2205
+	str	r0, [sp, #8]
+	str	r1, [sp, #4]
+	ldr	r2, [r4, #740]
+	cmp	r2, #0
+	bne	.L2182
+	ldr	r3, .L2205+4
+	mov	r9, #36
+	mov	r10, r2
+	mov	r5, r2
+	mov	r7, r2
+	mov	fp, r4
+	ldrb	r1, [r3, #76]	@ zero_extendqisi2
+	mov	r6, r3
+	str	r0, [r3, #2964]
+	str	r1, [sp, #12]
+.L2155:
+	ldrh	r1, [r6, #2828]
+	uxth	r3, r10
+	cmp	r1, r3
+	bls	.L2200
+	mul	r1, r9, r3
+	ldr	r0, [r4, #744]
+	movs	r2, #0
+	str	r2, [r0, r1]
+	ldr	r2, .L2205+4
+	ldr	r1, [sp, #8]
+	add	r3, r3, r2
+	ldrb	r0, [r3, #2856]	@ zero_extendqisi2
+	bl	V2P_block
+	ldr	r3, [sp, #4]
+	mov	r8, r0
+	cbz	r3, .L2156
+	bl	IsBlkInVendorPart
+	cbnz	r0, .L2157
+.L2156:
+	mov	r0, r8
+	bl	FtlBbmIsBadBlock
+	cbnz	r0, .L2158
+	ldr	r1, [r4, #744]
+	lsl	r3, r8, #10
+	mla	r1, r9, r5, r1
+	str	r3, [r1, #4]
+	str	r0, [r1, #8]
+	ldrh	r3, [r6, #2910]
+	muls	r3, r5, r3
+	ldr	r0, [fp, #1800]
+	it	mi
+	addmi	r3, r3, #3
+	adds	r5, r5, #1
+	bic	r3, r3, #3
+	add	r3, r3, r0
+	str	r3, [r1, #12]
+	uxth	r5, r5
+	b	.L2157
+.L2158:
+	adds	r7, r7, #1
+	uxth	r7, r7
+.L2157:
+	add	r10, r10, #1
+	b	.L2155
+.L2200:
+	mov	r8, r7
+	cbnz	r5, .L2161
+	mov	r0, r7
+	b	.L2154
+.L2161:
+	ldr	r3, [sp, #12]
+	mov	r2, r5
+	ldr	r0, [r4, #744]
+	movs	r7, #0
+	adds	r9, r3, #0
+	mov	r10, #36
+	it	ne
+	movne	r9, #1
+	mov	r1, r9
+	bl	FlashEraseBlocks
+.L2162:
+	uxth	r3, r7
+	cmp	r3, r5
+	bcs	.L2201
+	mul	r3, r10, r7
+	ldr	r2, [r4, #744]
+	adds	r0, r2, r3
+	ldr	r3, [r2, r3]
+	adds	r3, r3, #1
+	bne	.L2163
+	ldr	r0, [r0, #4]
+	add	r8, r8, #1
+	ubfx	r0, r0, #10, #16
+	uxth	r8, r8
+	bl	FtlBbmMapBadBlock
+.L2163:
+	adds	r7, r7, #1
+	b	.L2162
+.L2201:
+	ldr	r3, [sp, #4]
+	cbnz	r3, .L2165
+	movs	r3, #6
+	uxth	r5, r9
+	str	r3, [sp, #12]
+	mov	fp, #1
+	b	.L2166
+.L2165:
+	ldrb	r3, [r6, #76]	@ zero_extendqisi2
+	ldrh	fp, [r6, #2900]
+	cbnz	r3, .L2183
+	lsr	r3, fp, #2
+	movs	r5, #1
+	str	r3, [sp, #12]
+	b	.L2166
+.L2183:
+	movs	r5, #1
+	str	r5, [sp, #12]
+.L2166:
+	movs	r7, #0
+.L2176:
+	mov	r9, #0
+	mov	r6, r9
+.L2167:
+	ldr	r3, .L2205+4
+	ldrh	r2, [r3, #2828]
+	uxth	r3, r9
+	cmp	r2, r3
+	bls	.L2202
+	movs	r2, #36
+	ldr	r1, [r4, #744]
+	movs	r0, #0
+	muls	r2, r3, r2
+	str	r0, [r1, r2]
+	ldr	r2, .L2205+4
+	ldr	r1, [sp, #8]
+	add	r3, r3, r2
+	ldrb	r0, [r3, #2856]	@ zero_extendqisi2
+	bl	V2P_block
+	ldr	r3, [sp, #4]
+	mov	r10, r0
+	cbz	r3, .L2168
+	bl	IsBlkInVendorPart
+	cbnz	r0, .L2169
+.L2168:
+	mov	r0, r10
+	bl	FtlBbmIsBadBlock
+	cbnz	r0, .L2169
+	ldr	r2, [r4, #744]
+	movs	r3, #36
+	ldr	r1, .L2205
+	mla	r2, r3, r6, r2
+	add	r3, r7, r10, lsl #10
+	ldr	r1, [r1, #1792]
+	str	r3, [r2, #4]
+	ldr	r3, [r4, #1788]
+	str	r3, [r2, #8]
+	ldr	r3, .L2205+4
+	ldrh	r3, [r3, #2910]
+	muls	r3, r6, r3
+	add	r6, r6, #1
+	it	mi
+	addmi	r3, r3, #3
+	bic	r3, r3, #3
+	uxth	r6, r6
+	add	r3, r3, r1
+	str	r3, [r2, #12]
+.L2169:
+	add	r9, r9, #1
+	b	.L2167
+.L2202:
+	cmp	r6, #0
+	beq	.L2181
+	ldr	r0, [r4, #744]
+	mov	r1, r6
+	mov	r2, r5
+	movs	r3, #1
+	bl	FlashProgPages
+	mov	r9, #0
+	mov	r10, #36
+.L2173:
+	uxth	r3, r9
+	cmp	r3, r6
+	bcs	.L2203
+	mul	r3, r10, r9
+	ldr	r2, [r4, #744]
+	adds	r0, r2, r3
+	ldr	r3, [r2, r3]
+	cbz	r3, .L2174
+	ldr	r0, [r0, #4]
+	add	r8, r8, #1
+	ubfx	r0, r0, #10, #16
+	uxth	r8, r8
+	bl	FtlBbmMapBadBlock
+.L2174:
+	add	r9, r9, #1
+	b	.L2173
+.L2203:
+	ldr	r3, [sp, #12]
+	add	r7, r7, r3
+	uxth	r7, r7
+	cmp	r7, fp
+	bcc	.L2176
+	movs	r7, #0
+	mov	r9, #36
+.L2177:
+	uxth	r3, r7
+	cmp	r3, r6
+	bcs	.L2204
+	ldr	r3, [sp, #4]
+	cbz	r3, .L2178
+	mul	r3, r9, r7
+	ldr	r2, [r4, #744]
+	adds	r1, r2, r3
+	ldr	r3, [r2, r3]
+	cbnz	r3, .L2178
+	ldr	r0, [r1, #4]
+	movs	r1, #1
+	ubfx	r0, r0, #10, #16
+	bl	FtlFreeSysBlkQueueIn
+.L2178:
+	adds	r7, r7, #1
+	b	.L2177
+.L2204:
+	ldr	r3, [sp, #8]
+	cmp	r3, #63
+	bls	.L2180
+	ldr	r3, [sp, #4]
+	cbz	r3, .L2181
+.L2180:
+	ldr	r0, [r4, #744]
+	mov	r1, r5
+	mov	r2, r6
+	bl	FlashEraseBlocks
+.L2181:
+	mov	r0, r8
+	b	.L2154
+.L2182:
+	movs	r0, #0
+.L2154:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2206:
+	.align	2
+.L2205:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	.align	1
+	.global	FtlBbmTblFlush
+	.thumb
+	.thumb_func
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L2219
+	ldr	r5, [r4, #740]
+	cmp	r5, #0
+	bne	.L2209
+	ldr	r7, .L2219+4
+	mov	r1, r5
+	ldr	r0, [r4, #756]
+	ldr	r3, [r4, #1796]
+	add	r8, r7, #2992
+	ldrh	r2, [r7, #2908]
+	str	r0, [r4, #4056]
+	str	r3, [r4, #4060]
+	bl	ftl_memset
+.L2210:
+	ldrh	r3, [r7, #2850]
+	ldr	r6, .L2219+4
+	cmp	r5, r3
+	bge	.L2218
+	ldrh	r2, [r4, #1860]
+	ldr	r3, [r4, #4056]
+	ldr	r1, [r8, #4]!
+	mul	r0, r2, r5
+	lsls	r2, r2, #2
+	adds	r5, r5, #1
+	add	r0, r3, r0, lsl #2
+	bl	ftl_memcpy
+	b	.L2210
+.L2218:
+	ldr	r8, [r4, #4060]
+	movs	r1, #255
+	movs	r2, #16
+	mov	r9, #0
+	ldr	r10, .L2219
+	mov	r5, r6
+	mov	r0, r8
+	mov	fp, r9
+	bl	memset
+	movw	r3, #61649
+	strh	r3, [r8]	@ movhi
+	ldr	r3, [r6, #2976]
+	str	r3, [r8, #4]
+	ldrh	r3, [r6, #2968]
+	strh	r3, [r8, #2]	@ movhi
+	ldrh	r3, [r6, #2972]
+	strh	r3, [r8, #8]	@ movhi
+	ldrh	r3, [r6, #2974]
+	strh	r3, [r8, #10]	@ movhi
+	ldr	r3, [r6, #2824]
+	strh	r3, [r8, #12]	@ movhi
+.L2212:
+	ldr	r3, [r4, #756]
+	movs	r6, #0
+	ldrh	r1, [r7, #2968]
+	ldrh	r2, [r7, #2970]
+	str	r3, [r4, #4056]
+	ldr	r3, [r4, #1796]
+	str	r6, [r4, #4048]
+	str	r3, [r4, #4060]
+	orr	r3, r2, r1, lsl #10
+	ldrh	r0, [r8, #10]
+	str	r3, [r4, #4052]
+	ldrh	r3, [r7, #2972]
+	str	r0, [sp]
+	ldr	r0, .L2219+8
+	bl	printk
+	movs	r1, #1
+	ldr	r0, .L2219+12
+	mov	r2, r1
+	mov	r3, r1
+	bl	FlashProgPages
+	ldrh	r3, [r7, #2900]
+	ldrh	r2, [r7, #2970]
+	subs	r3, r3, #1
+	cmp	r2, r3
+	blt	.L2213
+	ldr	r3, [r5, #2976]
+	movs	r1, #1
+	ldrh	r2, [r5, #2968]
+	adds	r3, r3, #1
+	ldr	r0, [r10, #744]
+	str	r3, [r5, #2976]
+	str	r3, [r8, #4]
+	ldrh	r3, [r5, #2972]
+	strh	r2, [r8, #8]	@ movhi
+	strh	r2, [r5, #2972]	@ movhi
+	mov	r2, r1
+	strh	r3, [r5, #2968]	@ movhi
+	lsls	r3, r3, #10
+	str	r3, [r10, #4052]
+	str	r3, [r0, #4]
+	strh	r6, [r5, #2970]	@ movhi
+	bl	FlashEraseBlocks
+	movs	r1, #1
+	ldr	r0, .L2219+12
+	mov	r2, r1
+	mov	r3, r1
+	bl	FlashProgPages
+.L2213:
+	ldrh	r3, [r7, #2970]
+	ldr	r6, .L2219
+	adds	r3, r3, #1
+	strh	r3, [r7, #2970]	@ movhi
+	ldr	r3, [r4, #4048]
+	adds	r3, r3, #1
+	bne	.L2214
+	add	r9, r9, #1
+	ldr	r0, .L2219+16
+	ldr	r1, [r10, #4052]
+	uxth	r9, r9
+	bl	printk
+	cmp	r9, #3
+	bls	.L2212
+	ldr	r0, .L2219+20
+	mov	r2, r9
+	ldr	r1, [r6, #4052]
+	bl	printk
+	movs	r3, #1
+	str	r3, [r6, #740]
+	b	.L2209
+.L2214:
+	cmp	fp, #0
+	bne	.L2209
+	mov	fp, #1
+	b	.L2212
+.L2209:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2220:
+	.align	2
+.L2219:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC111
+	.word	.LANCHOR2+4048
+	.word	.LC112
+	.word	.LC113
+	.fnend
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.align	1
+	.global	allocate_data_superblock
+	.thumb
+	.thumb_func
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	ldr	r4, .L2277
+	.pad #20
+	sub	sp, sp, #20
+	ldr	r3, [r4, #740]
+	cmp	r3, #0
+	bne	.L2222
+	ldr	r10, .L2277+16
+	mov	r7, r4
+.L2223:
+	ldr	r3, .L2277+4
+	ldrb	r2, [r5, #8]	@ zero_extendqisi2
+	cmp	r5, r3
+	bne	.L2224
+	ldrh	lr, [r7, #784]
+	ldr	r6, [r7, #1652]
+	lsr	r1, lr, #1
+	mul	r0, r6, lr
+	adds	r3, r1, #1
+	add	r3, r3, r0, lsr #2
+	ldr	r0, [r7, #948]
+	uxth	r3, r3
+	cbz	r0, .L2247
+	ldr	r0, [r7, #1008]
+	cmp	r0, #29
+	bhi	.L2247
+	cmp	r0, #2
+	bls	.L2252
+	tst	lr, #1
+	beq	.L2225
+	cbz	r6, .L2249
+	b	.L2225
+.L2224:
+	cmp	r2, #1
+	bne	.L2252
+	ldrh	r3, [r10, #2848]
+	cmp	r3, #1
+	beq	.L2252
+	ldrb	r3, [r10, #76]	@ zero_extendqisi2
+	cbnz	r3, .L2252
+	ldrh	r0, [r7, #784]
+	ldr	r3, [r7, #948]
+	lsrs	r1, r0, #3
+	cbz	r3, .L2225
+	ldr	r3, [r7, #1008]
+	cmp	r3, #1
+	bhi	.L2225
+	rsb	r0, r0, r0, lsl #3
+	ubfx	r1, r0, #3, #16
+	b	.L2225
+.L2247:
+	mov	r1, r3
+.L2225:
+	cbz	r1, .L2226
+	subs	r1, r1, #1
+	uxth	r1, r1
+	b	.L2226
+.L2249:
+	mov	r1, r6
+	b	.L2226
+.L2252:
+	movs	r1, #0
+.L2226:
+	ldr	r0, .L2277+8
+	bl	List_pop_index_node
+	ldrh	r3, [r4, #784]
+	subs	r3, r3, #1
+	strh	r3, [r4, #784]	@ movhi
+	uxth	r6, r0
+	mov	r0, r5
+	strh	r6, [r5]	@ movhi
+	bl	make_superblock
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cbz	r3, .L2227
+	ldr	r0, [r7, #744]
+	movs	r2, #36
+	ldrh	ip, [r10, #2828]
+	mov	r8, #0
+	add	lr, r5, #14
+	ldr	r9, .L2277+16
+	mov	r3, r0
+	mla	r1, r2, ip, r0
+	mov	ip, r8
+	str	r1, [sp]
+	b	.L2228
+.L2227:
+	ldr	r3, [r7, #768]
+	b	.L2272
+.L2228:
+	ldr	r1, [sp]
+	cmp	r3, r1
+	beq	.L2274
+	str	ip, [r3, #8]
+	movw	fp, #65535
+	str	ip, [r3, #12]
+	adds	r3, r3, #36
+	ldrh	r1, [lr, #2]!
+	cmp	r1, fp
+	itttt	ne
+	lslne	r1, r1, #10
+	mlane	fp, r2, r8, r0
+	addne	r8, r8, #1
+	uxthne	r8, r8
+	it	ne
+	strne	r1, [fp, #4]
+	b	.L2228
+.L2274:
+	ldr	r3, [r4, #948]
+	cbz	r3, .L2232
+	ldr	r3, .L2277+12
+	cmp	r5, r3
+	bne	.L2232
+	ldr	r3, [r7, #748]
+	ldrh	r3, [r3, r6, lsl #1]
+	cmp	r3, #30
+	itt	hi
+	movhi	r3, #0
+	strbhi	r3, [r7, #796]
+.L2232:
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	ldr	r2, [r4, #748]
+	cbnz	r3, .L2233
+	ldrh	r1, [r2, r6, lsl #1]
+	cbz	r1, .L2253
+	ldrh	r3, [r9, #2888]
+	add	r3, r3, r1
+	uxth	r3, r3
+	b	.L2234
+.L2253:
+	movs	r3, #2
+.L2234:
+	strh	r3, [r2, r6, lsl #1]	@ movhi
+	mov	r0, r6
+	ldr	r3, [r4, #992]
+	movs	r1, #0
+	adds	r3, r3, #1
+	str	r3, [r4, #992]
+	bl	ftl_set_blk_mode
+	b	.L2235
+.L2233:
+	ldrh	r3, [r2, r6, lsl #1]
+	lsrs	r0, r6, #5
+	and	r1, r6, #31
+	adds	r3, r3, #1
+	strh	r3, [r2, r6, lsl #1]	@ movhi
+	ldr	r3, [r4, #996]
+	ldr	r2, [r4, #944]
+	adds	r3, r3, #1
+	str	r3, [r4, #996]
+	movs	r3, #1
+	lsls	r3, r3, r1
+	ldr	r1, [r2, r0, lsl #2]
+	orrs	r3, r3, r1
+	str	r3, [r2, r0, lsl #2]
+.L2235:
+	ldr	r3, [r4, #748]
+	ldr	r2, [r4, #1004]
+	ldr	r0, [r4, #992]
+	ldrh	r3, [r3, r6, lsl #1]
+	ldrh	r1, [r9, #2836]
+	cmp	r3, r2
+	ldrh	r2, [r9, #2888]
+	it	hi
+	strhi	r3, [r7, #1004]
+	ldr	r3, [r4, #996]
+	mla	r0, r0, r2, r3
+	bl	__aeabi_uidiv
+	ldr	r2, [r4, #1816]
+	ldr	r1, [r4, #744]
+	ldr	r3, [r2, #16]
+	adds	r3, r3, #1
+	str	r3, [r2, #16]
+	movs	r3, #36
+	adds	r2, r1, #4
+	mla	r3, r3, r8, r1
+	adds	r3, r3, #40
+	str	r0, [r4, #1000]
+.L2237:
+	adds	r2, r2, #36
+	cmp	r2, r3
+	beq	.L2275
+	ldr	r1, [r2, #-36]
+	bic	r1, r1, #1020
+	bic	r1, r1, #3
+	str	r1, [r2, #-36]
+	b	.L2237
+.L2275:
+	ldrb	r3, [r9, #76]	@ zero_extendqisi2
+	cbz	r3, .L2239
+	ldrb	r3, [r5, #8]	@ zero_extendqisi2
+	mov	r2, r8
+	ldr	r0, [r4, #744]
+	cmp	r3, #1
+	ite	eq
+	moveq	r1, #0
+	movne	r1, #1
+	bl	FlashEraseBlocks
+.L2239:
+	ldrb	r1, [r5, #8]	@ zero_extendqisi2
+	mov	r2, r8
+	ldr	r0, [r4, #744]
+	mov	fp, #0
+	bl	FlashEraseBlocks
+	add	r1, r5, #16
+	mov	ip, #36
+	mov	r2, fp
+.L2241:
+	uxth	r3, fp
+	cmp	r3, r8
+	bcs	.L2276
+	mul	r3, ip, fp
+	ldr	lr, [r4, #744]
+	add	r0, lr, r3
+	ldr	r3, [lr, r3]
+	cmp	r3, #-1
+	bne	.L2242
+	ldr	r0, [r0, #4]
+	adds	r2, r2, #1
+	str	ip, [sp, #12]
+	ubfx	r0, r0, #10, #16
+	str	r3, [sp, #8]
+	str	r1, [sp, #4]
+	str	r2, [sp]
+	bl	FtlBbmMapBadBlock
+	ldr	r3, [sp, #8]
+	ldr	r1, [sp, #4]
+	ldr	ip, [sp, #12]
+	ldr	r2, [sp]
+	strh	r3, [r1]	@ movhi
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	subs	r3, r3, #1
+	strb	r3, [r5, #7]
+.L2242:
+	add	fp, fp, #1
+	adds	r1, r1, #2
+	b	.L2241
+.L2276:
+	cbz	r2, .L2244
+	mov	r0, r6
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L2244:
+	ldrb	r3, [r5, #7]	@ zero_extendqisi2
+	cbnz	r3, .L2245
+	ldr	r3, [r4, #768]
+.L2272:
+	movw	r2, #65535
+	strh	r2, [r3, r6, lsl #1]	@ movhi
+	b	.L2223
+.L2245:
+	ldrh	r2, [r9, #2898]
+	strh	r6, [r5]	@ movhi
+	smulbb	r3, r2, r3
+	movs	r2, #0
+	strh	r2, [r5, #2]	@ movhi
+	strb	r2, [r5, #6]
+	ldr	r2, [r4, #984]
+	uxth	r3, r3
+	strh	r3, [r5, #4]	@ movhi
+	str	r2, [r5, #12]
+	adds	r2, r2, #1
+	str	r2, [r4, #984]
+	ldr	r2, [r4, #768]
+	ldrh	r1, [r5]
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+.L2222:
+	movs	r0, #0
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2278:
+	.align	2
+.L2277:
+	.word	.LANCHOR2
+	.word	.LANCHOR2+884
+	.word	.LANCHOR2+780
+	.word	.LANCHOR2+788
+	.word	.LANCHOR0
+	.fnend
+	.size	allocate_data_superblock, .-allocate_data_superblock
+	.align	1
+	.global	FtlGcFreeBadSuperBlk
+	.thumb
+	.thumb_func
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r5, .L2292
+	str	r0, [sp]
+	ldrh	r3, [r5, #1698]
+	cmp	r3, #0
+	beq	.L2281
+	ldr	r7, .L2292+4
+	mov	r10, #0
+	mov	r8, r5
+.L2280:
+	ldrh	r2, [r7, #2828]
+	uxth	r3, r10
+	cmp	r2, r3
+	bls	.L2289
+	add	r3, r3, r7
+	ldr	r1, [sp]
+	mov	fp, #0
+	ldrb	r0, [r3, #2856]	@ zero_extendqisi2
+	bl	V2P_block
+	ldr	r2, .L2292+8
+	mov	r9, r0
+.L2282:
+	ldrh	r3, [r5, #1698]
+	uxth	r4, fp
+	cmp	r3, r4
+	bls	.L2290
+	lsls	r6, r4, #1
+	add	r3, r8, r6
+	ldrh	r3, [r3, #1700]
+	cmp	r3, r9
+	bne	.L2283
+	mov	r1, r9
+	ldr	r0, .L2292+12
+	str	r2, [sp, #4]
+	bl	printk
+	mov	r0, r9
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	r1, [r8, #1698]
+	ldr	r2, [sp, #4]
+	adds	r3, r2, r6
+.L2284:
+	cmp	r4, r1
+	bcs	.L2291
+	ldrh	r0, [r3, #2]
+	adds	r4, r4, #1
+	uxth	r4, r4
+	strh	r0, [r3], #2	@ movhi
+	b	.L2284
+.L2291:
+	subs	r1, r1, #1
+	strh	r1, [r5, #1698]	@ movhi
+.L2283:
+	add	fp, fp, #1
+	b	.L2282
+.L2290:
+	add	r10, r10, #1
+	b	.L2280
+.L2289:
+	bl	FtlGcReFreshBadBlk
+.L2281:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2293:
+	.align	2
+.L2292:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+1700
+	.word	.LC114
+	.fnend
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.align	1
+	.global	update_vpc_list
+	.thumb
+	.thumb_func
+	.type	update_vpc_list, %function
+update_vpc_list:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r2, .L2303
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r0
+	ldr	r3, [r2, #768]
+	mov	r5, r2
+	ldrh	r3, [r3, r0, lsl #1]
+	cbnz	r3, .L2295
+	ldrh	r1, [r2, #1076]
+	cmp	r1, r0
+	bne	.L2296
+	movw	r3, #65535
+	strh	r3, [r2, #1076]	@ movhi
+	b	.L2297
+.L2296:
+	ldrh	r1, [r2, #788]
+	cmp	r1, r0
+	beq	.L2302
+	ldrh	r1, [r2, #836]
+	cmp	r1, r0
+	beq	.L2302
+	ldrh	r2, [r2, #884]
+	cmp	r2, r0
+	beq	.L2302
+.L2297:
+	mov	r1, r4
+	ldr	r0, .L2303+4
+	bl	List_remove_node
+	ldrh	r3, [r5, #776]
+	mov	r0, r4
+	subs	r3, r3, #1
+	strh	r3, [r5, #776]	@ movhi
+	bl	free_data_superblock
+	mov	r0, r4
+	bl	FtlGcFreeBadSuperBlk
+	movs	r0, #1
+	pop	{r3, r4, r5, pc}
+.L2295:
+	bl	List_update_data_list
+.L2302:
+	movs	r0, #0
+	pop	{r3, r4, r5, pc}
+.L2304:
+	.align	2
+.L2303:
+	.word	.LANCHOR2
+	.word	.LANCHOR2+764
+	.fnend
+	.size	update_vpc_list, .-update_vpc_list
+	.align	1
+	.global	decrement_vpc_count
+	.thumb
+	.thumb_func
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r5, r0
+	ldr	r3, .L2311
+	beq	.L2306
+	ldr	r2, [r3, #768]
+	ldrh	r4, [r2, r0, lsl #1]
+	cbnz	r4, .L2307
+	mov	r1, r5
+	mov	r2, r4
+	ldr	r0, .L2311+4
+	bl	printk
+	mov	r0, r4
+	pop	{r3, r4, r5, pc}
+.L2307:
+	subs	r4, r4, #1
+	strh	r4, [r2, r0, lsl #1]	@ movhi
+.L2306:
+	ldrh	r0, [r3, #1916]
+	movw	r3, #65535
+	ldr	r4, .L2311
+	cmp	r0, r3
+	bne	.L2309
+	strh	r5, [r4, #1916]	@ movhi
+	b	.L2310
+.L2309:
+	cmp	r0, r5
+	beq	.L2310
+	bl	update_vpc_list
+	strh	r5, [r4, #1916]	@ movhi
+	adds	r0, r0, #0
+	it	ne
+	movne	r0, #1
+	pop	{r3, r4, r5, pc}
+.L2310:
+	movs	r0, #0
+	pop	{r3, r4, r5, pc}
+.L2312:
+	.align	2
+.L2311:
+	.word	.LANCHOR2
+	.word	.LC115
+	.fnend
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	1
+	.global	FtlSlcSuperblockCheck
+	.thumb
+	.thumb_func
+	.type	FtlSlcSuperblockCheck, %function
+FtlSlcSuperblockCheck:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r4, r0
+	ldrh	r3, [r0, #4]
+	cmp	r3, #0
+	beq	.L2313
+	ldrh	r3, [r0]
+	movw	r5, #65535
+	cmp	r3, r5
+	beq	.L2313
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	movs	r7, #0
+	ldr	r6, .L2325
+	adds	r3, r3, #8
+	ldrh	r3, [r0, r3, lsl #1]
+.L2317:
+	cmp	r3, r5
+	bne	.L2324
+.L2319:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	ldrh	r2, [r6, #2828]
+	adds	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r4, #6]
+	cmp	r2, r3
+	itttt	eq
+	strbeq	r7, [r4, #6]
+	ldrheq	r3, [r4, #2]
+	addeq	r3, r3, #1
+	strheq	r3, [r4, #2]	@ movhi
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	adds	r3, r3, #8
+	ldrh	r3, [r4, r3, lsl #1]
+	b	.L2317
+.L2324:
+	ldrb	r1, [r4, #8]	@ zero_extendqisi2
+	cmp	r1, #1
+	bne	.L2320
+	ldrb	r3, [r6, #76]	@ zero_extendqisi2
+	cbnz	r3, .L2320
+	ldrh	r3, [r4, #2]
+	add	r3, r6, r3, lsl #1
+	ldrh	r3, [r3, #592]
+	cmp	r3, r5
+	bne	.L2320
+	ldrh	r3, [r4, #4]
+	ldrh	r0, [r4]
+	subs	r3, r3, #1
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	ldrh	r2, [r4, #4]
+	cmp	r2, #0
+	bne	.L2319
+	ldrh	r3, [r4, #2]
+	strb	r2, [r4, #6]
+	adds	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	pop	{r3, r4, r5, r6, r7, pc}
+.L2320:
+	ldr	r2, .L2325
+	ldrb	r3, [r2, #76]	@ zero_extendqisi2
+	cbz	r3, .L2313
+	cmp	r1, #1
+	bne	.L2313
+	ldrh	r1, [r4, #2]
+	ldrh	r3, [r2, #2900]
+	cmp	r1, r3
+	bcc	.L2313
+	ldr	r3, .L2325+4
+	ldrh	r0, [r4]
+	ldrh	r5, [r4, #4]
+	ldr	r1, [r3, #768]
+	ldrh	r3, [r1, r0, lsl #1]
+	subs	r3, r3, r5
+	strh	r3, [r1, r0, lsl #1]	@ movhi
+	ldrh	r2, [r2, #2898]
+	movs	r3, #0
+	strh	r3, [r4, #4]	@ movhi
+	strb	r3, [r4, #6]
+	strh	r2, [r4, #2]	@ movhi
+.L2313:
+	pop	{r3, r4, r5, r6, r7, pc}
+.L2326:
+	.align	2
+.L2325:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
+	.align	1
+	.global	get_new_active_ppa
+	.thumb
+	.thumb_func
+	.type	get_new_active_ppa, %function
+get_new_active_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	movs	r6, #0
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	mov	r4, r0
+	strb	r6, [r0, #10]
+	movw	r8, #65535
+	adds	r3, r3, #8
+	ldr	r5, .L2344
+	ldrh	r2, [r0, r3, lsl #1]
+.L2328:
+	cmp	r2, r8
+	ldr	r7, .L2344
+	bne	.L2343
+.L2329:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	ldrh	r2, [r5, #2828]
+	adds	r3, r3, #1
+	uxtb	r3, r3
+	strb	r3, [r4, #6]
+	cmp	r2, r3
+	itttt	eq
+	strbeq	r6, [r4, #6]
+	ldrheq	r3, [r4, #2]
+	addeq	r3, r3, #1
+	strheq	r3, [r4, #2]	@ movhi
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	adds	r3, r3, #8
+	ldrh	r2, [r4, r3, lsl #1]
+	b	.L2328
+.L2343:
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	ldrh	r1, [r4, #2]
+	cmp	r3, #1
+	ldrh	r3, [r4, #4]
+	bne	.L2331
+	ldrb	r0, [r5, #76]	@ zero_extendqisi2
+	cbnz	r0, .L2331
+	add	r0, r5, r1, lsl #1
+	ldrh	r0, [r0, #592]
+	cmp	r0, r8
+	bne	.L2331
+	subs	r3, r3, #1
+	ldrh	r0, [r4]
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	b	.L2329
+.L2331:
+	movw	r6, #65535
+	orr	r5, r1, r2, lsl #10
+	mov	r8, r6
+	subs	r3, r3, #1
+	strh	r3, [r4, #4]	@ movhi
+.L2332:
+	ldrb	r3, [r4, #6]	@ zero_extendqisi2
+	ldrh	r1, [r7, #2828]
+.L2334:
+	adds	r3, r3, #1
+	uxtb	r3, r3
+	cmp	r3, r1
+	itttt	eq
+	ldrheq	r3, [r4, #2]
+	addeq	r3, r3, #1
+	strheq	r3, [r4, #2]	@ movhi
+	moveq	r3, #0
+	add	r2, r3, #8
+	ldrh	r2, [r4, r2, lsl #1]
+	cmp	r2, r6
+	beq	.L2334
+	strb	r3, [r4, #6]
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	bne	.L2339
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	cbnz	r3, .L2336
+	ldrh	r2, [r4, #2]
+	ldr	r3, .L2344
+	add	r3, r3, r2, lsl #1
+	ldrh	r3, [r3, #592]
+	cmp	r3, r8
+	bne	.L2336
+	ldrh	r3, [r4, #4]
+	cbz	r3, .L2336
+	subs	r3, r3, #1
+	ldrh	r0, [r4]
+	strh	r3, [r4, #4]	@ movhi
+	bl	decrement_vpc_count
+	b	.L2332
+.L2336:
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	ldr	r2, .L2344
+	cbz	r3, .L2339
+	ldrh	r1, [r4, #2]
+	ldrh	r3, [r2, #2900]
+	cmp	r1, r3
+	bcc	.L2339
+	ldr	r3, .L2344+4
+	ldrh	r0, [r4]
+	ldrh	r6, [r4, #4]
+	ldr	r1, [r3, #768]
+	ldrh	r3, [r1, r0, lsl #1]
+	subs	r3, r3, r6
+	strh	r3, [r1, r0, lsl #1]	@ movhi
+	ldrh	r2, [r2, #2898]
+	movs	r3, #0
+	strh	r3, [r4, #4]	@ movhi
+	strb	r3, [r4, #6]
+	strh	r2, [r4, #2]	@ movhi
+.L2339:
+	mov	r0, r5
+	pop	{r4, r5, r6, r7, r8, pc}
+.L2345:
+	.align	2
+.L2344:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	get_new_active_ppa, .-get_new_active_ppa
+	.align	1
+	.global	FtlVpcTblFlush
+	.thumb
+	.thumb_func
+	.type	FtlVpcTblFlush, %function
+FtlVpcTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, lr}
+	ldr	r4, .L2365
+	ldr	r3, [r4, #740]
+	cmp	r3, #0
+	bne	.L2348
+	ldr	r2, [r4, #756]
+	movs	r1, #255
+	ldr	r7, [r4, #1796]
+	ldr	r5, .L2365+4
+	str	r2, [r4, #4056]
+	ldrh	r2, [r4, #1064]
+	str	r7, [r4, #4060]
+	str	r3, [r7, #12]
+	strh	r2, [r7, #2]	@ movhi
+	movw	r2, #61604
+	strh	r2, [r7]	@ movhi
+	ldr	r2, [r4, #1072]
+	str	r3, [r7, #8]
+	ldr	r3, .L2365+8
+	str	r2, [r7, #4]
+	ldrh	r2, [r4, #790]
+	str	r3, [r4, #1012]
+	ldr	r3, .L2365+12
+	str	r3, [r4, #1016]
+	ldrh	r3, [r4, #1070]
+	strh	r3, [r4, #1020]	@ movhi
+	ldrh	r3, [r5, #2850]
+	strb	r3, [r4, #1022]
+	ldrh	r3, [r4, #788]
+	strh	r3, [r4, #1026]	@ movhi
+	ldrb	r3, [r4, #794]	@ zero_extendqisi2
+	orr	r3, r3, r2, lsl #6
+	strh	r3, [r4, #1028]	@ movhi
+	ldrb	r3, [r4, #796]	@ zero_extendqisi2
+	ldrh	r2, [r4, #838]
+	strb	r3, [r4, #1023]
+	ldrh	r3, [r4, #836]
+	strh	r3, [r4, #1030]	@ movhi
+	ldrb	r3, [r4, #842]	@ zero_extendqisi2
+	orr	r3, r3, r2, lsl #6
+	strh	r3, [r4, #1032]	@ movhi
+	ldrb	r3, [r4, #844]	@ zero_extendqisi2
+	strb	r3, [r4, #1024]
+	ldrh	r3, [r4, #884]
+	strh	r3, [r4, #1034]	@ movhi
+	ldrh	r2, [r4, #886]
+	ldrb	r3, [r4, #890]	@ zero_extendqisi2
+	ldr	r0, [r4, #4056]
+	orr	r3, r3, r2, lsl #6
+	strh	r3, [r4, #1036]	@ movhi
+	ldrb	r3, [r4, #892]	@ zero_extendqisi2
+	ldrh	r2, [r5, #2908]
+	strb	r3, [r4, #1025]
+	ldr	r3, [r4, #992]
+	str	r3, [r4, #1044]
+	ldr	r3, [r4, #984]
+	str	r3, [r4, #1052]
+	ldr	r3, [r4, #988]
+	str	r3, [r4, #1048]
+	bl	ftl_memset
+	add	r1, r4, #1012
+	movs	r2, #48
+	ldr	r0, [r4, #4056]
+	bl	ftl_memcpy
+	ldrh	r2, [r5, #2836]
+	ldr	r0, [r4, #4056]
+	ldr	r1, [r4, #768]
+	lsls	r2, r2, #1
+	adds	r0, r0, #48
+	bl	ftl_memcpy
+	ldrh	r2, [r5, #2836]
+	ldr	r0, [r4, #4056]
+	add	r3, r2, #24
+	ldr	r1, [r4, #944]
+	ubfx	r3, r3, #1, #30
+	lsrs	r2, r2, #3
+	adds	r2, r2, #4
+	add	r0, r0, r3, lsl #2
+	bl	ftl_memcpy
+	ldrh	r3, [r5, #2944]
+	cbz	r3, .L2349
+	ldrh	r2, [r5, #2836]
+	ldr	r0, [r4, #4056]
+	ldr	r1, [r4, #1844]
+	lsrs	r3, r2, #3
+	add	r3, r3, r2, lsl #1
+	ldrh	r2, [r5, #2936]
+	adds	r3, r3, #52
+	ubfx	r3, r3, #2, #14
+	lsls	r2, r2, #2
+	add	r0, r0, r3, lsl #2
+	bl	ftl_memcpy
+.L2349:
+	movs	r0, #0
+	ldr	r6, .L2365
+	bl	FtlUpdateVaildLpn
+	mov	r8, #0
+	movw	r9, #65535
+.L2350:
+	ldr	r3, [r4, #756]
+	movs	r1, #1
+	ldrh	r2, [r4, #1064]
+	ldr	r0, .L2365+16
+	str	r3, [r4, #4056]
+	ldr	r3, [r4, #1796]
+	str	r3, [r4, #4060]
+	ldrh	r3, [r4, #1066]
+	orr	r3, r3, r2, lsl #10
+	mov	r2, r1
+	str	r3, [r4, #4052]
+	mov	r3, r1
+	bl	FlashProgPages
+	ldrh	r3, [r5, #2900]
+	ldrh	r2, [r4, #1066]
+	subs	r3, r3, #1
+	cmp	r2, r3
+	blt	.L2351
+	ldrh	r3, [r6, #1064]
+	ldrh	r9, [r6, #1068]
+	strh	r3, [r6, #1068]	@ movhi
+	movs	r3, #0
+	strh	r3, [r6, #1066]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	ldr	r3, [r6, #984]
+	movs	r1, #1
+	adds	r2, r3, #1
+	str	r2, [r6, #984]
+	str	r3, [r6, #1072]
+	lsls	r2, r0, #10
+	strh	r0, [r6, #1064]	@ movhi
+	str	r2, [r6, #4052]
+	mov	r2, r1
+	str	r3, [r7, #4]
+	mov	r3, r1
+	strh	r0, [r7, #2]	@ movhi
+	ldr	r0, .L2365+16
+	bl	FlashProgPages
+.L2351:
+	ldrh	r3, [r4, #1066]
+	ldr	r2, [r4, #4048]
+	adds	r3, r3, #1
+	adds	r1, r2, #1
+	uxth	r3, r3
+	strh	r3, [r4, #1066]	@ movhi
+	bne	.L2352
+	cmp	r3, #1
+	add	r8, r8, #1
+	it	eq
+	ldrheq	r3, [r5, #2900]
+	uxth	r8, r8
+	itt	eq
+	addeq	r3, r3, #-1
+	strheq	r3, [r6, #1066]	@ movhi
+	cmp	r8, #3
+	bls	.L2350
+	ldr	r0, .L2365+20
+	mov	r2, r8
+	ldr	r1, [r4, #4052]
+	bl	printk
+	movs	r3, #1
+	str	r3, [r4, #740]
+	b	.L2348
+.L2352:
+	cmp	r3, #1
+	beq	.L2350
+	cmp	r2, #256
+	beq	.L2350
+	movw	r3, #65535
+	cmp	r9, r3
+	beq	.L2348
+	mov	r0, r9
+	movs	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+.L2348:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
+.L2366:
+	.align	2
+.L2365:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	1179929683
+	.word	1342177351
+	.word	.LANCHOR2+4048
+	.word	.LC116
+	.fnend
+	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
+	.align	1
+	.global	FtlSuperblockPowerLostFix
+	.thumb
+	.thumb_func
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r4, r0
+	ldr	r7, .L2381
+	.pad #40
+	sub	sp, sp, #40
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	cbz	r3, .L2376
+	ldrb	r5, [r0, #8]	@ zero_extendqisi2
+	cmp	r5, #1
+	bne	.L2376
+	ldrh	r6, [r0, #4]
+	b	.L2368
+.L2376:
+	movs	r5, #0
+	movs	r6, #12
+.L2368:
+	ldr	r10, .L2381+4
+	mov	r8, #-1
+	mov	r9, #0
+.L2369:
+	adds	r6, r6, #-1
+	bcc	.L2371
+	ldrh	r3, [r4, #4]
+	cbnz	r3, .L2370
+.L2371:
+	ldr	r3, .L2381+4
+	ldrh	r1, [r4]
+	ldrh	r0, [r4, #4]
+	ldr	r2, [r3, #768]
+	ldrh	r3, [r2, r1, lsl #1]
+	subs	r3, r3, r0
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldrh	r3, [r7, #2898]
+	strh	r3, [r4, #2]	@ movhi
+	movs	r3, #0
+	strb	r3, [r4, #6]
+	strh	r3, [r4, #4]	@ movhi
+	add	sp, sp, #40
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L2370:
+	mov	r0, r4
+	bl	get_new_active_ppa
+	str	r0, [sp, #8]
+	adds	r0, r0, #1
+	beq	.L2371
+	ldr	r2, [r10, #1796]
+	movs	r1, #1
+	ldr	r3, [r10, #756]
+	add	r0, sp, #4
+	str	r8, [sp, #20]
+	str	r2, [sp, #16]
+	str	r3, [sp, #12]
+	str	r8, [r2, #12]
+	str	r8, [r2, #8]
+	ldrh	r3, [r4]
+	strh	r9, [r2]	@ movhi
+	strh	r3, [r2, #2]	@ movhi
+	ldr	r3, [r10, #988]
+	str	r3, [r2, #4]
+	adds	r3, r3, #1
+	adds	r2, r3, #1
+	mov	r2, r5
+	it	eq
+	moveq	r3, #0
+	str	r3, [r10, #988]
+	movs	r3, #0
+	bl	FlashProgPages
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	b	.L2369
+.L2382:
+	.align	2
+.L2381:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.align	1
+	.global	ftl_map_blk_gc
+	.thumb
+	.thumb_func
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r4, r0
+	ldr	r6, [r0, #12]
+	ldr	r8, [r0, #24]
+	bl	ftl_free_no_use_map_blk
+	ldrh	ip, [r4, #10]
+	ldrh	r2, [r4, #8]
+	sub	r3, ip, #4
+	ldrh	r1, [r4, #40]
+	cmp	r2, r3
+	ldr	r7, .L2404
+	bge	.L2384
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L2386
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r7, #2900]
+	cmp	r2, r3
+	bcc	.L2386
+.L2384:
+	movw	r3, #65535
+	cmp	r1, r3
+	uxth	r5, r0
+	beq	.L2388
+	ldrh	r3, [r4, #2]
+	ldrh	r2, [r7, #2900]
+	cmp	r2, r3
+	bhi	.L2388
+	movs	r2, #0
+.L2389:
+	uxth	lr, r2
+	cmp	lr, ip
+	bcs	.L2390
+	adds	r2, r2, #1
+	add	r0, r6, r2, lsl #1
+	ldrh	r0, [r0, #-2]
+	cmp	r0, r1
+	bne	.L2389
+	mov	r5, lr
+.L2390:
+	ldr	r0, .L2404+4
+	ldrh	r2, [r6, lr, lsl #1]
+	bl	printk
+	movw	r3, #65535
+	strh	r3, [r4, #40]	@ movhi
+.L2388:
+	ldrh	r9, [r6, r5, lsl #1]
+	lsls	r2, r5, #1
+	cmp	r9, #0
+	beq	.L2386
+	ldr	r3, [r4, #32]
+	cmp	r3, #0
+	bne	.L2386
+	movs	r1, #1
+	str	r1, [r4, #32]
+	strh	r3, [r6, r2]	@ movhi
+	ldrh	r3, [r4, #8]
+	ldrh	r2, [r4, #2]
+	subs	r3, r3, #1
+	strh	r3, [r4, #8]	@ movhi
+	ldrh	r3, [r7, #2900]
+	cmp	r2, r3
+	bcc	.L2392
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L2392:
+	ldr	r5, .L2404+8
+	mov	r10, #0
+.L2393:
+	ldrh	r3, [r4, #6]
+	uxth	r6, r10
+	cmp	r3, r6
+	bls	.L2403
+	ldr	r3, [r8, r6, lsl #2]
+	cmp	r9, r3, lsr #10
+	bne	.L2394
+	ldr	r3, [r5, #1776]
+	movs	r1, #1
+	ldr	fp, [r5, #1796]
+	ldr	r0, .L2404+12
+	mov	r2, r1
+	str	r3, [r5, #4056]
+	str	fp, [r5, #4060]
+	ldr	r3, [r8, r6, lsl #2]
+	str	r3, [r5, #4052]
+	bl	FlashReadPages
+	ldr	r3, [r5, #4048]
+	adds	r3, r3, #1
+	bne	.L2395
+	movs	r3, #0
+	ldr	r0, .L2404+16
+	str	r3, [r8, r6, lsl #2]
+	ldr	r1, [r5, #4052]
+	ldrh	r2, [fp, #8]
+	bl	printk
+	movs	r3, #1
+	str	r3, [r5, #740]
+	b	.L2394
+.L2395:
+	mov	r0, r4
+	mov	r1, r6
+	ldr	r2, [r5, #4056]
+	bl	FtlMapWritePage
+.L2394:
+	add	r10, r10, #1
+	b	.L2393
+.L2403:
+	mov	r0, r9
+	movs	r1, #1
+	bl	FtlFreeSysBlkQueueIn
+	movs	r3, #0
+	str	r3, [r4, #32]
+.L2386:
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r7, #2900]
+	cmp	r2, r3
+	bcc	.L2397
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+.L2397:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2405:
+	.align	2
+.L2404:
+	.word	.LANCHOR0
+	.word	.LC117
+	.word	.LANCHOR2
+	.word	.LANCHOR2+4048
+	.word	.LC118
+	.fnend
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	1
+	.global	Ftl_write_map_blk_to_last_page
+	.thumb
+	.thumb_func
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r4, r0
+	ldr	r5, .L2413
+	ldr	r7, [r0, #12]
+	ldr	r8, [r0, #24]
+	ldr	r6, [r5, #740]
+	cmp	r6, #0
+	bne	.L2407
+	ldrh	r3, [r0]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L2408
+	ldrh	r3, [r0, #8]
+	adds	r3, r3, #1
+	strh	r3, [r0, #8]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	strh	r0, [r7]	@ movhi
+	ldr	r3, [r4, #28]
+	strh	r6, [r4, #2]	@ movhi
+	adds	r3, r3, #1
+	strh	r6, [r4]	@ movhi
+	str	r3, [r4, #28]
+	b	.L2407
+.L2408:
+	ldrh	r7, [r7, r3, lsl #1]
+	movs	r1, #255
+	ldrh	r3, [r0, #2]
+	ldr	r2, [r0, #28]
+	orr	r3, r3, r7, lsl #10
+	str	r3, [r5, #4052]
+	ldr	r3, [r5, #756]
+	str	r3, [r5, #4056]
+	ldr	r3, [r5, #1796]
+	str	r3, [r5, #4060]
+	str	r2, [r3, #4]
+	movw	r2, #64245
+	strh	r2, [r3, #8]	@ movhi
+	ldrh	r2, [r0, #4]
+	strh	r7, [r3, #2]	@ movhi
+	strh	r2, [r3]	@ movhi
+	ldr	r3, .L2413+4
+	ldr	r0, [r5, #756]
+	ldrh	r2, [r3, #2900]
+	lsls	r2, r2, #3
+	bl	ftl_memset
+	mov	r3, r6
+.L2409:
+	ldrh	r1, [r4, #6]
+	uxth	r2, r6
+	cmp	r1, r2
+	bls	.L2412
+	ldr	r1, [r8, r2, lsl #2]
+	cmp	r7, r1, lsr #10
+	bne	.L2410
+	adds	r3, r3, #1
+	ldr	r1, [r5, #756]
+	uxth	r3, r3
+	str	r2, [r1, r3, lsl #3]
+	ldr	r1, [r8, r2, lsl #2]
+	ldr	r2, [r5, #756]
+	add	r2, r2, r3, lsl #3
+	str	r1, [r2, #4]
+.L2410:
+	adds	r6, r6, #1
+	b	.L2409
+.L2412:
+	movs	r1, #1
+	movs	r3, #0
+	ldr	r0, .L2413+8
+	mov	r2, r1
+	bl	FlashProgPages
+	ldrh	r3, [r4, #2]
+	mov	r0, r4
+	adds	r3, r3, #1
+	strh	r3, [r4, #2]	@ movhi
+	bl	ftl_map_blk_gc
+.L2407:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L2414:
+	.align	2
+.L2413:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+4048
+	.fnend
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	1
+	.global	FtlMapWritePage
+	.thumb
+	.thumb_func
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	mov	r5, r0
+	ldr	r4, .L2436
+	mov	r7, r1
+	str	r2, [sp, #4]
+	ldr	r6, [r4, #740]
+	cmp	r6, #0
+	bne	.L2431
+	ldr	r8, .L2436+16
+	mov	fp, r4
+	mov	r10, r8
+.L2417:
+	ldr	r3, [r4, #968]
+	adds	r3, r3, #1
+	str	r3, [r4, #968]
+	ldrh	r3, [r8, #2900]
+	ldrh	r2, [r5, #2]
+	subs	r3, r3, #1
+	cmp	r2, r3
+	bge	.L2418
+	ldrh	r2, [r5]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L2419
+.L2418:
+	mov	r0, r5
+	bl	Ftl_write_map_blk_to_last_page
+.L2419:
+	ldrh	r2, [r5]
+	movs	r1, #16
+	ldr	r3, [r5, #12]
+	ldr	r0, [r4, #1796]
+	ldrh	r9, [r3, r2, lsl #1]
+	ldrh	r3, [r5, #2]
+	str	r0, [r4, #4060]
+	orr	r3, r3, r9, lsl #10
+	str	r3, [r4, #4052]
+	ldr	r3, [sp, #4]
+	str	r3, [r4, #4056]
+	bl	__memzero
+	ldr	r3, [r4, #4060]
+	movs	r1, #1
+	ldr	r2, [r5, #28]
+	ldr	r0, .L2436+4
+	strh	r7, [r3, #8]	@ movhi
+	str	r2, [r3, #4]
+	ldrh	r2, [r5, #4]
+	strh	r9, [r3, #2]	@ movhi
+	strh	r2, [r3]	@ movhi
+	mov	r2, r1
+	mov	r3, r1
+	bl	FlashProgPages
+	ldrh	r3, [r5, #2]
+	adds	r3, r3, #1
+	uxth	r3, r3
+	strh	r3, [r5, #2]	@ movhi
+	ldr	r2, [r4, #4048]
+	adds	r1, r2, #1
+	bne	.L2420
+	ldr	r0, .L2436+8
+	adds	r6, r6, #1
+	ldr	r1, [fp, #4052]
+	bl	printk
+	ldrh	r3, [r5, #2]
+	uxth	r6, r6
+	cmp	r3, #2
+	ittt	ls
+	ldrhls	r3, [r10, #2900]
+	addls	r3, r3, #-1
+	strhls	r3, [r5, #2]	@ movhi
+	cmp	r6, #3
+	bls	.L2417
+	ldr	r0, .L2436+12
+	mov	r2, r6
+	ldr	r1, [r4, #4052]
+	bl	printk
+	movs	r3, #1
+	str	r3, [r4, #740]
+	b	.L2431
+.L2420:
+	cbz	r2, .L2423
+	cmp	r3, #1
+	strh	r9, [r5, #40]	@ movhi
+	beq	.L2417
+	cmp	r2, #256
+	b	.L2435
+.L2423:
+	cmp	r3, #1
+.L2435:
+	beq	.L2417
+	ldr	r2, [r4, #4052]
+	ldr	r3, [r5, #24]
+	str	r2, [r3, r7, lsl #2]
+.L2431:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2437:
+	.align	2
+.L2436:
+	.word	.LANCHOR2
+	.word	.LANCHOR2+4048
+	.word	.LC119
+	.word	.LC120
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	1
+	.global	load_l2p_region
+	.thumb
+	.thumb_func
+	.type	load_l2p_region, %function
+load_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r7, r0
+	ldr	r8, .L2442+8
+	ldr	r3, [r8, #1844]
+	mov	r5, r8
+	ldr	r6, [r3, r0, lsl #2]
+	movs	r3, #12
+	cbnz	r6, .L2439
+	mul	r4, r3, r1
+	ldr	r3, [r8, #932]
+	movs	r1, #255
+	add	r3, r3, r4
+	ldr	r0, [r3, #8]
+	ldr	r3, .L2442
+	ldrh	r2, [r3, #2908]
+	bl	ftl_memset
+	ldr	r3, [r8, #932]
+	strh	r7, [r3, r4]	@ movhi
+	ldr	r3, [r8, #932]
+	add	r4, r4, r3
+	str	r6, [r4, #4]
+	b	.L2440
+.L2439:
+	mul	r4, r3, r1
+	ldr	r3, [r8, #932]
+	movs	r1, #1
+	add	r0, r8, #4048
+	str	r6, [r8, #4052]
+	add	r3, r3, r4
+	mov	r2, r1
+	ldr	r3, [r3, #8]
+	str	r3, [r8, #4056]
+	ldr	r3, [r8, #1796]
+	str	r3, [r8, #4060]
+	bl	FlashReadPages
+	ldr	r3, [r8, #4048]
+	cmp	r3, #256
+	bne	.L2441
+	mov	r2, r6
+	mov	r1, r7
+	ldr	r0, .L2442+4
+	lsrs	r6, r6, #10
+	bl	printk
+	ldr	r3, [r8, #932]
+	strh	r6, [r8, #1904]	@ movhi
+	add	r0, r8, #1864
+	add	r3, r3, r4
+	mov	r1, r7
+	ldr	r2, [r3, #8]
+	bl	FtlMapWritePage
+.L2441:
+	ldr	r3, [r5, #932]
+	movs	r1, #0
+	adds	r2, r3, r4
+	str	r1, [r2, #4]
+	strh	r7, [r3, r4]	@ movhi
+.L2440:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L2443:
+	.align	2
+.L2442:
+	.word	.LANCHOR0
+	.word	.LC121
+	.word	.LANCHOR2
+	.fnend
+	.size	load_l2p_region, .-load_l2p_region
+	.align	1
+	.global	flush_l2p_region
+	.thumb
+	.thumb_func
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r4, #12
+	ldr	r5, .L2445
+	muls	r4, r0, r4
+	add	r0, r5, #1864
+	ldr	r3, [r5, #932]
+	adds	r2, r3, r4
+	ldrh	r1, [r3, r4]
+	ldr	r2, [r2, #8]
+	bl	FtlMapWritePage
+	ldr	r3, [r5, #932]
+	movs	r0, #0
+	add	r4, r4, r3
+	ldr	r3, [r4, #4]
+	bic	r3, r3, #-2147483648
+	str	r3, [r4, #4]
+	pop	{r3, r4, r5, pc}
+.L2446:
+	.align	2
+.L2445:
+	.word	.LANCHOR2
+	.fnend
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	1
+	.global	log2phys
+	.thumb
+	.thumb_func
+	.type	log2phys, %function
+log2phys:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	movs	r3, #1
+	ldr	r5, .L2461
+	mov	r9, r2
+	mov	r8, r1
+	movs	r1, #12
+	ldrh	r4, [r5, #2906]
+	ldrh	r2, [r5, #2938]
+	adds	r4, r4, #7
+	lsr	r7, r0, r4
+	lsls	r3, r3, r4
+	ldr	r4, .L2461+4
+	subs	r3, r3, #1
+	ands	r0, r0, r3
+	uxth	r7, r7
+	movs	r3, #0
+	ldr	r10, [r4, #932]
+	uxth	r6, r0
+.L2448:
+	uxth	r5, r3
+	cmp	r5, r2
+	bcs	.L2460
+	adds	r3, r3, #1
+	mla	r0, r1, r3, r10
+	ldrh	r0, [r0, #-12]
+	cmp	r0, r7
+	bne	.L2448
+.L2449:
+	movs	r3, #12
+	cmp	r9, #0
+	bne	.L2450
+	ldr	r2, [r4, #932]
+	mla	r3, r3, r5, r2
+	ldr	r3, [r3, #8]
+	ldr	r3, [r3, r6, lsl #2]
+	str	r3, [r8]
+	b	.L2451
+.L2450:
+	muls	r3, r5, r3
+	ldr	r2, [r4, #932]
+	ldr	r1, [r8]
+	add	r2, r2, r3
+	ldr	r2, [r2, #8]
+	str	r1, [r2, r6, lsl #2]
+	ldr	r2, [r4, #932]
+	strh	r7, [r4, #936]	@ movhi
+	add	r3, r3, r2
+	ldr	r2, [r3, #4]
+	orr	r2, r2, #-2147483648
+	str	r2, [r3, #4]
+.L2451:
+	ldr	r2, [r4, #932]
+	movs	r3, #12
+	mla	r5, r3, r5, r2
+	ldr	r3, [r5, #4]
+	adds	r2, r3, #1
+	beq	.L2457
+	adds	r3, r3, #1
+	str	r3, [r5, #4]
+	b	.L2457
+.L2460:
+	bl	select_l2p_ram_region
+	movs	r3, #12
+	muls	r3, r0, r3
+	mov	r5, r0
+	add	r2, r10, r3
+	ldrh	r1, [r10, r3]
+	movw	r3, #65535
+	cmp	r1, r3
+	beq	.L2454
+	ldr	r3, [r2, #4]
+	cmp	r3, #0
+	bge	.L2454
+	bl	flush_l2p_region
+.L2454:
+	mov	r0, r7
+	mov	r1, r5
+	bl	load_l2p_region
+	b	.L2449
+.L2457:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L2462:
+	.align	2
+.L2461:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	log2phys, .-log2phys
+	.align	1
+	.global	FtlReUsePrevPpa
+	.thumb
+	.thumb_func
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #12
+	mov	r6, r0
+	ubfx	r0, r1, #10, #16
+	str	r1, [sp, #4]
+	bl	P2V_block_in_plane
+	ldr	r5, .L2472
+	ldr	r4, [r5, #768]
+	ldrh	r3, [r4, r0, lsl #1]
+	cbnz	r3, .L2464
+	ldr	r4, [r5, #780]
+	cbz	r4, .L2465
+	ldr	r1, [r5, #760]
+	mov	lr, #6
+	ldr	r2, .L2472+4
+	movw	ip, #65535
+	subs	r4, r4, r1
+	ldrh	r7, [r5, #784]
+	asrs	r4, r4, #1
+	muls	r4, r2, r4
+	uxth	r4, r4
+.L2466:
+	uxth	r2, r3
+	cmp	r2, r7
+	bcs	.L2465
+	cmp	r4, r0
+	bne	.L2467
+	mov	r1, r4
+	ldr	r0, .L2472+8
+	bl	List_remove_node
+	ldrh	r3, [r5, #784]
+	mov	r0, r4
+	subs	r3, r3, #1
+	strh	r3, [r5, #784]	@ movhi
+	bl	INSERT_DATA_LIST
+	ldr	r2, [r5, #768]
+	ldrh	r3, [r2, r4, lsl #1]
+	adds	r3, r3, #1
+	strh	r3, [r2, r4, lsl #1]	@ movhi
+	b	.L2465
+.L2467:
+	mul	r4, lr, r4
+	adds	r3, r3, #1
+	ldrh	r4, [r1, r4]
+	cmp	r4, ip
+	bne	.L2466
+	b	.L2465
+.L2464:
+	adds	r3, r3, #1
+	strh	r3, [r4, r0, lsl #1]	@ movhi
+.L2465:
+	mov	r0, r6
+	add	r1, sp, #4
+	movs	r2, #1
+	bl	log2phys
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, pc}
+.L2473:
+	.align	2
+.L2472:
+	.word	.LANCHOR2
+	.word	-1431655765
+	.word	.LANCHOR2+780
+	.fnend
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	1
+	.global	FtlMapTblRecovery
+	.thumb
+	.thumb_func
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #28
+	sub	sp, sp, #28
+	ldr	r3, [r0, #16]
+	mov	r4, r0
+	ldrh	fp, [r0, #6]
+	movs	r1, #0
+	ldr	r10, [r0, #24]
+	movs	r6, #0
+	ldr	r5, .L2520
+	str	r3, [sp, #12]
+	lsl	r2, fp, #2
+	ldrh	r3, [r0, #8]
+	ldr	r8, [r0, #12]
+	mov	r0, r10
+	str	r3, [sp, #8]
+	bl	ftl_memset
+	ldr	r3, [r5, #756]
+	ldr	r7, [r5, #1796]
+	str	r6, [r4, #32]
+	str	r3, [r5, #4056]
+	movw	r3, #65535
+	str	r7, [r5, #4060]
+	str	r6, [r4, #28]
+	strh	r3, [r4]	@ movhi
+	strh	r3, [r4, #2]	@ movhi
+	movs	r3, #1
+	str	r3, [r4, #36]
+.L2475:
+	uxth	ip, r6
+	ldr	r3, [sp, #8]
+	sxth	r9, ip
+	cmp	r9, r3
+	bge	.L2492
+	ldr	r3, [sp, #8]
+	subs	r2, r3, #1
+	cmp	r9, r2
+	lsl	r2, r9, #1
+	bne	.L2476
+	ldrh	r0, [r8, r9, lsl #1]
+	movs	r1, #1
+	str	ip, [sp, #8]
+	add	r6, r8, r2
+	bl	FtlGetLastWrittenPage
+	adds	r3, r0, #1
+	ldr	ip, [sp, #8]
+	strh	r3, [r4, #2]	@ movhi
+	sxth	r0, r0
+	ldr	r3, [sp, #12]
+	strh	ip, [r4]	@ movhi
+	mov	ip, #0
+	ldr	r3, [r3, r9, lsl #2]
+	add	r9, r0, #1
+	str	r3, [r4, #28]
+	ldr	r3, .L2520
+.L2477:
+	sxth	r2, ip
+	cmp	r2, r9
+	bge	.L2492
+	ldrh	r1, [r6]
+	ldr	r0, .L2520+4
+	str	r3, [sp, #12]
+	orr	r2, r2, r1, lsl #10
+	movs	r1, #1
+	str	r2, [r5, #4052]
+	mov	r2, r1
+	str	ip, [sp, #8]
+	bl	FlashReadPages
+	ldr	r2, [r5, #4048]
+	adds	r2, r2, #1
+	ldr	ip, [sp, #8]
+	ldr	r3, [sp, #12]
+	beq	.L2478
+	ldrh	r2, [r7, #8]
+	cmp	r2, fp
+	bcs	.L2479
+	ldrh	r0, [r7]
+	ldrh	r1, [r4, #4]
+	cmp	r0, r1
+	bne	.L2479
+	ldr	r1, [r3, #4052]
+	str	r1, [r10, r2, lsl #2]
+	b	.L2479
+.L2478:
+	ldrh	r2, [r6]
+	strh	r2, [r4, #40]	@ movhi
+.L2479:
+	add	ip, ip, #1
+	b	.L2477
+.L2492:
+	ldr	r3, .L2520+8
+	ldr	r10, .L2520+12
+	cmp	r4, r3
+	bne	.L2482
+	b	.L2517
+.L2476:
+	ldr	r1, [r5, #756]
+	add	r3, r8, r2
+	str	r3, [sp, #16]
+	ldr	r3, .L2520+12
+	str	r1, [r5, #4056]
+	ldrh	r1, [r8, r9, lsl #1]
+	ldrh	r2, [r3, #2900]
+	ldr	r0, .L2520+4
+	subs	r2, r2, #1
+	orr	r2, r2, r1, lsl #10
+	movs	r1, #1
+	str	r2, [r5, #4052]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [r5, #4048]
+	adds	r2, r2, #1
+	beq	.L2506
+	ldrh	r1, [r7]
+	ldrh	r2, [r4, #4]
+	cmp	r1, r2
+	bne	.L2506
+	ldrh	r1, [r7, #8]
+	movw	r2, #64245
+	cmp	r1, r2
+	bne	.L2506
+	movs	r0, #0
+	mov	ip, #8
+	mov	r9, #4
+.L2484:
+	ldr	r3, .L2520+12
+	uxth	r2, r0
+	sxth	lr, r2
+	ldrh	r1, [r3, #2900]
+	subs	r1, r1, #1
+	cmp	lr, r1
+	bge	.L2487
+	ldr	r1, [r5, #756]
+	adds	r0, r0, #1
+	ldrh	lr, [r1, lr, lsl #3]
+	cmp	lr, fp
+	ittt	cc
+	smlabbcc	r2, r2, ip, r9
+	ldrcc	r2, [r1, r2]
+	strcc	r2, [r10, lr, lsl #2]
+	b	.L2484
+.L2506:
+	ldr	r3, .L2520
+	mov	r9, #0
+.L2514:
+	ldr	r1, .L2520+12
+	sxth	r2, r9
+	ldrh	r1, [r1, #2900]
+	cmp	r2, r1
+	bge	.L2487
+	ldr	r1, [sp, #16]
+	ldr	r0, .L2520+4
+	str	r3, [sp, #20]
+	ldrh	r1, [r1]
+	orr	r2, r2, r1, lsl #10
+	movs	r1, #1
+	str	r2, [r3, #4052]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r3, [sp, #20]
+	ldr	r2, [r3, #4048]
+	adds	r2, r2, #1
+	beq	.L2488
+	ldrh	r2, [r7, #8]
+	cmp	r2, fp
+	bcs	.L2488
+	ldrh	r1, [r4, #4]
+	ldrh	r0, [r7]
+	cmp	r0, r1
+	itt	eq
+	ldreq	r1, [r3, #4052]
+	streq	r1, [r10, r2, lsl #2]
+.L2488:
+	add	r9, r9, #1
+	b	.L2514
+.L2487:
+	adds	r6, r6, #1
+	b	.L2475
+.L2503:
+	ldr	r2, [r5, #1848]
+	lsl	r7, r9, #2
+	ldr	r3, [r2, r9, lsl #2]
+	subs	r1, r3, #1
+	adds	r1, r1, #3
+	bls	.L2518
+.L2497:
+	add	r9, r9, #1
+.L2495:
+	ldrh	r3, [r10, #2936]
+	cmp	r9, r3
+	bcc	.L2503
+.L2482:
+	mov	r0, r4
+	bl	ftl_free_no_use_map_blk
+	ldrh	r2, [r4, #2]
+	ldrh	r3, [r10, #2900]
+	cmp	r2, r3
+	bne	.L2494
+	mov	r0, r4
+	bl	ftl_map_blk_alloc_new_blk
+	b	.L2494
+.L2517:
+	ldrh	r3, [r10, #2944]
+	cmp	r3, #0
+	beq	.L2482
+	mov	r9, #0
+	sub	r6, r4, #1864
+	b	.L2495
+.L2518:
+	ldr	r1, [r6, #1844]
+	ldr	r1, [r1, r9, lsl #2]
+	cmp	r3, r1
+	beq	.L2497
+	ldr	r3, [r6, #756]
+	movs	r1, #1
+	ldr	r0, .L2520+4
+	str	r3, [r6, #4056]
+	ldr	r3, [r6, #1796]
+	str	r3, [r6, #4060]
+	ldr	r2, [r2, r7]
+	str	r3, [sp, #8]
+	str	r2, [r6, #4052]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [r6, #4048]
+	adds	r2, r2, #1
+	ldr	r3, [sp, #8]
+	beq	.L2510
+	ldrh	r1, [r3]
+	ldrh	r2, [r6, #1868]
+	cmp	r1, r2
+	bne	.L2510
+	ldr	fp, [r3, #4]
+	b	.L2499
+.L2510:
+	mov	fp, #0
+.L2499:
+	ldr	r2, [r5, #1844]
+	movs	r1, #1
+	ldr	r0, .L2520+4
+	str	r3, [sp, #8]
+	ldr	r2, [r2, r7]
+	str	r2, [r5, #4052]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r3, [sp, #8]
+	ldr	r1, [r3, #4]
+	cmp	fp, r1
+	bls	.L2497
+	ldr	r2, [r6, #1848]
+	ldr	r3, [r6, #1844]
+	str	r1, [sp]
+	ldr	r1, [r2, r7]
+	ldr	r0, .L2520+16
+	ldr	r2, [r3, r7]
+	mov	r3, fp
+	bl	printk
+	ldr	r3, [r6, #1848]
+	ldr	r2, [r3, r7]
+	ldr	r3, [r6, #1844]
+	str	r2, [r3, r7]
+	movs	r2, #0
+	ldr	r3, [r6, #1848]
+	ldr	r0, [r3, r7]
+	ldrh	r3, [r6, #1908]
+	ubfx	r0, r0, #10, #16
+.L2500:
+	sxth	r1, r2
+	cmp	r1, r3
+	bge	.L2519
+	ldrh	r1, [r8, r1, lsl #1]
+	adds	r2, r2, #1
+	cmp	r1, r0
+	bne	.L2500
+	b	.L2497
+.L2519:
+	ldr	r2, [r10, #2928]
+	cmp	r3, r2
+	bcs	.L2497
+	strh	r0, [r8, r3, lsl #1]	@ movhi
+	ldrh	r3, [r5, #1908]
+	adds	r3, r3, #1
+	strh	r3, [r5, #1908]	@ movhi
+	bl	remove_from_free_sys_Queue
+	b	.L2497
+.L2494:
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	mov	r0, r4
+	bl	ftl_map_blk_gc
+	movs	r0, #0
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2521:
+	.align	2
+.L2520:
+	.word	.LANCHOR2
+	.word	.LANCHOR2+4048
+	.word	.LANCHOR2+1864
+	.word	.LANCHOR0
+	.word	.LC122
+	.fnend
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	1
+	.global	FtlLoadVonderInfo
+	.thumb
+	.thumb_func
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	movw	r2, #4098
+	ldr	r3, .L2523
+	ldr	r0, .L2523+4
+	ldrh	r1, [r3, #2920]
+	strh	r1, [r0, r2]	@ movhi
+	movw	r2, #61574
+	ldrh	r1, [r3, #2946]
+	strh	r2, [r0, #4092]	@ movhi
+	add	r2, r0, #4096
+	strh	r1, [r2]	@ movhi
+	ldrh	r2, [r3, #2922]
+	strh	r2, [r0, #4094]	@ movhi
+	ldr	r2, [r3, #2948]
+	movw	r3, #4100
+	str	r2, [r0, r3]
+	movw	r3, #4104
+	ldr	r2, [r0, #1836]
+	str	r2, [r0, r3]
+	movw	r3, #4108
+	ldr	r2, [r0, #1832]
+	str	r2, [r0, r3]
+	movw	r3, #4112
+	ldr	r2, [r0, #1840]
+	str	r2, [r0, r3]
+	add	r3, r0, #4128
+	addw	r0, r0, #4088
+	movw	r2, #65535
+	strh	r2, [r3]	@ movhi
+	bl	FtlMapTblRecovery
+	movs	r0, #0
+	pop	{r3, pc}
+.L2524:
+	.align	2
+.L2523:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	1
+	.global	FtlLoadMapInfo
+	.thumb
+	.thumb_func
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	bl	FtlL2PDataInit
+	ldr	r0, .L2526
+	bl	FtlMapTblRecovery
+	movs	r0, #0
+	pop	{r3, pc}
+.L2527:
+	.align	2
+.L2526:
+	.word	.LANCHOR2+1864
+	.fnend
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	1
+	.global	FtlReadRefresh
+	.thumb
+	.thumb_func
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2543
+	push	{r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	.pad #44
+	sub	sp, sp, #44
+	ldr	r2, [r3, #1208]
+	mov	r4, r3
+	ldr	r5, .L2543+4
+	cmp	r2, #0
+	beq	.L2529
+	ldr	r1, [r3, #1212]
+	ldr	r2, [r5, #2960]
+	cmp	r1, r2
+	bcs	.L2530
+	mov	r6, #2048
+	mov	r7, r3
+.L2535:
+	ldr	r0, [r4, #1212]
+	ldr	r3, [r5, #2960]
+	cmp	r0, r3
+	bcs	.L2532
+	mov	r1, sp
+	movs	r2, #0
+	bl	log2phys
+	ldr	r3, [r7, #1212]
+	adds	r3, r3, #1
+	str	r3, [r7, #1212]
+	ldr	r2, [sp]
+	adds	r1, r2, #1
+	beq	.L2533
+	add	r0, sp, #40
+	str	r2, [sp, #8]
+	movs	r1, #1
+	movs	r2, #0
+	str	r2, [r0, #-36]!
+	str	r3, [sp, #20]
+	str	r2, [sp, #12]
+	str	r2, [sp, #16]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	cmp	r3, #256
+	bne	.L2532
+	ldr	r0, [sp]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	b	.L2532
+.L2533:
+	subs	r6, r6, #1
+	bne	.L2535
+.L2532:
+	mov	r0, #-1
+	b	.L2537
+.L2530:
+	ldr	r2, [r3, #952]
+	movs	r0, #0
+	str	r0, [r3, #1208]
+	str	r0, [r3, #1212]
+	str	r2, [r3, #1204]
+	b	.L2537
+.L2529:
+	ldrb	r2, [r5, #76]	@ zero_extendqisi2
+	ldr	r1, [r3, #1004]
+	ldr	r3, [r3, #948]
+	cbnz	r2, .L2540
+	mov	r2, #33554432
+	add	r3, r3, r1, lsr #10
+	asrs	r2, r2, r3
+	b	.L2538
+.L2540:
+	mov	r2, #4194304
+.L2538:
+	ldr	r1, [r4, #952]
+	ldr	r3, [r4, #1204]
+	add	r0, r1, #1048576
+	cmp	r3, r0
+	bhi	.L2539
+	add	r3, r3, r2
+	cmp	r3, r1
+	bcc	.L2539
+	ldr	r3, .L2543
+	ldrb	r3, [r3, #1040]	@ zero_extendqisi2
+	cbnz	r3, .L2541
+.L2539:
+	movs	r3, #1
+	movs	r0, #0
+	str	r3, [r4, #1208]
+	str	r0, [r4, #1212]
+	str	r1, [r4, #1204]
+	b	.L2537
+.L2541:
+	movs	r0, #0
+.L2537:
+	add	sp, sp, #44
+	@ sp needed
+	pop	{r4, r5, r6, r7, pc}
+.L2544:
+	.align	2
+.L2543:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	1
+	.global	FtlVendorPartWrite
+	.thumb
+	.thumb_func
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2558
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r5, r0
+	mov	r4, r1
+	add	r0, r0, r1
+	ldrh	r1, [r3, #2892]
+	.pad #60
+	sub	sp, sp, #60
+	mov	r10, r2
+	ldrh	r2, [r3, #2906]
+	cmp	r0, r1
+	str	r3, [sp, #4]
+	bhi	.L2553
+	ldr	r7, .L2558+4
+	lsr	r6, r5, r2
+	mov	fp, #0
+	lsls	r3, r6, #2
+	str	r3, [sp]
+.L2547:
+	cmp	r4, #0
+	beq	.L2557
+	ldr	r3, .L2558+4
+	mov	r0, r5
+	ldr	r2, [sp]
+	ldr	r3, [r3, #1840]
+	ldr	ip, [r3, r2]
+	ldr	r3, [sp, #4]
+	str	ip, [sp, #12]
+	ldrh	r2, [r3, #2904]
+	mov	r1, r2
+	str	r2, [sp, #8]
+	bl	__aeabi_uidivmod
+	ldr	r2, [sp, #8]
+	mov	r8, r1
+	ldr	ip, [sp, #12]
+	subs	r3, r2, r1
+	uxth	r9, r3
+	cmp	r9, r4
+	it	hi
+	uxthhi	r9, r4
+	cmp	ip, #0
+	beq	.L2549
+	cmp	r9, r2
+	beq	.L2549
+	ldr	r2, [r7, #1780]
+	movs	r1, #1
+	add	r0, sp, #20
+	str	ip, [sp, #24]
+	str	r2, [sp, #28]
+	movs	r2, #0
+	str	r2, [sp, #32]
+	mov	r2, r1
+	bl	FlashReadPages
+	b	.L2550
+.L2549:
+	ldr	r3, [sp, #4]
+	movs	r1, #0
+	ldr	r0, [r7, #1780]
+	ldrh	r2, [r3, #2908]
+	bl	ftl_memset
+.L2550:
+	lsl	ip, r9, #9
+	ldr	r0, [r7, #1780]
+	uxth	r8, r8
+	mov	r1, r10
+	mov	r2, ip
+	str	ip, [sp, #8]
+	add	r0, r0, r8, lsl #9
+	rsb	r4, r9, r4
+	bl	ftl_memcpy
+	mov	r1, r6
+	ldr	r0, .L2558+8
+	adds	r6, r6, #1
+	ldr	r2, [r7, #1780]
+	add	r5, r5, r9
+	bl	FtlMapWritePage
+	ldr	r3, [sp]
+	adds	r0, r0, #1
+	ldr	ip, [sp, #8]
+	it	eq
+	moveq	fp, #-1
+	adds	r3, r3, #4
+	str	r3, [sp]
+	add	r10, r10, ip
+	b	.L2547
+.L2557:
+	mov	r0, fp
+	b	.L2546
+.L2553:
+	mov	r0, #-1
+.L2546:
+	add	sp, sp, #60
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2559:
+	.align	2
+.L2558:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR2+4088
+	.fnend
+	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.align	1
+	.global	Ftl_save_ext_data
+	.thumb
+	.thumb_func
+	.type	Ftl_save_ext_data, %function
+Ftl_save_ext_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r2, .L2562
+	ldr	r3, .L2562+4
+	ldr	r1, [r2, #1128]
+	cmp	r1, r3
+	bne	.L2560
+	ldr	r3, .L2562+8
+	movs	r0, #0
+	movs	r1, #1
+	str	r3, [r2, #1132]
+	ldr	r3, [r2, #976]
+	str	r3, [r2, #1216]
+	ldr	r3, [r2, #980]
+	str	r3, [r2, #1220]
+	ldr	r3, [r2, #972]
+	str	r3, [r2, #1136]
+	ldr	r3, [r2, #960]
+	str	r3, [r2, #1140]
+	ldr	r3, [r2, #952]
+	str	r3, [r2, #1144]
+	ldr	r3, [r2, #968]
+	str	r3, [r2, #1148]
+	ldr	r3, [r2, #996]
+	str	r3, [r2, #1156]
+	ldr	r3, [r2, #752]
+	add	r2, r2, #1128
+	str	r3, [r2, #32]
+	ldr	r3, [r2, #-172]
+	str	r3, [r2, #36]
+	ldr	r3, [r2, #-164]
+	str	r3, [r2, #40]
+	ldr	r3, [r2, #-124]
+	str	r3, [r2, #44]
+	ldr	r3, [r2, #-120]
+	str	r3, [r2, #48]
+	ldr	r3, [r2, #-4]
+	str	r3, [r2, #60]
+	ldr	r3, [r2, #612]
+	str	r3, [r2, #64]
+	b	FtlVendorPartWrite
+.L2560:
+	bx	lr
+.L2563:
+	.align	2
+.L2562:
+	.word	.LANCHOR2
+	.word	1179929683
+	.word	1342177351
+	.fnend
+	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
+	.align	1
+	.global	FtlEctTblFlush
+	.thumb
+	.thumb_func
+	.type	FtlEctTblFlush, %function
+FtlEctTblFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2571
+	push	{r4, lr}
+	.save {r4, lr}
+	ldr	r2, [r3, #948]
+	cbz	r2, .L2569
+	ldr	r2, [r3, #1008]
+	cmp	r2, #29
+	ite	hi
+	movhi	r1, #32
+	movls	r1, #4
+	b	.L2565
+.L2569:
+	movs	r1, #32
+.L2565:
+	ldr	r4, .L2571+4
+	ldrh	r2, [r4, #-212]
+	cmp	r2, #31
+	ittt	ls
+	addls	r2, r2, #1
+	movls	r1, #1
+	strhls	r2, [r4, #-212]	@ movhi
+	cbnz	r0, .L2567
+	ldr	r0, [r3, #1816]
+	ldr	r2, [r0, #20]
+	add	r2, r2, r1
+	ldr	r1, [r0, #16]
+	cmp	r1, r2
+	bcc	.L2568
+.L2567:
+	ldr	r2, [r3, #1816]
+	movs	r0, #64
+	ldr	r1, [r2, #16]
+	str	r1, [r2, #20]
+	ldr	r1, .L2571+8
+	str	r1, [r2]
+	ldr	r2, [r3, #1816]
+	ldrh	r1, [r3, #1808]
+	lsls	r3, r1, #9
+	str	r3, [r2, #12]
+	ldr	r3, [r2, #8]
+	adds	r3, r3, #1
+	str	r3, [r2, #8]
+	movs	r3, #0
+	str	r3, [r2, #4]
+	bl	FtlVendorPartWrite
+	bl	Ftl_save_ext_data
+.L2568:
+	movs	r0, #0
+	pop	{r4, pc}
+.L2572:
+	.align	2
+.L2571:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	1112818501
+	.fnend
+	.size	FtlEctTblFlush, .-FtlEctTblFlush
+	.align	1
+	.global	FtlVendorPartRead
+	.thumb
+	.thumb_func
+	.type	FtlVendorPartRead, %function
+FtlVendorPartRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L2584
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r7, r0
+	mov	r5, r1
+	add	r0, r0, r1
+	ldrh	r1, [r3, #2892]
+	.pad #60
+	sub	sp, sp, #60
+	mov	r8, r2
+	ldrh	r2, [r3, #2906]
+	cmp	r0, r1
+	str	r3, [sp, #8]
+	bhi	.L2582
+	lsr	r6, r7, r2
+	ldr	r10, .L2584+12
+	movs	r3, #0
+	str	r3, [sp]
+	lsl	r9, r6, #2
+	mov	fp, r10
+.L2575:
+	cmp	r5, #0
+	beq	.L2583
+	ldr	r3, [r10, #1840]
+	mov	r0, r7
+	ldr	ip, [r3, r9]
+	ldr	r3, [sp, #8]
+	str	ip, [sp, #12]
+	ldrh	r4, [r3, #2904]
+	mov	r1, r4
+	bl	__aeabi_uidivmod
+	subs	r3, r4, r1
+	ldr	ip, [sp, #12]
+	str	r1, [sp, #4]
+	uxth	r4, r3
+	cmp	r4, r5
+	it	hi
+	uxthhi	r4, r5
+	cmp	ip, #0
+	beq	.L2577
+	ldr	r2, [fp, #1780]
+	movs	r1, #1
+	add	r0, sp, #20
+	str	ip, [sp, #24]
+	str	ip, [sp, #12]
+	str	r2, [sp, #28]
+	movs	r2, #0
+	str	r2, [sp, #32]
+	mov	r2, r1
+	bl	FlashReadPages
+	ldr	r2, [sp, #20]
+	ldr	r3, [sp]
+	adds	r2, r2, #1
+	ldr	r2, [fp, #4048]
+	it	eq
+	moveq	r3, #-1
+	ldr	ip, [sp, #12]
+	cmp	r2, #256
+	str	r3, [sp]
+	bne	.L2579
+	mov	r1, r6
+	mov	r2, ip
+	ldr	r0, .L2584+4
+	bl	printk
+	ldr	r0, .L2584+8
+	mov	r1, r6
+	ldr	r2, [r10, #1780]
+	bl	FtlMapWritePage
+.L2579:
+	ldrh	r2, [sp, #4]
+	mov	r0, r8
+	ldr	r1, [fp, #1780]
+	add	r1, r1, r2, lsl #9
+	lsls	r2, r4, #9
+	bl	ftl_memcpy
+	b	.L2580
+.L2577:
+	mov	r0, r8
+	mov	r1, ip
+	lsls	r2, r4, #9
+	bl	ftl_memset
+.L2580:
+	adds	r6, r6, #1
+	subs	r5, r5, r4
+	add	r7, r7, r4
+	add	r8, r8, r4, lsl #9
+	add	r9, r9, #4
+	b	.L2575
+.L2583:
+	ldr	r0, [sp]
+	b	.L2574
+.L2582:
+	mov	r0, #-1
+.L2574:
+	add	sp, sp, #60
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2585:
+	.align	2
+.L2584:
+	.word	.LANCHOR0
+	.word	.LC123
+	.word	.LANCHOR2+4088
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlVendorPartRead, .-FtlVendorPartRead
+	.align	1
+	.global	FtlLoadEctTbl
+	.thumb
+	.thumb_func
+	.type	FtlLoadEctTbl, %function
+FtlLoadEctTbl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	movs	r0, #64
+	ldr	r4, .L2588
+	ldr	r2, [r4, #1816]
+	ldrh	r1, [r4, #1808]
+	bl	FtlVendorPartRead
+	ldr	r3, [r4, #1816]
+	ldr	r2, [r3]
+	ldr	r3, .L2588+4
+	cmp	r2, r3
+	beq	.L2587
+	ldr	r1, .L2588+8
+	ldr	r0, .L2588+12
+	bl	printk
+	ldrh	r2, [r4, #1808]
+	ldr	r0, [r4, #1816]
+	movs	r1, #0
+	lsls	r2, r2, #9
+	bl	ftl_memset
+.L2587:
+	movs	r0, #0
+	pop	{r4, pc}
+.L2589:
+	.align	2
+.L2588:
+	.word	.LANCHOR2
+	.word	1112818501
+	.word	.LC124
+	.word	.LC74
+	.fnend
+	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
+	.align	1
+	.global	Ftl_load_ext_data
+	.thumb
+	.thumb_func
+	.type	Ftl_load_ext_data, %function
+Ftl_load_ext_data:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movs	r0, #0
+	ldr	r4, .L2594
+	movs	r1, #1
+	ldr	r5, .L2594+4
+	add	r2, r4, #1128
+	bl	FtlVendorPartRead
+	ldr	r3, [r4, #1128]
+	cmp	r3, r5
+	beq	.L2591
+	add	r0, r4, #1128
+	mov	r1, #512
+	bl	__memzero
+	str	r5, [r4, #1128]
+.L2591:
+	ldr	r2, [r4, #1128]
+	ldr	r3, .L2594
+	cmp	r2, r5
+	bne	.L2592
+	ldr	r2, [r3, #1216]
+	str	r2, [r3, #976]
+	ldr	r2, [r3, #1220]
+	str	r2, [r3, #980]
+	ldr	r2, [r3, #1136]
+	str	r2, [r3, #972]
+	ldr	r2, [r3, #1140]
+	str	r2, [r3, #960]
+	ldr	r2, [r3, #1144]
+	str	r2, [r3, #952]
+	ldr	r2, [r3, #1148]
+	str	r2, [r3, #968]
+	ldr	r2, [r3, #1156]
+	str	r2, [r3, #996]
+	ldr	r2, [r3, #1160]
+	str	r2, [r3, #752]
+	ldr	r2, [r3, #1164]
+	str	r2, [r3, #956]
+	ldr	r2, [r3, #1168]
+	str	r2, [r3, #964]
+	ldr	r2, [r3, #1172]
+	str	r2, [r3, #1004]
+	ldr	r2, [r3, #1176]
+	str	r2, [r3, #1008]
+	ldr	r2, [r3, #1188]
+	str	r2, [r3, #1124]
+.L2592:
+	movs	r3, #0
+	ldr	r2, [r4, #1196]
+	str	r3, [r4, #1740]
+	ldr	r3, .L2594+8
+	cmp	r2, r3
+	bne	.L2593
+	ldr	r3, .L2594
+	movs	r2, #1
+	ldr	r0, .L2594+12
+	ldr	r1, .L2594+16
+	str	r2, [r3, #948]
+	bl	printk
+.L2593:
+	ldr	r3, .L2594+20
+	ldr	r2, [r4, #996]
+	ldr	r0, [r4, #992]
+	ldrh	r1, [r3, #2888]
+	mla	r0, r0, r1, r2
+	ldrh	r1, [r3, #2836]
+	bl	__aeabi_uidiv
+	str	r0, [r4, #1000]
+	pop	{r3, r4, r5, pc}
+.L2595:
+	.align	2
+.L2594:
+	.word	.LANCHOR2
+	.word	1179929683
+	.word	305432421
+	.word	.LC74
+	.word	.LC125
+	.word	.LANCHOR0
+	.fnend
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.align	1
+	.global	StorageSysDataLoad
+	.thumb
+	.thumb_func
+	.type	StorageSysDataLoad, %function
+StorageSysDataLoad:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r5, r0
+	mov	r4, r1
+	mov	r0, r1
+	mov	r1, #512
+	bl	__memzero
+	bl	rknand_device_lock
+	mov	r2, r4
+	movs	r1, #1
+	add	r0, r5, #512
+	bl	FtlVendorPartRead
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	pop	{r3, r4, r5, pc}
+	.fnend
+	.size	StorageSysDataLoad, .-StorageSysDataLoad
+	.align	1
+	.global	FtlMapBlkWriteDumpData
+	.thumb
+	.thumb_func
+	.type	FtlMapBlkWriteDumpData, %function
+FtlMapBlkWriteDumpData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldr	r2, [r0, #36]
+	ldrh	r5, [r0, #6]
+	ldr	r3, [r0, #24]
+	cbz	r2, .L2597
+	ldr	r4, .L2603
+	movs	r2, #0
+	str	r2, [r0, #36]
+	ldr	r2, [r4, #740]
+	cbnz	r2, .L2597
+	subs	r5, r5, #1
+	ldr	r0, [r4, #1776]
+	ldr	r2, [r4, #1796]
+	uxth	r5, r5
+	str	r0, [r4, #4056]
+	str	r2, [r4, #4060]
+	ldr	r3, [r3, r5, lsl #2]
+	str	r3, [r4, #4052]
+	cbz	r3, .L2601
+	movs	r1, #1
+	add	r0, r4, #4048
+	mov	r2, r1
+	bl	FlashReadPages
+	b	.L2602
+.L2601:
+	ldr	r3, .L2603+4
+	movs	r1, #255
+	ldrh	r2, [r3, #2908]
+	bl	ftl_memset
+.L2602:
+	mov	r0, r6
+	mov	r1, r5
+	ldr	r2, [r4, #4056]
+	pop	{r4, r5, r6, lr}
+	b	FtlMapWritePage
+.L2597:
+	pop	{r4, r5, r6, pc}
+.L2604:
+	.align	2
+.L2603:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlMapBlkWriteDumpData, .-FtlMapBlkWriteDumpData
+	.align	1
+	.global	FtlRecoverySuperblock
+	.thumb
+	.thumb_func
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 64
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	movw	r7, #65535
+	ldrh	r3, [r0]
+	.pad #68
+	sub	sp, sp, #68
+	mov	r4, r0
+	cmp	r3, r7
+	beq	.L2749
+	ldrh	r3, [r0, #2]
+	movs	r5, #0
+	ldr	r6, .L2765
+	str	r3, [sp, #12]
+	ldrb	r3, [r0, #6]	@ zero_extendqisi2
+	ldr	r2, [sp, #12]
+	str	r3, [sp, #28]
+	ldrh	r3, [r6, #2898]
+	cmp	r3, r2
+	bne	.L2608
+	strh	r5, [r0, #4]	@ movhi
+	strb	r5, [r0, #6]
+	b	.L2749
+.L2608:
+	ldrh	r0, [r0, #16]
+.L2609:
+	cmp	r0, r7
+	add	r5, r5, #1
+	bne	.L2760
+	uxth	r3, r5
+	adds	r3, r3, #8
+	ldrh	r0, [r4, r3, lsl #1]
+	b	.L2609
+.L2760:
+	ldrb	r1, [r4, #8]	@ zero_extendqisi2
+	cmp	r1, #1
+	bne	.L2611
+	bl	FtlGetLastWrittenPage
+	adds	r2, r0, #1
+	mov	r5, r0
+	beq	.L2612
+	ldrb	r3, [r6, #76]	@ zero_extendqisi2
+	cbnz	r3, .L2751
+	ldr	r3, .L2765
+	add	r3, r3, r0, lsl #1
+	ldrh	r7, [r3, #80]
+	b	.L2686
+.L2611:
+	movs	r1, #0
+	bl	FtlGetLastWrittenPage
+	adds	r3, r0, #1
+	mov	r5, r0
+	beq	.L2612
+.L2751:
+	mov	r7, r5
+.L2686:
+	ldr	r3, .L2765+4
+	movw	r9, #65535
+	ldrh	ip, [r6, #2828]
+	mov	r10, #36
+	ldrh	r0, [r6, #2910]
+	ldr	r2, [r3, #1764]
+	ldr	r8, [r3, #1668]
+	add	r3, r4, #14
+	str	r3, [sp, #20]
+	str	r2, [sp, #4]
+	movs	r2, #0
+	mov	lr, r3
+	mov	r6, r2
+	mov	fp, r2
+	b	.L2614
+.L2612:
+	movs	r3, #0
+	strh	r3, [r4, #2]	@ movhi
+	strb	r3, [r4, #6]
+	b	.L2749
+.L2617:
+	ldrh	r3, [lr, #2]!
+	cmp	r3, r9
+	beq	.L2615
+	ldr	r1, [sp, #4]
+	orr	r3, r7, r3, lsl #10
+	mla	r1, r10, r6, r1
+	str	r3, [r1, #4]
+	mov	r3, r0
+	muls	r3, r6, r3
+	add	r6, r6, #1
+	it	mi
+	addmi	r3, r3, #3
+	str	fp, [r1, #8]
+	uxth	r6, r6
+	bic	r3, r3, #3
+	add	r3, r3, r8
+	str	r3, [r1, #12]
+.L2615:
+	adds	r2, r2, #1
+.L2614:
+	uxth	r3, r2
+	cmp	r3, ip
+	bcc	.L2617
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cmp	r3, #1
+	bne	.L2688
+	ldr	r3, .L2765
+	ldrb	r1, [r3, #76]	@ zero_extendqisi2
+	adds	r3, r1, #0
+	it	ne
+	movne	r3, #1
+	b	.L2752
+.L2688:
+	movs	r3, #0
+.L2752:
+	ldr	r8, .L2765+4
+	mov	r1, r6
+	str	r3, [sp, #24]
+	mov	fp, #0
+	ldr	r2, [sp, #24]
+	ldr	r0, [r8, #1764]
+	bl	FlashReadPages
+	ldr	r3, [r8, #988]
+	subs	r3, r3, #1
+	str	r8, [sp, #8]
+	str	r3, [sp, #4]
+	movw	r3, #65535
+	str	r3, [sp, #16]
+.L2619:
+	uxth	r9, fp
+	cmp	r9, r6
+	bcs	.L2626
+	movs	r1, #36
+	ldr	r0, [r8, #1764]
+	mul	r1, r1, fp
+	add	lr, r0, r1
+	ldr	r1, [r0, r1]
+	cbnz	r1, .L2620
+	ldr	r3, [lr, #12]
+	ldr	r10, [r3, #4]
+	cmp	r10, #-1
+	beq	.L2621
+	mov	r0, r10
+	ldr	r1, [r8, #988]
+	str	r3, [sp, #32]
+	bl	ftl_cmp_data_ver
+	ldr	r3, [sp, #32]
+	cbz	r0, .L2621
+	add	r1, r10, #1
+	str	r1, [r8, #988]
+.L2621:
+	ldr	r1, [r3]
+	adds	r1, r1, #1
+	bne	.L2622
+.L2626:
+	cmp	r9, r6
+	ldr	r6, .L2765+4
+	bne	.L2750
+	ldr	r3, [r6, #1764]
+	adds	r5, r5, #1
+	uxth	r10, r5
+	ldr	r0, [r3, #4]
+	b	.L2753
+.L2620:
+	ldr	r1, [lr, #4]
+	ldr	r0, .L2765+8
+	bl	printk
+	uxth	r3, r7
+	ldrh	r1, [r4]
+	str	r3, [sp, #16]
+	ldr	r3, .L2765+12
+	strh	r1, [r3, #-210]	@ movhi
+.L2622:
+	add	fp, fp, #1
+	b	.L2619
+.L2750:
+	ldr	r3, [sp, #8]
+	movs	r2, #36
+	uxth	r10, r5
+	ldr	r3, [r3, #1764]
+	mla	r9, r2, r9, r3
+	ldr	r0, [r9, #4]
+.L2753:
+	ubfx	r0, r0, #10, #16
+	bl	P2V_plane
+	ldrb	r5, [r4, #8]	@ zero_extendqisi2
+	ldr	r2, .L2765
+	cmp	r5, #1
+	str	r0, [sp, #8]
+	bne	.L2628
+	ldrb	r3, [r2, #76]	@ zero_extendqisi2
+	cbnz	r3, .L2628
+	add	r3, r2, r10, lsl #1
+	ldrh	r10, [r3, #80]
+.L2628:
+	ldrh	r3, [r2, #2898]
+	cmp	r3, r10
+	itttt	eq
+	strheq	r10, [r4, #2]	@ movhi
+	moveq	r3, #0
+	strbeq	r3, [r4, #6]
+	strheq	r3, [r4, #4]	@ movhi
+	ldrh	r3, [sp, #28]
+	str	r3, [sp, #32]
+	ldr	r3, [sp, #12]
+	cmp	r10, r3
+	bne	.L2630
+	ldr	r3, [sp, #8]
+	ldr	r2, [sp, #32]
+	cmp	r3, r2
+	bne	.L2630
+	mov	r0, r4
+	mov	r1, r10
+	mov	r2, r3
+	b	.L2758
+.L2630:
+	ldr	r2, [sp, #16]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L2631
+	cmp	r5, #0
+	bne	.L2632
+.L2631:
+	ldr	r3, [r6, #1928]
+	uxth	fp, r7
+	mov	r9, #-1
+	ldr	r8, .L2765+4
+	adds	r3, r3, #1
+	mov	r7, r9
+	ittt	eq
+	ldreq	r3, .L2765+4
+	ldreq	r2, [sp, #4]
+	streq	r2, [r3, #1928]
+	ldr	r3, [r6, #1928]
+	str	r3, [sp, #16]
+	ldr	r3, [sp, #12]
+	adds	r3, r3, #7
+	cmp	fp, r3
+	itet	gt
+	subgt	r5, fp, #7
+	ldrle	r5, [sp, #12]
+	uxthgt	r5, r5
+.L2635:
+	cmp	r5, fp
+	bhi	.L2648
+	ldr	r3, .L2765
+	ldr	r1, [sp, #20]
+	ldrh	ip, [r3, #2828]
+	ldr	r3, [r8, #1764]
+	str	r3, [sp, #28]
+	movs	r3, #0
+	mov	r6, r3
+.L2649:
+	uxth	r2, r3
+	cmp	r2, ip
+	bcs	.L2761
+	ldrh	r2, [r1, #2]!
+	movw	r0, #65535
+	cmp	r2, r0
+	beq	.L2636
+	ldr	r0, [sp, #28]
+	mov	lr, #36
+	orr	r2, r5, r2, lsl #10
+	mla	r0, lr, r6, r0
+	adds	r6, r6, #1
+	uxth	r6, r6
+	str	r2, [r0, #4]
+.L2636:
+	adds	r3, r3, #1
+	b	.L2649
+.L2761:
+	mov	r1, r6
+	ldr	r2, [sp, #24]
+	ldr	r0, [r8, #1764]
+	bl	FlashReadPages
+	ldr	r3, .L2765
+	movs	r2, #36
+	movw	r1, #65535
+	ldrb	r0, [r3, #76]	@ zero_extendqisi2
+	ldr	r3, [r8, #1764]
+	mla	r6, r2, r6, r3
+	ldr	r2, .L2765
+	add	lr, r2, r5, lsl #1
+.L2638:
+	cmp	r3, r6
+	beq	.L2762
+	ldr	r2, [r3]
+	cbnz	r2, .L2639
+	ldr	r2, [r3, #12]
+	ldrh	ip, [r2]
+	cmp	ip, r1
+	beq	.L2640
+	ldr	r2, [r2, #4]
+	cmp	r2, #-1
+	beq	.L2640
+	cmp	r9, #-1
+	ldr	r7, [r8, #1928]
+	str	r2, [r8, #1928]
+	bne	.L2640
+	ldrh	r2, [lr, #592]
+	cmp	r2, r1
+	bne	.L2641
+	cmp	r0, #0
+	beq	.L2640
+.L2641:
+	ldr	r2, [sp, #4]
+	cmp	r7, r2
+	ite	ne
+	movne	r9, r7
+	moveq	r9, #-1
+	b	.L2640
+.L2766:
+	.align	2
+.L2765:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC126
+	.word	.LANCHOR4
+.L2639:
+	ldr	r3, .L2767
+	ldrh	r2, [r4]
+	strh	r2, [r3, #-210]	@ movhi
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	cbnz	r3, .L2632
+	ldr	r3, .L2767+4
+	add	r5, r3, r5, lsl #1
+	movw	r3, #65535
+	ldrh	r2, [r5, #592]
+	cmp	r2, r3
+	ldr	r3, .L2767+8
+	bne	.L2643
+	cmp	r9, #-1
+	beq	.L2644
+	str	r9, [r3, #1928]
+	b	.L2632
+.L2644:
+	ldr	r2, [sp, #16]
+	ldr	r1, [sp, #4]
+	cmp	r2, r1
+	bne	.L2754
+	ldr	r2, [r3, #1928]
+	b	.L2759
+.L2643:
+	ldr	r2, [sp, #4]
+	cmp	r7, r2
+	beq	.L2646
+	adds	r2, r7, #1
+	beq	.L2632
+	str	r7, [r3, #1928]
+	b	.L2632
+.L2646:
+	ldr	r2, [r3, #1928]
+	ldr	r1, [sp, #4]
+	cmp	r2, r1
+	beq	.L2632
+.L2759:
+	subs	r2, r2, #1
+	b	.L2754
+.L2640:
+	adds	r3, r3, #36
+	b	.L2638
+.L2762:
+	adds	r5, r5, #1
+	uxth	r5, r5
+	b	.L2635
+.L2648:
+	ldr	r3, .L2767+8
+	mov	r2, #-1
+.L2754:
+	str	r2, [r3, #1928]
+.L2632:
+	ldr	r3, .L2767
+	movs	r2, #1
+	ldr	r0, .L2767+12
+	ldr	r5, .L2767+8
+	strh	r2, [r3, #-208]	@ movhi
+	bl	FtlMapBlkWriteDumpData
+	ldr	fp, [sp, #12]
+.L2650:
+	ldr	r3, .L2767+4
+	movw	r9, #65535
+	ldr	r1, [r5, #1764]
+	movs	r6, #0
+	ldr	r7, [sp, #20]
+	ldrh	r8, [r3, #2828]
+	ldrb	r0, [r3, #76]	@ zero_extendqisi2
+	str	r6, [sp, #16]
+.L2651:
+	uxth	r3, r6
+	cmp	r3, r8
+	bcs	.L2763
+	ldrh	r3, [r7, #2]!
+	cmp	r3, r9
+	beq	.L2652
+	ldr	r2, [sp, #16]
+	mov	lr, #36
+	orr	r3, fp, r3, lsl #10
+	mla	r2, lr, r2, r1
+	str	r3, [r2, #4]
+	ldrb	lr, [r4, #8]	@ zero_extendqisi2
+	cmp	lr, #1
+	bne	.L2653
+	cbz	r0, .L2653
+	orr	r3, r3, #-2147483648
+	str	r3, [r2, #4]
+.L2653:
+	ldr	r3, [sp, #16]
+	add	ip, r3, #1
+	uxth	r3, ip
+	str	r3, [sp, #16]
+.L2652:
+	adds	r6, r6, #1
+	b	.L2651
+.L2763:
+	ldr	r0, [r5, #1764]
+	ldr	r1, [sp, #16]
+	ldr	r2, [sp, #24]
+	bl	FlashReadPages
+	movs	r3, #0
+.L2757:
+	str	r3, [sp, #28]
+	ldr	r2, [sp, #16]
+	ldrh	r3, [sp, #28]
+	cmp	r3, r2
+	bcs	.L2764
+	ldr	r3, [sp, #28]
+	movs	r6, #36
+	ldr	r9, [r5, #1764]
+	muls	r6, r3, r6
+	add	r8, r9, r6
+	ldr	r7, [r8, #4]
+	ubfx	r0, r7, #10, #16
+	str	r7, [sp, #60]
+	bl	P2V_plane
+	ldr	r3, [sp, #12]
+	cmp	fp, r3
+	bcc	.L2656
+	bne	.L2657
+	ldr	r3, [sp, #32]
+	cmp	r0, r3
+	bcc	.L2656
+.L2657:
+	cmp	fp, r10
+	bne	.L2658
+	ldr	r3, [sp, #8]
+	cmp	r0, r3
+	beq	.L2659
+.L2658:
+	ldr	r3, [r9, r6]
+	adds	r3, r3, #1
+	beq	.L2660
+	ldr	r8, [r8, #12]
+	movw	r3, #61589
+	ldrh	r2, [r8]
+	cmp	r2, r3
+	bne	.L2667
+	ldr	r3, [r8, #4]
+	adds	r7, r3, #1
+	str	r3, [sp, #4]
+	beq	.L2662
+	mov	r0, r3
+	ldr	r1, [r5, #988]
+	bl	ftl_cmp_data_ver
+	cbz	r0, .L2662
+	ldr	r3, [sp, #4]
+	adds	r3, r3, #1
+	str	r3, [r5, #988]
+.L2662:
+	ldr	r7, [r8, #8]
+	add	r1, sp, #56
+	ldr	r3, [r8, #12]
+	movs	r2, #0
+	mov	r0, r7
+	str	r3, [sp, #52]
+	bl	log2phys
+	ldr	r1, [r5, #1928]
+	adds	r0, r1, #1
+	beq	.L2663
+	ldr	r0, [sp, #4]
+	bl	ftl_cmp_data_ver
+	cmp	r0, #0
+	beq	.L2663
+	ldr	r3, [sp, #52]
+	adds	r2, r3, #1
+	beq	.L2664
+	ldr	r0, [r5, #1764]
+	movs	r2, #0
+	movs	r1, #1
+	add	r0, r0, r6
+	str	r3, [r0, #4]
+	ldr	r9, [r0, #12]
+	bl	FlashReadPages
+	ldr	r2, [r5, #1764]
+	ldr	r3, [r9, #4]
+	add	ip, r2, r6
+	str	r3, [sp, #36]
+	ldr	r3, [r2, r6]
+	adds	r3, r3, #1
+	bne	.L2665
+	b	.L2666
+.L2664:
+	ldr	r3, [sp, #60]
+	ldr	r2, [sp, #56]
+	cmp	r2, r3
+	bne	.L2667
+	mov	r0, r7
+	add	r1, sp, #52
+	movs	r2, #1
+	bl	log2phys
+.L2667:
+	ldrh	r0, [r4]
+	b	.L2756
+.L2665:
+	ldr	r8, [r9, #8]
+	cmp	r8, r7
+	bne	.L2666
+	ldr	r0, [r5, #1928]
+	ldr	r1, [sp, #36]
+	str	r2, [sp, #44]
+	str	ip, [sp, #40]
+	bl	ftl_cmp_data_ver
+	ldr	ip, [sp, #40]
+	ldr	r2, [sp, #44]
+	cbz	r0, .L2666
+	ldr	r3, [sp, #56]
+	ldr	r1, [sp, #60]
+	cmp	r3, r1
+	beq	.L2672
+	ldr	r1, [sp, #52]
+	cmp	r3, r1
+	beq	.L2666
+	adds	r0, r3, #1
+	beq	.L2670
+	str	r3, [ip, #4]
+	mov	r0, ip
+	movs	r1, #1
+	movs	r2, #0
+	ldr	r9, [ip, #12]
+	bl	FlashReadPages
+	b	.L2671
+.L2670:
+	str	r3, [r2, r6]
+.L2671:
+	ldr	r3, [r5, #1764]
+	ldr	r3, [r3, r6]
+	adds	r3, r3, #1
+	beq	.L2672
+	ldr	r6, [r9, #4]
+	ldr	r0, [r5, #1928]
+	mov	r1, r6
+	bl	ftl_cmp_data_ver
+	cbz	r0, .L2672
+	ldr	r0, [sp, #36]
+	mov	r1, r6
+	bl	ftl_cmp_data_ver
+	cbz	r0, .L2666
+.L2672:
+	mov	r0, r8
+	ldr	r1, [sp, #52]
+	bl	FtlReUsePrevPpa
+.L2666:
+	ldrh	r0, [r4]
+	mov	r3, #-1
+	str	r3, [sp, #52]
+	bl	decrement_vpc_count
+	b	.L2674
+.L2768:
+	.align	2
+.L2767:
+	.word	.LANCHOR4
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR2+1864
+.L2663:
+	ldr	r3, [sp, #60]
+	ldr	r2, [sp, #56]
+	cmp	r2, r3
+	beq	.L2674
+	mov	r0, r7
+	add	r1, sp, #60
+	movs	r2, #1
+	bl	log2phys
+	ldr	r8, [sp, #56]
+	cmp	r8, #-1
+	beq	.L2674
+	ldr	r3, [sp, #52]
+	cmp	r8, r3
+	beq	.L2674
+	ubfx	r0, r8, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r5, #788]
+	cmp	r3, r0
+	beq	.L2677
+	ldrh	r3, [r5, #836]
+	cmp	r3, r0
+	beq	.L2677
+	ldrh	r3, [r5, #884]
+	cmp	r3, r0
+	bne	.L2674
+.L2677:
+	ldr	r3, .L2769
+	movs	r1, #1
+	movs	r2, #0
+	ldr	r0, [r3, #1764]
+	str	r8, [r0, #4]
+	ldr	r6, [r0, #12]
+	bl	FlashReadPages
+	ldr	r3, .L2769
+	ldr	r1, [r6, #4]
+	ldr	r3, [r3, #1764]
+	ldr	r3, [r3]
+	adds	r3, r3, #1
+	beq	.L2674
+	ldr	r0, [sp, #4]
+	bl	ftl_cmp_data_ver
+	cbnz	r0, .L2674
+	mov	r0, r7
+	add	r1, sp, #56
+	movs	r2, #1
+	bl	log2phys
+.L2674:
+	ldr	r0, [sp, #52]
+	adds	r1, r0, #1
+	beq	.L2656
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, [r5, #768]
+	ldrh	r3, [r3, r0, lsl #1]
+	mov	r1, r0
+	cbz	r3, .L2678
+.L2756:
+	bl	decrement_vpc_count
+	b	.L2656
+.L2678:
+	ldr	r0, .L2769+4
+	bl	printk
+	b	.L2656
+.L2660:
+	ldrh	r3, [r4]
+	mov	r1, r7
+	ldr	r2, .L2769+8
+	ldr	r0, .L2769+12
+	strh	r3, [r2, #-210]	@ movhi
+	ldr	r2, [sp, #4]
+	bl	printk
+	ldr	r3, .L2769+8
+	ldr	r3, [r3, #-204]
+	cmp	r3, #31
+	bhi	.L2679
+	ldr	r2, .L2769+8
+	ldr	r1, [sp, #60]
+	add	r2, r2, r3, lsl #2
+	adds	r3, r3, #1
+	str	r1, [r2, #-200]
+	ldr	r2, .L2769+8
+	str	r3, [r2, #-204]
+.L2679:
+	ldrh	r0, [r4]
+	bl	decrement_vpc_count
+	ldr	r3, [r5, #1928]
+	adds	r2, r3, #1
+	bne	.L2680
+	ldr	r3, [sp, #4]
+	b	.L2755
+.L2680:
+	ldr	r2, [sp, #4]
+	cmp	r3, r2
+	bls	.L2656
+	mov	r3, r2
+.L2755:
+	str	r3, [r5, #1928]
+.L2656:
+	ldr	r3, [sp, #28]
+	adds	r3, r3, #1
+	b	.L2757
+.L2764:
+	ldrb	r3, [r4, #8]	@ zero_extendqisi2
+	add	fp, fp, #1
+	cmp	r3, #1
+	uxth	fp, fp
+	ldr	r3, .L2769+16
+	bne	.L2682
+	ldrb	r2, [r3, #76]	@ zero_extendqisi2
+	cbz	r2, .L2682
+	ldrh	r2, [r3, #2900]
+	cmp	r2, fp
+	bne	.L2682
+	cmp	r10, fp
+	beq	.L2659
+.L2682:
+	ldrh	r3, [r3, #2898]
+	cmp	fp, r3
+	bne	.L2650
+	ldr	r2, .L2769+16
+	movw	r0, #65535
+	movs	r3, #0
+	strh	fp, [r4, #2]	@ movhi
+	strh	r3, [r4, #4]	@ movhi
+	ldrh	r1, [r2, #2828]
+.L2683:
+	uxth	r2, r3
+	cmp	r2, r1
+	bcs	.L2749
+	ldr	r6, [sp, #20]
+	adds	r3, r3, #1
+	ldrh	r5, [r6, #2]!
+	cmp	r5, r0
+	str	r6, [sp, #20]
+	beq	.L2683
+	strb	r2, [r4, #6]
+	b	.L2749
+.L2659:
+	ldrb	r3, [sp, #8]	@ zero_extendqisi2
+	mov	r0, r4
+	ldr	r2, [sp, #8]
+	mov	r1, r10
+	strh	r10, [r4, #2]	@ movhi
+	strb	r3, [r4, #6]
+.L2758:
+	bl	ftl_sb_update_avl_pages
+.L2749:
+	movs	r0, #0
+	add	sp, sp, #68
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L2770:
+	.align	2
+.L2769:
+	.word	.LANCHOR2
+	.word	.LC127
+	.word	.LANCHOR4
+	.word	.LC128
+	.word	.LANCHOR0
+	.fnend
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.align	1
+	.global	FtlWriteDumpData
+	.thumb
+	.thumb_func
+	.type	FtlWriteDumpData, %function
+FtlWriteDumpData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #40
+	sub	sp, sp, #40
+	ldr	r4, .L2789
+	ldr	r3, [r4, #740]
+	cmp	r3, #0
+	bne	.L2771
+	ldrh	r2, [r4, #792]
+	cmp	r2, #0
+	beq	.L2773
+	ldrb	r3, [r4, #796]	@ zero_extendqisi2
+	cmp	r3, #0
+	bne	.L2773
+	ldr	r7, .L2789+4
+	ldrb	r1, [r4, #795]	@ zero_extendqisi2
+	ldrh	r3, [r7, #2898]
+	muls	r3, r1, r3
+	cmp	r2, r3
+	beq	.L2773
+	ldrb	r9, [r4, #798]	@ zero_extendqisi2
+	ldr	r6, [r7, #2960]
+	ldrh	r8, [r7, #2828]
+	cmp	r9, #0
+	bne	.L2771
+	subs	r6, r6, #1
+	mov	r1, sp
+	mov	r2, r9
+	mov	r0, r6
+	bl	log2phys
+	ldr	r5, [r4, #1796]
+	ldr	r0, [r4, #756]
+	ldr	r3, [sp]
+	str	r6, [sp, #20]
+	str	r0, [sp, #12]
+	str	r3, [sp, #8]
+	adds	r3, r3, #1
+	str	r5, [sp, #16]
+	str	r9, [r5, #4]
+	beq	.L2775
+	movs	r1, #1
+	mov	r2, r9
+	add	r0, sp, #4
+	bl	FlashReadPages
+	b	.L2776
+.L2775:
+	movs	r1, #255
+	ldrh	r2, [r7, #2908]
+	bl	ftl_memset
+.L2776:
+	movs	r7, #0
+	ldr	r10, .L2789
+	lsl	r8, r8, #2
+	movw	r3, #61589
+	mov	r9, r7
+	strh	r3, [r5]	@ movhi
+.L2777:
+	cmp	r7, r8
+	beq	.L2778
+	ldrh	r3, [r4, #792]
+	cbz	r3, .L2778
+	ldr	r3, [sp, #8]
+	adds	r7, r7, #1
+	str	r6, [r5, #8]
+	ldr	r0, .L2789+8
+	str	r3, [r5, #12]
+	ldrh	r3, [r10, #788]
+	strh	r3, [r5, #2]	@ movhi
+	bl	get_new_active_ppa
+	ldr	r3, [r10, #988]
+	movs	r1, #1
+	str	r0, [sp, #8]
+	add	r0, sp, #4
+	str	r3, [r5, #4]
+	adds	r3, r3, #1
+	adds	r2, r3, #1
+	mov	r2, #0
+	it	eq
+	moveq	r3, r9
+	str	r3, [r10, #988]
+	mov	r3, r2
+	bl	FlashProgPages
+	ldrh	r0, [r4, #788]
+	bl	decrement_vpc_count
+	b	.L2777
+.L2778:
+	movs	r3, #1
+	b	.L2788
+.L2773:
+	movs	r3, #0
+.L2788:
+	strb	r3, [r4, #798]
+.L2771:
+	add	sp, sp, #40
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L2790:
+	.align	2
+.L2789:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR2+788
+	.fnend
+	.size	FtlWriteDumpData, .-FtlWriteDumpData
+	.align	1
+	.global	l2p_flush
+	.thumb
+	.thumb_func
+	.type	l2p_flush, %function
+l2p_flush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	bl	FtlWriteDumpData
+	movs	r4, #0
+	ldr	r5, .L2796
+	movs	r7, #12
+	ldr	r6, .L2796+4
+.L2792:
+	ldrh	r3, [r5, #2938]
+	uxth	r0, r4
+	cmp	r3, r0
+	bls	.L2795
+	ldr	r3, [r6, #932]
+	mla	r3, r7, r0, r3
+	ldr	r3, [r3, #4]
+	cmp	r3, #0
+	bge	.L2793
+	bl	flush_l2p_region
+.L2793:
+	adds	r4, r4, #1
+	b	.L2792
+.L2795:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, pc}
+.L2797:
+	.align	2
+.L2796:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	l2p_flush, .-l2p_flush
+	.align	1
+	.global	FtlVpcCheckAndModify
+	.thumb
+	.thumb_func
+	.type	FtlVpcCheckAndModify, %function
+FtlVpcCheckAndModify:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	movs	r4, #0
+	ldr	r6, .L2812
+	ldr	r1, .L2812+4
+	ldr	r0, .L2812+8
+	bl	printk
+	ldr	r5, .L2812+12
+	ldrh	r2, [r6, #2838]
+	movs	r1, #0
+	ldr	r0, [r5, #1820]
+	lsls	r2, r2, #1
+	bl	ftl_memset
+.L2799:
+	ldr	r3, [r6, #2960]
+	cmp	r4, r3
+	bcs	.L2810
+	mov	r0, r4
+	add	r1, sp, #4
+	movs	r2, #0
+	bl	log2phys
+	ldr	r0, [sp, #4]
+	adds	r3, r0, #1
+	beq	.L2800
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r2, [r5, #1820]
+	ldrh	r3, [r2, r0, lsl #1]
+	adds	r3, r3, #1
+	strh	r3, [r2, r0, lsl #1]	@ movhi
+.L2800:
+	adds	r4, r4, #1
+	b	.L2799
+.L2810:
+	ldr	r7, .L2812+12
+	mov	r8, #0
+	movw	r9, #65535
+.L2802:
+	ldrh	r3, [r6, #2836]
+	uxth	r4, r8
+	cmp	r3, r4
+	bls	.L2811
+	ldr	r3, [r5, #768]
+	ldrh	r2, [r3, r4, lsl #1]
+	ldr	r3, [r5, #1820]
+	ldrh	r3, [r3, r4, lsl #1]
+	cmp	r2, r3
+	beq	.L2804
+	cmp	r2, r9
+	beq	.L2804
+	ldr	r0, .L2812+16
+	mov	r1, r4
+	bl	printk
+	ldrh	r3, [r7, #788]
+	cmp	r3, r4
+	beq	.L2804
+	ldrh	r3, [r7, #884]
+	cmp	r3, r4
+	beq	.L2804
+	ldrh	r3, [r7, #836]
+	cmp	r3, r4
+	beq	.L2804
+	ldr	r3, [r7, #1820]
+	mov	r0, r4
+	ldrh	r2, [r3, r4, lsl #1]
+	ldr	r3, [r7, #768]
+	strh	r2, [r3, r4, lsl #1]	@ movhi
+	bl	update_vpc_list
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2804:
+	add	r8, r8, #1
+	b	.L2802
+.L2811:
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L2813:
+	.align	2
+.L2812:
+	.word	.LANCHOR0
+	.word	.LANCHOR3+16
+	.word	.LC129
+	.word	.LANCHOR2
+	.word	.LC130
+	.fnend
+	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.align	1
+	.global	allocate_new_data_superblock
+	.thumb
+	.thumb_func
+	.type	allocate_new_data_superblock, %function
+allocate_new_data_superblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r0
+	ldr	r4, .L2840
+	ldrh	r5, [r0]
+	ldr	r3, [r4, #740]
+	cmp	r3, #0
+	bne	.L2815
+	movw	r3, #65535
+	cmp	r5, r3
+	beq	.L2816
+	ldr	r3, [r4, #768]
+	mov	r0, r5
+	ldrh	r3, [r3, r5, lsl #1]
+	cbz	r3, .L2817
+	bl	INSERT_DATA_LIST
+	b	.L2816
+.L2817:
+	bl	INSERT_FREE_LIST
+.L2816:
+	movs	r3, #0
+	strb	r3, [r6, #8]
+	ldr	r3, .L2840
+	add	r2, r3, #836
+	cmp	r6, r2
+	beq	.L2818
+	ldr	r1, .L2840+4
+	ldrh	r2, [r1, #2848]
+	cmp	r2, #1
+	beq	.L2818
+	ldrb	r1, [r1, #76]	@ zero_extendqisi2
+	cbz	r1, .L2819
+.L2818:
+	movs	r3, #1
+	strb	r3, [r6, #8]
+	b	.L2820
+.L2819:
+	add	r1, r3, #788
+	cmp	r6, r1
+	bne	.L2820
+	cmp	r2, #3
+	beq	.L2822
+	ldr	r3, [r3, #1124]
+	cmp	r3, #1
+	bne	.L2823
+.L2822:
+	movs	r3, #1
+	strb	r3, [r4, #796]
+.L2823:
+	ldr	r2, [r4, #948]
+	ldr	r3, .L2840
+	cbz	r2, .L2820
+	ldr	r2, [r3, #1008]
+	cmp	r2, #29
+	itt	ls
+	movls	r2, #1
+	strbls	r2, [r3, #796]
+.L2820:
+	ldrh	r0, [r4, #1916]
+	movw	r3, #65535
+	cmp	r0, r3
+	beq	.L2825
+	cmp	r5, r0
+	bne	.L2826
+	ldr	r3, .L2840
+	ldr	r3, [r3, #768]
+	ldrh	r3, [r3, r0, lsl #1]
+	cbz	r3, .L2827
+.L2826:
+	bl	update_vpc_list
+.L2827:
+	movw	r3, #65535
+	strh	r3, [r4, #1916]	@ movhi
+.L2825:
+	mov	r0, r6
+	bl	allocate_data_superblock
+	bl	l2p_flush
+	movs	r0, #0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2815:
+	movs	r0, #0
+	pop	{r4, r5, r6, pc}
+.L2841:
+	.align	2
+.L2840:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.fnend
+	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.align	1
+	.global	rk_ftl_garbage_collect
+	.thumb
+	.thumb_func
+	.type	rk_ftl_garbage_collect, %function
+rk_ftl_garbage_collect:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r8, r0
+	ldr	r4, .L3010
+	.pad #44
+	sub	sp, sp, #44
+	mov	r6, r1
+	ldr	r0, [r4, #740]
+	mov	r7, r4
+	cmp	r0, #0
+	bne	.L2936
+	ldr	r3, [r4, #1744]
+	cmp	r3, #0
+	bne	.L2994
+	ldrh	r2, [r4, #776]
+	cmp	r2, #47
+	bls	.L2938
+	ldr	r3, .L3010+4
+	ldrh	r2, [r3, #3000]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L2844
+.L2847:
+	ldrh	r1, [r7, #1696]
+	movw	r0, #65535
+	ldr	r3, .L3010
+	cmp	r1, r0
+	beq	.L2846
+	ldrh	r2, [r3, #1694]
+	cmp	r2, r0
+	itt	eq
+	strheq	r1, [r3, #1694]	@ movhi
+	strheq	r2, [r3, #1696]	@ movhi
+	b	.L2846
+.L2844:
+	ldrh	r2, [r4, #884]
+	cmp	r2, r3
+	beq	.L2847
+	movs	r0, #1
+	bl	FtlGcFreeTempBlock
+	cmp	r0, #0
+	beq	.L2847
+	movs	r0, #1
+	b	.L2994
+.L2846:
+	ldr	r4, [r7, #1644]
+	cmp	r8, #1
+	add	r4, r4, #1
+	add	r4, r4, r8, lsl #7
+	str	r4, [r7, #1644]
+	bne	.L2858
+	ldr	r3, .L3010
+	ldr	r3, [r3, #948]
+	cbnz	r3, .L2849
+	ldr	r3, .L3010+8
+	ldrb	r3, [r3, #76]	@ zero_extendqisi2
+	cmp	r3, #0
+	beq	.L2858
+.L2849:
+	ldr	r3, [r7, #1008]
+	ldr	r5, .L3010
+	cmp	r3, #29
+	bhi	.L2858
+	ldr	r9, .L3010+12
+	ldrh	r3, [r9, #-72]
+	add	r4, r4, r3
+	str	r4, [r5, #1644]
+	bl	FtlGcReFreshBadBlk
+	ldrh	r3, [r5, #1076]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L2858
+	ldrh	r2, [r5, #1694]
+	cmp	r2, r3
+	bne	.L2858
+	ldr	r3, [r5, #1644]
+	cmp	r3, #1024
+	bhi	.L2850
+	ldrh	r3, [r5, #784]
+	cmp	r3, #63
+	bhi	.L2858
+.L2850:
+	ldrh	r3, [r7, #1642]
+	movs	r0, #0
+	ldrh	r4, [r7, #784]
+	adds	r3, r3, #64
+	ldr	r2, .L3010+12
+	cmp	r4, r3
+	strh	r0, [r9, #-72]	@ movhi
+	ldr	r1, .L3010
+	bgt	.L2858
+	ldr	r3, [r1, #1008]
+	str	r0, [r1, #1644]
+	cbnz	r3, .L2851
+	movs	r3, #6
+	b	.L2995
+.L2851:
+	cmp	r3, #5
+	bhi	.L2852
+	movs	r3, #18
+.L2995:
+	strh	r3, [r2, #-72]	@ movhi
+.L2852:
+	movs	r0, #32
+	bl	List_get_gc_head_node
+	movw	ip, #65535
+	uxth	r2, r0
+	cmp	r2, ip
+	beq	.L2857
+	ldrh	r0, [r7, #1648]
+	ldr	r5, .L3010
+	cmp	r0, #0
+	beq	.L2854
+	ldr	r3, .L3010+8
+	ldr	r10, [r5, #768]
+	ldrh	r4, [r3, #2900]
+	ldrh	r3, [r3, #2828]
+	ldrh	r1, [r10, r2, lsl #1]
+	muls	r3, r4, r3
+	adds	r3, r3, #1
+	cmp	r1, r3
+	bgt	.L2857
+	adds	r1, r0, #1
+	str	ip, [sp, #20]
+	str	r2, [sp, #16]
+	mov	fp, #0
+	uxth	r1, r1
+	str	fp, [r5, #1652]
+	strh	r1, [r5, #1648]	@ movhi
+	str	r1, [sp, #12]
+	bl	List_get_gc_head_node
+	ldr	ip, [sp, #20]
+	uxth	r4, r0
+	ldr	r1, [sp, #12]
+	cmp	r4, ip
+	ldr	r2, [sp, #16]
+	beq	.L2857
+	ldrh	r2, [r10, r2, lsl #1]
+	ldrh	r3, [r10, r4, lsl #1]
+	ldr	r0, .L3010+16
+	str	r2, [sp]
+	mov	r2, r4
+	bl	printk
+	ldrh	r3, [r5, #1648]
+	cmp	r3, #40
+	bls	.L2855
+	ldr	r3, [r5, #768]
+	ldrh	r3, [r3, r4, lsl #1]
+	cmp	r3, #32
+	it	hi
+	strhhi	fp, [r5, #1648]	@ movhi
+.L2855:
+	movs	r3, #6
+	strh	r3, [r9, #-72]	@ movhi
+	b	.L2874
+.L2854:
+	movs	r3, #1
+	strh	r3, [r5, #1648]	@ movhi
+.L2857:
+	bl	GetSwlReplaceBlock
+	movw	r3, #65535
+	cmp	r0, r3
+	mov	r4, r0
+	bne	.L2874
+	movs	r3, #0
+	strh	r3, [r9, #-72]	@ movhi
+.L2858:
+	ldrh	r3, [r7, #1076]
+	movw	r4, #65535
+	ldr	r5, .L3010
+	cmp	r3, r4
+	bne	.L3002
+	ldrh	r4, [r5, #884]
+	cmp	r4, r3
+	bne	.L2859
+	ldrh	r10, [r5, #1694]
+	cmp	r10, r4
+	bne	.L2860
+	ldrh	r3, [r5, #784]
+	ldr	r2, [r5, #1644]
+	cmp	r3, #24
+	ite	cc
+	movcc	r3, #5120
+	movcs	r3, #1024
+	cmp	r2, r3
+	bls	.L2862
+	ldr	r2, .L3010+12
+	movs	r3, #0
+	str	r3, [r7, #1644]
+	mov	r9, r5
+	strh	r3, [r2, #-72]	@ movhi
+	bl	GetSwlReplaceBlock
+	cmp	r0, r10
+	mov	r4, r0
+	bne	.L2863
+	ldrh	r2, [r5, #784]
+	ldrh	r3, [r5, #1642]
+	cmp	r2, r3
+	bcs	.L2864
+	movs	r0, #64
+	bl	List_get_gc_head_node
+	uxth	r3, r0
+	cmp	r3, r4
+	bne	.L3003
+.L2873:
+	bl	FtlGcReFreshBadBlk
+	cmp	r8, #0
+	beq	.L3004
+.L2874:
+	ldrh	r2, [r7, #884]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L2885
+.L2934:
+	ldrh	r3, [r7, #1694]
+	movw	r2, #65535
+	cmp	r3, r2
+	bne	.L2885
+	cmp	r4, r3
+	bne	.L2885
+.L2935:
+	ldrh	r2, [r7, #1076]
+	movw	r3, #65535
+	ldr	r4, .L3010
+	cmp	r2, r3
+	beq	.L2886
+.L2890:
+	movw	r4, #65535
+	b	.L2885
+.L2886:
+	movs	r3, #0
+	ldrh	r9, [r4, #784]
+	str	r3, [r4, #1652]
+	ldrh	r3, [r4, #1640]
+	ldr	r5, .L3010+12
+	cmp	r3, r9
+	bcs	.L2887
+	ldrh	r3, [r5, #-72]
+	cbnz	r3, .L2888
+	ldr	r3, .L3010+8
+	ldr	r2, [r4, #940]
+	ldr	r3, [r3, #2960]
+	add	r3, r3, r3, lsl #1
+	cmp	r2, r3, lsr #2
+	bcs	.L2946
+.L2888:
+	ldrh	r3, [r7, #1060]
+	add	r3, r3, r3, lsl #1
+	ubfx	r3, r3, #2, #16
+	b	.L2889
+.L2946:
+	movs	r3, #18
+.L2889:
+	strh	r3, [r7, #1640]	@ movhi
+	b	.L2999
+.L2887:
+	ldrh	r0, [r5, #-72]
+	cmp	r0, #0
+	bne	.L2890
+	ldrh	r6, [r4, #1060]
+	add	r3, r6, r6, lsl #1
+	asrs	r3, r3, #2
+	strh	r3, [r4, #1640]	@ movhi
+	bl	List_get_gc_head_node
+	ldr	r2, .L3010+8
+	ldr	r3, [r4, #768]
+	ldrh	r1, [r2, #2900]
+	ldrh	r4, [r2, #2828]
+	muls	r4, r1, r4
+	add	r4, r4, r4, lsr #31
+	uxth	r0, r0
+	ldrh	r3, [r3, r0, lsl #1]
+	cmp	r3, r4, asr #1
+	ble	.L2891
+	subs	r6, r6, #1
+	cmp	r9, r6
+	blt	.L2891
+.L2999:
+	bl	FtlReadRefresh
+	b	.L3000
+.L2891:
+	cmp	r3, #0
+	bne	.L2890
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r0, [r7, #784]
+	adds	r0, r0, #1
+	b	.L2994
+.L2885:
+	ldr	r3, [r7, #948]
+	cmp	r3, #0
+	ite	eq
+	moveq	r5, #1
+	movne	r5, #2
+	b	.L2884
+.L3011:
+	.align	2
+.L3010:
+	.word	.LANCHOR2
+	.word	.LANCHOR1
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LC131
+.L3004:
+	movw	r3, #65535
+	cmp	r4, r3
+	bne	.L2874
+.L2933:
+	ldrh	r4, [r7, #784]
+	cmp	r4, #24
+	bhi	.L2942
+	ldr	r3, .L3012
+	cmp	r4, #16
+	ldrh	r5, [r3, #2898]
+	bls	.L2876
+	lsrs	r5, r5, #5
+.L2875:
+	ldrh	r3, [r7, #1640]
+	ldr	r2, .L3012+4
+	cmp	r3, r4
+	bcc	.L3005
+.L2879:
+	ldr	r3, [r7, #948]
+	cmp	r3, #0
+	bne	.L3006
+.L2945:
+	movw	r4, #65535
+.L2884:
+	ldrh	r2, [r7, #1076]
+	movw	r1, #65535
+	ldr	r3, .L3012+4
+	cmp	r2, r1
+	bne	.L2893
+	cmp	r4, r2
+	beq	.L2894
+	strh	r4, [r3, #1076]	@ movhi
+	b	.L2895
+.L2894:
+	ldrh	r2, [r3, #1694]
+	cmp	r2, r4
+	beq	.L2895
+	ldr	r1, [r3, #768]
+	ldrh	r2, [r1, r2, lsl #1]
+	cbnz	r2, .L2896
+	strh	r4, [r3, #1694]	@ movhi
+.L2896:
+	ldrh	r3, [r7, #1694]
+	strh	r3, [r7, #1076]	@ movhi
+	movw	r3, #65535
+	strh	r3, [r7, #1694]	@ movhi
+.L2895:
+	ldrh	r0, [r7, #1076]
+	movw	r6, #65535
+	movs	r3, #0
+	strb	r3, [r7, #1084]
+	cmp	r0, r6
+	beq	.L2893
+	bl	IsBlkInGcList
+	cbz	r0, .L2898
+	ldr	r3, .L3012+4
+	strh	r6, [r3, #1076]	@ movhi
+.L2898:
+	ldr	r3, .L3012
+	ldrb	r3, [r3, #76]	@ zero_extendqisi2
+	cbz	r3, .L2899
+	ldrh	r0, [r7, #1076]
+	bl	ftl_get_blk_mode
+	strb	r0, [r7, #1084]
+.L2899:
+	ldrh	r2, [r7, #1076]
+	movw	r3, #65535
+	ldr	r6, .L3012+4
+	cmp	r2, r3
+	beq	.L2893
+	addw	r0, r6, #1076
+	bl	make_superblock
+	ldr	r2, .L3012+8
+	movs	r3, #0
+	ldrh	r1, [r6, #1076]
+	strh	r3, [r6, #1078]	@ movhi
+	strb	r3, [r6, #1082]
+	strh	r3, [r2, #-70]	@ movhi
+	ldr	r3, [r6, #768]
+	ldrh	r3, [r3, r1, lsl #1]
+	strh	r3, [r2, #-68]	@ movhi
+.L2893:
+	ldrh	r3, [r7, #1076]
+	ldrh	r2, [r7, #788]
+	cmp	r2, r3
+	beq	.L2900
+	ldr	r2, .L3012+4
+	ldrh	r2, [r2, #836]
+	cmp	r2, r3
+	beq	.L2900
+.L2901:
+	ldr	r7, .L3012
+	b	.L2902
+.L2900:
+	movw	r3, #65535
+	strh	r3, [r7, #1076]	@ movhi
+	b	.L3001
+.L2923:
+	ldrh	r3, [r6, #1078]
+	add	r5, r5, r3
+	ldr	r3, [sp, #12]
+	uxth	r5, r5
+	strh	r5, [r6, #1078]	@ movhi
+	cmp	r5, r3
+	bcs	.L3007
+.L2925:
+	ldrh	r3, [r6, #784]
+	cmp	r3, #2
+	bhi	.L2928
+	ldrh	r5, [r7, #2898]
+.L2902:
+	ldr	r6, .L3012+4
+	movw	r3, #65535
+	ldrh	r2, [r6, #1076]
+	mov	fp, r6
+	cmp	r2, r3
+	bne	.L2903
+	mov	r10, r6
+	movs	r3, #0
+	str	r3, [r6, #1652]
+.L2904:
+	ldrh	r9, [fp, #1648]
+	mov	r0, r9
+	bl	List_get_gc_head_node
+	movw	r2, #65535
+	uxth	r3, r0
+	strh	r3, [fp, #1076]	@ movhi
+	cmp	r3, r2
+	bne	.L2905
+	ldr	r3, .L3012+4
+	movs	r2, #0
+	movs	r0, #8
+	strh	r2, [r3, #1648]	@ movhi
+	b	.L2994
+.L2905:
+	mov	r0, r3
+	str	r3, [sp, #12]
+	bl	IsBlkInGcList
+	add	r9, r9, #1
+	ldr	r3, [sp, #12]
+	cbz	r0, .L2906
+	strh	r9, [r10, #1648]	@ movhi
+	b	.L2904
+.L2906:
+	ldrh	lr, [r7, #2828]
+	uxth	r9, r9
+	ldrh	r2, [r7, #2898]
+	ldr	r1, [r10, #768]
+	strh	r9, [r10, #1648]	@ movhi
+	mul	r2, lr, r2
+	ldrh	r0, [r1, r3, lsl #1]
+	add	lr, r2, r2, lsr #31
+	cmp	r0, lr, asr #1
+	bgt	.L2908
+	cmp	r9, #48
+	bls	.L2909
+	cmp	r0, #8
+	bls	.L2909
+	ldrh	r0, [r10, #1684]
+	cmp	r0, #35
+	bhi	.L2909
+.L2908:
+	movs	r0, #0
+	strh	r0, [fp, #1648]	@ movhi
+.L2909:
+	ldrh	r1, [r1, r3, lsl #1]
+	cmp	r1, r2
+	blt	.L2910
+	movw	r2, #65535
+	cmp	r4, r2
+	bne	.L2910
+	movs	r3, #0
+	strh	r4, [fp, #1076]	@ movhi
+	strh	r3, [fp, #1648]	@ movhi
+.L3001:
+	ldr	r3, .L3012+8
+	ldrh	r0, [r3, #-72]
+	b	.L2994
+.L2910:
+	cbnz	r1, .L2911
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrh	r3, [fp, #1648]
+	adds	r3, r3, #1
+	strh	r3, [fp, #1648]	@ movhi
+	b	.L2904
+.L2911:
+	movs	r2, #0
+	strb	r2, [r6, #1084]
+	ldr	r2, .L3012
+	ldrb	r2, [r2, #76]	@ zero_extendqisi2
+	cbz	r2, .L2912
+	mov	r0, r3
+	bl	ftl_get_blk_mode
+	ldr	r3, .L3012+4
+	strb	r0, [r3, #1084]
+.L2912:
+	ldr	r0, .L3012+12
+	bl	make_superblock
+	ldr	r2, .L3012+8
+	ldrh	r0, [r6, #1076]
+	movs	r3, #0
+	ldr	r1, [r6, #768]
+	strh	r3, [r2, #-70]	@ movhi
+	ldrh	r1, [r1, r0, lsl #1]
+	strh	r3, [r6, #1078]	@ movhi
+	strb	r3, [r6, #1082]
+	strh	r1, [r2, #-68]	@ movhi
+.L2903:
+	cmp	r8, #1
+	bne	.L2913
+	bl	FtlReadRefresh
+.L2913:
+	movs	r3, #1
+	str	r3, [r6, #1744]
+	ldrh	r3, [r7, #2898]
+	str	r3, [sp, #12]
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	cbz	r3, .L2914
+	ldr	r3, .L3012+4
+	ldrb	r3, [r3, #1084]	@ zero_extendqisi2
+	cmp	r3, #1
+	itt	eq
+	ldrheq	r3, [r7, #2900]
+	streq	r3, [sp, #12]
+.L2914:
+	ldrh	r3, [r6, #1078]
+	ldr	r1, [sp, #12]
+	adds	r2, r3, r5
+	cmp	r2, r1
+	ittt	gt
+	movgt	r2, r1
+	subgt	r3, r2, r3
+	uxthgt	r5, r3
+	movs	r3, #0
+.L2998:
+	str	r3, [sp, #16]
+	ldrh	r3, [sp, #16]
+	ldr	r6, .L3012+4
+	cmp	r3, r5
+	bcs	.L2923
+	ldr	r3, [r6, #1672]
+	addw	r1, r6, #1090
+	ldr	r2, [sp, #16]
+	movw	lr, #65535
+	ldrh	r10, [r7, #2828]
+	str	r3, [sp, #20]
+	ldrh	r3, [r6, #1078]
+	add	ip, r3, r2
+	movs	r3, #0
+	mov	r9, r3
+.L2924:
+	uxth	r2, r3
+	cmp	r2, r10
+	bcs	.L3008
+	ldrh	r2, [r1, #2]!
+	cmp	r2, lr
+	beq	.L2917
+	ldr	r0, [sp, #20]
+	mov	fp, #36
+	orr	r2, ip, r2, lsl #10
+	mla	fp, fp, r9, r0
+	add	r9, r9, #1
+	uxth	r9, r9
+	str	r2, [fp, #4]
+.L2917:
+	adds	r3, r3, #1
+	b	.L2924
+.L3013:
+	.align	2
+.L3012:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LANCHOR2+1076
+.L3008:
+	ldr	r0, [r6, #1672]
+	mov	r1, r9
+	ldrb	r2, [r6, #1084]	@ zero_extendqisi2
+	mov	fp, #0
+	bl	FlashReadPages
+	ldr	r6, .L3014
+.L2919:
+	uxth	r3, fp
+	cmp	r3, r9
+	bcs	.L3009
+	mov	ip, #36
+	ldr	r2, [r6, #1672]
+	mul	r10, ip, fp
+	add	r3, r2, r10
+	ldr	r2, [r2, r10]
+	ldr	r3, [r3, #12]
+	adds	r2, r2, #1
+	beq	.L2948
+	ldrh	r1, [r3]
+	movw	r2, #61589
+	cmp	r1, r2
+	bne	.L2948
+	add	r1, sp, ip
+	ldr	r0, [r3, #8]
+	movs	r2, #0
+	str	ip, [sp, #24]
+	str	r3, [sp, #20]
+	bl	log2phys
+	ldr	r1, [r6, #1672]
+	add	r1, r1, r10
+	ldr	r0, [r1, #4]
+	ldr	r2, [sp, #36]
+	ldr	r3, [sp, #20]
+	bic	r2, r2, #-2147483648
+	ldr	ip, [sp, #24]
+	cmp	r2, r0
+	bne	.L2948
+	str	r3, [sp, #28]
+	ldr	r3, .L3014+4
+	ldr	r0, [r6, #1656]
+	ldr	r1, [r1, #16]
+	ldrh	r2, [r3, #-70]
+	adds	r2, r2, #1
+	strh	r2, [r3, #-70]	@ movhi
+	ldr	r2, [r6, #1768]
+	mla	r2, ip, r0, r2
+	str	r1, [r2, #16]
+	str	r2, [sp, #20]
+	bl	Ftl_get_new_temp_ppa
+	ldr	r1, [r6, #1656]
+	ldr	r2, [sp, #20]
+	ldr	ip, [sp, #24]
+	ldr	r3, [sp, #28]
+	str	r0, [r2, #4]
+	ldr	r2, [r6, #1768]
+	mla	ip, ip, r1, r2
+	ldr	r2, [r6, #1672]
+	add	r2, r2, r10
+	ldr	r1, [r2, #8]
+	str	r1, [ip, #8]
+	movs	r1, #1
+	ldr	r2, [r2, #12]
+	str	r2, [ip, #12]
+	ldr	r2, [sp, #36]
+	str	r2, [r3, #12]
+	ldrh	r2, [r6, #884]
+	strh	r2, [r3, #2]	@ movhi
+	ldr	r2, [r6, #988]
+	ldr	r0, [r6, #1672]
+	str	r2, [r3, #4]
+	add	r0, r0, r10
+	ldr	r3, [r6, #1656]
+	adds	r3, r3, #1
+	str	r3, [r6, #1656]
+	bl	FtlGcBufAlloc
+	ldrb	r3, [r7, #76]	@ zero_extendqisi2
+	cbnz	r3, .L2921
+	ldrb	r3, [r6, #891]	@ zero_extendqisi2
+	ldr	r2, [r6, #1656]
+	cmp	r2, r3
+	beq	.L2921
+	ldrh	r3, [r6, #888]
+	cbnz	r3, .L2948
+.L2921:
+	bl	Ftl_gc_temp_data_write_back
+	cbz	r0, .L2948
+	ldr	r3, .L3014
+	movs	r2, #0
+	str	r2, [r3, #1744]
+	b	.L3001
+.L2948:
+	add	fp, fp, #1
+	b	.L2919
+.L3009:
+	ldr	r3, [sp, #16]
+	adds	r3, r3, #1
+	b	.L2998
+.L3007:
+	ldr	r3, [r6, #1656]
+	ldr	r5, .L3014+4
+	cbz	r3, .L2926
+	bl	Ftl_gc_temp_data_write_back
+	cbz	r0, .L2926
+	movs	r3, #0
+	str	r3, [r6, #1744]
+.L3000:
+	ldrh	r0, [r5, #-72]
+	b	.L2994
+.L2926:
+	ldrh	r1, [r5, #-70]
+	cbnz	r1, .L2927
+	ldrh	r2, [r6, #1076]
+	ldr	r3, [r6, #768]
+	ldrh	r0, [r3, r2, lsl #1]
+	cbz	r0, .L2927
+	strh	r1, [r3, r2, lsl #1]	@ movhi
+	ldr	r3, .L3014
+	ldrh	r0, [r3, #1076]
+	bl	update_vpc_list
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2927:
+	movw	r3, #65535
+	strh	r3, [r6, #1076]	@ movhi
+	b	.L2925
+.L2928:
+	ldr	r2, .L3014
+	movs	r1, #0
+	str	r1, [r2, #1744]
+	ldr	r2, .L3014+4
+	ldrh	r0, [r2, #-72]
+	cmp	r0, #0
+	bne	.L2994
+	adds	r0, r3, #1
+	b	.L2994
+.L2936:
+	movs	r0, #0
+	b	.L2994
+.L2938:
+	mov	r0, r3
+	b	.L2994
+.L3003:
+	ldr	r2, [r5, #1740]
+	ldr	r5, .L3014+8
+	cbnz	r2, .L2866
+	ldrh	r2, [r5, #2848]
+	cmp	r2, #3
+	beq	.L2866
+	ldr	r2, [r9, #1124]
+	cbnz	r2, .L2866
+	ldr	r2, [r9, #948]
+	cbnz	r2, .L2866
+	ldrb	r0, [r5, #76]	@ zero_extendqisi2
+	cbz	r0, .L2867
+.L2866:
+	ldr	r2, [r7, #768]
+	ldrh	r0, [r5, #2848]
+	ldrh	r1, [r2, r3, lsl #1]
+	cmp	r0, #3
+	ldrh	r3, [r5, #2900]
+	ldrh	r2, [r5, #2828]
+	mul	r2, r2, r3
+	ite	eq
+	lsreq	r3, r3, #1
+	movne	r3, #0
+	add	r3, r3, r2
+	cmp	r1, r3
+	bgt	.L2869
+	movs	r0, #0
+	bl	List_get_gc_head_node
+	ldr	r3, [r5, #2960]
+	ldr	r2, .L3014
+	ldr	r1, [r7, #940]
+	add	r3, r3, r3, lsl #1
+	cmp	r1, r3, lsr #2
+	ite	hi
+	movhi	r3, #128
+	movls	r3, #160
+	strh	r3, [r2, #1642]	@ movhi
+	uxth	r4, r0
+	b	.L2871
+.L2869:
+	movs	r3, #128
+	b	.L2997
+.L2867:
+	ldr	r2, [r9, #768]
+	ldrh	r3, [r2, r3, lsl #1]
+	cmp	r3, #7
+	bhi	.L2872
+	bl	List_get_gc_head_node
+	movs	r3, #128
+	strh	r3, [r7, #1642]	@ movhi
+	uxth	r4, r0
+	b	.L2871
+.L2872:
+	movs	r3, #64
+.L2997:
+	strh	r3, [r7, #1642]	@ movhi
+	b	.L2873
+.L2864:
+	movs	r3, #80
+	strh	r3, [r5, #1642]	@ movhi
+	b	.L2873
+.L2871:
+	movw	r3, #65535
+	cmp	r4, r3
+	beq	.L2873
+.L2863:
+	ldr	r1, [r7, #748]
+	ldr	r3, [r7, #768]
+	ldrh	r2, [r7, #784]
+	ldrh	r1, [r1, r4, lsl #1]
+	ldrh	r3, [r3, r4, lsl #1]
+	ldr	r0, .L3014+12
+	str	r1, [sp]
+	ldrh	r1, [r7, #1640]
+	str	r1, [sp, #4]
+	mov	r1, r4
+	bl	printk
+	b	.L2873
+.L2876:
+	cmp	r4, #12
+	bls	.L2877
+	lsrs	r5, r5, #4
+	b	.L2875
+.L2877:
+	cmp	r4, #8
+	bls	.L2875
+	lsrs	r5, r5, #2
+	b	.L2875
+.L2942:
+	movs	r5, #1
+	b	.L2875
+.L3005:
+	ldrh	r3, [r2, #884]
+	movw	r1, #65535
+	cmp	r3, r1
+	bne	.L2880
+	ldrh	r1, [r2, #1694]
+	cmp	r1, r3
+	bne	.L2880
+	ldr	r3, .L3014+4
+	ldrh	r0, [r3, #-72]
+	cbnz	r0, .L2881
+	ldr	r3, .L3014+8
+	ldr	r2, [r2, #940]
+	ldr	r3, [r3, #2960]
+	add	r3, r3, r3, lsl #1
+	cmp	r2, r3, lsr #2
+	bcs	.L2943
+.L2881:
+	ldrh	r3, [r7, #1060]
+	add	r3, r3, r3, lsl #1
+	ubfx	r3, r3, #2, #16
+	b	.L2882
+.L2943:
+	movs	r3, #18
+.L2882:
+	strh	r3, [r7, #1640]	@ movhi
+	movs	r3, #0
+	str	r3, [r7, #1652]
+	b	.L2994
+.L2880:
+	ldrh	r3, [r7, #1060]
+	add	r3, r3, r3, lsl #1
+	asrs	r3, r3, #2
+	strh	r3, [r7, #1640]	@ movhi
+	b	.L2879
+.L3006:
+	cmp	r6, #2
+	bhi	.L2945
+	adds	r5, r5, #1
+	uxth	r5, r5
+	b	.L2945
+.L3002:
+	cmp	r8, #0
+	beq	.L2933
+	b	.L2874
+.L2859:
+	cmp	r8, #0
+	beq	.L2933
+	b	.L2890
+.L2860:
+	cmp	r8, #0
+	beq	.L2933
+	b	.L2934
+.L2862:
+	cmp	r8, #0
+	beq	.L2933
+	b	.L2935
+.L2994:
+	add	sp, sp, #44
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3015:
+	.align	2
+.L3014:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LANCHOR0
+	.word	.LC132
+	.fnend
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	1
+	.global	FtlCacheWriteBack
+	.thumb
+	.thumb_func
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r3, .L3058
+	ldr	r6, .L3058+4
+	ldr	r5, [r3, #-64]
+	ldr	r3, [r6, #740]
+	cmp	r3, #0
+	bne	.L3018
+	ldr	r4, .L3058+8
+	ldr	r1, [r4, #2952]
+	cmp	r1, #0
+	beq	.L3018
+	ldrb	r7, [r4, #76]	@ zero_extendqisi2
+	cbz	r7, .L3020
+	ldrb	r7, [r5, #8]	@ zero_extendqisi2
+	subs	r0, r7, #1
+	rsbs	r7, r0, #0
+	adcs	r7, r7, r0
+.L3020:
+	ldr	r0, [r4, #2956]
+	mov	r2, r7
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
+	mov	r9, #0
+	bl	FlashProgPages
+	ldr	r10, .L3058+8
+	mov	fp, #36
+.L3021:
+	ldr	r3, [r4, #2952]
+	cmp	r9, r3
+	bcs	.L3038
+	mul	r8, fp, r9
+	ldr	r3, [r10, #2956]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
+	adds	r3, r3, #1
+	beq	.L3041
+	ldr	r3, [r2, #4]
+	cbz	r7, .L3054
+	orr	r3, r3, #-2147483648
+.L3054:
+	ldr	r0, [r2, #16]
+	add	r1, sp, #4
+	movs	r2, #1
+	str	r3, [sp, #4]
+	bl	log2phys
+	ldr	r3, [r4, #2956]
+	add	r8, r8, r3
+	ldr	r3, [r8, #12]
+	ldr	r0, [r3, #12]
+	adds	r2, r0, #1
+	beq	.L3025
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, [r6, #768]
+	ldrh	r2, [r3, r0, lsl #1]
+	mov	r8, r0
+	cbnz	r2, .L3026
+	ldr	r0, .L3058+12
+	mov	r1, r8
+	bl	printk
+.L3026:
+	mov	r0, r8
+	bl	decrement_vpc_count
+.L3025:
+	add	r9, r9, #1
+	b	.L3021
+.L3056:
+	movw	r5, #16386
+.L3037:
+	ldrh	r3, [r6, #1698]
+	cbz	r3, .L3038
+	movs	r0, #1
+	mov	r1, r0
+	bl	rk_ftl_garbage_collect
+	subs	r5, r5, #1
+	bne	.L3037
+.L3038:
+	movs	r3, #0
+	str	r3, [r4, #2952]
+	b	.L3018
+.L3041:
+	ldr	r10, .L3058+8
+	mov	r9, #0
+.L3022:
+	ldr	r3, [r4, #2952]
+	cmp	r9, r3
+	bcs	.L3056
+	mov	r8, #36
+	ldr	r3, [r10, #2956]
+	mov	fp, #0
+	mov	r2, #-1
+	mul	r8, r8, r9
+	str	r2, [r3, r8]
+.L3028:
+	ldr	r3, [r4, #2956]
+	add	r2, r3, r8
+	ldr	r3, [r3, r8]
+	adds	r3, r3, #1
+	bne	.L3057
+	ldr	r0, [r2, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldrh	r3, [r5]
+	cmp	r3, r0
+	bne	.L3029
+	ldr	r1, [r6, #768]
+	ldrh	r0, [r5, #4]
+	ldrh	r2, [r1, r3, lsl #1]
+	subs	r2, r2, r0
+	strh	r2, [r1, r3, lsl #1]	@ movhi
+	ldrh	r3, [r10, #2898]
+	strb	fp, [r5, #6]
+	strh	fp, [r5, #4]	@ movhi
+	strh	r3, [r5, #2]	@ movhi
+.L3029:
+	ldrh	r3, [r5, #4]
+	cbnz	r3, .L3030
+	mov	r0, r5
+	bl	allocate_new_data_superblock
+.L3030:
+	ldr	r3, [r6, #1224]
+	adds	r3, r3, #1
+	str	r3, [r6, #1224]
+	ldr	r3, [r4, #2956]
+	add	r3, r3, r8
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlGcMarkBadPhyBlk
+	mov	r0, r5
+	bl	get_new_active_ppa
+	ldr	r3, [r4, #2956]
+	movs	r1, #1
+	mov	r2, r7
+	add	r3, r3, r8
+	str	r0, [sp, #4]
+	str	r0, [r3, #4]
+	mov	r0, r3
+	ldrb	r3, [r5, #9]	@ zero_extendqisi2
+	bl	FlashProgPages
+	ldr	r3, [r6, #740]
+	cmp	r3, #0
+	beq	.L3028
+	b	.L3018
+.L3057:
+	ldr	r3, [r2, #4]
+	cbz	r7, .L3055
+	orr	r3, r3, #-2147483648
+.L3055:
+	ldr	r0, [r2, #16]
+	add	r1, sp, #4
+	movs	r2, #1
+	str	r3, [sp, #4]
+	bl	log2phys
+	ldr	r3, [r4, #2956]
+	add	r8, r8, r3
+	ldr	r3, [r8, #12]
+	ldr	r0, [r3, #12]
+	adds	r3, r0, #1
+	beq	.L3034
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	ldr	r3, [r6, #768]
+	ldrh	r2, [r3, r0, lsl #1]
+	mov	r8, r0
+	cbnz	r2, .L3035
+	ldr	r0, .L3058+12
+	mov	r1, r8
+	bl	printk
+.L3035:
+	mov	r0, r8
+	bl	decrement_vpc_count
+.L3034:
+	add	r9, r9, #1
+	b	.L3022
+.L3018:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3059:
+	.align	2
+.L3058:
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LC133
+	.fnend
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	1
+	.global	FtlSysFlush
+	.thumb
+	.thumb_func
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L3062
+	ldr	r3, [r3, #740]
+	cbnz	r3, .L3061
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	movs	r0, #1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L3061:
+	movs	r0, #0
+	pop	{r3, pc}
+.L3063:
+	.align	2
+.L3062:
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	1
+	.global	FtlDeInit
+	.thumb
+	.thumb_func
+	.type	FtlDeInit, %function
+FtlDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	ldr	r3, .L3066
+	ldr	r3, [r3, #504]
+	cmp	r3, #1
+	bne	.L3065
+	bl	FtlSysFlush
+.L3065:
+	movs	r0, #0
+	pop	{r3, pc}
+.L3067:
+	.align	2
+.L3066:
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlDeInit, .-FtlDeInit
+	.align	1
+	.global	rk_ftl_de_init
+	.thumb
+	.thumb_func
+	.type	rk_ftl_de_init, %function
+rk_ftl_de_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, lr}
+	.save {r3, lr}
+	bl	FlashDeInit
+	bl	FtlDeInit
+	pop	{r3, lr}
+	b	FlashDeInit
+	.fnend
+	.size	rk_ftl_de_init, .-rk_ftl_de_init
+	.align	1
+	.global	FtlDiscard
+	.thumb
+	.thumb_func
+	.type	FtlDiscard, %function
+FtlDiscard:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
+	.save {r4, r5, r6, r7, r8, r9, lr}
+	.pad #12
+	adds	r2, r0, r1
+	ldr	r7, .L3085
+	mov	r6, r0
+	mov	r5, r1
+	ldr	r3, [r7, #2940]
+	cmp	r2, r3
+	bhi	.L3077
+	cmp	r1, #31
+	bhi	.L3071
+.L3072:
+	movs	r0, #0
+	b	.L3070
+.L3071:
+	ldr	r3, .L3085+4
+	ldr	r2, [r3, #740]
+	mov	r8, r3
+	cmp	r2, #0
+	bne	.L3072
+	bl	FtlCacheWriteBack
+	ldrh	r4, [r7, #2904]
+	mov	r0, r6
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	smulbb	r3, r0, r4
+	mov	r9, r0
+	subs	r6, r6, r3
+	uxth	r6, r6
+	cbz	r6, .L3073
+	subs	r4, r4, r6
+	add	r9, r0, #1
+	cmp	r4, r5
+	it	cs
+	movcs	r4, r5
+	uxth	r4, r4
+	subs	r5, r5, r4
+.L3073:
+	ldr	r4, .L3085+8
+	mov	r3, #-1
+	str	r3, [sp, #4]
+.L3074:
+	ldrh	r3, [r7, #2904]
+	cmp	r5, r3
+	bcc	.L3084
+	mov	r0, r9
+	mov	r1, sp
+	movs	r2, #0
+	bl	log2phys
+	ldr	r3, [sp]
+	adds	r3, r3, #1
+	beq	.L3075
+	ldr	r3, [r4, #-60]
+	add	r1, sp, #4
+	movs	r2, #1
+	mov	r0, r9
+	adds	r3, r3, #1
+	str	r3, [r4, #-60]
+	ldr	r3, [r8, #956]
+	adds	r3, r3, #1
+	str	r3, [r8, #956]
+	bl	log2phys
+	ldr	r0, [sp]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L3075:
+	ldrh	r3, [r7, #2904]
+	add	r9, r9, #1
+	subs	r5, r5, r3
+	b	.L3074
+.L3084:
+	ldr	r3, .L3085+8
+	ldr	r2, [r3, #-60]
+	cmp	r2, #32
+	bls	.L3072
+	movs	r4, #0
+	str	r4, [r3, #-60]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L3072
+.L3077:
+	mov	r0, #-1
+.L3070:
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, pc}
+.L3086:
+	.align	2
+.L3085:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlDiscard, .-FtlDiscard
+	.align	1
+	.global	FtlGcFreeTempBlock
+	.thumb
+	.thumb_func
+	.type	FtlGcFreeTempBlock, %function
+FtlGcFreeTempBlock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L3124
+	ldr	r6, .L3124+4
+	ldr	r2, [r4, #740]
+	ldrh	r1, [r6, #2898]
+	cmp	r2, #0
+	bne	.L3122
+	ldrh	r5, [r4, #884]
+	movw	r7, #65535
+	cmp	r5, r7
+	bne	.L3090
+.L3099:
+	ldrh	r2, [r4, #884]
+	movw	r3, #65535
+	movs	r7, #0
+	ldr	r5, .L3124
+	cmp	r2, r3
+	str	r7, [r4, #1924]
+	beq	.L3122
+	bl	FtlCacheWriteBack
+	ldrb	r0, [r5, #891]	@ zero_extendqisi2
+	ldrh	r3, [r6, #2898]
+	mov	r10, #12
+	ldr	r2, [r5, #768]
+	ldrh	r1, [r5, #884]
+	smulbb	r3, r0, r3
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldr	r3, [r5, #972]
+	ldrh	r2, [r5, #1692]
+	add	r3, r3, r2
+	str	r3, [r5, #972]
+	b	.L3100
+.L3090:
+	cbz	r0, .L3093
+	ldr	r3, .L3124+8
+	ldrh	r0, [r3, #3000]
+	cmp	r0, r7
+	beq	.L3094
+.L3095:
+	movs	r1, #2
+	b	.L3093
+.L3094:
+	strh	r2, [r3, #3000]	@ movhi
+	ldrh	r3, [r4, #784]
+	cmp	r3, #17
+	bhi	.L3095
+.L3093:
+	ldr	r7, .L3124
+	add	r0, r7, #884
+	bl	FtlGcScanTempBlk
+	str	r0, [sp, #4]
+	adds	r0, r0, #1
+	beq	.L3096
+	ldr	r2, [r7, #748]
+	ldrh	r3, [r2, r5, lsl #1]
+	cmp	r3, #4
+	bls	.L3097
+	subs	r3, r3, #5
+	movs	r0, #1
+	strh	r3, [r2, r5, lsl #1]	@ movhi
+	bl	FtlEctTblFlush
+.L3097:
+	ldr	r3, [r4, #1924]
+	ldr	r2, .L3124
+	cbnz	r3, .L3098
+	ldr	r0, [sp, #4]
+	ldr	r3, [r2, #1224]
+	ubfx	r0, r0, #10, #16
+	adds	r3, r3, #1
+	str	r3, [r2, #1224]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+.L3098:
+	movs	r3, #0
+	str	r3, [r4, #1924]
+	b	.L3110
+.L3096:
+	ldr	r3, .L3124+8
+	ldrh	r2, [r3, #3000]
+	movw	r3, #65535
+	cmp	r2, r3
+	bne	.L3110
+	b	.L3099
+.L3103:
+	mul	r8, r10, r8
+	ldr	fp, [r5, #1688]
+	add	r1, sp, #4
+	movs	r2, #0
+	add	r9, fp, r8
+	ldr	r0, [r9, #8]
+	bl	log2phys
+	ldr	r3, [fp, r8]
+	ldr	r0, [sp, #4]
+	cmp	r0, r3
+	bne	.L3101
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	add	r1, r9, #4
+	movs	r2, #1
+	mov	r8, r0
+	ldr	r0, [r9, #8]
+	bl	log2phys
+	mov	r0, r8
+.L3121:
+	bl	decrement_vpc_count
+.L3102:
+	adds	r7, r7, #1
+.L3100:
+	ldrh	r3, [r4, #1692]
+	uxth	r8, r7
+	cmp	r3, r8
+	bhi	.L3103
+	b	.L3123
+.L3101:
+	ldr	r3, [r9, #4]
+	cmp	r0, r3
+	beq	.L3102
+	ldrh	r0, [r5, #884]
+	b	.L3121
+.L3123:
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	ldrb	r3, [r6, #76]	@ zero_extendqisi2
+	cbz	r3, .L3104
+	ldr	r3, .L3124
+	ldr	r0, .L3124+12
+	ldrh	r1, [r3, #884]
+	bl	printk
+.L3104:
+	ldrh	r0, [r4, #884]
+	ldr	r3, [r4, #768]
+	ldrh	r3, [r3, r0, lsl #1]
+	cbz	r3, .L3105
+	bl	INSERT_DATA_LIST
+	b	.L3106
+.L3105:
+	bl	INSERT_FREE_LIST
+.L3106:
+	movw	r3, #65535
+	strh	r3, [r4, #884]	@ movhi
+	movs	r3, #0
+	strh	r3, [r4, #1692]	@ movhi
+	strh	r3, [r4, #1684]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	r3, [r4, #948]
+	ldr	r5, .L3124
+	cbz	r3, .L3107
+	ldr	r3, [r5, #1008]
+	cmp	r3, #29
+	bhi	.L3107
+	ldrh	r3, [r5, #1060]
+	ldrh	r2, [r5, #784]
+	cmp	r2, r3
+	itt	cc
+	lslcc	r3, r3, #1
+	strhcc	r3, [r5, #1640]	@ movhi
+	movw	r3, #65535
+	strh	r3, [r4, #1076]	@ movhi
+	b	.L3122
+.L3107:
+	ldrh	r3, [r4, #1060]
+	ldrh	r1, [r4, #784]
+	ldr	r2, .L3124
+	add	r0, r3, r3, lsl #1
+	cmp	r1, r0, asr #2
+	ble	.L3122
+	ldrb	r0, [r6, #76]	@ zero_extendqisi2
+	movw	r1, #65535
+	strh	r1, [r2, #1076]	@ movhi
+	cbz	r0, .L3109
+	subs	r3, r3, #2
+	strh	r3, [r2, #1640]	@ movhi
+.L3122:
+	movs	r0, #0
+	b	.L3089
+.L3109:
+	movs	r3, #20
+	strh	r3, [r2, #1640]	@ movhi
+	b	.L3089
+.L3110:
+	movs	r0, #1
+.L3089:
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3125:
+	.align	2
+.L3124:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	.LANCHOR1
+	.word	.LC134
+	.fnend
+	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
+	.align	1
+	.global	Ftl_gc_temp_data_write_back
+	.thumb
+	.thumb_func
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3144
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	ldrb	r3, [r3, #76]	@ zero_extendqisi2
+	ldr	r5, .L3144+4
+	cbz	r3, .L3127
+	ldr	r3, [r5, #1656]
+	lsls	r4, r3, #31
+	bpl	.L3127
+	ldrh	r3, [r5, #888]
+	cbz	r3, .L3127
+.L3132:
+	movs	r0, #0
+	pop	{r4, r5, r6, r7, r8, pc}
+.L3127:
+	movs	r2, #0
+	ldr	r0, [r5, #1768]
+	ldr	r1, [r5, #1656]
+	movs	r6, #0
+	mov	r3, r2
+	ldr	r7, .L3144+4
+	bl	FlashProgPages
+	mov	r8, #36
+.L3129:
+	ldr	r1, [r5, #1656]
+	uxth	r3, r6
+	ldr	r4, .L3144+4
+	cmp	r3, r1
+	bcs	.L3143
+	mul	r3, r8, r3
+	ldr	r1, [r7, #1768]
+	adds	r6, r6, #1
+	adds	r2, r1, r3
+	ldr	r1, [r1, r3]
+	adds	r0, r1, #1
+	bne	.L3130
+	ldrh	r0, [r4, #884]
+	movs	r5, #0
+	ldr	r2, [r4, #768]
+	strh	r5, [r2, r0, lsl #1]	@ movhi
+	ldr	r2, [r4, #1224]
+	strh	r1, [r4, #884]	@ movhi
+	adds	r2, r2, #1
+	str	r2, [r4, #1224]
+	ldr	r2, [r4, #1768]
+	add	r3, r3, r2
+	ldr	r0, [r3, #4]
+	ubfx	r0, r0, #10, #16
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	bl	FtlGcPageVarInit
+	b	.L3142
+.L3130:
+	ldr	r3, [r2, #12]
+	ldr	r1, [r2, #4]
+	ldr	r0, [r3, #12]
+	ldr	r2, [r3, #8]
+	bl	FtlGcUpdatePage
+	b	.L3129
+.L3143:
+	ldr	r0, [r4, #1768]
+	bl	FtlGcBufFree
+	movs	r3, #0
+	str	r3, [r4, #1656]
+	ldrh	r3, [r4, #888]
+	cmp	r3, #0
+	bne	.L3132
+	movs	r0, #1
+	bl	FtlGcFreeTempBlock
+.L3142:
+	movs	r0, #1
+	pop	{r4, r5, r6, r7, r8, pc}
+.L3145:
+	.align	2
+.L3144:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
+	.align	1
+	.global	FtlGcPageRecovery
+	.thumb
+	.thumb_func
+	.type	FtlGcPageRecovery, %function
+FtlGcPageRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	ldr	r5, .L3148
+	ldr	r4, .L3148+4
+	ldrh	r1, [r5, #2898]
+	add	r0, r4, #884
+	bl	FtlGcScanTempBlk
+	ldrh	r2, [r4, #886]
+	ldrh	r3, [r5, #2898]
+	cmp	r2, r3
+	bcc	.L3146
+	add	r0, r4, #1864
+	bl	FtlMapBlkWriteDumpData
+	movs	r0, #0
+	bl	FtlGcFreeTempBlock
+	movs	r3, #0
+	str	r3, [r4, #1924]
+.L3146:
+	pop	{r3, r4, r5, pc}
+.L3149:
+	.align	2
+.L3148:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
+	.align	1
+	.global	FtlPowerLostRecovery
+	.thumb
+	.thumb_func
+	.type	FtlPowerLostRecovery, %function
+FtlPowerLostRecovery:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	movs	r5, #0
+	ldr	r4, .L3151
+	ldr	r3, .L3151+4
+	add	r6, r4, #788
+	add	r4, r4, #836
+	mov	r0, r6
+	str	r5, [r3, #-204]
+	bl	FtlRecoverySuperblock
+	mov	r0, r6
+	bl	FtlSlcSuperblockCheck
+	mov	r0, r4
+	bl	FtlRecoverySuperblock
+	mov	r0, r4
+	bl	FtlSlcSuperblockCheck
+	bl	FtlGcPageRecovery
+	movw	r0, #65535
+	bl	decrement_vpc_count
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L3152:
+	.align	2
+.L3151:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.fnend
+	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
+	.align	1
+	.global	Ftl_get_new_temp_ppa
+	.thumb
+	.thumb_func
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	movw	r3, #65535
+	ldr	r4, .L3156
+	ldrh	r2, [r4, #884]
+	cmp	r2, r3
+	beq	.L3154
+	ldrh	r3, [r4, #888]
+	cbnz	r3, .L3155
+.L3154:
+	bl	FtlCacheWriteBack
+	movs	r0, #0
+	movs	r5, #0
+	bl	FtlGcFreeTempBlock
+	ldr	r0, .L3156+4
+	strb	r5, [r4, #892]
+	bl	allocate_data_superblock
+	strh	r5, [r4, #1684]	@ movhi
+	strh	r5, [r4, #1692]	@ movhi
+	bl	l2p_flush
+	mov	r0, r5
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L3155:
+	ldr	r0, .L3156+4
+	pop	{r3, r4, r5, lr}
+	b	get_new_active_ppa
+.L3157:
+	.align	2
+.L3156:
+	.word	.LANCHOR2
+	.word	.LANCHOR2+884
+	.fnend
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	1
+	.global	rk_ftl_cache_write_back
+	.thumb
+	.thumb_func
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	b	FtlCacheWriteBack
+	.fnend
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	1
+	.global	ftl_fix_nand_power_lost_error
+	.thumb
+	.thumb_func
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 48
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3174
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	.pad #48
+	sub	sp, sp, #48
+	ldrb	r2, [r3, #76]	@ zero_extendqisi2
+	mov	r8, r3
+	cmp	r2, #0
+	beq	.L3159
+	ldr	r4, .L3174+4
+	movw	r7, #4097
+	ldr	r6, .L3174+8
+	ldr	r0, .L3174+12
+	ldr	r3, [r4, #768]
+	ldrh	r5, [r6, #-210]
+	mov	r1, r5
+	ldrh	r2, [r3, r5, lsl #1]
+	bl	printk
+	ldrh	r0, [r4, #788]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	r0, [r4, #836]
+	bl	FtlGcRefreshOpenBlock
+	add	r0, r4, #788
+	bl	allocate_new_data_superblock
+	add	r0, r4, #836
+	bl	allocate_new_data_superblock
+	lsl	r9, r5, #1
+.L3161:
+	subs	r7, r7, #1
+	beq	.L3165
+	movs	r0, #1
+	mov	r1, r0
+	bl	rk_ftl_garbage_collect
+	ldr	r3, [r4, #768]
+	ldrh	r3, [r3, r9]
+	cmp	r3, #0
+	bne	.L3161
+.L3165:
+	ldr	r3, [r4, #768]
+	mov	r1, r5
+	ldr	r0, .L3174+12
+	ldrh	r2, [r3, r5, lsl #1]
+	bl	printk
+	ldr	r3, [r4, #768]
+	ldrh	r7, [r3, r5, lsl #1]
+	cbnz	r7, .L3163
+	add	r0, sp, #48
+	mov	r10, #36
+	movw	r9, #65535
+	strh	r5, [r0, #-48]!	@ movhi
+	bl	make_superblock
+	ldr	r3, .L3174+4
+	ldrh	ip, [r8, #2828]
+	ldr	r8, [r3, #744]
+	mov	r3, r7
+	mov	lr, r3
+	add	r0, sp, #14
+.L3166:
+	uxth	r2, r3
+	cmp	r2, ip
+	bcs	.L3173
+	ldrh	r2, [r0, #2]!
+	cmp	r2, r9
+	beq	.L3167
+	mla	r1, r10, r7, r8
+	adds	r7, r7, #1
+	lsls	r2, r2, #10
+	uxth	r7, r7
+	str	r2, [r1, #4]
+	str	lr, [r1, #8]
+	str	lr, [r1, #12]
+.L3167:
+	adds	r3, r3, #1
+	b	.L3166
+.L3173:
+	ldr	r3, [r4, #768]
+	mov	r1, r5
+	ldr	r0, .L3174+16
+	ldrh	r2, [r3, r5, lsl #1]
+	bl	printk
+	movs	r1, #0
+	mov	r2, r7
+	ldr	r0, [r4, #744]
+	bl	FlashEraseBlocks
+	ldr	r0, [r4, #744]
+	movs	r1, #1
+	mov	r2, r7
+	bl	FlashEraseBlocks
+.L3163:
+	movw	r3, #65535
+	strh	r3, [r6, #-210]	@ movhi
+.L3159:
+	add	sp, sp, #48
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L3175:
+	.align	2
+.L3174:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LC135
+	.word	.LC136
+	.fnend
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.align	1
+	.global	FtlSysBlkInit
+	.thumb
+	.thumb_func
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	movs	r3, #0
+	ldr	r5, .L3196
+	movw	r6, #65535
+	ldr	r7, .L3196+4
+	ldr	r4, .L3196+8
+	ldrh	r0, [r5, #2832]
+	strh	r3, [r7, #-208]	@ movhi
+	strh	r6, [r7, #-210]	@ movhi
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	r3, [r4, #1064]
+	cmp	r3, r6
+	bne	.L3177
+.L3179:
+	mov	r6, #-1
+	b	.L3178
+.L3177:
+	bl	FtlLoadSysInfo
+	mov	r6, r0
+	cmp	r0, #0
+	bne	.L3179
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	movs	r0, #1
+	bl	FtlUpdateVaildLpn
+	ldrh	r1, [r5, #2938]
+	ldr	r2, [r4, #932]
+	movs	r0, #12
+	mov	r3, r6
+.L3180:
+	cmp	r3, r1
+	bge	.L3185
+	mla	lr, r0, r3, r2
+	ldr	lr, [lr, #4]
+	cmp	lr, #0
+	bge	.L3181
+.L3185:
+	ldrh	r2, [r4, #1040]
+	cmp	r3, r1
+	add	r2, r2, #1
+	strh	r2, [r4, #1040]	@ movhi
+	bge	.L3195
+	b	.L3182
+.L3181:
+	adds	r3, r3, #1
+	b	.L3180
+.L3195:
+	ldrh	r3, [r7, #-208]
+	cmp	r3, #0
+	beq	.L3186
+.L3182:
+	ldr	r0, .L3196+12
+	bl	FtlSuperblockPowerLostFix
+	ldr	r0, .L3196+16
+	bl	FtlSuperblockPowerLostFix
+	ldrh	r1, [r4, #788]
+	ldr	r2, [r4, #768]
+	ldrh	r0, [r4, #792]
+	ldrh	r3, [r2, r1, lsl #1]
+	subs	r3, r3, r0
+	strh	r3, [r2, r1, lsl #1]	@ movhi
+	ldr	r1, [r4, #768]
+	ldrh	r3, [r5, #2898]
+	ldrh	r0, [r4, #836]
+	ldrh	r7, [r4, #840]
+	strh	r3, [r4, #790]	@ movhi
+	movs	r3, #0
+	strb	r3, [r4, #794]
+	strh	r3, [r4, #792]	@ movhi
+	ldrh	r2, [r1, r0, lsl #1]
+	subs	r2, r2, r7
+	strh	r2, [r1, r0, lsl #1]	@ movhi
+	ldrh	r2, [r5, #2898]
+	ldr	r0, .L3196+20
+	strb	r3, [r4, #842]
+	strh	r2, [r4, #838]	@ movhi
+	strh	r3, [r4, #840]	@ movhi
+	bl	FtlMapBlkWriteDumpData
+	ldr	r0, .L3196+24
+	bl	FtlMapBlkWriteDumpData
+	ldrh	r3, [r4, #1042]
+	adds	r3, r3, #1
+	strh	r3, [r4, #1042]	@ movhi
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+.L3186:
+	ldrh	r2, [r4, #788]
+	movw	r3, #65535
+	ldr	r5, .L3196+8
+	cmp	r2, r3
+	bne	.L3187
+.L3189:
+	ldrh	r3, [r4, #1040]
+	lsls	r3, r3, #27
+	bne	.L3178
+	bl	FtlVpcCheckAndModify
+	b	.L3178
+.L3187:
+	ldrh	r3, [r5, #792]
+	cmp	r3, #0
+	bne	.L3189
+	ldrh	r3, [r5, #840]
+	cmp	r3, #0
+	bne	.L3189
+	bl	FtlVpcTblFlush
+	ldrh	r0, [r5, #788]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	r0, [r5, #836]
+	bl	FtlGcRefreshOpenBlock
+	add	r0, r5, #788
+	bl	allocate_new_data_superblock
+	add	r0, r5, #836
+	bl	allocate_new_data_superblock
+	addw	r0, r5, #4088
+	bl	FtlMapBlkWriteDumpData
+	mov	r5, #4096
+.L3190:
+	movs	r0, #1
+	mov	r1, r0
+	bl	rk_ftl_garbage_collect
+	subs	r5, r5, #1
+	bne	.L3190
+	b	.L3189
+.L3178:
+	mov	r0, r6
+	pop	{r3, r4, r5, r6, r7, pc}
+.L3197:
+	.align	2
+.L3196:
+	.word	.LANCHOR0
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.word	.LANCHOR2+788
+	.word	.LANCHOR2+836
+	.word	.LANCHOR2+1864
+	.word	.LANCHOR2+4088
+	.fnend
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.align	1
+	.global	FtlInit
+	.thumb
+	.thumb_func
+	.type	FtlInit, %function
+FtlInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r4, r0
+	ldr	r2, .L3212
+	mov	r3, #-1
+	ldr	r6, .L3212+4
+	ldr	r5, .L3212+8
+	ldr	r1, .L3212+12
+	ldr	r0, .L3212+16
+	str	r3, [r6, #504]
+	movs	r3, #0
+	str	r3, [r2, #-56]
+	str	r3, [r5, #740]
+	bl	printk
+	mov	r0, r4
+	ldr	r4, .L3212+20
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	r0, [r4, #2832]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	r0, .L3199
+	ldr	r0, .L3212+24
+	b	.L3211
+.L3199:
+	bl	FtlSysBlkInit
+	cbz	r0, .L3201
+	ldr	r0, .L3212+28
+.L3211:
+	ldr	r1, .L3212+32
+	bl	printk
+	b	.L3200
+.L3201:
+	movs	r1, #1
+	str	r1, [r6, #504]
+	bl	rk_ftl_garbage_collect
+	ldrh	r3, [r5, #784]
+	cmp	r3, #15
+	bhi	.L3202
+	mov	r4, #1024
+.L3203:
+	movs	r0, #1
+	mov	r1, r0
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L3203
+	b	.L3200
+.L3202:
+	ldrb	r3, [r4, #76]	@ zero_extendqisi2
+	cbz	r3, .L3200
+	movs	r4, #128
+.L3205:
+	movs	r0, #1
+	mov	r1, r0
+	bl	rk_ftl_garbage_collect
+	subs	r4, r4, #1
+	bne	.L3205
+.L3200:
+	movs	r0, #0
+	pop	{r4, r5, r6, pc}
+.L3213:
+	.align	2
+.L3212:
+	.word	.LANCHOR4
+	.word	.LANCHOR1
+	.word	.LANCHOR2
+	.word	.LC75
+	.word	.LC74
+	.word	.LANCHOR0
+	.word	.LC137
+	.word	.LC138
+	.word	.LANCHOR3+40
+	.fnend
+	.size	FtlInit, .-FtlInit
+	.align	1
+	.global	rk_ftl_init
+	.thumb
+	.thumb_func
+	.type	rk_ftl_init, %function
+rk_ftl_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r0, #2048
+	bl	ftl_malloc
+	ldr	r6, .L3218
+	ldr	r4, .L3218+4
+	movs	r5, #0
+	mov	r1, r6
+	str	r5, [r1, #-48]!
+	str	r5, [r4, #3980]
+	str	r0, [r6, #-52]
+	addw	r0, r4, #3980
+	bl	rknand_get_reg_addr
+	ldr	r3, [r4, #3980]
+	cbz	r3, .L3217
+	bl	rk_nandc_irq_init
+	mov	r1, r5
+	mov	r2, r5
+	mov	r3, #2048
+	ldr	r0, [r6, #-52]
+	bl	FlashSramLoadStore
+	bl	rknand_flash_cs_init
+	ldr	r0, [r4, #3980]
+	bl	FlashInit
+	mov	r4, r0
+	cbnz	r0, .L3216
+	ldr	r0, .L3218+8
+	bl	FtlInit
+.L3216:
+	mov	r1, r4
+	ldr	r0, .L3218+12
+	bl	printk
+	mov	r0, r4
+	pop	{r4, r5, r6, pc}
+.L3217:
+	mov	r0, #-1
+	pop	{r4, r5, r6, pc}
+.L3219:
+	.align	2
+.L3218:
+	.word	.LANCHOR4
+	.word	.LANCHOR2
+	.word	.LANCHOR0+1864
+	.word	.LC139
+	.fnend
+	.size	rk_ftl_init, .-rk_ftl_init
+	.align	1
+	.global	FtlRead
+	.thumb
+	.thumb_func
+	.type	FtlRead, %function
+FtlRead:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 56
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	cmp	r0, #16
+	.pad #60
+	sub	sp, sp, #60
+	mov	r6, r1
+	mov	r7, r3
+	str	r2, [sp, #16]
+	bne	.L3221
+	add	r0, r1, #256
+	mov	r1, r2
+	mov	r2, r3
+	bl	FtlVendorPartRead
+	b	.L3222
+.L3221:
+	ldr	r3, [sp, #16]
+	adds	r3, r1, r3
+	str	r3, [sp, #12]
+	ldr	r3, .L3261
+	ldr	r1, [sp, #12]
+	ldr	r2, [r3, #2940]
+	cmp	r1, r2
+	bhi	.L3242
+	ldrh	r4, [r3, #2904]
+	mov	r0, r6
+	mov	r1, r4
+	bl	__aeabi_uidiv
+	mov	r1, r4
+	ldr	r3, [sp, #12]
+	str	r0, [sp, #4]
+	subs	r0, r3, #1
+	bl	__aeabi_uidiv
+	ldr	r3, [sp, #4]
+	ldr	r1, [sp, #16]
+	rsb	r3, r3, #1
+	str	r0, [sp, #8]
+	add	r3, r3, r0
+	str	r3, [sp]
+	ldr	r3, .L3261+4
+	ldr	r0, [sp, #4]
+	ldr	r2, [r3, #980]
+	add	r2, r2, r1
+	ldr	r1, [sp]
+	str	r2, [r3, #980]
+	ldr	r2, [r3, #952]
+	add	r2, r2, r1
+	ldr	r1, [sp, #8]
+	str	r2, [r3, #952]
+	bl	FtlCacheMetchLpa
+	cbz	r0, .L3223
+	bl	FtlCacheWriteBack
+.L3223:
+	mov	r9, #0
+	ldr	r4, [sp, #4]
+	ldr	r10, .L3261+4
+	ldr	r8, .L3261
+	mov	r5, r9
+	str	r9, [sp, #20]
+	str	r9, [sp, #24]
+.L3224:
+	ldr	r3, [sp]
+	cmp	r3, #0
+	beq	.L3260
+	add	r1, sp, #52
+	movs	r2, #0
+	mov	r0, r4
+	bl	log2phys
+	ldr	r2, [sp, #52]
+	adds	r1, r2, #1
+	bne	.L3257
+	mov	fp, #0
+.L3225:
+	ldrh	r0, [r8, #2904]
+	cmp	fp, r0
+	bcs	.L3229
+	mla	r0, r0, r4, fp
+	cmp	r0, r6
+	bcc	.L3227
+	ldr	r3, [sp, #12]
+	cmp	r0, r3
+	bcs	.L3227
+	subs	r0, r0, r6
+	mov	r1, #512
+	add	r0, r7, r0, lsl #9
+	bl	__memzero
+.L3227:
+	add	fp, fp, #1
+	b	.L3225
+.L3257:
+	ldr	r1, [r10, #1764]
+	mov	fp, #36
+	ldr	r3, [sp, #4]
+	mla	fp, fp, r5, r1
+	cmp	r4, r3
+	str	r2, [fp, #4]
+	bne	.L3230
+	ldr	r2, [r10, #1788]
+	mov	r0, r6
+	str	r2, [fp, #8]
+	ldrh	r2, [r8, #2904]
+	mov	r1, r2
+	str	r2, [sp, #20]
+	bl	__aeabi_uidivmod
+	ldr	r2, [sp, #20]
+	ldr	r0, [sp, #16]
+	str	r1, [sp, #28]
+	subs	r1, r2, r1
+	cmp	r1, r0
+	mov	r3, r1
+	it	cs
+	movcs	r3, r0
+	cmp	r3, r2
+	str	r3, [sp, #20]
+	bne	.L3231
+	str	r7, [fp, #8]
+	b	.L3231
+.L3230:
+	ldr	r3, [sp, #8]
+	cmp	r4, r3
+	bne	.L3232
+	ldr	r2, [r10, #1792]
+	ldrh	r1, [r8, #2904]
+	ldr	r3, [sp, #12]
+	str	r2, [fp, #8]
+	mul	r2, r1, r4
+	rsb	r9, r2, r3
+	cmp	r9, r1
+	bne	.L3231
+	b	.L3258
+.L3232:
+	ldrh	r2, [r8, #2904]
+	muls	r2, r4, r2
+.L3258:
+	subs	r2, r2, r6
+	add	r2, r7, r2, lsl #9
+	str	r2, [fp, #8]
+.L3231:
+	ldrh	r2, [r8, #2910]
+	ldr	r1, [r10, #1800]
+	str	r4, [fp, #16]
+	muls	r2, r5, r2
+	adds	r5, r5, #1
+	bic	r2, r2, #3
+	add	r2, r2, r1
+	str	r2, [fp, #12]
+.L3229:
+	ldr	r3, [sp]
+	adds	r4, r4, #1
+	subs	r3, r3, #1
+	str	r3, [sp]
+	beq	.L3233
+	ldrh	r2, [r8, #2828]
+	cmp	r5, r2, lsl #3
+	bne	.L3224
+.L3233:
+	cmp	r5, #0
+	beq	.L3224
+	ldr	r0, [r10, #1764]
+	mov	r1, r5
+	movs	r2, #0
+	mov	fp, #0
+	bl	FlashReadPages
+	ldr	r3, [sp, #28]
+	lsls	r3, r3, #9
+	str	r3, [sp, #32]
+	ldr	r3, [sp, #20]
+	lsls	r3, r3, #9
+	str	r3, [sp, #36]
+	lsl	r3, r9, #9
+	str	r3, [sp, #40]
+.L3239:
+	movs	r3, #36
+	ldr	r2, [r10, #1764]
+	mul	ip, r3, fp
+	ldr	r3, [sp, #4]
+	add	r2, r2, ip
+	ldr	r1, [r2, #16]
+	cmp	r1, r3
+	bne	.L3235
+	ldr	r1, [r2, #8]
+	ldr	r2, [r10, #1788]
+	cmp	r1, r2
+	bne	.L3236
+	ldr	r3, [sp, #32]
+	mov	r0, r7
+	str	ip, [sp, #44]
+	add	r1, r1, r3
+	ldr	r2, [sp, #36]
+	b	.L3259
+.L3235:
+	ldr	r3, [sp, #8]
+	cmp	r1, r3
+	bne	.L3236
+	ldr	r1, [r2, #8]
+	ldr	r2, [r10, #1792]
+	cmp	r1, r2
+	bne	.L3236
+	ldrh	r0, [r8, #2904]
+	ldr	r2, [sp, #40]
+	str	ip, [sp, #44]
+	muls	r0, r3, r0
+	subs	r0, r0, r6
+	add	r0, r7, r0, lsl #9
+.L3259:
+	bl	ftl_memcpy
+	ldr	ip, [sp, #44]
+.L3236:
+	ldr	r2, [r10, #1764]
+	add	lr, r2, ip
+	ldr	r0, [r2, ip]
+	adds	r3, r0, #1
+	itttt	eq
+	streq	r0, [sp, #24]
+	ldreq	r1, [r10, #1200]
+	addeq	r1, r1, #1
+	streq	r1, [r10, #1200]
+	ldr	r2, [r2, ip]
+	cmp	r2, #256
+	bne	.L3238
+	ldr	r0, [lr, #4]
+	ubfx	r0, r0, #10, #16
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L3238:
+	add	fp, fp, #1
+	cmp	fp, r5
+	bne	.L3239
+	movs	r5, #0
+	b	.L3224
+.L3260:
+	ldr	r3, .L3261+4
+	ldrh	r3, [r3, #1698]
+	cbz	r3, .L3241
+	ldr	r0, [sp]
+	movs	r1, #1
+	bl	rk_ftl_garbage_collect
+.L3241:
+	ldr	r0, [sp, #24]
+	b	.L3222
+.L3242:
+	mov	r0, #-1
+.L3222:
+	add	sp, sp, #60
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3262:
+	.align	2
+.L3261:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlRead, .-FtlRead
+	.align	1
+	.global	FtlWrite
+	.thumb
+	.thumb_func
+	.type	FtlWrite, %function
+FtlWrite:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r5, .L3334
+	mov	r8, r1
+	str	r3, [sp, #8]
+	mov	fp, r2
+	ldr	r3, [r5, #740]
+	cmp	r3, #0
+	bne	.L3305
+	cmp	r0, #16
+	bne	.L3265
+	add	r0, r1, #256
+	mov	r1, r2
+	ldr	r2, [sp, #8]
+	bl	FtlVendorPartWrite
+	b	.L3264
+.L3265:
+	ldr	r10, .L3334+8
+	adds	r7, r1, r2
+	ldr	r3, [r10, #2940]
+	cmp	r7, r3
+	bhi	.L3306
+	ldrh	r4, [r10, #2904]
+	mov	r3, #2048
+	ldr	r6, .L3334+4
+	mov	r0, r1
+	mov	r1, r4
+	str	r3, [r6, #-44]
+	bl	__aeabi_uidiv
+	mov	r1, r4
+	str	r0, [sp, #4]
+	subs	r0, r7, #1
+	bl	__aeabi_uidiv
+	cmp	fp, r4, lsl #1
+	add	r7, r5, #788
+	ldr	r2, [sp, #4]
+	str	r0, [sp, #20]
+	rsb	r9, r2, r0
+	add	r3, r9, #1
+	str	r3, [sp, #12]
+	ldr	r2, [sp, #12]
+	ldr	r3, [r5, #960]
+	add	r3, r3, r2
+	ldr	r2, [r10, #2952]
+	str	r3, [r5, #960]
+	ldr	r3, [r5, #976]
+	add	r3, r3, fp
+	str	r3, [r5, #976]
+	ite	cs
+	movcs	r3, #1
+	movcc	r3, #0
+	str	r3, [sp, #28]
+	add	r3, r5, #836
+	cmp	fp, #8
+	it	ls
+	movls	r7, r3
+	cmp	r2, #0
+	beq	.L3268
+	movs	r3, #36
+	ldr	r7, [r10, #2956]
+	muls	r3, r2, r3
+	ldr	r2, [sp, #4]
+	subs	r3, r3, #36
+	add	r7, r7, r3
+	ldr	r3, [r7, #16]
+	cmp	r2, r3
+	bne	.L3269
+	ldr	r3, [r5, #964]
+	mov	r1, r4
+	mov	r0, r8
+	adds	r3, r3, #1
+	str	r3, [r5, #964]
+	ldr	r3, [r6, #-40]
+	adds	r3, r3, #1
+	str	r3, [r6, #-40]
+	bl	__aeabi_uidivmod
+	ldr	r0, [r7, #8]
+	subs	r4, r4, r1
+	add	r0, r0, r1, lsl #9
+	cmp	r4, fp
+	ldr	r1, [sp, #8]
+	it	cs
+	movcs	r4, fp
+	lsls	r5, r4, #9
+	mov	r2, r5
+	bl	ftl_memcpy
+	cmp	r9, #0
+	bne	.L3270
+	ldr	r3, [r6, #-40]
+	cmp	r3, #2
+	ble	.L3305
+.L3270:
+	ldr	r3, [sp, #8]
+	rsb	fp, r4, fp
+	add	r8, r8, r4
+	str	r9, [sp, #12]
+	add	r3, r3, r5
+	str	r3, [sp, #8]
+	ldr	r3, [sp, #4]
+	adds	r3, r3, #1
+	str	r3, [sp, #4]
+.L3269:
+	ldr	r3, .L3334+4
+	movs	r2, #0
+	ldr	r7, [r3, #-64]
+	str	r2, [r3, #-40]
+.L3268:
+	ldr	r0, [sp, #4]
+	ldr	r1, [sp, #20]
+	bl	FtlCacheMetchLpa
+	cbz	r0, .L3271
+	bl	FtlCacheWriteBack
+.L3271:
+	ldr	r4, .L3334+8
+	ldr	r3, .L3334+4
+	ldr	r6, [sp, #4]
+	mov	r10, r4
+	str	r7, [r3, #-64]
+.L3272:
+	ldr	r3, [sp, #12]
+	ldr	r5, .L3334
+	cmp	r3, #0
+	beq	.L3333
+	ldrh	r3, [r7, #4]
+	cbnz	r3, .L3273
+	add	r2, r5, #788
+	ldr	r9, .L3334+20
+	cmp	r7, r2
+	bne	.L3274
+	ldrh	r7, [r5, #840]
+	cbnz	r7, .L3275
+	add	r0, r5, #836
+	bl	allocate_new_data_superblock
+	str	r7, [r9, #3004]
+.L3275:
+	ldr	r0, .L3334+12
+	bl	allocate_new_data_superblock
+	ldr	r3, [r9, #3004]
+	cbnz	r3, .L3308
+.L3277:
+	ldr	r7, .L3334+12
+	b	.L3276
+.L3274:
+	str	r3, [r9, #3004]
+	ldrh	r3, [r5, #792]
+	cmp	r3, #0
+	bne	.L3277
+	mov	r0, r7
+	bl	allocate_new_data_superblock
+	b	.L3276
+.L3308:
+	ldr	r7, .L3334+16
+.L3276:
+	ldrh	r3, [r7, #4]
+	cbnz	r3, .L3278
+	mov	r0, r7
+	bl	allocate_new_data_superblock
+.L3278:
+	ldr	r3, .L3334+4
+	str	r7, [r3, #-64]
+.L3273:
+	ldr	r2, [r5, #1760]
+	ldr	r3, [r4, #2952]
+	ldrh	ip, [r7, #4]
+	subs	r3, r2, r3
+	ldr	r2, [sp, #12]
+	cmp	ip, r3
+	ldr	r9, .L3334
+	it	cs
+	movcs	ip, r3
+	cmp	ip, r2
+	mov	r3, ip
+	it	cs
+	movcs	r3, r2
+	str	r3, [sp, #44]
+	movs	r3, #0
+	str	r3, [sp, #24]
+.L3279:
+	ldr	r3, [sp, #24]
+	ldr	r2, [sp, #44]
+	cmp	r3, r2
+	beq	.L3280
+	ldrh	r3, [r7, #4]
+	cmp	r3, #0
+	beq	.L3280
+	ldr	r3, [sp, #28]
+	cbz	r3, .L3281
+	ldr	r3, [sp, #20]
+	cmp	r6, r3
+	bne	.L3281
+	ldr	r3, [sp, #24]
+	cbz	r3, .L3281
+	ldrh	r2, [r4, #2904]
+	add	r3, r8, fp
+	mls	r3, r2, r6, r3
+	cmp	r3, r2
+	bne	.L3280
+.L3281:
+	add	r1, sp, #48
+	movs	r2, #0
+	mov	r0, r6
+	movs	r5, #36
+	bl	log2phys
+	mov	r0, r7
+	bl	get_new_active_ppa
+	ldr	r3, [r4, #2952]
+	ldr	r1, [r4, #2956]
+	ldrh	r2, [r4, #2910]
+	mla	r1, r5, r3, r1
+	mul	ip, r3, r2
+	str	r6, [r1, #16]
+	str	r0, [r1, #4]
+	lsr	r0, ip, #2
+	str	r0, [sp, #36]
+	ldr	r0, [r9, #1804]
+	mov	lr, r0
+	str	r0, [sp, #40]
+	ldr	r0, [sp, #36]
+	add	r0, lr, r0, lsl #2
+	ldrh	lr, [r4, #2908]
+	str	r0, [sp, #16]
+	str	r0, [r1, #12]
+	mul	r3, r3, lr
+	ldr	r0, [r9, #1784]
+	bic	r3, r3, #3
+	add	r3, r3, r0
+	ldr	r0, [sp, #16]
+	str	r3, [r1, #8]
+	movs	r1, #0
+	bl	ftl_memset
+	ldr	r3, [sp, #4]
+	cmp	r6, r3
+	beq	.L3282
+	ldr	r3, [sp, #20]
+	cmp	r6, r3
+	bne	.L3330
+	ldrh	r3, [r4, #2904]
+	add	r5, r8, fp
+	smulbb	r3, r3, r6
+	subs	r5, r5, r3
+	movs	r3, #0
+	str	r3, [sp, #32]
+	uxth	r5, r5
+	b	.L3285
+.L3282:
+	ldrh	r5, [r4, #2904]
+	mov	r0, r8
+	mov	r1, r5
+	bl	__aeabi_uidivmod
+	subs	r5, r5, r1
+	str	r1, [sp, #32]
+	cmp	r5, fp
+	it	cs
+	movcs	r5, fp
+.L3285:
+	ldrh	r3, [r4, #2904]
+	cmp	r5, r3
+	bne	.L3286
+	ldr	r3, [sp, #4]
+	mov	lr, #36
+	cmp	r6, r3
+	ittet	ne
+	mulne	r1, r6, r5
+	ldrne	r3, [sp, #8]
+	ldreq	r1, [sp, #8]
+	rsbne	r1, r8, r1
+	it	ne
+	addne	r1, r3, r1, lsl #9
+	ldr	r3, [sp, #28]
+	cbz	r3, .L3288
+	ldr	r2, [r10, #2952]
+	ldr	r5, [r10, #2956]
+	mla	r2, lr, r2, r5
+	str	r1, [r2, #8]
+	b	.L3289
+.L3288:
+	ldr	r0, [r10, #2956]
+	ldr	r3, [r10, #2952]
+	ldrh	r2, [r10, #2908]
+	mla	r3, lr, r3, r0
+	ldr	r0, [r3, #8]
+	b	.L3331
+.L3335:
+	.align	2
+.L3334:
+	.word	.LANCHOR2
+	.word	.LANCHOR4
+	.word	.LANCHOR0
+	.word	.LANCHOR2+788
+	.word	.LANCHOR2+836
+	.word	.LANCHOR1
+.L3286:
+	ldr	r2, [sp, #48]
+	movs	r3, #36
+	adds	r1, r2, #1
+	beq	.L3290
+	ldr	r1, [r4, #2956]
+	add	r0, sp, #52
+	str	r2, [sp, #56]
+	ldr	r2, [r4, #2952]
+	str	r6, [sp, #68]
+	mla	r3, r3, r2, r1
+	movs	r1, #1
+	ldr	r2, [r3, #8]
+	ldr	r3, [r3, #12]
+	str	r2, [sp, #60]
+	movs	r2, #0
+	str	r3, [sp, #64]
+	bl	FlashReadPages
+	ldr	r3, [sp, #52]
+	adds	r3, r3, #1
+	bne	.L3291
+	ldr	r3, [r9, #1200]
+	adds	r3, r3, #1
+	str	r3, [r9, #1200]
+	b	.L3293
+.L3291:
+	ldr	r3, [sp, #16]
+	ldr	r3, [r3, #8]
+	cmp	r3, r6
+	beq	.L3293
+	ldr	r3, [r9, #1200]
+	mov	r2, r6
+	ldr	r0, .L3336
+	adds	r3, r3, #1
+	str	r3, [r9, #1200]
+	ldr	r3, [sp, #16]
+	ldr	r1, [r3, #8]
+	bl	printk
+	b	.L3293
+.L3290:
+	ldr	r1, [r4, #2956]
+	ldr	r2, [r4, #2952]
+	mla	r2, r3, r2, r1
+	movs	r1, #0
+	ldr	r0, [r2, #8]
+	ldrh	r2, [r4, #2908]
+	bl	ftl_memset
+.L3293:
+	ldr	r3, [sp, #4]
+	mov	lr, #36
+	lsls	r2, r5, #9
+	cmp	r6, r3
+	bne	.L3294
+	ldr	r1, [r4, #2952]
+	ldr	r5, [r4, #2956]
+	ldr	r3, [sp, #32]
+	mla	r1, lr, r1, r5
+	ldr	r0, [r1, #8]
+	ldr	r1, [sp, #8]
+	add	r0, r0, r3, lsl #9
+	b	.L3331
+.L3294:
+	ldr	r0, [r4, #2956]
+	ldr	r3, [r4, #2952]
+	ldrh	r1, [r4, #2904]
+	mla	r3, lr, r3, r0
+	muls	r1, r6, r1
+	ldr	r0, [r3, #8]
+	rsb	r1, r8, r1
+	ldr	r3, [sp, #8]
+	add	r1, r3, r1, lsl #9
+	b	.L3331
+.L3330:
+	ldr	r3, [sp, #28]
+	cbz	r3, .L3295
+	ldr	r3, [r4, #2952]
+	ldr	r2, [r4, #2956]
+	mla	r5, r5, r3, r2
+	ldrh	r3, [r4, #2904]
+	ldr	r2, [sp, #8]
+	muls	r3, r6, r3
+	rsb	r3, r8, r3
+	add	r3, r2, r3, lsl #9
+	str	r3, [r5, #8]
+	b	.L3289
+.L3295:
+	ldr	r2, [r4, #2956]
+	ldr	r3, [r4, #2952]
+	ldrh	r1, [r4, #2904]
+	mla	r3, r5, r3, r2
+	ldrh	r2, [r4, #2908]
+	muls	r1, r6, r1
+	ldr	r0, [r3, #8]
+	rsb	r1, r8, r1
+	ldr	r3, [sp, #8]
+	add	r1, r3, r1, lsl #9
+.L3331:
+	bl	ftl_memcpy
+.L3289:
+	ldr	r2, [sp, #40]
+	movw	r3, #61589
+	ldr	r1, [sp, #36]
+	strh	r3, [r2, r1, lsl #2]	@ movhi
+	ldr	r2, [sp, #16]
+	ldr	r3, [r9, #988]
+	str	r3, [r2, #4]
+	adds	r3, r3, #1
+	adds	r2, r3, #1
+	ldr	r2, [sp, #16]
+	it	eq
+	moveq	r3, #0
+	str	r3, [r9, #988]
+	ldr	r3, [sp, #16]
+	str	r6, [r3, #8]
+	adds	r6, r6, #1
+	ldr	r3, [sp, #48]
+	str	r3, [r2, #12]
+	ldrh	r3, [r7]
+	strh	r3, [r2, #2]	@ movhi
+	ldr	r3, [r4, #2952]
+	adds	r3, r3, #1
+	str	r3, [r4, #2952]
+	ldr	r3, [sp, #24]
+	adds	r3, r3, #1
+	str	r3, [sp, #24]
+	b	.L3279
+.L3280:
+	ldr	r3, [sp, #12]
+	ldr	r2, [sp, #24]
+	subs	r3, r3, r2
+	str	r3, [sp, #12]
+	ldr	r3, .L3336+4
+	ldr	r2, [r10, #2952]
+	ldr	r3, [r3, #1760]
+	cmp	r2, r3
+	bcs	.L3299
+	ldr	r3, [sp, #28]
+	cbnz	r3, .L3299
+	ldrh	r3, [r7, #4]
+	cbz	r3, .L3299
+.L3301:
+	movs	r3, #0
+	str	r3, [sp, #28]
+	b	.L3272
+.L3299:
+	bl	FtlCacheWriteBack
+	movs	r3, #0
+	str	r3, [r10, #2952]
+	ldr	r3, [sp, #12]
+	cmp	r3, #3
+	bls	.L3301
+	b	.L3272
+.L3333:
+	mov	r0, r3
+	ldr	r2, [sp, #4]
+	ldr	r3, [sp, #20]
+	subs	r1, r3, r2
+	bl	rk_ftl_garbage_collect
+	ldrh	r3, [r5, #784]
+	cmp	r3, #31
+	bhi	.L3305
+	movs	r4, #16
+	movs	r3, #128
+	strh	r3, [r5, #1642]	@ movhi
+	strh	r3, [r5, #1640]	@ movhi
+.L3304:
+	movs	r0, #0
+	movs	r1, #1
+	bl	rk_ftl_garbage_collect
+	ldr	r3, [r5, #740]
+	cbnz	r3, .L3305
+	subs	r4, r4, #1
+	bne	.L3304
+	b	.L3305
+.L3306:
+	mov	r0, #-1
+	b	.L3264
+.L3305:
+	movs	r0, #0
+.L3264:
+	add	sp, sp, #92
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3337:
+	.align	2
+.L3336:
+	.word	.LC140
+	.word	.LANCHOR2
+	.fnend
+	.size	FtlWrite, .-FtlWrite
+	.align	1
+	.global	StorageSysDataStore
+	.thumb
+	.thumb_func
+	.type	StorageSysDataStore, %function
+StorageSysDataStore:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, lr}
+	.save {r3, r4, r5, lr}
+	mov	r4, r1
+	mov	r5, r0
+	bl	rknand_device_lock
+	mov	r3, r4
+	add	r1, r5, #256
+	movs	r2, #1
+	movs	r0, #16
+	bl	FtlWrite
+	mov	r4, r0
+	bl	rknand_device_unlock
+	mov	r0, r4
+	pop	{r3, r4, r5, pc}
+	.fnend
+	.size	StorageSysDataStore, .-StorageSysDataStore
+	.align	1
+	.global	FlashReadFacBbtData
+	.thumb
+	.thumb_func
+	.type	FlashReadFacBbtData, %function
+FlashReadFacBbtData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 40
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3353
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r8, r2
+	ldrh	r2, [r3, #1876]
+	mov	r7, r1
+	ldrh	r3, [r3, #1878]
+	.pad #40
+	sub	sp, sp, #40
+	mov	r5, r0
+	smulbb	r3, r2, r3
+	ldr	r2, .L3353+4
+	ldr	r1, [r2, #3984]
+	mov	r9, r2
+	uxth	r3, r3
+	subs	r6, r3, #1
+	str	r1, [sp, #12]
+	mul	r10, r3, r7
+	ldr	r1, [r2, #4016]
+	uxth	r6, r6
+	sub	r4, r3, #16
+	str	r1, [sp, #16]
+.L3340:
+	cmp	r6, r4
+	ble	.L3352
+	movs	r1, #1
+	add	r3, r6, r10
+	add	r0, sp, #4
+	mov	r2, r1
+	lsls	r3, r3, #10
+	str	r3, [sp, #8]
+	bl	FlashReadPages
+	ldr	r3, [sp, #4]
+	adds	r3, r3, #1
+	beq	.L3341
+	ldr	r3, [r9, #4016]
+	ldrh	r2, [r3]
+	movw	r3, #61664
+	cmp	r2, r3
+	bne	.L3341
+	cbz	r5, .L3347
+	cbz	r7, .L3348
+.L3345:
+	ldr	r1, [r9, #3984]
+	mov	r2, r8
+	mov	r0, r5
+	bl	ftl_memcpy
+	movs	r2, #4
+	ldr	r0, .L3353+8
+	mov	r1, r5
+	mov	r3, r2
+	bl	rknand_print_hex
+	movs	r0, #0
+	b	.L3342
+.L3348:
+	ldr	r6, .L3353+4
+	mov	lr, #1
+.L3343:
+	ldr	r2, [r9, #4004]
+	uxth	r3, r7
+	adds	r7, r7, #1
+	cmp	r3, r2
+	bcs	.L3345
+	ldr	r2, [r6, #3984]
+	lsrs	r1, r3, #5
+	and	r4, r3, #31
+	lsl	r3, lr, r4
+	ldr	r0, [r2, r1, lsl #2]
+	orrs	r3, r3, r0
+	str	r3, [r2, r1, lsl #2]
+	b	.L3343
+.L3341:
+	subs	r6, r6, #1
+	uxth	r6, r6
+	b	.L3340
+.L3352:
+	mov	r0, #-1
+	b	.L3342
+.L3347:
+	mov	r0, r5
+.L3342:
+	add	sp, sp, #40
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L3354:
+	.align	2
+.L3353:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC141
+	.fnend
+	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
+	.align	1
+	.global	FlashGetBadBlockList
+	.thumb
+	.thumb_func
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3365
+	push	{r4, r5, r6, r7, r8, lr}
+	.save {r4, r5, r6, r7, r8, lr}
+	mov	r5, r0
+	ldr	r3, [r3, #1788]
+	ldr	r6, .L3365+4
+	ldrb	r4, [r3, #13]	@ zero_extendqisi2
+	ldrh	r3, [r3, #14]
+	ldr	r0, [r6, #4012]
+	smulbb	r4, r4, r3
+	uxth	r4, r4
+	adds	r2, r4, #7
+	asrs	r2, r2, #3
+	bl	FlashReadFacBbtData
+	adds	r0, r0, #1
+	bne	.L3356
+.L3360:
+	movs	r3, #0
+	b	.L3357
+.L3356:
+	movs	r1, #0
+	lsr	lr, r4, #4
+	mov	ip, #1
+	subs	r4, r4, #1
+	mov	r3, r1
+.L3358:
+	uxth	r2, r1
+	cmp	r2, r4
+	bge	.L3357
+	ldr	r7, [r6, #4012]
+	lsrs	r0, r2, #5
+	and	r8, r2, #31
+	adds	r1, r1, #1
+	lsl	r8, ip, r8
+	ldr	r0, [r7, r0, lsl #2]
+	tst	r8, r0
+	ittt	ne
+	strhne	r2, [r5, r3, lsl #1]	@ movhi
+	addne	r0, r3, #1
+	uxthne	r3, r0
+	cmp	r3, lr
+	bcc	.L3358
+	b	.L3360
+.L3357:
+	movw	r2, #65535
+	movs	r0, #0
+	strh	r2, [r5, r3, lsl #1]	@ movhi
+	pop	{r4, r5, r6, r7, r8, pc}
+.L3366:
+	.align	2
+.L3365:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.fnend
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	1
+	.global	FtlMakeBbt
+	.thumb
+	.thumb_func
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #12
+	ldr	r4, .L3389
+	ldr	r5, [r4, #740]
+	cmp	r5, #0
+	bne	.L3368
+	bl	FtlBbtMemInit
+	ldr	r7, .L3389+4
+	bl	FtlLoadFactoryBbt
+	mov	fp, r4
+	sub	r9, r7, #18
+	subw	r8, r7, #2996
+.L3369:
+	ldrh	r3, [r8, #2850]
+	ldr	r6, .L3389+8
+	cmp	r5, r3
+	bcs	.L3387
+	ldrh	r3, [r9, #2]!
+	movw	r2, #65535
+	ldr	r0, [r4, #756]
+	ldr	r10, [r4, #1796]
+	cmp	r3, r2
+	str	r0, [r4, #4056]
+	str	r10, [r4, #4060]
+	beq	.L3370
+	ldrh	ip, [r8, #2894]
+	movs	r1, #1
+	ldr	r0, .L3389+12
+	mov	r2, r1
+	mla	ip, ip, r5, r3
+	lsl	r3, ip, #10
+	str	ip, [sp, #4]
+	str	r3, [fp, #4052]
+	bl	FlashReadPages
+	ldrh	r2, [r8, #2894]
+	ldr	r0, [r7]
+	adds	r2, r2, #7
+	ldr	r1, [fp, #4056]
+	asrs	r2, r2, #3
+	bl	ftl_memcpy
+	ldr	ip, [sp, #4]
+	b	.L3371
+.L3370:
+	mov	r1, r5
+	bl	FlashGetBadBlockList
+	ldr	r0, [fp, #4056]
+	ldr	r1, [r7]
+	bl	FtlBbt2Bitmap
+	ldrh	r6, [r8, #2894]
+.L3373:
+	subs	r6, r6, #1
+	uxth	r6, r6
+.L3372:
+	ldr	r3, .L3389+8
+	ldrh	r0, [r3, #2894]
+	smlabb	r0, r0, r5, r6
+	uxth	r0, r0
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L3373
+	ldr	r0, [r4, #1796]
+	movs	r1, #16
+	strh	r6, [r9]	@ movhi
+	bl	__memzero
+	movw	r3, #61664
+	strh	r3, [r10]	@ movhi
+	movs	r3, #0
+	str	r3, [r10, #4]
+	ldrh	r3, [r9]
+	ldrh	ip, [r8, #2894]
+	ldrh	r2, [r4, #1860]
+	strh	r3, [r10, #2]	@ movhi
+	ldrh	r3, [r9]
+	ldr	r1, [r7]
+	lsls	r2, r2, #2
+	ldr	r0, [r4, #4056]
+	mla	ip, ip, r5, r3
+	lsl	r3, ip, #10
+	str	r3, [r4, #4052]
+	str	ip, [sp, #4]
+	bl	ftl_memcpy
+	movs	r1, #1
+	ldr	r0, .L3389+12
+	mov	r2, r1
+	bl	FlashEraseBlocks
+	movs	r1, #1
+	ldr	r0, .L3389+12
+	mov	r3, r1
+	mov	r2, r1
+	bl	FlashProgPages
+	ldr	r3, [r4, #4048]
+	adds	r3, r3, #1
+	ldr	ip, [sp, #4]
+	bne	.L3371
+	uxth	r0, ip
+	bl	FtlBbmMapBadBlock
+	b	.L3372
+.L3371:
+	uxth	r0, ip
+	adds	r5, r5, #1
+	bl	FtlBbmMapBadBlock
+	adds	r7, r7, #4
+	b	.L3369
+.L3387:
+	movs	r5, #0
+.L3376:
+	ldrh	r3, [r6, #2912]
+	uxth	r0, r5
+	ldr	r7, .L3389+8
+	adds	r5, r5, #1
+	cmp	r3, r0
+	bls	.L3388
+	bl	FtlBbmMapBadBlock
+	b	.L3376
+.L3388:
+	ldrh	r5, [r7, #2980]
+	movw	r8, #65535
+	subs	r5, r5, #1
+	uxth	r5, r5
+.L3378:
+	ldrh	r3, [r6, #2980]
+	subs	r3, r3, #48
+	cmp	r5, r3
+	ble	.L3382
+	mov	r0, r5
+	bl	FtlBbmIsBadBlock
+	cmp	r0, #1
+	beq	.L3379
+	mov	r0, r5
+	bl	FlashTestBlk
+	cbz	r0, .L3380
+	mov	r0, r5
+	bl	FtlBbmMapBadBlock
+	b	.L3379
+.L3380:
+	ldrh	r3, [r7, #2968]
+	cmp	r3, r8
+	bne	.L3381
+	strh	r5, [r7, #2968]	@ movhi
+	b	.L3379
+.L3381:
+	ldr	r3, .L3389+8
+	strh	r5, [r3, #2972]	@ movhi
+	b	.L3382
+.L3379:
+	subs	r5, r5, #1
+	uxth	r5, r5
+	b	.L3378
+.L3382:
+	ldr	r0, [r4, #744]
+	movs	r5, #0
+	ldrh	r3, [r6, #2968]
+	movs	r2, #2
+	str	r5, [r6, #2976]
+	movs	r1, #1
+	strh	r5, [r6, #2970]	@ movhi
+	lsls	r3, r3, #10
+	str	r3, [r0, #4]
+	ldrh	r3, [r6, #2972]
+	lsls	r3, r3, #10
+	str	r3, [r0, #40]
+	bl	FlashEraseBlocks
+	ldrh	r0, [r6, #2968]
+	bl	FtlBbmMapBadBlock
+	ldrh	r0, [r6, #2972]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldr	r3, [r6, #2976]
+	ldrh	r2, [r6, #2972]
+	adds	r3, r3, #1
+	str	r3, [r6, #2976]
+	ldrh	r3, [r6, #2968]
+	strh	r5, [r6, #2970]	@ movhi
+	strh	r2, [r6, #2968]	@ movhi
+	strh	r3, [r6, #2972]	@ movhi
+	bl	FtlBbmTblFlush
+.L3368:
+	movs	r0, #0
+	add	sp, sp, #12
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3390:
+	.align	2
+.L3389:
+	.word	.LANCHOR2
+	.word	.LANCHOR0+2996
+	.word	.LANCHOR0
+	.word	.LANCHOR2+4048
+	.fnend
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	1
+	.global	FtlLowFormat
+	.thumb
+	.thumb_func
+	.type	FtlLowFormat, %function
+FtlLowFormat:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	ldr	r4, .L3425
+	ldr	r3, [r4, #740]
+	cmp	r3, #0
+	bne	.L3393
+	ldr	r5, .L3425+4
+	str	r3, [r4, #984]
+	str	r3, [r4, #988]
+	ldrh	r0, [r5, #2832]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	r0, .L3394
+	bl	FtlMakeBbt
+.L3394:
+	ldr	r0, .L3425+8
+	movs	r2, #0
+.L3395:
+	ldrh	r1, [r5, #2904]
+	uxth	r3, r2
+	adds	r2, r2, #1
+	cmp	r3, r1, lsl #7
+	bge	.L3422
+	ldr	r6, [r4, #1788]
+	mvns	r1, r3
+	orr	r1, r3, r1, lsl #16
+	str	r1, [r6, r3, lsl #2]
+	ldr	r1, [r4, #1792]
+	str	r0, [r1, r3, lsl #2]
+	b	.L3395
+.L3422:
+	ldr	r3, .L3425+4
+	movs	r6, #0
+	ldrh	r7, [r3, #2836]
+.L3397:
+	ldrh	r3, [r5, #2838]
+	ldr	r8, .L3425+4
+	cmp	r3, r7
+	bls	.L3423
+	mov	r0, r7
+	movs	r1, #1
+	bl	FtlLowFormatEraseBlock
+	adds	r7, r7, #1
+	uxth	r7, r7
+	add	r0, r0, r6
+	uxth	r6, r0
+	b	.L3397
+.L3423:
+	ldrh	r1, [r8, #2828]
+	subs	r3, r6, #3
+	cmp	r3, r1, lsl #1
+	bge	.L3399
+.L3403:
+	movs	r6, #0
+	mov	r7, r6
+	b	.L3400
+.L3399:
+	mov	r0, r6
+	bl	__aeabi_uidiv
+	ldr	r3, [r8, #2932]
+	add	r0, r0, r3
+	uxth	r0, r0
+	bl	FtlSysBlkNumInit
+	ldrh	r0, [r8, #2832]
+	bl	FtlFreeSysBlkQueueInit
+	ldrh	r6, [r8, #2836]
+.L3401:
+	ldrh	r3, [r5, #2838]
+	cmp	r3, r6
+	bls	.L3403
+	mov	r0, r6
+	adds	r6, r6, #1
+	movs	r1, #1
+	bl	FtlLowFormatEraseBlock
+	uxth	r6, r6
+	b	.L3401
+.L3400:
+	ldrh	r3, [r5, #2836]
+	uxth	r0, r6
+	ldr	r10, .L3425+4
+	adds	r6, r6, #1
+	cmp	r3, r0
+	bls	.L3424
+	movs	r1, #0
+	bl	FtlLowFormatEraseBlock
+	add	r0, r0, r7
+	uxth	r7, r0
+	b	.L3400
+.L3424:
+	ldrh	r3, [r10, #2838]
+	ldrh	r6, [r10, #2828]
+	ldr	fp, [r10, #2840]
+	str	r3, [r10, #2964]
+	mov	r1, r6
+	mov	r0, fp
+	bl	__aeabi_uidiv
+	ubfx	r8, r0, #5, #16
+	mov	r9, r0
+	add	r3, r8, #36
+	strh	r3, [r4, #1060]	@ movhi
+	movs	r3, #24
+	str	r0, [r10, #2960]
+	muls	r3, r6, r3
+	cmp	r7, r3
+	ble	.L3405
+	rsb	r0, r7, fp
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldr	r3, .L3425
+	str	r0, [r10, #2960]
+	lsrs	r0, r0, #5
+	adds	r0, r0, #24
+	strh	r0, [r3, #1060]	@ movhi
+.L3405:
+	ldr	r3, [r4, #948]
+	ldr	fp, .L3425
+	cmp	r3, #1
+	bne	.L3406
+	mov	r0, r7
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldrh	r10, [fp, #1060]
+	uxtah	r0, r10, r0
+	add	r10, r10, r0, asr #2
+	strh	r10, [fp, #1060]	@ movhi
+.L3406:
+	ldrb	r3, [r5, #76]	@ zero_extendqisi2
+	cbz	r3, .L3407
+	mov	r0, r7
+	mov	r1, r6
+	bl	__aeabi_uidiv
+	ldrh	r10, [r4, #1060]
+	uxtah	r0, r10, r0
+	add	r10, r10, r0, asr #2
+	strh	r10, [r4, #1060]	@ movhi
+.L3407:
+	ldrh	r3, [r5, #2890]
+	cbz	r3, .L3409
+	ldrh	r2, [r4, #1060]
+	add	r2, r2, r3, lsr #1
+	strh	r2, [r4, #1060]	@ movhi
+	mul	r2, r6, r3
+	cmp	r2, r7
+	itttt	gt
+	addgt	r3, r3, #32
+	ldrgt	r2, .L3425+4
+	addgt	r3, r3, r8
+	strgt	r9, [r2, #2960]
+	itt	gt
+	ldrgt	r2, .L3425
+	strhgt	r3, [r2, #1060]	@ movhi
+.L3409:
+	ldrh	r2, [r4, #1060]
+	ldr	r3, [r5, #2960]
+	ldr	r7, .L3425
+	subs	r3, r3, r2
+	muls	r6, r3, r6
+	ldrh	r3, [r5, #2898]
+	str	r6, [r4, #4084]
+	muls	r6, r3, r6
+	ldrh	r3, [r5, #2904]
+	str	r6, [r5, #2960]
+	muls	r6, r3, r6
+	str	r6, [r5, #2940]
+	bl	FtlBbmTblFlush
+	ldrh	r2, [r5, #2838]
+	movs	r1, #0
+	ldr	r0, [r4, #768]
+	movw	r6, #65535
+	lsls	r2, r2, #1
+	bl	ftl_memset
+	ldrh	r2, [r5, #2836]
+	ldr	r0, [r4, #944]
+	movs	r1, #255
+	movs	r3, #0
+	strh	r6, [r4, #1076]	@ movhi
+	lsrs	r2, r2, #3
+	str	r3, [r4, #940]
+	strh	r3, [r4, #1078]	@ movhi
+	strb	r3, [r4, #1082]
+	strb	r3, [r4, #1084]
+	strh	r3, [r4, #790]	@ movhi
+	strb	r3, [r4, #794]
+	strh	r3, [r4, #788]	@ movhi
+	movs	r3, #1
+	strb	r3, [r4, #796]
+	bl	ftl_memset
+.L3411:
+	ldr	r5, .L3425
+	add	r0, r5, #788
+	bl	make_superblock
+	ldrb	r3, [r4, #795]	@ zero_extendqisi2
+	ldrh	r2, [r4, #788]
+	cbnz	r3, .L3412
+	ldr	r3, [r7, #768]
+	strh	r6, [r3, r2, lsl #1]	@ movhi
+	ldrh	r3, [r7, #788]
+	adds	r3, r3, #1
+	strh	r3, [r7, #788]	@ movhi
+	b	.L3411
+.L3412:
+	ldr	r3, [r5, #984]
+	movw	r7, #65535
+	ldrh	r1, [r5, #792]
+	str	r3, [r5, #800]
+	adds	r3, r3, #1
+	str	r3, [r5, #984]
+	ldr	r3, [r5, #768]
+	strh	r1, [r3, r2, lsl #1]	@ movhi
+	movs	r3, #0
+	strh	r3, [r5, #838]	@ movhi
+	strb	r3, [r5, #842]
+	ldrh	r3, [r5, #788]
+	adds	r3, r3, #1
+	strh	r3, [r5, #836]	@ movhi
+	movs	r3, #1
+	strb	r3, [r5, #844]
+.L3413:
+	ldr	r6, .L3425
+	add	r0, r6, #836
+	bl	make_superblock
+	ldrb	r3, [r4, #843]	@ zero_extendqisi2
+	ldrh	r2, [r4, #836]
+	cbnz	r3, .L3414
+	ldr	r3, [r5, #768]
+	strh	r7, [r3, r2, lsl #1]	@ movhi
+	ldrh	r3, [r5, #836]
+	adds	r3, r3, #1
+	strh	r3, [r5, #836]	@ movhi
+	b	.L3413
+.L3414:
+	ldr	r3, [r6, #984]
+	movw	r4, #65535
+	ldrh	r1, [r6, #840]
+	str	r3, [r6, #848]
+	adds	r3, r3, #1
+	str	r3, [r6, #984]
+	ldr	r3, [r6, #768]
+	strh	r1, [r3, r2, lsl #1]	@ movhi
+	strh	r4, [r6, #884]	@ movhi
+	bl	FtlFreeSysBlkQueueOut
+	movs	r3, #0
+	strh	r3, [r6, #1066]	@ movhi
+	ldr	r3, [r6, #4084]
+	strh	r4, [r6, #1068]	@ movhi
+	strh	r3, [r6, #1070]	@ movhi
+	ldr	r3, [r6, #984]
+	str	r3, [r6, #1072]
+	adds	r3, r3, #1
+	str	r3, [r6, #984]
+	strh	r0, [r6, #1064]	@ movhi
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cbnz	r0, .L3393
+	ldr	r3, .L3425+12
+	movs	r2, #1
+	str	r2, [r3, #504]
+.L3393:
+	movs	r0, #0
+	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3426:
+	.align	2
+.L3425:
+	.word	.LANCHOR2
+	.word	.LANCHOR0
+	.word	168778952
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlLowFormat, .-FtlLowFormat
+	.align	1
+	.global	FtlReInitForSDUpdata
+	.thumb
+	.thumb_func
+	.type	FtlReInitForSDUpdata, %function
+FtlReInitForSDUpdata:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 16
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r0, r1, r2, r3, r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	.pad #16
+	ldr	r4, .L3456
+	ldrb	r3, [r4, #76]	@ zero_extendqisi2
+	cbz	r3, .L3428
+.L3430:
+	movs	r0, #0
+	b	.L3429
+.L3428:
+	ldr	r5, .L3456+4
+	ldr	r0, [r5, #3980]
+	bl	FlashInit
+	cmp	r0, #0
+	bne	.L3430
+	bl	FlashLoadFactorBbt
+	cbz	r0, .L3431
+	bl	FlashMakeFactorBbt
+.L3431:
+	ldr	r0, [r5, #4012]
+	bl	FlashReadIdbDataRaw
+	cbz	r0, .L3432
+	movs	r1, #0
+	movs	r2, #16
+	mov	r0, sp
+	movs	r6, #1
+	bl	FlashReadFacBbtData
+	movs	r3, #0
+	mov	r2, r3
+	ldr	r1, [sp]
+.L3433:
+	lsl	r5, r6, r2
+	adds	r0, r3, #1
+	tst	r5, r1
+	add	r2, r2, #1
+	it	ne
+	movne	r3, r0
+	cmp	r2, #16
+	bne	.L3433
+	cmp	r3, #6
+	bls	.L3452
+	movs	r2, #0
+	movs	r6, #1
+.L3436:
+	lsl	r5, r6, r2
+	adds	r0, r3, #1
+	tst	r5, r1
+	add	r2, r2, #1
+	it	ne
+	movne	r3, r0
+	cmp	r2, #24
+	bne	.L3436
+	cmp	r3, #17
+	bhi	.L3437
+.L3452:
+	strb	r2, [r4, #1]
+	b	.L3435
+.L3437:
+	movs	r3, #36
+	strb	r3, [r4, #1]
+.L3435:
+	ldrb	r3, [r4, #1]	@ zero_extendqisi2
+	strh	r3, [r4, #1890]	@ movhi
+.L3432:
+	ldr	r1, .L3456+8
+	ldr	r0, .L3456+12
+	bl	printk
+	ldr	r0, .L3456+16
+	bl	FtlConstantsInit
+	bl	FtlVariablesInit
+	ldrh	r0, [r4, #2832]
+	bl	FtlFreeSysBlkQueueInit
+	movs	r4, #1
+.L3438:
+	bl	FtlLoadBbt
+	cbz	r0, .L3439
+.L3454:
+	bl	FtlLowFormat
+	cmp	r4, #3
+	bhi	.L3455
+	adds	r4, r4, #1
+	b	.L3438
+.L3455:
+	mov	r0, #-1
+	b	.L3429
+.L3439:
+	bl	FtlSysBlkInit
+	cmp	r0, #0
+	bne	.L3454
+	ldr	r3, .L3456+20
+	movs	r2, #1
+	str	r2, [r3, #504]
+.L3429:
+	add	sp, sp, #16
+	@ sp needed
+	pop	{r4, r5, r6, pc}
+.L3457:
+	.align	2
+.L3456:
+	.word	.LANCHOR0
+	.word	.LANCHOR2
+	.word	.LC75
+	.word	.LC74
+	.word	.LANCHOR0+1864
+	.word	.LANCHOR1
+	.fnend
+	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
+	.align	1
+	.global	flash_boot_enter_slc_mode
+	.thumb
+	.thumb_func
+	.type	flash_boot_enter_slc_mode, %function
+flash_boot_enter_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L3460
+	ldr	r2, [r3, #2772]
+	ldr	r3, .L3460+4
+	cmp	r2, r3
+	bne	.L3458
+	b	flash_enter_slc_mode
+.L3458:
+	bx	lr
+.L3461:
+	.align	2
+.L3460:
+	.word	.LANCHOR0
+	.word	1446522928
+	.fnend
+	.size	flash_boot_enter_slc_mode, .-flash_boot_enter_slc_mode
+	.align	1
+	.global	flash_boot_exit_slc_mode
+	.thumb
+	.thumb_func
+	.type	flash_boot_exit_slc_mode, %function
+flash_boot_exit_slc_mode:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	ldr	r3, .L3464
+	ldr	r2, [r3, #2772]
+	ldr	r3, .L3464+4
+	cmp	r2, r3
+	bne	.L3462
+	b	flash_exit_slc_mode
+.L3462:
+	bx	lr
+.L3465:
+	.align	2
+.L3464:
+	.word	.LANCHOR0
+	.word	1446522928
+	.fnend
+	.size	flash_boot_exit_slc_mode, .-flash_boot_exit_slc_mode
+	.align	1
+	.global	IdBlockReadData
+	.thumb
+	.thumb_func
+	.type	IdBlockReadData, %function
+IdBlockReadData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 32
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #36
+	sub	sp, sp, #36
+	ldr	r4, .L3474
+	mov	r6, r0
+	str	r2, [sp, #12]
+	mov	r7, r1
+	ldr	r0, .L3474+4
+	mov	r1, r6
+	ldr	r2, [r4, #1788]
+	mov	fp, r4
+	ldr	r3, [r4, #4]
+	ldrb	r5, [r2, #9]	@ zero_extendqisi2
+	mov	r2, r7
+	smulbb	r5, r5, r3
+	bl	printk
+	ldr	r3, [r4, #1788]
+	mov	r0, r6
+	ldrb	r10, [r3, #9]	@ zero_extendqisi2
+	uxth	r5, r5
+	mov	r1, r5
+	movs	r5, #0
+	bl	__aeabi_uidivmod
+	mul	ip, r10, r1
+	mov	r8, r1
+	subs	r3, r6, r1
+	str	r3, [sp, #4]
+	ubfx	ip, ip, #2, #2
+.L3467:
+	cmp	r5, r7
+	bcs	.L3473
+	add	r9, r5, r8
+	rsb	r3, ip, #4
+	ubfx	r9, r9, #2, #16
+	ldrb	r2, [r4, #76]	@ zero_extendqisi2
+	uxth	r3, r3
+	str	r3, [sp, #8]
+	add	r3, r4, r9, lsl #1
+	ldrh	r3, [r3, #80]
+	cbz	r2, .L3468
+	ldr	r2, [r4, #2772]
+	ldr	r1, .L3474+8
+	cmp	r2, r1
+	it	eq
+	moveq	r3, r9
+.L3468:
+	ldr	r2, [sp, #4]
+	ldr	r9, .L3474+16
+	add	r2, ip, r2
+	ldr	r1, [fp, #1788]
+	ldrb	ip, [fp, #1892]	@ zero_extendqisi2
+	mla	r3, r10, r3, r2
+	ldrb	r1, [r1, #9]	@ zero_extendqisi2
+	ldr	r2, [r9, #4012]
+	ldrb	r0, [r9, #4010]	@ zero_extendqisi2
+	str	ip, [sp, #16]
+	str	r2, [sp, #24]
+	str	r3, [sp, #28]
+	str	r1, [sp, #20]
+	bl	FlashBchSel
+	movs	r0, #0
+	bl	flash_boot_enter_slc_mode
+	ldr	r3, [sp, #28]
+	ldr	r1, [sp, #20]
+	mov	r0, r3
+	bl	__aeabi_uidiv
+	mov	r1, r0
+	movs	r0, #0
+	ldr	r2, [sp, #24]
+	mov	r3, r0
+	bl	FlashReadPage
+	movs	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	ip, [sp, #16]
+	mov	r0, ip
+	bl	FlashBchSel
+	ldr	r1, [r9, #4012]
+	mov	r2, #2048
+	ldr	r3, [sp, #12]
+	add	r0, r3, r5, lsl #9
+	bl	ftl_memcpy
+	mov	ip, #0
+	ldr	r3, [sp, #8]
+	add	r3, r3, r5
+	uxth	r5, r3
+	b	.L3467
+.L3473:
+	mov	r1, r6
+	mov	r2, r7
+	movs	r3, #0
+	ldr	r0, .L3474+12
+	bl	printk
+	movs	r0, #0
+	add	sp, sp, #36
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3475:
+	.align	2
+.L3474:
+	.word	.LANCHOR0
+	.word	.LC142
+	.word	1446522928
+	.word	.LC143
+	.word	.LANCHOR2
+	.fnend
+	.size	IdBlockReadData, .-IdBlockReadData
+	.align	1
+	.global	IDBlockWriteData
+	.thumb
+	.thumb_func
+	.type	IDBlockWriteData, %function
+IDBlockWriteData:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 88
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.pad #92
+	sub	sp, sp, #92
+	ldr	r4, .L3492
+	mov	r7, r0
+	str	r2, [sp, #8]
+	mov	r8, r1
+	ldr	r0, .L3492+4
+	mov	r1, r7
+	ldr	r2, [r4, #1788]
+	mov	fp, r4
+	ldr	r3, [r4, #4]
+	ldrb	r5, [r2, #9]	@ zero_extendqisi2
+	mov	r2, r8
+	smulbb	r5, r5, r3
+	bl	printk
+	movs	r0, #0
+	bl	flash_boot_enter_slc_mode
+	ldrh	r1, [r4, #1884]
+	mov	r0, r7
+	bl	__aeabi_uidiv
+	uxth	r5, r5
+	mov	r1, r0
+	movs	r0, #0
+	mov	r2, r0
+	bl	FlashEraseBlock
+	movs	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	r3, [r4, #1788]
+	mov	r1, r5
+	mov	r0, r7
+	movs	r5, #0
+	ldrb	r3, [r3, #9]	@ zero_extendqisi2
+	str	r3, [sp]
+	bl	__aeabi_uidivmod
+	ldr	ip, .L3492+16
+	rsb	r10, r1, r7
+	mov	r9, r1
+.L3477:
+	cmp	r5, r8
+	bcs	.L3491
+	add	r3, r5, r9
+	ubfx	r3, r3, #2, #16
+	cbz	r3, .L3478
+	adds	r1, r3, #1
+	ldrb	r0, [r4, #76]	@ zero_extendqisi2
+	add	r2, r4, r1, lsl #1
+	ldrh	r2, [r2, #80]
+	cbz	r0, .L3479
+	ldr	r0, [fp, #2772]
+	cmp	r0, ip
+	it	eq
+	uxtheq	r2, r1
+.L3479:
+	subs	r2, r2, #1
+	lsls	r2, r2, #2
+	str	r2, [sp, #24]
+	movs	r2, #0
+	str	r2, [sp, #28]
+.L3478:
+	add	r2, r4, r3, lsl #1
+	ldrh	r6, [r2, #80]
+	ldrb	r2, [r4, #76]	@ zero_extendqisi2
+	cbz	r2, .L3480
+	ldr	r2, [fp, #2772]
+	cmp	r2, ip
+	it	eq
+	moveq	r6, r3
+.L3480:
+	ldr	r3, [sp]
+	str	ip, [sp, #20]
+	mla	r1, r3, r6, r10
+	ldr	r3, [sp, #8]
+	add	r2, r3, r5, lsl #9
+	ldrb	r3, [r4, #1892]	@ zero_extendqisi2
+	str	r2, [sp, #12]
+	adds	r5, r5, #4
+	str	r3, [sp, #4]
+	uxth	r5, r5
+	ldr	r3, .L3492+8
+	str	r1, [sp, #16]
+	ldrb	r0, [r3, #4010]	@ zero_extendqisi2
+	bl	FlashBchSel
+	movs	r0, #0
+	bl	flash_boot_enter_slc_mode
+	ldr	r3, [r4, #1788]
+	ldr	r1, [sp, #16]
+	mov	r0, r1
+	ldrb	r1, [r3, #9]	@ zero_extendqisi2
+	bl	__aeabi_uidiv
+	mov	r1, r0
+	ldr	r2, [sp, #12]
+	add	r3, sp, #24
+	movs	r0, #0
+	bl	FlashProgPage
+	movs	r0, #0
+	bl	flash_boot_exit_slc_mode
+	ldr	r0, [sp, #4]
+	bl	FlashBchSel
+	mov	r0, r10
+	ldr	r1, [sp]
+	bl	__aeabi_uidiv
+	adds	r2, r6, #1
+	uxth	r2, r2
+	mov	r1, r0
+	movs	r0, #0
+	bl	FlashPageProgMsbFFData
+	ldr	ip, [sp, #20]
+	b	.L3477
+.L3491:
+	mov	r1, r7
+	mov	r2, r8
+	movs	r3, #0
+	ldr	r0, .L3492+12
+	bl	printk
+	movs	r0, #0
+	add	sp, sp, #92
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3493:
+	.align	2
+.L3492:
+	.word	.LANCHOR0
+	.word	.LC144
+	.word	.LANCHOR2
+	.word	.LC145
+	.word	1446522928
+	.fnend
+	.size	IDBlockWriteData, .-IDBlockWriteData
+	.align	1
+	.global	write_idblock
+	.thumb
+	.thumb_func
+	.type	write_idblock, %function
+write_idblock:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 8
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	fp, r0
+	ldr	r5, .L3506
+	.pad #20
+	sub	sp, sp, #20
+	mov	r0, #256000
+	mov	r8, r1
+	mov	r9, r2
+	ldr	r3, [r5, #1788]
+	ldr	r6, [r5, #4]
+	ldrb	r10, [r3, #9]	@ zero_extendqisi2
+	bl	ftl_malloc
+	mov	r7, r0
+	cmp	r0, #0
+	beq	.L3503
+	addw	r4, fp, #511
+	lsrs	r4, r4, #9
+	cmp	r4, #255
+	bhi	.L3496
+	add	r0, r8, r4, lsl #9
+	mov	r1, r8
+	rsb	r2, r4, #256
+	bl	memcpy
+.L3496:
+	adds	r4, r4, #128
+	movs	r3, #5
+	cmp	r4, #256
+	ldr	r0, .L3506+4
+	mov	r1, r9
+	mov	r2, #4
+	it	cs
+	movcs	r4, #256
+	bl	rknand_print_hex
+	ldrb	r2, [r5, #1]	@ zero_extendqisi2
+	ldr	r1, [r8, #512]
+	ldr	r0, .L3506+8
+	bl	printk
+	ldrb	r3, [r5, #1]	@ zero_extendqisi2
+	ldr	r2, [r8, #512]
+	mov	r1, r4
+	ldr	r0, .L3506+12
+	movs	r5, #0
+	cmp	r2, r3
+	mov	r2, fp
+	it	hi
+	strhi	r3, [r8, #512]
+	mov	fp, r5
+	bl	printk
+	smulbb	r10, r10, r6
+	mov	r6, r9
+	lsls	r3, r4, #7
+	uxth	r10, r10
+	str	r3, [sp, #8]
+.L3502:
+	ldr	r2, .L3506
+	ldr	r3, [r6]
+	ldrh	r2, [r2, #1890]
+	cmp	r3, r2
+	bcs	.L3498
+	ldr	r2, .L3506+16
+	ldr	r2, [r2, #4004]
+	cmp	r3, r2
+	bcc	.L3498
+	mov	r0, r7
+	mov	r1, #512
+	bl	__memzero
+	ldr	r0, [r6]
+	mov	r1, r4
+	mov	r2, r8
+	mov	r9, #0
+	mul	r0, r0, r10
+	bl	IDBlockWriteData
+	ldr	r0, [r6]
+	mov	r1, r4
+	mov	r2, r7
+	mul	r0, r0, r10
+	bl	IdBlockReadData
+.L3501:
+	ldr	r2, [r7, r9, lsl #2]
+	ldr	r3, [r8, r9, lsl #2]
+	cmp	r2, r3
+	beq	.L3499
+	stmia	sp, {r2, r3}
+	mov	r1, fp
+	ldr	r2, [r6]
+	mov	r3, r9
+	ldr	r0, .L3506+20
+	bl	printk
+	bic	ip, r9, #255
+	ldr	r0, .L3506+24
+	movs	r2, #4
+	lsl	ip, ip, #2
+	mov	r3, #256
+	add	r1, r8, ip
+	str	ip, [sp, #12]
+	bl	rknand_print_hex
+	mov	r3, #256
+	movs	r2, #4
+	ldr	r0, .L3506+28
+	ldr	ip, [sp, #12]
+	add	r1, r7, ip
+	bl	rknand_print_hex
+	mov	r0, r7
+	mov	r1, #512
+	bl	__memzero
+	ldr	r0, [r6]
+	movs	r1, #4
+	mov	r2, r7
+	mul	r0, r0, r10
+	bl	IDBlockWriteData
+	ldr	r0, .L3506+32
+	bl	printk
+	ldr	r3, [sp, #8]
+	cmp	r9, r3
+	bcc	.L3498
+	b	.L3500
+.L3499:
+	ldr	r3, [sp, #8]
+	add	r9, r9, #1
+	cmp	r9, r3
+	bne	.L3501
+.L3500:
+	adds	r5, r5, #1
+.L3498:
+	add	fp, fp, #1
+	adds	r6, r6, #4
+	cmp	fp, #5
+	bne	.L3502
+	clz	r5, r5
+	mov	r0, r7
+	bl	ftl_free
+	lsrs	r5, r5, #5
+	negs	r0, r5
+	b	.L3495
+.L3503:
+	mov	r0, #-1
+.L3495:
+	add	sp, sp, #20
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3507:
+	.align	2
+.L3506:
+	.word	.LANCHOR0
+	.word	.LC146
+	.word	.LC147
+	.word	.LC148
+	.word	.LANCHOR2
+	.word	.LC149
+	.word	.LC150
+	.word	.LC151
+	.word	.LC152
+	.fnend
+	.size	write_idblock, .-write_idblock
+	.align	1
+	.global	CRC_32
+	.thumb
+	.thumb_func
+	.type	CRC_32, %function
+CRC_32:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, lr}
+	.save {r4, lr}
+	add	r1, r1, r0
+	ldr	r4, .L3512
+	movs	r2, #0
+.L3509:
+	cmp	r0, r1
+	beq	.L3511
+	ldrb	r3, [r0], #1	@ zero_extendqisi2
+	eor	r3, r3, r2, lsr #24
+	add	r3, r4, r3, lsl #2
+	ldr	r3, [r3, #3008]
+	eor	r2, r3, r2, lsl #8
+	b	.L3509
+.L3511:
+	mov	r0, r2
+	pop	{r4, pc}
+.L3513:
+	.align	2
+.L3512:
+	.word	.LANCHOR1
+	.fnend
+	.size	CRC_32, .-CRC_32
+	.align	1
+	.global	rknand_sys_storage_ioctl
+	.thumb
+	.thumb_func
+	.type	rknand_sys_storage_ioctl, %function
+rknand_sys_storage_ioctl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 528
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3619
+	push	{r4, r5, r6, r7, lr}
+	.save {r4, r5, r6, r7, lr}
+	cmp	r1, r3
+	.pad #532
+	sub	sp, sp, #532
+	mov	r4, r1
+	mov	r5, r2
+	beq	.L3516
+	bhi	.L3517
+	subw	r3, r3, #3461
+	cmp	r1, r3
+	beq	.L3518
+	bhi	.L3519
+	subs	r3, r3, #125
+	cmp	r1, r3
+	beq	.L3520
+	bhi	.L3521
+	subs	r3, r3, #237
+	cmp	r1, r3
+	bne	.L3577
+	bl	rknand_dev_flush
+	b	.L3608
+.L3521:
+	ldr	r3, .L3619+4
+	cmp	r1, r3
+	beq	.L3523
+	adds	r3, r3, #1
+	cmp	r1, r3
+	beq	.L3524
+	b	.L3577
+.L3519:
+	ldr	r3, .L3619+8
+	cmp	r1, r3
+	beq	.L3525
+	bhi	.L3526
+	mvn	r1, #1960
+	add	r3, r3, r1
+	cmp	r4, r3
+	beq	.L3527
+	b	.L3577
+.L3526:
+	ldr	r3, .L3619+12
+	cmp	r1, r3
+	beq	.L3525
+	adds	r3, r3, #10
+	cmp	r1, r3
+	beq	.L3525
+	b	.L3577
+.L3517:
+	ldr	r3, .L3619+16
+	cmp	r1, r3
+	beq	.L3528
+	bhi	.L3529
+	subs	r3, r3, #78
+	cmp	r1, r3
+	beq	.L3530
+	bcc	.L3531
+	adds	r3, r3, #21
+	cmp	r1, r3
+	beq	.L3532
+	adds	r3, r3, #56
+	cmp	r1, r3
+	beq	.L3533
+	b	.L3577
+.L3529:
+	ldr	r3, .L3619+20
+	cmp	r1, r3
+	mov	r6, r3
+	beq	.L3534
+	bhi	.L3535
+	mvn	r2, #956
+	add	r3, r3, r2
+	cmp	r1, r3
+	beq	.L3536
+	add	r3, r3, #956
+	cmp	r1, r3
+	beq	.L3537
+	b	.L3577
+.L3535:
+	ldr	r3, .L3619+24
+	cmp	r1, r3
+	beq	.L3537
+	adds	r3, r3, #1
+	cmp	r1, r3
+	beq	.L3534
+	b	.L3577
+.L3531:
+	ldr	r0, .L3619+28
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r4, r0
+	cbnz	r0, .L3538
+.L3543:
+	mvn	r0, #11
+	b	.L3515
+.L3538:
+	mov	r1, r5
+	mov	r2, #512
+	bl	rk_copy_from_user
+	cbnz	r0, .L3614
+	ldr	r0, .L3619+32
+	ldmia	r4, {r1, r2}
+	bl	printk
+	ldr	r3, [r4, #4]
+	cmp	r3, #8
+	str	r3, [sp, #4]
+	bhi	.L3611
+	bl	rknand_device_lock
+	mov	r2, r4
+	ldr	r0, [r4]
+	ldr	r1, [sp, #4]
+	bl	IdBlockReadData
+	bl	rknand_device_unlock
+	mov	r0, r5
+	mov	r1, r4
+	ldr	r2, [sp, #4]
+	lsls	r2, r2, #9
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	beq	.L3607
+	ldr	r0, .L3619+36
+.L3610:
+	bl	printk
+.L3611:
+	mov	r0, r4
+.L3612:
+	bl	ftl_free
+.L3613:
+	mvn	r0, #13
+	b	.L3515
+.L3530:
+	ldr	r0, .L3619+40
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r4, r0
+	cmp	r0, #0
+	beq	.L3543
+	mov	r1, r5
+	mov	r2, #4096
+	bl	rk_copy_from_user
+	cbz	r0, .L3544
+.L3614:
+	ldr	r0, .L3619+44
+	b	.L3610
+.L3544:
+	ldr	r5, .L3619+48
+	ldr	r0, .L3619+52
+	ldmia	r4, {r1, r2}
+	bl	printk
+	ldr	r3, [r5, #-36]
+	mov	r6, r5
+	cbnz	r3, .L3545
+	mov	r0, #260096
+	bl	ftl_malloc
+	str	r0, [r5, #-36]
+	cmp	r0, #0
+	beq	.L3611
+.L3545:
+	ldr	r2, [r4, #4]
+	movw	r3, #4088
+	cmp	r2, r3
+	bhi	.L3611
+	ldr	r3, [r4]
+	cmp	r3, #251904
+	bhi	.L3611
+	ldr	r0, [r6, #-36]
+	add	r1, r4, #8
+	add	r0, r0, r3
+	bl	memcpy
+.L3607:
+	mov	r0, r4
+	bl	ftl_free
+.L3608:
+	movs	r4, #0
+	b	.L3542
+.L3533:
+	ldr	r0, .L3619+56
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r6, r0
+	cmp	r0, #0
+	beq	.L3543
+	mov	r1, r5
+	movs	r2, #28
+	bl	rk_copy_from_user
+	cbz	r0, .L3547
+	ldr	r0, .L3619+44
+	bl	printk
+	b	.L3548
+.L3547:
+	ldmia	r6, {r1, r2}
+	ldr	r0, .L3619+60
+	bl	printk
+	ldr	r1, [r6]
+	cmp	r1, #256000
+	bhi	.L3548
+	ldr	r5, .L3619+48
+	ldr	r0, [r5, #-36]
+	cbz	r0, .L3548
+	bl	CRC_32
+	ldr	r3, [r6, #4]
+	cmp	r3, r0
+	beq	.L3550
+	mov	r0, r6
+	bl	ftl_free
+	b	.L3578
+.L3550:
+	bl	rknand_device_lock
+	ldr	r1, [r5, #-36]
+	add	r2, r6, #8
+	ldr	r0, [r6]
+	bl	write_idblock
+	movs	r4, #0
+	bl	rknand_device_unlock
+	ldr	r0, [r5, #-36]
+	bl	ftl_free
+	str	r4, [r5, #-36]
+	mov	r0, r6
+	b	.L3555
+.L3548:
+	mov	r0, r6
+	b	.L3612
+.L3532:
+	ldr	r0, .L3619+64
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r6, r0
+	cmp	r0, #0
+	beq	.L3543
+	bl	ReadFlashInfo
+	mov	r0, r5
+	mov	r1, r6
+	movs	r2, #11
+	b	.L3617
+.L3516:
+	ldr	r0, .L3619+68
+	bl	printk
+	bl	rknand_device_lock
+	bl	FtlReInitForSDUpdata
+	mov	r4, r0
+	bl	rknand_device_unlock
+	cmp	r4, #0
+	bne	.L3613
+	bl	nand_blk_add_whole_disk
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r6, r0
+	cmp	r0, #0
+	beq	.L3543
+	bl	rknand_device_lock
+	mov	r1, r4
+	movs	r2, #64
+	mov	r0, r6
+	bl	FlashReadFacBbtData
+	bl	rknand_device_unlock
+	ldr	r0, .L3619+72
+	mov	r1, r6
+	movs	r2, #4
+	movs	r3, #8
+	bl	rknand_print_hex
+	mov	r0, r5
+	mov	r1, r6
+	movs	r2, #64
+	b	.L3617
+.L3528:
+	ldr	r0, .L3619+76
+	bl	printk
+	ldr	r3, .L3619+48
+	mov	r0, r5
+	movs	r2, #4
+	ldr	r3, [r3, #-32]
+	ldr	r3, [r3, #20]
+	add	r1, sp, #4
+	str	r3, [sp, #4]
+	b	.L3603
+.L3536:
+	ldr	r0, .L3619+80
+	bl	printk
+	mov	r0, #4096
+	bl	ftl_malloc
+	mov	r6, r0
+	cmp	r0, #0
+	beq	.L3543
+	bl	rknand_device_lock
+	movs	r1, #2
+	mov	r2, r6
+	mov	r0, #520
+	bl	FtlVendorPartRead
+	bl	rknand_device_unlock
+	mov	r2, #1024
+	mov	r0, r5
+	mov	r1, r6
+.L3617:
+	bl	rk_copy_to_user
+	mov	r4, r0
+	mov	r0, r6
+	cmp	r4, #0
+	bne	.L3612
+.L3555:
+	bl	ftl_free
+	b	.L3542
+.L3520:
+	ldr	r0, .L3619+84
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	mov	r4, r0
+	cbz	r0, .L3556
+.L3561:
+	ldr	r0, .L3619+44
+	bl	printk
+	b	.L3613
+.L3620:
+	.align	2
+.L3619:
+	.word	1074033155
+	.word	1074029570
+	.word	1074031656
+	.word	1074031666
+	.word	1074033235
+	.word	1074034193
+	.word	1074034194
+	.word	.LC153
+	.word	.LC155
+	.word	.LC156
+	.word	.LC157
+	.word	.LC154
+	.word	.LANCHOR4
+	.word	.LC158
+	.word	.LC159
+	.word	.LC160
+	.word	.LC161
+	.word	.LC162
+	.word	.LC163
+	.word	.LC164
+	.word	.LC165
+	.word	.LC166
+.L3556:
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3621
+	cmp	r2, r3
+	beq	.L3557
+.L3558:
+	mov	r4, #-1
+	b	.L3542
+.L3557:
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L3558
+	ldr	r6, .L3621+4
+	mov	r2, #512
+	add	r0, sp, #8
+	ldr	r1, [r6, #-32]
+	bl	memcpy
+	ldr	r2, [r6, #-28]
+	ldr	r3, .L3621+8
+	cmp	r2, r3
+	beq	.L3559
+	add	r0, sp, #72
+	movs	r1, #128
+	str	r4, [sp, #16]
+	str	r4, [sp, #20]
+	bl	__memzero
+.L3559:
+	add	r0, sp, #264
+	mov	r1, #256
+	movs	r3, #0
+	str	r3, [sp, #24]
+	bl	__memzero
+.L3604:
+	add	r1, sp, #8
+	mov	r2, #520
+	mov	r0, r5
+.L3603:
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	bne	.L3613
+	b	.L3608
+.L3523:
+	ldr	r0, .L3621+12
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3561
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3621
+	cmp	r2, r3
+	bne	.L3558
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L3558
+	ldr	r2, .L3621+4
+	ldr	r3, .L3621+8
+	ldr	r1, [r2, #-28]
+	cmp	r1, r3
+	bne	.L3578
+	ldr	r3, [sp, #20]
+	subs	r1, r3, #1
+	cmp	r1, #127
+	bhi	.L3579
+	ldr	r4, [r2, #-32]
+	add	r1, sp, #72
+	add	r0, r4, #64
+	str	r3, [r4, #12]
+	ldr	r2, [sp, #20]
+	bl	memcpy
+	movs	r0, #1
+	mov	r1, r4
+	b	.L3609
+.L3527:
+	ldr	r0, .L3621+16
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3561
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3621+20
+	cmp	r2, r3
+	bne	.L3558
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L3558
+	ldr	r5, .L3621+4
+	ldr	r3, [r5, #-24]
+	cbnz	r3, .L3562
+.L3565:
+	movs	r0, #0
+	b	.L3515
+.L3562:
+	ldr	r3, [r5, #-20]
+	ldr	r2, .L3621+24
+	ldr	r1, [r3]
+	cmp	r1, r2
+	beq	.L3563
+	str	r2, [r3]
+	mov	r2, #504
+	ldr	r3, [r5, #-20]
+	str	r2, [r3, #4]
+	movs	r2, #0
+	str	r2, [r3, #8]
+	str	r2, [r3, #12]
+.L3563:
+	ldr	r1, [r5, #-20]
+	movs	r4, #0
+	mov	r0, r4
+	str	r4, [r1, #16]
+	bl	StorageSysDataStore
+	ldr	r3, [r5, #-32]
+	ldr	r2, .L3621
+	ldr	r1, [r3]
+	cmp	r1, r2
+	it	ne
+	strne	r2, [r3]
+	ldr	r0, [r5, #-32]
+	itt	ne
+	movne	r2, #504
+	ldrne	r3, .L3621+4
+	mov	r1, #128
+	add	r0, r0, #64
+	itt	ne
+	ldrne	r3, [r3, #-32]
+	strne	r4, [r3, #8]
+	mov	r4, #0
+	it	ne
+	strne	r2, [r3, #4]
+	str	r4, [r0, #-52]
+	bl	__memzero
+	movs	r0, #1
+	ldr	r1, [r5, #-32]
+	bl	StorageSysDataStore
+	str	r4, [r5, #-24]
+	str	r4, [r5, #-28]
+	b	.L3542
+.L3518:
+	ldr	r0, .L3621+28
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3561
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3621+32
+	cmp	r2, r3
+	bne	.L3558
+	ldr	r3, [sp, #12]
+	cmp	r3, #512
+	bhi	.L3558
+	ldr	r5, .L3621+4
+	ldr	r3, [r5, #-24]
+	cmp	r3, #1
+	beq	.L3565
+	ldr	r3, [r5, #-20]
+	ldr	r2, .L3621+24
+	ldr	r1, [r3]
+	cmp	r1, r2
+	it	ne
+	strne	r2, [r3]
+	ldr	r1, [r5, #-20]
+	itttt	ne
+	movne	r2, #504
+	ldrne	r3, [r5, #-20]
+	strne	r2, [r3, #4]
+	strne	r0, [r3, #8]
+	it	ne
+	strne	r0, [r3, #12]
+	movs	r3, #1
+	movs	r0, #0
+	str	r3, [r1, #16]
+	bl	StorageSysDataStore
+	ldr	r3, [r5, #-32]
+	ldr	r2, .L3621
+	ldr	r1, [r3]
+	cmp	r1, r2
+	beq	.L3567
+	str	r2, [r3]
+	mov	r2, #504
+	ldr	r3, .L3621+4
+	ldr	r3, [r3, #-32]
+	str	r2, [r3, #4]
+	movs	r2, #0
+	str	r2, [r3, #8]
+.L3567:
+	ldr	r0, [r5, #-32]
+	movs	r1, #128
+	movs	r4, #0
+	adds	r0, r0, #64
+	str	r4, [r0, #-52]
+	bl	__memzero
+	movs	r0, #1
+	ldr	r1, [r5, #-32]
+	bl	StorageSysDataStore
+	movs	r3, #1
+	str	r3, [r5, #-24]
+	b	.L3542
+.L3524:
+	ldr	r0, .L3621+36
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3561
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3621+40
+	cmp	r2, r3
+	bne	.L3558
+	ldr	r2, [sp, #12]
+	cmp	r2, #512
+	bhi	.L3558
+	add	r0, sp, #16
+	ldr	r1, .L3621+44
+	b	.L3605
+.L3525:
+	ldr	r0, .L3621+48
+	cmp	r4, r0
+	mov	r7, r0
+	bne	.L3568
+	ldr	r0, .L3621+52
+	b	.L3606
+.L3568:
+	ldr	r3, .L3621+56
+	cmp	r4, r3
+	ite	eq
+	ldreq	r0, .L3621+60
+	ldrne	r0, .L3621+64
+.L3606:
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3561
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3621+68
+	cmp	r2, r3
+	bne	.L3613
+	ldr	r3, .L3621+56
+	ldr	r6, .L3621+4
+	cmp	r4, r3
+	bne	.L3571
+	ldr	r3, [r6, #-32]
+	mov	r0, r5
+	add	r1, sp, #8
+	movs	r2, #16
+	ldr	r3, [r3, #20]
+	str	r3, [sp, #12]
+	strb	r3, [sp, #16]
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	beq	.L3515
+	b	.L3613
+.L3571:
+	ldr	r3, [r6, #496]
+	cmp	r3, #10
+	bhi	.L3613
+	ldr	r1, [r6, #-32]
+	ldr	r3, [sp, #12]
+	ldr	r2, [r1, #24]
+	cmp	r2, r3
+	beq	.L3572
+	cbz	r2, .L3572
+	mov	r1, r3
+	ldr	r0, .L3621+72
+	bl	printk
+	ldr	r3, [r6, #496]
+	adds	r3, r3, #1
+	str	r3, [r6, #496]
+	b	.L3613
+.L3572:
+	movs	r2, #0
+	cmp	r4, r7
+	str	r2, [r6, #496]
+	mov	r0, #1
+	itet	eq
+	moveq	r3, r2
+	movne	r2, #1
+	moveq	r2, r3
+	str	r3, [r1, #24]
+	str	r2, [r1, #20]
+	bl	StorageSysDataStore
+	adds	r0, r0, #1
+	bne	.L3608
+	mvn	r4, #1
+	b	.L3542
+.L3622:
+	.align	2
+.L3621:
+	.word	1263358532
+	.word	.LANCHOR4
+	.word	-1067903959
+	.word	.LC167
+	.word	.LC168
+	.word	1112753220
+	.word	1146313043
+	.word	.LC169
+	.word	1112755781
+	.word	.LC170
+	.word	1094995539
+	.word	.LANCHOR4-16
+	.word	1074031666
+	.word	.LC171
+	.word	1074031676
+	.word	.LC172
+	.word	.LC173
+	.word	1280262987
+	.word	.LC174
+.L3537:
+	ldr	r0, .L3623
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3561
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3623+4
+	cmp	r2, r3
+	bne	.L3558
+	ldr	r2, [sp, #12]
+	cmp	r2, #504
+	bhi	.L3558
+	ldr	r3, .L3623+8
+	add	r0, sp, #16
+	cmp	r4, r3
+	ldr	r3, .L3623+12
+	ite	eq
+	ldreq	r1, [r3, #500]
+	ldrne	r1, [r3, #504]
+	adds	r1, r1, #8
+.L3605:
+	bl	memcpy
+	b	.L3604
+.L3534:
+	ldr	r0, .L3623+16
+	bl	printk
+	mov	r1, r5
+	mov	r2, #520
+	add	r0, sp, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3561
+	ldr	r2, [sp, #8]
+	ldr	r3, .L3623+4
+	cmp	r2, r3
+	bne	.L3558
+	ldr	r2, [sp, #12]
+	cmp	r2, #504
+	bhi	.L3558
+	cmp	r4, r6
+	add	r2, r2, #8
+	ldr	r4, .L3623+12
+	bne	.L3576
+	add	r1, sp, #8
+	ldr	r0, [r4, #500]
+	bl	memcpy
+	movs	r0, #2
+	ldr	r1, [r4, #500]
+	b	.L3609
+.L3576:
+	add	r1, sp, #8
+	ldr	r0, [r4, #504]
+	bl	memcpy
+	ldr	r1, [r4, #504]
+	movs	r0, #3
+.L3609:
+	bl	StorageSysDataStore
+	mov	r4, r0
+.L3542:
+	ldr	r0, .L3623+20
+	mov	r1, r4
+	bl	printk
+	mov	r0, r4
+	b	.L3515
+.L3577:
+	mvn	r0, #21
+	b	.L3515
+.L3578:
+	mvn	r0, #1
+	b	.L3515
+.L3579:
+	mvn	r0, #2
+.L3515:
+	add	sp, sp, #532
+	@ sp needed
+	pop	{r4, r5, r6, r7, pc}
+.L3624:
+	.align	2
+.L3623:
+	.word	.LC175
+	.word	1145980246
+	.word	1074034192
+	.word	.LANCHOR4
+	.word	.LC176
+	.word	.LC177
+	.fnend
+	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
+	.align	1
+	.global	rk_ftl_storage_sys_init
+	.thumb
+	.thumb_func
+	.type	rk_ftl_storage_sys_init, %function
+rk_ftl_storage_sys_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	mov	r2, #512
+	ldr	r4, .L3634
+	movs	r5, #0
+	sub	r0, r4, #16
+	ldr	r1, [r4, #-52]
+	str	r5, [r4, #-36]
+	add	r3, r1, #512
+	str	r3, [r4, #-32]
+	str	r1, [r4, #-20]
+	add	r3, r1, #1024
+	add	r1, r1, #1536
+	str	r3, [r4, #500]
+	str	r1, [r4, #504]
+	bl	ftl_memcpy
+	ldr	r6, [r4, #-20]
+	str	r5, [r4, #-28]
+	str	r5, [r4, #496]
+	ldr	r3, [r6, #16]
+	ldr	r7, [r6, #508]
+	str	r3, [r4, #-24]
+	cbz	r7, .L3626
+	mov	r0, r6
+	mov	r1, #508
+	bl	JSHash
+	cmp	r7, r0
+	beq	.L3626
+	str	r5, [r6, #16]
+	ldr	r0, .L3634+4
+	str	r5, [r4, #-24]
+	bl	printk
+.L3626:
+	ldr	r3, [r4, #-24]
+	cbz	r3, .L3627
+	ldr	r2, .L3634+8
+	ldr	r3, .L3634
+	str	r2, [r3, #-28]
+.L3627:
+	ldr	r1, [r4, #500]
+	movs	r0, #2
+	bl	StorageSysDataLoad
+	ldr	r1, [r4, #504]
+	movs	r0, #3
+	bl	StorageSysDataLoad
+	pop	{r3, r4, r5, r6, r7, lr}
+	b	rknand_sys_storage_init
+.L3635:
+	.align	2
+.L3634:
+	.word	.LANCHOR4
+	.word	.LC178
+	.word	-1067903959
+	.fnend
+	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
+	.align	1
+	.global	StorageSysDataDeInit
+	.thumb
+	.thumb_func
+	.type	StorageSysDataDeInit, %function
+StorageSysDataDeInit:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	@ link register save eliminated.
+	movs	r0, #0
+	bx	lr
+	.fnend
+	.size	StorageSysDataDeInit, .-StorageSysDataDeInit
+	.align	1
+	.global	rk_ftl_vendor_storage_init
+	.thumb
+	.thumb_func
+	.type	rk_ftl_vendor_storage_init, %function
+rk_ftl_vendor_storage_init:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, lr}
+	mov	r0, #65536
+	ldr	r1, .L3647
+	movs	r2, #4
+	bl	kmalloc_order
+	ldr	r5, .L3647+4
+	str	r0, [r5, #508]
+	cmp	r0, #0
+	beq	.L3643
+	movs	r7, #0
+	ldr	r9, .L3647+12
+	mov	r10, r5
+	mov	r4, r7
+	mov	r6, r7
+.L3641:
+	ldr	r8, [r5, #508]
+	bl	rknand_device_lock
+	adds	r0, r6, #2
+	movs	r1, #128
+	mov	r2, r8
+	lsls	r0, r0, #7
+	bl	FtlVendorPartRead
+	mov	r8, r0
+	bl	rknand_device_unlock
+	cmp	r8, #0
+	bne	.L3639
+	ldr	r3, [r10, #508]
+	ldr	r0, .L3647+8
+	add	r2, r3, #65280
+	adds	r2, r2, #252
+	ldr	r1, [r3]
+	ldr	r3, [r3, #4]
+	ldr	r2, [r2]
+	bl	printk
+	ldr	r8, [r10, #508]
+	ldr	r3, [r8]
+	cmp	r3, r9
+	bne	.L3640
+	add	r3, r8, #65280
+	ldr	r2, [r8, #4]
+	adds	r3, r3, #252
+	ldr	r3, [r3]
+	cmp	r3, r2
+	bne	.L3640
+	cmp	r4, r3
+	itt	cc
+	movcc	r7, r6
+	movcc	r4, r3
+.L3640:
+	cbnz	r6, .L3646
+	movs	r6, #1
+	b	.L3641
+.L3646:
+	cbz	r4, .L3642
+	bl	rknand_device_lock
+	lsls	r0, r7, #7
+	add	r0, r0, #256
+	movs	r1, #128
+	mov	r2, r8
+	bl	FtlVendorPartRead
+	mov	r4, r0
+	bl	rknand_device_unlock
+	cbz	r4, .L3645
+	b	.L3639
+.L3642:
+	mov	r0, r8
+	mov	r1, #65536
+	bl	__memzero
+	ldr	r3, [r5, #508]
+	ldr	r2, .L3647+12
+	str	r6, [r3, #4]
+	str	r2, [r3]
+	movw	r2, #65532
+	str	r6, [r3, r2]
+	movw	r2, #64504
+	strh	r4, [r3, #12]	@ movhi
+	strh	r2, [r3, #14]	@ movhi
+.L3645:
+	mov	r0, r4
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L3639:
+	ldr	r0, [r5, #508]
+	bl	kfree
+	movs	r3, #0
+	mov	r0, #-1
+	str	r3, [r5, #508]
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L3643:
+	mvn	r0, #11
+	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
+.L3648:
+	.align	2
+.L3647:
+	.word	37748929
+	.word	.LANCHOR4
+	.word	.LC179
+	.word	1380668996
+	.fnend
+	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
+	.align	1
+	.global	rk_ftl_vendor_read
+	.thumb
+	.thumb_func
+	.type	rk_ftl_vendor_read, %function
+rk_ftl_vendor_read:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r3, r4, r5, r6, r7, lr}
+	.save {r3, r4, r5, r6, r7, lr}
+	ldr	r3, .L3655
+	ldr	r5, [r3, #508]
+	cbz	r5, .L3654
+	ldrh	r7, [r5, #10]
+	movs	r3, #0
+.L3651:
+	cmp	r3, r7
+	bcs	.L3654
+	add	r6, r5, r3, lsl #3
+	ldrh	r4, [r6, #16]
+	cmp	r4, r0
+	bne	.L3652
+	ldrh	r3, [r6, #20]
+	mov	r0, r1
+	cmp	r2, r3
+	it	cs
+	movcs	r2, r3
+	ldrh	r3, [r6, #18]
+	mov	r4, r2
+	add	r3, r3, #1024
+	adds	r1, r5, r3
+	bl	memcpy
+	mov	r0, r4
+	pop	{r3, r4, r5, r6, r7, pc}
+.L3652:
+	adds	r3, r3, #1
+	b	.L3651
+.L3654:
+	mov	r0, #-1
+	pop	{r3, r4, r5, r6, r7, pc}
+.L3656:
+	.align	2
+.L3655:
+	.word	.LANCHOR4
+	.fnend
+	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
+	.align	1
+	.global	rk_ftl_vendor_write
+	.thumb
+	.thumb_func
+	.type	rk_ftl_vendor_write, %function
+rk_ftl_vendor_write:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 24
+	@ frame_needed = 0, uses_anonymous_args = 0
+	push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
+	mov	r9, r2
+	ldr	r2, .L3679
+	.pad #28
+	sub	sp, sp, #28
+	mov	ip, r0
+	mov	r3, r1
+	ldr	r4, [r2, #508]
+	cmp	r4, #0
+	beq	.L3672
+	add	r6, r9, #63
+	ldrh	r1, [r4, #8]
+	ldrh	r2, [r4, #10]
+	bic	r6, r6, #63
+	movs	r7, #0
+	str	r1, [sp, #4]
+.L3659:
+	cmp	r7, r2
+	bcs	.L3677
+	add	r5, r4, r7, lsl #3
+	ldrh	r1, [r5, #16]
+	cmp	r1, ip
+	bne	.L3660
+	ldrh	r1, [r5, #20]
+	add	fp, r4, #1024
+	adds	r1, r1, #63
+	bic	r1, r1, #63
+	str	r1, [sp, #8]
+	cmp	r9, r1
+	bls	.L3661
+	ldrh	r1, [r4, #14]
+	cmp	r1, r6
+	bcc	.L3672
+	ldrh	r8, [r5, #18]
+	subs	r2, r2, #1
+	str	r2, [sp, #12]
+.L3662:
+	ldr	r2, [sp, #12]
+	adds	r5, r5, #8
+	cmp	r7, r2
+	bcs	.L3678
+	ldrh	r2, [r5, #16]
+	add	r0, fp, r8
+	ldrh	r1, [r5, #18]
+	adds	r7, r7, #1
+	strh	r8, [r5, #10]	@ movhi
+	strh	r2, [r5, #8]	@ movhi
+	add	r1, r1, fp
+	ldrh	r2, [r5, #20]
+	str	r3, [sp, #20]
+	add	r10, r2, #63
+	str	ip, [sp, #16]
+	bic	r10, r10, #63
+	strh	r2, [r5, #12]	@ movhi
+	add	r8, r8, r10
+	mov	r2, r10
+	bl	memcpy
+	ldr	r3, [sp, #20]
+	ldr	ip, [sp, #16]
+	b	.L3662
+.L3678:
+	add	r7, r4, r7, lsl #3
+	uxth	r5, r8
+	add	r0, fp, r5
+	mov	r1, r3
+	strh	r5, [r7, #18]	@ movhi
+	mov	r2, r9
+	strh	ip, [r7, #16]	@ movhi
+	uxth	r6, r6
+	strh	r9, [r7, #20]	@ movhi
+	add	r5, r5, r6
+	bl	memcpy
+	ldrh	r2, [r4, #14]
+	strh	r5, [r4, #12]	@ movhi
+	ldr	r3, [sp, #8]
+	add	r3, r3, r2
+	subs	r6, r3, r6
+	strh	r6, [r4, #14]	@ movhi
+	b	.L3676
+.L3661:
+	ldrh	r0, [r5, #18]
+	mov	r1, r3
+	mov	r2, r9
+	add	r0, r0, fp
+	bl	memcpy
+	strh	r9, [r5, #20]	@ movhi
+	b	.L3676
+.L3660:
+	adds	r7, r7, #1
+	b	.L3659
+.L3677:
+	ldrh	r1, [r4, #14]
+	cmp	r1, r6
+	bcc	.L3672
+	add	r2, r4, r2, lsl #3
+	uxth	r6, r6
+	subs	r1, r1, r6
+	strh	ip, [r2, #16]	@ movhi
+	ldrh	r0, [r4, #12]
+	strh	r9, [r2, #20]	@ movhi
+	strh	r0, [r2, #18]	@ movhi
+	add	r0, r0, r6
+	strh	r1, [r4, #14]	@ movhi
+	mov	r1, r3
+	strh	r0, [r4, #12]	@ movhi
+	ldrh	r0, [r2, #18]
+	mov	r2, r9
+	add	r0, r0, #1024
+	add	r0, r0, r4
+	bl	memcpy
+	ldrh	r3, [r4, #10]
+	adds	r3, r3, #1
+	strh	r3, [r4, #10]	@ movhi
+.L3676:
+	ldr	r3, [r4, #4]
+	movw	r2, #65532
+	adds	r3, r3, #1
+	str	r3, [r4, #4]
+	str	r3, [r4, r2]
+	ldrh	r3, [r4, #8]
+	adds	r3, r3, #1
+	uxth	r3, r3
+	cmp	r3, #1
+	it	hi
+	movhi	r3, #0
+	strh	r3, [r4, #8]	@ movhi
+	bl	rknand_device_lock
+	movs	r2, #128
+	movs	r0, #16
+	ldr	r3, [sp, #4]
+	lsls	r1, r3, #7
+	mov	r3, r4
+	bl	FtlWrite
+	bl	rknand_device_unlock
+	movs	r0, #0
+	b	.L3658
+.L3672:
+	mov	r0, #-1
+.L3658:
+	add	sp, sp, #28
+	@ sp needed
+	pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
+.L3680:
+	.align	2
+.L3679:
+	.word	.LANCHOR4
+	.fnend
+	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
+	.align	1
+	.global	rk_ftl_vendor_storage_ioctl
+	.thumb
+	.thumb_func
+	.type	rk_ftl_vendor_storage_ioctl, %function
+rk_ftl_vendor_storage_ioctl:
+	.fnstart
+	@ args = 0, pretend = 0, frame = 0
+	@ frame_needed = 0, uses_anonymous_args = 0
+	ldr	r3, .L3697
+	push	{r4, r5, r6, lr}
+	.save {r4, r5, r6, lr}
+	mov	r6, r1
+	ldr	r0, [r3, #48]
+	mov	r5, r2
+	ldr	r1, .L3697+4
+	bl	kmem_cache_alloc
+	mov	r4, r0
+	cmp	r0, #0
+	beq	.L3690
+	ldr	r3, .L3697+8
+	cmp	r6, r3
+	beq	.L3684
+	adds	r3, r3, #1
+	cmp	r6, r3
+	beq	.L3685
+	b	.L3696
+.L3684:
+	mov	r1, r5
+	movs	r2, #8
+	bl	rk_copy_from_user
+	cmp	r0, #0
+	bne	.L3696
+	ldr	r2, [r4]
+	ldr	r3, .L3697+12
+	cmp	r2, r3
+	beq	.L3687
+.L3688:
+	mov	r5, #-1
+	b	.L3683
+.L3687:
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_read
+	adds	r3, r0, #1
+	beq	.L3688
+	uxth	r2, r0
+	strh	r0, [r4, #6]	@ movhi
+	mov	r1, r4
+	mov	r0, r5
+	adds	r2, r2, #8
+	bl	rk_copy_to_user
+	cmp	r0, #0
+	ite	eq
+	moveq	r5, #0
+	mvnne	r5, #13
+	b	.L3683
+.L3685:
+	mov	r1, r5
+	movs	r2, #8
+	bl	rk_copy_from_user
+	cbnz	r0, .L3696
+	ldr	r2, [r4]
+	ldr	r3, .L3697+12
+	cmp	r2, r3
+	bne	.L3688
+	ldrh	r2, [r4, #6]
+	movw	r3, #4087
+	cmp	r2, r3
+	bhi	.L3688
+	mov	r0, r4
+	mov	r1, r5
+	adds	r2, r2, #8
+	bl	rk_copy_from_user
+	cbnz	r0, .L3696
+	ldrh	r0, [r4, #4]
+	add	r1, r4, #8
+	ldrh	r2, [r4, #6]
+	bl	rk_ftl_vendor_write
+	mov	r5, r0
+	b	.L3683
+.L3696:
+	mvn	r5, #13
+.L3683:
+	mov	r0, r4
+	bl	kfree
+	b	.L3682
+.L3690:
+	mov	r5, #-1
+.L3682:
+	mov	r0, r5
+	pop	{r4, r5, r6, pc}
+.L3698:
+	.align	2
+.L3697:
+	.word	kmalloc_caches
+	.word	37748928
+	.word	1074034177
+	.word	1448232273
+	.fnend
+	.size	rk_ftl_vendor_storage_ioctl, .-rk_ftl_vendor_storage_ioctl
+	.global	gTable_Crc32
+	.global	SecureBootUnlockTryCount
+	.global	SecureBootCheckOK
+	.global	SecureBootEn
+	.global	gpVendor1Info
+	.global	gpVendor0Info
+	.global	g_idb_buffer
+	.global	gSnSectorData
+	.global	gpDrmKeyInfo
+	.global	gpBootConfig
+	.global	gLoaderBootInfo
+	.global	RK29_NANDC1_REG_BASE
+	.global	RK29_NANDC_REG_BASE
+	.global	gc_ink_free_return_value
+	.global	FtlUpdateVaildLpnCount
+	.global	g_ect_tbl_power_up_flush
+	.global	last_cache_match_count
+	.global	power_up_flag
+	.global	g_LowFormat
+	.global	gFtlInitStatus
+	.global	DeviceCapacity
+	.global	ToshibaRefValue
+	.global	Toshiba15RefValue
+	.global	ToshibaA19RefValue
+	.global	SamsungRefValue
+	.global	refValueDefault
+	.global	FbbtBlk
+	.global	random_seed
+	.global	gSlcNandParaInfo
+	.global	gNandParaInfo
+	.global	NandFlashParaTbl
+	.global	g_page_map_check_enable
+	.global	g_power_lost_ecc_error_blk
+	.global	g_power_lost_recovery_flag
+	.global	c_mlc_erase_count_value
+	.global	g_recovery_ppa_tbl
+	.global	g_recovery_page_min_ver
+	.global	g_recovery_page_num
+	.global	g_cur_erase_blk
+	.global	g_gc_skip_write_count
+	.global	g_gc_head_data_block_count
+	.global	g_gc_head_data_block
+	.global	g_ftl_nand_free_count
+	.global	g_in_swl_replace
+	.global	g_in_gc_progress
+	.global	g_all_blk_used_slc_mode
+	.global	g_max_erase_count
+	.global	g_totle_sys_slc_erase_count
+	.global	g_totle_slc_erase_count
+	.global	g_min_erase_count
+	.global	g_totle_avg_erase_count
+	.global	g_totle_mlc_erase_count
+	.global	g_totle_l2p_write_count
+	.global	g_totle_cache_write_count
+	.global	g_tmp_data_superblock_id
+	.global	g_totle_read_page_count
+	.global	g_totle_discard_page_count
+	.global	g_totle_read_sector
+	.global	g_totle_write_sector
+	.global	g_totle_write_page_count
+	.global	g_totle_gc_page_count
+	.global	g_gc_blk_index
+	.global	g_gc_merge_free_blk_threshold
+	.global	g_gc_free_blk_threshold
+	.global	g_gc_refresh_block_temp_tbl
+	.global	g_free_slc_blk_num
+	.global	g_gc_refresh_block_temp_num
+	.global	g_gc_bad_block_temp_tbl
+	.global	g_gc_bad_block_gc_index
+	.global	g_gc_bad_block_temp_num
+	.global	g_gc_next_blk_1
+	.global	g_gc_next_blk
+	.global	g_gc_cur_blk_max_valid_pages
+	.global	g_gc_cur_blk_valid_pages
+	.global	g_gc_page_offset
+	.global	g_gc_blk_num
+	.global	p_gc_blk_tbl
+	.global	p_gc_page_info
+	.global	g_sys_ext_data
+	.global	g_sys_save_data
+	.global	gp_last_act_superblock
+	.global	g_gc_superblock
+	.global	g_gc_temp_superblock
+	.global	g_buffer_superblock
+	.global	g_active_superblock
+	.global	g_num_data_superblocks
+	.global	g_num_free_superblocks
+	.global	p_data_block_list_tail
+	.global	p_data_block_list_head
+	.global	p_free_data_block_list_head
+	.global	p_data_block_list_table
+	.global	g_l2p_last_update_region_id
+	.global	p_l2p_map_buf
+	.global	p_l2p_ram_map
+	.global	g_totle_vendor_block
+	.global	p_vendor_region_ppn_table
+	.global	p_vendor_block_ver_table
+	.global	p_vendor_block_valid_page_count
+	.global	p_vendor_block_table
+	.global	g_totle_map_block
+	.global	p_map_region_ppn_check_table
+	.global	p_map_region_ppn_table
+	.global	p_map_block_ver_table
+	.global	p_map_block_valid_page_count
+	.global	p_map_block_table
+	.global	p_blk_mode_table
+	.global	p_valid_page_count_check_table
+	.global	p_valid_page_count_table
+	.global	g_totle_swl_count
+	.global	p_swl_mul_table
+	.global	p_erase_count_table
+	.global	g_ect_tbl_info_size
+	.global	gp_ect_tbl_info
+	.global	g_gc_num_req
+	.global	c_gc_page_buf_num
+	.global	gp_gc_page_buf_info
+	.global	p_gc_data_buf
+	.global	p_gc_spare_buf
+	.global	p_io_spare_buf
+	.global	p_io_data_buf_1
+	.global	p_io_data_buf_0
+	.global	p_sys_spare_buf
+	.global	p_vendor_data_buf
+	.global	p_sys_data_buf_1
+	.global	p_sys_data_buf
+	.global	g_wr_page_num
+	.global	req_wr_io
+	.global	c_wr_page_buf_num
+	.global	p_wr_io_data_buf
+	.global	p_wr_io_spare_buf
+	.global	p_plane_order_table
+	.global	g_req_cache
+	.global	req_gc_dst
+	.global	req_gc
+	.global	req_erase
+	.global	req_prgm
+	.global	req_read
+	.global	req_sys
+	.global	gVendorBlkInfo
+	.global	gL2pMapInfo
+	.global	gSysFreeQueue
+	.global	gSysInfo
+	.global	gBbtInfo
+	.global	g_flash_read_only_en
+	.global	g_inkDie_check_enable
+	.global	g_SlcPartLbaEndSector
+	.global	g_MaxLbn
+	.global	g_VaildLpn
+	.global	g_MaxLpn
+	.global	g_MaxLbaSector
+	.global	g_GlobalDataVersion
+	.global	g_GlobalSysVersion
+	.global	ftl_gc_temp_power_lost_recovery_flag
+	.global	c_ftl_nand_max_data_blks
+	.global	c_ftl_nand_data_op_blks_per_plane
+	.global	c_ftl_nand_data_blks_per_plane
+	.global	c_ftl_nand_max_sys_blks
+	.global	c_ftl_nand_init_sys_blks_per_plane
+	.global	c_ftl_nand_sys_blks_per_plane
+	.global	c_ftl_vendor_part_size
+	.global	c_ftl_nand_max_vendor_blks
+	.global	c_ftl_nand_max_map_blks
+	.global	c_ftl_nand_map_blks_per_plane
+	.global	c_ftl_nand_vendor_region_num
+	.global	c_ftl_nand_l2pmap_ram_region_num
+	.global	c_ftl_nand_map_region_num
+	.global	c_ftl_nand_totle_phy_blks
+	.global	c_ftl_nand_reserved_blks
+	.global	c_ftl_nand_byte_pre_oob
+	.global	c_ftl_nand_byte_pre_page
+	.global	c_ftl_nand_sec_pre_page_shift
+	.global	c_ftl_nand_sec_pre_page
+	.global	c_ftl_nand_page_pre_super_blk
+	.global	c_ftl_nand_page_pre_slc_blk
+	.global	c_ftl_nand_page_pre_blk
+	.global	c_ftl_nand_bbm_buf_size
+	.global	c_ftl_nand_ext_blk_pre_plane
+	.global	c_ftl_nand_blk_pre_plane
+	.global	c_ftl_nand_planes_num
+	.global	c_ftl_nand_blks_per_die_shift
+	.global	c_ftl_nand_blks_per_die
+	.global	c_ftl_nand_planes_per_die
+	.global	c_ftl_nand_die_num
+	.global	c_ftl_nand_type
+	.global	gMasterTempBuf
+	.global	gMasterInfo
+	.global	gNandcDumpWriteEn
+	.global	gToggleModeClkDiv
+	.global	gBootDdrMode
+	.global	gNandcEccBits
+	.global	gpNandc1
+	.global	gpNandc
+	.global	g_nandc_version_data
+	.global	gNandcVer
+	.global	gNandChipMap
+	.global	gNandIDataBuf
+	.global	FlashDdrTunningReadCount
+	.global	FlashWaitBusyScheduleEn
+	.global	gNandPhyInfo
+	.global	gFlashProgCheckSpareBuffer
+	.global	gFlashProgCheckBuffer
+	.global	gFlashSpareBuffer
+	.global	gFlashPageBuffer1
+	.global	gFlashPageBuffer0
+	.global	gpFlashSaveInfo
+	.global	gReadRetryInfo
+	.global	gpNandParaInfo
+	.global	gNandOptPara
+	.global	g_slc2KBNand
+	.global	g_maxRetryCount
+	.global	g_maxRegNum
+	.global	g_retryMode
+	.global	gNandIDBResBlkNumSaveInFlash
+	.global	gNandIDBResBlkNum
+	.global	gNandFlashResEndPageAddr
+	.global	gNandFlashInfoBlockAddr
+	.global	gNandFlashIdbBlockAddr
+	.global	gNandFlashInfoBlockEcc
+	.global	gNandFlashIDBEccBits
+	.global	gNandFlashEccBits
+	.global	gNandRandomizer
+	.global	gBlockPageAlignSize
+	.global	gTotleBlock
+	.global	gNandMaxChip
+	.global	gNandMaxDie
+	.global	gFlashInterfaceMode
+	.global	gFlashSlcMode
+	.global	gFlashOnfiModeEn
+	.global	gFlashToggleModeEn
+	.global	gFlashSdrModeEn
+	.global	gMultiPageProgEn
+	.global	gMultiPageReadEn
+	.global	gpReadRetrial
+	.global	mlcPageToSlcPageTbl
+	.global	slcPageToMlcPageTbl
+	.global	DieAddrs
+	.global	gDieOp
+	.global	DieCsIndex
+	.global	IDByte
+	.global	read_retry_cur_offset
+	.section	.rodata
+	.align	2
+.LANCHOR3 = . + 0
+	.type	__func__.21081, %object
+	.size	__func__.21081, 11
+__func__.21081:
+	.ascii	"FtlMemInit\000"
+.LC0:
+	.byte	60
+	.byte	40
+	.byte	24
+	.byte	16
+	.space	1
+	.type	__func__.22011, %object
+	.size	__func__.22011, 21
+__func__.22011:
+	.ascii	"FtlVpcCheckAndModify\000"
+	.space	3
+	.type	__func__.21152, %object
+	.size	__func__.21152, 8
+__func__.21152:
+	.ascii	"FtlInit\000"
+	.section	.rodata.str1.1,"aMS",%progbits,1
+.LC1:
+	.ascii	"FlashEraseBlocks pageAddr error %x\012\000"
+.LC2:
+	.ascii	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\012"
+	.ascii	"\000"
+.LC3:
+	.ascii	"remove_from_free_sys_Queue %x\012\000"
+.LC4:
+	.ascii	"FLASH INFO:\012\000"
+.LC5:
+	.ascii	"FLASH ID: %x\012\000"
+.LC6:
+	.ascii	"Device Capacity: %d MB\012\000"
+.LC7:
+	.ascii	"FMWAIT: %x %x %x %x\012\000"
+.LC8:
+	.ascii	"FTL INFO:\012\000"
+.LC9:
+	.ascii	"g_MaxLpn = 0x%x\012\000"
+.LC10:
+	.ascii	"g_VaildLpn = 0x%x\012\000"
+.LC11:
+	.ascii	"read_page_count = 0x%x\012\000"
+.LC12:
+	.ascii	"discard_page_count = 0x%x\012\000"
+.LC13:
+	.ascii	"write_page_count = 0x%x\012\000"
+.LC14:
+	.ascii	"cache_write_count = 0x%x\012\000"
+.LC15:
+	.ascii	"l2p_write_count = 0x%x\012\000"
+.LC16:
+	.ascii	"gc_page_count = 0x%x\012\000"
+.LC17:
+	.ascii	"totle_write = %d MB\012\000"
+.LC18:
+	.ascii	"totle_read = %d MB\012\000"
+.LC19:
+	.ascii	"GSV = 0x%x\012\000"
+.LC20:
+	.ascii	"GDV = 0x%x\012\000"
+.LC21:
+	.ascii	"bad blk num = %d %d\012\000"
+.LC22:
+	.ascii	"free_superblocks = 0x%x\012\000"
+.LC23:
+	.ascii	"mlc_EC = 0x%x\012\000"
+.LC24:
+	.ascii	"slc_EC = 0x%x\012\000"
+.LC25:
+	.ascii	"avg_EC = 0x%x\012\000"
+.LC26:
+	.ascii	"sys_EC = 0x%x\012\000"
+.LC27:
+	.ascii	"max_EC = 0x%x\012\000"
+.LC28:
+	.ascii	"min_EC = 0x%x\012\000"
+.LC29:
+	.ascii	"PLT = 0x%x\012\000"
+.LC30:
+	.ascii	"POT = 0x%x\012\000"
+.LC31:
+	.ascii	"MaxSector = 0x%x\012\000"
+.LC32:
+	.ascii	"init_sys_blks_pp = 0x%x\012\000"
+.LC33:
+	.ascii	"sys_blks_pp = 0x%x\012\000"
+.LC34:
+	.ascii	"free sysblock = 0x%x\012\000"
+.LC35:
+	.ascii	"data_blks_pp = 0x%x\012\000"
+.LC36:
+	.ascii	"data_op_blks_pp = 0x%x\012\000"
+.LC37:
+	.ascii	"max_data_blks = 0x%x\012\000"
+.LC38:
+	.ascii	"Sys.id = 0x%x\012\000"
+.LC39:
+	.ascii	"Bbt.id = 0x%x\012\000"
+.LC40:
+	.ascii	"ACT.page = 0x%x\012\000"
+.LC41:
+	.ascii	"ACT.plane = 0x%x\012\000"
+.LC42:
+	.ascii	"ACT.id = 0x%x\012\000"
+.LC43:
+	.ascii	"ACT.mode = 0x%x\012\000"
+.LC44:
+	.ascii	"ACT.a_pages = 0x%x\012\000"
+.LC45:
+	.ascii	"ACT VPC = 0x%x\012\000"
+.LC46:
+	.ascii	"BUF.page = 0x%x\012\000"
+.LC47:
+	.ascii	"BUF.plane = 0x%x\012\000"
+.LC48:
+	.ascii	"BUF.id = 0x%x\012\000"
+.LC49:
+	.ascii	"BUF.mode = 0x%x\012\000"
+.LC50:
+	.ascii	"BUF.a_pages = 0x%x\012\000"
+.LC51:
+	.ascii	"BUF VPC = 0x%x\012\000"
+.LC52:
+	.ascii	"TMP.page = 0x%x\012\000"
+.LC53:
+	.ascii	"TMP.plane = 0x%x\012\000"
+.LC54:
+	.ascii	"TMP.id = 0x%x\012\000"
+.LC55:
+	.ascii	"TMP.mode = 0x%x\012\000"
+.LC56:
+	.ascii	"TMP.a_pages = 0x%x\012\000"
+.LC57:
+	.ascii	"GC.page = 0x%x\012\000"
+.LC58:
+	.ascii	"GC.plane = 0x%x\012\000"
+.LC59:
+	.ascii	"GC.id = 0x%x\012\000"
+.LC60:
+	.ascii	"GC.mode = 0x%x\012\000"
+.LC61:
+	.ascii	"GC.a_pages = 0x%x\012\000"
+.LC62:
+	.ascii	"WR_CHK = 0x%x %x %x %x\012\000"
+.LC63:
+	.ascii	"Read Err Cnt = 0x%x\012\000"
+.LC64:
+	.ascii	"Prog Err Cnt = 0x%x\012\000"
+.LC65:
+	.ascii	"gc_free_blk_th= 0x%x\012\000"
+.LC66:
+	.ascii	"gc_merge_free_blk_th= 0x%x\012\000"
+.LC67:
+	.ascii	"gc_skip_write_count= 0x%x\012\000"
+.LC68:
+	.ascii	"gc_blk_index= 0x%x\012\000"
+.LC69:
+	.ascii	"free min EC= 0x%x\012\000"
+.LC70:
+	.ascii	"free max EC= 0x%x\012\000"
+.LC71:
+	.ascii	"GC__SB VPC = 0x%x\012\000"
+.LC72:
+	.ascii	"%d. [0x%x]=0x%x 0x%x  0x%x\012\000"
+.LC73:
+	.ascii	"free %d. [0x%x] 0x%x  0x%x\012\000"
+.LC74:
+	.ascii	"%s\012\000"
+.LC75:
+	.ascii	"FTL version: 5.0.47 20171213\000"
+.LC76:
+	.ascii	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x"
+	.ascii	"\012\000"
+.LC77:
+	.ascii	"FtlGcRefreshBlock  0x%x\012\000"
+.LC78:
+	.ascii	"FtlGcMarkBadPhyBlk %d 0x%x\012\000"
+.LC79:
+	.ascii	"%s error allocating memory. return -1\012\000"
+.LC80:
+	.ascii	"%s 0x%x:\000"
+.LC81:
+	.ascii	"%x \000"
+.LC82:
+	.ascii	"\000"
+.LC83:
+	.ascii	"otp error! %d\000"
+.LC84:
+	.ascii	"rr\000"
+.LC85:
+	.ascii	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\012"
+	.ascii	"\000"
+.LC86:
+	.ascii	"nandc:\000"
+.LC87:
+	.ascii	"%d flReg.d32=%x %x\012\000"
+.LC88:
+	.ascii	"sdr read ok %x ecc=%d\012\000"
+.LC89:
+	.ascii	"sync para %d\012\000"
+.LC90:
+	.ascii	"TOG mode Read error %x %x\012\000"
+.LC91:
+	.ascii	"read retry status %x %x %x\012\000"
+.LC92:
+	.ascii	"micron RR %d row=%x,count %d,status=%d\012\000"
+.LC93:
+	.ascii	"ECC:%d\012\000"
+.LC94:
+	.ascii	"No.%d FLASH ID:%x %x %x %x %x %x\012\000"
+.LC95:
+	.ascii	"FlashLoadPhyInfo fail %x!!\012\000"
+.LC96:
+	.ascii	"Read pageadd=%x  ecc=%x err=%x\012\000"
+.LC97:
+	.ascii	"data:\000"
+.LC98:
+	.ascii	"spare:\000"
+.LC99:
+	.ascii	"ReadRetry pageadd=%x ecc=%x err=%x\012\000"
+.LC100:
+	.ascii	"FLFB:%d %d\012\000"
+.LC101:
+	.ascii	"prog error: = %x\012\000"
+.LC102:
+	.ascii	"prog read error: = %x\012\000"
+.LC103:
+	.ascii	"prog read s error: = %x %x %x\012\000"
+.LC104:
+	.ascii	"prog read d error: = %x %x %x\012\000"
+.LC105:
+	.ascii	"FtlGcScanTempBlkError ID %x %x!!!!!!!\012\000"
+.LC106:
+	.ascii	"FlashMakeFactorBbt %d\012\000"
+.LC107:
+	.ascii	"bad block:%d %d\012\000"
+.LC108:
+	.ascii	"FMFB:%d %d\012\000"
+.LC109:
+	.ascii	"E:bad block:%d\012\000"
+.LC110:
+	.ascii	"FMFB:Save %d %d\012\000"
+.LC111:
+	.ascii	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\012\000"
+.LC112:
+	.ascii	"FtlBbmTblFlush error:%x\012\000"
+.LC113:
+	.ascii	"FtlBbmTblFlush error = %x error count = %d\012\000"
+.LC114:
+	.ascii	"FtlGcFreeBadSuperBlk 0x%x\012\000"
+.LC115:
+	.ascii	"decrement_vpc_count %x = %d\012\000"
+.LC116:
+	.ascii	"FtlVpcTblFlush error = %x error count = %d\012\000"
+.LC117:
+	.ascii	"ftl_map_blk_gc blk info: %x %x %x\012\000"
+.LC118:
+	.ascii	"page map lost: %x %x\012\000"
+.LC119:
+	.ascii	"FtlMapWritePage error = %x\012\000"
+.LC120:
+	.ascii	"FtlMapWritePage error = %x error count = %d\012\000"
+.LC121:
+	.ascii	"load_l2p_region refresh = %x phyAddr = %x\012\000"
+.LC122:
+	.ascii	"page map lost %x %x %x %x\012\000"
+.LC123:
+	.ascii	"FtlVendorPartRead refresh = %x phyAddr = %x\012\000"
+.LC124:
+	.ascii	"no ect\000"
+.LC125:
+	.ascii	"slc mode\000"
+.LC126:
+	.ascii	"RSB refresh addr %x\012\000"
+.LC127:
+	.ascii	"spuer block %x vpn is 0\012 \000"
+.LC128:
+	.ascii	"g_recovery_ppa %x ver %x\012 \000"
+.LC129:
+	.ascii	"...%s enter...\012\000"
+.LC130:
+	.ascii	"FtlCheckVpc %x = %x  %x\012\000"
+.LC131:
+	.ascii	"%d GC datablk  = %x vpc %x %x\012\000"
+.LC132:
+	.ascii	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\012\000"
+.LC133:
+	.ascii	"Ftlwrite decrement_vpc_count %x = %d\012\000"
+.LC134:
+	.ascii	"GC des block %x done\012\000"
+.LC135:
+	.ascii	"fix power lost blk = %x vpc=%x\012\000"
+.LC136:
+	.ascii	"erase power lost blk = %x vpc=%x\012\000"
+.LC137:
+	.ascii	"...%s: no bad block mapping table, format device\012"
+	.ascii	"\000"
+.LC138:
+	.ascii	"...%s FtlSysBlkInit error ,format device!\012\000"
+.LC139:
+	.ascii	"FtlInit %x\012\000"
+.LC140:
+	.ascii	"FtlWrite: lpa error:%x %x\012\000"
+.LC141:
+	.ascii	"BBT:\000"
+.LC142:
+	.ascii	"IdBlockReadData %x %x\012\000"
+.LC143:
+	.ascii	"IdBlockReadData %x %x ret= %x\012\000"
+.LC144:
+	.ascii	"IDBlockWriteData %x %x\012\000"
+.LC145:
+	.ascii	"IDBlockWriteData %x %x ret= %x\012\000"
+.LC146:
+	.ascii	"idblk:\000"
+.LC147:
+	.ascii	"idb reverse %x %x\012\000"
+.LC148:
+	.ascii	"write_idblock totle_sec %x %x\012\000"
+.LC149:
+	.ascii	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x"
+	.ascii	"\012\000"
+.LC150:
+	.ascii	"write\000"
+.LC151:
+	.ascii	"read\000"
+.LC152:
+	.ascii	"write_idblock error\012\000"
+.LC153:
+	.ascii	"READ_SECTOR_IO\012\000"
+.LC154:
+	.ascii	"rk_copy_from_user error\012\000"
+.LC155:
+	.ascii	"READ_SECTOR_IO %x %x\012\000"
+.LC156:
+	.ascii	"rk_copy_to_user error\012\000"
+.LC157:
+	.ascii	"WRITE_SECTOR_IO\012\000"
+.LC158:
+	.ascii	"WRITE_SECTOR_IO %x %x\012\000"
+.LC159:
+	.ascii	"END_WRITE_SECTOR_IO\012\000"
+.LC160:
+	.ascii	"END_WRITE_SECTOR_IO %x %x\012\000"
+.LC161:
+	.ascii	"GET_FLASH_INFO_IO\012\000"
+.LC162:
+	.ascii	"GET_BAD_BLOCK_IO\012\000"
+.LC163:
+	.ascii	"bbt:\000"
+.LC164:
+	.ascii	"GET_LOCK_FLAG_IO\012\000"
+.LC165:
+	.ascii	"GET_PUBLIC_KEY_IO\012\000"
+.LC166:
+	.ascii	"RKNAND_GET_DRM_KEY\012\000"
+.LC167:
+	.ascii	"RKNAND_STORE_DRM_KEY\012\000"
+.LC168:
+	.ascii	"RKNAND_DIASBLE_SECURE_BOOT\012\000"
+.LC169:
+	.ascii	"RKNAND_ENASBLE_SECURE_BOOT\012\000"
+.LC170:
+	.ascii	"RKNAND_GET_SN_SECTOR\012\000"
+.LC171:
+	.ascii	"RKNAND_LOADER_UNLOCK\012\000"
+.LC172:
+	.ascii	"RKNAND_LOADER_STATUS\012\000"
+.LC173:
+	.ascii	"RKNAND_LOADER_LOCK\012\000"
+.LC174:
+	.ascii	"LockKey not match %d\012\000"
+.LC175:
+	.ascii	"RKNAND_GET_VENDOR_SECTOR\012\000"
+.LC176:
+	.ascii	"RKNAND_STORE_VENDOR_SECTOR\012\000"
+.LC177:
+	.ascii	"return ret = %lx\012\000"
+.LC178:
+	.ascii	"secureBootEn check error\012\000"
+.LC179:
+	.ascii	"\0013vendor storage %x,%x,%x\012\000"
+	.data
+	.align	2
+.LANCHOR1 = . + 0
+	.type	random_seed, %object
+	.size	random_seed, 256
+random_seed:
+	.short	22378
+	.short	1512
+	.short	25245
+	.short	17827
+	.short	25756
+	.short	19440
+	.short	9026
+	.short	10030
+	.short	29528
+	.short	20467
+	.short	29676
+	.short	24432
+	.short	31328
+	.short	6872
+	.short	13426
+	.short	13842
+	.short	8783
+	.short	1108
+	.short	782
+	.short	28837
+	.short	30729
+	.short	9505
+	.short	18676
+	.short	23085
+	.short	18730
+	.short	1085
+	.short	32609
+	.short	14697
+	.short	20858
+	.short	15170
+	.short	30365
+	.short	1607
+	.short	32298
+	.short	4995
+	.short	18905
+	.short	1976
+	.short	9592
+	.short	20204
+	.short	17443
+	.short	13615
+	.short	23330
+	.short	29369
+	.short	13947
+	.short	9398
+	.short	32398
+	.short	8984
+	.short	27600
+	.short	21785
+	.short	6019
+	.short	6311
+	.short	31598
+	.short	30210
+	.short	19327
+	.short	13896
+	.short	11347
+	.short	27545
+	.short	3107
+	.short	26575
+	.short	32270
+	.short	19852
+	.short	20601
+	.short	8349
+	.short	9290
+	.short	29819
+	.short	13579
+	.short	3661
+	.short	28676
+	.short	27331
+	.short	32574
+	.short	8693
+	.short	31253
+	.short	9081
+	.short	5399
+	.short	6842
+	.short	20087
+	.short	5537
+	.short	1274
+	.short	11617
+	.short	9530
+	.short	4866
+	.short	8035
+	.short	23219
+	.short	1178
+	.short	23272
+	.short	7383
+	.short	18944
+	.short	12488
+	.short	12871
+	.short	29340
+	.short	20532
+	.short	11022
+	.short	22514
+	.short	228
+	.short	22363
+	.short	24978
+	.short	14584
+	.short	12138
+	.short	3092
+	.short	17916
+	.short	16863
+	.short	14554
+	.short	31457
+	.short	29474
+	.short	25311
+	.short	24121
+	.short	3684
+	.short	28037
+	.short	22865
+	.short	22839
+	.short	25217
+	.short	13217
+	.short	27186
+	.short	14938
+	.short	11180
+	.short	29754
+	.short	24180
+	.short	15150
+	.short	32455
+	.short	20434
+	.short	23848
+	.short	29983
+	.short	16120
+	.short	14769
+	.short	20041
+	.short	29803
+	.short	28406
+	.short	17598
+	.short	28087
+	.type	gNandParaInfo, %object
+	.size	gNandParaInfo, 32
+gNandParaInfo:
+	.byte	0
+	.byte	0
+	.space	5
+	.byte	0
+	.byte	1
+	.byte	8
+	.short	128
+	.byte	2
+	.byte	1
+	.short	2048
+	.short	0
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	ToshibaA19RefValue, %object
+	.size	ToshibaA19RefValue, 45
+ToshibaA19RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.space	3
+	.type	Toshiba15RefValue, %object
+	.size	Toshiba15RefValue, 95
+Toshiba15RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.space	1
+	.type	ToshibaRefValue, %object
+	.size	ToshibaRefValue, 8
+ToshibaRefValue:
+	.byte	0
+	.byte	4
+	.byte	124
+	.byte	120
+	.byte	116
+	.byte	8
+	.byte	12
+	.byte	112
+	.type	SamsungRefValue, %object
+	.size	SamsungRefValue, 64
+SamsungRefValue:
+	.byte	-89
+	.byte	-92
+	.byte	-91
+	.byte	-90
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	10
+	.byte	0
+	.byte	0
+	.byte	40
+	.byte	0
+	.byte	-20
+	.byte	-40
+	.byte	-19
+	.byte	-11
+	.byte	-19
+	.byte	-26
+	.byte	10
+	.byte	15
+	.byte	5
+	.byte	0
+	.byte	15
+	.byte	10
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-17
+	.byte	-24
+	.byte	-36
+	.byte	-15
+	.byte	-5
+	.byte	-2
+	.byte	-16
+	.byte	10
+	.byte	0
+	.byte	-5
+	.byte	-20
+	.byte	-48
+	.byte	-30
+	.byte	-48
+	.byte	-62
+	.byte	20
+	.byte	15
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-5
+	.byte	-24
+	.byte	-36
+	.byte	30
+	.byte	20
+	.byte	-5
+	.byte	-20
+	.byte	-5
+	.byte	-1
+	.byte	-5
+	.byte	-8
+	.byte	7
+	.byte	12
+	.byte	2
+	.byte	0
+	.type	gFtlInitStatus, %object
+	.size	gFtlInitStatus, 4
+gFtlInitStatus:
+	.word	-1
+	.type	NandFlashParaTbl, %object
+	.size	NandFlashParaTbl, 2304
+NandFlashParaTbl:
+	.byte	6
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	68
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1064
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	4
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-88
+	.byte	5
+	.byte	-53
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	74
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	84
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	128
+	.byte	2
+	.byte	2
+	.short	4096
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	70
+	.byte	-123
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-120
+	.byte	5
+	.byte	-58
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	0
+	.byte	39
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	1
+	.byte	2
+	.short	2048
+	.short	287
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	86
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	24
+	.short	512
+	.byte	2
+	.byte	2
+	.short	700
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	-59
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-43
+	.byte	-47
+	.byte	-90
+	.byte	104
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.short	64
+	.byte	1
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	44
+	.byte	-36
+	.byte	-112
+	.byte	-90
+	.byte	84
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.short	64
+	.byte	1
+	.byte	2
+	.short	1024
+	.short	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	84
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1024
+	.short	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	50
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1048
+	.short	1503
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.space	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.short	512
+	.byte	2
+	.byte	1
+	.short	1044
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-46
+	.byte	4
+	.byte	67
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	473
+	.byte	1
+	.byte	1
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-61
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	473
+	.byte	1
+	.byte	2
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-111
+	.byte	96
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1046
+	.short	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2090
+	.short	473
+	.byte	1
+	.byte	4
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-21
+	.byte	116
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	473
+	.byte	1
+	.byte	7
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	530
+	.short	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1024
+	.short	281
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-89
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1060
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	20
+	.byte	-98
+	.byte	52
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-89
+	.byte	66
+	.byte	72
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1060
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1056
+	.short	473
+	.byte	2
+	.byte	6
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2092
+	.short	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	-124
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	36
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-123
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	2
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1505
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-43
+	.byte	-124
+	.byte	50
+	.byte	114
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	1
+	.short	2056
+	.short	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2058
+	.short	1489
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2062
+	.short	1489
+	.byte	1
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-107
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	1
+	.byte	2
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	85
+	.byte	1
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2050
+	.short	401
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1056
+	.short	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2082
+	.short	473
+	.byte	1
+	.byte	65
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1066
+	.short	1497
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	1060
+	.short	1473
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2090
+	.short	1241
+	.byte	1
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	1
+	.short	2092
+	.short	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2106
+	.short	1497
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1074
+	.short	1497
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-92
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2138
+	.short	1497
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.short	256
+	.byte	2
+	.byte	2
+	.short	2062
+	.short	473
+	.byte	1
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	32
+	.short	256
+	.byte	2
+	.byte	2
+	.short	1058
+	.short	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	126
+	.byte	100
+	.byte	68
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	473
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	126
+	.byte	104
+	.byte	68
+	.byte	0
+	.byte	2
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2048
+	.short	505
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	122
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	409
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	122
+	.byte	88
+	.byte	67
+	.byte	0
+	.byte	2
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	441
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-43
+	.byte	-108
+	.byte	118
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	1038
+	.short	281
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	20
+	.byte	118
+	.byte	84
+	.byte	-62
+	.byte	0
+	.byte	1
+	.byte	16
+	.short	128
+	.byte	2
+	.byte	2
+	.short	2076
+	.short	1169
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	40
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	NandOptPara, %object
+	.size	NandOptPara, 128
+NandOptPara:
+	.byte	1
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	50
+	.byte	17
+	.byte	-128
+	.byte	112
+	.byte	120
+	.byte	120
+	.byte	3
+	.byte	1
+	.byte	0
+	.space	14
+	.byte	2
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	0
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	3
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.byte	4
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	112
+	.byte	112
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	14
+	.type	refValueDefault, %object
+	.size	refValueDefault, 28
+refValueDefault:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.type	gSlcNandParaInfo, %object
+	.size	gSlcNandParaInfo, 32
+gSlcNandParaInfo:
+	.byte	2
+	.byte	-104
+	.byte	-15
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	1
+	.byte	1
+	.byte	4
+	.short	64
+	.byte	1
+	.byte	1
+	.short	1024
+	.short	256
+	.byte	0
+	.byte	0
+	.byte	16
+	.byte	40
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.space	4
+	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
+	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
+ftl_gc_temp_block_bops_scan_page_addr:
+	.short	-1
+	.space	2
+	.type	power_up_flag, %object
+	.size	power_up_flag, 4
+power_up_flag:
+	.word	1
+	.type	gTable_Crc32, %object
+	.size	gTable_Crc32, 1024
+gTable_Crc32:
+	.word	0
+	.word	79760823
+	.word	159521646
+	.word	222500569
+	.word	319043292
+	.word	398801771
+	.word	445001138
+	.word	507977733
+	.word	638086584
+	.word	583622671
+	.word	797603542
+	.word	726367073
+	.word	890002276
+	.word	835540691
+	.word	1015955466
+	.word	944721341
+	.word	1276173168
+	.word	1221711559
+	.word	1167245342
+	.word	1096011177
+	.word	1595207084
+	.word	1540743195
+	.word	1452734146
+	.word	1381497717
+	.word	1780004552
+	.word	1859763071
+	.word	1671081382
+	.word	1734058001
+	.word	2031910932
+	.word	2111671715
+	.word	1889442682
+	.word	1952421581
+	.word	-1742620960
+	.word	-1662993577
+	.word	-1851544178
+	.word	-1788698567
+	.word	-1960476612
+	.word	-1880846965
+	.word	-2102944942
+	.word	-2040097051
+	.word	-1104553128
+	.word	-1159145745
+	.word	-1213480906
+	.word	-1284846207
+	.word	-1389499004
+	.word	-1444093901
+	.word	-1531971862
+	.word	-1603339427
+	.word	-734958192
+	.word	-789553113
+	.word	-575441154
+	.word	-646808759
+	.word	-952804532
+	.word	-1007397125
+	.word	-826851294
+	.word	-898216555
+	.word	-231145432
+	.word	-151515745
+	.word	-71623866
+	.word	-8775951
+	.word	-516081932
+	.word	-436454589
+	.word	-390124134
+	.word	-327278547
+	.word	880959607
+	.word	809725376
+	.word	1023441689
+	.word	968980142
+	.word	663115435
+	.word	591878940
+	.word	772033989
+	.word	717570162
+	.word	311037391
+	.word	374014072
+	.word	453514913
+	.word	533273366
+	.word	26098451
+	.word	89077412
+	.word	135012477
+	.word	214773194
+	.word	2022882055
+	.word	2085861040
+	.word	1896915049
+	.word	1976675806
+	.word	1805028827
+	.word	1868005484
+	.word	1645516469
+	.word	1725274882
+	.word	1587205823
+	.word	1515969288
+	.word	1461243345
+	.word	1406779494
+	.word	1302257763
+	.word	1231023572
+	.word	1142749965
+	.word	1088288442
+	.word	-1398548841
+	.word	-1469916384
+	.word	-1524511239
+	.word	-1579106226
+	.word	-1079517109
+	.word	-1150882308
+	.word	-1239024859
+	.word	-1293617518
+	.word	-1968456913
+	.word	-1905609064
+	.word	-2094423999
+	.word	-2014794250
+	.word	-1716548109
+	.word	-1653702588
+	.word	-1876060515
+	.word	-1796433110
+	.word	-525136409
+	.word	-462290864
+	.word	-382658935
+	.word	-303031490
+	.word	-206095557
+	.word	-143247732
+	.word	-97181611
+	.word	-17551902
+	.word	-960798625
+	.word	-1032163864
+	.word	-818316495
+	.word	-872909178
+	.word	-708880765
+	.word	-780248268
+	.word	-599962131
+	.word	-654557094
+	.word	1761919214
+	.word	1841679705
+	.word	1619450752
+	.word	1682429495
+	.word	2046883378
+	.word	2126642053
+	.word	1937960284
+	.word	2000937195
+	.word	1326230870
+	.word	1271767265
+	.word	1183757880
+	.word	1112521615
+	.word	1544067978
+	.word	1489606205
+	.word	1435140324
+	.word	1363905875
+	.word	622074782
+	.word	567612969
+	.word	748028144
+	.word	676793671
+	.word	907029826
+	.word	852566261
+	.word	1066546732
+	.word	995310491
+	.word	52196902
+	.word	131955601
+	.word	178154824
+	.word	241131775
+	.word	270024954
+	.word	349785421
+	.word	429546388
+	.word	492525091
+	.word	-249203186
+	.word	-169575495
+	.word	-123245216
+	.word	-60399401
+	.word	-501137198
+	.word	-421507739
+	.word	-341615684
+	.word	-278768117
+	.word	-684909642
+	.word	-739502591
+	.word	-558956328
+	.word	-630321809
+	.word	-1003934358
+	.word	-1058529059
+	.word	-844417532
+	.word	-915784781
+	.word	-1120555650
+	.word	-1175150391
+	.word	-1263028720
+	.word	-1334395993
+	.word	-1372480606
+	.word	-1427073515
+	.word	-1481408308
+	.word	-1552773765
+	.word	-1690451770
+	.word	-1610822287
+	.word	-1832920152
+	.word	-1770072545
+	.word	-2009467366
+	.word	-1929839699
+	.word	-2118390412
+	.word	-2055544637
+	.word	1569104025
+	.word	1497869614
+	.word	1409596407
+	.word	1355134528
+	.word	1317180997
+	.word	1245944818
+	.word	1191218475
+	.word	1136754844
+	.word	2072956193
+	.word	2135933078
+	.word	1913443919
+	.word	1993202680
+	.word	1753938941
+	.word	1816917578
+	.word	1627971731
+	.word	1707732260
+	.word	295074793
+	.word	358053470
+	.word	403988615
+	.word	483749168
+	.word	43142453
+	.word	106119298
+	.word	185620059
+	.word	265378796
+	.word	933107281
+	.word	861871078
+	.word	1042025791
+	.word	987562120
+	.word	614080653
+	.word	542846266
+	.word	756562915
+	.word	702101076
+	.word	-978905479
+	.word	-1050272818
+	.word	-869987049
+	.word	-924581728
+	.word	-693952347
+	.word	-765317870
+	.word	-551470133
+	.word	-606062980
+	.word	-475038783
+	.word	-412191114
+	.word	-366124881
+	.word	-286495464
+	.word	-257209059
+	.word	-194363222
+	.word	-114731405
+	.word	-35103804
+	.word	-1984443127
+	.word	-1921597250
+	.word	-2143955353
+	.word	-2064327728
+	.word	-1699480619
+	.word	-1636632990
+	.word	-1825447749
+	.word	-1745818356
+	.word	-1346395983
+	.word	-1417761530
+	.word	-1505903649
+	.word	-1560496536
+	.word	-1128556947
+	.word	-1199924262
+	.word	-1254519549
+	.word	-1309114188
+	.bss
+	.align	2
+.LANCHOR0 = . + 0
+.LANCHOR2 = . + 4344
+.LANCHOR4 = . + 8688
+	.type	g_slc2KBNand, %object
+	.size	g_slc2KBNand, 1
+g_slc2KBNand:
+	.space	1
+	.type	gNandIDBResBlkNum, %object
+	.size	gNandIDBResBlkNum, 1
+gNandIDBResBlkNum:
+	.space	1
+	.space	2
+	.type	gBlockPageAlignSize, %object
+	.size	gBlockPageAlignSize, 4
+gBlockPageAlignSize:
+	.space	4
+	.type	gNandRandomizer, %object
+	.size	gNandRandomizer, 1
+gNandRandomizer:
+	.space	1
+	.space	3
+	.type	gNandChipMap, %object
+	.size	gNandChipMap, 32
+gNandChipMap:
+	.space	32
+	.type	gNandOptPara, %object
+	.size	gNandOptPara, 32
+gNandOptPara:
+	.space	32
+	.type	gFlashSlcMode, %object
+	.size	gFlashSlcMode, 1
+gFlashSlcMode:
+	.space	1
+	.space	3
+	.type	slcPageToMlcPageTbl, %object
+	.size	slcPageToMlcPageTbl, 512
+slcPageToMlcPageTbl:
+	.space	512
+	.type	mlcPageToSlcPageTbl, %object
+	.size	mlcPageToSlcPageTbl, 1024
+mlcPageToSlcPageTbl:
+	.space	1024
+	.type	gNandMaxDie, %object
+	.size	gNandMaxDie, 1
+gNandMaxDie:
+	.space	1
+	.type	gNandMaxChip, %object
+	.size	gNandMaxChip, 1
+gNandMaxChip:
+	.space	1
+	.space	2
+	.type	DieCsIndex, %object
+	.size	DieCsIndex, 8
+DieCsIndex:
+	.space	8
+	.type	DieAddrs, %object
+	.size	DieAddrs, 32
+DieAddrs:
+	.space	32
+	.type	gDieOp, %object
+	.size	gDieOp, 128
+gDieOp:
+	.space	128
+	.type	gpNandParaInfo, %object
+	.size	gpNandParaInfo, 4
+gpNandParaInfo:
+	.space	4
+	.type	IDByte, %object
+	.size	IDByte, 32
+IDByte:
+	.space	32
+	.type	gTotleBlock, %object
+	.size	gTotleBlock, 2
+gTotleBlock:
+	.space	2
+	.space	2
+	.type	gpNandc, %object
+	.size	gpNandc, 4
+gpNandc:
+	.space	4
+	.type	NANDC_FMCTL, %object
+	.size	NANDC_FMCTL, 4
+NANDC_FMCTL:
+	.space	4
+	.type	NANDC_FMWAIT, %object
+	.size	NANDC_FMWAIT, 4
+NANDC_FMWAIT:
+	.space	4
+	.type	NANDC_FLCTL, %object
+	.size	NANDC_FLCTL, 4
+NANDC_FLCTL:
+	.space	4
+	.type	NANDC_BCHCTL, %object
+	.size	NANDC_BCHCTL, 4
+NANDC_BCHCTL:
+	.space	4
+	.type	NANDC_DLL_CTL_REG0, %object
+	.size	NANDC_DLL_CTL_REG0, 4
+NANDC_DLL_CTL_REG0:
+	.space	4
+	.type	NANDC_DLL_CTL_REG1, %object
+	.size	NANDC_DLL_CTL_REG1, 4
+NANDC_DLL_CTL_REG1:
+	.space	4
+	.type	NANDC_RANDMZ_CFG, %object
+	.size	NANDC_RANDMZ_CFG, 4
+NANDC_RANDMZ_CFG:
+	.space	4
+	.type	NANDC_FMWAIT_SYN, %object
+	.size	NANDC_FMWAIT_SYN, 4
+NANDC_FMWAIT_SYN:
+	.space	4
+	.type	gNandPhyInfo, %object
+	.size	gNandPhyInfo, 28
+gNandPhyInfo:
+	.space	28
+	.type	gNandFlashEccBits, %object
+	.size	gNandFlashEccBits, 1
+gNandFlashEccBits:
+	.space	1
+	.space	3
+	.type	FlashWaitBusyScheduleEn, %object
+	.size	FlashWaitBusyScheduleEn, 4
+FlashWaitBusyScheduleEn:
+	.space	4
+	.type	g_retryMode, %object
+	.size	g_retryMode, 1
+g_retryMode:
+	.space	1
+	.type	g_maxRegNum, %object
+	.size	g_maxRegNum, 1
+g_maxRegNum:
+	.space	1
+	.type	gReadRetryInfo, %object
+	.size	gReadRetryInfo, 852
+gReadRetryInfo:
+	.space	852
+	.space	2
+	.type	read_retry_cur_offset, %object
+	.size	read_retry_cur_offset, 4
+read_retry_cur_offset:
+	.space	4
+	.type	gFlashInterfaceMode, %object
+	.size	gFlashInterfaceMode, 1
+gFlashInterfaceMode:
+	.space	1
+	.type	gFlashToggleModeEn, %object
+	.size	gFlashToggleModeEn, 1
+gFlashToggleModeEn:
+	.space	1
+	.space	2
+	.type	gBootDdrMode, %object
+	.size	gBootDdrMode, 4
+gBootDdrMode:
+	.space	4
+	.type	gNandcVer, %object
+	.size	gNandcVer, 4
+gNandcVer:
+	.space	4
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.space	4
+	.type	gMasterTempBuf, %object
+	.size	gMasterTempBuf, 4
+gMasterTempBuf:
+	.space	4
+	.type	gMasterInfo, %object
+	.size	gMasterInfo, 32
+gMasterInfo:
+	.space	32
+	.type	gNandcDumpWriteEn, %object
+	.size	gNandcDumpWriteEn, 4
+gNandcDumpWriteEn:
+	.space	4
+	.type	gNandcEccBits, %object
+	.size	gNandcEccBits, 4
+gNandcEccBits:
+	.space	4
+	.type	gMultiPageProgEn, %object
+	.size	gMultiPageProgEn, 1
+gMultiPageProgEn:
+	.space	1
+	.space	3
+	.type	c_ftl_nand_sys_blks_per_plane, %object
+	.size	c_ftl_nand_sys_blks_per_plane, 4
+c_ftl_nand_sys_blks_per_plane:
+	.space	4
+	.type	c_ftl_nand_planes_num, %object
+	.size	c_ftl_nand_planes_num, 2
+c_ftl_nand_planes_num:
+	.space	2
+	.space	2
+	.type	c_ftl_nand_max_sys_blks, %object
+	.size	c_ftl_nand_max_sys_blks, 4
+c_ftl_nand_max_sys_blks:
+	.space	4
+	.type	c_ftl_nand_data_blks_per_plane, %object
+	.size	c_ftl_nand_data_blks_per_plane, 2
+c_ftl_nand_data_blks_per_plane:
+	.space	2
+	.type	c_ftl_nand_blk_pre_plane, %object
+	.size	c_ftl_nand_blk_pre_plane, 2
+c_ftl_nand_blk_pre_plane:
+	.space	2
+	.type	c_ftl_nand_max_data_blks, %object
+	.size	c_ftl_nand_max_data_blks, 4
+c_ftl_nand_max_data_blks:
+	.space	4
+	.type	c_ftl_nand_totle_phy_blks, %object
+	.size	c_ftl_nand_totle_phy_blks, 4
+c_ftl_nand_totle_phy_blks:
+	.space	4
+	.type	c_ftl_nand_type, %object
+	.size	c_ftl_nand_type, 2
+c_ftl_nand_type:
+	.space	2
+	.type	c_ftl_nand_die_num, %object
+	.size	c_ftl_nand_die_num, 2
+c_ftl_nand_die_num:
+	.space	2
+	.type	c_ftl_nand_planes_per_die, %object
+	.size	c_ftl_nand_planes_per_die, 2
+c_ftl_nand_planes_per_die:
+	.space	2
+	.space	2
+	.type	p_plane_order_table, %object
+	.size	p_plane_order_table, 32
+p_plane_order_table:
+	.space	32
+	.type	c_mlc_erase_count_value, %object
+	.size	c_mlc_erase_count_value, 2
+c_mlc_erase_count_value:
+	.space	2
+	.type	c_ftl_nand_ext_blk_pre_plane, %object
+	.size	c_ftl_nand_ext_blk_pre_plane, 2
+c_ftl_nand_ext_blk_pre_plane:
+	.space	2
+	.type	c_ftl_vendor_part_size, %object
+	.size	c_ftl_vendor_part_size, 2
+c_ftl_vendor_part_size:
+	.space	2
+	.type	c_ftl_nand_blks_per_die, %object
+	.size	c_ftl_nand_blks_per_die, 2
+c_ftl_nand_blks_per_die:
+	.space	2
+	.type	c_ftl_nand_blks_per_die_shift, %object
+	.size	c_ftl_nand_blks_per_die_shift, 2
+c_ftl_nand_blks_per_die_shift:
+	.space	2
+	.type	c_ftl_nand_page_pre_blk, %object
+	.size	c_ftl_nand_page_pre_blk, 2
+c_ftl_nand_page_pre_blk:
+	.space	2
+	.type	c_ftl_nand_page_pre_slc_blk, %object
+	.size	c_ftl_nand_page_pre_slc_blk, 2
+c_ftl_nand_page_pre_slc_blk:
+	.space	2
+	.type	c_ftl_nand_page_pre_super_blk, %object
+	.size	c_ftl_nand_page_pre_super_blk, 2
+c_ftl_nand_page_pre_super_blk:
+	.space	2
+	.type	c_ftl_nand_sec_pre_page, %object
+	.size	c_ftl_nand_sec_pre_page, 2
+c_ftl_nand_sec_pre_page:
+	.space	2
+	.type	c_ftl_nand_sec_pre_page_shift, %object
+	.size	c_ftl_nand_sec_pre_page_shift, 2
+c_ftl_nand_sec_pre_page_shift:
+	.space	2
+	.type	c_ftl_nand_byte_pre_page, %object
+	.size	c_ftl_nand_byte_pre_page, 2
+c_ftl_nand_byte_pre_page:
+	.space	2
+	.type	c_ftl_nand_byte_pre_oob, %object
+	.size	c_ftl_nand_byte_pre_oob, 2
+c_ftl_nand_byte_pre_oob:
+	.space	2
+	.type	c_ftl_nand_reserved_blks, %object
+	.size	c_ftl_nand_reserved_blks, 2
+c_ftl_nand_reserved_blks:
+	.space	2
+	.space	2
+	.type	DeviceCapacity, %object
+	.size	DeviceCapacity, 4
+DeviceCapacity:
+	.space	4
+	.type	c_ftl_nand_max_vendor_blks, %object
+	.size	c_ftl_nand_max_vendor_blks, 2
+c_ftl_nand_max_vendor_blks:
+	.space	2
+	.type	c_ftl_nand_vendor_region_num, %object
+	.size	c_ftl_nand_vendor_region_num, 2
+c_ftl_nand_vendor_region_num:
+	.space	2
+	.type	c_ftl_nand_map_blks_per_plane, %object
+	.size	c_ftl_nand_map_blks_per_plane, 2
+c_ftl_nand_map_blks_per_plane:
+	.space	2
+	.space	2
+	.type	c_ftl_nand_max_map_blks, %object
+	.size	c_ftl_nand_max_map_blks, 4
+c_ftl_nand_max_map_blks:
+	.space	4
+	.type	c_ftl_nand_init_sys_blks_per_plane, %object
+	.size	c_ftl_nand_init_sys_blks_per_plane, 4
+c_ftl_nand_init_sys_blks_per_plane:
+	.space	4
+	.type	c_ftl_nand_map_region_num, %object
+	.size	c_ftl_nand_map_region_num, 2
+c_ftl_nand_map_region_num:
+	.space	2
+	.type	c_ftl_nand_l2pmap_ram_region_num, %object
+	.size	c_ftl_nand_l2pmap_ram_region_num, 2
+c_ftl_nand_l2pmap_ram_region_num:
+	.space	2
+	.type	g_MaxLbaSector, %object
+	.size	g_MaxLbaSector, 4
+g_MaxLbaSector:
+	.space	4
+	.type	g_page_map_check_enable, %object
+	.size	g_page_map_check_enable, 2
+g_page_map_check_enable:
+	.space	2
+	.type	g_totle_vendor_block, %object
+	.size	g_totle_vendor_block, 2
+g_totle_vendor_block:
+	.space	2
+	.type	p_vendor_block_table, %object
+	.size	p_vendor_block_table, 4
+p_vendor_block_table:
+	.space	4
+	.type	g_wr_page_num, %object
+	.size	g_wr_page_num, 4
+g_wr_page_num:
+	.space	4
+	.type	req_wr_io, %object
+	.size	req_wr_io, 4
+req_wr_io:
+	.space	4
+	.type	g_MaxLpn, %object
+	.size	g_MaxLpn, 4
+g_MaxLpn:
+	.space	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.space	4
+	.type	gBbtInfo, %object
+	.size	gBbtInfo, 60
+gBbtInfo:
+	.space	60
+	.type	gSysFreeQueue, %object
+	.size	gSysFreeQueue, 2056
+gSysFreeQueue:
+	.space	2056
+	.type	g_flash_read_only_en, %object
+	.size	g_flash_read_only_en, 4
+g_flash_read_only_en:
+	.space	4
+	.type	req_erase, %object
+	.size	req_erase, 4
+req_erase:
+	.space	4
+	.type	p_erase_count_table, %object
+	.size	p_erase_count_table, 4
+p_erase_count_table:
+	.space	4
+	.type	g_totle_sys_slc_erase_count, %object
+	.size	g_totle_sys_slc_erase_count, 4
+g_totle_sys_slc_erase_count:
+	.space	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 4
+p_sys_data_buf:
+	.space	4
+	.type	p_data_block_list_table, %object
+	.size	p_data_block_list_table, 4
+p_data_block_list_table:
+	.space	4
+	.type	p_data_block_list_head, %object
+	.size	p_data_block_list_head, 4
+p_data_block_list_head:
+	.space	4
+	.type	p_valid_page_count_table, %object
+	.size	p_valid_page_count_table, 4
+p_valid_page_count_table:
+	.space	4
+	.type	p_data_block_list_tail, %object
+	.size	p_data_block_list_tail, 4
+p_data_block_list_tail:
+	.space	4
+	.type	g_num_data_superblocks, %object
+	.size	g_num_data_superblocks, 2
+g_num_data_superblocks:
+	.space	2
+	.space	2
+	.type	p_free_data_block_list_head, %object
+	.size	p_free_data_block_list_head, 4
+p_free_data_block_list_head:
+	.space	4
+	.type	g_num_free_superblocks, %object
+	.size	g_num_free_superblocks, 2
+g_num_free_superblocks:
+	.space	2
+	.space	2
+	.type	g_active_superblock, %object
+	.size	g_active_superblock, 48
+g_active_superblock:
+	.space	48
+	.type	g_buffer_superblock, %object
+	.size	g_buffer_superblock, 48
+g_buffer_superblock:
+	.space	48
+	.type	g_gc_temp_superblock, %object
+	.size	g_gc_temp_superblock, 48
+g_gc_temp_superblock:
+	.space	48
+	.type	p_l2p_ram_map, %object
+	.size	p_l2p_ram_map, 4
+p_l2p_ram_map:
+	.space	4
+	.type	g_l2p_last_update_region_id, %object
+	.size	g_l2p_last_update_region_id, 2
+g_l2p_last_update_region_id:
+	.space	2
+	.type	FtlUpdateVaildLpnCount, %object
+	.size	FtlUpdateVaildLpnCount, 2
+FtlUpdateVaildLpnCount:
+	.space	2
+	.type	g_VaildLpn, %object
+	.size	g_VaildLpn, 4
+g_VaildLpn:
+	.space	4
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 4
+p_blk_mode_table:
+	.space	4
+	.type	g_inkDie_check_enable, %object
+	.size	g_inkDie_check_enable, 4
+g_inkDie_check_enable:
+	.space	4
+	.type	g_totle_read_page_count, %object
+	.size	g_totle_read_page_count, 4
+g_totle_read_page_count:
+	.space	4
+	.type	g_totle_discard_page_count, %object
+	.size	g_totle_discard_page_count, 4
+g_totle_discard_page_count:
+	.space	4
+	.type	g_totle_write_page_count, %object
+	.size	g_totle_write_page_count, 4
+g_totle_write_page_count:
+	.space	4
+	.type	g_totle_cache_write_count, %object
+	.size	g_totle_cache_write_count, 4
+g_totle_cache_write_count:
+	.space	4
+	.type	g_totle_l2p_write_count, %object
+	.size	g_totle_l2p_write_count, 4
+g_totle_l2p_write_count:
+	.space	4
+	.type	g_totle_gc_page_count, %object
+	.size	g_totle_gc_page_count, 4
+g_totle_gc_page_count:
+	.space	4
+	.type	g_totle_write_sector, %object
+	.size	g_totle_write_sector, 4
+g_totle_write_sector:
+	.space	4
+	.type	g_totle_read_sector, %object
+	.size	g_totle_read_sector, 4
+g_totle_read_sector:
+	.space	4
+	.type	g_GlobalSysVersion, %object
+	.size	g_GlobalSysVersion, 4
+g_GlobalSysVersion:
+	.space	4
+	.type	g_GlobalDataVersion, %object
+	.size	g_GlobalDataVersion, 4
+g_GlobalDataVersion:
+	.space	4
+	.type	g_totle_mlc_erase_count, %object
+	.size	g_totle_mlc_erase_count, 4
+g_totle_mlc_erase_count:
+	.space	4
+	.type	g_totle_slc_erase_count, %object
+	.size	g_totle_slc_erase_count, 4
+g_totle_slc_erase_count:
+	.space	4
+	.type	g_totle_avg_erase_count, %object
+	.size	g_totle_avg_erase_count, 4
+g_totle_avg_erase_count:
+	.space	4
+	.type	g_max_erase_count, %object
+	.size	g_max_erase_count, 4
+g_max_erase_count:
+	.space	4
+	.type	g_min_erase_count, %object
+	.size	g_min_erase_count, 4
+g_min_erase_count:
+	.space	4
+	.type	g_sys_save_data, %object
+	.size	g_sys_save_data, 48
+g_sys_save_data:
+	.space	48
+	.type	c_ftl_nand_data_op_blks_per_plane, %object
+	.size	c_ftl_nand_data_op_blks_per_plane, 2
+c_ftl_nand_data_op_blks_per_plane:
+	.space	2
+	.space	2
+	.type	gSysInfo, %object
+	.size	gSysInfo, 12
+gSysInfo:
+	.space	12
+	.type	g_gc_superblock, %object
+	.size	g_gc_superblock, 48
+g_gc_superblock:
+	.space	48
+	.type	g_all_blk_used_slc_mode, %object
+	.size	g_all_blk_used_slc_mode, 4
+g_all_blk_used_slc_mode:
+	.space	4
+	.type	g_sys_ext_data, %object
+	.size	g_sys_ext_data, 512
+g_sys_ext_data:
+	.space	512
+	.type	g_gc_free_blk_threshold, %object
+	.size	g_gc_free_blk_threshold, 2
+g_gc_free_blk_threshold:
+	.space	2
+	.type	g_gc_merge_free_blk_threshold, %object
+	.size	g_gc_merge_free_blk_threshold, 2
+g_gc_merge_free_blk_threshold:
+	.space	2
+	.type	g_gc_skip_write_count, %object
+	.size	g_gc_skip_write_count, 4
+g_gc_skip_write_count:
+	.space	4
+	.type	g_gc_blk_index, %object
+	.size	g_gc_blk_index, 2
+g_gc_blk_index:
+	.space	2
+	.space	2
+	.type	g_in_swl_replace, %object
+	.size	g_in_swl_replace, 4
+g_in_swl_replace:
+	.space	4
+	.type	g_gc_num_req, %object
+	.size	g_gc_num_req, 4
+g_gc_num_req:
+	.space	4
+	.type	gp_gc_page_buf_info, %object
+	.size	gp_gc_page_buf_info, 4
+gp_gc_page_buf_info:
+	.space	4
+	.type	p_gc_data_buf, %object
+	.size	p_gc_data_buf, 4
+p_gc_data_buf:
+	.space	4
+	.type	p_gc_spare_buf, %object
+	.size	p_gc_spare_buf, 4
+p_gc_spare_buf:
+	.space	4
+	.type	req_gc, %object
+	.size	req_gc, 4
+req_gc:
+	.space	4
+	.type	c_gc_page_buf_num, %object
+	.size	c_gc_page_buf_num, 4
+c_gc_page_buf_num:
+	.space	4
+	.type	p_gc_blk_tbl, %object
+	.size	p_gc_blk_tbl, 4
+p_gc_blk_tbl:
+	.space	4
+	.type	g_gc_blk_num, %object
+	.size	g_gc_blk_num, 2
+g_gc_blk_num:
+	.space	2
+	.space	2
+	.type	p_gc_page_info, %object
+	.size	p_gc_page_info, 4
+p_gc_page_info:
+	.space	4
+	.type	g_gc_page_offset, %object
+	.size	g_gc_page_offset, 2
+g_gc_page_offset:
+	.space	2
+	.type	g_gc_next_blk, %object
+	.size	g_gc_next_blk, 2
+g_gc_next_blk:
+	.space	2
+	.type	g_gc_next_blk_1, %object
+	.size	g_gc_next_blk_1, 2
+g_gc_next_blk_1:
+	.space	2
+	.type	g_gc_bad_block_temp_num, %object
+	.size	g_gc_bad_block_temp_num, 2
+g_gc_bad_block_temp_num:
+	.space	2
+	.type	g_gc_bad_block_temp_tbl, %object
+	.size	g_gc_bad_block_temp_tbl, 34
+g_gc_bad_block_temp_tbl:
+	.space	34
+	.type	g_gc_bad_block_gc_index, %object
+	.size	g_gc_bad_block_gc_index, 2
+g_gc_bad_block_gc_index:
+	.space	2
+	.type	g_free_slc_blk_num, %object
+	.size	g_free_slc_blk_num, 2
+g_free_slc_blk_num:
+	.space	2
+	.space	2
+	.type	g_SlcPartLbaEndSector, %object
+	.size	g_SlcPartLbaEndSector, 4
+g_SlcPartLbaEndSector:
+	.space	4
+	.type	g_in_gc_progress, %object
+	.size	g_in_gc_progress, 4
+g_in_gc_progress:
+	.space	4
+	.type	g_gc_head_data_block, %object
+	.size	g_gc_head_data_block, 4
+g_gc_head_data_block:
+	.space	4
+	.type	g_gc_head_data_block_count, %object
+	.size	g_gc_head_data_block_count, 4
+g_gc_head_data_block_count:
+	.space	4
+	.type	g_gc_refresh_block_temp_num, %object
+	.size	g_gc_refresh_block_temp_num, 2
+g_gc_refresh_block_temp_num:
+	.space	2
+	.space	2
+	.type	c_wr_page_buf_num, %object
+	.size	c_wr_page_buf_num, 4
+c_wr_page_buf_num:
+	.space	4
+	.type	req_read, %object
+	.size	req_read, 4
+req_read:
+	.space	4
+	.type	req_gc_dst, %object
+	.size	req_gc_dst, 4
+req_gc_dst:
+	.space	4
+	.type	req_prgm, %object
+	.size	req_prgm, 4
+req_prgm:
+	.space	4
+	.type	p_sys_data_buf_1, %object
+	.size	p_sys_data_buf_1, 4
+p_sys_data_buf_1:
+	.space	4
+	.type	p_vendor_data_buf, %object
+	.size	p_vendor_data_buf, 4
+p_vendor_data_buf:
+	.space	4
+	.type	p_wr_io_data_buf, %object
+	.size	p_wr_io_data_buf, 4
+p_wr_io_data_buf:
+	.space	4
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 4
+p_io_data_buf_0:
+	.space	4
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 4
+p_io_data_buf_1:
+	.space	4
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 4
+p_sys_spare_buf:
+	.space	4
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 4
+p_io_spare_buf:
+	.space	4
+	.type	p_wr_io_spare_buf, %object
+	.size	p_wr_io_spare_buf, 4
+p_wr_io_spare_buf:
+	.space	4
+	.type	g_ect_tbl_info_size, %object
+	.size	g_ect_tbl_info_size, 2
+g_ect_tbl_info_size:
+	.space	2
+	.space	2
+	.type	p_swl_mul_table, %object
+	.size	p_swl_mul_table, 4
+p_swl_mul_table:
+	.space	4
+	.type	gp_ect_tbl_info, %object
+	.size	gp_ect_tbl_info, 4
+gp_ect_tbl_info:
+	.space	4
+	.type	p_valid_page_count_check_table, %object
+	.size	p_valid_page_count_check_table, 4
+p_valid_page_count_check_table:
+	.space	4
+	.type	p_map_block_table, %object
+	.size	p_map_block_table, 4
+p_map_block_table:
+	.space	4
+	.type	p_map_block_valid_page_count, %object
+	.size	p_map_block_valid_page_count, 4
+p_map_block_valid_page_count:
+	.space	4
+	.type	p_vendor_block_valid_page_count, %object
+	.size	p_vendor_block_valid_page_count, 4
+p_vendor_block_valid_page_count:
+	.space	4
+	.type	p_vendor_block_ver_table, %object
+	.size	p_vendor_block_ver_table, 4
+p_vendor_block_ver_table:
+	.space	4
+	.type	p_vendor_region_ppn_table, %object
+	.size	p_vendor_region_ppn_table, 4
+p_vendor_region_ppn_table:
+	.space	4
+	.type	p_map_region_ppn_table, %object
+	.size	p_map_region_ppn_table, 4
+p_map_region_ppn_table:
+	.space	4
+	.type	p_map_region_ppn_check_table, %object
+	.size	p_map_region_ppn_check_table, 4
+p_map_region_ppn_check_table:
+	.space	4
+	.type	p_map_block_ver_table, %object
+	.size	p_map_block_ver_table, 4
+p_map_block_ver_table:
+	.space	4
+	.type	p_l2p_map_buf, %object
+	.size	p_l2p_map_buf, 4
+p_l2p_map_buf:
+	.space	4
+	.type	c_ftl_nand_bbm_buf_size, %object
+	.size	c_ftl_nand_bbm_buf_size, 2
+c_ftl_nand_bbm_buf_size:
+	.space	2
+	.space	2
+	.type	gL2pMapInfo, %object
+	.size	gL2pMapInfo, 44
+gL2pMapInfo:
+	.space	44
+	.type	g_totle_map_block, %object
+	.size	g_totle_map_block, 2
+g_totle_map_block:
+	.space	2
+	.space	2
+	.type	g_req_cache, %object
+	.size	g_req_cache, 4
+g_req_cache:
+	.space	4
+	.type	g_tmp_data_superblock_id, %object
+	.size	g_tmp_data_superblock_id, 2
+g_tmp_data_superblock_id:
+	.space	2
+	.space	2
+	.type	g_totle_swl_count, %object
+	.size	g_totle_swl_count, 4
+g_totle_swl_count:
+	.space	4
+	.type	ftl_gc_temp_power_lost_recovery_flag, %object
+	.size	ftl_gc_temp_power_lost_recovery_flag, 4
+ftl_gc_temp_power_lost_recovery_flag:
+	.space	4
+	.type	g_recovery_page_min_ver, %object
+	.size	g_recovery_page_min_ver, 4
+g_recovery_page_min_ver:
+	.space	4
+	.type	gNandIDataBuf, %object
+	.size	gNandIDataBuf, 2048
+gNandIDataBuf:
+	.space	2048
+	.type	RK29_NANDC_REG_BASE, %object
+	.size	RK29_NANDC_REG_BASE, 4
+RK29_NANDC_REG_BASE:
+	.space	4
+	.type	gFlashPageBuffer0, %object
+	.size	gFlashPageBuffer0, 4
+gFlashPageBuffer0:
+	.space	4
+	.type	FlashDdrTunningReadCount, %object
+	.size	FlashDdrTunningReadCount, 4
+FlashDdrTunningReadCount:
+	.space	4
+	.type	gpReadRetrial, %object
+	.size	gpReadRetrial, 4
+gpReadRetrial:
+	.space	4
+	.type	gpFlashSaveInfo, %object
+	.size	gpFlashSaveInfo, 4
+gpFlashSaveInfo:
+	.space	4
+	.type	gNandFlashInfoBlockAddr, %object
+	.size	gNandFlashInfoBlockAddr, 4
+gNandFlashInfoBlockAddr:
+	.space	4
+	.type	gNandFlashIdbBlockAddr, %object
+	.size	gNandFlashIdbBlockAddr, 4
+gNandFlashIdbBlockAddr:
+	.space	4
+	.type	gNandIDBResBlkNumSaveInFlash, %object
+	.size	gNandIDBResBlkNumSaveInFlash, 1
+gNandIDBResBlkNumSaveInFlash:
+	.space	1
+	.type	g_maxRetryCount, %object
+	.size	g_maxRetryCount, 1
+g_maxRetryCount:
+	.space	1
+	.type	gNandFlashIDBEccBits, %object
+	.size	gNandFlashIDBEccBits, 1
+gNandFlashIDBEccBits:
+	.space	1
+	.space	1
+	.type	gFlashPageBuffer1, %object
+	.size	gFlashPageBuffer1, 4
+gFlashPageBuffer1:
+	.space	4
+	.type	gFlashSpareBuffer, %object
+	.size	gFlashSpareBuffer, 4
+gFlashSpareBuffer:
+	.space	4
+	.type	gFlashProgCheckBuffer, %object
+	.size	gFlashProgCheckBuffer, 4
+gFlashProgCheckBuffer:
+	.space	4
+	.type	gFlashProgCheckSpareBuffer, %object
+	.size	gFlashProgCheckSpareBuffer, 4
+gFlashProgCheckSpareBuffer:
+	.space	4
+	.type	gMultiPageReadEn, %object
+	.size	gMultiPageReadEn, 1
+gMultiPageReadEn:
+	.space	1
+	.space	3
+	.type	FbbtBlk, %object
+	.size	FbbtBlk, 16
+FbbtBlk:
+	.space	16
+	.type	req_sys, %object
+	.size	req_sys, 36
+req_sys:
+	.space	36
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.space	4
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 44
+gVendorBlkInfo:
+	.space	44
+	.type	g_ect_tbl_power_up_flush, %object
+	.size	g_ect_tbl_power_up_flush, 2
+g_ect_tbl_power_up_flush:
+	.space	2
+	.type	g_power_lost_ecc_error_blk, %object
+	.size	g_power_lost_ecc_error_blk, 2
+g_power_lost_ecc_error_blk:
+	.space	2
+	.type	g_power_lost_recovery_flag, %object
+	.size	g_power_lost_recovery_flag, 2
+g_power_lost_recovery_flag:
+	.space	2
+	.space	2
+	.type	g_recovery_page_num, %object
+	.size	g_recovery_page_num, 4
+g_recovery_page_num:
+	.space	4
+	.type	g_recovery_ppa_tbl, %object
+	.size	g_recovery_ppa_tbl, 128
+g_recovery_ppa_tbl:
+	.space	128
+	.type	gc_ink_free_return_value, %object
+	.size	gc_ink_free_return_value, 2
+gc_ink_free_return_value:
+	.space	2
+	.type	g_gc_cur_blk_valid_pages, %object
+	.size	g_gc_cur_blk_valid_pages, 2
+g_gc_cur_blk_valid_pages:
+	.space	2
+	.type	g_gc_cur_blk_max_valid_pages, %object
+	.size	g_gc_cur_blk_max_valid_pages, 2
+g_gc_cur_blk_max_valid_pages:
+	.space	2
+	.space	2
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 4
+gp_last_act_superblock:
+	.space	4
+	.type	gc_discard_updated, %object
+	.size	gc_discard_updated, 4
+gc_discard_updated:
+	.space	4
+	.type	g_LowFormat, %object
+	.size	g_LowFormat, 4
+g_LowFormat:
+	.space	4
+	.type	gLoaderBootInfo, %object
+	.size	gLoaderBootInfo, 4
+gLoaderBootInfo:
+	.space	4
+	.type	RK29_NANDC1_REG_BASE, %object
+	.size	RK29_NANDC1_REG_BASE, 4
+RK29_NANDC1_REG_BASE:
+	.space	4
+	.type	g_ftl_nand_free_count, %object
+	.size	g_ftl_nand_free_count, 4
+g_ftl_nand_free_count:
+	.space	4
+	.type	last_cache_match_count, %object
+	.size	last_cache_match_count, 4
+last_cache_match_count:
+	.space	4
+	.type	g_idb_buffer, %object
+	.size	g_idb_buffer, 4
+g_idb_buffer:
+	.space	4
+	.type	gpDrmKeyInfo, %object
+	.size	gpDrmKeyInfo, 4
+gpDrmKeyInfo:
+	.space	4
+	.type	SecureBootCheckOK, %object
+	.size	SecureBootCheckOK, 4
+SecureBootCheckOK:
+	.space	4
+	.type	SecureBootEn, %object
+	.size	SecureBootEn, 4
+SecureBootEn:
+	.space	4
+	.type	gpBootConfig, %object
+	.size	gpBootConfig, 4
+gpBootConfig:
+	.space	4
+	.type	gSnSectorData, %object
+	.size	gSnSectorData, 512
+gSnSectorData:
+	.space	512
+	.type	SecureBootUnlockTryCount, %object
+	.size	SecureBootUnlockTryCount, 4
+SecureBootUnlockTryCount:
+	.space	4
+	.type	gpVendor0Info, %object
+	.size	gpVendor0Info, 4
+gpVendor0Info:
+	.space	4
+	.type	gpVendor1Info, %object
+	.size	gpVendor1Info, 4
+gpVendor1Info:
+	.space	4
+	.type	g_vendor, %object
+	.size	g_vendor, 4
+g_vendor:
+	.space	4
+	.type	g_gc_refresh_block_temp_tbl, %object
+	.size	g_gc_refresh_block_temp_tbl, 34
+g_gc_refresh_block_temp_tbl:
+	.space	34
+	.space	2
+	.type	gToggleModeClkDiv, %object
+	.size	gToggleModeClkDiv, 4
+gToggleModeClkDiv:
+	.space	4
+	.type	gpNandc1, %object
+	.size	gpNandc1, 4
+gpNandc1:
+	.space	4
+	.type	gNandFlashResEndPageAddr, %object
+	.size	gNandFlashResEndPageAddr, 4
+gNandFlashResEndPageAddr:
+	.space	4
+	.type	gNandFlashInfoBlockEcc, %object
+	.size	gNandFlashInfoBlockEcc, 1
+gNandFlashInfoBlockEcc:
+	.space	1
+	.type	gFlashOnfiModeEn, %object
+	.size	gFlashOnfiModeEn, 1
+gFlashOnfiModeEn:
+	.space	1
+	.type	gFlashSdrModeEn, %object
+	.size	gFlashSdrModeEn, 1
+gFlashSdrModeEn:
+	.space	1
diff --git a/drivers/rk_nand/rk_ftl_arm_v8.S b/drivers/rk_nand/rk_ftl_arm_v8.S
new file mode 100644
index 000000000000..e7ed5e817d30
--- /dev/null
+++ b/drivers/rk_nand/rk_ftl_arm_v8.S
@@ -0,0 +1,25896 @@
+/*
+ * Copyright (c) 2016-2017, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * date: 2017-11-20
+ */
+	.cpu generic+fp+simd
+	.file	"rk_ftl_arm_v8.S"
+#APP
+	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\
+		,18,19,20,21,22,23,24,25,26,27,28,29,30
+	.equ	.L__reg_num_x\num, \num
+	.endr
+	.equ	.L__reg_num_xzr, 31
+
+	.macro	mrs_s, rt, sreg
+	.inst	0xd5200000|(\sreg)|(.L__reg_num_\rt)
+	.endm
+
+	.macro	msr_s, sreg, rt
+	.inst	0xd5000000|(\sreg)|(.L__reg_num_\rt)
+	.endm
+
+#NO_APP
+	.text
+	.align	2
+	.type	ftl_set_blk_mode.part.8, %function
+ftl_set_blk_mode.part.8:
+	adrp	x1, .LANCHOR0
+	uxth	w0, w0
+	ubfx	x2, x0, 5, 11
+	lsl	x2, x2, 2
+	ldr	x3, [x1,#:lo12:.LANCHOR0]
+	mov	w1, 1
+	lsl	w0, w1, w0
+	ldr	w1, [x3,x2]
+	orr	w0, w1, w0
+	str	w0, [x3,x2]
+	ret
+	.size	ftl_set_blk_mode.part.8, .-ftl_set_blk_mode.part.8
+	.align	2
+	.global	FlashMemCmp8
+	.type	FlashMemCmp8, %function
+FlashMemCmp8:
+	mov	x5, x0
+	adrp	x0, .LANCHOR0+8
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+8]
+	cbz	w0, .L7
+	ldrb	w4, [x5,1]
+	mov	w0, 0
+	ldrb	w3, [x1,1]
+	cmp	w4, w3
+	beq	.L4
+.L7:
+	mov	x3, 0
+.L5:
+	cmp	w3, w2
+	mov	w4, w3
+	bcs	.L11
+	ldrb	w0, [x5,x3]
+	add	x3, x3, 1
+	add	x6, x1, x3
+	ldrb	w6, [x6,-1]
+	cmp	w6, w0
+	beq	.L5
+	add	w0, w4, 1
+	b	.L4
+.L11:
+	mov	w0, 0
+.L4:
+	ret
+	.size	FlashMemCmp8, .-FlashMemCmp8
+	.align	2
+	.global	FlashRsvdBlkChk
+	.type	FlashRsvdBlkChk, %function
+FlashRsvdBlkChk:
+	adrp	x2, .LANCHOR0
+	uxtb	w0, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	ldrb	w3, [x2,9]
+	ldr	w2, [x2,12]
+	mul	w2, w3, w2
+	cmp	w1, w2
+	cset	w1, cc
+	cmp	w0, wzr
+	cset	w0, eq
+	and	w0, w1, w0
+	eor	w0, w0, 1
+	ret
+	.size	FlashRsvdBlkChk, .-FlashRsvdBlkChk
+	.align	2
+	.global	FlashGetRandomizer
+	.type	FlashGetRandomizer, %function
+FlashGetRandomizer:
+	stp	x29, x30, [sp, -32]!
+	adrp	x2, .LANCHOR1
+	and	w3, w1, 127
+	add	x2, x2, :lo12:.LANCHOR1
+	add	x29, sp, 0
+	uxtb	w0, w0
+	str	x19, [sp,16]
+	ldrh	w19, [x2,w3,uxtw 1]
+	adrp	x2, .LANCHOR0+16
+	ldrb	w2, [x2,#:lo12:.LANCHOR0+16]
+	cbz	w2, .L14
+	bl	FlashRsvdBlkChk
+	cmp	w0, wzr
+	orr	w1, w19, -1073741824
+	csel	w19, w1, w19, ne
+.L14:
+	mov	w0, w19
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FlashGetRandomizer, .-FlashGetRandomizer
+	.align	2
+	.global	FlashSetRandomizer
+	.type	FlashSetRandomizer, %function
+FlashSetRandomizer:
+	stp	x29, x30, [sp, -48]!
+	and	w2, w1, 127
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	uxtb	w21, w0
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	stp	x19, x20, [sp,16]
+	ldrh	w20, [x0,w2,uxtw 1]
+	adrp	x2, .LANCHOR0
+	add	x0, x2, :lo12:.LANCHOR0
+	mov	x19, x2
+	ldrb	w0, [x0,16]
+	cbz	w0, .L21
+	mov	w0, w21
+	bl	FlashRsvdBlkChk
+	cmp	w0, wzr
+	orr	w1, w20, -1073741824
+	csel	w20, w1, w20, ne
+.L21:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x2, x2, x21, sxtw 4
+	ldr	x0, [x2,24]
+	str	w20, [x0,336]
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashSetRandomizer, .-FlashSetRandomizer
+	.align	2
+	.global	FlashReadCmd
+	.type	FlashReadCmd, %function
+FlashReadCmd:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x5, x0, 4, 32
+	add	x3, x3, 24
+	lsr	w4, w1, 16
+	add	x2, x3, x5
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w2, [x2,8]
+	ldr	x3, [x3,x5]
+	add	x2, x3, x2, lsl 8
+	and	w3, w1, 255
+	str	wzr, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w3, [x2,2052]
+	lsr	w3, w1, 8
+	str	w3, [x2,2052]
+	mov	w3, 48
+	str	w4, [x2,2052]
+	str	w3, [x2,2056]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashReadCmd, .-FlashReadCmd
+	.align	2
+	.global	FlashReadDpDataOutCmd
+	.type	FlashReadDpDataOutCmd, %function
+FlashReadDpDataOutCmd:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x2, x0, 4, 32
+	add	x4, x3, 24
+	stp	x29, x30, [sp, -16]!
+	add	x5, x4, x2
+	add	x29, sp, 0
+	ldr	x6, [x4,x2]
+	lsr	w4, w1, 8
+	ldrb	w2, [x3,104]
+	lsr	w3, w1, 16
+	cmp	w2, 1
+	ldrb	w2, [x5,8]
+	and	w5, w1, 255
+	add	x2, x6, x2, lsl 8
+	bne	.L29
+	mov	w6, 6
+	str	w6, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w5, [x2,2052]
+	str	w4, [x2,2052]
+	str	w3, [x2,2052]
+	b	.L31
+.L29:
+	str	wzr, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w5, [x2,2052]
+	str	w4, [x2,2052]
+	str	w3, [x2,2052]
+	mov	w3, 5
+	str	w3, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+.L31:
+	mov	w3, 224
+	str	w3, [x2,2056]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashReadDpDataOutCmd, .-FlashReadDpDataOutCmd
+	.align	2
+	.global	flash_enter_slc_mode
+	.type	flash_enter_slc_mode, %function
+flash_enter_slc_mode:
+	adrp	x1, .LANCHOR0
+	uxtb	w0, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrb	w2, [x1,120]
+	cbz	w2, .L32
+	sbfiz	x0, x0, 4, 32
+	add	x1, x1, 24
+	add	x2, x1, x0
+	ldr	x1, [x1,x0]
+	ldrb	w0, [x2,8]
+	add	x0, x0, 8
+	add	x0, x1, x0, lsl 8
+	mov	w1, 218
+	str	w1, [x0,8]
+.L32:
+	ret
+	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
+	.align	2
+	.global	flash_exit_slc_mode
+	.type	flash_exit_slc_mode, %function
+flash_exit_slc_mode:
+	adrp	x1, .LANCHOR0
+	uxtb	w0, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrb	w2, [x1,120]
+	cbz	w2, .L37
+	sbfiz	x0, x0, 4, 32
+	add	x1, x1, 24
+	add	x2, x1, x0
+	ldr	x1, [x1,x0]
+	ldrb	w0, [x2,8]
+	add	x0, x0, 8
+	add	x0, x1, x0, lsl 8
+	mov	w1, 223
+	str	w1, [x0,8]
+.L37:
+	ret
+	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
+	.align	2
+	.global	FlashProgFirstCmd
+	.type	FlashProgFirstCmd, %function
+FlashProgFirstCmd:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x5, x0, 4, 32
+	add	x3, x3, 24
+	lsr	w4, w1, 16
+	add	x2, x3, x5
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w2, [x2,8]
+	ldr	x3, [x3,x5]
+	add	x2, x3, x2, lsl 8
+	mov	w3, 128
+	str	w3, [x2,2056]
+	and	w3, w1, 255
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w3, [x2,2052]
+	lsr	w3, w1, 8
+	str	w3, [x2,2052]
+	str	w4, [x2,2052]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashProgFirstCmd, .-FlashProgFirstCmd
+	.align	2
+	.global	FlashEraseCmd
+	.type	FlashEraseCmd, %function
+FlashEraseCmd:
+	adrp	x3, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x3, x3, :lo12:.LANCHOR0
+	add	x4, x3, 24
+	add	x5, x4, x0
+	ldr	x4, [x4,x0]
+	ldrb	w0, [x5,8]
+	cbz	w2, .L44
+	add	x2, x4, x0, lsl 8
+	mov	w5, 96
+	str	w5, [x2,2056]
+	and	w5, w1, 255
+	str	w5, [x2,2052]
+	lsr	w5, w1, 8
+	str	w5, [x2,2052]
+	lsr	w5, w1, 16
+	str	w5, [x2,2052]
+	ldr	w2, [x3,12]
+	add	w1, w1, w2
+.L44:
+	add	x0, x4, x0, lsl 8
+	mov	w2, 96
+	str	w2, [x0,2056]
+	and	w2, w1, 255
+	str	w2, [x0,2052]
+	lsr	w2, w1, 8
+	str	w2, [x0,2052]
+	lsr	w1, w1, 16
+	str	w1, [x0,2052]
+	mov	w1, 208
+	str	w1, [x0,2056]
+	ret
+	.size	FlashEraseCmd, .-FlashEraseCmd
+	.align	2
+	.global	FlashProgDpSecondCmd
+	.type	FlashProgDpSecondCmd, %function
+FlashProgDpSecondCmd:
+	adrp	x2, .LANCHOR0
+	uxtb	w0, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	sbfiz	x4, x0, 4, 32
+	add	x5, x2, 24
+	lsr	w3, w1, 16
+	add	x7, x5, x4
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w6, [x2,99]
+	ldrb	w2, [x7,8]
+	ldr	x4, [x5,x4]
+	add	x2, x4, x2, lsl 8
+	and	w4, w1, 255
+	str	w6, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w4, [x2,2052]
+	lsr	w4, w1, 8
+	str	w4, [x2,2052]
+	str	w3, [x2,2052]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashProgDpSecondCmd, .-FlashProgDpSecondCmd
+	.align	2
+	.global	FlashProgSecondCmd
+	.type	FlashProgSecondCmd, %function
+FlashProgSecondCmd:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 24
+	add	x2, x1, x0
+	ldr	x1, [x1,x0]
+	ldrb	w0, [x2,8]
+	add	x0, x0, 8
+	add	x0, x1, x0, lsl 8
+	mov	w1, 16
+	str	w1, [x0,8]
+	ret
+	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
+	.align	2
+	.global	FlashProgDpFirstCmd
+	.type	FlashProgDpFirstCmd, %function
+FlashProgDpFirstCmd:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x2, x1, 24
+	add	x3, x2, x0
+	ldrb	w1, [x1,98]
+	ldr	x2, [x2,x0]
+	ldrb	w0, [x3,8]
+	add	x0, x0, 8
+	add	x0, x2, x0, lsl 8
+	str	w1, [x0,8]
+	ret
+	.size	FlashProgDpFirstCmd, .-FlashProgDpFirstCmd
+	.align	2
+	.global	JSHash
+	.type	JSHash, %function
+JSHash:
+	mov	x5, x0
+	mov	w0, 42982
+	mov	x2, 0
+	movk	w0, 0x47c6, lsl 16
+.L52:
+	cmp	w1, w2
+	bls	.L54
+	lsl	w3, w0, 5
+	ldrb	w4, [x5,x2]
+	add	w3, w3, w0, lsr 2
+	add	x2, x2, 1
+	add	w3, w3, w4
+	eor	w0, w0, w3
+	b	.L52
+.L54:
+	ret
+	.size	JSHash, .-JSHash
+	.align	2
+	.global	FlashLoadIdbInfo
+	.type	FlashLoadIdbInfo, %function
+FlashLoadIdbInfo:
+	mov	w0, 0
+	ret
+	.size	FlashLoadIdbInfo, .-FlashLoadIdbInfo
+	.align	2
+	.global	FlashPrintInfo
+	.type	FlashPrintInfo, %function
+FlashPrintInfo:
+	ret
+	.size	FlashPrintInfo, .-FlashPrintInfo
+	.align	2
+	.global	FlashSuspend
+	.type	FlashSuspend, %function
+FlashSuspend:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	x1, [x0,128]
+	ldr	w2, [x1]
+	str	w2, [x0,136]
+	ldr	w2, [x1,4]
+	str	w2, [x0,140]
+	ldr	w2, [x1,8]
+	str	w2, [x0,144]
+	ldr	w2, [x1,12]
+	str	w2, [x0,148]
+	ldr	w2, [x1,304]
+	str	w2, [x0,152]
+	ldr	w2, [x1,308]
+	str	w2, [x0,156]
+	ldr	w2, [x1,336]
+	ldr	w1, [x1,344]
+	str	w2, [x0,160]
+	str	w1, [x0,164]
+	mov	w0, 0
+	ret
+	.size	FlashSuspend, .-FlashSuspend
+	.align	2
+	.global	LogAddr2PhyAddr
+	.type	LogAddr2PhyAddr, %function
+LogAddr2PhyAddr:
+	adrp	x7, .LANCHOR0
+	uxtb	w4, w4
+	add	x6, x7, :lo12:.LANCHOR0
+	ldrh	w8, [x6,182]
+	ldrh	w5, [x6,180]
+	ldrh	w9, [x6,12]
+	ldrb	w6, [x6,8]
+	mul	w5, w5, w8
+	cmp	w6, 1
+	ubfiz	w8, w9, 1, 15
+	csel	w9, w8, w9, eq
+	ldr	w8, [x0,4]
+	uxth	w5, w5
+	cmp	w1, 1
+	ubfx	x6, x8, 10, 16
+	and	w8, w8, 1023
+	udiv	w10, w6, w5
+	msub	w5, w10, w5, w6
+	uxth	w6, w5
+	bne	.L60
+	add	x1, x7, :lo12:.LANCHOR0
+	ldrb	w5, [x1,120]
+	cbnz	w5, .L60
+	add	x1, x1, 196
+	ldrh	w8, [x1,w8,sxtw 1]
+.L60:
+	add	x7, x7, :lo12:.LANCHOR0
+	cmp	w4, 1
+	add	x7, x7, 708
+	mov	w1, 0
+	ldr	w5, [x7,w10,uxtw 2]
+	madd	w5, w6, w9, w5
+	add	w5, w5, w8
+	str	w5, [x2]
+	str	w10, [x3]
+	bls	.L61
+	ldr	w1, [x0,4]
+	ldr	w0, [x0,60]
+	add	w1, w1, 1024
+	cmp	w1, w0
+	cset	w1, eq
+.L61:
+	mov	w0, w1
+	ret
+	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
+	.align	2
+	.global	FlashScheduleEnSet
+	.type	FlashScheduleEnSet, %function
+FlashScheduleEnSet:
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldr	w2, [x1,740]
+	str	w0, [x1,740]
+	mov	w0, w2
+	ret
+	.size	FlashScheduleEnSet, .-FlashScheduleEnSet
+	.align	2
+	.global	FlashGetPageSize
+	.type	FlashGetPageSize, %function
+FlashGetPageSize:
+	adrp	x0, .LANCHOR0+744
+	ldr	x0, [x0,#:lo12:.LANCHOR0+744]
+	ldrb	w0, [x0,9]
+	ret
+	.size	FlashGetPageSize, .-FlashGetPageSize
+	.align	2
+	.global	NandcReadDontCaseBusyEn
+	.type	NandcReadDontCaseBusyEn, %function
+NandcReadDontCaseBusyEn:
+	ret
+	.size	NandcReadDontCaseBusyEn, .-NandcReadDontCaseBusyEn
+	.align	2
+	.global	NandcGetChipIf
+	.type	NandcGetChipIf, %function
+NandcGetChipIf:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 24
+	add	x2, x1, x0
+	ldr	x0, [x1,x0]
+	ldrb	w2, [x2,8]
+	add	x2, x2, 8
+	add	x0, x0, x2, lsl 8
+	ret
+	.size	NandcGetChipIf, .-NandcGetChipIf
+	.align	2
+	.global	NandcSetDdrPara
+	.type	NandcSetDdrPara, %function
+NandcSetDdrPara:
+	adrp	x1, .LANCHOR0+128
+	uxtb	w0, w0
+	lsl	w2, w0, 8
+	orr	w0, w2, w0, lsl 16
+	ldr	x1, [x1,#:lo12:.LANCHOR0+128]
+	orr	w0, w0, 1
+	str	w0, [x1,304]
+	ret
+	.size	NandcSetDdrPara, .-NandcSetDdrPara
+	.align	2
+	.global	NandcSetDdrDiv
+	.type	NandcSetDdrDiv, %function
+NandcSetDdrDiv:
+	adrp	x1, .LANCHOR0+128
+	uxtb	w0, w0
+	ldr	x2, [x1,#:lo12:.LANCHOR0+128]
+	mov	w1, 16640
+	orr	w0, w0, w1
+	str	w0, [x2,344]
+	ret
+	.size	NandcSetDdrDiv, .-NandcSetDdrDiv
+	.align	2
+	.global	NandcSetDdrMode
+	.type	NandcSetDdrMode, %function
+NandcSetDdrMode:
+	adrp	x1, .LANCHOR0+128
+	cmp	w0, wzr
+	ldr	x2, [x1,#:lo12:.LANCHOR0+128]
+	ldr	w1, [x2]
+	and	w3, w1, -8193
+	orr	w1, w1, 253952
+	csel	w1, w1, w3, ne
+	str	w1, [x2]
+	ret
+	.size	NandcSetDdrMode, .-NandcSetDdrMode
+	.align	2
+	.global	NandcSetMode
+	.type	NandcSetMode, %function
+NandcSetMode:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	uxtb	w0, w0
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	add	x21, x1, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	tst	w0, 6
+	mov	x20, x1
+	ldr	x2, [x21,128]
+	ldr	w19, [x2]
+	beq	.L73
+	orr	w19, w19, 24576
+	and	w0, w0, 4
+	and	w19, w19, -32769
+	cmp	w0, wzr
+	orr	w19, w19, 196608
+	mov	w0, 0
+	orr	w1, w19, 32768
+	csel	w19, w1, w19, ne
+	bl	rknand_get_clk_rate
+	ldr	x0, [x21,128]
+	mov	w1, 8322
+	str	w1, [x0,344]
+	mov	w1, 4099
+	movk	w1, 0x10, lsl 16
+	str	w1, [x0,304]
+	mov	w1, 38
+	str	w1, [x0,308]
+	mov	w1, 39
+	str	w1, [x0,308]
+	b	.L75
+.L73:
+	and	w19, w19, -8193
+.L75:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	x0, [x1,128]
+	str	w19, [x0]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	NandcSetMode, .-NandcSetMode
+	.align	2
+	.global	NandcFlashCs
+	.type	NandcFlashCs, %function
+NandcFlashCs:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 24
+	add	x3, x1, x0
+	ldr	x2, [x1,x0]
+	mov	w1, 1
+	ldrb	w3, [x3,8]
+	ldr	w0, [x2]
+	lsl	w1, w1, w3
+	bfi	w0, w1, 0, 8
+	str	w0, [x2]
+	ret
+	.size	NandcFlashCs, .-NandcFlashCs
+	.align	2
+	.global	NandcFlashDeCs
+	.type	NandcFlashDeCs, %function
+NandcFlashDeCs:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 24
+	ldr	x1, [x1,x0]
+	ldr	w0, [x1]
+	and	w0, w0, -256
+	and	w0, w0, -131073
+	str	w0, [x1]
+	ret
+	.size	NandcFlashDeCs, .-NandcFlashDeCs
+	.align	2
+	.global	NandcDelayns
+	.type	NandcDelayns, %function
+NandcDelayns:
+	sub	sp, sp, #16
+	lsr	w0, w0, 4
+	str	w0, [sp,12]
+.L81:
+	ldr	w0, [sp,12]
+	sub	w1, w0, #1
+	str	w1, [sp,12]
+	cbnz	w0, .L81
+	add	sp, sp, 16
+	ret
+	.size	NandcDelayns, .-NandcDelayns
+	.align	2
+	.global	FlashReadStatus
+	.type	FlashReadStatus, %function
+FlashReadStatus:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	stp	x29, x30, [sp, -32]!
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 24
+	add	x29, sp, 0
+	add	x2, x1, x0
+	str	x19, [sp,16]
+	ldrb	w2, [x2,8]
+	ldr	x19, [x1,x0]
+	mov	w0, 112
+	add	x19, x19, x2, lsl 8
+	str	w0, [x19,2056]
+	mov	w0, 80
+	bl	NandcDelayns
+	ldr	w0, [x19,2048]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FlashReadStatus, .-FlashReadStatus
+	.align	2
+	.global	ToshibaSetRRPara
+	.type	ToshibaSetRRPara, %function
+ToshibaSetRRPara:
+	uxtb	w1, w1
+	mov	w3, 5
+	add	w2, w1, 1
+	stp	x29, x30, [sp, -96]!
+	smull	x3, w2, w3
+	adrp	x2, .LANCHOR1
+	add	x29, sp, 0
+	add	x2, x2, :lo12:.LANCHOR1
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	add	x23, x2, x1, sxtw
+	add	x24, x2, 256
+	add	x21, x2, 304
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x22, x0
+	add	x24, x24, x3
+	add	x21, x21, x3
+	mov	x20, 0
+	adrp	x26, .LANCHOR0
+	mov	w27, 85
+	mov	x19, x2
+.L85:
+	add	x25, x26, :lo12:.LANCHOR0
+	ldrb	w0, [x25,753]
+	cmp	w0, w20
+	bls	.L91
+	add	x0, x19, 256
+	str	w27, [x22,8]
+	ldrsb	w0, [x20,x0]
+	str	w0, [x22,4]
+	mov	w0, 200
+	bl	NandcDelayns
+	ldrb	w0, [x25,752]
+	cmp	w0, 34
+	bne	.L86
+	ldrsb	w0, [x24,x20]
+	b	.L90
+.L86:
+	cmp	w0, 35
+	bne	.L88
+	ldrsb	w0, [x21,x20]
+	b	.L90
+.L88:
+	ldrsb	w0, [x23,400]
+.L90:
+	str	w0, [x22]
+	add	x20, x20, 1
+	b	.L85
+.L91:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ToshibaSetRRPara, .-ToshibaSetRRPara
+	.align	2
+	.global	SamsungSetRRPara
+	.type	SamsungSetRRPara, %function
+SamsungSetRRPara:
+	stp	x29, x30, [sp, -64]!
+	adrp	x2, .LANCHOR1
+	add	x2, x2, :lo12:.LANCHOR1
+	add	x29, sp, 0
+	add	x1, x2, x1, uxtb 2
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x21, x0
+	add	x22, x1, 412
+	mov	x20, 0
+	adrp	x23, .LANCHOR0
+	mov	w24, 161
+	mov	x19, x2
+.L93:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x0,753]
+	cmp	w0, w20
+	bls	.L95
+	str	w24, [x21,8]
+	add	x0, x19, 408
+	str	wzr, [x21]
+	ldrsb	w0, [x20,x0]
+	str	w0, [x21]
+	ldrsb	w0, [x22,x20]
+	add	x20, x20, 1
+	str	w0, [x21]
+	mov	w0, 300
+	bl	NandcDelayns
+	b	.L93
+.L95:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	SamsungSetRRPara, .-SamsungSetRRPara
+	.align	2
+	.global	HynixSetRRPara
+	.type	HynixSetRRPara, %function
+HynixSetRRPara:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	str	x27, [sp,80]
+	add	x19, x20, :lo12:.LANCHOR0
+	uxtb	w27, w1
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x23, x24, [sp,48]
+	uxtb	x25, w0
+	mov	x22, x2
+	ldr	x0, [x19,744]
+	mov	x26, x25
+	uxtb	w21, w3
+	add	x19, x19, 760
+	ldrb	w0, [x0,19]
+	cmp	w0, 6
+	bne	.L97
+	add	x19, x19, x25, lsl 6
+	lsl	w4, w21, 2
+	add	x19, x19, 20
+	b	.L102
+.L97:
+	cmp	w0, 7
+	bne	.L99
+	mov	x2, 160
+	mov	w4, 10
+	madd	x19, x25, x2, x19
+	mul	w4, w21, w4
+	add	x19, x19, 28
+.L102:
+	add	x19, x19, x4, sxtw
+	b	.L98
+.L99:
+	lsl	x4, x25, 3
+	add	x4, x4, x21, sxtw
+	add	x19, x19, x4, lsl 3
+	add	x19, x19, 20
+.L98:
+	add	x2, x20, :lo12:.LANCHOR0
+	lsl	x0, x25, 4
+	add	x2, x2, 24
+	uxtb	x27, w27
+	add	x1, x2, x0
+	ldr	x23, [x2,x0]
+	mov	w0, w26
+	ldrb	w24, [x1,8]
+	bl	NandcFlashCs
+	ubfiz	x24, x24, 8, 8
+	mov	w0, 54
+	add	x23, x23, x24
+	mov	x24, 0
+	str	w0, [x23,2056]
+.L100:
+	cmp	x24, x27
+	beq	.L103
+	ldrb	w0, [x22,x24]
+	str	w0, [x23,2052]
+	mov	w0, 200
+	bl	NandcDelayns
+	ldrsb	w0, [x19,x24]
+	add	x24, x24, 1
+	str	w0, [x23,2048]
+	b	.L100
+.L103:
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w0, 22
+	add	x25, x20, x25
+	str	w0, [x23,2056]
+	mov	w0, w26
+	bl	NandcFlashDeCs
+	strb	w21, [x25,1616]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	HynixSetRRPara, .-HynixSetRRPara
+	.align	2
+	.global	FlashSetReadRetryDefault
+	.type	FlashSetReadRetryDefault, %function
+FlashSetReadRetryDefault:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	mov	x20, 0
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	ldr	x0, [x19,744]
+	ldrb	w0, [x0,19]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L104
+	add	x21, x19, 1620
+	add	x22, x19, 764
+.L109:
+	lsl	x1, x20, 3
+	uxtb	w0, w20
+	ldrb	w1, [x1,x21]
+	cmp	w1, 173
+	bne	.L106
+	ldrb	w1, [x19,761]
+	mov	x2, x22
+	mov	w3, 0
+	bl	HynixSetRRPara
+.L106:
+	add	x20, x20, 1
+	cmp	x20, 4
+	bne	.L109
+.L104:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashSetReadRetryDefault, .-FlashSetReadRetryDefault
+	.align	2
+	.global	FlashReadStatusEN
+	.type	FlashReadStatusEN, %function
+FlashReadStatusEN:
+	stp	x29, x30, [sp, -32]!
+	adrp	x3, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x4, x3, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	add	x5, x4, 24
+	stp	x19, x20, [sp,16]
+	add	x6, x5, x0
+	uxtb	w2, w2
+	ldr	x20, [x5,x0]
+	ldr	x0, [x4,744]
+	ldrb	w19, [x6,8]
+	ldrb	w0, [x0,8]
+	cmp	w0, 2
+	bne	.L112
+	add	x4, x4, 88
+	cbnz	w2, .L113
+	ldrb	w2, [x4,13]
+	b	.L121
+.L113:
+	ldrb	w2, [x4,14]
+.L121:
+	add	x0, x19, 8
+	add	x3, x3, :lo12:.LANCHOR0
+	add	x0, x20, x0, lsl 8
+	str	w2, [x0,8]
+	mov	w2, 0
+	ldrb	w4, [x3,103]
+	cbz	w4, .L116
+	add	x3, x19, 8
+	lsl	x3, x3, 8
+.L120:
+	cmp	w2, w4
+	bcs	.L116
+	add	x5, x20, x3
+	lsl	w0, w2, 3
+	lsr	w0, w1, w0
+	add	w2, w2, 1
+	and	w0, w0, 255
+	str	w0, [x5,4]
+	b	.L120
+.L112:
+	add	x0, x19, 8
+	mov	w1, 112
+	add	x0, x20, x0, lsl 8
+	str	w1, [x0,8]
+.L116:
+	add	x19, x19, 8
+	mov	w0, 80
+	lsl	x19, x19, 8
+	bl	NandcDelayns
+	ldr	w0, [x20,x19]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	uxtb	w0, w0
+	ret
+	.size	FlashReadStatusEN, .-FlashReadStatusEN
+	.align	2
+	.global	FlashWaitReadyEN
+	.type	FlashWaitReadyEN, %function
+FlashWaitReadyEN:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	uxtb	w19, w0
+	mov	w20, w1
+	uxtb	w21, w2
+.L126:
+	mov	w0, w19
+	mov	w1, w20
+	mov	w2, w21
+	bl	FlashReadStatusEN
+	cmp	w0, 255
+	mov	w3, w0
+	beq	.L126
+	tbz	x3, 6, .L126
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashWaitReadyEN, .-FlashWaitReadyEN
+	.align	2
+	.global	FlashWaitCmdDone
+	.type	FlashWaitCmdDone, %function
+FlashWaitCmdDone:
+	stp	x29, x30, [sp, -48]!
+	uxtb	x1, w0
+	mov	x2, 24
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	x22, x1
+	mul	x1, x1, x2
+	add	x0, x20, 1652
+	add	x19, x0, x1
+	ldrb	w21, [x0,x1]
+	ldr	x0, [x19,8]
+	cbz	x0, .L131
+	mov	w0, w21
+	add	x20, x20, 708
+	bl	NandcFlashCs
+	ldr	w0, [x20,w22,sxtw 2]
+	ldr	w1, [x19,4]
+	cmp	w0, wzr
+	mov	w0, w21
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	mov	w20, w0
+	mov	w0, w21
+	bl	NandcFlashDeCs
+	ldr	x1, [x19,8]
+	sbfx	x0, x20, 0, 1
+	str	w0, [x1]
+	str	xzr, [x19,8]
+	ldr	x1, [x19,16]
+	cbz	x1, .L131
+	str	w0, [x1]
+	str	xzr, [x19,16]
+.L131:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashWaitCmdDone, .-FlashWaitCmdDone
+	.align	2
+	.global	NandcWaitFlashReady
+	.type	NandcWaitFlashReady, %function
+NandcWaitFlashReady:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	add	x1, x1, 24
+	stp	x19, x20, [sp,16]
+	mov	w19, 34464
+	ldr	x20, [x1,x0]
+	movk	w19, 0x1, lsl 16
+.L138:
+	mov	w0, 100
+	bl	NandcDelayns
+	ldr	w0, [x20]
+	str	w0, [x29,40]
+	ldr	w0, [x29,40]
+	tbnz	x0, 9, .L139
+	subs	w19, w19, #1
+	bne	.L138
+	mov	w0, -1
+	b	.L137
+.L139:
+	mov	w0, 0
+.L137:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	NandcWaitFlashReady, .-NandcWaitFlashReady
+	.align	2
+	.global	FlashReset
+	.type	FlashReset, %function
+FlashReset:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	add	x1, x1, :lo12:.LANCHOR0
+	uxtb	w20, w0
+	add	x1, x1, 24
+	sbfiz	x0, x20, 4, 32
+	add	x2, x1, x0
+	str	x21, [sp,32]
+	ldr	x21, [x1,x0]
+	mov	w0, w20
+	ldrb	w19, [x2,8]
+	bl	NandcFlashCs
+	add	x19, x19, 8
+	mov	w0, 255
+	add	x19, x21, x19, lsl 8
+	str	w0, [x19,8]
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	mov	w0, w20
+	bl	NandcFlashDeCs
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashReset, .-FlashReset
+	.align	2
+	.global	FlashEraseBlock
+	.type	FlashEraseBlock, %function
+FlashEraseBlock:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w19, w0
+	mov	w20, w1
+	mov	w0, w19
+	str	x2, [x29,40]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	x2, [x29,40]
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashEraseCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashReadStatus
+	mov	w20, w0
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	and	w0, w20, 1
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashEraseBlock, .-FlashEraseBlock
+	.align	2
+	.global	FlashSetInterfaceMode
+	.type	FlashSetInterfaceMode, %function
+FlashSetInterfaceMode:
+	adrp	x1, .LANCHOR0
+	mov	x6, 0
+	add	x1, x1, :lo12:.LANCHOR0
+	mov	w8, 239
+	stp	x29, x30, [sp, -16]!
+	add	x7, x1, 24
+	add	x4, x1, 1620
+	add	x29, sp, 0
+	ldrb	w2, [x1,1844]
+	mov	w9, 128
+	mov	w10, 1
+	mov	w12, 35
+	and	w11, w2, 1
+	and	w2, w2, 4
+	mov	w13, 32
+	mov	w14, 5
+	uxtb	w5, w2
+.L154:
+	ldrb	w3, [x6,x4]
+	ldr	x1, [x7]
+	cmp	w3, 152
+	ldrb	w2, [x7,8]
+	beq	.L144
+	cmp	w3, 69
+	beq	.L144
+	cmp	w3, 173
+	beq	.L144
+	cmp	w3, 44
+	bne	.L145
+.L144:
+	cmp	w0, 1
+	bne	.L147
+	cbz	w11, .L145
+	ubfiz	x2, x2, 8, 8
+	cmp	w3, 173
+	add	x1, x1, x2
+	str	w8, [x1,2056]
+	bne	.L148
+	str	w0, [x1,2052]
+	b	.L165
+.L148:
+	cmp	w3, 44
+	bne	.L150
+	str	w0, [x1,2052]
+	str	w14, [x1,2048]
+	b	.L152
+.L150:
+	str	w9, [x1,2052]
+	str	w0, [x1,2048]
+	b	.L152
+.L147:
+	cbz	w5, .L145
+	ubfiz	x2, x2, 8, 8
+	cmp	w3, 173
+	add	x1, x1, x2
+	str	w8, [x1,2056]
+	bne	.L151
+	str	w10, [x1,2052]
+	str	w13, [x1,2048]
+	b	.L152
+.L151:
+	cmp	w3, 44
+	bne	.L153
+	str	w10, [x1,2052]
+	str	w12, [x1,2048]
+	b	.L152
+.L153:
+	str	w9, [x1,2052]
+.L165:
+	str	wzr, [x1,2048]
+.L152:
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+.L145:
+	add	x6, x6, 8
+	add	x7, x7, 16
+	cmp	x6, 32
+	bne	.L154
+	mov	w0, 0
+	bl	NandcWaitFlashReady
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashSetInterfaceMode, .-FlashSetInterfaceMode
+	.align	2
+	.global	FlashReadSpare
+	.type	FlashReadSpare, %function
+FlashReadSpare:
+	adrp	x3, .LANCHOR1+481
+	adrp	x5, .LANCHOR0
+	stp	x29, x30, [sp, -48]!
+	uxtb	w0, w0
+	add	x5, x5, :lo12:.LANCHOR0
+	add	x5, x5, 24
+	sbfiz	x6, x0, 4, 32
+	add	x29, sp, 0
+	ldrb	w4, [x3,#:lo12:.LANCHOR1+481]
+	add	x3, x5, x6
+	str	x19, [sp,16]
+	lsl	w4, w4, 9
+	str	x2, [x29,40]
+	ldrb	w3, [x3,8]
+	ldr	x19, [x5,x6]
+	add	x19, x19, x3, lsl 8
+	and	w3, w1, 255
+	str	wzr, [x19,2056]
+	str	w4, [x19,2052]
+	lsr	w4, w4, 8
+	str	w4, [x19,2052]
+	str	w3, [x19,2052]
+	lsr	w3, w1, 8
+	str	w3, [x19,2052]
+	lsr	w1, w1, 16
+	str	w1, [x19,2052]
+	mov	w1, 48
+	str	w1, [x19,2056]
+	bl	NandcWaitFlashReady
+	ldr	x2, [x29,40]
+	ldr	w0, [x19,2048]
+	strb	w0, [x2]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashReadSpare, .-FlashReadSpare
+	.align	2
+	.global	SandiskProgTestBadBlock
+	.type	SandiskProgTestBadBlock, %function
+SandiskProgTestBadBlock:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	stp	x29, x30, [sp, -32]!
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x4, x0, 4, 32
+	add	x3, x3, 24
+	add	x29, sp, 0
+	add	x2, x3, x4
+	str	x19, [sp,16]
+	ldrb	w2, [x2,8]
+	ldr	x19, [x3,x4]
+	add	x19, x19, x2, lsl 8
+	mov	w2, 162
+	str	w2, [x19,2056]
+	mov	w2, 128
+	str	w2, [x19,2056]
+	and	w2, w1, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w2, [x19,2052]
+	lsr	w2, w1, 8
+	str	w2, [x19,2052]
+	lsr	w1, w1, 16
+	str	w1, [x19,2052]
+	mov	w1, 16
+	str	w1, [x19,2056]
+	bl	NandcWaitFlashReady
+	mov	w0, 112
+	str	w0, [x19,2056]
+	mov	w0, 80
+	bl	NandcDelayns
+	ldr	w0, [x19,2048]
+	ldr	x19, [sp,16]
+	and	w0, w0, 1
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
+	.align	2
+	.global	SandiskSetRRPara
+	.type	SandiskSetRRPara, %function
+SandiskSetRRPara:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	mov	w0, 239
+	uxtb	w19, w1
+	add	w19, w19, 1
+	str	w0, [x20,8]
+	mov	w0, 17
+	str	w0, [x20,4]
+	mov	w0, 200
+	bl	NandcDelayns
+	mov	w1, 5
+	adrp	x2, .LANCHOR1
+	add	x2, x2, :lo12:.LANCHOR1
+	adrp	x5, .LANCHOR0
+	smull	x1, w19, w1
+	add	x0, x2, 256
+	add	x2, x2, 304
+	add	x0, x0, x1
+	add	x1, x2, x1
+	mov	x2, 0
+.L169:
+	add	x3, x5, :lo12:.LANCHOR0
+	ldrb	w4, [x3,753]
+	cmp	w4, w2
+	bls	.L174
+	ldrb	w3, [x3,752]
+	cmp	w3, 67
+	bne	.L170
+	ldrsb	w3, [x0,x2]
+	b	.L173
+.L170:
+	ldrsb	w3, [x1,x2]
+.L173:
+	str	w3, [x20]
+	add	x2, x2, 1
+	b	.L169
+.L174:
+	mov	w0, 0
+	bl	NandcWaitFlashReady
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	SandiskSetRRPara, .-SandiskSetRRPara
+	.align	2
+	.global	FlashEraseSLc2KBlocks
+	.type	FlashEraseSLc2KBlocks, %function
+FlashEraseSLc2KBlocks:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	str	x25, [sp,64]
+	stp	x23, x24, [sp,48]
+	add	x21, x21, :lo12:.LANCHOR0
+	adrp	x23, .LC0
+	stp	x19, x20, [sp,16]
+	mov	w24, w1
+	mov	x20, x0
+	mov	w22, 0
+	add	x25, x21, 1652
+	add	x23, x23, :lo12:.LC0
+.L176:
+	cmp	w22, w24
+	beq	.L185
+	add	x2, x29, 88
+	sub	w4, w24, w22
+	mov	x0, x20
+	mov	w1, 0
+	add	x3, x29, 92
+	bl	LogAddr2PhyAddr
+	ldr	w2, [x29,92]
+	ldrb	w0, [x21,1845]
+	cmp	w2, w0
+	bcc	.L177
+	mov	w0, -1
+	str	w0, [x20]
+	b	.L178
+.L177:
+	uxtw	x2, w2
+	add	x0, x21, x2
+	ldrb	w19, [x0,1848]
+	mov	x0, 24
+	mul	x2, x2, x0
+	mov	w0, w19
+	strb	w19, [x25,x2]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	w1, [x29,88]
+	mov	w2, 0
+	mov	w0, w19
+	bl	FlashEraseCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,88]
+	mov	w0, w19
+	bl	FlashReadStatus
+	sbfx	x0, x0, 0, 1
+	str	w0, [x20]
+	mov	w0, w19
+	ldr	w1, [x29,88]
+	ldr	w2, [x21,12]
+	add	w1, w2, w1
+	mov	w2, 0
+	bl	FlashEraseCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,88]
+	mov	w0, w19
+	bl	FlashReadStatus
+	tbz	x0, 0, .L179
+	mov	w0, -1
+	str	w0, [x20]
+.L179:
+	ldr	w0, [x20]
+	cmn	w0, #1
+	bne	.L180
+	ldr	w1, [x29,88]
+	mov	x0, x23
+	bl	printk
+.L180:
+	mov	w0, w19
+	bl	NandcFlashDeCs
+.L178:
+	add	w22, w22, 1
+	add	x20, x20, 56
+	b	.L176
+.L185:
+	mov	w0, 0
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FlashEraseSLc2KBlocks, .-FlashEraseSLc2KBlocks
+	.align	2
+	.global	FlashReadDpCmd
+	.type	FlashReadDpCmd, %function
+FlashReadDpCmd:
+	stp	x29, x30, [sp, -80]!
+	adrp	x3, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	add	x3, x3, :lo12:.LANCHOR0
+	uxtb	w21, w0
+	add	x4, x3, 24
+	sbfiz	x0, x21, 4, 32
+	add	x3, x3, 88
+	str	x23, [sp,48]
+	stp	x19, x20, [sp,16]
+	add	x5, x4, x0
+	and	w23, w2, 255
+	ldr	x6, [x4,x0]
+	lsr	w22, w2, 8
+	ldrb	w0, [x3,16]
+	lsr	w4, w1, 8
+	ldrb	w19, [x5,8]
+	lsr	w20, w2, 16
+	cmp	w0, 1
+	and	w5, w1, 255
+	lsr	w0, w1, 16
+	bne	.L187
+	add	x19, x6, x19, lsl 8
+	ldrb	w2, [x3,8]
+	str	x1, [x29,72]
+	str	w2, [x19,2056]
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w5, [x19,2052]
+	str	w4, [x19,2052]
+	str	w0, [x19,2052]
+	ldrb	w0, [x3,9]
+	str	w0, [x19,2056]
+	mov	w0, w21
+	bl	NandcWaitFlashReady
+	str	wzr, [x19,2056]
+	str	wzr, [x19,2052]
+	mov	w0, 48
+	str	wzr, [x19,2052]
+	str	w23, [x19,2052]
+	str	w22, [x19,2052]
+	str	w20, [x19,2052]
+	str	w0, [x19,2056]
+	ldr	x1, [x29,72]
+	b	.L188
+.L187:
+	add	x19, x6, x19, lsl 8
+	ldrb	w2, [x3,8]
+	str	w2, [x19,2056]
+	str	w5, [x19,2052]
+	str	w4, [x19,2052]
+	str	w0, [x19,2052]
+	ldrb	w0, [x3,9]
+	str	w0, [x19,2056]
+	mov	w0, 48
+	str	w23, [x19,2052]
+	str	w22, [x19,2052]
+	str	w20, [x19,2052]
+	str	w0, [x19,2056]
+.L188:
+	mov	w0, w21
+	bl	FlashSetRandomizer
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FlashReadDpCmd, .-FlashReadDpCmd
+	.align	2
+	.global	FlashDeInit
+	.type	FlashDeInit, %function
+FlashDeInit:
+	stp	x29, x30, [sp, -32]!
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	bl	NandcWaitFlashReady
+	bl	FlashSetReadRetryDefault
+	adrp	x0, .LANCHOR0
+	add	x20, x0, :lo12:.LANCHOR0
+	mov	x19, x0
+	ldrb	w1, [x20,1856]
+	cbz	w1, .L190
+	ldrb	w0, [x20,1844]
+	tbz	x0, 0, .L190
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	strb	wzr, [x20,1856]
+.L190:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,24]
+	str	wzr, [x0,336]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FlashDeInit, .-FlashDeInit
+	.align	2
+	.global	NandcRandmzSel
+	.type	NandcRandmzSel, %function
+NandcRandmzSel:
+	adrp	x2, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x2, x2, :lo12:.LANCHOR0
+	add	x2, x2, 24
+	ldr	x0, [x2,x0]
+	str	w1, [x0,336]
+	ret
+	.size	NandcRandmzSel, .-NandcRandmzSel
+	.align	2
+	.global	NandcTimeCfg
+	.type	NandcTimeCfg, %function
+NandcTimeCfg:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w19, w0
+	mov	w0, 0
+	bl	rknand_get_clk_rate
+	mov	w2, 16960
+	adrp	x1, .LANCHOR0
+	movk	w2, 0xf, lsl 16
+	add	x1, x1, :lo12:.LANCHOR0
+	sdiv	w0, w0, w2
+	cmp	w0, 250
+	ble	.L199
+	ldr	x0, [x1,128]
+	mov	w1, 8354
+	b	.L206
+.L199:
+	cmp	w0, 220
+	ble	.L201
+	ldr	x0, [x1,128]
+	b	.L207
+.L201:
+	cmp	w0, 185
+	ble	.L202
+	ldr	x0, [x1,128]
+	mov	w1, 4226
+	b	.L206
+.L202:
+	cmp	w0, 160
+	ldr	x0, [x1,128]
+	ble	.L203
+	mov	w1, 4194
+	b	.L206
+.L203:
+	cmp	w19, 35
+	mov	w1, 4193
+	bls	.L206
+	cmp	w19, 99
+	mov	w1, 4225
+	bls	.L206
+.L207:
+	mov	w1, 8322
+.L206:
+	str	w1, [x0,4]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	NandcTimeCfg, .-NandcTimeCfg
+	.align	2
+	.global	FlashTimingCfg
+	.type	FlashTimingCfg, %function
+FlashTimingCfg:
+	sub	w1, w0, #4096
+	sub	w1, w1, #97
+	stp	x29, x30, [sp, -16]!
+	and	w1, w1, -33
+	cmp	w1, 1
+	add	x29, sp, 0
+	bls	.L209
+	mov	w1, 8322
+	cmp	w0, w1
+	bne	.L210
+.L209:
+	adrp	x1, .LANCHOR0+128
+	ldr	x1, [x1,#:lo12:.LANCHOR0+128]
+	str	w0, [x1,4]
+.L210:
+	adrp	x0, .LANCHOR1+493
+	ldrb	w0, [x0,#:lo12:.LANCHOR1+493]
+	bl	NandcTimeCfg
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashTimingCfg, .-FlashTimingCfg
+	.align	2
+	.global	NandcInit
+	.type	NandcInit, %function
+NandcInit:
+	stp	x29, x30, [sp, -32]!
+	mov	w2, 1
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	str	w2, [x19,48]
+	mov	w2, 2
+	str	x0, [x19,24]
+	str	x0, [x19,40]
+	str	w2, [x19,64]
+	mov	w2, 3
+	str	x0, [x19,56]
+	str	w2, [x19,80]
+	str	x0, [x19,72]
+	str	x0, [x19,128]
+	str	wzr, [x19,32]
+	ldr	w1, [x0]
+	ubfx	x2, x1, 13, 1
+	str	w2, [x19,1860]
+	ldr	w2, [x0,352]
+	and	w1, w1, 245760
+	orr	w1, w1, 256
+	ubfx	x2, x2, 16, 4
+	str	w2, [x19,1864]
+	ldr	w2, [x0,352]
+	str	w2, [x19,1868]
+	str	w1, [x0]
+	ldr	x0, [x19,128]
+	str	wzr, [x0,336]
+	mov	w0, 40
+	bl	NandcTimeCfg
+	ldr	x0, [x19,128]
+	mov	w1, 8322
+	str	w1, [x0,344]
+	mov	w1, 6145
+	movk	w1, 0x18, lsl 16
+	str	w1, [x0,304]
+	mov	w0, 36864
+	bl	ftl_malloc
+	str	wzr, [x19,1920]
+	str	x0, [x19,1872]
+	str	x0, [x19,1880]
+	add	x0, x0, 32768
+	str	wzr, [x19,1928]
+	str	x0, [x19,1888]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	NandcInit, .-NandcInit
+	.align	2
+	.global	NandcGetTimeCfg
+	.type	NandcGetTimeCfg, %function
+NandcGetTimeCfg:
+	adrp	x4, .LANCHOR0
+	add	x4, x4, :lo12:.LANCHOR0
+	ldr	x5, [x4,128]
+	ldr	w5, [x5,4]
+	str	w5, [x0]
+	ldr	x0, [x4,128]
+	ldr	w0, [x0]
+	str	w0, [x1]
+	ldr	x0, [x4,128]
+	ldr	w0, [x0,304]
+	str	w0, [x2]
+	ldr	x1, [x4,128]
+	ldr	w0, [x1,308]
+	ldr	w1, [x1,344]
+	and	w0, w0, 255
+	orr	w0, w0, w1, lsl 16
+	str	w0, [x3]
+	ret
+	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
+	.align	2
+	.global	NandcBchSel
+	.type	NandcBchSel, %function
+NandcBchSel:
+	adrp	x1, .LANCHOR0
+	uxtb	w0, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	mov	w3, 1
+	cmp	w0, 16
+	ldr	x2, [x1,128]
+	str	w0, [x1,1932]
+	mov	w1, 4096
+	str	w3, [x2,8]
+	bne	.L214
+.L217:
+	and	w1, w1, -17
+	b	.L215
+.L214:
+	cmp	w0, 24
+	bne	.L216
+	orr	w1, w1, 16
+	b	.L215
+.L216:
+	cmp	w0, 40
+	orr	w1, w1, 262144
+	orr	w1, w1, 16
+	beq	.L217
+.L215:
+	orr	w1, w1, 1
+	str	w1, [x2,12]
+	ret
+	.size	NandcBchSel, .-NandcBchSel
+	.align	2
+	.global	FlashBchSel
+	.type	FlashBchSel, %function
+FlashBchSel:
+	stp	x29, x30, [sp, -16]!
+	adrp	x1, .LANCHOR0+1936
+	uxtb	w0, w0
+	add	x29, sp, 0
+	strb	w0, [x1,#:lo12:.LANCHOR0+1936]
+	bl	NandcBchSel
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashBchSel, .-FlashBchSel
+	.align	2
+	.global	FlashResume
+	.type	FlashResume, %function
+FlashResume:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	str	x21, [sp,32]
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	x21, 0
+	add	x19, x0, 1620
+	ldr	x1, [x0,128]
+	ldr	w2, [x0,136]
+	str	w2, [x1]
+	ldr	w2, [x0,140]
+	ldr	x1, [x0,128]
+	str	w2, [x1,4]
+	ldr	w2, [x0,144]
+	ldr	x1, [x0,128]
+	str	w2, [x1,8]
+	ldr	w2, [x0,148]
+	str	w2, [x1,12]
+	ldr	w2, [x0,152]
+	str	w2, [x1,304]
+	ldr	w2, [x0,156]
+	str	w2, [x1,308]
+	ldr	w2, [x0,160]
+	str	w2, [x1,336]
+	ldr	w2, [x0,164]
+	str	w2, [x1,344]
+.L224:
+	lsl	x0, x21, 3
+	ldrb	w0, [x0,x19]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bhi	.L223
+	mov	w0, w21
+	bl	FlashReset
+.L223:
+	add	x21, x21, 1
+	cmp	x21, 4
+	bne	.L224
+	add	x19, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x19,1856]
+	cbz	w0, .L225
+	mov	w0, 1
+	bl	NandcSetMode
+	ldrb	w0, [x19,1844]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x19,1844]
+	bl	NandcSetMode
+	ldr	w0, [x19,152]
+	lsr	w0, w0, 8
+	bl	NandcSetDdrPara
+.L225:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x0, [x20,744]
+	ldrb	w0, [x0,20]
+	bl	FlashBchSel
+	ldr	x21, [sp,32]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashResume, .-FlashResume
+	.align	2
+	.global	NandCIrqEnable
+	.type	NandCIrqEnable, %function
+NandCIrqEnable:
+	ldr	w3, [x0,368]
+	mov	x2, 1
+	lsl	x1, x2, x1
+	orr	w3, w3, w1
+	str	w3, [x0,368]
+	ldr	w2, [x0,364]
+	orr	w1, w2, w1
+	str	w1, [x0,364]
+	ret
+	.size	NandCIrqEnable, .-NandCIrqEnable
+	.align	2
+	.global	NandCIrqDisable
+	.type	NandCIrqDisable, %function
+NandCIrqDisable:
+	ldr	w3, [x0,368]
+	mov	x2, 1
+	lsl	x1, x2, x1
+	orr	w3, w3, w1
+	str	w3, [x0,368]
+	ldr	w2, [x0,364]
+	bic	w1, w2, w1
+	str	w1, [x0,364]
+	ret
+	.size	NandCIrqDisable, .-NandCIrqDisable
+	.align	2
+	.global	rk_nandc_get_irq_status
+	.type	rk_nandc_get_irq_status, %function
+rk_nandc_get_irq_status:
+	ldr	w0, [x0,372]
+	ret
+	.size	rk_nandc_get_irq_status, .-rk_nandc_get_irq_status
+	.align	2
+	.global	rk_nandc_flash_ready
+	.type	rk_nandc_flash_ready, %function
+rk_nandc_flash_ready:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, 1
+	add	x29, sp, 0
+	bl	NandCIrqDisable
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nandc_flash_ready, .-rk_nandc_flash_ready
+	.align	2
+	.global	NandcIqrWaitFlashReady
+	.type	NandcIqrWaitFlashReady, %function
+NandcIqrWaitFlashReady:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	bl	rk_nandc_rb_irq_flag_init
+	mov	x0, x19
+	mov	w1, 1
+	bl	NandCIrqEnable
+	ldr	w0, [x19]
+	tbnz	x0, 9, .L235
+	mov	x0, x19
+	bl	wait_for_nand_flash_ready
+	b	.L234
+.L235:
+	mov	x0, x19
+	mov	w1, 1
+	bl	NandCIrqDisable
+.L234:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	NandcIqrWaitFlashReady, .-NandcIqrWaitFlashReady
+	.align	2
+	.global	FlashEraseBlocks
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x27, x28, [sp,80]
+	mov	w27, w1
+	adrp	x1, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	add	x19, x1, :lo12:.LANCHOR0
+	str	x1, [x29,104]
+	stp	x23, x24, [sp,48]
+	mov	w23, w2
+	mov	x24, x0
+	ldrb	w2, [x19,8]
+	mov	w20, 0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	cbz	w2, .L238
+	mov	w1, w23
+	bl	FlashEraseSLc2KBlocks
+	b	.L239
+.L238:
+	mov	w28, 56
+	add	x25, x19, 1652
+	mov	x26, 24
+.L264:
+	cmp	w20, w23
+	bcs	.L265
+	umull	x5, w20, w28
+	mov	w1, 0
+	sub	w4, w23, w20
+	add	x21, x24, x5
+	add	x2, x29, 120
+	mov	x0, x21
+	add	x3, x29, 124
+	str	x5, [x29,96]
+	bl	LogAddr2PhyAddr
+	mov	w22, w0
+	ldrb	w1, [x19,1845]
+	ldr	w0, [x29,124]
+	ldr	x5, [x29,96]
+	cmp	w0, w1
+	bcc	.L240
+	mov	w0, -1
+	str	w0, [x24,x5]
+	b	.L241
+.L240:
+	ldrb	w1, [x19,1937]
+	cmp	w1, wzr
+	uxtw	x1, w0
+	csel	w22, w22, wzr, ne
+	madd	x1, x1, x26, x25
+	ldr	x1, [x1,8]
+	cbz	x1, .L243
+	bl	FlashWaitCmdDone
+.L243:
+	ldr	w0, [x29,124]
+	ldr	w1, [x29,120]
+	madd	x2, x0, x26, x25
+	str	x21, [x2,8]
+	str	xzr, [x2,16]
+	str	w1, [x2,4]
+	cbz	w22, .L244
+	add	w1, w20, 1
+	umull	x1, w1, w28
+	add	x1, x24, x1
+	str	x1, [x2,16]
+.L244:
+	add	x1, x19, x0
+	mul	x0, x0, x26
+	ldrb	w21, [x1,1848]
+	strb	w21, [x25,x0]
+	mov	w0, w21
+	bl	NandcFlashCs
+	cmp	w27, 1
+	bne	.L245
+	ldrb	w0, [x19,120]
+	cbz	w0, .L245
+	mov	w0, w21
+	bl	flash_enter_slc_mode
+	b	.L246
+.L245:
+	mov	w0, w21
+	bl	flash_exit_slc_mode
+.L246:
+	ldr	w1, [x29,124]
+	add	x0, x19, 708
+	add	w20, w20, w22
+	ldr	w0, [x0,x1,lsl 2]
+	ldr	w1, [x29,120]
+	cmp	w0, wzr
+	mov	w0, w21
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	ldr	w1, [x29,120]
+	mov	w0, w21
+	mov	w2, w22
+	bl	FlashEraseCmd
+	mov	w0, w21
+	bl	NandcFlashDeCs
+.L241:
+	add	w20, w20, 1
+	b	.L264
+.L265:
+	ldr	x0, [x29,104]
+	mov	x20, 0
+	mov	x22, 24
+	add	x19, x0, :lo12:.LANCHOR0
+	add	x21, x19, 1652
+	ldr	x0, [x19,128]
+	bl	NandcIqrWaitFlashReady
+.L248:
+	ldrb	w0, [x19,1845]
+	cmp	w0, w20
+	bls	.L266
+	mov	w0, w20
+	bl	FlashWaitCmdDone
+	cmp	w27, 1
+	bne	.L249
+	ldrb	w0, [x19,120]
+	cbz	w0, .L249
+	mul	x0, x20, x22
+	ldrb	w0, [x0,x21]
+	bl	flash_exit_slc_mode
+.L249:
+	add	x20, x20, 1
+	b	.L248
+.L266:
+	mov	w0, 0
+.L239:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
+	.align	2
+	.global	rk_nandc_flash_xfer_completed
+	.type	rk_nandc_flash_xfer_completed, %function
+rk_nandc_flash_xfer_completed:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, 0
+	add	x29, sp, 0
+	bl	NandCIrqDisable
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nandc_flash_xfer_completed, .-rk_nandc_flash_xfer_completed
+	.align	2
+	.global	NandcSendDumpDataStart
+	.type	NandcSendDumpDataStart, %function
+NandcSendDumpDataStart:
+	sub	sp, sp, #16
+	mov	w2, 1
+	mov	w1, 10
+	bfi	w1, w2, 5, 2
+	ldr	w2, [x0,16]
+	str	w2, [sp,8]
+	orr	w1, w1, 536870912
+	orr	w1, w1, 1024
+	ldr	w2, [sp,8]
+	orr	w1, w1, 2097152
+	and	w2, w2, -5
+	str	w2, [sp,8]
+	ldr	w2, [sp,8]
+	add	sp, sp, 16
+	str	w2, [x0,16]
+	str	w1, [x0,8]
+	orr	w1, w1, 4
+	str	w1, [x0,8]
+	ret
+	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
+	.align	2
+	.global	NandcSendDumpDataDone
+	.type	NandcSendDumpDataDone, %function
+NandcSendDumpDataDone:
+	sub	sp, sp, #16
+.L270:
+	ldr	w1, [x0,8]
+	str	w1, [sp,8]
+	ldr	w1, [sp,8]
+	tbz	x1, 20, .L270
+	add	sp, sp, 16
+	ret
+	.size	NandcSendDumpDataDone, .-NandcSendDumpDataDone
+	.align	2
+	.global	NandcXferStart
+	.type	NandcXferStart, %function
+NandcXferStart:
+	stp	x29, x30, [sp, -96]!
+	ubfiz	x0, x0, 4, 8
+	ubfx	x3, x3, 1, 7
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	str	x25, [sp,64]
+	stp	x23, x24, [sp,48]
+	uxtb	w24, w1
+	add	x1, x19, :lo12:.LANCHOR0
+	uxtb	w25, w2
+	add	x2, x1, 24
+	stp	x21, x22, [sp,32]
+	mov	x22, x4
+	add	x4, x2, x0
+	ldr	x21, [x2,x0]
+	mov	w2, 16
+	ubfiz	w20, w24, 1, 1
+	ldrb	w0, [x4,8]
+	orr	w20, w20, 8
+	ldr	w23, [x21,12]
+	bfi	w23, w2, 8, 8
+	and	w23, w23, -9
+	bfi	w23, w0, 5, 3
+	mov	w0, 1
+	bfi	w20, w0, 5, 2
+	ldr	w0, [x1,1864]
+	orr	w20, w20, 536870912
+	cmp	w0, 3
+	orr	w20, w20, 1024
+	bfi	w20, w3, 4, 1
+	bls	.L274
+	ldr	w0, [x21,16]
+	cmp	x5, xzr
+	str	w0, [x29,88]
+	cset	w8, ne
+	ldr	w0, [x29,88]
+	and	w0, w0, -5
+	str	w0, [x29,88]
+	cbnz	w8, .L288
+	cbz	x22, .L275
+.L288:
+	cbnz	w24, .L277
+.L285:
+	mov	x0, x21
+	bl	rk_nandc_xfer_irq_flag_init
+	mov	x0, x21
+	mov	w1, 0
+	bl	NandCIrqEnable
+	add	w2, w25, 1
+	mov	x0, x22
+	asr	w2, w2, 1
+	bfi	w20, w2, 22, 6
+	cbnz	x22, .L279
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,1880]
+	b	.L279
+.L277:
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w6, 128
+	mov	w3, 0
+	lsr	w2, w25, 1
+	mov	w4, w3
+	mov	w9, -1
+	ldr	w0, [x1,1932]
+	cmp	w0, 25
+	mov	w0, 64
+	csel	w6, w0, w6, cc
+.L281:
+	cmp	w4, w2
+	bcs	.L285
+	lsr	w0, w3, 2
+	ubfiz	x0, x0, 2, 30
+	cbz	w8, .L282
+	ldrh	w7, [x5,2]
+	ldr	x10, [x1,1888]
+	ldrh	w11, [x5],4
+	orr	w7, w11, w7, lsl 16
+	str	w7, [x10,x0]
+	b	.L283
+.L282:
+	ldr	x7, [x1,1888]
+	str	w9, [x7,x0]
+.L283:
+	add	w4, w4, 1
+	add	w3, w3, w6
+	b	.L281
+.L279:
+	add	x19, x19, :lo12:.LANCHOR0
+	ubfx	x25, x20, 22, 5
+	mov	w2, w24
+	and	x22, x22, 3
+	ldr	x1, [x19,1888]
+	str	x1, [x19,1904]
+	lsl	w1, w25, 10
+	str	x0, [x19,1896]
+	bl	rknand_dma_map_single
+	str	w0, [x19,1912]
+	ldr	x0, [x19,1904]
+	lsl	w1, w25, 7
+	mov	w2, w24
+	bl	rknand_dma_map_single
+	str	w0, [x19,1916]
+	mov	w0, 1
+	str	w0, [x19,1920]
+	ldr	w0, [x19,1912]
+	mov	w1, 16
+	str	w0, [x21,20]
+	ldr	w0, [x19,1916]
+	str	w0, [x21,24]
+	str	wzr, [x29,88]
+	ldr	w0, [x29,88]
+	bfi	w0, w1, 9, 5
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	orr	w0, w0, 448
+	str	w0, [x29,88]
+	cbnz	x22, .L286
+	ldr	w0, [x29,88]
+	mov	w1, 2
+	bfi	w0, w1, 3, 3
+	str	w0, [x29,88]
+.L286:
+	ldr	w0, [x29,88]
+	cmp	w24, wzr
+	cset	w1, eq
+	orr	w0, w0, 4
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	bfi	w0, w1, 1, 1
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	orr	w0, w0, 1
+	str	w0, [x29,88]
+.L275:
+	ldr	w0, [x29,88]
+	str	w0, [x21,16]
+.L274:
+	str	w23, [x21,12]
+	str	w20, [x21,8]
+	orr	w20, w20, 4
+	str	w20, [x21,8]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	NandcXferStart, .-NandcXferStart
+	.align	2
+	.global	Ftl_log2
+	.type	Ftl_log2, %function
+Ftl_log2:
+	mov	w2, 1
+	mov	w1, 0
+.L293:
+	cmp	w2, w0
+	bhi	.L295
+	add	w1, w1, 1
+	lsl	w2, w2, 1
+	uxth	w1, w1
+	b	.L293
+.L295:
+	sub	w0, w1, #1
+	ret
+	.size	Ftl_log2, .-Ftl_log2
+	.align	2
+	.global	FtlPrintInfo
+	.type	FtlPrintInfo, %function
+FtlPrintInfo:
+	ret
+	.size	FtlPrintInfo, .-FtlPrintInfo
+	.align	2
+	.global	FtlSysBlkNumInit
+	.type	FtlSysBlkNumInit, %function
+FtlSysBlkNumInit:
+	uxth	w0, w0
+	mov	w1, 24
+	cmp	w0, 23
+	csel	w0, w0, w1, hi
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w2, [x1,1944]
+	ldrh	w3, [x1,1954]
+	str	w0, [x1,1940]
+	mul	w2, w0, w2
+	sub	w0, w3, w0
+	strh	w0, [x1,1952]
+	ldr	w0, [x1,1960]
+	str	w2, [x1,1948]
+	sub	w2, w0, w2
+	mov	w0, 0
+	str	w2, [x1,1956]
+	ret
+	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
+	.align	2
+	.global	FtlConstantsInit
+	.type	FtlConstantsInit, %function
+FtlConstantsInit:
+	stp	x29, x30, [sp, -96]!
+	mov	x3, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x23, x0
+	adrp	x19, .LANCHOR0
+	ldrh	w6, [x0,8]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x23,10]
+	ldrh	w1, [x23,12]
+	ldrh	w4, [x23,14]
+	strh	w6, [x0,1964]
+	strh	w2, [x0,1966]
+	strh	w1, [x0,1968]
+	strh	w4, [x0,1954]
+.L300:
+	add	x5, x0, 1976
+	strb	w3, [x3,x5]
+	add	x3, x3, 1
+	cmp	x3, 32
+	bne	.L300
+	ldrh	w3, [x23,20]
+	ldrb	w0, [x23,15]
+	cmp	w3, w0
+	bcs	.L301
+	uxtb	w8, w1
+	mov	w3, 0
+	mul	w11, w1, w2
+	ubfiz	w10, w8, 1, 7
+	add	x12, x19, :lo12:.LANCHOR0
+.L302:
+	cmp	w3, w1
+	bcs	.L304
+	uxtb	w0, w3
+	mov	w5, w3
+	mov	w7, 0
+.L305:
+	cmp	w7, w2
+	bcs	.L328
+	add	x9, x12, 1976
+	add	w13, w5, w11
+	add	w14, w0, w8
+	add	w7, w7, 1
+	strb	w0, [x9,w5,uxtw]
+	add	w0, w0, w10
+	strb	w14, [x9,x13]
+	add	w5, w5, w1
+	uxtb	w0, w0
+	b	.L305
+.L328:
+	add	w3, w3, 1
+	b	.L302
+.L304:
+	add	x0, x19, :lo12:.LANCHOR0
+	lsl	w2, w2, 1
+	lsr	w4, w4, 1
+	strh	w2, [x0,1966]
+	strh	w4, [x0,1954]
+.L301:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 5
+	cmp	w6, 1
+	strh	w2, [x0,2008]
+	strh	wzr, [x0,2010]
+	bne	.L306
+	strh	w6, [x0,2008]
+.L306:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 4352
+	ldrb	w26, [x0,8]
+	strh	w2, [x0,2012]
+	cbz	w26, .L307
+	mov	w2, 384
+	strh	w2, [x0,2012]
+.L307:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldrh	w20, [x21,1954]
+	ldrh	w22, [x21,1966]
+	mul	w22, w1, w22
+	mul	w1, w20, w1
+	uxth	w22, w22
+	strh	w22, [x21,1944]
+	uxth	w0, w1
+	strh	w0, [x21,2014]
+	bl	Ftl_log2
+	ldrh	w25, [x23,16]
+	ldrh	w24, [x23,20]
+	strh	w0, [x21,2016]
+	mul	w0, w22, w25
+	strh	w0, [x21,2022]
+	mov	w0, w24
+	ldrh	w27, [x23,18]
+	strh	w25, [x21,2018]
+	strh	w27, [x21,2020]
+	strh	w24, [x21,2024]
+	bl	Ftl_log2
+	lsl	w2, w24, 9
+	uxth	w3, w0
+	strh	w0, [x21,2026]
+	cmp	w20, 1024
+	ldrh	w0, [x23,26]
+	strh	w2, [x21,2028]
+	ubfx	x2, x2, 9, 7
+	strh	w0, [x21,2032]
+	lsl	w2, w2, 1
+	mul	w0, w22, w20
+	strh	w2, [x21,2030]
+	str	w0, [x21,1960]
+	bls	.L308
+	and	w0, w20, 255
+	strh	w0, [x21,2010]
+.L308:
+	add	x2, x19, :lo12:.LANCHOR0
+	mul	w0, w24, w27
+	ldrh	w1, [x2,2010]
+	sub	w1, w20, w1
+	mul	w1, w22, w1
+	mul	w1, w1, w24
+	mul	w1, w1, w25
+	asr	w1, w1, 11
+	str	w1, [x2,2036]
+	ldrh	w1, [x2,2012]
+	lsl	w1, w1, 3
+	sdiv	w0, w1, w0
+	uxth	w0, w0
+	cmp	w0, 4
+	bhi	.L326
+	mov	w0, 4
+.L326:
+	strh	w0, [x2,2040]
+	cbz	w26, .L311
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 640
+	strh	w1, [x0,2012]
+.L311:
+	add	x1, x19, :lo12:.LANCHOR0
+	lsl	w20, w20, 6
+	cmp	w22, 1
+	ldrh	w0, [x1,2012]
+	asr	w0, w0, w3
+	add	w3, w3, 9
+	asr	w20, w20, w3
+	strh	w20, [x1,2044]
+	and	w20, w20, 65535
+	add	w0, w0, 2
+	strh	w0, [x1,2042]
+	mul	w0, w20, w22
+	str	w0, [x1,2048]
+	add	w20, w20, 8
+	ldrh	w0, [x1,2040]
+	udiv	w0, w0, w22
+	add	w20, w20, w0
+	bne	.L327
+	add	w20, w20, 4
+.L327:
+	str	w20, [x1,1940]
+	add	x20, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x20,1940]
+	bl	FtlSysBlkNumInit
+	str	wzr, [x20,2060]
+	ldr	w0, [x20,1940]
+	str	w0, [x20,2052]
+	ldr	w0, [x20,1956]
+	ldrh	w1, [x20,2018]
+	lsl	w0, w0, 2
+	ldrh	w3, [x20,2024]
+	ldrh	w2, [x20,2040]
+	mul	w1, w0, w1
+	ldrh	w0, [x20,2026]
+	add	w0, w0, 9
+	lsr	w0, w1, w0
+	mov	w1, 2048
+	add	w0, w0, 2
+	sdiv	w1, w1, w3
+	strh	w1, [x20,2058]
+	uxth	w0, w0
+	strh	w0, [x20,2056]
+	add	w1, w2, 3
+	strh	w1, [x20,2040]
+	ldr	w1, [x20,2048]
+	add	w4, w1, 3
+	str	w4, [x20,2048]
+	ldrb	w4, [x20,120]
+	cbz	w4, .L314
+	add	w2, w2, 4
+	add	w1, w1, 5
+	strh	w2, [x20,2040]
+	str	w1, [x20,2048]
+.L314:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x19,1952]
+	strh	wzr, [x19,2064]
+	lsr	w2, w1, 3
+	add	w1, w2, w1, lsl 1
+	add	w1, w1, 52
+	add	w0, w1, w0, lsl 2
+	cmp	w0, w3, lsl 9
+	bcs	.L315
+	mov	w0, 1
+	strh	w0, [x19,2064]
+.L315:
+	mov	w0, 0
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlConstantsInit, .-FtlConstantsInit
+	.align	2
+	.global	IsBlkInVendorPart
+	.type	IsBlkInVendorPart, %function
+IsBlkInVendorPart:
+	adrp	x1, .LANCHOR0
+	uxth	w4, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	mov	w0, 0
+	ldrh	w2, [x1,2066]
+	cbz	w2, .L330
+	ldrh	w2, [x1,2040]
+	ldr	x3, [x1,2072]
+	mov	x1, 0
+.L331:
+	cmp	w2, w1, uxth
+	bls	.L336
+	add	x1, x1, 1
+	add	x0, x3, x1, lsl 1
+	ldrh	w0, [x0,-2]
+	cmp	w0, w4
+	bne	.L331
+	mov	w0, 1
+	b	.L330
+.L336:
+	mov	w0, 0
+.L330:
+	ret
+	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
+	.align	2
+	.global	FtlCacheMetchLpa
+	.type	FtlCacheMetchLpa, %function
+FtlCacheMetchLpa:
+	adrp	x2, .LANCHOR0
+	mov	w6, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	mov	w0, 0
+	ldr	w3, [x2,2080]
+	cbz	w3, .L338
+	ldr	x5, [x2,2088]
+	mov	x0, 56
+	mov	x2, 0
+.L339:
+	cmp	w3, w2
+	bls	.L348
+	madd	x4, x2, x0, x5
+	add	x2, x2, 1
+	ldr	w4, [x4,24]
+	cmp	w4, w6
+	bcc	.L339
+	cmp	w4, w1
+	bhi	.L339
+	mov	w0, 1
+	b	.L338
+.L348:
+	mov	w0, 0
+.L338:
+	ret
+	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
+	.align	2
+	.global	FtlGetCap
+	.type	FtlGetCap, %function
+FtlGetCap:
+	adrp	x0, .LANCHOR0+2060
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2060]
+	ret
+	.size	FtlGetCap, .-FtlGetCap
+	.align	2
+	.global	FtlGetCapacity
+	.type	FtlGetCapacity, %function
+FtlGetCapacity:
+	adrp	x0, .LANCHOR0+2060
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2060]
+	ret
+	.size	FtlGetCapacity, .-FtlGetCapacity
+	.align	2
+	.global	FtlGetLpn
+	.type	FtlGetLpn, %function
+FtlGetLpn:
+	adrp	x0, .LANCHOR0+2096
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2096]
+	ret
+	.size	FtlGetLpn, .-FtlGetLpn
+	.align	2
+	.global	FtlGetCurEraseBlock
+	.type	FtlGetCurEraseBlock, %function
+FtlGetCurEraseBlock:
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w2, [x1,1944]
+	ldr	w0, [x1,2100]
+	mul	w0, w2, w0
+	ret
+	.size	FtlGetCurEraseBlock, .-FtlGetCurEraseBlock
+	.align	2
+	.global	FtlGetAllBlockNum
+	.type	FtlGetAllBlockNum, %function
+FtlGetAllBlockNum:
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w2, [x1,1954]
+	ldrh	w0, [x1,1944]
+	mul	w0, w2, w0
+	ret
+	.size	FtlGetAllBlockNum, .-FtlGetAllBlockNum
+	.align	2
+	.global	FtlBbmMapBadBlock
+	.type	FtlBbmMapBadBlock, %function
+FtlBbmMapBadBlock:
+	stp	x29, x30, [sp, -32]!
+	uxth	w1, w0
+	mov	w4, 1
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x19, x19, 2104
+	ldrh	w3, [x19,-90]
+	udiv	w2, w1, w3
+	add	x0, x19, x2, uxth 3
+	ldr	x0, [x0,32]
+	msub	w3, w2, w3, w1
+	uxth	w3, w3
+	ubfx	x6, x3, 5, 11
+	lsl	w4, w4, w3
+	lsl	x6, x6, 2
+	ldr	w5, [x0,x6]
+	orr	w4, w4, w5
+	str	w4, [x0,x6]
+	adrp	x0, .LC1
+	add	x0, x0, :lo12:.LC1
+	bl	printk
+	ldrh	w0, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,6]
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
+	.align	2
+	.global	FtlBbmIsBadBlock
+	.type	FtlBbmIsBadBlock, %function
+FtlBbmIsBadBlock:
+	adrp	x2, .LANCHOR0
+	uxth	w0, w0
+	add	x3, x2, :lo12:.LANCHOR0
+	ldrh	w1, [x3,2014]
+	udiv	w2, w0, w1
+	msub	w0, w2, w1, w0
+	add	x2, x3, x2, uxth 3
+	ldr	x1, [x2,2136]
+	uxth	w0, w0
+	ubfx	x3, x0, 5, 11
+	ldr	w1, [x1,x3,lsl 2]
+	lsr	w0, w1, w0
+	and	w0, w0, 1
+	ret
+	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
+	.align	2
+	.global	FtlBbtInfoPrint
+	.type	FtlBbtInfoPrint, %function
+FtlBbtInfoPrint:
+	ret
+	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
+	.align	2
+	.global	FtlBbtCalcTotleCnt
+	.type	FtlBbtCalcTotleCnt, %function
+FtlBbtCalcTotleCnt:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w19, 0
+	mov	w20, w19
+	ldrh	w1, [x0,2014]
+	ldrh	w21, [x0,1966]
+	mul	w21, w1, w21
+.L358:
+	cmp	w20, w21
+	bge	.L364
+	mov	w0, w20
+	bl	FtlBbmIsBadBlock
+	cbz	w0, .L359
+	add	w19, w19, 1
+	uxth	w19, w19
+.L359:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L358
+.L364:
+	mov	w0, w19
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
+	.align	2
+	.global	V2P_block
+	.type	V2P_block, %function
+V2P_block:
+	adrp	x3, .LANCHOR0
+	uxth	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	uxth	w1, w1
+	ldrh	w4, [x3,1968]
+	udiv	w2, w0, w4
+	msub	w0, w2, w4, w0
+	madd	w0, w1, w4, w0
+	ldrh	w1, [x3,2014]
+	madd	w0, w2, w1, w0
+	ret
+	.size	V2P_block, .-V2P_block
+	.align	2
+	.global	P2V_plane
+	.type	P2V_plane, %function
+P2V_plane:
+	adrp	x2, .LANCHOR0
+	uxth	w0, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	ldrh	w1, [x2,1968]
+	ldrh	w3, [x2,2014]
+	udiv	w2, w0, w1
+	udiv	w3, w0, w3
+	msub	w0, w2, w1, w0
+	madd	w0, w1, w3, w0
+	ret
+	.size	P2V_plane, .-P2V_plane
+	.align	2
+	.global	P2V_block_in_plane
+	.type	P2V_block_in_plane, %function
+P2V_block_in_plane:
+	adrp	x2, .LANCHOR0
+	uxth	w0, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	ldrh	w3, [x2,2014]
+	udiv	w1, w0, w3
+	msub	w0, w1, w3, w0
+	ldrh	w1, [x2,1968]
+	uxth	w0, w0
+	udiv	w0, w0, w1
+	ret
+	.size	P2V_block_in_plane, .-P2V_block_in_plane
+	.align	2
+	.global	ftl_cmp_data_ver
+	.type	ftl_cmp_data_ver, %function
+ftl_cmp_data_ver:
+	cmp	w0, w1
+	mov	w2, -2147483648
+	bls	.L369
+	sub	w1, w0, w1
+	cmp	w1, w2
+	cset	w0, ls
+	b	.L370
+.L369:
+	sub	w1, w1, w0
+	cmp	w1, w2
+	cset	w0, hi
+.L370:
+	ret
+	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
+	.align	2
+	.global	FtlFreeSysBlkQueueEmpty
+	.type	FtlFreeSysBlkQueueEmpty, %function
+FtlFreeSysBlkQueueEmpty:
+	adrp	x0, .LANCHOR0+2206
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+2206]
+	cmp	w0, wzr
+	cset	w0, eq
+	ret
+	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
+	.align	2
+	.global	FtlFreeSysBlkQueueFull
+	.type	FtlFreeSysBlkQueueFull, %function
+FtlFreeSysBlkQueueFull:
+	adrp	x0, .LANCHOR0+2206
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+2206]
+	cmp	w0, 1024
+	cset	w0, eq
+	ret
+	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
+	.align	2
+	.global	FtlFreeSysBlkQueueIn
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
+	stp	x29, x30, [sp, -48]!
+	adrp	x2, .LANCHOR0
+	uxth	w1, w1
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxth	w22, w0
+	add	x0, x2, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	x19, x2
+	ldrh	w0, [x0,2206]
+	cmp	w0, 1024
+	beq	.L373
+	cbz	w1, .L375
+	adrp	x20, .LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR2
+	ldr	w0, [x20,-96]
+	cbnz	w0, .L375
+	mov	w0, w22
+	bl	P2V_block_in_plane
+	uxth	w21, w0
+	ldr	x0, [x20,-88]
+	lsl	w1, w22, 10
+	str	w1, [x0,4]
+	mov	w1, 1
+	mov	w2, w1
+	ldr	x0, [x20,-88]
+	bl	FlashEraseBlocks
+	ubfiz	x1, x21, 1, 16
+	ldr	x2, [x20,-80]
+	ldrh	w0, [x2,x1]
+	add	w0, w0, 1
+	strh	w0, [x2,x1]
+	ldr	w0, [x20,-72]
+	add	w0, w0, 1
+	str	w0, [x20,-72]
+.L375:
+	add	x1, x19, :lo12:.LANCHOR0
+	add	x1, x1, 2200
+	ldrh	w0, [x1,6]
+	ldrh	w2, [x1,4]
+	add	w0, w0, 1
+	strh	w0, [x1,6]
+	add	x0, x1, x2, sxtw 1
+	add	w2, w2, 1
+	and	w2, w2, 1023
+	strh	w22, [x0,8]
+	strh	w2, [x1,4]
+.L373:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+	.align	2
+	.global	FtlFreeSysBLkSort
+	.type	FtlFreeSysBLkSort, %function
+FtlFreeSysBLkSort:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	str	x21, [sp,32]
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w19, 0
+	add	x20, x20, 2200
+	adrp	x21, .LANCHOR2
+.L383:
+	ldrh	w0, [x20,6]
+	cmp	w0, w19
+	bls	.L391
+	ldrh	w0, [x20,2]
+	add	w0, w0, w19
+	add	x0, x20, x0, sxtw 1
+	ldrh	w0, [x0,8]
+	bl	P2V_block_in_plane
+	ubfiz	x0, x0, 1, 16
+	add	x1, x21, :lo12:.LANCHOR2
+	ubfiz	x2, x19, 2, 16
+	add	w19, w19, 1
+	ldr	x3, [x1,-64]
+	uxth	w19, w19
+	ldr	x1, [x1,-80]
+	ldrh	w0, [x1,x0]
+	str	w0, [x3,x2]
+	b	.L383
+.L391:
+	adrp	x4, .LANCHOR0
+	adrp	x7, .LANCHOR2
+	mov	w0, 0
+	add	x4, x4, :lo12:.LANCHOR0
+	mov	x8, x7
+.L385:
+	ldrh	w6, [x4,2206]
+	sub	w1, w6, #1
+	cmp	w0, w1
+	bge	.L392
+	add	x1, x7, :lo12:.LANCHOR2
+	add	w5, w0, 1
+	uxth	w5, w5
+	ldr	x3, [x1,-64]
+	mov	w2, w5
+	mov	w1, w0
+.L386:
+	cmp	w2, w6
+	bcs	.L393
+	ubfiz	x9, x2, 2, 16
+	ldr	w10, [x3,w1,uxtw 2]
+	ldr	w9, [x3,x9]
+	cmp	w10, w9
+	csel	w1, w1, w2, ls
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L386
+.L393:
+	cmp	w0, w1
+	beq	.L389
+	ubfiz	x2, x0, 2, 16
+	ubfiz	x6, x1, 2, 32
+	ldr	w10, [x3,x2]
+	ldr	w9, [x3,x6]
+	str	w10, [x3,x6]
+	add	x3, x8, :lo12:.LANCHOR2
+	ldr	x3, [x3,-64]
+	str	w9, [x3,x2]
+	add	x2, x4, 2200
+	ldrh	w3, [x4,2202]
+	add	w1, w3, w1
+	add	w0, w3, w0
+	add	x1, x2, x1, sxtw 1
+	add	x0, x2, x0, sxtw 1
+	ldrh	w2, [x0,8]
+	ldrh	w6, [x1,8]
+	strh	w2, [x1,8]
+	strh	w6, [x0,8]
+.L389:
+	mov	w0, w5
+	b	.L385
+.L392:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
+	.align	2
+	.global	remove_from_free_sys_Queue
+	.type	remove_from_free_sys_Queue, %function
+remove_from_free_sys_Queue:
+	stp	x29, x30, [sp, -32]!
+	uxth	w1, w0
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x20, x20, 2200
+	ldrh	w3, [x20,6]
+	cbz	w3, .L395
+	ldrh	w4, [x20,2]
+	mov	w19, w0
+.L396:
+	cmp	w19, w3
+	bcs	.L401
+	add	w2, w19, w4
+	ubfiz	x2, x2, 1, 10
+	add	x2, x20, x2
+	ldrh	w0, [x2,8]
+	cmp	w0, w1
+	bne	.L397
+	adrp	x0, .LC2
+	add	x0, x0, :lo12:.LC2
+	bl	printk
+	ldrh	w0, [x20,2]
+	add	x1, x20, x0, sxtw 1
+	ldrh	w1, [x1,8]
+	add	w19, w19, w0
+	add	w0, w0, 1
+	and	w0, w0, 1023
+	ubfiz	x19, x19, 1, 10
+	add	x19, x20, x19
+	strh	w0, [x20,2]
+	ldrh	w0, [x20,6]
+	sub	w0, w0, #1
+	strh	w1, [x19,8]
+	strh	w0, [x20,6]
+	mov	w0, 1
+	b	.L395
+.L397:
+	add	w19, w19, 1
+	b	.L396
+.L401:
+	mov	w0, 0
+.L395:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	remove_from_free_sys_Queue, .-remove_from_free_sys_Queue
+	.align	2
+	.global	FtlFreeSysBlkQueueOut
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	str	x23, [sp,48]
+	add	x22, x22, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	add	x2, x22, 2200
+	mov	w20, 65535
+	ldrh	w0, [x22,2206]
+	cbz	w0, .L403
+	ldrh	w1, [x22,2202]
+	adrp	x19, .LANCHOR2
+	add	x23, x19, :lo12:.LANCHOR2
+	add	x3, x2, x1, sxtw 1
+	add	w1, w1, 1
+	sub	w0, w0, #1
+	and	w1, w1, 1023
+	strh	w1, [x22,2202]
+	ldr	w1, [x23,-96]
+	strh	w0, [x22,2206]
+	str	x1, [x29,72]
+	ldrh	w20, [x3,8]
+	cbnz	w1, .L403
+	mov	w0, w20
+	bl	P2V_block_in_plane
+	uxth	w21, w0
+	ldr	x0, [x23,-88]
+	lsl	w2, w20, 10
+	ldr	x1, [x29,72]
+	str	w2, [x0,4]
+	ldrb	w0, [x22,120]
+	cbz	w0, .L404
+	ldr	x0, [x23,-88]
+	mov	w2, 1
+	bl	FlashEraseBlocks
+.L404:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w1, 1
+	mov	w2, w1
+	ldr	x0, [x19,-88]
+	bl	FlashEraseBlocks
+	ubfiz	x0, x21, 1, 16
+	ldr	x2, [x19,-80]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
+	ldr	w0, [x19,-72]
+	add	w0, w0, 1
+	str	w0, [x19,-72]
+.L403:
+	mov	w0, w20
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
+	.align	2
+	.global	insert_data_list
+	.type	insert_data_list, %function
+insert_data_list:
+	adrp	x9, .LANCHOR0
+	uxth	w0, w0
+	add	x9, x9, :lo12:.LANCHOR0
+	ldrh	w1, [x9,1952]
+	cmp	w1, w0
+	bls	.L412
+	adrp	x2, .LANCHOR2
+	mov	w7, 6
+	add	x5, x2, :lo12:.LANCHOR2
+	mov	w1, -1
+	umull	x10, w0, w7
+	mov	x3, x2
+	ldr	x11, [x5,-56]
+	add	x4, x11, x10
+	strh	w1, [x4,2]
+	strh	w1, [x11,x10]
+	ldr	x1, [x5,-48]
+	cbnz	x1, .L413
+	str	x4, [x5,-48]
+	b	.L412
+.L413:
+	ubfiz	x8, x0, 1, 16
+	ldr	x13, [x5,-40]
+	ldrh	w2, [x4,4]
+	mov	x14, -6148914691236517206
+	ldr	x12, [x5,-56]
+	mov	w18, 65535
+	ldrh	w6, [x13,x8]
+	cmp	w2, wzr
+	ldrh	w17, [x9,1952]
+	mul	w6, w6, w2
+	sub	x2, x1, x12
+	asr	x2, x2, 1
+	csinv	w6, w6, wzr, ne
+	madd	x2, x14, x2, x2
+	ldr	x14, [x5,-80]
+	mov	w5, 0
+	add	x9, x14, x8
+	uxth	w2, w2
+	mov	w8, w7
+.L421:
+	add	w5, w5, 1
+	cmp	w0, w2
+	uxth	w5, w5
+	beq	.L412
+	cmp	w5, w17
+	bhi	.L412
+	ubfiz	x15, x2, 1, 16
+	ldrh	w16, [x1,4]
+	cmp	w16, wzr
+	ldrh	w7, [x13,x15]
+	mul	w7, w7, w16
+	csinv	w7, w7, wzr, ne
+	cmp	w7, w6
+	bne	.L417
+	ldrh	w15, [x14,x15]
+	ldrh	w7, [x9]
+	cmp	w15, w7
+	bcc	.L419
+	b	.L418
+.L417:
+	bhi	.L418
+.L419:
+	ldrh	w7, [x1]
+	cmp	w7, w18
+	bne	.L420
+	strh	w2, [x4,2]
+	add	x2, x3, :lo12:.LANCHOR2
+	strh	w0, [x1]
+	str	x4, [x2,-32]
+	b	.L412
+.L420:
+	umull	x1, w7, w8
+	mov	w2, w7
+	add	x1, x12, x1
+	b	.L421
+.L418:
+	strh	w2, [x11,x10]
+	ldrh	w2, [x1,2]
+	strh	w2, [x4,2]
+	add	x2, x3, :lo12:.LANCHOR2
+	ldr	x3, [x2,-48]
+	cmp	x1, x3
+	bne	.L422
+	strh	w0, [x1,2]
+	str	x4, [x2,-48]
+	b	.L412
+.L422:
+	ldrh	w3, [x1,2]
+	mov	w4, 6
+	ldr	x2, [x2,-56]
+	umull	x3, w3, w4
+	strh	w0, [x2,x3]
+	strh	w0, [x1,2]
+.L412:
+	mov	w0, 0
+	ret
+	.size	insert_data_list, .-insert_data_list
+	.align	2
+	.global	INSERT_DATA_LIST
+	.type	INSERT_DATA_LIST, %function
+INSERT_DATA_LIST:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	insert_data_list
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,-24]
+	add	w1, w1, 1
+	strh	w1, [x0,-24]
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
+	.align	2
+	.global	insert_free_list
+	.type	insert_free_list, %function
+insert_free_list:
+	uxth	w0, w0
+	mov	w7, 65535
+	cmp	w0, w7
+	beq	.L427
+	adrp	x2, .LANCHOR2
+	mov	w6, 6
+	add	x5, x2, :lo12:.LANCHOR2
+	mov	w1, -1
+	umull	x8, w0, w6
+	mov	x3, x2
+	ldr	x9, [x5,-56]
+	add	x4, x9, x8
+	strh	w1, [x4,2]
+	strh	w1, [x9,x8]
+	ldr	x1, [x5,-16]
+	cbnz	x1, .L428
+	str	x4, [x5,-16]
+	b	.L427
+.L428:
+	ldr	x11, [x5,-80]
+	ubfiz	x2, x0, 1, 16
+	ldr	x10, [x5,-56]
+	mov	x5, -6148914691236517206
+	ldrh	w12, [x11,x2]
+	sub	x2, x1, x10
+	asr	x2, x2, 1
+	madd	x2, x5, x2, x2
+	uxth	w2, w2
+.L431:
+	ubfiz	x5, x2, 1, 16
+	ldrh	w5, [x11,x5]
+	cmp	w5, w12
+	bcs	.L429
+	ldrh	w5, [x1]
+	cmp	w5, w7
+	bne	.L430
+	strh	w2, [x4,2]
+	strh	w0, [x1]
+	b	.L427
+.L430:
+	umull	x1, w5, w6
+	mov	w2, w5
+	add	x1, x10, x1
+	b	.L431
+.L429:
+	ldrh	w5, [x1,2]
+	strh	w5, [x4,2]
+	strh	w2, [x9,x8]
+	add	x2, x3, :lo12:.LANCHOR2
+	ldr	x3, [x2,-16]
+	cmp	x1, x3
+	bne	.L432
+	strh	w0, [x1,2]
+	str	x4, [x2,-16]
+	b	.L427
+.L432:
+	ldrh	w3, [x1,2]
+	mov	w4, 6
+	ldr	x2, [x2,-56]
+	umull	x3, w3, w4
+	strh	w0, [x2,x3]
+	strh	w0, [x1,2]
+.L427:
+	mov	w0, 0
+	ret
+	.size	insert_free_list, .-insert_free_list
+	.align	2
+	.global	INSERT_FREE_LIST
+	.type	INSERT_FREE_LIST, %function
+INSERT_FREE_LIST:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	insert_free_list
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,-8]
+	add	w1, w1, 1
+	strh	w1, [x0,-8]
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
+	.align	2
+	.global	List_remove_node
+	.type	List_remove_node, %function
+List_remove_node:
+	adrp	x6, .LANCHOR2
+	uxth	w1, w1
+	add	x6, x6, :lo12:.LANCHOR2
+	mov	w5, 6
+	ldr	x3, [x0]
+	mov	w7, 65535
+	umull	x1, w1, w5
+	ldr	x2, [x6,-56]
+	add	x4, x2, x1
+	cmp	x4, x3
+	bne	.L435
+	ldrh	w3, [x2,x1]
+	cmp	w3, w7
+	bne	.L436
+	str	xzr, [x0]
+	b	.L437
+.L436:
+	umull	x3, w3, w5
+	add	x3, x2, x3
+	str	x3, [x0]
+	mov	w0, -1
+	strh	w0, [x3,2]
+	b	.L437
+.L435:
+	ldrh	w0, [x2,x1]
+	ldrh	w3, [x4,2]
+	cmp	w0, w7
+	bne	.L438
+	cmp	w3, w0
+	beq	.L437
+	umull	x3, w3, w5
+	mov	w0, -1
+	strh	w0, [x2,x3]
+	b	.L437
+.L438:
+	umull	x0, w0, w5
+	add	x0, x2, x0
+	strh	w3, [x0,2]
+	ldrh	w3, [x4,2]
+	ldr	x0, [x6,-56]
+	ldrh	w7, [x2,x1]
+	umull	x3, w3, w5
+	strh	w7, [x0,x3]
+.L437:
+	mov	w0, -1
+	strh	w0, [x2,x1]
+	strh	w0, [x4,2]
+	mov	w0, 0
+	ret
+	.size	List_remove_node, .-List_remove_node
+	.align	2
+	.global	List_pop_index_node
+	.type	List_pop_index_node, %function
+List_pop_index_node:
+	stp	x29, x30, [sp, -32]!
+	uxth	w1, w1
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w19, 65535
+	ldr	x2, [x0]
+	cbz	x2, .L440
+	adrp	x3, .LANCHOR2-56
+	mov	w5, w19
+	mov	w6, 6
+	ldr	x4, [x3,#:lo12:.LANCHOR2-56]
+.L441:
+	cbnz	w1, .L442
+.L444:
+	sub	x2, x2, x4
+	mov	x1, -6148914691236517206
+	asr	x2, x2, 1
+	madd	x2, x1, x2, x2
+	uxth	w19, w2
+	mov	w1, w19
+	bl	List_remove_node
+	b	.L440
+.L442:
+	ldrh	w3, [x2]
+	cmp	w3, w5
+	beq	.L444
+	umull	x3, w3, w6
+	sub	w1, w1, #1
+	add	x2, x4, x3
+	uxth	w1, w1
+	b	.L441
+.L440:
+	mov	w0, w19
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	List_pop_index_node, .-List_pop_index_node
+	.align	2
+	.global	List_get_gc_head_node
+	.type	List_get_gc_head_node, %function
+List_get_gc_head_node:
+	adrp	x2, .LANCHOR2
+	uxth	w3, w0
+	add	x2, x2, :lo12:.LANCHOR2
+	mov	w0, 65535
+	ldr	x1, [x2,-48]
+	cbz	x1, .L452
+	ldr	x4, [x2,-56]
+	mov	w5, 6
+.L448:
+	cbz	w3, .L449
+	ldrh	w2, [x1]
+	cmp	w2, w0
+	beq	.L452
+	umull	x2, w2, w5
+	sub	w3, w3, #1
+	add	x1, x4, x2
+	uxth	w3, w3
+	b	.L448
+.L449:
+	sub	x1, x1, x4
+	mov	x0, -6148914691236517206
+	asr	x1, x1, 1
+	madd	x1, x0, x1, x1
+	uxth	w0, w1
+.L452:
+	ret
+	.size	List_get_gc_head_node, .-List_get_gc_head_node
+	.align	2
+	.global	List_update_data_list
+	.type	List_update_data_list, %function
+List_update_data_list:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	uxth	w20, w0
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x19,#:lo12:.LANCHOR2]
+	cmp	w1, w20
+	beq	.L454
+	ldrh	w1, [x0,48]
+	cmp	w1, w20
+	beq	.L454
+	ldrh	w1, [x0,96]
+	cmp	w1, w20
+	beq	.L454
+	mov	w3, 6
+	ldr	x4, [x0,-56]
+	ldr	x2, [x0,-48]
+	umull	x3, w20, w3
+	add	x1, x4, x3
+	cmp	x1, x2
+	beq	.L454
+	ldr	x5, [x0,-40]
+	ubfiz	x0, x20, 1, 16
+	ldrh	w2, [x1,4]
+	ldrh	w1, [x1,2]
+	ldrh	w0, [x5,x0]
+	mul	w2, w0, w2
+	mov	w0, 65535
+	cmp	w2, wzr
+	csinv	w2, w2, wzr, ne
+	cmp	w1, w0
+	bne	.L456
+	ldrh	w0, [x4,x3]
+	cmp	w0, w1
+	beq	.L454
+.L456:
+	mov	w0, 6
+	mov	x3, -6148914691236517206
+	umull	x1, w1, w0
+	asr	x0, x1, 1
+	add	x1, x4, x1
+	madd	x0, x3, x0, x0
+	ldrh	w1, [x1,4]
+	ldrh	w0, [x5,x0,lsl 1]
+	mul	w0, w0, w1
+	cmp	w0, wzr
+	csinv	w0, w0, wzr, ne
+	cmp	w2, w0
+	bcs	.L454
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w1, w20
+	sub	x0, x19, #48
+	bl	List_remove_node
+	ldrh	w0, [x19,-24]
+	sub	w0, w0, #1
+	strh	w0, [x19,-24]
+	mov	w0, w20
+	bl	INSERT_DATA_LIST
+.L454:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	List_update_data_list, .-List_update_data_list
+	.align	2
+	.global	ftl_map_blk_alloc_new_blk
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	mov	w20, 0
+	ldrh	w2, [x0,10]
+	ldr	x1, [x0,16]
+.L459:
+	cmp	w20, w2
+	beq	.L462
+	mov	x22, x1
+	ldrh	w21, [x1],2
+	cbnz	w21, .L460
+	mov	x19, x0
+	bl	FtlFreeSysBlkQueueOut
+	uxth	w1, w0
+	strh	w0, [x22]
+	cbz	w1, .L462
+	ldr	w0, [x19,48]
+	strh	w21, [x19,2]
+	add	w0, w0, 1
+	str	w0, [x19,48]
+	ldrh	w0, [x19,8]
+	strh	w20, [x19]
+	add	w0, w0, 1
+	strh	w0, [x19,8]
+	b	.L462
+.L460:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L459
+.L462:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
+	.align	2
+	.global	select_l2p_ram_region
+	.type	select_l2p_ram_region, %function
+select_l2p_ram_region:
+	adrp	x0, .LANCHOR0+2058
+	mov	x4, 0
+	mov	w5, 65535
+	ldrh	w2, [x0,#:lo12:.LANCHOR0+2058]
+	adrp	x0, .LANCHOR2
+	add	x1, x0, :lo12:.LANCHOR2
+	mov	x3, x0
+	ldr	x1, [x1,144]
+.L466:
+	uxth	w0, w4
+	cmp	w0, w2
+	bcs	.L482
+	add	x4, x4, 1
+	add	x6, x1, x4, lsl 4
+	ldrh	w6, [x6,-16]
+	cmp	w6, w5
+	bne	.L466
+	b	.L467
+.L482:
+	mov	w0, w2
+	mov	x4, 0
+	mov	w7, -2147483648
+.L469:
+	uxth	w6, w4
+	cmp	w6, w2
+	bcs	.L483
+	add	x5, x1, x4, lsl 4
+	ldr	w5, [x5,4]
+	tbnz	w5, #31, .L478
+	cmp	w5, w7
+	bcc	.L470
+.L478:
+	mov	w5, w7
+	mov	w6, w0
+.L470:
+	add	x4, x4, 1
+	mov	w7, w5
+	mov	w0, w6
+	b	.L469
+.L483:
+	cmp	w0, w2
+	bcc	.L467
+	add	x0, x3, :lo12:.LANCHOR2
+	add	x1, x1, 4
+	mov	w4, -1
+	mov	w3, 0
+	ldrh	w5, [x0,152]
+	mov	w0, w2
+.L473:
+	cmp	w3, w2
+	beq	.L467
+	ldr	w7, [x1]
+	cmp	w7, w4
+	bcs	.L474
+	ldrh	w6, [x1,-4]
+	cmp	w6, w5
+	csel	w4, w4, w7, eq
+	cmp	w6, w5
+	csel	w0, w0, w3, eq
+.L474:
+	add	w3, w3, 1
+	add	x1, x1, 16
+	uxth	w3, w3
+	b	.L473
+.L467:
+	ret
+	.size	select_l2p_ram_region, .-select_l2p_ram_region
+	.align	2
+	.global	FtlUpdateVaildLpn
+	.type	FtlUpdateVaildLpn, %function
+FtlUpdateVaildLpn:
+	adrp	x1, .LANCHOR2
+	add	x3, x1, :lo12:.LANCHOR2
+	ldrh	w2, [x3,154]
+	cbnz	w0, .L485
+	cmp	w2, 4
+	bhi	.L485
+	add	w2, w2, 1
+	strh	w2, [x3,154]
+	b	.L484
+.L485:
+	adrp	x2, .LANCHOR0+1952
+	add	x0, x1, :lo12:.LANCHOR2
+	mov	w7, 65535
+	ldrh	w5, [x2,#:lo12:.LANCHOR0+1952]
+	strh	wzr, [x0,154]
+	str	wzr, [x0,156]
+	ldr	x6, [x0,-40]
+	mov	x0, 0
+.L486:
+	cmp	w5, w0, uxth
+	bls	.L484
+	ldrh	w4, [x6,x0,lsl 1]
+	cmp	w4, w7
+	beq	.L487
+	add	x3, x1, :lo12:.LANCHOR2
+	ldr	w2, [x3,156]
+	add	w2, w4, w2
+	str	w2, [x3,156]
+.L487:
+	add	x0, x0, 1
+	b	.L486
+.L484:
+	ret
+	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
+	.align	2
+	.global	ftl_set_blk_mode
+	.type	ftl_set_blk_mode, %function
+ftl_set_blk_mode:
+	stp	x29, x30, [sp, -16]!
+	uxth	w0, w0
+	add	x29, sp, 0
+	cbz	w1, .L491
+	bl	ftl_set_blk_mode.part.8
+	b	.L490
+.L491:
+	adrp	x1, .LANCHOR0
+	ubfx	x2, x0, 5, 11
+	lsl	x2, x2, 2
+	ldr	x3, [x1,#:lo12:.LANCHOR0]
+	mov	w1, 1
+	lsl	w0, w1, w0
+	ldr	w1, [x3,x2]
+	bic	w0, w1, w0
+	str	w0, [x3,x2]
+.L490:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
+	.align	2
+	.global	ftl_get_blk_mode
+	.type	ftl_get_blk_mode, %function
+ftl_get_blk_mode:
+	adrp	x1, .LANCHOR0
+	uxth	w0, w0
+	ubfx	x2, x0, 5, 11
+	ldr	x1, [x1,#:lo12:.LANCHOR0]
+	ldr	w1, [x1,x2,lsl 2]
+	lsr	w0, w1, w0
+	and	w0, w0, 1
+	ret
+	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
+	.align	2
+	.global	ftl_sb_update_avl_pages
+	.type	ftl_sb_update_avl_pages, %function
+ftl_sb_update_avl_pages:
+	adrp	x3, .LANCHOR0
+	uxth	w1, w1
+	add	x4, x3, :lo12:.LANCHOR0
+	uxth	w2, w2
+	strh	wzr, [x0,4]
+	mov	w6, 65535
+	ldrh	w4, [x4,1944]
+.L495:
+	cmp	w2, w4
+	bcs	.L501
+	add	x5, x0, x2, sxtw 1
+	ldrh	w5, [x5,16]
+	cmp	w5, w6
+	beq	.L496
+	ldrh	w5, [x0,4]
+	add	w5, w5, 1
+	strh	w5, [x0,4]
+.L496:
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L495
+.L501:
+	add	x3, x3, :lo12:.LANCHOR0
+	mov	w6, 65535
+	add	x4, x0, x4, uxth 1
+	ldrh	w5, [x3,2018]
+	mov	x3, x0
+.L498:
+	cmp	x3, x4
+	beq	.L502
+	ldrh	w2, [x3,16]
+	cmp	w2, w6
+	beq	.L499
+	ldrh	w2, [x0,4]
+	add	w2, w5, w2
+	sub	w2, w2, #1
+	sub	w2, w2, w1
+	strh	w2, [x0,4]
+.L499:
+	add	x3, x3, 2
+	b	.L498
+.L502:
+	ret
+	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
+	.align	2
+	.global	make_superblock
+	.type	make_superblock, %function
+make_superblock:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	adrp	x20, .LANCHOR0
+	mov	x19, x0
+	strh	wzr, [x0,4]
+	add	x22, x19, 16
+	strb	wzr, [x0,7]
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	x21, 0
+	mov	x23, x0
+	mov	w25, -1
+	ldrh	w24, [x0,1944]
+.L504:
+	cmp	w24, w21, uxth
+	bls	.L515
+	add	x0, x23, 1976
+	ldrh	w1, [x19]
+	ldrb	w0, [x0,x21]
+	bl	V2P_block
+	strh	w25, [x22]
+	mov	w26, w0
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L505
+	strh	w26, [x22]
+	ldrb	w0, [x19,7]
+	add	w0, w0, 1
+	strb	w0, [x19,7]
+.L505:
+	add	x21, x21, 1
+	add	x22, x22, 2
+	b	.L504
+.L515:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x19,7]
+	strb	wzr, [x19,9]
+	ldrh	w1, [x1,2018]
+	mul	w0, w0, w1
+	strh	w0, [x19,4]
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	w1, [x0,160]
+	cbz	w1, .L507
+	ldrh	w1, [x19]
+	ldr	x0, [x0,-80]
+	ldrh	w0, [x0,x1,lsl 1]
+	cmp	w0, 59
+	bhi	.L507
+	mov	w0, 1
+	strb	w0, [x19,9]
+.L507:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x20,8]
+	cbz	w0, .L508
+	mov	w0, 1
+	strb	w0, [x19,9]
+.L508:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	make_superblock, .-make_superblock
+	.align	2
+	.global	update_multiplier_value
+	.type	update_multiplier_value, %function
+update_multiplier_value:
+	stp	x29, x30, [sp, -64]!
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x22, 0
+	uxth	w21, w0
+	ldrh	w23, [x1,1944]
+	mov	w19, w22
+	ldrh	w24, [x1,2018]
+	mov	x20, x1
+.L517:
+	cmp	w23, w22, uxth
+	bls	.L524
+	add	x0, x20, 1976
+	mov	w1, w21
+	ldrb	w0, [x0,x22]
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L518
+	add	w19, w19, w24
+	uxth	w19, w19
+.L518:
+	add	x22, x22, 1
+	b	.L517
+.L524:
+	cbz	w19, .L520
+	mov	w0, 32768
+	sdiv	w19, w0, w19
+.L520:
+	mov	w0, 6
+	umull	x21, w21, w0
+	adrp	x0, .LANCHOR2-56
+	ldr	x0, [x0,#:lo12:.LANCHOR2-56]
+	add	x21, x0, x21
+	mov	w0, 0
+	strh	w19, [x21,4]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	update_multiplier_value, .-update_multiplier_value
+	.align	2
+	.global	GetFreeBlockMinEraseCount
+	.type	GetFreeBlockMinEraseCount, %function
+GetFreeBlockMinEraseCount:
+	adrp	x2, .LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR2
+	ldr	x1, [x2,-16]
+	mov	w0, w1
+	cbz	x1, .L526
+	ldr	x0, [x2,-56]
+	sub	x1, x1, x0
+	mov	x0, -6148914691236517206
+	asr	x1, x1, 1
+	madd	x1, x0, x1, x1
+	ldr	x0, [x2,-80]
+	and	x1, x1, 65535
+	ldrh	w0, [x0,x1,lsl 1]
+.L526:
+	ret
+	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
+	.align	2
+	.global	GetFreeBlockMaxEraseCount
+	.type	GetFreeBlockMaxEraseCount, %function
+GetFreeBlockMaxEraseCount:
+	adrp	x2, .LANCHOR2
+	uxth	w4, w0
+	add	x5, x2, :lo12:.LANCHOR2
+	ldr	x1, [x5,-16]
+	mov	w0, w1
+	cbz	x1, .L529
+	ldrh	w3, [x5,-8]
+	mov	w0, 7
+	mov	w6, 6
+	mov	w7, 65535
+	mul	w3, w3, w0
+	ldr	x0, [x5,-56]
+	asr	w3, w3, 3
+	cmp	w4, w3
+	sub	x1, x1, x0
+	csel	w4, w3, w4, gt
+	asr	x1, x1, 1
+	mov	x3, -6148914691236517206
+	madd	x1, x3, x1, x1
+	mov	w3, 0
+	uxth	w1, w1
+.L531:
+	cmp	w3, w4
+	beq	.L534
+	umull	x5, w1, w6
+	ldrh	w5, [x0,x5]
+	cmp	w5, w7
+	bne	.L532
+.L534:
+	add	x2, x2, :lo12:.LANCHOR2
+	ubfiz	x1, x1, 1, 16
+	ldr	x0, [x2,-80]
+	ldrh	w0, [x0,x1]
+	b	.L529
+.L532:
+	add	w3, w3, 1
+	mov	w1, w5
+	uxth	w3, w3
+	b	.L531
+.L529:
+	ret
+	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
+	.align	2
+	.global	FtlPrintInfo2buf
+	.type	FtlPrintInfo2buf, %function
+FtlPrintInfo2buf:
+	stp	x29, x30, [sp, -112]!
+	adrp	x1, .LC3
+	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	adrp	x25, .LANCHOR0
+	add	x1, x1, :lo12:.LC3
+	add	x25, x25, :lo12:.LANCHOR0
+	str	x27, [sp,80]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	mov	x23, x0
+	bl	strcpy
+	add	x20, x23, 12
+	ldr	w2, [x25,168]
+	adrp	x1, .LC4
+	mov	x0, x20
+	add	x1, x1, :lo12:.LC4
+	bl	sprintf
+	add	x20, x20, x0, sxtw
+	adrp	x1, .LC5
+	ldr	w2, [x25,2036]
+	mov	x0, x20
+	add	x1, x1, :lo12:.LC5
+	bl	sprintf
+	add	x20, x20, x0, sxtw
+	adrp	x0, .LANCHOR1+504
+	ldr	w0, [x0,#:lo12:.LANCHOR1+504]
+	cmp	w0, 1
+	beq	.L537
+	sub	w0, w20, w23
+	b	.L538
+.L537:
+	add	x0, x29, 96
+	add	x1, x29, 100
+	add	x2, x29, 104
+	add	x3, x29, 108
+	adrp	x24, .LANCHOR2
+	bl	NandcGetTimeCfg
+	add	x22, x24, :lo12:.LANCHOR2
+	ldr	w4, [x29,104]
+	adrp	x1, .LC6
+	ldr	w5, [x29,108]
+	add	x1, x1, :lo12:.LC6
+	ldr	w3, [x29,100]
+	mov	x0, x20
+	ldr	w2, [x29,96]
+	bl	sprintf
+	add	x21, x20, x0, sxtw
+	adrp	x1, .LC7
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC7
+	add	x21, x21, 10
+	bl	strcpy
+	ldr	w2, [x25,2096]
+	adrp	x1, .LC8
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC8
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,156]
+	adrp	x1, .LC9
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC9
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,164]
+	adrp	x1, .LC10
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC10
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,168]
+	adrp	x1, .LC11
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC11
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,172]
+	adrp	x1, .LC12
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC12
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,176]
+	adrp	x1, .LC13
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC13
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,180]
+	adrp	x1, .LC14
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC14
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,184]
+	adrp	x1, .LC15
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC15
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,188]
+	adrp	x1, .LC16
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC16
+	lsr	w2, w2, 11
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,192]
+	adrp	x1, .LC17
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC17
+	lsr	w2, w2, 11
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,196]
+	adrp	x1, .LC18
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC18
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,200]
+	adrp	x1, .LC19
+	add	x1, x1, :lo12:.LC19
+	mov	x0, x21
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	bl	FtlBbtCalcTotleCnt
+	uxth	w3, w0
+	ldrh	w2, [x25,2110]
+	adrp	x1, .LC20
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC20
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,-8]
+	adrp	x1, .LC21
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC21
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,204]
+	adrp	x1, .LC22
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC22
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,208]
+	adrp	x1, .LC23
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC23
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,212]
+	adrp	x1, .LC24
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC24
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,-72]
+	adrp	x1, .LC25
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC25
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,216]
+	adrp	x1, .LC26
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC26
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,220]
+	adrp	x1, .LC27
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC27
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,254]
+	adrp	x1, .LC28
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC28
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,252]
+	adrp	x1, .LC29
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC29
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x25,2060]
+	adrp	x1, .LC30
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC30
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x25,2052]
+	adrp	x1, .LC31
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC31
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x25,1940]
+	adrp	x1, .LC32
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC32
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x25,2206]
+	adrp	x1, .LC33
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC33
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x25,1952]
+	adrp	x1, .LC34
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC34
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,272]
+	adrp	x1, .LC35
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC35
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x25,1956]
+	adrp	x1, .LC36
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC36
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,280]
+	adrp	x1, .LC37
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC37
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x25,2104]
+	adrp	x1, .LC38
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC38
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,2]
+	adrp	x1, .LC39
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC39
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,6]
+	adrp	x1, .LC40
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC40
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x24,#:lo12:.LANCHOR2]
+	adrp	x1, .LC41
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC41
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,8]
+	adrp	x1, .LC42
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC42
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,4]
+	adrp	x1, .LC43
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC43
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w3, [x24,#:lo12:.LANCHOR2]
+	adrp	x1, .LC44
+	ldr	x2, [x22,-40]
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC44
+	ldrh	w2, [x2,x3,lsl 1]
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,50]
+	adrp	x1, .LC45
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC45
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,54]
+	adrp	x1, .LC46
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC46
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,48]
+	adrp	x1, .LC47
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC47
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,56]
+	adrp	x1, .LC48
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC48
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,52]
+	adrp	x1, .LC49
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC49
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w3, [x22,48]
+	adrp	x1, .LC50
+	ldr	x2, [x22,-40]
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC50
+	ldrh	w2, [x2,x3,lsl 1]
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,98]
+	adrp	x1, .LC51
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC51
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,102]
+	adrp	x1, .LC52
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC52
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,96]
+	adrp	x1, .LC53
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC53
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,104]
+	adrp	x1, .LC54
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC54
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,100]
+	adrp	x1, .LC55
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC55
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,298]
+	adrp	x1, .LC56
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC56
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,302]
+	adrp	x1, .LC57
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC57
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,296]
+	adrp	x1, .LC58
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC58
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,304]
+	adrp	x1, .LC59
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC59
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,300]
+	adrp	x1, .LC60
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC60
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w3, [x22,344]
+	adrp	x1, .LC61
+	ldr	w2, [x22,160]
+	add	x1, x1, :lo12:.LC61
+	ldr	w4, [x22,436]
+	mov	x0, x21
+	ldr	w5, [x22,428]
+	orr	w2, w2, w3, lsl 8
+	ldr	w3, [x22,432]
+	bl	sprintf
+	add	x19, x21, x0, sxtw
+	ldr	w2, [x22,424]
+	adrp	x1, .LC62
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC62
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	w2, [x22,448]
+	adrp	x1, .LC63
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC63
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x22,864]
+	adrp	x1, .LC64
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC64
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x22,866]
+	adrp	x1, .LC65
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC65
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	w2, [x22,868]
+	adrp	x1, .LC66
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC66
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x22,872]
+	adrp	x1, .LC67
+	add	x1, x1, :lo12:.LC67
+	mov	x0, x19
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	bl	GetFreeBlockMinEraseCount
+	uxth	w2, w0
+	adrp	x1, .LC68
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC68
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w0, [x22,-8]
+	bl	GetFreeBlockMaxEraseCount
+	uxth	w2, w0
+	adrp	x1, .LC69
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC69
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w0, [x22,296]
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L539
+	ubfiz	x2, x0, 1, 16
+	ldr	x3, [x22,-40]
+	adrp	x1, .LC70
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC70
+	ldrh	w2, [x3,x2]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+.L539:
+	mov	w0, 0
+	adrp	x22, .LC71
+	mov	w20, 0
+	mov	w27, 65535
+	bl	List_get_gc_head_node
+	mov	w26, 6
+	uxth	w3, w0
+	add	x22, x22, :lo12:.LC71
+.L541:
+	cmp	w3, w27
+	beq	.L540
+	add	x21, x24, :lo12:.LANCHOR2
+	ubfiz	x6, x3, 1, 16
+	umull	x25, w3, w26
+	mov	x0, x19
+	mov	w2, w20
+	ldr	x5, [x21,-56]
+	mov	x1, x22
+	ldr	x4, [x21,-40]
+	add	w20, w20, 1
+	ldr	x7, [x21,-80]
+	add	x5, x5, x25
+	ldrh	w4, [x4,x6]
+	ldrh	w5, [x5,4]
+	ldrh	w6, [x7,x6]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x0, [x21,-56]
+	cmp	w20, 16
+	ldrh	w3, [x0,x25]
+	bne	.L541
+.L540:
+	add	x1, x24, :lo12:.LANCHOR2
+	adrp	x22, .LC72
+	mov	w20, 0
+	mov	w27, 65535
+	mov	w26, 6
+	add	x22, x22, :lo12:.LC72
+	ldr	x0, [x1,-16]
+	ldr	x3, [x1,-56]
+	sub	x3, x0, x3
+	mov	x0, -6148914691236517206
+	asr	x3, x3, 1
+	madd	x3, x0, x3, x3
+	uxth	w3, w3
+.L543:
+	cmp	w3, w27
+	beq	.L542
+	add	x21, x24, :lo12:.LANCHOR2
+	ubfiz	x5, x3, 1, 16
+	umull	x25, w3, w26
+	mov	x0, x19
+	mov	w2, w20
+	ldr	x4, [x21,-56]
+	mov	x1, x22
+	ldr	x6, [x21,-80]
+	add	w20, w20, 1
+	add	x4, x4, x25
+	ldrh	w5, [x6,x5]
+	ldrh	w4, [x4,4]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x0, [x21,-56]
+	cmp	w20, 4
+	ldrh	w3, [x0,x25]
+	bne	.L543
+.L542:
+	sub	w0, w19, w23
+.L538:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
+	.align	2
+	.global	rknand_proc_ftlread
+	.type	rknand_proc_ftlread, %function
+rknand_proc_ftlread:
+	stp	x29, x30, [sp, -32]!
+	adrp	x1, .LC73
+	adrp	x2, .LC74
+	add	x29, sp, 0
+	add	x1, x1, :lo12:.LC73
+	add	x2, x2, :lo12:.LC74
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	bl	sprintf
+	add	x19, x20, x0, sxtw
+	mov	x0, x19
+	bl	FtlPrintInfo2buf
+	add	x0, x19, x0, sxtw
+	sub	w0, w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
+	.align	2
+	.global	GetSwlReplaceBlock
+	.type	GetSwlReplaceBlock, %function
+GetSwlReplaceBlock:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x0, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w2, [x0,212]
+	ldr	w1, [x0,220]
+	cmp	w2, w1
+	bcs	.L548
+	adrp	x1, .LANCHOR0
+	str	wzr, [x0,204]
+	add	x2, x1, :lo12:.LANCHOR0
+	ldr	x5, [x0,-80]
+	mov	x0, 0
+	ldrh	w3, [x2,1952]
+.L549:
+	cmp	w3, w0
+	bls	.L581
+	add	x4, x19, :lo12:.LANCHOR2
+	ldrh	w6, [x5,x0,lsl 1]
+	add	x0, x0, 1
+	ldr	w2, [x4,204]
+	add	w2, w6, w2
+	str	w2, [x4,204]
+	b	.L549
+.L581:
+	add	x2, x19, :lo12:.LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR0
+	ldr	w0, [x2,204]
+	ldrh	w1, [x1,2008]
+	udiv	w3, w0, w3
+	str	w3, [x2,212]
+	ldr	w3, [x2,208]
+	sub	w0, w0, w3
+	udiv	w0, w0, w1
+	str	w0, [x2,204]
+	b	.L551
+.L548:
+	ldr	w1, [x0,216]
+	cmp	w2, w1
+	bls	.L551
+	add	w1, w1, 1
+	adrp	x4, .LANCHOR0
+	str	w1, [x0,216]
+	mov	w0, 0
+.L553:
+	add	x1, x4, :lo12:.LANCHOR0
+	ldrh	w1, [x1,1952]
+	cmp	w0, w1
+	bcs	.L551
+	add	x1, x19, :lo12:.LANCHOR2
+	ubfiz	x2, x0, 1, 32
+	add	w0, w0, 1
+	ldr	x3, [x1,-80]
+	ldrh	w1, [x3,x2]
+	add	w1, w1, 1
+	strh	w1, [x3,x2]
+	b	.L553
+.L551:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w21, [x0,220]
+	ldr	w24, [x0,212]
+	add	w1, w21, 256
+	cmp	w1, w24
+	bls	.L556
+	ldr	w2, [x0,216]
+	add	w1, w21, 768
+	cmp	w1, w2
+	bls	.L556
+	ldr	w0, [x0,160]
+	cbz	w0, .L559
+	cmp	w21, 30
+	bls	.L556
+.L559:
+	mov	w0, 65535
+	b	.L558
+.L556:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,-8]
+	add	w0, w0, w0, lsl 1
+	lsr	w0, w0, 2
+	bl	GetFreeBlockMaxEraseCount
+	uxth	w6, w0
+	add	w0, w21, 64
+	cmp	w6, w0
+	bcs	.L568
+	cmp	w21, 30
+	bhi	.L559
+.L568:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x3, [x0,-48]
+	cbz	x3, .L559
+	adrp	x1, .LANCHOR0+1952
+	mov	w23, 65535
+	ldr	x7, [x0,-56]
+	mov	w20, w23
+	ldr	x26, [x0,-80]
+	mov	x0, -6148914691236517206
+	ldrh	w9, [x1,#:lo12:.LANCHOR0+1952]
+	mov	w8, w23
+	mov	w1, 0
+	add	x0, x0, 1
+	mov	w10, 6
+.L561:
+	ldrh	w2, [x3]
+	cmp	w2, w8
+	beq	.L563
+	add	w1, w1, 1
+	uxth	w1, w1
+	cmp	w1, w9
+	bhi	.L559
+	ldrh	w4, [x3,4]
+	cbz	w4, .L562
+	sub	x4, x3, x7
+	asr	x4, x4, 1
+	mul	x4, x4, x0
+	uxth	w5, w4
+	and	x4, x4, 65535
+	ldrh	w3, [x26,x4,lsl 1]
+	cmp	w3, w21
+	bls	.L567
+	cmp	w3, w23
+	bcs	.L562
+	mov	w23, w3
+	mov	w20, w5
+.L562:
+	umull	x3, w2, w10
+	add	x3, x7, x3
+	b	.L561
+.L567:
+	mov	w20, w5
+.L563:
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L559
+	ubfiz	x25, x20, 1, 16
+	ldrh	w22, [x26,x25]
+	cmp	w22, w21
+	bls	.L565
+	str	x6, [x29,88]
+	bl	GetFreeBlockMinEraseCount
+	ldr	x6, [x29,88]
+	cmp	w21, w0, uxth
+	bcs	.L565
+	add	x0, x19, :lo12:.LANCHOR2
+	str	w23, [x0,220]
+.L565:
+	cmp	w22, w24
+	bcs	.L559
+	add	w0, w22, 128
+	cmp	w6, w0
+	ble	.L559
+	add	w0, w22, 256
+	cmp	w0, w24
+	bcc	.L566
+	add	x0, x19, :lo12:.LANCHOR2
+	add	w22, w22, 768
+	ldr	w0, [x0,216]
+	cmp	w22, w0
+	bcs	.L559
+.L566:
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x0, .LC75
+	ldrh	w5, [x26,x25]
+	add	x0, x0, :lo12:.LC75
+	mov	w1, w20
+	mov	w2, w24
+	ldr	x4, [x19,-40]
+	ldr	w3, [x19,216]
+	ldrh	w4, [x4,x25]
+	bl	printk
+	mov	w0, 1
+	str	w0, [x19,876]
+	mov	w0, w20
+.L558:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
+	.align	2
+	.global	free_data_superblock
+	.type	free_data_superblock, %function
+free_data_superblock:
+	stp	x29, x30, [sp, -16]!
+	uxth	w0, w0
+	mov	w1, 65535
+	cmp	w0, w1
+	add	x29, sp, 0
+	beq	.L583
+	adrp	x2, .LANCHOR2-40
+	ubfiz	x1, x0, 1, 16
+	ldr	x2, [x2,#:lo12:.LANCHOR2-40]
+	strh	wzr, [x2,x1]
+	bl	INSERT_FREE_LIST
+.L583:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	free_data_superblock, .-free_data_superblock
+	.align	2
+	.global	FtlGcBufInit
+	.type	FtlGcBufInit, %function
+FtlGcBufInit:
+	adrp	x3, .LANCHOR2
+	mov	w1, 0
+	add	x0, x3, :lo12:.LANCHOR2
+	adrp	x10, .LANCHOR0
+	mov	w11, 24
+	mov	w12, 1
+	mov	w6, 4
+	mov	w13, 56
+	str	wzr, [x0,880]
+.L585:
+	add	x5, x10, :lo12:.LANCHOR0
+	adrp	x9, .LANCHOR0
+	ldrh	w0, [x5,1944]
+	cmp	w1, w0
+	bcs	.L589
+	add	x2, x3, :lo12:.LANCHOR2
+	umull	x4, w1, w11
+	ldr	x7, [x2,888]
+	ldr	x8, [x2,896]
+	add	x0, x7, x4
+	str	w12, [x0,16]
+	ldrh	w0, [x5,2028]
+	mul	w0, w1, w0
+	sdiv	w0, w0, w6
+	add	x0, x8, x0, sxtw 2
+	str	x0, [x7,x4]
+	ldrh	w0, [x5,2030]
+	ldr	x8, [x2,888]
+	ldr	x5, [x2,904]
+	mul	w0, w1, w0
+	add	x7, x8, x4
+	ldr	x2, [x2,912]
+	sdiv	w0, w0, w6
+	add	x0, x5, x0, sxtw 2
+	str	x0, [x7,8]
+	umull	x0, w1, w13
+	add	w1, w1, 1
+	add	x0, x2, x0
+	ldr	x2, [x8,x4]
+	uxth	w1, w1
+	str	x2, [x0,8]
+	ldr	x2, [x7,8]
+	str	x2, [x0,16]
+	b	.L585
+.L589:
+	mov	w8, 24
+	mov	w5, 4
+.L587:
+	add	x2, x3, :lo12:.LANCHOR2
+	ldr	w1, [x2,920]
+	cmp	w0, w1
+	bcs	.L590
+	umull	x4, w0, w8
+	ldr	x7, [x2,888]
+	add	x6, x9, :lo12:.LANCHOR0
+	ldr	x10, [x2,896]
+	add	x1, x7, x4
+	str	wzr, [x1,16]
+	ldrh	w1, [x6,2028]
+	mul	w1, w0, w1
+	sdiv	w1, w1, w5
+	add	x1, x10, x1, sxtw 2
+	str	x1, [x7,x4]
+	ldrh	w1, [x6,2030]
+	ldr	x6, [x2,888]
+	ldr	x2, [x2,904]
+	mul	w1, w0, w1
+	add	x4, x6, x4
+	add	w0, w0, 1
+	sdiv	w1, w1, w5
+	uxth	w0, w0
+	add	x1, x2, x1, sxtw 2
+	str	x1, [x4,8]
+	b	.L587
+.L590:
+	ret
+	.size	FtlGcBufInit, .-FtlGcBufInit
+	.align	2
+	.global	FtlGcBufFree
+	.type	FtlGcBufFree, %function
+FtlGcBufFree:
+	adrp	x2, .LANCHOR2
+	mov	w3, 0
+	add	x2, x2, :lo12:.LANCHOR2
+	mov	w7, 56
+	mov	w9, 24
+	ldr	w8, [x2,920]
+	ldr	x5, [x2,888]
+.L592:
+	cmp	w3, w1
+	bcs	.L591
+	umull	x4, w3, w7
+	mov	w2, 0
+	add	x4, x0, x4
+.L597:
+	cmp	w2, w8
+	bcs	.L594
+	umull	x6, w2, w9
+	add	x10, x5, x6
+	ldr	x11, [x5,x6]
+	ldr	x6, [x4,8]
+	cmp	x11, x6
+	bne	.L593
+	str	wzr, [x10,16]
+	b	.L594
+.L593:
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L597
+.L594:
+	add	w3, w3, 1
+	uxth	w3, w3
+	b	.L592
+.L591:
+	ret
+	.size	FtlGcBufFree, .-FtlGcBufFree
+	.align	2
+	.global	FtlGcBufAlloc
+	.type	FtlGcBufAlloc, %function
+FtlGcBufAlloc:
+	adrp	x2, .LANCHOR2
+	mov	w7, 24
+	add	x2, x2, :lo12:.LANCHOR2
+	mov	w8, 1
+	mov	w9, 56
+	ldr	w5, [x2,920]
+	ldr	x6, [x2,888]
+	mov	w2, 0
+.L599:
+	cmp	w2, w1
+	bcs	.L605
+	mov	w3, 0
+.L603:
+	cmp	w3, w5
+	bcs	.L601
+	umull	x4, w3, w7
+	add	x4, x6, x4
+	ldr	w10, [x4,16]
+	cbnz	w10, .L600
+	umull	x3, w2, w9
+	str	w8, [x4,16]
+	add	x3, x0, x3
+	ldr	x10, [x4]
+	str	x10, [x3,8]
+	ldr	x4, [x4,8]
+	str	x4, [x3,16]
+	b	.L601
+.L600:
+	add	w3, w3, 1
+	uxth	w3, w3
+	b	.L603
+.L601:
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L599
+.L605:
+	ret
+	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
+	.align	2
+	.global	IsBlkInGcList
+	.type	IsBlkInGcList, %function
+IsBlkInGcList:
+	adrp	x1, .LANCHOR2
+	uxth	w0, w0
+	add	x1, x1, :lo12:.LANCHOR2
+	ldrh	w2, [x1,924]
+	ldr	x3, [x1,928]
+	mov	x1, 0
+.L607:
+	cmp	w2, w1, uxth
+	bls	.L611
+	add	x1, x1, 1
+	add	x4, x3, x1, lsl 1
+	ldrh	w4, [x4,-2]
+	cmp	w4, w0
+	bne	.L607
+	mov	w0, 1
+	b	.L608
+.L611:
+	mov	w0, 0
+.L608:
+	ret
+	.size	IsBlkInGcList, .-IsBlkInGcList
+	.align	2
+	.global	FtlGcUpdatePage
+	.type	FtlGcUpdatePage, %function
+FtlGcUpdatePage:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w19, w0
+	lsr	x0, x19, 10
+	str	x1, [x29,32]
+	str	x2, [x29,40]
+	bl	P2V_block_in_plane
+	adrp	x3, .LANCHOR2
+	ldr	x2, [x29,40]
+	add	x4, x3, :lo12:.LANCHOR2
+	ldr	x1, [x29,32]
+	uxth	w8, w0
+	mov	x5, 0
+	ldrh	w7, [x4,924]
+	ldr	x6, [x4,928]
+.L613:
+	uxth	w4, w5
+	cmp	w4, w7
+	bcs	.L617
+	add	x5, x5, 1
+	add	x9, x6, x5, lsl 1
+	ldrh	w9, [x9,-2]
+	cmp	w9, w8
+	bne	.L613
+.L617:
+	cmp	w4, w7
+	bne	.L615
+	ubfiz	x4, x4, 1, 16
+	strh	w0, [x6,x4]
+	add	x0, x3, :lo12:.LANCHOR2
+	ldrh	w4, [x0,924]
+	add	w4, w4, 1
+	strh	w4, [x0,924]
+.L615:
+	add	x3, x3, :lo12:.LANCHOR2
+	mov	w0, 12
+	ldrh	w4, [x3,936]
+	ldr	x5, [x3,944]
+	umull	x4, w4, w0
+	add	x5, x5, x4
+	str	w1, [x5,4]
+	ldr	x1, [x3,944]
+	add	x0, x1, x4
+	str	w2, [x0,8]
+	str	w19, [x1,x4]
+	ldrh	w0, [x3,936]
+	add	w0, w0, 1
+	strh	w0, [x3,936]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
+	.align	2
+	.global	FtlGcRefreshOpenBlock
+	.type	FtlGcRefreshOpenBlock, %function
+FtlGcRefreshOpenBlock:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxth	w19, w0
+	adrp	x0, .LC76
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC76
+	bl	printk
+	adrp	x2, .LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR2
+	ldrh	w3, [x2,952]
+	cmp	w3, w19
+	beq	.L620
+	ldrh	w1, [x2,954]
+	cmp	w1, w19
+	beq	.L620
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L621
+	strh	w19, [x2,952]
+	b	.L620
+.L621:
+	cmp	w1, w0
+	bne	.L620
+	strh	w19, [x2,954]
+.L620:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcRefreshOpenBlock, .-FtlGcRefreshOpenBlock
+	.align	2
+	.global	FtlGcRefreshBlock
+	.type	FtlGcRefreshBlock, %function
+FtlGcRefreshBlock:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxth	w19, w0
+	adrp	x0, .LC76
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC76
+	bl	printk
+	adrp	x2, .LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR2
+	ldrh	w3, [x2,952]
+	cmp	w3, w19
+	beq	.L623
+	ldrh	w1, [x2,954]
+	cmp	w1, w19
+	beq	.L623
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L624
+	strh	w19, [x2,952]
+	b	.L623
+.L624:
+	cmp	w1, w0
+	bne	.L623
+	strh	w19, [x2,954]
+.L623:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
+	.align	2
+	.global	FtlGcMarkBadPhyBlk
+	.type	FtlGcMarkBadPhyBlk, %function
+FtlGcMarkBadPhyBlk:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w20, w0
+	adrp	x19, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	mov	w0, w20
+	add	x22, x19, :lo12:.LANCHOR2
+	str	x23, [sp,48]
+	bl	P2V_block_in_plane
+	uxth	w21, w0
+	ldrh	w1, [x22,956]
+	adrp	x0, .LC77
+	mov	w2, w20
+	add	x0, x0, :lo12:.LC77
+	bl	printk
+	mov	w0, w21
+	bl	FtlGcRefreshBlock
+	ldr	w0, [x22,160]
+	cbz	w0, .L626
+	ubfiz	x0, x21, 1, 16
+	ldr	x2, [x22,-80]
+	ldrh	w1, [x2,x0]
+	cmp	w1, 29
+	bls	.L626
+	sub	w1, w1, #30
+	strh	w1, [x2,x0]
+.L626:
+	add	x2, x19, :lo12:.LANCHOR2
+	mov	x0, 0
+	add	x2, x2, 960
+	ldrh	w1, [x2,-4]
+.L627:
+	cmp	w1, w0, uxth
+	bls	.L633
+	add	x0, x0, 1
+	add	x3, x2, x0, lsl 1
+	ldrh	w3, [x3,-2]
+	cmp	w3, w20
+	bne	.L627
+	b	.L628
+.L633:
+	cmp	w1, 15
+	bhi	.L628
+	add	x19, x19, :lo12:.LANCHOR2
+	add	w0, w1, 1
+	add	x19, x19, 960
+	strh	w0, [x19,-4]
+	strh	w20, [x19,w1,sxtw 1]
+.L628:
+	mov	w0, 0
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
+	.align	2
+	.global	FtlGcReFreshBadBlk
+	.type	FtlGcReFreshBadBlk, %function
+FtlGcReFreshBadBlk:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,956]
+	cbz	w1, .L635
+	ldrh	w3, [x0,952]
+	mov	w2, 65535
+	cmp	w3, w2
+	bne	.L635
+	ldrh	w2, [x0,994]
+	cmp	w2, w1
+	bcc	.L636
+	strh	wzr, [x0,994]
+.L636:
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x0, x19, 960
+	ldrh	w1, [x19,994]
+	ldrh	w0, [x0,w1,sxtw 1]
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	ldrh	w0, [x19,994]
+	add	w0, w0, 1
+	strh	w0, [x19,994]
+.L635:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
+	.align	2
+	.global	ftl_memset
+	.type	ftl_memset, %function
+ftl_memset:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memset
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memset, .-ftl_memset
+	.align	2
+	.global	BuildFlashLsbPageTable
+	.type	BuildFlashLsbPageTable, %function
+BuildFlashLsbPageTable:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w1
+	cbnz	w0, .L642
+	adrp	x1, .LANCHOR0
+	mov	x0, 0
+	add	x1, x1, :lo12:.LANCHOR0
+.L643:
+	add	x2, x1, 196
+	strh	w0, [x2,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L643
+.L649:
+	adrp	x19, .LANCHOR2
+	mov	w1, 255
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w2, 1024
+	add	x19, x19, 996
+	uxth	w20, w20
+	mov	x0, x19
+	bl	ftl_memset
+	adrp	x1, .LANCHOR0
+	mov	x0, 0
+	add	x1, x1, :lo12:.LANCHOR0
+	b	.L644
+.L642:
+	cmp	w0, 1
+	bne	.L645
+	adrp	x3, .LANCHOR0
+	mov	x0, 0
+	mov	w4, 3
+	mov	w5, 2
+	add	x3, x3, :lo12:.LANCHOR0
+.L648:
+	cmp	x0, 3
+	uxth	w1, w0
+	mov	w2, w1
+	bls	.L646
+	ubfiz	w2, w1, 1, 15
+	and	w1, w1, 1
+	cmp	w1, wzr
+	csel	w1, w4, w5, ne
+	sub	w2, w2, w1
+	uxth	w2, w2
+.L646:
+	add	x1, x3, 196
+	strh	w2, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L648
+	b	.L649
+.L645:
+	cmp	w0, 2
+	bne	.L650
+	adrp	x3, .LANCHOR0
+	mov	w1, 65535
+	mov	x0, 0
+	add	x3, x3, :lo12:.LANCHOR0
+.L652:
+	add	x4, x3, 196
+	cmp	x0, 1
+	uxth	w2, w0
+	csel	w2, w1, w2, hi
+	add	w1, w1, 2
+	strh	w2, [x4,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	uxth	w1, w1
+	bne	.L652
+	b	.L649
+.L650:
+	cmp	w0, 3
+	bne	.L653
+	adrp	x3, .LANCHOR0
+	mov	x0, 0
+	mov	w4, 5
+	mov	w5, 4
+	add	x3, x3, :lo12:.LANCHOR0
+.L656:
+	cmp	x0, 5
+	uxth	w1, w0
+	mov	w2, w1
+	bls	.L654
+	ubfiz	w2, w1, 1, 15
+	and	w1, w1, 1
+	cmp	w1, wzr
+	csel	w1, w4, w5, ne
+	sub	w2, w2, w1
+	uxth	w2, w2
+.L654:
+	add	x1, x3, 196
+	strh	w2, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L656
+	b	.L649
+.L653:
+	cmp	w0, 4
+	bne	.L657
+	adrp	x1, .LANCHOR0
+	mov	w5, 7
+	add	x1, x1, :lo12:.LANCHOR0
+	mov	w4, 6
+	add	x2, x1, 196
+	strh	w0, [x2,8]
+	mov	w0, 5
+	strh	wzr, [x1,196]
+	mov	w1, 1
+	strh	w0, [x2,10]
+	mov	w0, 7
+	strh	w1, [x2,2]
+	mov	w1, 2
+	strh	w0, [x2,12]
+	mov	w0, 8
+	strh	w1, [x2,4]
+	mov	w1, 3
+	strh	w0, [x2,14]
+	mov	w0, 8
+	strh	w1, [x2,6]
+.L659:
+	and	w3, w0, 1
+	ubfiz	w1, w0, 1, 15
+	add	w0, w0, 1
+	cmp	w3, wzr
+	csel	w3, w5, w4, ne
+	add	x2, x2, 2
+	uxth	w0, w0
+	sub	w1, w1, w3
+	cmp	w0, 256
+	strh	w1, [x2,14]
+	bne	.L659
+	b	.L649
+.L657:
+	cmp	w0, 5
+	bne	.L660
+	adrp	x2, .LANCHOR0
+	mov	x0, 0
+	add	x2, x2, :lo12:.LANCHOR0
+.L661:
+	add	x1, x2, 196
+	strh	w0, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 16
+	bne	.L661
+	mov	x0, 0
+.L662:
+	add	x2, x1, x0
+	add	w3, w0, 16
+	add	x0, x0, 2
+	cmp	x0, 480
+	strh	w3, [x2,32]
+	bne	.L662
+	b	.L649
+.L660:
+	cmp	w0, 6
+	bne	.L649
+	adrp	x1, .LANCHOR0
+	mov	x2, 0
+	mov	w4, 12
+	mov	w5, 10
+	add	x1, x1, :lo12:.LANCHOR0
+.L665:
+	cmp	x2, 5
+	uxth	w3, w2
+	mov	w0, w3
+	bls	.L663
+	add	w0, w3, w3, lsl 1
+	and	w3, w3, 1
+	cmp	w3, wzr
+	uxth	w0, w0
+	csel	w3, w4, w5, ne
+	sub	w0, w0, w3
+	uxth	w0, w0
+.L663:
+	add	x3, x1, 196
+	strh	w0, [x3,x2,lsl 1]
+	add	x2, x2, 1
+	cmp	x2, 256
+	bne	.L665
+	b	.L649
+.L644:
+	cmp	w20, w0, uxth
+	bls	.L683
+	add	x2, x1, 196
+	ldrh	w2, [x2,x0,lsl 1]
+	add	x0, x0, 1
+	strh	w2, [x19,w2,sxtw 1]
+	b	.L644
+.L683:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	BuildFlashLsbPageTable, .-BuildFlashLsbPageTable
+	.align	2
+	.global	FlashDieInfoInit
+	.type	FlashDieInfoInit, %function
+FlashDieInfoInit:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR2
+	str	x27, [sp,80]
+	add	x1, x22, :lo12:.LANCHOR2
+	adrp	x21, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	strb	wzr, [x1,2020]
+	adrp	x1, .LANCHOR1+482
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x1,#:lo12:.LANCHOR1+482]
+	strb	wzr, [x0,1845]
+	cmp	w1, 256
+	bls	.L685
+	mov	w1, 512
+	b	.L701
+.L685:
+	cmp	w1, 128
+	bls	.L701
+	mov	w1, 256
+.L701:
+	add	x19, x21, :lo12:.LANCHOR0
+	str	w1, [x0,12]
+	mov	w2, 8
+	mov	w1, 0
+	add	x0, x19, 1848
+	add	x25, x19, 708
+	mov	x24, 0
+	add	x26, x19, 1620
+	bl	ftl_memset
+	mov	w1, 0
+	mov	w2, 32
+	mov	x0, x25
+	bl	ftl_memset
+	add	x0, x19, 1652
+	mov	w1, 0
+	mov	w2, 192
+	bl	ftl_memset
+	ldr	x20, [x19,744]
+	add	x23, x20, 1
+.L689:
+	ldrb	w2, [x20]
+	mov	x0, x23
+	add	x1, x26, x24, lsl 3
+	bl	FlashMemCmp8
+	cbnz	w0, .L688
+	ldrb	w1, [x19,1845]
+	str	w0, [x25,w1,sxtw 2]
+	add	w0, w1, 1
+	add	x1, x19, x1, sxtw
+	strb	w0, [x19,1845]
+	strb	w24, [x1,1848]
+.L688:
+	add	x24, x24, 1
+	cmp	x24, 4
+	bne	.L689
+	add	x19, x21, :lo12:.LANCHOR0
+	add	x0, x22, :lo12:.LANCHOR2
+	ldrb	w1, [x19,1845]
+	strb	w1, [x0,2020]
+	ldrb	w0, [x20,8]
+	cmp	w0, 2
+	beq	.L690
+.L694:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrb	w1, [x20,13]
+	add	x22, x22, :lo12:.LANCHOR2
+	ldr	x27, [sp,80]
+	ldp	x23, x24, [sp,48]
+	ldrb	w0, [x21,1845]
+	ldp	x25, x26, [sp,64]
+	mul	w0, w0, w1
+	ldrh	w1, [x20,14]
+	ldp	x19, x20, [sp,16]
+	mul	w0, w0, w1
+	strh	w0, [x22,2022]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 96
+	ret
+.L690:
+	ldr	w26, [x19,12]
+	mov	x24, 0
+	add	x27, x19, 1620
+	add	x25, x19, 708
+.L693:
+	ldrb	w2, [x20]
+	mov	x0, x23
+	add	x1, x27, x24, lsl 3
+	bl	FlashMemCmp8
+	cbnz	w0, .L691
+	ldrb	w1, [x20,13]
+	ldrb	w3, [x19,1845]
+	mul	w0, w1, w26
+	ldrh	w1, [x20,14]
+	mov	x2, x3
+	and	w1, w1, 65280
+	mul	w1, w0, w1
+	str	w1, [x25,w3,sxtw 2]
+	ldrb	w0, [x20,23]
+	cbz	w0, .L692
+	lsl	w1, w1, 1
+	str	w1, [x25,w3,sxtw 2]
+.L692:
+	add	x0, x19, x3
+	add	w2, w2, 1
+	strb	w2, [x19,1845]
+	strb	w24, [x0,1848]
+.L691:
+	add	x24, x24, 1
+	cmp	x24, 4
+	bne	.L693
+	b	.L694
+	.size	FlashDieInfoInit, .-FlashDieInfoInit
+	.align	2
+	.global	ReadFlashInfo
+	.type	ReadFlashInfo, %function
+ReadFlashInfo:
+	stp	x29, x30, [sp, -32]!
+	mov	w1, 0
+	mov	w2, 11
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	bl	ftl_memset
+	adrp	x1, .LANCHOR0
+	mov	w5, 1
+	add	x1, x1, :lo12:.LANCHOR0
+	ldr	x0, [x1,744]
+	ldrb	w2, [x0,9]
+	ldr	w0, [x1,12]
+	mul	w0, w0, w2
+	ldrb	w2, [x1,1936]
+	strb	w2, [x19,7]
+	uxth	w0, w0
+	strh	w0, [x19,4]
+	ldr	x3, [x1,744]
+	ldrb	w2, [x3,13]
+	mul	w0, w2, w0
+	ldrh	w2, [x3,14]
+	mul	w0, w0, w2
+	ldrb	w2, [x3,8]
+	mul	w0, w0, w2
+	str	w0, [x19]
+	ldr	x0, [x1,744]
+	ldrb	w4, [x1,1845]
+	ldrb	w0, [x0,9]
+	strb	w0, [x19,6]
+	mov	w0, 32
+	strb	w0, [x19,8]
+	ldr	x0, [x1,744]
+	ldrb	w0, [x0,7]
+	strb	w0, [x19,9]
+	mov	x0, 0
+	strb	wzr, [x19,10]
+.L703:
+	cmp	w4, w0, uxtb
+	bls	.L705
+	add	x2, x1, 1848
+	ldrb	w3, [x19,10]
+	ldrb	w2, [x0,x2]
+	add	x0, x0, 1
+	lsl	w2, w5, w2
+	orr	w2, w2, w3
+	strb	w2, [x19,10]
+	b	.L703
+.L705:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ReadFlashInfo, .-ReadFlashInfo
+	.align	2
+	.global	FtlMemInit
+	.type	FtlMemInit, %function
+FtlMemInit:
+	stp	x29, x30, [sp, -80]!
+	mov	w1, 65535
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	adrp	x22, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR2
+	add	x3, x22, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	str	x25, [sp,64]
+	str	w1, [x0,2036]
+	mov	w1, -1
+	strh	wzr, [x0,2024]
+	strh	w1, [x0,952]
+	str	wzr, [x0,2028]
+	str	wzr, [x0,344]
+	str	wzr, [x0,196]
+	str	wzr, [x0,200]
+	str	wzr, [x0,184]
+	str	wzr, [x0,172]
+	str	wzr, [x0,168]
+	str	wzr, [x0,176]
+	str	wzr, [x0,180]
+	str	wzr, [x0,164]
+	str	wzr, [x0,204]
+	str	wzr, [x0,208]
+	str	wzr, [x0,-72]
+	str	wzr, [x0,216]
+	str	wzr, [x0,220]
+	str	wzr, [x0,2032]
+	str	wzr, [x0,876]
+	str	wzr, [x0,2040]
+	str	wzr, [x0,868]
+	str	wzr, [x3,2100]
+	strh	w1, [x0,954]
+	mov	w1, 32
+	ldrh	w2, [x3,2024]
+	strh	w1, [x0,864]
+	mov	w1, 128
+	strh	w1, [x0,866]
+	mov	w1, 1024
+	strh	wzr, [x0,872]
+	sdiv	w2, w1, w2
+	ldrh	w1, [x3,1944]
+	strh	wzr, [x0,956]
+	lsl	w1, w1, 2
+	strh	wzr, [x0,2044]
+	strh	wzr, [x0,994]
+	cmp	w2, w1
+	str	w2, [x0,2048]
+	bls	.L707
+	str	w1, [x0,2048]
+.L707:
+	add	x20, x22, :lo12:.LANCHOR0
+	add	x19, x21, :lo12:.LANCHOR2
+	mov	w24, 56
+	ldrh	w0, [x20,2022]
+	str	wzr, [x20,2080]
+	lsl	w0, w0, 1
+	bl	ftl_malloc
+	str	x0, [x19,928]
+	ldrh	w1, [x20,2022]
+	mov	w0, 12
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	ldrh	w23, [x20,1944]
+	str	x0, [x19,944]
+	mul	w23, w23, w24
+	lsl	w25, w23, 3
+	mov	w0, w25
+	bl	ftl_malloc
+	str	x0, [x19,2056]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2064]
+	mov	w0, w25
+	bl	ftl_malloc
+	str	x0, [x19,2072]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,-88]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,912]
+	ldr	w0, [x19,2048]
+	mul	w0, w0, w24
+	bl	ftl_malloc
+	str	x0, [x20,2088]
+	ldrh	w0, [x20,1944]
+	ldrh	w23, [x20,2028]
+	lsl	w0, w0, 1
+	add	w0, w0, 1
+	str	w0, [x19,920]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,-64]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2080]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2088]
+	ldr	w0, [x19,920]
+	mul	w0, w23, w0
+	bl	ftl_malloc
+	str	x0, [x19,896]
+	ldr	w0, [x19,2048]
+	mul	w0, w23, w0
+	bl	ftl_malloc
+	str	x0, [x19,2096]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2104]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2112]
+	ldr	w1, [x19,920]
+	mov	w0, 24
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	ldrh	w23, [x20,1944]
+	str	x0, [x19,888]
+	ldrh	w0, [x20,2030]
+	mul	w23, w0, w23
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2120]
+	lsl	w0, w23, 3
+	bl	ftl_malloc
+	str	x0, [x19,2128]
+	ldrh	w1, [x20,2030]
+	ldr	w0, [x19,920]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,904]
+	ldrh	w1, [x20,2030]
+	ldr	w0, [x19,2048]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,2136]
+	ldrh	w0, [x20,1954]
+	lsl	w0, w0, 1
+	strh	w0, [x19,2144]
+	and	w0, w0, 65534
+	bl	ftl_malloc
+	str	x0, [x19,2152]
+	ldrh	w0, [x19,2144]
+	add	x0, x0, 547
+	lsr	x0, x0, 9
+	strh	w0, [x19,2144]
+	lsl	w0, w0, 9
+	bl	ftl_malloc
+	ldrh	w23, [x20,1954]
+	str	x0, [x19,2160]
+	add	x0, x0, 32
+	lsl	w23, w23, 1
+	str	x0, [x19,-80]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2168]
+	mov	w0, w23
+	bl	ftl_malloc
+	ldr	w23, [x20,2048]
+	str	x0, [x19,-40]
+	lsl	w23, w23, 1
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2176]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2184]
+	ldrh	w0, [x20,1954]
+	lsr	w0, w0, 3
+	add	w0, w0, 4
+	bl	ftl_malloc
+	str	x0, [x22,#:lo12:.LANCHOR0]
+	ldrh	w0, [x20,2040]
+	lsl	w0, w0, 1
+	bl	ftl_malloc
+	str	x0, [x20,2072]
+	ldrh	w0, [x20,2040]
+	lsl	w0, w0, 1
+	bl	ftl_malloc
+	str	x0, [x19,2192]
+	ldrh	w0, [x20,2040]
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,2200]
+	ldrh	w0, [x20,2042]
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,2208]
+	ldrh	w2, [x20,2042]
+	mov	w1, 0
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldrh	w23, [x20,2056]
+	lsl	w23, w23, 2
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2216]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,2224]
+	ldr	w0, [x20,2048]
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,2232]
+	ldrh	w0, [x20,2058]
+	lsl	w0, w0, 4
+	bl	ftl_malloc
+	str	x0, [x19,144]
+	ldrh	w1, [x20,2058]
+	ldrh	w0, [x20,2028]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,2240]
+	ldrh	w1, [x20,1954]
+	mov	w0, 6
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,-56]
+	ldrh	w0, [x20,2014]
+	ldrh	w1, [x20,1966]
+	add	w0, w0, 31
+	asr	w0, w0, 5
+	strh	w0, [x19,2248]
+	mul	w0, w0, w1
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x20,2136]
+	add	x1, x20, 2104
+	ldrh	w4, [x19,2248]
+	ldrh	w5, [x20,1966]
+	mov	w0, 1
+	mov	w2, w4
+.L708:
+	cmp	w0, w5
+	add	x1, x1, 8
+	bcs	.L808
+	ldr	x3, [x20,2136]
+	add	w0, w0, 1
+	add	x3, x3, x2, uxtw 2
+	add	w2, w2, w4
+	str	x3, [x1,32]
+	b	.L708
+.L808:
+	add	x1, x22, :lo12:.LANCHOR0
+.L710:
+	cmp	w0, 8
+	beq	.L809
+	add	x2, x1, x0, uxtw 3
+	add	w0, w0, 1
+	str	xzr, [x2,2136]
+	b	.L710
+.L809:
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x1, [x0,2176]
+	cbnz	x1, .L712
+.L714:
+	adrp	x0, .LC78
+	adrp	x1, .LANCHOR3
+	add	x0, x0, :lo12:.LC78
+	add	x1, x1, :lo12:.LANCHOR3
+	bl	printk
+	mov	w0, -1
+	b	.L713
+.L712:
+	ldr	x1, [x0,2184]
+	cbz	x1, .L714
+	ldr	x1, [x0,2216]
+	cbz	x1, .L714
+	ldr	x1, [x0,2232]
+	cbz	x1, .L714
+	ldr	x1, [x0,144]
+	cbz	x1, .L714
+	ldr	x1, [x0,2240]
+	cbz	x1, .L714
+	ldr	x1, [x0,-56]
+	cbz	x1, .L714
+	add	x22, x22, :lo12:.LANCHOR0
+	ldr	x1, [x22,2136]
+	cbz	x1, .L714
+	ldr	x0, [x0,-40]
+	cbz	x0, .L714
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x1, [x0,928]
+	cbz	x1, .L714
+	ldr	x1, [x0,944]
+	cbz	x1, .L714
+	ldr	x1, [x0,2056]
+	cbz	x1, .L714
+	ldr	x1, [x0,2072]
+	cbz	x1, .L714
+	ldr	x1, [x0,-88]
+	cbz	x1, .L714
+	ldr	x1, [x0,912]
+	cbz	x1, .L714
+	ldr	x1, [x0,2064]
+	cbz	x1, .L714
+	ldr	x1, [x0,-64]
+	cbz	x1, .L714
+	ldr	x1, [x0,2080]
+	cbz	x1, .L714
+	ldr	x0, [x0,2088]
+	cbz	x0, .L714
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x1, [x0,896]
+	cbz	x1, .L714
+	ldr	x1, [x0,2104]
+	cbz	x1, .L714
+	ldr	x1, [x0,2112]
+	cbz	x1, .L714
+	ldr	x1, [x0,888]
+	cbz	x1, .L714
+	ldr	x1, [x0,2120]
+	cbz	x1, .L714
+	ldr	x1, [x0,2128]
+	cbz	x1, .L714
+	ldr	x1, [x0,904]
+	cbz	x1, .L714
+	ldr	x1, [x0,-80]
+	cbz	x1, .L714
+	ldr	x0, [x0,2152]
+	cbz	x0, .L714
+	adrp	x0, .LANCHOR0+2072
+	ldr	x0, [x0,#:lo12:.LANCHOR0+2072]
+	cbz	x0, .L714
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	x1, [x0,2192]
+	cbz	x1, .L714
+	ldr	x1, [x0,2200]
+	cbz	x1, .L714
+	ldr	x0, [x0,2208]
+	cbz	x0, .L714
+	mov	w0, 0
+.L713:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlMemInit, .-FtlMemInit
+	.align	2
+	.global	FtlBbt2Bitmap
+	.type	FtlBbt2Bitmap, %function
+FtlBbt2Bitmap:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	adrp	x0, .LANCHOR2+2248
+	mov	x19, x1
+	ldrh	w2, [x0,#:lo12:.LANCHOR2+2248]
+	mov	x0, x1
+	mov	w1, 0
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	mov	x3, 0
+	mov	w0, 65535
+	mov	w5, 1
+.L812:
+	ldrh	w2, [x20,x3]
+	cmp	w2, w0
+	beq	.L810
+	ubfx	x4, x2, 5, 11
+	add	x3, x3, 2
+	lsl	x4, x4, 2
+	lsl	w2, w5, w2
+	cmp	x3, 1024
+	ldr	w1, [x19,x4]
+	orr	w2, w1, w2
+	str	w2, [x19,x4]
+	bne	.L812
+.L810:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
+	.align	2
+	.global	FtlBbtMemInit
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
+	adrp	x0, .LANCHOR0
+	mov	w1, -1
+	stp	x29, x30, [sp, -16]!
+	add	x0, x0, :lo12:.LANCHOR0
+	mov	w2, 16
+	add	x29, sp, 0
+	add	x0, x0, 2116
+	strh	w1, [x0,-12]
+	mov	w1, 255
+	strh	wzr, [x0,-6]
+	bl	ftl_memset
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	2
+	.global	FtlFreeSysBlkQueueInit
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	adrp	x1, .LANCHOR0
+	mov	w2, 2048
+	stp	x29, x30, [sp, -16]!
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	strh	w0, [x1,2200]
+	add	x0, x1, 2208
+	strh	wzr, [x1,2202]
+	strh	wzr, [x1,2204]
+	strh	wzr, [x1,2206]
+	mov	w1, 0
+	bl	ftl_memset
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	2
+	.global	ftl_free_no_use_map_blk
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
+	stp	x29, x30, [sp, -96]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x19, x0
+	ldrh	w2, [x0,10]
+	ldr	x21, [x0,32]
+	ldr	x25, [x0,16]
+	lsl	w2, w2, 1
+	ldr	x20, [x0,40]
+	mov	x0, x21
+	bl	ftl_memset
+	mov	w0, 0
+.L818:
+	ldrh	w1, [x19,6]
+	cmp	w1, w0
+	bls	.L831
+	ubfiz	x1, x0, 2, 16
+	ldr	w2, [x20,x1]
+	mov	w1, 0
+	ubfx	x2, x2, 10, 16
+.L819:
+	ldrh	w3, [x19,10]
+	cmp	w3, w1
+	bls	.L832
+	ubfiz	x3, x1, 1, 16
+	ldrh	w4, [x25,x3]
+	cmp	w4, w2
+	bne	.L820
+	ldrh	w4, [x21,x3]
+	add	w4, w4, 1
+	strh	w4, [x21,x3]
+.L820:
+	add	w1, w1, 1
+	uxth	w1, w1
+	b	.L819
+.L832:
+	add	w0, w0, 1
+	uxth	w0, w0
+	b	.L818
+.L831:
+	mov	w24, 0
+	ldrh	w26, [x21]
+	mov	w20, w24
+	adrp	x27, .LANCHOR0
+.L823:
+	ldrh	w0, [x19,10]
+	cmp	w0, w20
+	bls	.L833
+	ldrh	w0, [x19]
+	uxtw	x22, w20
+	cmp	w0, w20
+	bne	.L824
+	add	x0, x27, :lo12:.LANCHOR0
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x0,2020]
+	cmp	w1, w0
+	bcs	.L824
+	strh	w0, [x21,x22,lsl 1]
+.L824:
+	lsl	x22, x22, 1
+	ldrh	w23, [x21,x22]
+	cmp	w26, w23
+	bls	.L825
+	mov	w24, w20
+	mov	w26, w23
+.L825:
+	cbnz	w23, .L826
+	ldrh	w0, [x25,x22]
+	cbz	w0, .L826
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+	strh	w23, [x25,x22]
+	ldrh	w0, [x19,8]
+	sub	w0, w0, #1
+	strh	w0, [x19,8]
+.L826:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L823
+.L833:
+	mov	w0, w24
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
+	.align	2
+	.global	FtlL2PDataInit
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
+	stp	x29, x30, [sp, -48]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	adrp	x19, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	add	x21, x20, :lo12:.LANCHOR0
+	add	x22, x19, :lo12:.LANCHOR2
+	ldr	w2, [x21,2048]
+	ldr	x0, [x22,2184]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w3, [x21,2028]
+	mov	w1, 255
+	ldrh	w2, [x21,2058]
+	ldr	x0, [x22,2240]
+	mul	w2, w3, w2
+	bl	ftl_memset
+	mov	w1, 0
+	mov	w5, -1
+.L835:
+	add	x3, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x3,2058]
+	cmp	w0, w1
+	bls	.L837
+	add	x4, x19, :lo12:.LANCHOR2
+	ubfiz	x0, x1, 4, 16
+	ldr	x2, [x4,144]
+	add	x2, x2, x0
+	str	wzr, [x2,4]
+	ldr	x2, [x4,144]
+	strh	w5, [x2,x0]
+	ldr	x2, [x4,144]
+	add	x2, x2, x0
+	ldrh	w0, [x3,2028]
+	ldr	x3, [x4,2240]
+	mul	w0, w0, w1
+	add	w1, w1, 1
+	sxtw	x0, w0
+	uxth	w1, w1
+	and	x0, x0, -4
+	add	x0, x3, x0
+	str	x0, [x2,8]
+	b	.L835
+.L837:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w4, [x3,2048]
+	ldrh	w3, [x3,2056]
+	add	x1, x0, 2256
+	mov	w2, -1
+	strh	w3, [x0,2262]
+	ldr	x3, [x0,2176]
+	strh	w4, [x0,2266]
+	mov	w4, -3902
+	str	x3, [x0,2272]
+	ldr	x3, [x0,2232]
+	strh	w4, [x0,2260]
+	str	x3, [x0,2280]
+	ldrh	w4, [x0,2320]
+	ldr	x3, [x0,2184]
+	strh	w2, [x0,2258]
+	strh	w2, [x0,2256]
+	strh	w4, [x0,2264]
+	str	x3, [x0,2288]
+	ldr	x0, [x0,2216]
+	str	x0, [x1,40]
+	strh	w2, [x1,60]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
+	.align	2
+	.global	FtlVariablesInit
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
+	stp	x29, x30, [sp, -32]!
+	mov	w0, -1
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	adrp	x20, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR0
+	strh	w0, [x19,2336]
+	mov	w0, -1
+	ldrh	w2, [x20,2040]
+	str	w0, [x19,2348]
+	ldr	x0, [x20,2072]
+	lsl	w2, w2, 1
+	str	xzr, [x19,2328]
+	str	wzr, [x19,2340]
+	str	wzr, [x19,2344]
+	str	wzr, [x19,160]
+	strh	wzr, [x20,2066]
+	bl	ftl_memset
+	ldrh	w2, [x20,1954]
+	mov	w1, 0
+	ldr	x0, [x19,-80]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w2, [x20,1954]
+	mov	w1, 0
+	ldr	x0, [x19,2152]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	add	x0, x19, 224
+	mov	w1, 0
+	mov	w2, 48
+	bl	ftl_memset
+	mov	w1, 0
+	mov	w2, 512
+	add	x0, x19, 352
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlVariablesInit, .-FtlVariablesInit
+	.align	2
+	.global	SupperBlkListInit
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	stp	x29, x30, [sp, -112]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	mov	w24, 6
+	add	x0, x23, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	adrp	x21, .LANCHOR2
+	mov	w25, 0
+	add	x19, x21, :lo12:.LANCHOR2
+	ldrh	w2, [x0,1954]
+	mov	w22, w25
+	mov	w26, 32768
+	ldr	x0, [x19,-56]
+	mul	w2, w2, w24
+	bl	ftl_memset
+	str	xzr, [x19,-16]
+	str	xzr, [x19,-48]
+	str	xzr, [x19,-32]
+	strh	wzr, [x19,-24]
+	strh	wzr, [x19,-8]
+	strh	wzr, [x19,2024]
+	mov	w19, w25
+.L840:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrh	w1, [x0,1952]
+	cmp	w19, w1
+	bge	.L847
+	mov	w20, 0
+	ldrh	w3, [x0,1944]
+	ldrh	w2, [x0,2018]
+	mov	w28, w20
+	mov	x27, x0
+.L848:
+	cmp	w28, w3
+	bge	.L849
+	add	x0, x27, 1976
+	mov	w1, w19
+	str	x2, [x29,96]
+	str	x3, [x29,104]
+	ldrb	w0, [x0,w28,sxtw]
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	ldr	x3, [x29,104]
+	ldr	x2, [x29,96]
+	cbnz	w0, .L841
+	add	w20, w2, w20
+	sxth	w20, w20
+.L841:
+	add	w28, w28, 1
+	sxth	w28, w28
+	b	.L848
+.L849:
+	cbz	w20, .L843
+	sdiv	w20, w26, w20
+	sxth	w20, w20
+	b	.L844
+.L843:
+	add	x0, x21, :lo12:.LANCHOR2
+	mov	w1, -1
+	ldr	x0, [x0,-40]
+	strh	w1, [x0,w19,sxtw 1]
+.L844:
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x1, [x0,-56]
+	smaddl	x1, w19, w24, x1
+	strh	w20, [x1,4]
+	ldrh	w1, [x21,#:lo12:.LANCHOR2]
+	cmp	w19, w1
+	beq	.L845
+	ldrh	w1, [x0,48]
+	cmp	w19, w1
+	beq	.L845
+	ldrh	w1, [x0,96]
+	cmp	w19, w1
+	beq	.L845
+	ldr	x0, [x0,-40]
+	ldrh	w0, [x0,w19,sxtw 1]
+	cbnz	w0, .L846
+	add	w4, w25, 1
+	mov	w0, w19
+	uxth	w25, w4
+	bl	INSERT_FREE_LIST
+	b	.L845
+.L846:
+	add	w22, w22, 1
+	mov	w0, w19
+	uxth	w22, w22
+	bl	INSERT_DATA_LIST
+.L845:
+	add	w19, w19, 1
+	sxth	w19, w19
+	b	.L840
+.L847:
+	add	x21, x21, :lo12:.LANCHOR2
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x23, x24, [sp,48]
+	strh	w25, [x21,-8]
+	strh	w22, [x21,-24]
+	ldp	x25, x26, [sp,64]
+	ldp	x21, x22, [sp,32]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	SupperBlkListInit, .-SupperBlkListInit
+	.align	2
+	.global	FtlGcPageVarInit
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
+	stp	x29, x30, [sp, -32]!
+	mov	w1, 255
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	adrp	x19, .LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x20,2022]
+	ldr	x0, [x19,928]
+	lsl	w2, w2, 1
+	strh	wzr, [x19,924]
+	strh	wzr, [x19,936]
+	bl	ftl_memset
+	ldrh	w3, [x20,2022]
+	mov	w2, 12
+	ldr	x0, [x19,944]
+	mov	w1, 255
+	mul	w2, w3, w2
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	2
+	.global	ftl_memcpy
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memcpy
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	2
+	.global	FlashReadIdbData
+	.type	FlashReadIdbData, %function
+FlashReadIdbData:
+	stp	x29, x30, [sp, -16]!
+	adrp	x1, .LANCHOR2
+	mov	w2, 2048
+	add	x1, x1, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	add	x1, x1, 2352
+	bl	ftl_memcpy
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashReadIdbData, .-FlashReadIdbData
+	.align	2
+	.global	FlashLoadPhyInfoInRam
+	.type	FlashLoadPhyInfoInRam, %function
+FlashLoadPhyInfoInRam:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	adrp	x20, .LANCHOR1
+	adrp	x22, .LANCHOR0
+	add	x21, x20, :lo12:.LANCHOR1
+	add	x22, x22, :lo12:.LANCHOR0
+	str	x23, [sp,48]
+	add	x21, x21, 512
+	mov	w19, 0
+	add	x22, x22, 1620
+.L857:
+	ldrb	w2, [x21]
+	add	x0, x21, 1
+	mov	x1, x22
+	bl	FlashMemCmp8
+	mov	w23, w0
+	cbnz	w0, .L854
+	add	x0, x20, :lo12:.LANCHOR1
+	ubfiz	x19, x19, 5, 32
+	add	x1, x0, 512
+	adds	x19, x1, x19
+	beq	.L860
+	ldrb	w3, [x19,22]
+	mov	x2, 0
+	mov	x1, x0
+	b	.L859
+.L854:
+	add	w19, w19, 1
+	add	x21, x21, 32
+	cmp	w19, 72
+	bne	.L857
+	b	.L860
+.L859:
+	add	x4, x1, x2, lsl 5
+	mov	w0, w2
+	ldrb	w4, [x4,2816]
+	cmp	w4, w3
+	beq	.L858
+	add	x2, x2, 1
+	cmp	x2, 4
+	bne	.L859
+	mov	w0, w2
+.L858:
+	add	x20, x20, :lo12:.LANCHOR1
+	ubfiz	x1, x0, 5, 32
+	adrp	x0, .LANCHOR0
+	add	x2, x20, 2816
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x1, x2, x1
+	add	x0, x0, 88
+	mov	w2, 32
+	bl	ftl_memcpy
+	add	x0, x20, 472
+	mov	x1, x19
+	mov	w2, 32
+	bl	ftl_memcpy
+	b	.L855
+.L860:
+	mov	w23, -1
+.L855:
+	mov	w0, w23
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FlashLoadPhyInfoInRam, .-FlashLoadPhyInfoInRam
+	.align	2
+	.global	NandcCopy1KB
+	.type	NandcCopy1KB, %function
+NandcCopy1KB:
+	stp	x29, x30, [sp, -48]!
+	uxtb	w1, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	uxtb	w19, w2
+	cmp	w1, 1
+	mov	x20, x4
+	ubfiz	x2, x19, 9, 8
+	add	x4, x0, 4096
+	add	x21, x0, 512
+	add	x2, x4, x2
+	bne	.L865
+	cbz	x3, .L866
+	mov	x0, x2
+	mov	x1, x3
+	mov	w2, 1024
+	bl	ftl_memcpy
+.L866:
+	cbz	x20, .L864
+	mov	w0, 48
+	lsr	w19, w19, 1
+	ldrb	w1, [x20,1]
+	mul	w19, w19, w0
+	ldrb	w0, [x20,2]
+	asr	w19, w19, 2
+	lsl	w0, w0, 16
+	orr	w0, w0, w1, lsl 8
+	ldrb	w1, [x20]
+	orr	w0, w0, w1
+	ldrb	w1, [x20,3]
+	orr	w0, w0, w1, lsl 24
+	str	w0, [x21,w19,sxtw 2]
+	b	.L864
+.L865:
+	cbz	x3, .L869
+	mov	x1, x2
+	mov	x0, x3
+	mov	w2, 1024
+	bl	ftl_memcpy
+.L869:
+	cbz	x20, .L864
+	mov	w0, 48
+	lsr	w19, w19, 1
+	mul	w19, w19, w0
+	asr	w19, w19, 2
+	ldr	w0, [x21,w19,sxtw 2]
+	strb	w0, [x20]
+	lsr	w1, w0, 8
+	strb	w1, [x20,1]
+	lsr	w1, w0, 16
+	lsr	w0, w0, 24
+	strb	w1, [x20,2]
+	strb	w0, [x20,3]
+.L864:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	NandcCopy1KB, .-NandcCopy1KB
+	.align	2
+	.global	ftl_memcmp
+	.type	ftl_memcmp, %function
+ftl_memcmp:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memcmp
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memcmp, .-ftl_memcmp
+	.align	2
+	.global	FlashSramLoadStore
+	.type	FlashSramLoadStore, %function
+FlashSramLoadStore:
+	adrp	x4, .LANCHOR4+48
+	mov	x6, x0
+	stp	x29, x30, [sp, -16]!
+	uxtw	x1, w1
+	add	x29, sp, 0
+	ldr	x4, [x4,#:lo12:.LANCHOR4+48]
+	add	x4, x4, 4096
+	cbnz	w2, .L882
+	add	x1, x4, x1
+	b	.L884
+.L882:
+	add	x0, x4, x1
+	mov	x1, x6
+.L884:
+	mov	w2, w3
+	bl	ftl_memcpy
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashSramLoadStore, .-FlashSramLoadStore
+	.align	2
+	.global	FlashCs123Init
+	.type	FlashCs123Init, %function
+FlashCs123Init:
+	ret
+	.size	FlashCs123Init, .-FlashCs123Init
+	.align	2
+	.global	rk_nand_de_init
+	.type	rk_nand_de_init, %function
+rk_nand_de_init:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FlashDeInit
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nand_de_init, .-rk_nand_de_init
+	.align	2
+	.global	rk_nand_suspend
+	.type	rk_nand_suspend, %function
+rk_nand_suspend:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FlashSuspend
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nand_suspend, .-rk_nand_suspend
+	.align	2
+	.global	rk_nand_resume
+	.type	rk_nand_resume, %function
+rk_nand_resume:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FlashResume
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nand_resume, .-rk_nand_resume
+	.align	2
+	.global	rk_ftl_get_capacity
+	.type	rk_ftl_get_capacity, %function
+rk_ftl_get_capacity:
+	adrp	x0, .LANCHOR0+2060
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2060]
+	ret
+	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
+	.align	2
+	.global	rknand_print_hex
+	.type	rknand_print_hex, %function
+rknand_print_hex:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x19, 0
+	adrp	x23, .LC79
+	adrp	x21, .LC80
+	adrp	x24, .LC73
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x22, x1
+	mov	x27, x0
+	mov	w25, w2
+	uxtw	x26, w3
+	mov	w20, w19
+	add	x23, x23, :lo12:.LC79
+	add	x21, x21, :lo12:.LC80
+	add	x24, x24, :lo12:.LC73
+.L891:
+	cmp	x19, x26
+	beq	.L899
+	cbnz	w20, .L892
+	mov	x0, x23
+	mov	x1, x27
+	mov	w2, w19
+	bl	printk
+.L892:
+	cmp	w25, 4
+	mov	x0, x21
+	bne	.L893
+	ldr	w1, [x22,x19,lsl 2]
+	b	.L898
+.L893:
+	cmp	w25, 2
+	bne	.L895
+	ldrsh	w1, [x22,x19,lsl 1]
+	b	.L898
+.L895:
+	ldrb	w1, [x22,x19]
+.L898:
+	bl	printk
+	add	w20, w20, 1
+	cmp	w20, 15
+	bls	.L896
+	adrp	x1, .LC81
+	mov	x0, x24
+	add	x1, x1, :lo12:.LC81
+	mov	w20, 0
+	bl	printk
+.L896:
+	add	x19, x19, 1
+	b	.L891
+.L899:
+	adrp	x0, .LC73
+	adrp	x1, .LC81
+	add	x1, x1, :lo12:.LC81
+	add	x0, x0, :lo12:.LC73
+	bl	printk
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	rknand_print_hex, .-rknand_print_hex
+	.align	2
+	.global	HynixGetReadRetryDefault
+	.type	HynixGetReadRetryDefault, %function
+HynixGetReadRetryDefault:
+	stp	x29, x30, [sp, -144]!
+	mov	w4, -83
+	mov	w2, -82
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	mov	w26, w0
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x1, x0, 760
+	cmp	w26, 2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	strb	w26, [x0,760]
+	mov	w0, -84
+	strb	w4, [x1,5]
+	strb	w0, [x1,4]
+	mov	w0, -81
+	strb	w2, [x1,6]
+	strb	w0, [x1,7]
+	bne	.L901
+	mov	w0, -89
+	strb	w0, [x1,4]
+	adrp	x0, .LANCHOR1+2961
+	mov	w1, -9
+	strb	w1, [x0,#:lo12:.LANCHOR1+2961]
+	b	.L956
+.L901:
+	cmp	w26, 3
+	bne	.L903
+	mov	w0, -80
+	strb	w0, [x1,4]
+	mov	w0, -79
+	strb	w0, [x1,5]
+	mov	w0, -78
+	strb	w0, [x1,6]
+	mov	w0, -77
+	strb	w0, [x1,7]
+	mov	w0, -76
+	strb	w0, [x1,8]
+	mov	w0, -75
+	strb	w0, [x1,9]
+	mov	w0, -74
+	strb	w0, [x1,10]
+	mov	w0, -73
+	b	.L989
+.L903:
+	cmp	w26, 4
+	bne	.L904
+	mov	w5, -52
+	strb	w5, [x1,4]
+	mov	w5, -65
+	strb	w5, [x1,5]
+	mov	w5, -86
+	strb	w5, [x1,6]
+	mov	w5, -85
+	strb	w4, [x1,9]
+	strb	w5, [x1,7]
+	mov	w5, -51
+	strb	w2, [x1,10]
+	strb	w5, [x1,8]
+.L989:
+	mov	w27, 8
+	strb	w0, [x1,11]
+	mov	w28, w27
+	b	.L902
+.L904:
+	cmp	w26, 5
+	bne	.L905
+	mov	w0, 56
+	strb	w0, [x1,4]
+	mov	w0, 57
+	strb	w0, [x1,5]
+	mov	w0, 58
+	mov	w27, 8
+	strb	w0, [x1,6]
+	mov	w0, 59
+	strb	w0, [x1,7]
+	b	.L988
+.L905:
+	cmp	w26, 6
+	bne	.L906
+	mov	w0, 14
+	strb	w0, [x1,4]
+	mov	w0, 15
+	strb	w0, [x1,5]
+	mov	w0, 16
+	mov	w27, 12
+	strb	w0, [x1,6]
+	mov	w0, 17
+	strb	w0, [x1,7]
+	b	.L988
+.L906:
+	cmp	w26, 7
+	bne	.L956
+	mov	w0, -80
+	strb	w0, [x1,4]
+	mov	w0, -79
+	strb	w0, [x1,5]
+	mov	w0, -78
+	strb	w0, [x1,6]
+	mov	w0, -77
+	strb	w0, [x1,7]
+	mov	w0, -76
+	strb	w0, [x1,8]
+	mov	w0, -75
+	strb	w0, [x1,9]
+	mov	w0, -74
+	strb	w0, [x1,10]
+	mov	w0, -73
+	strb	w0, [x1,11]
+	mov	w0, -44
+	mov	w27, 12
+	strb	w0, [x1,12]
+	mov	w28, 10
+	mov	w0, -43
+	strb	w0, [x1,13]
+	b	.L902
+.L956:
+	mov	w27, 7
+.L988:
+	mov	w28, 4
+.L902:
+	sub	w0, w26, #1
+	cmp	w0, 1
+	bhi	.L985
+	adrp	x22, .LANCHOR1
+	add	x25, x19, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LANCHOR1
+	mov	w21, 0
+	add	x26, x25, 760
+	add	x4, x25, 24
+	add	x22, x22, 2944
+.L907:
+	ldrb	w0, [x25,1845]
+	cmp	w0, w21
+	bls	.L914
+	add	x0, x25, x21, sxtw
+	ldrb	w0, [x0,1848]
+	mov	x23, 0
+	add	x20, x26, x0, lsl 6
+	lsl	x0, x0, 4
+	add	x1, x4, x0
+	add	x20, x20, 20
+	ldr	x24, [x4,x0]
+	ldrb	w0, [x1,8]
+	mov	w1, 55
+	add	x24, x24, x0, lsl 8
+.L909:
+	add	x0, x26, x23
+	str	w1, [x24,2056]
+	str	x4, [x29,128]
+	str	x1, [x29,136]
+	ldrb	w0, [x0,4]
+	str	w0, [x24,2052]
+	mov	w0, 80
+	bl	NandcDelayns
+	ldr	w0, [x24,2048]
+	strb	w0, [x20,x23]
+	add	x23, x23, 1
+	ldr	x1, [x29,136]
+	cmp	w28, w23, uxtb
+	ldr	x4, [x29,128]
+	bhi	.L909
+	mov	x0, 0
+.L910:
+	add	w2, w0, 8
+	mov	x1, 0
+.L911:
+	add	x3, x1, x0
+	add	x1, x1, 4
+	add	x3, x22, x3
+	cmp	x1, 24
+	ldrb	w6, [x3,4]
+	ldrb	w3, [x20,x0]
+	add	w3, w6, w3
+	strb	w3, [x20,w2,sxtw]
+	add	w2, w2, 8
+	bne	.L911
+	add	x0, x0, 1
+	cmp	x0, 4
+	bne	.L910
+	add	w21, w21, 1
+	strb	wzr, [x20,16]
+	strb	wzr, [x20,24]
+	strb	wzr, [x20,32]
+	uxtb	w21, w21
+	strb	wzr, [x20,40]
+	strb	wzr, [x20,48]
+	strb	wzr, [x20,41]
+	strb	wzr, [x20,49]
+	b	.L907
+.L985:
+	sub	w0, w26, #3
+	cmp	w0, 4
+	bhi	.L914
+	mul	w25, w28, w27
+	sub	w23, w28, #1
+	add	x21, x19, :lo12:.LANCHOR0
+	lsl	w0, w25, 4
+	asr	w22, w25, 2
+	str	w0, [x29,128]
+	lsl	w0, w22, 1
+	uxtb	x23, w23
+	str	w0, [x29,124]
+	add	x0, x21, 24
+	mov	w20, 0
+	str	x0, [x29,136]
+	sub	w25, w26, #5
+	add	x0, x23, 1
+	str	x0, [x29,112]
+.L915:
+	ldrb	w0, [x21,1845]
+	cmp	w0, w20
+	bhi	.L955
+.L914:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	strb	w28, [x19,761]
+	strb	w27, [x19,762]
+	ldp	x25, x26, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+.L955:
+	add	x0, x21, x20, sxtw
+	ldrb	w1, [x0,1848]
+	str	x1, [x29,104]
+	lsl	x0, x1, 4
+	mov	x24, x1
+	ldr	x1, [x29,136]
+	add	x2, x1, x0
+	ldr	x0, [x1,x0]
+	ldrb	w2, [x2,8]
+	add	x23, x0, x2, lsl 8
+	mov	w0, 255
+	str	w0, [x23,2056]
+	mov	w0, w24
+	bl	NandcWaitFlashReady
+	cmp	w26, 7
+	add	x6, x21, 760
+	ldr	x1, [x29,104]
+	beq	.L916
+	add	x1, x6, x1, lsl 6
+	add	x6, x1, 20
+	b	.L917
+.L916:
+	mov	x0, 160
+	madd	x1, x1, x0, x6
+	add	x6, x1, 28
+.L917:
+	mov	w0, 54
+	cmp	w26, 4
+	str	w0, [x23,2056]
+	bne	.L918
+	mov	w0, 255
+	str	w0, [x23,2052]
+	mov	w0, 64
+	str	w0, [x23,2048]
+	mov	w0, 204
+	b	.L990
+.L918:
+	cmp	w25, 1
+	bhi	.L920
+	ldrb	w0, [x21,764]
+	str	w0, [x23,2052]
+	mov	w0, 82
+	b	.L991
+.L920:
+	mov	w0, 174
+	str	w0, [x23,2052]
+	str	wzr, [x23,2048]
+	mov	w0, 176
+.L990:
+	str	w0, [x23,2052]
+	mov	w0, 77
+.L991:
+	str	w0, [x23,2048]
+	mov	w0, 22
+	str	w0, [x23,2056]
+	mov	w0, 23
+	str	w0, [x23,2056]
+	mov	w0, 4
+	str	w0, [x23,2056]
+	mov	w0, 25
+	str	w0, [x23,2056]
+	cmp	w26, 6
+	str	wzr, [x23,2056]
+	str	wzr, [x23,2052]
+	str	wzr, [x23,2052]
+	bne	.L921
+	mov	w0, 31
+	str	w0, [x23,2052]
+	b	.L922
+.L921:
+	str	wzr, [x23,2052]
+.L922:
+	mov	w1, 2
+	str	w1, [x23,2052]
+	str	wzr, [x23,2052]
+	mov	w0, 48
+	str	w0, [x23,2056]
+	mov	w0, w24
+	str	x6, [x29,96]
+	str	x1, [x29,104]
+	bl	NandcWaitFlashReady
+	cmp	w25, 1
+	mov	w7, 16
+	ldr	x6, [x29,96]
+	bls	.L924
+	ldr	x1, [x29,104]
+	cmp	w26, 7
+	mov	w7, 32
+	csel	w7, w7, w1, eq
+.L924:
+	adrp	x0, .LANCHOR4
+	mov	x8, 0
+	add	x1, x0, :lo12:.LANCHOR4
+	ldr	x1, [x1,56]
+.L925:
+	ldr	w9, [x23,2048]
+	strb	w9, [x1,x8]
+	add	x8, x8, 1
+	cmp	w7, w8, uxtb
+	bhi	.L925
+	cmp	w26, 7
+	bne	.L926
+	mov	w7, 0
+.L928:
+	ldrb	w8, [x1]
+	cmp	w8, 12
+	beq	.L927
+	ldrb	w8, [x1,1]
+	cmp	w8, 10
+	beq	.L927
+	add	w7, w7, 1
+	add	x1, x1, 4
+	uxtb	w7, w7
+	cmp	w7, 8
+	bne	.L928
+	b	.L929
+.L927:
+	cmp	w7, 7
+	bne	.L930
+.L929:
+	adrp	x0, .LC82
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC82
+	bl	printk
+.L931:
+	b	.L931
+.L926:
+	cmp	w26, 6
+	bne	.L930
+	mov	x7, 0
+.L932:
+	ldrb	w8, [x1,x7]
+	cmp	w8, 12
+	beq	.L930
+	add	x8, x1, x7
+	ldrb	w8, [x8,8]
+	cmp	w8, 4
+	beq	.L930
+	add	x7, x7, 1
+	cmp	x7, 8
+	bne	.L932
+	adrp	x0, .LC82
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC82
+	bl	printk
+.L934:
+	b	.L934
+.L930:
+	add	x1, x0, :lo12:.LANCHOR4
+	ldr	x10, [x1,56]
+	mov	x1, 0
+.L935:
+	ldr	w2, [x29,128]
+	cmp	w2, w1
+	ble	.L992
+	ldr	w7, [x23,2048]
+	strb	w7, [x10,x1]
+	add	x1, x1, 1
+	b	.L935
+.L992:
+	add	x1, x0, :lo12:.LANCHOR4
+	mov	w9, w22
+	mov	w8, 8
+	ldr	x12, [x1,56]
+.L938:
+	mov	w1, 0
+.L937:
+	add	w7, w1, w9
+	add	w1, w1, 1
+	sbfiz	x7, x7, 2, 32
+	cmp	w1, w22
+	ldr	w11, [x12,x7]
+	mvn	w11, w11
+	str	w11, [x12,x7]
+	bne	.L937
+	ldr	w1, [x29,124]
+	subs	w8, w8, #1
+	add	w9, w9, w1
+	bne	.L938
+	mov	x8, 0
+	mov	w16, 1
+.L939:
+	add	x1, x0, :lo12:.LANCHOR4
+	ldr	x15, [x1,56]
+	mov	w1, 0
+	mov	w11, w1
+.L943:
+	lsl	w9, w16, w11
+	mov	w13, w8
+	mov	w7, 16
+	mov	w12, 0
+.L941:
+	ldr	w14, [x15,w13,sxtw 2]
+	add	w13, w13, w22
+	and	w14, w9, w14
+	cmp	w14, w9
+	csinc	w12, w12, w12, ne
+	subs	w7, w7, #1
+	bne	.L941
+	cmp	w12, 9
+	orr	w9, w1, w9
+	add	w11, w11, 1
+	csel	w1, w9, w1, cs
+	cmp	w11, 32
+	bne	.L943
+	str	w1, [x15,x8,lsl 2]
+	add	x8, x8, 1
+	cmp	w22, w8
+	bgt	.L939
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x1, [x0,56]
+	mov	x0, 0
+	mov	w8, w0
+.L946:
+	ldr	w9, [x1,x0]
+	add	x0, x0, 4
+	cmp	w9, wzr
+	csinc	w8, w8, w8, ne
+	cmp	x0, 32
+	bne	.L946
+	cmp	w8, 7
+	ble	.L947
+	adrp	x0, .LC83
+	mov	w2, 1
+	add	x0, x0, :lo12:.LC83
+	mov	w3, 1024
+	bl	rknand_print_hex
+	adrp	x0, .LC82
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC82
+	bl	printk
+.L948:
+	b	.L948
+.L947:
+	cmp	w26, 6
+	mov	w1, 4
+	beq	.L949
+	cmp	w26, 7
+	mov	w1, 10
+	mov	w0, 8
+	csel	w1, w0, w1, ne
+.L949:
+	mov	w8, 0
+.L950:
+	mov	x0, 0
+.L951:
+	add	w9, w7, w0
+	ldrb	w11, [x10,x0]
+	add	x0, x0, 1
+	cmp	w28, w0, uxtb
+	strb	w11, [x6,w9,sxtw]
+	bhi	.L951
+	add	w8, w8, 1
+	ldr	x0, [x29,112]
+	cmp	w8, w27
+	add	w7, w7, w1
+	add	x10, x10, x0
+	blt	.L950
+	mov	w0, 255
+	str	w0, [x23,2056]
+	mov	w0, w24
+	bl	NandcWaitFlashReady
+	cmp	w25, 1
+	bhi	.L953
+	mov	w0, 54
+	str	w0, [x23,2056]
+	adrp	x0, .LANCHOR0+764
+	mov	w1, -1
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+764]
+	str	w0, [x23,2052]
+	mov	w0, 22
+	str	wzr, [x23,2048]
+	str	w0, [x23,2056]
+	mov	w0, w20
+	bl	FlashReadCmd
+	b	.L954
+.L953:
+	mov	w0, 56
+	str	w0, [x23,2056]
+.L954:
+	mov	w0, w24
+	add	w20, w20, 1
+	bl	NandcWaitFlashReady
+	uxtb	w20, w20
+	b	.L915
+	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
+	.align	2
+	.global	FlashGetReadRetryDefault
+	.type	FlashGetReadRetryDefault, %function
+FlashGetReadRetryDefault:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, w0
+	add	x29, sp, 0
+	cbz	w0, .L993
+	sub	w2, w0, #1
+	cmp	w2, 6
+	bhi	.L995
+	bl	HynixGetReadRetryDefault
+	b	.L993
+.L995:
+	cmp	w0, 49
+	bne	.L996
+	adrp	x0, .LANCHOR0
+	mov	w2, 64
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 764
+	strb	w1, [x0,-4]
+	mov	w1, 4
+	strb	w1, [x0,-3]
+	mov	w1, 15
+	strb	w1, [x0,-2]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x1, x1, 408
+	b	.L1011
+.L996:
+	sub	w0, w0, #65
+	cmp	w0, 1
+	bls	.L1002
+	cmp	w1, 33
+	bne	.L997
+.L1002:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,760]
+	mov	w1, 4
+	b	.L1012
+.L997:
+	cmp	w1, 67
+	beq	.L1003
+	cmp	w1, 34
+	bne	.L999
+.L1003:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,760]
+	mov	w1, 5
+.L1012:
+	strb	w1, [x0,761]
+	mov	w1, 7
+	strb	w1, [x0,762]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, 764
+	add	x1, x1, 256
+	mov	w2, 45
+	b	.L1011
+.L999:
+	cmp	w1, 68
+	beq	.L1004
+	cmp	w1, 35
+	bne	.L993
+.L1004:
+	adrp	x0, .LANCHOR0
+	mov	w2, 95
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 764
+	strb	w1, [x0,-4]
+	mov	w1, 5
+	strb	w1, [x0,-3]
+	mov	w1, 17
+	strb	w1, [x0,-2]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x1, x1, 304
+.L1011:
+	bl	ftl_memcpy
+.L993:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
+	.align	2
+	.global	NandcXferComp
+	.type	NandcXferComp, %function
+NandcXferComp:
+	stp	x29, x30, [sp, -80]!
+	ubfiz	x0, x0, 4, 8
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	str	x23, [sp,48]
+	add	x1, x20, :lo12:.LANCHOR0
+	add	x2, x1, 24
+	stp	x21, x22, [sp,32]
+	ldr	x19, [x2,x0]
+	ldr	w0, [x1,1864]
+	cmp	w0, 3
+	bls	.L1044
+	ldr	w0, [x19,16]
+	tbz	x0, 2, .L1044
+	mov	x0, x19
+	bl	wait_for_nandc_xfer_completed
+	ldr	w21, [x19,16]
+	ldr	w0, [x19,8]
+	ubfx	x21, x21, 1, 1
+	str	w0, [x29,64]
+	cbz	w21, .L1015
+	adrp	x22, .LC84
+	adrp	x23, .LC85
+	mov	w21, 0
+	add	x22, x22, :lo12:.LC84
+	add	x23, x23, :lo12:.LC85
+.L1016:
+	ldr	w2, [x19,28]
+	ldr	w1, [x29,64]
+	ubfx	x2, x2, 16, 5
+	ubfx	x1, x1, 22, 6
+	cmp	w2, w1
+	bge	.L1024
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w0, [x0,1864]
+	cmp	w0, 5
+	bhi	.L1017
+.L1020:
+	add	w21, w21, 1
+	and	w0, w21, 16777215
+	cbnz	w0, .L1016
+	ldr	w2, [x19,28]
+	mov	w1, w21
+	ldr	w3, [x29,64]
+	mov	x0, x22
+	ubfx	x2, x2, 16, 5
+	ubfx	x3, x3, 22, 6
+	bl	printk
+	mov	x0, x23
+	mov	x1, x19
+	mov	w2, 4
+	mov	w3, 512
+	bl	rknand_print_hex
+	b	.L1016
+.L1017:
+	ldr	w0, [x19]
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	tbz	x0, 13, .L1020
+	ldr	w0, [x29,72]
+	tbz	x0, 17, .L1020
+.L1024:
+	add	x19, x20, :lo12:.LANCHOR0
+	add	x19, x19, 1880
+	ldr	w0, [x19,40]
+	cbz	w0, .L1025
+	ldr	w1, [x29,64]
+	mov	w2, 0
+	ldr	w0, [x19,32]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	mov	w2, 0
+	ldr	w0, [x19,36]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 7
+	bl	rknand_dma_unmap_single
+	b	.L1025
+.L1015:
+	adrp	x22, .LC86
+	adrp	x23, .LC85
+	add	x22, x22, :lo12:.LC86
+	add	x23, x23, :lo12:.LC85
+.L1026:
+	ldr	w0, [x29,64]
+	tbnz	x0, 20, .L1052
+	ldr	w0, [x19,8]
+	add	w21, w21, 1
+	str	w0, [x29,64]
+	and	w0, w21, 16777215
+	cbnz	w0, .L1026
+	ldr	w2, [x29,64]
+	mov	w1, w21
+	ldr	w3, [x19,28]
+	mov	x0, x22
+	ubfx	x3, x3, 16, 5
+	bl	printk
+	mov	x0, x23
+	mov	x1, x19
+	mov	w2, 4
+	mov	w3, 512
+	bl	rknand_print_hex
+	b	.L1026
+.L1052:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w0, [x0,1928]
+	cbz	w0, .L1029
+	mov	x0, x19
+	bl	NandcSendDumpDataStart
+.L1029:
+	add	x21, x20, :lo12:.LANCHOR0
+	add	x21, x21, 1880
+	ldr	w0, [x21,40]
+	cbz	w0, .L1030
+	ldr	w1, [x29,64]
+	mov	w2, 1
+	ldr	w0, [x21,32]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	mov	w2, 1
+	ldr	w0, [x21,36]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 7
+	bl	rknand_dma_unmap_single
+.L1030:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w0, [x0,1928]
+	cbz	w0, .L1025
+	mov	x0, x19
+	bl	NandcSendDumpDataDone
+.L1025:
+	add	x20, x20, :lo12:.LANCHOR0
+	str	wzr, [x20,1920]
+	b	.L1013
+.L1044:
+	ldr	w0, [x19,8]
+	str	w0, [x29,64]
+	ldr	w0, [x29,64]
+	tbz	x0, 20, .L1044
+.L1013:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	NandcXferComp, .-NandcXferComp
+	.align	2
+	.global	NandcXferData
+	.type	NandcXferData, %function
+NandcXferData:
+	stp	x29, x30, [sp, -176]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	adrp	x19, .LANCHOR0
+	uxtb	w25, w0
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, x25, sxtw 4
+	ldr	x20, [x0,24]
+	and	x0, x3, 63
+	uxtb	w21, w1
+	uxtb	w24, w2
+	mov	x26, x3
+	mov	x22, x4
+	cbnz	x0, .L1054
+	cbnz	x4, .L1055
+	add	x0, x29, 112
+	mov	w1, 255
+	mov	w2, 64
+	add	x22, x29, 112
+	bl	ftl_memset
+.L1055:
+	mov	w0, w25
+	mov	w1, w21
+	mov	w2, w24
+	mov	w3, 0
+	mov	x4, x26
+	mov	x5, x22
+	mov	w23, 0
+	bl	NandcXferStart
+	mov	w0, w25
+	bl	NandcXferComp
+	cbnz	w21, .L1056
+	add	x1, x19, :lo12:.LANCHOR0
+	ubfx	x2, x24, 1, 7
+	mov	w3, 128
+	add	x2, x22, x2, lsl 2
+	ldr	w0, [x1,1932]
+	cmp	w0, 25
+	mov	w0, 64
+	csel	w3, w0, w3, cc
+	mov	w0, w21
+.L1058:
+	cmp	x22, x2
+	add	w4, w0, w3
+	beq	.L1100
+	ldr	x5, [x1,1888]
+	and	x0, x0, 4294967292
+	add	x22, x22, 4
+	ldr	w0, [x5,x0]
+	strb	w0, [x22,-4]
+	lsr	w5, w0, 8
+	strb	w5, [x22,-3]
+	lsr	w5, w0, 16
+	strb	w5, [x22,-2]
+	lsr	w0, w0, 24
+	strb	w0, [x22,-1]
+	mov	w0, w4
+	b	.L1058
+.L1100:
+	add	x0, x19, :lo12:.LANCHOR0
+	lsr	w24, w24, 2
+	ldr	w5, [x0,1932]
+	ldr	w4, [x0,1864]
+	mov	w0, 0
+	mov	w23, w0
+.L1060:
+	cmp	w0, w24
+	bcs	.L1056
+	cbz	w5, .L1056
+	uxtw	x1, w0
+	add	x1, x1, 8
+	ldr	w1, [x20,x1,lsl 2]
+	str	w1, [x29,104]
+	ldr	w1, [x29,104]
+	tbnz	x1, 2, .L1084
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 15, 1
+	cbnz	w3, .L1084
+	cmp	w4, 5
+	bls	.L1062
+	ldr	w2, [x29,104]
+	ubfx	x6, x2, 3, 5
+	ldr	w2, [x29,104]
+	ldr	w1, [x29,104]
+	ubfx	x2, x2, 27, 1
+	ubfx	x3, x1, 16, 5
+	ldr	w1, [x29,104]
+	orr	w2, w6, w2, lsl 5
+	ubfx	x1, x1, 29, 1
+	orr	w1, w3, w1, lsl 5
+	ldr	w3, [x29,104]
+	cmp	w2, w1
+	bls	.L1063
+	ldr	w1, [x29,104]
+	ubfx	x3, x3, 3, 5
+	ubfx	x1, x1, 27, 1
+	orr	w3, w3, w1, lsl 5
+	b	.L1064
+.L1063:
+	ubfx	x1, x3, 16, 5
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 29, 1
+	b	.L1099
+.L1062:
+	cmp	w4, 3
+	bls	.L1064
+	ldr	w2, [x29,104]
+	ubfx	x6, x2, 3, 5
+	ldr	w2, [x29,104]
+	ldr	w1, [x29,104]
+	ubfx	x2, x2, 28, 1
+	ubfx	x3, x1, 16, 5
+	ldr	w1, [x29,104]
+	orr	w2, w6, w2, lsl 5
+	ubfx	x1, x1, 30, 1
+	orr	w1, w3, w1, lsl 5
+	ldr	w3, [x29,104]
+	cmp	w2, w1
+	bls	.L1065
+	ubfx	x1, x3, 3, 5
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 28, 1
+	b	.L1099
+.L1065:
+	ubfx	x1, x3, 16, 5
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 30, 1
+.L1099:
+	orr	w3, w1, w3, lsl 5
+.L1064:
+	cmp	w23, w3
+	csel	w23, w23, w3, cs
+	b	.L1061
+.L1084:
+	mov	w23, -1
+.L1061:
+	add	w0, w0, 1
+	b	.L1060
+.L1056:
+	str	wzr, [x20,16]
+	b	.L1067
+.L1054:
+	cmp	w21, 1
+	bne	.L1098
+	mov	w23, 0
+	mov	w28, 2
+.L1068:
+	cmp	w23, w24
+	bcs	.L1101
+	and	w27, w23, 3
+	mov	x3, x26
+	cbz	x26, .L1070
+	ubfiz	x0, x23, 9, 23
+	add	x3, x26, x0
+.L1070:
+	cmp	x22, xzr
+	mov	x0, x20
+	csel	w4, w28, wzr, ne
+	mov	w1, 1
+	mov	w2, w27
+	mul	w4, w4, w23
+	add	w23, w23, 2
+	add	x4, x22, x4
+	bl	NandcCopy1KB
+	mov	x4, 0
+	mov	w0, w25
+	mov	w1, 1
+	mov	w2, 2
+	mov	w3, w27
+	mov	x5, x4
+	bl	NandcXferStart
+	mov	w0, w25
+	bl	NandcXferComp
+	b	.L1068
+.L1101:
+	mov	w23, 0
+	b	.L1067
+.L1098:
+	mov	w1, 0
+	mov	x4, 0
+	mov	w27, 0
+	mov	w0, w25
+	mov	w2, 2
+	mov	w3, w1
+	mov	x5, x4
+	mov	w23, w27
+	bl	NandcXferStart
+.L1073:
+	cmp	w27, w24
+	bcs	.L1067
+	mov	w0, w25
+	add	w28, w27, 2
+	bl	NandcXferComp
+	ldr	w0, [x20,32]
+	cmp	w28, w24
+	str	w0, [x29,104]
+	bcs	.L1074
+	mov	x4, 0
+	mov	w0, w25
+	mov	w1, 0
+	mov	w2, 2
+	and	w3, w28, 3
+	mov	x5, x4
+	bl	NandcXferStart
+.L1074:
+	ldr	w0, [x29,104]
+	tbnz	x0, 2, .L1089
+	ldr	w0, [x29,104]
+	ubfx	x1, x0, 3, 5
+	ldr	w0, [x29,104]
+	ubfx	x0, x0, 27, 1
+	orr	w0, w1, w0, lsl 5
+	cmp	w23, w0
+	csel	w23, w23, w0, cs
+	b	.L1075
+.L1089:
+	mov	w23, -1
+.L1075:
+	and	w2, w27, 3
+	mov	x3, x26
+	cbz	x26, .L1076
+	ubfiz	x3, x27, 9, 23
+	add	x3, x26, x3
+.L1076:
+	cmp	x22, xzr
+	mov	w0, 2
+	csel	w4, w0, wzr, ne
+	mov	w1, 0
+	mov	x0, x20
+	mul	w4, w4, w27
+	mov	w27, w28
+	add	x4, x22, x4
+	bl	NandcCopy1KB
+	b	.L1073
+.L1067:
+	cbnz	w21, .L1079
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	w0, [x19,1864]
+	cmp	w0, 5
+	bls	.L1079
+	ldr	w0, [x20]
+	mov	w1, 8192
+	movk	w1, 0x2, lsl 16
+	and	w1, w0, w1
+	cmp	w1, 139264
+	bne	.L1079
+	orr	w0, w0, 131072
+	mov	w23, -1
+	str	w0, [x20]
+.L1079:
+	mov	w0, w23
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	NandcXferData, .-NandcXferData
+	.align	2
+	.global	FlashReadRawPage
+	.type	FlashReadRawPage, %function
+FlashReadRawPage:
+	stp	x29, x30, [sp, -64]!
+	mov	x4, x3
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w19, w0
+	adrp	x0, .LANCHOR1+481
+	str	x21, [sp,32]
+	mov	x21, x2
+	ldrb	w20, [x0,#:lo12:.LANCHOR1+481]
+	cbnz	w19, .L1103
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w5, [x0,9]
+	ldr	w0, [x0,12]
+	mul	w0, w5, w0
+	cmp	w1, w0
+	mov	w0, 4
+	csel	w20, w20, w0, cs
+.L1103:
+	mov	w0, w19
+	str	x4, [x29,48]
+	str	x1, [x29,56]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	x1, [x29,56]
+	mov	w0, w19
+	bl	FlashReadCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	ldr	x4, [x29,48]
+	mov	w2, w20
+	mov	x3, x21
+	mov	w1, 0
+	mov	w0, w19
+	bl	NandcXferData
+	mov	w20, w0
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	ldr	x21, [sp,32]
+	mov	w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FlashReadRawPage, .-FlashReadRawPage
+	.align	2
+	.global	FlashDdrTunningRead
+	.type	FlashDdrTunningRead, %function
+FlashDdrTunningRead:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	stp	x25, x26, [sp,64]
+	uxtb	w23, w0
+	mov	w22, 6
+	ldr	x0, [x19,128]
+	mov	w24, w1
+	mov	x28, x2
+	mov	x27, x3
+	mov	w25, w4
+	mov	w21, 1024
+	ldr	w0, [x0,304]
+	str	w0, [x29,124]
+	ldr	w0, [x19,1864]
+	cmp	w0, 8
+	mov	w0, 12
+	csel	w22, w22, w0, cc
+	cbz	w4, .L1106
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	mov	w0, w23
+	bl	FlashReset
+	mov	w1, w24
+	mov	x2, x28
+	mov	x3, x27
+	mov	w0, w23
+	bl	FlashReadRawPage
+	mov	w21, w0
+	ldrb	w0, [x19,1844]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x19,1844]
+	bl	NandcSetMode
+	cmn	w21, #1
+	bne	.L1107
+.L1116:
+	mov	w21, -1
+	b	.L1108
+.L1107:
+	adrp	x0, .LC87
+	mov	w1, w24
+	add	x0, x0, :lo12:.LC87
+	mov	w2, w21
+	bl	printk
+	cmp	w21, 9
+	bhi	.L1109
+	add	x19, x19, x23, sxtw 4
+	ldr	x0, [x19,24]
+	ldr	w1, [x0,3840]
+	ldr	w1, [x0]
+	orr	w1, w1, 131072
+	str	w1, [x0]
+.L1109:
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w1, [x0,64]
+	add	w1, w1, 1
+	str	w1, [x0,64]
+	cmp	w1, 2047
+	bls	.L1108
+	mov	x27, 0
+	str	wzr, [x0,64]
+	mov	x28, x27
+.L1106:
+	mov	w19, 0
+	mov	w26, -1
+	mov	w5, w19
+	mov	w6, w19
+	mov	w20, w19
+.L1114:
+	mov	w0, w22
+	str	x5, [x29,104]
+	str	x6, [x29,112]
+	bl	NandcSetDdrPara
+	mov	w1, w24
+	mov	w0, w23
+	mov	x2, x28
+	mov	x3, x27
+	bl	FlashReadRawPage
+	add	w1, w21, 1
+	ldr	x6, [x29,112]
+	cmp	w0, w1
+	ldr	x5, [x29,104]
+	bhi	.L1110
+	cmp	w0, 2
+	bhi	.L1120
+	add	w20, w20, 1
+	cmp	w20, 9
+	bls	.L1120
+	sub	w19, w22, w20
+	mov	w21, w0
+	mov	w26, 0
+	b	.L1112
+.L1110:
+	cmp	w6, w20
+	bcs	.L1121
+	cmp	w20, 7
+	sub	w5, w19, w20
+	bhi	.L1122
+	mov	w6, w20
+	b	.L1121
+.L1120:
+	mov	x27, 0
+	mov	w19, w22
+	mov	w21, w0
+	mov	w26, 0
+	mov	x28, x27
+	b	.L1111
+.L1121:
+	mov	w20, 0
+.L1111:
+	add	w22, w22, 2
+	cmp	w22, 69
+	bls	.L1114
+.L1112:
+	cmp	w6, w20
+	csel	w19, w19, w5, cc
+	b	.L1113
+.L1122:
+	mov	w19, w5
+.L1113:
+	cbz	w19, .L1115
+	adrp	x0, .LC88
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC88
+	bl	printk
+	mov	w0, w19
+	bl	NandcSetDdrPara
+.L1115:
+	cbz	w26, .L1108
+	adrp	x0, .LC89
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC89
+	mov	w2, w24
+	bl	printk
+	cbz	w25, .L1116
+	ldr	w0, [x29,124]
+	lsr	w0, w0, 8
+	bl	NandcSetDdrPara
+.L1108:
+	mov	w0, w21
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FlashDdrTunningRead, .-FlashDdrTunningRead
+	.align	2
+	.global	FlashReadPage
+	.type	FlashReadPage, %function
+FlashReadPage:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w20, w0
+	mov	w0, w20
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	w22, w1
+	mov	x24, x2
+	mov	x23, x3
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	mov	w19, w0
+	bne	.L1132
+	adrp	x21, .LANCHOR0
+	add	x25, x21, :lo12:.LANCHOR0
+	ldrb	w26, [x25,16]
+	cbnz	w26, .L1133
+.L1135:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x21,1856]
+	cbz	w0, .L1132
+	b	.L1153
+.L1133:
+	mov	w0, w20
+	mov	w1, w22
+	mov	x2, x24
+	mov	x3, x23
+	strb	wzr, [x25,16]
+	bl	FlashReadRawPage
+	strb	w26, [x25,16]
+	cmn	w0, #1
+	beq	.L1135
+	mov	w19, w0
+	b	.L1132
+.L1153:
+	ldr	x0, [x21,128]
+	mov	w1, w22
+	mov	x2, x24
+	mov	x3, x23
+	mov	w4, 1
+	ldr	w25, [x0,304]
+	mov	w0, w20
+	bl	FlashDdrTunningRead
+	cmn	w0, #1
+	mov	w19, w0
+	beq	.L1136
+	ldrb	w0, [x21,1936]
+	cmp	w19, w0, lsr 1
+	bls	.L1132
+.L1136:
+	lsr	w0, w25, 8
+	bl	NandcSetDdrPara
+.L1132:
+	adrp	x21, .LANCHOR4
+	cmn	w19, #1
+	add	x21, x21, :lo12:.LANCHOR4
+	ldr	x4, [x21,72]
+	bne	.L1137
+	cbz	x4, .L1137
+	mov	w1, w22
+	mov	x2, x24
+	mov	x3, x23
+	mov	w0, w20
+	blr	x4
+	mov	w19, w0
+	adrp	x0, .LC90
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC90
+	mov	w2, w20
+	mov	w3, w22
+	bl	printk
+	cmn	w19, #1
+	bne	.L1137
+	adrp	x0, .LANCHOR0+120
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+120]
+	cbz	w0, .L1137
+	mov	w0, w20
+	bl	flash_enter_slc_mode
+	ldr	x4, [x21,72]
+	mov	w0, w20
+	mov	w1, w22
+	mov	x2, x24
+	mov	x3, x23
+	blr	x4
+	mov	w19, w0
+	mov	w0, w20
+	bl	flash_exit_slc_mode
+.L1137:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FlashReadPage, .-FlashReadPage
+	.align	2
+	.global	FlashDdrParaScan
+	.type	FlashDdrParaScan, %function
+FlashDdrParaScan:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	mov	w20, w1
+	stp	x21, x22, [sp,32]
+	add	x22, x19, :lo12:.LANCHOR0
+	uxtb	w21, w0
+	ldrb	w0, [x22,1844]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x22,1844]
+	bl	NandcSetMode
+	mov	x2, 0
+	mov	w1, w20
+	mov	x3, x2
+	mov	w4, w2
+	mov	w0, w21
+	bl	FlashDdrTunningRead
+	mov	w22, w0
+	mov	x2, 0
+	mov	w0, w21
+	mov	w1, w20
+	mov	x3, x2
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	beq	.L1158
+	cmn	w22, #1
+	bne	.L1155
+.L1158:
+	add	x20, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x20,1844]
+	tbz	x0, 0, .L1155
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	strb	wzr, [x20,1856]
+	b	.L1157
+.L1155:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	strb	w0, [x19,1856]
+.L1157:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashDdrParaScan, .-FlashDdrParaScan
+	.align	2
+	.global	FlashLoadPhyInfo
+	.type	FlashLoadPhyInfo, %function
+FlashLoadPhyInfo:
+	stp	x29, x30, [sp, -128]!
+	mov	w0, 60
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR4
+	mov	w24, -1
+	strb	w0, [x29,120]
+	mov	w0, 40
+	strb	w0, [x29,121]
+	mov	w0, 24
+	strb	w0, [x29,122]
+	mov	w0, 16
+	strb	w0, [x29,123]
+	add	x0, x23, :lo12:.LANCHOR4
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	adrp	x22, .LANCHOR1
+	adrp	x25, .LANCHOR0
+	add	x21, x22, :lo12:.LANCHOR1
+	ldr	x1, [x0,56]
+	add	x21, x21, 472
+	add	x25, x25, :lo12:.LANCHOR0
+	str	x1, [x0,80]
+	mov	w20, 0
+	str	wzr, [x0,88]
+	mov	w26, 4
+	mov	w0, 0
+	add	x28, x25, 88
+	ldrh	w27, [x21,10]
+	bl	flash_enter_slc_mode
+.L1166:
+	add	w0, w20, 1
+	mov	x19, 0
+	str	w0, [x29,104]
+.L1168:
+	add	x0, x29, 120
+	ldrb	w0, [x19,x0]
+	bl	FlashBchSel
+	add	x5, x23, :lo12:.LANCHOR4
+	mov	w0, 0
+	mov	w1, w20
+	mov	x3, 0
+	str	x5, [x29,96]
+	ldr	x2, [x5,56]
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	bne	.L1167
+	ldr	x5, [x29,96]
+	mov	w0, 0
+	ldr	w1, [x29,104]
+	mov	x3, 0
+	ldr	x2, [x5,56]
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	bne	.L1167
+	add	x19, x19, 1
+	cmp	x19, 4
+	beq	.L1169
+	b	.L1168
+.L1170:
+	add	x0, x2, 12
+	mov	w1, 2036
+	str	x2, [x29,104]
+	mov	w24, -1
+	bl	JSHash
+	ldr	x2, [x29,104]
+	ldr	w1, [x2,8]
+	cmp	w1, w0
+	beq	.L1180
+.L1169:
+	subs	w26, w26, #1
+	add	w20, w20, w27
+	bne	.L1166
+	mov	w0, w26
+.L1179:
+	bl	flash_exit_slc_mode
+	mov	w0, w24
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+.L1167:
+	add	x19, x23, :lo12:.LANCHOR4
+	mov	w0, 20036
+	movk	w0, 0x4e41, lsl 16
+	ldr	x2, [x19,80]
+	ldr	w1, [x2]
+	cmp	w1, w0
+	bne	.L1169
+	cbnz	w24, .L1170
+	add	x22, x22, :lo12:.LANCHOR1
+	ldrh	w0, [x22,482]
+	udiv	w20, w20, w0
+	mov	w0, w24
+	add	w20, w20, 1
+	str	w20, [x19,92]
+	b	.L1179
+.L1180:
+	add	x1, x2, 160
+	mov	x0, x21
+	mov	w2, 32
+	bl	ftl_memcpy
+	ldr	x1, [x19,80]
+	mov	w2, 32
+	mov	x0, x28
+	add	x1, x1, 192
+	bl	ftl_memcpy
+	ldr	x1, [x19,80]
+	mov	w2, 852
+	add	x0, x25, 760
+	add	x1, x1, 224
+	bl	ftl_memcpy
+	str	w20, [x19,88]
+	ldr	x1, [x19,80]
+	ldr	w0, [x1,1076]
+	strb	w0, [x25,1856]
+	ldrh	w0, [x21,10]
+	udiv	w0, w20, w0
+	add	w2, w0, 1
+	cbz	w0, .L1172
+	str	w2, [x19,92]
+	b	.L1173
+.L1172:
+	mov	w0, 2
+	str	w0, [x19,92]
+.L1173:
+	add	x0, x23, :lo12:.LANCHOR4
+	ldrh	w1, [x1,14]
+	mov	w24, 0
+	strb	w1, [x0,96]
+	b	.L1169
+	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
+	.align	2
+	.global	ToshibaReadRetrial
+	.type	ToshibaReadRetrial, %function
+ToshibaReadRetrial:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	uxtb	w23, w0
+	mov	w0, w23
+	str	w1, [x29,116]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	x27, x2
+	mov	x26, x3
+	adrp	x19, .LANCHOR0
+	bl	NandcWaitFlashReady
+	add	x2, x19, :lo12:.LANCHOR0
+	sbfiz	x0, x23, 4, 32
+	add	x1, x2, 24
+	mov	w22, 0
+	add	x3, x1, x0
+	ldr	x24, [x1,x0]
+	ldrb	w0, [x3,8]
+	str	x0, [x29,120]
+	add	x20, x0, 8
+	mov	x28, x0
+	ldrb	w0, [x2,752]
+	add	x20, x24, x20, lsl 8
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	bls	.L1182
+	ldrb	w0, [x2,1856]
+	cbz	w0, .L1183
+	mov	w0, w22
+	mov	w22, 1
+	bl	NandcSetDdrMode
+.L1183:
+	ubfiz	x0, x28, 8, 8
+	mov	w2, 92
+	add	x0, x24, x0
+	str	w2, [x0,2056]
+	mov	w2, 197
+	str	w2, [x0,2056]
+.L1182:
+	ldr	x0, [x29,120]
+	mov	w21, 1
+	mov	w25, -1
+	add	x0, x0, 8
+	lsl	x0, x0, 8
+	str	x0, [x29,104]
+	ubfiz	x0, x28, 8, 8
+	str	x0, [x29,96]
+.L1184:
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrb	w0, [x0,97]
+	add	w0, w0, 1
+	cmp	w21, w0
+	bcs	.L1209
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, w21
+	ldrb	w0, [x0,752]
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	mov	x0, x20
+	bhi	.L1185
+	bl	SandiskSetRRPara
+	b	.L1186
+.L1185:
+	bl	ToshibaSetRRPara
+.L1186:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,752]
+	cmp	w0, 34
+	bne	.L1187
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrb	w0, [x0,97]
+	sub	w0, w0, #3
+	cmp	w21, w0
+	bne	.L1187
+	ldr	x0, [x29,104]
+	mov	w1, 179
+	add	x0, x24, x0
+	str	w1, [x0,8]
+.L1187:
+	ldr	x0, [x29,96]
+	mov	w1, 38
+	add	x0, x24, x0
+	str	w1, [x0,2056]
+	mov	w1, 93
+	str	w1, [x0,2056]
+	cbz	w22, .L1188
+	mov	w0, 4
+	bl	NandcSetDdrMode
+	ldr	w1, [x29,116]
+	mov	w0, w23
+	mov	x2, x27
+	mov	x3, x26
+	bl	FlashReadRawPage
+	mov	w28, w0
+	mov	w0, 0
+	bl	NandcSetDdrMode
+	b	.L1189
+.L1188:
+	ldr	w1, [x29,116]
+	mov	w0, w23
+	mov	x2, x27
+	mov	x3, x26
+	bl	FlashReadRawPage
+	mov	w28, w0
+.L1189:
+	cmn	w28, #1
+	beq	.L1190
+	add	x0, x19, :lo12:.LANCHOR0
+	cmn	w25, #1
+	csel	w25, w25, w28, ne
+	ldrb	w0, [x0,1936]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bcc	.L1192
+	mov	x26, 0
+	mov	x27, x26
+.L1190:
+	add	w21, w21, 1
+	b	.L1184
+.L1209:
+	mov	w28, w25
+.L1192:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	ldrb	w0, [x0,752]
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	mov	x0, x20
+	bhi	.L1194
+	bl	SandiskSetRRPara
+	b	.L1195
+.L1194:
+	bl	ToshibaSetRRPara
+.L1195:
+	ldr	x0, [x29,120]
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x0, x0, 8
+	add	x24, x24, x0, lsl 8
+	mov	w0, 255
+	str	w0, [x24,8]
+	ldrb	w0, [x19,1936]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bcc	.L1196
+	cmn	w28, #1
+	mov	w0, 256
+	csel	w28, w28, w0, eq
+.L1196:
+	mov	w0, w23
+	bl	NandcWaitFlashReady
+	cbz	w22, .L1197
+	mov	w0, 4
+	bl	NandcSetDdrMode
+.L1197:
+	mov	w0, w28
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	ToshibaReadRetrial, .-ToshibaReadRetrial
+	.align	2
+	.global	SamsungReadRetrial
+	.type	SamsungReadRetrial, %function
+SamsungReadRetrial:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	str	x27, [sp,80]
+	mov	w0, w22
+	adrp	x27, .LANCHOR4
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	x24, x2
+	mov	w25, w1
+	mov	x23, x3
+	adrp	x20, .LANCHOR0
+	bl	NandcWaitFlashReady
+	mov	w26, 1
+	add	x0, x20, :lo12:.LANCHOR0
+	sbfiz	x1, x22, 4, 32
+	add	x0, x0, 24
+	mov	w19, -1
+	add	x2, x0, x1
+	ldr	x0, [x0,x1]
+	ldrb	w21, [x2,8]
+	add	x21, x21, 8
+	add	x21, x0, x21, lsl 8
+.L1211:
+	add	x0, x27, :lo12:.LANCHOR4
+	ldrb	w0, [x0,97]
+	add	w0, w0, 1
+	cmp	w26, w0
+	bcs	.L1214
+	mov	x0, x21
+	mov	w1, w26
+	bl	SamsungSetRRPara
+	mov	w0, w22
+	mov	w1, w25
+	mov	x2, x24
+	mov	x3, x23
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	beq	.L1212
+	add	x1, x20, :lo12:.LANCHOR0
+	cmn	w19, #1
+	csel	w19, w19, w0, ne
+	ldrb	w1, [x1,1936]
+	add	w1, w1, w1, lsl 1
+	cmp	w0, w1, lsr 2
+	bcc	.L1217
+	mov	x23, 0
+	mov	x24, x23
+.L1212:
+	add	w26, w26, 1
+	b	.L1211
+.L1217:
+	mov	w19, w0
+.L1214:
+	mov	x0, x21
+	mov	w1, 0
+	add	x20, x20, :lo12:.LANCHOR0
+	bl	SamsungSetRRPara
+	ldrb	w0, [x20,1936]
+	add	w0, w0, w0, lsl 1
+	cmp	w19, w0, lsr 2
+	bcc	.L1216
+	cmn	w19, #1
+	mov	w0, 256
+	csel	w19, w19, w0, eq
+.L1216:
+	mov	w0, w19
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	SamsungReadRetrial, .-SamsungReadRetrial
+	.align	2
+	.global	MicronReadRetrial
+	.type	MicronReadRetrial, %function
+MicronReadRetrial:
+	stp	x29, x30, [sp, -144]!
+	adrp	x4, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	add	x0, x4, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w24, w1
+	mov	x25, x2
+	ldrb	w20, [x0,1936]
+	mov	x23, x3
+	ldrb	w0, [x0,120]
+	mov	x19, x4
+	cbnz	w0, .L1224
+	add	w20, w20, w20, lsl 1
+	ubfx	x20, x20, 2, 8
+	b	.L1225
+.L1224:
+	mov	w0, 3
+	sdiv	w20, w20, w0
+.L1225:
+	mov	w0, w22
+	mov	w27, 0
+	bl	NandcWaitFlashReady
+	add	x4, x19, :lo12:.LANCHOR0
+	sbfiz	x0, x22, 4, 32
+	add	x4, x4, 24
+	mov	w19, -1
+	add	x1, x4, x0
+	adrp	x5, .LANCHOR4
+	mov	w7, 239
+	mov	w8, 137
+	ldr	x28, [x4,x0]
+	ldrb	w21, [x1,8]
+	lsl	x6, x21, 8
+.L1226:
+	add	x0, x5, :lo12:.LANCHOR4
+	ldrb	w0, [x0,97]
+	cmp	w27, w0
+	bcs	.L1229
+	add	x26, x28, x6
+	mov	w0, 200
+	str	x5, [x29,104]
+	str	x6, [x29,112]
+	str	w7, [x26,2056]
+	str	w8, [x26,2052]
+	str	x7, [x29,120]
+	str	x8, [x29,128]
+	bl	NandcDelayns
+	add	w4, w27, 1
+	str	w4, [x26,2048]
+	str	wzr, [x26,2048]
+	mov	w0, w22
+	str	wzr, [x26,2048]
+	mov	w1, w24
+	str	wzr, [x26,2048]
+	mov	x2, x25
+	mov	x3, x23
+	str	x4, [x29,136]
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	ldr	x4, [x29,136]
+	ldr	x8, [x29,128]
+	ldr	x7, [x29,120]
+	ldr	x6, [x29,112]
+	ldr	x5, [x29,104]
+	beq	.L1227
+	cmn	w19, #1
+	csel	w19, w19, w0, ne
+	cmp	w0, w20
+	bcc	.L1234
+	mov	x23, 0
+	mov	x25, x23
+.L1227:
+	mov	w27, w4
+	b	.L1226
+.L1234:
+	mov	w19, w0
+.L1229:
+	add	x21, x28, x21, lsl 8
+	mov	w0, 239
+	str	w0, [x21,2056]
+	mov	w0, 137
+	str	w0, [x21,2052]
+	mov	w0, 200
+	bl	NandcDelayns
+	str	wzr, [x21,2048]
+	str	wzr, [x21,2048]
+	cmp	w19, w20
+	str	wzr, [x21,2048]
+	str	wzr, [x21,2048]
+	bcc	.L1231
+	cmn	w19, #1
+	mov	w0, 256
+	csel	w19, w19, w0, eq
+.L1231:
+	cmn	w19, #1
+	beq	.L1235
+	cmp	w19, 256
+	bne	.L1232
+.L1235:
+	adrp	x0, .LC91
+	mov	w1, w27
+	add	x0, x0, :lo12:.LC91
+	mov	w2, w24
+	mov	w3, w27
+	mov	w4, w19
+	bl	printk
+.L1232:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	MicronReadRetrial, .-MicronReadRetrial
+	.align	2
+	.global	HynixReadRetrial
+	.type	HynixReadRetrial, %function
+HynixReadRetrial:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	uxtb	x22, w0
+	stp	x27, x28, [sp,80]
+	mov	w27, w1
+	add	x1, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	mov	x26, x2
+	add	x2, x1, 760
+	ldrb	w25, [x1,762]
+	add	x0, x2, x22
+	ldr	x1, [x1,744]
+	mov	x23, x22
+	mov	x24, x3
+	ldrb	w19, [x0,12]
+	ldrb	w1, [x1,19]
+	cmp	w1, 7
+	bne	.L1245
+	ldrb	w19, [x0,20]
+.L1245:
+	mov	w0, w23
+	mov	w28, 0
+	mov	w20, -1
+	bl	NandcWaitFlashReady
+	add	x4, x21, :lo12:.LANCHOR0
+	add	x5, x4, 764
+.L1246:
+	cmp	w28, w25
+	bcs	.L1250
+	add	w19, w19, 1
+	ldrb	w1, [x4,761]
+	mov	x2, x5
+	mov	w0, w23
+	uxtb	w19, w19
+	str	x4, [x29,96]
+	cmp	w19, w25
+	str	x5, [x29,104]
+	csel	w19, w19, wzr, cc
+	mov	w3, w19
+	bl	HynixSetRRPara
+	mov	w0, w23
+	mov	w1, w27
+	mov	x2, x26
+	mov	x3, x24
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	ldr	x5, [x29,104]
+	ldr	x4, [x29,96]
+	beq	.L1248
+	ldrb	w1, [x4,1936]
+	cmn	w20, #1
+	csel	w20, w20, w0, ne
+	add	w1, w1, w1, lsl 1
+	cmp	w0, w1, lsr 2
+	bcc	.L1255
+	mov	x24, 0
+	mov	x26, x24
+.L1248:
+	add	w28, w28, 1
+	b	.L1246
+.L1255:
+	mov	w20, w0
+.L1250:
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x0, 760
+	ldr	x1, [x0,-16]
+	add	x0, x0, x22
+	ldrb	w1, [x1,19]
+	cmp	w1, 7
+	bne	.L1252
+	strb	w19, [x0,20]
+	b	.L1253
+.L1252:
+	strb	w19, [x0,12]
+.L1253:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x21,1936]
+	add	w0, w0, w0, lsl 1
+	cmp	w20, w0, lsr 2
+	bcc	.L1254
+	cmn	w20, #1
+	mov	w0, 256
+	csel	w20, w20, w0, eq
+.L1254:
+	mov	w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	HynixReadRetrial, .-HynixReadRetrial
+	.align	2
+	.global	FlashProgPage
+	.type	FlashProgPage, %function
+FlashProgPage:
+	stp	x29, x30, [sp, -64]!
+	mov	x4, x3
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w19, w0
+	adrp	x0, .LANCHOR1+481
+	stp	x21, x22, [sp,32]
+	mov	w20, w1
+	mov	x22, x2
+	ldrb	w21, [x0,#:lo12:.LANCHOR1+481]
+	cbnz	w19, .L1262
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,9]
+	ldr	w2, [x0,12]
+	mul	w1, w1, w2
+	cmp	w20, w1
+	bcs	.L1262
+	ldrb	w0, [x0,8]
+	cbnz	w0, .L1263
+	sub	w21, w21, #2
+	b	.L1262
+.L1263:
+	mov	w21, 4
+.L1262:
+	mov	w0, w19
+	str	x4, [x29,56]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	mov	w0, w19
+	mov	w1, w20
+	bl	FlashProgFirstCmd
+	ldr	x4, [x29,56]
+	mov	w2, w21
+	mov	x3, x22
+	mov	w0, w19
+	mov	w1, 1
+	bl	NandcXferData
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashProgSecondCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashReadStatus
+	mov	w20, w0
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	and	w0, w20, 1
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FlashProgPage, .-FlashProgPage
+	.align	2
+	.global	FlashSavePhyInfo
+	.type	FlashSavePhyInfo, %function
+FlashSavePhyInfo:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR4
+	adrp	x24, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	add	x19, x23, :lo12:.LANCHOR4
+	add	x20, x24, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	w21, 0
+	ldr	x0, [x19,56]
+	str	x0, [x19,80]
+	ldrb	w0, [x19,98]
+	bl	FlashBchSel
+	ldr	x0, [x19,56]
+	mov	w1, 0
+	mov	w2, 2048
+	bl	ftl_memset
+	ldr	x1, [x19,80]
+	mov	w0, 20036
+	movk	w0, 0x4e41, lsl 16
+	mov	w2, 32
+	str	w0, [x1]
+	ldr	x0, [x19,80]
+	ldrb	w1, [x20,1845]
+	add	x0, x0, 16
+	strh	w1, [x0,-4]
+	ldrb	w1, [x20,9]
+	strh	w1, [x0,-2]
+	ldrb	w1, [x20,1856]
+	str	w1, [x0,1060]
+	add	x1, x20, 1620
+	bl	ftl_memcpy
+	ldr	x0, [x19,80]
+	add	x1, x20, 1848
+	mov	w2, 8
+	add	x0, x0, 80
+	bl	ftl_memcpy
+	ldr	x0, [x19,80]
+	add	x1, x20, 708
+	mov	w2, 32
+	add	x0, x0, 96
+	bl	ftl_memcpy
+	ldr	x0, [x19,80]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 32
+	add	x1, x1, 472
+	add	x0, x0, 160
+	bl	ftl_memcpy
+	ldr	x0, [x19,80]
+	add	x1, x20, 88
+	mov	w2, 32
+	add	x0, x0, 192
+	bl	ftl_memcpy
+	ldr	x0, [x19,80]
+	add	x1, x20, 760
+	mov	w2, 852
+	add	x0, x0, 224
+	bl	ftl_memcpy
+	ldr	x20, [x19,80]
+	mov	w1, 2036
+	add	x0, x20, 12
+	bl	JSHash
+	str	w0, [x20,8]
+	mov	w0, 1592
+	str	w0, [x20,4]
+	ldr	x0, [x19,104]
+	str	x0, [x19,80]
+	mov	w0, 0
+	mov	w19, w21
+	bl	flash_enter_slc_mode
+.L1267:
+	add	x22, x24, :lo12:.LANCHOR0
+	mov	w2, 0
+	mov	w0, 0
+	add	x20, x23, :lo12:.LANCHOR4
+	add	w26, w19, 1
+	ldr	w1, [x22,12]
+	mul	w1, w19, w1
+	bl	FlashEraseBlock
+	ldr	w1, [x22,12]
+	mov	x3, 0
+	ldr	x2, [x20,56]
+	mov	w0, 0
+	mul	w1, w19, w1
+	bl	FlashProgPage
+	ldr	w1, [x22,12]
+	mov	x3, 0
+	ldr	x2, [x20,56]
+	mov	w0, 0
+	mul	w1, w19, w1
+	add	w1, w1, 1
+	bl	FlashProgPage
+	ldr	w1, [x22,12]
+	mov	w0, 0
+	ldr	x2, [x20,104]
+	mov	x3, 0
+	mul	w1, w19, w1
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	beq	.L1265
+	ldr	x25, [x20,80]
+	mov	w0, 20036
+	movk	w0, 0x4e41, lsl 16
+	ldr	w1, [x25]
+	cmp	w1, w0
+	bne	.L1265
+	mov	w1, 2036
+	add	x0, x25, 12
+	bl	JSHash
+	ldr	w1, [x25,8]
+	cmp	w1, w0
+	bne	.L1265
+	ldr	w0, [x22,12]
+	cmp	w21, 1
+	str	w26, [x20,92]
+	mul	w19, w19, w0
+	str	w19, [x20,88]
+	beq	.L1268
+	mov	w21, 1
+.L1265:
+	cmp	w26, 4
+	mov	w19, w26
+	bne	.L1267
+	b	.L1266
+.L1268:
+	mov	w21, 2
+.L1266:
+	mov	w0, 0
+	bl	flash_exit_slc_mode
+	cmp	w21, wzr
+	csetm	w0, eq
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FlashSavePhyInfo, .-FlashSavePhyInfo
+	.align	2
+	.global	FlashReadIdbDataRaw
+	.type	FlashReadIdbDataRaw, %function
+FlashReadIdbDataRaw:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	mov	x26, x0
+	mov	w0, 60
+	strb	w0, [x29,120]
+	mov	w0, 40
+	strb	w0, [x29,121]
+	mov	w0, 24
+	stp	x19, x20, [sp,16]
+	strb	w0, [x29,122]
+	adrp	x19, .LANCHOR0
+	mov	w0, 16
+	strb	w0, [x29,123]
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	ldr	w1, [x0,1868]
+	ldrb	w27, [x0,1936]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L1274
+	mov	w0, 0
+	bl	flash_enter_slc_mode
+.L1274:
+	mov	x0, x26
+	mov	w1, 0
+	mov	w2, 2048
+	adrp	x24, .LC92
+	mov	w23, -1
+	mov	w20, 2
+	bl	ftl_memset
+	adrp	x28, .LANCHOR4
+	add	x0, x24, :lo12:.LC92
+	str	x0, [x29,104]
+.L1275:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,9]
+	cmp	w20, w0
+	bcs	.L1279
+	mov	x22, 0
+.L1277:
+	add	x0, x29, 120
+	add	x24, x19, :lo12:.LANCHOR0
+	add	x21, x28, :lo12:.LANCHOR4
+	ldrb	w25, [x22,x0]
+	mov	w0, w25
+	bl	FlashBchSel
+	ldr	w1, [x24,12]
+	mov	w0, 0
+	ldr	x2, [x21,56]
+	mov	x3, 0
+	mul	w1, w20, w1
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	bne	.L1276
+	add	x22, x22, 1
+	cmp	x22, 4
+	bne	.L1277
+	b	.L1278
+.L1276:
+	ldr	x0, [x21,56]
+	ldr	w1, [x0]
+	mov	w0, 35899
+	movk	w0, 0xfcdc, lsl 16
+	cmp	w1, w0
+	bne	.L1278
+	ldr	x0, [x29,104]
+	mov	w1, w25
+	bl	printk
+	ldr	x1, [x21,56]
+	mov	x0, x26
+	mov	w2, 2048
+	bl	ftl_memcpy
+	ldr	x0, [x21,56]
+	ldr	w0, [x0,512]
+	strb	w0, [x24,9]
+	ldr	w0, [x21,92]
+	cmp	w0, w20
+	bls	.L1282
+	mov	w23, 0
+	str	w20, [x21,92]
+	bl	FlashSavePhyInfo
+.L1278:
+	add	w20, w20, 1
+	b	.L1275
+.L1282:
+	mov	w23, 0
+.L1279:
+	mov	w0, w27
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	FlashBchSel
+	ldr	w1, [x19,1868]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L1284
+	mov	w0, 0
+	bl	flash_exit_slc_mode
+.L1284:
+	mov	w0, w23
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
+	.align	2
+	.global	FlashInit
+	.type	FlashInit, %function
+FlashInit:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR4
+	add	x22, x21, :lo12:.LANCHOR4
+	stp	x23, x24, [sp,48]
+	mov	x23, x0
+	mov	w0, 32768
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	bl	ftl_malloc
+	str	x0, [x22,56]
+	mov	w0, 32768
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	adrp	x25, .LC93
+	bl	ftl_malloc
+	str	x0, [x22,104]
+	mov	w0, 4096
+	add	x24, x20, 24
+	mov	w27, 0
+	mov	w28, 44
+	bl	ftl_malloc
+	str	x0, [x22,112]
+	mov	w0, 32768
+	bl	ftl_malloc
+	str	x0, [x22,120]
+	mov	w0, 4096
+	bl	ftl_malloc
+	str	x0, [x22,128]
+	mov	w0, 128
+	str	w0, [x20,12]
+	mov	w0, 60
+	mov	w1, 50
+	strb	w0, [x22,98]
+	mov	x0, x23
+	strb	wzr, [x20,1856]
+	strb	w1, [x20,9]
+	strb	wzr, [x20,8]
+	add	x20, x20, 1620
+	strb	w1, [x22,96]
+	mov	x26, x20
+	str	wzr, [x22,92]
+	str	wzr, [x22,64]
+	bl	NandcInit
+	add	x0, x25, :lo12:.LC93
+	str	x0, [x29,104]
+.L1291:
+	uxtb	w25, w27
+	mov	w0, w25
+	bl	FlashReset
+	ldrb	w23, [x24,8]
+	ldr	x22, [x24]
+	mov	w0, w25
+	ubfiz	x23, x23, 8, 8
+	add	x22, x22, x23
+	bl	NandcFlashCs
+	mov	w0, 144
+	str	w0, [x22,2056]
+	mov	w0, 200
+	str	wzr, [x22,2052]
+	bl	NandcDelayns
+	ldr	w0, [x22,2048]
+	strb	w0, [x20]
+	ldr	w0, [x22,2048]
+	strb	w0, [x20,1]
+	ldr	w0, [x22,2048]
+	strb	w0, [x20,2]
+	ldr	w0, [x22,2048]
+	strb	w0, [x20,3]
+	ldr	w0, [x22,2048]
+	strb	w0, [x20,4]
+	ldr	w0, [x22,2048]
+	strb	w0, [x20,5]
+	mov	w0, w25
+	bl	NandcFlashDeCs
+	ldrb	w2, [x20]
+	sub	w0, w2, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bhi	.L1287
+	ldr	x0, [x29,104]
+	add	w1, w27, 1
+	ldrb	w3, [x20,1]
+	ldrb	w4, [x20,2]
+	ldrb	w5, [x20,3]
+	ldrb	w6, [x20,4]
+	ldrb	w7, [x20,5]
+	bl	printk
+.L1287:
+	cbnz	w27, .L1288
+	ldrb	w0, [x26]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bhi	.L1333
+	ldrb	w0, [x26,1]
+	cmp	w0, 255
+	beq	.L1333
+.L1288:
+	ldrb	w0, [x20]
+	cmp	w0, 181
+	bne	.L1290
+	strb	w28, [x20]
+.L1290:
+	add	w27, w27, 1
+	add	x24, x24, 16
+	cmp	w27, 4
+	add	x20, x20, 8
+	bne	.L1291
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,1620]
+	cmp	w1, 173
+	beq	.L1292
+	ldr	w0, [x0,1860]
+	bl	NandcSetDdrMode
+.L1292:
+	add	x20, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	mov	w2, 852
+	add	x0, x20, 760
+	bl	ftl_memset
+	strb	wzr, [x20,16]
+	adrp	x1, .LANCHOR1
+	ldrb	w2, [x20,1621]
+	add	x0, x1, :lo12:.LANCHOR1
+	add	x0, x0, 472
+	str	x0, [x20,744]
+	add	w0, w2, 38
+	and	w0, w0, -3
+	uxtb	w0, w0
+	cbz	w0, .L1335
+	cmp	w2, 241
+	bne	.L1293
+.L1335:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w3, 1
+	mov	w4, 16
+	add	x5, x1, :lo12:.LANCHOR1
+	strb	w3, [x0,8]
+	add	x3, x21, :lo12:.LANCHOR4
+	strb	w4, [x0,9]
+	strb	w4, [x3,98]
+	add	x4, x0, 1620
+	ldrb	w0, [x0,1620]
+	strb	w0, [x5,2977]
+	cmp	w0, 152
+	bne	.L1295
+	ldrsb	w0, [x4,4]
+	tbnz	w0, #31, .L1295
+	mov	w0, 24
+	strb	w0, [x3,98]
+.L1295:
+	cmp	w2, 218
+	bne	.L1296
+	add	x0, x1, :lo12:.LANCHOR1
+	mov	w2, 2048
+	strh	w2, [x0,2990]
+	mov	w2, -38
+	b	.L1368
+.L1296:
+	cmp	w2, 220
+	bne	.L1297
+	add	x0, x1, :lo12:.LANCHOR1
+	mov	w2, 4096
+	strh	w2, [x0,2990]
+	mov	w2, -36
+.L1368:
+	strb	w2, [x0,2978]
+.L1297:
+	add	x20, x1, :lo12:.LANCHOR1
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x1, x20, 2848
+	mov	w2, 32
+	add	x0, x0, 88
+	bl	ftl_memcpy
+	add	x0, x20, 472
+	add	x1, x20, 2976
+	mov	w2, 32
+	bl	ftl_memcpy
+.L1293:
+	add	x20, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x20,8]
+	cbnz	w0, .L1298
+	bl	FlashLoadPhyInfoInRam
+	cbnz	w0, .L1300
+	ldr	x0, [x20,744]
+	ldrb	w1, [x0,17]
+	and	w0, w1, 7
+	strb	w0, [x20,1844]
+	tbnz	x1, 0, .L1300
+	mov	w1, 1
+	strb	w1, [x20,1856]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x20,1844]
+	bl	NandcSetMode
+.L1300:
+	add	x20, x19, :lo12:.LANCHOR0
+	ldr	x0, [x20,744]
+	ldrb	w0, [x0,26]
+	strb	w0, [x20,120]
+	bl	FlashLoadPhyInfo
+	cbz	w0, .L1298
+	ldr	w0, [x20,1860]
+	cbz	w0, .L1303
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	b	.L1369
+.L1303:
+	ldrb	w0, [x20,1844]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x20,1844]
+.L1369:
+	bl	NandcSetMode
+	bl	FlashLoadPhyInfo
+	cbz	w0, .L1298
+	mov	w0, 1
+	add	x20, x19, :lo12:.LANCHOR0
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	ldr	x1, [x20,744]
+	adrp	x0, .LC94
+	add	x0, x0, :lo12:.LC94
+	ldrh	w1, [x1,14]
+	bl	printk
+	bl	FlashLoadPhyInfoInRam
+	cmn	w0, #1
+	beq	.L1289
+	bl	FlashDieInfoInit
+	ldr	x0, [x20,744]
+	ldrb	w0, [x0,19]
+	bl	FlashGetReadRetryDefault
+	adrp	x1, .LANCHOR2+2022
+	ldr	x0, [x20,744]
+	ldrh	w1, [x1,#:lo12:.LANCHOR2+2022]
+	ldrb	w2, [x0,9]
+	add	w1, w1, 4095
+	cmp	w2, w1, lsr 12
+	blt	.L1305
+	ldrh	w1, [x0,14]
+	add	w1, w1, 255
+	cmp	w2, w1, lsr 8
+	bge	.L1306
+.L1305:
+	ldrh	w1, [x0,14]
+	and	w1, w1, -256
+	strh	w1, [x0,14]
+.L1306:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,1844]
+	tst	w0, 6
+	beq	.L1307
+	bl	FlashSavePhyInfo
+	add	x1, x21, :lo12:.LANCHOR4
+	mov	w0, 0
+	ldr	w1, [x1,88]
+	bl	FlashDdrParaScan
+.L1307:
+	bl	FlashSavePhyInfo
+.L1298:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x22, x21, :lo12:.LANCHOR4
+	ldr	x2, [x20,744]
+	str	xzr, [x22,72]
+	ldrb	w0, [x2,26]
+	strb	w0, [x20,120]
+	ldrh	w0, [x2,16]
+	ldrh	w3, [x2,10]
+	ubfx	x1, x0, 7, 1
+	strb	w1, [x20,16]
+	ubfx	x1, x0, 3, 1
+	strb	w1, [x22,136]
+	ubfx	x1, x0, 4, 1
+	strb	w1, [x20,1937]
+	ldrb	w1, [x2,12]
+	ubfx	x0, x0, 8, 3
+	strb	w0, [x20,1844]
+	ldrb	w0, [x2,18]
+	sdiv	w1, w3, w1
+	bl	BuildFlashLsbPageTable
+	bl	FlashDieInfoInit
+	ldr	x0, [x20,744]
+	ldrh	w1, [x0,16]
+	tbz	x1, 6, .L1309
+	ldrb	w0, [x0,19]
+	ldrb	w1, [x20,762]
+	strb	w1, [x22,97]
+	sub	w1, w0, #1
+	ldrb	w2, [x20,761]
+	uxtb	w1, w1
+	strb	w0, [x20,752]
+	strb	w2, [x20,753]
+	cmp	w1, 6
+	bhi	.L1310
+	adrp	x1, HynixReadRetrial
+	add	x1, x1, :lo12:HynixReadRetrial
+	str	x1, [x22,72]
+	sub	w1, w0, #5
+	uxtb	w1, w1
+	cmp	w1, 1
+	bhi	.L1311
+	mov	w1, 1
+	str	w1, [x20,1928]
+	b	.L1312
+.L1311:
+	cmp	w0, 7
+	add	x20, x20, 788
+	beq	.L1313
+.L1312:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x20, x20, 780
+.L1313:
+	mov	x1, 0
+	mov	w2, w1
+.L1315:
+	ldrsb	w3, [x20,x1]
+	add	x1, x1, 1
+	cmp	w3, wzr
+	csinc	w2, w2, w2, ne
+	cmp	x1, 32
+	bne	.L1315
+	cmp	w2, 27
+	bls	.L1309
+	bl	FlashGetReadRetryDefault
+	bl	FlashSavePhyInfo
+	b	.L1309
+.L1310:
+	sub	w1, w0, #17
+	uxtb	w1, w1
+	cmp	w1, 2
+	bhi	.L1317
+	adrp	x1, MicronReadRetrial
+	cmp	w0, 19
+	add	x1, x1, :lo12:MicronReadRetrial
+	str	x1, [x22,72]
+	beq	.L1318
+	mov	w0, 7
+	b	.L1370
+.L1318:
+	mov	w0, 15
+.L1370:
+	strb	w0, [x22,97]
+	b	.L1309
+.L1317:
+	sub	w1, w0, #65
+	uxtb	w1, w1
+	cmp	w1, 1
+	bls	.L1336
+	cmp	w0, 33
+	bne	.L1319
+.L1336:
+	add	x0, x21, :lo12:.LANCHOR4
+	adrp	x1, ToshibaReadRetrial
+	add	x1, x1, :lo12:ToshibaReadRetrial
+	mov	w2, 4
+	str	x1, [x0,72]
+	add	x1, x19, :lo12:.LANCHOR0
+	strb	w2, [x1,753]
+	mov	w1, 7
+	strb	w1, [x0,97]
+	b	.L1309
+.L1319:
+	sub	w1, w0, #67
+	uxtb	w1, w1
+	cmp	w1, 1
+	sub	w1, w0, #34
+	cset	w2, ls
+	uxtb	w1, w1
+	cmp	w1, 1
+	bls	.L1337
+	cbz	w2, .L1321
+.L1337:
+	add	x3, x21, :lo12:.LANCHOR4
+	adrp	x1, ToshibaReadRetrial
+	add	x1, x1, :lo12:ToshibaReadRetrial
+	cmp	w0, 35
+	str	x1, [x3,72]
+	beq	.L1323
+	cmp	w0, 68
+	beq	.L1323
+	mov	w0, 7
+	strb	w0, [x3,97]
+	b	.L1324
+.L1323:
+	add	x0, x21, :lo12:.LANCHOR4
+	mov	w1, 17
+	strb	w1, [x0,97]
+.L1324:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 4
+	cbnz	w2, .L1371
+	mov	w1, 5
+.L1371:
+	strb	w1, [x0,753]
+	b	.L1309
+.L1321:
+	cmp	w0, 49
+	bne	.L1309
+	adrp	x0, SamsungReadRetrial
+	add	x0, x0, :lo12:SamsungReadRetrial
+	str	x0, [x22,72]
+.L1309:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 12336
+	movk	w1, 0x5638, lsl 16
+	ldr	w2, [x0,1868]
+	cmp	w2, w1
+	bne	.L1326
+	ldrb	w1, [x0,120]
+	cbz	w1, .L1326
+	ldr	x0, [x0,744]
+	strb	wzr, [x0,18]
+.L1326:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,1620]
+	cmp	w1, 44
+	bne	.L1327
+	ldrb	w1, [x0,1856]
+	cbz	w1, .L1327
+	strb	wzr, [x0,1856]
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+.L1327:
+	mov	w0, 0
+	bl	flash_enter_slc_mode
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x1,1844]
+	tst	w0, 6
+	beq	.L1328
+	ldrb	w1, [x1,1856]
+	cbnz	w1, .L1329
+	tbnz	x0, 0, .L1328
+.L1329:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w0, 0
+	ldr	w1, [x21,88]
+	bl	FlashDdrParaScan
+.L1328:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 0
+	mov	w20, 16
+	bl	flash_exit_slc_mode
+	ldr	x0, [x19,744]
+	ldrb	w0, [x0,20]
+	bl	FlashBchSel
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 2352
+	bl	FlashReadIdbDataRaw
+	strb	w20, [x19,9]
+	mov	w0, 18928
+	movk	w0, 0x2, lsl 16
+	bl	FlashTimingCfg
+	ldr	x1, [x19,744]
+	ldrb	w2, [x1,12]
+	strh	w2, [x19,176]
+	ldrh	w4, [x1,14]
+	ldrb	w2, [x1,7]
+	str	w2, [x19,172]
+	ldr	w2, [x19,1620]
+	str	w2, [x19,168]
+	ldrb	w2, [x19,1845]
+	strh	w2, [x19,178]
+	ldrb	w2, [x1,13]
+	strh	w2, [x19,180]
+	strh	w4, [x19,182]
+	ldrh	w2, [x1,10]
+	strh	w2, [x19,184]
+	ldrb	w3, [x1,12]
+	ldrh	w2, [x1,10]
+	sdiv	w2, w2, w3
+	strh	w2, [x19,186]
+	ldrb	w3, [x1,9]
+	strh	w3, [x19,188]
+	ldrh	w5, [x1,10]
+	ldrb	w2, [x1,9]
+	mul	w2, w2, w5
+	mov	w5, 512
+	strh	w5, [x19,192]
+	ldrb	w5, [x19,9]
+	strh	w5, [x19,194]
+	uxth	w2, w2
+	ldrb	w5, [x19,8]
+	strh	w2, [x19,190]
+	cmp	w5, 1
+	bne	.L1331
+	lsl	w2, w2, 1
+	lsr	w4, w4, 1
+	lsl	w3, w3, 1
+	strh	w2, [x19,190]
+	strb	w20, [x19,9]
+	mov	w2, 8
+	strh	w4, [x19,182]
+	strh	w3, [x19,188]
+	strh	w2, [x19,194]
+.L1331:
+	ldrb	w0, [x1,20]
+	bl	FlashBchSel
+	bl	FlashSuspend
+	mov	w0, 0
+	b	.L1289
+.L1333:
+	mov	w0, -2
+.L1289:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FlashInit, .-FlashInit
+	.align	2
+	.global	FlashPageProgMsbFFData
+	.type	FlashPageProgMsbFFData, %function
+FlashPageProgMsbFFData:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w19, w2
+	adrp	x2, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x2, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	x23, x2
+	ldr	x3, [x0,744]
+	ldrb	w4, [x0,120]
+	ldrb	w3, [x3,19]
+	cbz	w4, .L1373
+	ldr	w2, [x0,1868]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w2, w0
+	beq	.L1372
+.L1373:
+	sub	w2, w3, #5
+	uxtb	w2, w2
+	cmp	w2, 2
+	bls	.L1374
+	cmp	w3, 68
+	beq	.L1374
+	sub	w3, w3, #19
+	and	w3, w3, -17
+	uxtb	w3, w3
+	cbnz	w3, .L1372
+.L1374:
+	adrp	x20, .LANCHOR2
+	mov	w24, w1
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w25, 65535
+	add	x20, x20, 996
+	adrp	x26, .LANCHOR4
+.L1376:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	x0, [x0,744]
+	ldrh	w0, [x0,10]
+	cmp	w0, w19
+	bls	.L1372
+	ldrh	w0, [x20,w19,sxtw 1]
+	cmp	w0, w25
+	bne	.L1372
+	add	x22, x26, :lo12:.LANCHOR4
+	mov	w1, 255
+	mov	w2, 32768
+	ldr	x0, [x22,104]
+	bl	ftl_memset
+	ldr	x2, [x22,104]
+	add	w1, w19, w24
+	mov	w0, w21
+	mov	x3, 0
+	add	w19, w19, 1
+	bl	FlashProgPage
+	uxth	w19, w19
+	b	.L1376
+.L1372:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FlashPageProgMsbFFData, .-FlashPageProgMsbFFData
+	.align	2
+	.global	FlashReadSlc2KPages
+	.type	FlashReadSlc2KPages, %function
+FlashReadSlc2KPages:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	mov	w25, w1
+	adrp	x1, .LANCHOR1+481
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR0
+	adrp	x23, .LC95
+	adrp	x24, .LC97
+	ldrb	w26, [x1,#:lo12:.LANCHOR1+481]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	mov	w27, w2
+	mov	w22, 0
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x23, x23, :lo12:.LC95
+	add	x24, x24, :lo12:.LC97
+.L1382:
+	cmp	w22, w25
+	beq	.L1416
+	mov	w1, w27
+	sub	w4, w25, w22
+	mov	x0, x19
+	add	x2, x29, 124
+	add	x3, x29, 120
+	bl	LogAddr2PhyAddr
+	ldr	w0, [x29,120]
+	adrp	x5, .LANCHOR0
+	ldrb	w1, [x21,1845]
+	cmp	w0, w1
+	bcc	.L1383
+	mov	w0, -1
+	str	w0, [x19]
+	b	.L1384
+.L1383:
+	add	x0, x21, x0, uxtw
+	ldrb	w28, [x0,1848]
+	str	x5, [x29,96]
+	mov	w0, w28
+	bl	NandcWaitFlashReady
+	mov	w0, w28
+	bl	NandcFlashCs
+	ldr	w1, [x29,124]
+	mov	w0, w28
+	bl	FlashReadCmd
+	mov	w0, w28
+	bl	NandcWaitFlashReady
+	ldr	x3, [x19,8]
+	mov	w1, 0
+	ldr	x4, [x19,16]
+	mov	w2, w26
+	mov	w0, w28
+	bl	NandcXferData
+	mov	w6, w0
+	ldr	w2, [x21,12]
+	mov	w0, w28
+	ldr	w1, [x29,124]
+	str	x6, [x29,104]
+	add	w1, w2, w1
+	bl	FlashReadCmd
+	ldr	x0, [x19,8]
+	mov	w1, 0
+	mov	w2, w26
+	cmp	x0, xzr
+	add	x3, x0, 2048
+	ldr	x0, [x19,16]
+	csel	x3, x3, xzr, ne
+	add	x4, x0, 8
+	cmp	x0, xzr
+	csel	x4, x4, xzr, ne
+	mov	w0, w28
+	bl	NandcXferData
+	mov	w20, w0
+	mov	w0, w28
+	bl	NandcFlashDeCs
+	ldr	x5, [x29,96]
+	ldr	x6, [x29,104]
+	add	x0, x5, :lo12:.LANCHOR0
+	cmp	w20, w6
+	csel	w3, w20, w6, cs
+	ldrb	w0, [x0,1936]
+	add	w0, w0, w0, lsl 1
+	cmp	w3, w0, lsr 2
+	bls	.L1387
+	cmn	w3, #1
+	mov	w0, 256
+	csel	w3, w3, w0, eq
+.L1387:
+	cmp	w3, 256
+	beq	.L1398
+	cmn	w3, #1
+	bne	.L1388
+.L1398:
+	str	w3, [x19]
+	b	.L1390
+.L1388:
+	str	wzr, [x19]
+.L1390:
+	ldr	x0, [x19,16]
+	cbz	x0, .L1391
+	ldr	w1, [x0,8]
+	cmn	w1, #1
+	bne	.L1391
+	ldr	w0, [x0]
+	cmn	w0, #1
+	beq	.L1391
+	str	w1, [x19]
+.L1391:
+	ldr	w3, [x19]
+	cmn	w3, #1
+	bne	.L1384
+	add	x5, x5, :lo12:.LANCHOR0
+	ldr	w1, [x19,4]
+	mov	x0, x23
+	ldrb	w2, [x5,1936]
+	bl	printk
+	ldr	x1, [x19,8]
+	cbz	x1, .L1393
+	adrp	x0, .LC96
+	mov	w2, 4
+	add	x0, x0, :lo12:.LC96
+	mov	w3, 8
+	bl	rknand_print_hex
+.L1393:
+	ldr	x1, [x19,16]
+	cbz	x1, .L1384
+	mov	w2, 4
+	mov	x0, x24
+	mov	w3, w2
+	bl	rknand_print_hex
+.L1384:
+	add	w22, w22, 1
+	add	x19, x19, 56
+	b	.L1382
+.L1416:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FlashReadSlc2KPages, .-FlashReadSlc2KPages
+	.align	2
+	.global	FlashReadPages
+	.type	FlashReadPages, %function
+FlashReadPages:
+	stp	x29, x30, [sp, -176]!
+	adrp	x3, .LANCHOR1+481
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	ldrb	w3, [x3,#:lo12:.LANCHOR1+481]
+	adrp	x22, .LANCHOR0
+	str	w3, [x29,148]
+	add	x3, x22, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	str	w1, [x29,144]
+	mov	x26, x0
+	ldrb	w4, [x3,16]
+	ldrb	w23, [x3,8]
+	str	w2, [x29,140]
+	str	w4, [x29,136]
+	cbz	w23, .L1457
+	bl	FlashReadSlc2KPages
+	b	.L1506
+.L1457:
+	adrp	x0, .LC95
+	mov	w24, w23
+	add	x0, x0, :lo12:.LC95
+	str	x0, [x29,128]
+	adrp	x0, .LC97
+	add	x0, x0, :lo12:.LC97
+	str	x0, [x29,120]
+	adrp	x0, .LC98
+	add	x0, x0, :lo12:.LC98
+	str	x0, [x29,112]
+.L1418:
+	ldr	w0, [x29,144]
+	cmp	w24, w0
+	bcs	.L1508
+	mov	w27, 56
+	ldr	w0, [x29,144]
+	ldr	w1, [x29,140]
+	add	x2, x29, 172
+	umull	x27, w24, w27
+	sub	w4, w0, w24
+	add	x3, x29, 168
+	add	x21, x26, x27
+	mov	x0, x21
+	ldr	w28, [x21,4]
+	bl	LogAddr2PhyAddr
+	add	x1, x22, :lo12:.LANCHOR0
+	mov	w20, w0
+	ldr	w0, [x29,168]
+	ldrb	w2, [x1,1845]
+	cmp	w0, w2
+	bcc	.L1420
+	mov	w0, -1
+	str	w0, [x26,x27]
+	b	.L1421
+.L1420:
+	add	x0, x1, x0, uxtw
+	adrp	x25, .LANCHOR4
+	ldrb	w19, [x0,1848]
+	add	x0, x25, :lo12:.LANCHOR4
+	str	x1, [x29,152]
+	ldrb	w0, [x0,136]
+	cmp	w0, wzr
+	mov	w0, w19
+	csel	w20, w20, wzr, ne
+	bl	NandcWaitFlashReady
+	ldr	x1, [x29,152]
+	ldr	x0, [x1,744]
+	ldrb	w2, [x0,19]
+	sub	w0, w2, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L1423
+	add	x1, x1, 760
+	sxtw	x0, w19
+	add	x1, x1, x0
+	cmp	w2, 7
+	ldrb	w3, [x1,12]
+	bne	.L1424
+	ldrb	w3, [x1,20]
+.L1424:
+	add	x2, x22, :lo12:.LANCHOR0
+	add	x0, x2, x0
+	ldrb	w0, [x0,1616]
+	cmp	w0, w3
+	beq	.L1423
+	ldrb	w1, [x2,761]
+	mov	w0, w19
+	add	x2, x2, 764
+	bl	HynixSetRRPara
+.L1423:
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	w0, [x29,140]
+	cmp	w0, 1
+	cset	w0, eq
+	orr	w0, w0, w28, lsr 31
+	str	w0, [x29,152]
+	cbz	w0, .L1425
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L1425
+	mov	w0, w19
+	bl	flash_enter_slc_mode
+	b	.L1426
+.L1425:
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L1426:
+	cmp	w19, 255
+	ldr	w1, [x29,172]
+	bne	.L1464
+	cmn	w1, #1
+	cset	w0, ne
+	cbz	w0, .L1458
+.L1464:
+	cbz	w20, .L1430
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w2, [x0,12]
+	mov	w0, w19
+	add	w2, w1, w2
+	bl	FlashReadDpCmd
+	b	.L1431
+.L1430:
+	mov	w0, w19
+	bl	FlashReadCmd
+	b	.L1431
+.L1458:
+	mov	w20, w0
+.L1428:
+	ldrb	w2, [x29,148]
+	mov	w0, w19
+	ldr	x3, [x21,8]
+	mov	w1, 0
+	ldr	x4, [x21,16]
+	bl	NandcXferData
+	cmn	w0, #1
+	mov	w28, w0
+	bne	.L1432
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w1, [x0,16]
+	cbz	w1, .L1432
+	strb	wzr, [x0,16]
+	mov	w20, 0
+	b	.L1426
+.L1432:
+	cbz	w20, .L1433
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w1, [x29,172]
+	ldr	w2, [x0,12]
+	mov	w0, w19
+	add	w1, w2, w1
+	bl	FlashReadDpDataOutCmd
+	add	w0, w24, 1
+	mov	w4, 56
+	ldrb	w2, [x29,148]
+	mov	w1, 0
+	umull	x4, w0, w4
+	mov	w0, w19
+	add	x4, x26, x4
+	ldr	x3, [x4,8]
+	ldr	x4, [x4,16]
+	bl	NandcXferData
+	cmn	w0, #1
+	mov	w23, w0
+	csel	w20, w20, wzr, ne
+.L1433:
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	add	x6, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x29,136]
+	cmn	w28, #1
+	strb	w0, [x6,16]
+	bne	.L1440
+	ldrb	w0, [x6,1856]
+	cbnz	w0, .L1435
+.L1439:
+	add	x0, x25, :lo12:.LANCHOR4
+	ldr	x20, [x0,72]
+	cbnz	x20, .L1436
+	b	.L1509
+.L1435:
+	ldr	x0, [x6,128]
+	mov	w4, 1
+	ldr	w1, [x29,172]
+	ldr	x2, [x21,8]
+	ldr	x3, [x21,16]
+	ldr	w20, [x0,304]
+	mov	w0, w19
+	str	x6, [x29,104]
+	bl	FlashDdrTunningRead
+	cmn	w0, #1
+	mov	w28, w0
+	beq	.L1438
+	ldr	x6, [x29,104]
+	ldrb	w0, [x6,1936]
+	cmp	w28, w0, lsr 1
+	bls	.L1460
+.L1438:
+	lsr	w0, w20, 8
+	bl	NandcSetDdrPara
+	cmn	w28, #1
+	beq	.L1439
+	b	.L1460
+.L1436:
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	ldr	x2, [x21,8]
+	ldr	x3, [x21,16]
+	blr	x20
+	cmn	w0, #1
+	mov	w28, w0
+	mov	w20, 0
+	bne	.L1441
+	add	x2, x22, :lo12:.LANCHOR0
+	ldr	x0, [x2,744]
+	ldrb	w0, [x0,19]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L1442
+	ldrb	w1, [x2,761]
+	mov	w0, w19
+	add	x2, x2, 764
+	mov	w3, w20
+	bl	HynixSetRRPara
+.L1442:
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	ldr	x2, [x21,8]
+	mov	w20, 0
+	ldr	x3, [x21,16]
+	bl	FlashReadRawPage
+	mov	w28, w0
+	add	x4, x22, :lo12:.LANCHOR0
+	ldr	x0, [x29,112]
+	ldr	w1, [x21,4]
+	mov	w3, w28
+	str	x4, [x29,104]
+	ldrb	w2, [x4,1936]
+	bl	printk
+	cmn	w28, #1
+	ldr	x4, [x29,104]
+	bne	.L1441
+	ldrb	w0, [x4,120]
+	cbz	w0, .L1441
+	ldr	w0, [x29,152]
+	cbz	w0, .L1443
+	mov	w0, w19
+	bl	flash_enter_slc_mode
+	b	.L1444
+.L1443:
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L1444:
+	add	x0, x25, :lo12:.LANCHOR4
+	ldr	w1, [x29,172]
+	ldr	x2, [x21,8]
+	mov	w20, 0
+	ldr	x3, [x21,16]
+	ldr	x4, [x0,72]
+	mov	w0, w19
+	blr	x4
+	mov	w28, w0
+	b	.L1441
+.L1509:
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	ldr	x2, [x21,8]
+	ldr	x3, [x21,16]
+	bl	FlashReadRawPage
+	mov	w28, w0
+	b	.L1441
+.L1460:
+	mov	w20, 0
+.L1440:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,1936]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bls	.L1441
+	add	x0, x25, :lo12:.LANCHOR4
+	ldr	x0, [x0,72]
+	cmp	x0, xzr
+	mov	w0, 256
+	csel	w28, w28, w0, ne
+.L1441:
+	cmp	w28, 256
+	beq	.L1465
+	cmn	w28, #1
+	bne	.L1445
+.L1465:
+	str	w28, [x26,x27]
+	b	.L1447
+.L1445:
+	str	wzr, [x26,x27]
+.L1447:
+	ldr	w3, [x26,x27]
+	cmn	w3, #1
+	bne	.L1449
+	add	x2, x22, :lo12:.LANCHOR0
+	ldr	w1, [x21,4]
+	ldr	x0, [x29,128]
+	ldrb	w2, [x2,1936]
+	bl	printk
+	ldr	x1, [x21,16]
+	cbz	x1, .L1449
+	mov	w2, 4
+	ldr	x0, [x29,120]
+	mov	w3, w2
+	bl	rknand_print_hex
+.L1449:
+	cbz	w20, .L1451
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,1936]
+	add	w0, w0, w0, lsl 1
+	cmp	w23, w0, lsr 2
+	bls	.L1452
+	add	x25, x25, :lo12:.LANCHOR4
+	ldr	x0, [x25,72]
+	cmp	x0, xzr
+	mov	w0, 256
+	csel	w23, w23, w0, ne
+.L1452:
+	add	w0, w24, 1
+	mov	w1, 56
+	cmp	w23, 256
+	umull	x0, w0, w1
+	beq	.L1466
+	cmn	w23, #1
+	bne	.L1453
+.L1466:
+	str	w23, [x26,x0]
+	b	.L1451
+.L1453:
+	str	wzr, [x26,x0]
+.L1451:
+	ldr	w0, [x29,152]
+	add	w24, w24, w20
+	cbz	w0, .L1421
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L1421
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L1421:
+	add	w24, w24, 1
+	b	.L1418
+.L1508:
+	mov	w0, 0
+	b	.L1506
+.L1431:
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	cbz	w20, .L1428
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	bl	FlashReadDpDataOutCmd
+	b	.L1428
+.L1506:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	FlashReadPages, .-FlashReadPages
+	.align	2
+	.global	FlashLoadFactorBbt
+	.type	FlashLoadFactorBbt, %function
+FlashLoadFactorBbt:
+	stp	x29, x30, [sp, -192]!
+	mov	w2, 16
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	add	x0, x22, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR4
+	mov	w27, -1
+	ldrh	w1, [x0,180]
+	add	x19, x23, :lo12:.LANCHOR4
+	ldrh	w21, [x0,182]
+	add	x0, x19, 144
+	mov	w28, 0
+	adrp	x26, .LC99
+	add	x26, x26, :lo12:.LC99
+	mul	w21, w1, w21
+	mov	w1, 0
+	uxth	w21, w21
+	bl	ftl_memset
+	add	w25, w21, w27
+	ldr	x0, [x19,112]
+	str	x0, [x29,152]
+	mov	w19, w28
+	sub	w0, w21, #12
+	str	xzr, [x29,144]
+	uxth	w25, w25
+	str	w0, [x29,124]
+.L1511:
+	add	x1, x22, :lo12:.LANCHOR0
+	ldrb	w1, [x1,1845]
+	cmp	w1, w19
+	bls	.L1521
+	mul	w3, w19, w21
+	mov	w20, w25
+	mov	w4, 61664
+.L1512:
+	ldr	w0, [x29,124]
+	cmp	w20, w0
+	ble	.L1514
+	add	w1, w3, w20
+	add	x0, x29, 136
+	lsl	w1, w1, 10
+	str	w1, [x29,140]
+	mov	w1, 1
+	str	x4, [x29,104]
+	mov	w2, w1
+	str	x3, [x29,112]
+	bl	FlashReadPages
+	ldr	w0, [x29,136]
+	ldr	x3, [x29,112]
+	cmn	w0, #1
+	ldr	x4, [x29,104]
+	beq	.L1513
+	add	x24, x23, :lo12:.LANCHOR4
+	ldr	x0, [x24,112]
+	ldrh	w0, [x0]
+	cmp	w0, w4
+	bne	.L1513
+	mov	x0, x26
+	mov	w1, w19
+	mov	w2, w20
+	add	w28, w28, 1
+	add	x24, x24, x19, sxtw 1
+	bl	printk
+	uxth	w28, w28
+	strh	w20, [x24,144]
+	b	.L1514
+.L1513:
+	sub	w20, w20, #1
+	uxth	w20, w20
+	b	.L1512
+.L1514:
+	add	x1, x22, :lo12:.LANCHOR0
+	add	w19, w19, 1
+	uxtb	w19, w19
+	ldrb	w1, [x1,1845]
+	cmp	w1, w28
+	csel	w27, w27, wzr, ne
+	b	.L1511
+.L1521:
+	mov	w0, w27
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 192
+	ret
+	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
+	.align	2
+	.global	FlashProgSlc2KPages
+	.type	FlashProgSlc2KPages, %function
+FlashProgSlc2KPages:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	mov	w23, w1
+	adrp	x1, .LANCHOR1+481
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	adrp	x22, .LANCHOR0
+	ldrb	w26, [x1,#:lo12:.LANCHOR1+481]
+	stp	x27, x28, [sp,80]
+	stp	x19, x20, [sp,16]
+	mov	w24, w2
+	mov	w27, w3
+	mov	x19, x0
+	mov	x21, x0
+	mov	w25, 0
+	add	x22, x22, :lo12:.LANCHOR0
+	mov	w28, -1
+.L1523:
+	cmp	w25, w23
+	beq	.L1552
+	mov	w1, w24
+	sub	w4, w23, w25
+	mov	x0, x21
+	add	x2, x29, 96
+	add	x3, x29, 100
+	bl	LogAddr2PhyAddr
+	ldr	w0, [x29,100]
+	ldrb	w1, [x22,1845]
+	cmp	w0, w1
+	bcc	.L1524
+	str	w28, [x21]
+	b	.L1525
+.L1524:
+	add	x0, x22, x0, uxtw
+	ldrb	w20, [x0,1848]
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	mov	w0, w20
+	bl	NandcFlashCs
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashProgFirstCmd
+	ldr	x3, [x21,8]
+	mov	w2, w26
+	ldr	x4, [x21,16]
+	mov	w1, 1
+	mov	w0, w20
+	bl	NandcXferData
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashProgSecondCmd
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashReadStatus
+	sbfx	x0, x0, 0, 1
+	str	w0, [x21]
+	mov	w0, w20
+	ldr	w1, [x29,96]
+	ldr	w2, [x22,12]
+	add	w1, w2, w1
+	bl	FlashProgFirstCmd
+	ldr	x0, [x21,8]
+	mov	w1, 1
+	mov	w2, w26
+	cmp	x0, xzr
+	add	x3, x0, 2048
+	ldr	x0, [x21,16]
+	csel	x3, x3, xzr, ne
+	add	x4, x0, 8
+	cmp	x0, xzr
+	csel	x4, x4, xzr, ne
+	mov	w0, w20
+	bl	NandcXferData
+	adrp	x0, .LANCHOR0
+	ldr	w1, [x29,96]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	w2, [x0,12]
+	mov	w0, w20
+	add	w1, w2, w1
+	bl	FlashProgSecondCmd
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashReadStatus
+	tbz	x0, 0, .L1528
+	str	w28, [x21]
+.L1528:
+	mov	w0, w20
+	bl	NandcFlashDeCs
+.L1525:
+	add	w25, w25, 1
+	add	x21, x21, 56
+	b	.L1523
+.L1552:
+	mov	w21, 0
+	cbz	w27, .L1550
+	adrp	x25, .LC103
+	adrp	x26, .LC102
+	adrp	x27, .LC101
+	add	x25, x25, :lo12:.LC103
+	add	x26, x26, :lo12:.LC102
+	add	x27, x27, :lo12:.LC101
+.L1551:
+	cmp	w21, w23
+	beq	.L1550
+	ldr	w0, [x19]
+	cmn	w0, #1
+	bne	.L1531
+	adrp	x0, .LC100
+	ldr	w1, [x19,4]
+	add	x0, x0, :lo12:.LC100
+	bl	printk
+	b	.L1532
+.L1531:
+	adrp	x20, .LANCHOR4
+	sub	w4, w23, w21
+	add	x22, x20, :lo12:.LANCHOR4
+	add	x3, x29, 100
+	mov	w1, w24
+	add	x2, x29, 96
+	mov	x0, x19
+	bl	LogAddr2PhyAddr
+	ldr	x0, [x22,120]
+	mov	x1, x19
+	mov	x2, 56
+	str	wzr, [x0]
+	ldr	x0, [x22,128]
+	str	wzr, [x0]
+	add	x0, x29, 104
+	bl	memcpy
+	ldr	x0, [x22,120]
+	mov	w1, 1
+	str	x0, [x29,112]
+	mov	w2, w24
+	ldr	x0, [x22,128]
+	str	x0, [x29,120]
+	add	x0, x29, 104
+	bl	FlashReadPages
+	ldr	w22, [x29,104]
+	cmn	w22, #1
+	bne	.L1533
+	ldr	w1, [x19,4]
+	mov	x0, x27
+	bl	printk
+	str	w22, [x19]
+.L1533:
+	ldr	x0, [x19,16]
+	cbz	x0, .L1534
+	ldr	w2, [x0]
+	add	x0, x20, :lo12:.LANCHOR4
+	ldr	x0, [x0,128]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1534
+	ldr	w1, [x19,4]
+	mov	x0, x26
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1534:
+	ldr	x0, [x19,8]
+	cbz	x0, .L1532
+	add	x20, x20, :lo12:.LANCHOR4
+	ldr	w2, [x0]
+	ldr	x0, [x20,120]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1532
+	ldr	w1, [x19,4]
+	mov	x0, x25
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1532:
+	add	w21, w21, 1
+	add	x19, x19, 56
+	b	.L1551
+.L1550:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	FlashProgSlc2KPages, .-FlashProgSlc2KPages
+	.align	2
+	.global	FtlLoadFactoryBbt
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
+	stp	x29, x30, [sp, -80]!
+	adrp	x0, .LANCHOR2
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR4
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x23, x24, [sp,48]
+	add	x19, x19, 160
+	adrp	x22, .LANCHOR0
+	ldr	x1, [x0,-64]
+	add	x21, x22, :lo12:.LANCHOR0
+	ldr	x24, [x0,2120]
+	add	x21, x21, 2104
+	str	x1, [x19,8]
+	mov	w23, 0
+	str	x24, [x19,16]
+	mov	w25, -1
+	mov	w26, 61664
+.L1554:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w1, [x0,1966]
+	cmp	w23, w1
+	bcs	.L1563
+	ldrh	w20, [x0,2014]
+	strh	w25, [x21,12]
+.L1556:
+	add	x0, x22, :lo12:.LANCHOR0
+	sub	w20, w20, #1
+	uxth	w20, w20
+	ldrh	w0, [x0,2014]
+	sub	w1, w0, #16
+	cmp	w20, w1
+	ble	.L1557
+	madd	w0, w23, w0, w20
+	mov	w1, 1
+	lsl	w0, w0, 10
+	mov	w2, w1
+	str	w0, [x19,4]
+	mov	x0, x19
+	bl	FlashReadPages
+	ldr	w0, [x19]
+	cmn	w0, #1
+	beq	.L1556
+	ldrh	w0, [x24]
+	cmp	w0, w26
+	bne	.L1556
+	strh	w20, [x21,12]
+.L1557:
+	add	w23, w23, 1
+	add	x21, x21, 2
+	b	.L1554
+.L1563:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	.align	2
+	.global	FtlGetLastWrittenPage
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
+	stp	x29, x30, [sp, -208]!
+	cmp	w1, 1
+	adrp	x3, .LANCHOR0
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x25, [sp,64]
+	mov	w23, w1
+	add	x3, x3, :lo12:.LANCHOR0
+	bne	.L1565
+	ldrh	w19, [x3,2020]
+	b	.L1566
+.L1565:
+	ldrh	w19, [x3,2018]
+.L1566:
+	sub	w19, w19, #1
+	lsl	w21, w0, 10
+	mov	w1, 1
+	mov	w2, w23
+	sxth	w19, w19
+	str	xzr, [x29,96]
+	orr	w0, w19, w21
+	str	w0, [x29,92]
+	add	x0, x29, 88
+	add	x24, x29, 144
+	str	x24, [x29,104]
+	bl	FlashReadPages
+	ldr	w0, [x29,144]
+	cmn	w0, #1
+	bne	.L1567
+	mov	w22, 0
+	mov	w25, 2
+.L1568:
+	cmp	w22, w19
+	bgt	.L1567
+	add	w3, w22, w19
+	mov	w1, 1
+	mov	w2, w23
+	sdiv	w20, w3, w25
+	sxth	w0, w20
+	orr	w0, w0, w21
+	str	w0, [x29,92]
+	add	x0, x29, 88
+	bl	FlashReadPages
+	ldr	w0, [x24]
+	cmn	w0, #1
+	bne	.L1569
+	ldr	w0, [x24,4]
+	cmn	w0, #1
+	bne	.L1569
+	ldr	w0, [x29,88]
+	cmn	w0, #1
+	beq	.L1569
+	sub	w19, w20, #1
+	sxth	w19, w19
+	b	.L1568
+.L1569:
+	add	w20, w20, 1
+	sxth	w22, w20
+	b	.L1568
+.L1567:
+	mov	w0, w19
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 208
+	ret
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.align	2
+	.global	FtlLoadBbt
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR4
+	adrp	x24, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	add	x0, x24, :lo12:.LANCHOR2
+	add	x19, x23, :lo12:.LANCHOR4
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	add	x19, x19, 160
+	adrp	x20, .LANCHOR0
+	ldr	x22, [x0,2120]
+	mov	w25, 61649
+	str	xzr, [x19,8]
+	str	x22, [x19,16]
+	bl	FtlBbtMemInit
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w21, [x0,2014]
+	sub	w21, w21, #1
+	uxth	w21, w21
+.L1576:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2014]
+	sub	w0, w0, #48
+	cmp	w21, w0
+	ble	.L1579
+	lsl	w0, w21, 10
+	mov	w1, 1
+	str	w0, [x19,4]
+	mov	w2, w1
+	mov	x0, x19
+	bl	FlashReadPages
+	ldr	w0, [x19]
+	cmn	w0, #1
+	bne	.L1577
+	ldr	w0, [x19,4]
+	mov	w1, 1
+	mov	w2, w1
+	add	w0, w0, 1
+	str	w0, [x19,4]
+	mov	x0, x19
+	bl	FlashReadPages
+.L1577:
+	ldr	w0, [x19]
+	cmn	w0, #1
+	beq	.L1578
+	ldrh	w0, [x22]
+	cmp	w0, w25
+	bne	.L1578
+	add	x1, x20, :lo12:.LANCHOR0
+	add	x0, x1, 2104
+	strh	w21, [x1,2104]
+	ldr	w1, [x22,4]
+	str	w1, [x0,8]
+	ldrh	w1, [x22,8]
+	strh	w1, [x0,4]
+	b	.L1579
+.L1578:
+	sub	w21, w21, #1
+	uxth	w21, w21
+	b	.L1576
+.L1579:
+	add	x21, x20, :lo12:.LANCHOR0
+	mov	w2, 65535
+	mov	w0, -1
+	ldrh	w1, [x21,2104]
+	cmp	w1, w2
+	beq	.L1581
+	ldrh	w1, [x21,2108]
+	cmp	w1, w2
+	beq	.L1583
+	add	x25, x23, :lo12:.LANCHOR4
+	lsl	w1, w1, 10
+	add	x0, x25, 160
+	str	w1, [x0,4]
+	mov	w1, 1
+	mov	w2, w1
+	bl	FlashReadPages
+	ldr	w0, [x25,160]
+	cmn	w0, #1
+	beq	.L1583
+	ldrh	w1, [x22]
+	mov	w0, 61649
+	cmp	w1, w0
+	bne	.L1583
+	ldr	w0, [x22,4]
+	ldr	w1, [x21,2112]
+	cmp	w0, w1
+	bls	.L1583
+	str	w0, [x21,2112]
+	ldrh	w1, [x21,2108]
+	ldrh	w0, [x22,8]
+	strh	w1, [x21,2104]
+	strh	w0, [x21,2108]
+.L1583:
+	add	x25, x20, :lo12:.LANCHOR0
+	mov	w1, 1
+	add	x21, x23, :lo12:.LANCHOR4
+	mov	w26, 61649
+	add	x21, x21, 160
+	ldrh	w0, [x25,2104]
+	bl	FtlGetLastWrittenPage
+	sxth	w19, w0
+	add	w0, w0, 1
+	strh	w0, [x25,2106]
+.L1585:
+	tbnz	w19, #31, .L1590
+	ldrh	w0, [x25,2104]
+	mov	w1, 1
+	mov	w2, w1
+	orr	w0, w19, w0, lsl 10
+	str	w0, [x21,4]
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x0, [x0,-64]
+	str	x0, [x21,8]
+	mov	x0, x21
+	bl	FlashReadPages
+	ldr	w0, [x21]
+	cmn	w0, #1
+	beq	.L1586
+	ldrh	w0, [x22]
+	cmp	w0, w26
+	bne	.L1586
+.L1590:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x22,10]
+	mov	w2, 65535
+	strh	w0, [x1,2110]
+	ldrh	w0, [x22,12]
+	cmp	w0, w2
+	bne	.L1587
+	b	.L1588
+.L1586:
+	sub	w19, w19, #1
+	sxth	w19, w19
+	b	.L1585
+.L1587:
+	ldr	w2, [x1,1940]
+	cmp	w0, w2
+	beq	.L1588
+	ldrh	w1, [x1,1954]
+	lsr	w1, w1, 2
+	cmp	w0, w1
+	bcs	.L1588
+	cmp	w2, w1
+	bcs	.L1588
+	bl	FtlSysBlkNumInit
+.L1588:
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	x19, 0
+	add	x21, x20, 2104
+	add	x23, x23, :lo12:.LANCHOR4
+.L1591:
+	ldrh	w0, [x20,1966]
+	mov	w1, w19
+	add	x19, x19, 1
+	cmp	w1, w0
+	bcs	.L1609
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x3, [x23,168]
+	ldrh	w2, [x0,2248]
+	add	x0, x21, x19, lsl 3
+	mul	w1, w1, w2
+	ldr	x0, [x0,24]
+	lsl	w2, w2, 2
+	add	x1, x3, x1, lsl 2
+	bl	ftl_memcpy
+	b	.L1591
+.L1609:
+	mov	w0, 0
+.L1581:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlLoadBbt, .-FtlLoadBbt
+	.align	2
+	.global	FtlScanSysBlk
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
+	stp	x29, x30, [sp, -128]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	add	x20, x19, :lo12:.LANCHOR0
+	adrp	x22, .LANCHOR2
+	add	x21, x22, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	strh	wzr, [x21,2320]
+	mov	x24, x22
+	ldr	w2, [x20,2048]
+	mov	w22, 65535
+	ldr	x0, [x21,2232]
+	lsl	w2, w2, 2
+	strh	wzr, [x20,2066]
+	bl	ftl_memset
+	ldr	w2, [x20,2048]
+	mov	w1, 0
+	ldr	x0, [x21,2176]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w2, [x20,2040]
+	mov	w1, 0
+	ldr	x0, [x21,2200]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldrh	w2, [x20,2040]
+	mov	w1, 0
+	ldr	x0, [x20,2072]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	add	x0, x21, 280
+	mov	w1, 255
+	mov	w2, 12
+	bl	ftl_memset
+	ldrh	w21, [x20,1952]
+.L1611:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x1,1954]
+	cmp	w0, w21
+	bls	.L1652
+	mov	x27, 0
+	ldrh	w5, [x1,1944]
+	ldrh	w4, [x1,2030]
+	mov	w20, w27
+	mov	x23, x1
+.L1653:
+	cmp	w5, w27, uxth
+	bls	.L1686
+	add	x0, x23, 1976
+	mov	w1, w21
+	str	x4, [x29,112]
+	str	x5, [x29,120]
+	ldrb	w0, [x0,x27]
+	bl	V2P_block
+	uxth	w28, w0
+	bl	FtlBbmIsBadBlock
+	ldr	x5, [x29,120]
+	ldr	x4, [x29,112]
+	cbnz	w0, .L1612
+	add	x2, x24, :lo12:.LANCHOR2
+	mov	w0, 56
+	lsl	w28, w28, 10
+	mov	w3, 4
+	umull	x0, w20, w0
+	ldr	x1, [x2,2056]
+	add	x1, x1, x0
+	str	w28, [x1,4]
+	ldr	x1, [x2,2056]
+	add	x0, x1, x0
+	ldr	x1, [x2,896]
+	ldr	x2, [x2,904]
+	str	x1, [x0,8]
+	mul	w1, w20, w4
+	add	w20, w20, 1
+	sdiv	w1, w1, w3
+	uxth	w20, w20
+	add	x1, x2, x1, sxtw 2
+	str	x1, [x0,16]
+.L1612:
+	add	x27, x27, 1
+	b	.L1653
+.L1686:
+	cbz	w20, .L1615
+	add	x0, x24, :lo12:.LANCHOR2
+	mov	w1, w20
+	mov	w2, 1
+	mov	x23, 0
+	mov	w27, -1
+	mov	w28, 61604
+	ldr	x0, [x0,2056]
+	bl	FlashReadPages
+.L1616:
+	cmp	w20, w23, uxth
+	bls	.L1615
+	mov	x0, 56
+	mul	x6, x23, x0
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x0, [x0,2056]
+	add	x1, x0, x6
+	ldr	w0, [x0,x6]
+	ldr	w5, [x1,4]
+	cmn	w0, #1
+	ldr	x26, [x1,16]
+	ubfx	x25, x5, 10, 16
+	bne	.L1618
+	mov	w7, 16
+.L1617:
+	add	x8, x24, :lo12:.LANCHOR2
+	str	x7, [x29,104]
+	str	x8, [x29,112]
+	str	x6, [x29,120]
+	ldr	x0, [x8,2056]
+	add	x0, x0, x6
+	ldr	w1, [x0,4]
+	add	w1, w1, 1
+	str	w1, [x0,4]
+	mov	w1, 1
+	ldr	x0, [x8,2056]
+	mov	w2, w1
+	add	x0, x0, x6
+	bl	FlashReadPages
+	ldrh	w0, [x26]
+	ldr	x8, [x29,112]
+	cmp	w0, w22
+	ldr	x6, [x29,120]
+	ldr	x7, [x29,104]
+	ldr	x0, [x8,2056]
+	bne	.L1619
+	str	w27, [x0,x6]
+	b	.L1618
+.L1619:
+	ldr	w0, [x0,x6]
+	cmn	w0, #1
+	bne	.L1618
+	sub	w7, w7, #1
+	uxth	w7, w7
+	cbnz	w7, .L1617
+.L1618:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x1, [x0,2056]
+	ldr	w1, [x1,x6]
+	cmn	w1, #1
+	beq	.L1621
+	ldr	w0, [x0,196]
+	cmn	w0, #1
+	beq	.L1622
+	ldr	w1, [x26,4]
+	cmp	w0, w1
+	bhi	.L1623
+.L1622:
+	ldr	w0, [x26,4]
+	cmn	w0, #1
+	beq	.L1623
+	add	x1, x24, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	str	w0, [x1,196]
+.L1623:
+	ldrh	w0, [x26]
+	cmp	w0, w28
+	beq	.L1625
+	bhi	.L1626
+	mov	w1, 61574
+	cmp	w0, w1
+	bne	.L1624
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x7, x24, :lo12:.LANCHOR2
+	ldrh	w6, [x0,2040]
+	ldrh	w0, [x0,2066]
+	sub	w2, w6, #1
+	ldr	x7, [x7,2200]
+	sxth	x1, w2
+	sub	w2, w2, w0
+	b	.L1639
+.L1626:
+	mov	w1, 61634
+	cmp	w0, w1
+	beq	.L1628
+	cmp	w0, w22
+	bne	.L1624
+	mov	w0, w25
+	b	.L1685
+.L1628:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x7, x24, :lo12:.LANCHOR2
+	ldr	w6, [x0,2048]
+	ldrh	w0, [x7,2320]
+	ldr	x7, [x7,2232]
+	uxth	w2, w6
+	sub	w1, w2, #1
+	sub	w2, w2, w0
+	sub	w2, w2, #1
+	sxth	x1, w1
+	sxth	w2, w2
+.L1630:
+	cmp	w1, w2
+	ble	.L1687
+	sbfiz	x8, x1, 2, 32
+	ldr	w11, [x26,4]
+	sxth	x9, w1
+	ldr	w10, [x7,x8]
+	cmp	w11, w10
+	bls	.L1631
+	ldr	w2, [x7]
+	cbnz	w2, .L1632
+	cmp	w0, w6
+	beq	.L1632
+	add	x2, x24, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	strh	w0, [x2,2320]
+.L1632:
+	mov	w0, 0
+.L1633:
+	cmp	w0, w1
+	beq	.L1688
+	add	x6, x24, :lo12:.LANCHOR2
+	sxtw	x2, w0
+	lsl	x7, x2, 2
+	lsl	x2, x2, 1
+	add	w0, w0, 1
+	ldr	x10, [x6,2232]
+	sxth	w0, w0
+	add	x11, x10, x7
+	ldr	w11, [x11,4]
+	str	w11, [x10,x7]
+	ldr	x6, [x6,2176]
+	add	x7, x6, x2
+	ldrh	w7, [x7,2]
+	strh	w7, [x6,x2]
+	b	.L1633
+.L1688:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	w6, [x26,4]
+	ldr	x2, [x0,2232]
+	str	w6, [x2,x8]
+	ldr	x2, [x0,2176]
+	strh	w25, [x2,x9,lsl 1]
+	tbz	w1, #31, .L1635
+	b	.L1624
+.L1631:
+	sub	w1, w1, #1
+	sxth	x1, w1
+	b	.L1630
+.L1687:
+	tbz	w1, #31, .L1668
+	b	.L1624
+.L1635:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2320]
+	ldr	w2, [x2,2048]
+	sub	w2, w2, w0
+	sub	w2, w2, #1
+	cmp	w1, w2, sxth
+	bgt	.L1624
+.L1668:
+	add	x2, x24, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	ldr	w4, [x26,4]
+	strh	w0, [x2,2320]
+	ldr	x0, [x2,2232]
+	str	w4, [x0,x1,lsl 2]
+	ldr	x0, [x2,2176]
+	b	.L1684
+.L1645:
+	sbfiz	x8, x1, 2, 32
+	ldr	w11, [x26,4]
+	sxth	x9, w1
+	ldr	w10, [x7,x8]
+	cmp	w11, w10
+	bhi	.L1689
+	sub	w1, w1, #1
+	sxth	x1, w1
+.L1639:
+	cmp	w1, w2
+	bgt	.L1645
+	b	.L1644
+.L1689:
+	ldr	w2, [x7]
+	cbnz	w2, .L1641
+	cmp	w0, w6
+	beq	.L1641
+	add	x2, x19, :lo12:.LANCHOR0
+	add	w0, w0, 1
+	strh	w0, [x2,2066]
+.L1641:
+	mov	w0, 0
+.L1642:
+	cmp	w0, w1
+	beq	.L1690
+	add	x2, x24, :lo12:.LANCHOR2
+	ldr	x7, [x2,2200]
+	sxtw	x2, w0
+	lsl	x6, x2, 2
+	lsl	x2, x2, 1
+	add	x10, x7, x6
+	add	w0, w0, 1
+	sxth	w0, w0
+	ldr	w10, [x10,4]
+	str	w10, [x7,x6]
+	add	x6, x19, :lo12:.LANCHOR0
+	ldr	x6, [x6,2072]
+	add	x7, x6, x2
+	ldrh	w7, [x7,2]
+	strh	w7, [x6,x2]
+	b	.L1642
+.L1690:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	w2, [x26,4]
+	ldr	x0, [x0,2200]
+	str	w2, [x0,x8]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2072]
+	strh	w25, [x0,x9,lsl 1]
+.L1644:
+	tbnz	w1, #31, .L1624
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x2,2040]
+	ldrh	w6, [x2,2066]
+	sub	w0, w0, #1
+	sub	w0, w0, w6
+	cmp	w1, w0, sxth
+	bgt	.L1624
+	add	x0, x24, :lo12:.LANCHOR2
+	add	w6, w6, 1
+	ldr	w4, [x26,4]
+	strh	w6, [x2,2066]
+	ldr	x0, [x0,2200]
+	str	w4, [x0,x1,lsl 2]
+	ldr	x0, [x2,2072]
+.L1684:
+	strh	w25, [x0,x1,lsl 1]
+	b	.L1624
+.L1625:
+	add	x0, x24, :lo12:.LANCHOR2
+	add	x1, x0, 280
+	ldrh	w2, [x0,280]
+	cmp	w2, w22
+	bne	.L1646
+	strh	w25, [x0,280]
+	ldr	w0, [x26,4]
+	str	w0, [x1,8]
+	b	.L1624
+.L1646:
+	ldrh	w0, [x1,4]
+	cmp	w0, w22
+	beq	.L1647
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+.L1647:
+	add	x1, x24, :lo12:.LANCHOR2
+	ldr	w2, [x26,4]
+	add	x0, x1, 280
+	ldr	w6, [x0,8]
+	cmp	w6, w2
+	bcs	.L1648
+	ldrh	w2, [x1,280]
+	strh	w2, [x0,4]
+	strh	w25, [x1,280]
+	ldr	w1, [x26,4]
+	str	w1, [x0,8]
+	b	.L1624
+.L1648:
+	strh	w25, [x0,4]
+	b	.L1624
+.L1621:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,120]
+	mov	w0, w25
+	cbz	w1, .L1649
+.L1685:
+	mov	w1, 0
+.L1649:
+	bl	FtlFreeSysBlkQueueIn
+.L1624:
+	add	x23, x23, 1
+	b	.L1616
+.L1615:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L1611
+.L1652:
+	add	x4, x24, :lo12:.LANCHOR2
+	ldr	x2, [x4,2176]
+	ldrh	w0, [x2]
+	cbz	w0, .L1654
+.L1657:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x2, [x1,2072]
+	ldrh	w0, [x2]
+	cbz	w0, .L1655
+	b	.L1678
+.L1654:
+	ldrh	w4, [x4,2320]
+	cbz	w4, .L1657
+	ldr	w1, [x1,2048]
+.L1658:
+	cmp	w0, w1
+	bcs	.L1657
+	ldrh	w4, [x2,w0,sxtw 1]
+	cbz	w4, .L1659
+	mov	w7, w0
+.L1660:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	w1, [x1,2048]
+	cmp	w0, w1
+	bcs	.L1657
+	add	x2, x24, :lo12:.LANCHOR2
+	sxtw	x6, w0
+	sub	w1, w0, w7
+	lsl	x4, x6, 1
+	add	w0, w0, 1
+	ldr	x5, [x2,2176]
+	sxtw	x1, w1
+	sxth	w0, w0
+	ldrh	w8, [x5,x4]
+	strh	w8, [x5,x1,lsl 1]
+	ldr	x5, [x2,2232]
+	ldr	w6, [x5,x6,lsl 2]
+	str	w6, [x5,x1,lsl 2]
+	ldr	x1, [x2,2176]
+	strh	wzr, [x1,x4]
+	b	.L1660
+.L1659:
+	add	w0, w0, 1
+	sxth	w0, w0
+	b	.L1658
+.L1655:
+	ldrh	w4, [x1,2066]
+	cbz	w4, .L1678
+	ldrh	w1, [x1,2040]
+.L1663:
+	cmp	w0, w1
+	mov	w7, w0
+	bge	.L1678
+	ldrh	w4, [x2,w0,sxtw 1]
+	cbz	w4, .L1664
+.L1665:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x2,2040]
+	cmp	w0, w1
+	bge	.L1678
+	sxtw	x6, w0
+	sub	w1, w0, w7
+	ldr	x5, [x2,2072]
+	lsl	x4, x6, 1
+	sxtw	x1, w1
+	add	w0, w0, 1
+	ldrh	w8, [x5,x4]
+	sxth	w0, w0
+	strh	w8, [x5,x1,lsl 1]
+	add	x5, x24, :lo12:.LANCHOR2
+	ldr	x5, [x5,2200]
+	ldr	w6, [x5,x6,lsl 2]
+	str	w6, [x5,x1,lsl 2]
+	ldr	x1, [x2,2072]
+	strh	wzr, [x1,x4]
+	b	.L1665
+.L1664:
+	add	w0, w0, 1
+	sxth	w0, w0
+	b	.L1663
+.L1678:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FtlScanSysBlk, .-FtlScanSysBlk
+	.align	2
+	.global	FtlLoadSysInfo
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	stp	x29, x30, [sp, -80]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	adrp	x20, .LANCHOR2
+	adrp	x23, .LANCHOR4
+	stp	x21, x22, [sp,32]
+	add	x22, x20, :lo12:.LANCHOR2
+	add	x21, x23, :lo12:.LANCHOR4
+	str	x25, [sp,64]
+	add	x21, x21, 160
+	adrp	x19, .LANCHOR0
+	add	x25, x22, 280
+	ldr	x0, [x22,2120]
+	str	x0, [x21,16]
+	add	x0, x19, :lo12:.LANCHOR0
+	str	xzr, [x21,8]
+	ldrh	w2, [x0,1952]
+	ldr	x0, [x22,-40]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w0, [x22,280]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L1692
+.L1700:
+	mov	w19, -1
+	b	.L1693
+.L1692:
+	mov	w1, 1
+	bl	FtlGetLastWrittenPage
+	sxth	w24, w0
+	add	w0, w0, 1
+	strh	w0, [x25,2]
+	mov	w25, 61604
+.L1694:
+	tbnz	w24, #31, .L1699
+	ldrh	w0, [x22,280]
+	mov	w1, 1
+	mov	w2, w1
+	orr	w0, w24, w0, lsl 10
+	str	w0, [x21,4]
+	ldr	x0, [x22,-64]
+	str	x0, [x21,8]
+	mov	x0, x21
+	bl	FlashReadPages
+	ldr	w0, [x21]
+	cmn	w0, #1
+	beq	.L1695
+	ldr	x0, [x22,-64]
+	ldr	w1, [x0]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	bne	.L1695
+	ldr	x0, [x22,2120]
+	ldrh	w0, [x0]
+	cmp	w0, w25
+	bne	.L1695
+.L1699:
+	add	x21, x23, :lo12:.LANCHOR4
+	add	x24, x20, :lo12:.LANCHOR2
+	add	x21, x21, 160
+	add	x22, x19, :lo12:.LANCHOR0
+	mov	w2, 48
+	add	x0, x24, 224
+	ldr	x1, [x21,8]
+	bl	ftl_memcpy
+	ldr	x1, [x21,8]
+	ldrh	w2, [x22,1952]
+	ldr	x0, [x24,-40]
+	add	x1, x1, 48
+	lsl	w2, w2, 1
+	bl	ftl_memcpy
+	ldrh	w2, [x22,1952]
+	ldr	x3, [x21,8]
+	ldr	x0, [x19,#:lo12:.LANCHOR0]
+	uxth	x1, w2
+	lsr	w2, w2, 3
+	add	x1, x1, 24
+	add	w2, w2, 4
+	lsr	x1, x1, 1
+	add	x1, x3, x1, lsl 2
+	bl	ftl_memcpy
+	ldrh	w0, [x22,2064]
+	cbz	w0, .L1697
+	ldrh	w0, [x22,1952]
+	ldr	x3, [x21,8]
+	lsr	w1, w0, 3
+	ldrh	w2, [x22,2056]
+	add	w1, w1, w0, lsl 1
+	ldr	x0, [x24,2224]
+	add	w1, w1, 52
+	lsl	w2, w2, 2
+	and	x1, x1, 65532
+	add	x1, x3, x1
+	bl	ftl_memcpy
+	b	.L1697
+.L1695:
+	sub	w24, w24, #1
+	sxth	w24, w24
+	b	.L1694
+.L1697:
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w2, 19539
+	movk	w2, 0x4654, lsl 16
+	ldr	w3, [x0,224]
+	cmp	w3, w2
+	bne	.L1700
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrb	w4, [x0,234]
+	ldrh	w5, [x0,232]
+	strh	w5, [x0,286]
+	ldrh	w3, [x2,1966]
+	cmp	w4, w3
+	bne	.L1700
+	ldrh	w4, [x2,2018]
+	add	x23, x23, :lo12:.LANCHOR4
+	ldrh	w3, [x2,2024]
+	strh	wzr, [x0,298]
+	mul	w4, w4, w5
+	str	w4, [x2,2096]
+	str	w5, [x23,216]
+	mul	w4, w4, w3
+	str	w4, [x2,2060]
+	ldrh	w3, [x2,2110]
+	ldr	w4, [x2,1956]
+	ldrh	w2, [x2,1944]
+	sub	w3, w4, w3
+	ldrh	w4, [x0,238]
+	sub	w3, w3, w5
+	strb	wzr, [x0,302]
+	strb	wzr, [x0,304]
+	udiv	w2, w3, w2
+	strh	w2, [x0,272]
+	adrp	x2, .LANCHOR2
+	strh	w4, [x2,#:lo12:.LANCHOR2]
+	ldrh	w2, [x0,240]
+	lsr	w3, w2, 6
+	strh	w3, [x0,2]
+	mov	w3, -1
+	strh	w3, [x0,296]
+	ldrh	w3, [x0,242]
+	and	w2, w2, 63
+	strh	w3, [x0,48]
+	ldrh	w3, [x0,244]
+	strb	w2, [x0,6]
+	lsr	w5, w3, 6
+	and	w3, w3, 63
+	strb	w3, [x0,54]
+	ldrb	w3, [x0,236]
+	strb	w3, [x0,56]
+	ldrh	w3, [x0,246]
+	strh	w3, [x0,96]
+	ldrh	w3, [x0,248]
+	ldrb	w2, [x0,235]
+	strh	w5, [x0,50]
+	lsr	w5, w3, 6
+	and	w3, w3, 63
+	strb	w2, [x0,8]
+	strb	w3, [x0,102]
+	strh	w5, [x0,98]
+	ldrb	w3, [x0,237]
+	strb	w3, [x0,104]
+	ldr	w2, [x0,256]
+	str	w2, [x0,204]
+	ldr	w1, [x0,264]
+	ldr	w2, [x0,196]
+	str	wzr, [x0,184]
+	str	wzr, [x0,172]
+	cmp	w1, w2
+	str	wzr, [x0,164]
+	str	wzr, [x0,180]
+	str	wzr, [x0,208]
+	str	wzr, [x0,216]
+	str	wzr, [x0,176]
+	bls	.L1701
+	str	w1, [x0,196]
+.L1701:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w1, [x0,260]
+	ldr	w2, [x0,200]
+	cmp	w1, w2
+	bls	.L1702
+	str	w1, [x0,200]
+.L1702:
+	mov	w0, 65535
+	cmp	w4, w0
+	beq	.L1703
+	add	x0, x20, :lo12:.LANCHOR2
+	bl	make_superblock
+.L1703:
+	add	x1, x20, :lo12:.LANCHOR2
+	add	x0, x1, 48
+	ldrh	w2, [x1,48]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L1704
+	bl	make_superblock
+.L1704:
+	add	x1, x20, :lo12:.LANCHOR2
+	add	x0, x1, 96
+	ldrh	w2, [x1,96]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L1705
+	bl	make_superblock
+.L1705:
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w1, 65535
+	add	x0, x20, 296
+	mov	w19, 0
+	ldrh	w2, [x20,296]
+	cmp	w2, w1
+	beq	.L1693
+	bl	make_superblock
+.L1693:
+	mov	w0, w19
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	2
+	.global	FtlGcScanTempBlk
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR1
+	mov	x19, x0
+	add	x0, x20, :lo12:.LANCHOR1
+	str	w1, [x29,136]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	str	x20, [x29,128]
+	ldrh	w28, [x0,3008]
+	mov	w0, 65535
+	cmp	w28, w0
+	beq	.L1732
+	cbnz	w28, .L1711
+	b	.L1712
+.L1732:
+	mov	w28, 0
+.L1711:
+	adrp	x0, .LANCHOR0+2018
+	ldr	w1, [x29,136]
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+2018]
+	cmp	w1, w0
+	bne	.L1713
+.L1712:
+	bl	FtlGcPageVarInit
+.L1713:
+	mov	w0, -1
+	str	w0, [x29,140]
+	adrp	x0, .LC104
+	mov	w21, 0
+	add	x0, x0, :lo12:.LC104
+	mov	w22, 65535
+	adrp	x23, .LANCHOR0
+	str	x0, [x29,120]
+.L1726:
+	ldrh	w0, [x19]
+	strb	wzr, [x19,8]
+	cmp	w0, w22
+	beq	.L1733
+.L1715:
+.L1729:
+	add	x0, x23, :lo12:.LANCHOR0
+	mov	x2, x19
+	mov	w20, 0
+	mov	w9, 4
+	ldrh	w5, [x0,1944]
+	ldrh	w8, [x0,2030]
+	add	x5, x19, x5, lsl 1
+.L1716:
+	cmp	x2, x5
+	beq	.L1741
+	ldrh	w1, [x2,16]
+	cmp	w1, w22
+	beq	.L1717
+	adrp	x3, .LANCHOR2
+	mov	w0, 56
+	add	x6, x3, :lo12:.LANCHOR2
+	orr	w1, w28, w1, lsl 10
+	umull	x0, w20, w0
+	add	w4, w20, 1
+	ldr	x7, [x6,2056]
+	add	x7, x7, x0
+	str	w1, [x7,4]
+	ldr	x1, [x6,2056]
+	ldr	x6, [x6,904]
+	add	x0, x1, x0
+	mul	w1, w20, w8
+	uxth	w20, w4
+	str	xzr, [x0,8]
+	sdiv	w1, w1, w9
+	add	x1, x6, x1, sxtw 2
+	str	x1, [x0,16]
+.L1717:
+	add	x2, x2, 2
+	b	.L1716
+.L1741:
+	adrp	x0, .LANCHOR2
+	mov	w1, w20
+	add	x0, x0, :lo12:.LANCHOR2
+	mov	w2, 0
+	mov	x24, 0
+	adrp	x25, .LANCHOR2
+	ldr	x0, [x0,2056]
+	bl	FlashReadPages
+.L1719:
+	cmp	w20, w24, uxth
+	bls	.L1742
+	add	x27, x25, :lo12:.LANCHOR2
+	mov	x0, 56
+	mul	x26, x24, x0
+	ldr	x10, [x27,2056]
+	str	x10, [x29,96]
+	add	x1, x10, x26
+	str	x1, [x29,104]
+	ldr	w2, [x1,4]
+	str	x2, [x29,112]
+	lsr	x0, x2, 10
+	bl	P2V_plane
+	uxth	w7, w0
+	ldr	x10, [x29,96]
+	ldr	x2, [x29,112]
+	ldr	w0, [x10,x26]
+	cbnz	w0, .L1720
+	ldr	x1, [x29,104]
+	add	x24, x24, 1
+	ldr	x6, [x1,16]
+	ldrh	w0, [x6]
+	cmp	w0, w22
+	bne	.L1721
+	mov	w0, 1
+	str	w0, [x27,2344]
+	b	.L1714
+.L1721:
+	mov	w1, w2
+	ldr	w0, [x6,12]
+	ldr	w2, [x6,8]
+	bl	FtlGcUpdatePage
+	b	.L1719
+.L1720:
+	ldr	x0, [x29,120]
+	ldrh	w1, [x19]
+	bl	printk
+	ldr	w0, [x27,160]
+	cbnz	w0, .L1722
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L1723
+.L1722:
+	add	x0, x25, :lo12:.LANCHOR2
+	ldrh	w1, [x19]
+	ldr	x0, [x0,-80]
+	ldrh	w0, [x0,x1,lsl 1]
+	cmp	w0, 119
+	bls	.L1724
+.L1723:
+	add	x0, x25, :lo12:.LANCHOR2
+	ldr	x0, [x0,2056]
+	ldr	w0, [x0,x26]
+	cmn	w0, #1
+	bne	.L1725
+.L1724:
+	add	x0, x25, :lo12:.LANCHOR2
+	ldr	x0, [x0,2056]
+	add	x6, x0, x26
+	ldr	w0, [x6,4]
+	str	w0, [x29,140]
+.L1725:
+	add	x5, x25, :lo12:.LANCHOR2
+	ldrh	w1, [x19]
+	mov	w28, 0
+	ldr	x0, [x5,-40]
+	strh	wzr, [x0,x1,lsl 1]
+	ldrh	w0, [x19]
+	bl	INSERT_FREE_LIST
+	mov	w0, -1
+	strh	w0, [x19]
+	bl	FtlGcPageVarInit
+	b	.L1726
+.L1742:
+	ldr	w0, [x29,136]
+	add	w21, w21, 1
+	add	w3, w28, 1
+	cmp	w21, w0
+	uxth	w28, w3
+	bcs	.L1728
+.L1730:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2018]
+	cmp	w0, w28
+	bhi	.L1729
+	b	.L1733
+.L1728:
+	ldr	x0, [x29,128]
+	add	x1, x0, :lo12:.LANCHOR1
+	ldrh	w0, [x1,3008]
+	cmp	w0, w22
+	beq	.L1730
+	add	w0, w0, w21
+	strh	w0, [x1,3008]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2018]
+	cmp	w0, w28
+	bls	.L1730
+	b	.L1731
+.L1733:
+	mov	w7, 0
+.L1714:
+	ldr	x0, [x29,128]
+	mov	w1, w28
+	strh	w28, [x19,2]
+	mov	w2, w7
+	add	x20, x0, :lo12:.LANCHOR1
+	mov	w0, -1
+	strb	w7, [x19,6]
+	strh	w0, [x20,3008]
+	mov	x0, x19
+	bl	ftl_sb_update_avl_pages
+.L1731:
+	ldr	w0, [x29,140]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	2
+	.global	FlashProgPages
+	.type	FlashProgPages, %function
+FlashProgPages:
+	stp	x29, x30, [sp, -192]!
+	adrp	x6, .LANCHOR1+481
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	ldrb	w6, [x6,#:lo12:.LANCHOR1+481]
+	add	x4, x21, :lo12:.LANCHOR0
+	str	w3, [x29,120]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	str	w6, [x29,124]
+	mov	x19, x0
+	ldr	x5, [x4,744]
+	mov	w25, w1
+	ldrb	w4, [x4,8]
+	mov	w23, w2
+	mov	w22, 0
+	ldrb	w5, [x5,19]
+	cbz	w4, .L1744
+	bl	FlashProgSlc2KPages
+	b	.L1745
+.L1744:
+	sub	w0, w5, #1
+	mov	w27, 56
+	mov	x28, 24
+	str	w0, [x29,116]
+.L1796:
+	cmp	w22, w25
+	bcs	.L1797
+	umull	x20, w22, w27
+	sub	w4, w25, w22
+	add	x2, x29, 128
+	add	x26, x19, x20
+	mov	w1, w23
+	mov	x0, x26
+	add	x3, x29, 132
+	bl	LogAddr2PhyAddr
+	mov	w24, w0
+	add	x2, x21, :lo12:.LANCHOR0
+	ldr	w0, [x29,132]
+	ldrb	w4, [x2,1845]
+	cmp	w0, w4
+	bcc	.L1746
+	mov	w0, -1
+	str	w0, [x19,x20]
+	b	.L1747
+.L1746:
+	ldrb	w1, [x2,1937]
+	add	x3, x2, 1652
+	cmp	w1, wzr
+	uxtw	x1, w0
+	csel	w24, w24, wzr, ne
+	madd	x0, x1, x28, x3
+	ldr	x0, [x0,8]
+	cbz	x0, .L1749
+	cmp	w4, 1
+	bne	.L1750
+	ldr	x0, [x2,128]
+	bl	NandcIqrWaitFlashReady
+.L1750:
+	ldrb	w0, [x29,132]
+	bl	FlashWaitCmdDone
+.L1749:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w2, [x29,132]
+	add	x0, x0, 1652
+	ldr	w1, [x29,128]
+	madd	x0, x2, x28, x0
+	str	x26, [x0,8]
+	str	xzr, [x0,16]
+	str	w1, [x0,4]
+	cbz	w24, .L1751
+	add	w1, w22, 1
+	umull	x1, w1, w27
+	add	x1, x19, x1
+	str	x1, [x0,16]
+.L1751:
+	add	x1, x21, :lo12:.LANCHOR0
+	add	x0, x1, x2
+	madd	x2, x2, x28, x1
+	ldrb	w20, [x0,1848]
+	ldrb	w0, [x1,1845]
+	strb	w20, [x2,1652]
+	cmp	w0, 1
+	bne	.L1752
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	b	.L1753
+.L1752:
+	mov	w0, w20
+	str	x1, [x29,104]
+	bl	NandcFlashCs
+	ldr	x1, [x29,104]
+	ldr	w0, [x29,132]
+	add	x1, x1, 708
+	ldr	w0, [x1,x0,lsl 2]
+	ldr	w1, [x29,128]
+	cmp	w0, wzr
+	mov	w0, w20
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	mov	w0, w20
+	bl	NandcFlashDeCs
+.L1753:
+	ldr	w0, [x29,116]
+	cmp	w0, 6
+	bhi	.L1754
+	add	x2, x21, :lo12:.LANCHOR0
+	add	x0, x2, x20, sxtw
+	ldrb	w0, [x0,1616]
+	cbz	w0, .L1754
+	ldrb	w1, [x2,761]
+	mov	w0, w20
+	add	x2, x2, 764
+	mov	w3, 0
+	bl	HynixSetRRPara
+.L1754:
+	mov	w0, w20
+	bl	NandcFlashCs
+	cmp	w23, 1
+	bne	.L1755
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L1755
+	mov	w0, w20
+	bl	flash_enter_slc_mode
+	b	.L1756
+.L1755:
+	mov	w0, w20
+	bl	flash_exit_slc_mode
+.L1756:
+	ldr	w1, [x29,128]
+	mov	w0, w20
+	bl	FlashProgFirstCmd
+	ldrb	w2, [x29,124]
+	mov	w0, w20
+	ldr	x3, [x26,8]
+	mov	w1, 1
+	ldr	x4, [x26,16]
+	bl	NandcXferData
+	cbz	w24, .L1757
+	ldr	w1, [x29,128]
+	mov	w0, w20
+	add	x26, x21, :lo12:.LANCHOR0
+	bl	FlashProgDpFirstCmd
+	ldr	w1, [x29,132]
+	add	x0, x26, 708
+	ldr	w0, [x0,x1,lsl 2]
+	ldr	w1, [x29,128]
+	cmp	w0, wzr
+	mov	w0, w20
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	ldr	w2, [x26,12]
+	mov	w0, w20
+	ldr	w1, [x29,128]
+	add	w1, w2, w1
+	bl	FlashProgDpSecondCmd
+	add	w4, w22, 1
+	ldrb	w2, [x29,124]
+	mov	w0, w20
+	mov	w1, 1
+	umull	x4, w4, w27
+	add	x4, x19, x4
+	ldr	x3, [x4,8]
+	ldr	x4, [x4,16]
+	bl	NandcXferData
+.L1757:
+	ldr	w1, [x29,128]
+	mov	w0, w20
+	add	w22, w22, w24
+	bl	FlashProgSecondCmd
+	mov	w0, w20
+	bl	NandcFlashDeCs
+.L1747:
+	add	w22, w22, 1
+	b	.L1796
+.L1797:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	x20, 0
+	add	x22, x21, 1652
+	mov	x24, 24
+	ldr	x0, [x21,128]
+	bl	NandcIqrWaitFlashReady
+.L1759:
+	ldrb	w0, [x21,1845]
+	cmp	w0, w20
+	bls	.L1798
+	mov	w0, w20
+	bl	FlashWaitCmdDone
+	cmp	w23, 1
+	bne	.L1760
+	ldrb	w0, [x21,120]
+	cbz	w0, .L1760
+	mul	x0, x20, x24
+	ldrb	w0, [x0,x22]
+	bl	flash_exit_slc_mode
+.L1760:
+	add	x20, x20, 1
+	b	.L1759
+.L1798:
+	ldr	w0, [x29,120]
+	cbnz	w0, .L1762
+.L1770:
+	mov	w0, 0
+	b	.L1745
+.L1762:
+	adrp	x24, .LC103
+	adrp	x26, .LC102
+	adrp	x27, .LC101
+	mov	w21, 0
+	add	x24, x24, :lo12:.LC103
+	add	x26, x26, :lo12:.LC102
+	add	x27, x27, :lo12:.LC101
+.L1763:
+	cmp	w21, w25
+	beq	.L1770
+	ldr	w0, [x19]
+	cmn	w0, #1
+	bne	.L1764
+	adrp	x0, .LC100
+	ldr	w1, [x19,4]
+	add	x0, x0, :lo12:.LC100
+	bl	printk
+	b	.L1765
+.L1764:
+	adrp	x20, .LANCHOR4
+	sub	w4, w25, w21
+	add	x22, x20, :lo12:.LANCHOR4
+	add	x3, x29, 132
+	mov	w1, w23
+	add	x2, x29, 128
+	mov	x0, x19
+	bl	LogAddr2PhyAddr
+	ldr	x0, [x22,120]
+	mov	x1, x19
+	mov	x2, 56
+	str	wzr, [x0]
+	ldr	x0, [x22,128]
+	str	wzr, [x0]
+	add	x0, x29, 136
+	bl	memcpy
+	ldr	x0, [x22,120]
+	mov	w1, 1
+	str	x0, [x29,144]
+	mov	w2, w23
+	ldr	x0, [x22,128]
+	str	x0, [x29,152]
+	add	x0, x29, 136
+	bl	FlashReadPages
+	ldr	w22, [x29,136]
+	cmn	w22, #1
+	bne	.L1766
+	ldr	w1, [x19,4]
+	mov	x0, x27
+	bl	printk
+	str	w22, [x19]
+.L1766:
+	ldr	x0, [x19,16]
+	cbz	x0, .L1767
+	ldr	w2, [x0]
+	add	x0, x20, :lo12:.LANCHOR4
+	ldr	x0, [x0,128]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1767
+	ldr	w1, [x19,4]
+	mov	x0, x26
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1767:
+	ldr	x0, [x19,8]
+	cbz	x0, .L1765
+	add	x20, x20, :lo12:.LANCHOR4
+	ldr	w2, [x0]
+	ldr	x0, [x20,120]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1765
+	ldr	w1, [x19,4]
+	mov	x0, x24
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1765:
+	add	w21, w21, 1
+	add	x19, x19, 56
+	b	.L1763
+.L1745:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 192
+	ret
+	.size	FlashProgPages, .-FlashProgPages
+	.align	2
+	.type	FlashTestBlk.part.14, %function
+FlashTestBlk.part.14:
+	stp	x29, x30, [sp, -160]!
+	mov	w1, 165
+	mov	w2, 32
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR4
+	uxth	w20, w0
+	add	x19, x19, :lo12:.LANCHOR4
+	lsl	w20, w20, 10
+	ldr	x0, [x19,104]
+	str	x0, [x29,48]
+	add	x0, x29, 96
+	str	x0, [x29,56]
+	bl	ftl_memset
+	ldr	x0, [x19,104]
+	mov	w1, 90
+	mov	w2, 8
+	bl	ftl_memset
+	str	w20, [x29,44]
+	mov	w1, 1
+	add	x0, x29, 40
+	mov	w2, w1
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	add	x0, x29, 40
+	mov	w3, w1
+	mov	w2, w1
+	bl	FlashProgPages
+	ldr	w0, [x29,40]
+	mov	w1, 0
+	mov	w2, 1
+	cmp	w0, wzr
+	add	x0, x29, 40
+	csetm	w19, ne
+	bl	FlashEraseBlocks
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	FlashTestBlk.part.14, .-FlashTestBlk.part.14
+	.align	2
+	.global	FlashTestBlk
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	uxth	w1, w0
+	adrp	x0, .LANCHOR4+92
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w2, [x0,#:lo12:.LANCHOR4+92]
+	mov	w0, 0
+	cmp	w1, w2
+	bcc	.L1801
+	mov	w0, w1
+	bl	FlashTestBlk.part.14
+.L1801:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashTestBlk, .-FlashTestBlk
+	.align	2
+	.global	FlashMakeFactorBbt
+	.type	FlashMakeFactorBbt, %function
+FlashMakeFactorBbt:
+	stp	x29, x30, [sp, -240]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR4
+	adrp	x19, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR4
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	w21, 0
+	ldr	x0, [x0,112]
+	str	x0, [x29,160]
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x28, x19, 708
+	ldrh	w1, [x0,180]
+	ldrh	w23, [x0,182]
+	mul	w23, w1, w23
+	ldr	x1, [x0,744]
+	uxth	w23, w23
+	ldrb	w1, [x1,24]
+	str	w1, [x29,128]
+	ldrh	w1, [x0,12]
+	str	w1, [x29,172]
+	ldrb	w0, [x0,8]
+	ubfiz	w1, w1, 1, 15
+	cmp	w0, 1
+	ldr	w0, [x29,172]
+	csel	w0, w1, w0, eq
+	str	w0, [x29,172]
+	adrp	x0, .LC105
+	mov	w1, 1
+	add	x0, x0, :lo12:.LC105
+	bl	printk
+	add	x0, x20, :lo12:.LANCHOR4
+	mov	w1, 0
+	mov	w2, 4096
+	ldr	x0, [x0,112]
+	bl	ftl_memset
+	lsr	w0, w23, 4
+	str	w0, [x29,168]
+	ldr	w0, [x29,128]
+	and	w0, w0, 1
+	str	w0, [x29,116]
+	sub	w0, w23, #1
+	uxth	w0, w0
+	str	w0, [x29,124]
+.L1805:
+	ldrb	w0, [x19,1845]
+	cmp	w0, w21
+	bls	.L1856
+	sxtw	x25, w21
+	add	x0, x20, :lo12:.LANCHOR4
+	add	x1, x0, x25, lsl 1
+	ldrh	w22, [x1,144]
+	cbnz	w22, .L1835
+	ldrh	w2, [x19,188]
+	mov	w1, w22
+	ldr	x0, [x0,56]
+	mov	w26, w22
+	lsl	w2, w2, 9
+	mov	w24, w22
+	bl	ftl_memset
+	add	x0, x19, x25
+	ldrb	w27, [x0,1848]
+	ldr	w0, [x29,128]
+	and	w0, w0, 2
+	uxtb	w0, w0
+	str	w0, [x29,120]
+.L1807:
+	uxth	w0, w26
+	str	w0, [x29,144]
+	cmp	w0, w23
+	bcs	.L1817
+	mov	w0, -1
+	strb	w0, [x29,182]
+	strb	w0, [x29,183]
+	ldr	w0, [x29,116]
+	cbz	w0, .L1809
+	ldr	w3, [x28,x25,lsl 2]
+	mov	w0, w27
+	add	x2, x29, 182
+	add	w3, w22, w3
+	str	x3, [x29,104]
+	mov	w1, w3
+	bl	FlashReadSpare
+	ldrb	w0, [x19,8]
+	ldr	x3, [x29,104]
+	cmp	w0, 1
+	bne	.L1809
+	ldr	w1, [x19,12]
+	mov	w0, w27
+	add	x2, x29, 183
+	add	w1, w3, w1
+	bl	FlashReadSpare
+	ldrb	w0, [x29,182]
+	ldrb	w1, [x29,183]
+	and	w0, w1, w0
+	strb	w0, [x29,182]
+.L1809:
+	ldr	w0, [x29,120]
+	cbz	w0, .L1811
+	ldr	x0, [x19,744]
+	add	x2, x29, 183
+	ldrh	w1, [x0,10]
+	ldr	w0, [x28,x25,lsl 2]
+	sub	w1, w1, #1
+	add	w1, w1, w0
+	mov	w0, w27
+	add	w1, w1, w22
+	bl	FlashReadSpare
+.L1811:
+	ldr	x0, [x19,744]
+	ldrb	w1, [x29,182]
+	ldrb	w0, [x0,7]
+	cmp	w0, 8
+	beq	.L1836
+	cmp	w0, 1
+	bne	.L1812
+.L1836:
+	mov	w0, 1
+	cbz	w1, .L1814
+	ldrb	w0, [x29,183]
+	cmp	w0, wzr
+	cset	w0, eq
+	b	.L1814
+.L1812:
+	cmp	w1, 255
+	mov	w0, 1
+	bne	.L1814
+	ldrb	w0, [x29,183]
+	cmp	w0, 255
+	cset	w0, ne
+.L1814:
+	ldr	x1, [x29,128]
+	tbz	x1, 2, .L1815
+	ldr	w1, [x28,x25,lsl 2]
+	mov	w0, w27
+	add	w1, w22, w1
+	bl	SandiskProgTestBadBlock
+.L1815:
+	cbz	w0, .L1816
+	adrp	x0, .LC106
+	mov	w1, w21
+	mov	w2, w26
+	add	x0, x0, :lo12:.LC106
+	add	w24, w24, 1
+	bl	printk
+	add	x0, x20, :lo12:.LANCHOR4
+	ldr	x1, [x29,144]
+	ldrb	w3, [x29,144]
+	uxth	w24, w24
+	ubfx	x1, x1, 5, 11
+	lsl	x1, x1, 2
+	ldr	x2, [x0,56]
+	mov	w0, 1
+	lsl	w0, w0, w3
+	ldr	w3, [x2,x1]
+	orr	w0, w3, w0
+	str	w0, [x2,x1]
+	ldr	w1, [x29,168]
+	ldrb	w0, [x19,1845]
+	mul	w0, w1, w0
+	cmp	w24, w0
+	bgt	.L1817
+.L1816:
+	ldr	w0, [x29,172]
+	add	w26, w26, 1
+	add	w22, w22, w0
+	b	.L1807
+.L1817:
+	adrp	x0, .LC107
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC107
+	mov	w2, w24
+	bl	printk
+	ldrb	w0, [x19,1845]
+	ldr	w1, [x29,168]
+	mul	w0, w1, w0
+	cmp	w24, w0
+	blt	.L1819
+	add	x0, x20, :lo12:.LANCHOR4
+	ldrh	w2, [x19,188]
+	mov	w1, 0
+	lsl	w2, w2, 9
+	ldr	x0, [x0,56]
+	bl	ftl_memset
+.L1819:
+	cbnz	w21, .L1821
+	add	x0, x20, :lo12:.LANCHOR4
+	adrp	x26, .LC108
+	mov	w22, w21
+	add	x26, x26, :lo12:.LC108
+	mov	w24, 1
+	ldrh	w27, [x0,92]
+.L1822:
+	ldrb	w0, [x19,9]
+	cmp	w0, w27
+	bls	.L1857
+	mov	w0, w27
+	bl	FlashTestBlk
+	cbz	w0, .L1823
+	mov	w1, w27
+	mov	x0, x26
+	add	w22, w22, 1
+	bl	printk
+	add	x0, x20, :lo12:.LANCHOR4
+	ubfx	x1, x27, 5, 11
+	lsl	x1, x1, 2
+	uxth	w22, w22
+	ldr	x2, [x0,56]
+	lsl	w0, w24, w27
+	ldr	w3, [x2,x1]
+	orr	w0, w3, w0
+	str	w0, [x2,x1]
+.L1823:
+	add	w27, w27, 1
+	uxth	w27, w27
+	b	.L1822
+.L1857:
+	adrp	x26, .LC108
+	ldr	w24, [x29,124]
+	sub	w27, w23, #50
+	add	x26, x26, :lo12:.LC108
+.L1825:
+	cmp	w24, w27
+	ble	.L1858
+	mov	w0, w24
+	bl	FlashTestBlk
+	cbz	w0, .L1826
+	mov	w1, w24
+	mov	x0, x26
+	bl	printk
+	add	x0, x20, :lo12:.LANCHOR4
+	ubfx	x1, x24, 5, 11
+	lsl	x1, x1, 2
+	ldr	x3, [x0,56]
+	mov	w0, 1
+	lsl	w0, w0, w24
+	ldr	w4, [x3,x1]
+	orr	w0, w4, w0
+	str	w0, [x3,x1]
+.L1826:
+	sub	w2, w24, #1
+	uxth	w24, w2
+	b	.L1825
+.L1858:
+	add	x1, x20, :lo12:.LANCHOR4
+	ldrb	w0, [x19,9]
+	ldr	w2, [x1,92]
+	sub	w0, w0, w2
+	cmp	w22, w0
+	bcc	.L1821
+	ldrh	w2, [x19,188]
+	ldr	x0, [x1,56]
+	mov	w1, 0
+	lsl	w2, w2, 9
+	bl	ftl_memset
+.L1821:
+	adrp	x24, .LC109
+	ldr	w27, [x29,124]
+	mul	w26, w21, w23
+	add	x24, x24, :lo12:.LC109
+	lsl	x25, x25, 1
+	mov	w22, -3872
+.L1829:
+	mov	w2, w27
+	mov	x0, x24
+	mov	w1, w21
+	bl	printk
+	add	x0, x20, :lo12:.LANCHOR4
+	ldr	x2, [x0,56]
+.L1830:
+	ubfx	x0, x27, 5, 11
+	ldr	w0, [x2,x0,lsl 2]
+	lsr	w0, w0, w27
+	and	w1, w0, 1
+	tbz	x0, 0, .L1859
+	sub	w27, w27, #1
+	uxth	w27, w27
+	b	.L1830
+.L1859:
+	add	x0, x20, :lo12:.LANCHOR4
+	add	x2, x0, x25
+	strh	w27, [x2,144]
+	ldr	x2, [x29,160]
+	strh	w22, [x2]
+	strh	w27, [x2,2]
+	strh	w1, [x2,8]
+	ldr	x1, [x0,56]
+	ldr	x0, [x0,112]
+	str	x0, [x29,200]
+	add	w0, w27, w26
+	str	x1, [x29,192]
+	lsl	w0, w0, 10
+	mov	w1, 1
+	str	w0, [x29,188]
+	mov	w2, w1
+	add	x0, x29, 184
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	add	x0, x29, 184
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+	ldr	w0, [x29,184]
+	cbz	w0, .L1835
+	sub	w27, w27, #1
+	uxth	w27, w27
+	b	.L1829
+.L1835:
+	add	w21, w21, 1
+	uxtb	w21, w21
+	b	.L1805
+.L1856:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 240
+	ret
+	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
+	.align	2
+	.global	FtlLowFormatEraseBlock
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	stp	x25, x26, [sp,64]
+	uxth	w26, w0
+	add	x0, x20, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	uxtb	w25, w1
+	ldr	w2, [x0,-96]
+	mov	w0, 0
+	cbnz	w2, .L1861
+	adrp	x22, .LANCHOR0
+	mov	w28, w2
+	add	x23, x22, :lo12:.LANCHOR0
+	mov	w21, w2
+	mov	w24, w2
+	mov	w27, 56
+	ldrb	w0, [x23,120]
+	str	w0, [x29,120]
+	str	w26, [x23,2100]
+.L1862:
+	ldrh	w0, [x23,1944]
+	cmp	w0, w28
+	bls	.L1906
+	add	x1, x20, :lo12:.LANCHOR2
+	umull	x0, w28, w27
+	ldr	x1, [x1,-88]
+	str	wzr, [x1,x0]
+	add	x0, x23, 1976
+	mov	w1, w26
+	ldrb	w0, [x0,w28,sxtw]
+	bl	V2P_block
+	uxth	w19, w0
+	mov	w1, w19
+	cbz	w25, .L1863
+	str	x1, [x29,112]
+	bl	IsBlkInVendorPart
+	ldr	x1, [x29,112]
+	cbnz	w0, .L1864
+.L1863:
+	mov	w0, w1
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L1865
+	add	x3, x20, :lo12:.LANCHOR2
+	lsl	w19, w19, 10
+	umull	x0, w21, w27
+	mov	w2, 4
+	ldr	x1, [x3,-88]
+	add	x1, x1, x0
+	str	w19, [x1,4]
+	ldr	x1, [x3,-88]
+	ldr	x3, [x3,2128]
+	add	x1, x1, x0
+	ldrh	w0, [x23,2030]
+	mul	w0, w21, w0
+	add	w21, w21, 1
+	str	xzr, [x1,8]
+	sdiv	w0, w0, w2
+	uxth	w21, w21
+	add	x0, x3, x0, sxtw 2
+	str	x0, [x1,16]
+	b	.L1864
+.L1865:
+	add	w24, w24, 1
+	uxth	w24, w24
+.L1864:
+	add	w2, w28, 1
+	uxth	w28, w2
+	b	.L1862
+.L1906:
+	mov	w19, w24
+	mov	w0, w24
+	cbz	w21, .L1861
+	ldr	w0, [x29,120]
+	mov	w2, w21
+	mov	x24, 0
+	mov	x27, 56
+	cmp	w0, wzr
+	add	x0, x20, :lo12:.LANCHOR2
+	cset	w23, ne
+	mov	w1, w23
+	ldr	x0, [x0,-88]
+	bl	FlashEraseBlocks
+.L1868:
+	cmp	w21, w24, uxth
+	bls	.L1907
+	add	x1, x20, :lo12:.LANCHOR2
+	mul	x0, x24, x27
+	ldr	x1, [x1,-88]
+	add	x2, x1, x0
+	ldr	w0, [x1,x0]
+	cmn	w0, #1
+	bne	.L1869
+	ldr	w0, [x2,4]
+	add	w19, w19, 1
+	lsr	w0, w0, 10
+	uxth	w19, w19
+	bl	FtlBbmMapBadBlock
+.L1869:
+	add	x24, x24, 1
+	b	.L1868
+.L1907:
+	cbnz	w25, .L1871
+	uxth	w23, w23
+	mov	w28, 6
+	mov	w27, 1
+	b	.L1872
+.L1871:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w27, [x0,2020]
+	ldrb	w0, [x0,120]
+	cbnz	w0, .L1888
+	lsr	w28, w27, 2
+	mov	w23, 1
+	b	.L1872
+.L1888:
+	mov	w23, 1
+	mov	w28, w23
+.L1872:
+	add	x0, x22, :lo12:.LANCHOR0
+	mov	w24, 0
+	str	x0, [x29,120]
+.L1881:
+	mov	w22, 0
+	mov	w21, w22
+.L1873:
+	ldr	x0, [x29,120]
+	ldrh	w0, [x0,1944]
+	cmp	w0, w22
+	bls	.L1908
+	add	x1, x20, :lo12:.LANCHOR2
+	mov	w0, 56
+	umull	x0, w22, w0
+	ldr	x1, [x1,-88]
+	str	wzr, [x1,x0]
+	mov	w1, w26
+	ldr	x0, [x29,120]
+	add	x0, x0, 1976
+	ldrb	w0, [x0,w22,sxtw]
+	bl	V2P_block
+	uxth	w2, w0
+	str	w2, [x29,112]
+	mov	w1, w2
+	cbz	w25, .L1874
+	str	x1, [x29,104]
+	bl	IsBlkInVendorPart
+	ldr	x1, [x29,104]
+	cbnz	w0, .L1875
+.L1874:
+	mov	w0, w1
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L1875
+	add	x3, x20, :lo12:.LANCHOR2
+	mov	w0, 56
+	ldr	w2, [x29,112]
+	umull	x0, w21, w0
+	ldr	x1, [x3,-88]
+	add	w4, w24, w2, lsl 10
+	mov	w2, 4
+	add	x1, x1, x0
+	str	w4, [x1,4]
+	ldr	x1, [x3,-88]
+	add	x1, x1, x0
+	ldr	x0, [x3,2104]
+	ldr	x3, [x3,2112]
+	str	x0, [x1,8]
+	ldr	x0, [x29,120]
+	ldrh	w0, [x0,2030]
+	mul	w0, w21, w0
+	add	w21, w21, 1
+	sdiv	w0, w0, w2
+	uxth	w21, w21
+	add	x0, x3, x0, sxtw 2
+	str	x0, [x1,16]
+.L1875:
+	add	w2, w22, 1
+	uxth	w22, w2
+	b	.L1873
+.L1908:
+	cbz	w21, .L1885
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w1, w21
+	mov	w2, w23
+	mov	w3, 1
+	ldr	x0, [x0,-88]
+	bl	FlashProgPages
+	mov	x1, 0
+.L1878:
+	cmp	w21, w1, uxth
+	bls	.L1909
+	add	x2, x20, :lo12:.LANCHOR2
+	mov	x0, 56
+	mul	x0, x1, x0
+	ldr	x2, [x2,-88]
+	add	x3, x2, x0
+	ldr	w0, [x2,x0]
+	cbz	w0, .L1879
+	ldr	w0, [x3,4]
+	add	w19, w19, 1
+	str	x1, [x29,112]
+	lsr	w0, w0, 10
+	uxth	w19, w19
+	bl	FtlBbmMapBadBlock
+	ldr	x1, [x29,112]
+.L1879:
+	add	x1, x1, 1
+	b	.L1878
+.L1909:
+	add	w24, w24, w28
+	uxth	w24, w24
+	cmp	w24, w27
+	bcc	.L1881
+	mov	x22, 0
+	mov	x24, 56
+.L1882:
+	cmp	w21, w22, uxth
+	bls	.L1910
+	cbz	w25, .L1883
+	add	x1, x20, :lo12:.LANCHOR2
+	mul	x0, x22, x24
+	ldr	x1, [x1,-88]
+	add	x2, x1, x0
+	ldr	w0, [x1,x0]
+	cbnz	w0, .L1883
+	ldr	w0, [x2,4]
+	mov	w1, 1
+	lsr	w0, w0, 10
+	bl	FtlFreeSysBlkQueueIn
+.L1883:
+	add	x22, x22, 1
+	b	.L1882
+.L1910:
+	cmp	w26, 63
+	bls	.L1889
+	cbz	w25, .L1885
+.L1889:
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w1, w23
+	mov	w2, w21
+	ldr	x0, [x20,-88]
+	bl	FlashEraseBlocks
+.L1885:
+	mov	w0, w19
+.L1861:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	.align	2
+	.global	FtlBbmTblFlush
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	add	x2, x21, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w1, [x2,-96]
+	cbnz	w1, .L1913
+	adrp	x19, .LANCHOR4
+	adrp	x20, .LANCHOR0
+	add	x24, x19, :lo12:.LANCHOR4
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x0, [x2,-64]
+	mov	x23, 0
+	ldr	x2, [x2,2120]
+	add	x22, x20, 2104
+	str	x2, [x24,176]
+	ldrh	w2, [x20,2028]
+	str	x0, [x24,168]
+	bl	ftl_memset
+.L1914:
+	ldrh	w1, [x20,1966]
+	mov	w0, w23
+	add	x23, x23, 1
+	cmp	w0, w1
+	bge	.L1922
+	add	x1, x21, :lo12:.LANCHOR2
+	ldr	x3, [x24,168]
+	ldrh	w2, [x1,2248]
+	add	x1, x22, x23, lsl 3
+	ldr	x1, [x1,24]
+	mul	w0, w0, w2
+	add	x0, x3, x0, sxtw 2
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	b	.L1914
+.L1922:
+	add	x19, x19, :lo12:.LANCHOR4
+	mov	w1, 255
+	add	x19, x19, 160
+	mov	w2, 16
+	mov	w28, 0
+	adrp	x25, .LC110
+	ldr	x27, [x19,16]
+	adrp	x26, .LC111
+	mov	w24, w28
+	add	x25, x25, :lo12:.LC110
+	mov	x0, x27
+	add	x26, x26, :lo12:.LC111
+	bl	ftl_memset
+	mov	w0, -3887
+	strh	w0, [x27]
+	ldr	w0, [x22,8]
+	str	w0, [x27,4]
+	ldrh	w0, [x20,2104]
+	strh	w0, [x27,2]
+	ldrh	w0, [x22,4]
+	strh	w0, [x27,8]
+	ldrh	w0, [x22,6]
+	strh	w0, [x27,10]
+	ldr	w0, [x20,1940]
+	strh	w0, [x27,12]
+.L1916:
+	add	x23, x21, :lo12:.LANCHOR2
+	ldrh	w1, [x20,2104]
+	ldrh	w2, [x20,2106]
+	ldrh	w3, [x20,2108]
+	ldr	x0, [x23,-64]
+	str	x0, [x19,8]
+	ldr	x0, [x23,2120]
+	str	x0, [x19,16]
+	orr	w0, w2, w1, lsl 10
+	str	w0, [x19,4]
+	mov	x0, x25
+	ldrh	w4, [x27,10]
+	str	wzr, [x19]
+	bl	printk
+	mov	w1, 1
+	mov	x0, x19
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+	ldrh	w0, [x20,2020]
+	ldrh	w1, [x20,2106]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	blt	.L1917
+	ldr	w1, [x20,2112]
+	ldrh	w0, [x20,2104]
+	add	w1, w1, 1
+	str	w1, [x20,2112]
+	str	w1, [x27,4]
+	strh	w0, [x27,8]
+	ldrh	w1, [x20,2108]
+	strh	w0, [x20,2108]
+	ldr	x0, [x23,-88]
+	strh	w1, [x20,2104]
+	lsl	w1, w1, 10
+	str	w1, [x19,4]
+	str	w1, [x0,4]
+	mov	w1, 1
+	mov	w2, w1
+	strh	wzr, [x20,2106]
+	ldr	x0, [x23,-88]
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	mov	x0, x19
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+.L1917:
+	ldrh	w0, [x20,2106]
+	add	w0, w0, 1
+	strh	w0, [x20,2106]
+	ldr	w0, [x19]
+	cmn	w0, #1
+	bne	.L1918
+	ldr	w1, [x19,4]
+	mov	x0, x26
+	add	w28, w28, 1
+	bl	printk
+	uxth	w28, w28
+	cmp	w28, 3
+	bls	.L1916
+	adrp	x0, .LC112
+	ldr	w1, [x19,4]
+	add	x0, x0, :lo12:.LC112
+	mov	w2, w28
+	add	x21, x21, :lo12:.LANCHOR2
+	bl	printk
+	mov	w0, 1
+	str	w0, [x21,-96]
+	b	.L1913
+.L1918:
+	cbnz	w24, .L1913
+	mov	w24, 1
+	b	.L1916
+.L1913:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.align	2
+	.global	allocate_data_superblock
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w1, [x19,-96]
+	stp	x27, x28, [sp,80]
+	cbnz	w1, .L1924
+	adrp	x22, .LANCHOR0
+	mov	x20, x0
+	add	x24, x19, 96
+	sub	x25, x19, #16
+	mov	x23, x22
+.L1925:
+	cmp	x20, x24
+	bne	.L1926
+	ldrh	w2, [x19,-8]
+	ldr	w4, [x19,876]
+	lsr	w3, w2, 1
+	add	w1, w3, 1
+	mul	w0, w2, w4
+	add	w1, w1, w0, lsr 2
+	ldr	w0, [x19,160]
+	uxth	w1, w1
+	cbz	w0, .L1927
+	ldr	w0, [x19,220]
+	cmp	w0, 29
+	bhi	.L1927
+	cmp	w0, 2
+	mov	w1, 0
+	bls	.L1928
+	tbz	x2, 0, .L1955
+	cbz	w4, .L1928
+.L1955:
+	mov	w1, w3
+	b	.L1927
+.L1926:
+	ldrb	w0, [x20,8]
+	mov	w1, 0
+	cmp	w0, 1
+	bne	.L1928
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w2, [x0,1964]
+	cmp	w2, 1
+	beq	.L1928
+	ldrb	w0, [x0,120]
+	cbnz	w0, .L1928
+	ldr	w2, [x19,160]
+	ldrh	w0, [x19,-8]
+	lsr	w1, w0, 3
+	cbz	w2, .L1927
+	ldr	w2, [x19,220]
+	cmp	w2, 1
+	bhi	.L1927
+	mov	w1, 7
+	mul	w1, w0, w1
+	lsr	w1, w1, 3
+.L1927:
+	cbz	w1, .L1928
+	sub	w1, w1, #1
+	uxth	w1, w1
+.L1928:
+	ldrb	w2, [x20,8]
+	mov	x0, x25
+	bl	List_pop_index_node
+	uxth	w27, w0
+	ldrh	w0, [x19,-8]
+	sub	w0, w0, #1
+	strh	w0, [x19,-8]
+	strh	w27, [x20]
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20,7]
+	cbz	w0, .L1930
+	add	x0, x22, :lo12:.LANCHOR0
+	mov	x3, 56
+	mov	w6, 65535
+	ldrh	w5, [x0,1944]
+	mov	x0, 0
+	mov	w26, w0
+	b	.L1931
+.L1930:
+	ubfiz	x27, x27, 1, 16
+	ldr	x0, [x19,-40]
+	mov	w1, -1
+	strh	w1, [x0,x27]
+	b	.L1925
+.L1934:
+	ldr	x4, [x19,-88]
+	madd	x1, x0, x3, x4
+	str	xzr, [x1,16]
+	str	xzr, [x1,8]
+	add	x1, x20, x0, lsl 1
+	ldrh	w1, [x1,16]
+	cmp	w1, w6
+	beq	.L1933
+	umull	x2, w26, w3
+	add	w26, w26, 1
+	lsl	w1, w1, 10
+	add	x2, x4, x2
+	uxth	w26, w26
+	str	w1, [x2,4]
+.L1933:
+	add	x0, x0, 1
+.L1931:
+	cmp	w5, w0, uxth
+	bhi	.L1934
+	cmp	x20, x19
+	uxtw	x28, w27
+	bne	.L1935
+	ldr	w0, [x19,160]
+	cbz	w0, .L1935
+	ldr	x0, [x19,-80]
+	ldrh	w0, [x0,x28,lsl 1]
+	cmp	w0, 30
+	bls	.L1935
+	strb	wzr, [x19,8]
+.L1935:
+	ldrb	w0, [x20,8]
+	cbnz	w0, .L1936
+	lsl	x0, x28, 1
+	ldr	x1, [x19,-80]
+	mov	w2, 2
+	ldrh	w3, [x1,x0]
+	cbz	w3, .L1980
+	add	x2, x23, :lo12:.LANCHOR0
+	ldrh	w2, [x2,2008]
+	add	w2, w3, w2
+.L1980:
+	strh	w2, [x1,x0]
+	mov	w1, 0
+	ldr	w0, [x19,204]
+	add	w0, w0, 1
+	str	w0, [x19,204]
+	mov	w0, w27
+	bl	ftl_set_blk_mode
+	b	.L1939
+.L1936:
+	lsl	x0, x28, 1
+	ldr	x2, [x19,-80]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
+	ldr	w0, [x19,208]
+	add	w0, w0, 1
+	str	w0, [x19,208]
+	mov	w0, w27
+	bl	ftl_set_blk_mode.part.8
+.L1939:
+	lsl	x28, x28, 1
+	ldr	x0, [x19,-80]
+	ldr	w1, [x19,216]
+	ldrh	w0, [x0,x28]
+	cmp	w0, w1
+	bls	.L1940
+	str	w0, [x19,216]
+.L1940:
+	add	x2, x23, :lo12:.LANCHOR0
+	ldr	w3, [x19,204]
+	ldr	w0, [x19,208]
+	ldrh	w1, [x2,2008]
+	madd	w0, w1, w3, w0
+	ldrh	w1, [x2,1952]
+	mov	x3, 56
+	udiv	w0, w0, w1
+	ldr	x1, [x19,2160]
+	str	w0, [x19,212]
+	ldr	w0, [x1,16]
+	add	w0, w0, 1
+	str	w0, [x1,16]
+	mov	x0, 0
+.L1941:
+	cmp	w26, w0, uxth
+	bls	.L1982
+	ldr	x1, [x19,-88]
+	madd	x1, x0, x3, x1
+	add	x0, x0, 1
+	ldr	w2, [x1,4]
+	and	w2, w2, -1024
+	str	w2, [x1,4]
+	b	.L1941
+.L1982:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L1943
+	ldrb	w0, [x20,8]
+	cmp	w0, 1
+	ldr	x0, [x19,-88]
+	bne	.L1944
+	mov	w1, 0
+	b	.L1981
+.L1944:
+	mov	w1, 1
+.L1981:
+	mov	w2, w26
+	bl	FlashEraseBlocks
+.L1943:
+	ldrb	w1, [x20,8]
+	mov	w2, w26
+	ldr	x0, [x19,-88]
+	bl	FlashEraseBlocks
+	mov	x1, 0
+	mov	x4, 56
+	mov	w2, w1
+.L1945:
+	cmp	w26, w1, uxth
+	bls	.L1983
+	mul	x0, x1, x4
+	ldr	x3, [x19,-88]
+	add	x5, x3, x0
+	ldr	w3, [x3,x0]
+	cmn	w3, #1
+	bne	.L1946
+	ldr	w0, [x5,4]
+	add	w2, w2, 1
+	str	x4, [x29,104]
+	lsr	w0, w0, 10
+	str	x3, [x29,112]
+	str	x1, [x29,120]
+	str	x2, [x29,128]
+	str	x2, [x29,136]
+	bl	FtlBbmMapBadBlock
+	ldr	x1, [x29,120]
+	ldr	x3, [x29,112]
+	ldr	x4, [x29,104]
+	add	x0, x20, x1, lsl 1
+	ldr	x2, [x29,136]
+	strh	w3, [x0,16]
+	ldrb	w0, [x20,7]
+	sub	w0, w0, #1
+	strb	w0, [x20,7]
+.L1946:
+	add	x1, x1, 1
+	b	.L1945
+.L1983:
+	cbz	w2, .L1948
+	mov	w0, w27
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L1948:
+	ldrb	w0, [x20,7]
+	cbnz	w0, .L1949
+	ldr	x0, [x19,-40]
+	mov	w1, -1
+	strh	w1, [x0,x28]
+	b	.L1925
+.L1949:
+	adrp	x1, .LANCHOR0
+	add	x21, x21, :lo12:.LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR0
+	strh	wzr, [x20,2]
+	strb	wzr, [x20,6]
+	ldrh	w1, [x1,2018]
+	strh	w27, [x20]
+	mul	w0, w0, w1
+	ldr	w1, [x21,196]
+	str	w1, [x20,12]
+	uxth	w0, w0
+	add	w1, w1, 1
+	strh	w0, [x20,4]
+	str	w1, [x21,196]
+	ldr	x1, [x21,-40]
+	ldrh	w2, [x20]
+	strh	w0, [x1,x2,lsl 1]
+.L1924:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	allocate_data_superblock, .-allocate_data_superblock
+	.align	2
+	.global	FtlGcFreeBadSuperBlk
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x25, [sp,64]
+	add	x19, x19, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	uxth	w23, w0
+	ldrh	w0, [x19,956]
+	stp	x21, x22, [sp,32]
+	mov	w21, 0
+	cbz	w0, .L1986
+	adrp	x22, .LANCHOR0
+	adrp	x24, .LC113
+	add	x22, x22, :lo12:.LANCHOR0
+	add	x24, x24, :lo12:.LC113
+.L1994:
+	ldrh	w0, [x22,1944]
+	cmp	w0, w21
+	bls	.L1995
+	add	x0, x22, 1976
+	mov	w1, w23
+	mov	w20, 0
+	ldrb	w0, [x0,w21,sxtw]
+	bl	V2P_block
+	uxth	w25, w0
+.L1987:
+	ldrh	w0, [x19,956]
+	cmp	w0, w20
+	bls	.L1996
+	add	x0, x19, 960
+	ldrh	w0, [x0,w20,sxtw 1]
+	cmp	w0, w25
+	bne	.L1988
+	mov	w1, w25
+	mov	x0, x24
+	bl	printk
+	mov	w0, w25
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	w2, [x19,956]
+	mov	w3, w20
+.L1989:
+	cmp	w3, w2
+	bcs	.L1997
+	add	x4, x19, 960
+	add	w0, w3, 1
+	ldrh	w1, [x4,w0,sxtw 1]
+	strh	w1, [x4,w3,sxtw 1]
+	uxth	w3, w0
+	b	.L1989
+.L1997:
+	sub	w2, w2, #1
+	strh	w2, [x19,956]
+.L1988:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L1987
+.L1996:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L1994
+.L1995:
+	bl	FtlGcReFreshBadBlk
+.L1986:
+	mov	w0, 0
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.align	2
+	.global	update_vpc_list
+	.type	update_vpc_list, %function
+update_vpc_list:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w19, w0
+	adrp	x0, .LANCHOR2
+	add	x1, x0, :lo12:.LANCHOR2
+	ubfiz	x2, x19, 1, 16
+	mov	x20, x0
+	ldr	x3, [x1,-40]
+	ldrh	w2, [x3,x2]
+	cbnz	w2, .L1999
+	ldrh	w3, [x1,296]
+	cmp	w3, w19
+	bne	.L2000
+	mov	w0, -1
+	strh	w0, [x1,296]
+	b	.L2001
+.L2000:
+	ldrh	w3, [x0,#:lo12:.LANCHOR2]
+	mov	w0, w2
+	cmp	w3, w19
+	beq	.L2002
+	ldrh	w3, [x1,48]
+	cmp	w3, w19
+	beq	.L2002
+	ldrh	w1, [x1,96]
+	cmp	w1, w19
+	beq	.L2002
+.L2001:
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w1, w19
+	sub	x0, x20, #48
+	bl	List_remove_node
+	ldrh	w0, [x20,-24]
+	sub	w0, w0, #1
+	strh	w0, [x20,-24]
+	mov	w0, w19
+	bl	free_data_superblock
+	mov	w0, w19
+	bl	FtlGcFreeBadSuperBlk
+	mov	w0, 1
+	b	.L2002
+.L1999:
+	mov	w0, w19
+	bl	List_update_data_list
+	mov	w0, 0
+.L2002:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	update_vpc_list, .-update_vpc_list
+	.align	2
+	.global	decrement_vpc_count
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	stp	x29, x30, [sp, -48]!
+	uxth	w1, w0
+	mov	w0, 65535
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	cmp	w1, w0
+	adrp	x2, .LANCHOR2
+	beq	.L2007
+	add	x0, x2, :lo12:.LANCHOR2
+	ubfiz	x3, x1, 1, 16
+	ldr	x0, [x0,-40]
+	ldrh	w19, [x0,x3]
+	cbnz	w19, .L2008
+	adrp	x0, .LC114
+	mov	w2, w19
+	add	x0, x0, :lo12:.LC114
+	bl	printk
+	b	.L2012
+.L2008:
+	sub	w19, w19, #1
+	strh	w19, [x0,x3]
+.L2007:
+	add	x19, x2, :lo12:.LANCHOR2
+	mov	w0, 65535
+	ldrh	w2, [x19,2336]
+	cmp	w2, w0
+	bne	.L2010
+	strh	w1, [x19,2336]
+.L2012:
+	mov	w0, 0
+	b	.L2009
+.L2010:
+	cmp	w2, w1
+	str	x1, [x29,40]
+	mov	w0, 0
+	beq	.L2009
+	mov	w0, w2
+	bl	update_vpc_list
+	cmp	w0, wzr
+	ldr	x1, [x29,40]
+	cset	w0, ne
+	strh	w1, [x19,2336]
+.L2009:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	2
+	.global	FtlSlcSuperblockCheck
+	.type	FtlSlcSuperblockCheck, %function
+FtlSlcSuperblockCheck:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	ldrh	w1, [x0,4]
+	cbz	w1, .L2013
+	ldrh	w1, [x0]
+	mov	w20, 65535
+	cmp	w1, w20
+	beq	.L2013
+	mov	x19, x0
+	ldrb	w0, [x0,6]
+	adrp	x21, .LANCHOR2
+	adrp	x22, .LANCHOR0
+	add	x0, x0, 8
+	add	x21, x21, :lo12:.LANCHOR2
+	add	x21, x21, 996
+	ldrh	w0, [x19,x0,lsl 1]
+.L2017:
+	cmp	w0, w20
+	bne	.L2024
+.L2019:
+	ldrb	w0, [x19,6]
+	add	x1, x22, :lo12:.LANCHOR0
+	add	w0, w0, 1
+	ldrh	w1, [x1,1944]
+	uxtb	w0, w0
+	strb	w0, [x19,6]
+	cmp	w1, w0
+	bne	.L2018
+	ldrh	w0, [x19,2]
+	strb	wzr, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+.L2018:
+	ldrb	w0, [x19,6]
+	add	x0, x0, 8
+	ldrh	w0, [x19,x0,lsl 1]
+	b	.L2017
+.L2024:
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2020
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbnz	w0, .L2020
+	ldrh	w0, [x19,2]
+	ldrh	w0, [x21,w0,sxtw 1]
+	cmp	w0, w20
+	bne	.L2020
+	ldrh	w0, [x19,4]
+	sub	w0, w0, #1
+	strh	w0, [x19,4]
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	ldrh	w1, [x19,4]
+	cbnz	w1, .L2019
+	ldrh	w0, [x19,2]
+	strb	w1, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+	b	.L2013
+.L2020:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w2, [x0,120]
+	cbz	w2, .L2013
+	cmp	w1, 1
+	bne	.L2013
+	ldrh	w2, [x19,2]
+	ldrh	w1, [x0,2020]
+	cmp	w2, w1
+	bcc	.L2013
+	adrp	x2, .LANCHOR2-40
+	ldrh	w1, [x19]
+	ldrh	w4, [x19,4]
+	lsl	x1, x1, 1
+	ldr	x3, [x2,#:lo12:.LANCHOR2-40]
+	ldrh	w2, [x3,x1]
+	sub	w2, w2, w4
+	strh	w2, [x3,x1]
+	strh	wzr, [x19,4]
+	ldrh	w0, [x0,2018]
+	strh	w0, [x19,2]
+	strb	wzr, [x19,6]
+.L2013:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
+	.align	2
+	.global	get_new_active_ppa
+	.type	get_new_active_ppa, %function
+get_new_active_ppa:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	mov	x19, x0
+	strb	wzr, [x0,10]
+	ldrb	w0, [x0,6]
+	adrp	x21, .LANCHOR2
+	add	x21, x21, :lo12:.LANCHOR2
+	mov	w22, 65535
+	add	x0, x0, 8
+	adrp	x23, .LANCHOR0
+	add	x21, x21, 996
+	ldrh	w0, [x19,x0,lsl 1]
+.L2026:
+	cmp	w0, w22
+	adrp	x20, .LANCHOR0
+	bne	.L2041
+.L2027:
+	ldrb	w0, [x19,6]
+	add	x1, x23, :lo12:.LANCHOR0
+	add	w0, w0, 1
+	ldrh	w1, [x1,1944]
+	uxtb	w0, w0
+	strb	w0, [x19,6]
+	cmp	w1, w0
+	bne	.L2028
+	ldrh	w0, [x19,2]
+	strb	wzr, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+.L2028:
+	ldrb	w0, [x19,6]
+	add	x0, x0, 8
+	ldrh	w0, [x19,x0,lsl 1]
+	b	.L2026
+.L2041:
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2029
+	add	x1, x23, :lo12:.LANCHOR0
+	ldrb	w1, [x1,120]
+	cbnz	w1, .L2029
+	ldrh	w1, [x19,2]
+	ldrh	w1, [x21,w1,sxtw 1]
+	cmp	w1, w22
+	bne	.L2029
+	ldrh	w0, [x19,4]
+	sub	w0, w0, #1
+	strh	w0, [x19,4]
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	b	.L2027
+.L2029:
+	ldrh	w1, [x19,4]
+	adrp	x21, .LANCHOR2
+	ldrh	w22, [x19,2]
+	mov	w23, 65535
+	add	x21, x21, :lo12:.LANCHOR2
+	sub	w1, w1, #1
+	orr	w22, w22, w0, lsl 10
+	strh	w1, [x19,4]
+	mov	w24, w23
+	add	x21, x21, 996
+.L2030:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w1, [x19,6]
+	ldrh	w2, [x0,1944]
+.L2032:
+	add	w1, w1, 1
+	uxtb	w1, w1
+	cmp	w1, w2
+	bne	.L2031
+	ldrh	w1, [x19,2]
+	add	w1, w1, 1
+	strh	w1, [x19,2]
+	mov	w1, 0
+.L2031:
+	add	x0, x19, x1, sxtw 1
+	ldrh	w0, [x0,16]
+	cmp	w0, w23
+	beq	.L2032
+	ldrb	w0, [x19,8]
+	strb	w1, [x19,6]
+	cmp	w0, 1
+	bne	.L2037
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbnz	w0, .L2034
+	ldrh	w0, [x19,2]
+	ldrh	w0, [x21,w0,sxtw 1]
+	cmp	w0, w24
+	bne	.L2034
+	ldrh	w1, [x19,4]
+	cbz	w1, .L2034
+	ldrh	w0, [x19]
+	sub	w1, w1, #1
+	strh	w1, [x19,4]
+	bl	decrement_vpc_count
+	b	.L2030
+.L2034:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x20,120]
+	cbz	w0, .L2037
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x20,2020]
+	cmp	w1, w0
+	bcc	.L2037
+	adrp	x0, .LANCHOR2-40
+	ldrh	w1, [x19]
+	ldrh	w3, [x19,4]
+	lsl	x1, x1, 1
+	ldr	x0, [x0,#:lo12:.LANCHOR2-40]
+	ldrh	w2, [x0,x1]
+	sub	w2, w2, w3
+	strh	w2, [x0,x1]
+	strh	wzr, [x19,4]
+	ldrh	w0, [x20,2018]
+	strh	w0, [x19,2]
+	strb	wzr, [x19,6]
+.L2037:
+	mov	w0, w22
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	get_new_active_ppa, .-get_new_active_ppa
+	.align	2
+	.global	FtlVpcTblFlush
+	.type	FtlVpcTblFlush, %function
+FtlVpcTblFlush:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR2
+	str	x27, [sp,80]
+	stp	x19, x20, [sp,16]
+	add	x19, x23, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	ldr	w0, [x19,-96]
+	cbnz	w0, .L2044
+	adrp	x24, .LANCHOR4
+	ldr	x22, [x19,2120]
+	add	x21, x24, :lo12:.LANCHOR4
+	ldr	x1, [x19,-64]
+	ldrh	w2, [x19,280]
+	adrp	x25, .LANCHOR0
+	add	x26, x25, :lo12:.LANCHOR0
+	add	x20, x19, 224
+	str	x1, [x21,168]
+	add	x21, x21, 160
+	str	x22, [x21,16]
+	strh	w2, [x22,2]
+	mov	w2, -3932
+	strh	w2, [x22]
+	str	w0, [x22,12]
+	ldr	w2, [x19,288]
+	str	w0, [x22,8]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	str	w2, [x22,4]
+	str	w0, [x19,224]
+	mov	w0, 71
+	movk	w0, 0x5000, lsl 16
+	str	w0, [x19,228]
+	ldrh	w0, [x19,286]
+	strh	w0, [x19,232]
+	ldrh	w0, [x26,1966]
+	strb	w0, [x19,234]
+	ldrh	w0, [x23,#:lo12:.LANCHOR2]
+	strh	w0, [x19,238]
+	ldrh	w0, [x19,2]
+	ldrb	w1, [x19,6]
+	ldrb	w2, [x19,54]
+	orr	w0, w1, w0, lsl 6
+	ldrh	w1, [x19,48]
+	strh	w1, [x19,242]
+	ldrh	w1, [x19,50]
+	strh	w0, [x19,240]
+	ldrb	w0, [x19,8]
+	orr	w1, w2, w1, lsl 6
+	strb	w0, [x19,235]
+	strh	w1, [x19,244]
+	ldrb	w0, [x19,56]
+	ldrh	w1, [x19,96]
+	strb	w0, [x19,236]
+	strh	w1, [x19,246]
+	ldrh	w1, [x19,98]
+	ldrb	w0, [x19,104]
+	strb	w0, [x19,237]
+	ldr	w0, [x19,204]
+	ldrb	w2, [x19,102]
+	str	w0, [x19,256]
+	ldr	w0, [x19,196]
+	orr	w1, w2, w1, lsl 6
+	str	w0, [x19,264]
+	ldr	w0, [x19,200]
+	str	w0, [x19,260]
+	ldrh	w2, [x26,2028]
+	ldr	x0, [x21,8]
+	strh	w1, [x19,248]
+	mov	w1, 255
+	bl	ftl_memset
+	ldr	x0, [x21,8]
+	mov	x1, x20
+	mov	w2, 48
+	bl	ftl_memcpy
+	ldr	x0, [x21,8]
+	ldrh	w2, [x26,1952]
+	ldr	x1, [x19,-40]
+	add	x0, x0, 48
+	lsl	w2, w2, 1
+	bl	ftl_memcpy
+	ldrh	w2, [x26,1952]
+	ldr	x1, [x21,8]
+	uxth	x0, w2
+	lsr	w2, w2, 3
+	add	x0, x0, 24
+	add	w2, w2, 4
+	lsr	x0, x0, 1
+	add	x0, x1, x0, lsl 2
+	ldr	x1, [x25,#:lo12:.LANCHOR0]
+	bl	ftl_memcpy
+	ldrh	w0, [x26,2064]
+	cbz	w0, .L2045
+	ldrh	w0, [x26,1952]
+	ldrh	w2, [x26,2056]
+	lsr	w1, w0, 3
+	add	w0, w1, w0, lsl 1
+	ldr	x1, [x21,8]
+	add	w0, w0, 52
+	lsl	w2, w2, 2
+	and	x0, x0, 65532
+	add	x0, x1, x0
+	ldr	x1, [x19,2216]
+	bl	ftl_memcpy
+.L2045:
+	add	x19, x24, :lo12:.LANCHOR4
+	mov	w0, 0
+	mov	w21, 0
+	mov	w27, 65535
+	add	x19, x19, 160
+	add	x20, x23, :lo12:.LANCHOR2
+	bl	FtlUpdateVaildLpn
+.L2046:
+	ldr	x0, [x20,-64]
+	str	x0, [x19,8]
+	ldr	x0, [x20,2120]
+	str	x0, [x19,16]
+	ldrh	w0, [x20,280]
+	ldrh	w1, [x20,282]
+	orr	w0, w1, w0, lsl 10
+	mov	w1, 1
+	str	w0, [x19,4]
+	mov	w2, w1
+	mov	w3, w1
+	mov	x0, x19
+	bl	FlashProgPages
+	add	x0, x25, :lo12:.LANCHOR0
+	ldrh	w1, [x20,282]
+	ldrh	w0, [x0,2020]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	blt	.L2047
+	ldrh	w0, [x20,280]
+	ldrh	w27, [x20,284]
+	strh	wzr, [x20,282]
+	strh	w0, [x20,284]
+	bl	FtlFreeSysBlkQueueOut
+	ldr	w1, [x20,196]
+	str	w1, [x20,288]
+	add	w2, w1, 1
+	str	w2, [x20,196]
+	ubfiz	w2, w0, 10, 16
+	str	w2, [x19,4]
+	str	w1, [x22,4]
+	mov	w1, 1
+	strh	w0, [x20,280]
+	mov	w2, w1
+	strh	w0, [x22,2]
+	mov	w3, w1
+	mov	x0, x19
+	bl	FlashProgPages
+.L2047:
+	ldrh	w1, [x20,282]
+	ldr	w2, [x19]
+	add	w1, w1, 1
+	cmn	w2, #1
+	uxth	w1, w1
+	strh	w1, [x20,282]
+	bne	.L2048
+	cmp	w1, 1
+	bne	.L2049
+	add	x1, x25, :lo12:.LANCHOR0
+	ldrh	w1, [x1,2020]
+	sub	w1, w1, #1
+	strh	w1, [x20,282]
+.L2049:
+	add	w21, w21, 1
+	uxth	w21, w21
+	cmp	w21, 3
+	bls	.L2046
+	add	x24, x24, :lo12:.LANCHOR4
+	adrp	x0, .LC115
+	add	x0, x0, :lo12:.LC115
+	mov	w2, w21
+	add	x23, x23, :lo12:.LANCHOR2
+	ldr	w1, [x24,164]
+	bl	printk
+	mov	w0, 1
+	str	w0, [x23,-96]
+	b	.L2044
+.L2048:
+	cmp	w1, 1
+	beq	.L2046
+	cmp	w2, 256
+	beq	.L2046
+	mov	w0, 65535
+	cmp	w27, w0
+	beq	.L2044
+	mov	w0, w27
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+.L2044:
+	mov	w0, 0
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	add	x0, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	ldrb	w20, [x0,120]
+	cbz	w20, .L2069
+	ldrb	w20, [x19,8]
+	cmp	w20, 1
+	bne	.L2064
+	ldrh	w22, [x19,4]
+	b	.L2056
+.L2064:
+	mov	w20, 0
+.L2069:
+	mov	w22, 12
+.L2056:
+	adrp	x23, .LANCHOR2
+	mov	w24, -1
+.L2057:
+	sub	w22, w22, #1
+	cmn	w22, #1
+	beq	.L2059
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L2058
+.L2059:
+	adrp	x1, .LANCHOR2
+	ldrh	w0, [x19]
+	add	x1, x1, :lo12:.LANCHOR2
+	ldrh	w3, [x19,4]
+	lsl	x0, x0, 1
+	add	x21, x21, :lo12:.LANCHOR0
+	ldr	x2, [x1,-40]
+	ldrh	w1, [x2,x0]
+	sub	w1, w1, w3
+	strh	w1, [x2,x0]
+	strb	wzr, [x19,6]
+	ldrh	w0, [x21,2018]
+	strh	w0, [x19,2]
+	strh	wzr, [x19,4]
+	ldp	x21, x22, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 128
+	ret
+.L2058:
+	mov	x0, x19
+	bl	get_new_active_ppa
+	str	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L2059
+	add	x2, x23, :lo12:.LANCHOR2
+	str	w24, [x29,96]
+	mov	w3, 0
+	ldr	x1, [x2,2120]
+	ldr	x0, [x2,-64]
+	str	x0, [x29,80]
+	str	x1, [x29,88]
+	str	w24, [x1,8]
+	str	w24, [x1,12]
+	ldrh	w0, [x19]
+	strh	w0, [x1,2]
+	strh	wzr, [x1]
+	ldr	w0, [x2,200]
+	str	w0, [x1,4]
+	mov	w1, 1
+	add	w0, w0, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x2,200]
+	add	x0, x29, 72
+	mov	w2, w20
+	bl	FlashProgPages
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	b	.L2057
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.align	2
+	.global	ftl_map_blk_gc
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	adrp	x22, .LANCHOR0
+	ldr	x21, [x0,16]
+	ldr	x23, [x0,40]
+	bl	ftl_free_no_use_map_blk
+	ldrh	w4, [x19,10]
+	ldrh	w2, [x19,8]
+	sub	w1, w4, #4
+	cmp	w2, w1
+	bge	.L2071
+	ldrh	w2, [x19,60]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L2073
+	add	x1, x22, :lo12:.LANCHOR0
+	ldrh	w2, [x19,2]
+	ldrh	w1, [x1,2020]
+	cmp	w2, w1
+	bcc	.L2073
+.L2071:
+	ldrh	w1, [x19,60]
+	uxth	w20, w0
+	mov	w0, 65535
+	cmp	w1, w0
+	beq	.L2075
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w3, [x19,2]
+	ldrh	w0, [x0,2020]
+	cmp	w0, w3
+	bhi	.L2075
+	mov	x2, 0
+.L2076:
+	uxth	w0, w2
+	cmp	w0, w4
+	bcs	.L2077
+	add	x2, x2, 1
+	add	x5, x21, x2, lsl 1
+	ldrh	w5, [x5,-2]
+	cmp	w5, w1
+	bne	.L2076
+	mov	w20, w0
+.L2077:
+	ubfiz	x2, x0, 1, 16
+	adrp	x0, .LC116
+	add	x0, x0, :lo12:.LC116
+	ldrh	w2, [x21,x2]
+	bl	printk
+	mov	w0, -1
+	strh	w0, [x19,60]
+.L2075:
+	ubfiz	x20, x20, 1, 16
+	ldrh	w24, [x21,x20]
+	cbz	w24, .L2073
+	ldr	w0, [x19,52]
+	cbnz	w0, .L2073
+	mov	w1, 1
+	str	w1, [x19,52]
+	strh	w0, [x21,x20]
+	ldrh	w0, [x19,8]
+	ldrh	w1, [x19,2]
+	sub	w0, w0, #1
+	strh	w0, [x19,8]
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2020]
+	cmp	w1, w0
+	bcc	.L2079
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L2079:
+	adrp	x20, .LANCHOR4
+	adrp	x25, .LC117
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w21, 0
+	add	x20, x20, 160
+	adrp	x27, .LANCHOR2
+	add	x25, x25, :lo12:.LC117
+.L2080:
+	ldrh	w0, [x19,6]
+	cmp	w0, w21
+	bls	.L2090
+	ubfiz	x28, x21, 2, 16
+	ldr	w0, [x23,x28]
+	cmp	w24, w0, lsr 10
+	bne	.L2081
+	add	x26, x27, :lo12:.LANCHOR2
+	mov	w1, 1
+	mov	w2, w1
+	ldr	x3, [x26,2120]
+	ldr	x0, [x26,2080]
+	str	x3, [x20,16]
+	str	x0, [x20,8]
+	str	x3, [x29,104]
+	ldr	w0, [x23,x28]
+	str	w0, [x20,4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	w0, [x20]
+	ldr	x3, [x29,104]
+	cmn	w0, #1
+	bne	.L2082
+	str	wzr, [x23,x28]
+	mov	x0, x25
+	ldr	w1, [x20,4]
+	ldrh	w2, [x3,8]
+	bl	printk
+	mov	w0, 1
+	str	w0, [x26,-96]
+	b	.L2081
+.L2082:
+	ldr	x2, [x20,8]
+	mov	x0, x19
+	mov	w1, w21
+	bl	FtlMapWritePage
+.L2081:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L2080
+.L2090:
+	mov	w0, w24
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+	str	wzr, [x19,52]
+.L2073:
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x22,2020]
+	cmp	w1, w0
+	bcc	.L2084
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L2084:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	2
+	.global	Ftl_write_map_blk_to_last_page
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	stp	x29, x30, [sp, -64]!
+	adrp	x1, .LANCHOR2
+	add	x29, sp, 0
+	add	x3, x1, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	mov	x23, x1
+	ldr	w20, [x3,-96]
+	ldr	x21, [x0,16]
+	ldr	x24, [x0,40]
+	cbnz	w20, .L2092
+	mov	x19, x0
+	ldrh	w0, [x0]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L2093
+	ldrh	w0, [x19,8]
+	add	w0, w0, 1
+	strh	w0, [x19,8]
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x21]
+	strh	w20, [x19,2]
+	ldr	w0, [x19,48]
+	strh	w20, [x19]
+	add	w0, w0, 1
+	str	w0, [x19,48]
+	b	.L2092
+.L2093:
+	ubfiz	x0, x0, 1, 16
+	ldrh	w22, [x21,x0]
+	adrp	x21, .LANCHOR4
+	ldrh	w0, [x19,2]
+	add	x1, x21, :lo12:.LANCHOR4
+	orr	w0, w0, w22, lsl 10
+	str	w0, [x1,164]
+	ldr	x0, [x3,-64]
+	str	x0, [x1,168]
+	ldr	x0, [x3,2120]
+	str	x0, [x1,176]
+	ldr	w1, [x19,48]
+	str	w1, [x0,4]
+	mov	w1, -1291
+	strh	w1, [x0,8]
+	ldrh	w1, [x19,4]
+	strh	w1, [x0]
+	mov	w1, 255
+	strh	w22, [x0,2]
+	adrp	x0, .LANCHOR0+2020
+	ldrh	w2, [x0,#:lo12:.LANCHOR0+2020]
+	ldr	x0, [x3,-64]
+	lsl	w2, w2, 3
+	bl	ftl_memset
+	mov	w1, w20
+.L2094:
+	ldrh	w0, [x19,6]
+	cmp	w0, w1
+	bls	.L2097
+	ubfiz	x3, x1, 2, 32
+	ldr	w0, [x24,x3]
+	cmp	w22, w0, lsr 10
+	bne	.L2095
+	add	x2, x23, :lo12:.LANCHOR2
+	add	w20, w20, 1
+	uxth	w20, w20
+	ldr	x4, [x2,-64]
+	ubfiz	x0, x20, 3, 16
+	str	w1, [x4,x0]
+	ldr	x2, [x2,-64]
+	ldr	w3, [x24,x3]
+	add	x0, x2, x0
+	str	w3, [x0,4]
+.L2095:
+	add	w1, w1, 1
+	uxth	w1, w1
+	b	.L2094
+.L2097:
+	mov	w1, 1
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x0, x0, 160
+	mov	w2, w1
+	mov	w3, 0
+	bl	FlashProgPages
+	ldrh	w0, [x19,2]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+.L2092:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	2
+	.global	FtlMapWritePage
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	add	x0, x22, :lo12:.LANCHOR2
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x23, x24, [sp,48]
+	mov	w25, w1
+	mov	x27, x2
+	ldr	w21, [x0,-96]
+	cbnz	w21, .L2099
+	adrp	x20, .LANCHOR4
+	adrp	x26, .LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR4
+	adrp	x24, .LC118
+	add	x0, x24, :lo12:.LC118
+	mov	x28, x26
+	add	x20, x20, 160
+	str	x0, [x29,104]
+.L2100:
+	add	x1, x22, :lo12:.LANCHOR2
+	ldr	w0, [x1,180]
+	add	w0, w0, 1
+	str	w0, [x1,180]
+	add	x0, x26, :lo12:.LANCHOR0
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x0,2020]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	bge	.L2101
+	ldrh	w1, [x19]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2102
+.L2101:
+	mov	x0, x19
+	bl	Ftl_write_map_blk_to_last_page
+.L2102:
+	ldrh	w1, [x19]
+	mov	w2, 16
+	ldr	x0, [x19,16]
+	adrp	x23, .LANCHOR4
+	ldrh	w24, [x0,x1,lsl 1]
+	mov	w1, 0
+	ldrh	w0, [x19,2]
+	str	x27, [x20,8]
+	orr	w0, w0, w24, lsl 10
+	str	w0, [x20,4]
+	add	x0, x22, :lo12:.LANCHOR2
+	ldr	x0, [x0,2120]
+	str	x0, [x20,16]
+	bl	ftl_memset
+	ldr	x0, [x20,16]
+	ldr	w1, [x19,48]
+	str	w1, [x0,4]
+	strh	w25, [x0,8]
+	ldrh	w1, [x19,4]
+	strh	w1, [x0]
+	mov	w1, 1
+	strh	w24, [x0,2]
+	mov	w2, w1
+	mov	w3, w1
+	mov	x0, x20
+	bl	FlashProgPages
+	ldrh	w0, [x19,2]
+	add	w0, w0, 1
+	uxth	w0, w0
+	strh	w0, [x19,2]
+	ldr	w1, [x20]
+	cmn	w1, #1
+	bne	.L2103
+	ldr	x0, [x29,104]
+	add	w21, w21, 1
+	ldr	w1, [x20,4]
+	uxth	w21, w21
+	bl	printk
+	ldrh	w0, [x19,2]
+	cmp	w0, 2
+	bhi	.L2104
+	add	x0, x28, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2020]
+	sub	w0, w0, #1
+	strh	w0, [x19,2]
+.L2104:
+	cmp	w21, 3
+	bls	.L2100
+	add	x23, x23, :lo12:.LANCHOR4
+	adrp	x0, .LC119
+	add	x0, x0, :lo12:.LC119
+	mov	w2, w21
+	add	x22, x22, :lo12:.LANCHOR2
+	ldr	w1, [x23,164]
+	bl	printk
+	mov	w0, 1
+	str	w0, [x22,-96]
+	b	.L2099
+.L2103:
+	cbz	w1, .L2106
+	strh	w24, [x19,60]
+.L2106:
+	cmp	w0, 1
+	beq	.L2100
+	cmp	w1, 256
+	beq	.L2100
+	add	x23, x23, :lo12:.LANCHOR4
+	ldr	x0, [x19,40]
+	ldr	w1, [x23,164]
+	str	w1, [x0,w25,uxtw 2]
+.L2099:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	2
+	.global	load_l2p_region
+	.type	load_l2p_region, %function
+load_l2p_region:
+	stp	x29, x30, [sp, -64]!
+	adrp	x2, .LANCHOR2
+	uxth	x1, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	add	x20, x2, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	uxth	w23, w0
+	ubfiz	x0, x23, 2, 16
+	ldr	x3, [x20,2216]
+	stp	x21, x22, [sp,32]
+	mov	x22, x2
+	ldr	w21, [x3,x0]
+	cbnz	w21, .L2111
+	ldr	x0, [x20,144]
+	lsl	x19, x1, 4
+	adrp	x2, .LANCHOR0+2028
+	mov	w1, 255
+	add	x0, x0, x19
+	ldrh	w2, [x2,#:lo12:.LANCHOR0+2028]
+	ldr	x0, [x0,8]
+	bl	ftl_memset
+	ldr	x0, [x20,144]
+	strh	w23, [x0,x19]
+	ldr	x1, [x20,144]
+	add	x19, x1, x19
+	str	w21, [x19,4]
+	b	.L2112
+.L2111:
+	lsl	x19, x1, 4
+	ldr	x1, [x20,144]
+	adrp	x24, .LANCHOR4
+	add	x24, x24, :lo12:.LANCHOR4
+	add	x1, x1, x19
+	add	x0, x24, 160
+	ldr	x1, [x1,8]
+	str	x1, [x0,8]
+	ldr	x1, [x20,2120]
+	str	x1, [x0,16]
+	mov	w1, 1
+	mov	w2, w1
+	str	w21, [x0,4]
+	bl	FlashReadPages
+	ldr	w0, [x24,160]
+	cmp	w0, 256
+	bne	.L2113
+	adrp	x0, .LC120
+	mov	w2, w21
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC120
+	lsr	w21, w21, 10
+	bl	printk
+	strh	w21, [x20,2316]
+	add	x0, x20, 2256
+	ldr	x2, [x20,144]
+	mov	w1, w23
+	add	x2, x2, x19
+	ldr	x2, [x2,8]
+	bl	FtlMapWritePage
+.L2113:
+	add	x2, x22, :lo12:.LANCHOR2
+	ldr	x0, [x2,144]
+	add	x0, x0, x19
+	str	wzr, [x0,4]
+	ldr	x0, [x2,144]
+	strh	w23, [x0,x19]
+.L2112:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	load_l2p_region, .-load_l2p_region
+	.align	2
+	.global	flush_l2p_region
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	ubfiz	x19, x0, 4, 16
+	add	x20, x20, :lo12:.LANCHOR2
+	add	x0, x20, 2256
+	ldr	x1, [x20,144]
+	add	x2, x1, x19
+	ldrh	w1, [x1,x19]
+	ldr	x2, [x2,8]
+	bl	FtlMapWritePage
+	ldr	x0, [x20,144]
+	add	x19, x0, x19
+	ldr	w0, [x19,4]
+	and	w0, w0, 2147483647
+	str	w0, [x19,4]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	2
+	.global	log2phys
+	.type	log2phys, %function
+log2phys:
+	stp	x29, x30, [sp, -96]!
+	adrp	x5, .LANCHOR0
+	mov	x4, 1
+	add	x5, x5, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	str	x25, [sp,64]
+	adrp	x23, .LANCHOR2
+	mov	x21, x1
+	add	x1, x23, :lo12:.LANCHOR2
+	ldrh	w3, [x5,2026]
+	mov	w22, w2
+	add	w3, w3, 7
+	ldr	x25, [x1,144]
+	lsr	w20, w0, w3
+	lsl	x3, x4, x3
+	sub	w3, w3, #1
+	mov	x4, 0
+	and	w0, w3, w0
+	uxth	w20, w20
+	uxth	x24, w0
+	ldrh	w0, [x5,2058]
+.L2116:
+	uxth	x19, w4
+	cmp	w19, w0
+	bcs	.L2128
+	add	x4, x4, 1
+	add	x1, x25, x4, lsl 4
+	ldrh	w1, [x1,-16]
+	cmp	w1, w20
+	bne	.L2116
+.L2117:
+	cbnz	w22, .L2118
+	add	x0, x23, :lo12:.LANCHOR2
+	ldr	x1, [x0,144]
+	add	x1, x1, x19, lsl 4
+	ldr	x0, [x1,8]
+	ldr	w0, [x0,x24,lsl 2]
+	str	w0, [x21]
+	b	.L2119
+.L2118:
+	add	x1, x23, :lo12:.LANCHOR2
+	lsl	x0, x19, 4
+	ldr	w3, [x21]
+	ldr	x2, [x1,144]
+	add	x2, x2, x0
+	ldr	x2, [x2,8]
+	str	w3, [x2,x24,lsl 2]
+	strh	w20, [x1,152]
+	ldr	x2, [x1,144]
+	add	x0, x2, x0
+	ldr	w2, [x0,4]
+	orr	w2, w2, -2147483648
+	str	w2, [x0,4]
+.L2119:
+	add	x23, x23, :lo12:.LANCHOR2
+	ldr	x0, [x23,144]
+	add	x19, x0, x19, lsl 4
+	ldr	w0, [x19,4]
+	cmn	w0, #1
+	beq	.L2125
+	add	w0, w0, 1
+	str	w0, [x19,4]
+	b	.L2125
+.L2128:
+	bl	select_l2p_ram_region
+	uxth	x19, w0
+	ubfiz	x2, x19, 4, 16
+	mov	w1, w0
+	add	x3, x25, x2
+	ldrh	w4, [x25,x2]
+	mov	w2, 65535
+	cmp	w4, w2
+	beq	.L2122
+	ldr	w2, [x3,4]
+	tbz	w2, #31, .L2122
+	str	x1, [x29,88]
+	bl	flush_l2p_region
+	ldr	x1, [x29,88]
+.L2122:
+	mov	w0, w20
+	bl	load_l2p_region
+	b	.L2117
+.L2125:
+	mov	w0, 0
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	log2phys, .-log2phys
+	.align	2
+	.global	FtlReUsePrevPpa
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w0
+	lsr	x0, x1, 10
+	stp	x21, x22, [sp,32]
+	str	w1, [x29,60]
+	adrp	x21, .LANCHOR2
+	bl	P2V_block_in_plane
+	uxth	w0, w0
+	add	x2, x21, :lo12:.LANCHOR2
+	ubfiz	x22, x0, 1, 16
+	ldr	x3, [x2,-40]
+	ldrh	w1, [x3,x22]
+	cbnz	w1, .L2130
+	ldr	x19, [x2,-16]
+	cbz	x19, .L2131
+	ldrh	w3, [x2,-8]
+	mov	x4, -6148914691236517206
+	ldr	x2, [x2,-56]
+	mov	w5, 65535
+	sub	x19, x19, x2
+	asr	x19, x19, 1
+	madd	x19, x4, x19, x19
+	mov	w4, 6
+	uxth	w19, w19
+.L2132:
+	cmp	w1, w3
+	beq	.L2131
+	cmp	w19, w0
+	bne	.L2133
+	add	x21, x21, :lo12:.LANCHOR2
+	mov	w1, w19
+	sub	x0, x21, #16
+	bl	List_remove_node
+	ldrh	w0, [x21,-8]
+	sub	w0, w0, #1
+	strh	w0, [x21,-8]
+	mov	w0, w19
+	bl	INSERT_DATA_LIST
+	ldr	x1, [x21,-40]
+	ldrh	w0, [x1,x22]
+	add	w0, w0, 1
+	strh	w0, [x1,x22]
+	b	.L2131
+.L2133:
+	umull	x19, w19, w4
+	ldrh	w19, [x2,x19]
+	cmp	w19, w5
+	beq	.L2131
+	add	w1, w1, 1
+	uxth	w1, w1
+	b	.L2132
+.L2130:
+	add	w1, w1, 1
+	strh	w1, [x3,x22]
+.L2131:
+	add	x1, x29, 60
+	mov	w0, w20
+	mov	w2, 1
+	bl	log2phys
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	2
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	stp	x29, x30, [sp, -144]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x27, x0
+	adrp	x19, .LANCHOR2
+	ldr	x0, [x0,40]
+	adrp	x20, .LANCHOR4
+	str	x0, [x29,136]
+	adrp	x25, .LANCHOR0
+	ldr	x0, [x27,24]
+	mov	w24, 0
+	str	x0, [x29,112]
+	mov	x26, x25
+	ldrh	w0, [x27,8]
+	ldrh	w23, [x27,6]
+	str	w0, [x29,132]
+	ldr	x0, [x29,136]
+	lsl	w2, w23, 2
+	ldr	x21, [x27,16]
+	bl	ftl_memset
+	str	x20, [x29,120]
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x4, x20, :lo12:.LANCHOR4
+	add	x4, x4, 160
+	str	wzr, [x27,52]
+	str	wzr, [x27,48]
+	ldr	x1, [x0,-64]
+	ldr	x22, [x0,2120]
+	mov	w0, -1
+	str	x1, [x4,8]
+	str	x22, [x4,16]
+	mov	x20, x4
+	strh	w0, [x27]
+	strh	w0, [x27,2]
+	mov	w0, 1
+	str	w0, [x27,56]
+	ldr	w0, [x29,132]
+	sub	w0, w0, #1
+	str	w0, [x29,128]
+.L2139:
+	ldr	w0, [x29,132]
+	cmp	w24, w0
+	bge	.L2156
+	ldr	w0, [x29,128]
+	sxtw	x28, w24
+	cmp	w24, w0
+	bne	.L2140
+	lsl	x0, x28, 1
+	mov	w1, 1
+	add	x25, x21, x0
+	ldrh	w0, [x21,x0]
+	bl	FtlGetLastWrittenPage
+	sxth	w1, w0
+	add	w0, w0, 1
+	strh	w0, [x27,2]
+	ldr	x0, [x29,112]
+	add	w20, w1, 1
+	strh	w24, [x27]
+	mov	w24, 0
+	ldr	w0, [x0,x28,lsl 2]
+	str	w0, [x27,48]
+	ldr	x0, [x29,120]
+	add	x26, x0, :lo12:.LANCHOR4
+	add	x26, x26, 160
+.L2141:
+	cmp	w24, w20
+	bge	.L2156
+	ldrh	w0, [x25]
+	mov	w1, 1
+	mov	w2, w1
+	orr	w0, w24, w0, lsl 10
+	str	w0, [x26,4]
+	mov	x0, x26
+	bl	FlashReadPages
+	ldr	w0, [x26]
+	cmn	w0, #1
+	beq	.L2142
+	ldrh	w0, [x22,8]
+	cmp	w0, w23
+	bcs	.L2143
+	ldrh	w2, [x22]
+	ldrh	w1, [x27,4]
+	cmp	w2, w1
+	bne	.L2143
+	ubfiz	x0, x0, 2, 16
+	ldr	x2, [x29,136]
+	ldr	w1, [x26,4]
+	str	w1, [x2,x0]
+	b	.L2143
+.L2142:
+	ldrh	w0, [x25]
+	strh	w0, [x27,60]
+.L2143:
+	add	w24, w24, 1
+	sxth	w24, w24
+	b	.L2141
+.L2156:
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x22, .LANCHOR0
+	add	x0, x19, 2256
+	cmp	x27, x0
+	bne	.L2146
+	b	.L2181
+.L2140:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x0, [x0,-64]
+	str	x0, [x20,8]
+	lsl	x0, x28, 1
+	add	x28, x21, x0
+	ldrh	w1, [x21,x0]
+	add	x0, x25, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2020]
+	sub	w0, w0, #1
+	orr	w0, w0, w1, lsl 10
+	mov	w1, 1
+	str	w0, [x20,4]
+	mov	w2, w1
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	w0, [x20]
+	cmn	w0, #1
+	beq	.L2169
+	ldrh	w1, [x22]
+	mov	w3, 0
+	ldrh	w0, [x27,4]
+	cmp	w1, w0
+	bne	.L2178
+	ldrh	w1, [x22,8]
+	mov	w0, 64245
+	cmp	w1, w0
+	bne	.L2178
+.L2148:
+	add	x0, x26, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2020]
+	sub	w0, w0, #1
+	cmp	w3, w0
+	bge	.L2151
+	add	x0, x19, :lo12:.LANCHOR2
+	sbfiz	x1, x3, 3, 32
+	ldr	x2, [x0,-64]
+	ldrh	w0, [x2,x1]
+	cmp	w0, w23
+	bcs	.L2149
+	add	x1, x2, x1
+	ubfiz	x0, x0, 2, 16
+	ldr	x2, [x29,136]
+	ldr	w1, [x1,4]
+	str	w1, [x2,x0]
+.L2149:
+	add	w3, w3, 1
+	sxth	w3, w3
+	b	.L2148
+.L2169:
+	mov	w3, 0
+.L2178:
+	add	x0, x26, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2020]
+	cmp	w3, w0
+	bge	.L2151
+	ldrh	w0, [x28]
+	mov	w1, 1
+	mov	w2, w1
+	str	x3, [x29,104]
+	orr	w0, w3, w0, lsl 10
+	str	w0, [x20,4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	w0, [x20]
+	ldr	x3, [x29,104]
+	cmn	w0, #1
+	beq	.L2152
+	ldrh	w0, [x22,8]
+	cmp	w0, w23
+	bcs	.L2152
+	ldrh	w2, [x22]
+	ldrh	w1, [x27,4]
+	cmp	w2, w1
+	bne	.L2152
+	ubfiz	x0, x0, 2, 16
+	ldr	x2, [x29,136]
+	ldr	w1, [x20,4]
+	str	w1, [x2,x0]
+.L2152:
+	add	w3, w3, 1
+	sxth	w3, w3
+	b	.L2178
+.L2151:
+	add	w6, w24, 1
+	sxth	w24, w6
+	b	.L2139
+.L2167:
+	ubfiz	x24, x23, 2, 32
+	ldr	x0, [x19,2224]
+	ldr	w1, [x0,x24]
+	sub	w2, w1, #1
+	cmn	w2, #3
+	bls	.L2182
+.L2161:
+	add	w23, w23, 1
+.L2159:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2056]
+	cmp	w23, w0
+	bcc	.L2167
+.L2146:
+	mov	x0, x27
+	add	x22, x22, :lo12:.LANCHOR0
+	bl	ftl_free_no_use_map_blk
+	ldrh	w1, [x27,2]
+	ldrh	w0, [x22,2020]
+	cmp	w1, w0
+	bne	.L2158
+	mov	x0, x27
+	bl	ftl_map_blk_alloc_new_blk
+	b	.L2158
+.L2181:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2064]
+	cbz	w0, .L2146
+	ldr	x0, [x29,120]
+	adrp	x25, .LC121
+	mov	w23, 0
+	add	x25, x25, :lo12:.LC121
+	add	x20, x0, :lo12:.LANCHOR4
+	add	x20, x20, 160
+	b	.L2159
+.L2182:
+	ldr	x2, [x19,2216]
+	ldr	w2, [x2,x24]
+	cmp	w1, w2
+	beq	.L2161
+	ldr	x1, [x19,-64]
+	ldr	x26, [x19,2120]
+	str	x1, [x20,8]
+	mov	w1, 1
+	str	x26, [x20,16]
+	mov	w2, w1
+	ldr	w0, [x0,x24]
+	str	w0, [x20,4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	w0, [x20]
+	mov	w3, 0
+	cmn	w0, #1
+	beq	.L2163
+	ldrh	w1, [x26]
+	ldrh	w0, [x19,2260]
+	cmp	w1, w0
+	bne	.L2163
+	ldr	w3, [x26,4]
+.L2163:
+	ldr	x0, [x19,2216]
+	mov	w1, 1
+	mov	w2, w1
+	str	x3, [x29,136]
+	ldr	w0, [x0,x24]
+	str	w0, [x20,4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldr	w4, [x26,4]
+	ldr	x3, [x29,136]
+	cmp	w3, w4
+	bls	.L2161
+	ldr	x1, [x19,2224]
+	mov	x0, x25
+	ldr	x2, [x19,2216]
+	ldr	w1, [x1,x24]
+	ldr	w2, [x2,x24]
+	bl	printk
+	ldr	x0, [x19,2224]
+	ldr	w1, [x0,x24]
+	ldr	x0, [x19,2216]
+	str	w1, [x0,x24]
+	mov	w1, 0
+	ldr	x0, [x19,2224]
+	ldrh	w2, [x19,2320]
+	ldr	w0, [x0,x24]
+	ubfx	x0, x0, 10, 16
+.L2164:
+	cmp	w1, w2
+	bge	.L2183
+	ldrh	w3, [x21,w1,sxtw 1]
+	cmp	w3, w0
+	beq	.L2161
+	add	w1, w1, 1
+	sxth	w1, w1
+	b	.L2164
+.L2183:
+	add	x1, x22, :lo12:.LANCHOR0
+	ldr	w1, [x1,2048]
+	cmp	w2, w1
+	bcs	.L2161
+	ubfiz	x2, x2, 1, 16
+	strh	w0, [x21,x2]
+	ldrh	w1, [x19,2320]
+	add	w1, w1, 1
+	strh	w1, [x19,2320]
+	bl	remove_from_free_sys_Queue
+	b	.L2161
+.L2158:
+	mov	x0, x27
+	bl	ftl_map_blk_gc
+	mov	x0, x27
+	bl	ftl_map_blk_gc
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	2
+	.global	FtlLoadVonderInfo
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	adrp	x0, .LANCHOR4
+	adrp	x1, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR4
+	add	x1, x1, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x0, x0, 224
+	add	x29, sp, 0
+	ldrh	w2, [x1,2040]
+	strh	w2, [x0,10]
+	mov	w2, -3962
+	strh	w2, [x0,4]
+	ldrh	w2, [x1,2066]
+	strh	w2, [x0,8]
+	ldrh	w2, [x1,2042]
+	ldr	x1, [x1,2072]
+	str	x1, [x0,16]
+	adrp	x1, .LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR2
+	strh	w2, [x0,6]
+	ldr	x2, [x1,2200]
+	str	x2, [x0,24]
+	ldr	x2, [x1,2192]
+	ldr	x1, [x1,2208]
+	str	x1, [x0,40]
+	mov	w1, -1
+	str	x2, [x0,32]
+	strh	w1, [x0,60]
+	bl	FtlMapTblRecovery
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlLoadMapInfo
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlL2PDataInit
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 2256
+	bl	FtlMapTblRecovery
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	FtlReadRefresh
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	stp	x29, x30, [sp, -112]!
+	adrp	x1, .LANCHOR2
+	add	x0, x1, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	add	x2, x0, 352
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	adrp	x20, .LANCHOR0
+	ldr	w3, [x2,80]
+	cbz	w3, .L2187
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	w3, [x2,84]
+	ldr	w1, [x1,2096]
+	cmp	w3, w1
+	bcs	.L2188
+	mov	w21, 2048
+	mov	x19, x0
+.L2193:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	w0, [x19,436]
+	ldr	w1, [x1,2096]
+	cmp	w0, w1
+	bcs	.L2190
+	add	x1, x29, 52
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x19,436]
+	ldr	w1, [x29,52]
+	add	w0, w0, 1
+	str	w0, [x19,436]
+	cmn	w1, #1
+	beq	.L2191
+	str	w1, [x29,60]
+	mov	w2, 0
+	str	w0, [x29,80]
+	mov	w1, 1
+	add	x0, x29, 56
+	str	xzr, [x29,64]
+	str	xzr, [x29,72]
+	str	wzr, [x29,56]
+	bl	FlashReadPages
+	ldr	w0, [x29,56]
+	cmp	w0, 256
+	bne	.L2190
+	ldr	w0, [x29,52]
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	b	.L2190
+.L2191:
+	subs	w21, w21, #1
+	bne	.L2193
+.L2190:
+	mov	w0, -1
+	b	.L2195
+.L2188:
+	ldr	w0, [x0,164]
+	str	wzr, [x2,80]
+	str	wzr, [x2,84]
+	str	w0, [x2,76]
+	b	.L2201
+.L2187:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	w3, [x0,216]
+	mov	w2, 4194304
+	ldr	w0, [x0,160]
+	ldrb	w4, [x20,120]
+	cbnz	w4, .L2196
+	add	w0, w0, w3, lsr 10
+	mov	w3, 33554432
+	asr	w2, w3, w0
+.L2196:
+	add	x4, x1, :lo12:.LANCHOR2
+	ldr	w3, [x4,164]
+	ldr	w0, [x4,428]
+	add	w5, w3, 1048576
+	cmp	w0, w5
+	bhi	.L2197
+	add	w0, w2, w0
+	cmp	w0, w3
+	bcc	.L2197
+	ldrb	w2, [x4,252]
+	mov	w0, 0
+	cbnz	w2, .L2195
+.L2197:
+	add	x0, x1, :lo12:.LANCHOR2
+	mov	w1, 1
+	str	wzr, [x0,436]
+	str	w1, [x0,432]
+	str	w3, [x0,428]
+.L2201:
+	mov	w0, 0
+.L2195:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	2
+	.global	FtlVendorPartWrite
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	stp	x29, x30, [sp, -176]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	mov	w26, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	mov	w28, w1
+	add	w1, w26, w1
+	ldrh	w21, [x0,2026]
+	mov	x25, x2
+	ldrh	w0, [x0,2012]
+	mov	w20, -1
+	cmp	w1, w0
+	bhi	.L2203
+	adrp	x24, .LANCHOR4
+	lsr	w21, w26, w21
+	add	x24, x24, :lo12:.LANCHOR4
+	mov	w20, 0
+	adrp	x27, .LANCHOR2
+	add	x24, x24, 224
+.L2204:
+	cbz	w28, .L2203
+	adrp	x0, .LANCHOR2
+	add	x2, x0, :lo12:.LANCHOR2
+	ldr	x0, [x2,2208]
+	ldr	w4, [x0,w21,uxtw 2]
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2024]
+	uxth	w0, w28
+	udiv	w22, w26, w1
+	msub	w22, w22, w1, w26
+	sub	w19, w1, w22
+	uxth	w19, w19
+	cmp	w19, w28
+	csel	w19, w0, w19, hi
+	cmp	w19, w1
+	beq	.L2206
+	cbz	w4, .L2206
+	ldr	x0, [x2,2088]
+	mov	w1, 1
+	str	x0, [x29,128]
+	mov	w2, w1
+	add	x0, x29, 120
+	str	w4, [x29,124]
+	str	xzr, [x29,136]
+	bl	FlashReadPages
+	b	.L2207
+.L2206:
+	add	x0, x27, :lo12:.LANCHOR2
+	add	x2, x23, :lo12:.LANCHOR0
+	mov	w1, 0
+	ldr	x0, [x0,2088]
+	ldrh	w2, [x2,2028]
+	bl	ftl_memset
+.L2207:
+	add	x5, x27, :lo12:.LANCHOR2
+	lsl	w4, w19, 9
+	ubfiz	x22, x22, 9, 16
+	mov	w2, w4
+	mov	x1, x25
+	str	x4, [x29,104]
+	ldr	x0, [x5,2088]
+	sub	w28, w28, w19
+	str	x5, [x29,96]
+	add	w26, w26, w19
+	add	x0, x0, x22
+	bl	ftl_memcpy
+	ldr	x5, [x29,96]
+	mov	w1, w21
+	mov	x0, x24
+	add	w21, w21, 1
+	ldr	x2, [x5,2088]
+	bl	FtlMapWritePage
+	cmn	w0, #1
+	ldr	x4, [x29,104]
+	csinv	w20, w20, wzr, ne
+	add	x25, x25, x4, sxtw
+	b	.L2204
+.L2203:
+	mov	w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.align	2
+	.global	Ftl_save_ext_data
+	.type	Ftl_save_ext_data, %function
+Ftl_save_ext_data:
+	adrp	x0, .LANCHOR2
+	mov	w1, 19539
+	add	x0, x0, :lo12:.LANCHOR2
+	movk	w1, 0x4654, lsl 16
+	stp	x29, x30, [sp, -16]!
+	add	x2, x0, 352
+	add	x29, sp, 0
+	ldr	w3, [x0,352]
+	cmp	w3, w1
+	bne	.L2217
+	mov	w1, 71
+	movk	w1, 0x5000, lsl 16
+	str	w1, [x2,4]
+	ldr	w1, [x0,188]
+	str	w1, [x2,88]
+	ldr	w1, [x0,192]
+	str	w1, [x2,92]
+	ldr	w1, [x0,184]
+	str	w1, [x2,8]
+	ldr	w1, [x0,172]
+	str	w1, [x2,12]
+	ldr	w1, [x0,164]
+	str	w1, [x2,16]
+	ldr	w1, [x0,180]
+	str	w1, [x2,20]
+	ldr	w1, [x0,208]
+	str	w1, [x2,28]
+	ldr	w1, [x0,-72]
+	str	w1, [x2,32]
+	ldr	w1, [x0,168]
+	str	w1, [x2,36]
+	ldr	w1, [x0,176]
+	str	w1, [x2,40]
+	ldr	w1, [x0,216]
+	str	w1, [x2,44]
+	ldr	w1, [x0,220]
+	str	w1, [x2,48]
+	ldr	w1, [x0,344]
+	ldr	w0, [x0,2028]
+	str	w1, [x2,60]
+	mov	w1, 1
+	str	w0, [x2,64]
+	mov	w0, 0
+	bl	FtlVendorPartWrite
+.L2217:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
+	.align	2
+	.global	FtlEctTblFlush
+	.type	FtlEctTblFlush, %function
+FtlEctTblFlush:
+	adrp	x2, .LANCHOR2
+	mov	w1, 32
+	add	x3, x2, :lo12:.LANCHOR2
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w4, [x3,160]
+	cbz	w4, .L2220
+	ldr	w3, [x3,220]
+	cmp	w3, 29
+	mov	w3, 4
+	csel	w1, w1, w3, hi
+.L2220:
+	adrp	x3, .LANCHOR4
+	add	x3, x3, :lo12:.LANCHOR4
+	ldrh	w4, [x3,288]
+	cmp	w4, 31
+	bhi	.L2221
+	add	w4, w4, 1
+	mov	w1, 1
+	strh	w4, [x3,288]
+.L2221:
+	cbnz	w0, .L2222
+	add	x0, x2, :lo12:.LANCHOR2
+	ldr	x3, [x0,2160]
+	ldr	w0, [x3,20]
+	add	w1, w1, w0
+	ldr	w0, [x3,16]
+	cmp	w0, w1
+	bcc	.L2223
+.L2222:
+	add	x2, x2, :lo12:.LANCHOR2
+	ldr	x0, [x2,2160]
+	ldr	w1, [x0,16]
+	str	w1, [x0,20]
+	mov	w1, 17221
+	movk	w1, 0x4254, lsl 16
+	str	w1, [x0]
+	ldr	x0, [x2,2160]
+	ldrh	w1, [x2,2144]
+	str	wzr, [x0,4]
+	lsl	w3, w1, 9
+	str	w3, [x0,12]
+	ldr	w3, [x0,8]
+	ldr	x2, [x2,2160]
+	add	w3, w3, 1
+	str	w3, [x0,8]
+	mov	w0, 64
+	bl	FtlVendorPartWrite
+	bl	Ftl_save_ext_data
+.L2223:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlEctTblFlush, .-FtlEctTblFlush
+	.align	2
+	.global	FtlVendorPartRead
+	.type	FtlVendorPartRead, %function
+FtlVendorPartRead:
+	stp	x29, x30, [sp, -208]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	mov	w22, w1
+	adrp	x1, .LANCHOR0
+	stp	x23, x24, [sp,48]
+	mov	w23, w0
+	add	x0, x1, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	mov	x26, x2
+	add	w3, w23, w22
+	ldrh	w2, [x0,2012]
+	str	x1, [x29,136]
+	cmp	w3, w2
+	ldrh	w20, [x0,2026]
+	mov	w0, -1
+	bhi	.L2228
+	adrp	x27, .LANCHOR4
+	adrp	x0, .LC122
+	add	x0, x0, :lo12:.LC122
+	add	x27, x27, :lo12:.LANCHOR4
+	str	x0, [x29,128]
+	lsr	w20, w23, w20
+	add	x0, x27, 224
+	mov	w21, 0
+	str	x0, [x29,120]
+.L2229:
+	cbz	w22, .L2237
+	adrp	x25, .LANCHOR2
+	add	x4, x25, :lo12:.LANCHOR2
+	ldr	x0, [x4,2208]
+	ldr	w3, [x0,w20,uxtw 2]
+	ldr	x0, [x29,136]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w19, [x0,2024]
+	uxth	w0, w22
+	udiv	w24, w23, w19
+	msub	w24, w24, w19, w23
+	sub	w19, w19, w24
+	uxth	w19, w19
+	cmp	w19, w22
+	csel	w19, w0, w19, hi
+	lsl	w28, w19, 9
+	cbz	w3, .L2231
+	ldr	x0, [x4,2088]
+	mov	w1, 1
+	str	x0, [x29,160]
+	mov	w2, w1
+	add	x0, x29, 152
+	str	w3, [x29,156]
+	str	x3, [x29,104]
+	str	x4, [x29,112]
+	str	xzr, [x29,168]
+	bl	FlashReadPages
+	ldr	w0, [x29,152]
+	ldr	x3, [x29,104]
+	cmn	w0, #1
+	ldr	w0, [x27,160]
+	csinv	w21, w21, wzr, ne
+	cmp	w0, 256
+	bne	.L2233
+	ldr	x0, [x29,128]
+	mov	w1, w20
+	mov	w2, w3
+	bl	printk
+	ldr	x4, [x29,112]
+	mov	w1, w20
+	ldr	x0, [x29,120]
+	ldr	x2, [x4,2088]
+	bl	FtlMapWritePage
+.L2233:
+	add	x25, x25, :lo12:.LANCHOR2
+	ubfiz	x24, x24, 9, 16
+	mov	x0, x26
+	mov	w2, w28
+	ldr	x1, [x25,2088]
+	add	x1, x1, x24
+	bl	ftl_memcpy
+	b	.L2234
+.L2231:
+	mov	x0, x26
+	mov	w1, w3
+	mov	w2, w28
+	bl	ftl_memset
+.L2234:
+	add	w20, w20, 1
+	sub	w22, w22, w19
+	add	w23, w23, w19
+	add	x26, x26, x28, sxtw
+	b	.L2229
+.L2237:
+	mov	w0, w21
+.L2228:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 208
+	ret
+	.size	FtlVendorPartRead, .-FtlVendorPartRead
+	.align	2
+	.global	FtlLoadEctTbl
+	.type	FtlLoadEctTbl, %function
+FtlLoadEctTbl:
+	stp	x29, x30, [sp, -32]!
+	mov	w0, 64
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x19,2144]
+	ldr	x2, [x19,2160]
+	bl	FtlVendorPartRead
+	ldr	x0, [x19,2160]
+	ldr	w1, [x0]
+	mov	w0, 17221
+	movk	w0, 0x4254, lsl 16
+	cmp	w1, w0
+	beq	.L2239
+	adrp	x0, .LC73
+	adrp	x1, .LC123
+	add	x1, x1, :lo12:.LC123
+	add	x0, x0, :lo12:.LC73
+	bl	printk
+	ldrh	w2, [x19,2144]
+	mov	w1, 0
+	ldr	x0, [x19,2160]
+	lsl	w2, w2, 9
+	bl	ftl_memset
+.L2239:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
+	.align	2
+	.global	Ftl_load_ext_data
+	.type	Ftl_load_ext_data, %function
+Ftl_load_ext_data:
+	stp	x29, x30, [sp, -48]!
+	mov	w1, 1
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x21, [sp,32]
+	add	x20, x19, :lo12:.LANCHOR2
+	add	x21, x20, 352
+	mov	x2, x21
+	bl	FtlVendorPartRead
+	ldr	w1, [x20,352]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	beq	.L2241
+	mov	x0, x21
+	mov	w1, 0
+	mov	w2, 512
+	bl	ftl_memset
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	str	w0, [x20,352]
+.L2241:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 19539
+	movk	w2, 0x4654, lsl 16
+	ldr	w3, [x0,352]
+	cmp	w3, w2
+	bne	.L2242
+	ldr	w2, [x0,440]
+	str	w2, [x0,188]
+	ldr	w2, [x0,444]
+	str	w2, [x0,192]
+	ldr	w2, [x0,360]
+	str	w2, [x0,184]
+	ldr	w2, [x0,364]
+	str	w2, [x0,172]
+	ldr	w2, [x0,368]
+	str	w2, [x0,164]
+	ldr	w2, [x0,372]
+	str	w2, [x0,180]
+	ldr	w2, [x0,380]
+	str	w2, [x0,208]
+	ldr	w2, [x0,384]
+	str	w2, [x0,-72]
+	ldr	w2, [x0,388]
+	str	w2, [x0,168]
+	ldr	w2, [x0,392]
+	str	w2, [x0,176]
+	ldr	w2, [x0,396]
+	str	w2, [x0,216]
+	ldr	w1, [x0,412]
+	ldr	w2, [x0,400]
+	str	w2, [x0,220]
+	str	w1, [x0,344]
+.L2242:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 34661
+	movk	w1, 0x1234, lsl 16
+	ldr	w2, [x0,420]
+	str	wzr, [x0,2028]
+	cmp	w2, w1
+	bne	.L2243
+	mov	w1, 1
+	str	w1, [x0,160]
+	adrp	x0, .LC73
+	adrp	x1, .LC124
+	add	x0, x0, :lo12:.LC73
+	add	x1, x1, :lo12:.LC124
+	bl	printk
+.L2243:
+	adrp	x2, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR0
+	ldr	x21, [sp,32]
+	ldr	w3, [x19,204]
+	ldrh	w1, [x2,2008]
+	ldr	w0, [x19,208]
+	madd	w0, w1, w3, w0
+	ldrh	w1, [x2,1952]
+	udiv	w0, w0, w1
+	str	w0, [x19,212]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.align	2
+	.global	StorageSysDataLoad
+	.type	StorageSysDataLoad, %function
+StorageSysDataLoad:
+	stp	x29, x30, [sp, -48]!
+	mov	x2, 512
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w0
+	mov	x19, x1
+	mov	x0, x1
+	mov	w1, 0
+	bl	memset
+	bl	rknand_device_lock
+	mov	x2, x19
+	mov	w1, 1
+	add	w0, w20, 512
+	bl	FtlVendorPartRead
+	str	x0, [x29,40]
+	bl	rknand_device_unlock
+	ldr	x0, [x29,40]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	StorageSysDataLoad, .-StorageSysDataLoad
+	.align	2
+	.global	FtlMapBlkWriteDumpData
+	.type	FtlMapBlkWriteDumpData, %function
+FtlMapBlkWriteDumpData:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	ldr	w1, [x0,56]
+	ldrh	w20, [x0,6]
+	ldr	x4, [x0,40]
+	cbz	w1, .L2245
+	adrp	x3, .LANCHOR2
+	str	wzr, [x0,56]
+	add	x3, x3, :lo12:.LANCHOR2
+	ldr	w1, [x3,-96]
+	cbnz	w1, .L2245
+	adrp	x2, .LANCHOR4
+	sub	w20, w20, #1
+	add	x1, x2, :lo12:.LANCHOR4
+	mov	x21, x0
+	uxth	w20, w20
+	ldr	x0, [x3,2080]
+	ldr	x3, [x3,2120]
+	add	x1, x1, 160
+	str	x3, [x1,16]
+	ubfiz	x3, x20, 2, 16
+	str	x0, [x1,8]
+	mov	x19, x2
+	ldr	w3, [x4,x3]
+	str	w3, [x1,4]
+	cbz	w3, .L2249
+	mov	x0, x1
+	mov	w1, 1
+	mov	w2, w1
+	bl	FlashReadPages
+	b	.L2250
+.L2249:
+	adrp	x2, .LANCHOR0+2028
+	mov	w1, 255
+	ldrh	w2, [x2,#:lo12:.LANCHOR0+2028]
+	bl	ftl_memset
+.L2250:
+	add	x2, x19, :lo12:.LANCHOR4
+	mov	x0, x21
+	mov	w1, w20
+	ldr	x2, [x2,168]
+	bl	FtlMapWritePage
+.L2245:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlMapBlkWriteDumpData, .-FtlMapBlkWriteDumpData
+	.align	2
+	.global	FtlRecoverySuperblock
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	stp	x29, x30, [sp, -208]!
+	mov	w2, 65535
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	ldrh	w0, [x0]
+	cmp	w0, w2
+	beq	.L2409
+	ldrh	w0, [x19,2]
+	adrp	x23, .LANCHOR0
+	str	w0, [x29,188]
+	ldrb	w0, [x19,6]
+	str	w0, [x29,176]
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	w1, [x29,188]
+	ldrh	w0, [x0,2018]
+	cmp	w0, w1
+	bne	.L2254
+	strh	wzr, [x19,4]
+	b	.L2415
+.L2254:
+	ldrh	w0, [x19,16]
+	mov	w1, 0
+.L2255:
+	cmp	w0, w2
+	bne	.L2418
+	add	w1, w1, 1
+	uxth	w1, w1
+	add	x0, x19, x1, sxtw 1
+	ldrh	w0, [x0,16]
+	b	.L2255
+.L2418:
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2257
+	bl	FtlGetLastWrittenPage
+	cmn	w0, #1
+	mov	w21, w0
+	beq	.L2258
+	add	x0, x23, :lo12:.LANCHOR0
+	mov	w24, w21
+	ldrb	w1, [x0,120]
+	cbnz	w1, .L2332
+	add	x0, x0, 196
+	ldrh	w24, [x0,w21,sxtw 1]
+	b	.L2332
+.L2257:
+	mov	w1, 0
+	bl	FtlGetLastWrittenPage
+	cmn	w0, #1
+	mov	w21, w0
+	beq	.L2258
+	mov	w24, w0
+.L2332:
+	add	x0, x23, :lo12:.LANCHOR0
+	mov	x2, x19
+	mov	w26, 0
+	mov	w8, 65535
+	mov	w9, 56
+	adrp	x10, .LANCHOR2
+	ldrh	w4, [x0,1944]
+	mov	w11, 4
+	ldrh	w7, [x0,2030]
+	add	x4, x19, x4, lsl 1
+	b	.L2260
+.L2258:
+	strh	wzr, [x19,2]
+.L2415:
+	strb	wzr, [x19,6]
+	b	.L2409
+.L2262:
+	ldrh	w1, [x2,16]
+	cmp	w1, w8
+	beq	.L2261
+	add	x5, x10, :lo12:.LANCHOR2
+	orr	w1, w24, w1, lsl 10
+	umull	x0, w26, w9
+	add	w3, w26, 1
+	ldr	x6, [x5,2056]
+	add	x6, x6, x0
+	str	w1, [x6,4]
+	ldr	x1, [x5,2056]
+	ldr	x5, [x5,904]
+	add	x0, x1, x0
+	mul	w1, w26, w7
+	uxth	w26, w3
+	str	xzr, [x0,8]
+	sdiv	w1, w1, w11
+	add	x1, x5, x1, sxtw 2
+	str	x1, [x0,16]
+.L2261:
+	add	x2, x2, 2
+.L2260:
+	cmp	x2, x4
+	bne	.L2262
+	ldrb	w0, [x19,8]
+	str	wzr, [x29,184]
+	cmp	w0, 1
+	bne	.L2263
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cmp	w0, wzr
+	cset	w0, ne
+	str	w0, [x29,184]
+.L2263:
+	adrp	x20, .LANCHOR2
+	ldr	w2, [x29,184]
+	add	x22, x20, :lo12:.LANCHOR2
+	mov	w1, w26
+	mov	x27, 0
+	mov	w25, 65535
+	mov	x28, 56
+	ldr	x0, [x22,2056]
+	bl	FlashReadPages
+	ldr	w0, [x22,200]
+	adrp	x22, .LC125
+	str	w0, [x29,168]
+	add	x22, x22, :lo12:.LC125
+	uxth	w0, w24
+	str	w0, [x29,160]
+.L2264:
+	uxth	w2, w27
+	cmp	w2, w26
+	bcs	.L2271
+	add	x6, x20, :lo12:.LANCHOR2
+	mul	x0, x27, x28
+	ldr	x4, [x6,2056]
+	add	x1, x4, x0
+	ldr	w0, [x4,x0]
+	cbnz	w0, .L2265
+	ldr	x7, [x1,16]
+	ldr	w4, [x7,4]
+	cmn	w4, #1
+	beq	.L2266
+	ldr	w1, [x6,200]
+	mov	w0, w4
+	str	x7, [x29,128]
+	str	x2, [x29,136]
+	str	x4, [x29,144]
+	str	x6, [x29,152]
+	bl	ftl_cmp_data_ver
+	ldr	x6, [x29,152]
+	ldr	x4, [x29,144]
+	ldr	x2, [x29,136]
+	ldr	x7, [x29,128]
+	cbz	w0, .L2266
+	add	w4, w4, 1
+	str	w4, [x6,200]
+.L2266:
+	ldr	w0, [x7]
+	cmn	w0, #1
+	bne	.L2267
+.L2271:
+	cmp	w2, w26
+	bne	.L2410
+	add	x0, x20, :lo12:.LANCHOR2
+	add	w21, w21, 1
+	uxth	w21, w21
+	ldr	x0, [x0,2056]
+	ldr	w0, [x0,4]
+	b	.L2411
+.L2265:
+	ldr	w1, [x1,4]
+	mov	x0, x22
+	bl	printk
+	ldr	w25, [x29,160]
+	adrp	x0, .LANCHOR4
+	ldrh	w1, [x19]
+	add	x0, x0, :lo12:.LANCHOR4
+	strh	w1, [x0,290]
+.L2267:
+	add	x27, x27, 1
+	b	.L2264
+.L2410:
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w1, 56
+	uxth	w21, w21
+	umull	x2, w2, w1
+	ldr	x0, [x0,2056]
+	add	x2, x0, x2
+	ldr	w0, [x2,4]
+.L2411:
+	lsr	x0, x0, 10
+	bl	P2V_plane
+	uxth	w26, w0
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2273
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w2, [x0,120]
+	cbnz	w2, .L2273
+	add	x0, x0, 196
+	ldrh	w21, [x0,w21,sxtw 1]
+.L2273:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2018]
+	cmp	w0, w21
+	bne	.L2274
+	strh	w21, [x19,2]
+	strb	wzr, [x19,6]
+	strh	wzr, [x19,4]
+.L2274:
+	ldrh	w0, [x29,176]
+	str	w0, [x29,152]
+	ldr	w0, [x29,188]
+	cmp	w21, w0
+	bne	.L2275
+	ldr	w0, [x29,152]
+	cmp	w26, w0
+	beq	.L2416
+.L2275:
+	ldr	w0, [x29,168]
+	sub	w22, w0, #1
+	mov	w0, 65535
+	cmp	w25, w0
+	bne	.L2276
+	cbnz	w1, .L2277
+.L2276:
+	add	x0, x20, :lo12:.LANCHOR2
+	uxth	w5, w24
+	ldr	w1, [x0,2348]
+	cmn	w1, #1
+	bne	.L2278
+	str	w22, [x0,2348]
+.L2278:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w25, [x29,188]
+	ldr	w6, [x0,2348]
+	ldr	w0, [x29,188]
+	add	w0, w0, 7
+	cmp	w0, w24, uxth
+	bge	.L2279
+	sub	w25, w5, #7
+	uxth	w25, w25
+.L2279:
+	mov	w3, -1
+	add	x28, x20, :lo12:.LANCHOR2
+	mov	w27, w3
+	mov	w4, 65535
+	mov	w7, 56
+	add	x8, x28, 996
+.L2280:
+	cmp	w25, w5
+	bhi	.L2293
+	add	x0, x23, :lo12:.LANCHOR0
+	mov	w24, 0
+	ldrh	w2, [x0,1944]
+	mov	x0, x19
+	add	x2, x19, x2, lsl 1
+.L2294:
+	cmp	x0, x2
+	beq	.L2419
+	ldrh	w1, [x0,16]
+	cmp	w1, w4
+	beq	.L2281
+	umull	x9, w24, w7
+	ldr	x10, [x28,2056]
+	add	w24, w24, 1
+	orr	w1, w25, w1, lsl 10
+	add	x9, x10, x9
+	uxth	w24, w24
+	str	w1, [x9,4]
+.L2281:
+	add	x0, x0, 2
+	b	.L2294
+.L2419:
+	ldr	x0, [x28,2056]
+	mov	w1, w24
+	ldr	w2, [x29,184]
+	str	x8, [x29,128]
+	str	x7, [x29,136]
+	str	x4, [x29,144]
+	str	x6, [x29,160]
+	str	x5, [x29,168]
+	str	x3, [x29,176]
+	bl	FlashReadPages
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	x3, [x29,176]
+	ldr	x5, [x29,168]
+	mov	w1, 0
+	ldr	x6, [x29,160]
+	sxtw	x10, w25
+	ldrb	w9, [x0,120]
+	ldr	x0, [x28,2056]
+	ldr	x4, [x29,144]
+	ldr	x7, [x29,136]
+	add	x0, x0, 16
+	ldr	x8, [x29,128]
+.L2283:
+	cmp	w1, w24
+	beq	.L2420
+	ldr	w2, [x0,-16]
+	cbnz	w2, .L2284
+	ldr	x2, [x0]
+	ldrh	w11, [x2]
+	cmp	w11, w4
+	beq	.L2285
+	ldr	w2, [x2,4]
+	cmn	w2, #1
+	beq	.L2285
+	ldr	w27, [x28,2348]
+	cmn	w3, #1
+	str	w2, [x28,2348]
+	bne	.L2285
+	ldrh	w2, [x8,x10,lsl 1]
+	cmp	w2, w4
+	bne	.L2286
+	cbz	w9, .L2285
+.L2286:
+	cmp	w27, w22
+	csinv	w3, w27, wzr, ne
+	b	.L2285
+.L2284:
+	adrp	x0, .LANCHOR4+290
+	ldrh	w1, [x19]
+	strh	w1, [x0,#:lo12:.LANCHOR4+290]
+	ldrb	w0, [x19,8]
+	cbnz	w0, .L2277
+	add	x0, x20, :lo12:.LANCHOR2
+	add	x1, x0, 996
+	ldrh	w2, [x1,w25,sxtw 1]
+	mov	w1, 65535
+	cmp	w2, w1
+	bne	.L2288
+	cmn	w3, #1
+	beq	.L2289
+	str	w3, [x0,2348]
+	b	.L2277
+.L2289:
+	cmp	w6, w22
+	beq	.L2290
+	str	w6, [x0,2348]
+	b	.L2277
+.L2290:
+	ldr	w1, [x0,2348]
+	b	.L2417
+.L2288:
+	cmp	w27, w22
+	beq	.L2291
+	cmn	w27, #1
+	beq	.L2277
+	str	w27, [x0,2348]
+	b	.L2277
+.L2291:
+	ldr	w1, [x0,2348]
+	cmp	w1, w22
+	beq	.L2277
+.L2417:
+	sub	w1, w1, #1
+	b	.L2412
+.L2285:
+	add	w1, w1, 1
+	add	x0, x0, 56
+	uxth	w1, w1
+	b	.L2283
+.L2420:
+	add	w25, w25, 1
+	uxth	w25, w25
+	b	.L2280
+.L2293:
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w1, -1
+.L2412:
+	str	w1, [x0,2348]
+.L2277:
+	adrp	x25, .LANCHOR4
+	mov	w1, 1
+	add	x0, x25, :lo12:.LANCHOR4
+	strh	w1, [x0,292]
+	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x0, 2256
+	bl	FtlMapBlkWriteDumpData
+	ldr	w24, [x29,188]
+	adrp	x0, .LC127
+	str	x25, [x29,136]
+	add	x0, x0, :lo12:.LC127
+	str	x0, [x29,128]
+	adrp	x0, .LC126
+	add	x0, x0, :lo12:.LC126
+	str	x0, [x29,120]
+.L2295:
+	add	x0, x23, :lo12:.LANCHOR0
+	mov	x1, x19
+	str	wzr, [x29,176]
+	mov	w7, 65535
+	mov	w8, 56
+	ldrh	w3, [x0,1944]
+	ldrb	w6, [x0,120]
+	add	x3, x19, x3, lsl 1
+.L2296:
+	cmp	x1, x3
+	beq	.L2421
+	ldrh	w2, [x1,16]
+	cmp	w2, w7
+	beq	.L2297
+	ldr	w0, [x29,176]
+	add	x5, x20, :lo12:.LANCHOR2
+	orr	w2, w24, w2, lsl 10
+	ldr	x4, [x5,2056]
+	umull	x0, w0, w8
+	add	x4, x4, x0
+	str	w2, [x4,4]
+	ldrb	w2, [x19,8]
+	cmp	w2, 1
+	bne	.L2298
+	cbz	w6, .L2298
+	ldr	x2, [x5,2056]
+	add	x0, x2, x0
+	ldr	w2, [x0,4]
+	orr	w2, w2, -2147483648
+	str	w2, [x0,4]
+.L2298:
+	ldr	w0, [x29,176]
+	add	w0, w0, 1
+	uxth	w0, w0
+	str	w0, [x29,176]
+.L2297:
+	add	x1, x1, 2
+	b	.L2296
+.L2421:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w1, [x29,176]
+	ldr	w2, [x29,184]
+	ldr	x0, [x0,2056]
+	bl	FlashReadPages
+	str	xzr, [x29,160]
+.L2300:
+	ldrh	w0, [x29,160]
+	ldr	w1, [x29,176]
+	cmp	w1, w0, uxth
+	bls	.L2422
+	ldr	x0, [x29,160]
+	mov	x25, 56
+	mul	x25, x0, x25
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x28, [x0,2056]
+	add	x27, x28, x25
+	ldr	w1, [x27,4]
+	str	w1, [x29,204]
+	lsr	x0, x1, 10
+	str	x1, [x29,168]
+	bl	P2V_plane
+	uxth	w0, w0
+	ldr	w1, [x29,188]
+	cmp	w24, w1
+	ldr	x1, [x29,168]
+	bcc	.L2301
+	ldr	w2, [x29,152]
+	cmp	w0, w2
+	bcs	.L2336
+	ldr	w2, [x29,188]
+	cmp	w24, w2
+	beq	.L2301
+.L2336:
+	cmp	w0, w26
+	bne	.L2337
+	cmp	w24, w21
+	beq	.L2303
+.L2337:
+	ldr	w0, [x28,x25]
+	cmn	w0, #1
+	beq	.L2305
+	ldr	x28, [x27,16]
+	mov	w0, 61589
+	ldrh	w1, [x28]
+	cmp	w1, w0
+	bne	.L2312
+	ldr	w22, [x28,4]
+	cmn	w22, #1
+	beq	.L2307
+	add	x27, x20, :lo12:.LANCHOR2
+	mov	w0, w22
+	ldr	w1, [x27,200]
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L2307
+	add	w0, w22, 1
+	str	w0, [x27,200]
+.L2307:
+	ldr	w27, [x28,8]
+	add	x1, x29, 200
+	ldr	w0, [x28,12]
+	mov	w2, 0
+	str	w0, [x29,196]
+	mov	w0, w27
+	bl	log2phys
+	add	x3, x20, :lo12:.LANCHOR2
+	str	x3, [x29,168]
+	ldr	w1, [x3,2348]
+	cmn	w1, #1
+	beq	.L2308
+	mov	w0, w22
+	bl	ftl_cmp_data_ver
+	ldr	x3, [x29,168]
+	cbz	w0, .L2308
+	ldr	w1, [x29,196]
+	cmn	w1, #1
+	beq	.L2309
+	ldr	x0, [x3,2056]
+	str	x3, [x29,112]
+	add	x0, x0, x25
+	str	w1, [x0,4]
+	mov	w1, 1
+	ldr	x2, [x0,16]
+	ldr	x0, [x3,2056]
+	str	x2, [x29,168]
+	mov	w2, 0
+	add	x0, x0, x25
+	bl	FlashReadPages
+	ldr	x3, [x29,112]
+	ldr	x0, [x29,168]
+	ldr	x2, [x3,2056]
+	ldr	w0, [x0,4]
+	str	w0, [x29,144]
+	add	x4, x2, x25
+	ldr	w0, [x2,x25]
+	cmn	w0, #1
+	bne	.L2310
+	b	.L2311
+.L2309:
+	ldr	w0, [x29,204]
+	ldr	w1, [x29,200]
+	cmp	w1, w0
+	bne	.L2312
+	mov	w0, w27
+	add	x1, x29, 196
+	mov	w2, 1
+	bl	log2phys
+.L2312:
+	ldrh	w0, [x19]
+	b	.L2414
+.L2310:
+	ldr	x0, [x29,168]
+	ldr	w28, [x0,8]
+	cmp	w28, w27
+	bne	.L2311
+	ldr	w0, [x3,2348]
+	ldr	w1, [x29,144]
+	str	x2, [x29,96]
+	str	x4, [x29,104]
+	str	x3, [x29,112]
+	bl	ftl_cmp_data_ver
+	ldr	x3, [x29,112]
+	ldr	x4, [x29,104]
+	ldr	x2, [x29,96]
+	cbz	w0, .L2311
+	ldr	w0, [x29,200]
+	ldr	w1, [x29,204]
+	cmp	w0, w1
+	beq	.L2317
+	ldr	w1, [x29,196]
+	cmp	w0, w1
+	beq	.L2311
+	cmn	w0, #1
+	beq	.L2315
+	str	w0, [x4,4]
+	mov	w2, 0
+	ldr	x1, [x4,16]
+	ldr	x0, [x3,2056]
+	str	x1, [x29,168]
+	mov	w1, 1
+	add	x0, x0, x25
+	bl	FlashReadPages
+	b	.L2316
+.L2315:
+	str	w0, [x2,x25]
+.L2316:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x1, [x0,2056]
+	ldr	w1, [x1,x25]
+	cmn	w1, #1
+	beq	.L2317
+	ldr	x1, [x29,168]
+	ldr	w0, [x0,2348]
+	ldr	w25, [x1,4]
+	mov	w1, w25
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L2317
+	ldr	w0, [x29,144]
+	mov	w1, w25
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L2311
+.L2317:
+	ldr	w1, [x29,196]
+	mov	w0, w28
+	bl	FtlReUsePrevPpa
+.L2311:
+	mov	w0, -1
+	str	w0, [x29,196]
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	b	.L2319
+.L2308:
+	ldr	w0, [x29,204]
+	ldr	w1, [x29,200]
+	cmp	w1, w0
+	beq	.L2319
+	mov	w0, w27
+	add	x1, x29, 204
+	mov	w2, 1
+	bl	log2phys
+	ldr	w25, [x29,200]
+	cmn	w25, #1
+	beq	.L2319
+	ldr	w0, [x29,196]
+	cmp	w25, w0
+	beq	.L2319
+	lsr	x0, x25, 10
+	bl	P2V_block_in_plane
+	uxth	w0, w0
+	ldrh	w2, [x20,#:lo12:.LANCHOR2]
+	add	x1, x20, :lo12:.LANCHOR2
+	cmp	w2, w0
+	beq	.L2322
+	ldrh	w2, [x1,48]
+	cmp	w2, w0
+	beq	.L2322
+	ldrh	w1, [x1,96]
+	cmp	w1, w0
+	bne	.L2319
+.L2322:
+	add	x28, x20, :lo12:.LANCHOR2
+	mov	w1, 1
+	mov	w2, 0
+	ldr	x0, [x28,2056]
+	str	w25, [x0,4]
+	ldr	x3, [x0,16]
+	ldr	x0, [x28,2056]
+	str	x3, [x29,168]
+	bl	FlashReadPages
+	ldr	x0, [x28,2056]
+	ldr	x3, [x29,168]
+	ldr	w0, [x0]
+	ldr	w1, [x3,4]
+	cmn	w0, #1
+	beq	.L2319
+	mov	w0, w22
+	bl	ftl_cmp_data_ver
+	cbnz	w0, .L2319
+	mov	w0, w27
+	add	x1, x29, 200
+	mov	w2, 1
+	bl	log2phys
+.L2319:
+	ldr	w0, [x29,196]
+	cmn	w0, #1
+	beq	.L2301
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	uxth	w1, w0
+	add	x2, x20, :lo12:.LANCHOR2
+	ubfiz	x3, x1, 1, 16
+	ldr	x2, [x2,-40]
+	ldrh	w2, [x2,x3]
+	cbz	w2, .L2323
+.L2414:
+	bl	decrement_vpc_count
+	b	.L2301
+.L2323:
+	ldr	x0, [x29,120]
+	bl	printk
+	b	.L2301
+.L2305:
+	ldr	x2, [x29,136]
+	ldrh	w0, [x19]
+	add	x25, x2, :lo12:.LANCHOR4
+	mov	w2, w22
+	strh	w0, [x25,290]
+	ldr	x0, [x29,128]
+	bl	printk
+	ldr	w0, [x25,296]
+	cmp	w0, 31
+	bhi	.L2324
+	add	x1, x25, 304
+	ldr	w2, [x29,204]
+	str	w2, [x1,w0,uxtw 2]
+	add	w0, w0, 1
+	str	w0, [x25,296]
+.L2324:
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w1, [x0,2348]
+	cmn	w1, #1
+	beq	.L2413
+	cmp	w1, w22
+	bls	.L2301
+.L2413:
+	str	w22, [x0,2348]
+.L2301:
+	ldr	x0, [x29,160]
+	add	x0, x0, 1
+	str	x0, [x29,160]
+	b	.L2300
+.L2422:
+	ldrb	w0, [x19,8]
+	add	w24, w24, 1
+	cmp	w0, 1
+	uxth	w24, w24
+	bne	.L2327
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w1, [x0,120]
+	cbz	w1, .L2327
+	cmp	w21, w24
+	bne	.L2327
+	ldrh	w0, [x0,2020]
+	cmp	w0, w24
+	beq	.L2303
+.L2327:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2018]
+	cmp	w24, w1
+	bne	.L2295
+	ldrh	w2, [x0,1944]
+	mov	w3, 65535
+	strh	w24, [x19,2]
+	mov	x0, 0
+	strh	wzr, [x19,4]
+.L2329:
+	uxth	w1, w0
+	cmp	w1, w2
+	bcs	.L2409
+	add	x0, x0, 1
+	add	x4, x19, x0, lsl 1
+	ldrh	w4, [x4,14]
+	cmp	w4, w3
+	beq	.L2329
+	strb	w1, [x19,6]
+	b	.L2409
+.L2303:
+	strb	w26, [x19,6]
+	strh	w21, [x19,2]
+.L2416:
+	mov	x0, x19
+	mov	w1, w21
+	mov	w2, w26
+	bl	ftl_sb_update_avl_pages
+.L2409:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 208
+	ret
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.align	2
+	.global	FtlWriteDumpData
+	.type	FtlWriteDumpData, %function
+FtlWriteDumpData:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x25, [sp,64]
+	add	x20, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldr	w0, [x20,-96]
+	cbnz	w0, .L2423
+	ldrh	w1, [x20,4]
+	cbz	w1, .L2425
+	ldrb	w0, [x20,8]
+	cbnz	w0, .L2425
+	adrp	x22, .LANCHOR0
+	ldrb	w0, [x20,7]
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w2, [x22,2018]
+	mul	w0, w0, w2
+	cmp	w1, w0
+	beq	.L2425
+	ldrb	w24, [x20,10]
+	ldr	w23, [x22,2096]
+	ldrh	w25, [x22,1944]
+	cbnz	w24, .L2423
+	sub	w23, w23, #1
+	add	x1, x29, 84
+	mov	w0, w23
+	mov	w2, w24
+	bl	log2phys
+	ldr	x21, [x20,2120]
+	ldr	w0, [x29,84]
+	ldr	x1, [x20,-64]
+	str	w0, [x29,92]
+	cmn	w0, #1
+	str	w23, [x29,112]
+	str	x1, [x29,96]
+	str	x21, [x29,104]
+	str	w24, [x21,4]
+	beq	.L2427
+	add	x0, x29, 88
+	mov	w1, 1
+	mov	w2, w24
+	bl	FlashReadPages
+	b	.L2428
+.L2427:
+	ldr	x0, [x20,-64]
+	mov	w1, 255
+	ldrh	w2, [x22,2028]
+	bl	ftl_memset
+.L2428:
+	mov	w0, -3947
+	lsl	w25, w25, 2
+	strh	w0, [x21]
+	mov	w22, 0
+	add	x20, x19, :lo12:.LANCHOR2
+.L2429:
+	cmp	w22, w25
+	beq	.L2430
+	ldrh	w0, [x20,4]
+	cbz	w0, .L2430
+	ldr	w0, [x29,92]
+	add	w22, w22, 1
+	str	w0, [x21,12]
+	ldrh	w0, [x20]
+	strh	w0, [x21,2]
+	mov	x0, x20
+	str	w23, [x21,8]
+	bl	get_new_active_ppa
+	str	w0, [x29,92]
+	ldr	w1, [x20,200]
+	mov	w2, 0
+	str	w1, [x21,4]
+	mov	w3, w2
+	add	w1, w1, 1
+	add	x0, x29, 88
+	cmn	w1, #1
+	csel	w1, w1, wzr, ne
+	str	w1, [x20,200]
+	mov	w1, 1
+	bl	FlashProgPages
+	ldrh	w0, [x20]
+	bl	decrement_vpc_count
+	b	.L2429
+.L2430:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, 1
+	strb	w0, [x19,10]
+	b	.L2423
+.L2425:
+	add	x19, x19, :lo12:.LANCHOR2
+	strb	wzr, [x19,10]
+.L2423:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	FtlWriteDumpData, .-FtlWriteDumpData
+	.align	2
+	.global	l2p_flush
+	.type	l2p_flush, %function
+l2p_flush:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w19, 0
+	adrp	x20, .LANCHOR0
+	adrp	x21, .LANCHOR2
+	bl	FtlWriteDumpData
+.L2441:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2058]
+	cmp	w0, w19
+	bls	.L2444
+	add	x1, x21, :lo12:.LANCHOR2
+	ubfiz	x0, x19, 4, 16
+	ldr	x1, [x1,144]
+	add	x0, x1, x0
+	ldr	w0, [x0,4]
+	tbz	w0, #31, .L2442
+	mov	w0, w19
+	bl	flush_l2p_region
+.L2442:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2441
+.L2444:
+	mov	w0, 0
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	FtlVpcCheckAndModify
+	.type	FtlVpcCheckAndModify, %function
+FtlVpcCheckAndModify:
+	stp	x29, x30, [sp, -80]!
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC128
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x29, sp, 0
+	add	x1, x1, 16
+	add	x0, x0, :lo12:.LC128
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR0
+	bl	printk
+	add	x1, x21, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR2
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w19, 0
+	ldrh	w2, [x1,1954]
+	mov	w1, 0
+	ldr	x0, [x0,2168]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+.L2446:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w0, [x0,2096]
+	cmp	w19, w0
+	bcs	.L2461
+	mov	w0, w19
+	add	x1, x29, 76
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L2447
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	ubfiz	x0, x0, 1, 16
+	add	x1, x20, :lo12:.LANCHOR2
+	ldr	x2, [x1,2168]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
+.L2447:
+	add	w19, w19, 1
+	b	.L2446
+.L2461:
+	adrp	x23, .LC129
+	mov	w19, 0
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w24, 65535
+	add	x23, x23, :lo12:.LC129
+.L2449:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,1952]
+	cmp	w0, w19
+	bls	.L2462
+	ubfiz	x22, x19, 1, 16
+	ldr	x0, [x20,-40]
+	ldrh	w2, [x0,x22]
+	ldr	x0, [x20,2168]
+	ldrh	w3, [x0,x22]
+	cmp	w2, w3
+	beq	.L2452
+	cmp	w2, w24
+	beq	.L2452
+	mov	x0, x23
+	mov	w1, w19
+	bl	printk
+	ldrh	w0, [x20]
+	cmp	w0, w19
+	beq	.L2452
+	ldrh	w0, [x20,96]
+	cmp	w0, w19
+	beq	.L2452
+	ldrh	w0, [x20,48]
+	cmp	w0, w19
+	beq	.L2452
+	ldr	x0, [x20,2168]
+	ldrh	w1, [x0,x22]
+	ldr	x0, [x20,-40]
+	strh	w1, [x0,x22]
+	mov	w0, w19
+	bl	update_vpc_list
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2452:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2449
+.L2462:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.align	2
+	.global	allocate_new_data_superblock
+	.type	allocate_new_data_superblock, %function
+allocate_new_data_superblock:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x21, [sp,32]
+	add	x2, x19, :lo12:.LANCHOR2
+	ldrh	w20, [x0]
+	ldr	w1, [x2,-96]
+	cbnz	w1, .L2464
+	mov	x21, x0
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L2465
+	ubfiz	x1, x20, 1, 16
+	ldr	x0, [x2,-40]
+	ldrh	w0, [x0,x1]
+	cbz	w0, .L2466
+	mov	w0, w20
+	bl	INSERT_DATA_LIST
+	b	.L2465
+.L2466:
+	mov	w0, w20
+	bl	INSERT_FREE_LIST
+.L2465:
+	add	x3, x19, :lo12:.LANCHOR2
+	strb	wzr, [x21,8]
+	add	x0, x3, 48
+	cmp	x21, x0
+	beq	.L2467
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w2, [x1,1964]
+	cmp	w2, 1
+	beq	.L2467
+	ldrb	w0, [x1,120]
+	cbz	w0, .L2468
+.L2467:
+	mov	w0, 1
+	strb	w0, [x21,8]
+	b	.L2469
+.L2468:
+	cmp	x21, x3
+	bne	.L2469
+	cmp	w2, 3
+	beq	.L2471
+	ldr	w0, [x21,344]
+	cmp	w0, 1
+	bne	.L2472
+.L2471:
+	add	x1, x19, :lo12:.LANCHOR2
+	mov	w0, 1
+	strb	w0, [x1,8]
+.L2472:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w0, [x1,160]
+	cbz	w0, .L2469
+	ldr	w0, [x1,220]
+	cmp	w0, 29
+	bhi	.L2469
+	mov	w0, 1
+	strb	w0, [x1,8]
+.L2469:
+	add	x3, x19, :lo12:.LANCHOR2
+	mov	w0, 65535
+	ldrh	w1, [x3,2336]
+	cmp	w1, w0
+	beq	.L2474
+	cmp	w20, w1
+	bne	.L2475
+	ubfiz	x2, x1, 1, 16
+	ldr	x0, [x3,-40]
+	ldrh	w0, [x0,x2]
+	cbz	w0, .L2476
+.L2475:
+	mov	w0, w1
+	bl	update_vpc_list
+.L2476:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	w0, [x19,2336]
+.L2474:
+	mov	x0, x21
+	bl	allocate_data_superblock
+	bl	l2p_flush
+	mov	w0, 0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2464:
+	mov	w0, 0
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.align	2
+	.global	rk_ftl_garbage_collect
+	.type	rk_ftl_garbage_collect, %function
+rk_ftl_garbage_collect:
+	stp	x29, x30, [sp, -144]!
+	mov	w2, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x3, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w4, [x3,-96]
+	cbnz	w4, .L2634
+	ldr	w4, [x3,2032]
+	cbnz	w4, .L2634
+	ldrh	w4, [x3,-24]
+	cmp	w4, 47
+	bls	.L2634
+	mov	w23, w0
+	adrp	x0, .LANCHOR1+3008
+	mov	w22, w1
+	ldrh	w1, [x0,#:lo12:.LANCHOR1+3008]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2491
+.L2494:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 65535
+	ldrh	w1, [x0,954]
+	cmp	w1, w2
+	bne	.L2492
+	b	.L2493
+.L2491:
+	ldrh	w1, [x3,96]
+	cmp	w1, w0
+	beq	.L2494
+	mov	w0, 1
+	bl	FtlGcFreeTempBlock
+	mov	w2, 1
+	cbz	w0, .L2494
+	b	.L2634
+.L2492:
+	ldrh	w3, [x0,952]
+	cmp	w3, w2
+	bne	.L2493
+	strh	w1, [x0,952]
+	mov	w1, -1
+	strh	w1, [x0,954]
+.L2493:
+	add	x1, x19, :lo12:.LANCHOR2
+	cmp	w23, 1
+	ldr	w0, [x1,868]
+	add	w0, w0, 1
+	add	w0, w0, w23, lsl 7
+	str	w0, [x1,868]
+	bne	.L2505
+	ldr	w1, [x1,160]
+	cbnz	w1, .L2496
+	adrp	x1, .LANCHOR0+120
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+120]
+	cbz	w1, .L2505
+.L2496:
+	add	x20, x19, :lo12:.LANCHOR2
+	ldr	w1, [x20,220]
+	cmp	w1, 29
+	bhi	.L2505
+	adrp	x21, .LANCHOR4
+	add	x1, x21, :lo12:.LANCHOR4
+	ldrh	w1, [x1,432]
+	add	w0, w0, w1
+	str	w0, [x20,868]
+	bl	FtlGcReFreshBadBlk
+	ldrh	w0, [x20,296]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L2505
+	ldrh	w1, [x20,952]
+	cmp	w1, w0
+	bne	.L2505
+	ldr	w0, [x20,868]
+	cmp	w0, 1024
+	bhi	.L2497
+	ldrh	w0, [x20,-8]
+	cmp	w0, 63
+	bhi	.L2505
+.L2497:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x21, :lo12:.LANCHOR4
+	ldrh	w2, [x0,866]
+	ldrh	w3, [x0,-8]
+	add	w2, w2, 64
+	strh	wzr, [x1,432]
+	cmp	w3, w2
+	bgt	.L2505
+	str	wzr, [x0,868]
+	ldr	w0, [x0,220]
+	cbnz	w0, .L2498
+	mov	w0, 6
+	b	.L2656
+.L2498:
+	cmp	w0, 5
+	bhi	.L2499
+	mov	w0, 18
+.L2656:
+	strh	w0, [x1,432]
+.L2499:
+	mov	w0, 32
+	mov	w27, 65535
+	bl	List_get_gc_head_node
+	uxth	w25, w0
+	cmp	w25, w27
+	beq	.L2504
+	add	x24, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x24,872]
+	cbz	w0, .L2501
+	adrp	x2, .LANCHOR0
+	ldr	x26, [x24,-40]
+	add	x2, x2, :lo12:.LANCHOR0
+	ubfiz	x25, x25, 1, 16
+	ldrh	w1, [x2,2020]
+	ldrh	w2, [x2,1944]
+	ldrh	w3, [x26,x25]
+	mul	w1, w1, w2
+	add	w1, w1, 1
+	cmp	w3, w1
+	bgt	.L2504
+	add	w1, w0, 1
+	str	wzr, [x24,876]
+	uxth	w1, w1
+	strh	w1, [x24,872]
+	str	x1, [x29,120]
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	cmp	w20, w27
+	ldr	x1, [x29,120]
+	beq	.L2504
+	ubfiz	x27, x20, 1, 16
+	adrp	x0, .LC130
+	ldrh	w4, [x26,x25]
+	add	x0, x0, :lo12:.LC130
+	mov	w2, w20
+	ldrh	w3, [x26,x27]
+	bl	printk
+	ldrh	w0, [x24,872]
+	cmp	w0, 40
+	bls	.L2502
+	ldr	x0, [x24,-40]
+	ldrh	w0, [x0,x27]
+	cmp	w0, 32
+	bls	.L2502
+	strh	wzr, [x24,872]
+.L2502:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w0, 6
+	strh	w0, [x21,432]
+	b	.L2506
+.L2501:
+	mov	w0, 1
+	strh	w0, [x24,872]
+.L2504:
+	bl	GetSwlReplaceBlock
+	uxth	w20, w0
+	mov	w0, 65535
+	cmp	w20, w0
+	bne	.L2506
+	add	x21, x21, :lo12:.LANCHOR4
+	strh	wzr, [x21,432]
+.L2505:
+	add	x21, x19, :lo12:.LANCHOR2
+	mov	w0, 65535
+	ldrh	w20, [x21,296]
+	cmp	w20, w0
+	bne	.L2660
+	ldrh	w0, [x21,96]
+	cmp	w0, w20
+	beq	.L2661
+.L2506:
+	mov	w0, 65535
+	cmp	w20, w0
+	cset	w1, eq
+	cbz	w1, .L2519
+	cbnz	w23, .L2519
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w21, 1
+	ldrh	w1, [x0,-8]
+	cmp	w1, 24
+	bhi	.L2520
+	adrp	x0, .LANCHOR0
+	cmp	w1, 16
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w21, [x0,2018]
+	bls	.L2521
+	lsr	w21, w21, 5
+	b	.L2520
+.L2521:
+	cmp	w1, 12
+	bls	.L2522
+	lsr	w21, w21, 4
+	b	.L2520
+.L2522:
+	cmp	w1, 8
+	bls	.L2520
+	lsr	w21, w21, 2
+.L2520:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x0,864]
+	cmp	w2, w1
+	bcs	.L2524
+	ldrh	w1, [x0,96]
+	mov	w2, 65535
+	cmp	w1, w2
+	bne	.L2525
+	ldrh	w2, [x0,952]
+	cmp	w2, w1
+	bne	.L2525
+	adrp	x1, .LANCHOR4+432
+	ldrh	w2, [x1,#:lo12:.LANCHOR4+432]
+	cbnz	w2, .L2526
+	adrp	x1, .LANCHOR0+2096
+	ldr	w3, [x0,156]
+	ldr	w1, [x1,#:lo12:.LANCHOR0+2096]
+	add	w1, w1, w1, lsl 1
+	cmp	w3, w1, lsr 2
+	bcs	.L2527
+.L2526:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,272]
+	add	w0, w0, w0, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x1,864]
+	b	.L2528
+.L2527:
+	mov	w1, 18
+	strh	w1, [x0,864]
+.L2528:
+	add	x19, x19, :lo12:.LANCHOR2
+	str	wzr, [x19,876]
+	b	.L2634
+.L2525:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,272]
+	add	w0, w0, w0, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x1,864]
+.L2524:
+	cmp	w22, 2
+	bhi	.L2589
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w0, [x0,160]
+	cbz	w0, .L2589
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L2589
+.L2519:
+	add	x21, x19, :lo12:.LANCHOR2
+	mov	w2, 65535
+	ldrh	w0, [x21,96]
+	cmp	w0, w2
+	bne	.L2531
+	cbz	w1, .L2531
+	ldrh	w1, [x21,952]
+	cmp	w1, w0
+	bne	.L2531
+	ldrh	w1, [x21,296]
+	cmp	w1, w0
+	beq	.L2532
+.L2537:
+	mov	w20, 65535
+	b	.L2531
+.L2532:
+	ldrh	w24, [x21,-8]
+	adrp	x20, .LANCHOR4
+	ldrh	w0, [x21,864]
+	str	wzr, [x21,876]
+	cmp	w0, w24
+	bcs	.L2533
+	add	x0, x20, :lo12:.LANCHOR4
+	ldrh	w0, [x0,432]
+	cbnz	w0, .L2534
+	adrp	x0, .LANCHOR0+2096
+	ldr	w1, [x21,156]
+	ldr	w0, [x0,#:lo12:.LANCHOR0+2096]
+	add	w0, w0, w0, lsl 1
+	cmp	w1, w0, lsr 2
+	bcs	.L2535
+.L2534:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x19,272]
+	add	w0, w0, w0, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x19,864]
+	b	.L2536
+.L2535:
+	mov	w0, 18
+	strh	w0, [x21,864]
+.L2536:
+	add	x20, x20, :lo12:.LANCHOR4
+	bl	FtlReadRefresh
+	ldrh	w2, [x20,432]
+	b	.L2634
+.L2533:
+	add	x22, x20, :lo12:.LANCHOR4
+	ldrh	w0, [x22,432]
+	cbnz	w0, .L2537
+	ldrh	w20, [x21,272]
+	add	w1, w20, w20, lsl 1
+	asr	w1, w1, 2
+	strh	w1, [x21,864]
+	bl	List_get_gc_head_node
+	ubfiz	x0, x0, 1, 16
+	ldr	x1, [x21,-40]
+	ldrh	w2, [x1,x0]
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w0, [x1,2020]
+	ldrh	w1, [x1,1944]
+	mul	w0, w0, w1
+	mov	w1, 2
+	sdiv	w0, w0, w1
+	cmp	w2, w0
+	ble	.L2538
+	sub	w20, w20, #1
+	cmp	w24, w20
+	blt	.L2538
+	bl	FtlReadRefresh
+	ldrh	w2, [x22,432]
+	b	.L2634
+.L2538:
+	cbnz	w2, .L2537
+	mov	w0, -1
+	add	x19, x19, :lo12:.LANCHOR2
+	bl	decrement_vpc_count
+	ldrh	w2, [x19,-8]
+	add	w2, w2, 1
+	b	.L2634
+.L2531:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w21, 2
+	ldr	w0, [x0,160]
+	cmp	w0, wzr
+	csinc	w21, w21, wzr, ne
+	b	.L2530
+.L2589:
+	mov	w20, 65535
+.L2530:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 65535
+	ldrh	w1, [x0,296]
+	cmp	w1, w2
+	bne	.L2540
+	cmp	w20, w1
+	beq	.L2541
+	strh	w20, [x0,296]
+	b	.L2542
+.L2541:
+	ldrh	w1, [x0,952]
+	cmp	w1, w20
+	beq	.L2542
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x0,-40]
+	ldrh	w1, [x2,x1]
+	cbnz	w1, .L2543
+	mov	w1, -1
+	strh	w1, [x0,952]
+.L2543:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,952]
+	strh	w1, [x0,296]
+	mov	w1, -1
+	strh	w1, [x0,952]
+.L2542:
+	add	x22, x19, :lo12:.LANCHOR2
+	mov	w1, 65535
+	ldrh	w0, [x22,296]
+	strb	wzr, [x22,304]
+	cmp	w0, w1
+	beq	.L2540
+	bl	IsBlkInGcList
+	cbz	w0, .L2545
+	mov	w0, -1
+	strh	w0, [x22,296]
+.L2545:
+	adrp	x0, .LANCHOR0+120
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+120]
+	cbz	w0, .L2546
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x22, x0, 296
+	ldrh	w0, [x0,296]
+	bl	ftl_get_blk_mode
+	strb	w0, [x22,8]
+.L2546:
+	add	x22, x19, :lo12:.LANCHOR2
+	mov	w0, 65535
+	add	x24, x22, 296
+	ldrh	w1, [x22,296]
+	cmp	w1, w0
+	beq	.L2540
+	mov	x0, x24
+	bl	make_superblock
+	strh	wzr, [x22,298]
+	adrp	x0, .LANCHOR4
+	ldrh	w2, [x22,296]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x1, [x22,-40]
+	strb	wzr, [x22,302]
+	strh	wzr, [x0,434]
+	ldrh	w1, [x1,x2,lsl 1]
+	strh	w1, [x0,436]
+.L2540:
+	add	x3, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x19,#:lo12:.LANCHOR2]
+	ldrh	w0, [x3,296]
+	cmp	w1, w0
+	beq	.L2547
+	ldrh	w1, [x3,48]
+	cmp	w1, w0
+	beq	.L2547
+.L2548:
+	mov	x28, x3
+	mov	w24, 65535
+	b	.L2549
+.L2547:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	w0, [x19,296]
+	b	.L2659
+.L2570:
+	ldrh	w0, [x28,298]
+	add	w21, w21, w0
+	uxth	w21, w21
+	strh	w21, [x28,298]
+	cmp	w21, w25
+	bcs	.L2662
+.L2572:
+	ldrh	w0, [x28,-8]
+	cmp	w0, 2
+	bhi	.L2575
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w21, [x0,2018]
+.L2549:
+	ldrh	w0, [x28,296]
+	cmp	w0, w24
+	bne	.L2550
+	str	wzr, [x28,876]
+.L2551:
+	ldrh	w22, [x28,872]
+	mov	w0, w22
+	bl	List_get_gc_head_node
+	uxth	w25, w0
+	cmp	w25, w24
+	strh	w25, [x28,296]
+	bne	.L2552
+	strh	wzr, [x28,872]
+	mov	w2, 8
+	b	.L2634
+.L2552:
+	mov	w0, w25
+	add	w22, w22, 1
+	bl	IsBlkInGcList
+	cbz	w0, .L2553
+	strh	w22, [x28,872]
+	b	.L2551
+.L2553:
+	adrp	x0, .LANCHOR0
+	ubfiz	x1, x25, 1, 16
+	add	x5, x0, :lo12:.LANCHOR0
+	ldr	x2, [x28,-40]
+	uxth	w22, w22
+	mov	w3, 2
+	strh	w22, [x28,872]
+	ldrh	w0, [x5,2018]
+	ldrh	w5, [x5,1944]
+	ldrh	w4, [x2,x1]
+	mul	w0, w0, w5
+	sdiv	w5, w0, w3
+	cmp	w4, w5
+	bgt	.L2555
+	cmp	w4, 8
+	bls	.L2556
+	cmp	w22, 48
+	bls	.L2556
+	ldrh	w4, [x28,924]
+	cmp	w4, 35
+	bhi	.L2556
+.L2555:
+	strh	wzr, [x28,872]
+.L2556:
+	ldrh	w1, [x2,x1]
+	cmp	w1, w0
+	blt	.L2557
+	cmp	w20, w24
+	bne	.L2557
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	wzr, [x19,872]
+	strh	w0, [x19,296]
+.L2659:
+	adrp	x0, .LANCHOR4+432
+	ldrh	w2, [x0,#:lo12:.LANCHOR4+432]
+	b	.L2634
+.L2557:
+	cbnz	w1, .L2558
+	mov	w0, -1
+	bl	decrement_vpc_count
+	ldrh	w0, [x28,872]
+	add	w0, w0, 1
+	strh	w0, [x28,872]
+	b	.L2551
+.L2558:
+	adrp	x0, .LANCHOR0
+	strb	wzr, [x28,304]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2559
+	mov	w0, w25
+	bl	ftl_get_blk_mode
+	strb	w0, [x28,304]
+.L2559:
+	add	x22, x28, 296
+	mov	x0, x22
+	bl	make_superblock
+	adrp	x1, .LANCHOR4
+	ldrh	w2, [x28,296]
+	add	x1, x1, :lo12:.LANCHOR4
+	ldr	x0, [x28,-40]
+	strh	wzr, [x1,434]
+	ldrh	w0, [x0,x2,lsl 1]
+	strh	w0, [x1,436]
+	strh	wzr, [x28,298]
+	strb	wzr, [x28,302]
+.L2550:
+	cmp	w23, 1
+	bne	.L2560
+	bl	FtlReadRefresh
+.L2560:
+	mov	w0, 1
+	str	w0, [x28,2032]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,120]
+	ldrh	w25, [x0,2018]
+	cbz	w1, .L2561
+	ldrb	w1, [x28,304]
+	cmp	w1, 1
+	bne	.L2561
+	ldrh	w25, [x0,2020]
+.L2561:
+	ldrh	w0, [x28,298]
+	add	w1, w0, w21
+	cmp	w1, w25
+	ble	.L2562
+	sub	w21, w25, w0
+	uxth	w21, w21
+.L2562:
+	mov	w26, 0
+.L2563:
+	cmp	w21, w26, uxth
+	bls	.L2570
+	adrp	x0, .LANCHOR0
+	add	x1, x28, 296
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrh	w4, [x1,2]
+	add	w4, w4, w26
+	ldrh	w6, [x0,1944]
+	mov	x0, 0
+	mov	w22, w0
+.L2571:
+	cmp	w6, w0, uxth
+	bls	.L2663
+	add	x2, x1, x0, lsl 1
+	ldrh	w2, [x2,16]
+	cmp	w2, w24
+	beq	.L2564
+	mov	w3, 56
+	ldr	x7, [x28,912]
+	orr	w2, w4, w2, lsl 10
+	umull	x5, w22, w3
+	add	w22, w22, 1
+	add	x5, x7, x5
+	uxth	w22, w22
+	str	w2, [x5,4]
+.L2564:
+	add	x0, x0, 1
+	b	.L2571
+.L2663:
+	ldr	x0, [x28,912]
+	mov	w1, w22
+	ldrb	w2, [x28,304]
+	mov	x27, 0
+	bl	FlashReadPages
+.L2566:
+	cmp	w22, w27, uxth
+	bls	.L2664
+	mov	x0, 56
+	mul	x4, x27, x0
+	ldr	x0, [x28,912]
+	add	x1, x0, x4
+	ldr	w0, [x0,x4]
+	cmn	w0, #1
+	ldr	x5, [x1,16]
+	beq	.L2591
+	ldrh	w0, [x5]
+	mov	w1, 61589
+	cmp	w0, w1
+	bne	.L2591
+	ldr	w0, [x5,8]
+	add	x1, x29, 140
+	mov	w2, 0
+	str	x4, [x29,112]
+	str	x5, [x29,120]
+	bl	log2phys
+	ldr	x2, [x28,912]
+	ldr	x4, [x29,112]
+	ldr	w0, [x29,140]
+	add	x2, x2, x4
+	ldr	x5, [x29,120]
+	and	w0, w0, 2147483647
+	ldr	w1, [x2,4]
+	cmp	w0, w1
+	bne	.L2591
+	adrp	x0, .LANCHOR4
+	mov	x3, 56
+	add	x1, x0, :lo12:.LANCHOR4
+	str	x4, [x29,104]
+	str	x5, [x29,112]
+	ldrh	w0, [x1,434]
+	add	w0, w0, 1
+	strh	w0, [x1,434]
+	ldr	w0, [x28,880]
+	ldr	x1, [x28,2064]
+	madd	x1, x0, x3, x1
+	ldr	w0, [x2,24]
+	str	x1, [x29,120]
+	str	w0, [x1,24]
+	bl	Ftl_get_new_temp_ppa
+	ldr	x1, [x29,120]
+	mov	x2, 56
+	ldr	x4, [x29,104]
+	ldr	x5, [x29,112]
+	str	w0, [x1,4]
+	ldr	w0, [x28,880]
+	ldr	x1, [x28,2064]
+	madd	x0, x0, x2, x1
+	ldr	x1, [x28,912]
+	add	x1, x1, x4
+	ldr	x2, [x1,8]
+	str	x2, [x0,8]
+	add	x2, x28, 96
+	str	x2, [x29,120]
+	ldr	x1, [x1,16]
+	str	x1, [x0,16]
+	mov	w1, 1
+	ldr	w0, [x29,140]
+	str	w0, [x5,12]
+	ldrh	w0, [x28,96]
+	strh	w0, [x5,2]
+	ldr	w0, [x28,200]
+	str	w0, [x5,4]
+	ldr	w0, [x28,880]
+	add	w0, w0, 1
+	str	w0, [x28,880]
+	ldr	x0, [x28,912]
+	add	x0, x0, x4
+	bl	FtlGcBufAlloc
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbnz	w0, .L2568
+	ldr	x2, [x29,120]
+	ldr	w1, [x28,880]
+	ldrb	w0, [x2,7]
+	cmp	w1, w0
+	beq	.L2568
+	ldrh	w0, [x2,4]
+	cbnz	w0, .L2591
+.L2568:
+	bl	Ftl_gc_temp_data_write_back
+	cbz	w0, .L2591
+	adrp	x0, .LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR4
+	str	wzr, [x19,2032]
+	ldrh	w2, [x0,432]
+	b	.L2634
+.L2591:
+	add	x27, x27, 1
+	b	.L2566
+.L2664:
+	add	w26, w26, 1
+	b	.L2563
+.L2662:
+	ldr	w0, [x28,880]
+	adrp	x21, .LANCHOR4
+	cbz	w0, .L2573
+	bl	Ftl_gc_temp_data_write_back
+	cbz	w0, .L2573
+	add	x21, x21, :lo12:.LANCHOR4
+	str	wzr, [x28,2032]
+	ldrh	w2, [x21,432]
+	b	.L2634
+.L2573:
+	add	x21, x21, :lo12:.LANCHOR4
+	ldrh	w2, [x21,434]
+	cbnz	w2, .L2574
+	ldrh	w0, [x28,296]
+	ldr	x1, [x28,-40]
+	lsl	x0, x0, 1
+	ldrh	w4, [x1,x0]
+	cbz	w4, .L2574
+	strh	w2, [x1,x0]
+	ldrh	w0, [x28,296]
+	bl	update_vpc_list
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2574:
+	mov	w0, -1
+	strh	w0, [x28,296]
+	b	.L2572
+.L2575:
+	adrp	x1, .LANCHOR4+432
+	str	wzr, [x28,2032]
+	ldrh	w2, [x1,#:lo12:.LANCHOR4+432]
+	cmp	w2, wzr
+	csinc	w2, w2, w0, ne
+	b	.L2634
+.L2661:
+	ldrh	w25, [x21,952]
+	cmp	w25, w20
+	bne	.L2506
+	ldrh	w0, [x21,-8]
+	mov	w2, 1024
+	ldr	w1, [x21,868]
+	cmp	w0, 24
+	mov	w0, 5120
+	csel	w0, w0, w2, cc
+	cmp	w1, w0
+	bls	.L2506
+	adrp	x0, .LANCHOR4+432
+	str	wzr, [x21,868]
+	mov	x24, x21
+	strh	wzr, [x0,#:lo12:.LANCHOR4+432]
+	bl	GetSwlReplaceBlock
+	uxth	w20, w0
+	cmp	w20, w25
+	bne	.L2508
+	ldrh	w1, [x21,-8]
+	ldrh	w0, [x21,866]
+	cmp	w1, w0
+	bcs	.L2509
+	mov	w0, 64
+	bl	List_get_gc_head_node
+	uxth	w0, w0
+	cmp	w0, w20
+	beq	.L2518
+	ldr	w2, [x21,2028]
+	uxtw	x1, w0
+	adrp	x21, .LANCHOR0
+	cbnz	w2, .L2511
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w2, [x0,1964]
+	cmp	w2, 3
+	beq	.L2511
+	ldr	w2, [x24,344]
+	cbnz	w2, .L2511
+	ldr	w2, [x24,160]
+	cbnz	w2, .L2511
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2512
+.L2511:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x3, x21, :lo12:.LANCHOR0
+	ldr	x0, [x0,-40]
+	ldrh	w4, [x0,x1,lsl 1]
+	ldrh	w1, [x3,2020]
+	ldrh	w0, [x3,1944]
+	ldrh	w3, [x3,1964]
+	mul	w2, w1, w0
+	cmp	w3, 3
+	mov	w0, 0
+	lsr	w1, w1, 1
+	csel	w0, w1, w0, eq
+	add	w0, w2, w0
+	cmp	w4, w0
+	bgt	.L2514
+	mov	w0, 0
+	add	x21, x21, :lo12:.LANCHOR0
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w0, [x21,2096]
+	ldr	w2, [x1,156]
+	add	w0, w0, w0, lsl 1
+	cmp	w2, w0, lsr 2
+	bls	.L2515
+	mov	w0, 128
+	b	.L2657
+.L2515:
+	mov	w0, 160
+.L2657:
+	strh	w0, [x1,866]
+	b	.L2516
+.L2514:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 128
+	b	.L2658
+.L2512:
+	ldr	x2, [x24,-40]
+	ldrh	w1, [x2,x1,lsl 1]
+	cmp	w1, 7
+	bhi	.L2517
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 128
+	strh	w1, [x0,866]
+	b	.L2516
+.L2517:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 64
+.L2658:
+	strh	w1, [x0,866]
+	b	.L2518
+.L2509:
+	mov	w0, 80
+	strh	w0, [x21,866]
+	b	.L2518
+.L2516:
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L2518
+.L2508:
+	add	x5, x19, :lo12:.LANCHOR2
+	ubfiz	x4, x20, 1, 32
+	adrp	x0, .LC131
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC131
+	ldr	x3, [x5,-40]
+	ldr	x6, [x5,-80]
+	ldrh	w2, [x5,-8]
+	ldrh	w3, [x3,x4]
+	ldrh	w5, [x5,864]
+	ldrh	w4, [x6,x4]
+	bl	printk
+.L2518:
+	bl	FtlGcReFreshBadBlk
+	b	.L2506
+.L2660:
+	mov	w20, w0
+	b	.L2506
+.L2634:
+	mov	w0, w2
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	2
+	.global	FtlCacheWriteBack
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	stp	x29, x30, [sp, -128]!
+	adrp	x0, .LANCHOR4+440
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	ldr	x20, [x0,#:lo12:.LANCHOR4+440]
+	add	x0, x22, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w23, [x0,-96]
+	cbnz	w23, .L2667
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w1, [x0,2080]
+	cbz	w1, .L2667
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2669
+	ldrb	w0, [x20,8]
+	cmp	w0, 1
+	cset	w23, eq
+.L2669:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w3, [x20,9]
+	adrp	x26, .LC132
+	mov	w2, w23
+	mov	w24, 0
+	mov	w27, 56
+	ldr	x0, [x0,2088]
+	add	x26, x26, :lo12:.LC132
+	bl	FlashProgPages
+.L2670:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w1, [x0,2080]
+	cmp	w24, w1
+	bcs	.L2687
+	umull	x21, w24, w27
+	ldr	x1, [x0,2088]
+	add	x0, x1, x21
+	ldr	w25, [x1,x21]
+	cmn	w25, #1
+	beq	.L2690
+	ldr	w1, [x0,4]
+	cbz	w23, .L2704
+	orr	w1, w1, -2147483648
+.L2704:
+	ldr	w0, [x0,24]
+	mov	w2, 1
+	str	w1, [x29,124]
+	add	x1, x29, 124
+	bl	log2phys
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2088]
+	add	x21, x0, x21
+	ldr	x0, [x21,16]
+	ldr	w0, [x0,12]
+	cmn	w0, #1
+	beq	.L2674
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	uxth	w1, w0
+	add	x2, x22, :lo12:.LANCHOR2
+	ubfiz	x0, x1, 1, 16
+	mov	w21, w1
+	ldr	x2, [x2,-40]
+	ldrh	w2, [x2,x0]
+	cbnz	w2, .L2675
+	mov	x0, x26
+	bl	printk
+.L2675:
+	mov	w0, w21
+	bl	decrement_vpc_count
+.L2674:
+	add	w24, w24, 1
+	b	.L2670
+.L2706:
+	mov	w20, 16386
+.L2686:
+	add	x0, x22, :lo12:.LANCHOR2
+	ldrh	w0, [x0,956]
+	cbz	w0, .L2687
+	mov	w0, 1
+	mov	w1, w0
+	bl	rk_ftl_garbage_collect
+	subs	w20, w20, #1
+	bne	.L2686
+.L2687:
+	add	x19, x19, :lo12:.LANCHOR0
+	str	wzr, [x19,2080]
+	b	.L2667
+.L2690:
+	adrp	x26, .LC132
+	mov	w24, 0
+	mov	w27, 56
+	add	x26, x26, :lo12:.LC132
+.L2671:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w1, [x0,2080]
+	cmp	w24, w1
+	bcs	.L2706
+	umull	x21, w24, w27
+	ldr	x0, [x0,2088]
+	str	w25, [x0,x21]
+.L2677:
+	add	x28, x19, :lo12:.LANCHOR0
+	ldr	x0, [x28,2088]
+	add	x1, x0, x21
+	ldr	w0, [x0,x21]
+	cmn	w0, #1
+	ldr	w0, [x1,4]
+	bne	.L2707
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	ldrh	w1, [x20]
+	cmp	w1, w0, uxth
+	bne	.L2678
+	add	x0, x22, :lo12:.LANCHOR2
+	ubfiz	x1, x1, 1, 16
+	ldrh	w3, [x20,4]
+	ldr	x2, [x0,-40]
+	ldrh	w0, [x2,x1]
+	sub	w0, w0, w3
+	strh	w0, [x2,x1]
+	strb	wzr, [x20,6]
+	ldrh	w0, [x28,2018]
+	strh	w0, [x20,2]
+	strh	wzr, [x20,4]
+.L2678:
+	ldrh	w0, [x20,4]
+	cbnz	w0, .L2679
+	mov	x0, x20
+	bl	allocate_new_data_superblock
+.L2679:
+	add	x4, x22, :lo12:.LANCHOR2
+	add	x28, x19, :lo12:.LANCHOR0
+	str	x4, [x29,104]
+	ldr	w0, [x4,448]
+	add	w0, w0, 1
+	str	w0, [x4,448]
+	ldr	x0, [x28,2088]
+	add	x0, x0, x21
+	ldr	w0, [x0,4]
+	lsr	x0, x0, 10
+	bl	FtlGcMarkBadPhyBlk
+	mov	x0, x20
+	bl	get_new_active_ppa
+	str	w0, [x29,124]
+	ldr	x1, [x28,2088]
+	mov	w2, w23
+	add	x1, x1, x21
+	str	w0, [x1,4]
+	mov	w1, 1
+	ldr	x0, [x28,2088]
+	ldrb	w3, [x20,9]
+	add	x0, x0, x21
+	bl	FlashProgPages
+	ldr	x4, [x29,104]
+	ldr	w0, [x4,-96]
+	cbz	w0, .L2677
+	b	.L2667
+.L2707:
+	cbz	w23, .L2705
+	orr	w0, w0, -2147483648
+.L2705:
+	str	w0, [x29,124]
+	mov	w2, 1
+	ldr	w0, [x1,24]
+	add	x1, x29, 124
+	bl	log2phys
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2088]
+	add	x21, x0, x21
+	ldr	x0, [x21,16]
+	ldr	w0, [x0,12]
+	cmn	w0, #1
+	beq	.L2683
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	uxth	w1, w0
+	add	x2, x22, :lo12:.LANCHOR2
+	ubfiz	x0, x1, 1, 16
+	mov	w21, w1
+	ldr	x2, [x2,-40]
+	ldrh	w2, [x2,x0]
+	cbnz	w2, .L2684
+	mov	x0, x26
+	bl	printk
+.L2684:
+	mov	w0, w21
+	bl	decrement_vpc_count
+.L2683:
+	add	w24, w24, 1
+	b	.L2671
+.L2667:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	2
+	.global	FtlSysFlush
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	adrp	x0, .LANCHOR2-96
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w0, [x0,#:lo12:.LANCHOR2-96]
+	cbnz	w0, .L2709
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	mov	w0, 1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2709:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	FtlDeInit
+	.type	FtlDeInit, %function
+FtlDeInit:
+	adrp	x0, .LANCHOR1+504
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w0, [x0,#:lo12:.LANCHOR1+504]
+	cmp	w0, 1
+	bne	.L2711
+	bl	FtlSysFlush
+.L2711:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlDeInit, .-FtlDeInit
+	.align	2
+	.global	rk_ftl_de_init
+	.type	rk_ftl_de_init, %function
+rk_ftl_de_init:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FlashDeInit
+	bl	FtlDeInit
+	bl	FlashDeInit
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_ftl_de_init, .-rk_ftl_de_init
+	.align	2
+	.global	FtlDiscard
+	.type	FtlDiscard, %function
+FtlDiscard:
+	stp	x29, x30, [sp, -80]!
+	add	w2, w0, w1
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	str	x23, [sp,48]
+	add	x21, x22, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	w19, w1
+	mov	w20, w0
+	ldr	w1, [x21,2060]
+	mov	w0, -1
+	cmp	w2, w1
+	bhi	.L2714
+	cmp	w19, 31
+	bls	.L2728
+	adrp	x23, .LANCHOR2
+	add	x0, x23, :lo12:.LANCHOR2
+	ldr	w0, [x0,-96]
+	cbnz	w0, .L2728
+	bl	FtlCacheWriteBack
+	ldrh	w1, [x21,2024]
+	udiv	w21, w20, w1
+	msub	w20, w1, w21, w20
+	uxth	w20, w20
+	cbz	w20, .L2717
+	sub	w1, w1, w20
+	add	w21, w21, 1
+	cmp	w1, w19
+	csel	w1, w1, w19, ls
+	sub	w19, w19, w1, uxth
+.L2717:
+	mov	w0, -1
+	adrp	x20, .LANCHOR4
+	str	w0, [x29,76]
+.L2718:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2024]
+	cmp	w19, w0
+	bcc	.L2729
+	mov	w0, w21
+	add	x1, x29, 72
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x29,72]
+	cmn	w0, #1
+	beq	.L2719
+	add	x1, x20, :lo12:.LANCHOR4
+	mov	w2, 1
+	ldr	w0, [x1,448]
+	add	w0, w0, 1
+	str	w0, [x1,448]
+	add	x1, x23, :lo12:.LANCHOR2
+	ldr	w0, [x1,168]
+	add	w0, w0, 1
+	str	w0, [x1,168]
+	add	x1, x29, 76
+	mov	w0, w21
+	bl	log2phys
+	ldr	w0, [x29,72]
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L2719:
+	add	x0, x22, :lo12:.LANCHOR0
+	add	w21, w21, 1
+	ldrh	w0, [x0,2024]
+	sub	w19, w19, w0
+	b	.L2718
+.L2729:
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w1, [x0,448]
+	cmp	w1, 32
+	bls	.L2728
+	str	wzr, [x0,448]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2728:
+	mov	w0, 0
+.L2714:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlDiscard, .-FtlDiscard
+	.align	2
+	.global	FtlGcFreeTempBlock
+	.type	FtlGcFreeTempBlock, %function
+FtlGcFreeTempBlock:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x2, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	adrp	x21, .LANCHOR0
+	add	x1, x21, :lo12:.LANCHOR0
+	ldr	w3, [x2,-96]
+	ldrh	w1, [x1,2018]
+	cbnz	w3, .L2765
+	ldrh	w20, [x2,96]
+	mov	w4, 65535
+	cmp	w20, w4
+	bne	.L2733
+.L2742:
+	add	x20, x19, :lo12:.LANCHOR2
+	mov	w0, 65535
+	add	x22, x20, 96
+	ldrh	w1, [x20,96]
+	str	wzr, [x20,2344]
+	cmp	w1, w0
+	beq	.L2765
+	bl	FtlCacheWriteBack
+	mov	w26, 12
+	add	x3, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x22,7]
+	ldr	x1, [x20,-40]
+	mov	w22, 0
+	ldrh	w2, [x20,96]
+	ldrh	w3, [x3,2018]
+	mul	w0, w0, w3
+	strh	w0, [x1,x2,lsl 1]
+	ldr	w0, [x20,184]
+	ldrh	w1, [x20,936]
+	add	w0, w1, w0
+	str	w0, [x20,184]
+	b	.L2743
+.L2733:
+	cbz	w0, .L2736
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	ldrh	w5, [x0,3008]
+	cmp	w5, w4
+	beq	.L2737
+.L2738:
+	mov	w1, 2
+	b	.L2736
+.L2737:
+	strh	w3, [x0,3008]
+	ldrh	w0, [x2,-8]
+	cmp	w0, 17
+	bhi	.L2738
+.L2736:
+	add	x22, x19, :lo12:.LANCHOR2
+	add	x0, x22, 96
+	bl	FtlGcScanTempBlk
+	str	w0, [x29,92]
+	cmn	w0, #1
+	beq	.L2739
+	ubfiz	x20, x20, 1, 16
+	ldr	x1, [x22,-80]
+	ldrh	w0, [x1,x20]
+	cmp	w0, 4
+	bls	.L2740
+	sub	w0, w0, #5
+	strh	w0, [x1,x20]
+	mov	w0, 1
+	bl	FtlEctTblFlush
+.L2740:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w1, [x0,2344]
+	cbnz	w1, .L2741
+	ldr	w1, [x0,448]
+	add	w1, w1, 1
+	str	w1, [x0,448]
+	ldr	w0, [x29,92]
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+.L2741:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, 1
+	str	wzr, [x19,2344]
+	b	.L2732
+.L2739:
+	adrp	x0, .LANCHOR1+3008
+	mov	w1, 65535
+	ldrh	w2, [x0,#:lo12:.LANCHOR1+3008]
+	mov	w0, 1
+	cmp	w2, w1
+	bne	.L2732
+	b	.L2742
+.L2746:
+	ldr	x25, [x20,944]
+	add	x1, x29, 92
+	umull	x24, w22, w26
+	mov	w2, 0
+	add	x23, x25, x24
+	ldr	w0, [x23,8]
+	bl	log2phys
+	ldr	w0, [x29,92]
+	ldr	w1, [x25,x24]
+	cmp	w0, w1
+	bne	.L2744
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	mov	w24, w0
+	ldr	w0, [x23,8]
+	add	x1, x23, 4
+	mov	w2, 1
+	bl	log2phys
+	mov	w0, w24
+.L2764:
+	bl	decrement_vpc_count
+.L2745:
+	add	w22, w22, 1
+	uxth	w22, w22
+.L2743:
+	ldrh	w0, [x20,936]
+	cmp	w0, w22
+	bhi	.L2746
+	b	.L2766
+.L2744:
+	ldr	w1, [x23,4]
+	cmp	w0, w1
+	beq	.L2745
+	ldrh	w0, [x20,96]
+	b	.L2764
+.L2766:
+	mov	w0, -1
+	bl	decrement_vpc_count
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2747
+	adrp	x0, .LC133
+	ldrh	w1, [x20,96]
+	add	x0, x0, :lo12:.LC133
+	bl	printk
+.L2747:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,96]
+	ldr	x1, [x1,-40]
+	ubfiz	x2, x0, 1, 16
+	ldrh	w1, [x1,x2]
+	cbz	w1, .L2748
+	bl	INSERT_DATA_LIST
+	b	.L2749
+.L2748:
+	bl	INSERT_FREE_LIST
+.L2749:
+	add	x20, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	wzr, [x20,936]
+	strh	w0, [x20,96]
+	strh	wzr, [x20,924]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	w0, [x20,160]
+	cbz	w0, .L2750
+	ldr	w0, [x20,220]
+	cmp	w0, 29
+	bhi	.L2750
+	ldrh	w0, [x20,272]
+	ldrh	w1, [x20,-8]
+	cmp	w1, w0
+	bcs	.L2751
+	lsl	w0, w0, 1
+	strh	w0, [x20,864]
+.L2751:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	w0, [x19,296]
+.L2765:
+	mov	w0, 0
+	b	.L2732
+.L2750:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x19,272]
+	ldrh	w0, [x19,-8]
+	add	w2, w1, w1, lsl 1
+	cmp	w0, w2, lsr 2
+	ble	.L2765
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w0, -1
+	strh	w0, [x19,296]
+	ldrb	w0, [x21,120]
+	cbz	w0, .L2752
+	sub	w1, w1, #2
+	strh	w1, [x19,864]
+	b	.L2765
+.L2752:
+	mov	w1, 20
+	strh	w1, [x19,864]
+.L2732:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
+	.align	2
+	.global	Ftl_gc_temp_data_write_back
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
+	adrp	x0, .LANCHOR0+120
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+120]
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	adrp	x21, .LANCHOR2
+	cbz	w0, .L2768
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	w1, [x0,880]
+	tbz	x1, 0, .L2768
+	ldrh	w0, [x0,100]
+	cbz	w0, .L2768
+.L2773:
+	mov	w0, 0
+	b	.L2769
+.L2768:
+	add	x1, x21, :lo12:.LANCHOR2
+	mov	w2, 0
+	mov	w3, w2
+	mov	w20, 0
+	mov	w22, 56
+	ldr	x0, [x1,2064]
+	ldr	w1, [x1,880]
+	bl	FlashProgPages
+.L2770:
+	add	x19, x21, :lo12:.LANCHOR2
+	ldr	w1, [x19,880]
+	cmp	w20, w1
+	bcs	.L2784
+	umull	x0, w20, w22
+	ldr	x2, [x19,2064]
+	add	x1, x2, x0
+	ldr	w2, [x2,x0]
+	cmn	w2, #1
+	bne	.L2771
+	ldrh	w3, [x19,96]
+	ldr	x1, [x19,-40]
+	strh	wzr, [x1,x3,lsl 1]
+	strh	w2, [x19,96]
+	ldr	w1, [x19,448]
+	add	w1, w1, 1
+	str	w1, [x19,448]
+	ldr	x1, [x19,2064]
+	add	x0, x1, x0
+	ldr	w0, [x0,4]
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	bl	FtlGcPageVarInit
+	b	.L2783
+.L2771:
+	ldr	x2, [x1,16]
+	add	w20, w20, 1
+	ldr	w1, [x1,4]
+	uxth	w20, w20
+	ldr	w0, [x2,12]
+	ldr	w2, [x2,8]
+	bl	FtlGcUpdatePage
+	b	.L2770
+.L2784:
+	ldr	x0, [x19,2064]
+	bl	FtlGcBufFree
+	str	wzr, [x19,880]
+	ldrh	w0, [x19,100]
+	cbnz	w0, .L2773
+	mov	w0, 1
+	bl	FtlGcFreeTempBlock
+.L2783:
+	mov	w0, 1
+.L2769:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
+	.align	2
+	.global	FtlGcPageRecovery
+	.type	FtlGcPageRecovery, %function
+FtlGcPageRecovery:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	adrp	x19, .LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR2
+	str	x21, [sp,32]
+	add	x21, x19, 96
+	mov	x0, x21
+	ldrh	w1, [x20,2018]
+	bl	FtlGcScanTempBlk
+	ldrh	w1, [x19,98]
+	ldrh	w0, [x20,2018]
+	cmp	w1, w0
+	bcc	.L2785
+	add	x0, x19, 2256
+	bl	FtlMapBlkWriteDumpData
+	mov	w0, 0
+	bl	FtlGcFreeTempBlock
+	str	wzr, [x19,2344]
+.L2785:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
+	.align	2
+	.global	FtlPowerLostRecovery
+	.type	FtlPowerLostRecovery, %function
+FtlPowerLostRecovery:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LANCHOR4+296
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	str	wzr, [x0,#:lo12:.LANCHOR4+296]
+	mov	x0, x19
+	bl	FtlRecoverySuperblock
+	mov	x0, x19
+	add	x19, x19, 48
+	bl	FtlSlcSuperblockCheck
+	mov	x0, x19
+	bl	FtlRecoverySuperblock
+	mov	x0, x19
+	bl	FtlSlcSuperblockCheck
+	bl	FtlGcPageRecovery
+	mov	w0, -1
+	bl	decrement_vpc_count
+	ldr	x19, [sp,16]
+	mov	w0, 0
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
+	.align	2
+	.global	FtlSysBlkInit
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, -1
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR4
+	adrp	x24, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x22, x24, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	strh	w1, [x0,290]
+	add	x19, x20, :lo12:.LANCHOR2
+	strh	wzr, [x0,292]
+	ldrh	w0, [x22,1948]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	w1, [x19,280]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2789
+.L2791:
+	mov	w23, -1
+	b	.L2790
+.L2789:
+	bl	FtlLoadSysInfo
+	mov	w23, w0
+	cbnz	w0, .L2791
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	w0, 1
+	bl	FtlUpdateVaildLpn
+	ldrh	w2, [x22,2058]
+	mov	x1, 0
+	ldr	x0, [x19,144]
+.L2792:
+	cmp	w1, w2
+	mov	w3, w1
+	bge	.L2796
+	add	x4, x0, x1, lsl 4
+	add	x1, x1, 1
+	ldr	w4, [x4,4]
+	tbz	w4, #31, .L2792
+.L2796:
+	add	x0, x20, :lo12:.LANCHOR2
+	cmp	w3, w2
+	ldrh	w1, [x0,252]
+	add	w1, w1, 1
+	strh	w1, [x0,252]
+	blt	.L2793
+	add	x0, x21, :lo12:.LANCHOR4
+	ldrh	w0, [x0,292]
+	cbz	w0, .L2797
+.L2793:
+	add	x19, x20, :lo12:.LANCHOR2
+	mov	x0, x19
+	add	x22, x19, 48
+	bl	FtlSuperblockPowerLostFix
+	mov	x0, x22
+	bl	FtlSuperblockPowerLostFix
+	ldrh	w0, [x20,#:lo12:.LANCHOR2]
+	ldr	x2, [x19,-40]
+	lsl	x0, x0, 1
+	ldrh	w3, [x19,4]
+	ldrh	w1, [x2,x0]
+	sub	w1, w1, w3
+	strh	w1, [x2,x0]
+	add	x0, x24, :lo12:.LANCHOR0
+	strb	wzr, [x19,6]
+	ldr	x3, [x19,-40]
+	strh	wzr, [x19,4]
+	ldrh	w1, [x0,2018]
+	strh	w1, [x19,2]
+	ldrh	w1, [x19,48]
+	ldrh	w4, [x19,52]
+	lsl	x1, x1, 1
+	ldrh	w2, [x3,x1]
+	sub	w2, w2, w4
+	strh	w2, [x3,x1]
+	strb	wzr, [x19,54]
+	ldrh	w0, [x0,2018]
+	strh	w0, [x19,50]
+	add	x0, x19, 2256
+	strh	wzr, [x19,52]
+	bl	FtlMapBlkWriteDumpData
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x0, x0, 224
+	bl	FtlMapBlkWriteDumpData
+	ldrh	w0, [x19,254]
+	add	w0, w0, 1
+	strh	w0, [x19,254]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	bl	FtlVpcTblFlush
+.L2797:
+	ldrh	w1, [x20,#:lo12:.LANCHOR2]
+	mov	w0, 65535
+	add	x19, x20, :lo12:.LANCHOR2
+	cmp	w1, w0
+	beq	.L2798
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L2798
+	ldrh	w0, [x19,52]
+	add	x22, x19, 48
+	cbnz	w0, .L2798
+	bl	FtlVpcTblFlush
+	adrp	x0, .LANCHOR2
+	ldrh	w0, [x0,#:lo12:.LANCHOR2]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	w0, [x19,48]
+	bl	FtlGcRefreshOpenBlock
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+	mov	x0, x22
+	bl	allocate_new_data_superblock
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x0, x0, 224
+	bl	FtlMapBlkWriteDumpData
+.L2798:
+	add	x20, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x20,252]
+	and	w0, w0, 31
+	cbnz	w0, .L2790
+	bl	FtlVpcCheckAndModify
+.L2790:
+	mov	w0, w23
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.align	2
+	.global	Ftl_get_new_temp_ppa
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x0, 96
+	ldrh	w2, [x0,96]
+	mov	w0, 65535
+	cmp	w2, w0
+	beq	.L2805
+	ldrh	w0, [x1,4]
+	cbnz	w0, .L2806
+.L2805:
+	bl	FtlCacheWriteBack
+	add	x20, x19, :lo12:.LANCHOR2
+	mov	w0, 0
+	bl	FtlGcFreeTempBlock
+	strb	wzr, [x20,104]
+	add	x0, x20, 96
+	bl	allocate_data_superblock
+	strh	wzr, [x20,924]
+	strh	wzr, [x20,936]
+	bl	l2p_flush
+	mov	w0, 0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2806:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x0, x0, 96
+	bl	get_new_active_ppa
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	2
+	.global	rk_ftl_cache_write_back
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlCacheWriteBack
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	2
+	.global	FtlInit
+	.type	FtlInit, %function
+FtlInit:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LC74
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	adrp	x21, .LANCHOR1
+	add	x21, x21, :lo12:.LANCHOR1
+	add	x1, x1, :lo12:.LC74
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	mov	w0, -1
+	str	w0, [x21,504]
+	adrp	x0, .LANCHOR4+452
+	adrp	x20, .LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR2
+	str	wzr, [x0,#:lo12:.LANCHOR4+452]
+	adrp	x0, .LC73
+	add	x0, x0, :lo12:.LC73
+	str	wzr, [x20,-96]
+	bl	printk
+	mov	x0, x19
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x19,1948]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	w0, .L2809
+	adrp	x0, .LC134
+	add	x0, x0, :lo12:.LC134
+	b	.L2821
+.L2809:
+	bl	FtlSysBlkInit
+	cbz	w0, .L2811
+	adrp	x0, .LC135
+	add	x0, x0, :lo12:.LC135
+.L2821:
+	adrp	x1, .LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x1, x1, 40
+	bl	printk
+	b	.L2810
+.L2811:
+	mov	w1, 1
+	str	w1, [x21,504]
+	bl	rk_ftl_garbage_collect
+	ldrh	w0, [x20,-8]
+	cmp	w0, 15
+	bhi	.L2812
+	mov	w19, 1024
+.L2813:
+	mov	w0, 1
+	mov	w1, w0
+	bl	rk_ftl_garbage_collect
+	subs	w19, w19, #1
+	bne	.L2813
+	b	.L2810
+.L2812:
+	ldrb	w0, [x19,120]
+	cbz	w0, .L2810
+	mov	w19, 128
+.L2815:
+	mov	w0, 1
+	mov	w1, w0
+	bl	rk_ftl_garbage_collect
+	subs	w19, w19, #1
+	bne	.L2815
+.L2810:
+	mov	w0, 0
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlInit, .-FtlInit
+	.align	2
+	.global	rk_ftl_init
+	.type	rk_ftl_init, %function
+rk_ftl_init:
+	stp	x29, x30, [sp, -32]!
+	mov	w0, 2048
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR4
+	bl	ftl_malloc
+	add	x1, x19, 464
+	str	x0, [x19,456]
+	add	x0, x19, 48
+	str	xzr, [x19,48]
+	str	xzr, [x19,464]
+	bl	rknand_get_reg_addr
+	ldr	x1, [x19,48]
+	mov	w0, -1
+	cbz	x1, .L2823
+	bl	rk_nandc_irq_init
+	mov	w1, 0
+	ldr	x0, [x19,456]
+	mov	w2, w1
+	mov	w3, 2048
+	bl	FlashSramLoadStore
+	bl	rknand_flash_cs_init
+	ldr	x0, [x19,48]
+	bl	FlashInit
+	mov	w19, w0
+	cbnz	w0, .L2824
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 168
+	bl	FtlInit
+.L2824:
+	adrp	x0, .LC136
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC136
+	bl	printk
+	mov	w0, w19
+.L2823:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	rk_ftl_init, .-rk_ftl_init
+	.align	2
+	.global	ftl_fix_nand_power_lost_error
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldrb	w0, [x0,120]
+	cbz	w0, .L2827
+	adrp	x21, .LANCHOR4
+	adrp	x19, .LANCHOR2
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x25, x19, :lo12:.LANCHOR2
+	adrp	x24, .LC137
+	add	x26, x25, 48
+	ldrh	w23, [x0,290]
+	add	x0, x24, :lo12:.LC137
+	ldr	x2, [x25,-40]
+	ubfiz	x22, x23, 1, 16
+	mov	w1, w23
+	ldrh	w2, [x2,x22]
+	bl	printk
+	ldrh	w0, [x19,#:lo12:.LANCHOR2]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	w0, [x25,48]
+	bl	FtlGcRefreshOpenBlock
+	mov	x0, x25
+	mov	w25, 4097
+	bl	allocate_new_data_superblock
+	mov	x0, x26
+	bl	allocate_new_data_superblock
+.L2829:
+	subs	w25, w25, #1
+	beq	.L2833
+	mov	w0, 1
+	mov	w1, w0
+	bl	rk_ftl_garbage_collect
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x0, [x0,-40]
+	ldrh	w0, [x0,x22]
+	cbnz	w0, .L2829
+.L2833:
+	add	x25, x19, :lo12:.LANCHOR2
+	add	x0, x24, :lo12:.LC137
+	mov	w1, w23
+	ldr	x2, [x25,-40]
+	ldrh	w2, [x2,x22]
+	bl	printk
+	ldr	x0, [x25,-40]
+	ldrh	w0, [x0,x22]
+	cbnz	w0, .L2831
+	add	x0, x29, 80
+	add	x20, x20, :lo12:.LANCHOR0
+	strh	w23, [x29,80]
+	bl	make_superblock
+	mov	x0, 0
+	ldrh	w5, [x20,1944]
+	mov	w6, 65535
+	mov	w20, w0
+	mov	w7, 56
+.L2834:
+	cmp	w5, w0, uxth
+	bls	.L2841
+	add	x1, x29, 80
+	add	x1, x1, x0, lsl 1
+	ldrh	w2, [x1,16]
+	cmp	w2, w6
+	beq	.L2835
+	add	x4, x19, :lo12:.LANCHOR2
+	lsl	w2, w2, 10
+	umull	x1, w20, w7
+	add	w20, w20, 1
+	ldr	x3, [x4,-88]
+	uxth	w20, w20
+	add	x3, x3, x1
+	str	w2, [x3,4]
+	ldr	x2, [x4,-88]
+	add	x1, x2, x1
+	str	xzr, [x1,8]
+	str	xzr, [x1,16]
+.L2835:
+	add	x0, x0, 1
+	b	.L2834
+.L2841:
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x0, .LC138
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC138
+	ldr	x2, [x19,-40]
+	ldrh	w2, [x2,x22]
+	bl	printk
+	ldr	x0, [x19,-88]
+	mov	w1, 0
+	mov	w2, w20
+	bl	FlashEraseBlocks
+	ldr	x0, [x19,-88]
+	mov	w1, 1
+	mov	w2, w20
+	bl	FlashEraseBlocks
+.L2831:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w0, -1
+	strh	w0, [x21,290]
+.L2827:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.align	2
+	.global	FtlRead
+	.type	FtlRead, %function
+FtlRead:
+	stp	x29, x30, [sp, -176]!
+	uxtb	w0, w0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	cmp	w0, 16
+	mov	w20, w1
+	mov	w28, w2
+	mov	x26, x3
+	bne	.L2843
+	add	w0, w1, 256
+	mov	w1, w2
+	mov	x2, x3
+	bl	FtlVendorPartRead
+	b	.L2844
+.L2843:
+	adrp	x21, .LANCHOR0
+	add	w0, w1, w2
+	add	x1, x21, :lo12:.LANCHOR0
+	str	w0, [x29,152]
+	mov	w0, -1
+	ldr	w3, [x29,152]
+	ldr	w2, [x1,2060]
+	cmp	w3, w2
+	bhi	.L2844
+	ldrh	w0, [x1,2024]
+	sub	w25, w3, #1
+	adrp	x19, .LANCHOR2
+	udiv	w1, w20, w0
+	str	w1, [x29,156]
+	udiv	w25, w25, w0
+	ldr	w0, [x29,156]
+	sub	w24, w25, w0
+	add	x0, x19, :lo12:.LANCHOR2
+	add	w24, w24, 1
+	ldr	w1, [x0,192]
+	add	w1, w28, w1
+	str	w1, [x0,192]
+	ldr	w1, [x0,164]
+	add	w1, w24, w1
+	str	w1, [x0,164]
+	ldr	w0, [x29,156]
+	mov	w1, w25
+	bl	FtlCacheMetchLpa
+	cbz	w0, .L2845
+	bl	FtlCacheWriteBack
+.L2845:
+	mov	w27, 0
+	ldr	w22, [x29,156]
+	str	w27, [x29,140]
+	mov	w23, w27
+	str	w27, [x29,136]
+.L2846:
+	cbz	w24, .L2888
+	mov	w0, w22
+	add	x1, x29, 172
+	mov	w2, 0
+	bl	log2phys
+	ldr	w3, [x29,172]
+	cmn	w3, #1
+	bne	.L2885
+	mov	w3, 0
+.L2847:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2024]
+	cmp	w3, w0
+	bcs	.L2851
+	madd	w0, w22, w0, w3
+	cmp	w0, w20
+	bcc	.L2849
+	ldr	w1, [x29,152]
+	cmp	w0, w1
+	bcs	.L2849
+	sub	w0, w0, w20
+	mov	w1, 0
+	ubfiz	x0, x0, 9, 23
+	mov	w2, 512
+	add	x0, x26, x0
+	str	x3, [x29,144]
+	bl	ftl_memset
+	ldr	x3, [x29,144]
+.L2849:
+	add	w3, w3, 1
+	b	.L2847
+.L2885:
+	mov	w0, 56
+	umull	x1, w23, w0
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x2, [x0,2056]
+	add	x2, x2, x1
+	str	w3, [x2,4]
+	ldr	w2, [x29,156]
+	cmp	w22, w2
+	ldr	x2, [x0,2056]
+	add	x2, x2, x1
+	bne	.L2852
+	ldr	x0, [x0,2104]
+	str	x0, [x2,8]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2024]
+	udiv	w3, w20, w0
+	msub	w3, w3, w0, w20
+	str	w3, [x29,112]
+	sub	w3, w0, w3
+	cmp	w3, w28
+	csel	w3, w3, w28, ls
+	str	w3, [x29,140]
+	cmp	w3, w0
+	bne	.L2853
+	str	x26, [x2,8]
+	b	.L2853
+.L2852:
+	cmp	w22, w25
+	bne	.L2854
+	ldr	x0, [x0,2112]
+	str	x0, [x2,8]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w4, [x29,152]
+	ldrh	w3, [x0,2024]
+	mul	w0, w22, w3
+	sub	w27, w4, w0
+	cmp	w27, w3
+	bne	.L2853
+	b	.L2886
+.L2854:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2024]
+	mul	w0, w22, w0
+.L2886:
+	sub	w0, w0, w20
+	ubfiz	x0, x0, 9, 23
+	add	x0, x26, x0
+	str	x0, [x2,8]
+.L2853:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldr	x0, [x2,2056]
+	ldr	x2, [x2,2128]
+	add	x1, x0, x1
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2030]
+	str	w22, [x1,24]
+	mul	w0, w23, w0
+	add	w23, w23, 1
+	and	x0, x0, 4294967292
+	add	x0, x2, x0
+	str	x0, [x1,16]
+.L2851:
+	subs	w24, w24, #1
+	add	w22, w22, 1
+	beq	.L2855
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x0,1944]
+	cmp	w23, w0, lsl 3
+	bne	.L2846
+.L2855:
+	cbz	w23, .L2846
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, w23
+	mov	w2, 0
+	ldr	x0, [x0,2056]
+	bl	FlashReadPages
+	str	xzr, [x29,144]
+	ldr	x0, [x29,112]
+	ubfiz	x0, x0, 9, 23
+	str	x0, [x29,128]
+	ldr	w0, [x29,140]
+	lsl	w0, w0, 9
+	str	w0, [x29,108]
+	lsl	w0, w27, 9
+	str	w0, [x29,104]
+.L2857:
+	ldr	w0, [x29,144]
+	cmp	w23, w0
+	bls	.L2889
+	ldr	x0, [x29,144]
+	add	x2, x19, :lo12:.LANCHOR2
+	mov	x1, 56
+	ldr	w4, [x29,156]
+	mul	x3, x0, x1
+	ldr	x0, [x2,2056]
+	add	x0, x0, x3
+	ldr	w1, [x0,24]
+	cmp	w1, w4
+	bne	.L2858
+	ldr	x1, [x0,8]
+	ldr	x0, [x2,2104]
+	cmp	x1, x0
+	bne	.L2859
+	ldr	x2, [x29,128]
+	mov	x0, x26
+	str	x3, [x29,96]
+	add	x1, x1, x2
+	ldr	w2, [x29,108]
+	b	.L2887
+.L2858:
+	cmp	w1, w25
+	bne	.L2859
+	ldr	x1, [x0,8]
+	ldr	x0, [x2,2112]
+	cmp	x1, x0
+	bne	.L2859
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w2, [x29,104]
+	str	x3, [x29,96]
+	ldrh	w0, [x0,2024]
+	mul	w0, w25, w0
+	sub	w0, w0, w20
+	ubfiz	x0, x0, 9, 23
+	add	x0, x26, x0
+.L2887:
+	bl	ftl_memcpy
+	ldr	x3, [x29,96]
+.L2859:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x1, [x0,2056]
+	add	x5, x1, x3
+	ldr	w4, [x1,x3]
+	cmn	w4, #1
+	bne	.L2860
+	ldr	w2, [x0,424]
+	str	w4, [x29,136]
+	add	w2, w2, 1
+	str	w2, [x0,424]
+.L2860:
+	ldr	w0, [x1,x3]
+	cmp	w0, 256
+	bne	.L2861
+	ldr	w0, [x5,4]
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L2861:
+	ldr	x0, [x29,144]
+	add	x0, x0, 1
+	str	x0, [x29,144]
+	b	.L2857
+.L2889:
+	mov	w23, 0
+	b	.L2846
+.L2888:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x19,956]
+	cbz	w0, .L2864
+	mov	w0, w24
+	mov	w1, 1
+	bl	rk_ftl_garbage_collect
+.L2864:
+	ldr	w0, [x29,136]
+.L2844:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	FtlRead, .-FtlRead
+	.align	2
+	.global	FtlWrite
+	.type	FtlWrite, %function
+FtlWrite:
+	stp	x29, x30, [sp, -272]!
+	uxtb	w4, w0
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	mov	w22, w1
+	adrp	x1, .LANCHOR2
+	stp	x23, x24, [sp,48]
+	mov	w23, w2
+	add	x2, x1, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x24, x3
+	str	x1, [x29,152]
+	ldr	w3, [x2,-96]
+	cbnz	w3, .L2891
+	cmp	w4, 16
+	bne	.L2892
+	add	w0, w22, 256
+	mov	w1, w23
+	mov	x2, x24
+	bl	FtlVendorPartWrite
+	b	.L2891
+.L2892:
+	adrp	x20, .LANCHOR0
+	add	w26, w22, w23
+	add	x4, x20, :lo12:.LANCHOR0
+	mov	w0, -1
+	ldr	w1, [x4,2060]
+	cmp	w26, w1
+	bhi	.L2891
+	adrp	x3, .LANCHOR4
+	ldrh	w1, [x4,2024]
+	add	x28, x3, :lo12:.LANCHOR4
+	sub	w26, w26, #1
+	mov	w0, 2048
+	str	x3, [x29,144]
+	udiv	w25, w22, w1
+	cmp	w23, w1, lsl 1
+	str	w0, [x28,472]
+	add	x19, x2, 48
+	ldr	w3, [x4,2080]
+	udiv	w0, w26, w1
+	str	w0, [x29,200]
+	sub	w26, w0, w25
+	add	w27, w26, 1
+	ldr	w0, [x2,172]
+	add	w0, w27, w0
+	str	w0, [x2,172]
+	ldr	w0, [x2,188]
+	add	w0, w23, w0
+	str	w0, [x2,188]
+	cset	w0, cs
+	str	w0, [x29,204]
+	cmp	w23, 8
+	csel	x19, x2, x19, hi
+	cbz	w3, .L2895
+	mov	w0, 56
+	sub	w3, w3, #1
+	umull	x3, w3, w0
+	ldr	x0, [x4,2088]
+	add	x3, x0, x3
+	ldr	w0, [x3,24]
+	cmp	w25, w0
+	bne	.L2896
+	ldr	w0, [x2,176]
+	add	w0, w0, 1
+	str	w0, [x2,176]
+	ldr	w0, [x28,476]
+	add	w0, w0, 1
+	str	w0, [x28,476]
+	msub	w0, w25, w1, w22
+	sub	w1, w1, w0
+	ubfiz	x0, x0, 9, 23
+	cmp	w1, w23
+	csel	w19, w1, w23, ls
+	ldr	x1, [x3,8]
+	lsl	w21, w19, 9
+	add	x0, x1, x0
+	mov	w2, w21
+	mov	x1, x24
+	bl	ftl_memcpy
+	cbnz	w26, .L2897
+	ldr	w0, [x28,476]
+	cmp	w0, 2
+	bgt	.L2897
+.L2930:
+	mov	w0, 0
+	b	.L2891
+.L2897:
+	sub	w23, w23, w19
+	add	w22, w22, w19
+	add	x24, x24, x21
+	add	w25, w25, 1
+	mov	w27, w26
+.L2896:
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x19, [x0,440]
+	str	wzr, [x0,476]
+.L2895:
+	ldr	w1, [x29,200]
+	mov	w0, w25
+	bl	FtlCacheMetchLpa
+	cbz	w0, .L2898
+	bl	FtlCacheWriteBack
+.L2898:
+	ldr	x0, [x29,144]
+	str	w25, [x29,184]
+	add	x0, x0, :lo12:.LANCHOR4
+	str	x19, [x0,440]
+	ldr	x0, [x29,152]
+	add	x21, x0, :lo12:.LANCHOR2
+	adrp	x0, .LC139
+	add	x0, x0, :lo12:.LC139
+	str	x0, [x29,104]
+.L2899:
+	cbz	w27, .L2960
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L2900
+	cmp	x19, x21
+	bne	.L2901
+	add	x0, x21, 48
+	ldrh	w19, [x0,4]
+	cbnz	w19, .L2902
+	bl	allocate_new_data_superblock
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	str	w19, [x0,3012]
+.L2902:
+	mov	x0, x21
+	add	x19, x21, 48
+	bl	allocate_new_data_superblock
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	ldr	w0, [x0,3012]
+	cbnz	w0, .L2903
+.L2904:
+	mov	x19, x21
+	b	.L2903
+.L2901:
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	str	w0, [x1,3012]
+	ldrh	w0, [x21,4]
+	cbnz	w0, .L2904
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+.L2903:
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L2905
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+.L2905:
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR4
+	str	x19, [x0,440]
+.L2900:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldr	w0, [x21,2048]
+	ldrh	w1, [x19,4]
+	str	xzr, [x29,192]
+	ldr	w2, [x2,2080]
+	sub	w0, w0, w2
+	cmp	w1, w0
+	csel	w0, w1, w0, ls
+	cmp	w0, w27
+	csel	w0, w0, w27, ls
+	str	w0, [x29,140]
+	ldr	w0, [x29,204]
+	and	w0, w0, 1
+	str	w0, [x29,116]
+	add	w0, w23, w22
+	str	w0, [x29,136]
+.L2906:
+	ldr	w0, [x29,192]
+	ldr	w2, [x29,140]
+	ldr	w1, [x29,184]
+	cmp	w0, w2
+	add	w26, w1, w0
+	bcs	.L2961
+	ldrh	w1, [x19,4]
+	cbz	w1, .L2937
+	ldr	w1, [x29,200]
+	cmp	w26, w1
+	cset	w7, eq
+	cbz	w0, .L2908
+	ldr	w1, [x29,116]
+	tst	w7, w1
+	beq	.L2908
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	w2, [x29,136]
+	ldrh	w1, [x1,2024]
+	msub	w2, w26, w1, w2
+	cmp	w2, w1
+	bne	.L2937
+.L2908:
+	add	x1, x29, 212
+	mov	w2, 0
+	mov	w0, w26
+	str	x7, [x29,96]
+	bl	log2phys
+	mov	x0, x19
+	bl	get_new_active_ppa
+	add	x4, x20, :lo12:.LANCHOR0
+	mov	w5, 56
+	str	x4, [x29,176]
+	str	x5, [x29,160]
+	ldr	w6, [x4,2080]
+	ldr	x2, [x4,2088]
+	umull	x1, w6, w5
+	add	x2, x2, x1
+	str	w0, [x2,4]
+	ldrh	w2, [x4,2030]
+	ldr	x0, [x4,2088]
+	add	x1, x0, x1
+	mul	w0, w2, w6
+	and	x0, x0, 4294967292
+	str	x0, [x29,128]
+	ldr	x0, [x21,2136]
+	ldr	x3, [x29,128]
+	str	x0, [x29,120]
+	add	x28, x0, x3
+	ldrh	w0, [x4,2028]
+	str	x28, [x1,16]
+	str	w26, [x1,24]
+	mul	w0, w0, w6
+	ldr	x6, [x21,2096]
+	and	x0, x0, 4294967292
+	add	x0, x6, x0
+	str	x0, [x1,8]
+	mov	x0, x28
+	mov	w1, 0
+	bl	ftl_memset
+	cmp	w26, w25
+	ldr	x4, [x29,176]
+	cset	w0, eq
+	str	w0, [x29,188]
+	cbnz	w0, .L2940
+	ldr	x7, [x29,96]
+	ldr	x5, [x29,160]
+	cbz	w7, .L2909
+	ldr	w0, [x29,136]
+	ldrh	w2, [x4,2024]
+	msub	w2, w26, w2, w0
+	uxth	w0, w2
+	str	w0, [x29,176]
+	ldr	w0, [x29,188]
+	str	w0, [x29,160]
+	b	.L2912
+.L2940:
+	ldrh	w2, [x4,2024]
+	udiv	w0, w22, w2
+	msub	w0, w0, w2, w22
+	str	w0, [x29,160]
+	sub	w2, w2, w0
+	cmp	w2, w23
+	csel	w0, w2, w23, ls
+	str	w0, [x29,176]
+.L2912:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldr	w1, [x29,176]
+	ldrh	w0, [x2,2024]
+	cmp	w1, w0
+	bne	.L2913
+	ldr	w0, [x29,188]
+	mov	x1, x24
+	cbnz	w0, .L2914
+	ldr	w0, [x29,176]
+	mul	w1, w0, w26
+	sub	w1, w1, w22
+	ubfiz	x1, x1, 9, 23
+	add	x1, x24, x1
+.L2914:
+	ldr	w2, [x29,204]
+	mov	w0, 56
+	add	x4, x20, :lo12:.LANCHOR0
+	cbz	w2, .L2915
+	ldr	w2, [x4,2080]
+	umull	x0, w2, w0
+	ldr	x2, [x4,2088]
+	add	x0, x2, x0
+	b	.L2957
+.L2915:
+	ldr	w2, [x4,2080]
+	umull	x0, w2, w0
+	ldr	x2, [x4,2088]
+	add	x0, x2, x0
+	ldr	x0, [x0,8]
+	b	.L2958
+.L2913:
+	ldr	w0, [x29,212]
+	cmn	w0, #1
+	beq	.L2917
+	str	w0, [x29,220]
+	mov	w1, 56
+	ldr	w0, [x2,2080]
+	str	w26, [x29,240]
+	umull	x0, w0, w1
+	ldr	x1, [x2,2088]
+	mov	w2, 0
+	add	x0, x1, x0
+	ldr	x1, [x0,8]
+	ldr	x0, [x0,16]
+	str	x1, [x29,224]
+	mov	w1, 1
+	str	x0, [x29,232]
+	add	x0, x29, 216
+	bl	FlashReadPages
+	ldr	w0, [x29,216]
+	cmn	w0, #1
+	bne	.L2918
+	ldr	w0, [x21,424]
+	add	w0, w0, 1
+	str	w0, [x21,424]
+	b	.L2920
+.L2918:
+	ldr	w0, [x28,8]
+	cmp	w0, w26
+	beq	.L2920
+	ldr	w0, [x21,424]
+	mov	w2, w26
+	add	w0, w0, 1
+	str	w0, [x21,424]
+	ldr	x0, [x29,104]
+	ldr	w1, [x28,8]
+	bl	printk
+	b	.L2920
+.L2917:
+	ldr	w0, [x2,2080]
+	mov	w1, 56
+	umull	x0, w0, w1
+	ldr	x1, [x2,2088]
+	ldrh	w2, [x2,2028]
+	add	x0, x1, x0
+	mov	w1, 0
+	ldr	x0, [x0,8]
+	bl	ftl_memset
+.L2920:
+	ldr	w1, [x29,176]
+	mov	w0, 56
+	lsl	w2, w1, 9
+	ldr	w1, [x29,188]
+	cbz	w1, .L2921
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	w4, [x1,2080]
+	umull	x0, w4, w0
+	ldr	x4, [x1,2088]
+	add	x4, x4, x0
+	ldr	x0, [x29,160]
+	ubfiz	x0, x0, 9, 23
+	ldr	x1, [x4,8]
+	add	x0, x1, x0
+	mov	x1, x24
+	b	.L2959
+.L2921:
+	add	x5, x20, :lo12:.LANCHOR0
+	ldr	w4, [x5,2080]
+	ldr	x1, [x5,2088]
+	umull	x0, w4, w0
+	add	x0, x1, x0
+	ldrh	w1, [x5,2024]
+	mul	w1, w26, w1
+	ldr	x0, [x0,8]
+	sub	w1, w1, w22
+	ubfiz	x1, x1, 9, 23
+	add	x1, x24, x1
+	b	.L2959
+.L2909:
+	ldr	w0, [x29,204]
+	ldrh	w1, [x4,2024]
+	ldr	w2, [x4,2080]
+	cbz	w0, .L2922
+	mul	w1, w26, w1
+	umull	x0, w2, w5
+	sub	w1, w1, w22
+	ldr	x2, [x4,2088]
+	ubfiz	x1, x1, 9, 23
+	add	x0, x2, x0
+	add	x1, x24, x1
+.L2957:
+	str	x1, [x0,8]
+	b	.L2916
+.L2922:
+	umull	x0, w2, w5
+	ldr	x2, [x4,2088]
+	mul	w1, w26, w1
+	add	x0, x2, x0
+	sub	w1, w1, w22
+	ubfiz	x1, x1, 9, 23
+	ldr	x0, [x0,8]
+	add	x1, x24, x1
+.L2958:
+	ldrh	w2, [x4,2028]
+.L2959:
+	bl	ftl_memcpy
+.L2916:
+	ldr	x1, [x29,120]
+	mov	w0, -3947
+	ldr	x2, [x29,128]
+	strh	w0, [x1,x2]
+	add	x1, x20, :lo12:.LANCHOR0
+	str	w26, [x28,8]
+	ldr	w0, [x21,200]
+	str	w0, [x28,4]
+	add	w0, w0, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x21,200]
+	ldr	w0, [x29,212]
+	str	w0, [x28,12]
+	ldrh	w0, [x19]
+	strh	w0, [x28,2]
+	ldr	w0, [x1,2080]
+	add	w0, w0, 1
+	str	w0, [x1,2080]
+	ldr	x0, [x29,192]
+	add	x0, x0, 1
+	str	x0, [x29,192]
+	b	.L2906
+.L2961:
+	str	w26, [x29,184]
+	mov	x0, x2
+	b	.L2907
+.L2937:
+	str	w26, [x29,184]
+.L2907:
+	sub	w27, w27, w0
+	ldr	w0, [x29,204]
+	cbnz	w0, .L2926
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	w1, [x0,2080]
+	ldr	w0, [x21,2048]
+	cmp	w1, w0
+	bcs	.L2926
+	ldrh	w0, [x19,4]
+	cbz	w0, .L2926
+.L2928:
+	str	wzr, [x29,204]
+	b	.L2899
+.L2926:
+	bl	FtlCacheWriteBack
+	add	x0, x20, :lo12:.LANCHOR0
+	cmp	w27, 3
+	str	wzr, [x0,2080]
+	bls	.L2928
+	b	.L2899
+.L2960:
+	ldr	w1, [x29,200]
+	mov	w0, w27
+	sub	w1, w1, w25
+	bl	rk_ftl_garbage_collect
+	ldr	x0, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,-8]
+	cmp	w1, 31
+	bhi	.L2930
+	mov	w1, 128
+	mov	w19, 16
+	strh	w1, [x0,866]
+	strh	w1, [x0,864]
+.L2931:
+	mov	w0, 0
+	mov	w1, 1
+	bl	rk_ftl_garbage_collect
+	ldr	x0, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	w0, [x0,-96]
+	cbnz	w0, .L2930
+	subs	w19, w19, #1
+	bne	.L2931
+	b	.L2930
+.L2891:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 272
+	ret
+	.size	FtlWrite, .-FtlWrite
+	.align	2
+	.global	StorageSysDataStore
+	.type	StorageSysDataStore, %function
+StorageSysDataStore:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w19, w0
+	str	x1, [x29,40]
+	bl	rknand_device_lock
+	ldr	x3, [x29,40]
+	add	w1, w19, 256
+	mov	w2, 1
+	mov	w0, 16
+	bl	FtlWrite
+	str	x0, [x29,40]
+	bl	rknand_device_unlock
+	ldr	x19, [sp,16]
+	ldr	x0, [x29,40]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	StorageSysDataStore, .-StorageSysDataStore
+	.align	2
+	.type	FlashReadFacBbtData.part.13, %function
+FlashReadFacBbtData.part.13:
+	stp	x29, x30, [sp, -32]!
+	mov	w3, 0
+	adrp	x4, .LANCHOR4
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w7, 1
+	mov	x19, x0
+	cbnz	w1, .L2966
+.L2968:
+	add	x0, x4, :lo12:.LANCHOR4
+	ldr	w1, [x0,92]
+	cmp	w3, w1
+	bcs	.L2966
+	ubfx	x5, x3, 5, 11
+	ldr	x0, [x0,56]
+	lsl	x5, x5, 2
+	lsl	w6, w7, w3
+	add	w3, w3, 1
+	ldr	w1, [x0,x5]
+	uxth	w3, w3
+	orr	w6, w1, w6
+	str	w6, [x0,x5]
+	b	.L2968
+.L2966:
+	add	x4, x4, :lo12:.LANCHOR4
+	mov	x0, x19
+	ldr	x1, [x4,56]
+	bl	ftl_memcpy
+	mov	w2, 4
+	adrp	x0, .LC140
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC140
+	mov	w3, w2
+	bl	rknand_print_hex
+	ldr	x19, [sp,16]
+	mov	w0, 0
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FlashReadFacBbtData.part.13, .-FlashReadFacBbtData.part.13
+	.align	2
+	.global	FlashReadFacBbtData
+	.type	FlashReadFacBbtData, %function
+FlashReadFacBbtData:
+	stp	x29, x30, [sp, -144]!
+	adrp	x4, .LANCHOR0
+	add	x29, sp, 0
+	add	x4, x4, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	x22, x0
+	mov	w23, w1
+	ldrh	w0, [x4,182]
+	mov	w25, w2
+	ldrh	w3, [x4,180]
+	adrp	x4, .LANCHOR4
+	mov	x21, x4
+	mov	w26, 61664
+	mul	w3, w3, w0
+	add	x0, x4, :lo12:.LANCHOR4
+	uxth	w3, w3
+	sub	w20, w3, #1
+	ldr	x1, [x0,56]
+	mul	w24, w23, w3
+	ldr	x0, [x0,112]
+	uxth	w20, w20
+	str	x1, [x29,96]
+	sub	w19, w3, #16
+	str	x0, [x29,104]
+.L2971:
+	cmp	w20, w19
+	ble	.L2979
+	add	w0, w20, w24
+	mov	w1, 1
+	lsl	w0, w0, 10
+	mov	w2, w1
+	str	w0, [x29,92]
+	add	x0, x29, 88
+	bl	FlashReadPages
+	ldr	w0, [x29,88]
+	cmn	w0, #1
+	beq	.L2972
+	add	x0, x21, :lo12:.LANCHOR4
+	ldr	x0, [x0,112]
+	ldrh	w0, [x0]
+	cmp	w0, w26
+	bne	.L2972
+	mov	w0, w22
+	cbz	x22, .L2973
+	mov	x0, x22
+	mov	w1, w23
+	mov	w2, w25
+	bl	FlashReadFacBbtData.part.13
+	b	.L2973
+.L2972:
+	sub	w20, w20, #1
+	uxth	w20, w20
+	b	.L2971
+.L2979:
+	mov	w0, -1
+.L2973:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
+	.align	2
+	.global	FlashGetBadBlockList
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	mov	x21, x0
+	adrp	x0, .LANCHOR0+744
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR4
+	ldr	x0, [x0,#:lo12:.LANCHOR0+744]
+	ldrb	w2, [x0,13]
+	ldrh	w19, [x0,14]
+	add	x0, x20, :lo12:.LANCHOR4
+	mul	w19, w2, w19
+	ldr	x0, [x0,104]
+	uxth	w19, w19
+	add	w2, w19, 7
+	lsr	w2, w2, 3
+	bl	FlashReadFacBbtData
+	cmn	w0, #1
+	bne	.L2981
+.L2985:
+	mov	w1, 0
+	b	.L2982
+.L2981:
+	mov	w2, 0
+	lsr	w0, w19, 4
+	mov	w1, w2
+	sub	w19, w19, #1
+	mov	w5, 1
+.L2983:
+	cmp	w2, w19
+	bge	.L2982
+	add	x3, x20, :lo12:.LANCHOR4
+	ubfx	x4, x2, 5, 11
+	ldr	x6, [x3,104]
+	lsl	w3, w5, w2
+	ldr	w4, [x6,x4,lsl 2]
+	tst	w3, w4
+	beq	.L2984
+	add	w3, w1, 1
+	ubfiz	x1, x1, 1, 16
+	strh	w2, [x21,x1]
+	uxth	w1, w3
+.L2984:
+	cmp	w1, w0
+	bcs	.L2985
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L2983
+.L2982:
+	ubfiz	x1, x1, 1, 16
+	mov	w0, -1
+	ldp	x19, x20, [sp,16]
+	strh	w0, [x21,x1]
+	mov	w0, 0
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
+	.global	FtlMakeBbt
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR2
+	add	x0, x23, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w21, [x0,-96]
+	cbnz	w21, .L2991
+	adrp	x19, .LANCHOR0
+	adrp	x20, .LANCHOR4
+	add	x24, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR4
+	add	x24, x24, 2104
+	add	x20, x20, 160
+	mov	x25, x24
+	mov	x26, x20
+	bl	FtlBbtMemInit
+	bl	FtlLoadFactoryBbt
+.L2992:
+	add	x22, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x22,1966]
+	cmp	w21, w0
+	bcs	.L3010
+	add	x1, x23, :lo12:.LANCHOR2
+	ldrh	w28, [x25,12]
+	ldr	x0, [x1,-64]
+	ldr	x27, [x1,2120]
+	mov	w1, 65535
+	str	x0, [x20,8]
+	cmp	w28, w1
+	str	x27, [x20,16]
+	beq	.L2993
+	ldrh	w0, [x22,2014]
+	mov	w1, 1
+	mov	w2, w1
+	madd	w28, w21, w0, w28
+	lsl	w0, w28, 10
+	str	w0, [x20,4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldrh	w2, [x22,2014]
+	ldr	x0, [x24,32]
+	add	w2, w2, 7
+	ldr	x1, [x20,8]
+	lsr	w2, w2, 3
+	bl	ftl_memcpy
+	b	.L2994
+.L2993:
+	mov	w1, w21
+	bl	FlashGetBadBlockList
+	ldr	x0, [x20,8]
+	ldr	x1, [x24,32]
+	bl	FtlBbt2Bitmap
+	ldrh	w22, [x22,2014]
+.L2996:
+	sub	w22, w22, #1
+	uxth	w22, w22
+.L2995:
+	add	x28, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x28,2014]
+	madd	w0, w21, w0, w22
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L2996
+	add	x3, x23, :lo12:.LANCHOR2
+	mov	w1, 0
+	mov	w2, 16
+	strh	w22, [x25,12]
+	str	x3, [x29,104]
+	ldr	x0, [x3,2120]
+	bl	ftl_memset
+	str	wzr, [x27,4]
+	mov	w0, -3872
+	strh	w0, [x27]
+	ldr	x3, [x29,104]
+	ldrh	w0, [x25,12]
+	strh	w0, [x27,2]
+	ldrh	w0, [x28,2014]
+	ldrh	w1, [x25,12]
+	ldrh	w2, [x3,2248]
+	madd	w28, w21, w0, w1
+	ldr	x1, [x24,32]
+	lsl	w2, w2, 2
+	lsl	w0, w28, 10
+	str	w0, [x26,4]
+	ldr	x0, [x26,8]
+	bl	ftl_memcpy
+	mov	w1, 1
+	mov	x0, x26
+	mov	w2, w1
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	mov	x0, x26
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+	ldr	w0, [x26]
+	cmn	w0, #1
+	bne	.L2994
+	mov	w0, w28
+	bl	FtlBbmMapBadBlock
+	b	.L2995
+.L2994:
+	mov	w0, w28
+	add	w21, w21, 1
+	add	x24, x24, 8
+	add	x25, x25, 2
+	bl	FtlBbmMapBadBlock
+	b	.L2992
+.L3010:
+	mov	w20, 0
+.L2999:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x21,2032]
+	cmp	w0, w20
+	bls	.L3011
+	mov	w0, w20
+	add	w20, w20, 1
+	bl	FtlBbmMapBadBlock
+	uxth	w20, w20
+	b	.L2999
+.L3011:
+	ldrh	w20, [x21,2116]
+	mov	w24, 65535
+	sub	w20, w20, #1
+	uxth	w20, w20
+.L3001:
+	add	x22, x21, 2104
+	ldrh	w0, [x22,12]
+	sub	w0, w0, #48
+	cmp	w20, w0
+	ble	.L3005
+	mov	w0, w20
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L3002
+	mov	w0, w20
+	bl	FlashTestBlk
+	cbz	w0, .L3003
+	mov	w0, w20
+	bl	FtlBbmMapBadBlock
+	b	.L3002
+.L3003:
+	ldrh	w0, [x21,2104]
+	cmp	w0, w24
+	bne	.L3004
+	strh	w20, [x21,2104]
+	b	.L3002
+.L3004:
+	strh	w20, [x22,4]
+	b	.L3005
+.L3002:
+	sub	w20, w20, #1
+	uxth	w20, w20
+	b	.L3001
+.L3005:
+	add	x23, x23, :lo12:.LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w2, 2
+	ldr	x1, [x23,-88]
+	ldrh	w0, [x19,2104]
+	str	wzr, [x19,2112]
+	lsl	w0, w0, 10
+	str	w0, [x1,4]
+	strh	wzr, [x19,2106]
+	ldr	x0, [x23,-88]
+	ldrh	w1, [x19,2108]
+	lsl	w1, w1, 10
+	str	w1, [x0,60]
+	mov	w1, 1
+	bl	FlashEraseBlocks
+	ldrh	w0, [x19,2104]
+	bl	FtlBbmMapBadBlock
+	ldrh	w0, [x19,2108]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	strh	wzr, [x19,2106]
+	ldr	w0, [x19,2112]
+	ldrh	w1, [x19,2108]
+	add	w0, w0, 1
+	str	w0, [x19,2112]
+	ldrh	w0, [x19,2104]
+	strh	w0, [x19,2108]
+	strh	w1, [x19,2104]
+	bl	FtlBbmTblFlush
+.L2991:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	2
+	.global	FtlLowFormat
+	.type	FtlLowFormat, %function
+FtlLowFormat:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	add	x0, x21, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	ldr	w1, [x0,-96]
+	cbnz	w1, .L3014
+	adrp	x20, .LANCHOR0
+	str	w1, [x0,196]
+	str	w1, [x0,200]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,1948]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	w0, .L3015
+	bl	FtlMakeBbt
+.L3015:
+	mov	w0, 0
+.L3016:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x1,2024]
+	cmp	w0, w2, lsl 7
+	bge	.L3043
+	add	x3, x21, :lo12:.LANCHOR2
+	ubfiz	x2, x0, 2, 16
+	mvn	w1, w0
+	ldr	x4, [x3,2104]
+	orr	w1, w0, w1, lsl 16
+	add	w0, w0, 1
+	str	w1, [x4,x2]
+	mov	w1, 23752
+	movk	w1, 0xa0f, lsl 16
+	uxth	w0, w0
+	ldr	x3, [x3,2112]
+	str	w1, [x3,x2]
+	b	.L3016
+.L3043:
+	ldrh	w22, [x1,1952]
+	mov	w19, 0
+.L3018:
+	add	x23, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x23,1954]
+	cmp	w0, w22
+	bls	.L3044
+	mov	w0, w22
+	mov	w1, 1
+	add	w22, w22, 1
+	bl	FtlLowFormatEraseBlock
+	add	w0, w19, w0
+	uxth	w22, w22
+	uxth	w19, w0
+	b	.L3018
+.L3044:
+	ldrh	w0, [x23,1944]
+	sub	w1, w19, #3
+	cmp	w1, w0, lsl 1
+	bge	.L3020
+.L3024:
+	mov	w19, 0
+	mov	w22, w19
+	b	.L3021
+.L3020:
+	udiv	w19, w19, w0
+	ldr	w0, [x23,2052]
+	add	w0, w19, w0
+	bl	FtlSysBlkNumInit
+	ldrh	w0, [x23,1948]
+	bl	FtlFreeSysBlkQueueInit
+	ldrh	w19, [x23,1952]
+.L3022:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,1954]
+	cmp	w0, w19
+	bls	.L3024
+	mov	w0, w19
+	mov	w1, 1
+	add	w19, w19, 1
+	bl	FtlLowFormatEraseBlock
+	uxth	w19, w19
+	b	.L3022
+.L3021:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x0,1952]
+	cmp	w1, w22
+	bls	.L3045
+	mov	w0, w22
+	mov	w1, 0
+	add	w22, w22, 1
+	bl	FtlLowFormatEraseBlock
+	add	w0, w19, w0
+	uxth	w22, w22
+	uxth	w19, w0
+	b	.L3021
+.L3045:
+	ldrh	w1, [x0,1954]
+	add	x6, x21, :lo12:.LANCHOR2
+	ldrh	w2, [x0,1944]
+	str	w1, [x0,2100]
+	ldr	w1, [x0,1956]
+	udiv	w3, w1, w2
+	str	w3, [x0,2096]
+	ubfx	x5, x3, 5, 16
+	add	w4, w5, 36
+	strh	w4, [x6,272]
+	mov	w4, 24
+	mul	w4, w2, w4
+	cmp	w19, w4
+	ble	.L3026
+	sub	w1, w1, w19
+	udiv	w1, w1, w2
+	str	w1, [x0,2096]
+	lsr	w1, w1, 5
+	add	w1, w1, 24
+	strh	w1, [x6,272]
+.L3026:
+	add	x4, x21, :lo12:.LANCHOR2
+	ldr	w0, [x4,160]
+	cmp	w0, 1
+	bne	.L3027
+	ldrh	w1, [x4,272]
+	udiv	w0, w19, w2
+	add	w0, w1, w0
+	add	w0, w1, w0, asr 2
+	strh	w0, [x4,272]
+.L3027:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L3028
+	add	x1, x21, :lo12:.LANCHOR2
+	udiv	w0, w19, w2
+	ldrh	w4, [x1,272]
+	add	w0, w4, w0
+	add	w0, w4, w0, asr 2
+	strh	w0, [x1,272]
+.L3028:
+	add	x6, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x6,2010]
+	cbz	w1, .L3030
+	add	x0, x21, :lo12:.LANCHOR2
+	ldrh	w4, [x0,272]
+	add	w4, w4, w1, lsr 1
+	strh	w4, [x0,272]
+	mul	w4, w1, w2
+	cmp	w4, w19
+	ble	.L3030
+	add	w1, w1, 32
+	str	w3, [x6,2096]
+	add	w1, w5, w1
+	strh	w1, [x0,272]
+.L3030:
+	add	x19, x21, :lo12:.LANCHOR2
+	add	x22, x20, :lo12:.LANCHOR0
+	adrp	x24, .LANCHOR4
+	mov	w23, -1
+	ldr	w1, [x22,2096]
+	ldrh	w0, [x19,272]
+	sub	w0, w1, w0
+	add	x1, x24, :lo12:.LANCHOR4
+	mul	w0, w0, w2
+	str	w0, [x1,216]
+	ldrh	w1, [x22,2018]
+	mul	w0, w0, w1
+	ldrh	w1, [x22,2024]
+	str	w0, [x22,2096]
+	mul	w0, w0, w1
+	str	w0, [x22,2060]
+	bl	FtlBbmTblFlush
+	ldrh	w2, [x22,1954]
+	mov	w1, 0
+	ldr	x0, [x19,-40]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	strh	wzr, [x21,#:lo12:.LANCHOR2]
+	mov	w0, 1
+	ldrh	w2, [x22,1952]
+	strb	w0, [x19,8]
+	mov	w1, 255
+	ldr	x0, [x20,#:lo12:.LANCHOR0]
+	lsr	w2, w2, 3
+	mov	x21, x24
+	str	wzr, [x19,156]
+	strh	w23, [x19,296]
+	strh	wzr, [x19,298]
+	strb	wzr, [x19,302]
+	strb	wzr, [x19,304]
+	strh	wzr, [x19,2]
+	strb	wzr, [x19,6]
+	bl	ftl_memset
+.L3032:
+	mov	x0, x19
+	bl	make_superblock
+	ldrb	w0, [x19,7]
+	cbnz	w0, .L3033
+	ldrh	w1, [x19]
+	ldr	x0, [x19,-40]
+	strh	w23, [x0,x1,lsl 1]
+	ldrh	w0, [x19]
+	add	w0, w0, 1
+	strh	w0, [x19]
+	b	.L3032
+.L3033:
+	ldr	w0, [x19,196]
+	add	x20, x19, 48
+	str	w0, [x19,12]
+	mov	w22, -1
+	add	w0, w0, 1
+	ldrh	w1, [x19]
+	str	w0, [x19,196]
+	ldr	x0, [x19,-40]
+	ldrh	w2, [x19,4]
+	strh	w2, [x0,x1,lsl 1]
+	strh	wzr, [x20,2]
+	ldrh	w0, [x19]
+	strb	wzr, [x20,6]
+	add	w0, w0, 1
+	strh	w0, [x19,48]
+	mov	w0, 1
+	strb	w0, [x20,8]
+.L3034:
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20,7]
+	cbnz	w0, .L3035
+	ldrh	w1, [x20]
+	ldr	x0, [x19,-40]
+	strh	w22, [x0,x1,lsl 1]
+	ldrh	w0, [x20]
+	add	w0, w0, 1
+	strh	w0, [x20]
+	b	.L3034
+.L3035:
+	ldr	w0, [x19,196]
+	add	x21, x21, :lo12:.LANCHOR4
+	str	w0, [x20,12]
+	add	w0, w0, 1
+	ldrh	w1, [x20]
+	str	w0, [x19,196]
+	ldr	x0, [x19,-40]
+	ldrh	w2, [x20,4]
+	mov	w20, -1
+	strh	w2, [x0,x1,lsl 1]
+	strh	w20, [x19,96]
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x19,280]
+	ldr	w0, [x21,216]
+	strh	w0, [x19,286]
+	ldr	w0, [x19,196]
+	str	w0, [x19,288]
+	add	w0, w0, 1
+	strh	wzr, [x19,282]
+	strh	w20, [x19,284]
+	str	w0, [x19,196]
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cbnz	w0, .L3014
+	adrp	x0, .LANCHOR1+504
+	mov	w1, 1
+	str	w1, [x0,#:lo12:.LANCHOR1+504]
+.L3014:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlLowFormat, .-FtlLowFormat
+	.align	2
+	.global	FtlReInitForSDUpdata
+	.type	FtlReInitForSDUpdata, %function
+FtlReInitForSDUpdata:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,120]
+	cbz	w0, .L3047
+.L3049:
+	mov	w0, 0
+	b	.L3048
+.L3047:
+	adrp	x20, .LANCHOR4
+	add	x0, x20, :lo12:.LANCHOR4
+	ldr	x0, [x0,48]
+	bl	FlashInit
+	cbnz	w0, .L3049
+	bl	FlashLoadFactorBbt
+	cbz	w0, .L3050
+	bl	FlashMakeFactorBbt
+.L3050:
+	add	x20, x20, :lo12:.LANCHOR4
+	ldr	x0, [x20,104]
+	bl	FlashReadIdbDataRaw
+	cbz	w0, .L3051
+	mov	w1, 0
+	mov	w2, 16
+	add	x0, x29, 32
+	bl	FlashReadFacBbtData
+	mov	w0, 0
+	ldr	w2, [x29,32]
+	mov	w1, w0
+	mov	w4, 1
+.L3053:
+	lsl	w3, w4, w1
+	add	w1, w1, 1
+	tst	w3, w2
+	cset	w3, ne
+	cmp	w1, 16
+	add	w0, w0, w3
+	bne	.L3053
+	cmp	w0, 6
+	bhi	.L3054
+	add	x0, x19, :lo12:.LANCHOR0
+	b	.L3077
+.L3054:
+	mov	w1, 0
+	mov	w4, 1
+.L3057:
+	lsl	w3, w4, w1
+	add	w1, w1, 1
+	tst	w3, w2
+	cset	w3, ne
+	cmp	w1, 24
+	add	w0, w0, w3
+	bne	.L3057
+	cmp	w0, 17
+	add	x0, x19, :lo12:.LANCHOR0
+	bls	.L3077
+	mov	w1, 36
+.L3077:
+	strb	w1, [x0,9]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,9]
+	strh	w1, [x0,194]
+.L3051:
+	adrp	x0, .LC73
+	adrp	x1, .LC74
+	add	x1, x1, :lo12:.LC74
+	add	x0, x0, :lo12:.LC73
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	printk
+	add	x0, x19, 168
+	bl	FtlConstantsInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x19,1948]
+	mov	w19, 1
+	bl	FtlFreeSysBlkQueueInit
+.L3059:
+	bl	FtlLoadBbt
+	cbz	w0, .L3060
+.L3079:
+	bl	FtlLowFormat
+	cmp	w19, 3
+	bhi	.L3080
+	add	w19, w19, 1
+	b	.L3059
+.L3080:
+	mov	w0, -1
+	b	.L3048
+.L3060:
+	bl	FtlSysBlkInit
+	cbnz	w0, .L3079
+	adrp	x1, .LANCHOR1+504
+	mov	w2, 1
+	str	w2, [x1,#:lo12:.LANCHOR1+504]
+.L3048:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
+	.align	2
+	.global	flash_boot_enter_slc_mode
+	.type	flash_boot_enter_slc_mode, %function
+flash_boot_enter_slc_mode:
+	adrp	x1, .LANCHOR0+1868
+	uxtb	w0, w0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w2, [x1,#:lo12:.LANCHOR0+1868]
+	mov	w1, 12336
+	movk	w1, 0x5638, lsl 16
+	cmp	w2, w1
+	bne	.L3081
+	bl	flash_enter_slc_mode
+.L3081:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_boot_enter_slc_mode, .-flash_boot_enter_slc_mode
+	.align	2
+	.global	flash_boot_exit_slc_mode
+	.type	flash_boot_exit_slc_mode, %function
+flash_boot_exit_slc_mode:
+	adrp	x1, .LANCHOR0+1868
+	uxtb	w0, w0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w2, [x1,#:lo12:.LANCHOR0+1868]
+	mov	w1, 12336
+	movk	w1, 0x5638, lsl 16
+	cmp	w2, w1
+	bne	.L3083
+	bl	flash_exit_slc_mode
+.L3083:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_boot_exit_slc_mode, .-flash_boot_exit_slc_mode
+	.align	2
+	.global	IdBlockReadData
+	.type	IdBlockReadData, %function
+IdBlockReadData:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	mov	x20, x2
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	mov	w22, w0
+	ldr	x0, [x19,744]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w3, [x19,12]
+	mov	w26, w1
+	ldrb	w21, [x0,9]
+	adrp	x0, .LC141
+	add	x0, x0, :lo12:.LC141
+	mov	w1, w22
+	mov	w2, w26
+	mov	w23, 0
+	mul	w21, w3, w21
+	bl	printk
+	ldr	x0, [x19,744]
+	mov	w6, 4
+	uxth	w21, w21
+	adrp	x7, .LANCHOR4
+	ldrb	w28, [x0,9]
+	udiv	w0, w22, w21
+	msub	w21, w0, w21, w22
+	sub	w5, w22, w21
+	mul	w3, w21, w28
+	ubfx	x3, x3, 2, 2
+.L3086:
+	cmp	w23, w26
+	bcs	.L3092
+	ldrb	w1, [x19,120]
+	sub	w24, w6, w3
+	add	w4, w23, w21
+	lsr	w4, w4, 2
+	uxth	w24, w24
+	add	x0, x19, x4, uxth 1
+	ldrh	w0, [x0,196]
+	cbz	w1, .L3087
+	ldr	w2, [x19,1868]
+	mov	w1, 12336
+	movk	w1, 0x5638, lsl 16
+	uxth	w4, w4
+	cmp	w2, w1
+	csel	w0, w4, w0, eq
+.L3087:
+	add	w3, w3, w5
+	add	x27, x7, :lo12:.LANCHOR4
+	ldrb	w4, [x19,1936]
+	madd	w25, w0, w28, w3
+	ldr	x0, [x19,744]
+	ldr	x2, [x27,104]
+	str	x6, [x29,96]
+	ldrb	w1, [x0,9]
+	ldrb	w0, [x27,98]
+	str	x5, [x29,104]
+	str	x7, [x29,112]
+	str	x4, [x29,136]
+	str	x2, [x29,120]
+	str	x1, [x29,128]
+	bl	FlashBchSel
+	mov	w0, 0
+	bl	flash_boot_enter_slc_mode
+	ldr	x1, [x29,128]
+	mov	x3, 0
+	ldr	x2, [x29,120]
+	mov	w0, 0
+	udiv	w1, w25, w1
+	bl	FlashReadPage
+	mov	w0, 0
+	bl	flash_boot_exit_slc_mode
+	ldr	x4, [x29,136]
+	mov	w0, w4
+	bl	FlashBchSel
+	ubfiz	x0, x23, 9, 16
+	ldr	x1, [x27,104]
+	add	x0, x20, x0
+	mov	w2, 2048
+	add	w23, w24, w23
+	bl	ftl_memcpy
+	uxth	w23, w23
+	mov	w3, 0
+	ldr	x6, [x29,96]
+	ldr	x5, [x29,104]
+	ldr	x7, [x29,112]
+	b	.L3086
+.L3092:
+	adrp	x0, .LC142
+	mov	w1, w22
+	mov	w2, w26
+	mov	w3, 0
+	add	x0, x0, :lo12:.LC142
+	bl	printk
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	IdBlockReadData, .-IdBlockReadData
+	.align	2
+	.global	IDBlockWriteData
+	.type	IDBlockWriteData, %function
+IDBlockWriteData:
+	stp	x29, x30, [sp, -192]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x27, x28, [sp,80]
+	mov	w27, w1
+	adrp	x28, .LANCHOR4
+	ldr	x1, [x19,744]
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	w24, w0
+	ldr	w0, [x19,12]
+	ldrb	w21, [x1,9]
+	mov	x22, x2
+	mov	w1, w24
+	mov	w2, w27
+	mov	w23, 0
+	mul	w21, w0, w21
+	adrp	x0, .LC143
+	add	x0, x0, :lo12:.LC143
+	uxth	w21, w21
+	bl	printk
+	mov	w0, 0
+	bl	flash_boot_enter_slc_mode
+	ldrh	w1, [x19,188]
+	mov	w2, 0
+	mov	w0, 0
+	udiv	w1, w24, w1
+	bl	FlashEraseBlock
+	mov	w0, 0
+	bl	flash_boot_exit_slc_mode
+	udiv	w26, w24, w21
+	ldr	x0, [x19,744]
+	ldrb	w20, [x0,9]
+	msub	w26, w26, w21, w24
+	sub	w21, w24, w26
+.L3094:
+	cmp	w23, w27
+	bcs	.L3108
+	add	w4, w23, w26
+	lsr	w4, w4, 2
+	uxth	w0, w4
+	and	w4, w4, 65535
+	cbz	w0, .L3095
+	add	x1, x19, 196
+	add	w2, w4, 1
+	ldrh	w3, [x1,w2,sxtw 1]
+	ldrb	w1, [x19,120]
+	cbz	w1, .L3096
+	ldr	w2, [x19,1868]
+	mov	w1, 12336
+	movk	w1, 0x5638, lsl 16
+	cmp	w2, w1
+	bne	.L3096
+	add	w3, w0, 1
+	uxth	w3, w3
+.L3096:
+	sub	w3, w3, #1
+	str	wzr, [x29,132]
+	lsl	w3, w3, 2
+	str	w3, [x29,128]
+.L3095:
+	add	x1, x19, 196
+	ldrh	w25, [x1,w4,sxtw 1]
+	ldrb	w1, [x19,120]
+	cbz	w1, .L3097
+	ldr	w2, [x19,1868]
+	mov	w1, 12336
+	movk	w1, 0x5638, lsl 16
+	cmp	w2, w1
+	csel	w25, w25, w0, ne
+.L3097:
+	add	x0, x28, :lo12:.LANCHOR4
+	ldrb	w4, [x19,1936]
+	madd	w3, w25, w20, w21
+	ubfiz	x2, x23, 9, 16
+	str	x4, [x29,120]
+	ldrb	w0, [x0,98]
+	add	x2, x22, x2
+	str	x3, [x29,104]
+	add	w23, w23, 4
+	str	x2, [x29,112]
+	bl	FlashBchSel
+	uxth	w23, w23
+	mov	w0, 0
+	bl	flash_boot_enter_slc_mode
+	ldr	x0, [x19,744]
+	ldr	x3, [x29,104]
+	ldr	x2, [x29,112]
+	ldrb	w1, [x0,9]
+	mov	w0, 0
+	udiv	w1, w3, w1
+	add	x3, x29, 128
+	bl	FlashProgPage
+	mov	w0, 0
+	bl	flash_boot_exit_slc_mode
+	ldr	x4, [x29,120]
+	mov	w0, w4
+	bl	FlashBchSel
+	udiv	w1, w21, w20
+	add	w2, w25, 1
+	mov	w0, 0
+	bl	FlashPageProgMsbFFData
+	b	.L3094
+.L3108:
+	adrp	x0, .LC144
+	mov	w1, w24
+	mov	w2, w27
+	mov	w3, 0
+	add	x0, x0, :lo12:.LC144
+	bl	printk
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 192
+	ret
+	.size	IDBlockWriteData, .-IDBlockWriteData
+	.align	2
+	.global	write_idblock
+	.type	write_idblock, %function
+write_idblock:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x24, .LANCHOR0
+	mov	x23, x2
+	stp	x25, x26, [sp,64]
+	mov	w25, w0
+	add	x0, x24, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	mov	x21, x1
+	ldr	w26, [x0,12]
+	ldr	x1, [x0,744]
+	mov	w0, 59392
+	movk	w0, 0x3, lsl 16
+	ldrb	w22, [x1,9]
+	bl	ftl_malloc
+	str	x24, [x29,120]
+	mov	x20, x0
+	mov	w0, -1
+	cbz	x20, .L3119
+	add	w19, w25, 511
+	lsr	w19, w19, 9
+	cmp	w19, 255
+	bhi	.L3111
+	ubfiz	x0, x19, 9, 23
+	mov	w2, 256
+	add	x0, x21, x0
+	mov	x1, x21
+	sub	w2, w2, w19
+	bl	memcpy
+.L3111:
+	add	w19, w19, 128
+	mov	w0, 256
+	cmp	w19, 256
+	mov	x1, x23
+	csel	w19, w19, w0, ls
+	adrp	x0, .LC145
+	add	x0, x0, :lo12:.LC145
+	mov	w2, 4
+	mov	w3, 5
+	bl	rknand_print_hex
+	ldr	x0, [x29,120]
+	ldr	w1, [x21,512]
+	add	x27, x0, :lo12:.LANCHOR0
+	adrp	x0, .LC146
+	add	x0, x0, :lo12:.LC146
+	ldrb	w2, [x27,9]
+	bl	printk
+	ldrb	w0, [x27,9]
+	ldr	w1, [x21,512]
+	cmp	w1, w0
+	bls	.L3112
+	str	w0, [x21,512]
+.L3112:
+	adrp	x0, .LC147
+	mov	w2, w25
+	mul	w22, w22, w26
+	add	x0, x0, :lo12:.LC147
+	mov	w1, w19
+	mov	x24, 0
+	adrp	x26, .LC148
+	bl	printk
+	adrp	x27, .LC149
+	adrp	x28, .LC150
+	lsl	w0, w19, 7
+	uxth	w22, w22
+	str	w0, [x29,116]
+	mov	w25, w24
+	add	x26, x26, :lo12:.LC148
+	add	x27, x27, :lo12:.LC149
+	add	x28, x28, :lo12:.LC150
+.L3117:
+	ldr	x1, [x29,120]
+	mov	w8, w24
+	ldr	w0, [x23,x24,lsl 2]
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrh	w1, [x1,194]
+	cmp	w0, w1
+	bcs	.L3113
+	adrp	x1, .LANCHOR4+92
+	ldr	w1, [x1,#:lo12:.LANCHOR4+92]
+	cmp	w0, w1
+	bcc	.L3113
+	mov	w1, 0
+	mov	x2, 512
+	mov	x0, x20
+	str	x8, [x29,104]
+	bl	memset
+	ldr	w0, [x23,x24,lsl 2]
+	mov	w1, w19
+	mov	x2, x21
+	mul	w0, w22, w0
+	bl	IDBlockWriteData
+	ldr	w0, [x23,x24,lsl 2]
+	mov	w1, w19
+	mov	x2, x20
+	mul	w0, w22, w0
+	bl	IdBlockReadData
+	ldr	x8, [x29,104]
+	mov	x0, 0
+.L3114:
+	ldr	w1, [x29,116]
+	mov	w3, w0
+	cmp	w0, w1
+	bcs	.L3124
+	ldr	w4, [x20,x0,lsl 2]
+	mov	x7, x0
+	add	x0, x0, 1
+	add	x1, x21, x0, lsl 2
+	ldr	w5, [x1,-4]
+	cmp	w4, w5
+	beq	.L3114
+	ldr	w2, [x23,x24,lsl 2]
+	mov	w1, w8
+	mov	x0, x26
+	str	x7, [x29,104]
+	bl	printk
+	ldr	x7, [x29,104]
+	mov	x0, x27
+	mov	w2, 4
+	mov	w3, 256
+	and	x4, x7, -256
+	lsl	x4, x4, 2
+	str	x4, [x29,104]
+	add	x1, x21, x4
+	bl	rknand_print_hex
+	ldr	x4, [x29,104]
+	mov	w3, 256
+	mov	x0, x28
+	mov	w2, 4
+	add	x1, x20, x4
+	bl	rknand_print_hex
+	mov	x0, x20
+	mov	w1, 0
+	mov	x2, 512
+	bl	memset
+	ldr	w0, [x23,x24,lsl 2]
+	mov	w1, 4
+	mov	x2, x20
+	mul	w0, w22, w0
+	bl	IDBlockWriteData
+	adrp	x0, .LC151
+	add	x0, x0, :lo12:.LC151
+	bl	printk
+	b	.L3113
+.L3124:
+	add	w25, w25, 1
+.L3113:
+	add	x24, x24, 1
+	cmp	x24, 5
+	bne	.L3117
+	mov	x0, x20
+	bl	ftl_free
+	cmp	w25, wzr
+	csetm	w0, eq
+.L3119:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	write_idblock, .-write_idblock
+	.align	2
+	.global	CRC_32
+	.type	CRC_32, %function
+CRC_32:
+	mov	x2, 0
+	adrp	x3, .LANCHOR1
+	mov	x5, x0
+	add	x3, x3, :lo12:.LANCHOR1
+	mov	w0, w2
+.L3126:
+	cmp	w1, w2
+	bls	.L3128
+	ldrb	w4, [x5,x2]
+	add	x6, x3, 3016
+	add	x2, x2, 1
+	eor	w4, w4, w0, lsr 24
+	ldr	w4, [x6,w4,uxtw 2]
+	eor	w0, w4, w0, lsl 8
+	b	.L3126
+.L3128:
+	ret
+	.size	CRC_32, .-CRC_32
+	.align	2
+	.global	rknand_sys_storage_ioctl
+	.type	rknand_sys_storage_ioctl, %function
+rknand_sys_storage_ioctl:
+	sub	sp, sp, #528
+	mov	w0, 29187
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w19, w1
+	mov	x20, x2
+	beq	.L3131
+	mov	w0, 29187
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3132
+	mov	w0, 25726
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3133
+	mov	w0, 25726
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3134
+	mov	w0, 25601
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3135
+	mov	w0, 25601
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3136
+	mov	w0, 25364
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bne	.L3193
+	bl	rknand_dev_flush
+	b	.L3225
+.L3136:
+	mov	w0, 25602
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3138
+	mov	w0, 25603
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3139
+	b	.L3193
+.L3134:
+	mov	w0, 27688
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3140
+	mov	w0, 27688
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3141
+	mov	w0, 25727
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3142
+	b	.L3193
+.L3141:
+	mov	w0, 27698
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3140
+	mov	w0, 27708
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3140
+	b	.L3193
+.L3132:
+	mov	w0, 29267
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3143
+	mov	w0, 29267
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3144
+	mov	w0, 29189
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3145
+	mov	w0, 29189
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bcc	.L3146
+	mov	w0, 29210
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3147
+	mov	w0, 29266
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3148
+	b	.L3193
+.L3144:
+	mov	w0, 30225
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3149
+	mov	w0, 30225
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3150
+	mov	w0, 29268
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3151
+	mov	w0, 30224
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3152
+	b	.L3193
+.L3150:
+	mov	w0, 30226
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3152
+	mov	w0, 30227
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3149
+	b	.L3193
+.L3146:
+	adrp	x0, .LC152
+	add	x0, x0, :lo12:.LC152
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x19, x0
+	cbnz	x0, .L3153
+.L3158:
+	mov	x0, -12
+	b	.L3130
+.L3153:
+	mov	x1, x20
+	mov	x2, 512
+	bl	rk_copy_from_user
+	cbnz	x0, .L3232
+	adrp	x0, .LC154
+	ldr	w1, [x19]
+	ldr	w2, [x19,4]
+	add	x0, x0, :lo12:.LC154
+	bl	printk
+	ldr	w0, [x19,4]
+	str	w0, [x29,52]
+	cmp	w0, 8
+	bhi	.L3228
+	bl	rknand_device_lock
+	ldr	w1, [x29,52]
+	mov	x2, x19
+	ldr	w0, [x19]
+	bl	IdBlockReadData
+	bl	rknand_device_unlock
+	ldr	w2, [x29,52]
+	mov	x0, x20
+	mov	x1, x19
+	ubfiz	x2, x2, 9, 23
+	bl	rk_copy_to_user
+	cbz	x0, .L3234
+	adrp	x0, .LC155
+	add	x0, x0, :lo12:.LC155
+.L3227:
+	bl	printk
+.L3228:
+	mov	x0, x19
+.L3229:
+	bl	ftl_free
+.L3230:
+	mov	x0, -14
+	b	.L3130
+.L3145:
+	adrp	x0, .LC156
+	add	x0, x0, :lo12:.LC156
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x19, x0
+	cbz	x0, .L3158
+	mov	x1, x20
+	mov	x2, 4096
+	bl	rk_copy_from_user
+	cbnz	x0, .L3232
+	ldr	w1, [x19]
+	adrp	x0, .LC157
+	ldr	w2, [x19,4]
+	add	x0, x0, :lo12:.LC157
+	bl	printk
+	adrp	x0, .LANCHOR4
+	add	x21, x0, :lo12:.LANCHOR4
+	mov	x20, x0
+	ldr	x1, [x21,480]
+	cbnz	x1, .L3160
+	mov	w0, 260096
+	bl	ftl_malloc
+	str	x0, [x21,480]
+	cbz	x0, .L3228
+.L3160:
+	ldr	w2, [x19,4]
+	cmp	w2, 4088
+	bhi	.L3228
+	ldr	w0, [x19]
+	mov	w1, 55296
+	movk	w1, 0x3, lsl 16
+	cmp	w0, w1
+	bhi	.L3228
+	add	x20, x20, :lo12:.LANCHOR4
+	uxtw	x2, w2
+	ldr	x1, [x20,480]
+	add	x0, x1, x0, uxtw
+	add	x1, x19, 8
+	bl	memcpy
+.L3234:
+	mov	x0, x19
+	bl	ftl_free
+	b	.L3225
+.L3148:
+	adrp	x0, .LC158
+	add	x0, x0, :lo12:.LC158
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x19, x0
+	cbz	x0, .L3158
+	mov	x1, x20
+	mov	x2, 28
+	bl	rk_copy_from_user
+	cbz	x0, .L3162
+.L3232:
+	adrp	x0, .LC153
+	add	x0, x0, :lo12:.LC153
+	b	.L3227
+.L3162:
+	ldr	w1, [x19]
+	adrp	x0, .LC159
+	ldr	w2, [x19,4]
+	add	x0, x0, :lo12:.LC159
+	bl	printk
+	ldr	w1, [x19]
+	mov	w0, 59392
+	movk	w0, 0x3, lsl 16
+	cmp	w1, w0
+	bhi	.L3228
+	adrp	x20, .LANCHOR4
+	add	x20, x20, :lo12:.LANCHOR4
+	ldr	x0, [x20,480]
+	cbz	x0, .L3228
+	bl	CRC_32
+	ldr	w1, [x19,4]
+	cmp	w1, w0
+	beq	.L3165
+	mov	x0, x19
+	bl	ftl_free
+	mov	x0, -2
+	b	.L3130
+.L3165:
+	bl	rknand_device_lock
+	ldr	x1, [x20,480]
+	add	x2, x19, 8
+	ldr	w0, [x19]
+	bl	write_idblock
+	bl	rknand_device_unlock
+	ldr	x0, [x20,480]
+	bl	ftl_free
+	str	xzr, [x20,480]
+	b	.L3234
+.L3147:
+	adrp	x0, .LC160
+	add	x0, x0, :lo12:.LC160
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x21, x0
+	cbz	x0, .L3158
+	bl	ReadFlashInfo
+	mov	x0, x20
+	mov	x1, x21
+	mov	x2, 11
+	b	.L3236
+.L3131:
+	adrp	x0, .LC161
+	add	x0, x0, :lo12:.LC161
+	bl	printk
+	bl	rknand_device_lock
+	bl	FtlReInitForSDUpdata
+	mov	w19, w0
+	bl	rknand_device_unlock
+	cbnz	w19, .L3230
+	bl	nand_blk_add_whole_disk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x21, x0
+	cbz	x0, .L3158
+	bl	rknand_device_lock
+	mov	w1, w19
+	mov	w2, 64
+	mov	x0, x21
+	bl	FlashReadFacBbtData
+	bl	rknand_device_unlock
+	adrp	x0, .LC162
+	mov	x1, x21
+	add	x0, x0, :lo12:.LC162
+	mov	w2, 4
+	mov	w3, 8
+	bl	rknand_print_hex
+	mov	x0, x20
+	mov	x1, x21
+	mov	x2, 64
+	b	.L3236
+.L3143:
+	adrp	x0, .LC163
+	add	x0, x0, :lo12:.LC163
+	bl	printk
+	adrp	x0, .LANCHOR4+488
+	add	x1, x29, 52
+	mov	x2, 4
+	ldr	x0, [x0,#:lo12:.LANCHOR4+488]
+	ldr	w0, [x0,20]
+	str	w0, [x29,52]
+	mov	x0, x20
+	b	.L3221
+.L3151:
+	adrp	x0, .LC164
+	add	x0, x0, :lo12:.LC164
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x21, x0
+	cbz	x0, .L3158
+	bl	rknand_device_lock
+	mov	w1, 2
+	mov	x2, x21
+	mov	w0, 520
+	bl	FtlVendorPartRead
+	bl	rknand_device_unlock
+	mov	x0, x20
+	mov	x1, x21
+	mov	x2, 1024
+.L3236:
+	bl	rk_copy_to_user
+	mov	x19, x0
+	mov	x0, x21
+	cbnz	x19, .L3229
+	bl	ftl_free
+	b	.L3157
+.L3135:
+	adrp	x0, .LC165
+	add	x0, x0, :lo12:.LC165
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	mov	x19, x0
+	cbz	x0, .L3171
+.L3176:
+	adrp	x0, .LC153
+	add	x0, x0, :lo12:.LC153
+	bl	printk
+	b	.L3230
+.L3171:
+	ldr	w1, [x29,56]
+	mov	w0, 21060
+	movk	w0, 0x4b4d, lsl 16
+	cmp	w1, w0
+	beq	.L3172
+.L3173:
+	mov	x19, -1
+	b	.L3157
+.L3172:
+	ldr	w0, [x29,60]
+	cmp	w0, 512
+	bhi	.L3173
+	adrp	x21, .LANCHOR4
+	add	x0, x29, 56
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	x2, 512
+	ldr	x1, [x21,488]
+	bl	memcpy
+	ldr	w1, [x21,496]
+	mov	w0, 5161
+	movk	w0, 0xc059, lsl 16
+	cmp	w1, w0
+	beq	.L3174
+	add	x0, x29, 120
+	mov	w1, w19
+	mov	x2, 128
+	str	w19, [x29,64]
+	str	w19, [x29,68]
+	bl	memset
+.L3174:
+	add	x0, x29, 312
+	mov	w1, 0
+	mov	x2, 256
+	str	wzr, [x29,72]
+	bl	memset
+.L3222:
+	mov	x0, x20
+	add	x1, x29, 56
+	mov	x2, 520
+.L3221:
+	bl	rk_copy_to_user
+	cbnz	x0, .L3230
+	b	.L3225
+.L3138:
+	adrp	x0, .LC166
+	add	x0, x0, :lo12:.LC166
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3176
+	ldr	w1, [x29,56]
+	mov	w0, 21060
+	movk	w0, 0x4b4d, lsl 16
+	cmp	w1, w0
+	bne	.L3173
+	ldr	w0, [x29,60]
+	cmp	w0, 512
+	bhi	.L3173
+	adrp	x1, .LANCHOR4
+	mov	w2, 5161
+	add	x1, x1, :lo12:.LANCHOR4
+	movk	w2, 0xc059, lsl 16
+	mov	x0, -2
+	ldr	w3, [x1,496]
+	cmp	w3, w2
+	bne	.L3130
+	ldr	w2, [x29,68]
+	mov	x0, -3
+	sub	w3, w2, #1
+	cmp	w3, 127
+	bhi	.L3130
+	ldr	x19, [x1,488]
+	add	x1, x29, 120
+	add	x0, x19, 64
+	str	w2, [x19,12]
+	ldr	w2, [x29,68]
+	bl	memcpy
+	mov	w0, 1
+	mov	x1, x19
+	b	.L3226
+.L3142:
+	adrp	x0, .LC167
+	add	x0, x0, :lo12:.LC167
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3176
+	ldr	w1, [x29,56]
+	mov	w0, 17476
+	movk	w0, 0x4253, lsl 16
+	cmp	w1, w0
+	bne	.L3173
+	ldr	w0, [x29,60]
+	cmp	w0, 512
+	bhi	.L3173
+	adrp	x19, .LANCHOR4
+	add	x0, x19, :lo12:.LANCHOR4
+	ldr	w1, [x0,500]
+	cbnz	w1, .L3177
+.L3180:
+	mov	x0, 0
+	b	.L3130
+.L3177:
+	ldr	x1, [x0,504]
+	mov	w2, 22867
+	movk	w2, 0x4453, lsl 16
+	ldr	w3, [x1]
+	cmp	w3, w2
+	beq	.L3178
+	mov	w2, 22867
+	movk	w2, 0x4453, lsl 16
+	str	w2, [x1]
+	mov	w2, 504
+	ldr	x1, [x0,504]
+	str	w2, [x1,4]
+	ldr	x0, [x0,504]
+	str	wzr, [x0,8]
+	str	wzr, [x0,12]
+.L3178:
+	add	x20, x19, :lo12:.LANCHOR4
+	mov	w0, 0
+	ldr	x1, [x20,504]
+	str	wzr, [x1,16]
+	bl	StorageSysDataStore
+	ldr	x0, [x20,488]
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	ldr	w2, [x0]
+	cmp	w2, w1
+	beq	.L3179
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	str	w1, [x0]
+	mov	w1, 504
+	ldr	x0, [x20,488]
+	str	w1, [x0,4]
+	ldr	x0, [x20,488]
+	str	wzr, [x0,8]
+.L3179:
+	add	x19, x19, :lo12:.LANCHOR4
+	mov	w1, 0
+	mov	x2, 128
+	ldr	x20, [x19,488]
+	add	x0, x20, 64
+	str	wzr, [x20,12]
+	bl	memset
+	mov	w0, 1
+	mov	x1, x20
+	bl	StorageSysDataStore
+	str	wzr, [x19,500]
+	str	wzr, [x19,496]
+	b	.L3225
+.L3133:
+	adrp	x0, .LC168
+	add	x0, x0, :lo12:.LC168
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3176
+	ldr	w2, [x29,56]
+	mov	w1, 20037
+	movk	w1, 0x4253, lsl 16
+	cmp	w2, w1
+	bne	.L3173
+	ldr	w1, [x29,60]
+	cmp	w1, 512
+	bhi	.L3173
+	adrp	x19, .LANCHOR4
+	add	x1, x19, :lo12:.LANCHOR4
+	ldr	w2, [x1,500]
+	cmp	w2, 1
+	beq	.L3180
+	ldr	x2, [x1,504]
+	mov	w3, 22867
+	movk	w3, 0x4453, lsl 16
+	ldr	w4, [x2]
+	cmp	w4, w3
+	beq	.L3181
+	mov	w3, 22867
+	movk	w3, 0x4453, lsl 16
+	str	w3, [x2]
+	mov	w3, 504
+	ldr	x2, [x1,504]
+	str	w3, [x2,4]
+	ldr	x1, [x1,504]
+	str	w0, [x1,8]
+	str	w0, [x1,12]
+.L3181:
+	add	x20, x19, :lo12:.LANCHOR4
+	mov	w0, 1
+	ldr	x1, [x20,504]
+	str	w0, [x1,16]
+	mov	w0, 0
+	bl	StorageSysDataStore
+	ldr	x0, [x20,488]
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	ldr	w2, [x0]
+	cmp	w2, w1
+	beq	.L3182
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	str	w1, [x0]
+	mov	w1, 504
+	ldr	x0, [x20,488]
+	str	w1, [x0,4]
+	ldr	x0, [x20,488]
+	str	wzr, [x0,8]
+.L3182:
+	add	x19, x19, :lo12:.LANCHOR4
+	mov	w1, 0
+	mov	x2, 128
+	ldr	x20, [x19,488]
+	add	x0, x20, 64
+	str	wzr, [x20,12]
+	bl	memset
+	mov	w0, 1
+	mov	x1, x20
+	bl	StorageSysDataStore
+	mov	w0, 1
+	str	w0, [x19,500]
+	b	.L3225
+.L3139:
+	adrp	x0, .LC169
+	add	x0, x0, :lo12:.LC169
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3176
+	ldr	w1, [x29,56]
+	mov	w0, 20051
+	movk	w0, 0x4144, lsl 16
+	cmp	w1, w0
+	bne	.L3173
+	ldr	w2, [x29,60]
+	cmp	w2, 512
+	bhi	.L3173
+	adrp	x1, .LANCHOR4
+	add	x0, x29, 64
+	add	x1, x1, :lo12:.LANCHOR4
+	uxtw	x2, w2
+	add	x1, x1, 512
+	b	.L3223
+.L3140:
+	mov	w0, 27698
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	bne	.L3183
+	adrp	x0, .LC170
+	add	x0, x0, :lo12:.LC170
+	b	.L3224
+.L3183:
+	mov	w0, 27708
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	bne	.L3185
+	adrp	x0, .LC171
+	add	x0, x0, :lo12:.LC171
+	b	.L3224
+.L3185:
+	adrp	x0, .LC172
+	add	x0, x0, :lo12:.LC172
+.L3224:
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3176
+	ldr	w1, [x29,56]
+	mov	w0, 17227
+	movk	w0, 0x4c4f, lsl 16
+	cmp	w1, w0
+	bne	.L3230
+	mov	w0, 27708
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	adrp	x0, .LANCHOR4
+	bne	.L3186
+	add	x0, x0, :lo12:.LANCHOR4
+	add	x1, x29, 56
+	mov	x2, 16
+	ldr	x0, [x0,488]
+	ldr	w0, [x0,20]
+	str	w0, [x29,60]
+	strb	w0, [x29,64]
+	mov	x0, x20
+	bl	rk_copy_to_user
+	cbz	x0, .L3130
+	b	.L3230
+.L3186:
+	add	x20, x0, :lo12:.LANCHOR4
+	ldr	w1, [x20,1024]
+	cmp	w1, 10
+	bhi	.L3230
+	ldr	x1, [x20,488]
+	ldr	w2, [x29,60]
+	ldr	w3, [x1,24]
+	cmp	w3, w2
+	beq	.L3187
+	cbz	w3, .L3187
+	adrp	x0, .LC173
+	mov	w1, w2
+	add	x0, x0, :lo12:.LC173
+	bl	printk
+	ldr	w0, [x20,1024]
+	add	w0, w0, 1
+	str	w0, [x20,1024]
+	b	.L3230
+.L3187:
+	add	x0, x0, :lo12:.LANCHOR4
+	str	wzr, [x0,1024]
+	mov	w0, 27698
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	bne	.L3188
+	str	wzr, [x1,20]
+	str	wzr, [x1,24]
+	b	.L3189
+.L3188:
+	mov	w0, 1
+	str	w2, [x1,24]
+	str	w0, [x1,20]
+.L3189:
+	mov	w0, 1
+	mov	x19, -2
+	bl	StorageSysDataStore
+	cmn	w0, #1
+	bne	.L3225
+	b	.L3157
+.L3152:
+	adrp	x0, .LC174
+	add	x0, x0, :lo12:.LC174
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3176
+	ldr	w1, [x29,56]
+	mov	w0, 17750
+	movk	w0, 0x444e, lsl 16
+	cmp	w1, w0
+	bne	.L3173
+	ldr	w2, [x29,60]
+	cmp	w2, 504
+	bhi	.L3173
+	mov	w0, 30224
+	adrp	x1, .LANCHOR4
+	movk	w0, 0x4004, lsl 16
+	uxtw	x2, w2
+	cmp	w19, w0
+	add	x1, x1, :lo12:.LANCHOR4
+	add	x0, x29, 64
+	bne	.L3190
+	ldr	x1, [x1,1032]
+	b	.L3233
+.L3190:
+	ldr	x1, [x1,1040]
+.L3233:
+	add	x1, x1, 8
+.L3223:
+	bl	memcpy
+	b	.L3222
+.L3149:
+	adrp	x0, .LC175
+	add	x0, x0, :lo12:.LC175
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3176
+	ldr	w1, [x29,56]
+	mov	w0, 17750
+	movk	w0, 0x444e, lsl 16
+	cmp	w1, w0
+	bne	.L3173
+	ldr	w2, [x29,60]
+	cmp	w2, 504
+	bhi	.L3173
+	mov	w0, 30225
+	add	w2, w2, 8
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	adrp	x19, .LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR4
+	bne	.L3192
+	ldr	x0, [x19,1032]
+	add	x1, x29, 56
+	bl	memcpy
+	mov	w0, 2
+	ldr	x1, [x19,1032]
+	b	.L3226
+.L3192:
+	ldr	x0, [x19,1040]
+	add	x1, x29, 56
+	bl	memcpy
+	ldr	x1, [x19,1040]
+	mov	w0, 3
+.L3226:
+	bl	StorageSysDataStore
+	uxtw	x19, w0
+	b	.L3157
+.L3225:
+	mov	x19, 0
+.L3157:
+	adrp	x0, .LC176
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC176
+	bl	printk
+	mov	x0, x19
+	b	.L3130
+.L3193:
+	mov	x0, -22
+.L3130:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	add	sp, sp, 528
+	ret
+	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
+	.align	2
+	.global	rk_ftl_storage_sys_init
+	.type	rk_ftl_storage_sys_init, %function
+rk_ftl_storage_sys_init:
+	stp	x29, x30, [sp, -48]!
+	mov	w2, 512
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR4
+	add	x19, x20, :lo12:.LANCHOR4
+	stp	x21, x22, [sp,32]
+	ldr	x1, [x19,456]
+	str	x1, [x19,504]
+	add	x0, x1, 512
+	str	x0, [x19,488]
+	add	x0, x1, 1024
+	add	x1, x1, 1536
+	str	x0, [x19,1032]
+	add	x0, x19, 512
+	str	xzr, [x19,480]
+	str	x1, [x19,1040]
+	bl	ftl_memcpy
+	ldr	x21, [x19,504]
+	str	wzr, [x19,496]
+	str	wzr, [x19,1024]
+	ldr	w0, [x21,16]
+	ldr	w22, [x21,508]
+	str	w0, [x19,500]
+	cbz	w22, .L3239
+	mov	x0, x21
+	mov	w1, 508
+	bl	JSHash
+	cmp	w22, w0
+	beq	.L3239
+	adrp	x0, .LC177
+	str	wzr, [x21,16]
+	add	x0, x0, :lo12:.LC177
+	str	wzr, [x19,500]
+	bl	printk
+.L3239:
+	add	x0, x20, :lo12:.LANCHOR4
+	ldr	w1, [x0,500]
+	cbz	w1, .L3240
+	mov	w1, 5161
+	movk	w1, 0xc059, lsl 16
+	str	w1, [x0,496]
+.L3240:
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w0, 2
+	ldr	x1, [x20,1032]
+	bl	StorageSysDataLoad
+	ldr	x1, [x20,1040]
+	mov	w0, 3
+	bl	StorageSysDataLoad
+	bl	rknand_sys_storage_init
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
+	.align	2
+	.global	StorageSysDataDeInit
+	.type	StorageSysDataDeInit, %function
+StorageSysDataDeInit:
+	mov	w0, 0
+	ret
+	.size	StorageSysDataDeInit, .-StorageSysDataDeInit
+	.align	2
+	.global	rk_ftl_vendor_storage_init
+	.type	rk_ftl_vendor_storage_init, %function
+rk_ftl_vendor_storage_init:
+	stp	x29, x30, [sp, -80]!
+	mov	w1, 193
+	mov	x0, 65536
+	add	x29, sp, 0
+	movk	w1, 0x240, lsl 16
+	mov	w2, 4
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR4
+	bl	kmalloc_order_trace
+	add	x1, x21, :lo12:.LANCHOR4
+	mov	w19, -12
+	str	x0, [x1,1048]
+	cbz	x0, .L3249
+	mov	w22, 0
+	adrp	x24, .LC178
+	mov	w19, w22
+	mov	w23, w22
+	add	x24, x24, :lo12:.LC178
+.L3253:
+	add	x20, x21, :lo12:.LANCHOR4
+	ldr	x2, [x20,1048]
+	str	x2, [x29,72]
+	bl	rknand_device_lock
+	ldr	x2, [x29,72]
+	add	w0, w23, 2
+	mov	w1, 128
+	lsl	w0, w0, 7
+	bl	FtlVendorPartRead
+	str	x0, [x29,72]
+	bl	rknand_device_unlock
+	ldr	x0, [x29,72]
+	cbnz	w0, .L3250
+	ldr	x3, [x20,1048]
+	mov	x0, x24
+	add	x2, x3, 61440
+	ldr	w1, [x3]
+	ldr	w3, [x3,4]
+	ldr	w2, [x2,4092]
+	bl	printk
+	ldr	x20, [x20,1048]
+	mov	w0, 22084
+	movk	w0, 0x524b, lsl 16
+	ldr	w1, [x20]
+	cmp	w1, w0
+	bne	.L3251
+	ldr	w0, [x20,4]
+	cmp	w19, w0
+	bcs	.L3251
+	add	x1, x20, 61440
+	ldr	w1, [x1,4092]
+	cmp	w1, w0
+	csel	w22, w22, w23, ne
+	csel	w19, w19, w0, ne
+.L3251:
+	cbnz	w23, .L3261
+	mov	w23, 1
+	b	.L3253
+.L3261:
+	cbz	w19, .L3254
+	bl	rknand_device_lock
+	lsl	w0, w22, 7
+	mov	w1, 128
+	add	w0, w0, 256
+	mov	x2, x20
+	bl	FtlVendorPartRead
+	mov	w19, w0
+	bl	rknand_device_unlock
+	cbz	w19, .L3249
+	b	.L3250
+.L3254:
+	mov	x0, x20
+	mov	w1, w19
+	mov	x2, 65536
+	bl	memset
+	str	w23, [x20,4]
+	mov	w0, 22084
+	movk	w0, 0x524b, lsl 16
+	str	w0, [x20]
+	add	x0, x20, 61440
+	str	w23, [x0,4092]
+	mov	w0, -1032
+	strh	w19, [x20,12]
+	strh	w0, [x20,14]
+	b	.L3249
+.L3250:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w19, -1
+	ldr	x0, [x21,1048]
+	bl	kfree
+	str	xzr, [x21,1048]
+.L3249:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
+	.align	2
+	.global	rk_ftl_vendor_read
+	.type	rk_ftl_vendor_read, %function
+rk_ftl_vendor_read:
+	adrp	x3, .LANCHOR4+1048
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	ldr	x5, [x3,#:lo12:.LANCHOR4+1048]
+	mov	w3, -1
+	str	x19, [sp,16]
+	cbz	x5, .L3263
+	ldrh	w3, [x5,10]
+	mov	x4, 0
+.L3264:
+	cmp	w4, w3
+	mov	w6, w4
+	bcs	.L3268
+	add	x7, x5, x4, lsl 3
+	add	x4, x4, 1
+	ldrh	w7, [x7,16]
+	cmp	w7, w0
+	bne	.L3264
+	add	x6, x5, x6, uxtw 3
+	ldrh	w4, [x6,20]
+	mov	x0, x1
+	ldrh	w1, [x6,18]
+	cmp	w2, w4
+	csel	w19, w2, w4, ls
+	add	x1, x1, 1024
+	add	x1, x5, x1
+	uxtw	x2, w19
+	bl	memcpy
+	mov	w3, w19
+	b	.L3263
+.L3268:
+	mov	w3, -1
+.L3263:
+	mov	w0, w3
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
+	.align	2
+	.global	rk_ftl_vendor_write
+	.type	rk_ftl_vendor_write, %function
+rk_ftl_vendor_write:
+	stp	x29, x30, [sp, -112]!
+	mov	w6, w0
+	adrp	x0, .LANCHOR4+1048
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	ldr	x19, [x0,#:lo12:.LANCHOR4+1048]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	w26, w2
+	mov	x28, x1
+	mov	w2, -1
+	cbz	x19, .L3270
+	add	w20, w26, 63
+	ldrh	w3, [x19,10]
+	ldrh	w23, [x19,8]
+	and	w20, w20, -64
+	mov	x2, 0
+.L3271:
+	cmp	w2, w3
+	mov	w4, w2
+	bcs	.L3286
+	add	x0, x19, x2, lsl 3
+	add	x2, x2, 1
+	ldrh	w0, [x0,16]
+	cmp	w0, w6
+	bne	.L3271
+	add	x21, x19, x4, uxtw 3
+	ldrh	w24, [x21,20]
+	add	x5, x19, 1024
+	add	w24, w24, 63
+	and	w24, w24, -64
+	cmp	w26, w24
+	bls	.L3272
+	ldrh	w0, [x19,14]
+	mov	w2, -1
+	cmp	w0, w20
+	bcc	.L3270
+	ldrh	w21, [x21,18]
+	add	w22, w3, w2
+.L3273:
+	cmp	w4, w22
+	uxtw	x3, w4
+	bcs	.L3287
+	add	x3, x19, x3, lsl 3
+	add	w25, w4, 1
+	add	x1, x19, x25, uxtw 3
+	ldrh	w0, [x1,16]
+	str	x6, [x29,96]
+	strh	w0, [x3,16]
+	str	x5, [x29,104]
+	ldrh	w0, [x1,20]
+	strh	w0, [x3,20]
+	strh	w21, [x3,18]
+	add	x0, x5, x21, uxtw
+	ldrh	w27, [x1,20]
+	ldrh	w1, [x1,18]
+	add	w27, w27, 63
+	and	w27, w27, -64
+	add	x1, x5, x1
+	and	x2, x27, 131008
+	add	w21, w21, w27
+	bl	memcpy
+	mov	w4, w25
+	ldr	x6, [x29,96]
+	ldr	x5, [x29,104]
+	b	.L3273
+.L3287:
+	add	x3, x19, x3, lsl 3
+	uxth	w21, w21
+	mov	x1, x28
+	uxtw	x2, w26
+	add	x0, x5, x21, uxth
+	uxth	w20, w20
+	strh	w21, [x3,18]
+	add	w21, w21, w20
+	strh	w6, [x3,16]
+	strh	w26, [x3,20]
+	bl	memcpy
+	strh	w21, [x19,12]
+	ldrh	w0, [x19,14]
+	add	w24, w24, w0
+	sub	w24, w24, w20
+	strh	w24, [x19,14]
+	b	.L3285
+.L3272:
+	ldrh	w0, [x21,18]
+	mov	x1, x28
+	uxtw	x2, w26
+	add	x0, x5, x0
+	bl	memcpy
+	strh	w26, [x21,20]
+	b	.L3285
+.L3286:
+	ldrh	w4, [x19,14]
+	mov	w2, -1
+	cmp	w4, w20
+	bcc	.L3270
+	add	x3, x19, x3, uxth 3
+	strh	w6, [x3,16]
+	uxth	w20, w20
+	mov	x1, x28
+	ldrh	w0, [x19,12]
+	uxtw	x2, w26
+	strh	w0, [x3,18]
+	strh	w26, [x3,20]
+	add	w0, w20, w0
+	sub	w20, w4, w20
+	strh	w0, [x19,12]
+	strh	w20, [x19,14]
+	ldrh	w0, [x3,18]
+	add	x0, x0, 1024
+	add	x0, x19, x0
+	bl	memcpy
+	ldrh	w0, [x19,10]
+	add	w0, w0, 1
+	strh	w0, [x19,10]
+.L3285:
+	ldr	w0, [x19,4]
+	add	x1, x19, 61440
+	add	w0, w0, 1
+	str	w0, [x19,4]
+	str	w0, [x1,4092]
+	ldrh	w0, [x19,8]
+	add	w0, w0, 1
+	uxth	w0, w0
+	cmp	w0, 1
+	csel	w0, w0, wzr, ls
+	strh	w0, [x19,8]
+	bl	rknand_device_lock
+	mov	w2, 128
+	lsl	w1, w23, 7
+	mov	x3, x19
+	mov	w0, 16
+	bl	FtlWrite
+	bl	rknand_device_unlock
+	mov	w2, 0
+.L3270:
+	mov	w0, w2
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
+	.align	2
+	.global	rk_ftl_vendor_storage_ioctl
+	.type	rk_ftl_vendor_storage_ioctl, %function
+rk_ftl_vendor_storage_ioctl:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, kmalloc_caches+96
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	ldr	x0, [x0,#:lo12:kmalloc_caches+96]
+	mov	w22, w1
+	mov	w1, 192
+	mov	x21, x2
+	movk	w1, 0x240, lsl 16
+	mov	x2, 4096
+	stp	x19, x20, [sp,16]
+	bl	kmem_cache_alloc_trace
+	mov	x20, -1
+	mov	x19, x0
+	cbz	x0, .L3289
+	mov	w1, 30209
+	movk	w1, 0x4004, lsl 16
+	cmp	w22, w1
+	beq	.L3291
+	mov	w2, 30210
+	movk	w2, 0x4004, lsl 16
+	cmp	w22, w2
+	beq	.L3292
+	b	.L3303
+.L3291:
+	mov	x1, x21
+	mov	x2, 8
+	bl	rk_copy_from_user
+	cbnz	x0, .L3303
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	beq	.L3294
+.L3295:
+	mov	x20, -1
+	b	.L3290
+.L3294:
+	ldrh	w0, [x19,4]
+	add	x1, x19, 8
+	ldrh	w2, [x19,6]
+	bl	rk_ftl_vendor_read
+	cmn	w0, #1
+	beq	.L3295
+	uxth	x2, w0
+	strh	w0, [x19,6]
+	mov	x1, x19
+	mov	x0, x21
+	add	x2, x2, 8
+	mov	x20, -14
+	bl	rk_copy_to_user
+	cmp	x0, xzr
+	csel	x20, xzr, x20, eq
+	b	.L3290
+.L3292:
+	mov	x1, x21
+	mov	x2, 8
+	bl	rk_copy_from_user
+	cbnz	x0, .L3303
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	bne	.L3295
+	ldrh	w3, [x19,6]
+	cmp	w3, 4087
+	bhi	.L3295
+	add	w2, w3, 8
+	mov	x0, x19
+	mov	x1, x21
+	sxtw	x2, w2
+	bl	rk_copy_from_user
+	cbnz	x0, .L3303
+	ldrh	w0, [x19,4]
+	add	x1, x19, 8
+	ldrh	w2, [x19,6]
+	bl	rk_ftl_vendor_write
+	sxtw	x20, w0
+	b	.L3290
+.L3303:
+	mov	x20, -14
+.L3290:
+	mov	x0, x19
+	bl	kfree
+.L3289:
+	mov	x0, x20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	rk_ftl_vendor_storage_ioctl, .-rk_ftl_vendor_storage_ioctl
+	.global	gTable_Crc32
+	.global	SecureBootUnlockTryCount
+	.global	SecureBootCheckOK
+	.global	SecureBootEn
+	.global	gpVendor1Info
+	.global	gpVendor0Info
+	.global	g_idb_buffer
+	.global	gSnSectorData
+	.global	gpDrmKeyInfo
+	.global	gpBootConfig
+	.global	gLoaderBootInfo
+	.global	RK29_NANDC1_REG_BASE
+	.global	RK29_NANDC_REG_BASE
+	.global	gc_ink_free_return_value
+	.global	FtlUpdateVaildLpnCount
+	.global	g_ect_tbl_power_up_flush
+	.global	last_cache_match_count
+	.global	power_up_flag
+	.global	g_LowFormat
+	.global	gFtlInitStatus
+	.global	DeviceCapacity
+	.global	ToshibaRefValue
+	.global	Toshiba15RefValue
+	.global	ToshibaA19RefValue
+	.global	SamsungRefValue
+	.global	refValueDefault
+	.global	FbbtBlk
+	.global	random_seed
+	.global	gSlcNandParaInfo
+	.global	gNandParaInfo
+	.global	NandFlashParaTbl
+	.global	g_page_map_check_enable
+	.global	g_power_lost_ecc_error_blk
+	.global	g_power_lost_recovery_flag
+	.global	c_mlc_erase_count_value
+	.global	g_recovery_ppa_tbl
+	.global	g_recovery_page_min_ver
+	.global	g_recovery_page_num
+	.global	g_cur_erase_blk
+	.global	g_gc_skip_write_count
+	.global	g_gc_head_data_block_count
+	.global	g_gc_head_data_block
+	.global	g_ftl_nand_free_count
+	.global	g_in_swl_replace
+	.global	g_in_gc_progress
+	.global	g_all_blk_used_slc_mode
+	.global	g_max_erase_count
+	.global	g_totle_sys_slc_erase_count
+	.global	g_totle_slc_erase_count
+	.global	g_min_erase_count
+	.global	g_totle_avg_erase_count
+	.global	g_totle_mlc_erase_count
+	.global	g_totle_l2p_write_count
+	.global	g_totle_cache_write_count
+	.global	g_tmp_data_superblock_id
+	.global	g_totle_read_page_count
+	.global	g_totle_discard_page_count
+	.global	g_totle_read_sector
+	.global	g_totle_write_sector
+	.global	g_totle_write_page_count
+	.global	g_totle_gc_page_count
+	.global	g_gc_blk_index
+	.global	g_gc_merge_free_blk_threshold
+	.global	g_gc_free_blk_threshold
+	.global	g_gc_refresh_block_temp_tbl
+	.global	g_free_slc_blk_num
+	.global	g_gc_refresh_block_temp_num
+	.global	g_gc_bad_block_temp_tbl
+	.global	g_gc_bad_block_gc_index
+	.global	g_gc_bad_block_temp_num
+	.global	g_gc_next_blk_1
+	.global	g_gc_next_blk
+	.global	g_gc_cur_blk_max_valid_pages
+	.global	g_gc_cur_blk_valid_pages
+	.global	g_gc_page_offset
+	.global	g_gc_blk_num
+	.global	p_gc_blk_tbl
+	.global	p_gc_page_info
+	.global	g_sys_ext_data
+	.global	g_sys_save_data
+	.global	gp_last_act_superblock
+	.global	g_gc_superblock
+	.global	g_gc_temp_superblock
+	.global	g_buffer_superblock
+	.global	g_active_superblock
+	.global	g_num_data_superblocks
+	.global	g_num_free_superblocks
+	.global	p_data_block_list_tail
+	.global	p_data_block_list_head
+	.global	p_free_data_block_list_head
+	.global	p_data_block_list_table
+	.global	g_l2p_last_update_region_id
+	.global	p_l2p_map_buf
+	.global	p_l2p_ram_map
+	.global	g_totle_vendor_block
+	.global	p_vendor_region_ppn_table
+	.global	p_vendor_block_ver_table
+	.global	p_vendor_block_valid_page_count
+	.global	p_vendor_block_table
+	.global	g_totle_map_block
+	.global	p_map_region_ppn_check_table
+	.global	p_map_region_ppn_table
+	.global	p_map_block_ver_table
+	.global	p_map_block_valid_page_count
+	.global	p_map_block_table
+	.global	p_blk_mode_table
+	.global	p_valid_page_count_check_table
+	.global	p_valid_page_count_table
+	.global	g_totle_swl_count
+	.global	p_swl_mul_table
+	.global	p_erase_count_table
+	.global	g_ect_tbl_info_size
+	.global	gp_ect_tbl_info
+	.global	g_gc_num_req
+	.global	c_gc_page_buf_num
+	.global	gp_gc_page_buf_info
+	.global	p_gc_data_buf
+	.global	p_gc_spare_buf
+	.global	p_io_spare_buf
+	.global	p_io_data_buf_1
+	.global	p_io_data_buf_0
+	.global	p_sys_spare_buf
+	.global	p_vendor_data_buf
+	.global	p_sys_data_buf_1
+	.global	p_sys_data_buf
+	.global	g_wr_page_num
+	.global	req_wr_io
+	.global	c_wr_page_buf_num
+	.global	p_wr_io_data_buf
+	.global	p_wr_io_spare_buf
+	.global	p_plane_order_table
+	.global	g_req_cache
+	.global	req_gc_dst
+	.global	req_gc
+	.global	req_erase
+	.global	req_prgm
+	.global	req_read
+	.global	req_sys
+	.global	gVendorBlkInfo
+	.global	gL2pMapInfo
+	.global	gSysFreeQueue
+	.global	gSysInfo
+	.global	gBbtInfo
+	.global	g_flash_read_only_en
+	.global	g_inkDie_check_enable
+	.global	g_SlcPartLbaEndSector
+	.global	g_MaxLbn
+	.global	g_VaildLpn
+	.global	g_MaxLpn
+	.global	g_MaxLbaSector
+	.global	g_GlobalDataVersion
+	.global	g_GlobalSysVersion
+	.global	ftl_gc_temp_power_lost_recovery_flag
+	.global	c_ftl_nand_max_data_blks
+	.global	c_ftl_nand_data_op_blks_per_plane
+	.global	c_ftl_nand_data_blks_per_plane
+	.global	c_ftl_nand_max_sys_blks
+	.global	c_ftl_nand_init_sys_blks_per_plane
+	.global	c_ftl_nand_sys_blks_per_plane
+	.global	c_ftl_vendor_part_size
+	.global	c_ftl_nand_max_vendor_blks
+	.global	c_ftl_nand_max_map_blks
+	.global	c_ftl_nand_map_blks_per_plane
+	.global	c_ftl_nand_vendor_region_num
+	.global	c_ftl_nand_l2pmap_ram_region_num
+	.global	c_ftl_nand_map_region_num
+	.global	c_ftl_nand_totle_phy_blks
+	.global	c_ftl_nand_reserved_blks
+	.global	c_ftl_nand_byte_pre_oob
+	.global	c_ftl_nand_byte_pre_page
+	.global	c_ftl_nand_sec_pre_page_shift
+	.global	c_ftl_nand_sec_pre_page
+	.global	c_ftl_nand_page_pre_super_blk
+	.global	c_ftl_nand_page_pre_slc_blk
+	.global	c_ftl_nand_page_pre_blk
+	.global	c_ftl_nand_bbm_buf_size
+	.global	c_ftl_nand_ext_blk_pre_plane
+	.global	c_ftl_nand_blk_pre_plane
+	.global	c_ftl_nand_planes_num
+	.global	c_ftl_nand_blks_per_die_shift
+	.global	c_ftl_nand_blks_per_die
+	.global	c_ftl_nand_planes_per_die
+	.global	c_ftl_nand_die_num
+	.global	c_ftl_nand_type
+	.global	gMasterTempBuf
+	.global	gMasterInfo
+	.global	gNandcDumpWriteEn
+	.global	gToggleModeClkDiv
+	.global	gBootDdrMode
+	.global	gNandcEccBits
+	.global	gpNandc1
+	.global	gpNandc
+	.global	g_nandc_version_data
+	.global	gNandcVer
+	.global	gNandChipMap
+	.global	gNandIDataBuf
+	.global	FlashDdrTunningReadCount
+	.global	FlashWaitBusyScheduleEn
+	.global	gNandPhyInfo
+	.global	gFlashProgCheckSpareBuffer
+	.global	gFlashProgCheckBuffer
+	.global	gFlashSpareBuffer
+	.global	gFlashPageBuffer1
+	.global	gFlashPageBuffer0
+	.global	gpFlashSaveInfo
+	.global	gReadRetryInfo
+	.global	gpNandParaInfo
+	.global	gNandOptPara
+	.global	g_slc2KBNand
+	.global	g_maxRetryCount
+	.global	g_maxRegNum
+	.global	g_retryMode
+	.global	gNandIDBResBlkNumSaveInFlash
+	.global	gNandIDBResBlkNum
+	.global	gNandFlashResEndPageAddr
+	.global	gNandFlashInfoBlockAddr
+	.global	gNandFlashIdbBlockAddr
+	.global	gNandFlashInfoBlockEcc
+	.global	gNandFlashIDBEccBits
+	.global	gNandFlashEccBits
+	.global	gNandRandomizer
+	.global	gBlockPageAlignSize
+	.global	gTotleBlock
+	.global	gNandMaxChip
+	.global	gNandMaxDie
+	.global	gFlashInterfaceMode
+	.global	gFlashSlcMode
+	.global	gFlashOnfiModeEn
+	.global	gFlashToggleModeEn
+	.global	gFlashSdrModeEn
+	.global	gMultiPageProgEn
+	.global	gMultiPageReadEn
+	.global	gpReadRetrial
+	.global	mlcPageToSlcPageTbl
+	.global	slcPageToMlcPageTbl
+	.global	DieAddrs
+	.global	gDieOp
+	.global	DieCsIndex
+	.global	IDByte
+	.global	read_retry_cur_offset
+	.section	.rodata
+	.align	3
+.LANCHOR3 = . + 0
+	.type	__func__.19317, %object
+	.size	__func__.19317, 11
+__func__.19317:
+	.string	"FtlMemInit"
+	.zero	5
+	.type	__func__.20247, %object
+	.size	__func__.20247, 21
+__func__.20247:
+	.string	"FtlVpcCheckAndModify"
+	.zero	3
+	.type	__func__.19388, %object
+	.size	__func__.19388, 8
+__func__.19388:
+	.string	"FtlInit"
+	.section	.rodata.str1.1,"aMS",%progbits,1
+.LC0:
+	.string	"FlashEraseBlocks pageAddr error %x\n"
+.LC1:
+	.string	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\n"
+.LC2:
+	.string	"remove_from_free_sys_Queue %x\n"
+.LC3:
+	.string	"FLASH INFO:\n"
+.LC4:
+	.string	"FLASH ID: %x\n"
+.LC5:
+	.string	"Device Capacity: %d MB\n"
+.LC6:
+	.string	"FMWAIT: %x %x %x %x\n"
+.LC7:
+	.string	"FTL INFO:\n"
+.LC8:
+	.string	"g_MaxLpn = 0x%x\n"
+.LC9:
+	.string	"g_VaildLpn = 0x%x\n"
+.LC10:
+	.string	"read_page_count = 0x%x\n"
+.LC11:
+	.string	"discard_page_count = 0x%x\n"
+.LC12:
+	.string	"write_page_count = 0x%x\n"
+.LC13:
+	.string	"cache_write_count = 0x%x\n"
+.LC14:
+	.string	"l2p_write_count = 0x%x\n"
+.LC15:
+	.string	"gc_page_count = 0x%x\n"
+.LC16:
+	.string	"totle_write = %d MB\n"
+.LC17:
+	.string	"totle_read = %d MB\n"
+.LC18:
+	.string	"GSV = 0x%x\n"
+.LC19:
+	.string	"GDV = 0x%x\n"
+.LC20:
+	.string	"bad blk num = %d %d\n"
+.LC21:
+	.string	"free_superblocks = 0x%x\n"
+.LC22:
+	.string	"mlc_EC = 0x%x\n"
+.LC23:
+	.string	"slc_EC = 0x%x\n"
+.LC24:
+	.string	"avg_EC = 0x%x\n"
+.LC25:
+	.string	"sys_EC = 0x%x\n"
+.LC26:
+	.string	"max_EC = 0x%x\n"
+.LC27:
+	.string	"min_EC = 0x%x\n"
+.LC28:
+	.string	"PLT = 0x%x\n"
+.LC29:
+	.string	"POT = 0x%x\n"
+.LC30:
+	.string	"MaxSector = 0x%x\n"
+.LC31:
+	.string	"init_sys_blks_pp = 0x%x\n"
+.LC32:
+	.string	"sys_blks_pp = 0x%x\n"
+.LC33:
+	.string	"free sysblock = 0x%x\n"
+.LC34:
+	.string	"data_blks_pp = 0x%x\n"
+.LC35:
+	.string	"data_op_blks_pp = 0x%x\n"
+.LC36:
+	.string	"max_data_blks = 0x%x\n"
+.LC37:
+	.string	"Sys.id = 0x%x\n"
+.LC38:
+	.string	"Bbt.id = 0x%x\n"
+.LC39:
+	.string	"ACT.page = 0x%x\n"
+.LC40:
+	.string	"ACT.plane = 0x%x\n"
+.LC41:
+	.string	"ACT.id = 0x%x\n"
+.LC42:
+	.string	"ACT.mode = 0x%x\n"
+.LC43:
+	.string	"ACT.a_pages = 0x%x\n"
+.LC44:
+	.string	"ACT VPC = 0x%x\n"
+.LC45:
+	.string	"BUF.page = 0x%x\n"
+.LC46:
+	.string	"BUF.plane = 0x%x\n"
+.LC47:
+	.string	"BUF.id = 0x%x\n"
+.LC48:
+	.string	"BUF.mode = 0x%x\n"
+.LC49:
+	.string	"BUF.a_pages = 0x%x\n"
+.LC50:
+	.string	"BUF VPC = 0x%x\n"
+.LC51:
+	.string	"TMP.page = 0x%x\n"
+.LC52:
+	.string	"TMP.plane = 0x%x\n"
+.LC53:
+	.string	"TMP.id = 0x%x\n"
+.LC54:
+	.string	"TMP.mode = 0x%x\n"
+.LC55:
+	.string	"TMP.a_pages = 0x%x\n"
+.LC56:
+	.string	"GC.page = 0x%x\n"
+.LC57:
+	.string	"GC.plane = 0x%x\n"
+.LC58:
+	.string	"GC.id = 0x%x\n"
+.LC59:
+	.string	"GC.mode = 0x%x\n"
+.LC60:
+	.string	"GC.a_pages = 0x%x\n"
+.LC61:
+	.string	"WR_CHK = 0x%x %x %x %x\n"
+.LC62:
+	.string	"Read Err Cnt = 0x%x\n"
+.LC63:
+	.string	"Prog Err Cnt = 0x%x\n"
+.LC64:
+	.string	"gc_free_blk_th= 0x%x\n"
+.LC65:
+	.string	"gc_merge_free_blk_th= 0x%x\n"
+.LC66:
+	.string	"gc_skip_write_count= 0x%x\n"
+.LC67:
+	.string	"gc_blk_index= 0x%x\n"
+.LC68:
+	.string	"free min EC= 0x%x\n"
+.LC69:
+	.string	"free max EC= 0x%x\n"
+.LC70:
+	.string	"GC__SB VPC = 0x%x\n"
+.LC71:
+	.string	"%d. [0x%x]=0x%x 0x%x  0x%x\n"
+.LC72:
+	.string	"free %d. [0x%x] 0x%x  0x%x\n"
+.LC73:
+	.string	"%s\n"
+.LC74:
+	.string	"FTL version: 5.0.47 20171120"
+.LC75:
+	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
+.LC76:
+	.string	"FtlGcRefreshBlock  0x%x\n"
+.LC77:
+	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
+.LC78:
+	.string	"%s error allocating memory. return -1\n"
+.LC79:
+	.string	"%s 0x%x:"
+.LC80:
+	.string	"%x "
+.LC81:
+	.string	""
+.LC82:
+	.string	"otp error! %d"
+.LC83:
+	.string	"rr"
+.LC84:
+	.string	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\n"
+.LC85:
+	.string	"nandc:"
+.LC86:
+	.string	"%d flReg.d32=%x %x\n"
+.LC87:
+	.string	"sdr read ok %x ecc=%d\n"
+.LC88:
+	.string	"sync para %d\n"
+.LC89:
+	.string	"TOG mode Read error %x %x\n"
+.LC90:
+	.string	"read retry status %x %x %x\n"
+.LC91:
+	.string	"micron RR %d row=%x,count %d,status=%d\n"
+.LC92:
+	.string	"ECC:%d\n"
+.LC93:
+	.string	"No.%d FLASH ID:%x %x %x %x %x %x\n"
+.LC94:
+	.string	"FlashLoadPhyInfo fail %x!!\n"
+.LC95:
+	.string	"Read pageadd=%x  ecc=%x err=%x\n"
+.LC96:
+	.string	"data:"
+.LC97:
+	.string	"spare:"
+.LC98:
+	.string	"ReadRetry pageadd=%x ecc=%x err=%x\n"
+.LC99:
+	.string	"FLFB:%d %d\n"
+.LC100:
+	.string	"prog error: = %x\n"
+.LC101:
+	.string	"prog read error: = %x\n"
+.LC102:
+	.string	"prog read s error: = %x %x %x\n"
+.LC103:
+	.string	"prog read d error: = %x %x %x\n"
+.LC104:
+	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
+.LC105:
+	.string	"FlashMakeFactorBbt %d\n"
+.LC106:
+	.string	"bad block:%d %d\n"
+.LC107:
+	.string	"FMFB:%d %d\n"
+.LC108:
+	.string	"E:bad block:%d\n"
+.LC109:
+	.string	"FMFB:Save %d %d\n"
+.LC110:
+	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
+.LC111:
+	.string	"FtlBbmTblFlush error:%x\n"
+.LC112:
+	.string	"FtlBbmTblFlush error = %x error count = %d\n"
+.LC113:
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+.LC114:
+	.string	"decrement_vpc_count %x = %d\n"
+.LC115:
+	.string	"FtlVpcTblFlush error = %x error count = %d\n"
+.LC116:
+	.string	"ftl_map_blk_gc blk info: %x %x %x\n"
+.LC117:
+	.string	"page map lost: %x %x\n"
+.LC118:
+	.string	"FtlMapWritePage error = %x\n"
+.LC119:
+	.string	"FtlMapWritePage error = %x error count = %d\n"
+.LC120:
+	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
+.LC121:
+	.string	"page map lost %x %x %x %x\n"
+.LC122:
+	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
+.LC123:
+	.string	"no ect"
+.LC124:
+	.string	"slc mode"
+.LC125:
+	.string	"RSB refresh addr %x\n"
+.LC126:
+	.string	"spuer block %x vpn is 0\n "
+.LC127:
+	.string	"g_recovery_ppa %x ver %x\n "
+.LC128:
+	.string	"...%s enter...\n"
+.LC129:
+	.string	"FtlCheckVpc %x = %x  %x\n"
+.LC130:
+	.string	"%d GC datablk  = %x vpc %x %x\n"
+.LC131:
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+.LC132:
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+.LC133:
+	.string	"GC des block %x done\n"
+.LC134:
+	.string	"...%s: no bad block mapping table, format device\n"
+.LC135:
+	.string	"...%s FtlSysBlkInit error ,format device!\n"
+.LC136:
+	.string	"FtlInit %x\n"
+.LC137:
+	.string	"fix power lost blk = %x vpc=%x\n"
+.LC138:
+	.string	"erase power lost blk = %x vpc=%x\n"
+.LC139:
+	.string	"FtlWrite: lpa error:%x %x\n"
+.LC140:
+	.string	"BBT:"
+.LC141:
+	.string	"IdBlockReadData %x %x\n"
+.LC142:
+	.string	"IdBlockReadData %x %x ret= %x\n"
+.LC143:
+	.string	"IDBlockWriteData %x %x\n"
+.LC144:
+	.string	"IDBlockWriteData %x %x ret= %x\n"
+.LC145:
+	.string	"idblk:"
+.LC146:
+	.string	"idb reverse %x %x\n"
+.LC147:
+	.string	"write_idblock totle_sec %x %x\n"
+.LC148:
+	.string	"write and check error:%d idb=%x,offset=%x,r=%x,w=%x\n"
+.LC149:
+	.string	"write"
+.LC150:
+	.string	"read"
+.LC151:
+	.string	"write_idblock error\n"
+.LC152:
+	.string	"READ_SECTOR_IO\n"
+.LC153:
+	.string	"rk_copy_from_user error\n"
+.LC154:
+	.string	"READ_SECTOR_IO %x %x\n"
+.LC155:
+	.string	"rk_copy_to_user error\n"
+.LC156:
+	.string	"WRITE_SECTOR_IO\n"
+.LC157:
+	.string	"WRITE_SECTOR_IO %x %x\n"
+.LC158:
+	.string	"END_WRITE_SECTOR_IO\n"
+.LC159:
+	.string	"END_WRITE_SECTOR_IO %x %x\n"
+.LC160:
+	.string	"GET_FLASH_INFO_IO\n"
+.LC161:
+	.string	"GET_BAD_BLOCK_IO\n"
+.LC162:
+	.string	"bbt:"
+.LC163:
+	.string	"GET_LOCK_FLAG_IO\n"
+.LC164:
+	.string	"GET_PUBLIC_KEY_IO\n"
+.LC165:
+	.string	"RKNAND_GET_DRM_KEY\n"
+.LC166:
+	.string	"RKNAND_STORE_DRM_KEY\n"
+.LC167:
+	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
+.LC168:
+	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
+.LC169:
+	.string	"RKNAND_GET_SN_SECTOR\n"
+.LC170:
+	.string	"RKNAND_LOADER_UNLOCK\n"
+.LC171:
+	.string	"RKNAND_LOADER_STATUS\n"
+.LC172:
+	.string	"RKNAND_LOADER_LOCK\n"
+.LC173:
+	.string	"LockKey not match %d\n"
+.LC174:
+	.string	"RKNAND_GET_VENDOR_SECTOR\n"
+.LC175:
+	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
+.LC176:
+	.string	"return ret = %lx\n"
+.LC177:
+	.string	"secureBootEn check error\n"
+.LC178:
+	.string	"\0013vendor storage %x,%x,%x\n"
+	.data
+	.align	3
+.LANCHOR1 = . + 0
+	.type	random_seed, %object
+	.size	random_seed, 256
+random_seed:
+	.hword	22378
+	.hword	1512
+	.hword	25245
+	.hword	17827
+	.hword	25756
+	.hword	19440
+	.hword	9026
+	.hword	10030
+	.hword	29528
+	.hword	20467
+	.hword	29676
+	.hword	24432
+	.hword	31328
+	.hword	6872
+	.hword	13426
+	.hword	13842
+	.hword	8783
+	.hword	1108
+	.hword	782
+	.hword	28837
+	.hword	30729
+	.hword	9505
+	.hword	18676
+	.hword	23085
+	.hword	18730
+	.hword	1085
+	.hword	32609
+	.hword	14697
+	.hword	20858
+	.hword	15170
+	.hword	30365
+	.hword	1607
+	.hword	32298
+	.hword	4995
+	.hword	18905
+	.hword	1976
+	.hword	9592
+	.hword	20204
+	.hword	17443
+	.hword	13615
+	.hword	23330
+	.hword	29369
+	.hword	13947
+	.hword	9398
+	.hword	32398
+	.hword	8984
+	.hword	27600
+	.hword	21785
+	.hword	6019
+	.hword	6311
+	.hword	31598
+	.hword	30210
+	.hword	19327
+	.hword	13896
+	.hword	11347
+	.hword	27545
+	.hword	3107
+	.hword	26575
+	.hword	32270
+	.hword	19852
+	.hword	20601
+	.hword	8349
+	.hword	9290
+	.hword	29819
+	.hword	13579
+	.hword	3661
+	.hword	28676
+	.hword	27331
+	.hword	32574
+	.hword	8693
+	.hword	31253
+	.hword	9081
+	.hword	5399
+	.hword	6842
+	.hword	20087
+	.hword	5537
+	.hword	1274
+	.hword	11617
+	.hword	9530
+	.hword	4866
+	.hword	8035
+	.hword	23219
+	.hword	1178
+	.hword	23272
+	.hword	7383
+	.hword	18944
+	.hword	12488
+	.hword	12871
+	.hword	29340
+	.hword	20532
+	.hword	11022
+	.hword	22514
+	.hword	228
+	.hword	22363
+	.hword	24978
+	.hword	14584
+	.hword	12138
+	.hword	3092
+	.hword	17916
+	.hword	16863
+	.hword	14554
+	.hword	31457
+	.hword	29474
+	.hword	25311
+	.hword	24121
+	.hword	3684
+	.hword	28037
+	.hword	22865
+	.hword	22839
+	.hword	25217
+	.hword	13217
+	.hword	27186
+	.hword	14938
+	.hword	11180
+	.hword	29754
+	.hword	24180
+	.hword	15150
+	.hword	32455
+	.hword	20434
+	.hword	23848
+	.hword	29983
+	.hword	16120
+	.hword	14769
+	.hword	20041
+	.hword	29803
+	.hword	28406
+	.hword	17598
+	.hword	28087
+	.type	ToshibaA19RefValue, %object
+	.size	ToshibaA19RefValue, 45
+ToshibaA19RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.zero	3
+	.type	Toshiba15RefValue, %object
+	.size	Toshiba15RefValue, 95
+Toshiba15RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.zero	1
+	.type	ToshibaRefValue, %object
+	.size	ToshibaRefValue, 8
+ToshibaRefValue:
+	.byte	0
+	.byte	4
+	.byte	124
+	.byte	120
+	.byte	116
+	.byte	8
+	.byte	12
+	.byte	112
+	.type	SamsungRefValue, %object
+	.size	SamsungRefValue, 64
+SamsungRefValue:
+	.byte	-89
+	.byte	-92
+	.byte	-91
+	.byte	-90
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	10
+	.byte	0
+	.byte	0
+	.byte	40
+	.byte	0
+	.byte	-20
+	.byte	-40
+	.byte	-19
+	.byte	-11
+	.byte	-19
+	.byte	-26
+	.byte	10
+	.byte	15
+	.byte	5
+	.byte	0
+	.byte	15
+	.byte	10
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-17
+	.byte	-24
+	.byte	-36
+	.byte	-15
+	.byte	-5
+	.byte	-2
+	.byte	-16
+	.byte	10
+	.byte	0
+	.byte	-5
+	.byte	-20
+	.byte	-48
+	.byte	-30
+	.byte	-48
+	.byte	-62
+	.byte	20
+	.byte	15
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-5
+	.byte	-24
+	.byte	-36
+	.byte	30
+	.byte	20
+	.byte	-5
+	.byte	-20
+	.byte	-5
+	.byte	-1
+	.byte	-5
+	.byte	-8
+	.byte	7
+	.byte	12
+	.byte	2
+	.byte	0
+	.type	gNandParaInfo, %object
+	.size	gNandParaInfo, 32
+gNandParaInfo:
+	.byte	0
+	.byte	0
+	.zero	5
+	.byte	0
+	.byte	1
+	.byte	8
+	.hword	128
+	.byte	2
+	.byte	1
+	.hword	2048
+	.hword	0
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.type	gFtlInitStatus, %object
+	.size	gFtlInitStatus, 4
+gFtlInitStatus:
+	.word	-1
+	.zero	4
+	.type	NandFlashParaTbl, %object
+	.size	NandFlashParaTbl, 2304
+NandFlashParaTbl:
+	.byte	6
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	68
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1064
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	4
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-88
+	.byte	5
+	.byte	-53
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	74
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	84
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	4096
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	70
+	.byte	-123
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-120
+	.byte	5
+	.byte	-58
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	0
+	.byte	39
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	1
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	86
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	24
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	700
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	-59
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-43
+	.byte	-47
+	.byte	-90
+	.byte	104
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.hword	64
+	.byte	1
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-36
+	.byte	-112
+	.byte	-90
+	.byte	84
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	64
+	.byte	1
+	.byte	2
+	.hword	1024
+	.hword	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	84
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1024
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	50
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1048
+	.hword	1503
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1044
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-46
+	.byte	4
+	.byte	67
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	473
+	.byte	1
+	.byte	1
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-61
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	473
+	.byte	1
+	.byte	2
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-111
+	.byte	96
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1046
+	.hword	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2090
+	.hword	473
+	.byte	1
+	.byte	4
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-21
+	.byte	116
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	473
+	.byte	1
+	.byte	7
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	530
+	.hword	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	281
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-89
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1060
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	20
+	.byte	-98
+	.byte	52
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1056
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-89
+	.byte	66
+	.byte	72
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1060
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1056
+	.hword	473
+	.byte	2
+	.byte	6
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2092
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	-124
+	.byte	7
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	36
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	2092
+	.hword	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-123
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	2
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	2092
+	.hword	1505
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-43
+	.byte	-124
+	.byte	50
+	.byte	114
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	1
+	.hword	2056
+	.hword	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2058
+	.hword	1489
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2062
+	.hword	1489
+	.byte	1
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-107
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	1
+	.byte	2
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	85
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2050
+	.hword	401
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	1497
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1074
+	.hword	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2106
+	.hword	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1056
+	.hword	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2082
+	.hword	473
+	.byte	1
+	.byte	65
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	1497
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2090
+	.hword	1241
+	.byte	1
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	2092
+	.hword	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2106
+	.hword	1497
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1074
+	.hword	1497
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-92
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2138
+	.hword	1497
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2062
+	.hword	473
+	.byte	1
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	126
+	.byte	100
+	.byte	68
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	473
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	126
+	.byte	104
+	.byte	68
+	.byte	0
+	.byte	2
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	505
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	122
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2076
+	.hword	409
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	122
+	.byte	88
+	.byte	67
+	.byte	0
+	.byte	2
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2076
+	.hword	441
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-43
+	.byte	-108
+	.byte	118
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	1038
+	.hword	281
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	20
+	.byte	118
+	.byte	84
+	.byte	-62
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2076
+	.hword	1169
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	40
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.type	NandOptPara, %object
+	.size	NandOptPara, 128
+NandOptPara:
+	.byte	1
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	50
+	.byte	17
+	.byte	-128
+	.byte	112
+	.byte	120
+	.byte	120
+	.byte	3
+	.byte	1
+	.byte	0
+	.zero	14
+	.byte	2
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	0
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.byte	3
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.byte	4
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	112
+	.byte	112
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.type	refValueDefault, %object
+	.size	refValueDefault, 28
+refValueDefault:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.zero	4
+	.type	gSlcNandParaInfo, %object
+	.size	gSlcNandParaInfo, 32
+gSlcNandParaInfo:
+	.byte	2
+	.byte	-104
+	.byte	-15
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	1
+	.byte	1
+	.byte	4
+	.hword	64
+	.byte	1
+	.byte	1
+	.hword	1024
+	.hword	256
+	.byte	0
+	.byte	0
+	.byte	16
+	.byte	40
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
+	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
+ftl_gc_temp_block_bops_scan_page_addr:
+	.hword	-1
+	.zero	2
+	.type	power_up_flag, %object
+	.size	power_up_flag, 4
+power_up_flag:
+	.word	1
+	.type	gTable_Crc32, %object
+	.size	gTable_Crc32, 1024
+gTable_Crc32:
+	.word	0
+	.word	79760823
+	.word	159521646
+	.word	222500569
+	.word	319043292
+	.word	398801771
+	.word	445001138
+	.word	507977733
+	.word	638086584
+	.word	583622671
+	.word	797603542
+	.word	726367073
+	.word	890002276
+	.word	835540691
+	.word	1015955466
+	.word	944721341
+	.word	1276173168
+	.word	1221711559
+	.word	1167245342
+	.word	1096011177
+	.word	1595207084
+	.word	1540743195
+	.word	1452734146
+	.word	1381497717
+	.word	1780004552
+	.word	1859763071
+	.word	1671081382
+	.word	1734058001
+	.word	2031910932
+	.word	2111671715
+	.word	1889442682
+	.word	1952421581
+	.word	-1742620960
+	.word	-1662993577
+	.word	-1851544178
+	.word	-1788698567
+	.word	-1960476612
+	.word	-1880846965
+	.word	-2102944942
+	.word	-2040097051
+	.word	-1104553128
+	.word	-1159145745
+	.word	-1213480906
+	.word	-1284846207
+	.word	-1389499004
+	.word	-1444093901
+	.word	-1531971862
+	.word	-1603339427
+	.word	-734958192
+	.word	-789553113
+	.word	-575441154
+	.word	-646808759
+	.word	-952804532
+	.word	-1007397125
+	.word	-826851294
+	.word	-898216555
+	.word	-231145432
+	.word	-151515745
+	.word	-71623866
+	.word	-8775951
+	.word	-516081932
+	.word	-436454589
+	.word	-390124134
+	.word	-327278547
+	.word	880959607
+	.word	809725376
+	.word	1023441689
+	.word	968980142
+	.word	663115435
+	.word	591878940
+	.word	772033989
+	.word	717570162
+	.word	311037391
+	.word	374014072
+	.word	453514913
+	.word	533273366
+	.word	26098451
+	.word	89077412
+	.word	135012477
+	.word	214773194
+	.word	2022882055
+	.word	2085861040
+	.word	1896915049
+	.word	1976675806
+	.word	1805028827
+	.word	1868005484
+	.word	1645516469
+	.word	1725274882
+	.word	1587205823
+	.word	1515969288
+	.word	1461243345
+	.word	1406779494
+	.word	1302257763
+	.word	1231023572
+	.word	1142749965
+	.word	1088288442
+	.word	-1398548841
+	.word	-1469916384
+	.word	-1524511239
+	.word	-1579106226
+	.word	-1079517109
+	.word	-1150882308
+	.word	-1239024859
+	.word	-1293617518
+	.word	-1968456913
+	.word	-1905609064
+	.word	-2094423999
+	.word	-2014794250
+	.word	-1716548109
+	.word	-1653702588
+	.word	-1876060515
+	.word	-1796433110
+	.word	-525136409
+	.word	-462290864
+	.word	-382658935
+	.word	-303031490
+	.word	-206095557
+	.word	-143247732
+	.word	-97181611
+	.word	-17551902
+	.word	-960798625
+	.word	-1032163864
+	.word	-818316495
+	.word	-872909178
+	.word	-708880765
+	.word	-780248268
+	.word	-599962131
+	.word	-654557094
+	.word	1761919214
+	.word	1841679705
+	.word	1619450752
+	.word	1682429495
+	.word	2046883378
+	.word	2126642053
+	.word	1937960284
+	.word	2000937195
+	.word	1326230870
+	.word	1271767265
+	.word	1183757880
+	.word	1112521615
+	.word	1544067978
+	.word	1489606205
+	.word	1435140324
+	.word	1363905875
+	.word	622074782
+	.word	567612969
+	.word	748028144
+	.word	676793671
+	.word	907029826
+	.word	852566261
+	.word	1066546732
+	.word	995310491
+	.word	52196902
+	.word	131955601
+	.word	178154824
+	.word	241131775
+	.word	270024954
+	.word	349785421
+	.word	429546388
+	.word	492525091
+	.word	-249203186
+	.word	-169575495
+	.word	-123245216
+	.word	-60399401
+	.word	-501137198
+	.word	-421507739
+	.word	-341615684
+	.word	-278768117
+	.word	-684909642
+	.word	-739502591
+	.word	-558956328
+	.word	-630321809
+	.word	-1003934358
+	.word	-1058529059
+	.word	-844417532
+	.word	-915784781
+	.word	-1120555650
+	.word	-1175150391
+	.word	-1263028720
+	.word	-1334395993
+	.word	-1372480606
+	.word	-1427073515
+	.word	-1481408308
+	.word	-1552773765
+	.word	-1690451770
+	.word	-1610822287
+	.word	-1832920152
+	.word	-1770072545
+	.word	-2009467366
+	.word	-1929839699
+	.word	-2118390412
+	.word	-2055544637
+	.word	1569104025
+	.word	1497869614
+	.word	1409596407
+	.word	1355134528
+	.word	1317180997
+	.word	1245944818
+	.word	1191218475
+	.word	1136754844
+	.word	2072956193
+	.word	2135933078
+	.word	1913443919
+	.word	1993202680
+	.word	1753938941
+	.word	1816917578
+	.word	1627971731
+	.word	1707732260
+	.word	295074793
+	.word	358053470
+	.word	403988615
+	.word	483749168
+	.word	43142453
+	.word	106119298
+	.word	185620059
+	.word	265378796
+	.word	933107281
+	.word	861871078
+	.word	1042025791
+	.word	987562120
+	.word	614080653
+	.word	542846266
+	.word	756562915
+	.word	702101076
+	.word	-978905479
+	.word	-1050272818
+	.word	-869987049
+	.word	-924581728
+	.word	-693952347
+	.word	-765317870
+	.word	-551470133
+	.word	-606062980
+	.word	-475038783
+	.word	-412191114
+	.word	-366124881
+	.word	-286495464
+	.word	-257209059
+	.word	-194363222
+	.word	-114731405
+	.word	-35103804
+	.word	-1984443127
+	.word	-1921597250
+	.word	-2143955353
+	.word	-2064327728
+	.word	-1699480619
+	.word	-1636632990
+	.word	-1825447749
+	.word	-1745818356
+	.word	-1346395983
+	.word	-1417761530
+	.word	-1505903649
+	.word	-1560496536
+	.word	-1128556947
+	.word	-1199924262
+	.word	-1254519549
+	.word	-1309114188
+	.bss
+	.align	3
+.LANCHOR0 = . + 0
+.LANCHOR2 = . + 4352
+.LANCHOR4 = . + 8704
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 8
+p_blk_mode_table:
+	.zero	8
+	.type	g_slc2KBNand, %object
+	.size	g_slc2KBNand, 1
+g_slc2KBNand:
+	.zero	1
+	.type	gNandIDBResBlkNum, %object
+	.size	gNandIDBResBlkNum, 1
+gNandIDBResBlkNum:
+	.zero	1
+	.zero	2
+	.type	gBlockPageAlignSize, %object
+	.size	gBlockPageAlignSize, 4
+gBlockPageAlignSize:
+	.zero	4
+	.type	gNandRandomizer, %object
+	.size	gNandRandomizer, 1
+gNandRandomizer:
+	.zero	1
+	.zero	7
+	.type	gNandChipMap, %object
+	.size	gNandChipMap, 64
+gNandChipMap:
+	.zero	64
+	.type	gNandOptPara, %object
+	.size	gNandOptPara, 32
+gNandOptPara:
+	.zero	32
+	.type	gFlashSlcMode, %object
+	.size	gFlashSlcMode, 1
+gFlashSlcMode:
+	.zero	1
+	.zero	7
+	.type	gpNandc, %object
+	.size	gpNandc, 8
+gpNandc:
+	.zero	8
+	.type	NANDC_FMCTL, %object
+	.size	NANDC_FMCTL, 4
+NANDC_FMCTL:
+	.zero	4
+	.type	NANDC_FMWAIT, %object
+	.size	NANDC_FMWAIT, 4
+NANDC_FMWAIT:
+	.zero	4
+	.type	NANDC_FLCTL, %object
+	.size	NANDC_FLCTL, 4
+NANDC_FLCTL:
+	.zero	4
+	.type	NANDC_BCHCTL, %object
+	.size	NANDC_BCHCTL, 4
+NANDC_BCHCTL:
+	.zero	4
+	.type	NANDC_DLL_CTL_REG0, %object
+	.size	NANDC_DLL_CTL_REG0, 4
+NANDC_DLL_CTL_REG0:
+	.zero	4
+	.type	NANDC_DLL_CTL_REG1, %object
+	.size	NANDC_DLL_CTL_REG1, 4
+NANDC_DLL_CTL_REG1:
+	.zero	4
+	.type	NANDC_RANDMZ_CFG, %object
+	.size	NANDC_RANDMZ_CFG, 4
+NANDC_RANDMZ_CFG:
+	.zero	4
+	.type	NANDC_FMWAIT_SYN, %object
+	.size	NANDC_FMWAIT_SYN, 4
+NANDC_FMWAIT_SYN:
+	.zero	4
+	.type	gNandPhyInfo, %object
+	.size	gNandPhyInfo, 28
+gNandPhyInfo:
+	.zero	28
+	.type	slcPageToMlcPageTbl, %object
+	.size	slcPageToMlcPageTbl, 512
+slcPageToMlcPageTbl:
+	.zero	512
+	.type	DieAddrs, %object
+	.size	DieAddrs, 32
+DieAddrs:
+	.zero	32
+	.type	FlashWaitBusyScheduleEn, %object
+	.size	FlashWaitBusyScheduleEn, 4
+FlashWaitBusyScheduleEn:
+	.zero	4
+	.type	gpNandParaInfo, %object
+	.size	gpNandParaInfo, 8
+gpNandParaInfo:
+	.zero	8
+	.type	g_retryMode, %object
+	.size	g_retryMode, 1
+g_retryMode:
+	.zero	1
+	.type	g_maxRegNum, %object
+	.size	g_maxRegNum, 1
+g_maxRegNum:
+	.zero	1
+	.zero	6
+	.type	gReadRetryInfo, %object
+	.size	gReadRetryInfo, 852
+gReadRetryInfo:
+	.zero	852
+	.zero	4
+	.type	read_retry_cur_offset, %object
+	.size	read_retry_cur_offset, 4
+read_retry_cur_offset:
+	.zero	4
+	.type	IDByte, %object
+	.size	IDByte, 32
+IDByte:
+	.zero	32
+	.type	gDieOp, %object
+	.size	gDieOp, 192
+gDieOp:
+	.zero	192
+	.type	gFlashInterfaceMode, %object
+	.size	gFlashInterfaceMode, 1
+gFlashInterfaceMode:
+	.zero	1
+	.type	gNandMaxDie, %object
+	.size	gNandMaxDie, 1
+gNandMaxDie:
+	.zero	1
+	.zero	2
+	.type	DieCsIndex, %object
+	.size	DieCsIndex, 8
+DieCsIndex:
+	.zero	8
+	.type	gFlashToggleModeEn, %object
+	.size	gFlashToggleModeEn, 1
+gFlashToggleModeEn:
+	.zero	1
+	.zero	3
+	.type	gBootDdrMode, %object
+	.size	gBootDdrMode, 4
+gBootDdrMode:
+	.zero	4
+	.type	gNandcVer, %object
+	.size	gNandcVer, 4
+gNandcVer:
+	.zero	4
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.zero	4
+	.type	gMasterTempBuf, %object
+	.size	gMasterTempBuf, 8
+gMasterTempBuf:
+	.zero	8
+	.type	gMasterInfo, %object
+	.size	gMasterInfo, 48
+gMasterInfo:
+	.zero	48
+	.type	gNandcDumpWriteEn, %object
+	.size	gNandcDumpWriteEn, 4
+gNandcDumpWriteEn:
+	.zero	4
+	.type	gNandcEccBits, %object
+	.size	gNandcEccBits, 4
+gNandcEccBits:
+	.zero	4
+	.type	gNandFlashEccBits, %object
+	.size	gNandFlashEccBits, 1
+gNandFlashEccBits:
+	.zero	1
+	.type	gMultiPageProgEn, %object
+	.size	gMultiPageProgEn, 1
+gMultiPageProgEn:
+	.zero	1
+	.zero	2
+	.type	c_ftl_nand_sys_blks_per_plane, %object
+	.size	c_ftl_nand_sys_blks_per_plane, 4
+c_ftl_nand_sys_blks_per_plane:
+	.zero	4
+	.type	c_ftl_nand_planes_num, %object
+	.size	c_ftl_nand_planes_num, 2
+c_ftl_nand_planes_num:
+	.zero	2
+	.zero	2
+	.type	c_ftl_nand_max_sys_blks, %object
+	.size	c_ftl_nand_max_sys_blks, 4
+c_ftl_nand_max_sys_blks:
+	.zero	4
+	.type	c_ftl_nand_data_blks_per_plane, %object
+	.size	c_ftl_nand_data_blks_per_plane, 2
+c_ftl_nand_data_blks_per_plane:
+	.zero	2
+	.type	c_ftl_nand_blk_pre_plane, %object
+	.size	c_ftl_nand_blk_pre_plane, 2
+c_ftl_nand_blk_pre_plane:
+	.zero	2
+	.type	c_ftl_nand_max_data_blks, %object
+	.size	c_ftl_nand_max_data_blks, 4
+c_ftl_nand_max_data_blks:
+	.zero	4
+	.type	c_ftl_nand_totle_phy_blks, %object
+	.size	c_ftl_nand_totle_phy_blks, 4
+c_ftl_nand_totle_phy_blks:
+	.zero	4
+	.type	c_ftl_nand_type, %object
+	.size	c_ftl_nand_type, 2
+c_ftl_nand_type:
+	.zero	2
+	.type	c_ftl_nand_die_num, %object
+	.size	c_ftl_nand_die_num, 2
+c_ftl_nand_die_num:
+	.zero	2
+	.type	c_ftl_nand_planes_per_die, %object
+	.size	c_ftl_nand_planes_per_die, 2
+c_ftl_nand_planes_per_die:
+	.zero	2
+	.zero	6
+	.type	p_plane_order_table, %object
+	.size	p_plane_order_table, 32
+p_plane_order_table:
+	.zero	32
+	.type	c_mlc_erase_count_value, %object
+	.size	c_mlc_erase_count_value, 2
+c_mlc_erase_count_value:
+	.zero	2
+	.type	c_ftl_nand_ext_blk_pre_plane, %object
+	.size	c_ftl_nand_ext_blk_pre_plane, 2
+c_ftl_nand_ext_blk_pre_plane:
+	.zero	2
+	.type	c_ftl_vendor_part_size, %object
+	.size	c_ftl_vendor_part_size, 2
+c_ftl_vendor_part_size:
+	.zero	2
+	.type	c_ftl_nand_blks_per_die, %object
+	.size	c_ftl_nand_blks_per_die, 2
+c_ftl_nand_blks_per_die:
+	.zero	2
+	.type	c_ftl_nand_blks_per_die_shift, %object
+	.size	c_ftl_nand_blks_per_die_shift, 2
+c_ftl_nand_blks_per_die_shift:
+	.zero	2
+	.type	c_ftl_nand_page_pre_blk, %object
+	.size	c_ftl_nand_page_pre_blk, 2
+c_ftl_nand_page_pre_blk:
+	.zero	2
+	.type	c_ftl_nand_page_pre_slc_blk, %object
+	.size	c_ftl_nand_page_pre_slc_blk, 2
+c_ftl_nand_page_pre_slc_blk:
+	.zero	2
+	.type	c_ftl_nand_page_pre_super_blk, %object
+	.size	c_ftl_nand_page_pre_super_blk, 2
+c_ftl_nand_page_pre_super_blk:
+	.zero	2
+	.type	c_ftl_nand_sec_pre_page, %object
+	.size	c_ftl_nand_sec_pre_page, 2
+c_ftl_nand_sec_pre_page:
+	.zero	2
+	.type	c_ftl_nand_sec_pre_page_shift, %object
+	.size	c_ftl_nand_sec_pre_page_shift, 2
+c_ftl_nand_sec_pre_page_shift:
+	.zero	2
+	.type	c_ftl_nand_byte_pre_page, %object
+	.size	c_ftl_nand_byte_pre_page, 2
+c_ftl_nand_byte_pre_page:
+	.zero	2
+	.type	c_ftl_nand_byte_pre_oob, %object
+	.size	c_ftl_nand_byte_pre_oob, 2
+c_ftl_nand_byte_pre_oob:
+	.zero	2
+	.type	c_ftl_nand_reserved_blks, %object
+	.size	c_ftl_nand_reserved_blks, 2
+c_ftl_nand_reserved_blks:
+	.zero	2
+	.zero	2
+	.type	DeviceCapacity, %object
+	.size	DeviceCapacity, 4
+DeviceCapacity:
+	.zero	4
+	.type	c_ftl_nand_max_vendor_blks, %object
+	.size	c_ftl_nand_max_vendor_blks, 2
+c_ftl_nand_max_vendor_blks:
+	.zero	2
+	.type	c_ftl_nand_vendor_region_num, %object
+	.size	c_ftl_nand_vendor_region_num, 2
+c_ftl_nand_vendor_region_num:
+	.zero	2
+	.type	c_ftl_nand_map_blks_per_plane, %object
+	.size	c_ftl_nand_map_blks_per_plane, 2
+c_ftl_nand_map_blks_per_plane:
+	.zero	2
+	.zero	2
+	.type	c_ftl_nand_max_map_blks, %object
+	.size	c_ftl_nand_max_map_blks, 4
+c_ftl_nand_max_map_blks:
+	.zero	4
+	.type	c_ftl_nand_init_sys_blks_per_plane, %object
+	.size	c_ftl_nand_init_sys_blks_per_plane, 4
+c_ftl_nand_init_sys_blks_per_plane:
+	.zero	4
+	.type	c_ftl_nand_map_region_num, %object
+	.size	c_ftl_nand_map_region_num, 2
+c_ftl_nand_map_region_num:
+	.zero	2
+	.type	c_ftl_nand_l2pmap_ram_region_num, %object
+	.size	c_ftl_nand_l2pmap_ram_region_num, 2
+c_ftl_nand_l2pmap_ram_region_num:
+	.zero	2
+	.type	g_MaxLbaSector, %object
+	.size	g_MaxLbaSector, 4
+g_MaxLbaSector:
+	.zero	4
+	.type	g_page_map_check_enable, %object
+	.size	g_page_map_check_enable, 2
+g_page_map_check_enable:
+	.zero	2
+	.type	g_totle_vendor_block, %object
+	.size	g_totle_vendor_block, 2
+g_totle_vendor_block:
+	.zero	2
+	.zero	4
+	.type	p_vendor_block_table, %object
+	.size	p_vendor_block_table, 8
+p_vendor_block_table:
+	.zero	8
+	.type	g_wr_page_num, %object
+	.size	g_wr_page_num, 4
+g_wr_page_num:
+	.zero	4
+	.zero	4
+	.type	req_wr_io, %object
+	.size	req_wr_io, 8
+req_wr_io:
+	.zero	8
+	.type	g_MaxLpn, %object
+	.size	g_MaxLpn, 4
+g_MaxLpn:
+	.zero	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.zero	4
+	.type	gBbtInfo, %object
+	.size	gBbtInfo, 96
+gBbtInfo:
+	.zero	96
+	.type	gSysFreeQueue, %object
+	.size	gSysFreeQueue, 2056
+gSysFreeQueue:
+	.zero	2056
+	.type	g_flash_read_only_en, %object
+	.size	g_flash_read_only_en, 4
+g_flash_read_only_en:
+	.zero	4
+	.zero	4
+	.type	req_erase, %object
+	.size	req_erase, 8
+req_erase:
+	.zero	8
+	.type	p_erase_count_table, %object
+	.size	p_erase_count_table, 8
+p_erase_count_table:
+	.zero	8
+	.type	g_totle_sys_slc_erase_count, %object
+	.size	g_totle_sys_slc_erase_count, 4
+g_totle_sys_slc_erase_count:
+	.zero	4
+	.zero	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 8
+p_sys_data_buf:
+	.zero	8
+	.type	p_data_block_list_table, %object
+	.size	p_data_block_list_table, 8
+p_data_block_list_table:
+	.zero	8
+	.type	p_data_block_list_head, %object
+	.size	p_data_block_list_head, 8
+p_data_block_list_head:
+	.zero	8
+	.type	p_valid_page_count_table, %object
+	.size	p_valid_page_count_table, 8
+p_valid_page_count_table:
+	.zero	8
+	.type	p_data_block_list_tail, %object
+	.size	p_data_block_list_tail, 8
+p_data_block_list_tail:
+	.zero	8
+	.type	g_num_data_superblocks, %object
+	.size	g_num_data_superblocks, 2
+g_num_data_superblocks:
+	.zero	2
+	.zero	6
+	.type	p_free_data_block_list_head, %object
+	.size	p_free_data_block_list_head, 8
+p_free_data_block_list_head:
+	.zero	8
+	.type	g_num_free_superblocks, %object
+	.size	g_num_free_superblocks, 2
+g_num_free_superblocks:
+	.zero	2
+	.zero	6
+	.type	g_active_superblock, %object
+	.size	g_active_superblock, 48
+g_active_superblock:
+	.zero	48
+	.type	g_buffer_superblock, %object
+	.size	g_buffer_superblock, 48
+g_buffer_superblock:
+	.zero	48
+	.type	g_gc_temp_superblock, %object
+	.size	g_gc_temp_superblock, 48
+g_gc_temp_superblock:
+	.zero	48
+	.type	p_l2p_ram_map, %object
+	.size	p_l2p_ram_map, 8
+p_l2p_ram_map:
+	.zero	8
+	.type	g_l2p_last_update_region_id, %object
+	.size	g_l2p_last_update_region_id, 2
+g_l2p_last_update_region_id:
+	.zero	2
+	.type	FtlUpdateVaildLpnCount, %object
+	.size	FtlUpdateVaildLpnCount, 2
+FtlUpdateVaildLpnCount:
+	.zero	2
+	.type	g_VaildLpn, %object
+	.size	g_VaildLpn, 4
+g_VaildLpn:
+	.zero	4
+	.type	g_inkDie_check_enable, %object
+	.size	g_inkDie_check_enable, 4
+g_inkDie_check_enable:
+	.zero	4
+	.type	g_totle_read_page_count, %object
+	.size	g_totle_read_page_count, 4
+g_totle_read_page_count:
+	.zero	4
+	.type	g_totle_discard_page_count, %object
+	.size	g_totle_discard_page_count, 4
+g_totle_discard_page_count:
+	.zero	4
+	.type	g_totle_write_page_count, %object
+	.size	g_totle_write_page_count, 4
+g_totle_write_page_count:
+	.zero	4
+	.type	g_totle_cache_write_count, %object
+	.size	g_totle_cache_write_count, 4
+g_totle_cache_write_count:
+	.zero	4
+	.type	g_totle_l2p_write_count, %object
+	.size	g_totle_l2p_write_count, 4
+g_totle_l2p_write_count:
+	.zero	4
+	.type	g_totle_gc_page_count, %object
+	.size	g_totle_gc_page_count, 4
+g_totle_gc_page_count:
+	.zero	4
+	.type	g_totle_write_sector, %object
+	.size	g_totle_write_sector, 4
+g_totle_write_sector:
+	.zero	4
+	.type	g_totle_read_sector, %object
+	.size	g_totle_read_sector, 4
+g_totle_read_sector:
+	.zero	4
+	.type	g_GlobalSysVersion, %object
+	.size	g_GlobalSysVersion, 4
+g_GlobalSysVersion:
+	.zero	4
+	.type	g_GlobalDataVersion, %object
+	.size	g_GlobalDataVersion, 4
+g_GlobalDataVersion:
+	.zero	4
+	.type	g_totle_mlc_erase_count, %object
+	.size	g_totle_mlc_erase_count, 4
+g_totle_mlc_erase_count:
+	.zero	4
+	.type	g_totle_slc_erase_count, %object
+	.size	g_totle_slc_erase_count, 4
+g_totle_slc_erase_count:
+	.zero	4
+	.type	g_totle_avg_erase_count, %object
+	.size	g_totle_avg_erase_count, 4
+g_totle_avg_erase_count:
+	.zero	4
+	.type	g_max_erase_count, %object
+	.size	g_max_erase_count, 4
+g_max_erase_count:
+	.zero	4
+	.type	g_min_erase_count, %object
+	.size	g_min_erase_count, 4
+g_min_erase_count:
+	.zero	4
+	.type	g_sys_save_data, %object
+	.size	g_sys_save_data, 48
+g_sys_save_data:
+	.zero	48
+	.type	c_ftl_nand_data_op_blks_per_plane, %object
+	.size	c_ftl_nand_data_op_blks_per_plane, 2
+c_ftl_nand_data_op_blks_per_plane:
+	.zero	2
+	.zero	6
+	.type	gSysInfo, %object
+	.size	gSysInfo, 12
+gSysInfo:
+	.zero	12
+	.zero	4
+	.type	g_gc_superblock, %object
+	.size	g_gc_superblock, 48
+g_gc_superblock:
+	.zero	48
+	.type	g_all_blk_used_slc_mode, %object
+	.size	g_all_blk_used_slc_mode, 4
+g_all_blk_used_slc_mode:
+	.zero	4
+	.zero	4
+	.type	g_sys_ext_data, %object
+	.size	g_sys_ext_data, 512
+g_sys_ext_data:
+	.zero	512
+	.type	g_gc_free_blk_threshold, %object
+	.size	g_gc_free_blk_threshold, 2
+g_gc_free_blk_threshold:
+	.zero	2
+	.type	g_gc_merge_free_blk_threshold, %object
+	.size	g_gc_merge_free_blk_threshold, 2
+g_gc_merge_free_blk_threshold:
+	.zero	2
+	.type	g_gc_skip_write_count, %object
+	.size	g_gc_skip_write_count, 4
+g_gc_skip_write_count:
+	.zero	4
+	.type	g_gc_blk_index, %object
+	.size	g_gc_blk_index, 2
+g_gc_blk_index:
+	.zero	2
+	.zero	2
+	.type	g_in_swl_replace, %object
+	.size	g_in_swl_replace, 4
+g_in_swl_replace:
+	.zero	4
+	.type	g_gc_num_req, %object
+	.size	g_gc_num_req, 4
+g_gc_num_req:
+	.zero	4
+	.zero	4
+	.type	gp_gc_page_buf_info, %object
+	.size	gp_gc_page_buf_info, 8
+gp_gc_page_buf_info:
+	.zero	8
+	.type	p_gc_data_buf, %object
+	.size	p_gc_data_buf, 8
+p_gc_data_buf:
+	.zero	8
+	.type	p_gc_spare_buf, %object
+	.size	p_gc_spare_buf, 8
+p_gc_spare_buf:
+	.zero	8
+	.type	req_gc, %object
+	.size	req_gc, 8
+req_gc:
+	.zero	8
+	.type	c_gc_page_buf_num, %object
+	.size	c_gc_page_buf_num, 4
+c_gc_page_buf_num:
+	.zero	4
+	.type	g_gc_blk_num, %object
+	.size	g_gc_blk_num, 2
+g_gc_blk_num:
+	.zero	2
+	.zero	2
+	.type	p_gc_blk_tbl, %object
+	.size	p_gc_blk_tbl, 8
+p_gc_blk_tbl:
+	.zero	8
+	.type	g_gc_page_offset, %object
+	.size	g_gc_page_offset, 2
+g_gc_page_offset:
+	.zero	2
+	.zero	6
+	.type	p_gc_page_info, %object
+	.size	p_gc_page_info, 8
+p_gc_page_info:
+	.zero	8
+	.type	g_gc_next_blk, %object
+	.size	g_gc_next_blk, 2
+g_gc_next_blk:
+	.zero	2
+	.type	g_gc_next_blk_1, %object
+	.size	g_gc_next_blk_1, 2
+g_gc_next_blk_1:
+	.zero	2
+	.type	g_gc_bad_block_temp_num, %object
+	.size	g_gc_bad_block_temp_num, 2
+g_gc_bad_block_temp_num:
+	.zero	2
+	.zero	2
+	.type	g_gc_bad_block_temp_tbl, %object
+	.size	g_gc_bad_block_temp_tbl, 34
+g_gc_bad_block_temp_tbl:
+	.zero	34
+	.type	g_gc_bad_block_gc_index, %object
+	.size	g_gc_bad_block_gc_index, 2
+g_gc_bad_block_gc_index:
+	.zero	2
+	.type	mlcPageToSlcPageTbl, %object
+	.size	mlcPageToSlcPageTbl, 1024
+mlcPageToSlcPageTbl:
+	.zero	1024
+	.type	gNandMaxChip, %object
+	.size	gNandMaxChip, 1
+gNandMaxChip:
+	.zero	1
+	.zero	1
+	.type	gTotleBlock, %object
+	.size	gTotleBlock, 2
+gTotleBlock:
+	.zero	2
+	.type	g_free_slc_blk_num, %object
+	.size	g_free_slc_blk_num, 2
+g_free_slc_blk_num:
+	.zero	2
+	.zero	2
+	.type	g_SlcPartLbaEndSector, %object
+	.size	g_SlcPartLbaEndSector, 4
+g_SlcPartLbaEndSector:
+	.zero	4
+	.type	g_in_gc_progress, %object
+	.size	g_in_gc_progress, 4
+g_in_gc_progress:
+	.zero	4
+	.type	g_gc_head_data_block, %object
+	.size	g_gc_head_data_block, 4
+g_gc_head_data_block:
+	.zero	4
+	.type	g_gc_head_data_block_count, %object
+	.size	g_gc_head_data_block_count, 4
+g_gc_head_data_block_count:
+	.zero	4
+	.type	g_gc_refresh_block_temp_num, %object
+	.size	g_gc_refresh_block_temp_num, 2
+g_gc_refresh_block_temp_num:
+	.zero	2
+	.zero	2
+	.type	c_wr_page_buf_num, %object
+	.size	c_wr_page_buf_num, 4
+c_wr_page_buf_num:
+	.zero	4
+	.zero	4
+	.type	req_read, %object
+	.size	req_read, 8
+req_read:
+	.zero	8
+	.type	req_gc_dst, %object
+	.size	req_gc_dst, 8
+req_gc_dst:
+	.zero	8
+	.type	req_prgm, %object
+	.size	req_prgm, 8
+req_prgm:
+	.zero	8
+	.type	p_sys_data_buf_1, %object
+	.size	p_sys_data_buf_1, 8
+p_sys_data_buf_1:
+	.zero	8
+	.type	p_vendor_data_buf, %object
+	.size	p_vendor_data_buf, 8
+p_vendor_data_buf:
+	.zero	8
+	.type	p_wr_io_data_buf, %object
+	.size	p_wr_io_data_buf, 8
+p_wr_io_data_buf:
+	.zero	8
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 8
+p_io_data_buf_0:
+	.zero	8
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 8
+p_io_data_buf_1:
+	.zero	8
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 8
+p_sys_spare_buf:
+	.zero	8
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 8
+p_io_spare_buf:
+	.zero	8
+	.type	p_wr_io_spare_buf, %object
+	.size	p_wr_io_spare_buf, 8
+p_wr_io_spare_buf:
+	.zero	8
+	.type	g_ect_tbl_info_size, %object
+	.size	g_ect_tbl_info_size, 2
+g_ect_tbl_info_size:
+	.zero	2
+	.zero	6
+	.type	p_swl_mul_table, %object
+	.size	p_swl_mul_table, 8
+p_swl_mul_table:
+	.zero	8
+	.type	gp_ect_tbl_info, %object
+	.size	gp_ect_tbl_info, 8
+gp_ect_tbl_info:
+	.zero	8
+	.type	p_valid_page_count_check_table, %object
+	.size	p_valid_page_count_check_table, 8
+p_valid_page_count_check_table:
+	.zero	8
+	.type	p_map_block_table, %object
+	.size	p_map_block_table, 8
+p_map_block_table:
+	.zero	8
+	.type	p_map_block_valid_page_count, %object
+	.size	p_map_block_valid_page_count, 8
+p_map_block_valid_page_count:
+	.zero	8
+	.type	p_vendor_block_valid_page_count, %object
+	.size	p_vendor_block_valid_page_count, 8
+p_vendor_block_valid_page_count:
+	.zero	8
+	.type	p_vendor_block_ver_table, %object
+	.size	p_vendor_block_ver_table, 8
+p_vendor_block_ver_table:
+	.zero	8
+	.type	p_vendor_region_ppn_table, %object
+	.size	p_vendor_region_ppn_table, 8
+p_vendor_region_ppn_table:
+	.zero	8
+	.type	p_map_region_ppn_table, %object
+	.size	p_map_region_ppn_table, 8
+p_map_region_ppn_table:
+	.zero	8
+	.type	p_map_region_ppn_check_table, %object
+	.size	p_map_region_ppn_check_table, 8
+p_map_region_ppn_check_table:
+	.zero	8
+	.type	p_map_block_ver_table, %object
+	.size	p_map_block_ver_table, 8
+p_map_block_ver_table:
+	.zero	8
+	.type	p_l2p_map_buf, %object
+	.size	p_l2p_map_buf, 8
+p_l2p_map_buf:
+	.zero	8
+	.type	c_ftl_nand_bbm_buf_size, %object
+	.size	c_ftl_nand_bbm_buf_size, 2
+c_ftl_nand_bbm_buf_size:
+	.zero	2
+	.zero	6
+	.type	gL2pMapInfo, %object
+	.size	gL2pMapInfo, 64
+gL2pMapInfo:
+	.zero	64
+	.type	g_totle_map_block, %object
+	.size	g_totle_map_block, 2
+g_totle_map_block:
+	.zero	2
+	.zero	6
+	.type	g_req_cache, %object
+	.size	g_req_cache, 8
+g_req_cache:
+	.zero	8
+	.type	g_tmp_data_superblock_id, %object
+	.size	g_tmp_data_superblock_id, 2
+g_tmp_data_superblock_id:
+	.zero	2
+	.zero	2
+	.type	g_totle_swl_count, %object
+	.size	g_totle_swl_count, 4
+g_totle_swl_count:
+	.zero	4
+	.type	ftl_gc_temp_power_lost_recovery_flag, %object
+	.size	ftl_gc_temp_power_lost_recovery_flag, 4
+ftl_gc_temp_power_lost_recovery_flag:
+	.zero	4
+	.type	g_recovery_page_min_ver, %object
+	.size	g_recovery_page_min_ver, 4
+g_recovery_page_min_ver:
+	.zero	4
+	.type	gNandIDataBuf, %object
+	.size	gNandIDataBuf, 2048
+gNandIDataBuf:
+	.zero	2048
+	.type	RK29_NANDC_REG_BASE, %object
+	.size	RK29_NANDC_REG_BASE, 8
+RK29_NANDC_REG_BASE:
+	.zero	8
+	.type	gFlashPageBuffer0, %object
+	.size	gFlashPageBuffer0, 8
+gFlashPageBuffer0:
+	.zero	8
+	.type	FlashDdrTunningReadCount, %object
+	.size	FlashDdrTunningReadCount, 4
+FlashDdrTunningReadCount:
+	.zero	4
+	.zero	4
+	.type	gpReadRetrial, %object
+	.size	gpReadRetrial, 8
+gpReadRetrial:
+	.zero	8
+	.type	gpFlashSaveInfo, %object
+	.size	gpFlashSaveInfo, 8
+gpFlashSaveInfo:
+	.zero	8
+	.type	gNandFlashInfoBlockAddr, %object
+	.size	gNandFlashInfoBlockAddr, 4
+gNandFlashInfoBlockAddr:
+	.zero	4
+	.type	gNandFlashIdbBlockAddr, %object
+	.size	gNandFlashIdbBlockAddr, 4
+gNandFlashIdbBlockAddr:
+	.zero	4
+	.type	gNandIDBResBlkNumSaveInFlash, %object
+	.size	gNandIDBResBlkNumSaveInFlash, 1
+gNandIDBResBlkNumSaveInFlash:
+	.zero	1
+	.type	g_maxRetryCount, %object
+	.size	g_maxRetryCount, 1
+g_maxRetryCount:
+	.zero	1
+	.type	gNandFlashIDBEccBits, %object
+	.size	gNandFlashIDBEccBits, 1
+gNandFlashIDBEccBits:
+	.zero	1
+	.zero	5
+	.type	gFlashPageBuffer1, %object
+	.size	gFlashPageBuffer1, 8
+gFlashPageBuffer1:
+	.zero	8
+	.type	gFlashSpareBuffer, %object
+	.size	gFlashSpareBuffer, 8
+gFlashSpareBuffer:
+	.zero	8
+	.type	gFlashProgCheckBuffer, %object
+	.size	gFlashProgCheckBuffer, 8
+gFlashProgCheckBuffer:
+	.zero	8
+	.type	gFlashProgCheckSpareBuffer, %object
+	.size	gFlashProgCheckSpareBuffer, 8
+gFlashProgCheckSpareBuffer:
+	.zero	8
+	.type	gMultiPageReadEn, %object
+	.size	gMultiPageReadEn, 1
+gMultiPageReadEn:
+	.zero	1
+	.zero	7
+	.type	FbbtBlk, %object
+	.size	FbbtBlk, 16
+FbbtBlk:
+	.zero	16
+	.type	req_sys, %object
+	.size	req_sys, 56
+req_sys:
+	.zero	56
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.zero	4
+	.zero	4
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 64
+gVendorBlkInfo:
+	.zero	64
+	.type	g_ect_tbl_power_up_flush, %object
+	.size	g_ect_tbl_power_up_flush, 2
+g_ect_tbl_power_up_flush:
+	.zero	2
+	.type	g_power_lost_ecc_error_blk, %object
+	.size	g_power_lost_ecc_error_blk, 2
+g_power_lost_ecc_error_blk:
+	.zero	2
+	.type	g_power_lost_recovery_flag, %object
+	.size	g_power_lost_recovery_flag, 2
+g_power_lost_recovery_flag:
+	.zero	2
+	.zero	2
+	.type	g_recovery_page_num, %object
+	.size	g_recovery_page_num, 4
+g_recovery_page_num:
+	.zero	4
+	.zero	4
+	.type	g_recovery_ppa_tbl, %object
+	.size	g_recovery_ppa_tbl, 128
+g_recovery_ppa_tbl:
+	.zero	128
+	.type	gc_ink_free_return_value, %object
+	.size	gc_ink_free_return_value, 2
+gc_ink_free_return_value:
+	.zero	2
+	.type	g_gc_cur_blk_valid_pages, %object
+	.size	g_gc_cur_blk_valid_pages, 2
+g_gc_cur_blk_valid_pages:
+	.zero	2
+	.type	g_gc_cur_blk_max_valid_pages, %object
+	.size	g_gc_cur_blk_max_valid_pages, 2
+g_gc_cur_blk_max_valid_pages:
+	.zero	2
+	.zero	2
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 8
+gp_last_act_superblock:
+	.zero	8
+	.type	gc_discard_updated, %object
+	.size	gc_discard_updated, 4
+gc_discard_updated:
+	.zero	4
+	.type	g_LowFormat, %object
+	.size	g_LowFormat, 4
+g_LowFormat:
+	.zero	4
+	.type	gLoaderBootInfo, %object
+	.size	gLoaderBootInfo, 8
+gLoaderBootInfo:
+	.zero	8
+	.type	RK29_NANDC1_REG_BASE, %object
+	.size	RK29_NANDC1_REG_BASE, 8
+RK29_NANDC1_REG_BASE:
+	.zero	8
+	.type	g_ftl_nand_free_count, %object
+	.size	g_ftl_nand_free_count, 4
+g_ftl_nand_free_count:
+	.zero	4
+	.type	last_cache_match_count, %object
+	.size	last_cache_match_count, 4
+last_cache_match_count:
+	.zero	4
+	.type	g_idb_buffer, %object
+	.size	g_idb_buffer, 8
+g_idb_buffer:
+	.zero	8
+	.type	gpDrmKeyInfo, %object
+	.size	gpDrmKeyInfo, 8
+gpDrmKeyInfo:
+	.zero	8
+	.type	SecureBootCheckOK, %object
+	.size	SecureBootCheckOK, 4
+SecureBootCheckOK:
+	.zero	4
+	.type	SecureBootEn, %object
+	.size	SecureBootEn, 4
+SecureBootEn:
+	.zero	4
+	.type	gpBootConfig, %object
+	.size	gpBootConfig, 8
+gpBootConfig:
+	.zero	8
+	.type	gSnSectorData, %object
+	.size	gSnSectorData, 512
+gSnSectorData:
+	.zero	512
+	.type	SecureBootUnlockTryCount, %object
+	.size	SecureBootUnlockTryCount, 4
+SecureBootUnlockTryCount:
+	.zero	4
+	.zero	4
+	.type	gpVendor0Info, %object
+	.size	gpVendor0Info, 8
+gpVendor0Info:
+	.zero	8
+	.type	gpVendor1Info, %object
+	.size	gpVendor1Info, 8
+gpVendor1Info:
+	.zero	8
+	.type	g_vendor, %object
+	.size	g_vendor, 8
+g_vendor:
+	.zero	8
+	.type	g_gc_refresh_block_temp_tbl, %object
+	.size	g_gc_refresh_block_temp_tbl, 34
+g_gc_refresh_block_temp_tbl:
+	.zero	34
+	.zero	2
+	.type	gToggleModeClkDiv, %object
+	.size	gToggleModeClkDiv, 4
+gToggleModeClkDiv:
+	.zero	4
+	.type	gpNandc1, %object
+	.size	gpNandc1, 8
+gpNandc1:
+	.zero	8
+	.type	gNandFlashResEndPageAddr, %object
+	.size	gNandFlashResEndPageAddr, 4
+gNandFlashResEndPageAddr:
+	.zero	4
+	.type	gNandFlashInfoBlockEcc, %object
+	.size	gNandFlashInfoBlockEcc, 1
+gNandFlashInfoBlockEcc:
+	.zero	1
+	.type	gFlashOnfiModeEn, %object
+	.size	gFlashOnfiModeEn, 1
+gFlashOnfiModeEn:
+	.zero	1
+	.type	gFlashSdrModeEn, %object
+	.size	gFlashSdrModeEn, 1
+gFlashSdrModeEn:
+	.zero	1
diff --git a/drivers/rk_nand/rk_ftlv5_arm64.S b/drivers/rk_nand/rk_ftlv5_arm64.S
new file mode 100644
index 000000000000..2d3c0a2af3e9
--- /dev/null
+++ b/drivers/rk_nand/rk_ftlv5_arm64.S
@@ -0,0 +1,23379 @@
+/*
+ * Copyright (c) 2016-2017, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * date: 2018-04-08
+ * function: rk ftl v5 for rockchip soc base on arm v8 to support MLC NAND.
+ */
+	.cpu generic+fp+simd
+	.file	"rk_ftlv5_arm_v8.S"
+#APP
+	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\
+		,18,19,20,21,22,23,24,25,26,27,28,29,30
+	.equ	.L__reg_num_x\num, \num
+	.endr
+	.equ	.L__reg_num_xzr, 31
+
+	.macro	mrs_s, rt, sreg
+	.inst	0xd5200000|(\sreg)|(.L__reg_num_\rt)
+	.endm
+
+	.macro	msr_s, sreg, rt
+	.inst	0xd5000000|(\sreg)|(.L__reg_num_\rt)
+	.endm
+
+#NO_APP
+	.text
+	.align	2
+	.type	FlashReadFacBbtData.part.6, %function
+FlashReadFacBbtData.part.6:
+	stp	x29, x30, [sp, -32]!
+	mov	w3, 0
+	adrp	x5, .LANCHOR0
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w7, 1
+	mov	x19, x0
+	cbnz	w1, .L4
+.L6:
+	add	x0, x5, :lo12:.LANCHOR0
+	ldr	w0, [x0,8]
+	cmp	w3, w0
+	bcs	.L4
+	ubfx	x4, x3, 5, 11
+	ldr	x0, [x5,#:lo12:.LANCHOR0]
+	lsl	x4, x4, 2
+	lsl	w6, w7, w3
+	add	w3, w3, 1
+	ldr	w1, [x0,x4]
+	uxth	w3, w3
+	orr	w6, w1, w6
+	str	w6, [x0,x4]
+	b	.L6
+.L4:
+	ldr	x1, [x5,#:lo12:.LANCHOR0]
+	mov	x0, x19
+	bl	ftl_memcpy
+	mov	w2, 4
+	adrp	x0, .LC0
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC0
+	mov	w3, w2
+	bl	rknand_print_hex
+	ldr	x19, [sp,16]
+	mov	w0, 0
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FlashReadFacBbtData.part.6, .-FlashReadFacBbtData.part.6
+	.align	2
+	.type	ftl_set_blk_mode.part.17, %function
+ftl_set_blk_mode.part.17:
+	adrp	x1, .LANCHOR0+16
+	uxth	w0, w0
+	ubfx	x2, x0, 5, 11
+	lsl	x2, x2, 2
+	ldr	x3, [x1,#:lo12:.LANCHOR0+16]
+	mov	w1, 1
+	lsl	w0, w1, w0
+	ldr	w1, [x3,x2]
+	orr	w0, w1, w0
+	str	w0, [x3,x2]
+	ret
+	.size	ftl_set_blk_mode.part.17, .-ftl_set_blk_mode.part.17
+	.align	2
+	.global	FlashMemCmp8
+	.type	FlashMemCmp8, %function
+FlashMemCmp8:
+	mov	x5, x0
+	adrp	x0, .LANCHOR0+24
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+24]
+	cbz	w0, .L15
+	ldrb	w4, [x5,1]
+	mov	w0, 0
+	ldrb	w3, [x1,1]
+	cmp	w4, w3
+	beq	.L12
+.L15:
+	mov	x3, 0
+.L13:
+	cmp	w3, w2
+	mov	w4, w3
+	bcs	.L18
+	ldrb	w0, [x5,x3]
+	add	x3, x3, 1
+	add	x6, x1, x3
+	ldrb	w6, [x6,-1]
+	cmp	w6, w0
+	beq	.L13
+	add	w0, w4, 1
+	b	.L12
+.L18:
+	mov	w0, 0
+.L12:
+	ret
+	.size	FlashMemCmp8, .-FlashMemCmp8
+	.align	2
+	.global	FlashRsvdBlkChk
+	.type	FlashRsvdBlkChk, %function
+FlashRsvdBlkChk:
+	adrp	x2, .LANCHOR0
+	uxtb	w0, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	ldrb	w3, [x2,25]
+	ldr	w2, [x2,28]
+	mul	w2, w3, w2
+	cmp	w1, w2
+	cset	w1, cc
+	cmp	w0, wzr
+	cset	w0, eq
+	and	w0, w1, w0
+	eor	w0, w0, 1
+	ret
+	.size	FlashRsvdBlkChk, .-FlashRsvdBlkChk
+	.align	2
+	.global	FlashGetRandomizer
+	.type	FlashGetRandomizer, %function
+FlashGetRandomizer:
+	stp	x29, x30, [sp, -32]!
+	adrp	x2, .LANCHOR1
+	and	w3, w1, 127
+	add	x2, x2, :lo12:.LANCHOR1
+	add	x29, sp, 0
+	uxtb	w0, w0
+	str	x19, [sp,16]
+	ldrh	w19, [x2,w3,uxtw 1]
+	adrp	x2, .LANCHOR0+32
+	ldrb	w2, [x2,#:lo12:.LANCHOR0+32]
+	cbz	w2, .L21
+	bl	FlashRsvdBlkChk
+	cmp	w0, wzr
+	orr	w1, w19, -1073741824
+	csel	w19, w1, w19, ne
+.L21:
+	mov	w0, w19
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FlashGetRandomizer, .-FlashGetRandomizer
+	.align	2
+	.global	FlashSetRandomizer
+	.type	FlashSetRandomizer, %function
+FlashSetRandomizer:
+	stp	x29, x30, [sp, -48]!
+	and	w2, w1, 127
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	uxtb	w21, w0
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	stp	x19, x20, [sp,16]
+	ldrh	w20, [x0,w2,uxtw 1]
+	adrp	x2, .LANCHOR0
+	add	x0, x2, :lo12:.LANCHOR0
+	mov	x19, x2
+	ldrb	w0, [x0,32]
+	cbz	w0, .L28
+	mov	w0, w21
+	bl	FlashRsvdBlkChk
+	cmp	w0, wzr
+	orr	w1, w20, -1073741824
+	csel	w20, w1, w20, ne
+.L28:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x2, x2, x21, sxtw 4
+	ldr	x0, [x2,40]
+	str	w20, [x0,336]
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashSetRandomizer, .-FlashSetRandomizer
+	.align	2
+	.global	FlashReadCmd
+	.type	FlashReadCmd, %function
+FlashReadCmd:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x5, x0, 4, 32
+	add	x3, x3, 40
+	lsr	w4, w1, 16
+	add	x2, x3, x5
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w2, [x2,8]
+	ldr	x3, [x3,x5]
+	add	x2, x3, x2, lsl 8
+	and	w3, w1, 255
+	str	wzr, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w3, [x2,2052]
+	lsr	w3, w1, 8
+	str	w3, [x2,2052]
+	mov	w3, 48
+	str	w4, [x2,2052]
+	str	w3, [x2,2056]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashReadCmd, .-FlashReadCmd
+	.align	2
+	.global	FlashReadDpDataOutCmd
+	.type	FlashReadDpDataOutCmd, %function
+FlashReadDpDataOutCmd:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x2, x0, 4, 32
+	add	x4, x3, 40
+	stp	x29, x30, [sp, -16]!
+	add	x5, x4, x2
+	add	x29, sp, 0
+	ldr	x6, [x4,x2]
+	lsr	w4, w1, 8
+	ldrb	w2, [x3,120]
+	lsr	w3, w1, 16
+	cmp	w2, 1
+	ldrb	w2, [x5,8]
+	and	w5, w1, 255
+	add	x2, x6, x2, lsl 8
+	bne	.L36
+	mov	w6, 6
+	str	w6, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w5, [x2,2052]
+	str	w4, [x2,2052]
+	str	w3, [x2,2052]
+	b	.L38
+.L36:
+	str	wzr, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w5, [x2,2052]
+	str	w4, [x2,2052]
+	str	w3, [x2,2052]
+	mov	w3, 5
+	str	w3, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+.L38:
+	mov	w3, 224
+	str	w3, [x2,2056]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashReadDpDataOutCmd, .-FlashReadDpDataOutCmd
+	.align	2
+	.global	flash_enter_slc_mode
+	.type	flash_enter_slc_mode, %function
+flash_enter_slc_mode:
+	adrp	x1, .LANCHOR0
+	uxtb	w0, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrb	w2, [x1,136]
+	cbz	w2, .L39
+	sbfiz	x0, x0, 4, 32
+	add	x1, x1, 40
+	add	x2, x1, x0
+	ldr	x1, [x1,x0]
+	ldrb	w0, [x2,8]
+	add	x0, x0, 8
+	add	x0, x1, x0, lsl 8
+	mov	w1, 218
+	str	w1, [x0,8]
+.L39:
+	ret
+	.size	flash_enter_slc_mode, .-flash_enter_slc_mode
+	.align	2
+	.global	flash_exit_slc_mode
+	.type	flash_exit_slc_mode, %function
+flash_exit_slc_mode:
+	adrp	x1, .LANCHOR0
+	uxtb	w0, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrb	w2, [x1,136]
+	cbz	w2, .L44
+	sbfiz	x0, x0, 4, 32
+	add	x1, x1, 40
+	add	x2, x1, x0
+	ldr	x1, [x1,x0]
+	ldrb	w0, [x2,8]
+	add	x0, x0, 8
+	add	x0, x1, x0, lsl 8
+	mov	w1, 223
+	str	w1, [x0,8]
+.L44:
+	ret
+	.size	flash_exit_slc_mode, .-flash_exit_slc_mode
+	.align	2
+	.global	FlashProgFirstCmd
+	.type	FlashProgFirstCmd, %function
+FlashProgFirstCmd:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x5, x0, 4, 32
+	add	x3, x3, 40
+	lsr	w4, w1, 16
+	add	x2, x3, x5
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w2, [x2,8]
+	ldr	x3, [x3,x5]
+	add	x2, x3, x2, lsl 8
+	mov	w3, 128
+	str	w3, [x2,2056]
+	and	w3, w1, 255
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w3, [x2,2052]
+	lsr	w3, w1, 8
+	str	w3, [x2,2052]
+	str	w4, [x2,2052]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashProgFirstCmd, .-FlashProgFirstCmd
+	.align	2
+	.global	FlashEraseCmd
+	.type	FlashEraseCmd, %function
+FlashEraseCmd:
+	adrp	x3, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x3, x3, :lo12:.LANCHOR0
+	add	x4, x3, 40
+	add	x5, x4, x0
+	ldr	x4, [x4,x0]
+	ldrb	w0, [x5,8]
+	cbz	w2, .L51
+	add	x2, x4, x0, lsl 8
+	mov	w5, 96
+	str	w5, [x2,2056]
+	and	w5, w1, 255
+	str	w5, [x2,2052]
+	lsr	w5, w1, 8
+	str	w5, [x2,2052]
+	lsr	w5, w1, 16
+	str	w5, [x2,2052]
+	ldr	w2, [x3,28]
+	add	w1, w1, w2
+.L51:
+	add	x0, x4, x0, lsl 8
+	mov	w2, 96
+	str	w2, [x0,2056]
+	and	w2, w1, 255
+	str	w2, [x0,2052]
+	lsr	w2, w1, 8
+	str	w2, [x0,2052]
+	lsr	w1, w1, 16
+	str	w1, [x0,2052]
+	mov	w1, 208
+	str	w1, [x0,2056]
+	ret
+	.size	FlashEraseCmd, .-FlashEraseCmd
+	.align	2
+	.global	FlashProgDpSecondCmd
+	.type	FlashProgDpSecondCmd, %function
+FlashProgDpSecondCmd:
+	adrp	x2, .LANCHOR0
+	uxtb	w0, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	sbfiz	x4, x0, 4, 32
+	add	x5, x2, 40
+	lsr	w3, w1, 16
+	add	x7, x5, x4
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w6, [x2,115]
+	ldrb	w2, [x7,8]
+	ldr	x4, [x5,x4]
+	add	x2, x4, x2, lsl 8
+	and	w4, w1, 255
+	str	w6, [x2,2056]
+	str	wzr, [x2,2052]
+	str	wzr, [x2,2052]
+	str	w4, [x2,2052]
+	lsr	w4, w1, 8
+	str	w4, [x2,2052]
+	str	w3, [x2,2052]
+	bl	FlashSetRandomizer
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashProgDpSecondCmd, .-FlashProgDpSecondCmd
+	.align	2
+	.global	FlashProgSecondCmd
+	.type	FlashProgSecondCmd, %function
+FlashProgSecondCmd:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 40
+	add	x2, x1, x0
+	ldr	x1, [x1,x0]
+	ldrb	w0, [x2,8]
+	add	x0, x0, 8
+	add	x0, x1, x0, lsl 8
+	mov	w1, 16
+	str	w1, [x0,8]
+	ret
+	.size	FlashProgSecondCmd, .-FlashProgSecondCmd
+	.align	2
+	.global	FlashProgDpFirstCmd
+	.type	FlashProgDpFirstCmd, %function
+FlashProgDpFirstCmd:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x2, x1, 40
+	add	x3, x2, x0
+	ldrb	w1, [x1,114]
+	ldr	x2, [x2,x0]
+	ldrb	w0, [x3,8]
+	add	x0, x0, 8
+	add	x0, x2, x0, lsl 8
+	str	w1, [x0,8]
+	ret
+	.size	FlashProgDpFirstCmd, .-FlashProgDpFirstCmd
+	.align	2
+	.global	JSHash
+	.type	JSHash, %function
+JSHash:
+	mov	x5, x0
+	mov	w0, 42982
+	mov	x2, 0
+	movk	w0, 0x47c6, lsl 16
+.L59:
+	cmp	w1, w2
+	bls	.L61
+	lsl	w3, w0, 5
+	ldrb	w4, [x5,x2]
+	add	w3, w3, w0, lsr 2
+	add	x2, x2, 1
+	add	w3, w3, w4
+	eor	w0, w0, w3
+	b	.L59
+.L61:
+	ret
+	.size	JSHash, .-JSHash
+	.align	2
+	.global	FlashLoadIdbInfo
+	.type	FlashLoadIdbInfo, %function
+FlashLoadIdbInfo:
+	mov	w0, 0
+	ret
+	.size	FlashLoadIdbInfo, .-FlashLoadIdbInfo
+	.align	2
+	.global	BuildFlashLsbPageTable
+	.type	BuildFlashLsbPageTable, %function
+BuildFlashLsbPageTable:
+	stp	x29, x30, [sp, -48]!
+	adrp	x2, .LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w19, w1
+	cbnz	w0, .L64
+	mov	x0, 0
+	add	x3, x2, :lo12:.LANCHOR0
+.L65:
+	add	x1, x3, 140
+	strh	w0, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L65
+.L71:
+	add	x20, x2, :lo12:.LANCHOR0
+	mov	w1, 255
+	add	x21, x20, 652
+	mov	w2, 1024
+	mov	x0, x21
+	uxth	w19, w19
+	bl	ftl_memset
+	mov	x1, 0
+	mov	x2, x20
+	b	.L66
+.L64:
+	cmp	w0, 1
+	bne	.L67
+	mov	x0, 0
+	mov	w5, 3
+	mov	w6, 2
+	add	x4, x2, :lo12:.LANCHOR0
+.L70:
+	cmp	x0, 3
+	uxth	w1, w0
+	mov	w3, w1
+	bls	.L68
+	ubfiz	w3, w1, 1, 15
+	and	w1, w1, 1
+	cmp	w1, wzr
+	csel	w1, w5, w6, ne
+	sub	w3, w3, w1
+	uxth	w3, w3
+.L68:
+	add	x1, x4, 140
+	strh	w3, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L70
+	b	.L71
+.L67:
+	cmp	w0, 2
+	bne	.L72
+	mov	w1, 65535
+	mov	x0, 0
+	add	x5, x2, :lo12:.LANCHOR0
+.L74:
+	add	x4, x5, 140
+	cmp	x0, 1
+	uxth	w3, w0
+	csel	w3, w1, w3, hi
+	add	w1, w1, 2
+	strh	w3, [x4,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	uxth	w1, w1
+	bne	.L74
+	b	.L71
+.L72:
+	cmp	w0, 3
+	bne	.L75
+	mov	x0, 0
+	mov	w6, 5
+	mov	w7, 4
+	add	x5, x2, :lo12:.LANCHOR0
+.L78:
+	cmp	x0, 5
+	uxth	w4, w0
+	mov	w3, w4
+	bls	.L76
+	ubfiz	w3, w4, 1, 15
+	and	w4, w4, 1
+	cmp	w4, wzr
+	csel	w1, w6, w7, ne
+	sub	w3, w3, w1
+	uxth	w3, w3
+.L76:
+	add	x1, x5, 140
+	strh	w3, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L78
+	b	.L71
+.L75:
+	cmp	w0, 4
+	bne	.L79
+	add	x1, x2, :lo12:.LANCHOR0
+	mov	w6, 7
+	add	x3, x1, 140
+	mov	w5, 6
+	strh	w0, [x3,8]
+	mov	w0, 5
+	strh	wzr, [x1,140]
+	mov	w1, 1
+	strh	w0, [x3,10]
+	mov	w0, 7
+	strh	w1, [x3,2]
+	mov	w1, 2
+	strh	w0, [x3,12]
+	mov	w0, 8
+	strh	w1, [x3,4]
+	mov	w1, 3
+	strh	w0, [x3,14]
+	mov	w0, 8
+	strh	w1, [x3,6]
+.L81:
+	and	w4, w0, 1
+	ubfiz	w1, w0, 1, 15
+	add	w0, w0, 1
+	cmp	w4, wzr
+	csel	w4, w6, w5, ne
+	add	x3, x3, 2
+	uxth	w0, w0
+	sub	w1, w1, w4
+	cmp	w0, 256
+	strh	w1, [x3,14]
+	bne	.L81
+	b	.L71
+.L79:
+	cmp	w0, 5
+	bne	.L82
+	mov	x0, 0
+	add	x3, x2, :lo12:.LANCHOR0
+.L83:
+	add	x1, x3, 140
+	strh	w0, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 16
+	bne	.L83
+	mov	x0, 0
+.L84:
+	add	x3, x1, x0
+	add	w4, w0, 16
+	add	x0, x0, 2
+	cmp	x0, 480
+	strh	w4, [x3,32]
+	bne	.L84
+	b	.L71
+.L82:
+	cmp	w0, 6
+	bne	.L71
+	mov	x3, 0
+	mov	w6, 12
+	mov	w7, 10
+	add	x5, x2, :lo12:.LANCHOR0
+.L87:
+	cmp	x3, 5
+	uxth	w4, w3
+	mov	w0, w4
+	bls	.L85
+	add	w0, w4, w4, lsl 1
+	and	w4, w4, 1
+	cmp	w4, wzr
+	uxth	w0, w0
+	csel	w1, w6, w7, ne
+	sub	w0, w0, w1
+	uxth	w0, w0
+.L85:
+	add	x1, x5, 140
+	strh	w0, [x1,x3,lsl 1]
+	add	x3, x3, 1
+	cmp	x3, 256
+	bne	.L87
+	b	.L71
+.L66:
+	cmp	w19, w1, uxth
+	bls	.L105
+	add	x0, x2, 140
+	ldrh	w0, [x0,x1,lsl 1]
+	add	x1, x1, 1
+	strh	w0, [x21,w0,sxtw 1]
+	b	.L66
+.L105:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	BuildFlashLsbPageTable, .-BuildFlashLsbPageTable
+	.align	2
+	.global	FlashPrintInfo
+	.type	FlashPrintInfo, %function
+FlashPrintInfo:
+	ret
+	.size	FlashPrintInfo, .-FlashPrintInfo
+	.align	2
+	.global	FlashDieInfoInit
+	.type	FlashDieInfoInit, %function
+FlashDieInfoInit:
+	stp	x29, x30, [sp, -80]!
+	adrp	x1, .LANCHOR1+266
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	ldrh	w1, [x1,#:lo12:.LANCHOR1+266]
+	add	x0, x21, :lo12:.LANCHOR0
+	str	x25, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	strb	wzr, [x0,1676]
+	cmp	w1, 256
+	strb	wzr, [x0,1677]
+	bls	.L108
+	mov	w1, 512
+	b	.L124
+.L108:
+	cmp	w1, 128
+	bls	.L124
+	mov	w1, 256
+.L124:
+	add	x19, x21, :lo12:.LANCHOR0
+	str	w1, [x0,28]
+	mov	w2, 8
+	mov	w1, 0
+	add	x0, x19, 1680
+	adrp	x24, IDByte
+	mov	x23, 0
+	add	x24, x24, :lo12:IDByte
+	bl	ftl_memset
+	mov	w1, 0
+	mov	w2, 32
+	add	x0, x19, 1688
+	bl	ftl_memset
+	add	x0, x19, 1720
+	mov	w1, 0
+	mov	w2, 192
+	bl	ftl_memset
+	ldr	x20, [x19,1912]
+	add	x22, x20, 1
+.L112:
+	ldrb	w2, [x20]
+	mov	x0, x22
+	add	x1, x24, x23, lsl 3
+	bl	FlashMemCmp8
+	cbnz	w0, .L111
+	ldrb	w1, [x19,1676]
+	add	x2, x19, 1688
+	str	w0, [x2,w1,sxtw 2]
+	add	w0, w1, 1
+	add	x1, x19, x1, sxtw
+	strb	w0, [x19,1676]
+	strb	w23, [x1,1680]
+.L111:
+	add	x23, x23, 1
+	cmp	x23, 4
+	bne	.L112
+	add	x19, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x19,1676]
+	strb	w0, [x19,1677]
+	ldrb	w0, [x20,8]
+	cmp	w0, 2
+	beq	.L113
+.L117:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrb	w1, [x20,13]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldrb	w0, [x21,1676]
+	mul	w0, w0, w1
+	ldrh	w1, [x20,14]
+	ldp	x19, x20, [sp,16]
+	mul	w0, w0, w1
+	strh	w0, [x21,1920]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 80
+	ret
+.L113:
+	adrp	x24, IDByte
+	ldr	w25, [x19,28]
+	mov	x23, 0
+	add	x24, x24, :lo12:IDByte
+.L116:
+	ldrb	w2, [x20]
+	mov	x0, x22
+	add	x1, x24, x23, lsl 3
+	bl	FlashMemCmp8
+	cbnz	w0, .L114
+	ldrb	w1, [x20,13]
+	add	x4, x19, 1688
+	ldrb	w3, [x19,1676]
+	mul	w2, w1, w25
+	ldrh	w1, [x20,14]
+	mov	x0, x3
+	and	w1, w1, 65280
+	mul	w1, w2, w1
+	str	w1, [x4,w3,sxtw 2]
+	ldrb	w2, [x20,23]
+	cbz	w2, .L115
+	lsl	w1, w1, 1
+	str	w1, [x4,w3,sxtw 2]
+.L115:
+	add	w0, w0, 1
+	strb	w0, [x19,1676]
+	add	x0, x19, x3
+	strb	w23, [x0,1680]
+.L114:
+	add	x23, x23, 1
+	cmp	x23, 4
+	bne	.L116
+	b	.L117
+	.size	FlashDieInfoInit, .-FlashDieInfoInit
+	.align	2
+	.global	FlashReadIdbData
+	.type	FlashReadIdbData, %function
+FlashReadIdbData:
+	stp	x29, x30, [sp, -16]!
+	adrp	x1, .LANCHOR0
+	mov	w2, 2048
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	add	x1, x1, 1928
+	bl	ftl_memcpy
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashReadIdbData, .-FlashReadIdbData
+	.align	2
+	.global	FlashLoadPhyInfoInRam
+	.type	FlashLoadPhyInfoInRam, %function
+FlashLoadPhyInfoInRam:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR1
+	str	x23, [sp,48]
+	stp	x21, x22, [sp,32]
+	adrp	x23, IDByte
+	add	x21, x20, :lo12:.LANCHOR1
+	add	x21, x21, 288
+	mov	w19, 0
+	add	x23, x23, :lo12:IDByte
+.L130:
+	ldrb	w2, [x21]
+	add	x0, x21, 1
+	mov	x1, x23
+	bl	FlashMemCmp8
+	mov	w22, w0
+	cbnz	w0, .L127
+	add	x0, x20, :lo12:.LANCHOR1
+	ubfiz	x19, x19, 5, 32
+	add	x1, x0, 288
+	adds	x19, x1, x19
+	beq	.L133
+	ldrb	w3, [x19,22]
+	mov	x2, 0
+	mov	x1, x0
+	b	.L132
+.L127:
+	add	w19, w19, 1
+	add	x21, x21, 32
+	cmp	w19, 74
+	bne	.L130
+	b	.L133
+.L132:
+	add	x4, x1, x2, lsl 5
+	mov	w0, w2
+	ldrb	w4, [x4,2656]
+	cmp	w4, w3
+	beq	.L131
+	add	x2, x2, 1
+	cmp	x2, 4
+	bne	.L132
+	mov	w0, w2
+.L131:
+	add	x20, x20, :lo12:.LANCHOR1
+	ubfiz	x1, x0, 5, 32
+	adrp	x0, .LANCHOR0
+	add	x2, x20, 2656
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x1, x2, x1
+	add	x0, x0, 104
+	mov	w2, 32
+	bl	ftl_memcpy
+	add	x0, x20, 256
+	mov	x1, x19
+	mov	w2, 32
+	bl	ftl_memcpy
+	b	.L128
+.L133:
+	mov	w22, -1
+.L128:
+	mov	w0, w22
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FlashLoadPhyInfoInRam, .-FlashLoadPhyInfoInRam
+	.align	2
+	.global	ftl_flash_suspend
+	.type	ftl_flash_suspend, %function
+ftl_flash_suspend:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	x1, [x0,3976]
+	ldr	w2, [x1]
+	str	w2, [x0,3984]
+	ldr	w2, [x1,4]
+	str	w2, [x0,3988]
+	ldr	w2, [x1,8]
+	str	w2, [x0,3992]
+	ldr	w2, [x1,12]
+	str	w2, [x0,3996]
+	ldr	w2, [x1,304]
+	str	w2, [x0,4000]
+	ldr	w2, [x1,308]
+	str	w2, [x0,4004]
+	ldr	w2, [x1,336]
+	ldr	w1, [x1,344]
+	str	w2, [x0,4008]
+	str	w1, [x0,4012]
+	ret
+	.size	ftl_flash_suspend, .-ftl_flash_suspend
+	.align	2
+	.global	LogAddr2PhyAddr
+	.type	LogAddr2PhyAddr, %function
+LogAddr2PhyAddr:
+	adrp	x7, .LANCHOR0
+	uxtb	w4, w4
+	add	x6, x7, :lo12:.LANCHOR0
+	ldrh	w8, [x6,4030]
+	ldrh	w5, [x6,4028]
+	ldrh	w9, [x6,28]
+	ldrb	w6, [x6,24]
+	mul	w5, w5, w8
+	cmp	w6, 1
+	ubfiz	w8, w9, 1, 15
+	csel	w9, w8, w9, eq
+	ldr	w8, [x0,4]
+	uxth	w5, w5
+	cmp	w1, 1
+	ubfx	x6, x8, 10, 16
+	and	w8, w8, 1023
+	udiv	w10, w6, w5
+	msub	w5, w10, w5, w6
+	uxth	w6, w5
+	bne	.L140
+	add	x1, x7, :lo12:.LANCHOR0
+	ldrb	w5, [x1,136]
+	cbnz	w5, .L140
+	add	x1, x1, 140
+	ldrh	w8, [x1,w8,sxtw 1]
+.L140:
+	add	x7, x7, :lo12:.LANCHOR0
+	cmp	w4, 1
+	add	x7, x7, 1688
+	mov	w1, 0
+	ldr	w5, [x7,w10,uxtw 2]
+	madd	w5, w6, w9, w5
+	add	w5, w5, w8
+	str	w5, [x2]
+	str	w10, [x3]
+	bls	.L141
+	ldr	w1, [x0,4]
+	ldr	w0, [x0,60]
+	add	w1, w1, 1024
+	cmp	w1, w0
+	cset	w1, eq
+.L141:
+	mov	w0, w1
+	ret
+	.size	LogAddr2PhyAddr, .-LogAddr2PhyAddr
+	.align	2
+	.global	ftl_read_flash_info
+	.type	ftl_read_flash_info, %function
+ftl_read_flash_info:
+	stp	x29, x30, [sp, -32]!
+	mov	w1, 0
+	mov	w2, 11
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	bl	ftl_memset
+	adrp	x1, .LANCHOR0
+	mov	w5, 1
+	add	x1, x1, :lo12:.LANCHOR0
+	ldr	x0, [x1,1912]
+	ldrb	w2, [x0,9]
+	ldr	w0, [x1,28]
+	mul	w0, w0, w2
+	strh	w0, [x19,4]
+	ldrb	w0, [x1,4044]
+	strb	w0, [x19,7]
+	ldr	w0, [x1,4048]
+	str	w0, [x19]
+	ldr	x0, [x1,1912]
+	ldrb	w4, [x1,1676]
+	ldrb	w0, [x0,9]
+	strb	w0, [x19,6]
+	mov	w0, 32
+	strb	w0, [x19,8]
+	ldr	x0, [x1,1912]
+	ldrb	w0, [x0,7]
+	strb	w0, [x19,9]
+	mov	x0, 0
+	strb	wzr, [x19,10]
+.L144:
+	cmp	w4, w0, uxtb
+	bls	.L146
+	add	x2, x1, 1680
+	ldrb	w3, [x19,10]
+	ldrb	w2, [x0,x2]
+	add	x0, x0, 1
+	lsl	w2, w5, w2
+	orr	w2, w2, w3
+	strb	w2, [x19,10]
+	b	.L144
+.L146:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_read_flash_info, .-ftl_read_flash_info
+	.align	2
+	.global	FlashScheduleEnSet
+	.type	FlashScheduleEnSet, %function
+FlashScheduleEnSet:
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldr	w2, [x1,4052]
+	str	w0, [x1,4052]
+	mov	w0, w2
+	ret
+	.size	FlashScheduleEnSet, .-FlashScheduleEnSet
+	.align	2
+	.global	FlashGetPageSize
+	.type	FlashGetPageSize, %function
+FlashGetPageSize:
+	adrp	x0, .LANCHOR0+1912
+	ldr	x0, [x0,#:lo12:.LANCHOR0+1912]
+	ldrb	w0, [x0,9]
+	ret
+	.size	FlashGetPageSize, .-FlashGetPageSize
+	.align	2
+	.global	NandcReadDontCaseBusyEn
+	.type	NandcReadDontCaseBusyEn, %function
+NandcReadDontCaseBusyEn:
+	ret
+	.size	NandcReadDontCaseBusyEn, .-NandcReadDontCaseBusyEn
+	.align	2
+	.global	NandcGetChipIf
+	.type	NandcGetChipIf, %function
+NandcGetChipIf:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 40
+	add	x2, x1, x0
+	ldr	x0, [x1,x0]
+	ldrb	w2, [x2,8]
+	add	x2, x2, 8
+	add	x0, x0, x2, lsl 8
+	ret
+	.size	NandcGetChipIf, .-NandcGetChipIf
+	.align	2
+	.global	NandcSetDdrPara
+	.type	NandcSetDdrPara, %function
+NandcSetDdrPara:
+	adrp	x1, .LANCHOR0+3976
+	uxtb	w0, w0
+	lsl	w2, w0, 8
+	orr	w0, w2, w0, lsl 16
+	ldr	x1, [x1,#:lo12:.LANCHOR0+3976]
+	orr	w0, w0, 1
+	str	w0, [x1,304]
+	ret
+	.size	NandcSetDdrPara, .-NandcSetDdrPara
+	.align	2
+	.global	NandcSetDdrDiv
+	.type	NandcSetDdrDiv, %function
+NandcSetDdrDiv:
+	adrp	x1, .LANCHOR0+3976
+	uxtb	w0, w0
+	ldr	x2, [x1,#:lo12:.LANCHOR0+3976]
+	mov	w1, 16640
+	orr	w0, w0, w1
+	str	w0, [x2,344]
+	ret
+	.size	NandcSetDdrDiv, .-NandcSetDdrDiv
+	.align	2
+	.global	NandcSetDdrMode
+	.type	NandcSetDdrMode, %function
+NandcSetDdrMode:
+	adrp	x1, .LANCHOR0+3976
+	cmp	w0, wzr
+	ldr	x2, [x1,#:lo12:.LANCHOR0+3976]
+	ldr	w1, [x2]
+	and	w3, w1, -8193
+	orr	w1, w1, 253952
+	csel	w1, w1, w3, ne
+	str	w1, [x2]
+	ret
+	.size	NandcSetDdrMode, .-NandcSetDdrMode
+	.align	2
+	.global	NandcSetMode
+	.type	NandcSetMode, %function
+NandcSetMode:
+	adrp	x1, .LANCHOR0+3976
+	uxtb	w0, w0
+	tst	w0, 6
+	ldr	x2, [x1,#:lo12:.LANCHOR0+3976]
+	ldr	w1, [x2]
+	beq	.L157
+	and	w0, w0, 4
+	orr	w1, w1, 24576
+	cmp	w0, wzr
+	mov	w0, 8322
+	and	w1, w1, -32769
+	str	w0, [x2,344]
+	mov	w0, 4099
+	orr	w1, w1, 196608
+	movk	w0, 0x10, lsl 16
+	str	w0, [x2,304]
+	orr	w3, w1, 32768
+	mov	w0, 38
+	str	w0, [x2,308]
+	csel	w1, w3, w1, ne
+	mov	w0, 39
+	str	w0, [x2,308]
+	b	.L159
+.L157:
+	and	w1, w1, -8193
+.L159:
+	str	w1, [x2]
+	mov	w0, 0
+	ret
+	.size	NandcSetMode, .-NandcSetMode
+	.align	2
+	.global	NandcFlashCs
+	.type	NandcFlashCs, %function
+NandcFlashCs:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 40
+	add	x3, x1, x0
+	ldr	x2, [x1,x0]
+	mov	w1, 1
+	ldrb	w3, [x3,8]
+	ldr	w0, [x2]
+	lsl	w1, w1, w3
+	bfi	w0, w1, 0, 8
+	str	w0, [x2]
+	ret
+	.size	NandcFlashCs, .-NandcFlashCs
+	.align	2
+	.global	NandcFlashDeCs
+	.type	NandcFlashDeCs, %function
+NandcFlashDeCs:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 40
+	ldr	x1, [x1,x0]
+	ldr	w0, [x1]
+	and	w0, w0, -256
+	and	w0, w0, -131073
+	str	w0, [x1]
+	ret
+	.size	NandcFlashDeCs, .-NandcFlashDeCs
+	.align	2
+	.global	NandcDelayns
+	.type	NandcDelayns, %function
+NandcDelayns:
+	sub	sp, sp, #16
+	lsr	w0, w0, 4
+	str	w0, [sp,12]
+.L165:
+	ldr	w0, [sp,12]
+	sub	w1, w0, #1
+	str	w1, [sp,12]
+	cbnz	w0, .L165
+	add	sp, sp, 16
+	ret
+	.size	NandcDelayns, .-NandcDelayns
+	.align	2
+	.global	FlashReadStatus
+	.type	FlashReadStatus, %function
+FlashReadStatus:
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	stp	x29, x30, [sp, -32]!
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 40
+	add	x29, sp, 0
+	add	x2, x1, x0
+	str	x19, [sp,16]
+	ldrb	w2, [x2,8]
+	ldr	x19, [x1,x0]
+	mov	w0, 112
+	add	x19, x19, x2, lsl 8
+	str	w0, [x19,2056]
+	mov	w0, 80
+	bl	NandcDelayns
+	ldr	w0, [x19,2048]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FlashReadStatus, .-FlashReadStatus
+	.align	2
+	.global	ToshibaSetRRPara
+	.type	ToshibaSetRRPara, %function
+ToshibaSetRRPara:
+	uxtb	w1, w1
+	mov	w3, 5
+	add	w2, w1, 1
+	stp	x29, x30, [sp, -80]!
+	smull	x3, w2, w3
+	adrp	x2, .LANCHOR1
+	add	x29, sp, 0
+	add	x2, x2, :lo12:.LANCHOR1
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	add	x23, x2, x1, sxtw
+	stp	x25, x26, [sp,64]
+	add	x21, x2, 2832
+	add	x25, x2, 2784
+	adrp	x24, g_maxRegNum
+	adrp	x26, g_retryMode
+	stp	x19, x20, [sp,16]
+	mov	x22, x0
+	add	x25, x25, x3
+	add	x21, x21, x3
+	mov	x20, 0
+	add	x24, x24, :lo12:g_maxRegNum
+	mov	x19, x2
+	add	x26, x26, :lo12:g_retryMode
+.L169:
+	ldrb	w0, [x24]
+	cmp	w0, w20
+	bls	.L175
+	mov	w0, 85
+	str	w0, [x22,8]
+	add	x0, x19, 2784
+	ldrsb	w0, [x20,x0]
+	str	w0, [x22,4]
+	mov	w0, 200
+	bl	NandcDelayns
+	ldrb	w0, [x26]
+	cmp	w0, 34
+	bne	.L170
+	ldrsb	w0, [x25,x20]
+	b	.L174
+.L170:
+	cmp	w0, 35
+	bne	.L172
+	ldrsb	w0, [x21,x20]
+	b	.L174
+.L172:
+	ldrsb	w0, [x23,2928]
+.L174:
+	str	w0, [x22]
+	add	x20, x20, 1
+	b	.L169
+.L175:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	ToshibaSetRRPara, .-ToshibaSetRRPara
+	.align	2
+	.global	SamsungSetRRPara
+	.type	SamsungSetRRPara, %function
+SamsungSetRRPara:
+	stp	x29, x30, [sp, -64]!
+	adrp	x2, .LANCHOR1
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	add	x2, x2, :lo12:.LANCHOR1
+	adrp	x22, g_maxRegNum
+	stp	x19, x20, [sp,16]
+	add	x1, x2, x1, uxtb 2
+	stp	x23, x24, [sp,48]
+	mov	x21, x0
+	add	x23, x1, 2940
+	mov	x20, 0
+	add	x22, x22, :lo12:g_maxRegNum
+	mov	w24, 161
+	mov	x19, x2
+.L177:
+	ldrb	w0, [x22]
+	cmp	w0, w20
+	bls	.L179
+	str	w24, [x21,8]
+	add	x0, x19, 2936
+	str	wzr, [x21]
+	ldrsb	w0, [x20,x0]
+	str	w0, [x21]
+	ldrsb	w0, [x23,x20]
+	add	x20, x20, 1
+	str	w0, [x21]
+	mov	w0, 300
+	bl	NandcDelayns
+	b	.L177
+.L179:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	SamsungSetRRPara, .-SamsungSetRRPara
+	.align	2
+	.global	HynixSetRRPara
+	.type	HynixSetRRPara, %function
+HynixSetRRPara:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	mov	x21, x2
+	adrp	x2, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	add	x19, x2, :lo12:.LANCHOR0
+	uxtb	w20, w3
+	stp	x25, x26, [sp,64]
+	stp	x23, x24, [sp,48]
+	uxtb	x24, w0
+	uxtb	w26, w1
+	ldr	x0, [x19,1912]
+	mov	x25, x24
+	add	x19, x19, 4056
+	ldrb	w0, [x0,19]
+	cmp	w0, 6
+	bne	.L181
+	add	x19, x19, x24, lsl 6
+	lsl	w4, w20, 2
+	add	x19, x19, 20
+	b	.L186
+.L181:
+	cmp	w0, 7
+	bne	.L183
+	mov	x0, 160
+	mov	w4, 10
+	madd	x19, x24, x0, x19
+	mul	w4, w20, w4
+	add	x19, x19, 28
+.L186:
+	add	x19, x19, x4, sxtw
+	b	.L182
+.L183:
+	lsl	x4, x24, 3
+	add	x4, x4, x20, sxtw
+	add	x19, x19, x4, lsl 3
+	add	x19, x19, 20
+.L182:
+	add	x2, x2, :lo12:.LANCHOR0
+	lsl	x0, x24, 4
+	add	x2, x2, 40
+	uxtb	x26, w26
+	add	x1, x2, x0
+	ldr	x22, [x2,x0]
+	mov	w0, w25
+	ldrb	w23, [x1,8]
+	bl	NandcFlashCs
+	ubfiz	x23, x23, 8, 8
+	mov	w0, 54
+	add	x22, x22, x23
+	mov	x23, 0
+	str	w0, [x22,2056]
+.L184:
+	cmp	x23, x26
+	beq	.L187
+	ldrb	w0, [x21,x23]
+	str	w0, [x22,2052]
+	mov	w0, 200
+	bl	NandcDelayns
+	ldrsb	w0, [x19,x23]
+	add	x23, x23, 1
+	str	w0, [x22,2048]
+	b	.L184
+.L187:
+	mov	w0, 22
+	str	w0, [x22,2056]
+	mov	w0, w25
+	bl	NandcFlashDeCs
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x24, x0, x24
+	strb	w20, [x24,560]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	HynixSetRRPara, .-HynixSetRRPara
+	.align	2
+	.global	FlashSetReadRetryDefault
+	.type	FlashSetReadRetryDefault, %function
+FlashSetReadRetryDefault:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	mov	x20, 0
+	add	x19, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	ldr	x0, [x19,1912]
+	ldrb	w0, [x0,19]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L188
+	adrp	x21, IDByte
+	add	x22, x19, 4060
+	add	x21, x21, :lo12:IDByte
+.L193:
+	lsl	x1, x20, 3
+	uxtb	w0, w20
+	ldrb	w1, [x1,x21]
+	cmp	w1, 173
+	bne	.L190
+	ldrb	w1, [x19,4057]
+	mov	x2, x22
+	mov	w3, 0
+	bl	HynixSetRRPara
+.L190:
+	add	x20, x20, 1
+	cmp	x20, 4
+	bne	.L193
+.L188:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashSetReadRetryDefault, .-FlashSetReadRetryDefault
+	.align	2
+	.global	FlashReadStatusEN
+	.type	FlashReadStatusEN, %function
+FlashReadStatusEN:
+	stp	x29, x30, [sp, -32]!
+	adrp	x3, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x4, x3, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	add	x5, x4, 40
+	stp	x19, x20, [sp,16]
+	add	x6, x5, x0
+	uxtb	w2, w2
+	ldr	x20, [x5,x0]
+	ldr	x0, [x4,1912]
+	ldrb	w19, [x6,8]
+	ldrb	w0, [x0,8]
+	cmp	w0, 2
+	bne	.L196
+	add	x4, x4, 104
+	cbnz	w2, .L197
+	ldrb	w2, [x4,13]
+	b	.L205
+.L197:
+	ldrb	w2, [x4,14]
+.L205:
+	add	x0, x19, 8
+	add	x3, x3, :lo12:.LANCHOR0
+	add	x0, x20, x0, lsl 8
+	str	w2, [x0,8]
+	mov	w2, 0
+	ldrb	w4, [x3,119]
+	cbz	w4, .L200
+	add	x3, x19, 8
+	lsl	x3, x3, 8
+.L204:
+	cmp	w2, w4
+	bcs	.L200
+	add	x5, x20, x3
+	lsl	w0, w2, 3
+	lsr	w0, w1, w0
+	add	w2, w2, 1
+	and	w0, w0, 255
+	str	w0, [x5,4]
+	b	.L204
+.L196:
+	add	x0, x19, 8
+	mov	w1, 112
+	add	x0, x20, x0, lsl 8
+	str	w1, [x0,8]
+.L200:
+	add	x19, x19, 8
+	mov	w0, 80
+	lsl	x19, x19, 8
+	bl	NandcDelayns
+	ldr	w0, [x20,x19]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	uxtb	w0, w0
+	ret
+	.size	FlashReadStatusEN, .-FlashReadStatusEN
+	.align	2
+	.global	FlashWaitReadyEN
+	.type	FlashWaitReadyEN, %function
+FlashWaitReadyEN:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	uxtb	w19, w0
+	mov	w20, w1
+	uxtb	w21, w2
+.L210:
+	mov	w0, w19
+	mov	w1, w20
+	mov	w2, w21
+	bl	FlashReadStatusEN
+	cmp	w0, 255
+	mov	w3, w0
+	beq	.L210
+	tbz	x3, 6, .L210
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashWaitReadyEN, .-FlashWaitReadyEN
+	.align	2
+	.global	FlashWaitCmdDone
+	.type	FlashWaitCmdDone, %function
+FlashWaitCmdDone:
+	stp	x29, x30, [sp, -48]!
+	uxtb	x1, w0
+	mov	x2, 24
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	x22, x1
+	mul	x1, x1, x2
+	add	x0, x20, 1720
+	add	x19, x0, x1
+	ldrb	w21, [x0,x1]
+	ldr	x0, [x19,8]
+	cbz	x0, .L215
+	mov	w0, w21
+	add	x20, x20, 1688
+	bl	NandcFlashCs
+	ldr	w0, [x20,w22,sxtw 2]
+	ldr	w1, [x19,4]
+	cmp	w0, wzr
+	mov	w0, w21
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	mov	w20, w0
+	mov	w0, w21
+	bl	NandcFlashDeCs
+	ldr	x1, [x19,8]
+	sbfx	x0, x20, 0, 1
+	str	w0, [x1]
+	str	xzr, [x19,8]
+	ldr	x1, [x19,16]
+	cbz	x1, .L215
+	str	w0, [x1]
+	str	xzr, [x19,16]
+.L215:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashWaitCmdDone, .-FlashWaitCmdDone
+	.align	2
+	.global	NandcWaitFlashReady
+	.type	NandcWaitFlashReady, %function
+NandcWaitFlashReady:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	add	x1, x1, 40
+	stp	x19, x20, [sp,16]
+	mov	w19, 34464
+	ldr	x20, [x1,x0]
+	movk	w19, 0x1, lsl 16
+.L222:
+	mov	w0, 100
+	bl	NandcDelayns
+	ldr	w0, [x20]
+	str	w0, [x29,40]
+	ldr	w0, [x29,40]
+	tbnz	x0, 9, .L223
+	subs	w19, w19, #1
+	bne	.L222
+	mov	w0, -1
+	b	.L221
+.L223:
+	mov	w0, 0
+.L221:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	NandcWaitFlashReady, .-NandcWaitFlashReady
+	.align	2
+	.global	FlashReset
+	.type	FlashReset, %function
+FlashReset:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	add	x1, x1, :lo12:.LANCHOR0
+	uxtb	w20, w0
+	add	x1, x1, 40
+	sbfiz	x0, x20, 4, 32
+	add	x2, x1, x0
+	str	x21, [sp,32]
+	ldr	x21, [x1,x0]
+	mov	w0, w20
+	ldrb	w19, [x2,8]
+	bl	NandcFlashCs
+	add	x19, x19, 8
+	mov	w0, 255
+	add	x19, x21, x19, lsl 8
+	str	w0, [x19,8]
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	mov	w0, w20
+	bl	NandcFlashDeCs
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashReset, .-FlashReset
+	.align	2
+	.global	FlashEraseBlock
+	.type	FlashEraseBlock, %function
+FlashEraseBlock:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w19, w0
+	mov	w20, w1
+	mov	w0, w19
+	str	x2, [x29,40]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	x2, [x29,40]
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashEraseCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashReadStatus
+	mov	w20, w0
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	and	w0, w20, 1
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashEraseBlock, .-FlashEraseBlock
+	.align	2
+	.global	FlashSetInterfaceMode
+	.type	FlashSetInterfaceMode, %function
+FlashSetInterfaceMode:
+	adrp	x1, .LANCHOR2+564
+	adrp	x3, .LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x3, x3, :lo12:.LANCHOR0
+	adrp	x7, IDByte
+	add	x29, sp, 0
+	ldrb	w1, [x1,#:lo12:.LANCHOR2+564]
+	add	x3, x3, 40
+	mov	x6, 0
+	add	x7, x7, :lo12:IDByte
+	and	w11, w1, 1
+	and	w1, w1, 4
+	mov	w8, 239
+	mov	w9, 128
+	uxtb	w5, w1
+	mov	w10, 1
+	mov	w12, 35
+	mov	w13, 32
+	mov	w14, 5
+.L238:
+	ldrb	w4, [x6,x7]
+	ldr	x1, [x3]
+	cmp	w4, 152
+	ldrb	w2, [x3,8]
+	beq	.L228
+	cmp	w4, 69
+	beq	.L228
+	cmp	w4, 173
+	beq	.L228
+	cmp	w4, 44
+	bne	.L229
+.L228:
+	cmp	w0, 1
+	bne	.L231
+	cbz	w11, .L229
+	ubfiz	x2, x2, 8, 8
+	cmp	w4, 173
+	add	x1, x1, x2
+	str	w8, [x1,2056]
+	bne	.L232
+	str	w0, [x1,2052]
+	b	.L249
+.L232:
+	cmp	w4, 44
+	bne	.L234
+	str	w0, [x1,2052]
+	str	w14, [x1,2048]
+	b	.L236
+.L234:
+	str	w9, [x1,2052]
+	str	w0, [x1,2048]
+	b	.L236
+.L231:
+	cbz	w5, .L229
+	ubfiz	x2, x2, 8, 8
+	cmp	w4, 173
+	add	x1, x1, x2
+	str	w8, [x1,2056]
+	bne	.L235
+	str	w10, [x1,2052]
+	str	w13, [x1,2048]
+	b	.L236
+.L235:
+	cmp	w4, 44
+	bne	.L237
+	str	w10, [x1,2052]
+	str	w12, [x1,2048]
+	b	.L236
+.L237:
+	str	w9, [x1,2052]
+.L249:
+	str	wzr, [x1,2048]
+.L236:
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+.L229:
+	add	x6, x6, 8
+	add	x3, x3, 16
+	cmp	x6, 32
+	bne	.L238
+	mov	w0, 0
+	bl	NandcWaitFlashReady
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashSetInterfaceMode, .-FlashSetInterfaceMode
+	.align	2
+	.global	FlashReadSpare
+	.type	FlashReadSpare, %function
+FlashReadSpare:
+	adrp	x3, .LANCHOR1+265
+	adrp	x5, .LANCHOR0
+	stp	x29, x30, [sp, -48]!
+	uxtb	w0, w0
+	add	x5, x5, :lo12:.LANCHOR0
+	add	x5, x5, 40
+	sbfiz	x6, x0, 4, 32
+	add	x29, sp, 0
+	ldrb	w4, [x3,#:lo12:.LANCHOR1+265]
+	add	x3, x5, x6
+	str	x19, [sp,16]
+	lsl	w4, w4, 9
+	str	x2, [x29,40]
+	ldrb	w3, [x3,8]
+	ldr	x19, [x5,x6]
+	add	x19, x19, x3, lsl 8
+	and	w3, w1, 255
+	str	wzr, [x19,2056]
+	str	w4, [x19,2052]
+	lsr	w4, w4, 8
+	str	w4, [x19,2052]
+	str	w3, [x19,2052]
+	lsr	w3, w1, 8
+	str	w3, [x19,2052]
+	lsr	w1, w1, 16
+	str	w1, [x19,2052]
+	mov	w1, 48
+	str	w1, [x19,2056]
+	bl	NandcWaitFlashReady
+	ldr	x2, [x29,40]
+	ldr	w0, [x19,2048]
+	strb	w0, [x2]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashReadSpare, .-FlashReadSpare
+	.align	2
+	.global	SandiskProgTestBadBlock
+	.type	SandiskProgTestBadBlock, %function
+SandiskProgTestBadBlock:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	stp	x29, x30, [sp, -32]!
+	add	x3, x3, :lo12:.LANCHOR0
+	sbfiz	x4, x0, 4, 32
+	add	x3, x3, 40
+	add	x29, sp, 0
+	add	x2, x3, x4
+	str	x19, [sp,16]
+	ldrb	w2, [x2,8]
+	ldr	x19, [x3,x4]
+	add	x19, x19, x2, lsl 8
+	mov	w2, 162
+	str	w2, [x19,2056]
+	mov	w2, 128
+	str	w2, [x19,2056]
+	and	w2, w1, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w2, [x19,2052]
+	lsr	w2, w1, 8
+	str	w2, [x19,2052]
+	lsr	w1, w1, 16
+	str	w1, [x19,2052]
+	mov	w1, 16
+	str	w1, [x19,2056]
+	bl	NandcWaitFlashReady
+	mov	w0, 112
+	str	w0, [x19,2056]
+	mov	w0, 80
+	bl	NandcDelayns
+	ldr	w0, [x19,2048]
+	ldr	x19, [sp,16]
+	and	w0, w0, 1
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	SandiskProgTestBadBlock, .-SandiskProgTestBadBlock
+	.align	2
+	.global	SandiskSetRRPara
+	.type	SandiskSetRRPara, %function
+SandiskSetRRPara:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	mov	w0, 239
+	uxtb	w19, w1
+	add	w19, w19, 1
+	str	w0, [x20,8]
+	mov	w0, 17
+	str	w0, [x20,4]
+	mov	w0, 200
+	bl	NandcDelayns
+	mov	w1, 5
+	adrp	x2, .LANCHOR1
+	add	x2, x2, :lo12:.LANCHOR1
+	adrp	x0, g_maxRegNum
+	smull	x1, w19, w1
+	add	x3, x2, 2784
+	adrp	x4, g_retryMode
+	add	x2, x2, 2832
+	add	x3, x3, x1
+	add	x0, x0, :lo12:g_maxRegNum
+	add	x1, x2, x1
+	add	x4, x4, :lo12:g_retryMode
+	mov	x2, 0
+.L253:
+	ldrb	w5, [x0]
+	cmp	w5, w2
+	bls	.L258
+	ldrb	w5, [x4]
+	cmp	w5, 67
+	bne	.L254
+	ldrsb	w5, [x3,x2]
+	b	.L257
+.L254:
+	ldrsb	w5, [x1,x2]
+.L257:
+	str	w5, [x20]
+	add	x2, x2, 1
+	b	.L253
+.L258:
+	mov	w0, 0
+	bl	NandcWaitFlashReady
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	SandiskSetRRPara, .-SandiskSetRRPara
+	.align	2
+	.global	FlashEraseSLc2KBlocks
+	.type	FlashEraseSLc2KBlocks, %function
+FlashEraseSLc2KBlocks:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	str	x25, [sp,64]
+	stp	x23, x24, [sp,48]
+	add	x21, x21, :lo12:.LANCHOR0
+	adrp	x23, .LC1
+	stp	x19, x20, [sp,16]
+	mov	w24, w1
+	mov	x20, x0
+	mov	w22, 0
+	add	x25, x21, 1720
+	add	x23, x23, :lo12:.LC1
+.L260:
+	cmp	w22, w24
+	beq	.L269
+	add	x2, x29, 88
+	sub	w4, w24, w22
+	mov	x0, x20
+	mov	w1, 0
+	add	x3, x29, 92
+	bl	LogAddr2PhyAddr
+	ldr	w2, [x29,92]
+	ldrb	w0, [x21,1676]
+	cmp	w2, w0
+	bcc	.L261
+	mov	w0, -1
+	str	w0, [x20]
+	b	.L262
+.L261:
+	uxtw	x2, w2
+	add	x0, x21, x2
+	ldrb	w19, [x0,1680]
+	mov	x0, 24
+	mul	x2, x2, x0
+	mov	w0, w19
+	strb	w19, [x25,x2]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	w1, [x29,88]
+	mov	w2, 0
+	mov	w0, w19
+	bl	FlashEraseCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,88]
+	mov	w0, w19
+	bl	FlashReadStatus
+	sbfx	x0, x0, 0, 1
+	str	w0, [x20]
+	mov	w0, w19
+	ldr	w1, [x29,88]
+	ldr	w2, [x21,28]
+	add	w1, w2, w1
+	mov	w2, 0
+	bl	FlashEraseCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,88]
+	mov	w0, w19
+	bl	FlashReadStatus
+	tbz	x0, 0, .L263
+	mov	w0, -1
+	str	w0, [x20]
+.L263:
+	ldr	w0, [x20]
+	cmn	w0, #1
+	bne	.L264
+	ldr	w1, [x29,88]
+	mov	x0, x23
+	bl	printk
+.L264:
+	mov	w0, w19
+	bl	NandcFlashDeCs
+.L262:
+	add	w22, w22, 1
+	add	x20, x20, 56
+	b	.L260
+.L269:
+	mov	w0, 0
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FlashEraseSLc2KBlocks, .-FlashEraseSLc2KBlocks
+	.align	2
+	.global	HynixGetReadRetryDefault
+	.type	HynixGetReadRetryDefault, %function
+HynixGetReadRetryDefault:
+	stp	x29, x30, [sp, -144]!
+	mov	w4, -83
+	mov	w3, -82
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	mov	w26, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	add	x1, x0, 4056
+	cmp	w26, 2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	strb	w26, [x0,4056]
+	mov	w0, -84
+	strb	w4, [x1,5]
+	strb	w0, [x1,4]
+	mov	w0, -81
+	strb	w3, [x1,6]
+	strb	w0, [x1,7]
+	bne	.L271
+	mov	w0, -89
+	strb	w0, [x1,4]
+	adrp	x0, .LANCHOR1+3017
+	mov	w1, -9
+	strb	w1, [x0,#:lo12:.LANCHOR1+3017]
+	b	.L326
+.L271:
+	cmp	w26, 3
+	bne	.L273
+	mov	w0, -80
+	strb	w0, [x1,4]
+	mov	w0, -79
+	strb	w0, [x1,5]
+	mov	w0, -78
+	strb	w0, [x1,6]
+	mov	w0, -77
+	strb	w0, [x1,7]
+	mov	w0, -76
+	strb	w0, [x1,8]
+	mov	w0, -75
+	strb	w0, [x1,9]
+	mov	w0, -74
+	strb	w0, [x1,10]
+	mov	w0, -73
+	b	.L359
+.L273:
+	cmp	w26, 4
+	bne	.L274
+	mov	w5, -52
+	strb	w5, [x1,4]
+	mov	w5, -65
+	strb	w5, [x1,5]
+	mov	w5, -86
+	strb	w5, [x1,6]
+	mov	w5, -85
+	strb	w4, [x1,9]
+	strb	w5, [x1,7]
+	mov	w5, -51
+	strb	w3, [x1,10]
+	strb	w5, [x1,8]
+.L359:
+	mov	w27, 8
+	strb	w0, [x1,11]
+	mov	w28, w27
+	b	.L272
+.L274:
+	cmp	w26, 5
+	bne	.L275
+	mov	w0, 56
+	strb	w0, [x1,4]
+	mov	w0, 57
+	strb	w0, [x1,5]
+	mov	w0, 58
+	mov	w27, 8
+	strb	w0, [x1,6]
+	mov	w0, 59
+	strb	w0, [x1,7]
+	b	.L358
+.L275:
+	cmp	w26, 6
+	bne	.L276
+	mov	w0, 14
+	strb	w0, [x1,4]
+	mov	w0, 15
+	strb	w0, [x1,5]
+	mov	w0, 16
+	mov	w27, 12
+	strb	w0, [x1,6]
+	mov	w0, 17
+	strb	w0, [x1,7]
+	b	.L358
+.L276:
+	cmp	w26, 7
+	bne	.L326
+	mov	w0, -80
+	strb	w0, [x1,4]
+	mov	w0, -79
+	strb	w0, [x1,5]
+	mov	w0, -78
+	strb	w0, [x1,6]
+	mov	w0, -77
+	strb	w0, [x1,7]
+	mov	w0, -76
+	strb	w0, [x1,8]
+	mov	w0, -75
+	strb	w0, [x1,9]
+	mov	w0, -74
+	strb	w0, [x1,10]
+	mov	w0, -73
+	strb	w0, [x1,11]
+	mov	w0, -44
+	mov	w27, 12
+	strb	w0, [x1,12]
+	mov	w28, 10
+	mov	w0, -43
+	strb	w0, [x1,13]
+	b	.L272
+.L326:
+	mov	w27, 7
+.L358:
+	mov	w28, 4
+.L272:
+	sub	w0, w26, #1
+	cmp	w0, 1
+	bhi	.L355
+	adrp	x22, .LANCHOR1
+	add	x25, x20, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LANCHOR1
+	mov	w21, 0
+	add	x26, x25, 4056
+	add	x3, x25, 40
+	add	x22, x22, 3000
+.L277:
+	ldrb	w0, [x25,1676]
+	cmp	w0, w21
+	bls	.L284
+	add	x0, x25, x21, sxtw
+	ldrb	w0, [x0,1680]
+	mov	x23, 0
+	add	x19, x26, x0, lsl 6
+	lsl	x0, x0, 4
+	add	x1, x3, x0
+	add	x19, x19, 20
+	ldr	x24, [x3,x0]
+	ldrb	w0, [x1,8]
+	mov	w1, 55
+	add	x24, x24, x0, lsl 8
+.L279:
+	add	x0, x26, x23
+	str	w1, [x24,2056]
+	str	x3, [x29,128]
+	str	x1, [x29,136]
+	ldrb	w0, [x0,4]
+	str	w0, [x24,2052]
+	mov	w0, 80
+	bl	NandcDelayns
+	ldr	w0, [x24,2048]
+	strb	w0, [x19,x23]
+	add	x23, x23, 1
+	ldr	x1, [x29,136]
+	cmp	w28, w23, uxtb
+	ldr	x3, [x29,128]
+	bhi	.L279
+	mov	x0, 0
+.L280:
+	add	w2, w0, 8
+	mov	x1, 0
+.L281:
+	add	x5, x1, x0
+	add	x1, x1, 4
+	add	x5, x22, x5
+	cmp	x1, 24
+	ldrb	w6, [x5,4]
+	ldrb	w5, [x19,x0]
+	add	w5, w6, w5
+	strb	w5, [x19,w2,sxtw]
+	add	w2, w2, 8
+	bne	.L281
+	add	x0, x0, 1
+	cmp	x0, 4
+	bne	.L280
+	add	w21, w21, 1
+	strb	wzr, [x19,16]
+	strb	wzr, [x19,24]
+	strb	wzr, [x19,32]
+	uxtb	w21, w21
+	strb	wzr, [x19,40]
+	strb	wzr, [x19,48]
+	strb	wzr, [x19,41]
+	strb	wzr, [x19,49]
+	b	.L277
+.L355:
+	sub	w0, w26, #3
+	cmp	w0, 4
+	bhi	.L284
+	mul	w25, w28, w27
+	sub	w23, w28, #1
+	mov	w21, 0
+	lsl	w0, w25, 4
+	asr	w22, w25, 2
+	str	w0, [x29,124]
+	add	x25, x20, :lo12:.LANCHOR0
+	lsl	w0, w22, 1
+	uxtb	x23, w23
+	str	w0, [x29,120]
+	add	x0, x25, 40
+	add	x23, x23, 1
+	str	x0, [x29,128]
+	sub	w0, w26, #5
+	str	w0, [x29,136]
+.L285:
+	ldrb	w0, [x25,1676]
+	cmp	w0, w21
+	bhi	.L325
+.L284:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	strb	w28, [x20,4057]
+	strb	w27, [x20,4058]
+	ldp	x25, x26, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+.L325:
+	add	x0, x25, x21, sxtw
+	ldrb	w1, [x0,1680]
+	str	x1, [x29,112]
+	lsl	x0, x1, 4
+	mov	x24, x1
+	ldr	x1, [x29,128]
+	add	x6, x1, x0
+	ldr	x0, [x1,x0]
+	ldrb	w19, [x6,8]
+	add	x19, x0, x19, lsl 8
+	mov	w0, 255
+	str	w0, [x19,2056]
+	mov	w0, w24
+	bl	NandcWaitFlashReady
+	cmp	w26, 7
+	add	x6, x25, 4056
+	ldr	x1, [x29,112]
+	beq	.L286
+	add	x1, x6, x1, lsl 6
+	add	x6, x1, 20
+	b	.L287
+.L286:
+	mov	x0, 160
+	madd	x1, x1, x0, x6
+	add	x6, x1, 28
+.L287:
+	mov	w0, 54
+	cmp	w26, 4
+	str	w0, [x19,2056]
+	bne	.L288
+	mov	w0, 255
+	str	w0, [x19,2052]
+	mov	w0, 64
+	str	w0, [x19,2048]
+	mov	w0, 204
+	b	.L360
+.L288:
+	ldr	w0, [x29,136]
+	cmp	w0, 1
+	bhi	.L290
+	ldrb	w0, [x25,4060]
+	str	w0, [x19,2052]
+	mov	w0, 82
+	b	.L361
+.L290:
+	mov	w0, 174
+	str	w0, [x19,2052]
+	str	wzr, [x19,2048]
+	mov	w0, 176
+.L360:
+	str	w0, [x19,2052]
+	mov	w0, 77
+.L361:
+	str	w0, [x19,2048]
+	mov	w0, 22
+	str	w0, [x19,2056]
+	mov	w0, 23
+	str	w0, [x19,2056]
+	mov	w0, 4
+	str	w0, [x19,2056]
+	mov	w0, 25
+	str	w0, [x19,2056]
+	cmp	w26, 6
+	str	wzr, [x19,2056]
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	bne	.L291
+	mov	w0, 31
+	str	w0, [x19,2052]
+	b	.L292
+.L291:
+	str	wzr, [x19,2052]
+.L292:
+	mov	w7, 2
+	str	w7, [x19,2052]
+	str	wzr, [x19,2052]
+	mov	w0, 48
+	str	w0, [x19,2056]
+	mov	w0, w24
+	str	x6, [x29,104]
+	str	x7, [x29,112]
+	bl	NandcWaitFlashReady
+	ldr	w0, [x29,136]
+	mov	w1, 16
+	ldr	x6, [x29,104]
+	cmp	w0, 1
+	bls	.L294
+	ldr	x7, [x29,112]
+	cmp	w26, 7
+	mov	w1, 32
+	csel	w1, w1, w7, eq
+.L294:
+	ldr	x0, [x25]
+	mov	x7, 0
+.L295:
+	ldr	w8, [x19,2048]
+	strb	w8, [x0,x7]
+	add	x7, x7, 1
+	cmp	w1, w7, uxtb
+	bhi	.L295
+	cmp	w26, 7
+	bne	.L296
+	mov	w1, 0
+.L298:
+	ldrb	w7, [x0]
+	cmp	w7, 12
+	beq	.L297
+	ldrb	w7, [x0,1]
+	cmp	w7, 10
+	beq	.L297
+	add	w1, w1, 1
+	add	x0, x0, 4
+	uxtb	w1, w1
+	cmp	w1, 8
+	bne	.L298
+	b	.L299
+.L297:
+	cmp	w1, 7
+	bne	.L300
+.L299:
+	adrp	x0, .LC2
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC2
+	bl	printk
+.L301:
+	b	.L301
+.L296:
+	cmp	w26, 6
+	bne	.L300
+	mov	x1, 0
+.L302:
+	ldrb	w7, [x0,x1]
+	cmp	w7, 12
+	beq	.L300
+	add	x7, x0, x1
+	ldrb	w7, [x7,8]
+	cmp	w7, 4
+	beq	.L300
+	add	x1, x1, 1
+	cmp	x1, 8
+	bne	.L302
+	adrp	x0, .LC2
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC2
+	bl	printk
+.L304:
+	b	.L304
+.L300:
+	ldr	x9, [x25]
+	mov	x0, 0
+.L305:
+	ldr	w1, [x29,124]
+	cmp	w1, w0
+	ble	.L362
+	ldr	w1, [x19,2048]
+	strb	w1, [x9,x0]
+	add	x0, x0, 1
+	b	.L305
+.L362:
+	ldr	x11, [x25]
+	mov	w8, w22
+	mov	w7, 8
+.L308:
+	mov	w0, 0
+.L307:
+	add	w1, w0, w8
+	add	w0, w0, 1
+	sbfiz	x1, x1, 2, 32
+	cmp	w0, w22
+	ldr	w10, [x11,x1]
+	mvn	w10, w10
+	str	w10, [x11,x1]
+	bne	.L307
+	ldr	w0, [x29,120]
+	subs	w7, w7, #1
+	add	w8, w8, w0
+	bne	.L308
+	mov	x7, 0
+	mov	w15, 1
+.L309:
+	mov	w1, 0
+	ldr	x14, [x25]
+	mov	w10, w1
+.L313:
+	lsl	w8, w15, w10
+	mov	w12, w7
+	mov	w0, 16
+	mov	w11, 0
+.L311:
+	ldr	w13, [x14,w12,sxtw 2]
+	add	w12, w12, w22
+	and	w13, w8, w13
+	cmp	w13, w8
+	csinc	w11, w11, w11, ne
+	subs	w0, w0, #1
+	bne	.L311
+	cmp	w11, 9
+	orr	w8, w1, w8
+	add	w10, w10, 1
+	csel	w1, w8, w1, cs
+	cmp	w10, 32
+	bne	.L313
+	str	w1, [x14,x7,lsl 2]
+	add	x7, x7, 1
+	cmp	w22, w7
+	bgt	.L309
+	mov	x7, 0
+	ldr	x1, [x25]
+	mov	w8, w7
+.L316:
+	ldr	w10, [x1,x7]
+	add	x7, x7, 4
+	cmp	w10, wzr
+	csinc	w8, w8, w8, ne
+	cmp	x7, 32
+	bne	.L316
+	cmp	w8, 7
+	ble	.L317
+	adrp	x0, .LC3
+	mov	w2, 1
+	add	x0, x0, :lo12:.LC3
+	mov	w3, 1024
+	bl	rknand_print_hex
+	adrp	x0, .LC2
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC2
+	bl	printk
+.L318:
+	b	.L318
+.L317:
+	cmp	w26, 6
+	mov	w7, 4
+	beq	.L319
+	cmp	w26, 7
+	mov	w7, 10
+	mov	w1, 8
+	csel	w7, w1, w7, ne
+.L319:
+	mov	w8, 0
+.L320:
+	mov	x1, 0
+.L321:
+	add	w10, w0, w1
+	ldrb	w11, [x9,x1]
+	add	x1, x1, 1
+	cmp	w28, w1, uxtb
+	strb	w11, [x6,w10,sxtw]
+	bhi	.L321
+	add	w8, w8, 1
+	add	x9, x9, x23
+	cmp	w8, w27
+	add	w0, w0, w7
+	blt	.L320
+	mov	w0, 255
+	str	w0, [x19,2056]
+	mov	w0, w24
+	bl	NandcWaitFlashReady
+	ldr	w0, [x29,136]
+	cmp	w0, 1
+	bhi	.L323
+	mov	w0, 54
+	str	w0, [x19,2056]
+	adrp	x0, .LANCHOR0+4060
+	mov	w1, -1
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+4060]
+	str	w0, [x19,2052]
+	mov	w0, 22
+	str	wzr, [x19,2048]
+	str	w0, [x19,2056]
+	mov	w0, w21
+	bl	FlashReadCmd
+	b	.L324
+.L323:
+	mov	w0, 56
+	str	w0, [x19,2056]
+.L324:
+	mov	w0, w24
+	add	w21, w21, 1
+	bl	NandcWaitFlashReady
+	uxtb	w21, w21
+	b	.L285
+	.size	HynixGetReadRetryDefault, .-HynixGetReadRetryDefault
+	.align	2
+	.global	FlashGetReadRetryDefault
+	.type	FlashGetReadRetryDefault, %function
+FlashGetReadRetryDefault:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, w0
+	add	x29, sp, 0
+	cbz	w0, .L363
+	sub	w2, w0, #1
+	cmp	w2, 6
+	bhi	.L365
+	bl	HynixGetReadRetryDefault
+	b	.L363
+.L365:
+	cmp	w0, 49
+	bne	.L366
+	adrp	x0, .LANCHOR0
+	mov	w2, 64
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 4060
+	strb	w1, [x0,-4]
+	mov	w1, 4
+	strb	w1, [x0,-3]
+	mov	w1, 15
+	strb	w1, [x0,-2]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x1, x1, 2936
+	b	.L381
+.L366:
+	sub	w0, w0, #65
+	cmp	w0, 1
+	bls	.L372
+	cmp	w1, 33
+	bne	.L367
+.L372:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,4056]
+	mov	w1, 4
+	b	.L382
+.L367:
+	cmp	w1, 67
+	beq	.L373
+	cmp	w1, 34
+	bne	.L369
+.L373:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,4056]
+	mov	w1, 5
+.L382:
+	strb	w1, [x0,4057]
+	mov	w1, 7
+	strb	w1, [x0,4058]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, 4060
+	add	x1, x1, 2784
+	mov	w2, 45
+	b	.L381
+.L369:
+	cmp	w1, 68
+	beq	.L374
+	cmp	w1, 35
+	bne	.L363
+.L374:
+	adrp	x0, .LANCHOR0
+	mov	w2, 95
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 4060
+	strb	w1, [x0,-4]
+	mov	w1, 5
+	strb	w1, [x0,-3]
+	mov	w1, 17
+	strb	w1, [x0,-2]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x1, x1, 2832
+.L381:
+	bl	ftl_memcpy
+.L363:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashGetReadRetryDefault, .-FlashGetReadRetryDefault
+	.align	2
+	.global	FlashReadDpCmd
+	.type	FlashReadDpCmd, %function
+FlashReadDpCmd:
+	stp	x29, x30, [sp, -80]!
+	adrp	x3, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	add	x3, x3, :lo12:.LANCHOR0
+	uxtb	w21, w0
+	add	x4, x3, 40
+	sbfiz	x0, x21, 4, 32
+	add	x3, x3, 104
+	str	x23, [sp,48]
+	stp	x19, x20, [sp,16]
+	add	x5, x4, x0
+	and	w23, w2, 255
+	ldr	x6, [x4,x0]
+	lsr	w22, w2, 8
+	ldrb	w0, [x3,16]
+	lsr	w4, w1, 8
+	ldrb	w19, [x5,8]
+	lsr	w20, w2, 16
+	cmp	w0, 1
+	and	w5, w1, 255
+	lsr	w0, w1, 16
+	bne	.L384
+	add	x19, x6, x19, lsl 8
+	ldrb	w2, [x3,8]
+	str	x1, [x29,72]
+	str	w2, [x19,2056]
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w5, [x19,2052]
+	str	w4, [x19,2052]
+	str	w0, [x19,2052]
+	ldrb	w0, [x3,9]
+	str	w0, [x19,2056]
+	mov	w0, w21
+	bl	NandcWaitFlashReady
+	str	wzr, [x19,2056]
+	str	wzr, [x19,2052]
+	mov	w0, 48
+	str	wzr, [x19,2052]
+	str	w23, [x19,2052]
+	str	w22, [x19,2052]
+	str	w20, [x19,2052]
+	str	w0, [x19,2056]
+	ldr	x1, [x29,72]
+	b	.L385
+.L384:
+	add	x19, x6, x19, lsl 8
+	ldrb	w2, [x3,8]
+	str	w2, [x19,2056]
+	str	w5, [x19,2052]
+	str	w4, [x19,2052]
+	str	w0, [x19,2052]
+	ldrb	w0, [x3,9]
+	str	w0, [x19,2056]
+	mov	w0, 48
+	str	w23, [x19,2052]
+	str	w22, [x19,2052]
+	str	w20, [x19,2052]
+	str	w0, [x19,2056]
+.L385:
+	mov	w0, w21
+	bl	FlashSetRandomizer
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FlashReadDpCmd, .-FlashReadDpCmd
+	.align	2
+	.global	ftl_flash_de_init
+	.type	ftl_flash_de_init, %function
+ftl_flash_de_init:
+	stp	x29, x30, [sp, -32]!
+	mov	w0, 0
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	bl	NandcWaitFlashReady
+	bl	FlashSetReadRetryDefault
+	ldrb	w0, [x19,565]
+	cbz	w0, .L387
+	ldrb	w0, [x19,564]
+	tbz	x0, 0, .L387
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	strb	wzr, [x19,565]
+.L387:
+	adrp	x0, .LANCHOR0+40
+	ldr	x0, [x0,#:lo12:.LANCHOR0+40]
+	str	wzr, [x0,336]
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_flash_de_init, .-ftl_flash_de_init
+	.align	2
+	.global	NandcRandmzSel
+	.type	NandcRandmzSel, %function
+NandcRandmzSel:
+	adrp	x2, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x2, x2, :lo12:.LANCHOR0
+	add	x2, x2, 40
+	ldr	x0, [x2,x0]
+	str	w1, [x0,336]
+	ret
+	.size	NandcRandmzSel, .-NandcRandmzSel
+	.align	2
+	.global	NandcTimeCfg
+	.type	NandcTimeCfg, %function
+NandcTimeCfg:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w19, w0
+	mov	w0, 0
+	bl	rknand_get_clk_rate
+	mov	w2, 16960
+	adrp	x1, .LANCHOR0
+	movk	w2, 0xf, lsl 16
+	add	x1, x1, :lo12:.LANCHOR0
+	sdiv	w0, w0, w2
+	cmp	w0, 250
+	ble	.L396
+	ldr	x0, [x1,3976]
+	mov	w1, 8354
+	b	.L403
+.L396:
+	cmp	w0, 220
+	ble	.L398
+	ldr	x0, [x1,3976]
+	b	.L404
+.L398:
+	cmp	w0, 185
+	ble	.L399
+	ldr	x0, [x1,3976]
+	mov	w1, 4226
+	b	.L403
+.L399:
+	cmp	w0, 160
+	ldr	x0, [x1,3976]
+	ble	.L400
+	mov	w1, 4194
+	b	.L403
+.L400:
+	cmp	w19, 35
+	mov	w1, 4193
+	bls	.L403
+	cmp	w19, 99
+	mov	w1, 4225
+	bls	.L403
+.L404:
+	mov	w1, 8322
+.L403:
+	str	w1, [x0,4]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	NandcTimeCfg, .-NandcTimeCfg
+	.align	2
+	.global	FlashTimingCfg
+	.type	FlashTimingCfg, %function
+FlashTimingCfg:
+	sub	w1, w0, #4096
+	sub	w1, w1, #97
+	stp	x29, x30, [sp, -16]!
+	and	w1, w1, -33
+	cmp	w1, 1
+	add	x29, sp, 0
+	bls	.L406
+	mov	w1, 8322
+	cmp	w0, w1
+	bne	.L407
+.L406:
+	adrp	x1, .LANCHOR0+3976
+	ldr	x1, [x1,#:lo12:.LANCHOR0+3976]
+	str	w0, [x1,4]
+.L407:
+	adrp	x0, .LANCHOR1+277
+	ldrb	w0, [x0,#:lo12:.LANCHOR1+277]
+	bl	NandcTimeCfg
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashTimingCfg, .-FlashTimingCfg
+	.align	2
+	.global	NandcInit
+	.type	NandcInit, %function
+NandcInit:
+	stp	x29, x30, [sp, -32]!
+	mov	w3, 1
+	adrp	x1, .LANCHOR2
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	mov	x19, x1
+	add	x2, x20, :lo12:.LANCHOR0
+	str	w3, [x2,64]
+	mov	w3, 2
+	str	wzr, [x2,48]
+	str	w3, [x2,80]
+	mov	w3, 3
+	str	x0, [x2,40]
+	str	w3, [x2,96]
+	add	x3, x1, :lo12:.LANCHOR2
+	str	x0, [x2,56]
+	str	x0, [x2,72]
+	str	x0, [x2,88]
+	str	x0, [x2,3976]
+	ldr	w2, [x0]
+	ubfx	x4, x2, 13, 1
+	str	w4, [x3,568]
+	ldr	w4, [x0,352]
+	and	w2, w2, 245760
+	orr	w2, w2, 256
+	ubfx	x4, x4, 16, 4
+	str	w4, [x3,572]
+	ldr	w4, [x0,352]
+	str	w4, [x3,576]
+	cmp	w4, 2049
+	bne	.L409
+	mov	w1, 8
+	str	w1, [x3,572]
+.L409:
+	add	x20, x20, :lo12:.LANCHOR0
+	str	w2, [x0]
+	ldr	x0, [x20,3976]
+	str	wzr, [x0,336]
+	mov	w0, 40
+	bl	NandcTimeCfg
+	ldr	x0, [x20,3976]
+	mov	w1, 8322
+	str	w1, [x0,344]
+	mov	w1, 6145
+	movk	w1, 0x18, lsl 16
+	str	w1, [x0,304]
+	mov	w0, 36864
+	bl	ftl_malloc
+	add	x1, x19, :lo12:.LANCHOR2
+	str	x0, [x1,584]
+	str	x0, [x1,592]
+	add	x0, x0, 32768
+	str	wzr, [x1,632]
+	str	x0, [x1,600]
+	str	wzr, [x1,640]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	NandcInit, .-NandcInit
+	.align	2
+	.global	NandcGetTimeCfg
+	.type	NandcGetTimeCfg, %function
+NandcGetTimeCfg:
+	adrp	x4, .LANCHOR0
+	add	x4, x4, :lo12:.LANCHOR0
+	ldr	x5, [x4,3976]
+	ldr	w5, [x5,4]
+	str	w5, [x0]
+	ldr	x0, [x4,3976]
+	ldr	w0, [x0]
+	str	w0, [x1]
+	ldr	x0, [x4,3976]
+	ldr	w0, [x0,304]
+	str	w0, [x2]
+	ldr	x1, [x4,3976]
+	ldr	w0, [x1,308]
+	ldr	w1, [x1,344]
+	and	w0, w0, 255
+	orr	w0, w0, w1, lsl 16
+	str	w0, [x3]
+	ret
+	.size	NandcGetTimeCfg, .-NandcGetTimeCfg
+	.align	2
+	.global	NandcBchSel
+	.type	NandcBchSel, %function
+NandcBchSel:
+	adrp	x1, .LANCHOR0+3976
+	uxtb	w0, w0
+	cmp	w0, 16
+	ldr	x2, [x1,#:lo12:.LANCHOR0+3976]
+	mov	w1, 1
+	str	w1, [x2,8]
+	adrp	x1, .LANCHOR2+644
+	str	w0, [x1,#:lo12:.LANCHOR2+644]
+	mov	w1, 4096
+	bne	.L412
+.L415:
+	and	w1, w1, -17
+	b	.L413
+.L412:
+	cmp	w0, 24
+	bne	.L414
+	orr	w1, w1, 16
+	b	.L413
+.L414:
+	cmp	w0, 40
+	orr	w1, w1, 262144
+	orr	w1, w1, 16
+	beq	.L415
+.L413:
+	orr	w1, w1, 1
+	str	w1, [x2,12]
+	ret
+	.size	NandcBchSel, .-NandcBchSel
+	.align	2
+	.global	FlashBchSel
+	.type	FlashBchSel, %function
+FlashBchSel:
+	stp	x29, x30, [sp, -16]!
+	adrp	x1, .LANCHOR0+4044
+	uxtb	w0, w0
+	add	x29, sp, 0
+	strb	w0, [x1,#:lo12:.LANCHOR0+4044]
+	bl	NandcBchSel
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashBchSel, .-FlashBchSel
+	.align	2
+	.global	ftl_flash_resume
+	.type	ftl_flash_resume, %function
+ftl_flash_resume:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LANCHOR0
+	add	x1, x0, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	adrp	x20, IDByte
+	mov	x19, 0
+	ldr	x2, [x1,3976]
+	mov	x22, x0
+	ldr	w3, [x1,3984]
+	add	x20, x20, :lo12:IDByte
+	ldr	w21, [x1,4000]
+	str	w3, [x2]
+	ldr	w3, [x1,3988]
+	ldr	x2, [x1,3976]
+	str	w3, [x2,4]
+	ldr	w3, [x1,3992]
+	ldr	x2, [x1,3976]
+	str	w3, [x2,8]
+	ldr	w3, [x1,3996]
+	str	w3, [x2,12]
+	str	w21, [x2,304]
+	ldr	w3, [x1,4004]
+	str	w3, [x2,308]
+	ldr	w3, [x1,4008]
+	str	w3, [x2,336]
+	ldr	w1, [x1,4012]
+	str	w1, [x2,344]
+.L422:
+	lsl	x0, x19, 3
+	ldrb	w1, [x0,x20]
+	sub	w1, w1, #1
+	uxtb	w1, w1
+	cmp	w1, 253
+	bhi	.L421
+	mov	w0, w19
+	bl	FlashReset
+.L421:
+	add	x19, x19, 1
+	cmp	x19, 4
+	bne	.L422
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrb	w0, [x19,565]
+	cbz	w0, .L423
+	mov	w0, 1
+	bl	NandcSetMode
+	ldrb	w0, [x19,564]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x19,564]
+	bl	NandcSetMode
+	lsr	w0, w21, 8
+	bl	NandcSetDdrPara
+.L423:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	x0, [x0,1912]
+	ldrb	w0, [x0,20]
+	bl	FlashBchSel
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_flash_resume, .-ftl_flash_resume
+	.align	2
+	.global	ftl_nandc_get_irq_status
+	.type	ftl_nandc_get_irq_status, %function
+ftl_nandc_get_irq_status:
+	ldr	w0, [x0,372]
+	ret
+	.size	ftl_nandc_get_irq_status, .-ftl_nandc_get_irq_status
+	.align	2
+	.global	NandcIqrWaitFlashReady
+	.type	NandcIqrWaitFlashReady, %function
+NandcIqrWaitFlashReady:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	bl	rk_nandc_rb_irq_flag_init
+	ldr	w0, [x19,368]
+	orr	w0, w0, 2
+	str	w0, [x19,368]
+	ldr	w0, [x19,364]
+	orr	w0, w0, 2
+	str	w0, [x19,364]
+	ldr	w0, [x19]
+	tbnz	x0, 9, .L430
+	mov	x0, x19
+	bl	wait_for_nand_flash_ready
+	b	.L429
+.L430:
+	ldr	w0, [x19,368]
+	orr	w0, w0, 2
+	str	w0, [x19,368]
+	ldr	w0, [x19,364]
+	and	w0, w0, -3
+	str	w0, [x19,364]
+.L429:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	NandcIqrWaitFlashReady, .-NandcIqrWaitFlashReady
+	.align	2
+	.global	FlashEraseBlocks
+	.type	FlashEraseBlocks, %function
+FlashEraseBlocks:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	mov	w26, w1
+	adrp	x1, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	add	x20, x1, :lo12:.LANCHOR0
+	str	x1, [x29,104]
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	mov	w23, w2
+	mov	x24, x0
+	ldrb	w2, [x20,24]
+	mov	w19, 0
+	cbz	w2, .L433
+	mov	w1, w23
+	bl	FlashEraseSLc2KBlocks
+	b	.L434
+.L433:
+	mov	w27, 56
+	adrp	x28, .LANCHOR2
+	add	x25, x20, 1720
+.L464:
+	cmp	w19, w23
+	bcs	.L465
+	umull	x5, w19, w27
+	mov	w1, 0
+	sub	w4, w23, w19
+	add	x21, x24, x5
+	add	x2, x29, 120
+	mov	x0, x21
+	add	x3, x29, 124
+	str	x5, [x29,96]
+	bl	LogAddr2PhyAddr
+	mov	w22, w0
+	ldrb	w1, [x20,1676]
+	ldr	w0, [x29,124]
+	ldr	x5, [x29,96]
+	cmp	w0, w1
+	bcc	.L435
+	mov	w0, -1
+	str	w0, [x24,x5]
+	b	.L436
+.L435:
+	add	x1, x28, :lo12:.LANCHOR2
+	mov	x2, 24
+	ldrb	w1, [x1,648]
+	cmp	w1, wzr
+	uxtw	x1, w0
+	csel	w22, w22, wzr, ne
+	madd	x1, x1, x2, x25
+	ldr	x1, [x1,8]
+	cbz	x1, .L438
+	bl	FlashWaitCmdDone
+.L438:
+	ldr	w1, [x29,124]
+	mov	x0, 24
+	ldr	w2, [x29,120]
+	madd	x0, x1, x0, x25
+	str	x21, [x0,8]
+	str	xzr, [x0,16]
+	str	w2, [x0,4]
+	cbz	w22, .L439
+	add	w2, w19, 1
+	umull	x2, w2, w27
+	add	x2, x24, x2
+	str	x2, [x0,16]
+.L439:
+	add	x0, x20, x1
+	ldrb	w21, [x0,1680]
+	mov	x0, 24
+	mul	x1, x1, x0
+	mov	w0, w21
+	strb	w21, [x25,x1]
+	bl	NandcFlashCs
+	cmp	w26, 1
+	bne	.L440
+	ldrb	w0, [x20,136]
+	cbz	w0, .L440
+	mov	w0, w21
+	bl	flash_enter_slc_mode
+	b	.L441
+.L440:
+	mov	w0, w21
+	bl	flash_exit_slc_mode
+.L441:
+	ldr	w1, [x29,124]
+	add	x0, x20, 1688
+	add	w19, w19, w22
+	ldr	w0, [x0,x1,lsl 2]
+	ldr	w1, [x29,120]
+	cmp	w0, wzr
+	mov	w0, w21
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	ldr	w1, [x29,120]
+	mov	w0, w21
+	mov	w2, w22
+	bl	FlashEraseCmd
+	mov	w0, w21
+	bl	NandcFlashDeCs
+.L436:
+	add	w19, w19, 1
+	b	.L464
+.L465:
+	ldr	x0, [x29,104]
+	mov	x20, 0
+	mov	x21, 24
+	add	x19, x0, :lo12:.LANCHOR0
+	ldr	x0, [x19,3976]
+	bl	NandcIqrWaitFlashReady
+.L443:
+	ldrb	w0, [x19,1676]
+	cmp	w0, w20
+	bls	.L466
+	mov	w0, w20
+	bl	FlashWaitCmdDone
+	cmp	w26, 1
+	bne	.L444
+	ldrb	w0, [x19,136]
+	cbz	w0, .L444
+	madd	x0, x20, x21, x19
+	ldrb	w0, [x0,1720]
+	bl	flash_exit_slc_mode
+.L444:
+	add	x20, x20, 1
+	b	.L443
+.L466:
+	adrp	x0, .LANCHOR2+652
+	ldr	w0, [x0,#:lo12:.LANCHOR2+652]
+	cbnz	w0, .L446
+.L448:
+	mov	w0, 0
+	b	.L434
+.L446:
+	adrp	x0, IDByte
+	ldrb	w0, [x0,#:lo12:IDByte]
+	cmp	w0, 69
+	bne	.L448
+	mov	x0, 0
+	mov	x1, 56
+.L447:
+	cmp	w23, w0
+	bls	.L448
+	mul	x2, x0, x1
+	add	x0, x0, 1
+	str	wzr, [x24,x2]
+	b	.L447
+.L434:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FlashEraseBlocks, .-FlashEraseBlocks
+	.align	2
+	.global	NandcSendDumpDataStart
+	.type	NandcSendDumpDataStart, %function
+NandcSendDumpDataStart:
+	sub	sp, sp, #16
+	mov	w2, 1
+	mov	w1, 10
+	bfi	w1, w2, 5, 2
+	ldr	w2, [x0,16]
+	str	w2, [sp,8]
+	orr	w1, w1, 536870912
+	orr	w1, w1, 1024
+	ldr	w2, [sp,8]
+	orr	w1, w1, 2097152
+	and	w2, w2, -5
+	str	w2, [sp,8]
+	ldr	w2, [sp,8]
+	add	sp, sp, 16
+	str	w2, [x0,16]
+	str	w1, [x0,8]
+	orr	w1, w1, 4
+	str	w1, [x0,8]
+	ret
+	.size	NandcSendDumpDataStart, .-NandcSendDumpDataStart
+	.align	2
+	.global	NandcSendDumpDataDone
+	.type	NandcSendDumpDataDone, %function
+NandcSendDumpDataDone:
+	sub	sp, sp, #16
+.L469:
+	ldr	w1, [x0,8]
+	str	w1, [sp,8]
+	ldr	w1, [sp,8]
+	tbz	x1, 20, .L469
+	add	sp, sp, 16
+	ret
+	.size	NandcSendDumpDataDone, .-NandcSendDumpDataDone
+	.align	2
+	.global	NandcXferStart
+	.type	NandcXferStart, %function
+NandcXferStart:
+	stp	x29, x30, [sp, -96]!
+	ubfiz	x0, x0, 4, 8
+	ubfx	x3, x3, 1, 7
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	mov	x22, x4
+	adrp	x4, .LANCHOR0
+	add	x4, x4, :lo12:.LANCHOR0
+	str	x25, [sp,64]
+	add	x4, x4, 40
+	uxtb	w25, w1
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	add	x1, x4, x0
+	ubfiz	w20, w25, 1, 1
+	ldr	x21, [x4,x0]
+	orr	w20, w20, 8
+	adrp	x19, .LANCHOR2
+	uxtb	w23, w2
+	ldrb	w0, [x1,8]
+	mov	w1, 16
+	ldr	w24, [x21,12]
+	bfi	w24, w1, 8, 8
+	and	w24, w24, -9
+	bfi	w24, w0, 5, 3
+	mov	w0, 1
+	bfi	w20, w0, 5, 2
+	add	x0, x19, :lo12:.LANCHOR2
+	orr	w20, w20, 536870912
+	orr	w20, w20, 1024
+	ldr	w0, [x0,572]
+	bfi	w20, w3, 4, 1
+	cmp	w0, 3
+	bls	.L473
+	ldr	w0, [x21,16]
+	cmp	x5, xzr
+	str	w0, [x29,88]
+	cset	w7, ne
+	ldr	w0, [x29,88]
+	and	w0, w0, -5
+	str	w0, [x29,88]
+	cbnz	w7, .L487
+	cbz	x22, .L474
+.L487:
+	cbnz	w25, .L476
+.L484:
+	mov	x0, x21
+	add	w23, w23, 1
+	asr	w23, w23, 1
+	bl	rk_nandc_xfer_irq_flag_init
+	bfi	w20, w23, 22, 6
+	ldr	w0, [x21,368]
+	orr	w0, w0, 1
+	str	w0, [x21,368]
+	ldr	w0, [x21,364]
+	orr	w0, w0, 1
+	str	w0, [x21,364]
+	mov	x0, x22
+	cbnz	x22, .L478
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x0, [x0,592]
+	b	.L478
+.L476:
+	add	x1, x19, :lo12:.LANCHOR2
+	mov	w4, 128
+	mov	w2, 0
+	lsr	w8, w23, 1
+	mov	w3, w2
+	mov	w9, -1
+	ldr	w0, [x1,644]
+	cmp	w0, 25
+	mov	w0, 64
+	csel	w4, w0, w4, cc
+.L480:
+	cmp	w3, w8
+	bcs	.L484
+	lsr	w0, w2, 2
+	ubfiz	x0, x0, 2, 30
+	cbz	w7, .L481
+	ldrh	w6, [x5,2]
+	ldr	x10, [x1,600]
+	ldrh	w11, [x5],4
+	orr	w6, w11, w6, lsl 16
+	str	w6, [x10,x0]
+	b	.L482
+.L481:
+	ldr	x6, [x1,600]
+	str	w9, [x6,x0]
+.L482:
+	add	w3, w3, 1
+	add	w2, w2, w4
+	b	.L480
+.L478:
+	add	x19, x19, :lo12:.LANCHOR2
+	ubfx	x23, x20, 22, 5
+	mov	w2, w25
+	and	x22, x22, 3
+	ldr	x1, [x19,600]
+	str	x1, [x19,616]
+	lsl	w1, w23, 10
+	str	x0, [x19,608]
+	bl	rknand_dma_map_single
+	str	w0, [x19,624]
+	ldr	x0, [x19,616]
+	lsl	w1, w23, 7
+	mov	w2, w25
+	bl	rknand_dma_map_single
+	str	w0, [x19,628]
+	mov	w0, 1
+	str	w0, [x19,632]
+	ldr	w0, [x19,624]
+	mov	w1, 16
+	str	w0, [x21,20]
+	ldr	w0, [x19,628]
+	str	w0, [x21,24]
+	str	wzr, [x29,88]
+	ldr	w0, [x29,88]
+	bfi	w0, w1, 9, 5
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	orr	w0, w0, 448
+	str	w0, [x29,88]
+	cbnz	x22, .L485
+	ldr	w0, [x29,88]
+	mov	w1, 2
+	bfi	w0, w1, 3, 3
+	str	w0, [x29,88]
+.L485:
+	ldr	w0, [x29,88]
+	cmp	w25, wzr
+	cset	w1, eq
+	orr	w0, w0, 4
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	bfi	w0, w1, 1, 1
+	str	w0, [x29,88]
+	ldr	w0, [x29,88]
+	orr	w0, w0, 1
+	str	w0, [x29,88]
+.L474:
+	ldr	w0, [x29,88]
+	str	w0, [x21,16]
+.L473:
+	str	w24, [x21,12]
+	str	w20, [x21,8]
+	orr	w20, w20, 4
+	str	w20, [x21,8]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	NandcXferStart, .-NandcXferStart
+	.align	2
+	.global	NandcXferComp
+	.type	NandcXferComp, %function
+NandcXferComp:
+	stp	x29, x30, [sp, -80]!
+	adrp	x1, .LANCHOR0
+	ubfiz	x0, x0, 4, 8
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	add	x1, x1, 40
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x23, [sp,48]
+	adrp	x20, .LANCHOR2
+	ldr	x19, [x1,x0]
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w0, [x0,572]
+	cmp	w0, 3
+	bls	.L522
+	ldr	w0, [x19,16]
+	tbz	x0, 2, .L522
+	mov	x0, x19
+	bl	wait_for_nandc_xfer_completed
+	ldr	w21, [x19,16]
+	ldr	w0, [x19,8]
+	ubfx	x21, x21, 1, 1
+	str	w0, [x29,64]
+	cbz	w21, .L493
+	adrp	x22, .LC4
+	adrp	x23, .LC5
+	mov	w21, 0
+	add	x22, x22, :lo12:.LC4
+	add	x23, x23, :lo12:.LC5
+.L494:
+	ldr	w2, [x19,28]
+	ldr	w1, [x29,64]
+	ubfx	x2, x2, 16, 5
+	ubfx	x1, x1, 22, 6
+	cmp	w2, w1
+	bge	.L502
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w0, [x0,572]
+	cmp	w0, 5
+	bhi	.L495
+.L498:
+	add	w21, w21, 1
+	and	w0, w21, 16777215
+	cbnz	w0, .L494
+	ldr	w2, [x19,28]
+	mov	w1, w21
+	ldr	w3, [x29,64]
+	mov	x0, x22
+	ubfx	x2, x2, 16, 5
+	ubfx	x3, x3, 22, 6
+	bl	printk
+	mov	x0, x23
+	mov	x1, x19
+	mov	w2, 4
+	mov	w3, 512
+	bl	rknand_print_hex
+	b	.L494
+.L495:
+	ldr	w0, [x19]
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	tbz	x0, 13, .L498
+	ldr	w0, [x29,72]
+	tbz	x0, 17, .L498
+.L502:
+	add	x19, x20, :lo12:.LANCHOR2
+	add	x19, x19, 592
+	ldr	w0, [x19,40]
+	cbz	w0, .L503
+	ldr	w1, [x29,64]
+	mov	w2, 0
+	ldr	w0, [x19,32]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	mov	w2, 0
+	ldr	w0, [x19,36]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 7
+	bl	rknand_dma_unmap_single
+	b	.L503
+.L493:
+	adrp	x22, .LC6
+	adrp	x23, .LC5
+	add	x22, x22, :lo12:.LC6
+	add	x23, x23, :lo12:.LC5
+.L504:
+	ldr	w0, [x29,64]
+	tbnz	x0, 20, .L530
+	ldr	w0, [x19,8]
+	add	w21, w21, 1
+	str	w0, [x29,64]
+	and	w0, w21, 16777215
+	cbnz	w0, .L504
+	ldr	w2, [x29,64]
+	mov	w1, w21
+	ldr	w3, [x19,28]
+	mov	x0, x22
+	ubfx	x3, x3, 16, 5
+	bl	printk
+	mov	x0, x23
+	mov	x1, x19
+	mov	w2, 4
+	mov	w3, 512
+	bl	rknand_print_hex
+	b	.L504
+.L530:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w0, [x0,640]
+	cbz	w0, .L507
+	mov	x0, x19
+	bl	NandcSendDumpDataStart
+.L507:
+	add	x21, x20, :lo12:.LANCHOR2
+	add	x21, x21, 592
+	ldr	w0, [x21,40]
+	cbz	w0, .L508
+	ldr	w1, [x29,64]
+	mov	w2, 1
+	ldr	w0, [x21,32]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	mov	w2, 1
+	ldr	w0, [x21,36]
+	ubfx	x1, x1, 22, 5
+	lsl	w1, w1, 7
+	bl	rknand_dma_unmap_single
+.L508:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w0, [x0,640]
+	cbz	w0, .L503
+	mov	x0, x19
+	bl	NandcSendDumpDataDone
+.L503:
+	add	x20, x20, :lo12:.LANCHOR2
+	str	wzr, [x20,632]
+	b	.L491
+.L522:
+	ldr	w0, [x19,8]
+	str	w0, [x29,64]
+	ldr	w0, [x29,64]
+	tbz	x0, 20, .L522
+.L491:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	NandcXferComp, .-NandcXferComp
+	.align	2
+	.global	NandcCopy1KB
+	.type	NandcCopy1KB, %function
+NandcCopy1KB:
+	stp	x29, x30, [sp, -48]!
+	uxtb	w1, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	uxtb	w19, w2
+	cmp	w1, 1
+	mov	x20, x4
+	ubfiz	x2, x19, 9, 8
+	add	x4, x0, 4096
+	add	x21, x0, 512
+	add	x2, x4, x2
+	bne	.L532
+	cbz	x3, .L533
+	mov	x0, x2
+	mov	x1, x3
+	mov	w2, 1024
+	bl	ftl_memcpy
+.L533:
+	cbz	x20, .L531
+	mov	w0, 48
+	lsr	w19, w19, 1
+	ldrb	w1, [x20,1]
+	mul	w19, w19, w0
+	ldrb	w0, [x20,2]
+	asr	w19, w19, 2
+	lsl	w0, w0, 16
+	orr	w0, w0, w1, lsl 8
+	ldrb	w1, [x20]
+	orr	w0, w0, w1
+	ldrb	w1, [x20,3]
+	orr	w0, w0, w1, lsl 24
+	str	w0, [x21,w19,sxtw 2]
+	b	.L531
+.L532:
+	cbz	x3, .L536
+	mov	x1, x2
+	mov	x0, x3
+	mov	w2, 1024
+	bl	ftl_memcpy
+.L536:
+	cbz	x20, .L531
+	mov	w0, 48
+	lsr	w19, w19, 1
+	mul	w19, w19, w0
+	asr	w19, w19, 2
+	ldr	w0, [x21,w19,sxtw 2]
+	strb	w0, [x20]
+	lsr	w1, w0, 8
+	strb	w1, [x20,1]
+	lsr	w1, w0, 16
+	lsr	w0, w0, 24
+	strb	w1, [x20,2]
+	strb	w0, [x20,3]
+.L531:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	NandcCopy1KB, .-NandcCopy1KB
+	.align	2
+	.global	NandcXferData
+	.type	NandcXferData, %function
+NandcXferData:
+	stp	x29, x30, [sp, -176]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	uxtb	w24, w0
+	adrp	x0, .LANCHOR0
+	stp	x27, x28, [sp,80]
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, x24, sxtw 4
+	ldr	x19, [x0,40]
+	and	x0, x3, 63
+	uxtb	w20, w1
+	uxtb	w23, w2
+	mov	x25, x3
+	mov	x21, x4
+	cbnz	x0, .L548
+	cbnz	x4, .L549
+	add	x0, x29, 112
+	mov	w1, 255
+	mov	w2, 64
+	add	x21, x29, 112
+	bl	ftl_memset
+.L549:
+	mov	w0, w24
+	mov	w1, w20
+	mov	w2, w23
+	mov	w3, 0
+	mov	x4, x25
+	mov	x5, x21
+	mov	w22, 0
+	bl	NandcXferStart
+	mov	w0, w24
+	bl	NandcXferComp
+	cbnz	w20, .L550
+	adrp	x0, .LANCHOR2
+	ubfx	x3, x23, 1, 7
+	add	x2, x0, :lo12:.LANCHOR2
+	mov	w4, 128
+	add	x3, x21, x3, lsl 2
+	ldr	w1, [x2,644]
+	cmp	w1, 25
+	mov	w1, 64
+	csel	w4, w1, w4, cc
+	mov	w1, w20
+.L552:
+	cmp	x21, x3
+	add	w5, w1, w4
+	beq	.L594
+	ldr	x6, [x2,600]
+	and	x1, x1, 4294967292
+	add	x21, x21, 4
+	ldr	w1, [x6,x1]
+	strb	w1, [x21,-4]
+	lsr	w6, w1, 8
+	strb	w6, [x21,-3]
+	lsr	w6, w1, 16
+	strb	w6, [x21,-2]
+	lsr	w1, w1, 24
+	strb	w1, [x21,-1]
+	mov	w1, w5
+	b	.L552
+.L594:
+	add	x0, x0, :lo12:.LANCHOR2
+	lsr	w23, w23, 2
+	ldr	w4, [x0,644]
+	ldr	w5, [x0,572]
+	mov	w0, 0
+	mov	w22, w0
+.L554:
+	cmp	w0, w23
+	bcs	.L550
+	cbz	w4, .L550
+	uxtw	x1, w0
+	add	x1, x1, 8
+	ldr	w1, [x19,x1,lsl 2]
+	str	w1, [x29,104]
+	ldr	w1, [x29,104]
+	tbnz	x1, 2, .L578
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 15, 1
+	cbnz	w3, .L578
+	cmp	w5, 5
+	bls	.L556
+	ldr	w2, [x29,104]
+	ubfx	x6, x2, 3, 5
+	ldr	w2, [x29,104]
+	ldr	w1, [x29,104]
+	ubfx	x2, x2, 27, 1
+	ubfx	x3, x1, 16, 5
+	ldr	w1, [x29,104]
+	orr	w2, w6, w2, lsl 5
+	ubfx	x1, x1, 29, 1
+	orr	w1, w3, w1, lsl 5
+	ldr	w3, [x29,104]
+	cmp	w2, w1
+	bls	.L557
+	ldr	w1, [x29,104]
+	ubfx	x3, x3, 3, 5
+	ubfx	x1, x1, 27, 1
+	orr	w3, w3, w1, lsl 5
+	b	.L558
+.L557:
+	ubfx	x1, x3, 16, 5
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 29, 1
+	b	.L593
+.L556:
+	cmp	w5, 3
+	bls	.L558
+	ldr	w2, [x29,104]
+	ubfx	x6, x2, 3, 5
+	ldr	w2, [x29,104]
+	ldr	w1, [x29,104]
+	ubfx	x2, x2, 28, 1
+	ubfx	x3, x1, 16, 5
+	ldr	w1, [x29,104]
+	orr	w2, w6, w2, lsl 5
+	ubfx	x1, x1, 30, 1
+	orr	w1, w3, w1, lsl 5
+	ldr	w3, [x29,104]
+	cmp	w2, w1
+	bls	.L559
+	ubfx	x1, x3, 3, 5
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 28, 1
+	b	.L593
+.L559:
+	ubfx	x1, x3, 16, 5
+	ldr	w3, [x29,104]
+	ubfx	x3, x3, 30, 1
+.L593:
+	orr	w3, w1, w3, lsl 5
+.L558:
+	cmp	w22, w3
+	csel	w22, w22, w3, cs
+	b	.L555
+.L578:
+	mov	w22, -1
+.L555:
+	add	w0, w0, 1
+	b	.L554
+.L550:
+	str	wzr, [x19,16]
+	b	.L561
+.L548:
+	cmp	w20, 1
+	bne	.L592
+	mov	w22, 0
+	mov	w27, 2
+.L562:
+	cmp	w22, w23
+	bcs	.L595
+	and	w26, w22, 3
+	mov	x3, x25
+	cbz	x25, .L564
+	ubfiz	x0, x22, 9, 23
+	add	x3, x25, x0
+.L564:
+	cmp	x21, xzr
+	mov	x0, x19
+	csel	w4, w27, wzr, ne
+	mov	w1, 1
+	mov	w2, w26
+	mul	w4, w4, w22
+	add	w22, w22, 2
+	add	x4, x21, x4
+	bl	NandcCopy1KB
+	mov	x4, 0
+	mov	w0, w24
+	mov	w1, 1
+	mov	w2, 2
+	mov	w3, w26
+	mov	x5, x4
+	bl	NandcXferStart
+	mov	w0, w24
+	bl	NandcXferComp
+	b	.L562
+.L595:
+	mov	w22, 0
+	b	.L561
+.L592:
+	mov	w1, 0
+	mov	x4, 0
+	mov	w26, 0
+	mov	w0, w24
+	mov	w2, 2
+	mov	w3, w1
+	mov	x5, x4
+	mov	w22, w26
+	mov	w27, 2
+	bl	NandcXferStart
+.L567:
+	cmp	w26, w23
+	bcs	.L561
+	mov	w0, w24
+	add	w28, w26, 2
+	bl	NandcXferComp
+	ldr	w0, [x19,32]
+	cmp	w28, w23
+	str	w0, [x29,104]
+	bcs	.L568
+	mov	x4, 0
+	mov	w0, w24
+	mov	w1, 0
+	mov	w2, 2
+	and	w3, w28, 3
+	mov	x5, x4
+	bl	NandcXferStart
+.L568:
+	ldr	w0, [x29,104]
+	tbnz	x0, 2, .L583
+	ldr	w0, [x29,104]
+	ubfx	x1, x0, 3, 5
+	ldr	w0, [x29,104]
+	ubfx	x0, x0, 27, 1
+	orr	w0, w1, w0, lsl 5
+	cmp	w22, w0
+	csel	w22, w22, w0, cs
+	b	.L569
+.L583:
+	mov	w22, -1
+.L569:
+	and	w2, w26, 3
+	mov	x3, x25
+	cbz	x25, .L570
+	ubfiz	x3, x26, 9, 23
+	add	x3, x25, x3
+.L570:
+	cmp	x21, xzr
+	mov	x0, x19
+	csel	w4, w27, wzr, ne
+	mov	w1, 0
+	mul	w4, w4, w26
+	mov	w26, w28
+	add	x4, x21, x4
+	bl	NandcCopy1KB
+	b	.L567
+.L561:
+	cbnz	w20, .L573
+	adrp	x0, .LANCHOR2+572
+	ldr	w0, [x0,#:lo12:.LANCHOR2+572]
+	cmp	w0, 5
+	bls	.L573
+	ldr	w0, [x19]
+	mov	w1, 8192
+	movk	w1, 0x2, lsl 16
+	and	w1, w0, w1
+	cmp	w1, 139264
+	bne	.L573
+	orr	w0, w0, 131072
+	mov	w22, -1
+	str	w0, [x19]
+.L573:
+	mov	w0, w22
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	NandcXferData, .-NandcXferData
+	.align	2
+	.global	FlashReadRawPage
+	.type	FlashReadRawPage, %function
+FlashReadRawPage:
+	stp	x29, x30, [sp, -64]!
+	mov	x4, x3
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w19, w0
+	adrp	x0, .LANCHOR1+265
+	str	x21, [sp,32]
+	mov	x21, x2
+	ldrb	w20, [x0,#:lo12:.LANCHOR1+265]
+	cbnz	w19, .L597
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w5, [x0,25]
+	ldr	w0, [x0,28]
+	mul	w0, w5, w0
+	cmp	w1, w0
+	mov	w0, 4
+	csel	w20, w20, w0, cs
+.L597:
+	mov	w0, w19
+	str	x4, [x29,48]
+	str	x1, [x29,56]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	x1, [x29,56]
+	mov	w0, w19
+	bl	FlashReadCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	ldr	x4, [x29,48]
+	mov	w2, w20
+	mov	x3, x21
+	mov	w1, 0
+	mov	w0, w19
+	bl	NandcXferData
+	mov	w20, w0
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	ldr	x21, [sp,32]
+	mov	w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FlashReadRawPage, .-FlashReadRawPage
+	.align	2
+	.global	FlashDdrTunningRead
+	.type	FlashDdrTunningRead, %function
+FlashDdrTunningRead:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	adrp	x19, .LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	uxtb	w24, w0
+	add	x27, x19, :lo12:.LANCHOR2
+	ldr	x0, [x20,3976]
+	mov	w22, 6
+	mov	w25, w1
+	mov	x28, x2
+	mov	x23, x3
+	mov	w26, w4
+	ldr	w0, [x0,304]
+	mov	w21, 1024
+	str	w0, [x29,124]
+	ldr	w0, [x27,572]
+	cmp	w0, 8
+	mov	w0, 12
+	csel	w22, w22, w0, cc
+	cbz	w4, .L600
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	mov	w0, w24
+	bl	FlashReset
+	mov	w1, w25
+	mov	x2, x28
+	mov	x3, x23
+	mov	w0, w24
+	bl	FlashReadRawPage
+	mov	w21, w0
+	ldrb	w0, [x27,564]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x27,564]
+	bl	NandcSetMode
+	cmn	w21, #1
+	bne	.L601
+.L610:
+	mov	w21, -1
+	b	.L602
+.L601:
+	adrp	x0, .LC7
+	mov	w1, w25
+	add	x0, x0, :lo12:.LC7
+	mov	w2, w21
+	bl	printk
+	cmp	w21, 9
+	bhi	.L603
+	add	x20, x20, x24, sxtw 4
+	ldr	x0, [x20,40]
+	ldr	w1, [x0,3840]
+	ldr	w1, [x0]
+	orr	w1, w1, 131072
+	str	w1, [x0]
+.L603:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldr	w0, [x19,656]
+	add	w0, w0, 1
+	str	w0, [x19,656]
+	cmp	w0, 2047
+	bls	.L602
+	mov	x23, 0
+	str	wzr, [x19,656]
+	mov	x28, x23
+.L600:
+	mov	w19, 0
+	mov	w27, -1
+	mov	w5, w19
+	mov	w6, w19
+	mov	w20, w19
+.L608:
+	mov	w0, w22
+	str	x5, [x29,104]
+	str	x6, [x29,112]
+	bl	NandcSetDdrPara
+	mov	w1, w25
+	mov	w0, w24
+	mov	x2, x28
+	mov	x3, x23
+	bl	FlashReadRawPage
+	add	w1, w21, 1
+	ldr	x6, [x29,112]
+	cmp	w0, w1
+	ldr	x5, [x29,104]
+	bhi	.L604
+	cmp	w0, 2
+	bhi	.L614
+	add	w20, w20, 1
+	cmp	w20, 9
+	bls	.L614
+	sub	w19, w22, w20
+	mov	w21, w0
+	mov	w27, 0
+	b	.L606
+.L604:
+	cmp	w6, w20
+	bcs	.L615
+	cmp	w20, 7
+	sub	w5, w19, w20
+	bhi	.L616
+	mov	w6, w20
+	b	.L615
+.L614:
+	mov	x23, 0
+	mov	w19, w22
+	mov	w21, w0
+	mov	w27, 0
+	mov	x28, x23
+	b	.L605
+.L615:
+	mov	w20, 0
+.L605:
+	add	w22, w22, 2
+	cmp	w22, 69
+	bls	.L608
+.L606:
+	cmp	w6, w20
+	csel	w19, w19, w5, cc
+	b	.L607
+.L616:
+	mov	w19, w5
+.L607:
+	cbz	w19, .L609
+	adrp	x0, .LC8
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC8
+	bl	printk
+	mov	w0, w19
+	bl	NandcSetDdrPara
+.L609:
+	cbz	w27, .L602
+	adrp	x0, .LC9
+	mov	w1, w24
+	add	x0, x0, :lo12:.LC9
+	mov	w2, w25
+	bl	printk
+	cbz	w26, .L610
+	ldr	w0, [x29,124]
+	lsr	w0, w0, 8
+	bl	NandcSetDdrPara
+.L602:
+	mov	w0, w21
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FlashDdrTunningRead, .-FlashDdrTunningRead
+	.align	2
+	.global	FlashReadPage
+	.type	FlashReadPage, %function
+FlashReadPage:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w20, w0
+	str	x27, [sp,80]
+	mov	w0, w20
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	w22, w1
+	mov	x25, x2
+	mov	x24, x3
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	mov	w19, w0
+	adrp	x23, .LANCHOR2
+	bne	.L626
+	adrp	x21, .LANCHOR0
+	add	x26, x21, :lo12:.LANCHOR0
+	ldrb	w27, [x26,32]
+	cbnz	w27, .L627
+.L629:
+	add	x0, x23, :lo12:.LANCHOR2
+	ldrb	w0, [x0,565]
+	cbz	w0, .L626
+	b	.L647
+.L627:
+	mov	w0, w20
+	mov	w1, w22
+	mov	x2, x25
+	mov	x3, x24
+	strb	wzr, [x26,32]
+	bl	FlashReadRawPage
+	strb	w27, [x26,32]
+	cmn	w0, #1
+	beq	.L629
+	mov	w19, w0
+	b	.L626
+.L647:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w1, w22
+	mov	x2, x25
+	mov	x3, x24
+	mov	w4, 1
+	ldr	x0, [x21,3976]
+	ldr	w26, [x0,304]
+	mov	w0, w20
+	bl	FlashDdrTunningRead
+	cmn	w0, #1
+	mov	w19, w0
+	beq	.L630
+	ldrb	w0, [x21,4044]
+	cmp	w19, w0, lsr 1
+	bls	.L626
+.L630:
+	lsr	w0, w26, 8
+	bl	NandcSetDdrPara
+.L626:
+	add	x21, x23, :lo12:.LANCHOR2
+	cmn	w19, #1
+	ldr	x4, [x21,664]
+	bne	.L631
+	cbz	x4, .L631
+	mov	w1, w22
+	mov	x2, x25
+	mov	x3, x24
+	mov	w0, w20
+	blr	x4
+	mov	w19, w0
+	adrp	x0, .LC10
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC10
+	mov	w2, w20
+	mov	w3, w22
+	bl	printk
+	cmn	w19, #1
+	bne	.L631
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w0, .L631
+	mov	w0, w20
+	bl	flash_enter_slc_mode
+	ldr	x4, [x21,664]
+	mov	w0, w20
+	mov	w1, w22
+	mov	x2, x25
+	mov	x3, x24
+	blr	x4
+	mov	w19, w0
+	mov	w0, w20
+	bl	flash_exit_slc_mode
+.L631:
+	mov	w0, w19
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FlashReadPage, .-FlashReadPage
+	.align	2
+	.global	FlashDdrParaScan
+	.type	FlashDdrParaScan, %function
+FlashDdrParaScan:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	mov	w20, w1
+	stp	x21, x22, [sp,32]
+	add	x22, x19, :lo12:.LANCHOR2
+	uxtb	w21, w0
+	ldrb	w0, [x22,564]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x22,564]
+	bl	NandcSetMode
+	mov	x2, 0
+	mov	w1, w20
+	mov	x3, x2
+	mov	w4, w2
+	mov	w0, w21
+	bl	FlashDdrTunningRead
+	mov	w22, w0
+	mov	x2, 0
+	mov	w0, w21
+	mov	w1, w20
+	mov	x3, x2
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	beq	.L652
+	cmn	w22, #1
+	bne	.L649
+.L652:
+	add	x20, x19, :lo12:.LANCHOR2
+	ldrb	w0, [x20,564]
+	tbz	x0, 0, .L649
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	strb	wzr, [x20,565]
+	b	.L651
+.L649:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, 1
+	strb	w0, [x19,565]
+.L651:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashDdrParaScan, .-FlashDdrParaScan
+	.align	2
+	.global	FlashLoadPhyInfo
+	.type	FlashLoadPhyInfo, %function
+FlashLoadPhyInfo:
+	stp	x29, x30, [sp, -112]!
+	mov	w0, 60
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	strb	w0, [x29,104]
+	mov	w0, 40
+	strb	w0, [x29,105]
+	mov	w0, 24
+	adrp	x25, .LANCHOR2
+	strb	w0, [x29,106]
+	adrp	x19, .LANCHOR0
+	mov	w0, 16
+	stp	x23, x24, [sp,48]
+	strb	w0, [x29,107]
+	adrp	x23, .LANCHOR1
+	add	x0, x25, :lo12:.LANCHOR2
+	ldr	x1, [x19,#:lo12:.LANCHOR0]
+	stp	x21, x22, [sp,32]
+	add	x21, x23, :lo12:.LANCHOR1
+	mov	w20, 0
+	stp	x27, x28, [sp,80]
+	add	x21, x21, 256
+	str	x1, [x0,672]
+	str	wzr, [x0,680]
+	mov	w27, 4
+	mov	w0, 0
+	mov	w24, -1
+	ldrh	w28, [x21,10]
+	bl	flash_enter_slc_mode
+.L660:
+	add	w26, w20, 1
+	mov	x22, 0
+.L662:
+	add	x0, x29, 104
+	ldrb	w0, [x22,x0]
+	bl	FlashBchSel
+	ldr	x2, [x19,#:lo12:.LANCHOR0]
+	mov	w0, 0
+	mov	w1, w20
+	mov	x3, 0
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	bne	.L661
+	ldr	x2, [x19,#:lo12:.LANCHOR0]
+	mov	w0, 0
+	mov	w1, w26
+	mov	x3, 0
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	bne	.L661
+	add	x22, x22, 1
+	cmp	x22, 4
+	beq	.L663
+	b	.L662
+.L664:
+	mov	w1, 2036
+	add	x0, x26, 12
+	mov	w24, -1
+	bl	JSHash
+	ldr	w1, [x26,8]
+	cmp	w1, w0
+	beq	.L674
+.L663:
+	subs	w27, w27, #1
+	add	w20, w20, w28
+	bne	.L660
+	mov	w0, w27
+.L673:
+	bl	flash_exit_slc_mode
+	mov	w0, w24
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+.L661:
+	add	x22, x25, :lo12:.LANCHOR2
+	mov	w0, 20036
+	movk	w0, 0x4e41, lsl 16
+	ldr	x26, [x22,672]
+	ldr	w1, [x26]
+	cmp	w1, w0
+	bne	.L663
+	cbnz	w24, .L664
+	add	x23, x23, :lo12:.LANCHOR1
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x23,266]
+	udiv	w20, w20, w0
+	mov	w0, w24
+	add	w20, w20, 1
+	str	w20, [x19,8]
+	b	.L673
+.L674:
+	add	x1, x26, 160
+	mov	w2, 32
+	mov	x0, x21
+	add	x24, x19, :lo12:.LANCHOR0
+	bl	ftl_memcpy
+	ldr	x1, [x22,672]
+	mov	w2, 32
+	add	x0, x24, 104
+	add	x1, x1, 192
+	bl	ftl_memcpy
+	ldr	x1, [x22,672]
+	mov	w2, 852
+	add	x0, x24, 4056
+	add	x1, x1, 224
+	bl	ftl_memcpy
+	str	w20, [x22,680]
+	ldr	x1, [x22,672]
+	ldr	w0, [x1,1076]
+	strb	w0, [x22,565]
+	ldrh	w0, [x21,10]
+	udiv	w0, w20, w0
+	add	w2, w0, 1
+	cbz	w0, .L666
+	str	w2, [x24,8]
+	b	.L667
+.L666:
+	mov	w0, 2
+	str	w0, [x24,8]
+.L667:
+	add	x0, x25, :lo12:.LANCHOR2
+	ldrh	w1, [x1,14]
+	mov	w24, 0
+	strb	w1, [x0,684]
+	b	.L663
+	.size	FlashLoadPhyInfo, .-FlashLoadPhyInfo
+	.align	2
+	.global	ToshibaReadRetrial
+	.type	ToshibaReadRetrial, %function
+ToshibaReadRetrial:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	uxtb	w23, w0
+	mov	w0, w23
+	str	w1, [x29,132]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	x27, x2
+	mov	x26, x3
+	bl	NandcWaitFlashReady
+	adrp	x20, g_retryMode
+	adrp	x2, .LANCHOR0
+	sbfiz	x1, x23, 4, 32
+	add	x0, x2, :lo12:.LANCHOR0
+	str	x2, [x29,120]
+	add	x0, x0, 40
+	mov	w22, 0
+	add	x3, x0, x1
+	ldr	x24, [x0,x1]
+	ldrb	w0, [x3,8]
+	str	x0, [x29,136]
+	add	x19, x0, 8
+	mov	x28, x0
+	ldrb	w0, [x20,#:lo12:g_retryMode]
+	add	x19, x24, x19, lsl 8
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	bls	.L676
+	adrp	x0, .LANCHOR2+565
+	ldrb	w0, [x0,#:lo12:.LANCHOR2+565]
+	cbz	w0, .L677
+	mov	w0, w22
+	mov	w22, 1
+	bl	NandcSetDdrMode
+.L677:
+	ubfiz	x0, x28, 8, 8
+	mov	w2, 92
+	add	x0, x24, x0
+	str	w2, [x0,2056]
+	mov	w2, 197
+	str	w2, [x0,2056]
+.L676:
+	adrp	x0, g_maxRetryCount
+	mov	w21, 1
+	add	x0, x0, :lo12:g_maxRetryCount
+	str	x0, [x29,112]
+	ldr	x0, [x29,136]
+	mov	w25, -1
+	add	x0, x0, 8
+	lsl	x0, x0, 8
+	str	x0, [x29,104]
+	ubfiz	x0, x28, 8, 8
+	str	x0, [x29,96]
+.L678:
+	adrp	x0, g_maxRetryCount
+	ldrb	w0, [x0,#:lo12:g_maxRetryCount]
+	add	w0, w0, 1
+	cmp	w21, w0
+	bcs	.L703
+	ldrb	w0, [x20,#:lo12:g_retryMode]
+	mov	w1, w21
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	mov	x0, x19
+	bhi	.L679
+	bl	SandiskSetRRPara
+	b	.L680
+.L679:
+	bl	ToshibaSetRRPara
+.L680:
+	ldrb	w0, [x20,#:lo12:g_retryMode]
+	cmp	w0, 34
+	bne	.L681
+	ldr	x0, [x29,112]
+	ldrb	w0, [x0]
+	sub	w0, w0, #3
+	cmp	w21, w0
+	bne	.L681
+	ldr	x0, [x29,104]
+	mov	w1, 179
+	add	x0, x24, x0
+	str	w1, [x0,8]
+.L681:
+	ldr	x0, [x29,96]
+	mov	w1, 38
+	add	x0, x24, x0
+	str	w1, [x0,2056]
+	mov	w1, 93
+	str	w1, [x0,2056]
+	cbz	w22, .L682
+	mov	w0, 4
+	bl	NandcSetDdrMode
+	ldr	w1, [x29,132]
+	mov	w0, w23
+	mov	x2, x27
+	mov	x3, x26
+	bl	FlashReadRawPage
+	mov	w28, w0
+	mov	w0, 0
+	bl	NandcSetDdrMode
+	b	.L683
+.L682:
+	ldr	w1, [x29,132]
+	mov	w0, w23
+	mov	x2, x27
+	mov	x3, x26
+	bl	FlashReadRawPage
+	mov	w28, w0
+.L683:
+	cmn	w28, #1
+	beq	.L684
+	ldr	x0, [x29,120]
+	cmn	w25, #1
+	csel	w25, w25, w28, ne
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,4044]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bcc	.L686
+	mov	x26, 0
+	mov	x27, x26
+.L684:
+	add	w21, w21, 1
+	b	.L678
+.L703:
+	mov	w28, w25
+.L686:
+	ldrb	w0, [x20,#:lo12:g_retryMode]
+	mov	w1, 0
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	mov	x0, x19
+	bhi	.L688
+	bl	SandiskSetRRPara
+	b	.L689
+.L688:
+	bl	ToshibaSetRRPara
+.L689:
+	ldr	x0, [x29,136]
+	add	x0, x0, 8
+	add	x24, x24, x0, lsl 8
+	mov	w0, 255
+	str	w0, [x24,8]
+	ldr	x0, [x29,120]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,4044]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bcc	.L690
+	cmn	w28, #1
+	mov	w0, 256
+	csel	w28, w28, w0, eq
+.L690:
+	mov	w0, w23
+	bl	NandcWaitFlashReady
+	cbz	w22, .L691
+	mov	w0, 4
+	bl	NandcSetDdrMode
+.L691:
+	mov	w0, w28
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	ToshibaReadRetrial, .-ToshibaReadRetrial
+	.align	2
+	.global	SamsungReadRetrial
+	.type	SamsungReadRetrial, %function
+SamsungReadRetrial:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	str	x27, [sp,80]
+	mov	w0, w22
+	adrp	x27, g_maxRetryCount
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	x24, x2
+	mov	w25, w1
+	mov	x23, x3
+	adrp	x20, .LANCHOR0
+	bl	NandcWaitFlashReady
+	mov	w26, 1
+	add	x0, x20, :lo12:.LANCHOR0
+	sbfiz	x1, x22, 4, 32
+	add	x0, x0, 40
+	mov	w19, -1
+	add	x2, x0, x1
+	add	x27, x27, :lo12:g_maxRetryCount
+	ldr	x0, [x0,x1]
+	ldrb	w21, [x2,8]
+	add	x21, x21, 8
+	add	x21, x0, x21, lsl 8
+.L705:
+	ldrb	w0, [x27]
+	add	w0, w0, 1
+	cmp	w26, w0
+	bcs	.L708
+	mov	x0, x21
+	mov	w1, w26
+	bl	SamsungSetRRPara
+	mov	w0, w22
+	mov	w1, w25
+	mov	x2, x24
+	mov	x3, x23
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	beq	.L706
+	add	x1, x20, :lo12:.LANCHOR0
+	cmn	w19, #1
+	csel	w19, w19, w0, ne
+	ldrb	w1, [x1,4044]
+	add	w1, w1, w1, lsl 1
+	cmp	w0, w1, lsr 2
+	bcc	.L711
+	mov	x23, 0
+	mov	x24, x23
+.L706:
+	add	w26, w26, 1
+	b	.L705
+.L711:
+	mov	w19, w0
+.L708:
+	mov	x0, x21
+	mov	w1, 0
+	add	x20, x20, :lo12:.LANCHOR0
+	bl	SamsungSetRRPara
+	ldrb	w0, [x20,4044]
+	add	w0, w0, w0, lsl 1
+	cmp	w19, w0, lsr 2
+	bcc	.L710
+	cmn	w19, #1
+	mov	w0, 256
+	csel	w19, w19, w0, eq
+.L710:
+	mov	w0, w19
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	SamsungReadRetrial, .-SamsungReadRetrial
+	.align	2
+	.global	MicronReadRetrial
+	.type	MicronReadRetrial, %function
+MicronReadRetrial:
+	stp	x29, x30, [sp, -144]!
+	adrp	x4, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	add	x0, x4, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w24, w1
+	mov	x25, x2
+	ldrb	w20, [x0,4044]
+	mov	x23, x3
+	ldrb	w0, [x0,136]
+	mov	x19, x4
+	cbnz	w0, .L718
+	add	w20, w20, w20, lsl 1
+	ubfx	x20, x20, 2, 8
+	b	.L719
+.L718:
+	mov	w0, 3
+	sdiv	w20, w20, w0
+.L719:
+	mov	w0, w22
+	adrp	x28, g_maxRetryCount
+	mov	w27, 0
+	add	x28, x28, :lo12:g_maxRetryCount
+	bl	NandcWaitFlashReady
+	add	x4, x19, :lo12:.LANCHOR0
+	sbfiz	x0, x22, 4, 32
+	add	x4, x4, 40
+	mov	w19, -1
+	add	x1, x4, x0
+	mov	w7, 239
+	mov	w8, 137
+	ldr	x4, [x4,x0]
+	ldrb	w21, [x1,8]
+	lsl	x6, x21, 8
+.L720:
+	ldrb	w0, [x28]
+	cmp	w27, w0
+	bcs	.L723
+	add	x26, x4, x6
+	mov	w0, 200
+	str	x6, [x29,104]
+	str	x4, [x29,112]
+	str	w7, [x26,2056]
+	str	w8, [x26,2052]
+	str	x7, [x29,120]
+	str	x8, [x29,128]
+	bl	NandcDelayns
+	add	w5, w27, 1
+	str	w5, [x26,2048]
+	str	wzr, [x26,2048]
+	mov	w0, w22
+	str	wzr, [x26,2048]
+	mov	w1, w24
+	str	wzr, [x26,2048]
+	mov	x2, x25
+	mov	x3, x23
+	str	x5, [x29,136]
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	ldr	x5, [x29,136]
+	ldr	x8, [x29,128]
+	ldr	x7, [x29,120]
+	ldr	x4, [x29,112]
+	ldr	x6, [x29,104]
+	beq	.L721
+	cmn	w19, #1
+	csel	w19, w19, w0, ne
+	cmp	w0, w20
+	bcc	.L728
+	mov	x23, 0
+	mov	x25, x23
+.L721:
+	mov	w27, w5
+	b	.L720
+.L728:
+	mov	w19, w0
+.L723:
+	add	x21, x4, x21, lsl 8
+	mov	w0, 239
+	str	w0, [x21,2056]
+	mov	w0, 137
+	str	w0, [x21,2052]
+	mov	w0, 200
+	bl	NandcDelayns
+	str	wzr, [x21,2048]
+	str	wzr, [x21,2048]
+	cmp	w19, w20
+	str	wzr, [x21,2048]
+	str	wzr, [x21,2048]
+	bcc	.L725
+	cmn	w19, #1
+	mov	w0, 256
+	csel	w19, w19, w0, eq
+.L725:
+	cmn	w19, #1
+	beq	.L729
+	cmp	w19, 256
+	bne	.L726
+.L729:
+	adrp	x0, .LC11
+	mov	w1, w27
+	add	x0, x0, :lo12:.LC11
+	mov	w2, w24
+	mov	w3, w27
+	mov	w4, w19
+	bl	printk
+.L726:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	MicronReadRetrial, .-MicronReadRetrial
+	.align	2
+	.global	HynixReadRetrial
+	.type	HynixReadRetrial, %function
+HynixReadRetrial:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	uxtb	x22, w0
+	stp	x27, x28, [sp,80]
+	mov	w27, w1
+	add	x1, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	mov	x26, x2
+	add	x2, x1, 4056
+	ldrb	w25, [x1,4058]
+	add	x0, x2, x22
+	ldr	x1, [x1,1912]
+	mov	x23, x22
+	mov	x24, x3
+	ldrb	w19, [x0,12]
+	ldrb	w1, [x1,19]
+	cmp	w1, 7
+	bne	.L739
+	ldrb	w19, [x0,20]
+.L739:
+	mov	w0, w23
+	mov	w28, 0
+	mov	w20, -1
+	bl	NandcWaitFlashReady
+	add	x4, x21, :lo12:.LANCHOR0
+	add	x5, x4, 4060
+.L740:
+	cmp	w28, w25
+	bcs	.L744
+	add	w19, w19, 1
+	ldrb	w1, [x4,4057]
+	mov	x2, x5
+	mov	w0, w23
+	uxtb	w19, w19
+	str	x4, [x29,96]
+	cmp	w19, w25
+	str	x5, [x29,104]
+	csel	w19, w19, wzr, cc
+	mov	w3, w19
+	bl	HynixSetRRPara
+	mov	w0, w23
+	mov	w1, w27
+	mov	x2, x26
+	mov	x3, x24
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	ldr	x5, [x29,104]
+	ldr	x4, [x29,96]
+	beq	.L742
+	ldrb	w1, [x4,4044]
+	cmn	w20, #1
+	csel	w20, w20, w0, ne
+	add	w1, w1, w1, lsl 1
+	cmp	w0, w1, lsr 2
+	bcc	.L749
+	mov	x24, 0
+	mov	x26, x24
+.L742:
+	add	w28, w28, 1
+	b	.L740
+.L749:
+	mov	w20, w0
+.L744:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x1, [x0,1912]
+	add	x0, x0, 4056
+	add	x0, x0, x22
+	ldrb	w1, [x1,19]
+	cmp	w1, 7
+	bne	.L746
+	strb	w19, [x0,20]
+	b	.L747
+.L746:
+	strb	w19, [x0,12]
+.L747:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x21,4044]
+	add	w0, w0, w0, lsl 1
+	cmp	w20, w0, lsr 2
+	bcc	.L748
+	cmn	w20, #1
+	mov	w0, 256
+	csel	w20, w20, w0, eq
+.L748:
+	mov	w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	HynixReadRetrial, .-HynixReadRetrial
+	.align	2
+	.global	FlashProgPage
+	.type	FlashProgPage, %function
+FlashProgPage:
+	stp	x29, x30, [sp, -64]!
+	mov	x4, x3
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w19, w0
+	adrp	x0, .LANCHOR1+265
+	stp	x21, x22, [sp,32]
+	mov	w20, w1
+	mov	x22, x2
+	ldrb	w21, [x0,#:lo12:.LANCHOR1+265]
+	cbnz	w19, .L756
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,25]
+	ldr	w2, [x0,28]
+	mul	w1, w1, w2
+	cmp	w20, w1
+	bcs	.L756
+	ldrb	w0, [x0,24]
+	cbnz	w0, .L757
+	sub	w21, w21, #2
+	b	.L756
+.L757:
+	mov	w21, 4
+.L756:
+	mov	w0, w19
+	str	x4, [x29,56]
+	bl	NandcWaitFlashReady
+	mov	w0, w19
+	bl	NandcFlashCs
+	mov	w0, w19
+	mov	w1, w20
+	bl	FlashProgFirstCmd
+	ldr	x4, [x29,56]
+	mov	w2, w21
+	mov	x3, x22
+	mov	w0, w19
+	mov	w1, 1
+	bl	NandcXferData
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashProgSecondCmd
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	mov	w1, w20
+	mov	w0, w19
+	bl	FlashReadStatus
+	mov	w20, w0
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	and	w0, w20, 1
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FlashProgPage, .-FlashProgPage
+	.align	2
+	.global	FlashSavePhyInfo
+	.type	FlashSavePhyInfo, %function
+FlashSavePhyInfo:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x22, .LANCHOR0
+	adrp	x23, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	add	x19, x23, :lo12:.LANCHOR2
+	add	x20, x22, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	ldr	x0, [x22,#:lo12:.LANCHOR0]
+	mov	w21, 0
+	str	x0, [x19,672]
+	ldrb	w0, [x19,685]
+	bl	FlashBchSel
+	ldr	x0, [x22,#:lo12:.LANCHOR0]
+	mov	w1, 0
+	mov	w2, 2048
+	bl	ftl_memset
+	ldr	x1, [x19,672]
+	mov	w0, 20036
+	movk	w0, 0x4e41, lsl 16
+	mov	w2, 32
+	str	w0, [x1]
+	ldr	x0, [x19,672]
+	ldrb	w1, [x20,1676]
+	add	x0, x0, 16
+	strh	w1, [x0,-4]
+	ldrb	w1, [x20,25]
+	strh	w1, [x0,-2]
+	ldrb	w1, [x19,565]
+	str	w1, [x0,1060]
+	adrp	x1, IDByte
+	add	x1, x1, :lo12:IDByte
+	bl	ftl_memcpy
+	ldr	x0, [x19,672]
+	add	x1, x20, 1680
+	mov	w2, 8
+	add	x0, x0, 80
+	bl	ftl_memcpy
+	ldr	x0, [x19,672]
+	add	x1, x20, 1688
+	mov	w2, 32
+	add	x0, x0, 96
+	bl	ftl_memcpy
+	ldr	x0, [x19,672]
+	adrp	x1, .LANCHOR1
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 32
+	add	x1, x1, 256
+	add	x0, x0, 160
+	bl	ftl_memcpy
+	ldr	x0, [x19,672]
+	add	x1, x20, 104
+	mov	w2, 32
+	add	x0, x0, 192
+	bl	ftl_memcpy
+	ldr	x0, [x19,672]
+	add	x1, x20, 4056
+	mov	w2, 852
+	add	x0, x0, 224
+	bl	ftl_memcpy
+	ldr	x20, [x19,672]
+	mov	w1, 2036
+	add	x0, x20, 12
+	bl	JSHash
+	str	w0, [x20,8]
+	mov	w0, 1592
+	str	w0, [x20,4]
+	ldr	x0, [x19,688]
+	str	x0, [x19,672]
+	mov	w0, 0
+	mov	w19, w21
+	bl	flash_enter_slc_mode
+.L761:
+	add	x20, x22, :lo12:.LANCHOR0
+	mov	w2, 0
+	mov	w0, 0
+	add	x24, x23, :lo12:.LANCHOR2
+	add	w26, w19, 1
+	ldr	w1, [x20,28]
+	mul	w1, w19, w1
+	bl	FlashEraseBlock
+	ldr	w1, [x20,28]
+	mov	x3, 0
+	ldr	x2, [x22,#:lo12:.LANCHOR0]
+	mov	w0, 0
+	mul	w1, w19, w1
+	bl	FlashProgPage
+	ldr	w1, [x20,28]
+	mov	x3, 0
+	ldr	x2, [x22,#:lo12:.LANCHOR0]
+	mov	w0, 0
+	mul	w1, w19, w1
+	add	w1, w1, 1
+	bl	FlashProgPage
+	ldr	w1, [x20,28]
+	mov	w0, 0
+	ldr	x2, [x24,688]
+	mov	x3, 0
+	mul	w1, w19, w1
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	beq	.L759
+	ldr	x25, [x24,672]
+	mov	w0, 20036
+	movk	w0, 0x4e41, lsl 16
+	ldr	w1, [x25]
+	cmp	w1, w0
+	bne	.L759
+	mov	w1, 2036
+	add	x0, x25, 12
+	bl	JSHash
+	ldr	w1, [x25,8]
+	cmp	w1, w0
+	bne	.L759
+	ldr	w0, [x20,28]
+	cmp	w21, 1
+	str	w26, [x20,8]
+	mul	w19, w19, w0
+	str	w19, [x24,680]
+	beq	.L762
+	mov	w21, 1
+.L759:
+	cmp	w26, 4
+	mov	w19, w26
+	bne	.L761
+	b	.L760
+.L762:
+	mov	w21, 2
+.L760:
+	mov	w0, 0
+	bl	flash_exit_slc_mode
+	cmp	w21, wzr
+	csetm	w0, eq
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FlashSavePhyInfo, .-FlashSavePhyInfo
+	.align	2
+	.global	FlashReadIdbDataRaw
+	.type	FlashReadIdbDataRaw, %function
+FlashReadIdbDataRaw:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x27, x28, [sp,80]
+	mov	x27, x0
+	mov	w0, 60
+	strb	w0, [x29,104]
+	mov	w0, 40
+	strb	w0, [x29,105]
+	mov	w0, 24
+	stp	x21, x22, [sp,32]
+	strb	w0, [x29,106]
+	adrp	x21, .LANCHOR0
+	mov	w0, 16
+	strb	w0, [x29,107]
+	add	x0, x21, :lo12:.LANCHOR0
+	adrp	x22, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldrb	w28, [x0,4044]
+	add	x0, x22, :lo12:.LANCHOR2
+	ldr	w1, [x0,576]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L768
+	mov	w0, 0
+	bl	flash_enter_slc_mode
+.L768:
+	adrp	x25, .LC12
+	mov	x0, x27
+	mov	w1, 0
+	mov	w2, 2048
+	mov	w24, -1
+	mov	w20, 2
+	add	x25, x25, :lo12:.LC12
+	bl	ftl_memset
+.L769:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x0,25]
+	cmp	w20, w0
+	bcs	.L773
+	mov	x23, 0
+.L771:
+	add	x0, x29, 104
+	add	x19, x21, :lo12:.LANCHOR0
+	ldrb	w26, [x23,x0]
+	mov	w0, w26
+	bl	FlashBchSel
+	ldr	w1, [x19,28]
+	mov	w0, 0
+	ldr	x2, [x21,#:lo12:.LANCHOR0]
+	mov	x3, 0
+	mul	w1, w20, w1
+	bl	FlashReadRawPage
+	cmn	w0, #1
+	bne	.L770
+	add	x23, x23, 1
+	cmp	x23, 4
+	bne	.L771
+	b	.L772
+.L770:
+	ldr	x0, [x19]
+	ldr	w1, [x0]
+	mov	w0, 35899
+	movk	w0, 0xfcdc, lsl 16
+	cmp	w1, w0
+	bne	.L772
+	mov	w1, w26
+	mov	x0, x25
+	bl	printk
+	ldr	x1, [x19]
+	mov	x0, x27
+	mov	w2, 2048
+	bl	ftl_memcpy
+	ldr	x0, [x19]
+	ldr	w0, [x0,512]
+	strb	w0, [x19,25]
+	ldr	w0, [x19,8]
+	cmp	w0, w20
+	bls	.L776
+	mov	w24, 0
+	str	w20, [x19,8]
+	bl	FlashSavePhyInfo
+.L772:
+	add	w20, w20, 1
+	b	.L769
+.L776:
+	mov	w24, 0
+.L773:
+	mov	w0, w28
+	add	x22, x22, :lo12:.LANCHOR2
+	bl	FlashBchSel
+	ldr	w1, [x22,576]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L778
+	mov	w0, 0
+	bl	flash_exit_slc_mode
+.L778:
+	mov	w0, w24
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FlashReadIdbDataRaw, .-FlashReadIdbDataRaw
+	.align	2
+	.global	FlashInit
+	.type	FlashInit, %function
+FlashInit:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	adrp	x19, .LANCHOR0
+	mov	x22, x0
+	mov	w0, 32768
+	adrp	x20, .LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	bl	ftl_malloc
+	add	x21, x20, :lo12:.LANCHOR2
+	str	x0, [x19,#:lo12:.LANCHOR0]
+	mov	w0, 32768
+	add	x24, x19, :lo12:.LANCHOR0
+	adrp	x23, IDByte
+	bl	ftl_malloc
+	str	x0, [x21,688]
+	mov	w0, 4096
+	adrp	x25, .LC13
+	add	x24, x24, 40
+	mov	w27, 0
+	bl	ftl_malloc
+	str	x0, [x21,696]
+	mov	w0, 32768
+	mov	w28, 44
+	bl	ftl_malloc
+	str	x0, [x21,704]
+	mov	w0, 4096
+	bl	ftl_malloc
+	str	x0, [x21,712]
+	mov	w0, 128
+	str	w0, [x24,-12]
+	mov	w0, 60
+	mov	w1, 50
+	strb	w0, [x21,685]
+	mov	x0, x22
+	strb	w1, [x24,-15]
+	strb	w1, [x21,684]
+	str	wzr, [x24,-32]
+	strb	wzr, [x21,565]
+	str	wzr, [x21,656]
+	add	x21, x23, :lo12:IDByte
+	strb	wzr, [x24,-16]
+	bl	NandcInit
+	add	x0, x25, :lo12:.LC13
+	mov	x26, x21
+	str	x0, [x29,104]
+.L785:
+	uxtb	w25, w27
+	mov	w0, w25
+	bl	FlashReset
+	ldrb	w22, [x24,8]
+	ldr	x2, [x24]
+	mov	w0, w25
+	str	x2, [x29,96]
+	ubfiz	x22, x22, 8, 8
+	bl	NandcFlashCs
+	ldr	x2, [x29,96]
+	mov	w0, 144
+	add	x22, x2, x22
+	str	w0, [x22,2056]
+	mov	w0, 200
+	str	wzr, [x22,2052]
+	bl	NandcDelayns
+	ldr	w0, [x22,2048]
+	strb	w0, [x21]
+	ldr	w0, [x22,2048]
+	strb	w0, [x21,1]
+	ldr	w0, [x22,2048]
+	strb	w0, [x21,2]
+	ldr	w0, [x22,2048]
+	strb	w0, [x21,3]
+	ldr	w0, [x22,2048]
+	strb	w0, [x21,4]
+	ldr	w0, [x22,2048]
+	strb	w0, [x21,5]
+	mov	w0, w25
+	bl	NandcFlashDeCs
+	ldrb	w2, [x21]
+	sub	w0, w2, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bhi	.L781
+	ldr	x0, [x29,104]
+	add	w1, w27, 1
+	ldrb	w3, [x21,1]
+	ldrb	w4, [x21,2]
+	ldrb	w5, [x21,3]
+	ldrb	w6, [x21,4]
+	ldrb	w7, [x21,5]
+	bl	printk
+.L781:
+	cbnz	w27, .L782
+	ldrb	w0, [x26]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bhi	.L829
+	ldrb	w0, [x26,1]
+	cmp	w0, 255
+	beq	.L829
+	bl	FlashCs123Init
+.L782:
+	ldrb	w0, [x21]
+	cmp	w0, 181
+	bne	.L784
+	strb	w28, [x21]
+.L784:
+	add	w27, w27, 1
+	add	x24, x24, 16
+	cmp	w27, 4
+	add	x21, x21, 8
+	bne	.L785
+	ldrb	w0, [x23,#:lo12:IDByte]
+	cmp	w0, 173
+	beq	.L786
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w0, [x0,568]
+	bl	NandcSetDdrMode
+.L786:
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	mov	w2, 852
+	add	x0, x21, 4056
+	bl	ftl_memset
+	strb	wzr, [x21,32]
+	adrp	x1, .LANCHOR1
+	add	x4, x23, :lo12:IDByte
+	add	x0, x1, :lo12:.LANCHOR1
+	add	x0, x0, 256
+	str	x0, [x21,1912]
+	ldrb	w0, [x4,1]
+	cmp	w0, 218
+	cset	w3, eq
+	cmp	w0, 161
+	cset	w2, eq
+	orr	w2, w3, w2
+	cbnz	w2, .L787
+	and	w2, w0, -33
+	cmp	w2, 209
+	beq	.L787
+	cmp	w0, 220
+	bne	.L788
+	ldrb	w2, [x4,3]
+	cmp	w2, 149
+	bne	.L788
+.L787:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w4, 1
+	mov	w5, 16
+	add	x6, x23, :lo12:IDByte
+	strb	w4, [x2,24]
+	add	x4, x20, :lo12:.LANCHOR2
+	strb	w5, [x2,25]
+	add	x2, x1, :lo12:.LANCHOR1
+	strb	w5, [x4,685]
+	ldrb	w5, [x23,#:lo12:IDByte]
+	strb	w5, [x2,3033]
+	strb	w0, [x2,3034]
+	cmp	w5, 152
+	bne	.L789
+	ldrsb	w2, [x6,4]
+	tbnz	w2, #31, .L789
+	mov	w2, 24
+	strb	w2, [x4,685]
+.L789:
+	add	x2, x20, :lo12:.LANCHOR2
+	mov	w4, 12336
+	movk	w4, 0x5638, lsl 16
+	ldr	w5, [x2,576]
+	cmp	w5, w4
+	bne	.L790
+	mov	w4, 16
+	strb	w4, [x2,685]
+.L790:
+	cbz	w3, .L791
+	add	x0, x1, :lo12:.LANCHOR1
+	mov	w2, 2048
+	strh	w2, [x0,3046]
+	mov	w2, -38
+	b	.L860
+.L791:
+	cmp	w0, 220
+	bne	.L792
+	add	x0, x1, :lo12:.LANCHOR1
+	mov	w2, 4096
+	strh	w2, [x0,3046]
+	mov	w2, -36
+.L860:
+	strb	w2, [x0,3034]
+.L792:
+	add	x21, x1, :lo12:.LANCHOR1
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x1, x21, 2688
+	mov	w2, 32
+	add	x0, x0, 104
+	bl	ftl_memcpy
+	add	x0, x21, 256
+	add	x1, x21, 3032
+	mov	w2, 32
+	bl	ftl_memcpy
+.L788:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x21,24]
+	cbnz	w0, .L793
+	bl	FlashLoadPhyInfoInRam
+	cbnz	w0, .L795
+	ldr	x0, [x21,1912]
+	add	x21, x20, :lo12:.LANCHOR2
+	ldrb	w1, [x0,17]
+	and	w0, w1, 7
+	strb	w0, [x21,564]
+	tbnz	x1, 0, .L795
+	mov	w1, 1
+	strb	w1, [x21,565]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x21,564]
+	bl	NandcSetMode
+.L795:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x0,1912]
+	ldrb	w1, [x1,26]
+	strb	w1, [x0,136]
+	bl	FlashLoadPhyInfo
+	cbz	w0, .L793
+	add	x21, x20, :lo12:.LANCHOR2
+	ldr	w0, [x21,568]
+	cbz	w0, .L798
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	b	.L861
+.L798:
+	ldrb	w0, [x21,564]
+	bl	FlashSetInterfaceMode
+	ldrb	w0, [x21,564]
+.L861:
+	bl	NandcSetMode
+	bl	FlashLoadPhyInfo
+	cbz	w0, .L793
+	mov	w0, 1
+	add	x21, x19, :lo12:.LANCHOR0
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+	ldr	x1, [x21,1912]
+	adrp	x0, .LC14
+	add	x0, x0, :lo12:.LC14
+	ldrh	w1, [x1,14]
+	bl	printk
+	bl	FlashLoadPhyInfoInRam
+	cmn	w0, #1
+	beq	.L783
+	bl	FlashDieInfoInit
+	ldr	x0, [x21,1912]
+	ldrb	w0, [x0,19]
+	bl	FlashGetReadRetryDefault
+	ldr	x0, [x21,1912]
+	ldrh	w1, [x21,1920]
+	ldrb	w2, [x0,9]
+	add	w1, w1, 4095
+	cmp	w2, w1, lsr 12
+	blt	.L800
+	ldrh	w1, [x0,14]
+	add	w1, w1, 255
+	cmp	w2, w1, lsr 8
+	bge	.L801
+.L800:
+	ldrh	w1, [x0,14]
+	and	w1, w1, -256
+	strh	w1, [x0,14]
+.L801:
+	add	x21, x20, :lo12:.LANCHOR2
+	ldrb	w0, [x21,564]
+	tst	w0, 6
+	beq	.L802
+	bl	FlashSavePhyInfo
+	ldr	w1, [x21,680]
+	mov	w0, 0
+	bl	FlashDdrParaScan
+.L802:
+	bl	FlashSavePhyInfo
+.L793:
+	add	x21, x19, :lo12:.LANCHOR0
+	add	x22, x20, :lo12:.LANCHOR2
+	ldr	x2, [x21,1912]
+	str	xzr, [x22,664]
+	ldrb	w0, [x2,26]
+	strb	w0, [x21,136]
+	ldrh	w0, [x2,16]
+	ldrh	w3, [x2,10]
+	ubfx	x1, x0, 7, 1
+	strb	w1, [x21,32]
+	ubfx	x1, x0, 3, 1
+	strb	w1, [x22,720]
+	ubfx	x1, x0, 4, 1
+	strb	w1, [x22,648]
+	ldrb	w1, [x2,12]
+	ubfx	x0, x0, 8, 3
+	strb	w0, [x22,564]
+	ldrb	w0, [x2,18]
+	sdiv	w1, w3, w1
+	bl	BuildFlashLsbPageTable
+	bl	FlashDieInfoInit
+	ldr	x0, [x21,1912]
+	ldrh	w1, [x0,16]
+	tbz	x1, 6, .L804
+	adrp	x1, g_retryMode
+	adrp	x3, g_maxRegNum
+	ldrb	w0, [x0,19]
+	mov	x5, x3
+	ldrb	w2, [x21,4058]
+	strb	w0, [x1,#:lo12:g_retryMode]
+	ldrb	w1, [x21,4057]
+	strb	w1, [x3,#:lo12:g_maxRegNum]
+	adrp	x1, g_maxRetryCount
+	strb	w2, [x1,#:lo12:g_maxRetryCount]
+	sub	w2, w0, #1
+	uxtb	w2, w2
+	cmp	w2, 6
+	mov	x2, x1
+	bhi	.L805
+	adrp	x1, HynixReadRetrial
+	add	x1, x1, :lo12:HynixReadRetrial
+	str	x1, [x22,664]
+	sub	w1, w0, #5
+	uxtb	w1, w1
+	cmp	w1, 1
+	bhi	.L806
+	mov	w1, 1
+	str	w1, [x22,640]
+	b	.L807
+.L806:
+	cmp	w0, 7
+	add	x21, x21, 4084
+	beq	.L808
+.L807:
+	add	x21, x19, :lo12:.LANCHOR0
+	add	x21, x21, 4076
+.L808:
+	mov	x1, 0
+	mov	w2, w1
+.L810:
+	ldrsb	w3, [x21,x1]
+	add	x1, x1, 1
+	cmp	w3, wzr
+	csinc	w2, w2, w2, ne
+	cmp	x1, 32
+	bne	.L810
+	cmp	w2, 27
+	bls	.L804
+	bl	FlashGetReadRetryDefault
+	bl	FlashSavePhyInfo
+	b	.L804
+.L805:
+	sub	w3, w0, #17
+	uxtb	w3, w3
+	cmp	w3, 2
+	bhi	.L812
+	adrp	x2, MicronReadRetrial
+	cmp	w0, 19
+	add	x2, x2, :lo12:MicronReadRetrial
+	str	x2, [x22,664]
+	beq	.L813
+	mov	w0, 7
+	b	.L863
+.L813:
+	mov	w0, 15
+.L863:
+	strb	w0, [x1,#:lo12:g_maxRetryCount]
+	b	.L804
+.L812:
+	sub	w1, w0, #65
+	uxtb	w1, w1
+	cmp	w1, 1
+	bls	.L831
+	cmp	w0, 33
+	bne	.L814
+.L831:
+	add	x0, x20, :lo12:.LANCHOR2
+	adrp	x1, ToshibaReadRetrial
+	add	x1, x1, :lo12:ToshibaReadRetrial
+	str	x1, [x0,664]
+	mov	w0, 4
+	strb	w0, [x5,#:lo12:g_maxRegNum]
+	mov	w0, 7
+	strb	w0, [x2,#:lo12:g_maxRetryCount]
+	b	.L804
+.L814:
+	sub	w1, w0, #67
+	uxtb	w1, w1
+	cmp	w1, 1
+	sub	w1, w0, #34
+	cset	w4, ls
+	uxtb	w1, w1
+	cmp	w1, 1
+	bls	.L832
+	cbz	w4, .L816
+.L832:
+	add	x1, x20, :lo12:.LANCHOR2
+	adrp	x3, ToshibaReadRetrial
+	add	x3, x3, :lo12:ToshibaReadRetrial
+	cmp	w0, 35
+	str	x3, [x1,664]
+	beq	.L818
+	cmp	w0, 68
+	beq	.L818
+	mov	w0, 7
+	b	.L862
+.L818:
+	mov	w0, 17
+.L862:
+	strb	w0, [x2,#:lo12:g_maxRetryCount]
+	mov	w0, 4
+	cbnz	w4, .L864
+	mov	w0, 5
+.L864:
+	strb	w0, [x5,#:lo12:g_maxRegNum]
+	b	.L804
+.L816:
+	cmp	w0, 49
+	bne	.L804
+	adrp	x0, SamsungReadRetrial
+	add	x0, x0, :lo12:SamsungReadRetrial
+	str	x0, [x22,664]
+.L804:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w1, [x0,576]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L821
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w2, [x0,136]
+	cbz	w2, .L821
+	ldr	x0, [x0,1912]
+	strb	wzr, [x0,18]
+.L821:
+	ldrb	w0, [x23,#:lo12:IDByte]
+	cmp	w0, 44
+	bne	.L822
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrb	w0, [x0,565]
+	cbz	w0, .L822
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L823
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbnz	w0, .L822
+.L823:
+	add	x0, x20, :lo12:.LANCHOR2
+	strb	wzr, [x0,565]
+	mov	w0, 1
+	bl	FlashSetInterfaceMode
+	mov	w0, 1
+	bl	NandcSetMode
+.L822:
+	mov	w0, 0
+	bl	flash_enter_slc_mode
+	add	x1, x20, :lo12:.LANCHOR2
+	ldrb	w0, [x1,564]
+	tst	w0, 6
+	beq	.L824
+	ldrb	w1, [x1,565]
+	cbnz	w1, .L825
+	tbnz	x0, 0, .L824
+.L825:
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w0, 0
+	ldr	w1, [x20,680]
+	bl	FlashDdrParaScan
+.L824:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 0
+	mov	w20, 16
+	add	x23, x23, :lo12:IDByte
+	bl	flash_exit_slc_mode
+	ldr	x0, [x19,1912]
+	ldrb	w0, [x0,20]
+	bl	FlashBchSel
+	add	x0, x19, 1928
+	bl	FlashReadIdbDataRaw
+	strb	w20, [x19,25]
+	mov	w0, 18928
+	movk	w0, 0x2, lsl 16
+	bl	FlashTimingCfg
+	ldr	x1, [x19,1912]
+	ldrb	w2, [x1,12]
+	strh	w2, [x19,4024]
+	ldrh	w4, [x1,14]
+	ldrb	w2, [x1,7]
+	str	w2, [x19,4020]
+	ldr	w2, [x23]
+	str	w2, [x19,4016]
+	ldrb	w2, [x19,1676]
+	strh	w2, [x19,4026]
+	ldrb	w2, [x1,13]
+	strh	w2, [x19,4028]
+	strh	w4, [x19,4030]
+	ldrh	w2, [x1,10]
+	strh	w2, [x19,4032]
+	ldrb	w3, [x1,12]
+	ldrh	w2, [x1,10]
+	sdiv	w2, w2, w3
+	strh	w2, [x19,4034]
+	ldrb	w3, [x1,9]
+	strh	w3, [x19,4036]
+	ldrh	w5, [x1,10]
+	ldrb	w2, [x1,9]
+	mul	w2, w2, w5
+	mov	w5, 512
+	strh	w5, [x19,4040]
+	ldrb	w5, [x19,25]
+	strh	w5, [x19,4042]
+	uxth	w2, w2
+	ldrb	w5, [x19,24]
+	strh	w2, [x19,4038]
+	cmp	w5, 1
+	bne	.L827
+	lsl	w2, w2, 1
+	lsr	w4, w4, 1
+	lsl	w3, w3, 1
+	strh	w2, [x19,4038]
+	strb	w20, [x19,25]
+	mov	w2, 8
+	strh	w4, [x19,4030]
+	strh	w3, [x19,4036]
+	strh	w2, [x19,4042]
+.L827:
+	ldrb	w0, [x1,20]
+	bl	FlashBchSel
+	bl	ftl_flash_suspend
+	mov	w0, 0
+	b	.L783
+.L829:
+	mov	w0, -2
+.L783:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FlashInit, .-FlashInit
+	.align	2
+	.global	FlashPageProgMsbFFData
+	.type	FlashPageProgMsbFFData, %function
+FlashPageProgMsbFFData:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	uxth	w19, w2
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	x2, [x0,1912]
+	ldrb	w0, [x0,136]
+	ldrb	w3, [x2,19]
+	cbz	w0, .L866
+	adrp	x0, .LANCHOR2+576
+	ldr	w2, [x0,#:lo12:.LANCHOR2+576]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w2, w0
+	beq	.L865
+.L866:
+	sub	w0, w3, #5
+	uxtb	w0, w0
+	cmp	w0, 2
+	bls	.L867
+	cmp	w3, 68
+	beq	.L867
+	sub	w3, w3, #19
+	and	w3, w3, -17
+	uxtb	w3, w3
+	cbnz	w3, .L865
+.L867:
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w21, w1
+	add	x24, x20, 652
+	mov	w25, 65535
+	adrp	x26, .LANCHOR2
+.L869:
+	ldr	x0, [x20,1912]
+	ldrh	w0, [x0,10]
+	cmp	w0, w19
+	bls	.L865
+	ldrh	w0, [x24,w19,sxtw 1]
+	cmp	w0, w25
+	bne	.L865
+	add	x23, x26, :lo12:.LANCHOR2
+	mov	w1, 255
+	mov	w2, 32768
+	ldr	x0, [x23,688]
+	bl	ftl_memset
+	ldr	x2, [x23,688]
+	add	w1, w19, w21
+	mov	w0, w22
+	mov	x3, 0
+	add	w19, w19, 1
+	bl	FlashProgPage
+	uxth	w19, w19
+	b	.L869
+.L865:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FlashPageProgMsbFFData, .-FlashPageProgMsbFFData
+	.align	2
+	.global	FlashReadSlc2KPages
+	.type	FlashReadSlc2KPages, %function
+FlashReadSlc2KPages:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	mov	w25, w1
+	adrp	x1, .LANCHOR1+265
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR0
+	adrp	x23, .LC15
+	adrp	x24, .LC17
+	ldrb	w26, [x1,#:lo12:.LANCHOR1+265]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	mov	w27, w2
+	mov	w22, 0
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x23, x23, :lo12:.LC15
+	add	x24, x24, :lo12:.LC17
+.L875:
+	cmp	w22, w25
+	beq	.L909
+	mov	w1, w27
+	sub	w4, w25, w22
+	mov	x0, x19
+	add	x2, x29, 124
+	add	x3, x29, 120
+	bl	LogAddr2PhyAddr
+	ldr	w0, [x29,120]
+	adrp	x5, .LANCHOR0
+	ldrb	w1, [x21,1676]
+	cmp	w0, w1
+	bcc	.L876
+	mov	w0, -1
+	str	w0, [x19]
+	b	.L877
+.L876:
+	add	x0, x21, x0, uxtw
+	ldrb	w28, [x0,1680]
+	str	x5, [x29,96]
+	mov	w0, w28
+	bl	NandcWaitFlashReady
+	mov	w0, w28
+	bl	NandcFlashCs
+	ldr	w1, [x29,124]
+	mov	w0, w28
+	bl	FlashReadCmd
+	mov	w0, w28
+	bl	NandcWaitFlashReady
+	ldr	x3, [x19,8]
+	mov	w1, 0
+	ldr	x4, [x19,16]
+	mov	w2, w26
+	mov	w0, w28
+	bl	NandcXferData
+	mov	w6, w0
+	ldr	w2, [x21,28]
+	mov	w0, w28
+	ldr	w1, [x29,124]
+	str	x6, [x29,104]
+	add	w1, w2, w1
+	bl	FlashReadCmd
+	ldr	x0, [x19,8]
+	mov	w1, 0
+	mov	w2, w26
+	cmp	x0, xzr
+	add	x3, x0, 2048
+	ldr	x0, [x19,16]
+	csel	x3, x3, xzr, ne
+	add	x4, x0, 8
+	cmp	x0, xzr
+	csel	x4, x4, xzr, ne
+	mov	w0, w28
+	bl	NandcXferData
+	mov	w20, w0
+	mov	w0, w28
+	bl	NandcFlashDeCs
+	ldr	x5, [x29,96]
+	ldr	x6, [x29,104]
+	add	x0, x5, :lo12:.LANCHOR0
+	cmp	w20, w6
+	csel	w3, w20, w6, cs
+	ldrb	w0, [x0,4044]
+	add	w0, w0, w0, lsl 1
+	cmp	w3, w0, lsr 2
+	bls	.L880
+	cmn	w3, #1
+	mov	w0, 256
+	csel	w3, w3, w0, eq
+.L880:
+	cmp	w3, 256
+	beq	.L891
+	cmn	w3, #1
+	bne	.L881
+.L891:
+	str	w3, [x19]
+	b	.L883
+.L881:
+	str	wzr, [x19]
+.L883:
+	ldr	x0, [x19,16]
+	cbz	x0, .L884
+	ldr	w1, [x0,8]
+	cmn	w1, #1
+	bne	.L884
+	ldr	w0, [x0]
+	cmn	w0, #1
+	beq	.L884
+	str	w1, [x19]
+.L884:
+	ldr	w3, [x19]
+	cmn	w3, #1
+	bne	.L877
+	add	x5, x5, :lo12:.LANCHOR0
+	ldr	w1, [x19,4]
+	mov	x0, x23
+	ldrb	w2, [x5,4044]
+	bl	printk
+	ldr	x1, [x19,8]
+	cbz	x1, .L886
+	adrp	x0, .LC16
+	mov	w2, 4
+	add	x0, x0, :lo12:.LC16
+	mov	w3, 8
+	bl	rknand_print_hex
+.L886:
+	ldr	x1, [x19,16]
+	cbz	x1, .L877
+	mov	w2, 4
+	mov	x0, x24
+	mov	w3, w2
+	bl	rknand_print_hex
+.L877:
+	add	w22, w22, 1
+	add	x19, x19, 56
+	b	.L875
+.L909:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FlashReadSlc2KPages, .-FlashReadSlc2KPages
+	.align	2
+	.global	FlashReadPages
+	.type	FlashReadPages, %function
+FlashReadPages:
+	stp	x29, x30, [sp, -176]!
+	adrp	x3, .LANCHOR1+265
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	ldrb	w3, [x3,#:lo12:.LANCHOR1+265]
+	adrp	x22, .LANCHOR0
+	str	w3, [x29,148]
+	add	x3, x22, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	str	w1, [x29,144]
+	mov	x26, x0
+	ldrb	w4, [x3,32]
+	ldrb	w23, [x3,24]
+	str	w2, [x29,140]
+	str	w4, [x29,136]
+	cbz	w23, .L950
+	bl	FlashReadSlc2KPages
+	b	.L999
+.L950:
+	adrp	x0, .LC15
+	mov	w25, w23
+	add	x0, x0, :lo12:.LC15
+	str	x0, [x29,128]
+	adrp	x0, .LC17
+	add	x0, x0, :lo12:.LC17
+	str	x0, [x29,120]
+	adrp	x0, .LC18
+	add	x0, x0, :lo12:.LC18
+	str	x0, [x29,112]
+.L911:
+	ldr	w0, [x29,144]
+	cmp	w25, w0
+	bcs	.L1001
+	mov	w27, 56
+	ldr	w0, [x29,144]
+	ldr	w1, [x29,140]
+	add	x2, x29, 172
+	umull	x27, w25, w27
+	sub	w4, w0, w25
+	add	x3, x29, 168
+	add	x21, x26, x27
+	mov	x0, x21
+	ldr	w28, [x21,4]
+	bl	LogAddr2PhyAddr
+	add	x1, x22, :lo12:.LANCHOR0
+	mov	w20, w0
+	ldr	w0, [x29,168]
+	ldrb	w2, [x1,1676]
+	cmp	w0, w2
+	bcc	.L913
+	mov	w0, -1
+	str	w0, [x26,x27]
+	b	.L914
+.L913:
+	add	x0, x1, x0, uxtw
+	adrp	x24, .LANCHOR2
+	ldrb	w19, [x0,1680]
+	add	x0, x24, :lo12:.LANCHOR2
+	str	x1, [x29,152]
+	ldrb	w0, [x0,720]
+	cmp	w0, wzr
+	mov	w0, w19
+	csel	w20, w20, wzr, ne
+	bl	NandcWaitFlashReady
+	ldr	x1, [x29,152]
+	ldr	x0, [x1,1912]
+	ldrb	w2, [x0,19]
+	sub	w0, w2, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L916
+	add	x1, x1, 4056
+	sxtw	x0, w19
+	add	x1, x1, x0
+	cmp	w2, 7
+	ldrb	w3, [x1,12]
+	bne	.L917
+	ldrb	w3, [x1,20]
+.L917:
+	add	x1, x24, :lo12:.LANCHOR2
+	add	x0, x1, x0
+	ldrb	w0, [x0,560]
+	cmp	w0, w3
+	beq	.L916
+	add	x2, x22, :lo12:.LANCHOR0
+	mov	w0, w19
+	add	x2, x2, 4060
+	ldrb	w1, [x2,-3]
+	bl	HynixSetRRPara
+.L916:
+	mov	w0, w19
+	bl	NandcFlashCs
+	ldr	w0, [x29,140]
+	cmp	w0, 1
+	cset	w0, eq
+	orr	w0, w0, w28, lsr 31
+	str	w0, [x29,152]
+	cbz	w0, .L918
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L918
+	mov	w0, w19
+	bl	flash_enter_slc_mode
+	b	.L919
+.L918:
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L919:
+	cmp	w19, 255
+	ldr	w1, [x29,172]
+	bne	.L957
+	cmn	w1, #1
+	cset	w0, ne
+	cbz	w0, .L951
+.L957:
+	cbz	w20, .L923
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w2, [x0,28]
+	mov	w0, w19
+	add	w2, w1, w2
+	bl	FlashReadDpCmd
+	b	.L924
+.L923:
+	mov	w0, w19
+	bl	FlashReadCmd
+	b	.L924
+.L951:
+	mov	w20, w0
+.L921:
+	ldrb	w2, [x29,148]
+	mov	w0, w19
+	ldr	x3, [x21,8]
+	mov	w1, 0
+	ldr	x4, [x21,16]
+	bl	NandcXferData
+	cmn	w0, #1
+	mov	w28, w0
+	bne	.L925
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w1, [x0,32]
+	cbz	w1, .L925
+	strb	wzr, [x0,32]
+	mov	w20, 0
+	b	.L919
+.L925:
+	cbz	w20, .L926
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w1, [x29,172]
+	ldr	w2, [x0,28]
+	mov	w0, w19
+	add	w1, w2, w1
+	bl	FlashReadDpDataOutCmd
+	add	w0, w25, 1
+	mov	w4, 56
+	ldrb	w2, [x29,148]
+	mov	w1, 0
+	umull	x4, w0, w4
+	mov	w0, w19
+	add	x4, x26, x4
+	ldr	x3, [x4,8]
+	ldr	x4, [x4,16]
+	bl	NandcXferData
+	cmn	w0, #1
+	mov	w23, w0
+	csel	w20, w20, wzr, ne
+.L926:
+	mov	w0, w19
+	bl	NandcFlashDeCs
+	add	x6, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x29,136]
+	cmn	w28, #1
+	strb	w0, [x6,32]
+	bne	.L933
+	add	x0, x24, :lo12:.LANCHOR2
+	ldrb	w0, [x0,565]
+	cbnz	w0, .L928
+.L932:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x20, [x0,664]
+	cbnz	x20, .L929
+	b	.L1002
+.L928:
+	ldr	x0, [x6,3976]
+	mov	w4, 1
+	ldr	w1, [x29,172]
+	ldr	x2, [x21,8]
+	ldr	x3, [x21,16]
+	ldr	w20, [x0,304]
+	mov	w0, w19
+	str	x6, [x29,104]
+	bl	FlashDdrTunningRead
+	cmn	w0, #1
+	mov	w28, w0
+	beq	.L931
+	ldr	x6, [x29,104]
+	ldrb	w0, [x6,4044]
+	cmp	w28, w0, lsr 1
+	bls	.L953
+.L931:
+	lsr	w0, w20, 8
+	bl	NandcSetDdrPara
+	cmn	w28, #1
+	beq	.L932
+	b	.L953
+.L929:
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	ldr	x2, [x21,8]
+	ldr	x3, [x21,16]
+	blr	x20
+	cmn	w0, #1
+	mov	w28, w0
+	mov	w20, 0
+	bne	.L934
+	add	x2, x22, :lo12:.LANCHOR0
+	ldr	x0, [x2,1912]
+	ldrb	w0, [x0,19]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L935
+	ldrb	w1, [x2,4057]
+	mov	w0, w19
+	add	x2, x2, 4060
+	mov	w3, w20
+	bl	HynixSetRRPara
+.L935:
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	ldr	x2, [x21,8]
+	mov	w20, 0
+	ldr	x3, [x21,16]
+	bl	FlashReadRawPage
+	mov	w28, w0
+	add	x4, x22, :lo12:.LANCHOR0
+	ldr	x0, [x29,112]
+	ldr	w1, [x21,4]
+	mov	w3, w28
+	str	x4, [x29,104]
+	ldrb	w2, [x4,4044]
+	bl	printk
+	cmn	w28, #1
+	ldr	x4, [x29,104]
+	bne	.L934
+	ldrb	w0, [x4,136]
+	cbz	w0, .L934
+	ldr	w0, [x29,152]
+	cbz	w0, .L936
+	mov	w0, w19
+	bl	flash_enter_slc_mode
+	b	.L937
+.L936:
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L937:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	w1, [x29,172]
+	ldr	x2, [x21,8]
+	mov	w20, 0
+	ldr	x3, [x21,16]
+	ldr	x4, [x0,664]
+	mov	w0, w19
+	blr	x4
+	mov	w28, w0
+	b	.L934
+.L1002:
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	ldr	x2, [x21,8]
+	ldr	x3, [x21,16]
+	bl	FlashReadRawPage
+	mov	w28, w0
+	b	.L934
+.L953:
+	mov	w20, 0
+.L933:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,4044]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bls	.L934
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x0, [x0,664]
+	cmp	x0, xzr
+	mov	w0, 256
+	csel	w28, w28, w0, ne
+.L934:
+	cmp	w28, 256
+	beq	.L958
+	cmn	w28, #1
+	bne	.L938
+.L958:
+	str	w28, [x26,x27]
+	b	.L940
+.L938:
+	str	wzr, [x26,x27]
+.L940:
+	ldr	w3, [x26,x27]
+	cmn	w3, #1
+	bne	.L942
+	add	x2, x22, :lo12:.LANCHOR0
+	ldr	w1, [x21,4]
+	ldr	x0, [x29,128]
+	ldrb	w2, [x2,4044]
+	bl	printk
+	ldr	x1, [x21,16]
+	cbz	x1, .L942
+	mov	w2, 4
+	ldr	x0, [x29,120]
+	mov	w3, w2
+	bl	rknand_print_hex
+.L942:
+	cbz	w20, .L944
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,4044]
+	add	w0, w0, w0, lsl 1
+	cmp	w23, w0, lsr 2
+	bls	.L945
+	add	x24, x24, :lo12:.LANCHOR2
+	ldr	x0, [x24,664]
+	cmp	x0, xzr
+	mov	w0, 256
+	csel	w23, w23, w0, ne
+.L945:
+	add	w0, w25, 1
+	mov	w1, 56
+	cmp	w23, 256
+	umull	x0, w0, w1
+	beq	.L959
+	cmn	w23, #1
+	bne	.L946
+.L959:
+	str	w23, [x26,x0]
+	b	.L944
+.L946:
+	str	wzr, [x26,x0]
+.L944:
+	ldr	w0, [x29,152]
+	add	w25, w25, w20
+	cbz	w0, .L914
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L914
+	mov	w0, w19
+	bl	flash_exit_slc_mode
+.L914:
+	add	w25, w25, 1
+	b	.L911
+.L1001:
+	mov	w0, 0
+	b	.L999
+.L924:
+	mov	w0, w19
+	bl	NandcWaitFlashReady
+	cbz	w20, .L921
+	ldr	w1, [x29,172]
+	mov	w0, w19
+	bl	FlashReadDpDataOutCmd
+	b	.L921
+.L999:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	FlashReadPages, .-FlashReadPages
+	.align	2
+	.global	FlashLoadFactorBbt
+	.type	FlashLoadFactorBbt, %function
+FlashLoadFactorBbt:
+	stp	x29, x30, [sp, -192]!
+	mov	w2, 16
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	add	x0, x22, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR2
+	mov	w27, -1
+	ldrh	w1, [x0,4028]
+	add	x19, x23, :lo12:.LANCHOR2
+	ldrh	w21, [x0,4030]
+	add	x0, x19, 728
+	mov	w28, 0
+	adrp	x26, .LC19
+	add	x26, x26, :lo12:.LC19
+	mul	w21, w1, w21
+	mov	w1, 0
+	uxth	w21, w21
+	bl	ftl_memset
+	add	w25, w21, w27
+	ldr	x0, [x19,696]
+	str	x0, [x29,152]
+	mov	w19, w28
+	sub	w0, w21, #12
+	str	xzr, [x29,144]
+	uxth	w25, w25
+	str	w0, [x29,124]
+.L1004:
+	add	x1, x22, :lo12:.LANCHOR0
+	ldrb	w1, [x1,1676]
+	cmp	w1, w19
+	bls	.L1014
+	mul	w3, w19, w21
+	mov	w20, w25
+	mov	w4, 61664
+.L1005:
+	ldr	w0, [x29,124]
+	cmp	w20, w0
+	ble	.L1007
+	add	w1, w3, w20
+	add	x0, x29, 136
+	lsl	w1, w1, 10
+	str	w1, [x29,140]
+	mov	w1, 1
+	str	x4, [x29,104]
+	mov	w2, w1
+	str	x3, [x29,112]
+	bl	FlashReadPages
+	ldr	w0, [x29,136]
+	ldr	x3, [x29,112]
+	cmn	w0, #1
+	ldr	x4, [x29,104]
+	beq	.L1006
+	add	x24, x23, :lo12:.LANCHOR2
+	ldr	x0, [x24,696]
+	ldrh	w0, [x0]
+	cmp	w0, w4
+	bne	.L1006
+	add	x24, x24, 728
+	mov	x0, x26
+	mov	w1, w19
+	mov	w2, w20
+	add	w28, w28, 1
+	bl	printk
+	strh	w20, [x24,w19,sxtw 1]
+	uxth	w28, w28
+	b	.L1007
+.L1006:
+	sub	w20, w20, #1
+	uxth	w20, w20
+	b	.L1005
+.L1007:
+	add	x1, x22, :lo12:.LANCHOR0
+	add	w19, w19, 1
+	uxtb	w19, w19
+	ldrb	w1, [x1,1676]
+	cmp	w1, w28
+	csel	w27, w27, wzr, ne
+	b	.L1004
+.L1014:
+	mov	w0, w27
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 192
+	ret
+	.size	FlashLoadFactorBbt, .-FlashLoadFactorBbt
+	.align	2
+	.global	FlashReadFacBbtData
+	.type	FlashReadFacBbtData, %function
+FlashReadFacBbtData:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	mov	x22, x0
+	adrp	x0, .LANCHOR0
+	add	x4, x0, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	w23, w1
+	ldr	x0, [x0,#:lo12:.LANCHOR0]
+	ldrh	w3, [x4,4028]
+	mov	w25, w2
+	ldrh	w1, [x4,4030]
+	adrp	x4, .LANCHOR2
+	str	x0, [x29,96]
+	add	x0, x4, :lo12:.LANCHOR2
+	mov	x21, x4
+	mov	w26, 61664
+	mul	w3, w3, w1
+	ldr	x0, [x0,696]
+	str	x0, [x29,104]
+	uxth	w3, w3
+	sub	w20, w3, #1
+	sub	w19, w3, #16
+	mul	w24, w23, w3
+	uxth	w20, w20
+.L1016:
+	cmp	w20, w19
+	ble	.L1024
+	add	w0, w20, w24
+	mov	w1, 1
+	lsl	w0, w0, 10
+	mov	w2, w1
+	str	w0, [x29,92]
+	add	x0, x29, 88
+	bl	FlashReadPages
+	ldr	w0, [x29,88]
+	cmn	w0, #1
+	beq	.L1017
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x0, [x0,696]
+	ldrh	w0, [x0]
+	cmp	w0, w26
+	bne	.L1017
+	mov	w0, w22
+	cbz	x22, .L1018
+	mov	x0, x22
+	mov	w1, w23
+	mov	w2, w25
+	bl	FlashReadFacBbtData.part.6
+	b	.L1018
+.L1017:
+	sub	w20, w20, #1
+	uxth	w20, w20
+	b	.L1016
+.L1024:
+	mov	w0, -1
+.L1018:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	FlashReadFacBbtData, .-FlashReadFacBbtData
+	.align	2
+	.global	FlashGetBadBlockList
+	.type	FlashGetBadBlockList, %function
+FlashGetBadBlockList:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	mov	x21, x0
+	adrp	x0, .LANCHOR0+1912
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	ldr	x0, [x0,#:lo12:.LANCHOR0+1912]
+	ldrb	w2, [x0,13]
+	ldrh	w19, [x0,14]
+	add	x0, x20, :lo12:.LANCHOR2
+	mul	w19, w2, w19
+	ldr	x0, [x0,688]
+	uxth	w19, w19
+	add	w2, w19, 7
+	lsr	w2, w2, 3
+	bl	FlashReadFacBbtData
+	cmn	w0, #1
+	bne	.L1026
+.L1030:
+	mov	w1, 0
+	b	.L1027
+.L1026:
+	mov	w2, 0
+	lsr	w0, w19, 4
+	mov	w1, w2
+	sub	w19, w19, #1
+	mov	w5, 1
+.L1028:
+	cmp	w2, w19
+	bge	.L1027
+	add	x3, x20, :lo12:.LANCHOR2
+	ubfx	x4, x2, 5, 11
+	ldr	x6, [x3,688]
+	lsl	w3, w5, w2
+	ldr	w4, [x6,x4,lsl 2]
+	tst	w3, w4
+	beq	.L1029
+	add	w3, w1, 1
+	ubfiz	x1, x1, 1, 16
+	strh	w2, [x21,x1]
+	uxth	w1, w3
+.L1029:
+	cmp	w1, w0
+	bcs	.L1030
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L1028
+.L1027:
+	ubfiz	x1, x1, 1, 16
+	mov	w0, -1
+	ldp	x19, x20, [sp,16]
+	strh	w0, [x21,x1]
+	mov	w0, 0
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashGetBadBlockList, .-FlashGetBadBlockList
+	.align	2
+	.global	FlashProgSlc2KPages
+	.type	FlashProgSlc2KPages, %function
+FlashProgSlc2KPages:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	mov	w23, w1
+	adrp	x1, .LANCHOR1+265
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	adrp	x22, .LANCHOR0
+	ldrb	w26, [x1,#:lo12:.LANCHOR1+265]
+	stp	x27, x28, [sp,80]
+	stp	x19, x20, [sp,16]
+	mov	w24, w2
+	mov	w27, w3
+	mov	x19, x0
+	mov	x21, x0
+	mov	w25, 0
+	add	x22, x22, :lo12:.LANCHOR0
+	mov	w28, -1
+.L1036:
+	cmp	w25, w23
+	beq	.L1065
+	mov	w1, w24
+	sub	w4, w23, w25
+	mov	x0, x21
+	add	x2, x29, 96
+	add	x3, x29, 100
+	bl	LogAddr2PhyAddr
+	ldr	w0, [x29,100]
+	ldrb	w1, [x22,1676]
+	cmp	w0, w1
+	bcc	.L1037
+	str	w28, [x21]
+	b	.L1038
+.L1037:
+	add	x0, x22, x0, uxtw
+	ldrb	w20, [x0,1680]
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	mov	w0, w20
+	bl	NandcFlashCs
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashProgFirstCmd
+	ldr	x3, [x21,8]
+	mov	w2, w26
+	ldr	x4, [x21,16]
+	mov	w1, 1
+	mov	w0, w20
+	bl	NandcXferData
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashProgSecondCmd
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashReadStatus
+	sbfx	x0, x0, 0, 1
+	str	w0, [x21]
+	mov	w0, w20
+	ldr	w1, [x29,96]
+	ldr	w2, [x22,28]
+	add	w1, w2, w1
+	bl	FlashProgFirstCmd
+	ldr	x0, [x21,8]
+	mov	w1, 1
+	mov	w2, w26
+	cmp	x0, xzr
+	add	x3, x0, 2048
+	ldr	x0, [x21,16]
+	csel	x3, x3, xzr, ne
+	add	x4, x0, 8
+	cmp	x0, xzr
+	csel	x4, x4, xzr, ne
+	mov	w0, w20
+	bl	NandcXferData
+	adrp	x0, .LANCHOR0
+	ldr	w1, [x29,96]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldr	w2, [x0,28]
+	mov	w0, w20
+	add	w1, w2, w1
+	bl	FlashProgSecondCmd
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	ldr	w1, [x29,96]
+	mov	w0, w20
+	bl	FlashReadStatus
+	tbz	x0, 0, .L1041
+	str	w28, [x21]
+.L1041:
+	mov	w0, w20
+	bl	NandcFlashDeCs
+.L1038:
+	add	w25, w25, 1
+	add	x21, x21, 56
+	b	.L1036
+.L1065:
+	mov	w21, 0
+	cbz	w27, .L1063
+	adrp	x25, .LC23
+	adrp	x26, .LC22
+	adrp	x27, .LC21
+	add	x25, x25, :lo12:.LC23
+	add	x26, x26, :lo12:.LC22
+	add	x27, x27, :lo12:.LC21
+.L1064:
+	cmp	w21, w23
+	beq	.L1063
+	ldr	w0, [x19]
+	cmn	w0, #1
+	bne	.L1044
+	adrp	x0, .LC20
+	ldr	w1, [x19,4]
+	add	x0, x0, :lo12:.LC20
+	bl	printk
+	b	.L1045
+.L1044:
+	adrp	x20, .LANCHOR2
+	sub	w4, w23, w21
+	add	x22, x20, :lo12:.LANCHOR2
+	add	x3, x29, 100
+	mov	w1, w24
+	add	x2, x29, 96
+	mov	x0, x19
+	bl	LogAddr2PhyAddr
+	ldr	x0, [x22,704]
+	mov	x1, x19
+	mov	x2, 56
+	str	wzr, [x0]
+	ldr	x0, [x22,712]
+	str	wzr, [x0]
+	add	x0, x29, 104
+	bl	memcpy
+	ldr	x0, [x22,704]
+	mov	w1, 1
+	str	x0, [x29,112]
+	mov	w2, w24
+	ldr	x0, [x22,712]
+	str	x0, [x29,120]
+	add	x0, x29, 104
+	bl	FlashReadPages
+	ldr	w22, [x29,104]
+	cmn	w22, #1
+	bne	.L1046
+	ldr	w1, [x19,4]
+	mov	x0, x27
+	bl	printk
+	str	w22, [x19]
+.L1046:
+	ldr	x0, [x19,16]
+	cbz	x0, .L1047
+	ldr	w2, [x0]
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x0, [x0,712]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1047
+	ldr	w1, [x19,4]
+	mov	x0, x26
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1047:
+	ldr	x0, [x19,8]
+	cbz	x0, .L1045
+	add	x20, x20, :lo12:.LANCHOR2
+	ldr	w2, [x0]
+	ldr	x0, [x20,704]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1045
+	ldr	w1, [x19,4]
+	mov	x0, x25
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1045:
+	add	w21, w21, 1
+	add	x19, x19, 56
+	b	.L1064
+.L1063:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	FlashProgSlc2KPages, .-FlashProgSlc2KPages
+	.align	2
+	.global	FlashProgPages
+	.type	FlashProgPages, %function
+FlashProgPages:
+	stp	x29, x30, [sp, -192]!
+	adrp	x6, .LANCHOR1+265
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	mov	w22, 0
+	add	x4, x21, :lo12:.LANCHOR0
+	str	w3, [x29,124]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	mov	w25, w1
+	ldr	x5, [x4,1912]
+	mov	w23, w2
+	ldrb	w4, [x4,24]
+	ldrb	w27, [x6,#:lo12:.LANCHOR1+265]
+	ldrb	w5, [x5,19]
+	cbz	w4, .L1067
+	bl	FlashProgSlc2KPages
+	b	.L1068
+.L1067:
+	sub	w0, w5, #1
+	adrp	x28, .LANCHOR2
+	str	w0, [x29,120]
+	add	x0, x28, :lo12:.LANCHOR2
+	str	x0, [x29,112]
+.L1119:
+	cmp	w22, w25
+	bcs	.L1120
+	mov	w20, 56
+	mov	w1, w23
+	add	x2, x29, 128
+	sub	w4, w25, w22
+	umull	x20, w22, w20
+	add	x3, x29, 132
+	add	x26, x19, x20
+	mov	x0, x26
+	bl	LogAddr2PhyAddr
+	mov	w24, w0
+	add	x1, x21, :lo12:.LANCHOR0
+	ldr	w0, [x29,132]
+	ldrb	w2, [x1,1676]
+	cmp	w0, w2
+	bcc	.L1069
+	mov	w0, -1
+	str	w0, [x19,x20]
+	b	.L1070
+.L1069:
+	add	x3, x28, :lo12:.LANCHOR2
+	uxtw	x0, w0
+	ldrb	w3, [x3,648]
+	cmp	w3, wzr
+	mov	x3, 24
+	csel	w24, w24, wzr, ne
+	madd	x0, x0, x3, x1
+	ldr	x0, [x0,1728]
+	cbz	x0, .L1072
+	cmp	w2, 1
+	bne	.L1073
+	ldr	x0, [x1,3976]
+	bl	NandcIqrWaitFlashReady
+.L1073:
+	ldrb	w0, [x29,132]
+	bl	FlashWaitCmdDone
+.L1072:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w2, [x29,132]
+	mov	x1, 24
+	add	x0, x0, 1720
+	madd	x0, x2, x1, x0
+	ldr	w1, [x29,128]
+	str	x26, [x0,8]
+	str	xzr, [x0,16]
+	str	w1, [x0,4]
+	cbz	w24, .L1074
+	add	w1, w22, 1
+	mov	w3, 56
+	umull	x1, w1, w3
+	add	x1, x19, x1
+	str	x1, [x0,16]
+.L1074:
+	add	x1, x21, :lo12:.LANCHOR0
+	add	x0, x1, x2
+	ldrb	w20, [x0,1680]
+	mov	x0, 24
+	madd	x2, x2, x0, x1
+	ldrb	w0, [x1,1676]
+	strb	w20, [x2,1720]
+	cmp	w0, 1
+	bne	.L1075
+	mov	w0, w20
+	bl	NandcWaitFlashReady
+	b	.L1076
+.L1075:
+	mov	w0, w20
+	str	x1, [x29,104]
+	bl	NandcFlashCs
+	ldr	x1, [x29,104]
+	ldr	w0, [x29,132]
+	add	x1, x1, 1688
+	ldr	w0, [x1,x0,lsl 2]
+	ldr	w1, [x29,128]
+	cmp	w0, wzr
+	mov	w0, w20
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	mov	w0, w20
+	bl	NandcFlashDeCs
+.L1076:
+	ldr	w0, [x29,120]
+	cmp	w0, 6
+	bhi	.L1077
+	ldr	x0, [x29,112]
+	add	x0, x0, x20, sxtw
+	ldrb	w0, [x0,560]
+	cbz	w0, .L1077
+	add	x2, x21, :lo12:.LANCHOR0
+	mov	w0, w20
+	add	x2, x2, 4060
+	mov	w3, 0
+	ldrb	w1, [x2,-3]
+	bl	HynixSetRRPara
+.L1077:
+	mov	w0, w20
+	bl	NandcFlashCs
+	cmp	w23, 1
+	bne	.L1078
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L1078
+	mov	w0, w20
+	bl	flash_enter_slc_mode
+	b	.L1079
+.L1078:
+	mov	w0, w20
+	bl	flash_exit_slc_mode
+.L1079:
+	ldr	w1, [x29,128]
+	mov	w0, w20
+	bl	FlashProgFirstCmd
+	ldr	x3, [x26,8]
+	mov	w0, w20
+	ldr	x4, [x26,16]
+	mov	w1, 1
+	mov	w2, w27
+	bl	NandcXferData
+	cbz	w24, .L1080
+	ldr	w1, [x29,128]
+	mov	w0, w20
+	add	x26, x21, :lo12:.LANCHOR0
+	bl	FlashProgDpFirstCmd
+	ldr	w1, [x29,132]
+	add	x0, x26, 1688
+	ldr	w0, [x0,x1,lsl 2]
+	ldr	w1, [x29,128]
+	cmp	w0, wzr
+	mov	w0, w20
+	cset	w2, ne
+	bl	FlashWaitReadyEN
+	ldr	w2, [x26,28]
+	mov	w0, w20
+	ldr	w1, [x29,128]
+	add	w1, w2, w1
+	bl	FlashProgDpSecondCmd
+	add	w0, w22, 1
+	mov	w4, 56
+	mov	w1, 1
+	mov	w2, w27
+	umull	x4, w0, w4
+	mov	w0, w20
+	add	x4, x19, x4
+	ldr	x3, [x4,8]
+	ldr	x4, [x4,16]
+	bl	NandcXferData
+.L1080:
+	ldr	w1, [x29,128]
+	mov	w0, w20
+	add	w22, w22, w24
+	bl	FlashProgSecondCmd
+	mov	w0, w20
+	bl	NandcFlashDeCs
+.L1070:
+	add	w22, w22, 1
+	b	.L1119
+.L1120:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	x20, 0
+	mov	x22, 24
+	ldr	x0, [x21,3976]
+	bl	NandcIqrWaitFlashReady
+.L1082:
+	ldrb	w0, [x21,1676]
+	cmp	w0, w20
+	bls	.L1121
+	mov	w0, w20
+	bl	FlashWaitCmdDone
+	cmp	w23, 1
+	bne	.L1083
+	ldrb	w0, [x21,136]
+	cbz	w0, .L1083
+	madd	x0, x20, x22, x21
+	ldrb	w0, [x0,1720]
+	bl	flash_exit_slc_mode
+.L1083:
+	add	x20, x20, 1
+	b	.L1082
+.L1121:
+	ldr	w0, [x29,124]
+	cbnz	w0, .L1085
+.L1093:
+	mov	w0, 0
+	b	.L1068
+.L1085:
+	adrp	x24, .LC23
+	adrp	x26, .LC22
+	adrp	x27, .LC21
+	mov	w21, 0
+	add	x24, x24, :lo12:.LC23
+	add	x26, x26, :lo12:.LC22
+	add	x27, x27, :lo12:.LC21
+.L1086:
+	cmp	w21, w25
+	beq	.L1093
+	ldr	w0, [x19]
+	cmn	w0, #1
+	bne	.L1087
+	adrp	x0, .LC20
+	ldr	w1, [x19,4]
+	add	x0, x0, :lo12:.LC20
+	bl	printk
+	b	.L1088
+.L1087:
+	adrp	x20, .LANCHOR2
+	sub	w4, w25, w21
+	add	x22, x20, :lo12:.LANCHOR2
+	add	x3, x29, 132
+	mov	w1, w23
+	add	x2, x29, 128
+	mov	x0, x19
+	bl	LogAddr2PhyAddr
+	ldr	x0, [x22,704]
+	mov	x1, x19
+	mov	x2, 56
+	str	wzr, [x0]
+	ldr	x0, [x22,712]
+	str	wzr, [x0]
+	add	x0, x29, 136
+	bl	memcpy
+	ldr	x0, [x22,704]
+	mov	w1, 1
+	str	x0, [x29,144]
+	mov	w2, w23
+	ldr	x0, [x22,712]
+	str	x0, [x29,152]
+	add	x0, x29, 136
+	bl	FlashReadPages
+	ldr	w22, [x29,136]
+	cmn	w22, #1
+	bne	.L1089
+	ldr	w1, [x19,4]
+	mov	x0, x27
+	bl	printk
+	str	w22, [x19]
+.L1089:
+	ldr	x0, [x19,16]
+	cbz	x0, .L1090
+	ldr	w2, [x0]
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x0, [x0,712]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1090
+	ldr	w1, [x19,4]
+	mov	x0, x26
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1090:
+	ldr	x0, [x19,8]
+	cbz	x0, .L1088
+	add	x20, x20, :lo12:.LANCHOR2
+	ldr	w2, [x0]
+	ldr	x0, [x20,704]
+	ldr	w3, [x0]
+	cmp	w2, w3
+	beq	.L1088
+	ldr	w1, [x19,4]
+	mov	x0, x24
+	bl	printk
+	mov	w0, -1
+	str	w0, [x19]
+.L1088:
+	add	w21, w21, 1
+	add	x19, x19, 56
+	b	.L1086
+.L1068:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 192
+	ret
+	.size	FlashProgPages, .-FlashProgPages
+	.align	2
+	.type	FlashTestBlk.part.7, %function
+FlashTestBlk.part.7:
+	stp	x29, x30, [sp, -160]!
+	mov	w1, 165
+	mov	w2, 32
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	uxth	w20, w0
+	add	x19, x19, :lo12:.LANCHOR2
+	lsl	w20, w20, 10
+	ldr	x0, [x19,688]
+	str	x0, [x29,48]
+	add	x0, x29, 96
+	str	x0, [x29,56]
+	bl	ftl_memset
+	ldr	x0, [x19,688]
+	mov	w1, 90
+	mov	w2, 8
+	bl	ftl_memset
+	str	w20, [x29,44]
+	mov	w1, 1
+	add	x0, x29, 40
+	mov	w2, w1
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	add	x0, x29, 40
+	mov	w3, w1
+	mov	w2, w1
+	bl	FlashProgPages
+	ldr	w0, [x29,40]
+	mov	w1, 0
+	mov	w2, 1
+	cmp	w0, wzr
+	add	x0, x29, 40
+	csetm	w19, ne
+	bl	FlashEraseBlocks
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	FlashTestBlk.part.7, .-FlashTestBlk.part.7
+	.align	2
+	.global	FlashTestBlk
+	.type	FlashTestBlk, %function
+FlashTestBlk:
+	uxth	w1, w0
+	adrp	x0, .LANCHOR0+8
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w2, [x0,#:lo12:.LANCHOR0+8]
+	mov	w0, 0
+	cmp	w1, w2
+	bcc	.L1124
+	mov	w0, w1
+	bl	FlashTestBlk.part.7
+.L1124:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FlashTestBlk, .-FlashTestBlk
+	.align	2
+	.global	FlashMakeFactorBbt
+	.type	FlashMakeFactorBbt, %function
+FlashMakeFactorBbt:
+	stp	x29, x30, [sp, -224]!
+	adrp	x2, .LANCHOR2
+	add	x29, sp, 0
+	add	x0, x2, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	adrp	x19, .LANCHOR0
+	str	x2, [x29,136]
+	ldr	x0, [x0,696]
+	mov	w20, 0
+	str	x0, [x29,152]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,4028]
+	ldrh	w22, [x0,4030]
+	ldrh	w25, [x0,28]
+	mul	w22, w1, w22
+	ldr	x1, [x0,1912]
+	ldrb	w0, [x0,24]
+	uxth	w22, w22
+	ldrb	w1, [x1,24]
+	cmp	w0, 1
+	str	w1, [x29,148]
+	adrp	x0, .LC24
+	ubfiz	w1, w25, 1, 15
+	add	x0, x0, :lo12:.LC24
+	csel	w25, w1, w25, eq
+	mov	w1, 1
+	bl	printk
+	ldr	x0, [x29,136]
+	mov	w1, 0
+	mov	w2, 4096
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	x0, [x0,696]
+	bl	ftl_memset
+	lsr	w0, w22, 4
+	str	w0, [x29,144]
+	ldr	w0, [x29,148]
+	and	w0, w0, 1
+	str	w0, [x29,124]
+	ldr	w0, [x29,148]
+	and	w0, w0, 2
+	uxtb	w0, w0
+	str	w0, [x29,120]
+	sub	w0, w22, #1
+	uxth	w0, w0
+	str	w0, [x29,132]
+.L1128:
+	add	x23, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x23,1676]
+	cmp	w0, w20
+	bls	.L1179
+	ldr	x0, [x29,136]
+	sxtw	x24, w20
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 728
+	ldrh	w21, [x0,w20,sxtw 1]
+	cbnz	w21, .L1158
+	ldrh	w2, [x23,4036]
+	mov	w1, w21
+	ldr	x0, [x19,#:lo12:.LANCHOR0]
+	add	x23, x23, x24
+	lsl	w2, w2, 9
+	mov	w26, w21
+	bl	ftl_memset
+	ldrb	w27, [x23,1680]
+	ldr	w0, [x29,148]
+	mov	w23, w21
+	and	w0, w0, 4
+	uxtb	w0, w0
+	str	w0, [x29,128]
+.L1130:
+	uxth	w28, w26
+	cmp	w28, w22
+	bcs	.L1140
+	mov	w0, -1
+	strb	w0, [x29,166]
+	strb	w0, [x29,167]
+	ldr	w0, [x29,124]
+	cbz	w0, .L1132
+	add	x4, x19, :lo12:.LANCHOR0
+	add	x2, x29, 166
+	add	x0, x4, 1688
+	str	x4, [x29,104]
+	ldr	w3, [x0,x24,lsl 2]
+	mov	w0, w27
+	add	w3, w21, w3
+	str	x3, [x29,112]
+	mov	w1, w3
+	bl	FlashReadSpare
+	ldr	x4, [x29,104]
+	ldr	x3, [x29,112]
+	ldrb	w0, [x4,24]
+	cmp	w0, 1
+	bne	.L1132
+	ldr	w1, [x4,28]
+	mov	w0, w27
+	add	x2, x29, 167
+	add	w1, w3, w1
+	bl	FlashReadSpare
+	ldrb	w0, [x29,166]
+	ldrb	w1, [x29,167]
+	and	w0, w1, w0
+	strb	w0, [x29,166]
+.L1132:
+	ldr	w0, [x29,120]
+	cbz	w0, .L1134
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x2, x29, 167
+	add	x0, x0, 1688
+	ldr	x1, [x0,224]
+	ldr	w0, [x0,x24,lsl 2]
+	ldrh	w1, [x1,10]
+	sub	w1, w1, #1
+	add	w1, w1, w0
+	mov	w0, w27
+	add	w1, w1, w21
+	bl	FlashReadSpare
+.L1134:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x29,166]
+	ldr	x0, [x0,1912]
+	ldrb	w0, [x0,7]
+	cmp	w0, 8
+	beq	.L1159
+	cmp	w0, 1
+	bne	.L1135
+.L1159:
+	mov	w0, 1
+	cbz	w1, .L1137
+	ldrb	w0, [x29,167]
+	cmp	w0, wzr
+	cset	w0, eq
+	b	.L1137
+.L1135:
+	cmp	w1, 255
+	mov	w0, 1
+	bne	.L1137
+	ldrb	w0, [x29,167]
+	cmp	w0, 255
+	cset	w0, ne
+.L1137:
+	ldr	w1, [x29,128]
+	cbz	w1, .L1138
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 1688
+	ldr	w1, [x0,x24,lsl 2]
+	mov	w0, w27
+	add	w1, w21, w1
+	bl	SandiskProgTestBadBlock
+.L1138:
+	cbz	w0, .L1139
+	adrp	x0, .LC25
+	mov	w1, w20
+	mov	w2, w26
+	add	x0, x0, :lo12:.LC25
+	add	w23, w23, 1
+	bl	printk
+	ubfx	x1, x28, 5, 11
+	ldr	x3, [x19,#:lo12:.LANCHOR0]
+	lsl	x1, x1, 2
+	mov	w0, 1
+	lsl	w28, w0, w28
+	add	x2, x19, :lo12:.LANCHOR0
+	uxth	w23, w23
+	ldr	w0, [x3,x1]
+	orr	w28, w0, w28
+	str	w28, [x3,x1]
+	ldr	w1, [x29,144]
+	ldrb	w0, [x2,1676]
+	mul	w0, w1, w0
+	cmp	w23, w0
+	bgt	.L1140
+.L1139:
+	add	w26, w26, 1
+	add	w21, w21, w25
+	b	.L1130
+.L1140:
+	adrp	x0, .LC26
+	mov	w1, w20
+	mov	w2, w23
+	add	x0, x0, :lo12:.LC26
+	bl	printk
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	w2, [x29,144]
+	ldrb	w0, [x1,1676]
+	mul	w0, w2, w0
+	cmp	w23, w0
+	blt	.L1142
+	ldrh	w2, [x1,4036]
+	mov	w1, 0
+	ldr	x0, [x19,#:lo12:.LANCHOR0]
+	lsl	w2, w2, 9
+	bl	ftl_memset
+.L1142:
+	cbnz	w20, .L1144
+	add	x0, x19, :lo12:.LANCHOR0
+	adrp	x26, .LC27
+	mov	w21, w20
+	add	x26, x26, :lo12:.LC27
+	mov	w23, 1
+	ldrh	w27, [x0,8]
+.L1145:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,25]
+	cmp	w0, w27
+	bls	.L1180
+	mov	w0, w27
+	bl	FlashTestBlk
+	cbz	w0, .L1146
+	mov	w1, w27
+	mov	x0, x26
+	add	w21, w21, 1
+	bl	printk
+	ubfx	x1, x27, 5, 11
+	ldr	x2, [x19,#:lo12:.LANCHOR0]
+	lsl	x1, x1, 2
+	lsl	w0, w23, w27
+	uxth	w21, w21
+	ldr	w3, [x2,x1]
+	orr	w0, w3, w0
+	str	w0, [x2,x1]
+.L1146:
+	add	w27, w27, 1
+	uxth	w27, w27
+	b	.L1145
+.L1180:
+	adrp	x26, .LC27
+	ldr	w28, [x29,132]
+	sub	w27, w22, #50
+	add	x26, x26, :lo12:.LC27
+	mov	w23, 1
+.L1148:
+	cmp	w28, w27
+	ble	.L1181
+	mov	w0, w28
+	bl	FlashTestBlk
+	cbz	w0, .L1149
+	mov	w1, w28
+	mov	x0, x26
+	bl	printk
+	ubfx	x1, x28, 5, 11
+	ldr	x2, [x19,#:lo12:.LANCHOR0]
+	lsl	x1, x1, 2
+	lsl	w0, w23, w28
+	ldr	w3, [x2,x1]
+	orr	w0, w3, w0
+	str	w0, [x2,x1]
+.L1149:
+	sub	w28, w28, #1
+	uxth	w28, w28
+	b	.L1148
+.L1181:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,25]
+	ldr	w2, [x0,8]
+	sub	w1, w1, w2
+	cmp	w21, w1
+	bcc	.L1144
+	ldrh	w2, [x0,4036]
+	mov	w1, 0
+	ldr	x0, [x19,#:lo12:.LANCHOR0]
+	lsl	w2, w2, 9
+	bl	ftl_memset
+.L1144:
+	ldr	x0, [x29,136]
+	adrp	x23, .LC28
+	ldr	w27, [x29,132]
+	add	x23, x23, :lo12:.LC28
+	mul	w26, w20, w22
+	add	x28, x0, :lo12:.LANCHOR2
+	mov	w21, -3872
+.L1152:
+	mov	w2, w27
+	mov	x0, x23
+	mov	w1, w20
+	bl	printk
+	ldr	x2, [x19,#:lo12:.LANCHOR0]
+.L1153:
+	ubfx	x0, x27, 5, 11
+	ldr	w0, [x2,x0,lsl 2]
+	lsr	w0, w0, w27
+	and	w1, w0, 1
+	tbz	x0, 0, .L1182
+	sub	w27, w27, #1
+	uxth	w27, w27
+	b	.L1153
+.L1182:
+	add	x0, x28, 728
+	strh	w27, [x0,x24,lsl 1]
+	ldr	x0, [x29,152]
+	strh	w21, [x0]
+	strh	w27, [x0,2]
+	strh	w1, [x0,8]
+	mov	w1, 1
+	ldr	x0, [x19,#:lo12:.LANCHOR0]
+	mov	w2, w1
+	str	x0, [x29,176]
+	ldr	x0, [x28,696]
+	str	x0, [x29,184]
+	add	w0, w27, w26
+	lsl	w0, w0, 10
+	str	w0, [x29,172]
+	add	x0, x29, 168
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	add	x0, x29, 168
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+	ldr	w0, [x29,168]
+	cbz	w0, .L1158
+	sub	w27, w27, #1
+	uxth	w27, w27
+	b	.L1152
+.L1158:
+	add	w20, w20, 1
+	uxtb	w20, w20
+	b	.L1128
+.L1179:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 224
+	ret
+	.size	FlashMakeFactorBbt, .-FlashMakeFactorBbt
+	.align	2
+	.global	Ftl_log2
+	.type	Ftl_log2, %function
+Ftl_log2:
+	mov	w2, 1
+	mov	w1, 0
+.L1184:
+	cmp	w2, w0
+	bhi	.L1186
+	add	w1, w1, 1
+	lsl	w2, w2, 1
+	uxth	w1, w1
+	b	.L1184
+.L1186:
+	sub	w0, w1, #1
+	ret
+	.size	Ftl_log2, .-Ftl_log2
+	.align	2
+	.global	FtlPrintInfo
+	.type	FtlPrintInfo, %function
+FtlPrintInfo:
+	ret
+	.size	FtlPrintInfo, .-FtlPrintInfo
+	.align	2
+	.global	FtlSysBlkNumInit
+	.type	FtlSysBlkNumInit, %function
+FtlSysBlkNumInit:
+	uxth	w0, w0
+	mov	w1, 24
+	cmp	w0, 23
+	csel	w0, w0, w1, hi
+	adrp	x1, .LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR2
+	ldrh	w2, [x1,748]
+	ldrh	w3, [x1,758]
+	str	w0, [x1,744]
+	mul	w2, w0, w2
+	sub	w0, w3, w0
+	strh	w0, [x1,756]
+	ldr	w0, [x1,764]
+	str	w2, [x1,752]
+	sub	w2, w0, w2
+	mov	w0, 0
+	str	w2, [x1,760]
+	ret
+	.size	FtlSysBlkNumInit, .-FtlSysBlkNumInit
+	.align	2
+	.global	FtlConstantsInit
+	.type	FtlConstantsInit, %function
+FtlConstantsInit:
+	stp	x29, x30, [sp, -96]!
+	mov	x3, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x24, x0
+	adrp	x19, .LANCHOR2
+	ldrh	w6, [x0,8]
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x24,10]
+	ldrh	w1, [x24,12]
+	ldrh	w4, [x24,14]
+	strh	w6, [x0,768]
+	strh	w2, [x0,770]
+	strh	w1, [x0,772]
+	strh	w4, [x0,758]
+.L1191:
+	add	x5, x0, 776
+	strb	w3, [x3,x5]
+	add	x3, x3, 1
+	cmp	x3, 32
+	bne	.L1191
+	ldrh	w3, [x24,20]
+	ldrb	w0, [x24,15]
+	cmp	w3, w0
+	bcs	.L1192
+	uxtb	w8, w1
+	mov	w3, 0
+	mul	w11, w1, w2
+	ubfiz	w10, w8, 1, 7
+	add	x12, x19, :lo12:.LANCHOR2
+.L1193:
+	cmp	w3, w1
+	bcs	.L1195
+	uxtb	w0, w3
+	mov	w5, w3
+	mov	w7, 0
+.L1196:
+	cmp	w7, w2
+	bcs	.L1218
+	add	x9, x12, 776
+	add	w13, w5, w11
+	add	w14, w0, w8
+	add	w7, w7, 1
+	strb	w0, [x9,w5,uxtw]
+	add	w0, w0, w10
+	strb	w14, [x9,x13]
+	add	w5, w5, w1
+	uxtb	w0, w0
+	b	.L1196
+.L1218:
+	add	w3, w3, 1
+	b	.L1193
+.L1195:
+	add	x0, x19, :lo12:.LANCHOR2
+	lsl	w2, w2, 1
+	lsr	w4, w4, 1
+	strh	w2, [x0,770]
+	strh	w4, [x0,758]
+.L1192:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 5
+	cmp	w6, 1
+	strh	w2, [x0,808]
+	strh	wzr, [x0,810]
+	bne	.L1197
+	strh	w6, [x0,808]
+.L1197:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 4352
+	adrp	x22, .LANCHOR0
+	strh	w2, [x0,812]
+	add	x2, x22, :lo12:.LANCHOR0
+	ldrb	w27, [x2,24]
+	cbz	w27, .L1198
+	mov	w2, 384
+	strh	w2, [x0,812]
+.L1198:
+	add	x21, x19, :lo12:.LANCHOR2
+	ldrh	w20, [x21,758]
+	ldrh	w23, [x21,770]
+	mul	w23, w1, w23
+	mul	w1, w20, w1
+	uxth	w23, w23
+	strh	w23, [x21,748]
+	uxth	w0, w1
+	strh	w0, [x21,814]
+	bl	Ftl_log2
+	ldrh	w26, [x24,16]
+	ldrh	w25, [x24,20]
+	strh	w0, [x21,816]
+	mul	w0, w23, w26
+	strh	w0, [x21,822]
+	mov	w0, w25
+	ldrh	w28, [x24,18]
+	strh	w26, [x21,818]
+	strh	w28, [x21,820]
+	strh	w25, [x21,824]
+	bl	Ftl_log2
+	lsl	w2, w25, 9
+	uxth	w3, w0
+	strh	w0, [x21,826]
+	cmp	w20, 1024
+	ldrh	w0, [x24,26]
+	strh	w2, [x21,828]
+	ubfx	x2, x2, 9, 7
+	strh	w0, [x21,832]
+	lsl	w2, w2, 1
+	mul	w0, w23, w20
+	strh	w2, [x21,830]
+	str	w0, [x21,764]
+	bls	.L1199
+	and	w0, w20, 255
+	strh	w0, [x21,810]
+.L1199:
+	add	x2, x19, :lo12:.LANCHOR2
+	mul	w0, w25, w28
+	ldrh	w1, [x2,810]
+	sub	w1, w20, w1
+	mul	w1, w23, w1
+	mul	w1, w1, w25
+	mul	w1, w1, w26
+	asr	w1, w1, 11
+	str	w1, [x2,836]
+	ldrh	w1, [x2,812]
+	lsl	w1, w1, 3
+	sdiv	w0, w1, w0
+	uxth	w0, w0
+	cmp	w0, 4
+	bhi	.L1215
+	mov	w0, 4
+.L1215:
+	strh	w0, [x2,840]
+	cbz	w27, .L1202
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 640
+	strh	w1, [x0,812]
+.L1202:
+	add	x1, x19, :lo12:.LANCHOR2
+	lsl	w20, w20, 6
+	cmp	w23, 1
+	ldrh	w0, [x1,812]
+	asr	w0, w0, w3
+	add	w3, w3, 9
+	asr	w20, w20, w3
+	strh	w20, [x1,844]
+	and	w20, w20, 65535
+	add	w0, w0, 2
+	strh	w0, [x1,842]
+	mul	w0, w20, w23
+	str	w0, [x1,848]
+	add	w20, w20, 8
+	ldrh	w0, [x1,840]
+	udiv	w0, w0, w23
+	add	w20, w20, w0
+	bne	.L1216
+	add	w20, w20, 4
+.L1216:
+	str	w20, [x1,744]
+	add	x20, x19, :lo12:.LANCHOR2
+	add	x22, x22, :lo12:.LANCHOR0
+	ldrh	w0, [x20,744]
+	bl	FtlSysBlkNumInit
+	str	wzr, [x22,4048]
+	ldr	w0, [x20,744]
+	str	w0, [x20,852]
+	ldr	w0, [x20,760]
+	ldrh	w1, [x20,818]
+	lsl	w0, w0, 2
+	ldrh	w3, [x20,824]
+	ldrh	w2, [x20,840]
+	mul	w1, w0, w1
+	ldrh	w0, [x20,826]
+	ldrb	w5, [x22,136]
+	add	w0, w0, 9
+	lsr	w0, w1, w0
+	mov	w1, 2048
+	add	w0, w0, 2
+	sdiv	w1, w1, w3
+	strh	w1, [x20,858]
+	uxth	w0, w0
+	strh	w0, [x20,856]
+	add	w1, w2, 3
+	strh	w1, [x20,840]
+	ldr	w1, [x20,848]
+	add	w4, w1, 3
+	str	w4, [x20,848]
+	cbz	w5, .L1205
+	add	w2, w2, 4
+	add	w1, w1, 5
+	strh	w2, [x20,840]
+	b	.L1217
+.L1205:
+	cmp	w4, 7
+	bhi	.L1206
+	mov	w1, 8
+.L1217:
+	str	w1, [x20,848]
+.L1206:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x19,756]
+	strh	wzr, [x19,860]
+	lsr	w2, w1, 3
+	add	w1, w2, w1, lsl 1
+	add	w1, w1, 52
+	add	w0, w1, w0, lsl 2
+	cmp	w0, w3, lsl 9
+	bcs	.L1207
+	mov	w0, 1
+	strh	w0, [x19,860]
+.L1207:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlConstantsInit, .-FtlConstantsInit
+	.align	2
+	.global	FtlMemInit
+	.type	FtlMemInit, %function
+FtlMemInit:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, 65535
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	str	x23, [sp,48]
+	add	x0, x20, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	str	w1, [x0,932]
+	mov	w1, -1
+	strh	wzr, [x0,862]
+	strh	w1, [x0,948]
+	strh	w1, [x0,950]
+	mov	w1, 32
+	str	wzr, [x0,864]
+	strh	w1, [x0,952]
+	mov	w1, 128
+	str	wzr, [x0,868]
+	str	wzr, [x0,872]
+	str	wzr, [x0,876]
+	str	wzr, [x0,880]
+	str	wzr, [x0,884]
+	str	wzr, [x0,888]
+	str	wzr, [x0,892]
+	str	wzr, [x0,896]
+	str	wzr, [x0,900]
+	str	wzr, [x0,904]
+	str	wzr, [x0,908]
+	str	wzr, [x0,912]
+	str	wzr, [x0,916]
+	str	wzr, [x0,920]
+	str	wzr, [x0,924]
+	str	wzr, [x0,928]
+	str	wzr, [x0,936]
+	str	wzr, [x0,940]
+	str	wzr, [x0,944]
+	strh	w1, [x0,954]
+	mov	w1, 1024
+	ldrh	w2, [x0,824]
+	strh	wzr, [x0,956]
+	strh	wzr, [x0,958]
+	sdiv	w2, w1, w2
+	ldrh	w1, [x0,748]
+	strh	wzr, [x0,960]
+	lsl	w1, w1, 2
+	strh	wzr, [x0,962]
+	str	w2, [x0,964]
+	cmp	w2, w1
+	bls	.L1220
+	str	w1, [x0,964]
+.L1220:
+	add	x19, x20, :lo12:.LANCHOR2
+	mov	w22, 56
+	ldrh	w0, [x19,822]
+	str	wzr, [x19,968]
+	lsl	w0, w0, 1
+	bl	ftl_malloc
+	str	x0, [x19,976]
+	ldrh	w1, [x19,822]
+	mov	w0, 12
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	ldrh	w21, [x19,748]
+	str	x0, [x19,984]
+	mul	w21, w21, w22
+	lsl	w23, w21, 3
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,992]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1000]
+	mov	w0, w23
+	bl	ftl_malloc
+	str	x0, [x19,1008]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1016]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1024]
+	ldr	w0, [x19,964]
+	mul	w0, w0, w22
+	bl	ftl_malloc
+	str	x0, [x19,1032]
+	ldrh	w0, [x19,748]
+	ldrh	w21, [x19,828]
+	lsl	w0, w0, 1
+	add	w0, w0, 1
+	str	w0, [x19,1040]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1048]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1056]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1064]
+	ldr	w0, [x19,1040]
+	mul	w0, w21, w0
+	bl	ftl_malloc
+	str	x0, [x19,1072]
+	ldr	w0, [x19,964]
+	mul	w0, w21, w0
+	bl	ftl_malloc
+	str	x0, [x19,1080]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1088]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1096]
+	ldr	w1, [x19,1040]
+	mov	w0, 24
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	ldrh	w21, [x19,748]
+	str	x0, [x19,1104]
+	ldrh	w0, [x19,830]
+	mul	w21, w0, w21
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1112]
+	lsl	w0, w21, 3
+	bl	ftl_malloc
+	str	x0, [x19,1120]
+	ldrh	w1, [x19,830]
+	ldr	w0, [x19,1040]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,1128]
+	ldrh	w1, [x19,830]
+	ldr	w0, [x19,964]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,1136]
+	ldrh	w0, [x19,758]
+	lsl	w0, w0, 1
+	strh	w0, [x19,1144]
+	and	w0, w0, 65534
+	bl	ftl_malloc
+	str	x0, [x19,1152]
+	ldrh	w0, [x19,1144]
+	add	x0, x0, 547
+	lsr	x0, x0, 9
+	strh	w0, [x19,1144]
+	lsl	w0, w0, 9
+	bl	ftl_malloc
+	ldrh	w21, [x19,758]
+	str	x0, [x19,1160]
+	add	x0, x0, 32
+	lsl	w21, w21, 1
+	str	x0, [x19,1168]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1176]
+	mov	w0, w21
+	bl	ftl_malloc
+	ldr	w21, [x19,848]
+	str	x0, [x19,1184]
+	lsl	w21, w21, 1
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1192]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1200]
+	ldrh	w0, [x19,758]
+	lsr	w0, w0, 3
+	add	w0, w0, 4
+	bl	ftl_malloc
+	adrp	x1, .LANCHOR0+16
+	str	x0, [x1,#:lo12:.LANCHOR0+16]
+	ldrh	w0, [x19,840]
+	lsl	w0, w0, 1
+	bl	ftl_malloc
+	str	x0, [x19,1208]
+	ldrh	w0, [x19,840]
+	lsl	w0, w0, 1
+	bl	ftl_malloc
+	str	x0, [x19,1216]
+	ldrh	w0, [x19,840]
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,1224]
+	ldrh	w0, [x19,842]
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,1232]
+	ldrh	w2, [x19,842]
+	mov	w1, 0
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldrh	w21, [x19,856]
+	lsl	w21, w21, 2
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1240]
+	mov	w0, w21
+	bl	ftl_malloc
+	str	x0, [x19,1248]
+	ldr	w0, [x19,848]
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,1256]
+	ldrh	w0, [x19,858]
+	lsl	w0, w0, 4
+	bl	ftl_malloc
+	str	x0, [x19,1264]
+	ldrh	w1, [x19,858]
+	ldrh	w0, [x19,828]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,1272]
+	ldrh	w1, [x19,758]
+	mov	w0, 6
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,1280]
+	ldrh	w0, [x19,814]
+	ldrh	w1, [x19,770]
+	add	w0, w0, 31
+	asr	w0, w0, 5
+	strh	w0, [x19,1288]
+	mul	w0, w0, w1
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,1328]
+	add	x1, x19, 1296
+	ldrh	w4, [x19,1288]
+	ldrh	w5, [x19,770]
+	mov	w0, 1
+	mov	w2, w4
+.L1221:
+	cmp	w0, w5
+	add	x1, x1, 8
+	bcs	.L1321
+	ldr	x3, [x19,1328]
+	add	w0, w0, 1
+	add	x3, x3, x2, uxtw 2
+	add	w2, w2, w4
+	str	x3, [x1,32]
+	b	.L1221
+.L1321:
+	add	x1, x20, :lo12:.LANCHOR2
+.L1223:
+	cmp	w0, 8
+	beq	.L1322
+	add	x2, x1, x0, uxtw 3
+	add	w0, w0, 1
+	str	xzr, [x2,1328]
+	b	.L1223
+.L1322:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x1, [x0,1192]
+	cbnz	x1, .L1225
+.L1227:
+	adrp	x0, .LC29
+	adrp	x1, .LANCHOR3
+	add	x0, x0, :lo12:.LC29
+	add	x1, x1, :lo12:.LANCHOR3
+	bl	printk
+	mov	w0, -1
+	b	.L1226
+.L1225:
+	ldr	x1, [x0,1200]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1240]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1256]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1264]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1272]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1280]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1328]
+	cbz	x1, .L1227
+	ldr	x0, [x0,1184]
+	cbz	x0, .L1227
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x1, [x0,976]
+	cbz	x1, .L1227
+	ldr	x1, [x0,984]
+	cbz	x1, .L1227
+	ldr	x1, [x0,992]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1008]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1016]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1024]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1000]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1048]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1056]
+	cbz	x1, .L1227
+	ldr	x0, [x0,1064]
+	cbz	x0, .L1227
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x1, [x0,1072]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1088]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1096]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1104]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1112]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1120]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1128]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1168]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1152]
+	cbz	x1, .L1227
+	ldr	x0, [x0,1208]
+	cbz	x0, .L1227
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	x1, [x0,1216]
+	cbz	x1, .L1227
+	ldr	x1, [x0,1224]
+	cbz	x1, .L1227
+	ldr	x0, [x0,1232]
+	cbz	x0, .L1227
+	mov	w0, 0
+.L1226:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlMemInit, .-FtlMemInit
+	.align	2
+	.global	IsBlkInVendorPart
+	.type	IsBlkInVendorPart, %function
+IsBlkInVendorPart:
+	adrp	x1, .LANCHOR2
+	uxth	w4, w0
+	add	x1, x1, :lo12:.LANCHOR2
+	mov	w0, 0
+	ldrh	w2, [x1,1392]
+	cbz	w2, .L1324
+	ldrh	w2, [x1,840]
+	ldr	x3, [x1,1208]
+	mov	x1, 0
+.L1325:
+	cmp	w2, w1, uxth
+	bls	.L1330
+	add	x1, x1, 1
+	add	x0, x3, x1, lsl 1
+	ldrh	w0, [x0,-2]
+	cmp	w0, w4
+	bne	.L1325
+	mov	w0, 1
+	b	.L1324
+.L1330:
+	mov	w0, 0
+.L1324:
+	ret
+	.size	IsBlkInVendorPart, .-IsBlkInVendorPart
+	.align	2
+	.global	FtlCacheMetchLpa
+	.type	FtlCacheMetchLpa, %function
+FtlCacheMetchLpa:
+	adrp	x2, .LANCHOR2
+	mov	w6, w0
+	add	x2, x2, :lo12:.LANCHOR2
+	mov	w0, 0
+	ldr	w3, [x2,968]
+	cbz	w3, .L1332
+	ldr	x5, [x2,1032]
+	mov	x0, 56
+	mov	x2, 0
+.L1333:
+	cmp	w3, w2
+	bls	.L1342
+	madd	x4, x2, x0, x5
+	add	x2, x2, 1
+	ldr	w4, [x4,24]
+	cmp	w4, w6
+	bcc	.L1333
+	cmp	w4, w1
+	bhi	.L1333
+	mov	w0, 1
+	b	.L1332
+.L1342:
+	mov	w0, 0
+.L1332:
+	ret
+	.size	FtlCacheMetchLpa, .-FtlCacheMetchLpa
+	.align	2
+	.global	FtlGetCap
+	.type	FtlGetCap, %function
+FtlGetCap:
+	adrp	x0, .LANCHOR0+4048
+	ldr	w0, [x0,#:lo12:.LANCHOR0+4048]
+	ret
+	.size	FtlGetCap, .-FtlGetCap
+	.align	2
+	.global	ftl_get_density
+	.type	ftl_get_density, %function
+ftl_get_density:
+	adrp	x0, .LANCHOR0+4048
+	ldr	w0, [x0,#:lo12:.LANCHOR0+4048]
+	ret
+	.size	ftl_get_density, .-ftl_get_density
+	.align	2
+	.global	FtlGetLpn
+	.type	FtlGetLpn, %function
+FtlGetLpn:
+	adrp	x0, .LANCHOR2+1396
+	ldr	w0, [x0,#:lo12:.LANCHOR2+1396]
+	ret
+	.size	FtlGetLpn, .-FtlGetLpn
+	.align	2
+	.global	FtlBbmMapBadBlock
+	.type	FtlBbmMapBadBlock, %function
+FtlBbmMapBadBlock:
+	stp	x29, x30, [sp, -32]!
+	uxth	w1, w0
+	mov	w4, 1
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w3, [x19,814]
+	add	x19, x19, 1296
+	udiv	w2, w1, w3
+	add	x0, x19, x2, uxth 3
+	ldr	x0, [x0,32]
+	msub	w3, w2, w3, w1
+	uxth	w3, w3
+	ubfx	x6, x3, 5, 11
+	lsl	w4, w4, w3
+	lsl	x6, x6, 2
+	ldr	w5, [x0,x6]
+	orr	w4, w4, w5
+	str	w4, [x0,x6]
+	adrp	x0, .LC30
+	add	x0, x0, :lo12:.LC30
+	bl	printk
+	ldrh	w0, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,6]
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlBbmMapBadBlock, .-FtlBbmMapBadBlock
+	.align	2
+	.global	FtlBbmIsBadBlock
+	.type	FtlBbmIsBadBlock, %function
+FtlBbmIsBadBlock:
+	adrp	x2, .LANCHOR2
+	uxth	w0, w0
+	add	x3, x2, :lo12:.LANCHOR2
+	ldrh	w1, [x3,814]
+	udiv	w2, w0, w1
+	msub	w0, w2, w1, w0
+	add	x2, x3, x2, uxth 3
+	ldr	x1, [x2,1328]
+	uxth	w0, w0
+	ubfx	x3, x0, 5, 11
+	ldr	w1, [x1,x3,lsl 2]
+	lsr	w0, w1, w0
+	and	w0, w0, 1
+	ret
+	.size	FtlBbmIsBadBlock, .-FtlBbmIsBadBlock
+	.align	2
+	.global	FtlBbtInfoPrint
+	.type	FtlBbtInfoPrint, %function
+FtlBbtInfoPrint:
+	ret
+	.size	FtlBbtInfoPrint, .-FtlBbtInfoPrint
+	.align	2
+	.global	FtlBbt2Bitmap
+	.type	FtlBbt2Bitmap, %function
+FtlBbt2Bitmap:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	adrp	x0, .LANCHOR2+1288
+	mov	x19, x1
+	ldrh	w2, [x0,#:lo12:.LANCHOR2+1288]
+	mov	x0, x1
+	mov	w1, 0
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	mov	x3, 0
+	mov	w0, 65535
+	mov	w5, 1
+.L1351:
+	ldrh	w2, [x20,x3]
+	cmp	w2, w0
+	beq	.L1349
+	ubfx	x4, x2, 5, 11
+	add	x3, x3, 2
+	lsl	x4, x4, 2
+	lsl	w2, w5, w2
+	cmp	x3, 1024
+	ldr	w1, [x19,x4]
+	orr	w2, w1, w2
+	str	w2, [x19,x4]
+	bne	.L1351
+.L1349:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlBbt2Bitmap, .-FtlBbt2Bitmap
+	.align	2
+	.global	FtlBbmTblFlush
+	.type	FtlBbmTblFlush, %function
+FtlBbmTblFlush:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldr	w1, [x19,1400]
+	stp	x25, x26, [sp,64]
+	cbnz	w1, .L1356
+	ldr	x0, [x19,1048]
+	mov	x22, 0
+	ldr	x3, [x19,1112]
+	add	x21, x19, 1296
+	ldrh	w2, [x19,828]
+	str	x0, [x19,1416]
+	str	x3, [x19,1424]
+	bl	ftl_memset
+.L1357:
+	ldrh	w1, [x19,770]
+	mov	w0, w22
+	add	x20, x19, 1408
+	add	x22, x22, 1
+	cmp	w0, w1
+	bge	.L1365
+	add	x1, x21, x22, lsl 3
+	ldrh	w2, [x19,1288]
+	ldr	x3, [x20,8]
+	ldr	x1, [x1,24]
+	mul	w0, w0, w2
+	add	x0, x3, x0, sxtw 2
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	b	.L1357
+.L1365:
+	ldr	x25, [x20,16]
+	mov	w1, 255
+	mov	w2, 16
+	mov	w26, 0
+	mov	x0, x25
+	adrp	x22, .LC31
+	adrp	x24, .LC32
+	mov	w23, w26
+	bl	ftl_memset
+	add	x22, x22, :lo12:.LC31
+	mov	w0, -3887
+	strh	w0, [x25]
+	add	x24, x24, :lo12:.LC32
+	ldr	w0, [x21,8]
+	str	w0, [x25,4]
+	ldrh	w0, [x19,1296]
+	strh	w0, [x25,2]
+	ldrh	w0, [x21,4]
+	strh	w0, [x25,8]
+	ldrh	w0, [x21,6]
+	strh	w0, [x25,10]
+	ldr	w0, [x19,744]
+	strh	w0, [x25,12]
+.L1359:
+	ldr	x0, [x19,1048]
+	str	x0, [x20,8]
+	ldrh	w1, [x19,1296]
+	ldr	x0, [x19,1112]
+	str	x0, [x20,16]
+	ldrh	w2, [x19,1298]
+	ldrh	w3, [x19,1300]
+	orr	w0, w2, w1, lsl 10
+	ldrh	w4, [x25,10]
+	str	w0, [x20,4]
+	mov	x0, x22
+	str	wzr, [x20]
+	bl	printk
+	mov	w1, 1
+	mov	x0, x20
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+	ldrh	w1, [x19,820]
+	ldrh	w0, [x19,1298]
+	sub	w1, w1, #1
+	cmp	w0, w1
+	blt	.L1360
+	ldr	w1, [x19,1304]
+	ldrh	w0, [x19,1296]
+	add	w1, w1, 1
+	str	w1, [x19,1304]
+	str	w1, [x25,4]
+	strh	w0, [x25,8]
+	ldrh	w1, [x19,1300]
+	strh	w0, [x19,1300]
+	ldr	x0, [x19,1016]
+	strh	w1, [x19,1296]
+	lsl	w1, w1, 10
+	str	w1, [x20,4]
+	str	w1, [x0,4]
+	mov	w1, 1
+	mov	w2, w1
+	strh	wzr, [x19,1298]
+	ldr	x0, [x19,1016]
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	mov	x0, x20
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+.L1360:
+	ldrh	w1, [x19,1298]
+	ldr	w0, [x20]
+	add	w1, w1, 1
+	strh	w1, [x19,1298]
+	cmn	w0, #1
+	bne	.L1361
+	ldr	w1, [x20,4]
+	mov	x0, x24
+	add	w26, w26, 1
+	bl	printk
+	uxth	w26, w26
+	cmp	w26, 3
+	bls	.L1359
+	adrp	x0, .LC33
+	ldr	w1, [x20,4]
+	add	x0, x0, :lo12:.LC33
+	mov	w2, w26
+	bl	printk
+	mov	w0, 1
+	str	w0, [x19,1400]
+	b	.L1356
+.L1361:
+	cbnz	w23, .L1356
+	mov	w23, 1
+	b	.L1359
+.L1356:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlBbmTblFlush, .-FtlBbmTblFlush
+	.align	2
+	.global	FtlLoadFactoryBbt
+	.type	FtlLoadFactoryBbt, %function
+FtlLoadFactoryBbt:
+	stp	x29, x30, [sp, -80]!
+	adrp	x1, .LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	add	x21, x1, 1408
+	add	x23, x1, 1296
+	ldr	x0, [x1,1048]
+	mov	w22, 0
+	ldr	x24, [x1,1112]
+	mov	x19, x1
+	str	x0, [x21,8]
+	mov	w25, -1
+	str	x24, [x21,16]
+	mov	w26, 61664
+.L1367:
+	ldrh	w0, [x19,770]
+	cmp	w22, w0
+	bcs	.L1376
+	ldrh	w20, [x19,814]
+	strh	w25, [x23,12]
+.L1369:
+	sub	w20, w20, #1
+	ldrh	w0, [x19,814]
+	uxth	w20, w20
+	sub	w1, w0, #16
+	cmp	w20, w1
+	ble	.L1370
+	madd	w0, w22, w0, w20
+	mov	w1, 1
+	lsl	w0, w0, 10
+	mov	w2, w1
+	str	w0, [x21,4]
+	mov	x0, x21
+	bl	FlashReadPages
+	ldr	w0, [x21]
+	cmn	w0, #1
+	beq	.L1369
+	ldrh	w0, [x24]
+	cmp	w0, w26
+	bne	.L1369
+	strh	w20, [x23,12]
+.L1370:
+	add	w22, w22, 1
+	add	x23, x23, 2
+	b	.L1367
+.L1376:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlLoadFactoryBbt, .-FtlLoadFactoryBbt
+	.align	2
+	.global	FtlBbtMemInit
+	.type	FtlBbtMemInit, %function
+FtlBbtMemInit:
+	adrp	x0, .LANCHOR2
+	mov	w1, -1
+	stp	x29, x30, [sp, -16]!
+	add	x0, x0, :lo12:.LANCHOR2
+	mov	w2, 16
+	add	x29, sp, 0
+	add	x0, x0, 1308
+	strh	w1, [x0,-12]
+	mov	w1, 255
+	strh	wzr, [x0,-6]
+	bl	ftl_memset
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlBbtMemInit, .-FtlBbtMemInit
+	.align	2
+	.global	FtlBbtCalcTotleCnt
+	.type	FtlBbtCalcTotleCnt, %function
+FtlBbtCalcTotleCnt:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w19, 0
+	mov	w20, w19
+	ldrh	w1, [x0,814]
+	ldrh	w21, [x0,770]
+	mul	w21, w1, w21
+.L1379:
+	cmp	w20, w21
+	bge	.L1385
+	mov	w0, w20
+	bl	FtlBbmIsBadBlock
+	cbz	w0, .L1380
+	add	w19, w19, 1
+	uxth	w19, w19
+.L1380:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L1379
+.L1385:
+	mov	w0, w19
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlBbtCalcTotleCnt, .-FtlBbtCalcTotleCnt
+	.align	2
+	.global	FtlMakeBbt
+	.type	FtlMakeBbt, %function
+FtlMakeBbt:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x20, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x21, x19
+	ldr	w22, [x20,1400]
+	cbnz	w22, .L1387
+	add	x24, x20, 1296
+	mov	x19, x20
+	mov	x25, x24
+	add	x20, x20, 1408
+	mov	w28, -3872
+	bl	FtlBbtMemInit
+	bl	FtlLoadFactoryBbt
+.L1388:
+	ldrh	w0, [x19,770]
+	cmp	w22, w0
+	bcs	.L1406
+	ldrh	w4, [x25,12]
+	mov	w1, 65535
+	ldr	x0, [x19,1048]
+	ldr	x26, [x19,1112]
+	cmp	w4, w1
+	str	x0, [x20,8]
+	str	x26, [x20,16]
+	beq	.L1389
+	ldrh	w0, [x19,814]
+	mov	w1, 1
+	mov	w2, w1
+	madd	w27, w22, w0, w4
+	lsl	w0, w27, 10
+	str	w0, [x20,4]
+	mov	x0, x20
+	bl	FlashReadPages
+	ldrh	w2, [x19,814]
+	ldr	x0, [x24,32]
+	add	w2, w2, 7
+	ldr	x1, [x20,8]
+	lsr	w2, w2, 3
+	bl	ftl_memcpy
+	b	.L1390
+.L1389:
+	mov	w1, w22
+	bl	FlashGetBadBlockList
+	ldr	x0, [x20,8]
+	ldr	x1, [x24,32]
+	bl	FtlBbt2Bitmap
+	ldrh	w23, [x19,814]
+.L1392:
+	sub	w23, w23, #1
+	uxth	w23, w23
+.L1391:
+	ldrh	w0, [x19,814]
+	madd	w0, w22, w0, w23
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L1392
+	ldr	x0, [x19,1112]
+	mov	w1, 0
+	mov	w2, 16
+	strh	w23, [x25,12]
+	bl	ftl_memset
+	strh	w28, [x26]
+	str	wzr, [x26,4]
+	ldrh	w2, [x19,1288]
+	ldrh	w0, [x25,12]
+	strh	w0, [x26,2]
+	lsl	w2, w2, 2
+	ldrh	w0, [x19,814]
+	ldrh	w4, [x25,12]
+	ldr	x1, [x24,32]
+	madd	w27, w22, w0, w4
+	lsl	w0, w27, 10
+	str	w0, [x20,4]
+	ldr	x0, [x20,8]
+	bl	ftl_memcpy
+	mov	w1, 1
+	mov	x0, x20
+	mov	w2, w1
+	bl	FlashEraseBlocks
+	mov	w1, 1
+	mov	x0, x20
+	mov	w2, w1
+	mov	w3, w1
+	bl	FlashProgPages
+	ldr	w0, [x20]
+	cmn	w0, #1
+	bne	.L1390
+	mov	w0, w27
+	bl	FtlBbmMapBadBlock
+	b	.L1391
+.L1390:
+	mov	w0, w27
+	add	w22, w22, 1
+	add	x24, x24, 8
+	add	x25, x25, 2
+	bl	FtlBbmMapBadBlock
+	b	.L1388
+.L1406:
+	mov	w19, 0
+.L1395:
+	add	x20, x21, :lo12:.LANCHOR2
+	ldrh	w0, [x20,832]
+	cmp	w0, w19
+	bls	.L1407
+	mov	w0, w19
+	add	w19, w19, 1
+	bl	FtlBbmMapBadBlock
+	uxth	w19, w19
+	b	.L1395
+.L1407:
+	ldrh	w19, [x20,1308]
+	mov	w23, 65535
+	sub	w19, w19, #1
+	uxth	w19, w19
+.L1397:
+	add	x22, x20, 1296
+	ldrh	w0, [x22,12]
+	sub	w0, w0, #48
+	cmp	w19, w0
+	ble	.L1401
+	mov	w0, w19
+	bl	FtlBbmIsBadBlock
+	cmp	w0, 1
+	beq	.L1398
+	mov	w0, w19
+	bl	FlashTestBlk
+	cbz	w0, .L1399
+	mov	w0, w19
+	bl	FtlBbmMapBadBlock
+	b	.L1398
+.L1399:
+	ldrh	w0, [x20,1296]
+	cmp	w0, w23
+	bne	.L1400
+	strh	w19, [x20,1296]
+	b	.L1398
+.L1400:
+	strh	w19, [x22,4]
+	b	.L1401
+.L1398:
+	sub	w19, w19, #1
+	uxth	w19, w19
+	b	.L1397
+.L1401:
+	add	x19, x21, :lo12:.LANCHOR2
+	mov	w2, 2
+	ldr	x1, [x19,1016]
+	ldrh	w0, [x19,1296]
+	str	wzr, [x19,1304]
+	lsl	w0, w0, 10
+	str	w0, [x1,4]
+	strh	wzr, [x19,1298]
+	ldr	x0, [x19,1016]
+	ldrh	w1, [x19,1300]
+	lsl	w1, w1, 10
+	str	w1, [x0,60]
+	mov	w1, 1
+	bl	FlashEraseBlocks
+	ldrh	w0, [x19,1296]
+	bl	FtlBbmMapBadBlock
+	ldrh	w0, [x19,1300]
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	strh	wzr, [x19,1298]
+	ldr	w0, [x19,1304]
+	ldrh	w1, [x19,1300]
+	add	w0, w0, 1
+	str	w0, [x19,1304]
+	ldrh	w0, [x19,1296]
+	strh	w0, [x19,1300]
+	strh	w1, [x19,1296]
+	bl	FtlBbmTblFlush
+.L1387:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlMakeBbt, .-FtlMakeBbt
+	.align	2
+	.global	V2P_block
+	.type	V2P_block, %function
+V2P_block:
+	adrp	x3, .LANCHOR2
+	uxth	w0, w0
+	add	x3, x3, :lo12:.LANCHOR2
+	uxth	w1, w1
+	ldrh	w4, [x3,772]
+	udiv	w2, w0, w4
+	msub	w0, w2, w4, w0
+	madd	w0, w1, w4, w0
+	ldrh	w1, [x3,814]
+	madd	w0, w2, w1, w0
+	ret
+	.size	V2P_block, .-V2P_block
+	.align	2
+	.global	P2V_plane
+	.type	P2V_plane, %function
+P2V_plane:
+	adrp	x2, .LANCHOR2
+	uxth	w0, w0
+	add	x2, x2, :lo12:.LANCHOR2
+	ldrh	w1, [x2,772]
+	ldrh	w3, [x2,814]
+	udiv	w2, w0, w1
+	udiv	w3, w0, w3
+	msub	w0, w2, w1, w0
+	madd	w0, w1, w3, w0
+	ret
+	.size	P2V_plane, .-P2V_plane
+	.align	2
+	.global	P2V_block_in_plane
+	.type	P2V_block_in_plane, %function
+P2V_block_in_plane:
+	adrp	x2, .LANCHOR2
+	uxth	w0, w0
+	add	x2, x2, :lo12:.LANCHOR2
+	ldrh	w3, [x2,814]
+	udiv	w1, w0, w3
+	msub	w0, w1, w3, w0
+	ldrh	w1, [x2,772]
+	uxth	w0, w0
+	udiv	w0, w0, w1
+	ret
+	.size	P2V_block_in_plane, .-P2V_block_in_plane
+	.align	2
+	.global	ftl_cmp_data_ver
+	.type	ftl_cmp_data_ver, %function
+ftl_cmp_data_ver:
+	cmp	w0, w1
+	mov	w2, -2147483648
+	bls	.L1412
+	sub	w1, w0, w1
+	cmp	w1, w2
+	cset	w0, ls
+	b	.L1413
+.L1412:
+	sub	w1, w1, w0
+	cmp	w1, w2
+	cset	w0, hi
+.L1413:
+	ret
+	.size	ftl_cmp_data_ver, .-ftl_cmp_data_ver
+	.align	2
+	.global	FtlGetLastWrittenPage
+	.type	FtlGetLastWrittenPage, %function
+FtlGetLastWrittenPage:
+	stp	x29, x30, [sp, -208]!
+	cmp	w1, 1
+	adrp	x3, .LANCHOR2
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x25, [sp,64]
+	mov	w23, w1
+	add	x3, x3, :lo12:.LANCHOR2
+	bne	.L1415
+	ldrh	w19, [x3,820]
+	b	.L1416
+.L1415:
+	ldrh	w19, [x3,818]
+.L1416:
+	sub	w19, w19, #1
+	lsl	w21, w0, 10
+	mov	w1, 1
+	mov	w2, w23
+	sxth	w19, w19
+	str	xzr, [x29,96]
+	orr	w0, w19, w21
+	str	w0, [x29,92]
+	add	x0, x29, 88
+	add	x24, x29, 144
+	str	x24, [x29,104]
+	bl	FlashReadPages
+	ldr	w0, [x29,144]
+	cmn	w0, #1
+	bne	.L1417
+	mov	w22, 0
+	mov	w25, 2
+.L1418:
+	cmp	w22, w19
+	bgt	.L1417
+	add	w3, w22, w19
+	mov	w1, 1
+	mov	w2, w23
+	sdiv	w20, w3, w25
+	sxth	w0, w20
+	orr	w0, w0, w21
+	str	w0, [x29,92]
+	add	x0, x29, 88
+	bl	FlashReadPages
+	ldr	w0, [x24]
+	cmn	w0, #1
+	bne	.L1419
+	ldr	w0, [x24,4]
+	cmn	w0, #1
+	bne	.L1419
+	ldr	w0, [x29,88]
+	cmn	w0, #1
+	beq	.L1419
+	sub	w19, w20, #1
+	sxth	w19, w19
+	b	.L1418
+.L1419:
+	add	w20, w20, 1
+	sxth	w22, w20
+	b	.L1418
+.L1417:
+	mov	w0, w19
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 208
+	ret
+	.size	FtlGetLastWrittenPage, .-FtlGetLastWrittenPage
+	.align	2
+	.global	FtlLoadBbt
+	.type	FtlLoadBbt, %function
+FtlLoadBbt:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	stp	x23, x24, [sp,48]
+	add	x23, x19, :lo12:.LANCHOR2
+	mov	w24, 61649
+	stp	x21, x22, [sp,32]
+	add	x21, x23, 1408
+	ldr	x0, [x23,1048]
+	ldr	x22, [x23,1112]
+	str	x0, [x21,8]
+	str	x22, [x21,16]
+	bl	FtlBbtMemInit
+	ldrh	w20, [x23,814]
+	sub	w20, w20, #1
+	uxth	w20, w20
+.L1426:
+	ldrh	w0, [x23,814]
+	sub	w0, w0, #48
+	cmp	w20, w0
+	ble	.L1429
+	lsl	w0, w20, 10
+	mov	w1, 1
+	str	w0, [x21,4]
+	mov	w2, w1
+	mov	x0, x21
+	bl	FlashReadPages
+	ldr	w0, [x21]
+	cmn	w0, #1
+	bne	.L1427
+	ldr	w0, [x21,4]
+	mov	w1, 1
+	mov	w2, w1
+	add	w0, w0, 1
+	str	w0, [x21,4]
+	mov	x0, x21
+	bl	FlashReadPages
+.L1427:
+	ldr	w0, [x21]
+	cmn	w0, #1
+	beq	.L1428
+	ldrh	w0, [x22]
+	cmp	w0, w24
+	bne	.L1428
+	ldr	w1, [x22,4]
+	str	w1, [x23,1304]
+	strh	w20, [x23,1296]
+	ldrh	w1, [x22,8]
+	strh	w1, [x23,1300]
+	b	.L1429
+.L1428:
+	sub	w20, w20, #1
+	uxth	w20, w20
+	b	.L1426
+.L1429:
+	add	x21, x19, :lo12:.LANCHOR2
+	mov	w2, 65535
+	mov	w0, -1
+	ldrh	w1, [x21,1296]
+	cmp	w1, w2
+	beq	.L1431
+	ldrh	w1, [x21,1300]
+	cmp	w1, w2
+	beq	.L1433
+	add	x0, x21, 1408
+	lsl	w1, w1, 10
+	str	w1, [x0,4]
+	mov	w1, 1
+	mov	w2, w1
+	bl	FlashReadPages
+	ldr	w0, [x21,1408]
+	cmn	w0, #1
+	beq	.L1433
+	ldrh	w1, [x22]
+	mov	w0, 61649
+	cmp	w1, w0
+	bne	.L1433
+	ldr	w0, [x22,4]
+	ldr	w1, [x21,1304]
+	cmp	w0, w1
+	bls	.L1433
+	str	w0, [x21,1304]
+	ldrh	w1, [x21,1300]
+	ldrh	w0, [x22,8]
+	strh	w1, [x21,1296]
+	strh	w0, [x21,1300]
+.L1433:
+	add	x20, x19, :lo12:.LANCHOR2
+	mov	w1, 1
+	add	x23, x20, 1408
+	mov	w24, 61649
+	ldrh	w0, [x20,1296]
+	bl	FtlGetLastWrittenPage
+	sxth	w21, w0
+	add	w0, w0, 1
+	strh	w0, [x20,1298]
+.L1435:
+	tbnz	w21, #31, .L1440
+	ldrh	w0, [x20,1296]
+	mov	w1, 1
+	mov	w2, w1
+	orr	w0, w21, w0, lsl 10
+	str	w0, [x23,4]
+	ldr	x0, [x20,1048]
+	str	x0, [x23,8]
+	mov	x0, x23
+	bl	FlashReadPages
+	ldr	w0, [x23]
+	cmn	w0, #1
+	beq	.L1436
+	ldrh	w0, [x22]
+	cmp	w0, w24
+	bne	.L1436
+.L1440:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x22,10]
+	mov	w2, 65535
+	strh	w0, [x1,1302]
+	ldrh	w0, [x22,12]
+	cmp	w0, w2
+	bne	.L1437
+	b	.L1438
+.L1436:
+	sub	w21, w21, #1
+	sxth	w21, w21
+	b	.L1435
+.L1437:
+	ldr	w2, [x1,744]
+	cmp	w0, w2
+	beq	.L1438
+	ldrh	w1, [x1,758]
+	lsr	w1, w1, 2
+	cmp	w0, w1
+	bcs	.L1438
+	cmp	w2, w1
+	bcs	.L1438
+	bl	FtlSysBlkNumInit
+.L1438:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	x20, 0
+	add	x21, x19, 1296
+.L1441:
+	ldrh	w0, [x19,770]
+	mov	w1, w20
+	add	x20, x20, 1
+	cmp	w1, w0
+	bcs	.L1459
+	ldrh	w2, [x19,1288]
+	add	x0, x21, x20, lsl 3
+	ldr	x3, [x19,1416]
+	mul	w1, w1, w2
+	ldr	x0, [x0,24]
+	lsl	w2, w2, 2
+	add	x1, x3, x1, lsl 2
+	bl	ftl_memcpy
+	b	.L1441
+.L1459:
+	mov	w0, 0
+.L1431:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlLoadBbt, .-FtlLoadBbt
+	.align	2
+	.global	FtlFreeSysBlkQueueInit
+	.type	FtlFreeSysBlkQueueInit, %function
+FtlFreeSysBlkQueueInit:
+	adrp	x1, .LANCHOR2
+	mov	w2, 2048
+	stp	x29, x30, [sp, -16]!
+	add	x1, x1, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	strh	w0, [x1,1464]
+	add	x0, x1, 1472
+	strh	wzr, [x1,1466]
+	strh	wzr, [x1,1468]
+	strh	wzr, [x1,1470]
+	mov	w1, 0
+	bl	ftl_memset
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlFreeSysBlkQueueInit, .-FtlFreeSysBlkQueueInit
+	.align	2
+	.global	FtlFreeSysBlkQueueEmpty
+	.type	FtlFreeSysBlkQueueEmpty, %function
+FtlFreeSysBlkQueueEmpty:
+	adrp	x0, .LANCHOR2+1470
+	ldrh	w0, [x0,#:lo12:.LANCHOR2+1470]
+	cmp	w0, wzr
+	cset	w0, eq
+	ret
+	.size	FtlFreeSysBlkQueueEmpty, .-FtlFreeSysBlkQueueEmpty
+	.align	2
+	.global	FtlFreeSysBlkQueueFull
+	.type	FtlFreeSysBlkQueueFull, %function
+FtlFreeSysBlkQueueFull:
+	adrp	x0, .LANCHOR2+1470
+	ldrh	w0, [x0,#:lo12:.LANCHOR2+1470]
+	cmp	w0, 1024
+	cset	w0, eq
+	ret
+	.size	FtlFreeSysBlkQueueFull, .-FtlFreeSysBlkQueueFull
+	.align	2
+	.global	FtlFreeSysBlkQueueIn
+	.type	FtlFreeSysBlkQueueIn, %function
+FtlFreeSysBlkQueueIn:
+	stp	x29, x30, [sp, -48]!
+	adrp	x2, .LANCHOR2
+	uxth	w1, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	add	x20, x2, :lo12:.LANCHOR2
+	mov	x19, x2
+	stp	x21, x22, [sp,32]
+	uxth	w22, w0
+	ldrh	w0, [x20,1470]
+	cmp	w0, 1024
+	beq	.L1463
+	cbz	w1, .L1465
+	ldr	w0, [x20,1400]
+	cbnz	w0, .L1465
+	mov	w0, w22
+	bl	P2V_block_in_plane
+	uxth	w21, w0
+	ldr	x0, [x20,1016]
+	lsl	w1, w22, 10
+	str	w1, [x0,4]
+	mov	w1, 1
+	mov	w2, w1
+	ldr	x0, [x20,1016]
+	bl	FlashEraseBlocks
+	ubfiz	x1, x21, 1, 16
+	ldr	x2, [x20,1168]
+	ldrh	w0, [x2,x1]
+	add	w0, w0, 1
+	strh	w0, [x2,x1]
+	ldr	w0, [x20,912]
+	add	w0, w0, 1
+	str	w0, [x20,912]
+.L1465:
+	add	x1, x19, :lo12:.LANCHOR2
+	add	x1, x1, 1464
+	ldrh	w0, [x1,6]
+	ldrh	w2, [x1,4]
+	add	w0, w0, 1
+	strh	w0, [x1,6]
+	add	x0, x1, x2, sxtw 1
+	add	w2, w2, 1
+	and	w2, w2, 1023
+	strh	w22, [x0,8]
+	strh	w2, [x1,4]
+.L1463:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlFreeSysBlkQueueIn, .-FtlFreeSysBlkQueueIn
+	.align	2
+	.global	FtlLowFormatEraseBlock
+	.type	FtlLowFormatEraseBlock, %function
+FtlLowFormatEraseBlock:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	add	x3, x21, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	uxth	w25, w0
+	uxtb	w24, w1
+	ldrb	w0, [x3,648]
+	ldr	w2, [x3,1400]
+	str	w0, [x29,120]
+	mov	w0, 0
+	cbnz	w2, .L1473
+	adrp	x28, .LANCHOR0
+	str	w25, [x3,944]
+	add	x0, x28, :lo12:.LANCHOR0
+	mov	w27, w2
+	mov	w20, w2
+	mov	w19, w2
+	mov	x26, x3
+	mov	w23, 56
+	ldrb	w0, [x0,136]
+	str	w0, [x29,124]
+.L1474:
+	ldrh	w0, [x26,748]
+	cmp	w0, w27
+	bls	.L1518
+	umull	x0, w27, w23
+	ldr	x1, [x26,1016]
+	str	wzr, [x1,x0]
+	add	x0, x26, 776
+	mov	w1, w25
+	ldrb	w0, [x0,w27,sxtw]
+	bl	V2P_block
+	uxth	w22, w0
+	mov	w1, w22
+	cbz	w24, .L1475
+	str	x1, [x29,112]
+	bl	IsBlkInVendorPart
+	ldr	x1, [x29,112]
+	cbnz	w0, .L1476
+.L1475:
+	mov	w0, w1
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L1477
+	umull	x0, w20, w23
+	ldr	x1, [x26,1016]
+	lsl	w22, w22, 10
+	mov	w2, 4
+	add	x1, x1, x0
+	str	w22, [x1,4]
+	ldr	x1, [x26,1016]
+	ldr	x4, [x26,1120]
+	add	x1, x1, x0
+	ldrh	w0, [x26,830]
+	mul	w0, w20, w0
+	add	w20, w20, 1
+	str	xzr, [x1,8]
+	sdiv	w0, w0, w2
+	uxth	w20, w20
+	add	x0, x4, x0, sxtw 2
+	str	x0, [x1,16]
+	b	.L1476
+.L1477:
+	add	w19, w19, 1
+	uxth	w19, w19
+.L1476:
+	add	w2, w27, 1
+	uxth	w27, w2
+	b	.L1474
+.L1518:
+	cbz	w20, .L1497
+	ldr	w0, [x29,124]
+	mov	w2, w20
+	strb	wzr, [x26,648]
+	mov	x23, 0
+	cmp	w0, wzr
+	ldr	x0, [x26,1016]
+	cset	w22, ne
+	mov	w1, w22
+	bl	FlashEraseBlocks
+	ldrb	w0, [x29,120]
+	strb	w0, [x26,648]
+	mov	x26, 56
+.L1480:
+	cmp	w20, w23, uxth
+	bls	.L1519
+	add	x1, x21, :lo12:.LANCHOR2
+	mul	x0, x23, x26
+	ldr	x1, [x1,1016]
+	add	x2, x1, x0
+	ldr	w0, [x1,x0]
+	cmn	w0, #1
+	bne	.L1481
+	ldr	w0, [x2,4]
+	add	w19, w19, 1
+	lsr	w0, w0, 10
+	uxth	w19, w19
+	bl	FtlBbmMapBadBlock
+.L1481:
+	add	x23, x23, 1
+	b	.L1480
+.L1519:
+	cbnz	w24, .L1483
+	mov	w0, 1
+	uxth	w22, w22
+	mov	w27, 6
+	str	w0, [x29,124]
+	b	.L1484
+.L1483:
+	add	x0, x21, :lo12:.LANCHOR2
+	add	x28, x28, :lo12:.LANCHOR0
+	ldrh	w0, [x0,820]
+	str	w0, [x29,124]
+	ldrb	w0, [x28,136]
+	cbnz	w0, .L1500
+	ldr	w0, [x29,124]
+	mov	w22, 1
+	lsr	w27, w0, 2
+	b	.L1484
+.L1500:
+	mov	w22, 1
+	mov	w27, w22
+.L1484:
+	mov	w23, 0
+	add	x28, x21, :lo12:.LANCHOR2
+.L1493:
+	mov	w26, 0
+	mov	w20, w26
+.L1485:
+	ldrh	w0, [x28,748]
+	cmp	w0, w26
+	bls	.L1520
+	mov	w0, 56
+	ldr	x1, [x28,1016]
+	umull	x0, w26, w0
+	str	wzr, [x1,x0]
+	add	x0, x28, 776
+	mov	w1, w25
+	ldrb	w0, [x0,w26,sxtw]
+	bl	V2P_block
+	uxth	w2, w0
+	str	w2, [x29,112]
+	mov	w1, w2
+	cbz	w24, .L1486
+	str	x1, [x29,104]
+	bl	IsBlkInVendorPart
+	ldr	x1, [x29,104]
+	cbnz	w0, .L1487
+.L1486:
+	mov	w0, w1
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L1487
+	mov	w0, 56
+	ldr	x1, [x28,1016]
+	ldr	w2, [x29,112]
+	umull	x0, w20, w0
+	add	x1, x1, x0
+	add	w2, w23, w2, lsl 10
+	str	w2, [x1,4]
+	mov	w2, 4
+	ldr	x1, [x28,1016]
+	add	x1, x1, x0
+	ldr	x0, [x28,1088]
+	str	x0, [x1,8]
+	ldrh	w0, [x28,830]
+	mul	w0, w20, w0
+	add	w20, w20, 1
+	sdiv	w0, w0, w2
+	uxth	w20, w20
+	ldr	x2, [x28,1096]
+	add	x0, x2, x0, sxtw 2
+	str	x0, [x1,16]
+.L1487:
+	add	w3, w26, 1
+	uxth	w26, w3
+	b	.L1485
+.L1520:
+	cbz	w20, .L1497
+	ldr	x0, [x28,1016]
+	mov	w1, w20
+	mov	w2, w22
+	mov	w3, 1
+	strb	wzr, [x28,648]
+	bl	FlashProgPages
+	ldrb	w0, [x29,120]
+	mov	x1, 0
+	strb	w0, [x28,648]
+.L1490:
+	cmp	w20, w1, uxth
+	bls	.L1521
+	mov	x0, 56
+	ldr	x2, [x28,1016]
+	mul	x0, x1, x0
+	add	x3, x2, x0
+	ldr	w0, [x2,x0]
+	cbz	w0, .L1491
+	ldr	w0, [x3,4]
+	add	w19, w19, 1
+	str	x1, [x29,112]
+	lsr	w0, w0, 10
+	uxth	w19, w19
+	bl	FtlBbmMapBadBlock
+	ldr	x1, [x29,112]
+.L1491:
+	add	x1, x1, 1
+	b	.L1490
+.L1521:
+	add	w23, w23, w27
+	ldr	w0, [x29,124]
+	uxth	w23, w23
+	cmp	w23, w0
+	bcc	.L1493
+	mov	x23, 0
+	mov	x26, 56
+.L1494:
+	cmp	w20, w23, uxth
+	bls	.L1522
+	cbz	w24, .L1495
+	add	x1, x21, :lo12:.LANCHOR2
+	mul	x0, x23, x26
+	ldr	x1, [x1,1016]
+	add	x2, x1, x0
+	ldr	w0, [x1,x0]
+	cbnz	w0, .L1495
+	ldr	w0, [x2,4]
+	mov	w1, 1
+	lsr	w0, w0, 10
+	bl	FtlFreeSysBlkQueueIn
+.L1495:
+	add	x23, x23, 1
+	b	.L1494
+.L1522:
+	cmp	w25, 63
+	bls	.L1501
+	cbz	w24, .L1497
+.L1501:
+	add	x21, x21, :lo12:.LANCHOR2
+	mov	w1, w22
+	mov	w2, w20
+	ldr	x0, [x21,1016]
+	bl	FlashEraseBlocks
+.L1497:
+	mov	w0, w19
+.L1473:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FtlLowFormatEraseBlock, .-FtlLowFormatEraseBlock
+	.align	2
+	.global	FtlFreeSysBLkSort
+	.type	FtlFreeSysBLkSort, %function
+FtlFreeSysBLkSort:
+	adrp	x0, .LANCHOR2
+	mov	w5, 0
+	add	x1, x0, :lo12:.LANCHOR2
+	mov	w4, w5
+	add	x1, x1, 1464
+	ldrh	w6, [x1,2084]
+	and	w6, w6, 31
+	ldrh	w3, [x1,2]
+	ldrh	w2, [x1,4]
+.L1524:
+	cmp	w4, w6
+	bge	.L1531
+	add	x5, x1, x3, sxtw 1
+	ldrh	w7, [x5,8]
+	add	x5, x1, x2, sxtw 1
+	add	w4, w4, 1
+	strh	w7, [x5,8]
+	mov	w5, 1
+	add	w3, w3, 1
+	add	w2, w2, w5
+	uxth	w4, w4
+	and	w3, w3, 1023
+	and	w2, w2, 1023
+	b	.L1524
+.L1531:
+	cbz	w5, .L1523
+	add	x0, x0, :lo12:.LANCHOR2
+	strh	w3, [x0,1466]
+	strh	w2, [x0,1468]
+.L1523:
+	ret
+	.size	FtlFreeSysBLkSort, .-FtlFreeSysBLkSort
+	.align	2
+	.global	remove_from_free_sys_Queue
+	.type	remove_from_free_sys_Queue, %function
+remove_from_free_sys_Queue:
+	stp	x29, x30, [sp, -32]!
+	uxth	w1, w0
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR2
+	add	x20, x20, 1464
+	ldrh	w3, [x20,6]
+	cbz	w3, .L1533
+	ldrh	w4, [x20,2]
+	mov	w19, w0
+.L1534:
+	cmp	w19, w3
+	bcs	.L1539
+	add	w2, w19, w4
+	ubfiz	x2, x2, 1, 10
+	add	x2, x20, x2
+	ldrh	w0, [x2,8]
+	cmp	w0, w1
+	bne	.L1535
+	adrp	x0, .LC34
+	add	x0, x0, :lo12:.LC34
+	bl	printk
+	ldrh	w0, [x20,2]
+	add	x1, x20, x0, sxtw 1
+	ldrh	w1, [x1,8]
+	add	w19, w19, w0
+	add	w0, w0, 1
+	and	w0, w0, 1023
+	ubfiz	x19, x19, 1, 10
+	add	x19, x20, x19
+	strh	w0, [x20,2]
+	ldrh	w0, [x20,6]
+	sub	w0, w0, #1
+	strh	w1, [x19,8]
+	strh	w0, [x20,6]
+	mov	w0, 1
+	b	.L1533
+.L1535:
+	add	w19, w19, 1
+	b	.L1534
+.L1539:
+	mov	w0, 0
+.L1533:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	remove_from_free_sys_Queue, .-remove_from_free_sys_Queue
+	.align	2
+	.global	FtlFreeSysBlkQueueOut
+	.type	FtlFreeSysBlkQueueOut, %function
+FtlFreeSysBlkQueueOut:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	stp	x23, x24, [sp,48]
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x23, .LC36
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	add	x21, x19, 1464
+	adrp	x24, .LANCHOR0
+	add	x23, x23, :lo12:.LC36
+.L1541:
+	ldrh	w1, [x21,6]
+	adrp	x22, .LANCHOR2
+	cbz	w1, .L1542
+	ldrh	w2, [x21,2]
+	sub	w1, w1, #1
+	add	x0, x21, x2, sxtw 1
+	strh	w1, [x21,6]
+	add	w2, w2, 1
+	ldr	w1, [x19,1400]
+	and	w2, w2, 1023
+	strh	w2, [x21,2]
+	ldrh	w20, [x0,8]
+	cbnz	w1, .L1543
+	mov	w0, w20
+	str	x1, [x29,88]
+	bl	P2V_block_in_plane
+	uxth	w26, w0
+	ldr	x0, [x19,1016]
+	lsl	w2, w20, 10
+	ldr	x1, [x29,88]
+	str	w2, [x0,4]
+	add	x0, x24, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L1544
+	ldr	x0, [x19,1016]
+	mov	w2, 1
+	bl	FlashEraseBlocks
+.L1544:
+	add	x25, x22, :lo12:.LANCHOR2
+	mov	w1, 1
+	mov	w2, w1
+	ldr	x0, [x25,1016]
+	bl	FlashEraseBlocks
+	ubfiz	x0, x26, 1, 16
+	ldr	x2, [x25,1168]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
+	ldr	w0, [x25,912]
+	add	w0, w0, 1
+	str	w0, [x25,912]
+	b	.L1543
+.L1542:
+	adrp	x0, .LC35
+	add	x0, x0, :lo12:.LC35
+	bl	printk
+.L1545:
+	b	.L1545
+.L1543:
+	cbnz	w20, .L1546
+	add	x22, x22, :lo12:.LANCHOR2
+	mov	x0, x23
+	mov	w1, w20
+	ldrh	w2, [x22,1470]
+	bl	printk
+	b	.L1541
+.L1546:
+	mov	w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlFreeSysBlkQueueOut, .-FtlFreeSysBlkQueueOut
+	.align	2
+	.global	insert_data_list
+	.type	insert_data_list, %function
+insert_data_list:
+	adrp	x2, .LANCHOR2
+	uxth	w0, w0
+	add	x3, x2, :lo12:.LANCHOR2
+	mov	x4, x2
+	ldrh	w1, [x3,756]
+	cmp	w1, w0
+	bls	.L1552
+	mov	w7, 6
+	ldr	x11, [x3,1280]
+	mov	w1, -1
+	umull	x10, w0, w7
+	add	x5, x11, x10
+	strh	w1, [x5,2]
+	strh	w1, [x11,x10]
+	ldr	x1, [x3,3568]
+	cbnz	x1, .L1553
+	str	x5, [x3,3568]
+	b	.L1552
+.L1553:
+	ubfiz	x8, x0, 1, 16
+	ldr	x13, [x3,1184]
+	ldrh	w2, [x5,4]
+	mov	x9, -6148914691236517206
+	ldr	x12, [x3,1280]
+	mov	w18, 65535
+	ldrh	w6, [x13,x8]
+	cmp	w2, wzr
+	ldr	x14, [x3,1168]
+	ldrh	w17, [x3,756]
+	mov	w3, 0
+	mul	w6, w6, w2
+	sub	x2, x1, x12
+	asr	x2, x2, 1
+	csinv	w6, w6, wzr, ne
+	madd	x2, x9, x2, x2
+	add	x9, x14, x8
+	mov	w8, w7
+	uxth	w2, w2
+.L1561:
+	add	w3, w3, 1
+	cmp	w0, w2
+	uxth	w3, w3
+	beq	.L1552
+	cmp	w3, w17
+	bhi	.L1552
+	ubfiz	x15, x2, 1, 16
+	ldrh	w16, [x1,4]
+	cmp	w16, wzr
+	ldrh	w7, [x13,x15]
+	mul	w7, w7, w16
+	csinv	w7, w7, wzr, ne
+	cmp	w7, w6
+	bne	.L1557
+	ldrh	w15, [x14,x15]
+	ldrh	w7, [x9]
+	cmp	w15, w7
+	bcc	.L1559
+	b	.L1558
+.L1557:
+	bhi	.L1558
+.L1559:
+	ldrh	w7, [x1]
+	cmp	w7, w18
+	bne	.L1560
+	strh	w2, [x5,2]
+	add	x2, x4, :lo12:.LANCHOR2
+	strh	w0, [x1]
+	str	x5, [x2,3576]
+	b	.L1552
+.L1560:
+	umull	x1, w7, w8
+	mov	w2, w7
+	add	x1, x12, x1
+	b	.L1561
+.L1558:
+	strh	w2, [x11,x10]
+	ldrh	w2, [x1,2]
+	strh	w2, [x5,2]
+	add	x2, x4, :lo12:.LANCHOR2
+	ldr	x3, [x2,3568]
+	cmp	x1, x3
+	bne	.L1562
+	strh	w0, [x1,2]
+	str	x5, [x2,3568]
+	b	.L1552
+.L1562:
+	ldrh	w3, [x1,2]
+	mov	w4, 6
+	ldr	x2, [x2,1280]
+	umull	x3, w3, w4
+	strh	w0, [x2,x3]
+	strh	w0, [x1,2]
+.L1552:
+	mov	w0, 0
+	ret
+	.size	insert_data_list, .-insert_data_list
+	.align	2
+	.global	INSERT_DATA_LIST
+	.type	INSERT_DATA_LIST, %function
+INSERT_DATA_LIST:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	insert_data_list
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,3584]
+	add	w1, w1, 1
+	strh	w1, [x0,3584]
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	INSERT_DATA_LIST, .-INSERT_DATA_LIST
+	.align	2
+	.global	insert_free_list
+	.type	insert_free_list, %function
+insert_free_list:
+	uxth	w0, w0
+	mov	w7, 65535
+	cmp	w0, w7
+	beq	.L1567
+	adrp	x2, .LANCHOR2
+	mov	w6, 6
+	add	x5, x2, :lo12:.LANCHOR2
+	mov	w1, -1
+	umull	x8, w0, w6
+	mov	x3, x2
+	ldr	x9, [x5,1280]
+	add	x4, x9, x8
+	strh	w1, [x4,2]
+	strh	w1, [x9,x8]
+	ldr	x1, [x5,3592]
+	cbnz	x1, .L1568
+	str	x4, [x5,3592]
+	b	.L1567
+.L1568:
+	ldr	x11, [x5,1168]
+	ubfiz	x2, x0, 1, 16
+	ldr	x10, [x5,1280]
+	mov	x5, -6148914691236517206
+	ldrh	w12, [x11,x2]
+	sub	x2, x1, x10
+	asr	x2, x2, 1
+	madd	x2, x5, x2, x2
+	uxth	w2, w2
+.L1571:
+	ubfiz	x5, x2, 1, 16
+	ldrh	w5, [x11,x5]
+	cmp	w5, w12
+	bcs	.L1569
+	ldrh	w5, [x1]
+	cmp	w5, w7
+	bne	.L1570
+	strh	w2, [x4,2]
+	strh	w0, [x1]
+	b	.L1567
+.L1570:
+	umull	x1, w5, w6
+	mov	w2, w5
+	add	x1, x10, x1
+	b	.L1571
+.L1569:
+	ldrh	w5, [x1,2]
+	strh	w5, [x4,2]
+	strh	w2, [x9,x8]
+	add	x2, x3, :lo12:.LANCHOR2
+	ldr	x3, [x2,3592]
+	cmp	x1, x3
+	bne	.L1572
+	strh	w0, [x1,2]
+	str	x4, [x2,3592]
+	b	.L1567
+.L1572:
+	ldrh	w3, [x1,2]
+	mov	w4, 6
+	ldr	x2, [x2,1280]
+	umull	x3, w3, w4
+	strh	w0, [x2,x3]
+	strh	w0, [x1,2]
+.L1567:
+	mov	w0, 0
+	ret
+	.size	insert_free_list, .-insert_free_list
+	.align	2
+	.global	INSERT_FREE_LIST
+	.type	INSERT_FREE_LIST, %function
+INSERT_FREE_LIST:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	insert_free_list
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,3600]
+	add	w1, w1, 1
+	strh	w1, [x0,3600]
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	INSERT_FREE_LIST, .-INSERT_FREE_LIST
+	.align	2
+	.global	List_remove_node
+	.type	List_remove_node, %function
+List_remove_node:
+	adrp	x6, .LANCHOR2
+	uxth	w1, w1
+	add	x6, x6, :lo12:.LANCHOR2
+	mov	w5, 6
+	ldr	x3, [x0]
+	mov	w7, 65535
+	umull	x1, w1, w5
+	ldr	x2, [x6,1280]
+	add	x4, x2, x1
+	cmp	x4, x3
+	bne	.L1575
+	ldrh	w3, [x2,x1]
+	cmp	w3, w7
+	bne	.L1576
+	str	xzr, [x0]
+	b	.L1577
+.L1576:
+	umull	x3, w3, w5
+	add	x3, x2, x3
+	str	x3, [x0]
+	mov	w0, -1
+	strh	w0, [x3,2]
+	b	.L1577
+.L1575:
+	ldrh	w0, [x2,x1]
+	ldrh	w3, [x4,2]
+	cmp	w0, w7
+	bne	.L1578
+	cmp	w3, w0
+	beq	.L1577
+	umull	x3, w3, w5
+	mov	w0, -1
+	strh	w0, [x2,x3]
+	b	.L1577
+.L1578:
+	umull	x0, w0, w5
+	add	x0, x2, x0
+	strh	w3, [x0,2]
+	ldrh	w3, [x4,2]
+	ldr	x0, [x6,1280]
+	ldrh	w7, [x2,x1]
+	umull	x3, w3, w5
+	strh	w7, [x0,x3]
+.L1577:
+	mov	w0, -1
+	strh	w0, [x2,x1]
+	strh	w0, [x4,2]
+	mov	w0, 0
+	ret
+	.size	List_remove_node, .-List_remove_node
+	.align	2
+	.global	List_pop_index_node
+	.type	List_pop_index_node, %function
+List_pop_index_node:
+	stp	x29, x30, [sp, -32]!
+	uxth	w1, w1
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w19, 65535
+	ldr	x2, [x0]
+	cbz	x2, .L1580
+	adrp	x3, .LANCHOR2+1280
+	mov	w5, w19
+	mov	w6, 6
+	ldr	x4, [x3,#:lo12:.LANCHOR2+1280]
+.L1581:
+	cbnz	w1, .L1582
+.L1584:
+	sub	x2, x2, x4
+	mov	x1, -6148914691236517206
+	asr	x2, x2, 1
+	madd	x2, x1, x2, x2
+	uxth	w19, w2
+	mov	w1, w19
+	bl	List_remove_node
+	b	.L1580
+.L1582:
+	ldrh	w3, [x2]
+	cmp	w3, w5
+	beq	.L1584
+	umull	x3, w3, w6
+	sub	w1, w1, #1
+	add	x2, x4, x3
+	uxth	w1, w1
+	b	.L1581
+.L1580:
+	mov	w0, w19
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	List_pop_index_node, .-List_pop_index_node
+	.align	2
+	.global	List_get_gc_head_node
+	.type	List_get_gc_head_node, %function
+List_get_gc_head_node:
+	adrp	x2, .LANCHOR2
+	uxth	w3, w0
+	add	x2, x2, :lo12:.LANCHOR2
+	mov	w0, 65535
+	ldr	x1, [x2,3568]
+	cbz	x1, .L1592
+	ldr	x4, [x2,1280]
+	mov	w5, 6
+.L1588:
+	cbz	w3, .L1589
+	ldrh	w2, [x1]
+	cmp	w2, w0
+	beq	.L1592
+	umull	x2, w2, w5
+	sub	w3, w3, #1
+	add	x1, x4, x2
+	uxth	w3, w3
+	b	.L1588
+.L1589:
+	sub	x1, x1, x4
+	mov	x0, -6148914691236517206
+	asr	x1, x1, 1
+	madd	x1, x0, x1, x1
+	uxth	w0, w1
+.L1592:
+	ret
+	.size	List_get_gc_head_node, .-List_get_gc_head_node
+	.align	2
+	.global	List_update_data_list
+	.type	List_update_data_list, %function
+List_update_data_list:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	uxth	w20, w0
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,3608]
+	cmp	w1, w20
+	beq	.L1594
+	ldrh	w1, [x0,3656]
+	cmp	w1, w20
+	beq	.L1594
+	ldrh	w1, [x0,3704]
+	cmp	w1, w20
+	beq	.L1594
+	mov	w3, 6
+	ldr	x4, [x0,1280]
+	ldr	x2, [x0,3568]
+	umull	x3, w20, w3
+	add	x1, x4, x3
+	cmp	x1, x2
+	beq	.L1594
+	ldr	x5, [x0,1184]
+	ubfiz	x0, x20, 1, 16
+	ldrh	w2, [x5,x0]
+	ldrh	w0, [x1,4]
+	ldrh	w1, [x1,2]
+	cmp	w0, wzr
+	mul	w2, w2, w0
+	mov	w0, 65535
+	csinv	w2, w2, wzr, ne
+	cmp	w1, w0
+	bne	.L1596
+	ldrh	w0, [x4,x3]
+	cmp	w0, w1
+	beq	.L1594
+.L1596:
+	mov	w0, 6
+	mov	x3, -6148914691236517206
+	umull	x1, w1, w0
+	asr	x0, x1, 1
+	add	x1, x4, x1
+	madd	x0, x3, x0, x0
+	ldrh	w1, [x1,4]
+	ldrh	w0, [x5,x0,lsl 1]
+	cmp	w1, wzr
+	mul	w0, w0, w1
+	csinv	w0, w0, wzr, ne
+	cmp	w2, w0
+	bcs	.L1594
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w1, w20
+	add	x0, x19, 3568
+	bl	List_remove_node
+	ldrh	w0, [x19,3584]
+	sub	w0, w0, #1
+	strh	w0, [x19,3584]
+	mov	w0, w20
+	bl	INSERT_DATA_LIST
+.L1594:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	List_update_data_list, .-List_update_data_list
+	.align	2
+	.global	ftl_free_no_use_map_blk
+	.type	ftl_free_no_use_map_blk, %function
+ftl_free_no_use_map_blk:
+	stp	x29, x30, [sp, -96]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x19, x0
+	ldrh	w2, [x0,10]
+	ldr	x21, [x0,32]
+	ldr	x25, [x0,16]
+	lsl	w2, w2, 1
+	ldr	x20, [x0,40]
+	mov	x0, x21
+	bl	ftl_memset
+	mov	w0, 0
+.L1601:
+	ldrh	w1, [x19,6]
+	cmp	w1, w0
+	bls	.L1614
+	ubfiz	x1, x0, 2, 16
+	ldr	w2, [x20,x1]
+	mov	w1, 0
+	ubfx	x2, x2, 10, 16
+.L1602:
+	ldrh	w3, [x19,10]
+	cmp	w3, w1
+	bls	.L1615
+	ubfiz	x3, x1, 1, 16
+	ldrh	w4, [x25,x3]
+	cmp	w4, w2
+	bne	.L1603
+	ldrh	w4, [x21,x3]
+	add	w4, w4, 1
+	strh	w4, [x21,x3]
+.L1603:
+	add	w1, w1, 1
+	uxth	w1, w1
+	b	.L1602
+.L1615:
+	add	w0, w0, 1
+	uxth	w0, w0
+	b	.L1601
+.L1614:
+	mov	w24, 0
+	ldrh	w26, [x21]
+	mov	w20, w24
+	adrp	x27, .LANCHOR2
+.L1606:
+	ldrh	w0, [x19,10]
+	cmp	w0, w20
+	bls	.L1616
+	ldrh	w0, [x19]
+	uxtw	x22, w20
+	cmp	w0, w20
+	bne	.L1607
+	add	x0, x27, :lo12:.LANCHOR2
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x0,820]
+	cmp	w1, w0
+	bcs	.L1607
+	strh	w0, [x21,x22,lsl 1]
+.L1607:
+	lsl	x22, x22, 1
+	ldrh	w23, [x21,x22]
+	cmp	w26, w23
+	bls	.L1608
+	mov	w24, w20
+	mov	w26, w23
+.L1608:
+	cbnz	w23, .L1609
+	ldrh	w0, [x25,x22]
+	cbz	w0, .L1609
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+	strh	w23, [x25,x22]
+	ldrh	w0, [x19,8]
+	sub	w0, w0, #1
+	strh	w0, [x19,8]
+.L1609:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L1606
+.L1616:
+	mov	w0, w24
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ftl_free_no_use_map_blk, .-ftl_free_no_use_map_blk
+	.align	2
+	.global	ftl_map_blk_alloc_new_blk
+	.type	ftl_map_blk_alloc_new_blk, %function
+ftl_map_blk_alloc_new_blk:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	mov	w20, 0
+	ldrh	w2, [x0,10]
+	ldr	x1, [x0,16]
+.L1618:
+	cmp	w20, w2
+	beq	.L1622
+	mov	x22, x1
+	ldrh	w21, [x1],2
+	cbnz	w21, .L1619
+	mov	x19, x0
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x22]
+	uxth	w1, w0
+	sub	w2, w1, #1
+	mov	w0, 65533
+	cmp	w0, w2, uxth
+	bcs	.L1620
+	adrp	x2, .LANCHOR2+1470
+	adrp	x0, .LC37
+	add	x0, x0, :lo12:.LC37
+	ldrh	w2, [x2,#:lo12:.LANCHOR2+1470]
+	bl	printk
+.L1621:
+	b	.L1621
+.L1620:
+	ldr	w0, [x19,48]
+	strh	w21, [x19,2]
+	add	w0, w0, 1
+	str	w0, [x19,48]
+	ldrh	w0, [x19,8]
+	strh	w20, [x19]
+	add	w0, w0, 1
+	strh	w0, [x19,8]
+	b	.L1622
+.L1619:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L1618
+.L1622:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_map_blk_alloc_new_blk, .-ftl_map_blk_alloc_new_blk
+	.align	2
+	.global	FtlMapWritePage
+	.type	FtlMapWritePage, %function
+FtlMapWritePage:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	mov	x19, x0
+	stp	x21, x22, [sp,32]
+	add	x22, x20, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w21, [x22,1400]
+	mov	w24, w1
+	stp	x27, x28, [sp,80]
+	mov	x25, x2
+	cbnz	w21, .L1625
+	adrp	x23, .LC38
+	mov	w26, 65535
+	add	x28, x22, 1408
+	add	x23, x23, :lo12:.LC38
+.L1626:
+	ldr	w1, [x22,896]
+	add	w1, w1, 1
+	str	w1, [x22,896]
+	ldrh	w1, [x22,820]
+	ldrh	w0, [x19,2]
+	sub	w1, w1, #1
+	cmp	w0, w1
+	bge	.L1627
+	ldrh	w0, [x19]
+	cmp	w0, w26
+	bne	.L1628
+.L1627:
+	mov	x0, x19
+	bl	Ftl_write_map_blk_to_last_page
+.L1628:
+	ldrh	w1, [x19]
+	mov	w2, 16
+	ldr	x0, [x19,16]
+	ldrh	w27, [x0,x1,lsl 1]
+	ldrh	w1, [x19,2]
+	ldr	x0, [x22,1112]
+	orr	w1, w1, w27, lsl 10
+	str	w1, [x28,4]
+	mov	w1, 0
+	str	x25, [x28,8]
+	str	x0, [x28,16]
+	bl	ftl_memset
+	ldr	x1, [x28,16]
+	ldr	w0, [x19,48]
+	str	w0, [x1,4]
+	strh	w24, [x1,8]
+	ldrh	w0, [x19,4]
+	strh	w0, [x1]
+	mov	x0, x28
+	strh	w27, [x1,2]
+	mov	w1, 1
+	mov	w3, w1
+	mov	w2, w1
+	bl	FlashProgPages
+	ldrh	w3, [x19,2]
+	add	w3, w3, 1
+	uxth	w3, w3
+	strh	w3, [x19,2]
+	ldr	w1, [x28]
+	cmn	w1, #1
+	bne	.L1629
+	ldr	w1, [x28,4]
+	mov	x0, x23
+	add	w21, w21, 1
+	bl	printk
+	uxth	w21, w21
+	ldrh	w0, [x19,2]
+	cmp	w0, 2
+	bhi	.L1630
+	ldrh	w1, [x22,820]
+	sub	w1, w1, #1
+	strh	w1, [x19,2]
+.L1630:
+	cmp	w21, 3
+	bls	.L1626
+	add	x20, x20, :lo12:.LANCHOR2
+	adrp	x0, .LC39
+	add	x0, x0, :lo12:.LC39
+	mov	w2, w21
+	ldr	w1, [x20,1412]
+	bl	printk
+	mov	w0, 1
+	str	w0, [x20,1400]
+	b	.L1625
+.L1629:
+	cbz	w1, .L1632
+	strh	w27, [x19,60]
+.L1632:
+	cmp	w3, 1
+	beq	.L1626
+	cmp	w1, 256
+	beq	.L1626
+	add	x20, x20, :lo12:.LANCHOR2
+	ldr	x0, [x19,40]
+	ldr	w1, [x20,1412]
+	str	w1, [x0,w24,uxtw 2]
+.L1625:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlMapWritePage, .-FtlMapWritePage
+	.align	2
+	.global	ftl_map_blk_gc
+	.type	ftl_map_blk_gc, %function
+ftl_map_blk_gc:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	adrp	x20, .LANCHOR2
+	ldr	x22, [x0,16]
+	ldr	x23, [x0,40]
+	bl	ftl_free_no_use_map_blk
+	ldrh	w4, [x19,10]
+	ldrh	w2, [x19,8]
+	sub	w1, w4, #4
+	cmp	w2, w1
+	bge	.L1637
+	ldrh	w2, [x19,60]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L1639
+	add	x1, x20, :lo12:.LANCHOR2
+	ldrh	w2, [x19,2]
+	ldrh	w1, [x1,820]
+	cmp	w2, w1
+	bcc	.L1639
+.L1637:
+	ldrh	w1, [x19,60]
+	uxth	w21, w0
+	mov	w0, 65535
+	cmp	w1, w0
+	beq	.L1641
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrh	w3, [x19,2]
+	ldrh	w0, [x0,820]
+	cmp	w0, w3
+	bhi	.L1641
+	mov	x2, 0
+.L1642:
+	uxth	w0, w2
+	cmp	w0, w4
+	bcs	.L1643
+	add	x2, x2, 1
+	add	x5, x22, x2, lsl 1
+	ldrh	w5, [x5,-2]
+	cmp	w5, w1
+	bne	.L1642
+	mov	w21, w0
+.L1643:
+	ubfiz	x2, x0, 1, 16
+	adrp	x0, .LC40
+	add	x0, x0, :lo12:.LC40
+	ldrh	w2, [x22,x2]
+	bl	printk
+	mov	w0, -1
+	strh	w0, [x19,60]
+.L1641:
+	ubfiz	x21, x21, 1, 16
+	ldrh	w25, [x22,x21]
+	cbz	w25, .L1639
+	ldr	w0, [x19,52]
+	cbnz	w0, .L1639
+	mov	w1, 1
+	str	w1, [x19,52]
+	strh	w0, [x22,x21]
+	ldrh	w0, [x19,8]
+	ldrh	w1, [x19,2]
+	sub	w0, w0, #1
+	strh	w0, [x19,8]
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x0,820]
+	cmp	w1, w0
+	bcc	.L1645
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L1645:
+	add	x24, x20, :lo12:.LANCHOR2
+	adrp	x26, .LC41
+	mov	w21, 0
+	add	x22, x24, 1408
+	mov	w27, 1
+	add	x26, x26, :lo12:.LC41
+.L1646:
+	ldrh	w0, [x19,6]
+	cmp	w0, w21
+	bls	.L1656
+	ubfiz	x28, x21, 2, 16
+	ldr	w0, [x23,x28]
+	cmp	w25, w0, lsr 10
+	bne	.L1647
+	ldr	x3, [x24,1112]
+	mov	w1, 1
+	ldr	x0, [x24,1056]
+	mov	w2, w1
+	str	x3, [x22,16]
+	str	x0, [x22,8]
+	str	x3, [x29,104]
+	ldr	w0, [x23,x28]
+	str	w0, [x22,4]
+	mov	x0, x22
+	bl	FlashReadPages
+	ldr	w0, [x22]
+	ldr	x3, [x29,104]
+	cmn	w0, #1
+	bne	.L1648
+	str	wzr, [x23,x28]
+	mov	x0, x26
+	ldr	w1, [x22,4]
+	ldrh	w2, [x3,8]
+	bl	printk
+	str	w27, [x24,1400]
+	b	.L1647
+.L1648:
+	ldr	x2, [x22,8]
+	mov	x0, x19
+	mov	w1, w21
+	bl	FtlMapWritePage
+.L1647:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L1646
+.L1656:
+	mov	w0, w25
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+	str	wzr, [x19,52]
+.L1639:
+	add	x20, x20, :lo12:.LANCHOR2
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x20,820]
+	cmp	w1, w0
+	bcc	.L1650
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+.L1650:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	ftl_map_blk_gc, .-ftl_map_blk_gc
+	.align	2
+	.global	Ftl_write_map_blk_to_last_page
+	.type	Ftl_write_map_blk_to_last_page, %function
+Ftl_write_map_blk_to_last_page:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	str	x23, [sp,48]
+	add	x1, x21, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	ldr	w20, [x1,1400]
+	ldr	x22, [x0,16]
+	ldr	x23, [x0,40]
+	cbnz	w20, .L1658
+	mov	x19, x0
+	ldrh	w0, [x0]
+	mov	w2, 65535
+	cmp	w0, w2
+	bne	.L1659
+	ldrh	w0, [x19,8]
+	add	w0, w0, 1
+	strh	w0, [x19,8]
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x22]
+	strh	w20, [x19,2]
+	ldr	w0, [x19,48]
+	strh	w20, [x19]
+	add	w0, w0, 1
+	str	w0, [x19,48]
+	b	.L1658
+.L1659:
+	ubfiz	x0, x0, 1, 16
+	ldr	w2, [x19,48]
+	ldrh	w22, [x22,x0]
+	ldrh	w0, [x19,2]
+	orr	w0, w0, w22, lsl 10
+	str	w0, [x1,1412]
+	ldr	x0, [x1,1048]
+	str	x0, [x1,1416]
+	ldr	x0, [x1,1112]
+	str	x0, [x1,1424]
+	str	w2, [x0,4]
+	mov	w2, -1291
+	strh	w2, [x0,8]
+	ldrh	w2, [x19,4]
+	strh	w2, [x0]
+	strh	w22, [x0,2]
+	ldrh	w2, [x1,820]
+	ldr	x0, [x1,1048]
+	mov	w1, 255
+	lsl	w2, w2, 3
+	bl	ftl_memset
+	mov	w0, w20
+.L1660:
+	ldrh	w1, [x19,6]
+	cmp	w1, w0
+	bls	.L1663
+	ubfiz	x3, x0, 2, 32
+	ldr	w1, [x23,x3]
+	cmp	w22, w1, lsr 10
+	bne	.L1661
+	add	x2, x21, :lo12:.LANCHOR2
+	add	w20, w20, 1
+	uxth	w20, w20
+	ldr	x4, [x2,1048]
+	ubfiz	x1, x20, 3, 16
+	str	w0, [x4,x1]
+	ldr	x2, [x2,1048]
+	ldr	w3, [x23,x3]
+	add	x1, x2, x1
+	str	w3, [x1,4]
+.L1661:
+	add	w0, w0, 1
+	uxth	w0, w0
+	b	.L1660
+.L1663:
+	mov	w1, 1
+	add	x0, x21, :lo12:.LANCHOR2
+	add	x0, x0, 1408
+	mov	w2, w1
+	mov	w3, 0
+	bl	FlashProgPages
+	ldrh	w0, [x19,2]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+.L1658:
+	mov	w0, 0
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	Ftl_write_map_blk_to_last_page, .-Ftl_write_map_blk_to_last_page
+	.align	2
+	.global	flush_l2p_region
+	.type	flush_l2p_region, %function
+flush_l2p_region:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	ubfiz	x19, x0, 4, 16
+	add	x20, x20, :lo12:.LANCHOR2
+	add	x0, x20, 3752
+	ldr	x1, [x20,1264]
+	add	x2, x1, x19
+	ldrh	w1, [x1,x19]
+	ldr	x2, [x2,8]
+	bl	FtlMapWritePage
+	ldr	x0, [x20,1264]
+	add	x19, x0, x19
+	ldr	w0, [x19,4]
+	and	w0, w0, 2147483647
+	str	w0, [x19,4]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	flush_l2p_region, .-flush_l2p_region
+	.align	2
+	.global	select_l2p_ram_region
+	.type	select_l2p_ram_region, %function
+select_l2p_ram_region:
+	adrp	x0, .LANCHOR2
+	mov	x4, 0
+	add	x1, x0, :lo12:.LANCHOR2
+	mov	x3, x0
+	mov	w5, 65535
+	ldrh	w2, [x1,858]
+	ldr	x1, [x1,1264]
+.L1666:
+	uxth	w0, w4
+	cmp	w0, w2
+	bcs	.L1682
+	add	x4, x4, 1
+	add	x6, x1, x4, lsl 4
+	ldrh	w6, [x6,-16]
+	cmp	w6, w5
+	bne	.L1666
+	b	.L1667
+.L1682:
+	mov	w0, w2
+	mov	x4, 0
+	mov	w7, -2147483648
+.L1669:
+	uxth	w6, w4
+	cmp	w6, w2
+	bcs	.L1683
+	add	x5, x1, x4, lsl 4
+	ldr	w5, [x5,4]
+	tbnz	w5, #31, .L1678
+	cmp	w5, w7
+	bcc	.L1670
+.L1678:
+	mov	w5, w7
+	mov	w6, w0
+.L1670:
+	add	x4, x4, 1
+	mov	w7, w5
+	mov	w0, w6
+	b	.L1669
+.L1683:
+	cmp	w0, w2
+	bcc	.L1667
+	add	x0, x3, :lo12:.LANCHOR2
+	add	x1, x1, 4
+	mov	w4, -1
+	mov	w3, 0
+	ldrh	w5, [x0,3816]
+	mov	w0, w2
+.L1673:
+	cmp	w3, w2
+	beq	.L1667
+	ldr	w7, [x1]
+	cmp	w7, w4
+	bcs	.L1674
+	ldrh	w6, [x1,-4]
+	cmp	w6, w5
+	csel	w4, w4, w7, eq
+	cmp	w6, w5
+	csel	w0, w0, w3, eq
+.L1674:
+	add	w3, w3, 1
+	add	x1, x1, 16
+	uxth	w3, w3
+	b	.L1673
+.L1667:
+	ret
+	.size	select_l2p_ram_region, .-select_l2p_ram_region
+	.align	2
+	.global	log2phys
+	.type	log2phys, %function
+log2phys:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	add	x3, x21, :lo12:.LANCHOR2
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	mov	x26, x1
+	mov	w27, w2
+	ldrh	w1, [x3,826]
+	mov	x2, 1
+	ldr	x20, [x3,1264]
+	add	w1, w1, 7
+	lsr	w28, w0, w1
+	lsl	x1, x2, x1
+	sub	w1, w1, #1
+	and	w23, w1, w0
+	ldrh	w1, [x3,858]
+	uxth	w25, w28
+	mov	x0, 0
+	uxth	x23, w23
+.L1685:
+	uxth	x19, w0
+	cmp	w19, w1
+	bcs	.L1699
+	add	x0, x0, 1
+	add	x2, x20, x0, lsl 4
+	ldrh	w2, [x2,-16]
+	cmp	w2, w25
+	bne	.L1685
+.L1686:
+	cbnz	w27, .L1687
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x1, [x0,1264]
+	add	x1, x1, x19, lsl 4
+	ldr	x0, [x1,8]
+	ldr	w0, [x0,x23,lsl 2]
+	str	w0, [x26]
+	b	.L1688
+.L1687:
+	add	x1, x21, :lo12:.LANCHOR2
+	lsl	x0, x19, 4
+	ldr	w3, [x26]
+	ldr	x2, [x1,1264]
+	add	x2, x2, x0
+	ldr	x2, [x2,8]
+	str	w3, [x2,x23,lsl 2]
+	strh	w25, [x1,3816]
+	ldr	x2, [x1,1264]
+	add	x0, x2, x0
+	ldr	w2, [x0,4]
+	orr	w2, w2, -2147483648
+	str	w2, [x0,4]
+.L1688:
+	add	x21, x21, :lo12:.LANCHOR2
+	ldr	x0, [x21,1264]
+	add	x19, x0, x19, lsl 4
+	ldr	w0, [x19,4]
+	cmn	w0, #1
+	beq	.L1696
+	add	w0, w0, 1
+	str	w0, [x19,4]
+	b	.L1696
+.L1699:
+	bl	select_l2p_ram_region
+	uxth	x19, w0
+	ubfiz	x22, x19, 4, 16
+	mov	w2, 65535
+	add	x1, x20, x22
+	ldrh	w3, [x20,x22]
+	cmp	w3, w2
+	beq	.L1691
+	ldr	w1, [x1,4]
+	tbz	w1, #31, .L1691
+	bl	flush_l2p_region
+.L1691:
+	add	x20, x21, :lo12:.LANCHOR2
+	ubfiz	x0, x25, 2, 16
+	ldr	x1, [x20,1240]
+	ldr	w24, [x1,x0]
+	cbnz	w24, .L1692
+	ldr	x0, [x20,1264]
+	mov	w1, 255
+	ldrh	w2, [x20,828]
+	add	x0, x0, x22
+	ldr	x0, [x0,8]
+	bl	ftl_memset
+	ldr	x0, [x20,1264]
+	strh	w25, [x0,x22]
+	ldr	x0, [x20,1264]
+	add	x22, x0, x22
+	str	w24, [x22,4]
+	b	.L1686
+.L1692:
+	ldr	x1, [x20,1264]
+	add	x0, x20, 1408
+	str	w24, [x0,4]
+	add	x1, x1, x22
+	ldr	x1, [x1,8]
+	str	x1, [x0,8]
+	ldr	x1, [x20,1112]
+	str	x1, [x0,16]
+	mov	w1, 1
+	mov	w2, w1
+	bl	FlashReadPages
+	ldr	w0, [x20,1408]
+	cmp	w0, 256
+	bne	.L1693
+	and	w28, w28, 65535
+	adrp	x0, .LC42
+	mov	w2, w24
+	mov	w1, w28
+	add	x0, x0, :lo12:.LC42
+	lsr	w24, w24, 10
+	bl	printk
+	strh	w24, [x20,3812]
+	add	x0, x20, 3752
+	ldr	x2, [x20,1264]
+	mov	w1, w28
+	add	x2, x2, x22
+	ldr	x2, [x2,8]
+	bl	FtlMapWritePage
+.L1693:
+	add	x1, x21, :lo12:.LANCHOR2
+	ldr	x0, [x1,1264]
+	add	x0, x0, x22
+	str	wzr, [x0,4]
+	ldr	x0, [x1,1264]
+	strh	w25, [x0,x22]
+	b	.L1686
+.L1696:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	log2phys, .-log2phys
+	.align	2
+	.global	FtlVendorPartWrite
+	.type	FtlVendorPartWrite, %function
+FtlVendorPartWrite:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	w22, w1
+	mov	w25, w0
+	add	w1, w0, w1
+	ldrh	w0, [x19,812]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	cmp	w1, w0
+	mov	x24, x2
+	ldrh	w23, [x19,826]
+	mov	w21, -1
+	bhi	.L1701
+	lsr	w23, w25, w23
+	mov	w21, 0
+	add	x27, x19, 3824
+.L1702:
+	cbz	w22, .L1701
+	ldrh	w1, [x19,824]
+	ldr	x0, [x19,1232]
+	udiv	w26, w25, w1
+	ldr	w2, [x0,w23,uxtw 2]
+	uxth	w0, w22
+	msub	w26, w26, w1, w25
+	sub	w20, w1, w26
+	uxth	w20, w20
+	cmp	w20, w22
+	csel	w20, w0, w20, hi
+	cmp	w20, w1
+	beq	.L1704
+	cbz	w2, .L1704
+	ldr	x0, [x19,1064]
+	mov	w1, 1
+	str	w2, [x29,108]
+	mov	w2, w1
+	str	x0, [x29,112]
+	add	x0, x29, 104
+	str	xzr, [x29,120]
+	bl	FlashReadPages
+	b	.L1705
+.L1704:
+	ldr	x0, [x19,1064]
+	mov	w1, 0
+	ldrh	w2, [x19,828]
+	bl	ftl_memset
+.L1705:
+	ldr	x0, [x19,1064]
+	lsl	w28, w20, 9
+	ubfiz	x26, x26, 9, 16
+	mov	x1, x24
+	mov	w2, w28
+	add	x0, x0, x26
+	sub	w22, w22, w20
+	add	w25, w25, w20
+	bl	ftl_memcpy
+	add	x24, x24, x28, sxtw
+	ldr	x2, [x19,1064]
+	mov	w1, w23
+	mov	x0, x27
+	add	w23, w23, 1
+	bl	FtlMapWritePage
+	cmn	w0, #1
+	csinv	w21, w21, wzr, ne
+	b	.L1702
+.L1701:
+	mov	w0, w21
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	FtlVendorPartWrite, .-FtlVendorPartWrite
+	.align	2
+	.global	FtlVendorPartRead
+	.type	FtlVendorPartRead, %function
+FtlVendorPartRead:
+	stp	x29, x30, [sp, -176]!
+	adrp	x3, .LANCHOR2
+	add	x3, x3, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	mov	w22, w1
+	mov	x25, x2
+	add	w2, w0, w1
+	ldrh	w1, [x3,812]
+	mov	w23, w0
+	ldrh	w20, [x3,826]
+	cmp	w2, w1
+	mov	w0, -1
+	bhi	.L1716
+	adrp	x26, .LC43
+	add	x0, x3, 3824
+	lsr	w20, w23, w20
+	mov	w21, 0
+	mov	x28, x3
+	add	x26, x26, :lo12:.LC43
+	str	x0, [x29,104]
+.L1717:
+	cbz	w22, .L1725
+	ldrh	w19, [x28,824]
+	ldr	x0, [x28,1232]
+	udiv	w24, w23, w19
+	ldr	w4, [x0,w20,uxtw 2]
+	uxth	w0, w22
+	msub	w24, w24, w19, w23
+	sub	w19, w19, w24
+	uxth	w19, w19
+	cmp	w19, w22
+	csel	w19, w0, w19, hi
+	lsl	w27, w19, 9
+	cbz	w4, .L1719
+	ldr	x0, [x28,1064]
+	mov	w1, 1
+	str	x0, [x29,128]
+	mov	w2, w1
+	add	x0, x29, 120
+	str	w4, [x29,124]
+	str	x4, [x29,96]
+	str	xzr, [x29,136]
+	bl	FlashReadPages
+	ldr	w0, [x29,120]
+	ldr	x4, [x29,96]
+	cmn	w0, #1
+	ldr	w0, [x28,1408]
+	csinv	w21, w21, wzr, ne
+	cmp	w0, 256
+	bne	.L1721
+	mov	w1, w20
+	mov	w2, w4
+	mov	x0, x26
+	bl	printk
+	ldr	x0, [x29,104]
+	mov	w1, w20
+	ldr	x2, [x28,1064]
+	bl	FtlMapWritePage
+.L1721:
+	ldr	x1, [x28,1064]
+	ubfiz	x24, x24, 9, 16
+	mov	x0, x25
+	mov	w2, w27
+	add	x1, x1, x24
+	bl	ftl_memcpy
+	b	.L1722
+.L1719:
+	mov	x0, x25
+	mov	w1, w4
+	mov	w2, w27
+	bl	ftl_memset
+.L1722:
+	add	w20, w20, 1
+	sub	w22, w22, w19
+	add	w23, w23, w19
+	add	x25, x25, x27, sxtw
+	b	.L1717
+.L1725:
+	mov	w0, w21
+.L1716:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	FtlVendorPartRead, .-FtlVendorPartRead
+	.align	2
+	.global	ftl_vendor_read
+	.type	ftl_vendor_read, %function
+ftl_vendor_read:
+	stp	x29, x30, [sp, -16]!
+	add	w0, w0, 256
+	add	x29, sp, 0
+	bl	FtlVendorPartRead
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_vendor_read, .-ftl_vendor_read
+	.align	2
+	.global	ftl_sys_read
+	.type	ftl_sys_read, %function
+ftl_sys_read:
+	stp	x29, x30, [sp, -16]!
+	add	w0, w0, 512
+	add	x29, sp, 0
+	bl	FtlVendorPartRead
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_sys_read, .-ftl_sys_read
+	.align	2
+	.global	FtlUpdateVaildLpn
+	.type	FtlUpdateVaildLpn, %function
+FtlUpdateVaildLpn:
+	adrp	x1, .LANCHOR2
+	add	x3, x1, :lo12:.LANCHOR2
+	ldrh	w2, [x3,3888]
+	cbnz	w0, .L1729
+	cmp	w2, 4
+	bhi	.L1729
+	add	w2, w2, 1
+	strh	w2, [x3,3888]
+	b	.L1728
+.L1729:
+	add	x0, x1, :lo12:.LANCHOR2
+	mov	w7, 65535
+	strh	wzr, [x0,3888]
+	str	wzr, [x0,3892]
+	ldrh	w5, [x0,756]
+	ldr	x6, [x0,1184]
+	mov	x0, 0
+.L1730:
+	cmp	w5, w0, uxth
+	bls	.L1728
+	ldrh	w4, [x6,x0,lsl 1]
+	cmp	w4, w7
+	beq	.L1731
+	add	x3, x1, :lo12:.LANCHOR2
+	ldr	w2, [x3,3892]
+	add	w2, w4, w2
+	str	w2, [x3,3892]
+.L1731:
+	add	x0, x0, 1
+	b	.L1730
+.L1728:
+	ret
+	.size	FtlUpdateVaildLpn, .-FtlUpdateVaildLpn
+	.align	2
+	.global	FtlMapBlkWriteDumpData
+	.type	FtlMapBlkWriteDumpData, %function
+FtlMapBlkWriteDumpData:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	ldr	w1, [x0,56]
+	ldrh	w19, [x0,6]
+	ldr	x4, [x0,40]
+	cbz	w1, .L1734
+	adrp	x1, .LANCHOR2
+	str	wzr, [x0,56]
+	add	x2, x1, :lo12:.LANCHOR2
+	mov	x21, x1
+	ldr	w3, [x2,1400]
+	cbnz	w3, .L1734
+	mov	x20, x0
+	sub	w19, w19, #1
+	add	x0, x2, 1408
+	ldr	x3, [x2,1112]
+	uxth	w19, w19
+	ldr	x1, [x2,1056]
+	str	x3, [x0,16]
+	ubfiz	x3, x19, 2, 16
+	str	x1, [x0,8]
+	ldr	w3, [x4,x3]
+	str	w3, [x0,4]
+	cbz	w3, .L1738
+	mov	w1, 1
+	mov	w2, w1
+	bl	FlashReadPages
+	b	.L1739
+.L1738:
+	ldrh	w2, [x2,828]
+	mov	x0, x1
+	mov	w1, 255
+	bl	ftl_memset
+.L1739:
+	add	x2, x21, :lo12:.LANCHOR2
+	mov	x0, x20
+	mov	w1, w19
+	ldr	x2, [x2,1416]
+	bl	FtlMapWritePage
+.L1734:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlMapBlkWriteDumpData, .-FtlMapBlkWriteDumpData
+	.align	2
+	.global	FtlVpcTblFlush
+	.type	FtlVpcTblFlush, %function
+FtlVpcTblFlush:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR2
+	str	x25, [sp,64]
+	stp	x19, x20, [sp,16]
+	add	x19, x22, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	ldr	w0, [x19,1400]
+	cbnz	w0, .L1742
+	ldr	x21, [x19,1112]
+	add	x20, x19, 3520
+	ldr	x1, [x19,1048]
+	str	x1, [x19,1416]
+	str	x21, [x19,1424]
+	ldrh	w2, [x19,3896]
+	strh	w2, [x21,2]
+	mov	w2, -3932
+	strh	w2, [x21]
+	str	w0, [x21,12]
+	ldr	w2, [x19,3904]
+	str	w2, [x21,4]
+	str	w0, [x21,8]
+	mov	w0, 19539
+	ldrh	w1, [x19,3608]
+	movk	w0, 0x4654, lsl 16
+	strh	w1, [x19,3534]
+	ldrh	w1, [x19,3610]
+	ldrb	w2, [x19,3614]
+	str	w0, [x19,3520]
+	mov	w0, 72
+	orr	w1, w2, w1, lsl 6
+	strh	w1, [x19,3536]
+	ldrh	w1, [x19,3656]
+	movk	w0, 0x5000, lsl 16
+	strh	w1, [x19,3538]
+	ldrh	w1, [x19,3658]
+	ldrb	w2, [x19,3662]
+	str	w0, [x19,3524]
+	ldrh	w0, [x19,3902]
+	orr	w1, w2, w1, lsl 6
+	strh	w0, [x19,3528]
+	ldrh	w0, [x19,770]
+	strb	w0, [x19,3530]
+	ldrb	w0, [x19,3616]
+	strb	w0, [x19,3531]
+	strh	w1, [x19,3540]
+	ldrb	w0, [x19,3664]
+	ldrh	w1, [x19,3704]
+	strb	w0, [x19,3532]
+	strh	w1, [x19,3542]
+	ldrh	w1, [x19,3706]
+	ldrb	w0, [x19,3712]
+	strb	w0, [x19,3533]
+	ldr	w0, [x19,904]
+	ldrb	w2, [x19,3710]
+	str	w0, [x19,3552]
+	ldr	w0, [x19,872]
+	orr	w1, w2, w1, lsl 6
+	str	w0, [x19,3560]
+	ldr	w0, [x19,876]
+	str	w0, [x19,3556]
+	ldrh	w2, [x19,828]
+	ldr	x0, [x19,1416]
+	strh	w1, [x19,3544]
+	mov	w1, 255
+	bl	ftl_memset
+	ldr	x0, [x19,1416]
+	mov	x1, x20
+	mov	w2, 48
+	bl	ftl_memcpy
+	ldr	x0, [x19,1416]
+	ldrh	w2, [x19,756]
+	ldr	x1, [x19,1184]
+	add	x0, x0, 48
+	lsl	w2, w2, 1
+	bl	ftl_memcpy
+	ldrh	w2, [x19,756]
+	ldr	x1, [x19,1416]
+	uxth	x0, w2
+	lsr	w2, w2, 3
+	add	x0, x0, 24
+	add	w2, w2, 4
+	lsr	x0, x0, 1
+	add	x0, x1, x0, lsl 2
+	adrp	x1, .LANCHOR0+16
+	ldr	x1, [x1,#:lo12:.LANCHOR0+16]
+	bl	ftl_memcpy
+	ldrh	w0, [x19,860]
+	cbz	w0, .L1743
+	ldrh	w0, [x19,756]
+	ldrh	w2, [x19,856]
+	lsr	w1, w0, 3
+	add	w0, w1, w0, lsl 1
+	ldr	x1, [x19,1416]
+	add	w0, w0, 52
+	lsl	w2, w2, 2
+	and	x0, x0, 65532
+	add	x0, x1, x0
+	ldr	x1, [x19,1240]
+	bl	ftl_memcpy
+.L1743:
+	add	x19, x22, :lo12:.LANCHOR2
+	mov	w0, 0
+	mov	w23, 0
+	mov	w25, 65535
+	add	x20, x19, 1408
+	bl	FtlUpdateVaildLpn
+.L1744:
+	ldr	x0, [x19,1048]
+	str	x0, [x20,8]
+	ldr	x0, [x19,1112]
+	str	x0, [x20,16]
+	ldrh	w0, [x19,3896]
+	ldrh	w1, [x19,3898]
+	orr	w0, w1, w0, lsl 10
+	mov	w1, 1
+	str	w0, [x20,4]
+	mov	w2, w1
+	mov	w3, w1
+	mov	x0, x20
+	bl	FlashProgPages
+	ldrh	w0, [x19,820]
+	ldrh	w1, [x19,3898]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	blt	.L1745
+	ldrh	w0, [x19,3896]
+	ldrh	w25, [x19,3900]
+	strh	wzr, [x19,3898]
+	strh	w0, [x19,3900]
+	bl	FtlFreeSysBlkQueueOut
+	ldr	w1, [x19,872]
+	str	w1, [x19,3904]
+	add	w2, w1, 1
+	str	w2, [x19,872]
+	ubfiz	w2, w0, 10, 16
+	str	w2, [x20,4]
+	str	w1, [x21,4]
+	mov	w1, 1
+	strh	w0, [x19,3896]
+	mov	w2, w1
+	strh	w0, [x21,2]
+	mov	w3, w1
+	mov	x0, x20
+	bl	FlashProgPages
+.L1745:
+	ldrh	w1, [x19,3898]
+	ldr	w2, [x20]
+	add	w1, w1, 1
+	cmn	w2, #1
+	uxth	w1, w1
+	strh	w1, [x19,3898]
+	bne	.L1746
+	cmp	w1, 1
+	bne	.L1747
+	ldrh	w1, [x19,820]
+	sub	w1, w1, #1
+	strh	w1, [x19,3898]
+.L1747:
+	add	w23, w23, 1
+	uxth	w23, w23
+	cmp	w23, 3
+	bls	.L1744
+	add	x22, x22, :lo12:.LANCHOR2
+	adrp	x0, .LC44
+	add	x0, x0, :lo12:.LC44
+	mov	w2, w23
+	ldr	w1, [x22,1412]
+	bl	printk
+	mov	w0, 1
+	str	w0, [x22,1400]
+	b	.L1742
+.L1746:
+	cmp	w1, 1
+	beq	.L1744
+	cmp	w2, 256
+	beq	.L1744
+	mov	w0, 65535
+	cmp	w25, w0
+	beq	.L1742
+	mov	w0, w25
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+.L1742:
+	mov	w0, 0
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlVpcTblFlush, .-FtlVpcTblFlush
+	.align	2
+	.global	FtlScanSysBlk
+	.type	FtlScanSysBlk, %function
+FtlScanSysBlk:
+	stp	x29, x30, [sp, -128]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x20, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	strh	wzr, [x20,3908]
+	mov	x26, 56
+	ldr	w2, [x20,848]
+	mov	w22, 65535
+	ldr	x0, [x20,1256]
+	lsl	w2, w2, 2
+	strh	wzr, [x20,1392]
+	bl	ftl_memset
+	ldr	w2, [x20,848]
+	mov	w1, 0
+	ldr	x0, [x20,1192]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w2, [x20,840]
+	mov	w1, 0
+	ldr	x0, [x20,1224]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldrh	w2, [x20,840]
+	mov	w1, 0
+	ldr	x0, [x20,1208]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	add	x0, x20, 3896
+	mov	w1, 255
+	mov	w2, 12
+	bl	ftl_memset
+	ldrh	w21, [x20,756]
+.L1754:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,758]
+	cmp	w0, w21
+	bls	.L1795
+	mov	x27, 0
+	ldrh	w3, [x1,748]
+	ldrh	w2, [x1,830]
+	mov	w20, w27
+	mov	x23, x1
+.L1796:
+	cmp	w3, w27, uxth
+	bls	.L1829
+	add	x0, x23, 776
+	mov	w1, w21
+	str	x2, [x29,112]
+	str	x3, [x29,120]
+	ldrb	w0, [x0,x27]
+	bl	V2P_block
+	uxth	w28, w0
+	bl	FtlBbmIsBadBlock
+	ldr	x3, [x29,120]
+	ldr	x2, [x29,112]
+	cbnz	w0, .L1755
+	mov	w0, 56
+	ldr	x1, [x23,992]
+	lsl	w28, w28, 10
+	mov	w4, 4
+	umull	x0, w20, w0
+	add	x1, x1, x0
+	str	w28, [x1,4]
+	ldr	x1, [x23,992]
+	add	x0, x1, x0
+	ldr	x1, [x23,1072]
+	str	x1, [x0,8]
+	mul	w1, w20, w2
+	add	w20, w20, 1
+	sdiv	w1, w1, w4
+	uxth	w20, w20
+	ldr	x4, [x23,1128]
+	add	x1, x4, x1, sxtw 2
+	str	x1, [x0,16]
+.L1755:
+	add	x27, x27, 1
+	b	.L1796
+.L1829:
+	cbz	w20, .L1758
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, w20
+	mov	w2, 1
+	mov	x23, 0
+	mov	w27, -1
+	adrp	x28, .LANCHOR0
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+.L1759:
+	cmp	w20, w23, uxth
+	bls	.L1758
+	add	x0, x19, :lo12:.LANCHOR2
+	mul	x5, x23, x26
+	ldr	x0, [x0,992]
+	add	x1, x0, x5
+	ldr	w0, [x0,x5]
+	ldr	w4, [x1,4]
+	cmn	w0, #1
+	ldr	x25, [x1,16]
+	ubfx	x24, x4, 10, 16
+	bne	.L1761
+	mov	w6, 16
+.L1760:
+	add	x7, x19, :lo12:.LANCHOR2
+	str	x6, [x29,104]
+	str	x7, [x29,112]
+	str	x5, [x29,120]
+	ldr	x0, [x7,992]
+	add	x0, x0, x5
+	ldr	w1, [x0,4]
+	add	w1, w1, 1
+	str	w1, [x0,4]
+	mov	w1, 1
+	ldr	x0, [x7,992]
+	mov	w2, w1
+	add	x0, x0, x5
+	bl	FlashReadPages
+	ldrh	w0, [x25]
+	ldr	x7, [x29,112]
+	cmp	w0, w22
+	ldr	x5, [x29,120]
+	ldr	x6, [x29,104]
+	ldr	x0, [x7,992]
+	bne	.L1762
+	str	w27, [x0,x5]
+	b	.L1761
+.L1762:
+	ldr	w0, [x0,x5]
+	cmn	w0, #1
+	bne	.L1761
+	sub	w6, w6, #1
+	uxth	w6, w6
+	cbnz	w6, .L1760
+.L1761:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x1, [x0,992]
+	ldr	w1, [x1,x5]
+	cmn	w1, #1
+	beq	.L1764
+	ldr	w0, [x0,872]
+	cmn	w0, #1
+	beq	.L1765
+	ldr	w1, [x25,4]
+	cmp	w0, w1
+	bhi	.L1766
+.L1765:
+	ldr	w0, [x25,4]
+	cmn	w0, #1
+	beq	.L1766
+	add	x1, x19, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	str	w0, [x1,872]
+.L1766:
+	ldrh	w0, [x25]
+	mov	w1, 61604
+	cmp	w0, w1
+	beq	.L1768
+	bhi	.L1769
+	mov	w1, 61574
+	cmp	w0, w1
+	bne	.L1767
+	add	x5, x19, :lo12:.LANCHOR2
+	ldrh	w6, [x5,840]
+	ldrh	w0, [x5,1392]
+	sub	w2, w6, #1
+	ldr	x5, [x5,1224]
+	sxth	x1, w2
+	sub	w2, w2, w0
+	b	.L1782
+.L1769:
+	mov	w1, 61634
+	cmp	w0, w1
+	beq	.L1771
+	cmp	w0, w22
+	bne	.L1767
+	mov	w0, w24
+	b	.L1828
+.L1771:
+	add	x5, x19, :lo12:.LANCHOR2
+	ldr	w6, [x5,848]
+	ldrh	w0, [x5,3908]
+	ldr	x5, [x5,1256]
+	uxth	w2, w6
+	sub	w1, w2, #1
+	sub	w2, w2, w0
+	sub	w2, w2, #1
+	sxth	x1, w1
+	sxth	w2, w2
+.L1773:
+	cmp	w1, w2
+	ble	.L1830
+	sbfiz	x7, x1, 2, 32
+	ldr	w10, [x25,4]
+	sxth	x8, w1
+	ldr	w9, [x5,x7]
+	cmp	w10, w9
+	bls	.L1774
+	ldr	w2, [x5]
+	cbnz	w2, .L1775
+	cmp	w0, w6
+	beq	.L1775
+	add	x2, x19, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	strh	w0, [x2,3908]
+.L1775:
+	mov	w0, 0
+.L1776:
+	cmp	w0, w1
+	beq	.L1831
+	add	x5, x19, :lo12:.LANCHOR2
+	sxtw	x2, w0
+	lsl	x6, x2, 2
+	lsl	x2, x2, 1
+	add	w0, w0, 1
+	ldr	x9, [x5,1256]
+	sxth	w0, w0
+	add	x10, x9, x6
+	ldr	w10, [x10,4]
+	str	w10, [x9,x6]
+	ldr	x5, [x5,1192]
+	add	x6, x5, x2
+	ldrh	w6, [x6,2]
+	strh	w6, [x5,x2]
+	b	.L1776
+.L1831:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldr	w5, [x25,4]
+	ldr	x0, [x2,1256]
+	str	w5, [x0,x7]
+	ldr	x0, [x2,1192]
+	strh	w24, [x0,x8,lsl 1]
+	tbz	w1, #31, .L1778
+	b	.L1767
+.L1774:
+	sub	w1, w1, #1
+	sxth	x1, w1
+	b	.L1773
+.L1830:
+	tbz	w1, #31, .L1811
+	b	.L1767
+.L1778:
+	ldrh	w0, [x2,3908]
+	ldr	w2, [x2,848]
+	sub	w2, w2, w0
+	sub	w2, w2, #1
+	cmp	w1, w2, sxth
+	bgt	.L1767
+.L1811:
+	add	x2, x19, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	ldr	w3, [x25,4]
+	strh	w0, [x2,3908]
+	ldr	x0, [x2,1256]
+	str	w3, [x0,x1,lsl 2]
+	ldr	x0, [x2,1192]
+	b	.L1827
+.L1788:
+	sbfiz	x7, x1, 2, 32
+	ldr	w10, [x25,4]
+	sxth	x8, w1
+	ldr	w9, [x5,x7]
+	cmp	w10, w9
+	bhi	.L1832
+	sub	w1, w1, #1
+	sxth	x1, w1
+.L1782:
+	cmp	w1, w2
+	bgt	.L1788
+	b	.L1787
+.L1832:
+	ldr	w2, [x5]
+	cbnz	w2, .L1784
+	cmp	w0, w6
+	beq	.L1784
+	add	x2, x19, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	strh	w0, [x2,1392]
+.L1784:
+	mov	w0, 0
+.L1785:
+	cmp	w0, w1
+	beq	.L1833
+	add	x5, x19, :lo12:.LANCHOR2
+	sxtw	x2, w0
+	lsl	x6, x2, 2
+	lsl	x2, x2, 1
+	add	w0, w0, 1
+	ldr	x9, [x5,1224]
+	sxth	w0, w0
+	add	x10, x9, x6
+	ldr	w10, [x10,4]
+	str	w10, [x9,x6]
+	ldr	x5, [x5,1208]
+	add	x6, x5, x2
+	ldrh	w6, [x6,2]
+	strh	w6, [x5,x2]
+	b	.L1785
+.L1833:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w5, [x25,4]
+	ldr	x2, [x0,1224]
+	str	w5, [x2,x7]
+	ldr	x0, [x0,1208]
+	strh	w24, [x0,x8,lsl 1]
+.L1787:
+	tbnz	w1, #31, .L1767
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x0,840]
+	ldrh	w5, [x0,1392]
+	sub	w2, w2, #1
+	sub	w2, w2, w5
+	cmp	w1, w2, sxth
+	bgt	.L1767
+	ldr	x2, [x0,1224]
+	add	w5, w5, 1
+	ldr	w3, [x25,4]
+	strh	w5, [x0,1392]
+	str	w3, [x2,x1,lsl 2]
+	ldr	x0, [x0,1208]
+.L1827:
+	strh	w24, [x0,x1,lsl 1]
+	b	.L1767
+.L1768:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x0, 3896
+	ldrh	w2, [x0,3896]
+	cmp	w2, w22
+	bne	.L1789
+	strh	w24, [x0,3896]
+	ldr	w0, [x25,4]
+	str	w0, [x1,8]
+	b	.L1767
+.L1789:
+	ldrh	w0, [x1,4]
+	cmp	w0, w22
+	beq	.L1790
+	mov	w1, 1
+	bl	FtlFreeSysBlkQueueIn
+.L1790:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w2, [x25,4]
+	add	x0, x1, 3896
+	ldr	w5, [x0,8]
+	cmp	w5, w2
+	bcs	.L1791
+	ldrh	w2, [x1,3896]
+	strh	w2, [x0,4]
+	strh	w24, [x1,3896]
+	ldr	w1, [x25,4]
+	str	w1, [x0,8]
+	b	.L1767
+.L1791:
+	strh	w24, [x0,4]
+	b	.L1767
+.L1764:
+	add	x0, x28, :lo12:.LANCHOR0
+	ldrb	w1, [x0,136]
+	mov	w0, w24
+	cbz	w1, .L1792
+.L1828:
+	mov	w1, 0
+.L1792:
+	bl	FtlFreeSysBlkQueueIn
+.L1767:
+	add	x23, x23, 1
+	b	.L1759
+.L1758:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L1754
+.L1795:
+	ldr	x2, [x1,1192]
+	ldrh	w0, [x2]
+	cbz	w0, .L1797
+.L1800:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	x2, [x1,1208]
+	ldrh	w0, [x2]
+	cbz	w0, .L1798
+	b	.L1821
+.L1797:
+	ldrh	w3, [x1,3908]
+	cbz	w3, .L1800
+	ldr	w1, [x1,848]
+.L1801:
+	cmp	w0, w1
+	bcs	.L1800
+	ldrh	w3, [x2,w0,sxtw 1]
+	cbz	w3, .L1802
+	mov	w6, w0
+.L1803:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w2, [x1,848]
+	cmp	w0, w2
+	bcs	.L1800
+	sxtw	x5, w0
+	sub	w2, w0, w6
+	ldr	x4, [x1,1192]
+	lsl	x3, x5, 1
+	sxtw	x2, w2
+	add	w0, w0, 1
+	ldrh	w7, [x4,x3]
+	sxth	w0, w0
+	strh	w7, [x4,x2,lsl 1]
+	ldr	x4, [x1,1256]
+	ldr	w5, [x4,x5,lsl 2]
+	str	w5, [x4,x2,lsl 2]
+	ldr	x1, [x1,1192]
+	strh	wzr, [x1,x3]
+	b	.L1803
+.L1802:
+	add	w0, w0, 1
+	sxth	w0, w0
+	b	.L1801
+.L1798:
+	ldrh	w3, [x1,1392]
+	cbz	w3, .L1821
+	ldrh	w1, [x1,840]
+.L1806:
+	cmp	w0, w1
+	mov	w6, w0
+	bge	.L1821
+	ldrh	w3, [x2,w0,sxtw 1]
+	cbz	w3, .L1807
+.L1808:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x1,840]
+	cmp	w0, w2
+	bge	.L1821
+	sxtw	x5, w0
+	sub	w2, w0, w6
+	ldr	x4, [x1,1208]
+	lsl	x3, x5, 1
+	sxtw	x2, w2
+	add	w0, w0, 1
+	ldrh	w7, [x4,x3]
+	sxth	w0, w0
+	strh	w7, [x4,x2,lsl 1]
+	ldr	x4, [x1,1224]
+	ldr	w5, [x4,x5,lsl 2]
+	str	w5, [x4,x2,lsl 2]
+	ldr	x1, [x1,1208]
+	strh	wzr, [x1,x3]
+	b	.L1808
+.L1807:
+	add	w0, w0, 1
+	sxth	w0, w0
+	b	.L1806
+.L1821:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FtlScanSysBlk, .-FtlScanSysBlk
+	.align	2
+	.global	FtlLoadEctTbl
+	.type	FtlLoadEctTbl, %function
+FtlLoadEctTbl:
+	stp	x29, x30, [sp, -32]!
+	mov	w0, 64
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x19,1144]
+	ldr	x2, [x19,1160]
+	bl	FtlVendorPartRead
+	ldr	x0, [x19,1160]
+	ldr	w1, [x0]
+	mov	w0, 17221
+	movk	w0, 0x4254, lsl 16
+	cmp	w1, w0
+	beq	.L1835
+	adrp	x0, .LC45
+	adrp	x1, .LC46
+	add	x1, x1, :lo12:.LC46
+	add	x0, x0, :lo12:.LC45
+	bl	printk
+	ldrh	w2, [x19,1144]
+	mov	w1, 0
+	ldr	x0, [x19,1160]
+	lsl	w2, w2, 9
+	bl	ftl_memset
+.L1835:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlLoadEctTbl, .-FtlLoadEctTbl
+	.align	2
+	.global	ftl_set_blk_mode
+	.type	ftl_set_blk_mode, %function
+ftl_set_blk_mode:
+	stp	x29, x30, [sp, -16]!
+	uxth	w0, w0
+	add	x29, sp, 0
+	cbz	w1, .L1837
+	bl	ftl_set_blk_mode.part.17
+	b	.L1836
+.L1837:
+	adrp	x1, .LANCHOR0+16
+	ubfx	x2, x0, 5, 11
+	lsl	x2, x2, 2
+	ldr	x3, [x1,#:lo12:.LANCHOR0+16]
+	mov	w1, 1
+	lsl	w0, w1, w0
+	ldr	w1, [x3,x2]
+	bic	w0, w1, w0
+	str	w0, [x3,x2]
+.L1836:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_set_blk_mode, .-ftl_set_blk_mode
+	.align	2
+	.global	ftl_get_blk_mode
+	.type	ftl_get_blk_mode, %function
+ftl_get_blk_mode:
+	adrp	x1, .LANCHOR0+16
+	uxth	w0, w0
+	ubfx	x2, x0, 5, 11
+	ldr	x1, [x1,#:lo12:.LANCHOR0+16]
+	ldr	w1, [x1,x2,lsl 2]
+	lsr	w0, w1, w0
+	and	w0, w0, 1
+	ret
+	.size	ftl_get_blk_mode, .-ftl_get_blk_mode
+	.align	2
+	.global	FtlMapTblRecovery
+	.type	FtlMapTblRecovery, %function
+FtlMapTblRecovery:
+	stp	x29, x30, [sp, -128]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	adrp	x21, .LANCHOR2
+	ldr	x0, [x0,40]
+	mov	w26, 0
+	str	x0, [x29,120]
+	ldrh	w23, [x19,6]
+	ldrh	w0, [x19,8]
+	str	w0, [x29,116]
+	lsl	w2, w23, 2
+	ldr	x0, [x29,120]
+	ldr	x22, [x19,16]
+	ldr	x25, [x19,24]
+	bl	ftl_memset
+	str	wzr, [x19,52]
+	add	x1, x21, :lo12:.LANCHOR2
+	str	wzr, [x19,48]
+	add	x6, x1, 1408
+	mov	x27, x1
+	mov	x24, x6
+	ldr	x0, [x1,1048]
+	ldr	x20, [x1,1112]
+	str	x0, [x1,1416]
+	mov	w0, -1
+	str	x20, [x1,1424]
+	strh	w0, [x19]
+	strh	w0, [x19,2]
+	mov	w0, 1
+	str	w0, [x19,56]
+	ldr	w0, [x29,116]
+	sub	w0, w0, #1
+	str	w0, [x29,112]
+.L1841:
+	ldr	w0, [x29,116]
+	cmp	w26, w0
+	bge	.L1858
+	ldr	w0, [x29,112]
+	sxtw	x28, w26
+	cmp	w26, w0
+	bne	.L1842
+	lsl	x0, x28, 1
+	mov	w1, 1
+	add	x24, x22, x0
+	ldrh	w0, [x22,x0]
+	bl	FtlGetLastWrittenPage
+	strh	w26, [x19]
+	sxth	w27, w0
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+	add	x26, x21, :lo12:.LANCHOR2
+	add	w27, w27, 1
+	add	x26, x26, 1408
+	ldr	w0, [x25,x28,lsl 2]
+	mov	w25, 0
+	str	w0, [x19,48]
+.L1843:
+	cmp	w25, w27
+	bge	.L1858
+	ldrh	w0, [x24]
+	mov	w1, 1
+	mov	w2, w1
+	orr	w0, w25, w0, lsl 10
+	str	w0, [x26,4]
+	mov	x0, x26
+	bl	FlashReadPages
+	ldr	w0, [x26]
+	cmn	w0, #1
+	beq	.L1844
+	ldrh	w0, [x20,8]
+	cmp	w0, w23
+	bcs	.L1845
+	ldrh	w2, [x20]
+	ldrh	w1, [x19,4]
+	cmp	w2, w1
+	bne	.L1845
+	ubfiz	x0, x0, 2, 16
+	ldr	x2, [x29,120]
+	ldr	w1, [x26,4]
+	str	w1, [x2,x0]
+	b	.L1845
+.L1844:
+	ldrh	w0, [x24]
+	strh	w0, [x19,60]
+.L1845:
+	add	w25, w25, 1
+	sxth	w25, w25
+	b	.L1843
+.L1858:
+	add	x20, x21, :lo12:.LANCHOR2
+	add	x0, x20, 3752
+	cmp	x19, x0
+	bne	.L1848
+	b	.L1885
+.L1842:
+	ldr	x0, [x27,1048]
+	lsl	x1, x28, 1
+	str	x0, [x24,8]
+	add	x28, x22, x1
+	ldrh	w0, [x27,820]
+	ldrh	w1, [x22,x1]
+	sub	w0, w0, #1
+	orr	w0, w0, w1, lsl 10
+	mov	w1, 1
+	str	w0, [x24,4]
+	mov	w2, w1
+	mov	x0, x24
+	bl	FlashReadPages
+	ldr	w0, [x24]
+	cmn	w0, #1
+	beq	.L1872
+	ldrh	w1, [x20]
+	mov	w3, 0
+	ldrh	w0, [x19,4]
+	cmp	w1, w0
+	bne	.L1882
+	ldrh	w0, [x20,8]
+	mov	w1, 64245
+	cmp	w0, w1
+	bne	.L1882
+.L1850:
+	ldrh	w0, [x27,820]
+	sub	w0, w0, #1
+	cmp	w3, w0
+	bge	.L1853
+	ldr	x0, [x27,1048]
+	sbfiz	x2, x3, 3, 32
+	ldrh	w1, [x0,x2]
+	cmp	w1, w23
+	bcs	.L1851
+	add	x2, x0, x2
+	ubfiz	x1, x1, 2, 16
+	ldr	w0, [x2,4]
+	ldr	x2, [x29,120]
+	str	w0, [x2,x1]
+.L1851:
+	add	w3, w3, 1
+	sxth	w3, w3
+	b	.L1850
+.L1872:
+	mov	w3, 0
+.L1882:
+	ldrh	w0, [x27,820]
+	cmp	w3, w0
+	bge	.L1853
+	ldrh	w0, [x28]
+	mov	w1, 1
+	mov	w2, w1
+	str	x3, [x29,104]
+	orr	w0, w3, w0, lsl 10
+	str	w0, [x24,4]
+	mov	x0, x24
+	bl	FlashReadPages
+	ldr	w0, [x24]
+	ldr	x3, [x29,104]
+	cmn	w0, #1
+	beq	.L1854
+	ldrh	w1, [x20,8]
+	cmp	w1, w23
+	bcs	.L1854
+	ldrh	w2, [x20]
+	ldrh	w0, [x19,4]
+	cmp	w2, w0
+	bne	.L1854
+	ubfiz	x1, x1, 2, 16
+	ldr	x2, [x29,120]
+	ldr	w0, [x24,4]
+	str	w0, [x2,x1]
+.L1854:
+	add	w3, w3, 1
+	sxth	w3, w3
+	b	.L1882
+.L1853:
+	add	w4, w26, 1
+	sxth	w26, w4
+	b	.L1841
+.L1870:
+	ubfiz	x23, x24, 2, 32
+	ldr	x0, [x20,1248]
+	ldr	w1, [x0,x23]
+	sub	w2, w1, #1
+	cmn	w2, #3
+	bls	.L1886
+.L1863:
+	add	w24, w24, 1
+.L1861:
+	ldrh	w0, [x20,856]
+	cmp	w24, w0
+	bcc	.L1870
+.L1848:
+	mov	x0, x19
+	add	x21, x21, :lo12:.LANCHOR2
+	bl	ftl_free_no_use_map_blk
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x21,820]
+	cmp	w1, w0
+	bne	.L1860
+	mov	x0, x19
+	bl	ftl_map_blk_alloc_new_blk
+	b	.L1860
+.L1885:
+	ldrh	w0, [x20,860]
+	cbz	w0, .L1848
+	adrp	x25, .LC47
+	mov	w24, 0
+	add	x27, x20, 1408
+	add	x25, x25, :lo12:.LC47
+	b	.L1861
+.L1886:
+	ldr	x2, [x20,1240]
+	ldr	w2, [x2,x23]
+	cmp	w1, w2
+	beq	.L1863
+	ldr	x1, [x20,1048]
+	ldr	x26, [x20,1112]
+	str	x1, [x27,8]
+	mov	w1, 1
+	str	x26, [x27,16]
+	mov	w2, w1
+	ldr	w0, [x0,x23]
+	str	w0, [x27,4]
+	mov	x0, x27
+	bl	FlashReadPages
+	ldr	w0, [x27]
+	cmn	w0, #1
+	beq	.L1863
+	ldrh	w1, [x26]
+	ldrh	w0, [x20,3756]
+	cmp	w1, w0
+	bne	.L1863
+	ldr	x0, [x20,1240]
+	ldr	w3, [x26,4]
+	ldr	w1, [x0,x23]
+	str	w1, [x27,4]
+	ldr	w0, [x0,x23]
+	cbnz	w0, .L1865
+	str	w0, [x26,4]
+	b	.L1866
+.L1865:
+	mov	w1, 1
+	mov	x0, x27
+	mov	w2, w1
+	str	x3, [x29,120]
+	bl	FlashReadPages
+	ldr	x3, [x29,120]
+.L1866:
+	ldr	w4, [x26,4]
+	cmp	w3, w4
+	bls	.L1863
+	ldr	x1, [x20,1248]
+	mov	x0, x25
+	ldr	x2, [x20,1240]
+	ldr	w1, [x1,x23]
+	ldr	w2, [x2,x23]
+	bl	printk
+	ldr	x0, [x20,1248]
+	ldr	w1, [x0,x23]
+	ldr	x0, [x20,1240]
+	str	w1, [x0,x23]
+	mov	w1, 0
+	ldr	x0, [x20,1248]
+	ldrh	w3, [x20,3908]
+	ldr	w2, [x0,x23]
+	ubfx	x2, x2, 10, 16
+.L1867:
+	cmp	w1, w3
+	bge	.L1887
+	ldrh	w0, [x22,w1,sxtw 1]
+	cmp	w0, w2
+	beq	.L1863
+	add	w1, w1, 1
+	sxth	w1, w1
+	b	.L1867
+.L1887:
+	ldr	w0, [x20,848]
+	cmp	w3, w0
+	bcs	.L1863
+	ubfiz	x3, x3, 1, 16
+	strh	w2, [x22,x3]
+	ldrh	w0, [x20,3908]
+	add	w0, w0, 1
+	strh	w0, [x20,3908]
+	mov	w0, w2
+	bl	remove_from_free_sys_Queue
+	b	.L1863
+.L1860:
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	mov	x0, x19
+	bl	ftl_map_blk_gc
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	FtlMapTblRecovery, .-FtlMapTblRecovery
+	.align	2
+	.global	FtlLoadVonderInfo
+	.type	FtlLoadVonderInfo, %function
+FtlLoadVonderInfo:
+	adrp	x1, .LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR2
+	stp	x29, x30, [sp, -16]!
+	add	x0, x1, 3824
+	add	x29, sp, 0
+	ldrh	w2, [x1,840]
+	strh	w2, [x0,10]
+	mov	w2, -3962
+	strh	w2, [x0,4]
+	ldrh	w2, [x1,1392]
+	strh	w2, [x0,8]
+	ldrh	w2, [x1,842]
+	strh	w2, [x0,6]
+	ldr	x2, [x1,1208]
+	str	x2, [x0,16]
+	ldr	x2, [x1,1224]
+	str	x2, [x0,24]
+	ldr	x2, [x1,1216]
+	ldr	x1, [x1,1232]
+	str	x1, [x0,40]
+	mov	w1, -1
+	str	x2, [x0,32]
+	strh	w1, [x0,60]
+	bl	FtlMapTblRecovery
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadVonderInfo, .-FtlLoadVonderInfo
+	.align	2
+	.global	FtlL2PDataInit
+	.type	FtlL2PDataInit, %function
+FtlL2PDataInit:
+	stp	x29, x30, [sp, -32]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	add	x19, x20, :lo12:.LANCHOR2
+	ldr	w2, [x19,848]
+	ldr	x0, [x19,1200]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w3, [x19,828]
+	mov	w1, 255
+	ldrh	w2, [x19,858]
+	ldr	x0, [x19,1272]
+	mul	w2, w3, w2
+	bl	ftl_memset
+	mov	w2, 0
+	mov	w4, -1
+.L1890:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrh	w1, [x0,858]
+	cmp	w1, w2
+	bls	.L1892
+	ldr	x3, [x0,1264]
+	ubfiz	x1, x2, 4, 16
+	add	x3, x3, x1
+	str	wzr, [x3,4]
+	ldr	x3, [x0,1264]
+	strh	w4, [x3,x1]
+	ldr	x3, [x0,1264]
+	add	x3, x3, x1
+	ldrh	w1, [x0,828]
+	ldr	x0, [x0,1272]
+	mul	w1, w1, w2
+	add	w2, w2, 1
+	sxtw	x1, w1
+	uxth	w2, w2
+	and	x1, x1, -4
+	add	x0, x0, x1
+	str	x0, [x3,8]
+	b	.L1890
+.L1892:
+	ldr	w3, [x0,848]
+	add	x1, x0, 3752
+	strh	w3, [x0,3762]
+	mov	w3, -3902
+	strh	w3, [x0,3756]
+	mov	w2, -1
+	ldrh	w3, [x0,3908]
+	strh	w3, [x0,3760]
+	ldrh	w3, [x0,856]
+	strh	w3, [x0,3758]
+	ldr	x3, [x0,1192]
+	str	x3, [x0,3768]
+	ldr	x3, [x0,1256]
+	str	x3, [x0,3776]
+	ldr	x3, [x0,1200]
+	strh	w2, [x0,3754]
+	strh	w2, [x0,3752]
+	str	x3, [x0,3784]
+	ldr	x0, [x0,1240]
+	str	x0, [x1,40]
+	strh	w2, [x1,60]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlL2PDataInit, .-FtlL2PDataInit
+	.align	2
+	.global	FtlLoadMapInfo
+	.type	FtlLoadMapInfo, %function
+FtlLoadMapInfo:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlL2PDataInit
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 3752
+	bl	FtlMapTblRecovery
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlLoadMapInfo, .-FtlLoadMapInfo
+	.align	2
+	.global	ftl_sb_update_avl_pages
+	.type	ftl_sb_update_avl_pages, %function
+ftl_sb_update_avl_pages:
+	adrp	x3, .LANCHOR2
+	uxth	w1, w1
+	add	x4, x3, :lo12:.LANCHOR2
+	uxth	w2, w2
+	strh	wzr, [x0,4]
+	mov	w6, 65535
+	ldrh	w4, [x4,748]
+.L1895:
+	cmp	w2, w4
+	bcs	.L1901
+	add	x5, x0, x2, sxtw 1
+	ldrh	w5, [x5,16]
+	cmp	w5, w6
+	beq	.L1896
+	ldrh	w5, [x0,4]
+	add	w5, w5, 1
+	strh	w5, [x0,4]
+.L1896:
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L1895
+.L1901:
+	add	x3, x3, :lo12:.LANCHOR2
+	mov	w6, 65535
+	add	x4, x0, x4, uxth 1
+	ldrh	w5, [x3,818]
+	mov	x3, x0
+.L1898:
+	cmp	x3, x4
+	beq	.L1902
+	ldrh	w2, [x3,16]
+	cmp	w2, w6
+	beq	.L1899
+	ldrh	w2, [x0,4]
+	add	w2, w5, w2
+	sub	w2, w2, #1
+	sub	w2, w2, w1
+	strh	w2, [x0,4]
+.L1899:
+	add	x3, x3, 2
+	b	.L1898
+.L1902:
+	ret
+	.size	ftl_sb_update_avl_pages, .-ftl_sb_update_avl_pages
+	.align	2
+	.global	FtlReUsePrevPpa
+	.type	FtlReUsePrevPpa, %function
+FtlReUsePrevPpa:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w0
+	lsr	x0, x1, 10
+	stp	x21, x22, [sp,32]
+	str	w1, [x29,60]
+	adrp	x21, .LANCHOR2
+	bl	P2V_block_in_plane
+	uxth	w0, w0
+	add	x2, x21, :lo12:.LANCHOR2
+	ubfiz	x22, x0, 1, 16
+	ldr	x3, [x2,1184]
+	ldrh	w1, [x3,x22]
+	cbnz	w1, .L1904
+	ldr	x19, [x2,3592]
+	cbz	x19, .L1905
+	ldrh	w3, [x2,3600]
+	mov	x4, -6148914691236517206
+	ldr	x2, [x2,1280]
+	mov	w5, 65535
+	sub	x19, x19, x2
+	asr	x19, x19, 1
+	madd	x19, x4, x19, x19
+	mov	w4, 6
+	uxth	w19, w19
+.L1906:
+	cmp	w1, w3
+	beq	.L1905
+	cmp	w19, w0
+	bne	.L1907
+	add	x21, x21, :lo12:.LANCHOR2
+	mov	w1, w19
+	add	x0, x21, 3592
+	bl	List_remove_node
+	ldrh	w0, [x21,3600]
+	sub	w0, w0, #1
+	strh	w0, [x21,3600]
+	mov	w0, w19
+	bl	INSERT_DATA_LIST
+	ldr	x1, [x21,1184]
+	ldrh	w0, [x1,x22]
+	add	w0, w0, 1
+	strh	w0, [x1,x22]
+	b	.L1905
+.L1907:
+	umull	x19, w19, w4
+	ldrh	w19, [x2,x19]
+	cmp	w19, w5
+	beq	.L1905
+	add	w1, w1, 1
+	uxth	w1, w1
+	b	.L1906
+.L1904:
+	add	w1, w1, 1
+	strh	w1, [x3,x22]
+.L1905:
+	add	x1, x29, 60
+	mov	w0, w20
+	mov	w2, 1
+	bl	log2phys
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlReUsePrevPpa, .-FtlReUsePrevPpa
+	.align	2
+	.global	make_superblock
+	.type	make_superblock, %function
+make_superblock:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	x19, x0
+	strh	wzr, [x0,4]
+	strb	wzr, [x0,7]
+	adrp	x0, .LANCHOR2
+	add	x1, x0, :lo12:.LANCHOR2
+	add	x22, x19, 16
+	mov	x21, 0
+	mov	x20, x0
+	mov	x23, x1
+	mov	w25, -1
+	ldrh	w24, [x1,748]
+.L1913:
+	cmp	w24, w21, uxth
+	bls	.L1924
+	add	x0, x23, 776
+	ldrh	w1, [x19]
+	ldrb	w0, [x0,x21]
+	bl	V2P_block
+	strh	w25, [x22]
+	mov	w26, w0
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L1914
+	strh	w26, [x22]
+	ldrb	w0, [x19,7]
+	add	w0, w0, 1
+	strb	w0, [x19,7]
+.L1914:
+	add	x21, x21, 1
+	add	x22, x22, 2
+	b	.L1913
+.L1924:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrb	w1, [x19,7]
+	strb	wzr, [x19,9]
+	ldrh	w2, [x0,818]
+	mul	w1, w1, w2
+	strh	w1, [x19,4]
+	ldr	w1, [x0,652]
+	cbz	w1, .L1916
+	ldrh	w1, [x19]
+	ldr	x0, [x0,1168]
+	ldrh	w0, [x0,x1,lsl 1]
+	cmp	w0, 59
+	bhi	.L1916
+	mov	w0, 1
+	strb	w0, [x19,9]
+.L1916:
+	adrp	x0, .LANCHOR0+24
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+24]
+	cbz	w0, .L1917
+	mov	w0, 1
+	strb	w0, [x19,9]
+.L1917:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	make_superblock, .-make_superblock
+	.align	2
+	.global	FtlLoadSysInfo
+	.type	FtlLoadSysInfo, %function
+FtlLoadSysInfo:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x23, [sp,48]
+	add	x20, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	add	x21, x20, 1408
+	add	x23, x20, 3896
+	ldr	x0, [x20,1112]
+	ldrh	w2, [x20,756]
+	str	x0, [x21,16]
+	ldr	x0, [x20,1184]
+	lsl	w2, w2, 1
+	str	xzr, [x21,8]
+	bl	ftl_memset
+	ldrh	w0, [x20,3896]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L1926
+.L1934:
+	mov	w19, -1
+	b	.L1927
+.L1926:
+	mov	w1, 1
+	bl	FtlGetLastWrittenPage
+	sxth	w22, w0
+	add	w0, w0, 1
+	strh	w0, [x23,2]
+	mov	w23, 61604
+.L1928:
+	tbnz	w22, #31, .L1933
+	ldrh	w0, [x20,3896]
+	mov	w1, 1
+	mov	w2, w1
+	orr	w0, w22, w0, lsl 10
+	str	w0, [x21,4]
+	ldr	x0, [x20,1048]
+	str	x0, [x21,8]
+	mov	x0, x21
+	bl	FlashReadPages
+	ldr	w0, [x21]
+	cmn	w0, #1
+	beq	.L1929
+	ldr	x0, [x20,1048]
+	ldr	w1, [x0]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	bne	.L1929
+	ldr	x0, [x20,1112]
+	ldrh	w0, [x0]
+	cmp	w0, w23
+	bne	.L1929
+.L1933:
+	add	x20, x19, :lo12:.LANCHOR2
+	mov	w2, 48
+	add	x22, x20, 1408
+	add	x0, x20, 3520
+	adrp	x21, .LANCHOR0
+	ldr	x1, [x22,8]
+	bl	ftl_memcpy
+	ldr	x1, [x22,8]
+	ldrh	w2, [x20,756]
+	ldr	x0, [x20,1184]
+	add	x1, x1, 48
+	lsl	w2, w2, 1
+	bl	ftl_memcpy
+	ldrh	w2, [x20,756]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x3, [x22,8]
+	uxth	x1, w2
+	ldr	x0, [x0,16]
+	add	x1, x1, 24
+	lsr	w2, w2, 3
+	lsr	x1, x1, 1
+	add	w2, w2, 4
+	add	x1, x3, x1, lsl 2
+	bl	ftl_memcpy
+	ldrh	w0, [x20,860]
+	cbz	w0, .L1931
+	ldrh	w0, [x20,756]
+	ldr	x3, [x22,8]
+	lsr	w1, w0, 3
+	ldrh	w2, [x20,856]
+	add	w1, w1, w0, lsl 1
+	ldr	x0, [x20,1248]
+	add	w1, w1, 52
+	lsl	w2, w2, 2
+	and	x1, x1, 65532
+	add	x1, x3, x1
+	bl	ftl_memcpy
+	b	.L1931
+.L1929:
+	sub	w22, w22, #1
+	sxth	w22, w22
+	b	.L1928
+.L1931:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 19539
+	movk	w2, 0x4654, lsl 16
+	ldr	w3, [x0,3520]
+	cmp	w3, w2
+	bne	.L1934
+	ldrb	w3, [x0,3530]
+	ldrh	w2, [x0,770]
+	ldrh	w4, [x0,3528]
+	strh	w4, [x0,3902]
+	cmp	w3, w2
+	bne	.L1934
+	ldrh	w3, [x0,818]
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrh	w2, [x0,824]
+	str	w4, [x0,3912]
+	mul	w3, w3, w4
+	str	w3, [x0,1396]
+	strh	wzr, [x0,3922]
+	mul	w3, w3, w2
+	str	w3, [x21,4048]
+	ldrh	w2, [x0,1302]
+	ldr	w3, [x0,760]
+	strb	wzr, [x0,3926]
+	sub	w2, w3, w2
+	ldrh	w3, [x0,748]
+	sub	w2, w2, w4
+	ldrh	w4, [x0,3534]
+	strh	w4, [x0,3608]
+	udiv	w2, w2, w3
+	ldrh	w3, [x0,3536]
+	strh	w2, [x0,3916]
+	lsr	w5, w3, 6
+	and	w3, w3, 63
+	strb	w3, [x0,3614]
+	ldrb	w3, [x0,3531]
+	strb	w3, [x0,3616]
+	mov	w3, -1
+	strh	w3, [x0,3920]
+	ldrh	w3, [x0,3538]
+	strh	w3, [x0,3656]
+	ldrh	w3, [x0,3540]
+	strh	w5, [x0,3610]
+	lsr	w5, w3, 6
+	and	w3, w3, 63
+	strb	w3, [x0,3662]
+	ldrb	w3, [x0,3532]
+	strb	w3, [x0,3664]
+	ldrh	w3, [x0,3542]
+	strh	w3, [x0,3704]
+	ldrh	w3, [x0,3544]
+	strh	w5, [x0,3658]
+	lsr	w5, w3, 6
+	and	w3, w3, 63
+	strb	wzr, [x0,3928]
+	strb	w3, [x0,3710]
+	strh	w5, [x0,3706]
+	ldrb	w3, [x0,3533]
+	strb	w3, [x0,3712]
+	ldr	w2, [x0,3552]
+	str	w2, [x0,904]
+	ldr	w1, [x0,3560]
+	ldr	w2, [x0,872]
+	str	wzr, [x0,880]
+	str	wzr, [x0,884]
+	cmp	w1, w2
+	str	wzr, [x0,900]
+	str	wzr, [x0,896]
+	str	wzr, [x0,908]
+	str	wzr, [x0,916]
+	str	wzr, [x0,892]
+	bls	.L1935
+	str	w1, [x0,872]
+.L1935:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w1, [x0,3556]
+	ldr	w2, [x0,876]
+	cmp	w1, w2
+	bls	.L1936
+	str	w1, [x0,876]
+.L1936:
+	mov	w0, 65535
+	cmp	w4, w0
+	beq	.L1937
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x0, x0, 3608
+	bl	make_superblock
+.L1937:
+	add	x1, x19, :lo12:.LANCHOR2
+	add	x0, x1, 3656
+	ldrh	w2, [x1,3656]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L1938
+	bl	make_superblock
+.L1938:
+	add	x1, x19, :lo12:.LANCHOR2
+	add	x0, x1, 3704
+	ldrh	w2, [x1,3704]
+	mov	w1, 65535
+	cmp	w2, w1
+	beq	.L1939
+	bl	make_superblock
+.L1939:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w1, 65535
+	add	x0, x19, 3920
+	ldrh	w2, [x19,3920]
+	mov	w19, 0
+	cmp	w2, w1
+	beq	.L1927
+	bl	make_superblock
+.L1927:
+	mov	w0, w19
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlLoadSysInfo, .-FtlLoadSysInfo
+	.align	2
+	.global	SupperBlkListInit
+	.type	SupperBlkListInit, %function
+SupperBlkListInit:
+	stp	x29, x30, [sp, -112]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w23, 6
+	mov	w27, 0
+	ldrh	w2, [x19,758]
+	mov	w22, w27
+	ldr	x0, [x19,1280]
+	mov	w24, -1
+	mov	w25, 32768
+	mul	w2, w2, w23
+	bl	ftl_memset
+	str	xzr, [x19,3592]
+	str	xzr, [x19,3568]
+	str	xzr, [x19,3576]
+	strh	wzr, [x19,3584]
+	strh	wzr, [x19,3600]
+	strh	wzr, [x19,862]
+	mov	w19, w27
+.L1945:
+	add	x0, x21, :lo12:.LANCHOR2
+	ldrh	w1, [x0,756]
+	cmp	w19, w1
+	bge	.L1952
+	mov	w20, 0
+	ldrh	w3, [x0,748]
+	ldrh	w2, [x0,818]
+	mov	w28, w20
+	mov	x26, x0
+.L1953:
+	cmp	w28, w3
+	bge	.L1954
+	add	x0, x26, 776
+	mov	w1, w19
+	str	x2, [x29,96]
+	str	x3, [x29,104]
+	ldrb	w0, [x0,w28,sxtw]
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	ldr	x3, [x29,104]
+	ldr	x2, [x29,96]
+	cbnz	w0, .L1946
+	add	w20, w2, w20
+	sxth	w20, w20
+.L1946:
+	add	w28, w28, 1
+	sxth	w28, w28
+	b	.L1953
+.L1954:
+	cbz	w20, .L1948
+	sdiv	w20, w25, w20
+	sxth	w20, w20
+	b	.L1949
+.L1948:
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x0, [x0,1184]
+	strh	w24, [x0,w19,sxtw 1]
+.L1949:
+	add	x0, x21, :lo12:.LANCHOR2
+	ldr	x1, [x0,1280]
+	smaddl	x1, w19, w23, x1
+	strh	w20, [x1,4]
+	ldrh	w1, [x0,3608]
+	cmp	w19, w1
+	beq	.L1950
+	ldrh	w1, [x0,3656]
+	cmp	w19, w1
+	beq	.L1950
+	ldrh	w1, [x0,3704]
+	cmp	w19, w1
+	beq	.L1950
+	ldr	x0, [x0,1184]
+	ldrh	w0, [x0,w19,sxtw 1]
+	cbnz	w0, .L1951
+	add	w27, w27, 1
+	mov	w0, w19
+	uxth	w27, w27
+	bl	INSERT_FREE_LIST
+	b	.L1950
+.L1951:
+	add	w22, w22, 1
+	mov	w0, w19
+	uxth	w22, w22
+	bl	INSERT_DATA_LIST
+.L1950:
+	add	w19, w19, 1
+	sxth	w19, w19
+	b	.L1945
+.L1952:
+	strh	w22, [x0,3584]
+	strh	w27, [x0,3600]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	SupperBlkListInit, .-SupperBlkListInit
+	.align	2
+	.global	Ftl_save_ext_data
+	.type	Ftl_save_ext_data, %function
+Ftl_save_ext_data:
+	adrp	x0, .LANCHOR2
+	mov	w1, 19539
+	add	x0, x0, :lo12:.LANCHOR2
+	movk	w1, 0x4654, lsl 16
+	stp	x29, x30, [sp, -16]!
+	add	x2, x0, 3968
+	add	x29, sp, 0
+	ldr	w3, [x0,3968]
+	cmp	w3, w1
+	bne	.L1955
+	mov	w1, 72
+	movk	w1, 0x5000, lsl 16
+	str	w1, [x2,4]
+	adrp	x1, .LANCHOR4
+	add	x1, x1, :lo12:.LANCHOR4
+	ldr	w3, [x1,128]
+	ldr	w1, [x1,132]
+	str	w1, [x2,92]
+	ldr	w1, [x0,880]
+	str	w1, [x2,8]
+	ldr	w1, [x0,884]
+	str	w1, [x2,12]
+	ldr	w1, [x0,900]
+	str	w1, [x2,16]
+	ldr	w1, [x0,896]
+	str	w1, [x2,20]
+	ldr	w1, [x0,908]
+	str	w1, [x2,28]
+	ldr	w1, [x0,912]
+	str	w1, [x2,32]
+	ldr	w1, [x0,888]
+	str	w1, [x2,36]
+	ldr	w1, [x0,892]
+	str	w1, [x2,40]
+	ldr	w1, [x0,916]
+	str	w1, [x2,44]
+	ldr	w1, [x0,920]
+	str	w1, [x2,48]
+	ldr	w1, [x0,868]
+	ldr	w0, [x0,864]
+	str	w1, [x2,60]
+	mov	w1, 1
+	str	w0, [x2,64]
+	mov	w0, 0
+	str	w3, [x2,88]
+	bl	FtlVendorPartWrite
+.L1955:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	Ftl_save_ext_data, .-Ftl_save_ext_data
+	.align	2
+	.global	FtlEctTblFlush
+	.type	FtlEctTblFlush, %function
+FtlEctTblFlush:
+	adrp	x2, .LANCHOR2
+	mov	w1, 32
+	add	x3, x2, :lo12:.LANCHOR2
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w4, [x3,652]
+	cbz	w4, .L1958
+	ldr	w3, [x3,920]
+	cmp	w3, 29
+	mov	w3, 4
+	csel	w1, w1, w3, hi
+.L1958:
+	adrp	x3, .LANCHOR4
+	add	x3, x3, :lo12:.LANCHOR4
+	ldrh	w4, [x3,136]
+	cmp	w4, 31
+	bhi	.L1959
+	add	w4, w4, 1
+	mov	w1, 1
+	strh	w4, [x3,136]
+.L1959:
+	cbnz	w0, .L1960
+	add	x0, x2, :lo12:.LANCHOR2
+	ldr	x3, [x0,1160]
+	ldr	w0, [x3,20]
+	add	w1, w1, w0
+	ldr	w0, [x3,16]
+	cmp	w0, w1
+	bcc	.L1961
+.L1960:
+	add	x2, x2, :lo12:.LANCHOR2
+	ldr	x0, [x2,1160]
+	ldr	w1, [x0,16]
+	str	w1, [x0,20]
+	mov	w1, 17221
+	movk	w1, 0x4254, lsl 16
+	str	w1, [x0]
+	ldr	x0, [x2,1160]
+	ldrh	w1, [x2,1144]
+	str	wzr, [x0,4]
+	lsl	w3, w1, 9
+	str	w3, [x0,12]
+	ldr	w3, [x0,8]
+	ldr	x2, [x2,1160]
+	add	w3, w3, 1
+	str	w3, [x0,8]
+	mov	w0, 64
+	bl	FtlVendorPartWrite
+	bl	Ftl_save_ext_data
+.L1961:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlEctTblFlush, .-FtlEctTblFlush
+	.align	2
+	.global	Ftl_load_ext_data
+	.type	Ftl_load_ext_data, %function
+Ftl_load_ext_data:
+	stp	x29, x30, [sp, -48]!
+	mov	w1, 1
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x21, [sp,32]
+	add	x20, x19, :lo12:.LANCHOR2
+	add	x21, x20, 3968
+	mov	x2, x21
+	bl	FtlVendorPartRead
+	ldr	w1, [x20,3968]
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	cmp	w1, w0
+	beq	.L1966
+	mov	x0, x21
+	mov	w1, 0
+	mov	w2, 512
+	bl	ftl_memset
+	mov	w0, 19539
+	movk	w0, 0x4654, lsl 16
+	str	w0, [x20,3968]
+.L1966:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 19539
+	movk	w2, 0x4654, lsl 16
+	adrp	x20, .LANCHOR4
+	ldr	w3, [x0,3968]
+	cmp	w3, w2
+	bne	.L1967
+	add	x2, x20, :lo12:.LANCHOR4
+	ldr	w3, [x0,4056]
+	ldr	w1, [x0,4028]
+	str	w1, [x0,868]
+	str	w3, [x2,128]
+	ldr	w3, [x0,4060]
+	str	w3, [x2,132]
+	ldr	w2, [x0,3976]
+	str	w2, [x0,880]
+	ldr	w2, [x0,3980]
+	str	w2, [x0,884]
+	ldr	w2, [x0,3984]
+	str	w2, [x0,900]
+	ldr	w2, [x0,3988]
+	str	w2, [x0,896]
+	ldr	w2, [x0,3996]
+	str	w2, [x0,908]
+	ldr	w2, [x0,4000]
+	str	w2, [x0,912]
+	ldr	w2, [x0,4004]
+	str	w2, [x0,888]
+	ldr	w2, [x0,4008]
+	str	w2, [x0,892]
+	ldr	w2, [x0,4012]
+	str	w2, [x0,916]
+	ldr	w2, [x0,4016]
+	str	w2, [x0,920]
+.L1967:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 34661
+	movk	w1, 0x1234, lsl 16
+	ldr	w2, [x0,4036]
+	str	wzr, [x0,864]
+	cmp	w2, w1
+	bne	.L1968
+	mov	w1, 1
+	str	w1, [x0,652]
+	adrp	x0, .LC45
+	adrp	x1, .LC48
+	add	x0, x0, :lo12:.LC45
+	add	x1, x1, :lo12:.LC48
+	bl	printk
+.L1968:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR4
+	ldrh	w2, [x0,808]
+	ldr	w3, [x0,904]
+	ldr	w1, [x0,908]
+	ldrh	w0, [x0,756]
+	madd	w1, w2, w3, w1
+	udiv	w0, w1, w0
+	str	w0, [x20,140]
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	Ftl_load_ext_data, .-Ftl_load_ext_data
+	.align	2
+	.global	update_multiplier_value
+	.type	update_multiplier_value, %function
+update_multiplier_value:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w20, w0
+	adrp	x0, .LANCHOR2
+	add	x1, x0, :lo12:.LANCHOR2
+	str	x25, [sp,64]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x22, 0
+	mov	x21, x0
+	ldrh	w24, [x1,748]
+	mov	w19, w22
+	ldrh	w25, [x1,818]
+	mov	x23, x1
+.L1970:
+	cmp	w24, w22, uxth
+	bls	.L1977
+	add	x0, x23, 776
+	mov	w1, w20
+	ldrb	w0, [x0,x22]
+	bl	V2P_block
+	bl	FtlBbmIsBadBlock
+	cbnz	w0, .L1971
+	add	w19, w19, w25
+	uxth	w19, w19
+.L1971:
+	add	x22, x22, 1
+	b	.L1970
+.L1977:
+	cbz	w19, .L1973
+	mov	w0, 32768
+	sdiv	w19, w0, w19
+.L1973:
+	add	x0, x21, :lo12:.LANCHOR2
+	mov	w1, 6
+	umull	x20, w20, w1
+	ldr	x0, [x0,1280]
+	add	x20, x0, x20
+	mov	w0, 0
+	strh	w19, [x20,4]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	update_multiplier_value, .-update_multiplier_value
+	.align	2
+	.global	GetFreeBlockMinEraseCount
+	.type	GetFreeBlockMinEraseCount, %function
+GetFreeBlockMinEraseCount:
+	adrp	x2, .LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR2
+	ldr	x1, [x2,3592]
+	mov	w0, w1
+	cbz	x1, .L1979
+	ldr	x0, [x2,1280]
+	sub	x1, x1, x0
+	mov	x0, -6148914691236517206
+	asr	x1, x1, 1
+	madd	x1, x0, x1, x1
+	ldr	x0, [x2,1168]
+	and	x1, x1, 65535
+	ldrh	w0, [x0,x1,lsl 1]
+.L1979:
+	ret
+	.size	GetFreeBlockMinEraseCount, .-GetFreeBlockMinEraseCount
+	.align	2
+	.global	GetFreeBlockMaxEraseCount
+	.type	GetFreeBlockMaxEraseCount, %function
+GetFreeBlockMaxEraseCount:
+	adrp	x2, .LANCHOR2
+	uxth	w4, w0
+	add	x5, x2, :lo12:.LANCHOR2
+	ldr	x1, [x5,3592]
+	mov	w0, w1
+	cbz	x1, .L1982
+	ldrh	w3, [x5,3600]
+	mov	w0, 7
+	mov	w6, 6
+	mov	w7, 65535
+	mul	w3, w3, w0
+	ldr	x0, [x5,1280]
+	asr	w3, w3, 3
+	cmp	w4, w3
+	sub	x1, x1, x0
+	csel	w4, w3, w4, gt
+	asr	x1, x1, 1
+	mov	x3, -6148914691236517206
+	madd	x1, x3, x1, x1
+	mov	w3, 0
+	uxth	w1, w1
+.L1984:
+	cmp	w3, w4
+	beq	.L1987
+	umull	x5, w1, w6
+	ldrh	w5, [x0,x5]
+	cmp	w5, w7
+	bne	.L1985
+.L1987:
+	add	x2, x2, :lo12:.LANCHOR2
+	ubfiz	x1, x1, 1, 16
+	ldr	x0, [x2,1168]
+	ldrh	w0, [x0,x1]
+	b	.L1982
+.L1985:
+	add	w3, w3, 1
+	mov	w1, w5
+	uxth	w3, w3
+	b	.L1984
+.L1982:
+	ret
+	.size	GetFreeBlockMaxEraseCount, .-GetFreeBlockMaxEraseCount
+	.align	2
+	.global	FtlPrintInfo2buf
+	.type	FtlPrintInfo2buf, %function
+FtlPrintInfo2buf:
+	stp	x29, x30, [sp, -112]!
+	adrp	x1, .LC49
+	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	adrp	x25, .LANCHOR0
+	add	x1, x1, :lo12:.LC49
+	add	x25, x25, :lo12:.LANCHOR0
+	str	x27, [sp,80]
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	mov	x23, x0
+	bl	strcpy
+	add	x20, x23, 12
+	ldr	w2, [x25,4016]
+	adrp	x1, .LC50
+	adrp	x24, .LANCHOR2
+	mov	x0, x20
+	add	x1, x1, :lo12:.LC50
+	add	x22, x24, :lo12:.LANCHOR2
+	bl	sprintf
+	add	x20, x20, x0, sxtw
+	adrp	x1, .LC51
+	mov	x0, x20
+	ldr	w2, [x22,836]
+	add	x1, x1, :lo12:.LC51
+	bl	sprintf
+	add	x20, x20, x0, sxtw
+	adrp	x0, .LANCHOR1+3064
+	ldr	w0, [x0,#:lo12:.LANCHOR1+3064]
+	cmp	w0, 1
+	beq	.L1990
+	sub	w0, w20, w23
+	b	.L1991
+.L1990:
+	add	x0, x29, 96
+	add	x1, x29, 100
+	add	x2, x29, 104
+	add	x3, x29, 108
+	adrp	x19, .LANCHOR4
+	bl	NandcGetTimeCfg
+	add	x19, x19, :lo12:.LANCHOR4
+	ldr	w4, [x29,104]
+	adrp	x1, .LC52
+	ldr	w5, [x29,108]
+	add	x1, x1, :lo12:.LC52
+	ldr	w3, [x29,100]
+	mov	x0, x20
+	ldr	w2, [x29,96]
+	bl	sprintf
+	add	x21, x20, x0, sxtw
+	adrp	x1, .LC53
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC53
+	add	x21, x21, 10
+	bl	strcpy
+	ldr	w2, [x22,1396]
+	adrp	x1, .LC54
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC54
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,3892]
+	adrp	x1, .LC55
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC55
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,900]
+	adrp	x1, .LC56
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC56
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,888]
+	adrp	x1, .LC57
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC57
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,884]
+	adrp	x1, .LC58
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC58
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,892]
+	adrp	x1, .LC59
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC59
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,896]
+	adrp	x1, .LC60
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC60
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,880]
+	adrp	x1, .LC61
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC61
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x19,128]
+	adrp	x1, .LC62
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC62
+	lsr	w2, w2, 11
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x19,132]
+	adrp	x1, .LC63
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC63
+	lsr	w2, w2, 11
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,872]
+	adrp	x1, .LC64
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC64
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,876]
+	adrp	x1, .LC65
+	add	x1, x1, :lo12:.LC65
+	mov	x0, x21
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	bl	FtlBbtCalcTotleCnt
+	uxth	w3, w0
+	ldrh	w2, [x22,1302]
+	adrp	x1, .LC66
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC66
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3600]
+	adrp	x1, .LC67
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC67
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,904]
+	adrp	x1, .LC68
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC68
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,908]
+	adrp	x1, .LC69
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC69
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x19,140]
+	adrp	x1, .LC70
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC70
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,912]
+	adrp	x1, .LC71
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC71
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,916]
+	adrp	x1, .LC72
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC72
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,920]
+	adrp	x1, .LC73
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC73
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3550]
+	adrp	x1, .LC74
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC74
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3548]
+	adrp	x1, .LC75
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC75
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x25,4048]
+	adrp	x1, .LC76
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC76
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,852]
+	adrp	x1, .LC77
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC77
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,744]
+	adrp	x1, .LC78
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC78
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,1470]
+	adrp	x1, .LC79
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC79
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,756]
+	adrp	x1, .LC80
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC80
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3916]
+	adrp	x1, .LC81
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC81
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w2, [x22,760]
+	adrp	x1, .LC82
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC82
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3896]
+	adrp	x1, .LC83
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC83
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,1296]
+	adrp	x1, .LC84
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC84
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3610]
+	adrp	x1, .LC85
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC85
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3614]
+	adrp	x1, .LC86
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC86
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3608]
+	adrp	x1, .LC87
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC87
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3616]
+	adrp	x1, .LC88
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC88
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3612]
+	adrp	x1, .LC89
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC89
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w3, [x22,3608]
+	adrp	x1, .LC90
+	ldr	x2, [x22,1184]
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC90
+	ldrh	w2, [x2,x3,lsl 1]
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3658]
+	adrp	x1, .LC91
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC91
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3662]
+	adrp	x1, .LC92
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC92
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3656]
+	adrp	x1, .LC93
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC93
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3664]
+	adrp	x1, .LC94
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC94
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3660]
+	adrp	x1, .LC95
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC95
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w3, [x22,3656]
+	adrp	x1, .LC96
+	ldr	x2, [x22,1184]
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC96
+	ldrh	w2, [x2,x3,lsl 1]
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3706]
+	adrp	x1, .LC97
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC97
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3710]
+	adrp	x1, .LC98
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC98
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3704]
+	adrp	x1, .LC99
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC99
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3712]
+	adrp	x1, .LC100
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC100
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3708]
+	adrp	x1, .LC101
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC101
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3922]
+	adrp	x1, .LC102
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC102
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3926]
+	adrp	x1, .LC103
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC103
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3920]
+	adrp	x1, .LC104
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC104
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrb	w2, [x22,3928]
+	adrp	x1, .LC105
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC105
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldrh	w2, [x22,3924]
+	adrp	x1, .LC106
+	mov	x0, x21
+	add	x1, x1, :lo12:.LC106
+	bl	sprintf
+	add	x21, x21, x0, sxtw
+	ldr	w3, [x22,868]
+	adrp	x1, .LC107
+	ldr	w2, [x22,652]
+	add	x1, x1, :lo12:.LC107
+	ldr	w4, [x22,4052]
+	mov	x0, x21
+	ldr	w5, [x22,4044]
+	orr	w2, w2, w3, lsl 8
+	ldr	w3, [x22,4048]
+	bl	sprintf
+	add	x19, x21, x0, sxtw
+	ldr	w2, [x22,4040]
+	adrp	x1, .LC108
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC108
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	w2, [x22,4064]
+	adrp	x1, .LC109
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC109
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x22,952]
+	adrp	x1, .LC110
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC110
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x22,954]
+	adrp	x1, .LC111
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC111
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	w2, [x22,940]
+	adrp	x1, .LC112
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC112
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x22,956]
+	adrp	x1, .LC113
+	add	x1, x1, :lo12:.LC113
+	mov	x0, x19
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	bl	GetFreeBlockMinEraseCount
+	uxth	w2, w0
+	adrp	x1, .LC114
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC114
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w0, [x22,3600]
+	bl	GetFreeBlockMaxEraseCount
+	uxth	w2, w0
+	adrp	x1, .LC115
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC115
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w0, [x22,3920]
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L1992
+	ubfiz	x2, x0, 1, 16
+	ldr	x3, [x22,1184]
+	adrp	x1, .LC116
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC116
+	ldrh	w2, [x3,x2]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+.L1992:
+	mov	w0, 0
+	adrp	x22, .LC117
+	mov	w20, 0
+	mov	w27, 65535
+	bl	List_get_gc_head_node
+	mov	w26, 6
+	uxth	w3, w0
+	add	x22, x22, :lo12:.LC117
+.L1994:
+	cmp	w3, w27
+	beq	.L1993
+	add	x21, x24, :lo12:.LANCHOR2
+	ubfiz	x6, x3, 1, 16
+	umull	x25, w3, w26
+	mov	x0, x19
+	mov	w2, w20
+	ldr	x5, [x21,1280]
+	mov	x1, x22
+	ldr	x4, [x21,1184]
+	add	w20, w20, 1
+	ldr	x7, [x21,1168]
+	add	x5, x5, x25
+	ldrh	w4, [x4,x6]
+	ldrh	w5, [x5,4]
+	ldrh	w6, [x7,x6]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x0, [x21,1280]
+	cmp	w20, 16
+	ldrh	w3, [x0,x25]
+	bne	.L1994
+.L1993:
+	add	x1, x24, :lo12:.LANCHOR2
+	adrp	x22, .LC118
+	mov	w20, 0
+	mov	w27, 65535
+	mov	w26, 6
+	add	x22, x22, :lo12:.LC118
+	ldr	x0, [x1,3592]
+	ldr	x3, [x1,1280]
+	sub	x3, x0, x3
+	mov	x0, -6148914691236517206
+	asr	x3, x3, 1
+	madd	x3, x0, x3, x3
+	uxth	w3, w3
+.L1996:
+	cmp	w3, w27
+	beq	.L1995
+	add	x21, x24, :lo12:.LANCHOR2
+	ubfiz	x5, x3, 1, 16
+	umull	x25, w3, w26
+	mov	x0, x19
+	mov	w2, w20
+	ldr	x4, [x21,1280]
+	mov	x1, x22
+	ldr	x6, [x21,1168]
+	add	w20, w20, 1
+	add	x4, x4, x25
+	ldrh	w5, [x6,x5]
+	ldrh	w4, [x4,4]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x0, [x21,1280]
+	cmp	w20, 4
+	ldrh	w3, [x0,x25]
+	bne	.L1996
+.L1995:
+	sub	w0, w19, w23
+.L1991:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FtlPrintInfo2buf, .-FtlPrintInfo2buf
+	.align	2
+	.global	ftl_proc_ftl_read
+	.type	ftl_proc_ftl_read, %function
+ftl_proc_ftl_read:
+	stp	x29, x30, [sp, -32]!
+	adrp	x1, .LC45
+	adrp	x2, .LC119
+	add	x29, sp, 0
+	add	x1, x1, :lo12:.LC45
+	add	x2, x2, :lo12:.LC119
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	bl	sprintf
+	add	x19, x20, x0, sxtw
+	mov	x0, x19
+	bl	FtlPrintInfo2buf
+	add	x0, x19, x0, sxtw
+	sub	w0, w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_proc_ftl_read, .-ftl_proc_ftl_read
+	.align	2
+	.global	GetSwlReplaceBlock
+	.type	GetSwlReplaceBlock, %function
+GetSwlReplaceBlock:
+	stp	x29, x30, [sp, -96]!
+	adrp	x0, .LANCHOR4
+	add	x1, x0, :lo12:.LANCHOR4
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	adrp	x19, .LANCHOR2
+	ldr	w3, [x1,140]
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w2, [x1,920]
+	cmp	w3, w2
+	bcs	.L2001
+	str	wzr, [x1,904]
+	ldrh	w3, [x1,756]
+	ldr	x5, [x1,1168]
+	mov	x1, 0
+.L2002:
+	cmp	w3, w1
+	bls	.L2034
+	add	x4, x19, :lo12:.LANCHOR2
+	ldrh	w6, [x5,x1,lsl 1]
+	add	x1, x1, 1
+	ldr	w2, [x4,904]
+	add	w2, w6, w2
+	str	w2, [x4,904]
+	b	.L2002
+.L2034:
+	add	x2, x19, :lo12:.LANCHOR2
+	add	x4, x0, :lo12:.LANCHOR4
+	ldr	w1, [x2,904]
+	udiv	w3, w1, w3
+	str	w3, [x4,140]
+	ldr	w3, [x2,908]
+	sub	w1, w1, w3
+	ldrh	w3, [x2,808]
+	udiv	w1, w1, w3
+	str	w1, [x2,904]
+	b	.L2004
+.L2001:
+	ldr	w2, [x1,916]
+	cmp	w3, w2
+	bls	.L2004
+	add	w2, w2, 1
+	str	w2, [x1,916]
+	mov	w1, 0
+.L2006:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldrh	w3, [x2,756]
+	cmp	w1, w3
+	bcs	.L2004
+	ubfiz	x3, x1, 1, 32
+	ldr	x4, [x2,1168]
+	add	w1, w1, 1
+	ldrh	w2, [x4,x3]
+	add	w2, w2, 1
+	strh	w2, [x4,x3]
+	b	.L2006
+.L2004:
+	add	x1, x19, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w21, [x1,920]
+	ldr	w23, [x0,140]
+	add	w0, w21, 256
+	cmp	w0, w23
+	bls	.L2009
+	ldr	w2, [x1,916]
+	add	w0, w21, 768
+	cmp	w0, w2
+	bls	.L2009
+	ldr	w0, [x1,652]
+	cbz	w0, .L2012
+	cmp	w21, 30
+	bls	.L2009
+.L2012:
+	mov	w0, 65535
+	b	.L2011
+.L2009:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,3600]
+	add	w0, w0, w0, lsl 1
+	lsr	w0, w0, 2
+	bl	GetFreeBlockMaxEraseCount
+	uxth	w6, w0
+	add	w0, w21, 64
+	cmp	w6, w0
+	bcs	.L2021
+	cmp	w21, 30
+	bhi	.L2012
+.L2021:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	x3, [x1,3568]
+	cbz	x3, .L2012
+	mov	w26, 65535
+	mov	x0, -6148914691236517206
+	ldrh	w9, [x1,756]
+	mov	w20, w26
+	ldr	x7, [x1,1280]
+	mov	w8, w26
+	ldr	x25, [x1,1168]
+	add	x0, x0, 1
+	mov	w1, 0
+	mov	w10, 6
+.L2014:
+	ldrh	w5, [x3]
+	cmp	w5, w8
+	beq	.L2016
+	add	w1, w1, 1
+	uxth	w1, w1
+	cmp	w1, w9
+	bhi	.L2012
+	ldrh	w2, [x3,4]
+	cbz	w2, .L2015
+	sub	x4, x3, x7
+	asr	x4, x4, 1
+	mul	x4, x4, x0
+	uxth	w3, w4
+	and	x4, x4, 65535
+	ldrh	w2, [x25,x4,lsl 1]
+	cmp	w2, w21
+	bls	.L2020
+	cmp	w2, w26
+	bcs	.L2015
+	mov	w26, w2
+	mov	w20, w3
+.L2015:
+	umull	x3, w5, w10
+	add	x3, x7, x3
+	b	.L2014
+.L2020:
+	mov	w20, w3
+.L2016:
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L2012
+	ubfiz	x24, x20, 1, 16
+	ldrh	w22, [x25,x24]
+	cmp	w22, w21
+	bls	.L2018
+	str	x6, [x29,88]
+	bl	GetFreeBlockMinEraseCount
+	ldr	x6, [x29,88]
+	cmp	w21, w0, uxth
+	bcs	.L2018
+	add	x0, x19, :lo12:.LANCHOR2
+	str	w26, [x0,920]
+.L2018:
+	cmp	w22, w23
+	bcs	.L2012
+	add	w0, w22, 128
+	cmp	w6, w0
+	ble	.L2012
+	add	w0, w22, 256
+	cmp	w0, w23
+	bcc	.L2019
+	add	x0, x19, :lo12:.LANCHOR2
+	add	w22, w22, 768
+	ldr	w0, [x0,916]
+	cmp	w22, w0
+	bcs	.L2012
+.L2019:
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x0, .LC120
+	ldrh	w5, [x25,x24]
+	add	x0, x0, :lo12:.LC120
+	mov	w1, w20
+	mov	w2, w23
+	ldr	x4, [x19,1184]
+	ldr	w3, [x19,916]
+	ldrh	w4, [x4,x24]
+	bl	printk
+	mov	w0, 1
+	str	w0, [x19,928]
+	mov	w0, w20
+.L2011:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	GetSwlReplaceBlock, .-GetSwlReplaceBlock
+	.align	2
+	.global	free_data_superblock
+	.type	free_data_superblock, %function
+free_data_superblock:
+	stp	x29, x30, [sp, -16]!
+	uxth	w0, w0
+	mov	w1, 65535
+	cmp	w0, w1
+	add	x29, sp, 0
+	beq	.L2036
+	adrp	x2, .LANCHOR2+1184
+	ubfiz	x1, x0, 1, 16
+	ldr	x2, [x2,#:lo12:.LANCHOR2+1184]
+	strh	wzr, [x2,x1]
+	bl	INSERT_FREE_LIST
+.L2036:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	free_data_superblock, .-free_data_superblock
+	.align	2
+	.global	allocate_data_superblock
+	.type	allocate_data_superblock, %function
+allocate_data_superblock:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w1, [x19,1400]
+	stp	x27, x28, [sp,80]
+	cbnz	w1, .L2038
+	mov	x20, x0
+	add	x23, x19, 3704
+	adrp	x22, .LANCHOR0
+	mov	w24, 7
+	add	x25, x19, 3592
+.L2039:
+	cmp	x20, x23
+	bne	.L2040
+	ldrh	w2, [x19,3600]
+	ldr	w4, [x19,928]
+	lsr	w3, w2, 1
+	add	w1, w3, 1
+	mul	w0, w2, w4
+	add	w1, w1, w0, lsr 2
+	ldr	w0, [x19,652]
+	uxth	w1, w1
+	cbz	w0, .L2041
+	ldr	w0, [x19,920]
+	cmp	w0, 29
+	bhi	.L2041
+	cmp	w0, 2
+	mov	w1, 0
+	bls	.L2042
+	tbz	x2, 0, .L2069
+	cbz	w4, .L2042
+.L2069:
+	mov	w1, w3
+	b	.L2041
+.L2040:
+	ldrb	w0, [x20,8]
+	mov	w1, 0
+	cmp	w0, 1
+	bne	.L2042
+	ldrh	w0, [x19,768]
+	cmp	w0, 1
+	beq	.L2042
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbnz	w0, .L2042
+	ldr	w2, [x19,652]
+	ldrh	w0, [x19,3600]
+	lsr	w1, w0, 3
+	cbz	w2, .L2041
+	ldr	w2, [x19,920]
+	cmp	w2, 1
+	bhi	.L2041
+	mul	w1, w0, w24
+	lsr	w1, w1, 3
+.L2041:
+	cbz	w1, .L2042
+	sub	w1, w1, #1
+	uxth	w1, w1
+.L2042:
+	ldrb	w2, [x20,8]
+	mov	x0, x25
+	bl	List_pop_index_node
+	uxth	w27, w0
+	ldrh	w0, [x19,3600]
+	sub	w0, w0, #1
+	strh	w0, [x19,3600]
+	strh	w27, [x20]
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20,7]
+	cbz	w0, .L2044
+	mov	x0, 0
+	ldrh	w5, [x19,748]
+	mov	w26, w0
+	mov	x3, 56
+	mov	w6, 65535
+	b	.L2045
+.L2044:
+	ubfiz	x27, x27, 1, 16
+	ldr	x0, [x19,1184]
+	mov	w1, -1
+	strh	w1, [x0,x27]
+	b	.L2039
+.L2048:
+	ldr	x4, [x19,1016]
+	madd	x1, x0, x3, x4
+	str	xzr, [x1,16]
+	str	xzr, [x1,8]
+	add	x1, x20, x0, lsl 1
+	ldrh	w1, [x1,16]
+	cmp	w1, w6
+	beq	.L2047
+	umull	x2, w26, w3
+	add	w26, w26, 1
+	lsl	w1, w1, 10
+	add	x2, x4, x2
+	uxth	w26, w26
+	str	w1, [x2,4]
+.L2047:
+	add	x0, x0, 1
+.L2045:
+	cmp	w5, w0, uxth
+	bhi	.L2048
+	add	x0, x19, 3608
+	uxtw	x28, w27
+	cmp	x20, x0
+	bne	.L2049
+	ldr	w1, [x19,652]
+	cbz	w1, .L2049
+	ldr	x1, [x19,1168]
+	ldrh	w1, [x1,x28,lsl 1]
+	cmp	w1, 30
+	bls	.L2049
+	strb	wzr, [x19,3616]
+.L2049:
+	ldrb	w0, [x20,8]
+	cbnz	w0, .L2050
+	lsl	x0, x28, 1
+	ldr	x1, [x19,1168]
+	mov	w2, 2
+	ldrh	w3, [x1,x0]
+	cbz	w3, .L2094
+	ldrh	w2, [x19,808]
+	add	w2, w3, w2
+.L2094:
+	strh	w2, [x1,x0]
+	mov	w1, 0
+	ldr	w0, [x19,904]
+	add	w0, w0, 1
+	str	w0, [x19,904]
+	mov	w0, w27
+	bl	ftl_set_blk_mode
+	b	.L2053
+.L2050:
+	lsl	x0, x28, 1
+	ldr	x2, [x19,1168]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
+	ldr	w0, [x19,908]
+	add	w0, w0, 1
+	str	w0, [x19,908]
+	mov	w0, w27
+	bl	ftl_set_blk_mode.part.17
+.L2053:
+	lsl	x28, x28, 1
+	ldr	x0, [x19,1168]
+	ldr	w1, [x19,916]
+	ldrh	w0, [x0,x28]
+	cmp	w0, w1
+	bls	.L2054
+	str	w0, [x19,916]
+.L2054:
+	ldrh	w1, [x19,808]
+	mov	x3, 56
+	ldr	w2, [x19,904]
+	ldr	w0, [x19,908]
+	madd	w0, w1, w2, w0
+	ldrh	w1, [x19,756]
+	udiv	w0, w0, w1
+	adrp	x1, .LANCHOR4+140
+	str	w0, [x1,#:lo12:.LANCHOR4+140]
+	ldr	x1, [x19,1160]
+	ldr	w0, [x1,16]
+	add	w0, w0, 1
+	str	w0, [x1,16]
+	mov	x0, 0
+.L2055:
+	cmp	w26, w0, uxth
+	bls	.L2096
+	ldr	x1, [x19,1016]
+	madd	x1, x0, x3, x1
+	add	x0, x0, 1
+	ldr	w2, [x1,4]
+	and	w2, w2, -1024
+	str	w2, [x1,4]
+	b	.L2055
+.L2096:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2057
+	ldrb	w0, [x20,8]
+	cmp	w0, 1
+	ldr	x0, [x19,1016]
+	bne	.L2058
+	mov	w1, 0
+	b	.L2095
+.L2058:
+	mov	w1, 1
+.L2095:
+	mov	w2, w26
+	bl	FlashEraseBlocks
+.L2057:
+	ldrb	w1, [x20,8]
+	mov	w2, w26
+	ldr	x0, [x19,1016]
+	bl	FlashEraseBlocks
+	mov	x1, 0
+	mov	x4, 56
+	mov	w2, w1
+.L2059:
+	cmp	w26, w1, uxth
+	bls	.L2097
+	mul	x0, x1, x4
+	ldr	x3, [x19,1016]
+	add	x5, x3, x0
+	ldr	w3, [x3,x0]
+	cmn	w3, #1
+	bne	.L2060
+	ldr	w0, [x5,4]
+	add	w2, w2, 1
+	str	x4, [x29,104]
+	lsr	w0, w0, 10
+	str	x3, [x29,112]
+	str	x1, [x29,120]
+	str	x2, [x29,128]
+	str	x2, [x29,136]
+	bl	FtlBbmMapBadBlock
+	ldr	x1, [x29,120]
+	ldr	x3, [x29,112]
+	ldr	x4, [x29,104]
+	add	x0, x20, x1, lsl 1
+	ldr	x2, [x29,136]
+	strh	w3, [x0,16]
+	ldrb	w0, [x20,7]
+	sub	w0, w0, #1
+	strb	w0, [x20,7]
+.L2060:
+	add	x1, x1, 1
+	b	.L2059
+.L2097:
+	cbz	w2, .L2062
+	mov	w0, w27
+	bl	update_multiplier_value
+	bl	FtlBbmTblFlush
+.L2062:
+	ldrb	w0, [x20,7]
+	cbnz	w0, .L2063
+	ldr	x0, [x19,1184]
+	mov	w1, -1
+	strh	w1, [x0,x28]
+	b	.L2039
+.L2063:
+	add	x21, x21, :lo12:.LANCHOR2
+	strh	wzr, [x20,2]
+	strb	wzr, [x20,6]
+	ldrh	w1, [x21,818]
+	strh	w27, [x20]
+	mul	w0, w0, w1
+	ldr	w1, [x21,872]
+	str	w1, [x20,12]
+	uxth	w0, w0
+	add	w1, w1, 1
+	strh	w0, [x20,4]
+	str	w1, [x21,872]
+	ldr	x1, [x21,1184]
+	ldrh	w2, [x20]
+	strh	w0, [x1,x2,lsl 1]
+.L2038:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	allocate_data_superblock, .-allocate_data_superblock
+	.align	2
+	.global	FtlGcBufInit
+	.type	FtlGcBufInit, %function
+FtlGcBufInit:
+	adrp	x0, .LANCHOR4+144
+	mov	w1, 0
+	adrp	x7, .LANCHOR2
+	mov	w8, 24
+	mov	w9, 1
+	mov	w4, 4
+	str	wzr, [x0,#:lo12:.LANCHOR4+144]
+	mov	w10, 56
+.L2099:
+	add	x2, x7, :lo12:.LANCHOR2
+	adrp	x6, .LANCHOR2
+	ldrh	w0, [x2,748]
+	cmp	w1, w0
+	bcs	.L2103
+	umull	x3, w1, w8
+	ldr	x5, [x2,1104]
+	ldr	x6, [x2,1072]
+	add	x0, x5, x3
+	str	w9, [x0,16]
+	ldrh	w0, [x2,828]
+	mul	w0, w1, w0
+	sdiv	w0, w0, w4
+	add	x0, x6, x0, sxtw 2
+	str	x0, [x5,x3]
+	ldrh	w0, [x2,830]
+	ldr	x6, [x2,1104]
+	ldr	x11, [x2,1128]
+	mul	w0, w1, w0
+	add	x5, x6, x3
+	ldr	x2, [x2,1024]
+	sdiv	w0, w0, w4
+	add	x0, x11, x0, sxtw 2
+	str	x0, [x5,8]
+	umull	x0, w1, w10
+	add	w1, w1, 1
+	add	x0, x2, x0
+	ldr	x2, [x6,x3]
+	uxth	w1, w1
+	str	x2, [x0,8]
+	ldr	x2, [x5,8]
+	str	x2, [x0,16]
+	b	.L2099
+.L2103:
+	mov	w7, 24
+	mov	w4, 4
+.L2101:
+	add	x1, x6, :lo12:.LANCHOR2
+	ldr	w2, [x1,1040]
+	cmp	w0, w2
+	bcs	.L2104
+	umull	x3, w0, w7
+	ldr	x5, [x1,1104]
+	ldr	x8, [x1,1072]
+	add	x2, x5, x3
+	str	wzr, [x2,16]
+	ldrh	w2, [x1,828]
+	mul	w2, w0, w2
+	sdiv	w2, w2, w4
+	add	x2, x8, x2, sxtw 2
+	str	x2, [x5,x3]
+	ldrh	w2, [x1,830]
+	ldr	x5, [x1,1104]
+	ldr	x1, [x1,1128]
+	mul	w2, w0, w2
+	add	x3, x5, x3
+	add	w0, w0, 1
+	sdiv	w2, w2, w4
+	uxth	w0, w0
+	add	x1, x1, x2, sxtw 2
+	str	x1, [x3,8]
+	b	.L2101
+.L2104:
+	ret
+	.size	FtlGcBufInit, .-FtlGcBufInit
+	.align	2
+	.global	FtlVariablesInit
+	.type	FtlVariablesInit, %function
+FtlVariablesInit:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LANCHOR4
+	mov	w1, -1
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrh	w2, [x19,840]
+	strh	w1, [x0,160]
+	mov	w1, -1
+	str	xzr, [x0,152]
+	lsl	w2, w2, 1
+	str	w1, [x0,172]
+	mov	w1, 0
+	str	wzr, [x0,164]
+	str	wzr, [x0,168]
+	ldr	x0, [x19,1208]
+	str	wzr, [x19,652]
+	strh	wzr, [x19,1392]
+	bl	ftl_memset
+	ldrh	w2, [x19,758]
+	mov	w1, 0
+	ldr	x0, [x19,1168]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldrh	w2, [x19,758]
+	mov	w1, 0
+	ldr	x0, [x19,1152]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	add	x0, x19, 3520
+	mov	w1, 0
+	mov	w2, 48
+	bl	ftl_memset
+	mov	w1, 0
+	mov	w2, 512
+	add	x0, x19, 3968
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	bl	FtlL2PDataInit
+	ldr	x19, [sp,16]
+	mov	w0, 0
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlVariablesInit, .-FtlVariablesInit
+	.align	2
+	.global	FtlGcBufFree
+	.type	FtlGcBufFree, %function
+FtlGcBufFree:
+	adrp	x2, .LANCHOR2
+	mov	w3, 0
+	add	x2, x2, :lo12:.LANCHOR2
+	mov	w7, 56
+	mov	w9, 24
+	ldr	w8, [x2,1040]
+	ldr	x5, [x2,1104]
+.L2107:
+	cmp	w3, w1
+	bcs	.L2106
+	umull	x4, w3, w7
+	mov	w2, 0
+	add	x4, x0, x4
+.L2112:
+	cmp	w2, w8
+	bcs	.L2109
+	umull	x6, w2, w9
+	add	x10, x5, x6
+	ldr	x11, [x5,x6]
+	ldr	x6, [x4,8]
+	cmp	x11, x6
+	bne	.L2108
+	str	wzr, [x10,16]
+	b	.L2109
+.L2108:
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L2112
+.L2109:
+	add	w3, w3, 1
+	uxth	w3, w3
+	b	.L2107
+.L2106:
+	ret
+	.size	FtlGcBufFree, .-FtlGcBufFree
+	.align	2
+	.global	FtlGcBufAlloc
+	.type	FtlGcBufAlloc, %function
+FtlGcBufAlloc:
+	adrp	x2, .LANCHOR2
+	mov	w7, 24
+	add	x2, x2, :lo12:.LANCHOR2
+	mov	w8, 1
+	mov	w9, 56
+	ldr	w5, [x2,1040]
+	ldr	x6, [x2,1104]
+	mov	w2, 0
+.L2114:
+	cmp	w2, w1
+	bcs	.L2120
+	mov	w3, 0
+.L2118:
+	cmp	w3, w5
+	bcs	.L2116
+	umull	x4, w3, w7
+	add	x4, x6, x4
+	ldr	w10, [x4,16]
+	cbnz	w10, .L2115
+	umull	x3, w2, w9
+	str	w8, [x4,16]
+	add	x3, x0, x3
+	ldr	x10, [x4]
+	str	x10, [x3,8]
+	ldr	x4, [x4,8]
+	str	x4, [x3,16]
+	b	.L2116
+.L2115:
+	add	w3, w3, 1
+	uxth	w3, w3
+	b	.L2118
+.L2116:
+	add	w2, w2, 1
+	uxth	w2, w2
+	b	.L2114
+.L2120:
+	ret
+	.size	FtlGcBufAlloc, .-FtlGcBufAlloc
+	.align	2
+	.global	IsBlkInGcList
+	.type	IsBlkInGcList, %function
+IsBlkInGcList:
+	adrp	x1, .LANCHOR4+176
+	uxth	w0, w0
+	ldrh	w2, [x1,#:lo12:.LANCHOR4+176]
+	adrp	x1, .LANCHOR2+976
+	ldr	x3, [x1,#:lo12:.LANCHOR2+976]
+	mov	x1, 0
+.L2122:
+	cmp	w2, w1, uxth
+	bls	.L2126
+	add	x1, x1, 1
+	add	x4, x3, x1, lsl 1
+	ldrh	w4, [x4,-2]
+	cmp	w4, w0
+	bne	.L2122
+	mov	w0, 1
+	b	.L2123
+.L2126:
+	mov	w0, 0
+.L2123:
+	ret
+	.size	IsBlkInGcList, .-IsBlkInGcList
+	.align	2
+	.global	FtlGcUpdatePage
+	.type	FtlGcUpdatePage, %function
+FtlGcUpdatePage:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	w19, w0
+	lsr	x0, x19, 10
+	str	x1, [x29,32]
+	str	x2, [x29,40]
+	bl	P2V_block_in_plane
+	adrp	x3, .LANCHOR4
+	ldr	x2, [x29,40]
+	add	x4, x3, :lo12:.LANCHOR4
+	ldr	x1, [x29,32]
+	uxth	w9, w0
+	mov	x6, 0
+	ldrh	w8, [x4,176]
+	adrp	x4, .LANCHOR2
+	add	x5, x4, :lo12:.LANCHOR2
+	ldr	x7, [x5,976]
+.L2128:
+	uxth	w5, w6
+	cmp	w5, w8
+	bcs	.L2132
+	add	x6, x6, 1
+	add	x10, x7, x6, lsl 1
+	ldrh	w10, [x10,-2]
+	cmp	w10, w9
+	bne	.L2128
+.L2132:
+	cmp	w5, w8
+	bne	.L2130
+	ubfiz	x5, x5, 1, 16
+	strh	w0, [x7,x5]
+	add	x0, x3, :lo12:.LANCHOR4
+	ldrh	w5, [x0,176]
+	add	w5, w5, 1
+	strh	w5, [x0,176]
+.L2130:
+	add	x3, x3, :lo12:.LANCHOR4
+	add	x4, x4, :lo12:.LANCHOR2
+	mov	w0, 12
+	ldrh	w5, [x3,178]
+	ldr	x6, [x4,984]
+	umull	x5, w5, w0
+	add	x6, x6, x5
+	str	w1, [x6,4]
+	ldr	x1, [x4,984]
+	add	x0, x1, x5
+	str	w2, [x0,8]
+	str	w19, [x1,x5]
+	ldrh	w0, [x3,178]
+	add	w0, w0, 1
+	strh	w0, [x3,178]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlGcUpdatePage, .-FtlGcUpdatePage
+	.align	2
+	.global	FtlGcPageVarInit
+	.type	FtlGcPageVarInit, %function
+FtlGcPageVarInit:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LANCHOR4
+	mov	w1, 255
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrh	w2, [x19,822]
+	strh	wzr, [x0,176]
+	strh	wzr, [x0,178]
+	lsl	w2, w2, 1
+	ldr	x0, [x19,976]
+	bl	ftl_memset
+	ldrh	w3, [x19,822]
+	mov	w2, 12
+	ldr	x0, [x19,984]
+	mov	w1, 255
+	mul	w2, w3, w2
+	bl	ftl_memset
+	bl	FtlGcBufInit
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcPageVarInit, .-FtlGcPageVarInit
+	.align	2
+	.global	FtlGcScanTempBlk
+	.type	FtlGcScanTempBlk, %function
+FtlGcScanTempBlk:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR1
+	mov	x19, x0
+	add	x0, x20, :lo12:.LANCHOR1
+	str	w1, [x29,152]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	str	x20, [x29,136]
+	ldrh	w26, [x0,3068]
+	mov	w0, 65535
+	cmp	w26, w0
+	beq	.L2157
+	cbnz	w26, .L2136
+	b	.L2137
+.L2157:
+	mov	w26, 0
+.L2136:
+	adrp	x0, .LANCHOR2+818
+	ldr	w1, [x29,152]
+	ldrh	w0, [x0,#:lo12:.LANCHOR2+818]
+	cmp	w1, w0
+	bne	.L2138
+.L2137:
+	bl	FtlGcPageVarInit
+.L2138:
+	mov	w0, -1
+	adrp	x25, .LANCHOR2
+	str	w0, [x29,156]
+	adrp	x0, .LC121
+	add	x0, x0, :lo12:.LC121
+	mov	w22, 0
+	mov	w23, 65535
+	mov	x21, x25
+	mov	x24, x25
+	str	x0, [x29,128]
+.L2151:
+	ldrh	w0, [x19]
+	strb	wzr, [x19,8]
+	cmp	w0, w23
+	beq	.L2158
+.L2140:
+.L2154:
+	add	x0, x25, :lo12:.LANCHOR2
+	mov	x2, x19
+	mov	w20, 0
+	ldrh	w5, [x0,748]
+	ldrh	w8, [x0,830]
+	add	x5, x19, x5, lsl 1
+.L2141:
+	cmp	x2, x5
+	beq	.L2166
+	ldrh	w1, [x2,16]
+	cmp	w1, w23
+	beq	.L2142
+	add	x6, x21, :lo12:.LANCHOR2
+	mov	w0, 56
+	orr	w1, w26, w1, lsl 10
+	mov	w3, 4
+	umull	x0, w20, w0
+	ldr	x7, [x6,992]
+	add	w4, w20, 1
+	add	x7, x7, x0
+	str	w1, [x7,4]
+	ldr	x1, [x6,992]
+	ldr	x6, [x6,1128]
+	add	x0, x1, x0
+	mul	w1, w20, w8
+	uxth	w20, w4
+	str	xzr, [x0,8]
+	sdiv	w1, w1, w3
+	add	x1, x6, x1, sxtw 2
+	str	x1, [x0,16]
+.L2142:
+	add	x2, x2, 2
+	b	.L2141
+.L2166:
+	add	x0, x21, :lo12:.LANCHOR2
+	mov	w1, w20
+	mov	w2, 0
+	mov	x27, 0
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+.L2144:
+	cmp	w20, w27, uxth
+	bls	.L2167
+	mov	x0, 56
+	mul	x28, x27, x0
+	add	x0, x21, :lo12:.LANCHOR2
+	str	x0, [x29,144]
+	ldr	x8, [x0,992]
+	str	x8, [x29,104]
+	add	x1, x8, x28
+	str	x1, [x29,112]
+	ldr	w2, [x1,4]
+	str	x2, [x29,120]
+	lsr	x0, x2, 10
+	bl	P2V_plane
+	uxth	w6, w0
+	ldr	x8, [x29,104]
+	ldr	x2, [x29,120]
+	ldr	w0, [x8,x28]
+	cbnz	w0, .L2145
+	ldr	x1, [x29,112]
+	add	x27, x27, 1
+	ldr	x5, [x1,16]
+	ldrh	w0, [x5]
+	cmp	w0, w23
+	bne	.L2146
+	adrp	x0, .LANCHOR4+168
+	mov	w1, 1
+	str	w1, [x0,#:lo12:.LANCHOR4+168]
+	b	.L2139
+.L2146:
+	mov	w1, w2
+	ldr	w0, [x5,12]
+	ldr	w2, [x5,8]
+	bl	FtlGcUpdatePage
+	b	.L2144
+.L2145:
+	ldr	x0, [x29,128]
+	ldrh	w1, [x19]
+	bl	printk
+	ldr	x0, [x29,144]
+	ldr	w0, [x0,652]
+	cbnz	w0, .L2147
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w0, .L2148
+.L2147:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldrh	w1, [x19]
+	ldr	x0, [x0,1168]
+	ldrh	w0, [x0,x1,lsl 1]
+	cmp	w0, 119
+	bls	.L2149
+.L2148:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x0, [x0,992]
+	ldr	w0, [x0,x28]
+	cmn	w0, #1
+	bne	.L2150
+.L2149:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldr	x0, [x0,992]
+	add	x5, x0, x28
+	ldr	w0, [x5,4]
+	str	w0, [x29,156]
+.L2150:
+	add	x0, x24, :lo12:.LANCHOR2
+	ldrh	w1, [x19]
+	mov	w26, 0
+	ldr	x0, [x0,1184]
+	strh	wzr, [x0,x1,lsl 1]
+	ldrh	w0, [x19]
+	bl	INSERT_FREE_LIST
+	mov	w0, -1
+	strh	w0, [x19]
+	bl	FtlGcPageVarInit
+	b	.L2151
+.L2167:
+	ldr	w0, [x29,152]
+	add	w22, w22, 1
+	add	w3, w26, 1
+	cmp	w22, w0
+	uxth	w26, w3
+	bcs	.L2153
+.L2155:
+	add	x0, x21, :lo12:.LANCHOR2
+	ldrh	w0, [x0,818]
+	cmp	w0, w26
+	bhi	.L2154
+	b	.L2158
+.L2153:
+	ldr	x0, [x29,136]
+	add	x1, x0, :lo12:.LANCHOR1
+	ldrh	w0, [x1,3068]
+	cmp	w0, w23
+	beq	.L2155
+	add	w0, w0, w22
+	strh	w0, [x1,3068]
+	add	x0, x21, :lo12:.LANCHOR2
+	ldrh	w0, [x0,818]
+	cmp	w0, w26
+	bls	.L2155
+	b	.L2156
+.L2158:
+	mov	w6, 0
+.L2139:
+	ldr	x0, [x29,136]
+	mov	w1, w26
+	strh	w26, [x19,2]
+	mov	w2, w6
+	add	x20, x0, :lo12:.LANCHOR1
+	mov	w0, -1
+	strb	w6, [x19,6]
+	strh	w0, [x20,3068]
+	mov	x0, x19
+	bl	ftl_sb_update_avl_pages
+.L2156:
+	ldr	w0, [x29,156]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	FtlGcScanTempBlk, .-FtlGcScanTempBlk
+	.align	2
+	.global	FtlGcRefreshOpenBlock
+	.type	FtlGcRefreshOpenBlock, %function
+FtlGcRefreshOpenBlock:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxth	w19, w0
+	adrp	x0, .LC122
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC122
+	bl	printk
+	adrp	x2, .LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR2
+	ldrh	w3, [x2,948]
+	cmp	w3, w19
+	beq	.L2169
+	ldrh	w1, [x2,950]
+	cmp	w1, w19
+	beq	.L2169
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L2170
+	strh	w19, [x2,948]
+	b	.L2169
+.L2170:
+	cmp	w1, w0
+	bne	.L2169
+	strh	w19, [x2,950]
+.L2169:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcRefreshOpenBlock, .-FtlGcRefreshOpenBlock
+	.align	2
+	.global	FtlGcRefreshBlock
+	.type	FtlGcRefreshBlock, %function
+FtlGcRefreshBlock:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxth	w19, w0
+	adrp	x0, .LC122
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC122
+	bl	printk
+	adrp	x2, .LANCHOR2
+	add	x2, x2, :lo12:.LANCHOR2
+	ldrh	w3, [x2,948]
+	cmp	w3, w19
+	beq	.L2172
+	ldrh	w1, [x2,950]
+	cmp	w1, w19
+	beq	.L2172
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L2173
+	strh	w19, [x2,948]
+	b	.L2172
+.L2173:
+	cmp	w1, w0
+	bne	.L2172
+	strh	w19, [x2,950]
+.L2172:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcRefreshBlock, .-FtlGcRefreshBlock
+	.align	2
+	.global	FtlGcMarkBadPhyBlk
+	.type	FtlGcMarkBadPhyBlk, %function
+FtlGcMarkBadPhyBlk:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w20, w0
+	adrp	x19, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	mov	w0, w20
+	add	x22, x19, :lo12:.LANCHOR2
+	str	x23, [sp,48]
+	bl	P2V_block_in_plane
+	uxth	w21, w0
+	ldrh	w1, [x22,958]
+	adrp	x0, .LC123
+	mov	w2, w20
+	add	x0, x0, :lo12:.LC123
+	bl	printk
+	mov	w0, w21
+	bl	FtlGcRefreshBlock
+	ldr	w0, [x22,652]
+	cbz	w0, .L2175
+	ubfiz	x0, x21, 1, 16
+	ldr	x2, [x22,1168]
+	ldrh	w1, [x2,x0]
+	cmp	w1, 29
+	bls	.L2175
+	sub	w1, w1, #30
+	strh	w1, [x2,x0]
+.L2175:
+	add	x0, x19, :lo12:.LANCHOR2
+	adrp	x1, .LANCHOR4
+	add	x1, x1, :lo12:.LANCHOR4
+	add	x1, x1, 184
+	ldrh	w3, [x0,958]
+	mov	x0, 0
+.L2176:
+	cmp	w3, w0, uxth
+	bls	.L2182
+	add	x0, x0, 1
+	add	x2, x1, x0, lsl 1
+	ldrh	w2, [x2,-2]
+	cmp	w2, w20
+	bne	.L2176
+	b	.L2177
+.L2182:
+	cmp	w3, 15
+	bhi	.L2177
+	adrp	x1, .LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x1, x1, :lo12:.LANCHOR4
+	add	w0, w3, 1
+	add	x1, x1, 184
+	strh	w0, [x19,958]
+	strh	w20, [x1,w3,sxtw 1]
+.L2177:
+	mov	w0, 0
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlGcMarkBadPhyBlk, .-FtlGcMarkBadPhyBlk
+	.align	2
+	.global	FtlGcReFreshBadBlk
+	.type	FtlGcReFreshBadBlk, %function
+FtlGcReFreshBadBlk:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,958]
+	cbz	w1, .L2184
+	ldrh	w3, [x0,948]
+	mov	w2, 65535
+	cmp	w3, w2
+	bne	.L2184
+	ldrh	w2, [x0,962]
+	cmp	w2, w1
+	bcc	.L2185
+	strh	wzr, [x0,962]
+.L2185:
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	add	x0, x0, 184
+	ldrh	w1, [x19,962]
+	ldrh	w0, [x0,w1,sxtw 1]
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	ldrh	w0, [x19,962]
+	add	w0, w0, 1
+	strh	w0, [x19,962]
+.L2184:
+	mov	w0, 0
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcReFreshBadBlk, .-FtlGcReFreshBadBlk
+	.align	2
+	.global	FtlGcFreeBadSuperBlk
+	.type	FtlGcFreeBadSuperBlk, %function
+FtlGcFreeBadSuperBlk:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x27, [sp,80]
+	add	x19, x19, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	uxth	w23, w0
+	ldrh	w0, [x19,958]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	mov	w21, 0
+	cbz	w0, .L2191
+	adrp	x24, .LANCHOR4
+	adrp	x22, .LC124
+	add	x22, x22, :lo12:.LC124
+	add	x25, x24, :lo12:.LANCHOR4
+.L2199:
+	ldrh	w0, [x19,748]
+	cmp	w0, w21
+	bls	.L2200
+	add	x0, x19, 776
+	mov	w1, w23
+	mov	w20, 0
+	add	x27, x24, :lo12:.LANCHOR4
+	ldrb	w0, [x0,w21,sxtw]
+	bl	V2P_block
+	uxth	w26, w0
+.L2192:
+	ldrh	w0, [x19,958]
+	cmp	w0, w20
+	bls	.L2201
+	add	x0, x27, 184
+	ldrh	w0, [x0,w20,sxtw 1]
+	cmp	w0, w26
+	bne	.L2193
+	mov	w1, w26
+	mov	x0, x22
+	bl	printk
+	mov	w0, w26
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	ldrh	w2, [x19,958]
+	mov	w3, w20
+.L2194:
+	cmp	w3, w2
+	bcs	.L2202
+	add	x4, x25, 184
+	add	w0, w3, 1
+	ldrh	w1, [x4,w0,sxtw 1]
+	strh	w1, [x4,w3,sxtw 1]
+	uxth	w3, w0
+	b	.L2194
+.L2202:
+	sub	w2, w2, #1
+	strh	w2, [x19,958]
+.L2193:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L2192
+.L2201:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L2199
+.L2200:
+	bl	FtlGcReFreshBadBlk
+.L2191:
+	mov	w0, 0
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlGcFreeBadSuperBlk, .-FtlGcFreeBadSuperBlk
+	.align	2
+	.global	update_vpc_list
+	.type	update_vpc_list, %function
+update_vpc_list:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	uxth	w19, w0
+	add	x1, x20, :lo12:.LANCHOR2
+	ubfiz	x0, x19, 1, 16
+	ldr	x2, [x1,1184]
+	ldrh	w2, [x2,x0]
+	cbnz	w2, .L2204
+	ldrh	w0, [x1,3920]
+	cmp	w0, w19
+	bne	.L2205
+	mov	w0, -1
+	strh	w0, [x1,3920]
+	b	.L2206
+.L2205:
+	ldrh	w3, [x1,3608]
+	mov	w0, w2
+	cmp	w3, w19
+	beq	.L2207
+	ldrh	w3, [x1,3656]
+	cmp	w3, w19
+	beq	.L2207
+	ldrh	w1, [x1,3704]
+	cmp	w1, w19
+	beq	.L2207
+.L2206:
+	add	x20, x20, :lo12:.LANCHOR2
+	mov	w1, w19
+	add	x0, x20, 3568
+	bl	List_remove_node
+	ldrh	w0, [x20,3584]
+	sub	w0, w0, #1
+	strh	w0, [x20,3584]
+	mov	w0, w19
+	bl	free_data_superblock
+	mov	w0, w19
+	bl	FtlGcFreeBadSuperBlk
+	mov	w0, 1
+	b	.L2207
+.L2204:
+	mov	w0, w19
+	bl	List_update_data_list
+	mov	w0, 0
+.L2207:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	update_vpc_list, .-update_vpc_list
+	.align	2
+	.global	decrement_vpc_count
+	.type	decrement_vpc_count, %function
+decrement_vpc_count:
+	stp	x29, x30, [sp, -48]!
+	uxth	w1, w0
+	mov	w0, 65535
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	cmp	w1, w0
+	beq	.L2212
+	adrp	x2, .LANCHOR2+1184
+	ubfiz	x0, x1, 1, 16
+	ldr	x2, [x2,#:lo12:.LANCHOR2+1184]
+	ldrh	w19, [x2,x0]
+	cbnz	w19, .L2213
+	adrp	x0, .LC125
+	mov	w2, w19
+	add	x0, x0, :lo12:.LC125
+	bl	printk
+	b	.L2217
+.L2213:
+	sub	w19, w19, #1
+	strh	w19, [x2,x0]
+.L2212:
+	adrp	x19, .LANCHOR4
+	mov	w0, 65535
+	add	x19, x19, :lo12:.LANCHOR4
+	ldrh	w2, [x19,160]
+	cmp	w2, w0
+	bne	.L2215
+	strh	w1, [x19,160]
+.L2217:
+	mov	w0, 0
+	b	.L2214
+.L2215:
+	cmp	w2, w1
+	str	x1, [x29,40]
+	mov	w0, 0
+	beq	.L2214
+	mov	w0, w2
+	bl	update_vpc_list
+	cmp	w0, wzr
+	ldr	x1, [x29,40]
+	cset	w0, ne
+	strh	w1, [x19,160]
+.L2214:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	decrement_vpc_count, .-decrement_vpc_count
+	.align	2
+	.global	FtlRecoverySuperblock
+	.type	FtlRecoverySuperblock, %function
+FtlRecoverySuperblock:
+	stp	x29, x30, [sp, -208]!
+	mov	w2, 65535
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	ldrh	w0, [x0]
+	cmp	w0, w2
+	beq	.L2376
+	ldrh	w0, [x19,2]
+	adrp	x20, .LANCHOR2
+	str	w0, [x29,188]
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrb	w28, [x19,6]
+	ldr	w1, [x29,188]
+	ldrh	w0, [x0,818]
+	cmp	w0, w1
+	bne	.L2221
+	strh	wzr, [x19,4]
+	b	.L2382
+.L2221:
+	ldrh	w0, [x19,16]
+	mov	w1, 0
+.L2222:
+	cmp	w0, w2
+	bne	.L2385
+	add	w1, w1, 1
+	uxth	w1, w1
+	add	x0, x19, x1, sxtw 1
+	ldrh	w0, [x0,16]
+	b	.L2222
+.L2385:
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2224
+	bl	FtlGetLastWrittenPage
+	cmn	w0, #1
+	mov	w21, w0
+	beq	.L2225
+	adrp	x0, .LANCHOR0
+	mov	w23, w21
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,136]
+	cbnz	w1, .L2299
+	add	x0, x0, 140
+	ldrh	w23, [x0,w21,sxtw 1]
+	b	.L2299
+.L2224:
+	mov	w1, 0
+	bl	FtlGetLastWrittenPage
+	cmn	w0, #1
+	mov	w21, w0
+	beq	.L2225
+	mov	w23, w0
+.L2299:
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	x2, x19
+	mov	w25, 0
+	mov	w8, 65535
+	mov	w9, 56
+	mov	w10, 4
+	ldrh	w4, [x0,748]
+	ldrh	w7, [x0,830]
+	add	x4, x19, x4, lsl 1
+	b	.L2227
+.L2225:
+	strh	wzr, [x19,2]
+.L2382:
+	strb	wzr, [x19,6]
+	b	.L2376
+.L2229:
+	ldrh	w1, [x2,16]
+	cmp	w1, w8
+	beq	.L2228
+	add	x5, x20, :lo12:.LANCHOR2
+	orr	w1, w23, w1, lsl 10
+	umull	x0, w25, w9
+	add	w3, w25, 1
+	ldr	x6, [x5,992]
+	add	x6, x6, x0
+	str	w1, [x6,4]
+	ldr	x1, [x5,992]
+	ldr	x5, [x5,1128]
+	add	x0, x1, x0
+	mul	w1, w25, w7
+	uxth	w25, w3
+	str	xzr, [x0,8]
+	sdiv	w1, w1, w10
+	add	x1, x5, x1, sxtw 2
+	str	x1, [x0,16]
+.L2228:
+	add	x2, x2, 2
+.L2227:
+	cmp	x2, x4
+	bne	.L2229
+	ldrb	w0, [x19,8]
+	str	wzr, [x29,184]
+	cmp	w0, 1
+	bne	.L2230
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cmp	w0, wzr
+	cset	w0, ne
+	str	w0, [x29,184]
+.L2230:
+	add	x22, x20, :lo12:.LANCHOR2
+	ldr	w2, [x29,184]
+	mov	w1, w25
+	mov	x26, 0
+	mov	w24, 65535
+	adrp	x27, .LANCHOR4
+	ldr	x0, [x22,992]
+	bl	FlashReadPages
+	ldr	w0, [x22,876]
+	adrp	x22, .LC126
+	str	w0, [x29,176]
+	add	x22, x22, :lo12:.LC126
+	uxth	w0, w23
+	str	w0, [x29,168]
+.L2231:
+	uxth	w2, w26
+	cmp	w2, w25
+	bcs	.L2238
+	add	x6, x20, :lo12:.LANCHOR2
+	mov	x0, 56
+	mul	x0, x26, x0
+	ldr	x4, [x6,992]
+	add	x1, x4, x0
+	ldr	w0, [x4,x0]
+	cbnz	w0, .L2232
+	ldr	x7, [x1,16]
+	ldr	w4, [x7,4]
+	cmn	w4, #1
+	beq	.L2233
+	ldr	w1, [x6,876]
+	mov	w0, w4
+	str	x7, [x29,136]
+	str	x2, [x29,144]
+	str	x4, [x29,152]
+	str	x6, [x29,160]
+	bl	ftl_cmp_data_ver
+	ldr	x6, [x29,160]
+	ldr	x4, [x29,152]
+	ldr	x2, [x29,144]
+	ldr	x7, [x29,136]
+	cbz	w0, .L2233
+	add	w4, w4, 1
+	str	w4, [x6,876]
+.L2233:
+	ldr	w0, [x7]
+	cmn	w0, #1
+	bne	.L2234
+.L2238:
+	cmp	w2, w25
+	bne	.L2377
+	add	x0, x20, :lo12:.LANCHOR2
+	add	w21, w21, 1
+	uxth	w21, w21
+	ldr	x0, [x0,992]
+	ldr	w0, [x0,4]
+	b	.L2378
+.L2232:
+	ldr	w1, [x1,4]
+	mov	x0, x22
+	bl	printk
+	ldr	w24, [x29,168]
+	add	x0, x27, :lo12:.LANCHOR4
+	ldrh	w1, [x19]
+	strh	w1, [x0,218]
+.L2234:
+	add	x26, x26, 1
+	b	.L2231
+.L2377:
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w1, 56
+	uxth	w21, w21
+	umull	x2, w2, w1
+	ldr	x0, [x0,992]
+	add	x2, x0, x2
+	ldr	w0, [x2,4]
+.L2378:
+	lsr	x0, x0, 10
+	bl	P2V_plane
+	uxth	w26, w0
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2240
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w2, [x0,136]
+	cbnz	w2, .L2240
+	add	x0, x0, 140
+	ldrh	w21, [x0,w21,sxtw 1]
+.L2240:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x0,818]
+	cmp	w0, w21
+	bne	.L2241
+	strh	w21, [x19,2]
+	strb	wzr, [x19,6]
+	strh	wzr, [x19,4]
+.L2241:
+	uxth	w0, w28
+	str	w0, [x29,152]
+	ldr	w0, [x29,188]
+	cmp	w21, w0
+	bne	.L2242
+	ldr	w0, [x29,152]
+	cmp	w26, w0
+	beq	.L2383
+.L2242:
+	ldr	w0, [x29,176]
+	adrp	x25, .LANCHOR4
+	sub	w22, w0, #1
+	mov	w0, 65535
+	cmp	w24, w0
+	bne	.L2243
+	cbnz	w1, .L2244
+.L2243:
+	add	x0, x25, :lo12:.LANCHOR4
+	uxth	w6, w23
+	ldr	w1, [x0,172]
+	cmn	w1, #1
+	bne	.L2245
+	str	w22, [x0,172]
+.L2245:
+	add	x0, x25, :lo12:.LANCHOR4
+	ldr	w24, [x29,188]
+	ldr	w3, [x0,172]
+	ldr	w0, [x29,188]
+	add	w0, w0, 7
+	cmp	w0, w23, uxth
+	bge	.L2246
+	sub	w24, w6, #7
+	uxth	w24, w24
+.L2246:
+	adrp	x7, .LANCHOR0
+	mov	w28, -1
+	add	x5, x7, :lo12:.LANCHOR0
+	mov	w27, w28
+	mov	w4, 65535
+	add	x5, x5, 652
+.L2247:
+	cmp	w24, w6
+	bhi	.L2260
+	add	x0, x20, :lo12:.LANCHOR2
+	mov	w23, 0
+	mov	w10, 56
+	ldrh	w2, [x0,748]
+	mov	x0, x19
+	add	x2, x19, x2, lsl 1
+.L2261:
+	cmp	x0, x2
+	beq	.L2386
+	ldrh	w1, [x0,16]
+	cmp	w1, w4
+	beq	.L2248
+	add	x9, x20, :lo12:.LANCHOR2
+	orr	w1, w24, w1, lsl 10
+	umull	x8, w23, w10
+	add	w23, w23, 1
+	ldr	x9, [x9,992]
+	uxth	w23, w23
+	add	x8, x9, x8
+	str	w1, [x8,4]
+.L2248:
+	add	x0, x0, 2
+	b	.L2261
+.L2386:
+	add	x8, x20, :lo12:.LANCHOR2
+	ldr	w2, [x29,184]
+	mov	w1, w23
+	str	x5, [x29,128]
+	str	x7, [x29,136]
+	ldr	x0, [x8,992]
+	str	x4, [x29,144]
+	str	x3, [x29,160]
+	str	x6, [x29,168]
+	str	x8, [x29,176]
+	bl	FlashReadPages
+	ldr	x7, [x29,136]
+	mov	w1, 0
+	ldr	x8, [x29,176]
+	sxtw	x10, w24
+	add	x0, x7, :lo12:.LANCHOR0
+	ldr	x6, [x29,168]
+	ldr	x3, [x29,160]
+	ldr	x4, [x29,144]
+	ldrb	w9, [x0,136]
+	ldr	x0, [x8,992]
+	ldr	x5, [x29,128]
+	add	x0, x0, 16
+.L2250:
+	cmp	w1, w23
+	beq	.L2387
+	ldr	w2, [x0,-16]
+	cbnz	w2, .L2251
+	ldr	x2, [x0]
+	ldrh	w8, [x2]
+	cmp	w8, w4
+	beq	.L2252
+	ldr	w8, [x2,4]
+	cmn	w8, #1
+	beq	.L2252
+	add	x2, x25, :lo12:.LANCHOR4
+	cmn	w28, #1
+	ldr	w27, [x2,172]
+	str	w8, [x2,172]
+	bne	.L2252
+	ldrh	w2, [x5,x10,lsl 1]
+	cmp	w2, w4
+	bne	.L2253
+	cbz	w9, .L2252
+.L2253:
+	cmp	w27, w22
+	csinv	w28, w27, wzr, ne
+	b	.L2252
+.L2251:
+	add	x0, x25, :lo12:.LANCHOR4
+	ldrh	w1, [x19]
+	strh	w1, [x0,218]
+	ldrb	w1, [x19,8]
+	cbnz	w1, .L2244
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x1, x1, 652
+	ldrh	w2, [x1,w24,sxtw 1]
+	mov	w1, 65535
+	cmp	w2, w1
+	bne	.L2255
+	cmn	w28, #1
+	beq	.L2256
+	str	w28, [x0,172]
+	b	.L2244
+.L2256:
+	cmp	w3, w22
+	beq	.L2257
+	str	w3, [x0,172]
+	b	.L2244
+.L2257:
+	ldr	w1, [x0,172]
+	b	.L2384
+.L2255:
+	cmp	w27, w22
+	beq	.L2258
+	cmn	w27, #1
+	beq	.L2244
+	str	w27, [x0,172]
+	b	.L2244
+.L2258:
+	ldr	w1, [x0,172]
+	cmp	w1, w22
+	beq	.L2244
+.L2384:
+	sub	w1, w1, #1
+	b	.L2379
+.L2252:
+	add	w1, w1, 1
+	add	x0, x0, 56
+	uxth	w1, w1
+	b	.L2250
+.L2387:
+	add	w24, w24, 1
+	uxth	w24, w24
+	b	.L2247
+.L2260:
+	add	x0, x25, :lo12:.LANCHOR4
+	mov	w1, -1
+.L2379:
+	str	w1, [x0,172]
+.L2244:
+	add	x0, x25, :lo12:.LANCHOR4
+	mov	w1, 1
+	strh	w1, [x0,220]
+	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x0, 3752
+	bl	FtlMapBlkWriteDumpData
+	ldr	w23, [x29,188]
+	adrp	x0, .LC128
+	add	x0, x0, :lo12:.LC128
+	str	x0, [x29,128]
+	adrp	x0, .LC127
+	add	x0, x0, :lo12:.LC127
+	str	x0, [x29,120]
+.L2262:
+	add	x0, x20, :lo12:.LANCHOR2
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	str	wzr, [x29,176]
+	mov	w7, 65535
+	mov	w8, 56
+	ldrh	w3, [x0,748]
+	ldrb	w6, [x1,136]
+	mov	x1, x19
+	add	x3, x19, x3, lsl 1
+.L2263:
+	cmp	x1, x3
+	beq	.L2388
+	ldrh	w2, [x1,16]
+	cmp	w2, w7
+	beq	.L2264
+	ldr	w0, [x29,176]
+	add	x5, x20, :lo12:.LANCHOR2
+	orr	w2, w23, w2, lsl 10
+	ldr	x4, [x5,992]
+	umull	x0, w0, w8
+	add	x4, x4, x0
+	str	w2, [x4,4]
+	ldrb	w2, [x19,8]
+	cmp	w2, 1
+	bne	.L2265
+	cbz	w6, .L2265
+	ldr	x2, [x5,992]
+	add	x0, x2, x0
+	ldr	w2, [x0,4]
+	orr	w2, w2, -2147483648
+	str	w2, [x0,4]
+.L2265:
+	ldr	w0, [x29,176]
+	add	w0, w0, 1
+	uxth	w0, w0
+	str	w0, [x29,176]
+.L2264:
+	add	x1, x1, 2
+	b	.L2263
+.L2388:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	w1, [x29,176]
+	ldr	w2, [x29,184]
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+	str	xzr, [x29,160]
+.L2267:
+	ldrh	w0, [x29,160]
+	ldr	w1, [x29,176]
+	cmp	w1, w0, uxth
+	bls	.L2389
+	ldr	x0, [x29,160]
+	mov	x24, 56
+	mul	x24, x0, x24
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x28, [x0,992]
+	add	x27, x28, x24
+	ldr	w1, [x27,4]
+	str	w1, [x29,204]
+	lsr	x0, x1, 10
+	str	x1, [x29,168]
+	bl	P2V_plane
+	uxth	w0, w0
+	ldr	w1, [x29,188]
+	cmp	w23, w1
+	ldr	x1, [x29,168]
+	bcc	.L2268
+	ldr	w2, [x29,152]
+	cmp	w0, w2
+	bcs	.L2303
+	ldr	w2, [x29,188]
+	cmp	w23, w2
+	beq	.L2268
+.L2303:
+	cmp	w0, w26
+	bne	.L2304
+	cmp	w23, w21
+	beq	.L2270
+.L2304:
+	ldr	w0, [x28,x24]
+	cmn	w0, #1
+	beq	.L2272
+	ldr	x28, [x27,16]
+	mov	w0, 61589
+	ldrh	w1, [x28]
+	cmp	w1, w0
+	bne	.L2279
+	ldr	w22, [x28,4]
+	cmn	w22, #1
+	beq	.L2274
+	add	x27, x20, :lo12:.LANCHOR2
+	mov	w0, w22
+	ldr	w1, [x27,876]
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L2274
+	add	w0, w22, 1
+	str	w0, [x27,876]
+.L2274:
+	ldr	w27, [x28,8]
+	add	x1, x29, 200
+	ldr	w0, [x28,12]
+	mov	w2, 0
+	str	w0, [x29,196]
+	mov	w0, w27
+	bl	log2phys
+	add	x0, x25, :lo12:.LANCHOR4
+	str	x0, [x29,136]
+	ldr	w1, [x0,172]
+	cmn	w1, #1
+	beq	.L2275
+	mov	w0, w22
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L2275
+	ldr	w1, [x29,196]
+	cmn	w1, #1
+	beq	.L2276
+	add	x3, x20, :lo12:.LANCHOR2
+	str	x3, [x29,112]
+	ldr	x0, [x3,992]
+	add	x0, x0, x24
+	str	w1, [x0,4]
+	mov	w1, 1
+	ldr	x2, [x0,16]
+	ldr	x0, [x3,992]
+	str	x2, [x29,168]
+	mov	w2, 0
+	add	x0, x0, x24
+	bl	FlashReadPages
+	ldr	x3, [x29,112]
+	ldr	x0, [x29,168]
+	ldr	x2, [x3,992]
+	ldr	w0, [x0,4]
+	str	w0, [x29,144]
+	add	x4, x2, x24
+	ldr	w0, [x2,x24]
+	cmn	w0, #1
+	bne	.L2277
+	b	.L2278
+.L2276:
+	ldr	w0, [x29,204]
+	ldr	w1, [x29,200]
+	cmp	w1, w0
+	bne	.L2279
+	mov	w0, w27
+	add	x1, x29, 196
+	mov	w2, 1
+	bl	log2phys
+.L2279:
+	ldrh	w0, [x19]
+	b	.L2381
+.L2277:
+	ldr	x0, [x29,168]
+	ldr	w28, [x0,8]
+	cmp	w28, w27
+	bne	.L2278
+	ldr	x0, [x29,136]
+	ldr	w1, [x29,144]
+	str	x2, [x29,96]
+	ldr	w0, [x0,172]
+	str	x3, [x29,104]
+	str	x4, [x29,112]
+	bl	ftl_cmp_data_ver
+	ldr	x4, [x29,112]
+	ldr	x3, [x29,104]
+	ldr	x2, [x29,96]
+	cbz	w0, .L2278
+	ldr	w0, [x29,200]
+	ldr	w1, [x29,204]
+	cmp	w0, w1
+	beq	.L2284
+	ldr	w1, [x29,196]
+	cmp	w0, w1
+	beq	.L2278
+	cmn	w0, #1
+	beq	.L2282
+	str	w0, [x4,4]
+	mov	w2, 0
+	ldr	x1, [x4,16]
+	ldr	x0, [x3,992]
+	str	x1, [x29,168]
+	mov	w1, 1
+	add	x0, x0, x24
+	bl	FlashReadPages
+	b	.L2283
+.L2282:
+	str	w0, [x2,x24]
+.L2283:
+	adrp	x0, .LANCHOR2+992
+	ldr	x0, [x0,#:lo12:.LANCHOR2+992]
+	ldr	w0, [x0,x24]
+	cmn	w0, #1
+	beq	.L2284
+	ldr	x0, [x29,168]
+	ldr	w24, [x0,4]
+	add	x0, x25, :lo12:.LANCHOR4
+	mov	w1, w24
+	ldr	w0, [x0,172]
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L2284
+	ldr	w0, [x29,144]
+	mov	w1, w24
+	bl	ftl_cmp_data_ver
+	cbz	w0, .L2278
+.L2284:
+	ldr	w1, [x29,196]
+	mov	w0, w28
+	bl	FtlReUsePrevPpa
+.L2278:
+	mov	w0, -1
+	str	w0, [x29,196]
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	b	.L2286
+.L2275:
+	ldr	w0, [x29,204]
+	ldr	w1, [x29,200]
+	cmp	w1, w0
+	beq	.L2286
+	mov	w0, w27
+	add	x1, x29, 204
+	mov	w2, 1
+	bl	log2phys
+	ldr	w24, [x29,200]
+	cmn	w24, #1
+	beq	.L2286
+	ldr	w0, [x29,196]
+	cmp	w24, w0
+	beq	.L2286
+	lsr	x0, x24, 10
+	bl	P2V_block_in_plane
+	uxth	w0, w0
+	add	x1, x20, :lo12:.LANCHOR2
+	ldrh	w2, [x1,3608]
+	cmp	w2, w0
+	beq	.L2289
+	ldrh	w2, [x1,3656]
+	cmp	w2, w0
+	beq	.L2289
+	ldrh	w1, [x1,3704]
+	cmp	w1, w0
+	bne	.L2286
+.L2289:
+	add	x28, x20, :lo12:.LANCHOR2
+	mov	w1, 1
+	mov	w2, 0
+	ldr	x0, [x28,992]
+	str	w24, [x0,4]
+	ldr	x3, [x0,16]
+	ldr	x0, [x28,992]
+	str	x3, [x29,168]
+	bl	FlashReadPages
+	ldr	x0, [x28,992]
+	ldr	x3, [x29,168]
+	ldr	w0, [x0]
+	ldr	w1, [x3,4]
+	cmn	w0, #1
+	beq	.L2286
+	mov	w0, w22
+	bl	ftl_cmp_data_ver
+	cbnz	w0, .L2286
+	mov	w0, w27
+	add	x1, x29, 200
+	mov	w2, 1
+	bl	log2phys
+.L2286:
+	ldr	w0, [x29,196]
+	cmn	w0, #1
+	beq	.L2268
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	uxth	w1, w0
+	add	x2, x20, :lo12:.LANCHOR2
+	ubfiz	x3, x1, 1, 16
+	ldr	x2, [x2,1184]
+	ldrh	w2, [x2,x3]
+	cbz	w2, .L2290
+.L2381:
+	bl	decrement_vpc_count
+	b	.L2268
+.L2290:
+	ldr	x0, [x29,120]
+	bl	printk
+	b	.L2268
+.L2272:
+	add	x24, x25, :lo12:.LANCHOR4
+	ldrh	w0, [x19]
+	mov	w2, w22
+	strh	w0, [x24,218]
+	ldr	x0, [x29,128]
+	bl	printk
+	ldr	w0, [x24,224]
+	cmp	w0, 31
+	bhi	.L2291
+	add	x1, x24, 232
+	ldr	w2, [x29,204]
+	str	w2, [x1,w0,uxtw 2]
+	add	w0, w0, 1
+	str	w0, [x24,224]
+.L2291:
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	add	x0, x25, :lo12:.LANCHOR4
+	ldr	w1, [x0,172]
+	cmn	w1, #1
+	beq	.L2380
+	cmp	w1, w22
+	bls	.L2268
+.L2380:
+	str	w22, [x0,172]
+.L2268:
+	ldr	x0, [x29,160]
+	add	x0, x0, 1
+	str	x0, [x29,160]
+	b	.L2267
+.L2389:
+	ldrb	w0, [x19,8]
+	add	w23, w23, 1
+	cmp	w0, 1
+	uxth	w23, w23
+	bne	.L2294
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2294
+	cmp	w21, w23
+	bne	.L2294
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x0,820]
+	cmp	w0, w23
+	beq	.L2270
+.L2294:
+	add	x0, x20, :lo12:.LANCHOR2
+	ldrh	w1, [x0,818]
+	cmp	w23, w1
+	bne	.L2262
+	ldrh	w2, [x0,748]
+	mov	w3, 65535
+	strh	w23, [x19,2]
+	mov	x0, 0
+	strh	wzr, [x19,4]
+.L2296:
+	uxth	w1, w0
+	cmp	w1, w2
+	bcs	.L2376
+	add	x0, x0, 1
+	add	x4, x19, x0, lsl 1
+	ldrh	w4, [x4,14]
+	cmp	w4, w3
+	beq	.L2296
+	strb	w1, [x19,6]
+	b	.L2376
+.L2270:
+	strb	w26, [x19,6]
+	strh	w21, [x19,2]
+.L2383:
+	mov	x0, x19
+	mov	w1, w21
+	mov	w2, w26
+	bl	ftl_sb_update_avl_pages
+.L2376:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 208
+	ret
+	.size	FtlRecoverySuperblock, .-FtlRecoverySuperblock
+	.align	2
+	.global	FtlSlcSuperblockCheck
+	.type	FtlSlcSuperblockCheck, %function
+FtlSlcSuperblockCheck:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x23, [sp,48]
+	ldrh	w1, [x0,4]
+	cbz	w1, .L2390
+	ldrh	w1, [x0]
+	mov	w20, 65535
+	cmp	w1, w20
+	beq	.L2390
+	mov	x19, x0
+	ldrb	w0, [x0,6]
+	adrp	x21, .LANCHOR0
+	adrp	x23, .LANCHOR2
+	add	x0, x0, 8
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x22, x21, 652
+	ldrh	w0, [x19,x0,lsl 1]
+.L2394:
+	cmp	w0, w20
+	bne	.L2401
+.L2396:
+	ldrb	w0, [x19,6]
+	add	x1, x23, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	ldrh	w1, [x1,748]
+	uxtb	w0, w0
+	strb	w0, [x19,6]
+	cmp	w1, w0
+	bne	.L2395
+	ldrh	w0, [x19,2]
+	strb	wzr, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+.L2395:
+	ldrb	w0, [x19,6]
+	add	x0, x0, 8
+	ldrh	w0, [x19,x0,lsl 1]
+	b	.L2394
+.L2401:
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2397
+	ldrb	w0, [x21,136]
+	cbnz	w0, .L2397
+	ldrh	w0, [x19,2]
+	ldrh	w0, [x22,w0,sxtw 1]
+	cmp	w0, w20
+	bne	.L2397
+	ldrh	w0, [x19,4]
+	sub	w0, w0, #1
+	strh	w0, [x19,4]
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	ldrh	w1, [x19,4]
+	cbnz	w1, .L2396
+	ldrh	w0, [x19,2]
+	strb	w1, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+	b	.L2390
+.L2397:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2390
+	cmp	w1, 1
+	bne	.L2390
+	adrp	x0, .LANCHOR2
+	ldrh	w2, [x19,2]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,820]
+	cmp	w2, w1
+	bcc	.L2390
+	ldrh	w1, [x19]
+	ldr	x3, [x0,1184]
+	lsl	x1, x1, 1
+	ldrh	w4, [x19,4]
+	ldrh	w2, [x3,x1]
+	sub	w2, w2, w4
+	strh	w2, [x3,x1]
+	strh	wzr, [x19,4]
+	ldrh	w0, [x0,818]
+	strh	w0, [x19,2]
+	strb	wzr, [x19,6]
+.L2390:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlSlcSuperblockCheck, .-FtlSlcSuperblockCheck
+	.align	2
+	.global	get_new_active_ppa
+	.type	get_new_active_ppa, %function
+get_new_active_ppa:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	str	x25, [sp,64]
+	mov	x19, x0
+	strb	wzr, [x0,10]
+	adrp	x20, .LANCHOR0
+	ldrb	w0, [x0,6]
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w22, 65535
+	adrp	x23, .LANCHOR2
+	add	x0, x0, 8
+	add	x24, x20, 652
+	ldrh	w0, [x19,x0,lsl 1]
+.L2403:
+	cmp	w0, w22
+	adrp	x21, .LANCHOR2
+	bne	.L2418
+.L2404:
+	ldrb	w0, [x19,6]
+	add	x1, x23, :lo12:.LANCHOR2
+	add	w0, w0, 1
+	ldrh	w1, [x1,748]
+	uxtb	w0, w0
+	strb	w0, [x19,6]
+	cmp	w1, w0
+	bne	.L2405
+	ldrh	w0, [x19,2]
+	strb	wzr, [x19,6]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+.L2405:
+	ldrb	w0, [x19,6]
+	add	x0, x0, 8
+	ldrh	w0, [x19,x0,lsl 1]
+	b	.L2403
+.L2418:
+	ldrb	w1, [x19,8]
+	cmp	w1, 1
+	bne	.L2406
+	ldrb	w1, [x20,136]
+	cbnz	w1, .L2406
+	ldrh	w1, [x19,2]
+	ldrh	w1, [x24,w1,sxtw 1]
+	cmp	w1, w22
+	bne	.L2406
+	ldrh	w0, [x19,4]
+	sub	w0, w0, #1
+	strh	w0, [x19,4]
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	b	.L2404
+.L2406:
+	ldrh	w1, [x19,4]
+	adrp	x20, .LANCHOR0
+	ldrh	w22, [x19,2]
+	mov	w23, 65535
+	add	x20, x20, :lo12:.LANCHOR0
+	sub	w1, w1, #1
+	orr	w22, w22, w0, lsl 10
+	strh	w1, [x19,4]
+	mov	w24, w23
+	add	x25, x20, 652
+.L2407:
+	add	x0, x21, :lo12:.LANCHOR2
+	ldrb	w1, [x19,6]
+	ldrh	w2, [x0,748]
+.L2409:
+	add	w1, w1, 1
+	uxtb	w1, w1
+	cmp	w1, w2
+	bne	.L2408
+	ldrh	w1, [x19,2]
+	add	w1, w1, 1
+	strh	w1, [x19,2]
+	mov	w1, 0
+.L2408:
+	add	x0, x19, x1, sxtw 1
+	ldrh	w0, [x0,16]
+	cmp	w0, w23
+	beq	.L2409
+	ldrb	w0, [x19,8]
+	strb	w1, [x19,6]
+	cmp	w0, 1
+	bne	.L2414
+	ldrb	w0, [x20,136]
+	cbnz	w0, .L2411
+	ldrh	w0, [x19,2]
+	ldrh	w0, [x25,w0,sxtw 1]
+	cmp	w0, w24
+	bne	.L2411
+	ldrh	w1, [x19,4]
+	cbz	w1, .L2411
+	ldrh	w0, [x19]
+	sub	w1, w1, #1
+	strh	w1, [x19,4]
+	bl	decrement_vpc_count
+	b	.L2407
+.L2411:
+	adrp	x1, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR0
+	ldrb	w0, [x1,136]
+	cbz	w0, .L2414
+	add	x2, x21, :lo12:.LANCHOR2
+	ldrh	w1, [x19,2]
+	ldrh	w0, [x2,820]
+	cmp	w1, w0
+	bcc	.L2414
+	ldrh	w1, [x19]
+	ldr	x0, [x2,1184]
+	lsl	x1, x1, 1
+	ldrh	w4, [x19,4]
+	ldrh	w3, [x0,x1]
+	sub	w3, w3, w4
+	strh	w3, [x0,x1]
+	strh	wzr, [x19,4]
+	ldrh	w0, [x2,818]
+	strh	w0, [x19,2]
+	strb	wzr, [x19,6]
+.L2414:
+	mov	w0, w22
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	get_new_active_ppa, .-get_new_active_ppa
+	.align	2
+	.global	FtlWriteDumpData
+	.type	FtlWriteDumpData, %function
+FtlWriteDumpData:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	x25, [sp,64]
+	add	x20, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldr	w0, [x20,1400]
+	cbnz	w0, .L2419
+	ldrh	w2, [x20,3612]
+	cbz	w2, .L2421
+	ldrb	w1, [x20,3616]
+	cbnz	w1, .L2421
+	ldrb	w1, [x20,3615]
+	ldrh	w3, [x20,818]
+	mul	w1, w1, w3
+	cmp	w2, w1
+	beq	.L2421
+	ldrb	w23, [x20,3618]
+	ldr	w22, [x20,1396]
+	ldrh	w24, [x20,748]
+	cbnz	w23, .L2419
+	sub	w22, w22, #1
+	add	x1, x29, 84
+	mov	w0, w22
+	mov	w2, w23
+	bl	log2phys
+	ldr	x21, [x20,1112]
+	ldr	w0, [x29,84]
+	ldr	x1, [x20,1048]
+	str	w0, [x29,92]
+	cmn	w0, #1
+	str	w22, [x29,112]
+	str	x1, [x29,96]
+	str	x21, [x29,104]
+	str	w23, [x21,4]
+	beq	.L2423
+	add	x0, x29, 88
+	mov	w1, 1
+	mov	w2, w23
+	bl	FlashReadPages
+	b	.L2424
+.L2423:
+	ldr	x0, [x20,1048]
+	mov	w1, 255
+	ldrh	w2, [x20,828]
+	bl	ftl_memset
+.L2424:
+	add	x25, x19, :lo12:.LANCHOR2
+	mov	w0, -3947
+	lsl	w24, w24, 2
+	strh	w0, [x21]
+	mov	w23, 0
+	add	x20, x25, 3608
+.L2425:
+	cmp	w23, w24
+	beq	.L2426
+	ldrh	w0, [x20,4]
+	cbz	w0, .L2426
+	ldr	w0, [x29,92]
+	add	w23, w23, 1
+	str	w0, [x21,12]
+	ldrh	w0, [x20]
+	strh	w0, [x21,2]
+	mov	x0, x20
+	str	w22, [x21,8]
+	bl	get_new_active_ppa
+	str	w0, [x29,92]
+	ldr	w1, [x25,876]
+	mov	w2, 0
+	str	w1, [x21,4]
+	mov	w3, w2
+	add	w1, w1, 1
+	add	x0, x29, 88
+	cmn	w1, #1
+	csel	w1, w1, wzr, ne
+	str	w1, [x25,876]
+	mov	w1, 1
+	bl	FlashProgPages
+	ldrh	w0, [x20]
+	bl	decrement_vpc_count
+	b	.L2425
+.L2426:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, 1
+	strb	w0, [x19,3618]
+	b	.L2419
+.L2421:
+	add	x19, x19, :lo12:.LANCHOR2
+	strb	wzr, [x19,3618]
+.L2419:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	FtlWriteDumpData, .-FtlWriteDumpData
+	.align	2
+	.global	l2p_flush
+	.type	l2p_flush, %function
+l2p_flush:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w19, 0
+	adrp	x20, .LANCHOR2
+	bl	FtlWriteDumpData
+.L2437:
+	add	x1, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x1,858]
+	cmp	w0, w19
+	bls	.L2440
+	ldr	x1, [x1,1264]
+	ubfiz	x0, x19, 4, 16
+	add	x0, x1, x0
+	ldr	w0, [x0,4]
+	tbz	w0, #31, .L2438
+	mov	w0, w19
+	bl	flush_l2p_region
+.L2438:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2437
+.L2440:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	l2p_flush, .-l2p_flush
+	.align	2
+	.global	FtlSuperblockPowerLostFix
+	.type	FtlSuperblockPowerLostFix, %function
+FtlSuperblockPowerLostFix:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	adrp	x0, .LANCHOR0+136
+	stp	x21, x22, [sp,32]
+	str	x23, [sp,48]
+	ldrb	w20, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w20, .L2455
+	ldrb	w20, [x19,8]
+	cmp	w20, 1
+	bne	.L2450
+	ldrh	w21, [x19,4]
+	b	.L2442
+.L2450:
+	mov	w20, 0
+.L2455:
+	mov	w21, 12
+.L2442:
+	adrp	x23, .LANCHOR2
+	mov	w22, -1
+.L2443:
+	sub	w21, w21, #1
+	cmn	w21, #1
+	beq	.L2445
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L2444
+.L2445:
+	adrp	x0, .LANCHOR2
+	ldrh	w1, [x19]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w4, [x19,4]
+	lsl	x1, x1, 1
+	ldr	x3, [x0,1184]
+	ldrh	w2, [x3,x1]
+	sub	w2, w2, w4
+	strh	w2, [x3,x1]
+	strb	wzr, [x19,6]
+	ldrh	w0, [x0,818]
+	strh	w0, [x19,2]
+	strh	wzr, [x19,4]
+	ldp	x21, x22, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 128
+	ret
+.L2444:
+	mov	x0, x19
+	bl	get_new_active_ppa
+	str	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L2445
+	add	x2, x23, :lo12:.LANCHOR2
+	str	w22, [x29,96]
+	mov	w3, 0
+	ldr	x1, [x2,1112]
+	ldr	x0, [x2,1048]
+	str	x0, [x29,80]
+	str	x1, [x29,88]
+	str	w22, [x1,8]
+	str	w22, [x1,12]
+	ldrh	w0, [x19]
+	strh	w0, [x1,2]
+	strh	wzr, [x1]
+	ldr	w0, [x2,876]
+	str	w0, [x1,4]
+	mov	w1, 1
+	add	w0, w0, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x2,876]
+	add	x0, x29, 72
+	mov	w2, w20
+	bl	FlashProgPages
+	ldrh	w0, [x19]
+	bl	decrement_vpc_count
+	b	.L2443
+	.size	FtlSuperblockPowerLostFix, .-FtlSuperblockPowerLostFix
+	.align	2
+	.global	FtlVpcCheckAndModify
+	.type	FtlVpcCheckAndModify, %function
+FtlVpcCheckAndModify:
+	stp	x29, x30, [sp, -80]!
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC129
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x29, sp, 0
+	add	x1, x1, 16
+	add	x0, x0, :lo12:.LC129
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	adrp	x19, .LANCHOR2
+	str	x23, [sp,48]
+	bl	printk
+	mov	w20, 0
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 0
+	mov	x21, x19
+	ldrh	w2, [x0,758]
+	ldr	x0, [x0,1176]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+.L2457:
+	add	x19, x21, :lo12:.LANCHOR2
+	ldr	w0, [x19,1396]
+	cmp	w20, w0
+	bcs	.L2472
+	mov	w0, w20
+	add	x1, x29, 76
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L2458
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	ubfiz	x0, x0, 1, 16
+	ldr	x2, [x19,1176]
+	ldrh	w1, [x2,x0]
+	add	w1, w1, 1
+	strh	w1, [x2,x0]
+.L2458:
+	add	w20, w20, 1
+	b	.L2457
+.L2472:
+	adrp	x22, .LC130
+	mov	w20, 0
+	mov	w23, 65535
+	add	x22, x22, :lo12:.LC130
+.L2460:
+	ldrh	w0, [x19,756]
+	cmp	w0, w20
+	bls	.L2473
+	ubfiz	x21, x20, 1, 16
+	ldr	x0, [x19,1184]
+	ldrh	w2, [x0,x21]
+	ldr	x0, [x19,1176]
+	ldrh	w3, [x0,x21]
+	cmp	w2, w3
+	beq	.L2463
+	cmp	w2, w23
+	beq	.L2463
+	mov	x0, x22
+	mov	w1, w20
+	bl	printk
+	ldrh	w0, [x19,3608]
+	cmp	w0, w20
+	beq	.L2463
+	ldrh	w0, [x19,3704]
+	cmp	w0, w20
+	beq	.L2463
+	ldrh	w0, [x19,3656]
+	cmp	w0, w20
+	beq	.L2463
+	ldr	x0, [x19,1176]
+	ldrh	w1, [x0,x21]
+	ldr	x0, [x19,1184]
+	strh	w1, [x0,x21]
+	mov	w0, w20
+	bl	update_vpc_list
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2463:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L2460
+.L2473:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	FtlVpcCheckAndModify, .-FtlVpcCheckAndModify
+	.align	2
+	.global	allocate_new_data_superblock
+	.type	allocate_new_data_superblock, %function
+allocate_new_data_superblock:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x2, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	ldr	w1, [x2,1400]
+	ldrh	w22, [x0]
+	cbnz	w1, .L2475
+	mov	x21, x0
+	mov	w0, 65535
+	cmp	w22, w0
+	beq	.L2476
+	ubfiz	x1, x22, 1, 16
+	ldr	x0, [x2,1184]
+	ldrh	w0, [x0,x1]
+	cbz	w0, .L2477
+	mov	w0, w22
+	bl	INSERT_DATA_LIST
+	b	.L2476
+.L2477:
+	mov	w0, w22
+	bl	INSERT_FREE_LIST
+.L2476:
+	add	x1, x19, :lo12:.LANCHOR2
+	strb	wzr, [x21,8]
+	add	x0, x1, 3656
+	cmp	x21, x0
+	beq	.L2478
+	ldrh	w2, [x1,768]
+	cmp	w2, 1
+	beq	.L2478
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w0, .L2479
+.L2478:
+	mov	w0, 1
+	strb	w0, [x21,8]
+	b	.L2480
+.L2479:
+	add	x0, x1, 3608
+	cmp	x21, x0
+	bne	.L2480
+	cmp	w2, 3
+	beq	.L2482
+	ldr	w0, [x1,868]
+	cmp	w0, 1
+	bne	.L2483
+.L2482:
+	add	x1, x19, :lo12:.LANCHOR2
+	mov	w0, 1
+	strb	w0, [x1,3616]
+.L2483:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldr	w0, [x1,652]
+	cbz	w0, .L2480
+	ldr	w0, [x1,920]
+	cmp	w0, 29
+	bhi	.L2480
+	mov	w0, 1
+	strb	w0, [x1,3616]
+.L2480:
+	adrp	x1, .LANCHOR4
+	add	x0, x1, :lo12:.LANCHOR4
+	mov	x20, x1
+	ldrh	w2, [x0,160]
+	mov	w0, 65535
+	cmp	w2, w0
+	beq	.L2485
+	cmp	w22, w2
+	bne	.L2486
+	add	x19, x19, :lo12:.LANCHOR2
+	ubfiz	x1, x2, 1, 16
+	ldr	x0, [x19,1184]
+	ldrh	w0, [x0,x1]
+	cbz	w0, .L2487
+.L2486:
+	mov	w0, w2
+	bl	update_vpc_list
+.L2487:
+	add	x1, x20, :lo12:.LANCHOR4
+	mov	w0, -1
+	strh	w0, [x1,160]
+.L2485:
+	mov	x0, x21
+	bl	allocate_data_superblock
+	bl	l2p_flush
+	mov	w0, 0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2475:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	allocate_new_data_superblock, .-allocate_new_data_superblock
+	.align	2
+	.global	FtlReadRefresh
+	.type	FtlReadRefresh, %function
+FtlReadRefresh:
+	stp	x29, x30, [sp, -112]!
+	adrp	x1, .LANCHOR2
+	add	x0, x1, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	add	x2, x0, 3968
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	ldr	w3, [x2,80]
+	cbz	w3, .L2501
+	ldr	w3, [x2,84]
+	ldr	w1, [x0,1396]
+	cmp	w3, w1
+	bcs	.L2502
+	mov	w20, 2048
+	mov	x19, x0
+.L2507:
+	ldr	w0, [x19,4052]
+	ldr	w1, [x19,1396]
+	cmp	w0, w1
+	bcs	.L2504
+	add	x1, x29, 52
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x19,4052]
+	ldr	w1, [x29,52]
+	add	w0, w0, 1
+	str	w0, [x19,4052]
+	cmn	w1, #1
+	beq	.L2505
+	str	w1, [x29,60]
+	mov	w2, 0
+	str	w0, [x29,80]
+	mov	w1, 1
+	add	x0, x29, 56
+	str	xzr, [x29,64]
+	str	xzr, [x29,72]
+	str	wzr, [x29,56]
+	bl	FlashReadPages
+	ldr	w0, [x29,56]
+	cmp	w0, 256
+	bne	.L2504
+	ldr	w0, [x29,52]
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+	b	.L2504
+.L2505:
+	subs	w20, w20, #1
+	bne	.L2507
+.L2504:
+	mov	w0, -1
+	b	.L2509
+.L2502:
+	ldr	w0, [x0,900]
+	str	wzr, [x2,80]
+	str	wzr, [x2,84]
+	str	w0, [x2,76]
+	b	.L2515
+.L2501:
+	adrp	x2, .LANCHOR0+136
+	ldr	w3, [x0,916]
+	ldr	w0, [x0,652]
+	ldrb	w4, [x2,#:lo12:.LANCHOR0+136]
+	mov	w2, 4194304
+	cbnz	w4, .L2510
+	add	w0, w0, w3, lsr 10
+	mov	w3, 33554432
+	asr	w2, w3, w0
+.L2510:
+	add	x4, x1, :lo12:.LANCHOR2
+	ldr	w3, [x4,900]
+	ldr	w0, [x4,4044]
+	add	w5, w3, 1048576
+	cmp	w0, w5
+	bhi	.L2511
+	add	w0, w2, w0
+	cmp	w0, w3
+	bcc	.L2511
+	ldrb	w2, [x4,3548]
+	mov	w0, 0
+	cbnz	w2, .L2509
+.L2511:
+	add	x0, x1, :lo12:.LANCHOR2
+	mov	w1, 1
+	str	wzr, [x0,4052]
+	str	w1, [x0,4048]
+	str	w3, [x0,4044]
+.L2515:
+	mov	w0, 0
+.L2509:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FtlReadRefresh, .-FtlReadRefresh
+	.align	2
+	.global	ftl_do_gc
+	.type	ftl_do_gc, %function
+ftl_do_gc:
+	stp	x29, x30, [sp, -144]!
+	mov	w2, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x3, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w4, [x3,1400]
+	cbnz	w4, .L2661
+	ldr	w4, [x3,924]
+	cbnz	w4, .L2661
+	ldrh	w4, [x3,3584]
+	cmp	w4, 47
+	bls	.L2661
+	mov	w23, w0
+	adrp	x0, .LANCHOR1+3068
+	mov	w24, w1
+	ldrh	w1, [x0,#:lo12:.LANCHOR1+3068]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2518
+.L2521:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 65535
+	ldrh	w1, [x0,950]
+	cmp	w1, w2
+	bne	.L2519
+	b	.L2520
+.L2518:
+	ldrh	w1, [x3,3704]
+	cmp	w1, w0
+	beq	.L2521
+	mov	w0, 1
+	bl	FtlGcFreeTempBlock
+	mov	w2, 1
+	cbz	w0, .L2521
+	b	.L2661
+.L2519:
+	ldrh	w3, [x0,948]
+	cmp	w3, w2
+	bne	.L2520
+	strh	w1, [x0,948]
+	mov	w1, -1
+	strh	w1, [x0,950]
+.L2520:
+	add	x1, x19, :lo12:.LANCHOR2
+	cmp	w23, 1
+	ldr	w0, [x1,940]
+	add	w0, w0, 1
+	add	w0, w0, w23, lsl 7
+	str	w0, [x1,940]
+	bne	.L2532
+	ldr	w1, [x1,652]
+	cbnz	w1, .L2523
+	adrp	x1, .LANCHOR0+136
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+136]
+	cbz	w1, .L2532
+.L2523:
+	add	x20, x19, :lo12:.LANCHOR2
+	ldr	w1, [x20,920]
+	cmp	w1, 29
+	bhi	.L2532
+	adrp	x21, .LANCHOR4
+	add	x1, x21, :lo12:.LANCHOR4
+	ldrh	w1, [x1,360]
+	add	w0, w0, w1
+	str	w0, [x20,940]
+	bl	FtlGcReFreshBadBlk
+	ldrh	w0, [x20,3920]
+	mov	w1, 65535
+	cmp	w0, w1
+	bne	.L2532
+	ldrh	w1, [x20,948]
+	cmp	w1, w0
+	bne	.L2532
+	ldr	w0, [x20,940]
+	cmp	w0, 1024
+	bhi	.L2524
+	ldrh	w0, [x20,3600]
+	cmp	w0, 63
+	bhi	.L2532
+.L2524:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x21, :lo12:.LANCHOR4
+	ldrh	w2, [x0,954]
+	ldrh	w3, [x0,3600]
+	add	w2, w2, 64
+	strh	wzr, [x1,360]
+	cmp	w3, w2
+	bgt	.L2532
+	str	wzr, [x0,940]
+	ldr	w0, [x0,920]
+	cbnz	w0, .L2525
+	mov	w0, 6
+	b	.L2683
+.L2525:
+	cmp	w0, 5
+	bhi	.L2526
+	mov	w0, 18
+.L2683:
+	strh	w0, [x1,360]
+.L2526:
+	mov	w0, 32
+	mov	w27, 65535
+	bl	List_get_gc_head_node
+	uxth	w25, w0
+	cmp	w25, w27
+	beq	.L2531
+	add	x22, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x22,956]
+	cbz	w0, .L2528
+	ldrh	w1, [x22,820]
+	ubfiz	x25, x25, 1, 16
+	ldrh	w3, [x22,748]
+	ldr	x26, [x22,1184]
+	mul	w1, w1, w3
+	ldrh	w2, [x26,x25]
+	add	w1, w1, 1
+	cmp	w2, w1
+	bgt	.L2531
+	add	w1, w0, 1
+	str	wzr, [x22,928]
+	uxth	w1, w1
+	strh	w1, [x22,956]
+	str	x1, [x29,120]
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	cmp	w20, w27
+	ldr	x1, [x29,120]
+	beq	.L2531
+	ubfiz	x27, x20, 1, 16
+	adrp	x0, .LC131
+	ldrh	w4, [x26,x25]
+	add	x0, x0, :lo12:.LC131
+	mov	w2, w20
+	ldrh	w3, [x26,x27]
+	bl	printk
+	ldrh	w0, [x22,956]
+	cmp	w0, 40
+	bls	.L2529
+	ldr	x0, [x22,1184]
+	ldrh	w0, [x0,x27]
+	cmp	w0, 32
+	bls	.L2529
+	strh	wzr, [x22,956]
+.L2529:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w0, 6
+	strh	w0, [x21,360]
+	b	.L2533
+.L2528:
+	mov	w0, 1
+	strh	w0, [x22,956]
+.L2531:
+	bl	GetSwlReplaceBlock
+	uxth	w20, w0
+	mov	w0, 65535
+	cmp	w20, w0
+	bne	.L2533
+	add	x21, x21, :lo12:.LANCHOR4
+	strh	wzr, [x21,360]
+.L2532:
+	add	x22, x19, :lo12:.LANCHOR2
+	mov	w0, 65535
+	ldrh	w20, [x22,3920]
+	cmp	w20, w0
+	bne	.L2689
+	ldrh	w0, [x22,3704]
+	cmp	w0, w20
+	beq	.L2690
+.L2533:
+	mov	w0, 65535
+	cmp	w20, w0
+	cset	w1, eq
+	cbz	w1, .L2546
+	cbnz	w23, .L2546
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w21, 1
+	ldrh	w1, [x0,3600]
+	cmp	w1, 24
+	bhi	.L2547
+	cmp	w1, 16
+	ldrh	w21, [x0,818]
+	bls	.L2548
+	lsr	w21, w21, 5
+	b	.L2547
+.L2548:
+	cmp	w1, 12
+	bls	.L2549
+	lsr	w21, w21, 4
+	b	.L2547
+.L2549:
+	lsr	w0, w21, 2
+	cmp	w1, 9
+	csel	w21, w0, w21, cs
+.L2547:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x0,952]
+	cmp	w2, w1
+	bcs	.L2551
+	ldrh	w1, [x0,3704]
+	mov	w2, 65535
+	cmp	w1, w2
+	bne	.L2552
+	ldrh	w2, [x0,948]
+	cmp	w2, w1
+	bne	.L2552
+	adrp	x1, .LANCHOR4+360
+	ldrh	w2, [x1,#:lo12:.LANCHOR4+360]
+	cbnz	w2, .L2553
+	ldr	w1, [x0,1396]
+	ldr	w3, [x0,3892]
+	add	w1, w1, w1, lsl 1
+	cmp	w3, w1, lsr 2
+	bcs	.L2554
+.L2553:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,3916]
+	add	w0, w0, w0, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x1,952]
+	b	.L2555
+.L2554:
+	mov	w1, 18
+	strh	w1, [x0,952]
+.L2555:
+	add	x19, x19, :lo12:.LANCHOR2
+	str	wzr, [x19,928]
+	b	.L2661
+.L2552:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,3916]
+	add	w0, w0, w0, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x1,952]
+.L2551:
+	cmp	w24, 2
+	bhi	.L2616
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w0, [x0,652]
+	cbz	w0, .L2616
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L2616
+.L2546:
+	add	x21, x19, :lo12:.LANCHOR2
+	mov	w2, 65535
+	ldrh	w0, [x21,3704]
+	cmp	w0, w2
+	bne	.L2558
+	cbz	w1, .L2558
+	ldrh	w1, [x21,948]
+	cmp	w1, w0
+	bne	.L2558
+	ldrh	w1, [x21,3920]
+	cmp	w1, w0
+	beq	.L2559
+.L2564:
+	mov	w20, 65535
+	b	.L2558
+.L2559:
+	ldrh	w24, [x21,3600]
+	adrp	x20, .LANCHOR4
+	ldrh	w0, [x21,952]
+	str	wzr, [x21,928]
+	cmp	w0, w24
+	bcs	.L2560
+	add	x0, x20, :lo12:.LANCHOR4
+	ldrh	w0, [x0,360]
+	cbnz	w0, .L2561
+	ldr	w0, [x21,1396]
+	ldr	w1, [x21,3892]
+	add	w0, w0, w0, lsl 1
+	cmp	w1, w0, lsr 2
+	bcs	.L2562
+.L2561:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x19,3916]
+	add	w0, w0, w0, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x19,952]
+	b	.L2563
+.L2562:
+	mov	w0, 18
+	strh	w0, [x21,952]
+.L2563:
+	add	x20, x20, :lo12:.LANCHOR4
+	bl	FtlReadRefresh
+	ldrh	w2, [x20,360]
+	b	.L2661
+.L2560:
+	add	x22, x20, :lo12:.LANCHOR4
+	ldrh	w0, [x22,360]
+	cbnz	w0, .L2564
+	ldrh	w20, [x21,3916]
+	add	w1, w20, w20, lsl 1
+	asr	w1, w1, 2
+	strh	w1, [x21,952]
+	bl	List_get_gc_head_node
+	ubfiz	x0, x0, 1, 16
+	ldr	x1, [x21,1184]
+	ldrh	w2, [x21,748]
+	ldrh	w1, [x1,x0]
+	ldrh	w0, [x21,820]
+	mul	w0, w0, w2
+	mov	w2, 2
+	sdiv	w0, w0, w2
+	cmp	w1, w0
+	ble	.L2565
+	sub	w20, w20, #1
+	cmp	w24, w20
+	blt	.L2565
+	bl	FtlReadRefresh
+	b	.L2687
+.L2565:
+	cbnz	w1, .L2564
+	mov	w0, -1
+	add	x19, x19, :lo12:.LANCHOR2
+	bl	decrement_vpc_count
+	ldrh	w2, [x19,3600]
+	add	w2, w2, 1
+	b	.L2661
+.L2558:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w21, 2
+	ldr	w0, [x0,652]
+	cmp	w0, wzr
+	csinc	w21, w21, wzr, ne
+	b	.L2557
+.L2616:
+	mov	w20, 65535
+.L2557:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w2, 65535
+	ldrh	w1, [x0,3920]
+	cmp	w1, w2
+	bne	.L2567
+	cmp	w20, w1
+	beq	.L2568
+	strh	w20, [x0,3920]
+	b	.L2569
+.L2568:
+	ldrh	w1, [x0,948]
+	cmp	w1, w20
+	beq	.L2569
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x0,1184]
+	ldrh	w1, [x2,x1]
+	cbnz	w1, .L2570
+	mov	w1, -1
+	strh	w1, [x0,948]
+.L2570:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,948]
+	strh	w1, [x0,3920]
+	mov	w1, -1
+	strh	w1, [x0,948]
+.L2569:
+	add	x22, x19, :lo12:.LANCHOR2
+	mov	w1, 65535
+	ldrh	w0, [x22,3920]
+	strb	wzr, [x22,3928]
+	cmp	w0, w1
+	beq	.L2567
+	bl	IsBlkInGcList
+	cbz	w0, .L2572
+	mov	w0, -1
+	strh	w0, [x22,3920]
+.L2572:
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w0, .L2573
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x22, x0, 3920
+	ldrh	w0, [x0,3920]
+	bl	ftl_get_blk_mode
+	strb	w0, [x22,8]
+.L2573:
+	add	x22, x19, :lo12:.LANCHOR2
+	mov	w0, 65535
+	add	x24, x22, 3920
+	ldrh	w1, [x22,3920]
+	cmp	w1, w0
+	beq	.L2567
+	mov	x0, x24
+	bl	make_superblock
+	strh	wzr, [x22,3922]
+	adrp	x0, .LANCHOR4
+	ldrh	w2, [x22,3920]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x1, [x22,1184]
+	strb	wzr, [x22,3926]
+	strh	wzr, [x0,362]
+	ldrh	w1, [x1,x2,lsl 1]
+	strh	w1, [x0,364]
+.L2567:
+	add	x3, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x3,3920]
+	ldrh	w1, [x3,3608]
+	cmp	w1, w0
+	beq	.L2574
+	ldrh	w1, [x3,3656]
+	cmp	w1, w0
+	beq	.L2574
+.L2575:
+	mov	x28, x3
+	mov	w24, 65535
+	b	.L2576
+.L2574:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	w0, [x19,3920]
+	b	.L2688
+.L2597:
+	ldrh	w0, [x28,3922]
+	add	w21, w21, w0
+	uxth	w21, w21
+	strh	w21, [x28,3922]
+	cmp	w21, w25
+	bcs	.L2691
+.L2599:
+	ldrh	w0, [x28,3600]
+	cmp	w0, 2
+	bhi	.L2602
+	ldrh	w21, [x28,818]
+.L2576:
+	ldrh	w0, [x28,3920]
+	cmp	w0, w24
+	bne	.L2577
+	str	wzr, [x28,928]
+	adrp	x25, .LANCHOR4
+.L2578:
+	ldrh	w22, [x28,956]
+	mov	w0, w22
+	bl	List_get_gc_head_node
+	uxth	w26, w0
+	cmp	w26, w24
+	strh	w26, [x28,3920]
+	bne	.L2579
+	strh	wzr, [x28,956]
+	mov	w2, 8
+	b	.L2661
+.L2579:
+	mov	w0, w26
+	add	w22, w22, 1
+	bl	IsBlkInGcList
+	cbz	w0, .L2580
+	strh	w22, [x28,956]
+	b	.L2578
+.L2580:
+	ldrh	w5, [x28,748]
+	ubfiz	x1, x26, 1, 16
+	ldrh	w0, [x28,818]
+	uxth	w22, w22
+	ldr	x2, [x28,1184]
+	mov	w3, 2
+	strh	w22, [x28,956]
+	mul	w0, w0, w5
+	ldrh	w4, [x2,x1]
+	sdiv	w5, w0, w3
+	cmp	w4, w5
+	bgt	.L2582
+	cmp	w4, 8
+	bls	.L2583
+	cmp	w22, 48
+	bls	.L2583
+	add	x4, x25, :lo12:.LANCHOR4
+	ldrh	w4, [x4,176]
+	cmp	w4, 35
+	bhi	.L2583
+.L2582:
+	strh	wzr, [x28,956]
+.L2583:
+	ldrh	w1, [x2,x1]
+	cmp	w1, w0
+	blt	.L2584
+	cmp	w20, w24
+	bne	.L2584
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	wzr, [x19,956]
+	strh	w0, [x19,3920]
+.L2688:
+	adrp	x0, .LANCHOR4+360
+	ldrh	w2, [x0,#:lo12:.LANCHOR4+360]
+	b	.L2661
+.L2584:
+	cbnz	w1, .L2585
+	mov	w0, -1
+	bl	decrement_vpc_count
+	ldrh	w0, [x28,956]
+	add	w0, w0, 1
+	strh	w0, [x28,956]
+	b	.L2578
+.L2585:
+	adrp	x0, .LANCHOR0
+	strb	wzr, [x28,3928]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2586
+	mov	w0, w26
+	bl	ftl_get_blk_mode
+	strb	w0, [x28,3928]
+.L2586:
+	add	x22, x28, 3920
+	mov	x0, x22
+	bl	make_superblock
+	adrp	x1, .LANCHOR4
+	ldrh	w2, [x28,3920]
+	add	x1, x1, :lo12:.LANCHOR4
+	ldr	x0, [x28,1184]
+	strh	wzr, [x1,362]
+	ldrh	w0, [x0,x2,lsl 1]
+	strh	w0, [x1,364]
+	strh	wzr, [x28,3922]
+	strb	wzr, [x28,3926]
+.L2577:
+	cmp	w23, 1
+	bne	.L2587
+	bl	FtlReadRefresh
+.L2587:
+	mov	w0, 1
+	str	w0, [x28,924]
+	adrp	x0, .LANCHOR0
+	ldrh	w25, [x28,818]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2588
+	ldrb	w0, [x28,3928]
+	cmp	w0, 1
+	bne	.L2588
+	ldrh	w25, [x28,820]
+.L2588:
+	ldrh	w0, [x28,3922]
+	add	w1, w0, w21
+	cmp	w1, w25
+	ble	.L2589
+	sub	w21, w25, w0
+	uxth	w21, w21
+.L2589:
+	mov	w26, 0
+.L2590:
+	cmp	w21, w26, uxth
+	bls	.L2597
+	add	x1, x28, 3920
+	ldrh	w4, [x1,2]
+	mov	x0, 0
+	ldrh	w6, [x28,748]
+	add	w4, w4, w26
+	mov	w22, w0
+.L2598:
+	cmp	w6, w0, uxth
+	bls	.L2692
+	add	x2, x1, x0, lsl 1
+	ldrh	w2, [x2,16]
+	cmp	w2, w24
+	beq	.L2591
+	mov	w3, 56
+	ldr	x7, [x28,1024]
+	orr	w2, w4, w2, lsl 10
+	umull	x5, w22, w3
+	add	w22, w22, 1
+	add	x5, x7, x5
+	uxth	w22, w22
+	str	w2, [x5,4]
+.L2591:
+	add	x0, x0, 1
+	b	.L2598
+.L2692:
+	ldr	x0, [x28,1024]
+	mov	w1, w22
+	ldrb	w2, [x28,3928]
+	mov	x27, 0
+	bl	FlashReadPages
+.L2593:
+	cmp	w22, w27, uxth
+	bls	.L2693
+	mov	x0, 56
+	mul	x5, x27, x0
+	ldr	x0, [x28,1024]
+	add	x1, x0, x5
+	ldr	w0, [x0,x5]
+	cmn	w0, #1
+	ldr	x4, [x1,16]
+	beq	.L2618
+	ldrh	w0, [x4]
+	mov	w1, 61589
+	cmp	w0, w1
+	bne	.L2618
+	ldr	w0, [x4,8]
+	add	x1, x29, 140
+	mov	w2, 0
+	str	x5, [x29,112]
+	str	x4, [x29,120]
+	bl	log2phys
+	ldr	x6, [x28,1024]
+	ldr	x5, [x29,112]
+	ldr	w0, [x29,140]
+	add	x6, x6, x5
+	ldr	x4, [x29,120]
+	and	w0, w0, 2147483647
+	ldr	w1, [x6,4]
+	cmp	w0, w1
+	bne	.L2618
+	adrp	x0, .LANCHOR4
+	ldr	x1, [x28,1000]
+	add	x2, x0, :lo12:.LANCHOR4
+	str	x2, [x29,112]
+	str	x5, [x29,96]
+	str	x4, [x29,104]
+	ldrh	w0, [x2,362]
+	add	w0, w0, 1
+	strh	w0, [x2,362]
+	ldr	w0, [x2,144]
+	mov	x2, 56
+	madd	x1, x0, x2, x1
+	ldr	w0, [x6,24]
+	str	x1, [x29,120]
+	str	w0, [x1,24]
+	bl	Ftl_get_new_temp_ppa
+	ldr	x1, [x29,120]
+	mov	x3, 56
+	ldr	x2, [x29,112]
+	ldr	x5, [x29,96]
+	str	w0, [x1,4]
+	ldr	w0, [x2,144]
+	ldr	x1, [x28,1000]
+	ldr	x4, [x29,104]
+	str	x2, [x29,120]
+	madd	x0, x0, x3, x1
+	ldr	x1, [x28,1024]
+	add	x1, x1, x5
+	ldr	x6, [x1,8]
+	str	x6, [x0,8]
+	add	x6, x28, 3704
+	str	x6, [x29,112]
+	ldr	x1, [x1,16]
+	str	x1, [x0,16]
+	mov	w1, 1
+	ldr	w0, [x29,140]
+	str	w0, [x4,12]
+	ldrh	w0, [x28,3704]
+	strh	w0, [x4,2]
+	ldr	w0, [x28,876]
+	str	w0, [x4,4]
+	ldr	w0, [x2,144]
+	add	w0, w0, 1
+	str	w0, [x2,144]
+	ldr	x0, [x28,1024]
+	add	x0, x0, x5
+	bl	FtlGcBufAlloc
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbnz	w0, .L2595
+	ldr	x6, [x29,112]
+	ldr	x2, [x29,120]
+	ldrb	w0, [x6,7]
+	ldr	w1, [x2,144]
+	cmp	w1, w0
+	beq	.L2595
+	ldrh	w0, [x6,4]
+	cbnz	w0, .L2618
+.L2595:
+	bl	Ftl_gc_temp_data_write_back
+	cbz	w0, .L2618
+	adrp	x0, .LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR4
+	str	wzr, [x19,924]
+	ldrh	w2, [x0,360]
+	b	.L2661
+.L2618:
+	add	x27, x27, 1
+	b	.L2593
+.L2693:
+	add	w26, w26, 1
+	b	.L2590
+.L2691:
+	adrp	x0, .LANCHOR4
+	add	x22, x0, :lo12:.LANCHOR4
+	mov	x21, x0
+	ldr	w1, [x22,144]
+	cbz	w1, .L2600
+	bl	Ftl_gc_temp_data_write_back
+	cbz	w0, .L2600
+	str	wzr, [x28,924]
+.L2687:
+	ldrh	w2, [x22,360]
+	b	.L2661
+.L2600:
+	add	x0, x21, :lo12:.LANCHOR4
+	ldrh	w2, [x0,362]
+	cbnz	w2, .L2601
+	ldrh	w0, [x28,3920]
+	ldr	x1, [x28,1184]
+	lsl	x0, x0, 1
+	ldrh	w4, [x1,x0]
+	cbz	w4, .L2601
+	strh	w2, [x1,x0]
+	ldrh	w0, [x28,3920]
+	bl	update_vpc_list
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2601:
+	mov	w0, -1
+	strh	w0, [x28,3920]
+	b	.L2599
+.L2602:
+	adrp	x1, .LANCHOR4+360
+	str	wzr, [x28,924]
+	ldrh	w2, [x1,#:lo12:.LANCHOR4+360]
+	cmp	w2, wzr
+	csinc	w2, w2, w0, ne
+	b	.L2661
+.L2690:
+	ldrh	w25, [x22,948]
+	cmp	w25, w20
+	bne	.L2533
+	ldrh	w0, [x22,3600]
+	mov	w2, 1024
+	ldr	w1, [x22,940]
+	cmp	w0, 24
+	mov	w0, 5120
+	csel	w0, w0, w2, cc
+	cmp	w1, w0
+	bls	.L2533
+	adrp	x0, .LANCHOR4+360
+	str	wzr, [x22,940]
+	strh	wzr, [x0,#:lo12:.LANCHOR4+360]
+	bl	GetSwlReplaceBlock
+	uxth	w20, w0
+	cmp	w20, w25
+	bne	.L2535
+	ldrh	w1, [x22,3600]
+	ldrh	w0, [x22,954]
+	cmp	w1, w0
+	bcs	.L2536
+	mov	w0, 64
+	bl	List_get_gc_head_node
+	uxth	w0, w0
+	cmp	w0, w20
+	beq	.L2545
+	ldr	w2, [x22,864]
+	uxtw	x1, w0
+	cbnz	w2, .L2538
+	ldrh	w0, [x22,768]
+	cmp	w0, 3
+	beq	.L2538
+	ldr	w0, [x22,868]
+	cbnz	w0, .L2538
+	ldr	w0, [x22,652]
+	cbnz	w0, .L2538
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w0, .L2539
+.L2538:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldr	x0, [x2,1184]
+	ldrh	w4, [x0,x1,lsl 1]
+	ldrh	w1, [x2,820]
+	ldrh	w0, [x2,748]
+	ldrh	w2, [x2,768]
+	mul	w3, w1, w0
+	cmp	w2, 3
+	mov	w0, 0
+	lsr	w1, w1, 1
+	csel	w0, w1, w0, eq
+	add	w0, w3, w0
+	cmp	w4, w0
+	bgt	.L2541
+	mov	w0, 0
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w1, [x0,1396]
+	ldr	w2, [x0,3892]
+	add	w1, w1, w1, lsl 1
+	cmp	w2, w1, lsr 2
+	bhi	.L2685
+	mov	w1, 160
+	b	.L2684
+.L2541:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 128
+	b	.L2686
+.L2539:
+	ldr	x2, [x22,1184]
+	ldrh	w1, [x2,x1,lsl 1]
+	cmp	w1, 7
+	bhi	.L2544
+	bl	List_get_gc_head_node
+	uxth	w20, w0
+	add	x0, x19, :lo12:.LANCHOR2
+.L2685:
+	mov	w1, 128
+.L2684:
+	strh	w1, [x0,954]
+	mov	w0, 65535
+	cmp	w20, w0
+	beq	.L2545
+	b	.L2535
+.L2544:
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, 64
+.L2686:
+	strh	w1, [x0,954]
+	b	.L2545
+.L2536:
+	mov	w0, 80
+	strh	w0, [x22,954]
+	b	.L2545
+.L2535:
+	add	x5, x19, :lo12:.LANCHOR2
+	ubfiz	x4, x20, 1, 32
+	adrp	x0, .LC132
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC132
+	ldr	x3, [x5,1184]
+	ldr	x6, [x5,1168]
+	ldrh	w2, [x5,3600]
+	ldrh	w3, [x3,x4]
+	ldrh	w5, [x5,952]
+	ldrh	w4, [x6,x4]
+	bl	printk
+.L2545:
+	bl	FtlGcReFreshBadBlk
+	b	.L2533
+.L2689:
+	mov	w20, w0
+	b	.L2533
+.L2661:
+	mov	w0, w2
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	ftl_do_gc, .-ftl_do_gc
+	.align	2
+	.global	FtlCacheWriteBack
+	.type	FtlCacheWriteBack, %function
+FtlCacheWriteBack:
+	stp	x29, x30, [sp, -112]!
+	adrp	x0, .LANCHOR4+368
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	ldr	x20, [x0,#:lo12:.LANCHOR4+368]
+	add	x0, x19, :lo12:.LANCHOR2
+	str	x27, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w22, [x0,1400]
+	cbnz	w22, .L2696
+	ldr	w1, [x0,968]
+	cbz	w1, .L2696
+	adrp	x0, .LANCHOR0+136
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	cbz	w0, .L2698
+	ldrb	w0, [x20,8]
+	cmp	w0, 1
+	cset	w22, eq
+.L2698:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrb	w3, [x20,9]
+	adrp	x24, .LC133
+	mov	w2, w22
+	mov	w23, 0
+	mov	w26, 56
+	ldr	x0, [x0,1032]
+	add	x24, x24, :lo12:.LC133
+	bl	FlashProgPages
+.L2699:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w1, [x0,968]
+	cmp	w23, w1
+	bcs	.L2716
+	umull	x21, w23, w26
+	ldr	x1, [x0,1032]
+	add	x0, x1, x21
+	ldr	w25, [x1,x21]
+	cmn	w25, #1
+	beq	.L2719
+	ldr	w1, [x0,4]
+	cbz	w22, .L2733
+	orr	w1, w1, -2147483648
+.L2733:
+	ldr	w0, [x0,24]
+	mov	w2, 1
+	str	w1, [x29,108]
+	add	x25, x19, :lo12:.LANCHOR2
+	add	x1, x29, 108
+	bl	log2phys
+	ldr	x0, [x25,1032]
+	add	x21, x0, x21
+	ldr	x0, [x21,16]
+	ldr	w0, [x0,12]
+	cmn	w0, #1
+	beq	.L2703
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	uxth	w1, w0
+	ubfiz	x0, x1, 1, 16
+	ldr	x2, [x25,1184]
+	mov	w21, w1
+	ldrh	w2, [x2,x0]
+	cbnz	w2, .L2704
+	mov	x0, x24
+	bl	printk
+.L2704:
+	mov	w0, w21
+	bl	decrement_vpc_count
+.L2703:
+	add	w23, w23, 1
+	b	.L2699
+.L2735:
+	mov	w20, 16386
+.L2715:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,958]
+	cbz	w0, .L2716
+	mov	w0, 1
+	mov	w1, w0
+	bl	ftl_do_gc
+	subs	w20, w20, #1
+	bne	.L2715
+.L2716:
+	add	x19, x19, :lo12:.LANCHOR2
+	str	wzr, [x19,968]
+	b	.L2696
+.L2719:
+	adrp	x26, .LC133
+	mov	w24, 0
+	mov	w27, 56
+	add	x26, x26, :lo12:.LC133
+.L2700:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	w1, [x0,968]
+	cmp	w24, w1
+	bcs	.L2735
+	umull	x21, w24, w27
+	ldr	x0, [x0,1032]
+	str	w25, [x0,x21]
+.L2706:
+	add	x23, x19, :lo12:.LANCHOR2
+	ldr	x0, [x23,1032]
+	add	x1, x0, x21
+	ldr	w0, [x0,x21]
+	cmn	w0, #1
+	ldr	w0, [x1,4]
+	bne	.L2736
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	ldrh	w1, [x20]
+	cmp	w1, w0, uxth
+	bne	.L2707
+	ldr	x2, [x23,1184]
+	ubfiz	x1, x1, 1, 16
+	ldrh	w3, [x20,4]
+	ldrh	w0, [x2,x1]
+	sub	w0, w0, w3
+	strh	w0, [x2,x1]
+	strb	wzr, [x20,6]
+	ldrh	w0, [x23,818]
+	strh	w0, [x20,2]
+	strh	wzr, [x20,4]
+.L2707:
+	ldrh	w0, [x20,4]
+	cbnz	w0, .L2708
+	mov	x0, x20
+	bl	allocate_new_data_superblock
+.L2708:
+	add	x23, x19, :lo12:.LANCHOR2
+	ldr	w0, [x23,4064]
+	add	w0, w0, 1
+	str	w0, [x23,4064]
+	ldr	x0, [x23,1032]
+	add	x0, x0, x21
+	ldr	w0, [x0,4]
+	lsr	x0, x0, 10
+	bl	FtlGcMarkBadPhyBlk
+	mov	x0, x20
+	bl	get_new_active_ppa
+	str	w0, [x29,108]
+	ldr	x1, [x23,1032]
+	mov	w2, w22
+	add	x1, x1, x21
+	str	w0, [x1,4]
+	mov	w1, 1
+	ldr	x0, [x23,1032]
+	ldrb	w3, [x20,9]
+	add	x0, x0, x21
+	bl	FlashProgPages
+	ldr	w0, [x23,1400]
+	cbz	w0, .L2706
+	b	.L2696
+.L2736:
+	cbz	w22, .L2734
+	orr	w0, w0, -2147483648
+.L2734:
+	str	w0, [x29,108]
+	mov	w2, 1
+	ldr	w0, [x1,24]
+	add	x23, x19, :lo12:.LANCHOR2
+	add	x1, x29, 108
+	bl	log2phys
+	ldr	x0, [x23,1032]
+	add	x21, x0, x21
+	ldr	x0, [x21,16]
+	ldr	w0, [x0,12]
+	cmn	w0, #1
+	beq	.L2712
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	uxth	w1, w0
+	ubfiz	x0, x1, 1, 16
+	ldr	x2, [x23,1184]
+	mov	w21, w1
+	ldrh	w2, [x2,x0]
+	cbnz	w2, .L2713
+	mov	x0, x26
+	bl	printk
+.L2713:
+	mov	w0, w21
+	bl	decrement_vpc_count
+.L2712:
+	add	w24, w24, 1
+	b	.L2700
+.L2696:
+	mov	w0, 0
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	FtlCacheWriteBack, .-FtlCacheWriteBack
+	.align	2
+	.global	FtlSysFlush
+	.type	FtlSysFlush, %function
+FtlSysFlush:
+	adrp	x0, .LANCHOR2+1400
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w0, [x0,#:lo12:.LANCHOR2+1400]
+	cbnz	w0, .L2738
+	bl	FtlCacheWriteBack
+	bl	l2p_flush
+	mov	w0, 1
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2738:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlSysFlush, .-FtlSysFlush
+	.align	2
+	.global	FtlDeInit
+	.type	FtlDeInit, %function
+FtlDeInit:
+	adrp	x0, .LANCHOR1+3064
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	w0, [x0,#:lo12:.LANCHOR1+3064]
+	cmp	w0, 1
+	bne	.L2740
+	bl	FtlSysFlush
+.L2740:
+	mov	w0, 0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlDeInit, .-FtlDeInit
+	.align	2
+	.global	ftl_deinit
+	.type	ftl_deinit, %function
+ftl_deinit:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	ftl_flash_de_init
+	bl	FtlDeInit
+	bl	ftl_flash_de_init
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_deinit, .-ftl_deinit
+	.align	2
+	.global	ftl_cache_flush
+	.type	ftl_cache_flush, %function
+ftl_cache_flush:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	FtlCacheWriteBack
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_cache_flush, .-ftl_cache_flush
+	.align	2
+	.global	ftl_discard
+	.type	ftl_discard, %function
+ftl_discard:
+	stp	x29, x30, [sp, -80]!
+	add	w2, w0, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w0
+	adrp	x0, .LANCHOR0+4048
+	mov	w19, w1
+	str	x23, [sp,48]
+	stp	x21, x22, [sp,32]
+	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
+	mov	w0, -1
+	cmp	w2, w1
+	bhi	.L2744
+	cmp	w19, 31
+	bls	.L2758
+	adrp	x22, .LANCHOR2
+	add	x21, x22, :lo12:.LANCHOR2
+	ldr	w0, [x21,1400]
+	cbnz	w0, .L2758
+	bl	FtlCacheWriteBack
+	ldrh	w1, [x21,824]
+	udiv	w21, w20, w1
+	msub	w20, w1, w21, w20
+	uxth	w20, w20
+	cbz	w20, .L2747
+	sub	w1, w1, w20
+	add	w21, w21, 1
+	cmp	w1, w19
+	csel	w1, w1, w19, ls
+	sub	w19, w19, w1, uxth
+.L2747:
+	mov	w0, -1
+	adrp	x23, .LANCHOR4
+	str	w0, [x29,76]
+.L2748:
+	add	x20, x22, :lo12:.LANCHOR2
+	ldrh	w0, [x20,824]
+	cmp	w19, w0
+	bcc	.L2759
+	mov	w0, w21
+	add	x1, x29, 72
+	mov	w2, 0
+	bl	log2phys
+	ldr	w0, [x29,72]
+	cmn	w0, #1
+	beq	.L2749
+	add	x1, x23, :lo12:.LANCHOR4
+	mov	w2, 1
+	ldr	w0, [x1,376]
+	add	w0, w0, 1
+	str	w0, [x1,376]
+	ldr	w0, [x20,888]
+	add	x1, x29, 76
+	add	w0, w0, 1
+	str	w0, [x20,888]
+	mov	w0, w21
+	bl	log2phys
+	ldr	w0, [x29,72]
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	bl	decrement_vpc_count
+.L2749:
+	add	x0, x22, :lo12:.LANCHOR2
+	add	w21, w21, 1
+	ldrh	w0, [x0,824]
+	sub	w19, w19, w0
+	b	.L2748
+.L2759:
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w1, [x0,376]
+	cmp	w1, 32
+	bls	.L2758
+	str	wzr, [x0,376]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+.L2758:
+	mov	w0, 0
+.L2744:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	ftl_discard, .-ftl_discard
+	.align	2
+	.global	FtlGcFreeTempBlock
+	.type	FtlGcFreeTempBlock, %function
+FtlGcFreeTempBlock:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x2, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w3, [x2,1400]
+	ldrh	w1, [x2,818]
+	cbnz	w3, .L2795
+	ldrh	w20, [x2,3704]
+	mov	w4, 65535
+	cmp	w20, w4
+	bne	.L2763
+.L2772:
+	add	x20, x19, :lo12:.LANCHOR2
+	adrp	x21, .LANCHOR4
+	add	x22, x21, :lo12:.LANCHOR4
+	mov	w0, 65535
+	add	x23, x20, 3704
+	ldrh	w1, [x20,3704]
+	str	wzr, [x22,168]
+	cmp	w1, w0
+	beq	.L2795
+	bl	FtlCacheWriteBack
+	mov	w26, 12
+	ldrb	w0, [x23,7]
+	ldrh	w3, [x20,818]
+	ldr	x1, [x20,1184]
+	ldrh	w2, [x20,3704]
+	mul	w0, w0, w3
+	strh	w0, [x1,x2,lsl 1]
+	ldrh	w1, [x22,178]
+	mov	w22, 0
+	ldr	w0, [x20,880]
+	add	w0, w1, w0
+	str	w0, [x20,880]
+	b	.L2773
+.L2763:
+	cbz	w0, .L2766
+	adrp	x0, .LANCHOR1
+	add	x0, x0, :lo12:.LANCHOR1
+	ldrh	w5, [x0,3068]
+	cmp	w5, w4
+	beq	.L2767
+.L2768:
+	mov	w1, 2
+	b	.L2766
+.L2767:
+	strh	w3, [x0,3068]
+	ldrh	w0, [x2,3600]
+	cmp	w0, 17
+	bhi	.L2768
+.L2766:
+	add	x21, x19, :lo12:.LANCHOR2
+	add	x0, x21, 3704
+	bl	FtlGcScanTempBlk
+	str	w0, [x29,92]
+	cmn	w0, #1
+	beq	.L2769
+	ubfiz	x20, x20, 1, 16
+	ldr	x1, [x21,1168]
+	ldrh	w0, [x1,x20]
+	cmp	w0, 4
+	bls	.L2770
+	sub	w0, w0, #5
+	strh	w0, [x1,x20]
+	mov	w0, 1
+	bl	FtlEctTblFlush
+.L2770:
+	adrp	x0, .LANCHOR4
+	add	x1, x0, :lo12:.LANCHOR4
+	mov	x20, x0
+	ldr	w1, [x1,168]
+	cbnz	w1, .L2771
+	add	x19, x19, :lo12:.LANCHOR2
+	ldr	w0, [x19,4064]
+	add	w0, w0, 1
+	str	w0, [x19,4064]
+	ldr	w0, [x29,92]
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+.L2771:
+	add	x0, x20, :lo12:.LANCHOR4
+	str	wzr, [x0,168]
+	mov	w0, 1
+	b	.L2762
+.L2769:
+	adrp	x0, .LANCHOR1+3068
+	mov	w1, 65535
+	ldrh	w2, [x0,#:lo12:.LANCHOR1+3068]
+	mov	w0, 1
+	cmp	w2, w1
+	bne	.L2762
+	b	.L2772
+.L2776:
+	ldr	x25, [x20,984]
+	add	x1, x29, 92
+	umull	x24, w22, w26
+	mov	w2, 0
+	add	x23, x25, x24
+	ldr	w0, [x23,8]
+	bl	log2phys
+	ldr	w0, [x29,92]
+	ldr	w1, [x25,x24]
+	cmp	w0, w1
+	bne	.L2774
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	mov	w24, w0
+	ldr	w0, [x23,8]
+	add	x1, x23, 4
+	mov	w2, 1
+	bl	log2phys
+	mov	w0, w24
+.L2794:
+	bl	decrement_vpc_count
+.L2775:
+	add	w22, w22, 1
+	uxth	w22, w22
+.L2773:
+	add	x0, x21, :lo12:.LANCHOR4
+	ldrh	w0, [x0,178]
+	cmp	w0, w22
+	bhi	.L2776
+	b	.L2796
+.L2774:
+	ldr	w1, [x23,4]
+	cmp	w0, w1
+	beq	.L2775
+	ldrh	w0, [x20,3704]
+	b	.L2794
+.L2796:
+	mov	w0, -1
+	adrp	x20, .LANCHOR0
+	bl	decrement_vpc_count
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2777
+	add	x1, x19, :lo12:.LANCHOR2
+	adrp	x0, .LC134
+	add	x0, x0, :lo12:.LC134
+	ldrh	w1, [x1,3704]
+	bl	printk
+.L2777:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,3704]
+	ldr	x1, [x1,1184]
+	ubfiz	x2, x0, 1, 16
+	ldrh	w1, [x1,x2]
+	cbz	w1, .L2778
+	bl	INSERT_DATA_LIST
+	b	.L2779
+.L2778:
+	bl	INSERT_FREE_LIST
+.L2779:
+	add	x22, x19, :lo12:.LANCHOR2
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w0, -1
+	strh	wzr, [x21,178]
+	strh	w0, [x22,3704]
+	strh	wzr, [x21,176]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	ldr	w0, [x22,652]
+	cbz	w0, .L2780
+	ldr	w0, [x22,920]
+	cmp	w0, 29
+	bhi	.L2780
+	ldrh	w0, [x22,3916]
+	ldrh	w1, [x22,3600]
+	cmp	w1, w0
+	bcs	.L2781
+	lsl	w0, w0, 1
+	strh	w0, [x22,952]
+.L2781:
+	add	x19, x19, :lo12:.LANCHOR2
+	mov	w0, -1
+	strh	w0, [x19,3920]
+.L2795:
+	mov	w0, 0
+	b	.L2762
+.L2780:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x19,3916]
+	ldrh	w0, [x19,3600]
+	add	w2, w1, w1, lsl 1
+	cmp	w0, w2, lsr 2
+	ble	.L2795
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w0, -1
+	strh	w0, [x19,3920]
+	ldrb	w0, [x20,136]
+	cbz	w0, .L2782
+	sub	w1, w1, #2
+	strh	w1, [x19,952]
+	b	.L2795
+.L2782:
+	mov	w1, 20
+	strh	w1, [x19,952]
+.L2762:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	FtlGcFreeTempBlock, .-FtlGcFreeTempBlock
+	.align	2
+	.global	FtlGcPageRecovery
+	.type	FtlGcPageRecovery, %function
+FtlGcPageRecovery:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x20, x19, 3704
+	mov	x0, x20
+	ldrh	w1, [x19,818]
+	bl	FtlGcScanTempBlk
+	ldrh	w1, [x19,3706]
+	ldrh	w0, [x19,818]
+	cmp	w1, w0
+	bcc	.L2797
+	add	x0, x19, 3752
+	bl	FtlMapBlkWriteDumpData
+	mov	w0, 0
+	bl	FtlGcFreeTempBlock
+	adrp	x0, .LANCHOR4+168
+	str	wzr, [x0,#:lo12:.LANCHOR4+168]
+.L2797:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlGcPageRecovery, .-FtlGcPageRecovery
+	.align	2
+	.global	FtlPowerLostRecovery
+	.type	FtlPowerLostRecovery, %function
+FtlPowerLostRecovery:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LANCHOR4+224
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	str	wzr, [x0,#:lo12:.LANCHOR4+224]
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x20, x19, 3608
+	add	x19, x19, 3656
+	mov	x0, x20
+	bl	FtlRecoverySuperblock
+	mov	x0, x20
+	bl	FtlSlcSuperblockCheck
+	mov	x0, x19
+	bl	FtlRecoverySuperblock
+	mov	x0, x19
+	bl	FtlSlcSuperblockCheck
+	bl	FtlGcPageRecovery
+	mov	w0, -1
+	bl	decrement_vpc_count
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	FtlPowerLostRecovery, .-FtlPowerLostRecovery
+	.align	2
+	.global	Ftl_gc_temp_data_write_back
+	.type	Ftl_gc_temp_data_write_back, %function
+Ftl_gc_temp_data_write_back:
+	adrp	x0, .LANCHOR0+136
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x23, [sp,48]
+	adrp	x21, .LANCHOR4
+	adrp	x19, .LANCHOR2
+	cbz	w0, .L2801
+	add	x0, x21, :lo12:.LANCHOR4
+	ldr	w0, [x0,144]
+	tbz	x0, 0, .L2801
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,3708]
+	cbz	w0, .L2801
+.L2806:
+	mov	w0, 0
+	b	.L2802
+.L2801:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x21, :lo12:.LANCHOR4
+	mov	w2, 0
+	mov	w20, 0
+	mov	w3, w2
+	mov	w23, 56
+	ldr	x0, [x0,1000]
+	ldr	w1, [x1,144]
+	bl	FlashProgPages
+.L2803:
+	add	x22, x21, :lo12:.LANCHOR4
+	ldr	w1, [x22,144]
+	cmp	w20, w1
+	bcs	.L2817
+	add	x0, x19, :lo12:.LANCHOR2
+	umull	x1, w20, w23
+	ldr	x2, [x0,1000]
+	add	x3, x2, x1
+	ldr	w2, [x2,x1]
+	cmn	w2, #1
+	bne	.L2804
+	ldrh	w4, [x0,3704]
+	ldr	x3, [x0,1184]
+	strh	wzr, [x3,x4,lsl 1]
+	strh	w2, [x0,3704]
+	ldr	w2, [x0,4064]
+	add	w2, w2, 1
+	str	w2, [x0,4064]
+	ldr	x0, [x0,1000]
+	add	x1, x0, x1
+	ldr	w0, [x1,4]
+	lsr	w0, w0, 10
+	bl	FtlBbmMapBadBlock
+	bl	FtlBbmTblFlush
+	bl	FtlGcPageVarInit
+	b	.L2816
+.L2804:
+	ldr	x2, [x3,16]
+	add	w20, w20, 1
+	ldr	w1, [x3,4]
+	uxth	w20, w20
+	ldr	w0, [x2,12]
+	ldr	w2, [x2,8]
+	bl	FtlGcUpdatePage
+	b	.L2803
+.L2817:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldr	x0, [x19,1000]
+	bl	FtlGcBufFree
+	str	wzr, [x22,144]
+	ldrh	w0, [x19,3708]
+	cbnz	w0, .L2806
+	mov	w0, 1
+	bl	FtlGcFreeTempBlock
+.L2816:
+	mov	w0, 1
+.L2802:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	Ftl_gc_temp_data_write_back, .-Ftl_gc_temp_data_write_back
+	.align	2
+	.global	Ftl_get_new_temp_ppa
+	.type	Ftl_get_new_temp_ppa, %function
+Ftl_get_new_temp_ppa:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x0, 3704
+	ldrh	w2, [x0,3704]
+	mov	w0, 65535
+	cmp	w2, w0
+	beq	.L2819
+	ldrh	w0, [x1,4]
+	cbnz	w0, .L2820
+.L2819:
+	bl	FtlCacheWriteBack
+	mov	w0, 0
+	bl	FtlGcFreeTempBlock
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x0, x0, 3704
+	strb	wzr, [x0,8]
+	bl	allocate_data_superblock
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	strh	wzr, [x0,176]
+	strh	wzr, [x0,178]
+	bl	l2p_flush
+	mov	w0, 0
+	bl	FtlEctTblFlush
+	bl	FtlVpcTblFlush
+.L2820:
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x0, x0, 3704
+	bl	get_new_active_ppa
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	Ftl_get_new_temp_ppa, .-Ftl_get_new_temp_ppa
+	.align	2
+	.global	ftl_read
+	.type	ftl_read, %function
+ftl_read:
+	stp	x29, x30, [sp, -176]!
+	cmp	w0, 16
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	w20, w1
+	mov	w28, w2
+	mov	x25, x3
+	bne	.L2822
+	add	w0, w1, 256
+	mov	w1, w2
+	mov	x2, x3
+	bl	FtlVendorPartRead
+	b	.L2823
+.L2822:
+	add	w0, w1, w2
+	str	w0, [x29,156]
+	adrp	x0, .LANCHOR0+4048
+	ldr	w2, [x29,156]
+	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
+	mov	w0, -1
+	cmp	w2, w1
+	bhi	.L2823
+	adrp	x19, .LANCHOR2
+	sub	w24, w2, #1
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x1,824]
+	udiv	w27, w20, w0
+	udiv	w24, w24, w0
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	sub	w23, w24, w27
+	add	w23, w23, 1
+	ldr	w2, [x0,132]
+	add	w2, w28, w2
+	str	w2, [x0,132]
+	ldr	w0, [x1,900]
+	add	w0, w23, w0
+	str	w0, [x1,900]
+	mov	w0, w27
+	mov	w1, w24
+	bl	FtlCacheMetchLpa
+	cbz	w0, .L2824
+	bl	FtlCacheWriteBack
+.L2824:
+	mov	w26, 0
+	mov	w21, w27
+	str	w26, [x29,152]
+	mov	w22, w26
+	str	w26, [x29,140]
+.L2825:
+	cbz	w23, .L2866
+	mov	w0, w21
+	add	x1, x29, 172
+	mov	w2, 0
+	bl	log2phys
+	ldr	w3, [x29,172]
+	cmn	w3, #1
+	bne	.L2864
+	mov	w3, 0
+.L2826:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,824]
+	cmp	w3, w0
+	bcs	.L2830
+	madd	w0, w21, w0, w3
+	cmp	w0, w20
+	bcc	.L2828
+	ldr	w1, [x29,156]
+	cmp	w0, w1
+	bcs	.L2828
+	sub	w0, w0, w20
+	mov	w1, 0
+	ubfiz	x0, x0, 9, 23
+	mov	w2, 512
+	add	x0, x25, x0
+	str	x3, [x29,144]
+	bl	ftl_memset
+	ldr	x3, [x29,144]
+.L2828:
+	add	w3, w3, 1
+	b	.L2826
+.L2864:
+	add	x2, x19, :lo12:.LANCHOR2
+	mov	w0, 56
+	cmp	w21, w27
+	umull	x1, w22, w0
+	ldr	x0, [x2,992]
+	add	x0, x0, x1
+	str	w3, [x0,4]
+	ldrh	w0, [x2,824]
+	bne	.L2831
+	ldr	x3, [x2,992]
+	ldr	x2, [x2,1088]
+	add	x3, x3, x1
+	str	x2, [x3,8]
+	udiv	w2, w20, w0
+	msub	w2, w2, w0, w20
+	str	w2, [x29,112]
+	sub	w2, w0, w2
+	cmp	w2, w28
+	csel	w2, w2, w28, ls
+	str	w2, [x29,152]
+	cmp	w2, w0
+	bne	.L2832
+	str	x25, [x3,8]
+	b	.L2832
+.L2831:
+	cmp	w21, w24
+	bne	.L2833
+	ldr	x3, [x2,992]
+	ldr	x2, [x2,1096]
+	add	x3, x3, x1
+	ldr	w4, [x29,156]
+	str	x2, [x3,8]
+	mul	w2, w21, w0
+	sub	w26, w4, w2
+	cmp	w26, w0
+	bne	.L2832
+	sub	w2, w2, w20
+	ubfiz	x2, x2, 9, 23
+	add	x2, x25, x2
+	str	x2, [x3,8]
+	b	.L2832
+.L2833:
+	ldr	x2, [x2,992]
+	mul	w0, w21, w0
+	add	x2, x2, x1
+	sub	w0, w0, w20
+	ubfiz	x0, x0, 9, 23
+	add	x0, x25, x0
+	str	x0, [x2,8]
+.L2832:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldr	x0, [x2,992]
+	add	x1, x0, x1
+	ldrh	w0, [x2,830]
+	ldr	x2, [x2,1120]
+	mul	w0, w22, w0
+	str	w21, [x1,24]
+	add	w22, w22, 1
+	and	x0, x0, 4294967292
+	add	x0, x2, x0
+	str	x0, [x1,16]
+.L2830:
+	subs	w23, w23, #1
+	add	w21, w21, 1
+	beq	.L2834
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,748]
+	cmp	w22, w0, lsl 3
+	bne	.L2825
+.L2834:
+	cbz	w22, .L2825
+	add	x0, x19, :lo12:.LANCHOR2
+	mov	w1, w22
+	mov	w2, 0
+	ldr	x0, [x0,992]
+	bl	FlashReadPages
+	str	xzr, [x29,144]
+	ldr	x0, [x29,112]
+	ubfiz	x0, x0, 9, 23
+	str	x0, [x29,128]
+	ldr	w0, [x29,152]
+	lsl	w0, w0, 9
+	str	w0, [x29,136]
+	lsl	w0, w26, 9
+	str	w0, [x29,108]
+.L2836:
+	ldr	w0, [x29,144]
+	cmp	w22, w0
+	bls	.L2867
+	ldr	x0, [x29,144]
+	add	x2, x19, :lo12:.LANCHOR2
+	mov	x1, 56
+	mul	x3, x0, x1
+	ldr	x0, [x2,992]
+	add	x0, x0, x3
+	ldr	w1, [x0,24]
+	cmp	w1, w27
+	bne	.L2837
+	ldr	x1, [x0,8]
+	ldr	x0, [x2,1088]
+	cmp	x1, x0
+	bne	.L2838
+	ldr	x2, [x29,128]
+	mov	x0, x25
+	str	x3, [x29,96]
+	add	x1, x1, x2
+	ldr	w2, [x29,136]
+	b	.L2865
+.L2837:
+	cmp	w1, w24
+	bne	.L2838
+	ldr	x1, [x0,8]
+	ldr	x0, [x2,1096]
+	cmp	x1, x0
+	bne	.L2838
+	ldrh	w0, [x2,824]
+	ldr	w2, [x29,108]
+	str	x3, [x29,96]
+	mul	w0, w24, w0
+	sub	w0, w0, w20
+	ubfiz	x0, x0, 9, 23
+	add	x0, x25, x0
+.L2865:
+	bl	ftl_memcpy
+	ldr	x3, [x29,96]
+.L2838:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x1, [x0,992]
+	add	x5, x1, x3
+	ldr	w4, [x1,x3]
+	cmn	w4, #1
+	bne	.L2839
+	ldr	w2, [x0,4040]
+	str	w4, [x29,140]
+	add	w2, w2, 1
+	str	w2, [x0,4040]
+.L2839:
+	ldr	w0, [x1,x3]
+	cmp	w0, 256
+	bne	.L2840
+	ldr	w0, [x5,4]
+	lsr	x0, x0, 10
+	bl	P2V_block_in_plane
+	bl	FtlGcRefreshBlock
+.L2840:
+	ldr	x0, [x29,144]
+	add	x0, x0, 1
+	str	x0, [x29,144]
+	b	.L2836
+.L2867:
+	mov	w22, 0
+	b	.L2825
+.L2866:
+	add	x19, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x19,958]
+	cbz	w0, .L2843
+	mov	w0, w23
+	mov	w1, 1
+	bl	ftl_do_gc
+.L2843:
+	ldr	w0, [x29,140]
+.L2823:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	ftl_read, .-ftl_read
+	.align	2
+	.global	ftl_write
+	.type	ftl_write, %function
+ftl_write:
+	stp	x29, x30, [sp, -272]!
+	mov	w4, w0
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w1
+	adrp	x1, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	mov	w21, w2
+	add	x2, x1, :lo12:.LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x22, x3
+	str	x1, [x29,152]
+	ldr	w3, [x2,1400]
+	cbnz	w3, .L2869
+	cmp	w4, 16
+	bne	.L2870
+	add	w0, w20, 256
+	mov	w1, w21
+	mov	x2, x22
+	bl	FtlVendorPartWrite
+	b	.L2869
+.L2870:
+	adrp	x0, .LANCHOR0+4048
+	add	w24, w20, w21
+	ldr	w1, [x0,#:lo12:.LANCHOR0+4048]
+	mov	w0, -1
+	cmp	w24, w1
+	bhi	.L2869
+	adrp	x3, .LANCHOR4
+	ldrh	w1, [x2,824]
+	add	x26, x3, :lo12:.LANCHOR4
+	sub	w24, w24, #1
+	mov	w0, 2048
+	str	x3, [x29,144]
+	udiv	w23, w20, w1
+	cmp	w21, w1, lsl 1
+	str	w0, [x26,380]
+	add	x19, x2, 3608
+	ldr	w3, [x2,968]
+	udiv	w0, w24, w1
+	str	w0, [x29,200]
+	sub	w28, w0, w23
+	add	w25, w28, 1
+	ldr	w0, [x2,884]
+	add	w0, w25, w0
+	str	w0, [x2,884]
+	ldr	w0, [x26,128]
+	add	w0, w21, w0
+	str	w0, [x26,128]
+	cset	w0, cs
+	str	w0, [x29,204]
+	cmp	w21, 8
+	add	x0, x2, 3656
+	csel	x19, x19, x0, hi
+	cbz	w3, .L2873
+	mov	w0, 56
+	sub	w3, w3, #1
+	umull	x3, w3, w0
+	ldr	x0, [x2,1032]
+	add	x3, x0, x3
+	ldr	w0, [x3,24]
+	cmp	w23, w0
+	bne	.L2874
+	ldr	w0, [x2,892]
+	add	w0, w0, 1
+	str	w0, [x2,892]
+	ldr	w0, [x26,384]
+	add	w0, w0, 1
+	str	w0, [x26,384]
+	msub	w0, w23, w1, w20
+	sub	w1, w1, w0
+	ubfiz	x0, x0, 9, 23
+	cmp	w1, w21
+	csel	w19, w1, w21, ls
+	ldr	x1, [x3,8]
+	lsl	w25, w19, 9
+	add	x0, x1, x0
+	mov	w2, w25
+	mov	x1, x22
+	bl	ftl_memcpy
+	cbnz	w28, .L2875
+	ldr	w0, [x26,384]
+	cmp	w0, 2
+	bgt	.L2875
+.L2908:
+	mov	w0, 0
+	b	.L2869
+.L2875:
+	add	x22, x22, x25
+	sub	w21, w21, w19
+	add	w20, w20, w19
+	add	w23, w23, 1
+	mov	w25, w28
+.L2874:
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x19, [x0,368]
+	str	wzr, [x0,384]
+.L2873:
+	ldr	w1, [x29,200]
+	mov	w0, w23
+	bl	FtlCacheMetchLpa
+	cbz	w0, .L2876
+	bl	FtlCacheWriteBack
+.L2876:
+	ldr	x0, [x29,144]
+	str	w23, [x29,192]
+	add	x0, x0, :lo12:.LANCHOR4
+	str	x19, [x0,368]
+	ldr	x0, [x29,152]
+	add	x24, x0, :lo12:.LANCHOR2
+	add	x0, x24, 3608
+	str	x0, [x29,176]
+	adrp	x0, .LC135
+	add	x0, x0, :lo12:.LC135
+	str	x0, [x29,104]
+.L2877:
+	cbz	w25, .L2938
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L2878
+	ldr	x1, [x29,176]
+	adrp	x26, .LANCHOR1
+	cmp	x19, x1
+	bne	.L2879
+	add	x0, x24, 3656
+	ldrh	w19, [x0,4]
+	cbnz	w19, .L2880
+	bl	allocate_new_data_superblock
+	add	x0, x26, :lo12:.LANCHOR1
+	str	w19, [x0,3072]
+.L2880:
+	ldr	x0, [x29,176]
+	add	x26, x26, :lo12:.LANCHOR1
+	add	x19, x24, 3656
+	bl	allocate_new_data_superblock
+	ldr	w0, [x26,3072]
+	cbnz	w0, .L2881
+.L2882:
+	ldr	x19, [x29,176]
+	b	.L2881
+.L2879:
+	add	x26, x26, :lo12:.LANCHOR1
+	str	w0, [x26,3072]
+	ldr	x0, [x29,176]
+	ldrh	w0, [x0,4]
+	cbnz	w0, .L2882
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+.L2881:
+	ldrh	w0, [x19,4]
+	cbnz	w0, .L2883
+	mov	x0, x19
+	bl	allocate_new_data_superblock
+.L2883:
+	ldr	x0, [x29,144]
+	add	x0, x0, :lo12:.LANCHOR4
+	str	x19, [x0,368]
+.L2878:
+	ldr	w0, [x24,964]
+	mov	x28, 0
+	ldr	w2, [x24,968]
+	ldrh	w1, [x19,4]
+	sub	w0, w0, w2
+	cmp	w1, w0
+	csel	w0, w1, w0, ls
+	cmp	w0, w25
+	csel	w0, w0, w25, ls
+	str	w0, [x29,140]
+	ldr	w0, [x29,204]
+	and	w0, w0, 1
+	str	w0, [x29,116]
+	add	w0, w21, w20
+	str	w0, [x29,136]
+.L2884:
+	ldr	w1, [x29,192]
+	mov	w0, w28
+	add	w27, w1, w28
+	ldr	w1, [x29,140]
+	cmp	w28, w1
+	bcs	.L2939
+	ldrh	w1, [x19,4]
+	cbz	w1, .L2915
+	ldr	w1, [x29,200]
+	cmp	w27, w1
+	cset	w7, eq
+	cbz	w0, .L2886
+	ldr	w1, [x29,116]
+	tst	w7, w1
+	beq	.L2886
+	ldrh	w1, [x24,824]
+	ldr	w2, [x29,136]
+	msub	w2, w27, w1, w2
+	cmp	w2, w1
+	bne	.L2915
+.L2886:
+	add	x1, x29, 212
+	mov	w2, 0
+	mov	w0, w27
+	str	x7, [x29,160]
+	bl	log2phys
+	mov	x0, x19
+	bl	get_new_active_ppa
+	ldr	w6, [x24,968]
+	mov	w5, 56
+	ldr	x2, [x24,1032]
+	str	x5, [x29,184]
+	umull	x1, w6, w5
+	add	x2, x2, x1
+	str	w0, [x2,4]
+	ldrh	w2, [x24,830]
+	ldr	x0, [x24,1032]
+	add	x1, x0, x1
+	mul	w0, w2, w6
+	and	x0, x0, 4294967292
+	str	x0, [x29,128]
+	ldr	x0, [x24,1136]
+	ldr	x3, [x29,128]
+	str	x0, [x29,120]
+	add	x26, x0, x3
+	ldrh	w0, [x24,828]
+	str	x26, [x1,16]
+	str	w27, [x1,24]
+	mul	w0, w0, w6
+	ldr	x6, [x24,1080]
+	and	x0, x0, 4294967292
+	add	x0, x6, x0
+	str	x0, [x1,8]
+	mov	x0, x26
+	mov	w1, 0
+	bl	ftl_memset
+	cmp	w27, w23
+	cset	w0, eq
+	str	w0, [x29,196]
+	cbnz	w0, .L2918
+	ldr	x7, [x29,160]
+	ldr	x5, [x29,184]
+	cbz	w7, .L2887
+	ldr	w0, [x29,136]
+	ldrh	w2, [x24,824]
+	msub	w2, w27, w2, w0
+	uxth	w0, w2
+	str	w0, [x29,184]
+	ldr	w0, [x29,196]
+	str	w0, [x29,160]
+	b	.L2890
+.L2918:
+	ldrh	w2, [x24,824]
+	udiv	w0, w20, w2
+	msub	w0, w0, w2, w20
+	str	w0, [x29,160]
+	sub	w2, w2, w0
+	cmp	w2, w21
+	csel	w0, w2, w21, ls
+	str	w0, [x29,184]
+.L2890:
+	ldrh	w0, [x24,824]
+	ldr	w1, [x29,184]
+	cmp	w1, w0
+	bne	.L2891
+	ldr	w0, [x29,196]
+	mov	x1, x22
+	cbnz	w0, .L2892
+	ldr	w0, [x29,184]
+	mul	w1, w0, w27
+	sub	w1, w1, w20
+	ubfiz	x1, x1, 9, 23
+	add	x1, x22, x1
+.L2892:
+	ldr	w2, [x29,204]
+	mov	w0, 56
+	cbz	w2, .L2893
+	ldr	w2, [x24,968]
+	umull	x0, w2, w0
+	ldr	x2, [x24,1032]
+	add	x0, x2, x0
+	b	.L2935
+.L2893:
+	ldr	w2, [x24,968]
+	umull	x0, w2, w0
+	ldr	x2, [x24,1032]
+	add	x0, x2, x0
+	ldr	x0, [x0,8]
+	b	.L2936
+.L2891:
+	ldr	w0, [x29,212]
+	cmn	w0, #1
+	beq	.L2895
+	str	w0, [x29,220]
+	mov	w1, 56
+	ldr	w0, [x24,968]
+	mov	w2, 0
+	str	w27, [x29,240]
+	umull	x0, w0, w1
+	ldr	x1, [x24,1032]
+	add	x0, x1, x0
+	ldr	x1, [x0,8]
+	ldr	x0, [x0,16]
+	str	x1, [x29,224]
+	mov	w1, 1
+	str	x0, [x29,232]
+	add	x0, x29, 216
+	bl	FlashReadPages
+	ldr	w0, [x29,216]
+	cmn	w0, #1
+	bne	.L2896
+	ldr	w0, [x24,4040]
+	add	w0, w0, 1
+	str	w0, [x24,4040]
+	b	.L2898
+.L2896:
+	ldr	w0, [x26,8]
+	cmp	w0, w27
+	beq	.L2898
+	ldr	w0, [x24,4040]
+	mov	w2, w27
+	add	w0, w0, 1
+	str	w0, [x24,4040]
+	ldr	x0, [x29,104]
+	ldr	w1, [x26,8]
+	bl	printk
+	b	.L2898
+.L2895:
+	ldr	w0, [x24,968]
+	mov	w1, 56
+	ldrh	w2, [x24,828]
+	umull	x0, w0, w1
+	ldr	x1, [x24,1032]
+	add	x0, x1, x0
+	mov	w1, 0
+	ldr	x0, [x0,8]
+	bl	ftl_memset
+.L2898:
+	ldr	w1, [x29,184]
+	mov	w0, 56
+	lsl	w2, w1, 9
+	ldr	w1, [x29,196]
+	cbz	w1, .L2899
+	ldr	w1, [x24,968]
+	umull	x0, w1, w0
+	ldr	x1, [x24,1032]
+	add	x1, x1, x0
+	ldr	x0, [x29,160]
+	ubfiz	x0, x0, 9, 23
+	ldr	x1, [x1,8]
+	add	x0, x1, x0
+	mov	x1, x22
+	b	.L2937
+.L2899:
+	ldr	w1, [x24,968]
+	umull	x0, w1, w0
+	ldr	x1, [x24,1032]
+	add	x0, x1, x0
+	ldrh	w1, [x24,824]
+	mul	w1, w27, w1
+	ldr	x0, [x0,8]
+	sub	w1, w1, w20
+	ubfiz	x1, x1, 9, 23
+	add	x1, x22, x1
+	b	.L2937
+.L2887:
+	ldr	w0, [x29,204]
+	ldrh	w1, [x24,824]
+	ldr	w2, [x24,968]
+	cbz	w0, .L2900
+	mul	w1, w27, w1
+	umull	x0, w2, w5
+	sub	w1, w1, w20
+	ldr	x2, [x24,1032]
+	ubfiz	x1, x1, 9, 23
+	add	x0, x2, x0
+	add	x1, x22, x1
+.L2935:
+	str	x1, [x0,8]
+	b	.L2894
+.L2900:
+	umull	x0, w2, w5
+	ldr	x2, [x24,1032]
+	mul	w1, w27, w1
+	add	x0, x2, x0
+	sub	w1, w1, w20
+	ubfiz	x1, x1, 9, 23
+	ldr	x0, [x0,8]
+	add	x1, x22, x1
+.L2936:
+	ldrh	w2, [x24,828]
+.L2937:
+	bl	ftl_memcpy
+.L2894:
+	ldr	x1, [x29,120]
+	mov	w0, -3947
+	ldr	x2, [x29,128]
+	add	x28, x28, 1
+	strh	w0, [x1,x2]
+	str	w27, [x26,8]
+	ldr	w0, [x24,876]
+	str	w0, [x26,4]
+	add	w0, w0, 1
+	cmn	w0, #1
+	csel	w0, w0, wzr, ne
+	str	w0, [x24,876]
+	ldr	w0, [x29,212]
+	str	w0, [x26,12]
+	ldrh	w0, [x19]
+	strh	w0, [x26,2]
+	ldr	w0, [x24,968]
+	add	w0, w0, 1
+	str	w0, [x24,968]
+	b	.L2884
+.L2939:
+	str	w27, [x29,192]
+	mov	x0, x1
+	b	.L2885
+.L2915:
+	str	w27, [x29,192]
+.L2885:
+	sub	w25, w25, w0
+	ldr	w0, [x29,204]
+	cbnz	w0, .L2904
+	ldr	w1, [x24,968]
+	ldr	w0, [x24,964]
+	cmp	w1, w0
+	bcs	.L2904
+	ldrh	w0, [x19,4]
+	cbz	w0, .L2904
+.L2906:
+	str	wzr, [x29,204]
+	b	.L2877
+.L2904:
+	bl	FtlCacheWriteBack
+	str	wzr, [x24,968]
+	cmp	w25, 3
+	bls	.L2906
+	b	.L2877
+.L2938:
+	ldr	w1, [x29,200]
+	mov	w0, w25
+	sub	w1, w1, w23
+	bl	ftl_do_gc
+	ldr	x0, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldrh	w1, [x0,3600]
+	cmp	w1, 31
+	bhi	.L2908
+	mov	w1, 128
+	mov	w19, 16
+	strh	w1, [x0,954]
+	strh	w1, [x0,952]
+.L2909:
+	mov	w0, 0
+	mov	w1, 1
+	bl	ftl_do_gc
+	ldr	x0, [x29,152]
+	add	x0, x0, :lo12:.LANCHOR2
+	ldr	w0, [x0,1400]
+	cbnz	w0, .L2908
+	subs	w19, w19, #1
+	bne	.L2909
+	b	.L2908
+.L2869:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 272
+	ret
+	.size	ftl_write, .-ftl_write
+	.align	2
+	.global	ftl_vendor_write
+	.type	ftl_vendor_write, %function
+ftl_vendor_write:
+	stp	x29, x30, [sp, -16]!
+	mov	w5, w0
+	mov	w4, w1
+	add	x29, sp, 0
+	mov	x3, x2
+	mov	w1, w5
+	mov	w2, w4
+	mov	w0, 16
+	bl	ftl_write
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_vendor_write, .-ftl_vendor_write
+	.align	2
+	.global	ftl_sys_write
+	.type	ftl_sys_write, %function
+ftl_sys_write:
+	stp	x29, x30, [sp, -16]!
+	mov	w4, w1
+	mov	x3, x2
+	add	x29, sp, 0
+	add	w1, w0, 256
+	mov	w2, w4
+	mov	w0, 16
+	bl	ftl_write
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_sys_write, .-ftl_sys_write
+	.align	2
+	.global	ftl_fix_nand_power_lost_error
+	.type	ftl_fix_nand_power_lost_error, %function
+ftl_fix_nand_power_lost_error:
+	adrp	x0, .LANCHOR0+136
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+136]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	cbz	w0, .L2942
+	adrp	x21, .LANCHOR4
+	adrp	x19, .LANCHOR2
+	add	x0, x21, :lo12:.LANCHOR4
+	add	x20, x19, :lo12:.LANCHOR2
+	adrp	x24, .LC136
+	add	x26, x20, 3608
+	add	x25, x20, 3656
+	ldrh	w23, [x0,218]
+	add	x0, x24, :lo12:.LC136
+	ldr	x2, [x20,1184]
+	ubfiz	x22, x23, 1, 16
+	mov	w1, w23
+	ldrh	w2, [x2,x22]
+	bl	printk
+	ldrh	w0, [x20,3608]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	w0, [x20,3656]
+	mov	w20, 4097
+	bl	FtlGcRefreshOpenBlock
+	mov	x0, x26
+	bl	allocate_new_data_superblock
+	mov	x0, x25
+	bl	allocate_new_data_superblock
+.L2944:
+	subs	w20, w20, #1
+	beq	.L2948
+	mov	w0, 1
+	mov	w1, w0
+	bl	ftl_do_gc
+	add	x0, x19, :lo12:.LANCHOR2
+	ldr	x0, [x0,1184]
+	ldrh	w0, [x0,x22]
+	cbnz	w0, .L2944
+.L2948:
+	add	x20, x19, :lo12:.LANCHOR2
+	add	x0, x24, :lo12:.LC136
+	mov	w1, w23
+	ldr	x2, [x20,1184]
+	ldrh	w2, [x2,x22]
+	bl	printk
+	ldr	x0, [x20,1184]
+	ldrh	w0, [x0,x22]
+	cbnz	w0, .L2946
+	add	x0, x29, 80
+	strh	w23, [x29,80]
+	bl	make_superblock
+	mov	x0, 0
+	ldrh	w5, [x20,748]
+	mov	w6, 65535
+	mov	w20, w0
+	mov	w7, 56
+.L2949:
+	cmp	w5, w0, uxth
+	bls	.L2956
+	add	x1, x29, 80
+	add	x1, x1, x0, lsl 1
+	ldrh	w2, [x1,16]
+	cmp	w2, w6
+	beq	.L2950
+	add	x4, x19, :lo12:.LANCHOR2
+	lsl	w2, w2, 10
+	umull	x1, w20, w7
+	add	w20, w20, 1
+	ldr	x3, [x4,1016]
+	uxth	w20, w20
+	add	x3, x3, x1
+	str	w2, [x3,4]
+	ldr	x2, [x4,1016]
+	add	x1, x2, x1
+	str	xzr, [x1,8]
+	str	xzr, [x1,16]
+.L2950:
+	add	x0, x0, 1
+	b	.L2949
+.L2956:
+	add	x19, x19, :lo12:.LANCHOR2
+	adrp	x0, .LC137
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC137
+	ldr	x2, [x19,1184]
+	ldrh	w2, [x2,x22]
+	bl	printk
+	ldr	x0, [x19,1016]
+	mov	w1, 0
+	mov	w2, w20
+	bl	FlashEraseBlocks
+	ldr	x0, [x19,1016]
+	mov	w1, 1
+	mov	w2, w20
+	bl	FlashEraseBlocks
+.L2946:
+	add	x21, x21, :lo12:.LANCHOR4
+	mov	w0, -1
+	strh	w0, [x21,218]
+.L2942:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	ftl_fix_nand_power_lost_error, .-ftl_fix_nand_power_lost_error
+	.align	2
+	.global	FtlSysBlkInit
+	.type	FtlSysBlkInit, %function
+FtlSysBlkInit:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, -1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR4
+	adrp	x20, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	add	x0, x19, :lo12:.LANCHOR4
+	add	x21, x20, :lo12:.LANCHOR2
+	str	x23, [sp,48]
+	strh	w1, [x0,218]
+	strh	wzr, [x0,220]
+	ldrh	w0, [x21,752]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlScanSysBlk
+	ldrh	w1, [x21,3896]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2958
+.L2960:
+	mov	w23, -1
+	b	.L2959
+.L2958:
+	bl	FtlLoadSysInfo
+	mov	w23, w0
+	cbnz	w0, .L2960
+	bl	FtlLoadMapInfo
+	bl	FtlLoadVonderInfo
+	bl	Ftl_load_ext_data
+	bl	FtlLoadEctTbl
+	bl	FtlFreeSysBLkSort
+	bl	SupperBlkListInit
+	bl	FtlPowerLostRecovery
+	mov	w0, 1
+	bl	FtlUpdateVaildLpn
+	ldrh	w2, [x21,858]
+	mov	x1, 0
+	ldr	x0, [x21,1264]
+.L2961:
+	cmp	w1, w2
+	mov	w3, w1
+	bge	.L2965
+	add	x4, x0, x1, lsl 4
+	add	x1, x1, 1
+	ldr	w4, [x4,4]
+	tbz	w4, #31, .L2961
+.L2965:
+	add	x0, x20, :lo12:.LANCHOR2
+	cmp	w3, w2
+	ldrh	w1, [x0,3548]
+	add	w1, w1, 1
+	strh	w1, [x0,3548]
+	blt	.L2962
+	add	x19, x19, :lo12:.LANCHOR4
+	ldrh	w0, [x19,220]
+	cbz	w0, .L2966
+.L2962:
+	add	x19, x20, :lo12:.LANCHOR2
+	add	x22, x19, 3608
+	add	x21, x19, 3656
+	mov	x0, x22
+	bl	FtlSuperblockPowerLostFix
+	mov	x0, x21
+	bl	FtlSuperblockPowerLostFix
+	ldrh	w0, [x19,3608]
+	ldr	x2, [x19,1184]
+	lsl	x0, x0, 1
+	ldrh	w3, [x19,3612]
+	ldrh	w1, [x2,x0]
+	sub	w1, w1, w3
+	strh	w1, [x2,x0]
+	strb	wzr, [x19,3614]
+	ldrh	w0, [x19,818]
+	strh	w0, [x19,3610]
+	ldrh	w0, [x19,3656]
+	ldr	x2, [x19,1184]
+	lsl	x0, x0, 1
+	strh	wzr, [x19,3612]
+	ldrh	w3, [x19,3660]
+	ldrh	w1, [x2,x0]
+	sub	w1, w1, w3
+	strh	w1, [x2,x0]
+	strb	wzr, [x19,3662]
+	ldrh	w0, [x19,818]
+	strh	w0, [x19,3658]
+	add	x0, x19, 3752
+	strh	wzr, [x19,3660]
+	bl	FtlMapBlkWriteDumpData
+	add	x0, x19, 3824
+	bl	FtlMapBlkWriteDumpData
+	ldrh	w0, [x19,3550]
+	add	w0, w0, 1
+	strh	w0, [x19,3550]
+	bl	l2p_flush
+	bl	FtlVpcTblFlush
+	b	.L2980
+.L2966:
+	bl	l2p_flush
+.L2980:
+	add	x19, x20, :lo12:.LANCHOR2
+	bl	FtlVpcTblFlush
+	mov	w0, 65535
+	add	x22, x19, 3608
+	ldrh	w1, [x19,3608]
+	cmp	w1, w0
+	bne	.L2968
+.L2970:
+	add	x20, x20, :lo12:.LANCHOR2
+	ldrh	w0, [x20,3548]
+	and	w0, w0, 31
+	cbnz	w0, .L2959
+	bl	FtlVpcCheckAndModify
+	b	.L2959
+.L2968:
+	ldrh	w0, [x22,4]
+	cbnz	w0, .L2970
+	ldrh	w0, [x19,3660]
+	add	x21, x19, 3656
+	cbnz	w0, .L2970
+	bl	FtlVpcTblFlush
+	ldrh	w0, [x19,3608]
+	bl	FtlGcRefreshOpenBlock
+	ldrh	w0, [x19,3656]
+	bl	FtlGcRefreshOpenBlock
+	mov	x0, x22
+	bl	allocate_new_data_superblock
+	mov	x0, x21
+	bl	allocate_new_data_superblock
+	add	x0, x19, 3824
+	bl	FtlMapBlkWriteDumpData
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,136]
+	cbnz	w1, .L2972
+	ldrb	w0, [x0,24]
+	cbz	w0, .L2970
+.L2972:
+	mov	w19, 4096
+.L2975:
+	mov	w0, 1
+	mov	w1, w0
+	bl	ftl_do_gc
+	subs	w19, w19, #1
+	bne	.L2975
+	b	.L2970
+.L2959:
+	mov	w0, w23
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	FtlSysBlkInit, .-FtlSysBlkInit
+	.align	2
+	.global	FtlLowFormat
+	.type	FtlLowFormat, %function
+FtlLowFormat:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	add	x20, x19, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	ldr	w21, [x20,1400]
+	cbnz	w21, .L2983
+	ldrh	w2, [x20,856]
+	mov	w1, w21
+	ldr	x0, [x20,1248]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldrh	w2, [x20,856]
+	mov	w1, w21
+	ldr	x0, [x20,1240]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	str	w21, [x20,872]
+	ldrh	w0, [x20,752]
+	str	w21, [x20,876]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	w0, .L2984
+	bl	FtlMakeBbt
+.L2984:
+	mov	w0, 0
+.L2985:
+	add	x1, x19, :lo12:.LANCHOR2
+	ldrh	w2, [x1,824]
+	cmp	w0, w2, lsl 7
+	bge	.L3012
+	ubfiz	x3, x0, 2, 16
+	ldr	x4, [x1,1088]
+	mvn	w2, w0
+	orr	w2, w0, w2, lsl 16
+	str	w2, [x4,x3]
+	add	w0, w0, 1
+	ldr	x2, [x1,1096]
+	mov	w1, 23752
+	movk	w1, 0xa0f, lsl 16
+	uxth	w0, w0
+	str	w1, [x2,x3]
+	b	.L2985
+.L3012:
+	ldrh	w21, [x1,756]
+	mov	w20, 0
+.L2987:
+	add	x22, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x22,758]
+	cmp	w0, w21
+	bls	.L3013
+	mov	w0, w21
+	mov	w1, 1
+	add	w21, w21, 1
+	bl	FtlLowFormatEraseBlock
+	add	w0, w20, w0
+	uxth	w21, w21
+	uxth	w20, w0
+	b	.L2987
+.L3013:
+	ldrh	w0, [x22,748]
+	sub	w1, w20, #3
+	cmp	w1, w0, lsl 1
+	bge	.L2989
+.L2993:
+	mov	w20, 0
+	mov	w21, w20
+	b	.L2990
+.L2989:
+	udiv	w20, w20, w0
+	ldr	w0, [x22,852]
+	add	w0, w20, w0
+	bl	FtlSysBlkNumInit
+	ldrh	w0, [x22,752]
+	bl	FtlFreeSysBlkQueueInit
+	ldrh	w20, [x22,756]
+.L2991:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x0,758]
+	cmp	w0, w20
+	bls	.L2993
+	mov	w0, w20
+	mov	w1, 1
+	add	w20, w20, 1
+	bl	FtlLowFormatEraseBlock
+	uxth	w20, w20
+	b	.L2991
+.L2990:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldrh	w0, [x2,756]
+	cmp	w0, w21
+	bls	.L3014
+	mov	w0, w21
+	mov	w1, 0
+	add	w21, w21, 1
+	bl	FtlLowFormatEraseBlock
+	add	w0, w20, w0
+	uxth	w21, w21
+	uxth	w20, w0
+	b	.L2990
+.L3014:
+	ldrh	w3, [x2,748]
+	ldr	w1, [x2,760]
+	ldrh	w0, [x2,758]
+	str	w0, [x2,944]
+	udiv	w4, w1, w3
+	str	w4, [x2,1396]
+	ubfx	x5, x4, 5, 16
+	add	w0, w5, 36
+	strh	w0, [x2,3916]
+	mov	w0, 24
+	mul	w0, w3, w0
+	cmp	w20, w0
+	ble	.L2995
+	sub	w1, w1, w20
+	udiv	w1, w1, w3
+	str	w1, [x2,1396]
+	lsr	w1, w1, 5
+	add	w1, w1, 24
+	strh	w1, [x2,3916]
+.L2995:
+	add	x2, x19, :lo12:.LANCHOR2
+	ldr	w0, [x2,652]
+	cmp	w0, 1
+	bne	.L2996
+	ldrh	w1, [x2,3916]
+	udiv	w0, w20, w3
+	add	w0, w1, w0
+	add	w0, w1, w0, asr 2
+	strh	w0, [x2,3916]
+.L2996:
+	adrp	x21, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L2997
+	add	x1, x19, :lo12:.LANCHOR2
+	udiv	w0, w20, w3
+	ldrh	w2, [x1,3916]
+	add	w0, w2, w0
+	add	w0, w2, w0, asr 2
+	strh	w0, [x1,3916]
+.L2997:
+	add	x0, x19, :lo12:.LANCHOR2
+	ldrh	w1, [x0,810]
+	cbz	w1, .L2999
+	ldrh	w2, [x0,3916]
+	add	w2, w2, w1, lsr 1
+	strh	w2, [x0,3916]
+	mul	w2, w1, w3
+	cmp	w2, w20
+	ble	.L2999
+	add	w1, w1, 32
+	str	w4, [x0,1396]
+	add	w1, w5, w1
+	strh	w1, [x0,3916]
+.L2999:
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x20, x19, 3608
+	mov	w22, -1
+	ldr	w1, [x19,1396]
+	ldrh	w0, [x19,3916]
+	sub	w0, w1, w0
+	ldrh	w1, [x19,818]
+	mul	w0, w0, w3
+	str	w0, [x19,3912]
+	mul	w0, w0, w1
+	ldrh	w1, [x19,824]
+	str	w0, [x19,1396]
+	mul	w0, w0, w1
+	str	w0, [x21,4048]
+	bl	FtlBbmTblFlush
+	ldrh	w2, [x19,758]
+	mov	w1, 0
+	ldr	x0, [x19,1184]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	str	wzr, [x19,3892]
+	mov	w0, 1
+	ldrh	w2, [x19,756]
+	strb	w0, [x20,8]
+	mov	w1, 255
+	ldr	x0, [x21,16]
+	lsr	w2, w2, 3
+	strh	w22, [x19,3920]
+	strh	wzr, [x19,3922]
+	strb	wzr, [x19,3926]
+	strb	wzr, [x19,3928]
+	strh	wzr, [x20,2]
+	strb	wzr, [x20,6]
+	strh	wzr, [x19,3608]
+	bl	ftl_memset
+.L3001:
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20,7]
+	cbnz	w0, .L3002
+	ldrh	w1, [x20]
+	ldr	x0, [x19,1184]
+	strh	w22, [x0,x1,lsl 1]
+	ldrh	w0, [x20]
+	add	w0, w0, 1
+	strh	w0, [x20]
+	b	.L3001
+.L3002:
+	ldr	w0, [x19,872]
+	mov	w21, -1
+	str	w0, [x20,12]
+	add	w0, w0, 1
+	ldrh	w1, [x20]
+	str	w0, [x19,872]
+	ldr	x0, [x19,1184]
+	ldrh	w2, [x20,4]
+	strh	w2, [x0,x1,lsl 1]
+	add	x0, x19, 3656
+	strh	wzr, [x19,3658]
+	ldrh	w1, [x20]
+	mov	x20, x0
+	strb	wzr, [x19,3662]
+	add	w1, w1, 1
+	strh	w1, [x19,3656]
+	mov	w1, 1
+	strb	w1, [x19,3664]
+.L3003:
+	mov	x0, x20
+	bl	make_superblock
+	ldrb	w0, [x20,7]
+	cbnz	w0, .L3004
+	ldrh	w1, [x20]
+	ldr	x0, [x19,1184]
+	strh	w21, [x0,x1,lsl 1]
+	ldrh	w0, [x20]
+	add	w0, w0, 1
+	strh	w0, [x20]
+	b	.L3003
+.L3004:
+	ldr	w0, [x19,872]
+	str	w0, [x20,12]
+	add	w0, w0, 1
+	ldrh	w1, [x20]
+	str	w0, [x19,872]
+	ldr	x0, [x19,1184]
+	ldrh	w2, [x20,4]
+	mov	w20, -1
+	strh	w2, [x0,x1,lsl 1]
+	strh	w20, [x19,3704]
+	bl	FtlFreeSysBlkQueueOut
+	strh	w0, [x19,3896]
+	ldr	w0, [x19,3912]
+	strh	w0, [x19,3902]
+	ldr	w0, [x19,872]
+	str	w0, [x19,3904]
+	add	w0, w0, 1
+	strh	wzr, [x19,3898]
+	strh	w20, [x19,3900]
+	str	w0, [x19,872]
+	bl	FtlVpcTblFlush
+	bl	FtlSysBlkInit
+	cbnz	w0, .L2983
+	adrp	x0, .LANCHOR1+3064
+	mov	w1, 1
+	str	w1, [x0,#:lo12:.LANCHOR1+3064]
+.L2983:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlLowFormat, .-FtlLowFormat
+	.align	2
+	.global	FtlReInitForSDUpdata
+	.type	FtlReInitForSDUpdata, %function
+FtlReInitForSDUpdata:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,136]
+	cbz	w0, .L3016
+.L3018:
+	mov	w0, 0
+	b	.L3017
+.L3016:
+	adrp	x0, RK29_NANDC_REG_BASE
+	ldr	x0, [x0,#:lo12:RK29_NANDC_REG_BASE]
+	bl	FlashInit
+	cbnz	w0, .L3018
+	bl	FlashLoadFactorBbt
+	cbz	w0, .L3019
+	bl	FlashMakeFactorBbt
+.L3019:
+	adrp	x20, .LANCHOR2
+	add	x0, x20, :lo12:.LANCHOR2
+	ldr	x0, [x0,688]
+	bl	FlashReadIdbDataRaw
+	cbz	w0, .L3020
+	mov	w1, 0
+	mov	w2, 16
+	add	x0, x29, 32
+	bl	FlashReadFacBbtData
+	mov	w0, 0
+	ldr	w2, [x29,32]
+	mov	w1, w0
+	mov	w4, 1
+.L3022:
+	lsl	w3, w4, w1
+	add	w1, w1, 1
+	tst	w3, w2
+	cset	w3, ne
+	cmp	w1, 16
+	add	w0, w0, w3
+	bne	.L3022
+	cmp	w0, 6
+	bhi	.L3023
+	add	x0, x19, :lo12:.LANCHOR0
+	b	.L3045
+.L3023:
+	mov	w1, 0
+	mov	w4, 1
+.L3026:
+	lsl	w3, w4, w1
+	add	w1, w1, 1
+	tst	w3, w2
+	cset	w3, ne
+	cmp	w1, 24
+	add	w0, w0, w3
+	bne	.L3026
+	cmp	w0, 17
+	add	x0, x19, :lo12:.LANCHOR0
+	bls	.L3045
+	mov	w1, 36
+.L3045:
+	strb	w1, [x0,25]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x0,25]
+	strh	w1, [x0,4042]
+.L3020:
+	adrp	x0, .LC45
+	adrp	x1, .LC119
+	add	x1, x1, :lo12:.LC119
+	add	x0, x0, :lo12:.LC45
+	add	x20, x20, :lo12:.LANCHOR2
+	bl	printk
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w19, 1
+	add	x0, x0, 4016
+	bl	FtlConstantsInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x20,752]
+	bl	FtlFreeSysBlkQueueInit
+.L3028:
+	bl	FtlLoadBbt
+	cbz	w0, .L3029
+.L3047:
+	bl	FtlLowFormat
+	cmp	w19, 3
+	bhi	.L3048
+	add	w19, w19, 1
+	b	.L3028
+.L3048:
+	mov	w0, -1
+	b	.L3017
+.L3029:
+	bl	FtlSysBlkInit
+	cbnz	w0, .L3047
+	adrp	x1, .LANCHOR1+3064
+	mov	w2, 1
+	str	w2, [x1,#:lo12:.LANCHOR1+3064]
+.L3017:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlReInitForSDUpdata, .-FtlReInitForSDUpdata
+	.align	2
+	.global	FtlInit
+	.type	FtlInit, %function
+FtlInit:
+	stp	x29, x30, [sp, -48]!
+	mov	w0, -1
+	adrp	x1, .LC119
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	adrp	x21, .LANCHOR1
+	add	x21, x21, :lo12:.LANCHOR1
+	add	x1, x1, :lo12:.LC119
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	adrp	x20, .LANCHOR0
+	str	w0, [x21,3064]
+	adrp	x0, .LANCHOR4+388
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x20, x20, :lo12:.LANCHOR0
+	str	wzr, [x0,#:lo12:.LANCHOR4+388]
+	adrp	x0, .LC45
+	add	x0, x0, :lo12:.LC45
+	str	wzr, [x19,1400]
+	bl	printk
+	add	x0, x20, 4016
+	bl	FtlConstantsInit
+	bl	FtlMemInit
+	bl	FtlVariablesInit
+	ldrh	w0, [x19,752]
+	bl	FtlFreeSysBlkQueueInit
+	bl	FtlLoadBbt
+	cbz	w0, .L3050
+	adrp	x0, .LC138
+	add	x0, x0, :lo12:.LC138
+	b	.L3062
+.L3050:
+	bl	FtlSysBlkInit
+	cbz	w0, .L3052
+	adrp	x0, .LC139
+	add	x0, x0, :lo12:.LC139
+.L3062:
+	adrp	x1, .LANCHOR3
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x1, x1, 40
+	bl	printk
+	b	.L3051
+.L3052:
+	mov	w1, 1
+	str	w1, [x21,3064]
+	bl	ftl_do_gc
+	ldrh	w0, [x19,3600]
+	cmp	w0, 15
+	bhi	.L3053
+	mov	w19, 1024
+.L3054:
+	mov	w0, 1
+	mov	w1, w0
+	bl	ftl_do_gc
+	subs	w19, w19, #1
+	bne	.L3054
+	b	.L3051
+.L3053:
+	ldrb	w0, [x20,136]
+	cbz	w0, .L3051
+	mov	w19, 128
+.L3056:
+	mov	w0, 1
+	mov	w1, w0
+	bl	ftl_do_gc
+	subs	w19, w19, #1
+	bne	.L3056
+.L3051:
+	mov	w0, 0
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FtlInit, .-FtlInit
+	.global	gc_ink_free_return_value
+	.global	FtlUpdateVaildLpnCount
+	.global	g_ect_tbl_power_up_flush
+	.global	last_cache_match_count
+	.global	power_up_flag
+	.global	g_LowFormat
+	.global	gFtlInitStatus
+	.global	DeviceCapacity
+	.global	ToshibaRefValue
+	.global	Toshiba15RefValue
+	.global	ToshibaA19RefValue
+	.global	SamsungRefValue
+	.global	refValueDefault
+	.global	FbbtBlk
+	.global	random_seed
+	.global	gSlcNandParaInfo
+	.global	gNandParaInfo
+	.global	g_page_map_check_enable
+	.global	g_power_lost_ecc_error_blk
+	.global	g_power_lost_recovery_flag
+	.global	c_mlc_erase_count_value
+	.global	g_recovery_ppa_tbl
+	.global	g_recovery_page_min_ver
+	.global	g_recovery_page_num
+	.global	g_cur_erase_blk
+	.global	g_gc_skip_write_count
+	.global	g_gc_head_data_block_count
+	.global	g_gc_head_data_block
+	.global	g_ftl_nand_free_count
+	.global	g_in_swl_replace
+	.global	g_in_gc_progress
+	.global	g_all_blk_used_slc_mode
+	.global	g_max_erase_count
+	.global	g_totle_sys_slc_erase_count
+	.global	g_totle_slc_erase_count
+	.global	g_min_erase_count
+	.global	g_totle_avg_erase_count
+	.global	g_totle_mlc_erase_count
+	.global	g_totle_l2p_write_count
+	.global	g_totle_cache_write_count
+	.global	g_tmp_data_superblock_id
+	.global	g_totle_read_page_count
+	.global	g_totle_discard_page_count
+	.global	g_totle_read_sector
+	.global	g_totle_write_sector
+	.global	g_totle_write_page_count
+	.global	g_totle_gc_page_count
+	.global	g_gc_blk_index
+	.global	g_gc_merge_free_blk_threshold
+	.global	g_gc_free_blk_threshold
+	.global	g_gc_refresh_block_temp_tbl
+	.global	g_free_slc_blk_num
+	.global	g_gc_refresh_block_temp_num
+	.global	g_gc_bad_block_temp_tbl
+	.global	g_gc_bad_block_gc_index
+	.global	g_gc_bad_block_temp_num
+	.global	g_gc_next_blk_1
+	.global	g_gc_next_blk
+	.global	g_gc_cur_blk_max_valid_pages
+	.global	g_gc_cur_blk_valid_pages
+	.global	g_gc_page_offset
+	.global	g_gc_blk_num
+	.global	p_gc_blk_tbl
+	.global	p_gc_page_info
+	.global	g_sys_ext_data
+	.global	g_sys_save_data
+	.global	gp_last_act_superblock
+	.global	g_gc_superblock
+	.global	g_gc_temp_superblock
+	.global	g_buffer_superblock
+	.global	g_active_superblock
+	.global	g_num_data_superblocks
+	.global	g_num_free_superblocks
+	.global	p_data_block_list_tail
+	.global	p_data_block_list_head
+	.global	p_free_data_block_list_head
+	.global	p_data_block_list_table
+	.global	g_l2p_last_update_region_id
+	.global	p_l2p_map_buf
+	.global	p_l2p_ram_map
+	.global	g_totle_vendor_block
+	.global	p_vendor_region_ppn_table
+	.global	p_vendor_block_ver_table
+	.global	p_vendor_block_valid_page_count
+	.global	p_vendor_block_table
+	.global	g_totle_map_block
+	.global	p_map_region_ppn_check_table
+	.global	p_map_region_ppn_table
+	.global	p_map_block_ver_table
+	.global	p_map_block_valid_page_count
+	.global	p_map_block_table
+	.global	p_blk_mode_table
+	.global	p_valid_page_count_check_table
+	.global	p_valid_page_count_table
+	.global	g_totle_swl_count
+	.global	p_swl_mul_table
+	.global	p_erase_count_table
+	.global	g_ect_tbl_info_size
+	.global	gp_ect_tbl_info
+	.global	g_gc_num_req
+	.global	c_gc_page_buf_num
+	.global	gp_gc_page_buf_info
+	.global	p_gc_data_buf
+	.global	p_gc_spare_buf
+	.global	p_io_spare_buf
+	.global	p_io_data_buf_1
+	.global	p_io_data_buf_0
+	.global	p_sys_spare_buf
+	.global	p_vendor_data_buf
+	.global	p_sys_data_buf_1
+	.global	p_sys_data_buf
+	.global	g_wr_page_num
+	.global	req_wr_io
+	.global	c_wr_page_buf_num
+	.global	p_wr_io_data_buf
+	.global	p_wr_io_spare_buf
+	.global	p_plane_order_table
+	.global	g_req_cache
+	.global	req_gc_dst
+	.global	req_gc
+	.global	req_erase
+	.global	req_prgm
+	.global	req_read
+	.global	req_sys
+	.global	gVendorBlkInfo
+	.global	gL2pMapInfo
+	.global	gSysFreeQueue
+	.global	gSysInfo
+	.global	gBbtInfo
+	.global	g_flash_read_only_en
+	.global	g_inkDie_check_enable
+	.global	g_SlcPartLbaEndSector
+	.global	g_MaxLbn
+	.global	g_VaildLpn
+	.global	g_MaxLpn
+	.global	g_MaxLbaSector
+	.global	g_GlobalDataVersion
+	.global	g_GlobalSysVersion
+	.global	ftl_gc_temp_power_lost_recovery_flag
+	.global	c_ftl_nand_max_data_blks
+	.global	c_ftl_nand_data_op_blks_per_plane
+	.global	c_ftl_nand_data_blks_per_plane
+	.global	c_ftl_nand_max_sys_blks
+	.global	c_ftl_nand_init_sys_blks_per_plane
+	.global	c_ftl_nand_sys_blks_per_plane
+	.global	c_ftl_vendor_part_size
+	.global	c_ftl_nand_max_vendor_blks
+	.global	c_ftl_nand_max_map_blks
+	.global	c_ftl_nand_map_blks_per_plane
+	.global	c_ftl_nand_vendor_region_num
+	.global	c_ftl_nand_l2pmap_ram_region_num
+	.global	c_ftl_nand_map_region_num
+	.global	c_ftl_nand_totle_phy_blks
+	.global	c_ftl_nand_reserved_blks
+	.global	c_ftl_nand_byte_pre_oob
+	.global	c_ftl_nand_byte_pre_page
+	.global	c_ftl_nand_sec_pre_page_shift
+	.global	c_ftl_nand_sec_pre_page
+	.global	c_ftl_nand_page_pre_super_blk
+	.global	c_ftl_nand_page_pre_slc_blk
+	.global	c_ftl_nand_page_pre_blk
+	.global	c_ftl_nand_bbm_buf_size
+	.global	c_ftl_nand_ext_blk_pre_plane
+	.global	c_ftl_nand_blk_pre_plane
+	.global	c_ftl_nand_planes_num
+	.global	c_ftl_nand_blks_per_die_shift
+	.global	c_ftl_nand_blks_per_die
+	.global	c_ftl_nand_planes_per_die
+	.global	c_ftl_nand_die_num
+	.global	c_ftl_nand_type
+	.global	gMasterTempBuf
+	.global	gMasterInfo
+	.global	gNandcDumpWriteEn
+	.global	gToggleModeClkDiv
+	.global	gBootDdrMode
+	.global	gNandcEccBits
+	.global	gpNandc1
+	.global	gpNandc
+	.global	g_nandc_version_data
+	.global	gNandcVer
+	.global	gNandChipMap
+	.global	gNandIDataBuf
+	.global	FlashDdrTunningReadCount
+	.global	FlashWaitBusyScheduleEn
+	.global	gNandPhyInfo
+	.global	gFlashProgCheckSpareBuffer
+	.global	gFlashProgCheckBuffer
+	.global	gFlashSpareBuffer
+	.global	gFlashPageBuffer1
+	.global	gFlashPageBuffer0
+	.global	gpFlashSaveInfo
+	.global	gReadRetryInfo
+	.global	gpNandParaInfo
+	.global	gNandOptPara
+	.global	g_slc2KBNand
+	.global	gNandIDBResBlkNumSaveInFlash
+	.global	gNandIDBResBlkNum
+	.global	gNandFlashResEndPageAddr
+	.global	gNandFlashInfoBlockAddr
+	.global	gNandFlashIdbBlockAddr
+	.global	gNandFlashInfoBlockEcc
+	.global	gNandFlashIDBEccBits
+	.global	gNandFlashEccBits
+	.global	gNandRandomizer
+	.global	gBlockPageAlignSize
+	.global	gTotleBlock
+	.global	gNandMaxChip
+	.global	gNandMaxDie
+	.global	gFlashInterfaceMode
+	.global	gFlashSlcMode
+	.global	gFlashOnfiModeEn
+	.global	gFlashToggleModeEn
+	.global	gFlashSdrModeEn
+	.global	gMultiPageProgEn
+	.global	gMultiPageReadEn
+	.global	gpReadRetrial
+	.global	mlcPageToSlcPageTbl
+	.global	slcPageToMlcPageTbl
+	.global	DieAddrs
+	.global	gDieOp
+	.global	DieCsIndex
+	.global	read_retry_cur_offset
+	.section	.rodata
+	.align	3
+.LANCHOR3 = . + 0
+	.type	__func__.19429, %object
+	.size	__func__.19429, 11
+__func__.19429:
+	.string	"FtlMemInit"
+	.zero	5
+	.type	__func__.20378, %object
+	.size	__func__.20378, 21
+__func__.20378:
+	.string	"FtlVpcCheckAndModify"
+	.zero	3
+	.type	__func__.19502, %object
+	.size	__func__.19502, 8
+__func__.19502:
+	.string	"FtlInit"
+	.section	.rodata.str1.1,"aMS",%progbits,1
+.LC0:
+	.string	"BBT:"
+.LC1:
+	.string	"FlashEraseBlocks pageAddr error %x\n"
+.LC2:
+	.string	"otp error! %d"
+.LC3:
+	.string	"rr"
+.LC4:
+	.string	"%d statReg->V6.mtrans_cnt=%d flReg.V6.page_num=%d\n"
+.LC5:
+	.string	"nandc:"
+.LC6:
+	.string	"%d flReg.d32=%x %x\n"
+.LC7:
+	.string	"sdr read ok %x ecc=%d\n"
+.LC8:
+	.string	"sync para %d\n"
+.LC9:
+	.string	"TOG mode Read error %x %x\n"
+.LC10:
+	.string	"read retry status %x %x %x\n"
+.LC11:
+	.string	"micron RR %d row=%x,count %d,status=%d\n"
+.LC12:
+	.string	"ECC:%d\n"
+.LC13:
+	.string	"No.%d FLASH ID:%x %x %x %x %x %x\n"
+.LC14:
+	.string	"FlashLoadPhyInfo fail %x!!\n"
+.LC15:
+	.string	"Read pageadd=%x  ecc=%x err=%x\n"
+.LC16:
+	.string	"data:"
+.LC17:
+	.string	"spare:"
+.LC18:
+	.string	"ReadRetry pageadd=%x ecc=%x err=%x\n"
+.LC19:
+	.string	"FLFB:%d %d\n"
+.LC20:
+	.string	"prog error: = %x\n"
+.LC21:
+	.string	"prog read error: = %x\n"
+.LC22:
+	.string	"prog read s error: = %x %x %x\n"
+.LC23:
+	.string	"prog read d error: = %x %x %x\n"
+.LC24:
+	.string	"FlashMakeFactorBbt %d\n"
+.LC25:
+	.string	"bad block:%d %d\n"
+.LC26:
+	.string	"FMFB:%d %d\n"
+.LC27:
+	.string	"E:bad block:%d\n"
+.LC28:
+	.string	"FMFB:Save %d %d\n"
+.LC29:
+	.string	"%s error allocating memory. return -1\n"
+.LC30:
+	.string	"phyBlk = 0x%x die = %d block_in_die = 0x%x 0x%8x\n"
+.LC31:
+	.string	"FtlBbmTblFlush id=%x,page=%x,previd=%x cnt=%d\n"
+.LC32:
+	.string	"FtlBbmTblFlush error:%x\n"
+.LC33:
+	.string	"FtlBbmTblFlush error = %x error count = %d\n"
+.LC34:
+	.string	"remove_from_free_sys_Queue %x\n"
+.LC35:
+	.string	"FtlFreeSysBlkQueueOut free count = %d\n"
+.LC36:
+	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d, error\n"
+.LC37:
+	.string	"FtlFreeSysBlkQueueOut = %x, free count = %d\n"
+.LC38:
+	.string	"FtlMapWritePage error = %x\n"
+.LC39:
+	.string	"FtlMapWritePage error = %x error count = %d\n"
+.LC40:
+	.string	"ftl_map_blk_gc blk info: %x %x %x\n"
+.LC41:
+	.string	"page map lost: %x %x\n"
+.LC42:
+	.string	"load_l2p_region refresh = %x phyAddr = %x\n"
+.LC43:
+	.string	"FtlVendorPartRead refresh = %x phyAddr = %x\n"
+.LC44:
+	.string	"FtlVpcTblFlush error = %x error count = %d\n"
+.LC45:
+	.string	"%s\n"
+.LC46:
+	.string	"no ect"
+.LC47:
+	.string	"page map lost %x %x %x %x\n"
+.LC48:
+	.string	"slc mode"
+.LC49:
+	.string	"FLASH INFO:\n"
+.LC50:
+	.string	"FLASH ID: %x\n"
+.LC51:
+	.string	"Device Capacity: %d MB\n"
+.LC52:
+	.string	"FMWAIT: %x %x %x %x\n"
+.LC53:
+	.string	"FTL INFO:\n"
+.LC54:
+	.string	"g_MaxLpn = 0x%x\n"
+.LC55:
+	.string	"g_VaildLpn = 0x%x\n"
+.LC56:
+	.string	"read_page_count = 0x%x\n"
+.LC57:
+	.string	"discard_page_count = 0x%x\n"
+.LC58:
+	.string	"write_page_count = 0x%x\n"
+.LC59:
+	.string	"cache_write_count = 0x%x\n"
+.LC60:
+	.string	"l2p_write_count = 0x%x\n"
+.LC61:
+	.string	"gc_page_count = 0x%x\n"
+.LC62:
+	.string	"totle_write = %d MB\n"
+.LC63:
+	.string	"totle_read = %d MB\n"
+.LC64:
+	.string	"GSV = 0x%x\n"
+.LC65:
+	.string	"GDV = 0x%x\n"
+.LC66:
+	.string	"bad blk num = %d %d\n"
+.LC67:
+	.string	"free_superblocks = 0x%x\n"
+.LC68:
+	.string	"mlc_EC = 0x%x\n"
+.LC69:
+	.string	"slc_EC = 0x%x\n"
+.LC70:
+	.string	"avg_EC = 0x%x\n"
+.LC71:
+	.string	"sys_EC = 0x%x\n"
+.LC72:
+	.string	"max_EC = 0x%x\n"
+.LC73:
+	.string	"min_EC = 0x%x\n"
+.LC74:
+	.string	"PLT = 0x%x\n"
+.LC75:
+	.string	"POT = 0x%x\n"
+.LC76:
+	.string	"MaxSector = 0x%x\n"
+.LC77:
+	.string	"init_sys_blks_pp = 0x%x\n"
+.LC78:
+	.string	"sys_blks_pp = 0x%x\n"
+.LC79:
+	.string	"free sysblock = 0x%x\n"
+.LC80:
+	.string	"data_blks_pp = 0x%x\n"
+.LC81:
+	.string	"data_op_blks_pp = 0x%x\n"
+.LC82:
+	.string	"max_data_blks = 0x%x\n"
+.LC83:
+	.string	"Sys.id = 0x%x\n"
+.LC84:
+	.string	"Bbt.id = 0x%x\n"
+.LC85:
+	.string	"ACT.page = 0x%x\n"
+.LC86:
+	.string	"ACT.plane = 0x%x\n"
+.LC87:
+	.string	"ACT.id = 0x%x\n"
+.LC88:
+	.string	"ACT.mode = 0x%x\n"
+.LC89:
+	.string	"ACT.a_pages = 0x%x\n"
+.LC90:
+	.string	"ACT VPC = 0x%x\n"
+.LC91:
+	.string	"BUF.page = 0x%x\n"
+.LC92:
+	.string	"BUF.plane = 0x%x\n"
+.LC93:
+	.string	"BUF.id = 0x%x\n"
+.LC94:
+	.string	"BUF.mode = 0x%x\n"
+.LC95:
+	.string	"BUF.a_pages = 0x%x\n"
+.LC96:
+	.string	"BUF VPC = 0x%x\n"
+.LC97:
+	.string	"TMP.page = 0x%x\n"
+.LC98:
+	.string	"TMP.plane = 0x%x\n"
+.LC99:
+	.string	"TMP.id = 0x%x\n"
+.LC100:
+	.string	"TMP.mode = 0x%x\n"
+.LC101:
+	.string	"TMP.a_pages = 0x%x\n"
+.LC102:
+	.string	"GC.page = 0x%x\n"
+.LC103:
+	.string	"GC.plane = 0x%x\n"
+.LC104:
+	.string	"GC.id = 0x%x\n"
+.LC105:
+	.string	"GC.mode = 0x%x\n"
+.LC106:
+	.string	"GC.a_pages = 0x%x\n"
+.LC107:
+	.string	"WR_CHK = 0x%x %x %x %x\n"
+.LC108:
+	.string	"Read Err Cnt = 0x%x\n"
+.LC109:
+	.string	"Prog Err Cnt = 0x%x\n"
+.LC110:
+	.string	"gc_free_blk_th= 0x%x\n"
+.LC111:
+	.string	"gc_merge_free_blk_th= 0x%x\n"
+.LC112:
+	.string	"gc_skip_write_count= 0x%x\n"
+.LC113:
+	.string	"gc_blk_index= 0x%x\n"
+.LC114:
+	.string	"free min EC= 0x%x\n"
+.LC115:
+	.string	"free max EC= 0x%x\n"
+.LC116:
+	.string	"GC__SB VPC = 0x%x\n"
+.LC117:
+	.string	"%d. [0x%x]=0x%x 0x%x  0x%x\n"
+.LC118:
+	.string	"free %d. [0x%x] 0x%x  0x%x\n"
+.LC119:
+	.string	"FTL version: 5.0.48 20180408"
+.LC120:
+	.string	"swblk %x ,avg = %x max= %x vpc= %x,ec=%x ,max ec=%x\n"
+.LC121:
+	.string	"FtlGcScanTempBlkError ID %x %x!!!!!!!\n"
+.LC122:
+	.string	"FtlGcRefreshBlock  0x%x\n"
+.LC123:
+	.string	"FtlGcMarkBadPhyBlk %d 0x%x\n"
+.LC124:
+	.string	"FtlGcFreeBadSuperBlk 0x%x\n"
+.LC125:
+	.string	"decrement_vpc_count %x = %d\n"
+.LC126:
+	.string	"RSB refresh addr %x\n"
+.LC127:
+	.string	"spuer block %x vpn is 0\n "
+.LC128:
+	.string	"g_recovery_ppa %x ver %x\n "
+.LC129:
+	.string	"...%s enter...\n"
+.LC130:
+	.string	"FtlCheckVpc %x = %x  %x\n"
+.LC131:
+	.string	"%d GC datablk  = %x vpc %x %x\n"
+.LC132:
+	.string	"SWL %x, FSB = %x vpc= %x,ec=%x th=%x\n"
+.LC133:
+	.string	"Ftlwrite decrement_vpc_count %x = %d\n"
+.LC134:
+	.string	"GC des block %x done\n"
+.LC135:
+	.string	"FtlWrite: lpa error:%x %x\n"
+.LC136:
+	.string	"fix power lost blk = %x vpc=%x\n"
+.LC137:
+	.string	"erase power lost blk = %x vpc=%x\n"
+.LC138:
+	.string	"...%s: no bad block mapping table, format device\n"
+.LC139:
+	.string	"...%s FtlSysBlkInit error ,format device!\n"
+	.data
+	.align	3
+.LANCHOR1 = . + 0
+	.type	random_seed, %object
+	.size	random_seed, 256
+random_seed:
+	.hword	22378
+	.hword	1512
+	.hword	25245
+	.hword	17827
+	.hword	25756
+	.hword	19440
+	.hword	9026
+	.hword	10030
+	.hword	29528
+	.hword	20467
+	.hword	29676
+	.hword	24432
+	.hword	31328
+	.hword	6872
+	.hword	13426
+	.hword	13842
+	.hword	8783
+	.hword	1108
+	.hword	782
+	.hword	28837
+	.hword	30729
+	.hword	9505
+	.hword	18676
+	.hword	23085
+	.hword	18730
+	.hword	1085
+	.hword	32609
+	.hword	14697
+	.hword	20858
+	.hword	15170
+	.hword	30365
+	.hword	1607
+	.hword	32298
+	.hword	4995
+	.hword	18905
+	.hword	1976
+	.hword	9592
+	.hword	20204
+	.hword	17443
+	.hword	13615
+	.hword	23330
+	.hword	29369
+	.hword	13947
+	.hword	9398
+	.hword	32398
+	.hword	8984
+	.hword	27600
+	.hword	21785
+	.hword	6019
+	.hword	6311
+	.hword	31598
+	.hword	30210
+	.hword	19327
+	.hword	13896
+	.hword	11347
+	.hword	27545
+	.hword	3107
+	.hword	26575
+	.hword	32270
+	.hword	19852
+	.hword	20601
+	.hword	8349
+	.hword	9290
+	.hword	29819
+	.hword	13579
+	.hword	3661
+	.hword	28676
+	.hword	27331
+	.hword	32574
+	.hword	8693
+	.hword	31253
+	.hword	9081
+	.hword	5399
+	.hword	6842
+	.hword	20087
+	.hword	5537
+	.hword	1274
+	.hword	11617
+	.hword	9530
+	.hword	4866
+	.hword	8035
+	.hword	23219
+	.hword	1178
+	.hword	23272
+	.hword	7383
+	.hword	18944
+	.hword	12488
+	.hword	12871
+	.hword	29340
+	.hword	20532
+	.hword	11022
+	.hword	22514
+	.hword	228
+	.hword	22363
+	.hword	24978
+	.hword	14584
+	.hword	12138
+	.hword	3092
+	.hword	17916
+	.hword	16863
+	.hword	14554
+	.hword	31457
+	.hword	29474
+	.hword	25311
+	.hword	24121
+	.hword	3684
+	.hword	28037
+	.hword	22865
+	.hword	22839
+	.hword	25217
+	.hword	13217
+	.hword	27186
+	.hword	14938
+	.hword	11180
+	.hword	29754
+	.hword	24180
+	.hword	15150
+	.hword	32455
+	.hword	20434
+	.hword	23848
+	.hword	29983
+	.hword	16120
+	.hword	14769
+	.hword	20041
+	.hword	29803
+	.hword	28406
+	.hword	17598
+	.hword	28087
+	.type	gNandParaInfo, %object
+	.size	gNandParaInfo, 32
+gNandParaInfo:
+	.byte	0
+	.byte	0
+	.zero	5
+	.byte	0
+	.byte	1
+	.byte	8
+	.hword	128
+	.byte	2
+	.byte	1
+	.hword	2048
+	.hword	0
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.type	NandFlashParaTbl, %object
+	.size	NandFlashParaTbl, 2368
+NandFlashParaTbl:
+	.byte	6
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	68
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1064
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	4
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-88
+	.byte	5
+	.byte	-53
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	74
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	84
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	4096
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	72
+	.byte	4
+	.byte	70
+	.byte	-123
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-120
+	.byte	5
+	.byte	-58
+	.byte	-119
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	104
+	.byte	0
+	.byte	39
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	1
+	.byte	2
+	.hword	2048
+	.hword	287
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	86
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	24
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	700
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-124
+	.byte	-59
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-43
+	.byte	-47
+	.byte	-90
+	.byte	104
+	.byte	0
+	.byte	4
+	.byte	2
+	.byte	8
+	.hword	64
+	.byte	1
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	44
+	.byte	-36
+	.byte	-112
+	.byte	-90
+	.byte	84
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	8
+	.hword	64
+	.byte	1
+	.byte	2
+	.hword	1024
+	.hword	279
+	.byte	0
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	84
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1024
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	50
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1096
+	.hword	1503
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	50
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1048
+	.hword	1503
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.zero	4
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1044
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-46
+	.byte	4
+	.byte	67
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	473
+	.byte	1
+	.byte	1
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-61
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	473
+	.byte	1
+	.byte	2
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-111
+	.byte	96
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1046
+	.hword	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2090
+	.hword	473
+	.byte	1
+	.byte	4
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-21
+	.byte	116
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	473
+	.byte	1
+	.byte	7
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-38
+	.byte	116
+	.byte	-60
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	530
+	.hword	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	281
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-89
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1060
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	20
+	.byte	-98
+	.byte	52
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1056
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-89
+	.byte	66
+	.byte	72
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1060
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1056
+	.hword	473
+	.byte	2
+	.byte	6
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2092
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-83
+	.byte	-43
+	.byte	-108
+	.byte	-102
+	.byte	116
+	.byte	66
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1024
+	.hword	273
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	-124
+	.byte	7
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	-120
+	.byte	36
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	36
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	74
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	-41
+	.byte	-108
+	.byte	62
+	.byte	-124
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-119
+	.byte	104
+	.byte	4
+	.byte	70
+	.byte	-87
+	.byte	0
+	.byte	7
+	.byte	1
+	.byte	8
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	279
+	.byte	1
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	2092
+	.hword	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-123
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	2
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	2092
+	.hword	1505
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-43
+	.byte	-124
+	.byte	50
+	.byte	114
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	1
+	.hword	2056
+	.hword	1473
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2058
+	.hword	1489
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2062
+	.hword	1489
+	.byte	1
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-107
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	1
+	.byte	2
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	1497
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-108
+	.byte	50
+	.byte	118
+	.byte	85
+	.byte	1
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2050
+	.hword	401
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	32
+	.byte	1
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	1497
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1074
+	.hword	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2106
+	.hword	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1056
+	.hword	1497
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2082
+	.hword	473
+	.byte	1
+	.byte	65
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	1497
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	1473
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-92
+	.byte	-126
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2090
+	.hword	1241
+	.byte	1
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	2092
+	.hword	1473
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2106
+	.hword	473
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1074
+	.hword	473
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-92
+	.byte	-109
+	.byte	122
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2138
+	.hword	1497
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-126
+	.byte	118
+	.byte	86
+	.byte	8
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2062
+	.hword	473
+	.byte	1
+	.byte	0
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	-41
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	1497
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	126
+	.byte	100
+	.byte	68
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	473
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	126
+	.byte	104
+	.byte	68
+	.byte	0
+	.byte	2
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2048
+	.hword	505
+	.byte	2
+	.byte	49
+	.byte	60
+	.byte	36
+	.byte	3
+	.byte	0
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	-108
+	.byte	122
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2076
+	.hword	409
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-34
+	.byte	-43
+	.byte	122
+	.byte	88
+	.byte	67
+	.byte	0
+	.byte	2
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2076
+	.hword	441
+	.byte	2
+	.byte	0
+	.byte	40
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-43
+	.byte	-108
+	.byte	118
+	.byte	84
+	.byte	67
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	1038
+	.hword	281
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	36
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.byte	6
+	.byte	-20
+	.byte	-41
+	.byte	20
+	.byte	118
+	.byte	84
+	.byte	-62
+	.byte	0
+	.byte	1
+	.byte	16
+	.hword	128
+	.byte	2
+	.byte	2
+	.hword	2076
+	.hword	1169
+	.byte	2
+	.byte	0
+	.byte	24
+	.byte	40
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.type	NandOptPara, %object
+	.size	NandOptPara, 128
+NandOptPara:
+	.byte	1
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	50
+	.byte	17
+	.byte	-128
+	.byte	112
+	.byte	120
+	.byte	120
+	.byte	3
+	.byte	1
+	.byte	0
+	.zero	14
+	.byte	2
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	0
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.byte	3
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.byte	4
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	112
+	.byte	112
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.type	ToshibaA19RefValue, %object
+	.size	ToshibaA19RefValue, 45
+ToshibaA19RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.zero	3
+	.type	Toshiba15RefValue, %object
+	.size	Toshiba15RefValue, 95
+Toshiba15RefValue:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.zero	1
+	.type	ToshibaRefValue, %object
+	.size	ToshibaRefValue, 8
+ToshibaRefValue:
+	.byte	0
+	.byte	4
+	.byte	124
+	.byte	120
+	.byte	116
+	.byte	8
+	.byte	12
+	.byte	112
+	.type	SamsungRefValue, %object
+	.size	SamsungRefValue, 64
+SamsungRefValue:
+	.byte	-89
+	.byte	-92
+	.byte	-91
+	.byte	-90
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	10
+	.byte	0
+	.byte	0
+	.byte	40
+	.byte	0
+	.byte	-20
+	.byte	-40
+	.byte	-19
+	.byte	-11
+	.byte	-19
+	.byte	-26
+	.byte	10
+	.byte	15
+	.byte	5
+	.byte	0
+	.byte	15
+	.byte	10
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-17
+	.byte	-24
+	.byte	-36
+	.byte	-15
+	.byte	-5
+	.byte	-2
+	.byte	-16
+	.byte	10
+	.byte	0
+	.byte	-5
+	.byte	-20
+	.byte	-48
+	.byte	-30
+	.byte	-48
+	.byte	-62
+	.byte	20
+	.byte	15
+	.byte	-5
+	.byte	-20
+	.byte	-24
+	.byte	-5
+	.byte	-24
+	.byte	-36
+	.byte	30
+	.byte	20
+	.byte	-5
+	.byte	-20
+	.byte	-5
+	.byte	-1
+	.byte	-5
+	.byte	-8
+	.byte	7
+	.byte	12
+	.byte	2
+	.byte	0
+	.type	refValueDefault, %object
+	.size	refValueDefault, 28
+refValueDefault:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.zero	4
+	.type	gSlcNandParaInfo, %object
+	.size	gSlcNandParaInfo, 32
+gSlcNandParaInfo:
+	.byte	2
+	.byte	-104
+	.byte	-15
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	1
+	.byte	1
+	.byte	4
+	.hword	64
+	.byte	1
+	.byte	1
+	.hword	1024
+	.hword	256
+	.byte	0
+	.byte	0
+	.byte	16
+	.byte	40
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	4
+	.type	gFtlInitStatus, %object
+	.size	gFtlInitStatus, 4
+gFtlInitStatus:
+	.word	-1
+	.type	ftl_gc_temp_block_bops_scan_page_addr, %object
+	.size	ftl_gc_temp_block_bops_scan_page_addr, 2
+ftl_gc_temp_block_bops_scan_page_addr:
+	.hword	-1
+	.zero	2
+	.type	power_up_flag, %object
+	.size	power_up_flag, 4
+power_up_flag:
+	.word	1
+	.bss
+	.align	3
+.LANCHOR0 = . + 0
+.LANCHOR2 = . + 4352
+.LANCHOR4 = . + 8704
+	.type	gFlashPageBuffer0, %object
+	.size	gFlashPageBuffer0, 8
+gFlashPageBuffer0:
+	.zero	8
+	.type	gNandFlashIdbBlockAddr, %object
+	.size	gNandFlashIdbBlockAddr, 4
+gNandFlashIdbBlockAddr:
+	.zero	4
+	.zero	4
+	.type	p_blk_mode_table, %object
+	.size	p_blk_mode_table, 8
+p_blk_mode_table:
+	.zero	8
+	.type	g_slc2KBNand, %object
+	.size	g_slc2KBNand, 1
+g_slc2KBNand:
+	.zero	1
+	.type	gNandIDBResBlkNum, %object
+	.size	gNandIDBResBlkNum, 1
+gNandIDBResBlkNum:
+	.zero	1
+	.zero	2
+	.type	gBlockPageAlignSize, %object
+	.size	gBlockPageAlignSize, 4
+gBlockPageAlignSize:
+	.zero	4
+	.type	gNandRandomizer, %object
+	.size	gNandRandomizer, 1
+gNandRandomizer:
+	.zero	1
+	.zero	7
+	.type	gNandChipMap, %object
+	.size	gNandChipMap, 64
+gNandChipMap:
+	.zero	64
+	.type	gNandOptPara, %object
+	.size	gNandOptPara, 32
+gNandOptPara:
+	.zero	32
+	.type	gFlashSlcMode, %object
+	.size	gFlashSlcMode, 1
+gFlashSlcMode:
+	.zero	1
+	.zero	3
+	.type	slcPageToMlcPageTbl, %object
+	.size	slcPageToMlcPageTbl, 512
+slcPageToMlcPageTbl:
+	.zero	512
+	.type	mlcPageToSlcPageTbl, %object
+	.size	mlcPageToSlcPageTbl, 1024
+mlcPageToSlcPageTbl:
+	.zero	1024
+	.type	gNandMaxDie, %object
+	.size	gNandMaxDie, 1
+gNandMaxDie:
+	.zero	1
+	.type	gNandMaxChip, %object
+	.size	gNandMaxChip, 1
+gNandMaxChip:
+	.zero	1
+	.zero	2
+	.type	DieCsIndex, %object
+	.size	DieCsIndex, 8
+DieCsIndex:
+	.zero	8
+	.type	DieAddrs, %object
+	.size	DieAddrs, 32
+DieAddrs:
+	.zero	32
+	.type	gDieOp, %object
+	.size	gDieOp, 192
+gDieOp:
+	.zero	192
+	.type	gpNandParaInfo, %object
+	.size	gpNandParaInfo, 8
+gpNandParaInfo:
+	.zero	8
+	.type	gTotleBlock, %object
+	.size	gTotleBlock, 2
+gTotleBlock:
+	.zero	2
+	.zero	6
+	.type	gNandIDataBuf, %object
+	.size	gNandIDataBuf, 2048
+gNandIDataBuf:
+	.zero	2048
+	.type	gpNandc, %object
+	.size	gpNandc, 8
+gpNandc:
+	.zero	8
+	.type	NANDC_FMCTL, %object
+	.size	NANDC_FMCTL, 4
+NANDC_FMCTL:
+	.zero	4
+	.type	NANDC_FMWAIT, %object
+	.size	NANDC_FMWAIT, 4
+NANDC_FMWAIT:
+	.zero	4
+	.type	NANDC_FLCTL, %object
+	.size	NANDC_FLCTL, 4
+NANDC_FLCTL:
+	.zero	4
+	.type	NANDC_BCHCTL, %object
+	.size	NANDC_BCHCTL, 4
+NANDC_BCHCTL:
+	.zero	4
+	.type	NANDC_DLL_CTL_REG0, %object
+	.size	NANDC_DLL_CTL_REG0, 4
+NANDC_DLL_CTL_REG0:
+	.zero	4
+	.type	NANDC_DLL_CTL_REG1, %object
+	.size	NANDC_DLL_CTL_REG1, 4
+NANDC_DLL_CTL_REG1:
+	.zero	4
+	.type	NANDC_RANDMZ_CFG, %object
+	.size	NANDC_RANDMZ_CFG, 4
+NANDC_RANDMZ_CFG:
+	.zero	4
+	.type	NANDC_FMWAIT_SYN, %object
+	.size	NANDC_FMWAIT_SYN, 4
+NANDC_FMWAIT_SYN:
+	.zero	4
+	.type	gNandPhyInfo, %object
+	.size	gNandPhyInfo, 28
+gNandPhyInfo:
+	.zero	28
+	.type	gNandFlashEccBits, %object
+	.size	gNandFlashEccBits, 1
+gNandFlashEccBits:
+	.zero	1
+	.zero	3
+	.type	g_MaxLbaSector, %object
+	.size	g_MaxLbaSector, 4
+g_MaxLbaSector:
+	.zero	4
+	.type	FlashWaitBusyScheduleEn, %object
+	.size	FlashWaitBusyScheduleEn, 4
+FlashWaitBusyScheduleEn:
+	.zero	4
+	.type	gReadRetryInfo, %object
+	.size	gReadRetryInfo, 852
+gReadRetryInfo:
+	.zero	852
+	.zero	4
+	.type	read_retry_cur_offset, %object
+	.size	read_retry_cur_offset, 4
+read_retry_cur_offset:
+	.zero	4
+	.type	gFlashInterfaceMode, %object
+	.size	gFlashInterfaceMode, 1
+gFlashInterfaceMode:
+	.zero	1
+	.type	gFlashToggleModeEn, %object
+	.size	gFlashToggleModeEn, 1
+gFlashToggleModeEn:
+	.zero	1
+	.zero	2
+	.type	gBootDdrMode, %object
+	.size	gBootDdrMode, 4
+gBootDdrMode:
+	.zero	4
+	.type	gNandcVer, %object
+	.size	gNandcVer, 4
+gNandcVer:
+	.zero	4
+	.type	g_nandc_version_data, %object
+	.size	g_nandc_version_data, 4
+g_nandc_version_data:
+	.zero	4
+	.zero	4
+	.type	gMasterTempBuf, %object
+	.size	gMasterTempBuf, 8
+gMasterTempBuf:
+	.zero	8
+	.type	gMasterInfo, %object
+	.size	gMasterInfo, 48
+gMasterInfo:
+	.zero	48
+	.type	gNandcDumpWriteEn, %object
+	.size	gNandcDumpWriteEn, 4
+gNandcDumpWriteEn:
+	.zero	4
+	.type	gNandcEccBits, %object
+	.size	gNandcEccBits, 4
+gNandcEccBits:
+	.zero	4
+	.type	gMultiPageProgEn, %object
+	.size	gMultiPageProgEn, 1
+gMultiPageProgEn:
+	.zero	1
+	.zero	3
+	.type	g_inkDie_check_enable, %object
+	.size	g_inkDie_check_enable, 4
+g_inkDie_check_enable:
+	.zero	4
+	.type	FlashDdrTunningReadCount, %object
+	.size	FlashDdrTunningReadCount, 4
+FlashDdrTunningReadCount:
+	.zero	4
+	.zero	4
+	.type	gpReadRetrial, %object
+	.size	gpReadRetrial, 8
+gpReadRetrial:
+	.zero	8
+	.type	gpFlashSaveInfo, %object
+	.size	gpFlashSaveInfo, 8
+gpFlashSaveInfo:
+	.zero	8
+	.type	gNandFlashInfoBlockAddr, %object
+	.size	gNandFlashInfoBlockAddr, 4
+gNandFlashInfoBlockAddr:
+	.zero	4
+	.type	gNandIDBResBlkNumSaveInFlash, %object
+	.size	gNandIDBResBlkNumSaveInFlash, 1
+gNandIDBResBlkNumSaveInFlash:
+	.zero	1
+	.type	gNandFlashIDBEccBits, %object
+	.size	gNandFlashIDBEccBits, 1
+gNandFlashIDBEccBits:
+	.zero	1
+	.zero	2
+	.type	gFlashPageBuffer1, %object
+	.size	gFlashPageBuffer1, 8
+gFlashPageBuffer1:
+	.zero	8
+	.type	gFlashSpareBuffer, %object
+	.size	gFlashSpareBuffer, 8
+gFlashSpareBuffer:
+	.zero	8
+	.type	gFlashProgCheckBuffer, %object
+	.size	gFlashProgCheckBuffer, 8
+gFlashProgCheckBuffer:
+	.zero	8
+	.type	gFlashProgCheckSpareBuffer, %object
+	.size	gFlashProgCheckSpareBuffer, 8
+gFlashProgCheckSpareBuffer:
+	.zero	8
+	.type	gMultiPageReadEn, %object
+	.size	gMultiPageReadEn, 1
+gMultiPageReadEn:
+	.zero	1
+	.zero	7
+	.type	FbbtBlk, %object
+	.size	FbbtBlk, 16
+FbbtBlk:
+	.zero	16
+	.type	c_ftl_nand_sys_blks_per_plane, %object
+	.size	c_ftl_nand_sys_blks_per_plane, 4
+c_ftl_nand_sys_blks_per_plane:
+	.zero	4
+	.type	c_ftl_nand_planes_num, %object
+	.size	c_ftl_nand_planes_num, 2
+c_ftl_nand_planes_num:
+	.zero	2
+	.zero	2
+	.type	c_ftl_nand_max_sys_blks, %object
+	.size	c_ftl_nand_max_sys_blks, 4
+c_ftl_nand_max_sys_blks:
+	.zero	4
+	.type	c_ftl_nand_data_blks_per_plane, %object
+	.size	c_ftl_nand_data_blks_per_plane, 2
+c_ftl_nand_data_blks_per_plane:
+	.zero	2
+	.type	c_ftl_nand_blk_pre_plane, %object
+	.size	c_ftl_nand_blk_pre_plane, 2
+c_ftl_nand_blk_pre_plane:
+	.zero	2
+	.type	c_ftl_nand_max_data_blks, %object
+	.size	c_ftl_nand_max_data_blks, 4
+c_ftl_nand_max_data_blks:
+	.zero	4
+	.type	c_ftl_nand_totle_phy_blks, %object
+	.size	c_ftl_nand_totle_phy_blks, 4
+c_ftl_nand_totle_phy_blks:
+	.zero	4
+	.type	c_ftl_nand_type, %object
+	.size	c_ftl_nand_type, 2
+c_ftl_nand_type:
+	.zero	2
+	.type	c_ftl_nand_die_num, %object
+	.size	c_ftl_nand_die_num, 2
+c_ftl_nand_die_num:
+	.zero	2
+	.type	c_ftl_nand_planes_per_die, %object
+	.size	c_ftl_nand_planes_per_die, 2
+c_ftl_nand_planes_per_die:
+	.zero	2
+	.zero	2
+	.type	p_plane_order_table, %object
+	.size	p_plane_order_table, 32
+p_plane_order_table:
+	.zero	32
+	.type	c_mlc_erase_count_value, %object
+	.size	c_mlc_erase_count_value, 2
+c_mlc_erase_count_value:
+	.zero	2
+	.type	c_ftl_nand_ext_blk_pre_plane, %object
+	.size	c_ftl_nand_ext_blk_pre_plane, 2
+c_ftl_nand_ext_blk_pre_plane:
+	.zero	2
+	.type	c_ftl_vendor_part_size, %object
+	.size	c_ftl_vendor_part_size, 2
+c_ftl_vendor_part_size:
+	.zero	2
+	.type	c_ftl_nand_blks_per_die, %object
+	.size	c_ftl_nand_blks_per_die, 2
+c_ftl_nand_blks_per_die:
+	.zero	2
+	.type	c_ftl_nand_blks_per_die_shift, %object
+	.size	c_ftl_nand_blks_per_die_shift, 2
+c_ftl_nand_blks_per_die_shift:
+	.zero	2
+	.type	c_ftl_nand_page_pre_blk, %object
+	.size	c_ftl_nand_page_pre_blk, 2
+c_ftl_nand_page_pre_blk:
+	.zero	2
+	.type	c_ftl_nand_page_pre_slc_blk, %object
+	.size	c_ftl_nand_page_pre_slc_blk, 2
+c_ftl_nand_page_pre_slc_blk:
+	.zero	2
+	.type	c_ftl_nand_page_pre_super_blk, %object
+	.size	c_ftl_nand_page_pre_super_blk, 2
+c_ftl_nand_page_pre_super_blk:
+	.zero	2
+	.type	c_ftl_nand_sec_pre_page, %object
+	.size	c_ftl_nand_sec_pre_page, 2
+c_ftl_nand_sec_pre_page:
+	.zero	2
+	.type	c_ftl_nand_sec_pre_page_shift, %object
+	.size	c_ftl_nand_sec_pre_page_shift, 2
+c_ftl_nand_sec_pre_page_shift:
+	.zero	2
+	.type	c_ftl_nand_byte_pre_page, %object
+	.size	c_ftl_nand_byte_pre_page, 2
+c_ftl_nand_byte_pre_page:
+	.zero	2
+	.type	c_ftl_nand_byte_pre_oob, %object
+	.size	c_ftl_nand_byte_pre_oob, 2
+c_ftl_nand_byte_pre_oob:
+	.zero	2
+	.type	c_ftl_nand_reserved_blks, %object
+	.size	c_ftl_nand_reserved_blks, 2
+c_ftl_nand_reserved_blks:
+	.zero	2
+	.zero	2
+	.type	DeviceCapacity, %object
+	.size	DeviceCapacity, 4
+DeviceCapacity:
+	.zero	4
+	.type	c_ftl_nand_max_vendor_blks, %object
+	.size	c_ftl_nand_max_vendor_blks, 2
+c_ftl_nand_max_vendor_blks:
+	.zero	2
+	.type	c_ftl_nand_vendor_region_num, %object
+	.size	c_ftl_nand_vendor_region_num, 2
+c_ftl_nand_vendor_region_num:
+	.zero	2
+	.type	c_ftl_nand_map_blks_per_plane, %object
+	.size	c_ftl_nand_map_blks_per_plane, 2
+c_ftl_nand_map_blks_per_plane:
+	.zero	2
+	.zero	2
+	.type	c_ftl_nand_max_map_blks, %object
+	.size	c_ftl_nand_max_map_blks, 4
+c_ftl_nand_max_map_blks:
+	.zero	4
+	.type	c_ftl_nand_init_sys_blks_per_plane, %object
+	.size	c_ftl_nand_init_sys_blks_per_plane, 4
+c_ftl_nand_init_sys_blks_per_plane:
+	.zero	4
+	.type	c_ftl_nand_map_region_num, %object
+	.size	c_ftl_nand_map_region_num, 2
+c_ftl_nand_map_region_num:
+	.zero	2
+	.type	c_ftl_nand_l2pmap_ram_region_num, %object
+	.size	c_ftl_nand_l2pmap_ram_region_num, 2
+c_ftl_nand_l2pmap_ram_region_num:
+	.zero	2
+	.type	g_page_map_check_enable, %object
+	.size	g_page_map_check_enable, 2
+g_page_map_check_enable:
+	.zero	2
+	.type	g_free_slc_blk_num, %object
+	.size	g_free_slc_blk_num, 2
+g_free_slc_blk_num:
+	.zero	2
+	.type	g_SlcPartLbaEndSector, %object
+	.size	g_SlcPartLbaEndSector, 4
+g_SlcPartLbaEndSector:
+	.zero	4
+	.type	g_all_blk_used_slc_mode, %object
+	.size	g_all_blk_used_slc_mode, 4
+g_all_blk_used_slc_mode:
+	.zero	4
+	.type	g_GlobalSysVersion, %object
+	.size	g_GlobalSysVersion, 4
+g_GlobalSysVersion:
+	.zero	4
+	.type	g_GlobalDataVersion, %object
+	.size	g_GlobalDataVersion, 4
+g_GlobalDataVersion:
+	.zero	4
+	.type	g_totle_gc_page_count, %object
+	.size	g_totle_gc_page_count, 4
+g_totle_gc_page_count:
+	.zero	4
+	.type	g_totle_write_page_count, %object
+	.size	g_totle_write_page_count, 4
+g_totle_write_page_count:
+	.zero	4
+	.type	g_totle_discard_page_count, %object
+	.size	g_totle_discard_page_count, 4
+g_totle_discard_page_count:
+	.zero	4
+	.type	g_totle_cache_write_count, %object
+	.size	g_totle_cache_write_count, 4
+g_totle_cache_write_count:
+	.zero	4
+	.type	g_totle_l2p_write_count, %object
+	.size	g_totle_l2p_write_count, 4
+g_totle_l2p_write_count:
+	.zero	4
+	.type	g_totle_read_page_count, %object
+	.size	g_totle_read_page_count, 4
+g_totle_read_page_count:
+	.zero	4
+	.type	g_totle_mlc_erase_count, %object
+	.size	g_totle_mlc_erase_count, 4
+g_totle_mlc_erase_count:
+	.zero	4
+	.type	g_totle_slc_erase_count, %object
+	.size	g_totle_slc_erase_count, 4
+g_totle_slc_erase_count:
+	.zero	4
+	.type	g_totle_sys_slc_erase_count, %object
+	.size	g_totle_sys_slc_erase_count, 4
+g_totle_sys_slc_erase_count:
+	.zero	4
+	.type	g_max_erase_count, %object
+	.size	g_max_erase_count, 4
+g_max_erase_count:
+	.zero	4
+	.type	g_min_erase_count, %object
+	.size	g_min_erase_count, 4
+g_min_erase_count:
+	.zero	4
+	.type	g_in_gc_progress, %object
+	.size	g_in_gc_progress, 4
+g_in_gc_progress:
+	.zero	4
+	.type	g_in_swl_replace, %object
+	.size	g_in_swl_replace, 4
+g_in_swl_replace:
+	.zero	4
+	.type	g_gc_head_data_block, %object
+	.size	g_gc_head_data_block, 4
+g_gc_head_data_block:
+	.zero	4
+	.type	g_gc_head_data_block_count, %object
+	.size	g_gc_head_data_block_count, 4
+g_gc_head_data_block_count:
+	.zero	4
+	.type	g_gc_skip_write_count, %object
+	.size	g_gc_skip_write_count, 4
+g_gc_skip_write_count:
+	.zero	4
+	.type	g_cur_erase_blk, %object
+	.size	g_cur_erase_blk, 4
+g_cur_erase_blk:
+	.zero	4
+	.type	g_gc_next_blk, %object
+	.size	g_gc_next_blk, 2
+g_gc_next_blk:
+	.zero	2
+	.type	g_gc_next_blk_1, %object
+	.size	g_gc_next_blk_1, 2
+g_gc_next_blk_1:
+	.zero	2
+	.type	g_gc_free_blk_threshold, %object
+	.size	g_gc_free_blk_threshold, 2
+g_gc_free_blk_threshold:
+	.zero	2
+	.type	g_gc_merge_free_blk_threshold, %object
+	.size	g_gc_merge_free_blk_threshold, 2
+g_gc_merge_free_blk_threshold:
+	.zero	2
+	.type	g_gc_blk_index, %object
+	.size	g_gc_blk_index, 2
+g_gc_blk_index:
+	.zero	2
+	.type	g_gc_bad_block_temp_num, %object
+	.size	g_gc_bad_block_temp_num, 2
+g_gc_bad_block_temp_num:
+	.zero	2
+	.type	g_gc_refresh_block_temp_num, %object
+	.size	g_gc_refresh_block_temp_num, 2
+g_gc_refresh_block_temp_num:
+	.zero	2
+	.type	g_gc_bad_block_gc_index, %object
+	.size	g_gc_bad_block_gc_index, 2
+g_gc_bad_block_gc_index:
+	.zero	2
+	.type	c_wr_page_buf_num, %object
+	.size	c_wr_page_buf_num, 4
+c_wr_page_buf_num:
+	.zero	4
+	.type	g_wr_page_num, %object
+	.size	g_wr_page_num, 4
+g_wr_page_num:
+	.zero	4
+	.zero	4
+	.type	p_gc_blk_tbl, %object
+	.size	p_gc_blk_tbl, 8
+p_gc_blk_tbl:
+	.zero	8
+	.type	p_gc_page_info, %object
+	.size	p_gc_page_info, 8
+p_gc_page_info:
+	.zero	8
+	.type	req_read, %object
+	.size	req_read, 8
+req_read:
+	.zero	8
+	.type	req_gc_dst, %object
+	.size	req_gc_dst, 8
+req_gc_dst:
+	.zero	8
+	.type	req_prgm, %object
+	.size	req_prgm, 8
+req_prgm:
+	.zero	8
+	.type	req_erase, %object
+	.size	req_erase, 8
+req_erase:
+	.zero	8
+	.type	req_gc, %object
+	.size	req_gc, 8
+req_gc:
+	.zero	8
+	.type	req_wr_io, %object
+	.size	req_wr_io, 8
+req_wr_io:
+	.zero	8
+	.type	c_gc_page_buf_num, %object
+	.size	c_gc_page_buf_num, 4
+c_gc_page_buf_num:
+	.zero	4
+	.zero	4
+	.type	p_sys_data_buf, %object
+	.size	p_sys_data_buf, 8
+p_sys_data_buf:
+	.zero	8
+	.type	p_sys_data_buf_1, %object
+	.size	p_sys_data_buf_1, 8
+p_sys_data_buf_1:
+	.zero	8
+	.type	p_vendor_data_buf, %object
+	.size	p_vendor_data_buf, 8
+p_vendor_data_buf:
+	.zero	8
+	.type	p_gc_data_buf, %object
+	.size	p_gc_data_buf, 8
+p_gc_data_buf:
+	.zero	8
+	.type	p_wr_io_data_buf, %object
+	.size	p_wr_io_data_buf, 8
+p_wr_io_data_buf:
+	.zero	8
+	.type	p_io_data_buf_0, %object
+	.size	p_io_data_buf_0, 8
+p_io_data_buf_0:
+	.zero	8
+	.type	p_io_data_buf_1, %object
+	.size	p_io_data_buf_1, 8
+p_io_data_buf_1:
+	.zero	8
+	.type	gp_gc_page_buf_info, %object
+	.size	gp_gc_page_buf_info, 8
+gp_gc_page_buf_info:
+	.zero	8
+	.type	p_sys_spare_buf, %object
+	.size	p_sys_spare_buf, 8
+p_sys_spare_buf:
+	.zero	8
+	.type	p_io_spare_buf, %object
+	.size	p_io_spare_buf, 8
+p_io_spare_buf:
+	.zero	8
+	.type	p_gc_spare_buf, %object
+	.size	p_gc_spare_buf, 8
+p_gc_spare_buf:
+	.zero	8
+	.type	p_wr_io_spare_buf, %object
+	.size	p_wr_io_spare_buf, 8
+p_wr_io_spare_buf:
+	.zero	8
+	.type	g_ect_tbl_info_size, %object
+	.size	g_ect_tbl_info_size, 2
+g_ect_tbl_info_size:
+	.zero	2
+	.zero	6
+	.type	p_swl_mul_table, %object
+	.size	p_swl_mul_table, 8
+p_swl_mul_table:
+	.zero	8
+	.type	gp_ect_tbl_info, %object
+	.size	gp_ect_tbl_info, 8
+gp_ect_tbl_info:
+	.zero	8
+	.type	p_erase_count_table, %object
+	.size	p_erase_count_table, 8
+p_erase_count_table:
+	.zero	8
+	.type	p_valid_page_count_check_table, %object
+	.size	p_valid_page_count_check_table, 8
+p_valid_page_count_check_table:
+	.zero	8
+	.type	p_valid_page_count_table, %object
+	.size	p_valid_page_count_table, 8
+p_valid_page_count_table:
+	.zero	8
+	.type	p_map_block_table, %object
+	.size	p_map_block_table, 8
+p_map_block_table:
+	.zero	8
+	.type	p_map_block_valid_page_count, %object
+	.size	p_map_block_valid_page_count, 8
+p_map_block_valid_page_count:
+	.zero	8
+	.type	p_vendor_block_table, %object
+	.size	p_vendor_block_table, 8
+p_vendor_block_table:
+	.zero	8
+	.type	p_vendor_block_valid_page_count, %object
+	.size	p_vendor_block_valid_page_count, 8
+p_vendor_block_valid_page_count:
+	.zero	8
+	.type	p_vendor_block_ver_table, %object
+	.size	p_vendor_block_ver_table, 8
+p_vendor_block_ver_table:
+	.zero	8
+	.type	p_vendor_region_ppn_table, %object
+	.size	p_vendor_region_ppn_table, 8
+p_vendor_region_ppn_table:
+	.zero	8
+	.type	p_map_region_ppn_table, %object
+	.size	p_map_region_ppn_table, 8
+p_map_region_ppn_table:
+	.zero	8
+	.type	p_map_region_ppn_check_table, %object
+	.size	p_map_region_ppn_check_table, 8
+p_map_region_ppn_check_table:
+	.zero	8
+	.type	p_map_block_ver_table, %object
+	.size	p_map_block_ver_table, 8
+p_map_block_ver_table:
+	.zero	8
+	.type	p_l2p_ram_map, %object
+	.size	p_l2p_ram_map, 8
+p_l2p_ram_map:
+	.zero	8
+	.type	p_l2p_map_buf, %object
+	.size	p_l2p_map_buf, 8
+p_l2p_map_buf:
+	.zero	8
+	.type	p_data_block_list_table, %object
+	.size	p_data_block_list_table, 8
+p_data_block_list_table:
+	.zero	8
+	.type	c_ftl_nand_bbm_buf_size, %object
+	.size	c_ftl_nand_bbm_buf_size, 2
+c_ftl_nand_bbm_buf_size:
+	.zero	2
+	.zero	6
+	.type	gBbtInfo, %object
+	.size	gBbtInfo, 96
+gBbtInfo:
+	.zero	96
+	.type	g_totle_vendor_block, %object
+	.size	g_totle_vendor_block, 2
+g_totle_vendor_block:
+	.zero	2
+	.zero	2
+	.type	g_MaxLpn, %object
+	.size	g_MaxLpn, 4
+g_MaxLpn:
+	.zero	4
+	.type	g_flash_read_only_en, %object
+	.size	g_flash_read_only_en, 4
+g_flash_read_only_en:
+	.zero	4
+	.zero	4
+	.type	req_sys, %object
+	.size	req_sys, 56
+req_sys:
+	.zero	56
+	.type	gSysFreeQueue, %object
+	.size	gSysFreeQueue, 2056
+gSysFreeQueue:
+	.zero	2056
+	.type	g_sys_save_data, %object
+	.size	g_sys_save_data, 48
+g_sys_save_data:
+	.zero	48
+	.type	p_data_block_list_head, %object
+	.size	p_data_block_list_head, 8
+p_data_block_list_head:
+	.zero	8
+	.type	p_data_block_list_tail, %object
+	.size	p_data_block_list_tail, 8
+p_data_block_list_tail:
+	.zero	8
+	.type	g_num_data_superblocks, %object
+	.size	g_num_data_superblocks, 2
+g_num_data_superblocks:
+	.zero	2
+	.zero	6
+	.type	p_free_data_block_list_head, %object
+	.size	p_free_data_block_list_head, 8
+p_free_data_block_list_head:
+	.zero	8
+	.type	g_num_free_superblocks, %object
+	.size	g_num_free_superblocks, 2
+g_num_free_superblocks:
+	.zero	2
+	.zero	6
+	.type	g_active_superblock, %object
+	.size	g_active_superblock, 48
+g_active_superblock:
+	.zero	48
+	.type	g_buffer_superblock, %object
+	.size	g_buffer_superblock, 48
+g_buffer_superblock:
+	.zero	48
+	.type	g_gc_temp_superblock, %object
+	.size	g_gc_temp_superblock, 48
+g_gc_temp_superblock:
+	.zero	48
+	.type	gL2pMapInfo, %object
+	.size	gL2pMapInfo, 64
+gL2pMapInfo:
+	.zero	64
+	.type	g_l2p_last_update_region_id, %object
+	.size	g_l2p_last_update_region_id, 2
+g_l2p_last_update_region_id:
+	.zero	2
+	.zero	6
+	.type	gVendorBlkInfo, %object
+	.size	gVendorBlkInfo, 64
+gVendorBlkInfo:
+	.zero	64
+	.type	FtlUpdateVaildLpnCount, %object
+	.size	FtlUpdateVaildLpnCount, 2
+FtlUpdateVaildLpnCount:
+	.zero	2
+	.zero	2
+	.type	g_VaildLpn, %object
+	.size	g_VaildLpn, 4
+g_VaildLpn:
+	.zero	4
+	.type	gSysInfo, %object
+	.size	gSysInfo, 12
+gSysInfo:
+	.zero	12
+	.type	g_totle_map_block, %object
+	.size	g_totle_map_block, 2
+g_totle_map_block:
+	.zero	2
+	.zero	2
+	.type	g_MaxLbn, %object
+	.size	g_MaxLbn, 4
+g_MaxLbn:
+	.zero	4
+	.type	c_ftl_nand_data_op_blks_per_plane, %object
+	.size	c_ftl_nand_data_op_blks_per_plane, 2
+c_ftl_nand_data_op_blks_per_plane:
+	.zero	2
+	.zero	2
+	.type	g_gc_superblock, %object
+	.size	g_gc_superblock, 48
+g_gc_superblock:
+	.zero	48
+	.type	g_sys_ext_data, %object
+	.size	g_sys_ext_data, 512
+g_sys_ext_data:
+	.zero	512
+	.type	g_totle_write_sector, %object
+	.size	g_totle_write_sector, 4
+g_totle_write_sector:
+	.zero	4
+	.type	g_totle_read_sector, %object
+	.size	g_totle_read_sector, 4
+g_totle_read_sector:
+	.zero	4
+	.type	g_ect_tbl_power_up_flush, %object
+	.size	g_ect_tbl_power_up_flush, 2
+g_ect_tbl_power_up_flush:
+	.zero	2
+	.zero	2
+	.type	g_totle_avg_erase_count, %object
+	.size	g_totle_avg_erase_count, 4
+g_totle_avg_erase_count:
+	.zero	4
+	.type	g_gc_num_req, %object
+	.size	g_gc_num_req, 4
+g_gc_num_req:
+	.zero	4
+	.zero	4
+	.type	g_req_cache, %object
+	.size	g_req_cache, 8
+g_req_cache:
+	.zero	8
+	.type	g_tmp_data_superblock_id, %object
+	.size	g_tmp_data_superblock_id, 2
+g_tmp_data_superblock_id:
+	.zero	2
+	.zero	2
+	.type	g_totle_swl_count, %object
+	.size	g_totle_swl_count, 4
+g_totle_swl_count:
+	.zero	4
+	.type	ftl_gc_temp_power_lost_recovery_flag, %object
+	.size	ftl_gc_temp_power_lost_recovery_flag, 4
+ftl_gc_temp_power_lost_recovery_flag:
+	.zero	4
+	.type	g_recovery_page_min_ver, %object
+	.size	g_recovery_page_min_ver, 4
+g_recovery_page_min_ver:
+	.zero	4
+	.type	g_gc_blk_num, %object
+	.size	g_gc_blk_num, 2
+g_gc_blk_num:
+	.zero	2
+	.type	g_gc_page_offset, %object
+	.size	g_gc_page_offset, 2
+g_gc_page_offset:
+	.zero	2
+	.zero	4
+	.type	g_gc_bad_block_temp_tbl, %object
+	.size	g_gc_bad_block_temp_tbl, 34
+g_gc_bad_block_temp_tbl:
+	.zero	34
+	.type	g_power_lost_ecc_error_blk, %object
+	.size	g_power_lost_ecc_error_blk, 2
+g_power_lost_ecc_error_blk:
+	.zero	2
+	.type	g_power_lost_recovery_flag, %object
+	.size	g_power_lost_recovery_flag, 2
+g_power_lost_recovery_flag:
+	.zero	2
+	.zero	2
+	.type	g_recovery_page_num, %object
+	.size	g_recovery_page_num, 4
+g_recovery_page_num:
+	.zero	4
+	.zero	4
+	.type	g_recovery_ppa_tbl, %object
+	.size	g_recovery_ppa_tbl, 128
+g_recovery_ppa_tbl:
+	.zero	128
+	.type	gc_ink_free_return_value, %object
+	.size	gc_ink_free_return_value, 2
+gc_ink_free_return_value:
+	.zero	2
+	.type	g_gc_cur_blk_valid_pages, %object
+	.size	g_gc_cur_blk_valid_pages, 2
+g_gc_cur_blk_valid_pages:
+	.zero	2
+	.type	g_gc_cur_blk_max_valid_pages, %object
+	.size	g_gc_cur_blk_max_valid_pages, 2
+g_gc_cur_blk_max_valid_pages:
+	.zero	2
+	.zero	2
+	.type	gp_last_act_superblock, %object
+	.size	gp_last_act_superblock, 8
+gp_last_act_superblock:
+	.zero	8
+	.type	gc_discard_updated, %object
+	.size	gc_discard_updated, 4
+gc_discard_updated:
+	.zero	4
+	.type	g_ftl_nand_free_count, %object
+	.size	g_ftl_nand_free_count, 4
+g_ftl_nand_free_count:
+	.zero	4
+	.type	last_cache_match_count, %object
+	.size	last_cache_match_count, 4
+last_cache_match_count:
+	.zero	4
+	.type	g_LowFormat, %object
+	.size	g_LowFormat, 4
+g_LowFormat:
+	.zero	4
+	.type	g_gc_refresh_block_temp_tbl, %object
+	.size	g_gc_refresh_block_temp_tbl, 34
+g_gc_refresh_block_temp_tbl:
+	.zero	34
+	.zero	2
+	.type	gToggleModeClkDiv, %object
+	.size	gToggleModeClkDiv, 4
+gToggleModeClkDiv:
+	.zero	4
+	.type	gpNandc1, %object
+	.size	gpNandc1, 8
+gpNandc1:
+	.zero	8
+	.type	gNandFlashResEndPageAddr, %object
+	.size	gNandFlashResEndPageAddr, 4
+gNandFlashResEndPageAddr:
+	.zero	4
+	.type	gNandFlashInfoBlockEcc, %object
+	.size	gNandFlashInfoBlockEcc, 1
+gNandFlashInfoBlockEcc:
+	.zero	1
+	.type	gFlashOnfiModeEn, %object
+	.size	gFlashOnfiModeEn, 1
+gFlashOnfiModeEn:
+	.zero	1
+	.type	gFlashSdrModeEn, %object
+	.size	gFlashSdrModeEn, 1
+gFlashSdrModeEn:
+	.zero	1
diff --git a/drivers/rk_nand/rk_nand_base.c b/drivers/rk_nand/rk_nand_base.c
new file mode 100644
index 000000000000..14b451a2a6ca
--- /dev/null
+++ b/drivers/rk_nand/rk_nand_base.c
@@ -0,0 +1,492 @@
+/*
+ * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <asm/cacheflush.h>
+#include <linux/bootmem.h>
+#include <linux/clk.h>
+#include <linux/debugfs.h>
+#include <linux/dma-mapping.h>
+#include <linux/irq.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#ifdef CONFIG_OF
+#include <linux/of.h>
+#endif
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+
+#include "rk_nand_blk.h"
+#include "rk_ftl_api.h"
+#include "rk_nand_base.h"
+
+#define RKNAND_VERSION_AND_DATE  "rknandbase v1.2 2018-05-08"
+
+static struct rk_nandc_info g_nandc_info[2];
+struct device *g_nand_device;
+static char nand_idb_data[2048];
+static int rk_nand_wait_busy_schedule;
+static int rk_nand_suspend_state;
+static int rk_nand_shutdown_state;
+/*1:flash 2:emmc 4:sdcard0 8:sdcard1*/
+static int rknand_boot_media = 2;
+static DECLARE_WAIT_QUEUE_HEAD(rk29_nandc_wait);
+static void rk_nand_iqr_timeout_hack(unsigned long data);
+static DEFINE_TIMER(rk_nand_iqr_timeout, rk_nand_iqr_timeout_hack, 0, 0);
+static int nandc0_xfer_completed_flag;
+static int nandc0_ready_completed_flag;
+static int nandc1_xfer_completed_flag;
+static int nandc1_ready_completed_flag;
+static int rk_timer_add;
+
+void *ftl_malloc(int size)
+{
+	return kmalloc(size, GFP_KERNEL | GFP_DMA);
+}
+
+void ftl_free(void *buf)
+{
+	kfree(buf);
+}
+
+char rknand_get_sn(char *pbuf)
+{
+	memcpy(pbuf, &nand_idb_data[0x600], 0x200);
+	return 0;
+}
+
+char rknand_get_vendor0(char *pbuf)
+{
+	memcpy(pbuf, &nand_idb_data[0x400 + 8], 504);
+	return 0;
+}
+
+char *rknand_get_idb_data(void)
+{
+	return nand_idb_data;
+}
+EXPORT_SYMBOL(rknand_get_idb_data);
+
+int rknand_get_clk_rate(int nandc_id)
+{
+	return g_nandc_info[nandc_id].clk_rate;
+}
+EXPORT_SYMBOL(rknand_get_clk_rate);
+
+unsigned long rknand_dma_flush_dcache(unsigned long ptr, int size, int dir)
+{
+#ifdef CONFIG_ARM64
+	__flush_dcache_area((void *)ptr, size + 63);
+#else
+	__cpuc_flush_dcache_area((void *)ptr, size + 63);
+#endif
+	return ((unsigned long)virt_to_phys((void *)ptr));
+}
+EXPORT_SYMBOL(rknand_dma_flush_dcache);
+
+unsigned long rknand_dma_map_single(unsigned long ptr, int size, int dir)
+{
+#ifdef CONFIG_ARM64
+	__dma_map_area((void *)ptr, size, dir);
+	return ((unsigned long)virt_to_phys((void *)ptr));
+#else
+	return dma_map_single(NULL, (void *)ptr, size
+		, dir ? DMA_TO_DEVICE : DMA_FROM_DEVICE);
+#endif
+}
+EXPORT_SYMBOL(rknand_dma_map_single);
+
+void rknand_dma_unmap_single(unsigned long ptr, int size, int dir)
+{
+#ifdef CONFIG_ARM64
+	__dma_unmap_area(phys_to_virt(ptr), size, dir);
+#else
+	dma_unmap_single(NULL, (dma_addr_t)ptr, size
+		, dir ? DMA_TO_DEVICE : DMA_FROM_DEVICE);
+#endif
+}
+EXPORT_SYMBOL(rknand_dma_unmap_single);
+
+int rknand_flash_cs_init(int id)
+{
+	return 0;
+}
+EXPORT_SYMBOL(rknand_flash_cs_init);
+
+int rknand_get_reg_addr(unsigned long *p_nandc0, unsigned long *p_nandc1)
+{
+	*p_nandc0 = (unsigned long)g_nandc_info[0].reg_base;
+	*p_nandc1 = (unsigned long)g_nandc_info[1].reg_base;
+	return 0;
+}
+EXPORT_SYMBOL(rknand_get_reg_addr);
+
+int rknand_get_boot_media(void)
+{
+	return rknand_boot_media;
+}
+EXPORT_SYMBOL(rknand_get_boot_media);
+
+unsigned long rk_copy_from_user(void *to, const void __user *from,
+				unsigned long n)
+{
+	return copy_from_user(to, from, n);
+}
+
+unsigned long rk_copy_to_user(void __user *to, const void *from,
+			      unsigned long n)
+{
+	return copy_to_user(to, from, n);
+}
+
+static const struct file_operations rknand_sys_storage_fops = {
+	.compat_ioctl = rknand_sys_storage_ioctl,
+	.unlocked_ioctl = rknand_sys_storage_ioctl,
+};
+
+static struct miscdevice rknand_sys_storage_dev = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name  = "rknand_sys_storage",
+	.fops  = &rknand_sys_storage_fops,
+};
+
+int rknand_sys_storage_init(void)
+{
+	return misc_register(&rknand_sys_storage_dev);
+}
+
+static const struct file_operations rknand_vendor_storage_fops = {
+	.compat_ioctl	= rk_ftl_vendor_storage_ioctl,
+	.unlocked_ioctl = rk_ftl_vendor_storage_ioctl,
+};
+
+static struct miscdevice rknand_vender_storage_dev = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name  = "vendor_storage",
+	.fops  = &rknand_vendor_storage_fops,
+};
+
+int rknand_vendor_storage_init(void)
+{
+	return misc_register(&rknand_vender_storage_dev);
+}
+
+int rk_nand_schedule_enable_config(int en)
+{
+	int tmp = rk_nand_wait_busy_schedule;
+
+	rk_nand_wait_busy_schedule = en;
+	return tmp;
+}
+
+static void rk_nand_iqr_timeout_hack(unsigned long data)
+{
+	del_timer(&rk_nand_iqr_timeout);
+	rk_timer_add = 0;
+	nandc0_xfer_completed_flag = 1;
+	nandc0_ready_completed_flag = 1;
+	nandc1_xfer_completed_flag = 1;
+	nandc1_ready_completed_flag = 1;
+	wake_up(&rk29_nandc_wait);
+}
+
+static void rk_add_timer(void)
+{
+	if (rk_timer_add == 0) {
+		rk_timer_add = 1;
+		rk_nand_iqr_timeout.expires = jiffies + HZ / 50;
+		add_timer(&rk_nand_iqr_timeout);
+	}
+}
+
+static void rk_del_timer(void)
+{
+	if (rk_timer_add)
+		del_timer(&rk_nand_iqr_timeout);
+	rk_timer_add = 0;
+}
+
+static irqreturn_t rk_nandc_interrupt(int irq, void *dev_id)
+{
+	unsigned int irq_status = rk_nandc_get_irq_status(dev_id);
+
+	if (irq_status & (1 << 0)) {
+		rk_nandc_flash_xfer_completed(dev_id);
+		if (dev_id == g_nandc_info[0].reg_base)
+			nandc0_xfer_completed_flag = 1;
+		else
+			nandc1_xfer_completed_flag = 1;
+	}
+
+	if (irq_status & (1 << 1)) {
+		rk_nandc_flash_ready(dev_id);
+		if (dev_id == g_nandc_info[0].reg_base)
+			nandc0_ready_completed_flag = 1;
+		else
+			nandc1_ready_completed_flag = 1;
+	}
+
+	wake_up(&rk29_nandc_wait);
+	return IRQ_HANDLED;
+}
+
+void rk_nandc_xfer_irq_flag_init(void *nandc_reg)
+{
+	if (nandc_reg == g_nandc_info[0].reg_base)
+		nandc0_xfer_completed_flag = 0;
+	else
+		nandc1_xfer_completed_flag = 0;
+}
+
+void rk_nandc_rb_irq_flag_init(void *nandc_reg)
+{
+	if (nandc_reg == g_nandc_info[0].reg_base)
+		nandc0_ready_completed_flag = 0;
+	else
+		nandc1_ready_completed_flag = 0;
+}
+
+void wait_for_nandc_xfer_completed(void *nandc_reg)
+{
+	if (rk_nand_wait_busy_schedule)	{
+		rk_add_timer();
+		if (nandc_reg == g_nandc_info[0].reg_base)
+			wait_event(rk29_nandc_wait, nandc0_xfer_completed_flag);
+		else
+			wait_event(rk29_nandc_wait, nandc1_xfer_completed_flag);
+		rk_del_timer();
+	}
+	if (nandc_reg == g_nandc_info[0].reg_base)
+		nandc0_xfer_completed_flag = 0;
+	else
+		nandc1_xfer_completed_flag = 0;
+}
+
+void wait_for_nand_flash_ready(void *nandc_reg)
+{
+	if (rk_nand_wait_busy_schedule)	{
+		rk_add_timer();
+		if (nandc_reg == g_nandc_info[0].reg_base)
+			wait_event(rk29_nandc_wait
+				, nandc0_ready_completed_flag);
+		else
+			wait_event(rk29_nandc_wait
+				, nandc1_ready_completed_flag);
+		rk_del_timer();
+	}
+	if (nandc_reg == g_nandc_info[0].reg_base)
+		nandc0_ready_completed_flag = 0;
+	else
+		nandc1_ready_completed_flag = 0;
+}
+
+static int rk_nandc_irq_config(int id, int mode, void *pfun)
+{
+	int ret = 0;
+	int irq = g_nandc_info[id].irq;
+
+	if (mode)
+		ret = request_irq(irq, pfun, 0, "nandc"
+			, g_nandc_info[id].reg_base);
+	else
+		free_irq(irq,  NULL);
+	return ret;
+}
+
+int rk_nandc_irq_init(void)
+{
+	int ret = 0;
+
+	rk_timer_add = 0;
+	nandc0_ready_completed_flag = 0;
+	nandc0_xfer_completed_flag = 0;
+	ret = rk_nandc_irq_config(0, 1, rk_nandc_interrupt);
+
+	if (!g_nandc_info[1].reg_base) {
+		nandc1_ready_completed_flag = 0;
+		nandc1_xfer_completed_flag = 0;
+		rk_nandc_irq_config(1, 1, rk_nandc_interrupt);
+	}
+	return ret;
+}
+
+int rk_nandc_irq_deinit(void)
+{
+	rk_nandc_irq_config(0, 0, rk_nandc_interrupt);
+	if (!g_nandc_info[1].reg_base)
+		rk_nandc_irq_config(1, 0, rk_nandc_interrupt);
+	return 0;
+}
+
+static int rknand_probe(struct platform_device *pdev)
+{
+	unsigned int id = 0;
+	int irq;
+	struct resource	*mem;
+	void __iomem	*membase;
+
+	g_nand_device = &pdev->dev;
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	membase = devm_ioremap_resource(&pdev->dev, mem);
+	if (!membase) {
+		dev_err(&pdev->dev, "no reg resource?\n");
+		return -1;
+	}
+
+	#ifdef CONFIG_OF
+	of_property_read_u32(pdev->dev.of_node, "nandc_id", &id);
+	pdev->id = id;
+	#endif
+
+	if (id == 0) {
+		memcpy(nand_idb_data, membase + 0x1000, 0x800);
+		if (*(int *)(&nand_idb_data[0]) == 0x44535953) {
+			rknand_boot_media = *(int *)(&nand_idb_data[8]);
+			if (rknand_boot_media == 2) /*boot from emmc*/
+				return -1;
+		}
+	}
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_err(&pdev->dev, "no irq resource?\n");
+		return irq;
+	}
+
+	g_nandc_info[id].id = id;
+	g_nandc_info[id].irq = irq;
+	g_nandc_info[id].reg_base = membase;
+
+	g_nandc_info[id].hclk = devm_clk_get(&pdev->dev, "hclk_nandc");
+	g_nandc_info[id].clk = devm_clk_get(&pdev->dev, "clk_nandc");
+	g_nandc_info[id].gclk = devm_clk_get(&pdev->dev, "g_clk_nandc");
+
+	if (unlikely(IS_ERR(g_nandc_info[id].hclk))) {
+		dev_err(&pdev->dev, "rknand_probe get hclk error\n");
+		return PTR_ERR(g_nandc_info[id].hclk);
+	}
+
+	if (!(IS_ERR(g_nandc_info[id].clk))) {
+		clk_set_rate(g_nandc_info[id].clk, 150 * 1000 * 1000);
+		g_nandc_info[id].clk_rate = clk_get_rate(g_nandc_info[id].clk);
+		clk_prepare_enable(g_nandc_info[id].clk);
+		dev_info(&pdev->dev,
+			 "rknand_probe clk rate = %d\n",
+			 g_nandc_info[id].clk_rate);
+	}
+
+	clk_prepare_enable(g_nandc_info[id].hclk);
+	if (!(IS_ERR(g_nandc_info[id].gclk)))
+		clk_prepare_enable(g_nandc_info[id].gclk);
+
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_get_sync(&pdev->dev);
+
+	return 0;
+}
+
+static int rknand_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	if (rk_nand_suspend_state == 0) {
+		rk_nand_suspend_state = 1;
+		rknand_dev_suspend();
+	}
+	return 0;
+}
+
+static int rknand_resume(struct platform_device *pdev)
+{
+	if (rk_nand_suspend_state == 1) {
+		rk_nand_suspend_state = 0;
+		rknand_dev_resume();
+	}
+	return 0;
+}
+
+static void rknand_shutdown(struct platform_device *pdev)
+{
+	if (rk_nand_shutdown_state == 0) {
+		rk_nand_shutdown_state = 1;
+		rknand_dev_shutdown();
+	}
+}
+
+void rknand_dev_cache_flush(void)
+{
+	rknand_dev_flush();
+}
+
+static int rknand_pm_suspend(struct device *dev)
+{
+	if (rk_nand_suspend_state == 0) {
+		rk_nand_suspend_state = 1;
+		rknand_dev_suspend();
+		pm_runtime_put(dev);
+	}
+	return 0;
+}
+
+static int rknand_pm_resume(struct device *dev)
+{
+	if (rk_nand_suspend_state == 1) {
+		rk_nand_suspend_state = 0;
+		pm_runtime_get_sync(dev);
+		rknand_dev_resume();
+	}
+	return 0;
+}
+
+static const struct dev_pm_ops rknand_dev_pm_ops = {
+	SET_SYSTEM_SLEEP_PM_OPS(rknand_pm_suspend, rknand_pm_resume)
+};
+
+#ifdef CONFIG_OF
+static const struct of_device_id of_rk_nandc_match[] = {
+	{.compatible = "rockchip,rk-nandc"},
+	{}
+};
+#endif
+
+static struct platform_driver rknand_driver = {
+	.probe		= rknand_probe,
+	.suspend	= rknand_suspend,
+	.resume		= rknand_resume,
+	.shutdown	= rknand_shutdown,
+	.driver		= {
+		.name	= "rknand",
+#ifdef CONFIG_OF
+		.of_match_table	= of_rk_nandc_match,
+#endif
+		.pm = &rknand_dev_pm_ops,
+	},
+};
+
+static void __exit rknand_driver_exit(void)
+{
+	rknand_dev_exit();
+	platform_driver_unregister(&rknand_driver);
+}
+
+static int __init rknand_driver_init(void)
+{
+	int ret = 0;
+
+	pr_err("%s\n", RKNAND_VERSION_AND_DATE);
+	ret = platform_driver_register(&rknand_driver);
+	if (ret == 0)
+		ret = rknand_dev_init();
+	return ret;
+}
+
+module_init(rknand_driver_init);
+module_exit(rknand_driver_exit);
+MODULE_ALIAS(DRIVER_NAME);
diff --git a/drivers/rk_nand/rk_nand_base.h b/drivers/rk_nand/rk_nand_base.h
new file mode 100644
index 000000000000..023e58d5fc5c
--- /dev/null
+++ b/drivers/rk_nand/rk_nand_base.h
@@ -0,0 +1,46 @@
+/* SPDX-License-Identifier: (GPL-2.0+ OR MIT) */
+
+/*
+ * Copyright (c) 2018 Fuzhou Rockchip Electronics Co., Ltd
+ */
+
+#ifndef __RK_NAND_BASE_H
+#define __RK_NAND_BASE_H
+
+struct rk_nandc_info {
+	int	id;
+	void __iomem     *reg_base;
+	int	irq;
+	int	clk_rate;
+	struct clk	*clk;	/* flash clk*/
+	struct clk	*hclk;	/* nandc clk*/
+	struct clk	*gclk;  /* flash clk gate*/
+};
+
+void *ftl_malloc(int size);
+void ftl_free(void *buf);
+char rknand_get_sn(char *pbuf);
+char rknand_get_vendor0(char *pbuf);
+char *rknand_get_idb_data(void);
+int rknand_get_clk_rate(int nandc_id);
+unsigned long rknand_dma_flush_dcache(unsigned long ptr, int size, int dir);
+unsigned long rknand_dma_map_single(unsigned long ptr, int size, int dir);
+void rknand_dma_unmap_single(unsigned long ptr, int size, int dir);
+int rknand_flash_cs_init(int id);
+int rknand_get_reg_addr(unsigned long *p_nandc0, unsigned long *p_nandc1);
+int rknand_get_boot_media(void);
+unsigned long rk_copy_from_user(void *to, const void __user *from,
+				unsigned long n);
+unsigned long rk_copy_to_user(void __user *to, const void *from,
+			      unsigned long n);
+int rknand_sys_storage_init(void);
+int rknand_vendor_storage_init(void);
+int rk_nand_schedule_enable_config(int en);
+void rk_nandc_xfer_irq_flag_init(void *nandc_reg);
+void rk_nandc_rb_irq_flag_init(void *nandc_reg);
+void wait_for_nandc_xfer_completed(void *nandc_reg);
+void wait_for_nand_flash_ready(void *nandc_reg);
+int rk_nandc_irq_init(void);
+int rk_nandc_irq_deinit(void);
+void rknand_dev_cache_flush(void);
+#endif
diff --git a/drivers/rk_nand/rk_nand_blk.c b/drivers/rk_nand/rk_nand_blk.c
new file mode 100644
index 000000000000..0e7a297c131f
--- /dev/null
+++ b/drivers/rk_nand/rk_nand_blk.c
@@ -0,0 +1,820 @@
+/*
+ * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/list.h>
+#include <linux/fs.h>
+#include <linux/blkdev.h>
+#include <linux/blkpg.h>
+#include <linux/spinlock.h>
+#include <linux/hdreg.h>
+#include <linux/init.h>
+#include <linux/semaphore.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/timer.h>
+#include <linux/delay.h>
+#include <linux/clk.h>
+#include <linux/mutex.h>
+#include <linux/wait.h>
+#include <linux/sched.h>
+#include <linux/freezer.h>
+#include <linux/kthread.h>
+#include <linux/proc_fs.h>
+#include <linux/version.h>
+#include <linux/soc/rockchip/rk_vendor_storage.h>
+
+#include "rk_nand_blk.h"
+#include "rk_ftl_api.h"
+
+static struct nand_part disk_array[MAX_PART_COUNT];
+static int g_max_part_num = 4;
+
+#define PART_READONLY 0x85
+#define PART_WRITEONLY 0x86
+#define PART_NO_ACCESS 0x87
+
+static unsigned long totle_read_data;
+static unsigned long totle_write_data;
+static unsigned long totle_read_count;
+static unsigned long totle_write_count;
+static int rk_nand_dev_initialised;
+
+static char *mtd_read_temp_buffer;
+#define MTD_RW_SECTORS (512)
+
+static int rknand_proc_show(struct seq_file *m, void *v)
+{
+	m->count = rknand_proc_ftlread(m->buf);
+	seq_printf(m, "Totle Read %ld KB\n", totle_read_data >> 1);
+	seq_printf(m, "Totle Write %ld KB\n", totle_write_data >> 1);
+	seq_printf(m, "totle_write_count %ld\n", totle_write_count);
+	seq_printf(m, "totle_read_count %ld\n", totle_read_count);
+	return 0;
+}
+
+static int rknand_mtd_proc_show(struct seq_file *m, void *v)
+{
+	int i;
+
+	seq_printf(m, "%s", "dev:    size   erasesize  name\n");
+	for (i = 0; i < g_max_part_num; i++) {
+		seq_printf(m, "rknand%d: %8.8llx %8.8x \"%s\"\n", i,
+			   (unsigned long long)disk_array[i].size * 512,
+			   32 * 0x200, disk_array[i].name);
+	}
+	return 0;
+}
+
+static int rknand_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, rknand_proc_show, PDE_DATA(inode));
+}
+
+static int rknand_mtd_proc_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, rknand_mtd_proc_show, PDE_DATA(inode));
+}
+
+static const struct file_operations rknand_proc_fops = {
+	.owner		= THIS_MODULE,
+	.open		= rknand_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
+static const struct file_operations rknand_mtd_proc_fops = {
+	.owner		= THIS_MODULE,
+	.open		= rknand_mtd_proc_open,
+	.read		= seq_read,
+	.llseek		= seq_lseek,
+	.release	= single_release,
+};
+
+static int rknand_create_procfs(void)
+{
+	struct proc_dir_entry *ent;
+
+	ent = proc_create_data("rknand", 0444, NULL, &rknand_proc_fops,
+			       (void *)0);
+	if (!ent)
+		return -1;
+
+	ent = proc_create_data("mtd", 0444, NULL, &rknand_mtd_proc_fops,
+			       (void *)0);
+	if (!ent)
+		return -1;
+	return 0;
+}
+
+static struct mutex g_rk_nand_ops_mutex;
+
+static void rknand_device_lock_init(void)
+{
+	mutex_init(&g_rk_nand_ops_mutex);
+}
+
+void rknand_device_lock(void)
+{
+	mutex_lock(&g_rk_nand_ops_mutex);
+}
+
+int rknand_device_trylock(void)
+{
+	return mutex_trylock(&g_rk_nand_ops_mutex);
+}
+
+void rknand_device_unlock(void)
+{
+	mutex_unlock(&g_rk_nand_ops_mutex);
+}
+
+static int nand_dev_transfer(struct nand_blk_dev *dev,
+			     unsigned long start,
+			     unsigned long nsector,
+			     char *buf,
+			     int cmd,
+			     int totle_nsec)
+{
+	int ret;
+
+	if (dev->disable_access ||
+	    ((cmd == WRITE) && dev->readonly) ||
+	    ((cmd == READ) && dev->writeonly)) {
+		return -EIO;
+	}
+
+	start += dev->off_size;
+	rknand_device_lock();
+
+	switch (cmd) {
+	case READ:
+		totle_read_data += nsector;
+		totle_read_count++;
+		ret = FtlRead(0, start, nsector, buf);
+		if (ret)
+			ret = -EIO;
+		break;
+
+	case WRITE:
+		totle_write_data += nsector;
+		totle_write_count++;
+		ret = FtlWrite(0, start, nsector, buf);
+		if (ret)
+			ret = -EIO;
+		break;
+
+	default:
+		ret = -EIO;
+		break;
+	}
+
+	rknand_device_unlock();
+	return ret;
+}
+
+static DECLARE_WAIT_QUEUE_HEAD(rknand_thread_wait);
+static void rk_ftl_gc_timeout_hack(unsigned long data);
+static DEFINE_TIMER(rk_ftl_gc_timeout, rk_ftl_gc_timeout_hack, 0, 0);
+static unsigned long rk_ftl_gc_jiffies;
+static unsigned long rk_ftl_gc_do;
+
+static void rk_ftl_gc_timeout_hack(unsigned long data)
+{
+	del_timer(&rk_ftl_gc_timeout);
+	rk_ftl_gc_do++;
+	rk_ftl_gc_timeout.expires = jiffies + rk_ftl_gc_jiffies * rk_ftl_gc_do;
+	add_timer(&rk_ftl_gc_timeout);
+}
+
+static int req_check_buffer_align(struct request *req, char **pbuf)
+{
+	int nr_vec = 0;
+	struct bio_vec bv;
+	struct req_iterator iter;
+	char *buffer;
+	void *firstbuf = 0;
+	char *nextbuffer = 0;
+
+	rq_for_each_segment(bv, req, iter) {
+		buffer = page_address(bv.bv_page) + bv.bv_offset;
+		if (!firstbuf)
+			firstbuf = buffer;
+		nr_vec++;
+		if (nextbuffer && nextbuffer != buffer)
+			return 0;
+		nextbuffer = buffer + bv.bv_len;
+	}
+	*pbuf = firstbuf;
+	return 1;
+}
+
+static int nand_blktrans_thread(void *arg)
+{
+	struct nand_blk_ops *nandr = arg;
+	struct request_queue *rq = nandr->rq;
+	struct request *req = NULL;
+	int ftl_gc_status = 0;
+	char *buf;
+	struct req_iterator rq_iter;
+	struct bio_vec bvec;
+	unsigned long long sector_index = ULLONG_MAX;
+	unsigned long totle_nsect;
+	unsigned long rq_len = 0;
+	int rw_flag = 0;
+	int req_empty_times = 0;
+
+	spin_lock_irq(rq->queue_lock);
+	rk_ftl_gc_jiffies = HZ * 5;
+	rk_ftl_gc_do = 0;
+	rk_ftl_gc_timeout.expires = jiffies + rk_ftl_gc_jiffies;
+	add_timer(&rk_ftl_gc_timeout);
+
+	while (!nandr->quit) {
+		int res;
+		struct nand_blk_dev *dev;
+		DECLARE_WAITQUEUE(wait, current);
+
+		if (!req)
+			req = blk_fetch_request(rq);
+		if (!req) {
+			add_wait_queue(&nandr->thread_wq, &wait);
+			set_current_state(TASK_INTERRUPTIBLE);
+			spin_unlock_irq(rq->queue_lock);
+			if (rknand_device_trylock()) {
+				ftl_gc_status = rk_ftl_garbage_collect(1, 0);
+				rknand_device_unlock();
+				rk_ftl_gc_jiffies = HZ / 50;
+				if (ftl_gc_status == 0)
+					rk_ftl_gc_jiffies = 1 * HZ;
+
+			} else {
+				rk_ftl_gc_jiffies = HZ / 50;
+			}
+			req_empty_times++;
+			if (req_empty_times < 10)
+				rk_ftl_gc_jiffies = HZ / 50;
+			/* 100ms cache write back */
+			if (req_empty_times >= 5 && req_empty_times < 7) {
+				rknand_device_lock();
+				rk_ftl_cache_write_back();
+				rknand_device_unlock();
+			}
+			wait_event_timeout(nandr->thread_wq,
+					   rk_ftl_gc_do || nandr->quit,
+					   rk_ftl_gc_jiffies);
+			rk_ftl_gc_do = 0;
+			spin_lock_irq(rq->queue_lock);
+			remove_wait_queue(&nandr->thread_wq, &wait);
+			continue;
+		} else {
+			rk_ftl_gc_jiffies = 1 * HZ;
+			req_empty_times = 0;
+		}
+
+		dev = req->rq_disk->private_data;
+		totle_nsect = (req->__data_len) >> 9;
+		sector_index = blk_rq_pos(req);
+		rq_len = 0;
+		buf = 0;
+		res = 0;
+
+		if (req->cmd_flags & REQ_DISCARD) {
+			spin_unlock_irq(rq->queue_lock);
+			rknand_device_lock();
+			if (FtlDiscard(blk_rq_pos(req) +
+				       dev->off_size, totle_nsect))
+				res = -EIO;
+			rknand_device_unlock();
+			spin_lock_irq(rq->queue_lock);
+			if (!__blk_end_request_cur(req, res))
+				req = NULL;
+			continue;
+		} else if (req->cmd_flags & REQ_FLUSH) {
+			spin_unlock_irq(rq->queue_lock);
+			rknand_device_lock();
+			rk_ftl_cache_write_back();
+			rknand_device_unlock();
+			spin_lock_irq(rq->queue_lock);
+			if (!__blk_end_request_cur(req, res))
+				req = NULL;
+			continue;
+		}
+
+		rw_flag = req->cmd_flags & REQ_WRITE;
+		if (rw_flag == READ && mtd_read_temp_buffer) {
+			buf = mtd_read_temp_buffer;
+			req_check_buffer_align(req, &buf);
+			spin_unlock_irq(rq->queue_lock);
+			res = nand_dev_transfer(dev,
+						sector_index,
+						totle_nsect,
+						buf,
+						rw_flag,
+						totle_nsect);
+			spin_lock_irq(rq->queue_lock);
+			if (buf == mtd_read_temp_buffer) {
+				char *p = buf;
+
+				rq_for_each_segment(bvec, req, rq_iter) {
+					memcpy(page_address(bvec.bv_page) +
+					       bvec.bv_offset,
+					       p,
+					       bvec.bv_len);
+					p += bvec.bv_len;
+				}
+			}
+		} else {
+			rq_for_each_segment(bvec, req, rq_iter) {
+				if ((page_address(bvec.bv_page)
+					+ bvec.bv_offset)
+					== (buf + rq_len)) {
+					rq_len += bvec.bv_len;
+				} else {
+					if (rq_len) {
+						spin_unlock_irq(rq->queue_lock);
+						res = nand_dev_transfer(dev,
+								sector_index,
+								rq_len >> 9,
+								buf,
+								rw_flag,
+								totle_nsect);
+						spin_lock_irq(rq->queue_lock);
+					}
+					sector_index += rq_len >> 9;
+					buf = (page_address(bvec.bv_page) +
+						bvec.bv_offset);
+					rq_len = bvec.bv_len;
+				}
+			}
+			if (rq_len) {
+				spin_unlock_irq(rq->queue_lock);
+				res = nand_dev_transfer(dev,
+							sector_index,
+							rq_len >> 9,
+							buf,
+							rw_flag,
+							totle_nsect);
+				spin_lock_irq(rq->queue_lock);
+			}
+		}
+		__blk_end_request_all(req, res);
+		req = NULL;
+	}
+	pr_info("nand th quited\n");
+	nandr->nand_th_quited = 1;
+	if (req)
+		__blk_end_request_all(req, -EIO);
+	rk_nand_schedule_enable_config(0);
+	while ((req = blk_fetch_request(rq)) != NULL)
+		__blk_end_request_all(req, -ENODEV);
+	spin_unlock_irq(rq->queue_lock);
+	complete_and_exit(&nandr->thread_exit, 0);
+	return 0;
+}
+
+static void nand_blk_request(struct request_queue *rq)
+{
+	struct nand_blk_ops *nandr = rq->queuedata;
+	struct request *req = NULL;
+
+	if (nandr->nand_th_quited) {
+		while ((req = blk_fetch_request(rq)) != NULL)
+			__blk_end_request_all(req, -ENODEV);
+		return;
+	}
+	rk_ftl_gc_do = 1;
+	wake_up(&nandr->thread_wq);
+}
+
+static int rknand_get_part(char *parts,
+			   struct nand_part *this_part,
+			   int *part_index)
+{
+	char delim;
+	unsigned int mask_flags;
+	unsigned long long size, offset = ULLONG_MAX;
+	char name[40] = "\0";
+
+	if (*parts == '-') {
+		size = ULLONG_MAX;
+		parts++;
+	} else {
+		size = memparse(parts, &parts);
+	}
+
+	if (*parts == '@') {
+		parts++;
+		offset = memparse(parts, &parts);
+	}
+
+	mask_flags = 0;
+	delim = 0;
+
+	if (*parts == '(')
+		delim = ')';
+
+	if (delim) {
+		char *p;
+
+		p = strchr(parts + 1, delim);
+		if (!p)
+			return 0;
+		strncpy(name, parts + 1, p - (parts + 1));
+		parts = p + 1;
+	}
+
+	if (strncmp(parts, "ro", 2) == 0) {
+		mask_flags = PART_READONLY;
+		parts += 2;
+	}
+
+	if (strncmp(parts, "wo", 2) == 0) {
+		mask_flags = PART_WRITEONLY;
+		parts += 2;
+	}
+
+	this_part->size = (unsigned long)size;
+	this_part->offset = (unsigned long)offset;
+	this_part->type = mask_flags;
+	sprintf(this_part->name, "%s", name);
+
+	if ((++(*part_index) < MAX_PART_COUNT) && (*parts == ','))
+		rknand_get_part(++parts, this_part + 1, part_index);
+
+	return 1;
+}
+
+static int nand_prase_cmdline_part(struct nand_part *pdisk_part)
+{
+	char *pbuf;
+	int part_num = 0, i;
+	unsigned int cap_size = rk_ftl_get_capacity();
+	char *cmdline;
+
+	cmdline = strstr(saved_command_line, "mtdparts=");
+	if (!cmdline)
+		return 0;
+	cmdline += 9;
+	if (!memcmp(cmdline, "rk29xxnand:", strlen("rk29xxnand:"))) {
+		pbuf = cmdline + strlen("rk29xxnand:");
+		rknand_get_part(pbuf, pdisk_part, &part_num);
+		if (part_num)
+			pdisk_part[part_num - 1].size = cap_size -
+				pdisk_part[part_num - 1].offset;
+
+		for (i = 0; i < part_num; i++) {
+			if (pdisk_part[i].size + pdisk_part[i].offset
+				> cap_size) {
+				pdisk_part[i].size = cap_size -
+					pdisk_part[i].offset;
+				pr_err("partition config error....\n");
+				if (pdisk_part[i].size)
+					return i;
+				else
+					return (i + 1);
+			}
+		}
+		return part_num;
+	}
+	return 0;
+}
+
+static int rknand_open(struct block_device *bdev, fmode_t mode)
+{
+	return 0;
+}
+
+static void rknand_release(struct gendisk *disk, fmode_t mode)
+{
+};
+
+#define DISABLE_WRITE _IO('V', 0)
+#define ENABLE_WRITE _IO('V', 1)
+#define DISABLE_READ _IO('V', 2)
+#define ENABLE_READ _IO('V', 3)
+static int rknand_ioctl(struct block_device *bdev, fmode_t mode,
+			unsigned int cmd,
+			unsigned long arg)
+{
+	struct nand_blk_dev *dev = bdev->bd_disk->private_data;
+
+	switch (cmd) {
+	case ENABLE_WRITE:
+		dev->disable_access = 0;
+		dev->readonly = 0;
+		set_disk_ro(dev->blkcore_priv, 0);
+		return 0;
+
+	case DISABLE_WRITE:
+		dev->readonly = 1;
+		set_disk_ro(dev->blkcore_priv, 1);
+		return 0;
+
+	case ENABLE_READ:
+		dev->disable_access = 0;
+		dev->writeonly = 0;
+		return 0;
+
+	case DISABLE_READ:
+		dev->writeonly = 1;
+		return 0;
+	default:
+		return -ENOTTY;
+	}
+}
+
+const struct block_device_operations nand_blktrans_ops = {
+	.owner = THIS_MODULE,
+	.open = rknand_open,
+	.release = rknand_release,
+	.ioctl = rknand_ioctl,
+};
+
+static struct nand_blk_ops mytr = {
+	.name =  "rknand",
+	.major = 31,
+	.minorbits = 0,
+	.owner = THIS_MODULE,
+};
+
+static int nand_add_dev(struct nand_blk_ops *nandr, struct nand_part *part)
+{
+	struct nand_blk_dev *dev;
+	struct gendisk *gd;
+
+	if (part->size == 0)
+		return -1;
+
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (!dev)
+		return -ENOMEM;
+
+	gd = alloc_disk(1 << nandr->minorbits);
+	if (!gd) {
+		kfree(dev);
+		return -ENOMEM;
+	}
+
+	dev->nandr = nandr;
+	dev->size = part->size;
+	dev->off_size = part->offset;
+	dev->devnum = nandr->last_dev_index;
+	list_add_tail(&dev->list, &nandr->devs);
+	nandr->last_dev_index++;
+
+	gd->major = nandr->major;
+	gd->first_minor = (dev->devnum) << nandr->minorbits;
+
+	gd->fops = &nand_blktrans_ops;
+
+	if (part->name[0]) {
+		snprintf(gd->disk_name,
+			 sizeof(gd->disk_name),
+			 "%s_%s",
+			 nandr->name,
+			 part->name);
+	} else {
+		gd->flags = GENHD_FL_EXT_DEVT;
+		gd->minors = 255;
+		snprintf(gd->disk_name,
+			 sizeof(gd->disk_name),
+			 "%s%d",
+			 nandr->name,
+			 dev->devnum);
+	}
+	set_capacity(gd, dev->size);
+
+	gd->private_data = dev;
+	dev->blkcore_priv = gd;
+	gd->queue = nandr->rq;
+	gd->queue->bypass_depth = 1;
+
+	if (part->type == PART_NO_ACCESS)
+		dev->disable_access = 1;
+
+	if (part->type == PART_READONLY)
+		dev->readonly = 1;
+
+	if (part->type == PART_WRITEONLY)
+		dev->writeonly = 1;
+
+	if (dev->readonly)
+		set_disk_ro(gd, 1);
+
+	add_disk(gd);
+
+	return 0;
+}
+
+static int nand_remove_dev(struct nand_blk_dev *dev)
+{
+	struct gendisk *gd;
+
+	gd = dev->blkcore_priv;
+	list_del(&dev->list);
+	gd->queue = NULL;
+	del_gendisk(gd);
+	put_disk(gd);
+	kfree(dev);
+	return 0;
+}
+
+int nand_blk_add_whole_disk(void)
+{
+	struct nand_part part;
+
+	part.offset = 0;
+	part.size = rk_ftl_get_capacity();
+	part.type = 0;
+	memcpy(part.name, "rknand", sizeof("rknand"));
+	nand_add_dev(&mytr, &part);
+	return 0;
+}
+
+static int nand_blk_register(struct nand_blk_ops *nandr)
+{
+	int i, ret;
+	u32 part_size;
+
+	rk_nand_schedule_enable_config(1);
+	nandr->quit = 0;
+	nandr->nand_th_quited = 0;
+
+	mtd_read_temp_buffer = kmalloc(MTD_RW_SECTORS * 512,
+				       GFP_KERNEL | GFP_DMA);
+
+	ret = register_blkdev(nandr->major, nandr->name);
+	if (ret)
+		return -1;
+
+	spin_lock_init(&nandr->queue_lock);
+	init_completion(&nandr->thread_exit);
+	init_waitqueue_head(&nandr->thread_wq);
+	rknand_device_lock_init();
+
+	nandr->rq = blk_init_queue(nand_blk_request, &nandr->queue_lock);
+	if (!nandr->rq) {
+		unregister_blkdev(nandr->major, nandr->name);
+		return  -1;
+	}
+
+	blk_queue_max_hw_sectors(nandr->rq, MTD_RW_SECTORS);
+	blk_queue_max_segments(nandr->rq, MTD_RW_SECTORS);
+
+	queue_flag_set_unlocked(QUEUE_FLAG_DISCARD, nandr->rq);
+	blk_queue_max_discard_sectors(nandr->rq, UINT_MAX >> 9);
+
+	nandr->rq->queuedata = nandr;
+	INIT_LIST_HEAD(&nandr->devs);
+	kthread_run(nand_blktrans_thread, (void *)nandr, "rknand");
+
+	g_max_part_num = nand_prase_cmdline_part(disk_array);
+	if (g_max_part_num) {
+		nandr->last_dev_index = 0;
+		for (i = 0; i < g_max_part_num; i++) {
+			part_size = (disk_array[i].offset + disk_array[i].size);
+			pr_info("%10s: 0x%09llx -- 0x%09llx (%llu MB)\n",
+				disk_array[i].name,
+				(u64)disk_array[i].offset * 512,
+				(u64)part_size * 512,
+				(u64)disk_array[i].size / 2048);
+			nand_add_dev(nandr, &disk_array[i]);
+		}
+	} else {
+		struct nand_part part;
+
+		part.offset = 0;
+		part.size = rk_ftl_get_capacity();
+		part.type = 0;
+		part.name[0] = 0;
+		nand_add_dev(&mytr, &part);
+	}
+
+	rknand_create_procfs();
+	rk_ftl_storage_sys_init();
+
+	ret = rk_ftl_vendor_storage_init();
+	if (!ret) {
+		rk_vendor_register(rk_ftl_vendor_read, rk_ftl_vendor_write);
+		rknand_vendor_storage_init();
+		pr_info("rknand vendor storage init ok !\n");
+	} else {
+		pr_info("rknand vendor storage init failed !\n");
+	}
+
+	return 0;
+}
+
+static void nand_blk_unregister(struct nand_blk_ops *nandr)
+{
+	struct list_head *this, *next;
+
+	if (!rk_nand_dev_initialised)
+		return;
+	nandr->quit = 1;
+	wake_up(&nandr->thread_wq);
+	wait_for_completion(&nandr->thread_exit);
+	list_for_each_safe(this, next, &nandr->devs) {
+		struct nand_blk_dev *dev
+			= list_entry(this, struct nand_blk_dev, list);
+
+		nand_remove_dev(dev);
+	}
+	blk_cleanup_queue(nandr->rq);
+	unregister_blkdev(nandr->major, nandr->name);
+}
+
+void rknand_dev_flush(void)
+{
+	if (!rk_nand_dev_initialised)
+		return;
+	rknand_device_lock();
+	rk_ftl_cache_write_back();
+	rknand_device_unlock();
+	pr_info("Nand flash flush ok!\n");
+}
+
+int __init rknand_dev_init(void)
+{
+	int ret;
+	void __iomem *nandc0;
+	void __iomem *nandc1;
+
+	rknand_get_reg_addr((unsigned long *)&nandc0, (unsigned long *)&nandc1);
+	if (!nandc0)
+		return -1;
+
+	ret = rk_ftl_init();
+	if (ret) {
+		pr_err("rk_ftl_init fail\n");
+		return -1;
+	}
+
+	ret = nand_blk_register(&mytr);
+	if (ret) {
+		pr_err("nand_blk_register fail\n");
+		return -1;
+	}
+
+	rk_nand_dev_initialised = 1;
+	return ret;
+}
+
+int rknand_dev_exit(void)
+{
+	if (!rk_nand_dev_initialised)
+		return -1;
+	rk_nand_dev_initialised = 0;
+	if (rknand_device_trylock()) {
+		rk_ftl_cache_write_back();
+		rknand_device_unlock();
+	}
+	nand_blk_unregister(&mytr);
+	rk_ftl_de_init();
+	pr_info("nand_blk_dev_exit:OK\n");
+	return 0;
+}
+
+void rknand_dev_suspend(void)
+{
+	if (!rk_nand_dev_initialised)
+		return;
+	pr_info("rk_nand_suspend\n");
+	rk_nand_schedule_enable_config(0);
+	rknand_device_lock();
+	rk_nand_suspend();
+}
+
+void rknand_dev_resume(void)
+{
+	if (!rk_nand_dev_initialised)
+		return;
+	pr_info("rk_nand_resume\n");
+	rk_nand_resume();
+	rknand_device_unlock();
+	rk_nand_schedule_enable_config(1);
+}
+
+void rknand_dev_shutdown(void)
+{
+	pr_info("rknand_shutdown...\n");
+	if (!rk_nand_dev_initialised)
+		return;
+	if (mytr.quit == 0) {
+		mytr.quit = 1;
+		wake_up(&mytr.thread_wq);
+		wait_for_completion(&mytr.thread_exit);
+		rk_ftl_de_init();
+	}
+	pr_info("rknand_shutdown:OK\n");
+}
diff --git a/drivers/rk_nand/rk_nand_blk.h b/drivers/rk_nand/rk_nand_blk.h
new file mode 100644
index 000000000000..72b3f505abf8
--- /dev/null
+++ b/drivers/rk_nand/rk_nand_blk.h
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __RKNAND_BLK_H
+#define __RKNAND_BLK_H
+
+#include <linux/semaphore.h>
+
+#define MAX_PART_COUNT 32
+
+struct nand_part {
+	unsigned char name[32];
+	unsigned long offset;
+	unsigned long size;
+	unsigned char type;
+};
+
+struct nand_blk_dev {
+	struct nand_blk_ops *nandr;
+	struct list_head list;
+	int devnum;
+	unsigned long size;
+	unsigned long off_size;
+	int readonly;
+	int writeonly;
+	int disable_access;
+	void *blkcore_priv;
+};
+
+struct nand_blk_ops {
+	char *name;
+	int major;
+	int minorbits;
+	int last_dev_index;
+	struct completion thread_exit;
+	int quit;
+	int nand_th_quited;
+	wait_queue_head_t thread_wq; /* thread wait queue */
+	struct request_queue *rq;
+	spinlock_t queue_lock; /* queue lock */
+	struct list_head devs;
+	struct module *owner;
+};
+
+void rknand_dev_suspend(void);
+void rknand_dev_resume(void);
+void rknand_dev_shutdown(void);
+void rknand_dev_flush(void);
+int __init rknand_dev_init(void);
+int rknand_dev_exit(void);
+void rknand_device_lock(void);
+int rknand_device_trylock(void);
+void rknand_device_unlock(void);
+int nand_blk_add_whole_disk(void);
+#endif
diff --git a/drivers/rk_nand/rk_zftl_arm64.S b/drivers/rk_nand/rk_zftl_arm64.S
new file mode 100644
index 000000000000..1d118e76115c
--- /dev/null
+++ b/drivers/rk_nand/rk_zftl_arm64.S
@@ -0,0 +1,28390 @@
+/*
+ * Copyright (c) 2016-2017, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * date: 2018-04-11
+ * function: rk ftl v5 for rockchip soc base on arm v8 to support 3D/2D
+ *	     TLC and MLC.
+ */
+	.cpu generic+fp+simd
+	.file	"rk_zftl_arm64.S"
+#APP
+	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\
+		,18,19,20,21,22,23,24,25,26,27,28,29,30
+	.equ	.L__reg_num_x\num, \num
+	.endr
+	.equ	.L__reg_num_xzr, 31
+
+	.macro	mrs_s, rt, sreg
+	.inst	0xd5200000|(\sreg)|(.L__reg_num_\rt)
+	.endm
+
+	.macro	msr_s, sreg, rt
+	.inst	0xd5000000|(\sreg)|(.L__reg_num_\rt)
+	.endm
+
+#NO_APP
+	.text
+	.align	2
+	.type	flash_mem_cmp8, %function
+flash_mem_cmp8:
+	mov	x3, 0
+.L2:
+	cmp	w3, w2
+	mov	w4, w3
+	bcs	.L7
+	ldrb	w5, [x0,x3]
+	add	x3, x3, 1
+	add	x6, x1, x3
+	ldrb	w6, [x6,-1]
+	cmp	w6, w5
+	beq	.L2
+	add	w0, w4, 1
+	b	.L3
+.L7:
+	mov	w0, 0
+.L3:
+	ret
+	.size	flash_mem_cmp8, .-flash_mem_cmp8
+	.align	2
+	.global	zftl_nandc_get_irq_status
+	.type	zftl_nandc_get_irq_status, %function
+zftl_nandc_get_irq_status:
+	adrp	x1, .LANCHOR0
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	cmp	w1, 9
+	bne	.L9
+	ldr	w0, [x0,296]
+	b	.L10
+.L9:
+	ldr	w0, [x0,372]
+.L10:
+	ret
+	.size	zftl_nandc_get_irq_status, .-zftl_nandc_get_irq_status
+	.section	.text.unlikely,"ax",%progbits
+	.align	2
+	.type	isxdigit, %function
+isxdigit:
+	and	w1, w0, -33
+	mov	w2, 1
+	sub	w1, w1, #65
+	cmp	w1, 25
+	bls	.L12
+	sub	w0, w0, #48
+	cmp	w0, 9
+	cset	w2, ls
+.L12:
+	mov	w0, w2
+	ret
+	.size	isxdigit, .-isxdigit
+	.text
+	.align	2
+	.global	zftl_get_density
+	.type	zftl_get_density, %function
+zftl_get_density:
+	cbnz	w0, .L15
+	adrp	x0, .LANCHOR0+4
+	ldr	w0, [x0,#:lo12:.LANCHOR0+4]
+	b	.L16
+.L15:
+	cmp	w0, 4
+	mov	w0, 8192
+	csel	w0, w0, wzr, cc
+.L16:
+	ret
+	.size	zftl_get_density, .-zftl_get_density
+	.align	2
+	.type	_list_remove_node, %function
+_list_remove_node:
+	stp	x29, x30, [sp, -64]!
+	uxth	w1, w1
+	mov	w4, 6
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x3, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	umull	x21, w1, w4
+	ldr	x23, [x3,8]
+	mov	w3, 65535
+	add	x20, x23, x21
+	ldrh	w1, [x23,x21]
+	cmp	w1, w3
+	bne	.L19
+	ldrh	w3, [x20,2]
+	cmp	w3, w1
+	bne	.L19
+	ldr	x1, [x0]
+	cmp	x20, x1
+	bne	.L18
+.L19:
+	ldrh	w1, [x20,2]
+	mov	x22, x0
+	mov	w0, 65535
+	mov	x24, x2
+	cmp	w1, w0
+	bne	.L21
+	ldr	x0, [x22]
+	cmp	x20, x0
+	beq	.L21
+	adrp	x0, .LC0
+	adrp	x1, .LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 184
+	bl	printk
+.L21:
+	ldr	x0, [x22]
+	mov	w2, 65535
+	cmp	x20, x0
+	bne	.L22
+	ldrh	w1, [x23,x21]
+	cmp	w1, w2
+	bne	.L23
+	str	xzr, [x22]
+	b	.L24
+.L23:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 6
+	umull	x1, w1, w0
+	ldr	x0, [x19,8]
+	add	x1, x0, x1
+	str	x1, [x22]
+	mov	w0, -1
+	strh	w0, [x1,2]
+	b	.L24
+.L22:
+	ldrh	w0, [x23,x21]
+	cmp	w0, w2
+	bne	.L25
+	ldrh	w1, [x20,2]
+	cmp	w1, w0
+	beq	.L24
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 6
+	mov	w2, -1
+	umull	x1, w1, w0
+	ldr	x0, [x19,8]
+	b	.L26
+.L25:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 6
+	ldrh	w2, [x20,2]
+	umull	x0, w0, w1
+	ldr	x3, [x19,8]
+	add	x0, x3, x0
+	strh	w2, [x0,2]
+	ldrh	w0, [x20,2]
+	ldrh	w2, [x23,x21]
+	umull	x0, w0, w1
+	ldr	x1, [x19,8]
+.L26:
+	strh	w2, [x1,x0]
+.L24:
+	mov	w0, -1
+	strh	w0, [x23,x21]
+	strh	w0, [x20,2]
+	ldrh	w0, [x24]
+	sub	w0, w0, #1
+	strh	w0, [x24]
+.L18:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	_list_remove_node, .-_list_remove_node
+	.align	2
+	.type	_list_pop_index_node, %function
+_list_pop_index_node:
+	stp	x29, x30, [sp, -32]!
+	uxth	w1, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w19, 65535
+	ldr	x20, [x0]
+	cbz	x20, .L28
+	adrp	x3, .LANCHOR0+8
+	mov	w4, 65535
+	mov	w5, 6
+	ldr	x19, [x3,#:lo12:.LANCHOR0+8]
+.L29:
+	cbnz	w1, .L30
+.L32:
+	sub	x19, x20, x19
+	mov	x1, -6148914691236517206
+	asr	x19, x19, 1
+	madd	x19, x1, x19, x19
+	uxth	w19, w19
+	mov	w1, w19
+	bl	_list_remove_node
+	mov	w0, -1
+	strh	w0, [x20]
+	strh	w0, [x20,2]
+	b	.L28
+.L30:
+	ldrh	w3, [x20]
+	cmp	w3, w4
+	beq	.L32
+	umull	x20, w3, w5
+	sub	w1, w1, #1
+	add	x20, x19, x20
+	uxth	w1, w1
+	b	.L29
+.L28:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	_list_pop_index_node, .-_list_pop_index_node
+	.align	2
+	.type	zftl_debug_proc_open, %function
+zftl_debug_proc_open:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x1, [x29,24]
+	bl	PDE_DATA
+	ldr	x1, [x29,24]
+	mov	x2, x0
+	mov	x0, x1
+	adrp	x1, zftl_debug_proc_show
+	add	x1, x1, :lo12:zftl_debug_proc_show
+	bl	single_open
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	zftl_debug_proc_open, .-zftl_debug_proc_open
+	.align	2
+	.type	zftl_debug_proc_show, %function
+zftl_debug_proc_show:
+	stp	x29, x30, [sp, -32]!
+	adrp	x1, .LC1
+	adrp	x2, .LC2
+	add	x29, sp, 0
+	add	x1, x1, :lo12:.LC1
+	add	x2, x2, :lo12:.LC2
+	str	x19, [sp,16]
+	mov	x19, x0
+	bl	seq_printf
+	adrp	x2, .LANCHOR2
+	adrp	x1, .LC3
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC3
+	ldr	w2, [x2,#:lo12:.LANCHOR2]
+	bl	seq_printf
+	ldr	x19, [sp,16]
+	mov	w0, 0
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	zftl_debug_proc_show, .-zftl_debug_proc_show
+	.align	2
+	.global	zftl_flash_suspend
+	.type	zftl_flash_suspend, %function
+zftl_flash_suspend:
+	adrp	x1, .LANCHOR0
+	add	x0, x1, :lo12:.LANCHOR0
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	cmp	w1, 9
+	ldr	x1, [x0,16]
+	ldr	w2, [x1]
+	str	w2, [x0,24]
+	ldr	w2, [x1,4]
+	str	w2, [x0,28]
+	bne	.L37
+	ldr	w2, [x1,16]
+	str	w2, [x0,32]
+	ldr	w2, [x1,32]
+	str	w2, [x0,36]
+	ldr	w2, [x1,80]
+	str	w2, [x0,40]
+	ldr	w2, [x1,84]
+	str	w2, [x0,44]
+	ldr	w2, [x1,520]
+	str	w2, [x0,48]
+	ldr	w1, [x1,8]
+	b	.L39
+.L37:
+	ldr	w2, [x1,8]
+	str	w2, [x0,32]
+	ldr	w2, [x1,12]
+	str	w2, [x0,36]
+	ldr	w2, [x1,304]
+	str	w2, [x0,40]
+	ldr	w2, [x1,308]
+	str	w2, [x0,44]
+	ldr	w2, [x1,336]
+	ldr	w1, [x1,344]
+	str	w2, [x0,48]
+.L39:
+	str	w1, [x0,52]
+	ret
+	.size	zftl_flash_suspend, .-zftl_flash_suspend
+	.align	2
+	.type	nandc_irq_disable, %function
+nandc_irq_disable:
+	adrp	x2, .LANCHOR0
+	ldrb	w2, [x2,#:lo12:.LANCHOR0]
+	cmp	w2, 9
+	mov	x2, 1
+	bne	.L41
+	ldr	w3, [x0,292]
+	lsl	x1, x2, x1
+	orr	w2, w3, w1
+	str	w2, [x0,292]
+	ldr	w2, [x0,288]
+	bic	w1, w2, w1
+	str	w1, [x0,288]
+	b	.L40
+.L41:
+	ldr	w3, [x0,368]
+	lsl	x1, x2, x1
+	orr	w2, w3, w1
+	str	w2, [x0,368]
+	ldr	w2, [x0,364]
+	bic	w1, w2, w1
+	str	w1, [x0,364]
+.L40:
+	ret
+	.size	nandc_irq_disable, .-nandc_irq_disable
+	.align	2
+	.type	_insert_free_list, %function
+_insert_free_list:
+	adrp	x3, .LANCHOR0
+	uxth	w1, w1
+	add	x6, x3, :lo12:.LANCHOR0
+	mov	x10, x3
+	ldrh	w4, [x6,56]
+	cmp	w4, w1
+	bls	.L43
+	ldrh	w3, [x2]
+	mov	w5, 6
+	add	w3, w3, 1
+	strh	w3, [x2]
+	umull	x11, w1, w5
+	ldr	x12, [x6,8]
+	mov	w2, -1
+	add	x7, x12, x11
+	strh	w2, [x7,2]
+	strh	w2, [x12,x11]
+	ldr	x2, [x0]
+	cbz	x2, .L50
+	ldr	x9, [x6,64]
+	ubfiz	x8, x1, 2, 16
+	ldr	x13, [x6,8]
+	mov	x6, -6148914691236517206
+	mov	w15, 65535
+	ldr	w4, [x9,x8]
+	ubfx	x3, x4, 11, 8
+	ldrh	w4, [x9,x8]
+	mov	w8, w5
+	ubfx	x4, x4, 0, 11
+	add	w4, w4, w3, lsl 3
+	sub	x3, x2, x13
+	asr	x3, x3, 1
+	and	w4, w4, 4095
+	madd	x3, x6, x3, x3
+	uxth	w3, w3
+.L48:
+	ubfiz	x14, x3, 2, 16
+	ldr	w5, [x9,x14]
+	ubfx	x6, x5, 11, 8
+	ldrh	w5, [x9,x14]
+	ubfx	x5, x5, 0, 11
+	add	w5, w5, w6, lsl 3
+	and	w5, w5, 4095
+	cmp	w5, w4
+	bcs	.L46
+	ldrh	w5, [x2]
+	cmp	w5, w15
+	bne	.L47
+	strh	w3, [x7,2]
+	strh	w1, [x2]
+	b	.L43
+.L47:
+	umull	x2, w5, w8
+	mov	w3, w5
+	add	x2, x13, x2
+	b	.L48
+.L46:
+	ldrh	w4, [x2,2]
+	strh	w4, [x7,2]
+	strh	w3, [x12,x11]
+	ldr	x3, [x0]
+	cmp	x2, x3
+	bne	.L49
+	strh	w1, [x2,2]
+.L50:
+	str	x7, [x0]
+	b	.L43
+.L49:
+	ldrh	w0, [x2,2]
+	add	x3, x10, :lo12:.LANCHOR0
+	mov	w4, 6
+	ldr	x3, [x3,8]
+	umull	x0, w0, w4
+	strh	w1, [x3,x0]
+	strh	w1, [x2,2]
+.L43:
+	ret
+	.size	_insert_free_list, .-_insert_free_list
+	.align	2
+	.type	_insert_data_list, %function
+_insert_data_list:
+	sub	sp, sp, #16
+	adrp	x3, .LANCHOR0
+	add	x4, x3, :lo12:.LANCHOR0
+	uxth	w1, w1
+	mov	x10, x3
+	str	x19, [sp]
+	ldrh	w5, [x4,56]
+	cmp	w5, w1
+	bls	.L51
+	ldrh	w3, [x2]
+	mov	w9, 6
+	add	w3, w3, 1
+	strh	w3, [x2]
+	umull	x11, w1, w9
+	ldr	x12, [x4,8]
+	mov	w2, -1
+	add	x6, x12, x11
+	strh	w2, [x6,2]
+	strh	w2, [x12,x11]
+	ldr	x2, [x0]
+	cbz	x2, .L66
+	ubfiz	x3, x1, 1, 16
+	ldr	x15, [x4,72]
+	ldr	x14, [x4,8]
+	mov	x5, -6148914691236517206
+	ldrh	w18, [x4,56]
+	mov	w7, 0
+	ldrh	w16, [x15,x3]
+	mov	w19, 65535
+	ldrh	w3, [x6,4]
+	ldr	x17, [x4,64]
+	cmp	w3, wzr
+	mul	w13, w16, w3
+	sub	x3, x2, x14
+	asr	x3, x3, 1
+	csinv	w13, w13, wzr, ne
+	madd	x3, x5, x3, x3
+	uxth	w3, w3
+.L62:
+	add	w7, w7, 1
+	cmp	w1, w3
+	uxth	w7, w7
+	beq	.L51
+	cmp	w7, w18
+	bhi	.L51
+	uxtw	x8, w3
+	ldrh	w5, [x2,4]
+	cmp	w5, wzr
+	ldrh	w4, [x15,x8,lsl 1]
+	mul	w4, w4, w5
+	csinv	w4, w4, wzr, ne
+	cmp	w4, w13
+	bne	.L58
+	lsl	x8, x8, 2
+	ldr	w4, [x17,x8]
+	ubfx	x5, x4, 11, 8
+	ldrh	w4, [x17,x8]
+	ubfx	x4, x4, 0, 11
+	add	w4, w4, w5, lsl 3
+	and	w4, w4, 4095
+	cmp	w4, w16
+	bcc	.L60
+	b	.L59
+.L58:
+	bhi	.L59
+.L60:
+	ldrh	w4, [x2]
+	cmp	w4, w19
+	bne	.L61
+	strh	w3, [x6,2]
+	strh	w1, [x2]
+	b	.L51
+.L61:
+	umull	x2, w4, w9
+	mov	w3, w4
+	add	x2, x14, x2
+	b	.L62
+.L59:
+	ldrh	w4, [x2,2]
+	strh	w4, [x6,2]
+	strh	w3, [x12,x11]
+	ldr	x3, [x0]
+	cmp	x2, x3
+	bne	.L63
+	strh	w1, [x2,2]
+.L66:
+	str	x6, [x0]
+	b	.L51
+.L63:
+	ldrh	w0, [x2,2]
+	add	x3, x10, :lo12:.LANCHOR0
+	mov	w4, 6
+	ldr	x3, [x3,8]
+	umull	x0, w0, w4
+	strh	w1, [x3,x0]
+	strh	w1, [x2,2]
+.L51:
+	ldr	x19, [sp]
+	add	sp, sp, 16
+	ret
+	.size	_insert_data_list, .-_insert_data_list
+	.align	2
+	.type	_list_get_gc_head_node.isra.5, %function
+_list_get_gc_head_node.isra.5:
+	uxth	w1, w1
+	mov	w2, 65535
+	cbz	x0, .L73
+	adrp	x2, .LANCHOR0+8
+	mov	w4, 65535
+	mov	w5, 6
+	ldr	x3, [x2,#:lo12:.LANCHOR0+8]
+.L69:
+	cbz	w1, .L70
+	ldrh	w2, [x0]
+	cmp	w2, w4
+	beq	.L73
+	umull	x2, w2, w5
+	sub	w1, w1, #1
+	add	x0, x3, x2
+	uxth	w1, w1
+	b	.L69
+.L70:
+	sub	x0, x0, x3
+	mov	x1, -6148914691236517206
+	asr	x0, x0, 1
+	madd	x0, x1, x0, x0
+	uxth	w2, w0
+.L73:
+	mov	w0, w2
+	ret
+	.size	_list_get_gc_head_node.isra.5, .-_list_get_gc_head_node.isra.5
+	.align	2
+	.type	_list_update_data_list, %function
+_list_update_data_list:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w19, w1
+	adrp	x1, .LANCHOR0
+	add	x4, x1, :lo12:.LANCHOR0
+	str	x25, [sp,64]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x20, x1
+	ldr	x3, [x4,80]
+	ldrh	w5, [x3,16]
+	cmp	w5, w19
+	beq	.L74
+	ldrh	w1, [x3,48]
+	cmp	w1, w19
+	beq	.L74
+	ldrh	w1, [x3,80]
+	cmp	w1, w19
+	beq	.L74
+	mov	w23, 6
+	ldr	x25, [x4,8]
+	ldr	x1, [x0]
+	umull	x23, w19, w23
+	add	x24, x25, x23
+	cmp	x24, x1
+	beq	.L74
+	mov	x21, x0
+	ldrh	w0, [x24,2]
+	mov	w1, 65535
+	mov	x22, x2
+	cmp	w0, w1
+	bne	.L78
+	ldrh	w1, [x25,x23]
+	cmp	w1, w0
+	bne	.L78
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 24
+	mov	w2, 251
+	bl	printk
+.L78:
+	ldrh	w3, [x24,2]
+	mov	w0, 65535
+	cmp	w3, w0
+	bne	.L79
+	ldrh	w0, [x25,x23]
+	cmp	w0, w3
+	beq	.L74
+.L79:
+	add	x1, x20, :lo12:.LANCHOR0
+	ubfiz	x0, x19, 1, 16
+	mov	x5, -6148914691236517206
+	ldr	x4, [x1,72]
+	ldr	x1, [x1,8]
+	ldrh	w2, [x4,x0]
+	ldrh	w0, [x24,4]
+	cmp	w0, wzr
+	mul	w2, w2, w0
+	mov	w0, 6
+	csinv	w2, w2, wzr, ne
+	umull	x3, w3, w0
+	asr	x0, x3, 1
+	add	x3, x1, x3
+	madd	x0, x5, x0, x0
+	ldrh	w1, [x3,4]
+	ldrh	w0, [x4,x0,lsl 1]
+	cmp	w1, wzr
+	mul	w0, w0, w1
+	csinv	w0, w0, wzr, ne
+	cmp	w2, w0
+	bcs	.L74
+	mov	x0, x21
+	mov	w1, w19
+	mov	x2, x22
+	bl	_list_remove_node
+	mov	x0, x21
+	mov	w1, w19
+	mov	x2, x22
+	bl	_insert_data_list
+.L74:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	_list_update_data_list, .-_list_update_data_list
+	.section	.text.unlikely
+	.align	2
+	.type	rk_simple_strtoull.constprop.34, %function
+rk_simple_strtoull.constprop.34:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x23, [sp,48]
+	mov	x20, x0
+	stp	x21, x22, [sp,32]
+	mov	x23, x1
+	ldrb	w0, [x0]
+	cmp	w0, 48
+	bne	.L95
+	ldrb	w0, [x20,1]
+	add	x19, x20, 1
+	mov	w21, 8
+	orr	w0, w0, 32
+	uxtb	w0, w0
+	cmp	w0, 120
+	bne	.L85
+	ldrb	w0, [x20,2]
+	bl	isxdigit
+	cbz	w0, .L85
+	add	x19, x20, 2
+	mov	w21, 16
+	b	.L85
+.L95:
+	mov	x19, x20
+	mov	w21, 10
+.L85:
+	mov	w22, 0
+.L86:
+	ldrb	w20, [x19]
+	mov	w0, w20
+	bl	isxdigit
+	cbnz	w0, .L87
+.L93:
+	cbz	x23, .L99
+	str	x19, [x23]
+	b	.L99
+.L87:
+	sub	w2, w20, #48
+	cmp	w2, 9
+	bhi	.L100
+.L94:
+	cmp	w2, w21
+	bcs	.L93
+	madd	w22, w22, w21, w2
+	add	x19, x19, 1
+	b	.L86
+.L100:
+	orr	w20, w20, 32
+	sub	w2, w20, #87
+	b	.L94
+.L99:
+	mov	w0, w22
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	rk_simple_strtoull.constprop.34, .-rk_simple_strtoull.constprop.34
+	.text
+	.align	2
+	.global	nand_flash_print_info
+	.type	nand_flash_print_info, %function
+nand_flash_print_info:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR2
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L102
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC4
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC4
+	add	x1, x1, 48
+	bl	printk
+.L102:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L103
+	adrp	x0, .LANCHOR0+88
+	ldr	x6, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC5
+	add	x0, x0, :lo12:.LC5
+	ldrb	w1, [x6,1]
+	ldrb	w2, [x6,2]
+	ldrb	w3, [x6,3]
+	ldrb	w4, [x6,4]
+	ldrb	w5, [x6,5]
+	ldrb	w6, [x6,6]
+	bl	printk
+.L103:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L104
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC6
+	add	x0, x0, :lo12:.LC6
+	ldrb	w1, [x1,8]
+	bl	printk
+.L104:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L105
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC7
+	add	x0, x0, :lo12:.LC7
+	ldrb	w1, [x1,9]
+	bl	printk
+.L105:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L106
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC8
+	add	x0, x0, :lo12:.LC8
+	ldrh	w1, [x1,10]
+	bl	printk
+.L106:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L107
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC9
+	add	x0, x0, :lo12:.LC9
+	ldrb	w1, [x1,12]
+	bl	printk
+.L107:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L108
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC10
+	add	x0, x0, :lo12:.LC10
+	ldrb	w1, [x1,13]
+	bl	printk
+.L108:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L109
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC11
+	add	x0, x0, :lo12:.LC11
+	ldrh	w1, [x1,14]
+	bl	printk
+.L109:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L110
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC12
+	add	x0, x0, :lo12:.LC12
+	ldrb	w1, [x1,23]
+	bl	printk
+.L110:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L111
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC13
+	add	x0, x0, :lo12:.LC13
+	ldrb	w1, [x1,18]
+	bl	printk
+.L111:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L112
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC14
+	add	x0, x0, :lo12:.LC14
+	ldrb	w1, [x1,19]
+	bl	printk
+.L112:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L113
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC15
+	add	x0, x0, :lo12:.LC15
+	ldrb	w1, [x1,20]
+	bl	printk
+.L113:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L114
+	adrp	x1, .LANCHOR0+96
+	adrp	x0, .LC16
+	add	x0, x0, :lo12:.LC16
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+96]
+	bl	printk
+.L114:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L115
+	adrp	x1, .LANCHOR0+97
+	adrp	x0, .LC17
+	add	x0, x0, :lo12:.LC17
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+97]
+	bl	printk
+.L115:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L116
+	adrp	x0, .LANCHOR0+88
+	ldr	x1, [x0,#:lo12:.LANCHOR0+88]
+	adrp	x0, .LC18
+	add	x0, x0, :lo12:.LC18
+	ldrb	w1, [x1,22]
+	bl	printk
+.L116:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L117
+	adrp	x1, .LANCHOR0+98
+	adrp	x0, .LC19
+	add	x0, x0, :lo12:.LC19
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+98]
+	bl	printk
+.L117:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L118
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC20
+	add	x0, x0, :lo12:.LC20
+	and	w1, w1, 1
+	bl	printk
+.L118:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L119
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC21
+	add	x0, x0, :lo12:.LC21
+	ubfx	x1, x1, 1, 1
+	bl	printk
+.L119:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L120
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC22
+	add	x0, x0, :lo12:.LC22
+	ubfx	x1, x1, 2, 1
+	bl	printk
+.L120:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L121
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC23
+	add	x0, x0, :lo12:.LC23
+	ubfx	x1, x1, 3, 1
+	bl	printk
+.L121:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L122
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC24
+	add	x0, x0, :lo12:.LC24
+	ubfx	x1, x1, 4, 1
+	bl	printk
+.L122:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L123
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC25
+	add	x0, x0, :lo12:.LC25
+	ubfx	x1, x1, 5, 1
+	bl	printk
+.L123:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L124
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC26
+	add	x0, x0, :lo12:.LC26
+	ubfx	x1, x1, 6, 1
+	bl	printk
+.L124:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L125
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC27
+	add	x0, x0, :lo12:.LC27
+	ubfx	x1, x1, 7, 1
+	bl	printk
+.L125:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L126
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrb	w1, [x0,17]
+	adrp	x0, .LC28
+	add	x0, x0, :lo12:.LC28
+	and	w1, w1, 1
+	bl	printk
+.L126:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L127
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC29
+	add	x0, x0, :lo12:.LC29
+	ubfx	x1, x1, 9, 1
+	bl	printk
+.L127:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L128
+	adrp	x0, .LANCHOR0+88
+	ldr	x0, [x0,#:lo12:.LANCHOR0+88]
+	ldrh	w1, [x0,16]
+	adrp	x0, .LC30
+	add	x0, x0, :lo12:.LC30
+	ubfx	x1, x1, 10, 1
+	bl	printk
+.L128:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L129
+	adrp	x1, .LANCHOR0+97
+	adrp	x0, .LC17
+	add	x0, x0, :lo12:.LC17
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+97]
+	bl	printk
+.L129:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L130
+	adrp	x2, .LANCHOR0
+	adrp	x0, .LC31
+	add	x2, x2, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC31
+	add	x2, x2, 104
+	ldrb	w1, [x2,10]
+	ldrb	w2, [x2,11]
+	bl	printk
+.L130:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L131
+	adrp	x2, .LANCHOR0
+	adrp	x0, .LC32
+	add	x2, x2, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC32
+	add	x2, x2, 104
+	ldrb	w1, [x2,8]
+	ldrb	w2, [x2,9]
+	bl	printk
+.L131:
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L101
+	adrp	x1, .LANCHOR0+136
+	adrp	x0, .LC33
+	add	x0, x0, :lo12:.LC33
+	ldrb	w1, [x1,#:lo12:.LANCHOR0+136]
+	bl	printk
+.L101:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	nand_flash_print_info, .-nand_flash_print_info
+	.align	2
+	.global	nandc_init
+	.type	nandc_init, %function
+nandc_init:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR2
+	mov	x22, x0
+	stp	x19, x20, [sp,16]
+	str	wzr, [x29,56]
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L227
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC34
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC34
+	add	x1, x1, 72
+	mov	x2, x22
+	bl	printk
+.L227:
+	adrp	x19, .LANCHOR0
+	mov	w1, 6
+	add	x0, x19, :lo12:.LANCHOR0
+	strb	w1, [x19,#:lo12:.LANCHOR0]
+	str	x22, [x0,16]
+	mov	w0, 12336
+	ldr	w1, [x22,352]
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L228
+	mov	w0, 8
+	strb	w0, [x19,#:lo12:.LANCHOR0]
+.L228:
+	ldr	w1, [x22,128]
+	mov	w0, 12336
+	movk	w0, 0x5639, lsl 16
+	cmp	w1, w0
+	bne	.L229
+	mov	w0, 9
+	strb	w0, [x19,#:lo12:.LANCHOR0]
+.L229:
+	ldrb	w0, [x19,#:lo12:.LANCHOR0]
+	add	x20, x19, :lo12:.LANCHOR0
+	cmp	w0, 9
+	bne	.L230
+	mov	w0, 1
+	strb	w0, [x20,137]
+	ldr	w0, [x29,56]
+	mov	w1, 4225
+	orr	w0, w0, 256
+	str	w0, [x29,56]
+	ldr	w0, [x29,56]
+	str	w0, [x22]
+	ldr	x0, [x20,16]
+	str	wzr, [x0,520]
+	str	w1, [x0,4]
+	mov	w1, 8321
+	ldr	x0, [x20,16]
+	str	w1, [x0,8]
+	mov	w1, 4099
+	movk	w1, 0x10, lsl 16
+	str	w1, [x0,80]
+	mov	w1, 38
+	str	w1, [x0,84]
+	mov	w1, 39
+	str	w1, [x0,84]
+	ldr	w1, [x21,#:lo12:.LANCHOR2]
+	tbz	x1, 12, .L232
+	ldr	w1, [x0]
+	ldr	w2, [x0,8]
+	ldr	w3, [x0,80]
+	ldr	w4, [x0,84]
+	ldr	w5, [x0,88]
+	b	.L244
+.L230:
+	ldr	w0, [x29,56]
+	mov	w1, 4225
+	strb	wzr, [x20,137]
+	orr	w0, w0, 256
+	str	w0, [x29,56]
+	ldr	w0, [x29,56]
+	str	w0, [x22]
+	ldr	x0, [x20,16]
+	str	wzr, [x0,336]
+	str	w1, [x0,4]
+	mov	w1, 8321
+	ldr	x0, [x20,16]
+	str	w1, [x0,344]
+	mov	w1, 4099
+	movk	w1, 0x10, lsl 16
+	str	w1, [x0,304]
+	mov	w1, 38
+	str	w1, [x0,308]
+	mov	w1, 39
+	str	w1, [x0,308]
+	mov	w0, 2048
+	bl	ftl_malloc
+	str	x0, [x20,144]
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L232
+	ldr	x0, [x20,16]
+	ldr	w1, [x0]
+	ldr	w2, [x0,344]
+	ldr	w3, [x0,304]
+	ldr	w4, [x0,308]
+	ldr	w5, [x0,312]
+.L244:
+	adrp	x0, .LC35
+	add	x0, x0, :lo12:.LC35
+	bl	printk
+.L232:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	strb	w0, [x19,184]
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	strh	wzr, [x19,186]
+	strb	wzr, [x19,188]
+	tbz	x0, 12, .L226
+	adrp	x1, .LANCHOR0
+	adrp	x0, .LC36
+	add	x0, x0, :lo12:.LC36
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	bl	printk
+.L226:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	nandc_init, .-nandc_init
+	.align	2
+	.global	timer_delay_ns
+	.type	timer_delay_ns, %function
+timer_delay_ns:
+	sub	sp, sp, #16
+	lsr	w0, w0, 4
+	str	w0, [sp,12]
+.L246:
+	ldr	w0, [sp,12]
+	sub	w1, w0, #1
+	str	w1, [sp,12]
+	cbnz	w0, .L246
+	add	sp, sp, 16
+	ret
+	.size	timer_delay_ns, .-timer_delay_ns
+	.align	2
+	.global	flash_read_status
+	.type	flash_read_status, %function
+flash_read_status:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	mov	w0, 112
+	str	w0, [x19,8]
+	mov	w0, 120
+	bl	timer_delay_ns
+	ldr	w0, [x19]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	uxtb	w0, w0
+	ret
+	.size	flash_read_status, .-flash_read_status
+	.align	2
+	.global	toshiba_set_rr_para
+	.type	toshiba_set_rr_para, %function
+toshiba_set_rr_para:
+	uxtb	w1, w1
+	mov	w3, 5
+	add	w2, w1, 1
+	stp	x29, x30, [sp, -96]!
+	smull	x3, w2, w3
+	adrp	x2, .LANCHOR1
+	add	x29, sp, 0
+	add	x2, x2, :lo12:.LANCHOR1
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	add	x23, x2, x1, sxtw
+	add	x24, x2, 88
+	add	x21, x2, 136
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x22, x0
+	add	x24, x24, x3
+	add	x21, x21, x3
+	mov	x20, 0
+	adrp	x26, .LANCHOR0
+	mov	w27, 85
+	mov	x19, x2
+.L250:
+	add	x25, x26, :lo12:.LANCHOR0
+	ldrb	w0, [x25,190]
+	cmp	w0, w20
+	bls	.L256
+	add	x0, x19, 88
+	str	w27, [x22,8]
+	ldrsb	w0, [x20,x0]
+	str	w0, [x22,4]
+	mov	w0, 200
+	bl	timer_delay_ns
+	ldrb	w0, [x25,189]
+	cmp	w0, 34
+	bne	.L251
+	ldrsb	w0, [x24,x20]
+	b	.L255
+.L251:
+	cmp	w0, 35
+	bne	.L253
+	ldrsb	w0, [x21,x20]
+	b	.L255
+.L253:
+	ldrsb	w0, [x23,232]
+.L255:
+	str	w0, [x22]
+	add	x20, x20, 1
+	b	.L250
+.L256:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	toshiba_set_rr_para, .-toshiba_set_rr_para
+	.align	2
+	.type	hynix_set_rr_para, %function
+hynix_set_rr_para:
+	stp	x29, x30, [sp, -64]!
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	uxtb	w1, w1
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x23, [sp,48]
+	mov	x20, 160
+	mov	x21, 0
+	ldr	x4, [x3,192]
+	ldr	x19, [x3,16]
+	add	x23, x4, 128
+	ldrb	w22, [x4,113]
+	mul	w2, w1, w22
+	sxtw	x1, w0
+	ubfiz	x0, x0, 8, 8
+	add	x19, x19, x0
+	mov	w0, 54
+	mul	x20, x1, x20
+	add	x1, x20, x2, sxtw
+	add	x20, x4, x1
+	add	x20, x20, 144
+	str	w0, [x19,2056]
+.L258:
+	cmp	w22, w21, uxtb
+	bls	.L260
+	ldrb	w0, [x23,x21]
+	str	w0, [x19,2052]
+	mov	w0, 120
+	bl	timer_delay_ns
+	ldrsb	w0, [x20,x21]
+	add	x21, x21, 1
+	str	w0, [x19,2048]
+	b	.L258
+.L260:
+	mov	w0, 22
+	str	w0, [x19,2056]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	hynix_set_rr_para, .-hynix_set_rr_para
+	.align	2
+	.global	hynix_reconfig_rr_para
+	.type	hynix_reconfig_rr_para, %function
+hynix_reconfig_rr_para:
+	stp	x29, x30, [sp, -32]!
+	uxtb	w0, w0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x19,189]
+	sub	w1, w1, #1
+	uxtb	w1, w1
+	cmp	w1, 6
+	bhi	.L261
+	ldr	x1, [x19,192]
+	sxtw	x20, w0
+	add	x1, x1, x20
+	ldrb	w1, [x1,120]
+	cbz	w1, .L261
+	mov	w1, 0
+	bl	hynix_set_rr_para
+	ldr	x0, [x19,192]
+	add	x20, x0, x20
+	strb	wzr, [x20,120]
+.L261:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	hynix_reconfig_rr_para, .-hynix_reconfig_rr_para
+	.align	2
+	.global	nandc_set_ddr_para
+	.type	nandc_set_ddr_para, %function
+nandc_set_ddr_para:
+	adrp	x1, .LANCHOR0
+	uxtb	w0, w0
+	add	x2, x1, :lo12:.LANCHOR0
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	ldr	x2, [x2,16]
+	cmp	w1, 9
+	lsl	w1, w0, 16
+	lsl	w0, w0, 8
+	orr	w0, w1, w0
+	orr	w0, w0, 3
+	bne	.L267
+	str	w0, [x2,80]
+	b	.L266
+.L267:
+	str	w0, [x2,304]
+.L266:
+	ret
+	.size	nandc_set_ddr_para, .-nandc_set_ddr_para
+	.align	2
+	.global	nandc_get_ddr_para
+	.type	nandc_get_ddr_para, %function
+nandc_get_ddr_para:
+	adrp	x1, .LANCHOR0
+	add	x0, x1, :lo12:.LANCHOR0
+	ldrb	w1, [x1,#:lo12:.LANCHOR0]
+	ldr	x0, [x0,16]
+	cmp	w1, 9
+	bne	.L270
+	ldr	w0, [x0,80]
+	b	.L272
+.L270:
+	ldr	w0, [x0,304]
+.L272:
+	ubfx	x0, x0, 8, 8
+	ret
+	.size	nandc_get_ddr_para, .-nandc_get_ddr_para
+	.align	2
+	.global	nandc_set_if_mode
+	.type	nandc_set_if_mode, %function
+nandc_set_if_mode:
+	adrp	x3, .LANCHOR0
+	uxtb	w0, w0
+	add	x1, x3, :lo12:.LANCHOR0
+	tst	w0, 6
+	ldr	x2, [x1,16]
+	ldr	w1, [x2]
+	beq	.L274
+	orr	w1, w1, 24576
+	and	w0, w0, 4
+	and	w1, w1, -32769
+	cmp	w0, wzr
+	orr	w1, w1, 196608
+	ldrb	w0, [x3,#:lo12:.LANCHOR0]
+	orr	w4, w1, 32768
+	csel	w1, w4, w1, ne
+	cmp	w0, 9
+	mov	w0, 8321
+	bne	.L276
+	str	w0, [x2,8]
+	mov	w0, 4099
+	movk	w0, 0x10, lsl 16
+	str	w0, [x2,80]
+	mov	w0, 38
+	str	w0, [x2,84]
+	mov	w0, 39
+	str	w0, [x2,84]
+	b	.L277
+.L276:
+	str	w0, [x2,344]
+	mov	w0, 4099
+	movk	w0, 0x10, lsl 16
+	str	w0, [x2,304]
+	mov	w0, 38
+	str	w0, [x2,308]
+	mov	w0, 39
+	str	w0, [x2,308]
+	b	.L277
+.L274:
+	and	w1, w1, -8193
+.L277:
+	str	w1, [x2]
+	ret
+	.size	nandc_set_if_mode, .-nandc_set_if_mode
+	.align	2
+	.global	nandc_cs
+	.type	nandc_cs, %function
+nandc_cs:
+	adrp	x1, .LANCHOR0+16
+	mov	w2, 1
+	lsl	w0, w2, w0
+	ldr	x3, [x1,#:lo12:.LANCHOR0+16]
+	ldr	w1, [x3]
+	bfi	w1, w0, 0, 8
+	str	w1, [x3]
+	ret
+	.size	nandc_cs, .-nandc_cs
+	.align	2
+	.global	nandc_de_cs
+	.type	nandc_de_cs, %function
+nandc_de_cs:
+	adrp	x0, .LANCHOR0+16
+	ldr	x1, [x0,#:lo12:.LANCHOR0+16]
+	ldr	w0, [x1]
+	and	w0, w0, -256
+	and	w0, w0, -131073
+	str	w0, [x1]
+	ret
+	.size	nandc_de_cs, .-nandc_de_cs
+	.align	2
+	.global	flash_wait_device_ready_raw
+	.type	flash_wait_device_ready_raw, %function
+flash_wait_device_ready_raw:
+	stp	x29, x30, [sp, -80]!
+	adrp	x3, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x3, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	w20, w1
+	mov	w22, w2
+	ldrb	w0, [x0,98]
+	mov	x19, x3
+	cmp	w0, w21
+	bhi	.L283
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 240
+	mov	w2, 599
+	bl	printk
+.L283:
+	add	x3, x19, :lo12:.LANCHOR0
+	add	x21, x3, x21, sxtw
+	ldrb	w23, [x21,200]
+	lsr	w24, w20, 8
+	lsr	w25, w20, 16
+	mov	w26, 120
+	mov	w0, w23
+	ldr	x19, [x3,16]
+	and	w21, w20, 255
+	bl	nandc_cs
+	ubfiz	x3, x23, 8, 8
+	add	x19, x19, x3
+.L285:
+	str	w26, [x19,2056]
+	mov	w0, 120
+	str	w21, [x19,2052]
+	str	w24, [x19,2052]
+	str	w25, [x19,2052]
+	bl	timer_delay_ns
+	ldr	w20, [x19,2048]
+	and	w20, w20, 255
+	and	w0, w22, w20
+	cmp	w0, w22
+	bne	.L285
+	cmp	w20, 255
+	beq	.L285
+	mov	w0, w23
+	bl	nandc_de_cs
+	mov	w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	flash_wait_device_ready_raw, .-flash_wait_device_ready_raw
+	.align	2
+	.global	flash_wait_device_ready
+	.type	flash_wait_device_ready, %function
+flash_wait_device_ready:
+	stp	x29, x30, [sp, -16]!
+	ubfx	x3, x0, 24, 2
+	mov	w2, w1
+	add	x29, sp, 0
+	and	w1, w0, 2097151
+	ubfx	x6, x0, 21, 3
+	cbnz	w3, .L287
+	adrp	x4, .LANCHOR0
+	add	x3, x4, :lo12:.LANCHOR0
+	ldrb	w0, [x3,97]
+	cbz	w0, .L288
+	ldrb	w0, [x3,208]
+	cbz	w0, .L287
+.L288:
+	add	x4, x4, :lo12:.LANCHOR0
+	ldrh	w5, [x4,210]
+	ldrb	w0, [x4,208]
+	udiv	w3, w1, w5
+	mul	w5, w3, w5
+	sub	w3, w1, w5
+	add	w1, w5, w3, lsl 1
+	cbnz	w0, .L287
+	add	x4, x4, 212
+	ldrh	w3, [x4,w3,uxtw 1]
+	add	w1, w3, w5
+.L287:
+	mov	w0, w6
+	bl	flash_wait_device_ready_raw
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_wait_device_ready, .-flash_wait_device_ready
+	.align	2
+	.global	nandc_wait_flash_ready
+	.type	nandc_wait_flash_ready, %function
+nandc_wait_flash_ready:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w19, 34464
+	adrp	x20, .LANCHOR0
+	movk	w19, 0x1, lsl 16
+.L298:
+	mov	w0, 100
+	bl	timer_delay_ns
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,16]
+	ldr	w0, [x0]
+	str	w0, [x29,40]
+	ldr	w0, [x29,40]
+	tbnz	x0, 9, .L299
+	subs	w19, w19, #1
+	bne	.L298
+	mov	w0, -1
+	b	.L297
+.L299:
+	mov	w0, 0
+.L297:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	nandc_wait_flash_ready, .-nandc_wait_flash_ready
+	.align	2
+	.global	sandisk_set_rr_para
+	.type	sandisk_set_rr_para, %function
+sandisk_set_rr_para:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	mov	w0, 239
+	uxtb	w19, w1
+	add	w19, w19, 1
+	str	w0, [x20,8]
+	mov	w0, 17
+	str	w0, [x20,4]
+	mov	w0, 200
+	bl	timer_delay_ns
+	mov	w1, 5
+	adrp	x2, .LANCHOR1
+	add	x2, x2, :lo12:.LANCHOR1
+	adrp	x5, .LANCHOR0
+	smull	x1, w19, w1
+	add	x0, x2, 88
+	add	x2, x2, 136
+	add	x0, x0, x1
+	add	x1, x2, x1
+	mov	x2, 0
+.L302:
+	add	x3, x5, :lo12:.LANCHOR0
+	ldrb	w4, [x3,190]
+	cmp	w4, w2
+	bls	.L307
+	ldrb	w3, [x3,189]
+	cmp	w3, 67
+	bne	.L303
+	ldrsb	w3, [x0,x2]
+	b	.L306
+.L303:
+	ldrsb	w3, [x1,x2]
+.L306:
+	str	w3, [x20]
+	add	x2, x2, 1
+	b	.L302
+.L307:
+	bl	nandc_wait_flash_ready
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	sandisk_set_rr_para, .-sandisk_set_rr_para
+	.align	2
+	.global	toshiba_3d_set_tlc_rr_para
+	.type	toshiba_3d_set_tlc_rr_para, %function
+toshiba_3d_set_tlc_rr_para:
+	stp	x29, x30, [sp, -48]!
+	uxtb	x2, w1
+	mov	x1, 7
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	x19, x0
+	mov	w21, 213
+	str	w21, [x0,8]
+	str	wzr, [x0,4]
+	mov	w0, -119
+	str	w0, [x19,4]
+	adrp	x0, .LANCHOR1
+	madd	x1, x2, x1, x1
+	add	x0, x0, :lo12:.LANCHOR1
+	add	x0, x0, 272
+	add	x20, x0, x1
+	ldrsb	w0, [x0,x1]
+	str	w0, [x19]
+	ldrsb	w0, [x20,1]
+	str	w0, [x19]
+	ldrsb	w0, [x20,2]
+	str	w0, [x19]
+	ldrsb	w0, [x20,3]
+	str	w0, [x19]
+	bl	nandc_wait_flash_ready
+	str	w21, [x19,8]
+	str	wzr, [x19,4]
+	mov	w0, -118
+	str	w0, [x19,4]
+	ldrsb	w0, [x20,4]
+	str	w0, [x19]
+	ldrsb	w0, [x20,5]
+	str	w0, [x19]
+	ldrsb	w0, [x20,6]
+	str	w0, [x19]
+	str	wzr, [x19]
+	bl	nandc_wait_flash_ready
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	toshiba_3d_set_tlc_rr_para, .-toshiba_3d_set_tlc_rr_para
+	.align	2
+	.global	toshiba_3d_set_slc_rr_para
+	.type	toshiba_3d_set_slc_rr_para, %function
+toshiba_3d_set_slc_rr_para:
+	stp	x29, x30, [sp, -16]!
+	mov	w2, 213
+	add	x29, sp, 0
+	str	w2, [x0,8]
+	mov	w2, -117
+	str	wzr, [x0,4]
+	str	w2, [x0,4]
+	adrp	x2, .LANCHOR1
+	add	x2, x2, :lo12:.LANCHOR1
+	add	x1, x2, x1, uxtb
+	ldrsb	w1, [x1,673]
+	str	w1, [x0]
+	str	wzr, [x0]
+	str	wzr, [x0]
+	str	wzr, [x0]
+	bl	nandc_wait_flash_ready
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	toshiba_3d_set_slc_rr_para, .-toshiba_3d_set_slc_rr_para
+	.align	2
+	.global	toshiba_tlc_set_rr_para
+	.type	toshiba_tlc_set_rr_para, %function
+toshiba_tlc_set_rr_para:
+	stp	x29, x30, [sp, -48]!
+	uxtw	x1, w1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	str	x21, [sp,32]
+	mov	w21, 239
+	adrp	x0, .LANCHOR2
+	str	w21, [x19,8]
+	cbz	w2, .L311
+	mov	w2, 18
+	str	w2, [x19,4]
+	mov	x2, 7
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 8
+	mul	x1, x1, x2
+	add	x20, x0, x1
+	ldrb	w0, [x0,x1]
+	str	w0, [x19]
+	ldrb	w0, [x20,1]
+	str	w0, [x19]
+	ldrb	w0, [x20,2]
+	str	w0, [x19]
+	ldrb	w0, [x20,3]
+	str	w0, [x19]
+	bl	nandc_wait_flash_ready
+	str	w21, [x19,8]
+	mov	w0, 19
+	str	w0, [x19,4]
+	ldrb	w0, [x20,4]
+	str	w0, [x19]
+	ldrb	w0, [x20,5]
+	str	w0, [x19]
+	ldrb	w0, [x20,6]
+	str	w0, [x19]
+	str	wzr, [x19]
+	b	.L312
+.L311:
+	add	x0, x0, :lo12:.LANCHOR2
+	mov	w3, 20
+	add	x0, x0, 344
+	str	w3, [x19,4]
+	ldrb	w0, [x0,x1]
+	str	w0, [x19]
+	str	w2, [x19]
+	str	w2, [x19]
+	str	w2, [x19]
+.L312:
+	bl	nandc_wait_flash_ready
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	toshiba_tlc_set_rr_para, .-toshiba_tlc_set_rr_para
+	.align	2
+	.global	zftl_flash_enter_slc_mode
+	.type	zftl_flash_enter_slc_mode, %function
+zftl_flash_enter_slc_mode:
+	adrp	x1, .LANCHOR0
+	uxtb	x0, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w2, [x1,97]
+	cbz	w2, .L313
+	cmp	w2, 1
+	ldr	x3, [x1,16]
+	bne	.L316
+	adrp	x1, .LANCHOR2+405
+	ldrb	w2, [x1,#:lo12:.LANCHOR2+405]
+	cbz	w2, .L313
+	sxtw	x1, w0
+	add	x1, x1, 8
+	add	x0, x3, x1, lsl 8
+	str	w2, [x0,8]
+	b	.L313
+.L316:
+	cmp	w2, 2
+	bne	.L318
+	add	x1, x1, x0
+	ldrb	w2, [x1,728]
+	cbz	w2, .L313
+	strb	wzr, [x1,728]
+	adrp	x1, .LANCHOR2+405
+	ldrb	w1, [x1,#:lo12:.LANCHOR2+405]
+	cbz	w1, .L313
+	add	x0, x0, 8
+	add	x0, x3, x0, lsl 8
+	str	w1, [x0,8]
+	b	.L313
+.L318:
+	cmp	w2, 3
+	bne	.L313
+	add	x1, x1, x0, sxtw
+	ldrb	w2, [x1,728]
+	cbz	w2, .L313
+	strb	wzr, [x1,728]
+	ubfiz	x1, x0, 8, 8
+	add	x0, x3, x1
+	mov	w1, 239
+	str	w1, [x0,2056]
+	mov	w1, 145
+	str	w1, [x0,2052]
+	mov	w1, 1
+	str	wzr, [x0,2048]
+	str	w1, [x0,2048]
+	str	wzr, [x0,2048]
+	str	wzr, [x0,2048]
+	bl	nandc_wait_flash_ready
+.L313:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_flash_enter_slc_mode, .-zftl_flash_enter_slc_mode
+	.align	2
+	.global	zftl_flash_exit_slc_mode
+	.type	zftl_flash_exit_slc_mode, %function
+zftl_flash_exit_slc_mode:
+	adrp	x1, .LANCHOR0
+	uxtb	x0, w0
+	add	x1, x1, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w2, [x1,97]
+	cbz	w2, .L331
+	cmp	w2, 1
+	ldr	x4, [x1,16]
+	bne	.L334
+	adrp	x1, .LANCHOR2+406
+	ldrb	w2, [x1,#:lo12:.LANCHOR2+406]
+	cbz	w2, .L331
+	sxtw	x1, w0
+	add	x1, x1, 8
+	add	x0, x4, x1, lsl 8
+	str	w2, [x0,8]
+	b	.L331
+.L334:
+	cmp	w2, 2
+	bne	.L336
+	add	x1, x1, x0
+	ldrb	w2, [x1,728]
+	cbnz	w2, .L331
+	adrp	x2, .LANCHOR2
+	mov	w5, 4
+	add	x2, x2, :lo12:.LANCHOR2
+	ldrb	w3, [x2,388]
+	cmp	w3, 2
+	csel	w3, w3, w5, eq
+	strb	w3, [x1,728]
+	ldrb	w1, [x2,406]
+	cbz	w1, .L331
+	add	x0, x0, 8
+	add	x0, x4, x0, lsl 8
+	str	w1, [x0,8]
+	b	.L331
+.L336:
+	cmp	w2, 3
+	bne	.L331
+	add	x1, x1, x0, sxtw
+	ldrb	w3, [x1,728]
+	cbnz	w3, .L331
+	adrp	x2, .LANCHOR2+388
+	mov	w5, 4
+	ldrb	w2, [x2,#:lo12:.LANCHOR2+388]
+	cmp	w2, 2
+	csel	w2, w2, w5, eq
+	strb	w2, [x1,728]
+	ubfiz	x1, x0, 8, 8
+	add	x0, x4, x1
+	mov	w1, 239
+	str	w1, [x0,2056]
+	mov	w1, 145
+	str	w1, [x0,2052]
+	mov	w1, 1
+	str	w2, [x0,2048]
+	str	w1, [x0,2048]
+	str	w3, [x0,2048]
+	str	w3, [x0,2048]
+	bl	nandc_wait_flash_ready
+.L331:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_flash_exit_slc_mode, .-zftl_flash_exit_slc_mode
+	.align	2
+	.global	flash_start_page_read
+	.type	flash_start_page_read, %function
+flash_start_page_read:
+	stp	x29, x30, [sp, -80]!
+	adrp	x2, .LANCHOR0
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	uxtb	w23, w0
+	add	x0, x2, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x25, [sp,64]
+	ubfx	x19, x1, 21, 3
+	and	w20, w1, 2097151
+	ubfx	x22, x1, 24, 2
+	ldrb	w0, [x0,98]
+	mov	x21, x2
+	cmp	w0, w19
+	bhi	.L350
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 688
+	mov	w2, 736
+	bl	printk
+.L350:
+	add	x25, x21, :lo12:.LANCHOR0
+	add	x19, x25, x19, sxtw
+	ldrb	w19, [x19,200]
+	mov	w0, w19
+	ldr	x24, [x25,16]
+	bl	nandc_cs
+	cbnz	w22, .L351
+	ldrb	w0, [x25,97]
+	cbz	w0, .L352
+	ldrb	w0, [x25,208]
+	cbz	w0, .L353
+.L352:
+	add	x2, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x2,210]
+	udiv	w0, w20, w1
+	mul	w0, w0, w1
+	ldrb	w1, [x2,208]
+	sub	w20, w20, w0
+	cbz	w1, .L354
+	add	w20, w0, w20, lsl 1
+	b	.L353
+.L354:
+	add	x2, x2, 212
+	ldrh	w20, [x2,w20,uxtw 1]
+	add	w20, w20, w0
+	b	.L355
+.L353:
+	mov	w0, w19
+	bl	zftl_flash_enter_slc_mode
+	b	.L355
+.L351:
+	ldr	x0, [x25,88]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L356
+	sxtw	x0, w19
+	add	x0, x0, 8
+	add	x0, x24, x0, lsl 8
+	str	w22, [x0,8]
+	b	.L355
+.L356:
+	mov	w0, w19
+	bl	zftl_flash_exit_slc_mode
+.L355:
+	ubfiz	x19, x19, 8, 8
+	and	w0, w20, 255
+	add	x1, x24, x19
+	str	wzr, [x1,2056]
+	str	wzr, [x1,2052]
+	str	wzr, [x1,2052]
+	str	w0, [x1,2052]
+	lsr	w0, w20, 8
+	str	w0, [x1,2052]
+	lsr	w20, w20, 16
+	str	w20, [x1,2052]
+	mov	w0, 0
+	str	w23, [x1,2056]
+	bl	nandc_de_cs
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	flash_start_page_read, .-flash_start_page_read
+	.align	2
+	.global	flash_set_interface_mode
+	.type	flash_set_interface_mode, %function
+flash_set_interface_mode:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	adrp	x22, .LC38
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LC38
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	mov	w24, w0
+	mov	x20, 0
+	add	x25, x21, 732
+	adrp	x23, .LANCHOR2
+.L370:
+	lsl	x0, x20, 3
+	ldr	x19, [x21,16]
+	ldrb	w1, [x0,x25]
+	cmp	w1, 44
+	cset	w26, eq
+	cmp	w1, 69
+	cset	w2, eq
+	cmp	w1, 152
+	cset	w0, eq
+	adrp	x1, .LANCHOR0
+	orr	w0, w2, w0
+	cbnz	w0, .L371
+	cbz	w26, .L361
+.L371:
+	add	x1, x1, :lo12:.LANCHOR0
+	cmp	w24, 1
+	ldrb	w1, [x1,764]
+	bne	.L363
+	tbz	x1, 0, .L361
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L364
+	adrp	x0, .LC37
+	add	x0, x0, :lo12:.LC37
+	bl	printk
+.L364:
+	add	x1, x19, x20, lsl 8
+	mov	w0, 239
+	str	w0, [x1,2056]
+	mov	w0, 1
+	cbz	w26, .L365
+	str	w0, [x1,2052]
+	mov	w0, 5
+	b	.L388
+.L365:
+	mov	w2, 128
+	str	w2, [x1,2052]
+.L388:
+	str	w0, [x1,2048]
+	b	.L369
+.L363:
+	tbz	x1, 2, .L361
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L367
+	mov	x0, x22
+	bl	printk
+.L367:
+	add	x1, x19, x20, lsl 8
+	mov	w0, 239
+	str	w0, [x1,2056]
+	cbz	w26, .L368
+	mov	w0, 1
+	str	w0, [x1,2052]
+	mov	w0, 35
+	b	.L388
+.L368:
+	mov	w0, 128
+	str	w0, [x1,2052]
+	str	w26, [x1,2048]
+.L369:
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+.L361:
+	add	x20, x20, 1
+	cmp	x20, 4
+	bne	.L370
+	bl	nandc_wait_flash_ready
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	flash_set_interface_mode, .-flash_set_interface_mode
+	.align	2
+	.global	flash_reset
+	.type	flash_reset, %function
+flash_reset:
+	adrp	x1, .LANCHOR0+16
+	uxtb	x0, w0
+	stp	x29, x30, [sp, -16]!
+	add	x0, x0, 8
+	add	x29, sp, 0
+	ldr	x1, [x1,#:lo12:.LANCHOR0+16]
+	add	x0, x1, x0, lsl 8
+	mov	w1, 255
+	str	w1, [x0,8]
+	bl	nandc_wait_flash_ready
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_reset, .-flash_reset
+	.align	2
+	.global	flash_read_id
+	.type	flash_read_id, %function
+flash_read_id:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	uxtb	w21, w0
+	adrp	x0, .LANCHOR0+16
+	stp	x19, x20, [sp,16]
+	mov	x19, x1
+	ldr	x20, [x0,#:lo12:.LANCHOR0+16]
+	mov	w0, w21
+	bl	flash_reset
+	mov	w0, w21
+	bl	nandc_cs
+	ubfiz	x2, x21, 8, 8
+	mov	w0, 144
+	add	x20, x20, x2
+	str	w0, [x20,2056]
+	mov	w0, 200
+	str	wzr, [x20,2052]
+	bl	timer_delay_ns
+	ldr	w0, [x20,2048]
+	strb	w0, [x19]
+	ldr	w0, [x20,2048]
+	strb	w0, [x19,1]
+	ldr	w0, [x20,2048]
+	strb	w0, [x19,2]
+	ldr	w0, [x20,2048]
+	strb	w0, [x19,3]
+	ldr	w0, [x20,2048]
+	strb	w0, [x19,4]
+	ldr	w0, [x20,2048]
+	strb	w0, [x19,5]
+	ldr	w0, [x20,2048]
+	strb	w0, [x19,6]
+	ldr	w0, [x20,2048]
+	strb	w0, [x19,7]
+	mov	w0, w21
+	bl	nandc_de_cs
+	ldrb	w2, [x19]
+	sub	w0, w2, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bhi	.L390
+	adrp	x0, .LC39
+	ldrb	w3, [x19,1]
+	ldrb	w4, [x19,2]
+	add	x0, x0, :lo12:.LC39
+	ldrb	w5, [x19,3]
+	add	w1, w21, 1
+	ldrb	w6, [x19,4]
+	ldrb	w7, [x19,5]
+	bl	printk
+.L390:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	flash_read_id, .-flash_read_id
+	.align	2
+	.global	flash_read_spare
+	.type	flash_read_spare, %function
+flash_read_spare:
+	stp	x29, x30, [sp, -48]!
+	adrp	x4, .LANCHOR0+16
+	ubfiz	x0, x0, 8, 8
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x3, .LANCHOR2+385
+	ldr	x19, [x4,#:lo12:.LANCHOR0+16]
+	str	x2, [x29,40]
+	add	x19, x19, x0
+	ldrb	w3, [x3,#:lo12:.LANCHOR2+385]
+	and	w0, w1, 255
+	lsl	w3, w3, 9
+	str	wzr, [x19,2056]
+	str	w3, [x19,2052]
+	lsr	w3, w3, 8
+	str	w3, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w1, 8
+	str	w0, [x19,2052]
+	lsr	w1, w1, 16
+	str	w1, [x19,2052]
+	mov	w0, 48
+	str	w0, [x19,2056]
+	bl	nandc_wait_flash_ready
+	ldr	x2, [x29,40]
+	ldr	w0, [x19,2048]
+	strb	w0, [x2]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	flash_read_spare, .-flash_read_spare
+	.align	2
+	.global	sandisk_prog_test_bad_block
+	.type	sandisk_prog_test_bad_block, %function
+sandisk_prog_test_bad_block:
+	stp	x29, x30, [sp, -64]!
+	adrp	x2, .LANCHOR0+16
+	uxtb	w0, w0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	ldr	x19, [x2,#:lo12:.LANCHOR0+16]
+	add	x2, x20, :lo12:.LANCHOR2
+	str	x21, [sp,32]
+	ldrb	w3, [x2,405]
+	sxtw	x2, w0
+	add	x2, x2, 8
+	add	x2, x19, x2, lsl 8
+	cbnz	w3, .L407
+	mov	w3, 162
+.L407:
+	ubfiz	x0, x0, 8, 8
+	str	w3, [x2,8]
+	add	x19, x19, x0
+	mov	w0, 128
+	str	x1, [x29,56]
+	str	w0, [x19,2056]
+	and	w0, w1, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w1, 8
+	str	w0, [x19,2052]
+	lsr	w0, w1, 16
+	str	w0, [x19,2052]
+	mov	w0, 16
+	str	w0, [x19,2056]
+	bl	nandc_wait_flash_ready
+	mov	w0, 112
+	str	w0, [x19,2056]
+	mov	w0, 80
+	bl	timer_delay_ns
+	ldr	w2, [x19,2048]
+	mov	w0, 5
+	ldr	x1, [x29,56]
+	ands	w21, w2, w0
+	beq	.L396
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L396
+	adrp	x0, .LC40
+	add	x0, x0, :lo12:.LC40
+	bl	printk
+.L396:
+	add	x20, x20, :lo12:.LANCHOR2
+	ldrb	w0, [x20,406]
+	cbz	w0, .L397
+	str	w0, [x19,2056]
+.L397:
+	mov	w0, w21
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	sandisk_prog_test_bad_block, .-sandisk_prog_test_bad_block
+	.align	2
+	.global	nandc_rdy_status
+	.type	nandc_rdy_status, %function
+nandc_rdy_status:
+	adrp	x0, .LANCHOR0+16
+	sub	sp, sp, #16
+	ldr	x0, [x0,#:lo12:.LANCHOR0+16]
+	ldr	w0, [x0]
+	str	w0, [sp,8]
+	ldr	w0, [sp,8]
+	add	sp, sp, 16
+	ubfx	x0, x0, 9, 1
+	ret
+	.size	nandc_rdy_status, .-nandc_rdy_status
+	.align	2
+	.global	nandc_bch_sel
+	.type	nandc_bch_sel, %function
+nandc_bch_sel:
+	adrp	x2, .LANCHOR0
+	mov	w3, 1
+	add	x1, x2, :lo12:.LANCHOR0
+	ldrb	w2, [x2,#:lo12:.LANCHOR0]
+	strb	w0, [x1,188]
+	cmp	w2, 9
+	ldr	x2, [x1,16]
+	bne	.L410
+	str	w3, [x2,16]
+	cmp	w0, 70
+	mov	w1, 0
+	beq	.L411
+	cmp	w0, 60
+	mov	w1, 3
+	beq	.L411
+	cmp	w0, 40
+	mov	w1, 2
+	csel	w1, w1, w3, eq
+.L411:
+	lsl	w1, w1, 25
+	orr	w1, w1, 1
+	str	w1, [x2,32]
+	b	.L409
+.L410:
+	str	w3, [x2,8]
+	cmp	w0, 16
+	mov	w1, 4096
+	bne	.L413
+.L416:
+	and	w1, w1, -17
+	b	.L414
+.L413:
+	cmp	w0, 24
+	bne	.L415
+	orr	w1, w1, 16
+	b	.L414
+.L415:
+	cmp	w0, 40
+	orr	w1, w1, 262144
+	orr	w1, w1, 16
+	beq	.L416
+.L414:
+	orr	w1, w1, 1
+	str	w1, [x2,12]
+.L409:
+	ret
+	.size	nandc_bch_sel, .-nandc_bch_sel
+	.align	2
+	.global	zftl_flash_resume
+	.type	zftl_flash_resume, %function
+zftl_flash_resume:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldrb	w1, [x20,#:lo12:.LANCHOR0]
+	ldr	w2, [x0,24]
+	cmp	w1, 9
+	ldr	x1, [x0,16]
+	str	w2, [x1]
+	ldr	x1, [x0,16]
+	ldr	w2, [x0,28]
+	str	w2, [x1,4]
+	ldr	x1, [x0,16]
+	ldr	w2, [x0,32]
+	bne	.L424
+	str	w2, [x1,16]
+	ldr	w2, [x0,36]
+	str	w2, [x1,32]
+	ldr	w2, [x0,40]
+	str	w2, [x1,80]
+	ldr	w2, [x0,44]
+	str	w2, [x1,84]
+	ldr	w2, [x0,48]
+	str	w2, [x1,520]
+	ldr	w0, [x0,52]
+	str	w0, [x1,8]
+	b	.L425
+.L424:
+	str	w2, [x1,8]
+	ldr	w2, [x0,36]
+	str	w2, [x1,12]
+	ldr	w2, [x0,40]
+	str	w2, [x1,304]
+	ldr	w2, [x0,44]
+	str	w2, [x1,308]
+	ldr	w2, [x0,48]
+	str	w2, [x1,336]
+	ldr	w0, [x0,52]
+	str	w0, [x1,344]
+.L425:
+	add	x21, x20, :lo12:.LANCHOR0
+	mov	x19, 0
+	add	x23, x21, 732
+	mov	w24, 2
+.L427:
+	lsl	x0, x19, 3
+	ldrb	w0, [x0,x23]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bhi	.L426
+	uxtb	w22, w19
+	mov	w0, w22
+	bl	flash_reset
+	add	x0, x21, 728
+	strb	w24, [x19,x0]
+	mov	w0, w22
+	bl	zftl_flash_enter_slc_mode
+.L426:
+	add	x19, x19, 1
+	cmp	x19, 4
+	bne	.L427
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x20,136]
+	cbz	w0, .L428
+	mov	w0, 1
+	bl	nandc_set_if_mode
+	mov	w0, w19
+	bl	flash_set_interface_mode
+	mov	w0, w19
+	bl	nandc_set_if_mode
+	ldr	w0, [x20,40]
+	lsr	w0, w0, 8
+	bl	nandc_set_ddr_para
+.L428:
+	adrp	x0, .LANCHOR2+396
+	ldrb	w0, [x0,#:lo12:.LANCHOR2+396]
+	bl	nandc_bch_sel
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	zftl_flash_resume, .-zftl_flash_resume
+	.align	2
+	.global	rk_nandc_flash_ready
+	.type	rk_nandc_flash_ready, %function
+rk_nandc_flash_ready:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, 1
+	add	x29, sp, 0
+	bl	nandc_irq_disable
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nandc_flash_ready, .-rk_nandc_flash_ready
+	.align	2
+	.global	nandc_iqr_wait_flash_ready
+	.type	nandc_iqr_wait_flash_ready, %function
+nandc_iqr_wait_flash_ready:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	ldr	x0, [x20,16]
+	bl	rk_nandc_rb_irq_flag_init
+	ldrb	w1, [x19,#:lo12:.LANCHOR0]
+	ldr	x0, [x20,16]
+	cmp	w1, 9
+	bne	.L435
+	ldr	w1, [x0,292]
+	orr	w1, w1, 2
+	str	w1, [x0,292]
+	ldr	w1, [x0,288]
+	orr	w1, w1, 2
+	str	w1, [x0,288]
+	b	.L436
+.L435:
+	ldr	w1, [x0,368]
+	orr	w1, w1, 2
+	str	w1, [x0,368]
+	ldr	w1, [x0,364]
+	orr	w1, w1, 2
+	str	w1, [x0,364]
+.L436:
+	ldr	w1, [x0]
+	tbnz	x1, 9, .L437
+	bl	wait_for_nand_flash_ready
+	b	.L434
+.L437:
+	mov	w1, 1
+	bl	nandc_irq_disable
+.L434:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	nandc_iqr_wait_flash_ready, .-nandc_iqr_wait_flash_ready
+	.align	2
+	.global	flash_erase_duplane_block
+	.type	flash_erase_duplane_block, %function
+flash_erase_duplane_block:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	uxtb	w19, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	str	x25, [sp,64]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	uxtb	w25, w1
+	mov	w22, w2
+	ldrb	w0, [x0,98]
+	mov	w24, w3
+	cmp	w0, w19
+	bhi	.L440
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 712
+	mov	w2, 510
+	bl	printk
+.L440:
+	add	x0, x20, :lo12:.LANCHOR0
+	add	x19, x0, x19, sxtw
+	ldrb	w23, [x19,200]
+	ldr	x19, [x0,16]
+	adrp	x0, .LANCHOR2
+	mov	x21, x23
+	add	x23, x23, 8
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	add	x23, x19, x23, lsl 8
+	tbz	x0, 4, .L441
+	adrp	x0, .LC41
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC41
+	mov	w2, w22
+	mov	w3, w24
+	bl	printk
+.L441:
+	bl	nandc_wait_flash_ready
+	mov	w0, w21
+	bl	nandc_cs
+	mov	w0, w21
+	cbnz	w25, .L442
+	bl	zftl_flash_enter_slc_mode
+	b	.L443
+.L442:
+	bl	zftl_flash_exit_slc_mode
+.L443:
+	ubfiz	x4, x21, 8, 8
+	mov	w0, 96
+	add	x19, x19, x4
+	add	x20, x20, :lo12:.LANCHOR0
+	str	w0, [x19,2056]
+	and	w0, w22, 255
+	str	w0, [x19,2052]
+	lsr	w0, w22, 8
+	str	w0, [x19,2052]
+	lsr	w0, w22, 16
+	str	w0, [x19,2052]
+	ldrb	w0, [x20,765]
+	mov	w20, 0
+	cbnz	w0, .L444
+	mov	w0, 208
+	str	w0, [x19,2056]
+	mov	w20, 5
+	bl	nandc_wait_flash_ready
+	mov	x0, x23
+	bl	flash_read_status
+	and	w20, w0, w20
+.L444:
+	mov	w0, 96
+	str	w0, [x19,2056]
+	and	w0, w24, 255
+	str	w0, [x19,2052]
+	lsr	w0, w24, 8
+	str	w0, [x19,2052]
+	lsr	w3, w24, 16
+	str	w3, [x19,2052]
+	mov	w0, 208
+	str	w0, [x19,2056]
+	mov	w19, 5
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	x0, x23
+	bl	flash_read_status
+	mov	w2, w0
+	mov	w0, w21
+	str	x2, [x29,88]
+	bl	nandc_de_cs
+	ldr	x2, [x29,88]
+	and	w19, w2, w19
+	orr	w19, w19, w20
+	cbz	w19, .L445
+	adrp	x0, .LC42
+	mov	w1, w22
+	add	x0, x0, :lo12:.LC42
+	bl	printk
+.L445:
+	mov	w0, w19
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_erase_duplane_block, .-flash_erase_duplane_block
+	.align	2
+	.global	flash_erase_block_en
+	.type	flash_erase_block_en, %function
+flash_erase_block_en:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	uxtb	w20, w0
+	add	x0, x19, :lo12:.LANCHOR0
+	str	x25, [sp,64]
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	uxtb	w24, w1
+	mov	w22, w2
+	ldrb	w0, [x0,98]
+	and	w23, w2, 2097151
+	cmp	w0, w20
+	bhi	.L454
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 744
+	mov	w2, 555
+	bl	printk
+.L454:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x20, x0, x20, sxtw
+	ldrb	w21, [x20,200]
+	ldr	x25, [x0,16]
+	adrp	x0, .LANCHOR2
+	mov	x20, x21
+	add	x21, x21, 8
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	add	x21, x25, x21, lsl 8
+	tbz	x0, 4, .L455
+	adrp	x0, .LC43
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC43
+	mov	w2, w22
+	bl	printk
+.L455:
+	bl	nandc_wait_flash_ready
+	mov	w0, w20
+	bl	nandc_cs
+	mov	w0, w20
+	cbnz	w24, .L456
+	bl	zftl_flash_enter_slc_mode
+	b	.L457
+.L456:
+	bl	zftl_flash_exit_slc_mode
+.L457:
+	ubfiz	x3, x20, 8, 8
+	mov	w0, 96
+	add	x3, x25, x3
+	str	w0, [x3,2056]
+	and	w0, w22, 255
+	str	w0, [x3,2052]
+	lsr	w0, w23, 8
+	str	w0, [x3,2052]
+	lsr	w0, w23, 16
+	str	w0, [x3,2052]
+	mov	w0, 208
+	str	w0, [x3,2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	x0, x21
+	bl	flash_read_status
+	mov	w21, w0
+	mov	w0, w20
+	bl	nandc_de_cs
+	mov	w3, 5
+	ands	w20, w21, w3
+	beq	.L458
+	add	x19, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC44
+	add	x0, x0, :lo12:.LC44
+	mov	w2, w20
+	ldrh	w1, [x19,210]
+	udiv	w1, w22, w1
+	bl	printk
+.L458:
+	mov	w0, w20
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	flash_erase_block_en, .-flash_erase_block_en
+	.align	2
+	.global	flash_erase_block
+	.type	flash_erase_block, %function
+flash_erase_block:
+	stp	x29, x30, [sp, -16]!
+	mov	w2, w1
+	mov	w1, 0
+	add	x29, sp, 0
+	bl	flash_erase_block_en
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_erase_block, .-flash_erase_block
+	.align	2
+	.global	flash_erase_all
+	.type	flash_erase_all, %function
+flash_erase_all:
+	stp	x29, x30, [sp, -64]!
+	adrp	x0, .LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	w19, 0
+	ldrb	w1, [x0,389]
+	ldrh	w20, [x0,390]
+	adrp	x0, .LANCHOR0
+	add	x23, x0, :lo12:.LANCHOR0
+	mov	x21, x0
+	mul	w20, w1, w20
+	uxth	w20, w20
+.L467:
+	ldrb	w0, [x23,98]
+	cmp	w0, w19
+	bls	.L471
+	add	x0, x23, x19, sxtw
+	ldrb	w24, [x0,200]
+	mov	w22, 0
+.L468:
+	cmp	w20, w22, uxth
+	bls	.L472
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x0,210]
+	mov	w0, w24
+	mul	w1, w22, w1
+	add	w22, w22, 1
+	bl	flash_erase_block
+	b	.L468
+.L472:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L467
+.L471:
+	adrp	x0, .LC45
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC45
+	bl	printk
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	flash_erase_all, .-flash_erase_all
+	.align	2
+	.global	rk_nandc_flash_xfer_completed
+	.type	rk_nandc_flash_xfer_completed, %function
+rk_nandc_flash_xfer_completed:
+	stp	x29, x30, [sp, -16]!
+	mov	w1, 0
+	add	x29, sp, 0
+	bl	nandc_irq_disable
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nandc_flash_xfer_completed, .-rk_nandc_flash_xfer_completed
+	.align	2
+	.global	nandc_xfer_start
+	.type	nandc_xfer_start, %function
+nandc_xfer_start:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	str	x25, [sp,64]
+	add	x21, x22, :lo12:.LANCHOR0
+	str	x2, [x29,80]
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	uxtb	w24, w0
+	uxtb	w23, w1
+	ldr	x0, [x21,16]
+	add	w20, w23, 1
+	str	x3, [x29,88]
+	bl	rk_nandc_xfer_irq_flag_init
+	ldrb	w0, [x22,#:lo12:.LANCHOR0]
+	ldr	x4, [x21,16]
+	cmp	w0, 9
+	ldr	x3, [x29,88]
+	ldr	x2, [x29,80]
+	bne	.L475
+	ldr	w0, [x4,292]
+	ubfiz	w19, w24, 1, 1
+	orr	w19, w19, 8
+	asr	w20, w20, 1
+	orr	w0, w0, 1
+	str	w0, [x4,292]
+	ldr	w0, [x4,288]
+	orr	w0, w0, 1
+	str	w0, [x4,288]
+	mov	w0, 1
+	bfi	w19, w0, 5, 2
+	ldrb	w0, [x21,137]
+	orr	w19, w19, 536870912
+	orr	w19, w19, 1024
+	and	w19, w19, -17
+	bfi	w19, w20, 22, 6
+	orr	w19, w19, 128
+	cbz	w0, .L477
+	ldrb	w1, [x21,184]
+	orr	w0, w19, 512
+	cmp	w1, wzr
+	csel	w19, w0, w19, ne
+	b	.L477
+.L475:
+	ldr	w0, [x4,368]
+	ubfiz	w19, w24, 1, 1
+	orr	w19, w19, 8
+	asr	w20, w20, 1
+	orr	w0, w0, 1
+	str	w0, [x4,368]
+	ldr	w0, [x4,364]
+	orr	w0, w0, 1
+	str	w0, [x4,364]
+	mov	w0, 16
+	ldr	w25, [x4,12]
+	bfi	w25, w0, 8, 8
+	mov	w0, 1
+	bfi	w19, w0, 5, 2
+	and	w25, w25, -9
+	orr	w19, w19, 536870912
+	and	w25, w25, -225
+	orr	w19, w19, 1024
+	and	w19, w19, -17
+	bfi	w19, w20, 22, 6
+	cbz	w24, .L489
+	ldrb	w0, [x21,188]
+	ubfx	x23, x23, 1, 7
+	mov	w1, 64
+	mov	w4, 128
+	cmp	w0, 25
+	add	x23, x3, x23, lsl 2
+	csel	w4, w1, w4, cc
+	mov	w1, 0
+	b	.L482
+.L477:
+	add	x22, x22, :lo12:.LANCHOR0
+	ubfx	x21, x19, 22, 6
+	mov	x0, x2
+	lsl	w1, w21, 10
+	str	x2, [x22,152]
+	mov	w2, w24
+	str	x3, [x22,160]
+	bl	rknand_dma_map_single
+	str	w0, [x22,168]
+	ldr	x0, [x22,160]
+	lsl	w1, w21, 2
+	mov	w2, w24
+	bl	rknand_dma_map_single
+	str	w0, [x22,172]
+	ldr	x3, [x22,16]
+	mov	w1, 1
+	str	w1, [x22,176]
+	cmp	w24, wzr
+	ldr	w1, [x22,168]
+	str	w1, [x3,52]
+	str	w0, [x3,56]
+	mov	w0, 16
+	ldr	w1, [x3,48]
+	bfi	w1, w0, 9, 5
+	mov	w0, 2
+	orr	w1, w1, 448
+	bfi	w1, w0, 3, 3
+	cset	w0, eq
+	orr	w1, w1, 4
+	bfi	w1, w0, 1, 1
+	ldrh	w0, [x22,186]
+	orr	w1, w1, 1
+	bfi	w1, w0, 16, 11
+	str	w1, [x3,48]
+	str	w19, [x3,16]
+	orr	w19, w19, 4
+	str	w19, [x3,16]
+	b	.L474
+.L482:
+	cmp	x3, x23
+	add	w0, w1, w4
+	beq	.L484
+	ldrh	w5, [x3,2]
+	and	x1, x1, 4294967292
+	ldr	x6, [x21,144]
+	ldrh	w7, [x3],4
+	orr	w5, w7, w5, lsl 16
+	str	w5, [x6,x1]
+	mov	w1, w0
+	b	.L482
+.L489:
+	ldr	x1, [x21,144]
+	str	w0, [x1]
+.L484:
+	add	x22, x22, :lo12:.LANCHOR0
+	and	w20, w20, 63
+	lsl	w1, w20, 10
+	ldr	x0, [x22,144]
+	str	x2, [x22,152]
+	str	x0, [x22,160]
+	mov	x0, x2
+	mov	w2, w24
+	bl	rknand_dma_map_single
+	str	w0, [x22,168]
+	ldr	x0, [x22,160]
+	lsl	w1, w20, 7
+	mov	w2, w24
+	bl	rknand_dma_map_single
+	str	w0, [x22,172]
+	ldr	x3, [x22,16]
+	mov	w0, 1
+	str	w0, [x22,176]
+	cmp	w24, wzr
+	ldr	w0, [x22,168]
+	mov	w1, 8660
+	str	w0, [x3,20]
+	ldr	w0, [x22,172]
+	str	w0, [x3,24]
+	cset	w0, eq
+	bfi	w1, w0, 1, 1
+	orr	w1, w1, 1
+	str	w1, [x3,16]
+	str	w25, [x3,12]
+	str	w19, [x3,8]
+	orr	w19, w19, 4
+	str	w19, [x3,8]
+.L474:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	nandc_xfer_start, .-nandc_xfer_start
+	.align	2
+	.global	nandc_set_seed
+	.type	nandc_set_seed, %function
+nandc_set_seed:
+	adrp	x1, .LANCHOR1
+	and	w0, w0, 127
+	add	x1, x1, :lo12:.LANCHOR1
+	adrp	x2, .LANCHOR0
+	add	x1, x1, 768
+	ldrh	w0, [x1,w0,uxtw 1]
+	add	x1, x2, :lo12:.LANCHOR0
+	ldrb	w2, [x2,#:lo12:.LANCHOR0]
+	orr	w3, w0, -1073741824
+	ldrb	w4, [x1,184]
+	ldr	x1, [x1,16]
+	cmp	w4, wzr
+	csel	w0, w3, w0, ne
+	cmp	w2, 9
+	bne	.L492
+	str	w0, [x1,520]
+	b	.L490
+.L492:
+	str	w0, [x1,336]
+.L490:
+	ret
+	.size	nandc_set_seed, .-nandc_set_seed
+	.align	2
+	.global	zftl_flash_de_init
+	.type	zftl_flash_de_init, %function
+zftl_flash_de_init:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	bl	nandc_wait_flash_ready
+	adrp	x19, .LANCHOR0
+	mov	w0, 0
+	add	x20, x19, :lo12:.LANCHOR0
+	bl	hynix_reconfig_rr_para
+	ldrb	w0, [x20,136]
+	cbz	w0, .L497
+	ldrb	w0, [x20,764]
+	tbz	x0, 0, .L497
+	mov	w0, 1
+	bl	flash_set_interface_mode
+	mov	w0, 1
+	bl	nandc_set_if_mode
+	strb	wzr, [x20,136]
+.L497:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x19,184]
+	cbz	w0, .L498
+	mov	w0, 0
+	strb	wzr, [x19,184]
+	bl	nandc_set_seed
+	mov	w0, 1
+	strb	w0, [x19,184]
+.L498:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	zftl_flash_de_init, .-zftl_flash_de_init
+	.align	2
+	.global	nandc_randomizer_enable
+	.type	nandc_randomizer_enable, %function
+nandc_randomizer_enable:
+	adrp	x1, .LANCHOR0+184
+	strb	w0, [x1,#:lo12:.LANCHOR0+184]
+	ret
+	.size	nandc_randomizer_enable, .-nandc_randomizer_enable
+	.align	2
+	.global	nandc_get_chip_if
+	.type	nandc_get_chip_if, %function
+nandc_get_chip_if:
+	adrp	x1, .LANCHOR0+16
+	uxtb	x0, w0
+	add	x0, x0, 8
+	ldr	x1, [x1,#:lo12:.LANCHOR0+16]
+	add	x0, x1, x0, lsl 8
+	ret
+	.size	nandc_get_chip_if, .-nandc_get_chip_if
+	.align	2
+	.global	buf_init
+	.type	buf_init, %function
+buf_init:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	add	x19, x0, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	add	x19, x19, 768
+	mov	w21, 0
+	mov	x22, x0
+.L511:
+	add	x20, x22, :lo12:.LANCHOR0
+	uxtb	w0, w21
+	add	w1, w0, 1
+	strb	w0, [x19,1]
+	strb	w1, [x19]
+	add	w21, w21, 1
+	ldrb	w0, [x20,2816]
+	add	x19, x19, 64
+	strb	wzr, [x19,-62]
+	str	xzr, [x19,-48]
+	lsl	w0, w0, 9
+	bl	ftl_malloc
+	str	x0, [x19,-56]
+	ldrb	w0, [x20,2816]
+	lsl	w0, w0, 1
+	bl	ftl_malloc
+	str	x0, [x19,-40]
+	cmp	w21, 32
+	bne	.L511
+	strb	w21, [x20,2818]
+	mov	w0, -1
+	strb	wzr, [x20,2817]
+	strb	w0, [x20,2752]
+	ldp	x21, x22, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	buf_init, .-buf_init
+	.align	2
+	.global	buf_reinit
+	.type	buf_reinit, %function
+buf_reinit:
+	adrp	x0, .LANCHOR0
+	mov	w2, 0
+	add	x1, x0, :lo12:.LANCHOR0
+	add	x1, x1, 768
+.L514:
+	uxtb	w3, w2
+	add	w2, w2, 1
+	add	w4, w3, 1
+	strb	w3, [x1,1]
+	strb	w4, [x1]
+	cmp	w2, 32
+	strb	wzr, [x1,2]
+	add	x1, x1, 64
+	str	xzr, [x1,-48]
+	bne	.L514
+	add	x0, x0, :lo12:.LANCHOR0
+	mov	w1, -1
+	strb	wzr, [x0,2817]
+	strb	w1, [x0,2752]
+	strb	w2, [x0,2818]
+	ret
+	.size	buf_reinit, .-buf_reinit
+	.align	2
+	.global	buf_add_tail
+	.type	buf_add_tail, %function
+buf_add_tail:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x20, x0
+	mov	w0, -1
+	strb	w0, [x1]
+	mov	x19, x1
+	ldrb	w1, [x20]
+	cmp	w1, 255
+	bne	.L522
+	ldrb	w0, [x19,1]
+	cmp	w0, 255
+	bne	.L518
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1024
+	mov	w2, 74
+	bl	printk
+.L518:
+	ldrb	w0, [x19,1]
+	strb	w0, [x20]
+	b	.L516
+.L522:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 768
+.L523:
+	mov	w20, w1
+	sbfiz	x1, x1, 6, 32
+	ldrb	w1, [x0,x1]
+	cmp	w1, 255
+	bne	.L523
+	ldrb	w0, [x19,1]
+	cmp	w0, 255
+	bne	.L520
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1024
+	mov	w2, 81
+	bl	printk
+.L520:
+	adrp	x0, .LANCHOR0
+	sbfiz	x20, x20, 6, 32
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x19,1]
+	add	x0, x0, 768
+	strb	w1, [x0,x20]
+.L516:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	buf_add_tail, .-buf_add_tail
+	.align	2
+	.global	buf_free
+	.type	buf_free, %function
+buf_free:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	ldrb	w1, [x0,2]
+	and	w1, w1, 8
+	uxtb	w1, w1
+	strb	w1, [x0,2]
+	cbz	w1, .L525
+	mov	x1, x0
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x0, x0, 2817
+	bl	buf_add_tail
+	b	.L526
+.L525:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrb	w2, [x1,2817]
+	strb	w2, [x0]
+	ldrb	w0, [x0,1]
+	strb	w0, [x1,2817]
+.L526:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x19,2818]
+	add	w0, w0, 1
+	strb	w0, [x19,2818]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	buf_free, .-buf_free
+	.align	2
+	.global	buf_alloc
+	.type	buf_alloc, %function
+buf_alloc:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	add	x20, x1, :lo12:.LANCHOR0
+	str	x21, [sp,32]
+	uxtb	w21, w0
+	mov	x19, x1
+	ldrb	w0, [x20,2818]
+	cbz	w0, .L528
+.L531:
+	add	x1, x19, :lo12:.LANCHOR0
+	add	x0, x1, 768
+	ldrb	w2, [x1,2817]
+	add	x0, x0, x2, lsl 6
+	cbz	w21, .L529
+	b	.L530
+.L528:
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1040
+	mov	w2, 121
+	bl	printk
+	ldrb	w1, [x20,2818]
+	cbnz	w1, .L531
+.L533:
+	mov	x0, 0
+	b	.L532
+.L529:
+	ldrb	w1, [x1,2818]
+	cmp	w1, 1
+	beq	.L533
+.L530:
+	add	x1, x19, :lo12:.LANCHOR0
+	lsl	x2, x2, 6
+	add	x4, x1, 768
+	add	x3, x4, x2
+	ldrb	w5, [x4,x2]
+	strb	w5, [x1,2817]
+	ldrb	w5, [x1,2818]
+	strh	wzr, [x3,50]
+	sub	w5, w5, #1
+	strb	w5, [x1,2818]
+	mov	w1, 1
+	strb	w1, [x3,2]
+	mov	w1, -1
+	str	xzr, [x3,16]
+	strb	w1, [x4,x2]
+	mov	w1, -1
+	str	w1, [x3,36]
+.L532:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	buf_alloc, .-buf_alloc
+	.align	2
+	.global	buf_remove_buf
+	.type	buf_remove_buf, %function
+buf_remove_buf:
+	ldrb	w4, [x1,1]
+	ldrb	w2, [x0]
+	cmp	w4, w2
+	bne	.L540
+	ldrb	w1, [x1]
+	strb	w1, [x0]
+	b	.L544
+.L540:
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 768
+.L542:
+	cmp	w2, 255
+	beq	.L545
+	mov	w3, w2
+	sbfiz	x2, x2, 6, 32
+	ldrb	w2, [x0,x2]
+	cmp	w2, w4
+	bne	.L542
+	sbfiz	x3, x3, 6, 32
+	ldrb	w2, [x1]
+	strb	w2, [x0,x3]
+	mov	w0, -1
+	strb	w0, [x1]
+.L544:
+	mov	w0, 1
+	b	.L539
+.L545:
+	mov	w0, 0
+.L539:
+	ret
+	.size	buf_remove_buf, .-buf_remove_buf
+	.align	2
+	.global	buf_remove_free
+	.type	buf_remove_free, %function
+buf_remove_free:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	mov	x20, x0
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2818]
+	cbnz	w0, .L547
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1056
+	mov	w2, 170
+	bl	printk
+.L547:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x19,2818]
+	cbz	w0, .L546
+	add	x0, x19, 2817
+	mov	x1, x20
+	bl	buf_remove_buf
+	cmp	w0, 1
+	bne	.L546
+	ldrb	w0, [x19,2818]
+	sub	w0, w0, #1
+	strb	w0, [x19,2818]
+	ldrb	w0, [x20,2]
+	orr	w0, w0, 1
+	strb	w0, [x20,2]
+.L546:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	buf_remove_free, .-buf_remove_free
+	.align	2
+	.global	flash_check_bad_block
+	.type	flash_check_bad_block, %function
+flash_check_bad_block:
+	adrp	x2, .LANCHOR2
+	uxtb	w0, w0
+	add	x2, x2, :lo12:.LANCHOR2
+	add	x2, x2, 376
+	ldrb	w3, [x2,13]
+	ldrh	w2, [x2,14]
+	mul	w2, w3, w2
+	ubfx	x3, x1, 5, 27
+	uxth	w2, w2
+	add	w2, w2, 31
+	asr	w2, w2, 5
+	lsl	w2, w2, 2
+	mul	w2, w0, w2
+	adrp	x0, .LANCHOR0+192
+	sxtw	x2, w2
+	ldr	x0, [x0,#:lo12:.LANCHOR0+192]
+	add	x2, x2, 912
+	add	x2, x0, x2
+	ldr	w0, [x2,x3,lsl 2]
+	lsr	w0, w0, w1
+	and	w0, w0, 1
+	ret
+	.size	flash_check_bad_block, .-flash_check_bad_block
+	.align	2
+	.global	flash_mask_bad_block
+	.type	flash_mask_bad_block, %function
+flash_mask_bad_block:
+	stp	x29, x30, [sp, -48]!
+	adrp	x3, .LANCHOR2
+	add	x29, sp, 0
+	add	x3, x3, :lo12:.LANCHOR2
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	uxtb	w19, w0
+	mov	w21, w1
+	mov	w1, w19
+	ldrb	w0, [x3,389]
+	mov	w2, w21
+	ldrh	w20, [x3,390]
+	mul	w20, w0, w20
+	adrp	x0, .LC46
+	add	x0, x0, :lo12:.LC46
+	uxth	w20, w20
+	add	w20, w20, 31
+	bl	printk
+	asr	w20, w20, 5
+	adrp	x0, .LANCHOR0+192
+	lsl	w20, w20, 2
+	ubfx	x3, x21, 5, 27
+	lsl	x3, x3, 2
+	mul	w19, w19, w20
+	ldr	x0, [x0,#:lo12:.LANCHOR0+192]
+	sxtw	x19, w19
+	add	x19, x19, 912
+	add	x19, x0, x19
+	mov	w0, 1
+	lsl	w1, w0, w21
+	ldr	w0, [x19,x3]
+	orr	w1, w0, w1
+	str	w1, [x19,x3]
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	flash_mask_bad_block, .-flash_mask_bad_block
+	.align	2
+	.global	str2hex
+	.type	str2hex, %function
+str2hex:
+	ldrb	w1, [x0]
+	cmp	w1, 48
+	bne	.L554
+	ldrb	w1, [x0,1]
+	add	x2, x0, 2
+	and	w1, w1, -33
+	uxtb	w1, w1
+	cmp	w1, 88
+	csel	x0, x0, x2, ne
+.L554:
+	ldrb	w1, [x0]
+	and	w1, w1, -33
+	uxtb	w1, w1
+	cmp	w1, 88
+	mov	w1, 0
+	csinc	x0, x0, x0, ne
+.L556:
+	ldrb	w2, [x0]
+	cbz	w2, .L563
+	sub	w3, w2, #48
+	uxtb	w3, w3
+	cmp	w3, 9
+	bhi	.L557
+	add	w1, w2, w1, lsl 4
+	sub	w1, w1, #48
+	b	.L558
+.L557:
+	sub	w3, w2, #97
+	uxtb	w3, w3
+	cmp	w3, 5
+	bhi	.L559
+	add	w1, w2, w1, lsl 4
+	sub	w1, w1, #87
+	b	.L558
+.L559:
+	sub	w3, w2, #65
+	uxtb	w3, w3
+	cmp	w3, 5
+	bhi	.L563
+	add	w1, w2, w1, lsl 4
+	sub	w1, w1, #55
+.L558:
+	add	x0, x0, 1
+	b	.L556
+.L563:
+	mov	w0, w1
+	ret
+	.size	str2hex, .-str2hex
+	.align	2
+	.global	zftl_proc_debug_init
+	.type	zftl_proc_debug_init, %function
+zftl_proc_debug_init:
+	stp	x29, x30, [sp, -16]!
+	adrp	x3, .LANCHOR1
+	mov	x2, 0
+	adrp	x0, .LC47
+	add	x3, x3, :lo12:.LANCHOR1
+	add	x29, sp, 0
+	mov	w1, 292
+	add	x3, x3, 1072
+	mov	x4, x2
+	add	x0, x0, :lo12:.LC47
+	bl	proc_create_data
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_proc_debug_init, .-zftl_proc_debug_init
+	.align	2
+	.global	ftl_print_info_to_buf
+	.type	ftl_print_info_to_buf, %function
+ftl_print_info_to_buf:
+	stp	x29, x30, [sp, -48]!
+	adrp	x1, .LC1
+	adrp	x2, .LC2
+	add	x29, sp, 0
+	add	x1, x1, :lo12:.LC1
+	add	x2, x2, :lo12:.LC2
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	x20, x0
+	bl	sprintf
+	adrp	x21, .LANCHOR0
+	adrp	x7, .LANCHOR2
+	adrp	x1, .LC48
+	add	x7, x7, :lo12:.LANCHOR2
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x7, x7, 376
+	add	x19, x20, x0, sxtw
+	add	x1, x1, :lo12:.LC48
+	mov	x0, x19
+	ldrb	w5, [x7,4]
+	ldrb	w6, [x7,5]
+	ldrb	w3, [x7,2]
+	ldrb	w4, [x7,3]
+	ldrb	w2, [x7,1]
+	ldrb	w7, [x7,6]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	w2, [x21,4]
+	adrp	x1, .LC49
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC49
+	lsr	w2, w2, 11
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	w2, [x21,2820]
+	adrp	x1, .LC50
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC50
+	lsr	w2, w2, 11
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	adrp	x1, .LC51
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC51
+	add	x19, x19, 10
+	bl	strcpy
+	ldr	w2, [x21,2824]
+	adrp	x1, .LC52
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC52
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	w2, [x21,4]
+	adrp	x1, .LC53
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC53
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,80]
+	adrp	x1, .LC54
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC54
+	ldr	w2, [x2,524]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,80]
+	adrp	x1, .LC55
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC55
+	ldr	w2, [x2,528]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2828]
+	adrp	x1, .LC56
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC56
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2830]
+	adrp	x1, .LC57
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC57
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2832]
+	adrp	x1, .LC58
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC58
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2834]
+	adrp	x1, .LC59
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC59
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2836]
+	adrp	x1, .LC60
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC60
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2838]
+	adrp	x1, .LC61
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC61
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrb	w4, [x21,2841]
+	adrp	x1, .LC62
+	ldrb	w2, [x21,2818]
+	mov	x0, x19
+	ldrb	w3, [x21,2840]
+	add	x1, x1, :lo12:.LC62
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x3, [x21,2848]
+	adrp	x1, .LC63
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC63
+	ldrh	w2, [x3,148]
+	ldrh	w3, [x3,146]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x0, [x21,2848]
+	adrp	x1, .LC64
+	add	x1, x1, :lo12:.LC64
+	ldr	w3, [x0,16]
+	ldr	w2, [x0,20]
+	mov	x0, x19
+	add	w2, w2, w3, lsr 11
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x0, [x21,2848]
+	adrp	x1, .LC65
+	add	x1, x1, :lo12:.LC65
+	ldr	w3, [x0,24]
+	ldr	w2, [x0,28]
+	mov	x0, x19
+	add	w2, w2, w3, lsr 11
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,2848]
+	adrp	x1, .LC66
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC66
+	ldr	w2, [x2,64]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,2848]
+	adrp	x1, .LC67
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC67
+	ldr	w2, [x2,68]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x0, [x21,80]
+	mov	w2, 10
+	adrp	x1, .LC68
+	add	x1, x1, :lo12:.LC68
+	ldr	w3, [x0,12]
+	mov	x0, x19
+	udiv	w2, w3, w2
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrb	w2, [x21,97]
+	adrp	x1, .LC69
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC69
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,80]
+	adrp	x1, .LC70
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC70
+	ldr	w2, [x2,556]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,80]
+	adrp	x1, .LC71
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC71
+	ldr	w2, [x2,552]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,2848]
+	adrp	x1, .LC72
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC72
+	ldr	w2, [x2,52]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,2848]
+	adrp	x1, .LC73
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC73
+	ldr	w2, [x2,60]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,2848]
+	adrp	x1, .LC74
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC74
+	ldr	w2, [x2,76]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x2, [x21,2848]
+	adrp	x1, .LC75
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC75
+	ldr	w2, [x2,8]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x4, [x21,80]
+	adrp	x1, .LC76
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC76
+	ldrh	w2, [x4,16]
+	ldrh	w3, [x4,22]
+	ldrb	w4, [x4,25]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x4, [x21,80]
+	adrp	x1, .LC77
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC77
+	ldrh	w2, [x4,48]
+	ldrh	w3, [x4,54]
+	ldrb	w4, [x4,57]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x4, [x21,80]
+	adrp	x1, .LC78
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC78
+	ldrh	w2, [x4,80]
+	ldrh	w3, [x4,86]
+	ldrb	w4, [x4,89]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x6, [x21,2848]
+	adrp	x1, .LC79
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC79
+	ldrh	w2, [x6,74]
+	ldr	w3, [x6,84]
+	ldrh	w4, [x6,88]
+	ldrh	w5, [x6,92]
+	ldrh	w6, [x6,96]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldr	x6, [x21,2848]
+	adrp	x1, .LC80
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC80
+	ldr	w3, [x6,80]
+	ldrh	w4, [x6,90]
+	ldrh	w5, [x6,94]
+	ldrh	w2, [x6,72]
+	ldrh	w6, [x6,98]
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2856]
+	adrp	x1, .LC81
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC81
+	bl	sprintf
+	add	x19, x19, x0, sxtw
+	ldrh	w2, [x21,2858]
+	adrp	x1, .LC82
+	ldrh	w3, [x21,2860]
+	mov	x0, x19
+	ldrh	w4, [x21,2862]
+	add	x1, x1, :lo12:.LC82
+	ldrh	w5, [x21,2864]
+	bl	sprintf
+	add	x0, x19, x0, sxtw
+	ldr	x21, [sp,32]
+	sub	w0, w0, w20
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_print_info_to_buf, .-ftl_print_info_to_buf
+	.align	2
+	.global	zftl_proc_ftl_read
+	.type	zftl_proc_ftl_read, %function
+zftl_proc_ftl_read:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	ftl_print_info_to_buf
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_proc_ftl_read, .-zftl_proc_ftl_read
+	.align	2
+	.global	ftl_gc_write_buf
+	.type	ftl_gc_write_buf, %function
+ftl_gc_write_buf:
+	stp	x29, x30, [sp, -32]!
+	mov	x1, x0
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2]
+	orr	w0, w0, 2
+	strb	w0, [x1,2]
+	add	x0, x19, 2866
+	bl	buf_add_tail
+	ldrb	w0, [x19,2840]
+	add	w0, w0, 1
+	uxtb	w0, w0
+	strb	w0, [x19,2840]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_gc_write_buf, .-ftl_gc_write_buf
+	.align	2
+	.global	ftl_read_buf
+	.type	ftl_read_buf, %function
+ftl_read_buf:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	mov	w20, w0
+	add	x0, x19, :lo12:.LANCHOR0
+	str	x21, [sp,32]
+	mov	x21, x1
+	ldr	w0, [x0,2824]
+	cmp	w20, w0
+	bcc	.L569
+	adrp	x2, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x2, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1288
+	mov	w2, 887
+	bl	printk
+.L569:
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w2, 0
+	add	x3, x3, 768
+.L573:
+	ldr	w0, [x3,36]
+	cmp	w0, w20
+	bne	.L570
+	ldrb	w0, [x3,2]
+	tbz	x0, 3, .L570
+	add	x19, x19, :lo12:.LANCHOR0
+	ubfiz	x2, x2, 6, 32
+	add	x19, x19, 768
+	orr	w1, w0, 4
+	add	x19, x19, x2
+	strb	w1, [x19,2]
+	tbnz	x0, 0, .L571
+	mov	x0, x19
+	bl	buf_remove_free
+.L571:
+	mov	x0, x19
+	b	.L572
+.L570:
+	add	w2, w2, 1
+	add	x3, x3, 64
+	cmp	w2, 32
+	bne	.L573
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	x0, 0
+	ldr	w1, [x19,2868]
+	cmn	w1, #1
+	bne	.L572
+	str	w20, [x19,2868]
+	str	x21, [x19,2872]
+.L572:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_read_buf, .-ftl_read_buf
+	.align	2
+	.global	ftl_read_buf_free
+	.type	ftl_read_buf_free, %function
+ftl_read_buf_free:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	adrp	x0, .LANCHOR0
+	mov	x1, x19
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 2880
+	bl	buf_remove_buf
+	ldrb	w0, [x19,2]
+	tbz	x0, 1, .L580
+	and	w0, w0, -5
+	strb	w0, [x19,2]
+	b	.L579
+.L580:
+	mov	x0, x19
+	bl	buf_free
+.L579:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_read_buf_free, .-ftl_read_buf_free
+	.align	2
+	.global	gc_hook
+	.type	gc_hook, %function
+gc_hook:
+	ret
+	.size	gc_hook, .-gc_hook
+	.align	2
+	.global	gc_add_sblk
+	.type	gc_add_sblk, %function
+gc_add_sblk:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	stp	x23, x24, [sp,48]
+	uxth	w23, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	uxth	w21, w1
+	uxth	w22, w2
+	ldrh	w0, [x0,56]
+	cmp	w0, w23
+	bhi	.L584
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1304
+	mov	w2, 252
+	bl	printk
+.L584:
+	add	x6, x20, :lo12:.LANCHOR0
+	uxtw	x19, w23
+	lsl	x25, x19, 1
+	adrp	x24, .LANCHOR2
+	ldr	x0, [x6,72]
+	ldrh	w26, [x0,x25]
+	ldr	w0, [x24,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L585
+	ldr	x0, [x6,64]
+	mov	w1, w23
+	ldrh	w5, [x6,2944]
+	mov	w2, w21
+	add	x0, x0, x19, lsl 2
+	ldrh	w6, [x6,2862]
+	mov	w4, w26
+	ldrb	w3, [x0,2]
+	adrp	x0, .LC83
+	add	x0, x0, :lo12:.LC83
+	ubfx	x3, x3, 5, 3
+	bl	printk
+.L585:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	x0, [x1,64]
+	add	x0, x0, x19, lsl 2
+	ldrb	w19, [x0,2]
+	ands	w19, w19, 224
+	bne	.L586
+	cbz	w26, .L587
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 257
+	add	x1, x1, 1304
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	b	.L587
+.L586:
+	ldrh	w2, [x1,2888]
+	add	x3, x1, 2888
+	mov	w19, 0
+	cmp	w2, w23
+	beq	.L587
+	ldr	x1, [x1,80]
+	ldrh	w2, [x1,48]
+	cmp	w2, w23
+	beq	.L587
+	ldrh	w2, [x1,16]
+	cmp	w2, w23
+	beq	.L587
+	ldrh	w2, [x1,80]
+	cmp	w2, w23
+	beq	.L587
+	ldrh	w5, [x3,56]
+	mov	x2, 0
+.L588:
+	cmp	w5, w2
+	bls	.L611
+	add	x2, x2, 1
+	add	x4, x3, x2, lsl 1
+	ldrh	w4, [x4,56]
+	cmp	w4, w23
+	bne	.L588
+	mov	w19, 0
+	b	.L587
+.L611:
+	add	x19, x1, 392
+	cbnz	w21, .L591
+	sxtw	x3, w22
+	add	x3, x1, x3, lsl 7
+	add	x19, x3, 136
+.L591:
+	ldr	w1, [x24,#:lo12:.LANCHOR2]
+	tbz	x1, 8, .L592
+	add	x6, x20, :lo12:.LANCHOR0
+	ldrb	w3, [x0,2]
+	adrp	x0, .LC83
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC83
+	mov	w2, w21
+	ldr	x4, [x6,72]
+	ubfx	x3, x3, 5, 3
+	ldrh	w6, [x6,2862]
+	ldrh	w4, [x4,x25]
+	bl	printk
+.L592:
+	mov	x3, x19
+	add	x0, x19, 128
+	mov	w1, 65535
+.L595:
+	ldrh	w2, [x3]
+	cmp	w2, w1
+	bne	.L593
+	strh	w23, [x3]
+	add	x20, x20, :lo12:.LANCHOR0
+	cbz	w21, .L594
+	ldr	x1, [x20,80]
+	ldrh	w0, [x1,124]
+	add	w0, w0, 1
+	strh	w0, [x1,124]
+	b	.L610
+.L594:
+	ldr	x0, [x20,80]
+	add	x22, x0, x22, uxth 1
+	ldrh	w0, [x22,120]
+	add	w0, w0, 1
+	strh	w0, [x22,120]
+.L610:
+	mov	w19, 1
+	b	.L587
+.L593:
+	add	x3, x3, 2
+	cmp	x3, x0
+	bne	.L595
+	b	.L610
+.L587:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	gc_add_sblk, .-gc_add_sblk
+	.align	2
+	.global	gc_get_src_ppa_from_index
+	.type	gc_get_src_ppa_from_index, %function
+gc_get_src_ppa_from_index:
+	adrp	x1, .LANCHOR0+3216
+	ubfiz	x0, x0, 2, 16
+	ldr	x1, [x1,#:lo12:.LANCHOR0+3216]
+	ldr	w0, [x1,x0]
+	ret
+	.size	gc_get_src_ppa_from_index, .-gc_get_src_ppa_from_index
+	.align	2
+	.global	gc_write_completed
+	.type	gc_write_completed, %function
+gc_write_completed:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	adrp	x22, .LANCHOR1
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LANCHOR1
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	add	x23, x21, 768
+	add	x22, x22, 1320
+.L614:
+	ldrb	w0, [x21,3224]
+	adrp	x19, .LANCHOR0
+	cmp	w0, 255
+	beq	.L636
+	sxtw	x25, w0
+	lsl	x0, x25, 6
+	add	x2, x23, x0
+	ldrb	w0, [x23,x0]
+	ldr	w1, [x2,52]
+	strb	w0, [x21,3224]
+	ldrh	w24, [x2,48]
+	cbz	w1, .L615
+	ldr	w2, [x2,40]
+	adrp	x0, .LC84
+	mov	w3, 1
+	add	x0, x0, :lo12:.LC84
+	str	w2, [x21,3208]
+	strh	w3, [x21,3206]
+	bl	printk
+	adrp	x0, .LC0
+	mov	x1, x22
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 519
+	bl	printk
+.L615:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w20, 1
+	ldrb	w1, [x0,3225]
+	cmp	w1, 3
+	bne	.L616
+	ldr	x0, [x0,80]
+	ldrb	w20, [x0,89]
+	add	w20, w20, w20, lsl 1
+	and	w20, w20, 1023
+.L616:
+	adrp	x0, .LANCHOR2
+	uxth	x26, w24
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L617
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, w24
+	add	x2, x0, x25, lsl 6
+	mov	w3, w24
+	ldr	x4, [x0,3232]
+	adrp	x0, .LC85
+	ldrb	w2, [x2,769]
+	add	x0, x0, :lo12:.LC85
+	ldrb	w4, [x4,x26]
+	bl	printk
+.L617:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x0,3232]
+	add	x0, x0, x25, lsl 6
+	ldrb	w1, [x1,x26]
+	ldrb	w0, [x0,769]
+	cmp	w1, w0
+	beq	.L618
+	adrp	x0, .LC0
+	mov	x1, x22
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 526
+	bl	printk
+.L618:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x1, x2, 768
+	add	x0, x1, x25, lsl 6
+	ldrb	w0, [x0,61]
+	cmp	w0, 3
+	beq	.L619
+	ldrb	w0, [x2,3225]
+	cmp	w0, 3
+	bne	.L619
+	ldrb	w0, [x2,3240]
+	cbnz	w0, .L619
+	ldr	x3, [x2,3232]
+	b	.L620
+.L619:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w25, 0
+	mov	w26, -1
+	add	x27, x19, 768
+	strh	w24, [x19,3204]
+.L621:
+	cmp	w20, w25, uxth
+	bls	.L614
+	add	w1, w25, w24
+	ldr	x2, [x19,3232]
+	add	w25, w25, 1
+	ldrb	w0, [x2,x1]
+	strb	w26, [x2,x1]
+	sbfiz	x0, x0, 6, 32
+	add	x0, x27, x0
+	strb	wzr, [x0,61]
+	bl	buf_free
+	ldrb	w0, [x19,2895]
+	sub	w0, w0, #1
+	strb	w0, [x19,2895]
+	b	.L621
+.L620:
+	cmp	w20, w0, uxth
+	bls	.L614
+	add	w2, w0, w24
+	add	w0, w0, 1
+	ldrb	w2, [x3,x2]
+	add	x2, x1, x2, lsl 6
+	strb	wzr, [x2,61]
+	b	.L620
+.L636:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	gc_write_completed, .-gc_write_completed
+	.align	2
+	.global	gc_get_src_blk
+	.type	gc_get_src_blk, %function
+gc_get_src_blk:
+	adrp	x3, .LANCHOR0
+	add	x0, x3, :lo12:.LANCHOR0
+	ldr	x1, [x0,80]
+	ldrb	w0, [x0,3241]
+	ldrh	w4, [x1,124]
+	cbz	w4, .L638
+	add	x1, x1, 392
+	mov	w2, 1
+	b	.L639
+.L638:
+	sxtw	x2, w0
+	add	x0, x1, x2, lsl 1
+	ldrh	w5, [x0,120]
+	mov	w0, 65535
+	cbz	w5, .L640
+	add	x1, x1, x2, lsl 7
+	mov	w2, w4
+	add	x1, x1, 136
+.L639:
+	add	x4, x1, 128
+	mov	w5, 65535
+.L643:
+	ldrh	w0, [x1]
+	cmp	w0, w5
+	beq	.L641
+	mov	w4, -1
+	strh	w4, [x1]
+	add	x3, x3, :lo12:.LANCHOR0
+	cbz	w2, .L642
+	ldr	x2, [x3,80]
+	ldrh	w1, [x2,124]
+	sub	w1, w1, #1
+	strh	w1, [x2,124]
+	b	.L640
+.L642:
+	ldrb	w1, [x3,3241]
+	ldr	x2, [x3,80]
+	add	x1, x2, x1, lsl 1
+	ldrh	w2, [x1,120]
+	sub	w2, w2, #1
+	strh	w2, [x1,120]
+	b	.L640
+.L641:
+	add	x1, x1, 2
+	cmp	x1, x4
+	bne	.L643
+.L640:
+	ret
+	.size	gc_get_src_blk, .-gc_get_src_blk
+	.align	2
+	.global	gc_free_temp_buf
+	.type	gc_free_temp_buf, %function
+gc_free_temp_buf:
+	stp	x29, x30, [sp, -64]!
+	mov	w0, 0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	str	x21, [sp,32]
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrb	w3, [x2,2895]
+	cbz	w3, .L648
+	ldrb	w3, [x2,2818]
+	cmp	w3, 1
+	bhi	.L648
+	ldrh	w4, [x2,3242]
+	mov	x20, x2
+	ldrb	w0, [x2,3244]
+	add	x2, x2, 768
+	ldrh	w1, [x2,2436]
+	mul	w0, w4, w0
+	add	w3, w1, 24
+	ldr	x4, [x2,2464]
+	cmp	w0, w3
+	csel	w3, w0, w3, ls
+.L649:
+	cmp	w1, w3
+	bcs	.L662
+	uxtw	x21, w1
+	ldrb	w0, [x4,x21]
+	cmp	w0, 255
+	beq	.L650
+	sbfiz	x0, x0, 6, 32
+	add	x0, x2, x0
+	ldrb	w5, [x0,61]
+	cbnz	w5, .L650
+	str	x1, [x29,56]
+	bl	buf_free
+	adrp	x0, .LANCHOR2
+	ldr	x1, [x29,56]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L651
+	ldr	x2, [x20,3232]
+	adrp	x0, .LC86
+	add	x0, x0, :lo12:.LC86
+	ldrb	w2, [x2,x21]
+	bl	printk
+.L651:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, -1
+	ldr	x0, [x19,3232]
+	strb	w1, [x0,x21]
+	ldrb	w0, [x19,2895]
+	sub	w0, w0, #1
+	strb	w0, [x19,2895]
+	mov	w0, 1
+	b	.L648
+.L650:
+	add	w1, w1, 1
+	b	.L649
+.L662:
+	mov	w0, 0
+.L648:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	gc_free_temp_buf, .-gc_free_temp_buf
+	.align	2
+	.global	print_gc_debug_info
+	.type	print_gc_debug_info, %function
+print_gc_debug_info:
+	adrp	x6, .LANCHOR0
+	adrp	x0, .LC87
+	add	x6, x6, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC87
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrh	w1, [x6,2888]
+	ldrh	w2, [x6,2890]
+	ldrh	w3, [x6,3202]
+	ldrb	w4, [x6,2818]
+	ldrb	w5, [x6,2895]
+	ldrh	w6, [x6,2856]
+	bl	printk
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	print_gc_debug_info, .-print_gc_debug_info
+	.align	2
+	.global	zftl_get_gc_node
+	.type	zftl_get_gc_node, %function
+zftl_get_gc_node:
+	stp	x29, x30, [sp, -16]!
+	uxth	w1, w1
+	adrp	x2, .LANCHOR0
+	cmp	w1, 5
+	add	x29, sp, 0
+	uxth	w3, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	bne	.L665
+	ldr	x0, [x2,3248]
+	b	.L668
+.L665:
+	cmp	w1, 2
+	bne	.L667
+	ldr	x0, [x2,3256]
+	b	.L668
+.L667:
+	ldr	x0, [x2,3264]
+.L668:
+	mov	w1, w3
+	bl	_list_get_gc_head_node.isra.5
+	uxth	w0, w0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_get_gc_node, .-zftl_get_gc_node
+	.align	2
+	.global	gc_search_src_blk
+	.type	gc_search_src_blk, %function
+gc_search_src_blk:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	uxtb	w24, w1
+	uxtb	w22, w2
+	ldr	x1, [x0,80]
+	add	x1, x1, x21, sxtw 1
+	ldrh	w19, [x1,120]
+	cbnz	w19, .L714
+	cbnz	w21, .L672
+	adrp	x26, .LC88
+	strh	w21, [x0,3272]
+	mov	w19, w21
+	mov	w25, w21
+	uxth	w23, w22
+	mov	w27, 65535
+	adrp	x28, .LANCHOR2
+	add	x26, x26, :lo12:.LC88
+.L673:
+	cmp	w25, w23
+	bcs	.L678
+	add	x3, x20, :lo12:.LANCHOR0
+	mov	w1, 3
+	str	x3, [x29,96]
+	ldrh	w2, [x3,3272]
+	str	x2, [x29,104]
+	mov	w0, w2
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	ldr	x2, [x29,104]
+	cmp	w1, w27
+	ldr	x3, [x29,96]
+	mov	w4, w1
+	add	w2, w2, 1
+	uxth	w2, w2
+	strh	w2, [x3,3272]
+	beq	.L674
+	ldr	w0, [x28,#:lo12:.LANCHOR2]
+	uxtw	x5, w1
+	tbz	x0, 8, .L675
+	ldr	x3, [x3,72]
+	mov	x0, x26
+	str	x4, [x29,96]
+	str	x5, [x29,104]
+	ldrh	w3, [x3,x5,lsl 1]
+	bl	printk
+	ldr	x4, [x29,96]
+	ldr	x5, [x29,104]
+.L675:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	x0, [x1,72]
+	ldrh	w2, [x0,x5,lsl 1]
+	ldrh	w0, [x1,2862]
+	cmp	w2, w0
+	bcs	.L676
+	mov	w1, 0
+	mov	w0, w4
+	mov	w2, w1
+	bl	gc_add_sblk
+	cbz	w0, .L677
+	add	w19, w19, 1
+	uxth	w19, w19
+	cmp	w19, w23
+	bls	.L677
+	b	.L678
+.L676:
+	strh	wzr, [x1,3272]
+	b	.L678
+.L674:
+	strh	wzr, [x3,3272]
+	b	.L678
+.L677:
+	add	w25, w25, 1
+	uxth	w25, w25
+	b	.L673
+.L678:
+	tbz	x24, 1, .L680
+	mov	w26, 0
+	mov	w27, 65535
+.L681:
+	cmp	w26, w23
+	beq	.L685
+	add	x25, x20, :lo12:.LANCHOR0
+	mov	w1, 5
+	ldrh	w28, [x25,3274]
+	mov	w0, w28
+	add	w28, w28, 1
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	strh	w28, [x25,3274]
+	cmp	w1, w27
+	beq	.L682
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x25,72]
+	ldrh	w2, [x2,x1]
+	ldrh	w1, [x25,2864]
+	cmp	w2, w1
+	bcs	.L683
+	mov	w1, 0
+	mov	w2, w1
+	bl	gc_add_sblk
+	cbz	w0, .L684
+	add	w19, w19, 1
+	uxth	w19, w19
+	cmp	w19, w23
+	bls	.L684
+	b	.L687
+.L683:
+	strh	wzr, [x25,3274]
+	b	.L685
+.L682:
+	strh	wzr, [x25,3272]
+	b	.L685
+.L684:
+	add	w26, w26, 1
+	uxth	w26, w26
+	b	.L681
+.L685:
+	cmp	w19, w23
+	bcs	.L687
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x1,3276]
+	ldrb	w4, [x1,3244]
+	lsr	w3, w0, 3
+	ldrh	w2, [x1,2864]
+	mul	w0, w0, w4
+	sub	w0, w0, w3
+	cmp	w2, w0
+	bge	.L680
+	add	w2, w3, w2
+	strh	w2, [x1,2864]
+	b	.L680
+.L687:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x1,2864]
+	ldrh	w0, [x1,3276]
+	cmp	w2, w0
+	bls	.L680
+	sub	w0, w2, w0, lsr 3
+	strh	w0, [x1,2864]
+.L680:
+	tbz	x24, 0, .L688
+	cmp	w19, w23
+	bcs	.L688
+	mov	w25, 64
+	mov	w27, 65535
+.L692:
+	add	x26, x20, :lo12:.LANCHOR0
+	ldrh	w28, [x26,3278]
+	ldr	x0, [x26,3256]
+	mov	w1, w28
+	add	w28, w28, 1
+	bl	_list_get_gc_head_node.isra.5
+	strh	w28, [x26,3278]
+	cmp	w27, w0, uxth
+	beq	.L689
+	mov	w1, 0
+	mov	w2, w1
+	bl	gc_add_sblk
+	cbz	w0, .L690
+	add	w19, w19, 1
+	uxth	w19, w19
+	cmp	w19, w23
+	bcc	.L690
+	b	.L693
+.L689:
+	strh	wzr, [x26,3278]
+	b	.L691
+.L690:
+	sub	w25, w25, #1
+	uxth	w25, w25
+	cbnz	w25, .L692
+.L691:
+	cmp	w19, w23
+	bcs	.L693
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x20,2862]
+	ldrh	w1, [x20,3276]
+	cmp	w1, w0
+	bls	.L688
+	add	w0, w0, 8
+	b	.L771
+.L693:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x20,3276]
+	ldrh	w0, [x20,2862]
+	cmp	w0, w1, lsr 1
+	bls	.L688
+	sub	w0, w0, #8
+.L771:
+	strh	w0, [x20,2862]
+	b	.L688
+.L672:
+	and	w1, w24, 1
+	strh	w19, [x0,3278]
+	str	w1, [x29,104]
+	tbz	x24, 0, .L694
+	ldrh	w2, [x0,3280]
+	ldrh	w1, [x0,2836]
+	cmp	w1, w2, lsr 1
+	bcc	.L717
+	ldrh	w0, [x0,2834]
+	cmp	w0, w1
+	bls	.L696
+.L717:
+	mov	w23, 64
+	mov	w26, 65535
+	uxth	w27, w22
+.L748:
+	add	x28, x20, :lo12:.LANCHOR0
+	ldrh	w25, [x28,3278]
+	ldr	x0, [x28,3256]
+	mov	w1, w25
+	bl	_list_get_gc_head_node.isra.5
+	cmp	w26, w0, uxth
+	add	w2, w25, 1
+	strh	w2, [x28,3278]
+	beq	.L697
+	mov	w1, 0
+	mov	w2, w21
+	bl	gc_add_sblk
+	cbz	w0, .L698
+	add	w19, w19, 1
+	uxth	w19, w19
+	cmp	w19, w27
+	bcc	.L698
+	b	.L696
+.L697:
+	strh	wzr, [x28,3278]
+	b	.L696
+.L698:
+	sub	w23, w23, #1
+	uxth	w23, w23
+	cbnz	w23, .L748
+.L696:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x0,3280]
+	ldrh	w1, [x0,2836]
+	cmp	w1, w2, lsr 1
+	bls	.L694
+	strh	wzr, [x0,3272]
+	mov	w23, 64
+	mov	w26, 65535
+	uxth	w27, w22
+.L700:
+	add	x25, x20, :lo12:.LANCHOR0
+	mov	w1, 3
+	ldrh	w28, [x25,3272]
+	mov	w0, w28
+	add	w28, w28, 1
+	bl	zftl_get_gc_node
+	strh	w28, [x25,3272]
+	cmp	w26, w0, uxth
+	bne	.L772
+.L694:
+	tbz	x24, 1, .L701
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w25, 64
+	mov	w26, 0
+	mov	w27, 65535
+	uxth	w28, w22
+	strh	wzr, [x0,3274]
+.L706:
+	add	x23, x20, :lo12:.LANCHOR0
+	mov	w1, 5
+	ldrh	w2, [x23,3274]
+	str	x2, [x29,96]
+	mov	w0, w2
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	ldr	x2, [x29,96]
+	cmp	w1, w27
+	add	w2, w2, 1
+	strh	w2, [x23,3274]
+	beq	.L702
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x23,72]
+	ldrh	w2, [x2,x1]
+	ldrh	w1, [x23,2858]
+	cmp	w2, w1
+	bcs	.L703
+	mov	w1, 0
+	mov	w2, w21
+	bl	gc_add_sblk
+	cbz	w0, .L704
+	add	w19, w19, 1
+	add	w26, w26, 1
+	uxth	w19, w19
+	uxth	w26, w26
+	cmp	w19, w28
+	bcc	.L704
+	b	.L705
+.L703:
+	strh	wzr, [x23,3274]
+	b	.L705
+.L702:
+	strh	wzr, [x23,3272]
+	b	.L705
+.L704:
+	sub	w3, w25, #1
+	uxth	w25, w3
+	cbnz	w25, .L706
+.L705:
+	cmp	w19, w22
+	bcc	.L707
+	cbnz	w26, .L708
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2838]
+	ldrh	w0, [x0,3282]
+	cmp	w1, w0
+	bls	.L708
+.L707:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w3, [x0,3244]
+	ldrh	w2, [x0,3242]
+	ldrh	w1, [x0,2858]
+	mul	w2, w2, w3
+	ldrh	w3, [x0,3276]
+	sub	w2, w2, w3, lsr 3
+	cmp	w1, w2
+	bge	.L701
+	add	w1, w1, 4
+	b	.L770
+.L708:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x0,3276]
+	ldrb	w3, [x0,3244]
+	ldrh	w1, [x0,2858]
+	mul	w2, w2, w3
+	cmp	w1, w2
+	ble	.L701
+	sub	w1, w1, #4
+.L770:
+	strh	w1, [x0,2858]
+.L701:
+	ldr	w0, [x29,104]
+	cbz	w0, .L688
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w23, 64
+	mov	w25, 65535
+	uxth	w26, w22
+	strh	wzr, [x0,3274]
+.L712:
+	add	x27, x20, :lo12:.LANCHOR0
+	mov	w1, 3
+	ldrh	w0, [x27,3274]
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	cmp	w1, w25
+	beq	.L709
+	ldr	x2, [x27,72]
+	ubfiz	x1, x1, 1, 16
+	ldrh	w1, [x2,x1]
+	ldrh	w2, [x27,2860]
+	cmp	w2, w1
+	bls	.L719
+	cmp	w1, 2
+	bhi	.L710
+.L719:
+	mov	w1, 0
+	mov	w2, w21
+	bl	gc_add_sblk
+	cbz	w0, .L710
+	add	w19, w19, 1
+	uxth	w19, w19
+	cmp	w19, w26
+	bcs	.L709
+.L710:
+	sub	w23, w23, #1
+	uxth	w23, w23
+	cbnz	w23, .L712
+.L709:
+	cmp	w19, w22
+	add	x20, x20, :lo12:.LANCHOR0
+	bcs	.L713
+	ldrh	w1, [x20,3276]
+	ldrh	w0, [x20,2860]
+	cmp	w0, w1, lsr 1
+	bls	.L688
+	sub	w0, w0, #4
+	strh	w0, [x20,2860]
+	b	.L688
+.L713:
+	ldrh	w0, [x20,3276]
+	ldrb	w2, [x20,3244]
+	ldrh	w1, [x20,2860]
+	mul	w0, w0, w2
+	sub	w0, w0, #32
+	cmp	w1, w0
+	bge	.L688
+	add	w1, w1, 4
+	strh	w1, [x20,2860]
+.L688:
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L714
+	adrp	x0, .LC89
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC89
+	mov	w2, w24
+	mov	w3, w19
+	mov	w4, w22
+	bl	printk
+.L714:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+.L772:
+	mov	w1, 0
+	mov	w2, w21
+	bl	gc_add_sblk
+	cbz	w0, .L699
+	add	w19, w19, 1
+	uxth	w19, w19
+	cmp	w19, w27
+	bcs	.L694
+.L699:
+	sub	w23, w23, #1
+	uxth	w23, w23
+	cbnz	w23, .L700
+	b	.L694
+	.size	gc_search_src_blk, .-gc_search_src_blk
+	.align	2
+	.global	zftl_insert_free_list
+	.type	zftl_insert_free_list, %function
+zftl_insert_free_list:
+	adrp	x2, .LANCHOR0
+	uxth	w1, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x2,64]
+	add	x0, x0, x1, uxth 2
+	ldrb	w0, [x0,2]
+	ands	w0, w0, 24
+	bne	.L774
+	add	x0, x2, 3288
+	add	x2, x2, 2828
+	b	.L777
+.L774:
+	cmp	w0, 16
+	bne	.L776
+	add	x0, x2, 3296
+	add	x2, x2, 2830
+	b	.L777
+.L776:
+	add	x0, x2, 3304
+	add	x2, x2, 2832
+.L777:
+	bl	_insert_free_list
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_insert_free_list, .-zftl_insert_free_list
+	.align	2
+	.global	zftl_insert_data_list
+	.type	zftl_insert_data_list, %function
+zftl_insert_data_list:
+	adrp	x2, .LANCHOR0
+	uxth	w1, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x2,64]
+	add	x0, x0, x1, uxth 2
+	ldrb	w3, [x0,2]
+	and	w3, w3, 224
+	cmp	w3, 64
+	bne	.L779
+	add	x0, x2, 3256
+	add	x2, x2, 2834
+	b	.L782
+.L779:
+	cmp	w3, 96
+	bne	.L781
+	add	x0, x2, 3264
+	add	x2, x2, 2836
+	b	.L782
+.L781:
+	cmp	w3, 160
+	bne	.L778
+	add	x0, x2, 3248
+	add	x2, x2, 2838
+.L782:
+	bl	_insert_data_list
+.L778:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_insert_data_list, .-zftl_insert_data_list
+	.align	2
+	.global	zftl_get_free_sblk
+	.type	zftl_get_free_sblk, %function
+zftl_get_free_sblk:
+	stp	x29, x30, [sp, -48]!
+	uxth	w4, w0
+	add	x29, sp, 0
+	str	x21, [sp,32]
+	uxth	w21, w1
+	stp	x19, x20, [sp,16]
+	cmp	w21, 5
+	adrp	x19, .LANCHOR0
+	add	x2, x19, :lo12:.LANCHOR0
+	bne	.L784
+	ldrh	w1, [x2,2830]
+	ldrh	w0, [x2,2832]
+	cmp	w1, w0
+	bls	.L785
+	add	x0, x2, 3296
+	mov	w1, w4
+	add	x2, x2, 2830
+	b	.L788
+.L785:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w1, w4
+	add	x0, x2, 3304
+	add	x2, x2, 2832
+	b	.L788
+.L784:
+	ldrh	w1, [x2,2828]
+	ldrh	w0, [x2,2832]
+	cmp	w1, w0
+	bls	.L785
+	add	x0, x2, 3288
+	mov	w1, w4
+	add	x2, x2, 2828
+.L788:
+	bl	_list_pop_index_node
+	uxth	w20, w0
+	mov	w0, 65535
+	cmp	w20, w0
+	bne	.L787
+	add	x19, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC90
+	add	x0, x0, :lo12:.LC90
+	mov	w1, w20
+	mov	w2, w21
+	ldr	x3, [x19,3288]
+	ldrh	w4, [x19,2828]
+	ldrh	w5, [x19,2832]
+	bl	printk
+.L787:
+	mov	w0, w20
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	zftl_get_free_sblk, .-zftl_get_free_sblk
+	.align	2
+	.global	zftl_remove_data_node
+	.type	zftl_remove_data_node, %function
+zftl_remove_data_node:
+	adrp	x2, .LANCHOR0
+	uxth	w1, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x2,64]
+	add	x0, x0, x1, uxth 2
+	ldrb	w3, [x0,2]
+	and	w3, w3, 224
+	cmp	w3, 64
+	bne	.L790
+	add	x0, x2, 3256
+	add	x2, x2, 2834
+	b	.L793
+.L790:
+	cmp	w3, 96
+	bne	.L792
+	add	x0, x2, 3264
+	add	x2, x2, 2836
+	b	.L793
+.L792:
+	cmp	w3, 160
+	bne	.L789
+	add	x0, x2, 3248
+	add	x2, x2, 2838
+.L793:
+	bl	_list_remove_node
+.L789:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_remove_data_node, .-zftl_remove_data_node
+	.align	2
+	.global	zftl_remove_free_node
+	.type	zftl_remove_free_node, %function
+zftl_remove_free_node:
+	adrp	x2, .LANCHOR0
+	uxth	w1, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x2,64]
+	add	x0, x0, x1, uxth 2
+	ldrb	w0, [x0,2]
+	ands	w0, w0, 24
+	bne	.L795
+	add	x0, x2, 3288
+	add	x2, x2, 2828
+	b	.L798
+.L795:
+	cmp	w0, 16
+	bne	.L797
+	add	x0, x2, 3296
+	add	x2, x2, 2830
+	b	.L798
+.L797:
+	add	x0, x2, 3304
+	add	x2, x2, 2832
+.L798:
+	bl	_list_remove_node
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_remove_free_node, .-zftl_remove_free_node
+	.align	2
+	.global	zftl_list_update_data_list
+	.type	zftl_list_update_data_list, %function
+zftl_list_update_data_list:
+	adrp	x2, .LANCHOR0
+	uxth	w1, w0
+	add	x2, x2, :lo12:.LANCHOR0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x2,64]
+	add	x0, x0, x1, uxth 2
+	ldrb	w3, [x0,2]
+	and	w3, w3, 224
+	cmp	w3, 64
+	bne	.L800
+	add	x0, x2, 3256
+	add	x2, x2, 2834
+	b	.L803
+.L800:
+	cmp	w3, 96
+	bne	.L802
+	add	x0, x2, 3264
+	add	x2, x2, 2836
+	b	.L803
+.L802:
+	cmp	w3, 160
+	bne	.L799
+	add	x0, x2, 3248
+	add	x2, x2, 2838
+.L803:
+	bl	_list_update_data_list
+.L799:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_list_update_data_list, .-zftl_list_update_data_list
+	.align	2
+	.global	print_list_info
+	.type	print_list_info, %function
+print_list_info:
+	sub	sp, sp, #112
+	stp	x29, x30, [sp,32]
+	add	x29, sp, 32
+	stp	x19, x20, [sp,48]
+	mov	x19, x0
+	adrp	x0, .LC91
+	stp	x21, x22, [sp,64]
+	stp	x23, x24, [sp,80]
+	stp	x25, x26, [sp,96]
+	add	x0, x0, :lo12:.LC91
+	ldrh	w2, [x1]
+	ldr	x1, [x19]
+	bl	printk
+	ldr	x19, [x19]
+	cbz	x19, .L804
+	mov	x22, -6148914691236517206
+	adrp	x23, .LC92
+	mov	w20, 0
+	adrp	x25, .LANCHOR0
+	add	x22, x22, 1
+	add	x23, x23, :lo12:.LC92
+	mov	w26, 65535
+	mov	w24, 6
+.L807:
+	add	x21, x25, :lo12:.LANCHOR0
+	ldrh	w3, [x19]
+	ldrh	w4, [x19,2]
+	ldrh	w5, [x19,4]
+	ldr	x2, [x21,8]
+	ldr	x1, [x21,64]
+	sub	x2, x19, x2
+	asr	x2, x2, 1
+	mul	x2, x2, x22
+	and	x8, x2, 65535
+	lsl	x0, x8, 2
+	uxth	w2, w2
+	add	x6, x1, x0
+	ldrb	w7, [x6,2]
+	ldr	w6, [x1,x0]
+	ubfx	x6, x6, 11, 8
+	str	w6, [sp]
+	ubfx	x6, x7, 5, 3
+	ubfx	x7, x7, 3, 2
+	ldrh	w0, [x1,x0]
+	mov	w1, w20
+	and	w0, w0, 2047
+	str	w0, [sp,8]
+	ldr	x0, [x21,72]
+	ldrh	w0, [x0,x8,lsl 1]
+	str	w0, [sp,16]
+	mov	x0, x23
+	bl	printk
+	ldrh	w19, [x19]
+	cmp	w19, w26
+	beq	.L804
+	add	w20, w20, 1
+	ldr	x0, [x21,8]
+	umull	x19, w19, w24
+	cmp	w20, 33
+	add	x19, x0, x19
+	bne	.L807
+.L804:
+	sub	sp, x29, #32
+	ldp	x19, x20, [sp,48]
+	ldp	x21, x22, [sp,64]
+	ldp	x23, x24, [sp,80]
+	ldp	x25, x26, [sp,96]
+	ldp	x29, x30, [sp,32]
+	add	sp, sp, 112
+	ret
+	.size	print_list_info, .-print_list_info
+	.align	2
+	.global	dump_all_list_info
+	.type	dump_all_list_info, %function
+dump_all_list_info:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x0, x19, 3288
+	add	x1, x19, 2828
+	bl	print_list_info
+	add	x0, x19, 3296
+	add	x1, x19, 2830
+	bl	print_list_info
+	add	x0, x19, 3304
+	add	x1, x19, 2832
+	bl	print_list_info
+	add	x0, x19, 3256
+	add	x1, x19, 2834
+	bl	print_list_info
+	add	x0, x19, 3264
+	add	x1, x19, 2836
+	bl	print_list_info
+	add	x0, x19, 3248
+	add	x1, x19, 2838
+	bl	print_list_info
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	dump_all_list_info, .-dump_all_list_info
+	.align	2
+	.global	ftl_get_blk_list_in_sblk
+	.type	ftl_get_blk_list_in_sblk, %function
+ftl_get_blk_list_in_sblk:
+	adrp	x7, .LANCHOR0
+	uxth	w0, w0
+	add	x2, x7, :lo12:.LANCHOR0
+	mov	w12, 21
+	ldr	x2, [x2,64]
+	add	x2, x2, x0, uxth 2
+	ldrb	w11, [x2,3]
+	mov	w2, 0
+	mov	w6, w2
+.L813:
+	add	x8, x7, :lo12:.LANCHOR0
+	ldrb	w3, [x8,3244]
+	cmp	w6, w3
+	bge	.L819
+	asr	w3, w11, w6
+	tbnz	x3, 0, .L814
+	ldrb	w5, [x8,3312]
+	sbfiz	x10, x2, 1, 32
+	ldrh	w3, [x8,3314]
+	sdiv	w9, w6, w5
+	sub	w3, w12, w3
+	lsl	w3, w9, w3
+	madd	w3, w0, w5, w3
+	uxth	w4, w3
+	strh	w4, [x1,x10]
+	ldrb	w3, [x8,3312]
+	cmp	w3, 1
+	bls	.L815
+	sub	w3, w3, #1
+	and	w3, w6, w3
+	add	w3, w4, w3
+	strh	w3, [x1,x10]
+.L815:
+	add	w2, w2, 1
+.L814:
+	add	w6, w6, 1
+	b	.L813
+.L819:
+	mov	w0, w2
+	mov	w4, -1
+.L817:
+	add	x3, x7, :lo12:.LANCHOR0
+	ldrb	w3, [x3,3244]
+	cmp	w2, w3
+	bge	.L820
+	strh	w4, [x1,w2,sxtw 1]
+	add	w2, w2, 1
+	b	.L817
+.L820:
+	ret
+	.size	ftl_get_blk_list_in_sblk, .-ftl_get_blk_list_in_sblk
+	.align	2
+	.global	ftl_free_sblk
+	.type	ftl_free_sblk, %function
+ftl_free_sblk:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	uxth	x20, w0
+	add	x3, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	lsl	x21, x20, 2
+	mov	x22, x20
+	ldr	x4, [x3,64]
+	add	x2, x4, x21
+	ldrb	w0, [x2,2]
+	tbz	x0, 3, .L822
+	ldr	x5, [x3,2848]
+	ldr	w1, [x4,x21]
+	ldrh	w4, [x4,x21]
+	ldrh	w0, [x5,72]
+	ubfx	x1, x1, 11, 8
+	ldrh	w5, [x5,74]
+	ubfx	x4, x4, 0, 11
+	add	w4, w4, w5
+	ldrh	w5, [x3,3316]
+	cmp	w5, w4, uxth
+	bcc	.L823
+	add	w1, w0, w1
+	ldrh	w0, [x3,3318]
+	cmp	w0, w1, uxth
+	bcs	.L822
+.L823:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x1,2838]
+	ldrh	w3, [x1,2830]
+	add	w3, w0, w3
+	ldrh	w0, [x1,3282]
+	cmp	w3, w0
+	bge	.L824
+	ldrb	w1, [x2,2]
+	mov	w0, 2
+	bfi	w1, w0, 3, 2
+	b	.L828
+.L824:
+	ldrh	w0, [x1,2834]
+	ldrh	w3, [x1,2828]
+	ldrh	w4, [x1,2836]
+	add	w3, w0, w3
+	ldrh	w0, [x1,3320]
+	add	w3, w3, w4
+	cmp	w3, w0
+	bge	.L822
+	ldrb	w1, [x2,2]
+	and	w1, w1, -25
+.L828:
+	strb	w1, [x2,2]
+.L822:
+	mov	w0, w22
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	zftl_remove_data_node
+	mov	w0, w22
+	bl	zftl_insert_free_list
+	ldr	x0, [x19,64]
+	add	x0, x0, x21
+	ldrb	w1, [x0,2]
+	and	w1, w1, 31
+	strb	w1, [x0,2]
+	ldr	x0, [x19,72]
+	strh	wzr, [x0,x20,lsl 1]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_free_sblk, .-ftl_free_sblk
+	.align	2
+	.global	gc_free_src_blk
+	.type	gc_free_src_blk, %function
+gc_free_src_blk:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	adrp	x23, .LANCHOR0
+	adrp	x21, .LANCHOR1
+	add	x23, x23, :lo12:.LANCHOR0
+	add	x21, x21, :lo12:.LANCHOR1
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	mov	w20, 0
+	add	x24, x23, 2888
+	add	x21, x21, 1344
+.L830:
+	ldrh	w0, [x24,56]
+	adrp	x25, .LANCHOR0
+	cmp	w0, w20
+	bls	.L868
+	add	x0, x24, x20, sxtw 1
+	ldrh	w22, [x0,58]
+	ldr	x0, [x23,72]
+	lsl	x26, x22, 1
+	mov	x19, x22
+	ldrh	w2, [x0,x26]
+	cbz	w2, .L831
+	adrp	x0, .LC93
+	mov	w1, w22
+	add	x0, x0, :lo12:.LC93
+	bl	printk
+.L831:
+	add	x0, x25, :lo12:.LANCHOR0
+	ldr	x1, [x0,72]
+	ldrh	w1, [x1,x26]
+	cbnz	w1, .L832
+	ldr	x0, [x0,64]
+	add	x22, x0, x22, lsl 2
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L833
+	ldrb	w2, [x22,2]
+	adrp	x0, .LC94
+	add	x0, x0, :lo12:.LC94
+	mov	w1, w19
+	ubfx	x2, x2, 5, 3
+	bl	printk
+.L833:
+	ldrb	w0, [x22,2]
+	tst	w0, 192
+	beq	.L846
+	and	w0, w0, 224
+	cmp	w0, 224
+	bne	.L834
+.L846:
+	adrp	x0, .LC0
+	mov	x1, x21
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 770
+	bl	printk
+.L834:
+	mov	w0, w19
+	add	x25, x25, :lo12:.LANCHOR0
+	bl	ftl_free_sblk
+	ldr	x2, [x25,80]
+	ldrh	w1, [x2,124]
+	cbz	w1, .L836
+	mov	x0, 0
+.L838:
+	add	x4, x2, x0, lsl 1
+	mov	w3, w0
+	ldrh	w4, [x4,392]
+	cmp	w4, w19
+	bne	.L837
+	add	x0, x2, x3, sxtw 1
+	mov	w3, -1
+	strh	w3, [x0,392]
+	sub	w1, w1, #1
+	strh	w1, [x2,124]
+	b	.L836
+.L837:
+	add	x0, x0, 1
+	cmp	x0, 64
+	bne	.L838
+.L836:
+	ldrh	w1, [x2,120]
+	cbz	w1, .L839
+	mov	x0, 0
+.L841:
+	add	x4, x2, x0, lsl 1
+	mov	w3, w0
+	ldrh	w4, [x4,136]
+	cmp	w4, w19
+	bne	.L840
+	add	x0, x2, x3, sxtw 1
+	mov	w3, -1
+	strh	w3, [x0,136]
+	sub	w1, w1, #1
+	strh	w1, [x2,120]
+	b	.L839
+.L840:
+	add	x0, x0, 1
+	cmp	x0, 64
+	bne	.L841
+.L839:
+	ldrh	w1, [x2,122]
+	cbz	w1, .L842
+	mov	x0, 0
+.L844:
+	add	x4, x2, x0, lsl 1
+	mov	w3, w0
+	ldrh	w4, [x4,264]
+	cmp	w4, w19
+	bne	.L843
+	add	x0, x2, x3, sxtw 1
+	mov	w3, -1
+	strh	w3, [x0,264]
+	sub	w1, w1, #1
+	strh	w1, [x2,122]
+	b	.L842
+.L843:
+	add	x0, x0, 1
+	cmp	x0, 64
+	bne	.L844
+	b	.L842
+.L832:
+	mov	w0, w19
+	mov	w1, 1
+	mov	w2, 0
+	bl	gc_add_sblk
+.L842:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L830
+.L868:
+	strh	wzr, [x24,56]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	gc_free_src_blk, .-gc_free_src_blk
+	.align	2
+	.global	ftl_erase_phy_blk
+	.type	ftl_erase_phy_blk, %function
+ftl_erase_phy_blk:
+	stp	x29, x30, [sp, -48]!
+	adrp	x3, .LANCHOR0
+	uxth	w2, w0
+	add	x5, x3, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	mov	w0, 21
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	mov	w4, 1
+	mov	w21, w1
+	ldrh	w19, [x5,3314]
+	mov	x20, x3
+	sub	w19, w0, w19
+	ldrb	w0, [x5,3322]
+	asr	w22, w2, w19
+	lsl	w19, w4, w19
+	sub	w19, w19, #1
+	and	w19, w19, w2
+	sxth	w19, w19
+	cbz	w0, .L870
+	ldrh	w2, [x5,3324]
+	cmp	w1, wzr
+	mov	w0, w22
+	cset	w1, eq
+	mul	w2, w19, w2
+	bl	flash_erase_block_en
+.L870:
+	add	x3, x20, :lo12:.LANCHOR0
+	mov	w1, w21
+	mov	w0, w22
+	ldrh	w2, [x3,3324]
+	mul	w2, w19, w2
+	bl	flash_erase_block_en
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_erase_phy_blk, .-ftl_erase_phy_blk
+	.align	2
+	.global	ftl_erase_sblk
+	.type	ftl_erase_sblk, %function
+ftl_erase_sblk:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	uxth	w24, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	ubfiz	x20, x24, 2, 16
+	mov	w22, w1
+	ldr	x0, [x0,64]
+	mov	w19, 0
+	add	x0, x0, x20
+	ldrb	w25, [x0,3]
+.L875:
+	add	x2, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x2,3326]
+	cmp	w19, w0
+	bge	.L886
+	ldrb	w3, [x2,3312]
+	mov	w21, 0
+	ldrh	w2, [x2,3324]
+	mov	w1, w21
+	sub	w4, w3, #1
+	mul	w6, w19, w3
+	mul	w5, w24, w3
+.L887:
+	cmp	w1, w3
+	bge	.L900
+	add	w0, w1, w6
+	asr	w0, w25, w0
+	tbnz	x0, 0, .L876
+	and	w0, w1, w4
+	add	x7, x29, 80
+	add	w0, w5, w0
+	mul	w0, w0, w2
+	str	w0, [x7,w21,sxtw 2]
+	add	w21, w21, 1
+.L876:
+	add	w1, w1, 1
+	b	.L887
+.L900:
+	cmp	w3, 4
+	bne	.L899
+	mov	x26, 0
+.L878:
+	cmp	w21, w26
+	ble	.L881
+	add	x2, x29, 80
+	mov	w0, w19
+	mov	w1, w22
+	ldr	w2, [x2,x26,lsl 2]
+	add	x26, x26, 1
+	bl	flash_erase_block_en
+	b	.L878
+.L899:
+	cmp	w21, 2
+	bne	.L882
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x0,3322]
+	cbz	w0, .L883
+	cmp	w22, wzr
+	ldr	w2, [x29,80]
+	ldr	w3, [x29,84]
+	mov	w0, w19
+	cset	w1, eq
+	bl	flash_erase_duplane_block
+.L883:
+	ldr	w2, [x29,80]
+	mov	w0, w19
+	ldr	w3, [x29,84]
+	mov	w1, w22
+	bl	flash_erase_duplane_block
+	b	.L881
+.L882:
+	cmp	w21, 1
+	bne	.L881
+	add	x0, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x0,3322]
+	cbz	w0, .L885
+	cmp	w22, wzr
+	ldr	w2, [x29,80]
+	mov	w0, w19
+	cset	w1, eq
+	bl	flash_erase_block_en
+.L885:
+	ldr	w2, [x29,80]
+	mov	w0, w19
+	mov	w1, w22
+	bl	flash_erase_block_en
+.L881:
+	add	w19, w19, 1
+	b	.L875
+.L886:
+	cbnz	w22, .L888
+	ldr	x1, [x2,64]
+	ldrh	w0, [x1,x20]
+	add	w3, w0, 1
+	bfi	w0, w3, 0, 11
+	strh	w0, [x1,x20]
+	ldr	x0, [x2,2848]
+	ldr	w1, [x0,84]
+	ldrh	w3, [x0,96]
+	add	w1, w1, 1
+	str	w1, [x0,84]
+	ldr	x1, [x2,64]
+	ldrh	w1, [x1,x20]
+	ubfx	x1, x1, 0, 11
+	uxth	w2, w1
+	cmp	w3, w2
+	bge	.L890
+	strh	w1, [x0,96]
+	b	.L890
+.L888:
+	ldr	x3, [x2,64]
+	ldr	w0, [x3,x20]
+	ubfx	x1, x0, 11, 8
+	add	w1, w1, 1
+	bfi	w0, w1, 11, 8
+	str	w0, [x3,x20]
+	ldr	x0, [x2,2848]
+	ldr	w1, [x0,80]
+	add	w1, w1, 1
+	str	w1, [x0,80]
+	ldr	x1, [x2,64]
+	ldrh	w2, [x0,98]
+	ldr	w1, [x1,x20]
+	ubfx	x1, x1, 11, 8
+	cmp	w2, w1, uxtb
+	bcs	.L890
+	strh	w1, [x0,98]
+.L890:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	ftl_erase_sblk, .-ftl_erase_sblk
+	.align	2
+	.global	ftl_alloc_sys_blk
+	.type	ftl_alloc_sys_blk, %function
+ftl_alloc_sys_blk:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LANCHOR0
+	add	x29, sp, 0
+	add	x1, x0, :lo12:.LANCHOR0
+	str	x19, [sp,16]
+	mov	x19, x0
+	ldr	x1, [x1,2848]
+	ldrh	w2, [x1,136]
+	cmp	w2, 63
+	bls	.L902
+	strh	wzr, [x1,136]
+.L902:
+	ldrh	w0, [x1,112]
+	cbnz	w0, .L903
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1360
+	mov	w2, 1012
+	bl	printk
+.L903:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w4, 65535
+	ldr	x1, [x0,2848]
+.L907:
+	ldrh	w2, [x1,136]
+.L904:
+	cmp	w2, 63
+	bgt	.L910
+	sxtw	x3, w2
+	add	x3, x3, 80
+	ldrh	w0, [x1,x3,lsl 1]
+	cmp	w0, w4
+	bne	.L909
+	add	w2, w2, 1
+	b	.L904
+.L910:
+	strh	wzr, [x1,136]
+	b	.L907
+.L909:
+	mov	w4, -1
+	strh	w4, [x1,x3,lsl 1]
+	strh	w2, [x1,136]
+	ldrh	w2, [x1,112]
+	sub	w2, w2, #1
+	strh	w2, [x1,112]
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_alloc_sys_blk, .-ftl_alloc_sys_blk
+	.align	2
+	.global	ftl_free_sys_blk
+	.type	ftl_free_sys_blk, %function
+ftl_free_sys_blk:
+	stp	x29, x30, [sp, -32]!
+	adrp	x1, .LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w20, w0
+	add	x0, x1, :lo12:.LANCHOR0
+	mov	x19, x1
+	ldr	x2, [x0,2848]
+	ldrh	w0, [x2,138]
+	cmp	w0, 63
+	bls	.L912
+	strh	wzr, [x2,138]
+.L912:
+	ldrh	w0, [x2,112]
+	cmp	w0, 63
+	bls	.L913
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1384
+	mov	w2, 1036
+	bl	printk
+.L913:
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w0, 65535
+	ldr	x1, [x1,2848]
+.L917:
+	ldrh	w2, [x1,138]
+.L914:
+	cmp	w2, 63
+	bgt	.L919
+	sxtw	x3, w2
+	add	x3, x3, 80
+	ldrh	w4, [x1,x3,lsl 1]
+	cmp	w4, w0
+	bne	.L915
+	strh	w20, [x1,x3,lsl 1]
+	strh	w2, [x1,138]
+	ldrh	w0, [x1,112]
+	add	w0, w0, 1
+	strh	w0, [x1,112]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+.L915:
+	add	w2, w2, 1
+	b	.L914
+.L919:
+	strh	wzr, [x1,138]
+	b	.L917
+	.size	ftl_free_sys_blk, .-ftl_free_sys_blk
+	.align	2
+	.global	ftl_info_data_recovery
+	.type	ftl_info_data_recovery, %function
+ftl_info_data_recovery:
+	stp	x29, x30, [sp, -64]!
+	mov	w1, 65535
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	str	x23, [sp,48]
+	ldrh	w2, [x0]
+	cmp	w2, w1
+	beq	.L920
+	adrp	x19, .LANCHOR0
+	ubfiz	x20, x2, 2, 16
+	add	x23, x19, :lo12:.LANCHOR0
+	ldr	x21, [x23,64]
+	add	x22, x21, x20
+	ldrb	w1, [x22,2]
+	tst	w1, 224
+	bne	.L920
+	ldrb	w0, [x0,4]
+	bfi	w1, w0, 5, 3
+	mov	w0, w2
+	strb	w1, [x22,2]
+	bl	zftl_remove_free_node
+	ldrb	w0, [x22,2]
+	tbz	x0, 3, .L924
+	ldr	x1, [x23,2848]
+	ldrh	w0, [x1,116]
+	sub	w0, w0, #1
+	strh	w0, [x1,116]
+	b	.L925
+.L924:
+	tst	w0, 24
+	ldr	x1, [x23,2848]
+	bne	.L926
+	ldrh	w0, [x1,114]
+	sub	w0, w0, #1
+	strh	w0, [x1,114]
+	b	.L925
+.L926:
+	ldrh	w0, [x1,118]
+	sub	w0, w0, #1
+	strh	w0, [x1,118]
+.L925:
+	ldrb	w0, [x22,2]
+	and	w0, w0, 224
+	cmp	w0, 160
+	bne	.L927
+	ldr	w0, [x21,x20]
+	add	x19, x19, :lo12:.LANCHOR0
+	ubfx	x1, x0, 11, 8
+	add	w1, w1, 1
+	bfi	w0, w1, 11, 8
+	str	w0, [x21,x20]
+	ldr	x1, [x19,2848]
+	ldrh	w0, [x1,120]
+	sub	w0, w0, #1
+	strh	w0, [x1,120]
+	b	.L920
+.L927:
+	ldrh	w1, [x21,x20]
+	cmp	w0, 64
+	add	w2, w1, 1
+	bfi	w1, w2, 0, 11
+	strh	w1, [x21,x20]
+	bne	.L928
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x1, [x19,2848]
+	ldrh	w0, [x1,122]
+	sub	w0, w0, #1
+	strh	w0, [x1,122]
+	b	.L920
+.L928:
+	cmp	w0, 96
+	bne	.L920
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x1, [x19,2848]
+	ldrh	w0, [x1,124]
+	sub	w0, w0, #1
+	strh	w0, [x1,124]
+.L920:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	ftl_info_data_recovery, .-ftl_info_data_recovery
+	.align	2
+	.global	ftl_get_ppa_from_index
+	.type	ftl_get_ppa_from_index, %function
+ftl_get_ppa_from_index:
+	stp	x29, x30, [sp, -48]!
+	adrp	x2, .LANCHOR0
+	uxth	w1, w0
+	add	x4, x2, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	x19, x2
+	ldrh	w0, [x4,3276]
+	ldr	x3, [x4,80]
+	ldrb	w4, [x4,3244]
+	mul	w0, w0, w4
+	cmp	w1, w0
+	bge	.L930
+	add	x3, x3, 16
+	b	.L931
+.L930:
+	sub	w1, w1, w0
+	add	x3, x3, 48
+	uxth	w1, w1
+.L931:
+	ldrb	w2, [x3,9]
+	mov	w0, 65535
+	sdiv	w20, w1, w2
+	msub	w1, w20, w2, w1
+	add	x1, x3, x1, uxth 1
+	ldrh	w21, [x1,16]
+	cmp	w21, w0
+	bne	.L932
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1408
+	mov	w2, 1421
+	bl	printk
+.L932:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x2,3324]
+	madd	w0, w21, w0, w20
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_get_ppa_from_index, .-ftl_get_ppa_from_index
+	.align	2
+	.global	lpa_hash_get_ppa
+	.type	lpa_hash_get_ppa, %function
+lpa_hash_get_ppa:
+	adrp	x1, .LANCHOR0
+	mov	w3, 65535
+	add	x1, x1, :lo12:.LANCHOR0
+	add	x2, x1, x0, uxtb 1
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrh	w2, [x2,3328]
+	ldr	x4, [x1,3840]
+	ldr	x5, [x1,3848]
+.L934:
+	cmp	w2, w3
+	beq	.L938
+	uxtw	x1, w2
+	ldr	w6, [x4,x1,lsl 2]
+	cmp	w6, w0
+	bne	.L935
+	mov	w0, w2
+	bl	ftl_get_ppa_from_index
+	b	.L936
+.L935:
+	ldrh	w2, [x5,x1,lsl 1]
+	b	.L934
+.L938:
+	mov	w0, -1
+.L936:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	lpa_hash_get_ppa, .-lpa_hash_get_ppa
+	.align	2
+	.global	ftl_get_new_free_page
+	.type	ftl_get_new_free_page, %function
+ftl_get_new_free_page:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	x19, x0
+	ldrh	w1, [x0]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L940
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1432
+	mov	w2, 1536
+	bl	printk
+.L940:
+	adrp	x20, .LANCHOR0
+	ldrh	w1, [x19,2]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3276]
+	cmp	w1, w0
+	bne	.L941
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1432
+	mov	w2, 1537
+	bl	printk
+.L941:
+	ldrh	w0, [x19,6]
+	cbnz	w0, .L942
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1432
+	mov	w2, 1538
+	bl	printk
+.L942:
+	ldrb	w0, [x19,5]
+	add	x1, x20, :lo12:.LANCHOR0
+	add	x0, x0, 8
+	ldrb	w2, [x1,3244]
+	mov	w1, 65535
+	ldrh	w0, [x19,x0,lsl 1]
+.L943:
+	cmp	w0, w1
+	bne	.L947
+	ldrb	w0, [x19,5]
+	add	w0, w0, 1
+	uxtb	w0, w0
+	strb	w0, [x19,5]
+	cmp	w0, w2
+	bne	.L944
+	ldrh	w0, [x19,2]
+	strb	wzr, [x19,5]
+	add	w0, w0, 1
+	strh	w0, [x19,2]
+.L944:
+	ldrb	w0, [x19,5]
+	add	x0, x0, 8
+	ldrh	w0, [x19,x0,lsl 1]
+	b	.L943
+.L947:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x19,2]
+	ldrh	w1, [x20,3324]
+	ldrb	w3, [x20,3244]
+	mul	w0, w0, w1
+	ldrh	w1, [x19,6]
+	orr	w0, w0, w2
+	sub	w1, w1, #1
+	strh	w1, [x19,6]
+	ldrh	w1, [x19,10]
+	add	w1, w1, 1
+	strh	w1, [x19,10]
+	ldrb	w1, [x19,5]
+	add	w1, w1, 1
+	uxtb	w1, w1
+	strb	w1, [x19,5]
+	cmp	w3, w1
+	bne	.L946
+	add	w2, w2, 1
+	strb	wzr, [x19,5]
+	strh	w2, [x19,2]
+.L946:
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_get_new_free_page, .-ftl_get_new_free_page
+	.align	2
+	.global	ftl_ext_alloc_new_blk
+	.type	ftl_ext_alloc_new_blk, %function
+ftl_ext_alloc_new_blk:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	bl	ftl_alloc_sys_blk
+	uxth	w0, w0
+	mov	w20, w0
+	mov	w1, 65533
+	sub	w0, w0, #1
+	cmp	w1, w0, uxth
+	bcs	.L949
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1456
+	mov	w2, 1569
+	bl	printk
+.L949:
+	adrp	x19, .LANCHOR0
+	mov	w1, 0
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, w20
+	bl	ftl_erase_phy_blk
+	ldr	x0, [x19,2848]
+	ldrh	w0, [x0,130]
+	bl	ftl_free_sys_blk
+	ldr	x0, [x19,2848]
+	strh	w20, [x0,130]
+	strh	wzr, [x0,140]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_ext_alloc_new_blk, .-ftl_ext_alloc_new_blk
+	.align	2
+	.global	ftl_total_vpn_update
+	.type	ftl_total_vpn_update, %function
+ftl_total_vpn_update:
+	adrp	x1, .LANCHOR0
+	add	x3, x1, :lo12:.LANCHOR0
+	ldrh	w2, [x3,3856]
+	cbnz	w0, .L951
+	cmp	w2, 4
+	bhi	.L951
+	add	w2, w2, 1
+	strh	w2, [x3,3856]
+	b	.L950
+.L951:
+	add	x0, x1, :lo12:.LANCHOR0
+	mov	w9, 65535
+	strh	wzr, [x0,3856]
+	ldrh	w6, [x0,56]
+	ldr	x7, [x0,72]
+	ldr	x8, [x0,64]
+	mov	x0, 0
+	mov	w2, w0
+	mov	w3, w0
+.L953:
+	cmp	w6, w0, uxth
+	bls	.L961
+	ldrh	w4, [x7,x0,lsl 1]
+	cmp	w4, w9
+	beq	.L954
+	add	x5, x8, x0, lsl 2
+	ldrb	w5, [x5,2]
+	and	w5, w5, 224
+	cmp	w5, 160
+	bne	.L955
+	add	w2, w2, w4
+	b	.L954
+.L955:
+	add	w3, w3, w4
+.L954:
+	add	x0, x0, 1
+	b	.L953
+.L961:
+	add	x1, x1, :lo12:.LANCHOR0
+	ldr	x0, [x1,80]
+	ldr	x1, [x1,2848]
+	str	w3, [x0,524]
+	str	w2, [x0,528]
+	ldrh	w1, [x1,120]
+	cbz	w1, .L950
+	udiv	w2, w2, w1
+	str	w2, [x0,532]
+.L950:
+	ret
+	.size	ftl_total_vpn_update, .-ftl_total_vpn_update
+	.align	2
+	.global	ftl_debug_info_fill
+	.type	ftl_debug_info_fill, %function
+ftl_debug_info_fill:
+	mov	w0, 0
+	ret
+	.size	ftl_debug_info_fill, .-ftl_debug_info_fill
+	.align	2
+	.global	ftl_vpn_update
+	.type	ftl_vpn_update, %function
+ftl_vpn_update:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxth	w19, w0
+	mov	w0, w19
+	ubfiz	x19, x19, 1, 16
+	bl	zftl_list_update_data_list
+	adrp	x0, .LANCHOR0+72
+	ldr	x0, [x0,#:lo12:.LANCHOR0+72]
+	ldrh	w0, [x0,x19]
+	ldr	x19, [sp,16]
+	cmp	w0, wzr
+	cset	w0, eq
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_vpn_update, .-ftl_vpn_update
+	.align	2
+	.global	ftl_vpn_decrement
+	.type	ftl_vpn_decrement, %function
+ftl_vpn_decrement:
+	stp	x29, x30, [sp, -48]!
+	uxth	w1, w0
+	mov	w0, 65535
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	cmp	w1, w0
+	adrp	x2, .LANCHOR0
+	beq	.L965
+	add	x0, x2, :lo12:.LANCHOR0
+	ubfiz	x3, x1, 1, 16
+	ldr	x0, [x0,72]
+	ldrh	w19, [x0,x3]
+	cbnz	w19, .L966
+	adrp	x0, .LC95
+	mov	w2, w19
+	add	x0, x0, :lo12:.LC95
+	bl	printk
+	b	.L970
+.L966:
+	sub	w19, w19, #1
+	strh	w19, [x0,x3]
+.L965:
+	add	x19, x2, :lo12:.LANCHOR0
+	mov	w0, 0
+	ldrh	w2, [x19,3858]
+	cmp	w2, w1
+	beq	.L967
+	mov	w0, 65535
+	cmp	w2, w0
+	bne	.L968
+	strh	w1, [x19,3858]
+.L970:
+	mov	w0, 0
+	b	.L967
+.L968:
+	mov	w0, w2
+	str	x1, [x29,40]
+	bl	ftl_vpn_update
+	cmp	w0, wzr
+	ldr	x1, [x29,40]
+	cset	w0, ne
+	strh	w1, [x19,3858]
+.L967:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_vpn_decrement, .-ftl_vpn_decrement
+	.align	2
+	.global	lpa_hash_update_ppa
+	.type	lpa_hash_update_ppa, %function
+lpa_hash_update_ppa:
+	adrp	x3, .LANCHOR0
+	uxtb	w5, w0
+	add	x6, x3, :lo12:.LANCHOR0
+	uxth	w2, w2
+	add	x4, x6, 3328
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x8, [x6,3840]
+	ldr	x12, [x6,3848]
+	mov	w6, 65535
+	ldrh	w4, [x4,w5,sxtw 1]
+	mov	w11, w6
+.L972:
+	cmp	w4, w11
+	beq	.L976
+	uxtw	x9, w4
+	uxth	x7, w4
+	lsl	x10, x9, 2
+	add	x13, x8, x10
+	ldr	w10, [x8,x10]
+	cmp	w10, w0
+	bne	.L973
+	mov	w4, -1
+	str	w4, [x13]
+	mov	w4, 65535
+	cmp	w6, w4
+	add	x4, x3, :lo12:.LANCHOR0
+	bne	.L974
+	ldr	x6, [x4,3848]
+	add	x4, x4, 3328
+	ldrh	w6, [x6,x7,lsl 1]
+	strh	w6, [x4,w5,sxtw 1]
+	b	.L975
+.L974:
+	ldr	x4, [x4,3848]
+	ldrh	w8, [x4,x7,lsl 1]
+	strh	w8, [x4,w6,uxtw 1]
+.L975:
+	add	x4, x3, :lo12:.LANCHOR0
+	mov	w6, -1
+	ldr	x4, [x4,3848]
+	strh	w6, [x4,x7,lsl 1]
+	b	.L976
+.L973:
+	mov	w6, w4
+	ldrh	w4, [x12,x9,lsl 1]
+	b	.L972
+.L976:
+	add	x3, x3, :lo12:.LANCHOR0
+	uxtw	x4, w2
+	cmn	w1, #1
+	ldr	x6, [x3,3840]
+	str	w0, [x6,x4,lsl 2]
+	add	x0, x3, 3328
+	ldrh	w6, [x0,w5,sxtw 1]
+	strh	w2, [x0,w5,sxtw 1]
+	ldr	x0, [x3,3848]
+	strh	w6, [x0,x4,lsl 1]
+	beq	.L978
+	ldrh	w0, [x3,3314]
+	mov	w2, 21
+	mov	w4, 1
+	sub	w2, w2, w0
+	lsr	w1, w1, w0
+	lsl	w2, w4, w2
+	ldrb	w0, [x3,3312]
+	sub	w2, w2, #1
+	and	w1, w2, w1
+	udiv	w0, w1, w0
+	bl	ftl_vpn_decrement
+.L978:
+	mov	w0, -1
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	lpa_hash_update_ppa, .-lpa_hash_update_ppa
+	.align	2
+	.global	ftl_mask_bad_block
+	.type	ftl_mask_bad_block, %function
+ftl_mask_bad_block:
+	stp	x29, x30, [sp, -48]!
+	adrp	x3, .LANCHOR0
+	mov	w2, 21
+	add	x1, x3, :lo12:.LANCHOR0
+	add	x29, sp, 0
+	mov	w4, 1
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	ubfx	x21, x0, 21, 3
+	mov	x19, x3
+	ldrh	w5, [x1,3314]
+	sub	w2, w2, w5
+	lsr	w0, w0, w5
+	lsl	w2, w4, w2
+	sub	w2, w2, #1
+	and	w0, w2, w0
+	ldrb	w2, [x1,3312]
+	udiv	w2, w0, w2
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	uxth	w20, w2
+	tbz	x0, 14, .L983
+	adrp	x0, .LC96
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC96
+	mov	w2, w20
+	bl	printk
+.L983:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,56]
+	cmp	w1, w20
+	bls	.L982
+	ldr	x0, [x0,64]
+	add	x20, x0, x20, uxth 2
+	mov	w0, 1
+	lsl	w1, w0, w21
+	ldrb	w0, [x20,3]
+	orr	w1, w1, w0
+	strb	w1, [x20,3]
+.L982:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_mask_bad_block, .-ftl_mask_bad_block
+	.align	2
+	.global	print_ftl_debug_info
+	.type	print_ftl_debug_info, %function
+print_ftl_debug_info:
+	sub	sp, sp, #64
+	stp	x29, x30, [sp,32]
+	add	x29, sp, 32
+	str	x19, [sp,48]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x7, [x19,80]
+	ldrh	w6, [x19,2838]
+	ldrh	w1, [x19,2828]
+	ldr	w0, [x7,528]
+	str	w0, [sp]
+	ldr	w0, [x19,2824]
+	str	w0, [sp,8]
+	adrp	x0, .LC97
+	ldrh	w2, [x19,2830]
+	add	x0, x0, :lo12:.LC97
+	ldr	w7, [x7,524]
+	ldrh	w3, [x19,2832]
+	ldrh	w4, [x19,2834]
+	ldrh	w5, [x19,2836]
+	bl	printk
+	ldr	x5, [x19,2848]
+	adrp	x0, .LC98
+	ldrb	w3, [x19,2841]
+	add	x0, x0, :lo12:.LC98
+	ldr	w4, [x5,8]
+	ldr	w1, [x5,20]
+	ldr	w2, [x5,28]
+	ldr	w5, [x5,64]
+	bl	printk
+	ldr	x2, [x19,2848]
+	adrp	x0, .LC99
+	add	x0, x0, :lo12:.LC99
+	ldr	w3, [x2,16]
+	ldr	w1, [x2,52]
+	ldr	w2, [x2,60]
+	lsr	w3, w3, 11
+	bl	printk
+	ldr	x7, [x19,2848]
+	ldrh	w0, [x7,90]
+	ldrh	w6, [x7,72]
+	ldrh	w1, [x7,74]
+	ldrh	w3, [x7,88]
+	ldrh	w4, [x7,92]
+	ldrh	w5, [x7,96]
+	str	w0, [sp]
+	ldrh	w0, [x7,94]
+	str	w0, [sp,8]
+	ldrh	w0, [x7,98]
+	str	w0, [sp,16]
+	adrp	x0, .LC100
+	add	x0, x0, :lo12:.LC100
+	ldr	w2, [x7,84]
+	ldr	w7, [x7,80]
+	bl	printk
+	ldrh	w1, [x19,2858]
+	adrp	x0, .LC101
+	ldrh	w2, [x19,2860]
+	add	x0, x0, :lo12:.LC101
+	ldrh	w3, [x19,2862]
+	ldrh	w4, [x19,2864]
+	ldrh	w5, [x19,2856]
+	bl	printk
+	sub	sp, x29, #32
+	ldr	x19, [sp,48]
+	ldp	x29, x30, [sp,32]
+	add	sp, sp, 64
+	ret
+	.size	print_ftl_debug_info, .-print_ftl_debug_info
+	.align	2
+	.global	ftl_write_buf
+	.type	ftl_write_buf, %function
+ftl_write_buf:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	x20, x0
+	cbnz	x0, .L990
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	mov	w2, 639
+	add	x1, x1, 1480
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	print_ftl_debug_info
+	mov	w0, -1
+	b	.L999
+.L990:
+	adrp	x19, .LANCHOR0
+	ldrb	w1, [x20,56]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2816]
+	cmp	w1, w0
+	bls	.L995
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1480
+	mov	w2, 644
+	bl	printk
+.L995:
+	ldrb	w0, [x20,56]
+	cbz	w0, .L992
+	add	x21, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x21,2816]
+	cmp	w1, w0
+	bcs	.L993
+.L992:
+	mov	x0, x20
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	buf_free
+	ldrb	w0, [x19,2840]
+	b	.L999
+.L993:
+	add	x0, x21, 2866
+	mov	x1, x20
+	bl	buf_add_tail
+	ldr	x0, [x21,2848]
+	ldrb	w1, [x20,56]
+	ldrb	w2, [x21,2840]
+	ldr	w3, [x0,16]
+	add	w2, w2, 1
+	add	w1, w3, w1
+	str	w1, [x0,16]
+	ldr	w1, [x0,32]
+	uxtb	w2, w2
+	strb	w2, [x21,2840]
+	add	w1, w1, 1
+	str	w1, [x0,32]
+	mov	w0, w2
+.L999:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_write_buf, .-ftl_write_buf
+	.align	2
+	.global	ftl_write_completed
+	.type	ftl_write_completed, %function
+ftl_write_completed:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	str	x25, [sp,64]
+	stp	x21, x22, [sp,32]
+	add	x19, x19, :lo12:.LANCHOR0
+	adrp	x21, .LC102
+	stp	x23, x24, [sp,48]
+	add	x22, x19, 768
+	mov	w23, 21
+	mov	w24, 1
+	add	x21, x21, :lo12:.LC102
+.L1001:
+	ldrb	w0, [x19,3860]
+	cmp	w0, 255
+	beq	.L1008
+	sbfiz	x0, x0, 6, 32
+	add	x20, x22, x0
+	add	x4, x20, 32
+	ldrb	w0, [x22,x0]
+	strb	w0, [x19,3860]
+	ldr	w0, [x20,52]
+	cmn	w0, #1
+	bne	.L1002
+	ldrh	w2, [x19,3314]
+	mov	x0, x21
+	ldr	w3, [x4,8]
+	sub	w1, w23, w2
+	lsl	w1, w24, w1
+	lsr	w2, w3, w2
+	sub	w1, w1, #1
+	and	w2, w1, w2
+	ldrb	w1, [x19,3312]
+	udiv	w1, w2, w1
+	ldr	w2, [x4,4]
+	uxth	w25, w1
+	mov	w1, w25
+	bl	printk
+	mov	w1, 1
+	mov	w0, w25
+	mov	w2, 0
+	bl	gc_add_sblk
+	ldr	x0, [x19,80]
+	ldr	w1, [x0,556]
+	add	w1, w1, 1
+	str	w1, [x0,556]
+	ldrh	w1, [x0,16]
+	cmp	w1, w25
+	bne	.L1003
+	strh	wzr, [x0,22]
+	b	.L1004
+.L1003:
+	ldrh	w1, [x0,48]
+	cmp	w1, w25
+	bne	.L1004
+	strh	wzr, [x0,54]
+.L1004:
+	mov	x0, x20
+	bl	ftl_write_buf
+	b	.L1001
+.L1002:
+	ldr	w0, [x4,4]
+	ldr	w1, [x4,12]
+	ldrh	w2, [x20,48]
+	bl	lpa_hash_update_ppa
+	ldrb	w0, [x20,2]
+	tbz	x0, 2, .L1006
+	and	w0, w0, -3
+	strb	w0, [x20,2]
+	b	.L1001
+.L1006:
+	mov	x0, x20
+	bl	buf_free
+	b	.L1001
+.L1008:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	ftl_write_completed, .-ftl_write_completed
+	.align	2
+	.global	ftl_alloc_sblk
+	.type	ftl_alloc_sblk, %function
+ftl_alloc_sblk:
+	stp	x29, x30, [sp, -64]!
+	cmp	w0, 5
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w0
+	str	x23, [sp,48]
+	mov	w0, 2
+	uxth	w23, w20
+	stp	x21, x22, [sp,32]
+	mov	w1, w23
+	csel	w22, wzr, w0, ne
+	mov	w0, 0
+	bl	zftl_get_free_sblk
+	uxth	w19, w0
+	mov	w0, 65535
+	cmp	w19, w0
+	beq	.L1011
+	adrp	x0, .LANCHOR0+64
+	ldr	x21, [x0,#:lo12:.LANCHOR0+64]
+	add	x21, x21, x19, uxth 2
+	ldrb	w0, [x21,2]
+	tst	w0, 224
+	beq	.L1012
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1496
+	mov	w2, 757
+	bl	printk
+.L1012:
+	ldrb	w1, [x21,2]
+	bfi	w1, w20, 5, 3
+	ubfx	x2, x1, 3, 2
+	orr	w0, w22, w2
+	bfi	w1, w0, 3, 2
+	strb	w1, [x21,2]
+	b	.L1018
+.L1011:
+	adrp	x21, .LC103
+	bl	print_ftl_debug_info
+	add	x21, x21, :lo12:.LC103
+	mov	w1, w19
+	mov	w2, w20
+	mov	x0, x21
+	bl	printk
+	mov	w1, w23
+	mov	w0, 0
+	bl	zftl_get_free_sblk
+	uxth	w19, w0
+	mov	w1, w19
+	mov	w2, w20
+	mov	x0, x21
+	bl	printk
+	bl	dump_all_list_info
+	adrp	x1, .LANCHOR1
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR1
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 1496
+	mov	w2, 767
+	bl	printk
+.L1018:
+	mov	w0, w19
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	ftl_alloc_sblk, .-ftl_alloc_sblk
+	.align	2
+	.global	sblk_init
+	.type	sblk_init, %function
+sblk_init:
+	adrp	x0, .LANCHOR0
+	mov	w1, -1
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,3861]
+	strb	w1, [x0,3860]
+	strb	w1, [x0,2880]
+	strb	w1, [x0,3224]
+	mov	w0, 0
+	ret
+	.size	sblk_init, .-sblk_init
+	.align	2
+	.global	dump_sblk_queue
+	.type	dump_sblk_queue, %function
+dump_sblk_queue:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LC104
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	str	x21, [sp,32]
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC104
+	ldrb	w1, [x20,3861]
+	bl	printk
+	ldrb	w19, [x20,3861]
+	cmp	w19, 255
+	beq	.L1020
+	add	x20, x20, 768
+	sbfiz	x19, x19, 6, 32
+	adrp	x21, .LC105
+	add	x19, x20, x19
+	add	x21, x21, :lo12:.LC105
+.L1022:
+	ldrb	w1, [x19,1]
+	mov	x0, x21
+	ldrb	w2, [x19,58]
+	ldr	w3, [x19,40]
+	bl	printk
+	ldrb	w19, [x19]
+	cmp	w19, 255
+	beq	.L1020
+	sbfiz	x19, x19, 6, 32
+	add	x19, x20, x19
+	b	.L1022
+.L1020:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	dump_sblk_queue, .-dump_sblk_queue
+	.align	2
+	.global	queue_lun_state
+	.type	queue_lun_state, %function
+queue_lun_state:
+	adrp	x3, .LANCHOR0
+	mov	w5, w0
+	add	x3, x3, :lo12:.LANCHOR0
+	mov	w0, 0
+	ldrb	w2, [x3,3861]
+	cmp	w2, 255
+	beq	.L1030
+	ldrh	w8, [x3,3314]
+	mov	w4, 21
+	ldrb	w7, [x3,3312]
+	mov	w0, 1
+	sub	w4, w4, w8
+	ubfx	x9, x5, 21, 3
+	lsl	w4, w0, w4
+	sub	w7, w7, #1
+	sub	w4, w4, #1
+	asr	w5, w5, w8
+	uxth	w7, w7
+	adrp	x10, .L1034
+	uxth	w4, w4
+	and	w5, w5, w7
+	and	w5, w5, w4
+	add	x3, x3, 768
+	add	x10, x10, :lo12:.L1034
+.L1037:
+	add	x0, x3, x2, lsl 6
+	ldr	w6, [x0,40]
+	ubfx	x11, x6, 21, 3
+	cmp	w11, w9
+	bne	.L1031
+	lsr	w6, w6, w8
+	ldrb	w0, [x0,58]
+	and	w6, w7, w6
+	and	w6, w4, w6
+	cmp	w6, w5
+	bne	.L1032
+	cmp	w1, 1
+	beq	.L1035
+	b	.L1030
+.L1032:
+	cmp	w1, 3
+	bhi	.L1031
+	ldrb	w6, [x10,w1,uxtw]
+	adr	x11, .Lrtx1034
+	add	x6, x11, w6, sxtb #2
+	br	x6
+.Lrtx1034:
+	.section	.rodata
+	.align	0
+	.align	2
+.L1034:
+	.byte	(.L1033 - .Lrtx1034) / 4
+	.byte	(.L1035 - .Lrtx1034) / 4
+	.byte	(.L1036 - .Lrtx1034) / 4
+	.byte	(.L1030 - .Lrtx1034) / 4
+	.text
+.L1033:
+	cmp	w0, 2
+	b	.L1046
+.L1035:
+	sub	w6, w0, #6
+	and	w6, w6, -3
+	uxtb	w6, w6
+	cbz	w6, .L1031
+	b	.L1030
+.L1036:
+	cmp	w0, 10
+.L1046:
+	bne	.L1030
+.L1031:
+	lsl	x2, x2, 6
+	ldrb	w2, [x3,x2]
+	cmp	w2, 255
+	bne	.L1037
+	mov	w0, 0
+.L1030:
+	ret
+	.size	queue_lun_state, .-queue_lun_state
+	.align	2
+	.global	queue_remove_completed_req
+	.type	queue_remove_completed_req, %function
+queue_remove_completed_req:
+	adrp	x0, .LANCHOR0
+	add	x1, x0, :lo12:.LANCHOR0
+	ldrb	w2, [x1,3861]
+	cmp	w2, 255
+	beq	.L1048
+	add	x6, x1, 768
+	lsl	x5, x2, 6
+	add	x7, x6, x5
+	ldrb	w3, [x7,58]
+	sub	w3, w3, #11
+	uxtb	w3, w3
+	cmp	w3, 1
+	bhi	.L1048
+	ldrb	w3, [x6,x5]
+	strb	w3, [x1,3861]
+	mov	w3, -1
+	strb	w3, [x6,x5]
+	ldrb	w3, [x7,59]
+	cmp	w3, 1
+	bne	.L1050
+	ldrh	w3, [x7,50]
+	cbnz	w3, .L1051
+	ldrb	w3, [x1,3860]
+	add	x1, x1, 3860
+	b	.L1052
+.L1051:
+	ldrb	w3, [x1,3224]
+	add	x1, x1, 3224
+	b	.L1052
+.L1050:
+	cbnz	w3, .L1048
+	ldr	w3, [x7,36]
+	cmn	w3, #1
+	beq	.L1048
+	ldrb	w3, [x1,2880]
+	add	x1, x1, 2880
+.L1052:
+	cmp	w3, 255
+	add	x0, x0, :lo12:.LANCHOR0
+	bne	.L1056
+	add	x0, x0, x2, lsl 6
+	ldrb	w0, [x0,769]
+	strb	w0, [x1]
+	b	.L1048
+.L1056:
+	add	x0, x0, 768
+.L1063:
+	mov	w1, w3
+	sbfiz	x3, x3, 6, 32
+	ldrb	w3, [x0,x3]
+	cmp	w3, 255
+	bne	.L1063
+	add	x2, x0, x2, lsl 6
+	sbfiz	x1, x1, 6, 32
+	ldrb	w2, [x2,1]
+	strb	w2, [x0,x1]
+.L1048:
+	ret
+	.size	queue_remove_completed_req, .-queue_remove_completed_req
+	.align	2
+	.global	pm_alloc_new_blk
+	.type	pm_alloc_new_blk, %function
+pm_alloc_new_blk:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	str	x23, [sp,48]
+	add	x3, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	ldr	x2, [x3,2848]
+	ldrh	w1, [x2,690]
+	add	w1, w1, 1
+	uxth	w0, w1
+	ldrb	w1, [x3,3244]
+	strh	w0, [x2,690]
+	cmp	w1, w0
+	bls	.L1065
+	add	x0, x2, x0, sxtw 1
+	ldrh	w1, [x0,672]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L1066
+.L1065:
+	adrp	x22, .LC106
+	add	x22, x22, :lo12:.LC106
+.L1078:
+	mov	w0, 1
+	add	x20, x19, :lo12:.LANCHOR0
+	bl	ftl_alloc_sblk
+	uxth	w21, w0
+	mov	w1, 0
+	bl	ftl_erase_sblk
+	ldr	x1, [x20,2848]
+	mov	w0, w21
+	add	x1, x1, 672
+	bl	ftl_get_blk_list_in_sblk
+	uxth	w0, w0
+	cbnz	w0, .L1067
+	mov	w1, w21
+	mov	x0, x22
+	bl	printk
+	ldr	x2, [x20,64]
+	add	x1, x2, x21, uxth 2
+	ldrb	w2, [x1,2]
+	orr	w2, w2, -32
+	strb	w2, [x1,2]
+	b	.L1078
+.L1067:
+	ldr	x1, [x20,2848]
+	mov	w0, 1
+	mov	w2, 65535
+	str	w0, [x20,3864]
+	mov	x20, 0
+	strh	wzr, [x1,690]
+.L1069:
+	add	x3, x1, x20, lsl 1
+	uxth	w0, w20
+	ldrh	w3, [x3,416]
+	cmp	w3, w2
+	beq	.L1068
+	add	x20, x20, 1
+	cmp	x20, 128
+	bne	.L1069
+	adrp	x0, .LC0
+	adrp	x1, .LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 192
+	bl	printk
+	mov	w0, w20
+.L1068:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x1, [x1,2848]
+	add	x0, x1, x0, sxtw 1
+	strh	w21, [x0,416]
+	ldrh	w0, [x1,688]
+	add	w0, w0, 1
+	strh	w0, [x1,688]
+.L1066:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x0,2848]
+	ldrh	w0, [x1,690]
+	add	x0, x0, 336
+	ldrh	w20, [x1,x0,lsl 1]
+	mov	w0, 65533
+	sub	w1, w20, #1
+	cmp	w0, w1, uxth
+	bcs	.L1071
+	adrp	x0, .LC0
+	adrp	x1, .LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 197
+	bl	printk
+.L1071:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 21
+	ldr	x1, [x19,2848]
+	ldrh	w2, [x19,3314]
+	sub	w0, w0, w2
+	strh	wzr, [x1,696]
+	asr	w4, w20, w0
+	strh	w20, [x1,692]
+	strh	w4, [x1,694]
+	adrp	x1, .LANCHOR2
+	ldr	w1, [x1,#:lo12:.LANCHOR2]
+	tbz	x1, 12, .L1075
+	mov	w2, 1
+	mov	w1, w20
+	lsl	w2, w2, w0
+	adrp	x0, .LC107
+	add	x0, x0, :lo12:.LC107
+	sub	w2, w2, #1
+	mov	w3, w20
+	uxth	w4, w4
+	bl	printk
+.L1075:
+	mov	w0, 0
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	pm_alloc_new_blk, .-pm_alloc_new_blk
+	.align	2
+	.global	pm_select_ram_region
+	.type	pm_select_ram_region, %function
+pm_select_ram_region:
+	stp	x29, x30, [sp, -32]!
+	adrp	x2, .LANCHOR0
+	mov	w3, 65535
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	add	x2, x2, :lo12:.LANCHOR0
+	mov	x19, 0
+.L1082:
+	add	x1, x2, 3872
+	lsl	x4, x19, 4
+	uxth	w0, w19
+	ldrh	w4, [x4,x1]
+	cmp	w4, w3
+	beq	.L1081
+	add	x19, x19, 1
+	cmp	x19, 32
+	bne	.L1082
+	mov	x0, 0
+	mov	w3, 32768
+.L1084:
+	add	x2, x1, x0, lsl 4
+	uxth	w4, w0
+	ldrh	w2, [x2,2]
+	tbnz	x2, 15, .L1083
+	cmp	w2, w3
+	bcs	.L1083
+	mov	w3, w2
+	mov	w19, w4
+.L1083:
+	add	x0, x0, 1
+	cmp	x0, 32
+	bne	.L1084
+	cmp	w19, 32
+	mov	w0, w19
+	bne	.L1081
+	adrp	x0, .LANCHOR4+32
+	mov	w2, -1
+	mov	w1, 0
+	ldrb	w3, [x0,#:lo12:.LANCHOR4+32]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 3872
+.L1086:
+	ldrh	w5, [x0,2]
+	cmp	w5, w2
+	bcs	.L1085
+	ldrh	w4, [x0]
+	cmp	w4, w3
+	csel	w2, w2, w5, eq
+	cmp	w4, w3
+	csel	w19, w19, w1, eq
+.L1085:
+	add	w1, w1, 1
+	add	x0, x0, 16
+	uxth	w1, w1
+	cmp	w1, 32
+	bne	.L1086
+	cmp	w19, 32
+	bne	.L1087
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 24
+	mov	w2, 295
+	bl	printk
+.L1087:
+	mov	w0, w19
+.L1081:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	pm_select_ram_region, .-pm_select_ram_region
+	.align	2
+	.global	ftl_memset
+	.type	ftl_memset, %function
+ftl_memset:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memset
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memset, .-ftl_memset
+	.align	2
+	.global	flash_lsb_page_tbl_build
+	.type	flash_lsb_page_tbl_build, %function
+flash_lsb_page_tbl_build:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	cbnz	w0, .L1095
+	mov	x0, 0
+	add	x2, x19, :lo12:.LANCHOR0
+.L1096:
+	add	x1, x2, 212
+	strh	w0, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L1096
+.L1102:
+	adrp	x20, .LANCHOR4
+	mov	w1, 255
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w2, 1024
+	add	x0, x20, 36
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	ftl_memset
+	mov	x0, 0
+	b	.L1097
+.L1095:
+	cmp	w0, 1
+	bne	.L1098
+	mov	x0, 0
+	mov	w4, 3
+	mov	w5, 2
+	add	x3, x19, :lo12:.LANCHOR0
+.L1101:
+	cmp	x0, 3
+	uxth	w2, w0
+	mov	w1, w2
+	bls	.L1099
+	ubfiz	w1, w2, 1, 15
+	and	w2, w2, 1
+	cmp	w2, wzr
+	csel	w2, w4, w5, ne
+	sub	w1, w1, w2
+	uxth	w1, w1
+.L1099:
+	add	x2, x3, 212
+	strh	w1, [x2,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L1101
+	b	.L1102
+.L1098:
+	cmp	w0, 2
+	bne	.L1103
+	mov	w1, 65535
+	mov	x0, 0
+	add	x4, x19, :lo12:.LANCHOR0
+.L1105:
+	add	x3, x4, 212
+	cmp	x0, 1
+	uxth	w2, w0
+	csel	w2, w1, w2, hi
+	add	w1, w1, 2
+	strh	w2, [x3,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	uxth	w1, w1
+	bne	.L1105
+	b	.L1102
+.L1103:
+	cmp	w0, 3
+	bne	.L1106
+	mov	x0, 0
+	mov	w4, 5
+	mov	w5, 4
+	add	x3, x19, :lo12:.LANCHOR0
+.L1109:
+	cmp	x0, 5
+	uxth	w2, w0
+	mov	w1, w2
+	bls	.L1107
+	ubfiz	w1, w2, 1, 15
+	and	w2, w2, 1
+	cmp	w2, wzr
+	csel	w2, w4, w5, ne
+	sub	w1, w1, w2
+	uxth	w1, w1
+.L1107:
+	add	x2, x3, 212
+	strh	w1, [x2,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 256
+	bne	.L1109
+	b	.L1102
+.L1106:
+	cmp	w0, 4
+	bne	.L1110
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w5, 7
+	add	x1, x2, 212
+	mov	w4, 6
+	strh	w0, [x1,8]
+	mov	w0, 5
+	strh	wzr, [x2,212]
+	mov	w2, 1
+	strh	w0, [x1,10]
+	mov	w0, 7
+	strh	w2, [x1,2]
+	mov	w2, 2
+	strh	w0, [x1,12]
+	mov	w0, 8
+	strh	w2, [x1,4]
+	mov	w2, 3
+	strh	w0, [x1,14]
+	mov	w0, 8
+	strh	w2, [x1,6]
+.L1112:
+	and	w3, w0, 1
+	ubfiz	w2, w0, 1, 15
+	add	w0, w0, 1
+	cmp	w3, wzr
+	csel	w3, w5, w4, ne
+	add	x1, x1, 2
+	uxth	w0, w0
+	sub	w2, w2, w3
+	cmp	w0, 256
+	strh	w2, [x1,14]
+	bne	.L1112
+	b	.L1102
+.L1110:
+	cmp	w0, 5
+	bne	.L1113
+	mov	x0, 0
+	add	x2, x19, :lo12:.LANCHOR0
+.L1114:
+	add	x1, x2, 212
+	strh	w0, [x1,x0,lsl 1]
+	add	x0, x0, 1
+	cmp	x0, 16
+	bne	.L1114
+	mov	x0, 0
+.L1115:
+	add	x2, x1, x0
+	add	w3, w0, 16
+	add	x0, x0, 2
+	cmp	x0, 480
+	strh	w3, [x2,32]
+	bne	.L1115
+	b	.L1102
+.L1113:
+	cmp	w0, 8
+	bne	.L1102
+	mov	x0, 0
+	add	x2, x19, :lo12:.LANCHOR0
+.L1116:
+	add	x1, x2, 212
+	strh	w0, [x0,x1]
+	add	x0, x0, 2
+	cmp	x0, 512
+	bne	.L1116
+	b	.L1102
+.L1097:
+	add	x1, x19, 212
+	add	x2, x20, 36
+	ldrh	w1, [x0,x1]
+	add	x0, x0, 2
+	cmp	x0, 512
+	strh	w1, [x2,w1,sxtw 1]
+	bne	.L1097
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	flash_lsb_page_tbl_build, .-flash_lsb_page_tbl_build
+	.align	2
+	.global	flash_die_info_init
+	.type	flash_die_info_init, %function
+flash_die_info_init:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldr	w0, [x19,#:lo12:.LANCHOR2]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	tbz	x0, 12, .L1133
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC4
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC4
+	add	x1, x1, 48
+	bl	printk
+.L1133:
+	add	x25, x19, :lo12:.LANCHOR2
+	adrp	x21, .LANCHOR0
+	add	x20, x21, :lo12:.LANCHOR0
+	adrp	x22, .LANCHOR4
+	add	x26, x22, :lo12:.LANCHOR4
+	mov	w2, 8
+	ldrh	w0, [x25,402]
+	mov	x24, 0
+	ldrb	w1, [x25,388]
+	add	x27, x20, 732
+	strh	w0, [x20,210]
+	add	x25, x25, 377
+	ldrh	w0, [x25,9]
+	strb	wzr, [x20,98]
+	sdiv	w0, w0, w1
+	mov	w1, 0
+	strh	w0, [x26,1060]
+	add	x0, x20, 200
+	bl	ftl_memset
+	add	x0, x26, 1064
+	mov	w1, 0
+	mov	w2, 32
+	bl	ftl_memset
+	ldrb	w23, [x25,-1]
+.L1135:
+	mov	x0, x25
+	add	x1, x27, x24, lsl 3
+	mov	w2, w23
+	bl	flash_mem_cmp8
+	cbnz	w0, .L1134
+	ldrb	w1, [x20,98]
+	add	x2, x26, 1064
+	str	w0, [x2,w1,sxtw 2]
+	add	w0, w1, 1
+	add	x1, x20, x1, sxtw
+	strb	w0, [x20,98]
+	strb	w24, [x1,200]
+.L1134:
+	add	x24, x24, 1
+	cmp	x24, 4
+	bne	.L1135
+	add	x0, x19, :lo12:.LANCHOR2
+	add	x1, x0, 376
+	ldrb	w2, [x1,8]
+	cmp	w2, 2
+	beq	.L1136
+.L1140:
+	add	x19, x19, :lo12:.LANCHOR2
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x22, x22, :lo12:.LANCHOR4
+	ldp	x23, x24, [sp,48]
+	ldrb	w1, [x19,389]
+	ldrb	w0, [x21,98]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	mul	w0, w0, w1
+	ldrh	w1, [x19,390]
+	ldp	x19, x20, [sp,16]
+	mul	w0, w0, w1
+	strh	w0, [x22,1096]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 112
+	ret
+.L1136:
+	add	x24, x21, :lo12:.LANCHOR0
+	ldrh	w20, [x1,14]
+	ldrb	w27, [x1,23]
+	mov	x25, 0
+	and	w20, w20, 65280
+	add	x26, x0, 377
+	ldrh	w2, [x24,210]
+	add	x3, x24, 732
+	add	x4, x22, :lo12:.LANCHOR4
+	mul	w20, w20, w2
+	ldrb	w2, [x1,13]
+	mul	w20, w20, w2
+	lsl	w28, w20, 1
+.L1139:
+	add	x1, x3, x25, lsl 3
+	mov	x0, x26
+	mov	w2, w23
+	str	x4, [x29,96]
+	str	x3, [x29,104]
+	bl	flash_mem_cmp8
+	ldr	x3, [x29,104]
+	ldr	x4, [x29,96]
+	cbnz	w0, .L1137
+	ldrb	w1, [x24,98]
+	add	x0, x4, 1064
+	cmp	w27, wzr
+	csel	w2, w20, w28, eq
+	str	w2, [x0,w1,sxtw 2]
+	add	w0, w1, 1
+	add	x1, x24, x1, sxtw
+	strb	w0, [x24,98]
+	strb	w25, [x1,200]
+.L1137:
+	add	x25, x25, 1
+	cmp	x25, 4
+	bne	.L1139
+	b	.L1140
+	.size	flash_die_info_init, .-flash_die_info_init
+	.align	2
+	.global	lpa_hash_init
+	.type	lpa_hash_init, %function
+lpa_hash_init:
+	stp	x29, x30, [sp, -32]!
+	mov	w1, 255
+	mov	w2, 512
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x0, x19, 3328
+	bl	ftl_memset
+	ldrh	w0, [x19,3276]
+	mov	w1, 255
+	ldrb	w2, [x19,3244]
+	mul	w2, w0, w2
+	ldr	x0, [x19,3848]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	lpa_hash_init, .-lpa_hash_init
+	.align	2
+	.global	lpa_rebuild_hash
+	.type	lpa_rebuild_hash, %function
+lpa_rebuild_hash:
+	adrp	x0, .LANCHOR2
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	str	x19, [sp,16]
+	tbz	x0, 12, .L1151
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC108
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC108
+	add	x1, x1, 72
+	mov	w2, 218
+	mov	w3, 0
+	bl	printk
+.L1151:
+	adrp	x19, .LANCHOR0
+	mov	w1, 255
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w2, 512
+	add	x0, x19, 3328
+	bl	ftl_memset
+	ldrh	w0, [x19,3276]
+	mov	w1, 255
+	ldrb	w2, [x19,3244]
+	mul	w2, w0, w2
+	ldr	x0, [x19,3848]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	mov	w0, 0
+.L1152:
+	ldrh	w1, [x19,3276]
+	ldrb	w2, [x19,3244]
+	mul	w1, w1, w2
+	cmp	w0, w1, lsl 1
+	bge	.L1161
+	uxtw	x2, w0
+	ldr	x1, [x19,3840]
+	ldr	w1, [x1,x2,lsl 2]
+	cmn	w1, #1
+	beq	.L1153
+	uxtb	w1, w1
+	add	x3, x19, 3328
+	ldrh	w4, [x3,w1,sxtw 1]
+	strh	w0, [x3,w1,sxtw 1]
+	ldr	x1, [x19,3848]
+	strh	w4, [x1,x2,lsl 1]
+.L1153:
+	add	w0, w0, 1
+	uxth	w0, w0
+	b	.L1152
+.L1161:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	lpa_rebuild_hash, .-lpa_rebuild_hash
+	.align	2
+	.global	zftl_read_flash_info
+	.type	zftl_read_flash_info, %function
+zftl_read_flash_info:
+	stp	x29, x30, [sp, -32]!
+	mov	w1, 0
+	mov	w2, 11
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	bl	ftl_memset
+	adrp	x1, .LANCHOR2
+	adrp	x0, .LANCHOR0
+	add	x1, x1, :lo12:.LANCHOR2
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x1, x1, 376
+	mov	w5, 1
+	ldrb	w2, [x1,9]
+	ldrh	w3, [x0,210]
+	mul	w2, w2, w3
+	ldrb	w3, [x0,188]
+	strb	w3, [x19,7]
+	uxth	w2, w2
+	strh	w2, [x19,4]
+	ldrb	w3, [x1,13]
+	mul	w2, w3, w2
+	ldrh	w3, [x1,14]
+	strb	wzr, [x19,10]
+	mul	w2, w2, w3
+	ldrb	w3, [x1,8]
+	mul	w2, w2, w3
+	str	w2, [x19]
+	ldrb	w2, [x1,9]
+	strb	w2, [x19,6]
+	mov	w2, 32
+	ldrb	w4, [x0,98]
+	ldrb	w1, [x1,7]
+	strb	w1, [x19,9]
+	mov	x1, 0
+	strb	w2, [x19,8]
+.L1163:
+	cmp	w4, w1, uxtb
+	bls	.L1165
+	add	x2, x0, 200
+	ldrb	w3, [x19,10]
+	ldrb	w2, [x1,x2]
+	add	x1, x1, 1
+	lsl	w2, w5, w2
+	orr	w2, w2, w3
+	strb	w2, [x19,10]
+	b	.L1163
+.L1165:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	zftl_read_flash_info, .-zftl_read_flash_info
+	.align	2
+	.global	gc_init
+	.type	gc_init, %function
+gc_init:
+	stp	x29, x30, [sp, -48]!
+	mov	w1, 0
+	mov	w2, 328
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	adrp	x20, .LANCHOR4
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR4
+	str	x21, [sp,32]
+	add	x21, x19, 2888
+	mov	x0, x21
+	strb	wzr, [x19,3241]
+	strb	wzr, [x20,1098]
+	bl	ftl_memset
+	ldrh	w1, [x19,3276]
+	mov	w0, -1
+	ldrb	w3, [x19,3244]
+	strh	w0, [x19,2888]
+	lsr	w0, w1, 2
+	lsr	w2, w1, 1
+	strh	w0, [x19,2924]
+	strh	w0, [x19,2862]
+	ldrh	w0, [x19,3242]
+	strh	w2, [x19,2926]
+	mul	w2, w1, w3
+	mul	w0, w0, w3
+	strh	w1, [x19,2864]
+	uxth	w2, w2
+	lsl	w0, w0, 2
+	sub	w4, w2, #32
+	strh	w2, [x19,2858]
+	strh	w4, [x19,2860]
+	str	xzr, [x19,2896]
+	strh	wzr, [x19,3278]
+	strh	wzr, [x19,3272]
+	strh	wzr, [x19,3274]
+	bl	ftl_malloc
+	ldrb	w1, [x19,3244]
+	str	x0, [x20,1104]
+	ldrh	w0, [x19,3242]
+	mul	w0, w0, w1
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x20,1112]
+	ldrh	w1, [x19,3242]
+	ldrb	w0, [x19,3244]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x19,3232]
+	ldrb	w1, [x19,3244]
+	ldrh	w0, [x19,3242]
+	mul	w0, w0, w1
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x19,3216]
+	ldrb	w1, [x19,3244]
+	ldrh	w0, [x19,3242]
+	mul	w0, w0, w1
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x20,1120]
+	ldrh	w0, [x19,3280]
+	strh	w0, [x19,2856]
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	gc_init, .-gc_init
+	.align	2
+	.global	gc_static_wearleveling
+	.type	gc_static_wearleveling, %function
+gc_static_wearleveling:
+	stp	x29, x30, [sp, -144]!
+	mov	w1, 10240
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	x6, [x0,2848]
+	ldr	w0, [x6,32]
+	cmp	w0, w1
+	bls	.L1168
+	ldr	w1, [x6,36]
+	add	w1, w1, w0, lsr 10
+	and	w0, w0, 1023
+	str	w1, [x6,36]
+	str	w0, [x6,32]
+.L1168:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,80]
+	ldr	w1, [x0,568]
+	ldr	w2, [x0,12]
+	add	w1, w1, 860160
+	add	w1, w1, 3840
+	cmp	w2, w1
+	bhi	.L1169
+	ldr	w1, [x0,572]
+	ldr	w3, [x6,36]
+	add	w1, w1, 32
+	cmp	w3, w1
+	bls	.L1167
+.L1169:
+	ldr	w1, [x6,36]
+	mov	w9, 0
+	str	w1, [x0,572]
+	mov	w26, 65535
+	str	w2, [x0,568]
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w4, w9
+	mov	w2, w9
+	ldrh	w3, [x6,134]
+	mov	w1, w9
+	ldrh	w11, [x0,56]
+	mov	w22, w9
+	ldr	x10, [x0,64]
+	mov	w21, w9
+	mov	w19, w26
+	mov	w12, w26
+.L1171:
+	cmp	w3, w11
+	bcs	.L1215
+	ubfiz	x0, x3, 2, 16
+	add	x5, x10, x0
+	ldrb	w5, [x5,2]
+	tbz	x5, 3, .L1172
+	ldrh	w5, [x10,x0]
+	and	w8, w5, 2047
+	ldr	w5, [x10,x0]
+	ubfx	x0, x5, 11, 8
+	b	.L1173
+.L1172:
+	tst	w5, 24
+	bne	.L1174
+	ldrh	w5, [x10,x0]
+	mov	w0, 65535
+	and	w8, w5, 2047
+	b	.L1173
+.L1174:
+	ldr	w5, [x10,x0]
+	ubfx	x0, x5, 11, 8
+.L1197:
+	cmp	w19, w0
+	add	w2, w2, 1
+	csel	w19, w19, w0, cc
+	cmp	w21, w0
+	add	w4, w4, w0
+	csel	w0, w21, w0, hi
+	uxth	w2, w2
+	uxth	w19, w19
+	uxth	w21, w0
+.L1198:
+	add	w3, w3, 1
+	uxth	w3, w3
+	b	.L1171
+.L1215:
+	ldrh	w0, [x6,96]
+	cmp	w0, w22
+	bcs	.L1176
+	strh	w22, [x6,96]
+.L1176:
+	ldrh	w0, [x6,98]
+	cmp	w0, w21
+	bcs	.L1177
+	strh	w21, [x6,98]
+.L1177:
+	adrp	x23, .LANCHOR2
+	str	x23, [x29,128]
+	udiv	w3, w9, w1
+	strh	w3, [x6,88]
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	udiv	w4, w4, w2
+	strh	w4, [x6,90]
+	tbz	x0, 10, .L1178
+	adrp	x0, .LC109
+	uxth	w3, w3
+	add	x0, x0, :lo12:.LC109
+	uxth	w4, w4
+	bl	printk
+.L1178:
+	ldr	x0, [x29,128]
+	adrp	x25, .LANCHOR4
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 10, .L1179
+	add	x6, x25, :lo12:.LANCHOR4
+	adrp	x0, .LC110
+	add	x0, x0, :lo12:.LC110
+	mov	w1, w26
+	mov	w2, w19
+	mov	w3, w22
+	ldrh	w5, [x6,1128]
+	mov	w4, w21
+	ldrh	w6, [x6,1130]
+	bl	printk
+.L1179:
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w1, 255
+	mov	w2, 128
+	ldr	x0, [x0,80]
+	add	x0, x0, 264
+	strh	wzr, [x0,-142]
+	bl	ftl_memset
+	add	x1, x25, :lo12:.LANCHOR4
+	sub	w0, w21, w19
+	str	w0, [x29,136]
+	ldrh	w0, [x1,1130]
+	ldr	w2, [x29,136]
+	cmp	w2, w0
+	bgt	.L1180
+	ldrh	w1, [x1,1128]
+	sub	w0, w22, w26
+	cmp	w0, w1
+	bgt	.L1180
+.L1187:
+	cbz	w19, .L1189
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,2848]
+	ldrh	w0, [x0,134]
+	b	.L1190
+.L1180:
+	add	x9, x20, :lo12:.LANCHOR0
+	adrp	x27, .LC112
+	adrp	x28, .LC111
+	mov	w24, 0
+	mov	x23, x9
+	str	w24, [x29,140]
+	ldr	x0, [x9,2848]
+	ldrh	w21, [x0,134]
+	sub	w0, w22, w26
+	str	w0, [x29,124]
+	add	x0, x27, :lo12:.LC112
+	str	x0, [x29,112]
+	add	x0, x28, :lo12:.LC111
+	str	x0, [x29,104]
+.L1183:
+	ldrh	w0, [x23,56]
+	cmp	w0, w21
+	bls	.L1187
+	uxtw	x22, w21
+	ldr	x28, [x23,64]
+	lsl	x27, x22, 2
+	add	x0, x28, x27
+	ldrb	w0, [x0,2]
+	and	w1, w0, 224
+	cmp	w1, 224
+	beq	.L1184
+	tst	w0, 192
+	cset	w2, eq
+	cbnz	w2, .L1184
+	ubfx	x0, x0, 3, 2
+	and	w0, w0, 2
+	uxtb	w1, w0
+	add	x0, x25, :lo12:.LANCHOR4
+	cbz	w1, .L1185
+	ldrh	w0, [x0,1130]
+	ldr	w1, [x29,136]
+	cmp	w1, w0
+	ble	.L1186
+	ldr	w0, [x28,x27]
+	add	w1, w19, 1
+	ubfx	x0, x0, 11, 8
+	cmp	w0, w1
+	bgt	.L1186
+	mov	w1, w2
+	mov	w0, w21
+	mov	w2, 1
+	bl	gc_add_sblk
+	ldr	w0, [x29,140]
+	add	w0, w0, 1
+	str	w0, [x29,140]
+	ldr	x0, [x29,128]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 10, .L1186
+	ldr	x0, [x23,64]
+	ldr	x11, [x23,72]
+	add	x0, x0, x27
+	ldrh	w5, [x28,x27]
+	ldr	w6, [x28,x27]
+	ldrb	w2, [x0,2]
+	ldr	x0, [x29,104]
+	b	.L1214
+.L1185:
+	ldrh	w0, [x0,1128]
+	ldr	w2, [x29,124]
+	cmp	w2, w0
+	ble	.L1186
+	ldrh	w0, [x28,x27]
+	add	w2, w26, 1
+	and	w0, w0, 2047
+	cmp	w0, w2
+	bgt	.L1186
+	mov	w0, w21
+	mov	w2, 1
+	add	w24, w24, 1
+	bl	gc_add_sblk
+	ldr	x0, [x29,128]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 10, .L1186
+	ldr	x0, [x23,64]
+	ldr	x11, [x23,72]
+	add	x0, x0, x27
+	ldrh	w5, [x28,x27]
+	ldr	w6, [x28,x27]
+	ldrb	w2, [x0,2]
+	ldr	x0, [x29,112]
+.L1214:
+	ldrh	w3, [x11,x22,lsl 1]
+	mov	w1, w21
+	ldrh	w4, [x23,2944]
+	ubfx	x2, x2, 5, 3
+	and	w5, w5, 2047
+	ubfx	x6, x6, 11, 8
+	bl	printk
+.L1186:
+	cmp	w24, 4
+	bhi	.L1187
+	ldr	w0, [x29,140]
+	cmp	w0, 4
+	bhi	.L1187
+.L1184:
+	add	w10, w21, 1
+	uxth	w21, w10
+	b	.L1183
+.L1192:
+	ubfiz	x3, x0, 2, 16
+	ldr	x4, [x1,64]
+	ldr	w1, [x4,x3]
+	ubfx	x2, x1, 11, 8
+	cmp	w2, w19
+	bcc	.L1191
+	sub	w2, w2, w19
+	bfi	w1, w2, 11, 8
+	str	w1, [x4,x3]
+.L1191:
+	add	w0, w0, 1
+	uxth	w0, w0
+.L1190:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x1,56]
+	cmp	w2, w0
+	bhi	.L1192
+	ldr	x0, [x1,2848]
+	ldrh	w1, [x0,72]
+	add	w1, w19, w1
+	strh	w1, [x0,72]
+	ldrh	w1, [x0,98]
+	cmp	w1, w19
+	bls	.L1189
+	sub	w19, w1, w19
+	strh	w19, [x0,98]
+.L1189:
+	cbz	w26, .L1167
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,2848]
+	ldrh	w0, [x0,134]
+.L1194:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x1,56]
+	cmp	w2, w0
+	bls	.L1216
+	ubfiz	x3, x0, 2, 16
+	ldr	x4, [x1,64]
+	ldrh	w1, [x4,x3]
+	and	w2, w1, 2047
+	cmp	w2, w26
+	blt	.L1195
+	sub	w2, w2, w26
+	bfi	w1, w2, 0, 11
+	strh	w1, [x4,x3]
+.L1195:
+	add	w0, w0, 1
+	uxth	w0, w0
+	b	.L1194
+.L1216:
+	ldr	x0, [x1,2848]
+	ldrh	w1, [x0,74]
+	add	w1, w26, w1
+	strh	w1, [x0,74]
+	ldrh	w1, [x0,96]
+	cmp	w1, w26
+	bls	.L1167
+	sub	w7, w1, w26
+	strh	w7, [x0,96]
+	b	.L1167
+.L1173:
+	cmp	w26, w8
+	add	w1, w1, 1
+	csel	w7, w26, w8, cc
+	cmp	w22, w8
+	add	w9, w9, w8
+	csel	w8, w22, w8, hi
+	cmp	w0, w12
+	uxth	w1, w1
+	uxth	w26, w7
+	uxth	w22, w8
+	bne	.L1197
+	b	.L1198
+.L1167:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	gc_static_wearleveling, .-gc_static_wearleveling
+	.align	2
+	.global	zftl_sblk_list_init
+	.type	zftl_sblk_list_init, %function
+zftl_sblk_list_init:
+	stp	x29, x30, [sp, -112]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w24, 6
+	mov	w23, 32768
+	ldrh	w2, [x19,56]
+	adrp	x26, .LC113
+	ldr	x0, [x19,8]
+	mov	w25, -1
+	add	x26, x26, :lo12:.LC113
+	mul	w2, w2, w24
+	bl	ftl_memset
+	ldrh	w22, [x19,3276]
+	ldrb	w0, [x19,3244]
+	str	xzr, [x19,3288]
+	str	xzr, [x19,3296]
+	mul	w22, w0, w22
+	str	xzr, [x19,3304]
+	str	xzr, [x19,3264]
+	sdiv	w22, w23, w22
+	str	xzr, [x19,3256]
+	str	xzr, [x19,3248]
+	strh	wzr, [x19,2828]
+	strh	wzr, [x19,2830]
+	strh	wzr, [x19,2832]
+	strh	wzr, [x19,2834]
+	strh	wzr, [x19,2838]
+	strh	wzr, [x19,2836]
+	sxth	w0, w22
+	str	w0, [x29,108]
+	ldr	x0, [x19,2848]
+	ldrsh	w19, [x0,134]
+	strh	wzr, [x0,146]
+.L1218:
+	add	x1, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x1,56]
+	cmp	w19, w0
+	bge	.L1248
+	sxtw	x22, w19
+	ldr	x27, [x1,64]
+	ldr	w2, [x29,108]
+	add	x27, x27, x22, lsl 2
+	ldrb	w0, [x27,3]
+	cbz	w0, .L1219
+	mov	w0, 0
+	ldrb	w5, [x1,3244]
+	ldrh	w6, [x1,3276]
+	mov	w2, w0
+	ldr	x4, [x1,2848]
+.L1220:
+	cmp	w0, w5
+	bge	.L1249
+	ldrb	w1, [x27,3]
+	asr	w1, w1, w0
+	tbnz	x1, 0, .L1221
+	add	w2, w6, w2
+	sxth	w2, w2
+	b	.L1222
+.L1221:
+	ldrh	w1, [x4,146]
+	add	w1, w1, 1
+	strh	w1, [x4,146]
+.L1222:
+	add	w0, w0, 1
+	b	.L1220
+.L1249:
+	cbz	w2, .L1224
+	sdiv	w2, w23, w2
+	sxth	w2, w2
+	b	.L1219
+.L1224:
+	ldrb	w0, [x27,2]
+	orr	w0, w0, -32
+	strb	w0, [x27,2]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x0, [x0,72]
+	strh	w25, [x0,x22,lsl 1]
+.L1219:
+	add	x20, x21, :lo12:.LANCHOR0
+	smull	x0, w19, w24
+	ldr	x1, [x20,8]
+	add	x1, x1, x0
+	strh	w2, [x1,4]
+	ldr	x1, [x20,8]
+	add	x2, x1, x0
+	strh	w25, [x2,2]
+	strh	w25, [x1,x0]
+	ldrb	w1, [x27,2]
+	and	w0, w1, 224
+	cmp	w0, 224
+	beq	.L1227
+	cmp	w0, 32
+	cset	w28, eq
+	cbnz	w28, .L1227
+	ldr	x2, [x20,80]
+	ldrh	w4, [x2,16]
+	cmp	w19, w4
+	beq	.L1227
+	ldrh	w4, [x2,48]
+	cmp	w19, w4
+	beq	.L1227
+	ldrh	w2, [x2,80]
+	cmp	w19, w2
+	beq	.L1227
+	cmp	w0, 64
+	bne	.L1229
+	uxth	w27, w19
+	add	x0, x20, 3256
+	mov	w1, w27
+	add	x2, x20, 2834
+	b	.L1246
+.L1229:
+	cmp	w0, 96
+	bne	.L1230
+	uxth	w27, w19
+	add	x0, x20, 3264
+	mov	w1, w27
+	add	x2, x20, 2836
+	b	.L1246
+.L1230:
+	cmp	w0, 160
+	bne	.L1231
+	uxth	w27, w19
+	add	x0, x20, 3248
+	mov	w1, w27
+	add	x2, x20, 2838
+.L1246:
+	bl	_insert_data_list
+	ldr	x0, [x20,72]
+	ldrh	w0, [x0,x22,lsl 1]
+	cmp	w0, 7
+	bhi	.L1227
+	mov	w0, w27
+	mov	w1, 1
+	mov	w2, w28
+	b	.L1244
+.L1231:
+	cbnz	w0, .L1227
+	ldr	x0, [x20,72]
+	ldrh	w2, [x0,x22,lsl 1]
+	cbz	w2, .L1232
+	mov	x0, x26
+	mov	w1, w19
+	bl	printk
+	ldrb	w0, [x27,2]
+	tbz	x0, 4, .L1233
+	mov	w1, 5
+	b	.L1240
+.L1233:
+	mov	w1, 2
+.L1240:
+	bfi	w0, w1, 5, 3
+	mov	w2, 0
+	strb	w0, [x27,2]
+	mov	w1, 1
+	mov	w0, w19
+.L1244:
+	bl	gc_add_sblk
+	b	.L1227
+.L1232:
+	ands	w1, w1, 24
+	add	x2, x21, :lo12:.LANCHOR0
+	bne	.L1235
+	add	x0, x2, 3288
+	mov	w1, w19
+	add	x2, x2, 2828
+	b	.L1242
+.L1235:
+	cmp	w1, 16
+	bne	.L1236
+	add	x0, x2, 3296
+	mov	w1, w19
+	add	x2, x2, 2830
+	b	.L1242
+.L1236:
+	add	x0, x2, 3304
+	mov	w1, w19
+	add	x2, x2, 2832
+.L1242:
+	bl	_insert_free_list
+.L1227:
+	add	w19, w19, 1
+	sxth	w19, w19
+	b	.L1218
+.L1248:
+	ldr	x0, [x1,2848]
+	ldrh	w2, [x1,2828]
+	strh	w2, [x0,114]
+	ldrh	w2, [x1,2830]
+	strh	w2, [x0,118]
+	ldrh	w2, [x1,2832]
+	strh	w2, [x0,116]
+	ldrh	w2, [x1,2834]
+	strh	w2, [x0,122]
+	ldrh	w2, [x1,2838]
+	ldrh	w1, [x1,2836]
+	strh	w2, [x0,120]
+	strh	w1, [x0,124]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	zftl_sblk_list_init, .-zftl_sblk_list_init
+	.align	2
+	.global	ftl_open_sblk_init
+	.type	ftl_open_sblk_init, %function
+ftl_open_sblk_init:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	adrp	x20, .LC106
+	adrp	x23, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	mov	x19, x0
+	mov	w21, w1
+	add	x25, x0, 16
+	mov	x26, x23
+	add	x20, x20, :lo12:.LC106
+	mov	w24, -1
+.L1251:
+.L1254:
+	mov	w0, w21
+	bl	ftl_alloc_sblk
+	uxth	w22, w0
+	mov	w1, 0
+	bl	ftl_erase_sblk
+	mov	x1, x25
+	mov	w0, w22
+	bl	ftl_get_blk_list_in_sblk
+	uxtb	w2, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	strh	w22, [x19]
+	strb	w2, [x19,9]
+	cmp	w21, 2
+	strh	wzr, [x19,2]
+	mov	w3, 0
+	ldrh	w1, [x0,3276]
+	strb	wzr, [x19,5]
+	strh	wzr, [x19,10]
+	mul	w2, w1, w2
+	strh	w2, [x19,6]
+	strb	w21, [x19,4]
+	beq	.L1252
+	ldrb	w3, [x0,3244]
+	mul	w3, w1, w3
+	uxth	w3, w3
+.L1252:
+	add	x27, x26, :lo12:.LANCHOR0
+	strh	w3, [x19,12]
+	ubfiz	x28, x22, 1, 16
+	ldrb	w2, [x27,3244]
+	ldr	x0, [x27,3840]
+	add	x0, x0, x3, uxth 2
+	mul	w2, w1, w2
+	mov	w1, 255
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldr	x0, [x27,72]
+	ldrh	w1, [x19,6]
+	strh	w1, [x0,x28]
+	ldrb	w0, [x19,9]
+	cbnz	w0, .L1250
+	mov	x0, x20
+	mov	w1, w22
+	bl	printk
+	ldr	x0, [x27,72]
+	strh	w24, [x0,x28]
+	mov	w0, 7
+	strb	w0, [x19,4]
+	b	.L1254
+.L1250:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ftl_open_sblk_init, .-ftl_open_sblk_init
+	.align	2
+	.global	pm_free_sblk
+	.type	pm_free_sblk, %function
+pm_free_sblk:
+	stp	x29, x30, [sp, -368]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR4
+	add	x0, x23, :lo12:.LANCHOR4
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldrh	w0, [x0,1132]
+	cmp	w0, 128
+	bls	.L1257
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 96
+	mov	w2, 76
+	bl	printk
+.L1257:
+	add	x28, x29, 112
+	mov	w1, 0
+	mov	w2, 256
+	mov	x0, x28
+	adrp	x21, .LANCHOR0
+	bl	ftl_memset
+	add	x2, x21, :lo12:.LANCHOR0
+	mov	w0, 21
+	mov	w1, 1
+	mov	x3, 0
+	ldrh	w6, [x2,3314]
+	ldr	x4, [x2,2848]
+	sub	w0, w0, w6
+	ldrb	w8, [x2,3312]
+	lsl	w0, w1, w0
+	add	x1, x23, :lo12:.LANCHOR4
+	ldrh	w7, [x4,698]
+	sub	w0, w0, #1
+	ldrh	w9, [x1,1132]
+.L1258:
+	cmp	w7, w3, uxth
+	bls	.L1283
+	add	x1, x4, x3, lsl 2
+	mov	x2, 0
+	ldr	w1, [x1,704]
+	lsr	w1, w1, w6
+	and	w1, w1, w0
+	udiv	w1, w1, w8
+	uxth	w1, w1
+.L1259:
+	cmp	w9, w2, uxth
+	bls	.L1284
+	add	x5, x4, x2, lsl 1
+	ldrh	w5, [x5,416]
+	cmp	w5, w1
+	bne	.L1260
+	ldrh	w5, [x28,x2,lsl 1]
+	add	w5, w5, 1
+	strh	w5, [x28,x2,lsl 1]
+.L1260:
+	add	x2, x2, 1
+	b	.L1259
+.L1284:
+	add	x3, x3, 1
+	b	.L1258
+.L1283:
+	add	x1, x21, :lo12:.LANCHOR0
+	mov	w25, 0
+	adrp	x24, .LC114
+	mov	w19, w25
+	adrp	x26, .LANCHOR2
+	mov	w27, -1
+	ldrb	w0, [x1,3244]
+	add	x24, x24, :lo12:.LC114
+	ldrh	w20, [x1,3276]
+	mul	w20, w0, w20
+	uxth	w20, w20
+.L1263:
+	add	x0, x23, :lo12:.LANCHOR4
+	ldrh	w0, [x0,1132]
+	cmp	w0, w19
+	bls	.L1285
+	add	x0, x21, :lo12:.LANCHOR0
+	sxtw	x22, w19
+	add	x1, x22, 208
+	ldr	x4, [x0,2848]
+	ldrb	w2, [x0,3312]
+	ldrh	w3, [x4,x1,lsl 1]
+	ldrh	w1, [x4,692]
+	sdiv	w1, w1, w2
+	cmp	w1, w3
+	bne	.L1264
+	ldrb	w1, [x0,3244]
+	ldrh	w0, [x0,3276]
+	mul	w0, w1, w0
+	strh	w0, [x28,w19,sxtw 1]
+.L1264:
+	ldrh	w0, [x28,x22,lsl 1]
+	cmp	w20, w0
+	bls	.L1265
+	cmp	w0, wzr
+	csel	w25, w25, w19, eq
+	csel	w20, w20, w0, eq
+.L1265:
+	cbnz	w0, .L1267
+	mov	w0, 65535
+	cmp	w3, w0
+	beq	.L1267
+	ldr	w0, [x26,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L1268
+	ldrh	w4, [x4,688]
+	mov	x0, x24
+	mov	w1, w19
+	mov	w2, 0
+	bl	printk
+.L1268:
+	add	x1, x21, :lo12:.LANCHOR0
+	add	x22, x22, 208
+	str	x1, [x29,104]
+	ldr	x0, [x1,2848]
+	ldrh	w0, [x0,x22,lsl 1]
+	bl	ftl_free_sblk
+	ldr	x1, [x29,104]
+	ldr	x0, [x1,2848]
+	strh	w27, [x0,x22,lsl 1]
+	ldrh	w1, [x0,688]
+	sub	w1, w1, #1
+	strh	w1, [x0,688]
+.L1267:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L1263
+.L1285:
+	mov	w0, w25
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 368
+	ret
+	.size	pm_free_sblk, .-pm_free_sblk
+	.align	2
+	.global	ftl_memcpy
+	.type	ftl_memcpy, %function
+ftl_memcpy:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memcpy
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memcpy, .-ftl_memcpy
+	.align	2
+	.global	flash_into_data_init
+	.type	flash_into_data_init, %function
+flash_into_data_init:
+	adrp	x1, .LANCHOR2
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	ldr	w0, [x1,#:lo12:.LANCHOR2]
+	stp	x19, x20, [sp,16]
+	mov	x20, x1
+	tbz	x0, 12, .L1288
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC115
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC115
+	mov	w1, 100
+	add	x2, x2, 112
+	bl	printk
+.L1288:
+	adrp	x19, .LANCHOR0
+	mov	w1, 0
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w2, 2048
+	ldr	x0, [x19,192]
+	bl	ftl_memset
+	ldr	x1, [x19,192]
+	mov	w0, 21321
+	movk	w0, 0x5359, lsl 16
+	mov	w2, 32
+	str	w0, [x1]
+	mov	w1, 2032
+	ldr	x0, [x19,192]
+	add	x0, x0, 80
+	str	w1, [x0,-72]
+	mov	w1, 1
+	strh	w1, [x0,-64]
+	add	x1, x19, 104
+	bl	ftl_memcpy
+	ldr	x0, [x19,192]
+	add	x1, x20, :lo12:.LANCHOR2
+	add	x1, x1, 376
+	mov	w2, 32
+	add	x0, x0, 48
+	bl	ftl_memcpy
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	flash_into_data_init, .-flash_into_data_init
+	.align	2
+	.global	ftl_memcpy32
+	.type	ftl_memcpy32, %function
+ftl_memcpy32:
+	mov	x3, 0
+.L1293:
+	cmp	w2, w3
+	bls	.L1295
+	ldr	w4, [x1,x3,lsl 2]
+	str	w4, [x0,x3,lsl 2]
+	add	x3, x3, 1
+	b	.L1293
+.L1295:
+	ret
+	.size	ftl_memcpy32, .-ftl_memcpy32
+	.align	2
+	.global	ftl_memcmp
+	.type	ftl_memcmp, %function
+ftl_memcmp:
+	stp	x29, x30, [sp, -16]!
+	uxtw	x2, w2
+	add	x29, sp, 0
+	bl	memcmp
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_memcmp, .-ftl_memcmp
+	.align	2
+	.global	js_hash
+	.type	js_hash, %function
+js_hash:
+	mov	x5, x0
+	mov	w0, 42982
+	mov	x2, 0
+	movk	w0, 0x47c6, lsl 16
+.L1298:
+	cmp	w1, w2
+	bls	.L1300
+	lsl	w3, w0, 5
+	ldrb	w4, [x5,x2]
+	add	w3, w3, w0, lsr 2
+	add	x2, x2, 1
+	add	w3, w3, w4
+	eor	w0, w0, w3
+	b	.L1298
+.L1300:
+	ret
+	.size	js_hash, .-js_hash
+	.align	2
+	.global	timer_get_time
+	.type	timer_get_time, %function
+timer_get_time:
+	adrp	x0, jiffies
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x1, [x0,#:lo12:jiffies]
+	adrp	x0, .LANCHOR4+1136
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1136]
+	sub	x0, x1, x0
+	bl	jiffies_to_msecs
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	timer_get_time, .-timer_get_time
+	.align	2
+	.global	StorageSysDataLoad
+	.type	StorageSysDataLoad, %function
+StorageSysDataLoad:
+	stp	x29, x30, [sp, -48]!
+	mov	w2, 512
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w0
+	mov	x19, x1
+	mov	x0, x1
+	mov	w1, 0
+	bl	ftl_memset
+	bl	rknand_device_lock
+	adrp	x0, .LANCHOR4+1144
+	mov	x2, x19
+	mov	w1, 1
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x3, [x0,24]
+	mov	w0, w20
+	blr	x3
+	str	x0, [x29,40]
+	bl	rknand_device_unlock
+	ldr	x0, [x29,40]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	StorageSysDataLoad, .-StorageSysDataLoad
+	.align	2
+	.global	StorageSysDataStore
+	.type	StorageSysDataStore, %function
+StorageSysDataStore:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x0, [x29,16]
+	str	x1, [x29,24]
+	bl	rknand_device_lock
+	adrp	x1, .LANCHOR4+1144
+	ldr	x2, [x29,24]
+	ldr	x0, [x29,16]
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x3, [x1,32]
+	mov	w1, 1
+	blr	x3
+	str	x0, [x29,24]
+	bl	rknand_device_unlock
+	ldr	x0, [x29,24]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	StorageSysDataStore, .-StorageSysDataStore
+	.align	2
+	.global	FlashBootVendorRead
+	.type	FlashBootVendorRead, %function
+FlashBootVendorRead:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x0, [x29,24]
+	str	x1, [x29,32]
+	str	x2, [x29,40]
+	bl	rknand_device_lock
+	adrp	x3, .LANCHOR4+1144
+	ldr	x1, [x29,32]
+	ldr	x2, [x29,40]
+	ldr	x0, [x29,24]
+	ldr	x3, [x3,#:lo12:.LANCHOR4+1144]
+	ldr	x3, [x3,8]
+	blr	x3
+	str	x0, [x29,40]
+	bl	rknand_device_unlock
+	ldr	x0, [x29,40]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashBootVendorRead, .-FlashBootVendorRead
+	.align	2
+	.global	FlashBootVendorWrite
+	.type	FlashBootVendorWrite, %function
+FlashBootVendorWrite:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	str	x0, [x29,24]
+	str	x1, [x29,32]
+	str	x2, [x29,40]
+	bl	rknand_device_lock
+	adrp	x3, .LANCHOR4+1144
+	ldr	x1, [x29,32]
+	ldr	x2, [x29,40]
+	ldr	x0, [x29,24]
+	ldr	x3, [x3,#:lo12:.LANCHOR4+1144]
+	ldr	x3, [x3,16]
+	blr	x3
+	str	x0, [x29,40]
+	bl	rknand_device_unlock
+	ldr	x0, [x29,40]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	FlashBootVendorWrite, .-FlashBootVendorWrite
+	.align	2
+	.global	flash_sram_load_store
+	.type	flash_sram_load_store, %function
+flash_sram_load_store:
+	adrp	x4, .LANCHOR4+1152
+	mov	x6, x0
+	stp	x29, x30, [sp, -16]!
+	uxtw	x1, w1
+	add	x29, sp, 0
+	ldr	x4, [x4,#:lo12:.LANCHOR4+1152]
+	add	x4, x4, 4096
+	cbnz	w2, .L1307
+	add	x1, x4, x1
+	b	.L1309
+.L1307:
+	add	x0, x4, x1
+	mov	x1, x6
+.L1309:
+	mov	w2, w3
+	bl	ftl_memcpy
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_sram_load_store, .-flash_sram_load_store
+	.align	2
+	.global	FlashCs123Init
+	.type	FlashCs123Init, %function
+FlashCs123Init:
+	ret
+	.size	FlashCs123Init, .-FlashCs123Init
+	.align	2
+	.global	rk_ftl_de_init
+	.type	rk_ftl_de_init, %function
+rk_ftl_de_init:
+	stp	x29, x30, [sp, -16]!
+	adrp	x0, .LC116
+	mov	w1, 0
+	add	x29, sp, 0
+	add	x0, x0, :lo12:.LC116
+	bl	printk
+	adrp	x0, .LANCHOR4+1144
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,80]
+	blr	x0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_ftl_de_init, .-rk_ftl_de_init
+	.align	2
+	.global	rk_ftl_cache_write_back
+	.type	rk_ftl_cache_write_back, %function
+rk_ftl_cache_write_back:
+	adrp	x0, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x0,64]
+	mov	w0, 0
+	blr	x1
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_ftl_cache_write_back, .-rk_ftl_cache_write_back
+	.align	2
+	.global	rk_nand_suspend
+	.type	rk_nand_suspend, %function
+rk_nand_suspend:
+	adrp	x0, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,88]
+	blr	x0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nand_suspend, .-rk_nand_suspend
+	.align	2
+	.global	rk_nand_resume
+	.type	rk_nand_resume, %function
+rk_nand_resume:
+	adrp	x0, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x0, [x0,96]
+	blr	x0
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nand_resume, .-rk_nand_resume
+	.align	2
+	.global	rk_ftl_get_capacity
+	.type	rk_ftl_get_capacity, %function
+rk_ftl_get_capacity:
+	adrp	x0, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x0, [x0,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x0,72]
+	mov	w0, 0
+	blr	x1
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_ftl_get_capacity, .-rk_ftl_get_capacity
+	.align	2
+	.global	rk_nandc_get_irq_status
+	.type	rk_nandc_get_irq_status, %function
+rk_nandc_get_irq_status:
+	adrp	x1, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x1,120]
+	blr	x1
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_nandc_get_irq_status, .-rk_nandc_get_irq_status
+	.align	2
+	.global	rknand_proc_ftlread
+	.type	rknand_proc_ftlread, %function
+rknand_proc_ftlread:
+	adrp	x1, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x1,128]
+	blr	x1
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rknand_proc_ftlread, .-rknand_proc_ftlread
+	.align	2
+	.global	FtlWrite
+	.type	FtlWrite, %function
+FtlWrite:
+	adrp	x4, .LANCHOR4+1144
+	uxtb	w0, w0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x4, [x4,#:lo12:.LANCHOR4+1144]
+	ldr	x4, [x4,48]
+	blr	x4
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlWrite, .-FtlWrite
+	.align	2
+	.global	FtlRead
+	.type	FtlRead, %function
+FtlRead:
+	adrp	x4, .LANCHOR4+1144
+	uxtb	w0, w0
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x4, [x4,#:lo12:.LANCHOR4+1144]
+	ldr	x4, [x4,40]
+	blr	x4
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlRead, .-FtlRead
+	.align	2
+	.global	FtlDiscard
+	.type	FtlDiscard, %function
+FtlDiscard:
+	adrp	x2, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x2, [x2,#:lo12:.LANCHOR4+1144]
+	ldr	x2, [x2,56]
+	blr	x2
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	FtlDiscard, .-FtlDiscard
+	.align	2
+	.global	rk_ftl_garbage_collect
+	.type	rk_ftl_garbage_collect, %function
+rk_ftl_garbage_collect:
+	adrp	x2, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x2, [x2,#:lo12:.LANCHOR4+1144]
+	ldr	x2, [x2,104]
+	blr	x2
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	rk_ftl_garbage_collect, .-rk_ftl_garbage_collect
+	.align	2
+	.global	ReadFlashInfo
+	.type	ReadFlashInfo, %function
+ReadFlashInfo:
+	adrp	x1, .LANCHOR4+1144
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldr	x1, [x1,#:lo12:.LANCHOR4+1144]
+	ldr	x1, [x1,112]
+	blr	x1
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ReadFlashInfo, .-ReadFlashInfo
+	.align	2
+	.global	rknand_print_hex
+	.type	rknand_print_hex, %function
+rknand_print_hex:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x19, 0
+	adrp	x23, .LC117
+	adrp	x21, .LC118
+	adrp	x24, .LC1
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x22, x1
+	mov	x27, x0
+	mov	w25, w2
+	uxtw	x26, w3
+	mov	w20, w19
+	add	x23, x23, :lo12:.LC117
+	add	x21, x21, :lo12:.LC118
+	add	x24, x24, :lo12:.LC1
+.L1324:
+	cmp	x19, x26
+	beq	.L1332
+	cbnz	w20, .L1325
+	mov	x0, x23
+	mov	x1, x27
+	mov	x2, x22
+	mov	w3, w19
+	bl	printk
+.L1325:
+	cmp	w25, 4
+	mov	x0, x21
+	bne	.L1326
+	ldr	w1, [x22,x19,lsl 2]
+	b	.L1331
+.L1326:
+	cmp	w25, 2
+	bne	.L1328
+	ldrsh	w1, [x22,x19,lsl 1]
+	b	.L1331
+.L1328:
+	ldrb	w1, [x22,x19]
+.L1331:
+	bl	printk
+	add	w20, w20, 1
+	cmp	w20, 15
+	bls	.L1329
+	adrp	x1, .LC119
+	mov	x0, x24
+	add	x1, x1, :lo12:.LC119
+	mov	w20, 0
+	bl	printk
+.L1329:
+	add	x19, x19, 1
+	b	.L1324
+.L1332:
+	adrp	x0, .LC1
+	adrp	x1, .LC119
+	add	x1, x1, :lo12:.LC119
+	add	x0, x0, :lo12:.LC1
+	bl	printk
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	rknand_print_hex, .-rknand_print_hex
+	.align	2
+	.global	hynix_get_read_retry_default
+	.type	hynix_get_read_retry_default, %function
+hynix_get_read_retry_default:
+	stp	x29, x30, [sp, -144]!
+	mov	w2, -83
+	mov	w1, -82
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	mov	w25, w0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	cmp	w25, 2
+	str	x19, [x29,128]
+	ldr	x27, [x0,192]
+	add	x0, x27, 112
+	str	x0, [x29,136]
+	mov	w0, -84
+	strb	w25, [x27,112]
+	strb	w0, [x27,128]
+	mov	w0, -81
+	strb	w2, [x27,129]
+	add	x26, x27, 128
+	strb	w1, [x27,130]
+	strb	w0, [x27,131]
+	bne	.L1334
+	ldr	x1, [x29,136]
+	mov	w0, -89
+	strb	w0, [x1,16]
+	adrp	x0, .LANCHOR2+425
+	mov	w1, -9
+	strb	w1, [x0,#:lo12:.LANCHOR2+425]
+	b	.L1389
+.L1334:
+	cmp	w25, 3
+	bne	.L1336
+	mov	x4, 0
+.L1337:
+	sub	w0, w4, #80
+	strb	w0, [x26,x4]
+	add	x4, x4, 1
+	cmp	x4, 8
+	bne	.L1337
+	mov	w21, w4
+	mov	w28, w4
+	b	.L1335
+.L1336:
+	cmp	w25, 4
+	bne	.L1338
+	mov	w4, -52
+	strb	w4, [x27,128]
+	mov	w4, -65
+	strb	w4, [x27,129]
+	mov	w4, -86
+	mov	w21, 8
+	strb	w4, [x27,130]
+	mov	w4, -85
+	strb	w2, [x27,133]
+	mov	w28, w21
+	strb	w4, [x27,131]
+	mov	w4, -51
+	strb	w1, [x27,134]
+	strb	w4, [x27,132]
+	strb	w0, [x27,135]
+	b	.L1335
+.L1338:
+	cmp	w25, 5
+	bne	.L1339
+	mov	w0, 56
+	strb	w0, [x27,128]
+	mov	w0, 57
+	strb	w0, [x27,129]
+	mov	w0, 58
+	mov	w21, 8
+	strb	w0, [x27,130]
+	mov	w0, 59
+	strb	w0, [x27,131]
+	b	.L1423
+.L1339:
+	cmp	w25, 6
+	bne	.L1340
+	mov	w0, 14
+	strb	w0, [x27,128]
+	mov	w0, 15
+	strb	w0, [x27,129]
+	mov	w0, 16
+	mov	w21, 12
+	strb	w0, [x27,130]
+	mov	w0, 17
+	strb	w0, [x27,131]
+	b	.L1423
+.L1340:
+	cmp	w25, 7
+	bne	.L1389
+	mov	x0, 0
+.L1341:
+	sub	w1, w0, #80
+	strb	w1, [x26,x0]
+	add	x0, x0, 1
+	cmp	x0, 8
+	bne	.L1341
+	mov	w0, -44
+	mov	w21, 12
+	strb	w0, [x27,136]
+	mov	w28, 10
+	mov	w0, -43
+	strb	w0, [x27,137]
+	b	.L1335
+.L1389:
+	mov	w21, 7
+.L1423:
+	mov	w28, 4
+.L1335:
+	sub	w0, w25, #1
+	cmp	w0, 1
+	bhi	.L1420
+	ldr	x0, [x29,128]
+	adrp	x24, .LANCHOR2
+	add	x24, x24, :lo12:.LANCHOR2
+	mov	w23, 0
+	add	x19, x0, :lo12:.LANCHOR0
+	mov	w27, 55
+	add	x24, x24, 408
+.L1342:
+	ldrb	w0, [x19,98]
+	cmp	w0, w23
+	bls	.L1349
+	add	x0, x19, x23, sxtw
+	ldr	x2, [x29,136]
+	ldrb	w0, [x0,200]
+	mov	x20, 160
+	ldr	x22, [x19,16]
+	mov	x25, 0
+	ubfiz	x1, x0, 8, 8
+	madd	x20, x0, x20, x2
+	add	x22, x22, x1
+	add	x20, x20, 32
+.L1344:
+	str	w27, [x22,2056]
+	ldrb	w0, [x26,x25]
+	str	w0, [x22,2052]
+	mov	w0, 80
+	bl	timer_delay_ns
+	ldr	w0, [x22,2048]
+	strb	w0, [x20,x25]
+	add	x25, x25, 1
+	cmp	w28, w25, uxtb
+	bhi	.L1344
+	mov	x0, 0
+.L1345:
+	add	w2, w0, 8
+	mov	x1, 0
+.L1346:
+	add	x3, x1, x0
+	add	x1, x1, 4
+	add	x3, x24, x3
+	cmp	x1, 24
+	ldrb	w5, [x3,4]
+	ldrb	w3, [x20,x0]
+	add	w3, w5, w3
+	strb	w3, [x20,w2,sxtw]
+	add	w2, w2, 8
+	bne	.L1346
+	add	x0, x0, 1
+	cmp	x0, 4
+	bne	.L1345
+	add	w23, w23, 1
+	strb	wzr, [x20,16]
+	strb	wzr, [x20,24]
+	strb	wzr, [x20,32]
+	uxtb	w23, w23
+	strb	wzr, [x20,40]
+	strb	wzr, [x20,48]
+	strb	wzr, [x20,41]
+	strb	wzr, [x20,49]
+	b	.L1342
+.L1420:
+	sub	w0, w25, #3
+	cmp	w0, 4
+	bhi	.L1349
+	mul	w0, w28, w21
+	sub	w23, w28, #1
+	mov	w20, 0
+	asr	w22, w0, 2
+	lsl	w0, w0, 4
+	uxtb	x23, w23
+	str	w0, [x29,120]
+	lsl	w0, w22, 1
+	sub	w19, w25, #5
+	str	w0, [x29,124]
+	adrp	x26, .LANCHOR4
+	add	x0, x23, 1
+	str	x0, [x29,112]
+.L1350:
+	ldr	x0, [x29,128]
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w1, [x0,98]
+	cmp	w1, w20
+	bhi	.L1388
+.L1349:
+	ldr	x0, [x29,136]
+	strb	w28, [x0,1]
+	strb	w21, [x0,2]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+.L1388:
+	add	x1, x0, x20, sxtw
+	ldrb	w1, [x1,200]
+	ldr	x0, [x0,16]
+	mov	x24, 160
+	ubfiz	x2, x1, 8, 8
+	ldr	x3, [x29,136]
+	add	x23, x0, x2
+	madd	x24, x1, x24, x3
+	mov	w1, 255
+	str	w1, [x23,2056]
+	str	x1, [x29,104]
+	add	x24, x24, 32
+	bl	nandc_wait_flash_ready
+	mov	w0, 54
+	cmp	w25, 4
+	str	w0, [x23,2056]
+	ldr	x1, [x29,104]
+	bne	.L1351
+	mov	w0, 64
+	str	w1, [x23,2052]
+	str	w0, [x23,2048]
+	mov	w0, 204
+	b	.L1424
+.L1351:
+	cmp	w19, 1
+	bhi	.L1353
+	ldrb	w0, [x27,128]
+	str	w0, [x23,2052]
+	mov	w0, 82
+	b	.L1425
+.L1353:
+	mov	w0, 174
+	str	w0, [x23,2052]
+	str	wzr, [x23,2048]
+	mov	w0, 176
+.L1424:
+	str	w0, [x23,2052]
+	mov	w0, 77
+.L1425:
+	str	w0, [x23,2048]
+	mov	w0, 22
+	str	w0, [x23,2056]
+	mov	w0, 23
+	str	w0, [x23,2056]
+	mov	w0, 4
+	str	w0, [x23,2056]
+	mov	w0, 25
+	str	w0, [x23,2056]
+	cmp	w25, 6
+	str	wzr, [x23,2056]
+	str	wzr, [x23,2052]
+	str	wzr, [x23,2052]
+	bne	.L1354
+	mov	w0, 31
+	str	w0, [x23,2052]
+	b	.L1355
+.L1354:
+	str	wzr, [x23,2052]
+.L1355:
+	mov	w7, 2
+	str	w7, [x23,2052]
+	str	wzr, [x23,2052]
+	mov	w0, 48
+	str	w0, [x23,2056]
+	str	x7, [x29,104]
+	bl	nandc_wait_flash_ready
+	cmp	w19, 1
+	mov	w1, 16
+	bls	.L1357
+	ldr	x7, [x29,104]
+	cmp	w25, 7
+	mov	w1, 32
+	csel	w1, w1, w7, eq
+.L1357:
+	adrp	x0, .LANCHOR4
+	mov	x7, 0
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x0, [x0,1160]
+.L1358:
+	ldr	w8, [x23,2048]
+	strb	w8, [x0,x7]
+	add	x7, x7, 1
+	cmp	w1, w7, uxtb
+	bhi	.L1358
+	cmp	w25, 7
+	bne	.L1359
+	mov	w1, 0
+.L1361:
+	ldrb	w7, [x0]
+	cmp	w7, 12
+	beq	.L1360
+	ldrb	w7, [x0,1]
+	cmp	w7, 10
+	beq	.L1360
+	add	w1, w1, 1
+	add	x0, x0, 4
+	uxtb	w1, w1
+	cmp	w1, 8
+	bne	.L1361
+	b	.L1362
+.L1360:
+	cmp	w1, 7
+	bne	.L1363
+.L1362:
+	adrp	x0, .LC120
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC120
+	bl	printk
+.L1364:
+	b	.L1364
+.L1359:
+	cmp	w25, 6
+	bne	.L1363
+	mov	x1, 0
+.L1365:
+	ldrb	w7, [x0,x1]
+	cmp	w7, 12
+	beq	.L1363
+	add	x7, x0, x1
+	ldrb	w7, [x7,8]
+	cmp	w7, 4
+	beq	.L1363
+	add	x1, x1, 1
+	cmp	x1, 8
+	bne	.L1365
+	adrp	x0, .LC120
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC120
+	bl	printk
+.L1367:
+	b	.L1367
+.L1363:
+	add	x0, x26, :lo12:.LANCHOR4
+	ldr	x9, [x0,1160]
+	mov	x0, 0
+.L1368:
+	ldr	w1, [x29,120]
+	cmp	w1, w0
+	ble	.L1427
+	ldr	w1, [x23,2048]
+	strb	w1, [x9,x0]
+	add	x0, x0, 1
+	b	.L1368
+.L1427:
+	add	x0, x26, :lo12:.LANCHOR4
+	mov	w8, w22
+	mov	w7, 8
+	ldr	x11, [x0,1160]
+.L1371:
+	mov	w0, 0
+.L1370:
+	add	w1, w0, w8
+	add	w0, w0, 1
+	sbfiz	x1, x1, 2, 32
+	cmp	w0, w22
+	ldr	w10, [x11,x1]
+	mvn	w10, w10
+	str	w10, [x11,x1]
+	bne	.L1370
+	ldr	w0, [x29,124]
+	subs	w7, w7, #1
+	add	w8, w8, w0
+	bne	.L1371
+	mov	x7, 0
+	mov	w15, 1
+.L1372:
+	add	x0, x26, :lo12:.LANCHOR4
+	mov	w1, 0
+	mov	w10, w1
+	ldr	x14, [x0,1160]
+.L1376:
+	lsl	w8, w15, w10
+	mov	w12, w7
+	mov	w0, 16
+	mov	w11, 0
+.L1374:
+	ldr	w13, [x14,w12,sxtw 2]
+	add	w12, w12, w22
+	and	w13, w8, w13
+	cmp	w13, w8
+	csinc	w11, w11, w11, ne
+	subs	w0, w0, #1
+	bne	.L1374
+	cmp	w11, 9
+	orr	w8, w1, w8
+	add	w10, w10, 1
+	csel	w1, w8, w1, cs
+	cmp	w10, 32
+	bne	.L1376
+	str	w1, [x14,x7,lsl 2]
+	add	x7, x7, 1
+	cmp	w22, w7
+	bgt	.L1372
+	add	x1, x26, :lo12:.LANCHOR4
+	mov	x7, 0
+	mov	w8, w7
+	ldr	x1, [x1,1160]
+.L1379:
+	ldr	w10, [x1,x7]
+	add	x7, x7, 4
+	cmp	w10, wzr
+	csinc	w8, w8, w8, ne
+	cmp	x7, 32
+	bne	.L1379
+	cmp	w8, 7
+	ble	.L1380
+	adrp	x0, .LC121
+	mov	w2, 1
+	add	x0, x0, :lo12:.LC121
+	mov	w3, 1024
+	bl	rknand_print_hex
+	adrp	x0, .LC120
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC120
+	bl	printk
+.L1381:
+	b	.L1381
+.L1380:
+	cmp	w25, 6
+	mov	w7, 4
+	beq	.L1382
+	cmp	w25, 7
+	mov	w7, 10
+	mov	w1, 8
+	csel	w7, w1, w7, ne
+.L1382:
+	mov	w8, 0
+.L1383:
+	mov	x1, 0
+.L1384:
+	add	w10, w0, w1
+	ldrb	w11, [x9,x1]
+	add	x1, x1, 1
+	cmp	w28, w1, uxtb
+	strb	w11, [x24,w10,sxtw]
+	bhi	.L1384
+	add	w8, w8, 1
+	ldr	x1, [x29,112]
+	cmp	w8, w21
+	add	w0, w0, w7
+	add	x9, x9, x1
+	blt	.L1383
+	mov	w24, 255
+	str	w24, [x23,2056]
+	bl	nandc_wait_flash_ready
+	cmp	w19, 1
+	mov	w0, 56
+	bhi	.L1426
+	mov	w0, 54
+	str	w0, [x23,2056]
+	ldrb	w0, [x27,128]
+	str	w0, [x23,2052]
+	mov	w0, 22
+	str	wzr, [x23,2048]
+	str	w0, [x23,2056]
+	mov	w0, 48
+	str	wzr, [x23,2056]
+	str	wzr, [x23,2052]
+	str	wzr, [x23,2052]
+	str	w24, [x23,2052]
+	str	w24, [x23,2052]
+	str	w24, [x23,2052]
+.L1426:
+	str	w0, [x23,2056]
+	add	w20, w20, 1
+	bl	nandc_wait_flash_ready
+	uxtb	w20, w20
+	b	.L1350
+	.size	hynix_get_read_retry_default, .-hynix_get_read_retry_default
+	.align	2
+	.global	flash_get_read_retry_tbl
+	.type	flash_get_read_retry_tbl, %function
+flash_get_read_retry_tbl:
+	adrp	x0, .LANCHOR2+395
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w0, [x0,#:lo12:.LANCHOR2+395]
+	sub	w1, w0, #1
+	uxtb	w1, w1
+	cmp	w1, 6
+	bhi	.L1428
+	bl	hynix_get_read_retry_default
+.L1428:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_get_read_retry_tbl, .-flash_get_read_retry_tbl
+	.align	2
+	.global	nandc_xfer_done
+	.type	nandc_xfer_done, %function
+nandc_xfer_done:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x21, x22, [sp,32]
+	ldr	x0, [x20,16]
+	bl	wait_for_nandc_xfer_completed
+	adrp	x0, .LANCHOR4
+	add	x1, x0, :lo12:.LANCHOR4
+	mov	x23, x0
+	strb	wzr, [x1,1168]
+	ldrb	w1, [x19,#:lo12:.LANCHOR0]
+	cmp	w1, 9
+	bne	.L1431
+	ldr	x24, [x20,16]
+	ldr	w0, [x24,16]
+	str	w0, [x29,64]
+	ldr	w20, [x24,48]
+	ubfx	x20, x20, 1, 1
+	cbnz	w20, .L1451
+	adrp	x21, .LC125
+	adrp	x23, .LC124
+	add	x21, x21, :lo12:.LC125
+	add	x23, x23, :lo12:.LC124
+	b	.L1433
+.L1451:
+	adrp	x21, .LC123
+	adrp	x22, .LC124
+	mov	w20, 0
+	add	x21, x21, :lo12:.LC123
+	add	x22, x22, :lo12:.LC124
+.L1432:
+	ldr	w2, [x24,64]
+	ldr	w1, [x29,64]
+	ubfx	x2, x2, 16, 6
+	ubfx	x1, x1, 22, 6
+	cmp	w2, w1
+	bge	.L1435
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,16]
+	ldr	w0, [x0]
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	tbz	x0, 13, .L1434
+	ldr	w0, [x29,72]
+	tbz	x0, 17, .L1434
+	ldr	w1, [x29,72]
+	adrp	x0, .LC122
+	add	x0, x0, :lo12:.LC122
+	ubfx	x1, x1, 17, 1
+	bl	printk
+	b	.L1435
+.L1434:
+	ldr	w0, [x29,64]
+	add	w20, w20, 1
+	ubfx	x0, x0, 22, 6
+	cmp	w20, w0, lsl 12
+	bne	.L1432
+	ldr	w2, [x24,64]
+	mov	w1, w20
+	ldr	w3, [x29,64]
+	mov	x0, x21
+	ubfx	x2, x2, 16, 5
+	ubfx	x3, x3, 22, 6
+	bl	printk
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	x0, x22
+	mov	w2, 4
+	mov	w3, 64
+	ldr	x1, [x1,16]
+	bl	rknand_print_hex
+	ldr	w0, [x29,72]
+	tbz	x0, 13, .L1432
+	add	x0, x23, :lo12:.LANCHOR4
+	mov	w1, 1
+	strb	w1, [x0,1168]
+.L1435:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x20, x20, 144
+	ldr	w0, [x20,32]
+	cbz	w0, .L1439
+	ldr	w1, [x29,64]
+	mov	w2, 0
+	ldr	w0, [x20,24]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	ldr	w0, [x20,28]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 2
+	b	.L1479
+.L1441:
+	add	x22, x19, :lo12:.LANCHOR0
+	add	w20, w20, 1
+	ldr	x0, [x22,16]
+	ldr	w0, [x0,16]
+	str	w0, [x29,64]
+	and	w0, w20, 16777215
+	cbnz	w0, .L1433
+	ldr	w2, [x29,64]
+	mov	w1, w20
+	ldr	w3, [x24,64]
+	mov	x0, x21
+	ubfx	x3, x3, 16, 6
+	bl	printk
+	ldr	x1, [x22,16]
+	mov	x0, x23
+	mov	w2, 4
+	mov	w3, 64
+	bl	rknand_print_hex
+.L1433:
+	ldr	w0, [x29,64]
+	tbz	x0, 20, .L1441
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x20, x20, 144
+	ldr	w0, [x20,32]
+	cbz	w0, .L1439
+	ldr	w1, [x29,64]
+	mov	w2, 1
+	ldr	w0, [x20,24]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	ldr	w0, [x20,28]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 2
+	b	.L1478
+.L1431:
+	ldr	x23, [x20,16]
+	ldr	w0, [x23,8]
+	str	w0, [x29,64]
+	ldr	w20, [x23,16]
+	ubfx	x20, x20, 1, 1
+	cbnz	w20, .L1452
+	adrp	x21, .LC125
+	adrp	x24, .LC124
+	add	x21, x21, :lo12:.LC125
+	add	x24, x24, :lo12:.LC124
+	b	.L1444
+.L1452:
+	adrp	x21, .LC123
+	adrp	x22, .LC124
+	mov	w20, 0
+	add	x21, x21, :lo12:.LC123
+	add	x22, x22, :lo12:.LC124
+.L1443:
+	ldr	w2, [x23,28]
+	ldr	w1, [x29,64]
+	ubfx	x2, x2, 16, 5
+	ubfx	x1, x1, 22, 6
+	cmp	w2, w1
+	bge	.L1446
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,16]
+	ldr	w0, [x0]
+	str	w0, [x29,72]
+	ldr	w0, [x29,72]
+	tbz	x0, 13, .L1445
+	ldr	w0, [x29,72]
+	tbz	x0, 17, .L1445
+	ldr	w1, [x29,72]
+	adrp	x0, .LC126
+	add	x0, x0, :lo12:.LC126
+	bl	printk
+	b	.L1446
+.L1445:
+	add	w20, w20, 1
+	and	w0, w20, 16777215
+	cbnz	w0, .L1443
+	ldr	w2, [x23,28]
+	mov	w1, w20
+	ldr	w3, [x29,64]
+	mov	x0, x21
+	ubfx	x2, x2, 16, 5
+	ubfx	x3, x3, 22, 6
+	bl	printk
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	x0, x22
+	mov	w2, 4
+	mov	w3, 64
+	ldr	x1, [x1,16]
+	bl	rknand_print_hex
+	b	.L1443
+.L1446:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x20, x20, 144
+	ldr	w0, [x20,32]
+	cbz	w0, .L1439
+	ldr	w1, [x29,64]
+	mov	w2, 0
+	ldr	w0, [x20,24]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	ldr	w0, [x20,28]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 7
+.L1479:
+	mov	w2, 0
+	b	.L1477
+.L1450:
+	add	x22, x19, :lo12:.LANCHOR0
+	add	w20, w20, 1
+	ldr	x0, [x22,16]
+	ldr	w0, [x0,8]
+	str	w0, [x29,64]
+	and	w0, w20, 16777215
+	cbnz	w0, .L1444
+	ldr	w2, [x29,64]
+	mov	w1, w20
+	ldr	w3, [x23,28]
+	mov	x0, x21
+	ubfx	x3, x3, 16, 5
+	bl	printk
+	ldr	x1, [x22,16]
+	mov	x0, x24
+	mov	w2, 4
+	mov	w3, 64
+	bl	rknand_print_hex
+.L1444:
+	ldr	w0, [x29,64]
+	tbz	x0, 20, .L1450
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x20, x20, 144
+	ldr	w0, [x20,32]
+	cbz	w0, .L1439
+	ldr	w1, [x29,64]
+	mov	w2, 1
+	ldr	w0, [x20,24]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 10
+	bl	rknand_dma_unmap_single
+	ldr	w1, [x29,64]
+	ldr	w0, [x20,28]
+	ubfx	x1, x1, 22, 6
+	lsl	w1, w1, 7
+.L1478:
+	mov	w2, 1
+.L1477:
+	bl	rknand_dma_unmap_single
+.L1439:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	str	wzr, [x19,176]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	nandc_xfer_done, .-nandc_xfer_done
+	.align	2
+	.global	nandc_xfer
+	.type	nandc_xfer, %function
+nandc_xfer:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	uxtb	w22, w2
+	uxtb	w20, w1
+	mov	w0, w20
+	mov	x2, x3
+	mov	w1, w22
+	mov	x21, x3
+	mov	x3, x4
+	str	x23, [sp,48]
+	mov	x23, x4
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	mov	w0, 0
+	cbnz	w20, .L1510
+	adrp	x19, .LANCHOR0
+	add	x3, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x19,#:lo12:.LANCHOR0]
+	cmp	w1, 9
+	bne	.L1482
+	ldr	x5, [x3,16]
+	lsr	w22, w22, 2
+	mov	w4, 1
+	mov	w3, w0
+.L1483:
+	cmp	w3, w22
+	bcs	.L1519
+	uxtw	x1, w3
+	add	x1, x1, 84
+	ldr	w1, [x5,x1,lsl 2]
+	str	w1, [x29,72]
+	ldr	w1, [x29,72]
+	ubfx	x2, x1, 10, 1
+	ldr	w1, [x29,72]
+	ubfx	x1, x1, 26, 1
+	and	w1, w1, w2
+	and	w4, w4, w1
+	ldr	w1, [x29,72]
+	tbnz	x1, 2, .L1502
+	ldr	w1, [x29,72]
+	tbnz	x1, 18, .L1502
+	ldr	w2, [x29,72]
+	ldr	w1, [x29,72]
+	ubfx	x2, x2, 3, 7
+	ubfx	x1, x1, 19, 7
+	cmp	w2, w1
+	ldr	w1, [x29,72]
+	ble	.L1485
+	ubfx	x1, x1, 3, 7
+	b	.L1486
+.L1485:
+	ubfx	x1, x1, 19, 7
+.L1486:
+	cmp	w0, w1
+	csel	w0, w0, w1, cs
+	b	.L1484
+.L1502:
+	mov	w0, -1
+.L1484:
+	add	w3, w3, 1
+	b	.L1483
+.L1519:
+	add	x22, x19, :lo12:.LANCHOR0
+	cmp	w4, wzr
+	ldr	x1, [x22,16]
+	ldr	w20, [x1]
+	mov	w1, 512
+	csel	w0, w0, w1, eq
+	mov	w1, 8192
+	movk	w1, 0x2, lsl 16
+	and	w1, w20, w1
+	cmp	w1, 139264
+	bne	.L1489
+	adrp	x0, .LC127
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC127
+	orr	w20, w20, 131072
+	bl	printk
+	ldr	x0, [x22,16]
+	str	w20, [x0]
+	mov	w0, -1
+.L1489:
+	tbz	x20, 13, .L1490
+	adrp	x1, .LANCHOR4+1168
+	ldrb	w1, [x1,#:lo12:.LANCHOR4+1168]
+	cbz	w1, .L1490
+	adrp	x0, .LC128
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC128
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	printk
+	ldr	x0, [x19,16]
+	mov	w1, 1
+	str	w1, [x0,16]
+	b	.L1491
+.L1482:
+	ldrb	w0, [x3,188]
+	mov	w5, 128
+	lsr	w6, w22, 1
+	mov	w2, 1
+	cmp	w0, 25
+	mov	w0, 64
+	csel	w5, w0, w5, cc
+	mov	w1, w20
+	mov	w4, w20
+.L1493:
+	cmp	w4, w6
+	add	w7, w1, w5
+	bcs	.L1520
+	ldr	x0, [x3,144]
+	and	x1, x1, 4294967292
+	ldr	w0, [x0,x1]
+	ubfiz	x1, x4, 2, 30
+	add	w4, w4, 1
+	lsr	w8, w0, 16
+	strb	w0, [x23,x1]
+	lsr	w1, w0, 8
+	strb	w1, [x23,w2,uxtw]
+	add	w1, w2, 1
+	lsr	w0, w0, 24
+	strb	w8, [x23,x1]
+	add	w1, w2, 2
+	add	w2, w2, 4
+	strb	w0, [x23,x1]
+	mov	w1, w7
+	b	.L1493
+.L1520:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 0
+	lsr	w22, w22, 2
+	ldr	x6, [x0,16]
+	mov	w0, w2
+.L1495:
+	cmp	w2, w22
+	bcs	.L1521
+	uxtw	x1, w2
+	add	x1, x1, 8
+	ldr	w1, [x6,x1,lsl 2]
+	str	w1, [x29,72]
+	ldr	w1, [x29,72]
+	tbnz	x1, 2, .L1505
+	ldr	w1, [x29,72]
+	tbnz	x1, 15, .L1505
+	ldr	w3, [x29,72]
+	ubfx	x5, x3, 3, 5
+	ldr	w3, [x29,72]
+	ldr	w1, [x29,72]
+	ubfx	x3, x3, 27, 1
+	ubfx	x4, x1, 16, 5
+	ldr	w1, [x29,72]
+	orr	w3, w5, w3, lsl 5
+	ubfx	x1, x1, 29, 1
+	orr	w1, w4, w1, lsl 5
+	cmp	w3, w1
+	ldr	w1, [x29,72]
+	bls	.L1497
+	ubfx	x3, x1, 3, 5
+	ldr	w1, [x29,72]
+	ubfx	x1, x1, 27, 1
+	b	.L1518
+.L1497:
+	ubfx	x3, x1, 16, 5
+	ldr	w1, [x29,72]
+	ubfx	x1, x1, 29, 1
+.L1518:
+	orr	w1, w3, w1, lsl 5
+	cmp	w0, w1
+	csel	w0, w0, w1, cs
+	b	.L1496
+.L1505:
+	mov	w0, -1
+.L1496:
+	add	w2, w2, 1
+	b	.L1495
+.L1521:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x1, [x19,16]
+	str	wzr, [x1,16]
+	ldr	w20, [x1]
+	mov	w1, 8192
+	movk	w1, 0x2, lsl 16
+	and	w1, w20, w1
+	cmp	w1, 139264
+	bne	.L1490
+	adrp	x0, .LC129
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC129
+	orr	w20, w20, 131072
+	bl	printk
+	ldr	x0, [x19,16]
+	str	w20, [x0]
+	b	.L1491
+.L1490:
+	cmn	w0, #1
+	beq	.L1510
+	ldr	w1, [x23]
+	cmn	w1, #1
+	bne	.L1510
+	ldr	w1, [x23,4]
+	cmn	w1, #1
+	bne	.L1510
+	ldr	w1, [x21]
+	cmn	w1, #1
+	mov	w1, 512
+	csel	w0, w0, w1, ne
+	b	.L1510
+.L1491:
+	mov	w0, -1
+.L1510:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	nandc_xfer, .-nandc_xfer
+	.align	2
+	.global	flash_read_page
+	.type	flash_read_page, %function
+flash_read_page:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR0
+	uxtb	w21, w0
+	add	x0, x22, :lo12:.LANCHOR0
+	str	x27, [sp,80]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	mov	w23, w1
+	mov	x26, x2
+	ldr	x19, [x0,16]
+	adrp	x0, .LANCHOR2
+	mov	x25, x3
+	mov	w27, w4
+	and	w20, w1, 2097151
+	ubfx	x24, x23, 24, 2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 4, .L1523
+	adrp	x0, .LC130
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC130
+	mov	w2, w24
+	mov	w3, w23
+	bl	printk
+.L1523:
+	bl	nandc_wait_flash_ready
+	mov	w0, w21
+	bl	nandc_cs
+	cbnz	w24, .L1524
+	mov	w0, w21
+	bl	zftl_flash_enter_slc_mode
+	b	.L1525
+.L1524:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	x0, [x0,88]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L1526
+	sxtw	x0, w21
+	add	x0, x0, 8
+	add	x0, x19, x0, lsl 8
+	str	w24, [x0,8]
+	b	.L1525
+.L1526:
+	mov	w0, w21
+	bl	zftl_flash_exit_slc_mode
+.L1525:
+	ubfiz	x5, x21, 8, 8
+	and	w23, w23, 255
+	add	x19, x19, x5
+	lsr	w0, w20, 8
+	str	wzr, [x19,2056]
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w23, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w20, 16
+	str	w0, [x19,2052]
+	mov	w0, 48
+	str	w0, [x19,2056]
+	cbz	w24, .L1527
+	add	x22, x22, :lo12:.LANCHOR0
+	ldr	x0, [x22,88]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L1527
+	add	w20, w20, w20, lsl 1
+	sub	w0, w20, #1
+	add	w0, w0, w24
+	b	.L1538
+.L1527:
+	mov	w0, w20
+.L1538:
+	bl	nandc_set_seed
+	bl	nandc_wait_flash_ready
+	mov	w0, 5
+	str	w0, [x19,2056]
+	str	wzr, [x19,2052]
+	mov	w0, 224
+	str	wzr, [x19,2052]
+	mov	w2, w27
+	mov	x3, x26
+	mov	x4, x25
+	str	w0, [x19,2056]
+	mov	w1, 0
+	mov	w0, w21
+	bl	nandc_xfer
+	mov	w19, w0
+	mov	w0, 0
+	bl	nandc_de_cs
+	ldr	x27, [sp,80]
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_read_page, .-flash_read_page
+	.align	2
+	.global	micron_read_retrial
+	.type	micron_read_retrial, %function
+micron_read_retrial:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	mov	w20, 0
+	add	x19, x19, :lo12:.LANCHOR0
+	str	w4, [x29,120]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	uxtb	w24, w0
+	mov	w21, w1
+	ldrb	w0, [x19,188]
+	mov	x25, x2
+	mov	x26, x3
+	mov	w28, -1
+	adrp	x23, .LANCHOR4
+	add	w0, w0, w0, lsl 1
+	asr	w0, w0, 2
+	str	w0, [x29,124]
+	bl	nandc_wait_flash_ready
+	ldr	x22, [x19,16]
+	uxtb	x19, w24
+	lsl	x0, x19, 8
+	str	x0, [x29,112]
+	adrp	x0, .LC131
+	add	x0, x0, :lo12:.LC131
+	str	x0, [x29,104]
+.L1540:
+	add	x0, x23, :lo12:.LANCHOR4
+	ldrb	w0, [x0,1184]
+	cmp	w20, w0
+	bcs	.L1544
+	ldr	x0, [x29,112]
+	add	w27, w20, 1
+	add	x1, x22, x0
+	mov	w0, 239
+	str	x1, [x29,96]
+	str	w0, [x1,2056]
+	mov	w0, 137
+	str	w0, [x1,2052]
+	mov	w0, 200
+	bl	timer_delay_ns
+	ldr	x1, [x29,96]
+	mov	w0, w24
+	ldr	w4, [x29,120]
+	mov	x2, x25
+	mov	x3, x26
+	str	w27, [x1,2048]
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	str	wzr, [x1,2048]
+	mov	w1, w21
+	bl	flash_read_page
+	mov	w6, w0
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L1541
+	ldr	x0, [x29,104]
+	mov	w1, w20
+	mov	w2, w21
+	mov	w3, w20
+	mov	w4, w28
+	str	x6, [x29,96]
+	bl	printk
+	ldr	x6, [x29,96]
+.L1541:
+	cmn	w6, #1
+	beq	.L1542
+	adrp	x0, .LANCHOR4
+	cmn	w28, #1
+	add	x0, x0, :lo12:.LANCHOR4
+	csel	w28, w28, w6, ne
+	ldr	x25, [x0,1160]
+	ldr	x26, [x0,1176]
+	ldr	w0, [x29,124]
+	cmp	w6, w0
+	bcc	.L1549
+.L1542:
+	mov	w20, w27
+	b	.L1540
+.L1549:
+	mov	w28, w6
+.L1544:
+	add	x19, x22, x19, lsl 8
+	mov	w0, 239
+	str	w0, [x19,2056]
+	mov	w0, 137
+	str	w0, [x19,2052]
+	mov	w0, 200
+	bl	timer_delay_ns
+	str	wzr, [x19,2048]
+	str	wzr, [x19,2048]
+	ldr	w0, [x29,124]
+	str	wzr, [x19,2048]
+	str	wzr, [x19,2048]
+	cmp	w28, w0
+	bcc	.L1546
+	cmn	w28, #1
+	mov	w0, 256
+	csel	w28, w28, w0, eq
+.L1546:
+	cmn	w28, #1
+	beq	.L1550
+	cmp	w28, 256
+	bne	.L1547
+.L1550:
+	adrp	x0, .LC132
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC132
+	mov	w2, w21
+	mov	w3, w20
+	mov	w4, w28
+	bl	printk
+.L1547:
+	mov	w0, w28
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	micron_read_retrial, .-micron_read_retrial
+	.align	2
+	.global	toshiba_3d_read_retrial
+	.type	toshiba_3d_read_retrial, %function
+toshiba_3d_read_retrial:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	w24, w1
+	uxtb	w22, w0
+	stp	x27, x28, [sp,80]
+	mov	x26, x2
+	mov	x27, x3
+	str	w4, [x29,124]
+	adrp	x20, .LANCHOR0
+	bl	nandc_wait_flash_ready
+	ubfx	x19, x24, 24, 2
+	add	x1, x20, :lo12:.LANCHOR0
+	sxtw	x0, w22
+	mov	w2, 46
+	mov	w3, 56
+	add	x0, x0, 8
+	mov	w21, 10
+	ldr	x25, [x1,16]
+	lsl	x0, x0, 8
+	ldrb	w1, [x1,189]
+	add	x23, x25, x0
+	cmp	w1, 36
+	csel	w2, w3, w2, ne
+	str	w2, [x29,112]
+	cmp	w1, 36
+	mov	w1, 26
+	csel	w21, w21, w1, ne
+	cbnz	w19, .L1564
+	str	x0, [x29,112]
+	adrp	x0, .LC133
+	add	x0, x0, :lo12:.LC133
+	mov	w19, -1
+	mov	w28, 1
+	str	x0, [x29,104]
+.L1571:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,189]
+	cmp	w0, 36
+	mov	x0, x23
+	bne	.L1565
+	mov	w1, w28
+	mov	w2, 0
+	bl	toshiba_tlc_set_rr_para
+	ldr	x0, [x29,112]
+	mov	w1, 93
+	add	x0, x25, x0
+	str	w1, [x0,8]
+	b	.L1566
+.L1565:
+	mov	w1, w28
+	bl	toshiba_3d_set_slc_rr_para
+.L1566:
+	ldr	w4, [x29,124]
+	mov	w0, w22
+	mov	w1, w24
+	mov	x2, x26
+	mov	x3, x27
+	bl	flash_read_page
+	mov	w4, w0
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 4, .L1567
+	ldr	x0, [x29,104]
+	mov	w3, w4
+	mov	w1, w28
+	mov	w2, w24
+	str	x4, [x29,96]
+	bl	printk
+	ldr	x4, [x29,96]
+.L1567:
+	cmn	w4, #1
+	beq	.L1568
+	adrp	x0, .LANCHOR4
+	cmn	w19, #1
+	add	x0, x0, :lo12:.LANCHOR4
+	csel	w19, w19, w4, ne
+	ldr	x26, [x0,1160]
+	ldr	x27, [x0,1176]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,188]
+	add	w0, w0, w0, lsl 1
+	cmp	w4, w0, lsr 2
+	bcc	.L1587
+.L1568:
+	add	w28, w28, 1
+	cmp	w28, w21
+	bne	.L1571
+	b	.L1570
+.L1587:
+	mov	w21, w28
+	mov	w19, w4
+.L1570:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,189]
+	cmp	w0, 36
+	mov	x0, x23
+	bne	.L1572
+	mov	w1, 0
+	mov	w2, w1
+	b	.L1610
+.L1572:
+	mov	w1, 0
+	bl	toshiba_3d_set_slc_rr_para
+	b	.L1573
+.L1564:
+	mov	x28, x0
+	adrp	x0, .LC134
+	add	x0, x0, :lo12:.LC134
+	mov	w19, -1
+	mov	w21, 1
+	str	x0, [x29,104]
+.L1580:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,189]
+	cmp	w0, 36
+	mov	x0, x23
+	bne	.L1574
+	mov	w1, w21
+	mov	w2, 1
+	bl	toshiba_tlc_set_rr_para
+	add	x0, x25, x28
+	mov	w1, 93
+	b	.L1609
+.L1574:
+	mov	w1, w21
+	bl	toshiba_3d_set_tlc_rr_para
+	add	x0, x25, x28
+	mov	w1, 38
+.L1609:
+	str	w1, [x0,8]
+	mov	x2, x26
+	mov	w0, w22
+	mov	w1, w24
+	ldr	w4, [x29,124]
+	mov	x3, x27
+	bl	flash_read_page
+	mov	w4, w0
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 4, .L1576
+	ldr	x0, [x29,104]
+	mov	w3, w4
+	mov	w1, w21
+	mov	w2, w24
+	str	x4, [x29,96]
+	bl	printk
+	ldr	x4, [x29,96]
+.L1576:
+	cmn	w4, #1
+	beq	.L1577
+	adrp	x0, .LANCHOR4
+	cmn	w19, #1
+	add	x0, x0, :lo12:.LANCHOR4
+	csel	w19, w19, w4, ne
+	ldr	x26, [x0,1160]
+	ldr	x27, [x0,1176]
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,188]
+	add	w0, w0, w0, lsl 1
+	cmp	w4, w0, lsr 2
+	bcc	.L1588
+.L1577:
+	ldr	w0, [x29,112]
+	add	w21, w21, 1
+	cmp	w21, w0
+	bne	.L1580
+	b	.L1579
+.L1588:
+	mov	w19, w4
+.L1579:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,189]
+	cmp	w0, 36
+	mov	x0, x23
+	bne	.L1581
+	mov	w1, 0
+	mov	w2, 1
+.L1610:
+	bl	toshiba_tlc_set_rr_para
+	b	.L1573
+.L1581:
+	mov	w1, 0
+	bl	toshiba_3d_set_tlc_rr_para
+.L1573:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,189]
+	cmp	w0, 36
+	bne	.L1582
+	ubfiz	x22, x22, 8, 8
+	mov	w0, 85
+	add	x25, x25, x22
+	str	w0, [x25,2056]
+	mov	w0, 255
+	str	wzr, [x25,2052]
+	str	wzr, [x25,2048]
+	str	w0, [x25,2056]
+.L1582:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x20,188]
+	add	w0, w0, w0, lsl 1
+	cmp	w19, w0, lsr 2
+	bcc	.L1583
+	cmn	w19, #1
+	mov	w0, 256
+	csel	w19, w19, w0, eq
+.L1583:
+	cmn	w19, #1
+	beq	.L1589
+	cmp	w19, 256
+	bne	.L1584
+.L1589:
+	adrp	x0, .LC135
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC135
+	mov	w2, w24
+	mov	w3, w21
+	mov	w4, w19
+	bl	printk
+.L1584:
+	bl	nandc_wait_flash_ready
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	toshiba_3d_read_retrial, .-toshiba_3d_read_retrial
+	.align	2
+	.global	toshiba_read_retrial
+	.type	toshiba_read_retrial, %function
+toshiba_read_retrial:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	uxtb	w23, w0
+	str	w1, [x29,124]
+	mov	x26, x2
+	mov	x27, x3
+	str	w4, [x29,120]
+	adrp	x19, .LANCHOR0
+	bl	nandc_wait_flash_ready
+	mov	w25, 0
+	add	x1, x19, :lo12:.LANCHOR0
+	sxtw	x0, w23
+	add	x21, x0, 8
+	str	x0, [x29,112]
+	ldrb	w0, [x1,189]
+	ldr	x22, [x1,16]
+	sub	w0, w0, #67
+	add	x21, x22, x21, lsl 8
+	uxtb	w0, w0
+	cmp	w0, 1
+	bls	.L1612
+	ldrb	w0, [x1,136]
+	cbz	w0, .L1613
+	mov	w0, 1
+	mov	w25, 1
+	bl	nandc_set_if_mode
+.L1613:
+	ubfiz	x0, x23, 8, 8
+	mov	w1, 92
+	add	x0, x22, x0
+	str	w1, [x0,2056]
+	mov	w1, 197
+	str	w1, [x0,2056]
+.L1612:
+	ldr	x0, [x29,112]
+	mov	w20, 1
+	mov	w24, -1
+	add	x0, x0, 8
+	lsl	x0, x0, 8
+	str	x0, [x29,104]
+	ubfiz	x0, x23, 8, 8
+	str	x0, [x29,96]
+.L1614:
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrb	w0, [x0,1184]
+	add	w0, w0, 1
+	cmp	w20, w0
+	bcs	.L1645
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, w20
+	ldrb	w0, [x0,189]
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	mov	x0, x21
+	bhi	.L1615
+	bl	sandisk_set_rr_para
+	b	.L1616
+.L1615:
+	bl	toshiba_set_rr_para
+.L1616:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,189]
+	cmp	w0, 34
+	bne	.L1617
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrb	w0, [x0,1184]
+	sub	w0, w0, #3
+	cmp	w20, w0
+	bne	.L1617
+	ldr	x0, [x29,104]
+	mov	w1, 179
+	add	x0, x22, x0
+	str	w1, [x0,8]
+.L1617:
+	ldr	x0, [x29,96]
+	mov	w1, 38
+	ldr	w4, [x29,120]
+	mov	x2, x26
+	add	x0, x22, x0
+	mov	x3, x27
+	str	w1, [x0,2056]
+	mov	w1, 93
+	str	w1, [x0,2056]
+	mov	w0, w23
+	ldr	w1, [x29,124]
+	bl	flash_read_page
+	cmn	w0, #1
+	mov	w28, w0
+	beq	.L1620
+	cmn	w24, #1
+	csel	w24, w24, w0, ne
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x26, [x0,1160]
+	ldr	x27, [x0,1176]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,188]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bcc	.L1622
+.L1620:
+	add	w20, w20, 1
+	b	.L1614
+.L1645:
+	mov	w28, w24
+.L1622:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	ldrb	w0, [x0,189]
+	sub	w0, w0, #67
+	uxtb	w0, w0
+	cmp	w0, 1
+	mov	x0, x21
+	bhi	.L1624
+	bl	sandisk_set_rr_para
+	b	.L1625
+.L1624:
+	bl	toshiba_set_rr_para
+.L1625:
+	ldr	x0, [x29,112]
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x0, x0, 8
+	add	x22, x22, x0, lsl 8
+	mov	w0, 255
+	str	w0, [x22,8]
+	ldrb	w0, [x19,188]
+	add	w0, w0, w0, lsl 1
+	cmp	w28, w0, lsr 2
+	bcc	.L1626
+	cmn	w28, #1
+	mov	w0, 256
+	csel	w28, w28, w0, eq
+.L1626:
+	cmn	w28, #1
+	beq	.L1632
+	cmp	w28, 256
+	bne	.L1627
+.L1632:
+	adrp	x0, .LC135
+	ldr	w2, [x29,124]
+	add	x0, x0, :lo12:.LC135
+	mov	w1, w20
+	mov	w3, w20
+	mov	w4, w28
+	bl	printk
+.L1627:
+	bl	nandc_wait_flash_ready
+	cbz	w25, .L1629
+	mov	w0, 4
+	bl	nandc_set_if_mode
+.L1629:
+	mov	w0, w28
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	toshiba_read_retrial, .-toshiba_read_retrial
+	.align	2
+	.global	hynix_read_retrial
+	.type	hynix_read_retrial, %function
+hynix_read_retrial:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x27, x28, [sp,80]
+	adrp	x28, .LANCHOR0
+	stp	x21, x22, [sp,32]
+	uxtb	x21, w0
+	add	x0, x28, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	mov	x25, x2
+	mov	w23, w1
+	ldr	x5, [x0,192]
+	mov	x26, x3
+	str	w4, [x29,124]
+	mov	x22, x21
+	add	x27, x5, 112
+	mov	w19, -1
+	add	x0, x27, x21
+	ldrb	w24, [x27,2]
+	ldrb	w20, [x0,8]
+	bl	nandc_wait_flash_ready
+	mov	w6, 0
+	adrp	x7, .LANCHOR4
+.L1647:
+	cmp	w6, w24
+	bcs	.L1651
+	add	w20, w20, 1
+	mov	w0, w22
+	str	x7, [x29,104]
+	uxtb	w20, w20
+	str	x6, [x29,112]
+	cmp	w20, w24
+	csel	w20, w20, wzr, cc
+	mov	w1, w20
+	bl	hynix_set_rr_para
+	ldr	w4, [x29,124]
+	mov	w0, w22
+	mov	w1, w23
+	mov	x2, x25
+	mov	x3, x26
+	bl	flash_read_page
+	cmn	w0, #1
+	ldr	x6, [x29,112]
+	ldr	x7, [x29,104]
+	beq	.L1649
+	add	x1, x7, :lo12:.LANCHOR4
+	cmn	w19, #1
+	csel	w19, w19, w0, ne
+	ldr	x25, [x1,1160]
+	ldr	x26, [x1,1176]
+	add	x1, x28, :lo12:.LANCHOR0
+	ldrb	w1, [x1,188]
+	add	w1, w1, w1, lsl 1
+	cmp	w0, w1, lsr 2
+	bcc	.L1656
+.L1649:
+	add	w6, w6, 1
+	b	.L1647
+.L1656:
+	mov	w19, w0
+.L1651:
+	add	x28, x28, :lo12:.LANCHOR0
+	add	x21, x27, x21
+	ldrb	w0, [x28,188]
+	strb	w20, [x21,8]
+	add	w0, w0, w0, lsl 1
+	cmp	w19, w0, lsr 2
+	bcc	.L1653
+	cmn	w19, #1
+	mov	w0, 256
+	csel	w19, w19, w0, eq
+.L1653:
+	cmn	w19, #1
+	beq	.L1657
+	cmp	w19, 256
+	bne	.L1654
+.L1657:
+	adrp	x0, .LC136
+	mov	w1, w6
+	add	x0, x0, :lo12:.LC136
+	mov	w2, w23
+	mov	w3, w6
+	mov	w4, w19
+	bl	printk
+.L1654:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	hynix_read_retrial, .-hynix_read_retrial
+	.align	2
+	.global	flash_ddr_tunning_read
+	.type	flash_ddr_tunning_read, %function
+flash_ddr_tunning_read:
+	stp	x29, x30, [sp, -128]!
+	uxtb	w0, w0
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	str	w0, [x29,124]
+	mov	w20, w1
+	mov	x23, x2
+	mov	x24, x3
+	str	w4, [x29,116]
+	bl	nandc_get_ddr_para
+	mov	w26, 0
+	str	w0, [x29,120]
+	adrp	x0, .LC137
+	mov	w22, w26
+	add	x0, x0, :lo12:.LC137
+	mov	w28, w26
+	mov	w27, w26
+	mov	w25, 1024
+	mov	w21, 6
+	mov	w19, -1
+	str	x0, [x29,104]
+.L1672:
+	mov	w0, w21
+	bl	nandc_set_ddr_para
+	ldr	w4, [x29,116]
+	mov	w1, w20
+	ldrb	w0, [x29,124]
+	mov	x2, x23
+	mov	x3, x24
+	bl	flash_read_page
+	mov	w4, w0
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 4, .L1667
+	ldr	x0, [x29,104]
+	mov	w3, w4
+	mov	w1, w21
+	mov	w2, w20
+	str	x4, [x29,96]
+	bl	printk
+	ldr	x4, [x29,96]
+.L1667:
+	add	w0, w25, 1
+	cmp	w4, w0
+	bhi	.L1668
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x23, [x0,1160]
+	ldr	x24, [x0,1176]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	ldrb	w0, [x0,188]
+	cmp	w4, w0, lsr 2
+	bcs	.L1677
+	add	w27, w27, 1
+	cmp	w27, 7
+	bls	.L1677
+	sub	w26, w21, w27
+	mov	w25, w4
+	mov	w19, 0
+	b	.L1670
+.L1668:
+	cmp	w28, w27
+	bcs	.L1678
+	cmp	w27, 7
+	sub	w22, w26, w27
+	bhi	.L1671
+	mov	w28, w27
+	b	.L1678
+.L1677:
+	mov	w26, w21
+	mov	w25, w4
+	mov	w19, 0
+	b	.L1669
+.L1678:
+	mov	w27, 0
+.L1669:
+	add	w21, w21, 2
+	cmp	w21, 50
+	bne	.L1672
+.L1670:
+	cmp	w28, w27
+	csel	w26, w26, w22, ls
+.L1671:
+	cbz	w26, .L1673
+	adrp	x0, .LANCHOR0+188
+	mov	w1, 3
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+188]
+	udiv	w0, w0, w1
+	cmp	w25, w0
+	bcs	.L1673
+	adrp	x0, .LC138
+	mov	w1, w26
+	add	x0, x0, :lo12:.LC138
+	bl	printk
+	mov	w0, w26
+	b	.L1686
+.L1673:
+	ldrb	w0, [x29,120]
+.L1686:
+	bl	nandc_set_ddr_para
+	cbz	w19, .L1675
+	adrp	x0, .LC139
+	ldr	w1, [x29,124]
+	add	x0, x0, :lo12:.LC139
+	mov	w2, w20
+	mov	w25, w19
+	bl	printk
+.L1675:
+	mov	w0, w25
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	flash_ddr_tunning_read, .-flash_ddr_tunning_read
+	.align	2
+	.global	flash_read_page_en
+	.type	flash_read_page_en, %function
+flash_read_page_en:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	str	x27, [sp,80]
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	mov	w19, w1
+	mov	x25, x2
+	ldrb	w0, [x0,98]
+	mov	x24, x3
+	mov	w23, w4
+	ubfx	x26, x19, 24, 2
+	cmp	w0, w21
+	bhi	.L1688
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 136
+	mov	w2, 378
+	bl	printk
+.L1688:
+	add	x0, x20, :lo12:.LANCHOR0
+	add	x21, x0, x21, sxtw
+	adrp	x0, .LANCHOR2
+	ldrb	w22, [x21,200]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 4, .L1689
+	adrp	x0, .LC140
+	mov	w1, w22
+	add	x0, x0, :lo12:.LC140
+	mov	w2, w19
+	bl	printk
+.L1689:
+	cbnz	w26, .L1690
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w1, [x0,97]
+	cbz	w1, .L1691
+	ldrb	w0, [x0,208]
+	cbz	w0, .L1690
+.L1691:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x1,210]
+	udiv	w0, w19, w2
+	mul	w0, w0, w2
+	ldrb	w2, [x1,208]
+	sub	w19, w19, w0
+	cbz	w2, .L1692
+	add	w19, w0, w19, lsl 1
+	b	.L1690
+.L1692:
+	add	x1, x1, 212
+	ldrh	w19, [x1,w19,uxtw 1]
+	add	w19, w19, w0
+.L1690:
+	mov	w0, w22
+	mov	w1, w19
+	mov	x2, x25
+	mov	x3, x24
+	mov	w4, w23
+	bl	flash_read_page
+	cmn	w0, #1
+	mov	w21, w0
+	bne	.L1699
+	add	x26, x20, :lo12:.LANCHOR0
+	ldrb	w27, [x26,184]
+	cbnz	w27, .L1694
+.L1697:
+	adrp	x0, .LANCHOR4+1192
+	ldr	x5, [x0,#:lo12:.LANCHOR4+1192]
+	cbnz	x5, .L1695
+	b	.L1696
+.L1694:
+	mov	w0, w22
+	mov	w1, w19
+	mov	x2, x25
+	mov	x3, x24
+	mov	w4, w23
+	strb	wzr, [x26,184]
+	bl	flash_read_page
+	strb	w27, [x26,184]
+	cmn	w0, #1
+	beq	.L1697
+	b	.L1715
+.L1695:
+	mov	w0, w22
+	mov	w1, w19
+	mov	x2, x25
+	mov	x3, x24
+	mov	w4, w23
+	blr	x5
+	cmn	w0, #1
+	bne	.L1715
+.L1696:
+	add	x20, x20, :lo12:.LANCHOR0
+	adrp	x0, .LC141
+	add	x0, x0, :lo12:.LC141
+	mov	w1, 0
+	mov	w2, w19
+	mov	w3, -1
+	ldrb	w4, [x20,184]
+	bl	printk
+	ldrb	w0, [x20,136]
+	cbz	w0, .L1699
+	mov	w0, w22
+	mov	w1, w19
+	mov	x2, x25
+	mov	x3, x24
+	mov	w4, w23
+	bl	flash_ddr_tunning_read
+.L1715:
+	mov	w21, w0
+.L1699:
+	mov	w0, w21
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_read_page_en, .-flash_read_page_en
+	.align	2
+	.global	flash_get_last_written_page
+	.type	flash_get_last_written_page, %function
+flash_get_last_written_page:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	uxtb	w23, w0
+	adrp	x0, .LANCHOR4+1060
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	mov	x24, x2
+	ldrh	w19, [x0,#:lo12:.LANCHOR4+1060]
+	add	x0, x20, :lo12:.LANCHOR2
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	uxth	w22, w1
+	sub	w19, w19, #1
+	ldrh	w26, [x0,402]
+	mov	w0, w23
+	sxth	w19, w19
+	mov	x21, x3
+	mov	w25, w4
+	mov	x27, x20
+	mul	w26, w22, w26
+	add	w1, w26, w19
+	bl	flash_read_page_en
+	cmp	w0, 512
+	bne	.L1717
+	mov	w28, 0
+	mov	w5, 2
+.L1718:
+	cmp	w28, w19
+	bgt	.L1717
+	add	w0, w28, w19
+	mov	x2, x24
+	mov	x3, x21
+	mov	w4, w25
+	sdiv	w20, w0, w5
+	mov	w0, w23
+	str	x5, [x29,104]
+	add	w1, w26, w20, sxth
+	bl	flash_read_page_en
+	cmp	w0, 512
+	ldr	x5, [x29,104]
+	bne	.L1719
+	sub	w19, w20, #1
+	sxth	w19, w19
+	b	.L1718
+.L1719:
+	add	w20, w20, 1
+	sxth	w28, w20
+	b	.L1718
+.L1717:
+	ldr	w0, [x27,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L1722
+	adrp	x0, .LC142
+	ldr	w3, [x21]
+	add	x0, x0, :lo12:.LC142
+	mov	w1, w22
+	mov	w2, w19
+	bl	printk
+.L1722:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	flash_get_last_written_page, .-flash_get_last_written_page
+	.align	2
+	.global	flash_get_last_written_page_ext
+	.type	flash_get_last_written_page_ext, %function
+flash_get_last_written_page_ext:
+	uxth	w6, w0
+	adrp	x0, .LANCHOR0+3314
+	stp	x29, x30, [sp, -16]!
+	mov	w5, 21
+	mov	x8, x1
+	add	x29, sp, 0
+	ldrh	w0, [x0,#:lo12:.LANCHOR0+3314]
+	mov	x7, x2
+	mov	w4, w3
+	mov	x2, x8
+	sub	w0, w5, w0
+	mov	w5, 1
+	lsl	w5, w5, w0
+	mov	x3, x7
+	sub	w1, w5, #1
+	asr	w0, w6, w0
+	and	w1, w6, w1
+	bl	flash_get_last_written_page
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flash_get_last_written_page_ext, .-flash_get_last_written_page_ext
+	.align	2
+	.global	flash_info_blk_init
+	.type	flash_info_blk_init, %function
+flash_info_blk_init:
+	adrp	x0, .LANCHOR2
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x20, .LANCHOR0
+	tbz	x0, 12, .L1728
+	add	x4, x20, :lo12:.LANCHOR0
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC143
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC143
+	mov	w1, 49
+	ldr	x4, [x4,192]
+	add	x2, x2, 160
+	mov	w3, 2048
+	bl	printk
+.L1728:
+	mov	w22, 4
+	adrp	x24, .LANCHOR4
+.L1731:
+	add	x19, x20, :lo12:.LANCHOR0
+	add	x21, x24, :lo12:.LANCHOR4
+	mov	w0, 0
+	mov	w4, 4
+	adrp	x23, .LANCHOR4
+	ldrh	w1, [x19,210]
+	ldr	x2, [x19,192]
+	ldr	x3, [x21,1200]
+	mul	w1, w22, w1
+	bl	flash_read_page_en
+	cmn	w0, #1
+	beq	.L1729
+	ldr	x2, [x19,192]
+	mov	w0, 21321
+	movk	w0, 0x5359, lsl 16
+	ldr	w1, [x2]
+	cmp	w1, w0
+	beq	.L1730
+.L1729:
+	add	w22, w22, 1
+	cmp	w22, 16
+	bne	.L1731
+.L1755:
+	mov	w0, -1
+	b	.L1754
+.L1730:
+	ldrb	w1, [x2,36]
+	mov	w4, 4
+	ldrh	w3, [x19,210]
+	strb	w1, [x21,1208]
+	ldrb	w0, [x2,37]
+	mul	w1, w1, w3
+	ldr	x3, [x21,1200]
+	strb	w0, [x21,1209]
+	mov	w0, 0
+	mov	w21, 0
+	bl	flash_read_page_en
+	cmn	w0, #1
+	beq	.L1733
+	ldr	x0, [x19,192]
+	mov	w1, 21321
+	movk	w1, 0x5359, lsl 16
+	mov	w21, 0
+	ldr	w2, [x0]
+	cmp	w2, w1
+	bne	.L1733
+	ldr	w21, [x0,4]
+.L1733:
+	add	x19, x23, :lo12:.LANCHOR4
+	add	x22, x20, :lo12:.LANCHOR0
+	mov	w0, 0
+	mov	w4, 4
+	ldrb	w2, [x19,1209]
+	ldrh	w1, [x22,210]
+	ldr	x3, [x19,1200]
+	mul	w1, w2, w1
+	ldr	x2, [x22,192]
+	bl	flash_read_page_en
+	cmn	w0, #1
+	beq	.L1734
+	ldr	x0, [x22,192]
+	mov	w1, 21321
+	movk	w1, 0x5359, lsl 16
+	ldr	w2, [x0]
+	cmp	w2, w1
+	bne	.L1734
+	ldr	w1, [x0,4]
+	cmp	w21, w1
+	bcs	.L1734
+	ldrb	w1, [x0,37]
+	ldrb	w0, [x0,36]
+	strb	w1, [x19,1208]
+	strb	w0, [x19,1209]
+.L1734:
+	add	x21, x23, :lo12:.LANCHOR4
+	add	x22, x20, :lo12:.LANCHOR0
+	mov	w0, 0
+	mov	w4, 4
+	ldrb	w1, [x21,1208]
+	ldr	x3, [x21,1200]
+	ldr	x2, [x22,192]
+	bl	flash_get_last_written_page
+	sxth	w19, w0
+	add	w0, w0, 1
+	strh	w0, [x21,1210]
+	ldrb	w0, [x21,1208]
+	ldrh	w21, [x22,210]
+	mul	w21, w0, w21
+.L1735:
+	tbnz	w19, #31, .L1756
+	add	x22, x20, :lo12:.LANCHOR0
+	add	x3, x23, :lo12:.LANCHOR4
+	mov	w0, 0
+	add	w1, w19, w21
+	mov	w4, 4
+	ldr	x2, [x22,192]
+	ldr	x3, [x3,1200]
+	bl	flash_read_page_en
+	cmn	w0, #1
+	beq	.L1736
+	ldr	x0, [x22,192]
+	ldr	w1, [x0]
+	mov	w0, 21321
+	movk	w0, 0x5359, lsl 16
+	cmp	w1, w0
+	bne	.L1736
+.L1738:
+	mov	w0, 0
+	b	.L1754
+.L1736:
+	sub	w19, w19, #1
+	sxth	w19, w19
+	b	.L1735
+.L1756:
+	cmn	w19, #1
+	bne	.L1738
+	add	x20, x20, :lo12:.LANCHOR0
+	adrp	x0, .LC144
+	add	x0, x0, :lo12:.LC144
+	ldr	x1, [x20,192]
+	ldr	w1, [x1]
+	bl	printk
+	b	.L1755
+.L1754:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	flash_info_blk_init, .-flash_info_blk_init
+	.align	2
+	.global	flash_ddr_para_scan
+	.type	flash_ddr_para_scan, %function
+flash_ddr_para_scan:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	adrp	x20, .LANCHOR4
+	stp	x21, x22, [sp,32]
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	w22, 1
+	stp	x23, x24, [sp,48]
+	uxtb	w24, w0
+	mov	w23, w1
+	ldrb	w0, [x21,764]
+	add	x20, x20, :lo12:.LANCHOR4
+	strb	w22, [x21,136]
+	bl	flash_set_interface_mode
+	ldrb	w0, [x21,764]
+	bl	nandc_set_if_mode
+	ldr	x2, [x20,1216]
+	mov	w1, w23
+	ldr	x3, [x20,1224]
+	mov	w4, 4
+	mov	w0, w24
+	bl	flash_ddr_tunning_read
+	ldr	x2, [x20,1216]
+	mov	w0, w24
+	ldr	x3, [x20,1224]
+	mov	w1, w23
+	mov	w4, 4
+	bl	flash_read_page
+	cmn	w0, #1
+	bne	.L1758
+	ldrb	w0, [x21,764]
+	tbz	x0, 0, .L1758
+	mov	w0, 1
+	bl	flash_set_interface_mode
+	mov	w0, w22
+	bl	nandc_set_if_mode
+	strb	wzr, [x21,136]
+	b	.L1759
+.L1758:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	strb	w0, [x19,136]
+.L1759:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	flash_ddr_para_scan, .-flash_ddr_para_scan
+	.align	2
+	.type	id_block_read_data.constprop.30, %function
+id_block_read_data.constprop.30:
+	stp	x29, x30, [sp, -240]!
+	add	x29, sp, 0
+	stp	x27, x28, [sp,80]
+	mov	w27, w1
+	adrp	x1, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	add	x19, x1, :lo12:.LANCHOR0
+	str	x1, [x29,120]
+	stp	x25, x26, [sp,64]
+	mov	w26, w0
+	ldr	x0, [x19,88]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x21, x2
+	mov	w22, 0
+	ldrb	w2, [x0,9]
+	mov	w23, 4
+	ldrh	w0, [x0,10]
+	mov	w25, w22
+	str	w2, [x29,164]
+	mul	w0, w2, w0
+	ldrb	w2, [x19,184]
+	str	w2, [x29,136]
+	uxth	w0, w0
+	strb	wzr, [x19,184]
+	udiv	w2, w26, w0
+	msub	w0, w2, w0, w26
+	str	w0, [x29,172]
+	sub	w0, w26, w0
+	str	w0, [x29,160]
+	ldr	w0, [x29,172]
+	and	w0, w0, 3
+	str	w0, [x29,168]
+	adrp	x0, .LC145
+	add	x0, x0, :lo12:.LC145
+	str	x0, [x29,112]
+.L1764:
+	cmp	w22, w27
+	bcs	.L1801
+	ldr	w0, [x29,168]
+	adrp	x1, .LANCHOR4
+	add	x1, x1, :lo12:.LANCHOR4
+	sub	w0, w23, w0
+	uxth	w0, w0
+	str	w0, [x29,144]
+	ldr	w0, [x29,172]
+	ldrb	w1, [x1,1232]
+	add	w20, w22, w0
+	add	x0, x19, 212
+	udiv	w20, w20, w23
+	and	w20, w20, 65535
+	ldrh	w0, [x0,w20,sxtw 1]
+	cbnz	w1, .L1765
+	mov	w20, w0
+	b	.L1766
+.L1765:
+	ldrb	w1, [x19,208]
+	lsl	w0, w20, 1
+	cmp	w1, wzr
+	csel	w20, w0, w20, ne
+.L1766:
+	ldr	w1, [x29,160]
+	ldr	w0, [x29,164]
+	ldrb	w28, [x19,96]
+	madd	w0, w20, w0, w1
+	ldr	w1, [x29,168]
+	str	w0, [x29,140]
+	add	w24, w0, w1
+	ldr	x0, [x19,88]
+	ldrb	w0, [x0,9]
+	udiv	w24, w24, w0
+	ldrb	w0, [x19,188]
+	str	w0, [x29,132]
+	mov	w0, w28
+	bl	nandc_bch_sel
+.L1767:
+	mov	w0, 0
+	mov	w1, w24
+	mov	x2, x21
+	add	x3, x29, 176
+	mov	w4, w23
+	bl	flash_read_page
+	cmn	w0, #1
+	mov	w20, w0
+	bne	.L1774
+	ldrb	w6, [x19,184]
+	cbnz	w6, .L1769
+.L1772:
+	adrp	x0, .LANCHOR4
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x6, [x0,1192]
+	cbnz	x6, .L1770
+	b	.L1771
+.L1769:
+	mov	w0, 0
+	mov	w1, w24
+	mov	x2, x21
+	add	x3, x29, 176
+	mov	w4, w23
+	str	x6, [x29,104]
+	strb	wzr, [x19,184]
+	bl	flash_read_page
+	cmn	w0, #1
+	ldr	x6, [x29,104]
+	strb	w6, [x19,184]
+	beq	.L1772
+	b	.L1800
+.L1770:
+	mov	w0, 0
+	mov	w1, w24
+	mov	x2, x21
+	add	x3, x29, 176
+	mov	w4, w23
+	blr	x6
+	cmn	w0, #1
+	bne	.L1800
+.L1771:
+	ldrb	w0, [x19,136]
+	cbz	w0, .L1774
+	mov	w0, 0
+	mov	w1, w24
+	mov	x2, x21
+	add	x3, x29, 176
+	mov	w4, w23
+	bl	flash_ddr_tunning_read
+.L1800:
+	mov	w20, w0
+.L1774:
+	cmn	w20, #1
+	bne	.L1775
+	cmp	w28, 16
+	beq	.L1775
+	mov	w0, 16
+	mov	w28, 16
+	bl	nandc_bch_sel
+	b	.L1767
+.L1775:
+	ldr	w0, [x29,132]
+	bl	nandc_bch_sel
+	cmn	w20, #1
+	ldr	w0, [x29,160]
+	csinv	w25, w25, wzr, ne
+	cmp	w22, wzr
+	cset	w1, eq
+	cmp	w0, w26
+	cset	w0, eq
+	tst	w1, w0
+	beq	.L1777
+	cbnz	w25, .L1777
+	ldr	w1, [x21]
+	mov	w0, 18766
+	movk	w0, 0x464e, lsl 16
+	cmp	w1, w0
+	bne	.L1777
+	ldr	w0, [x29,144]
+	ldrb	w23, [x21,17]
+	add	w27, w27, w0
+	b	.L1778
+.L1777:
+	ldr	x0, [x29,144]
+	mov	w2, w22
+	ldr	w1, [x29,140]
+	ubfiz	x0, x0, 9, 16
+	ldr	w3, [x29,176]
+	add	x21, x21, x0
+	ldr	w4, [x29,180]
+	ldr	x0, [x29,112]
+	bl	printk
+	str	wzr, [x29,168]
+.L1778:
+	ldr	w0, [x29,144]
+	add	w22, w0, w22
+	uxth	w22, w22
+	b	.L1764
+.L1801:
+	ldr	x0, [x29,120]
+	ldrb	w1, [x29,136]
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x0,184]
+	mov	w0, w25
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 240
+	ret
+	.size	id_block_read_data.constprop.30, .-id_block_read_data.constprop.30
+	.align	2
+	.global	flash_complete_page_read
+	.type	flash_complete_page_read, %function
+flash_complete_page_read:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	and	w19, w0, 2097151
+	stp	x23, x24, [sp,48]
+	mov	w24, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	ubfx	x23, x24, 21, 3
+	mov	x25, x1
+	ldrb	w0, [x0,98]
+	mov	x26, x2
+	ubfx	x22, x24, 24, 2
+	cmp	w0, w23
+	bhi	.L1803
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 184
+	mov	w2, 789
+	bl	printk
+.L1803:
+	add	x21, x20, :lo12:.LANCHOR0
+	add	x23, x21, x23, sxtw
+	ldrb	w23, [x23,200]
+	mov	w0, w23
+	ldr	x27, [x21,16]
+	bl	nandc_cs
+	cbnz	w22, .L1804
+	ldrb	w0, [x21,97]
+	cbz	w0, .L1805
+	ldrb	w0, [x21,208]
+	cbz	w0, .L1804
+.L1805:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w2, [x1,210]
+	udiv	w0, w19, w2
+	mul	w0, w0, w2
+	ldrb	w2, [x1,208]
+	sub	w19, w19, w0
+	cbz	w2, .L1806
+	add	w19, w0, w19, lsl 1
+	b	.L1804
+.L1806:
+	add	x1, x1, 212
+	ldrh	w19, [x1,w19,uxtw 1]
+	add	w19, w19, w0
+.L1804:
+	ubfiz	x0, x23, 8, 8
+	add	x5, x27, x0
+	mov	w0, 5
+	str	w0, [x5,2056]
+	and	w0, w19, 255
+	str	wzr, [x5,2052]
+	str	wzr, [x5,2052]
+	str	w0, [x5,2052]
+	lsr	w0, w19, 8
+	str	w0, [x5,2052]
+	lsr	w0, w19, 16
+	str	w0, [x5,2052]
+	mov	w0, 224
+	str	w0, [x5,2056]
+	cbz	w22, .L1807
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,88]
+	ldrb	w0, [x0,12]
+	cmp	w0, 3
+	bne	.L1807
+	sub	w0, w22, #1
+	add	w1, w19, w19, lsl 1
+	add	w0, w0, w1
+	b	.L1845
+.L1807:
+	mov	w0, w19
+.L1845:
+	adrp	x21, .LANCHOR2
+	bl	nandc_set_seed
+	add	x27, x21, :lo12:.LANCHOR2
+	mov	w0, w23
+	mov	w1, 0
+	mov	x3, x25
+	mov	x4, x26
+	add	x27, x27, 376
+	ldrb	w2, [x27,9]
+	bl	nandc_xfer
+	cmn	w0, #1
+	bne	.L1809
+	add	x28, x20, :lo12:.LANCHOR0
+	ldrb	w5, [x28,184]
+	cbz	w5, .L1810
+	ldrb	w4, [x27,9]
+	mov	w0, w23
+	orr	w1, w19, w22, lsl 24
+	mov	x2, x25
+	mov	x3, x26
+	str	x5, [x29,104]
+	strb	wzr, [x28,184]
+	bl	flash_read_page
+	ldr	x5, [x29,104]
+	strb	w5, [x28,184]
+	cbnz	w22, .L1811
+.L1818:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrb	w2, [x1,97]
+	cbz	w2, .L1811
+	ldrb	w1, [x1,188]
+	add	w1, w1, w1, lsl 1
+	cmp	w0, w1, lsr 2
+	blt	.L1811
+	add	x21, x21, :lo12:.LANCHOR2
+	ldrb	w1, [x21,395]
+	sub	w1, w1, #4
+	uxtb	w1, w1
+	cmp	w1, 3
+	mov	w1, 256
+	csel	w0, w0, w1, hi
+	b	.L1828
+.L1811:
+	cmn	w0, #1
+	bne	.L1828
+.L1819:
+	adrp	x0, .LANCHOR4+1192
+	ldr	x5, [x0,#:lo12:.LANCHOR4+1192]
+	cbnz	x5, .L1814
+.L1817:
+	add	x20, x20, :lo12:.LANCHOR0
+	adrp	x0, .LC146
+	add	x0, x0, :lo12:.LC146
+	mov	w1, 0
+	mov	w2, w24
+	mov	w3, -1
+	ldrb	w4, [x20,184]
+	bl	printk
+	ldrb	w0, [x20,136]
+	cbnz	w0, .L1815
+	mov	w0, -1
+	b	.L1828
+.L1814:
+	add	x4, x21, :lo12:.LANCHOR2
+	mov	w0, w23
+	orr	w1, w19, w22, lsl 24
+	mov	x2, x25
+	mov	x3, x26
+	ldrb	w4, [x4,385]
+	blr	x5
+	cmn	w0, #1
+	bne	.L1828
+	b	.L1817
+.L1815:
+	add	x21, x21, :lo12:.LANCHOR2
+	mov	w0, w23
+	orr	w1, w19, w22, lsl 24
+	mov	x2, x25
+	mov	x3, x26
+	ldrb	w4, [x21,385]
+	bl	flash_ddr_tunning_read
+	b	.L1828
+.L1809:
+	cbz	w22, .L1818
+	b	.L1828
+.L1810:
+	cbz	w22, .L1818
+	b	.L1819
+.L1828:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	flash_complete_page_read, .-flash_complete_page_read
+	.align	2
+	.type	queue_wait_first_req_completed, %function
+queue_wait_first_req_completed:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldrb	w20, [x0,3861]
+	cmp	w20, 255
+	beq	.L1882
+	add	x0, x0, 768
+	mov	w1, 0
+	add	x0, x0, x20, lsl 6
+	ldrb	w2, [x0,58]
+	ldr	w21, [x0,40]
+	sub	w3, w2, #1
+	cmp	w3, 9
+	bhi	.L1848
+	adrp	x0, .L1850
+	add	x0, x0, :lo12:.L1850
+	ldrb	w0, [x0,w3,uxtw]
+	adr	x1, .Lrtx1850
+	add	x0, x1, w0, sxtb #2
+	br	x0
+.Lrtx1850:
+	.section	.rodata
+	.align	0
+	.align	2
+.L1850:
+	.byte	(.L1849 - .Lrtx1850) / 4
+	.byte	(.L1849 - .Lrtx1850) / 4
+	.byte	(.L1851 - .Lrtx1850) / 4
+	.byte	(.L1851 - .Lrtx1850) / 4
+	.byte	(.L1851 - .Lrtx1850) / 4
+	.byte	(.L1852 - .Lrtx1850) / 4
+	.byte	(.L1853 - .Lrtx1850) / 4
+	.byte	(.L1854 - .Lrtx1850) / 4
+	.byte	(.L1851 - .Lrtx1850) / 4
+	.byte	(.L1854 - .Lrtx1850) / 4
+	.text
+.L1849:
+	mov	w0, w21
+	mov	w1, 64
+	bl	flash_wait_device_ready
+	tbz	x0, 6, .L1882
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, w21
+	add	x19, x19, 768
+	add	x20, x19, x20, lsl 6
+	mov	x2, x20
+	ldr	x3, [x20,8]
+	ldr	x1, [x2,16]!
+	cmp	x1, xzr
+	ldr	x2, [x2,8]
+	csel	x1, x3, x1, eq
+	bl	flash_complete_page_read
+	str	w0, [x20,52]
+	mov	w0, 12
+	strb	w0, [x20,58]
+	ldrb	w0, [x20,2]
+	orr	w0, w0, 8
+	strb	w0, [x20,2]
+	b	.L1882
+.L1851:
+	bl	nandc_iqr_wait_flash_ready
+	mov	w0, w21
+	mov	w1, 64
+	bl	flash_wait_device_ready
+	mov	w21, w0
+	tbz	x21, 6, .L1882
+	mov	w1, 5
+	add	x19, x19, :lo12:.LANCHOR0
+	ands	w1, w21, w1
+	beq	.L1857
+	add	x19, x19, 768
+	mov	w0, 11
+	add	x20, x19, x20, lsl 6
+	mov	w4, 11
+	strb	w0, [x20,58]
+	adrp	x0, .LC147
+	ldrb	w1, [x20,1]
+	add	x0, x0, :lo12:.LC147
+	ldr	w2, [x20,52]
+	ldr	w3, [x20,40]
+	bl	printk
+	mov	w0, -1
+	str	w0, [x20,52]
+	b	.L1883
+.L1857:
+	add	x20, x19, x20, lsl 6
+	b	.L1864
+.L1854:
+	add	x22, x19, :lo12:.LANCHOR0
+	mov	w0, 3
+	cmp	w2, 10
+	mov	w1, 9
+	add	x22, x22, 768
+	csel	w1, w0, w1, ne
+	ubfx	x3, x21, 21, 3
+	add	x0, x22, x20, lsl 6
+.L1859:
+	ldrb	w23, [x0]
+	cmp	w23, 255
+	beq	.L1884
+	add	x0, x22, x23, lsl 6
+	ldrb	w2, [x0,58]
+	cmp	w2, w1
+	bne	.L1859
+	ldr	w2, [x0,40]
+	ubfx	x2, x2, 21, 3
+	cmp	w3, w2
+	bne	.L1859
+	bl	nandc_iqr_wait_flash_ready
+	mov	w0, w21
+	mov	w1, 64
+	bl	flash_wait_device_ready
+	mov	w21, w0
+	and	w0, w0, 64
+	tbz	x21, 6, .L1867
+	ands	w0, w21, 15
+	add	x22, x22, x20, lsl 6
+	beq	.L1862
+	adrp	x0, .LC147
+	ldrb	w1, [x22,1]
+	ldr	w2, [x22,52]
+	add	x0, x0, :lo12:.LC147
+	ldr	w3, [x22,40]
+	mov	w4, 11
+	bl	printk
+	mov	w0, 11
+	strb	w0, [x22,58]
+	mov	w0, -1
+	str	w0, [x22,52]
+.L1861:
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x19, x19, 768
+	add	x20, x19, x20, lsl 6
+	add	x23, x19, x23, lsl 6
+	ldrb	w0, [x20,58]
+	strb	w0, [x23,58]
+	ldr	w0, [x20,52]
+	str	w0, [x23,52]
+.L1883:
+	mov	w1, w21
+	b	.L1848
+.L1862:
+	mov	w1, 12
+	str	w0, [x22,52]
+	strb	w1, [x22,58]
+.L1867:
+	mov	w21, w0
+	b	.L1861
+.L1884:
+	mov	w1, -1
+	b	.L1848
+.L1852:
+	mov	w1, 32
+	mov	w0, w21
+	bl	flash_wait_device_ready
+	tbz	x0, 5, .L1882
+	ands	w1, w0, 15
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x20, x19, x20, lsl 6
+	beq	.L1864
+	mov	w1, 11
+	strb	w1, [x20,826]
+	mov	w1, -1
+	str	w1, [x20,820]
+	mov	w1, w0
+	b	.L1848
+.L1864:
+	mov	w0, 12
+	str	w1, [x20,820]
+	strb	w0, [x20,826]
+	b	.L1848
+.L1853:
+	mov	w1, 64
+	mov	w0, w21
+	bl	flash_wait_device_ready
+	tbz	x0, 6, .L1882
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x20, x19, x20, lsl 6
+	str	w0, [x20,820]
+	mov	w0, 6
+	strb	w0, [x20,826]
+.L1882:
+	mov	w1, 0
+.L1848:
+	mov	w0, w1
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	queue_wait_first_req_completed, .-queue_wait_first_req_completed
+	.align	2
+	.global	sblk_wait_write_queue_completed
+	.type	sblk_wait_write_queue_completed, %function
+sblk_wait_write_queue_completed:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+.L1886:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,3861]
+	cmp	w0, 255
+	beq	.L1888
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L1886
+.L1888:
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	sblk_wait_write_queue_completed, .-sblk_wait_write_queue_completed
+	.align	2
+	.global	ftl_read_page
+	.type	ftl_read_page, %function
+ftl_read_page:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	uxtb	w19, w0
+	str	x1, [x29,32]
+	str	x2, [x29,40]
+	str	x3, [x29,48]
+	str	x4, [x29,56]
+	bl	sblk_wait_write_queue_completed
+	ldr	x1, [x29,32]
+	mov	w0, w19
+	ldr	x2, [x29,40]
+	ldr	x3, [x29,48]
+	ldr	x4, [x29,56]
+	bl	flash_read_page_en
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	ftl_read_page, .-ftl_read_page
+	.align	2
+	.global	ftl_read_ppa_page
+	.type	ftl_read_ppa_page, %function
+ftl_read_ppa_page:
+	stp	x29, x30, [sp, -64]!
+	mov	w4, w3
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w19, w0
+	mov	x21, x1
+	mov	x20, x2
+	str	x4, [x29,56]
+	bl	sblk_wait_write_queue_completed
+	ldr	x4, [x29,56]
+	mov	w1, w19
+	mov	x2, x21
+	mov	x3, x20
+	ubfx	x0, x19, 21, 3
+	bl	flash_read_page_en
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	ftl_read_ppa_page, .-ftl_read_ppa_page
+	.align	2
+	.global	ftl_open_sblk_read_test
+	.type	ftl_open_sblk_read_test, %function
+ftl_open_sblk_read_test:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxth	w19, w0
+	add	x1, x29, 80
+	stp	x21, x22, [sp,32]
+	mov	w0, w19
+	adrp	x21, .LANCHOR4
+	adrp	x22, .LANCHOR5
+	add	x21, x21, :lo12:.LANCHOR4
+	add	x22, x22, :lo12:.LANCHOR5
+	str	x23, [sp,48]
+	add	x21, x21, 1280
+	bl	ftl_get_blk_list_in_sblk
+	add	x22, x22, 256
+	strh	w19, [x29,64]
+	strb	w0, [x29,73]
+	mov	w19, 0
+.L1892:
+	adrp	x0, .LANCHOR0
+	add	x1, x0, :lo12:.LANCHOR0
+	mov	x23, x0
+	ldrh	w1, [x1,3276]
+	cmp	w1, w19
+	bls	.L1891
+	mov	w20, 0
+.L1898:
+	add	x3, x23, :lo12:.LANCHOR0
+	ldrb	w0, [x3,3244]
+	cmp	w0, w20
+	bls	.L1904
+	add	x0, x29, 64
+	add	x0, x0, x20, sxtw 1
+	ldrh	w0, [x0,16]
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L1894
+	ldrh	w1, [x3,3324]
+	mov	x2, x22
+	ldrb	w3, [x3,2816]
+	madd	w0, w0, w1, w19
+	mov	x1, x21
+	bl	ftl_read_ppa_page
+	cmp	w0, 512
+	beq	.L1891
+.L1894:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L1898
+.L1904:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L1892
+.L1891:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldr	x23, [sp,48]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ftl_open_sblk_read_test, .-ftl_open_sblk_read_test
+	.align	2
+	.global	sblk_read_page
+	.type	sblk_read_page, %function
+sblk_read_page:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	mov	w24, 1
+	stp	x21, x22, [sp,32]
+	add	x23, x23, :lo12:.LANCHOR0
+	uxtb	w21, w1
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	x20, x0
+	mov	x19, x0
+	mov	w22, w21
+	mov	w25, -1
+	add	x26, x23, 3861
+.L1906:
+	cbz	w22, .L1918
+	ldrb	w27, [x19]
+	ldr	w28, [x19,40]
+.L1907:
+	mov	w0, w28
+	mov	w1, 0
+	bl	queue_lun_state
+	mov	w2, w0
+	cbz	w0, .L1919
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L1907
+.L1919:
+	ldr	w1, [x19,40]
+	mov	w0, 48
+	str	x2, [x29,104]
+	bl	flash_start_page_read
+	strb	w24, [x19,58]
+	ldr	x2, [x29,104]
+	mov	x0, x26
+	strb	w2, [x19,59]
+	mov	x1, x19
+	strb	w25, [x19]
+	bl	buf_add_tail
+	subs	w22, w22, #1
+	beq	.L1918
+	add	x19, x23, 768
+	sbfiz	x27, x27, 6, 32
+	add	x19, x19, x27
+	b	.L1906
+.L1918:
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x19, x19, 768
+.L1911:
+	cbz	w21, .L1920
+	ldrb	w0, [x20,58]
+	cmp	w0, 12
+	bne	.L1912
+	ldrb	w20, [x20]
+	sub	w21, w21, #1
+	add	x20, x19, x20, lsl 6
+	b	.L1911
+.L1912:
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L1911
+.L1920:
+	mov	w0, w21
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	sblk_read_page, .-sblk_read_page
+	.align	2
+	.global	gc_check_data_one_wl
+	.type	gc_check_data_one_wl, %function
+gc_check_data_one_wl:
+	sub	sp, sp, #112
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x19, x20, [sp,32]
+	adrp	x19, .LANCHOR0
+	str	x27, [sp,96]
+	add	x20, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,48]
+	stp	x23, x24, [sp,64]
+	stp	x25, x26, [sp,80]
+	ldr	x0, [x20,2896]
+	ldr	x23, [x20,80]
+	add	x20, x20, 2888
+	cbnz	x0, .L1922
+	mov	w0, 1
+	bl	buf_alloc
+	str	x0, [x20,8]
+.L1922:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x20, [x0,2896]
+	cbnz	x20, .L1923
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 216
+	mov	w2, 348
+	bl	printk
+.L1923:
+	mov	w24, 0
+	add	x25, x23, 80
+	add	x21, x19, :lo12:.LANCHOR0
+	adrp	x26, .LANCHOR4
+.L1924:
+	ldrb	w0, [x25,9]
+	cmp	w24, w0
+	bge	.L1945
+	mov	w22, 1
+	sxtw	x27, w24
+.L1933:
+	add	x0, x21, 2888
+	ldrh	w1, [x0,20]
+	cmp	w22, w1
+	bgt	.L1946
+	add	x1, x27, 8
+	ldrh	w2, [x21,3324]
+	ldrh	w0, [x0,16]
+	ldrh	w1, [x25,x1,lsl 1]
+	mul	w1, w1, w2
+	ldrb	w2, [x21,3225]
+	cmp	w2, 3
+	bne	.L1925
+	add	w1, w1, w0
+	orr	w1, w1, w22, lsl 24
+	b	.L1944
+.L1925:
+	cmp	w2, 2
+	bne	.L1927
+	sub	w0, w0, #1
+	add	w1, w0, w1
+	add	w1, w1, w22
+	orr	w1, w1, 33554432
+	b	.L1944
+.L1927:
+	add	w1, w1, w0
+.L1944:
+	str	w1, [x20,40]
+	mov	x0, x20
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w2, [x20,52]
+	cmn	w2, #1
+	beq	.L1928
+	add	x3, x26, :lo12:.LANCHOR4
+	ldrh	w0, [x21,2910]
+	ldr	x1, [x20,24]
+	lsl	x0, x0, 2
+	ldr	x4, [x3,1104]
+	ldr	w5, [x4,x0]
+	ldr	w4, [x1,4]
+	cmp	w5, w4
+	bne	.L1928
+	ldr	x3, [x3,1112]
+	ldr	w3, [x3,x0]
+	ldr	w0, [x1,8]
+	cmp	w3, w0
+	beq	.L1929
+.L1928:
+	add	x0, x26, :lo12:.LANCHOR4
+	ldrh	w4, [x21,2910]
+	lsl	x4, x4, 2
+	ldr	x1, [x0,1104]
+	ldr	w3, [x1,x4]
+	cmn	w3, #1
+	beq	.L1929
+	adrp	x1, .LANCHOR2
+	ldr	w1, [x1,#:lo12:.LANCHOR2]
+	tbz	x1, 10, .L1930
+	ldr	x7, [x20,24]
+	ldr	x5, [x0,1112]
+	ldr	w0, [x7,12]
+	str	w0, [sp]
+	adrp	x0, .LC148
+	add	x0, x0, :lo12:.LC148
+	ldr	w4, [x5,x4]
+	ldr	w6, [x7,4]
+	ldr	w5, [x7]
+	ldr	w1, [x20,40]
+	ldr	w7, [x7,8]
+	bl	printk
+.L1930:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x23,80]
+	ldr	x0, [x19,72]
+	strh	wzr, [x0,x1,lsl 1]
+	mov	w0, -1
+	b	.L1931
+.L1929:
+	ldrh	w0, [x21,2910]
+	add	w22, w22, 1
+	add	w0, w0, 1
+	strh	w0, [x21,2910]
+	b	.L1933
+.L1946:
+	add	w24, w24, 1
+	b	.L1924
+.L1945:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x19,2904]
+	add	w0, w0, 1
+	strh	w0, [x19,2904]
+	mov	w0, 0
+.L1931:
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldr	x27, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 112
+	ret
+	.size	gc_check_data_one_wl, .-gc_check_data_one_wl
+	.align	2
+	.global	flash_prog_page
+	.type	flash_prog_page, %function
+flash_prog_page:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	x22, w0
+	adrp	x21, .LANCHOR2
+	adrp	x0, .LANCHOR0+16
+	str	x27, [sp,80]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	ldr	x19, [x0,#:lo12:.LANCHOR0+16]
+	mov	x20, x22
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	add	x22, x22, 8
+	stp	x25, x26, [sp,64]
+	mov	w23, w1
+	mov	x25, x3
+	mov	x26, x2
+	mov	w3, w4
+	add	x22, x19, x22, lsl 8
+	and	w24, w1, 2097151
+	ubfx	x27, x23, 24, 2
+	tbz	x0, 4, .L1948
+	adrp	x0, .LC149
+	mov	w2, w27
+	add	x0, x0, :lo12:.LC149
+	bl	printk
+.L1948:
+	bl	nandc_wait_flash_ready
+	mov	w0, w20
+	bl	hynix_reconfig_rr_para
+	mov	w0, w20
+	bl	nandc_cs
+	mov	w0, w20
+	cbnz	w27, .L1949
+	bl	zftl_flash_enter_slc_mode
+	b	.L1950
+.L1949:
+	bl	zftl_flash_exit_slc_mode
+.L1950:
+	ubfiz	x4, x20, 8, 8
+	mov	w0, 128
+	add	x19, x19, x4
+	add	x21, x21, :lo12:.LANCHOR2
+	str	w0, [x19,2056]
+	and	w0, w23, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w24, 8
+	str	w0, [x19,2052]
+	lsr	w0, w24, 16
+	str	w0, [x19,2052]
+	mov	w0, w24
+	bl	nandc_set_seed
+	ldrb	w1, [x21,385]
+	mov	x2, x26
+	mov	x3, x25
+	mov	w0, 1
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	mov	w0, 16
+	str	w0, [x19,2056]
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	mov	x0, x22
+	bl	flash_read_status
+	mov	w21, w0
+	mov	w0, w20
+	and	w19, w21, 4
+	bl	nandc_de_cs
+	tbz	x21, 2, .L1951
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L1951
+	adrp	x0, .LC150
+	mov	w1, w23
+	add	x0, x0, :lo12:.LC150
+	mov	w2, w19
+	bl	printk
+.L1951:
+	mov	w0, w19
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_prog_page, .-flash_prog_page
+	.align	2
+	.global	flash_test_blk
+	.type	flash_test_blk, %function
+flash_test_blk:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	uxth	w20, w1
+	cbnz	w22, .L1962
+	adrp	x0, .LANCHOR5+512
+	ldrb	w1, [x0,#:lo12:.LANCHOR5+512]
+	mov	w0, w22
+	cmp	w1, w20
+	bhi	.L1963
+.L1962:
+	adrp	x19, .LANCHOR4
+	mov	w1, 165
+	add	x19, x19, :lo12:.LANCHOR4
+	mov	w2, 32
+	ldr	x0, [x19,1224]
+	bl	ftl_memset
+	ldr	x0, [x19,1216]
+	mov	w1, 90
+	mov	w2, 8
+	bl	ftl_memset
+	adrp	x0, .LANCHOR0+210
+	ldrh	w21, [x0,#:lo12:.LANCHOR0+210]
+	mov	w0, w22
+	mul	w21, w20, w21
+	mov	w1, w21
+	bl	flash_erase_block
+	cmn	w0, #1
+	beq	.L1968
+	adrp	x20, .LANCHOR2
+	ldr	x2, [x19,1216]
+	add	x20, x20, :lo12:.LANCHOR2
+	ldr	x3, [x19,1224]
+	mov	w0, w22
+	mov	w1, w21
+	add	x20, x20, 376
+	ldrb	w4, [x20,9]
+	bl	flash_prog_page
+	cmn	w0, #1
+	beq	.L1968
+	ldrb	w4, [x20,9]
+	mov	w0, w22
+	ldr	x2, [x19,1216]
+	mov	w1, w21
+	ldr	x3, [x19,1224]
+	bl	flash_read_page
+	cmn	w0, #1
+	mov	w20, w0
+	beq	.L1968
+	ldr	x0, [x19,1216]
+	ldr	w1, [x0]
+	mov	w0, 23130
+	bfi	w0, w0, 16, 16
+	cmp	w1, w0
+	bne	.L1968
+	ldr	x0, [x19,1224]
+	ldr	w1, [x0]
+	mov	w0, 42405
+	bfi	w0, w0, 16, 16
+	cmp	w1, w0
+	csinv	w20, w20, wzr, eq
+	b	.L1965
+.L1968:
+	mov	w20, -1
+.L1965:
+	mov	w0, w22
+	mov	w1, w21
+	bl	flash_erase_block
+	mov	w0, w20
+.L1963:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	flash_test_blk, .-flash_test_blk
+	.section	.text.unlikely
+	.align	2
+	.type	fw_flash_page_prog.constprop.31, %function
+fw_flash_page_prog.constprop.31:
+	stp	x29, x30, [sp, -64]!
+	adrp	x4, .LANCHOR0
+	add	x29, sp, 0
+	add	x4, x4, :lo12:.LANCHOR0
+	str	x21, [sp,32]
+	mov	x21, x1
+	stp	x19, x20, [sp,16]
+	str	x2, [x29,56]
+	ldr	x1, [x4,88]
+	ldrb	w20, [x4,188]
+	ldrb	w19, [x1,9]
+	udiv	w19, w0, w19
+	ldrb	w0, [x4,96]
+	bl	nandc_bch_sel
+	ldr	x3, [x29,56]
+	mov	w1, w19
+	mov	x2, x21
+	mov	w4, 4
+	mov	w0, 0
+	bl	flash_prog_page
+	mov	w19, w0
+	mov	w0, w20
+	bl	nandc_bch_sel
+	ldr	x21, [sp,32]
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	fw_flash_page_prog.constprop.31, .-fw_flash_page_prog.constprop.31
+	.text
+	.align	2
+	.global	flash_start_page_prog
+	.type	flash_start_page_prog, %function
+flash_start_page_prog:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	and	w19, w1, 2097151
+	stp	x21, x22, [sp,32]
+	uxtb	w22, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ubfx	x27, x1, 21, 3
+	mov	x24, x2
+	ldrb	w0, [x0,98]
+	mov	x23, x3
+	ubfx	x26, x1, 24, 2
+	cmp	w0, w27
+	bhi	.L1978
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 240
+	mov	w2, 685
+	bl	printk
+.L1978:
+	add	x28, x20, :lo12:.LANCHOR0
+	add	x0, x28, x27, sxtw
+	ldrb	w21, [x0,200]
+	ldr	x25, [x28,16]
+	bl	nandc_rdy_status
+	cbnz	w0, .L1979
+	ldrb	w0, [x28,98]
+	cmp	w0, 1
+	bne	.L1980
+	bl	nandc_wait_flash_ready
+	b	.L1979
+.L1980:
+	mov	w0, w27
+	mov	w1, w19
+	mov	w2, 64
+	bl	flash_wait_device_ready_raw
+.L1979:
+	mov	w0, w21
+	bl	hynix_reconfig_rr_para
+	mov	w0, w21
+	bl	nandc_cs
+	cbnz	w26, .L1981
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w1, [x0,97]
+	cbz	w1, .L1982
+	ldrb	w0, [x0,208]
+	cbz	w0, .L1983
+.L1982:
+	add	x20, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x20,210]
+	udiv	w0, w19, w1
+	mul	w0, w0, w1
+	ldrb	w1, [x20,208]
+	sub	w19, w19, w0
+	cbz	w1, .L1984
+	add	w19, w0, w19, lsl 1
+	b	.L1983
+.L1984:
+	add	x20, x20, 212
+	ldrh	w19, [x20,w19,uxtw 1]
+	add	w19, w19, w0
+	b	.L1985
+.L1983:
+	mov	w0, w21
+	bl	zftl_flash_enter_slc_mode
+	b	.L1985
+.L1981:
+	mov	w0, w21
+	bl	zftl_flash_exit_slc_mode
+.L1985:
+	ubfiz	x1, x21, 8, 8
+	mov	w0, 128
+	add	x20, x25, x1
+	str	w0, [x20,2056]
+	and	w0, w19, 255
+	str	wzr, [x20,2052]
+	str	wzr, [x20,2052]
+	str	w0, [x20,2052]
+	lsr	w0, w19, 8
+	str	w0, [x20,2052]
+	lsr	w0, w19, 16
+	str	w0, [x20,2052]
+	mov	w0, w19
+	bl	nandc_set_seed
+	adrp	x1, .LANCHOR2+385
+	mov	x2, x24
+	mov	x3, x23
+	mov	w0, 1
+	ldrb	w1, [x1,#:lo12:.LANCHOR2+385]
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	w22, [x20,2056]
+	mov	w0, w21
+	bl	nandc_de_cs
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_start_page_prog, .-flash_start_page_prog
+	.align	2
+	.type	queue_prog_cmd, %function
+queue_prog_cmd:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	mov	w0, 16
+	ldr	w1, [x19,40]
+	ldr	x2, [x19,8]
+	ldr	x3, [x19,24]
+	bl	flash_start_page_prog
+	adrp	x0, .LANCHOR0
+	ldr	w4, [x19,40]
+	add	x1, x0, :lo12:.LANCHOR0
+	ldrb	w2, [x1,3861]
+	cmp	w2, 255
+	beq	.L1990
+	ubfx	x4, x4, 21, 3
+	add	x1, x1, 768
+.L1992:
+	add	x3, x1, x2, lsl 6
+	ldr	w5, [x3,40]
+	ubfx	x5, x5, 21, 3
+	cmp	w4, w5
+	bne	.L1991
+	ldrb	w5, [x3,58]
+	add	x3, x3, 48
+	cmp	w5, 6
+	bne	.L1991
+	mov	w1, 3
+	strb	w1, [x3,10]
+	b	.L1990
+.L1991:
+	lsl	x2, x2, 6
+	ldrb	w2, [x1,x2]
+	cmp	w2, 255
+	bne	.L1992
+.L1990:
+	mov	w1, 3
+	strb	w1, [x19,58]
+	mov	w1, 1
+	add	x0, x0, :lo12:.LANCHOR0
+	strb	w1, [x19,59]
+	mov	w1, -1
+	add	x0, x0, 3861
+	strb	w1, [x19]
+	mov	x1, x19
+	bl	buf_add_tail
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	queue_prog_cmd, .-queue_prog_cmd
+	.align	2
+	.global	sblk_prog_page
+	.type	sblk_prog_page, %function
+sblk_prog_page:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	str	x27, [sp,80]
+	mov	x19, x0
+	uxtb	w20, w1
+	ldrh	w0, [x0,50]
+	cbz	w0, .L1998
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L1998
+	adrp	x0, .LC151
+	ldr	w1, [x19,40]
+	add	x0, x0, :lo12:.LC151
+	mov	w2, w20
+	bl	printk
+.L1998:
+	adrp	x21, .LANCHOR0
+	adrp	x24, .LANCHOR3
+	add	x21, x21, :lo12:.LANCHOR0
+	add	x24, x24, :lo12:.LANCHOR3
+	mov	w22, 0
+	add	x26, x21, 768
+	add	x24, x24, 264
+.L1999:
+	cbz	w20, .L2025
+	ldrb	w25, [x19]
+	ldr	w23, [x19,40]
+.L2000:
+	mov	w0, w23
+	mov	w1, 1
+	bl	queue_lun_state
+	cbz	w0, .L2026
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2000
+.L2026:
+	cmp	w20, 1
+	beq	.L2002
+	ldrb	w0, [x21,765]
+	cbnz	w0, .L2003
+.L2002:
+	mov	x0, x19
+	bl	queue_prog_cmd
+	b	.L2004
+.L2003:
+	ldrb	w0, [x19]
+	ubfx	x27, x23, 21, 3
+	cmp	w0, 255
+	bne	.L2005
+	adrp	x0, .LC0
+	mov	x1, x24
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 489
+	bl	printk
+.L2005:
+	ldrb	w0, [x19]
+	add	x0, x26, x0, lsl 6
+	ldr	w4, [x0,40]
+	ubfx	x0, x4, 21, 3
+	cmp	w27, w0
+	bne	.L2006
+	ldrh	w3, [x21,3314]
+	mov	w1, 21
+	ldrb	w6, [x21,3312]
+	mov	w27, 1
+	sub	w1, w1, w3
+	lsr	w0, w23, w3
+	sub	w6, w6, #1
+	lsl	w1, w27, w1
+	sub	w1, w1, #1
+	lsl	w2, w27, w3
+	uxth	w7, w6
+	sub	w2, w2, #1
+	and	w5, w7, w0
+	lsr	w0, w4, w3
+	uxth	w1, w1
+	and	w3, w7, w0
+	and	w3, w1, w3
+	and	w0, w1, w5
+	cmp	w0, w3
+	uxth	w2, w2
+	beq	.L2006
+	and	w23, w2, w23
+	and	w2, w2, w4
+	cmp	w23, w2
+	bne	.L2006
+	cmp	w22, w6
+	beq	.L2006
+	ldr	w1, [x19,40]
+	mov	w0, 17
+	ldr	x2, [x19,8]
+	add	w22, w22, w27
+	ldr	x3, [x19,24]
+	bl	flash_start_page_prog
+	strb	w27, [x19,59]
+	mov	w0, 8
+	strb	w0, [x19,58]
+	mov	w0, -1
+	mov	x1, x19
+	strb	w0, [x19]
+	add	x0, x21, 3861
+	bl	buf_add_tail
+	b	.L2004
+.L2006:
+	mov	x0, x19
+	mov	w22, 0
+	bl	queue_prog_cmd
+.L2004:
+	sbfiz	x19, x25, 6, 32
+	sub	w20, w20, #1
+	add	x19, x26, x19
+	b	.L1999
+.L2025:
+	mov	w0, w20
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	sblk_prog_page, .-sblk_prog_page
+	.align	2
+	.global	ftl_flush
+	.type	ftl_flush, %function
+ftl_flush:
+	stp	x29, x30, [sp, -32]!
+	adrp	x2, .LANCHOR0
+	add	x29, sp, 0
+	add	x0, x2, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	x19, x2
+	adrp	x20, .LANCHOR5
+	ldrb	w1, [x0,2841]
+	cbz	w1, .L2028
+	add	x2, x20, :lo12:.LANCHOR5
+	add	x0, x0, 768
+	ldrb	w2, [x2,513]
+	add	x0, x0, x2, lsl 6
+	bl	sblk_prog_page
+.L2028:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR5
+	mov	w0, -1
+	strb	wzr, [x2,2841]
+	strb	w0, [x20,513]
+	bl	sblk_wait_write_queue_completed
+	bl	ftl_write_completed
+	mov	w0, -1
+	bl	ftl_vpn_decrement
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_flush, .-ftl_flush
+	.align	2
+	.global	zftl_cache_flush
+	.type	zftl_cache_flush, %function
+zftl_cache_flush:
+	adrp	x0, .LANCHOR0+2841
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrb	w0, [x0,#:lo12:.LANCHOR0+2841]
+	cbz	w0, .L2032
+	bl	timer_get_time
+	adrp	x1, .LANCHOR5+516
+	ldr	w1, [x1,#:lo12:.LANCHOR5+516]
+	add	w1, w1, 100
+	cmp	w0, w1
+	bls	.L2032
+	bl	ftl_flush
+.L2032:
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_cache_flush, .-zftl_cache_flush
+	.align	2
+	.global	flash_start_tlc_page_prog
+	.type	flash_start_tlc_page_prog, %function
+flash_start_tlc_page_prog:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w20, w4
+	adrp	x4, .LANCHOR0
+	stp	x25, x26, [sp,64]
+	uxtb	w25, w0
+	add	x0, x4, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	uxtb	w26, w3
+	uxtb	w21, w1
+	ldrb	w0, [x0,98]
+	uxtb	w22, w2
+	mov	x24, x5
+	mov	x23, x6
+	cmp	w0, w26
+	mov	x19, x4
+	bhi	.L2037
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 280
+	mov	w2, 648
+	bl	printk
+.L2037:
+	add	x4, x19, :lo12:.LANCHOR0
+	add	x26, x4, x26, sxtw
+	ldrb	w26, [x26,200]
+	mov	w0, w26
+	ldr	x19, [x4,16]
+	bl	nandc_cs
+	cbz	w25, .L2038
+	sxtw	x1, w26
+	add	x1, x1, 8
+	add	x1, x19, x1, lsl 8
+	str	w25, [x1,8]
+.L2038:
+	ubfiz	x7, x26, 8, 8
+	mov	w0, 128
+	add	x19, x19, x7
+	str	w21, [x19,2056]
+	str	w0, [x19,2056]
+	and	w0, w20, 255
+	str	wzr, [x19,2052]
+	str	wzr, [x19,2052]
+	str	w0, [x19,2052]
+	lsr	w0, w20, 8
+	str	w0, [x19,2052]
+	lsr	w0, w20, 16
+	add	w20, w20, w20, lsl 1
+	str	w0, [x19,2052]
+	sub	w0, w20, #1
+	add	w0, w0, w21
+	bl	nandc_set_seed
+	adrp	x1, .LANCHOR2+385
+	mov	x2, x24
+	mov	x3, x23
+	mov	w0, 1
+	ldrb	w1, [x1,#:lo12:.LANCHOR2+385]
+	bl	nandc_xfer_start
+	bl	nandc_xfer_done
+	str	w22, [x19,2056]
+	mov	w0, w26
+	bl	nandc_de_cs
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	flash_start_tlc_page_prog, .-flash_start_tlc_page_prog
+	.align	2
+	.type	queue_tlc_prog_cmd, %function
+queue_tlc_prog_cmd:
+	stp	x29, x30, [sp, -48]!
+	mov	w1, 1
+	mov	w2, 26
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	x19, x0
+	ldr	x6, [x0]
+	ldr	w20, [x6,40]
+	ldr	x5, [x6,8]
+	and	w21, w20, 2097151
+	ldrb	w0, [x6,60]
+	ubfx	x20, x20, 21, 3
+	ldr	x6, [x6,24]
+	mov	w3, w20
+	mov	w4, w21
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	x6, [x19,8]
+	mov	w3, w20
+	ldr	x0, [x19]
+	mov	w4, w21
+	mov	w1, 2
+	mov	w2, 26
+	ldr	x5, [x6,8]
+	ldrb	w0, [x0,60]
+	ldr	x6, [x6,24]
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	x6, [x19,16]
+	mov	w3, w20
+	ldr	x0, [x19]
+	mov	w4, w21
+	mov	w2, 16
+	mov	w1, 3
+	ldr	x5, [x6,8]
+	ldrb	w0, [x0,60]
+	ldr	x6, [x6,24]
+	bl	flash_start_tlc_page_prog
+	ldr	x1, [x19]
+	mov	w0, 4
+	strb	w0, [x1,58]
+	mov	w0, 1
+	strb	w0, [x1,59]
+	mov	w0, -1
+	strb	w0, [x1]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 3861
+	bl	buf_add_tail
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	queue_tlc_prog_cmd, .-queue_tlc_prog_cmd
+	.align	2
+	.global	sblk_tlc_prog_one_page
+	.type	sblk_tlc_prog_one_page, %function
+sblk_tlc_prog_one_page:
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	x20, x0
+	ldr	x0, [x0]
+	ldr	w21, [x0,40]
+.L2044:
+	mov	w0, w21
+	mov	w1, 1
+	bl	queue_lun_state
+	mov	w19, w0
+	cbz	w0, .L2046
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2044
+.L2046:
+	mov	x0, x20
+	bl	queue_tlc_prog_cmd
+	ldr	x21, [sp,32]
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	sblk_tlc_prog_one_page, .-sblk_tlc_prog_one_page
+	.align	2
+	.global	sblk_xlc_prog_pages
+	.type	sblk_xlc_prog_pages, %function
+sblk_xlc_prog_pages:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	x19, x0
+	mov	x22, x1
+	ldr	x0, [x0]
+	mov	w24, w2
+	ldr	w20, [x0,40]
+.L2048:
+	mov	w0, w20
+	mov	w1, 1
+	bl	queue_lun_state
+	cbz	w0, .L2052
+	bl	queue_wait_first_req_completed
+	bl	queue_remove_completed_req
+	b	.L2048
+.L2052:
+	cmp	w24, 2
+	bne	.L2050
+	ldr	x6, [x19]
+	mov	w1, 1
+	ldr	x0, [x22]
+	mov	w2, 17
+	ldr	w20, [x6,40]
+	ldr	x5, [x6,8]
+	and	w23, w20, 2097151
+	ldr	w21, [x0,40]
+	ubfx	x20, x20, 21, 3
+	ldrb	w0, [x6,60]
+	ldr	x6, [x6,24]
+	mov	w3, w20
+	mov	w4, w23
+	and	w21, w21, 2097151
+	bl	flash_start_tlc_page_prog
+	bl	nandc_wait_flash_ready
+	ldr	x6, [x22]
+	mov	w3, w20
+	ldr	x0, [x19]
+	mov	w4, w21
+	mov	w1, 1
+	mov	w2, 26
+	ldr	x5, [x6,8]
+	ldrb	w0, [x0,60]
+	ldr	x6, [x6,24]
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	x6, [x19,8]
+	mov	w1, w24
+	ldr	x0, [x19]
+	mov	w3, w20
+	mov	w4, w23
+	mov	w2, 17
+	ldr	x5, [x6,8]
+	ldrb	w0, [x0,60]
+	ldr	x6, [x6,24]
+	bl	flash_start_tlc_page_prog
+	bl	nandc_wait_flash_ready
+	ldr	x6, [x22,8]
+	mov	w1, w24
+	ldr	x0, [x19]
+	mov	w3, w20
+	mov	w4, w21
+	mov	w2, 26
+	ldr	x5, [x6,8]
+	ldrb	w0, [x0,60]
+	ldr	x6, [x6,24]
+	bl	flash_start_tlc_page_prog
+	bl	nandc_iqr_wait_flash_ready
+	bl	nandc_wait_flash_ready
+	ldr	x6, [x19,16]
+	mov	w3, w20
+	ldr	x0, [x19]
+	mov	w4, w23
+	mov	w1, 3
+	mov	w2, 17
+	ldr	x5, [x6,8]
+	ldrb	w0, [x0,60]
+	ldr	x6, [x6,24]
+	bl	flash_start_tlc_page_prog
+	bl	nandc_wait_flash_ready
+	ldr	x6, [x22,16]
+	mov	w1, 3
+	ldr	x0, [x19]
+	mov	w2, 16
+	mov	w3, w20
+	mov	w4, w21
+	ldr	x5, [x6,8]
+	ldrb	w0, [x0,60]
+	ldr	x6, [x6,24]
+	bl	flash_start_tlc_page_prog
+	ldr	x1, [x19]
+	mov	w0, 5
+	strb	w0, [x1,58]
+	mov	w0, 1
+	strb	w0, [x1,59]
+	mov	w0, -1
+	strb	w0, [x1]
+	adrp	x0, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR0
+	add	x0, x0, 3861
+	bl	buf_add_tail
+	b	.L2051
+.L2050:
+	mov	x0, x19
+	bl	queue_tlc_prog_cmd
+.L2051:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	sblk_xlc_prog_pages, .-sblk_xlc_prog_pages
+	.align	2
+	.global	flash_prog_page_en
+	.type	flash_prog_page_en, %function
+flash_prog_page_en:
+	stp	x29, x30, [sp, -96]!
+	adrp	x6, .LANCHOR0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	uxtb	w21, w0
+	add	x0, x6, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w20, w1
+	mov	x23, x2
+	ldrb	w0, [x0,98]
+	mov	x22, x3
+	mov	w24, w4
+	uxtb	w25, w5
+	cmp	w0, w21
+	ubfx	x28, x20, 24, 2
+	mov	x19, x6
+	bhi	.L2054
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 312
+	mov	w2, 473
+	bl	printk
+.L2054:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w26, w20
+	add	x0, x2, x21, sxtw
+	ldrb	w27, [x0,200]
+	cbnz	w28, .L2055
+	ldrb	w0, [x2,97]
+	cbz	w0, .L2056
+	ldrb	w0, [x2,208]
+	cbz	w0, .L2055
+.L2056:
+	add	x6, x19, :lo12:.LANCHOR0
+	ldrh	w26, [x6,210]
+	ldrb	w1, [x6,208]
+	udiv	w2, w20, w26
+	mul	w26, w2, w26
+	sub	w0, w20, w26
+	cbz	w1, .L2057
+	add	w26, w26, w0, lsl 1
+	b	.L2055
+.L2057:
+	add	x6, x6, 212
+	ldrh	w0, [x6,w0,uxtw 1]
+	add	w26, w0, w26
+.L2055:
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 4, .L2058
+	adrp	x0, .LC152
+	mov	w1, w27
+	add	x0, x0, :lo12:.LC152
+	mov	w2, w20
+	bl	printk
+.L2058:
+	mov	w1, w26
+	mov	w0, w27
+	mov	x2, x23
+	mov	x3, x22
+	mov	w4, w24
+	bl	flash_prog_page
+	mov	w26, w0
+	cbz	w25, .L2059
+	adrp	x19, .LANCHOR4
+	mov	w0, w21
+	add	x25, x19, :lo12:.LANCHOR4
+	mov	w1, w20
+	mov	w4, w24
+	ldr	x2, [x25,1216]
+	ldr	x3, [x25,1224]
+	bl	flash_read_page_en
+	cmp	w0, 512
+	beq	.L2060
+	cmn	w0, #1
+	beq	.L2060
+	ldr	x0, [x25,1216]
+	ldr	w1, [x23]
+	ldr	w0, [x0]
+	cmp	w1, w0
+	bne	.L2060
+	ldr	x0, [x25,1224]
+	ldr	w1, [x22]
+	ldr	w0, [x0]
+	cmp	w1, w0
+	beq	.L2059
+.L2060:
+	add	x19, x19, :lo12:.LANCHOR4
+	mov	w2, 4
+	adrp	x0, .LC153
+	mov	w3, w2
+	add	x0, x0, :lo12:.LC153
+	ldr	x1, [x19,1224]
+	bl	rknand_print_hex
+	mov	w2, 4
+	adrp	x0, .LC154
+	ldr	x1, [x19,1216]
+	add	x0, x0, :lo12:.LC154
+	mov	w3, w2
+	bl	rknand_print_hex
+	b	.L2061
+.L2059:
+	cmn	w26, #1
+	mov	w0, w26
+	bne	.L2062
+.L2061:
+	adrp	x0, .LC155
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC155
+	bl	printk
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 312
+	mov	w2, 499
+	bl	printk
+	mov	w0, -1
+.L2062:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_prog_page_en, .-flash_prog_page_en
+	.align	2
+	.global	ftl_test_block
+	.type	ftl_test_block, %function
+ftl_test_block:
+	stp	x29, x30, [sp, -112]!
+	add	x29, sp, 0
+	stp	x25, x26, [sp,64]
+	adrp	x25, .LANCHOR4
+	adrp	x26, .LANCHOR5
+	add	x25, x25, :lo12:.LANCHOR4
+	add	x26, x26, :lo12:.LANCHOR5
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	mov	w27, 0
+	adrp	x28, .LC156
+	uxth	w23, w0
+	str	wzr, [x26,256]
+	add	x0, x25, 1280
+	str	wzr, [x25,1280]
+	mov	w21, w27
+	add	x28, x28, :lo12:.LC156
+	str	x0, [x29,104]
+	add	x26, x26, 256
+.L2076:
+	adrp	x20, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w1, [x0,3326]
+	cmp	w1, w21
+	bls	.L2085
+	mov	w24, 0
+.L2086:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x0,3312]
+	cmp	w0, w24
+	bls	.L2101
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2077
+	mov	x0, x28
+	mov	w1, w23
+	bl	printk
+.L2077:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrb	w19, [x0,3312]
+	madd	w19, w23, w19, w24
+	uxth	w19, w19
+	cbnz	w21, .L2078
+	ldr	x0, [x0,192]
+	ldrb	w0, [x0,47]
+	cmp	w0, w19
+	bcs	.L2079
+.L2078:
+	uxtb	w22, w21
+	mov	w1, w19
+	mov	w0, w22
+	bl	flash_check_bad_block
+	cbnz	w0, .L2079
+	add	x4, x20, :lo12:.LANCHOR0
+	mov	w0, w22
+	mov	w1, w27
+	str	x4, [x29,96]
+	ldrh	w3, [x4,3324]
+	mul	w25, w19, w3
+	mov	w2, w25
+	bl	flash_erase_block_en
+	ldr	x4, [x29,96]
+	cbz	w0, .L2080
+	ldrb	w0, [x4,3225]
+	cmp	w0, 2
+	bne	.L2100
+	ldrb	w0, [x4,97]
+	cbz	w0, .L2100
+	mov	w0, w22
+	mov	w1, 1
+	mov	w2, w25
+	bl	flash_erase_block_en
+	cbz	w0, .L2082
+	b	.L2100
+.L2080:
+	cbz	w27, .L2083
+.L2082:
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w27, 1
+	ldrb	w0, [x0,3225]
+	add	w25, w25, w0, lsl 24
+.L2083:
+	add	x4, x20, :lo12:.LANCHOR0
+	ldr	x2, [x29,104]
+	mov	w0, w22
+	mov	w1, w25
+	mov	x3, x26
+	mov	w5, 1
+	ldrb	w4, [x4,2816]
+	bl	flash_prog_page_en
+	cbz	w0, .L2079
+.L2100:
+	mov	w0, w22
+	mov	w1, w19
+	bl	flash_mask_bad_block
+.L2079:
+	add	w24, w24, 1
+	uxth	w24, w24
+	b	.L2086
+.L2101:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L2076
+.L2085:
+	cbz	w27, .L2087
+	ldr	x0, [x0,64]
+	add	x23, x0, x23, uxth 2
+	ldrb	w0, [x23,2]
+	mov	w1, 2
+	bfi	w0, w1, 3, 2
+	strb	w0, [x23,2]
+.L2087:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	ftl_test_block, .-ftl_test_block
+	.align	2
+	.global	ftl_prog_page
+	.type	ftl_prog_page, %function
+ftl_prog_page:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	uxtb	w19, w0
+	mov	w20, w1
+	str	x2, [x29,40]
+	str	x3, [x29,48]
+	str	x4, [x29,56]
+	bl	sblk_wait_write_queue_completed
+	ldr	x2, [x29,40]
+	mov	w0, w19
+	ldr	x3, [x29,48]
+	mov	w1, w20
+	ldr	x4, [x29,56]
+	mov	w5, 1
+	bl	flash_prog_page_en
+	cmn	w0, #1
+	mov	w19, w0
+	bne	.L2103
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 336
+	mov	w2, 2052
+	bl	printk
+	adrp	x0, .LC155
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC155
+	bl	printk
+.L2103:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	ftl_prog_page, .-ftl_prog_page
+	.align	2
+	.global	ftl_info_flush
+	.type	ftl_info_flush, %function
+ftl_info_flush:
+	stp	x29, x30, [sp, -96]!
+	mov	w1, 0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	adrp	x22, .LANCHOR5
+	stp	x25, x26, [sp,64]
+	mov	w26, w0
+	add	x0, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x19, x20, [sp,16]
+	stp	x27, x28, [sp,80]
+	adrp	x23, .LANCHOR3
+	add	x19, x22, :lo12:.LANCHOR5
+	ldrb	w2, [x0,2816]
+	adrp	x24, .LC157
+	add	x23, x23, :lo12:.LANCHOR3
+	add	x0, x19, 576
+	lsl	w2, w2, 1
+	mov	w25, 0
+	add	x24, x24, :lo12:.LC157
+	add	x23, x23, 352
+	bl	ftl_memset
+.L2105:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w27, [x19,832]
+	ldrh	w20, [x19,834]
+	ldr	x2, [x0,2848]
+	ldrh	w28, [x0,3324]
+	ldr	w1, [x2,4]
+	add	w1, w1, 1
+	str	w1, [x2,4]
+	str	w26, [x19,576]
+	ldr	x3, [x0,2848]
+	ldr	w0, [x3,4]
+	str	w0, [x19,580]
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2106
+	ldr	w3, [x3,4]
+	mov	x0, x24
+	mov	w1, w27
+	mov	w2, w20
+	bl	printk
+.L2106:
+	add	x1, x21, :lo12:.LANCHOR0
+	ldrh	w0, [x19,834]
+	ldrh	w1, [x1,3276]
+	cmp	w1, w0
+	bhi	.L2107
+	adrp	x20, .LC0
+	add	x20, x20, :lo12:.LC0
+.L2112:
+	ldrb	w1, [x19,833]
+	add	w1, w1, 1
+	uxtb	w1, w1
+	strb	w1, [x19,833]
+	cmp	w1, 7
+	bls	.L2108
+	mov	x1, 0
+.L2111:
+	add	x0, x21, :lo12:.LANCHOR0
+	uxth	w25, w1
+	ldr	x2, [x0,192]
+	add	w0, w1, 8
+	add	x0, x2, x0, sxtw
+	ldrb	w2, [x0,32]
+	add	w0, w2, 127
+	uxtb	w0, w0
+	cmp	w0, 125
+	bhi	.L2109
+	mov	x0, x20
+	mov	x1, x23
+	mov	w2, 672
+	bl	printk
+	b	.L2110
+.L2109:
+	cmp	w2, 255
+	bne	.L2110
+	add	x1, x1, 1
+	cmp	x1, 8
+	bne	.L2111
+	mov	w25, w1
+.L2110:
+	strb	w25, [x19,833]
+	mov	w25, 1
+.L2108:
+	add	x27, x21, :lo12:.LANCHOR0
+	ldrb	w1, [x19,833]
+	ldr	x0, [x27,192]
+	add	x1, x0, x1
+	ldrb	w2, [x1,40]
+	strb	w2, [x19,832]
+	cmp	w2, 255
+	beq	.L2112
+	ldrh	w20, [x27,3324]
+	mov	w0, 0
+	mul	w20, w2, w20
+	mov	w1, w20
+	bl	flash_erase_block
+	ldrb	w4, [x27,2816]
+	mov	w1, w20
+	mov	w0, 0
+	add	x2, x19, 896
+	add	x3, x19, 576
+	add	w20, w20, 1
+	bl	ftl_prog_page
+	mov	w0, 1
+	strh	w0, [x19,834]
+	b	.L2113
+.L2107:
+	madd	w20, w27, w28, w20
+	cbnz	w0, .L2113
+	mov	w1, w20
+	bl	flash_erase_block
+.L2113:
+	add	x4, x21, :lo12:.LANCHOR0
+	mov	w1, w20
+	mov	w0, 0
+	add	x2, x19, 896
+	add	x3, x19, 576
+	ldrb	w4, [x4,2816]
+	bl	ftl_prog_page
+	cmn	w0, #1
+	ldrh	w1, [x19,834]
+	adrp	x0, .LANCHOR6
+	add	w1, w1, 1
+	strh	w1, [x19,834]
+	beq	.L2114
+	add	x1, x0, :lo12:.LANCHOR6
+	ldrb	w1, [x1,-128]
+	cbz	w1, .L2115
+.L2114:
+	add	x0, x0, :lo12:.LANCHOR6
+	strb	wzr, [x0,-128]
+	b	.L2105
+.L2115:
+	cbnz	w25, .L2116
+.L2124:
+	add	x22, x22, :lo12:.LANCHOR5
+	ldrb	w0, [x22,832]
+	cmp	w0, 255
+	bne	.L2118
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 708
+	add	x1, x1, 352
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	b	.L2118
+.L2116:
+	ldrb	w19, [x19,833]
+	adrp	x20, .LANCHOR3
+	adrp	x23, .LC0
+	add	x20, x20, :lo12:.LANCHOR3
+	add	w19, w19, 1
+	add	x23, x23, :lo12:.LC0
+	add	x20, x20, 352
+.L2119:
+	cmp	w19, 7
+	bhi	.L2124
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x1, [x0,192]
+	add	w0, w19, 8
+	add	x0, x1, x0, sxtw
+	ldrb	w24, [x0,32]
+	add	w0, w24, 127
+	uxtb	w0, w0
+	cmp	w0, 125
+	bhi	.L2120
+	mov	x0, x23
+	mov	x1, x20
+	mov	w2, 701
+	bl	printk
+	b	.L2121
+.L2120:
+	cmp	w24, 255
+	beq	.L2122
+.L2121:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrh	w1, [x0,3324]
+	mov	w0, 0
+	mul	w1, w24, w1
+	bl	flash_erase_block
+.L2122:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2119
+.L2118:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ftl_info_flush, .-ftl_info_flush
+	.align	2
+	.global	ftl_info_blk_init
+	.type	ftl_info_blk_init, %function
+ftl_info_blk_init:
+	stp	x29, x30, [sp, -112]!
+	mov	w0, 1
+	mov	w2, 16384
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	adrp	x19, .LANCHOR6
+	stp	x23, x24, [sp,48]
+	add	x23, x20, :lo12:.LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR6
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	adrp	x21, .LANCHOR5
+	strb	w0, [x19,-128]
+	ldrh	w1, [x23,56]
+	add	x22, x21, :lo12:.LANCHOR5
+	add	x24, x22, 896
+	strb	w0, [x19,-126]
+	mov	x0, x24
+	strb	wzr, [x19,-127]
+	add	x1, x24, x1, lsl 2
+	str	x1, [x23,2848]
+	mov	w1, 0
+	str	x24, [x23,64]
+	adrp	x26, .LC158
+	adrp	x27, .LANCHOR2
+	bl	ftl_memset
+	add	x26, x26, :lo12:.LC158
+	sub	x0, x19, #64
+	mov	w1, 0
+	mov	w2, 16384
+	mov	w19, 7
+	bl	ftl_memset
+	strb	wzr, [x22,833]
+	ldr	x0, [x23,192]
+	add	x23, x22, 576
+	strh	wzr, [x22,834]
+	ldrb	w0, [x0,40]
+	strb	w0, [x22,832]
+.L2142:
+	add	x5, x20, :lo12:.LANCHOR0
+	add	w0, w19, 8
+	sxth	w25, w19
+	ldr	x1, [x5,192]
+	add	x0, x1, x0, sxtw
+	ldrb	w1, [x0,32]
+	cmp	w1, 255
+	beq	.L2138
+	ldrh	w22, [x5,3324]
+	mov	w0, 0
+	ldrb	w4, [x5,2816]
+	mov	x2, x24
+	mov	x3, x23
+	str	x5, [x29,104]
+	mul	w22, w1, w22
+	mov	w1, w22
+	bl	ftl_read_page
+	cmn	w0, #1
+	mov	w28, w0
+	ldr	x5, [x29,104]
+	bne	.L2139
+	ldrb	w4, [x5,2816]
+	mov	w0, 0
+	add	w1, w22, 1
+	mov	x2, x24
+	mov	x3, x23
+	bl	ftl_read_page
+	mov	w28, w0
+.L2139:
+	ldr	w0, [x27,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2140
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w1, w19
+	mov	w2, w28
+	mov	w3, 580
+	ldr	x4, [x0,2848]
+	mov	x0, x26
+	ldr	w4, [x4]
+	bl	printk
+.L2140:
+	cmn	w28, #1
+	beq	.L2138
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,2848]
+	ldr	w1, [x0]
+	mov	w0, 21574
+	movk	w0, 0x494c, lsl 16
+	cmp	w1, w0
+	beq	.L2155
+.L2138:
+	sub	w19, w19, #1
+	cmn	w19, #1
+	bne	.L2142
+	mov	w25, 0
+	b	.L2141
+.L2155:
+	mov	w19, w25
+.L2141:
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2143
+	add	x0, x20, :lo12:.LANCHOR0
+	mov	w1, w19
+	mov	w2, 4800
+	ldr	x3, [x0,2848]
+	adrp	x0, .LC159
+	add	x0, x0, :lo12:.LC159
+	ldr	w3, [x3]
+	bl	printk
+.L2143:
+	cmn	w19, #1
+	bne	.L2144
+	add	x0, x21, :lo12:.LANCHOR5
+	mov	w1, 0
+	add	x0, x0, 896
+	mov	w2, 16384
+	add	x20, x20, :lo12:.LANCHOR0
+	bl	ftl_memset
+	mov	w0, 21574
+	ldr	x1, [x20,2848]
+	movk	w0, 0x494c, lsl 16
+	str	w0, [x1]
+	mov	w0, w19
+	b	.L2145
+.L2144:
+	add	x26, x20, :lo12:.LANCHOR0
+	add	x23, x21, :lo12:.LANCHOR5
+	add	w0, w25, 8
+	add	x24, x23, 896
+	mov	x2, x24
+	mov	w4, 4
+	ldr	x1, [x26,192]
+	add	x0, x1, x0, sxtw
+	strb	w25, [x23,833]
+	add	x25, x23, 576
+	ldrb	w1, [x0,32]
+	mov	x3, x25
+	mov	w0, 0
+	strb	w1, [x23,832]
+	bl	flash_get_last_written_page
+	sxth	w22, w0
+	add	w0, w0, 1
+	uxth	w19, w0
+	ldrb	w0, [x23,832]
+	ldrh	w23, [x26,3324]
+	mul	w23, w0, w23
+.L2146:
+	tbnz	w22, #31, .L2151
+	add	x26, x20, :lo12:.LANCHOR0
+	mov	w0, 0
+	add	w1, w22, w23
+	mov	x2, x24
+	mov	x3, x25
+	ldrb	w4, [x26,2816]
+	bl	ftl_read_page
+	cmn	w0, #1
+	beq	.L2147
+	ldr	x0, [x26,2848]
+	ldr	w1, [x0]
+	mov	w0, 21574
+	movk	w0, 0x494c, lsl 16
+	cmp	w1, w0
+	bne	.L2147
+.L2151:
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x21, x21, :lo12:.LANCHOR5
+	ldr	x0, [x20,2848]
+	strh	w19, [x21,834]
+	ldr	w2, [x0,16]
+	cmp	w2, 2048
+	bls	.L2149
+	lsr	w1, w2, 11
+	ldr	w3, [x0,20]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 11
+	str	w3, [x0,20]
+	str	w1, [x0,16]
+	b	.L2149
+.L2147:
+	sub	w22, w22, #1
+	sxth	w22, w22
+	b	.L2146
+.L2149:
+	ldr	w2, [x0,24]
+	cmp	w2, 2048
+	bls	.L2152
+	lsr	w1, w2, 11
+	ldr	w3, [x0,28]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 11
+	str	w3, [x0,28]
+	str	w1, [x0,24]
+.L2152:
+	ldr	w2, [x0,32]
+	cmp	w2, 1024
+	bls	.L2153
+	lsr	w1, w2, 10
+	ldr	w3, [x0,36]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 10
+	str	w3, [x0,36]
+	str	w1, [x0,32]
+.L2153:
+	ldr	w2, [x0,40]
+	cmp	w2, 1024
+	bls	.L2154
+	lsr	w1, w2, 10
+	ldr	w3, [x0,44]
+	add	w3, w3, w1
+	sub	w1, w2, w1, lsl 10
+	str	w3, [x0,44]
+	str	w1, [x0,40]
+.L2154:
+	ldr	w1, [x0,64]
+	add	w1, w1, 1
+	str	w1, [x0,64]
+	mov	w0, 0
+	bl	ftl_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	mov	w0, 0
+.L2145:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	ftl_info_blk_init, .-ftl_info_blk_init
+	.align	2
+	.global	ftl_ext_info_flush
+	.type	ftl_ext_info_flush, %function
+ftl_ext_info_flush:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	bl	timer_get_time
+	adrp	x22, .LANCHOR0
+	mov	w1, 100
+	udiv	w0, w0, w1
+	add	x1, x22, :lo12:.LANCHOR0
+	ldr	x1, [x1,80]
+	ldr	w3, [x1,520]
+	cmp	w0, w3
+	bls	.L2173
+	ldr	w2, [x1,12]
+	sub	w2, w2, w3
+	add	w2, w2, w0
+	str	w2, [x1,12]
+	b	.L2186
+.L2173:
+	bcs	.L2174
+.L2186:
+	str	w0, [x1,520]
+.L2174:
+	adrp	x23, .LANCHOR3
+	adrp	x24, .LANCHOR6
+	add	x23, x23, :lo12:.LANCHOR3
+	add	x24, x24, :lo12:.LANCHOR6
+	mov	w0, 0
+	add	x23, x23, 368
+	sub	x25, x24, #64
+	bl	ftl_total_vpn_update
+.L2175:
+	adrp	x19, .LANCHOR5
+	add	x19, x19, :lo12:.LANCHOR5
+	add	x19, x19, 576
+.L2178:
+	add	x2, x22, :lo12:.LANCHOR0
+	ldr	x0, [x2,2848]
+	ldr	w1, [x0,56]
+	add	w1, w1, 1
+	str	w1, [x0,56]
+	ldrh	w1, [x0,140]
+	ldrh	w0, [x2,3276]
+	cmp	w1, w0
+	bcc	.L2176
+	bl	ftl_ext_alloc_new_blk
+.L2176:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	x0, [x0,2848]
+	ldrh	w1, [x0,130]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2177
+	adrp	x0, .LC0
+	mov	x1, x23
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 1639
+	bl	printk
+.L2177:
+	add	x21, x22, :lo12:.LANCHOR0
+	mov	w0, 21
+	mov	w1, 1
+	ldr	x2, [x21,2848]
+	ldrh	w20, [x21,3314]
+	ldrh	w3, [x2,130]
+	sub	w20, w0, w20
+	ldrh	w0, [x2,140]
+	asr	w26, w3, w20
+	lsl	w20, w1, w20
+	sub	w20, w20, #1
+	ldrb	w2, [x21,2816]
+	and	w3, w20, w3
+	ldrh	w20, [x21,3324]
+	mov	w1, 0
+	lsl	w2, w2, 1
+	madd	w20, w3, w20, w0
+	mov	x0, x19
+	bl	ftl_memset
+	str	wzr, [x19]
+	ldr	x0, [x21,2848]
+	uxth	w20, w20
+	ldrb	w4, [x21,2816]
+	mov	w1, w20
+	mov	x2, x25
+	mov	x3, x19
+	ldr	w0, [x0,56]
+	str	w0, [x19,4]
+	mov	w0, w26
+	bl	ftl_prog_page
+	ldr	x2, [x21,2848]
+	ldrh	w1, [x2,140]
+	add	w1, w1, 1
+	uxth	w1, w1
+	strh	w1, [x2,140]
+	cmp	w1, 1
+	beq	.L2178
+	cmn	w0, #1
+	beq	.L2179
+	ldrb	w0, [x24,-126]
+	cbz	w0, .L2180
+.L2179:
+	adrp	x0, .LANCHOR6
+	add	x0, x0, :lo12:.LANCHOR6
+	strb	wzr, [x0,-126]
+	b	.L2175
+.L2180:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	ftl_ext_info_flush, .-ftl_ext_info_flush
+	.align	2
+	.global	ftl_ext_info_init
+	.type	ftl_ext_info_init, %function
+ftl_ext_info_init:
+	stp	x29, x30, [sp, -96]!
+	mov	w4, 4
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	str	x27, [sp,80]
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w20, 1
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	strh	wzr, [x1,3856]
+	adrp	x21, .LANCHOR6
+	ldr	x0, [x1,2848]
+	adrp	x22, .LANCHOR5
+	ldrh	w23, [x1,3314]
+	mov	w1, 21
+	add	x2, x21, :lo12:.LANCHOR6
+	add	x3, x22, :lo12:.LANCHOR5
+	ldrh	w0, [x0,130]
+	sub	w23, w1, w23
+	lsl	w20, w20, w23
+	sub	x2, x2, #64
+	asr	w23, w0, w23
+	sub	w20, w20, #1
+	and	w20, w20, w0
+	add	x3, x3, 576
+	uxtb	w23, w23
+	mov	w1, w20
+	mov	w0, w23
+	bl	flash_get_last_written_page
+	sxth	w25, w0
+	adrp	x0, .LANCHOR2
+	mov	w24, w25
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2188
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC108
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC108
+	add	x1, x1, 392
+	mov	w2, 1683
+	mov	w3, w25
+	bl	printk
+.L2188:
+	add	x21, x21, :lo12:.LANCHOR6
+	add	x22, x22, :lo12:.LANCHOR5
+	mov	w26, w25
+	sub	x21, x21, #64
+	add	x22, x22, 576
+.L2189:
+	tbnz	w26, #31, .L2194
+	add	x27, x19, :lo12:.LANCHOR0
+	mov	w0, w23
+	mov	x2, x21
+	mov	x3, x22
+	ldrh	w1, [x27,3324]
+	ldrb	w4, [x27,2816]
+	madd	w1, w20, w1, w26
+	bl	flash_read_page_en
+	cmp	w0, 512
+	beq	.L2190
+	cmn	w0, #1
+	beq	.L2190
+	ldr	x0, [x27,80]
+	ldr	w1, [x0]
+	mov	w0, 20038
+	movk	w0, 0x4549, lsl 16
+	cmp	w1, w0
+	bne	.L2190
+.L2194:
+	bl	zftl_sblk_list_init
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2848]
+	ldrh	w1, [x0,140]
+	cmp	w1, w25
+	bgt	.L2192
+	add	w24, w24, 1
+	strh	w24, [x0,140]
+	bl	ftl_ext_info_flush
+	b	.L2192
+.L2190:
+	sub	w26, w26, #1
+	sxth	w26, w26
+	b	.L2189
+.L2192:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x20, [x19,80]
+	bl	timer_get_time
+	mov	w1, 100
+	udiv	w0, w0, w1
+	str	w0, [x20,520]
+	ldr	x20, [x19,80]
+	bl	timer_get_time
+	str	w0, [x20,604]
+	ldr	x0, [x19,80]
+	str	wzr, [x0,608]
+	mov	w0, -1
+	strh	w0, [x19,3858]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldr	x27, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	ftl_ext_info_init, .-ftl_ext_info_init
+	.align	2
+	.global	ftl_low_format
+	.type	ftl_low_format, %function
+ftl_low_format:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR3
+	stp	x21, x22, [sp,32]
+	add	x20, x20, :lo12:.LANCHOR3
+	adrp	x22, .LC0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w21, 8
+	adrp	x24, .LANCHOR0
+	add	x22, x22, :lo12:.LC0
+	add	x20, x20, 416
+.L2207:
+	add	x0, x24, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR0
+	ldr	x0, [x0,192]
+	add	x0, x0, x21, sxtw
+	ldrb	w23, [x0,32]
+	add	w0, w23, 127
+	uxtb	w0, w0
+	cmp	w0, 125
+	bhi	.L2205
+	mov	x0, x22
+	mov	x1, x20
+	mov	w2, 1854
+	bl	printk
+.L2205:
+	cmp	w23, 255
+	beq	.L2206
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,3324]
+	mov	w0, 0
+	mul	w1, w23, w1
+	bl	flash_erase_block
+.L2206:
+	add	w21, w21, 1
+	cmp	w21, 16
+	bne	.L2207
+	bl	sblk_init
+	bl	ftl_info_blk_init
+	adrp	x0, .LANCHOR5
+	mov	w1, 0
+	add	x0, x0, :lo12:.LANCHOR5
+	mov	w2, 16384
+	add	x0, x0, 896
+	bl	ftl_memset
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w6, 1
+	ldr	x0, [x1,2848]
+	ldrh	w5, [x1,56]
+	ldrh	w0, [x0,134]
+.L2208:
+	cmp	w0, w5
+	bcs	.L2242
+	add	x4, x19, :lo12:.LANCHOR0
+	ubfiz	x1, x0, 2, 16
+	add	w0, w0, 1
+	ldr	x2, [x4,64]
+	uxth	w0, w0
+	add	x2, x2, x1
+	ldrb	w3, [x2,2]
+	and	w3, w3, 31
+	strb	w3, [x2,2]
+	ldr	x2, [x4,64]
+	add	x1, x2, x1
+	ldrb	w2, [x1,2]
+	bfi	w2, w6, 3, 2
+	strb	w2, [x1,2]
+	b	.L2208
+.L2242:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 21574
+	movk	w1, 0x494c, lsl 16
+	mov	w20, 0
+	adrp	x24, .LANCHOR7
+	mov	w25, 1
+	ldr	x2, [x0,2848]
+	str	w1, [x2]
+	ldr	x0, [x0,2848]
+	strh	wzr, [x0,148]
+.L2210:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x21,56]
+	cmp	w0, w20
+	bls	.L2243
+	add	x0, x24, :lo12:.LANCHOR7
+	mov	w27, 0
+	ubfiz	x22, x20, 2, 16
+	mov	w23, w27
+	strh	w20, [x0,3264]
+	mov	w0, w20
+	bl	ftl_test_block
+	ldrb	w28, [x21,3312]
+	ldrb	w4, [x21,3326]
+	mov	w21, w27
+	mul	w6, w20, w28
+	uxth	w5, w28
+.L2211:
+	cmp	w21, w4
+	bcs	.L2215
+	mov	x26, 0
+.L2216:
+	cmp	w5, w26, uxth
+	bls	.L2244
+	add	w1, w6, w26
+	mov	w0, w21
+	str	x5, [x29,104]
+	str	x4, [x29,112]
+	str	x6, [x29,120]
+	bl	flash_check_bad_block
+	ldr	x6, [x29,120]
+	ldr	x4, [x29,112]
+	ldr	x5, [x29,104]
+	cbz	w0, .L2212
+	add	x3, x19, :lo12:.LANCHOR0
+	add	w1, w27, w26
+	lsl	w1, w25, w1
+	ldr	x0, [x3,64]
+	add	x0, x0, x22
+	ldrb	w2, [x0,3]
+	orr	w1, w1, w2
+	strb	w1, [x0,3]
+	ldr	x1, [x3,2848]
+	ldrh	w0, [x1,148]
+	add	w0, w0, 1
+	strh	w0, [x1,148]
+	b	.L2213
+.L2212:
+	add	w23, w23, 1
+	uxth	w23, w23
+.L2213:
+	add	x26, x26, 1
+	b	.L2216
+.L2244:
+	add	w21, w21, 1
+	add	w27, w27, w28
+	uxth	w21, w21
+	b	.L2211
+.L2215:
+	cbnz	w23, .L2217
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,64]
+	add	x22, x0, x22
+	ldrb	w0, [x22,2]
+	orr	w0, w0, -32
+	strb	w0, [x22,2]
+.L2217:
+	add	w20, w20, 1
+	uxth	w20, w20
+	b	.L2210
+.L2243:
+	adrp	x0, .LANCHOR6
+	mov	w1, 0
+	add	x0, x0, :lo12:.LANCHOR6
+	mov	w2, 16384
+	sub	x0, x0, #64
+	bl	ftl_memset
+	ldr	x1, [x21,80]
+	mov	w0, 20038
+	movk	w0, 0x4549, lsl 16
+	mov	w6, 3
+	mov	w7, 15
+	str	w0, [x1]
+	mov	x1, 0
+	ldr	x0, [x21,192]
+	ldrb	w4, [x21,3312]
+	ldrb	w20, [x0,47]
+	udiv	w20, w20, w4
+	add	w20, w20, 1
+.L2221:
+	add	x3, x19, :lo12:.LANCHOR0
+	lsl	x0, x1, 2
+	cmp	w4, 1
+	csinc	w5, w6, wzr, ne
+	cmp	w4, 4
+	ldr	x2, [x3,64]
+	add	x2, x2, x0
+	strb	w5, [x2,3]
+	bne	.L2220
+	ldr	x2, [x3,64]
+	add	x2, x2, x0
+	strb	w7, [x2,3]
+.L2220:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x1, x1, 1
+	cmp	w20, w1, uxth
+	ldr	x5, [x2,2848]
+	ldrh	w3, [x5,148]
+	add	w3, w4, w3
+	strh	w3, [x5,148]
+	ldr	x3, [x2,64]
+	add	x0, x3, x0
+	ldrb	w3, [x0,2]
+	orr	w3, w3, -32
+	strb	w3, [x0,2]
+	bhi	.L2221
+	mov	w0, 16
+	sdiv	w4, w0, w4
+	ldr	x0, [x2,2848]
+	add	w4, w20, w4
+	uxth	w4, w4
+	strh	w4, [x0,134]
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2222
+	adrp	x0, .LC160
+	mov	w1, 1901
+	add	x0, x0, :lo12:.LC160
+	mov	w2, 128
+	mov	w3, w20
+	bl	printk
+.L2222:
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	w1, 255
+	mov	w2, 128
+	ldr	x0, [x21,2848]
+	add	x0, x0, 160
+	bl	ftl_memset
+	ldrb	w8, [x21,3312]
+	mov	w10, 21
+	ldrh	w0, [x21,3314]
+	ldrb	w13, [x21,3326]
+	uxth	w9, w8
+	sub	w10, w10, w0
+	mov	w0, 0
+	mul	w11, w20, w9
+	mov	w22, w0
+	uxth	w11, w11
+.L2223:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldr	x1, [x21,2848]
+	ldrh	w1, [x1,134]
+	cmp	w1, w20
+	bls	.L2245
+	ldr	x2, [x21,64]
+	ubfiz	x1, x20, 2, 16
+	add	w6, w0, w11
+	mov	w5, 0
+	add	x2, x2, x1
+	mov	w4, w5
+	uxth	w6, w6
+	ldrb	w3, [x2,2]
+	orr	w3, w3, -32
+	strb	w3, [x2,2]
+	ldr	x2, [x21,64]
+	ldr	x14, [x21,2848]
+	add	x1, x2, x1
+.L2224:
+	cmp	w13, w4, uxth
+	bls	.L2228
+	lsl	w12, w4, w10
+	mov	x3, 0
+	uxth	w12, w12
+.L2229:
+	uxth	w2, w3
+	cmp	w2, w9
+	bcs	.L2246
+	ldrb	w7, [x1,3]
+	add	w15, w5, w3
+	asr	w7, w7, w15
+	tbnz	x7, 0, .L2225
+	cmp	w8, 1
+	mov	w7, w6
+	bls	.L2226
+	and	w2, w2, 1
+	add	w2, w6, w2
+	uxth	w7, w2
+.L2226:
+	add	x15, x14, x22, sxtw 1
+	add	w22, w22, 1
+	add	w2, w7, w12
+	strh	w2, [x15,160]
+	uxth	w22, w22
+.L2225:
+	add	x3, x3, 1
+	b	.L2229
+.L2246:
+	add	w4, w4, 1
+	add	w5, w5, w8
+	b	.L2224
+.L2228:
+	add	w20, w20, 1
+	add	w0, w0, w9
+	uxth	w20, w20
+	uxth	w0, w0
+	b	.L2223
+.L2245:
+	ldrh	w2, [x21,56]
+	mov	w1, 0
+	ldr	x0, [x21,72]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	bl	zftl_sblk_list_init
+	ldr	x0, [x21,2848]
+	ldrh	w1, [x21,56]
+	ldrh	w2, [x0,134]
+	strh	w22, [x0,112]
+	sub	w1, w1, w2
+	strh	wzr, [x0,114]
+	strh	w1, [x0,116]
+	strh	wzr, [x0,118]
+	mov	w0, 1
+	bl	ftl_alloc_sblk
+	mov	w22, w0
+	mov	w1, 0
+	bl	ftl_erase_sblk
+	ldr	x1, [x21,2848]
+	mov	w0, w22
+	add	x1, x1, 672
+	bl	ftl_get_blk_list_in_sblk
+	ldr	x0, [x21,2848]
+	ldrh	w20, [x0,672]
+	strh	wzr, [x0,690]
+	mov	w0, 65533
+	sub	w1, w20, #1
+	cmp	w0, w1, uxth
+	bcs	.L2231
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 416
+	mov	w2, 1932
+	bl	printk
+.L2231:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 255
+	mov	w2, 256
+	ldr	x0, [x19,2848]
+	add	x0, x0, 416
+	strh	wzr, [x0,280]
+	bl	ftl_memset
+	ldr	x1, [x19,2848]
+	mov	w2, 21
+	ldrh	w0, [x19,3314]
+	sub	w2, w2, w0
+	mov	w0, 1
+	strh	w0, [x1,688]
+	adrp	x0, .LANCHOR7+3266
+	asr	w2, w20, w2
+	strh	w20, [x1,692]
+	strh	w2, [x1,694]
+	ldrh	w0, [x0,#:lo12:.LANCHOR7+3266]
+	strh	w22, [x1,416]
+	strh	w0, [x1,698]
+	bl	ftl_alloc_sys_blk
+	mov	w20, w0
+	mov	w1, 0
+	bl	ftl_erase_phy_blk
+	ldr	x1, [x19,2848]
+	ldr	x0, [x19,80]
+	strh	w20, [x1,130]
+	add	x0, x0, 16
+	mov	w1, 2
+	bl	ftl_open_sblk_init
+	ldr	x0, [x19,80]
+	mov	w1, 3
+	add	x0, x0, 48
+	bl	ftl_open_sblk_init
+	ldr	x1, [x19,2848]
+	ldr	x0, [x19,80]
+	ldrh	w2, [x1,134]
+	add	x0, x0, 136
+	strh	w2, [x0,-10]
+	mov	w2, -1
+	strh	wzr, [x0,-12]
+	strh	w2, [x0,-56]
+	strh	w2, [x0,-6]
+	mov	w2, -1
+	strh	wzr, [x0,-16]
+	str	w2, [x0,408]
+	strh	wzr, [x0,-14]
+	strh	w2, [x1,126]
+	mov	w1, 255
+	mov	w2, 256
+	bl	ftl_memset
+	ldr	x0, [x19,80]
+	mov	w1, 255
+	mov	w2, 128
+	add	x0, x0, 392
+	bl	ftl_memset
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	bl	ftl_info_blk_init
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	ftl_low_format, .-ftl_low_format
+	.align	2
+	.global	ftl_re_low_format_test
+	.type	ftl_re_low_format_test, %function
+ftl_re_low_format_test:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, .LC161
+	mov	w1, 1
+	add	x29, sp, 0
+	add	x0, x0, :lo12:.LC161
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	adrp	x19, .LANCHOR0
+	bl	printk
+	bl	sblk_init
+	bl	ftl_info_blk_init
+	bl	ftl_ext_info_init
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x0,2848]
+	ldrh	w2, [x0,56]
+	mov	w0, 0
+	mov	w3, w0
+	mov	w4, w0
+	ldrh	w1, [x1,134]
+.L2248:
+	cmp	w1, w2
+	bcs	.L2254
+	add	x5, x19, :lo12:.LANCHOR0
+	ldr	x6, [x5,64]
+	add	x6, x6, x1, uxth 2
+	ldrb	w5, [x6,2]
+	and	w7, w5, 31
+	ands	w5, w5, 24
+	strb	w7, [x6,2]
+	bne	.L2249
+	add	w4, w4, 1
+	uxth	w4, w4
+	b	.L2250
+.L2249:
+	cmp	w5, 16
+	bne	.L2251
+	add	w3, w3, 1
+	uxth	w3, w3
+	b	.L2250
+.L2251:
+	add	w0, w0, 1
+	uxth	w0, w0
+.L2250:
+	add	w1, w1, 1
+	uxth	w1, w1
+	b	.L2248
+.L2254:
+	add	x20, x19, :lo12:.LANCHOR0
+	lsl	w2, w2, 1
+	ldr	x1, [x20,2848]
+	strh	w0, [x1,116]
+	ldr	x0, [x20,72]
+	strh	w4, [x1,114]
+	strh	w3, [x1,118]
+	strh	wzr, [x1,122]
+	strh	wzr, [x1,120]
+	strh	wzr, [x1,124]
+	mov	w1, 0
+	bl	ftl_memset
+	bl	zftl_sblk_list_init
+	mov	w0, 1
+	bl	ftl_alloc_sblk
+	mov	w21, w0
+	mov	w1, 0
+	bl	ftl_erase_sblk
+	ldr	x1, [x20,2848]
+	mov	w0, w21
+	add	x1, x1, 672
+	bl	ftl_get_blk_list_in_sblk
+	ldr	x0, [x20,2848]
+	ldrh	w20, [x0,672]
+	strh	wzr, [x0,690]
+	mov	w0, 65533
+	sub	w1, w20, #1
+	cmp	w0, w1, uxth
+	bcs	.L2253
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 432
+	mov	w2, 2004
+	bl	printk
+.L2253:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, 255
+	mov	w2, 256
+	ldr	x0, [x19,2848]
+	add	x0, x0, 416
+	strh	wzr, [x0,280]
+	bl	ftl_memset
+	ldr	x0, [x19,2848]
+	mov	w1, 0
+	mov	w2, 4096
+	add	x0, x0, 704
+	bl	ftl_memset
+	ldr	x1, [x19,2848]
+	lsr	w0, w20, 14
+	ldrh	w2, [x19,56]
+	and	w20, w20, 16383
+	strh	w0, [x1,694]
+	mov	w0, 1
+	strh	w0, [x1,688]
+	adrp	x0, .LANCHOR7+3266
+	lsl	w2, w2, 1
+	strh	w20, [x1,692]
+	strh	w21, [x1,416]
+	ldrh	w0, [x0,#:lo12:.LANCHOR7+3266]
+	strh	w0, [x1,698]
+	mov	w1, 0
+	ldr	x0, [x19,72]
+	bl	ftl_memset
+	ldr	x0, [x19,80]
+	mov	w1, 2
+	add	x0, x0, 16
+	bl	ftl_open_sblk_init
+	ldr	x0, [x19,80]
+	mov	w1, 3
+	add	x0, x0, 48
+	bl	ftl_open_sblk_init
+	ldr	x1, [x19,2848]
+	ldr	x0, [x19,80]
+	ldrh	w2, [x1,134]
+	add	x0, x0, 136
+	strh	w2, [x0,-10]
+	mov	w2, -1
+	strh	wzr, [x0,-12]
+	strh	w2, [x0,-56]
+	strh	w2, [x0,-6]
+	mov	w2, -1
+	strh	wzr, [x0,-16]
+	str	w2, [x0,408]
+	strh	wzr, [x0,-14]
+	strh	w2, [x1,126]
+	mov	w1, 255
+	mov	w2, 256
+	bl	ftl_memset
+	ldr	x0, [x19,80]
+	mov	w1, 255
+	mov	w2, 128
+	add	x0, x0, 392
+	bl	ftl_memset
+	ldr	x0, [x19,80]
+	str	wzr, [x0,520]
+	str	wzr, [x0,524]
+	str	wzr, [x0,528]
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	bl	ftl_info_blk_init
+	ldr	x21, [sp,32]
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	ftl_re_low_format_test, .-ftl_re_low_format_test
+	.align	2
+	.global	ftl_prog_ppa_page
+	.type	ftl_prog_ppa_page, %function
+ftl_prog_ppa_page:
+	stp	x29, x30, [sp, -16]!
+	mov	w5, w0
+	mov	x7, x1
+	mov	x6, x2
+	add	x29, sp, 0
+	mov	w4, w3
+	ubfx	x0, x5, 21, 3
+	and	w1, w5, 2097151
+	mov	x2, x7
+	mov	x3, x6
+	bl	ftl_prog_page
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	ftl_prog_ppa_page, .-ftl_prog_ppa_page
+	.align	2
+	.global	ftl_write_last_log_page
+	.type	ftl_write_last_log_page, %function
+ftl_write_last_log_page:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	adrp	x19, .LANCHOR0
+	mov	w21, -1
+	ldrh	w1, [x0,6]
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w24, [x0,12]
+	cmp	w1, 1
+	ldr	x22, [x19,3840]
+	bne	.L2257
+	mov	x20, x0
+	bl	ftl_get_new_free_page
+	cmn	w0, #1
+	mov	w23, w0
+	mov	w21, 0
+	beq	.L2257
+	ldrh	w0, [x20]
+	add	x22, x22, x24, uxth 2
+	bl	ftl_vpn_decrement
+	adrp	x1, .LANCHOR5
+	mov	w0, 15555
+	add	x1, x1, :lo12:.LANCHOR5
+	movk	w0, 0xf55f, lsl 16
+	add	x2, x1, 256
+	str	x2, [x29,72]
+	str	w0, [x1,256]
+	ldrb	w0, [x19,3244]
+	ldrh	w1, [x19,3276]
+	mul	w1, w1, w0
+	mov	x0, x22
+	lsl	w1, w1, 2
+	bl	js_hash
+	ldr	x2, [x29,72]
+	mov	x1, x22
+	ldrb	w3, [x19,2816]
+	str	w0, [x2,4]
+	mov	w0, w23
+	str	w21, [x2,8]
+	str	w21, [x2,12]
+	bl	ftl_prog_ppa_page
+.L2257:
+	mov	w0, w21
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	ftl_write_last_log_page, .-ftl_write_last_log_page
+	.align	2
+	.global	ftl_open_sblk_recovery
+	.type	ftl_open_sblk_recovery, %function
+ftl_open_sblk_recovery:
+	sub	sp, sp, #176
+	stp	x29, x30, [sp,48]
+	add	x29, sp, 48
+	stp	x23, x24, [sp,96]
+	adrp	x23, .LANCHOR2
+	str	x1, [x29,120]
+	stp	x19, x20, [sp,64]
+	mov	x19, x0
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	stp	x21, x22, [sp,80]
+	stp	x25, x26, [sp,112]
+	stp	x27, x28, [sp,128]
+	tbz	x0, 12, .L2262
+	adrp	x0, .LC162
+	ldrh	w1, [x19,2]
+	add	x0, x0, :lo12:.LC162
+	bl	printk
+.L2262:
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2263
+	adrp	x0, .LC163
+	ldrb	w1, [x19,5]
+	add	x0, x0, :lo12:.LC163
+	bl	printk
+.L2263:
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2264
+	adrp	x0, .LC164
+	ldrh	w1, [x19]
+	add	x0, x0, :lo12:.LC164
+	bl	printk
+.L2264:
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2265
+	adrp	x0, .LC165
+	ldrh	w1, [x19,16]
+	ldrh	w2, [x19,18]
+	add	x0, x0, :lo12:.LC165
+	bl	printk
+.L2265:
+	ldrh	w0, [x19,10]
+	adrp	x24, .LANCHOR5
+	strh	w0, [x19,14]
+	mov	w0, 1
+	adrp	x25, .LANCHOR3
+	add	x24, x24, :lo12:.LANCHOR5
+	bl	buf_alloc
+	add	x25, x25, :lo12:.LANCHOR3
+	ldrb	w21, [x19,5]
+	mov	x27, x0
+	ldrh	w22, [x19,2]
+	mov	w28, 0
+	add	x24, x24, 576
+	add	x25, x25, 456
+.L2266:
+	adrp	x20, .LANCHOR0
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3276]
+	cmp	w0, w22
+	bls	.L2269
+	ldrb	w21, [x19,5]
+.L2267:
+	ldrb	w0, [x19,9]
+	cmp	w0, w21
+	bls	.L2347
+	add	x0, x19, x21, sxtw 1
+	ldrh	w5, [x0,16]
+	mov	w0, 65535
+	cmp	w5, w0
+	beq	.L2268
+	add	x3, x20, :lo12:.LANCHOR0
+	ldr	x1, [x27,8]
+	ldr	x2, [x27,24]
+	str	x5, [x29,104]
+	ldrh	w4, [x3,3324]
+	ldrb	w3, [x3,2816]
+	madd	w4, w5, w4, w22
+	str	x4, [x29,112]
+	mov	w0, w4
+	bl	ftl_read_ppa_page
+	cmp	w0, 512
+	mov	w26, w0
+	beq	.L2269
+	cmn	w0, #1
+	ldr	x4, [x29,112]
+	ldr	x5, [x29,104]
+	beq	.L2270
+	ldr	x0, [x27,24]
+	ldr	w1, [x0]
+	cmn	w1, #1
+	bne	.L2270
+	ldr	w0, [x0,4]
+	cmn	w0, #1
+	bne	.L2270
+	ldr	x0, [x27,8]
+	ldr	w0, [x0]
+	cmn	w0, #1
+	beq	.L2269
+.L2270:
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2271
+	ldr	x7, [x27,8]
+	mov	w3, w4
+	ldr	x0, [x27,24]
+	mov	w2, w22
+	mov	w4, w26
+	ldr	w1, [x7,12]
+	str	w1, [sp]
+	ldr	w1, [x0]
+	str	w1, [sp,8]
+	ldr	w1, [x0,4]
+	str	w1, [sp,16]
+	ldr	w1, [x0,8]
+	str	w1, [sp,24]
+	mov	w1, w5
+	ldr	w0, [x0,12]
+	str	w0, [sp,32]
+	adrp	x0, .LC166
+	add	x0, x0, :lo12:.LC166
+	ldr	w5, [x7]
+	ldr	w6, [x7,4]
+	ldr	w7, [x7,8]
+	bl	printk
+.L2271:
+	adrp	x0, .LANCHOR6-127
+	mov	w1, 1
+	strb	w1, [x0,#:lo12:.LANCHOR6-127]
+	ldrb	w0, [x19,9]
+	ldrh	w1, [x19,10]
+	madd	w0, w22, w0, w21
+	cmp	w1, w0
+	beq	.L2272
+	adrp	x0, .LC0
+	mov	x1, x25
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 1288
+	bl	printk
+.L2272:
+	ldrh	w0, [x19,10]
+	ldrh	w1, [x19,6]
+	ldrb	w2, [x19,9]
+	add	w1, w1, w0
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,3276]
+	mul	w0, w0, w2
+	cmp	w1, w0
+	beq	.L2273
+	adrp	x0, .LC0
+	mov	x1, x25
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 1289
+	bl	printk
+.L2273:
+	cmn	w26, #1
+	beq	.L2277
+	ldr	x0, [x27,24]
+	ldr	w0, [x0,4]
+	cmn	w0, #1
+	beq	.L2277
+	bl	lpa_hash_get_ppa
+	ldr	x1, [x29,120]
+	cbz	x1, .L2275
+	ldr	x3, [x27,24]
+	ldr	w1, [x3,8]
+	cmp	w0, w1
+	beq	.L2275
+	cmn	w0, #1
+	beq	.L2275
+	add	x28, x20, :lo12:.LANCHOR0
+	mov	w4, 21
+	mov	w26, 1
+	ldrh	w1, [x28,3314]
+	lsr	w2, w0, w1
+	sub	w1, w4, w1
+	lsl	w1, w26, w1
+	sub	w1, w1, #1
+	and	w1, w2, w1
+	ldrb	w2, [x28,3312]
+	udiv	w1, w1, w2
+	ldr	x2, [x29,120]
+	ldrh	w2, [x2]
+	cmp	w2, w1, uxth
+	bne	.L2275
+	ldr	w5, [x3]
+	mov	x2, x24
+	ldr	x1, [x27,8]
+	ldrb	w3, [x28,2816]
+	str	x4, [x29,104]
+	str	x5, [x29,112]
+	bl	ftl_read_ppa_page
+	ldr	w0, [x24]
+	ldr	x5, [x29,112]
+	ldr	x4, [x29,104]
+	cmp	w0, w5
+	bcc	.L2275
+	ldr	x0, [x27,24]
+	ldr	w1, [x0,8]
+	cmn	w1, #1
+	beq	.L2277
+	ldrh	w0, [x28,3314]
+	sub	w4, w4, w0
+	lsr	w1, w1, w0
+	lsl	w26, w26, w4
+	ldrb	w0, [x28,3312]
+	sub	w26, w26, #1
+	and	w1, w26, w1
+	udiv	w0, w1, w0
+	bl	ftl_vpn_decrement
+	b	.L2277
+.L2275:
+	ldr	x2, [x27,24]
+	add	x1, x20, :lo12:.LANCHOR0
+	ldr	w3, [x2,4]
+	ldr	w0, [x1,2824]
+	cmp	w3, w0
+	bcs	.L2277
+	ldrb	w0, [x19,9]
+	ldrh	w4, [x1,3276]
+	ldrh	w3, [x19,10]
+	mul	w0, w0, w4
+	sub	w0, w0, #1
+	cmp	w3, w0
+	blt	.L2348
+.L2277:
+	ldrh	w0, [x19,6]
+	mov	w28, 1
+	sub	w0, w0, #1
+	strh	w0, [x19,6]
+	ldrh	w0, [x19,10]
+	add	w0, w0, 1
+	strh	w0, [x19,10]
+.L2268:
+	add	w21, w21, 1
+	uxth	w21, w21
+	b	.L2267
+.L2347:
+	add	w22, w22, 1
+	strb	wzr, [x19,5]
+	uxth	w22, w22
+	b	.L2266
+.L2269:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x19,10]
+	ldrh	w1, [x19,6]
+	strh	w22, [x19,2]
+	add	w1, w1, w0
+	ldrh	w2, [x2,3276]
+	ldrb	w0, [x19,9]
+	strb	w21, [x19,5]
+	mul	w0, w0, w2
+	cmp	w1, w0
+	beq	.L2281
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 456
+	mov	w2, 1365
+	bl	printk
+.L2281:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w3, [x19,10]
+	ldr	x4, [x0,3840]
+	mov	w0, 0
+	mov	w2, w0
+.L2282:
+	cmp	w2, w3
+	bcs	.L2349
+	ldrh	w1, [x19,12]
+	add	w1, w2, w1
+	ldr	w1, [x4,x1,lsl 2]
+	cmn	w1, #1
+	beq	.L2283
+	add	w1, w0, 1
+	uxth	w0, w1
+.L2283:
+	add	w2, w2, 1
+	b	.L2282
+.L2349:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldrb	w1, [x19,9]
+	sub	w0, w0, w3
+	ldrh	w21, [x2,3276]
+	madd	w0, w1, w21, w0
+	uxth	w21, w0
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2285
+	ldrh	w1, [x19]
+	adrp	x0, .LC167
+	ldr	x4, [x2,72]
+	add	x0, x0, :lo12:.LC167
+	ubfiz	x3, x1, 1, 16
+	mov	w2, w21
+	ldrh	w3, [x4,x3]
+	bl	printk
+.L2285:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x19]
+	adrp	x22, .LC168
+	mov	w24, -1
+	add	x22, x22, :lo12:.LC168
+	ldr	x0, [x0,72]
+	strh	w21, [x0,x1,lsl 1]
+	mov	x0, x27
+	mov	w21, 0
+	bl	buf_free
+.L2286:
+	add	x2, x20, :lo12:.LANCHOR0
+	ldrb	w0, [x2,3244]
+	cmp	w21, w0, lsl 1
+	bcs	.L2350
+	cbz	w28, .L2287
+	ldrh	w0, [x19,6]
+	cmp	w0, 1
+	bls	.L2287
+	mov	x0, x19
+	bl	ftl_get_new_free_page
+	mov	w25, w0
+	ldr	w0, [x23,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2288
+	mov	x0, x22
+	mov	w1, w25
+	bl	printk
+.L2288:
+	add	x3, x20, :lo12:.LANCHOR0
+	ldr	x0, [x27,24]
+	ldr	x1, [x3,2848]
+	ldr	w1, [x1,8]
+	str	w1, [x0]
+	ldr	x0, [x27,24]
+	str	w24, [x0,4]
+	ldr	x0, [x27,24]
+	str	w24, [x0,8]
+	ldr	x0, [x27,24]
+	str	wzr, [x0,12]
+	ldr	x0, [x27,8]
+	str	wzr, [x0]
+	mov	w0, w25
+	ldr	x1, [x27,8]
+	ldr	x2, [x27,24]
+	ldrb	w3, [x3,2816]
+	bl	ftl_prog_ppa_page
+	ldrh	w0, [x19]
+	bl	ftl_vpn_decrement
+.L2287:
+	add	w21, w21, 1
+	b	.L2286
+.L2350:
+	ldrh	w1, [x2,3276]
+	ldrh	w0, [x19,12]
+	ldrb	w3, [x19,9]
+	madd	w0, w1, w3, w0
+	mov	x1, -4
+	add	x0, x1, x0, sxtw 2
+	ldr	x1, [x2,3840]
+	ldr	w0, [x1,x0]
+	cmn	w0, #1
+	beq	.L2290
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 456
+	mov	w2, 1395
+	bl	printk
+.L2290:
+	ldrh	w0, [x19,6]
+	cmp	w0, 1
+	bne	.L2261
+	mov	x0, x19
+	bl	ftl_write_last_log_page
+	b	.L2261
+.L2348:
+	ldr	x0, [x1,2848]
+	ldr	w2, [x2]
+	ldr	w1, [x0,8]
+	cmp	w2, w1
+	bls	.L2278
+	str	w2, [x0,8]
+.L2278:
+	ldr	x1, [x27,24]
+	ldrh	w0, [x19,10]
+	ldrh	w2, [x19,12]
+	add	w2, w2, w0
+	ldr	w0, [x1,4]
+	ldr	w1, [x1,8]
+	bl	lpa_hash_update_ppa
+	b	.L2277
+.L2261:
+	sub	sp, x29, #48
+	ldp	x19, x20, [sp,64]
+	ldp	x21, x22, [sp,80]
+	ldp	x23, x24, [sp,96]
+	ldp	x25, x26, [sp,112]
+	ldp	x27, x28, [sp,128]
+	ldp	x29, x30, [sp,48]
+	add	sp, sp, 176
+	ret
+	.size	ftl_open_sblk_recovery, .-ftl_open_sblk_recovery
+	.align	2
+	.global	pm_write_page
+	.type	pm_write_page, %function
+pm_write_page:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x22, .LANCHOR3
+	str	x27, [sp,80]
+	stp	x23, x24, [sp,48]
+	add	x22, x22, :lo12:.LANCHOR3
+	adrp	x23, .LC0
+	stp	x25, x26, [sp,64]
+	stp	x19, x20, [sp,16]
+	mov	w21, w0
+	mov	x24, x1
+	adrp	x25, .LANCHOR0
+	add	x23, x23, :lo12:.LC0
+	add	x22, x22, 480
+.L2352:
+	add	x2, x25, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR0
+	ldr	x0, [x2,2848]
+	ldr	w1, [x0,48]
+	ldrh	w3, [x0,696]
+	add	w1, w1, 1
+	str	w1, [x0,48]
+	ldrh	w1, [x2,3276]
+	cmp	w3, w1
+	bcs	.L2353
+	ldrh	w1, [x0,692]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2354
+.L2353:
+	bl	pm_alloc_new_blk
+	mov	w0, 0
+	bl	ftl_info_flush
+.L2354:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,2848]
+	ldrh	w1, [x0,692]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2355
+	mov	x0, x23
+	mov	x1, x22
+	mov	w2, 228
+	bl	printk
+.L2355:
+	add	x19, x19, :lo12:.LANCHOR0
+	adrp	x20, .LANCHOR7
+	add	x27, x20, :lo12:.LANCHOR7
+	mov	w2, 64
+	ldr	x1, [x19,2848]
+	ldrh	w26, [x19,3324]
+	ldrh	w0, [x1,692]
+	ldrh	w1, [x1,696]
+	madd	w26, w0, w26, w1
+	ldr	x0, [x27,3272]
+	mov	w1, 0
+	bl	ftl_memset
+	ldr	x0, [x27,3272]
+	mov	x2, x24
+	str	w21, [x0]
+	ldr	x1, [x19,2848]
+	ldr	x0, [x27,3272]
+	ldrb	w4, [x19,2816]
+	ldr	w1, [x1,48]
+	str	w1, [x0,4]
+	mov	w1, w26
+	ldr	x0, [x19,2848]
+	ldr	x3, [x27,3272]
+	ldrb	w0, [x0,694]
+	bl	ftl_prog_page
+	ldr	x1, [x19,2848]
+	ldrh	w2, [x1,696]
+	add	w2, w2, 1
+	uxth	w2, w2
+	strh	w2, [x1,696]
+	cmp	w2, 1
+	beq	.L2356
+	ldrb	w2, [x27,3280]
+	cbz	w2, .L2357
+.L2356:
+	add	x20, x20, :lo12:.LANCHOR7
+	strb	wzr, [x20,3280]
+	b	.L2352
+.L2357:
+	cmn	w0, #1
+	bne	.L2359
+	adrp	x0, .LC169
+	mov	w1, w26
+	add	x0, x0, :lo12:.LC169
+	bl	printk
+	b	.L2352
+.L2359:
+	ldrh	w0, [x1,698]
+	cmp	w21, w0
+	bcs	.L2360
+	add	x21, x1, x21, uxtw 2
+	str	w26, [x21,704]
+.L2360:
+	mov	w0, 0
+	ldr	x27, [sp,80]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	pm_write_page, .-pm_write_page
+	.align	2
+	.global	flash_info_flush
+	.type	flash_info_flush, %function
+flash_info_flush:
+	adrp	x0, .LANCHOR2
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	tbz	x0, 12, .L2365
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC115
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC115
+	mov	w1, 251
+	add	x2, x2, 496
+	bl	printk
+.L2365:
+	adrp	x22, .LANCHOR4
+	adrp	x23, .LANCHOR0
+	add	x0, x22, :lo12:.LANCHOR4
+	mov	w1, 0
+	mov	w2, 64
+	add	x19, x23, :lo12:.LANCHOR0
+	adrp	x24, .LC171
+	adrp	x25, .LC172
+	ldr	x0, [x0,1200]
+	mov	w26, 0
+	add	x24, x24, :lo12:.LC171
+	add	x25, x25, :lo12:.LC172
+	bl	ftl_memset
+	ldr	x1, [x19,192]
+	adrp	x0, .LC170
+	add	x0, x0, :lo12:.LC170
+	mov	w2, 4
+	mov	w3, 16
+	bl	rknand_print_hex
+	ldr	x19, [x19,192]
+	add	x0, x19, 16
+	ldr	w1, [x19,8]
+	bl	js_hash
+	str	w0, [x19,12]
+.L2366:
+	add	x21, x22, :lo12:.LANCHOR4
+	add	x27, x23, :lo12:.LANCHOR0
+	mov	x0, x24
+	ldrb	w20, [x21,1208]
+	ldrh	w19, [x21,1210]
+	mov	w1, w20
+	ldrh	w28, [x27,210]
+	mov	w2, w19
+	bl	printk
+	ldrh	w1, [x21,1060]
+	ldrh	w0, [x21,1210]
+	sub	w1, w1, #1
+	cmp	w0, w1
+	blt	.L2367
+	ldr	x1, [x27,192]
+	ldrb	w19, [x21,1209]
+	strh	wzr, [x21,1210]
+	ldr	w0, [x1,4]
+	add	w0, w0, 1
+	str	w0, [x1,4]
+	ldrb	w0, [x21,1208]
+	ldr	x20, [x27,192]
+	strb	w0, [x21,1209]
+	mov	x0, x20
+	strb	w19, [x21,1208]
+	ldrh	w1, [x20,16]
+	add	w1, w1, 1
+	strh	w1, [x0,16]!
+	ldr	w1, [x20,8]
+	bl	js_hash
+	str	w0, [x20,12]
+	ldrh	w0, [x27,210]
+	mul	w19, w19, w0
+	mov	w0, 0
+	b	.L2375
+.L2367:
+	madd	w19, w20, w28, w19
+	cbnz	w0, .L2368
+.L2375:
+	mov	w1, w19
+	bl	flash_erase_block
+.L2368:
+	add	x2, x23, :lo12:.LANCHOR0
+	add	x20, x22, :lo12:.LANCHOR4
+	mov	w4, 4
+	mov	w5, 1
+	ldr	x1, [x2,192]
+	ldr	x0, [x20,1200]
+	ldr	w1, [x1,4]
+	str	w1, [x0]
+	mov	w0, 21321
+	movk	w0, 0x5359, lsl 16
+	ldr	x1, [x20,1200]
+	str	w0, [x1,4]
+	mov	w1, w19
+	mov	w0, 0
+	ldr	x2, [x2,192]
+	ldr	x3, [x20,1200]
+	bl	flash_prog_page_en
+	cmn	w0, #1
+	ldrh	w1, [x20,1210]
+	add	w1, w1, 1
+	strh	w1, [x20,1210]
+	bne	.L2369
+	mov	x0, x25
+	mov	w1, w19
+	bl	printk
+	b	.L2366
+.L2369:
+	cbnz	w26, .L2376
+	mov	w26, 1
+	b	.L2366
+.L2376:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	flash_info_flush, .-flash_info_flush
+	.align	2
+	.global	nand_flash_init
+	.type	nand_flash_init, %function
+nand_flash_init:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR2
+	mov	x19, x0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	stp	x25, x26, [sp,64]
+	tbz	x0, 12, .L2378
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC115
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC115
+	mov	w1, 2101
+	add	x2, x2, 520
+	bl	printk
+.L2378:
+	mov	x0, x19
+	adrp	x19, .LANCHOR0
+	mov	x21, 0
+	mov	w25, 2
+	bl	nandc_init
+	mov	w26, 44
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x1, x20, :lo12:.LANCHOR2
+	add	x22, x0, 732
+	add	x1, x1, 376
+	mov	x23, x0
+	mov	x24, x22
+	str	x1, [x0,88]
+.L2384:
+	mov	w0, w21
+	mov	x1, x22
+	bl	flash_read_id
+	add	x0, x23, 728
+	strb	w25, [x21,x0]
+	cbnz	x21, .L2379
+	ldrb	w0, [x24]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 253
+	bls	.L2380
+.L2382:
+	mov	w22, -2
+	b	.L2426
+.L2380:
+	ldrb	w0, [x24,1]
+	cmp	w0, 255
+	beq	.L2382
+.L2379:
+	ldrb	w0, [x22]
+	cmp	w0, 181
+	bne	.L2383
+	strb	w26, [x22]
+.L2383:
+	add	x21, x21, 1
+	add	x22, x22, 8
+	cmp	x21, 4
+	bne	.L2384
+	add	x22, x20, :lo12:.LANCHOR2
+	add	x23, x19, :lo12:.LANCHOR0
+	add	x22, x22, 440
+	mov	w21, 0
+	add	x23, x23, 732
+.L2387:
+	ldrb	w2, [x22]
+	add	x0, x22, 1
+	mov	x1, x23
+	bl	flash_mem_cmp8
+	cbnz	w0, .L2385
+	add	x1, x20, :lo12:.LANCHOR2
+	ubfiz	x21, x21, 5, 32
+	add	x0, x1, 440
+	adds	x21, x0, x21
+	beq	.L2382
+	ldrb	w3, [x21,22]
+	mov	x0, 0
+	b	.L2389
+.L2385:
+	add	w21, w21, 1
+	add	x22, x22, 32
+	cmp	w21, 30
+	bne	.L2387
+	b	.L2382
+.L2389:
+	add	x4, x1, x0, lsl 5
+	mov	w2, w0
+	ldrb	w4, [x4,1400]
+	cmp	w4, w3
+	beq	.L2388
+	add	x0, x0, 1
+	cmp	x0, 4
+	bne	.L2389
+	mov	w2, w0
+.L2388:
+	add	x22, x20, :lo12:.LANCHOR2
+	ubfiz	x2, x2, 5, 32
+	add	x1, x22, 1400
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x1, x1, x2
+	add	x0, x0, 104
+	mov	w2, 32
+	add	x22, x22, 376
+	bl	ftl_memcpy
+	mov	x0, x22
+	mov	x1, x21
+	mov	w2, 32
+	bl	ftl_memcpy
+	ldrb	w0, [x19,#:lo12:.LANCHOR0]
+	cmp	w0, 8
+	bhi	.L2390
+	ldrb	w1, [x22,20]
+	cmp	w1, 60
+	bls	.L2391
+	mov	w1, 60
+	strb	w1, [x22,20]
+.L2391:
+	cmp	w0, 8
+	bne	.L2390
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,732]
+	cmp	w0, 44
+	beq	.L2451
+.L2390:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2392
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC115
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC115
+	mov	w1, 2122
+	add	x2, x2, 520
+	bl	printk
+.L2392:
+	adrp	x21, .LANCHOR4
+	mov	w0, 16384
+	add	x23, x21, :lo12:.LANCHOR4
+	add	x22, x19, :lo12:.LANCHOR0
+	bl	ftl_malloc
+	add	x24, x20, :lo12:.LANCHOR2
+	str	x0, [x23,1216]
+	mov	w0, 16384
+	bl	ftl_malloc
+	str	x0, [x23,1160]
+	mov	w0, 2048
+	bl	ftl_malloc
+	str	x0, [x22,192]
+	mov	w0, 64
+	bl	ftl_malloc
+	str	x0, [x23,1224]
+	mov	w0, 64
+	bl	ftl_malloc
+	str	x0, [x23,1176]
+	mov	w0, 64
+	bl	ftl_malloc
+	str	x0, [x23,1200]
+	adrp	x0, .LANCHOR5+512
+	strb	wzr, [x0,#:lo12:.LANCHOR5+512]
+	bl	flash_die_info_init
+	ldrb	w0, [x24,394]
+	bl	flash_lsb_page_tbl_build
+	ldrb	w0, [x24,396]
+	bl	nandc_bch_sel
+	str	xzr, [x23,1192]
+	ldr	x1, [x22,88]
+	ldrh	w0, [x1,16]
+	ubfx	x2, x0, 8, 3
+	strb	w2, [x22,764]
+	adrp	x2, .LANCHOR7+3281
+	ubfx	x3, x0, 3, 1
+	strb	w3, [x2,#:lo12:.LANCHOR7+3281]
+	ubfx	x2, x0, 4, 1
+	strb	w2, [x22,765]
+	ubfx	x2, x0, 12, 1
+	strb	w2, [x22,3240]
+	ubfx	x2, x0, 13, 1
+	ubfx	x0, x0, 14, 1
+	strb	w0, [x22,208]
+	ldrb	w0, [x1,28]
+	mov	w1, 60
+	strb	w1, [x22,96]
+	ldrb	w1, [x19,#:lo12:.LANCHOR0]
+	strb	w2, [x22,3322]
+	strb	w0, [x22,97]
+	cmp	w1, 9
+	bne	.L2393
+	mov	w1, 70
+	strb	w1, [x22,96]
+.L2393:
+	add	x2, x20, :lo12:.LANCHOR2
+	add	x1, x21, :lo12:.LANCHOR4
+	add	x2, x2, 376
+	add	x3, x19, :lo12:.LANCHOR0
+	strb	w0, [x1,1232]
+	ldrb	w0, [x2,19]
+	ldrh	w2, [x2,16]
+	strb	w0, [x3,189]
+	tbz	x2, 6, .L2395
+	sub	w2, w0, #17
+	uxtb	w2, w2
+	cmp	w2, 2
+	bhi	.L2396
+	adrp	x2, micron_read_retrial
+	cmp	w0, 19
+	add	x2, x2, :lo12:micron_read_retrial
+	str	x2, [x1,1192]
+	bne	.L2447
+	mov	w0, 15
+	b	.L2448
+.L2396:
+	sub	w2, w0, #65
+	uxtb	w2, w2
+	cmp	w2, 1
+	bls	.L2416
+	cmp	w0, 33
+	bne	.L2399
+.L2416:
+	add	x0, x21, :lo12:.LANCHOR4
+	adrp	x1, toshiba_read_retrial
+	add	x1, x1, :lo12:toshiba_read_retrial
+	mov	w2, 4
+	str	x1, [x0,1192]
+	add	x1, x19, :lo12:.LANCHOR0
+	strb	w2, [x1,190]
+	mov	w1, 7
+	strb	w1, [x0,1184]
+	b	.L2395
+.L2399:
+	sub	w2, w0, #67
+	uxtb	w2, w2
+	cmp	w2, 1
+	sub	w2, w0, #34
+	cset	w3, ls
+	uxtb	w2, w2
+	cmp	w2, 1
+	bls	.L2417
+	cbz	w3, .L2401
+.L2417:
+	add	x2, x21, :lo12:.LANCHOR4
+	adrp	x1, toshiba_read_retrial
+	add	x1, x1, :lo12:toshiba_read_retrial
+	cmp	w0, 35
+	str	x1, [x2,1192]
+	beq	.L2403
+	cmp	w0, 68
+	beq	.L2403
+	mov	w0, 7
+	strb	w0, [x2,1184]
+	b	.L2404
+.L2403:
+	add	x0, x21, :lo12:.LANCHOR4
+	mov	w1, 17
+	strb	w1, [x0,1184]
+.L2404:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 4
+	cbnz	w3, .L2449
+	mov	w1, 5
+.L2449:
+	strb	w1, [x0,190]
+	b	.L2395
+.L2401:
+	sub	w0, w0, #36
+	uxtb	w0, w0
+	cmp	w0, 1
+	bhi	.L2395
+	adrp	x0, toshiba_3d_read_retrial
+	add	x0, x0, :lo12:toshiba_3d_read_retrial
+	str	x0, [x1,1192]
+.L2447:
+	mov	w0, 7
+.L2448:
+	strb	w0, [x1,1184]
+.L2395:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2406
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC115
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC115
+	mov	w1, 2170
+	add	x2, x2, 520
+	bl	printk
+.L2406:
+	add	x0, x19, :lo12:.LANCHOR0
+	strb	wzr, [x0,136]
+	ldrb	w0, [x0,764]
+	tbz	x0, 0, .L2407
+	mov	w0, 4
+	bl	nandc_set_if_mode
+	mov	w0, 1
+	bl	flash_set_interface_mode
+	mov	w0, 1
+	b	.L2450
+.L2407:
+	mov	w0, 4
+.L2450:
+	bl	nandc_set_if_mode
+	bl	flash_info_blk_init
+	cmn	w0, #1
+	mov	w22, w0
+	bne	.L2409
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2426
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC115
+	add	x2, x2, :lo12:.LANCHOR3
+	mov	w1, 2190
+	add	x2, x2, 520
+	add	x0, x0, :lo12:.LC115
+	bl	printk
+	b	.L2426
+.L2409:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,189]
+	sub	w0, w0, #1
+	uxtb	w0, w0
+	cmp	w0, 6
+	bhi	.L2410
+	add	x0, x21, :lo12:.LANCHOR4
+	adrp	x1, hynix_read_retrial
+	add	x1, x1, :lo12:hynix_read_retrial
+	str	x1, [x0,1192]
+.L2410:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x19,764]
+	tbz	x0, 2, .L2412
+	ldr	x0, [x19,192]
+	ldrb	w0, [x0,19]
+	cbz	w0, .L2412
+	add	x21, x21, :lo12:.LANCHOR4
+	ldrh	w1, [x19,210]
+	mov	w0, 0
+	ldrb	w2, [x21,1208]
+	mul	w1, w2, w1
+	bl	flash_ddr_para_scan
+	ldrb	w0, [x19,136]
+	cbnz	w0, .L2412
+	ldr	x1, [x19,192]
+	strb	w0, [x1,19]
+	bl	flash_info_flush
+.L2412:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2414
+	adrp	x2, .LANCHOR3
+	adrp	x0, .LC115
+	add	x2, x2, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC115
+	mov	w1, 2243
+	add	x2, x2, 520
+	bl	printk
+.L2414:
+	bl	nand_flash_print_info
+	mov	w22, 0
+	b	.L2426
+.L2451:
+	add	x0, x20, :lo12:.LANCHOR2
+	add	x0, x0, 376
+	ldrb	w1, [x0,28]
+	cmp	w1, 3
+	bne	.L2390
+	strb	wzr, [x0,28]
+	b	.L2390
+.L2426:
+	mov	w0, w22
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	nand_flash_init, .-nand_flash_init
+	.align	2
+	.global	ftl_sysblk_dump
+	.type	ftl_sysblk_dump, %function
+ftl_sysblk_dump:
+	sub	sp, sp, #144
+	stp	x29, x30, [sp,48]
+	add	x29, sp, 48
+	stp	x25, x26, [sp,112]
+	uxth	w25, w0
+	mov	w0, 1
+	stp	x19, x20, [sp,64]
+	stp	x23, x24, [sp,96]
+	stp	x27, x28, [sp,128]
+	stp	x21, x22, [sp,80]
+	bl	buf_alloc
+	ldr	x24, [x0,8]
+	mov	w20, 0
+	adrp	x22, .LC166
+	adrp	x23, .LC173
+	mov	x27, x0
+	mov	w19, w20
+	adrp	x28, .LANCHOR0
+	add	x22, x22, :lo12:.LC166
+	add	x23, x23, :lo12:.LC173
+	add	x24, x24, 704
+.L2453:
+	add	x3, x28, :lo12:.LANCHOR0
+	ldrh	w1, [x3,3276]
+	cmp	w1, w19
+	bls	.L2465
+	ldrh	w21, [x3,3324]
+	ldr	x1, [x27,8]
+	ldr	x2, [x27,24]
+	madd	w21, w25, w21, w19
+	ldrb	w3, [x3,2816]
+	mov	w0, w21
+	bl	ftl_read_ppa_page
+	mov	w26, w0
+	ldr	x7, [x27,8]
+	mov	w1, w25
+	ldr	x2, [x27,24]
+	mov	w3, w21
+	mov	w4, w26
+	ldr	w0, [x7,12]
+	str	w0, [sp]
+	ldr	w0, [x2]
+	str	w0, [sp,8]
+	ldr	w0, [x2,4]
+	str	w0, [sp,16]
+	ldr	w0, [x2,8]
+	str	w0, [sp,24]
+	ldr	w0, [x2,12]
+	mov	w2, w19
+	str	w0, [sp,32]
+	mov	x0, x22
+	ldr	w5, [x7]
+	ldr	w6, [x7,4]
+	ldr	w7, [x7,8]
+	bl	printk
+	mov	x0, x23
+	mov	x1, x24
+	mov	w2, 4
+	mov	w3, 32
+	bl	rknand_print_hex
+	cmp	w26, 512
+	beq	.L2458
+	cmn	w26, #1
+	bne	.L2454
+.L2458:
+	mov	w20, 1
+.L2454:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2453
+.L2465:
+	mov	x0, x27
+	bl	buf_free
+	cbz	w20, .L2457
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 536
+	mov	w2, 1232
+	bl	printk
+.L2457:
+	sub	sp, x29, #48
+	mov	w0, w20
+	ldp	x19, x20, [sp,64]
+	ldp	x21, x22, [sp,80]
+	ldp	x23, x24, [sp,96]
+	ldp	x25, x26, [sp,112]
+	ldp	x27, x28, [sp,128]
+	ldp	x29, x30, [sp,48]
+	add	sp, sp, 144
+	ret
+	.size	ftl_sysblk_dump, .-ftl_sysblk_dump
+	.align	2
+	.global	dump_ftl_info
+	.type	dump_ftl_info, %function
+dump_ftl_info:
+	stp	x29, x30, [sp, -32]!
+	adrp	x0, .LC174
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC174
+	ldrb	w1, [x19,2818]
+	bl	printk
+	adrp	x3, .LANCHOR5
+	adrp	x0, .LC175
+	add	x3, x3, :lo12:.LANCHOR5
+	add	x0, x0, :lo12:.LC175
+	ldrb	w1, [x3,832]
+	ldrb	w2, [x3,833]
+	ldrh	w3, [x3,834]
+	bl	printk
+	ldr	x2, [x19,2848]
+	adrp	x0, .LC176
+	add	x0, x0, :lo12:.LC176
+	ldrh	w1, [x2,130]
+	ldrh	w2, [x2,140]
+	bl	printk
+	ldr	x1, [x19,80]
+	adrp	x0, .LC177
+	add	x0, x0, :lo12:.LC177
+	add	x5, x1, 16
+	ldrh	w1, [x1,16]
+	ldrh	w2, [x5,2]
+	ldrb	w3, [x5,5]
+	ldrh	w4, [x5,6]
+	ldrh	w5, [x5,10]
+	bl	printk
+	ldr	x1, [x19,80]
+	adrp	x0, .LC178
+	add	x0, x0, :lo12:.LC178
+	add	x5, x1, 48
+	ldrh	w1, [x1,48]
+	ldrh	w2, [x5,2]
+	ldrb	w3, [x5,5]
+	ldrh	w4, [x5,6]
+	ldrh	w5, [x5,10]
+	bl	printk
+	ldr	x1, [x19,80]
+	adrp	x0, .LC179
+	add	x0, x0, :lo12:.LC179
+	add	x5, x1, 80
+	ldrh	w1, [x1,80]
+	ldrh	w4, [x5,6]
+	ldrh	w2, [x5,2]
+	ldrb	w3, [x5,5]
+	ldrh	w5, [x5,10]
+	bl	printk
+	ldrh	w0, [x19,3276]
+	mov	w2, 4
+	ldrb	w3, [x19,3244]
+	ldr	x1, [x19,3840]
+	mul	w3, w0, w3
+	adrp	x0, .LC180
+	add	x0, x0, :lo12:.LC180
+	lsl	w3, w3, 1
+	bl	rknand_print_hex
+	ldr	x1, [x19,72]
+	adrp	x0, .LC181
+	ldrh	w3, [x19,56]
+	add	x0, x0, :lo12:.LC181
+	mov	w2, 2
+	bl	rknand_print_hex
+	ldr	x3, [x19,2848]
+	adrp	x0, .LC173
+	add	x0, x0, :lo12:.LC173
+	mov	w2, 4
+	add	x1, x3, 704
+	ldrh	w3, [x3,698]
+	bl	rknand_print_hex
+	ldr	x1, [x19,64]
+	adrp	x0, .LC182
+	ldrh	w3, [x19,56]
+	add	x0, x0, :lo12:.LC182
+	mov	w2, 4
+	bl	rknand_print_hex
+	adrp	x0, .LC183
+	add	x1, x19, 3328
+	add	x0, x0, :lo12:.LC183
+	mov	w2, 2
+	mov	w3, 256
+	bl	rknand_print_hex
+	ldrh	w0, [x19,3276]
+	mov	w2, 2
+	ldrb	w3, [x19,3244]
+	ldr	x1, [x19,3848]
+	mul	w3, w0, w3
+	adrp	x0, .LC184
+	add	x0, x0, :lo12:.LC184
+	lsl	w3, w3, 1
+	bl	rknand_print_hex
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	dump_ftl_info, .-dump_ftl_info
+	.align	2
+	.global	pm_ppa_update_check
+	.type	pm_ppa_update_check, %function
+pm_ppa_update_check:
+	adrp	x5, .LANCHOR0
+	mov	w6, 21
+	add	x5, x5, :lo12:.LANCHOR0
+	mov	w7, 1
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	ldrh	w4, [x5,3314]
+	ldrb	w3, [x5,3312]
+	sub	w6, w6, w4
+	lsr	w4, w2, w4
+	lsl	w6, w7, w6
+	sub	w6, w6, #1
+	and	w4, w6, w4
+	udiv	w4, w4, w3
+	ldr	x3, [x5,64]
+	add	x4, x3, x4, uxth 2
+	ldrb	w3, [x4,2]
+	ubfx	x3, x3, 5, 3
+	cmp	w3, 7
+	cset	w4, eq
+	cbnz	w4, .L2471
+	cmp	w3, w7
+	bne	.L2468
+.L2471:
+	mov	w3, w2
+	mov	w2, w1
+	mov	x1, x0
+	adrp	x0, .LC185
+	add	x0, x0, :lo12:.LC185
+	bl	printk
+	bl	dump_ftl_info
+	mov	w4, -1
+.L2468:
+	mov	w0, w4
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	pm_ppa_update_check, .-pm_ppa_update_check
+	.align	2
+	.type	load_l2p_region, %function
+load_l2p_region:
+	stp	x29, x30, [sp, -64]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	uxth	w23, w1
+	stp	x21, x22, [sp,32]
+	stp	x19, x20, [sp,16]
+	cmp	w23, 31
+	uxth	w21, w0
+	bls	.L2474
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 552
+	mov	w2, 31
+	bl	printk
+.L2474:
+	adrp	x20, .LANCHOR0
+	adrp	x19, .LANCHOR7
+	add	x20, x20, :lo12:.LANCHOR0
+	ldr	x0, [x20,2848]
+	ldrh	w2, [x0,698]
+	cmp	w21, w2
+	bls	.L2475
+	adrp	x0, .LC186
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC186
+	add	x19, x19, :lo12:.LANCHOR7
+	bl	printk
+	mov	x0, 0
+	ldrh	w2, [x19,3282]
+	mov	w1, 255
+	ldr	x0, [x0,8]
+	bl	ftl_memset
+	ldr	x0, [x20,2848]
+	ldrh	w0, [x0,698]
+	cmp	w0, w21
+	bcs	.L2477
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 552
+	mov	w2, 35
+	b	.L2481
+.L2475:
+	add	x0, x0, x21, sxtw 2
+	sbfiz	x23, x23, 4, 32
+	ldr	w22, [x0,704]
+	add	x0, x20, 3872
+	add	x24, x0, x23
+	strh	w21, [x0,x23]
+	strh	wzr, [x24,2]
+	cbnz	w22, .L2478
+	adrp	x0, .LC187
+	mov	w1, w21
+	mov	w2, w22
+	add	x19, x19, :lo12:.LANCHOR7
+	add	x0, x0, :lo12:.LC187
+	bl	printk
+	ldr	x0, [x24,8]
+	mov	w1, 255
+	ldrh	w2, [x19,3282]
+	bl	ftl_memset
+	b	.L2477
+.L2478:
+	add	x23, x19, :lo12:.LANCHOR7
+	ldrb	w3, [x20,2816]
+	ldr	x1, [x24,8]
+	mov	w0, w22
+	ldr	x2, [x23,3272]
+	bl	ftl_read_ppa_page
+	mov	w3, w0
+	ldr	x0, [x23,3272]
+	ldr	w2, [x0]
+	cmp	w2, w21
+	beq	.L2479
+	adrp	x0, .LC188
+	mov	w4, w22
+	mov	w1, w21
+	add	x0, x0, :lo12:.LC188
+	bl	printk
+	ldr	x3, [x20,2848]
+	adrp	x0, .LC189
+	add	x0, x0, :lo12:.LC189
+	mov	w2, 4
+	add	x1, x3, 704
+	ldrh	w3, [x3,698]
+	bl	rknand_print_hex
+	ldrb	w3, [x20,2816]
+	adrp	x0, .LC190
+	ldr	x1, [x24,8]
+	add	x0, x0, :lo12:.LC190
+	mov	w2, 4
+	lsl	w3, w3, 7
+	bl	rknand_print_hex
+	ldr	x1, [x23,3272]
+	adrp	x0, .LC191
+	add	x0, x0, :lo12:.LC191
+	mov	w2, 4
+	mov	w3, 16
+	bl	rknand_print_hex
+	ldrh	w0, [x20,3314]
+	mov	w1, 21
+	mov	w2, 1
+	sub	w1, w1, w0
+	lsr	w22, w22, w0
+	lsl	w1, w2, w1
+	ldrb	w0, [x20,3312]
+	sub	w1, w1, #1
+	and	w22, w1, w22
+	mov	x1, 0
+	udiv	w0, w22, w0
+	bl	ftl_sblk_dump
+.L2479:
+	add	x19, x19, :lo12:.LANCHOR7
+	ldr	x0, [x19,3272]
+	ldr	w0, [x0]
+	cmp	w0, w21
+	beq	.L2477
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 552
+	mov	w2, 57
+.L2481:
+	bl	printk
+.L2477:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	load_l2p_region, .-load_l2p_region
+	.align	2
+	.global	pm_gc
+	.type	pm_gc, %function
+pm_gc:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x23, .LANCHOR0
+	str	x25, [sp,64]
+	stp	x19, x20, [sp,16]
+	add	x20, x23, :lo12:.LANCHOR0
+	adrp	x19, .LANCHOR4
+	stp	x21, x22, [sp,32]
+	add	x19, x19, :lo12:.LANCHOR4
+	ldr	x0, [x20,2848]
+	ldrh	w1, [x0,688]
+	ldrh	w0, [x19,1132]
+	sub	w0, w0, #1
+	cmp	w1, w0
+	blt	.L2484
+	bl	pm_free_sblk
+	ldr	x2, [x20,2848]
+	ldrh	w1, [x19,1132]
+	ldrh	w3, [x2,688]
+	sub	w1, w1, #1
+	cmp	w3, w1
+	blt	.L2484
+	add	x0, x2, x0, uxth 1
+	ldrh	w21, [x0,416]
+	mov	w0, 65535
+	cmp	w21, w0
+	bne	.L2486
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 129
+	add	x1, x1, 568
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	bl	pm_free_sblk
+	ldr	x1, [x20,2848]
+	add	x0, x1, x0, uxth 1
+	ldrh	w21, [x0,416]
+.L2486:
+	bl	pm_select_ram_region
+	uxth	x20, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	lsl	x1, x20, 4
+	add	x0, x0, 3872
+	mov	x22, x20
+	add	x19, x0, x1
+	ldrh	w0, [x0,x1]
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L2487
+	ldr	x1, [x19,8]
+	cbz	x1, .L2487
+	ldrsh	w2, [x19,2]
+	tbz	w2, #31, .L2487
+	bl	pm_write_page
+	ldrh	w0, [x19,2]
+	and	w0, w0, 32767
+	strh	w0, [x19,2]
+.L2487:
+	add	x23, x23, :lo12:.LANCHOR0
+	mov	w19, 0
+	add	x0, x23, 3872
+	mov	w24, 21
+	mov	w25, 1
+	add	x20, x0, x20, lsl 4
+.L2488:
+	ldr	x0, [x23,2848]
+	ldrh	w1, [x0,698]
+	cmp	w1, w19
+	bls	.L2494
+	ldrh	w1, [x23,3314]
+	add	x0, x0, x19, sxtw 2
+	ldr	w0, [x0,704]
+	lsr	w0, w0, w1
+	sub	w1, w24, w1
+	lsl	w1, w25, w1
+	sub	w1, w1, #1
+	and	w1, w0, w1
+	ldrb	w0, [x23,3312]
+	udiv	w1, w1, w0
+	cmp	w21, w1, uxth
+	bne	.L2489
+	mov	w1, w22
+	mov	w0, w19
+	bl	load_l2p_region
+	ldr	x1, [x20,8]
+	mov	w0, w19
+	bl	pm_write_page
+	mov	w0, -1
+	strh	w0, [x20]
+.L2489:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2488
+.L2494:
+	bl	pm_free_sblk
+.L2484:
+	mov	w0, 0
+	ldr	x25, [sp,64]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	pm_gc, .-pm_gc
+	.align	2
+	.global	pm_flush_id
+	.type	pm_flush_id, %function
+pm_flush_id:
+	stp	x29, x30, [sp, -32]!
+	ubfiz	x0, x0, 4, 16
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x1, x19, 3872
+	add	x20, x1, x0
+	ldrh	w0, [x1,x0]
+	ldr	x1, [x20,8]
+	bl	pm_write_page
+	ldrh	w0, [x20,2]
+	and	w0, w0, 32767
+	strh	w0, [x20,2]
+	ldr	w0, [x19,3864]
+	cbz	w0, .L2496
+	bl	pm_gc
+	str	wzr, [x19,3864]
+.L2496:
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	pm_flush_id, .-pm_flush_id
+	.align	2
+	.global	pm_flush
+	.type	pm_flush, %function
+pm_flush:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	mov	x19, 0
+	add	x20, x20, :lo12:.LANCHOR0
+	add	x20, x20, 3872
+.L2502:
+	add	x1, x20, x19, lsl 4
+	uxth	w0, w19
+	ldrsh	w1, [x1,2]
+	tbz	w1, #31, .L2501
+	bl	pm_flush_id
+.L2501:
+	add	x19, x19, 1
+	cmp	x19, 32
+	bne	.L2502
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	pm_flush, .-pm_flush
+	.align	2
+	.global	flt_sys_flush
+	.type	flt_sys_flush, %function
+flt_sys_flush:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	ftl_flush
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	flt_sys_flush, .-flt_sys_flush
+	.align	2
+	.global	zftl_deinit
+	.type	zftl_deinit, %function
+zftl_deinit:
+	stp	x29, x30, [sp, -16]!
+	add	x29, sp, 0
+	bl	zftl_flash_de_init
+	bl	flt_sys_flush
+	bl	zftl_flash_de_init
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_deinit, .-zftl_deinit
+	.align	2
+	.global	pm_init
+	.type	pm_init, %function
+pm_init:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR7
+	stp	x19, x20, [sp,16]
+	add	x22, x21, :lo12:.LANCHOR7
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	mov	w23, w0
+	mov	w0, 1
+	strb	w0, [x22,3280]
+	mov	w0, 64
+	str	wzr, [x20,3864]
+	add	x20, x20, 3872
+	bl	ftl_malloc
+	mov	w24, -1
+	str	x0, [x22,3272]
+	add	x22, x20, 512
+.L2508:
+	strh	w24, [x20]
+	strh	wzr, [x20,2]
+	cbz	w23, .L2507
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2816]
+	lsl	w0, w0, 9
+	bl	ftl_malloc
+	str	x0, [x20,8]
+.L2507:
+	add	x20, x20, 16
+	cmp	x20, x22
+	bne	.L2508
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x21, x21, :lo12:.LANCHOR7
+	mov	w4, 4
+	ldr	x1, [x20,2848]
+	ldr	x25, [x21,3272]
+	ldr	x23, [x20,3880]
+	ldrb	w0, [x1,694]
+	mov	x3, x25
+	ldrh	w1, [x1,692]
+	mov	x2, x23
+	bl	flash_get_last_written_page
+	sxth	w21, w0
+	ldr	x1, [x20,2848]
+	mov	w24, w21
+	ldrh	w2, [x1,696]
+	cmp	w2, w21
+	bgt	.L2509
+	adrp	x0, .LC192
+	ldrh	w1, [x1,692]
+	mov	w3, w21
+	add	x0, x0, :lo12:.LC192
+	adrp	x26, .LC193
+	add	w21, w21, 1
+	bl	printk
+	add	x26, x26, :lo12:.LC193
+	ldr	x0, [x20,2848]
+	ldrsh	w20, [x0,696]
+.L2510:
+	cmp	w20, w21
+	bge	.L2523
+	add	x27, x19, :lo12:.LANCHOR0
+	mov	x2, x23
+	mov	x3, x25
+	ldr	x0, [x27,2848]
+	ldrh	w22, [x27,3324]
+	ldrb	w4, [x27,2816]
+	ldrh	w1, [x0,692]
+	ldrb	w0, [x0,694]
+	madd	w22, w1, w22, w20
+	mov	w1, w22
+	bl	flash_read_page_en
+	mov	w28, w0
+	ldr	x3, [x27,2848]
+	mov	x0, x26
+	mov	w2, w22
+	ldr	w1, [x3,48]
+	add	w1, w1, 1
+	str	w1, [x3,48]
+	ldrh	w3, [x3,694]
+	ldr	w1, [x25]
+	bl	printk
+	cmp	w28, 512
+	beq	.L2511
+	cmn	w28, #1
+	beq	.L2511
+	ldr	x1, [x27,2848]
+	ldr	w0, [x25]
+	ldrh	w2, [x1,698]
+	cmp	w0, w2
+	bcs	.L2511
+	add	x0, x1, x0, uxtw 2
+	str	w22, [x0,704]
+.L2511:
+	add	w20, w20, 1
+	sxth	w20, w20
+	b	.L2510
+.L2523:
+	add	x19, x19, :lo12:.LANCHOR0
+	adrp	x0, .LANCHOR6-127
+	mov	w1, 1
+	add	w24, w24, 1
+	strb	w1, [x0,#:lo12:.LANCHOR6-127]
+	ldr	x0, [x19,2848]
+	strh	w24, [x0,696]
+	bl	pm_free_sblk
+	ldr	x1, [x19,3880]
+	mov	w0, -1
+	bl	pm_write_page
+	ldr	x1, [x19,3880]
+	mov	w0, -1
+	bl	pm_write_page
+.L2509:
+	bl	pm_free_sblk
+	bl	pm_gc
+	mov	w0, 0
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	pm_init, .-pm_init
+	.align	2
+	.global	pm_log2phys
+	.type	pm_log2phys, %function
+pm_log2phys:
+	stp	x29, x30, [sp, -96]!
+	mov	w5, w0
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	str	x25, [sp,64]
+	add	x3, x21, :lo12:.LANCHOR0
+	mov	x22, x1
+	stp	x19, x20, [sp,16]
+	stp	x23, x24, [sp,48]
+	mov	w23, w2
+	mov	x19, 0
+	ldrb	w4, [x3,2816]
+	ldr	w2, [x3,2824]
+	add	x3, x3, 3872
+	lsl	w20, w4, 7
+	lsl	w24, w4, 7
+	cmp	w0, w2
+	udiv	w20, w0, w20
+	uxth	w25, w20
+	msub	w24, w25, w24, w0
+	uxth	x24, w24
+	bcc	.L2536
+	adrp	x0, .LC194
+	mov	w1, w5
+	add	x0, x0, :lo12:.LC194
+	bl	printk
+	mov	w0, -1
+	b	.L2526
+.L2540:
+	ldrh	w0, [x3]
+	cmp	w0, w25
+	beq	.L2528
+.L2527:
+	add	w19, w19, 1
+	add	x3, x3, 16
+	uxth	x19, w19
+	cmp	w19, 32
+	beq	.L2539
+.L2536:
+	ldr	x0, [x3,8]
+	cbnz	x0, .L2540
+	b	.L2527
+.L2539:
+	bl	pm_select_ram_region
+	uxth	x19, w0
+	add	x2, x21, :lo12:.LANCHOR0
+	sbfiz	x3, x19, 4, 32
+	add	x2, x2, 3872
+	mov	w1, w0
+	add	x4, x2, x3
+	ldrh	w3, [x2,x3]
+	mov	w2, 65535
+	cmp	w3, w2
+	bne	.L2541
+.L2532:
+	adrp	x0, .LANCHOR7+3284
+	strb	w19, [x0,#:lo12:.LANCHOR7+3284]
+	mov	w0, w25
+	bl	load_l2p_region
+.L2528:
+	cbnz	w23, .L2529
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x0, x19, lsl 4
+	ldr	x0, [x0,3880]
+	ldr	w0, [x0,x24,lsl 2]
+	str	w0, [x22]
+	b	.L2530
+.L2529:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w2, [x22]
+	add	x0, x0, 3872
+	add	x0, x0, x19, lsl 4
+	ldr	x1, [x0,8]
+	str	w2, [x1,x24,lsl 2]
+	ldrh	w1, [x0,2]
+	orr	w1, w1, -32768
+	strh	w1, [x0,2]
+	adrp	x0, .LANCHOR4+32
+	strb	w20, [x0,#:lo12:.LANCHOR4+32]
+.L2530:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w2, 32767
+	add	x21, x21, 3872
+	mov	w0, 0
+	add	x19, x21, x19, lsl 4
+	ldrh	w1, [x19,2]
+	and	w3, w1, 32767
+	cmp	w3, w2
+	beq	.L2526
+	add	w1, w1, 1
+	strh	w1, [x19,2]
+	b	.L2526
+.L2541:
+	ldrsh	w2, [x4,2]
+	tbz	w2, #31, .L2532
+	str	x1, [x29,88]
+	bl	pm_flush_id
+	ldr	x1, [x29,88]
+	b	.L2532
+.L2526:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldr	x25, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	pm_log2phys, .-pm_log2phys
+	.align	2
+	.global	ftl_read_ahead
+	.type	ftl_read_ahead, %function
+ftl_read_ahead:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	stp	x23, x24, [sp,48]
+	add	x23, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	mov	w21, 0
+	ldr	w0, [x23,2868]
+	cmn	w0, #1
+	beq	.L2543
+	mov	w0, w21
+	bl	buf_alloc
+	mov	x19, x0
+	mov	w0, -1
+	cbz	x19, .L2552
+	ldr	w22, [x23,2868]
+	str	w22, [x19,36]
+	str	w0, [x23,2868]
+	mov	w0, w22
+	ldr	x24, [x19,8]
+	ldr	x23, [x19,24]
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,76]
+	cmn	w0, #1
+	bne	.L2545
+	mov	w0, w22
+	add	x1, x29, 76
+	mov	w2, w21
+	bl	pm_log2phys
+.L2545:
+	ldr	w1, [x29,76]
+	str	w1, [x19,40]
+	str	w1, [x19,44]
+	cmn	w1, #1
+	bne	.L2546
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	x0, x24
+	mov	w1, 0
+	ldrb	w2, [x20,2816]
+	lsl	w2, w2, 9
+	bl	ftl_memset
+	ldrb	w0, [x19,2]
+	orr	w0, w0, 8
+	strb	w0, [x19,2]
+	b	.L2557
+.L2546:
+	mov	x0, x19
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w24, [x19,52]
+	cmn	w24, #1
+	bne	.L2547
+	ldrb	w0, [x19,2]
+	add	x20, x20, :lo12:.LANCHOR0
+	and	w0, w0, -9
+	strb	w0, [x19,2]
+	ldr	x1, [x20,80]
+	ldr	w0, [x1,552]
+	add	w0, w0, 1
+	str	w0, [x1,552]
+	b	.L2548
+.L2547:
+	cmp	w24, 256
+	bne	.L2548
+	add	x20, x20, :lo12:.LANCHOR0
+	mov	w5, 21
+	mov	w21, 1
+	ldr	w4, [x29,76]
+	ldr	w2, [x19,36]
+	adrp	x0, .LC195
+	ldrh	w3, [x20,3314]
+	add	x0, x0, :lo12:.LC195
+	ldrb	w20, [x20,3312]
+	sub	w5, w5, w3
+	lsr	w3, w4, w3
+	lsl	w5, w21, w5
+	sub	w5, w5, #1
+	and	w3, w5, w3
+	udiv	w20, w3, w20
+	ldr	w3, [x19,40]
+	uxth	w1, w20
+	bl	printk
+	mov	w0, w20
+	mov	w1, w21
+	mov	w2, 0
+	bl	gc_add_sblk
+.L2548:
+	ldr	w5, [x23,4]
+	cmp	w5, w22
+	beq	.L2549
+	adrp	x0, .LC196
+	ldrb	w1, [x19,1]
+	ldr	w3, [x29,76]
+	add	x0, x0, :lo12:.LC196
+	ldr	w4, [x23]
+	mov	w2, w22
+	ldr	w6, [x23,8]
+	ldr	w7, [x23,12]
+	bl	printk
+.L2549:
+	ldr	w0, [x23,4]
+	cmp	w0, w22
+	cset	w21, ne
+	cbnz	w21, .L2554
+	cmn	w24, #1
+	bne	.L2543
+.L2554:
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 576
+	mov	w2, 874
+	bl	printk
+.L2557:
+	mov	w21, 0
+	b	.L2543
+.L2552:
+	mov	w21, w0
+.L2543:
+	mov	w0, w21
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	ftl_read_ahead, .-ftl_read_ahead
+	.align	2
+	.global	gc_recovery
+	.type	gc_recovery, %function
+gc_recovery:
+	sub	sp, sp, #208
+	stp	x29, x30, [sp,32]
+	add	x29, sp, 32
+	stp	x19, x20, [sp,48]
+	adrp	x19, .LANCHOR0
+	stp	x23, x24, [sp,80]
+	add	x24, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,64]
+	stp	x25, x26, [sp,96]
+	stp	x27, x28, [sp,112]
+	adrp	x22, .LANCHOR4
+	strb	wzr, [x24,3241]
+	add	x0, x22, :lo12:.LANCHOR4
+	ldr	x20, [x24,80]
+	add	x21, x20, 80
+	strb	wzr, [x0,1098]
+	bl	gc_init
+	ldrh	w1, [x20,80]
+	mov	w0, 65535
+	str	x22, [x29,152]
+	cmp	w1, w0
+	ldr	x0, [x24,80]
+	beq	.L2559
+	mov	w1, -1
+	strh	w1, [x0,130]
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x23, x0
+	ldrb	w0, [x21,9]
+	ldrh	w1, [x24,3324]
+	sub	w0, w0, #1
+	add	x0, x21, x0, sxtw 1
+	ldrh	w0, [x0,16]
+	mul	w0, w0, w1
+	ldrb	w1, [x24,3225]
+	str	w0, [x29,168]
+	cmp	w1, 3
+	bne	.L2560
+	ldrh	w1, [x24,3276]
+	sub	w1, w1, #1
+	add	w0, w1, w0
+	orr	w0, w0, 50331648
+	b	.L2606
+.L2560:
+	cmp	w1, 2
+	bne	.L2561
+	ldrh	w1, [x24,3276]
+	add	w0, w0, w1, lsl 1
+	sub	w0, w0, #1
+	orr	w0, w0, 33554432
+.L2606:
+	str	w0, [x23,40]
+.L2561:
+	mov	x0, x23
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w0, [x23,52]
+	cmp	w0, 512
+	beq	.L2562
+	cmn	w0, #1
+	beq	.L2562
+	ldr	x0, [x23,24]
+	ldr	w1, [x0]
+	mov	w0, 15555
+	movk	w0, 0xf55f, lsl 16
+	cmp	w1, w0
+	beq	.L2563
+.L2562:
+	mov	x0, x23
+	bl	buf_free
+	ldr	x7, [x23,24]
+	ldr	x6, [x23,8]
+	ldr	w0, [x7,4]
+	str	w0, [sp]
+	ldr	w0, [x7,8]
+	str	w0, [sp,8]
+	ldr	w0, [x7,12]
+	str	w0, [sp,16]
+	adrp	x0, .LC197
+	add	x0, x0, :lo12:.LC197
+	ldr	w3, [x6]
+	ldr	w4, [x6,4]
+	ldr	w5, [x6,8]
+	ldr	w1, [x23,40]
+	ldr	w2, [x23,52]
+	ldr	w6, [x6,12]
+	ldr	w7, [x7]
+	bl	printk
+	b	.L2609
+.L2563:
+	add	x24, x19, :lo12:.LANCHOR0
+	ldr	x0, [x29,152]
+	ldr	x1, [x23,8]
+	add	x25, x0, :lo12:.LANCHOR4
+	ldrb	w2, [x24,3244]
+	ldrh	w0, [x24,3242]
+	mul	w2, w0, w2
+	ldr	x0, [x25,1104]
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	ldrh	w0, [x24,3242]
+	ldrb	w2, [x24,3244]
+	ldr	x1, [x23,8]
+	mul	w2, w0, w2
+	add	x1, x1, x2, sxtw 2
+	ldr	x0, [x25,1112]
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	ldrb	w27, [x24,3225]
+	ldrh	w26, [x24,3276]
+	cmp	w27, 2
+	bne	.L2565
+	lsl	w26, w26, 1
+	mov	w27, 1
+.L2565:
+	mov	w22, 0
+	adrp	x24, .LC198
+	add	x0, x24, :lo12:.LC198
+	mov	w25, w22
+	str	x0, [x29,128]
+	b	.L2566
+.L2611:
+	ldr	x0, [x0,1112]
+	ldr	w1, [x0,x12]
+	ldr	w0, [x7,8]
+	cmp	w1, w0
+	bne	.L2570
+.L2595:
+	add	w25, w25, 1
+	add	w28, w28, 1
+.L2574:
+	cmp	w28, w27
+	bhi	.L2610
+	ldr	x0, [x29,144]
+	add	x1, x19, :lo12:.LANCHOR0
+	add	x0, x0, 8
+	ldrh	w2, [x1,3324]
+	ldrb	w1, [x1,3225]
+	ldrh	w0, [x21,x0,lsl 1]
+	cmp	w1, 3
+	mul	w0, w0, w2
+	str	w0, [x29,168]
+	bne	.L2567
+	add	w0, w0, w22
+	orr	w0, w0, w28, lsl 24
+.L2607:
+	str	w0, [x23,40]
+	mov	w1, 1
+	mov	x0, x23
+	bl	sblk_read_page
+	ldr	x0, [x29,152]
+	sbfiz	x12, x25, 2, 32
+	ldr	x7, [x23,24]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	w6, [x7,4]
+	ldr	x1, [x0,1104]
+	ldr	w3, [x1,x12]
+	cmp	w3, w6
+	beq	.L2611
+.L2570:
+	ldr	x0, [x29,152]
+	str	x12, [x29,120]
+	add	x13, x0, :lo12:.LANCHOR4
+	ldr	w0, [x7,12]
+	str	x13, [x29,112]
+	ldr	x4, [x13,1112]
+	str	w0, [sp]
+	ldr	x0, [x29,128]
+	ldr	w4, [x4,x12]
+	ldr	w5, [x7]
+	ldr	w1, [x23,40]
+	ldr	w2, [x23,52]
+	ldr	w7, [x7,8]
+	bl	printk
+	ldr	x13, [x29,112]
+	ldr	x12, [x29,120]
+	ldr	x0, [x13,1104]
+	ldr	w0, [x0,x12]
+	cmn	w0, #1
+	beq	.L2595
+	mov	x0, x23
+	bl	buf_free
+.L2609:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x20,80]
+	mov	w28, 0
+	ldr	x1, [x0,72]
+	strh	wzr, [x1,x2,lsl 1]
+	ldr	x0, [x0,80]
+	ldrh	w1, [x20,80]
+	strh	w1, [x0,130]
+	b	.L2564
+.L2573:
+	add	w22, w22, 1
+.L2566:
+	cmp	w22, w26
+	beq	.L2575
+	sub	w0, w22, #1
+	mov	w24, 0
+	str	w0, [x29,140]
+.L2576:
+	ldrb	w0, [x21,9]
+	cmp	w24, w0
+	bge	.L2573
+	sxtw	x0, w24
+	mov	w28, 1
+	str	x0, [x29,144]
+	b	.L2574
+.L2567:
+	cmp	w1, 2
+	bne	.L2569
+	ldr	w1, [x29,140]
+	add	w0, w0, w1
+	add	w0, w0, w28
+	orr	w0, w0, 33554432
+	b	.L2607
+.L2569:
+	add	w0, w0, w22
+	b	.L2607
+.L2610:
+	add	w24, w24, 1
+	b	.L2576
+.L2575:
+	mov	x0, x23
+	mov	w28, 0
+	mov	w23, w28
+	bl	buf_free
+	str	w28, [x29,144]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x21,9]
+	ldrh	w3, [x20,80]
+	ldr	x2, [x0,72]
+	ldrh	w0, [x0,3242]
+	mul	w0, w1, w0
+	strh	w0, [x2,x3,lsl 1]
+	adrp	x0, .LC199
+	add	x0, x0, :lo12:.LC199
+	str	x0, [x29,104]
+.L2577:
+	cmp	w23, w26
+	beq	.L2590
+	sub	w0, w23, #1
+	mov	w25, 0
+	str	w0, [x29,112]
+.L2591:
+	ldrb	w0, [x21,9]
+	cmp	w25, w0
+	bge	.L2588
+	sxtw	x0, w25
+	mov	w24, 1
+	str	x0, [x29,120]
+.L2589:
+	cmp	w24, w27
+	bhi	.L2612
+	ldr	x1, [x29,152]
+	ldr	w0, [x29,144]
+	add	x1, x1, :lo12:.LANCHOR4
+	sbfiz	x0, x0, 2, 32
+	ldr	x2, [x1,1104]
+	ldr	w22, [x2,x0]
+	cmn	w22, #1
+	beq	.L2578
+	ldr	x1, [x1,1112]
+	ldr	w0, [x1,x0]
+	str	w0, [x29,140]
+	mov	w0, w22
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,172]
+	cmn	w0, #1
+	bne	.L2579
+	mov	w0, w22
+	add	x1, x29, 172
+	mov	w2, 0
+	bl	pm_log2phys
+.L2579:
+	ldr	x0, [x29,120]
+	add	x0, x0, 8
+	ldrh	w3, [x21,x0,lsl 1]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,3324]
+	ldrb	w0, [x0,3225]
+	cmp	w0, 3
+	mul	w3, w3, w1
+	bne	.L2580
+	add	w3, w3, w23
+	orr	w3, w3, w24, lsl 24
+	b	.L2608
+.L2580:
+	cmp	w0, 2
+	bne	.L2582
+	ldr	w0, [x29,112]
+	add	w3, w3, w0
+	add	w3, w3, w24
+	orr	w3, w3, 33554432
+	b	.L2608
+.L2582:
+	add	w3, w3, w23
+.L2608:
+	add	x0, x19, :lo12:.LANCHOR0
+	str	w3, [x29,168]
+	ldr	w1, [x29,140]
+	mov	w4, 21
+	mov	w2, 1
+	ldrh	w3, [x0,3314]
+	ldrb	w0, [x0,3312]
+	lsr	w1, w1, w3
+	sub	w3, w4, w3
+	lsl	w3, w2, w3
+	sub	w3, w3, #1
+	and	w3, w1, w3
+	ldr	w1, [x29,140]
+	udiv	w3, w3, w0
+	uxth	w0, w3
+	str	w0, [x29,128]
+	ldr	w0, [x29,172]
+	cmp	w0, w1
+	bne	.L2583
+	ldr	x0, [x29,104]
+	mov	w1, w22
+	ldr	w2, [x29,168]
+	bl	pm_ppa_update_check
+	cbz	w0, .L2584
+.L2605:
+	b	.L2605
+.L2584:
+	mov	w0, w22
+	add	x1, x29, 168
+	mov	w2, 1
+	add	w28, w28, 1
+	bl	pm_log2phys
+	ldrh	w0, [x29,128]
+	bl	ftl_vpn_decrement
+	b	.L2586
+.L2583:
+	ldr	w1, [x29,168]
+	cmp	w0, w1
+	csinc	w28, w28, w28, ne
+.L2586:
+	ldr	w0, [x29,144]
+	add	x2, x19, :lo12:.LANCHOR0
+	add	w0, w0, 1
+	str	w0, [x29,144]
+	ldr	w0, [x29,128]
+	ldr	x1, [x2,64]
+	add	x1, x1, x0, lsl 2
+	ldrb	w1, [x1,2]
+	ands	w1, w1, 224
+	bne	.L2578
+	lsl	x0, x0, 1
+	ldr	x2, [x2,72]
+	ldrh	w3, [x2,x0]
+	cbz	w3, .L2578
+	strh	w1, [x2,x0]
+.L2578:
+	add	w24, w24, 1
+	b	.L2589
+.L2612:
+	add	w25, w25, 1
+	b	.L2591
+.L2588:
+	add	w23, w23, 1
+	b	.L2577
+.L2590:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x20,80]
+	ldr	x0, [x0,72]
+	strh	w28, [x0,x1,lsl 1]
+.L2564:
+	ldrh	w1, [x20,80]
+	adrp	x0, .LC200
+	mov	w2, w28
+	add	x0, x0, :lo12:.LC200
+	bl	printk
+	mov	w0, -1
+	strh	w0, [x20,80]
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 65535
+	ldr	x0, [x0,80]
+	ldrh	w0, [x0,130]
+	cmp	w0, w1
+	beq	.L2592
+	bl	ftl_free_sblk
+.L2592:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, -1
+	ldr	x1, [x19,2848]
+	strh	w0, [x1,126]
+	ldr	x1, [x19,80]
+	strh	w0, [x1,130]
+	mov	w0, 0
+	bl	ftl_info_flush
+	b	.L2558
+.L2559:
+	ldrh	w0, [x0,130]
+	cmp	w0, w1
+	beq	.L2558
+	ldr	x1, [x24,2848]
+	ldrh	w1, [x1,126]
+	cmp	w1, w0
+	bne	.L2594
+	bl	pm_flush
+	ldr	x0, [x24,80]
+	ldrh	w0, [x0,130]
+	bl	ftl_free_sblk
+	ldr	x0, [x24,2848]
+	mov	w1, -1
+	strh	w1, [x0,126]
+	mov	w0, 0
+	bl	ftl_info_flush
+.L2594:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, -1
+	ldr	x0, [x19,80]
+	strh	w1, [x0,130]
+.L2558:
+	sub	sp, x29, #32
+	ldp	x19, x20, [sp,48]
+	ldp	x21, x22, [sp,64]
+	ldp	x23, x24, [sp,80]
+	ldp	x25, x26, [sp,96]
+	ldp	x27, x28, [sp,112]
+	ldp	x29, x30, [sp,32]
+	add	sp, sp, 208
+	ret
+	.size	gc_recovery, .-gc_recovery
+	.align	2
+	.global	zftl_init
+	.type	zftl_init, %function
+zftl_init:
+	stp	x29, x30, [sp, -64]!
+	adrp	x1, .LANCHOR5+513
+	mov	w0, -1
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	strb	w0, [x1,#:lo12:.LANCHOR5+513]
+	add	x20, x19, :lo12:.LANCHOR0
+	adrp	x1, .LC2
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	strb	w0, [x20,2866]
+	mov	w0, -1
+	str	w0, [x20,2868]
+	adrp	x0, .LC1
+	add	x1, x1, :lo12:.LC2
+	add	x0, x0, :lo12:.LC1
+	strb	wzr, [x20,2840]
+	adrp	x21, .LANCHOR7
+	strb	wzr, [x20,2841]
+	bl	printk
+	adrp	x7, .LANCHOR2
+	ldrb	w4, [x20,98]
+	add	x2, x7, :lo12:.LANCHOR2
+	strb	w4, [x20,3326]
+	ldrh	w5, [x20,210]
+	strh	w5, [x20,3324]
+	ldrb	w3, [x2,389]
+	strb	w3, [x20,3312]
+	ldrb	w6, [x2,388]
+	mul	w3, w3, w4
+	ldrh	w1, [x2,386]
+	ldrb	w0, [x2,385]
+	uxtb	w4, w3
+	add	x3, x21, :lo12:.LANCHOR7
+	ldrh	w8, [x2,390]
+	ubfiz	w11, w0, 9, 7
+	sdiv	w9, w1, w6
+	strb	w6, [x20,3225]
+	strb	w0, [x20,2816]
+	mov	w2, 0
+	strh	w1, [x20,3242]
+	strh	w9, [x20,3276]
+	strb	w4, [x20,3244]
+	strh	w8, [x20,56]
+	mov	x20, x7
+	strh	w11, [x3,3282]
+	mov	w3, 1
+.L2614:
+	cmp	w3, w5
+	bhi	.L2678
+	add	w2, w2, 1
+	lsl	w3, w3, 1
+	uxth	w2, w2
+	b	.L2614
+.L2678:
+	mul	w3, w0, w1
+	mov	w1, 57344
+	add	x7, x19, :lo12:.LANCHOR0
+	movk	w1, 0x1c, lsl 16
+	sub	w2, w2, #1
+	mul	w5, w3, w8
+	mul	w1, w4, w1
+	strh	w2, [x7,3314]
+	lsr	w2, w5, 21
+	mul	w5, w5, w4
+	mul	w1, w1, w2
+	str	w5, [x7,2820]
+	add	x10, x21, :lo12:.LANCHOR7
+	add	w5, w1, 24576
+	adrp	x22, .LANCHOR4
+	mul	w3, w3, w4
+	udiv	w2, w5, w0
+	sub	w0, w11, #1
+	str	w2, [x7,2824]
+	sub	w3, w3, #1
+	str	w5, [x10,3288]
+	str	w1, [x7,4]
+	add	w0, w0, w2, lsl 2
+	mul	w2, w9, w4
+	udiv	w0, w0, w11
+	strh	w0, [x10,3266]
+	add	x10, x22, :lo12:.LANCHOR4
+	ubfiz	w0, w0, 4, 16
+	sdiv	w0, w0, w2
+	strh	w0, [x10,1132]
+	add	w0, w8, w8, lsl 1
+	asr	w0, w0, 2
+	strh	w0, [x7,3320]
+	udiv	w3, w5, w3
+	lsr	w0, w8, 4
+	cmp	w0, 79
+	strh	w0, [x7,3280]
+	add	w3, w3, 8
+	strh	w3, [x7,3282]
+	bhi	.L2616
+	mov	w0, 80
+	strh	w0, [x7,3280]
+.L2616:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w0, 4000
+	mov	w3, 1024
+	cmp	w6, 2
+	strh	w0, [x2,3316]
+	mov	w0, 50
+	strh	w0, [x2,3318]
+	add	x0, x22, :lo12:.LANCHOR4
+	strh	w3, [x0,1128]
+	mov	w3, 64
+	strh	w3, [x0,1130]
+	beq	.L2617
+	ldrb	w0, [x2,3240]
+	cbz	w0, .L2618
+.L2617:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 150
+	mov	w3, 128
+	strh	w2, [x0,3318]
+	add	x2, x22, :lo12:.LANCHOR4
+	strh	w3, [x2,1130]
+	ldrb	w3, [x0,97]
+	cbnz	w3, .L2618
+	mov	w3, 600
+	strh	w3, [x0,3316]
+	mov	w0, 512
+	strh	w0, [x2,1128]
+.L2618:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2620
+	adrp	x0, .LC201
+	add	x0, x0, :lo12:.LC201
+	bl	printk
+.L2620:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2621
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC202
+	add	x0, x0, :lo12:.LC202
+	ldr	w1, [x1,2820]
+	bl	printk
+.L2621:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2622
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC203
+	add	x0, x0, :lo12:.LC203
+	ldr	w1, [x1,2824]
+	bl	printk
+.L2622:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2623
+	add	x1, x21, :lo12:.LANCHOR7
+	adrp	x0, .LC204
+	add	x0, x0, :lo12:.LC204
+	ldr	w1, [x1,3288]
+	bl	printk
+.L2623:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2624
+	add	x1, x21, :lo12:.LANCHOR7
+	adrp	x0, .LC205
+	add	x0, x0, :lo12:.LC205
+	ldrh	w1, [x1,3266]
+	bl	printk
+.L2624:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2625
+	add	x1, x21, :lo12:.LANCHOR7
+	adrp	x0, .LC206
+	add	x0, x0, :lo12:.LC206
+	ldrh	w1, [x1,3282]
+	bl	printk
+.L2625:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2626
+	add	x1, x22, :lo12:.LANCHOR4
+	adrp	x0, .LC207
+	add	x0, x0, :lo12:.LC207
+	ldrh	w1, [x1,1132]
+	bl	printk
+.L2626:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2627
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC208
+	add	x0, x0, :lo12:.LC208
+	ldrh	w1, [x1,3280]
+	bl	printk
+.L2627:
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2628
+	add	x1, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC209
+	add	x0, x0, :lo12:.LC209
+	ldrh	w1, [x1,3282]
+	bl	printk
+.L2628:
+	add	x22, x19, :lo12:.LANCHOR0
+	bl	buf_init
+	mov	w0, 6
+	adrp	x23, .LANCHOR6
+	ldrh	w1, [x22,56]
+	mul	w0, w1, w0
+	bl	ftl_malloc
+	str	x0, [x22,8]
+	ldrb	w1, [x22,3244]
+	ldrh	w0, [x22,3276]
+	mul	w0, w0, w1
+	lsl	w0, w0, 2
+	bl	ftl_malloc
+	str	x0, [x22,3848]
+	ldrb	w1, [x22,3244]
+	add	x2, x23, :lo12:.LANCHOR6
+	ldrh	w0, [x22,3276]
+	sub	x2, x2, #64
+	str	x2, [x22,3840]
+	mul	w1, w0, w1
+	ldrh	w0, [x22,56]
+	lsl	w1, w1, 1
+	add	x3, x2, x1, sxtw 2
+	str	x3, [x22,72]
+	add	w1, w1, w0, lsr 1
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	add	x1, x2, x1, sxtw 2
+	str	x1, [x22,80]
+	tbz	x0, 12, .L2629
+	adrp	x0, .LC210
+	add	x0, x0, :lo12:.LC210
+	bl	printk
+.L2629:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x3, x21, :lo12:.LANCHOR7
+	ldrh	w0, [x2,3276]
+	ldrb	w22, [x2,3244]
+	ldrh	w1, [x2,56]
+	ldrh	w24, [x3,3266]
+	mul	w22, w0, w22
+	ldr	w0, [x20,#:lo12:.LANCHOR2]
+	lsl	w24, w24, 2
+	add	w24, w24, w1, lsl 2
+	add	w22, w1, w22, lsl 2
+	add	w24, w24, 704
+	lsl	w22, w22, 1
+	add	w22, w22, 612
+	tbz	x0, 12, .L2630
+	adrp	x0, .LC211
+	ldrh	w3, [x3,3282]
+	add	x0, x0, :lo12:.LC211
+	mov	w1, w22
+	mov	w2, w24
+	bl	printk
+.L2630:
+	add	x21, x21, :lo12:.LANCHOR7
+	ldrh	w0, [x21,3282]
+	cmp	w22, w0
+	bhi	.L2632
+	cmp	w24, w0
+	bls	.L2631
+.L2632:
+.L2633:
+	b	.L2633
+.L2631:
+	bl	sblk_init
+	bl	ftl_info_blk_init
+	cmn	w0, #1
+	beq	.L2634
+	bl	ftl_ext_info_init
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	add	x23, x23, :lo12:.LANCHOR6
+	bl	pm_init
+	bl	lpa_rebuild_hash
+	ldr	x0, [x19,80]
+	mov	x1, 0
+	add	x0, x0, 16
+	bl	ftl_open_sblk_recovery
+	ldr	x1, [x19,80]
+	add	x0, x1, 48
+	add	x1, x1, 16
+	bl	ftl_open_sblk_recovery
+	ldr	x1, [x19,2848]
+	ldr	w0, [x1,8]
+	add	w0, w0, 16
+	str	w0, [x1,8]
+	ldr	x0, [x19,80]
+	add	x0, x0, 16
+	bl	ftl_info_data_recovery
+	ldr	x0, [x19,80]
+	add	x0, x0, 48
+	bl	ftl_info_data_recovery
+	ldr	x0, [x19,80]
+	add	x0, x0, 80
+	bl	ftl_info_data_recovery
+	bl	gc_recovery
+	bl	pm_flush
+	mov	w0, 1
+	bl	ftl_total_vpn_update
+	ldrb	w0, [x23,-127]
+	cbz	w0, .L2635
+	ldr	x1, [x19,2848]
+	ldr	w0, [x1,68]
+	add	w0, w0, 1
+	str	w0, [x1,68]
+.L2635:
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	bl	print_ftl_debug_info
+	mov	w0, 0
+.L2634:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	zftl_init, .-zftl_init
+	.align	2
+	.global	rk_ftl_init
+	.type	rk_ftl_init, %function
+rk_ftl_init:
+	stp	x29, x30, [sp, -48]!
+	adrp	x0, jiffies
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR4
+	ldr	x0, [x0,#:lo12:jiffies]
+	add	x19, x20, :lo12:.LANCHOR4
+	str	x21, [sp,32]
+	str	x0, [x19,1136]
+	mov	w0, 136
+	bl	ftl_malloc
+	str	x0, [x19,1144]
+	cbnz	x0, .L2680
+.L2682:
+	mov	w0, -1
+	b	.L2681
+.L2680:
+	adrp	x21, .LANCHOR7
+	mov	w0, 2048
+	add	x21, x21, :lo12:.LANCHOR7
+	bl	ftl_malloc
+	str	xzr, [x19,1152]
+	add	x1, x21, 3304
+	str	x0, [x21,3296]
+	add	x0, x19, 1152
+	str	xzr, [x21,3304]
+	bl	rknand_get_reg_addr
+	ldr	x0, [x19,1152]
+	cbz	x0, .L2682
+	bl	rk_nandc_irq_init
+	mov	w1, 0
+	ldr	x0, [x21,3296]
+	mov	w2, w1
+	mov	w3, 2048
+	bl	flash_sram_load_store
+	bl	rknand_flash_cs_init
+	ldr	x0, [x19,1144]
+	adrp	x1, zftl_deinit
+	add	x1, x1, :lo12:zftl_deinit
+	str	x1, [x0,80]
+	adrp	x1, zftl_cache_flush
+	add	x1, x1, :lo12:zftl_cache_flush
+	str	x1, [x0,64]
+	adrp	x1, zftl_flash_suspend
+	add	x1, x1, :lo12:zftl_flash_suspend
+	str	x1, [x0,88]
+	adrp	x1, zftl_flash_resume
+	add	x1, x1, :lo12:zftl_flash_resume
+	str	x1, [x0,96]
+	adrp	x1, zftl_get_density
+	add	x1, x1, :lo12:zftl_get_density
+	str	x1, [x0,72]
+	adrp	x1, zftl_read_flash_info
+	add	x1, x1, :lo12:zftl_read_flash_info
+	str	x1, [x0,112]
+	adrp	x1, zftl_read
+	add	x1, x1, :lo12:zftl_read
+	str	x1, [x0,40]
+	adrp	x1, zftl_write
+	add	x1, x1, :lo12:zftl_write
+	str	x1, [x0,48]
+	adrp	x1, zftl_sys_read
+	add	x1, x1, :lo12:zftl_sys_read
+	str	x1, [x0,24]
+	adrp	x1, zftl_sys_write
+	add	x1, x1, :lo12:zftl_sys_write
+	str	x1, [x0,32]
+	adrp	x1, zftl_vendor_read
+	add	x1, x1, :lo12:zftl_vendor_read
+	str	x1, [x0,8]
+	adrp	x1, zftl_vendor_write
+	add	x1, x1, :lo12:zftl_vendor_write
+	str	x1, [x0,16]
+	adrp	x1, zftl_nandc_get_irq_status
+	add	x1, x1, :lo12:zftl_nandc_get_irq_status
+	str	x1, [x0,120]
+	adrp	x1, zftl_proc_ftl_read
+	add	x1, x1, :lo12:zftl_proc_ftl_read
+	str	x1, [x0,128]
+	adrp	x1, zftl_do_gc
+	add	x1, x1, :lo12:zftl_do_gc
+	str	x1, [x0,104]
+	adrp	x1, zftl_discard
+	add	x1, x1, :lo12:zftl_discard
+	str	x1, [x0,56]
+	ldr	x0, [x19,1152]
+	bl	nand_flash_init
+	cbnz	w0, .L2683
+	bl	zftl_init
+	mov	w19, w0
+	bl	zftl_proc_debug_init
+	b	.L2684
+.L2683:
+	ldr	x0, [x19,1144]
+	adrp	x1, ftl_deinit
+	add	x1, x1, :lo12:ftl_deinit
+	str	x1, [x0,80]
+	adrp	x1, ftl_cache_flush
+	add	x1, x1, :lo12:ftl_cache_flush
+	str	x1, [x0,64]
+	adrp	x1, ftl_flash_suspend
+	add	x1, x1, :lo12:ftl_flash_suspend
+	str	x1, [x0,88]
+	adrp	x1, ftl_flash_resume
+	add	x1, x1, :lo12:ftl_flash_resume
+	str	x1, [x0,96]
+	adrp	x1, ftl_get_density
+	add	x1, x1, :lo12:ftl_get_density
+	str	x1, [x0,72]
+	adrp	x1, ftl_read_flash_info
+	add	x1, x1, :lo12:ftl_read_flash_info
+	str	x1, [x0,112]
+	adrp	x1, ftl_read
+	add	x1, x1, :lo12:ftl_read
+	str	x1, [x0,40]
+	adrp	x1, ftl_write
+	add	x1, x1, :lo12:ftl_write
+	str	x1, [x0,48]
+	adrp	x1, ftl_sys_read
+	add	x1, x1, :lo12:ftl_sys_read
+	str	x1, [x0,24]
+	adrp	x1, ftl_sys_write
+	add	x1, x1, :lo12:ftl_sys_write
+	str	x1, [x0,32]
+	adrp	x1, ftl_vendor_read
+	add	x1, x1, :lo12:ftl_vendor_read
+	str	x1, [x0,8]
+	adrp	x1, ftl_vendor_write
+	add	x1, x1, :lo12:ftl_vendor_write
+	str	x1, [x0,16]
+	adrp	x1, ftl_nandc_get_irq_status
+	add	x1, x1, :lo12:ftl_nandc_get_irq_status
+	str	x1, [x0,120]
+	adrp	x1, ftl_proc_ftl_read
+	add	x1, x1, :lo12:ftl_proc_ftl_read
+	str	x1, [x0,128]
+	adrp	x1, ftl_do_gc
+	add	x1, x1, :lo12:ftl_do_gc
+	str	x1, [x0,104]
+	adrp	x1, ftl_discard
+	add	x1, x1, :lo12:ftl_discard
+	str	x1, [x0,56]
+	ldr	x0, [x19,1152]
+	bl	FlashInit
+	mov	w19, w0
+	adrp	x0, .LANCHOR2
+	adrp	x1, gNandParaInfo
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x1, x1, :lo12:gNandParaInfo
+	add	x0, x0, 376
+	mov	w2, 32
+	bl	ftl_memcpy
+	adrp	x0, g_nandc_version_data
+	ldr	w1, [x0,#:lo12:g_nandc_version_data]
+	mov	w0, 12336
+	movk	w0, 0x5638, lsl 16
+	cmp	w1, w0
+	bne	.L2685
+	adrp	x0, gFlashSlcMode
+	ldrb	w0, [x0,#:lo12:gFlashSlcMode]
+	cbnz	w0, .L2686
+.L2685:
+	add	x20, x20, :lo12:.LANCHOR4
+	adrp	x0, .LANCHOR0+97
+	strb	wzr, [x20,1232]
+	strb	wzr, [x0,#:lo12:.LANCHOR0+97]
+.L2686:
+	cbnz	w19, .L2684
+	bl	FtlInit
+	mov	w19, w0
+.L2684:
+	adrp	x0, .LC212
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC212
+	bl	printk
+	mov	w0, w19
+.L2681:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	ret
+	.size	rk_ftl_init, .-rk_ftl_init
+	.align	2
+	.global	gc_update_l2p_map_new
+	.type	gc_update_l2p_map_new, %function
+gc_update_l2p_map_new:
+	stp	x29, x30, [sp, -160]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	adrp	x21, .LANCHOR2
+	ldr	x20, [x0,80]
+	ldrh	w1, [x0,3242]
+	add	x28, x20, 80
+	ldrb	w0, [x28,9]
+	mul	w0, w1, w0
+	str	w0, [x29,140]
+	bl	timer_get_time
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2691
+	adrp	x0, .LC213
+	ldrh	w1, [x20,80]
+	add	x0, x0, :lo12:.LC213
+	bl	printk
+.L2691:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x20,80]
+	ldr	w2, [x29,140]
+	mov	w22, 0
+	mov	w23, w22
+	ldr	x0, [x0,72]
+	sub	w2, w2, #1
+	strh	w2, [x0,x1,lsl 1]
+	adrp	x0, .LC216
+	add	x0, x0, :lo12:.LC216
+	str	x0, [x29,120]
+	adrp	x0, .LC215
+	add	x0, x0, :lo12:.LC215
+	str	x0, [x29,112]
+	adrp	x0, .LC214
+	add	x0, x0, :lo12:.LC214
+	str	x0, [x29,104]
+.L2692:
+	ldr	w0, [x29,140]
+	cmp	w23, w0
+	beq	.L2726
+	adrp	x24, .LANCHOR4
+	str	x24, [x29,128]
+	add	x0, x24, :lo12:.LANCHOR4
+	ldr	x0, [x0,1104]
+	ldr	w2, [x0,w23,sxtw 2]
+	cmn	w2, #1
+	beq	.L2693
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2816]
+	lsl	w0, w0, 7
+	udiv	w0, w2, w0
+	and	w0, w0, 65535
+	str	w0, [x29,136]
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2694
+	ldr	x0, [x29,104]
+	mov	w3, w23
+	ldr	w1, [x29,136]
+	bl	printk
+.L2694:
+	mov	w25, w23
+.L2700:
+	ldr	x0, [x29,128]
+	sbfiz	x26, x25, 2, 32
+	add	x1, x0, :lo12:.LANCHOR4
+	ldr	x0, [x1,1104]
+	ldr	w24, [x0,x26]
+	cmn	w24, #1
+	beq	.L2695
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w2, [x29,136]
+	ldrb	w0, [x0,2816]
+	lsl	w0, w0, 7
+	udiv	w0, w24, w0
+	cmp	w2, w0, uxth
+	bne	.L2695
+	ldr	x0, [x1,1112]
+	ldr	w27, [x0,x26]
+	mov	w0, w24
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,156]
+	cmn	w0, #1
+	bne	.L2696
+	mov	w0, w24
+	add	x1, x29, 156
+	mov	w2, 0
+	bl	pm_log2phys
+.L2696:
+	ldr	w3, [x29,156]
+	cmp	w3, w27
+	bne	.L2697
+	ldr	x0, [x29,128]
+	add	x1, x29, 152
+	mov	w2, 1
+	add	w22, w22, 1
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x0, [x0,1120]
+	ldr	w0, [x0,x26]
+	str	w0, [x29,152]
+	mov	w0, w24
+	bl	pm_log2phys
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w2, 21
+	mov	w0, 1
+	ldrh	w3, [x1,3314]
+	sub	w2, w2, w3
+	lsr	w3, w27, w3
+	lsl	w2, w0, w2
+	sub	w2, w2, #1
+	and	w3, w2, w3
+	ldrb	w2, [x1,3312]
+	udiv	w2, w3, w2
+	uxth	w2, w2
+	str	x2, [x29,96]
+	mov	w0, w2
+	bl	ftl_vpn_decrement
+	ldrh	w0, [x28]
+	ldr	x2, [x29,96]
+	cmp	w0, w2
+	bne	.L2698
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2698
+	ldr	x0, [x29,112]
+	mov	w1, w24
+	ldr	w3, [x29,156]
+	mov	w2, w27
+	bl	printk
+	b	.L2698
+.L2697:
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2699
+	ldr	x0, [x29,120]
+	mov	w1, w24
+	mov	w2, w27
+	bl	printk
+.L2699:
+	ldrh	w0, [x28]
+	bl	ftl_vpn_decrement
+.L2698:
+	ldr	x0, [x29,128]
+	mov	w1, -1
+	add	x0, x0, :lo12:.LANCHOR4
+	ldr	x0, [x0,1104]
+	str	w1, [x0,x26]
+	bl	timer_get_time
+.L2695:
+	ldr	w0, [x29,140]
+	add	w25, w25, 1
+	cmp	w25, w0
+	bne	.L2700
+.L2693:
+	add	w23, w23, 1
+	b	.L2692
+.L2726:
+	ldr	w0, [x21,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2702
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w3, [x20,80]
+	ldr	x1, [x0,80]
+	ldr	x2, [x0,72]
+	adrp	x0, .LC217
+	add	x0, x0, :lo12:.LC217
+	ldrh	w1, [x1,80]
+	ldrh	w2, [x2,x3,lsl 1]
+	mov	w3, w22
+	bl	printk
+.L2702:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x20,80]
+	ldr	x0, [x0,72]
+	ldrh	w0, [x0,x1,lsl 1]
+	cmp	w0, w22
+	beq	.L2703
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 592
+	mov	w2, 463
+	bl	printk
+.L2703:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x20,80]
+	ldr	x0, [x19,72]
+	strh	w22, [x0,x1,lsl 1]
+	ldrh	w0, [x20,80]
+	bl	zftl_insert_data_list
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	gc_update_l2p_map_new, .-gc_update_l2p_map_new
+	.align	2
+	.global	gc_scan_src_blk_one_page
+	.type	gc_scan_src_blk_one_page, %function
+gc_scan_src_blk_one_page:
+	stp	x29, x30, [sp, -80]!
+	mov	w4, 0
+	mov	w6, 65535
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	str	x23, [sp,48]
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w5, w4
+	add	x2, x3, 2888
+	stp	x21, x22, [sp,32]
+	ldrb	w0, [x2,4]
+	add	x1, x2, x0, sxtw 1
+	ldrb	w7, [x3,3244]
+	ldrh	w1, [x1,40]
+	ldrh	w3, [x2,2]
+.L2728:
+	cmp	w1, w6
+	bne	.L2770
+	add	w0, w0, 1
+	uxtb	w0, w0
+	cmp	w0, w7
+	bne	.L2729
+	add	w3, w3, 1
+	mov	w4, 1
+	mov	w0, 0
+	uxth	w3, w3
+.L2729:
+	add	x1, x2, x0, sxtw 1
+	mov	w5, 1
+	ldrh	w1, [x1,40]
+	b	.L2728
+.L2770:
+	cbz	w5, .L2731
+	add	x2, x19, :lo12:.LANCHOR0
+	strb	w0, [x2,2892]
+.L2731:
+	cbz	w4, .L2732
+	add	x0, x19, :lo12:.LANCHOR0
+	strh	w3, [x0,2890]
+.L2732:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w2, [x0,3225]
+	ldrh	w20, [x0,3324]
+	cmp	w2, 2
+	mul	w1, w1, w20
+	bne	.L2733
+	ldrb	w2, [x0,2894]
+	add	x0, x0, 2888
+	cbnz	w2, .L2733
+	ldrh	w20, [x0,2]
+	add	w20, w1, w20, lsl 1
+	b	.L2734
+.L2733:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w20, [x0,2890]
+	add	w20, w1, w20
+.L2734:
+	add	x2, x19, :lo12:.LANCHOR0
+	add	x1, x2, 2888
+	ldrb	w0, [x2,2892]
+	add	w0, w0, 1
+	uxtb	w0, w0
+	strb	w0, [x2,2892]
+	ldrb	w2, [x2,3244]
+	cmp	w2, w0
+	bne	.L2735
+	ldrh	w0, [x1,2]
+	strb	wzr, [x1,4]
+	add	w0, w0, 1
+	strh	w0, [x1,2]
+.L2735:
+	mov	w0, 1
+	mov	w21, 0
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	buf_alloc
+	mov	x22, x0
+.L2746:
+	ldrb	w0, [x19,2894]
+	cbnz	w21, .L2748
+	cmp	w0, 3
+	beq	.L2736
+.L2748:
+	cmp	w0, w21
+	bgt	.L2738
+.L2747:
+	mov	x0, x22
+	bl	buf_free
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 80
+	ret
+.L2738:
+	ldrb	w1, [x19,3225]
+	cmp	w1, 2
+	bne	.L2739
+	cbnz	w0, .L2739
+	add	w0, w21, w20
+	orr	w0, w0, 33554432
+	b	.L2769
+.L2739:
+	orr	w0, w20, w21, lsl 24
+.L2769:
+	str	w0, [x22,40]
+	mov	w1, 1
+	mov	x0, x22
+	bl	sblk_read_page
+	ldr	w0, [x22,52]
+	cmp	w0, 512
+	beq	.L2743
+	cmn	w0, #1
+	beq	.L2743
+	ldr	x0, [x22,24]
+	ldr	w23, [x0,4]
+	mov	w0, w23
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,76]
+	cmn	w0, #1
+	bne	.L2744
+	mov	w0, w23
+	add	x1, x29, 76
+	mov	w2, 0
+	bl	pm_log2phys
+.L2744:
+	ldr	w0, [x29,76]
+	cmp	w20, w0
+	bne	.L2743
+	ldrh	w2, [x19,2912]
+	ldr	x1, [x19,3216]
+	str	w20, [x1,x2,lsl 2]
+	ldrh	w1, [x19,2912]
+	add	w1, w1, 1
+	strh	w1, [x19,2912]
+.L2743:
+	ldrh	w0, [x19,2914]
+	add	w0, w0, 1
+	strh	w0, [x19,2914]
+.L2736:
+	add	w21, w21, 1
+	cmp	w21, 4
+	bne	.L2746
+	b	.L2747
+	.size	gc_scan_src_blk_one_page, .-gc_scan_src_blk_one_page
+	.align	2
+	.global	gc_scan_static_data
+	.type	gc_scan_static_data, %function
+gc_scan_static_data:
+	stp	x29, x30, [sp, -80]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x1, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	ldr	x0, [x1,80]
+	ldr	w2, [x0,544]
+	cmn	w2, #1
+	beq	.L2772
+	adrp	x21, .LANCHOR3
+	adrp	x22, .LC0
+	add	x21, x21, :lo12:.LANCHOR3
+	mov	w20, 11
+	add	x22, x22, :lo12:.LC0
+	add	x21, x21, 616
+.L2773:
+	add	x24, x19, :lo12:.LANCHOR0
+	add	x1, x29, 76
+	mov	w2, 0
+	ldr	x0, [x24,80]
+	ldr	w0, [x0,544]
+	bl	pm_log2phys
+	ldr	w0, [x29,76]
+	cmn	w0, #1
+	beq	.L2774
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x23, x0
+	ldr	w1, [x29,76]
+	str	w1, [x0,40]
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w0, [x23,52]
+	cmp	w0, 256
+	bne	.L2775
+	ldrh	w0, [x24,3314]
+	mov	w2, 21
+	mov	w1, 1
+	ldr	w3, [x29,76]
+	sub	w2, w2, w0
+	lsl	w2, w1, w2
+	lsr	w3, w3, w0
+	sub	w2, w2, #1
+	ldrb	w0, [x24,3312]
+	and	w2, w2, w3
+	udiv	w0, w2, w0
+	mov	w2, 0
+	bl	gc_add_sblk
+.L2775:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x23,24]
+	ldr	x0, [x0,80]
+	ldr	w1, [x1,4]
+	ldr	w0, [x0,544]
+	cmp	w1, w0
+	beq	.L2776
+	mov	x0, x22
+	mov	x1, x21
+	mov	w2, 1369
+	bl	printk
+.L2776:
+	mov	x0, x23
+	bl	buf_free
+.L2774:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldr	x1, [x2,80]
+	ldr	w2, [x2,2824]
+	ldr	w0, [x1,544]
+	add	w0, w0, 1
+	str	w0, [x1,544]
+	cmp	w0, w2
+	bcc	.L2777
+	mov	w0, -1
+	str	w0, [x1,544]
+	ldr	w0, [x1,548]
+	add	w0, w0, 1
+	str	w0, [x1,548]
+	bl	ftl_flush
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	b	.L2771
+.L2777:
+	ldr	w0, [x29,76]
+	cmn	w0, #1
+	bne	.L2771
+	sub	w20, w20, #1
+	uxth	w20, w20
+	cbnz	w20, .L2773
+	b	.L2771
+.L2772:
+	ldr	x1, [x1,2848]
+	ldr	w2, [x1,40]
+	cmp	w2, 20480
+	bls	.L2782
+	ldr	w3, [x1,44]
+	add	w3, w3, w2, lsr 10
+	and	w2, w2, 1023
+	str	w3, [x1,44]
+	str	w2, [x1,40]
+.L2782:
+	ldr	w2, [x0,536]
+	ldr	w3, [x0,12]
+	add	w2, w2, 12959744
+	add	w2, w2, 256
+	cmp	w3, w2
+	bhi	.L2783
+	ldr	w2, [x0,540]
+	ldr	w4, [x1,44]
+	add	w2, w2, 98304
+	add	w2, w2, 1696
+	cmp	w4, w2
+	bls	.L2771
+.L2783:
+	ldr	w1, [x1,44]
+	str	w1, [x0,540]
+	str	w3, [x0,536]
+	str	wzr, [x0,544]
+.L2771:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 80
+	ret
+	.size	gc_scan_static_data, .-gc_scan_static_data
+	.align	2
+	.global	gc_block_vpn_scan
+	.type	gc_block_vpn_scan, %function
+gc_block_vpn_scan:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x20, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	x1, [x20,80]
+	ldrh	w0, [x20,56]
+	ldr	w1, [x1,608]
+	cmp	w1, w0
+	bcs	.L2788
+	bl	timer_get_time
+	ldr	x21, [x20,80]
+	ldr	w1, [x21,604]
+	add	w1, w1, 28672
+	add	w1, w1, 1328
+	cmp	w0, w1
+	bls	.L2788
+	bl	timer_get_time
+	str	w0, [x21,604]
+	ldr	x0, [x20,80]
+	ldrh	w2, [x20,56]
+	ldr	w1, [x0,600]
+	cmp	w1, w2
+	bcs	.L2792
+	ldr	x2, [x20,2848]
+	ldrh	w2, [x2,134]
+	cmp	w1, w2
+	bcs	.L2793
+.L2792:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldr	x1, [x1,2848]
+	ldrh	w1, [x1,134]
+	str	w1, [x0,600]
+.L2793:
+	ldr	w25, [x0,600]
+	mov	w0, 65535
+	uxth	w20, w25
+	cmp	w20, w0
+	bne	.L2794
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 640
+	mov	w2, 1590
+	bl	printk
+.L2794:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldr	x0, [x21,80]
+	ldr	w1, [x0,600]
+	add	w1, w1, 1
+	str	w1, [x0,600]
+	ldr	w1, [x0,608]
+	add	w1, w1, 1
+	str	w1, [x0,608]
+	add	x1, x29, 128
+	mov	w0, w20
+	bl	ftl_get_blk_list_in_sblk
+	uxth	w1, w0
+	cbz	w1, .L2788
+	uxtw	x22, w20
+	ldr	x24, [x21,64]
+	add	x24, x24, x22, lsl 2
+	ldrb	w1, [x24,2]
+	tst	w1, 192
+	and	w2, w1, 224
+	beq	.L2795
+	cmp	w2, 224
+	beq	.L2795
+	ldr	x1, [x21,80]
+	ldrh	w3, [x1,16]
+	cmp	w3, w20
+	beq	.L2795
+	ldrh	w3, [x1,48]
+	cmp	w3, w20
+	beq	.L2795
+	ldrh	w1, [x1,80]
+	cmp	w1, w20
+	bne	.L2796
+.L2795:
+	cbnz	w2, .L2788
+	add	x0, x19, :lo12:.LANCHOR0
+	lsl	x22, x22, 1
+	ldr	x0, [x0,72]
+	ldrh	w0, [x0,x22]
+	cbz	w0, .L2797
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 640
+	mov	w2, 1606
+	bl	printk
+.L2797:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x0, [x19,72]
+	strh	wzr, [x0,x22]
+	b	.L2788
+.L2796:
+	and	w0, w0, 65535
+	add	x1, x29, 144
+	sub	w0, w0, #1
+	add	x0, x1, x0, sxtw 1
+	ldrh	w21, [x0,-16]
+	mov	w0, 65535
+	cmp	w21, w0
+	bne	.L2799
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 640
+	mov	w2, 1612
+	bl	printk
+.L2799:
+	add	x2, x19, :lo12:.LANCHOR0
+	ldrb	w3, [x24,2]
+	mov	w26, 1
+	and	w3, w3, 224
+	ldrh	w0, [x2,3276]
+	cmp	w3, 160
+	ldrh	w1, [x2,3324]
+	sub	w0, w0, #1
+	mul	w1, w21, w1
+	uxth	w0, w0
+	bne	.L2800
+	ldrb	w3, [x2,3225]
+	cmp	w3, 2
+	uxth	w26, w3
+	orr	w1, w1, w3, lsl 24
+	bne	.L2800
+	ldrh	w0, [x2,3242]
+	sub	w0, w0, #1
+	uxth	w0, w0
+.L2800:
+	orr	w21, w0, w1
+	mov	w0, 1
+	bl	buf_alloc
+	str	w21, [x0,40]
+	mov	w1, 1
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	x23, x0
+	bl	sblk_read_page
+	ldrh	w0, [x21,3242]
+	mov	w1, 255
+	ldrb	w2, [x21,3244]
+	mul	w2, w0, w2
+	ldr	x0, [x21,3216]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldr	w0, [x23,52]
+	cmp	w0, 512
+	beq	.L2812
+	cmn	w0, #1
+	cset	w2, eq
+	cbz	w2, .L2801
+.L2812:
+	mov	w0, w20
+	mov	w1, 1
+	mov	w2, 0
+	b	.L2825
+.L2801:
+	ldr	x0, [x23,24]
+	ldr	w1, [x0]
+	mov	w0, 15555
+	movk	w0, 0xf55f, lsl 16
+	cmp	w1, w0
+	beq	.L2803
+	mov	w0, w20
+	mov	w1, 1
+.L2825:
+	bl	gc_add_sblk
+	mov	x0, x23
+	bl	buf_free
+	b	.L2788
+.L2803:
+	ldrb	w0, [x21,3244]
+	mov	x27, 0
+	ldrh	w1, [x21,3276]
+	and	w28, w25, 65535
+	mov	w21, w27
+	mul	w0, w0, w1
+	mul	w26, w26, w0
+	uxth	w0, w26
+	ldr	x26, [x23,8]
+	str	w0, [x29,108]
+.L2804:
+	ldr	w0, [x29,108]
+	cmp	w0, w27
+	ble	.L2826
+	ldr	w0, [x26,x27,lsl 2]
+	cmn	w0, #1
+	beq	.L2805
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,124]
+	cmn	w0, #1
+	bne	.L2806
+	ldr	w0, [x26,x27,lsl 2]
+	add	x1, x29, 124
+	mov	w2, 0
+	bl	pm_log2phys
+.L2806:
+	add	x4, x19, :lo12:.LANCHOR0
+	mov	w1, 21
+	ldrh	w0, [x4,3314]
+	sub	w2, w1, w0
+	mov	w1, 1
+	lsl	w2, w1, w2
+	ldr	w1, [x29,124]
+	sub	w2, w2, #1
+	lsr	w0, w1, w0
+	ldrb	w1, [x4,3312]
+	and	w0, w2, w0
+	udiv	w0, w0, w1
+	cmp	w0, w28
+	bne	.L2805
+	add	w21, w21, 1
+	uxth	w21, w21
+.L2805:
+	add	x27, x27, 1
+	b	.L2804
+.L2826:
+	mov	x0, x23
+	bl	buf_free
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2808
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w4, [x24,2]
+	uxth	w1, w25
+	mov	w3, w21
+	ubfx	x4, x4, 5, 3
+	ldr	x2, [x0,72]
+	adrp	x0, .LC218
+	add	x0, x0, :lo12:.LC218
+	ldrh	w2, [x2,x22,lsl 1]
+	bl	printk
+.L2808:
+	add	x19, x19, :lo12:.LANCHOR0
+	cmp	w21, 31
+	ldr	x0, [x19,72]
+	strh	w21, [x0,x22,lsl 1]
+	bhi	.L2788
+	mov	w0, w20
+	mov	w1, 1
+	mov	w2, 0
+	bl	gc_add_sblk
+.L2788:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	gc_block_vpn_scan, .-gc_block_vpn_scan
+	.align	2
+	.global	ftl_sblk_dump
+	.type	ftl_sblk_dump, %function
+ftl_sblk_dump:
+	sub	sp, sp, #256
+	mov	w2, 65535
+	stp	x29, x30, [sp,48]
+	add	x29, sp, 48
+	stp	x21, x22, [sp,80]
+	uxth	w22, w0
+	mov	w0, 0
+	stp	x19, x20, [sp,64]
+	stp	x23, x24, [sp,96]
+	stp	x25, x26, [sp,112]
+	stp	x27, x28, [sp,128]
+	cmp	w22, w2
+	beq	.L2828
+	adrp	x23, .LANCHOR0
+	add	x2, x23, :lo12:.LANCHOR0
+	ldrh	w3, [x2,56]
+	cmp	w3, w22
+	bls	.L2828
+	uxtw	x0, w22
+	str	x0, [x29,128]
+	lsl	x0, x0, 2
+	str	x0, [x29,152]
+	ldr	x0, [x2,64]
+	mov	w26, 1
+	ldr	x3, [x29,152]
+	add	x0, x0, x3
+	ldrb	w0, [x0,2]
+	and	w0, w0, 224
+	cmp	w0, 160
+	bne	.L2829
+	ldrb	w26, [x2,3225]
+.L2829:
+	str	x1, [x29,144]
+	mov	w0, w22
+	add	x1, x29, 192
+	strh	w22, [x29,176]
+	mov	w21, 0
+	bl	ftl_get_blk_list_in_sblk
+	uxtb	w1, w0
+	mov	w4, w0
+	add	x0, x23, :lo12:.LANCHOR0
+	strb	w1, [x29,185]
+	mov	w3, w26
+	strh	wzr, [x29,178]
+	uxtb	w4, w4
+	ldrh	w2, [x0,3276]
+	mov	w28, w21
+	strb	wzr, [x29,181]
+	mov	w19, w21
+	strh	wzr, [x29,186]
+	mul	w1, w1, w2
+	strh	w1, [x29,182]
+	ldr	x1, [x0,64]
+	ldr	x0, [x29,152]
+	add	x1, x1, x0
+	adrp	x0, .LC219
+	add	x0, x0, :lo12:.LC219
+	ldrb	w2, [x1,2]
+	mov	w1, w22
+	ubfx	x2, x2, 5, 3
+	bl	printk
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x27, x0
+	adrp	x0, .LC166
+	str	w21, [x29,140]
+	add	x0, x0, :lo12:.LC166
+	str	x0, [x29,120]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	add	x0, x0, 664
+	str	x0, [x29,112]
+.L2830:
+	add	x20, x23, :lo12:.LANCHOR0
+	ldrh	w0, [x20,3276]
+	cmp	w0, w19
+	bls	.L2846
+	lsl	w0, w19, 1
+	mov	w25, 0
+	sub	w0, w0, #1
+	str	w0, [x29,136]
+.L2847:
+	ldrb	w0, [x29,185]
+	cmp	w0, w25
+	bls	.L2844
+	mov	w24, 1
+.L2845:
+	cmp	w24, w26
+	bhi	.L2864
+	add	x0, x29, 176
+	add	x0, x0, x25, sxtw 1
+	ldrh	w2, [x0,16]
+	mov	w0, 65535
+	cmp	w2, w0
+	beq	.L2831
+	add	x1, x23, :lo12:.LANCHOR0
+	cmp	w26, 3
+	ldrh	w0, [x1,3324]
+	mul	w0, w2, w0
+	add	w20, w0, w19
+	bne	.L2832
+	orr	w20, w20, w24, lsl 24
+	b	.L2833
+.L2832:
+	cmp	w26, 2
+	bne	.L2833
+	ldr	w3, [x29,136]
+	ldrb	w20, [x1,3225]
+	add	w0, w0, w3
+	add	w0, w0, w24
+	orr	w20, w0, w20, lsl 24
+.L2833:
+	mov	w1, 1
+	str	w20, [x27,40]
+	mov	x0, x27
+	str	x2, [x29,104]
+	bl	sblk_read_page
+	ldr	x7, [x27,8]
+	mov	w3, w20
+	ldr	x0, [x27,24]
+	ldr	w9, [x27,52]
+	ldr	w1, [x7,12]
+	str	w1, [sp]
+	mov	w4, w9
+	ldr	x2, [x29,104]
+	ldr	w1, [x0]
+	str	w1, [sp,8]
+	str	x9, [x29,104]
+	ldr	w1, [x0,4]
+	str	w1, [sp,16]
+	ldr	w1, [x0,8]
+	str	w1, [sp,24]
+	mov	w1, w2
+	mov	w2, w19
+	ldr	w0, [x0,12]
+	str	w0, [sp,32]
+	ldr	x0, [x29,120]
+	ldr	w5, [x7]
+	ldr	w6, [x7,4]
+	ldr	w7, [x7,8]
+	bl	printk
+	ldr	x9, [x29,104]
+	cmp	w9, 512
+	beq	.L2851
+	cmn	w9, #1
+	bne	.L2835
+.L2851:
+	mov	w0, 1
+	str	w0, [x29,140]
+.L2835:
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	x1, [x29,152]
+	ldr	x0, [x0,64]
+	add	x0, x0, x1
+	ldrb	w0, [x0,2]
+	and	w0, w0, 224
+	cmp	w0, 32
+	beq	.L2831
+	cmp	w0, 224
+	cset	w2, eq
+	cbnz	w2, .L2831
+	ldr	x0, [x27,24]
+	str	x2, [x29,104]
+	ldr	w0, [x0,4]
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,172]
+	cmn	w0, #1
+	ldr	x2, [x29,104]
+	bne	.L2837
+	ldr	x0, [x27,24]
+	add	x1, x29, 172
+	ldr	w0, [x0,4]
+	bl	pm_log2phys
+.L2837:
+	ldr	w0, [x29,172]
+	cmp	w0, w20
+	bne	.L2838
+	ldr	x2, [x27,24]
+	add	w21, w21, 1
+	adrp	x0, .LC220
+	mov	w1, w20
+	add	x0, x0, :lo12:.LC220
+	mov	w3, w21
+	ldr	w2, [x2,4]
+	bl	printk
+.L2838:
+	ldr	x0, [x29,144]
+	cbz	x0, .L2840
+	ubfiz	x20, x28, 2, 32
+	ldr	w2, [x0,x20]
+	ldr	x0, [x27,24]
+	ldr	w0, [x0,4]
+	cmp	w0, w2
+	beq	.L2841
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L2841
+	adrp	x0, .LC221
+	mov	w1, w28
+	add	x0, x0, :lo12:.LC221
+	bl	printk
+.L2841:
+	ldr	x0, [x29,144]
+	ldr	x1, [x27,24]
+	ldr	w0, [x0,x20]
+	ldr	w1, [x1,4]
+	cmp	w1, w0
+	beq	.L2840
+	cmn	w0, #1
+	beq	.L2840
+	adrp	x0, .LC0
+	ldr	x1, [x29,112]
+	add	x0, x0, :lo12:.LC0
+	mov	w2, 1193
+	bl	printk
+.L2840:
+	add	w28, w28, 1
+.L2831:
+	add	w24, w24, 1
+	uxth	w24, w24
+	b	.L2845
+.L2864:
+	add	w25, w25, 1
+	uxth	w25, w25
+	b	.L2847
+.L2844:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2830
+.L2846:
+	mov	x0, x27
+	bl	buf_free
+	ldr	x3, [x29,128]
+	adrp	x0, .LC222
+	ldr	x2, [x20,72]
+	add	x0, x0, :lo12:.LC222
+	mov	w1, w22
+	ldrh	w2, [x2,x3,lsl 1]
+	mov	w3, w21
+	bl	printk
+	ldr	w0, [x29,140]
+.L2828:
+	sub	sp, x29, #48
+	ldp	x19, x20, [sp,64]
+	ldp	x21, x22, [sp,80]
+	ldp	x23, x24, [sp,96]
+	ldp	x25, x26, [sp,112]
+	ldp	x27, x28, [sp,128]
+	ldp	x29, x30, [sp,48]
+	add	sp, sp, 256
+	ret
+	.size	ftl_sblk_dump, .-ftl_sblk_dump
+	.align	2
+	.global	zftl_read
+	.type	zftl_read, %function
+zftl_read:
+	stp	x29, x30, [sp, -176]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w19, w0
+	adrp	x0, .LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	mov	w24, w1
+	stp	x21, x22, [sp,32]
+	stp	x27, x28, [sp,80]
+	mov	w25, w2
+	mov	x23, x3
+	tbz	x0, 12, .L2866
+	adrp	x0, .LC223
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC223
+	mov	w2, w24
+	mov	w3, w25
+	bl	printk
+.L2866:
+	cbnz	w19, .L2867
+	adrp	x0, .LANCHOR0+4
+	mov	w19, 24576
+	ldr	w2, [x0,#:lo12:.LANCHOR0+4]
+	b	.L2868
+.L2867:
+	cmp	w19, 3
+	mov	w0, -1
+	bhi	.L2869
+	lsl	w19, w19, 13
+	mov	w2, 8192
+.L2868:
+	add	w1, w24, w25
+	mov	w0, -1
+	cmp	w1, w2
+	bhi	.L2869
+	adrp	x22, .LANCHOR0
+	add	w24, w19, w24
+	add	x1, x22, :lo12:.LANCHOR0
+	add	w28, w24, w25
+	str	wzr, [x29,152]
+	ldr	x2, [x1,2848]
+	ldr	w0, [x2,24]
+	add	w0, w0, w25
+	str	w0, [x2,24]
+	ldrb	w0, [x1,2816]
+	sub	w1, w28, #1
+	udiv	w27, w24, w0
+	mov	w21, w27
+	udiv	w0, w1, w0
+	str	w0, [x29,148]
+	sub	w26, w0, w27
+	add	w0, w26, 1
+	str	w0, [x29,156]
+	adrp	x0, .LC0
+	add	x0, x0, :lo12:.LC0
+	str	x0, [x29,136]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	add	x0, x0, 680
+	str	x0, [x29,128]
+.L2870:
+	ldr	w0, [x29,156]
+	cbz	w0, .L2916
+	add	x0, x22, :lo12:.LANCHOR0
+	ldr	w1, [x29,148]
+	cmp	w21, w27
+	cset	w2, eq
+	cmp	w21, w1
+	ldrb	w0, [x0,2816]
+	cset	w20, eq
+	uxth	w19, w0
+	cbnz	w20, .L2896
+	cbz	w2, .L2871
+	b	.L2915
+.L2896:
+	cbz	w2, .L2873
+.L2915:
+	udiv	w20, w24, w0
+	msub	w20, w20, w0, w24
+	uxth	w0, w25
+	uxth	w20, w20
+	sub	w19, w19, w20
+	uxth	w19, w19
+	cmp	w19, w25
+	csel	w19, w0, w19, hi
+	b	.L2871
+.L2873:
+	msub	w19, w0, w21, w28
+	mov	w20, w2
+	uxtb	w19, w19
+.L2871:
+	add	x1, x22, :lo12:.LANCHOR0
+	mov	w0, 0
+	add	x1, x1, 768
+.L2876:
+	ldr	w2, [x1,36]
+	cmp	w2, w21
+	bne	.L2874
+	ldrb	w2, [x1,2]
+	tbz	x2, 3, .L2874
+	add	x2, x22, :lo12:.LANCHOR0
+	ubfiz	x1, x0, 6, 32
+	add	x0, x2, x1
+	ubfiz	x20, x20, 9, 16
+	lsl	w2, w19, 9
+	ubfiz	x19, x19, 9, 16
+	ldr	x1, [x0,776]
+	mov	x0, x23
+	add	x23, x23, x19
+	add	x1, x1, x20
+	bl	ftl_memcpy
+	b	.L2875
+.L2874:
+	add	w0, w0, 1
+	add	x1, x1, 64
+	cmp	w0, 32
+	bne	.L2876
+	mov	w0, w21
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,172]
+	cmn	w0, #1
+	bne	.L2877
+	mov	w0, w21
+	add	x1, x29, 172
+	mov	w2, 0
+	bl	pm_log2phys
+.L2877:
+	ldr	w0, [x29,172]
+	cmn	w0, #1
+	bne	.L2878
+	mov	w19, 0
+.L2879:
+	add	x0, x22, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2816]
+	cmp	w19, w0
+	bcs	.L2875
+	madd	w0, w21, w0, w19
+	cmp	w0, w24
+	bcc	.L2880
+	cmp	w0, w28
+	bcs	.L2880
+	mov	x0, x23
+	mov	w1, 0
+	mov	w2, 512
+	add	x23, x23, 512
+	bl	ftl_memset
+.L2880:
+	add	w19, w19, 1
+	b	.L2879
+.L2878:
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x26, x0
+	cbnz	x0, .L2882
+	bl	ftl_read_ahead
+	b	.L2870
+.L2882:
+	add	x1, x22, :lo12:.LANCHOR0
+	ldr	x2, [x1,2848]
+	ldr	w0, [x2,40]
+	add	w0, w0, 1
+	str	w0, [x2,40]
+	ldr	w0, [x29,172]
+	str	w0, [x26,40]
+	str	w0, [x26,44]
+	ldrb	w0, [x1,2816]
+	cmp	w0, w19
+	bne	.L2884
+	str	x23, [x26,16]
+.L2884:
+	mov	x0, x26
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w9, [x26,52]
+	cmn	w9, #1
+	bne	.L2885
+	add	x0, x22, :lo12:.LANCHOR0
+	str	w9, [x29,152]
+	ldr	x1, [x0,80]
+	ldr	w0, [x1,552]
+	add	w0, w0, 1
+	str	w0, [x1,552]
+	b	.L2886
+.L2885:
+	cmp	w9, 256
+	bne	.L2886
+	add	x1, x22, :lo12:.LANCHOR0
+	mov	w2, 21
+	mov	w5, 1
+	ldr	w0, [x29,172]
+	ldr	w3, [x26,40]
+	ldrh	w4, [x1,3314]
+	str	x9, [x29,104]
+	sub	w2, w2, w4
+	lsr	w4, w0, w4
+	lsl	w2, w5, w2
+	ldrb	w0, [x1,3312]
+	sub	w2, w2, #1
+	str	x5, [x29,112]
+	and	w4, w2, w4
+	ldr	w2, [x26,36]
+	udiv	w4, w4, w0
+	adrp	x0, .LC224
+	add	x0, x0, :lo12:.LC224
+	str	x4, [x29,120]
+	uxth	w1, w4
+	bl	printk
+	ldr	x4, [x29,120]
+	mov	w2, 0
+	ldr	x5, [x29,112]
+	mov	w0, w4
+	mov	w1, w5
+	bl	gc_add_sblk
+	ldr	x9, [x29,104]
+.L2886:
+	ldr	x7, [x26,24]
+	ldr	w5, [x7,4]
+	cmp	w5, w21
+	beq	.L2887
+	ldr	w4, [x7]
+	adrp	x0, .LC196
+	ldr	w6, [x7,8]
+	mov	w2, w21
+	ldrb	w1, [x26,1]
+	add	x0, x0, :lo12:.LC196
+	ldr	w3, [x29,172]
+	ldr	w7, [x7,12]
+	str	x9, [x29,120]
+	bl	printk
+	add	x3, x22, :lo12:.LANCHOR0
+	mov	w2, 21
+	mov	w1, 1
+	ldrh	w0, [x3,3314]
+	sub	w2, w2, w0
+	lsl	w2, w1, w2
+	ldr	w1, [x29,172]
+	sub	w2, w2, #1
+	lsr	w0, w1, w0
+	ldrb	w1, [x3,3312]
+	and	w0, w2, w0
+	udiv	w0, w0, w1
+	mov	x1, 0
+	bl	ftl_sblk_dump
+	ldr	x9, [x29,120]
+.L2887:
+	ldr	x0, [x26,24]
+	ldr	w0, [x0,4]
+	cmp	w0, w21
+	bne	.L2897
+	cmn	w9, #1
+	bne	.L2888
+.L2897:
+	ldr	x0, [x29,136]
+	mov	w2, 1030
+	ldr	x1, [x29,128]
+	bl	printk
+.L2888:
+	ldr	x0, [x26,16]
+	cbnz	x0, .L2890
+	ldr	x1, [x26,8]
+	ubfiz	x20, x20, 9, 16
+	mov	x0, x23
+	lsl	w2, w19, 9
+	add	x1, x1, x20
+	bl	ftl_memcpy
+.L2890:
+	mov	x0, x26
+	ubfiz	x19, x19, 9, 16
+	add	x23, x23, x19
+	bl	buf_free
+.L2875:
+	ldr	w0, [x29,156]
+	add	w21, w21, 1
+	sub	w0, w0, #1
+	str	w0, [x29,156]
+	b	.L2870
+.L2916:
+	bl	timer_get_time
+	adrp	x1, .LANCHOR7+3312
+	str	w0, [x1,#:lo12:.LANCHOR7+3312]
+	ldr	w0, [x29,152]
+.L2869:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 176
+	ret
+	.size	zftl_read, .-zftl_read
+	.align	2
+	.global	zftl_vendor_read
+	.type	zftl_vendor_read, %function
+zftl_vendor_read:
+	stp	x29, x30, [sp, -16]!
+	mov	w4, w1
+	mov	x3, x2
+	add	x29, sp, 0
+	add	w1, w0, 512
+	mov	w2, w4
+	mov	w0, 2
+	bl	zftl_read
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_vendor_read, .-zftl_vendor_read
+	.align	2
+	.global	zftl_sys_read
+	.type	zftl_sys_read, %function
+zftl_sys_read:
+	stp	x29, x30, [sp, -16]!
+	mov	w5, w0
+	mov	w4, w1
+	add	x29, sp, 0
+	mov	x3, x2
+	mov	w1, w5
+	mov	w2, w4
+	mov	w0, 2
+	bl	zftl_read
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_sys_read, .-zftl_sys_read
+	.align	2
+	.global	vpn_check
+	.type	vpn_check, %function
+vpn_check:
+	stp	x29, x30, [sp, -128]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x20, .LANCHOR0
+	add	x19, x20, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	bl	timer_get_time
+	adrp	x21, .LANCHOR7
+	bl	dump_ftl_info
+	adrp	x22, .LANCHOR3
+	ldr	x3, [x19,80]
+	adrp	x0, .LC225
+	add	x0, x0, :lo12:.LC225
+	adrp	x23, .LC0
+	add	x22, x22, :lo12:.LANCHOR3
+	add	x23, x23, :lo12:.LC0
+	ldrh	w1, [x3,16]
+	add	x22, x22, 696
+	ldrh	w2, [x3,48]
+	ldrh	w3, [x3,80]
+	bl	printk
+	ldr	x0, [x19,80]
+	ldr	x3, [x19,72]
+	ldrh	w1, [x0,16]
+	ubfiz	x2, x1, 1, 16
+	ldrh	w3, [x3,x2]
+	ldrh	w2, [x0,22]
+	adrp	x0, .LC226
+	add	x0, x0, :lo12:.LC226
+	sub	w4, w3, w2
+	bl	printk
+	ldr	x0, [x19,80]
+	ldr	x3, [x19,72]
+	mov	w19, 0
+	ldrh	w1, [x0,48]
+	ubfiz	x2, x1, 1, 16
+	ldrh	w3, [x3,x2]
+	ldrh	w2, [x0,54]
+	adrp	x0, .LC227
+	add	x0, x0, :lo12:.LC227
+	sub	w4, w3, w2
+	bl	printk
+	add	x0, x21, :lo12:.LANCHOR7
+	mov	w1, 0
+	add	x0, x0, 3320
+	mov	w2, 4608
+	bl	ftl_memset
+.L2920:
+	add	x24, x20, :lo12:.LANCHOR0
+	ldr	w0, [x24,2824]
+	cmp	w19, w0
+	bcs	.L2948
+	mov	w0, w19
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,124]
+	cmn	w0, #1
+	bne	.L2921
+	mov	w0, w19
+	add	x1, x29, 124
+	mov	w2, 0
+	bl	pm_log2phys
+	b	.L2922
+.L2921:
+	ldrh	w2, [x24,3314]
+	mov	w1, 21
+	lsr	w0, w0, w2
+	sub	w1, w1, w2
+	mov	w2, 1
+	lsl	w1, w2, w1
+	sub	w1, w1, #1
+	and	w0, w0, w1
+	ldrb	w1, [x24,3312]
+	udiv	w0, w0, w1
+	ldrh	w1, [x24,56]
+	cmp	w1, w0, uxth
+	bhi	.L2922
+	mov	x0, x23
+	mov	x1, x22
+	mov	w2, 1256
+	bl	printk
+.L2922:
+	ldr	w2, [x29,124]
+	cmn	w2, #1
+	beq	.L2924
+	add	x24, x20, :lo12:.LANCHOR0
+	mov	w3, 21
+	mov	w0, 1
+	ldrh	w4, [x24,3314]
+	sub	w3, w3, w4
+	lsr	w4, w2, w4
+	lsl	w3, w0, w3
+	ldrh	w0, [x24,56]
+	sub	w3, w3, #1
+	and	w4, w3, w4
+	ldrb	w3, [x24,3312]
+	udiv	w3, w4, w3
+	uxth	w25, w3
+	and	w3, w3, 65535
+	cmp	w0, w25
+	bls	.L2925
+	add	x0, x21, :lo12:.LANCHOR7
+	add	x0, x0, 3320
+	ldrh	w1, [x0,w3,sxtw 1]
+	add	w1, w1, 1
+	strh	w1, [x0,w3,sxtw 1]
+	b	.L2926
+.L2925:
+	adrp	x0, .LC228
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC228
+	bl	printk
+	ldrb	w3, [x24,2816]
+	adrp	x0, .LC229
+	ldr	x1, [x24,3880]
+	add	x0, x0, :lo12:.LC229
+	mov	w2, 4
+	lsl	w3, w3, 7
+	bl	rknand_print_hex
+.L2926:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x0,56]
+	cmp	w0, w25
+	bhi	.L2924
+	mov	x0, x23
+	mov	x1, x22
+	mov	w2, 1266
+	bl	printk
+.L2924:
+	bl	timer_get_time
+	add	w19, w19, 1
+	b	.L2920
+.L2948:
+	mov	w23, 0
+	adrp	x26, .LC230
+	mov	w19, w23
+	add	x27, x21, :lo12:.LANCHOR7
+	add	x26, x26, :lo12:.LC230
+	mov	w28, 65535
+.L2929:
+	add	x22, x20, :lo12:.LANCHOR0
+	ldrh	w1, [x22,56]
+	cmp	w1, w19
+	bls	.L2949
+	uxtw	x1, w19
+	ldr	x0, [x22,72]
+	lsl	x25, x1, 1
+	add	x24, x27, 3320
+	sxtw	x5, w19
+	ldrh	w3, [x0,x25]
+	ldrh	w2, [x24,w19,sxtw 1]
+	cmp	w3, w2
+	beq	.L2930
+	ldr	x0, [x22,64]
+	str	x5, [x29,104]
+	add	x1, x0, x1, lsl 2
+	mov	x0, x26
+	ldrb	w4, [x1,2]
+	mov	w1, w19
+	ubfx	x4, x4, 5, 3
+	bl	printk
+	ldr	x0, [x22,72]
+	ldrh	w1, [x0,x25]
+	cmp	w1, w28
+	beq	.L2930
+	ldr	x5, [x29,104]
+	ldrh	w0, [x24,x5,lsl 1]
+	cmp	w0, w1
+	bls	.L2930
+	ldr	x1, [x22,80]
+	ldrh	w0, [x1,16]
+	cmp	w0, w19
+	beq	.L2930
+	ldrh	w0, [x1,80]
+	cmp	w0, w19
+	beq	.L2930
+	ldrh	w0, [x1,48]
+	cmp	w0, w19
+	csinc	w23, w23, wzr, eq
+.L2930:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2929
+.L2949:
+	adrp	x22, .LANCHOR3
+	adrp	x24, .LC0
+	add	x22, x22, :lo12:.LANCHOR3
+	mov	w19, 0
+	add	x21, x21, :lo12:.LANCHOR7
+	add	x24, x24, :lo12:.LC0
+	add	x22, x22, 696
+.L2932:
+	add	x1, x20, :lo12:.LANCHOR0
+	ldrh	w0, [x1,56]
+	cmp	w0, w19
+	bls	.L2950
+	uxtw	x25, w19
+	ldr	x0, [x1,64]
+	add	x0, x0, x25, lsl 2
+	ldrb	w0, [x0,2]
+	tst	w0, 224
+	bne	.L2934
+	add	x0, x21, 3320
+	sxtw	x27, w19
+	ldrh	w0, [x0,w19,sxtw 1]
+	cbnz	w0, .L2935
+	lsl	x26, x25, 1
+	ldr	x0, [x1,72]
+	ldrh	w0, [x0,x26]
+	cbz	w0, .L2936
+	adrp	x0, .LC231
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC231
+	bl	printk
+.L2936:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,72]
+	strh	wzr, [x0,x26]
+.L2935:
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x0, [x0,72]
+	ldrh	w0, [x0,x25,lsl 1]
+	cbz	w0, .L2934
+	add	x0, x21, 3320
+	ldrh	w0, [x0,x27,lsl 1]
+	cbz	w0, .L2934
+	mov	x0, x24
+	mov	x1, x22
+	mov	w2, 1298
+	bl	printk
+.L2934:
+	add	w19, w19, 1
+	uxth	w19, w19
+	b	.L2932
+.L2950:
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC232
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, w23
+	add	x1, x1, 696
+	add	x0, x0, :lo12:.LC232
+	bl	printk
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	vpn_check, .-vpn_check
+	.align	2
+	.global	gc_scan_src_blk
+	.type	gc_scan_src_blk, %function
+gc_scan_src_blk:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldrh	w1, [x0,2888]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L2952
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 712
+	mov	w2, 897
+	bl	printk
+.L2952:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w3, 65535
+	mov	w0, 0
+	ldrh	w1, [x2,2888]
+	cmp	w1, w3
+	beq	.L2953
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L2954
+	ubfiz	x3, x1, 1, 16
+	ldr	x2, [x2,72]
+	adrp	x0, .LC233
+	add	x0, x0, :lo12:.LC233
+	ldrh	w2, [x2,x3]
+	bl	printk
+.L2954:
+	add	x20, x19, :lo12:.LANCHOR0
+	bl	timer_get_time
+	add	x21, x20, 2888
+	add	x1, x20, 2928
+	ldrh	w0, [x20,2888]
+	bl	ftl_get_blk_list_in_sblk
+	uxtb	w1, w0
+	strb	w1, [x21,5]
+	cbnz	w1, .L2955
+	mov	w0, -1
+	strh	w0, [x20,2888]
+	b	.L2983
+.L2955:
+	ldrh	w3, [x20,2888]
+	ldr	x2, [x20,64]
+	add	x2, x2, x3, lsl 2
+	ldrb	w2, [x2,2]
+	tst	w2, 192
+	and	w4, w2, 224
+	beq	.L2956
+	cmp	w4, 224
+	beq	.L2956
+	ldr	x2, [x20,80]
+	ldrh	w5, [x2,16]
+	cmp	w5, w3
+	beq	.L2956
+	ldrh	w5, [x2,48]
+	cmp	w5, w3
+	beq	.L2956
+	ldrh	w2, [x2,80]
+	cmp	w2, w3
+	bne	.L2957
+.L2956:
+	cbnz	w4, .L2958
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,72]
+	ldrh	w0, [x0,x3,lsl 1]
+	cbz	w0, .L2959
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 712
+	mov	w2, 917
+	bl	printk
+.L2959:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2888]
+	ldr	x0, [x0,72]
+	strh	wzr, [x0,x1,lsl 1]
+.L2958:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, -1
+	strh	wzr, [x19,2912]
+	strh	w0, [x19,2888]
+.L2983:
+	mov	w0, 0
+	b	.L2953
+.L2957:
+	and	w0, w0, 255
+	sub	w0, w0, #1
+	add	x0, x21, x0, sxtw 1
+	ldrh	w20, [x0,40]
+	mov	w0, 65535
+	cmp	w20, w0
+	bne	.L2960
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 712
+	mov	w2, 925
+	bl	printk
+.L2960:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w24, 1
+	ldrh	w3, [x2,2888]
+	ldr	x4, [x2,64]
+	ldrh	w0, [x2,3276]
+	add	x3, x4, x3, lsl 2
+	ldrh	w1, [x2,3324]
+	sub	w0, w0, #1
+	ldrb	w3, [x3,2]
+	uxth	w0, w0
+	mul	w1, w20, w1
+	and	w3, w3, 224
+	cmp	w3, 160
+	bne	.L2961
+	ldrb	w3, [x2,3225]
+	cmp	w3, 2
+	uxth	w24, w3
+	orr	w1, w1, w3, lsl 24
+	bne	.L2961
+	ldrh	w0, [x2,3242]
+	sub	w0, w0, #1
+	uxth	w0, w0
+.L2961:
+	add	x20, x19, :lo12:.LANCHOR0
+	orr	w23, w0, w1
+	mov	w0, 1
+	strb	w24, [x20,2894]
+	strh	wzr, [x20,2890]
+	strb	wzr, [x20,2892]
+	strh	wzr, [x20,2914]
+	bl	buf_alloc
+	mov	w1, 1
+	str	w23, [x0,40]
+	mov	x21, x0
+	bl	sblk_read_page
+	ldrh	w0, [x20,3242]
+	mov	w1, 255
+	ldrb	w2, [x20,3244]
+	mul	w2, w0, w2
+	ldr	x0, [x20,3216]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	strh	wzr, [x20,2912]
+	ldr	w0, [x21,52]
+	cmp	w0, 512
+	beq	.L2965
+	cmn	w0, #1
+	beq	.L2965
+	ldr	x0, [x21,24]
+	ldr	w1, [x0]
+	mov	w0, 15555
+	movk	w0, 0xf55f, lsl 16
+	cmp	w1, w0
+	beq	.L2964
+	ldrh	w0, [x20,2888]
+	mov	x1, 0
+	bl	ftl_sblk_dump
+	ldr	x0, [x21,24]
+	ldr	w1, [x0]
+	mov	w0, 15555
+	movk	w0, 0xf55f, lsl 16
+	cmp	w1, w0
+	beq	.L2965
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 712
+	mov	w2, 955
+	bl	printk
+.L2965:
+	mov	x0, x21
+	bl	buf_free
+	mov	w0, -1
+	b	.L2953
+.L2964:
+	ldrb	w0, [x20,3244]
+	mov	x26, 0
+	ldrh	w22, [x20,3276]
+	mov	w25, 1
+	ldr	x23, [x21,8]
+	mul	w22, w0, w22
+	mul	w22, w24, w22
+	mov	w24, 21
+	uxth	w22, w22
+.L2966:
+	cmp	w22, w26
+	ble	.L2984
+	ldr	w0, [x23,x26,lsl 2]
+	cmn	w0, #1
+	beq	.L2968
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,92]
+	cmn	w0, #1
+	bne	.L2969
+	ldr	w0, [x23,x26,lsl 2]
+	add	x1, x29, 92
+	mov	w2, 0
+	bl	pm_log2phys
+.L2969:
+	ldrh	w0, [x20,3314]
+	ldr	w2, [x29,92]
+	sub	w1, w24, w0
+	ldrh	w3, [x20,2888]
+	lsl	w1, w25, w1
+	lsr	w0, w2, w0
+	sub	w1, w1, #1
+	and	w0, w1, w0
+	ldrb	w1, [x20,3312]
+	udiv	w0, w0, w1
+	cmp	w0, w3
+	bne	.L2968
+	ldrh	w3, [x20,2912]
+	ldr	x0, [x20,3216]
+	str	w2, [x0,x3,lsl 2]
+	ldrh	w0, [x20,2912]
+	add	w0, w0, 1
+	strh	w0, [x20,2912]
+.L2968:
+	bl	timer_get_time
+	add	x26, x26, 1
+	b	.L2966
+.L2984:
+	mov	x0, x21
+	bl	buf_free
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x0,2888]
+	ldr	x3, [x0,72]
+	ubfiz	x2, x1, 1, 16
+	ldrh	w2, [x3,x2]
+	ldrh	w3, [x0,2912]
+	cmp	w2, w3
+	beq	.L2972
+	adrp	x0, .LC234
+	add	x0, x0, :lo12:.LC234
+	bl	printk
+.L2972:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x0,2888]
+	ldr	x1, [x0,72]
+	ldrh	w0, [x0,2912]
+	ldrh	w1, [x1,x2,lsl 1]
+	cmp	w1, w0
+	bcs	.L2973
+	bl	vpn_check
+.L2973:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x19,2888]
+	ldr	x1, [x19,72]
+	ldrh	w3, [x19,2912]
+	strh	w3, [x1,x2,lsl 1]
+	strh	wzr, [x19,2916]
+	ldrh	w0, [x19,2912]
+.L2953:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	gc_scan_src_blk, .-gc_scan_src_blk
+	.align	2
+	.global	ftl_scan_all_data
+	.type	ftl_scan_all_data, %function
+ftl_scan_all_data:
+	sub	sp, sp, #144
+	mov	w0, 0
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x19, x20, [sp,32]
+	stp	x23, x24, [sp,64]
+	stp	x25, x26, [sp,80]
+	stp	x27, x28, [sp,96]
+	stp	x21, x22, [sp,48]
+	bl	buf_alloc
+	adrp	x24, .LC236
+	mov	x19, x0
+	adrp	x25, .LC237
+	adrp	x0, .LC235
+	mov	w1, 0
+	add	x0, x0, :lo12:.LC235
+	mov	w20, 0
+	add	x24, x24, :lo12:.LC236
+	add	x27, x25, :lo12:.LC237
+	bl	printk
+.L2986:
+	adrp	x21, .LANCHOR0
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	w0, [x0,2824]
+	cmp	w20, w0
+	bcs	.L3009
+	mov	w0, -1
+	str	w0, [x19,36]
+	mov	w0, w20
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,124]
+	cmn	w0, #1
+	bne	.L2987
+	mov	w0, w20
+	add	x1, x29, 124
+	mov	w2, 0
+	bl	pm_log2phys
+.L2987:
+	and	w0, w20, 4095
+	cbnz	w0, .L2988
+	ldr	w2, [x29,124]
+	mov	x0, x24
+	mov	w1, w20
+	bl	printk
+.L2988:
+	ldr	w0, [x29,124]
+	str	w0, [x19,40]
+	str	w0, [x19,44]
+	cmn	w0, #1
+	beq	.L2990
+	mov	x0, x19
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	w3, [x19,52]
+	cmn	w3, #1
+	beq	.L2991
+	cmp	w3, 256
+	beq	.L2991
+	ldr	x0, [x19,24]
+	ldr	w0, [x0,4]
+	cmp	w0, w20
+	beq	.L2990
+.L2991:
+	ldr	x0, [x19,8]
+	add	x23, x25, :lo12:.LC237
+	ldr	x7, [x19,24]
+	adrp	x26, .LC238
+	ldr	w1, [x0]
+	str	w1, [sp]
+	mov	w1, w20
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	mov	x0, x23
+	ldr	w4, [x7]
+	ldr	w5, [x7,4]
+	ldr	w6, [x7,8]
+	ldr	w2, [x19,40]
+	ldr	w7, [x7,12]
+	bl	printk
+	ldr	x0, [x19,24]
+	ldr	w22, [x0,4]
+	ldr	w0, [x0,8]
+	cmn	w0, #1
+	bne	.L2993
+.L2995:
+	add	x21, x21, :lo12:.LANCHOR0
+	mov	w0, w20
+	ldrb	w22, [x21,2816]
+	bl	lpa_hash_get_ppa
+	mov	w1, w20
+	mov	w4, w0
+	lsl	w28, w22, 7
+	lsl	w3, w22, 7
+	sub	w3, w3, #1
+	add	x0, x26, :lo12:.LC238
+	sdiv	w28, w20, w28
+	and	w3, w20, w3
+	adrp	x26, .LC240
+	mov	x22, 0
+	uxth	w3, w3
+	add	x21, x21, 3872
+	add	x26, x26, :lo12:.LC240
+	uxth	w23, w28
+	mov	w2, w23
+	bl	printk
+	mov	w0, w20
+	add	x1, x29, 124
+	mov	w2, 0
+	bl	pm_log2phys
+	b	.L2994
+.L2993:
+	add	x1, x21, :lo12:.LANCHOR0
+	ldr	w1, [x1,2824]
+	cmp	w22, w1
+	bcs	.L2995
+	str	w0, [x19,40]
+	mov	w1, 1
+	mov	x0, x19
+	bl	sblk_read_page
+	ldr	x0, [x19,8]
+	ldr	x7, [x19,24]
+	ldr	w1, [x0]
+	str	w1, [sp]
+	mov	w1, w20
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	mov	x0, x23
+	ldr	w4, [x7]
+	ldr	w5, [x7,4]
+	ldr	w6, [x7,8]
+	ldr	w2, [x19,40]
+	ldr	w3, [x19,52]
+	ldr	w7, [x7,12]
+	bl	printk
+	mov	w0, w22
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,124]
+	cmn	w0, #1
+	bne	.L2996
+	mov	w0, w22
+	add	x1, x29, 124
+	mov	w2, 0
+	bl	pm_log2phys
+.L2996:
+	ldr	w0, [x29,124]
+	mov	w1, 1
+	str	w0, [x19,40]
+	mov	x0, x19
+	bl	sblk_read_page
+	ldr	x0, [x19,8]
+	ldr	x7, [x19,24]
+	ldr	w1, [x0]
+	str	w1, [sp]
+	mov	w1, w22
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	mov	x0, x27
+	ldr	w6, [x7,8]
+	ldr	w4, [x7]
+	ldr	w3, [x19,52]
+	ldr	w5, [x7,4]
+	ldr	w2, [x19,40]
+	ldr	w7, [x7,12]
+	bl	printk
+	add	x5, x21, :lo12:.LANCHOR0
+	mov	w0, w22
+	str	x5, [x29,96]
+	ldrb	w23, [x5,2816]
+	lsl	w2, w23, 7
+	udiv	w2, w22, w2
+	str	x2, [x29,104]
+	uxth	w28, w2
+	bl	lpa_hash_get_ppa
+	lsl	w3, w23, 7
+	ldr	x2, [x29,104]
+	sub	w3, w3, #1
+	mov	w4, w0
+	and	w3, w3, w22
+	mov	w1, w22
+	uxth	w2, w2
+	add	x0, x26, :lo12:.LC238
+	uxth	w3, w3
+	bl	printk
+	mov	w0, w22
+	add	x1, x29, 124
+	mov	w2, 0
+	mov	x22, 0
+	bl	pm_log2phys
+	ldr	x5, [x29,96]
+	adrp	x4, .LC239
+	add	x4, x4, :lo12:.LC239
+	add	x23, x5, 3872
+.L2998:
+	add	x0, x23, x22
+	ldr	x1, [x0,8]
+	cbz	x1, .L2997
+	ldrh	w0, [x22,x23]
+	cmp	w0, w28
+	bne	.L2997
+	mov	x0, x4
+	mov	w2, 4
+	mov	w3, 4096
+	str	x4, [x29,104]
+	bl	rknand_print_hex
+	ldr	x4, [x29,104]
+.L2997:
+	add	x22, x22, 16
+	cmp	x22, 512
+	bne	.L2998
+	b	.L2995
+.L3010:
+	ldrh	w0, [x22,x21]
+	cmp	w0, w23
+	bne	.L2999
+	mov	x0, x26
+	mov	w2, 4
+	mov	w3, 4096
+	bl	rknand_print_hex
+.L2999:
+	add	x22, x22, 16
+	cmp	x22, 512
+	beq	.L2990
+.L2994:
+	add	x0, x21, x22
+	ldr	x1, [x0,8]
+	cbnz	x1, .L3010
+	b	.L2999
+.L2990:
+	add	w20, w20, 1
+	b	.L2986
+.L3009:
+	mov	x0, x19
+	bl	buf_free
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 144
+	ret
+	.size	ftl_scan_all_data, .-ftl_scan_all_data
+	.align	2
+	.type	zftl_debug_proc_write, %function
+zftl_debug_proc_write:
+	sub	sp, sp, #224
+	cmp	x2, 79
+	mov	x0, -22
+	stp	x29, x30, [sp,32]
+	add	x29, sp, 32
+	stp	x19, x20, [sp,48]
+	stp	x21, x22, [sp,64]
+	add	x19, x29, 112
+	str	x19, [x29,104]
+	stp	x23, x24, [sp,80]
+	stp	x25, x26, [sp,96]
+	mov	x21, x2
+	bhi	.L3012
+	mov	x0, x19
+	bl	rk_copy_from_user
+	mov	x22, x0
+	mov	x0, -14
+	cbnz	x22, .L3012
+	adrp	x0, .LC241
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC241
+	strb	w22, [x19,x21]
+	bl	printk
+	adrp	x0, .LC242
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC242
+	mov	w2, 1
+	mov	w3, 16
+	bl	rknand_print_hex
+	bl	rknand_device_lock
+	adrp	x1, .LC243
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC243
+	mov	x2, 7
+	bl	memcmp
+	cbnz	w0, .L3013
+	adrp	x23, .LANCHOR0
+	adrp	x0, .LC244
+	add	x19, x23, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC244
+	mov	w2, 4
+	adrp	x20, .LANCHOR4
+	ldr	x3, [x19,2848]
+	add	x1, x3, 704
+	ldrh	w3, [x3,698]
+	bl	rknand_print_hex
+	add	x3, x20, :lo12:.LANCHOR4
+	ldr	x1, [x19,2848]
+	adrp	x0, .LC245
+	mov	w2, 2
+	add	x0, x0, :lo12:.LC245
+	add	x1, x1, 416
+	ldrh	w3, [x3,1132]
+	mov	w19, w22
+	mov	w22, 65535
+	bl	rknand_print_hex
+.L3014:
+	add	x0, x20, :lo12:.LANCHOR4
+	ldrh	w0, [x0,1132]
+	cmp	w19, w0
+	bge	.L3017
+	mov	w0, 300
+	bl	msleep
+	add	x0, x23, :lo12:.LANCHOR0
+	ldr	x0, [x0,2848]
+	add	x0, x0, x19, sxtw 1
+	ldrh	w0, [x0,416]
+	cmp	w0, w22
+	beq	.L3015
+	mov	x1, 0
+	bl	ftl_sblk_dump
+.L3015:
+	add	w19, w19, 1
+	b	.L3014
+.L3013:
+	adrp	x1, .LC246
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC246
+	mov	x2, 7
+	bl	memcmp
+	cbnz	w0, .L3018
+	adrp	x23, .LANCHOR0
+	adrp	x0, .LC244
+	add	x20, x23, :lo12:.LANCHOR0
+	add	x0, x0, :lo12:.LC244
+	mov	w2, 4
+	add	x22, x29, 192
+	adrp	x24, .LC249
+	ldr	x3, [x20,2848]
+	add	x24, x24, :lo12:.LC249
+	add	x1, x3, 704
+	ldrh	w3, [x3,698]
+	bl	rknand_print_hex
+	adrp	x3, .LANCHOR4+1132
+	ldr	x1, [x20,2848]
+	adrp	x0, .LC245
+	mov	w2, 2
+	add	x0, x0, :lo12:.LC245
+	add	x1, x1, 416
+	ldrh	w3, [x3,#:lo12:.LANCHOR4+1132]
+	bl	rknand_print_hex
+	adrp	x0, .LC247
+	add	x1, x19, 7
+	add	x0, x0, :lo12:.LC247
+	str	x1, [x22,-88]!
+	add	x19, x20, 3872
+	mov	x20, x23
+	bl	printk
+	adrp	x23, .LC248
+	ldr	x0, [x29,104]
+	mov	x1, x22
+	add	x25, x19, 512
+	add	x23, x23, :lo12:.LC248
+	bl	rk_simple_strtoull.constprop.34
+	mov	w22, w0
+	str	w0, [x29,100]
+	uxth	w26, w0
+.L3020:
+	ldrh	w1, [x19]
+	mov	x0, x23
+	ldrh	w2, [x19,2]
+	bl	printk
+	ldrh	w0, [x19]
+	cmp	w0, w26
+	bne	.L3019
+	add	x0, x20, :lo12:.LANCHOR0
+	ldr	x1, [x19,8]
+	mov	w2, 4
+	ldrb	w3, [x0,2816]
+	mov	x0, x24
+	lsl	w3, w3, 7
+	bl	rknand_print_hex
+.L3019:
+	add	x19, x19, 16
+	cmp	x19, x25
+	bne	.L3020
+	mov	w0, 300
+	add	x20, x20, :lo12:.LANCHOR0
+	bl	msleep
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x19, x0
+	ldr	x1, [x20,2848]
+	add	x1, x1, x22, uxth 2
+	ldr	w1, [x1,704]
+	str	w1, [x29,100]
+	str	w1, [x0,40]
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	x7, [x19,24]
+	ldr	x6, [x19,8]
+	ldr	w1, [x29,100]
+	ldr	w0, [x7,4]
+	str	w0, [sp]
+	ldr	w0, [x7,8]
+	str	w0, [sp,8]
+	ldr	w0, [x7,12]
+	str	w0, [sp,16]
+	adrp	x0, .LC197
+	add	x0, x0, :lo12:.LC197
+	ldr	w3, [x6]
+	ldr	w2, [x19,52]
+	ldr	w4, [x6,4]
+	ldr	w5, [x6,8]
+	ldr	w7, [x7]
+	ldr	w6, [x6,12]
+	bl	printk
+	ldrb	w3, [x20,2816]
+	adrp	x0, .LC250
+	add	x0, x0, :lo12:.LC250
+	ldr	x1, [x19,8]
+	mov	w2, 4
+	lsl	w3, w3, 7
+	b	.L3032
+.L3018:
+	adrp	x1, .LC251
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC251
+	mov	x2, 7
+	bl	memcmp
+	cbnz	w0, .L3021
+	bl	dump_ftl_info
+	b	.L3017
+.L3021:
+	adrp	x1, .LC252
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC252
+	mov	x2, 8
+	bl	memcmp
+	cbnz	w0, .L3022
+	bl	dump_all_list_info
+	b	.L3017
+.L3022:
+	adrp	x1, .LC253
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC253
+	mov	x2, 8
+	bl	memcmp
+	cbnz	w0, .L3023
+	bl	vpn_check
+	b	.L3017
+.L3023:
+	adrp	x1, .LC254
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC254
+	mov	x2, 8
+	bl	memcmp
+	cbnz	w0, .L3024
+	add	x20, x29, 192
+	adrp	x0, .LC247
+	add	x1, x19, 8
+	add	x0, x0, :lo12:.LC247
+	str	x1, [x20,-88]!
+	bl	printk
+	ldr	x0, [x29,104]
+	mov	x1, x20
+	adrp	x20, .LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR0
+	bl	rk_simple_strtoull.constprop.34
+	str	w0, [x29,100]
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x19, x0
+	ldr	w1, [x29,100]
+	str	w1, [x0,40]
+	mov	w1, 1
+	bl	sblk_read_page
+	ldr	x7, [x19,24]
+	ldr	x6, [x19,8]
+	ldr	w1, [x29,100]
+	ldr	w0, [x7,4]
+	str	w0, [sp]
+	ldr	w0, [x7,8]
+	str	w0, [sp,8]
+	ldr	w0, [x7,12]
+	str	w0, [sp,16]
+	adrp	x0, .LC197
+	add	x0, x0, :lo12:.LC197
+	ldr	w3, [x6]
+	ldr	w4, [x6,4]
+	ldr	w5, [x6,8]
+	ldr	w2, [x19,52]
+	ldr	w6, [x6,12]
+	ldr	w7, [x7]
+	bl	printk
+	ldrb	w3, [x20,2816]
+	adrp	x0, .LC190
+	ldr	x1, [x19,8]
+	add	x0, x0, :lo12:.LC190
+	mov	w2, 4
+	lsl	w3, w3, 7
+	bl	rknand_print_hex
+	ldrb	w3, [x20,2816]
+	adrp	x0, .LC191
+	ldr	x1, [x19,24]
+	add	x0, x0, :lo12:.LC191
+	mov	w2, 4
+	lsl	w3, w3, 1
+.L3032:
+	bl	rknand_print_hex
+	mov	x0, x19
+	bl	buf_free
+	b	.L3017
+.L3024:
+	adrp	x1, .LC255
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC255
+	mov	x2, 8
+	bl	memcmp
+	cbnz	w0, .L3025
+	add	x20, x29, 192
+	adrp	x0, .LC247
+	add	x1, x19, 8
+	add	x0, x0, :lo12:.LC247
+	str	x1, [x20,-88]!
+	bl	printk
+	ldr	x0, [x29,104]
+	mov	x1, x20
+	bl	rk_simple_strtoull.constprop.34
+	str	w0, [x29,100]
+	mov	x1, x22
+	bl	ftl_sblk_dump
+	b	.L3017
+.L3025:
+	adrp	x1, .LC256
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC256
+	mov	x2, 10
+	bl	memcmp
+	cbnz	w0, .L3026
+	add	x20, x29, 192
+	adrp	x0, .LC247
+	add	x1, x19, 10
+	add	x0, x0, :lo12:.LC247
+	str	x1, [x20,-88]!
+	bl	printk
+	ldr	x0, [x29,104]
+	mov	x1, x20
+	bl	rk_simple_strtoull.constprop.34
+	str	w0, [x29,100]
+	adrp	x1, .LANCHOR2
+	str	w0, [x1,#:lo12:.LANCHOR2]
+	b	.L3017
+.L3026:
+	adrp	x1, .LC257
+	mov	x2, 8
+	mov	x0, x19
+	add	x1, x1, :lo12:.LC257
+	bl	memcmp
+	mov	w2, w0
+	str	x2, [x29,88]
+	cbnz	w0, .L3027
+	add	x1, x19, 8
+	adrp	x0, .LC247
+	add	x19, x29, 192
+	add	x0, x0, :lo12:.LC247
+	str	x1, [x19,-88]!
+	bl	printk
+	ldr	x0, [x29,104]
+	mov	x1, x19
+	bl	rk_simple_strtoull.constprop.34
+	mov	w19, w0
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,100]
+	cmn	w0, #1
+	ldr	x2, [x29,88]
+	bne	.L3028
+	mov	w0, w19
+	add	x1, x29, 100
+	bl	pm_log2phys
+.L3028:
+	adrp	x0, .LC258
+	ldr	w2, [x29,100]
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC258
+	bl	printk
+	b	.L3017
+.L3027:
+	adrp	x0, .LC259
+	add	x0, x0, :lo12:.LC259
+	bl	printk
+	adrp	x0, .LC260
+	add	x0, x0, :lo12:.LC260
+	bl	printk
+	adrp	x0, .LC261
+	add	x0, x0, :lo12:.LC261
+	bl	printk
+	adrp	x0, .LC262
+	add	x0, x0, :lo12:.LC262
+	bl	printk
+	adrp	x0, .LC263
+	add	x0, x0, :lo12:.LC263
+	bl	printk
+	adrp	x0, .LC264
+	add	x0, x0, :lo12:.LC264
+	bl	printk
+	adrp	x0, .LC265
+	add	x0, x0, :lo12:.LC265
+	bl	printk
+	adrp	x0, .LC266
+	add	x0, x0, :lo12:.LC266
+	bl	printk
+	adrp	x0, .LC267
+	add	x0, x0, :lo12:.LC267
+	bl	printk
+.L3017:
+	bl	rknand_device_unlock
+	mov	x0, x21
+.L3012:
+	sub	sp, x29, #32
+	ldp	x19, x20, [sp,48]
+	ldp	x21, x22, [sp,64]
+	ldp	x23, x24, [sp,80]
+	ldp	x25, x26, [sp,96]
+	ldp	x29, x30, [sp,32]
+	add	sp, sp, 224
+	ret
+	.size	zftl_debug_proc_write, .-zftl_debug_proc_write
+	.align	2
+	.global	ftl_update_l2p_map
+	.type	ftl_update_l2p_map, %function
+ftl_update_l2p_map:
+	stp	x29, x30, [sp, -144]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	adrp	x19, .LANCHOR0
+	stp	x23, x24, [sp,48]
+	mov	x23, x0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldrb	w1, [x23,9]
+	ldrh	w24, [x0,3276]
+	ldrh	w20, [x23,12]
+	ldr	x0, [x0,3840]
+	mul	w24, w24, w1
+	add	x20, x0, x20, lsl 2
+	add	x0, x20, x24, sxtw 2
+	ldr	w0, [x0,-4]
+	cmn	w0, #1
+	beq	.L3034
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 728
+	mov	w2, 1468
+	bl	printk
+.L3034:
+	adrp	x0, .LC269
+	mov	x28, 0
+	add	x0, x0, :lo12:.LC269
+	adrp	x27, .LC268
+	str	x0, [x29,120]
+	adrp	x0, .LC270
+	add	x0, x0, :lo12:.LC270
+	mov	w22, w28
+	str	x0, [x29,112]
+	add	x27, x27, :lo12:.LC268
+.L3035:
+	cmp	w28, w24
+	mov	w25, w28
+	bge	.L3062
+	ldr	w2, [x20,x28,lsl 2]
+	cmn	w2, #1
+	beq	.L3036
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w21, [x0,2816]
+	adrp	x0, .LANCHOR2
+	lsl	w21, w21, 7
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	udiv	w21, w2, w21
+	and	w21, w21, 65535
+	tbz	x0, 12, .L3040
+	mov	x0, x27
+	mov	w1, w21
+	mov	w3, w28
+	bl	printk
+.L3040:
+	sbfiz	x26, x25, 2, 32
+	ldr	w0, [x20,x26]
+	cmn	w0, #1
+	beq	.L3038
+	add	x3, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x3,2816]
+	lsl	w1, w1, 7
+	udiv	w0, w0, w1
+	cmp	w21, w0, uxth
+	bne	.L3038
+	ldrb	w0, [x23,9]
+	ldrh	w2, [x3,3324]
+	str	x3, [x29,104]
+	sdiv	w1, w25, w0
+	msub	w0, w1, w0, w25
+	add	x0, x23, x0, sxtw 1
+	ldrh	w0, [x0,16]
+	madd	w2, w0, w2, w1
+	str	w2, [x29,140]
+	ldr	x0, [x29,120]
+	ldr	w1, [x20,x26]
+	bl	pm_ppa_update_check
+	ldr	x3, [x29,104]
+	cbz	w0, .L3039
+	ldr	x1, [x3,3840]
+	mov	w2, 4
+	ldr	x0, [x29,112]
+	mov	w3, w24
+	bl	rknand_print_hex
+.L3039:
+	ldr	w0, [x20,x26]
+	add	x1, x29, 140
+	mov	w2, 1
+	add	w22, w22, 1
+	bl	pm_log2phys
+	uxth	w22, w22
+	mov	w0, -1
+	str	w0, [x20,x26]
+.L3038:
+	add	w25, w25, 1
+	cmp	w25, w24
+	bne	.L3040
+.L3036:
+	add	x28, x28, 1
+	b	.L3035
+.L3062:
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L3042
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x23]
+	mov	w2, w22
+	ubfiz	x3, x1, 1, 16
+	ldr	x4, [x0,72]
+	adrp	x0, .LC271
+	add	x0, x0, :lo12:.LC271
+	ldrh	w3, [x4,x3]
+	bl	printk
+.L3042:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x23]
+	ldr	x0, [x19,72]
+	strh	w22, [x0,x1,lsl 1]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 144
+	ret
+	.size	ftl_update_l2p_map, .-ftl_update_l2p_map
+	.align	2
+	.global	ftl_alloc_new_data_sblk
+	.type	ftl_alloc_new_data_sblk, %function
+ftl_alloc_new_data_sblk:
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	str	x19, [sp,16]
+	mov	x19, x0
+	bl	ftl_update_l2p_map
+	bl	pm_flush
+	ldrh	w0, [x19]
+	mov	w1, 65535
+	cmp	w0, w1
+	beq	.L3064
+	bl	zftl_insert_data_list
+.L3064:
+	adrp	x0, .LANCHOR0+80
+	mov	w2, 2
+	mov	w1, 3
+	ldr	x0, [x0,#:lo12:.LANCHOR0+80]
+	add	x0, x0, 16
+	cmp	x19, x0
+	mov	x0, x19
+	csel	w1, w2, w1, eq
+	bl	ftl_open_sblk_init
+	bl	ftl_ext_info_flush
+	mov	w0, 0
+	bl	ftl_info_flush
+	bl	lpa_rebuild_hash
+	ldr	x19, [sp,16]
+	mov	w0, 0
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	ftl_alloc_new_data_sblk, .-ftl_alloc_new_data_sblk
+	.align	2
+	.global	ftl_write_commit
+	.type	ftl_write_commit, %function
+ftl_write_commit:
+	stp	x29, x30, [sp, -160]!
+	adrp	x0, .LANCHOR5
+	add	x29, sp, 0
+	stp	x23, x24, [sp,48]
+	adrp	x24, .LANCHOR0
+	add	x0, x0, :lo12:.LANCHOR5
+	add	x24, x24, :lo12:.LANCHOR0
+	str	x0, [x29,120]
+	stp	x27, x28, [sp,80]
+	add	x0, x0, 513
+	add	x28, x24, 768
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x25, x26, [sp,64]
+	str	x0, [x29,104]
+.L3068:
+	ldrb	w0, [x24,2840]
+	adrp	x21, .LANCHOR0
+	cbz	w0, .L3070
+	ldrb	w1, [x24,2866]
+	sub	w0, w0, #1
+	str	x1, [x29,112]
+	lsl	x1, x1, 6
+	strb	w0, [x24,2840]
+	add	x25, x28, x1
+	ldr	w0, [x24,2824]
+	ldrb	w1, [x28,x1]
+	ldr	w23, [x25,36]
+	strb	w1, [x24,2866]
+	cmp	w23, w0
+	bcc	.L3071
+	mov	x0, x25
+	bl	buf_free
+	mov	w0, -1
+	b	.L3125
+.L3071:
+	ldr	x0, [x25,24]
+	str	x0, [x29,128]
+	ldrb	w0, [x24,2841]
+	ldr	x26, [x25,8]
+	ldrb	w22, [x25,57]
+	ldrb	w20, [x25,56]
+	cbz	w0, .L3073
+	ldr	x0, [x29,120]
+	ldrb	w3, [x0,513]
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x0, 768
+	add	x3, x28, x3, lsl 6
+.L3074:
+	ldrb	w4, [x3]
+	cmp	w4, 255
+	beq	.L3127
+	sbfiz	x3, x4, 6, 32
+	add	x3, x0, x3
+	b	.L3074
+.L3127:
+	ldr	w0, [x3,36]
+	cmp	w0, w23
+	bne	.L3073
+	ldr	x0, [x3,8]
+	ubfiz	x1, x22, 9, 8
+	lsl	w2, w20, 9
+	add	x0, x0, x1
+	add	x1, x26, x1
+	bl	ftl_memcpy
+	mov	x0, x25
+	bl	buf_free
+	b	.L3068
+.L3073:
+	mov	w0, w23
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,156]
+	cmn	w0, #1
+	bne	.L3077
+	mov	w0, w23
+	add	x1, x29, 156
+	mov	w2, 0
+	bl	pm_log2phys
+.L3077:
+	add	x4, x21, :lo12:.LANCHOR0
+	mov	w3, 0
+	ldr	x19, [x4,80]
+	add	x4, x4, 768
+	add	x19, x19, 16
+.L3080:
+	ldr	w0, [x4,36]
+	cmp	w0, w23
+	bne	.L3078
+	ldrb	w5, [x4,2]
+	tbz	x5, 3, .L3078
+	add	x0, x21, :lo12:.LANCHOR0
+	ubfiz	x3, x3, 6, 32
+	add	x0, x0, 768
+	and	w5, w5, -9
+	add	x3, x0, x3
+	ldr	w0, [x3,40]
+	strb	w5, [x3,2]
+	ldr	x27, [x3,8]
+	str	w0, [x29,156]
+	b	.L3079
+.L3078:
+	add	w3, w3, 1
+	add	x4, x4, 64
+	cmp	w3, 32
+	bne	.L3080
+	mov	x27, 0
+.L3079:
+	add	x3, x21, :lo12:.LANCHOR0
+	str	wzr, [x29,136]
+	ldrb	w0, [x3,2816]
+	cmp	w20, w0
+	bcs	.L3081
+	add	w20, w22, w20
+	cbz	x27, .L3082
+	cbz	w22, .L3083
+	mov	x0, x26
+	mov	x1, x27
+	lsl	w2, w22, 9
+	str	x3, [x29,136]
+	bl	ftl_memcpy
+	ldr	x3, [x29,136]
+	ldr	x19, [x3,80]
+	add	x19, x19, 48
+.L3083:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w2, [x0,2816]
+	cmp	w20, w2
+	bcc	.L3084
+	ldr	x19, [x0,80]
+	add	x19, x19, 16
+	b	.L3126
+.L3084:
+	ubfiz	x1, x20, 9, 9
+	sub	w2, w2, w20
+	add	x0, x26, x1
+	lsl	w2, w2, 9
+	add	x1, x27, x1
+	bl	ftl_memcpy
+.L3126:
+	str	wzr, [x29,136]
+	b	.L3081
+.L3082:
+	ldr	w0, [x29,156]
+	cmn	w0, #1
+	beq	.L3085
+	mov	w0, 1
+	bl	buf_alloc
+	mov	x27, x0
+	ldr	w1, [x29,156]
+	str	w1, [x0,40]
+	mov	w1, 1
+	str	w23, [x0,36]
+	bl	sblk_read_page
+	ldr	x0, [x27,24]
+	ldr	w1, [x0,12]
+	ldr	w0, [x0,4]
+	add	w1, w1, 1
+	str	w1, [x29,136]
+	cmp	w0, w23
+	bne	.L3086
+	ldr	w0, [x27,52]
+	cmn	w0, #1
+	bne	.L3087
+.L3086:
+	ldrb	w1, [x27,1]
+	adrp	x0, .LC272
+	ldr	w2, [x29,156]
+	mov	w3, w23
+	ldr	w4, [x27,52]
+	add	x0, x0, :lo12:.LC272
+	bl	printk
+	mov	w2, 4
+	ldr	x1, [x27,24]
+	adrp	x0, .LC191
+	mov	w3, w2
+	add	x0, x0, :lo12:.LC191
+	bl	rknand_print_hex
+	add	x3, x21, :lo12:.LANCHOR0
+	mov	w2, 21
+	mov	w1, 1
+	ldrh	w0, [x3,3314]
+	sub	w2, w2, w0
+	lsl	w2, w1, w2
+	ldr	w1, [x29,156]
+	sub	w2, w2, #1
+	lsr	w0, w1, w0
+	ldrb	w1, [x3,3312]
+	and	w0, w2, w0
+	udiv	w0, w0, w1
+	mov	x1, 0
+	bl	ftl_sblk_dump
+.L3087:
+	ldr	x0, [x27,24]
+	ldr	w0, [x0,4]
+	cmp	w0, w23
+	bne	.L3088
+	ldr	w0, [x27,52]
+	cmn	w0, #1
+	bne	.L3089
+.L3088:
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 752
+	mov	w2, 544
+	bl	printk
+.L3089:
+	cbz	w22, .L3090
+	ldr	w0, [x29,156]
+	lsl	w2, w22, 9
+	cmn	w0, #1
+	beq	.L3091
+	ldr	x1, [x27,8]
+	mov	x0, x26
+	bl	ftl_memcpy
+	b	.L3092
+.L3085:
+	cbz	w22, .L3090
+	lsl	w2, w22, 9
+.L3091:
+	mov	x0, x26
+	mov	w1, 0
+	bl	ftl_memset
+.L3092:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x19, [x0,80]
+	add	x19, x19, 48
+.L3090:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w2, [x0,2816]
+	cmp	w20, w2
+	bcc	.L3093
+	bls	.L3094
+	ldr	x19, [x0,80]
+	add	x19, x19, 16
+	b	.L3094
+.L3093:
+	ldr	w0, [x29,156]
+	sub	w2, w2, w20
+	lsl	w2, w2, 9
+	cmn	w0, #1
+	ubfiz	x0, x20, 7, 9
+	beq	.L3095
+	ldr	x1, [x27,8]
+	lsl	x20, x0, 2
+	add	x0, x26, x20
+	add	x1, x1, x20
+	bl	ftl_memcpy
+	b	.L3094
+.L3095:
+	add	x0, x26, x0, lsl 2
+	mov	w1, 0
+	bl	ftl_memset
+.L3094:
+	cbz	x27, .L3081
+	ldrb	w0, [x27,2]
+	mov	x1, x27
+	and	w0, w0, -9
+	strb	w0, [x27,2]
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x0, 2880
+	bl	buf_remove_buf
+	mov	x0, x27
+	bl	buf_free
+.L3081:
+	ldrh	w0, [x19,6]
+	cbnz	w0, .L3096
+	bl	ftl_flush
+	mov	x0, x19
+	bl	ftl_alloc_new_data_sblk
+.L3096:
+	mov	x0, x19
+	add	x20, x21, :lo12:.LANCHOR0
+	bl	ftl_get_new_free_page
+	ldr	x1, [x29,112]
+	add	x3, x20, 768
+	ldr	x6, [x29,128]
+	lsl	x2, x1, 6
+	ldr	w7, [x29,136]
+	add	x1, x3, x2
+	ldr	w5, [x1,32]
+	str	w5, [x6]
+	str	w23, [x6,4]
+	ldr	w5, [x29,156]
+	str	w5, [x6,8]
+	str	w7, [x6,12]
+	str	w0, [x1,40]
+	mov	w0, -1
+	strb	w0, [x3,x2]
+	mov	w0, 10
+	ldrb	w2, [x1,2]
+	str	w5, [x1,44]
+	orr	w0, w2, w0
+	strb	w0, [x1,2]
+	ldrh	w2, [x19,10]
+	ldrh	w0, [x19,12]
+	add	w0, w2, w0
+	sub	w0, w0, #1
+	strh	w0, [x1,48]
+	ldr	x0, [x29,104]
+	mov	x1, x25
+	bl	buf_add_tail
+	ldrb	w0, [x20,2841]
+	add	w0, w0, 1
+	strb	w0, [x20,2841]
+	bl	timer_get_time
+	ldr	x1, [x29,120]
+	ldrb	w2, [x20,2841]
+	str	w0, [x1,516]
+	cmp	w2, 2
+	adrp	x0, .LANCHOR5
+	bhi	.L3097
+	ldrh	w1, [x19,6]
+	cmp	w1, 1
+	bne	.L3070
+.L3097:
+	ldrb	w1, [x19,5]
+	mov	w4, 2
+	add	x6, x21, :lo12:.LANCHOR0
+	cmp	w1, wzr
+	ldrh	w1, [x19,6]
+	csinc	w4, w4, wzr, ne
+	add	x6, x6, 768
+	cmp	w1, 1
+	add	x1, x0, :lo12:.LANCHOR5
+	csel	w4, w4, w2, ne
+	ldrb	w5, [x1,513]
+	mov	w1, 0
+	mov	w3, w5
+.L3101:
+	cmp	w1, w4
+	beq	.L3128
+	ubfiz	x3, x3, 6, 8
+	add	w1, w1, 1
+	ldrb	w3, [x6,x3]
+	b	.L3101
+.L3128:
+	add	x0, x0, :lo12:.LANCHOR5
+	uxtb	w1, w1
+	sub	w2, w2, w1
+	ubfiz	x5, x5, 6, 8
+	strb	w3, [x0,513]
+	add	x0, x21, :lo12:.LANCHOR0
+	add	x0, x0, 768
+	strb	w2, [x0,2073]
+	add	x0, x0, x5
+	bl	sblk_prog_page
+	ldrh	w0, [x19,6]
+	cmp	w0, 1
+	bne	.L3070
+	bl	sblk_wait_write_queue_completed
+	bl	ftl_write_completed
+	mov	x0, x19
+	bl	ftl_write_last_log_page
+	mov	x0, x19
+	bl	ftl_alloc_new_data_sblk
+.L3070:
+	add	x21, x21, :lo12:.LANCHOR0
+	ldrb	w19, [x21,2840]
+	cbnz	w19, .L3068
+	bl	ftl_write_completed
+	mov	w0, w19
+.L3125:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 160
+	ret
+	.size	ftl_write_commit, .-ftl_write_commit
+	.align	2
+	.global	gc_do_copy_back
+	.type	gc_do_copy_back, %function
+gc_do_copy_back:
+	sub	sp, sp, #208
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x19, x20, [sp,32]
+	adrp	x19, .LANCHOR0
+	stp	x21, x22, [sp,48]
+	add	x21, x19, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,64]
+	stp	x25, x26, [sp,80]
+	stp	x27, x28, [sp,96]
+	ldrb	w0, [x21,3241]
+	ldr	x22, [x21,80]
+	cbnz	w0, .L3130
+	bl	buf_alloc
+	mov	x20, x0
+	cbz	x0, .L3129
+	ldrh	w23, [x21,2914]
+	mov	w0, w23
+	add	w23, w23, 1
+	bl	gc_get_src_ppa_from_index
+	str	w0, [x20,40]
+	mov	w22, w0
+	mov	w1, 1
+	mov	x0, x20
+	strh	w23, [x21,2914]
+	bl	sblk_read_page
+	ldr	w0, [x20,52]
+	cmp	w0, 512
+	beq	.L3185
+	cmn	w0, #1
+	bne	.L3132
+.L3185:
+	add	x3, x19, :lo12:.LANCHOR0
+	mov	w2, 21
+	ldrh	w1, [x3,3314]
+	lsr	w0, w22, w1
+	sub	w1, w2, w1
+	mov	w2, 1
+	lsl	w1, w2, w1
+	sub	w1, w1, #1
+	and	w1, w0, w1
+	ldrb	w0, [x3,3312]
+	udiv	w0, w1, w0
+	mov	x1, 0
+	bl	ftl_sblk_dump
+.L3132:
+	ldr	w0, [x20,52]
+	cmp	w0, 512
+	beq	.L3186
+	cmn	w0, #1
+	bne	.L3134
+.L3186:
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 776
+	mov	w2, 573
+	bl	printk
+.L3134:
+	ldr	x0, [x20,24]
+	ldr	w21, [x0,4]
+	mov	w0, w21
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,144]
+	cmn	w0, #1
+	bne	.L3136
+	mov	w0, w21
+	add	x1, x29, 144
+	mov	w2, 0
+	bl	pm_log2phys
+.L3136:
+	ldr	w23, [x29,144]
+	cmp	w23, w22
+	bne	.L3137
+	add	x1, x19, :lo12:.LANCHOR0
+	add	x0, x1, 768
+	add	x1, x1, 2816
+.L3140:
+	ldr	w2, [x0,36]
+	cmp	w2, w21
+	bne	.L3138
+	ldrb	w2, [x0,2]
+	tbz	x2, 1, .L3138
+	mov	x0, x20
+	bl	buf_free
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3129
+	add	x19, x19, :lo12:.LANCHOR0
+	adrp	x0, .LC273
+	mov	w1, w21
+	mov	w2, w23
+	add	x0, x0, :lo12:.LC273
+	ldrh	w3, [x19,2914]
+	bl	printk
+	b	.L3129
+.L3138:
+	add	x0, x0, 64
+	cmp	x0, x1
+	bne	.L3140
+	add	x22, x19, :lo12:.LANCHOR0
+	ldrb	w1, [x20,2]
+	str	w21, [x20,36]
+	strb	wzr, [x20,57]
+	ldrb	w0, [x22,2816]
+	strb	w0, [x20,56]
+	mov	w0, 10
+	orr	w0, w1, w0
+	strb	w0, [x20,2]
+	ldr	x0, [x20,24]
+	ldr	w0, [x0]
+	str	w0, [x20,32]
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3141
+	ldr	w2, [x29,144]
+	mov	w0, w21
+	str	x2, [x29,136]
+	bl	lpa_hash_get_ppa
+	mov	w3, w0
+	ldr	x2, [x29,136]
+	adrp	x0, .LC274
+	ldrh	w5, [x22,2914]
+	add	x0, x0, :lo12:.LC274
+	mov	w1, w21
+	mov	w4, w23
+	bl	printk
+.L3141:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	x0, x20
+	bl	ftl_gc_write_buf
+	bl	ftl_write_commit
+	ldr	x1, [x19,2848]
+	ldr	w0, [x1,60]
+	add	w0, w0, 1
+	str	w0, [x1,60]
+	ldrh	w0, [x19,2916]
+	add	w0, w0, 1
+	strh	w0, [x19,2916]
+	b	.L3129
+.L3137:
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3143
+	mov	w0, w21
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	lpa_hash_get_ppa
+	mov	w3, w0
+	ldrh	w5, [x19,2914]
+	adrp	x0, .LC274
+	add	x0, x0, :lo12:.LC274
+	mov	w1, w21
+	mov	w2, w23
+	mov	w4, w22
+	bl	printk
+.L3143:
+	mov	x0, x20
+	bl	buf_free
+	b	.L3129
+.L3130:
+	ldrb	w24, [x21,3225]
+	add	x0, x21, 2888
+	add	x22, x22, 80
+	cmp	w24, 3
+	bne	.L3144
+	ldrb	w1, [x21,3240]
+	cbz	w1, .L3145
+	ldrb	w20, [x22,9]
+	ldrh	w21, [x0,314]
+	str	w24, [x29,136]
+	add	w23, w20, w20, lsl 1
+	sub	w20, w20, w20, lsl 2
+	sdiv	w23, w21, w23
+	madd	w20, w23, w20, w21
+	uxth	w20, w20
+	b	.L3147
+.L3145:
+	ldrh	w20, [x0,314]
+	adrp	x0, .LANCHOR2
+	ldrb	w21, [x22,9]
+	add	x0, x0, :lo12:.LANCHOR2
+	add	x0, x0, 1528
+	str	w24, [x29,136]
+	sdiv	w1, w20, w21
+	msub	w20, w1, w21, w20
+	ldrh	w25, [x0,w1,sxtw 1]
+	uxth	w20, w20
+	lsr	w23, w25, 3
+	and	w25, w25, 7
+	madd	w21, w23, w21, w20
+	cmp	w25, 1
+	add	w21, w21, w21, lsl 1
+	uxth	w21, w21
+	bne	.L3148
+	b	.L3147
+.L3144:
+	ldrb	w20, [x22,9]
+	ldrb	w1, [x21,3322]
+	ldrh	w21, [x0,314]
+	mov	w0, 1
+	sdiv	w23, w21, w20
+	msub	w20, w23, w20, w21
+	uxth	w20, w20
+	cbz	w1, .L3230
+	mov	w0, 2
+.L3230:
+	str	w0, [x29,136]
+.L3147:
+	mov	w25, 0
+	add	x24, x19, :lo12:.LANCHOR0
+	adrp	x3, .LANCHOR4
+.L3150:
+	ldrb	w1, [x22,9]
+	ldr	w0, [x29,136]
+	mul	w0, w0, w1
+	cmp	w25, w0
+	bge	.L3183
+	ldrh	w0, [x24,3242]
+	add	w26, w21, w25
+	mul	w0, w0, w1
+	sub	w0, w0, #1
+	cmp	w26, w0
+	beq	.L3183
+	add	x0, x3, :lo12:.LANCHOR4
+	sbfiz	x26, x26, 2, 32
+	ldr	x1, [x0,1112]
+	ldr	w0, [x1,x26]
+	cmn	w0, #1
+	bne	.L3151
+	ldrh	w27, [x24,2914]
+	ldrh	w0, [x24,2912]
+	str	x3, [x29,120]
+	str	x1, [x29,128]
+	cmp	w0, w27
+	bls	.L3129
+	mov	w0, w27
+	add	w27, w27, 1
+	bl	gc_get_src_ppa_from_index
+	strh	w27, [x24,2914]
+	ldr	x1, [x29,128]
+	ldr	x3, [x29,120]
+	str	w0, [x1,x26]
+.L3151:
+	add	w25, w25, 1
+	uxth	w25, w25
+	b	.L3150
+.L3183:
+	mov	w25, 1
+.L3148:
+	adrp	x0, .LANCHOR2
+	str	x0, [x29,120]
+	ldr	w1, [x0,#:lo12:.LANCHOR2]
+	tbz	x1, 8, .L3153
+	adrp	x0, .LANCHOR4+1112
+	add	x4, x19, :lo12:.LANCHOR0
+	ubfiz	x5, x21, 2, 16
+	mov	w1, w23
+	mov	w2, w25
+	mov	w3, w20
+	ldr	x6, [x0,#:lo12:.LANCHOR4+1112]
+	adrp	x0, .LC275
+	ldrh	w4, [x4,3202]
+	add	x0, x0, :lo12:.LC275
+	ldr	w5, [x6,x5]
+	mov	w6, w21
+	bl	printk
+.L3153:
+	adrp	x0, .LC0
+	mov	w27, 0
+	add	x0, x0, :lo12:.LC0
+	str	x0, [x29,112]
+	adrp	x0, .LANCHOR3
+	add	x0, x0, :lo12:.LANCHOR3
+	add	x0, x0, 776
+	str	x0, [x29,104]
+.L3154:
+	ldrb	w0, [x22,9]
+	ldr	w1, [x29,136]
+	mul	w0, w1, w0
+	cmp	w27, w0
+	bge	.L3234
+	add	w26, w21, w27
+	sxtw	x0, w26
+	str	x0, [x29,128]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x1, [x29,128]
+	ldr	x0, [x0,3232]
+	ldrb	w0, [x0,x1]
+	cmp	w0, 255
+	bne	.L3155
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x24, x0
+	cbnz	x0, .L3156
+	bl	sblk_wait_write_queue_completed
+	bl	ftl_write_completed
+	bl	gc_write_completed
+	bl	gc_free_temp_buf
+	mov	w0, w24
+	bl	buf_alloc
+	mov	x24, x0
+	cbz	x0, .L3129
+.L3156:
+	add	x28, x19, :lo12:.LANCHOR0
+	ldr	x2, [x29,128]
+	ldrb	w1, [x24,1]
+	ldr	x0, [x28,3232]
+	strb	w1, [x0,x2]
+	strh	w26, [x24,48]
+	ldrb	w0, [x28,2895]
+	strb	w25, [x24,61]
+	add	w0, w0, 1
+	strb	w0, [x28,2895]
+	ldrb	w1, [x22,9]
+	ldrh	w0, [x28,3242]
+	mul	w0, w0, w1
+	sub	w0, w0, #1
+	cmp	w26, w0
+	adrp	x26, .LANCHOR4
+	bne	.L3157
+	add	x26, x26, :lo12:.LANCHOR4
+	mov	w1, -1
+	ldr	x0, [x26,1104]
+	str	w1, [x0,x2,lsl 2]
+	ldrh	w0, [x28,3242]
+	ldrb	w2, [x28,3244]
+	ldr	x1, [x26,1104]
+	mul	w2, w0, w2
+	ldr	x0, [x24,8]
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	ldrh	w0, [x28,3242]
+	ldrb	w2, [x28,3244]
+	ldr	x1, [x26,1112]
+	mul	w2, w0, w2
+	ldr	x0, [x24,8]
+	add	x0, x0, x2, sxtw 2
+	lsl	w2, w2, 2
+	bl	ftl_memcpy
+	ldrb	w2, [x28,2816]
+	mov	w1, 0
+	ldr	x0, [x24,24]
+	lsl	w2, w2, 1
+	bl	ftl_memset
+	ldr	x1, [x24,24]
+	mov	w0, 15555
+	movk	w0, 0xf55f, lsl 16
+	str	w0, [x1]
+	ldrh	w0, [x28,3242]
+	ldrb	w1, [x28,3244]
+	ldr	x26, [x24,24]
+	mul	w1, w0, w1
+	ldr	x0, [x24,8]
+	lsl	w1, w1, 2
+	bl	js_hash
+	str	w0, [x26,4]
+	ldr	x1, [x28,80]
+	ldr	x0, [x24,24]
+	ldr	w1, [x1,132]
+	b	.L3231
+.L3157:
+	ldr	x0, [x29,128]
+	mov	w1, 1
+	lsl	x28, x0, 2
+	add	x0, x26, :lo12:.LANCHOR4
+	ldr	x0, [x0,1112]
+	ldr	w0, [x0,x28]
+	str	w0, [x24,40]
+	mov	x0, x24
+	bl	sblk_read_page
+	ldr	w0, [x24,52]
+	cmp	w0, 512
+	beq	.L3158
+	cmn	w0, #1
+	bne	.L3159
+.L3158:
+	add	x4, x19, :lo12:.LANCHOR0
+	mov	w2, 21
+	mov	w1, 1
+	ldrh	w0, [x4,3314]
+	sub	w2, w2, w0
+	lsl	w2, w1, w2
+	ldr	w1, [x24,40]
+	sub	w2, w2, #1
+	lsr	w0, w1, w0
+	ldrb	w1, [x4,3312]
+	and	w0, w2, w0
+	udiv	w0, w0, w1
+	mov	x1, 0
+	bl	ftl_sblk_dump
+	ldr	w0, [x24,52]
+	cmp	w0, 512
+	beq	.L3187
+	cmn	w0, #1
+	bne	.L3159
+.L3187:
+	ldr	x0, [x24,24]
+	mov	w1, -1
+	str	w1, [x0,4]
+.L3159:
+	ldr	w0, [x24,52]
+	cmp	w0, 512
+	beq	.L3188
+	cmn	w0, #1
+	bne	.L3162
+.L3188:
+	ldr	x0, [x29,112]
+	mov	w2, 688
+	ldr	x1, [x29,104]
+	bl	printk
+.L3162:
+	ldr	x1, [x24,24]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	w2, [x1,4]
+	ldr	w0, [x0,2824]
+	cmp	w2, w0
+	bcc	.L3164
+	mov	w0, -1
+	str	w0, [x1,4]
+.L3164:
+	ldr	x0, [x24,24]
+	add	x26, x26, :lo12:.LANCHOR4
+	ldr	w1, [x0,4]
+	ldr	x0, [x26,1104]
+	str	w1, [x0,x28]
+	ldr	x0, [x24,24]
+	ldr	w1, [x24,40]
+.L3231:
+	str	w1, [x0,8]
+.L3155:
+	add	x3, x19, :lo12:.LANCHOR0
+	ldr	x2, [x29,128]
+	add	x1, x3, 768
+	sxtw	x5, w27
+	ldr	x0, [x3,3232]
+	ldrb	w4, [x0,x2]
+	add	x0, x29, 144
+	mov	w2, 2
+	add	x1, x1, x4, lsl 6
+	str	x1, [x0,w27,sxtw 3]
+	ldrb	w0, [x3,3225]
+	strh	w2, [x1,50]
+	cmp	w0, 3
+	strb	w25, [x1,61]
+	adrp	x2, .LANCHOR4
+	bne	.L3165
+	udiv	w0, w27, w0
+	ldrh	w3, [x3,3324]
+	add	x2, x2, :lo12:.LANCHOR4
+	add	w4, w0, w20
+	add	x4, x22, x4, sxtw 1
+	ldrh	w4, [x4,16]
+	mul	w3, w4, w3
+	ldrh	w4, [x1,48]
+	add	w0, w0, w0, lsl 1
+	orr	w3, w3, w23
+	sub	w0, w27, w0
+	str	w3, [x1,40]
+	ldr	x1, [x2,1120]
+	uxth	w0, w0
+	add	w0, w0, 1
+	orr	w0, w3, w0, lsl 24
+	str	w0, [x1,x4,lsl 2]
+	b	.L3166
+.L3165:
+	cmp	w0, 2
+	bne	.L3167
+	ldrb	w6, [x3,3322]
+	add	x1, x1, 32
+	ldrh	w0, [x3,3324]
+	cbnz	w6, .L3168
+	add	w3, w27, w20
+	add	x3, x22, x3, sxtw 1
+	ldrh	w3, [x3,16]
+	madd	w0, w3, w0, w23
+	b	.L3233
+.L3168:
+	add	w3, w20, w27, lsr 1
+	add	x3, x22, x3, sxtw 1
+	ldrh	w3, [x3,16]
+	madd	w0, w3, w0, w23
+	and	w3, w27, 1
+	add	w0, w0, w3
+.L3233:
+	orr	w0, w0, 33554432
+	str	w0, [x1,8]
+.L3167:
+	add	x0, x19, :lo12:.LANCHOR0
+	add	x2, x2, :lo12:.LANCHOR4
+	add	x0, x0, 768
+	add	x0, x0, x4, lsl 6
+	ldr	w3, [x0,40]
+	ldrh	w1, [x0,48]
+	ldr	x0, [x2,1120]
+	str	w3, [x0,x1,lsl 2]
+.L3166:
+	ldr	x0, [x29,120]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3169
+	add	x0, x29, 144
+	ldr	x1, [x29,128]
+	mov	w2, w25
+	ldr	x5, [x0,x5,lsl 3]
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrb	w3, [x0,2894]
+	ldr	x0, [x0,3232]
+	ldrh	w6, [x5,48]
+	ldrb	w7, [x5,1]
+	ldrb	w4, [x0,x1]
+	mov	w0, 3
+	mov	w1, w27
+	udiv	w0, w27, w0
+	add	w0, w20, w0
+	str	w0, [sp]
+	ldr	x0, [x5,24]
+	ldr	w0, [x0,4]
+	str	w0, [sp,8]
+	adrp	x0, .LC276
+	add	x0, x0, :lo12:.LC276
+	ldr	w5, [x5,40]
+	bl	printk
+.L3169:
+	add	w8, w27, 1
+	uxth	w27, w8
+	b	.L3154
+.L3234:
+	add	x2, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	ldrb	w0, [x2,3225]
+	cmp	w0, 3
+	add	x0, x29, 144
+	bne	.L3216
+	ldrb	w1, [x2,3240]
+	cbz	w1, .L3172
+.L3175:
+	ldr	x1, [x29,144]
+	strb	wzr, [x1,60]
+	b	.L3173
+.L3172:
+	cmp	w25, 1
+	mov	w2, 9
+	beq	.L3232
+	cmp	w25, 2
+	bne	.L3175
+	mov	w2, 13
+.L3232:
+	ldr	x1, [x29,144]
+	strb	w2, [x1,60]
+.L3173:
+	ldrb	w2, [x22,9]
+	add	x1, x0, 24
+	bl	sblk_xlc_prog_pages
+	b	.L3176
+.L3216:
+	ldrb	w2, [x22,9]
+	ldr	w3, [x29,136]
+	mul	w2, w2, w3
+	sub	w2, w2, #1
+	cmp	w1, w2
+	bge	.L3235
+	ldr	x2, [x0,w1,sxtw 3]
+	add	w1, w1, 1
+	ldr	x3, [x0,w1,sxtw 3]
+	uxth	w1, w1
+	ldrb	w3, [x3,1]
+	strb	w3, [x2]
+	b	.L3216
+.L3235:
+	ldr	x0, [x0,w2,sxtw 3]
+	mov	w1, -1
+	strb	w1, [x0]
+	ldrb	w1, [x22,9]
+	ldr	x0, [x29,144]
+	mul	w1, w3, w1
+	bl	sblk_prog_page
+.L3176:
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrb	w2, [x22,9]
+	ldrb	w3, [x1,3240]
+	cbz	w3, .L3178
+	add	w0, w2, w2, lsl 1
+	and	w2, w0, 1023
+	b	.L3179
+.L3178:
+	ldrb	w1, [x1,3322]
+	ubfiz	w0, w2, 1, 8
+	cmp	w1, wzr
+	csel	w2, w0, w2, ne
+.L3179:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldr	x1, [x19,2848]
+	ldr	w0, [x1,52]
+	add	w0, w0, w2
+	str	w0, [x1,52]
+	ldrh	w1, [x19,3202]
+	add	w0, w2, w1
+	ldrh	w1, [x19,3242]
+	uxth	w0, w0
+	strh	w0, [x19,3202]
+	ldrb	w2, [x22,9]
+	mul	w1, w1, w2
+	cmp	w0, w1
+	blt	.L3180
+	ldr	x0, [x19,80]
+	strh	wzr, [x0,86]
+.L3180:
+	bl	gc_write_completed
+.L3129:
+	sub	sp, x29, #16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 208
+	ret
+	.size	gc_do_copy_back, .-gc_do_copy_back
+	.align	2
+	.global	zftl_discard
+	.type	zftl_discard, %function
+zftl_discard:
+	stp	x29, x30, [sp, -128]!
+	add	w2, w0, w1
+	mov	w4, -1
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	w19, w1
+	add	x1, x21, :lo12:.LANCHOR0
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	ldr	w1, [x1,4]
+	cmp	w2, w1
+	bhi	.L3237
+	adrp	x23, .LANCHOR8
+	add	w24, w0, 24576
+	add	x0, x23, :lo12:.LANCHOR8
+	adrp	x25, .LANCHOR2
+	ldr	w1, [x0,3576]
+	add	w1, w19, w1
+	str	w1, [x0,3576]
+	ldr	w0, [x25,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L3238
+	adrp	x0, .LC277
+	mov	w2, w24
+	add	x0, x0, :lo12:.LC277
+	mov	w3, w19
+	mov	w4, 0
+	bl	printk
+.L3238:
+	add	x20, x21, :lo12:.LANCHOR0
+	ldr	x0, [x20,2848]
+	ldr	w26, [x0,8]
+	add	w1, w26, 1
+	str	w1, [x0,8]
+	bl	ftl_write_commit
+	bl	ftl_flush
+	ldrb	w22, [x20,2816]
+	udiv	w20, w24, w22
+	msub	w27, w20, w22, w24
+	cbz	w27, .L3239
+	sub	w22, w22, w27
+	mov	w0, w20
+	cmp	w22, w19
+	csel	w22, w22, w19, ls
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,120]
+	cmn	w0, #1
+	bne	.L3240
+	mov	w0, w20
+	add	x1, x29, 120
+	mov	w2, 0
+	bl	pm_log2phys
+.L3240:
+	ldr	w0, [x29,120]
+	and	w28, w22, 65535
+	cmn	w0, #1
+	beq	.L3242
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x3, x0
+	cbz	x0, .L3242
+	strb	w27, [x0,57]
+	ubfiz	x27, x27, 9, 25
+	str	w20, [x0,36]
+	mov	w1, 0
+	strb	w22, [x0,56]
+	lsl	w2, w28, 9
+	str	w26, [x0,32]
+	ldr	x0, [x0,8]
+	str	x3, [x29,104]
+	add	x0, x0, x27
+	bl	ftl_memset
+	ldr	x3, [x29,104]
+	mov	x0, x3
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	add	x0, x21, :lo12:.LANCHOR0
+	ldr	x1, [x0,2848]
+	ldr	w0, [x1,76]
+	add	w0, w0, 1
+	str	w0, [x1,76]
+.L3242:
+	add	w20, w20, 1
+	sub	w19, w19, w28
+.L3239:
+	cbz	w19, .L3244
+	bl	ftl_flush
+.L3244:
+	mov	w0, -1
+	mov	w27, 1
+	str	w0, [x29,124]
+	mov	w28, 21
+.L3245:
+	add	x22, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x22,2816]
+	cmp	w19, w0
+	bcc	.L3284
+	mov	w0, w20
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,120]
+	cmn	w0, #1
+	beq	.L3246
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x3, x0
+	cbz	x0, .L3248
+	ldrb	w2, [x22,2816]
+	mov	w1, 0
+	str	w20, [x0,36]
+	strb	w2, [x0,56]
+	lsl	w2, w2, 9
+	str	w26, [x0,32]
+	strb	wzr, [x0,57]
+	ldr	x0, [x0,8]
+	str	x3, [x29,104]
+	bl	ftl_memset
+	ldr	x3, [x29,104]
+	mov	x0, x3
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	b	.L3283
+.L3246:
+	mov	w0, w20
+	add	x1, x29, 120
+	mov	w2, 0
+	bl	pm_log2phys
+	ldr	w0, [x29,120]
+	cmn	w0, #1
+	beq	.L3248
+	add	x1, x29, 124
+	mov	w2, 1
+	mov	w0, w20
+	bl	pm_log2phys
+	ldrh	w0, [x22,3314]
+	ldr	w1, [x29,120]
+	sub	w2, w28, w0
+	lsl	w2, w27, w2
+	lsr	w0, w1, w0
+	sub	w2, w2, #1
+	ldrb	w1, [x22,3312]
+	and	w0, w2, w0
+	udiv	w0, w0, w1
+	bl	ftl_vpn_decrement
+.L3283:
+	ldr	x1, [x22,2848]
+	ldr	w0, [x1,76]
+	add	w0, w0, 1
+	str	w0, [x1,76]
+.L3248:
+	add	x0, x21, :lo12:.LANCHOR0
+	add	w20, w20, 1
+	ldrb	w0, [x0,2816]
+	sub	w19, w19, w0
+	b	.L3245
+.L3284:
+	cbz	w19, .L3252
+	mov	w0, w20
+	bl	lpa_hash_get_ppa
+	str	w0, [x29,120]
+	cmn	w0, #1
+	bne	.L3253
+	mov	w0, w20
+	add	x1, x29, 120
+	mov	w2, 0
+	bl	pm_log2phys
+.L3253:
+	ldr	w0, [x29,120]
+	cmn	w0, #1
+	beq	.L3252
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x22, x0
+	cbz	x0, .L3252
+	str	w20, [x0,36]
+	strb	wzr, [x0,57]
+	strb	w19, [x0,56]
+	str	w26, [x0,32]
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w0, [x0,2816]
+	cmp	w19, w0
+	bcc	.L3255
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 792
+	mov	w2, 1177
+	bl	printk
+.L3255:
+	ldr	x0, [x22,8]
+	mov	w1, 0
+	lsl	w2, w19, 9
+	add	x21, x21, :lo12:.LANCHOR0
+	bl	ftl_memset
+	mov	x0, x22
+	bl	ftl_write_buf
+	bl	ftl_write_commit
+	ldr	x1, [x21,2848]
+	ldr	w0, [x1,76]
+	add	w0, w0, 1
+	str	w0, [x1,76]
+.L3252:
+	add	x0, x23, :lo12:.LANCHOR8
+	mov	w4, 0
+	ldr	w1, [x0,3576]
+	cmp	w1, 8192
+	bls	.L3237
+	ldr	w0, [x25,#:lo12:.LANCHOR2]
+	tbz	x0, 12, .L3256
+	adrp	x0, .LC277
+	mov	w2, w24
+	add	x0, x0, :lo12:.LC277
+	mov	w3, w19
+	bl	printk
+.L3256:
+	add	x23, x23, :lo12:.LANCHOR8
+	str	wzr, [x23,3576]
+	bl	flt_sys_flush
+	mov	w0, 1
+	mov	w4, 0
+	str	w0, [x23,3580]
+.L3237:
+	mov	w0, w4
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 128
+	ret
+	.size	zftl_discard, .-zftl_discard
+	.align	2
+	.global	zftl_do_gc
+	.type	zftl_do_gc, %function
+zftl_do_gc:
+	sub	sp, sp, #112
+	stp	x29, x30, [sp,16]
+	add	x29, sp, 16
+	stp	x19, x20, [sp,32]
+	adrp	x19, .LANCHOR0
+	stp	x23, x24, [sp,64]
+	mov	w24, w0
+	add	x0, x19, :lo12:.LANCHOR0
+	stp	x21, x22, [sp,48]
+	stp	x25, x26, [sp,80]
+	stp	x27, x28, [sp,96]
+	cmp	w24, 1
+	ldrh	w1, [x0,2832]
+	ldrh	w21, [x0,2828]
+	ldr	x23, [x0,80]
+	add	w21, w1, w21
+	ldrh	w22, [x0,2830]
+	uxth	w21, w21
+	bne	.L3286
+	adrp	x0, .LANCHOR7
+	adrp	x25, .LANCHOR8
+	add	x2, x0, :lo12:.LANCHOR7
+	mov	x20, x0
+	ldr	w26, [x2,3312]
+	cbnz	w26, .L3287
+	add	x0, x25, :lo12:.LANCHOR8
+	ldr	w0, [x0,3584]
+	cbz	w0, .L3286
+.L3287:
+	add	w26, w26, 50
+	bl	timer_get_time
+	cmp	w26, w0
+	bcs	.L3288
+	add	x0, x20, :lo12:.LANCHOR7
+	str	wzr, [x0,3312]
+.L3288:
+	add	x19, x25, :lo12:.LANCHOR8
+	ldr	w20, [x19,3584]
+	bl	timer_get_time
+	add	w20, w20, 50
+	cmp	w20, w0
+	bcs	.L3404
+	str	wzr, [x19,3584]
+	b	.L3404
+.L3286:
+	adrp	x20, .LANCHOR4
+	add	x0, x20, :lo12:.LANCHOR4
+	ldrb	w2, [x0,1098]
+	cmp	w2, 6
+	bhi	.L3404
+	adrp	x0, .L3292
+	add	x0, x0, :lo12:.L3292
+	ldrh	w0, [x0,w2,uxtw #1]
+	adr	x2, .Lrtx3292
+	add	x0, x2, w0, sxth #2
+	br	x0
+.Lrtx3292:
+	.section	.rodata
+	.align	0
+	.align	2
+.L3292:
+	.2byte	(.L3291 - .Lrtx3292) / 4
+	.2byte	(.L3293 - .Lrtx3292) / 4
+	.2byte	(.L3294 - .Lrtx3292) / 4
+	.2byte	(.L3295 - .Lrtx3292) / 4
+	.2byte	(.L3296 - .Lrtx3292) / 4
+	.2byte	(.L3374 - .Lrtx3292) / 4
+	.2byte	(.L3298 - .Lrtx3292) / 4
+	.text
+.L3291:
+	ldrh	w28, [x23,80]
+	add	x27, x19, :lo12:.LANCHOR0
+	mov	w0, 65535
+	add	w22, w22, w1
+	cmp	w28, w0
+	uxth	w22, w22
+	ldrh	w25, [x27,2834]
+	ldrh	w26, [x27,2836]
+	beq	.L3299
+	adrp	x0, .LANCHOR2
+	cmp	w22, 7
+	mov	w24, 3
+	csinc	w24, w24, wzr, hi
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3301
+	ldrh	w5, [x23,124]
+	adrp	x0, .LC278
+	ldrh	w6, [x23,120]
+	add	x0, x0, :lo12:.LC278
+	ldrh	w7, [x23,122]
+	mov	w1, 1705
+	ldrb	w2, [x27,3241]
+	mov	w3, w21
+	str	w28, [sp]
+	mov	w4, w22
+	bl	printk
+.L3301:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w1, w24
+	mov	w2, 1
+	ldrb	w0, [x19,3241]
+	bl	gc_search_src_blk
+	cmp	w0, wzr
+	ble	.L3404
+.L3307:
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w0, 1
+	b	.L3425
+.L3299:
+	cmp	w24, 1
+	bne	.L3303
+	bl	gc_scan_static_data
+	adrp	x23, .LANCHOR8
+	bl	gc_static_wearleveling
+	bl	gc_block_vpn_scan
+	add	x0, x23, :lo12:.LANCHOR8
+	ldr	w0, [x0,3580]
+	cbz	w0, .L3305
+	mov	w1, 5
+	mov	w0, 0
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	cmp	w1, w28
+	beq	.L3306
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x27,72]
+	ldrh	w1, [x2,x1]
+	cmp	w1, 4
+	bhi	.L3306
+	mov	w1, w24
+	mov	w2, 0
+	bl	gc_add_sblk
+	cbnz	w0, .L3307
+.L3306:
+	mov	w1, 4
+	mov	w0, 0
+	bl	zftl_get_gc_node
+	uxth	w1, w0
+	mov	w2, 65535
+	cmp	w1, w2
+	beq	.L3308
+	add	x2, x19, :lo12:.LANCHOR0
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x2,72]
+	ldrh	w1, [x2,x1]
+	cmp	w1, 4
+	bhi	.L3308
+	mov	w1, 1
+	mov	w2, 0
+	bl	gc_add_sblk
+	cbnz	w0, .L3307
+.L3308:
+	add	x27, x19, :lo12:.LANCHOR0
+	mov	w1, 0
+	ldr	x0, [x27,3256]
+	bl	_list_get_gc_head_node.isra.5
+	uxth	w1, w0
+	mov	w2, 65535
+	cmp	w1, w2
+	beq	.L3309
+	ubfiz	x1, x1, 1, 16
+	ldr	x2, [x27,72]
+	ldrh	w1, [x2,x1]
+	cmp	w1, 4
+	bhi	.L3309
+	mov	w1, 1
+	mov	w2, 0
+	bl	gc_add_sblk
+	cbnz	w0, .L3307
+.L3309:
+	add	x23, x23, :lo12:.LANCHOR8
+	str	wzr, [x23,3580]
+	b	.L3305
+.L3303:
+	ldrh	w0, [x27,2856]
+	cmp	w0, w21
+	bcc	.L3404
+.L3305:
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w0, 1
+	ldr	x7, [x1,80]
+	strb	w0, [x1,3241]
+	ldrh	w5, [x7,124]
+	cbz	w5, .L3311
+	add	x20, x20, :lo12:.LANCHOR4
+	strb	wzr, [x1,3241]
+	strb	w0, [x20,1098]
+	adrp	x0, .LANCHOR2
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3404
+	ldrh	w6, [x7,120]
+	adrp	x0, .LC279
+	ldrh	w7, [x7,122]
+	mov	w1, 1762
+	mov	w2, 0
+	mov	w3, w21
+	mov	w4, w22
+	add	x0, x0, :lo12:.LC279
+	bl	printk
+	b	.L3404
+.L3311:
+	ldrh	w3, [x1,2856]
+	cmp	w21, w3
+	bcs	.L3314
+	cmp	w22, 1
+	bls	.L3315
+	cmp	w22, 16
+	bls	.L3316
+	ldrh	w2, [x1,2838]
+	ldrh	w1, [x1,3282]
+	cmp	w2, w1
+	bcs	.L3316
+	mov	w1, 3
+	mov	w2, 16
+	b	.L3423
+.L3316:
+	mov	w1, 2
+	mov	w0, 1
+	mov	w2, w1
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	cbnz	w0, .L3307
+	b	.L3421
+.L3315:
+	adrp	x0, .LANCHOR2
+	strb	w5, [x1,3241]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3319
+	adrp	x0, .LC279
+	ldrh	w6, [x7,120]
+	ldrh	w7, [x7,122]
+	add	x0, x0, :lo12:.LC279
+	mov	w1, 1778
+	mov	w2, w5
+	mov	w3, w21
+	mov	w4, w22
+	bl	printk
+.L3319:
+	add	x19, x19, :lo12:.LANCHOR0
+	cmp	w21, 16
+	ldrb	w0, [x19,3241]
+	bls	.L3320
+	mov	w1, 3
+	mov	w2, 4
+	b	.L3423
+.L3320:
+	mov	w1, 1
+	mov	w2, w1
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	cbnz	w0, .L3307
+.L3421:
+	ldrb	w0, [x19,3241]
+	mov	w1, 3
+	mov	w2, 2
+.L3423:
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	b	.L3317
+.L3314:
+	cmp	w24, 1
+	lsl	w0, w3, 1
+	bne	.L3321
+	cmp	w21, w0
+	bge	.L3321
+	add	w0, w26, w25
+	uxth	w0, w0
+	cmp	w0, w22, lsr 1
+	bcs	.L3322
+	ldrh	w3, [x1,2838]
+	ldrh	w2, [x1,3282]
+	cmp	w3, w2
+	bcs	.L3322
+	ldrh	w0, [x1,3280]
+	lsr	w0, w0, 1
+	strh	w0, [x1,2856]
+	b	.L3404
+.L3322:
+	cmp	w22, 1
+	bls	.L3323
+	cmp	w22, 16
+	mov	w0, 1
+	bls	.L3324
+	mov	w1, 3
+	mov	w2, 8
+	b	.L3420
+.L3324:
+	mov	w1, 2
+	mov	w2, w1
+	bl	gc_search_src_blk
+	uxth	w0, w0
+	cbnz	w0, .L3325
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w1, 3
+	mov	w2, 2
+	ldrb	w0, [x0,3241]
+.L3420:
+	bl	gc_search_src_blk
+	uxth	w0, w0
+.L3325:
+	add	x19, x19, :lo12:.LANCHOR0
+	b	.L3422
+.L3323:
+	cmp	w21, w0
+	bcs	.L3326
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, 0
+	mov	w1, 3
+	mov	w2, 8
+	strb	wzr, [x19,3241]
+	bl	gc_search_src_blk
+	uxth	w0, w0
+.L3422:
+	ldrh	w1, [x19,3280]
+	strh	w1, [x19,2856]
+	b	.L3317
+.L3321:
+	cmp	w21, w0
+	blt	.L3404
+.L3326:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x19,3280]
+	lsr	w0, w0, 1
+	strh	w0, [x19,2856]
+	b	.L3404
+.L3317:
+	cbnz	w0, .L3307
+	b	.L3404
+.L3293:
+	add	x21, x19, :lo12:.LANCHOR0
+	mov	w0, 65535
+	ldrh	w1, [x21,2888]
+	cmp	w1, w0
+	bne	.L3327
+	bl	gc_get_src_blk
+	strh	w0, [x21,2888]
+.L3327:
+	add	x0, x19, :lo12:.LANCHOR0
+	mov	w2, 65535
+	add	x1, x0, 2888
+	ldrh	w3, [x0,2888]
+	cmp	w3, w2
+	beq	.L3328
+	ldrh	w5, [x1,56]
+	uxtw	x4, w3
+	ldr	x2, [x0,64]
+	add	x2, x2, x4, lsl 2
+	cbz	w5, .L3330
+	mov	x0, 0
+.L3329:
+	cmp	w5, w0, uxth
+	bls	.L3330
+	add	x0, x0, 1
+	add	x6, x1, x0, lsl 1
+	ldrh	w6, [x6,56]
+	cmp	w6, w3
+	bne	.L3329
+.L3335:
+	add	x19, x19, :lo12:.LANCHOR0
+	mov	w0, -1
+	strh	w0, [x19,2888]
+	b	.L3404
+.L3330:
+	ldrb	w0, [x2,2]
+	tst	w0, 192
+	beq	.L3378
+	and	w0, w0, 224
+	cmp	w0, 224
+	bne	.L3332
+.L3378:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x0, [x0,72]
+	ldrh	w0, [x0,x4,lsl 1]
+	cbz	w0, .L3335
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 1972
+	add	x1, x1, 808
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	b	.L3335
+.L3332:
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w0, 2
+.L3425:
+	strb	w0, [x20,1098]
+	b	.L3404
+.L3328:
+	add	x20, x20, :lo12:.LANCHOR4
+	strb	wzr, [x20,1098]
+	b	.L3404
+.L3294:
+	bl	gc_scan_src_blk
+	cmn	w0, #1
+	bne	.L3336
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w0, 3
+	b	.L3425
+.L3336:
+	add	x1, x19, :lo12:.LANCHOR0
+	mov	w3, 65535
+	ldrh	w0, [x1,2888]
+	cmp	w0, w3
+	beq	.L3307
+	ldrh	w3, [x1,2912]
+	add	x20, x20, :lo12:.LANCHOR4
+	cbz	w3, .L3337
+	mov	w0, 4
+	strh	wzr, [x1,2914]
+	strb	w0, [x20,1098]
+	b	.L3404
+.L3337:
+	ubfiz	x0, x0, 1, 16
+	ldr	x1, [x1,72]
+	mov	w2, 1
+	strb	w2, [x20,1098]
+	ldrh	w0, [x1,x0]
+	cbz	w0, .L3338
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 808
+	mov	w2, 2000
+	bl	printk
+.L3338:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x22, x20, 2888
+	ldrh	w0, [x20,2888]
+	ldr	x2, [x20,72]
+	ubfiz	x1, x0, 1, 16
+	ldrh	w21, [x2,x1]
+	cbnz	w21, .L3335
+	bl	ftl_free_sblk
+	ldrh	w1, [x20,2888]
+	ldr	x0, [x20,72]
+	strh	w21, [x0,x1,lsl 1]
+	ldrh	w1, [x22,30]
+	add	w1, w1, 1
+	uxth	w1, w1
+	cmp	w1, 8
+	bhi	.L3340
+	strh	w1, [x22,30]
+	b	.L3335
+.L3340:
+	strh	w21, [x22,30]
+	bl	ftl_flush
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	mov	w0, w21
+	bl	ftl_info_flush
+	b	.L3335
+.L3295:
+	add	x22, x19, :lo12:.LANCHOR0
+.L3405:
+	bl	gc_scan_src_blk_one_page
+	ldrh	w2, [x22,2890]
+	add	x0, x22, 2888
+	ldrh	w1, [x22,3276]
+	cmp	w2, w1
+	bcs	.L3341
+	cmp	w21, 7
+	bls	.L3405
+	b	.L3404
+.L3341:
+	ldrh	w3, [x0,24]
+	adrp	x2, .LANCHOR2
+	cbz	w3, .L3342
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w1, 4
+	strh	wzr, [x0,26]
+	strb	w1, [x20,1098]
+	ldr	w1, [x2,#:lo12:.LANCHOR2]
+	tbz	x1, 8, .L3343
+	ldrh	w1, [x0]
+	adrp	x0, .LC280
+	ldr	x4, [x22,72]
+	add	x0, x0, :lo12:.LC280
+	ubfiz	x2, x1, 1, 16
+	ldrh	w2, [x4,x2]
+	bl	printk
+.L3343:
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x0,2888]
+	ldr	x1, [x0,72]
+	ldrh	w0, [x0,2912]
+	ldrh	w1, [x1,x2,lsl 1]
+	cmp	w1, w0
+	beq	.L3344
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 808
+	mov	w2, 2034
+	bl	printk
+.L3344:
+	add	x19, x19, :lo12:.LANCHOR0
+	ldrh	w1, [x19,2888]
+	ldr	x0, [x19,72]
+	ldrh	w2, [x19,2912]
+	strh	w2, [x0,x1,lsl 1]
+	b	.L3404
+.L3342:
+	add	x20, x20, :lo12:.LANCHOR4
+	ldrh	w1, [x0]
+	mov	w0, 1
+	ldr	x21, [x22,64]
+	add	x21, x21, x1, uxth 2
+	strb	w0, [x20,1098]
+	ldr	w0, [x2,#:lo12:.LANCHOR2]
+	tbz	x0, 8, .L3345
+	ldrb	w2, [x21,2]
+	adrp	x0, .LC281
+	add	x0, x0, :lo12:.LC281
+	ubfx	x2, x2, 5, 3
+	bl	printk
+.L3345:
+	ldrb	w0, [x21,2]
+	tst	w0, 192
+	beq	.L3379
+	and	w0, w0, 224
+	cmp	w0, 224
+	bne	.L3346
+.L3379:
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 808
+	mov	w2, 2044
+	bl	printk
+.L3346:
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x20, x19, 2888
+	ldrh	w0, [x19,2888]
+	bl	ftl_free_sblk
+	mov	w0, -1
+	strh	w0, [x19,2888]
+	ldrh	w0, [x20,30]
+	add	w0, w0, 1
+	uxth	w0, w0
+	cmp	w0, 8
+	bhi	.L3348
+	strh	w0, [x20,30]
+	b	.L3404
+.L3348:
+	strh	wzr, [x20,30]
+	b	.L3426
+.L3296:
+	cbnz	w24, .L3349
+	add	x0, x19, :lo12:.LANCHOR0
+	ldrh	w0, [x0,2856]
+	cmp	w0, w21
+	bcc	.L3404
+.L3349:
+	ldrh	w1, [x23,80]
+	mov	w0, 65535
+	cmp	w1, w0
+	bne	.L3350
+	add	x22, x19, :lo12:.LANCHOR0
+	ldrb	w0, [x22,3241]
+	cmp	w0, 1
+	bne	.L3350
+	bl	ftl_flush
+	ldrh	w0, [x22,2832]
+	cbnz	w0, .L3424
+	ldrh	w0, [x22,2830]
+.L3424:
+	lsr	w0, w0, 1
+	mov	w1, 5
+	bl	zftl_get_free_sblk
+	uxth	w24, w0
+	mov	w0, 65535
+	mov	w22, w24
+	cmp	w24, w0
+	beq	.L3353
+	add	x0, x19, :lo12:.LANCHOR0
+	ldr	x21, [x0,64]
+	add	x21, x21, x24, uxth 2
+	ldrb	w0, [x21,2]
+	tst	w0, 224
+	beq	.L3354
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 808
+	mov	w2, 2069
+	bl	printk
+.L3354:
+	ldrb	w0, [x21,2]
+	mov	w1, 5
+	bfi	w0, w1, 5, 3
+	orr	w0, w0, 16
+	strb	w0, [x21,2]
+.L3373:
+	mov	w0, w22
+	mov	w1, 1
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR4
+	bl	ftl_erase_sblk
+	mov	w0, 5
+	add	x1, x23, 96
+	strb	w0, [x23,84]
+	mov	w0, w22
+	bl	ftl_get_blk_list_in_sblk
+	uxtb	w0, w0
+	ldrh	w1, [x19,3276]
+	strb	w0, [x23,89]
+	ldrb	w2, [x19,3244]
+	mul	w0, w0, w1
+	strh	w0, [x23,86]
+	mov	w1, 255
+	ldrh	w0, [x19,3242]
+	strh	w22, [x23,80]
+	strh	wzr, [x23,82]
+	mul	w2, w0, w2
+	ldr	x0, [x20,1104]
+	strb	wzr, [x23,85]
+	lsl	w2, w2, 2
+	strh	wzr, [x23,90]
+	bl	ftl_memset
+	ldrh	w0, [x19,3242]
+	mov	w1, 255
+	ldrb	w2, [x19,3244]
+	mul	w2, w0, w2
+	ldr	x0, [x20,1112]
+	lsl	w2, w2, 2
+	bl	ftl_memset
+	ldrh	w3, [x19,3242]
+	mov	w1, 255
+	ldrb	w2, [x19,3244]
+	ldr	x0, [x19,3232]
+	mul	w2, w3, w2
+	bl	ftl_memset
+	ldr	x0, [x19,80]
+	mov	w1, -1
+	str	w24, [x0,132]
+	strh	w1, [x0,128]
+	strh	w1, [x0,130]
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	strh	wzr, [x19,2944]
+	ldr	x0, [x19,2848]
+	strh	w22, [x0,126]
+	mov	w0, -1
+	str	w0, [x19,3208]
+	mov	w0, 0
+	strh	wzr, [x19,3202]
+	strh	wzr, [x19,3204]
+	strh	wzr, [x19,3206]
+	bl	ftl_info_flush
+	b	.L3404
+.L3350:
+	cmp	w24, 1
+	mov	w22, 4
+	csinc	w22, w22, wzr, eq
+	cmp	w21, 15
+	add	w0, w22, 4
+	add	x21, x19, :lo12:.LANCHOR0
+	csel	w22, w0, w22, ls
+.L3357:
+	sub	w22, w22, #1
+	uxtb	w22, w22
+	cmp	w22, 255
+	beq	.L3404
+	bl	gc_do_copy_back
+	ldrb	w0, [x21,3241]
+	cbnz	w0, .L3358
+	ldrb	w0, [x21,2818]
+	cmp	w0, 3
+	bhi	.L3359
+	bl	ftl_write_commit
+.L3359:
+	ldrh	w1, [x21,2914]
+	ldrh	w0, [x21,2912]
+	cmp	w1, w0
+	bcc	.L3357
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w0, 1
+	strb	w0, [x20,1098]
+	bl	ftl_write_commit
+	bl	ftl_flush
+	ldrh	w1, [x21,2888]
+	ldr	x0, [x21,72]
+	ldrh	w0, [x0,x1,lsl 1]
+	cbz	w0, .L3361
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	add	x0, x0, :lo12:.LC0
+	add	x1, x1, 808
+	mov	w2, 2144
+	bl	printk
+.L3361:
+	add	x20, x19, :lo12:.LANCHOR0
+	add	x21, x20, 2888
+	ldrh	w1, [x20,2888]
+	ldr	x3, [x20,72]
+	ubfiz	x0, x1, 1, 16
+	ldrh	w2, [x3,x0]
+	cbnz	w2, .L3362
+	strh	w2, [x3,x0]
+	ldrh	w0, [x20,2888]
+	bl	ftl_free_sblk
+	b	.L3335
+.L3362:
+	ldrh	w3, [x21,24]
+	adrp	x0, .LC282
+	add	x0, x0, :lo12:.LC282
+	bl	printk
+	ldrh	w3, [x21,24]
+	adrp	x0, .LC283
+	ldr	x1, [x20,3216]
+	add	x0, x0, :lo12:.LC283
+	mov	w2, 4
+	add	w3, w3, 1
+	bl	rknand_print_hex
+	ldrh	w1, [x20,2888]
+	adrp	x0, .LC284
+	ldr	x3, [x20,72]
+	add	x0, x0, :lo12:.LC284
+	ubfiz	x2, x1, 1, 16
+	ldrh	w4, [x21,26]
+	ldrh	w5, [x21,28]
+	ldrh	w2, [x3,x2]
+	ldrh	w3, [x21,24]
+	bl	printk
+	ldrh	w0, [x20,2888]
+	mov	x1, 0
+	bl	ftl_sblk_dump
+	bl	gc_scan_src_blk
+	ldrh	w1, [x20,2888]
+	adrp	x0, .LC285
+	ldr	x3, [x20,72]
+	add	x0, x0, :lo12:.LC285
+	ubfiz	x2, x1, 1, 16
+	ldrh	w2, [x3,x2]
+	ldrh	w3, [x21,24]
+	bl	printk
+	adrp	x0, .LC286
+	ldr	x1, [x20,3216]
+	ldrh	w3, [x21,24]
+	add	x0, x0, :lo12:.LC286
+	mov	w2, 4
+	bl	rknand_print_hex
+	b	.L3335
+.L3358:
+	add	x0, x21, 2888
+	ldrh	w1, [x0,318]
+	cbz	w1, .L3363
+	strh	wzr, [x0,318]
+	ldr	w0, [x0,320]
+	cmn	w0, #1
+	beq	.L3364
+	bl	ftl_mask_bad_block
+.L3364:
+	add	x21, x19, :lo12:.LANCHOR0
+	ldr	x0, [x21,80]
+	str	wzr, [x21,3208]
+	strh	wzr, [x21,2944]
+	ldrh	w0, [x0,80]
+	bl	ftl_free_sblk
+	ldr	x1, [x21,80]
+	mov	w0, -1
+	ldr	x2, [x21,2848]
+	strh	w0, [x1,80]
+	strh	w0, [x2,126]
+	strh	w0, [x1,130]
+	ldr	x0, [x21,2896]
+	cbz	x0, .L3365
+	bl	buf_free
+.L3365:
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR4
+	str	xzr, [x19,2896]
+	bl	flt_sys_flush
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 2177
+	add	x1, x1, 808
+	add	x0, x0, :lo12:.LC0
+	strb	wzr, [x20,1098]
+	bl	printk
+	b	.L3404
+.L3363:
+	ldrh	w1, [x23,86]
+	cmp	w1, 1
+	bls	.L3366
+	ldrh	w2, [x0,26]
+	ldrh	w1, [x0,24]
+	cmp	w2, w1
+	bcc	.L3357
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w1, 1
+	strb	w1, [x20,1098]
+	ldrh	w1, [x0,56]
+	add	w2, w1, 1
+	add	x1, x0, x1, sxtw 1
+	strh	w2, [x0,56]
+	ldrh	w2, [x0]
+	strh	w2, [x1,58]
+	mov	w1, -1
+	strh	w1, [x0]
+	b	.L3404
+.L3366:
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w1, 5
+	ldrh	w2, [x0,26]
+	strb	w1, [x20,1098]
+	ldrh	w1, [x0,24]
+	cmp	w2, w1
+	bcc	.L3367
+	ldrh	w1, [x0,56]
+	add	w2, w1, 1
+	add	x1, x0, x1, sxtw 1
+	strh	w2, [x0,56]
+	ldrh	w2, [x0]
+	strh	w2, [x1,58]
+	mov	w1, -1
+	strh	w1, [x0]
+.L3367:
+	add	x20, x19, :lo12:.LANCHOR0
+	bl	ftl_flush
+	bl	sblk_wait_write_queue_completed
+	bl	gc_write_completed
+	ldr	x0, [x20,80]
+	ldrh	w1, [x23,80]
+	strh	w1, [x0,128]
+	bl	pm_flush
+	bl	ftl_ext_info_flush
+	strh	wzr, [x20,2904]
+	ldrb	w2, [x20,3225]
+	ldrh	w1, [x20,3276]
+	strh	w1, [x20,2906]
+	cmp	w2, 2
+	strh	w2, [x20,2908]
+	bne	.L3368
+	lsl	w1, w1, 1
+	strh	w1, [x20,2906]
+	mov	w1, 1
+	strh	w1, [x20,2908]
+.L3368:
+	add	x19, x19, :lo12:.LANCHOR0
+	strh	wzr, [x19,2910]
+	b	.L3404
+.L3374:
+	mov	w22, 0
+	add	x25, x19, :lo12:.LANCHOR0
+.L3297:
+	bl	gc_check_data_one_wl
+	cbz	w0, .L3370
+	add	x19, x19, :lo12:.LANCHOR0
+	add	x20, x20, :lo12:.LANCHOR4
+	ldr	x0, [x19,80]
+	strh	wzr, [x19,2944]
+	ldrh	w0, [x0,80]
+	bl	ftl_free_sblk
+	ldr	x1, [x19,80]
+	mov	w0, -1
+	ldr	x2, [x19,2848]
+	strh	w0, [x1,80]
+	strh	w0, [x2,126]
+	strh	w0, [x1,130]
+	ldr	x0, [x19,2896]
+	bl	buf_free
+	str	xzr, [x19,2896]
+	strb	wzr, [x20,1098]
+.L3426:
+	bl	flt_sys_flush
+	b	.L3404
+.L3370:
+	ldrh	w1, [x25,2904]
+	ldrh	w0, [x25,2906]
+	cmp	w1, w0
+	bcc	.L3371
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w0, 6
+	strb	w0, [x20,1098]
+	ldr	x0, [x25,2896]
+	bl	buf_free
+	str	xzr, [x25,2896]
+	b	.L3404
+.L3371:
+	cmp	w21, 7
+	bls	.L3297
+	cmp	w24, 1
+	bne	.L3404
+	add	w22, w22, 1
+	uxtb	w22, w22
+	cmp	w22, 4
+	bls	.L3297
+	b	.L3404
+.L3298:
+	bl	gc_update_l2p_map_new
+	mov	w21, -1
+	bl	gc_free_src_blk
+	add	x19, x19, :lo12:.LANCHOR0
+	bl	ftl_flush
+	add	x20, x20, :lo12:.LANCHOR4
+	bl	pm_flush
+	strh	w21, [x23,80]
+	bl	ftl_ext_info_flush
+	ldr	x0, [x19,2848]
+	strh	w21, [x0,126]
+	mov	w0, 0
+	bl	ftl_info_flush
+	strb	wzr, [x20,1098]
+	bl	print_ftl_debug_info
+	b	.L3404
+.L3353:
+	adrp	x1, .LANCHOR3
+	adrp	x0, .LC0
+	add	x1, x1, :lo12:.LANCHOR3
+	mov	w2, 2075
+	add	x1, x1, 808
+	add	x0, x0, :lo12:.LC0
+	bl	printk
+	b	.L3373
+.L3404:
+	sub	sp, x29, #16
+	mov	w0, 16
+	ldp	x19, x20, [sp,32]
+	ldp	x21, x22, [sp,48]
+	ldp	x23, x24, [sp,64]
+	ldp	x25, x26, [sp,80]
+	ldp	x27, x28, [sp,96]
+	ldp	x29, x30, [sp,16]
+	add	sp, sp, 112
+	ret
+	.size	zftl_do_gc, .-zftl_do_gc
+	.align	2
+	.global	zftl_write
+	.type	zftl_write, %function
+zftl_write:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	mov	w19, w0
+	adrp	x0, .LANCHOR2
+	stp	x23, x24, [sp,48]
+	stp	x25, x26, [sp,64]
+	ldr	w0, [x0,#:lo12:.LANCHOR2]
+	mov	w23, w2
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	mov	w28, w1
+	mov	x25, x3
+	tbz	x0, 12, .L3428
+	adrp	x0, .LC287
+	mov	w1, w19
+	add	x0, x0, :lo12:.LC287
+	mov	w2, w28
+	mov	w3, w23
+	bl	printk
+.L3428:
+	cbnz	w19, .L3429
+	adrp	x0, .LANCHOR0+4
+	mov	w19, 24576
+	ldr	w2, [x0,#:lo12:.LANCHOR0+4]
+	b	.L3430
+.L3429:
+	cmp	w19, 3
+	mov	w0, -1
+	bhi	.L3431
+	lsl	w19, w19, 13
+	mov	w2, 8192
+.L3430:
+	add	w1, w28, w23
+	mov	w0, -1
+	cmp	w1, w2
+	bhi	.L3431
+	add	w28, w19, w28
+	adrp	x19, .LANCHOR0
+	add	x0, x19, :lo12:.LANCHOR0
+	sub	w22, w23, #1
+	add	w22, w22, w28
+	add	w26, w28, w23
+	ldrb	w0, [x0,2816]
+	udiv	w24, w28, w0
+	mov	w21, w24
+	udiv	w22, w22, w0
+	sub	w20, w22, w24
+	add	w20, w20, 1
+.L3432:
+	cbz	w20, .L3451
+	mov	w0, 0
+	bl	buf_alloc
+	mov	x27, x0
+	cbnz	x0, .L3433
+	bl	ftl_write_commit
+	b	.L3432
+.L3433:
+	strb	wzr, [x0,57]
+	add	x0, x19, :lo12:.LANCHOR0
+	cmp	w21, w24
+	ldrb	w4, [x0,2816]
+	cset	w0, eq
+	strb	w4, [x27,56]
+	cmp	w21, w22
+	beq	.L3435
+	cbz	w0, .L3436
+	b	.L3445
+.L3435:
+	cbz	w0, .L3437
+.L3445:
+	udiv	w0, w28, w4
+	msub	w0, w0, w4, w28
+	uxtb	w0, w0
+	strb	w0, [x27,57]
+	sub	w4, w4, w0
+	uxtb	w4, w4
+	cmp	w4, w23
+	csel	w4, w23, w4, hi
+	b	.L3449
+.L3437:
+	msub	w4, w4, w21, w26
+.L3449:
+	strb	w4, [x27,56]
+.L3436:
+	ldrb	w1, [x27,57]
+	sub	w20, w20, #1
+	ldr	x0, [x27,8]
+	ldrb	w2, [x27,56]
+	add	x0, x0, x1, lsl 9
+	mov	x1, x25
+	lsl	w2, w2, 9
+	bl	ftl_memcpy
+	str	w21, [x27,36]
+	add	x0, x19, :lo12:.LANCHOR0
+	add	w21, w21, 1
+	ldr	x1, [x0,2848]
+	ldr	w0, [x1,8]
+	add	w2, w0, 1
+	str	w2, [x1,8]
+	str	w0, [x27,32]
+	mov	x0, x27
+	bl	ftl_write_buf
+	ldrb	w0, [x27,56]
+	add	x25, x25, x0, lsl 9
+	b	.L3432
+.L3451:
+	bl	ftl_write_commit
+	mov	w0, w20
+.L3450:
+	mov	w1, 1
+	bl	zftl_do_gc
+	add	x1, x19, :lo12:.LANCHOR0
+	ldrh	w2, [x1,2828]
+	ldrh	w0, [x1,2832]
+	add	w0, w2, w0
+	cmp	w0, 7
+	bgt	.L3452
+	mov	w0, 0
+	b	.L3450
+.L3452:
+	bl	timer_get_time
+	adrp	x1, .LANCHOR8+3584
+	str	w0, [x1,#:lo12:.LANCHOR8+3584]
+	mov	w0, 0
+.L3431:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	zftl_write, .-zftl_write
+	.align	2
+	.global	zftl_vendor_write
+	.type	zftl_vendor_write, %function
+zftl_vendor_write:
+	stp	x29, x30, [sp, -16]!
+	mov	w4, w1
+	mov	x3, x2
+	add	x29, sp, 0
+	add	w1, w0, 512
+	mov	w2, w4
+	mov	w0, 2
+	bl	zftl_write
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_vendor_write, .-zftl_vendor_write
+	.align	2
+	.global	zftl_sys_write
+	.type	zftl_sys_write, %function
+zftl_sys_write:
+	stp	x29, x30, [sp, -16]!
+	mov	w5, w0
+	mov	w4, w1
+	add	x29, sp, 0
+	mov	x3, x2
+	mov	w1, w5
+	mov	w2, w4
+	mov	w0, 2
+	bl	zftl_write
+	ldp	x29, x30, [sp], 16
+	ret
+	.size	zftl_sys_write, .-zftl_sys_write
+	.align	2
+	.global	id_block_prog_msb_ff_data
+	.type	id_block_prog_msb_ff_data, %function
+id_block_prog_msb_ff_data:
+	stp	x29, x30, [sp, -96]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	stp	x23, x24, [sp,48]
+	uxtb	w23, w0
+	add	x0, x21, :lo12:.LANCHOR0
+	stp	x19, x20, [sp,16]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	adrp	x20, .LANCHOR4
+	uxth	w19, w2
+	ldr	x0, [x0,88]
+	ldrb	w2, [x0,19]
+	add	x0, x20, :lo12:.LANCHOR4
+	ldrb	w0, [x0,1232]
+	cbnz	w0, .L3455
+	sub	w0, w2, #5
+	uxtb	w0, w0
+	cmp	w0, 2
+	bls	.L3457
+	cmp	w2, 68
+	beq	.L3457
+	sub	w2, w2, #19
+	and	w2, w2, -17
+	uxtb	w2, w2
+	cbnz	w2, .L3455
+.L3457:
+	adrp	x24, .LC288
+	mov	w25, w1
+	add	x24, x24, :lo12:.LC288
+	add	x20, x20, :lo12:.LANCHOR4
+	mov	w27, 65535
+.L3459:
+	add	x28, x21, :lo12:.LANCHOR0
+	ldr	x0, [x28,88]
+	ldrh	w0, [x0,10]
+	cmp	w0, w19
+	bls	.L3455
+	add	x22, x20, 36
+	add	w26, w19, w25
+	mov	x0, x24
+	mov	w1, w19
+	mov	w2, w26
+	ldrh	w3, [x22,w19,sxtw 1]
+	bl	printk
+	ldrh	w0, [x22,w19,sxtw 1]
+	cmp	w0, w27
+	bne	.L3455
+	ldr	x0, [x20,1160]
+	mov	w1, 255
+	mov	w2, 16384
+	add	w19, w19, 1
+	bl	ftl_memset
+	uxth	w19, w19
+	ldr	x4, [x28,88]
+	mov	w0, w23
+	ldr	x2, [x20,1160]
+	mov	w1, w26
+	ldrb	w4, [x4,9]
+	mov	x3, x2
+	bl	flash_prog_page
+	b	.L3459
+.L3455:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 96
+	ret
+	.size	id_block_prog_msb_ff_data, .-id_block_prog_msb_ff_data
+	.align	2
+	.global	write_idblock
+	.type	write_idblock, %function
+write_idblock:
+	stp	x29, x30, [sp, -208]!
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR0
+	stp	x19, x20, [sp,16]
+	mov	w19, w0
+	add	x0, x21, :lo12:.LANCHOR0
+	stp	x25, x26, [sp,64]
+	stp	x23, x24, [sp,48]
+	stp	x27, x28, [sp,80]
+	mov	x26, x1
+	ldr	x0, [x0,88]
+	ldrb	w23, [x0,9]
+	ldrh	w20, [x0,10]
+	mov	w0, 59392
+	movk	w0, 0x3, lsl 16
+	bl	ftl_malloc
+	mov	x22, x0
+	mov	w0, -1
+	cbz	x22, .L3495
+	add	w19, w19, 511
+	add	x2, x26, 253952
+	lsr	w19, w19, 9
+	add	x2, x2, 2044
+	mov	w0, 0
+	mov	w24, 63999
+	mov	w3, 4097
+.L3466:
+	ldr	w1, [x2]
+	cbnz	w1, .L3463
+	ldr	w1, [x26,w0,uxtw 2]
+	add	w0, w0, 1
+	cmp	w0, w3
+	sub	w24, w24, #1
+	csel	w0, w0, wzr, cc
+	str	w1, [x2],-4
+	cmp	w24, 4096
+	bne	.L3466
+	b	.L3465
+.L3463:
+	adrp	x0, .LC289
+	mov	w2, w24
+	add	x0, x0, :lo12:.LC289
+	bl	printk
+.L3465:
+	add	x0, x21, :lo12:.LANCHOR0
+	add	w1, w19, 128
+	mul	w20, w20, w23
+	mov	w25, 0
+	ldr	x2, [x0,88]
+	ldrh	w0, [x2,10]
+	ldrb	w19, [x2,12]
+	mov	w2, w24
+	lsl	w0, w0, 2
+	sdiv	w19, w0, w19
+	mov	w0, 500
+	cmp	w19, 500
+	csel	w19, w19, w0, ls
+	adrp	x0, .LC290
+	cmp	w19, w1
+	add	x0, x0, :lo12:.LC290
+	csel	w19, w19, w1, ls
+	ldr	w1, [x26,w24,uxtw 2]
+	mov	w3, w19
+	bl	printk
+	str	w25, [x29,140]
+	uxth	w0, w20
+	str	w0, [x29,116]
+.L3485:
+	mov	w1, 0
+	mov	x0, x22
+	mov	w2, 512
+	add	x24, x21, :lo12:.LANCHOR0
+	bl	ftl_memset
+	ldr	x0, [x24,192]
+	ldr	w1, [x29,140]
+	add	x0, x0, x1, uxtw
+	ldrb	w20, [x0,32]
+	cmp	w20, 255
+	beq	.L3467
+	ldr	w0, [x29,116]
+	mul	w20, w20, w0
+	ldr	x0, [x24,88]
+	ldrb	w27, [x0,9]
+	ldrh	w23, [x0,10]
+	ldrb	w0, [x24,184]
+	udiv	w1, w20, w27
+	str	w0, [x29,112]
+	mul	w23, w27, w23
+	mov	w0, 0
+	strb	wzr, [x24,184]
+	uxth	w23, w23
+	bl	flash_erase_block
+	udiv	w0, w20, w23
+	msub	w0, w0, w23, w20
+	str	w0, [x29,136]
+	sub	w28, w20, w0
+	cmp	w20, w28
+	bne	.L3489
+	ldrb	w0, [x21,#:lo12:.LANCHOR0]
+	cmp	w0, 9
+	bne	.L3489
+	adrp	x0, .LANCHOR4
+	mov	w1, 0
+	add	x0, x0, :lo12:.LANCHOR4
+	mov	w2, 1024
+	ldr	x3, [x0,1216]
+	str	x3, [x29,128]
+	mov	x0, x3
+	bl	ftl_memset
+	ldr	x3, [x29,128]
+	mov	w0, 18766
+	movk	w0, 0x464e, lsl 16
+	mov	w1, 12
+	cmp	w27, 8
+	str	w0, [x3]
+	str	w1, [x3,4]
+	str	wzr, [x3,12]
+	ldr	x2, [x24,88]
+	ldrb	w0, [x2,29]
+	strb	w0, [x3,16]
+	mov	w0, 4
+	strb	w0, [x3,17]
+	ldrh	w0, [x2,10]
+	ldrb	w2, [x2,12]
+	strb	wzr, [x3,20]
+	strh	wzr, [x3,22]
+	sdiv	w0, w0, w2
+	mov	w2, 16
+	strh	w0, [x3,18]
+	mov	w0, 70
+	csel	w0, w0, w2, hi
+	strb	w0, [x3,21]
+	add	x0, x3, 12
+	bl	js_hash
+	ldr	x3, [x29,128]
+	str	w0, [x3,8]
+	sub	w0, w19, #4
+	str	w0, [x29,128]
+	b	.L3468
+.L3489:
+	str	w19, [x29,128]
+	mov	x3, 0
+.L3468:
+	str	x26, [x29,120]
+	mov	w24, 0
+	add	x23, x21, :lo12:.LANCHOR0
+.L3470:
+	cmp	w24, w19
+	bcs	.L3503
+	ldr	w0, [x29,136]
+	adrp	x2, .LANCHOR4
+	add	x2, x2, :lo12:.LANCHOR4
+	add	w4, w24, w0
+	add	x0, x23, 212
+	ubfx	x4, x4, 2, 16
+	add	w1, w4, 1
+	ldrb	w2, [x2,1232]
+	ldrh	w0, [x0,w1,sxtw 1]
+	cbz	w2, .L3472
+	ldrb	w6, [x23,208]
+	lsl	w0, w1, 1
+	cmp	w6, wzr
+	csel	w0, w0, w1, ne
+.L3472:
+	ldrb	w1, [x23]
+	cmp	w1, 9
+	beq	.L3502
+	sub	w0, w0, #1
+	lsl	w0, w0, 2
+.L3502:
+	str	w0, [x29,144]
+	mov	w0, 61424
+	str	w0, [x29,148]
+	add	x0, x23, 212
+	ldrh	w0, [x0,w4,sxtw 1]
+	cbnz	w2, .L3476
+	mov	w4, w0
+	b	.L3477
+.L3476:
+	ldrb	w1, [x23,208]
+	lsl	w0, w4, 1
+	cmp	w1, wzr
+	csel	w4, w0, w4, ne
+.L3477:
+	mul	w0, w4, w27
+	cbnz	x3, .L3478
+	ldr	x1, [x29,120]
+	add	w0, w0, w28
+	add	x2, x29, 144
+	str	x4, [x29,104]
+	bl	fw_flash_page_prog.constprop.31
+	adrp	x0, .LANCHOR4
+	ldr	x4, [x29,104]
+	add	x0, x0, :lo12:.LANCHOR4
+	ldrb	w0, [x0,1232]
+	cbnz	w0, .L3479
+	udiv	w1, w28, w27
+	add	w2, w4, 1
+	bl	id_block_prog_msb_ff_data
+.L3479:
+	ldr	x0, [x29,120]
+	add	x0, x0, 2048
+	str	x0, [x29,120]
+	b	.L3480
+.L3478:
+	add	w0, w0, w28
+	mov	x1, x3
+	add	x2, x29, 144
+	bl	fw_flash_page_prog.constprop.31
+.L3480:
+	add	w24, w24, 4
+	mov	x3, 0
+	uxth	w24, w24
+	b	.L3470
+.L3503:
+	add	x0, x21, :lo12:.LANCHOR0
+	ldrb	w1, [x29,112]
+	mov	x2, x22
+	strb	w1, [x0,184]
+	mov	w0, w20
+	ldr	w1, [x29,128]
+	bl	id_block_read_data.constprop.30
+	ldr	w0, [x29,128]
+	lsl	w23, w0, 7
+	mov	x0, 0
+.L3482:
+	cmp	w23, w0
+	bls	.L3504
+	ldr	w2, [x22,x0,lsl 2]
+	add	x0, x0, 1
+	add	x1, x26, x0, lsl 2
+	ldr	w1, [x1,-4]
+	cmp	w2, w1
+	beq	.L3482
+	mov	x0, x22
+	mov	w1, 0
+	mov	w2, 512
+	bl	ftl_memset
+	mov	w1, w20
+	mov	w0, 0
+	bl	flash_erase_block
+	b	.L3467
+.L3504:
+	add	w25, w25, 1
+	cmp	w25, 5
+	bhi	.L3486
+.L3467:
+	ldr	w0, [x29,140]
+	add	w0, w0, 1
+	str	w0, [x29,140]
+	cmp	w0, 4
+	bne	.L3485
+.L3486:
+	mov	x0, x22
+	bl	ftl_free
+	cmp	w25, wzr
+	csetm	w0, eq
+.L3495:
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 208
+	ret
+	.size	write_idblock, .-write_idblock
+	.align	2
+	.global	CRC_32
+	.type	CRC_32, %function
+CRC_32:
+	mov	x2, 0
+	adrp	x3, .LANCHOR2
+	mov	x5, x0
+	add	x3, x3, :lo12:.LANCHOR2
+	mov	w0, w2
+.L3506:
+	cmp	w1, w2
+	bls	.L3508
+	ldrb	w4, [x5,x2]
+	add	x6, x3, 2296
+	add	x2, x2, 1
+	eor	w4, w4, w0, lsr 24
+	ldr	w4, [x6,w4,uxtw 2]
+	eor	w0, w4, w0, lsl 8
+	b	.L3506
+.L3508:
+	ret
+	.size	CRC_32, .-CRC_32
+	.align	2
+	.global	rknand_sys_storage_ioctl
+	.type	rknand_sys_storage_ioctl, %function
+rknand_sys_storage_ioctl:
+	sub	sp, sp, #528
+	mov	w0, 29187
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	stp	x29, x30, [sp, -48]!
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	w19, w1
+	mov	x20, x2
+	beq	.L3511
+	mov	w0, 29187
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3512
+	mov	w0, 25726
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3513
+	mov	w0, 25726
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3514
+	mov	w0, 25601
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3515
+	mov	w0, 25601
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3516
+	mov	w0, 25364
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bne	.L3572
+	bl	rknand_dev_flush
+	b	.L3606
+.L3516:
+	mov	w0, 25602
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3518
+	mov	w0, 25603
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3519
+	b	.L3572
+.L3514:
+	mov	w0, 27688
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3520
+	mov	w0, 27688
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3521
+	mov	w0, 25727
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3522
+	b	.L3572
+.L3521:
+	mov	w0, 27698
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3520
+	mov	w0, 27708
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3520
+	b	.L3572
+.L3512:
+	mov	w0, 29267
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3523
+	mov	w0, 29267
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3524
+	mov	w0, 29189
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3525
+	mov	w0, 29189
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bcc	.L3526
+	mov	w0, 29210
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3527
+	mov	w0, 29266
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3528
+	b	.L3572
+.L3524:
+	mov	w0, 30225
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3529
+	mov	w0, 30225
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	bhi	.L3530
+	mov	w0, 29268
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3531
+	mov	w0, 30224
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3532
+	b	.L3572
+.L3530:
+	mov	w0, 30226
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3532
+	mov	w0, 30227
+	movk	w0, 0x4004, lsl 16
+	cmp	w1, w0
+	beq	.L3529
+	b	.L3572
+.L3526:
+	adrp	x0, .LC291
+	add	x0, x0, :lo12:.LC291
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x19, x0
+	cbnz	x0, .L3533
+.L3538:
+	mov	x0, -12
+	b	.L3510
+.L3533:
+	mov	x1, x20
+	mov	x2, 512
+	bl	rk_copy_from_user
+	cbnz	x0, .L3613
+	adrp	x0, .LC293
+	ldr	w1, [x19]
+	ldr	w2, [x19,4]
+	add	x0, x0, :lo12:.LC293
+	bl	printk
+	ldr	w0, [x19,4]
+	str	w0, [x29,52]
+	cmp	w0, 8
+	bhi	.L3610
+	bl	rknand_device_lock
+	ldr	w1, [x29,52]
+	mov	x2, x19
+	ldr	w0, [x19]
+	bl	id_block_read_data.constprop.30
+	bl	rknand_device_unlock
+	ldr	w2, [x29,52]
+	mov	x0, x20
+	mov	x1, x19
+	ubfiz	x2, x2, 9, 23
+	bl	rk_copy_to_user
+	cbz	x0, .L3616
+	adrp	x0, .LC294
+	add	x0, x0, :lo12:.LC294
+.L3608:
+	bl	printk
+.L3610:
+	mov	x0, x19
+.L3611:
+	bl	ftl_free
+.L3609:
+	mov	x0, -14
+	b	.L3510
+.L3525:
+	adrp	x0, .LC295
+	add	x0, x0, :lo12:.LC295
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x19, x0
+	cbz	x0, .L3538
+	mov	x1, x20
+	mov	x2, 4096
+	bl	rk_copy_from_user
+	cbnz	x0, .L3613
+	ldr	w1, [x19]
+	adrp	x0, .LC296
+	ldr	w2, [x19,4]
+	add	x0, x0, :lo12:.LC296
+	bl	printk
+	adrp	x0, .LANCHOR8
+	add	x21, x0, :lo12:.LANCHOR8
+	mov	x20, x0
+	ldr	x1, [x21,3592]
+	cbnz	x1, .L3540
+	mov	w0, 260096
+	bl	ftl_malloc
+	str	x0, [x21,3592]
+	cbz	x0, .L3610
+.L3540:
+	ldr	w2, [x19,4]
+	cmp	w2, 4088
+	bhi	.L3610
+	ldr	w0, [x19]
+	mov	w1, 55296
+	movk	w1, 0x3, lsl 16
+	cmp	w0, w1
+	bhi	.L3610
+	add	x20, x20, :lo12:.LANCHOR8
+	uxtw	x2, w2
+	ldr	x1, [x20,3592]
+	add	x0, x1, x0, uxtw
+	add	x1, x19, 8
+	bl	memcpy
+.L3616:
+	mov	x0, x19
+	bl	ftl_free
+	b	.L3606
+.L3528:
+	adrp	x0, .LC297
+	add	x0, x0, :lo12:.LC297
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x19, x0
+	cbz	x0, .L3538
+	mov	x1, x20
+	mov	x2, 28
+	bl	rk_copy_from_user
+	cbz	x0, .L3542
+.L3613:
+	adrp	x0, .LC292
+	add	x0, x0, :lo12:.LC292
+	b	.L3608
+.L3542:
+	ldr	w1, [x19]
+	adrp	x0, .LC298
+	ldr	w2, [x19,4]
+	add	x0, x0, :lo12:.LC298
+	bl	printk
+	ldr	w1, [x19]
+	mov	w0, 59392
+	movk	w0, 0x3, lsl 16
+	cmp	w1, w0
+	bhi	.L3610
+	adrp	x20, .LANCHOR8
+	add	x20, x20, :lo12:.LANCHOR8
+	ldr	x0, [x20,3592]
+	cbz	x0, .L3610
+	bl	CRC_32
+	ldr	w1, [x19,4]
+	cmp	w1, w0
+	beq	.L3545
+	mov	x0, x19
+	bl	ftl_free
+	mov	x0, -2
+	b	.L3510
+.L3545:
+	bl	rknand_device_lock
+	ldr	x1, [x20,3592]
+	add	x2, x19, 8
+	ldr	w0, [x19]
+	bl	write_idblock
+	bl	rknand_device_unlock
+	ldr	x0, [x20,3592]
+	bl	ftl_free
+	str	xzr, [x20,3592]
+	b	.L3616
+.L3527:
+	adrp	x0, .LC299
+	add	x0, x0, :lo12:.LC299
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x21, x0
+	cbz	x0, .L3538
+	bl	ReadFlashInfo
+	mov	x0, x20
+	mov	x1, x21
+	mov	x2, 11
+	b	.L3618
+.L3511:
+	adrp	x0, .LC300
+	add	x0, x0, :lo12:.LC300
+	bl	printk
+	bl	nand_blk_add_whole_disk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x21, x0
+	cbz	x0, .L3538
+	mov	w1, 0
+	mov	w2, 64
+	bl	ftl_memset
+	mov	x0, x20
+	mov	x1, x21
+	mov	x2, 64
+	b	.L3618
+.L3523:
+	adrp	x0, .LC301
+	add	x0, x0, :lo12:.LC301
+	bl	printk
+	adrp	x0, .LANCHOR8+3600
+	add	x1, x29, 52
+	mov	x2, 4
+	ldr	x0, [x0,#:lo12:.LANCHOR8+3600]
+	ldr	w0, [x0,20]
+	str	w0, [x29,52]
+	mov	x0, x20
+.L3601:
+	bl	rk_copy_to_user
+	cbnz	x0, .L3609
+	b	.L3606
+.L3531:
+	adrp	x0, .LC302
+	add	x0, x0, :lo12:.LC302
+	bl	printk
+	mov	w0, 4096
+	bl	ftl_malloc
+	mov	x21, x0
+	cbz	x0, .L3538
+	bl	rknand_device_lock
+	mov	w1, 264
+	mov	w2, 2
+	mov	x3, x21
+	mov	w0, 16
+	bl	FtlRead
+	bl	rknand_device_unlock
+	mov	x0, x20
+	mov	x1, x21
+	mov	x2, 1024
+.L3618:
+	bl	rk_copy_to_user
+	mov	x19, x0
+	mov	x0, x21
+	cbnz	x19, .L3611
+	bl	ftl_free
+	b	.L3537
+.L3515:
+	adrp	x0, .LC303
+	add	x0, x0, :lo12:.LC303
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	mov	x19, x0
+	cbz	x0, .L3550
+.L3555:
+	adrp	x0, .LC292
+	add	x0, x0, :lo12:.LC292
+	bl	printk
+	b	.L3609
+.L3550:
+	ldr	w1, [x29,56]
+	mov	w0, 21060
+	movk	w0, 0x4b4d, lsl 16
+	cmp	w1, w0
+	beq	.L3551
+.L3552:
+	mov	x19, -1
+	b	.L3537
+.L3551:
+	ldr	w0, [x29,60]
+	cmp	w0, 512
+	bhi	.L3552
+	adrp	x21, .LANCHOR8
+	add	x0, x29, 56
+	add	x21, x21, :lo12:.LANCHOR8
+	mov	x2, 512
+	ldr	x1, [x21,3600]
+	bl	memcpy
+	ldr	w1, [x21,3608]
+	mov	w0, 5161
+	movk	w0, 0xc059, lsl 16
+	cmp	w1, w0
+	beq	.L3553
+	add	x0, x29, 120
+	mov	w1, w19
+	mov	x2, 128
+	str	w19, [x29,64]
+	str	w19, [x29,68]
+	bl	memset
+.L3553:
+	add	x0, x29, 312
+	mov	w1, 0
+	mov	x2, 256
+	str	wzr, [x29,72]
+	bl	memset
+	b	.L3615
+.L3518:
+	adrp	x0, .LC304
+	add	x0, x0, :lo12:.LC304
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3555
+	ldr	w1, [x29,56]
+	mov	w0, 21060
+	movk	w0, 0x4b4d, lsl 16
+	cmp	w1, w0
+	bne	.L3552
+	ldr	w0, [x29,60]
+	cmp	w0, 512
+	bhi	.L3552
+	adrp	x1, .LANCHOR8
+	mov	w2, 5161
+	add	x1, x1, :lo12:.LANCHOR8
+	movk	w2, 0xc059, lsl 16
+	mov	x0, -2
+	ldr	w3, [x1,3608]
+	cmp	w3, w2
+	bne	.L3510
+	ldr	w2, [x29,68]
+	mov	x0, -3
+	sub	w3, w2, #1
+	cmp	w3, 127
+	bhi	.L3510
+	ldr	x19, [x1,3600]
+	add	x1, x29, 120
+	add	x0, x19, 64
+	str	w2, [x19,12]
+	ldr	w2, [x29,68]
+	bl	memcpy
+	mov	w0, 1
+	mov	x1, x19
+	b	.L3607
+.L3522:
+	adrp	x0, .LC305
+	add	x0, x0, :lo12:.LC305
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3555
+	ldr	w1, [x29,56]
+	mov	w0, 17476
+	movk	w0, 0x4253, lsl 16
+	cmp	w1, w0
+	bne	.L3552
+	ldr	w0, [x29,60]
+	cmp	w0, 512
+	bhi	.L3552
+	adrp	x19, .LANCHOR8
+	add	x0, x19, :lo12:.LANCHOR8
+	ldr	w1, [x0,3612]
+	cbnz	w1, .L3556
+.L3559:
+	mov	x0, 0
+	b	.L3510
+.L3556:
+	ldr	x1, [x0,3616]
+	mov	w2, 22867
+	movk	w2, 0x4453, lsl 16
+	ldr	w3, [x1]
+	cmp	w3, w2
+	beq	.L3557
+	mov	w2, 22867
+	movk	w2, 0x4453, lsl 16
+	str	w2, [x1]
+	mov	w2, 504
+	ldr	x1, [x0,3616]
+	str	w2, [x1,4]
+	ldr	x0, [x0,3616]
+	str	wzr, [x0,8]
+	str	wzr, [x0,12]
+.L3557:
+	add	x20, x19, :lo12:.LANCHOR8
+	mov	w0, 0
+	ldr	x1, [x20,3616]
+	str	wzr, [x1,16]
+	bl	StorageSysDataStore
+	ldr	x0, [x20,3600]
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	ldr	w2, [x0]
+	cmp	w2, w1
+	beq	.L3558
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	str	w1, [x0]
+	mov	w1, 504
+	ldr	x0, [x20,3600]
+	str	w1, [x0,4]
+	ldr	x0, [x20,3600]
+	str	wzr, [x0,8]
+.L3558:
+	add	x19, x19, :lo12:.LANCHOR8
+	mov	w1, 0
+	mov	x2, 128
+	ldr	x20, [x19,3600]
+	add	x0, x20, 64
+	str	wzr, [x20,12]
+	bl	memset
+	mov	w0, 1
+	mov	x1, x20
+	bl	StorageSysDataStore
+	str	wzr, [x19,3612]
+	str	wzr, [x19,3608]
+	b	.L3606
+.L3513:
+	adrp	x0, .LC306
+	add	x0, x0, :lo12:.LC306
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3555
+	ldr	w2, [x29,56]
+	mov	w1, 20037
+	movk	w1, 0x4253, lsl 16
+	cmp	w2, w1
+	bne	.L3552
+	ldr	w1, [x29,60]
+	cmp	w1, 512
+	bhi	.L3552
+	adrp	x19, .LANCHOR8
+	add	x1, x19, :lo12:.LANCHOR8
+	ldr	w2, [x1,3612]
+	cmp	w2, 1
+	beq	.L3559
+	ldr	x2, [x1,3616]
+	mov	w3, 22867
+	movk	w3, 0x4453, lsl 16
+	ldr	w4, [x2]
+	cmp	w4, w3
+	beq	.L3560
+	mov	w3, 22867
+	movk	w3, 0x4453, lsl 16
+	str	w3, [x2]
+	mov	w3, 504
+	ldr	x2, [x1,3616]
+	str	w3, [x2,4]
+	ldr	x1, [x1,3616]
+	str	w0, [x1,8]
+	str	w0, [x1,12]
+.L3560:
+	add	x20, x19, :lo12:.LANCHOR8
+	mov	w0, 1
+	ldr	x1, [x20,3616]
+	str	w0, [x1,16]
+	mov	w0, 0
+	bl	StorageSysDataStore
+	ldr	x0, [x20,3600]
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	ldr	w2, [x0]
+	cmp	w2, w1
+	beq	.L3561
+	mov	w1, 21060
+	movk	w1, 0x4b4d, lsl 16
+	str	w1, [x0]
+	mov	w1, 504
+	ldr	x0, [x20,3600]
+	str	w1, [x0,4]
+	ldr	x0, [x20,3600]
+	str	wzr, [x0,8]
+.L3561:
+	add	x19, x19, :lo12:.LANCHOR8
+	mov	w1, 0
+	mov	x2, 128
+	ldr	x20, [x19,3600]
+	add	x0, x20, 64
+	str	wzr, [x20,12]
+	bl	memset
+	mov	w0, 1
+	mov	x1, x20
+	bl	StorageSysDataStore
+	mov	w0, 1
+	str	w0, [x19,3612]
+	b	.L3606
+.L3519:
+	adrp	x0, .LC307
+	add	x0, x0, :lo12:.LC307
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3555
+	ldr	w1, [x29,56]
+	mov	w0, 20051
+	movk	w0, 0x4144, lsl 16
+	cmp	w1, w0
+	bne	.L3552
+	ldr	w2, [x29,60]
+	cmp	w2, 512
+	bhi	.L3552
+	adrp	x1, .LANCHOR8
+	add	x0, x29, 64
+	add	x1, x1, :lo12:.LANCHOR8
+	uxtw	x2, w2
+	add	x1, x1, 3624
+	b	.L3614
+.L3520:
+	mov	w0, 27698
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	bne	.L3562
+	adrp	x0, .LC308
+	add	x0, x0, :lo12:.LC308
+	b	.L3604
+.L3562:
+	mov	w0, 27708
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	bne	.L3564
+	adrp	x0, .LC309
+	add	x0, x0, :lo12:.LC309
+	b	.L3604
+.L3564:
+	adrp	x0, .LC310
+	add	x0, x0, :lo12:.LC310
+.L3604:
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3555
+	ldr	w1, [x29,56]
+	mov	w0, 17227
+	movk	w0, 0x4c4f, lsl 16
+	cmp	w1, w0
+	bne	.L3609
+	mov	w0, 27708
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	bne	.L3565
+	adrp	x0, .LANCHOR8+3600
+	add	x1, x29, 56
+	mov	x2, 16
+	ldr	x0, [x0,#:lo12:.LANCHOR8+3600]
+	ldr	w0, [x0,20]
+	str	w0, [x29,60]
+	strb	w0, [x29,64]
+	mov	x0, x20
+	bl	rk_copy_to_user
+	cbz	x0, .L3510
+	b	.L3609
+.L3565:
+	adrp	x0, .LANCHOR9
+	add	x20, x0, :lo12:.LANCHOR9
+	ldr	w1, [x20,-216]
+	cmp	w1, 10
+	bhi	.L3609
+	adrp	x1, .LANCHOR8+3600
+	ldr	w2, [x29,60]
+	ldr	x1, [x1,#:lo12:.LANCHOR8+3600]
+	ldr	w3, [x1,24]
+	cmp	w3, w2
+	beq	.L3566
+	cbz	w3, .L3566
+	adrp	x0, .LC311
+	mov	w1, w2
+	add	x0, x0, :lo12:.LC311
+	bl	printk
+	ldr	w0, [x20,-216]
+	add	w0, w0, 1
+	str	w0, [x20,-216]
+	b	.L3609
+.L3566:
+	add	x0, x0, :lo12:.LANCHOR9
+	str	wzr, [x0,-216]
+	mov	w0, 27698
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	bne	.L3567
+	str	wzr, [x1,20]
+	str	wzr, [x1,24]
+	b	.L3568
+.L3567:
+	mov	w0, 1
+	str	w2, [x1,24]
+	str	w0, [x1,20]
+.L3568:
+	mov	w0, 1
+	mov	x19, -2
+	bl	StorageSysDataStore
+	cmn	w0, #1
+	bne	.L3606
+	b	.L3537
+.L3532:
+	adrp	x0, .LC312
+	add	x0, x0, :lo12:.LC312
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3555
+	ldr	w1, [x29,56]
+	mov	w0, 17750
+	movk	w0, 0x444e, lsl 16
+	cmp	w1, w0
+	bne	.L3552
+	ldr	w2, [x29,60]
+	cmp	w2, 504
+	bhi	.L3552
+	mov	w0, 30224
+	adrp	x1, .LANCHOR9
+	movk	w0, 0x4004, lsl 16
+	uxtw	x2, w2
+	cmp	w19, w0
+	add	x1, x1, :lo12:.LANCHOR9
+	add	x0, x29, 64
+	bne	.L3569
+	ldr	x1, [x1,-208]
+	b	.L3605
+.L3569:
+	ldr	x1, [x1,-200]
+.L3605:
+	add	x1, x1, 8
+.L3614:
+	bl	memcpy
+.L3615:
+	mov	x0, x20
+	add	x1, x29, 56
+	mov	x2, 520
+	b	.L3601
+.L3529:
+	adrp	x0, .LC313
+	add	x0, x0, :lo12:.LC313
+	bl	printk
+	add	x0, x29, 56
+	mov	x1, x20
+	mov	x2, 520
+	bl	rk_copy_from_user
+	cbnz	x0, .L3555
+	ldr	w1, [x29,56]
+	mov	w0, 17750
+	movk	w0, 0x444e, lsl 16
+	cmp	w1, w0
+	bne	.L3552
+	ldr	w2, [x29,60]
+	cmp	w2, 504
+	bhi	.L3552
+	mov	w0, 30225
+	add	w2, w2, 8
+	movk	w0, 0x4004, lsl 16
+	cmp	w19, w0
+	adrp	x19, .LANCHOR9
+	add	x19, x19, :lo12:.LANCHOR9
+	bne	.L3571
+	ldr	x0, [x19,-208]
+	add	x1, x29, 56
+	bl	memcpy
+	mov	w0, 2
+	ldr	x1, [x19,-208]
+	b	.L3607
+.L3571:
+	ldr	x0, [x19,-200]
+	add	x1, x29, 56
+	bl	memcpy
+	ldr	x1, [x19,-200]
+	mov	w0, 3
+.L3607:
+	bl	StorageSysDataStore
+	uxtw	x19, w0
+	b	.L3537
+.L3606:
+	mov	x19, 0
+.L3537:
+	adrp	x0, .LC314
+	mov	x1, x19
+	add	x0, x0, :lo12:.LC314
+	bl	printk
+	mov	x0, x19
+	b	.L3510
+.L3572:
+	mov	x0, -22
+.L3510:
+	ldp	x19, x20, [sp,16]
+	ldr	x21, [sp,32]
+	ldp	x29, x30, [sp], 48
+	add	sp, sp, 528
+	ret
+	.size	rknand_sys_storage_ioctl, .-rknand_sys_storage_ioctl
+	.align	2
+	.global	rk_ftl_storage_sys_init
+	.type	rk_ftl_storage_sys_init, %function
+rk_ftl_storage_sys_init:
+	stp	x29, x30, [sp, -64]!
+	adrp	x0, .LANCHOR7+3296
+	mov	w2, 512
+	add	x29, sp, 0
+	stp	x21, x22, [sp,32]
+	adrp	x21, .LANCHOR8
+	ldr	x1, [x0,#:lo12:.LANCHOR7+3296]
+	stp	x19, x20, [sp,16]
+	add	x19, x21, :lo12:.LANCHOR8
+	adrp	x20, .LANCHOR9
+	str	x23, [sp,48]
+	add	x23, x20, :lo12:.LANCHOR9
+	add	x0, x1, 512
+	str	x0, [x19,3600]
+	add	x0, x1, 1024
+	str	x1, [x19,3616]
+	add	x1, x1, 1536
+	str	x0, [x23,-208]
+	add	x0, x19, 3624
+	str	x1, [x23,-200]
+	str	xzr, [x19,3592]
+	bl	ftl_memcpy
+	ldr	x22, [x19,3616]
+	str	wzr, [x23,-216]
+	str	wzr, [x19,3608]
+	ldr	w0, [x22,16]
+	ldr	w23, [x22,508]
+	str	w0, [x19,3612]
+	cbz	w23, .L3621
+	mov	x0, x22
+	mov	w1, 508
+	bl	js_hash
+	cmp	w23, w0
+	beq	.L3621
+	adrp	x0, .LC315
+	str	wzr, [x22,16]
+	add	x0, x0, :lo12:.LC315
+	str	wzr, [x19,3612]
+	bl	printk
+.L3621:
+	add	x21, x21, :lo12:.LANCHOR8
+	ldr	w0, [x21,3612]
+	cbz	w0, .L3622
+	mov	w0, 5161
+	movk	w0, 0xc059, lsl 16
+	str	w0, [x21,3608]
+.L3622:
+	add	x20, x20, :lo12:.LANCHOR9
+	mov	w0, 2
+	ldr	x1, [x20,-208]
+	bl	StorageSysDataLoad
+	ldr	x1, [x20,-200]
+	mov	w0, 3
+	bl	StorageSysDataLoad
+	bl	rknand_sys_storage_init
+	ldr	x23, [sp,48]
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	rk_ftl_storage_sys_init, .-rk_ftl_storage_sys_init
+	.align	2
+	.global	StorageSysDataDeInit
+	.type	StorageSysDataDeInit, %function
+StorageSysDataDeInit:
+	mov	w0, 0
+	ret
+	.size	StorageSysDataDeInit, .-StorageSysDataDeInit
+	.align	2
+	.global	rk_ftl_vendor_storage_init
+	.type	rk_ftl_vendor_storage_init, %function
+rk_ftl_vendor_storage_init:
+	stp	x29, x30, [sp, -64]!
+	mov	w0, 65536
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	adrp	x21, .LANCHOR9
+	bl	ftl_malloc
+	add	x1, x21, :lo12:.LANCHOR9
+	mov	w19, -12
+	str	x0, [x1,-192]
+	cbz	x0, .L3631
+	mov	w23, 0
+	adrp	x24, .LC316
+	mov	w19, w23
+	mov	w22, w23
+	add	x24, x24, :lo12:.LC316
+.L3635:
+	add	x20, x21, :lo12:.LANCHOR9
+	lsl	w0, w22, 7
+	mov	w1, 128
+	ldr	x2, [x20,-192]
+	bl	FlashBootVendorRead
+	cbnz	w0, .L3632
+	ldr	x3, [x20,-192]
+	mov	x0, x24
+	add	x2, x3, 61440
+	ldr	w1, [x3]
+	ldr	w3, [x3,4]
+	ldr	w2, [x2,4092]
+	bl	printk
+	ldr	x20, [x20,-192]
+	mov	w0, 22084
+	movk	w0, 0x524b, lsl 16
+	ldr	w1, [x20]
+	cmp	w1, w0
+	bne	.L3633
+	ldr	w0, [x20,4]
+	cmp	w19, w0
+	bcs	.L3633
+	add	x1, x20, 61440
+	ldr	w1, [x1,4092]
+	cmp	w1, w0
+	csel	w23, w23, w22, ne
+	csel	w19, w19, w0, ne
+.L3633:
+	cbnz	w22, .L3643
+	mov	w22, 1
+	b	.L3635
+.L3643:
+	cbz	w19, .L3636
+	lsl	w0, w23, 7
+	mov	w1, 128
+	mov	x2, x20
+	bl	FlashBootVendorRead
+	mov	w19, w0
+	cbz	w0, .L3631
+	b	.L3632
+.L3636:
+	mov	x0, x20
+	mov	w1, w19
+	mov	x2, 65536
+	bl	memset
+	str	w22, [x20,4]
+	mov	w0, 22084
+	movk	w0, 0x524b, lsl 16
+	str	w0, [x20]
+	add	x0, x20, 61440
+	str	w22, [x0,4092]
+	mov	w0, -1032
+	strh	w19, [x20,12]
+	strh	w0, [x20,14]
+	b	.L3631
+.L3632:
+	add	x21, x21, :lo12:.LANCHOR9
+	mov	w19, -1
+	ldr	x0, [x21,-192]
+	bl	kfree
+	str	xzr, [x21,-192]
+.L3631:
+	mov	w0, w19
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	rk_ftl_vendor_storage_init, .-rk_ftl_vendor_storage_init
+	.align	2
+	.global	rk_ftl_vendor_read
+	.type	rk_ftl_vendor_read, %function
+rk_ftl_vendor_read:
+	adrp	x3, .LANCHOR9-192
+	stp	x29, x30, [sp, -32]!
+	add	x29, sp, 0
+	ldr	x5, [x3,#:lo12:.LANCHOR9-192]
+	mov	w3, -1
+	str	x19, [sp,16]
+	cbz	x5, .L3645
+	ldrh	w3, [x5,10]
+	mov	x4, 0
+.L3646:
+	cmp	w4, w3
+	mov	w6, w4
+	bcs	.L3650
+	add	x7, x5, x4, lsl 3
+	add	x4, x4, 1
+	ldrh	w7, [x7,16]
+	cmp	w7, w0
+	bne	.L3646
+	add	x6, x5, x6, uxtw 3
+	ldrh	w4, [x6,20]
+	mov	x0, x1
+	ldrh	w1, [x6,18]
+	cmp	w2, w4
+	csel	w19, w2, w4, ls
+	add	x1, x1, 1024
+	add	x1, x5, x1
+	uxtw	x2, w19
+	bl	memcpy
+	mov	w3, w19
+	b	.L3645
+.L3650:
+	mov	w3, -1
+.L3645:
+	mov	w0, w3
+	ldr	x19, [sp,16]
+	ldp	x29, x30, [sp], 32
+	ret
+	.size	rk_ftl_vendor_read, .-rk_ftl_vendor_read
+	.align	2
+	.global	rk_ftl_vendor_write
+	.type	rk_ftl_vendor_write, %function
+rk_ftl_vendor_write:
+	stp	x29, x30, [sp, -112]!
+	mov	w6, w0
+	adrp	x0, .LANCHOR9-192
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	ldr	x19, [x0,#:lo12:.LANCHOR9-192]
+	stp	x25, x26, [sp,64]
+	stp	x27, x28, [sp,80]
+	stp	x21, x22, [sp,32]
+	stp	x23, x24, [sp,48]
+	mov	w26, w2
+	mov	x28, x1
+	mov	w2, -1
+	cbz	x19, .L3652
+	add	w20, w26, 63
+	ldrh	w3, [x19,10]
+	ldrh	w23, [x19,8]
+	and	w20, w20, -64
+	mov	x2, 0
+.L3653:
+	cmp	w2, w3
+	mov	w4, w2
+	bcs	.L3668
+	add	x0, x19, x2, lsl 3
+	add	x2, x2, 1
+	ldrh	w0, [x0,16]
+	cmp	w0, w6
+	bne	.L3653
+	add	x21, x19, x4, uxtw 3
+	ldrh	w24, [x21,20]
+	add	x5, x19, 1024
+	add	w24, w24, 63
+	and	w24, w24, -64
+	cmp	w26, w24
+	bls	.L3654
+	ldrh	w0, [x19,14]
+	mov	w2, -1
+	cmp	w0, w20
+	bcc	.L3652
+	ldrh	w21, [x21,18]
+	add	w22, w3, w2
+.L3655:
+	cmp	w4, w22
+	uxtw	x3, w4
+	bcs	.L3669
+	add	x3, x19, x3, lsl 3
+	add	w25, w4, 1
+	add	x1, x19, x25, uxtw 3
+	ldrh	w0, [x1,16]
+	str	x6, [x29,96]
+	strh	w0, [x3,16]
+	str	x5, [x29,104]
+	ldrh	w0, [x1,20]
+	strh	w0, [x3,20]
+	strh	w21, [x3,18]
+	add	x0, x5, x21, uxtw
+	ldrh	w27, [x1,20]
+	ldrh	w1, [x1,18]
+	add	w27, w27, 63
+	and	w27, w27, -64
+	add	x1, x5, x1
+	and	x2, x27, 131008
+	add	w21, w21, w27
+	bl	memcpy
+	mov	w4, w25
+	ldr	x6, [x29,96]
+	ldr	x5, [x29,104]
+	b	.L3655
+.L3669:
+	add	x3, x19, x3, lsl 3
+	uxth	w21, w21
+	mov	x1, x28
+	uxtw	x2, w26
+	add	x0, x5, x21, uxth
+	uxth	w20, w20
+	strh	w21, [x3,18]
+	add	w21, w21, w20
+	strh	w6, [x3,16]
+	strh	w26, [x3,20]
+	bl	memcpy
+	strh	w21, [x19,12]
+	ldrh	w0, [x19,14]
+	add	w24, w24, w0
+	sub	w24, w24, w20
+	strh	w24, [x19,14]
+	b	.L3667
+.L3654:
+	ldrh	w0, [x21,18]
+	mov	x1, x28
+	uxtw	x2, w26
+	add	x0, x5, x0
+	bl	memcpy
+	strh	w26, [x21,20]
+	b	.L3667
+.L3668:
+	ldrh	w4, [x19,14]
+	mov	w2, -1
+	cmp	w4, w20
+	bcc	.L3652
+	add	x3, x19, x3, uxth 3
+	strh	w6, [x3,16]
+	uxth	w20, w20
+	mov	x1, x28
+	ldrh	w0, [x19,12]
+	uxtw	x2, w26
+	strh	w0, [x3,18]
+	strh	w26, [x3,20]
+	add	w0, w20, w0
+	sub	w20, w4, w20
+	strh	w0, [x19,12]
+	strh	w20, [x19,14]
+	ldrh	w0, [x3,18]
+	add	x0, x0, 1024
+	add	x0, x19, x0
+	bl	memcpy
+	ldrh	w0, [x19,10]
+	add	w0, w0, 1
+	strh	w0, [x19,10]
+.L3667:
+	ldr	w0, [x19,4]
+	add	x1, x19, 61440
+	mov	x2, x19
+	add	w0, w0, 1
+	str	w0, [x19,4]
+	str	w0, [x1,4092]
+	mov	w1, 128
+	ldrh	w0, [x19,8]
+	add	w0, w0, 1
+	uxth	w0, w0
+	cmp	w0, 1
+	csel	w0, w0, wzr, ls
+	strh	w0, [x19,8]
+	lsl	w0, w23, 7
+	bl	FlashBootVendorWrite
+	mov	w2, 0
+.L3652:
+	mov	w0, w2
+	ldp	x19, x20, [sp,16]
+	ldp	x21, x22, [sp,32]
+	ldp	x23, x24, [sp,48]
+	ldp	x25, x26, [sp,64]
+	ldp	x27, x28, [sp,80]
+	ldp	x29, x30, [sp], 112
+	ret
+	.size	rk_ftl_vendor_write, .-rk_ftl_vendor_write
+	.align	2
+	.global	rk_ftl_vendor_storage_ioctl
+	.type	rk_ftl_vendor_storage_ioctl, %function
+rk_ftl_vendor_storage_ioctl:
+	stp	x29, x30, [sp, -64]!
+	mov	w0, 4096
+	add	x29, sp, 0
+	stp	x19, x20, [sp,16]
+	str	x21, [sp,32]
+	mov	x20, -1
+	str	x1, [x29,56]
+	mov	x21, x2
+	bl	ftl_malloc
+	mov	x19, x0
+	cbz	x0, .L3671
+	mov	w2, 30209
+	ldr	x1, [x29,56]
+	movk	w2, 0x4004, lsl 16
+	cmp	w1, w2
+	beq	.L3673
+	mov	w2, 30210
+	movk	w2, 0x4004, lsl 16
+	cmp	w1, w2
+	beq	.L3674
+	b	.L3685
+.L3673:
+	mov	x1, x21
+	mov	x2, 8
+	bl	rk_copy_from_user
+	cbnz	x0, .L3685
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	beq	.L3676
+.L3677:
+	mov	x20, -1
+	b	.L3672
+.L3676:
+	ldrh	w0, [x19,4]
+	add	x1, x19, 8
+	ldrh	w2, [x19,6]
+	bl	rk_ftl_vendor_read
+	cmn	w0, #1
+	beq	.L3677
+	uxth	x2, w0
+	strh	w0, [x19,6]
+	mov	x1, x19
+	mov	x0, x21
+	add	x2, x2, 8
+	mov	x20, -14
+	bl	rk_copy_to_user
+	cmp	x0, xzr
+	csel	x20, xzr, x20, eq
+	b	.L3672
+.L3674:
+	mov	x1, x21
+	mov	x2, 8
+	bl	rk_copy_from_user
+	cbnz	x0, .L3685
+	ldr	w1, [x19]
+	mov	w0, 17745
+	movk	w0, 0x5652, lsl 16
+	cmp	w1, w0
+	bne	.L3677
+	ldrh	w3, [x19,6]
+	cmp	w3, 4087
+	bhi	.L3677
+	add	w2, w3, 8
+	mov	x0, x19
+	mov	x1, x21
+	sxtw	x2, w2
+	bl	rk_copy_from_user
+	cbnz	x0, .L3685
+	ldrh	w0, [x19,4]
+	add	x1, x19, 8
+	ldrh	w2, [x19,6]
+	bl	rk_ftl_vendor_write
+	sxtw	x20, w0
+	b	.L3672
+.L3685:
+	mov	x20, -14
+.L3672:
+	mov	x0, x19
+	bl	kfree
+.L3671:
+	mov	x0, x20
+	ldr	x21, [sp,32]
+	ldp	x19, x20, [sp,16]
+	ldp	x29, x30, [sp], 64
+	ret
+	.size	rk_ftl_vendor_storage_ioctl, .-rk_ftl_vendor_storage_ioctl
+	.global	gTable_Crc32
+	.global	SecureBootUnlockTryCount
+	.global	SecureBootCheckOK
+	.global	SecureBootEn
+	.global	gpVendor1Info
+	.global	gpVendor0Info
+	.global	g_idb_buffer
+	.global	gSnSectorData
+	.global	gpDrmKeyInfo
+	.global	gpBootConfig
+	.global	gLoaderBootInfo
+	.global	RK29_NANDC1_REG_BASE
+	.global	RK29_NANDC_REG_BASE
+	.global	gp_ftl_api
+	.global	g_pm_spare
+	.global	pm_first_write
+	.global	pm_gc_enable
+	.global	pm_last_load_ram_id
+	.global	pm_last_update_ram_id
+	.global	pm_ram_info
+	.global	sblk_gc_write_completed_queue_head
+	.global	sblk_read_completed_queue_head
+	.global	sblk_write_completed_queue_head
+	.global	sblk_queue_head
+	.global	slc_cache_sblk
+	.global	xlc_data_sblk
+	.global	slc_data_sblk
+	.global	free_mix_sblk
+	.global	free_xlc_sblk
+	.global	free_slc_sblk
+	.global	gp_data_xlc_data_head
+	.global	gp_data_slc_data_head
+	.global	gp_data_slc_cache_head
+	.global	gp_free_mix_head
+	.global	gp_free_xlc_head
+	.global	gp_free_slc_head
+	.global	gp_sblk_list_tbl
+	.global	ftl_ext_info_first_write
+	.global	ftl_sys_info_first_write
+	.global	ftl_low_format_cur_blk
+	.global	ftl_power_lost_flag
+	.global	ftl_vpn_update_count
+	.global	ftl_sblk_vpn_update_id
+	.global	ftl_sblk_lpa_tbl
+	.global	ftl_sblk_vpn
+	.global	gp_ftl_ext_info
+	.global	gp_ftl_info
+	.global	gp_blk_info
+	.global	ftl_tmp_spare
+	.global	ftl_info_spare
+	.global	ftl_ext_info_data_buffer
+	.global	ftl_info_data_buffer
+	.global	ftl_tmp_buffer
+	.global	g_ftl_info_blk
+	.global	tlc_prog_order
+	.global	gc_des_ppa_tbl
+	.global	gc_valid_page_ppa
+	.global	gc_page_buf_id
+	.global	gc_pre_ppa_tbl
+	.global	gc_lpa_tbl
+	.global	g_gc_info
+	.global	gc_xlc_data_index
+	.global	gc_slc_cache_index
+	.global	gc_slc_data_index
+	.global	gc_free_slc_sblk_th
+	.global	gc_slc_mode_vpn_th
+	.global	gc_slc_mode_tlc_vpn_th
+	.global	gc_tlc_mode_tlc_vpn_th
+	.global	gc_tlc_mode_slc_vpn_th
+	.global	gc_state
+	.global	gc_mode
+	.global	check_vpc_tbl
+	.global	p_read_ahead_ext_buf
+	.global	discard_sector_count
+	.global	read_ahead_lpa
+	.global	write_commit_count
+	.global	write_commit_head
+	.global	write_buf_count
+	.global	write_buf_head
+	.global	ftl_flush_jiffies
+	.global	lpa_hash
+	.global	lpa_hash_index
+	.global	_c_mix_max_xlc_ec_count
+	.global	_c_mix_max_slc_ec_count
+	.global	_c_swl_xlc_gc_th
+	.global	_c_swl_slc_gc_th
+	.global	_gc_after_discard_en
+	.global	_last_write_time
+	.global	_last_read_time
+	.global	_min_slc_super_block
+	.global	_max_slc_super_block
+	.global	_max_xlc_super_block
+	.global	_c_max_pm_sblk
+	.global	_c_ftl_pm_page_num
+	.global	_c_totle_log_page
+	.global	_c_totle_data_density
+	.global	_c_user_data_density
+	.global	_c_totle_phy_density
+	.global	_c_ftl_block_addr_log2
+	.global	_c_ftl_block_align_addr
+	.global	_c_ftl_byte_pre_page
+	.global	_c_ftl_nand_blks_per_die
+	.global	_c_ftl_page_pre_slc_blk
+	.global	_c_ftl_page_pre_blk
+	.global	_c_ftl_blk_pre_plane
+	.global	_c_ftl_nand_planes_num
+	.global	_c_ftl_planes_per_die
+	.global	_c_ftl_sec_per_page
+	.global	_c_ftl_nand_die_num
+	.global	_c_ftl_nand_type
+	.global	zftl_debug
+	.global	g_flash_blk_info
+	.global	gp_flash_info
+	.global	p_free_buf_head
+	.global	free_buf_count
+	.global	g_buf
+	.global	nandc_ecc_sts
+	.global	g_nandc_v6_master_info
+	.global	nandc_randomizer_en
+	.global	nandc_hw_seed
+	.global	fill_spare_size
+	.global	g_nandc_ecc_bits
+	.global	g_nandc_tran_timeout
+	.global	g_nandc_ver
+	.global	gp_nandc
+	.global	hy_f26_ref_value
+	.global	sd15_tlc_rr
+	.global	sd15_slc_rr
+	.global	g_nand_para_info
+	.global	gp_nand_para_info
+	.global	g_nand_opt_para
+	.global	g_msb_page_tbl
+	.global	g_lsb_page_tbl
+	.global	g_die_addr
+	.global	g_die_cs_idx
+	.global	IDByte
+	.global	flash_read_retry
+	.global	g_maxRetryCount
+	.global	g_maxRegNum
+	.global	g_retryMode
+	.global	g_flash_toggle_mode_en
+	.global	g_flash_3d_mlc_flag
+	.global	g_flash_3d_tlc_flag
+	.global	g_flash_multi_page_prog_en
+	.global	g_flash_multi_page_read_en
+	.global	g_flash_interface_mode
+	.global	g_idb_ecc_bits
+	.global	g_idb_slc_mode_enable
+	.global	g_slc_mode_addr2
+	.global	g_slc_mode_enable
+	.global	g_flash_cur_mode
+	.global	g_flash_slc_mode
+	.global	g_slc_page_num
+	.global	g_totle_phy_block
+	.global	g_block_align_addr
+	.global	g_flash_reversd_blks
+	.global	g_nand_max_die
+	.global	g_flash_tmp_spare_buffer
+	.global	g_flash_tmp_page_buffer
+	.global	g_flash_sys_spare_buffer
+	.global	g_flash_spare_buffer
+	.global	g_flash_page_buffer
+	.section	.rodata
+	.align	3
+.LANCHOR1 = . + 0
+	.type	__func__.33843, %object
+	.size	__func__.33843, 18
+__func__.33843:
+	.string	"_list_remove_node"
+	.zero	6
+	.type	__func__.33868, %object
+	.size	__func__.33868, 23
+__func__.33868:
+	.string	"_list_update_data_list"
+	.zero	1
+	.type	__func__.18877, %object
+	.size	__func__.18877, 22
+__func__.18877:
+	.string	"nand_flash_print_info"
+	.zero	2
+	.type	__func__.18959, %object
+	.size	__func__.18959, 11
+__func__.18959:
+	.string	"nandc_init"
+	.zero	5
+	.type	toshiba_A19ref_value, %object
+	.size	toshiba_A19ref_value, 45
+toshiba_A19ref_value:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.zero	3
+	.type	toshiba_15ref_value, %object
+	.size	toshiba_15ref_value, 95
+toshiba_15ref_value:
+	.byte	4
+	.byte	5
+	.byte	6
+	.byte	7
+	.byte	13
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	4
+	.byte	2
+	.byte	0
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	0
+	.byte	124
+	.byte	124
+	.byte	0
+	.byte	122
+	.byte	0
+	.byte	122
+	.byte	122
+	.byte	0
+	.byte	11
+	.byte	126
+	.byte	118
+	.byte	116
+	.byte	0
+	.byte	120
+	.byte	2
+	.byte	120
+	.byte	122
+	.byte	0
+	.byte	126
+	.byte	4
+	.byte	126
+	.byte	122
+	.byte	0
+	.byte	16
+	.byte	118
+	.byte	114
+	.byte	112
+	.byte	0
+	.byte	118
+	.byte	4
+	.byte	118
+	.byte	120
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	4
+	.byte	118
+	.byte	0
+	.byte	2
+	.byte	0
+	.byte	126
+	.byte	124
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	2
+	.byte	0
+	.byte	116
+	.byte	124
+	.byte	116
+	.byte	118
+	.byte	0
+	.byte	4
+	.byte	4
+	.byte	124
+	.byte	126
+	.byte	0
+	.byte	0
+	.byte	124
+	.byte	120
+	.byte	120
+	.byte	0
+	.byte	124
+	.byte	118
+	.byte	116
+	.byte	114
+	.byte	0
+	.zero	1
+	.type	toshiba_ref_value, %object
+	.size	toshiba_ref_value, 8
+toshiba_ref_value:
+	.byte	0
+	.byte	4
+	.byte	124
+	.byte	120
+	.byte	116
+	.byte	8
+	.byte	12
+	.byte	112
+	.type	__func__.18489, %object
+	.size	__func__.18489, 28
+__func__.18489:
+	.string	"flash_wait_device_ready_raw"
+	.zero	4
+	.type	toshiba_3D_tlc_value, %object
+	.size	toshiba_3D_tlc_value, 399
+toshiba_3D_tlc_value:
+	.byte	-119
+	.byte	-119
+	.byte	-119
+	.byte	-119
+	.byte	-118
+	.byte	-118
+	.byte	-118
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	-2
+	.byte	-1
+	.byte	0
+	.byte	-3
+	.byte	-2
+	.byte	6
+	.byte	-9
+	.byte	-12
+	.byte	-9
+	.byte	-7
+	.byte	-13
+	.byte	-12
+	.byte	-7
+	.byte	-6
+	.byte	-15
+	.byte	-15
+	.byte	-2
+	.byte	-12
+	.byte	-16
+	.byte	-6
+	.byte	-2
+	.byte	-19
+	.byte	-19
+	.byte	-6
+	.byte	-4
+	.byte	-12
+	.byte	-14
+	.byte	-2
+	.byte	-11
+	.byte	-23
+	.byte	-34
+	.byte	-4
+	.byte	-20
+	.byte	-22
+	.byte	-2
+	.byte	-7
+	.byte	-31
+	.byte	-30
+	.byte	-12
+	.byte	-20
+	.byte	-18
+	.byte	2
+	.byte	-15
+	.byte	-19
+	.byte	-36
+	.byte	-12
+	.byte	-28
+	.byte	-34
+	.byte	-6
+	.byte	-15
+	.byte	-11
+	.byte	2
+	.byte	-12
+	.byte	-8
+	.byte	-2
+	.byte	2
+	.byte	-3
+	.byte	-7
+	.byte	-10
+	.byte	-4
+	.byte	-8
+	.byte	-6
+	.byte	-6
+	.byte	-11
+	.byte	-27
+	.byte	-38
+	.byte	-16
+	.byte	-12
+	.byte	-2
+	.byte	2
+	.byte	-7
+	.byte	-31
+	.byte	-22
+	.byte	-4
+	.byte	-16
+	.byte	-22
+	.byte	-7
+	.byte	-31
+	.byte	-23
+	.byte	-22
+	.byte	-28
+	.byte	-28
+	.byte	-26
+	.byte	2
+	.byte	-7
+	.byte	-11
+	.byte	-14
+	.byte	-8
+	.byte	-12
+	.byte	-10
+	.byte	-10
+	.byte	-27
+	.byte	-25
+	.byte	-22
+	.byte	-20
+	.byte	-28
+	.byte	-22
+	.byte	-7
+	.byte	-23
+	.byte	-29
+	.byte	-34
+	.byte	-24
+	.byte	-32
+	.byte	-22
+	.byte	-10
+	.byte	-11
+	.byte	-29
+	.byte	-18
+	.byte	-12
+	.byte	-24
+	.byte	-22
+	.byte	6
+	.byte	1
+	.byte	-3
+	.byte	-6
+	.byte	0
+	.byte	-4
+	.byte	-2
+	.byte	10
+	.byte	-3
+	.byte	-7
+	.byte	-6
+	.byte	4
+	.byte	-4
+	.byte	-2
+	.byte	-10
+	.byte	-23
+	.byte	-39
+	.byte	-22
+	.byte	-19
+	.byte	-24
+	.byte	-18
+	.byte	-14
+	.byte	-23
+	.byte	-29
+	.byte	-30
+	.byte	-15
+	.byte	-30
+	.byte	-30
+	.byte	-7
+	.byte	-27
+	.byte	-35
+	.byte	-26
+	.byte	-15
+	.byte	-24
+	.byte	-26
+	.byte	6
+	.byte	-11
+	.byte	5
+	.byte	-2
+	.byte	-16
+	.byte	-16
+	.byte	-2
+	.byte	-2
+	.byte	-15
+	.byte	-15
+	.byte	-20
+	.byte	-8
+	.byte	-16
+	.byte	-18
+	.byte	6
+	.byte	5
+	.byte	-15
+	.byte	-2
+	.byte	-24
+	.byte	-28
+	.byte	-22
+	.byte	10
+	.byte	-15
+	.byte	-3
+	.byte	-30
+	.byte	-8
+	.byte	-24
+	.byte	-30
+	.byte	-10
+	.byte	-27
+	.byte	-19
+	.byte	-30
+	.byte	-12
+	.byte	-16
+	.byte	-10
+	.byte	14
+	.byte	-19
+	.byte	-3
+	.byte	-30
+	.byte	4
+	.byte	4
+	.byte	6
+	.byte	2
+	.byte	1
+	.byte	-3
+	.byte	-10
+	.byte	-8
+	.byte	-4
+	.byte	-6
+	.byte	-2
+	.byte	-15
+	.byte	-11
+	.byte	-26
+	.byte	-8
+	.byte	-20
+	.byte	-30
+	.byte	6
+	.byte	-19
+	.byte	-3
+	.byte	-46
+	.byte	0
+	.byte	0
+	.byte	2
+	.byte	6
+	.byte	9
+	.byte	5
+	.byte	2
+	.byte	4
+	.byte	8
+	.byte	6
+	.byte	8
+	.byte	9
+	.byte	9
+	.byte	6
+	.byte	8
+	.byte	8
+	.byte	6
+	.byte	10
+	.byte	13
+	.byte	9
+	.byte	6
+	.byte	8
+	.byte	12
+	.byte	10
+	.byte	2
+	.byte	5
+	.byte	1
+	.byte	-2
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	12
+	.byte	1
+	.byte	13
+	.byte	2
+	.byte	12
+	.byte	12
+	.byte	14
+	.byte	-12
+	.byte	-14
+	.byte	-20
+	.byte	-18
+	.byte	-16
+	.byte	-16
+	.byte	-14
+	.byte	-12
+	.byte	-10
+	.byte	-21
+	.byte	-14
+	.byte	-12
+	.byte	-12
+	.byte	-10
+	.byte	-12
+	.byte	-18
+	.byte	-22
+	.byte	-24
+	.byte	-18
+	.byte	-18
+	.byte	-18
+	.byte	-12
+	.byte	-14
+	.byte	-23
+	.byte	-20
+	.byte	-20
+	.byte	-20
+	.byte	-20
+	.byte	-12
+	.byte	-24
+	.byte	-24
+	.byte	-30
+	.byte	-24
+	.byte	-28
+	.byte	-28
+	.byte	-12
+	.byte	-26
+	.byte	-25
+	.byte	-34
+	.byte	-24
+	.byte	-24
+	.byte	-24
+	.byte	-12
+	.byte	-13
+	.byte	-26
+	.byte	-20
+	.byte	-14
+	.byte	-18
+	.byte	-18
+	.byte	-12
+	.byte	-15
+	.byte	-27
+	.byte	-22
+	.byte	-20
+	.byte	-24
+	.byte	-22
+	.byte	-12
+	.byte	-21
+	.byte	-28
+	.byte	-28
+	.byte	-24
+	.byte	-26
+	.byte	-24
+	.byte	20
+	.byte	16
+	.byte	6
+	.byte	10
+	.byte	16
+	.byte	12
+	.byte	12
+	.byte	16
+	.byte	16
+	.byte	8
+	.byte	8
+	.byte	12
+	.byte	12
+	.byte	12
+	.byte	18
+	.byte	18
+	.byte	10
+	.byte	8
+	.byte	14
+	.byte	14
+	.byte	14
+	.byte	16
+	.byte	14
+	.byte	6
+	.byte	6
+	.byte	12
+	.byte	14
+	.byte	8
+	.byte	20
+	.byte	18
+	.byte	8
+	.byte	6
+	.byte	14
+	.byte	14
+	.byte	10
+	.byte	20
+	.byte	20
+	.byte	6
+	.byte	10
+	.byte	10
+	.byte	12
+	.byte	12
+	.byte	10
+	.byte	13
+	.byte	5
+	.byte	2
+	.byte	14
+	.byte	8
+	.byte	6
+	.byte	6
+	.byte	13
+	.byte	9
+	.byte	4
+	.byte	14
+	.byte	10
+	.byte	10
+	.byte	10
+	.byte	13
+	.byte	9
+	.byte	6
+	.byte	8
+	.byte	12
+	.byte	10
+	.byte	2
+	.byte	5
+	.byte	1
+	.byte	-2
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	12
+	.byte	1
+	.byte	13
+	.byte	2
+	.byte	12
+	.byte	12
+	.byte	14
+	.zero	1
+	.type	toshiba_3D_slc_value, %object
+	.size	toshiba_3D_slc_value, 11
+toshiba_3D_slc_value:
+	.byte	-117
+	.byte	0
+	.byte	-8
+	.byte	8
+	.byte	-16
+	.byte	-24
+	.byte	24
+	.byte	-40
+	.byte	40
+	.byte	-56
+	.byte	56
+	.zero	5
+	.type	__func__.18539, %object
+	.size	__func__.18539, 22
+__func__.18539:
+	.string	"flash_start_page_read"
+	.zero	2
+	.type	__func__.18464, %object
+	.size	__func__.18464, 26
+__func__.18464:
+	.string	"flash_erase_duplane_block"
+	.zero	6
+	.type	__func__.18475, %object
+	.size	__func__.18475, 21
+__func__.18475:
+	.string	"flash_erase_block_en"
+	.zero	3
+	.type	random_seed, %object
+	.size	random_seed, 256
+random_seed:
+	.hword	22378
+	.hword	1512
+	.hword	25245
+	.hword	17827
+	.hword	25756
+	.hword	19440
+	.hword	9026
+	.hword	10030
+	.hword	29528
+	.hword	20467
+	.hword	29676
+	.hword	24432
+	.hword	31328
+	.hword	6872
+	.hword	13426
+	.hword	13842
+	.hword	8783
+	.hword	1108
+	.hword	782
+	.hword	28837
+	.hword	30729
+	.hword	9505
+	.hword	18676
+	.hword	23085
+	.hword	18730
+	.hword	1085
+	.hword	32609
+	.hword	14697
+	.hword	20858
+	.hword	15170
+	.hword	30365
+	.hword	1607
+	.hword	32298
+	.hword	4995
+	.hword	18905
+	.hword	1976
+	.hword	9592
+	.hword	20204
+	.hword	17443
+	.hword	13615
+	.hword	23330
+	.hword	29369
+	.hword	13947
+	.hword	9398
+	.hword	32398
+	.hword	8984
+	.hword	27600
+	.hword	21785
+	.hword	6019
+	.hword	6311
+	.hword	31598
+	.hword	30210
+	.hword	19327
+	.hword	13896
+	.hword	11347
+	.hword	27545
+	.hword	3107
+	.hword	26575
+	.hword	32270
+	.hword	19852
+	.hword	20601
+	.hword	8349
+	.hword	9290
+	.hword	29819
+	.hword	13579
+	.hword	3661
+	.hword	28676
+	.hword	27331
+	.hword	32574
+	.hword	8693
+	.hword	31253
+	.hword	9081
+	.hword	5399
+	.hword	6842
+	.hword	20087
+	.hword	5537
+	.hword	1274
+	.hword	11617
+	.hword	9530
+	.hword	4866
+	.hword	8035
+	.hword	23219
+	.hword	1178
+	.hword	23272
+	.hword	7383
+	.hword	18944
+	.hword	12488
+	.hword	12871
+	.hword	29340
+	.hword	20532
+	.hword	11022
+	.hword	22514
+	.hword	228
+	.hword	22363
+	.hword	24978
+	.hword	14584
+	.hword	12138
+	.hword	3092
+	.hword	17916
+	.hword	16863
+	.hword	14554
+	.hword	31457
+	.hword	29474
+	.hword	25311
+	.hword	24121
+	.hword	3684
+	.hword	28037
+	.hword	22865
+	.hword	22839
+	.hword	25217
+	.hword	13217
+	.hword	27186
+	.hword	14938
+	.hword	11180
+	.hword	29754
+	.hword	24180
+	.hword	15150
+	.hword	32455
+	.hword	20434
+	.hword	23848
+	.hword	29983
+	.hword	16120
+	.hword	14769
+	.hword	20041
+	.hword	29803
+	.hword	28406
+	.hword	17598
+	.hword	28087
+	.type	__func__.19129, %object
+	.size	__func__.19129, 13
+__func__.19129:
+	.string	"buf_add_tail"
+	.zero	3
+	.type	__func__.19142, %object
+	.size	__func__.19142, 10
+__func__.19142:
+	.string	"buf_alloc"
+	.zero	6
+	.type	__func__.19156, %object
+	.size	__func__.19156, 16
+__func__.19156:
+	.string	"buf_remove_free"
+	.type	zftl_debug_proc_fops, %object
+	.size	zftl_debug_proc_fops, 216
+zftl_debug_proc_fops:
+	.xword	0
+	.xword	seq_lseek
+	.xword	seq_read
+	.xword	zftl_debug_proc_write
+	.zero	56
+	.xword	zftl_debug_proc_open
+	.zero	8
+	.xword	single_release
+	.zero	104
+	.type	__func__.33231, %object
+	.size	__func__.33231, 13
+__func__.33231:
+	.string	"ftl_read_buf"
+	.zero	3
+	.type	__func__.33449, %object
+	.size	__func__.33449, 12
+__func__.33449:
+	.string	"gc_add_sblk"
+	.zero	4
+	.type	__func__.33514, %object
+	.size	__func__.33514, 19
+__func__.33514:
+	.string	"gc_write_completed"
+	.zero	5
+	.type	__func__.33565, %object
+	.size	__func__.33565, 16
+__func__.33565:
+	.string	"gc_free_src_blk"
+	.type	__func__.34041, %object
+	.size	__func__.34041, 18
+__func__.34041:
+	.string	"ftl_alloc_sys_blk"
+	.zero	6
+	.type	__func__.34051, %object
+	.size	__func__.34051, 17
+__func__.34051:
+	.string	"ftl_free_sys_blk"
+	.zero	7
+	.type	__func__.34155, %object
+	.size	__func__.34155, 23
+__func__.34155:
+	.string	"ftl_get_ppa_from_index"
+	.zero	1
+	.type	__func__.34194, %object
+	.size	__func__.34194, 22
+__func__.34194:
+	.string	"ftl_get_new_free_page"
+	.zero	2
+	.type	__func__.34205, %object
+	.size	__func__.34205, 22
+__func__.34205:
+	.string	"ftl_ext_alloc_new_blk"
+	.zero	2
+	.type	__func__.33172, %object
+	.size	__func__.33172, 14
+__func__.33172:
+	.string	"ftl_write_buf"
+	.zero	2
+	.type	__func__.33999, %object
+	.size	__func__.33999, 15
+__func__.33999:
+	.string	"ftl_alloc_sblk"
+	.align	3
+.LANCHOR3 = . + 0
+	.type	__func__.34627, %object
+	.size	__func__.34627, 17
+__func__.34627:
+	.string	"pm_alloc_new_blk"
+	.zero	7
+	.type	__func__.34655, %object
+	.size	__func__.34655, 21
+__func__.34655:
+	.string	"pm_select_ram_region"
+	.zero	3
+	.type	__func__.18867, %object
+	.size	__func__.18867, 20
+__func__.18867:
+	.string	"flash_die_info_init"
+	.zero	4
+	.type	__func__.33109, %object
+	.size	__func__.33109, 17
+__func__.33109:
+	.string	"lpa_rebuild_hash"
+	.zero	7
+	.type	__func__.34591, %object
+	.size	__func__.34591, 13
+__func__.34591:
+	.string	"pm_free_sblk"
+	.zero	3
+	.type	__func__.19179, %object
+	.size	__func__.19179, 21
+__func__.19179:
+	.string	"flash_into_data_init"
+	.zero	3
+	.type	__func__.18420, %object
+	.size	__func__.18420, 19
+__func__.18420:
+	.string	"flash_read_page_en"
+	.zero	5
+	.type	__func__.19168, %object
+	.size	__func__.19168, 20
+__func__.19168:
+	.string	"flash_info_blk_init"
+	.zero	4
+	.type	__func__.18554, %object
+	.size	__func__.18554, 25
+__func__.18554:
+	.string	"flash_complete_page_read"
+	.zero	7
+	.type	__func__.33467, %object
+	.size	__func__.33467, 21
+__func__.33467:
+	.string	"gc_check_data_one_wl"
+	.zero	3
+	.type	__func__.18526, %object
+	.size	__func__.18526, 22
+__func__.18526:
+	.string	"flash_start_page_prog"
+	.zero	2
+	.type	__func__.34517, %object
+	.size	__func__.34517, 15
+__func__.34517:
+	.string	"sblk_prog_page"
+	.zero	1
+	.type	__func__.18513, %object
+	.size	__func__.18513, 26
+__func__.18513:
+	.string	"flash_start_tlc_page_prog"
+	.zero	6
+	.type	__func__.18449, %object
+	.size	__func__.18449, 19
+__func__.18449:
+	.string	"flash_prog_page_en"
+	.zero	5
+	.type	__func__.34342, %object
+	.size	__func__.34342, 14
+__func__.34342:
+	.string	"ftl_prog_page"
+	.zero	2
+	.type	__func__.33967, %object
+	.size	__func__.33967, 15
+__func__.33967:
+	.string	"ftl_info_flush"
+	.zero	1
+	.type	__func__.34230, %object
+	.size	__func__.34230, 19
+__func__.34230:
+	.string	"ftl_ext_info_flush"
+	.zero	5
+	.type	__func__.34242, %object
+	.size	__func__.34242, 18
+__func__.34242:
+	.string	"ftl_ext_info_init"
+	.zero	6
+	.type	__func__.34288, %object
+	.size	__func__.34288, 15
+__func__.34288:
+	.string	"ftl_low_format"
+	.zero	1
+	.type	__func__.34332, %object
+	.size	__func__.34332, 23
+__func__.34332:
+	.string	"ftl_re_low_format_test"
+	.zero	1
+	.type	__func__.34129, %object
+	.size	__func__.34129, 23
+__func__.34129:
+	.string	"ftl_open_sblk_recovery"
+	.zero	1
+	.type	__func__.34637, %object
+	.size	__func__.34637, 14
+__func__.34637:
+	.string	"pm_write_page"
+	.zero	2
+	.type	__func__.19201, %object
+	.size	__func__.19201, 17
+__func__.19201:
+	.string	"flash_info_flush"
+	.zero	7
+	.type	__func__.18921, %object
+	.size	__func__.18921, 16
+__func__.18921:
+	.string	"nand_flash_init"
+	.type	__func__.34110, %object
+	.size	__func__.34110, 16
+__func__.34110:
+	.string	"ftl_sysblk_dump"
+	.type	__func__.34577, %object
+	.size	__func__.34577, 16
+__func__.34577:
+	.string	"load_l2p_region"
+	.type	__func__.34611, %object
+	.size	__func__.34611, 6
+__func__.34611:
+	.string	"pm_gc"
+	.zero	2
+	.type	__func__.33223, %object
+	.size	__func__.33223, 15
+__func__.33223:
+	.string	"ftl_read_ahead"
+	.zero	1
+	.type	__func__.33501, %object
+	.size	__func__.33501, 22
+__func__.33501:
+	.string	"gc_update_l2p_map_new"
+	.zero	2
+	.type	__func__.33669, %object
+	.size	__func__.33669, 20
+__func__.33669:
+	.string	"gc_scan_static_data"
+	.zero	4
+	.type	__func__.33727, %object
+	.size	__func__.33727, 18
+__func__.33727:
+	.string	"gc_block_vpn_scan"
+	.zero	6
+	.type	__func__.34086, %object
+	.size	__func__.34086, 14
+__func__.34086:
+	.string	"ftl_sblk_dump"
+	.zero	2
+	.type	__func__.33269, %object
+	.size	__func__.33269, 10
+__func__.33269:
+	.string	"zftl_read"
+	.zero	6
+	.type	__func__.33336, %object
+	.size	__func__.33336, 10
+__func__.33336:
+	.string	"vpn_check"
+	.zero	6
+	.type	__func__.33610, %object
+	.size	__func__.33610, 16
+__func__.33610:
+	.string	"gc_scan_src_blk"
+	.type	__func__.34176, %object
+	.size	__func__.34176, 19
+__func__.34176:
+	.string	"ftl_update_l2p_map"
+	.zero	5
+	.type	__func__.33161, %object
+	.size	__func__.33161, 17
+__func__.33161:
+	.string	"ftl_write_commit"
+	.zero	7
+	.type	__func__.33543, %object
+	.size	__func__.33543, 16
+__func__.33543:
+	.string	"gc_do_copy_back"
+	.type	__func__.33295, %object
+	.size	__func__.33295, 13
+__func__.33295:
+	.string	"_ftl_discard"
+	.zero	3
+	.type	__func__.33754, %object
+	.size	__func__.33754, 11
+__func__.33754:
+	.string	"zftl_do_gc"
+	.section	.rodata.str1.1,"aMS",%progbits,1
+.LC0:
+	.string	"\n!!!!! error @ func:%s - line:%d\n"
+.LC1:
+	.string	"%s\n"
+.LC2:
+	.string	"FTL version: 6.0.7 20180411"
+.LC3:
+	.string	"zftl_debug:0x%x\n"
+.LC4:
+	.string	"...%s enter...\n"
+.LC5:
+	.string	"No.0 FLASH ID: %x %x %x %x %x %x\n"
+.LC6:
+	.string	"DiePerChip: %x\n"
+.LC7:
+	.string	"SectPerPage: %x\n"
+.LC8:
+	.string	"PagePerBlk: %x\n"
+.LC9:
+	.string	"Cell: %x\n"
+.LC10:
+	.string	"PlanePerDie: %x\n"
+.LC11:
+	.string	"BlkPerPlane: %x\n"
+.LC12:
+	.string	"die gap: %x\n"
+.LC13:
+	.string	"lsbMode: %x\n"
+.LC14:
+	.string	"ReadRetryMode: %x\n"
+.LC15:
+	.string	"ecc: %x\n"
+.LC16:
+	.string	"idb ecc: %x\n"
+.LC17:
+	.string	"g_flash_slc_mode: %x\n"
+.LC18:
+	.string	"OptMode: %x\n"
+.LC19:
+	.string	"g_nand_max_die: %x\n"
+.LC20:
+	.string	"Cache read enable: %x\n"
+.LC21:
+	.string	"Cache random read enable: %x\n"
+.LC22:
+	.string	"Cache prog enable: %x\n"
+.LC23:
+	.string	"multi read enable: %x\n"
+.LC24:
+	.string	"multi prog enable: %x\n"
+.LC25:
+	.string	"interleave enable: %x\n"
+.LC26:
+	.string	"read retry enable: %x\n"
+.LC27:
+	.string	"randomizer enable: %x\n"
+.LC28:
+	.string	"SDR enable: %x\n"
+.LC29:
+	.string	"ONFI enable: %x\n"
+.LC30:
+	.string	"TOGGLE enable: %x\n"
+.LC31:
+	.string	"MultiPlaneProgCmd: %x %x\n"
+.LC32:
+	.string	"MultiPlaneReadCmd: %x %x\n"
+.LC33:
+	.string	"g_flash_toggle_mode_en: %x\n"
+.LC34:
+	.string	"...%s enter... %p\n"
+.LC35:
+	.string	"0:%x %x %x %x %x\n"
+.LC36:
+	.string	"g_nandc_ver...%d\n"
+.LC37:
+	.string	"nand sdr mode %x\n"
+.LC38:
+	.string	"nand ddr mode %x\n"
+.LC39:
+	.string	"No.%d FLASH ID:%x %x %x %x %x %x\n"
+.LC40:
+	.string	"bad block test:%x %x\n"
+.LC41:
+	.string	"flash_erase_duplane_block %x %x %x\n"
+.LC42:
+	.string	"flash_erase_duplane_block pageadd = %x status = %x\n"
+.LC43:
+	.string	"flash_erase_block %x %x\n"
+.LC44:
+	.string	"flash_erase_block block = %x status = %x\n"
+.LC45:
+	.string	"erase done: %x\n"
+.LC46:
+	.string	"flash_mask_bad_block %d %d\n"
+.LC47:
+	.string	"zftl_debug"
+.LC48:
+	.string	"FLASH ID: %x %x %x %x %x %x\n"
+.LC49:
+	.string	"density: %d MB\n"
+.LC50:
+	.string	"device density: %d MB\n"
+.LC51:
+	.string	"FTL INFO:\n"
+.LC52:
+	.string	"max_lpn = 0x%x\n"
+.LC53:
+	.string	"density = 0x%x\n"
+.LC54:
+	.string	"slc vpn = 0x%x\n"
+.LC55:
+	.string	"xlc vpn = 0x%x\n"
+.LC56:
+	.string	"free slc blk = 0x%x\n"
+.LC57:
+	.string	"free xlc blk = 0x%x\n"
+.LC58:
+	.string	"free mix blk = 0x%x\n"
+.LC59:
+	.string	"slc data blk = 0x%x\n"
+.LC60:
+	.string	"slc cache blk = 0x%x\n"
+.LC61:
+	.string	"xlc data blk = 0x%x\n"
+.LC62:
+	.string	"free buf = %d, %d, %d\n"
+.LC63:
+	.string	"bad blk = %d %d\n"
+.LC64:
+	.string	"TBW = %d MB\n"
+.LC65:
+	.string	"TBR = %d MB\n"
+.LC66:
+	.string	"POC = %d\n"
+.LC67:
+	.string	"PLC = %d\n"
+.LC68:
+	.string	"sys run time = %d S\n"
+.LC69:
+	.string	"slc mode = %d\n"
+.LC70:
+	.string	"prog err = %d\n"
+.LC71:
+	.string	"read err = %d\n"
+.LC72:
+	.string	"GC XLC page = %d\n"
+.LC73:
+	.string	"GC SLC page = %d\n"
+.LC74:
+	.string	"discard page = 0x%x\n"
+.LC75:
+	.string	"version = %d\n"
+.LC76:
+	.string	"acblk = 0x%x %d %d\n"
+.LC77:
+	.string	"tmblk = 0x%x %d %d\n"
+.LC78:
+	.string	"gcblk = 0x%x %d %d\n"
+.LC79:
+	.string	"slc ec = %d, %d, %d, %d, %d\n"
+.LC80:
+	.string	"xlc ec = %d, %d, %d, %d, %d\n"
+.LC81:
+	.string	"gc free blk th = %d\n"
+.LC82:
+	.string	"gc vpn th = %d %d %d %d\n"
+.LC83:
+	.string	"gc_add_sblk = %d, %d, %d, %d, %d, %d\n"
+.LC84:
+	.string	"status: %x, ppa: %x\n"
+.LC85:
+	.string	"gc_write_completed: %x  %x  %x %x\n"
+.LC86:
+	.string	"%d gc_free_temp_buf buf id= %x\n"
+.LC87:
+	.string	"gc: b:%x,p:%x,i:%x; free buf=%d %d free slc th: %d\n"
+.LC88:
+	.string	"zftl_get_gc_node cache = %x index = %d vpn = %x\n"
+.LC89:
+	.string	"gc_search_src_blk mode = %x, src mode = %x, count= %d %d\n"
+.LC90:
+	.string	"zftl_get_free_sblk %x %d, %p %d %d\n"
+.LC91:
+	.string	"list count:%p %d\n"
+.LC92:
+	.string	"%d: node:%x %x %x %x, %d %d %d %d %d\n"
+.LC93:
+	.string	"gc_free_src_blk = %x, vpn = %d\n"
+.LC94:
+	.string	"gc_free_src_blk %x, %d\n"
+.LC95:
+	.string	"ftl_vpn_decrement %x = %d\n"
+.LC96:
+	.string	"mask bad block:cs %x block: %x\n"
+.LC97:
+	.string	"free blk: s:%x,t:%x,m:%x, data blk:s:%x,%x,t%x vpn: s:%x t:%x, max_vpn: %x\n"
+.LC98:
+	.string	"totle w: %d MB,r: %d MB %d dv:0x%X,poc:%d\n"
+.LC99:
+	.string	"gc xlc page: %d,gc slc page: %d, tmp w: %d MB\n"
+.LC100:
+	.string	"slc ec: %d,%d,%d,%d,%d,tlc ec: %d,%d,%d,%d,%d\n"
+.LC101:
+	.string	"gc th: tlc_tlc: %d tlc_slc: %d slc_slc: %d slc_tlc:%d free_th: %d\n"
+.LC102:
+	.string	"ftl prog error =%x, lpa = %x, ppa= %x\n"
+.LC103:
+	.string	"alloc sblk %x %d\n"
+.LC104:
+	.string	"dump_sblk_queue: %d\n"
+.LC105:
+	.string	"buf id= %d state = %d ppa = %x\n"
+.LC106:
+	.string	"blk %x is bad block\n"
+.LC107:
+	.string	"pm_alloc_new_blk: %x %x %x %x\n"
+.LC108:
+	.string	"%s %d %d\n"
+.LC109:
+	.string	"gc_static_wearleveling: slc blk: %d, tlc blk: %d avg slc ec: %d, avg tlc ec: %d \n"
+.LC110:
+	.string	"gc_static_wearleveling: min slc ec: %d, min tlc ec: %d max slc ec: %d, max tlc ec: %d; %d %d\n"
+.LC111:
+	.string	"swl add tlc gc = %d, %d, %d, %d, %d, %d\n"
+.LC112:
+	.string	"swl add slc gc  = %d, %d, %d, %d, %d, %d\n"
+.LC113:
+	.string	"free blk vpn error: %x %x\n"
+.LC114:
+	.string	"ftl_free_no_use_map_blk %x %x %x %d\n"
+.LC115:
+	.string	"...%d @ %s\n"
+.LC116:
+	.string	"rk_ftl_de_init %x\n"
+.LC117:
+	.string	"%s %p:0x%x:"
+.LC118:
+	.string	"%x "
+.LC119:
+	.string	""
+.LC120:
+	.string	"otp error! %d"
+.LC121:
+	.string	"rr"
+.LC122:
+	.string	"flash_abort_clear = %d\n"
+.LC123:
+	.string	"%d mtrans_cnt = %d page_num = %d\n"
+.LC124:
+	.string	"nandc:"
+.LC125:
+	.string	"%d flReg.d32=%x %x\n"
+.LC126:
+	.string	"nandc_xfer_done read error %x\n"
+.LC127:
+	.string	"dqs data abort %x\n"
+.LC128:
+	.string	"dqs data timeout %x\n"
+.LC129:
+	.string	"xfer error %x\n"
+.LC130:
+	.string	"flash_read_page %x %x %x\n"
+.LC131:
+	.string	"micron %d row=%x,count %d,status=%d\n"
+.LC132:
+	.string	"micron RR %d row=%x,count %d,status=%d\n"
+.LC133:
+	.string	"toshiba SRR %d row=%x, status=%d\n"
+.LC134:
+	.string	"toshiba TRR %d row=%x, status=%d\n"
+.LC135:
+	.string	"toshiba RR %d row=%x,count %d,status=%d\n"
+.LC136:
+	.string	"hynix RR %d row=%x, count %d, status=%d\n"
+.LC137:
+	.string	"%d flash_ddr_tunning_read %x ecc=%d\n"
+.LC138:
+	.string	"sync para %d\n"
+.LC139:
+	.string	"DDR mode Read error %x %x\n"
+.LC140:
+	.string	"flash_read_page_en %x %x\n"
+.LC141:
+	.string	"flash_read_page_en %x %x error_ecc %d %d\n"
+.LC142:
+	.string	"flash_get_last_written_page: %x %x %x\n"
+.LC143:
+	.string	"...%d @ %s %d %p\n"
+.LC144:
+	.string	"no sys info %x\n"
+.LC145:
+	.string	"read page: %x %x %x %x\n"
+.LC146:
+	.string	"flash_complete_page_read %x %x error_ecc %d %d\n"
+.LC147:
+	.string	"set buf %d,status = %x, ppa = %x lun state = %d\n"
+.LC148:
+	.string	"1ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
+.LC149:
+	.string	"flash_prog_page %x %x %x\n"
+.LC150:
+	.string	"flash_prog_page page_addr = %x status = %x\n"
+.LC151:
+	.string	"sblk_prog_page ppa = %x, count = %d\n"
+.LC152:
+	.string	"flash_prog_page_en:%x %x\n"
+.LC153:
+	.string	"spare"
+.LC154:
+	.string	"data"
+.LC155:
+	.string	"write error: %x\n"
+.LC156:
+	.string	"low format %d\n"
+.LC157:
+	.string	"g_ftl_info_blk blk = %x, page = %x version = %d\n"
+.LC158:
+	.string	"%d %x @%d %x\n"
+.LC159:
+	.string	"ftl_info_blk_init %d %d %x\n"
+.LC160:
+	.string	"low format %d %d %d %d\n"
+.LC161:
+	.string	"re low format %d\n"
+.LC162:
+	.string	"saved_active_page  = %x\n"
+.LC163:
+	.string	"saved_active_plane = %x\n"
+.LC164:
+	.string	"sblk = %x\n"
+.LC165:
+	.string	"phy_blk = %x %x\n"
+.LC166:
+	.string	"blk= %x, page=%x, ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
+.LC167:
+	.string	"sblk = %x, vpn0 = %d, vpn1 = %d\n"
+.LC168:
+	.string	"dump write = %x\n"
+.LC169:
+	.string	"pm_write_page write error: %x\n"
+.LC170:
+	.string	"finfo:"
+.LC171:
+	.string	"flash_info_flush id = %x, page = %x\n"
+.LC172:
+	.string	"sys_info_flush error:%x\n"
+.LC173:
+	.string	"l2p:"
+.LC174:
+	.string	"free_buf_count: %d\n"
+.LC175:
+	.string	"g_ftl_info_blk blk:0x%x, index:0x%x, page:0x%x\n"
+.LC176:
+	.string	"ftl_ext_info_blk blk:0x%x, page:0x%x\n"
+.LC177:
+	.string	"ac_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+.LC178:
+	.string	"tmp_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+.LC179:
+	.string	"gc_blk:0x%x, page:0x%x, index:0x%x, free:0x%x, page_index:0x%x\n"
+.LC180:
+	.string	"lpa:"
+.LC181:
+	.string	"vpn:"
+.LC182:
+	.string	"sblk:"
+.LC183:
+	.string	"lpa_hash:"
+.LC184:
+	.string	"lpa_hash_index:"
+.LC185:
+	.string	"%s w error lpn = %x, max ppa = %d\n"
+.LC186:
+	.string	"region_id = %d, pm_max_region = %d\n"
+.LC187:
+	.string	"load_l2p_region no ppa = %x , %x, all setting 0xff....\n"
+.LC188:
+	.string	"load_l2p_region = %x,%x,%x, %x\n"
+.LC189:
+	.string	"pm_ppa:"
+.LC190:
+	.string	"data:"
+.LC191:
+	.string	"spare:"
+.LC192:
+	.string	"pm_init posr %x %x %x\n"
+.LC193:
+	.string	"pm_init recovery %x %x %x\n"
+.LC194:
+	.string	"pm_log2phys  lpn = %d, max lpn = %d\n"
+.LC195:
+	.string	"ftl_read_ahead refresh =%x, lpa = %x, ppa= %x\n"
+.LC196:
+	.string	"id=%d, lpa = %x, ppa = %x spare = %x %x %x %x\n"
+.LC197:
+	.string	"ppa = %x, status = %x, data:%x %x %x %x, spare: %x %x %x %x\n"
+.LC198:
+	.string	"ppa = %x, status = %x, %x %x spare: %x %x %x %x\n"
+.LC199:
+	.string	"gc_recovery"
+.LC200:
+	.string	"gc_recovery: %x vpn = %x\n"
+.LC201:
+	.string	"_c_user_data_density := %d\n"
+.LC202:
+	.string	"_c_totle_phy_density := %d\n"
+.LC203:
+	.string	"_c_totle_log_page := %d\n"
+.LC204:
+	.string	"_c_totle_data_density := %d\n"
+.LC205:
+	.string	"_c_ftl_pm_page_num := %d\n"
+.LC206:
+	.string	"_c_ftl_byte_pre_page := %d\n"
+.LC207:
+	.string	"_c_max_pm_sblk := %d\n"
+.LC208:
+	.string	"_min_slc_super_block := %d\n"
+.LC209:
+	.string	"_max_xlc_super_block := %d\n"
+.LC210:
+	.string	"gp_ftl_ext_info %p %p %p\n"
+.LC211:
+	.string	"flash info size: %d %d %d\n"
+.LC212:
+	.string	"ftl_init %x\n"
+.LC213:
+	.string	"gc_update_l2p_map_new sblk %x\n"
+.LC214:
+	.string	"gc_update_l2p_map_new: %x %x %x\n"
+.LC215:
+	.string	"0lpa: %x %x %x\n"
+.LC216:
+	.string	"lpa: %x %x %x\n"
+.LC217:
+	.string	"gc_update_l2p_map_new: %x vpn = %x vpn1 = %x done\n"
+.LC218:
+	.string	"gc_block_vpn_scan = %x, s vpn0 = %d, c vpn1 = %d f:%d\n"
+.LC219:
+	.string	"ftl_sblk_dump = %x %x %x %x\n"
+.LC220:
+	.string	"page_addr = %x, lpa=%x vpn = %d\n"
+.LC221:
+	.string	"index= %x, lpa=%x\n"
+.LC222:
+	.string	"block = %x, vpn=%x check vpn = %d\n"
+.LC223:
+	.string	"ftl_read %x %x %x\n"
+.LC224:
+	.string	"ftl_read refresh =%x, lpa = %x, ppa= %x\n"
+.LC225:
+	.string	"acblk = %x, tempblk = %x, gc_des = %x\n"
+.LC226:
+	.string	"acblk = %x, free page = %x, vpn = %x %x\n"
+.LC227:
+	.string	"tmp_blk = %x, free page = %x, vpn = %x %x\n"
+.LC228:
+	.string	"vpn_check lpa = %x, ppa = %x, blk = %x\n"
+.LC229:
+	.string	"l2p"
+.LC230:
+	.string	"vpn_check %x = c %x  s %x function: %x\n"
+.LC231:
+	.string	"vpn_check blk = %x fix vpc\n"
+.LC232:
+	.string	"...%s exit...%d\n"
+.LC233:
+	.string	"gc_scan_src_blk = %x, vpn = %d\n"
+.LC234:
+	.string	"gc_scan_src_blk = %x, s vpn0 = %d, c vpn1 = %d\n"
+.LC235:
+	.string	"ftl_scan_all_data = %x\n"
+.LC236:
+	.string	"scan lpa = %x ppa= %x\n"
+.LC237:
+	.string	"lba = %x,addr= %x, ststus = %x, spare= %x %x %x %x data=%x %x\n"
+.LC238:
+	.string	"lba = %x, id= %x, index = %x hash ppa = %x\n"
+.LC239:
+	.string	"0pm:"
+.LC240:
+	.string	"1pm:"
+.LC241:
+	.string	"zftl debug cmd: %s\n"
+.LC242:
+	.string	"cmd:"
+.LC243:
+	.string	"dumpl2p"
+.LC244:
+	.string	"pm l2p:"
+.LC245:
+	.string	"pm blk:"
+.LC246:
+	.string	"dumppm:"
+.LC247:
+	.string	"p_cmd: %s\n"
+.LC248:
+	.string	"pm ram = %x, %x\n"
+.LC249:
+	.string	"ram:"
+.LC250:
+	.string	"pm:"
+.LC251:
+	.string	"dumpsys"
+.LC252:
+	.string	"dumplist"
+.LC253:
+	.string	"vpncheck"
+.LC254:
+	.string	"dumpppa:"
+.LC255:
+	.string	"dumpblk:"
+.LC256:
+	.string	"setzdebug:"
+.LC257:
+	.string	"lpa2ppa:"
+.LC258:
+	.string	"lpa: %x--> ppa: %x\n"
+.LC259:
+	.string	"help:\n"
+.LC260:
+	.string	"1. echo dumpl2p > /proc/zftl_debug\n"
+.LC261:
+	.string	"2. echo dumppm:x > /proc/zftl_debug\n"
+.LC262:
+	.string	"3. echo dumpsys > /proc/zftl_debug\n"
+.LC263:
+	.string	"4. echo dumpppa:x > /proc/zftl_debug\n"
+.LC264:
+	.string	"5. echo vpncheck > /proc/zftl_debug\n"
+.LC265:
+	.string	"6. echo setzdebug:x > /proc/zftl_debug\n"
+.LC266:
+	.string	"7. echo dumplist > /proc/zftl_debug\n"
+.LC267:
+	.string	"8. echo lpa2ppa:x> /proc/zftl_debug\n"
+.LC268:
+	.string	"ftl_update_l2p_map: %x %x %x\n"
+.LC269:
+	.string	"ftl_update_l2p_map"
+.LC270:
+	.string	"lpa_tbl:"
+.LC271:
+	.string	"sblk %x vpn: %d %d\n"
+.LC272:
+	.string	"%d read error: ppa:%x, lpa:%x, status:%x\n"
+.LC273:
+	.string	"gc page in buf: lpa %x ppa = %x pageindex= %x\n"
+.LC274:
+	.string	"gc_do_copy_back: lpa %x des_ppa = %x %x gc_ppa= %x page_index= %d\n"
+.LC275:
+	.string	"gc_do_copy_back: %x %x %x %x gc_ppa:%x %x\n"
+.LC276:
+	.string	"%d prog_step: %x %x buf id= %x ppa = %x hash=%x id = %x plane = %x lpa=%x\n"
+.LC277:
+	.string	"ftl_discard:(%x, %x, %x, %x)\n"
+.LC278:
+	.string	"gc %d: %d %d %d %d %d %d %d\n"
+.LC279:
+	.string	"gc %d: %d %d %d %d %d %d\n"
+.LC280:
+	.string	"GC_STATE_SCAN_ALL_PAGE = %x, vpn0 = %d, vpn1 = %d\n"
+.LC281:
+	.string	"gc free %x, %d\n"
+.LC282:
+	.string	"error gc slc free sblk = %x, vpn = %d %d\n"
+.LC283:
+	.string	"vpage0:"
+.LC284:
+	.string	"block %x, vpn = %d %d %d %d\n"
+.LC285:
+	.string	"block %x, vpn = %d %d\n"
+.LC286:
+	.string	"vpage1:"
+.LC287:
+	.string	"ftlwrite %x %x %x\n"
+.LC288:
+	.string	"id_block_prog_msb_ff_data slc page = %d pageadd=%x %x\n"
+.LC289:
+	.string	"write_idblock fix data %x %x\n"
+.LC290:
+	.string	"1 write_idblock fix data %x %x %x\n"
+.LC291:
+	.string	"READ_SECTOR_IO\n"
+.LC292:
+	.string	"rk_copy_from_user error\n"
+.LC293:
+	.string	"READ_SECTOR_IO %x %x\n"
+.LC294:
+	.string	"rk_copy_to_user error\n"
+.LC295:
+	.string	"WRITE_SECTOR_IO\n"
+.LC296:
+	.string	"WRITE_SECTOR_IO %x %x\n"
+.LC297:
+	.string	"END_WRITE_SECTOR_IO\n"
+.LC298:
+	.string	"END_WRITE_SECTOR_IO %x %x\n"
+.LC299:
+	.string	"GET_FLASH_INFO_IO\n"
+.LC300:
+	.string	"GET_BAD_BLOCK_IO\n"
+.LC301:
+	.string	"GET_LOCK_FLAG_IO\n"
+.LC302:
+	.string	"GET_PUBLIC_KEY_IO\n"
+.LC303:
+	.string	"RKNAND_GET_DRM_KEY\n"
+.LC304:
+	.string	"RKNAND_STORE_DRM_KEY\n"
+.LC305:
+	.string	"RKNAND_DIASBLE_SECURE_BOOT\n"
+.LC306:
+	.string	"RKNAND_ENASBLE_SECURE_BOOT\n"
+.LC307:
+	.string	"RKNAND_GET_SN_SECTOR\n"
+.LC308:
+	.string	"RKNAND_LOADER_UNLOCK\n"
+.LC309:
+	.string	"RKNAND_LOADER_STATUS\n"
+.LC310:
+	.string	"RKNAND_LOADER_LOCK\n"
+.LC311:
+	.string	"LockKey not match %d\n"
+.LC312:
+	.string	"RKNAND_GET_VENDOR_SECTOR\n"
+.LC313:
+	.string	"RKNAND_STORE_VENDOR_SECTOR\n"
+.LC314:
+	.string	"return ret = %lx\n"
+.LC315:
+	.string	"secureBootEn check error\n"
+.LC316:
+	.string	"\0013vendor storage %x,%x,%x\n"
+	.data
+	.align	3
+.LANCHOR2 = . + 0
+	.type	zftl_debug, %object
+	.size	zftl_debug, 4
+zftl_debug:
+	.word	17476
+	.zero	4
+	.type	sd15_tlc_rr, %object
+	.size	sd15_tlc_rr, 329
+sd15_tlc_rr:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	16
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	-24
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-32
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	0
+	.byte	-16
+	.byte	-24
+	.byte	-16
+	.byte	8
+	.byte	8
+	.byte	-8
+	.byte	-16
+	.byte	-16
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	8
+	.byte	8
+	.byte	-8
+	.byte	-8
+	.byte	-24
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	0
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-24
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-24
+	.byte	-8
+	.byte	8
+	.byte	-8
+	.byte	0
+	.byte	-8
+	.byte	8
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	8
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-8
+	.byte	8
+	.byte	-8
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-16
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-16
+	.byte	8
+	.byte	0
+	.byte	8
+	.byte	0
+	.byte	-16
+	.byte	-8
+	.byte	-16
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	0
+	.byte	-8
+	.byte	8
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-16
+	.byte	-8
+	.byte	-16
+	.byte	-16
+	.byte	-16
+	.byte	-16
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	-24
+	.byte	0
+	.byte	8
+	.byte	8
+	.byte	16
+	.byte	16
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	8
+	.byte	16
+	.byte	-8
+	.byte	24
+	.byte	0
+	.byte	8
+	.byte	-4
+	.byte	0
+	.byte	16
+	.byte	8
+	.byte	24
+	.byte	8
+	.byte	0
+	.byte	-4
+	.byte	-8
+	.byte	24
+	.byte	16
+	.byte	16
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	4
+	.byte	0
+	.byte	-4
+	.byte	-4
+	.byte	-4
+	.byte	8
+	.byte	8
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	-4
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	8
+	.byte	0
+	.byte	16
+	.byte	-4
+	.byte	16
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	16
+	.byte	-4
+	.byte	16
+	.byte	-16
+	.byte	-8
+	.byte	-8
+	.byte	-8
+	.byte	8
+	.byte	-4
+	.byte	8
+	.byte	-24
+	.byte	4
+	.byte	-16
+	.byte	0
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	8
+	.byte	-16
+	.byte	8
+	.byte	0
+	.byte	8
+	.byte	-24
+	.byte	-32
+	.byte	16
+	.byte	-24
+	.byte	8
+	.byte	-8
+	.byte	8
+	.byte	-24
+	.byte	-32
+	.byte	8
+	.byte	0
+	.byte	16
+	.byte	0
+	.byte	16
+	.byte	0
+	.byte	-32
+	.byte	4
+	.byte	0
+	.byte	-8
+	.byte	-16
+	.byte	-8
+	.byte	0
+	.byte	-32
+	.byte	4
+	.byte	0
+	.byte	8
+	.byte	-24
+	.byte	8
+	.byte	0
+	.byte	-32
+	.byte	4
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-4
+	.byte	0
+	.byte	-24
+	.byte	4
+	.byte	0
+	.byte	16
+	.byte	-24
+	.byte	16
+	.byte	0
+	.byte	-24
+	.byte	-4
+	.byte	0
+	.byte	8
+	.byte	-32
+	.byte	8
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	0
+	.byte	-4
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-8
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	-16
+	.byte	0
+	.byte	0
+	.byte	-24
+	.byte	0
+	.byte	-32
+	.byte	0
+	.byte	-32
+	.byte	0
+	.zero	7
+	.type	sd15_slc_rr, %object
+	.size	sd15_slc_rr, 25
+sd15_slc_rr:
+	.byte	0
+	.byte	8
+	.byte	-8
+	.byte	16
+	.byte	-16
+	.byte	24
+	.byte	-24
+	.byte	32
+	.byte	-32
+	.byte	32
+	.byte	-40
+	.byte	48
+	.byte	-48
+	.byte	56
+	.byte	-56
+	.byte	64
+	.byte	-64
+	.byte	72
+	.byte	-72
+	.byte	80
+	.byte	-80
+	.byte	88
+	.byte	96
+	.byte	104
+	.byte	112
+	.zero	7
+	.type	g_nand_para_info, %object
+	.size	g_nand_para_info, 32
+g_nand_para_info:
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-104
+	.byte	-77
+	.byte	118
+	.byte	114
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	768
+	.byte	3
+	.byte	2
+	.hword	758
+	.hword	5593
+	.byte	0
+	.byte	37
+	.byte	60
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.type	hy_f26_ref_value, %object
+	.size	hy_f26_ref_value, 28
+hy_f26_ref_value:
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	10
+	.byte	6
+	.byte	0
+	.byte	-3
+	.byte	-7
+	.byte	-8
+	.byte	0
+	.byte	-6
+	.byte	-13
+	.byte	-15
+	.byte	0
+	.byte	-11
+	.byte	-20
+	.byte	-23
+	.byte	0
+	.byte	0
+	.byte	-26
+	.byte	-30
+	.byte	0
+	.byte	0
+	.byte	-32
+	.byte	-37
+	.zero	4
+	.type	zftl_nand_flash_para_tbl, %object
+	.size	zftl_nand_flash_para_tbl, 960
+zftl_nand_flash_para_tbl:
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-104
+	.byte	-77
+	.byte	118
+	.byte	114
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	768
+	.byte	3
+	.byte	2
+	.hword	758
+	.hword	5593
+	.byte	0
+	.byte	37
+	.byte	60
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	60
+	.byte	-104
+	.byte	-77
+	.byte	118
+	.byte	114
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	768
+	.byte	3
+	.byte	2
+	.hword	1478
+	.hword	5593
+	.byte	0
+	.byte	37
+	.byte	60
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-104
+	.byte	-93
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	384
+	.byte	3
+	.byte	2
+	.hword	1446
+	.hword	1497
+	.byte	0
+	.byte	36
+	.byte	60
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1074
+	.hword	17881
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	2092
+	.hword	17857
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2106
+	.hword	17881
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	81
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1056
+	.hword	17881
+	.byte	2
+	.byte	35
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	17857
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	17881
+	.byte	2
+	.byte	34
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	17857
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-104
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	1
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	17881
+	.byte	2
+	.byte	33
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	58
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2106
+	.hword	17881
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	81
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1074
+	.hword	17881
+	.byte	2
+	.byte	68
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1058
+	.hword	17881
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-34
+	.byte	-108
+	.byte	-109
+	.byte	118
+	.byte	80
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	17881
+	.byte	2
+	.byte	67
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	69
+	.byte	-41
+	.byte	-124
+	.byte	-109
+	.byte	114
+	.byte	87
+	.byte	8
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	1
+	.hword	1060
+	.hword	17857
+	.byte	2
+	.byte	66
+	.byte	40
+	.byte	32
+	.byte	2
+	.byte	1
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	1
+	.byte	-94
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	50
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1048
+	.hword	9695
+	.byte	5
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.hword	512
+	.byte	2
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	86
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	24
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	700
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	68
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1064
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	84
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	100
+	.byte	84
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	1
+	.hword	1024
+	.hword	479
+	.byte	4
+	.byte	18
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	512
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	100
+	.byte	68
+	.byte	75
+	.byte	-87
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	4
+	.hword	1024
+	.hword	449
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	256
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	100
+	.byte	60
+	.byte	-91
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1024
+	.hword	479
+	.byte	3
+	.byte	17
+	.byte	40
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	1
+	.byte	0
+	.hword	512
+	.byte	3
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	52
+	.byte	-92
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1096
+	.hword	9695
+	.byte	5
+	.byte	19
+	.byte	70
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.hword	512
+	.byte	2
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	5
+	.byte	44
+	.byte	-124
+	.byte	68
+	.byte	50
+	.byte	-86
+	.byte	0
+	.byte	4
+	.byte	1
+	.byte	32
+	.hword	512
+	.byte	2
+	.byte	2
+	.hword	1096
+	.hword	9695
+	.byte	5
+	.byte	19
+	.byte	60
+	.byte	32
+	.byte	1
+	.byte	0
+	.byte	4
+	.byte	0
+	.hword	512
+	.byte	2
+	.byte	-38
+	.byte	-33
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1056
+	.hword	473
+	.byte	2
+	.byte	6
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	4
+	.byte	0
+	.hword	256
+	.byte	2
+	.byte	-65
+	.byte	-66
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	-108
+	.byte	-21
+	.byte	116
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1066
+	.hword	473
+	.byte	1
+	.byte	7
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.hword	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-34
+	.byte	20
+	.byte	-89
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1060
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.hword	256
+	.byte	2
+	.byte	-65
+	.byte	-66
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	-41
+	.byte	-108
+	.byte	-111
+	.byte	96
+	.byte	68
+	.byte	2
+	.byte	1
+	.byte	16
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	1046
+	.hword	473
+	.byte	1
+	.byte	3
+	.byte	40
+	.byte	32
+	.byte	4
+	.byte	1
+	.byte	3
+	.byte	0
+	.hword	256
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	0
+	.byte	6
+	.byte	-83
+	.byte	58
+	.byte	20
+	.byte	-85
+	.byte	66
+	.byte	74
+	.byte	2
+	.byte	1
+	.byte	32
+	.hword	256
+	.byte	2
+	.byte	2
+	.hword	2092
+	.hword	473
+	.byte	2
+	.byte	5
+	.byte	40
+	.byte	32
+	.byte	3
+	.byte	1
+	.byte	3
+	.byte	0
+	.hword	256
+	.byte	2
+	.byte	-65
+	.byte	-66
+	.byte	0
+	.type	nand_opt_para, %object
+	.size	nand_opt_para, 128
+nand_opt_para:
+	.byte	1
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	50
+	.byte	17
+	.byte	-128
+	.byte	112
+	.byte	120
+	.byte	120
+	.byte	3
+	.byte	1
+	.byte	0
+	.zero	14
+	.byte	2
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	0
+	.byte	0
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.byte	3
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	-15
+	.byte	-14
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.byte	4
+	.byte	0
+	.byte	49
+	.byte	63
+	.byte	0
+	.byte	49
+	.byte	-128
+	.byte	21
+	.byte	96
+	.byte	96
+	.byte	17
+	.byte	-127
+	.byte	112
+	.byte	112
+	.byte	112
+	.byte	0
+	.byte	0
+	.byte	0
+	.zero	14
+	.type	tlc_prog_order, %object
+	.size	tlc_prog_order, 768
+tlc_prog_order:
+	.hword	1
+	.hword	9
+	.hword	2
+	.hword	17
+	.hword	10
+	.hword	3
+	.hword	25
+	.hword	18
+	.hword	11
+	.hword	33
+	.hword	26
+	.hword	19
+	.hword	41
+	.hword	34
+	.hword	27
+	.hword	49
+	.hword	42
+	.hword	35
+	.hword	57
+	.hword	50
+	.hword	43
+	.hword	65
+	.hword	58
+	.hword	51
+	.hword	73
+	.hword	66
+	.hword	59
+	.hword	81
+	.hword	74
+	.hword	67
+	.hword	89
+	.hword	82
+	.hword	75
+	.hword	97
+	.hword	90
+	.hword	83
+	.hword	105
+	.hword	98
+	.hword	91
+	.hword	113
+	.hword	106
+	.hword	99
+	.hword	121
+	.hword	114
+	.hword	107
+	.hword	129
+	.hword	122
+	.hword	115
+	.hword	137
+	.hword	130
+	.hword	123
+	.hword	145
+	.hword	138
+	.hword	131
+	.hword	153
+	.hword	146
+	.hword	139
+	.hword	161
+	.hword	154
+	.hword	147
+	.hword	169
+	.hword	162
+	.hword	155
+	.hword	177
+	.hword	170
+	.hword	163
+	.hword	185
+	.hword	178
+	.hword	171
+	.hword	193
+	.hword	186
+	.hword	179
+	.hword	201
+	.hword	194
+	.hword	187
+	.hword	209
+	.hword	202
+	.hword	195
+	.hword	217
+	.hword	210
+	.hword	203
+	.hword	225
+	.hword	218
+	.hword	211
+	.hword	233
+	.hword	226
+	.hword	219
+	.hword	241
+	.hword	234
+	.hword	227
+	.hword	249
+	.hword	242
+	.hword	235
+	.hword	257
+	.hword	250
+	.hword	243
+	.hword	265
+	.hword	258
+	.hword	251
+	.hword	273
+	.hword	266
+	.hword	259
+	.hword	281
+	.hword	274
+	.hword	267
+	.hword	289
+	.hword	282
+	.hword	275
+	.hword	297
+	.hword	290
+	.hword	283
+	.hword	305
+	.hword	298
+	.hword	291
+	.hword	313
+	.hword	306
+	.hword	299
+	.hword	321
+	.hword	314
+	.hword	307
+	.hword	329
+	.hword	322
+	.hword	315
+	.hword	337
+	.hword	330
+	.hword	323
+	.hword	345
+	.hword	338
+	.hword	331
+	.hword	353
+	.hword	346
+	.hword	339
+	.hword	361
+	.hword	354
+	.hword	347
+	.hword	369
+	.hword	362
+	.hword	355
+	.hword	377
+	.hword	370
+	.hword	363
+	.hword	385
+	.hword	378
+	.hword	371
+	.hword	393
+	.hword	386
+	.hword	379
+	.hword	401
+	.hword	394
+	.hword	387
+	.hword	409
+	.hword	402
+	.hword	395
+	.hword	417
+	.hword	410
+	.hword	403
+	.hword	425
+	.hword	418
+	.hword	411
+	.hword	433
+	.hword	426
+	.hword	419
+	.hword	441
+	.hword	434
+	.hword	427
+	.hword	449
+	.hword	442
+	.hword	435
+	.hword	457
+	.hword	450
+	.hword	443
+	.hword	465
+	.hword	458
+	.hword	451
+	.hword	473
+	.hword	466
+	.hword	459
+	.hword	481
+	.hword	474
+	.hword	467
+	.hword	489
+	.hword	482
+	.hword	475
+	.hword	497
+	.hword	490
+	.hword	483
+	.hword	505
+	.hword	498
+	.hword	491
+	.hword	513
+	.hword	506
+	.hword	499
+	.hword	521
+	.hword	514
+	.hword	507
+	.hword	529
+	.hword	522
+	.hword	515
+	.hword	537
+	.hword	530
+	.hword	523
+	.hword	545
+	.hword	538
+	.hword	531
+	.hword	553
+	.hword	546
+	.hword	539
+	.hword	561
+	.hword	554
+	.hword	547
+	.hword	569
+	.hword	562
+	.hword	555
+	.hword	577
+	.hword	570
+	.hword	563
+	.hword	585
+	.hword	578
+	.hword	571
+	.hword	593
+	.hword	586
+	.hword	579
+	.hword	601
+	.hword	594
+	.hword	587
+	.hword	609
+	.hword	602
+	.hword	595
+	.hword	617
+	.hword	610
+	.hword	603
+	.hword	625
+	.hword	618
+	.hword	611
+	.hword	633
+	.hword	626
+	.hword	619
+	.hword	641
+	.hword	634
+	.hword	627
+	.hword	649
+	.hword	642
+	.hword	635
+	.hword	657
+	.hword	650
+	.hword	643
+	.hword	665
+	.hword	658
+	.hword	651
+	.hword	673
+	.hword	666
+	.hword	659
+	.hword	681
+	.hword	674
+	.hword	667
+	.hword	689
+	.hword	682
+	.hword	675
+	.hword	697
+	.hword	690
+	.hword	683
+	.hword	705
+	.hword	698
+	.hword	691
+	.hword	713
+	.hword	706
+	.hword	699
+	.hword	721
+	.hword	714
+	.hword	707
+	.hword	729
+	.hword	722
+	.hword	715
+	.hword	737
+	.hword	730
+	.hword	723
+	.hword	745
+	.hword	738
+	.hword	731
+	.hword	753
+	.hword	746
+	.hword	739
+	.hword	761
+	.hword	754
+	.hword	747
+	.hword	769
+	.hword	762
+	.hword	755
+	.hword	777
+	.hword	770
+	.hword	763
+	.hword	785
+	.hword	778
+	.hword	771
+	.hword	793
+	.hword	786
+	.hword	779
+	.hword	801
+	.hword	794
+	.hword	787
+	.hword	809
+	.hword	802
+	.hword	795
+	.hword	817
+	.hword	810
+	.hword	803
+	.hword	825
+	.hword	818
+	.hword	811
+	.hword	833
+	.hword	826
+	.hword	819
+	.hword	841
+	.hword	834
+	.hword	827
+	.hword	849
+	.hword	842
+	.hword	835
+	.hword	857
+	.hword	850
+	.hword	843
+	.hword	865
+	.hword	858
+	.hword	851
+	.hword	873
+	.hword	866
+	.hword	859
+	.hword	881
+	.hword	874
+	.hword	867
+	.hword	889
+	.hword	882
+	.hword	875
+	.hword	897
+	.hword	890
+	.hword	883
+	.hword	905
+	.hword	898
+	.hword	891
+	.hword	913
+	.hword	906
+	.hword	899
+	.hword	921
+	.hword	914
+	.hword	907
+	.hword	929
+	.hword	922
+	.hword	915
+	.hword	937
+	.hword	930
+	.hword	923
+	.hword	945
+	.hword	938
+	.hword	931
+	.hword	953
+	.hword	946
+	.hword	939
+	.hword	961
+	.hword	954
+	.hword	947
+	.hword	969
+	.hword	962
+	.hword	955
+	.hword	977
+	.hword	970
+	.hword	963
+	.hword	985
+	.hword	978
+	.hword	971
+	.hword	993
+	.hword	986
+	.hword	979
+	.hword	1001
+	.hword	994
+	.hword	987
+	.hword	1009
+	.hword	1002
+	.hword	995
+	.hword	1017
+	.hword	1010
+	.hword	1003
+	.hword	1018
+	.hword	1011
+	.hword	1019
+	.type	gTable_Crc32, %object
+	.size	gTable_Crc32, 1024
+gTable_Crc32:
+	.word	0
+	.word	79760823
+	.word	159521646
+	.word	222500569
+	.word	319043292
+	.word	398801771
+	.word	445001138
+	.word	507977733
+	.word	638086584
+	.word	583622671
+	.word	797603542
+	.word	726367073
+	.word	890002276
+	.word	835540691
+	.word	1015955466
+	.word	944721341
+	.word	1276173168
+	.word	1221711559
+	.word	1167245342
+	.word	1096011177
+	.word	1595207084
+	.word	1540743195
+	.word	1452734146
+	.word	1381497717
+	.word	1780004552
+	.word	1859763071
+	.word	1671081382
+	.word	1734058001
+	.word	2031910932
+	.word	2111671715
+	.word	1889442682
+	.word	1952421581
+	.word	-1742620960
+	.word	-1662993577
+	.word	-1851544178
+	.word	-1788698567
+	.word	-1960476612
+	.word	-1880846965
+	.word	-2102944942
+	.word	-2040097051
+	.word	-1104553128
+	.word	-1159145745
+	.word	-1213480906
+	.word	-1284846207
+	.word	-1389499004
+	.word	-1444093901
+	.word	-1531971862
+	.word	-1603339427
+	.word	-734958192
+	.word	-789553113
+	.word	-575441154
+	.word	-646808759
+	.word	-952804532
+	.word	-1007397125
+	.word	-826851294
+	.word	-898216555
+	.word	-231145432
+	.word	-151515745
+	.word	-71623866
+	.word	-8775951
+	.word	-516081932
+	.word	-436454589
+	.word	-390124134
+	.word	-327278547
+	.word	880959607
+	.word	809725376
+	.word	1023441689
+	.word	968980142
+	.word	663115435
+	.word	591878940
+	.word	772033989
+	.word	717570162
+	.word	311037391
+	.word	374014072
+	.word	453514913
+	.word	533273366
+	.word	26098451
+	.word	89077412
+	.word	135012477
+	.word	214773194
+	.word	2022882055
+	.word	2085861040
+	.word	1896915049
+	.word	1976675806
+	.word	1805028827
+	.word	1868005484
+	.word	1645516469
+	.word	1725274882
+	.word	1587205823
+	.word	1515969288
+	.word	1461243345
+	.word	1406779494
+	.word	1302257763
+	.word	1231023572
+	.word	1142749965
+	.word	1088288442
+	.word	-1398548841
+	.word	-1469916384
+	.word	-1524511239
+	.word	-1579106226
+	.word	-1079517109
+	.word	-1150882308
+	.word	-1239024859
+	.word	-1293617518
+	.word	-1968456913
+	.word	-1905609064
+	.word	-2094423999
+	.word	-2014794250
+	.word	-1716548109
+	.word	-1653702588
+	.word	-1876060515
+	.word	-1796433110
+	.word	-525136409
+	.word	-462290864
+	.word	-382658935
+	.word	-303031490
+	.word	-206095557
+	.word	-143247732
+	.word	-97181611
+	.word	-17551902
+	.word	-960798625
+	.word	-1032163864
+	.word	-818316495
+	.word	-872909178
+	.word	-708880765
+	.word	-780248268
+	.word	-599962131
+	.word	-654557094
+	.word	1761919214
+	.word	1841679705
+	.word	1619450752
+	.word	1682429495
+	.word	2046883378
+	.word	2126642053
+	.word	1937960284
+	.word	2000937195
+	.word	1326230870
+	.word	1271767265
+	.word	1183757880
+	.word	1112521615
+	.word	1544067978
+	.word	1489606205
+	.word	1435140324
+	.word	1363905875
+	.word	622074782
+	.word	567612969
+	.word	748028144
+	.word	676793671
+	.word	907029826
+	.word	852566261
+	.word	1066546732
+	.word	995310491
+	.word	52196902
+	.word	131955601
+	.word	178154824
+	.word	241131775
+	.word	270024954
+	.word	349785421
+	.word	429546388
+	.word	492525091
+	.word	-249203186
+	.word	-169575495
+	.word	-123245216
+	.word	-60399401
+	.word	-501137198
+	.word	-421507739
+	.word	-341615684
+	.word	-278768117
+	.word	-684909642
+	.word	-739502591
+	.word	-558956328
+	.word	-630321809
+	.word	-1003934358
+	.word	-1058529059
+	.word	-844417532
+	.word	-915784781
+	.word	-1120555650
+	.word	-1175150391
+	.word	-1263028720
+	.word	-1334395993
+	.word	-1372480606
+	.word	-1427073515
+	.word	-1481408308
+	.word	-1552773765
+	.word	-1690451770
+	.word	-1610822287
+	.word	-1832920152
+	.word	-1770072545
+	.word	-2009467366
+	.word	-1929839699
+	.word	-2118390412
+	.word	-2055544637
+	.word	1569104025
+	.word	1497869614
+	.word	1409596407
+	.word	1355134528
+	.word	1317180997
+	.word	1245944818
+	.word	1191218475
+	.word	1136754844
+	.word	2072956193
+	.word	2135933078
+	.word	1913443919
+	.word	1993202680
+	.word	1753938941
+	.word	1816917578
+	.word	1627971731
+	.word	1707732260
+	.word	295074793
+	.word	358053470
+	.word	403988615
+	.word	483749168
+	.word	43142453
+	.word	106119298
+	.word	185620059
+	.word	265378796
+	.word	933107281
+	.word	861871078
+	.word	1042025791
+	.word	987562120
+	.word	614080653
+	.word	542846266
+	.word	756562915
+	.word	702101076
+	.word	-978905479
+	.word	-1050272818
+	.word	-869987049
+	.word	-924581728
+	.word	-693952347
+	.word	-765317870
+	.word	-551470133
+	.word	-606062980
+	.word	-475038783
+	.word	-412191114
+	.word	-366124881
+	.word	-286495464
+	.word	-257209059
+	.word	-194363222
+	.word	-114731405
+	.word	-35103804
+	.word	-1984443127
+	.word	-1921597250
+	.word	-2143955353
+	.word	-2064327728
+	.word	-1699480619
+	.word	-1636632990
+	.word	-1825447749
+	.word	-1745818356
+	.word	-1346395983
+	.word	-1417761530
+	.word	-1505903649
+	.word	-1560496536
+	.word	-1128556947
+	.word	-1199924262
+	.word	-1254519549
+	.word	-1309114188
+	.bss
+	.align	6
+.LANCHOR0 = . + 0
+.LANCHOR4 = . + 4352
+.LANCHOR5 = . + 21760
+.LANCHOR6 = . + 39168
+.LANCHOR7 = . + 52224
+.LANCHOR8 = . + 56576
+.LANCHOR9 = . + 60928
+	.type	g_nandc_ver, %object
+	.size	g_nandc_ver, 1
+g_nandc_ver:
+	.zero	1
+	.zero	3
+	.type	_c_user_data_density, %object
+	.size	_c_user_data_density, 4
+_c_user_data_density:
+	.zero	4
+	.type	gp_sblk_list_tbl, %object
+	.size	gp_sblk_list_tbl, 8
+gp_sblk_list_tbl:
+	.zero	8
+	.type	gp_nandc, %object
+	.size	gp_nandc, 8
+gp_nandc:
+	.zero	8
+	.type	NANDC_FMCTL, %object
+	.size	NANDC_FMCTL, 4
+NANDC_FMCTL:
+	.zero	4
+	.type	NANDC_FMWAIT, %object
+	.size	NANDC_FMWAIT, 4
+NANDC_FMWAIT:
+	.zero	4
+	.type	NANDC_FLCTL, %object
+	.size	NANDC_FLCTL, 4
+NANDC_FLCTL:
+	.zero	4
+	.type	NANDC_BCHCTL, %object
+	.size	NANDC_BCHCTL, 4
+NANDC_BCHCTL:
+	.zero	4
+	.type	NANDC_DLL_CTL_REG0, %object
+	.size	NANDC_DLL_CTL_REG0, 4
+NANDC_DLL_CTL_REG0:
+	.zero	4
+	.type	NANDC_DLL_CTL_REG1, %object
+	.size	NANDC_DLL_CTL_REG1, 4
+NANDC_DLL_CTL_REG1:
+	.zero	4
+	.type	NANDC_RANDMZ_CFG, %object
+	.size	NANDC_RANDMZ_CFG, 4
+NANDC_RANDMZ_CFG:
+	.zero	4
+	.type	NANDC_FMWAIT_SYN, %object
+	.size	NANDC_FMWAIT_SYN, 4
+NANDC_FMWAIT_SYN:
+	.zero	4
+	.type	_c_ftl_blk_pre_plane, %object
+	.size	_c_ftl_blk_pre_plane, 2
+_c_ftl_blk_pre_plane:
+	.zero	2
+	.zero	6
+	.type	gp_blk_info, %object
+	.size	gp_blk_info, 8
+gp_blk_info:
+	.zero	8
+	.type	ftl_sblk_vpn, %object
+	.size	ftl_sblk_vpn, 8
+ftl_sblk_vpn:
+	.zero	8
+	.type	gp_ftl_ext_info, %object
+	.size	gp_ftl_ext_info, 8
+gp_ftl_ext_info:
+	.zero	8
+	.type	gp_nand_para_info, %object
+	.size	gp_nand_para_info, 8
+gp_nand_para_info:
+	.zero	8
+	.type	g_idb_ecc_bits, %object
+	.size	g_idb_ecc_bits, 1
+g_idb_ecc_bits:
+	.zero	1
+	.type	g_flash_slc_mode, %object
+	.size	g_flash_slc_mode, 1
+g_flash_slc_mode:
+	.zero	1
+	.type	g_nand_max_die, %object
+	.size	g_nand_max_die, 1
+g_nand_max_die:
+	.zero	1
+	.zero	5
+	.type	g_nand_opt_para, %object
+	.size	g_nand_opt_para, 32
+g_nand_opt_para:
+	.zero	32
+	.type	g_flash_toggle_mode_en, %object
+	.size	g_flash_toggle_mode_en, 1
+g_flash_toggle_mode_en:
+	.zero	1
+	.type	nandc_hw_seed, %object
+	.size	nandc_hw_seed, 1
+nandc_hw_seed:
+	.zero	1
+	.zero	6
+	.type	g_nandc_v6_master_info, %object
+	.size	g_nandc_v6_master_info, 40
+g_nandc_v6_master_info:
+	.zero	40
+	.type	nandc_randomizer_en, %object
+	.size	nandc_randomizer_en, 1
+nandc_randomizer_en:
+	.zero	1
+	.zero	1
+	.type	fill_spare_size, %object
+	.size	fill_spare_size, 2
+fill_spare_size:
+	.zero	2
+	.type	g_nandc_ecc_bits, %object
+	.size	g_nandc_ecc_bits, 1
+g_nandc_ecc_bits:
+	.zero	1
+	.type	g_retryMode, %object
+	.size	g_retryMode, 1
+g_retryMode:
+	.zero	1
+	.type	g_maxRegNum, %object
+	.size	g_maxRegNum, 1
+g_maxRegNum:
+	.zero	1
+	.zero	1
+	.type	gp_flash_info, %object
+	.size	gp_flash_info, 8
+gp_flash_info:
+	.zero	8
+	.type	g_die_cs_idx, %object
+	.size	g_die_cs_idx, 8
+g_die_cs_idx:
+	.zero	8
+	.type	g_slc_mode_addr2, %object
+	.size	g_slc_mode_addr2, 1
+g_slc_mode_addr2:
+	.zero	1
+	.zero	1
+	.type	g_block_align_addr, %object
+	.size	g_block_align_addr, 2
+g_block_align_addr:
+	.zero	2
+	.type	g_lsb_page_tbl, %object
+	.size	g_lsb_page_tbl, 512
+g_lsb_page_tbl:
+	.zero	512
+	.zero	4
+	.type	g_flash_cur_mode, %object
+	.size	g_flash_cur_mode, 4
+g_flash_cur_mode:
+	.zero	4
+	.type	IDByte, %object
+	.size	IDByte, 32
+IDByte:
+	.zero	32
+	.type	g_flash_interface_mode, %object
+	.size	g_flash_interface_mode, 1
+g_flash_interface_mode:
+	.zero	1
+	.type	g_flash_multi_page_prog_en, %object
+	.size	g_flash_multi_page_prog_en, 1
+g_flash_multi_page_prog_en:
+	.zero	1
+	.zero	2
+	.type	g_buf, %object
+	.size	g_buf, 2048
+g_buf:
+	.zero	2048
+	.type	_c_ftl_sec_per_page, %object
+	.size	_c_ftl_sec_per_page, 1
+_c_ftl_sec_per_page:
+	.zero	1
+	.type	p_free_buf_head, %object
+	.size	p_free_buf_head, 1
+p_free_buf_head:
+	.zero	1
+	.type	free_buf_count, %object
+	.size	free_buf_count, 1
+free_buf_count:
+	.zero	1
+	.zero	1
+	.type	_c_totle_phy_density, %object
+	.size	_c_totle_phy_density, 4
+_c_totle_phy_density:
+	.zero	4
+	.type	_c_totle_log_page, %object
+	.size	_c_totle_log_page, 4
+_c_totle_log_page:
+	.zero	4
+	.type	free_slc_sblk, %object
+	.size	free_slc_sblk, 2
+free_slc_sblk:
+	.zero	2
+	.type	free_xlc_sblk, %object
+	.size	free_xlc_sblk, 2
+free_xlc_sblk:
+	.zero	2
+	.type	free_mix_sblk, %object
+	.size	free_mix_sblk, 2
+free_mix_sblk:
+	.zero	2
+	.type	slc_data_sblk, %object
+	.size	slc_data_sblk, 2
+slc_data_sblk:
+	.zero	2
+	.type	slc_cache_sblk, %object
+	.size	slc_cache_sblk, 2
+slc_cache_sblk:
+	.zero	2
+	.type	xlc_data_sblk, %object
+	.size	xlc_data_sblk, 2
+xlc_data_sblk:
+	.zero	2
+	.type	write_buf_count, %object
+	.size	write_buf_count, 1
+write_buf_count:
+	.zero	1
+	.type	write_commit_count, %object
+	.size	write_commit_count, 1
+write_commit_count:
+	.zero	1
+	.zero	6
+	.type	gp_ftl_info, %object
+	.size	gp_ftl_info, 8
+gp_ftl_info:
+	.zero	8
+	.type	gc_free_slc_sblk_th, %object
+	.size	gc_free_slc_sblk_th, 2
+gc_free_slc_sblk_th:
+	.zero	2
+	.type	gc_tlc_mode_tlc_vpn_th, %object
+	.size	gc_tlc_mode_tlc_vpn_th, 2
+gc_tlc_mode_tlc_vpn_th:
+	.zero	2
+	.type	gc_tlc_mode_slc_vpn_th, %object
+	.size	gc_tlc_mode_slc_vpn_th, 2
+gc_tlc_mode_slc_vpn_th:
+	.zero	2
+	.type	gc_slc_mode_vpn_th, %object
+	.size	gc_slc_mode_vpn_th, 2
+gc_slc_mode_vpn_th:
+	.zero	2
+	.type	gc_slc_mode_tlc_vpn_th, %object
+	.size	gc_slc_mode_tlc_vpn_th, 2
+gc_slc_mode_tlc_vpn_th:
+	.zero	2
+	.type	write_buf_head, %object
+	.size	write_buf_head, 1
+write_buf_head:
+	.zero	1
+	.zero	1
+	.type	read_ahead_lpa, %object
+	.size	read_ahead_lpa, 4
+read_ahead_lpa:
+	.zero	4
+	.type	p_read_ahead_ext_buf, %object
+	.size	p_read_ahead_ext_buf, 8
+p_read_ahead_ext_buf:
+	.zero	8
+	.type	sblk_read_completed_queue_head, %object
+	.size	sblk_read_completed_queue_head, 1
+sblk_read_completed_queue_head:
+	.zero	1
+	.zero	7
+	.type	g_gc_info, %object
+	.size	g_gc_info, 328
+g_gc_info:
+	.zero	328
+	.type	gc_valid_page_ppa, %object
+	.size	gc_valid_page_ppa, 8
+gc_valid_page_ppa:
+	.zero	8
+	.type	sblk_gc_write_completed_queue_head, %object
+	.size	sblk_gc_write_completed_queue_head, 1
+sblk_gc_write_completed_queue_head:
+	.zero	1
+	.type	_c_ftl_nand_type, %object
+	.size	_c_ftl_nand_type, 1
+_c_ftl_nand_type:
+	.zero	1
+	.zero	6
+	.type	gc_page_buf_id, %object
+	.size	gc_page_buf_id, 8
+gc_page_buf_id:
+	.zero	8
+	.type	g_flash_3d_tlc_flag, %object
+	.size	g_flash_3d_tlc_flag, 1
+g_flash_3d_tlc_flag:
+	.zero	1
+	.type	gc_mode, %object
+	.size	gc_mode, 1
+gc_mode:
+	.zero	1
+	.type	_c_ftl_page_pre_blk, %object
+	.size	_c_ftl_page_pre_blk, 2
+_c_ftl_page_pre_blk:
+	.zero	2
+	.type	_c_ftl_nand_planes_num, %object
+	.size	_c_ftl_nand_planes_num, 1
+_c_ftl_nand_planes_num:
+	.zero	1
+	.zero	3
+	.type	gp_data_xlc_data_head, %object
+	.size	gp_data_xlc_data_head, 8
+gp_data_xlc_data_head:
+	.zero	8
+	.type	gp_data_slc_data_head, %object
+	.size	gp_data_slc_data_head, 8
+gp_data_slc_data_head:
+	.zero	8
+	.type	gp_data_slc_cache_head, %object
+	.size	gp_data_slc_cache_head, 8
+gp_data_slc_cache_head:
+	.zero	8
+	.type	gc_slc_cache_index, %object
+	.size	gc_slc_cache_index, 2
+gc_slc_cache_index:
+	.zero	2
+	.type	gc_xlc_data_index, %object
+	.size	gc_xlc_data_index, 2
+gc_xlc_data_index:
+	.zero	2
+	.type	_c_ftl_page_pre_slc_blk, %object
+	.size	_c_ftl_page_pre_slc_blk, 2
+_c_ftl_page_pre_slc_blk:
+	.zero	2
+	.type	gc_slc_data_index, %object
+	.size	gc_slc_data_index, 2
+gc_slc_data_index:
+	.zero	2
+	.type	_min_slc_super_block, %object
+	.size	_min_slc_super_block, 2
+_min_slc_super_block:
+	.zero	2
+	.type	_max_xlc_super_block, %object
+	.size	_max_xlc_super_block, 2
+_max_xlc_super_block:
+	.zero	2
+	.zero	4
+	.type	gp_free_slc_head, %object
+	.size	gp_free_slc_head, 8
+gp_free_slc_head:
+	.zero	8
+	.type	gp_free_xlc_head, %object
+	.size	gp_free_xlc_head, 8
+gp_free_xlc_head:
+	.zero	8
+	.type	gp_free_mix_head, %object
+	.size	gp_free_mix_head, 8
+gp_free_mix_head:
+	.zero	8
+	.type	_c_ftl_planes_per_die, %object
+	.size	_c_ftl_planes_per_die, 1
+_c_ftl_planes_per_die:
+	.zero	1
+	.zero	1
+	.type	_c_ftl_block_addr_log2, %object
+	.size	_c_ftl_block_addr_log2, 2
+_c_ftl_block_addr_log2:
+	.zero	2
+	.type	_c_mix_max_slc_ec_count, %object
+	.size	_c_mix_max_slc_ec_count, 2
+_c_mix_max_slc_ec_count:
+	.zero	2
+	.type	_c_mix_max_xlc_ec_count, %object
+	.size	_c_mix_max_xlc_ec_count, 2
+_c_mix_max_xlc_ec_count:
+	.zero	2
+	.type	_max_slc_super_block, %object
+	.size	_max_slc_super_block, 2
+_max_slc_super_block:
+	.zero	2
+	.type	g_flash_3d_mlc_flag, %object
+	.size	g_flash_3d_mlc_flag, 1
+g_flash_3d_mlc_flag:
+	.zero	1
+	.zero	1
+	.type	_c_ftl_block_align_addr, %object
+	.size	_c_ftl_block_align_addr, 2
+_c_ftl_block_align_addr:
+	.zero	2
+	.type	_c_ftl_nand_die_num, %object
+	.size	_c_ftl_nand_die_num, 1
+_c_ftl_nand_die_num:
+	.zero	1
+	.zero	1
+	.type	lpa_hash, %object
+	.size	lpa_hash, 512
+lpa_hash:
+	.zero	512
+	.type	ftl_sblk_lpa_tbl, %object
+	.size	ftl_sblk_lpa_tbl, 8
+ftl_sblk_lpa_tbl:
+	.zero	8
+	.type	lpa_hash_index, %object
+	.size	lpa_hash_index, 8
+lpa_hash_index:
+	.zero	8
+	.type	ftl_vpn_update_count, %object
+	.size	ftl_vpn_update_count, 2
+ftl_vpn_update_count:
+	.zero	2
+	.type	ftl_sblk_vpn_update_id, %object
+	.size	ftl_sblk_vpn_update_id, 2
+ftl_sblk_vpn_update_id:
+	.zero	2
+	.type	sblk_write_completed_queue_head, %object
+	.size	sblk_write_completed_queue_head, 1
+sblk_write_completed_queue_head:
+	.zero	1
+	.type	sblk_queue_head, %object
+	.size	sblk_queue_head, 1
+sblk_queue_head:
+	.zero	1
+	.zero	2
+	.type	pm_gc_enable, %object
+	.size	pm_gc_enable, 4
+pm_gc_enable:
+	.zero	4
+	.zero	4
+	.type	pm_ram_info, %object
+	.size	pm_ram_info, 512
+pm_ram_info:
+	.zero	512
+	.type	pm_last_update_ram_id, %object
+	.size	pm_last_update_ram_id, 1
+pm_last_update_ram_id:
+	.zero	1
+	.zero	3
+	.type	g_msb_page_tbl, %object
+	.size	g_msb_page_tbl, 1024
+g_msb_page_tbl:
+	.zero	1024
+	.type	g_slc_page_num, %object
+	.size	g_slc_page_num, 2
+g_slc_page_num:
+	.zero	2
+	.zero	2
+	.type	g_die_addr, %object
+	.size	g_die_addr, 32
+g_die_addr:
+	.zero	32
+	.type	g_totle_phy_block, %object
+	.size	g_totle_phy_block, 2
+g_totle_phy_block:
+	.zero	2
+	.type	gc_state, %object
+	.size	gc_state, 1
+gc_state:
+	.zero	1
+	.zero	5
+	.type	gc_lpa_tbl, %object
+	.size	gc_lpa_tbl, 8
+gc_lpa_tbl:
+	.zero	8
+	.type	gc_pre_ppa_tbl, %object
+	.size	gc_pre_ppa_tbl, 8
+gc_pre_ppa_tbl:
+	.zero	8
+	.type	gc_des_ppa_tbl, %object
+	.size	gc_des_ppa_tbl, 8
+gc_des_ppa_tbl:
+	.zero	8
+	.type	_c_swl_slc_gc_th, %object
+	.size	_c_swl_slc_gc_th, 2
+_c_swl_slc_gc_th:
+	.zero	2
+	.type	_c_swl_xlc_gc_th, %object
+	.size	_c_swl_xlc_gc_th, 2
+_c_swl_xlc_gc_th:
+	.zero	2
+	.type	_c_max_pm_sblk, %object
+	.size	_c_max_pm_sblk, 2
+_c_max_pm_sblk:
+	.zero	2
+	.zero	2
+	.type	power_on_init_jiffies, %object
+	.size	power_on_init_jiffies, 8
+power_on_init_jiffies:
+	.zero	8
+	.type	gp_ftl_api, %object
+	.size	gp_ftl_api, 8
+gp_ftl_api:
+	.zero	8
+	.type	RK29_NANDC_REG_BASE, %object
+	.size	RK29_NANDC_REG_BASE, 8
+RK29_NANDC_REG_BASE:
+	.zero	8
+	.type	g_flash_tmp_page_buffer, %object
+	.size	g_flash_tmp_page_buffer, 8
+g_flash_tmp_page_buffer:
+	.zero	8
+	.type	g_nandc_tran_timeout, %object
+	.size	g_nandc_tran_timeout, 1
+g_nandc_tran_timeout:
+	.zero	1
+	.zero	7
+	.type	g_flash_tmp_spare_buffer, %object
+	.size	g_flash_tmp_spare_buffer, 8
+g_flash_tmp_spare_buffer:
+	.zero	8
+	.type	g_maxRetryCount, %object
+	.size	g_maxRetryCount, 1
+g_maxRetryCount:
+	.zero	1
+	.zero	7
+	.type	flash_read_retry, %object
+	.size	flash_read_retry, 8
+flash_read_retry:
+	.zero	8
+	.type	g_flash_sys_spare_buffer, %object
+	.size	g_flash_sys_spare_buffer, 8
+g_flash_sys_spare_buffer:
+	.zero	8
+	.type	g_flash_blk_info, %object
+	.size	g_flash_blk_info, 4
+g_flash_blk_info:
+	.zero	4
+	.zero	4
+	.type	g_flash_page_buffer, %object
+	.size	g_flash_page_buffer, 8
+g_flash_page_buffer:
+	.zero	8
+	.type	g_flash_spare_buffer, %object
+	.size	g_flash_spare_buffer, 8
+g_flash_spare_buffer:
+	.zero	8
+	.type	g_idb_slc_mode_enable, %object
+	.size	g_idb_slc_mode_enable, 1
+g_idb_slc_mode_enable:
+	.zero	1
+	.zero	47
+	.type	ftl_tmp_buffer, %object
+	.size	ftl_tmp_buffer, 16384
+ftl_tmp_buffer:
+	.zero	16384
+	.type	ftl_tmp_spare, %object
+	.size	ftl_tmp_spare, 256
+ftl_tmp_spare:
+	.zero	256
+	.type	g_flash_reversd_blks, %object
+	.size	g_flash_reversd_blks, 1
+g_flash_reversd_blks:
+	.zero	1
+	.type	write_commit_head, %object
+	.size	write_commit_head, 1
+write_commit_head:
+	.zero	1
+	.zero	2
+	.type	ftl_flush_jiffies, %object
+	.size	ftl_flush_jiffies, 4
+ftl_flush_jiffies:
+	.zero	4
+	.zero	56
+	.type	ftl_info_spare, %object
+	.size	ftl_info_spare, 256
+ftl_info_spare:
+	.zero	256
+	.type	g_ftl_info_blk, %object
+	.size	g_ftl_info_blk, 4
+g_ftl_info_blk:
+	.zero	4
+	.zero	60
+	.type	ftl_info_data_buffer, %object
+	.size	ftl_info_data_buffer, 16384
+ftl_info_data_buffer:
+	.zero	16384
+	.type	ftl_sys_info_first_write, %object
+	.size	ftl_sys_info_first_write, 1
+ftl_sys_info_first_write:
+	.zero	1
+	.type	ftl_power_lost_flag, %object
+	.size	ftl_power_lost_flag, 1
+ftl_power_lost_flag:
+	.zero	1
+	.type	ftl_ext_info_first_write, %object
+	.size	ftl_ext_info_first_write, 1
+ftl_ext_info_first_write:
+	.zero	1
+	.zero	61
+	.type	ftl_ext_info_data_buffer, %object
+	.size	ftl_ext_info_data_buffer, 16384
+ftl_ext_info_data_buffer:
+	.zero	16384
+	.type	ftl_low_format_cur_blk, %object
+	.size	ftl_low_format_cur_blk, 2
+ftl_low_format_cur_blk:
+	.zero	2
+	.type	_c_ftl_pm_page_num, %object
+	.size	_c_ftl_pm_page_num, 2
+_c_ftl_pm_page_num:
+	.zero	2
+	.zero	4
+	.type	g_pm_spare, %object
+	.size	g_pm_spare, 8
+g_pm_spare:
+	.zero	8
+	.type	pm_first_write, %object
+	.size	pm_first_write, 1
+pm_first_write:
+	.zero	1
+	.type	g_flash_multi_page_read_en, %object
+	.size	g_flash_multi_page_read_en, 1
+g_flash_multi_page_read_en:
+	.zero	1
+	.type	_c_ftl_byte_pre_page, %object
+	.size	_c_ftl_byte_pre_page, 2
+_c_ftl_byte_pre_page:
+	.zero	2
+	.type	pm_last_load_ram_id, %object
+	.size	pm_last_load_ram_id, 1
+pm_last_load_ram_id:
+	.zero	1
+	.zero	3
+	.type	_c_totle_data_density, %object
+	.size	_c_totle_data_density, 4
+_c_totle_data_density:
+	.zero	4
+	.zero	4
+	.type	gLoaderBootInfo, %object
+	.size	gLoaderBootInfo, 8
+gLoaderBootInfo:
+	.zero	8
+	.type	RK29_NANDC1_REG_BASE, %object
+	.size	RK29_NANDC1_REG_BASE, 8
+RK29_NANDC1_REG_BASE:
+	.zero	8
+	.type	_last_read_time, %object
+	.size	_last_read_time, 4
+_last_read_time:
+	.zero	4
+	.zero	4
+	.type	check_vpc_tbl, %object
+	.size	check_vpc_tbl, 4608
+check_vpc_tbl:
+	.zero	4608
+	.type	discard_sector_count, %object
+	.size	discard_sector_count, 4
+discard_sector_count:
+	.zero	4
+	.type	_gc_after_discard_en, %object
+	.size	_gc_after_discard_en, 4
+_gc_after_discard_en:
+	.zero	4
+	.type	_last_write_time, %object
+	.size	_last_write_time, 4
+_last_write_time:
+	.zero	4
+	.zero	4
+	.type	g_idb_buffer, %object
+	.size	g_idb_buffer, 8
+g_idb_buffer:
+	.zero	8
+	.type	gpDrmKeyInfo, %object
+	.size	gpDrmKeyInfo, 8
+gpDrmKeyInfo:
+	.zero	8
+	.type	SecureBootCheckOK, %object
+	.size	SecureBootCheckOK, 4
+SecureBootCheckOK:
+	.zero	4
+	.type	SecureBootEn, %object
+	.size	SecureBootEn, 4
+SecureBootEn:
+	.zero	4
+	.type	gpBootConfig, %object
+	.size	gpBootConfig, 8
+gpBootConfig:
+	.zero	8
+	.type	gSnSectorData, %object
+	.size	gSnSectorData, 512
+gSnSectorData:
+	.zero	512
+	.type	SecureBootUnlockTryCount, %object
+	.size	SecureBootUnlockTryCount, 4
+SecureBootUnlockTryCount:
+	.zero	4
+	.zero	4
+	.type	gpVendor0Info, %object
+	.size	gpVendor0Info, 8
+gpVendor0Info:
+	.zero	8
+	.type	gpVendor1Info, %object
+	.size	gpVendor1Info, 8
+gpVendor1Info:
+	.zero	8
+	.type	g_vendor, %object
+	.size	g_vendor, 8
+g_vendor:
+	.zero	8
+	.type	_c_ftl_nand_blks_per_die, %object
+	.size	_c_ftl_nand_blks_per_die, 2
+_c_ftl_nand_blks_per_die:
+	.zero	2
+	.zero	6
+	.type	nandc_ecc_sts, %object
+	.size	nandc_ecc_sts, 16
+nandc_ecc_sts:
+	.zero	16
+	.type	g_slc_mode_enable, %object
+	.size	g_slc_mode_enable, 1
+g_slc_mode_enable:
+	.zero	1
-- 
2.11.0

